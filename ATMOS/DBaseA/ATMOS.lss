
ATMOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003de  00800200  00003ab0  00003b44  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003ab0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005a2  008005de  008005de  00003f22  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003f22  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00003f80  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000830  00000000  00000000  00003fc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a5d5  00000000  00000000  000047f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000033cd  00000000  00000000  0000edc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004b21  00000000  00000000  00012196  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000015c8  00000000  00000000  00016cb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000248f  00000000  00000000  00018280  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000053ea  00000000  00000000  0001a70f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007b8  00000000  00000000  0001faf9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1a c1       	rjmp	.+564    	; 0x236 <__ctors_end>
       2:	00 00       	nop
       4:	38 c1       	rjmp	.+624    	; 0x276 <__bad_interrupt>
       6:	00 00       	nop
       8:	36 c1       	rjmp	.+620    	; 0x276 <__bad_interrupt>
       a:	00 00       	nop
       c:	34 c1       	rjmp	.+616    	; 0x276 <__bad_interrupt>
       e:	00 00       	nop
      10:	32 c1       	rjmp	.+612    	; 0x276 <__bad_interrupt>
      12:	00 00       	nop
      14:	30 c1       	rjmp	.+608    	; 0x276 <__bad_interrupt>
      16:	00 00       	nop
      18:	2e c1       	rjmp	.+604    	; 0x276 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2c c1       	rjmp	.+600    	; 0x276 <__bad_interrupt>
      1e:	00 00       	nop
      20:	2a c1       	rjmp	.+596    	; 0x276 <__bad_interrupt>
      22:	00 00       	nop
      24:	28 c1       	rjmp	.+592    	; 0x276 <__bad_interrupt>
      26:	00 00       	nop
      28:	26 c1       	rjmp	.+588    	; 0x276 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	24 c1       	rjmp	.+584    	; 0x276 <__bad_interrupt>
      2e:	00 00       	nop
      30:	22 c1       	rjmp	.+580    	; 0x276 <__bad_interrupt>
      32:	00 00       	nop
      34:	20 c1       	rjmp	.+576    	; 0x276 <__bad_interrupt>
      36:	00 00       	nop
      38:	1e c1       	rjmp	.+572    	; 0x276 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	2d c3       	rjmp	.+1626   	; 0x698 <__vector_15>
      3e:	00 00       	nop
      40:	1a c1       	rjmp	.+564    	; 0x276 <__bad_interrupt>
      42:	00 00       	nop
      44:	18 c1       	rjmp	.+560    	; 0x276 <__bad_interrupt>
      46:	00 00       	nop
      48:	16 c1       	rjmp	.+556    	; 0x276 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	14 c1       	rjmp	.+552    	; 0x276 <__bad_interrupt>
      4e:	00 00       	nop
      50:	12 c1       	rjmp	.+548    	; 0x276 <__bad_interrupt>
      52:	00 00       	nop
      54:	10 c1       	rjmp	.+544    	; 0x276 <__bad_interrupt>
      56:	00 00       	nop
      58:	0e c1       	rjmp	.+540    	; 0x276 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c c1       	rjmp	.+536    	; 0x276 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0a c1       	rjmp	.+532    	; 0x276 <__bad_interrupt>
      62:	00 00       	nop
      64:	08 c1       	rjmp	.+528    	; 0x276 <__bad_interrupt>
      66:	00 00       	nop
      68:	06 c1       	rjmp	.+524    	; 0x276 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	04 c1       	rjmp	.+520    	; 0x276 <__bad_interrupt>
      6e:	00 00       	nop
      70:	02 c1       	rjmp	.+516    	; 0x276 <__bad_interrupt>
      72:	00 00       	nop
      74:	00 c1       	rjmp	.+512    	; 0x276 <__bad_interrupt>
      76:	00 00       	nop
      78:	fe c0       	rjmp	.+508    	; 0x276 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fc c0       	rjmp	.+504    	; 0x276 <__bad_interrupt>
      7e:	00 00       	nop
      80:	fa c0       	rjmp	.+500    	; 0x276 <__bad_interrupt>
      82:	00 00       	nop
      84:	f8 c0       	rjmp	.+496    	; 0x276 <__bad_interrupt>
      86:	00 00       	nop
      88:	f6 c0       	rjmp	.+492    	; 0x276 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f4 c0       	rjmp	.+488    	; 0x276 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f2 c0       	rjmp	.+484    	; 0x276 <__bad_interrupt>
      92:	00 00       	nop
      94:	f0 c0       	rjmp	.+480    	; 0x276 <__bad_interrupt>
      96:	00 00       	nop
      98:	ee c0       	rjmp	.+476    	; 0x276 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ec c0       	rjmp	.+472    	; 0x276 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ea c0       	rjmp	.+468    	; 0x276 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e8 c0       	rjmp	.+464    	; 0x276 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	b9 c5       	rjmp	.+2930   	; 0xc1c <__vector_42>
      aa:	00 00       	nop
      ac:	e4 c0       	rjmp	.+456    	; 0x276 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e2 c0       	rjmp	.+452    	; 0x276 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e0 c0       	rjmp	.+448    	; 0x276 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	de c0       	rjmp	.+444    	; 0x276 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	dc c0       	rjmp	.+440    	; 0x276 <__bad_interrupt>
      be:	00 00       	nop
      c0:	da c0       	rjmp	.+436    	; 0x276 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d8 c0       	rjmp	.+432    	; 0x276 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d6 c0       	rjmp	.+428    	; 0x276 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d4 c0       	rjmp	.+424    	; 0x276 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d2 c0       	rjmp	.+420    	; 0x276 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d0 c0       	rjmp	.+416    	; 0x276 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ce c0       	rjmp	.+412    	; 0x276 <__bad_interrupt>
      da:	00 00       	nop
      dc:	cc c0       	rjmp	.+408    	; 0x276 <__bad_interrupt>
      de:	00 00       	nop
      e0:	ca c0       	rjmp	.+404    	; 0x276 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c8 c0       	rjmp	.+400    	; 0x276 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	c6 c0       	rjmp	.+396    	; 0x276 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	c4 c0       	rjmp	.+392    	; 0x276 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c2 c0       	rjmp	.+388    	; 0x276 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	c0 c0       	rjmp	.+384    	; 0x276 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	be c0       	rjmp	.+380    	; 0x276 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	bc c0       	rjmp	.+376    	; 0x276 <__bad_interrupt>
      fe:	00 00       	nop
     100:	ba c0       	rjmp	.+372    	; 0x276 <__bad_interrupt>
     102:	00 00       	nop
     104:	b8 c0       	rjmp	.+368    	; 0x276 <__bad_interrupt>
     106:	00 00       	nop
     108:	b6 c0       	rjmp	.+364    	; 0x276 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	b4 c0       	rjmp	.+360    	; 0x276 <__bad_interrupt>
     10e:	00 00       	nop
     110:	b2 c0       	rjmp	.+356    	; 0x276 <__bad_interrupt>
     112:	00 00       	nop
     114:	b0 c0       	rjmp	.+352    	; 0x276 <__bad_interrupt>
     116:	00 00       	nop
     118:	ae c0       	rjmp	.+348    	; 0x276 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	ac c0       	rjmp	.+344    	; 0x276 <__bad_interrupt>
     11e:	00 00       	nop
     120:	aa c0       	rjmp	.+340    	; 0x276 <__bad_interrupt>
     122:	00 00       	nop
     124:	a8 c0       	rjmp	.+336    	; 0x276 <__bad_interrupt>
     126:	00 00       	nop
     128:	a6 c0       	rjmp	.+332    	; 0x276 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	a4 c0       	rjmp	.+328    	; 0x276 <__bad_interrupt>
     12e:	00 00       	nop
     130:	a2 c0       	rjmp	.+324    	; 0x276 <__bad_interrupt>
	...

00000134 <__trampolines_end>:
     134:	6e 61       	ori	r22, 0x1E	; 30
     136:	6e 00       	.word	0x006e	; ????

00000138 <__c.2177>:
     138:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     148:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     158:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     168:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     178:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     188:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     198:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     208:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     218:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     228:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000236 <__ctors_end>:
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	d1 e8       	ldi	r29, 0x81	; 129
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61
     242:	00 e0       	ldi	r16, 0x00	; 0
     244:	0c bf       	out	0x3c, r16	; 60

00000246 <__do_copy_data>:
     246:	15 e0       	ldi	r17, 0x05	; 5
     248:	a0 e0       	ldi	r26, 0x00	; 0
     24a:	b2 e0       	ldi	r27, 0x02	; 2
     24c:	e0 eb       	ldi	r30, 0xB0	; 176
     24e:	fa e3       	ldi	r31, 0x3A	; 58
     250:	00 e0       	ldi	r16, 0x00	; 0
     252:	0b bf       	out	0x3b, r16	; 59
     254:	02 c0       	rjmp	.+4      	; 0x25a <__do_copy_data+0x14>
     256:	07 90       	elpm	r0, Z+
     258:	0d 92       	st	X+, r0
     25a:	ae 3d       	cpi	r26, 0xDE	; 222
     25c:	b1 07       	cpc	r27, r17
     25e:	d9 f7       	brne	.-10     	; 0x256 <__do_copy_data+0x10>

00000260 <__do_clear_bss>:
     260:	2b e0       	ldi	r18, 0x0B	; 11
     262:	ae ed       	ldi	r26, 0xDE	; 222
     264:	b5 e0       	ldi	r27, 0x05	; 5
     266:	01 c0       	rjmp	.+2      	; 0x26a <.do_clear_bss_start>

00000268 <.do_clear_bss_loop>:
     268:	1d 92       	st	X+, r1

0000026a <.do_clear_bss_start>:
     26a:	a0 38       	cpi	r26, 0x80	; 128
     26c:	b2 07       	cpc	r27, r18
     26e:	e1 f7       	brne	.-8      	; 0x268 <.do_clear_bss_loop>
     270:	94 d0       	rcall	.+296    	; 0x39a <main>
     272:	0c 94 56 1d 	jmp	0x3aac	; 0x3aac <_exit>

00000276 <__bad_interrupt>:
     276:	c4 ce       	rjmp	.-632    	; 0x0 <__vectors>

00000278 <init_parameter>:
	/* if there are some other parameters other than devices' and sensors', update them below as well */
}

/* init all devices' parameters */
void init_parameter(GlobalParameter * globalPara)
{
     278:	af 92       	push	r10
     27a:	bf 92       	push	r11
     27c:	cf 92       	push	r12
     27e:	df 92       	push	r13
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	5c 01       	movw	r10, r24
     28e:	a6 e3       	ldi	r26, 0x36	; 54
     290:	b2 e0       	ldi	r27, 0x02	; 2
     292:	fc 01       	movw	r30, r24
     294:	b0 96       	adiw	r30, 0x20	; 32
     296:	2a e2       	ldi	r18, 0x2A	; 42
     298:	32 e0       	ldi	r19, 0x02	; 2
     29a:	8e e1       	ldi	r24, 0x1E	; 30
     29c:	92 e0       	ldi	r25, 0x02	; 2
     29e:	02 e4       	ldi	r16, 0x42	; 66
     2a0:	12 e0       	ldi	r17, 0x02	; 2
	/* init all sensors' parameters */
	for( int i = 0 ; i < SensorListEnd ; ++i )
	{
		//printf("%d\t%d\t%d\t%d\n",SensorInitStartTimeList[i],SENSOR_INIT_PERIOD,SensorCheckCodeList[i],SensorNumDataList[i]);
		globalPara->SensorList[i].StartTime = SensorInitStartTimeList[i];
		globalPara->SensorList[i].ExecutePeriod = SENSOR_INIT_PERIOD;
     2a2:	0f 2e       	mov	r0, r31
     2a4:	f0 ee       	ldi	r31, 0xE0	; 224
     2a6:	cf 2e       	mov	r12, r31
     2a8:	fe e2       	ldi	r31, 0x2E	; 46
     2aa:	df 2e       	mov	r13, r31
     2ac:	e1 2c       	mov	r14, r1
     2ae:	f1 2c       	mov	r15, r1
     2b0:	f0 2d       	mov	r31, r0
{
	/* init all sensors' parameters */
	for( int i = 0 ; i < SensorListEnd ; ++i )
	{
		//printf("%d\t%d\t%d\t%d\n",SensorInitStartTimeList[i],SENSOR_INIT_PERIOD,SensorCheckCodeList[i],SensorNumDataList[i]);
		globalPara->SensorList[i].StartTime = SensorInitStartTimeList[i];
     2b2:	4d 91       	ld	r20, X+
     2b4:	5d 91       	ld	r21, X+
     2b6:	6d 91       	ld	r22, X+
     2b8:	7d 91       	ld	r23, X+
     2ba:	40 83       	st	Z, r20
     2bc:	51 83       	std	Z+1, r21	; 0x01
     2be:	62 83       	std	Z+2, r22	; 0x02
     2c0:	73 83       	std	Z+3, r23	; 0x03
		globalPara->SensorList[i].ExecutePeriod = SENSOR_INIT_PERIOD;
     2c2:	c4 82       	std	Z+4, r12	; 0x04
     2c4:	d5 82       	std	Z+5, r13	; 0x05
     2c6:	e6 82       	std	Z+6, r14	; 0x06
     2c8:	f7 82       	std	Z+7, r15	; 0x07
		globalPara->SensorList[i].CheckCode = SensorCheckCodeList[i];
     2ca:	e9 01       	movw	r28, r18
     2cc:	49 91       	ld	r20, Y+
     2ce:	59 91       	ld	r21, Y+
     2d0:	69 91       	ld	r22, Y+
     2d2:	79 91       	ld	r23, Y+
     2d4:	9e 01       	movw	r18, r28
     2d6:	44 87       	std	Z+12, r20	; 0x0c
     2d8:	55 87       	std	Z+13, r21	; 0x0d
     2da:	66 87       	std	Z+14, r22	; 0x0e
     2dc:	77 87       	std	Z+15, r23	; 0x0f
		globalPara->SensorList[i].NumOfData = SensorNumDataList[i];
     2de:	ec 01       	movw	r28, r24
     2e0:	49 91       	ld	r20, Y+
     2e2:	59 91       	ld	r21, Y+
     2e4:	69 91       	ld	r22, Y+
     2e6:	79 91       	ld	r23, Y+
     2e8:	ce 01       	movw	r24, r28
     2ea:	40 87       	std	Z+8, r20	; 0x08
     2ec:	51 87       	std	Z+9, r21	; 0x09
     2ee:	62 87       	std	Z+10, r22	; 0x0a
     2f0:	73 87       	std	Z+11, r23	; 0x0b
     2f2:	70 96       	adiw	r30, 0x10	; 16

/* init all devices' parameters */
void init_parameter(GlobalParameter * globalPara)
{
	/* init all sensors' parameters */
	for( int i = 0 ; i < SensorListEnd ; ++i )
     2f4:	a0 17       	cp	r26, r16
     2f6:	b1 07       	cpc	r27, r17
     2f8:	e1 f6       	brne	.-72     	; 0x2b2 <init_parameter+0x3a>
	
	/* init all devices' parameters */
	for( int i = 0 ; i < DeviceListEnd ; ++i )
	{
		//printf("%d\t%d\t%d\t%d\n",DeviceInitStartTimeList[i],DeviceInitPeriodList[i],DeviceCheckCodeList[i],0);
		globalPara->DeviceList[i].StartTime = DeviceInitStartTimeList[i];
     2fa:	8e e0       	ldi	r24, 0x0E	; 14
     2fc:	92 e0       	ldi	r25, 0x02	; 2
     2fe:	fc 01       	movw	r30, r24
     300:	40 81       	ld	r20, Z
     302:	51 81       	ldd	r21, Z+1	; 0x01
     304:	62 81       	ldd	r22, Z+2	; 0x02
     306:	73 81       	ldd	r23, Z+3	; 0x03
     308:	e5 01       	movw	r28, r10
     30a:	48 83       	st	Y, r20
     30c:	59 83       	std	Y+1, r21	; 0x01
     30e:	6a 83       	std	Y+2, r22	; 0x02
     310:	7b 83       	std	Y+3, r23	; 0x03
		globalPara->DeviceList[i].ExecutePeriod = DeviceInitPeriodList[i];
     312:	a6 e1       	ldi	r26, 0x16	; 22
     314:	b2 e0       	ldi	r27, 0x02	; 2
     316:	4d 91       	ld	r20, X+
     318:	5d 91       	ld	r21, X+
     31a:	6d 91       	ld	r22, X+
     31c:	7c 91       	ld	r23, X
     31e:	13 97       	sbiw	r26, 0x03	; 3
     320:	4c 83       	std	Y+4, r20	; 0x04
     322:	5d 83       	std	Y+5, r21	; 0x05
     324:	6e 83       	std	Y+6, r22	; 0x06
     326:	7f 83       	std	Y+7, r23	; 0x07
		globalPara->DeviceList[i].CheckCode = DeviceCheckCodeList[i]; 
     328:	e6 e0       	ldi	r30, 0x06	; 6
     32a:	f2 e0       	ldi	r31, 0x02	; 2
     32c:	40 81       	ld	r20, Z
     32e:	51 81       	ldd	r21, Z+1	; 0x01
     330:	62 81       	ldd	r22, Z+2	; 0x02
     332:	73 81       	ldd	r23, Z+3	; 0x03
     334:	4c 87       	std	Y+12, r20	; 0x0c
     336:	5d 87       	std	Y+13, r21	; 0x0d
     338:	6e 87       	std	Y+14, r22	; 0x0e
     33a:	7f 87       	std	Y+15, r23	; 0x0f
		globalPara->DeviceList[i].NumOfData = 0;
     33c:	18 86       	std	Y+8, r1	; 0x08
     33e:	19 86       	std	Y+9, r1	; 0x09
     340:	1a 86       	std	Y+10, r1	; 0x0a
     342:	1b 86       	std	Y+11, r1	; 0x0b
	
	/* init all devices' parameters */
	for( int i = 0 ; i < DeviceListEnd ; ++i )
	{
		//printf("%d\t%d\t%d\t%d\n",DeviceInitStartTimeList[i],DeviceInitPeriodList[i],DeviceCheckCodeList[i],0);
		globalPara->DeviceList[i].StartTime = DeviceInitStartTimeList[i];
     344:	ec 01       	movw	r28, r24
     346:	4c 81       	ldd	r20, Y+4	; 0x04
     348:	5d 81       	ldd	r21, Y+5	; 0x05
     34a:	6e 81       	ldd	r22, Y+6	; 0x06
     34c:	7f 81       	ldd	r23, Y+7	; 0x07
     34e:	e5 01       	movw	r28, r10
     350:	48 8b       	std	Y+16, r20	; 0x10
     352:	59 8b       	std	Y+17, r21	; 0x11
     354:	6a 8b       	std	Y+18, r22	; 0x12
     356:	7b 8b       	std	Y+19, r23	; 0x13
		globalPara->DeviceList[i].ExecutePeriod = DeviceInitPeriodList[i];
     358:	14 96       	adiw	r26, 0x04	; 4
     35a:	8d 91       	ld	r24, X+
     35c:	9d 91       	ld	r25, X+
     35e:	0d 90       	ld	r0, X+
     360:	bc 91       	ld	r27, X
     362:	a0 2d       	mov	r26, r0
     364:	8c 8b       	std	Y+20, r24	; 0x14
     366:	9d 8b       	std	Y+21, r25	; 0x15
     368:	ae 8b       	std	Y+22, r26	; 0x16
     36a:	bf 8b       	std	Y+23, r27	; 0x17
		globalPara->DeviceList[i].CheckCode = DeviceCheckCodeList[i]; 
     36c:	84 81       	ldd	r24, Z+4	; 0x04
     36e:	95 81       	ldd	r25, Z+5	; 0x05
     370:	a6 81       	ldd	r26, Z+6	; 0x06
     372:	b7 81       	ldd	r27, Z+7	; 0x07
     374:	8c 8f       	std	Y+28, r24	; 0x1c
     376:	9d 8f       	std	Y+29, r25	; 0x1d
     378:	ae 8f       	std	Y+30, r26	; 0x1e
     37a:	bf 8f       	std	Y+31, r27	; 0x1f
		globalPara->DeviceList[i].NumOfData = 0;
     37c:	18 8e       	std	Y+24, r1	; 0x18
     37e:	19 8e       	std	Y+25, r1	; 0x19
     380:	1a 8e       	std	Y+26, r1	; 0x1a
     382:	1b 8e       	std	Y+27, r1	; 0x1b
	}
}
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	ff 90       	pop	r15
     38e:	ef 90       	pop	r14
     390:	df 90       	pop	r13
     392:	cf 90       	pop	r12
     394:	bf 90       	pop	r11
     396:	af 90       	pop	r10
     398:	08 95       	ret

0000039a <main>:
	// load_new_sensor( 4, 4, (BaseSensor *)Si7020_ptr, 0 );	
}

int main(void)
{
	SYS_Init();
     39a:	0e 94 3f 0a 	call	0x147e	; 0x147e <SYS_Init>
tm cur_time;
GlobalParameter GP;

/* TODO : clean up these messy init */
static void APP_Init(void){
	PWR_Init();
     39e:	f3 d2       	rcall	.+1510   	; 0x986 <PWR_Init>
	PWR_TurnOn5V();
     3a0:	f6 d2       	rcall	.+1516   	; 0x98e <PWR_TurnOn5V>
	USART0_Init(9600);
     3a2:	60 e8       	ldi	r22, 0x80	; 128
     3a4:	75 e2       	ldi	r23, 0x25	; 37
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	ce d3       	rcall	.+1948   	; 0xb48 <USART0_Init>
	DDRB |= 0b00010000;
     3ac:	24 9a       	sbi	0x04, 4	; 4
	DDRE |= 0b00001000;
     3ae:	6b 9a       	sbi	0x0d, 3	; 13
	PORTE|= 0b00001000;
     3b0:	73 9a       	sbi	0x0e, 3	; 14
	TWI_Init(10000);
     3b2:	60 e1       	ldi	r22, 0x10	; 16
     3b4:	77 e2       	ldi	r23, 0x27	; 39
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	ef d2       	rcall	.+1502   	; 0x99a <TWI_Init>
	ADC_Init();
     3bc:	61 d1       	rcall	.+706    	; 0x680 <ADC_Init>
	printf("BMP280 Status %i\n", BMP280_Init());
     3be:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <BMP280_Init>
     3c2:	9f 93       	push	r25
     3c4:	8f 93       	push	r24
     3c6:	86 e9       	ldi	r24, 0x96	; 150
     3c8:	92 e0       	ldi	r25, 0x02	; 2
     3ca:	9f 93       	push	r25
     3cc:	8f 93       	push	r24
     3ce:	0e 94 b0 1c 	call	0x3960	; 0x3960 <printf>
	BMP280_SetOversampling(4);
     3d2:	84 e0       	ldi	r24, 0x04	; 4
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <BMP280_SetOversampling>
	SPI_SlaveInit();
     3da:	db d2       	rcall	.+1462   	; 0x992 <SPI_SlaveInit>
	SensorDataCount = 0;
     3dc:	10 92 f6 0a 	sts	0x0AF6, r1
     3e0:	10 92 f5 0a 	sts	0x0AF5, r1
}

static void DEVICE_Init(void){
	
	init_parameter(&GP);
     3e4:	87 ef       	ldi	r24, 0xF7	; 247
     3e6:	9a e0       	ldi	r25, 0x0A	; 10
     3e8:	47 df       	rcall	.-370    	; 0x278 <init_parameter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ea:	8f e8       	ldi	r24, 0x8F	; 143
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	01 97       	sbiw	r24, 0x01	; 1
     3f0:	f1 f7       	brne	.-4      	; 0x3ee <main+0x54>
     3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <main+0x5a>
     3f4:	00 00       	nop
	delay_us(100);
		
	init_timeoutq();
     3f6:	5b d6       	rcall	.+3254   	; 0x10ae <init_timeoutq>
     3f8:	8f e8       	ldi	r24, 0x8F	; 143
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	f1 f7       	brne	.-4      	; 0x3fc <main+0x62>
     400:	00 c0       	rjmp	.+0      	; 0x402 <main+0x68>
     402:	00 00       	nop
	delay_us(100);
	
	init_timestamp(&cur_time);
     404:	87 e1       	ldi	r24, 0x17	; 23
     406:	99 e0       	ldi	r25, 0x09	; 9
     408:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <init_timestamp>
     40c:	8f e8       	ldi	r24, 0x8F	; 143
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	01 97       	sbiw	r24, 0x01	; 1
     412:	f1 f7       	brne	.-4      	; 0x410 <main+0x76>
     414:	00 c0       	rjmp	.+0      	; 0x416 <main+0x7c>
     416:	00 00       	nop
	delay_us(100);
	
	BMP280Sensor *BMP280_ptr = New_BMP280_Sensor( 0,2 );
     418:	62 e0       	ldi	r22, 0x02	; 2
     41a:	70 e0       	ldi	r23, 0x00	; 0
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	0e 94 1c 14 	call	0x2838	; 0x2838 <New_BMP280_Sensor>
     424:	8c 01       	movw	r16, r24
	printf("init success");
     426:	88 ea       	ldi	r24, 0xA8	; 168
     428:	92 e0       	ldi	r25, 0x02	; 2
     42a:	9f 93       	push	r25
     42c:	8f 93       	push	r24
     42e:	0e 94 b0 1c 	call	0x3960	; 0x3960 <printf>
     432:	8f e8       	ldi	r24, 0x8F	; 143
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	01 97       	sbiw	r24, 0x01	; 1
     438:	f1 f7       	brne	.-4      	; 0x436 <main+0x9c>
     43a:	00 c0       	rjmp	.+0      	; 0x43c <main+0xa2>
     43c:	00 00       	nop
	delay_us(100);
	
	/*Si7020Sensor *Si_ptr = New_Si7020_Sensor(0,2); */
	K30Sensor *K30_ptr = New_K30_Sensor(0,1);
     43e:	61 e0       	ldi	r22, 0x01	; 1
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	da d0       	rcall	.+436    	; 0x5fc <New_K30_Sensor>
     448:	4c 01       	movw	r8, r24
	
	DemoStorageDevice *Strg_ptr = New_DemoStorage_Device(0);
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 6d 12 	call	0x24da	; 0x24da <New_DemoStorage_Device>
     452:	6c 01       	movw	r12, r24
	LoadDataDevice *Load_ptr = New_LoadData_Device(0,Strg_ptr);
     454:	bc 01       	movw	r22, r24
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	0e 94 49 13 	call	0x2692	; 0x2692 <New_LoadData_Device>
     45e:	5c 01       	movw	r10, r24
	
	init_Event_Timer();
     460:	63 d1       	rcall	.+710    	; 0x728 <init_Event_Timer>
	printf("init done!\n");
     462:	85 eb       	ldi	r24, 0xB5	; 181
     464:	92 e0       	ldi	r25, 0x02	; 2
     466:	0e 94 c8 1c 	call	0x3990	; 0x3990 <puts>
	
	/* load all sensors */
	load_new_sensor( GP.SensorList[BMP280].StartTime, GP.SensorList[BMP280].ExecutePeriod, (BaseSensor *)BMP280_ptr, 0 );
     46a:	c7 ef       	ldi	r28, 0xF7	; 247
     46c:	da e0       	ldi	r29, 0x0A	; 10
     46e:	2c a1       	ldd	r18, Y+36	; 0x24
     470:	3d a1       	ldd	r19, Y+37	; 0x25
     472:	4e a1       	ldd	r20, Y+38	; 0x26
     474:	5f a1       	ldd	r21, Y+39	; 0x27
     476:	68 a1       	ldd	r22, Y+32	; 0x20
     478:	79 a1       	ldd	r23, Y+33	; 0x21
     47a:	8a a1       	ldd	r24, Y+34	; 0x22
     47c:	9b a1       	ldd	r25, Y+35	; 0x23
     47e:	e1 2c       	mov	r14, r1
     480:	f1 2c       	mov	r15, r1
     482:	cc d6       	rcall	.+3480   	; 0x121c <load_new_sensor>
	/* load_new_sensor( GP.SensorList[Si7020].StartTime, GP.SensorList[Si7020].ExecutePeriod, (BaseSensor *)Si_ptr, 0 ); */
	load_new_sensor( GP.SensorList[K30].StartTime, GP.SensorList[K30].ExecutePeriod, (BaseSensor *)K30_ptr, 0 );
     484:	20 91 3b 0b 	lds	r18, 0x0B3B
     488:	30 91 3c 0b 	lds	r19, 0x0B3C
     48c:	40 91 3d 0b 	lds	r20, 0x0B3D
     490:	50 91 3e 0b 	lds	r21, 0x0B3E
     494:	60 91 37 0b 	lds	r22, 0x0B37
     498:	70 91 38 0b 	lds	r23, 0x0B38
     49c:	80 91 39 0b 	lds	r24, 0x0B39
     4a0:	90 91 3a 0b 	lds	r25, 0x0B3A
     4a4:	84 01       	movw	r16, r8
     4a6:	ba d6       	rcall	.+3444   	; 0x121c <load_new_sensor>
	
	
	printf("%d\t%d\n",GP.DeviceList[DemoStorage].StartTime,GP.DeviceList[DemoStorage].ExecutePeriod);
     4a8:	8f 89       	ldd	r24, Y+23	; 0x17
     4aa:	8f 93       	push	r24
     4ac:	8e 89       	ldd	r24, Y+22	; 0x16
     4ae:	8f 93       	push	r24
     4b0:	8d 89       	ldd	r24, Y+21	; 0x15
     4b2:	8f 93       	push	r24
     4b4:	8c 89       	ldd	r24, Y+20	; 0x14
     4b6:	8f 93       	push	r24
     4b8:	8b 89       	ldd	r24, Y+19	; 0x13
     4ba:	8f 93       	push	r24
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	8f 93       	push	r24
     4c0:	89 89       	ldd	r24, Y+17	; 0x11
     4c2:	8f 93       	push	r24
     4c4:	88 89       	ldd	r24, Y+16	; 0x10
     4c6:	8f 93       	push	r24
     4c8:	20 ec       	ldi	r18, 0xC0	; 192
     4ca:	32 e0       	ldi	r19, 0x02	; 2
     4cc:	3f 93       	push	r19
     4ce:	2f 93       	push	r18
     4d0:	0e 94 b0 1c 	call	0x3960	; 0x3960 <printf>
	/* load all ( non-sensor ) devices */
	load_new_device( GP.DeviceList[DemoLoadData].StartTime, GP.DeviceList[DemoLoadData].ExecutePeriod, (BaseDevice *)Load_ptr, 0 );
     4d4:	2c 81       	ldd	r18, Y+4	; 0x04
     4d6:	3d 81       	ldd	r19, Y+5	; 0x05
     4d8:	4e 81       	ldd	r20, Y+6	; 0x06
     4da:	5f 81       	ldd	r21, Y+7	; 0x07
     4dc:	68 81       	ld	r22, Y
     4de:	79 81       	ldd	r23, Y+1	; 0x01
     4e0:	8a 81       	ldd	r24, Y+2	; 0x02
     4e2:	9b 81       	ldd	r25, Y+3	; 0x03
     4e4:	85 01       	movw	r16, r10
     4e6:	dc d6       	rcall	.+3512   	; 0x12a0 <load_new_device>
	load_new_device( GP.DeviceList[DemoStorage].StartTime, GP.DeviceList[DemoStorage].ExecutePeriod, (BaseDevice *)Strg_ptr, 0 );
     4e8:	2c 89       	ldd	r18, Y+20	; 0x14
     4ea:	3d 89       	ldd	r19, Y+21	; 0x15
     4ec:	4e 89       	ldd	r20, Y+22	; 0x16
     4ee:	5f 89       	ldd	r21, Y+23	; 0x17
     4f0:	68 89       	ldd	r22, Y+16	; 0x10
     4f2:	79 89       	ldd	r23, Y+17	; 0x11
     4f4:	8a 89       	ldd	r24, Y+18	; 0x12
     4f6:	9b 89       	ldd	r25, Y+19	; 0x13
     4f8:	86 01       	movw	r16, r12
     4fa:	d2 d6       	rcall	.+3492   	; 0x12a0 <load_new_device>
{
	SYS_Init();
	APP_Init();
	DEVICE_Init();

	init_set_timer( get_next_interval() );
     4fc:	22 d6       	rcall	.+3140   	; 0x1142 <get_next_interval>
     4fe:	0f d2       	rcall	.+1054   	; 0x91e <init_set_timer>
	
	// Enable global interrupt //
	sei();
     500:	78 94       	sei
     502:	8d b7       	in	r24, 0x3d	; 61
     504:	9e b7       	in	r25, 0x3e	; 62
     506:	40 96       	adiw	r24, 0x10	; 16
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	f8 94       	cli
     50c:	9e bf       	out	0x3e, r25	; 62
     50e:	0f be       	out	0x3f, r0	; 63
     510:	8d bf       	out	0x3d, r24	; 61

	for (;;){}
     512:	ff cf       	rjmp	.-2      	; 0x512 <main+0x178>

00000514 <K30_FctnInit>:
	K30_getType
};

void K30_FctnInit(K30Sensor *this)
{
	this->inherited.vmt = &K30_vmt;
     514:	2a e4       	ldi	r18, 0x4A	; 74
     516:	32 e0       	ldi	r19, 0x02	; 2
     518:	fc 01       	movw	r30, r24
     51a:	35 87       	std	Z+13, r19	; 0x0d
     51c:	24 87       	std	Z+12, r18	; 0x0c
     51e:	08 95       	ret

00000520 <K30_Configure>:

int K30_Configure(K30Sensor *this )
{
	// virtual function
	return 0;
}
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	08 95       	ret

00000526 <K30_Error>:

int K30_Error(K30Sensor *this )
{
	// virtual function
	return 0;
}
     526:	80 e0       	ldi	r24, 0x00	; 0
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	08 95       	ret

0000052c <K30_VTinit>:
void K30_VTinit( K30Sensor* this)
{
	this->inherited.abstract.device_vt = &K30_abstract_vmt;
     52c:	22 e4       	ldi	r18, 0x42	; 66
     52e:	32 e0       	ldi	r19, 0x02	; 2
     530:	fc 01       	movw	r30, r24
     532:	31 83       	std	Z+1, r19	; 0x01
     534:	20 83       	st	Z, r18
     536:	08 95       	ret

00000538 <K30_reset>:

int K30_reset( K30Sensor* this)
{
	// virtual function
	return 0;
}
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	08 95       	ret

0000053e <K30_getType>:

int K30_getType(K30Sensor* this)
{
	return TYPE_SENSOR;
}
     53e:	83 e0       	ldi	r24, 0x03	; 3
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	08 95       	ret

00000544 <K30_Request>:
	int sum=0;
	
	char status;
	//printf("K30_readCO2");
	unsigned char buffer[4]={0,0,0,0};
	status=TWI_BeginWrite(0x68);
     544:	88 e6       	ldi	r24, 0x68	; 104
     546:	55 d2       	rcall	.+1194   	; 0x9f2 <TWI_BeginWrite>
	if(status!=TWI_SLAW_ACK) return 0;
     548:	88 31       	cpi	r24, 0x18	; 24
     54a:	71 f4       	brne	.+28     	; 0x568 <K30_Request+0x24>
	status=TWI_Write(&readcmd[0],4);
     54c:	64 e0       	ldi	r22, 0x04	; 4
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	84 e5       	ldi	r24, 0x54	; 84
     552:	92 e0       	ldi	r25, 0x02	; 2
     554:	e0 d2       	rcall	.+1472   	; 0xb16 <TWI_Write>
	if(status!=TWI_SENT_ACK) return 0;
     556:	88 32       	cpi	r24, 0x28	; 40
     558:	39 f4       	brne	.+14     	; 0x568 <K30_Request+0x24>
	TWI_Stop();
     55a:	9e d2       	rcall	.+1340   	; 0xa98 <TWI_Stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     55c:	8f e3       	ldi	r24, 0x3F	; 63
     55e:	9c e9       	ldi	r25, 0x9C	; 156
     560:	01 97       	sbiw	r24, 0x01	; 1
     562:	f1 f7       	brne	.-4      	; 0x560 <K30_Request+0x1c>
     564:	00 c0       	rjmp	.+0      	; 0x566 <K30_Request+0x22>
     566:	00 00       	nop
	_delay_ms(10);
	return 0;
}
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	08 95       	ret

0000056e <K30_Collect>:

int K30_Collect(K30Sensor *this )
{
     56e:	cf 93       	push	r28
     570:	df 93       	push	r29
     572:	00 d0       	rcall	.+0      	; 0x574 <K30_Collect+0x6>
     574:	1f 92       	push	r1
     576:	cd b7       	in	r28, 0x3d	; 61
     578:	de b7       	in	r29, 0x3e	; 62
	int val=0;
	int sum=0;
	
	char status;
	//printf("K30_readCO2");
	unsigned char buffer[4]={0,0,0,0};
     57a:	19 82       	std	Y+1, r1	; 0x01
     57c:	1a 82       	std	Y+2, r1	; 0x02
     57e:	1b 82       	std	Y+3, r1	; 0x03
     580:	1c 82       	std	Y+4, r1	; 0x04
	status=TWI_BeginRead(0x68);
     582:	88 e6       	ldi	r24, 0x68	; 104
     584:	52 d2       	rcall	.+1188   	; 0xa2a <TWI_BeginRead>
	if(status!=TWI_SLAR_ACK) return 0;
     586:	80 34       	cpi	r24, 0x40	; 64
     588:	f1 f4       	brne	.+60     	; 0x5c6 <K30_Collect+0x58>
	status=TWI_Read(&buffer[0],4,true);
     58a:	41 e0       	ldi	r20, 0x01	; 1
     58c:	64 e0       	ldi	r22, 0x04	; 4
     58e:	70 e0       	ldi	r23, 0x00	; 0
     590:	ce 01       	movw	r24, r28
     592:	01 96       	adiw	r24, 0x01	; 1
     594:	86 d2       	rcall	.+1292   	; 0xaa2 <TWI_Read>
	if(status!=TWI_REC_ACK) return 0;
     596:	80 35       	cpi	r24, 0x50	; 80
     598:	c9 f4       	brne	.+50     	; 0x5cc <K30_Collect+0x5e>
	TWI_Stop();
     59a:	7e d2       	rcall	.+1276   	; 0xa98 <TWI_Stop>
	
	val = 0;
	val |= buffer[1] & 0xFF;
     59c:	8a 81       	ldd	r24, Y+2	; 0x02
     59e:	90 e0       	ldi	r25, 0x00	; 0
	val = val << 8;
	val |= buffer[2] & 0xFF;
     5a0:	2b 81       	ldd	r18, Y+3	; 0x03
     5a2:	30 e0       	ldi	r19, 0x00	; 0
	sum = buffer[0] + buffer[1] + buffer[2];
	if(sum==buffer[3]){return val;}
     5a4:	6c 81       	ldd	r22, Y+4	; 0x04
     5a6:	70 e0       	ldi	r23, 0x00	; 0
	
	val = 0;
	val |= buffer[1] & 0xFF;
	val = val << 8;
	val |= buffer[2] & 0xFF;
	sum = buffer[0] + buffer[1] + buffer[2];
     5a8:	49 81       	ldd	r20, Y+1	; 0x01
     5aa:	fc 01       	movw	r30, r24
     5ac:	e4 0f       	add	r30, r20
     5ae:	f1 1d       	adc	r31, r1
     5b0:	af 01       	movw	r20, r30
     5b2:	42 0f       	add	r20, r18
     5b4:	53 1f       	adc	r21, r19
	if(sum==buffer[3]){return val;}
     5b6:	64 17       	cp	r22, r20
     5b8:	75 07       	cpc	r23, r21
     5ba:	59 f4       	brne	.+22     	; 0x5d2 <K30_Collect+0x64>
	if(status!=TWI_REC_ACK) return 0;
	TWI_Stop();
	
	val = 0;
	val |= buffer[1] & 0xFF;
	val = val << 8;
     5bc:	98 2f       	mov	r25, r24
     5be:	88 27       	eor	r24, r24
	val |= buffer[2] & 0xFF;
	sum = buffer[0] + buffer[1] + buffer[2];
	if(sum==buffer[3]){return val;}
     5c0:	82 2b       	or	r24, r18
     5c2:	93 2b       	or	r25, r19
     5c4:	08 c0       	rjmp	.+16     	; 0x5d6 <K30_Collect+0x68>
	
	char status;
	//printf("K30_readCO2");
	unsigned char buffer[4]={0,0,0,0};
	status=TWI_BeginRead(0x68);
	if(status!=TWI_SLAR_ACK) return 0;
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	05 c0       	rjmp	.+10     	; 0x5d6 <K30_Collect+0x68>
	status=TWI_Read(&buffer[0],4,true);
	if(status!=TWI_REC_ACK) return 0;
     5cc:	80 e0       	ldi	r24, 0x00	; 0
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	02 c0       	rjmp	.+4      	; 0x5d6 <K30_Collect+0x68>
	val |= buffer[1] & 0xFF;
	val = val << 8;
	val |= buffer[2] & 0xFF;
	sum = buffer[0] + buffer[1] + buffer[2];
	if(sum==buffer[3]){return val;}
	else{return 0;}
     5d2:	80 e0       	ldi	r24, 0x00	; 0
     5d4:	90 e0       	ldi	r25, 0x00	; 0
}
     5d6:	0f 90       	pop	r0
     5d8:	0f 90       	pop	r0
     5da:	0f 90       	pop	r0
     5dc:	0f 90       	pop	r0
     5de:	df 91       	pop	r29
     5e0:	cf 91       	pop	r28
     5e2:	08 95       	ret

000005e4 <K30_init>:
	this->inherited.abstract.device_vt = &K30_abstract_vmt;
}

int K30_init( K30Sensor* this)
{
	TWI_Init(200000);
     5e4:	60 e4       	ldi	r22, 0x40	; 64
     5e6:	7d e0       	ldi	r23, 0x0D	; 13
     5e8:	83 e0       	ldi	r24, 0x03	; 3
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	d6 d1       	rcall	.+940    	; 0x99a <TWI_Init>
	printf("K30 Sensor Init\n");
     5ee:	87 ec       	ldi	r24, 0xC7	; 199
     5f0:	92 e0       	ldi	r25, 0x02	; 2
     5f2:	0e 94 c8 1c 	call	0x3990	; 0x3990 <puts>
	return 0;
}
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	08 95       	ret

000005fc <New_K30_Sensor>:
	return TYPE_SENSOR;
}


K30Sensor* New_K30_Sensor( int num, int NumData)
{
     5fc:	ef 92       	push	r14
     5fe:	ff 92       	push	r15
     600:	0f 93       	push	r16
     602:	1f 93       	push	r17
     604:	cf 93       	push	r28
     606:	df 93       	push	r29
     608:	7c 01       	movw	r14, r24
     60a:	8b 01       	movw	r16, r22
	K30Sensor *p = malloc(sizeof(K30Sensor));
     60c:	8e e0       	ldi	r24, 0x0E	; 14
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <malloc>
     614:	ec 01       	movw	r28, r24
	// virtual function
	return 0;
}
void K30_VTinit( K30Sensor* this)
{
	this->inherited.abstract.device_vt = &K30_abstract_vmt;
     616:	82 e4       	ldi	r24, 0x42	; 66
     618:	92 e0       	ldi	r25, 0x02	; 2
     61a:	99 83       	std	Y+1, r25	; 0x01
     61c:	88 83       	st	Y, r24
	K30_getType
};

void K30_FctnInit(K30Sensor *this)
{
	this->inherited.vmt = &K30_vmt;
     61e:	8a e4       	ldi	r24, 0x4A	; 74
     620:	92 e0       	ldi	r25, 0x02	; 2
     622:	9d 87       	std	Y+13, r25	; 0x0d
     624:	8c 87       	std	Y+12, r24	; 0x0c
K30Sensor* New_K30_Sensor( int num, int NumData)
{
	K30Sensor *p = malloc(sizeof(K30Sensor));
	K30_VTinit( p );
	K30_FctnInit( p );
	p->inherited.getStartNum = fctn_getStartNum;
     626:	83 ef       	ldi	r24, 0xF3	; 243
     628:	9c e0       	ldi	r25, 0x0C	; 12
     62a:	99 87       	std	Y+9, r25	; 0x09
     62c:	88 87       	std	Y+8, r24	; 0x08
	p->inherited.getEndNum = fctn_getEndNum;
     62e:	87 ef       	ldi	r24, 0xF7	; 247
     630:	9c e0       	ldi	r25, 0x0C	; 12
     632:	9b 87       	std	Y+11, r25	; 0x0b
     634:	8a 87       	std	Y+10, r24	; 0x0a
	
	p->inherited.test_num = num;
     636:	fb 82       	std	Y+3, r15	; 0x03
     638:	ea 82       	std	Y+2, r14	; 0x02
	p->inherited.NumOfData = NumData;
     63a:	1f 83       	std	Y+7, r17	; 0x07
     63c:	0e 83       	std	Y+6, r16	; 0x06
	p->inherited.StartNum = SensorDataCount;
     63e:	80 91 f5 0a 	lds	r24, 0x0AF5
     642:	90 91 f6 0a 	lds	r25, 0x0AF6
     646:	9d 83       	std	Y+5, r25	; 0x05
     648:	8c 83       	std	Y+4, r24	; 0x04
	SensorDataCount += NumData;
     64a:	b8 01       	movw	r22, r16
     64c:	68 0f       	add	r22, r24
     64e:	79 1f       	adc	r23, r25
     650:	70 93 f6 0a 	sts	0x0AF6, r23
     654:	60 93 f5 0a 	sts	0x0AF5, r22
	printf("SensorDataCount %d\n",SensorDataCount);
     658:	7f 93       	push	r23
     65a:	6f 93       	push	r22
     65c:	87 ed       	ldi	r24, 0xD7	; 215
     65e:	92 e0       	ldi	r25, 0x02	; 2
     660:	9f 93       	push	r25
     662:	8f 93       	push	r24
     664:	0e 94 b0 1c 	call	0x3960	; 0x3960 <printf>
	
	return p;
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
}
     670:	ce 01       	movw	r24, r28
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	ff 90       	pop	r15
     67c:	ef 90       	pop	r14
     67e:	08 95       	ret

00000680 <ADC_Init>:

/*************************************************************************//**
  @brief Initializes the ADC
*****************************************************************************/
void ADC_Init(void) {
	ADCSRA = (1<<ADEN)|(4<<ADPS0); //enables the ADC module, CPU clock prescale=16
     680:	84 e8       	ldi	r24, 0x84	; 132
     682:	80 93 7a 00 	sts	0x007A, r24
	
	ADCSRC = 0x05|(1<<ADTHT0)|(1<<ADTHT1); //ADSUT=5
     686:	85 ec       	ldi	r24, 0xC5	; 197
     688:	80 93 77 00 	sts	0x0077, r24
	while((ADCSRB&(1<<AVDDOK))==0);
     68c:	eb e7       	ldi	r30, 0x7B	; 123
     68e:	f0 e0       	ldi	r31, 0x00	; 0
     690:	80 81       	ld	r24, Z
     692:	88 23       	and	r24, r24
     694:	ec f7       	brge	.-6      	; 0x690 <ADC_Init+0x10>
}
     696:	08 95       	ret

00000698 <__vector_15>:

/*************************************************************************//**
  @brief Timer Interrupt Service Routine
*****************************************************************************/
ISR(TIMER2_OVF_vect)
{
     698:	1f 92       	push	r1
     69a:	0f 92       	push	r0
     69c:	0f b6       	in	r0, 0x3f	; 63
     69e:	0f 92       	push	r0
     6a0:	11 24       	eor	r1, r1
     6a2:	0b b6       	in	r0, 0x3b	; 59
     6a4:	0f 92       	push	r0
     6a6:	2f 93       	push	r18
     6a8:	3f 93       	push	r19
     6aa:	4f 93       	push	r20
     6ac:	5f 93       	push	r21
     6ae:	6f 93       	push	r22
     6b0:	7f 93       	push	r23
     6b2:	8f 93       	push	r24
     6b4:	9f 93       	push	r25
     6b6:	af 93       	push	r26
     6b8:	bf 93       	push	r27
     6ba:	ef 93       	push	r30
     6bc:	ff 93       	push	r31
	timer_usage ++;
     6be:	80 91 e4 05 	lds	r24, 0x05E4
     6c2:	90 91 e5 05 	lds	r25, 0x05E5
     6c6:	01 96       	adiw	r24, 0x01	; 1
     6c8:	90 93 e5 05 	sts	0x05E5, r25
     6cc:	80 93 e4 05 	sts	0x05E4, r24
	// printf("count1 = %d\n",timer_usage);
	printf("Timestamp : %ld\n",(TimeStamp));
     6d0:	80 91 e3 05 	lds	r24, 0x05E3
     6d4:	8f 93       	push	r24
     6d6:	80 91 e2 05 	lds	r24, 0x05E2
     6da:	8f 93       	push	r24
     6dc:	80 91 e1 05 	lds	r24, 0x05E1
     6e0:	8f 93       	push	r24
     6e2:	80 91 e0 05 	lds	r24, 0x05E0
     6e6:	8f 93       	push	r24
     6e8:	8b ee       	ldi	r24, 0xEB	; 235
     6ea:	92 e0       	ldi	r25, 0x02	; 2
     6ec:	9f 93       	push	r25
     6ee:	8f 93       	push	r24
     6f0:	0e 94 b0 1c 	call	0x3960	; 0x3960 <printf>
	handle_timeoutq_event();	
     6f4:	19 d6       	rcall	.+3122   	; 0x1328 <handle_timeoutq_event>
     6f6:	0f 90       	pop	r0
     6f8:	0f 90       	pop	r0
     6fa:	0f 90       	pop	r0
     6fc:	0f 90       	pop	r0
     6fe:	0f 90       	pop	r0
     700:	0f 90       	pop	r0
}
     702:	ff 91       	pop	r31
     704:	ef 91       	pop	r30
     706:	bf 91       	pop	r27
     708:	af 91       	pop	r26
     70a:	9f 91       	pop	r25
     70c:	8f 91       	pop	r24
     70e:	7f 91       	pop	r23
     710:	6f 91       	pop	r22
     712:	5f 91       	pop	r21
     714:	4f 91       	pop	r20
     716:	3f 91       	pop	r19
     718:	2f 91       	pop	r18
     71a:	0f 90       	pop	r0
     71c:	0b be       	out	0x3b, r0	; 59
     71e:	0f 90       	pop	r0
     720:	0f be       	out	0x3f, r0	; 63
     722:	0f 90       	pop	r0
     724:	1f 90       	pop	r1
     726:	18 95       	reti

00000728 <init_Event_Timer>:

/* Initialization Routine Example 3 : Timer 2 Async operation */
/* Clock for Timer 2 is taken from crystal connected to TOSC pins */
void init_Event_Timer(void)
{
	TimeStamp = 0;
     728:	10 92 e0 05 	sts	0x05E0, r1
     72c:	10 92 e1 05 	sts	0x05E1, r1
     730:	10 92 e2 05 	sts	0x05E2, r1
     734:	10 92 e3 05 	sts	0x05E3, r1
	timer_usage = 0;
     738:	10 92 e5 05 	sts	0x05E5, r1
     73c:	10 92 e4 05 	sts	0x05E4, r1
	/* Select clock source as crystal on TOSCn pins */
	ASSR |= 1 << AS2;
     740:	e6 eb       	ldi	r30, 0xB6	; 182
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	80 81       	ld	r24, Z
     746:	80 62       	ori	r24, 0x20	; 32
     748:	80 83       	st	Z, r24
	
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
     74a:	80 81       	ld	r24, Z
     74c:	8f 71       	andi	r24, 0x1F	; 31
     74e:	e9 f7       	brne	.-6      	; 0x74a <init_Event_Timer+0x22>
	
	/* Stop timer 2 */
	TCCR2B = 0x00;
     750:	10 92 b1 00 	sts	0x00B1, r1
     754:	08 95       	ret

00000756 <general_set_timer>:
	// TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
}


void general_set_timer( int32_t period_number )
{
     756:	cf 92       	push	r12
     758:	df 92       	push	r13
     75a:	ef 92       	push	r14
     75c:	ff 92       	push	r15
     75e:	6b 01       	movw	r12, r22
     760:	7c 01       	movw	r14, r24
	// printf("debug %d\n",period_number);
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
     762:	e6 eb       	ldi	r30, 0xB6	; 182
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	80 81       	ld	r24, Z
     768:	8f 71       	andi	r24, 0x1F	; 31
     76a:	e9 f7       	brne	.-6      	; 0x766 <general_set_timer+0x10>
	/* Stop timer 2 */
	TCCR2B = 0x00;
     76c:	10 92 b1 00 	sts	0x00B1, r1
	
	
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
     770:	e6 eb       	ldi	r30, 0xB6	; 182
     772:	f0 e0       	ldi	r31, 0x00	; 0
     774:	80 81       	ld	r24, Z
     776:	8f 71       	andi	r24, 0x1F	; 31
     778:	e9 f7       	brne	.-6      	; 0x774 <general_set_timer+0x1e>
	 *  1    1    0     256		2s/256
	 *  1    1    1    1024		8s/256
	 */
	// Resolution
	// 0.25s/256
	if( period_number <= 250 )
     77a:	8b ef       	ldi	r24, 0xFB	; 251
     77c:	c8 16       	cp	r12, r24
     77e:	d1 04       	cpc	r13, r1
     780:	e1 04       	cpc	r14, r1
     782:	f1 04       	cpc	r15, r1
     784:	ec f4       	brge	.+58     	; 0x7c0 <general_set_timer+0x6a>
	{
		temp = 256 - (int32_t) ( 256.0/250.0 * period_number);
     786:	c7 01       	movw	r24, r14
     788:	b6 01       	movw	r22, r12
     78a:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__floatsisf>
     78e:	2f e6       	ldi	r18, 0x6F	; 111
     790:	32 e1       	ldi	r19, 0x12	; 18
     792:	43 e8       	ldi	r20, 0x83	; 131
     794:	5f e3       	ldi	r21, 0x3F	; 63
     796:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <__mulsf3>
     79a:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	31 e0       	ldi	r19, 0x01	; 1
     7a2:	c9 01       	movw	r24, r18
     7a4:	86 1b       	sub	r24, r22
     7a6:	97 0b       	sbc	r25, r23
     7a8:	8f 3f       	cpi	r24, 0xFF	; 255
     7aa:	91 05       	cpc	r25, r1
     7ac:	19 f0       	breq	.+6      	; 0x7b4 <general_set_timer+0x5e>
     7ae:	14 f0       	brlt	.+4      	; 0x7b4 <general_set_timer+0x5e>
     7b0:	8f ef       	ldi	r24, 0xFF	; 255
     7b2:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     7b4:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS21)|(1<<CS20);
     7b8:	83 e0       	ldi	r24, 0x03	; 3
     7ba:	80 93 b1 00 	sts	0x00B1, r24
     7be:	94 c0       	rjmp	.+296    	; 0x8e8 <general_set_timer+0x192>
	}
	// Resolution
	// 0.5s/256
	else if ( period_number <= 500 )
     7c0:	85 ef       	ldi	r24, 0xF5	; 245
     7c2:	c8 16       	cp	r12, r24
     7c4:	81 e0       	ldi	r24, 0x01	; 1
     7c6:	d8 06       	cpc	r13, r24
     7c8:	e1 04       	cpc	r14, r1
     7ca:	f1 04       	cpc	r15, r1
     7cc:	ec f4       	brge	.+58     	; 0x808 <general_set_timer+0xb2>
	{
		temp = 256 - (int32_t) ( 256.0/500.0 * period_number);
     7ce:	c7 01       	movw	r24, r14
     7d0:	b6 01       	movw	r22, r12
     7d2:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__floatsisf>
     7d6:	2f e6       	ldi	r18, 0x6F	; 111
     7d8:	32 e1       	ldi	r19, 0x12	; 18
     7da:	43 e0       	ldi	r20, 0x03	; 3
     7dc:	5f e3       	ldi	r21, 0x3F	; 63
     7de:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <__mulsf3>
     7e2:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	31 e0       	ldi	r19, 0x01	; 1
     7ea:	c9 01       	movw	r24, r18
     7ec:	86 1b       	sub	r24, r22
     7ee:	97 0b       	sbc	r25, r23
     7f0:	8f 3f       	cpi	r24, 0xFF	; 255
     7f2:	91 05       	cpc	r25, r1
     7f4:	19 f0       	breq	.+6      	; 0x7fc <general_set_timer+0xa6>
     7f6:	14 f0       	brlt	.+4      	; 0x7fc <general_set_timer+0xa6>
     7f8:	8f ef       	ldi	r24, 0xFF	; 255
     7fa:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     7fc:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22);
     800:	84 e0       	ldi	r24, 0x04	; 4
     802:	80 93 b1 00 	sts	0x00B1, r24
     806:	70 c0       	rjmp	.+224    	; 0x8e8 <general_set_timer+0x192>
	}
	// Resolution
	// 1s/256
	else if ( period_number <= 1000 )
     808:	89 ee       	ldi	r24, 0xE9	; 233
     80a:	c8 16       	cp	r12, r24
     80c:	83 e0       	ldi	r24, 0x03	; 3
     80e:	d8 06       	cpc	r13, r24
     810:	e1 04       	cpc	r14, r1
     812:	f1 04       	cpc	r15, r1
     814:	ec f4       	brge	.+58     	; 0x850 <general_set_timer+0xfa>
	{
		temp = 256 - (int32_t) ( 256.0/1000.0 * period_number);
     816:	c7 01       	movw	r24, r14
     818:	b6 01       	movw	r22, r12
     81a:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__floatsisf>
     81e:	2f e6       	ldi	r18, 0x6F	; 111
     820:	32 e1       	ldi	r19, 0x12	; 18
     822:	43 e8       	ldi	r20, 0x83	; 131
     824:	5e e3       	ldi	r21, 0x3E	; 62
     826:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <__mulsf3>
     82a:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
     82e:	20 e0       	ldi	r18, 0x00	; 0
     830:	31 e0       	ldi	r19, 0x01	; 1
     832:	c9 01       	movw	r24, r18
     834:	86 1b       	sub	r24, r22
     836:	97 0b       	sbc	r25, r23
     838:	8f 3f       	cpi	r24, 0xFF	; 255
     83a:	91 05       	cpc	r25, r1
     83c:	19 f0       	breq	.+6      	; 0x844 <general_set_timer+0xee>
     83e:	14 f0       	brlt	.+4      	; 0x844 <general_set_timer+0xee>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     844:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS20);	
     848:	85 e0       	ldi	r24, 0x05	; 5
     84a:	80 93 b1 00 	sts	0x00B1, r24
     84e:	4c c0       	rjmp	.+152    	; 0x8e8 <general_set_timer+0x192>
	}
	// Resolution
	// 2s/256
	else if ( period_number <= 2000 )
     850:	81 ed       	ldi	r24, 0xD1	; 209
     852:	c8 16       	cp	r12, r24
     854:	87 e0       	ldi	r24, 0x07	; 7
     856:	d8 06       	cpc	r13, r24
     858:	e1 04       	cpc	r14, r1
     85a:	f1 04       	cpc	r15, r1
     85c:	ec f4       	brge	.+58     	; 0x898 <general_set_timer+0x142>
	{
		temp = 256 - (int32_t) ( 256.0/2000.0 * period_number);
     85e:	c7 01       	movw	r24, r14
     860:	b6 01       	movw	r22, r12
     862:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__floatsisf>
     866:	2f e6       	ldi	r18, 0x6F	; 111
     868:	32 e1       	ldi	r19, 0x12	; 18
     86a:	43 e0       	ldi	r20, 0x03	; 3
     86c:	5e e3       	ldi	r21, 0x3E	; 62
     86e:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <__mulsf3>
     872:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
     876:	20 e0       	ldi	r18, 0x00	; 0
     878:	31 e0       	ldi	r19, 0x01	; 1
     87a:	c9 01       	movw	r24, r18
     87c:	86 1b       	sub	r24, r22
     87e:	97 0b       	sbc	r25, r23
     880:	8f 3f       	cpi	r24, 0xFF	; 255
     882:	91 05       	cpc	r25, r1
     884:	19 f0       	breq	.+6      	; 0x88c <general_set_timer+0x136>
     886:	14 f0       	brlt	.+4      	; 0x88c <general_set_timer+0x136>
     888:	8f ef       	ldi	r24, 0xFF	; 255
     88a:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     88c:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS21);	
     890:	86 e0       	ldi	r24, 0x06	; 6
     892:	80 93 b1 00 	sts	0x00B1, r24
     896:	28 c0       	rjmp	.+80     	; 0x8e8 <general_set_timer+0x192>
	}
	// Resolution
	// 8s/256
	else if ( period_number <= 8000 )
     898:	81 e4       	ldi	r24, 0x41	; 65
     89a:	c8 16       	cp	r12, r24
     89c:	8f e1       	ldi	r24, 0x1F	; 31
     89e:	d8 06       	cpc	r13, r24
     8a0:	e1 04       	cpc	r14, r1
     8a2:	f1 04       	cpc	r15, r1
     8a4:	ec f4       	brge	.+58     	; 0x8e0 <general_set_timer+0x18a>
	{
		t = (int32_t) ( 256.0/8000.0 * period_number);
     8a6:	c7 01       	movw	r24, r14
     8a8:	b6 01       	movw	r22, r12
     8aa:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <__floatsisf>
     8ae:	2f e6       	ldi	r18, 0x6F	; 111
     8b0:	32 e1       	ldi	r19, 0x12	; 18
     8b2:	43 e0       	ldi	r20, 0x03	; 3
     8b4:	5d e3       	ldi	r21, 0x3D	; 61
     8b6:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <__mulsf3>
     8ba:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <__fixsfsi>
		temp = 256 - t;
		temp = temp > 255 ? 255 : temp ;
     8be:	20 e0       	ldi	r18, 0x00	; 0
     8c0:	31 e0       	ldi	r19, 0x01	; 1
     8c2:	c9 01       	movw	r24, r18
     8c4:	86 1b       	sub	r24, r22
     8c6:	97 0b       	sbc	r25, r23
     8c8:	8f 3f       	cpi	r24, 0xFF	; 255
     8ca:	91 05       	cpc	r25, r1
     8cc:	19 f0       	breq	.+6      	; 0x8d4 <general_set_timer+0x17e>
     8ce:	14 f0       	brlt	.+4      	; 0x8d4 <general_set_timer+0x17e>
     8d0:	8f ef       	ldi	r24, 0xFF	; 255
     8d2:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     8d4:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
     8d8:	87 e0       	ldi	r24, 0x07	; 7
     8da:	80 93 b1 00 	sts	0x00B1, r24
     8de:	04 c0       	rjmp	.+8      	; 0x8e8 <general_set_timer+0x192>
	}
	else
	{
		printf("Timer exceeds max\n");
     8e0:	8c ef       	ldi	r24, 0xFC	; 252
     8e2:	92 e0       	ldi	r25, 0x02	; 2
     8e4:	0e 94 c8 1c 	call	0x3990	; 0x3990 <puts>
	}

	/* start timer 2 */
	TCCR2A = 0x00;
     8e8:	10 92 b0 00 	sts	0x00B0, r1
	TimeStamp += period_number;
     8ec:	80 91 e0 05 	lds	r24, 0x05E0
     8f0:	90 91 e1 05 	lds	r25, 0x05E1
     8f4:	a0 91 e2 05 	lds	r26, 0x05E2
     8f8:	b0 91 e3 05 	lds	r27, 0x05E3
     8fc:	c8 0e       	add	r12, r24
     8fe:	d9 1e       	adc	r13, r25
     900:	ea 1e       	adc	r14, r26
     902:	fb 1e       	adc	r15, r27
     904:	c0 92 e0 05 	sts	0x05E0, r12
     908:	d0 92 e1 05 	sts	0x05E1, r13
     90c:	e0 92 e2 05 	sts	0x05E2, r14
     910:	f0 92 e3 05 	sts	0x05E3, r15
}
     914:	ff 90       	pop	r15
     916:	ef 90       	pop	r14
     918:	df 90       	pop	r13
     91a:	cf 90       	pop	r12
     91c:	08 95       	ret

0000091e <init_set_timer>:

void init_set_timer( int32_t period_number )
{
    general_set_timer( period_number );
     91e:	1b df       	rcall	.-458    	; 0x756 <general_set_timer>
	/* Clear pending interrupts */
	TIFR2  = (1 << TOV2) | (1 << OCF2A) | (1 << OCF2B);
     920:	87 e0       	ldi	r24, 0x07	; 7
     922:	87 bb       	out	0x17, r24	; 23
	/* Enable Overflow Interrupt */
	TIMSK2 = 1<<TOIE2;
     924:	81 e0       	ldi	r24, 0x01	; 1
     926:	80 93 70 00 	sts	0x0070, r24
     92a:	08 95       	ret

0000092c <set_timer>:

}

void set_timer( int32_t period_number )
{
     92c:	cf 92       	push	r12
     92e:	df 92       	push	r13
     930:	ef 92       	push	r14
     932:	ff 92       	push	r15
     934:	6b 01       	movw	r12, r22
     936:	7c 01       	movw	r14, r24
	printf("set timer gap = %ld\n\n", period_number);
     938:	ff 92       	push	r15
     93a:	ef 92       	push	r14
     93c:	df 92       	push	r13
     93e:	6f 93       	push	r22
     940:	8e e0       	ldi	r24, 0x0E	; 14
     942:	93 e0       	ldi	r25, 0x03	; 3
     944:	9f 93       	push	r25
     946:	8f 93       	push	r24
     948:	0e 94 b0 1c 	call	0x3960	; 0x3960 <printf>
	if( period_number == 0)
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	0f 90       	pop	r0
     952:	0f 90       	pop	r0
     954:	0f 90       	pop	r0
     956:	0f 90       	pop	r0
     958:	c1 14       	cp	r12, r1
     95a:	d1 04       	cpc	r13, r1
     95c:	e1 04       	cpc	r14, r1
     95e:	f1 04       	cpc	r15, r1
     960:	69 f0       	breq	.+26     	; 0x97c <set_timer+0x50>
	{
		/* we won't every set a zero timeout, will we ? */
		return;
	}
    if( timer_usage == 0 )
     962:	80 91 e4 05 	lds	r24, 0x05E4
     966:	90 91 e5 05 	lds	r25, 0x05E5
     96a:	89 2b       	or	r24, r25
     96c:	21 f4       	brne	.+8      	; 0x976 <set_timer+0x4a>
    {
        init_set_timer( period_number );
     96e:	c7 01       	movw	r24, r14
     970:	b6 01       	movw	r22, r12
     972:	d5 df       	rcall	.-86     	; 0x91e <init_set_timer>
     974:	03 c0       	rjmp	.+6      	; 0x97c <set_timer+0x50>
    }
    else
    {
        general_set_timer( period_number );
     976:	c7 01       	movw	r24, r14
     978:	b6 01       	movw	r22, r12
     97a:	ed de       	rcall	.-550    	; 0x756 <general_set_timer>
    }
}	
     97c:	ff 90       	pop	r15
     97e:	ef 90       	pop	r14
     980:	df 90       	pop	r13
     982:	cf 90       	pop	r12
     984:	08 95       	ret

00000986 <PWR_Init>:

/*************************************************************************//**
  @brief Initializes the power management system
*****************************************************************************/
void PWR_Init(void){
	DDRD |= 0b11000000;
     986:	8a b1       	in	r24, 0x0a	; 10
     988:	80 6c       	ori	r24, 0xC0	; 192
     98a:	8a b9       	out	0x0a, r24	; 10
     98c:	08 95       	ret

0000098e <PWR_TurnOn5V>:

/*************************************************************************//**
  @brief Turns on the 5V power supply
*****************************************************************************/
void PWR_TurnOn5V(void){
	PORTD |= 0b10000000;
     98e:	5f 9a       	sbi	0x0b, 7	; 11
     990:	08 95       	ret

00000992 <SPI_SlaveInit>:

unsigned char buffer[16];

void SPI_SlaveInit(void)
{
	DDRB |= (1<<PORTB3); //Set MISO output
     992:	23 9a       	sbi	0x04, 3	; 4
	SPCR = (1<<SPE); //Enable SPI
     994:	80 e4       	ldi	r24, 0x40	; 64
     996:	8c bd       	out	0x2c, r24	; 44
     998:	08 95       	ret

0000099a <TWI_Init>:
/*************************************************************************//**
  @brief Initializes the 2-wire Serial Interface as a master
  @param[in] freq SCL frequency (Do not exceed 400kHz)
  @return Status (@c 0 on failure, nonzero otherwise)
*****************************************************************************/
char TWI_Init(unsigned long freq){
     99a:	9b 01       	movw	r18, r22
     99c:	ac 01       	movw	r20, r24
	//printf("TWI_Init");
	TWSR=0x00;
     99e:	10 92 b9 00 	sts	0x00B9, r1
	TWBR=(unsigned char)(((F_CPU/freq)-16UL)/8UL); //Compute settings value and set frequency
     9a2:	60 e0       	ldi	r22, 0x00	; 0
     9a4:	74 e2       	ldi	r23, 0x24	; 36
     9a6:	84 ef       	ldi	r24, 0xF4	; 244
     9a8:	90 e0       	ldi	r25, 0x00	; 0
     9aa:	0e 94 00 1a 	call	0x3400	; 0x3400 <__udivmodsi4>
     9ae:	da 01       	movw	r26, r20
     9b0:	c9 01       	movw	r24, r18
     9b2:	40 97       	sbiw	r24, 0x10	; 16
     9b4:	a1 09       	sbc	r26, r1
     9b6:	b1 09       	sbc	r27, r1
     9b8:	68 94       	set
     9ba:	12 f8       	bld	r1, 2
     9bc:	b6 95       	lsr	r27
     9be:	a7 95       	ror	r26
     9c0:	97 95       	ror	r25
     9c2:	87 95       	ror	r24
     9c4:	16 94       	lsr	r1
     9c6:	d1 f7       	brne	.-12     	; 0x9bc <TWI_Init+0x22>
     9c8:	80 93 b8 00 	sts	0x00B8, r24
	TWCR=(1 << TWEN);
     9cc:	84 e0       	ldi	r24, 0x04	; 4
     9ce:	80 93 bc 00 	sts	0x00BC, r24
	
	//TWAR=0; //Disable slave mode
	
	return 1; //May want to actually check for success here
}
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	08 95       	ret

000009d6 <TWI_WriteByte>:
  @param[in] data byte to send
  @return Status code, TWI_SENT_ACK or TWI_SENT_NACK on success
*****************************************************************************/
char TWI_WriteByte(unsigned char data){
	//printf("TWI_WriteByte");
	TWDR = data; //Stage the data to send
     9d6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
     9da:	84 e8       	ldi	r24, 0x84	; 132
     9dc:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);//Send the data
     9e0:	ec eb       	ldi	r30, 0xBC	; 188
     9e2:	f0 e0       	ldi	r31, 0x00	; 0
     9e4:	80 81       	ld	r24, Z
     9e6:	88 23       	and	r24, r24
     9e8:	ec f7       	brge	.-6      	; 0x9e4 <TWI_WriteByte+0xe>
	
	return TWSR&TWSR_MASK;//Return the status code
     9ea:	80 91 b9 00 	lds	r24, 0x00B9
}
     9ee:	88 7f       	andi	r24, 0xF8	; 248
     9f0:	08 95       	ret

000009f2 <TWI_BeginWrite>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAW_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginWrite(unsigned char address){
	//printf("TWI_BeginWrite");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
     9f2:	94 ee       	ldi	r25, 0xE4	; 228
     9f4:	90 93 bc 00 	sts	0x00BC, r25
	int i=0;
	while ((TWCR & (1<<TWINT)) == 0);
     9f8:	ec eb       	ldi	r30, 0xBC	; 188
     9fa:	f0 e0       	ldi	r31, 0x00	; 0
     9fc:	90 81       	ld	r25, Z
     9fe:	99 23       	and	r25, r25
     a00:	ec f7       	brge	.-6      	; 0x9fc <TWI_BeginWrite+0xa>
     a02:	ef e9       	ldi	r30, 0x9F	; 159
     a04:	ff e0       	ldi	r31, 0x0F	; 15
     a06:	31 97       	sbiw	r30, 0x01	; 1
     a08:	f1 f7       	brne	.-4      	; 0xa06 <TWI_BeginWrite+0x14>
     a0a:	00 c0       	rjmp	.+0      	; 0xa0c <TWI_BeginWrite+0x1a>
     a0c:	00 00       	nop
	_delay_ms(1);
	char stat = (TWSR & TWSR_MASK);
     a0e:	90 91 b9 00 	lds	r25, 0x00B9
     a12:	98 7f       	andi	r25, 0xF8	; 248
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
     a14:	98 30       	cpi	r25, 0x08	; 8
     a16:	31 f0       	breq	.+12     	; 0xa24 <TWI_BeginWrite+0x32>
     a18:	90 31       	cpi	r25, 0x10	; 16
     a1a:	21 f0       	breq	.+8      	; 0xa24 <TWI_BeginWrite+0x32>
     a1c:	80 91 b9 00 	lds	r24, 0x00B9
     a20:	88 7f       	andi	r24, 0xF8	; 248
     a22:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) & SLAW_MASK); //reset bit 0 to send a write bit, send
     a24:	88 0f       	add	r24, r24
     a26:	d7 cf       	rjmp	.-82     	; 0x9d6 <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	return stat;//Return the status code
}
     a28:	08 95       	ret

00000a2a <TWI_BeginRead>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAR_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginRead(unsigned char address){
	//printf("TWI_BeginRead");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
     a2a:	94 ee       	ldi	r25, 0xE4	; 228
     a2c:	90 93 bc 00 	sts	0x00BC, r25
	while ((TWCR & (1<<TWINT)) == 0);
     a30:	ec eb       	ldi	r30, 0xBC	; 188
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	90 81       	ld	r25, Z
     a36:	99 23       	and	r25, r25
     a38:	ec f7       	brge	.-6      	; 0xa34 <TWI_BeginRead+0xa>
	
	char stat = (TWSR & TWSR_MASK);
     a3a:	90 91 b9 00 	lds	r25, 0x00B9
     a3e:	98 7f       	andi	r25, 0xF8	; 248
	//printf("0x%1x",(unsigned)stat);
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
     a40:	98 30       	cpi	r25, 0x08	; 8
     a42:	31 f0       	breq	.+12     	; 0xa50 <TWI_BeginRead+0x26>
     a44:	90 31       	cpi	r25, 0x10	; 16
     a46:	21 f0       	breq	.+8      	; 0xa50 <TWI_BeginRead+0x26>
     a48:	80 91 b9 00 	lds	r24, 0x00B9
     a4c:	88 7f       	andi	r24, 0xF8	; 248
     a4e:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) | SLAR_MASK); //set bit 0 to send a read bit and send it
     a50:	88 0f       	add	r24, r24
     a52:	81 60       	ori	r24, 0x01	; 1
     a54:	c0 cf       	rjmp	.-128    	; 0x9d6 <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	
	return stat;//Return the status code
}
     a56:	08 95       	ret

00000a58 <TWI_ReadAck>:
/*************************************************************************//**
  @brief Receives a byte over TWI and returns an ACK
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_ACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadAck(unsigned char *data){
     a58:	dc 01       	movw	r26, r24
	//printf("TWI_ReadAck");
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Start receiving, ending with an ACK
     a5a:	84 ec       	ldi	r24, 0xC4	; 196
     a5c:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);
     a60:	ec eb       	ldi	r30, 0xBC	; 188
     a62:	f0 e0       	ldi	r31, 0x00	; 0
     a64:	90 81       	ld	r25, Z
     a66:	99 23       	and	r25, r25
     a68:	ec f7       	brge	.-6      	; 0xa64 <TWI_ReadAck+0xc>
	*data=TWDR; //Store the data
     a6a:	80 91 bb 00 	lds	r24, 0x00BB
     a6e:	8c 93       	st	X, r24
	
	return TWSR&TWSR_MASK;//Return the status code
     a70:	80 91 b9 00 	lds	r24, 0x00B9
}
     a74:	88 7f       	andi	r24, 0xF8	; 248
     a76:	08 95       	ret

00000a78 <TWI_ReadNack>:
/*************************************************************************//**
  @brief Receives a byte over TWI and returns a NACK
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_NACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadNack(unsigned char *data){
     a78:	dc 01       	movw	r26, r24
	//printf("TWI_ReadNack");
	TWCR = (1<<TWINT)|(1<<TWEN); //Start receiving, ending with a NACK
     a7a:	84 e8       	ldi	r24, 0x84	; 132
     a7c:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);
     a80:	ec eb       	ldi	r30, 0xBC	; 188
     a82:	f0 e0       	ldi	r31, 0x00	; 0
     a84:	90 81       	ld	r25, Z
     a86:	99 23       	and	r25, r25
     a88:	ec f7       	brge	.-6      	; 0xa84 <TWI_ReadNack+0xc>
	*data=TWDR; //Store the data
     a8a:	80 91 bb 00 	lds	r24, 0x00BB
     a8e:	8c 93       	st	X, r24
	
	return TWSR&TWSR_MASK;//Return the status code
     a90:	80 91 b9 00 	lds	r24, 0x00B9
}
     a94:	88 7f       	andi	r24, 0xF8	; 248
     a96:	08 95       	ret

00000a98 <TWI_Stop>:
  @brief Sends a Stop bit, be sure to send a Start bit before future interactions on the bus
  @return Status code, should always be nonzero
*****************************************************************************/
char TWI_Stop(void){
	//printf("TWI_Stop");
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     a98:	84 e9       	ldi	r24, 0x94	; 148
     a9a:	80 93 bc 00 	sts	0x00BC, r24
	return 1;
}
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	08 95       	ret

00000aa2 <TWI_Read>:
  @param[in] amount Number of bytes to recieve
  @param[in] whether or not to send an ACK on the last byte, sends NACK if false
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
     aa2:	9f 92       	push	r9
     aa4:	af 92       	push	r10
     aa6:	bf 92       	push	r11
     aa8:	cf 92       	push	r12
     aaa:	df 92       	push	r13
     aac:	ef 92       	push	r14
     aae:	ff 92       	push	r15
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
     ab8:	16 16       	cp	r1, r22
     aba:	17 06       	cpc	r1, r23
     abc:	fc f4       	brge	.+62     	; 0xafc <TWI_Read+0x5a>
     abe:	94 2e       	mov	r9, r20
     ac0:	8b 01       	movw	r16, r22
     ac2:	7c 01       	movw	r14, r24
     ac4:	c0 e0       	ldi	r28, 0x00	; 0
     ac6:	d0 e0       	ldi	r29, 0x00	; 0
		if((ack==false) && ((amount-1)==i)){
     ac8:	6b 01       	movw	r12, r22
     aca:	81 e0       	ldi	r24, 0x01	; 1
     acc:	c8 1a       	sub	r12, r24
     ace:	d1 08       	sbc	r13, r1
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
     ad0:	57 01       	movw	r10, r14
     ad2:	ac 0c       	add	r10, r12
     ad4:	bd 1c       	adc	r11, r13
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
		if((ack==false) && ((amount-1)==i)){
     ad6:	91 10       	cpse	r9, r1
     ad8:	06 c0       	rjmp	.+12     	; 0xae6 <TWI_Read+0x44>
     ada:	cc 16       	cp	r12, r28
     adc:	dd 06       	cpc	r13, r29
     ade:	19 f4       	brne	.+6      	; 0xae6 <TWI_Read+0x44>
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
     ae0:	c5 01       	movw	r24, r10
     ae2:	ca df       	rcall	.-108    	; 0xa78 <TWI_ReadNack>
     ae4:	04 c0       	rjmp	.+8      	; 0xaee <TWI_Read+0x4c>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}else{
			status=TWI_ReadAck(&data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
     ae6:	c7 01       	movw	r24, r14
     ae8:	8c 0f       	add	r24, r28
     aea:	9d 1f       	adc	r25, r29
     aec:	b5 df       	rcall	.-150    	; 0xa58 <TWI_ReadAck>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}
		//printf("A");
		if(status!=TWI_REC_ACK)return status; //If NACK was selected, returning here is fine since the loop is already ending
     aee:	80 35       	cpi	r24, 0x50	; 80
     af0:	31 f4       	brne	.+12     	; 0xafe <TWI_Read+0x5c>
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
     af2:	21 96       	adiw	r28, 0x01	; 1
     af4:	c0 17       	cp	r28, r16
     af6:	d1 07       	cpc	r29, r17
     af8:	71 f7       	brne	.-36     	; 0xad6 <TWI_Read+0x34>
     afa:	01 c0       	rjmp	.+2      	; 0xafe <TWI_Read+0x5c>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
     afc:	80 e0       	ldi	r24, 0x00	; 0
		//will return if something goes wrong partway through
		//printf("B");
	}
	//printf("0x%1x",(unsigned)status);
	return status;
}
     afe:	df 91       	pop	r29
     b00:	cf 91       	pop	r28
     b02:	1f 91       	pop	r17
     b04:	0f 91       	pop	r16
     b06:	ff 90       	pop	r15
     b08:	ef 90       	pop	r14
     b0a:	df 90       	pop	r13
     b0c:	cf 90       	pop	r12
     b0e:	bf 90       	pop	r11
     b10:	af 90       	pop	r10
     b12:	9f 90       	pop	r9
     b14:	08 95       	ret

00000b16 <TWI_Write>:
  @param[in] *data Pointer to an array of bytes to send
  @param[in] amount Number of bytes to send
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
     b16:	0f 93       	push	r16
     b18:	1f 93       	push	r17
     b1a:	cf 93       	push	r28
     b1c:	df 93       	push	r29
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
     b1e:	16 16       	cp	r1, r22
     b20:	17 06       	cpc	r1, r23
     b22:	64 f4       	brge	.+24     	; 0xb3c <TWI_Write+0x26>
     b24:	8c 01       	movw	r16, r24
     b26:	ec 01       	movw	r28, r24
     b28:	06 0f       	add	r16, r22
     b2a:	17 1f       	adc	r17, r23
		status=TWI_WriteByte(data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
     b2c:	89 91       	ld	r24, Y+
     b2e:	53 df       	rcall	.-346    	; 0x9d6 <TWI_WriteByte>
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
     b30:	88 32       	cpi	r24, 0x28	; 40
     b32:	29 f4       	brne	.+10     	; 0xb3e <TWI_Write+0x28>
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
     b34:	c0 17       	cp	r28, r16
     b36:	d1 07       	cpc	r29, r17
     b38:	c9 f7       	brne	.-14     	; 0xb2c <TWI_Write+0x16>
     b3a:	01 c0       	rjmp	.+2      	; 0xb3e <TWI_Write+0x28>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
     b3c:	80 e0       	ldi	r24, 0x00	; 0
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
		//will return if something goes wrong partway through
	}
	return status;
     b3e:	df 91       	pop	r29
     b40:	cf 91       	pop	r28
     b42:	1f 91       	pop	r17
     b44:	0f 91       	pop	r16
     b46:	08 95       	ret

00000b48 <USART0_Init>:
  @brief Initializes USART0 in asynchronous UART mode, 8 bit data, 1 stop bit
  @param[in] desired baud rate (configuration values computed using F_CPU)
*****************************************************************************/
void USART0_Init(unsigned long baud){
	
	stdout = &USART0_stdout; //make stdout print to USART0
     b48:	28 e5       	ldi	r18, 0x58	; 88
     b4a:	32 e0       	ldi	r19, 0x02	; 2
     b4c:	30 93 7d 0b 	sts	0x0B7D, r19
     b50:	20 93 7c 0b 	sts	0x0B7C, r18
	
	//Compute UBRR for baudrate setting
	unsigned short ubrr=(unsigned short)((F_CPU/(baud*16UL))-1);
     b54:	dc 01       	movw	r26, r24
     b56:	cb 01       	movw	r24, r22
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	aa 1f       	adc	r26, r26
     b5e:	bb 1f       	adc	r27, r27
     b60:	88 0f       	add	r24, r24
     b62:	99 1f       	adc	r25, r25
     b64:	aa 1f       	adc	r26, r26
     b66:	bb 1f       	adc	r27, r27
     b68:	9c 01       	movw	r18, r24
     b6a:	ad 01       	movw	r20, r26
     b6c:	22 0f       	add	r18, r18
     b6e:	33 1f       	adc	r19, r19
     b70:	44 1f       	adc	r20, r20
     b72:	55 1f       	adc	r21, r21
     b74:	22 0f       	add	r18, r18
     b76:	33 1f       	adc	r19, r19
     b78:	44 1f       	adc	r20, r20
     b7a:	55 1f       	adc	r21, r21
     b7c:	60 e0       	ldi	r22, 0x00	; 0
     b7e:	74 e2       	ldi	r23, 0x24	; 36
     b80:	84 ef       	ldi	r24, 0xF4	; 244
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	0e 94 00 1a 	call	0x3400	; 0x3400 <__udivmodsi4>
     b88:	21 50       	subi	r18, 0x01	; 1
     b8a:	31 09       	sbc	r19, r1
	
	//Set BAUD rate.
	UBRR0H = (unsigned char) (ubrr >> 8);
     b8c:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) ubrr;
     b90:	20 93 c4 00 	sts	0x00C4, r18
	/*Set frame format. 8 data bit(settings bits UCSZ00 and UCSZ01  UCSR0B), 1 stop bit(by default and need not to be worried about). 
	The UCSZ01:0 bits combined with the UCSZ02 bit in UCSR0B sets the number of data
	bits (Character Size) in the frame that the Receiver and Transmitter use. 
	If a change on frame format is needed, make sure to modify UCSR0B register above accordingly.
	See datasheet pg. 390.*/
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
     b94:	86 e0       	ldi	r24, 0x06	; 6
     b96:	80 93 c2 00 	sts	0x00C2, r24
	
	//Enable receiver and transmitter. Enable the USART Receive Complete interrupt(RXCIE).
	//UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0));
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);//Enable RX/TX, no interrupts
     b9a:	88 e1       	ldi	r24, 0x18	; 24
     b9c:	80 93 c1 00 	sts	0x00C1, r24
     ba0:	08 95       	ret

00000ba2 <USART0_Transmit>:
Function contains busy loops for simplicity in debugging. Not production code.
  @brief Transmits a byte via USART0
  @param[in] data byte to be transmitted
*****************************************************************************/
void USART0_Transmit(unsigned char data){
	while(!(UCSR0A & (1 << UDRE0))); //Wait for the empty transmit buffer. (Waiting UDR0 to be empty.)
     ba2:	e0 ec       	ldi	r30, 0xC0	; 192
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	90 81       	ld	r25, Z
     ba8:	95 ff       	sbrs	r25, 5
     baa:	fd cf       	rjmp	.-6      	; 0xba6 <USART0_Transmit+0x4>
		UDR0 = data;			//store the data in the USART Data Register
     bac:	80 93 c6 00 	sts	0x00C6, r24
     bb0:	08 95       	ret

00000bb2 <USART0_putchar_printf>:
  @brief Called when stdout is being printed to USART0 (this is set up at runtime)
  @param[in] var byte to transmit
  @param[in/out] *stream Pointer to a stdio.h FILE io stream
  @return Status
*****************************************************************************/
int USART0_putchar_printf(char var, FILE *stream) {
     bb2:	cf 93       	push	r28
     bb4:	c8 2f       	mov	r28, r24
	if (var == '\n') USART0_Transmit('\r');
     bb6:	8a 30       	cpi	r24, 0x0A	; 10
     bb8:	11 f4       	brne	.+4      	; 0xbbe <USART0_putchar_printf+0xc>
     bba:	8d e0       	ldi	r24, 0x0D	; 13
     bbc:	f2 df       	rcall	.-28     	; 0xba2 <USART0_Transmit>
	USART0_Transmit(var);
     bbe:	8c 2f       	mov	r24, r28
     bc0:	f0 df       	rcall	.-32     	; 0xba2 <USART0_Transmit>
	return 0;
}
     bc2:	80 e0       	ldi	r24, 0x00	; 0
     bc4:	90 e0       	ldi	r25, 0x00	; 0
     bc6:	cf 91       	pop	r28
     bc8:	08 95       	ret

00000bca <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     bca:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     bcc:	0f b6       	in	r0, 0x3f	; 63
     bce:	f8 94       	cli
     bd0:	a8 95       	wdr
     bd2:	80 91 60 00 	lds	r24, 0x0060
     bd6:	88 61       	ori	r24, 0x18	; 24
     bd8:	80 93 60 00 	sts	0x0060, r24
     bdc:	10 92 60 00 	sts	0x0060, r1
     be0:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
     be2:	e1 e6       	ldi	r30, 0x61	; 97
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 e8       	ldi	r24, 0x80	; 128
     be8:	80 83       	st	Z, r24
  CLKPR = 0;
     bea:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     bec:	78 94       	sei

  HAL_TimerInit();
     bee:	01 c0       	rjmp	.+2      	; 0xbf2 <HAL_TimerInit>
     bf0:	08 95       	ret

00000bf2 <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
     bf2:	10 92 4d 0b 	sts	0x0B4D, r1
     bf6:	80 e2       	ldi	r24, 0x20	; 32
     bf8:	9e e4       	ldi	r25, 0x4E	; 78
     bfa:	90 93 a9 00 	sts	0x00A9, r25
     bfe:	80 93 a8 00 	sts	0x00A8, r24
     c02:	e1 ea       	ldi	r30, 0xA1	; 161
     c04:	f0 e0       	ldi	r31, 0x00	; 0
     c06:	88 e0       	ldi	r24, 0x08	; 8
     c08:	80 83       	st	Z, r24
     c0a:	80 81       	ld	r24, Z
     c0c:	82 60       	ori	r24, 0x02	; 2
     c0e:	80 83       	st	Z, r24
     c10:	e2 e7       	ldi	r30, 0x72	; 114
     c12:	f0 e0       	ldi	r31, 0x00	; 0
     c14:	80 81       	ld	r24, Z
     c16:	82 60       	ori	r24, 0x02	; 2
     c18:	80 83       	st	Z, r24
     c1a:	08 95       	ret

00000c1c <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     c1c:	1f 92       	push	r1
     c1e:	0f 92       	push	r0
     c20:	0f b6       	in	r0, 0x3f	; 63
     c22:	0f 92       	push	r0
     c24:	11 24       	eor	r1, r1
     c26:	8f 93       	push	r24
  halTimerIrqCount++;
     c28:	80 91 4d 0b 	lds	r24, 0x0B4D
     c2c:	8f 5f       	subi	r24, 0xFF	; 255
     c2e:	80 93 4d 0b 	sts	0x0B4D, r24
}
     c32:	8f 91       	pop	r24
     c34:	0f 90       	pop	r0
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	0f 90       	pop	r0
     c3a:	1f 90       	pop	r1
     c3c:	18 95       	reti

00000c3e <NWK_Init>:
  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
  nwkIb.panId = panId;
  PHY_SetPanId(panId);
     c3e:	ee e4       	ldi	r30, 0x4E	; 78
     c40:	fb e0       	ldi	r31, 0x0B	; 11
     c42:	14 82       	std	Z+4, r1	; 0x04
     c44:	15 82       	std	Z+5, r1	; 0x05
     c46:	11 82       	std	Z+1, r1	; 0x01
     c48:	10 82       	st	Z, r1
     c4a:	17 a2       	std	Z+39, r1	; 0x27
     c4c:	16 a2       	std	Z+38, r1	; 0x26
     c4e:	e4 e5       	ldi	r30, 0x54	; 84
     c50:	fb e0       	ldi	r31, 0x0B	; 11
     c52:	84 e7       	ldi	r24, 0x74	; 116
     c54:	9b e0       	ldi	r25, 0x0B	; 11
     c56:	11 92       	st	Z+, r1
     c58:	11 92       	st	Z+, r1
     c5a:	e8 17       	cp	r30, r24
     c5c:	f9 07       	cpc	r31, r25
     c5e:	d9 f7       	brne	.-10     	; 0xc56 <NWK_Init+0x18>
     c60:	e3 d0       	rcall	.+454    	; 0xe28 <nwkTxInit>
     c62:	67 d0       	rcall	.+206    	; 0xd32 <nwkRxInit>
     c64:	10 d0       	rcall	.+32     	; 0xc86 <nwkFrameInit>
     c66:	0a c0       	rjmp	.+20     	; 0xc7c <nwkDataReqInit>
     c68:	08 95       	ret

00000c6a <NWK_OpenEndpoint>:
  @param[in] id Endpoint index (1-15)
  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
  nwkIb.endpoint[id] = handler;
     c6a:	e8 2f       	mov	r30, r24
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	ee 0f       	add	r30, r30
     c70:	ff 1f       	adc	r31, r31
     c72:	ec 5a       	subi	r30, 0xAC	; 172
     c74:	f4 4f       	sbci	r31, 0xF4	; 244
     c76:	71 83       	std	Z+1, r23	; 0x01
     c78:	60 83       	st	Z, r22
     c7a:	08 95       	ret

00000c7c <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     c7c:	10 92 e7 05 	sts	0x05E7, r1
     c80:	10 92 e6 05 	sts	0x05E6, r1
     c84:	08 95       	ret

00000c86 <nwkFrameInit>:
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
  nwkIb.lock--;
     c86:	10 92 e8 05 	sts	0x05E8, r1
     c8a:	10 92 71 06 	sts	0x0671, r1
     c8e:	10 92 fa 06 	sts	0x06FA, r1
     c92:	10 92 83 07 	sts	0x0783, r1
     c96:	10 92 0c 08 	sts	0x080C, r1
     c9a:	08 95       	ret

00000c9c <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     c9c:	00 97       	sbiw	r24, 0x00	; 0
     c9e:	41 f0       	breq	.+16     	; 0xcb0 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     ca0:	fc 01       	movw	r30, r24
     ca2:	e7 57       	subi	r30, 0x77	; 119
     ca4:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     ca6:	88 e0       	ldi	r24, 0x08	; 8
     ca8:	e5 39       	cpi	r30, 0x95	; 149
     caa:	f8 07       	cpc	r31, r24
     cac:	18 f0       	brcs	.+6      	; 0xcb4 <nwkFrameNext+0x18>
     cae:	15 c0       	rjmp	.+42     	; 0xcda <nwkFrameNext+0x3e>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     cb0:	e8 ee       	ldi	r30, 0xE8	; 232
     cb2:	f5 e0       	ldi	r31, 0x05	; 5
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     cb4:	80 81       	ld	r24, Z
     cb6:	88 23       	and	r24, r24
     cb8:	39 f0       	breq	.+14     	; 0xcc8 <nwkFrameNext+0x2c>
     cba:	03 c0       	rjmp	.+6      	; 0xcc2 <nwkFrameNext+0x26>
     cbc:	80 81       	ld	r24, Z
     cbe:	88 23       	and	r24, r24
     cc0:	19 f0       	breq	.+6      	; 0xcc8 <nwkFrameNext+0x2c>
      return frame;
     cc2:	8e 2f       	mov	r24, r30
     cc4:	9f 2f       	mov	r25, r31
     cc6:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     cc8:	e7 57       	subi	r30, 0x77	; 119
     cca:	ff 4f       	sbci	r31, 0xFF	; 255
     ccc:	88 e0       	ldi	r24, 0x08	; 8
     cce:	e5 39       	cpi	r30, 0x95	; 149
     cd0:	f8 07       	cpc	r31, r24
     cd2:	a0 f3       	brcs	.-24     	; 0xcbc <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     cd4:	80 e0       	ldi	r24, 0x00	; 0
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	08 95       	ret
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
}
     cde:	08 95       	ret

00000ce0 <nwkRxServiceDataInd>:
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
     ce0:	dc 01       	movw	r26, r24
     ce2:	19 96       	adiw	r26, 0x09	; 9
     ce4:	2c 91       	ld	r18, X
     ce6:	19 97       	sbiw	r26, 0x09	; 9
     ce8:	22 23       	and	r18, r18
     cea:	49 f0       	breq	.+18     	; 0xcfe <nwkRxServiceDataInd+0x1e>
    return false;

  switch (ind->data[0])
     cec:	17 96       	adiw	r26, 0x07	; 7
     cee:	ed 91       	ld	r30, X+
     cf0:	fc 91       	ld	r31, X
     cf2:	18 97       	sbiw	r26, 0x08	; 8
     cf4:	20 81       	ld	r18, Z
     cf6:	21 11       	cpse	r18, r1
     cf8:	04 c0       	rjmp	.+8      	; 0xd02 <nwkRxServiceDataInd+0x22>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
     cfa:	b9 c0       	rjmp	.+370    	; 0xe6e <nwkTxAckReceived>
     cfc:	08 95       	ret
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    return false;
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	08 95       	ret
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
     d02:	80 e0       	ldi	r24, 0x00	; 0
  }
}
     d04:	08 95       	ret

00000d06 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
     d06:	bc 01       	movw	r22, r24
     d08:	e6 ea       	ldi	r30, 0xA6	; 166
     d0a:	f8 e0       	ldi	r31, 0x08	; 8
     d0c:	28 ed       	ldi	r18, 0xD8	; 216
     d0e:	38 e0       	ldi	r19, 0x08	; 8
  bool restart = false;
     d10:	40 e0       	ldi	r20, 0x00	; 0
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
     d12:	51 e0       	ldi	r21, 0x01	; 1
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
     d14:	90 81       	ld	r25, Z
     d16:	99 23       	and	r25, r25
     d18:	19 f0       	breq	.+6      	; 0xd20 <nwkRxDuplicateRejectionTimerHandler+0x1a>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
     d1a:	91 50       	subi	r25, 0x01	; 1
     d1c:	90 83       	st	Z, r25
      restart = true;
     d1e:	45 2f       	mov	r20, r21
     d20:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     d22:	e2 17       	cp	r30, r18
     d24:	f3 07       	cpc	r31, r19
     d26:	b1 f7       	brne	.-20     	; 0xd14 <nwkRxDuplicateRejectionTimerHandler+0xe>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
     d28:	44 23       	and	r20, r20
     d2a:	11 f0       	breq	.+4      	; 0xd30 <nwkRxDuplicateRejectionTimerHandler+0x2a>
     d2c:	cb 01       	movw	r24, r22
    SYS_TimerStart(timer);
     d2e:	2f c4       	rjmp	.+2142   	; 0x158e <SYS_TimerStart>
     d30:	08 95       	ret

00000d32 <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
     d32:	e6 ea       	ldi	r30, 0xA6	; 166
     d34:	f8 e0       	ldi	r31, 0x08	; 8
     d36:	88 ed       	ldi	r24, 0xD8	; 216
     d38:	98 e0       	ldi	r25, 0x08	; 8
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
     d3a:	10 82       	st	Z, r1
     d3c:	35 96       	adiw	r30, 0x05	; 5
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     d3e:	e8 17       	cp	r30, r24
     d40:	f9 07       	cpc	r31, r25
     d42:	d9 f7       	brne	.-10     	; 0xd3a <nwkRxInit+0x8>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
     d44:	e5 e9       	ldi	r30, 0x95	; 149
     d46:	f8 e0       	ldi	r31, 0x08	; 8
     d48:	84 e6       	ldi	r24, 0x64	; 100
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	a0 e0       	ldi	r26, 0x00	; 0
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	86 83       	std	Z+6, r24	; 0x06
     d52:	97 83       	std	Z+7, r25	; 0x07
     d54:	a0 87       	std	Z+8, r26	; 0x08
     d56:	b1 87       	std	Z+9, r27	; 0x09
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
     d58:	12 86       	std	Z+10, r1	; 0x0a
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
     d5a:	83 e8       	ldi	r24, 0x83	; 131
     d5c:	96 e0       	ldi	r25, 0x06	; 6
     d5e:	94 87       	std	Z+12, r25	; 0x0c
     d60:	83 87       	std	Z+11, r24	; 0x0b

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
     d62:	60 e7       	ldi	r22, 0x70	; 112
     d64:	76 e0       	ldi	r23, 0x06	; 6
     d66:	80 e0       	ldi	r24, 0x00	; 0
     d68:	80 cf       	rjmp	.-256    	; 0xc6a <NWK_OpenEndpoint>
     d6a:	08 95       	ret

00000d6c <nwkTxDelayTimerHandler>:
  newFrame->header.macFcf = 0x8841;
  newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
  newFrame->header.macDstPanId = frame->header.macDstPanId;
  newFrame->header.macSrcAddr = nwkIb.addr;
  newFrame->header.macSeq = ++nwkIb.macSeqNum;
}
     d6c:	ef 92       	push	r14
     d6e:	ff 92       	push	r15
     d70:	0f 93       	push	r16
     d72:	1f 93       	push	r17
     d74:	cf 93       	push	r28
     d76:	7c 01       	movw	r14, r24
     d78:	10 e0       	ldi	r17, 0x00	; 0
     d7a:	80 e0       	ldi	r24, 0x00	; 0
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	01 e0       	ldi	r16, 0x01	; 1
     d80:	c3 e1       	ldi	r28, 0x13	; 19
     d82:	13 c0       	rjmp	.+38     	; 0xdaa <nwkTxDelayTimerHandler+0x3e>
     d84:	fc 01       	movw	r30, r24
     d86:	20 81       	ld	r18, Z
     d88:	21 31       	cpi	r18, 0x11	; 17
     d8a:	79 f4       	brne	.+30     	; 0xdaa <nwkTxDelayTimerHandler+0x3e>
     d8c:	ec 57       	subi	r30, 0x7C	; 124
     d8e:	ff 4f       	sbci	r31, 0xFF	; 255
     d90:	20 81       	ld	r18, Z
     d92:	31 81       	ldd	r19, Z+1	; 0x01
     d94:	21 50       	subi	r18, 0x01	; 1
     d96:	31 09       	sbc	r19, r1
     d98:	31 83       	std	Z+1, r19	; 0x01
     d9a:	20 83       	st	Z, r18
     d9c:	23 2b       	or	r18, r19
     d9e:	21 f4       	brne	.+8      	; 0xda8 <nwkTxDelayTimerHandler+0x3c>
     da0:	fc 01       	movw	r30, r24
     da2:	c0 83       	st	Z, r28
     da4:	10 2f       	mov	r17, r16
     da6:	01 c0       	rjmp	.+2      	; 0xdaa <nwkTxDelayTimerHandler+0x3e>
     da8:	10 2f       	mov	r17, r16
     daa:	78 df       	rcall	.-272    	; 0xc9c <nwkFrameNext>
     dac:	00 97       	sbiw	r24, 0x00	; 0
     dae:	51 f7       	brne	.-44     	; 0xd84 <nwkTxDelayTimerHandler+0x18>
     db0:	11 23       	and	r17, r17
     db2:	11 f0       	breq	.+4      	; 0xdb8 <nwkTxDelayTimerHandler+0x4c>
     db4:	c7 01       	movw	r24, r14
     db6:	eb d3       	rcall	.+2006   	; 0x158e <SYS_TimerStart>
     db8:	cf 91       	pop	r28
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	ff 90       	pop	r15
     dc0:	ef 90       	pop	r14
     dc2:	08 95       	ret

00000dc4 <nwkTxAckWaitTimerHandler>:
     dc4:	ef 92       	push	r14
     dc6:	ff 92       	push	r15
     dc8:	0f 93       	push	r16
     dca:	1f 93       	push	r17
     dcc:	cf 93       	push	r28
     dce:	df 93       	push	r29
     dd0:	7c 01       	movw	r14, r24
     dd2:	10 e0       	ldi	r17, 0x00	; 0
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	01 e0       	ldi	r16, 0x01	; 1
     dda:	d7 e1       	ldi	r29, 0x17	; 23
     ddc:	c0 e1       	ldi	r28, 0x10	; 16
     dde:	16 c0       	rjmp	.+44     	; 0xe0c <nwkTxAckWaitTimerHandler+0x48>
     de0:	fc 01       	movw	r30, r24
     de2:	20 81       	ld	r18, Z
     de4:	26 31       	cpi	r18, 0x16	; 22
     de6:	91 f4       	brne	.+36     	; 0xe0c <nwkTxAckWaitTimerHandler+0x48>
     de8:	ec 57       	subi	r30, 0x7C	; 124
     dea:	ff 4f       	sbci	r31, 0xFF	; 255
     dec:	20 81       	ld	r18, Z
     dee:	31 81       	ldd	r19, Z+1	; 0x01
     df0:	21 50       	subi	r18, 0x01	; 1
     df2:	31 09       	sbc	r19, r1
     df4:	31 83       	std	Z+1, r19	; 0x01
     df6:	20 83       	st	Z, r18
     df8:	23 2b       	or	r18, r19
     dfa:	39 f4       	brne	.+14     	; 0xe0a <nwkTxAckWaitTimerHandler+0x46>
     dfc:	fc 01       	movw	r30, r24
     dfe:	d0 83       	st	Z, r29
     e00:	ed 57       	subi	r30, 0x7D	; 125
     e02:	ff 4f       	sbci	r31, 0xFF	; 255
     e04:	c0 83       	st	Z, r28
     e06:	10 2f       	mov	r17, r16
     e08:	01 c0       	rjmp	.+2      	; 0xe0c <nwkTxAckWaitTimerHandler+0x48>
     e0a:	10 2f       	mov	r17, r16
     e0c:	47 df       	rcall	.-370    	; 0xc9c <nwkFrameNext>
     e0e:	00 97       	sbiw	r24, 0x00	; 0
     e10:	39 f7       	brne	.-50     	; 0xde0 <nwkTxAckWaitTimerHandler+0x1c>
     e12:	11 23       	and	r17, r17
     e14:	11 f0       	breq	.+4      	; 0xe1a <nwkTxAckWaitTimerHandler+0x56>
     e16:	c7 01       	movw	r24, r14
     e18:	ba d3       	rcall	.+1908   	; 0x158e <SYS_TimerStart>
     e1a:	df 91       	pop	r29
     e1c:	cf 91       	pop	r28
     e1e:	1f 91       	pop	r17
     e20:	0f 91       	pop	r16
     e22:	ff 90       	pop	r15
     e24:	ef 90       	pop	r14
     e26:	08 95       	ret

00000e28 <nwkTxInit>:
     e28:	10 92 ef 08 	sts	0x08EF, r1
     e2c:	10 92 ee 08 	sts	0x08EE, r1
     e30:	e1 ee       	ldi	r30, 0xE1	; 225
     e32:	f8 e0       	ldi	r31, 0x08	; 8
     e34:	82 e3       	ldi	r24, 0x32	; 50
     e36:	90 e0       	ldi	r25, 0x00	; 0
     e38:	a0 e0       	ldi	r26, 0x00	; 0
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	86 83       	std	Z+6, r24	; 0x06
     e3e:	97 83       	std	Z+7, r25	; 0x07
     e40:	a0 87       	std	Z+8, r26	; 0x08
     e42:	b1 87       	std	Z+9, r27	; 0x09
     e44:	12 86       	std	Z+10, r1	; 0x0a
     e46:	82 ee       	ldi	r24, 0xE2	; 226
     e48:	96 e0       	ldi	r25, 0x06	; 6
     e4a:	94 87       	std	Z+12, r25	; 0x0c
     e4c:	83 87       	std	Z+11, r24	; 0x0b
     e4e:	e4 ed       	ldi	r30, 0xD4	; 212
     e50:	f8 e0       	ldi	r31, 0x08	; 8
     e52:	8a e0       	ldi	r24, 0x0A	; 10
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	a0 e0       	ldi	r26, 0x00	; 0
     e58:	b0 e0       	ldi	r27, 0x00	; 0
     e5a:	86 83       	std	Z+6, r24	; 0x06
     e5c:	97 83       	std	Z+7, r25	; 0x07
     e5e:	a0 87       	std	Z+8, r26	; 0x08
     e60:	b1 87       	std	Z+9, r27	; 0x09
     e62:	12 86       	std	Z+10, r1	; 0x0a
     e64:	86 eb       	ldi	r24, 0xB6	; 182
     e66:	96 e0       	ldi	r25, 0x06	; 6
     e68:	94 87       	std	Z+12, r25	; 0x0c
     e6a:	83 87       	std	Z+11, r24	; 0x0b
     e6c:	08 95       	ret

00000e6e <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
     e72:	fc 01       	movw	r30, r24
     e74:	c7 81       	ldd	r28, Z+7	; 0x07
     e76:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
     e78:	81 85       	ldd	r24, Z+9	; 0x09
     e7a:	83 30       	cpi	r24, 0x03	; 3
     e7c:	c1 f4       	brne	.+48     	; 0xeae <nwkTxAckReceived+0x40>
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	10 c0       	rjmp	.+32     	; 0xea4 <nwkTxAckReceived+0x36>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
     e84:	fc 01       	movw	r30, r24
     e86:	20 81       	ld	r18, Z
     e88:	26 31       	cpi	r18, 0x16	; 22
     e8a:	61 f4       	brne	.+24     	; 0xea4 <nwkTxAckReceived+0x36>
     e8c:	34 85       	ldd	r19, Z+12	; 0x0c
     e8e:	29 81       	ldd	r18, Y+1	; 0x01
     e90:	32 13       	cpse	r19, r18
     e92:	08 c0       	rjmp	.+16     	; 0xea4 <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
     e94:	27 e1       	ldi	r18, 0x17	; 23
     e96:	20 83       	st	Z, r18
      frame->tx.control = command->control;
     e98:	2a 81       	ldd	r18, Y+2	; 0x02
     e9a:	ea 57       	subi	r30, 0x7A	; 122
     e9c:	ff 4f       	sbci	r31, 0xFF	; 255
     e9e:	20 83       	st	Z, r18
      return true;
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	06 c0       	rjmp	.+12     	; 0xeb0 <nwkTxAckReceived+0x42>
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
     ea4:	fb de       	rcall	.-522    	; 0xc9c <nwkFrameNext>
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	69 f7       	brne	.-38     	; 0xe84 <nwkTxAckReceived+0x16>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
     eaa:	80 e0       	ldi	r24, 0x00	; 0
     eac:	01 c0       	rjmp	.+2      	; 0xeb0 <nwkTxAckReceived+0x42>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
     eae:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
     eb0:	df 91       	pop	r29
     eb2:	cf 91       	pop	r28
     eb4:	08 95       	ret

00000eb6 <phyTrxSetState>:
  phyTrxSetState(TRX_CMD_TRX_OFF);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  if (phyRxState)
    phyTrxSetState(TRX_CMD_RX_AACK_ON);
     eb6:	93 e0       	ldi	r25, 0x03	; 3
     eb8:	90 93 42 01 	sts	0x0142, r25
     ebc:	e1 e4       	ldi	r30, 0x41	; 65
     ebe:	f1 e0       	ldi	r31, 0x01	; 1
     ec0:	90 81       	ld	r25, Z
     ec2:	9f 71       	andi	r25, 0x1F	; 31
     ec4:	98 30       	cpi	r25, 0x08	; 8
     ec6:	e1 f7       	brne	.-8      	; 0xec0 <phyTrxSetState+0xa>
     ec8:	80 93 42 01 	sts	0x0142, r24
     ecc:	e1 e4       	ldi	r30, 0x41	; 65
     ece:	f1 e0       	ldi	r31, 0x01	; 1
     ed0:	90 81       	ld	r25, Z
     ed2:	9f 71       	andi	r25, 0x1F	; 31
     ed4:	98 13       	cpse	r25, r24
     ed6:	fc cf       	rjmp	.-8      	; 0xed0 <phyTrxSetState+0x1a>
     ed8:	08 95       	ret

00000eda <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
     eda:	e9 e3       	ldi	r30, 0x39	; 57
     edc:	f1 e0       	ldi	r31, 0x01	; 1
     ede:	80 81       	ld	r24, Z
     ee0:	81 60       	ori	r24, 0x01	; 1
     ee2:	80 83       	st	Z, r24

  phyRxState = false;
     ee4:	10 92 f1 08 	sts	0x08F1, r1
  phyBand = 0;
     ee8:	10 92 f0 08 	sts	0x08F0, r1
  phyState = PHY_STATE_IDLE;
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	80 93 f2 08 	sts	0x08F2, r24

  phyTrxSetState(TRX_CMD_TRX_OFF);
     ef2:	88 e0       	ldi	r24, 0x08	; 8
     ef4:	e0 df       	rcall	.-64     	; 0xeb6 <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
     ef6:	8b ee       	ldi	r24, 0xEB	; 235
     ef8:	80 93 56 01 	sts	0x0156, r24

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
     efc:	ec e4       	ldi	r30, 0x4C	; 76
     efe:	f1 e0       	ldi	r31, 0x01	; 1
     f00:	80 81       	ld	r24, Z
     f02:	80 68       	ori	r24, 0x80	; 128
     f04:	80 83       	st	Z, r24
     f06:	08 95       	ret

00000f08 <sensor_handler>:

/*************************************************************************//**
  @brief sensor_handler function to decide the execution logic of a sensor according to its state, return 1 if it has some borrow time 
*****************************************************************************/
int sensor_handler( struct event *p )
{
     f08:	0f 93       	push	r16
     f0a:	1f 93       	push	r17
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	ec 01       	movw	r28, r24
	int retNum;
	BaseSensor *sp;
	/* sanity check */
	if( p == EV_NULL )
     f12:	89 2b       	or	r24, r25
     f14:	59 f4       	brne	.+22     	; 0xf2c <sensor_handler+0x24>
	{
		#ifdef DEBUG
		printf("Null Event Error !!!");
     f16:	84 e2       	ldi	r24, 0x24	; 36
     f18:	93 e0       	ldi	r25, 0x03	; 3
     f1a:	9f 93       	push	r25
     f1c:	8f 93       	push	r24
     f1e:	0e 94 b0 1c 	call	0x3960	; 0x3960 <printf>
		#endif
		return 0;
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	70 c0       	rjmp	.+224    	; 0x100c <sensor_handler+0x104>
	}
	sp = ( BaseSensor * )( p->sp );
     f2c:	08 89       	ldd	r16, Y+16	; 0x10
     f2e:	19 89       	ldd	r17, Y+17	; 0x11

	#ifdef DEBUG
	// printf("cur_state = %d\n", p->cur_state);
	#endif
	switch( p->cur_state )
     f30:	98 8d       	ldd	r25, Y+24	; 0x18
     f32:	91 30       	cpi	r25, 0x01	; 1
     f34:	a9 f0       	breq	.+42     	; 0xf60 <sensor_handler+0x58>
     f36:	38 f0       	brcs	.+14     	; 0xf46 <sensor_handler+0x3e>
     f38:	92 30       	cpi	r25, 0x02	; 2
     f3a:	09 f4       	brne	.+2      	; 0xf3e <sensor_handler+0x36>
     f3c:	4e c0       	rjmp	.+156    	; 0xfda <sensor_handler+0xd2>
     f3e:	94 30       	cpi	r25, 0x04	; 4
     f40:	09 f4       	brne	.+2      	; 0xf44 <sensor_handler+0x3c>
     f42:	5a c0       	rjmp	.+180    	; 0xff8 <sensor_handler+0xf0>
     f44:	61 c0       	rjmp	.+194    	; 0x1008 <sensor_handler+0x100>
	{
		/* New : init first, if retNum is not 0 goto Oops state */
		case New :
		// the way to call init() is different than most other functions, since it is virtual function in BaseDevice .
		retNum = sp->abstract.device_vt->init( &(sp->abstract) );
     f46:	d8 01       	movw	r26, r16
     f48:	ed 91       	ld	r30, X+
     f4a:	fc 91       	ld	r31, X
     f4c:	02 80       	ldd	r0, Z+2	; 0x02
     f4e:	f3 81       	ldd	r31, Z+3	; 0x03
     f50:	e0 2d       	mov	r30, r0
     f52:	c8 01       	movw	r24, r16
     f54:	19 95       	eicall
		if(retNum != 0)
		{
			p->cur_state = Oops;
		}
		p->cur_state = Ready;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	88 8f       	std	Y+24, r24	; 0x18
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
		if(retNum != 0)
		{
			p->cur_state = Oops;
		}
		p->cur_state = Ready;
		break;
     f5e:	56 c0       	rjmp	.+172    	; 0x100c <sensor_handler+0x104>
		
		
		
		/* Ready : ready to activate collection request, if retNum is not 0 goto Oops state */
		case Ready :
		retNum = sp->vmt->Request(p->sp);
     f60:	d8 01       	movw	r26, r16
     f62:	1c 96       	adiw	r26, 0x0c	; 12
     f64:	ed 91       	ld	r30, X+
     f66:	fc 91       	ld	r31, X
     f68:	1d 97       	sbiw	r26, 0x0d	; 13
     f6a:	04 80       	ldd	r0, Z+4	; 0x04
     f6c:	f5 81       	ldd	r31, Z+5	; 0x05
     f6e:	e0 2d       	mov	r30, r0
     f70:	c8 01       	movw	r24, r16
     f72:	19 95       	eicall
		if ( retNum == -1 )
     f74:	8f 3f       	cpi	r24, 0xFF	; 255
     f76:	bf ef       	ldi	r27, 0xFF	; 255
     f78:	9b 07       	cpc	r25, r27
     f7a:	29 f4       	brne	.+10     	; 0xf86 <sensor_handler+0x7e>
		{
			p->cur_state = Oops;
     f7c:	84 e0       	ldi	r24, 0x04	; 4
     f7e:	88 8f       	std	Y+24, r24	; 0x18
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
     f80:	80 e0       	ldi	r24, 0x00	; 0
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	43 c0       	rjmp	.+134    	; 0x100c <sensor_handler+0x104>
		retNum = sp->vmt->Request(p->sp);
		if ( retNum == -1 )
		{
			p->cur_state = Oops;
		}
		else if( retNum == 0 )
     f86:	00 97       	sbiw	r24, 0x00	; 0
     f88:	81 f4       	brne	.+32     	; 0xfaa <sensor_handler+0xa2>
		{
			p->cur_state = Ready;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	88 8f       	std	Y+24, r24	; 0x18
			sp->vmt->Collect(p->sp);
     f8e:	d8 01       	movw	r26, r16
     f90:	1c 96       	adiw	r26, 0x0c	; 12
     f92:	ed 91       	ld	r30, X+
     f94:	fc 91       	ld	r31, X
     f96:	1d 97       	sbiw	r26, 0x0d	; 13
     f98:	06 80       	ldd	r0, Z+6	; 0x06
     f9a:	f7 81       	ldd	r31, Z+7	; 0x07
     f9c:	e0 2d       	mov	r30, r0
     f9e:	88 89       	ldd	r24, Y+16	; 0x10
     fa0:	99 89       	ldd	r25, Y+17	; 0x11
     fa2:	19 95       	eicall
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
     fa4:	80 e0       	ldi	r24, 0x00	; 0
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	31 c0       	rjmp	.+98     	; 0x100c <sensor_handler+0x104>
			// printf("data : %d\n", data);
			// #endif
		}
		else
		{
			p->cur_state = Running;
     faa:	22 e0       	ldi	r18, 0x02	; 2
     fac:	28 8f       	std	Y+24, r18	; 0x18
			p->timeout = (int16_t) retNum;
     fae:	09 2e       	mov	r0, r25
     fb0:	00 0c       	add	r0, r0
     fb2:	aa 0b       	sbc	r26, r26
     fb4:	bb 0b       	sbc	r27, r27
     fb6:	8c 83       	std	Y+4, r24	; 0x04
     fb8:	9d 83       	std	Y+5, r25	; 0x05
     fba:	ae 83       	std	Y+6, r26	; 0x06
     fbc:	bf 83       	std	Y+7, r27	; 0x07
			p->borrow_timeout = (int16_t)  retNum;
     fbe:	8c 87       	std	Y+12, r24	; 0x0c
     fc0:	9d 87       	std	Y+13, r25	; 0x0d
     fc2:	ae 87       	std	Y+14, r26	; 0x0e
     fc4:	bf 87       	std	Y+15, r27	; 0x0f
			LL_POP( timeoutq );
     fc6:	80 91 f3 0a 	lds	r24, 0x0AF3
     fca:	90 91 f4 0a 	lds	r25, 0x0AF4
     fce:	29 d3       	rcall	.+1618   	; 0x1622 <ll_pop>
			insert_timeoutq_event( p );
     fd0:	ce 01       	movw	r24, r28
     fd2:	db d0       	rcall	.+438    	; 0x118a <insert_timeoutq_event>
			return 1;
     fd4:	81 e0       	ldi	r24, 0x01	; 1
     fd6:	90 e0       	ldi	r25, 0x00	; 0
     fd8:	19 c0       	rjmp	.+50     	; 0x100c <sensor_handler+0x104>
		
		
		/* Running : ready to pull data right away */
		case Running :
		//      data = p->sp->vmt->Collect();
		p->cur_state = Ready;
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	88 8f       	std	Y+24, r24	; 0x18
		p->sp->vmt->Collect(p->sp);
     fde:	d8 01       	movw	r26, r16
     fe0:	1c 96       	adiw	r26, 0x0c	; 12
     fe2:	ed 91       	ld	r30, X+
     fe4:	fc 91       	ld	r31, X
     fe6:	1d 97       	sbiw	r26, 0x0d	; 13
     fe8:	06 80       	ldd	r0, Z+6	; 0x06
     fea:	f7 81       	ldd	r31, Z+7	; 0x07
     fec:	e0 2d       	mov	r30, r0
     fee:	c8 01       	movw	r24, r16
     ff0:	19 95       	eicall
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
     ff2:	80 e0       	ldi	r24, 0x00	; 0
     ff4:	90 e0       	ldi	r25, 0x00	; 0
		/* Running : ready to pull data right away */
		case Running :
		//      data = p->sp->vmt->Collect();
		p->cur_state = Ready;
		p->sp->vmt->Collect(p->sp);
		break;
     ff6:	0a c0       	rjmp	.+20     	; 0x100c <sensor_handler+0x104>
		
		/* Oops : when some errors occur */
		case Oops :
		/* TODO : ( we may want to do something in reset function and ) re-init by setting the state to new */
#ifdef DEBUG
		      printf("Something really wrong happens\n");
     ff8:	89 e3       	ldi	r24, 0x39	; 57
     ffa:	93 e0       	ldi	r25, 0x03	; 3
     ffc:	0e 94 c8 1c 	call	0x3990	; 0x3990 <puts>
#endif
		p->cur_state = New;
    1000:	18 8e       	std	Y+24, r1	; 0x18
		break;
	}
	return 0;
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	90 e0       	ldi	r25, 0x00	; 0
		/* TODO : ( we may want to do something in reset function and ) re-init by setting the state to new */
#ifdef DEBUG
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
    1006:	02 c0       	rjmp	.+4      	; 0x100c <sensor_handler+0x104>
	}
	return 0;
    1008:	80 e0       	ldi	r24, 0x00	; 0
    100a:	90 e0       	ldi	r25, 0x00	; 0
	// printf(" run :\n\t");
	// p->sp->vmt->MyPrint(p->sp);

}
    100c:	df 91       	pop	r29
    100e:	cf 91       	pop	r28
    1010:	1f 91       	pop	r17
    1012:	0f 91       	pop	r16
    1014:	08 95       	ret

00001016 <device_handler>:
 */
/*************************************************************************//**
  @brief device_handler function to decide the execution logic of a non-sensor device according to its state.
*****************************************************************************/
int device_handler( struct event *p )
{
    1016:	0f 93       	push	r16
    1018:	1f 93       	push	r17
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	fc 01       	movw	r30, r24
	int retNum = 0;
	BaseDevice * bdp = (BaseDevice *) ( p->load_p );
    1020:	c2 89       	ldd	r28, Z+18	; 0x12
    1022:	d3 89       	ldd	r29, Z+19	; 0x13
	LoadDataDevice *ldp = (LoadDataDevice*) ( p->load_p );
	DemoStorageDevice *ddp = (DemoStorageDevice*) ( p->store_p );
    1024:	04 89       	ldd	r16, Z+20	; 0x14
    1026:	15 89       	ldd	r17, Z+21	; 0x15

	/* sanity check */
	if( p == EV_NULL )
    1028:	89 2b       	or	r24, r25
    102a:	29 f4       	brne	.+10     	; 0x1036 <device_handler+0x20>
	{
		#ifdef DEBUG
		printf("Null Event Error !!!\n");
    102c:	84 e2       	ldi	r24, 0x24	; 36
    102e:	93 e0       	ldi	r25, 0x03	; 3
    1030:	0e 94 c8 1c 	call	0x3990	; 0x3990 <puts>
		#endif
		return 0;
    1034:	35 c0       	rjmp	.+106    	; 0x10a0 <device_handler+0x8a>
	}
	
	switch( p->cur_state )
    1036:	90 8d       	ldd	r25, Z+24	; 0x18
    1038:	99 23       	and	r25, r25
    103a:	19 f0       	breq	.+6      	; 0x1042 <device_handler+0x2c>
    103c:	91 30       	cpi	r25, 0x01	; 1
    103e:	21 f0       	breq	.+8      	; 0x1048 <device_handler+0x32>
    1040:	2f c0       	rjmp	.+94     	; 0x10a0 <device_handler+0x8a>
	{
		/* New : init first, if retNum is not 0 goto Oops state */
		case New :
			p->cur_state = Ready;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	80 8f       	std	Z+24, r24	; 0x18
			break;
    1046:	2c c0       	rjmp	.+88     	; 0x10a0 <device_handler+0x8a>
		case Ready :
			p->cur_state = Ready;
			if( bdp->device_vt->getType(bdp) == TYPE_DEVICE )
    1048:	e8 81       	ld	r30, Y
    104a:	f9 81       	ldd	r31, Y+1	; 0x01
    104c:	06 80       	ldd	r0, Z+6	; 0x06
    104e:	f7 81       	ldd	r31, Z+7	; 0x07
    1050:	e0 2d       	mov	r30, r0
    1052:	ce 01       	movw	r24, r28
    1054:	19 95       	eicall
    1056:	05 97       	sbiw	r24, 0x05	; 5
    1058:	81 f4       	brne	.+32     	; 0x107a <device_handler+0x64>
			{
				printf("Load Device\n");
    105a:	88 e5       	ldi	r24, 0x58	; 88
    105c:	93 e0       	ldi	r25, 0x03	; 3
    105e:	0e 94 c8 1c 	call	0x3990	; 0x3990 <puts>
				ldp->vmt->Execute(ldp);
    1062:	ea 81       	ldd	r30, Y+2	; 0x02
    1064:	fb 81       	ldd	r31, Y+3	; 0x03
    1066:	02 80       	ldd	r0, Z+2	; 0x02
    1068:	f3 81       	ldd	r31, Z+3	; 0x03
    106a:	e0 2d       	mov	r30, r0
    106c:	ce 01       	movw	r24, r28
    106e:	19 95       	eicall
				printf("Load Device Finish\n");
    1070:	84 e6       	ldi	r24, 0x64	; 100
    1072:	93 e0       	ldi	r25, 0x03	; 3
    1074:	0e 94 c8 1c 	call	0x3990	; 0x3990 <puts>
    1078:	13 c0       	rjmp	.+38     	; 0x10a0 <device_handler+0x8a>
			}	
			else if( bdp->device_vt->getType(bdp) == TYPE_STORAGE_DEVICE )
    107a:	e8 81       	ld	r30, Y
    107c:	f9 81       	ldd	r31, Y+1	; 0x01
    107e:	06 80       	ldd	r0, Z+6	; 0x06
    1080:	f7 81       	ldd	r31, Z+7	; 0x07
    1082:	e0 2d       	mov	r30, r0
    1084:	ce 01       	movw	r24, r28
    1086:	19 95       	eicall
    1088:	04 97       	sbiw	r24, 0x04	; 4
    108a:	51 f4       	brne	.+20     	; 0x10a0 <device_handler+0x8a>
			{
				ddp->vmt->Execute(ddp);
    108c:	d8 01       	movw	r26, r16
    108e:	12 96       	adiw	r26, 0x02	; 2
    1090:	ed 91       	ld	r30, X+
    1092:	fc 91       	ld	r31, X
    1094:	13 97       	sbiw	r26, 0x03	; 3
    1096:	02 80       	ldd	r0, Z+2	; 0x02
    1098:	f3 81       	ldd	r31, Z+3	; 0x03
    109a:	e0 2d       	mov	r30, r0
    109c:	c8 01       	movw	r24, r16
    109e:	19 95       	eicall
			break;
		default :
			break;
	}
	return retNum;
}
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	1f 91       	pop	r17
    10aa:	0f 91       	pop	r16
    10ac:	08 95       	ret

000010ae <init_timeoutq>:

/*************************************************************************//**
  @brief Init function of scheduler, which initialize all events and put them into freelist
*****************************************************************************/
void init_timeoutq()
{
    10ae:	0f 93       	push	r16
    10b0:	1f 93       	push	r17
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
	int i;

	timeoutq = (struct event *)&TQ;
    10b6:	ef ee       	ldi	r30, 0xEF	; 239
    10b8:	fa e0       	ldi	r31, 0x0A	; 10
    10ba:	f0 93 f4 0a 	sts	0x0AF4, r31
    10be:	e0 93 f3 0a 	sts	0x0AF3, r30
	LL_INIT(timeoutq);
    10c2:	f3 83       	std	Z+3, r31	; 0x03
    10c4:	e2 83       	std	Z+2, r30	; 0x02
    10c6:	f1 83       	std	Z+1, r31	; 0x01
    10c8:	e0 83       	st	Z, r30
	freelist = (struct event *)&FL;
    10ca:	e7 e4       	ldi	r30, 0x47	; 71
    10cc:	fb e0       	ldi	r31, 0x0B	; 11
    10ce:	f0 93 4c 0b 	sts	0x0B4C, r31
    10d2:	e0 93 4b 0b 	sts	0x0B4B, r30
	LL_INIT(freelist);
    10d6:	f3 83       	std	Z+3, r31	; 0x03
    10d8:	e2 83       	std	Z+2, r30	; 0x02
    10da:	f1 83       	std	Z+1, r31	; 0x01
    10dc:	e0 83       	st	Z, r30
    10de:	cf e3       	ldi	r28, 0x3F	; 63
    10e0:	d9 e0       	ldi	r29, 0x09	; 9
    10e2:	0f ee       	ldi	r16, 0xEF	; 239
    10e4:	1a e0       	ldi	r17, 0x0A	; 10

	for (i=0; i<MAX_EVENTS; i++) {
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
    10e6:	be 01       	movw	r22, r28
    10e8:	80 91 4b 0b 	lds	r24, 0x0B4B
    10ec:	90 91 4c 0b 	lds	r25, 0x0B4C
    10f0:	62 d2       	rcall	.+1220   	; 0x15b6 <ll_r_insert>
    10f2:	6b 96       	adiw	r28, 0x1b	; 27
	timeoutq = (struct event *)&TQ;
	LL_INIT(timeoutq);
	freelist = (struct event *)&FL;
	LL_INIT(freelist);

	for (i=0; i<MAX_EVENTS; i++) {
    10f4:	c0 17       	cp	r28, r16
    10f6:	d1 07       	cpc	r29, r17
    10f8:	b1 f7       	brne	.-20     	; 0x10e6 <init_timeoutq+0x38>
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
	}

	return;
}
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	08 95       	ret

00001104 <next_event_time_collapse>:

/*************************************************************************//**
  @brief Update next event's timeout value when we set timer for it.
*****************************************************************************/
void next_event_time_collapse(int32_t sleep_time)
{
    1104:	cf 92       	push	r12
    1106:	df 92       	push	r13
    1108:	ef 92       	push	r14
    110a:	ff 92       	push	r15
    110c:	6b 01       	movw	r12, r22
    110e:	7c 01       	movw	r14, r24
	struct event * ev = ( struct event * ) LL_TOP( timeoutq );
    1110:	80 91 f3 0a 	lds	r24, 0x0AF3
    1114:	90 91 f4 0a 	lds	r25, 0x0AF4
    1118:	45 d2       	rcall	.+1162   	; 0x15a4 <ll_first>
	if( EV_NULL == ev )
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	69 f0       	breq	.+26     	; 0x1138 <next_event_time_collapse+0x34>
		return;
	ev->timeout -= sleep_time;
    111e:	fc 01       	movw	r30, r24
    1120:	44 81       	ldd	r20, Z+4	; 0x04
    1122:	55 81       	ldd	r21, Z+5	; 0x05
    1124:	66 81       	ldd	r22, Z+6	; 0x06
    1126:	77 81       	ldd	r23, Z+7	; 0x07
    1128:	4c 19       	sub	r20, r12
    112a:	5d 09       	sbc	r21, r13
    112c:	6e 09       	sbc	r22, r14
    112e:	7f 09       	sbc	r23, r15
    1130:	44 83       	std	Z+4, r20	; 0x04
    1132:	55 83       	std	Z+5, r21	; 0x05
    1134:	66 83       	std	Z+6, r22	; 0x06
    1136:	77 83       	std	Z+7, r23	; 0x07
}
    1138:	ff 90       	pop	r15
    113a:	ef 90       	pop	r14
    113c:	df 90       	pop	r13
    113e:	cf 90       	pop	r12
    1140:	08 95       	ret

00001142 <get_next_interval>:
*****************************************************************************/
int32_t get_next_interval()
{

	int32_t wait_time = MAX_SLEEP_INTERVAL;
	struct event * ev = ( struct event * ) LL_TOP( timeoutq );
    1142:	80 91 f3 0a 	lds	r24, 0x0AF3
    1146:	90 91 f4 0a 	lds	r25, 0x0AF4
    114a:	2c d2       	rcall	.+1112   	; 0x15a4 <ll_first>

	/* sanity check */
    /* no event in queue */
    /* TODO : to optimize the sleep time or let the CPU sleep or set up some other interrupts */
	if( EV_NULL == ev )
    114c:	00 97       	sbiw	r24, 0x00	; 0
    114e:	69 f4       	brne	.+26     	; 0x116a <get_next_interval+0x28>
	{
#ifdef DEBUG
		printf("we may get some memory leakage issue, or something really bad occurs\n");
    1150:	87 e7       	ldi	r24, 0x77	; 119
    1152:	93 e0       	ldi	r25, 0x03	; 3
    1154:	0e 94 c8 1c 	call	0x3990	; 0x3990 <puts>
		printf("so we are going to take some really sleep, since no event in scheduler\n");
    1158:	8c eb       	ldi	r24, 0xBC	; 188
    115a:	93 e0       	ldi	r25, 0x03	; 3
    115c:	0e 94 c8 1c 	call	0x3990	; 0x3990 <puts>
#endif
	    return wait_time;
    1160:	60 e4       	ldi	r22, 0x40	; 64
    1162:	7f e1       	ldi	r23, 0x1F	; 31
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	08 95       	ret
	}
	
	/* if the next event is nearer */
	if( wait_time > ev->timeout )
    116a:	fc 01       	movw	r30, r24
    116c:	64 81       	ldd	r22, Z+4	; 0x04
    116e:	75 81       	ldd	r23, Z+5	; 0x05
    1170:	86 81       	ldd	r24, Z+6	; 0x06
    1172:	97 81       	ldd	r25, Z+7	; 0x07
    1174:	60 34       	cpi	r22, 0x40	; 64
    1176:	ff e1       	ldi	r31, 0x1F	; 31
    1178:	7f 07       	cpc	r23, r31
    117a:	81 05       	cpc	r24, r1
    117c:	91 05       	cpc	r25, r1
    117e:	24 f0       	brlt	.+8      	; 0x1188 <get_next_interval+0x46>
  @brief Return the the time ( ms ) of the next event
*****************************************************************************/
int32_t get_next_interval()
{

	int32_t wait_time = MAX_SLEEP_INTERVAL;
    1180:	60 e4       	ldi	r22, 0x40	; 64
    1182:	7f e1       	ldi	r23, 0x1F	; 31
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
	{
		wait_time = ev->timeout;
	}
	/* if the next event time is longer, we need to wait it time by time in handle_timeoutq_event() function, since currently, the longest waiting time support is 8s */
	return wait_time;
}
    1188:	08 95       	ret

0000118a <insert_timeoutq_event>:

/*************************************************************************//**
  @brief Insert a new event into the scheduler according to timeout order
*****************************************************************************/
void insert_timeoutq_event( struct event * ep)
{
    118a:	0f 93       	push	r16
    118c:	1f 93       	push	r17
    118e:	cf 93       	push	r28
    1190:	df 93       	push	r29
    1192:	dc 01       	movw	r26, r24
	// Try to insert it according to timeout and timeoutq
	struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
    1194:	c0 91 f3 0a 	lds	r28, 0x0AF3
    1198:	d0 91 f4 0a 	lds	r29, 0x0AF4
    119c:	ea 81       	ldd	r30, Y+2	; 0x02
    119e:	fb 81       	ldd	r31, Y+3	; 0x03
    11a0:	ce 17       	cp	r28, r30
    11a2:	df 07       	cpc	r29, r31
    11a4:	71 f1       	breq	.+92     	; 0x1202 <insert_timeoutq_event+0x78>
	{
		if( it != EV_NULL )
    11a6:	30 97       	sbiw	r30, 0x00	; 0
    11a8:	31 f1       	breq	.+76     	; 0x11f6 <insert_timeoutq_event+0x6c>
		{
			if( ( it->timeout ) > ( ep->timeout ) )
    11aa:	04 81       	ldd	r16, Z+4	; 0x04
    11ac:	15 81       	ldd	r17, Z+5	; 0x05
    11ae:	26 81       	ldd	r18, Z+6	; 0x06
    11b0:	37 81       	ldd	r19, Z+7	; 0x07
    11b2:	14 96       	adiw	r26, 0x04	; 4
    11b4:	4d 91       	ld	r20, X+
    11b6:	5d 91       	ld	r21, X+
    11b8:	6d 91       	ld	r22, X+
    11ba:	7c 91       	ld	r23, X
    11bc:	17 97       	sbiw	r26, 0x07	; 7
    11be:	40 17       	cp	r20, r16
    11c0:	51 07       	cpc	r21, r17
    11c2:	62 07       	cpc	r22, r18
    11c4:	73 07       	cpc	r23, r19
    11c6:	6c f4       	brge	.+26     	; 0x11e2 <insert_timeoutq_event+0x58>
			{
				it->timeout -= ep->timeout;
    11c8:	04 1b       	sub	r16, r20
    11ca:	15 0b       	sbc	r17, r21
    11cc:	26 0b       	sbc	r18, r22
    11ce:	37 0b       	sbc	r19, r23
    11d0:	04 83       	std	Z+4, r16	; 0x04
    11d2:	15 83       	std	Z+5, r17	; 0x05
    11d4:	26 83       	std	Z+6, r18	; 0x06
    11d6:	37 83       	std	Z+7, r19	; 0x07
				LL_L_INSERT( it, ep );
    11d8:	bd 01       	movw	r22, r26
    11da:	80 81       	ld	r24, Z
    11dc:	91 81       	ldd	r25, Z+1	; 0x01
    11de:	eb d1       	rcall	.+982    	; 0x15b6 <ll_r_insert>
    11e0:	18 c0       	rjmp	.+48     	; 0x1212 <insert_timeoutq_event+0x88>
				// printf("left insert \n");
				break;
			}
			else
			{
				ep->timeout -= it->timeout;
    11e2:	40 1b       	sub	r20, r16
    11e4:	51 0b       	sbc	r21, r17
    11e6:	62 0b       	sbc	r22, r18
    11e8:	73 0b       	sbc	r23, r19
    11ea:	14 96       	adiw	r26, 0x04	; 4
    11ec:	4d 93       	st	X+, r20
    11ee:	5d 93       	st	X+, r21
    11f0:	6d 93       	st	X+, r22
    11f2:	7c 93       	st	X, r23
    11f4:	17 97       	sbiw	r26, 0x07	; 7
	// Try to insert it according to timeout and timeoutq
	struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
    11f6:	02 80       	ldd	r0, Z+2	; 0x02
    11f8:	f3 81       	ldd	r31, Z+3	; 0x03
    11fa:	e0 2d       	mov	r30, r0
    11fc:	ce 17       	cp	r28, r30
    11fe:	df 07       	cpc	r29, r31
    1200:	91 f6       	brne	.-92     	; 0x11a6 <insert_timeoutq_event+0x1c>
	}
	
	// If not insert it left to the header
	if( is_pushed == 0 )
	{
		LL_APPEND(timeoutq, ep);
    1202:	e0 91 f3 0a 	lds	r30, 0x0AF3
    1206:	f0 91 f4 0a 	lds	r31, 0x0AF4
    120a:	bd 01       	movw	r22, r26
    120c:	80 81       	ld	r24, Z
    120e:	91 81       	ldd	r25, Z+1	; 0x01
    1210:	d2 d1       	rcall	.+932    	; 0x15b6 <ll_r_insert>

	#ifdef DEBUG
	// dump_timeoutq();
	#endif

}
    1212:	df 91       	pop	r29
    1214:	cf 91       	pop	r28
    1216:	1f 91       	pop	r17
    1218:	0f 91       	pop	r16
    121a:	08 95       	ret

0000121c <load_new_sensor>:

/*************************************************************************//**
  @brief Load a brand new sensor activity into the scheduler's timeoutQ
*****************************************************************************/
int load_new_sensor( int32_t timeout, int32_t repeat, BaseSensor *device_ptr, int otherinfo )
{
    121c:	4f 92       	push	r4
    121e:	5f 92       	push	r5
    1220:	6f 92       	push	r6
    1222:	7f 92       	push	r7
    1224:	8f 92       	push	r8
    1226:	9f 92       	push	r9
    1228:	af 92       	push	r10
    122a:	bf 92       	push	r11
    122c:	ef 92       	push	r14
    122e:	ff 92       	push	r15
    1230:	0f 93       	push	r16
    1232:	1f 93       	push	r17
    1234:	2b 01       	movw	r4, r22
    1236:	3c 01       	movw	r6, r24
    1238:	49 01       	movw	r8, r18
    123a:	5a 01       	movw	r10, r20

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    123c:	80 91 4b 0b 	lds	r24, 0x0B4B
    1240:	90 91 4c 0b 	lds	r25, 0x0B4C
    1244:	ee d1       	rcall	.+988    	; 0x1622 <ll_pop>
    1246:	fc 01       	movw	r30, r24
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
    1248:	89 2b       	or	r24, r25
    124a:	d9 f0       	breq	.+54     	; 0x1282 <load_new_sensor+0x66>
        return -1;
    ep->timeout = timeout;
    124c:	44 82       	std	Z+4, r4	; 0x04
    124e:	55 82       	std	Z+5, r5	; 0x05
    1250:	66 82       	std	Z+6, r6	; 0x06
    1252:	77 82       	std	Z+7, r7	; 0x07
    ep->repeat_interval = repeat;
    1254:	80 86       	std	Z+8, r8	; 0x08
    1256:	91 86       	std	Z+9, r9	; 0x09
    1258:	a2 86       	std	Z+10, r10	; 0x0a
    125a:	b3 86       	std	Z+11, r11	; 0x0b
	ep->borrow_timeout = 0;
    125c:	14 86       	std	Z+12, r1	; 0x0c
    125e:	15 86       	std	Z+13, r1	; 0x0d
    1260:	16 86       	std	Z+14, r1	; 0x0e
    1262:	17 86       	std	Z+15, r1	; 0x0f
    ep->sp = device_ptr;
    1264:	11 8b       	std	Z+17, r17	; 0x11
    1266:	00 8b       	std	Z+16, r16	; 0x10
    ep->info = otherinfo;
    1268:	f7 8a       	std	Z+23, r15	; 0x17
    126a:	e6 8a       	std	Z+22, r14	; 0x16
    ep->cur_state = Ready;
    126c:	81 e0       	ldi	r24, 0x01	; 1
    126e:	80 8f       	std	Z+24, r24	; 0x18
    ep->run = sensor_handler;
    1270:	84 e8       	ldi	r24, 0x84	; 132
    1272:	97 e0       	ldi	r25, 0x07	; 7
    1274:	92 8f       	std	Z+26, r25	; 0x1a
    1276:	81 8f       	std	Z+25, r24	; 0x19
    insert_timeoutq_event( ep );
    1278:	cf 01       	movw	r24, r30
    127a:	87 df       	rcall	.-242    	; 0x118a <insert_timeoutq_event>
    return 0;
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 c0       	rjmp	.+4      	; 0x1286 <load_new_sensor+0x6a>

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
        return -1;
    1282:	8f ef       	ldi	r24, 0xFF	; 255
    1284:	9f ef       	ldi	r25, 0xFF	; 255
    ep->info = otherinfo;
    ep->cur_state = Ready;
    ep->run = sensor_handler;
    insert_timeoutq_event( ep );
    return 0;
}
    1286:	1f 91       	pop	r17
    1288:	0f 91       	pop	r16
    128a:	ff 90       	pop	r15
    128c:	ef 90       	pop	r14
    128e:	bf 90       	pop	r11
    1290:	af 90       	pop	r10
    1292:	9f 90       	pop	r9
    1294:	8f 90       	pop	r8
    1296:	7f 90       	pop	r7
    1298:	6f 90       	pop	r6
    129a:	5f 90       	pop	r5
    129c:	4f 90       	pop	r4
    129e:	08 95       	ret

000012a0 <load_new_device>:

/*************************************************************************//**
  @brief Load a brand new device activity into the scheduler's timeoutQ
*****************************************************************************/
int load_new_device( int32_t timeout, int32_t repeat, BaseDevice *device_ptr, int otherinfo )
{
    12a0:	4f 92       	push	r4
    12a2:	5f 92       	push	r5
    12a4:	6f 92       	push	r6
    12a6:	7f 92       	push	r7
    12a8:	8f 92       	push	r8
    12aa:	9f 92       	push	r9
    12ac:	af 92       	push	r10
    12ae:	bf 92       	push	r11
    12b0:	ef 92       	push	r14
    12b2:	ff 92       	push	r15
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	2b 01       	movw	r4, r22
    12ba:	3c 01       	movw	r6, r24
    12bc:	49 01       	movw	r8, r18
    12be:	5a 01       	movw	r10, r20

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    12c0:	80 91 4b 0b 	lds	r24, 0x0B4B
    12c4:	90 91 4c 0b 	lds	r25, 0x0B4C
    12c8:	ac d1       	rcall	.+856    	; 0x1622 <ll_pop>
    12ca:	fc 01       	movw	r30, r24
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
    12cc:	89 2b       	or	r24, r25
    12ce:	e9 f0       	breq	.+58     	; 0x130a <load_new_device+0x6a>
        return -1;
    ep->timeout = timeout;
    12d0:	44 82       	std	Z+4, r4	; 0x04
    12d2:	55 82       	std	Z+5, r5	; 0x05
    12d4:	66 82       	std	Z+6, r6	; 0x06
    12d6:	77 82       	std	Z+7, r7	; 0x07
    ep->repeat_interval = repeat;
    12d8:	80 86       	std	Z+8, r8	; 0x08
    12da:	91 86       	std	Z+9, r9	; 0x09
    12dc:	a2 86       	std	Z+10, r10	; 0x0a
    12de:	b3 86       	std	Z+11, r11	; 0x0b
	ep->borrow_timeout = 0;
    12e0:	14 86       	std	Z+12, r1	; 0x0c
    12e2:	15 86       	std	Z+13, r1	; 0x0d
    12e4:	16 86       	std	Z+14, r1	; 0x0e
    12e6:	17 86       	std	Z+15, r1	; 0x0f
    ep->load_p = device_ptr;
    12e8:	13 8b       	std	Z+19, r17	; 0x13
    12ea:	02 8b       	std	Z+18, r16	; 0x12
	ep->store_p = device_ptr;
    12ec:	15 8b       	std	Z+21, r17	; 0x15
    12ee:	04 8b       	std	Z+20, r16	; 0x14
    ep->info = otherinfo;
    12f0:	f7 8a       	std	Z+23, r15	; 0x17
    12f2:	e6 8a       	std	Z+22, r14	; 0x16
    ep->cur_state = Ready;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	80 8f       	std	Z+24, r24	; 0x18
    ep->run = device_handler;
    12f8:	8b e0       	ldi	r24, 0x0B	; 11
    12fa:	98 e0       	ldi	r25, 0x08	; 8
    12fc:	92 8f       	std	Z+26, r25	; 0x1a
    12fe:	81 8f       	std	Z+25, r24	; 0x19
    insert_timeoutq_event( ep );
    1300:	cf 01       	movw	r24, r30
    1302:	43 df       	rcall	.-378    	; 0x118a <insert_timeoutq_event>
    return 0;
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	02 c0       	rjmp	.+4      	; 0x130e <load_new_device+0x6e>

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
        return -1;
    130a:	8f ef       	ldi	r24, 0xFF	; 255
    130c:	9f ef       	ldi	r25, 0xFF	; 255
    ep->info = otherinfo;
    ep->cur_state = Ready;
    ep->run = device_handler;
    insert_timeoutq_event( ep );
    return 0;
}
    130e:	1f 91       	pop	r17
    1310:	0f 91       	pop	r16
    1312:	ff 90       	pop	r15
    1314:	ef 90       	pop	r14
    1316:	bf 90       	pop	r11
    1318:	af 90       	pop	r10
    131a:	9f 90       	pop	r9
    131c:	8f 90       	pop	r8
    131e:	7f 90       	pop	r7
    1320:	6f 90       	pop	r6
    1322:	5f 90       	pop	r5
    1324:	4f 90       	pop	r4
    1326:	08 95       	ret

00001328 <handle_timeoutq_event>:

/*************************************************************************//**
  @brief Handle the next event in timeoutQ: execute the event's handler function according to the device type, re-insert it according to the period, and set a timer of next event.
*****************************************************************************/
int handle_timeoutq_event( )
{
    1328:	cf 92       	push	r12
    132a:	df 92       	push	r13
    132c:	ef 92       	push	r14
    132e:	ff 92       	push	r15
    1330:	0f 93       	push	r16
    1332:	1f 93       	push	r17
    1334:	cf 93       	push	r28
    1336:	df 93       	push	r29
	int retNum, sleep_time;
	/* assume we get a valid one */
	struct event * ev = (struct event * )LL_TOP( timeoutq );
    1338:	80 91 f3 0a 	lds	r24, 0x0AF3
    133c:	90 91 f4 0a 	lds	r25, 0x0AF4
    1340:	31 d1       	rcall	.+610    	; 0x15a4 <ll_first>
    1342:	ec 01       	movw	r28, r24
	if( EV_NULL == ev )
    1344:	89 2b       	or	r24, r25
    1346:	39 f4       	brne	.+14     	; 0x1356 <handle_timeoutq_event+0x2e>
	{
		printf("err\n");
    1348:	83 e0       	ldi	r24, 0x03	; 3
    134a:	94 e0       	ldi	r25, 0x04	; 4
    134c:	0e 94 c8 1c 	call	0x3990	; 0x3990 <puts>
        return -1;
    1350:	8f ef       	ldi	r24, 0xFF	; 255
    1352:	9f ef       	ldi	r25, 0xFF	; 255
    1354:	8b c0       	rjmp	.+278    	; 0x146c <handle_timeoutq_event+0x144>
	}
    
    /* sanity check */
    if( ev->sp == NULL && ev->load_p == NULL && ev->store_p == NULL)
    1356:	88 89       	ldd	r24, Y+16	; 0x10
    1358:	99 89       	ldd	r25, Y+17	; 0x11
    135a:	89 2b       	or	r24, r25
    135c:	49 f4       	brne	.+18     	; 0x1370 <handle_timeoutq_event+0x48>
    135e:	8a 89       	ldd	r24, Y+18	; 0x12
    1360:	9b 89       	ldd	r25, Y+19	; 0x13
    1362:	89 2b       	or	r24, r25
    1364:	29 f4       	brne	.+10     	; 0x1370 <handle_timeoutq_event+0x48>
    1366:	8c 89       	ldd	r24, Y+20	; 0x14
    1368:	9d 89       	ldd	r25, Y+21	; 0x15
    136a:	89 2b       	or	r24, r25
    136c:	09 f4       	brne	.+2      	; 0x1370 <handle_timeoutq_event+0x48>
    136e:	7c c0       	rjmp	.+248    	; 0x1468 <handle_timeoutq_event+0x140>
        return -1;

	/* if it is not the right time, re-set the timer */
	if( ev->timeout != 0 )
    1370:	8c 81       	ldd	r24, Y+4	; 0x04
    1372:	9d 81       	ldd	r25, Y+5	; 0x05
    1374:	ae 81       	ldd	r26, Y+6	; 0x06
    1376:	bf 81       	ldd	r27, Y+7	; 0x07
    1378:	89 2b       	or	r24, r25
    137a:	8a 2b       	or	r24, r26
    137c:	8b 2b       	or	r24, r27
    137e:	71 f0       	breq	.+28     	; 0x139c <handle_timeoutq_event+0x74>
	{
		sleep_time = get_next_interval();
    1380:	e0 de       	rcall	.-576    	; 0x1142 <get_next_interval>
		next_event_time_collapse(sleep_time);
    1382:	6b 01       	movw	r12, r22
    1384:	77 0f       	add	r23, r23
    1386:	ee 08       	sbc	r14, r14
    1388:	ff 08       	sbc	r15, r15
    138a:	c7 01       	movw	r24, r14
    138c:	b6 01       	movw	r22, r12
    138e:	ba de       	rcall	.-652    	; 0x1104 <next_event_time_collapse>
		set_timer(sleep_time);
    1390:	c7 01       	movw	r24, r14
    1392:	b6 01       	movw	r22, r12
    1394:	cb da       	rcall	.-2666   	; 0x92c <set_timer>
		return 0;
    1396:	80 e0       	ldi	r24, 0x00	; 0
    1398:	90 e0       	ldi	r25, 0x00	; 0
    139a:	68 c0       	rjmp	.+208    	; 0x146c <handle_timeoutq_event+0x144>
	}
	
	/* retNum may need to be designed in other ways */
    retNum = ev->run( ev );
    139c:	e9 8d       	ldd	r30, Y+25	; 0x19
    139e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    13a0:	ce 01       	movw	r24, r28
    13a2:	19 95       	eicall
	/* 
	 * return 1 if it has to with some borrow time( have a request-time!=0 case ) 
	 * which means the event has already entered the scheduler, 
	 * and won't need to do anything else
	 */
	if( retNum == 1 )
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	a9 f4       	brne	.+42     	; 0x13d2 <handle_timeoutq_event+0xaa>
	{
		sleep_time = get_next_interval();
    13a8:	cc de       	rcall	.-616    	; 0x1142 <get_next_interval>
		/* judge if the next top in queue has a timeout <= 0, which we may want to handle it right now */
		if( sleep_time == 0 )
    13aa:	61 15       	cp	r22, r1
    13ac:	71 05       	cpc	r23, r1
    13ae:	21 f4       	brne	.+8      	; 0x13b8 <handle_timeoutq_event+0x90>
		{
			handle_timeoutq_event();
    13b0:	bb df       	rcall	.-138    	; 0x1328 <handle_timeoutq_event>
			return 0;
    13b2:	80 e0       	ldi	r24, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	5a c0       	rjmp	.+180    	; 0x146c <handle_timeoutq_event+0x144>
		}
		next_event_time_collapse(sleep_time);	
    13b8:	6b 01       	movw	r12, r22
    13ba:	77 0f       	add	r23, r23
    13bc:	ee 08       	sbc	r14, r14
    13be:	ff 08       	sbc	r15, r15
    13c0:	c7 01       	movw	r24, r14
    13c2:	b6 01       	movw	r22, r12
    13c4:	9f de       	rcall	.-706    	; 0x1104 <next_event_time_collapse>
		set_timer(sleep_time);
    13c6:	c7 01       	movw	r24, r14
    13c8:	b6 01       	movw	r22, r12
    13ca:	b0 da       	rcall	.-2720   	; 0x92c <set_timer>
		return 0;
    13cc:	80 e0       	ldi	r24, 0x00	; 0
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	4d c0       	rjmp	.+154    	; 0x146c <handle_timeoutq_event+0x144>
    /*
	 * return 0 means we just fired a case, 
	 * and may need to judge it over the repeat time to re-insert into the scheduler,
	 * since we definitely want to collect data periodically
	 */
    LL_POP( timeoutq );
    13d2:	80 91 f3 0a 	lds	r24, 0x0AF3
    13d6:	90 91 f4 0a 	lds	r25, 0x0AF4
    13da:	23 d1       	rcall	.+582    	; 0x1622 <ll_pop>
    if( ev->repeat_interval != 0 )
    13dc:	88 85       	ldd	r24, Y+8	; 0x08
    13de:	99 85       	ldd	r25, Y+9	; 0x09
    13e0:	aa 85       	ldd	r26, Y+10	; 0x0a
    13e2:	bb 85       	ldd	r27, Y+11	; 0x0b
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	a1 05       	cpc	r26, r1
    13e8:	b1 05       	cpc	r27, r1
    13ea:	19 f1       	breq	.+70     	; 0x1432 <handle_timeoutq_event+0x10a>
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
    13ec:	4c 85       	ldd	r20, Y+12	; 0x0c
    13ee:	5d 85       	ldd	r21, Y+13	; 0x0d
    13f0:	6e 85       	ldd	r22, Y+14	; 0x0e
    13f2:	7f 85       	ldd	r23, Y+15	; 0x0f
    13f4:	8c 01       	movw	r16, r24
    13f6:	9d 01       	movw	r18, r26
    13f8:	04 1b       	sub	r16, r20
    13fa:	15 0b       	sbc	r17, r21
    13fc:	26 0b       	sbc	r18, r22
    13fe:	37 0b       	sbc	r19, r23
    1400:	b9 01       	movw	r22, r18
    1402:	a8 01       	movw	r20, r16
    1404:	0c 83       	std	Y+4, r16	; 0x04
    1406:	1d 83       	std	Y+5, r17	; 0x05
    1408:	2e 83       	std	Y+6, r18	; 0x06
    140a:	3f 83       	std	Y+7, r19	; 0x07
		while( ev->timeout < 0 )
    140c:	33 23       	and	r19, r19
    140e:	54 f4       	brge	.+20     	; 0x1424 <handle_timeoutq_event+0xfc>
		{
			ev->timeout += ev->repeat_interval;
    1410:	48 0f       	add	r20, r24
    1412:	59 1f       	adc	r21, r25
    1414:	6a 1f       	adc	r22, r26
    1416:	7b 1f       	adc	r23, r27
	 */
    LL_POP( timeoutq );
    if( ev->repeat_interval != 0 )
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
		while( ev->timeout < 0 )
    1418:	77 23       	and	r23, r23
    141a:	d4 f3       	brlt	.-12     	; 0x1410 <handle_timeoutq_event+0xe8>
    141c:	4c 83       	std	Y+4, r20	; 0x04
    141e:	5d 83       	std	Y+5, r21	; 0x05
    1420:	6e 83       	std	Y+6, r22	; 0x06
    1422:	7f 83       	std	Y+7, r23	; 0x07
		{
			ev->timeout += ev->repeat_interval;
		}
		ev->borrow_timeout = 0;
    1424:	1c 86       	std	Y+12, r1	; 0x0c
    1426:	1d 86       	std	Y+13, r1	; 0x0d
    1428:	1e 86       	std	Y+14, r1	; 0x0e
    142a:	1f 86       	std	Y+15, r1	; 0x0f
        insert_timeoutq_event( ev );
    142c:	ce 01       	movw	r24, r28
    142e:	ad de       	rcall	.-678    	; 0x118a <insert_timeoutq_event>
    1430:	06 c0       	rjmp	.+12     	; 0x143e <handle_timeoutq_event+0x116>
    }
    else
    {
        LL_PUSH( freelist, ev );
    1432:	be 01       	movw	r22, r28
    1434:	80 91 4b 0b 	lds	r24, 0x0B4B
    1438:	90 91 4c 0b 	lds	r25, 0x0B4C
    143c:	bc d0       	rcall	.+376    	; 0x15b6 <ll_r_insert>
    }

	sleep_time = get_next_interval();
    143e:	81 de       	rcall	.-766    	; 0x1142 <get_next_interval>
	/* judge if the next top in queue has a timeout <= 0, which we may want to handle it right now */
	if( sleep_time == 0 )
    1440:	61 15       	cp	r22, r1
    1442:	71 05       	cpc	r23, r1
    1444:	21 f4       	brne	.+8      	; 0x144e <handle_timeoutq_event+0x126>
	{
		handle_timeoutq_event();
    1446:	70 df       	rcall	.-288    	; 0x1328 <handle_timeoutq_event>
		return 0;
    1448:	80 e0       	ldi	r24, 0x00	; 0
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0f c0       	rjmp	.+30     	; 0x146c <handle_timeoutq_event+0x144>
	}
	next_event_time_collapse(sleep_time);	
    144e:	6b 01       	movw	r12, r22
    1450:	77 0f       	add	r23, r23
    1452:	ee 08       	sbc	r14, r14
    1454:	ff 08       	sbc	r15, r15
    1456:	c7 01       	movw	r24, r14
    1458:	b6 01       	movw	r22, r12
    145a:	54 de       	rcall	.-856    	; 0x1104 <next_event_time_collapse>
	set_timer(sleep_time);
    145c:	c7 01       	movw	r24, r14
    145e:	b6 01       	movw	r22, r12
    1460:	65 da       	rcall	.-2870   	; 0x92c <set_timer>
    return 0;
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	90 e0       	ldi	r25, 0x00	; 0
    1466:	02 c0       	rjmp	.+4      	; 0x146c <handle_timeoutq_event+0x144>
        return -1;
	}
    
    /* sanity check */
    if( ev->sp == NULL && ev->load_p == NULL && ev->store_p == NULL)
        return -1;
    1468:	8f ef       	ldi	r24, 0xFF	; 255
    146a:	9f ef       	ldi	r25, 0xFF	; 255
		return 0;
	}
	next_event_time_collapse(sleep_time);	
	set_timer(sleep_time);
    return 0;
}
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	1f 91       	pop	r17
    1472:	0f 91       	pop	r16
    1474:	ff 90       	pop	r15
    1476:	ef 90       	pop	r14
    1478:	df 90       	pop	r13
    147a:	cf 90       	pop	r12
    147c:	08 95       	ret

0000147e <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    147e:	a5 db       	rcall	.-2230   	; 0xbca <HAL_Init>
  SYS_TimerInit();
    1480:	67 d0       	rcall	.+206    	; 0x1550 <SYS_TimerInit>
  PHY_Init();
    1482:	2b dd       	rcall	.-1450   	; 0xeda <PHY_Init>
  NWK_Init();
    1484:	dc cb       	rjmp	.-2120   	; 0xc3e <NWK_Init>
    1486:	08 95       	ret

00001488 <placeTimer>:

      break;
    }
    prev = t;
  }
}
    1488:	0f 93       	push	r16
    148a:	1f 93       	push	r17
    148c:	cf 93       	push	r28
    148e:	df 93       	push	r29
    1490:	ec 01       	movw	r28, r24
    1492:	80 91 f3 08 	lds	r24, 0x08F3
    1496:	90 91 f4 08 	lds	r25, 0x08F4
    149a:	00 97       	sbiw	r24, 0x00	; 0
    149c:	09 f4       	brne	.+2      	; 0x14a0 <placeTimer+0x18>
    149e:	45 c0       	rjmp	.+138    	; 0x152a <placeTimer+0xa2>
    14a0:	4e 81       	ldd	r20, Y+6	; 0x06
    14a2:	5f 81       	ldd	r21, Y+7	; 0x07
    14a4:	68 85       	ldd	r22, Y+8	; 0x08
    14a6:	79 85       	ldd	r23, Y+9	; 0x09
    14a8:	fc 01       	movw	r30, r24
    14aa:	02 81       	ldd	r16, Z+2	; 0x02
    14ac:	13 81       	ldd	r17, Z+3	; 0x03
    14ae:	24 81       	ldd	r18, Z+4	; 0x04
    14b0:	35 81       	ldd	r19, Z+5	; 0x05
    14b2:	40 17       	cp	r20, r16
    14b4:	51 07       	cpc	r21, r17
    14b6:	62 07       	cpc	r22, r18
    14b8:	73 07       	cpc	r23, r19
    14ba:	60 f0       	brcs	.+24     	; 0x14d4 <placeTimer+0x4c>
    14bc:	dc 01       	movw	r26, r24
    14be:	17 c0       	rjmp	.+46     	; 0x14ee <placeTimer+0x66>
    14c0:	02 81       	ldd	r16, Z+2	; 0x02
    14c2:	13 81       	ldd	r17, Z+3	; 0x03
    14c4:	24 81       	ldd	r18, Z+4	; 0x04
    14c6:	35 81       	ldd	r19, Z+5	; 0x05
    14c8:	40 17       	cp	r20, r16
    14ca:	51 07       	cpc	r21, r17
    14cc:	62 07       	cpc	r22, r18
    14ce:	73 07       	cpc	r23, r19
    14d0:	68 f4       	brcc	.+26     	; 0x14ec <placeTimer+0x64>
    14d2:	03 c0       	rjmp	.+6      	; 0x14da <placeTimer+0x52>
    14d4:	fc 01       	movw	r30, r24
    14d6:	a0 e0       	ldi	r26, 0x00	; 0
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	04 1b       	sub	r16, r20
    14dc:	15 0b       	sbc	r17, r21
    14de:	26 0b       	sbc	r18, r22
    14e0:	37 0b       	sbc	r19, r23
    14e2:	02 83       	std	Z+2, r16	; 0x02
    14e4:	13 83       	std	Z+3, r17	; 0x03
    14e6:	24 83       	std	Z+4, r18	; 0x04
    14e8:	35 83       	std	Z+5, r19	; 0x05
    14ea:	0a c0       	rjmp	.+20     	; 0x1500 <placeTimer+0x78>
    14ec:	df 01       	movw	r26, r30
    14ee:	40 1b       	sub	r20, r16
    14f0:	51 0b       	sbc	r21, r17
    14f2:	62 0b       	sbc	r22, r18
    14f4:	73 0b       	sbc	r23, r19
    14f6:	ed 91       	ld	r30, X+
    14f8:	fc 91       	ld	r31, X
    14fa:	11 97       	sbiw	r26, 0x01	; 1
    14fc:	30 97       	sbiw	r30, 0x00	; 0
    14fe:	01 f7       	brne	.-64     	; 0x14c0 <placeTimer+0x38>
    1500:	4a 83       	std	Y+2, r20	; 0x02
    1502:	5b 83       	std	Y+3, r21	; 0x03
    1504:	6c 83       	std	Y+4, r22	; 0x04
    1506:	7d 83       	std	Y+5, r23	; 0x05
    1508:	10 97       	sbiw	r26, 0x00	; 0
    150a:	41 f0       	breq	.+16     	; 0x151c <placeTimer+0x94>
    150c:	8d 91       	ld	r24, X+
    150e:	9c 91       	ld	r25, X
    1510:	11 97       	sbiw	r26, 0x01	; 1
    1512:	99 83       	std	Y+1, r25	; 0x01
    1514:	88 83       	st	Y, r24
    1516:	cd 93       	st	X+, r28
    1518:	dc 93       	st	X, r29
    151a:	15 c0       	rjmp	.+42     	; 0x1546 <placeTimer+0xbe>
    151c:	99 83       	std	Y+1, r25	; 0x01
    151e:	88 83       	st	Y, r24
    1520:	d0 93 f4 08 	sts	0x08F4, r29
    1524:	c0 93 f3 08 	sts	0x08F3, r28
    1528:	0e c0       	rjmp	.+28     	; 0x1546 <placeTimer+0xbe>
    152a:	19 82       	std	Y+1, r1	; 0x01
    152c:	18 82       	st	Y, r1
    152e:	8e 81       	ldd	r24, Y+6	; 0x06
    1530:	9f 81       	ldd	r25, Y+7	; 0x07
    1532:	a8 85       	ldd	r26, Y+8	; 0x08
    1534:	b9 85       	ldd	r27, Y+9	; 0x09
    1536:	8a 83       	std	Y+2, r24	; 0x02
    1538:	9b 83       	std	Y+3, r25	; 0x03
    153a:	ac 83       	std	Y+4, r26	; 0x04
    153c:	bd 83       	std	Y+5, r27	; 0x05
    153e:	d0 93 f4 08 	sts	0x08F4, r29
    1542:	c0 93 f3 08 	sts	0x08F3, r28
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	1f 91       	pop	r17
    154c:	0f 91       	pop	r16
    154e:	08 95       	ret

00001550 <SYS_TimerInit>:
    1550:	10 92 f4 08 	sts	0x08F4, r1
    1554:	10 92 f3 08 	sts	0x08F3, r1
    1558:	08 95       	ret

0000155a <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    155a:	e0 91 f3 08 	lds	r30, 0x08F3
    155e:	f0 91 f4 08 	lds	r31, 0x08F4
    1562:	30 97       	sbiw	r30, 0x00	; 0
    1564:	71 f0       	breq	.+28     	; 0x1582 <SYS_TimerStarted+0x28>
    if (t == timer)
    1566:	e8 17       	cp	r30, r24
    1568:	f9 07       	cpc	r31, r25
    156a:	21 f4       	brne	.+8      	; 0x1574 <SYS_TimerStarted+0x1a>
    156c:	0c c0       	rjmp	.+24     	; 0x1586 <SYS_TimerStarted+0x2c>
    156e:	8e 17       	cp	r24, r30
    1570:	9f 07       	cpc	r25, r31
    1572:	59 f0       	breq	.+22     	; 0x158a <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1574:	01 90       	ld	r0, Z+
    1576:	f0 81       	ld	r31, Z
    1578:	e0 2d       	mov	r30, r0
    157a:	30 97       	sbiw	r30, 0x00	; 0
    157c:	c1 f7       	brne	.-16     	; 0x156e <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    157e:	80 e0       	ldi	r24, 0x00	; 0
    1580:	08 95       	ret
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    1586:	81 e0       	ldi	r24, 0x01	; 1
    1588:	08 95       	ret
    158a:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    158c:	08 95       	ret

0000158e <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    158e:	cf 93       	push	r28
    1590:	df 93       	push	r29
    1592:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    1594:	e2 df       	rcall	.-60     	; 0x155a <SYS_TimerStarted>
    1596:	81 11       	cpse	r24, r1
    1598:	02 c0       	rjmp	.+4      	; 0x159e <SYS_TimerStart+0x10>
    placeTimer(timer);
    159a:	ce 01       	movw	r24, r28
    159c:	75 df       	rcall	.-278    	; 0x1488 <placeTimer>
}
    159e:	df 91       	pop	r29
    15a0:	cf 91       	pop	r28
    15a2:	08 95       	ret

000015a4 <ll_first>:
 * lp is list pointer
 */
llobject_t *
ll_first(lp)
llobject_t *lp;
{
    15a4:	fc 01       	movw	r30, r24
    if (LL_IS_EMPTY(lp)) {
    15a6:	82 81       	ldd	r24, Z+2	; 0x02
    15a8:	93 81       	ldd	r25, Z+3	; 0x03
    15aa:	8e 17       	cp	r24, r30
    15ac:	9f 07       	cpc	r25, r31
    15ae:	11 f4       	brne	.+4      	; 0x15b4 <ll_first+0x10>
		return LL_NULL;
    15b0:	80 e0       	ldi	r24, 0x00	; 0
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    }
    return lp->next;
}
    15b4:	08 95       	ret

000015b6 <ll_r_insert>:
llobject_t *
ll_r_insert(ip, ep)
llobject_t *ip;
llobject_t *ep;
{
    llobject_t *tp = ip->next;
    15b6:	dc 01       	movw	r26, r24
    15b8:	12 96       	adiw	r26, 0x02	; 2
    15ba:	ed 91       	ld	r30, X+
    15bc:	fc 91       	ld	r31, X
    15be:	13 97       	sbiw	r26, 0x03	; 3

    tp->prev = ep;
    15c0:	71 83       	std	Z+1, r23	; 0x01
    15c2:	60 83       	st	Z, r22
    ep->next = tp;
    15c4:	db 01       	movw	r26, r22
    15c6:	13 96       	adiw	r26, 0x03	; 3
    15c8:	fc 93       	st	X, r31
    15ca:	ee 93       	st	-X, r30
    15cc:	12 97       	sbiw	r26, 0x02	; 2
    ip->next = ep;
    15ce:	fc 01       	movw	r30, r24
    15d0:	73 83       	std	Z+3, r23	; 0x03
    15d2:	62 83       	std	Z+2, r22	; 0x02
    ep->prev = ip;
    15d4:	8d 93       	st	X+, r24
    15d6:	9c 93       	st	X, r25

    return ep;
}
    15d8:	cb 01       	movw	r24, r22
    15da:	08 95       	ret

000015dc <ll_detach>:
 */
llobject_t *
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    15dc:	fb 01       	movw	r30, r22
    if (LL_IS_EMPTY(lp) || lp == ep) {
    15de:	dc 01       	movw	r26, r24
    15e0:	12 96       	adiw	r26, 0x02	; 2
    15e2:	2d 91       	ld	r18, X+
    15e4:	3c 91       	ld	r19, X
    15e6:	13 97       	sbiw	r26, 0x03	; 3
    15e8:	28 17       	cp	r18, r24
    15ea:	39 07       	cpc	r19, r25
    15ec:	a1 f0       	breq	.+40     	; 0x1616 <ll_detach+0x3a>
    15ee:	86 17       	cp	r24, r22
    15f0:	97 07       	cpc	r25, r23
    15f2:	a1 f0       	breq	.+40     	; 0x161c <ll_detach+0x40>
		return LL_NULL;
    }

    (ep->prev)->next = ep->next;
    15f4:	a0 81       	ld	r26, Z
    15f6:	b1 81       	ldd	r27, Z+1	; 0x01
    15f8:	82 81       	ldd	r24, Z+2	; 0x02
    15fa:	93 81       	ldd	r25, Z+3	; 0x03
    15fc:	13 96       	adiw	r26, 0x03	; 3
    15fe:	9c 93       	st	X, r25
    1600:	8e 93       	st	-X, r24
    1602:	12 97       	sbiw	r26, 0x02	; 2
    (ep->next)->prev = ep->prev;
    1604:	a2 81       	ldd	r26, Z+2	; 0x02
    1606:	b3 81       	ldd	r27, Z+3	; 0x03
    1608:	80 81       	ld	r24, Z
    160a:	91 81       	ldd	r25, Z+1	; 0x01
    160c:	8d 93       	st	X+, r24
    160e:	9c 93       	st	X, r25

    return ep;
    1610:	86 2f       	mov	r24, r22
    1612:	9f 2f       	mov	r25, r31
    1614:	08 95       	ret
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    if (LL_IS_EMPTY(lp) || lp == ep) {
		return LL_NULL;
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	90 e0       	ldi	r25, 0x00	; 0
    161a:	08 95       	ret
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	90 e0       	ldi	r25, 0x00	; 0

    (ep->prev)->next = ep->next;
    (ep->next)->prev = ep->prev;

    return ep;
}
    1620:	08 95       	ret

00001622 <ll_pop>:
 */
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
    1622:	fc 01       	movw	r30, r24
    1624:	62 81       	ldd	r22, Z+2	; 0x02
    1626:	73 81       	ldd	r23, Z+3	; 0x03
    1628:	68 17       	cp	r22, r24
    162a:	79 07       	cpc	r23, r25
    162c:	11 f0       	breq	.+4      	; 0x1632 <ll_pop+0x10>
		return LL_NULL;
    }
    return LL_DETACH(lp, lp->next);
    162e:	d6 cf       	rjmp	.-84     	; 0x15dc <ll_detach>
    1630:	08 95       	ret
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
		return LL_NULL;
    1632:	80 e0       	ldi	r24, 0x00	; 0
    1634:	90 e0       	ldi	r25, 0x00	; 0
    }
    return LL_DETACH(lp, lp->next);
}
    1636:	08 95       	ret

00001638 <calcDate>:
	tm_ptr->unix_time = calibrate_sec;
	tm_ptr->unix_msec = 500; // to minimize error
}

void calcDate(tm *tm_ptr)
{
    1638:	2f 92       	push	r2
    163a:	3f 92       	push	r3
    163c:	4f 92       	push	r4
    163e:	5f 92       	push	r5
    1640:	6f 92       	push	r6
    1642:	7f 92       	push	r7
    1644:	8f 92       	push	r8
    1646:	9f 92       	push	r9
    1648:	af 92       	push	r10
    164a:	bf 92       	push	r11
    164c:	cf 92       	push	r12
    164e:	df 92       	push	r13
    1650:	ef 92       	push	r14
    1652:	ff 92       	push	r15
    1654:	0f 93       	push	r16
    1656:	1f 93       	push	r17
    1658:	cf 93       	push	r28
    165a:	df 93       	push	r29
    165c:	cd b7       	in	r28, 0x3d	; 61
    165e:	de b7       	in	r29, 0x3e	; 62
    1660:	62 97       	sbiw	r28, 0x12	; 18
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	9a 8b       	std	Y+18, r25	; 0x12
    166e:	89 8b       	std	Y+17, r24	; 0x11
	long seconds, minutes, hours, days, year, month;
	long dayOfWeek;
	seconds = tm_ptr->unix_time;
    1670:	dc 01       	movw	r26, r24
    1672:	4d 90       	ld	r4, X+
    1674:	5d 90       	ld	r5, X+
    1676:	6d 90       	ld	r6, X+
    1678:	7c 90       	ld	r7, X

	/* calculate minutes */
	minutes  = seconds / 60;
    167a:	0f 2e       	mov	r0, r31
    167c:	fc e3       	ldi	r31, 0x3C	; 60
    167e:	8f 2e       	mov	r8, r31
    1680:	91 2c       	mov	r9, r1
    1682:	a1 2c       	mov	r10, r1
    1684:	b1 2c       	mov	r11, r1
    1686:	f0 2d       	mov	r31, r0
    1688:	c3 01       	movw	r24, r6
    168a:	b2 01       	movw	r22, r4
    168c:	a5 01       	movw	r20, r10
    168e:	94 01       	movw	r18, r8
    1690:	0e 94 22 1a 	call	0x3444	; 0x3444 <__divmodsi4>
    1694:	69 01       	movw	r12, r18
    1696:	7a 01       	movw	r14, r20
	seconds -= minutes * 60;
    1698:	a4 ec       	ldi	r26, 0xC4	; 196
    169a:	bf ef       	ldi	r27, 0xFF	; 255
    169c:	0e 94 40 1a 	call	0x3480	; 0x3480 <__mulohisi3>
    16a0:	9b 01       	movw	r18, r22
    16a2:	ac 01       	movw	r20, r24
    16a4:	24 0d       	add	r18, r4
    16a6:	35 1d       	adc	r19, r5
    16a8:	46 1d       	adc	r20, r6
    16aa:	57 1d       	adc	r21, r7
    16ac:	29 83       	std	Y+1, r18	; 0x01
    16ae:	3a 83       	std	Y+2, r19	; 0x02
    16b0:	4b 83       	std	Y+3, r20	; 0x03
    16b2:	5c 83       	std	Y+4, r21	; 0x04
	/* calculate hours */
	hours    = minutes / 60;
    16b4:	c7 01       	movw	r24, r14
    16b6:	b6 01       	movw	r22, r12
    16b8:	a5 01       	movw	r20, r10
    16ba:	94 01       	movw	r18, r8
    16bc:	0e 94 22 1a 	call	0x3444	; 0x3444 <__divmodsi4>
    16c0:	49 01       	movw	r8, r18
    16c2:	5a 01       	movw	r10, r20
	minutes -= hours   * 60;
    16c4:	a4 ec       	ldi	r26, 0xC4	; 196
    16c6:	bf ef       	ldi	r27, 0xFF	; 255
    16c8:	0e 94 40 1a 	call	0x3480	; 0x3480 <__mulohisi3>
    16cc:	9b 01       	movw	r18, r22
    16ce:	ac 01       	movw	r20, r24
    16d0:	2c 0d       	add	r18, r12
    16d2:	3d 1d       	adc	r19, r13
    16d4:	4e 1d       	adc	r20, r14
    16d6:	5f 1d       	adc	r21, r15
    16d8:	2d 83       	std	Y+5, r18	; 0x05
    16da:	3e 83       	std	Y+6, r19	; 0x06
    16dc:	4f 83       	std	Y+7, r20	; 0x07
    16de:	58 87       	std	Y+8, r21	; 0x08
	/* calculate days */
	days     = hours   / 24;
    16e0:	c5 01       	movw	r24, r10
    16e2:	b4 01       	movw	r22, r8
    16e4:	28 e1       	ldi	r18, 0x18	; 24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e0       	ldi	r20, 0x00	; 0
    16ea:	50 e0       	ldi	r21, 0x00	; 0
    16ec:	0e 94 22 1a 	call	0x3444	; 0x3444 <__divmodsi4>
    16f0:	c2 2e       	mov	r12, r18
    16f2:	d3 2e       	mov	r13, r19
    16f4:	e4 2e       	mov	r14, r20
    16f6:	f5 2e       	mov	r15, r21
	hours   -= days    * 24;
    16f8:	a8 ee       	ldi	r26, 0xE8	; 232
    16fa:	bf ef       	ldi	r27, 0xFF	; 255
    16fc:	0e 94 40 1a 	call	0x3480	; 0x3480 <__mulohisi3>
    1700:	9b 01       	movw	r18, r22
    1702:	ac 01       	movw	r20, r24
    1704:	28 0d       	add	r18, r8
    1706:	39 1d       	adc	r19, r9
    1708:	4a 1d       	adc	r20, r10
    170a:	5b 1d       	adc	r21, r11
    170c:	29 87       	std	Y+9, r18	; 0x09
    170e:	3a 87       	std	Y+10, r19	; 0x0a
    1710:	4b 87       	std	Y+11, r20	; 0x0b
    1712:	5c 87       	std	Y+12, r21	; 0x0c

	/* Unix time starts in 1970 on a Thursday */
	year      = 1970;
	dayOfWeek = 4;
    1714:	81 2c       	mov	r8, r1
    1716:	91 2c       	mov	r9, r1
    1718:	54 01       	movw	r10, r8
    171a:	68 94       	set
    171c:	82 f8       	bld	r8, 2
	/* calculate days */
	days     = hours   / 24;
	hours   -= days    * 24;

	/* Unix time starts in 1970 on a Thursday */
	year      = 1970;
    171e:	0f 2e       	mov	r0, r31
    1720:	f2 eb       	ldi	r31, 0xB2	; 178
    1722:	4f 2e       	mov	r4, r31
    1724:	f7 e0       	ldi	r31, 0x07	; 7
    1726:	5f 2e       	mov	r5, r31
    1728:	61 2c       	mov	r6, r1
    172a:	71 2c       	mov	r7, r1
    172c:	f0 2d       	mov	r31, r0

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    172e:	0d e6       	ldi	r16, 0x6D	; 109
    1730:	11 e0       	ldi	r17, 0x01	; 1
    1732:	21 2c       	mov	r2, r1
		{
			dayOfWeek += leapYear ? 2 : 1;
    1734:	31 2c       	mov	r3, r1
	year      = 1970;
	dayOfWeek = 4;

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
    1736:	d3 01       	movw	r26, r6
    1738:	c2 01       	movw	r24, r4
    173a:	83 70       	andi	r24, 0x03	; 3
    173c:	99 27       	eor	r25, r25
    173e:	aa 27       	eor	r26, r26
    1740:	bb 27       	eor	r27, r27
    1742:	89 2b       	or	r24, r25
    1744:	8a 2b       	or	r24, r26
    1746:	8b 2b       	or	r24, r27
    1748:	09 f0       	breq	.+2      	; 0x174c <calcDate+0x114>
    174a:	ea c0       	rjmp	.+468    	; 0x1920 <calcDate+0x2e8>
    174c:	c3 01       	movw	r24, r6
    174e:	b2 01       	movw	r22, r4
    1750:	24 e6       	ldi	r18, 0x64	; 100
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	40 e0       	ldi	r20, 0x00	; 0
    1756:	50 e0       	ldi	r21, 0x00	; 0
    1758:	0e 94 22 1a 	call	0x3444	; 0x3444 <__divmodsi4>
    175c:	67 2b       	or	r22, r23
    175e:	68 2b       	or	r22, r24
    1760:	69 2b       	or	r22, r25
    1762:	09 f0       	breq	.+2      	; 0x1766 <calcDate+0x12e>
    1764:	d0 c0       	rjmp	.+416    	; 0x1906 <calcDate+0x2ce>
    1766:	c3 01       	movw	r24, r6
    1768:	b2 01       	movw	r22, r4
    176a:	20 e9       	ldi	r18, 0x90	; 144
    176c:	31 e0       	ldi	r19, 0x01	; 1
    176e:	40 e0       	ldi	r20, 0x00	; 0
    1770:	50 e0       	ldi	r21, 0x00	; 0
    1772:	0e 94 22 1a 	call	0x3444	; 0x3444 <__divmodsi4>
    1776:	67 2b       	or	r22, r23
    1778:	68 2b       	or	r22, r24
    177a:	69 2b       	or	r22, r25
    177c:	09 f4       	brne	.+2      	; 0x1780 <calcDate+0x148>
    177e:	c3 c0       	rjmp	.+390    	; 0x1906 <calcDate+0x2ce>
    1780:	cf c0       	rjmp	.+414    	; 0x1920 <calcDate+0x2e8>
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    1782:	8e e6       	ldi	r24, 0x6E	; 110
    1784:	91 e0       	ldi	r25, 0x01	; 1
    1786:	a0 e0       	ldi	r26, 0x00	; 0
    1788:	b0 e0       	ldi	r27, 0x00	; 0
		{
			dayOfWeek += leapYear ? 2 : 1;
    178a:	42 e0       	ldi	r20, 0x02	; 2
    178c:	50 e0       	ldi	r21, 0x00	; 0
    178e:	60 e0       	ldi	r22, 0x00	; 0
    1790:	70 e0       	ldi	r23, 0x00	; 0
    1792:	08 c0       	rjmp	.+16     	; 0x17a4 <calcDate+0x16c>

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    1794:	80 2f       	mov	r24, r16
    1796:	91 2f       	mov	r25, r17
    1798:	a2 2d       	mov	r26, r2
    179a:	b0 e0       	ldi	r27, 0x00	; 0
		{
			dayOfWeek += leapYear ? 2 : 1;
    179c:	41 e0       	ldi	r20, 0x01	; 1
    179e:	50 e0       	ldi	r21, 0x00	; 0
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	73 2d       	mov	r23, r3
    17a4:	84 0e       	add	r8, r20
    17a6:	95 1e       	adc	r9, r21
    17a8:	a6 1e       	adc	r10, r22
    17aa:	b7 1e       	adc	r11, r23
			days      -= daysInYear;
    17ac:	c8 1a       	sub	r12, r24
    17ae:	d9 0a       	sbc	r13, r25
    17b0:	ea 0a       	sbc	r14, r26
    17b2:	fb 0a       	sbc	r15, r27
			if (dayOfWeek >= 7)
    17b4:	57 e0       	ldi	r21, 0x07	; 7
    17b6:	85 16       	cp	r8, r21
    17b8:	91 04       	cpc	r9, r1
    17ba:	a1 04       	cpc	r10, r1
    17bc:	b1 04       	cpc	r11, r1
    17be:	2c f0       	brlt	.+10     	; 0x17ca <calcDate+0x192>
			dayOfWeek -= 7;
    17c0:	87 e0       	ldi	r24, 0x07	; 7
    17c2:	88 1a       	sub	r8, r24
    17c4:	91 08       	sbc	r9, r1
    17c6:	a1 08       	sbc	r10, r1
    17c8:	b1 08       	sbc	r11, r1
			++year;
    17ca:	9f ef       	ldi	r25, 0xFF	; 255
    17cc:	49 1a       	sub	r4, r25
    17ce:	59 0a       	sbc	r5, r25
    17d0:	69 0a       	sbc	r6, r25
    17d2:	79 0a       	sbc	r7, r25
				else
				break;
			}
			break;
		}
	}
    17d4:	b0 cf       	rjmp	.-160    	; 0x1736 <calcDate+0xfe>
			dayOfWeek -= 7;
			++year;
		}
		else
		{
			tm_ptr->tm_yday = days;
    17d6:	e9 89       	ldd	r30, Y+17	; 0x11
    17d8:	fa 89       	ldd	r31, Y+18	; 0x12
    17da:	84 a3       	std	Z+36, r24	; 0x24
    17dc:	95 a3       	std	Z+37, r25	; 0x25
    17de:	a6 a3       	std	Z+38, r26	; 0x26
    17e0:	b7 a3       	std	Z+39, r27	; 0x27
			dayOfWeek  += days;
    17e2:	bc 01       	movw	r22, r24
    17e4:	cd 01       	movw	r24, r26
    17e6:	68 0d       	add	r22, r8
    17e8:	79 1d       	adc	r23, r9
    17ea:	8a 1d       	adc	r24, r10
    17ec:	9b 1d       	adc	r25, r11
			dayOfWeek  %= 7;
    17ee:	27 e0       	ldi	r18, 0x07	; 7
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	40 e0       	ldi	r20, 0x00	; 0
    17f4:	50 e0       	ldi	r21, 0x00	; 0
    17f6:	0e 94 22 1a 	call	0x3444	; 0x3444 <__divmodsi4>
    17fa:	6d 87       	std	Y+13, r22	; 0x0d
    17fc:	7e 87       	std	Y+14, r23	; 0x0e
    17fe:	8f 87       	std	Y+15, r24	; 0x0f
    1800:	98 8b       	std	Y+16, r25	; 0x10
    1802:	e1 e8       	ldi	r30, 0x81	; 129
    1804:	f4 e0       	ldi	r31, 0x04	; 4
    1806:	81 2c       	mov	r8, r1
    1808:	91 2c       	mov	r9, r1
    180a:	54 01       	movw	r10, r8
    180c:	83 94       	inc	r8
    180e:	40 e0       	ldi	r20, 0x00	; 0
    1810:	50 e0       	ldi	r21, 0x00	; 0
    1812:	ba 01       	movw	r22, r20
    1814:	09 c0       	rjmp	.+18     	; 0x1828 <calcDate+0x1f0>
    1816:	4f 5f       	subi	r20, 0xFF	; 255
    1818:	5f 4f       	sbci	r21, 0xFF	; 255
    181a:	6f 4f       	sbci	r22, 0xFF	; 255
    181c:	7f 4f       	sbci	r23, 0xFF	; 255
    181e:	3f ef       	ldi	r19, 0xFF	; 255
    1820:	83 1a       	sub	r8, r19
    1822:	93 0a       	sbc	r9, r19
    1824:	a3 0a       	sbc	r10, r19
    1826:	b3 0a       	sbc	r11, r19
    1828:	8a 01       	movw	r16, r20
    182a:	9b 01       	movw	r18, r22

			/* calculate the month and day */
			static const uint8_t daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
			for(month = 0; month < 12; ++month)
			{
				uint8_t dim = daysInMonth[month];
    182c:	81 91       	ld	r24, Z+

				/* add a day to feburary if this is a leap year */
				if (month == 1 && leapYear)
    182e:	41 30       	cpi	r20, 0x01	; 1
    1830:	51 05       	cpc	r21, r1
    1832:	61 05       	cpc	r22, r1
    1834:	71 05       	cpc	r23, r1
    1836:	29 f4       	brne	.+10     	; 0x1842 <calcDate+0x20a>
    1838:	33 20       	and	r3, r3
    183a:	09 f4       	brne	.+2      	; 0x183e <calcDate+0x206>
    183c:	5b c0       	rjmp	.+182    	; 0x18f4 <calcDate+0x2bc>
				++dim;
    183e:	8f 5f       	subi	r24, 0xFF	; 255
    1840:	59 c0       	rjmp	.+178    	; 0x18f4 <calcDate+0x2bc>

				if (days >= dim)
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	a0 e0       	ldi	r26, 0x00	; 0
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	c8 16       	cp	r12, r24
    184a:	d9 06       	cpc	r13, r25
    184c:	ea 06       	cpc	r14, r26
    184e:	fb 06       	cpc	r15, r27
    1850:	6c f0       	brlt	.+26     	; 0x186c <calcDate+0x234>
				days -= dim;
    1852:	c8 1a       	sub	r12, r24
    1854:	d9 0a       	sbc	r13, r25
    1856:	ea 0a       	sbc	r14, r26
    1858:	fb 0a       	sbc	r15, r27
			dayOfWeek  += days;
			dayOfWeek  %= 7;

			/* calculate the month and day */
			static const uint8_t daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
			for(month = 0; month < 12; ++month)
    185a:	95 01       	movw	r18, r10
    185c:	84 01       	movw	r16, r8
    185e:	8c e0       	ldi	r24, 0x0C	; 12
    1860:	88 16       	cp	r8, r24
    1862:	91 04       	cpc	r9, r1
    1864:	a1 04       	cpc	r10, r1
    1866:	b1 04       	cpc	r11, r1
    1868:	b4 f2       	brlt	.-84     	; 0x1816 <calcDate+0x1de>
    186a:	00 c0       	rjmp	.+0      	; 0x186c <calcDate+0x234>
			}
			break;
		}
	}

	tm_ptr->tm_sec  = seconds;
    186c:	89 81       	ldd	r24, Y+1	; 0x01
    186e:	9a 81       	ldd	r25, Y+2	; 0x02
    1870:	ab 81       	ldd	r26, Y+3	; 0x03
    1872:	bc 81       	ldd	r27, Y+4	; 0x04
    1874:	e9 89       	ldd	r30, Y+17	; 0x11
    1876:	fa 89       	ldd	r31, Y+18	; 0x12
    1878:	80 87       	std	Z+8, r24	; 0x08
    187a:	91 87       	std	Z+9, r25	; 0x09
    187c:	a2 87       	std	Z+10, r26	; 0x0a
    187e:	b3 87       	std	Z+11, r27	; 0x0b
	tm_ptr->tm_min  = minutes;
    1880:	8d 81       	ldd	r24, Y+5	; 0x05
    1882:	9e 81       	ldd	r25, Y+6	; 0x06
    1884:	af 81       	ldd	r26, Y+7	; 0x07
    1886:	b8 85       	ldd	r27, Y+8	; 0x08
    1888:	84 87       	std	Z+12, r24	; 0x0c
    188a:	95 87       	std	Z+13, r25	; 0x0d
    188c:	a6 87       	std	Z+14, r26	; 0x0e
    188e:	b7 87       	std	Z+15, r27	; 0x0f
	tm_ptr->tm_hour = hours;
    1890:	89 85       	ldd	r24, Y+9	; 0x09
    1892:	9a 85       	ldd	r25, Y+10	; 0x0a
    1894:	ab 85       	ldd	r26, Y+11	; 0x0b
    1896:	bc 85       	ldd	r27, Y+12	; 0x0c
    1898:	80 8b       	std	Z+16, r24	; 0x10
    189a:	91 8b       	std	Z+17, r25	; 0x11
    189c:	a2 8b       	std	Z+18, r26	; 0x12
    189e:	b3 8b       	std	Z+19, r27	; 0x13
	tm_ptr->tm_mday = days + 1;
    18a0:	ff ef       	ldi	r31, 0xFF	; 255
    18a2:	cf 1a       	sub	r12, r31
    18a4:	df 0a       	sbc	r13, r31
    18a6:	ef 0a       	sbc	r14, r31
    18a8:	ff 0a       	sbc	r15, r31
    18aa:	a9 89       	ldd	r26, Y+17	; 0x11
    18ac:	ba 89       	ldd	r27, Y+18	; 0x12
    18ae:	54 96       	adiw	r26, 0x14	; 20
    18b0:	cd 92       	st	X+, r12
    18b2:	dd 92       	st	X+, r13
    18b4:	ed 92       	st	X+, r14
    18b6:	fc 92       	st	X, r15
    18b8:	57 97       	sbiw	r26, 0x17	; 23
	tm_ptr->tm_mon  = month + 1;
    18ba:	d9 01       	movw	r26, r18
    18bc:	c8 01       	movw	r24, r16
    18be:	01 96       	adiw	r24, 0x01	; 1
    18c0:	a1 1d       	adc	r26, r1
    18c2:	b1 1d       	adc	r27, r1
    18c4:	e9 89       	ldd	r30, Y+17	; 0x11
    18c6:	fa 89       	ldd	r31, Y+18	; 0x12
    18c8:	80 8f       	std	Z+24, r24	; 0x18
    18ca:	91 8f       	std	Z+25, r25	; 0x19
    18cc:	a2 8f       	std	Z+26, r26	; 0x1a
    18ce:	b3 8f       	std	Z+27, r27	; 0x1b
	tm_ptr->tm_year = year;
    18d0:	44 8e       	std	Z+28, r4	; 0x1c
    18d2:	55 8e       	std	Z+29, r5	; 0x1d
    18d4:	66 8e       	std	Z+30, r6	; 0x1e
    18d6:	77 8e       	std	Z+31, r7	; 0x1f
	tm_ptr->tm_wday = dayOfWeek;
    18d8:	2d 85       	ldd	r18, Y+13	; 0x0d
    18da:	3e 85       	ldd	r19, Y+14	; 0x0e
    18dc:	4f 85       	ldd	r20, Y+15	; 0x0f
    18de:	58 89       	ldd	r21, Y+16	; 0x10
    18e0:	20 a3       	std	Z+32, r18	; 0x20
    18e2:	31 a3       	std	Z+33, r19	; 0x21
    18e4:	42 a3       	std	Z+34, r20	; 0x22
    18e6:	53 a3       	std	Z+35, r21	; 0x23
    18e8:	27 c0       	rjmp	.+78     	; 0x1938 <calcDate+0x300>
				/* add a day to feburary if this is a leap year */
				if (month == 1 && leapYear)
				++dim;

				if (days >= dim)
				days -= dim;
    18ea:	c8 1a       	sub	r12, r24
    18ec:	d9 0a       	sbc	r13, r25
    18ee:	ea 0a       	sbc	r14, r26
    18f0:	fb 0a       	sbc	r15, r27
    18f2:	91 cf       	rjmp	.-222    	; 0x1816 <calcDate+0x1de>

				/* add a day to feburary if this is a leap year */
				if (month == 1 && leapYear)
				++dim;

				if (days >= dim)
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	a0 e0       	ldi	r26, 0x00	; 0
    18f8:	b0 e0       	ldi	r27, 0x00	; 0
    18fa:	c8 16       	cp	r12, r24
    18fc:	d9 06       	cpc	r13, r25
    18fe:	ea 06       	cpc	r14, r26
    1900:	fb 06       	cpc	r15, r27
    1902:	9c f7       	brge	.-26     	; 0x18ea <calcDate+0x2b2>
    1904:	b3 cf       	rjmp	.-154    	; 0x186c <calcDate+0x234>

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    1906:	fe e6       	ldi	r31, 0x6E	; 110
    1908:	cf 16       	cp	r12, r31
    190a:	f1 e0       	ldi	r31, 0x01	; 1
    190c:	df 06       	cpc	r13, r31
    190e:	e1 04       	cpc	r14, r1
    1910:	f1 04       	cpc	r15, r1
    1912:	0c f0       	brlt	.+2      	; 0x1916 <calcDate+0x2de>
    1914:	36 cf       	rjmp	.-404    	; 0x1782 <calcDate+0x14a>
    1916:	d7 01       	movw	r26, r14
    1918:	c6 01       	movw	r24, r12
    191a:	33 24       	eor	r3, r3
    191c:	33 94       	inc	r3
    191e:	5b cf       	rjmp	.-330    	; 0x17d6 <calcDate+0x19e>
    1920:	3d e6       	ldi	r19, 0x6D	; 109
    1922:	c3 16       	cp	r12, r19
    1924:	31 e0       	ldi	r19, 0x01	; 1
    1926:	d3 06       	cpc	r13, r19
    1928:	e1 04       	cpc	r14, r1
    192a:	f1 04       	cpc	r15, r1
    192c:	0c f0       	brlt	.+2      	; 0x1930 <calcDate+0x2f8>
    192e:	32 cf       	rjmp	.-412    	; 0x1794 <calcDate+0x15c>
    1930:	d7 01       	movw	r26, r14
    1932:	c6 01       	movw	r24, r12
    1934:	31 2c       	mov	r3, r1
    1936:	4f cf       	rjmp	.-354    	; 0x17d6 <calcDate+0x19e>
	tm_ptr->tm_hour = hours;
	tm_ptr->tm_mday = days + 1;
	tm_ptr->tm_mon  = month + 1;
	tm_ptr->tm_year = year;
	tm_ptr->tm_wday = dayOfWeek;
}
    1938:	62 96       	adiw	r28, 0x12	; 18
    193a:	0f b6       	in	r0, 0x3f	; 63
    193c:	f8 94       	cli
    193e:	de bf       	out	0x3e, r29	; 62
    1940:	0f be       	out	0x3f, r0	; 63
    1942:	cd bf       	out	0x3d, r28	; 61
    1944:	df 91       	pop	r29
    1946:	cf 91       	pop	r28
    1948:	1f 91       	pop	r17
    194a:	0f 91       	pop	r16
    194c:	ff 90       	pop	r15
    194e:	ef 90       	pop	r14
    1950:	df 90       	pop	r13
    1952:	cf 90       	pop	r12
    1954:	bf 90       	pop	r11
    1956:	af 90       	pop	r10
    1958:	9f 90       	pop	r9
    195a:	8f 90       	pop	r8
    195c:	7f 90       	pop	r7
    195e:	6f 90       	pop	r6
    1960:	5f 90       	pop	r5
    1962:	4f 90       	pop	r4
    1964:	3f 90       	pop	r3
    1966:	2f 90       	pop	r2
    1968:	08 95       	ret

0000196a <updateTime>:
#include "utilities/inc/time.h"
#include <stdio.h>


void updateTime(long increment_msec, tm * tm_eg)
{
    196a:	cf 92       	push	r12
    196c:	df 92       	push	r13
    196e:	ef 92       	push	r14
    1970:	ff 92       	push	r15
    1972:	0f 93       	push	r16
    1974:	1f 93       	push	r17
    1976:	cf 93       	push	r28
    1978:	df 93       	push	r29
    197a:	ea 01       	movw	r28, r20
	tm_eg->unix_msec += increment_msec;
    197c:	cc 80       	ldd	r12, Y+4	; 0x04
    197e:	dd 80       	ldd	r13, Y+5	; 0x05
    1980:	ee 80       	ldd	r14, Y+6	; 0x06
    1982:	ff 80       	ldd	r15, Y+7	; 0x07
    1984:	6c 0d       	add	r22, r12
    1986:	7d 1d       	adc	r23, r13
    1988:	8e 1d       	adc	r24, r14
    198a:	9f 1d       	adc	r25, r15
	tm_eg->unix_time += ( tm_eg->unix_msec / 1000 );
    198c:	28 ee       	ldi	r18, 0xE8	; 232
    198e:	33 e0       	ldi	r19, 0x03	; 3
    1990:	40 e0       	ldi	r20, 0x00	; 0
    1992:	50 e0       	ldi	r21, 0x00	; 0
    1994:	0e 94 22 1a 	call	0x3444	; 0x3444 <__divmodsi4>
    1998:	c8 80       	ld	r12, Y
    199a:	d9 80       	ldd	r13, Y+1	; 0x01
    199c:	ea 80       	ldd	r14, Y+2	; 0x02
    199e:	fb 80       	ldd	r15, Y+3	; 0x03
    19a0:	89 01       	movw	r16, r18
    19a2:	9a 01       	movw	r18, r20
    19a4:	0c 0d       	add	r16, r12
    19a6:	1d 1d       	adc	r17, r13
    19a8:	2e 1d       	adc	r18, r14
    19aa:	3f 1d       	adc	r19, r15
    19ac:	08 83       	st	Y, r16
    19ae:	19 83       	std	Y+1, r17	; 0x01
    19b0:	2a 83       	std	Y+2, r18	; 0x02
    19b2:	3b 83       	std	Y+3, r19	; 0x03
	tm_eg->unix_msec = tm_eg->unix_msec % 1000;
    19b4:	6c 83       	std	Y+4, r22	; 0x04
    19b6:	7d 83       	std	Y+5, r23	; 0x05
    19b8:	8e 83       	std	Y+6, r24	; 0x06
    19ba:	9f 83       	std	Y+7, r25	; 0x07
	calcDate(tm_eg);
    19bc:	ce 01       	movw	r24, r28
    19be:	3c de       	rcall	.-904    	; 0x1638 <calcDate>
}
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	1f 91       	pop	r17
    19c6:	0f 91       	pop	r16
    19c8:	ff 90       	pop	r15
    19ca:	ef 90       	pop	r14
    19cc:	df 90       	pop	r13
    19ce:	cf 90       	pop	r12
    19d0:	08 95       	ret

000019d2 <init_timestamp>:



void init_timestamp(tm *tm_ptr)
{
	tm_ptr->unix_msec=0;
    19d2:	fc 01       	movw	r30, r24
    19d4:	14 82       	std	Z+4, r1	; 0x04
    19d6:	15 82       	std	Z+5, r1	; 0x05
    19d8:	16 82       	std	Z+6, r1	; 0x06
    19da:	17 82       	std	Z+7, r1	; 0x07
	tm_ptr->unix_time=0;
    19dc:	10 82       	st	Z, r1
    19de:	11 82       	std	Z+1, r1	; 0x01
    19e0:	12 82       	std	Z+2, r1	; 0x02
    19e2:	13 82       	std	Z+3, r1	; 0x03
    19e4:	08 95       	ret

000019e6 <fctn_getStartNum>:
}

int fctn_getStartNum( BaseSensor *this)
{
	return this->StartNum;
}
    19e6:	fc 01       	movw	r30, r24
    19e8:	84 81       	ldd	r24, Z+4	; 0x04
    19ea:	95 81       	ldd	r25, Z+5	; 0x05
    19ec:	08 95       	ret

000019ee <fctn_getEndNum>:

int fctn_getEndNum( BaseSensor *this)
{
    19ee:	fc 01       	movw	r30, r24
	return ( this->StartNum + this->NumOfData );
    19f0:	24 81       	ldd	r18, Z+4	; 0x04
    19f2:	35 81       	ldd	r19, Z+5	; 0x05
    19f4:	86 81       	ldd	r24, Z+6	; 0x06
    19f6:	97 81       	ldd	r25, Z+7	; 0x07
}
    19f8:	82 0f       	add	r24, r18
    19fa:	93 1f       	adc	r25, r19
    19fc:	08 95       	ret

000019fe <BMP280_ReadBytes>:
  @brief Gets the oversampling setting for the library
  @return oversampling
*****************************************************************************/
short BMP280_GetOversampling(void){
	return oversampling;
}
    19fe:	1f 93       	push	r17
    1a00:	cf 93       	push	r28
    1a02:	df 93       	push	r29
    1a04:	ec 01       	movw	r28, r24
    1a06:	16 2f       	mov	r17, r22
    1a08:	86 e7       	ldi	r24, 0x76	; 118
    1a0a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <TWI_BeginWrite>
    1a0e:	88 81       	ld	r24, Y
    1a10:	0e 94 eb 04 	call	0x9d6	; 0x9d6 <TWI_WriteByte>
    1a14:	86 e7       	ldi	r24, 0x76	; 118
    1a16:	09 d8       	rcall	.-4078   	; 0xa2a <TWI_BeginRead>
    1a18:	80 93 f5 08 	sts	0x08F5, r24
    1a1c:	80 34       	cpi	r24, 0x40	; 64
    1a1e:	71 f4       	brne	.+28     	; 0x1a3c <BMP280_ReadBytes+0x3e>
    1a20:	61 2f       	mov	r22, r17
    1a22:	70 e0       	ldi	r23, 0x00	; 0
    1a24:	40 e0       	ldi	r20, 0x00	; 0
    1a26:	ce 01       	movw	r24, r28
    1a28:	3c d8       	rcall	.-3976   	; 0xaa2 <TWI_Read>
    1a2a:	88 7f       	andi	r24, 0xF8	; 248
    1a2c:	88 35       	cpi	r24, 0x58	; 88
    1a2e:	41 f4       	brne	.+16     	; 0x1a40 <BMP280_ReadBytes+0x42>
    1a30:	33 d8       	rcall	.-3994   	; 0xa98 <TWI_Stop>
    1a32:	91 e0       	ldi	r25, 0x01	; 1
    1a34:	81 11       	cpse	r24, r1
    1a36:	05 c0       	rjmp	.+10     	; 0x1a42 <BMP280_ReadBytes+0x44>
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	03 c0       	rjmp	.+6      	; 0x1a42 <BMP280_ReadBytes+0x44>
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	01 c0       	rjmp	.+2      	; 0x1a42 <BMP280_ReadBytes+0x44>
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	89 2f       	mov	r24, r25
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	1f 91       	pop	r17
    1a4a:	08 95       	ret

00001a4c <BMP280_ReadInt>:
    1a4c:	0f 93       	push	r16
    1a4e:	1f 93       	push	r17
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	1f 92       	push	r1
    1a56:	1f 92       	push	r1
    1a58:	cd b7       	in	r28, 0x3d	; 61
    1a5a:	de b7       	in	r29, 0x3e	; 62
    1a5c:	8b 01       	movw	r16, r22
    1a5e:	89 83       	std	Y+1, r24	; 0x01
    1a60:	62 e0       	ldi	r22, 0x02	; 2
    1a62:	ce 01       	movw	r24, r28
    1a64:	01 96       	adiw	r24, 0x01	; 1
    1a66:	cb df       	rcall	.-106    	; 0x19fe <BMP280_ReadBytes>
    1a68:	88 23       	and	r24, r24
    1a6a:	59 f0       	breq	.+22     	; 0x1a82 <BMP280_ReadInt+0x36>
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	98 2f       	mov	r25, r24
    1a72:	88 27       	eor	r24, r24
    1a74:	29 81       	ldd	r18, Y+1	; 0x01
    1a76:	82 2b       	or	r24, r18
    1a78:	f8 01       	movw	r30, r16
    1a7a:	91 83       	std	Z+1, r25	; 0x01
    1a7c:	80 83       	st	Z, r24
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	03 c0       	rjmp	.+6      	; 0x1a88 <BMP280_ReadInt+0x3c>
    1a82:	f8 01       	movw	r30, r16
    1a84:	11 82       	std	Z+1, r1	; 0x01
    1a86:	10 82       	st	Z, r1
    1a88:	0f 90       	pop	r0
    1a8a:	0f 90       	pop	r0
    1a8c:	df 91       	pop	r29
    1a8e:	cf 91       	pop	r28
    1a90:	1f 91       	pop	r17
    1a92:	0f 91       	pop	r16
    1a94:	08 95       	ret

00001a96 <BMP280_Init>:
    1a96:	cf 93       	push	r28
    1a98:	df 93       	push	r29
    1a9a:	1f 92       	push	r1
    1a9c:	1f 92       	push	r1
    1a9e:	cd b7       	in	r28, 0x3d	; 61
    1aa0:	de b7       	in	r29, 0x3e	; 62
    1aa2:	88 e8       	ldi	r24, 0x88	; 136
    1aa4:	89 83       	std	Y+1, r24	; 0x01
    1aa6:	62 e0       	ldi	r22, 0x02	; 2
    1aa8:	ce 01       	movw	r24, r28
    1aaa:	01 96       	adiw	r24, 0x01	; 1
    1aac:	a8 df       	rcall	.-176    	; 0x19fe <BMP280_ReadBytes>
    1aae:	88 23       	and	r24, r24
    1ab0:	91 f0       	breq	.+36     	; 0x1ad6 <BMP280_Init+0x40>
    1ab2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	98 2f       	mov	r25, r24
    1ab8:	88 27       	eor	r24, r24
    1aba:	29 81       	ldd	r18, Y+1	; 0x01
    1abc:	82 2b       	or	r24, r18
    1abe:	90 93 00 09 	sts	0x0900, r25
    1ac2:	80 93 ff 08 	sts	0x08FF, r24
    1ac6:	65 e1       	ldi	r22, 0x15	; 21
    1ac8:	79 e0       	ldi	r23, 0x09	; 9
    1aca:	8a e8       	ldi	r24, 0x8A	; 138
    1acc:	bf df       	rcall	.-130    	; 0x1a4c <BMP280_ReadInt>
    1ace:	88 23       	and	r24, r24
    1ad0:	09 f4       	brne	.+2      	; 0x1ad4 <BMP280_Init+0x3e>
    1ad2:	b1 c0       	rjmp	.+354    	; 0x1c36 <BMP280_Init+0x1a0>
    1ad4:	05 c0       	rjmp	.+10     	; 0x1ae0 <BMP280_Init+0x4a>
    1ad6:	10 92 00 09 	sts	0x0900, r1
    1ada:	10 92 ff 08 	sts	0x08FF, r1
    1ade:	ab c0       	rjmp	.+342    	; 0x1c36 <BMP280_Init+0x1a0>
    1ae0:	63 e1       	ldi	r22, 0x13	; 19
    1ae2:	79 e0       	ldi	r23, 0x09	; 9
    1ae4:	8c e8       	ldi	r24, 0x8C	; 140
    1ae6:	b2 df       	rcall	.-156    	; 0x1a4c <BMP280_ReadInt>
    1ae8:	88 23       	and	r24, r24
    1aea:	09 f4       	brne	.+2      	; 0x1aee <BMP280_Init+0x58>
    1aec:	a4 c0       	rjmp	.+328    	; 0x1c36 <BMP280_Init+0x1a0>
    1aee:	8e e8       	ldi	r24, 0x8E	; 142
    1af0:	89 83       	std	Y+1, r24	; 0x01
    1af2:	62 e0       	ldi	r22, 0x02	; 2
    1af4:	ce 01       	movw	r24, r28
    1af6:	01 96       	adiw	r24, 0x01	; 1
    1af8:	82 df       	rcall	.-252    	; 0x19fe <BMP280_ReadBytes>
    1afa:	88 23       	and	r24, r24
    1afc:	91 f0       	breq	.+36     	; 0x1b22 <BMP280_Init+0x8c>
    1afe:	8a 81       	ldd	r24, Y+2	; 0x02
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	98 2f       	mov	r25, r24
    1b04:	88 27       	eor	r24, r24
    1b06:	29 81       	ldd	r18, Y+1	; 0x01
    1b08:	82 2b       	or	r24, r18
    1b0a:	90 93 02 09 	sts	0x0902, r25
    1b0e:	80 93 01 09 	sts	0x0901, r24
    1b12:	61 e1       	ldi	r22, 0x11	; 17
    1b14:	79 e0       	ldi	r23, 0x09	; 9
    1b16:	80 e9       	ldi	r24, 0x90	; 144
    1b18:	99 df       	rcall	.-206    	; 0x1a4c <BMP280_ReadInt>
    1b1a:	88 23       	and	r24, r24
    1b1c:	09 f4       	brne	.+2      	; 0x1b20 <BMP280_Init+0x8a>
    1b1e:	8b c0       	rjmp	.+278    	; 0x1c36 <BMP280_Init+0x1a0>
    1b20:	05 c0       	rjmp	.+10     	; 0x1b2c <BMP280_Init+0x96>
    1b22:	10 92 02 09 	sts	0x0902, r1
    1b26:	10 92 01 09 	sts	0x0901, r1
    1b2a:	85 c0       	rjmp	.+266    	; 0x1c36 <BMP280_Init+0x1a0>
    1b2c:	6f e0       	ldi	r22, 0x0F	; 15
    1b2e:	79 e0       	ldi	r23, 0x09	; 9
    1b30:	82 e9       	ldi	r24, 0x92	; 146
    1b32:	8c df       	rcall	.-232    	; 0x1a4c <BMP280_ReadInt>
    1b34:	88 23       	and	r24, r24
    1b36:	09 f4       	brne	.+2      	; 0x1b3a <BMP280_Init+0xa4>
    1b38:	7e c0       	rjmp	.+252    	; 0x1c36 <BMP280_Init+0x1a0>
    1b3a:	6d e0       	ldi	r22, 0x0D	; 13
    1b3c:	79 e0       	ldi	r23, 0x09	; 9
    1b3e:	84 e9       	ldi	r24, 0x94	; 148
    1b40:	85 df       	rcall	.-246    	; 0x1a4c <BMP280_ReadInt>
    1b42:	88 23       	and	r24, r24
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <BMP280_Init+0xb2>
    1b46:	77 c0       	rjmp	.+238    	; 0x1c36 <BMP280_Init+0x1a0>
    1b48:	6b e0       	ldi	r22, 0x0B	; 11
    1b4a:	79 e0       	ldi	r23, 0x09	; 9
    1b4c:	86 e9       	ldi	r24, 0x96	; 150
    1b4e:	7e df       	rcall	.-260    	; 0x1a4c <BMP280_ReadInt>
    1b50:	88 23       	and	r24, r24
    1b52:	09 f4       	brne	.+2      	; 0x1b56 <BMP280_Init+0xc0>
    1b54:	70 c0       	rjmp	.+224    	; 0x1c36 <BMP280_Init+0x1a0>
    1b56:	69 e0       	ldi	r22, 0x09	; 9
    1b58:	79 e0       	ldi	r23, 0x09	; 9
    1b5a:	88 e9       	ldi	r24, 0x98	; 152
    1b5c:	77 df       	rcall	.-274    	; 0x1a4c <BMP280_ReadInt>
    1b5e:	88 23       	and	r24, r24
    1b60:	09 f4       	brne	.+2      	; 0x1b64 <BMP280_Init+0xce>
    1b62:	69 c0       	rjmp	.+210    	; 0x1c36 <BMP280_Init+0x1a0>
    1b64:	67 e0       	ldi	r22, 0x07	; 7
    1b66:	79 e0       	ldi	r23, 0x09	; 9
    1b68:	8a e9       	ldi	r24, 0x9A	; 154
    1b6a:	70 df       	rcall	.-288    	; 0x1a4c <BMP280_ReadInt>
    1b6c:	88 23       	and	r24, r24
    1b6e:	09 f4       	brne	.+2      	; 0x1b72 <BMP280_Init+0xdc>
    1b70:	62 c0       	rjmp	.+196    	; 0x1c36 <BMP280_Init+0x1a0>
    1b72:	65 e0       	ldi	r22, 0x05	; 5
    1b74:	79 e0       	ldi	r23, 0x09	; 9
    1b76:	8c e9       	ldi	r24, 0x9C	; 156
    1b78:	69 df       	rcall	.-302    	; 0x1a4c <BMP280_ReadInt>
    1b7a:	88 23       	and	r24, r24
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <BMP280_Init+0xea>
    1b7e:	5b c0       	rjmp	.+182    	; 0x1c36 <BMP280_Init+0x1a0>
    1b80:	63 e0       	ldi	r22, 0x03	; 3
    1b82:	79 e0       	ldi	r23, 0x09	; 9
    1b84:	8e e9       	ldi	r24, 0x9E	; 158
    1b86:	62 df       	rcall	.-316    	; 0x1a4c <BMP280_ReadInt>
    1b88:	88 23       	and	r24, r24
    1b8a:	09 f4       	brne	.+2      	; 0x1b8e <BMP280_Init+0xf8>
    1b8c:	54 c0       	rjmp	.+168    	; 0x1c36 <BMP280_Init+0x1a0>
    1b8e:	80 91 04 09 	lds	r24, 0x0904
    1b92:	8f 93       	push	r24
    1b94:	80 91 03 09 	lds	r24, 0x0903
    1b98:	8f 93       	push	r24
    1b9a:	80 91 06 09 	lds	r24, 0x0906
    1b9e:	8f 93       	push	r24
    1ba0:	80 91 05 09 	lds	r24, 0x0905
    1ba4:	8f 93       	push	r24
    1ba6:	80 91 08 09 	lds	r24, 0x0908
    1baa:	8f 93       	push	r24
    1bac:	80 91 07 09 	lds	r24, 0x0907
    1bb0:	8f 93       	push	r24
    1bb2:	80 91 0a 09 	lds	r24, 0x090A
    1bb6:	8f 93       	push	r24
    1bb8:	80 91 09 09 	lds	r24, 0x0909
    1bbc:	8f 93       	push	r24
    1bbe:	80 91 0c 09 	lds	r24, 0x090C
    1bc2:	8f 93       	push	r24
    1bc4:	80 91 0b 09 	lds	r24, 0x090B
    1bc8:	8f 93       	push	r24
    1bca:	80 91 0e 09 	lds	r24, 0x090E
    1bce:	8f 93       	push	r24
    1bd0:	80 91 0d 09 	lds	r24, 0x090D
    1bd4:	8f 93       	push	r24
    1bd6:	80 91 10 09 	lds	r24, 0x0910
    1bda:	8f 93       	push	r24
    1bdc:	80 91 0f 09 	lds	r24, 0x090F
    1be0:	8f 93       	push	r24
    1be2:	80 91 12 09 	lds	r24, 0x0912
    1be6:	8f 93       	push	r24
    1be8:	80 91 11 09 	lds	r24, 0x0911
    1bec:	8f 93       	push	r24
    1bee:	80 91 02 09 	lds	r24, 0x0902
    1bf2:	8f 93       	push	r24
    1bf4:	80 91 01 09 	lds	r24, 0x0901
    1bf8:	8f 93       	push	r24
    1bfa:	80 91 14 09 	lds	r24, 0x0914
    1bfe:	8f 93       	push	r24
    1c00:	80 91 13 09 	lds	r24, 0x0913
    1c04:	8f 93       	push	r24
    1c06:	80 91 16 09 	lds	r24, 0x0916
    1c0a:	8f 93       	push	r24
    1c0c:	80 91 15 09 	lds	r24, 0x0915
    1c10:	8f 93       	push	r24
    1c12:	80 91 00 09 	lds	r24, 0x0900
    1c16:	8f 93       	push	r24
    1c18:	80 91 ff 08 	lds	r24, 0x08FF
    1c1c:	8f 93       	push	r24
    1c1e:	8d e8       	ldi	r24, 0x8D	; 141
    1c20:	94 e0       	ldi	r25, 0x04	; 4
    1c22:	9f 93       	push	r25
    1c24:	8f 93       	push	r24
    1c26:	0e 94 b0 1c 	call	0x3960	; 0x3960 <printf>
    1c2a:	0f b6       	in	r0, 0x3f	; 63
    1c2c:	f8 94       	cli
    1c2e:	de bf       	out	0x3e, r29	; 62
    1c30:	0f be       	out	0x3f, r0	; 63
    1c32:	cd bf       	out	0x3d, r28	; 61
    1c34:	81 e0       	ldi	r24, 0x01	; 1
    1c36:	0f 90       	pop	r0
    1c38:	0f 90       	pop	r0
    1c3a:	df 91       	pop	r29
    1c3c:	cf 91       	pop	r28
    1c3e:	08 95       	ret

00001c40 <BMP280_SetOversampling>:
  @brief Sets the oversampling setting for the library
  @param[in] oss Oversampling setting
  @return 1
*****************************************************************************/
char BMP280_SetOversampling(short oss){
	oversampling = oss;
    1c40:	90 93 fe 08 	sts	0x08FE, r25
    1c44:	80 93 fd 08 	sts	0x08FD, r24
	return (1);
}
    1c48:	81 e0       	ldi	r24, 0x01	; 1
    1c4a:	08 95       	ret

00001c4c <BMP280_StartMeasurment>:

/*************************************************************************//**
  @brief Starts a measurement
  @return time to wait for result (in ms)
*****************************************************************************/
char BMP280_StartMeasurment(void){
    1c4c:	1f 93       	push	r17
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	1f 92       	push	r1
    1c54:	1f 92       	push	r1
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
	unsigned char data[2], result, delay;
	
	data[0] = BMP280_REG_CONTROL;
    1c5a:	84 ef       	ldi	r24, 0xF4	; 244
    1c5c:	89 83       	std	Y+1, r24	; 0x01

	switch (oversampling){
    1c5e:	80 91 fd 08 	lds	r24, 0x08FD
    1c62:	90 91 fe 08 	lds	r25, 0x08FE
    1c66:	82 30       	cpi	r24, 0x02	; 2
    1c68:	91 05       	cpc	r25, r1
    1c6a:	01 f1       	breq	.+64     	; 0x1cac <BMP280_StartMeasurment+0x60>
    1c6c:	2c f4       	brge	.+10     	; 0x1c78 <BMP280_StartMeasurment+0x2c>
    1c6e:	00 97       	sbiw	r24, 0x00	; 0
    1c70:	49 f0       	breq	.+18     	; 0x1c84 <BMP280_StartMeasurment+0x38>
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	89 f0       	breq	.+34     	; 0x1c98 <BMP280_StartMeasurment+0x4c>
    1c76:	38 c0       	rjmp	.+112    	; 0x1ce8 <BMP280_StartMeasurment+0x9c>
    1c78:	83 30       	cpi	r24, 0x03	; 3
    1c7a:	91 05       	cpc	r25, r1
    1c7c:	09 f1       	breq	.+66     	; 0x1cc0 <BMP280_StartMeasurment+0x74>
    1c7e:	04 97       	sbiw	r24, 0x04	; 4
    1c80:	49 f1       	breq	.+82     	; 0x1cd4 <BMP280_StartMeasurment+0x88>
    1c82:	32 c0       	rjmp	.+100    	; 0x1ce8 <BMP280_StartMeasurment+0x9c>
		case 0:
		data[1] = BMP280_COMMAND_PRESSURE0;
    1c84:	85 e2       	ldi	r24, 0x25	; 37
    1c86:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	90 93 fc 08 	sts	0x08FC, r25
    1c90:	80 93 fb 08 	sts	0x08FB, r24
		delay = 8;
    1c94:	18 e0       	ldi	r17, 0x08	; 8
		break;
    1c96:	2b c0       	rjmp	.+86     	; 0x1cee <BMP280_StartMeasurment+0xa2>
		case 1:
		data[1] = BMP280_COMMAND_PRESSURE1;
    1c98:	89 e2       	ldi	r24, 0x29	; 41
    1c9a:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	90 93 fc 08 	sts	0x08FC, r25
    1ca4:	80 93 fb 08 	sts	0x08FB, r24
		delay = 10;
    1ca8:	1a e0       	ldi	r17, 0x0A	; 10
		break;
    1caa:	21 c0       	rjmp	.+66     	; 0x1cee <BMP280_StartMeasurment+0xa2>
		case 2:
		data[1] = BMP280_COMMAND_PRESSURE2;
    1cac:	8d e2       	ldi	r24, 0x2D	; 45
    1cae:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	90 93 fc 08 	sts	0x08FC, r25
    1cb8:	80 93 fb 08 	sts	0x08FB, r24
		delay = 15;
    1cbc:	1f e0       	ldi	r17, 0x0F	; 15
		break;
    1cbe:	17 c0       	rjmp	.+46     	; 0x1cee <BMP280_StartMeasurment+0xa2>
		case 3:
		data[1] = BMP280_COMMAND_PRESSURE3;
    1cc0:	81 e3       	ldi	r24, 0x31	; 49
    1cc2:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	90 93 fc 08 	sts	0x08FC, r25
    1ccc:	80 93 fb 08 	sts	0x08FB, r24
		delay = 24;
    1cd0:	18 e1       	ldi	r17, 0x18	; 24
		break;
    1cd2:	0d c0       	rjmp	.+26     	; 0x1cee <BMP280_StartMeasurment+0xa2>
		case 4:
		data[1] = BMP280_COMMAND_PRESSURE4;
    1cd4:	8d e5       	ldi	r24, 0x5D	; 93
    1cd6:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	90 93 fc 08 	sts	0x08FC, r25
    1ce0:	80 93 fb 08 	sts	0x08FB, r24
		delay = 45;
    1ce4:	1d e2       	ldi	r17, 0x2D	; 45
		break;
    1ce6:	03 c0       	rjmp	.+6      	; 0x1cee <BMP280_StartMeasurment+0xa2>
		default:
		data[1] = BMP280_COMMAND_PRESSURE0;
    1ce8:	85 e2       	ldi	r24, 0x25	; 37
    1cea:	8a 83       	std	Y+2, r24	; 0x02
		delay = 9;
    1cec:	19 e0       	ldi	r17, 0x09	; 9
  @param[in] *values pointer to an array to send, put the starting register in values[0]
  @param[in] length how many bytes to write (including the starting register ie. sizeof(values))
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_WriteBytes(unsigned char *values, char length){
	TWI_BeginWrite(BMP280_ADDR);
    1cee:	86 e7       	ldi	r24, 0x76	; 118
    1cf0:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <TWI_BeginWrite>
	if((TWI_Write(&values[0],length) == TWI_SENT_ACK) && (TWI_Stop() != 0)) return 1; //Send bytes, a STOP bit, and check for success
    1cf4:	62 e0       	ldi	r22, 0x02	; 2
    1cf6:	70 e0       	ldi	r23, 0x00	; 0
    1cf8:	ce 01       	movw	r24, r28
    1cfa:	01 96       	adiw	r24, 0x01	; 1
    1cfc:	0e 94 8b 05 	call	0xb16	; 0xb16 <TWI_Write>
    1d00:	88 32       	cpi	r24, 0x28	; 40
    1d02:	31 f4       	brne	.+12     	; 0x1d10 <BMP280_StartMeasurment+0xc4>
    1d04:	0e 94 4c 05 	call	0xa98	; 0xa98 <TWI_Stop>
		data[1] = BMP280_COMMAND_PRESSURE0;
		delay = 9;
		break;
	}
	result = BMP280_WriteBytes(&data[0], 2);
	if (result) // good write?
    1d08:	88 23       	and	r24, r24
    1d0a:	21 f0       	breq	.+8      	; 0x1d14 <BMP280_StartMeasurment+0xc8>
	return(delay); // return the delay in ms (rounded up) to wait before retrieving data
    1d0c:	81 2f       	mov	r24, r17
    1d0e:	03 c0       	rjmp	.+6      	; 0x1d16 <BMP280_StartMeasurment+0xca>
	else
	return(-1); // or return -1 if there was a problem communicating with the BMP
    1d10:	8f ef       	ldi	r24, 0xFF	; 255
    1d12:	01 c0       	rjmp	.+2      	; 0x1d16 <BMP280_StartMeasurment+0xca>
    1d14:	8f ef       	ldi	r24, 0xFF	; 255
	//printf("failure on writeInt");
}
    1d16:	0f 90       	pop	r0
    1d18:	0f 90       	pop	r0
    1d1a:	df 91       	pop	r29
    1d1c:	cf 91       	pop	r28
    1d1e:	1f 91       	pop	r17
    1d20:	08 95       	ret

00001d22 <BMP280_GetUnPT>:
  @brief Gets the uncalibrated temperature and pressure data
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetUnPT(double *uP, double *uT){
    1d22:	8f 92       	push	r8
    1d24:	9f 92       	push	r9
    1d26:	af 92       	push	r10
    1d28:	bf 92       	push	r11
    1d2a:	cf 92       	push	r12
    1d2c:	df 92       	push	r13
    1d2e:	ef 92       	push	r14
    1d30:	ff 92       	push	r15
    1d32:	1f 93       	push	r17
    1d34:	cf 93       	push	r28
    1d36:	df 93       	push	r29
    1d38:	00 d0       	rcall	.+0      	; 0x1d3a <BMP280_GetUnPT+0x18>
    1d3a:	00 d0       	rcall	.+0      	; 0x1d3c <BMP280_GetUnPT+0x1a>
    1d3c:	cd b7       	in	r28, 0x3d	; 61
    1d3e:	de b7       	in	r29, 0x3e	; 62
    1d40:	6c 01       	movw	r12, r24
    1d42:	7b 01       	movw	r14, r22
	unsigned char data[6];
	char result;
	
	data[0] = BMP280_REG_RESULT_PRESSURE; //0xF7
    1d44:	87 ef       	ldi	r24, 0xF7	; 247
    1d46:	89 83       	std	Y+1, r24	; 0x01

	result = BMP280_ReadBytes(&data[0], 6); // 0xF7; xF8, 0xF9, 0xFA, 0xFB, 0xFC
    1d48:	66 e0       	ldi	r22, 0x06	; 6
    1d4a:	ce 01       	movw	r24, r28
    1d4c:	01 96       	adiw	r24, 0x01	; 1
    1d4e:	57 de       	rcall	.-850    	; 0x19fe <BMP280_ReadBytes>
    1d50:	18 2f       	mov	r17, r24
	if (result){ // good read
    1d52:	88 23       	and	r24, r24
    1d54:	09 f4       	brne	.+2      	; 0x1d58 <BMP280_GetUnPT+0x36>
    1d56:	66 c0       	rjmp	.+204    	; 0x1e24 <BMP280_GetUnPT+0x102>
		double factor = pow(2, 4);
		*uP = (( (data[0] *256.0) + data[1] + (data[2]/256.0))) * factor ;	//20bit UP
    1d58:	69 81       	ldd	r22, Y+1	; 0x01
    1d5a:	70 e0       	ldi	r23, 0x00	; 0
    1d5c:	80 e0       	ldi	r24, 0x00	; 0
    1d5e:	90 e0       	ldi	r25, 0x00	; 0
    1d60:	b0 d6       	rcall	.+3424   	; 0x2ac2 <__floatsisf>
    1d62:	20 e0       	ldi	r18, 0x00	; 0
    1d64:	30 e0       	ldi	r19, 0x00	; 0
    1d66:	40 e8       	ldi	r20, 0x80	; 128
    1d68:	53 e4       	ldi	r21, 0x43	; 67
    1d6a:	5f d7       	rcall	.+3774   	; 0x2c2a <__mulsf3>
    1d6c:	4b 01       	movw	r8, r22
    1d6e:	5c 01       	movw	r10, r24
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	68 2f       	mov	r22, r24
    1d74:	70 e0       	ldi	r23, 0x00	; 0
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	a3 d6       	rcall	.+3398   	; 0x2ac2 <__floatsisf>
    1d7c:	9b 01       	movw	r18, r22
    1d7e:	ac 01       	movw	r20, r24
    1d80:	c5 01       	movw	r24, r10
    1d82:	b4 01       	movw	r22, r8
    1d84:	9b d5       	rcall	.+2870   	; 0x28bc <__addsf3>
    1d86:	4b 01       	movw	r8, r22
    1d88:	5c 01       	movw	r10, r24
    1d8a:	4b 81       	ldd	r20, Y+3	; 0x03
    1d8c:	64 2f       	mov	r22, r20
    1d8e:	70 e0       	ldi	r23, 0x00	; 0
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	96 d6       	rcall	.+3372   	; 0x2ac2 <__floatsisf>
    1d96:	20 e0       	ldi	r18, 0x00	; 0
    1d98:	30 e0       	ldi	r19, 0x00	; 0
    1d9a:	40 e8       	ldi	r20, 0x80	; 128
    1d9c:	5b e3       	ldi	r21, 0x3B	; 59
    1d9e:	45 d7       	rcall	.+3722   	; 0x2c2a <__mulsf3>
    1da0:	9b 01       	movw	r18, r22
    1da2:	ac 01       	movw	r20, r24
    1da4:	c5 01       	movw	r24, r10
    1da6:	b4 01       	movw	r22, r8
    1da8:	89 d5       	rcall	.+2834   	; 0x28bc <__addsf3>
    1daa:	20 e0       	ldi	r18, 0x00	; 0
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	40 e8       	ldi	r20, 0x80	; 128
    1db0:	51 e4       	ldi	r21, 0x41	; 65
    1db2:	3b d7       	rcall	.+3702   	; 0x2c2a <__mulsf3>
    1db4:	f6 01       	movw	r30, r12
    1db6:	60 83       	st	Z, r22
    1db8:	71 83       	std	Z+1, r23	; 0x01
    1dba:	82 83       	std	Z+2, r24	; 0x02
    1dbc:	93 83       	std	Z+3, r25	; 0x03
		*uT = (( (data[3] *256.0) + data[4] + (data[5]/256.0))) * factor ;	//20bit UT
    1dbe:	6c 81       	ldd	r22, Y+4	; 0x04
    1dc0:	70 e0       	ldi	r23, 0x00	; 0
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	7d d6       	rcall	.+3322   	; 0x2ac2 <__floatsisf>
    1dc8:	20 e0       	ldi	r18, 0x00	; 0
    1dca:	30 e0       	ldi	r19, 0x00	; 0
    1dcc:	40 e8       	ldi	r20, 0x80	; 128
    1dce:	53 e4       	ldi	r21, 0x43	; 67
    1dd0:	2c d7       	rcall	.+3672   	; 0x2c2a <__mulsf3>
    1dd2:	4b 01       	movw	r8, r22
    1dd4:	5c 01       	movw	r10, r24
    1dd6:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd8:	68 2f       	mov	r22, r24
    1dda:	70 e0       	ldi	r23, 0x00	; 0
    1ddc:	80 e0       	ldi	r24, 0x00	; 0
    1dde:	90 e0       	ldi	r25, 0x00	; 0
    1de0:	70 d6       	rcall	.+3296   	; 0x2ac2 <__floatsisf>
    1de2:	9b 01       	movw	r18, r22
    1de4:	ac 01       	movw	r20, r24
    1de6:	c5 01       	movw	r24, r10
    1de8:	b4 01       	movw	r22, r8
    1dea:	68 d5       	rcall	.+2768   	; 0x28bc <__addsf3>
    1dec:	4b 01       	movw	r8, r22
    1dee:	5c 01       	movw	r10, r24
    1df0:	8e 81       	ldd	r24, Y+6	; 0x06
    1df2:	68 2f       	mov	r22, r24
    1df4:	70 e0       	ldi	r23, 0x00	; 0
    1df6:	80 e0       	ldi	r24, 0x00	; 0
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	63 d6       	rcall	.+3270   	; 0x2ac2 <__floatsisf>
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e8       	ldi	r20, 0x80	; 128
    1e02:	5b e3       	ldi	r21, 0x3B	; 59
    1e04:	12 d7       	rcall	.+3620   	; 0x2c2a <__mulsf3>
    1e06:	9b 01       	movw	r18, r22
    1e08:	ac 01       	movw	r20, r24
    1e0a:	c5 01       	movw	r24, r10
    1e0c:	b4 01       	movw	r22, r8
    1e0e:	56 d5       	rcall	.+2732   	; 0x28bc <__addsf3>
    1e10:	20 e0       	ldi	r18, 0x00	; 0
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	40 e8       	ldi	r20, 0x80	; 128
    1e16:	51 e4       	ldi	r21, 0x41	; 65
    1e18:	08 d7       	rcall	.+3600   	; 0x2c2a <__mulsf3>
    1e1a:	f7 01       	movw	r30, r14
    1e1c:	60 83       	st	Z, r22
    1e1e:	71 83       	std	Z+1, r23	; 0x01
    1e20:	82 83       	std	Z+2, r24	; 0x02
    1e22:	93 83       	std	Z+3, r25	; 0x03
		
	}
	return(result);
	//printf("get values successful");
	//delay_us(100);
}
    1e24:	81 2f       	mov	r24, r17
    1e26:	26 96       	adiw	r28, 0x06	; 6
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	cd bf       	out	0x3d, r28	; 61
    1e32:	df 91       	pop	r29
    1e34:	cf 91       	pop	r28
    1e36:	1f 91       	pop	r17
    1e38:	ff 90       	pop	r15
    1e3a:	ef 90       	pop	r14
    1e3c:	df 90       	pop	r13
    1e3e:	cf 90       	pop	r12
    1e40:	bf 90       	pop	r11
    1e42:	af 90       	pop	r10
    1e44:	9f 90       	pop	r9
    1e46:	8f 90       	pop	r8
    1e48:	08 95       	ret

00001e4a <BMP280_CalcTemperature>:
  @brief Calculates temperature
  @param[out] pointer to a place to store the temperature data
  @param[in] pointer to the uncalibrated temperature data
  @return status
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
    1e4a:	4f 92       	push	r4
    1e4c:	5f 92       	push	r5
    1e4e:	6f 92       	push	r6
    1e50:	7f 92       	push	r7
    1e52:	8f 92       	push	r8
    1e54:	9f 92       	push	r9
    1e56:	af 92       	push	r10
    1e58:	bf 92       	push	r11
    1e5a:	cf 92       	push	r12
    1e5c:	df 92       	push	r13
    1e5e:	ef 92       	push	r14
    1e60:	ff 92       	push	r15
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
    1e66:	ec 01       	movw	r28, r24
	double adc_T = *uT ;
    1e68:	fb 01       	movw	r30, r22
    1e6a:	c0 80       	ld	r12, Z
    1e6c:	d1 80       	ldd	r13, Z+1	; 0x01
    1e6e:	e2 80       	ldd	r14, Z+2	; 0x02
    1e70:	f3 80       	ldd	r15, Z+3	; 0x03
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
    1e72:	80 91 ff 08 	lds	r24, 0x08FF
    1e76:	90 91 00 09 	lds	r25, 0x0900
    1e7a:	bc 01       	movw	r22, r24
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	90 e0       	ldi	r25, 0x00	; 0
    1e80:	1e d6       	rcall	.+3132   	; 0x2abe <__floatunsisf>
    1e82:	2b 01       	movw	r4, r22
    1e84:	3c 01       	movw	r6, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
    1e86:	20 e0       	ldi	r18, 0x00	; 0
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	57 e3       	ldi	r21, 0x37	; 55
    1e8e:	c7 01       	movw	r24, r14
    1e90:	b6 01       	movw	r22, r12
    1e92:	cb d6       	rcall	.+3478   	; 0x2c2a <__mulsf3>
    1e94:	4b 01       	movw	r8, r22
    1e96:	5c 01       	movw	r10, r24
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e0       	ldi	r20, 0x00	; 0
    1e9e:	59 e3       	ldi	r21, 0x39	; 57
    1ea0:	c3 01       	movw	r24, r6
    1ea2:	b2 01       	movw	r22, r4
    1ea4:	c2 d6       	rcall	.+3460   	; 0x2c2a <__mulsf3>
    1ea6:	9b 01       	movw	r18, r22
    1ea8:	ac 01       	movw	r20, r24
    1eaa:	c5 01       	movw	r24, r10
    1eac:	b4 01       	movw	r22, r8
    1eae:	05 d5       	rcall	.+2570   	; 0x28ba <__subsf3>
    1eb0:	4b 01       	movw	r8, r22
    1eb2:	5c 01       	movw	r10, r24
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
	double adc_T = *uT ;
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
    1eb4:	20 e0       	ldi	r18, 0x00	; 0
    1eb6:	30 e0       	ldi	r19, 0x00	; 0
    1eb8:	40 e8       	ldi	r20, 0x80	; 128
    1eba:	58 e3       	ldi	r21, 0x38	; 56
    1ebc:	c7 01       	movw	r24, r14
    1ebe:	b6 01       	movw	r22, r12
    1ec0:	b4 d6       	rcall	.+3432   	; 0x2c2a <__mulsf3>
    1ec2:	6b 01       	movw	r12, r22
    1ec4:	7c 01       	movw	r14, r24
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	40 e8       	ldi	r20, 0x80	; 128
    1ecc:	5a e3       	ldi	r21, 0x3A	; 58
    1ece:	c3 01       	movw	r24, r6
    1ed0:	b2 01       	movw	r22, r4
    1ed2:	ab d6       	rcall	.+3414   	; 0x2c2a <__mulsf3>
    1ed4:	9b 01       	movw	r18, r22
    1ed6:	ac 01       	movw	r20, r24
    1ed8:	c7 01       	movw	r24, r14
    1eda:	b6 01       	movw	r22, r12
    1edc:	ee d4       	rcall	.+2524   	; 0x28ba <__subsf3>
    1ede:	6b 01       	movw	r12, r22
    1ee0:	7c 01       	movw	r14, r24
    1ee2:	80 91 15 09 	lds	r24, 0x0915
    1ee6:	90 91 16 09 	lds	r25, 0x0916
    1eea:	bc 01       	movw	r22, r24
    1eec:	99 0f       	add	r25, r25
    1eee:	88 0b       	sbc	r24, r24
    1ef0:	99 0b       	sbc	r25, r25
    1ef2:	e7 d5       	rcall	.+3022   	; 0x2ac2 <__floatsisf>
    1ef4:	9b 01       	movw	r18, r22
    1ef6:	ac 01       	movw	r20, r24
    1ef8:	c7 01       	movw	r24, r14
    1efa:	b6 01       	movw	r22, r12
    1efc:	96 d6       	rcall	.+3372   	; 0x2c2a <__mulsf3>
    1efe:	6b 01       	movw	r12, r22
    1f00:	7c 01       	movw	r14, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
    1f02:	a5 01       	movw	r20, r10
    1f04:	94 01       	movw	r18, r8
    1f06:	c5 01       	movw	r24, r10
    1f08:	b4 01       	movw	r22, r8
    1f0a:	8f d6       	rcall	.+3358   	; 0x2c2a <__mulsf3>
    1f0c:	4b 01       	movw	r8, r22
    1f0e:	5c 01       	movw	r10, r24
    1f10:	40 91 13 09 	lds	r20, 0x0913
    1f14:	50 91 14 09 	lds	r21, 0x0914
    1f18:	ba 01       	movw	r22, r20
    1f1a:	55 0f       	add	r21, r21
    1f1c:	88 0b       	sbc	r24, r24
    1f1e:	99 0b       	sbc	r25, r25
    1f20:	d0 d5       	rcall	.+2976   	; 0x2ac2 <__floatsisf>
    1f22:	9b 01       	movw	r18, r22
    1f24:	ac 01       	movw	r20, r24
    1f26:	c5 01       	movw	r24, r10
    1f28:	b4 01       	movw	r22, r8
    1f2a:	7f d6       	rcall	.+3326   	; 0x2c2a <__mulsf3>
    1f2c:	9b 01       	movw	r18, r22
    1f2e:	ac 01       	movw	r20, r24
	t_fine = (long signed int)(var1+var2);
    1f30:	c7 01       	movw	r24, r14
    1f32:	b6 01       	movw	r22, r12
    1f34:	c3 d4       	rcall	.+2438   	; 0x28bc <__addsf3>
    1f36:	6b 01       	movw	r12, r22
    1f38:	7c 01       	movw	r14, r24
    1f3a:	90 d5       	rcall	.+2848   	; 0x2a5c <__fixsfsi>
    1f3c:	60 93 f7 08 	sts	0x08F7, r22
    1f40:	70 93 f8 08 	sts	0x08F8, r23
    1f44:	80 93 f9 08 	sts	0x08F9, r24
    1f48:	90 93 fa 08 	sts	0x08FA, r25
	
	*T = (var1+var2)/5120.0;
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 ea       	ldi	r20, 0xA0	; 160
    1f52:	55 e4       	ldi	r21, 0x45	; 69
    1f54:	c7 01       	movw	r24, r14
    1f56:	b6 01       	movw	r22, r12
    1f58:	19 d5       	rcall	.+2610   	; 0x298c <__divsf3>
    1f5a:	6b 01       	movw	r12, r22
    1f5c:	7c 01       	movw	r14, r24
    1f5e:	68 83       	st	Y, r22
    1f60:	79 83       	std	Y+1, r23	; 0x01
    1f62:	8a 83       	std	Y+2, r24	; 0x02
    1f64:	9b 83       	std	Y+3, r25	; 0x03
	
	if(*T>100.0 || *T <(-100.0))return 0;
    1f66:	20 e0       	ldi	r18, 0x00	; 0
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	48 ec       	ldi	r20, 0xC8	; 200
    1f6c:	52 e4       	ldi	r21, 0x42	; 66
    1f6e:	59 d6       	rcall	.+3250   	; 0x2c22 <__gesf2>
    1f70:	18 16       	cp	r1, r24
    1f72:	6c f0       	brlt	.+26     	; 0x1f8e <BMP280_CalcTemperature+0x144>
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	48 ec       	ldi	r20, 0xC8	; 200
    1f7a:	52 ec       	ldi	r21, 0xC2	; 194
    1f7c:	c7 01       	movw	r24, r14
    1f7e:	b6 01       	movw	r22, r12
    1f80:	01 d5       	rcall	.+2562   	; 0x2984 <__cmpsf2>
    1f82:	88 1f       	adc	r24, r24
    1f84:	88 27       	eor	r24, r24
    1f86:	88 1f       	adc	r24, r24
    1f88:	91 e0       	ldi	r25, 0x01	; 1
    1f8a:	89 27       	eor	r24, r25
    1f8c:	01 c0       	rjmp	.+2      	; 0x1f90 <BMP280_CalcTemperature+0x146>
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
	
	return (1);
}
    1f90:	df 91       	pop	r29
    1f92:	cf 91       	pop	r28
    1f94:	ff 90       	pop	r15
    1f96:	ef 90       	pop	r14
    1f98:	df 90       	pop	r13
    1f9a:	cf 90       	pop	r12
    1f9c:	bf 90       	pop	r11
    1f9e:	af 90       	pop	r10
    1fa0:	9f 90       	pop	r9
    1fa2:	8f 90       	pop	r8
    1fa4:	7f 90       	pop	r7
    1fa6:	6f 90       	pop	r6
    1fa8:	5f 90       	pop	r5
    1faa:	4f 90       	pop	r4
    1fac:	08 95       	ret

00001fae <BMP280_CalcPressure>:
  @brief Calculates pressure
  @param[out] pointer to a place to store the pressure data
  @param[in] pointer to the uncalibrated pressure data
  @return status
*****************************************************************************/
char BMP280_CalcPressure(double *P,double *uP){
    1fae:	4f 92       	push	r4
    1fb0:	5f 92       	push	r5
    1fb2:	6f 92       	push	r6
    1fb4:	7f 92       	push	r7
    1fb6:	8f 92       	push	r8
    1fb8:	9f 92       	push	r9
    1fba:	af 92       	push	r10
    1fbc:	bf 92       	push	r11
    1fbe:	cf 92       	push	r12
    1fc0:	df 92       	push	r13
    1fc2:	ef 92       	push	r14
    1fc4:	ff 92       	push	r15
    1fc6:	0f 93       	push	r16
    1fc8:	1f 93       	push	r17
    1fca:	cf 93       	push	r28
    1fcc:	df 93       	push	r29
    1fce:	8c 01       	movw	r16, r24
    1fd0:	eb 01       	movw	r28, r22
	//char result;
	double var1 , var2 ;
	
	var1 = ((double)t_fine/2.0) - 64000.0;
    1fd2:	60 91 f7 08 	lds	r22, 0x08F7
    1fd6:	70 91 f8 08 	lds	r23, 0x08F8
    1fda:	80 91 f9 08 	lds	r24, 0x08F9
    1fde:	90 91 fa 08 	lds	r25, 0x08FA
    1fe2:	6f d5       	rcall	.+2782   	; 0x2ac2 <__floatsisf>
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
    1fea:	5f e3       	ldi	r21, 0x3F	; 63
    1fec:	1e d6       	rcall	.+3132   	; 0x2c2a <__mulsf3>
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	4a e7       	ldi	r20, 0x7A	; 122
    1ff4:	57 e4       	ldi	r21, 0x47	; 71
    1ff6:	61 d4       	rcall	.+2242   	; 0x28ba <__subsf3>
    1ff8:	6b 01       	movw	r12, r22
    1ffa:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
    1ffc:	60 91 09 09 	lds	r22, 0x0909
    2000:	70 91 0a 09 	lds	r23, 0x090A
    2004:	07 2e       	mov	r0, r23
    2006:	00 0c       	add	r0, r0
    2008:	88 0b       	sbc	r24, r24
    200a:	99 0b       	sbc	r25, r25
    200c:	5a d5       	rcall	.+2740   	; 0x2ac2 <__floatsisf>
    200e:	a7 01       	movw	r20, r14
    2010:	96 01       	movw	r18, r12
    2012:	0b d6       	rcall	.+3094   	; 0x2c2a <__mulsf3>
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	40 e0       	ldi	r20, 0x00	; 0
    201a:	58 e3       	ldi	r21, 0x38	; 56
    201c:	06 d6       	rcall	.+3084   	; 0x2c2a <__mulsf3>
    201e:	a7 01       	movw	r20, r14
    2020:	96 01       	movw	r18, r12
    2022:	03 d6       	rcall	.+3078   	; 0x2c2a <__mulsf3>
    2024:	4b 01       	movw	r8, r22
    2026:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
    2028:	60 91 0b 09 	lds	r22, 0x090B
    202c:	70 91 0c 09 	lds	r23, 0x090C
    2030:	07 2e       	mov	r0, r23
    2032:	00 0c       	add	r0, r0
    2034:	88 0b       	sbc	r24, r24
    2036:	99 0b       	sbc	r25, r25
    2038:	44 d5       	rcall	.+2696   	; 0x2ac2 <__floatsisf>
    203a:	a7 01       	movw	r20, r14
    203c:	96 01       	movw	r18, r12
    203e:	f5 d5       	rcall	.+3050   	; 0x2c2a <__mulsf3>
    2040:	9b 01       	movw	r18, r22
    2042:	ac 01       	movw	r20, r24
    2044:	3b d4       	rcall	.+2166   	; 0x28bc <__addsf3>
    2046:	a5 01       	movw	r20, r10
    2048:	94 01       	movw	r18, r8
    204a:	38 d4       	rcall	.+2160   	; 0x28bc <__addsf3>
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	40 e8       	ldi	r20, 0x80	; 128
    2052:	5e e3       	ldi	r21, 0x3E	; 62
    2054:	ea d5       	rcall	.+3028   	; 0x2c2a <__mulsf3>
    2056:	4b 01       	movw	r8, r22
    2058:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var1 = (((double)dig_P3) * var1 * var1/524288.0 + ((double)dig_P2) * var1) / 524288.0;
    205a:	60 91 0f 09 	lds	r22, 0x090F
    205e:	70 91 10 09 	lds	r23, 0x0910
    2062:	07 2e       	mov	r0, r23
    2064:	00 0c       	add	r0, r0
    2066:	88 0b       	sbc	r24, r24
    2068:	99 0b       	sbc	r25, r25
    206a:	2b d5       	rcall	.+2646   	; 0x2ac2 <__floatsisf>
    206c:	a7 01       	movw	r20, r14
    206e:	96 01       	movw	r18, r12
    2070:	dc d5       	rcall	.+3000   	; 0x2c2a <__mulsf3>
    2072:	a7 01       	movw	r20, r14
    2074:	96 01       	movw	r18, r12
    2076:	d9 d5       	rcall	.+2994   	; 0x2c2a <__mulsf3>
    2078:	20 e0       	ldi	r18, 0x00	; 0
    207a:	30 e0       	ldi	r19, 0x00	; 0
    207c:	40 e0       	ldi	r20, 0x00	; 0
    207e:	56 e3       	ldi	r21, 0x36	; 54
    2080:	d4 d5       	rcall	.+2984   	; 0x2c2a <__mulsf3>
    2082:	2b 01       	movw	r4, r22
    2084:	3c 01       	movw	r6, r24
    2086:	60 91 11 09 	lds	r22, 0x0911
    208a:	70 91 12 09 	lds	r23, 0x0912
    208e:	07 2e       	mov	r0, r23
    2090:	00 0c       	add	r0, r0
    2092:	88 0b       	sbc	r24, r24
    2094:	99 0b       	sbc	r25, r25
    2096:	15 d5       	rcall	.+2602   	; 0x2ac2 <__floatsisf>
    2098:	a7 01       	movw	r20, r14
    209a:	96 01       	movw	r18, r12
    209c:	c6 d5       	rcall	.+2956   	; 0x2c2a <__mulsf3>
    209e:	9b 01       	movw	r18, r22
    20a0:	ac 01       	movw	r20, r24
    20a2:	c3 01       	movw	r24, r6
    20a4:	b2 01       	movw	r22, r4
    20a6:	0a d4       	rcall	.+2068   	; 0x28bc <__addsf3>
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	40 e0       	ldi	r20, 0x00	; 0
    20ae:	56 e3       	ldi	r21, 0x36	; 54
    20b0:	bc d5       	rcall	.+2936   	; 0x2c2a <__mulsf3>
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e0       	ldi	r20, 0x00	; 0
    20b8:	57 e4       	ldi	r21, 0x47	; 71
    20ba:	00 d4       	rcall	.+2048   	; 0x28bc <__addsf3>
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e0       	ldi	r20, 0x00	; 0
    20c2:	58 e3       	ldi	r21, 0x38	; 56
    20c4:	b2 d5       	rcall	.+2916   	; 0x2c2a <__mulsf3>
    20c6:	6b 01       	movw	r12, r22
    20c8:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
    20ca:	28 81       	ld	r18, Y
    20cc:	39 81       	ldd	r19, Y+1	; 0x01
    20ce:	4a 81       	ldd	r20, Y+2	; 0x02
    20d0:	5b 81       	ldd	r21, Y+3	; 0x03
    20d2:	60 e0       	ldi	r22, 0x00	; 0
    20d4:	70 e0       	ldi	r23, 0x00	; 0
    20d6:	80 e8       	ldi	r24, 0x80	; 128
    20d8:	99 e4       	ldi	r25, 0x49	; 73
    20da:	ef d3       	rcall	.+2014   	; 0x28ba <__subsf3>
    20dc:	2b 01       	movw	r4, r22
    20de:	3c 01       	movw	r6, r24
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
    20e0:	60 91 0d 09 	lds	r22, 0x090D
    20e4:	70 91 0e 09 	lds	r23, 0x090E
    20e8:	07 2e       	mov	r0, r23
    20ea:	00 0c       	add	r0, r0
    20ec:	88 0b       	sbc	r24, r24
    20ee:	99 0b       	sbc	r25, r25
    20f0:	e8 d4       	rcall	.+2512   	; 0x2ac2 <__floatsisf>
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e8       	ldi	r20, 0x80	; 128
    20f8:	57 e4       	ldi	r21, 0x47	; 71
    20fa:	97 d5       	rcall	.+2862   	; 0x2c2a <__mulsf3>
    20fc:	9b 01       	movw	r18, r22
    20fe:	ac 01       	movw	r20, r24
    2100:	c5 01       	movw	r24, r10
    2102:	b4 01       	movw	r22, r8
    2104:	db d3       	rcall	.+1974   	; 0x28bc <__addsf3>
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	40 e8       	ldi	r20, 0x80	; 128
    210c:	59 e3       	ldi	r21, 0x39	; 57
    210e:	8d d5       	rcall	.+2842   	; 0x2c2a <__mulsf3>
    2110:	9b 01       	movw	r18, r22
    2112:	ac 01       	movw	r20, r24
    2114:	c3 01       	movw	r24, r6
    2116:	b2 01       	movw	r22, r4
    2118:	d0 d3       	rcall	.+1952   	; 0x28ba <__subsf3>
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e5       	ldi	r19, 0x50	; 80
    211e:	43 ec       	ldi	r20, 0xC3	; 195
    2120:	55 e4       	ldi	r21, 0x45	; 69
    2122:	83 d5       	rcall	.+2822   	; 0x2c2a <__mulsf3>
    2124:	4b 01       	movw	r8, r22
    2126:	5c 01       	movw	r10, r24
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
    2128:	80 91 01 09 	lds	r24, 0x0901
    212c:	90 91 02 09 	lds	r25, 0x0902
    2130:	bc 01       	movw	r22, r24
    2132:	80 e0       	ldi	r24, 0x00	; 0
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	c3 d4       	rcall	.+2438   	; 0x2abe <__floatunsisf>
    2138:	9b 01       	movw	r18, r22
    213a:	ac 01       	movw	r20, r24
    213c:	c7 01       	movw	r24, r14
    213e:	b6 01       	movw	r22, r12
    2140:	74 d5       	rcall	.+2792   	; 0x2c2a <__mulsf3>
    2142:	9b 01       	movw	r18, r22
    2144:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
    2146:	c5 01       	movw	r24, r10
    2148:	b4 01       	movw	r22, r8
    214a:	20 d4       	rcall	.+2112   	; 0x298c <__divsf3>
    214c:	6b 01       	movw	r12, r22
    214e:	7c 01       	movw	r14, r24
	//Serial.print("p = ");Serial.println(p,2);
	
	var1 = ((double)dig_P9)*p*p/2147483648.0;	//overflow
    2150:	60 91 03 09 	lds	r22, 0x0903
    2154:	70 91 04 09 	lds	r23, 0x0904
    2158:	07 2e       	mov	r0, r23
    215a:	00 0c       	add	r0, r0
    215c:	88 0b       	sbc	r24, r24
    215e:	99 0b       	sbc	r25, r25
    2160:	b0 d4       	rcall	.+2400   	; 0x2ac2 <__floatsisf>
    2162:	a7 01       	movw	r20, r14
    2164:	96 01       	movw	r18, r12
    2166:	61 d5       	rcall	.+2754   	; 0x2c2a <__mulsf3>
    2168:	a7 01       	movw	r20, r14
    216a:	96 01       	movw	r18, r12
    216c:	5e d5       	rcall	.+2748   	; 0x2c2a <__mulsf3>
    216e:	20 e0       	ldi	r18, 0x00	; 0
    2170:	30 e0       	ldi	r19, 0x00	; 0
    2172:	40 e0       	ldi	r20, 0x00	; 0
    2174:	50 e3       	ldi	r21, 0x30	; 48
    2176:	59 d5       	rcall	.+2738   	; 0x2c2a <__mulsf3>
    2178:	4b 01       	movw	r8, r22
    217a:	5c 01       	movw	r10, r24
	
	var2 = p*((double)dig_P8)/32768.0;
    217c:	80 91 05 09 	lds	r24, 0x0905
    2180:	90 91 06 09 	lds	r25, 0x0906
    2184:	bc 01       	movw	r22, r24
    2186:	99 0f       	add	r25, r25
    2188:	88 0b       	sbc	r24, r24
    218a:	99 0b       	sbc	r25, r25
    218c:	9a d4       	rcall	.+2356   	; 0x2ac2 <__floatsisf>
    218e:	a7 01       	movw	r20, r14
    2190:	96 01       	movw	r18, r12
    2192:	4b d5       	rcall	.+2710   	; 0x2c2a <__mulsf3>
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e0       	ldi	r20, 0x00	; 0
    219a:	58 e3       	ldi	r21, 0x38	; 56
    219c:	46 d5       	rcall	.+2700   	; 0x2c2a <__mulsf3>
    219e:	9b 01       	movw	r18, r22
    21a0:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	p = p + (var1+var2+((double)dig_P7))/16.0;
    21a2:	c5 01       	movw	r24, r10
    21a4:	b4 01       	movw	r22, r8
    21a6:	8a d3       	rcall	.+1812   	; 0x28bc <__addsf3>
    21a8:	4b 01       	movw	r8, r22
    21aa:	5c 01       	movw	r10, r24
    21ac:	80 91 07 09 	lds	r24, 0x0907
    21b0:	90 91 08 09 	lds	r25, 0x0908
    21b4:	bc 01       	movw	r22, r24
    21b6:	99 0f       	add	r25, r25
    21b8:	88 0b       	sbc	r24, r24
    21ba:	99 0b       	sbc	r25, r25
    21bc:	82 d4       	rcall	.+2308   	; 0x2ac2 <__floatsisf>
    21be:	9b 01       	movw	r18, r22
    21c0:	ac 01       	movw	r20, r24
    21c2:	c5 01       	movw	r24, r10
    21c4:	b4 01       	movw	r22, r8
    21c6:	7a d3       	rcall	.+1780   	; 0x28bc <__addsf3>
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	40 e8       	ldi	r20, 0x80	; 128
    21ce:	5d e3       	ldi	r21, 0x3D	; 61
    21d0:	2c d5       	rcall	.+2648   	; 0x2c2a <__mulsf3>
    21d2:	a7 01       	movw	r20, r14
    21d4:	96 01       	movw	r18, r12
    21d6:	72 d3       	rcall	.+1764   	; 0x28bc <__addsf3>
	//Serial.print("p = ");Serial.println(p,2);
	
	*P = p/100.0 ;
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	48 ec       	ldi	r20, 0xC8	; 200
    21de:	52 e4       	ldi	r21, 0x42	; 66
    21e0:	d5 d3       	rcall	.+1962   	; 0x298c <__divsf3>
    21e2:	6b 01       	movw	r12, r22
    21e4:	7c 01       	movw	r14, r24
    21e6:	f8 01       	movw	r30, r16
    21e8:	60 83       	st	Z, r22
    21ea:	71 83       	std	Z+1, r23	; 0x01
    21ec:	82 83       	std	Z+2, r24	; 0x02
    21ee:	93 83       	std	Z+3, r25	; 0x03
	
	if((*P>1200.0) || (*P < 800.0))return (0);
    21f0:	20 e0       	ldi	r18, 0x00	; 0
    21f2:	30 e0       	ldi	r19, 0x00	; 0
    21f4:	46 e9       	ldi	r20, 0x96	; 150
    21f6:	54 e4       	ldi	r21, 0x44	; 68
    21f8:	14 d5       	rcall	.+2600   	; 0x2c22 <__gesf2>
    21fa:	18 16       	cp	r1, r24
    21fc:	6c f0       	brlt	.+26     	; 0x2218 <BMP280_CalcPressure+0x26a>
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	48 e4       	ldi	r20, 0x48	; 72
    2204:	54 e4       	ldi	r21, 0x44	; 68
    2206:	c7 01       	movw	r24, r14
    2208:	b6 01       	movw	r22, r12
    220a:	bc d3       	rcall	.+1912   	; 0x2984 <__cmpsf2>
    220c:	88 1f       	adc	r24, r24
    220e:	88 27       	eor	r24, r24
    2210:	88 1f       	adc	r24, r24
    2212:	91 e0       	ldi	r25, 0x01	; 1
    2214:	89 27       	eor	r24, r25
    2216:	01 c0       	rjmp	.+2      	; 0x221a <BMP280_CalcPressure+0x26c>
    2218:	80 e0       	ldi	r24, 0x00	; 0
	return (1);
}
    221a:	df 91       	pop	r29
    221c:	cf 91       	pop	r28
    221e:	1f 91       	pop	r17
    2220:	0f 91       	pop	r16
    2222:	ff 90       	pop	r15
    2224:	ef 90       	pop	r14
    2226:	df 90       	pop	r13
    2228:	cf 90       	pop	r12
    222a:	bf 90       	pop	r11
    222c:	af 90       	pop	r10
    222e:	9f 90       	pop	r9
    2230:	8f 90       	pop	r8
    2232:	7f 90       	pop	r7
    2234:	6f 90       	pop	r6
    2236:	5f 90       	pop	r5
    2238:	4f 90       	pop	r4
    223a:	08 95       	ret

0000223c <BMP280_GetTemperatureAndPressure>:
  @brief Gets temperature and pressure
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetTemperatureAndPressure(double *T,double *P){
    223c:	ef 92       	push	r14
    223e:	ff 92       	push	r15
    2240:	0f 93       	push	r16
    2242:	1f 93       	push	r17
    2244:	cf 93       	push	r28
    2246:	df 93       	push	r29
    2248:	cd b7       	in	r28, 0x3d	; 61
    224a:	de b7       	in	r29, 0x3e	; 62
    224c:	28 97       	sbiw	r28, 0x08	; 8
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	8c 01       	movw	r16, r24
    225a:	7b 01       	movw	r14, r22
	double uP,uT ;
	char result = BMP280_GetUnPT(&uP,&uT);
    225c:	be 01       	movw	r22, r28
    225e:	6b 5f       	subi	r22, 0xFB	; 251
    2260:	7f 4f       	sbci	r23, 0xFF	; 255
    2262:	ce 01       	movw	r24, r28
    2264:	01 96       	adiw	r24, 0x01	; 1
    2266:	5d dd       	rcall	.-1350   	; 0x1d22 <BMP280_GetUnPT>
	if(result!=0){
    2268:	88 23       	and	r24, r24
    226a:	c1 f0       	breq	.+48     	; 0x229c <BMP280_GetTemperatureAndPressure+0x60>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
    226c:	be 01       	movw	r22, r28
    226e:	6b 5f       	subi	r22, 0xFB	; 251
    2270:	7f 4f       	sbci	r23, 0xFF	; 255
    2272:	c8 01       	movw	r24, r16
    2274:	ea dd       	rcall	.-1068   	; 0x1e4a <BMP280_CalcTemperature>
		if(result){
    2276:	88 23       	and	r24, r24
    2278:	61 f0       	breq	.+24     	; 0x2292 <BMP280_GetTemperatureAndPressure+0x56>
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
    227a:	be 01       	movw	r22, r28
    227c:	6f 5f       	subi	r22, 0xFF	; 255
    227e:	7f 4f       	sbci	r23, 0xFF	; 255
    2280:	c7 01       	movw	r24, r14
    2282:	95 de       	rcall	.-726    	; 0x1fae <BMP280_CalcPressure>
			if(result)return (1);
    2284:	81 11       	cpse	r24, r1
    2286:	0f c0       	rjmp	.+30     	; 0x22a6 <BMP280_GetTemperatureAndPressure+0x6a>
			else error = 3 ;	// pressure error ;
    2288:	83 e0       	ldi	r24, 0x03	; 3
    228a:	80 93 f6 08 	sts	0x08F6, r24
			return (0);
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	0b c0       	rjmp	.+22     	; 0x22a8 <BMP280_GetTemperatureAndPressure+0x6c>
		}else
		error = 2;	// temperature error ;
    2292:	82 e0       	ldi	r24, 0x02	; 2
    2294:	80 93 f6 08 	sts	0x08F6, r24
	}
	else
	error = 1;
	
	return (0);
    2298:	80 e0       	ldi	r24, 0x00	; 0
    229a:	06 c0       	rjmp	.+12     	; 0x22a8 <BMP280_GetTemperatureAndPressure+0x6c>
			return (0);
		}else
		error = 2;	// temperature error ;
	}
	else
	error = 1;
    229c:	81 e0       	ldi	r24, 0x01	; 1
    229e:	80 93 f6 08 	sts	0x08F6, r24
	
	return (0);
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	01 c0       	rjmp	.+2      	; 0x22a8 <BMP280_GetTemperatureAndPressure+0x6c>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
		if(result){
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
			if(result)return (1);
    22a6:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	error = 1;
	
	return (0);
}
    22a8:	28 96       	adiw	r28, 0x08	; 8
    22aa:	0f b6       	in	r0, 0x3f	; 63
    22ac:	f8 94       	cli
    22ae:	de bf       	out	0x3e, r29	; 62
    22b0:	0f be       	out	0x3f, r0	; 63
    22b2:	cd bf       	out	0x3d, r28	; 61
    22b4:	df 91       	pop	r29
    22b6:	cf 91       	pop	r28
    22b8:	1f 91       	pop	r17
    22ba:	0f 91       	pop	r16
    22bc:	ff 90       	pop	r15
    22be:	ef 90       	pop	r14
    22c0:	08 95       	ret

000022c2 <DemoStorage_Device_VTinit>:
};


void DemoStorage_Device_VTinit( DemoStorageDevice *this )
{
	this->abstract.device_vt = &DemoStorageDevice_abstract_vmt;
    22c2:	2e e6       	ldi	r18, 0x6E	; 110
    22c4:	32 e0       	ldi	r19, 0x02	; 2
    22c6:	fc 01       	movw	r30, r24
    22c8:	31 83       	std	Z+1, r19	; 0x01
    22ca:	20 83       	st	Z, r18
    22cc:	08 95       	ret

000022ce <DemoStorage_Device_init>:
}

int DemoStorage_Device_init( DemoStorageDevice *this )
{
	return 0;
}
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	08 95       	ret

000022d4 <DemoStorage_Device_reset>:

int DemoStorage_Device_reset( DemoStorageDevice *this )
{
	return 0;
}
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	08 95       	ret

000022da <DemoStorage_Device_getType>:

int DemoStorage_Device_getType( DemoStorageDevice *this )
{
	return TYPE_STORAGE_DEVICE;
}
    22da:	84 e0       	ldi	r24, 0x04	; 4
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	08 95       	ret

000022e0 <DemoStorage_Device_Tinit>:



void DemoStorage_Device_Tinit(DemoStorageDevice *this)
{
	this->vmt = &DemoStorageDevice_vmt;
    22e0:	26 e6       	ldi	r18, 0x66	; 102
    22e2:	32 e0       	ldi	r19, 0x02	; 2
    22e4:	fc 01       	movw	r30, r24
    22e6:	33 83       	std	Z+3, r19	; 0x03
    22e8:	22 83       	std	Z+2, r18	; 0x02
    22ea:	08 95       	ret

000022ec <DemoStorage_Device_Configure>:
}

int DemoStorage_Device_Configure(DemoStorageDevice *this)
{
	return 0;
}
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	90 e0       	ldi	r25, 0x00	; 0
    22f0:	08 95       	ret

000022f2 <DemoStorageget_CurDataUnit>:

DataUnit * DemoStorageget_CurDataUnit(DemoStorageDevice *this)
{
    22f2:	0f 93       	push	r16
    22f4:	1f 93       	push	r17
    22f6:	cf 93       	push	r28
    22f8:	df 93       	push	r29
    22fa:	ec 01       	movw	r28, r24
	int t = this->cur_pos;
    22fc:	0e 81       	ldd	r16, Y+6	; 0x06
    22fe:	1f 81       	ldd	r17, Y+7	; 0x07
	printf("Executre get store Device : %d\n",t);
    2300:	1f 93       	push	r17
    2302:	0f 93       	push	r16
    2304:	84 ec       	ldi	r24, 0xC4	; 196
    2306:	94 e0       	ldi	r25, 0x04	; 4
    2308:	9f 93       	push	r25
    230a:	8f 93       	push	r24
    230c:	0e 94 b0 1c 	call	0x3960	; 0x3960 <printf>
	this->cur_pos = this->cur_pos+1;
    2310:	8e 81       	ldd	r24, Y+6	; 0x06
    2312:	9f 81       	ldd	r25, Y+7	; 0x07
    2314:	01 96       	adiw	r24, 0x01	; 1
    2316:	9f 83       	std	Y+7, r25	; 0x07
    2318:	8e 83       	std	Y+6, r24	; 0x06
	DataUnit * data_t = this -> StoragesData;
	return (data_t + t);
    231a:	28 e3       	ldi	r18, 0x38	; 56
    231c:	20 9f       	mul	r18, r16
    231e:	c0 01       	movw	r24, r0
    2320:	21 9f       	mul	r18, r17
    2322:	90 0d       	add	r25, r0
    2324:	11 24       	eor	r1, r1
    2326:	28 85       	ldd	r18, Y+8	; 0x08
    2328:	39 85       	ldd	r19, Y+9	; 0x09
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
    2330:	0f 90       	pop	r0
    2332:	82 0f       	add	r24, r18
    2334:	93 1f       	adc	r25, r19
    2336:	df 91       	pop	r29
    2338:	cf 91       	pop	r28
    233a:	1f 91       	pop	r17
    233c:	0f 91       	pop	r16
    233e:	08 95       	ret

00002340 <DemoStorage_Device_Execute>:
{
	this->vmt = &DemoStorageDevice_vmt;
}

int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
    2340:	3f 92       	push	r3
    2342:	4f 92       	push	r4
    2344:	5f 92       	push	r5
    2346:	6f 92       	push	r6
    2348:	7f 92       	push	r7
    234a:	8f 92       	push	r8
    234c:	9f 92       	push	r9
    234e:	af 92       	push	r10
    2350:	bf 92       	push	r11
    2352:	cf 92       	push	r12
    2354:	df 92       	push	r13
    2356:	ef 92       	push	r14
    2358:	ff 92       	push	r15
    235a:	0f 93       	push	r16
    235c:	1f 93       	push	r17
    235e:	cf 93       	push	r28
    2360:	df 93       	push	r29
    2362:	cd b7       	in	r28, 0x3d	; 61
    2364:	de b7       	in	r29, 0x3e	; 62
    2366:	e8 97       	sbiw	r28, 0x38	; 56
    2368:	0f b6       	in	r0, 0x3f	; 63
    236a:	f8 94       	cli
    236c:	de bf       	out	0x3e, r29	; 62
    236e:	0f be       	out	0x3f, r0	; 63
    2370:	cd bf       	out	0x3d, r28	; 61
    2372:	3c 01       	movw	r6, r24
	printf("Executre Storage Device\n");
    2374:	84 ee       	ldi	r24, 0xE4	; 228
    2376:	94 e0       	ldi	r25, 0x04	; 4
    2378:	0e 94 c8 1c 	call	0x3990	; 0x3990 <puts>
	for( int i=0; i<this->cur_pos; i++)
    237c:	f3 01       	movw	r30, r6
    237e:	86 81       	ldd	r24, Z+6	; 0x06
    2380:	97 81       	ldd	r25, Z+7	; 0x07
    2382:	18 16       	cp	r1, r24
    2384:	19 06       	cpc	r1, r25
    2386:	0c f0       	brlt	.+2      	; 0x238a <DemoStorage_Device_Execute+0x4a>
    2388:	8b c0       	rjmp	.+278    	; 0x24a0 <DemoStorage_Device_Execute+0x160>
    238a:	81 2c       	mov	r8, r1
    238c:	91 2c       	mov	r9, r1
    238e:	a1 2c       	mov	r10, r1
    2390:	b1 2c       	mov	r11, r1
	{
		DataUnit temp = this->StoragesData[i];
    2392:	0f 2e       	mov	r0, r31
    2394:	f8 e3       	ldi	r31, 0x38	; 56
    2396:	3f 2e       	mov	r3, r31
    2398:	f0 2d       	mov	r31, r0
		printf("%04ld %02ld %02ld %02ld %02ld %02ld\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
    239a:	0f 2e       	mov	r0, r31
    239c:	fc ef       	ldi	r31, 0xFC	; 252
    239e:	4f 2e       	mov	r4, r31
    23a0:	f4 e0       	ldi	r31, 0x04	; 4
    23a2:	5f 2e       	mov	r5, r31
    23a4:	f0 2d       	mov	r31, r0
    23a6:	6e 01       	movw	r12, r28
    23a8:	f1 e1       	ldi	r31, 0x11	; 17
    23aa:	cf 0e       	add	r12, r31
    23ac:	d1 1c       	adc	r13, r1
		for( int j = 0; j < MAX_NUM_DATA; ++j )
			printf("%3.3f ",temp.data[j]);
    23ae:	0f 2e       	mov	r0, r31
    23b0:	f1 e2       	ldi	r31, 0x21	; 33
    23b2:	ef 2e       	mov	r14, r31
    23b4:	f5 e0       	ldi	r31, 0x05	; 5
    23b6:	ff 2e       	mov	r15, r31
    23b8:	f0 2d       	mov	r31, r0
int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
	{
		DataUnit temp = this->StoragesData[i];
    23ba:	f3 01       	movw	r30, r6
    23bc:	80 85       	ldd	r24, Z+8	; 0x08
    23be:	91 85       	ldd	r25, Z+9	; 0x09
    23c0:	88 0d       	add	r24, r8
    23c2:	99 1d       	adc	r25, r9
    23c4:	fc 01       	movw	r30, r24
    23c6:	de 01       	movw	r26, r28
    23c8:	11 96       	adiw	r26, 0x01	; 1
    23ca:	23 2d       	mov	r18, r3
    23cc:	01 90       	ld	r0, Z+
    23ce:	0d 92       	st	X+, r0
    23d0:	2a 95       	dec	r18
    23d2:	e1 f7       	brne	.-8      	; 0x23cc <DemoStorage_Device_Execute+0x8c>
		printf("%04ld %02ld %02ld %02ld %02ld %02ld\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
    23d4:	fc 01       	movw	r30, r24
    23d6:	23 8d       	ldd	r18, Z+27	; 0x1b
    23d8:	2f 93       	push	r18
    23da:	22 8d       	ldd	r18, Z+26	; 0x1a
    23dc:	2f 93       	push	r18
    23de:	21 8d       	ldd	r18, Z+25	; 0x19
    23e0:	2f 93       	push	r18
    23e2:	20 8d       	ldd	r18, Z+24	; 0x18
    23e4:	2f 93       	push	r18
    23e6:	27 8d       	ldd	r18, Z+31	; 0x1f
    23e8:	2f 93       	push	r18
    23ea:	26 8d       	ldd	r18, Z+30	; 0x1e
    23ec:	2f 93       	push	r18
    23ee:	25 8d       	ldd	r18, Z+29	; 0x1d
    23f0:	2f 93       	push	r18
    23f2:	24 8d       	ldd	r18, Z+28	; 0x1c
    23f4:	2f 93       	push	r18
    23f6:	23 a1       	ldd	r18, Z+35	; 0x23
    23f8:	2f 93       	push	r18
    23fa:	22 a1       	ldd	r18, Z+34	; 0x22
    23fc:	2f 93       	push	r18
    23fe:	21 a1       	ldd	r18, Z+33	; 0x21
    2400:	2f 93       	push	r18
    2402:	20 a1       	ldd	r18, Z+32	; 0x20
    2404:	2f 93       	push	r18
    2406:	27 a1       	ldd	r18, Z+39	; 0x27
    2408:	2f 93       	push	r18
    240a:	26 a1       	ldd	r18, Z+38	; 0x26
    240c:	2f 93       	push	r18
    240e:	25 a1       	ldd	r18, Z+37	; 0x25
    2410:	2f 93       	push	r18
    2412:	24 a1       	ldd	r18, Z+36	; 0x24
    2414:	2f 93       	push	r18
    2416:	23 a5       	ldd	r18, Z+43	; 0x2b
    2418:	2f 93       	push	r18
    241a:	22 a5       	ldd	r18, Z+42	; 0x2a
    241c:	2f 93       	push	r18
    241e:	21 a5       	ldd	r18, Z+41	; 0x29
    2420:	2f 93       	push	r18
    2422:	20 a5       	ldd	r18, Z+40	; 0x28
    2424:	2f 93       	push	r18
    2426:	27 a5       	ldd	r18, Z+47	; 0x2f
    2428:	2f 93       	push	r18
    242a:	26 a5       	ldd	r18, Z+46	; 0x2e
    242c:	2f 93       	push	r18
    242e:	25 a5       	ldd	r18, Z+45	; 0x2d
    2430:	2f 93       	push	r18
    2432:	84 a5       	ldd	r24, Z+44	; 0x2c
    2434:	8f 93       	push	r24
    2436:	5f 92       	push	r5
    2438:	4f 92       	push	r4
    243a:	0e 94 b0 1c 	call	0x3960	; 0x3960 <printf>
    243e:	8e 01       	movw	r16, r28
    2440:	0f 5f       	subi	r16, 0xFF	; 255
    2442:	1f 4f       	sbci	r17, 0xFF	; 255
    2444:	0f b6       	in	r0, 0x3f	; 63
    2446:	f8 94       	cli
    2448:	de bf       	out	0x3e, r29	; 62
    244a:	0f be       	out	0x3f, r0	; 63
    244c:	cd bf       	out	0x3d, r28	; 61
		for( int j = 0; j < MAX_NUM_DATA; ++j )
			printf("%3.3f ",temp.data[j]);
    244e:	f8 01       	movw	r30, r16
    2450:	80 81       	ld	r24, Z
    2452:	91 81       	ldd	r25, Z+1	; 0x01
    2454:	22 81       	ldd	r18, Z+2	; 0x02
    2456:	33 81       	ldd	r19, Z+3	; 0x03
    2458:	0c 5f       	subi	r16, 0xFC	; 252
    245a:	1f 4f       	sbci	r17, 0xFF	; 255
    245c:	3f 93       	push	r19
    245e:	2f 93       	push	r18
    2460:	9f 93       	push	r25
    2462:	8f 93       	push	r24
    2464:	ff 92       	push	r15
    2466:	ef 92       	push	r14
    2468:	0e 94 b0 1c 	call	0x3960	; 0x3960 <printf>
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
	{
		DataUnit temp = this->StoragesData[i];
		printf("%04ld %02ld %02ld %02ld %02ld %02ld\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
		for( int j = 0; j < MAX_NUM_DATA; ++j )
    246c:	0f 90       	pop	r0
    246e:	0f 90       	pop	r0
    2470:	0f 90       	pop	r0
    2472:	0f 90       	pop	r0
    2474:	0f 90       	pop	r0
    2476:	0f 90       	pop	r0
    2478:	0c 15       	cp	r16, r12
    247a:	1d 05       	cpc	r17, r13
    247c:	41 f7       	brne	.-48     	; 0x244e <DemoStorage_Device_Execute+0x10e>
			printf("%3.3f ",temp.data[j]);
		printf("\n");
    247e:	8a e0       	ldi	r24, 0x0A	; 10
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	0e 94 c3 1c 	call	0x3986	; 0x3986 <putchar>
}

int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
    2486:	ff ef       	ldi	r31, 0xFF	; 255
    2488:	af 1a       	sub	r10, r31
    248a:	bf 0a       	sbc	r11, r31
    248c:	88 e3       	ldi	r24, 0x38	; 56
    248e:	88 0e       	add	r8, r24
    2490:	91 1c       	adc	r9, r1
    2492:	f3 01       	movw	r30, r6
    2494:	86 81       	ldd	r24, Z+6	; 0x06
    2496:	97 81       	ldd	r25, Z+7	; 0x07
    2498:	a8 16       	cp	r10, r24
    249a:	b9 06       	cpc	r11, r25
    249c:	0c f4       	brge	.+2      	; 0x24a0 <DemoStorage_Device_Execute+0x160>
    249e:	8d cf       	rjmp	.-230    	; 0x23ba <DemoStorage_Device_Execute+0x7a>
		printf("%04ld %02ld %02ld %02ld %02ld %02ld\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
		for( int j = 0; j < MAX_NUM_DATA; ++j )
			printf("%3.3f ",temp.data[j]);
		printf("\n");
	}
	this->cur_pos = 0;
    24a0:	f3 01       	movw	r30, r6
    24a2:	17 82       	std	Z+7, r1	; 0x07
    24a4:	16 82       	std	Z+6, r1	; 0x06
	return 0;
}
    24a6:	80 e0       	ldi	r24, 0x00	; 0
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	e8 96       	adiw	r28, 0x38	; 56
    24ac:	0f b6       	in	r0, 0x3f	; 63
    24ae:	f8 94       	cli
    24b0:	de bf       	out	0x3e, r29	; 62
    24b2:	0f be       	out	0x3f, r0	; 63
    24b4:	cd bf       	out	0x3d, r28	; 61
    24b6:	df 91       	pop	r29
    24b8:	cf 91       	pop	r28
    24ba:	1f 91       	pop	r17
    24bc:	0f 91       	pop	r16
    24be:	ff 90       	pop	r15
    24c0:	ef 90       	pop	r14
    24c2:	df 90       	pop	r13
    24c4:	cf 90       	pop	r12
    24c6:	bf 90       	pop	r11
    24c8:	af 90       	pop	r10
    24ca:	9f 90       	pop	r9
    24cc:	8f 90       	pop	r8
    24ce:	7f 90       	pop	r7
    24d0:	6f 90       	pop	r6
    24d2:	5f 90       	pop	r5
    24d4:	4f 90       	pop	r4
    24d6:	3f 90       	pop	r3
    24d8:	08 95       	ret

000024da <New_DemoStorage_Device>:
{
	return TYPE_STORAGE_DEVICE;
}

DemoStorageDevice* New_DemoStorage_Device( int infonum )
{
    24da:	cf 92       	push	r12
    24dc:	df 92       	push	r13
    24de:	ef 92       	push	r14
    24e0:	ff 92       	push	r15
    24e2:	cf 93       	push	r28
    24e4:	df 93       	push	r29
    24e6:	7c 01       	movw	r14, r24
	DemoStorageDevice *p = malloc(sizeof(DemoStorageDevice));
    24e8:	8a e0       	ldi	r24, 0x0A	; 10
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	e6 d7       	rcall	.+4044   	; 0x34ba <malloc>
    24ee:	ec 01       	movw	r28, r24
	p->info = infonum;
    24f0:	fd 82       	std	Y+5, r15	; 0x05
    24f2:	ec 82       	std	Y+4, r14	; 0x04
};


void DemoStorage_Device_VTinit( DemoStorageDevice *this )
{
	this->abstract.device_vt = &DemoStorageDevice_abstract_vmt;
    24f4:	8e e6       	ldi	r24, 0x6E	; 110
    24f6:	92 e0       	ldi	r25, 0x02	; 2
    24f8:	99 83       	std	Y+1, r25	; 0x01
    24fa:	88 83       	st	Y, r24



void DemoStorage_Device_Tinit(DemoStorageDevice *this)
{
	this->vmt = &DemoStorageDevice_vmt;
    24fc:	86 e6       	ldi	r24, 0x66	; 102
    24fe:	92 e0       	ldi	r25, 0x02	; 2
    2500:	9b 83       	std	Y+3, r25	; 0x03
    2502:	8a 83       	std	Y+2, r24	; 0x02
{
	DemoStorageDevice *p = malloc(sizeof(DemoStorageDevice));
	p->info = infonum;
	DemoStorage_Device_VTinit(p);
	DemoStorage_Device_Tinit(p);
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
    2504:	88 e4       	ldi	r24, 0x48	; 72
    2506:	93 e0       	ldi	r25, 0x03	; 3
    2508:	d8 d7       	rcall	.+4016   	; 0x34ba <malloc>
    250a:	99 87       	std	Y+9, r25	; 0x09
    250c:	88 87       	std	Y+8, r24	; 0x08
    250e:	40 e0       	ldi	r20, 0x00	; 0
    2510:	50 e0       	ldi	r21, 0x00	; 0
{
	return TYPE_STORAGE_DEVICE;
}

DemoStorageDevice* New_DemoStorage_Device( int infonum )
{
    2512:	70 e0       	ldi	r23, 0x00	; 0
    2514:	60 e0       	ldi	r22, 0x00	; 0
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
		for( int j=0;j<MAX_NUM_DATA;j++)
		{
				p->StoragesData[i].data[j] = -9999; 
    2516:	0f 2e       	mov	r0, r31
    2518:	c1 2c       	mov	r12, r1
    251a:	fc e3       	ldi	r31, 0x3C	; 60
    251c:	df 2e       	mov	r13, r31
    251e:	fc e1       	ldi	r31, 0x1C	; 28
    2520:	ef 2e       	mov	r14, r31
    2522:	f6 ec       	ldi	r31, 0xC6	; 198
    2524:	ff 2e       	mov	r15, r31
    2526:	f0 2d       	mov	r31, r0
    2528:	2a c0       	rjmp	.+84     	; 0x257e <New_DemoStorage_Device+0xa4>
    252a:	e8 85       	ldd	r30, Y+8	; 0x08
    252c:	f9 85       	ldd	r31, Y+9	; 0x09
    252e:	e4 0f       	add	r30, r20
    2530:	f5 1f       	adc	r31, r21
    2532:	c9 01       	movw	r24, r18
    2534:	88 0f       	add	r24, r24
    2536:	99 1f       	adc	r25, r25
    2538:	88 0f       	add	r24, r24
    253a:	99 1f       	adc	r25, r25
    253c:	e8 0f       	add	r30, r24
    253e:	f9 1f       	adc	r31, r25
    2540:	c0 82       	st	Z, r12
    2542:	d1 82       	std	Z+1, r13	; 0x01
    2544:	e2 82       	std	Z+2, r14	; 0x02
    2546:	f3 82       	std	Z+3, r15	; 0x03
				p->StoragesData[i].data_tm.unix_msec = 0;
    2548:	e8 85       	ldd	r30, Y+8	; 0x08
    254a:	f9 85       	ldd	r31, Y+9	; 0x09
    254c:	e4 0f       	add	r30, r20
    254e:	f5 1f       	adc	r31, r21
    2550:	14 8a       	std	Z+20, r1	; 0x14
    2552:	15 8a       	std	Z+21, r1	; 0x15
    2554:	16 8a       	std	Z+22, r1	; 0x16
    2556:	17 8a       	std	Z+23, r1	; 0x17
				p->StoragesData[i].data_tm.unix_time = 0;
    2558:	e8 85       	ldd	r30, Y+8	; 0x08
    255a:	f9 85       	ldd	r31, Y+9	; 0x09
    255c:	e4 0f       	add	r30, r20
    255e:	f5 1f       	adc	r31, r21
    2560:	10 8a       	std	Z+16, r1	; 0x10
    2562:	11 8a       	std	Z+17, r1	; 0x11
    2564:	12 8a       	std	Z+18, r1	; 0x12
    2566:	13 8a       	std	Z+19, r1	; 0x13
	DemoStorage_Device_VTinit(p);
	DemoStorage_Device_Tinit(p);
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
		for( int j=0;j<MAX_NUM_DATA;j++)
    2568:	2f 5f       	subi	r18, 0xFF	; 255
    256a:	3f 4f       	sbci	r19, 0xFF	; 255
    256c:	24 30       	cpi	r18, 0x04	; 4
    256e:	31 05       	cpc	r19, r1
    2570:	e1 f6       	brne	.-72     	; 0x252a <New_DemoStorage_Device+0x50>
    2572:	48 5c       	subi	r20, 0xC8	; 200
    2574:	5f 4f       	sbci	r21, 0xFF	; 255
	p->info = infonum;
	DemoStorage_Device_VTinit(p);
	DemoStorage_Device_Tinit(p);
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
    2576:	48 34       	cpi	r20, 0x48	; 72
    2578:	83 e0       	ldi	r24, 0x03	; 3
    257a:	58 07       	cpc	r21, r24
    257c:	19 f0       	breq	.+6      	; 0x2584 <New_DemoStorage_Device+0xaa>
{
	return TYPE_STORAGE_DEVICE;
}

DemoStorageDevice* New_DemoStorage_Device( int infonum )
{
    257e:	27 2f       	mov	r18, r23
    2580:	36 2f       	mov	r19, r22
    2582:	d3 cf       	rjmp	.-90     	; 0x252a <New_DemoStorage_Device+0x50>
		{
				p->StoragesData[i].data[j] = -9999; 
				p->StoragesData[i].data_tm.unix_msec = 0;
				p->StoragesData[i].data_tm.unix_time = 0;
		}
	p->cur_pos = 0;
    2584:	1f 82       	std	Y+7, r1	; 0x07
    2586:	1e 82       	std	Y+6, r1	; 0x06

	return p;
}
    2588:	ce 01       	movw	r24, r28
    258a:	df 91       	pop	r29
    258c:	cf 91       	pop	r28
    258e:	ff 90       	pop	r15
    2590:	ef 90       	pop	r14
    2592:	df 90       	pop	r13
    2594:	cf 90       	pop	r12
    2596:	08 95       	ret

00002598 <LoadData_Device_VTinit>:
};


void LoadData_Device_VTinit( LoadDataDevice *this )
{
	this->abstract.device_vt = &LoadDataDevice_abstract_vmt;
    2598:	2c e7       	ldi	r18, 0x7C	; 124
    259a:	32 e0       	ldi	r19, 0x02	; 2
    259c:	fc 01       	movw	r30, r24
    259e:	31 83       	std	Z+1, r19	; 0x01
    25a0:	20 83       	st	Z, r18
    25a2:	08 95       	ret

000025a4 <LoadData_Device_init>:
}

int LoadData_Device_init( LoadDataDevice *this )
{
	return 0;
}
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	90 e0       	ldi	r25, 0x00	; 0
    25a8:	08 95       	ret

000025aa <LoadData_Device_reset>:

int LoadData_Device_reset( LoadDataDevice *this )
{
	return 0;
}
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	08 95       	ret

000025b0 <LoadData_Device_getType>:

int LoadData_Device_getType( LoadDataDevice *this )
{
	return TYPE_DEVICE;
}
    25b0:	85 e0       	ldi	r24, 0x05	; 5
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	08 95       	ret

000025b6 <LoadData_Device_Tinit>:



void LoadData_Device_Tinit(LoadDataDevice *this)
{
	this->vmt = &LoadDataDevice_vmt;
    25b6:	26 e7       	ldi	r18, 0x76	; 118
    25b8:	32 e0       	ldi	r19, 0x02	; 2
    25ba:	fc 01       	movw	r30, r24
    25bc:	33 83       	std	Z+3, r19	; 0x03
    25be:	22 83       	std	Z+2, r18	; 0x02
    25c0:	08 95       	ret

000025c2 <LoadData_Device_Configure>:
}

int LoadData_Device_Configure(LoadDataDevice *this)
{
	return 0;
}
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	08 95       	ret

000025c8 <LoadData_Device_Execute>:
{
	this->vmt = &LoadDataDevice_vmt;
}

int LoadData_Device_Execute(LoadDataDevice *this)
{
    25c8:	cf 93       	push	r28
    25ca:	df 93       	push	r29
    25cc:	ec 01       	movw	r28, r24
	if( this -> store_device == NULL)
    25ce:	8e 81       	ldd	r24, Y+6	; 0x06
    25d0:	9f 81       	ldd	r25, Y+7	; 0x07
    25d2:	89 2b       	or	r24, r25
    25d4:	21 f4       	brne	.+8      	; 0x25de <LoadData_Device_Execute+0x16>
		printf("NULL store device\n");
    25d6:	88 e2       	ldi	r24, 0x28	; 40
    25d8:	95 e0       	ldi	r25, 0x05	; 5
    25da:	0e 94 c8 1c 	call	0x3990	; 0x3990 <puts>
	cur_data = this->store_device->vmt->get_CurDataUnit(this->store_device);
    25de:	8e 81       	ldd	r24, Y+6	; 0x06
    25e0:	9f 81       	ldd	r25, Y+7	; 0x07
    25e2:	dc 01       	movw	r26, r24
    25e4:	12 96       	adiw	r26, 0x02	; 2
    25e6:	ed 91       	ld	r30, X+
    25e8:	fc 91       	ld	r31, X
    25ea:	13 97       	sbiw	r26, 0x03	; 3
    25ec:	06 80       	ldd	r0, Z+6	; 0x06
    25ee:	f7 81       	ldd	r31, Z+7	; 0x07
    25f0:	e0 2d       	mov	r30, r0
    25f2:	19 95       	eicall
    25f4:	90 93 df 05 	sts	0x05DF, r25
    25f8:	80 93 de 05 	sts	0x05DE, r24
	/*TODO : could init -999 here */
	
	
	if( cur_data != NULL)
    25fc:	89 2b       	or	r24, r25
    25fe:	09 f4       	brne	.+2      	; 0x2602 <LoadData_Device_Execute+0x3a>
    2600:	43 c0       	rjmp	.+134    	; 0x2688 <LoadData_Device_Execute+0xc0>
	{
		updateTime((uint32_t)TimeStamp,&cur_time);
    2602:	80 91 e0 05 	lds	r24, 0x05E0
    2606:	90 91 e1 05 	lds	r25, 0x05E1
    260a:	a0 91 e2 05 	lds	r26, 0x05E2
    260e:	b0 91 e3 05 	lds	r27, 0x05E3
    2612:	bc 01       	movw	r22, r24
    2614:	cd 01       	movw	r24, r26
    2616:	88 27       	eor	r24, r24
    2618:	99 27       	eor	r25, r25
    261a:	47 e1       	ldi	r20, 0x17	; 23
    261c:	59 e0       	ldi	r21, 0x09	; 9
    261e:	a5 d9       	rcall	.-3254   	; 0x196a <updateTime>
		cur_data->data_tm.unix_time = cur_time.unix_time;
    2620:	80 91 de 05 	lds	r24, 0x05DE
    2624:	90 91 df 05 	lds	r25, 0x05DF
    2628:	40 91 17 09 	lds	r20, 0x0917
    262c:	50 91 18 09 	lds	r21, 0x0918
    2630:	60 91 19 09 	lds	r22, 0x0919
    2634:	70 91 1a 09 	lds	r23, 0x091A
    2638:	fc 01       	movw	r30, r24
    263a:	40 8b       	std	Z+16, r20	; 0x10
    263c:	51 8b       	std	Z+17, r21	; 0x11
    263e:	62 8b       	std	Z+18, r22	; 0x12
    2640:	73 8b       	std	Z+19, r23	; 0x13
		calcDate( &(cur_data->data_tm));
    2642:	40 96       	adiw	r24, 0x10	; 16
    2644:	0e 94 1c 0b 	call	0x1638	; 0x1638 <calcDate>
		printf("time debug3 %ld\n",cur_data->data_tm.unix_time);
    2648:	e0 91 de 05 	lds	r30, 0x05DE
    264c:	f0 91 df 05 	lds	r31, 0x05DF
    2650:	83 89       	ldd	r24, Z+19	; 0x13
    2652:	8f 93       	push	r24
    2654:	82 89       	ldd	r24, Z+18	; 0x12
    2656:	8f 93       	push	r24
    2658:	81 89       	ldd	r24, Z+17	; 0x11
    265a:	8f 93       	push	r24
    265c:	80 89       	ldd	r24, Z+16	; 0x10
    265e:	8f 93       	push	r24
    2660:	8a e3       	ldi	r24, 0x3A	; 58
    2662:	95 e0       	ldi	r25, 0x05	; 5
    2664:	9f 93       	push	r25
    2666:	8f 93       	push	r24
    2668:	0e 94 b0 1c 	call	0x3960	; 0x3960 <printf>
		TimeStamp = 0;
    266c:	10 92 e0 05 	sts	0x05E0, r1
    2670:	10 92 e1 05 	sts	0x05E1, r1
    2674:	10 92 e2 05 	sts	0x05E2, r1
    2678:	10 92 e3 05 	sts	0x05E3, r1
    267c:	0f 90       	pop	r0
    267e:	0f 90       	pop	r0
    2680:	0f 90       	pop	r0
    2682:	0f 90       	pop	r0
    2684:	0f 90       	pop	r0
    2686:	0f 90       	pop	r0
	}
	return 0;
}
    2688:	80 e0       	ldi	r24, 0x00	; 0
    268a:	90 e0       	ldi	r25, 0x00	; 0
    268c:	df 91       	pop	r29
    268e:	cf 91       	pop	r28
    2690:	08 95       	ret

00002692 <New_LoadData_Device>:
{
	return TYPE_DEVICE;
}

LoadDataDevice* New_LoadData_Device( int infonum, DemoStorageDevice * ptr )
{
    2692:	0f 93       	push	r16
    2694:	1f 93       	push	r17
    2696:	cf 93       	push	r28
    2698:	df 93       	push	r29
    269a:	8c 01       	movw	r16, r24
    269c:	eb 01       	movw	r28, r22
	LoadDataDevice *p = malloc(sizeof(LoadDataDevice));
    269e:	88 e0       	ldi	r24, 0x08	; 8
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	0b d7       	rcall	.+3606   	; 0x34ba <malloc>
    26a4:	fc 01       	movw	r30, r24
	p->info = infonum;
    26a6:	15 83       	std	Z+5, r17	; 0x05
    26a8:	04 83       	std	Z+4, r16	; 0x04
	p->store_device = ptr;
    26aa:	d7 83       	std	Z+7, r29	; 0x07
    26ac:	c6 83       	std	Z+6, r28	; 0x06
};


void LoadData_Device_VTinit( LoadDataDevice *this )
{
	this->abstract.device_vt = &LoadDataDevice_abstract_vmt;
    26ae:	8c e7       	ldi	r24, 0x7C	; 124
    26b0:	92 e0       	ldi	r25, 0x02	; 2
    26b2:	91 83       	std	Z+1, r25	; 0x01
    26b4:	80 83       	st	Z, r24



void LoadData_Device_Tinit(LoadDataDevice *this)
{
	this->vmt = &LoadDataDevice_vmt;
    26b6:	86 e7       	ldi	r24, 0x76	; 118
    26b8:	92 e0       	ldi	r25, 0x02	; 2
    26ba:	93 83       	std	Z+3, r25	; 0x03
    26bc:	82 83       	std	Z+2, r24	; 0x02
	p->info = infonum;
	p->store_device = ptr;
	LoadData_Device_VTinit(p);
	LoadData_Device_Tinit(p);
	return p;
}
    26be:	cf 01       	movw	r24, r30
    26c0:	df 91       	pop	r29
    26c2:	cf 91       	pop	r28
    26c4:	1f 91       	pop	r17
    26c6:	0f 91       	pop	r16
    26c8:	08 95       	ret

000026ca <BMP280_FctnInit>:



void BMP280_FctnInit(BMP280Sensor *this)
{
	this->inherited.vmt = &BMP280_vmt;
    26ca:	2c e8       	ldi	r18, 0x8C	; 140
    26cc:	32 e0       	ldi	r19, 0x02	; 2
    26ce:	fc 01       	movw	r30, r24
    26d0:	35 87       	std	Z+13, r19	; 0x0d
    26d2:	24 87       	std	Z+12, r18	; 0x0c
    26d4:	08 95       	ret

000026d6 <BMP280_Configure>:
{
	// virtual function
	return 0;
	//printf("config success");
	//delay_us(100);
}
    26d6:	80 e0       	ldi	r24, 0x00	; 0
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	08 95       	ret

000026dc <BMP280_VTinit>:
	printf("BMP280_Error\n");
	return 0;
}
void BMP280_VTinit( BMP280Sensor* this)
{
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
    26dc:	24 e8       	ldi	r18, 0x84	; 132
    26de:	32 e0       	ldi	r19, 0x02	; 2
    26e0:	fc 01       	movw	r30, r24
    26e2:	31 83       	std	Z+1, r19	; 0x01
    26e4:	20 83       	st	Z, r18
    26e6:	08 95       	ret

000026e8 <BMP280_reset>:

int BMP280_reset( BMP280Sensor* this)
{
    // virtual function
    return 0;
}
    26e8:	80 e0       	ldi	r24, 0x00	; 0
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	08 95       	ret

000026ee <BMP280_getType>:

int BMP280_getType(BMP280Sensor* this)
{
    return TYPE_SENSOR;
}
    26ee:	83 e0       	ldi	r24, 0x03	; 3
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	08 95       	ret

000026f4 <BMP280_Error>:
	//delay_us(100);
}

int BMP280_Error(BMP280Sensor *this )
{
	printf("BMP280_Error\n");
    26f4:	8b e4       	ldi	r24, 0x4B	; 75
    26f6:	95 e0       	ldi	r25, 0x05	; 5
    26f8:	0e 94 c8 1c 	call	0x3990	; 0x3990 <puts>
	return 0;
}
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	08 95       	ret

00002702 <BMP280_init>:
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
}

int BMP280_init( BMP280Sensor* this)
{
    printf("BMP280 Sensor Init\n");
    2702:	88 e5       	ldi	r24, 0x58	; 88
    2704:	95 e0       	ldi	r25, 0x05	; 5
    2706:	0e 94 c8 1c 	call	0x3990	; 0x3990 <puts>
    return 0;
}
    270a:	80 e0       	ldi	r24, 0x00	; 0
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	08 95       	ret

00002710 <BMP280_Request>:
	//printf("config success");
	//delay_us(100);
}

int BMP280_Request(BMP280Sensor *this )
{
    2710:	cf 93       	push	r28
    2712:	df 93       	push	r29
	printf("BMP280 Request\n");
    2714:	8b e6       	ldi	r24, 0x6B	; 107
    2716:	95 e0       	ldi	r25, 0x05	; 5
    2718:	0e 94 c8 1c 	call	0x3990	; 0x3990 <puts>
	int Delay = BMP280_StartMeasurment();
    271c:	97 da       	rcall	.-2770   	; 0x1c4c <BMP280_StartMeasurment>
    271e:	c8 2f       	mov	r28, r24
    2720:	d0 e0       	ldi	r29, 0x00	; 0
	printf("\tWait for %d ms\n",Delay);
    2722:	1f 92       	push	r1
    2724:	8f 93       	push	r24
    2726:	8a e7       	ldi	r24, 0x7A	; 122
    2728:	95 e0       	ldi	r25, 0x05	; 5
    272a:	9f 93       	push	r25
    272c:	8f 93       	push	r24
    272e:	0e 94 b0 1c 	call	0x3960	; 0x3960 <printf>
	if( Delay == 0 )
    2732:	0f 90       	pop	r0
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	20 97       	sbiw	r28, 0x00	; 0
    273c:	19 f0       	breq	.+6      	; 0x2744 <BMP280_Request+0x34>
		return 0;
	else
		return ( 1 + Delay );
    273e:	ce 01       	movw	r24, r28
    2740:	01 96       	adiw	r24, 0x01	; 1
    2742:	02 c0       	rjmp	.+4      	; 0x2748 <BMP280_Request+0x38>
{
	printf("BMP280 Request\n");
	int Delay = BMP280_StartMeasurment();
	printf("\tWait for %d ms\n",Delay);
	if( Delay == 0 )
		return 0;
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	90 e0       	ldi	r25, 0x00	; 0
	else
		return ( 1 + Delay );
}
    2748:	df 91       	pop	r29
    274a:	cf 91       	pop	r28
    274c:	08 95       	ret

0000274e <BMP280_Collect>:

int BMP280_Collect(BMP280Sensor *this )
{
    274e:	ef 92       	push	r14
    2750:	ff 92       	push	r15
    2752:	0f 93       	push	r16
    2754:	1f 93       	push	r17
    2756:	cf 93       	push	r28
    2758:	df 93       	push	r29
    275a:	cd b7       	in	r28, 0x3d	; 61
    275c:	de b7       	in	r29, 0x3e	; 62
    275e:	28 97       	sbiw	r28, 0x08	; 8
    2760:	0f b6       	in	r0, 0x3f	; 63
    2762:	f8 94       	cli
    2764:	de bf       	out	0x3e, r29	; 62
    2766:	0f be       	out	0x3f, r0	; 63
    2768:	cd bf       	out	0x3d, r28	; 61
    276a:	8c 01       	movw	r16, r24
	printf("BMP280 Collect\n");
    276c:	8b e8       	ldi	r24, 0x8B	; 139
    276e:	95 e0       	ldi	r25, 0x05	; 5
    2770:	0e 94 c8 1c 	call	0x3990	; 0x3990 <puts>
	double T, P;
	BMP280_GetTemperatureAndPressure(&T,&P);
    2774:	be 01       	movw	r22, r28
    2776:	6b 5f       	subi	r22, 0xFB	; 251
    2778:	7f 4f       	sbci	r23, 0xFF	; 255
    277a:	ce 01       	movw	r24, r28
    277c:	01 96       	adiw	r24, 0x01	; 1
    277e:	5e dd       	rcall	.-1348   	; 0x223c <BMP280_GetTemperatureAndPressure>
	printf("\tTemperature = %.3f\n\tPressure = %.3f\n",T,P);
    2780:	88 85       	ldd	r24, Y+8	; 0x08
    2782:	8f 93       	push	r24
    2784:	8f 81       	ldd	r24, Y+7	; 0x07
    2786:	8f 93       	push	r24
    2788:	8e 81       	ldd	r24, Y+6	; 0x06
    278a:	8f 93       	push	r24
    278c:	8d 81       	ldd	r24, Y+5	; 0x05
    278e:	8f 93       	push	r24
    2790:	8c 81       	ldd	r24, Y+4	; 0x04
    2792:	8f 93       	push	r24
    2794:	8b 81       	ldd	r24, Y+3	; 0x03
    2796:	8f 93       	push	r24
    2798:	8a 81       	ldd	r24, Y+2	; 0x02
    279a:	8f 93       	push	r24
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	8f 93       	push	r24
    27a0:	8a e9       	ldi	r24, 0x9A	; 154
    27a2:	95 e0       	ldi	r25, 0x05	; 5
    27a4:	9f 93       	push	r25
    27a6:	8f 93       	push	r24
    27a8:	0e 94 b0 1c 	call	0x3960	; 0x3960 <printf>
	printf("\tgetStart = %d\n\tgetEnd = %d\n",this->inherited.getStartNum( &this->inherited ),this->inherited.getEndNum( &this->inherited ));
    27ac:	d8 01       	movw	r26, r16
    27ae:	1a 96       	adiw	r26, 0x0a	; 10
    27b0:	ed 91       	ld	r30, X+
    27b2:	fc 91       	ld	r31, X
    27b4:	1b 97       	sbiw	r26, 0x0b	; 11
    27b6:	c8 01       	movw	r24, r16
    27b8:	19 95       	eicall
    27ba:	f8 2e       	mov	r15, r24
    27bc:	e9 2e       	mov	r14, r25
    27be:	d8 01       	movw	r26, r16
    27c0:	18 96       	adiw	r26, 0x08	; 8
    27c2:	ed 91       	ld	r30, X+
    27c4:	fc 91       	ld	r31, X
    27c6:	19 97       	sbiw	r26, 0x09	; 9
    27c8:	c8 01       	movw	r24, r16
    27ca:	19 95       	eicall
    27cc:	ef 92       	push	r14
    27ce:	ff 92       	push	r15
    27d0:	9f 93       	push	r25
    27d2:	8f 93       	push	r24
    27d4:	80 ec       	ldi	r24, 0xC0	; 192
    27d6:	95 e0       	ldi	r25, 0x05	; 5
    27d8:	9f 93       	push	r25
    27da:	8f 93       	push	r24
    27dc:	0e 94 b0 1c 	call	0x3960	; 0x3960 <printf>
	/*
	for( int i = 0 ; i = this->inherited.getStartNum(); i < this->inherited.getEndNum() )
	{
	}
	*/
	cur_data->data[0] = T;
    27e0:	e0 91 de 05 	lds	r30, 0x05DE
    27e4:	f0 91 df 05 	lds	r31, 0x05DF
    27e8:	89 81       	ldd	r24, Y+1	; 0x01
    27ea:	9a 81       	ldd	r25, Y+2	; 0x02
    27ec:	ab 81       	ldd	r26, Y+3	; 0x03
    27ee:	bc 81       	ldd	r27, Y+4	; 0x04
    27f0:	80 83       	st	Z, r24
    27f2:	91 83       	std	Z+1, r25	; 0x01
    27f4:	a2 83       	std	Z+2, r26	; 0x02
    27f6:	b3 83       	std	Z+3, r27	; 0x03
	cur_data->data[1] = P; 
    27f8:	e0 91 de 05 	lds	r30, 0x05DE
    27fc:	f0 91 df 05 	lds	r31, 0x05DF
    2800:	8d 81       	ldd	r24, Y+5	; 0x05
    2802:	9e 81       	ldd	r25, Y+6	; 0x06
    2804:	af 81       	ldd	r26, Y+7	; 0x07
    2806:	b8 85       	ldd	r27, Y+8	; 0x08
    2808:	84 83       	std	Z+4, r24	; 0x04
    280a:	95 83       	std	Z+5, r25	; 0x05
    280c:	a6 83       	std	Z+6, r26	; 0x06
    280e:	b7 83       	std	Z+7, r27	; 0x07
	return 0;
    2810:	0f b6       	in	r0, 0x3f	; 63
    2812:	f8 94       	cli
    2814:	de bf       	out	0x3e, r29	; 62
    2816:	0f be       	out	0x3f, r0	; 63
    2818:	cd bf       	out	0x3d, r28	; 61
	//printf("collect success");
	//delay_us(100);
}
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	28 96       	adiw	r28, 0x08	; 8
    2820:	0f b6       	in	r0, 0x3f	; 63
    2822:	f8 94       	cli
    2824:	de bf       	out	0x3e, r29	; 62
    2826:	0f be       	out	0x3f, r0	; 63
    2828:	cd bf       	out	0x3d, r28	; 61
    282a:	df 91       	pop	r29
    282c:	cf 91       	pop	r28
    282e:	1f 91       	pop	r17
    2830:	0f 91       	pop	r16
    2832:	ff 90       	pop	r15
    2834:	ef 90       	pop	r14
    2836:	08 95       	ret

00002838 <New_BMP280_Sensor>:
    return TYPE_SENSOR;
}


BMP280Sensor* New_BMP280_Sensor( int num, int NumData )
{
    2838:	ef 92       	push	r14
    283a:	ff 92       	push	r15
    283c:	0f 93       	push	r16
    283e:	1f 93       	push	r17
    2840:	cf 93       	push	r28
    2842:	df 93       	push	r29
    2844:	7c 01       	movw	r14, r24
    2846:	8b 01       	movw	r16, r22
	BMP280Sensor *p = malloc(sizeof(BMP280Sensor));
    2848:	8e e0       	ldi	r24, 0x0E	; 14
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	36 d6       	rcall	.+3180   	; 0x34ba <malloc>
    284e:	ec 01       	movw	r28, r24
	p->inherited.getStartNum = fctn_getStartNum;
    2850:	83 ef       	ldi	r24, 0xF3	; 243
    2852:	9c e0       	ldi	r25, 0x0C	; 12
    2854:	99 87       	std	Y+9, r25	; 0x09
    2856:	88 87       	std	Y+8, r24	; 0x08
	p->inherited.getEndNum = fctn_getEndNum;
    2858:	87 ef       	ldi	r24, 0xF7	; 247
    285a:	9c e0       	ldi	r25, 0x0C	; 12
    285c:	9b 87       	std	Y+11, r25	; 0x0b
    285e:	8a 87       	std	Y+10, r24	; 0x0a
	printf("BMP280_Error\n");
	return 0;
}
void BMP280_VTinit( BMP280Sensor* this)
{
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
    2860:	84 e8       	ldi	r24, 0x84	; 132
    2862:	92 e0       	ldi	r25, 0x02	; 2
    2864:	99 83       	std	Y+1, r25	; 0x01
    2866:	88 83       	st	Y, r24



void BMP280_FctnInit(BMP280Sensor *this)
{
	this->inherited.vmt = &BMP280_vmt;
    2868:	8c e8       	ldi	r24, 0x8C	; 140
    286a:	92 e0       	ldi	r25, 0x02	; 2
    286c:	9d 87       	std	Y+13, r25	; 0x0d
    286e:	8c 87       	std	Y+12, r24	; 0x0c
	p->inherited.getEndNum = fctn_getEndNum;
    BMP280_VTinit( p );
    BMP280_FctnInit( p );
	
	
	p->inherited.test_num = num;
    2870:	fb 82       	std	Y+3, r15	; 0x03
    2872:	ea 82       	std	Y+2, r14	; 0x02
	p->inherited.NumOfData = NumData;
    2874:	1f 83       	std	Y+7, r17	; 0x07
    2876:	0e 83       	std	Y+6, r16	; 0x06
	p->inherited.StartNum = SensorDataCount;
    2878:	80 91 f5 0a 	lds	r24, 0x0AF5
    287c:	90 91 f6 0a 	lds	r25, 0x0AF6
    2880:	9d 83       	std	Y+5, r25	; 0x05
    2882:	8c 83       	std	Y+4, r24	; 0x04
	SensorDataCount += NumData;
    2884:	b8 01       	movw	r22, r16
    2886:	68 0f       	add	r22, r24
    2888:	79 1f       	adc	r23, r25
    288a:	70 93 f6 0a 	sts	0x0AF6, r23
    288e:	60 93 f5 0a 	sts	0x0AF5, r22
	printf("SensorDataCount %d\n",SensorDataCount);
    2892:	7f 93       	push	r23
    2894:	6f 93       	push	r22
    2896:	87 ed       	ldi	r24, 0xD7	; 215
    2898:	92 e0       	ldi	r25, 0x02	; 2
    289a:	9f 93       	push	r25
    289c:	8f 93       	push	r24
    289e:	0e 94 b0 1c 	call	0x3960	; 0x3960 <printf>
	//printf("get start %d end %d\n",p->inherited.getStartNum(& (p->inherited) ),p->inherited.getEndNum(& (p->inherited)));
	
	return p;
    28a2:	0f 90       	pop	r0
    28a4:	0f 90       	pop	r0
    28a6:	0f 90       	pop	r0
    28a8:	0f 90       	pop	r0
    28aa:	ce 01       	movw	r24, r28
    28ac:	df 91       	pop	r29
    28ae:	cf 91       	pop	r28
    28b0:	1f 91       	pop	r17
    28b2:	0f 91       	pop	r16
    28b4:	ff 90       	pop	r15
    28b6:	ef 90       	pop	r14
    28b8:	08 95       	ret

000028ba <__subsf3>:
    28ba:	50 58       	subi	r21, 0x80	; 128

000028bc <__addsf3>:
    28bc:	bb 27       	eor	r27, r27
    28be:	aa 27       	eor	r26, r26
    28c0:	0e d0       	rcall	.+28     	; 0x28de <__addsf3x>
    28c2:	75 c1       	rjmp	.+746    	; 0x2bae <__fp_round>
    28c4:	66 d1       	rcall	.+716    	; 0x2b92 <__fp_pscA>
    28c6:	30 f0       	brcs	.+12     	; 0x28d4 <__addsf3+0x18>
    28c8:	6b d1       	rcall	.+726    	; 0x2ba0 <__fp_pscB>
    28ca:	20 f0       	brcs	.+8      	; 0x28d4 <__addsf3+0x18>
    28cc:	31 f4       	brne	.+12     	; 0x28da <__addsf3+0x1e>
    28ce:	9f 3f       	cpi	r25, 0xFF	; 255
    28d0:	11 f4       	brne	.+4      	; 0x28d6 <__addsf3+0x1a>
    28d2:	1e f4       	brtc	.+6      	; 0x28da <__addsf3+0x1e>
    28d4:	5b c1       	rjmp	.+694    	; 0x2b8c <__fp_nan>
    28d6:	0e f4       	brtc	.+2      	; 0x28da <__addsf3+0x1e>
    28d8:	e0 95       	com	r30
    28da:	e7 fb       	bst	r30, 7
    28dc:	51 c1       	rjmp	.+674    	; 0x2b80 <__fp_inf>

000028de <__addsf3x>:
    28de:	e9 2f       	mov	r30, r25
    28e0:	77 d1       	rcall	.+750    	; 0x2bd0 <__fp_split3>
    28e2:	80 f3       	brcs	.-32     	; 0x28c4 <__addsf3+0x8>
    28e4:	ba 17       	cp	r27, r26
    28e6:	62 07       	cpc	r22, r18
    28e8:	73 07       	cpc	r23, r19
    28ea:	84 07       	cpc	r24, r20
    28ec:	95 07       	cpc	r25, r21
    28ee:	18 f0       	brcs	.+6      	; 0x28f6 <__addsf3x+0x18>
    28f0:	71 f4       	brne	.+28     	; 0x290e <__addsf3x+0x30>
    28f2:	9e f5       	brtc	.+102    	; 0x295a <__addsf3x+0x7c>
    28f4:	8f c1       	rjmp	.+798    	; 0x2c14 <__fp_zero>
    28f6:	0e f4       	brtc	.+2      	; 0x28fa <__addsf3x+0x1c>
    28f8:	e0 95       	com	r30
    28fa:	0b 2e       	mov	r0, r27
    28fc:	ba 2f       	mov	r27, r26
    28fe:	a0 2d       	mov	r26, r0
    2900:	0b 01       	movw	r0, r22
    2902:	b9 01       	movw	r22, r18
    2904:	90 01       	movw	r18, r0
    2906:	0c 01       	movw	r0, r24
    2908:	ca 01       	movw	r24, r20
    290a:	a0 01       	movw	r20, r0
    290c:	11 24       	eor	r1, r1
    290e:	ff 27       	eor	r31, r31
    2910:	59 1b       	sub	r21, r25
    2912:	99 f0       	breq	.+38     	; 0x293a <__addsf3x+0x5c>
    2914:	59 3f       	cpi	r21, 0xF9	; 249
    2916:	50 f4       	brcc	.+20     	; 0x292c <__addsf3x+0x4e>
    2918:	50 3e       	cpi	r21, 0xE0	; 224
    291a:	68 f1       	brcs	.+90     	; 0x2976 <__addsf3x+0x98>
    291c:	1a 16       	cp	r1, r26
    291e:	f0 40       	sbci	r31, 0x00	; 0
    2920:	a2 2f       	mov	r26, r18
    2922:	23 2f       	mov	r18, r19
    2924:	34 2f       	mov	r19, r20
    2926:	44 27       	eor	r20, r20
    2928:	58 5f       	subi	r21, 0xF8	; 248
    292a:	f3 cf       	rjmp	.-26     	; 0x2912 <__addsf3x+0x34>
    292c:	46 95       	lsr	r20
    292e:	37 95       	ror	r19
    2930:	27 95       	ror	r18
    2932:	a7 95       	ror	r26
    2934:	f0 40       	sbci	r31, 0x00	; 0
    2936:	53 95       	inc	r21
    2938:	c9 f7       	brne	.-14     	; 0x292c <__addsf3x+0x4e>
    293a:	7e f4       	brtc	.+30     	; 0x295a <__addsf3x+0x7c>
    293c:	1f 16       	cp	r1, r31
    293e:	ba 0b       	sbc	r27, r26
    2940:	62 0b       	sbc	r22, r18
    2942:	73 0b       	sbc	r23, r19
    2944:	84 0b       	sbc	r24, r20
    2946:	ba f0       	brmi	.+46     	; 0x2976 <__addsf3x+0x98>
    2948:	91 50       	subi	r25, 0x01	; 1
    294a:	a1 f0       	breq	.+40     	; 0x2974 <__addsf3x+0x96>
    294c:	ff 0f       	add	r31, r31
    294e:	bb 1f       	adc	r27, r27
    2950:	66 1f       	adc	r22, r22
    2952:	77 1f       	adc	r23, r23
    2954:	88 1f       	adc	r24, r24
    2956:	c2 f7       	brpl	.-16     	; 0x2948 <__addsf3x+0x6a>
    2958:	0e c0       	rjmp	.+28     	; 0x2976 <__addsf3x+0x98>
    295a:	ba 0f       	add	r27, r26
    295c:	62 1f       	adc	r22, r18
    295e:	73 1f       	adc	r23, r19
    2960:	84 1f       	adc	r24, r20
    2962:	48 f4       	brcc	.+18     	; 0x2976 <__addsf3x+0x98>
    2964:	87 95       	ror	r24
    2966:	77 95       	ror	r23
    2968:	67 95       	ror	r22
    296a:	b7 95       	ror	r27
    296c:	f7 95       	ror	r31
    296e:	9e 3f       	cpi	r25, 0xFE	; 254
    2970:	08 f0       	brcs	.+2      	; 0x2974 <__addsf3x+0x96>
    2972:	b3 cf       	rjmp	.-154    	; 0x28da <__addsf3+0x1e>
    2974:	93 95       	inc	r25
    2976:	88 0f       	add	r24, r24
    2978:	08 f0       	brcs	.+2      	; 0x297c <__addsf3x+0x9e>
    297a:	99 27       	eor	r25, r25
    297c:	ee 0f       	add	r30, r30
    297e:	97 95       	ror	r25
    2980:	87 95       	ror	r24
    2982:	08 95       	ret

00002984 <__cmpsf2>:
    2984:	d9 d0       	rcall	.+434    	; 0x2b38 <__fp_cmp>
    2986:	08 f4       	brcc	.+2      	; 0x298a <__cmpsf2+0x6>
    2988:	81 e0       	ldi	r24, 0x01	; 1
    298a:	08 95       	ret

0000298c <__divsf3>:
    298c:	0c d0       	rcall	.+24     	; 0x29a6 <__divsf3x>
    298e:	0f c1       	rjmp	.+542    	; 0x2bae <__fp_round>
    2990:	07 d1       	rcall	.+526    	; 0x2ba0 <__fp_pscB>
    2992:	40 f0       	brcs	.+16     	; 0x29a4 <__divsf3+0x18>
    2994:	fe d0       	rcall	.+508    	; 0x2b92 <__fp_pscA>
    2996:	30 f0       	brcs	.+12     	; 0x29a4 <__divsf3+0x18>
    2998:	21 f4       	brne	.+8      	; 0x29a2 <__divsf3+0x16>
    299a:	5f 3f       	cpi	r21, 0xFF	; 255
    299c:	19 f0       	breq	.+6      	; 0x29a4 <__divsf3+0x18>
    299e:	f0 c0       	rjmp	.+480    	; 0x2b80 <__fp_inf>
    29a0:	51 11       	cpse	r21, r1
    29a2:	39 c1       	rjmp	.+626    	; 0x2c16 <__fp_szero>
    29a4:	f3 c0       	rjmp	.+486    	; 0x2b8c <__fp_nan>

000029a6 <__divsf3x>:
    29a6:	14 d1       	rcall	.+552    	; 0x2bd0 <__fp_split3>
    29a8:	98 f3       	brcs	.-26     	; 0x2990 <__divsf3+0x4>

000029aa <__divsf3_pse>:
    29aa:	99 23       	and	r25, r25
    29ac:	c9 f3       	breq	.-14     	; 0x29a0 <__divsf3+0x14>
    29ae:	55 23       	and	r21, r21
    29b0:	b1 f3       	breq	.-20     	; 0x299e <__divsf3+0x12>
    29b2:	95 1b       	sub	r25, r21
    29b4:	55 0b       	sbc	r21, r21
    29b6:	bb 27       	eor	r27, r27
    29b8:	aa 27       	eor	r26, r26
    29ba:	62 17       	cp	r22, r18
    29bc:	73 07       	cpc	r23, r19
    29be:	84 07       	cpc	r24, r20
    29c0:	38 f0       	brcs	.+14     	; 0x29d0 <__divsf3_pse+0x26>
    29c2:	9f 5f       	subi	r25, 0xFF	; 255
    29c4:	5f 4f       	sbci	r21, 0xFF	; 255
    29c6:	22 0f       	add	r18, r18
    29c8:	33 1f       	adc	r19, r19
    29ca:	44 1f       	adc	r20, r20
    29cc:	aa 1f       	adc	r26, r26
    29ce:	a9 f3       	breq	.-22     	; 0x29ba <__divsf3_pse+0x10>
    29d0:	33 d0       	rcall	.+102    	; 0x2a38 <__divsf3_pse+0x8e>
    29d2:	0e 2e       	mov	r0, r30
    29d4:	3a f0       	brmi	.+14     	; 0x29e4 <__divsf3_pse+0x3a>
    29d6:	e0 e8       	ldi	r30, 0x80	; 128
    29d8:	30 d0       	rcall	.+96     	; 0x2a3a <__divsf3_pse+0x90>
    29da:	91 50       	subi	r25, 0x01	; 1
    29dc:	50 40       	sbci	r21, 0x00	; 0
    29de:	e6 95       	lsr	r30
    29e0:	00 1c       	adc	r0, r0
    29e2:	ca f7       	brpl	.-14     	; 0x29d6 <__divsf3_pse+0x2c>
    29e4:	29 d0       	rcall	.+82     	; 0x2a38 <__divsf3_pse+0x8e>
    29e6:	fe 2f       	mov	r31, r30
    29e8:	27 d0       	rcall	.+78     	; 0x2a38 <__divsf3_pse+0x8e>
    29ea:	66 0f       	add	r22, r22
    29ec:	77 1f       	adc	r23, r23
    29ee:	88 1f       	adc	r24, r24
    29f0:	bb 1f       	adc	r27, r27
    29f2:	26 17       	cp	r18, r22
    29f4:	37 07       	cpc	r19, r23
    29f6:	48 07       	cpc	r20, r24
    29f8:	ab 07       	cpc	r26, r27
    29fa:	b0 e8       	ldi	r27, 0x80	; 128
    29fc:	09 f0       	breq	.+2      	; 0x2a00 <__divsf3_pse+0x56>
    29fe:	bb 0b       	sbc	r27, r27
    2a00:	80 2d       	mov	r24, r0
    2a02:	bf 01       	movw	r22, r30
    2a04:	ff 27       	eor	r31, r31
    2a06:	93 58       	subi	r25, 0x83	; 131
    2a08:	5f 4f       	sbci	r21, 0xFF	; 255
    2a0a:	2a f0       	brmi	.+10     	; 0x2a16 <__divsf3_pse+0x6c>
    2a0c:	9e 3f       	cpi	r25, 0xFE	; 254
    2a0e:	51 05       	cpc	r21, r1
    2a10:	68 f0       	brcs	.+26     	; 0x2a2c <__divsf3_pse+0x82>
    2a12:	b6 c0       	rjmp	.+364    	; 0x2b80 <__fp_inf>
    2a14:	00 c1       	rjmp	.+512    	; 0x2c16 <__fp_szero>
    2a16:	5f 3f       	cpi	r21, 0xFF	; 255
    2a18:	ec f3       	brlt	.-6      	; 0x2a14 <__divsf3_pse+0x6a>
    2a1a:	98 3e       	cpi	r25, 0xE8	; 232
    2a1c:	dc f3       	brlt	.-10     	; 0x2a14 <__divsf3_pse+0x6a>
    2a1e:	86 95       	lsr	r24
    2a20:	77 95       	ror	r23
    2a22:	67 95       	ror	r22
    2a24:	b7 95       	ror	r27
    2a26:	f7 95       	ror	r31
    2a28:	9f 5f       	subi	r25, 0xFF	; 255
    2a2a:	c9 f7       	brne	.-14     	; 0x2a1e <__divsf3_pse+0x74>
    2a2c:	88 0f       	add	r24, r24
    2a2e:	91 1d       	adc	r25, r1
    2a30:	96 95       	lsr	r25
    2a32:	87 95       	ror	r24
    2a34:	97 f9       	bld	r25, 7
    2a36:	08 95       	ret
    2a38:	e1 e0       	ldi	r30, 0x01	; 1
    2a3a:	66 0f       	add	r22, r22
    2a3c:	77 1f       	adc	r23, r23
    2a3e:	88 1f       	adc	r24, r24
    2a40:	bb 1f       	adc	r27, r27
    2a42:	62 17       	cp	r22, r18
    2a44:	73 07       	cpc	r23, r19
    2a46:	84 07       	cpc	r24, r20
    2a48:	ba 07       	cpc	r27, r26
    2a4a:	20 f0       	brcs	.+8      	; 0x2a54 <__divsf3_pse+0xaa>
    2a4c:	62 1b       	sub	r22, r18
    2a4e:	73 0b       	sbc	r23, r19
    2a50:	84 0b       	sbc	r24, r20
    2a52:	ba 0b       	sbc	r27, r26
    2a54:	ee 1f       	adc	r30, r30
    2a56:	88 f7       	brcc	.-30     	; 0x2a3a <__divsf3_pse+0x90>
    2a58:	e0 95       	com	r30
    2a5a:	08 95       	ret

00002a5c <__fixsfsi>:
    2a5c:	04 d0       	rcall	.+8      	; 0x2a66 <__fixunssfsi>
    2a5e:	68 94       	set
    2a60:	b1 11       	cpse	r27, r1
    2a62:	d9 c0       	rjmp	.+434    	; 0x2c16 <__fp_szero>
    2a64:	08 95       	ret

00002a66 <__fixunssfsi>:
    2a66:	bc d0       	rcall	.+376    	; 0x2be0 <__fp_splitA>
    2a68:	88 f0       	brcs	.+34     	; 0x2a8c <__fixunssfsi+0x26>
    2a6a:	9f 57       	subi	r25, 0x7F	; 127
    2a6c:	90 f0       	brcs	.+36     	; 0x2a92 <__fixunssfsi+0x2c>
    2a6e:	b9 2f       	mov	r27, r25
    2a70:	99 27       	eor	r25, r25
    2a72:	b7 51       	subi	r27, 0x17	; 23
    2a74:	a0 f0       	brcs	.+40     	; 0x2a9e <__fixunssfsi+0x38>
    2a76:	d1 f0       	breq	.+52     	; 0x2aac <__fixunssfsi+0x46>
    2a78:	66 0f       	add	r22, r22
    2a7a:	77 1f       	adc	r23, r23
    2a7c:	88 1f       	adc	r24, r24
    2a7e:	99 1f       	adc	r25, r25
    2a80:	1a f0       	brmi	.+6      	; 0x2a88 <__fixunssfsi+0x22>
    2a82:	ba 95       	dec	r27
    2a84:	c9 f7       	brne	.-14     	; 0x2a78 <__fixunssfsi+0x12>
    2a86:	12 c0       	rjmp	.+36     	; 0x2aac <__fixunssfsi+0x46>
    2a88:	b1 30       	cpi	r27, 0x01	; 1
    2a8a:	81 f0       	breq	.+32     	; 0x2aac <__fixunssfsi+0x46>
    2a8c:	c3 d0       	rcall	.+390    	; 0x2c14 <__fp_zero>
    2a8e:	b1 e0       	ldi	r27, 0x01	; 1
    2a90:	08 95       	ret
    2a92:	c0 c0       	rjmp	.+384    	; 0x2c14 <__fp_zero>
    2a94:	67 2f       	mov	r22, r23
    2a96:	78 2f       	mov	r23, r24
    2a98:	88 27       	eor	r24, r24
    2a9a:	b8 5f       	subi	r27, 0xF8	; 248
    2a9c:	39 f0       	breq	.+14     	; 0x2aac <__fixunssfsi+0x46>
    2a9e:	b9 3f       	cpi	r27, 0xF9	; 249
    2aa0:	cc f3       	brlt	.-14     	; 0x2a94 <__fixunssfsi+0x2e>
    2aa2:	86 95       	lsr	r24
    2aa4:	77 95       	ror	r23
    2aa6:	67 95       	ror	r22
    2aa8:	b3 95       	inc	r27
    2aaa:	d9 f7       	brne	.-10     	; 0x2aa2 <__fixunssfsi+0x3c>
    2aac:	3e f4       	brtc	.+14     	; 0x2abc <__fixunssfsi+0x56>
    2aae:	90 95       	com	r25
    2ab0:	80 95       	com	r24
    2ab2:	70 95       	com	r23
    2ab4:	61 95       	neg	r22
    2ab6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ab8:	8f 4f       	sbci	r24, 0xFF	; 255
    2aba:	9f 4f       	sbci	r25, 0xFF	; 255
    2abc:	08 95       	ret

00002abe <__floatunsisf>:
    2abe:	e8 94       	clt
    2ac0:	09 c0       	rjmp	.+18     	; 0x2ad4 <__floatsisf+0x12>

00002ac2 <__floatsisf>:
    2ac2:	97 fb       	bst	r25, 7
    2ac4:	3e f4       	brtc	.+14     	; 0x2ad4 <__floatsisf+0x12>
    2ac6:	90 95       	com	r25
    2ac8:	80 95       	com	r24
    2aca:	70 95       	com	r23
    2acc:	61 95       	neg	r22
    2ace:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad0:	8f 4f       	sbci	r24, 0xFF	; 255
    2ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad4:	99 23       	and	r25, r25
    2ad6:	a9 f0       	breq	.+42     	; 0x2b02 <__floatsisf+0x40>
    2ad8:	f9 2f       	mov	r31, r25
    2ada:	96 e9       	ldi	r25, 0x96	; 150
    2adc:	bb 27       	eor	r27, r27
    2ade:	93 95       	inc	r25
    2ae0:	f6 95       	lsr	r31
    2ae2:	87 95       	ror	r24
    2ae4:	77 95       	ror	r23
    2ae6:	67 95       	ror	r22
    2ae8:	b7 95       	ror	r27
    2aea:	f1 11       	cpse	r31, r1
    2aec:	f8 cf       	rjmp	.-16     	; 0x2ade <__floatsisf+0x1c>
    2aee:	fa f4       	brpl	.+62     	; 0x2b2e <__floatsisf+0x6c>
    2af0:	bb 0f       	add	r27, r27
    2af2:	11 f4       	brne	.+4      	; 0x2af8 <__floatsisf+0x36>
    2af4:	60 ff       	sbrs	r22, 0
    2af6:	1b c0       	rjmp	.+54     	; 0x2b2e <__floatsisf+0x6c>
    2af8:	6f 5f       	subi	r22, 0xFF	; 255
    2afa:	7f 4f       	sbci	r23, 0xFF	; 255
    2afc:	8f 4f       	sbci	r24, 0xFF	; 255
    2afe:	9f 4f       	sbci	r25, 0xFF	; 255
    2b00:	16 c0       	rjmp	.+44     	; 0x2b2e <__floatsisf+0x6c>
    2b02:	88 23       	and	r24, r24
    2b04:	11 f0       	breq	.+4      	; 0x2b0a <__floatsisf+0x48>
    2b06:	96 e9       	ldi	r25, 0x96	; 150
    2b08:	11 c0       	rjmp	.+34     	; 0x2b2c <__floatsisf+0x6a>
    2b0a:	77 23       	and	r23, r23
    2b0c:	21 f0       	breq	.+8      	; 0x2b16 <__floatsisf+0x54>
    2b0e:	9e e8       	ldi	r25, 0x8E	; 142
    2b10:	87 2f       	mov	r24, r23
    2b12:	76 2f       	mov	r23, r22
    2b14:	05 c0       	rjmp	.+10     	; 0x2b20 <__floatsisf+0x5e>
    2b16:	66 23       	and	r22, r22
    2b18:	71 f0       	breq	.+28     	; 0x2b36 <__floatsisf+0x74>
    2b1a:	96 e8       	ldi	r25, 0x86	; 134
    2b1c:	86 2f       	mov	r24, r22
    2b1e:	70 e0       	ldi	r23, 0x00	; 0
    2b20:	60 e0       	ldi	r22, 0x00	; 0
    2b22:	2a f0       	brmi	.+10     	; 0x2b2e <__floatsisf+0x6c>
    2b24:	9a 95       	dec	r25
    2b26:	66 0f       	add	r22, r22
    2b28:	77 1f       	adc	r23, r23
    2b2a:	88 1f       	adc	r24, r24
    2b2c:	da f7       	brpl	.-10     	; 0x2b24 <__floatsisf+0x62>
    2b2e:	88 0f       	add	r24, r24
    2b30:	96 95       	lsr	r25
    2b32:	87 95       	ror	r24
    2b34:	97 f9       	bld	r25, 7
    2b36:	08 95       	ret

00002b38 <__fp_cmp>:
    2b38:	99 0f       	add	r25, r25
    2b3a:	00 08       	sbc	r0, r0
    2b3c:	55 0f       	add	r21, r21
    2b3e:	aa 0b       	sbc	r26, r26
    2b40:	e0 e8       	ldi	r30, 0x80	; 128
    2b42:	fe ef       	ldi	r31, 0xFE	; 254
    2b44:	16 16       	cp	r1, r22
    2b46:	17 06       	cpc	r1, r23
    2b48:	e8 07       	cpc	r30, r24
    2b4a:	f9 07       	cpc	r31, r25
    2b4c:	c0 f0       	brcs	.+48     	; 0x2b7e <__fp_cmp+0x46>
    2b4e:	12 16       	cp	r1, r18
    2b50:	13 06       	cpc	r1, r19
    2b52:	e4 07       	cpc	r30, r20
    2b54:	f5 07       	cpc	r31, r21
    2b56:	98 f0       	brcs	.+38     	; 0x2b7e <__fp_cmp+0x46>
    2b58:	62 1b       	sub	r22, r18
    2b5a:	73 0b       	sbc	r23, r19
    2b5c:	84 0b       	sbc	r24, r20
    2b5e:	95 0b       	sbc	r25, r21
    2b60:	39 f4       	brne	.+14     	; 0x2b70 <__fp_cmp+0x38>
    2b62:	0a 26       	eor	r0, r26
    2b64:	61 f0       	breq	.+24     	; 0x2b7e <__fp_cmp+0x46>
    2b66:	23 2b       	or	r18, r19
    2b68:	24 2b       	or	r18, r20
    2b6a:	25 2b       	or	r18, r21
    2b6c:	21 f4       	brne	.+8      	; 0x2b76 <__fp_cmp+0x3e>
    2b6e:	08 95       	ret
    2b70:	0a 26       	eor	r0, r26
    2b72:	09 f4       	brne	.+2      	; 0x2b76 <__fp_cmp+0x3e>
    2b74:	a1 40       	sbci	r26, 0x01	; 1
    2b76:	a6 95       	lsr	r26
    2b78:	8f ef       	ldi	r24, 0xFF	; 255
    2b7a:	81 1d       	adc	r24, r1
    2b7c:	81 1d       	adc	r24, r1
    2b7e:	08 95       	ret

00002b80 <__fp_inf>:
    2b80:	97 f9       	bld	r25, 7
    2b82:	9f 67       	ori	r25, 0x7F	; 127
    2b84:	80 e8       	ldi	r24, 0x80	; 128
    2b86:	70 e0       	ldi	r23, 0x00	; 0
    2b88:	60 e0       	ldi	r22, 0x00	; 0
    2b8a:	08 95       	ret

00002b8c <__fp_nan>:
    2b8c:	9f ef       	ldi	r25, 0xFF	; 255
    2b8e:	80 ec       	ldi	r24, 0xC0	; 192
    2b90:	08 95       	ret

00002b92 <__fp_pscA>:
    2b92:	00 24       	eor	r0, r0
    2b94:	0a 94       	dec	r0
    2b96:	16 16       	cp	r1, r22
    2b98:	17 06       	cpc	r1, r23
    2b9a:	18 06       	cpc	r1, r24
    2b9c:	09 06       	cpc	r0, r25
    2b9e:	08 95       	ret

00002ba0 <__fp_pscB>:
    2ba0:	00 24       	eor	r0, r0
    2ba2:	0a 94       	dec	r0
    2ba4:	12 16       	cp	r1, r18
    2ba6:	13 06       	cpc	r1, r19
    2ba8:	14 06       	cpc	r1, r20
    2baa:	05 06       	cpc	r0, r21
    2bac:	08 95       	ret

00002bae <__fp_round>:
    2bae:	09 2e       	mov	r0, r25
    2bb0:	03 94       	inc	r0
    2bb2:	00 0c       	add	r0, r0
    2bb4:	11 f4       	brne	.+4      	; 0x2bba <__fp_round+0xc>
    2bb6:	88 23       	and	r24, r24
    2bb8:	52 f0       	brmi	.+20     	; 0x2bce <__fp_round+0x20>
    2bba:	bb 0f       	add	r27, r27
    2bbc:	40 f4       	brcc	.+16     	; 0x2bce <__fp_round+0x20>
    2bbe:	bf 2b       	or	r27, r31
    2bc0:	11 f4       	brne	.+4      	; 0x2bc6 <__fp_round+0x18>
    2bc2:	60 ff       	sbrs	r22, 0
    2bc4:	04 c0       	rjmp	.+8      	; 0x2bce <__fp_round+0x20>
    2bc6:	6f 5f       	subi	r22, 0xFF	; 255
    2bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    2bca:	8f 4f       	sbci	r24, 0xFF	; 255
    2bcc:	9f 4f       	sbci	r25, 0xFF	; 255
    2bce:	08 95       	ret

00002bd0 <__fp_split3>:
    2bd0:	57 fd       	sbrc	r21, 7
    2bd2:	90 58       	subi	r25, 0x80	; 128
    2bd4:	44 0f       	add	r20, r20
    2bd6:	55 1f       	adc	r21, r21
    2bd8:	59 f0       	breq	.+22     	; 0x2bf0 <__fp_splitA+0x10>
    2bda:	5f 3f       	cpi	r21, 0xFF	; 255
    2bdc:	71 f0       	breq	.+28     	; 0x2bfa <__fp_splitA+0x1a>
    2bde:	47 95       	ror	r20

00002be0 <__fp_splitA>:
    2be0:	88 0f       	add	r24, r24
    2be2:	97 fb       	bst	r25, 7
    2be4:	99 1f       	adc	r25, r25
    2be6:	61 f0       	breq	.+24     	; 0x2c00 <__fp_splitA+0x20>
    2be8:	9f 3f       	cpi	r25, 0xFF	; 255
    2bea:	79 f0       	breq	.+30     	; 0x2c0a <__fp_splitA+0x2a>
    2bec:	87 95       	ror	r24
    2bee:	08 95       	ret
    2bf0:	12 16       	cp	r1, r18
    2bf2:	13 06       	cpc	r1, r19
    2bf4:	14 06       	cpc	r1, r20
    2bf6:	55 1f       	adc	r21, r21
    2bf8:	f2 cf       	rjmp	.-28     	; 0x2bde <__fp_split3+0xe>
    2bfa:	46 95       	lsr	r20
    2bfc:	f1 df       	rcall	.-30     	; 0x2be0 <__fp_splitA>
    2bfe:	08 c0       	rjmp	.+16     	; 0x2c10 <__fp_splitA+0x30>
    2c00:	16 16       	cp	r1, r22
    2c02:	17 06       	cpc	r1, r23
    2c04:	18 06       	cpc	r1, r24
    2c06:	99 1f       	adc	r25, r25
    2c08:	f1 cf       	rjmp	.-30     	; 0x2bec <__fp_splitA+0xc>
    2c0a:	86 95       	lsr	r24
    2c0c:	71 05       	cpc	r23, r1
    2c0e:	61 05       	cpc	r22, r1
    2c10:	08 94       	sec
    2c12:	08 95       	ret

00002c14 <__fp_zero>:
    2c14:	e8 94       	clt

00002c16 <__fp_szero>:
    2c16:	bb 27       	eor	r27, r27
    2c18:	66 27       	eor	r22, r22
    2c1a:	77 27       	eor	r23, r23
    2c1c:	cb 01       	movw	r24, r22
    2c1e:	97 f9       	bld	r25, 7
    2c20:	08 95       	ret

00002c22 <__gesf2>:
    2c22:	8a df       	rcall	.-236    	; 0x2b38 <__fp_cmp>
    2c24:	08 f4       	brcc	.+2      	; 0x2c28 <__gesf2+0x6>
    2c26:	8f ef       	ldi	r24, 0xFF	; 255
    2c28:	08 95       	ret

00002c2a <__mulsf3>:
    2c2a:	0b d0       	rcall	.+22     	; 0x2c42 <__mulsf3x>
    2c2c:	c0 cf       	rjmp	.-128    	; 0x2bae <__fp_round>
    2c2e:	b1 df       	rcall	.-158    	; 0x2b92 <__fp_pscA>
    2c30:	28 f0       	brcs	.+10     	; 0x2c3c <__mulsf3+0x12>
    2c32:	b6 df       	rcall	.-148    	; 0x2ba0 <__fp_pscB>
    2c34:	18 f0       	brcs	.+6      	; 0x2c3c <__mulsf3+0x12>
    2c36:	95 23       	and	r25, r21
    2c38:	09 f0       	breq	.+2      	; 0x2c3c <__mulsf3+0x12>
    2c3a:	a2 cf       	rjmp	.-188    	; 0x2b80 <__fp_inf>
    2c3c:	a7 cf       	rjmp	.-178    	; 0x2b8c <__fp_nan>
    2c3e:	11 24       	eor	r1, r1
    2c40:	ea cf       	rjmp	.-44     	; 0x2c16 <__fp_szero>

00002c42 <__mulsf3x>:
    2c42:	c6 df       	rcall	.-116    	; 0x2bd0 <__fp_split3>
    2c44:	a0 f3       	brcs	.-24     	; 0x2c2e <__mulsf3+0x4>

00002c46 <__mulsf3_pse>:
    2c46:	95 9f       	mul	r25, r21
    2c48:	d1 f3       	breq	.-12     	; 0x2c3e <__mulsf3+0x14>
    2c4a:	95 0f       	add	r25, r21
    2c4c:	50 e0       	ldi	r21, 0x00	; 0
    2c4e:	55 1f       	adc	r21, r21
    2c50:	62 9f       	mul	r22, r18
    2c52:	f0 01       	movw	r30, r0
    2c54:	72 9f       	mul	r23, r18
    2c56:	bb 27       	eor	r27, r27
    2c58:	f0 0d       	add	r31, r0
    2c5a:	b1 1d       	adc	r27, r1
    2c5c:	63 9f       	mul	r22, r19
    2c5e:	aa 27       	eor	r26, r26
    2c60:	f0 0d       	add	r31, r0
    2c62:	b1 1d       	adc	r27, r1
    2c64:	aa 1f       	adc	r26, r26
    2c66:	64 9f       	mul	r22, r20
    2c68:	66 27       	eor	r22, r22
    2c6a:	b0 0d       	add	r27, r0
    2c6c:	a1 1d       	adc	r26, r1
    2c6e:	66 1f       	adc	r22, r22
    2c70:	82 9f       	mul	r24, r18
    2c72:	22 27       	eor	r18, r18
    2c74:	b0 0d       	add	r27, r0
    2c76:	a1 1d       	adc	r26, r1
    2c78:	62 1f       	adc	r22, r18
    2c7a:	73 9f       	mul	r23, r19
    2c7c:	b0 0d       	add	r27, r0
    2c7e:	a1 1d       	adc	r26, r1
    2c80:	62 1f       	adc	r22, r18
    2c82:	83 9f       	mul	r24, r19
    2c84:	a0 0d       	add	r26, r0
    2c86:	61 1d       	adc	r22, r1
    2c88:	22 1f       	adc	r18, r18
    2c8a:	74 9f       	mul	r23, r20
    2c8c:	33 27       	eor	r19, r19
    2c8e:	a0 0d       	add	r26, r0
    2c90:	61 1d       	adc	r22, r1
    2c92:	23 1f       	adc	r18, r19
    2c94:	84 9f       	mul	r24, r20
    2c96:	60 0d       	add	r22, r0
    2c98:	21 1d       	adc	r18, r1
    2c9a:	82 2f       	mov	r24, r18
    2c9c:	76 2f       	mov	r23, r22
    2c9e:	6a 2f       	mov	r22, r26
    2ca0:	11 24       	eor	r1, r1
    2ca2:	9f 57       	subi	r25, 0x7F	; 127
    2ca4:	50 40       	sbci	r21, 0x00	; 0
    2ca6:	8a f0       	brmi	.+34     	; 0x2cca <__mulsf3_pse+0x84>
    2ca8:	e1 f0       	breq	.+56     	; 0x2ce2 <__mulsf3_pse+0x9c>
    2caa:	88 23       	and	r24, r24
    2cac:	4a f0       	brmi	.+18     	; 0x2cc0 <__mulsf3_pse+0x7a>
    2cae:	ee 0f       	add	r30, r30
    2cb0:	ff 1f       	adc	r31, r31
    2cb2:	bb 1f       	adc	r27, r27
    2cb4:	66 1f       	adc	r22, r22
    2cb6:	77 1f       	adc	r23, r23
    2cb8:	88 1f       	adc	r24, r24
    2cba:	91 50       	subi	r25, 0x01	; 1
    2cbc:	50 40       	sbci	r21, 0x00	; 0
    2cbe:	a9 f7       	brne	.-22     	; 0x2caa <__mulsf3_pse+0x64>
    2cc0:	9e 3f       	cpi	r25, 0xFE	; 254
    2cc2:	51 05       	cpc	r21, r1
    2cc4:	70 f0       	brcs	.+28     	; 0x2ce2 <__mulsf3_pse+0x9c>
    2cc6:	5c cf       	rjmp	.-328    	; 0x2b80 <__fp_inf>
    2cc8:	a6 cf       	rjmp	.-180    	; 0x2c16 <__fp_szero>
    2cca:	5f 3f       	cpi	r21, 0xFF	; 255
    2ccc:	ec f3       	brlt	.-6      	; 0x2cc8 <__mulsf3_pse+0x82>
    2cce:	98 3e       	cpi	r25, 0xE8	; 232
    2cd0:	dc f3       	brlt	.-10     	; 0x2cc8 <__mulsf3_pse+0x82>
    2cd2:	86 95       	lsr	r24
    2cd4:	77 95       	ror	r23
    2cd6:	67 95       	ror	r22
    2cd8:	b7 95       	ror	r27
    2cda:	f7 95       	ror	r31
    2cdc:	e7 95       	ror	r30
    2cde:	9f 5f       	subi	r25, 0xFF	; 255
    2ce0:	c1 f7       	brne	.-16     	; 0x2cd2 <__mulsf3_pse+0x8c>
    2ce2:	fe 2b       	or	r31, r30
    2ce4:	88 0f       	add	r24, r24
    2ce6:	91 1d       	adc	r25, r1
    2ce8:	96 95       	lsr	r25
    2cea:	87 95       	ror	r24
    2cec:	97 f9       	bld	r25, 7
    2cee:	08 95       	ret

00002cf0 <vfprintf>:
    2cf0:	2f 92       	push	r2
    2cf2:	3f 92       	push	r3
    2cf4:	4f 92       	push	r4
    2cf6:	5f 92       	push	r5
    2cf8:	6f 92       	push	r6
    2cfa:	7f 92       	push	r7
    2cfc:	8f 92       	push	r8
    2cfe:	9f 92       	push	r9
    2d00:	af 92       	push	r10
    2d02:	bf 92       	push	r11
    2d04:	cf 92       	push	r12
    2d06:	df 92       	push	r13
    2d08:	ef 92       	push	r14
    2d0a:	ff 92       	push	r15
    2d0c:	0f 93       	push	r16
    2d0e:	1f 93       	push	r17
    2d10:	cf 93       	push	r28
    2d12:	df 93       	push	r29
    2d14:	cd b7       	in	r28, 0x3d	; 61
    2d16:	de b7       	in	r29, 0x3e	; 62
    2d18:	63 97       	sbiw	r28, 0x13	; 19
    2d1a:	0f b6       	in	r0, 0x3f	; 63
    2d1c:	f8 94       	cli
    2d1e:	de bf       	out	0x3e, r29	; 62
    2d20:	0f be       	out	0x3f, r0	; 63
    2d22:	cd bf       	out	0x3d, r28	; 61
    2d24:	6c 01       	movw	r12, r24
    2d26:	4b 01       	movw	r8, r22
    2d28:	2a 01       	movw	r4, r20
    2d2a:	fc 01       	movw	r30, r24
    2d2c:	17 82       	std	Z+7, r1	; 0x07
    2d2e:	16 82       	std	Z+6, r1	; 0x06
    2d30:	83 81       	ldd	r24, Z+3	; 0x03
    2d32:	81 ff       	sbrs	r24, 1
    2d34:	29 c3       	rjmp	.+1618   	; 0x3388 <vfprintf+0x698>
    2d36:	ae 01       	movw	r20, r28
    2d38:	4f 5f       	subi	r20, 0xFF	; 255
    2d3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d3c:	3a 01       	movw	r6, r20
    2d3e:	f6 01       	movw	r30, r12
    2d40:	93 81       	ldd	r25, Z+3	; 0x03
    2d42:	f4 01       	movw	r30, r8
    2d44:	93 fd       	sbrc	r25, 3
    2d46:	85 91       	lpm	r24, Z+
    2d48:	93 ff       	sbrs	r25, 3
    2d4a:	81 91       	ld	r24, Z+
    2d4c:	4f 01       	movw	r8, r30
    2d4e:	88 23       	and	r24, r24
    2d50:	09 f4       	brne	.+2      	; 0x2d54 <vfprintf+0x64>
    2d52:	16 c3       	rjmp	.+1580   	; 0x3380 <vfprintf+0x690>
    2d54:	85 32       	cpi	r24, 0x25	; 37
    2d56:	39 f4       	brne	.+14     	; 0x2d66 <vfprintf+0x76>
    2d58:	93 fd       	sbrc	r25, 3
    2d5a:	85 91       	lpm	r24, Z+
    2d5c:	93 ff       	sbrs	r25, 3
    2d5e:	81 91       	ld	r24, Z+
    2d60:	4f 01       	movw	r8, r30
    2d62:	85 32       	cpi	r24, 0x25	; 37
    2d64:	31 f4       	brne	.+12     	; 0x2d72 <vfprintf+0x82>
    2d66:	b6 01       	movw	r22, r12
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	c2 d5       	rcall	.+2948   	; 0x38f0 <fputc>
    2d6c:	52 01       	movw	r10, r4
    2d6e:	25 01       	movw	r4, r10
    2d70:	e6 cf       	rjmp	.-52     	; 0x2d3e <vfprintf+0x4e>
    2d72:	10 e0       	ldi	r17, 0x00	; 0
    2d74:	f1 2c       	mov	r15, r1
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	20 32       	cpi	r18, 0x20	; 32
    2d7a:	a0 f4       	brcc	.+40     	; 0x2da4 <vfprintf+0xb4>
    2d7c:	8b 32       	cpi	r24, 0x2B	; 43
    2d7e:	69 f0       	breq	.+26     	; 0x2d9a <vfprintf+0xaa>
    2d80:	30 f4       	brcc	.+12     	; 0x2d8e <vfprintf+0x9e>
    2d82:	80 32       	cpi	r24, 0x20	; 32
    2d84:	59 f0       	breq	.+22     	; 0x2d9c <vfprintf+0xac>
    2d86:	83 32       	cpi	r24, 0x23	; 35
    2d88:	69 f4       	brne	.+26     	; 0x2da4 <vfprintf+0xb4>
    2d8a:	20 61       	ori	r18, 0x10	; 16
    2d8c:	2c c0       	rjmp	.+88     	; 0x2de6 <vfprintf+0xf6>
    2d8e:	8d 32       	cpi	r24, 0x2D	; 45
    2d90:	39 f0       	breq	.+14     	; 0x2da0 <vfprintf+0xb0>
    2d92:	80 33       	cpi	r24, 0x30	; 48
    2d94:	39 f4       	brne	.+14     	; 0x2da4 <vfprintf+0xb4>
    2d96:	21 60       	ori	r18, 0x01	; 1
    2d98:	26 c0       	rjmp	.+76     	; 0x2de6 <vfprintf+0xf6>
    2d9a:	22 60       	ori	r18, 0x02	; 2
    2d9c:	24 60       	ori	r18, 0x04	; 4
    2d9e:	23 c0       	rjmp	.+70     	; 0x2de6 <vfprintf+0xf6>
    2da0:	28 60       	ori	r18, 0x08	; 8
    2da2:	21 c0       	rjmp	.+66     	; 0x2de6 <vfprintf+0xf6>
    2da4:	27 fd       	sbrc	r18, 7
    2da6:	27 c0       	rjmp	.+78     	; 0x2df6 <vfprintf+0x106>
    2da8:	30 ed       	ldi	r19, 0xD0	; 208
    2daa:	38 0f       	add	r19, r24
    2dac:	3a 30       	cpi	r19, 0x0A	; 10
    2dae:	78 f4       	brcc	.+30     	; 0x2dce <vfprintf+0xde>
    2db0:	26 ff       	sbrs	r18, 6
    2db2:	06 c0       	rjmp	.+12     	; 0x2dc0 <vfprintf+0xd0>
    2db4:	fa e0       	ldi	r31, 0x0A	; 10
    2db6:	1f 9f       	mul	r17, r31
    2db8:	30 0d       	add	r19, r0
    2dba:	11 24       	eor	r1, r1
    2dbc:	13 2f       	mov	r17, r19
    2dbe:	13 c0       	rjmp	.+38     	; 0x2de6 <vfprintf+0xf6>
    2dc0:	4a e0       	ldi	r20, 0x0A	; 10
    2dc2:	f4 9e       	mul	r15, r20
    2dc4:	30 0d       	add	r19, r0
    2dc6:	11 24       	eor	r1, r1
    2dc8:	f3 2e       	mov	r15, r19
    2dca:	20 62       	ori	r18, 0x20	; 32
    2dcc:	0c c0       	rjmp	.+24     	; 0x2de6 <vfprintf+0xf6>
    2dce:	8e 32       	cpi	r24, 0x2E	; 46
    2dd0:	21 f4       	brne	.+8      	; 0x2dda <vfprintf+0xea>
    2dd2:	26 fd       	sbrc	r18, 6
    2dd4:	d5 c2       	rjmp	.+1450   	; 0x3380 <vfprintf+0x690>
    2dd6:	20 64       	ori	r18, 0x40	; 64
    2dd8:	06 c0       	rjmp	.+12     	; 0x2de6 <vfprintf+0xf6>
    2dda:	8c 36       	cpi	r24, 0x6C	; 108
    2ddc:	11 f4       	brne	.+4      	; 0x2de2 <vfprintf+0xf2>
    2dde:	20 68       	ori	r18, 0x80	; 128
    2de0:	02 c0       	rjmp	.+4      	; 0x2de6 <vfprintf+0xf6>
    2de2:	88 36       	cpi	r24, 0x68	; 104
    2de4:	41 f4       	brne	.+16     	; 0x2df6 <vfprintf+0x106>
    2de6:	f4 01       	movw	r30, r8
    2de8:	93 fd       	sbrc	r25, 3
    2dea:	85 91       	lpm	r24, Z+
    2dec:	93 ff       	sbrs	r25, 3
    2dee:	81 91       	ld	r24, Z+
    2df0:	4f 01       	movw	r8, r30
    2df2:	81 11       	cpse	r24, r1
    2df4:	c1 cf       	rjmp	.-126    	; 0x2d78 <vfprintf+0x88>
    2df6:	9b eb       	ldi	r25, 0xBB	; 187
    2df8:	98 0f       	add	r25, r24
    2dfa:	93 30       	cpi	r25, 0x03	; 3
    2dfc:	18 f4       	brcc	.+6      	; 0x2e04 <vfprintf+0x114>
    2dfe:	20 61       	ori	r18, 0x10	; 16
    2e00:	80 5e       	subi	r24, 0xE0	; 224
    2e02:	06 c0       	rjmp	.+12     	; 0x2e10 <vfprintf+0x120>
    2e04:	9b e9       	ldi	r25, 0x9B	; 155
    2e06:	98 0f       	add	r25, r24
    2e08:	93 30       	cpi	r25, 0x03	; 3
    2e0a:	08 f0       	brcs	.+2      	; 0x2e0e <vfprintf+0x11e>
    2e0c:	64 c1       	rjmp	.+712    	; 0x30d6 <vfprintf+0x3e6>
    2e0e:	2f 7e       	andi	r18, 0xEF	; 239
    2e10:	26 ff       	sbrs	r18, 6
    2e12:	16 e0       	ldi	r17, 0x06	; 6
    2e14:	2f 73       	andi	r18, 0x3F	; 63
    2e16:	32 2e       	mov	r3, r18
    2e18:	85 36       	cpi	r24, 0x65	; 101
    2e1a:	19 f4       	brne	.+6      	; 0x2e22 <vfprintf+0x132>
    2e1c:	20 64       	ori	r18, 0x40	; 64
    2e1e:	32 2e       	mov	r3, r18
    2e20:	08 c0       	rjmp	.+16     	; 0x2e32 <vfprintf+0x142>
    2e22:	86 36       	cpi	r24, 0x66	; 102
    2e24:	21 f4       	brne	.+8      	; 0x2e2e <vfprintf+0x13e>
    2e26:	f2 2f       	mov	r31, r18
    2e28:	f0 68       	ori	r31, 0x80	; 128
    2e2a:	3f 2e       	mov	r3, r31
    2e2c:	02 c0       	rjmp	.+4      	; 0x2e32 <vfprintf+0x142>
    2e2e:	11 11       	cpse	r17, r1
    2e30:	11 50       	subi	r17, 0x01	; 1
    2e32:	37 fe       	sbrs	r3, 7
    2e34:	07 c0       	rjmp	.+14     	; 0x2e44 <vfprintf+0x154>
    2e36:	1c 33       	cpi	r17, 0x3C	; 60
    2e38:	50 f4       	brcc	.+20     	; 0x2e4e <vfprintf+0x15e>
    2e3a:	ee 24       	eor	r14, r14
    2e3c:	e3 94       	inc	r14
    2e3e:	e1 0e       	add	r14, r17
    2e40:	27 e0       	ldi	r18, 0x07	; 7
    2e42:	0b c0       	rjmp	.+22     	; 0x2e5a <vfprintf+0x16a>
    2e44:	18 30       	cpi	r17, 0x08	; 8
    2e46:	38 f0       	brcs	.+14     	; 0x2e56 <vfprintf+0x166>
    2e48:	27 e0       	ldi	r18, 0x07	; 7
    2e4a:	17 e0       	ldi	r17, 0x07	; 7
    2e4c:	05 c0       	rjmp	.+10     	; 0x2e58 <vfprintf+0x168>
    2e4e:	27 e0       	ldi	r18, 0x07	; 7
    2e50:	4c e3       	ldi	r20, 0x3C	; 60
    2e52:	e4 2e       	mov	r14, r20
    2e54:	02 c0       	rjmp	.+4      	; 0x2e5a <vfprintf+0x16a>
    2e56:	21 2f       	mov	r18, r17
    2e58:	e1 2c       	mov	r14, r1
    2e5a:	52 01       	movw	r10, r4
    2e5c:	44 e0       	ldi	r20, 0x04	; 4
    2e5e:	a4 0e       	add	r10, r20
    2e60:	b1 1c       	adc	r11, r1
    2e62:	f2 01       	movw	r30, r4
    2e64:	60 81       	ld	r22, Z
    2e66:	71 81       	ldd	r23, Z+1	; 0x01
    2e68:	82 81       	ldd	r24, Z+2	; 0x02
    2e6a:	93 81       	ldd	r25, Z+3	; 0x03
    2e6c:	0e 2d       	mov	r16, r14
    2e6e:	a3 01       	movw	r20, r6
    2e70:	51 d4       	rcall	.+2210   	; 0x3714 <__ftoa_engine>
    2e72:	2c 01       	movw	r4, r24
    2e74:	09 81       	ldd	r16, Y+1	; 0x01
    2e76:	00 ff       	sbrs	r16, 0
    2e78:	02 c0       	rjmp	.+4      	; 0x2e7e <vfprintf+0x18e>
    2e7a:	03 ff       	sbrs	r16, 3
    2e7c:	07 c0       	rjmp	.+14     	; 0x2e8c <vfprintf+0x19c>
    2e7e:	31 fc       	sbrc	r3, 1
    2e80:	08 c0       	rjmp	.+16     	; 0x2e92 <vfprintf+0x1a2>
    2e82:	32 fe       	sbrs	r3, 2
    2e84:	09 c0       	rjmp	.+18     	; 0x2e98 <vfprintf+0x1a8>
    2e86:	30 e2       	ldi	r19, 0x20	; 32
    2e88:	23 2e       	mov	r2, r19
    2e8a:	07 c0       	rjmp	.+14     	; 0x2e9a <vfprintf+0x1aa>
    2e8c:	2d e2       	ldi	r18, 0x2D	; 45
    2e8e:	22 2e       	mov	r2, r18
    2e90:	04 c0       	rjmp	.+8      	; 0x2e9a <vfprintf+0x1aa>
    2e92:	9b e2       	ldi	r25, 0x2B	; 43
    2e94:	29 2e       	mov	r2, r25
    2e96:	01 c0       	rjmp	.+2      	; 0x2e9a <vfprintf+0x1aa>
    2e98:	21 2c       	mov	r2, r1
    2e9a:	80 2f       	mov	r24, r16
    2e9c:	8c 70       	andi	r24, 0x0C	; 12
    2e9e:	19 f0       	breq	.+6      	; 0x2ea6 <vfprintf+0x1b6>
    2ea0:	21 10       	cpse	r2, r1
    2ea2:	51 c2       	rjmp	.+1186   	; 0x3346 <vfprintf+0x656>
    2ea4:	8d c2       	rjmp	.+1306   	; 0x33c0 <vfprintf+0x6d0>
    2ea6:	37 fe       	sbrs	r3, 7
    2ea8:	0f c0       	rjmp	.+30     	; 0x2ec8 <vfprintf+0x1d8>
    2eaa:	e4 0c       	add	r14, r4
    2eac:	04 ff       	sbrs	r16, 4
    2eae:	04 c0       	rjmp	.+8      	; 0x2eb8 <vfprintf+0x1c8>
    2eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb2:	81 33       	cpi	r24, 0x31	; 49
    2eb4:	09 f4       	brne	.+2      	; 0x2eb8 <vfprintf+0x1c8>
    2eb6:	ea 94       	dec	r14
    2eb8:	1e 14       	cp	r1, r14
    2eba:	74 f5       	brge	.+92     	; 0x2f18 <vfprintf+0x228>
    2ebc:	f8 e0       	ldi	r31, 0x08	; 8
    2ebe:	fe 15       	cp	r31, r14
    2ec0:	78 f5       	brcc	.+94     	; 0x2f20 <vfprintf+0x230>
    2ec2:	88 e0       	ldi	r24, 0x08	; 8
    2ec4:	e8 2e       	mov	r14, r24
    2ec6:	2c c0       	rjmp	.+88     	; 0x2f20 <vfprintf+0x230>
    2ec8:	36 fc       	sbrc	r3, 6
    2eca:	2a c0       	rjmp	.+84     	; 0x2f20 <vfprintf+0x230>
    2ecc:	81 2f       	mov	r24, r17
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	84 15       	cp	r24, r4
    2ed2:	95 05       	cpc	r25, r5
    2ed4:	9c f0       	brlt	.+38     	; 0x2efc <vfprintf+0x20c>
    2ed6:	2c ef       	ldi	r18, 0xFC	; 252
    2ed8:	42 16       	cp	r4, r18
    2eda:	2f ef       	ldi	r18, 0xFF	; 255
    2edc:	52 06       	cpc	r5, r18
    2ede:	74 f0       	brlt	.+28     	; 0x2efc <vfprintf+0x20c>
    2ee0:	43 2d       	mov	r20, r3
    2ee2:	40 68       	ori	r20, 0x80	; 128
    2ee4:	34 2e       	mov	r3, r20
    2ee6:	0a c0       	rjmp	.+20     	; 0x2efc <vfprintf+0x20c>
    2ee8:	e2 e0       	ldi	r30, 0x02	; 2
    2eea:	f0 e0       	ldi	r31, 0x00	; 0
    2eec:	ec 0f       	add	r30, r28
    2eee:	fd 1f       	adc	r31, r29
    2ef0:	e1 0f       	add	r30, r17
    2ef2:	f1 1d       	adc	r31, r1
    2ef4:	80 81       	ld	r24, Z
    2ef6:	80 33       	cpi	r24, 0x30	; 48
    2ef8:	19 f4       	brne	.+6      	; 0x2f00 <vfprintf+0x210>
    2efa:	11 50       	subi	r17, 0x01	; 1
    2efc:	11 11       	cpse	r17, r1
    2efe:	f4 cf       	rjmp	.-24     	; 0x2ee8 <vfprintf+0x1f8>
    2f00:	37 fe       	sbrs	r3, 7
    2f02:	0e c0       	rjmp	.+28     	; 0x2f20 <vfprintf+0x230>
    2f04:	ee 24       	eor	r14, r14
    2f06:	e3 94       	inc	r14
    2f08:	e1 0e       	add	r14, r17
    2f0a:	81 2f       	mov	r24, r17
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	48 16       	cp	r4, r24
    2f10:	59 06       	cpc	r5, r25
    2f12:	2c f4       	brge	.+10     	; 0x2f1e <vfprintf+0x22e>
    2f14:	14 19       	sub	r17, r4
    2f16:	04 c0       	rjmp	.+8      	; 0x2f20 <vfprintf+0x230>
    2f18:	ee 24       	eor	r14, r14
    2f1a:	e3 94       	inc	r14
    2f1c:	01 c0       	rjmp	.+2      	; 0x2f20 <vfprintf+0x230>
    2f1e:	10 e0       	ldi	r17, 0x00	; 0
    2f20:	37 fe       	sbrs	r3, 7
    2f22:	06 c0       	rjmp	.+12     	; 0x2f30 <vfprintf+0x240>
    2f24:	14 14       	cp	r1, r4
    2f26:	15 04       	cpc	r1, r5
    2f28:	34 f4       	brge	.+12     	; 0x2f36 <vfprintf+0x246>
    2f2a:	c2 01       	movw	r24, r4
    2f2c:	01 96       	adiw	r24, 0x01	; 1
    2f2e:	05 c0       	rjmp	.+10     	; 0x2f3a <vfprintf+0x24a>
    2f30:	85 e0       	ldi	r24, 0x05	; 5
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	02 c0       	rjmp	.+4      	; 0x2f3a <vfprintf+0x24a>
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	90 e0       	ldi	r25, 0x00	; 0
    2f3a:	21 10       	cpse	r2, r1
    2f3c:	01 96       	adiw	r24, 0x01	; 1
    2f3e:	11 23       	and	r17, r17
    2f40:	31 f0       	breq	.+12     	; 0x2f4e <vfprintf+0x25e>
    2f42:	21 2f       	mov	r18, r17
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	2f 5f       	subi	r18, 0xFF	; 255
    2f48:	3f 4f       	sbci	r19, 0xFF	; 255
    2f4a:	82 0f       	add	r24, r18
    2f4c:	93 1f       	adc	r25, r19
    2f4e:	2f 2d       	mov	r18, r15
    2f50:	30 e0       	ldi	r19, 0x00	; 0
    2f52:	82 17       	cp	r24, r18
    2f54:	93 07       	cpc	r25, r19
    2f56:	14 f4       	brge	.+4      	; 0x2f5c <vfprintf+0x26c>
    2f58:	f8 1a       	sub	r15, r24
    2f5a:	01 c0       	rjmp	.+2      	; 0x2f5e <vfprintf+0x26e>
    2f5c:	f1 2c       	mov	r15, r1
    2f5e:	83 2d       	mov	r24, r3
    2f60:	89 70       	andi	r24, 0x09	; 9
    2f62:	41 f4       	brne	.+16     	; 0x2f74 <vfprintf+0x284>
    2f64:	ff 20       	and	r15, r15
    2f66:	31 f0       	breq	.+12     	; 0x2f74 <vfprintf+0x284>
    2f68:	b6 01       	movw	r22, r12
    2f6a:	80 e2       	ldi	r24, 0x20	; 32
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	c0 d4       	rcall	.+2432   	; 0x38f0 <fputc>
    2f70:	fa 94       	dec	r15
    2f72:	f8 cf       	rjmp	.-16     	; 0x2f64 <vfprintf+0x274>
    2f74:	22 20       	and	r2, r2
    2f76:	21 f0       	breq	.+8      	; 0x2f80 <vfprintf+0x290>
    2f78:	b6 01       	movw	r22, r12
    2f7a:	82 2d       	mov	r24, r2
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	b8 d4       	rcall	.+2416   	; 0x38f0 <fputc>
    2f80:	33 fc       	sbrc	r3, 3
    2f82:	08 c0       	rjmp	.+16     	; 0x2f94 <vfprintf+0x2a4>
    2f84:	ff 20       	and	r15, r15
    2f86:	31 f0       	breq	.+12     	; 0x2f94 <vfprintf+0x2a4>
    2f88:	b6 01       	movw	r22, r12
    2f8a:	80 e3       	ldi	r24, 0x30	; 48
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	b0 d4       	rcall	.+2400   	; 0x38f0 <fputc>
    2f90:	fa 94       	dec	r15
    2f92:	f8 cf       	rjmp	.-16     	; 0x2f84 <vfprintf+0x294>
    2f94:	37 fe       	sbrs	r3, 7
    2f96:	58 c0       	rjmp	.+176    	; 0x3048 <vfprintf+0x358>
    2f98:	94 2d       	mov	r25, r4
    2f9a:	85 2d       	mov	r24, r5
    2f9c:	57 fe       	sbrs	r5, 7
    2f9e:	02 c0       	rjmp	.+4      	; 0x2fa4 <vfprintf+0x2b4>
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	29 2e       	mov	r2, r25
    2fa6:	38 2e       	mov	r3, r24
    2fa8:	20 e0       	ldi	r18, 0x00	; 0
    2faa:	30 e0       	ldi	r19, 0x00	; 0
    2fac:	a2 01       	movw	r20, r4
    2fae:	4e 19       	sub	r20, r14
    2fb0:	51 09       	sbc	r21, r1
    2fb2:	5d 87       	std	Y+13, r21	; 0x0d
    2fb4:	4c 87       	std	Y+12, r20	; 0x0c
    2fb6:	a2 01       	movw	r20, r4
    2fb8:	42 19       	sub	r20, r2
    2fba:	53 09       	sbc	r21, r3
    2fbc:	5f 87       	std	Y+15, r21	; 0x0f
    2fbe:	4e 87       	std	Y+14, r20	; 0x0e
    2fc0:	61 2f       	mov	r22, r17
    2fc2:	70 e0       	ldi	r23, 0x00	; 0
    2fc4:	44 27       	eor	r20, r20
    2fc6:	55 27       	eor	r21, r21
    2fc8:	46 1b       	sub	r20, r22
    2fca:	57 0b       	sbc	r21, r23
    2fcc:	59 8b       	std	Y+17, r21	; 0x11
    2fce:	48 8b       	std	Y+16, r20	; 0x10
    2fd0:	5f ef       	ldi	r21, 0xFF	; 255
    2fd2:	25 16       	cp	r2, r21
    2fd4:	35 06       	cpc	r3, r21
    2fd6:	41 f4       	brne	.+16     	; 0x2fe8 <vfprintf+0x2f8>
    2fd8:	b6 01       	movw	r22, r12
    2fda:	8e e2       	ldi	r24, 0x2E	; 46
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	2a 8b       	std	Y+18, r18	; 0x12
    2fe0:	3b 8b       	std	Y+19, r19	; 0x13
    2fe2:	86 d4       	rcall	.+2316   	; 0x38f0 <fputc>
    2fe4:	3b 89       	ldd	r19, Y+19	; 0x13
    2fe6:	2a 89       	ldd	r18, Y+18	; 0x12
    2fe8:	42 14       	cp	r4, r2
    2fea:	53 04       	cpc	r5, r3
    2fec:	6c f0       	brlt	.+26     	; 0x3008 <vfprintf+0x318>
    2fee:	4c 85       	ldd	r20, Y+12	; 0x0c
    2ff0:	5d 85       	ldd	r21, Y+13	; 0x0d
    2ff2:	42 15       	cp	r20, r2
    2ff4:	53 05       	cpc	r21, r3
    2ff6:	44 f4       	brge	.+16     	; 0x3008 <vfprintf+0x318>
    2ff8:	ee 85       	ldd	r30, Y+14	; 0x0e
    2ffa:	ff 85       	ldd	r31, Y+15	; 0x0f
    2ffc:	e2 0f       	add	r30, r18
    2ffe:	f3 1f       	adc	r31, r19
    3000:	e6 0d       	add	r30, r6
    3002:	f7 1d       	adc	r31, r7
    3004:	81 81       	ldd	r24, Z+1	; 0x01
    3006:	01 c0       	rjmp	.+2      	; 0x300a <vfprintf+0x31a>
    3008:	80 e3       	ldi	r24, 0x30	; 48
    300a:	51 e0       	ldi	r21, 0x01	; 1
    300c:	25 1a       	sub	r2, r21
    300e:	31 08       	sbc	r3, r1
    3010:	2f 5f       	subi	r18, 0xFF	; 255
    3012:	3f 4f       	sbci	r19, 0xFF	; 255
    3014:	48 89       	ldd	r20, Y+16	; 0x10
    3016:	59 89       	ldd	r21, Y+17	; 0x11
    3018:	24 16       	cp	r2, r20
    301a:	35 06       	cpc	r3, r21
    301c:	44 f0       	brlt	.+16     	; 0x302e <vfprintf+0x33e>
    301e:	b6 01       	movw	r22, r12
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	2a 8b       	std	Y+18, r18	; 0x12
    3024:	3b 8b       	std	Y+19, r19	; 0x13
    3026:	64 d4       	rcall	.+2248   	; 0x38f0 <fputc>
    3028:	2a 89       	ldd	r18, Y+18	; 0x12
    302a:	3b 89       	ldd	r19, Y+19	; 0x13
    302c:	d1 cf       	rjmp	.-94     	; 0x2fd0 <vfprintf+0x2e0>
    302e:	24 14       	cp	r2, r4
    3030:	35 04       	cpc	r3, r5
    3032:	39 f4       	brne	.+14     	; 0x3042 <vfprintf+0x352>
    3034:	9a 81       	ldd	r25, Y+2	; 0x02
    3036:	96 33       	cpi	r25, 0x36	; 54
    3038:	18 f4       	brcc	.+6      	; 0x3040 <vfprintf+0x350>
    303a:	95 33       	cpi	r25, 0x35	; 53
    303c:	11 f4       	brne	.+4      	; 0x3042 <vfprintf+0x352>
    303e:	04 ff       	sbrs	r16, 4
    3040:	81 e3       	ldi	r24, 0x31	; 49
    3042:	b6 01       	movw	r22, r12
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	45 c0       	rjmp	.+138    	; 0x30d2 <vfprintf+0x3e2>
    3048:	8a 81       	ldd	r24, Y+2	; 0x02
    304a:	81 33       	cpi	r24, 0x31	; 49
    304c:	09 f0       	breq	.+2      	; 0x3050 <vfprintf+0x360>
    304e:	0f 7e       	andi	r16, 0xEF	; 239
    3050:	b6 01       	movw	r22, r12
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	4d d4       	rcall	.+2202   	; 0x38f0 <fputc>
    3056:	11 11       	cpse	r17, r1
    3058:	05 c0       	rjmp	.+10     	; 0x3064 <vfprintf+0x374>
    305a:	34 fc       	sbrc	r3, 4
    305c:	16 c0       	rjmp	.+44     	; 0x308a <vfprintf+0x39a>
    305e:	85 e6       	ldi	r24, 0x65	; 101
    3060:	90 e0       	ldi	r25, 0x00	; 0
    3062:	15 c0       	rjmp	.+42     	; 0x308e <vfprintf+0x39e>
    3064:	b6 01       	movw	r22, r12
    3066:	8e e2       	ldi	r24, 0x2E	; 46
    3068:	90 e0       	ldi	r25, 0x00	; 0
    306a:	42 d4       	rcall	.+2180   	; 0x38f0 <fputc>
    306c:	82 e0       	ldi	r24, 0x02	; 2
    306e:	ee 24       	eor	r14, r14
    3070:	e3 94       	inc	r14
    3072:	e8 0e       	add	r14, r24
    3074:	f3 01       	movw	r30, r6
    3076:	e8 0f       	add	r30, r24
    3078:	f1 1d       	adc	r31, r1
    307a:	80 81       	ld	r24, Z
    307c:	b6 01       	movw	r22, r12
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	37 d4       	rcall	.+2158   	; 0x38f0 <fputc>
    3082:	11 50       	subi	r17, 0x01	; 1
    3084:	8e 2d       	mov	r24, r14
    3086:	99 f7       	brne	.-26     	; 0x306e <vfprintf+0x37e>
    3088:	e8 cf       	rjmp	.-48     	; 0x305a <vfprintf+0x36a>
    308a:	85 e4       	ldi	r24, 0x45	; 69
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	b6 01       	movw	r22, r12
    3090:	2f d4       	rcall	.+2142   	; 0x38f0 <fputc>
    3092:	57 fc       	sbrc	r5, 7
    3094:	05 c0       	rjmp	.+10     	; 0x30a0 <vfprintf+0x3b0>
    3096:	41 14       	cp	r4, r1
    3098:	51 04       	cpc	r5, r1
    309a:	39 f4       	brne	.+14     	; 0x30aa <vfprintf+0x3ba>
    309c:	04 ff       	sbrs	r16, 4
    309e:	05 c0       	rjmp	.+10     	; 0x30aa <vfprintf+0x3ba>
    30a0:	51 94       	neg	r5
    30a2:	41 94       	neg	r4
    30a4:	51 08       	sbc	r5, r1
    30a6:	8d e2       	ldi	r24, 0x2D	; 45
    30a8:	01 c0       	rjmp	.+2      	; 0x30ac <vfprintf+0x3bc>
    30aa:	8b e2       	ldi	r24, 0x2B	; 43
    30ac:	b6 01       	movw	r22, r12
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	1f d4       	rcall	.+2110   	; 0x38f0 <fputc>
    30b2:	80 e3       	ldi	r24, 0x30	; 48
    30b4:	9a e0       	ldi	r25, 0x0A	; 10
    30b6:	49 16       	cp	r4, r25
    30b8:	51 04       	cpc	r5, r1
    30ba:	2c f0       	brlt	.+10     	; 0x30c6 <vfprintf+0x3d6>
    30bc:	8f 5f       	subi	r24, 0xFF	; 255
    30be:	5a e0       	ldi	r21, 0x0A	; 10
    30c0:	45 1a       	sub	r4, r21
    30c2:	51 08       	sbc	r5, r1
    30c4:	f7 cf       	rjmp	.-18     	; 0x30b4 <vfprintf+0x3c4>
    30c6:	b6 01       	movw	r22, r12
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	12 d4       	rcall	.+2084   	; 0x38f0 <fputc>
    30cc:	b6 01       	movw	r22, r12
    30ce:	c2 01       	movw	r24, r4
    30d0:	c0 96       	adiw	r24, 0x30	; 48
    30d2:	0e d4       	rcall	.+2076   	; 0x38f0 <fputc>
    30d4:	4c c1       	rjmp	.+664    	; 0x336e <vfprintf+0x67e>
    30d6:	83 36       	cpi	r24, 0x63	; 99
    30d8:	31 f0       	breq	.+12     	; 0x30e6 <vfprintf+0x3f6>
    30da:	83 37       	cpi	r24, 0x73	; 115
    30dc:	79 f0       	breq	.+30     	; 0x30fc <vfprintf+0x40c>
    30de:	83 35       	cpi	r24, 0x53	; 83
    30e0:	09 f0       	breq	.+2      	; 0x30e4 <vfprintf+0x3f4>
    30e2:	54 c0       	rjmp	.+168    	; 0x318c <vfprintf+0x49c>
    30e4:	20 c0       	rjmp	.+64     	; 0x3126 <vfprintf+0x436>
    30e6:	52 01       	movw	r10, r4
    30e8:	e2 e0       	ldi	r30, 0x02	; 2
    30ea:	ae 0e       	add	r10, r30
    30ec:	b1 1c       	adc	r11, r1
    30ee:	f2 01       	movw	r30, r4
    30f0:	80 81       	ld	r24, Z
    30f2:	89 83       	std	Y+1, r24	; 0x01
    30f4:	01 e0       	ldi	r16, 0x01	; 1
    30f6:	10 e0       	ldi	r17, 0x00	; 0
    30f8:	23 01       	movw	r4, r6
    30fa:	13 c0       	rjmp	.+38     	; 0x3122 <vfprintf+0x432>
    30fc:	52 01       	movw	r10, r4
    30fe:	f2 e0       	ldi	r31, 0x02	; 2
    3100:	af 0e       	add	r10, r31
    3102:	b1 1c       	adc	r11, r1
    3104:	f2 01       	movw	r30, r4
    3106:	40 80       	ld	r4, Z
    3108:	51 80       	ldd	r5, Z+1	; 0x01
    310a:	26 ff       	sbrs	r18, 6
    310c:	03 c0       	rjmp	.+6      	; 0x3114 <vfprintf+0x424>
    310e:	61 2f       	mov	r22, r17
    3110:	70 e0       	ldi	r23, 0x00	; 0
    3112:	02 c0       	rjmp	.+4      	; 0x3118 <vfprintf+0x428>
    3114:	6f ef       	ldi	r22, 0xFF	; 255
    3116:	7f ef       	ldi	r23, 0xFF	; 255
    3118:	c2 01       	movw	r24, r4
    311a:	2a 8b       	std	Y+18, r18	; 0x12
    311c:	de d3       	rcall	.+1980   	; 0x38da <strnlen>
    311e:	8c 01       	movw	r16, r24
    3120:	2a 89       	ldd	r18, Y+18	; 0x12
    3122:	2f 77       	andi	r18, 0x7F	; 127
    3124:	14 c0       	rjmp	.+40     	; 0x314e <vfprintf+0x45e>
    3126:	52 01       	movw	r10, r4
    3128:	f2 e0       	ldi	r31, 0x02	; 2
    312a:	af 0e       	add	r10, r31
    312c:	b1 1c       	adc	r11, r1
    312e:	f2 01       	movw	r30, r4
    3130:	40 80       	ld	r4, Z
    3132:	51 80       	ldd	r5, Z+1	; 0x01
    3134:	26 ff       	sbrs	r18, 6
    3136:	03 c0       	rjmp	.+6      	; 0x313e <vfprintf+0x44e>
    3138:	61 2f       	mov	r22, r17
    313a:	70 e0       	ldi	r23, 0x00	; 0
    313c:	02 c0       	rjmp	.+4      	; 0x3142 <vfprintf+0x452>
    313e:	6f ef       	ldi	r22, 0xFF	; 255
    3140:	7f ef       	ldi	r23, 0xFF	; 255
    3142:	c2 01       	movw	r24, r4
    3144:	2a 8b       	std	Y+18, r18	; 0x12
    3146:	be d3       	rcall	.+1916   	; 0x38c4 <strnlen_P>
    3148:	8c 01       	movw	r16, r24
    314a:	2a 89       	ldd	r18, Y+18	; 0x12
    314c:	20 68       	ori	r18, 0x80	; 128
    314e:	32 2e       	mov	r3, r18
    3150:	23 fd       	sbrc	r18, 3
    3152:	18 c0       	rjmp	.+48     	; 0x3184 <vfprintf+0x494>
    3154:	8f 2d       	mov	r24, r15
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	08 17       	cp	r16, r24
    315a:	19 07       	cpc	r17, r25
    315c:	98 f4       	brcc	.+38     	; 0x3184 <vfprintf+0x494>
    315e:	b6 01       	movw	r22, r12
    3160:	80 e2       	ldi	r24, 0x20	; 32
    3162:	90 e0       	ldi	r25, 0x00	; 0
    3164:	c5 d3       	rcall	.+1930   	; 0x38f0 <fputc>
    3166:	fa 94       	dec	r15
    3168:	f5 cf       	rjmp	.-22     	; 0x3154 <vfprintf+0x464>
    316a:	f2 01       	movw	r30, r4
    316c:	37 fc       	sbrc	r3, 7
    316e:	85 91       	lpm	r24, Z+
    3170:	37 fe       	sbrs	r3, 7
    3172:	81 91       	ld	r24, Z+
    3174:	2f 01       	movw	r4, r30
    3176:	b6 01       	movw	r22, r12
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	ba d3       	rcall	.+1908   	; 0x38f0 <fputc>
    317c:	f1 10       	cpse	r15, r1
    317e:	fa 94       	dec	r15
    3180:	01 50       	subi	r16, 0x01	; 1
    3182:	11 09       	sbc	r17, r1
    3184:	01 15       	cp	r16, r1
    3186:	11 05       	cpc	r17, r1
    3188:	81 f7       	brne	.-32     	; 0x316a <vfprintf+0x47a>
    318a:	f1 c0       	rjmp	.+482    	; 0x336e <vfprintf+0x67e>
    318c:	84 36       	cpi	r24, 0x64	; 100
    318e:	11 f0       	breq	.+4      	; 0x3194 <vfprintf+0x4a4>
    3190:	89 36       	cpi	r24, 0x69	; 105
    3192:	51 f5       	brne	.+84     	; 0x31e8 <vfprintf+0x4f8>
    3194:	52 01       	movw	r10, r4
    3196:	27 ff       	sbrs	r18, 7
    3198:	09 c0       	rjmp	.+18     	; 0x31ac <vfprintf+0x4bc>
    319a:	f4 e0       	ldi	r31, 0x04	; 4
    319c:	af 0e       	add	r10, r31
    319e:	b1 1c       	adc	r11, r1
    31a0:	f2 01       	movw	r30, r4
    31a2:	60 81       	ld	r22, Z
    31a4:	71 81       	ldd	r23, Z+1	; 0x01
    31a6:	82 81       	ldd	r24, Z+2	; 0x02
    31a8:	93 81       	ldd	r25, Z+3	; 0x03
    31aa:	0a c0       	rjmp	.+20     	; 0x31c0 <vfprintf+0x4d0>
    31ac:	f2 e0       	ldi	r31, 0x02	; 2
    31ae:	af 0e       	add	r10, r31
    31b0:	b1 1c       	adc	r11, r1
    31b2:	f2 01       	movw	r30, r4
    31b4:	60 81       	ld	r22, Z
    31b6:	71 81       	ldd	r23, Z+1	; 0x01
    31b8:	07 2e       	mov	r0, r23
    31ba:	00 0c       	add	r0, r0
    31bc:	88 0b       	sbc	r24, r24
    31be:	99 0b       	sbc	r25, r25
    31c0:	2f 76       	andi	r18, 0x6F	; 111
    31c2:	32 2e       	mov	r3, r18
    31c4:	97 ff       	sbrs	r25, 7
    31c6:	09 c0       	rjmp	.+18     	; 0x31da <vfprintf+0x4ea>
    31c8:	90 95       	com	r25
    31ca:	80 95       	com	r24
    31cc:	70 95       	com	r23
    31ce:	61 95       	neg	r22
    31d0:	7f 4f       	sbci	r23, 0xFF	; 255
    31d2:	8f 4f       	sbci	r24, 0xFF	; 255
    31d4:	9f 4f       	sbci	r25, 0xFF	; 255
    31d6:	20 68       	ori	r18, 0x80	; 128
    31d8:	32 2e       	mov	r3, r18
    31da:	2a e0       	ldi	r18, 0x0A	; 10
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	a3 01       	movw	r20, r6
    31e0:	07 d4       	rcall	.+2062   	; 0x39f0 <__ultoa_invert>
    31e2:	e8 2e       	mov	r14, r24
    31e4:	e6 18       	sub	r14, r6
    31e6:	3e c0       	rjmp	.+124    	; 0x3264 <vfprintf+0x574>
    31e8:	02 2f       	mov	r16, r18
    31ea:	85 37       	cpi	r24, 0x75	; 117
    31ec:	21 f4       	brne	.+8      	; 0x31f6 <vfprintf+0x506>
    31ee:	0f 7e       	andi	r16, 0xEF	; 239
    31f0:	2a e0       	ldi	r18, 0x0A	; 10
    31f2:	30 e0       	ldi	r19, 0x00	; 0
    31f4:	1d c0       	rjmp	.+58     	; 0x3230 <vfprintf+0x540>
    31f6:	09 7f       	andi	r16, 0xF9	; 249
    31f8:	8f 36       	cpi	r24, 0x6F	; 111
    31fa:	91 f0       	breq	.+36     	; 0x3220 <vfprintf+0x530>
    31fc:	18 f4       	brcc	.+6      	; 0x3204 <vfprintf+0x514>
    31fe:	88 35       	cpi	r24, 0x58	; 88
    3200:	59 f0       	breq	.+22     	; 0x3218 <vfprintf+0x528>
    3202:	be c0       	rjmp	.+380    	; 0x3380 <vfprintf+0x690>
    3204:	80 37       	cpi	r24, 0x70	; 112
    3206:	19 f0       	breq	.+6      	; 0x320e <vfprintf+0x51e>
    3208:	88 37       	cpi	r24, 0x78	; 120
    320a:	11 f0       	breq	.+4      	; 0x3210 <vfprintf+0x520>
    320c:	b9 c0       	rjmp	.+370    	; 0x3380 <vfprintf+0x690>
    320e:	00 61       	ori	r16, 0x10	; 16
    3210:	04 ff       	sbrs	r16, 4
    3212:	09 c0       	rjmp	.+18     	; 0x3226 <vfprintf+0x536>
    3214:	04 60       	ori	r16, 0x04	; 4
    3216:	07 c0       	rjmp	.+14     	; 0x3226 <vfprintf+0x536>
    3218:	24 ff       	sbrs	r18, 4
    321a:	08 c0       	rjmp	.+16     	; 0x322c <vfprintf+0x53c>
    321c:	06 60       	ori	r16, 0x06	; 6
    321e:	06 c0       	rjmp	.+12     	; 0x322c <vfprintf+0x53c>
    3220:	28 e0       	ldi	r18, 0x08	; 8
    3222:	30 e0       	ldi	r19, 0x00	; 0
    3224:	05 c0       	rjmp	.+10     	; 0x3230 <vfprintf+0x540>
    3226:	20 e1       	ldi	r18, 0x10	; 16
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	02 c0       	rjmp	.+4      	; 0x3230 <vfprintf+0x540>
    322c:	20 e1       	ldi	r18, 0x10	; 16
    322e:	32 e0       	ldi	r19, 0x02	; 2
    3230:	52 01       	movw	r10, r4
    3232:	07 ff       	sbrs	r16, 7
    3234:	09 c0       	rjmp	.+18     	; 0x3248 <vfprintf+0x558>
    3236:	f4 e0       	ldi	r31, 0x04	; 4
    3238:	af 0e       	add	r10, r31
    323a:	b1 1c       	adc	r11, r1
    323c:	f2 01       	movw	r30, r4
    323e:	60 81       	ld	r22, Z
    3240:	71 81       	ldd	r23, Z+1	; 0x01
    3242:	82 81       	ldd	r24, Z+2	; 0x02
    3244:	93 81       	ldd	r25, Z+3	; 0x03
    3246:	08 c0       	rjmp	.+16     	; 0x3258 <vfprintf+0x568>
    3248:	f2 e0       	ldi	r31, 0x02	; 2
    324a:	af 0e       	add	r10, r31
    324c:	b1 1c       	adc	r11, r1
    324e:	f2 01       	movw	r30, r4
    3250:	60 81       	ld	r22, Z
    3252:	71 81       	ldd	r23, Z+1	; 0x01
    3254:	80 e0       	ldi	r24, 0x00	; 0
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	a3 01       	movw	r20, r6
    325a:	ca d3       	rcall	.+1940   	; 0x39f0 <__ultoa_invert>
    325c:	e8 2e       	mov	r14, r24
    325e:	e6 18       	sub	r14, r6
    3260:	0f 77       	andi	r16, 0x7F	; 127
    3262:	30 2e       	mov	r3, r16
    3264:	36 fe       	sbrs	r3, 6
    3266:	0b c0       	rjmp	.+22     	; 0x327e <vfprintf+0x58e>
    3268:	33 2d       	mov	r19, r3
    326a:	3e 7f       	andi	r19, 0xFE	; 254
    326c:	e1 16       	cp	r14, r17
    326e:	50 f4       	brcc	.+20     	; 0x3284 <vfprintf+0x594>
    3270:	34 fe       	sbrs	r3, 4
    3272:	0a c0       	rjmp	.+20     	; 0x3288 <vfprintf+0x598>
    3274:	32 fc       	sbrc	r3, 2
    3276:	08 c0       	rjmp	.+16     	; 0x3288 <vfprintf+0x598>
    3278:	33 2d       	mov	r19, r3
    327a:	3e 7e       	andi	r19, 0xEE	; 238
    327c:	05 c0       	rjmp	.+10     	; 0x3288 <vfprintf+0x598>
    327e:	0e 2d       	mov	r16, r14
    3280:	33 2d       	mov	r19, r3
    3282:	03 c0       	rjmp	.+6      	; 0x328a <vfprintf+0x59a>
    3284:	0e 2d       	mov	r16, r14
    3286:	01 c0       	rjmp	.+2      	; 0x328a <vfprintf+0x59a>
    3288:	01 2f       	mov	r16, r17
    328a:	34 ff       	sbrs	r19, 4
    328c:	0c c0       	rjmp	.+24     	; 0x32a6 <vfprintf+0x5b6>
    328e:	fe 01       	movw	r30, r28
    3290:	ee 0d       	add	r30, r14
    3292:	f1 1d       	adc	r31, r1
    3294:	80 81       	ld	r24, Z
    3296:	80 33       	cpi	r24, 0x30	; 48
    3298:	11 f4       	brne	.+4      	; 0x329e <vfprintf+0x5ae>
    329a:	39 7e       	andi	r19, 0xE9	; 233
    329c:	08 c0       	rjmp	.+16     	; 0x32ae <vfprintf+0x5be>
    329e:	32 ff       	sbrs	r19, 2
    32a0:	05 c0       	rjmp	.+10     	; 0x32ac <vfprintf+0x5bc>
    32a2:	0e 5f       	subi	r16, 0xFE	; 254
    32a4:	04 c0       	rjmp	.+8      	; 0x32ae <vfprintf+0x5be>
    32a6:	83 2f       	mov	r24, r19
    32a8:	86 78       	andi	r24, 0x86	; 134
    32aa:	09 f0       	breq	.+2      	; 0x32ae <vfprintf+0x5be>
    32ac:	0f 5f       	subi	r16, 0xFF	; 255
    32ae:	33 fd       	sbrc	r19, 3
    32b0:	12 c0       	rjmp	.+36     	; 0x32d6 <vfprintf+0x5e6>
    32b2:	30 ff       	sbrs	r19, 0
    32b4:	06 c0       	rjmp	.+12     	; 0x32c2 <vfprintf+0x5d2>
    32b6:	1e 2d       	mov	r17, r14
    32b8:	0f 15       	cp	r16, r15
    32ba:	18 f4       	brcc	.+6      	; 0x32c2 <vfprintf+0x5d2>
    32bc:	1f 0d       	add	r17, r15
    32be:	10 1b       	sub	r17, r16
    32c0:	0f 2d       	mov	r16, r15
    32c2:	0f 15       	cp	r16, r15
    32c4:	60 f4       	brcc	.+24     	; 0x32de <vfprintf+0x5ee>
    32c6:	b6 01       	movw	r22, r12
    32c8:	80 e2       	ldi	r24, 0x20	; 32
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	3b 8b       	std	Y+19, r19	; 0x13
    32ce:	10 d3       	rcall	.+1568   	; 0x38f0 <fputc>
    32d0:	0f 5f       	subi	r16, 0xFF	; 255
    32d2:	3b 89       	ldd	r19, Y+19	; 0x13
    32d4:	f6 cf       	rjmp	.-20     	; 0x32c2 <vfprintf+0x5d2>
    32d6:	0f 15       	cp	r16, r15
    32d8:	10 f4       	brcc	.+4      	; 0x32de <vfprintf+0x5ee>
    32da:	f0 1a       	sub	r15, r16
    32dc:	01 c0       	rjmp	.+2      	; 0x32e0 <vfprintf+0x5f0>
    32de:	f1 2c       	mov	r15, r1
    32e0:	34 ff       	sbrs	r19, 4
    32e2:	11 c0       	rjmp	.+34     	; 0x3306 <vfprintf+0x616>
    32e4:	b6 01       	movw	r22, r12
    32e6:	80 e3       	ldi	r24, 0x30	; 48
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	3b 8b       	std	Y+19, r19	; 0x13
    32ec:	01 d3       	rcall	.+1538   	; 0x38f0 <fputc>
    32ee:	3b 89       	ldd	r19, Y+19	; 0x13
    32f0:	32 ff       	sbrs	r19, 2
    32f2:	16 c0       	rjmp	.+44     	; 0x3320 <vfprintf+0x630>
    32f4:	31 fd       	sbrc	r19, 1
    32f6:	03 c0       	rjmp	.+6      	; 0x32fe <vfprintf+0x60e>
    32f8:	88 e7       	ldi	r24, 0x78	; 120
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	02 c0       	rjmp	.+4      	; 0x3302 <vfprintf+0x612>
    32fe:	88 e5       	ldi	r24, 0x58	; 88
    3300:	90 e0       	ldi	r25, 0x00	; 0
    3302:	b6 01       	movw	r22, r12
    3304:	0c c0       	rjmp	.+24     	; 0x331e <vfprintf+0x62e>
    3306:	83 2f       	mov	r24, r19
    3308:	86 78       	andi	r24, 0x86	; 134
    330a:	51 f0       	breq	.+20     	; 0x3320 <vfprintf+0x630>
    330c:	31 ff       	sbrs	r19, 1
    330e:	02 c0       	rjmp	.+4      	; 0x3314 <vfprintf+0x624>
    3310:	8b e2       	ldi	r24, 0x2B	; 43
    3312:	01 c0       	rjmp	.+2      	; 0x3316 <vfprintf+0x626>
    3314:	80 e2       	ldi	r24, 0x20	; 32
    3316:	37 fd       	sbrc	r19, 7
    3318:	8d e2       	ldi	r24, 0x2D	; 45
    331a:	b6 01       	movw	r22, r12
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	e8 d2       	rcall	.+1488   	; 0x38f0 <fputc>
    3320:	e1 16       	cp	r14, r17
    3322:	30 f4       	brcc	.+12     	; 0x3330 <vfprintf+0x640>
    3324:	b6 01       	movw	r22, r12
    3326:	80 e3       	ldi	r24, 0x30	; 48
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	e2 d2       	rcall	.+1476   	; 0x38f0 <fputc>
    332c:	11 50       	subi	r17, 0x01	; 1
    332e:	f8 cf       	rjmp	.-16     	; 0x3320 <vfprintf+0x630>
    3330:	ea 94       	dec	r14
    3332:	f3 01       	movw	r30, r6
    3334:	ee 0d       	add	r30, r14
    3336:	f1 1d       	adc	r31, r1
    3338:	80 81       	ld	r24, Z
    333a:	b6 01       	movw	r22, r12
    333c:	90 e0       	ldi	r25, 0x00	; 0
    333e:	d8 d2       	rcall	.+1456   	; 0x38f0 <fputc>
    3340:	e1 10       	cpse	r14, r1
    3342:	f6 cf       	rjmp	.-20     	; 0x3330 <vfprintf+0x640>
    3344:	14 c0       	rjmp	.+40     	; 0x336e <vfprintf+0x67e>
    3346:	f4 e0       	ldi	r31, 0x04	; 4
    3348:	ff 15       	cp	r31, r15
    334a:	48 f5       	brcc	.+82     	; 0x339e <vfprintf+0x6ae>
    334c:	84 e0       	ldi	r24, 0x04	; 4
    334e:	f8 1a       	sub	r15, r24
    3350:	33 fe       	sbrs	r3, 3
    3352:	1d c0       	rjmp	.+58     	; 0x338e <vfprintf+0x69e>
    3354:	21 10       	cpse	r2, r1
    3356:	24 c0       	rjmp	.+72     	; 0x33a0 <vfprintf+0x6b0>
    3358:	03 ff       	sbrs	r16, 3
    335a:	27 c0       	rjmp	.+78     	; 0x33aa <vfprintf+0x6ba>
    335c:	04 e3       	ldi	r16, 0x34	; 52
    335e:	11 e0       	ldi	r17, 0x01	; 1
    3360:	f3 2d       	mov	r31, r3
    3362:	f0 71       	andi	r31, 0x10	; 16
    3364:	3f 2e       	mov	r3, r31
    3366:	f8 01       	movw	r30, r16
    3368:	84 91       	lpm	r24, Z
    336a:	81 11       	cpse	r24, r1
    336c:	21 c0       	rjmp	.+66     	; 0x33b0 <vfprintf+0x6c0>
    336e:	ff 20       	and	r15, r15
    3370:	09 f4       	brne	.+2      	; 0x3374 <vfprintf+0x684>
    3372:	fd cc       	rjmp	.-1542   	; 0x2d6e <vfprintf+0x7e>
    3374:	b6 01       	movw	r22, r12
    3376:	80 e2       	ldi	r24, 0x20	; 32
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	ba d2       	rcall	.+1396   	; 0x38f0 <fputc>
    337c:	fa 94       	dec	r15
    337e:	f7 cf       	rjmp	.-18     	; 0x336e <vfprintf+0x67e>
    3380:	f6 01       	movw	r30, r12
    3382:	86 81       	ldd	r24, Z+6	; 0x06
    3384:	97 81       	ldd	r25, Z+7	; 0x07
    3386:	23 c0       	rjmp	.+70     	; 0x33ce <vfprintf+0x6de>
    3388:	8f ef       	ldi	r24, 0xFF	; 255
    338a:	9f ef       	ldi	r25, 0xFF	; 255
    338c:	20 c0       	rjmp	.+64     	; 0x33ce <vfprintf+0x6de>
    338e:	b6 01       	movw	r22, r12
    3390:	80 e2       	ldi	r24, 0x20	; 32
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	ad d2       	rcall	.+1370   	; 0x38f0 <fputc>
    3396:	fa 94       	dec	r15
    3398:	f1 10       	cpse	r15, r1
    339a:	f9 cf       	rjmp	.-14     	; 0x338e <vfprintf+0x69e>
    339c:	db cf       	rjmp	.-74     	; 0x3354 <vfprintf+0x664>
    339e:	f1 2c       	mov	r15, r1
    33a0:	b6 01       	movw	r22, r12
    33a2:	82 2d       	mov	r24, r2
    33a4:	90 e0       	ldi	r25, 0x00	; 0
    33a6:	a4 d2       	rcall	.+1352   	; 0x38f0 <fputc>
    33a8:	d7 cf       	rjmp	.-82     	; 0x3358 <vfprintf+0x668>
    33aa:	08 e3       	ldi	r16, 0x38	; 56
    33ac:	11 e0       	ldi	r17, 0x01	; 1
    33ae:	d8 cf       	rjmp	.-80     	; 0x3360 <vfprintf+0x670>
    33b0:	31 10       	cpse	r3, r1
    33b2:	80 52       	subi	r24, 0x20	; 32
    33b4:	b6 01       	movw	r22, r12
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	9b d2       	rcall	.+1334   	; 0x38f0 <fputc>
    33ba:	0f 5f       	subi	r16, 0xFF	; 255
    33bc:	1f 4f       	sbci	r17, 0xFF	; 255
    33be:	d3 cf       	rjmp	.-90     	; 0x3366 <vfprintf+0x676>
    33c0:	23 e0       	ldi	r18, 0x03	; 3
    33c2:	2f 15       	cp	r18, r15
    33c4:	10 f4       	brcc	.+4      	; 0x33ca <vfprintf+0x6da>
    33c6:	83 e0       	ldi	r24, 0x03	; 3
    33c8:	c2 cf       	rjmp	.-124    	; 0x334e <vfprintf+0x65e>
    33ca:	f1 2c       	mov	r15, r1
    33cc:	c5 cf       	rjmp	.-118    	; 0x3358 <vfprintf+0x668>
    33ce:	63 96       	adiw	r28, 0x13	; 19
    33d0:	0f b6       	in	r0, 0x3f	; 63
    33d2:	f8 94       	cli
    33d4:	de bf       	out	0x3e, r29	; 62
    33d6:	0f be       	out	0x3f, r0	; 63
    33d8:	cd bf       	out	0x3d, r28	; 61
    33da:	df 91       	pop	r29
    33dc:	cf 91       	pop	r28
    33de:	1f 91       	pop	r17
    33e0:	0f 91       	pop	r16
    33e2:	ff 90       	pop	r15
    33e4:	ef 90       	pop	r14
    33e6:	df 90       	pop	r13
    33e8:	cf 90       	pop	r12
    33ea:	bf 90       	pop	r11
    33ec:	af 90       	pop	r10
    33ee:	9f 90       	pop	r9
    33f0:	8f 90       	pop	r8
    33f2:	7f 90       	pop	r7
    33f4:	6f 90       	pop	r6
    33f6:	5f 90       	pop	r5
    33f8:	4f 90       	pop	r4
    33fa:	3f 90       	pop	r3
    33fc:	2f 90       	pop	r2
    33fe:	08 95       	ret

00003400 <__udivmodsi4>:
    3400:	a1 e2       	ldi	r26, 0x21	; 33
    3402:	1a 2e       	mov	r1, r26
    3404:	aa 1b       	sub	r26, r26
    3406:	bb 1b       	sub	r27, r27
    3408:	fd 01       	movw	r30, r26
    340a:	0d c0       	rjmp	.+26     	; 0x3426 <__udivmodsi4_ep>

0000340c <__udivmodsi4_loop>:
    340c:	aa 1f       	adc	r26, r26
    340e:	bb 1f       	adc	r27, r27
    3410:	ee 1f       	adc	r30, r30
    3412:	ff 1f       	adc	r31, r31
    3414:	a2 17       	cp	r26, r18
    3416:	b3 07       	cpc	r27, r19
    3418:	e4 07       	cpc	r30, r20
    341a:	f5 07       	cpc	r31, r21
    341c:	20 f0       	brcs	.+8      	; 0x3426 <__udivmodsi4_ep>
    341e:	a2 1b       	sub	r26, r18
    3420:	b3 0b       	sbc	r27, r19
    3422:	e4 0b       	sbc	r30, r20
    3424:	f5 0b       	sbc	r31, r21

00003426 <__udivmodsi4_ep>:
    3426:	66 1f       	adc	r22, r22
    3428:	77 1f       	adc	r23, r23
    342a:	88 1f       	adc	r24, r24
    342c:	99 1f       	adc	r25, r25
    342e:	1a 94       	dec	r1
    3430:	69 f7       	brne	.-38     	; 0x340c <__udivmodsi4_loop>
    3432:	60 95       	com	r22
    3434:	70 95       	com	r23
    3436:	80 95       	com	r24
    3438:	90 95       	com	r25
    343a:	9b 01       	movw	r18, r22
    343c:	ac 01       	movw	r20, r24
    343e:	bd 01       	movw	r22, r26
    3440:	cf 01       	movw	r24, r30
    3442:	08 95       	ret

00003444 <__divmodsi4>:
    3444:	05 2e       	mov	r0, r21
    3446:	97 fb       	bst	r25, 7
    3448:	16 f4       	brtc	.+4      	; 0x344e <__divmodsi4+0xa>
    344a:	00 94       	com	r0
    344c:	0f d0       	rcall	.+30     	; 0x346c <__negsi2>
    344e:	57 fd       	sbrc	r21, 7
    3450:	05 d0       	rcall	.+10     	; 0x345c <__divmodsi4_neg2>
    3452:	d6 df       	rcall	.-84     	; 0x3400 <__udivmodsi4>
    3454:	07 fc       	sbrc	r0, 7
    3456:	02 d0       	rcall	.+4      	; 0x345c <__divmodsi4_neg2>
    3458:	46 f4       	brtc	.+16     	; 0x346a <__divmodsi4_exit>
    345a:	08 c0       	rjmp	.+16     	; 0x346c <__negsi2>

0000345c <__divmodsi4_neg2>:
    345c:	50 95       	com	r21
    345e:	40 95       	com	r20
    3460:	30 95       	com	r19
    3462:	21 95       	neg	r18
    3464:	3f 4f       	sbci	r19, 0xFF	; 255
    3466:	4f 4f       	sbci	r20, 0xFF	; 255
    3468:	5f 4f       	sbci	r21, 0xFF	; 255

0000346a <__divmodsi4_exit>:
    346a:	08 95       	ret

0000346c <__negsi2>:
    346c:	90 95       	com	r25
    346e:	80 95       	com	r24
    3470:	70 95       	com	r23
    3472:	61 95       	neg	r22
    3474:	7f 4f       	sbci	r23, 0xFF	; 255
    3476:	8f 4f       	sbci	r24, 0xFF	; 255
    3478:	9f 4f       	sbci	r25, 0xFF	; 255
    347a:	08 95       	ret

0000347c <__mulshisi3>:
    347c:	b7 ff       	sbrs	r27, 7
    347e:	04 c0       	rjmp	.+8      	; 0x3488 <__muluhisi3>

00003480 <__mulohisi3>:
    3480:	03 d0       	rcall	.+6      	; 0x3488 <__muluhisi3>
    3482:	82 1b       	sub	r24, r18
    3484:	93 0b       	sbc	r25, r19
    3486:	08 95       	ret

00003488 <__muluhisi3>:
    3488:	09 d0       	rcall	.+18     	; 0x349c <__umulhisi3>
    348a:	a5 9f       	mul	r26, r21
    348c:	90 0d       	add	r25, r0
    348e:	b4 9f       	mul	r27, r20
    3490:	90 0d       	add	r25, r0
    3492:	a4 9f       	mul	r26, r20
    3494:	80 0d       	add	r24, r0
    3496:	91 1d       	adc	r25, r1
    3498:	11 24       	eor	r1, r1
    349a:	08 95       	ret

0000349c <__umulhisi3>:
    349c:	a2 9f       	mul	r26, r18
    349e:	b0 01       	movw	r22, r0
    34a0:	b3 9f       	mul	r27, r19
    34a2:	c0 01       	movw	r24, r0
    34a4:	a3 9f       	mul	r26, r19
    34a6:	70 0d       	add	r23, r0
    34a8:	81 1d       	adc	r24, r1
    34aa:	11 24       	eor	r1, r1
    34ac:	91 1d       	adc	r25, r1
    34ae:	b2 9f       	mul	r27, r18
    34b0:	70 0d       	add	r23, r0
    34b2:	81 1d       	adc	r24, r1
    34b4:	11 24       	eor	r1, r1
    34b6:	91 1d       	adc	r25, r1
    34b8:	08 95       	ret

000034ba <malloc>:
    34ba:	cf 93       	push	r28
    34bc:	df 93       	push	r29
    34be:	82 30       	cpi	r24, 0x02	; 2
    34c0:	91 05       	cpc	r25, r1
    34c2:	10 f4       	brcc	.+4      	; 0x34c8 <malloc+0xe>
    34c4:	82 e0       	ldi	r24, 0x02	; 2
    34c6:	90 e0       	ldi	r25, 0x00	; 0
    34c8:	e0 91 78 0b 	lds	r30, 0x0B78
    34cc:	f0 91 79 0b 	lds	r31, 0x0B79
    34d0:	20 e0       	ldi	r18, 0x00	; 0
    34d2:	30 e0       	ldi	r19, 0x00	; 0
    34d4:	c0 e0       	ldi	r28, 0x00	; 0
    34d6:	d0 e0       	ldi	r29, 0x00	; 0
    34d8:	30 97       	sbiw	r30, 0x00	; 0
    34da:	11 f1       	breq	.+68     	; 0x3520 <malloc+0x66>
    34dc:	40 81       	ld	r20, Z
    34de:	51 81       	ldd	r21, Z+1	; 0x01
    34e0:	48 17       	cp	r20, r24
    34e2:	59 07       	cpc	r21, r25
    34e4:	c0 f0       	brcs	.+48     	; 0x3516 <malloc+0x5c>
    34e6:	48 17       	cp	r20, r24
    34e8:	59 07       	cpc	r21, r25
    34ea:	61 f4       	brne	.+24     	; 0x3504 <malloc+0x4a>
    34ec:	82 81       	ldd	r24, Z+2	; 0x02
    34ee:	93 81       	ldd	r25, Z+3	; 0x03
    34f0:	20 97       	sbiw	r28, 0x00	; 0
    34f2:	19 f0       	breq	.+6      	; 0x34fa <malloc+0x40>
    34f4:	9b 83       	std	Y+3, r25	; 0x03
    34f6:	8a 83       	std	Y+2, r24	; 0x02
    34f8:	2b c0       	rjmp	.+86     	; 0x3550 <malloc+0x96>
    34fa:	90 93 79 0b 	sts	0x0B79, r25
    34fe:	80 93 78 0b 	sts	0x0B78, r24
    3502:	26 c0       	rjmp	.+76     	; 0x3550 <malloc+0x96>
    3504:	21 15       	cp	r18, r1
    3506:	31 05       	cpc	r19, r1
    3508:	19 f0       	breq	.+6      	; 0x3510 <malloc+0x56>
    350a:	42 17       	cp	r20, r18
    350c:	53 07       	cpc	r21, r19
    350e:	18 f4       	brcc	.+6      	; 0x3516 <malloc+0x5c>
    3510:	9a 01       	movw	r18, r20
    3512:	be 01       	movw	r22, r28
    3514:	df 01       	movw	r26, r30
    3516:	ef 01       	movw	r28, r30
    3518:	02 80       	ldd	r0, Z+2	; 0x02
    351a:	f3 81       	ldd	r31, Z+3	; 0x03
    351c:	e0 2d       	mov	r30, r0
    351e:	dc cf       	rjmp	.-72     	; 0x34d8 <malloc+0x1e>
    3520:	21 15       	cp	r18, r1
    3522:	31 05       	cpc	r19, r1
    3524:	09 f1       	breq	.+66     	; 0x3568 <malloc+0xae>
    3526:	28 1b       	sub	r18, r24
    3528:	39 0b       	sbc	r19, r25
    352a:	24 30       	cpi	r18, 0x04	; 4
    352c:	31 05       	cpc	r19, r1
    352e:	90 f4       	brcc	.+36     	; 0x3554 <malloc+0x9a>
    3530:	12 96       	adiw	r26, 0x02	; 2
    3532:	8d 91       	ld	r24, X+
    3534:	9c 91       	ld	r25, X
    3536:	13 97       	sbiw	r26, 0x03	; 3
    3538:	61 15       	cp	r22, r1
    353a:	71 05       	cpc	r23, r1
    353c:	21 f0       	breq	.+8      	; 0x3546 <malloc+0x8c>
    353e:	fb 01       	movw	r30, r22
    3540:	93 83       	std	Z+3, r25	; 0x03
    3542:	82 83       	std	Z+2, r24	; 0x02
    3544:	04 c0       	rjmp	.+8      	; 0x354e <malloc+0x94>
    3546:	90 93 79 0b 	sts	0x0B79, r25
    354a:	80 93 78 0b 	sts	0x0B78, r24
    354e:	fd 01       	movw	r30, r26
    3550:	32 96       	adiw	r30, 0x02	; 2
    3552:	44 c0       	rjmp	.+136    	; 0x35dc <malloc+0x122>
    3554:	fd 01       	movw	r30, r26
    3556:	e2 0f       	add	r30, r18
    3558:	f3 1f       	adc	r31, r19
    355a:	81 93       	st	Z+, r24
    355c:	91 93       	st	Z+, r25
    355e:	22 50       	subi	r18, 0x02	; 2
    3560:	31 09       	sbc	r19, r1
    3562:	2d 93       	st	X+, r18
    3564:	3c 93       	st	X, r19
    3566:	3a c0       	rjmp	.+116    	; 0x35dc <malloc+0x122>
    3568:	20 91 76 0b 	lds	r18, 0x0B76
    356c:	30 91 77 0b 	lds	r19, 0x0B77
    3570:	23 2b       	or	r18, r19
    3572:	41 f4       	brne	.+16     	; 0x3584 <malloc+0xca>
    3574:	20 91 02 02 	lds	r18, 0x0202
    3578:	30 91 03 02 	lds	r19, 0x0203
    357c:	30 93 77 0b 	sts	0x0B77, r19
    3580:	20 93 76 0b 	sts	0x0B76, r18
    3584:	20 91 00 02 	lds	r18, 0x0200
    3588:	30 91 01 02 	lds	r19, 0x0201
    358c:	21 15       	cp	r18, r1
    358e:	31 05       	cpc	r19, r1
    3590:	41 f4       	brne	.+16     	; 0x35a2 <malloc+0xe8>
    3592:	2d b7       	in	r18, 0x3d	; 61
    3594:	3e b7       	in	r19, 0x3e	; 62
    3596:	40 91 04 02 	lds	r20, 0x0204
    359a:	50 91 05 02 	lds	r21, 0x0205
    359e:	24 1b       	sub	r18, r20
    35a0:	35 0b       	sbc	r19, r21
    35a2:	e0 91 76 0b 	lds	r30, 0x0B76
    35a6:	f0 91 77 0b 	lds	r31, 0x0B77
    35aa:	e2 17       	cp	r30, r18
    35ac:	f3 07       	cpc	r31, r19
    35ae:	a0 f4       	brcc	.+40     	; 0x35d8 <malloc+0x11e>
    35b0:	2e 1b       	sub	r18, r30
    35b2:	3f 0b       	sbc	r19, r31
    35b4:	28 17       	cp	r18, r24
    35b6:	39 07       	cpc	r19, r25
    35b8:	78 f0       	brcs	.+30     	; 0x35d8 <malloc+0x11e>
    35ba:	ac 01       	movw	r20, r24
    35bc:	4e 5f       	subi	r20, 0xFE	; 254
    35be:	5f 4f       	sbci	r21, 0xFF	; 255
    35c0:	24 17       	cp	r18, r20
    35c2:	35 07       	cpc	r19, r21
    35c4:	48 f0       	brcs	.+18     	; 0x35d8 <malloc+0x11e>
    35c6:	4e 0f       	add	r20, r30
    35c8:	5f 1f       	adc	r21, r31
    35ca:	50 93 77 0b 	sts	0x0B77, r21
    35ce:	40 93 76 0b 	sts	0x0B76, r20
    35d2:	81 93       	st	Z+, r24
    35d4:	91 93       	st	Z+, r25
    35d6:	02 c0       	rjmp	.+4      	; 0x35dc <malloc+0x122>
    35d8:	e0 e0       	ldi	r30, 0x00	; 0
    35da:	f0 e0       	ldi	r31, 0x00	; 0
    35dc:	cf 01       	movw	r24, r30
    35de:	df 91       	pop	r29
    35e0:	cf 91       	pop	r28
    35e2:	08 95       	ret

000035e4 <free>:
    35e4:	0f 93       	push	r16
    35e6:	1f 93       	push	r17
    35e8:	cf 93       	push	r28
    35ea:	df 93       	push	r29
    35ec:	00 97       	sbiw	r24, 0x00	; 0
    35ee:	09 f4       	brne	.+2      	; 0x35f2 <free+0xe>
    35f0:	8c c0       	rjmp	.+280    	; 0x370a <free+0x126>
    35f2:	fc 01       	movw	r30, r24
    35f4:	32 97       	sbiw	r30, 0x02	; 2
    35f6:	13 82       	std	Z+3, r1	; 0x03
    35f8:	12 82       	std	Z+2, r1	; 0x02
    35fa:	00 91 78 0b 	lds	r16, 0x0B78
    35fe:	10 91 79 0b 	lds	r17, 0x0B79
    3602:	01 15       	cp	r16, r1
    3604:	11 05       	cpc	r17, r1
    3606:	81 f4       	brne	.+32     	; 0x3628 <free+0x44>
    3608:	20 81       	ld	r18, Z
    360a:	31 81       	ldd	r19, Z+1	; 0x01
    360c:	82 0f       	add	r24, r18
    360e:	93 1f       	adc	r25, r19
    3610:	20 91 76 0b 	lds	r18, 0x0B76
    3614:	30 91 77 0b 	lds	r19, 0x0B77
    3618:	28 17       	cp	r18, r24
    361a:	39 07       	cpc	r19, r25
    361c:	79 f5       	brne	.+94     	; 0x367c <free+0x98>
    361e:	f0 93 77 0b 	sts	0x0B77, r31
    3622:	e0 93 76 0b 	sts	0x0B76, r30
    3626:	71 c0       	rjmp	.+226    	; 0x370a <free+0x126>
    3628:	d8 01       	movw	r26, r16
    362a:	40 e0       	ldi	r20, 0x00	; 0
    362c:	50 e0       	ldi	r21, 0x00	; 0
    362e:	ae 17       	cp	r26, r30
    3630:	bf 07       	cpc	r27, r31
    3632:	50 f4       	brcc	.+20     	; 0x3648 <free+0x64>
    3634:	12 96       	adiw	r26, 0x02	; 2
    3636:	2d 91       	ld	r18, X+
    3638:	3c 91       	ld	r19, X
    363a:	13 97       	sbiw	r26, 0x03	; 3
    363c:	ad 01       	movw	r20, r26
    363e:	21 15       	cp	r18, r1
    3640:	31 05       	cpc	r19, r1
    3642:	09 f1       	breq	.+66     	; 0x3686 <free+0xa2>
    3644:	d9 01       	movw	r26, r18
    3646:	f3 cf       	rjmp	.-26     	; 0x362e <free+0x4a>
    3648:	9d 01       	movw	r18, r26
    364a:	da 01       	movw	r26, r20
    364c:	33 83       	std	Z+3, r19	; 0x03
    364e:	22 83       	std	Z+2, r18	; 0x02
    3650:	60 81       	ld	r22, Z
    3652:	71 81       	ldd	r23, Z+1	; 0x01
    3654:	86 0f       	add	r24, r22
    3656:	97 1f       	adc	r25, r23
    3658:	82 17       	cp	r24, r18
    365a:	93 07       	cpc	r25, r19
    365c:	69 f4       	brne	.+26     	; 0x3678 <free+0x94>
    365e:	ec 01       	movw	r28, r24
    3660:	28 81       	ld	r18, Y
    3662:	39 81       	ldd	r19, Y+1	; 0x01
    3664:	26 0f       	add	r18, r22
    3666:	37 1f       	adc	r19, r23
    3668:	2e 5f       	subi	r18, 0xFE	; 254
    366a:	3f 4f       	sbci	r19, 0xFF	; 255
    366c:	31 83       	std	Z+1, r19	; 0x01
    366e:	20 83       	st	Z, r18
    3670:	8a 81       	ldd	r24, Y+2	; 0x02
    3672:	9b 81       	ldd	r25, Y+3	; 0x03
    3674:	93 83       	std	Z+3, r25	; 0x03
    3676:	82 83       	std	Z+2, r24	; 0x02
    3678:	45 2b       	or	r20, r21
    367a:	29 f4       	brne	.+10     	; 0x3686 <free+0xa2>
    367c:	f0 93 79 0b 	sts	0x0B79, r31
    3680:	e0 93 78 0b 	sts	0x0B78, r30
    3684:	42 c0       	rjmp	.+132    	; 0x370a <free+0x126>
    3686:	13 96       	adiw	r26, 0x03	; 3
    3688:	fc 93       	st	X, r31
    368a:	ee 93       	st	-X, r30
    368c:	12 97       	sbiw	r26, 0x02	; 2
    368e:	ed 01       	movw	r28, r26
    3690:	49 91       	ld	r20, Y+
    3692:	59 91       	ld	r21, Y+
    3694:	9e 01       	movw	r18, r28
    3696:	24 0f       	add	r18, r20
    3698:	35 1f       	adc	r19, r21
    369a:	e2 17       	cp	r30, r18
    369c:	f3 07       	cpc	r31, r19
    369e:	71 f4       	brne	.+28     	; 0x36bc <free+0xd8>
    36a0:	80 81       	ld	r24, Z
    36a2:	91 81       	ldd	r25, Z+1	; 0x01
    36a4:	84 0f       	add	r24, r20
    36a6:	95 1f       	adc	r25, r21
    36a8:	02 96       	adiw	r24, 0x02	; 2
    36aa:	11 96       	adiw	r26, 0x01	; 1
    36ac:	9c 93       	st	X, r25
    36ae:	8e 93       	st	-X, r24
    36b0:	82 81       	ldd	r24, Z+2	; 0x02
    36b2:	93 81       	ldd	r25, Z+3	; 0x03
    36b4:	13 96       	adiw	r26, 0x03	; 3
    36b6:	9c 93       	st	X, r25
    36b8:	8e 93       	st	-X, r24
    36ba:	12 97       	sbiw	r26, 0x02	; 2
    36bc:	e0 e0       	ldi	r30, 0x00	; 0
    36be:	f0 e0       	ldi	r31, 0x00	; 0
    36c0:	d8 01       	movw	r26, r16
    36c2:	12 96       	adiw	r26, 0x02	; 2
    36c4:	8d 91       	ld	r24, X+
    36c6:	9c 91       	ld	r25, X
    36c8:	13 97       	sbiw	r26, 0x03	; 3
    36ca:	00 97       	sbiw	r24, 0x00	; 0
    36cc:	19 f0       	breq	.+6      	; 0x36d4 <free+0xf0>
    36ce:	f8 01       	movw	r30, r16
    36d0:	8c 01       	movw	r16, r24
    36d2:	f6 cf       	rjmp	.-20     	; 0x36c0 <free+0xdc>
    36d4:	8d 91       	ld	r24, X+
    36d6:	9c 91       	ld	r25, X
    36d8:	98 01       	movw	r18, r16
    36da:	2e 5f       	subi	r18, 0xFE	; 254
    36dc:	3f 4f       	sbci	r19, 0xFF	; 255
    36de:	82 0f       	add	r24, r18
    36e0:	93 1f       	adc	r25, r19
    36e2:	20 91 76 0b 	lds	r18, 0x0B76
    36e6:	30 91 77 0b 	lds	r19, 0x0B77
    36ea:	28 17       	cp	r18, r24
    36ec:	39 07       	cpc	r19, r25
    36ee:	69 f4       	brne	.+26     	; 0x370a <free+0x126>
    36f0:	30 97       	sbiw	r30, 0x00	; 0
    36f2:	29 f4       	brne	.+10     	; 0x36fe <free+0x11a>
    36f4:	10 92 79 0b 	sts	0x0B79, r1
    36f8:	10 92 78 0b 	sts	0x0B78, r1
    36fc:	02 c0       	rjmp	.+4      	; 0x3702 <free+0x11e>
    36fe:	13 82       	std	Z+3, r1	; 0x03
    3700:	12 82       	std	Z+2, r1	; 0x02
    3702:	10 93 77 0b 	sts	0x0B77, r17
    3706:	00 93 76 0b 	sts	0x0B76, r16
    370a:	df 91       	pop	r29
    370c:	cf 91       	pop	r28
    370e:	1f 91       	pop	r17
    3710:	0f 91       	pop	r16
    3712:	08 95       	ret

00003714 <__ftoa_engine>:
    3714:	28 30       	cpi	r18, 0x08	; 8
    3716:	08 f0       	brcs	.+2      	; 0x371a <__ftoa_engine+0x6>
    3718:	27 e0       	ldi	r18, 0x07	; 7
    371a:	33 27       	eor	r19, r19
    371c:	da 01       	movw	r26, r20
    371e:	99 0f       	add	r25, r25
    3720:	31 1d       	adc	r19, r1
    3722:	87 fd       	sbrc	r24, 7
    3724:	91 60       	ori	r25, 0x01	; 1
    3726:	00 96       	adiw	r24, 0x00	; 0
    3728:	61 05       	cpc	r22, r1
    372a:	71 05       	cpc	r23, r1
    372c:	39 f4       	brne	.+14     	; 0x373c <__ftoa_engine+0x28>
    372e:	32 60       	ori	r19, 0x02	; 2
    3730:	2e 5f       	subi	r18, 0xFE	; 254
    3732:	3d 93       	st	X+, r19
    3734:	30 e3       	ldi	r19, 0x30	; 48
    3736:	2a 95       	dec	r18
    3738:	e1 f7       	brne	.-8      	; 0x3732 <__ftoa_engine+0x1e>
    373a:	08 95       	ret
    373c:	9f 3f       	cpi	r25, 0xFF	; 255
    373e:	30 f0       	brcs	.+12     	; 0x374c <__ftoa_engine+0x38>
    3740:	80 38       	cpi	r24, 0x80	; 128
    3742:	71 05       	cpc	r23, r1
    3744:	61 05       	cpc	r22, r1
    3746:	09 f0       	breq	.+2      	; 0x374a <__ftoa_engine+0x36>
    3748:	3c 5f       	subi	r19, 0xFC	; 252
    374a:	3c 5f       	subi	r19, 0xFC	; 252
    374c:	3d 93       	st	X+, r19
    374e:	91 30       	cpi	r25, 0x01	; 1
    3750:	08 f0       	brcs	.+2      	; 0x3754 <__ftoa_engine+0x40>
    3752:	80 68       	ori	r24, 0x80	; 128
    3754:	91 1d       	adc	r25, r1
    3756:	df 93       	push	r29
    3758:	cf 93       	push	r28
    375a:	1f 93       	push	r17
    375c:	0f 93       	push	r16
    375e:	ff 92       	push	r15
    3760:	ef 92       	push	r14
    3762:	19 2f       	mov	r17, r25
    3764:	98 7f       	andi	r25, 0xF8	; 248
    3766:	96 95       	lsr	r25
    3768:	e9 2f       	mov	r30, r25
    376a:	96 95       	lsr	r25
    376c:	96 95       	lsr	r25
    376e:	e9 0f       	add	r30, r25
    3770:	ff 27       	eor	r31, r31
    3772:	ea 56       	subi	r30, 0x6A	; 106
    3774:	fe 4f       	sbci	r31, 0xFE	; 254
    3776:	99 27       	eor	r25, r25
    3778:	33 27       	eor	r19, r19
    377a:	ee 24       	eor	r14, r14
    377c:	ff 24       	eor	r15, r15
    377e:	a7 01       	movw	r20, r14
    3780:	e7 01       	movw	r28, r14
    3782:	05 90       	lpm	r0, Z+
    3784:	08 94       	sec
    3786:	07 94       	ror	r0
    3788:	28 f4       	brcc	.+10     	; 0x3794 <__ftoa_engine+0x80>
    378a:	36 0f       	add	r19, r22
    378c:	e7 1e       	adc	r14, r23
    378e:	f8 1e       	adc	r15, r24
    3790:	49 1f       	adc	r20, r25
    3792:	51 1d       	adc	r21, r1
    3794:	66 0f       	add	r22, r22
    3796:	77 1f       	adc	r23, r23
    3798:	88 1f       	adc	r24, r24
    379a:	99 1f       	adc	r25, r25
    379c:	06 94       	lsr	r0
    379e:	a1 f7       	brne	.-24     	; 0x3788 <__ftoa_engine+0x74>
    37a0:	05 90       	lpm	r0, Z+
    37a2:	07 94       	ror	r0
    37a4:	28 f4       	brcc	.+10     	; 0x37b0 <__ftoa_engine+0x9c>
    37a6:	e7 0e       	add	r14, r23
    37a8:	f8 1e       	adc	r15, r24
    37aa:	49 1f       	adc	r20, r25
    37ac:	56 1f       	adc	r21, r22
    37ae:	c1 1d       	adc	r28, r1
    37b0:	77 0f       	add	r23, r23
    37b2:	88 1f       	adc	r24, r24
    37b4:	99 1f       	adc	r25, r25
    37b6:	66 1f       	adc	r22, r22
    37b8:	06 94       	lsr	r0
    37ba:	a1 f7       	brne	.-24     	; 0x37a4 <__ftoa_engine+0x90>
    37bc:	05 90       	lpm	r0, Z+
    37be:	07 94       	ror	r0
    37c0:	28 f4       	brcc	.+10     	; 0x37cc <__ftoa_engine+0xb8>
    37c2:	f8 0e       	add	r15, r24
    37c4:	49 1f       	adc	r20, r25
    37c6:	56 1f       	adc	r21, r22
    37c8:	c7 1f       	adc	r28, r23
    37ca:	d1 1d       	adc	r29, r1
    37cc:	88 0f       	add	r24, r24
    37ce:	99 1f       	adc	r25, r25
    37d0:	66 1f       	adc	r22, r22
    37d2:	77 1f       	adc	r23, r23
    37d4:	06 94       	lsr	r0
    37d6:	a1 f7       	brne	.-24     	; 0x37c0 <__ftoa_engine+0xac>
    37d8:	05 90       	lpm	r0, Z+
    37da:	07 94       	ror	r0
    37dc:	20 f4       	brcc	.+8      	; 0x37e6 <__ftoa_engine+0xd2>
    37de:	49 0f       	add	r20, r25
    37e0:	56 1f       	adc	r21, r22
    37e2:	c7 1f       	adc	r28, r23
    37e4:	d8 1f       	adc	r29, r24
    37e6:	99 0f       	add	r25, r25
    37e8:	66 1f       	adc	r22, r22
    37ea:	77 1f       	adc	r23, r23
    37ec:	88 1f       	adc	r24, r24
    37ee:	06 94       	lsr	r0
    37f0:	a9 f7       	brne	.-22     	; 0x37dc <__ftoa_engine+0xc8>
    37f2:	84 91       	lpm	r24, Z
    37f4:	10 95       	com	r17
    37f6:	17 70       	andi	r17, 0x07	; 7
    37f8:	41 f0       	breq	.+16     	; 0x380a <__ftoa_engine+0xf6>
    37fa:	d6 95       	lsr	r29
    37fc:	c7 95       	ror	r28
    37fe:	57 95       	ror	r21
    3800:	47 95       	ror	r20
    3802:	f7 94       	ror	r15
    3804:	e7 94       	ror	r14
    3806:	1a 95       	dec	r17
    3808:	c1 f7       	brne	.-16     	; 0x37fa <__ftoa_engine+0xe6>
    380a:	ec e3       	ldi	r30, 0x3C	; 60
    380c:	f1 e0       	ldi	r31, 0x01	; 1
    380e:	68 94       	set
    3810:	15 90       	lpm	r1, Z+
    3812:	15 91       	lpm	r17, Z+
    3814:	35 91       	lpm	r19, Z+
    3816:	65 91       	lpm	r22, Z+
    3818:	95 91       	lpm	r25, Z+
    381a:	05 90       	lpm	r0, Z+
    381c:	7f e2       	ldi	r23, 0x2F	; 47
    381e:	73 95       	inc	r23
    3820:	e1 18       	sub	r14, r1
    3822:	f1 0a       	sbc	r15, r17
    3824:	43 0b       	sbc	r20, r19
    3826:	56 0b       	sbc	r21, r22
    3828:	c9 0b       	sbc	r28, r25
    382a:	d0 09       	sbc	r29, r0
    382c:	c0 f7       	brcc	.-16     	; 0x381e <__ftoa_engine+0x10a>
    382e:	e1 0c       	add	r14, r1
    3830:	f1 1e       	adc	r15, r17
    3832:	43 1f       	adc	r20, r19
    3834:	56 1f       	adc	r21, r22
    3836:	c9 1f       	adc	r28, r25
    3838:	d0 1d       	adc	r29, r0
    383a:	7e f4       	brtc	.+30     	; 0x385a <__ftoa_engine+0x146>
    383c:	70 33       	cpi	r23, 0x30	; 48
    383e:	11 f4       	brne	.+4      	; 0x3844 <__ftoa_engine+0x130>
    3840:	8a 95       	dec	r24
    3842:	e6 cf       	rjmp	.-52     	; 0x3810 <__ftoa_engine+0xfc>
    3844:	e8 94       	clt
    3846:	01 50       	subi	r16, 0x01	; 1
    3848:	30 f0       	brcs	.+12     	; 0x3856 <__ftoa_engine+0x142>
    384a:	08 0f       	add	r16, r24
    384c:	0a f4       	brpl	.+2      	; 0x3850 <__ftoa_engine+0x13c>
    384e:	00 27       	eor	r16, r16
    3850:	02 17       	cp	r16, r18
    3852:	08 f4       	brcc	.+2      	; 0x3856 <__ftoa_engine+0x142>
    3854:	20 2f       	mov	r18, r16
    3856:	23 95       	inc	r18
    3858:	02 2f       	mov	r16, r18
    385a:	7a 33       	cpi	r23, 0x3A	; 58
    385c:	28 f0       	brcs	.+10     	; 0x3868 <__ftoa_engine+0x154>
    385e:	79 e3       	ldi	r23, 0x39	; 57
    3860:	7d 93       	st	X+, r23
    3862:	2a 95       	dec	r18
    3864:	e9 f7       	brne	.-6      	; 0x3860 <__ftoa_engine+0x14c>
    3866:	10 c0       	rjmp	.+32     	; 0x3888 <__ftoa_engine+0x174>
    3868:	7d 93       	st	X+, r23
    386a:	2a 95       	dec	r18
    386c:	89 f6       	brne	.-94     	; 0x3810 <__ftoa_engine+0xfc>
    386e:	06 94       	lsr	r0
    3870:	97 95       	ror	r25
    3872:	67 95       	ror	r22
    3874:	37 95       	ror	r19
    3876:	17 95       	ror	r17
    3878:	17 94       	ror	r1
    387a:	e1 18       	sub	r14, r1
    387c:	f1 0a       	sbc	r15, r17
    387e:	43 0b       	sbc	r20, r19
    3880:	56 0b       	sbc	r21, r22
    3882:	c9 0b       	sbc	r28, r25
    3884:	d0 09       	sbc	r29, r0
    3886:	98 f0       	brcs	.+38     	; 0x38ae <__ftoa_engine+0x19a>
    3888:	23 95       	inc	r18
    388a:	7e 91       	ld	r23, -X
    388c:	73 95       	inc	r23
    388e:	7a 33       	cpi	r23, 0x3A	; 58
    3890:	08 f0       	brcs	.+2      	; 0x3894 <__ftoa_engine+0x180>
    3892:	70 e3       	ldi	r23, 0x30	; 48
    3894:	7c 93       	st	X, r23
    3896:	20 13       	cpse	r18, r16
    3898:	b8 f7       	brcc	.-18     	; 0x3888 <__ftoa_engine+0x174>
    389a:	7e 91       	ld	r23, -X
    389c:	70 61       	ori	r23, 0x10	; 16
    389e:	7d 93       	st	X+, r23
    38a0:	30 f0       	brcs	.+12     	; 0x38ae <__ftoa_engine+0x19a>
    38a2:	83 95       	inc	r24
    38a4:	71 e3       	ldi	r23, 0x31	; 49
    38a6:	7d 93       	st	X+, r23
    38a8:	70 e3       	ldi	r23, 0x30	; 48
    38aa:	2a 95       	dec	r18
    38ac:	e1 f7       	brne	.-8      	; 0x38a6 <__ftoa_engine+0x192>
    38ae:	11 24       	eor	r1, r1
    38b0:	ef 90       	pop	r14
    38b2:	ff 90       	pop	r15
    38b4:	0f 91       	pop	r16
    38b6:	1f 91       	pop	r17
    38b8:	cf 91       	pop	r28
    38ba:	df 91       	pop	r29
    38bc:	99 27       	eor	r25, r25
    38be:	87 fd       	sbrc	r24, 7
    38c0:	90 95       	com	r25
    38c2:	08 95       	ret

000038c4 <strnlen_P>:
    38c4:	fc 01       	movw	r30, r24
    38c6:	05 90       	lpm	r0, Z+
    38c8:	61 50       	subi	r22, 0x01	; 1
    38ca:	70 40       	sbci	r23, 0x00	; 0
    38cc:	01 10       	cpse	r0, r1
    38ce:	d8 f7       	brcc	.-10     	; 0x38c6 <strnlen_P+0x2>
    38d0:	80 95       	com	r24
    38d2:	90 95       	com	r25
    38d4:	8e 0f       	add	r24, r30
    38d6:	9f 1f       	adc	r25, r31
    38d8:	08 95       	ret

000038da <strnlen>:
    38da:	fc 01       	movw	r30, r24
    38dc:	61 50       	subi	r22, 0x01	; 1
    38de:	70 40       	sbci	r23, 0x00	; 0
    38e0:	01 90       	ld	r0, Z+
    38e2:	01 10       	cpse	r0, r1
    38e4:	d8 f7       	brcc	.-10     	; 0x38dc <strnlen+0x2>
    38e6:	80 95       	com	r24
    38e8:	90 95       	com	r25
    38ea:	8e 0f       	add	r24, r30
    38ec:	9f 1f       	adc	r25, r31
    38ee:	08 95       	ret

000038f0 <fputc>:
    38f0:	0f 93       	push	r16
    38f2:	1f 93       	push	r17
    38f4:	cf 93       	push	r28
    38f6:	df 93       	push	r29
    38f8:	fb 01       	movw	r30, r22
    38fa:	23 81       	ldd	r18, Z+3	; 0x03
    38fc:	21 fd       	sbrc	r18, 1
    38fe:	03 c0       	rjmp	.+6      	; 0x3906 <fputc+0x16>
    3900:	8f ef       	ldi	r24, 0xFF	; 255
    3902:	9f ef       	ldi	r25, 0xFF	; 255
    3904:	28 c0       	rjmp	.+80     	; 0x3956 <fputc+0x66>
    3906:	22 ff       	sbrs	r18, 2
    3908:	16 c0       	rjmp	.+44     	; 0x3936 <fputc+0x46>
    390a:	46 81       	ldd	r20, Z+6	; 0x06
    390c:	57 81       	ldd	r21, Z+7	; 0x07
    390e:	24 81       	ldd	r18, Z+4	; 0x04
    3910:	35 81       	ldd	r19, Z+5	; 0x05
    3912:	42 17       	cp	r20, r18
    3914:	53 07       	cpc	r21, r19
    3916:	44 f4       	brge	.+16     	; 0x3928 <fputc+0x38>
    3918:	a0 81       	ld	r26, Z
    391a:	b1 81       	ldd	r27, Z+1	; 0x01
    391c:	9d 01       	movw	r18, r26
    391e:	2f 5f       	subi	r18, 0xFF	; 255
    3920:	3f 4f       	sbci	r19, 0xFF	; 255
    3922:	31 83       	std	Z+1, r19	; 0x01
    3924:	20 83       	st	Z, r18
    3926:	8c 93       	st	X, r24
    3928:	26 81       	ldd	r18, Z+6	; 0x06
    392a:	37 81       	ldd	r19, Z+7	; 0x07
    392c:	2f 5f       	subi	r18, 0xFF	; 255
    392e:	3f 4f       	sbci	r19, 0xFF	; 255
    3930:	37 83       	std	Z+7, r19	; 0x07
    3932:	26 83       	std	Z+6, r18	; 0x06
    3934:	10 c0       	rjmp	.+32     	; 0x3956 <fputc+0x66>
    3936:	eb 01       	movw	r28, r22
    3938:	09 2f       	mov	r16, r25
    393a:	18 2f       	mov	r17, r24
    393c:	00 84       	ldd	r0, Z+8	; 0x08
    393e:	f1 85       	ldd	r31, Z+9	; 0x09
    3940:	e0 2d       	mov	r30, r0
    3942:	19 95       	eicall
    3944:	89 2b       	or	r24, r25
    3946:	e1 f6       	brne	.-72     	; 0x3900 <fputc+0x10>
    3948:	8e 81       	ldd	r24, Y+6	; 0x06
    394a:	9f 81       	ldd	r25, Y+7	; 0x07
    394c:	01 96       	adiw	r24, 0x01	; 1
    394e:	9f 83       	std	Y+7, r25	; 0x07
    3950:	8e 83       	std	Y+6, r24	; 0x06
    3952:	81 2f       	mov	r24, r17
    3954:	90 2f       	mov	r25, r16
    3956:	df 91       	pop	r29
    3958:	cf 91       	pop	r28
    395a:	1f 91       	pop	r17
    395c:	0f 91       	pop	r16
    395e:	08 95       	ret

00003960 <printf>:
    3960:	cf 93       	push	r28
    3962:	df 93       	push	r29
    3964:	cd b7       	in	r28, 0x3d	; 61
    3966:	de b7       	in	r29, 0x3e	; 62
    3968:	ae 01       	movw	r20, r28
    396a:	4a 5f       	subi	r20, 0xFA	; 250
    396c:	5f 4f       	sbci	r21, 0xFF	; 255
    396e:	fa 01       	movw	r30, r20
    3970:	61 91       	ld	r22, Z+
    3972:	71 91       	ld	r23, Z+
    3974:	af 01       	movw	r20, r30
    3976:	80 91 7c 0b 	lds	r24, 0x0B7C
    397a:	90 91 7d 0b 	lds	r25, 0x0B7D
    397e:	b8 d9       	rcall	.-3216   	; 0x2cf0 <vfprintf>
    3980:	df 91       	pop	r29
    3982:	cf 91       	pop	r28
    3984:	08 95       	ret

00003986 <putchar>:
    3986:	60 91 7c 0b 	lds	r22, 0x0B7C
    398a:	70 91 7d 0b 	lds	r23, 0x0B7D
    398e:	b0 cf       	rjmp	.-160    	; 0x38f0 <fputc>

00003990 <puts>:
    3990:	0f 93       	push	r16
    3992:	1f 93       	push	r17
    3994:	cf 93       	push	r28
    3996:	df 93       	push	r29
    3998:	e0 91 7c 0b 	lds	r30, 0x0B7C
    399c:	f0 91 7d 0b 	lds	r31, 0x0B7D
    39a0:	23 81       	ldd	r18, Z+3	; 0x03
    39a2:	21 ff       	sbrs	r18, 1
    39a4:	1b c0       	rjmp	.+54     	; 0x39dc <puts+0x4c>
    39a6:	8c 01       	movw	r16, r24
    39a8:	d0 e0       	ldi	r29, 0x00	; 0
    39aa:	c0 e0       	ldi	r28, 0x00	; 0
    39ac:	f8 01       	movw	r30, r16
    39ae:	81 91       	ld	r24, Z+
    39b0:	8f 01       	movw	r16, r30
    39b2:	60 91 7c 0b 	lds	r22, 0x0B7C
    39b6:	70 91 7d 0b 	lds	r23, 0x0B7D
    39ba:	db 01       	movw	r26, r22
    39bc:	18 96       	adiw	r26, 0x08	; 8
    39be:	ed 91       	ld	r30, X+
    39c0:	fc 91       	ld	r31, X
    39c2:	19 97       	sbiw	r26, 0x09	; 9
    39c4:	88 23       	and	r24, r24
    39c6:	31 f0       	breq	.+12     	; 0x39d4 <puts+0x44>
    39c8:	19 95       	eicall
    39ca:	89 2b       	or	r24, r25
    39cc:	79 f3       	breq	.-34     	; 0x39ac <puts+0x1c>
    39ce:	df ef       	ldi	r29, 0xFF	; 255
    39d0:	cf ef       	ldi	r28, 0xFF	; 255
    39d2:	ec cf       	rjmp	.-40     	; 0x39ac <puts+0x1c>
    39d4:	8a e0       	ldi	r24, 0x0A	; 10
    39d6:	19 95       	eicall
    39d8:	89 2b       	or	r24, r25
    39da:	19 f0       	breq	.+6      	; 0x39e2 <puts+0x52>
    39dc:	8f ef       	ldi	r24, 0xFF	; 255
    39de:	9f ef       	ldi	r25, 0xFF	; 255
    39e0:	02 c0       	rjmp	.+4      	; 0x39e6 <puts+0x56>
    39e2:	8d 2f       	mov	r24, r29
    39e4:	9c 2f       	mov	r25, r28
    39e6:	df 91       	pop	r29
    39e8:	cf 91       	pop	r28
    39ea:	1f 91       	pop	r17
    39ec:	0f 91       	pop	r16
    39ee:	08 95       	ret

000039f0 <__ultoa_invert>:
    39f0:	fa 01       	movw	r30, r20
    39f2:	aa 27       	eor	r26, r26
    39f4:	28 30       	cpi	r18, 0x08	; 8
    39f6:	51 f1       	breq	.+84     	; 0x3a4c <__ultoa_invert+0x5c>
    39f8:	20 31       	cpi	r18, 0x10	; 16
    39fa:	81 f1       	breq	.+96     	; 0x3a5c <__ultoa_invert+0x6c>
    39fc:	e8 94       	clt
    39fe:	6f 93       	push	r22
    3a00:	6e 7f       	andi	r22, 0xFE	; 254
    3a02:	6e 5f       	subi	r22, 0xFE	; 254
    3a04:	7f 4f       	sbci	r23, 0xFF	; 255
    3a06:	8f 4f       	sbci	r24, 0xFF	; 255
    3a08:	9f 4f       	sbci	r25, 0xFF	; 255
    3a0a:	af 4f       	sbci	r26, 0xFF	; 255
    3a0c:	b1 e0       	ldi	r27, 0x01	; 1
    3a0e:	3e d0       	rcall	.+124    	; 0x3a8c <__ultoa_invert+0x9c>
    3a10:	b4 e0       	ldi	r27, 0x04	; 4
    3a12:	3c d0       	rcall	.+120    	; 0x3a8c <__ultoa_invert+0x9c>
    3a14:	67 0f       	add	r22, r23
    3a16:	78 1f       	adc	r23, r24
    3a18:	89 1f       	adc	r24, r25
    3a1a:	9a 1f       	adc	r25, r26
    3a1c:	a1 1d       	adc	r26, r1
    3a1e:	68 0f       	add	r22, r24
    3a20:	79 1f       	adc	r23, r25
    3a22:	8a 1f       	adc	r24, r26
    3a24:	91 1d       	adc	r25, r1
    3a26:	a1 1d       	adc	r26, r1
    3a28:	6a 0f       	add	r22, r26
    3a2a:	71 1d       	adc	r23, r1
    3a2c:	81 1d       	adc	r24, r1
    3a2e:	91 1d       	adc	r25, r1
    3a30:	a1 1d       	adc	r26, r1
    3a32:	20 d0       	rcall	.+64     	; 0x3a74 <__ultoa_invert+0x84>
    3a34:	09 f4       	brne	.+2      	; 0x3a38 <__ultoa_invert+0x48>
    3a36:	68 94       	set
    3a38:	3f 91       	pop	r19
    3a3a:	2a e0       	ldi	r18, 0x0A	; 10
    3a3c:	26 9f       	mul	r18, r22
    3a3e:	11 24       	eor	r1, r1
    3a40:	30 19       	sub	r19, r0
    3a42:	30 5d       	subi	r19, 0xD0	; 208
    3a44:	31 93       	st	Z+, r19
    3a46:	de f6       	brtc	.-74     	; 0x39fe <__ultoa_invert+0xe>
    3a48:	cf 01       	movw	r24, r30
    3a4a:	08 95       	ret
    3a4c:	46 2f       	mov	r20, r22
    3a4e:	47 70       	andi	r20, 0x07	; 7
    3a50:	40 5d       	subi	r20, 0xD0	; 208
    3a52:	41 93       	st	Z+, r20
    3a54:	b3 e0       	ldi	r27, 0x03	; 3
    3a56:	0f d0       	rcall	.+30     	; 0x3a76 <__ultoa_invert+0x86>
    3a58:	c9 f7       	brne	.-14     	; 0x3a4c <__ultoa_invert+0x5c>
    3a5a:	f6 cf       	rjmp	.-20     	; 0x3a48 <__ultoa_invert+0x58>
    3a5c:	46 2f       	mov	r20, r22
    3a5e:	4f 70       	andi	r20, 0x0F	; 15
    3a60:	40 5d       	subi	r20, 0xD0	; 208
    3a62:	4a 33       	cpi	r20, 0x3A	; 58
    3a64:	18 f0       	brcs	.+6      	; 0x3a6c <__ultoa_invert+0x7c>
    3a66:	49 5d       	subi	r20, 0xD9	; 217
    3a68:	31 fd       	sbrc	r19, 1
    3a6a:	40 52       	subi	r20, 0x20	; 32
    3a6c:	41 93       	st	Z+, r20
    3a6e:	02 d0       	rcall	.+4      	; 0x3a74 <__ultoa_invert+0x84>
    3a70:	a9 f7       	brne	.-22     	; 0x3a5c <__ultoa_invert+0x6c>
    3a72:	ea cf       	rjmp	.-44     	; 0x3a48 <__ultoa_invert+0x58>
    3a74:	b4 e0       	ldi	r27, 0x04	; 4
    3a76:	a6 95       	lsr	r26
    3a78:	97 95       	ror	r25
    3a7a:	87 95       	ror	r24
    3a7c:	77 95       	ror	r23
    3a7e:	67 95       	ror	r22
    3a80:	ba 95       	dec	r27
    3a82:	c9 f7       	brne	.-14     	; 0x3a76 <__ultoa_invert+0x86>
    3a84:	00 97       	sbiw	r24, 0x00	; 0
    3a86:	61 05       	cpc	r22, r1
    3a88:	71 05       	cpc	r23, r1
    3a8a:	08 95       	ret
    3a8c:	9b 01       	movw	r18, r22
    3a8e:	ac 01       	movw	r20, r24
    3a90:	0a 2e       	mov	r0, r26
    3a92:	06 94       	lsr	r0
    3a94:	57 95       	ror	r21
    3a96:	47 95       	ror	r20
    3a98:	37 95       	ror	r19
    3a9a:	27 95       	ror	r18
    3a9c:	ba 95       	dec	r27
    3a9e:	c9 f7       	brne	.-14     	; 0x3a92 <__ultoa_invert+0xa2>
    3aa0:	62 0f       	add	r22, r18
    3aa2:	73 1f       	adc	r23, r19
    3aa4:	84 1f       	adc	r24, r20
    3aa6:	95 1f       	adc	r25, r21
    3aa8:	a0 1d       	adc	r26, r0
    3aaa:	08 95       	ret

00003aac <_exit>:
    3aac:	f8 94       	cli

00003aae <__stop_program>:
    3aae:	ff cf       	rjmp	.-2      	; 0x3aae <__stop_program>
