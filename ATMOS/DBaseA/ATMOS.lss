
ATMOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011c  00800200  000018be  00001952  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000018be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035b  0080031c  0080031c  00001a6e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001a6e  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000005c8  00000000  00000000  00001aca  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005c53  00000000  00000000  00002092  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000225a  00000000  00000000  00007ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001eb8  00000000  00000000  00009f3f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000e50  00000000  00000000  0000bdf8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000019a0  00000000  00000000  0000cc48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000035ca  00000000  00000000  0000e5e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005e0  00000000  00000000  00011bb2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__ctors_end>
       4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      10:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      14:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      18:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      1c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      20:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      24:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      28:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      30:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      34:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_13>
      38:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      3c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      40:	0c 94 97 01 	jmp	0x32e	; 0x32e <__vector_16>
      44:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      48:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      4c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      50:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      54:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      58:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      5c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      60:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      64:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      68:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      6c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      70:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      74:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      78:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      7c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      80:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      84:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      88:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      8c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      90:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      94:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      98:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      9c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a8:	0c 94 93 04 	jmp	0x926	; 0x926 <__vector_42>
      ac:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      bc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      cc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      dc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      ec:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      fc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     100:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     104:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     108:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     10c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     110:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     114:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     118:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     11c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     120:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     124:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     128:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     12c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     130:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>

00000134 <__trampolines_end>:
     134:	6e 61       	ori	r22, 0x1E	; 30
     136:	6e 00       	.word	0x006e	; ????

00000138 <__c.2159>:
     138:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     148:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     158:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     168:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     178:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     188:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     198:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     208:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     218:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     228:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000236 <__ctors_end>:
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	d1 e2       	ldi	r29, 0x21	; 33
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61

00000242 <__do_copy_data>:
     242:	13 e0       	ldi	r17, 0x03	; 3
     244:	a0 e0       	ldi	r26, 0x00	; 0
     246:	b2 e0       	ldi	r27, 0x02	; 2
     248:	ee eb       	ldi	r30, 0xBE	; 190
     24a:	f8 e1       	ldi	r31, 0x18	; 24
     24c:	02 c0       	rjmp	.+4      	; 0x252 <__do_copy_data+0x10>
     24e:	05 90       	lpm	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	ac 31       	cpi	r26, 0x1C	; 28
     254:	b1 07       	cpc	r27, r17
     256:	d9 f7       	brne	.-10     	; 0x24e <__do_copy_data+0xc>

00000258 <__do_clear_bss>:
     258:	26 e0       	ldi	r18, 0x06	; 6
     25a:	ac e1       	ldi	r26, 0x1C	; 28
     25c:	b3 e0       	ldi	r27, 0x03	; 3
     25e:	01 c0       	rjmp	.+2      	; 0x262 <.do_clear_bss_start>

00000260 <.do_clear_bss_loop>:
     260:	1d 92       	st	X+, r1

00000262 <.do_clear_bss_start>:
     262:	a7 37       	cpi	r26, 0x77	; 119
     264:	b2 07       	cpc	r27, r18
     266:	e1 f7       	brne	.-8      	; 0x260 <.do_clear_bss_loop>
     268:	0e 94 d4 01 	call	0x3a8	; 0x3a8 <main>
     26c:	0c 94 5d 0c 	jmp	0x18ba	; 0x18ba <_exit>

00000270 <__bad_interrupt>:
     270:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000274 <init_Ex3>:
/* Initialization Routine Example 3 : Timer 2 Async operation */
/* Clock for Timer 2 is taken from crystal connected to TOSC pins */
void init_Ex3(void)
{
	/* Select clock source as crystal on TOSCn pins */
	ASSR |= 1 << AS2;
     274:	e6 eb       	ldi	r30, 0xB6	; 182
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	80 81       	ld	r24, Z
     27a:	80 62       	ori	r24, 0x20	; 32
     27c:	80 83       	st	Z, r24
	/* Clear Timer on compare match. Toggle OC2A on Compare Match */
	TCCR2A = (1<<COM2A0) | (1<<WGM21);
     27e:	82 e4       	ldi	r24, 0x42	; 66
     280:	80 93 b0 00 	sts	0x00B0, r24
	/* Timer Clock = 32768 Hz / 1024 */
	TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
     284:	87 e0       	ldi	r24, 0x07	; 7
     286:	80 93 b1 00 	sts	0x00B1, r24
	/* Set Output Compare Value to 32. Output pin will toggle every second */
	OCR2A  = 32;
     28a:	80 e2       	ldi	r24, 0x20	; 32
     28c:	80 93 b3 00 	sts	0x00B3, r24
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) 
     290:	80 81       	ld	r24, Z
     292:	8f 71       	andi	r24, 0x1F	; 31
     294:	e9 f7       	brne	.-6      	; 0x290 <init_Ex3+0x1c>
		| (1 << TCR2BUB) | (1<< TCN2UB))));
	/* Clear pending interrupts */
	TIFR2  = (1 << TOV2) | (1 << OCF2A) | (1 << OCF2B);
     296:	87 e0       	ldi	r24, 0x07	; 7
     298:	87 bb       	out	0x17, r24	; 23
	/* Enable Timer 2 Output Compare Match Interrupt */
	TIMSK2 = (1 << OCIE2A);
     29a:	82 e0       	ldi	r24, 0x02	; 2
     29c:	80 93 70 00 	sts	0x0070, r24
     2a0:	08 95       	ret

000002a2 <__vector_13>:
}

static int count = 0;

ISR(TIMER2_COMPA_vect)
{
     2a2:	1f 92       	push	r1
     2a4:	0f 92       	push	r0
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	0f 92       	push	r0
     2aa:	11 24       	eor	r1, r1
     2ac:	2f 93       	push	r18
     2ae:	3f 93       	push	r19
     2b0:	4f 93       	push	r20
     2b2:	5f 93       	push	r21
     2b4:	6f 93       	push	r22
     2b6:	7f 93       	push	r23
     2b8:	8f 93       	push	r24
     2ba:	9f 93       	push	r25
     2bc:	af 93       	push	r26
     2be:	bf 93       	push	r27
     2c0:	ef 93       	push	r30
     2c2:	ff 93       	push	r31
	count++;
     2c4:	80 91 1c 03 	lds	r24, 0x031C
     2c8:	90 91 1d 03 	lds	r25, 0x031D
     2cc:	01 96       	adiw	r24, 0x01	; 1
     2ce:	90 93 1d 03 	sts	0x031D, r25
     2d2:	80 93 1c 03 	sts	0x031C, r24
	if( count & 0x01 )
     2d6:	80 ff       	sbrs	r24, 0
     2d8:	04 c0       	rjmp	.+8      	; 0x2e2 <__vector_13+0x40>
		OCR2A = 32;
     2da:	80 e2       	ldi	r24, 0x20	; 32
     2dc:	80 93 b3 00 	sts	0x00B3, r24
     2e0:	03 c0       	rjmp	.+6      	; 0x2e8 <__vector_13+0x46>
	else
		OCR2A = 32;
     2e2:	80 e2       	ldi	r24, 0x20	; 32
     2e4:	80 93 b3 00 	sts	0x00B3, r24
	printf("count1 = %d\n",count);
     2e8:	80 91 1d 03 	lds	r24, 0x031D
     2ec:	8f 93       	push	r24
     2ee:	80 91 1c 03 	lds	r24, 0x031C
     2f2:	8f 93       	push	r24
     2f4:	8e e0       	ldi	r24, 0x0E	; 14
     2f6:	92 e0       	ldi	r25, 0x02	; 2
     2f8:	9f 93       	push	r25
     2fa:	8f 93       	push	r24
     2fc:	0e 94 be 0b 	call	0x177c	; 0x177c <printf>
	foo();	
     300:	0e 94 67 04 	call	0x8ce	; 0x8ce <foo>
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
}
     30c:	ff 91       	pop	r31
     30e:	ef 91       	pop	r30
     310:	bf 91       	pop	r27
     312:	af 91       	pop	r26
     314:	9f 91       	pop	r25
     316:	8f 91       	pop	r24
     318:	7f 91       	pop	r23
     31a:	6f 91       	pop	r22
     31c:	5f 91       	pop	r21
     31e:	4f 91       	pop	r20
     320:	3f 91       	pop	r19
     322:	2f 91       	pop	r18
     324:	0f 90       	pop	r0
     326:	0f be       	out	0x3f, r0	; 63
     328:	0f 90       	pop	r0
     32a:	1f 90       	pop	r1
     32c:	18 95       	reti

0000032e <__vector_16>:
	
/* Example 2 - ISR Input Capture Interrupt Timer 1 */
ISR (TIMER1_CAPT_vect)
{
     32e:	1f 92       	push	r1
     330:	0f 92       	push	r0
     332:	0f b6       	in	r0, 0x3f	; 63
     334:	0f 92       	push	r0
     336:	11 24       	eor	r1, r1
     338:	2f 93       	push	r18
     33a:	3f 93       	push	r19
     33c:	4f 93       	push	r20
     33e:	5f 93       	push	r21
     340:	6f 93       	push	r22
     342:	7f 93       	push	r23
     344:	8f 93       	push	r24
     346:	9f 93       	push	r25
     348:	af 93       	push	r26
     34a:	bf 93       	push	r27
     34c:	ef 93       	push	r30
     34e:	ff 93       	push	r31
	count++;
     350:	80 91 1c 03 	lds	r24, 0x031C
     354:	90 91 1d 03 	lds	r25, 0x031D
     358:	01 96       	adiw	r24, 0x01	; 1
     35a:	90 93 1d 03 	sts	0x031D, r25
     35e:	80 93 1c 03 	sts	0x031C, r24
	printf("count = %d\n",count);
     362:	9f 93       	push	r25
     364:	8f 93       	push	r24
     366:	8b e1       	ldi	r24, 0x1B	; 27
     368:	92 e0       	ldi	r25, 0x02	; 2
     36a:	9f 93       	push	r25
     36c:	8f 93       	push	r24
     36e:	0e 94 be 0b 	call	0x177c	; 0x177c <printf>
	foo();
     372:	0e 94 67 04 	call	0x8ce	; 0x8ce <foo>
	/* Clear counter to restart counting */
	TCNT1 = 0;
     376:	10 92 85 00 	sts	0x0085, r1
     37a:	10 92 84 00 	sts	0x0084, r1
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
}
     386:	ff 91       	pop	r31
     388:	ef 91       	pop	r30
     38a:	bf 91       	pop	r27
     38c:	af 91       	pop	r26
     38e:	9f 91       	pop	r25
     390:	8f 91       	pop	r24
     392:	7f 91       	pop	r23
     394:	6f 91       	pop	r22
     396:	5f 91       	pop	r21
     398:	4f 91       	pop	r20
     39a:	3f 91       	pop	r19
     39c:	2f 91       	pop	r18
     39e:	0f 90       	pop	r0
     3a0:	0f be       	out	0x3f, r0	; 63
     3a2:	0f 90       	pop	r0
     3a4:	1f 90       	pop	r1
     3a6:	18 95       	reti

000003a8 <main>:
  {
    //SYS_TaskHandler(); //Commented out until wireless hardware is tuned
    APP_TaskHandler();
  }
  */
	SYS_Init();
     3a8:	0e 94 31 06 	call	0xc62	; 0xc62 <SYS_Init>
	if(ref[j]==0) return 100;
	return j;
}

static void APP_Init(void){
	PWR_Init();
     3ac:	0e 94 58 03 	call	0x6b0	; 0x6b0 <PWR_Init>
	PWR_TurnOn5V();
     3b0:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <PWR_TurnOn5V>
	USART0_Init(9600);
     3b4:	60 e8       	ldi	r22, 0x80	; 128
     3b6:	75 e2       	ldi	r23, 0x25	; 37
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 24 04 	call	0x848	; 0x848 <USART0_Init>
	DDRB |= 0b00010000;
     3c0:	24 9a       	sbi	0x04, 4	; 4
	DDRE |= 0b00001000;
     3c2:	6b 9a       	sbi	0x0d, 3	; 13
	PORTE|= 0b00001000;
     3c4:	73 9a       	sbi	0x0e, 3	; 14
	TWI_Init(10000);
     3c6:	60 e1       	ldi	r22, 0x10	; 16
     3c8:	77 e2       	ldi	r23, 0x27	; 39
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 62 03 	call	0x6c4	; 0x6c4 <TWI_Init>
	ADC_Init();
     3d2:	0e 94 4c 03 	call	0x698	; 0x698 <ADC_Init>
	TGS2600_Init();
     3d6:	0e 94 48 03 	call	0x690	; 0x690 <TGS2600_Init>
	Si7020_init();
     3da:	0e 94 44 03 	call	0x688	; 0x688 <Si7020_init>
	printf("BMP280 Status %i\n", BMP280_Init());
     3de:	0e 94 5e 02 	call	0x4bc	; 0x4bc <BMP280_Init>
     3e2:	1f 92       	push	r1
     3e4:	8f 93       	push	r24
     3e6:	87 e2       	ldi	r24, 0x27	; 39
     3e8:	92 e0       	ldi	r25, 0x02	; 2
     3ea:	9f 93       	push	r25
     3ec:	8f 93       	push	r24
     3ee:	0e 94 be 0b 	call	0x177c	; 0x177c <printf>
	BMP280_SetOversampling(4);
     3f2:	84 e0       	ldi	r24, 0x04	; 4
     3f4:	90 e0       	ldi	r25, 0x00	; 0
     3f6:	0e 94 3e 03 	call	0x67c	; 0x67c <BMP280_SetOversampling>
	SPI_SlaveInit();
     3fa:	0e 94 5e 03 	call	0x6bc	; 0x6bc <SPI_SlaveInit>
    APP_TaskHandler();
  }
  */
	SYS_Init();
	APP_Init();
	printf("init done!\n");
     3fe:	89 e3       	ldi	r24, 0x39	; 57
     400:	92 e0       	ldi	r25, 0x02	; 2
     402:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <puts>
  	count = 0;
     406:	10 92 1d 03 	sts	0x031D, r1
     40a:	10 92 1c 03 	sts	0x031C, r1
  	init_Ex3();
     40e:	0e 94 3a 01 	call	0x274	; 0x274 <init_Ex3>
	/* Enable global interrupt */
	sei();
     412:	78 94       	sei
     414:	0f 90       	pop	r0
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	ff cf       	rjmp	.-2      	; 0x41c <main+0x74>

0000041e <BMP280_ReadBytes>:
  @brief Reads some bytes from the BMP280
  @param[in] *values pointer to an array to store the bytes, put the starting register in values[0]
  @param[in] length how many bytes to read
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadBytes(unsigned char *values, char length){
     41e:	1f 93       	push	r17
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	ec 01       	movw	r28, r24
     426:	16 2f       	mov	r17, r22
	//printf("BMP280_ReadBytes");
	//printf("0x%1x",(unsigned)TWI_BeginWrite(BMP280_ADDR));
	TWI_BeginWrite(BMP280_ADDR);
     428:	86 e7       	ldi	r24, 0x76	; 118
     42a:	0e 94 8e 03 	call	0x71c	; 0x71c <TWI_BeginWrite>
	//printf("0x%1x",(unsigned)TWI_WriteByte(values[0]));
	TWI_WriteByte(values[0]);//Write the register address
     42e:	88 81       	ld	r24, Y
     430:	0e 94 80 03 	call	0x700	; 0x700 <TWI_WriteByte>
	status = TWI_BeginRead(BMP280_ADDR); //Send a repeated start
     434:	86 e7       	ldi	r24, 0x76	; 118
     436:	0e 94 ab 03 	call	0x756	; 0x756 <TWI_BeginRead>
     43a:	80 93 1e 03 	sts	0x031E, r24
	//printf("0x%1x",status);
	if (status == TWI_SLAR_ACK){
     43e:	80 34       	cpi	r24, 0x40	; 64
     440:	81 f4       	brne	.+32     	; 0x462 <BMP280_ReadBytes+0x44>
		if(((TWI_Read(&values[0],length,false)&TWSR_MASK) == TWI_REC_NACK) && (TWI_Stop() != 0)) return(1); //Receive bytes, send a STOP bit, and check for success
     442:	61 2f       	mov	r22, r17
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	40 e0       	ldi	r20, 0x00	; 0
     448:	ce 01       	movw	r24, r28
     44a:	0e 94 e8 03 	call	0x7d0	; 0x7d0 <TWI_Read>
     44e:	88 7f       	andi	r24, 0xF8	; 248
     450:	88 35       	cpi	r24, 0x58	; 88
     452:	49 f4       	brne	.+18     	; 0x466 <BMP280_ReadBytes+0x48>
     454:	0e 94 e3 03 	call	0x7c6	; 0x7c6 <TWI_Stop>
     458:	91 e0       	ldi	r25, 0x01	; 1
     45a:	81 11       	cpse	r24, r1
     45c:	05 c0       	rjmp	.+10     	; 0x468 <BMP280_ReadBytes+0x4a>
     45e:	90 e0       	ldi	r25, 0x00	; 0
     460:	03 c0       	rjmp	.+6      	; 0x468 <BMP280_ReadBytes+0x4a>
	}
	return(0);
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	01 c0       	rjmp	.+2      	; 0x468 <BMP280_ReadBytes+0x4a>
     466:	90 e0       	ldi	r25, 0x00	; 0
}
     468:	89 2f       	mov	r24, r25
     46a:	df 91       	pop	r29
     46c:	cf 91       	pop	r28
     46e:	1f 91       	pop	r17
     470:	08 95       	ret

00000472 <BMP280_ReadInt>:
  @brief Reads an int from the BMP280
  @param[in] address The register address of the first byte of the uint
  @param[out] val* A pointer to a uint to store the received data to
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadInt(char address, int *val){
     472:	0f 93       	push	r16
     474:	1f 93       	push	r17
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	00 d0       	rcall	.+0      	; 0x47c <BMP280_ReadInt+0xa>
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62
     480:	8b 01       	movw	r16, r22
	//printf("\nBMP280_ReadInt");
	unsigned char data[2];	//char is 4 bits, 1 byte

	data[0] = address;
     482:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     484:	62 e0       	ldi	r22, 0x02	; 2
     486:	ce 01       	movw	r24, r28
     488:	01 96       	adiw	r24, 0x01	; 1
     48a:	0e 94 0f 02 	call	0x41e	; 0x41e <BMP280_ReadBytes>
     48e:	88 23       	and	r24, r24
     490:	59 f0       	breq	.+22     	; 0x4a8 <BMP280_ReadInt+0x36>
		*val = (((int)data[1]<<8)|(int)data[0]);
     492:	8a 81       	ldd	r24, Y+2	; 0x02
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	98 2f       	mov	r25, r24
     498:	88 27       	eor	r24, r24
     49a:	29 81       	ldd	r18, Y+1	; 0x01
     49c:	82 2b       	or	r24, r18
     49e:	f8 01       	movw	r30, r16
     4a0:	91 83       	std	Z+1, r25	; 0x01
     4a2:	80 83       	st	Z, r24
		return(1);
     4a4:	81 e0       	ldi	r24, 0x01	; 1
     4a6:	03 c0       	rjmp	.+6      	; 0x4ae <BMP280_ReadInt+0x3c>
	}
	*val = 0;
     4a8:	f8 01       	movw	r30, r16
     4aa:	11 82       	std	Z+1, r1	; 0x01
     4ac:	10 82       	st	Z, r1
	return(0);
}
     4ae:	0f 90       	pop	r0
     4b0:	0f 90       	pop	r0
     4b2:	df 91       	pop	r29
     4b4:	cf 91       	pop	r28
     4b6:	1f 91       	pop	r17
     4b8:	0f 91       	pop	r16
     4ba:	08 95       	ret

000004bc <BMP280_Init>:

/*************************************************************************//**
  @brief Initializes the BMP280 and reads the calibration data from the device
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
char BMP280_Init(void){
     4bc:	cf 93       	push	r28
     4be:	df 93       	push	r29
     4c0:	00 d0       	rcall	.+0      	; 0x4c2 <BMP280_Init+0x6>
     4c2:	cd b7       	in	r28, 0x3d	; 61
     4c4:	de b7       	in	r29, 0x3e	; 62
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
     4c6:	88 e8       	ldi	r24, 0x88	; 136
     4c8:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     4ca:	62 e0       	ldi	r22, 0x02	; 2
     4cc:	ce 01       	movw	r24, r28
     4ce:	01 96       	adiw	r24, 0x01	; 1
     4d0:	0e 94 0f 02 	call	0x41e	; 0x41e <BMP280_ReadBytes>
     4d4:	88 23       	and	r24, r24
     4d6:	99 f0       	breq	.+38     	; 0x4fe <BMP280_Init+0x42>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     4d8:	8a 81       	ldd	r24, Y+2	; 0x02
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	98 2f       	mov	r25, r24
     4de:	88 27       	eor	r24, r24
     4e0:	29 81       	ldd	r18, Y+1	; 0x01
     4e2:	82 2b       	or	r24, r18
     4e4:	90 93 22 03 	sts	0x0322, r25
     4e8:	80 93 21 03 	sts	0x0321, r24

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
     4ec:	67 e3       	ldi	r22, 0x37	; 55
     4ee:	73 e0       	ldi	r23, 0x03	; 3
     4f0:	8a e8       	ldi	r24, 0x8A	; 138
     4f2:	0e 94 39 02 	call	0x472	; 0x472 <BMP280_ReadInt>
	// used in the calculations when taking measurements.

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
     4f6:	88 23       	and	r24, r24
     4f8:	09 f4       	brne	.+2      	; 0x4fc <BMP280_Init+0x40>
     4fa:	bb c0       	rjmp	.+374    	; 0x672 <BMP280_Init+0x1b6>
     4fc:	05 c0       	rjmp	.+10     	; 0x508 <BMP280_Init+0x4c>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     4fe:	10 92 22 03 	sts	0x0322, r1
     502:	10 92 21 03 	sts	0x0321, r1
     506:	b5 c0       	rjmp	.+362    	; 0x672 <BMP280_Init+0x1b6>
	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
     508:	65 e3       	ldi	r22, 0x35	; 53
     50a:	73 e0       	ldi	r23, 0x03	; 3
     50c:	8c e8       	ldi	r24, 0x8C	; 140
     50e:	0e 94 39 02 	call	0x472	; 0x472 <BMP280_ReadInt>

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
     512:	88 23       	and	r24, r24
     514:	09 f4       	brne	.+2      	; 0x518 <BMP280_Init+0x5c>
     516:	ad c0       	rjmp	.+346    	; 0x672 <BMP280_Init+0x1b6>
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
     518:	8e e8       	ldi	r24, 0x8E	; 142
     51a:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     51c:	62 e0       	ldi	r22, 0x02	; 2
     51e:	ce 01       	movw	r24, r28
     520:	01 96       	adiw	r24, 0x01	; 1
     522:	0e 94 0f 02 	call	0x41e	; 0x41e <BMP280_ReadBytes>
     526:	88 23       	and	r24, r24
     528:	99 f0       	breq	.+38     	; 0x550 <BMP280_Init+0x94>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     52a:	8a 81       	ldd	r24, Y+2	; 0x02
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	98 2f       	mov	r25, r24
     530:	88 27       	eor	r24, r24
     532:	29 81       	ldd	r18, Y+1	; 0x01
     534:	82 2b       	or	r24, r18
     536:	90 93 24 03 	sts	0x0324, r25
     53a:	80 93 23 03 	sts	0x0323, r24
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     53e:	63 e3       	ldi	r22, 0x33	; 51
     540:	73 e0       	ldi	r23, 0x03	; 3
     542:	80 e9       	ldi	r24, 0x90	; 144
     544:	0e 94 39 02 	call	0x472	; 0x472 <BMP280_ReadInt>
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
     548:	88 23       	and	r24, r24
     54a:	09 f4       	brne	.+2      	; 0x54e <BMP280_Init+0x92>
     54c:	92 c0       	rjmp	.+292    	; 0x672 <BMP280_Init+0x1b6>
     54e:	05 c0       	rjmp	.+10     	; 0x55a <BMP280_Init+0x9e>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     550:	10 92 24 03 	sts	0x0324, r1
     554:	10 92 23 03 	sts	0x0323, r1
     558:	8c c0       	rjmp	.+280    	; 0x672 <BMP280_Init+0x1b6>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     55a:	61 e3       	ldi	r22, 0x31	; 49
     55c:	73 e0       	ldi	r23, 0x03	; 3
     55e:	82 e9       	ldi	r24, 0x92	; 146
     560:	0e 94 39 02 	call	0x472	; 0x472 <BMP280_ReadInt>
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     564:	88 23       	and	r24, r24
     566:	09 f4       	brne	.+2      	; 0x56a <BMP280_Init+0xae>
     568:	84 c0       	rjmp	.+264    	; 0x672 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     56a:	6f e2       	ldi	r22, 0x2F	; 47
     56c:	73 e0       	ldi	r23, 0x03	; 3
     56e:	84 e9       	ldi	r24, 0x94	; 148
     570:	0e 94 39 02 	call	0x472	; 0x472 <BMP280_ReadInt>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     574:	88 23       	and	r24, r24
     576:	09 f4       	brne	.+2      	; 0x57a <BMP280_Init+0xbe>
     578:	7c c0       	rjmp	.+248    	; 0x672 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     57a:	6d e2       	ldi	r22, 0x2D	; 45
     57c:	73 e0       	ldi	r23, 0x03	; 3
     57e:	86 e9       	ldi	r24, 0x96	; 150
     580:	0e 94 39 02 	call	0x472	; 0x472 <BMP280_ReadInt>
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     584:	88 23       	and	r24, r24
     586:	09 f4       	brne	.+2      	; 0x58a <BMP280_Init+0xce>
     588:	74 c0       	rjmp	.+232    	; 0x672 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     58a:	6b e2       	ldi	r22, 0x2B	; 43
     58c:	73 e0       	ldi	r23, 0x03	; 3
     58e:	88 e9       	ldi	r24, 0x98	; 152
     590:	0e 94 39 02 	call	0x472	; 0x472 <BMP280_ReadInt>
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     594:	88 23       	and	r24, r24
     596:	09 f4       	brne	.+2      	; 0x59a <BMP280_Init+0xde>
     598:	6c c0       	rjmp	.+216    	; 0x672 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     59a:	69 e2       	ldi	r22, 0x29	; 41
     59c:	73 e0       	ldi	r23, 0x03	; 3
     59e:	8a e9       	ldi	r24, 0x9A	; 154
     5a0:	0e 94 39 02 	call	0x472	; 0x472 <BMP280_ReadInt>
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     5a4:	88 23       	and	r24, r24
     5a6:	09 f4       	brne	.+2      	; 0x5aa <BMP280_Init+0xee>
     5a8:	64 c0       	rjmp	.+200    	; 0x672 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     5aa:	67 e2       	ldi	r22, 0x27	; 39
     5ac:	73 e0       	ldi	r23, 0x03	; 3
     5ae:	8c e9       	ldi	r24, 0x9C	; 156
     5b0:	0e 94 39 02 	call	0x472	; 0x472 <BMP280_ReadInt>
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     5b4:	88 23       	and	r24, r24
     5b6:	09 f4       	brne	.+2      	; 0x5ba <BMP280_Init+0xfe>
     5b8:	5c c0       	rjmp	.+184    	; 0x672 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9C, &dig_P8)  &&
		BMP280_ReadInt(0x9E, &dig_P9)){
     5ba:	65 e2       	ldi	r22, 0x25	; 37
     5bc:	73 e0       	ldi	r23, 0x03	; 3
     5be:	8e e9       	ldi	r24, 0x9E	; 158
     5c0:	0e 94 39 02 	call	0x472	; 0x472 <BMP280_ReadInt>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     5c4:	88 23       	and	r24, r24
     5c6:	09 f4       	brne	.+2      	; 0x5ca <BMP280_Init+0x10e>
     5c8:	54 c0       	rjmp	.+168    	; 0x672 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9E, &dig_P9)){
			printf("\nT: %i ,%i ,%i P: %i ,%i ,%i ,%i ,%i ,%i ,%i ,%1 ,%i \n",dig_T1,dig_T2,dig_T3,dig_P1,dig_P2,dig_P3,dig_P4,dig_P5,dig_P6,dig_P7,dig_P8,dig_P9);
     5ca:	80 91 26 03 	lds	r24, 0x0326
     5ce:	8f 93       	push	r24
     5d0:	80 91 25 03 	lds	r24, 0x0325
     5d4:	8f 93       	push	r24
     5d6:	80 91 28 03 	lds	r24, 0x0328
     5da:	8f 93       	push	r24
     5dc:	80 91 27 03 	lds	r24, 0x0327
     5e0:	8f 93       	push	r24
     5e2:	80 91 2a 03 	lds	r24, 0x032A
     5e6:	8f 93       	push	r24
     5e8:	80 91 29 03 	lds	r24, 0x0329
     5ec:	8f 93       	push	r24
     5ee:	80 91 2c 03 	lds	r24, 0x032C
     5f2:	8f 93       	push	r24
     5f4:	80 91 2b 03 	lds	r24, 0x032B
     5f8:	8f 93       	push	r24
     5fa:	80 91 2e 03 	lds	r24, 0x032E
     5fe:	8f 93       	push	r24
     600:	80 91 2d 03 	lds	r24, 0x032D
     604:	8f 93       	push	r24
     606:	80 91 30 03 	lds	r24, 0x0330
     60a:	8f 93       	push	r24
     60c:	80 91 2f 03 	lds	r24, 0x032F
     610:	8f 93       	push	r24
     612:	80 91 32 03 	lds	r24, 0x0332
     616:	8f 93       	push	r24
     618:	80 91 31 03 	lds	r24, 0x0331
     61c:	8f 93       	push	r24
     61e:	80 91 34 03 	lds	r24, 0x0334
     622:	8f 93       	push	r24
     624:	80 91 33 03 	lds	r24, 0x0333
     628:	8f 93       	push	r24
     62a:	80 91 24 03 	lds	r24, 0x0324
     62e:	8f 93       	push	r24
     630:	80 91 23 03 	lds	r24, 0x0323
     634:	8f 93       	push	r24
     636:	80 91 36 03 	lds	r24, 0x0336
     63a:	8f 93       	push	r24
     63c:	80 91 35 03 	lds	r24, 0x0335
     640:	8f 93       	push	r24
     642:	80 91 38 03 	lds	r24, 0x0338
     646:	8f 93       	push	r24
     648:	80 91 37 03 	lds	r24, 0x0337
     64c:	8f 93       	push	r24
     64e:	80 91 22 03 	lds	r24, 0x0322
     652:	8f 93       	push	r24
     654:	80 91 21 03 	lds	r24, 0x0321
     658:	8f 93       	push	r24
     65a:	84 e4       	ldi	r24, 0x44	; 68
     65c:	92 e0       	ldi	r25, 0x02	; 2
     65e:	9f 93       	push	r25
     660:	8f 93       	push	r24
     662:	0e 94 be 0b 	call	0x177c	; 0x177c <printf>
		return (1);
     666:	0f b6       	in	r0, 0x3f	; 63
     668:	f8 94       	cli
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	0f be       	out	0x3f, r0	; 63
     66e:	cd bf       	out	0x3d, r28	; 61
     670:	81 e0       	ldi	r24, 0x01	; 1
	}
	else 
		return (0);
}
     672:	0f 90       	pop	r0
     674:	0f 90       	pop	r0
     676:	df 91       	pop	r29
     678:	cf 91       	pop	r28
     67a:	08 95       	ret

0000067c <BMP280_SetOversampling>:
  @brief Sets the oversampling setting for the library
  @param[in] oss Oversampling setting
  @return 1
*****************************************************************************/
char BMP280_SetOversampling(short oss){
	oversampling = oss;
     67c:	90 93 20 03 	sts	0x0320, r25
     680:	80 93 1f 03 	sts	0x031F, r24
	return (1);
}
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	08 95       	ret

00000688 <Si7020_init>:
*****************************************************************************/
char Si7020_init() {
	// Initialize the TWI library at 200kHz
	//TWI_Init(200000);
	return 0;
}
     688:	80 e0       	ldi	r24, 0x00	; 0
     68a:	08 95       	ret

0000068c <TGS2600_TurnOn>:
	DDRB |= 0b00100000;
	TGS2600_TurnOn();
}

void TGS2600_TurnOn(void){
	PORTB |= 0b00100000;
     68c:	2d 9a       	sbi	0x05, 5	; 5
     68e:	08 95       	ret

00000690 <TGS2600_Init>:
#include "devices/TGS2600.h"
#include "drivers/ADC.h"
#include "drivers/PWR.h"

void TGS2600_Init(void){
	DDRB |= 0b00100000;
     690:	25 9a       	sbi	0x04, 5	; 4
	TGS2600_TurnOn();
     692:	0e 94 46 03 	call	0x68c	; 0x68c <TGS2600_TurnOn>
     696:	08 95       	ret

00000698 <ADC_Init>:

/*************************************************************************//**
  @brief Initializes the ADC
*****************************************************************************/
void ADC_Init(void) {
	ADCSRA = (1<<ADEN)|(4<<ADPS0); //enables the ADC module, CPU clock prescale=16
     698:	84 e8       	ldi	r24, 0x84	; 132
     69a:	80 93 7a 00 	sts	0x007A, r24
	
	ADCSRC = 0x05|(1<<ADTHT0)|(1<<ADTHT1); //ADSUT=5
     69e:	85 ec       	ldi	r24, 0xC5	; 197
     6a0:	80 93 77 00 	sts	0x0077, r24
	while((ADCSRB&(1<<AVDDOK))==0);
     6a4:	eb e7       	ldi	r30, 0x7B	; 123
     6a6:	f0 e0       	ldi	r31, 0x00	; 0
     6a8:	80 81       	ld	r24, Z
     6aa:	88 23       	and	r24, r24
     6ac:	ec f7       	brge	.-6      	; 0x6a8 <ADC_Init+0x10>
}
     6ae:	08 95       	ret

000006b0 <PWR_Init>:

/*************************************************************************//**
  @brief Initializes the power management system
*****************************************************************************/
void PWR_Init(void){
	DDRD |= 0b11000000;
     6b0:	8a b1       	in	r24, 0x0a	; 10
     6b2:	80 6c       	ori	r24, 0xC0	; 192
     6b4:	8a b9       	out	0x0a, r24	; 10
     6b6:	08 95       	ret

000006b8 <PWR_TurnOn5V>:

/*************************************************************************//**
  @brief Turns on the 5V power supply
*****************************************************************************/
void PWR_TurnOn5V(void){
	PORTD |= 0b10000000;
     6b8:	5f 9a       	sbi	0x0b, 7	; 11
     6ba:	08 95       	ret

000006bc <SPI_SlaveInit>:

unsigned char buffer[16];

void SPI_SlaveInit(void)
{
	DDRB |= (1<<PORTB3); //Set MISO output
     6bc:	23 9a       	sbi	0x04, 3	; 4
	SPCR = (1<<SPE); //Enable SPI
     6be:	80 e4       	ldi	r24, 0x40	; 64
     6c0:	8c bd       	out	0x2c, r24	; 44
     6c2:	08 95       	ret

000006c4 <TWI_Init>:
/*************************************************************************//**
  @brief Initializes the 2-wire Serial Interface as a master
  @param[in] freq SCL frequency (Do not exceed 400kHz)
  @return Status (@c 0 on failure, nonzero otherwise)
*****************************************************************************/
char TWI_Init(unsigned long freq){
     6c4:	9b 01       	movw	r18, r22
     6c6:	ac 01       	movw	r20, r24
	//printf("TWI_Init");
	TWSR=0x00;
     6c8:	10 92 b9 00 	sts	0x00B9, r1
	TWBR=(unsigned char)(((F_CPU/freq)-16UL)/8UL); //Compute settings value and set frequency
     6cc:	60 e0       	ldi	r22, 0x00	; 0
     6ce:	74 e2       	ldi	r23, 0x24	; 36
     6d0:	84 ef       	ldi	r24, 0xF4	; 244
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 45 0a 	call	0x148a	; 0x148a <__udivmodsi4>
     6d8:	da 01       	movw	r26, r20
     6da:	c9 01       	movw	r24, r18
     6dc:	40 97       	sbiw	r24, 0x10	; 16
     6de:	a1 09       	sbc	r26, r1
     6e0:	b1 09       	sbc	r27, r1
     6e2:	68 94       	set
     6e4:	12 f8       	bld	r1, 2
     6e6:	b6 95       	lsr	r27
     6e8:	a7 95       	ror	r26
     6ea:	97 95       	ror	r25
     6ec:	87 95       	ror	r24
     6ee:	16 94       	lsr	r1
     6f0:	d1 f7       	brne	.-12     	; 0x6e6 <TWI_Init+0x22>
     6f2:	80 93 b8 00 	sts	0x00B8, r24
	TWCR=(1 << TWEN);
     6f6:	84 e0       	ldi	r24, 0x04	; 4
     6f8:	80 93 bc 00 	sts	0x00BC, r24
	
	//TWAR=0; //Disable slave mode
	
	return 1; //May want to actually check for success here
}
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	08 95       	ret

00000700 <TWI_WriteByte>:
  @param[in] data byte to send
  @return Status code, TWI_SENT_ACK or TWI_SENT_NACK on success
*****************************************************************************/
char TWI_WriteByte(unsigned char data){
	//printf("TWI_WriteByte");
	TWDR = data; //Stage the data to send
     700:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
     704:	84 e8       	ldi	r24, 0x84	; 132
     706:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);//Send the data
     70a:	ec eb       	ldi	r30, 0xBC	; 188
     70c:	f0 e0       	ldi	r31, 0x00	; 0
     70e:	80 81       	ld	r24, Z
     710:	88 23       	and	r24, r24
     712:	ec f7       	brge	.-6      	; 0x70e <TWI_WriteByte+0xe>
	
	return TWSR&TWSR_MASK;//Return the status code
     714:	80 91 b9 00 	lds	r24, 0x00B9
}
     718:	88 7f       	andi	r24, 0xF8	; 248
     71a:	08 95       	ret

0000071c <TWI_BeginWrite>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAW_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginWrite(unsigned char address){
	//printf("TWI_BeginWrite");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
     71c:	94 ee       	ldi	r25, 0xE4	; 228
     71e:	90 93 bc 00 	sts	0x00BC, r25
	int i=0;
	while ((TWCR & (1<<TWINT)) == 0);
     722:	ec eb       	ldi	r30, 0xBC	; 188
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	90 81       	ld	r25, Z
     728:	99 23       	and	r25, r25
     72a:	ec f7       	brge	.-6      	; 0x726 <TWI_BeginWrite+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     72c:	ef e9       	ldi	r30, 0x9F	; 159
     72e:	ff e0       	ldi	r31, 0x0F	; 15
     730:	31 97       	sbiw	r30, 0x01	; 1
     732:	f1 f7       	brne	.-4      	; 0x730 <TWI_BeginWrite+0x14>
     734:	00 c0       	rjmp	.+0      	; 0x736 <TWI_BeginWrite+0x1a>
     736:	00 00       	nop
	_delay_ms(1);
	char stat = (TWSR & TWSR_MASK);
     738:	90 91 b9 00 	lds	r25, 0x00B9
     73c:	98 7f       	andi	r25, 0xF8	; 248
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
     73e:	98 30       	cpi	r25, 0x08	; 8
     740:	31 f0       	breq	.+12     	; 0x74e <TWI_BeginWrite+0x32>
     742:	90 31       	cpi	r25, 0x10	; 16
     744:	21 f0       	breq	.+8      	; 0x74e <TWI_BeginWrite+0x32>
     746:	80 91 b9 00 	lds	r24, 0x00B9
     74a:	88 7f       	andi	r24, 0xF8	; 248
     74c:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) & SLAW_MASK); //reset bit 0 to send a write bit, send
     74e:	88 0f       	add	r24, r24
     750:	0e 94 80 03 	call	0x700	; 0x700 <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	return stat;//Return the status code
}
     754:	08 95       	ret

00000756 <TWI_BeginRead>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAR_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginRead(unsigned char address){
	//printf("TWI_BeginRead");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
     756:	94 ee       	ldi	r25, 0xE4	; 228
     758:	90 93 bc 00 	sts	0x00BC, r25
	while ((TWCR & (1<<TWINT)) == 0);
     75c:	ec eb       	ldi	r30, 0xBC	; 188
     75e:	f0 e0       	ldi	r31, 0x00	; 0
     760:	90 81       	ld	r25, Z
     762:	99 23       	and	r25, r25
     764:	ec f7       	brge	.-6      	; 0x760 <TWI_BeginRead+0xa>
	
	char stat = (TWSR & TWSR_MASK);
     766:	90 91 b9 00 	lds	r25, 0x00B9
     76a:	98 7f       	andi	r25, 0xF8	; 248
	//printf("0x%1x",(unsigned)stat);
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
     76c:	98 30       	cpi	r25, 0x08	; 8
     76e:	31 f0       	breq	.+12     	; 0x77c <TWI_BeginRead+0x26>
     770:	90 31       	cpi	r25, 0x10	; 16
     772:	21 f0       	breq	.+8      	; 0x77c <TWI_BeginRead+0x26>
     774:	80 91 b9 00 	lds	r24, 0x00B9
     778:	88 7f       	andi	r24, 0xF8	; 248
     77a:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) | SLAR_MASK); //set bit 0 to send a read bit and send it
     77c:	88 0f       	add	r24, r24
     77e:	81 60       	ori	r24, 0x01	; 1
     780:	0e 94 80 03 	call	0x700	; 0x700 <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	
	return stat;//Return the status code
}
     784:	08 95       	ret

00000786 <TWI_ReadAck>:
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_ACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadAck(unsigned char *data){
	//printf("TWI_ReadAck");
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Start receiving, ending with an ACK
     786:	24 ec       	ldi	r18, 0xC4	; 196
     788:	20 93 bc 00 	sts	0x00BC, r18
	while ((TWCR & (1<<TWINT)) == 0);
     78c:	ec eb       	ldi	r30, 0xBC	; 188
     78e:	f0 e0       	ldi	r31, 0x00	; 0
     790:	20 81       	ld	r18, Z
     792:	22 23       	and	r18, r18
     794:	ec f7       	brge	.-6      	; 0x790 <TWI_ReadAck+0xa>
	*data=TWDR; //Store the data
     796:	20 91 bb 00 	lds	r18, 0x00BB
     79a:	fc 01       	movw	r30, r24
     79c:	20 83       	st	Z, r18
	
	return TWSR&TWSR_MASK;//Return the status code
     79e:	80 91 b9 00 	lds	r24, 0x00B9
}
     7a2:	88 7f       	andi	r24, 0xF8	; 248
     7a4:	08 95       	ret

000007a6 <TWI_ReadNack>:
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_NACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadNack(unsigned char *data){
	//printf("TWI_ReadNack");
	TWCR = (1<<TWINT)|(1<<TWEN); //Start receiving, ending with a NACK
     7a6:	24 e8       	ldi	r18, 0x84	; 132
     7a8:	20 93 bc 00 	sts	0x00BC, r18
	while ((TWCR & (1<<TWINT)) == 0);
     7ac:	ec eb       	ldi	r30, 0xBC	; 188
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	20 81       	ld	r18, Z
     7b2:	22 23       	and	r18, r18
     7b4:	ec f7       	brge	.-6      	; 0x7b0 <TWI_ReadNack+0xa>
	*data=TWDR; //Store the data
     7b6:	20 91 bb 00 	lds	r18, 0x00BB
     7ba:	fc 01       	movw	r30, r24
     7bc:	20 83       	st	Z, r18
	
	return TWSR&TWSR_MASK;//Return the status code
     7be:	80 91 b9 00 	lds	r24, 0x00B9
}
     7c2:	88 7f       	andi	r24, 0xF8	; 248
     7c4:	08 95       	ret

000007c6 <TWI_Stop>:
  @brief Sends a Stop bit, be sure to send a Start bit before future interactions on the bus
  @return Status code, should always be nonzero
*****************************************************************************/
char TWI_Stop(void){
	//printf("TWI_Stop");
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     7c6:	84 e9       	ldi	r24, 0x94	; 148
     7c8:	80 93 bc 00 	sts	0x00BC, r24
	return 1;
}
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	08 95       	ret

000007d0 <TWI_Read>:
  @param[in] amount Number of bytes to recieve
  @param[in] whether or not to send an ACK on the last byte, sends NACK if false
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
     7d0:	9f 92       	push	r9
     7d2:	af 92       	push	r10
     7d4:	bf 92       	push	r11
     7d6:	cf 92       	push	r12
     7d8:	df 92       	push	r13
     7da:	ef 92       	push	r14
     7dc:	ff 92       	push	r15
     7de:	0f 93       	push	r16
     7e0:	1f 93       	push	r17
     7e2:	cf 93       	push	r28
     7e4:	df 93       	push	r29
     7e6:	7c 01       	movw	r14, r24
     7e8:	8b 01       	movw	r16, r22
     7ea:	94 2e       	mov	r9, r20
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
     7ec:	16 16       	cp	r1, r22
     7ee:	17 06       	cpc	r1, r23
     7f0:	f4 f4       	brge	.+60     	; 0x82e <TWI_Read+0x5e>
     7f2:	c0 e0       	ldi	r28, 0x00	; 0
     7f4:	d0 e0       	ldi	r29, 0x00	; 0
		if((ack==false) && ((amount-1)==i)){
     7f6:	6b 01       	movw	r12, r22
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	c8 1a       	sub	r12, r24
     7fc:	d1 08       	sbc	r13, r1
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
     7fe:	57 01       	movw	r10, r14
     800:	ac 0c       	add	r10, r12
     802:	bd 1c       	adc	r11, r13
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
		if((ack==false) && ((amount-1)==i)){
     804:	91 10       	cpse	r9, r1
     806:	07 c0       	rjmp	.+14     	; 0x816 <TWI_Read+0x46>
     808:	cc 16       	cp	r12, r28
     80a:	dd 06       	cpc	r13, r29
     80c:	21 f4       	brne	.+8      	; 0x816 <TWI_Read+0x46>
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
     80e:	c5 01       	movw	r24, r10
     810:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <TWI_ReadNack>
     814:	05 c0       	rjmp	.+10     	; 0x820 <TWI_Read+0x50>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}else{
			status=TWI_ReadAck(&data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
     816:	c7 01       	movw	r24, r14
     818:	8c 0f       	add	r24, r28
     81a:	9d 1f       	adc	r25, r29
     81c:	0e 94 c3 03 	call	0x786	; 0x786 <TWI_ReadAck>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}
		//printf("A");
		if(status!=TWI_REC_ACK)return status; //If NACK was selected, returning here is fine since the loop is already ending
     820:	80 35       	cpi	r24, 0x50	; 80
     822:	31 f4       	brne	.+12     	; 0x830 <TWI_Read+0x60>
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
     824:	21 96       	adiw	r28, 0x01	; 1
     826:	c0 17       	cp	r28, r16
     828:	d1 07       	cpc	r29, r17
     82a:	61 f7       	brne	.-40     	; 0x804 <TWI_Read+0x34>
     82c:	01 c0       	rjmp	.+2      	; 0x830 <TWI_Read+0x60>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
     82e:	80 e0       	ldi	r24, 0x00	; 0
		//will return if something goes wrong partway through
		//printf("B");
	}
	//printf("0x%1x",(unsigned)status);
	return status;
}
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	1f 91       	pop	r17
     836:	0f 91       	pop	r16
     838:	ff 90       	pop	r15
     83a:	ef 90       	pop	r14
     83c:	df 90       	pop	r13
     83e:	cf 90       	pop	r12
     840:	bf 90       	pop	r11
     842:	af 90       	pop	r10
     844:	9f 90       	pop	r9
     846:	08 95       	ret

00000848 <USART0_Init>:
  @brief Initializes USART0 in asynchronous UART mode, 8 bit data, 1 stop bit
  @param[in] desired baud rate (configuration values computed using F_CPU)
*****************************************************************************/
void USART0_Init(unsigned long baud){
	
	stdout = &USART0_stdout; //make stdout print to USART0
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	32 e0       	ldi	r19, 0x02	; 2
     84c:	30 93 74 06 	sts	0x0674, r19
     850:	20 93 73 06 	sts	0x0673, r18
	
	//Compute UBRR for baudrate setting
	unsigned short ubrr=(unsigned short)((F_CPU/(baud*16UL))-1);
     854:	dc 01       	movw	r26, r24
     856:	cb 01       	movw	r24, r22
     858:	88 0f       	add	r24, r24
     85a:	99 1f       	adc	r25, r25
     85c:	aa 1f       	adc	r26, r26
     85e:	bb 1f       	adc	r27, r27
     860:	88 0f       	add	r24, r24
     862:	99 1f       	adc	r25, r25
     864:	aa 1f       	adc	r26, r26
     866:	bb 1f       	adc	r27, r27
     868:	9c 01       	movw	r18, r24
     86a:	ad 01       	movw	r20, r26
     86c:	22 0f       	add	r18, r18
     86e:	33 1f       	adc	r19, r19
     870:	44 1f       	adc	r20, r20
     872:	55 1f       	adc	r21, r21
     874:	22 0f       	add	r18, r18
     876:	33 1f       	adc	r19, r19
     878:	44 1f       	adc	r20, r20
     87a:	55 1f       	adc	r21, r21
     87c:	60 e0       	ldi	r22, 0x00	; 0
     87e:	74 e2       	ldi	r23, 0x24	; 36
     880:	84 ef       	ldi	r24, 0xF4	; 244
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0e 94 45 0a 	call	0x148a	; 0x148a <__udivmodsi4>
     888:	21 50       	subi	r18, 0x01	; 1
     88a:	31 09       	sbc	r19, r1
	
	//Set BAUD rate.
	UBRR0H = (unsigned char) (ubrr >> 8);
     88c:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) ubrr;
     890:	20 93 c4 00 	sts	0x00C4, r18
	/*Set frame format. 8 data bit(settings bits UCSZ00 and UCSZ01  UCSR0B), 1 stop bit(by default and need not to be worried about). 
	The UCSZ01:0 bits combined with the UCSZ02 bit in UCSR0B sets the number of data
	bits (Character Size) in the frame that the Receiver and Transmitter use. 
	If a change on frame format is needed, make sure to modify UCSR0B register above accordingly.
	See datasheet pg. 390.*/
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
     894:	86 e0       	ldi	r24, 0x06	; 6
     896:	80 93 c2 00 	sts	0x00C2, r24
	
	//Enable receiver and transmitter. Enable the USART Receive Complete interrupt(RXCIE).
	//UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0));
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);//Enable RX/TX, no interrupts
     89a:	88 e1       	ldi	r24, 0x18	; 24
     89c:	80 93 c1 00 	sts	0x00C1, r24
     8a0:	08 95       	ret

000008a2 <USART0_Transmit>:
Function contains busy loops for simplicity in debugging. Not production code.
  @brief Transmits a byte via USART0
  @param[in] data byte to be transmitted
*****************************************************************************/
void USART0_Transmit(unsigned char data){
	while(!(UCSR0A & (1 << UDRE0))); //Wait for the empty transmit buffer. (Waiting UDR0 to be empty.)
     8a2:	e0 ec       	ldi	r30, 0xC0	; 192
     8a4:	f0 e0       	ldi	r31, 0x00	; 0
     8a6:	90 81       	ld	r25, Z
     8a8:	95 ff       	sbrs	r25, 5
     8aa:	fd cf       	rjmp	.-6      	; 0x8a6 <USART0_Transmit+0x4>
		UDR0 = data;			//store the data in the USART Data Register
     8ac:	80 93 c6 00 	sts	0x00C6, r24
     8b0:	08 95       	ret

000008b2 <USART0_putchar_printf>:
  @brief Called when stdout is being printed to USART0 (this is set up at runtime)
  @param[in] var byte to transmit
  @param[in/out] *stream Pointer to a stdio.h FILE io stream
  @return Status
*****************************************************************************/
int USART0_putchar_printf(char var, FILE *stream) {
     8b2:	cf 93       	push	r28
     8b4:	c8 2f       	mov	r28, r24
	if (var == '\n') USART0_Transmit('\r');
     8b6:	8a 30       	cpi	r24, 0x0A	; 10
     8b8:	19 f4       	brne	.+6      	; 0x8c0 <USART0_putchar_printf+0xe>
     8ba:	8d e0       	ldi	r24, 0x0D	; 13
     8bc:	0e 94 51 04 	call	0x8a2	; 0x8a2 <USART0_Transmit>
	USART0_Transmit(var);
     8c0:	8c 2f       	mov	r24, r28
     8c2:	0e 94 51 04 	call	0x8a2	; 0x8a2 <USART0_Transmit>
	return 0;
}
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	cf 91       	pop	r28
     8cc:	08 95       	ret

000008ce <foo>:

}

void foo()
{
	printf("Top of loop !\n");
     8ce:	8e e0       	ldi	r24, 0x0E	; 14
     8d0:	93 e0       	ldi	r25, 0x03	; 3
     8d2:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <puts>
     8d6:	08 95       	ret

000008d8 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     8d8:	14 be       	out	0x34, r1	; 52
  wdt_disable();
     8da:	88 e1       	ldi	r24, 0x18	; 24
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	f8 94       	cli
     8e0:	80 93 60 00 	sts	0x0060, r24
     8e4:	10 92 60 00 	sts	0x0060, r1
     8e8:	0f be       	out	0x3f, r0	; 63

  CLKPR = 1 << CLKPCE;
     8ea:	e1 e6       	ldi	r30, 0x61	; 97
     8ec:	f0 e0       	ldi	r31, 0x00	; 0
     8ee:	80 e8       	ldi	r24, 0x80	; 128
     8f0:	80 83       	st	Z, r24
  CLKPR = 0;
     8f2:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     8f4:	78 94       	sei

  HAL_TimerInit();
     8f6:	0e 94 7e 04 	call	0x8fc	; 0x8fc <HAL_TimerInit>
     8fa:	08 95       	ret

000008fc <HAL_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_TimerInit(void)
{
  halTimerIrqCount = 0;
     8fc:	10 92 48 06 	sts	0x0648, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
     900:	80 e2       	ldi	r24, 0x20	; 32
     902:	9e e4       	ldi	r25, 0x4E	; 78
     904:	90 93 a9 00 	sts	0x00A9, r25
     908:	80 93 a8 00 	sts	0x00A8, r24
  TCCR4B = (1 << WGM12);              // CTC mode
     90c:	e1 ea       	ldi	r30, 0xA1	; 161
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	88 e0       	ldi	r24, 0x08	; 8
     912:	80 83       	st	Z, r24
  TCCR4B |= (1 << CS11);              // Prescaler 8
     914:	80 81       	ld	r24, Z
     916:	82 60       	ori	r24, 0x02	; 2
     918:	80 83       	st	Z, r24
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
     91a:	e2 e7       	ldi	r30, 0x72	; 114
     91c:	f0 e0       	ldi	r31, 0x00	; 0
     91e:	80 81       	ld	r24, Z
     920:	82 60       	ori	r24, 0x02	; 2
     922:	80 83       	st	Z, r24
     924:	08 95       	ret

00000926 <__vector_42>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     926:	1f 92       	push	r1
     928:	0f 92       	push	r0
     92a:	0f b6       	in	r0, 0x3f	; 63
     92c:	0f 92       	push	r0
     92e:	11 24       	eor	r1, r1
     930:	8f 93       	push	r24
  halTimerIrqCount++;
     932:	80 91 48 06 	lds	r24, 0x0648
     936:	8f 5f       	subi	r24, 0xFF	; 255
     938:	80 93 48 06 	sts	0x0648, r24
}
     93c:	8f 91       	pop	r24
     93e:	0f 90       	pop	r0
     940:	0f be       	out	0x3f, r0	; 63
     942:	0f 90       	pop	r0
     944:	1f 90       	pop	r1
     946:	18 95       	reti

00000948 <NWK_Init>:
/*************************************************************************//**
  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
  nwkIb.nwkSeqNum = 0;
     948:	10 92 4d 06 	sts	0x064D, r1
  nwkIb.macSeqNum = 0;
     94c:	10 92 4e 06 	sts	0x064E, r1
  nwkIb.addr = 0;
     950:	10 92 4a 06 	sts	0x064A, r1
     954:	10 92 49 06 	sts	0x0649, r1
  nwkIb.lock = 0;
     958:	10 92 70 06 	sts	0x0670, r1
     95c:	10 92 6f 06 	sts	0x066F, r1
     960:	ef e4       	ldi	r30, 0x4F	; 79
     962:	f6 e0       	ldi	r31, 0x06	; 6
     964:	8f e6       	ldi	r24, 0x6F	; 111
     966:	96 e0       	ldi	r25, 0x06	; 6

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
    nwkIb.endpoint[i] = NULL;
     968:	11 92       	st	Z+, r1
     96a:	11 92       	st	Z+, r1
  nwkIb.nwkSeqNum = 0;
  nwkIb.macSeqNum = 0;
  nwkIb.addr = 0;
  nwkIb.lock = 0;

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
     96c:	e8 17       	cp	r30, r24
     96e:	f9 07       	cpc	r31, r25
     970:	d9 f7       	brne	.-10     	; 0x968 <NWK_Init+0x20>
    nwkIb.endpoint[i] = NULL;

  nwkTxInit();
     972:	0e 94 b5 05 	call	0xb6a	; 0xb6a <nwkTxInit>
  nwkRxInit();
     976:	0e 94 28 05 	call	0xa50	; 0xa50 <nwkRxInit>
  nwkFrameInit();
     97a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <nwkFrameInit>
  nwkDataReqInit();
     97e:	0e 94 cb 04 	call	0x996	; 0x996 <nwkDataReqInit>
     982:	08 95       	ret

00000984 <NWK_OpenEndpoint>:
  @param[in] id Endpoint index (1-15)
  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
  nwkIb.endpoint[id] = handler;
     984:	e8 2f       	mov	r30, r24
     986:	f0 e0       	ldi	r31, 0x00	; 0
     988:	ee 0f       	add	r30, r30
     98a:	ff 1f       	adc	r31, r31
     98c:	e1 5b       	subi	r30, 0xB1	; 177
     98e:	f9 4f       	sbci	r31, 0xF9	; 249
     990:	71 83       	std	Z+1, r23	; 0x01
     992:	60 83       	st	Z, r22
     994:	08 95       	ret

00000996 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     996:	10 92 3a 03 	sts	0x033A, r1
     99a:	10 92 39 03 	sts	0x0339, r1
     99e:	08 95       	ret

000009a0 <nwkFrameInit>:
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     9a0:	10 92 3b 03 	sts	0x033B, r1
     9a4:	10 92 c4 03 	sts	0x03C4, r1
     9a8:	10 92 4d 04 	sts	0x044D, r1
     9ac:	10 92 d6 04 	sts	0x04D6, r1
     9b0:	10 92 5f 05 	sts	0x055F, r1
     9b4:	08 95       	ret

000009b6 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     9b6:	00 97       	sbiw	r24, 0x00	; 0
     9b8:	41 f0       	breq	.+16     	; 0x9ca <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     9ba:	fc 01       	movw	r30, r24
     9bc:	e7 57       	subi	r30, 0x77	; 119
     9be:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     9c0:	85 e0       	ldi	r24, 0x05	; 5
     9c2:	e8 3e       	cpi	r30, 0xE8	; 232
     9c4:	f8 07       	cpc	r31, r24
     9c6:	18 f0       	brcs	.+6      	; 0x9ce <nwkFrameNext+0x18>
     9c8:	12 c0       	rjmp	.+36     	; 0x9ee <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     9ca:	eb e3       	ldi	r30, 0x3B	; 59
     9cc:	f3 e0       	ldi	r31, 0x03	; 3
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     9ce:	80 81       	ld	r24, Z
     9d0:	88 23       	and	r24, r24
     9d2:	21 f0       	breq	.+8      	; 0x9dc <nwkFrameNext+0x26>
     9d4:	0f c0       	rjmp	.+30     	; 0x9f4 <nwkFrameNext+0x3e>
     9d6:	80 81       	ld	r24, Z
     9d8:	81 11       	cpse	r24, r1
     9da:	0f c0       	rjmp	.+30     	; 0x9fa <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     9dc:	e7 57       	subi	r30, 0x77	; 119
     9de:	ff 4f       	sbci	r31, 0xFF	; 255
     9e0:	85 e0       	ldi	r24, 0x05	; 5
     9e2:	e8 3e       	cpi	r30, 0xE8	; 232
     9e4:	f8 07       	cpc	r31, r24
     9e6:	b8 f3       	brcs	.-18     	; 0x9d6 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     9e8:	80 e0       	ldi	r24, 0x00	; 0
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	08 95       	ret
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	90 e0       	ldi	r25, 0x00	; 0
     9f2:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     9f4:	8e 2f       	mov	r24, r30
     9f6:	9f 2f       	mov	r25, r31
     9f8:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     9fa:	8e 2f       	mov	r24, r30
     9fc:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
     9fe:	08 95       	ret

00000a00 <nwkRxServiceDataInd>:
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
     a00:	dc 01       	movw	r26, r24
     a02:	19 96       	adiw	r26, 0x09	; 9
     a04:	2c 91       	ld	r18, X
     a06:	19 97       	sbiw	r26, 0x09	; 9
     a08:	22 23       	and	r18, r18
     a0a:	51 f0       	breq	.+20     	; 0xa20 <nwkRxServiceDataInd+0x20>
    return false;

  switch (ind->data[0])
     a0c:	17 96       	adiw	r26, 0x07	; 7
     a0e:	ed 91       	ld	r30, X+
     a10:	fc 91       	ld	r31, X
     a12:	18 97       	sbiw	r26, 0x08	; 8
     a14:	20 81       	ld	r18, Z
     a16:	21 11       	cpse	r18, r1
     a18:	05 c0       	rjmp	.+10     	; 0xa24 <nwkRxServiceDataInd+0x24>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
     a1a:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <nwkTxAckReceived>
     a1e:	08 95       	ret
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    return false;
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	08 95       	ret
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
     a24:	80 e0       	ldi	r24, 0x00	; 0
  }
}
     a26:	08 95       	ret

00000a28 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
     a28:	e9 ef       	ldi	r30, 0xF9	; 249
     a2a:	f5 e0       	ldi	r31, 0x05	; 5
     a2c:	2b e2       	ldi	r18, 0x2B	; 43
     a2e:	36 e0       	ldi	r19, 0x06	; 6
  bool restart = false;
     a30:	50 e0       	ldi	r21, 0x00	; 0
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
     a32:	61 e0       	ldi	r22, 0x01	; 1
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
     a34:	40 81       	ld	r20, Z
     a36:	44 23       	and	r20, r20
     a38:	19 f0       	breq	.+6      	; 0xa40 <nwkRxDuplicateRejectionTimerHandler+0x18>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
     a3a:	41 50       	subi	r20, 0x01	; 1
     a3c:	40 83       	st	Z, r20
      restart = true;
     a3e:	56 2f       	mov	r21, r22
     a40:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     a42:	e2 17       	cp	r30, r18
     a44:	f3 07       	cpc	r31, r19
     a46:	b1 f7       	brne	.-20     	; 0xa34 <nwkRxDuplicateRejectionTimerHandler+0xc>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
     a48:	51 11       	cpse	r21, r1
    SYS_TimerStart(timer);
     a4a:	0e 94 bd 06 	call	0xd7a	; 0xd7a <SYS_TimerStart>
     a4e:	08 95       	ret

00000a50 <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
     a50:	e9 ef       	ldi	r30, 0xF9	; 249
     a52:	f5 e0       	ldi	r31, 0x05	; 5
     a54:	8b e2       	ldi	r24, 0x2B	; 43
     a56:	96 e0       	ldi	r25, 0x06	; 6
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
     a58:	10 82       	st	Z, r1
     a5a:	35 96       	adiw	r30, 0x05	; 5
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     a5c:	e8 17       	cp	r30, r24
     a5e:	f9 07       	cpc	r31, r25
     a60:	d9 f7       	brne	.-10     	; 0xa58 <nwkRxInit+0x8>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
     a62:	84 e6       	ldi	r24, 0x64	; 100
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	a0 e0       	ldi	r26, 0x00	; 0
     a68:	b0 e0       	ldi	r27, 0x00	; 0
     a6a:	80 93 ee 05 	sts	0x05EE, r24
     a6e:	90 93 ef 05 	sts	0x05EF, r25
     a72:	a0 93 f0 05 	sts	0x05F0, r26
     a76:	b0 93 f1 05 	sts	0x05F1, r27
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
     a7a:	10 92 f2 05 	sts	0x05F2, r1
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
     a7e:	84 e1       	ldi	r24, 0x14	; 20
     a80:	95 e0       	ldi	r25, 0x05	; 5
     a82:	90 93 f4 05 	sts	0x05F4, r25
     a86:	80 93 f3 05 	sts	0x05F3, r24

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
     a8a:	60 e0       	ldi	r22, 0x00	; 0
     a8c:	75 e0       	ldi	r23, 0x05	; 5
     a8e:	80 e0       	ldi	r24, 0x00	; 0
     a90:	0e 94 c2 04 	call	0x984	; 0x984 <NWK_OpenEndpoint>
     a94:	08 95       	ret

00000a96 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
     a96:	ff 92       	push	r15
     a98:	0f 93       	push	r16
     a9a:	1f 93       	push	r17
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
     aa2:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
     aa4:	80 e0       	ldi	r24, 0x00	; 0
     aa6:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
     aa8:	01 e0       	ldi	r16, 0x01	; 1

      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
     aaa:	0f 2e       	mov	r0, r31
     aac:	f3 e1       	ldi	r31, 0x13	; 19
     aae:	ff 2e       	mov	r15, r31
     ab0:	f0 2d       	mov	r31, r0
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
     ab2:	13 c0       	rjmp	.+38     	; 0xada <nwkTxDelayTimerHandler+0x44>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
     ab4:	fc 01       	movw	r30, r24
     ab6:	20 81       	ld	r18, Z
     ab8:	21 31       	cpi	r18, 0x11	; 17
     aba:	79 f4       	brne	.+30     	; 0xada <nwkTxDelayTimerHandler+0x44>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
     abc:	ec 57       	subi	r30, 0x7C	; 124
     abe:	ff 4f       	sbci	r31, 0xFF	; 255
     ac0:	20 81       	ld	r18, Z
     ac2:	31 81       	ldd	r19, Z+1	; 0x01
     ac4:	21 50       	subi	r18, 0x01	; 1
     ac6:	31 09       	sbc	r19, r1
     ac8:	31 83       	std	Z+1, r19	; 0x01
     aca:	20 83       	st	Z, r18
     acc:	23 2b       	or	r18, r19
     ace:	21 f4       	brne	.+8      	; 0xad8 <nwkTxDelayTimerHandler+0x42>
        frame->state = NWK_TX_STATE_SEND;
     ad0:	fc 01       	movw	r30, r24
     ad2:	f0 82       	st	Z, r15

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
     ad4:	10 2f       	mov	r17, r16
     ad6:	01 c0       	rjmp	.+2      	; 0xada <nwkTxDelayTimerHandler+0x44>
     ad8:	10 2f       	mov	r17, r16
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
     ada:	0e 94 db 04 	call	0x9b6	; 0x9b6 <nwkFrameNext>
     ade:	00 97       	sbiw	r24, 0x00	; 0
     ae0:	49 f7       	brne	.-46     	; 0xab4 <nwkTxDelayTimerHandler+0x1e>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
     ae2:	11 23       	and	r17, r17
     ae4:	19 f0       	breq	.+6      	; 0xaec <nwkTxDelayTimerHandler+0x56>
    SYS_TimerStart(timer);
     ae6:	ce 01       	movw	r24, r28
     ae8:	0e 94 bd 06 	call	0xd7a	; 0xd7a <SYS_TimerStart>
}
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	08 95       	ret

00000af8 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
     af8:	ef 92       	push	r14
     afa:	ff 92       	push	r15
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
     b06:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
     b0c:	01 e0       	ldi	r16, 0x01	; 1

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
     b0e:	0f 2e       	mov	r0, r31
     b10:	f7 e1       	ldi	r31, 0x17	; 23
     b12:	ef 2e       	mov	r14, r31
     b14:	f0 2d       	mov	r31, r0
  frame->tx.status = status;
     b16:	68 94       	set
     b18:	ff 24       	eor	r15, r15
     b1a:	f4 f8       	bld	r15, 4
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
     b1c:	16 c0       	rjmp	.+44     	; 0xb4a <nwkTxAckWaitTimerHandler+0x52>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
     b1e:	fc 01       	movw	r30, r24
     b20:	20 81       	ld	r18, Z
     b22:	26 31       	cpi	r18, 0x16	; 22
     b24:	91 f4       	brne	.+36     	; 0xb4a <nwkTxAckWaitTimerHandler+0x52>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
     b26:	ec 57       	subi	r30, 0x7C	; 124
     b28:	ff 4f       	sbci	r31, 0xFF	; 255
     b2a:	20 81       	ld	r18, Z
     b2c:	31 81       	ldd	r19, Z+1	; 0x01
     b2e:	21 50       	subi	r18, 0x01	; 1
     b30:	31 09       	sbc	r19, r1
     b32:	31 83       	std	Z+1, r19	; 0x01
     b34:	20 83       	st	Z, r18
     b36:	23 2b       	or	r18, r19
     b38:	39 f4       	brne	.+14     	; 0xb48 <nwkTxAckWaitTimerHandler+0x50>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
     b3a:	fc 01       	movw	r30, r24
     b3c:	e0 82       	st	Z, r14
  frame->tx.status = status;
     b3e:	ed 57       	subi	r30, 0x7D	; 125
     b40:	ff 4f       	sbci	r31, 0xFF	; 255
     b42:	f0 82       	st	Z, r15

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
     b44:	10 2f       	mov	r17, r16
     b46:	01 c0       	rjmp	.+2      	; 0xb4a <nwkTxAckWaitTimerHandler+0x52>
     b48:	10 2f       	mov	r17, r16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
     b4a:	0e 94 db 04 	call	0x9b6	; 0x9b6 <nwkFrameNext>
     b4e:	00 97       	sbiw	r24, 0x00	; 0
     b50:	31 f7       	brne	.-52     	; 0xb1e <nwkTxAckWaitTimerHandler+0x26>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
     b52:	11 23       	and	r17, r17
     b54:	19 f0       	breq	.+6      	; 0xb5c <nwkTxAckWaitTimerHandler+0x64>
    SYS_TimerStart(timer);
     b56:	ce 01       	movw	r24, r28
     b58:	0e 94 bd 06 	call	0xd7a	; 0xd7a <SYS_TimerStart>
}
     b5c:	df 91       	pop	r29
     b5e:	cf 91       	pop	r28
     b60:	1f 91       	pop	r17
     b62:	0f 91       	pop	r16
     b64:	ff 90       	pop	r15
     b66:	ef 90       	pop	r14
     b68:	08 95       	ret

00000b6a <nwkTxInit>:
/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
     b6a:	10 92 42 06 	sts	0x0642, r1
     b6e:	10 92 41 06 	sts	0x0641, r1

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
     b72:	82 e3       	ldi	r24, 0x32	; 50
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a0 e0       	ldi	r26, 0x00	; 0
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	80 93 3a 06 	sts	0x063A, r24
     b7e:	90 93 3b 06 	sts	0x063B, r25
     b82:	a0 93 3c 06 	sts	0x063C, r26
     b86:	b0 93 3d 06 	sts	0x063D, r27
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
     b8a:	10 92 3e 06 	sts	0x063E, r1
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
     b8e:	8c e7       	ldi	r24, 0x7C	; 124
     b90:	95 e0       	ldi	r25, 0x05	; 5
     b92:	90 93 40 06 	sts	0x0640, r25
     b96:	80 93 3f 06 	sts	0x063F, r24

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
     b9a:	8a e0       	ldi	r24, 0x0A	; 10
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	a0 e0       	ldi	r26, 0x00	; 0
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	80 93 2d 06 	sts	0x062D, r24
     ba6:	90 93 2e 06 	sts	0x062E, r25
     baa:	a0 93 2f 06 	sts	0x062F, r26
     bae:	b0 93 30 06 	sts	0x0630, r27
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
     bb2:	10 92 31 06 	sts	0x0631, r1
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
     bb6:	8b e4       	ldi	r24, 0x4B	; 75
     bb8:	95 e0       	ldi	r25, 0x05	; 5
     bba:	90 93 33 06 	sts	0x0633, r25
     bbe:	80 93 32 06 	sts	0x0632, r24
     bc2:	08 95       	ret

00000bc4 <nwkTxAckReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
     bc4:	cf 93       	push	r28
     bc6:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
     bc8:	fc 01       	movw	r30, r24
     bca:	c7 81       	ldd	r28, Z+7	; 0x07
     bcc:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
     bce:	81 85       	ldd	r24, Z+9	; 0x09
     bd0:	83 30       	cpi	r24, 0x03	; 3
     bd2:	c9 f4       	brne	.+50     	; 0xc06 <nwkTxAckReceived+0x42>
     bd4:	10 c0       	rjmp	.+32     	; 0xbf6 <nwkTxAckReceived+0x32>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
     bd6:	fc 01       	movw	r30, r24
     bd8:	20 81       	ld	r18, Z
     bda:	26 31       	cpi	r18, 0x16	; 22
     bdc:	71 f4       	brne	.+28     	; 0xbfa <nwkTxAckReceived+0x36>
     bde:	34 85       	ldd	r19, Z+12	; 0x0c
     be0:	29 81       	ldd	r18, Y+1	; 0x01
     be2:	32 13       	cpse	r19, r18
     be4:	0a c0       	rjmp	.+20     	; 0xbfa <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
     be6:	27 e1       	ldi	r18, 0x17	; 23
     be8:	20 83       	st	Z, r18
      frame->tx.control = command->control;
     bea:	2a 81       	ldd	r18, Y+2	; 0x02
     bec:	ea 57       	subi	r30, 0x7A	; 122
     bee:	ff 4f       	sbci	r31, 0xFF	; 255
     bf0:	20 83       	st	Z, r18
      return true;
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	09 c0       	rjmp	.+18     	; 0xc08 <nwkTxAckReceived+0x44>
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
     bf6:	80 e0       	ldi	r24, 0x00	; 0
     bf8:	90 e0       	ldi	r25, 0x00	; 0
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
     bfa:	0e 94 db 04 	call	0x9b6	; 0x9b6 <nwkFrameNext>
     bfe:	00 97       	sbiw	r24, 0x00	; 0
     c00:	51 f7       	brne	.-44     	; 0xbd6 <nwkTxAckReceived+0x12>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
     c02:	80 e0       	ldi	r24, 0x00	; 0
     c04:	01 c0       	rjmp	.+2      	; 0xc08 <nwkTxAckReceived+0x44>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
     c06:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	08 95       	ret

00000c0e <phyTrxSetState>:

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
  TRX_STATE_REG = TRX_CMD_FORCE_TRX_OFF;
     c0e:	93 e0       	ldi	r25, 0x03	; 3
     c10:	90 93 42 01 	sts	0x0142, r25
  while (TRX_STATUS_TRX_OFF != TRX_STATUS_REG_s.trxStatus);
     c14:	e1 e4       	ldi	r30, 0x41	; 65
     c16:	f1 e0       	ldi	r31, 0x01	; 1
     c18:	90 81       	ld	r25, Z
     c1a:	9f 71       	andi	r25, 0x1F	; 31
     c1c:	98 30       	cpi	r25, 0x08	; 8
     c1e:	e1 f7       	brne	.-8      	; 0xc18 <phyTrxSetState+0xa>

  TRX_STATE_REG = state;
     c20:	80 93 42 01 	sts	0x0142, r24
  while (state != TRX_STATUS_REG_s.trxStatus);
     c24:	e1 e4       	ldi	r30, 0x41	; 65
     c26:	f1 e0       	ldi	r31, 0x01	; 1
     c28:	90 81       	ld	r25, Z
     c2a:	9f 71       	andi	r25, 0x1F	; 31
     c2c:	98 13       	cpse	r25, r24
     c2e:	fc cf       	rjmp	.-8      	; 0xc28 <phyTrxSetState+0x1a>
}
     c30:	08 95       	ret

00000c32 <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
     c32:	e9 e3       	ldi	r30, 0x39	; 57
     c34:	f1 e0       	ldi	r31, 0x01	; 1
     c36:	80 81       	ld	r24, Z
     c38:	81 60       	ori	r24, 0x01	; 1
     c3a:	80 83       	st	Z, r24

  phyRxState = false;
     c3c:	10 92 44 06 	sts	0x0644, r1
  phyBand = 0;
     c40:	10 92 43 06 	sts	0x0643, r1
  phyState = PHY_STATE_IDLE;
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	80 93 45 06 	sts	0x0645, r24

  phyTrxSetState(TRX_CMD_TRX_OFF);
     c4a:	88 e0       	ldi	r24, 0x08	; 8
     c4c:	0e 94 07 06 	call	0xc0e	; 0xc0e <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
     c50:	8b ee       	ldi	r24, 0xEB	; 235
     c52:	80 93 56 01 	sts	0x0156, r24

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
     c56:	ec e4       	ldi	r30, 0x4C	; 76
     c58:	f1 e0       	ldi	r31, 0x01	; 1
     c5a:	80 81       	ld	r24, Z
     c5c:	80 68       	ori	r24, 0x80	; 128
     c5e:	80 83       	st	Z, r24
     c60:	08 95       	ret

00000c62 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
     c62:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <HAL_Init>
  SYS_TimerInit();
     c66:	0e 94 9e 06 	call	0xd3c	; 0xd3c <SYS_TimerInit>
  PHY_Init();
     c6a:	0e 94 19 06 	call	0xc32	; 0xc32 <PHY_Init>
  NWK_Init();
     c6e:	0e 94 a4 04 	call	0x948	; 0x948 <NWK_Init>
     c72:	08 95       	ret

00000c74 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
     c74:	0f 93       	push	r16
     c76:	1f 93       	push	r17
     c78:	cf 93       	push	r28
     c7a:	df 93       	push	r29
     c7c:	ec 01       	movw	r28, r24
  if (timers)
     c7e:	80 91 46 06 	lds	r24, 0x0646
     c82:	90 91 47 06 	lds	r25, 0x0647
     c86:	00 97       	sbiw	r24, 0x00	; 0
     c88:	09 f4       	brne	.+2      	; 0xc8c <placeTimer+0x18>
     c8a:	45 c0       	rjmp	.+138    	; 0xd16 <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
     c8c:	4e 81       	ldd	r20, Y+6	; 0x06
     c8e:	5f 81       	ldd	r21, Y+7	; 0x07
     c90:	68 85       	ldd	r22, Y+8	; 0x08
     c92:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
     c94:	fc 01       	movw	r30, r24
     c96:	02 81       	ldd	r16, Z+2	; 0x02
     c98:	13 81       	ldd	r17, Z+3	; 0x03
     c9a:	24 81       	ldd	r18, Z+4	; 0x04
     c9c:	35 81       	ldd	r19, Z+5	; 0x05
     c9e:	40 17       	cp	r20, r16
     ca0:	51 07       	cpc	r21, r17
     ca2:	62 07       	cpc	r22, r18
     ca4:	73 07       	cpc	r23, r19
     ca6:	c0 f4       	brcc	.+48     	; 0xcd8 <placeTimer+0x64>
     ca8:	0b c0       	rjmp	.+22     	; 0xcc0 <placeTimer+0x4c>
     caa:	02 81       	ldd	r16, Z+2	; 0x02
     cac:	13 81       	ldd	r17, Z+3	; 0x03
     cae:	24 81       	ldd	r18, Z+4	; 0x04
     cb0:	35 81       	ldd	r19, Z+5	; 0x05
     cb2:	40 17       	cp	r20, r16
     cb4:	51 07       	cpc	r21, r17
     cb6:	62 07       	cpc	r22, r18
     cb8:	73 07       	cpc	r23, r19
     cba:	28 f0       	brcs	.+10     	; 0xcc6 <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
     cbc:	df 01       	movw	r26, r30
     cbe:	0d c0       	rjmp	.+26     	; 0xcda <placeTimer+0x66>
     cc0:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
     cc2:	a0 e0       	ldi	r26, 0x00	; 0
     cc4:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
     cc6:	04 1b       	sub	r16, r20
     cc8:	15 0b       	sbc	r17, r21
     cca:	26 0b       	sbc	r18, r22
     ccc:	37 0b       	sbc	r19, r23
     cce:	02 83       	std	Z+2, r16	; 0x02
     cd0:	13 83       	std	Z+3, r17	; 0x03
     cd2:	24 83       	std	Z+4, r18	; 0x04
     cd4:	35 83       	std	Z+5, r19	; 0x05
         break;
     cd6:	0a c0       	rjmp	.+20     	; 0xcec <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
     cd8:	dc 01       	movw	r26, r24
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
     cda:	40 1b       	sub	r20, r16
     cdc:	51 0b       	sbc	r21, r17
     cde:	62 0b       	sbc	r22, r18
     ce0:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
     ce2:	ed 91       	ld	r30, X+
     ce4:	fc 91       	ld	r31, X
     ce6:	11 97       	sbiw	r26, 0x01	; 1
     ce8:	30 97       	sbiw	r30, 0x00	; 0
     cea:	f9 f6       	brne	.-66     	; 0xcaa <placeTimer+0x36>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
     cec:	4a 83       	std	Y+2, r20	; 0x02
     cee:	5b 83       	std	Y+3, r21	; 0x03
     cf0:	6c 83       	std	Y+4, r22	; 0x04
     cf2:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
     cf4:	10 97       	sbiw	r26, 0x00	; 0
     cf6:	41 f0       	breq	.+16     	; 0xd08 <placeTimer+0x94>
    {
      timer->next = prev->next;
     cf8:	8d 91       	ld	r24, X+
     cfa:	9c 91       	ld	r25, X
     cfc:	11 97       	sbiw	r26, 0x01	; 1
     cfe:	99 83       	std	Y+1, r25	; 0x01
     d00:	88 83       	st	Y, r24
      prev->next = timer;
     d02:	cd 93       	st	X+, r28
     d04:	dc 93       	st	X, r29
     d06:	15 c0       	rjmp	.+42     	; 0xd32 <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
     d08:	99 83       	std	Y+1, r25	; 0x01
     d0a:	88 83       	st	Y, r24
      timers = timer;
     d0c:	d0 93 47 06 	sts	0x0647, r29
     d10:	c0 93 46 06 	sts	0x0646, r28
     d14:	0e c0       	rjmp	.+28     	; 0xd32 <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
     d16:	19 82       	std	Y+1, r1	; 0x01
     d18:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
     d1a:	8e 81       	ldd	r24, Y+6	; 0x06
     d1c:	9f 81       	ldd	r25, Y+7	; 0x07
     d1e:	a8 85       	ldd	r26, Y+8	; 0x08
     d20:	b9 85       	ldd	r27, Y+9	; 0x09
     d22:	8a 83       	std	Y+2, r24	; 0x02
     d24:	9b 83       	std	Y+3, r25	; 0x03
     d26:	ac 83       	std	Y+4, r26	; 0x04
     d28:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
     d2a:	d0 93 47 06 	sts	0x0647, r29
     d2e:	c0 93 46 06 	sts	0x0646, r28
  }
}
     d32:	df 91       	pop	r29
     d34:	cf 91       	pop	r28
     d36:	1f 91       	pop	r17
     d38:	0f 91       	pop	r16
     d3a:	08 95       	ret

00000d3c <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
     d3c:	10 92 47 06 	sts	0x0647, r1
     d40:	10 92 46 06 	sts	0x0646, r1
     d44:	08 95       	ret

00000d46 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
     d46:	e0 91 46 06 	lds	r30, 0x0646
     d4a:	f0 91 47 06 	lds	r31, 0x0647
     d4e:	30 97       	sbiw	r30, 0x00	; 0
     d50:	71 f0       	breq	.+28     	; 0xd6e <SYS_TimerStarted+0x28>
    if (t == timer)
     d52:	e8 17       	cp	r30, r24
     d54:	f9 07       	cpc	r31, r25
     d56:	21 f4       	brne	.+8      	; 0xd60 <SYS_TimerStarted+0x1a>
     d58:	0c c0       	rjmp	.+24     	; 0xd72 <SYS_TimerStarted+0x2c>
     d5a:	8e 17       	cp	r24, r30
     d5c:	9f 07       	cpc	r25, r31
     d5e:	59 f0       	breq	.+22     	; 0xd76 <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
     d60:	01 90       	ld	r0, Z+
     d62:	f0 81       	ld	r31, Z
     d64:	e0 2d       	mov	r30, r0
     d66:	30 97       	sbiw	r30, 0x00	; 0
     d68:	c1 f7       	brne	.-16     	; 0xd5a <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	08 95       	ret
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	08 95       	ret
     d76:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
     d78:	08 95       	ret

00000d7a <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
     d7a:	cf 93       	push	r28
     d7c:	df 93       	push	r29
     d7e:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
     d80:	0e 94 a3 06 	call	0xd46	; 0xd46 <SYS_TimerStarted>
     d84:	81 11       	cpse	r24, r1
     d86:	03 c0       	rjmp	.+6      	; 0xd8e <SYS_TimerStart+0x14>
    placeTimer(timer);
     d88:	ce 01       	movw	r24, r28
     d8a:	0e 94 3a 06 	call	0xc74	; 0xc74 <placeTimer>
}
     d8e:	df 91       	pop	r29
     d90:	cf 91       	pop	r28
     d92:	08 95       	ret

00000d94 <vfprintf>:
     d94:	a3 e1       	ldi	r26, 0x13	; 19
     d96:	b0 e0       	ldi	r27, 0x00	; 0
     d98:	e0 ed       	ldi	r30, 0xD0	; 208
     d9a:	f6 e0       	ldi	r31, 0x06	; 6
     d9c:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <__prologue_saves__>
     da0:	7c 01       	movw	r14, r24
     da2:	1b 01       	movw	r2, r22
     da4:	6a 01       	movw	r12, r20
     da6:	fc 01       	movw	r30, r24
     da8:	17 82       	std	Z+7, r1	; 0x07
     daa:	16 82       	std	Z+6, r1	; 0x06
     dac:	83 81       	ldd	r24, Z+3	; 0x03
     dae:	81 ff       	sbrs	r24, 1
     db0:	66 c3       	rjmp	.+1740   	; 0x147e <vfprintf+0x6ea>
     db2:	be 01       	movw	r22, r28
     db4:	6f 5f       	subi	r22, 0xFF	; 255
     db6:	7f 4f       	sbci	r23, 0xFF	; 255
     db8:	4b 01       	movw	r8, r22
     dba:	f7 01       	movw	r30, r14
     dbc:	93 81       	ldd	r25, Z+3	; 0x03
     dbe:	f1 01       	movw	r30, r2
     dc0:	93 fd       	sbrc	r25, 3
     dc2:	85 91       	lpm	r24, Z+
     dc4:	93 ff       	sbrs	r25, 3
     dc6:	81 91       	ld	r24, Z+
     dc8:	1f 01       	movw	r2, r30
     dca:	88 23       	and	r24, r24
     dcc:	09 f4       	brne	.+2      	; 0xdd0 <vfprintf+0x3c>
     dce:	53 c3       	rjmp	.+1702   	; 0x1476 <vfprintf+0x6e2>
     dd0:	85 32       	cpi	r24, 0x25	; 37
     dd2:	39 f4       	brne	.+14     	; 0xde2 <vfprintf+0x4e>
     dd4:	93 fd       	sbrc	r25, 3
     dd6:	85 91       	lpm	r24, Z+
     dd8:	93 ff       	sbrs	r25, 3
     dda:	81 91       	ld	r24, Z+
     ddc:	1f 01       	movw	r2, r30
     dde:	85 32       	cpi	r24, 0x25	; 37
     de0:	39 f4       	brne	.+14     	; 0xdf0 <vfprintf+0x5c>
     de2:	b7 01       	movw	r22, r14
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 8c 0b 	call	0x1718	; 0x1718 <fputc>
     dea:	56 01       	movw	r10, r12
     dec:	65 01       	movw	r12, r10
     dee:	e5 cf       	rjmp	.-54     	; 0xdba <vfprintf+0x26>
     df0:	10 e0       	ldi	r17, 0x00	; 0
     df2:	51 2c       	mov	r5, r1
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	20 32       	cpi	r18, 0x20	; 32
     df8:	a0 f4       	brcc	.+40     	; 0xe22 <vfprintf+0x8e>
     dfa:	8b 32       	cpi	r24, 0x2B	; 43
     dfc:	69 f0       	breq	.+26     	; 0xe18 <vfprintf+0x84>
     dfe:	30 f4       	brcc	.+12     	; 0xe0c <vfprintf+0x78>
     e00:	80 32       	cpi	r24, 0x20	; 32
     e02:	59 f0       	breq	.+22     	; 0xe1a <vfprintf+0x86>
     e04:	83 32       	cpi	r24, 0x23	; 35
     e06:	69 f4       	brne	.+26     	; 0xe22 <vfprintf+0x8e>
     e08:	20 61       	ori	r18, 0x10	; 16
     e0a:	2c c0       	rjmp	.+88     	; 0xe64 <vfprintf+0xd0>
     e0c:	8d 32       	cpi	r24, 0x2D	; 45
     e0e:	39 f0       	breq	.+14     	; 0xe1e <vfprintf+0x8a>
     e10:	80 33       	cpi	r24, 0x30	; 48
     e12:	39 f4       	brne	.+14     	; 0xe22 <vfprintf+0x8e>
     e14:	21 60       	ori	r18, 0x01	; 1
     e16:	26 c0       	rjmp	.+76     	; 0xe64 <vfprintf+0xd0>
     e18:	22 60       	ori	r18, 0x02	; 2
     e1a:	24 60       	ori	r18, 0x04	; 4
     e1c:	23 c0       	rjmp	.+70     	; 0xe64 <vfprintf+0xd0>
     e1e:	28 60       	ori	r18, 0x08	; 8
     e20:	21 c0       	rjmp	.+66     	; 0xe64 <vfprintf+0xd0>
     e22:	27 fd       	sbrc	r18, 7
     e24:	27 c0       	rjmp	.+78     	; 0xe74 <vfprintf+0xe0>
     e26:	30 ed       	ldi	r19, 0xD0	; 208
     e28:	38 0f       	add	r19, r24
     e2a:	3a 30       	cpi	r19, 0x0A	; 10
     e2c:	78 f4       	brcc	.+30     	; 0xe4c <vfprintf+0xb8>
     e2e:	26 ff       	sbrs	r18, 6
     e30:	06 c0       	rjmp	.+12     	; 0xe3e <vfprintf+0xaa>
     e32:	fa e0       	ldi	r31, 0x0A	; 10
     e34:	1f 9f       	mul	r17, r31
     e36:	30 0d       	add	r19, r0
     e38:	11 24       	eor	r1, r1
     e3a:	13 2f       	mov	r17, r19
     e3c:	13 c0       	rjmp	.+38     	; 0xe64 <vfprintf+0xd0>
     e3e:	6a e0       	ldi	r22, 0x0A	; 10
     e40:	56 9e       	mul	r5, r22
     e42:	30 0d       	add	r19, r0
     e44:	11 24       	eor	r1, r1
     e46:	53 2e       	mov	r5, r19
     e48:	20 62       	ori	r18, 0x20	; 32
     e4a:	0c c0       	rjmp	.+24     	; 0xe64 <vfprintf+0xd0>
     e4c:	8e 32       	cpi	r24, 0x2E	; 46
     e4e:	21 f4       	brne	.+8      	; 0xe58 <vfprintf+0xc4>
     e50:	26 fd       	sbrc	r18, 6
     e52:	11 c3       	rjmp	.+1570   	; 0x1476 <vfprintf+0x6e2>
     e54:	20 64       	ori	r18, 0x40	; 64
     e56:	06 c0       	rjmp	.+12     	; 0xe64 <vfprintf+0xd0>
     e58:	8c 36       	cpi	r24, 0x6C	; 108
     e5a:	11 f4       	brne	.+4      	; 0xe60 <vfprintf+0xcc>
     e5c:	20 68       	ori	r18, 0x80	; 128
     e5e:	02 c0       	rjmp	.+4      	; 0xe64 <vfprintf+0xd0>
     e60:	88 36       	cpi	r24, 0x68	; 104
     e62:	41 f4       	brne	.+16     	; 0xe74 <vfprintf+0xe0>
     e64:	f1 01       	movw	r30, r2
     e66:	93 fd       	sbrc	r25, 3
     e68:	85 91       	lpm	r24, Z+
     e6a:	93 ff       	sbrs	r25, 3
     e6c:	81 91       	ld	r24, Z+
     e6e:	1f 01       	movw	r2, r30
     e70:	81 11       	cpse	r24, r1
     e72:	c1 cf       	rjmp	.-126    	; 0xdf6 <vfprintf+0x62>
     e74:	9b eb       	ldi	r25, 0xBB	; 187
     e76:	98 0f       	add	r25, r24
     e78:	93 30       	cpi	r25, 0x03	; 3
     e7a:	18 f4       	brcc	.+6      	; 0xe82 <vfprintf+0xee>
     e7c:	20 61       	ori	r18, 0x10	; 16
     e7e:	80 5e       	subi	r24, 0xE0	; 224
     e80:	06 c0       	rjmp	.+12     	; 0xe8e <vfprintf+0xfa>
     e82:	9b e9       	ldi	r25, 0x9B	; 155
     e84:	98 0f       	add	r25, r24
     e86:	93 30       	cpi	r25, 0x03	; 3
     e88:	08 f0       	brcs	.+2      	; 0xe8c <vfprintf+0xf8>
     e8a:	aa c1       	rjmp	.+852    	; 0x11e0 <vfprintf+0x44c>
     e8c:	2f 7e       	andi	r18, 0xEF	; 239
     e8e:	26 ff       	sbrs	r18, 6
     e90:	16 e0       	ldi	r17, 0x06	; 6
     e92:	2f 73       	andi	r18, 0x3F	; 63
     e94:	72 2e       	mov	r7, r18
     e96:	85 36       	cpi	r24, 0x65	; 101
     e98:	21 f4       	brne	.+8      	; 0xea2 <vfprintf+0x10e>
     e9a:	f2 2f       	mov	r31, r18
     e9c:	f0 64       	ori	r31, 0x40	; 64
     e9e:	7f 2e       	mov	r7, r31
     ea0:	08 c0       	rjmp	.+16     	; 0xeb2 <vfprintf+0x11e>
     ea2:	86 36       	cpi	r24, 0x66	; 102
     ea4:	21 f4       	brne	.+8      	; 0xeae <vfprintf+0x11a>
     ea6:	62 2f       	mov	r22, r18
     ea8:	60 68       	ori	r22, 0x80	; 128
     eaa:	76 2e       	mov	r7, r22
     eac:	02 c0       	rjmp	.+4      	; 0xeb2 <vfprintf+0x11e>
     eae:	11 11       	cpse	r17, r1
     eb0:	11 50       	subi	r17, 0x01	; 1
     eb2:	77 fe       	sbrs	r7, 7
     eb4:	07 c0       	rjmp	.+14     	; 0xec4 <vfprintf+0x130>
     eb6:	1c 33       	cpi	r17, 0x3C	; 60
     eb8:	48 f4       	brcc	.+18     	; 0xecc <vfprintf+0x138>
     eba:	44 24       	eor	r4, r4
     ebc:	43 94       	inc	r4
     ebe:	41 0e       	add	r4, r17
     ec0:	27 e0       	ldi	r18, 0x07	; 7
     ec2:	0b c0       	rjmp	.+22     	; 0xeda <vfprintf+0x146>
     ec4:	18 30       	cpi	r17, 0x08	; 8
     ec6:	30 f4       	brcc	.+12     	; 0xed4 <vfprintf+0x140>
     ec8:	21 2f       	mov	r18, r17
     eca:	06 c0       	rjmp	.+12     	; 0xed8 <vfprintf+0x144>
     ecc:	27 e0       	ldi	r18, 0x07	; 7
     ece:	4c e3       	ldi	r20, 0x3C	; 60
     ed0:	44 2e       	mov	r4, r20
     ed2:	03 c0       	rjmp	.+6      	; 0xeda <vfprintf+0x146>
     ed4:	27 e0       	ldi	r18, 0x07	; 7
     ed6:	17 e0       	ldi	r17, 0x07	; 7
     ed8:	41 2c       	mov	r4, r1
     eda:	56 01       	movw	r10, r12
     edc:	74 e0       	ldi	r23, 0x04	; 4
     ede:	a7 0e       	add	r10, r23
     ee0:	b1 1c       	adc	r11, r1
     ee2:	f6 01       	movw	r30, r12
     ee4:	60 81       	ld	r22, Z
     ee6:	71 81       	ldd	r23, Z+1	; 0x01
     ee8:	82 81       	ldd	r24, Z+2	; 0x02
     eea:	93 81       	ldd	r25, Z+3	; 0x03
     eec:	04 2d       	mov	r16, r4
     eee:	a4 01       	movw	r20, r8
     ef0:	0e 94 9e 0a 	call	0x153c	; 0x153c <__ftoa_engine>
     ef4:	6c 01       	movw	r12, r24
     ef6:	09 81       	ldd	r16, Y+1	; 0x01
     ef8:	00 ff       	sbrs	r16, 0
     efa:	02 c0       	rjmp	.+4      	; 0xf00 <vfprintf+0x16c>
     efc:	03 ff       	sbrs	r16, 3
     efe:	06 c0       	rjmp	.+12     	; 0xf0c <vfprintf+0x178>
     f00:	71 fc       	sbrc	r7, 1
     f02:	07 c0       	rjmp	.+14     	; 0xf12 <vfprintf+0x17e>
     f04:	72 fc       	sbrc	r7, 2
     f06:	08 c0       	rjmp	.+16     	; 0xf18 <vfprintf+0x184>
     f08:	61 2c       	mov	r6, r1
     f0a:	08 c0       	rjmp	.+16     	; 0xf1c <vfprintf+0x188>
     f0c:	3d e2       	ldi	r19, 0x2D	; 45
     f0e:	63 2e       	mov	r6, r19
     f10:	05 c0       	rjmp	.+10     	; 0xf1c <vfprintf+0x188>
     f12:	2b e2       	ldi	r18, 0x2B	; 43
     f14:	62 2e       	mov	r6, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <vfprintf+0x188>
     f18:	90 e2       	ldi	r25, 0x20	; 32
     f1a:	69 2e       	mov	r6, r25
     f1c:	80 2f       	mov	r24, r16
     f1e:	8c 70       	andi	r24, 0x0C	; 12
     f20:	99 f1       	breq	.+102    	; 0xf88 <vfprintf+0x1f4>
     f22:	66 20       	and	r6, r6
     f24:	11 f0       	breq	.+4      	; 0xf2a <vfprintf+0x196>
     f26:	84 e0       	ldi	r24, 0x04	; 4
     f28:	01 c0       	rjmp	.+2      	; 0xf2c <vfprintf+0x198>
     f2a:	83 e0       	ldi	r24, 0x03	; 3
     f2c:	85 15       	cp	r24, r5
     f2e:	10 f0       	brcs	.+4      	; 0xf34 <vfprintf+0x1a0>
     f30:	51 2c       	mov	r5, r1
     f32:	0b c0       	rjmp	.+22     	; 0xf4a <vfprintf+0x1b6>
     f34:	58 1a       	sub	r5, r24
     f36:	73 fc       	sbrc	r7, 3
     f38:	08 c0       	rjmp	.+16     	; 0xf4a <vfprintf+0x1b6>
     f3a:	b7 01       	movw	r22, r14
     f3c:	80 e2       	ldi	r24, 0x20	; 32
     f3e:	90 e0       	ldi	r25, 0x00	; 0
     f40:	0e 94 8c 0b 	call	0x1718	; 0x1718 <fputc>
     f44:	5a 94       	dec	r5
     f46:	c9 f7       	brne	.-14     	; 0xf3a <vfprintf+0x1a6>
     f48:	f3 cf       	rjmp	.-26     	; 0xf30 <vfprintf+0x19c>
     f4a:	66 20       	and	r6, r6
     f4c:	29 f0       	breq	.+10     	; 0xf58 <vfprintf+0x1c4>
     f4e:	b7 01       	movw	r22, r14
     f50:	86 2d       	mov	r24, r6
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	0e 94 8c 0b 	call	0x1718	; 0x1718 <fputc>
     f58:	03 fd       	sbrc	r16, 3
     f5a:	03 c0       	rjmp	.+6      	; 0xf62 <vfprintf+0x1ce>
     f5c:	08 e3       	ldi	r16, 0x38	; 56
     f5e:	11 e0       	ldi	r17, 0x01	; 1
     f60:	02 c0       	rjmp	.+4      	; 0xf66 <vfprintf+0x1d2>
     f62:	04 e3       	ldi	r16, 0x34	; 52
     f64:	11 e0       	ldi	r17, 0x01	; 1
     f66:	f7 2d       	mov	r31, r7
     f68:	f0 71       	andi	r31, 0x10	; 16
     f6a:	7f 2e       	mov	r7, r31
     f6c:	f8 01       	movw	r30, r16
     f6e:	84 91       	lpm	r24, Z
     f70:	88 23       	and	r24, r24
     f72:	09 f4       	brne	.+2      	; 0xf76 <vfprintf+0x1e2>
     f74:	76 c2       	rjmp	.+1260   	; 0x1462 <vfprintf+0x6ce>
     f76:	71 10       	cpse	r7, r1
     f78:	80 52       	subi	r24, 0x20	; 32
     f7a:	b7 01       	movw	r22, r14
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	0e 94 8c 0b 	call	0x1718	; 0x1718 <fputc>
     f82:	0f 5f       	subi	r16, 0xFF	; 255
     f84:	1f 4f       	sbci	r17, 0xFF	; 255
     f86:	f2 cf       	rjmp	.-28     	; 0xf6c <vfprintf+0x1d8>
     f88:	77 fe       	sbrs	r7, 7
     f8a:	0f c0       	rjmp	.+30     	; 0xfaa <vfprintf+0x216>
     f8c:	4c 0c       	add	r4, r12
     f8e:	04 ff       	sbrs	r16, 4
     f90:	04 c0       	rjmp	.+8      	; 0xf9a <vfprintf+0x206>
     f92:	8a 81       	ldd	r24, Y+2	; 0x02
     f94:	81 33       	cpi	r24, 0x31	; 49
     f96:	09 f4       	brne	.+2      	; 0xf9a <vfprintf+0x206>
     f98:	4a 94       	dec	r4
     f9a:	14 14       	cp	r1, r4
     f9c:	74 f5       	brge	.+92     	; 0xffa <vfprintf+0x266>
     f9e:	f8 e0       	ldi	r31, 0x08	; 8
     fa0:	f4 15       	cp	r31, r4
     fa2:	78 f5       	brcc	.+94     	; 0x1002 <vfprintf+0x26e>
     fa4:	88 e0       	ldi	r24, 0x08	; 8
     fa6:	48 2e       	mov	r4, r24
     fa8:	2c c0       	rjmp	.+88     	; 0x1002 <vfprintf+0x26e>
     faa:	76 fc       	sbrc	r7, 6
     fac:	2a c0       	rjmp	.+84     	; 0x1002 <vfprintf+0x26e>
     fae:	81 2f       	mov	r24, r17
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	8c 15       	cp	r24, r12
     fb4:	9d 05       	cpc	r25, r13
     fb6:	9c f0       	brlt	.+38     	; 0xfde <vfprintf+0x24a>
     fb8:	6c ef       	ldi	r22, 0xFC	; 252
     fba:	c6 16       	cp	r12, r22
     fbc:	6f ef       	ldi	r22, 0xFF	; 255
     fbe:	d6 06       	cpc	r13, r22
     fc0:	74 f0       	brlt	.+28     	; 0xfde <vfprintf+0x24a>
     fc2:	77 2d       	mov	r23, r7
     fc4:	70 68       	ori	r23, 0x80	; 128
     fc6:	77 2e       	mov	r7, r23
     fc8:	0a c0       	rjmp	.+20     	; 0xfde <vfprintf+0x24a>
     fca:	e2 e0       	ldi	r30, 0x02	; 2
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	ec 0f       	add	r30, r28
     fd0:	fd 1f       	adc	r31, r29
     fd2:	e1 0f       	add	r30, r17
     fd4:	f1 1d       	adc	r31, r1
     fd6:	80 81       	ld	r24, Z
     fd8:	80 33       	cpi	r24, 0x30	; 48
     fda:	19 f4       	brne	.+6      	; 0xfe2 <vfprintf+0x24e>
     fdc:	11 50       	subi	r17, 0x01	; 1
     fde:	11 11       	cpse	r17, r1
     fe0:	f4 cf       	rjmp	.-24     	; 0xfca <vfprintf+0x236>
     fe2:	77 fe       	sbrs	r7, 7
     fe4:	0e c0       	rjmp	.+28     	; 0x1002 <vfprintf+0x26e>
     fe6:	44 24       	eor	r4, r4
     fe8:	43 94       	inc	r4
     fea:	41 0e       	add	r4, r17
     fec:	81 2f       	mov	r24, r17
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	c8 16       	cp	r12, r24
     ff2:	d9 06       	cpc	r13, r25
     ff4:	2c f4       	brge	.+10     	; 0x1000 <vfprintf+0x26c>
     ff6:	1c 19       	sub	r17, r12
     ff8:	04 c0       	rjmp	.+8      	; 0x1002 <vfprintf+0x26e>
     ffa:	44 24       	eor	r4, r4
     ffc:	43 94       	inc	r4
     ffe:	01 c0       	rjmp	.+2      	; 0x1002 <vfprintf+0x26e>
    1000:	10 e0       	ldi	r17, 0x00	; 0
    1002:	77 fe       	sbrs	r7, 7
    1004:	07 c0       	rjmp	.+14     	; 0x1014 <vfprintf+0x280>
    1006:	1c 14       	cp	r1, r12
    1008:	1d 04       	cpc	r1, r13
    100a:	3c f4       	brge	.+14     	; 0x101a <vfprintf+0x286>
    100c:	96 01       	movw	r18, r12
    100e:	2f 5f       	subi	r18, 0xFF	; 255
    1010:	3f 4f       	sbci	r19, 0xFF	; 255
    1012:	05 c0       	rjmp	.+10     	; 0x101e <vfprintf+0x28a>
    1014:	25 e0       	ldi	r18, 0x05	; 5
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	02 c0       	rjmp	.+4      	; 0x101e <vfprintf+0x28a>
    101a:	21 e0       	ldi	r18, 0x01	; 1
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	66 20       	and	r6, r6
    1020:	11 f0       	breq	.+4      	; 0x1026 <vfprintf+0x292>
    1022:	2f 5f       	subi	r18, 0xFF	; 255
    1024:	3f 4f       	sbci	r19, 0xFF	; 255
    1026:	11 23       	and	r17, r17
    1028:	31 f0       	breq	.+12     	; 0x1036 <vfprintf+0x2a2>
    102a:	41 2f       	mov	r20, r17
    102c:	50 e0       	ldi	r21, 0x00	; 0
    102e:	4f 5f       	subi	r20, 0xFF	; 255
    1030:	5f 4f       	sbci	r21, 0xFF	; 255
    1032:	24 0f       	add	r18, r20
    1034:	35 1f       	adc	r19, r21
    1036:	45 2d       	mov	r20, r5
    1038:	50 e0       	ldi	r21, 0x00	; 0
    103a:	24 17       	cp	r18, r20
    103c:	35 07       	cpc	r19, r21
    103e:	14 f4       	brge	.+4      	; 0x1044 <vfprintf+0x2b0>
    1040:	52 1a       	sub	r5, r18
    1042:	01 c0       	rjmp	.+2      	; 0x1046 <vfprintf+0x2b2>
    1044:	51 2c       	mov	r5, r1
    1046:	87 2d       	mov	r24, r7
    1048:	89 70       	andi	r24, 0x09	; 9
    104a:	49 f4       	brne	.+18     	; 0x105e <vfprintf+0x2ca>
    104c:	55 20       	and	r5, r5
    104e:	39 f0       	breq	.+14     	; 0x105e <vfprintf+0x2ca>
    1050:	b7 01       	movw	r22, r14
    1052:	80 e2       	ldi	r24, 0x20	; 32
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	0e 94 8c 0b 	call	0x1718	; 0x1718 <fputc>
    105a:	5a 94       	dec	r5
    105c:	f7 cf       	rjmp	.-18     	; 0x104c <vfprintf+0x2b8>
    105e:	66 20       	and	r6, r6
    1060:	29 f0       	breq	.+10     	; 0x106c <vfprintf+0x2d8>
    1062:	b7 01       	movw	r22, r14
    1064:	86 2d       	mov	r24, r6
    1066:	90 e0       	ldi	r25, 0x00	; 0
    1068:	0e 94 8c 0b 	call	0x1718	; 0x1718 <fputc>
    106c:	73 fc       	sbrc	r7, 3
    106e:	09 c0       	rjmp	.+18     	; 0x1082 <vfprintf+0x2ee>
    1070:	55 20       	and	r5, r5
    1072:	39 f0       	breq	.+14     	; 0x1082 <vfprintf+0x2ee>
    1074:	b7 01       	movw	r22, r14
    1076:	80 e3       	ldi	r24, 0x30	; 48
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	0e 94 8c 0b 	call	0x1718	; 0x1718 <fputc>
    107e:	5a 94       	dec	r5
    1080:	f7 cf       	rjmp	.-18     	; 0x1070 <vfprintf+0x2dc>
    1082:	77 fe       	sbrs	r7, 7
    1084:	5f c0       	rjmp	.+190    	; 0x1144 <vfprintf+0x3b0>
    1086:	9c 2d       	mov	r25, r12
    1088:	8d 2d       	mov	r24, r13
    108a:	d7 fe       	sbrs	r13, 7
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <vfprintf+0x2fe>
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	80 e0       	ldi	r24, 0x00	; 0
    1092:	69 2e       	mov	r6, r25
    1094:	78 2e       	mov	r7, r24
    1096:	40 e0       	ldi	r20, 0x00	; 0
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	c6 01       	movw	r24, r12
    109c:	84 19       	sub	r24, r4
    109e:	91 09       	sbc	r25, r1
    10a0:	9d 87       	std	Y+13, r25	; 0x0d
    10a2:	8c 87       	std	Y+12, r24	; 0x0c
    10a4:	96 01       	movw	r18, r12
    10a6:	26 19       	sub	r18, r6
    10a8:	37 09       	sbc	r19, r7
    10aa:	28 0d       	add	r18, r8
    10ac:	39 1d       	adc	r19, r9
    10ae:	81 2f       	mov	r24, r17
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	ee 27       	eor	r30, r30
    10b4:	ff 27       	eor	r31, r31
    10b6:	e8 1b       	sub	r30, r24
    10b8:	f9 0b       	sbc	r31, r25
    10ba:	ff 87       	std	Y+15, r31	; 0x0f
    10bc:	ee 87       	std	Y+14, r30	; 0x0e
    10be:	ff ef       	ldi	r31, 0xFF	; 255
    10c0:	6f 16       	cp	r6, r31
    10c2:	7f 06       	cpc	r7, r31
    10c4:	69 f4       	brne	.+26     	; 0x10e0 <vfprintf+0x34c>
    10c6:	b7 01       	movw	r22, r14
    10c8:	8e e2       	ldi	r24, 0x2E	; 46
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	2b 8b       	std	Y+19, r18	; 0x13
    10ce:	3a 8b       	std	Y+18, r19	; 0x12
    10d0:	48 8b       	std	Y+16, r20	; 0x10
    10d2:	59 8b       	std	Y+17, r21	; 0x11
    10d4:	0e 94 8c 0b 	call	0x1718	; 0x1718 <fputc>
    10d8:	59 89       	ldd	r21, Y+17	; 0x11
    10da:	48 89       	ldd	r20, Y+16	; 0x10
    10dc:	3a 89       	ldd	r19, Y+18	; 0x12
    10de:	2b 89       	ldd	r18, Y+19	; 0x13
    10e0:	c6 14       	cp	r12, r6
    10e2:	d7 04       	cpc	r13, r7
    10e4:	54 f0       	brlt	.+20     	; 0x10fa <vfprintf+0x366>
    10e6:	6c 85       	ldd	r22, Y+12	; 0x0c
    10e8:	7d 85       	ldd	r23, Y+13	; 0x0d
    10ea:	66 15       	cp	r22, r6
    10ec:	77 05       	cpc	r23, r7
    10ee:	2c f4       	brge	.+10     	; 0x10fa <vfprintf+0x366>
    10f0:	f9 01       	movw	r30, r18
    10f2:	e4 0f       	add	r30, r20
    10f4:	f5 1f       	adc	r31, r21
    10f6:	81 81       	ldd	r24, Z+1	; 0x01
    10f8:	01 c0       	rjmp	.+2      	; 0x10fc <vfprintf+0x368>
    10fa:	80 e3       	ldi	r24, 0x30	; 48
    10fc:	71 e0       	ldi	r23, 0x01	; 1
    10fe:	67 1a       	sub	r6, r23
    1100:	71 08       	sbc	r7, r1
    1102:	4f 5f       	subi	r20, 0xFF	; 255
    1104:	5f 4f       	sbci	r21, 0xFF	; 255
    1106:	ee 85       	ldd	r30, Y+14	; 0x0e
    1108:	ff 85       	ldd	r31, Y+15	; 0x0f
    110a:	6e 16       	cp	r6, r30
    110c:	7f 06       	cpc	r7, r31
    110e:	6c f0       	brlt	.+26     	; 0x112a <vfprintf+0x396>
    1110:	b7 01       	movw	r22, r14
    1112:	90 e0       	ldi	r25, 0x00	; 0
    1114:	2b 8b       	std	Y+19, r18	; 0x13
    1116:	3a 8b       	std	Y+18, r19	; 0x12
    1118:	48 8b       	std	Y+16, r20	; 0x10
    111a:	59 8b       	std	Y+17, r21	; 0x11
    111c:	0e 94 8c 0b 	call	0x1718	; 0x1718 <fputc>
    1120:	2b 89       	ldd	r18, Y+19	; 0x13
    1122:	3a 89       	ldd	r19, Y+18	; 0x12
    1124:	48 89       	ldd	r20, Y+16	; 0x10
    1126:	59 89       	ldd	r21, Y+17	; 0x11
    1128:	ca cf       	rjmp	.-108    	; 0x10be <vfprintf+0x32a>
    112a:	6c 14       	cp	r6, r12
    112c:	7d 04       	cpc	r7, r13
    112e:	39 f4       	brne	.+14     	; 0x113e <vfprintf+0x3aa>
    1130:	9a 81       	ldd	r25, Y+2	; 0x02
    1132:	96 33       	cpi	r25, 0x36	; 54
    1134:	18 f4       	brcc	.+6      	; 0x113c <vfprintf+0x3a8>
    1136:	95 33       	cpi	r25, 0x35	; 53
    1138:	11 f4       	brne	.+4      	; 0x113e <vfprintf+0x3aa>
    113a:	04 ff       	sbrs	r16, 4
    113c:	81 e3       	ldi	r24, 0x31	; 49
    113e:	b7 01       	movw	r22, r14
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	4b c0       	rjmp	.+150    	; 0x11da <vfprintf+0x446>
    1144:	8a 81       	ldd	r24, Y+2	; 0x02
    1146:	81 33       	cpi	r24, 0x31	; 49
    1148:	09 f0       	breq	.+2      	; 0x114c <vfprintf+0x3b8>
    114a:	0f 7e       	andi	r16, 0xEF	; 239
    114c:	b7 01       	movw	r22, r14
    114e:	90 e0       	ldi	r25, 0x00	; 0
    1150:	0e 94 8c 0b 	call	0x1718	; 0x1718 <fputc>
    1154:	11 11       	cpse	r17, r1
    1156:	05 c0       	rjmp	.+10     	; 0x1162 <vfprintf+0x3ce>
    1158:	74 fe       	sbrs	r7, 4
    115a:	18 c0       	rjmp	.+48     	; 0x118c <vfprintf+0x3f8>
    115c:	85 e4       	ldi	r24, 0x45	; 69
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	17 c0       	rjmp	.+46     	; 0x1190 <vfprintf+0x3fc>
    1162:	b7 01       	movw	r22, r14
    1164:	8e e2       	ldi	r24, 0x2E	; 46
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 8c 0b 	call	0x1718	; 0x1718 <fputc>
    116c:	82 e0       	ldi	r24, 0x02	; 2
    116e:	66 24       	eor	r6, r6
    1170:	63 94       	inc	r6
    1172:	68 0e       	add	r6, r24
    1174:	f4 01       	movw	r30, r8
    1176:	e8 0f       	add	r30, r24
    1178:	f1 1d       	adc	r31, r1
    117a:	80 81       	ld	r24, Z
    117c:	b7 01       	movw	r22, r14
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	0e 94 8c 0b 	call	0x1718	; 0x1718 <fputc>
    1184:	11 50       	subi	r17, 0x01	; 1
    1186:	41 f3       	breq	.-48     	; 0x1158 <vfprintf+0x3c4>
    1188:	86 2d       	mov	r24, r6
    118a:	f1 cf       	rjmp	.-30     	; 0x116e <vfprintf+0x3da>
    118c:	85 e6       	ldi	r24, 0x65	; 101
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	b7 01       	movw	r22, r14
    1192:	0e 94 8c 0b 	call	0x1718	; 0x1718 <fputc>
    1196:	d7 fc       	sbrc	r13, 7
    1198:	05 c0       	rjmp	.+10     	; 0x11a4 <vfprintf+0x410>
    119a:	c1 14       	cp	r12, r1
    119c:	d1 04       	cpc	r13, r1
    119e:	39 f4       	brne	.+14     	; 0x11ae <vfprintf+0x41a>
    11a0:	04 ff       	sbrs	r16, 4
    11a2:	05 c0       	rjmp	.+10     	; 0x11ae <vfprintf+0x41a>
    11a4:	d1 94       	neg	r13
    11a6:	c1 94       	neg	r12
    11a8:	d1 08       	sbc	r13, r1
    11aa:	8d e2       	ldi	r24, 0x2D	; 45
    11ac:	01 c0       	rjmp	.+2      	; 0x11b0 <vfprintf+0x41c>
    11ae:	8b e2       	ldi	r24, 0x2B	; 43
    11b0:	b7 01       	movw	r22, r14
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	0e 94 8c 0b 	call	0x1718	; 0x1718 <fputc>
    11b8:	80 e3       	ldi	r24, 0x30	; 48
    11ba:	6a e0       	ldi	r22, 0x0A	; 10
    11bc:	c6 16       	cp	r12, r22
    11be:	d1 04       	cpc	r13, r1
    11c0:	2c f0       	brlt	.+10     	; 0x11cc <vfprintf+0x438>
    11c2:	8f 5f       	subi	r24, 0xFF	; 255
    11c4:	fa e0       	ldi	r31, 0x0A	; 10
    11c6:	cf 1a       	sub	r12, r31
    11c8:	d1 08       	sbc	r13, r1
    11ca:	f7 cf       	rjmp	.-18     	; 0x11ba <vfprintf+0x426>
    11cc:	b7 01       	movw	r22, r14
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	0e 94 8c 0b 	call	0x1718	; 0x1718 <fputc>
    11d4:	b7 01       	movw	r22, r14
    11d6:	c6 01       	movw	r24, r12
    11d8:	c0 96       	adiw	r24, 0x30	; 48
    11da:	0e 94 8c 0b 	call	0x1718	; 0x1718 <fputc>
    11de:	41 c1       	rjmp	.+642    	; 0x1462 <vfprintf+0x6ce>
    11e0:	83 36       	cpi	r24, 0x63	; 99
    11e2:	31 f0       	breq	.+12     	; 0x11f0 <vfprintf+0x45c>
    11e4:	83 37       	cpi	r24, 0x73	; 115
    11e6:	79 f0       	breq	.+30     	; 0x1206 <vfprintf+0x472>
    11e8:	83 35       	cpi	r24, 0x53	; 83
    11ea:	09 f0       	breq	.+2      	; 0x11ee <vfprintf+0x45a>
    11ec:	58 c0       	rjmp	.+176    	; 0x129e <vfprintf+0x50a>
    11ee:	21 c0       	rjmp	.+66     	; 0x1232 <vfprintf+0x49e>
    11f0:	56 01       	movw	r10, r12
    11f2:	72 e0       	ldi	r23, 0x02	; 2
    11f4:	a7 0e       	add	r10, r23
    11f6:	b1 1c       	adc	r11, r1
    11f8:	f6 01       	movw	r30, r12
    11fa:	80 81       	ld	r24, Z
    11fc:	89 83       	std	Y+1, r24	; 0x01
    11fe:	01 e0       	ldi	r16, 0x01	; 1
    1200:	10 e0       	ldi	r17, 0x00	; 0
    1202:	64 01       	movw	r12, r8
    1204:	14 c0       	rjmp	.+40     	; 0x122e <vfprintf+0x49a>
    1206:	56 01       	movw	r10, r12
    1208:	f2 e0       	ldi	r31, 0x02	; 2
    120a:	af 0e       	add	r10, r31
    120c:	b1 1c       	adc	r11, r1
    120e:	f6 01       	movw	r30, r12
    1210:	c0 80       	ld	r12, Z
    1212:	d1 80       	ldd	r13, Z+1	; 0x01
    1214:	26 ff       	sbrs	r18, 6
    1216:	03 c0       	rjmp	.+6      	; 0x121e <vfprintf+0x48a>
    1218:	61 2f       	mov	r22, r17
    121a:	70 e0       	ldi	r23, 0x00	; 0
    121c:	02 c0       	rjmp	.+4      	; 0x1222 <vfprintf+0x48e>
    121e:	6f ef       	ldi	r22, 0xFF	; 255
    1220:	7f ef       	ldi	r23, 0xFF	; 255
    1222:	c6 01       	movw	r24, r12
    1224:	2b 8b       	std	Y+19, r18	; 0x13
    1226:	0e 94 81 0b 	call	0x1702	; 0x1702 <strnlen>
    122a:	8c 01       	movw	r16, r24
    122c:	2b 89       	ldd	r18, Y+19	; 0x13
    122e:	2f 77       	andi	r18, 0x7F	; 127
    1230:	15 c0       	rjmp	.+42     	; 0x125c <vfprintf+0x4c8>
    1232:	56 01       	movw	r10, r12
    1234:	f2 e0       	ldi	r31, 0x02	; 2
    1236:	af 0e       	add	r10, r31
    1238:	b1 1c       	adc	r11, r1
    123a:	f6 01       	movw	r30, r12
    123c:	c0 80       	ld	r12, Z
    123e:	d1 80       	ldd	r13, Z+1	; 0x01
    1240:	26 ff       	sbrs	r18, 6
    1242:	03 c0       	rjmp	.+6      	; 0x124a <vfprintf+0x4b6>
    1244:	61 2f       	mov	r22, r17
    1246:	70 e0       	ldi	r23, 0x00	; 0
    1248:	02 c0       	rjmp	.+4      	; 0x124e <vfprintf+0x4ba>
    124a:	6f ef       	ldi	r22, 0xFF	; 255
    124c:	7f ef       	ldi	r23, 0xFF	; 255
    124e:	c6 01       	movw	r24, r12
    1250:	2b 8b       	std	Y+19, r18	; 0x13
    1252:	0e 94 76 0b 	call	0x16ec	; 0x16ec <strnlen_P>
    1256:	8c 01       	movw	r16, r24
    1258:	2b 89       	ldd	r18, Y+19	; 0x13
    125a:	20 68       	ori	r18, 0x80	; 128
    125c:	72 2e       	mov	r7, r18
    125e:	23 fd       	sbrc	r18, 3
    1260:	1a c0       	rjmp	.+52     	; 0x1296 <vfprintf+0x502>
    1262:	85 2d       	mov	r24, r5
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	08 17       	cp	r16, r24
    1268:	19 07       	cpc	r17, r25
    126a:	a8 f4       	brcc	.+42     	; 0x1296 <vfprintf+0x502>
    126c:	b7 01       	movw	r22, r14
    126e:	80 e2       	ldi	r24, 0x20	; 32
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	0e 94 8c 0b 	call	0x1718	; 0x1718 <fputc>
    1276:	5a 94       	dec	r5
    1278:	f4 cf       	rjmp	.-24     	; 0x1262 <vfprintf+0x4ce>
    127a:	f6 01       	movw	r30, r12
    127c:	77 fc       	sbrc	r7, 7
    127e:	85 91       	lpm	r24, Z+
    1280:	77 fe       	sbrs	r7, 7
    1282:	81 91       	ld	r24, Z+
    1284:	6f 01       	movw	r12, r30
    1286:	b7 01       	movw	r22, r14
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	0e 94 8c 0b 	call	0x1718	; 0x1718 <fputc>
    128e:	51 10       	cpse	r5, r1
    1290:	5a 94       	dec	r5
    1292:	01 50       	subi	r16, 0x01	; 1
    1294:	11 09       	sbc	r17, r1
    1296:	01 15       	cp	r16, r1
    1298:	11 05       	cpc	r17, r1
    129a:	79 f7       	brne	.-34     	; 0x127a <vfprintf+0x4e6>
    129c:	e2 c0       	rjmp	.+452    	; 0x1462 <vfprintf+0x6ce>
    129e:	84 36       	cpi	r24, 0x64	; 100
    12a0:	11 f0       	breq	.+4      	; 0x12a6 <vfprintf+0x512>
    12a2:	89 36       	cpi	r24, 0x69	; 105
    12a4:	51 f5       	brne	.+84     	; 0x12fa <vfprintf+0x566>
    12a6:	56 01       	movw	r10, r12
    12a8:	27 ff       	sbrs	r18, 7
    12aa:	09 c0       	rjmp	.+18     	; 0x12be <vfprintf+0x52a>
    12ac:	f4 e0       	ldi	r31, 0x04	; 4
    12ae:	af 0e       	add	r10, r31
    12b0:	b1 1c       	adc	r11, r1
    12b2:	f6 01       	movw	r30, r12
    12b4:	60 81       	ld	r22, Z
    12b6:	71 81       	ldd	r23, Z+1	; 0x01
    12b8:	82 81       	ldd	r24, Z+2	; 0x02
    12ba:	93 81       	ldd	r25, Z+3	; 0x03
    12bc:	0a c0       	rjmp	.+20     	; 0x12d2 <vfprintf+0x53e>
    12be:	f2 e0       	ldi	r31, 0x02	; 2
    12c0:	af 0e       	add	r10, r31
    12c2:	b1 1c       	adc	r11, r1
    12c4:	f6 01       	movw	r30, r12
    12c6:	60 81       	ld	r22, Z
    12c8:	71 81       	ldd	r23, Z+1	; 0x01
    12ca:	88 27       	eor	r24, r24
    12cc:	77 fd       	sbrc	r23, 7
    12ce:	80 95       	com	r24
    12d0:	98 2f       	mov	r25, r24
    12d2:	02 2f       	mov	r16, r18
    12d4:	0f 76       	andi	r16, 0x6F	; 111
    12d6:	97 ff       	sbrs	r25, 7
    12d8:	08 c0       	rjmp	.+16     	; 0x12ea <vfprintf+0x556>
    12da:	90 95       	com	r25
    12dc:	80 95       	com	r24
    12de:	70 95       	com	r23
    12e0:	61 95       	neg	r22
    12e2:	7f 4f       	sbci	r23, 0xFF	; 255
    12e4:	8f 4f       	sbci	r24, 0xFF	; 255
    12e6:	9f 4f       	sbci	r25, 0xFF	; 255
    12e8:	00 68       	ori	r16, 0x80	; 128
    12ea:	2a e0       	ldi	r18, 0x0A	; 10
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	a4 01       	movw	r20, r8
    12f0:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__ultoa_invert>
    12f4:	c8 2e       	mov	r12, r24
    12f6:	c8 18       	sub	r12, r8
    12f8:	3e c0       	rjmp	.+124    	; 0x1376 <vfprintf+0x5e2>
    12fa:	02 2f       	mov	r16, r18
    12fc:	85 37       	cpi	r24, 0x75	; 117
    12fe:	21 f4       	brne	.+8      	; 0x1308 <vfprintf+0x574>
    1300:	0f 7e       	andi	r16, 0xEF	; 239
    1302:	2a e0       	ldi	r18, 0x0A	; 10
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	1d c0       	rjmp	.+58     	; 0x1342 <vfprintf+0x5ae>
    1308:	09 7f       	andi	r16, 0xF9	; 249
    130a:	8f 36       	cpi	r24, 0x6F	; 111
    130c:	91 f0       	breq	.+36     	; 0x1332 <vfprintf+0x59e>
    130e:	18 f4       	brcc	.+6      	; 0x1316 <vfprintf+0x582>
    1310:	88 35       	cpi	r24, 0x58	; 88
    1312:	59 f0       	breq	.+22     	; 0x132a <vfprintf+0x596>
    1314:	b0 c0       	rjmp	.+352    	; 0x1476 <vfprintf+0x6e2>
    1316:	80 37       	cpi	r24, 0x70	; 112
    1318:	19 f0       	breq	.+6      	; 0x1320 <vfprintf+0x58c>
    131a:	88 37       	cpi	r24, 0x78	; 120
    131c:	11 f0       	breq	.+4      	; 0x1322 <vfprintf+0x58e>
    131e:	ab c0       	rjmp	.+342    	; 0x1476 <vfprintf+0x6e2>
    1320:	00 61       	ori	r16, 0x10	; 16
    1322:	04 ff       	sbrs	r16, 4
    1324:	09 c0       	rjmp	.+18     	; 0x1338 <vfprintf+0x5a4>
    1326:	04 60       	ori	r16, 0x04	; 4
    1328:	07 c0       	rjmp	.+14     	; 0x1338 <vfprintf+0x5a4>
    132a:	24 ff       	sbrs	r18, 4
    132c:	08 c0       	rjmp	.+16     	; 0x133e <vfprintf+0x5aa>
    132e:	06 60       	ori	r16, 0x06	; 6
    1330:	06 c0       	rjmp	.+12     	; 0x133e <vfprintf+0x5aa>
    1332:	28 e0       	ldi	r18, 0x08	; 8
    1334:	30 e0       	ldi	r19, 0x00	; 0
    1336:	05 c0       	rjmp	.+10     	; 0x1342 <vfprintf+0x5ae>
    1338:	20 e1       	ldi	r18, 0x10	; 16
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	02 c0       	rjmp	.+4      	; 0x1342 <vfprintf+0x5ae>
    133e:	20 e1       	ldi	r18, 0x10	; 16
    1340:	32 e0       	ldi	r19, 0x02	; 2
    1342:	56 01       	movw	r10, r12
    1344:	07 ff       	sbrs	r16, 7
    1346:	09 c0       	rjmp	.+18     	; 0x135a <vfprintf+0x5c6>
    1348:	f4 e0       	ldi	r31, 0x04	; 4
    134a:	af 0e       	add	r10, r31
    134c:	b1 1c       	adc	r11, r1
    134e:	f6 01       	movw	r30, r12
    1350:	60 81       	ld	r22, Z
    1352:	71 81       	ldd	r23, Z+1	; 0x01
    1354:	82 81       	ldd	r24, Z+2	; 0x02
    1356:	93 81       	ldd	r25, Z+3	; 0x03
    1358:	08 c0       	rjmp	.+16     	; 0x136a <vfprintf+0x5d6>
    135a:	f2 e0       	ldi	r31, 0x02	; 2
    135c:	af 0e       	add	r10, r31
    135e:	b1 1c       	adc	r11, r1
    1360:	f6 01       	movw	r30, r12
    1362:	60 81       	ld	r22, Z
    1364:	71 81       	ldd	r23, Z+1	; 0x01
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	a4 01       	movw	r20, r8
    136c:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <__ultoa_invert>
    1370:	c8 2e       	mov	r12, r24
    1372:	c8 18       	sub	r12, r8
    1374:	0f 77       	andi	r16, 0x7F	; 127
    1376:	06 ff       	sbrs	r16, 6
    1378:	0b c0       	rjmp	.+22     	; 0x1390 <vfprintf+0x5fc>
    137a:	20 2f       	mov	r18, r16
    137c:	2e 7f       	andi	r18, 0xFE	; 254
    137e:	c1 16       	cp	r12, r17
    1380:	50 f4       	brcc	.+20     	; 0x1396 <vfprintf+0x602>
    1382:	04 ff       	sbrs	r16, 4
    1384:	0a c0       	rjmp	.+20     	; 0x139a <vfprintf+0x606>
    1386:	02 fd       	sbrc	r16, 2
    1388:	08 c0       	rjmp	.+16     	; 0x139a <vfprintf+0x606>
    138a:	20 2f       	mov	r18, r16
    138c:	2e 7e       	andi	r18, 0xEE	; 238
    138e:	05 c0       	rjmp	.+10     	; 0x139a <vfprintf+0x606>
    1390:	dc 2c       	mov	r13, r12
    1392:	20 2f       	mov	r18, r16
    1394:	03 c0       	rjmp	.+6      	; 0x139c <vfprintf+0x608>
    1396:	dc 2c       	mov	r13, r12
    1398:	01 c0       	rjmp	.+2      	; 0x139c <vfprintf+0x608>
    139a:	d1 2e       	mov	r13, r17
    139c:	24 ff       	sbrs	r18, 4
    139e:	0d c0       	rjmp	.+26     	; 0x13ba <vfprintf+0x626>
    13a0:	fe 01       	movw	r30, r28
    13a2:	ec 0d       	add	r30, r12
    13a4:	f1 1d       	adc	r31, r1
    13a6:	80 81       	ld	r24, Z
    13a8:	80 33       	cpi	r24, 0x30	; 48
    13aa:	11 f4       	brne	.+4      	; 0x13b0 <vfprintf+0x61c>
    13ac:	29 7e       	andi	r18, 0xE9	; 233
    13ae:	09 c0       	rjmp	.+18     	; 0x13c2 <vfprintf+0x62e>
    13b0:	22 ff       	sbrs	r18, 2
    13b2:	06 c0       	rjmp	.+12     	; 0x13c0 <vfprintf+0x62c>
    13b4:	d3 94       	inc	r13
    13b6:	d3 94       	inc	r13
    13b8:	04 c0       	rjmp	.+8      	; 0x13c2 <vfprintf+0x62e>
    13ba:	82 2f       	mov	r24, r18
    13bc:	86 78       	andi	r24, 0x86	; 134
    13be:	09 f0       	breq	.+2      	; 0x13c2 <vfprintf+0x62e>
    13c0:	d3 94       	inc	r13
    13c2:	23 fd       	sbrc	r18, 3
    13c4:	13 c0       	rjmp	.+38     	; 0x13ec <vfprintf+0x658>
    13c6:	20 ff       	sbrs	r18, 0
    13c8:	06 c0       	rjmp	.+12     	; 0x13d6 <vfprintf+0x642>
    13ca:	1c 2d       	mov	r17, r12
    13cc:	d5 14       	cp	r13, r5
    13ce:	18 f4       	brcc	.+6      	; 0x13d6 <vfprintf+0x642>
    13d0:	15 0d       	add	r17, r5
    13d2:	1d 19       	sub	r17, r13
    13d4:	d5 2c       	mov	r13, r5
    13d6:	d5 14       	cp	r13, r5
    13d8:	68 f4       	brcc	.+26     	; 0x13f4 <vfprintf+0x660>
    13da:	b7 01       	movw	r22, r14
    13dc:	80 e2       	ldi	r24, 0x20	; 32
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	2b 8b       	std	Y+19, r18	; 0x13
    13e2:	0e 94 8c 0b 	call	0x1718	; 0x1718 <fputc>
    13e6:	d3 94       	inc	r13
    13e8:	2b 89       	ldd	r18, Y+19	; 0x13
    13ea:	f5 cf       	rjmp	.-22     	; 0x13d6 <vfprintf+0x642>
    13ec:	d5 14       	cp	r13, r5
    13ee:	10 f4       	brcc	.+4      	; 0x13f4 <vfprintf+0x660>
    13f0:	5d 18       	sub	r5, r13
    13f2:	01 c0       	rjmp	.+2      	; 0x13f6 <vfprintf+0x662>
    13f4:	51 2c       	mov	r5, r1
    13f6:	24 ff       	sbrs	r18, 4
    13f8:	12 c0       	rjmp	.+36     	; 0x141e <vfprintf+0x68a>
    13fa:	b7 01       	movw	r22, r14
    13fc:	80 e3       	ldi	r24, 0x30	; 48
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	2b 8b       	std	Y+19, r18	; 0x13
    1402:	0e 94 8c 0b 	call	0x1718	; 0x1718 <fputc>
    1406:	2b 89       	ldd	r18, Y+19	; 0x13
    1408:	22 ff       	sbrs	r18, 2
    140a:	17 c0       	rjmp	.+46     	; 0x143a <vfprintf+0x6a6>
    140c:	21 ff       	sbrs	r18, 1
    140e:	03 c0       	rjmp	.+6      	; 0x1416 <vfprintf+0x682>
    1410:	88 e5       	ldi	r24, 0x58	; 88
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	02 c0       	rjmp	.+4      	; 0x141a <vfprintf+0x686>
    1416:	88 e7       	ldi	r24, 0x78	; 120
    1418:	90 e0       	ldi	r25, 0x00	; 0
    141a:	b7 01       	movw	r22, r14
    141c:	0c c0       	rjmp	.+24     	; 0x1436 <vfprintf+0x6a2>
    141e:	82 2f       	mov	r24, r18
    1420:	86 78       	andi	r24, 0x86	; 134
    1422:	59 f0       	breq	.+22     	; 0x143a <vfprintf+0x6a6>
    1424:	21 fd       	sbrc	r18, 1
    1426:	02 c0       	rjmp	.+4      	; 0x142c <vfprintf+0x698>
    1428:	80 e2       	ldi	r24, 0x20	; 32
    142a:	01 c0       	rjmp	.+2      	; 0x142e <vfprintf+0x69a>
    142c:	8b e2       	ldi	r24, 0x2B	; 43
    142e:	27 fd       	sbrc	r18, 7
    1430:	8d e2       	ldi	r24, 0x2D	; 45
    1432:	b7 01       	movw	r22, r14
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 8c 0b 	call	0x1718	; 0x1718 <fputc>
    143a:	c1 16       	cp	r12, r17
    143c:	38 f4       	brcc	.+14     	; 0x144c <vfprintf+0x6b8>
    143e:	b7 01       	movw	r22, r14
    1440:	80 e3       	ldi	r24, 0x30	; 48
    1442:	90 e0       	ldi	r25, 0x00	; 0
    1444:	0e 94 8c 0b 	call	0x1718	; 0x1718 <fputc>
    1448:	11 50       	subi	r17, 0x01	; 1
    144a:	f7 cf       	rjmp	.-18     	; 0x143a <vfprintf+0x6a6>
    144c:	ca 94       	dec	r12
    144e:	f4 01       	movw	r30, r8
    1450:	ec 0d       	add	r30, r12
    1452:	f1 1d       	adc	r31, r1
    1454:	80 81       	ld	r24, Z
    1456:	b7 01       	movw	r22, r14
    1458:	90 e0       	ldi	r25, 0x00	; 0
    145a:	0e 94 8c 0b 	call	0x1718	; 0x1718 <fputc>
    145e:	c1 10       	cpse	r12, r1
    1460:	f5 cf       	rjmp	.-22     	; 0x144c <vfprintf+0x6b8>
    1462:	55 20       	and	r5, r5
    1464:	09 f4       	brne	.+2      	; 0x1468 <vfprintf+0x6d4>
    1466:	c2 cc       	rjmp	.-1660   	; 0xdec <vfprintf+0x58>
    1468:	b7 01       	movw	r22, r14
    146a:	80 e2       	ldi	r24, 0x20	; 32
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	0e 94 8c 0b 	call	0x1718	; 0x1718 <fputc>
    1472:	5a 94       	dec	r5
    1474:	f6 cf       	rjmp	.-20     	; 0x1462 <vfprintf+0x6ce>
    1476:	f7 01       	movw	r30, r14
    1478:	86 81       	ldd	r24, Z+6	; 0x06
    147a:	97 81       	ldd	r25, Z+7	; 0x07
    147c:	02 c0       	rjmp	.+4      	; 0x1482 <vfprintf+0x6ee>
    147e:	8f ef       	ldi	r24, 0xFF	; 255
    1480:	9f ef       	ldi	r25, 0xFF	; 255
    1482:	63 96       	adiw	r28, 0x13	; 19
    1484:	e2 e1       	ldi	r30, 0x12	; 18
    1486:	0c 94 83 0a 	jmp	0x1506	; 0x1506 <__epilogue_restores__>

0000148a <__udivmodsi4>:
    148a:	a1 e2       	ldi	r26, 0x21	; 33
    148c:	1a 2e       	mov	r1, r26
    148e:	aa 1b       	sub	r26, r26
    1490:	bb 1b       	sub	r27, r27
    1492:	fd 01       	movw	r30, r26
    1494:	0d c0       	rjmp	.+26     	; 0x14b0 <__udivmodsi4_ep>

00001496 <__udivmodsi4_loop>:
    1496:	aa 1f       	adc	r26, r26
    1498:	bb 1f       	adc	r27, r27
    149a:	ee 1f       	adc	r30, r30
    149c:	ff 1f       	adc	r31, r31
    149e:	a2 17       	cp	r26, r18
    14a0:	b3 07       	cpc	r27, r19
    14a2:	e4 07       	cpc	r30, r20
    14a4:	f5 07       	cpc	r31, r21
    14a6:	20 f0       	brcs	.+8      	; 0x14b0 <__udivmodsi4_ep>
    14a8:	a2 1b       	sub	r26, r18
    14aa:	b3 0b       	sbc	r27, r19
    14ac:	e4 0b       	sbc	r30, r20
    14ae:	f5 0b       	sbc	r31, r21

000014b0 <__udivmodsi4_ep>:
    14b0:	66 1f       	adc	r22, r22
    14b2:	77 1f       	adc	r23, r23
    14b4:	88 1f       	adc	r24, r24
    14b6:	99 1f       	adc	r25, r25
    14b8:	1a 94       	dec	r1
    14ba:	69 f7       	brne	.-38     	; 0x1496 <__udivmodsi4_loop>
    14bc:	60 95       	com	r22
    14be:	70 95       	com	r23
    14c0:	80 95       	com	r24
    14c2:	90 95       	com	r25
    14c4:	9b 01       	movw	r18, r22
    14c6:	ac 01       	movw	r20, r24
    14c8:	bd 01       	movw	r22, r26
    14ca:	cf 01       	movw	r24, r30
    14cc:	08 95       	ret

000014ce <__prologue_saves__>:
    14ce:	2f 92       	push	r2
    14d0:	3f 92       	push	r3
    14d2:	4f 92       	push	r4
    14d4:	5f 92       	push	r5
    14d6:	6f 92       	push	r6
    14d8:	7f 92       	push	r7
    14da:	8f 92       	push	r8
    14dc:	9f 92       	push	r9
    14de:	af 92       	push	r10
    14e0:	bf 92       	push	r11
    14e2:	cf 92       	push	r12
    14e4:	df 92       	push	r13
    14e6:	ef 92       	push	r14
    14e8:	ff 92       	push	r15
    14ea:	0f 93       	push	r16
    14ec:	1f 93       	push	r17
    14ee:	cf 93       	push	r28
    14f0:	df 93       	push	r29
    14f2:	cd b7       	in	r28, 0x3d	; 61
    14f4:	de b7       	in	r29, 0x3e	; 62
    14f6:	ca 1b       	sub	r28, r26
    14f8:	db 0b       	sbc	r29, r27
    14fa:	0f b6       	in	r0, 0x3f	; 63
    14fc:	f8 94       	cli
    14fe:	de bf       	out	0x3e, r29	; 62
    1500:	0f be       	out	0x3f, r0	; 63
    1502:	cd bf       	out	0x3d, r28	; 61
    1504:	09 94       	ijmp

00001506 <__epilogue_restores__>:
    1506:	2a 88       	ldd	r2, Y+18	; 0x12
    1508:	39 88       	ldd	r3, Y+17	; 0x11
    150a:	48 88       	ldd	r4, Y+16	; 0x10
    150c:	5f 84       	ldd	r5, Y+15	; 0x0f
    150e:	6e 84       	ldd	r6, Y+14	; 0x0e
    1510:	7d 84       	ldd	r7, Y+13	; 0x0d
    1512:	8c 84       	ldd	r8, Y+12	; 0x0c
    1514:	9b 84       	ldd	r9, Y+11	; 0x0b
    1516:	aa 84       	ldd	r10, Y+10	; 0x0a
    1518:	b9 84       	ldd	r11, Y+9	; 0x09
    151a:	c8 84       	ldd	r12, Y+8	; 0x08
    151c:	df 80       	ldd	r13, Y+7	; 0x07
    151e:	ee 80       	ldd	r14, Y+6	; 0x06
    1520:	fd 80       	ldd	r15, Y+5	; 0x05
    1522:	0c 81       	ldd	r16, Y+4	; 0x04
    1524:	1b 81       	ldd	r17, Y+3	; 0x03
    1526:	aa 81       	ldd	r26, Y+2	; 0x02
    1528:	b9 81       	ldd	r27, Y+1	; 0x01
    152a:	ce 0f       	add	r28, r30
    152c:	d1 1d       	adc	r29, r1
    152e:	0f b6       	in	r0, 0x3f	; 63
    1530:	f8 94       	cli
    1532:	de bf       	out	0x3e, r29	; 62
    1534:	0f be       	out	0x3f, r0	; 63
    1536:	cd bf       	out	0x3d, r28	; 61
    1538:	ed 01       	movw	r28, r26
    153a:	08 95       	ret

0000153c <__ftoa_engine>:
    153c:	28 30       	cpi	r18, 0x08	; 8
    153e:	08 f0       	brcs	.+2      	; 0x1542 <__ftoa_engine+0x6>
    1540:	27 e0       	ldi	r18, 0x07	; 7
    1542:	33 27       	eor	r19, r19
    1544:	da 01       	movw	r26, r20
    1546:	99 0f       	add	r25, r25
    1548:	31 1d       	adc	r19, r1
    154a:	87 fd       	sbrc	r24, 7
    154c:	91 60       	ori	r25, 0x01	; 1
    154e:	00 96       	adiw	r24, 0x00	; 0
    1550:	61 05       	cpc	r22, r1
    1552:	71 05       	cpc	r23, r1
    1554:	39 f4       	brne	.+14     	; 0x1564 <__ftoa_engine+0x28>
    1556:	32 60       	ori	r19, 0x02	; 2
    1558:	2e 5f       	subi	r18, 0xFE	; 254
    155a:	3d 93       	st	X+, r19
    155c:	30 e3       	ldi	r19, 0x30	; 48
    155e:	2a 95       	dec	r18
    1560:	e1 f7       	brne	.-8      	; 0x155a <__ftoa_engine+0x1e>
    1562:	08 95       	ret
    1564:	9f 3f       	cpi	r25, 0xFF	; 255
    1566:	30 f0       	brcs	.+12     	; 0x1574 <__ftoa_engine+0x38>
    1568:	80 38       	cpi	r24, 0x80	; 128
    156a:	71 05       	cpc	r23, r1
    156c:	61 05       	cpc	r22, r1
    156e:	09 f0       	breq	.+2      	; 0x1572 <__ftoa_engine+0x36>
    1570:	3c 5f       	subi	r19, 0xFC	; 252
    1572:	3c 5f       	subi	r19, 0xFC	; 252
    1574:	3d 93       	st	X+, r19
    1576:	91 30       	cpi	r25, 0x01	; 1
    1578:	08 f0       	brcs	.+2      	; 0x157c <__ftoa_engine+0x40>
    157a:	80 68       	ori	r24, 0x80	; 128
    157c:	91 1d       	adc	r25, r1
    157e:	df 93       	push	r29
    1580:	cf 93       	push	r28
    1582:	1f 93       	push	r17
    1584:	0f 93       	push	r16
    1586:	ff 92       	push	r15
    1588:	ef 92       	push	r14
    158a:	19 2f       	mov	r17, r25
    158c:	98 7f       	andi	r25, 0xF8	; 248
    158e:	96 95       	lsr	r25
    1590:	e9 2f       	mov	r30, r25
    1592:	96 95       	lsr	r25
    1594:	96 95       	lsr	r25
    1596:	e9 0f       	add	r30, r25
    1598:	ff 27       	eor	r31, r31
    159a:	ea 56       	subi	r30, 0x6A	; 106
    159c:	fe 4f       	sbci	r31, 0xFE	; 254
    159e:	99 27       	eor	r25, r25
    15a0:	33 27       	eor	r19, r19
    15a2:	ee 24       	eor	r14, r14
    15a4:	ff 24       	eor	r15, r15
    15a6:	a7 01       	movw	r20, r14
    15a8:	e7 01       	movw	r28, r14
    15aa:	05 90       	lpm	r0, Z+
    15ac:	08 94       	sec
    15ae:	07 94       	ror	r0
    15b0:	28 f4       	brcc	.+10     	; 0x15bc <__ftoa_engine+0x80>
    15b2:	36 0f       	add	r19, r22
    15b4:	e7 1e       	adc	r14, r23
    15b6:	f8 1e       	adc	r15, r24
    15b8:	49 1f       	adc	r20, r25
    15ba:	51 1d       	adc	r21, r1
    15bc:	66 0f       	add	r22, r22
    15be:	77 1f       	adc	r23, r23
    15c0:	88 1f       	adc	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	06 94       	lsr	r0
    15c6:	a1 f7       	brne	.-24     	; 0x15b0 <__ftoa_engine+0x74>
    15c8:	05 90       	lpm	r0, Z+
    15ca:	07 94       	ror	r0
    15cc:	28 f4       	brcc	.+10     	; 0x15d8 <__ftoa_engine+0x9c>
    15ce:	e7 0e       	add	r14, r23
    15d0:	f8 1e       	adc	r15, r24
    15d2:	49 1f       	adc	r20, r25
    15d4:	56 1f       	adc	r21, r22
    15d6:	c1 1d       	adc	r28, r1
    15d8:	77 0f       	add	r23, r23
    15da:	88 1f       	adc	r24, r24
    15dc:	99 1f       	adc	r25, r25
    15de:	66 1f       	adc	r22, r22
    15e0:	06 94       	lsr	r0
    15e2:	a1 f7       	brne	.-24     	; 0x15cc <__ftoa_engine+0x90>
    15e4:	05 90       	lpm	r0, Z+
    15e6:	07 94       	ror	r0
    15e8:	28 f4       	brcc	.+10     	; 0x15f4 <__ftoa_engine+0xb8>
    15ea:	f8 0e       	add	r15, r24
    15ec:	49 1f       	adc	r20, r25
    15ee:	56 1f       	adc	r21, r22
    15f0:	c7 1f       	adc	r28, r23
    15f2:	d1 1d       	adc	r29, r1
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	66 1f       	adc	r22, r22
    15fa:	77 1f       	adc	r23, r23
    15fc:	06 94       	lsr	r0
    15fe:	a1 f7       	brne	.-24     	; 0x15e8 <__ftoa_engine+0xac>
    1600:	05 90       	lpm	r0, Z+
    1602:	07 94       	ror	r0
    1604:	20 f4       	brcc	.+8      	; 0x160e <__ftoa_engine+0xd2>
    1606:	49 0f       	add	r20, r25
    1608:	56 1f       	adc	r21, r22
    160a:	c7 1f       	adc	r28, r23
    160c:	d8 1f       	adc	r29, r24
    160e:	99 0f       	add	r25, r25
    1610:	66 1f       	adc	r22, r22
    1612:	77 1f       	adc	r23, r23
    1614:	88 1f       	adc	r24, r24
    1616:	06 94       	lsr	r0
    1618:	a9 f7       	brne	.-22     	; 0x1604 <__ftoa_engine+0xc8>
    161a:	84 91       	lpm	r24, Z
    161c:	10 95       	com	r17
    161e:	17 70       	andi	r17, 0x07	; 7
    1620:	41 f0       	breq	.+16     	; 0x1632 <__ftoa_engine+0xf6>
    1622:	d6 95       	lsr	r29
    1624:	c7 95       	ror	r28
    1626:	57 95       	ror	r21
    1628:	47 95       	ror	r20
    162a:	f7 94       	ror	r15
    162c:	e7 94       	ror	r14
    162e:	1a 95       	dec	r17
    1630:	c1 f7       	brne	.-16     	; 0x1622 <__ftoa_engine+0xe6>
    1632:	ec e3       	ldi	r30, 0x3C	; 60
    1634:	f1 e0       	ldi	r31, 0x01	; 1
    1636:	68 94       	set
    1638:	15 90       	lpm	r1, Z+
    163a:	15 91       	lpm	r17, Z+
    163c:	35 91       	lpm	r19, Z+
    163e:	65 91       	lpm	r22, Z+
    1640:	95 91       	lpm	r25, Z+
    1642:	05 90       	lpm	r0, Z+
    1644:	7f e2       	ldi	r23, 0x2F	; 47
    1646:	73 95       	inc	r23
    1648:	e1 18       	sub	r14, r1
    164a:	f1 0a       	sbc	r15, r17
    164c:	43 0b       	sbc	r20, r19
    164e:	56 0b       	sbc	r21, r22
    1650:	c9 0b       	sbc	r28, r25
    1652:	d0 09       	sbc	r29, r0
    1654:	c0 f7       	brcc	.-16     	; 0x1646 <__ftoa_engine+0x10a>
    1656:	e1 0c       	add	r14, r1
    1658:	f1 1e       	adc	r15, r17
    165a:	43 1f       	adc	r20, r19
    165c:	56 1f       	adc	r21, r22
    165e:	c9 1f       	adc	r28, r25
    1660:	d0 1d       	adc	r29, r0
    1662:	7e f4       	brtc	.+30     	; 0x1682 <__ftoa_engine+0x146>
    1664:	70 33       	cpi	r23, 0x30	; 48
    1666:	11 f4       	brne	.+4      	; 0x166c <__ftoa_engine+0x130>
    1668:	8a 95       	dec	r24
    166a:	e6 cf       	rjmp	.-52     	; 0x1638 <__ftoa_engine+0xfc>
    166c:	e8 94       	clt
    166e:	01 50       	subi	r16, 0x01	; 1
    1670:	30 f0       	brcs	.+12     	; 0x167e <__ftoa_engine+0x142>
    1672:	08 0f       	add	r16, r24
    1674:	0a f4       	brpl	.+2      	; 0x1678 <__ftoa_engine+0x13c>
    1676:	00 27       	eor	r16, r16
    1678:	02 17       	cp	r16, r18
    167a:	08 f4       	brcc	.+2      	; 0x167e <__ftoa_engine+0x142>
    167c:	20 2f       	mov	r18, r16
    167e:	23 95       	inc	r18
    1680:	02 2f       	mov	r16, r18
    1682:	7a 33       	cpi	r23, 0x3A	; 58
    1684:	28 f0       	brcs	.+10     	; 0x1690 <__ftoa_engine+0x154>
    1686:	79 e3       	ldi	r23, 0x39	; 57
    1688:	7d 93       	st	X+, r23
    168a:	2a 95       	dec	r18
    168c:	e9 f7       	brne	.-6      	; 0x1688 <__ftoa_engine+0x14c>
    168e:	10 c0       	rjmp	.+32     	; 0x16b0 <__ftoa_engine+0x174>
    1690:	7d 93       	st	X+, r23
    1692:	2a 95       	dec	r18
    1694:	89 f6       	brne	.-94     	; 0x1638 <__ftoa_engine+0xfc>
    1696:	06 94       	lsr	r0
    1698:	97 95       	ror	r25
    169a:	67 95       	ror	r22
    169c:	37 95       	ror	r19
    169e:	17 95       	ror	r17
    16a0:	17 94       	ror	r1
    16a2:	e1 18       	sub	r14, r1
    16a4:	f1 0a       	sbc	r15, r17
    16a6:	43 0b       	sbc	r20, r19
    16a8:	56 0b       	sbc	r21, r22
    16aa:	c9 0b       	sbc	r28, r25
    16ac:	d0 09       	sbc	r29, r0
    16ae:	98 f0       	brcs	.+38     	; 0x16d6 <__ftoa_engine+0x19a>
    16b0:	23 95       	inc	r18
    16b2:	7e 91       	ld	r23, -X
    16b4:	73 95       	inc	r23
    16b6:	7a 33       	cpi	r23, 0x3A	; 58
    16b8:	08 f0       	brcs	.+2      	; 0x16bc <__ftoa_engine+0x180>
    16ba:	70 e3       	ldi	r23, 0x30	; 48
    16bc:	7c 93       	st	X, r23
    16be:	20 13       	cpse	r18, r16
    16c0:	b8 f7       	brcc	.-18     	; 0x16b0 <__ftoa_engine+0x174>
    16c2:	7e 91       	ld	r23, -X
    16c4:	70 61       	ori	r23, 0x10	; 16
    16c6:	7d 93       	st	X+, r23
    16c8:	30 f0       	brcs	.+12     	; 0x16d6 <__ftoa_engine+0x19a>
    16ca:	83 95       	inc	r24
    16cc:	71 e3       	ldi	r23, 0x31	; 49
    16ce:	7d 93       	st	X+, r23
    16d0:	70 e3       	ldi	r23, 0x30	; 48
    16d2:	2a 95       	dec	r18
    16d4:	e1 f7       	brne	.-8      	; 0x16ce <__ftoa_engine+0x192>
    16d6:	11 24       	eor	r1, r1
    16d8:	ef 90       	pop	r14
    16da:	ff 90       	pop	r15
    16dc:	0f 91       	pop	r16
    16de:	1f 91       	pop	r17
    16e0:	cf 91       	pop	r28
    16e2:	df 91       	pop	r29
    16e4:	99 27       	eor	r25, r25
    16e6:	87 fd       	sbrc	r24, 7
    16e8:	90 95       	com	r25
    16ea:	08 95       	ret

000016ec <strnlen_P>:
    16ec:	fc 01       	movw	r30, r24
    16ee:	05 90       	lpm	r0, Z+
    16f0:	61 50       	subi	r22, 0x01	; 1
    16f2:	70 40       	sbci	r23, 0x00	; 0
    16f4:	01 10       	cpse	r0, r1
    16f6:	d8 f7       	brcc	.-10     	; 0x16ee <strnlen_P+0x2>
    16f8:	80 95       	com	r24
    16fa:	90 95       	com	r25
    16fc:	8e 0f       	add	r24, r30
    16fe:	9f 1f       	adc	r25, r31
    1700:	08 95       	ret

00001702 <strnlen>:
    1702:	fc 01       	movw	r30, r24
    1704:	61 50       	subi	r22, 0x01	; 1
    1706:	70 40       	sbci	r23, 0x00	; 0
    1708:	01 90       	ld	r0, Z+
    170a:	01 10       	cpse	r0, r1
    170c:	d8 f7       	brcc	.-10     	; 0x1704 <strnlen+0x2>
    170e:	80 95       	com	r24
    1710:	90 95       	com	r25
    1712:	8e 0f       	add	r24, r30
    1714:	9f 1f       	adc	r25, r31
    1716:	08 95       	ret

00001718 <fputc>:
    1718:	0f 93       	push	r16
    171a:	1f 93       	push	r17
    171c:	cf 93       	push	r28
    171e:	df 93       	push	r29
    1720:	18 2f       	mov	r17, r24
    1722:	09 2f       	mov	r16, r25
    1724:	eb 01       	movw	r28, r22
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	81 fd       	sbrc	r24, 1
    172a:	03 c0       	rjmp	.+6      	; 0x1732 <fputc+0x1a>
    172c:	8f ef       	ldi	r24, 0xFF	; 255
    172e:	9f ef       	ldi	r25, 0xFF	; 255
    1730:	20 c0       	rjmp	.+64     	; 0x1772 <fputc+0x5a>
    1732:	82 ff       	sbrs	r24, 2
    1734:	10 c0       	rjmp	.+32     	; 0x1756 <fputc+0x3e>
    1736:	4e 81       	ldd	r20, Y+6	; 0x06
    1738:	5f 81       	ldd	r21, Y+7	; 0x07
    173a:	2c 81       	ldd	r18, Y+4	; 0x04
    173c:	3d 81       	ldd	r19, Y+5	; 0x05
    173e:	42 17       	cp	r20, r18
    1740:	53 07       	cpc	r21, r19
    1742:	7c f4       	brge	.+30     	; 0x1762 <fputc+0x4a>
    1744:	e8 81       	ld	r30, Y
    1746:	f9 81       	ldd	r31, Y+1	; 0x01
    1748:	9f 01       	movw	r18, r30
    174a:	2f 5f       	subi	r18, 0xFF	; 255
    174c:	3f 4f       	sbci	r19, 0xFF	; 255
    174e:	39 83       	std	Y+1, r19	; 0x01
    1750:	28 83       	st	Y, r18
    1752:	10 83       	st	Z, r17
    1754:	06 c0       	rjmp	.+12     	; 0x1762 <fputc+0x4a>
    1756:	e8 85       	ldd	r30, Y+8	; 0x08
    1758:	f9 85       	ldd	r31, Y+9	; 0x09
    175a:	81 2f       	mov	r24, r17
    175c:	09 95       	icall
    175e:	89 2b       	or	r24, r25
    1760:	29 f7       	brne	.-54     	; 0x172c <fputc+0x14>
    1762:	2e 81       	ldd	r18, Y+6	; 0x06
    1764:	3f 81       	ldd	r19, Y+7	; 0x07
    1766:	2f 5f       	subi	r18, 0xFF	; 255
    1768:	3f 4f       	sbci	r19, 0xFF	; 255
    176a:	3f 83       	std	Y+7, r19	; 0x07
    176c:	2e 83       	std	Y+6, r18	; 0x06
    176e:	81 2f       	mov	r24, r17
    1770:	90 2f       	mov	r25, r16
    1772:	df 91       	pop	r29
    1774:	cf 91       	pop	r28
    1776:	1f 91       	pop	r17
    1778:	0f 91       	pop	r16
    177a:	08 95       	ret

0000177c <printf>:
    177c:	a0 e0       	ldi	r26, 0x00	; 0
    177e:	b0 e0       	ldi	r27, 0x00	; 0
    1780:	e4 ec       	ldi	r30, 0xC4	; 196
    1782:	fb e0       	ldi	r31, 0x0B	; 11
    1784:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__prologue_saves__+0x20>
    1788:	fe 01       	movw	r30, r28
    178a:	35 96       	adiw	r30, 0x05	; 5
    178c:	61 91       	ld	r22, Z+
    178e:	71 91       	ld	r23, Z+
    1790:	af 01       	movw	r20, r30
    1792:	80 91 73 06 	lds	r24, 0x0673
    1796:	90 91 74 06 	lds	r25, 0x0674
    179a:	0e 94 ca 06 	call	0xd94	; 0xd94 <vfprintf>
    179e:	e2 e0       	ldi	r30, 0x02	; 2
    17a0:	0c 94 93 0a 	jmp	0x1526	; 0x1526 <__epilogue_restores__+0x20>

000017a4 <puts>:
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	e0 91 73 06 	lds	r30, 0x0673
    17b0:	f0 91 74 06 	lds	r31, 0x0674
    17b4:	23 81       	ldd	r18, Z+3	; 0x03
    17b6:	21 ff       	sbrs	r18, 1
    17b8:	1b c0       	rjmp	.+54     	; 0x17f0 <puts+0x4c>
    17ba:	ec 01       	movw	r28, r24
    17bc:	00 e0       	ldi	r16, 0x00	; 0
    17be:	10 e0       	ldi	r17, 0x00	; 0
    17c0:	89 91       	ld	r24, Y+
    17c2:	60 91 73 06 	lds	r22, 0x0673
    17c6:	70 91 74 06 	lds	r23, 0x0674
    17ca:	db 01       	movw	r26, r22
    17cc:	18 96       	adiw	r26, 0x08	; 8
    17ce:	ed 91       	ld	r30, X+
    17d0:	fc 91       	ld	r31, X
    17d2:	19 97       	sbiw	r26, 0x09	; 9
    17d4:	88 23       	and	r24, r24
    17d6:	31 f0       	breq	.+12     	; 0x17e4 <puts+0x40>
    17d8:	09 95       	icall
    17da:	89 2b       	or	r24, r25
    17dc:	89 f3       	breq	.-30     	; 0x17c0 <puts+0x1c>
    17de:	0f ef       	ldi	r16, 0xFF	; 255
    17e0:	1f ef       	ldi	r17, 0xFF	; 255
    17e2:	ee cf       	rjmp	.-36     	; 0x17c0 <puts+0x1c>
    17e4:	8a e0       	ldi	r24, 0x0A	; 10
    17e6:	09 95       	icall
    17e8:	89 2b       	or	r24, r25
    17ea:	11 f4       	brne	.+4      	; 0x17f0 <puts+0x4c>
    17ec:	c8 01       	movw	r24, r16
    17ee:	02 c0       	rjmp	.+4      	; 0x17f4 <puts+0x50>
    17f0:	8f ef       	ldi	r24, 0xFF	; 255
    17f2:	9f ef       	ldi	r25, 0xFF	; 255
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	1f 91       	pop	r17
    17fa:	0f 91       	pop	r16
    17fc:	08 95       	ret

000017fe <__ultoa_invert>:
    17fe:	fa 01       	movw	r30, r20
    1800:	aa 27       	eor	r26, r26
    1802:	28 30       	cpi	r18, 0x08	; 8
    1804:	51 f1       	breq	.+84     	; 0x185a <__ultoa_invert+0x5c>
    1806:	20 31       	cpi	r18, 0x10	; 16
    1808:	81 f1       	breq	.+96     	; 0x186a <__ultoa_invert+0x6c>
    180a:	e8 94       	clt
    180c:	6f 93       	push	r22
    180e:	6e 7f       	andi	r22, 0xFE	; 254
    1810:	6e 5f       	subi	r22, 0xFE	; 254
    1812:	7f 4f       	sbci	r23, 0xFF	; 255
    1814:	8f 4f       	sbci	r24, 0xFF	; 255
    1816:	9f 4f       	sbci	r25, 0xFF	; 255
    1818:	af 4f       	sbci	r26, 0xFF	; 255
    181a:	b1 e0       	ldi	r27, 0x01	; 1
    181c:	3e d0       	rcall	.+124    	; 0x189a <__ultoa_invert+0x9c>
    181e:	b4 e0       	ldi	r27, 0x04	; 4
    1820:	3c d0       	rcall	.+120    	; 0x189a <__ultoa_invert+0x9c>
    1822:	67 0f       	add	r22, r23
    1824:	78 1f       	adc	r23, r24
    1826:	89 1f       	adc	r24, r25
    1828:	9a 1f       	adc	r25, r26
    182a:	a1 1d       	adc	r26, r1
    182c:	68 0f       	add	r22, r24
    182e:	79 1f       	adc	r23, r25
    1830:	8a 1f       	adc	r24, r26
    1832:	91 1d       	adc	r25, r1
    1834:	a1 1d       	adc	r26, r1
    1836:	6a 0f       	add	r22, r26
    1838:	71 1d       	adc	r23, r1
    183a:	81 1d       	adc	r24, r1
    183c:	91 1d       	adc	r25, r1
    183e:	a1 1d       	adc	r26, r1
    1840:	20 d0       	rcall	.+64     	; 0x1882 <__ultoa_invert+0x84>
    1842:	09 f4       	brne	.+2      	; 0x1846 <__ultoa_invert+0x48>
    1844:	68 94       	set
    1846:	3f 91       	pop	r19
    1848:	2a e0       	ldi	r18, 0x0A	; 10
    184a:	26 9f       	mul	r18, r22
    184c:	11 24       	eor	r1, r1
    184e:	30 19       	sub	r19, r0
    1850:	30 5d       	subi	r19, 0xD0	; 208
    1852:	31 93       	st	Z+, r19
    1854:	de f6       	brtc	.-74     	; 0x180c <__ultoa_invert+0xe>
    1856:	cf 01       	movw	r24, r30
    1858:	08 95       	ret
    185a:	46 2f       	mov	r20, r22
    185c:	47 70       	andi	r20, 0x07	; 7
    185e:	40 5d       	subi	r20, 0xD0	; 208
    1860:	41 93       	st	Z+, r20
    1862:	b3 e0       	ldi	r27, 0x03	; 3
    1864:	0f d0       	rcall	.+30     	; 0x1884 <__ultoa_invert+0x86>
    1866:	c9 f7       	brne	.-14     	; 0x185a <__ultoa_invert+0x5c>
    1868:	f6 cf       	rjmp	.-20     	; 0x1856 <__ultoa_invert+0x58>
    186a:	46 2f       	mov	r20, r22
    186c:	4f 70       	andi	r20, 0x0F	; 15
    186e:	40 5d       	subi	r20, 0xD0	; 208
    1870:	4a 33       	cpi	r20, 0x3A	; 58
    1872:	18 f0       	brcs	.+6      	; 0x187a <__ultoa_invert+0x7c>
    1874:	49 5d       	subi	r20, 0xD9	; 217
    1876:	31 fd       	sbrc	r19, 1
    1878:	40 52       	subi	r20, 0x20	; 32
    187a:	41 93       	st	Z+, r20
    187c:	02 d0       	rcall	.+4      	; 0x1882 <__ultoa_invert+0x84>
    187e:	a9 f7       	brne	.-22     	; 0x186a <__ultoa_invert+0x6c>
    1880:	ea cf       	rjmp	.-44     	; 0x1856 <__ultoa_invert+0x58>
    1882:	b4 e0       	ldi	r27, 0x04	; 4
    1884:	a6 95       	lsr	r26
    1886:	97 95       	ror	r25
    1888:	87 95       	ror	r24
    188a:	77 95       	ror	r23
    188c:	67 95       	ror	r22
    188e:	ba 95       	dec	r27
    1890:	c9 f7       	brne	.-14     	; 0x1884 <__ultoa_invert+0x86>
    1892:	00 97       	sbiw	r24, 0x00	; 0
    1894:	61 05       	cpc	r22, r1
    1896:	71 05       	cpc	r23, r1
    1898:	08 95       	ret
    189a:	9b 01       	movw	r18, r22
    189c:	ac 01       	movw	r20, r24
    189e:	0a 2e       	mov	r0, r26
    18a0:	06 94       	lsr	r0
    18a2:	57 95       	ror	r21
    18a4:	47 95       	ror	r20
    18a6:	37 95       	ror	r19
    18a8:	27 95       	ror	r18
    18aa:	ba 95       	dec	r27
    18ac:	c9 f7       	brne	.-14     	; 0x18a0 <__ultoa_invert+0xa2>
    18ae:	62 0f       	add	r22, r18
    18b0:	73 1f       	adc	r23, r19
    18b2:	84 1f       	adc	r24, r20
    18b4:	95 1f       	adc	r25, r21
    18b6:	a0 1d       	adc	r26, r0
    18b8:	08 95       	ret

000018ba <_exit>:
    18ba:	f8 94       	cli

000018bc <__stop_program>:
    18bc:	ff cf       	rjmp	.-2      	; 0x18bc <__stop_program>
