
ATMOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800200  00002534  000025c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002534  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000414  00800232  00800232  000025fa  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000025fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002658  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000398  00000000  00000000  00002698  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000042d2  00000000  00000000  00002a30  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000017b9  00000000  00000000  00006d02  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000144d  00000000  00000000  000084bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000880  00000000  00000000  00009908  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014e3  00000000  00000000  0000a188  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001c7a  00000000  00000000  0000b66b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003b0  00000000  00000000  0000d2e5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__ctors_end>
       4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      10:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      14:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      18:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      1c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      20:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      24:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      28:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      30:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      34:	0c 94 3b 02 	jmp	0x476	; 0x476 <__vector_13>
      38:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      3c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      40:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      44:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      48:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      4c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      50:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      54:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      58:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      5c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      60:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      64:	0c 94 03 03 	jmp	0x606	; 0x606 <__vector_25>
      68:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__vector_26>
      6c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      70:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      74:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      78:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      7c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      80:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      84:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      88:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      8c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      90:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      94:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      98:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      9c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a8:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__vector_42>
      ac:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      bc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      cc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      dc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      ec:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      fc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     100:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     104:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     108:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     10c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     110:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     114:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     118:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     11c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     120:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     124:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     128:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     12c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     130:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>

00000134 <__trampolines_end>:
     134:	6e 61       	ori	r22, 0x1E	; 30
     136:	6e 00       	.word	0x006e	; ????

00000138 <__c.2177>:
     138:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     148:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     158:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     168:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     178:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     188:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     198:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     208:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     218:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     228:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000236 <__ctors_end>:
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	d1 e2       	ldi	r29, 0x21	; 33
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61

00000242 <__do_copy_data>:
     242:	12 e0       	ldi	r17, 0x02	; 2
     244:	a0 e0       	ldi	r26, 0x00	; 0
     246:	b2 e0       	ldi	r27, 0x02	; 2
     248:	e4 e3       	ldi	r30, 0x34	; 52
     24a:	f5 e2       	ldi	r31, 0x25	; 37
     24c:	02 c0       	rjmp	.+4      	; 0x252 <__do_copy_data+0x10>
     24e:	05 90       	lpm	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	a2 33       	cpi	r26, 0x32	; 50
     254:	b1 07       	cpc	r27, r17
     256:	d9 f7       	brne	.-10     	; 0x24e <__do_copy_data+0xc>

00000258 <__do_clear_bss>:
     258:	26 e0       	ldi	r18, 0x06	; 6
     25a:	a2 e3       	ldi	r26, 0x32	; 50
     25c:	b2 e0       	ldi	r27, 0x02	; 2
     25e:	01 c0       	rjmp	.+2      	; 0x262 <.do_clear_bss_start>

00000260 <.do_clear_bss_loop>:
     260:	1d 92       	st	X+, r1

00000262 <.do_clear_bss_start>:
     262:	a6 34       	cpi	r26, 0x46	; 70
     264:	b2 07       	cpc	r27, r18
     266:	e1 f7       	brne	.-8      	; 0x260 <.do_clear_bss_loop>
     268:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <main>
     26c:	0c 94 98 12 	jmp	0x2530	; 0x2530 <_exit>

00000270 <__bad_interrupt>:
     270:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000274 <appDataConf>:

/*************************************************************************//**
*****************************************************************************/
static void appDataConf(NWK_DataReq_t *req)
{
  appDataReqBusy = false;
     274:	10 92 39 02 	sts	0x0239, r1
     278:	08 95       	ret

0000027a <appSendData>:
}

/*************************************************************************//**
*****************************************************************************/
static void appSendData(void)
{
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
	printf("begin send\n");
     280:	84 e0       	ldi	r24, 0x04	; 4
     282:	92 e0       	ldi	r25, 0x02	; 2
     284:	0e 94 c9 11 	call	0x2392	; 0x2392 <puts>
  if (appDataReqBusy || 0 == appUartBufferPtr)
     288:	80 91 39 02 	lds	r24, 0x0239
     28c:	81 11       	cpse	r24, r1
     28e:	30 c0       	rjmp	.+96     	; 0x2f0 <appSendData+0x76>
     290:	40 91 32 02 	lds	r20, 0x0232
     294:	44 23       	and	r20, r20
     296:	61 f1       	breq	.+88     	; 0x2f0 <appSendData+0x76>
    return;

  memcpy(appDataReqBuffer, appUartBuffer, appUartBufferPtr);
     298:	c6 e3       	ldi	r28, 0x36	; 54
     29a:	d2 e0       	ldi	r29, 0x02	; 2
     29c:	50 e0       	ldi	r21, 0x00	; 0
     29e:	63 e3       	ldi	r22, 0x33	; 51
     2a0:	72 e0       	ldi	r23, 0x02	; 2
     2a2:	ce 01       	movw	r24, r28
     2a4:	0e 94 67 11 	call	0x22ce	; 0x22ce <memcpy>
	appDataReqBuffer[0] = 12;
     2a8:	8c e0       	ldi	r24, 0x0C	; 12
     2aa:	88 83       	st	Y, r24
	appDataReqBuffer[1] = 13;	
     2ac:	8d e0       	ldi	r24, 0x0D	; 13
     2ae:	89 83       	std	Y+1, r24	; 0x01
	appDataReqBuffer[2] = 14;	
     2b0:	8e e0       	ldi	r24, 0x0E	; 14
     2b2:	8a 83       	std	Y+2, r24	; 0x02
	//TODO
  appDataReq.dstAddr = 1-APP_ADDR;
     2b4:	ea e3       	ldi	r30, 0x3A	; 58
     2b6:	f2 e0       	ldi	r31, 0x02	; 2
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	96 83       	std	Z+6, r25	; 0x06
     2be:	85 83       	std	Z+5, r24	; 0x05
  appDataReq.dstEndpoint = APP_ENDPOINT;
     2c0:	11 e0       	ldi	r17, 0x01	; 1
     2c2:	17 83       	std	Z+7, r17	; 0x07
  appDataReq.srcEndpoint = APP_ENDPOINT;
     2c4:	10 87       	std	Z+8, r17	; 0x08
  appDataReq.options = NWK_OPT_ENABLE_SECURITY;
     2c6:	82 e0       	ldi	r24, 0x02	; 2
     2c8:	81 87       	std	Z+9, r24	; 0x09
  appDataReq.data = appDataReqBuffer;
     2ca:	d3 87       	std	Z+11, r29	; 0x0b
     2cc:	c2 87       	std	Z+10, r28	; 0x0a
  appDataReq.size = 3;
     2ce:	83 e0       	ldi	r24, 0x03	; 3
     2d0:	84 87       	std	Z+12, r24	; 0x0c
  appDataReq.confirm = appDataConf;
     2d2:	8a e3       	ldi	r24, 0x3A	; 58
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	96 87       	std	Z+14, r25	; 0x0e
     2d8:	85 87       	std	Z+13, r24	; 0x0d
  NWK_DataReq(&appDataReq);
     2da:	cf 01       	movw	r24, r30
     2dc:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <NWK_DataReq>

  appUartBufferPtr = 0;
     2e0:	10 92 32 02 	sts	0x0232, r1
  appDataReqBusy = true;
     2e4:	10 93 39 02 	sts	0x0239, r17
  printf("end send\n");
     2e8:	8f e0       	ldi	r24, 0x0F	; 15
     2ea:	92 e0       	ldi	r25, 0x02	; 2
     2ec:	0e 94 c9 11 	call	0x2392	; 0x2392 <puts>
}
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	1f 91       	pop	r17
     2f6:	08 95       	ret

000002f8 <appTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void appTimerHandler(SYS_Timer_t *timer)
{
  appSendData();
     2f8:	0e 94 3d 01 	call	0x27a	; 0x27a <appSendData>
     2fc:	08 95       	ret

000002fe <appDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
     2fe:	ef 92       	push	r14
     300:	ff 92       	push	r15
     302:	0f 93       	push	r16
     304:	1f 93       	push	r17
     306:	cf 93       	push	r28
     308:	8c 01       	movw	r16, r24
	printf("begin recv\n");
     30a:	88 e1       	ldi	r24, 0x18	; 24
     30c:	92 e0       	ldi	r25, 0x02	; 2
     30e:	0e 94 c9 11 	call	0x2392	; 0x2392 <puts>
	for (uint8_t i = 0; i < ind->size; i++)
     312:	d8 01       	movw	r26, r16
     314:	19 96       	adiw	r26, 0x09	; 9
     316:	8c 91       	ld	r24, X
     318:	88 23       	and	r24, r24
     31a:	11 f1       	breq	.+68     	; 0x360 <appDataInd+0x62>
     31c:	c0 e0       	ldi	r28, 0x00	; 0
		printf("\t data %d = %d",i,ind->data[i]);
     31e:	0f 2e       	mov	r0, r31
     320:	f3 e2       	ldi	r31, 0x23	; 35
     322:	ef 2e       	mov	r14, r31
     324:	f2 e0       	ldi	r31, 0x02	; 2
     326:	ff 2e       	mov	r15, r31
     328:	f0 2d       	mov	r31, r0
     32a:	d8 01       	movw	r26, r16
     32c:	17 96       	adiw	r26, 0x07	; 7
     32e:	ed 91       	ld	r30, X+
     330:	fc 91       	ld	r31, X
     332:	18 97       	sbiw	r26, 0x08	; 8
     334:	ec 0f       	add	r30, r28
     336:	f1 1d       	adc	r31, r1
     338:	80 81       	ld	r24, Z
     33a:	1f 92       	push	r1
     33c:	8f 93       	push	r24
     33e:	1f 92       	push	r1
     340:	cf 93       	push	r28
     342:	ff 92       	push	r15
     344:	ef 92       	push	r14
     346:	0e 94 b3 11 	call	0x2366	; 0x2366 <printf>
/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
	printf("begin recv\n");
	for (uint8_t i = 0; i < ind->size; i++)
     34a:	cf 5f       	subi	r28, 0xFF	; 255
     34c:	0f 90       	pop	r0
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	0f 90       	pop	r0
     356:	0f 90       	pop	r0
     358:	f8 01       	movw	r30, r16
     35a:	81 85       	ldd	r24, Z+9	; 0x09
     35c:	c8 17       	cp	r28, r24
     35e:	28 f3       	brcs	.-54     	; 0x32a <appDataInd+0x2c>
		printf("\t data %d = %d",i,ind->data[i]);
	printf("begin recv\n");
     360:	88 e1       	ldi	r24, 0x18	; 24
     362:	92 e0       	ldi	r25, 0x02	; 2
     364:	0e 94 c9 11 	call	0x2392	; 0x2392 <puts>
  return true;
}
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	cf 91       	pop	r28
     36c:	1f 91       	pop	r17
     36e:	0f 91       	pop	r16
     370:	ff 90       	pop	r15
     372:	ef 90       	pop	r14
     374:	08 95       	ret

00000376 <HAL_UartBytesReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
     376:	ff 92       	push	r15
     378:	0f 93       	push	r16
     37a:	1f 93       	push	r17
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
     380:	8c 01       	movw	r16, r24
for (uint16_t i = 0; i < bytes; i++)
     382:	89 2b       	or	r24, r25
     384:	d9 f0       	breq	.+54     	; 0x3bc <HAL_UartBytesReceived+0x46>
     386:	c0 e0       	ldi	r28, 0x00	; 0
     388:	d0 e0       	ldi	r29, 0x00	; 0
{
uint8_t byte = HAL_UartReadByte();
     38a:	0e 94 c5 02 	call	0x58a	; 0x58a <HAL_UartReadByte>
     38e:	f8 2e       	mov	r15, r24

if (appUartBufferPtr == sizeof(appUartBuffer))
     390:	90 91 32 02 	lds	r25, 0x0232
     394:	93 30       	cpi	r25, 0x03	; 3
     396:	11 f4       	brne	.+4      	; 0x39c <HAL_UartBytesReceived+0x26>
appSendData();
     398:	0e 94 3d 01 	call	0x27a	; 0x27a <appSendData>

if (appUartBufferPtr < sizeof(appUartBuffer))
     39c:	e0 91 32 02 	lds	r30, 0x0232
     3a0:	e3 30       	cpi	r30, 0x03	; 3
     3a2:	40 f4       	brcc	.+16     	; 0x3b4 <HAL_UartBytesReceived+0x3e>
appUartBuffer[appUartBufferPtr++] = byte;
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	8e 0f       	add	r24, r30
     3a8:	80 93 32 02 	sts	0x0232, r24
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	ed 5c       	subi	r30, 0xCD	; 205
     3b0:	fd 4f       	sbci	r31, 0xFD	; 253
     3b2:	f0 82       	st	Z, r15

/*************************************************************************//**
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
for (uint16_t i = 0; i < bytes; i++)
     3b4:	21 96       	adiw	r28, 0x01	; 1
     3b6:	c0 17       	cp	r28, r16
     3b8:	d1 07       	cpc	r29, r17
     3ba:	39 f7       	brne	.-50     	; 0x38a <HAL_UartBytesReceived+0x14>

if (appUartBufferPtr < sizeof(appUartBuffer))
appUartBuffer[appUartBufferPtr++] = byte;
}

SYS_TimerStop(&appTimer);
     3bc:	8b e4       	ldi	r24, 0x4B	; 75
     3be:	92 e0       	ldi	r25, 0x02	; 2
     3c0:	0e 94 83 0b 	call	0x1706	; 0x1706 <SYS_TimerStop>
SYS_TimerStart(&appTimer);
     3c4:	8b e4       	ldi	r24, 0x4B	; 75
     3c6:	92 e0       	ldi	r25, 0x02	; 2
     3c8:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <SYS_TimerStart>
}
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	ff 90       	pop	r15
     3d6:	08 95       	ret

000003d8 <main>:

/*************************************************************************//**
*****************************************************************************/
int main(void)
{
  SYS_Init();
     3d8:	0e 94 0a 0b 	call	0x1614	; 0x1614 <SYS_Init>
  HAL_UartInit(76800);
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	7c e2       	ldi	r23, 0x2C	; 44
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 70 02 	call	0x4e0	; 0x4e0 <HAL_UartInit>

  NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);

  HAL_BoardInit();

  appTimer.interval = 3000;
     3e8:	cb e4       	ldi	r28, 0x4B	; 75
     3ea:	d2 e0       	ldi	r29, 0x02	; 2
     3ec:	0f 2e       	mov	r0, r31
     3ee:	f8 eb       	ldi	r31, 0xB8	; 184
     3f0:	cf 2e       	mov	r12, r31
     3f2:	fb e0       	ldi	r31, 0x0B	; 11
     3f4:	df 2e       	mov	r13, r31
     3f6:	e1 2c       	mov	r14, r1
     3f8:	f1 2c       	mov	r15, r1
     3fa:	f0 2d       	mov	r31, r0
  appTimer.mode = SYS_TIMER_PERIODIC_MODE;
  appTimer.handler = appTimerHandler;
     3fc:	0c e7       	ldi	r16, 0x7C	; 124
     3fe:	11 e0       	ldi	r17, 0x01	; 1
  SYS_Init();
  HAL_UartInit(76800);

  while (1)
  {
    SYS_TaskHandler();
     400:	0e 94 13 0b 	call	0x1626	; 0x1626 <SYS_TaskHandler>
    HAL_UartTaskHandler();
     404:	0e 94 56 03 	call	0x6ac	; 0x6ac <HAL_UartTaskHandler>

/*************************************************************************//**
*****************************************************************************/
static void APP_TaskHandler(void)
{
  switch (appState)
     408:	80 91 58 02 	lds	r24, 0x0258
     40c:	81 11       	cpse	r24, r1
     40e:	f8 cf       	rjmp	.-16     	; 0x400 <main+0x28>

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
  NWK_SetAddr(APP_ADDR);
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 b4 03 	call	0x768	; 0x768 <NWK_SetAddr>
  NWK_SetPanId(APP_PANID);
     418:	84 e3       	ldi	r24, 0x34	; 52
     41a:	92 e1       	ldi	r25, 0x12	; 18
     41c:	0e 94 bb 03 	call	0x776	; 0x776 <NWK_SetPanId>
  PHY_SetChannel(APP_CHANNEL);
     420:	8f e0       	ldi	r24, 0x0F	; 15
     422:	0e 94 35 0a 	call	0x146a	; 0x146a <PHY_SetChannel>
#ifdef PHY_AT86RF212
  PHY_SetBand(APP_BAND);
  PHY_SetModulation(APP_MODULATION);
#endif
  PHY_SetRxState(true);
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	0e 94 30 0a 	call	0x1460	; 0x1460 <PHY_SetRxState>

  NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
     42c:	6f e7       	ldi	r22, 0x7F	; 127
     42e:	71 e0       	ldi	r23, 0x01	; 1
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	0e 94 c2 03 	call	0x784	; 0x784 <NWK_OpenEndpoint>

  HAL_BoardInit();

  appTimer.interval = 3000;
     436:	ce 82       	std	Y+6, r12	; 0x06
     438:	df 82       	std	Y+7, r13	; 0x07
     43a:	e8 86       	std	Y+8, r14	; 0x08
     43c:	f9 86       	std	Y+9, r15	; 0x09
  appTimer.mode = SYS_TIMER_PERIODIC_MODE;
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	8a 87       	std	Y+10, r24	; 0x0a
  appTimer.handler = appTimerHandler;
     442:	1c 87       	std	Y+12, r17	; 0x0c
     444:	0b 87       	std	Y+11, r16	; 0x0b
  switch (appState)
  {
    case APP_STATE_INITIAL:
    {
      appInit();
      appState = APP_STATE_IDLE;
     446:	80 93 58 02 	sts	0x0258, r24
     44a:	da cf       	rjmp	.-76     	; 0x400 <main+0x28>

0000044c <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     44c:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	f8 94       	cli
     452:	a8 95       	wdr
     454:	80 91 60 00 	lds	r24, 0x0060
     458:	88 61       	ori	r24, 0x18	; 24
     45a:	80 93 60 00 	sts	0x0060, r24
     45e:	10 92 60 00 	sts	0x0060, r1
     462:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
     464:	e1 e6       	ldi	r30, 0x61	; 97
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	80 e8       	ldi	r24, 0x80	; 128
     46a:	80 83       	st	Z, r24
  CLKPR = 0;
     46c:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     46e:	78 94       	sei

  HAL_TimerInit();
     470:	0e 94 4a 02 	call	0x494	; 0x494 <HAL_TimerInit>
     474:	08 95       	ret

00000476 <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
     476:	1f 92       	push	r1
     478:	0f 92       	push	r0
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	0f 92       	push	r0
     47e:	11 24       	eor	r1, r1
     480:	8f 93       	push	r24
  halSleepTimerEvent = true;
     482:	81 e0       	ldi	r24, 0x01	; 1
     484:	80 93 59 02 	sts	0x0259, r24
}
     488:	8f 91       	pop	r24
     48a:	0f 90       	pop	r0
     48c:	0f be       	out	0x3f, r0	; 63
     48e:	0f 90       	pop	r0
     490:	1f 90       	pop	r1
     492:	18 95       	reti

00000494 <HAL_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_TimerInit(void)
{
  halTimerIrqCount = 0;
     494:	10 92 17 06 	sts	0x0617, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
     498:	80 e2       	ldi	r24, 0x20	; 32
     49a:	9e e4       	ldi	r25, 0x4E	; 78
     49c:	90 93 a9 00 	sts	0x00A9, r25
     4a0:	80 93 a8 00 	sts	0x00A8, r24
  TCCR4B = (1 << WGM12);              // CTC mode
     4a4:	e1 ea       	ldi	r30, 0xA1	; 161
     4a6:	f0 e0       	ldi	r31, 0x00	; 0
     4a8:	88 e0       	ldi	r24, 0x08	; 8
     4aa:	80 83       	st	Z, r24
  TCCR4B |= (1 << CS11);              // Prescaler 8
     4ac:	80 81       	ld	r24, Z
     4ae:	82 60       	ori	r24, 0x02	; 2
     4b0:	80 83       	st	Z, r24
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
     4b2:	e2 e7       	ldi	r30, 0x72	; 114
     4b4:	f0 e0       	ldi	r31, 0x00	; 0
     4b6:	80 81       	ld	r24, Z
     4b8:	82 60       	ori	r24, 0x02	; 2
     4ba:	80 83       	st	Z, r24
     4bc:	08 95       	ret

000004be <__vector_42>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     4be:	1f 92       	push	r1
     4c0:	0f 92       	push	r0
     4c2:	0f b6       	in	r0, 0x3f	; 63
     4c4:	0f 92       	push	r0
     4c6:	11 24       	eor	r1, r1
     4c8:	8f 93       	push	r24
  halTimerIrqCount++;
     4ca:	80 91 17 06 	lds	r24, 0x0617
     4ce:	8f 5f       	subi	r24, 0xFF	; 255
     4d0:	80 93 17 06 	sts	0x0617, r24
}
     4d4:	8f 91       	pop	r24
     4d6:	0f 90       	pop	r0
     4d8:	0f be       	out	0x3f, r0	; 63
     4da:	0f 90       	pop	r0
     4dc:	1f 90       	pop	r1
     4de:	18 95       	reti

000004e0 <HAL_UartInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartInit(uint32_t baudrate)
{
  uint32_t brr = ((uint32_t)F_CPU * 2) / (16 * baudrate) - 1;
     4e0:	dc 01       	movw	r26, r24
     4e2:	cb 01       	movw	r24, r22
     4e4:	88 0f       	add	r24, r24
     4e6:	99 1f       	adc	r25, r25
     4e8:	aa 1f       	adc	r26, r26
     4ea:	bb 1f       	adc	r27, r27
     4ec:	88 0f       	add	r24, r24
     4ee:	99 1f       	adc	r25, r25
     4f0:	aa 1f       	adc	r26, r26
     4f2:	bb 1f       	adc	r27, r27
     4f4:	9c 01       	movw	r18, r24
     4f6:	ad 01       	movw	r20, r26
     4f8:	22 0f       	add	r18, r18
     4fa:	33 1f       	adc	r19, r19
     4fc:	44 1f       	adc	r20, r20
     4fe:	55 1f       	adc	r21, r21
     500:	22 0f       	add	r18, r18
     502:	33 1f       	adc	r19, r19
     504:	44 1f       	adc	r20, r20
     506:	55 1f       	adc	r21, r21
     508:	60 e0       	ldi	r22, 0x00	; 0
     50a:	78 e4       	ldi	r23, 0x48	; 72
     50c:	88 ee       	ldi	r24, 0xE8	; 232
     50e:	91 e0       	ldi	r25, 0x01	; 1
     510:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__udivmodsi4>
     514:	ba 01       	movw	r22, r20
     516:	a9 01       	movw	r20, r18
     518:	41 50       	subi	r20, 0x01	; 1
     51a:	51 09       	sbc	r21, r1
     51c:	61 09       	sbc	r22, r1
     51e:	71 09       	sbc	r23, r1

  UBRRxH = (brr >> 8) & 0xff;
     520:	bb 27       	eor	r27, r27
     522:	a7 2f       	mov	r26, r23
     524:	96 2f       	mov	r25, r22
     526:	85 2f       	mov	r24, r21
     528:	80 93 c5 00 	sts	0x00C5, r24
  UBRRxL = (brr & 0xff);
     52c:	40 93 c4 00 	sts	0x00C4, r20
  UCSRxA = (1 << U2X1);
     530:	82 e0       	ldi	r24, 0x02	; 2
     532:	80 93 c0 00 	sts	0x00C0, r24
  UCSRxB = (1 << TXEN1) | (1 << RXEN1) | (1 << RXCIE1);
     536:	88 e9       	ldi	r24, 0x98	; 152
     538:	80 93 c1 00 	sts	0x00C1, r24
  UCSRxC = (3 << UCSZ10);
     53c:	86 e0       	ldi	r24, 0x06	; 6
     53e:	80 93 c2 00 	sts	0x00C2, r24

  txFifo.data = txData;
     542:	ec e7       	ldi	r30, 0x7C	; 124
     544:	f2 e0       	ldi	r31, 0x02	; 2
     546:	81 e7       	ldi	r24, 0x71	; 113
     548:	92 e0       	ldi	r25, 0x02	; 2
     54a:	91 87       	std	Z+9, r25	; 0x09
     54c:	80 87       	std	Z+8, r24	; 0x08
  txFifo.size = HAL_UART_TX_FIFO_SIZE;
     54e:	8a e0       	ldi	r24, 0x0A	; 10
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	95 83       	std	Z+5, r25	; 0x05
     554:	84 83       	std	Z+4, r24	; 0x04
  txFifo.bytes = 0;
     556:	17 82       	std	Z+7, r1	; 0x07
     558:	16 82       	std	Z+6, r1	; 0x06
  txFifo.head = 0;
     55a:	11 82       	std	Z+1, r1	; 0x01
     55c:	10 82       	st	Z, r1
  txFifo.tail = 0;
     55e:	13 82       	std	Z+3, r1	; 0x03
     560:	12 82       	std	Z+2, r1	; 0x02

  rxFifo.data = rxData;
     562:	e7 e6       	ldi	r30, 0x67	; 103
     564:	f2 e0       	ldi	r31, 0x02	; 2
     566:	2c e5       	ldi	r18, 0x5C	; 92
     568:	32 e0       	ldi	r19, 0x02	; 2
     56a:	31 87       	std	Z+9, r19	; 0x09
     56c:	20 87       	std	Z+8, r18	; 0x08
  rxFifo.size = HAL_UART_RX_FIFO_SIZE;
     56e:	95 83       	std	Z+5, r25	; 0x05
     570:	84 83       	std	Z+4, r24	; 0x04
  rxFifo.bytes = 0;
     572:	17 82       	std	Z+7, r1	; 0x07
     574:	16 82       	std	Z+6, r1	; 0x06
  rxFifo.head = 0;
     576:	11 82       	std	Z+1, r1	; 0x01
     578:	10 82       	st	Z, r1
  rxFifo.tail = 0;
     57a:	13 82       	std	Z+3, r1	; 0x03
     57c:	12 82       	std	Z+2, r1	; 0x02

  udrEmpty = true;
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	80 93 5b 02 	sts	0x025B, r24
  newData = false;
     584:	10 92 5a 02 	sts	0x025A, r1
     588:	08 95       	ret

0000058a <HAL_UartReadByte>:
uint8_t HAL_UartReadByte(void)
{
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
     58a:	4f b7       	in	r20, 0x3f	; 63
     58c:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
     58e:	e7 e6       	ldi	r30, 0x67	; 103
     590:	f2 e0       	ldi	r31, 0x02	; 2
     592:	20 85       	ldd	r18, Z+8	; 0x08
     594:	31 85       	ldd	r19, Z+9	; 0x09
     596:	80 81       	ld	r24, Z
     598:	91 81       	ldd	r25, Z+1	; 0x01
     59a:	bc 01       	movw	r22, r24
     59c:	6f 5f       	subi	r22, 0xFF	; 255
     59e:	7f 4f       	sbci	r23, 0xFF	; 255
     5a0:	71 83       	std	Z+1, r23	; 0x01
     5a2:	60 83       	st	Z, r22
     5a4:	d9 01       	movw	r26, r18
     5a6:	a8 0f       	add	r26, r24
     5a8:	b9 1f       	adc	r27, r25
     5aa:	8c 91       	ld	r24, X
    if (rxFifo.head == rxFifo.size)
     5ac:	60 81       	ld	r22, Z
     5ae:	71 81       	ldd	r23, Z+1	; 0x01
     5b0:	24 81       	ldd	r18, Z+4	; 0x04
     5b2:	35 81       	ldd	r19, Z+5	; 0x05
     5b4:	62 17       	cp	r22, r18
     5b6:	73 07       	cpc	r23, r19
     5b8:	21 f4       	brne	.+8      	; 0x5c2 <HAL_UartReadByte+0x38>
      rxFifo.head = 0;
     5ba:	10 92 68 02 	sts	0x0268, r1
     5be:	10 92 67 02 	sts	0x0267, r1
    rxFifo.bytes--;
     5c2:	e7 e6       	ldi	r30, 0x67	; 103
     5c4:	f2 e0       	ldi	r31, 0x02	; 2
     5c6:	26 81       	ldd	r18, Z+6	; 0x06
     5c8:	37 81       	ldd	r19, Z+7	; 0x07
     5ca:	21 50       	subi	r18, 0x01	; 1
     5cc:	31 09       	sbc	r19, r1
     5ce:	37 83       	std	Z+7, r19	; 0x07
     5d0:	26 83       	std	Z+6, r18	; 0x06
  ATOMIC_SECTION_LEAVE
     5d2:	4f bf       	out	0x3f, r20	; 63
  PRAGMA(diag_default=Pa082);

  return byte;
}
     5d4:	08 95       	ret

000005d6 <__vector_26>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     5d6:	1f 92       	push	r1
     5d8:	0f 92       	push	r0
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	0f 92       	push	r0
     5de:	11 24       	eor	r1, r1
     5e0:	8f 93       	push	r24
     5e2:	ef 93       	push	r30
     5e4:	ff 93       	push	r31
  udrEmpty = true;
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	80 93 5b 02 	sts	0x025B, r24
  UCSRxB &= ~(1 << UDRIE1);
     5ec:	e1 ec       	ldi	r30, 0xC1	; 193
     5ee:	f0 e0       	ldi	r31, 0x00	; 0
     5f0:	80 81       	ld	r24, Z
     5f2:	8f 7d       	andi	r24, 0xDF	; 223
     5f4:	80 83       	st	Z, r24
}
     5f6:	ff 91       	pop	r31
     5f8:	ef 91       	pop	r30
     5fa:	8f 91       	pop	r24
     5fc:	0f 90       	pop	r0
     5fe:	0f be       	out	0x3f, r0	; 63
     600:	0f 90       	pop	r0
     602:	1f 90       	pop	r1
     604:	18 95       	reti

00000606 <__vector_25>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     606:	1f 92       	push	r1
     608:	0f 92       	push	r0
     60a:	0f b6       	in	r0, 0x3f	; 63
     60c:	0f 92       	push	r0
     60e:	11 24       	eor	r1, r1
     610:	2f 93       	push	r18
     612:	3f 93       	push	r19
     614:	4f 93       	push	r20
     616:	5f 93       	push	r21
     618:	6f 93       	push	r22
     61a:	7f 93       	push	r23
     61c:	8f 93       	push	r24
     61e:	9f 93       	push	r25
     620:	af 93       	push	r26
     622:	bf 93       	push	r27
     624:	ef 93       	push	r30
     626:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     628:	80 91 c0 00 	lds	r24, 0x00C0
  uint8_t byte = UDRx;
     62c:	20 91 c6 00 	lds	r18, 0x00C6

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     630:	8c 71       	andi	r24, 0x1C	; 28
     632:	59 f5       	brne	.+86     	; 0x68a <__vector_25+0x84>
  {
    if (rxFifo.bytes == rxFifo.size)
     634:	e7 e6       	ldi	r30, 0x67	; 103
     636:	f2 e0       	ldi	r31, 0x02	; 2
     638:	46 81       	ldd	r20, Z+6	; 0x06
     63a:	57 81       	ldd	r21, Z+7	; 0x07
     63c:	84 81       	ldd	r24, Z+4	; 0x04
     63e:	95 81       	ldd	r25, Z+5	; 0x05
     640:	48 17       	cp	r20, r24
     642:	59 07       	cpc	r21, r25
     644:	11 f1       	breq	.+68     	; 0x68a <__vector_25+0x84>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     646:	40 85       	ldd	r20, Z+8	; 0x08
     648:	51 85       	ldd	r21, Z+9	; 0x09
     64a:	82 81       	ldd	r24, Z+2	; 0x02
     64c:	93 81       	ldd	r25, Z+3	; 0x03
     64e:	bc 01       	movw	r22, r24
     650:	6f 5f       	subi	r22, 0xFF	; 255
     652:	7f 4f       	sbci	r23, 0xFF	; 255
     654:	73 83       	std	Z+3, r23	; 0x03
     656:	62 83       	std	Z+2, r22	; 0x02
     658:	da 01       	movw	r26, r20
     65a:	a8 0f       	add	r26, r24
     65c:	b9 1f       	adc	r27, r25
     65e:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
     660:	22 81       	ldd	r18, Z+2	; 0x02
     662:	33 81       	ldd	r19, Z+3	; 0x03
     664:	84 81       	ldd	r24, Z+4	; 0x04
     666:	95 81       	ldd	r25, Z+5	; 0x05
     668:	28 17       	cp	r18, r24
     66a:	39 07       	cpc	r19, r25
     66c:	21 f4       	brne	.+8      	; 0x676 <__vector_25+0x70>
      rxFifo.tail = 0;
     66e:	10 92 6a 02 	sts	0x026A, r1
     672:	10 92 69 02 	sts	0x0269, r1
    rxFifo.bytes++;
     676:	e7 e6       	ldi	r30, 0x67	; 103
     678:	f2 e0       	ldi	r31, 0x02	; 2
     67a:	86 81       	ldd	r24, Z+6	; 0x06
     67c:	97 81       	ldd	r25, Z+7	; 0x07
     67e:	01 96       	adiw	r24, 0x01	; 1
     680:	97 83       	std	Z+7, r25	; 0x07
     682:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	80 93 5a 02 	sts	0x025A, r24
  }

  PRAGMA(diag_default=Pa082);
}
     68a:	ff 91       	pop	r31
     68c:	ef 91       	pop	r30
     68e:	bf 91       	pop	r27
     690:	af 91       	pop	r26
     692:	9f 91       	pop	r25
     694:	8f 91       	pop	r24
     696:	7f 91       	pop	r23
     698:	6f 91       	pop	r22
     69a:	5f 91       	pop	r21
     69c:	4f 91       	pop	r20
     69e:	3f 91       	pop	r19
     6a0:	2f 91       	pop	r18
     6a2:	0f 90       	pop	r0
     6a4:	0f be       	out	0x3f, r0	; 63
     6a6:	0f 90       	pop	r0
     6a8:	1f 90       	pop	r1
     6aa:	18 95       	reti

000006ac <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
     6ac:	80 91 82 02 	lds	r24, 0x0282
     6b0:	90 91 83 02 	lds	r25, 0x0283
     6b4:	00 97       	sbiw	r24, 0x00	; 0
     6b6:	69 f1       	breq	.+90     	; 0x712 <HAL_UartTaskHandler+0x66>
     6b8:	20 91 5b 02 	lds	r18, 0x025B
     6bc:	22 23       	and	r18, r18
     6be:	49 f1       	breq	.+82     	; 0x712 <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
     6c0:	ec e7       	ldi	r30, 0x7C	; 124
     6c2:	f2 e0       	ldi	r31, 0x02	; 2
     6c4:	60 85       	ldd	r22, Z+8	; 0x08
     6c6:	71 85       	ldd	r23, Z+9	; 0x09
     6c8:	20 81       	ld	r18, Z
     6ca:	31 81       	ldd	r19, Z+1	; 0x01
     6cc:	a9 01       	movw	r20, r18
     6ce:	4f 5f       	subi	r20, 0xFF	; 255
     6d0:	5f 4f       	sbci	r21, 0xFF	; 255
     6d2:	51 83       	std	Z+1, r21	; 0x01
     6d4:	40 83       	st	Z, r20
     6d6:	db 01       	movw	r26, r22
     6d8:	a2 0f       	add	r26, r18
     6da:	b3 1f       	adc	r27, r19
     6dc:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
     6de:	64 81       	ldd	r22, Z+4	; 0x04
     6e0:	75 81       	ldd	r23, Z+5	; 0x05
     6e2:	46 17       	cp	r20, r22
     6e4:	57 07       	cpc	r21, r23
     6e6:	21 f4       	brne	.+8      	; 0x6f0 <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
     6e8:	10 92 7d 02 	sts	0x027D, r1
     6ec:	10 92 7c 02 	sts	0x027C, r1
    txFifo.bytes--;
     6f0:	01 97       	sbiw	r24, 0x01	; 1
     6f2:	90 93 83 02 	sts	0x0283, r25
     6f6:	80 93 82 02 	sts	0x0282, r24

    ATOMIC_SECTION_ENTER
     6fa:	9f b7       	in	r25, 0x3f	; 63
     6fc:	f8 94       	cli
      UDRx = byte;
     6fe:	20 93 c6 00 	sts	0x00C6, r18
      UCSRxB |= (1 << UDRIE1);
     702:	e1 ec       	ldi	r30, 0xC1	; 193
     704:	f0 e0       	ldi	r31, 0x00	; 0
     706:	80 81       	ld	r24, Z
     708:	80 62       	ori	r24, 0x20	; 32
     70a:	80 83       	st	Z, r24
      udrEmpty = false;
     70c:	10 92 5b 02 	sts	0x025B, r1
    ATOMIC_SECTION_LEAVE
     710:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
     712:	2f b7       	in	r18, 0x3f	; 63
     714:	f8 94       	cli
      new = newData;
     716:	90 91 5a 02 	lds	r25, 0x025A
      newData = false;
     71a:	10 92 5a 02 	sts	0x025A, r1
      bytes = rxFifo.bytes;
     71e:	40 91 6d 02 	lds	r20, 0x026D
     722:	50 91 6e 02 	lds	r21, 0x026E
    ATOMIC_SECTION_LEAVE
     726:	2f bf       	out	0x3f, r18	; 63

    if (new)
     728:	99 23       	and	r25, r25
     72a:	19 f0       	breq	.+6      	; 0x732 <HAL_UartTaskHandler+0x86>
      HAL_UartBytesReceived(bytes);
     72c:	ca 01       	movw	r24, r20
     72e:	0e 94 bb 01 	call	0x376	; 0x376 <HAL_UartBytesReceived>
     732:	08 95       	ret

00000734 <NWK_Init>:
/*************************************************************************//**
  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
  nwkIb.nwkSeqNum = 0;
     734:	e8 e1       	ldi	r30, 0x18	; 24
     736:	f6 e0       	ldi	r31, 0x06	; 6
     738:	14 82       	std	Z+4, r1	; 0x04
  nwkIb.macSeqNum = 0;
     73a:	15 82       	std	Z+5, r1	; 0x05
  nwkIb.addr = 0;
     73c:	11 82       	std	Z+1, r1	; 0x01
     73e:	10 82       	st	Z, r1
  nwkIb.lock = 0;
     740:	17 a2       	std	Z+39, r1	; 0x27
     742:	16 a2       	std	Z+38, r1	; 0x26
     744:	ee e1       	ldi	r30, 0x1E	; 30
     746:	f6 e0       	ldi	r31, 0x06	; 6
     748:	8e e3       	ldi	r24, 0x3E	; 62
     74a:	96 e0       	ldi	r25, 0x06	; 6

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
    nwkIb.endpoint[i] = NULL;
     74c:	11 92       	st	Z+, r1
     74e:	11 92       	st	Z+, r1
  nwkIb.nwkSeqNum = 0;
  nwkIb.macSeqNum = 0;
  nwkIb.addr = 0;
  nwkIb.lock = 0;

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
     750:	e8 17       	cp	r30, r24
     752:	f9 07       	cpc	r31, r25
     754:	d9 f7       	brne	.-10     	; 0x74c <NWK_Init+0x18>
    nwkIb.endpoint[i] = NULL;

  nwkTxInit();
     756:	0e 94 3c 08 	call	0x1078	; 0x1078 <nwkTxInit>
  nwkRxInit();
     75a:	0e 94 71 05 	call	0xae2	; 0xae2 <nwkRxInit>
  nwkFrameInit();
     75e:	0e 94 c4 04 	call	0x988	; 0x988 <nwkFrameInit>
  nwkDataReqInit();
     762:	0e 94 f6 03 	call	0x7ec	; 0x7ec <nwkDataReqInit>
     766:	08 95       	ret

00000768 <NWK_SetAddr>:
  @brief Sets network address of the node
  @param[in] addr Adddress to set
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
  nwkIb.addr = addr;
     768:	90 93 19 06 	sts	0x0619, r25
     76c:	80 93 18 06 	sts	0x0618, r24
  PHY_SetShortAddr(addr);
     770:	0e 94 4b 0a 	call	0x1496	; 0x1496 <PHY_SetShortAddr>
     774:	08 95       	ret

00000776 <NWK_SetPanId>:
  @brief Sets network identifier (PAN) of the node
  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
  nwkIb.panId = panId;
     776:	90 93 1b 06 	sts	0x061B, r25
     77a:	80 93 1a 06 	sts	0x061A, r24
  PHY_SetPanId(panId);
     77e:	0e 94 3a 0a 	call	0x1474	; 0x1474 <PHY_SetPanId>
     782:	08 95       	ret

00000784 <NWK_OpenEndpoint>:
  @param[in] id Endpoint index (1-15)
  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
  nwkIb.endpoint[id] = handler;
     784:	e8 2f       	mov	r30, r24
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	ee 0f       	add	r30, r30
     78a:	ff 1f       	adc	r31, r31
     78c:	e2 5e       	subi	r30, 0xE2	; 226
     78e:	f9 4f       	sbci	r31, 0xF9	; 249
     790:	71 83       	std	Z+1, r23	; 0x01
     792:	60 83       	st	Z, r22
     794:	08 95       	ret

00000796 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     796:	0e 94 bb 05 	call	0xb76	; 0xb76 <nwkRxTaskHandler>
  nwkTxTaskHandler();
     79a:	0e 94 3c 09 	call	0x1278	; 0x1278 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     79e:	0e 94 1f 04 	call	0x83e	; 0x83e <nwkDataReqTaskHandler>
     7a2:	08 95       	ret

000007a4 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     7a4:	e0 91 86 02 	lds	r30, 0x0286
     7a8:	f0 91 87 02 	lds	r31, 0x0287
     7ac:	30 97       	sbiw	r30, 0x00	; 0
     7ae:	d9 f0       	breq	.+54     	; 0x7e6 <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
     7b0:	22 81       	ldd	r18, Z+2	; 0x02
     7b2:	33 81       	ldd	r19, Z+3	; 0x03
     7b4:	28 17       	cp	r18, r24
     7b6:	39 07       	cpc	r19, r25
     7b8:	89 f4       	brne	.+34     	; 0x7dc <nwkDataReqTxConf+0x38>
     7ba:	05 c0       	rjmp	.+10     	; 0x7c6 <nwkDataReqTxConf+0x22>
     7bc:	22 81       	ldd	r18, Z+2	; 0x02
     7be:	33 81       	ldd	r19, Z+3	; 0x03
     7c0:	28 17       	cp	r18, r24
     7c2:	39 07       	cpc	r19, r25
     7c4:	59 f4       	brne	.+22     	; 0x7dc <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
     7c6:	dc 01       	movw	r26, r24
     7c8:	ad 57       	subi	r26, 0x7D	; 125
     7ca:	bf 4f       	sbci	r27, 0xFF	; 255
     7cc:	2c 91       	ld	r18, X
     7ce:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     7d0:	13 96       	adiw	r26, 0x03	; 3
     7d2:	2c 91       	ld	r18, X
     7d4:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     7d6:	22 e0       	ldi	r18, 0x02	; 2
     7d8:	24 83       	std	Z+4, r18	; 0x04
      break;
     7da:	05 c0       	rjmp	.+10     	; 0x7e6 <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     7dc:	01 90       	ld	r0, Z+
     7de:	f0 81       	ld	r31, Z
     7e0:	e0 2d       	mov	r30, r0
     7e2:	30 97       	sbiw	r30, 0x00	; 0
     7e4:	59 f7       	brne	.-42     	; 0x7bc <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     7e6:	0e 94 06 05 	call	0xa0c	; 0xa0c <nwkFrameFree>
     7ea:	08 95       	ret

000007ec <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     7ec:	10 92 87 02 	sts	0x0287, r1
     7f0:	10 92 86 02 	sts	0x0286, r1
     7f4:	08 95       	ret

000007f6 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     7f6:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     7f8:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     7fa:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     7fc:	13 82       	std	Z+3, r1	; 0x03
     7fe:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     800:	a8 e1       	ldi	r26, 0x18	; 24
     802:	b6 e0       	ldi	r27, 0x06	; 6
     804:	96 96       	adiw	r26, 0x26	; 38
     806:	8d 91       	ld	r24, X+
     808:	9c 91       	ld	r25, X
     80a:	97 97       	sbiw	r26, 0x27	; 39
     80c:	01 96       	adiw	r24, 0x01	; 1
     80e:	97 96       	adiw	r26, 0x27	; 39
     810:	9c 93       	st	X, r25
     812:	8e 93       	st	-X, r24
     814:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
     816:	80 91 86 02 	lds	r24, 0x0286
     81a:	90 91 87 02 	lds	r25, 0x0287
     81e:	00 97       	sbiw	r24, 0x00	; 0
     820:	39 f4       	brne	.+14     	; 0x830 <NWK_DataReq+0x3a>
  {
    req->next = NULL;
     822:	11 82       	std	Z+1, r1	; 0x01
     824:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     826:	f0 93 87 02 	sts	0x0287, r31
     82a:	e0 93 86 02 	sts	0x0286, r30
     82e:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
     830:	91 83       	std	Z+1, r25	; 0x01
     832:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
     834:	f0 93 87 02 	sts	0x0287, r31
     838:	e0 93 86 02 	sts	0x0286, r30
     83c:	08 95       	ret

0000083e <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     83e:	0f 93       	push	r16
     840:	1f 93       	push	r17
     842:	cf 93       	push	r28
     844:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     846:	e0 91 86 02 	lds	r30, 0x0286
     84a:	f0 91 87 02 	lds	r31, 0x0287
     84e:	30 97       	sbiw	r30, 0x00	; 0
     850:	09 f4       	brne	.+2      	; 0x854 <nwkDataReqTaskHandler+0x16>
     852:	95 c0       	rjmp	.+298    	; 0x97e <nwkDataReqTaskHandler+0x140>
     854:	ef 01       	movw	r28, r30
  {
    switch (req->state)
     856:	8c 81       	ldd	r24, Y+4	; 0x04
     858:	88 23       	and	r24, r24
     85a:	21 f0       	breq	.+8      	; 0x864 <nwkDataReqTaskHandler+0x26>
     85c:	82 30       	cpi	r24, 0x02	; 2
     85e:	09 f4       	brne	.+2      	; 0x862 <nwkDataReqTaskHandler+0x24>
     860:	68 c0       	rjmp	.+208    	; 0x932 <nwkDataReqTaskHandler+0xf4>
     862:	87 c0       	rjmp	.+270    	; 0x972 <nwkDataReqTaskHandler+0x134>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     864:	0e 94 cf 04 	call	0x99e	; 0x99e <nwkFrameAlloc>
     868:	8c 01       	movw	r16, r24
     86a:	00 97       	sbiw	r24, 0x00	; 0
     86c:	21 f4       	brne	.+8      	; 0x876 <nwkDataReqTaskHandler+0x38>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     86e:	82 e0       	ldi	r24, 0x02	; 2
     870:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     872:	8f 87       	std	Y+15, r24	; 0x0f
     874:	84 c0       	rjmp	.+264    	; 0x97e <nwkDataReqTaskHandler+0x140>
    return;
  }

  req->frame = frame;
     876:	9b 83       	std	Y+3, r25	; 0x03
     878:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     87e:	f8 01       	movw	r30, r16
     880:	e9 57       	subi	r30, 0x79	; 121
     882:	ff 4f       	sbci	r31, 0xFF	; 255
     884:	82 ed       	ldi	r24, 0xD2	; 210
     886:	93 e0       	ldi	r25, 0x03	; 3
     888:	91 83       	std	Z+1, r25	; 0x01
     88a:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     88c:	31 97       	sbiw	r30, 0x01	; 1
     88e:	89 85       	ldd	r24, Y+9	; 0x09
     890:	82 fb       	bst	r24, 2
     892:	88 27       	eor	r24, r24
     894:	80 f9       	bld	r24, 0
     896:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     898:	99 85       	ldd	r25, Y+9	; 0x09
     89a:	d8 01       	movw	r26, r16
     89c:	1b 96       	adiw	r26, 0x0b	; 11
     89e:	8c 91       	ld	r24, X
     8a0:	1b 97       	sbiw	r26, 0x0b	; 11
     8a2:	90 fb       	bst	r25, 0
     8a4:	80 f9       	bld	r24, 0
     8a6:	1b 96       	adiw	r26, 0x0b	; 11
     8a8:	8c 93       	st	X, r24
     8aa:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     8ac:	99 85       	ldd	r25, Y+9	; 0x09
     8ae:	93 fb       	bst	r25, 3
     8b0:	99 27       	eor	r25, r25
     8b2:	90 f9       	bld	r25, 0
     8b4:	90 fb       	bst	r25, 0
     8b6:	82 f9       	bld	r24, 2
     8b8:	1b 96       	adiw	r26, 0x0b	; 11
     8ba:	8c 93       	st	X, r24
     8bc:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     8be:	e8 e1       	ldi	r30, 0x18	; 24
     8c0:	f6 e0       	ldi	r31, 0x06	; 6
     8c2:	84 81       	ldd	r24, Z+4	; 0x04
     8c4:	8f 5f       	subi	r24, 0xFF	; 255
     8c6:	84 83       	std	Z+4, r24	; 0x04
     8c8:	1c 96       	adiw	r26, 0x0c	; 12
     8ca:	8c 93       	st	X, r24
     8cc:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
     8ce:	80 81       	ld	r24, Z
     8d0:	91 81       	ldd	r25, Z+1	; 0x01
     8d2:	1e 96       	adiw	r26, 0x0e	; 14
     8d4:	9c 93       	st	X, r25
     8d6:	8e 93       	st	-X, r24
     8d8:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
     8da:	8d 81       	ldd	r24, Y+5	; 0x05
     8dc:	9e 81       	ldd	r25, Y+6	; 0x06
     8de:	50 96       	adiw	r26, 0x10	; 16
     8e0:	9c 93       	st	X, r25
     8e2:	8e 93       	st	-X, r24
     8e4:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     8e6:	88 85       	ldd	r24, Y+8	; 0x08
     8e8:	98 2f       	mov	r25, r24
     8ea:	9f 70       	andi	r25, 0x0F	; 15
     8ec:	51 96       	adiw	r26, 0x11	; 17
     8ee:	8c 91       	ld	r24, X
     8f0:	51 97       	sbiw	r26, 0x11	; 17
     8f2:	80 7f       	andi	r24, 0xF0	; 240
     8f4:	89 2b       	or	r24, r25
     8f6:	51 96       	adiw	r26, 0x11	; 17
     8f8:	8c 93       	st	X, r24
     8fa:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     8fc:	9f 81       	ldd	r25, Y+7	; 0x07
     8fe:	92 95       	swap	r25
     900:	90 7f       	andi	r25, 0xF0	; 240
     902:	8f 70       	andi	r24, 0x0F	; 15
     904:	89 2b       	or	r24, r25
     906:	51 96       	adiw	r26, 0x11	; 17
     908:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
     90a:	f8 01       	movw	r30, r16
     90c:	ef 57       	subi	r30, 0x7F	; 127
     90e:	ff 4f       	sbci	r31, 0xFF	; 255
     910:	4c 85       	ldd	r20, Y+12	; 0x0c
     912:	50 e0       	ldi	r21, 0x00	; 0
     914:	6a 85       	ldd	r22, Y+10	; 0x0a
     916:	7b 85       	ldd	r23, Y+11	; 0x0b
     918:	80 81       	ld	r24, Z
     91a:	91 81       	ldd	r25, Z+1	; 0x01
     91c:	0e 94 67 11 	call	0x22ce	; 0x22ce <memcpy>
  frame->size += req->size;
     920:	f8 01       	movw	r30, r16
     922:	91 81       	ldd	r25, Z+1	; 0x01
     924:	8c 85       	ldd	r24, Y+12	; 0x0c
     926:	89 0f       	add	r24, r25
     928:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
     92a:	c8 01       	movw	r24, r16
     92c:	0e 94 5f 08 	call	0x10be	; 0x10be <nwkTxFrame>
     930:	26 c0       	rjmp	.+76     	; 0x97e <nwkDataReqTaskHandler+0x140>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
     932:	ce 17       	cp	r28, r30
     934:	df 07       	cpc	r29, r31
     936:	41 f4       	brne	.+16     	; 0x948 <nwkDataReqTaskHandler+0x10a>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     938:	88 81       	ld	r24, Y
     93a:	99 81       	ldd	r25, Y+1	; 0x01
     93c:	90 93 87 02 	sts	0x0287, r25
     940:	80 93 86 02 	sts	0x0286, r24
     944:	0a c0       	rjmp	.+20     	; 0x95a <nwkDataReqTaskHandler+0x11c>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
     946:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     948:	80 81       	ld	r24, Z
     94a:	91 81       	ldd	r25, Z+1	; 0x01
     94c:	c8 17       	cp	r28, r24
     94e:	d9 07       	cpc	r29, r25
     950:	d1 f7       	brne	.-12     	; 0x946 <nwkDataReqTaskHandler+0x108>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     952:	88 81       	ld	r24, Y
     954:	99 81       	ldd	r25, Y+1	; 0x01
     956:	91 83       	std	Z+1, r25	; 0x01
     958:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
     95a:	e8 e1       	ldi	r30, 0x18	; 24
     95c:	f6 e0       	ldi	r31, 0x06	; 6
     95e:	86 a1       	ldd	r24, Z+38	; 0x26
     960:	97 a1       	ldd	r25, Z+39	; 0x27
     962:	01 97       	sbiw	r24, 0x01	; 1
     964:	97 a3       	std	Z+39, r25	; 0x27
     966:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
     968:	ed 85       	ldd	r30, Y+13	; 0x0d
     96a:	fe 85       	ldd	r31, Y+14	; 0x0e
     96c:	ce 01       	movw	r24, r28
     96e:	09 95       	icall
     970:	06 c0       	rjmp	.+12     	; 0x97e <nwkDataReqTaskHandler+0x140>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     972:	09 90       	ld	r0, Y+
     974:	d8 81       	ld	r29, Y
     976:	c0 2d       	mov	r28, r0
     978:	20 97       	sbiw	r28, 0x00	; 0
     97a:	09 f0       	breq	.+2      	; 0x97e <nwkDataReqTaskHandler+0x140>
     97c:	6c cf       	rjmp	.-296    	; 0x856 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	08 95       	ret

00000988 <nwkFrameInit>:
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     988:	10 92 88 02 	sts	0x0288, r1
     98c:	10 92 11 03 	sts	0x0311, r1
     990:	10 92 9a 03 	sts	0x039A, r1
     994:	10 92 23 04 	sts	0x0423, r1
     998:	10 92 ac 04 	sts	0x04AC, r1
     99c:	08 95       	ret

0000099e <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     99e:	80 91 88 02 	lds	r24, 0x0288
     9a2:	88 23       	and	r24, r24
     9a4:	49 f0       	breq	.+18     	; 0x9b8 <nwkFrameAlloc+0x1a>
     9a6:	e1 e1       	ldi	r30, 0x11	; 17
     9a8:	f3 e0       	ldi	r31, 0x03	; 3
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	ac 01       	movw	r20, r24
     9b0:	20 81       	ld	r18, Z
     9b2:	21 11       	cpse	r18, r1
     9b4:	22 c0       	rjmp	.+68     	; 0x9fa <nwkFrameAlloc+0x5c>
     9b6:	02 c0       	rjmp	.+4      	; 0x9bc <nwkFrameAlloc+0x1e>
     9b8:	40 e0       	ldi	r20, 0x00	; 0
     9ba:	50 e0       	ldi	r21, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     9bc:	69 e8       	ldi	r22, 0x89	; 137
     9be:	64 9f       	mul	r22, r20
     9c0:	90 01       	movw	r18, r0
     9c2:	65 9f       	mul	r22, r21
     9c4:	30 0d       	add	r19, r0
     9c6:	11 24       	eor	r1, r1
     9c8:	c9 01       	movw	r24, r18
     9ca:	88 57       	subi	r24, 0x78	; 120
     9cc:	9d 4f       	sbci	r25, 0xFD	; 253
     9ce:	fc 01       	movw	r30, r24
     9d0:	11 92       	st	Z+, r1
     9d2:	6a 95       	dec	r22
     9d4:	e9 f7       	brne	.-6      	; 0x9d0 <nwkFrameAlloc+0x32>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     9d6:	40 e1       	ldi	r20, 0x10	; 16
     9d8:	fc 01       	movw	r30, r24
     9da:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
     9dc:	ef 57       	subi	r30, 0x7F	; 127
     9de:	ff 4f       	sbci	r31, 0xFF	; 255
     9e0:	26 56       	subi	r18, 0x66	; 102
     9e2:	3d 4f       	sbci	r19, 0xFD	; 253
     9e4:	31 83       	std	Z+1, r19	; 0x01
     9e6:	20 83       	st	Z, r18
      nwkIb.lock++;
     9e8:	e8 e1       	ldi	r30, 0x18	; 24
     9ea:	f6 e0       	ldi	r31, 0x06	; 6
     9ec:	26 a1       	ldd	r18, Z+38	; 0x26
     9ee:	37 a1       	ldd	r19, Z+39	; 0x27
     9f0:	2f 5f       	subi	r18, 0xFF	; 255
     9f2:	3f 4f       	sbci	r19, 0xFF	; 255
     9f4:	37 a3       	std	Z+39, r19	; 0x27
     9f6:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
     9f8:	08 95       	ret
     9fa:	01 96       	adiw	r24, 0x01	; 1
     9fc:	e7 57       	subi	r30, 0x77	; 119
     9fe:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     a00:	85 30       	cpi	r24, 0x05	; 5
     a02:	91 05       	cpc	r25, r1
     a04:	a1 f6       	brne	.-88     	; 0x9ae <nwkFrameAlloc+0x10>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
     a06:	80 e0       	ldi	r24, 0x00	; 0
     a08:	90 e0       	ldi	r25, 0x00	; 0
}
     a0a:	08 95       	ret

00000a0c <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
     a0c:	fc 01       	movw	r30, r24
     a0e:	10 82       	st	Z, r1
  nwkIb.lock--;
     a10:	e8 e1       	ldi	r30, 0x18	; 24
     a12:	f6 e0       	ldi	r31, 0x06	; 6
     a14:	86 a1       	ldd	r24, Z+38	; 0x26
     a16:	97 a1       	ldd	r25, Z+39	; 0x27
     a18:	01 97       	sbiw	r24, 0x01	; 1
     a1a:	97 a3       	std	Z+39, r25	; 0x27
     a1c:	86 a3       	std	Z+38, r24	; 0x26
     a1e:	08 95       	ret

00000a20 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     a20:	00 97       	sbiw	r24, 0x00	; 0
     a22:	41 f0       	breq	.+16     	; 0xa34 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     a24:	fc 01       	movw	r30, r24
     a26:	e7 57       	subi	r30, 0x77	; 119
     a28:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     a2a:	85 e0       	ldi	r24, 0x05	; 5
     a2c:	e5 33       	cpi	r30, 0x35	; 53
     a2e:	f8 07       	cpc	r31, r24
     a30:	18 f0       	brcs	.+6      	; 0xa38 <nwkFrameNext+0x18>
     a32:	15 c0       	rjmp	.+42     	; 0xa5e <nwkFrameNext+0x3e>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     a34:	e8 e8       	ldi	r30, 0x88	; 136
     a36:	f2 e0       	ldi	r31, 0x02	; 2
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     a38:	80 81       	ld	r24, Z
     a3a:	88 23       	and	r24, r24
     a3c:	39 f0       	breq	.+14     	; 0xa4c <nwkFrameNext+0x2c>
     a3e:	03 c0       	rjmp	.+6      	; 0xa46 <nwkFrameNext+0x26>
     a40:	80 81       	ld	r24, Z
     a42:	88 23       	and	r24, r24
     a44:	19 f0       	breq	.+6      	; 0xa4c <nwkFrameNext+0x2c>
      return frame;
     a46:	8e 2f       	mov	r24, r30
     a48:	9f 2f       	mov	r25, r31
     a4a:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     a4c:	e7 57       	subi	r30, 0x77	; 119
     a4e:	ff 4f       	sbci	r31, 0xFF	; 255
     a50:	85 e0       	ldi	r24, 0x05	; 5
     a52:	e5 33       	cpi	r30, 0x35	; 53
     a54:	f8 07       	cpc	r31, r24
     a56:	a0 f3       	brcs	.-24     	; 0xa40 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	08 95       	ret
     a5e:	80 e0       	ldi	r24, 0x00	; 0
     a60:	90 e0       	ldi	r25, 0x00	; 0
}
     a62:	08 95       	ret

00000a64 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     a64:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
     a66:	dc 01       	movw	r26, r24
     a68:	ad 57       	subi	r26, 0x7D	; 125
     a6a:	bf 4f       	sbci	r27, 0xFF	; 255
     a6c:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     a6e:	a8 e1       	ldi	r26, 0x18	; 24
     a70:	b6 e0       	ldi	r27, 0x06	; 6
     a72:	14 96       	adiw	r26, 0x04	; 4
     a74:	9c 91       	ld	r25, X
     a76:	14 97       	sbiw	r26, 0x04	; 4
     a78:	9f 5f       	subi	r25, 0xFF	; 255
     a7a:	14 96       	adiw	r26, 0x04	; 4
     a7c:	9c 93       	st	X, r25
     a7e:	14 97       	sbiw	r26, 0x04	; 4
     a80:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     a82:	8d 91       	ld	r24, X+
     a84:	9c 91       	ld	r25, X
     a86:	96 87       	std	Z+14, r25	; 0x0e
     a88:	85 87       	std	Z+13, r24	; 0x0d
     a8a:	08 95       	ret

00000a8c <nwkRxServiceDataInd>:
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
     a8c:	dc 01       	movw	r26, r24
     a8e:	19 96       	adiw	r26, 0x09	; 9
     a90:	2c 91       	ld	r18, X
     a92:	19 97       	sbiw	r26, 0x09	; 9
     a94:	22 23       	and	r18, r18
     a96:	51 f0       	breq	.+20     	; 0xaac <nwkRxServiceDataInd+0x20>
    return false;

  switch (ind->data[0])
     a98:	17 96       	adiw	r26, 0x07	; 7
     a9a:	ed 91       	ld	r30, X+
     a9c:	fc 91       	ld	r31, X
     a9e:	18 97       	sbiw	r26, 0x08	; 8
     aa0:	20 81       	ld	r18, Z
     aa2:	21 11       	cpse	r18, r1
     aa4:	05 c0       	rjmp	.+10     	; 0xab0 <nwkRxServiceDataInd+0x24>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
     aa6:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <nwkTxAckReceived>
     aaa:	08 95       	ret
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    return false;
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	08 95       	ret
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
     ab0:	80 e0       	ldi	r24, 0x00	; 0
  }
}
     ab2:	08 95       	ret

00000ab4 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
     ab4:	bc 01       	movw	r22, r24
     ab6:	e7 e4       	ldi	r30, 0x47	; 71
     ab8:	f5 e0       	ldi	r31, 0x05	; 5
     aba:	29 e7       	ldi	r18, 0x79	; 121
     abc:	35 e0       	ldi	r19, 0x05	; 5
  bool restart = false;
     abe:	40 e0       	ldi	r20, 0x00	; 0
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
     ac0:	51 e0       	ldi	r21, 0x01	; 1
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
     ac2:	90 81       	ld	r25, Z
     ac4:	99 23       	and	r25, r25
     ac6:	19 f0       	breq	.+6      	; 0xace <nwkRxDuplicateRejectionTimerHandler+0x1a>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
     ac8:	91 50       	subi	r25, 0x01	; 1
     aca:	90 83       	st	Z, r25
      restart = true;
     acc:	45 2f       	mov	r20, r21
     ace:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     ad0:	e2 17       	cp	r30, r18
     ad2:	f3 07       	cpc	r31, r19
     ad4:	b1 f7       	brne	.-20     	; 0xac2 <nwkRxDuplicateRejectionTimerHandler+0xe>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
     ad6:	44 23       	and	r20, r20
     ad8:	19 f0       	breq	.+6      	; 0xae0 <nwkRxDuplicateRejectionTimerHandler+0x2c>
     ada:	cb 01       	movw	r24, r22
    SYS_TimerStart(timer);
     adc:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <SYS_TimerStart>
     ae0:	08 95       	ret

00000ae2 <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
     ae2:	e7 e4       	ldi	r30, 0x47	; 71
     ae4:	f5 e0       	ldi	r31, 0x05	; 5
     ae6:	89 e7       	ldi	r24, 0x79	; 121
     ae8:	95 e0       	ldi	r25, 0x05	; 5
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
     aea:	10 82       	st	Z, r1
     aec:	35 96       	adiw	r30, 0x05	; 5
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     aee:	e8 17       	cp	r30, r24
     af0:	f9 07       	cpc	r31, r25
     af2:	d9 f7       	brne	.-10     	; 0xaea <nwkRxInit+0x8>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
     af4:	e5 e3       	ldi	r30, 0x35	; 53
     af6:	f5 e0       	ldi	r31, 0x05	; 5
     af8:	84 e6       	ldi	r24, 0x64	; 100
     afa:	90 e0       	ldi	r25, 0x00	; 0
     afc:	a0 e0       	ldi	r26, 0x00	; 0
     afe:	b0 e0       	ldi	r27, 0x00	; 0
     b00:	86 83       	std	Z+6, r24	; 0x06
     b02:	97 83       	std	Z+7, r25	; 0x07
     b04:	a0 87       	std	Z+8, r26	; 0x08
     b06:	b1 87       	std	Z+9, r27	; 0x09
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
     b08:	12 86       	std	Z+10, r1	; 0x0a
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
     b0a:	8a e5       	ldi	r24, 0x5A	; 90
     b0c:	95 e0       	ldi	r25, 0x05	; 5
     b0e:	94 87       	std	Z+12, r25	; 0x0c
     b10:	83 87       	std	Z+11, r24	; 0x0b

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
     b12:	66 e4       	ldi	r22, 0x46	; 70
     b14:	75 e0       	ldi	r23, 0x05	; 5
     b16:	80 e0       	ldi	r24, 0x00	; 0
     b18:	0e 94 c2 03 	call	0x784	; 0x784 <NWK_OpenEndpoint>
     b1c:	08 95       	ret

00000b1e <PHY_DataInd>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
     b1e:	cf 93       	push	r28
     b20:	df 93       	push	r29
  NwkFrame_t *frame;

  if (0x88 != ind->data[1] || (0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
     b22:	dc 01       	movw	r26, r24
     b24:	ed 91       	ld	r30, X+
     b26:	fc 91       	ld	r31, X
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 81       	ldd	r18, Z+1	; 0x01
     b2c:	28 38       	cpi	r18, 0x88	; 136
     b2e:	01 f5       	brne	.+64     	; 0xb70 <PHY_DataInd+0x52>
     b30:	20 81       	ld	r18, Z
     b32:	2f 7d       	andi	r18, 0xDF	; 223
     b34:	21 34       	cpi	r18, 0x41	; 65
     b36:	e1 f4       	brne	.+56     	; 0xb70 <PHY_DataInd+0x52>
     b38:	12 96       	adiw	r26, 0x02	; 2
     b3a:	2c 91       	ld	r18, X
     b3c:	20 31       	cpi	r18, 0x10	; 16
     b3e:	c0 f0       	brcs	.+48     	; 0xb70 <PHY_DataInd+0x52>
     b40:	ec 01       	movw	r28, r24
      ind->size < sizeof(NwkFrameHeader_t))
    return;

  if (NULL == (frame = nwkFrameAlloc()))
     b42:	0e 94 cf 04 	call	0x99e	; 0x99e <nwkFrameAlloc>
     b46:	00 97       	sbiw	r24, 0x00	; 0
     b48:	99 f0       	breq	.+38     	; 0xb70 <PHY_DataInd+0x52>
    return;

  frame->state = NWK_RX_STATE_RECEIVED;
     b4a:	20 e2       	ldi	r18, 0x20	; 32
     b4c:	fc 01       	movw	r30, r24
     b4e:	20 83       	st	Z, r18
  frame->size = ind->size;
     b50:	2a 81       	ldd	r18, Y+2	; 0x02
     b52:	21 83       	std	Z+1, r18	; 0x01
  frame->rx.lqi = ind->lqi;
     b54:	2b 81       	ldd	r18, Y+3	; 0x03
     b56:	ed 57       	subi	r30, 0x7D	; 125
     b58:	ff 4f       	sbci	r31, 0xFF	; 255
     b5a:	20 83       	st	Z, r18
  frame->rx.rssi = ind->rssi;
     b5c:	2c 81       	ldd	r18, Y+4	; 0x04
     b5e:	31 96       	adiw	r30, 0x01	; 1
     b60:	20 83       	st	Z, r18
  memcpy(frame->data, ind->data, ind->size);
     b62:	4a 81       	ldd	r20, Y+2	; 0x02
     b64:	50 e0       	ldi	r21, 0x00	; 0
     b66:	68 81       	ld	r22, Y
     b68:	79 81       	ldd	r23, Y+1	; 0x01
     b6a:	02 96       	adiw	r24, 0x02	; 2
     b6c:	0e 94 67 11 	call	0x22ce	; 0x22ce <memcpy>
}
     b70:	df 91       	pop	r29
     b72:	cf 91       	pop	r28
     b74:	08 95       	ret

00000b76 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     b76:	2f 92       	push	r2
     b78:	3f 92       	push	r3
     b7a:	4f 92       	push	r4
     b7c:	5f 92       	push	r5
     b7e:	6f 92       	push	r6
     b80:	7f 92       	push	r7
     b82:	8f 92       	push	r8
     b84:	9f 92       	push	r9
     b86:	af 92       	push	r10
     b88:	bf 92       	push	r11
     b8a:	cf 92       	push	r12
     b8c:	df 92       	push	r13
     b8e:	ef 92       	push	r14
     b90:	ff 92       	push	r15
     b92:	0f 93       	push	r16
     b94:	1f 93       	push	r17
     b96:	cf 93       	push	r28
     b98:	df 93       	push	r29
     b9a:	cd b7       	in	r28, 0x3d	; 61
     b9c:	de b7       	in	r29, 0x3e	; 62
     b9e:	2c 97       	sbiw	r28, 0x0c	; 12
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	de bf       	out	0x3e, r29	; 62
     ba6:	0f be       	out	0x3f, r0	; 63
     ba8:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
     baa:	00 e0       	ldi	r16, 0x00	; 0
     bac:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     bae:	0f 2e       	mov	r0, r31
     bb0:	f4 e2       	ldi	r31, 0x24	; 36
     bb2:	df 2e       	mov	r13, r31
     bb4:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     bb6:	0f 2e       	mov	r0, r31
     bb8:	f8 e1       	ldi	r31, 0x18	; 24
     bba:	8f 2e       	mov	r8, r31
     bbc:	f6 e0       	ldi	r31, 0x06	; 6
     bbe:	9f 2e       	mov	r9, r31
     bc0:	f0 2d       	mov	r31, r0
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     bc2:	68 94       	set
     bc4:	cc 24       	eor	r12, r12
     bc6:	c4 f8       	bld	r12, 4
     bc8:	0f 2e       	mov	r0, r31
     bca:	f7 e4       	ldi	r31, 0x47	; 71
     bcc:	4f 2e       	mov	r4, r31
     bce:	f5 e0       	ldi	r31, 0x05	; 5
     bd0:	5f 2e       	mov	r5, r31
     bd2:	f0 2d       	mov	r31, r0
     bd4:	0f 2e       	mov	r0, r31
     bd6:	f3 e4       	ldi	r31, 0x43	; 67
     bd8:	6f 2e       	mov	r6, r31
     bda:	f5 e0       	ldi	r31, 0x05	; 5
     bdc:	7f 2e       	mov	r7, r31
     bde:	f0 2d       	mov	r31, r0
     be0:	0f 2e       	mov	r0, r31
     be2:	f5 e7       	ldi	r31, 0x75	; 117
     be4:	ef 2e       	mov	r14, r31
     be6:	f5 e0       	ldi	r31, 0x05	; 5
     be8:	ff 2e       	mov	r15, r31
     bea:	f0 2d       	mov	r31, r0
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
     bec:	31 2c       	mov	r3, r1
     bee:	21 2c       	mov	r2, r1
     bf0:	58 01       	movw	r10, r16
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     bf2:	a8 c1       	rjmp	.+848    	; 0xf44 <nwkRxTaskHandler+0x3ce>
  {
    switch (frame->state)
     bf4:	d5 01       	movw	r26, r10
     bf6:	8c 91       	ld	r24, X
     bf8:	82 32       	cpi	r24, 0x22	; 34
     bfa:	09 f4       	brne	.+2      	; 0xbfe <nwkRxTaskHandler+0x88>
     bfc:	d1 c0       	rjmp	.+418    	; 0xda0 <nwkRxTaskHandler+0x22a>
     bfe:	84 32       	cpi	r24, 0x24	; 36
     c00:	09 f4       	brne	.+2      	; 0xc04 <nwkRxTaskHandler+0x8e>
     c02:	9d c1       	rjmp	.+826    	; 0xf3e <nwkRxTaskHandler+0x3c8>
     c04:	80 32       	cpi	r24, 0x20	; 32
     c06:	09 f0       	breq	.+2      	; 0xc0a <nwkRxTaskHandler+0x94>
     c08:	9d c1       	rjmp	.+826    	; 0xf44 <nwkRxTaskHandler+0x3ce>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
     c0a:	dc 92       	st	X, r13

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
     c0c:	1b 96       	adiw	r26, 0x0b	; 11
     c0e:	8c 91       	ld	r24, X
     c10:	1b 97       	sbiw	r26, 0x0b	; 11
     c12:	98 2f       	mov	r25, r24
     c14:	9a 70       	andi	r25, 0x0A	; 10

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
     c16:	09 f0       	breq	.+2      	; 0xc1a <nwkRxTaskHandler+0xa4>
     c18:	95 c1       	rjmp	.+810    	; 0xf44 <nwkRxTaskHandler+0x3ce>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     c1a:	15 96       	adiw	r26, 0x05	; 5
     c1c:	2d 91       	ld	r18, X+
     c1e:	3c 91       	ld	r19, X
     c20:	16 97       	sbiw	r26, 0x06	; 6
     c22:	2f 3f       	cpi	r18, 0xFF	; 255
     c24:	3f 4f       	sbci	r19, 0xFF	; 255
     c26:	81 f4       	brne	.+32     	; 0xc48 <nwkRxTaskHandler+0xd2>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     c28:	f5 01       	movw	r30, r10
     c2a:	87 85       	ldd	r24, Z+15	; 0x0f
     c2c:	90 89       	ldd	r25, Z+16	; 0x10
     c2e:	d4 01       	movw	r26, r8
     c30:	2d 91       	ld	r18, X+
     c32:	3c 91       	ld	r19, X
     c34:	28 17       	cp	r18, r24
     c36:	39 07       	cpc	r19, r25
     c38:	19 f0       	breq	.+6      	; 0xc40 <nwkRxTaskHandler+0xca>
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	09 f0       	breq	.+2      	; 0xc40 <nwkRxTaskHandler+0xca>
     c3e:	82 c1       	rjmp	.+772    	; 0xf44 <nwkRxTaskHandler+0x3ce>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     c40:	22 e2       	ldi	r18, 0x22	; 34
     c42:	f5 01       	movw	r30, r10
     c44:	20 83       	st	Z, r18
     c46:	7e c1       	rjmp	.+764    	; 0xf44 <nwkRxTaskHandler+0x3ce>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
     c48:	d5 01       	movw	r26, r10
     c4a:	1f 96       	adiw	r26, 0x0f	; 15
     c4c:	2d 91       	ld	r18, X+
     c4e:	3c 91       	ld	r19, X
     c50:	50 97       	sbiw	r26, 0x10	; 16
     c52:	2f 3f       	cpi	r18, 0xFF	; 255
     c54:	3f 4f       	sbci	r19, 0xFF	; 255
     c56:	09 f0       	breq	.+2      	; 0xc5a <nwkRxTaskHandler+0xe4>
     c58:	7d c1       	rjmp	.+762    	; 0xf54 <nwkRxTaskHandler+0x3de>
     c5a:	80 ff       	sbrs	r24, 0
     c5c:	7b c1       	rjmp	.+758    	; 0xf54 <nwkRxTaskHandler+0x3de>
     c5e:	72 c1       	rjmp	.+740    	; 0xf44 <nwkRxTaskHandler+0x3ce>
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
     c60:	8c 01       	movw	r16, r24

    if (entry->ttl && header->nwkSrcAddr == entry->src)
     c62:	2c 91       	ld	r18, X
     c64:	22 23       	and	r18, r18
     c66:	09 f4       	brne	.+2      	; 0xc6a <nwkRxTaskHandler+0xf4>
     c68:	56 c0       	rjmp	.+172    	; 0xd16 <nwkRxTaskHandler+0x1a0>
     c6a:	20 81       	ld	r18, Z
     c6c:	31 81       	ldd	r19, Z+1	; 0x01
     c6e:	42 17       	cp	r20, r18
     c70:	53 07       	cpc	r21, r19
     c72:	09 f0       	breq	.+2      	; 0xc76 <nwkRxTaskHandler+0x100>
     c74:	51 c0       	rjmp	.+162    	; 0xd18 <nwkRxTaskHandler+0x1a2>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
     c76:	f5 01       	movw	r30, r10
     c78:	94 85       	ldd	r25, Z+12	; 0x0c
     c7a:	f8 01       	movw	r30, r16
     c7c:	ee 0f       	add	r30, r30
     c7e:	ff 1f       	adc	r31, r31
     c80:	ee 0f       	add	r30, r30
     c82:	ff 1f       	adc	r31, r31
     c84:	e0 0f       	add	r30, r16
     c86:	f1 1f       	adc	r31, r17
     c88:	ed 5b       	subi	r30, 0xBD	; 189
     c8a:	fa 4f       	sbci	r31, 0xFA	; 250
     c8c:	82 81       	ldd	r24, Z+2	; 0x02
     c8e:	89 1b       	sub	r24, r25

      if (diff < 8)
     c90:	88 30       	cpi	r24, 0x08	; 8
     c92:	38 f5       	brcc	.+78     	; 0xce2 <nwkRxTaskHandler+0x16c>
      {
        if (entry->mask & (1 << diff))
     c94:	f8 01       	movw	r30, r16
     c96:	ee 0f       	add	r30, r30
     c98:	ff 1f       	adc	r31, r31
     c9a:	ee 0f       	add	r30, r30
     c9c:	ff 1f       	adc	r31, r31
     c9e:	e0 0f       	add	r30, r16
     ca0:	f1 1f       	adc	r31, r17
     ca2:	ed 5b       	subi	r30, 0xBD	; 189
     ca4:	fa 4f       	sbci	r31, 0xFA	; 250
     ca6:	93 81       	ldd	r25, Z+3	; 0x03
     ca8:	29 2f       	mov	r18, r25
     caa:	30 e0       	ldi	r19, 0x00	; 0
     cac:	08 2e       	mov	r0, r24
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <nwkRxTaskHandler+0x13e>
     cb0:	35 95       	asr	r19
     cb2:	27 95       	ror	r18
     cb4:	0a 94       	dec	r0
     cb6:	e2 f7       	brpl	.-8      	; 0xcb0 <nwkRxTaskHandler+0x13a>
     cb8:	20 fd       	sbrc	r18, 0
     cba:	44 c1       	rjmp	.+648    	; 0xf44 <nwkRxTaskHandler+0x3ce>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     cbc:	f8 01       	movw	r30, r16
     cbe:	ee 0f       	add	r30, r30
     cc0:	ff 1f       	adc	r31, r31
     cc2:	ee 0f       	add	r30, r30
     cc4:	ff 1f       	adc	r31, r31
     cc6:	e0 0f       	add	r30, r16
     cc8:	f1 1f       	adc	r31, r17
     cca:	ed 5b       	subi	r30, 0xBD	; 189
     ccc:	fa 4f       	sbci	r31, 0xFA	; 250
     cce:	21 e0       	ldi	r18, 0x01	; 1
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	02 c0       	rjmp	.+4      	; 0xcd8 <nwkRxTaskHandler+0x162>
     cd4:	22 0f       	add	r18, r18
     cd6:	33 1f       	adc	r19, r19
     cd8:	8a 95       	dec	r24
     cda:	e2 f7       	brpl	.-8      	; 0xcd4 <nwkRxTaskHandler+0x15e>
     cdc:	92 2b       	or	r25, r18
     cde:	93 83       	std	Z+3, r25	; 0x03
     ce0:	49 c1       	rjmp	.+658    	; 0xf74 <nwkRxTaskHandler+0x3fe>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
     ce2:	f8 01       	movw	r30, r16
     ce4:	ee 0f       	add	r30, r30
     ce6:	ff 1f       	adc	r31, r31
     ce8:	ee 0f       	add	r30, r30
     cea:	ff 1f       	adc	r31, r31
     cec:	0e 0f       	add	r16, r30
     cee:	1f 1f       	adc	r17, r31
     cf0:	f8 01       	movw	r30, r16
     cf2:	ed 5b       	subi	r30, 0xBD	; 189
     cf4:	fa 4f       	sbci	r31, 0xFA	; 250
     cf6:	92 83       	std	Z+2, r25	; 0x02
        entry->mask = (entry->mask << shift) | 1;
     cf8:	23 81       	ldd	r18, Z+3	; 0x03
     cfa:	30 e0       	ldi	r19, 0x00	; 0
        entry->mask |= (1 << diff);
        return false;
      }
      else
      {
        uint8_t shift = -(int8_t)diff;
     cfc:	81 95       	neg	r24

        entry->seq = header->nwkSeq;
        entry->mask = (entry->mask << shift) | 1;
     cfe:	a9 01       	movw	r20, r18
     d00:	02 c0       	rjmp	.+4      	; 0xd06 <nwkRxTaskHandler+0x190>
     d02:	44 0f       	add	r20, r20
     d04:	55 1f       	adc	r21, r21
     d06:	8a 95       	dec	r24
     d08:	e2 f7       	brpl	.-8      	; 0xd02 <nwkRxTaskHandler+0x18c>
     d0a:	ca 01       	movw	r24, r20
     d0c:	81 60       	ori	r24, 0x01	; 1
     d0e:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
     d10:	8b e0       	ldi	r24, 0x0B	; 11
     d12:	84 83       	std	Z+4, r24	; 0x04
     d14:	2f c1       	rjmp	.+606    	; 0xf74 <nwkRxTaskHandler+0x3fe>
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
     d16:	bf 01       	movw	r22, r30
     d18:	01 96       	adiw	r24, 0x01	; 1
     d1a:	15 96       	adiw	r26, 0x05	; 5
     d1c:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     d1e:	ee 15       	cp	r30, r14
     d20:	ff 05       	cpc	r31, r15
     d22:	09 f0       	breq	.+2      	; 0xd26 <nwkRxTaskHandler+0x1b0>
     d24:	9d cf       	rjmp	.-198    	; 0xc60 <nwkRxTaskHandler+0xea>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
     d26:	61 15       	cp	r22, r1
     d28:	71 05       	cpc	r23, r1
     d2a:	09 f4       	brne	.+2      	; 0xd2e <nwkRxTaskHandler+0x1b8>
     d2c:	0b c1       	rjmp	.+534    	; 0xf44 <nwkRxTaskHandler+0x3ce>
    return true;

  freeEntry->src = header->nwkSrcAddr;
     d2e:	db 01       	movw	r26, r22
     d30:	11 96       	adiw	r26, 0x01	; 1
     d32:	5c 93       	st	X, r21
     d34:	4e 93       	st	-X, r20
  freeEntry->seq = header->nwkSeq;
     d36:	f5 01       	movw	r30, r10
     d38:	84 85       	ldd	r24, Z+12	; 0x0c
     d3a:	12 96       	adiw	r26, 0x02	; 2
     d3c:	8c 93       	st	X, r24
     d3e:	12 97       	sbiw	r26, 0x02	; 2
  freeEntry->mask = 1;
     d40:	f1 e0       	ldi	r31, 0x01	; 1
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	fc 93       	st	X, r31
     d46:	13 97       	sbiw	r26, 0x03	; 3
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     d48:	8b e0       	ldi	r24, 0x0B	; 11
     d4a:	14 96       	adiw	r26, 0x04	; 4
     d4c:	8c 93       	st	X, r24

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
     d4e:	85 e3       	ldi	r24, 0x35	; 53
     d50:	95 e0       	ldi	r25, 0x05	; 5
     d52:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <SYS_TimerStart>
     d56:	0e c1       	rjmp	.+540    	; 0xf74 <nwkRxTaskHandler+0x3fe>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
     d58:	d5 01       	movw	r26, r10
     d5a:	1f 96       	adiw	r26, 0x0f	; 15
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	50 97       	sbiw	r26, 0x10	; 16
     d62:	f4 01       	movw	r30, r8
     d64:	20 81       	ld	r18, Z
     d66:	31 81       	ldd	r19, Z+1	; 0x01
     d68:	28 17       	cp	r18, r24
     d6a:	39 07       	cpc	r19, r25
     d6c:	a9 f0       	breq	.+42     	; 0xd98 <nwkRxTaskHandler+0x222>
        0 == header->nwkFcf.linkLocal)
     d6e:	1b 96       	adiw	r26, 0x0b	; 11
     d70:	2c 91       	ld	r18, X
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
     d72:	22 fd       	sbrc	r18, 2
     d74:	0e c0       	rjmp	.+28     	; 0xd92 <nwkRxTaskHandler+0x21c>
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
     d76:	c5 01       	movw	r24, r10
     d78:	0e 94 ae 08 	call	0x115c	; 0x115c <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     d7c:	d5 01       	movw	r26, r10
     d7e:	1f 96       	adiw	r26, 0x0f	; 15
     d80:	8d 91       	ld	r24, X+
     d82:	9c 91       	ld	r25, X
     d84:	50 97       	sbiw	r26, 0x10	; 16
     d86:	f4 01       	movw	r30, r8
     d88:	20 81       	ld	r18, Z
     d8a:	31 81       	ldd	r19, Z+1	; 0x01
     d8c:	28 17       	cp	r18, r24
     d8e:	39 07       	cpc	r19, r25
     d90:	19 f0       	breq	.+6      	; 0xd98 <nwkRxTaskHandler+0x222>
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	09 f0       	breq	.+2      	; 0xd98 <nwkRxTaskHandler+0x222>
     d96:	d6 c0       	rjmp	.+428    	; 0xf44 <nwkRxTaskHandler+0x3ce>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     d98:	e2 e2       	ldi	r30, 0x22	; 34
     d9a:	d5 01       	movw	r26, r10
     d9c:	ec 93       	st	X, r30
     d9e:	d2 c0       	rjmp	.+420    	; 0xf44 <nwkRxTaskHandler+0x3ce>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
     da0:	10 92 42 05 	sts	0x0542, r1
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
     da4:	d5 01       	movw	r26, r10
     da6:	51 96       	adiw	r26, 0x11	; 17
     da8:	2c 91       	ld	r18, X
     daa:	51 97       	sbiw	r26, 0x11	; 17
     dac:	22 95       	swap	r18
     dae:	2f 70       	andi	r18, 0x0F	; 15
     db0:	e2 2f       	mov	r30, r18
     db2:	f0 e0       	ldi	r31, 0x00	; 0
     db4:	ee 0f       	add	r30, r30
     db6:	ff 1f       	adc	r31, r31
     db8:	e2 5e       	subi	r30, 0xE2	; 226
     dba:	f9 4f       	sbci	r31, 0xF9	; 249
     dbc:	01 90       	ld	r0, Z+
     dbe:	f0 81       	ld	r31, Z
     dc0:	e0 2d       	mov	r30, r0
     dc2:	30 97       	sbiw	r30, 0x00	; 0
     dc4:	09 f4       	brne	.+2      	; 0xdc8 <nwkRxTaskHandler+0x252>
     dc6:	61 c0       	rjmp	.+194    	; 0xe8a <nwkRxTaskHandler+0x314>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
     dc8:	1d 96       	adiw	r26, 0x0d	; 13
     dca:	8d 91       	ld	r24, X+
     dcc:	9c 91       	ld	r25, X
     dce:	1e 97       	sbiw	r26, 0x0e	; 14
     dd0:	9a 83       	std	Y+2, r25	; 0x02
     dd2:	89 83       	std	Y+1, r24	; 0x01
  ind.dstAddr = header->nwkDstAddr;
     dd4:	1f 96       	adiw	r26, 0x0f	; 15
     dd6:	4d 91       	ld	r20, X+
     dd8:	5c 91       	ld	r21, X
     dda:	50 97       	sbiw	r26, 0x10	; 16
     ddc:	5c 83       	std	Y+4, r21	; 0x04
     dde:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
     de0:	51 96       	adiw	r26, 0x11	; 17
     de2:	3c 91       	ld	r19, X
     de4:	51 97       	sbiw	r26, 0x11	; 17
     de6:	3f 70       	andi	r19, 0x0F	; 15
     de8:	3d 83       	std	Y+5, r19	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
     dea:	2e 83       	std	Y+6, r18	; 0x06
  ind.data = frame->payload;
     dec:	af 57       	subi	r26, 0x7F	; 127
     dee:	bf 4f       	sbci	r27, 0xFF	; 255
     df0:	6d 91       	ld	r22, X+
     df2:	7c 91       	ld	r23, X
     df4:	79 87       	std	Y+9, r23	; 0x09
     df6:	68 87       	std	Y+8, r22	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
     df8:	95 01       	movw	r18, r10
     dfa:	2e 5f       	subi	r18, 0xFE	; 254
     dfc:	3f 4f       	sbci	r19, 0xFF	; 255
     dfe:	26 1b       	sub	r18, r22
     e00:	37 0b       	sbc	r19, r23
     e02:	d5 01       	movw	r26, r10
     e04:	11 96       	adiw	r26, 0x01	; 1
     e06:	3c 91       	ld	r19, X
     e08:	11 97       	sbiw	r26, 0x01	; 1
     e0a:	23 0f       	add	r18, r19
  ind.size = nwkFramePayloadSize(frame);
     e0c:	2a 87       	std	Y+10, r18	; 0x0a
  ind.lqi = frame->rx.lqi;
     e0e:	ad 57       	subi	r26, 0x7D	; 125
     e10:	bf 4f       	sbci	r27, 0xFF	; 255
     e12:	2c 91       	ld	r18, X
     e14:	2b 87       	std	Y+11, r18	; 0x0b
  ind.rssi = frame->rx.rssi;
     e16:	11 96       	adiw	r26, 0x01	; 1
     e18:	2c 91       	ld	r18, X
     e1a:	2c 87       	std	Y+12, r18	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
     e1c:	d5 01       	movw	r26, r10
     e1e:	1b 96       	adiw	r26, 0x0b	; 11
     e20:	3c 91       	ld	r19, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
     e22:	63 2f       	mov	r22, r19
     e24:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
     e26:	32 fd       	sbrc	r19, 2
     e28:	02 c0       	rjmp	.+4      	; 0xe2e <nwkRxTaskHandler+0x2b8>
     e2a:	20 e0       	ldi	r18, 0x00	; 0
     e2c:	01 c0       	rjmp	.+2      	; 0xe30 <nwkRxTaskHandler+0x2ba>
     e2e:	20 e2       	ldi	r18, 0x20	; 32
     e30:	26 2b       	or	r18, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
     e32:	33 fd       	sbrc	r19, 3
     e34:	02 c0       	rjmp	.+4      	; 0xe3a <nwkRxTaskHandler+0x2c4>
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	01 c0       	rjmp	.+2      	; 0xe3c <nwkRxTaskHandler+0x2c6>
     e3a:	30 e4       	ldi	r19, 0x40	; 64
     e3c:	23 2b       	or	r18, r19
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
     e3e:	4f 3f       	cpi	r20, 0xFF	; 255
     e40:	5f 4f       	sbci	r21, 0xFF	; 255
     e42:	11 f0       	breq	.+4      	; 0xe48 <nwkRxTaskHandler+0x2d2>
     e44:	30 e0       	ldi	r19, 0x00	; 0
     e46:	01 c0       	rjmp	.+2      	; 0xe4a <nwkRxTaskHandler+0x2d4>
     e48:	34 e0       	ldi	r19, 0x04	; 4
     e4a:	23 2b       	or	r18, r19
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
     e4c:	d5 01       	movw	r26, r10
     e4e:	19 96       	adiw	r26, 0x09	; 9
     e50:	4d 91       	ld	r20, X+
     e52:	5c 91       	ld	r21, X
     e54:	1a 97       	sbiw	r26, 0x0a	; 10
     e56:	84 17       	cp	r24, r20
     e58:	95 07       	cpc	r25, r21
     e5a:	11 f0       	breq	.+4      	; 0xe60 <nwkRxTaskHandler+0x2ea>
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	01 c0       	rjmp	.+2      	; 0xe62 <nwkRxTaskHandler+0x2ec>
     e60:	98 e0       	ldi	r25, 0x08	; 8
     e62:	82 2f       	mov	r24, r18
     e64:	89 2b       	or	r24, r25
     e66:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     e68:	d5 01       	movw	r26, r10
     e6a:	15 96       	adiw	r26, 0x05	; 5
     e6c:	2d 91       	ld	r18, X+
     e6e:	3c 91       	ld	r19, X
     e70:	16 97       	sbiw	r26, 0x06	; 6
     e72:	2f 3f       	cpi	r18, 0xFF	; 255
     e74:	3f 4f       	sbci	r19, 0xFF	; 255
     e76:	11 f0       	breq	.+4      	; 0xe7c <nwkRxTaskHandler+0x306>
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	01 c0       	rjmp	.+2      	; 0xe7e <nwkRxTaskHandler+0x308>
     e7c:	9c 2d       	mov	r25, r12
     e7e:	89 2b       	or	r24, r25
     e80:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
     e82:	ce 01       	movw	r24, r28
     e84:	01 96       	adiw	r24, 0x01	; 1
     e86:	09 95       	icall
     e88:	01 c0       	rjmp	.+2      	; 0xe8c <nwkRxTaskHandler+0x316>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
     e8a:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
     e8c:	f5 01       	movw	r30, r10
     e8e:	93 85       	ldd	r25, Z+11	; 0x0b
     e90:	90 ff       	sbrs	r25, 0
    ack = false;
     e92:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
     e94:	d5 01       	movw	r26, r10
     e96:	17 96       	adiw	r26, 0x07	; 7
     e98:	2d 91       	ld	r18, X+
     e9a:	3c 91       	ld	r19, X
     e9c:	18 97       	sbiw	r26, 0x08	; 8
     e9e:	2f 3f       	cpi	r18, 0xFF	; 255
     ea0:	3f 4f       	sbci	r19, 0xFF	; 255
     ea2:	69 f4       	brne	.+26     	; 0xebe <nwkRxTaskHandler+0x348>
     ea4:	f4 01       	movw	r30, r8
     ea6:	40 81       	ld	r20, Z
     ea8:	51 81       	ldd	r21, Z+1	; 0x01
     eaa:	d5 01       	movw	r26, r10
     eac:	1f 96       	adiw	r26, 0x0f	; 15
     eae:	2d 91       	ld	r18, X+
     eb0:	3c 91       	ld	r19, X
     eb2:	50 97       	sbiw	r26, 0x10	; 16
     eb4:	42 17       	cp	r20, r18
     eb6:	53 07       	cpc	r21, r19
     eb8:	11 f4       	brne	.+4      	; 0xebe <nwkRxTaskHandler+0x348>
      nwkIb.addr == frame->header.nwkDstAddr &&
     eba:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
     ebc:	81 e0       	ldi	r24, 0x01	; 1

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
     ebe:	f5 01       	movw	r30, r10
     ec0:	25 81       	ldd	r18, Z+5	; 0x05
     ec2:	36 81       	ldd	r19, Z+6	; 0x06
     ec4:	2f 3f       	cpi	r18, 0xFF	; 255
     ec6:	3f 4f       	sbci	r19, 0xFF	; 255
     ec8:	b9 f1       	breq	.+110    	; 0xf38 <nwkRxTaskHandler+0x3c2>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     eca:	d4 01       	movw	r26, r8
     ecc:	2d 91       	ld	r18, X+
     ece:	3c 91       	ld	r19, X
     ed0:	2f 3f       	cpi	r18, 0xFF	; 255
     ed2:	3f 4f       	sbci	r19, 0xFF	; 255
     ed4:	89 f1       	breq	.+98     	; 0xf38 <nwkRxTaskHandler+0x3c2>
    ack = false;

  if (ack)
     ed6:	88 23       	and	r24, r24
     ed8:	79 f1       	breq	.+94     	; 0xf38 <nwkRxTaskHandler+0x3c2>
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
     eda:	0e 94 cf 04 	call	0x99e	; 0x99e <nwkFrameAlloc>
     ede:	8c 01       	movw	r16, r24
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	51 f1       	breq	.+84     	; 0xf38 <nwkRxTaskHandler+0x3c2>
    return;

  nwkFrameCommandInit(ack);
     ee4:	0e 94 32 05 	call	0xa64	; 0xa64 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
     ee8:	f8 01       	movw	r30, r16
     eea:	81 81       	ldd	r24, Z+1	; 0x01
     eec:	8d 5f       	subi	r24, 0xFD	; 253
     eee:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
     ef0:	e9 57       	subi	r30, 0x79	; 121
     ef2:	ff 4f       	sbci	r31, 0xFF	; 255
     ef4:	11 82       	std	Z+1, r1	; 0x01
     ef6:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
     ef8:	d5 01       	movw	r26, r10
     efa:	1b 96       	adiw	r26, 0x0b	; 11
     efc:	8c 91       	ld	r24, X
     efe:	1b 97       	sbiw	r26, 0x0b	; 11
     f00:	86 95       	lsr	r24
     f02:	81 70       	andi	r24, 0x01	; 1
     f04:	f8 01       	movw	r30, r16
     f06:	93 85       	ldd	r25, Z+11	; 0x0b
     f08:	80 fb       	bst	r24, 0
     f0a:	91 f9       	bld	r25, 1
     f0c:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
     f0e:	1d 96       	adiw	r26, 0x0d	; 13
     f10:	8d 91       	ld	r24, X+
     f12:	9c 91       	ld	r25, X
     f14:	1e 97       	sbiw	r26, 0x0e	; 14
     f16:	90 8b       	std	Z+16, r25	; 0x10
     f18:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
     f1a:	ef 57       	subi	r30, 0x7F	; 127
     f1c:	ff 4f       	sbci	r31, 0xFF	; 255
     f1e:	01 90       	ld	r0, Z+
     f20:	f0 81       	ld	r31, Z
     f22:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
     f24:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
     f26:	80 91 42 05 	lds	r24, 0x0542
     f2a:	82 83       	std	Z+2, r24	; 0x02
  command->seq = frame->header.nwkSeq;
     f2c:	1c 96       	adiw	r26, 0x0c	; 12
     f2e:	8c 91       	ld	r24, X
     f30:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(ack);
     f32:	c8 01       	movw	r24, r16
     f34:	0e 94 5f 08 	call	0x10be	; 0x10be <nwkTxFrame>
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     f38:	d5 01       	movw	r26, r10
     f3a:	dc 92       	st	X, r13
     f3c:	03 c0       	rjmp	.+6      	; 0xf44 <nwkRxTaskHandler+0x3ce>
      } break;
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
     f3e:	c5 01       	movw	r24, r10
     f40:	0e 94 06 05 	call	0xa0c	; 0xa0c <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     f44:	c5 01       	movw	r24, r10
     f46:	0e 94 10 05 	call	0xa20	; 0xa20 <nwkFrameNext>
     f4a:	5c 01       	movw	r10, r24
     f4c:	89 2b       	or	r24, r25
     f4e:	09 f0       	breq	.+2      	; 0xf52 <nwkRxTaskHandler+0x3dc>
     f50:	51 ce       	rjmp	.-862    	; 0xbf4 <nwkRxTaskHandler+0x7e>
     f52:	17 c0       	rjmp	.+46     	; 0xf82 <nwkRxTaskHandler+0x40c>
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
     f54:	f5 01       	movw	r30, r10
     f56:	45 85       	ldd	r20, Z+13	; 0x0d
     f58:	56 85       	ldd	r21, Z+14	; 0x0e
     f5a:	d4 01       	movw	r26, r8
     f5c:	8d 91       	ld	r24, X+
     f5e:	9c 91       	ld	r25, X
     f60:	84 17       	cp	r24, r20
     f62:	95 07       	cpc	r25, r21
     f64:	79 f3       	breq	.-34     	; 0xf44 <nwkRxTaskHandler+0x3ce>
     f66:	d2 01       	movw	r26, r4
     f68:	f3 01       	movw	r30, r6
     f6a:	83 2d       	mov	r24, r3
     f6c:	92 2d       	mov	r25, r2
     f6e:	63 2d       	mov	r22, r3
     f70:	72 2d       	mov	r23, r2
     f72:	76 ce       	rjmp	.-788    	; 0xc60 <nwkRxTaskHandler+0xea>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
     f74:	f5 01       	movw	r30, r10
     f76:	87 81       	ldd	r24, Z+7	; 0x07
     f78:	90 85       	ldd	r25, Z+8	; 0x08
     f7a:	01 96       	adiw	r24, 0x01	; 1
     f7c:	09 f0       	breq	.+2      	; 0xf80 <nwkRxTaskHandler+0x40a>
     f7e:	fe ce       	rjmp	.-516    	; 0xd7c <nwkRxTaskHandler+0x206>
     f80:	eb ce       	rjmp	.-554    	; 0xd58 <nwkRxTaskHandler+0x1e2>
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
     f82:	2c 96       	adiw	r28, 0x0c	; 12
     f84:	0f b6       	in	r0, 0x3f	; 63
     f86:	f8 94       	cli
     f88:	de bf       	out	0x3e, r29	; 62
     f8a:	0f be       	out	0x3f, r0	; 63
     f8c:	cd bf       	out	0x3d, r28	; 61
     f8e:	df 91       	pop	r29
     f90:	cf 91       	pop	r28
     f92:	1f 91       	pop	r17
     f94:	0f 91       	pop	r16
     f96:	ff 90       	pop	r15
     f98:	ef 90       	pop	r14
     f9a:	df 90       	pop	r13
     f9c:	cf 90       	pop	r12
     f9e:	bf 90       	pop	r11
     fa0:	af 90       	pop	r10
     fa2:	9f 90       	pop	r9
     fa4:	8f 90       	pop	r8
     fa6:	7f 90       	pop	r7
     fa8:	6f 90       	pop	r6
     faa:	5f 90       	pop	r5
     fac:	4f 90       	pop	r4
     fae:	3f 90       	pop	r3
     fb0:	2f 90       	pop	r2
     fb2:	08 95       	ret

00000fb4 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	cf 93       	push	r28
     fbe:	7c 01       	movw	r14, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
     fc0:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
     fc6:	01 e0       	ldi	r16, 0x01	; 1

      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
     fc8:	c3 e1       	ldi	r28, 0x13	; 19
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
     fca:	13 c0       	rjmp	.+38     	; 0xff2 <nwkTxDelayTimerHandler+0x3e>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
     fcc:	fc 01       	movw	r30, r24
     fce:	20 81       	ld	r18, Z
     fd0:	21 31       	cpi	r18, 0x11	; 17
     fd2:	79 f4       	brne	.+30     	; 0xff2 <nwkTxDelayTimerHandler+0x3e>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
     fd4:	ec 57       	subi	r30, 0x7C	; 124
     fd6:	ff 4f       	sbci	r31, 0xFF	; 255
     fd8:	20 81       	ld	r18, Z
     fda:	31 81       	ldd	r19, Z+1	; 0x01
     fdc:	21 50       	subi	r18, 0x01	; 1
     fde:	31 09       	sbc	r19, r1
     fe0:	31 83       	std	Z+1, r19	; 0x01
     fe2:	20 83       	st	Z, r18
     fe4:	23 2b       	or	r18, r19
     fe6:	21 f4       	brne	.+8      	; 0xff0 <nwkTxDelayTimerHandler+0x3c>
        frame->state = NWK_TX_STATE_SEND;
     fe8:	fc 01       	movw	r30, r24
     fea:	c0 83       	st	Z, r28

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
     fec:	10 2f       	mov	r17, r16
     fee:	01 c0       	rjmp	.+2      	; 0xff2 <nwkTxDelayTimerHandler+0x3e>
     ff0:	10 2f       	mov	r17, r16
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
     ff2:	0e 94 10 05 	call	0xa20	; 0xa20 <nwkFrameNext>
     ff6:	00 97       	sbiw	r24, 0x00	; 0
     ff8:	49 f7       	brne	.-46     	; 0xfcc <nwkTxDelayTimerHandler+0x18>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
     ffa:	11 23       	and	r17, r17
     ffc:	19 f0       	breq	.+6      	; 0x1004 <nwkTxDelayTimerHandler+0x50>
    SYS_TimerStart(timer);
     ffe:	c7 01       	movw	r24, r14
    1000:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <SYS_TimerStart>
}
    1004:	cf 91       	pop	r28
    1006:	1f 91       	pop	r17
    1008:	0f 91       	pop	r16
    100a:	ff 90       	pop	r15
    100c:	ef 90       	pop	r14
    100e:	08 95       	ret

00001010 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    1010:	ef 92       	push	r14
    1012:	ff 92       	push	r15
    1014:	0f 93       	push	r16
    1016:	1f 93       	push	r17
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
    101c:	7c 01       	movw	r14, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    101e:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    1020:	80 e0       	ldi	r24, 0x00	; 0
    1022:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    1024:	01 e0       	ldi	r16, 0x01	; 1

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    1026:	d7 e1       	ldi	r29, 0x17	; 23
  frame->tx.status = status;
    1028:	c0 e1       	ldi	r28, 0x10	; 16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    102a:	16 c0       	rjmp	.+44     	; 0x1058 <nwkTxAckWaitTimerHandler+0x48>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    102c:	fc 01       	movw	r30, r24
    102e:	20 81       	ld	r18, Z
    1030:	26 31       	cpi	r18, 0x16	; 22
    1032:	91 f4       	brne	.+36     	; 0x1058 <nwkTxAckWaitTimerHandler+0x48>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    1034:	ec 57       	subi	r30, 0x7C	; 124
    1036:	ff 4f       	sbci	r31, 0xFF	; 255
    1038:	20 81       	ld	r18, Z
    103a:	31 81       	ldd	r19, Z+1	; 0x01
    103c:	21 50       	subi	r18, 0x01	; 1
    103e:	31 09       	sbc	r19, r1
    1040:	31 83       	std	Z+1, r19	; 0x01
    1042:	20 83       	st	Z, r18
    1044:	23 2b       	or	r18, r19
    1046:	39 f4       	brne	.+14     	; 0x1056 <nwkTxAckWaitTimerHandler+0x46>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    1048:	fc 01       	movw	r30, r24
    104a:	d0 83       	st	Z, r29
  frame->tx.status = status;
    104c:	ed 57       	subi	r30, 0x7D	; 125
    104e:	ff 4f       	sbci	r31, 0xFF	; 255
    1050:	c0 83       	st	Z, r28

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    1052:	10 2f       	mov	r17, r16
    1054:	01 c0       	rjmp	.+2      	; 0x1058 <nwkTxAckWaitTimerHandler+0x48>
    1056:	10 2f       	mov	r17, r16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    1058:	0e 94 10 05 	call	0xa20	; 0xa20 <nwkFrameNext>
    105c:	00 97       	sbiw	r24, 0x00	; 0
    105e:	31 f7       	brne	.-52     	; 0x102c <nwkTxAckWaitTimerHandler+0x1c>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
    1060:	11 23       	and	r17, r17
    1062:	19 f0       	breq	.+6      	; 0x106a <nwkTxAckWaitTimerHandler+0x5a>
    SYS_TimerStart(timer);
    1064:	c7 01       	movw	r24, r14
    1066:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <SYS_TimerStart>
}
    106a:	df 91       	pop	r29
    106c:	cf 91       	pop	r28
    106e:	1f 91       	pop	r17
    1070:	0f 91       	pop	r16
    1072:	ff 90       	pop	r15
    1074:	ef 90       	pop	r14
    1076:	08 95       	ret

00001078 <nwkTxInit>:
/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
    1078:	10 92 90 05 	sts	0x0590, r1
    107c:	10 92 8f 05 	sts	0x058F, r1

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    1080:	e2 e8       	ldi	r30, 0x82	; 130
    1082:	f5 e0       	ldi	r31, 0x05	; 5
    1084:	82 e3       	ldi	r24, 0x32	; 50
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	a0 e0       	ldi	r26, 0x00	; 0
    108a:	b0 e0       	ldi	r27, 0x00	; 0
    108c:	86 83       	std	Z+6, r24	; 0x06
    108e:	97 83       	std	Z+7, r25	; 0x07
    1090:	a0 87       	std	Z+8, r26	; 0x08
    1092:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1094:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    1096:	88 e0       	ldi	r24, 0x08	; 8
    1098:	98 e0       	ldi	r25, 0x08	; 8
    109a:	94 87       	std	Z+12, r25	; 0x0c
    109c:	83 87       	std	Z+11, r24	; 0x0b

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    109e:	e5 e7       	ldi	r30, 0x75	; 117
    10a0:	f5 e0       	ldi	r31, 0x05	; 5
    10a2:	8a e0       	ldi	r24, 0x0A	; 10
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	a0 e0       	ldi	r26, 0x00	; 0
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	86 83       	std	Z+6, r24	; 0x06
    10ac:	97 83       	std	Z+7, r25	; 0x07
    10ae:	a0 87       	std	Z+8, r26	; 0x08
    10b0:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    10b2:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    10b4:	8a ed       	ldi	r24, 0xDA	; 218
    10b6:	97 e0       	ldi	r25, 0x07	; 7
    10b8:	94 87       	std	Z+12, r25	; 0x0c
    10ba:	83 87       	std	Z+11, r24	; 0x0b
    10bc:	08 95       	ret

000010be <nwkTxFrame>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (frame->tx.control & NWK_TX_CONTROL_ROUTING)
    10c4:	dc 01       	movw	r26, r24
    10c6:	aa 57       	subi	r26, 0x7A	; 122
    10c8:	bf 4f       	sbci	r27, 0xFF	; 255
    10ca:	8c 91       	ld	r24, X
    10cc:	81 ff       	sbrs	r24, 1
    10ce:	03 c0       	rjmp	.+6      	; 0x10d6 <nwkTxFrame+0x18>
  {
    frame->state = NWK_TX_STATE_DELAY;
    10d0:	92 e1       	ldi	r25, 0x12	; 18
    10d2:	90 83       	st	Z, r25
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <nwkTxFrame+0x1c>
  #ifdef NWK_ENABLE_SECURITY
    if (header->nwkFcf.security)
      frame->state = NWK_TX_STATE_ENCRYPT;
    else
  #endif
      frame->state = NWK_TX_STATE_DELAY;
    10d6:	92 e1       	ldi	r25, 0x12	; 18
    10d8:	90 83       	st	Z, r25
  }

  frame->tx.status = NWK_SUCCESS_STATUS;
    10da:	df 01       	movw	r26, r30
    10dc:	ad 57       	subi	r26, 0x7D	; 125
    10de:	bf 4f       	sbci	r27, 0xFF	; 255
    10e0:	1c 92       	st	X, r1

  if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)
    10e2:	80 ff       	sbrs	r24, 0
    10e4:	05 c0       	rjmp	.+10     	; 0x10f0 <nwkTxFrame+0x32>
    header->macDstPanId = NWK_BROADCAST_PANID;
    10e6:	8f ef       	ldi	r24, 0xFF	; 255
    10e8:	9f ef       	ldi	r25, 0xFF	; 255
    10ea:	96 83       	std	Z+6, r25	; 0x06
    10ec:	85 83       	std	Z+5, r24	; 0x05
    10ee:	06 c0       	rjmp	.+12     	; 0x10fc <nwkTxFrame+0x3e>
  else
    header->macDstPanId = nwkIb.panId;
    10f0:	80 91 1a 06 	lds	r24, 0x061A
    10f4:	90 91 1b 06 	lds	r25, 0x061B
    10f8:	96 83       	std	Z+6, r25	; 0x06
    10fa:	85 83       	std	Z+5, r24	; 0x05
  if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) && 
      0 == (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID))
    nwkRoutePrepareTx(frame);
  else
#endif
    header->macDstAddr = header->nwkDstAddr;
    10fc:	27 85       	ldd	r18, Z+15	; 0x0f
    10fe:	30 89       	ldd	r19, Z+16	; 0x10
    1100:	30 87       	std	Z+8, r19	; 0x08
    1102:	27 83       	std	Z+7, r18	; 0x07

  header->macSrcAddr = nwkIb.addr;
    1104:	a8 e1       	ldi	r26, 0x18	; 24
    1106:	b6 e0       	ldi	r27, 0x06	; 6
    1108:	8d 91       	ld	r24, X+
    110a:	9c 91       	ld	r25, X
    110c:	11 97       	sbiw	r26, 0x01	; 1
    110e:	92 87       	std	Z+10, r25	; 0x0a
    1110:	81 87       	std	Z+9, r24	; 0x09
  header->macSeq = ++nwkIb.macSeqNum;
    1112:	15 96       	adiw	r26, 0x05	; 5
    1114:	8c 91       	ld	r24, X
    1116:	15 97       	sbiw	r26, 0x05	; 5
    1118:	8f 5f       	subi	r24, 0xFF	; 255
    111a:	15 96       	adiw	r26, 0x05	; 5
    111c:	8c 93       	st	X, r24
    111e:	84 83       	std	Z+4, r24	; 0x04

  if (NWK_BROADCAST_ADDR == header->macDstAddr)
    1120:	2f 3f       	cpi	r18, 0xFF	; 255
    1122:	3f 4f       	sbci	r19, 0xFF	; 255
    1124:	81 f4       	brne	.+32     	; 0x1146 <nwkTxFrame+0x88>
    1126:	ef 01       	movw	r28, r30
  {
    header->macFcf = 0x8841;
    1128:	81 e4       	ldi	r24, 0x41	; 65
    112a:	98 e8       	ldi	r25, 0x88	; 136
    112c:	93 83       	std	Z+3, r25	; 0x03
    112e:	82 83       	std	Z+2, r24	; 0x02
    frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    1130:	0e 94 74 10 	call	0x20e8	; 0x20e8 <rand>
    1134:	fe 01       	movw	r30, r28
    1136:	ec 57       	subi	r30, 0x7C	; 124
    1138:	ff 4f       	sbci	r31, 0xFF	; 255
    113a:	87 70       	andi	r24, 0x07	; 7
    113c:	99 27       	eor	r25, r25
    113e:	01 96       	adiw	r24, 0x01	; 1
    1140:	91 83       	std	Z+1, r25	; 0x01
    1142:	80 83       	st	Z, r24
    1144:	08 c0       	rjmp	.+16     	; 0x1156 <nwkTxFrame+0x98>
  }
  else
  {
    header->macFcf = 0x8861;
    1146:	81 e6       	ldi	r24, 0x61	; 97
    1148:	98 e8       	ldi	r25, 0x88	; 136
    114a:	93 83       	std	Z+3, r25	; 0x03
    114c:	82 83       	std	Z+2, r24	; 0x02
    frame->tx.timeout = 0;
    114e:	ec 57       	subi	r30, 0x7C	; 124
    1150:	ff 4f       	sbci	r31, 0xFF	; 255
    1152:	11 82       	std	Z+1, r1	; 0x01
    1154:	10 82       	st	Z, r1
  }
}
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	08 95       	ret

0000115c <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    115c:	0f 93       	push	r16
    115e:	1f 93       	push	r17
    1160:	cf 93       	push	r28
    1162:	df 93       	push	r29
    1164:	8c 01       	movw	r16, r24
  NwkFrame_t *newFrame;

  if (NULL == (newFrame = nwkFrameAlloc()))
    1166:	0e 94 cf 04 	call	0x99e	; 0x99e <nwkFrameAlloc>
    116a:	ec 01       	movw	r28, r24
    116c:	89 2b       	or	r24, r25
    116e:	b9 f1       	breq	.+110    	; 0x11de <nwkTxBroadcastFrame+0x82>
    return;

  newFrame->state = NWK_TX_STATE_DELAY;
    1170:	82 e1       	ldi	r24, 0x12	; 18
    1172:	88 83       	st	Y, r24
  newFrame->size = frame->size;
    1174:	f8 01       	movw	r30, r16
    1176:	81 81       	ldd	r24, Z+1	; 0x01
    1178:	89 83       	std	Y+1, r24	; 0x01
  newFrame->tx.status = NWK_SUCCESS_STATUS;
    117a:	fe 01       	movw	r30, r28
    117c:	ed 57       	subi	r30, 0x7D	; 125
    117e:	ff 4f       	sbci	r31, 0xFF	; 255
    1180:	10 82       	st	Z, r1
  newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    1182:	0e 94 74 10 	call	0x20e8	; 0x20e8 <rand>
    1186:	fe 01       	movw	r30, r28
    1188:	ec 57       	subi	r30, 0x7C	; 124
    118a:	ff 4f       	sbci	r31, 0xFF	; 255
    118c:	87 70       	andi	r24, 0x07	; 7
    118e:	99 27       	eor	r25, r25
    1190:	01 96       	adiw	r24, 0x01	; 1
    1192:	91 83       	std	Z+1, r25	; 0x01
    1194:	80 83       	st	Z, r24
  newFrame->tx.confirm = NULL;
    1196:	33 96       	adiw	r30, 0x03	; 3
    1198:	11 82       	std	Z+1, r1	; 0x01
    119a:	10 82       	st	Z, r1
  memcpy(newFrame->data, frame->data, frame->size);
    119c:	f8 01       	movw	r30, r16
    119e:	41 81       	ldd	r20, Z+1	; 0x01
    11a0:	50 e0       	ldi	r21, 0x00	; 0
    11a2:	b8 01       	movw	r22, r16
    11a4:	6e 5f       	subi	r22, 0xFE	; 254
    11a6:	7f 4f       	sbci	r23, 0xFF	; 255
    11a8:	ce 01       	movw	r24, r28
    11aa:	02 96       	adiw	r24, 0x02	; 2
    11ac:	0e 94 67 11 	call	0x22ce	; 0x22ce <memcpy>

  newFrame->header.macFcf = 0x8841;
    11b0:	81 e4       	ldi	r24, 0x41	; 65
    11b2:	98 e8       	ldi	r25, 0x88	; 136
    11b4:	9b 83       	std	Y+3, r25	; 0x03
    11b6:	8a 83       	std	Y+2, r24	; 0x02
  newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    11b8:	8f ef       	ldi	r24, 0xFF	; 255
    11ba:	9f ef       	ldi	r25, 0xFF	; 255
    11bc:	98 87       	std	Y+8, r25	; 0x08
    11be:	8f 83       	std	Y+7, r24	; 0x07
  newFrame->header.macDstPanId = frame->header.macDstPanId;
    11c0:	f8 01       	movw	r30, r16
    11c2:	85 81       	ldd	r24, Z+5	; 0x05
    11c4:	96 81       	ldd	r25, Z+6	; 0x06
    11c6:	9e 83       	std	Y+6, r25	; 0x06
    11c8:	8d 83       	std	Y+5, r24	; 0x05
  newFrame->header.macSrcAddr = nwkIb.addr;
    11ca:	e8 e1       	ldi	r30, 0x18	; 24
    11cc:	f6 e0       	ldi	r31, 0x06	; 6
    11ce:	80 81       	ld	r24, Z
    11d0:	91 81       	ldd	r25, Z+1	; 0x01
    11d2:	9a 87       	std	Y+10, r25	; 0x0a
    11d4:	89 87       	std	Y+9, r24	; 0x09
  newFrame->header.macSeq = ++nwkIb.macSeqNum;
    11d6:	85 81       	ldd	r24, Z+5	; 0x05
    11d8:	8f 5f       	subi	r24, 0xFF	; 255
    11da:	85 83       	std	Z+5, r24	; 0x05
    11dc:	8c 83       	std	Y+4, r24	; 0x04
}
    11de:	df 91       	pop	r29
    11e0:	cf 91       	pop	r28
    11e2:	1f 91       	pop	r17
    11e4:	0f 91       	pop	r16
    11e6:	08 95       	ret

000011e8 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    11e8:	cf 93       	push	r28
    11ea:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    11ec:	fc 01       	movw	r30, r24
    11ee:	c7 81       	ldd	r28, Z+7	; 0x07
    11f0:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    11f2:	81 85       	ldd	r24, Z+9	; 0x09
    11f4:	83 30       	cpi	r24, 0x03	; 3
    11f6:	c9 f4       	brne	.+50     	; 0x122a <nwkTxAckReceived+0x42>
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	10 c0       	rjmp	.+32     	; 0x121e <nwkTxAckReceived+0x36>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
    11fe:	fc 01       	movw	r30, r24
    1200:	20 81       	ld	r18, Z
    1202:	26 31       	cpi	r18, 0x16	; 22
    1204:	61 f4       	brne	.+24     	; 0x121e <nwkTxAckReceived+0x36>
    1206:	34 85       	ldd	r19, Z+12	; 0x0c
    1208:	29 81       	ldd	r18, Y+1	; 0x01
    120a:	32 13       	cpse	r19, r18
    120c:	08 c0       	rjmp	.+16     	; 0x121e <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    120e:	27 e1       	ldi	r18, 0x17	; 23
    1210:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    1212:	2a 81       	ldd	r18, Y+2	; 0x02
    1214:	ea 57       	subi	r30, 0x7A	; 122
    1216:	ff 4f       	sbci	r31, 0xFF	; 255
    1218:	20 83       	st	Z, r18
      return true;
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	07 c0       	rjmp	.+14     	; 0x122c <nwkTxAckReceived+0x44>
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
    121e:	0e 94 10 05 	call	0xa20	; 0xa20 <nwkFrameNext>
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	61 f7       	brne	.-40     	; 0x11fe <nwkTxAckReceived+0x16>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	01 c0       	rjmp	.+2      	; 0x122c <nwkTxAckReceived+0x44>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
    122a:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	08 95       	ret

00001232 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1232:	e0 91 8f 05 	lds	r30, 0x058F
    1236:	f0 91 90 05 	lds	r31, 0x0590

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	21 f0       	breq	.+8      	; 0x1246 <PHY_DataConf+0x14>
    123e:	48 f0       	brcs	.+18     	; 0x1252 <PHY_DataConf+0x20>
    1240:	82 30       	cpi	r24, 0x02	; 2
    1242:	19 f0       	breq	.+6      	; 0x124a <PHY_DataConf+0x18>
    1244:	04 c0       	rjmp	.+8      	; 0x124e <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    1246:	80 e2       	ldi	r24, 0x20	; 32
    1248:	05 c0       	rjmp	.+10     	; 0x1254 <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    124a:	81 e2       	ldi	r24, 0x21	; 33
    124c:	03 c0       	rjmp	.+6      	; 0x1254 <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	01 c0       	rjmp	.+2      	; 0x1254 <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    1252:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1254:	df 01       	movw	r26, r30
    1256:	ad 57       	subi	r26, 0x7D	; 125
    1258:	bf 4f       	sbci	r27, 0xFF	; 255
    125a:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    125c:	85 e1       	ldi	r24, 0x15	; 21
    125e:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    1260:	10 92 90 05 	sts	0x0590, r1
    1264:	10 92 8f 05 	sts	0x058F, r1
  nwkIb.lock--;
    1268:	e8 e1       	ldi	r30, 0x18	; 24
    126a:	f6 e0       	ldi	r31, 0x06	; 6
    126c:	86 a1       	ldd	r24, Z+38	; 0x26
    126e:	97 a1       	ldd	r25, Z+39	; 0x27
    1270:	01 97       	sbiw	r24, 0x01	; 1
    1272:	97 a3       	std	Z+39, r25	; 0x27
    1274:	86 a3       	std	Z+38, r24	; 0x26
    1276:	08 95       	ret

00001278 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    1278:	9f 92       	push	r9
    127a:	af 92       	push	r10
    127c:	bf 92       	push	r11
    127e:	cf 92       	push	r12
    1280:	df 92       	push	r13
    1282:	ef 92       	push	r14
    1284:	ff 92       	push	r15
    1286:	0f 93       	push	r16
    1288:	1f 93       	push	r17
    128a:	cf 93       	push	r28
    128c:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    128e:	c0 e0       	ldi	r28, 0x00	; 0
    1290:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1292:	0f 2e       	mov	r0, r31
    1294:	f4 e1       	ldi	r31, 0x14	; 20
    1296:	af 2e       	mov	r10, r31
    1298:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    129a:	08 e1       	ldi	r16, 0x18	; 24
    129c:	16 e0       	ldi	r17, 0x06	; 6
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    129e:	0f 2e       	mov	r0, r31
    12a0:	f7 e1       	ldi	r31, 0x17	; 23
    12a2:	df 2e       	mov	r13, r31
    12a4:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    12a6:	0f 2e       	mov	r0, r31
    12a8:	f6 e1       	ldi	r31, 0x16	; 22
    12aa:	9f 2e       	mov	r9, r31
    12ac:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    12ae:	0f 2e       	mov	r0, r31
    12b0:	f5 e1       	ldi	r31, 0x15	; 21
    12b2:	ef 2e       	mov	r14, r31
    12b4:	f1 2c       	mov	r15, r1
    12b6:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    12b8:	0f 2e       	mov	r0, r31
    12ba:	f3 e1       	ldi	r31, 0x13	; 19
    12bc:	cf 2e       	mov	r12, r31
    12be:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    12c0:	0f 2e       	mov	r0, r31
    12c2:	f1 e1       	ldi	r31, 0x11	; 17
    12c4:	bf 2e       	mov	r11, r31
    12c6:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    12c8:	62 c0       	rjmp	.+196    	; 0x138e <nwkTxTaskHandler+0x116>
  {
    switch (frame->state)
    12ca:	88 81       	ld	r24, Y
    12cc:	83 31       	cpi	r24, 0x13	; 19
    12ce:	c9 f0       	breq	.+50     	; 0x1302 <nwkTxTaskHandler+0x8a>
    12d0:	18 f4       	brcc	.+6      	; 0x12d8 <nwkTxTaskHandler+0x60>
    12d2:	82 31       	cpi	r24, 0x12	; 18
    12d4:	39 f0       	breq	.+14     	; 0x12e4 <nwkTxTaskHandler+0x6c>
    12d6:	5b c0       	rjmp	.+182    	; 0x138e <nwkTxTaskHandler+0x116>
    12d8:	85 31       	cpi	r24, 0x15	; 21
    12da:	59 f1       	breq	.+86     	; 0x1332 <nwkTxTaskHandler+0xba>
    12dc:	87 31       	cpi	r24, 0x17	; 23
    12de:	09 f4       	brne	.+2      	; 0x12e2 <nwkTxTaskHandler+0x6a>
    12e0:	48 c0       	rjmp	.+144    	; 0x1372 <nwkTxTaskHandler+0xfa>
    12e2:	55 c0       	rjmp	.+170    	; 0x138e <nwkTxTaskHandler+0x116>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    12e4:	fe 01       	movw	r30, r28
    12e6:	ec 57       	subi	r30, 0x7C	; 124
    12e8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ea:	80 81       	ld	r24, Z
    12ec:	91 81       	ldd	r25, Z+1	; 0x01
    12ee:	89 2b       	or	r24, r25
    12f0:	31 f0       	breq	.+12     	; 0x12fe <nwkTxTaskHandler+0x86>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    12f2:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    12f4:	85 e7       	ldi	r24, 0x75	; 117
    12f6:	95 e0       	ldi	r25, 0x05	; 5
    12f8:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <SYS_TimerStart>
    12fc:	48 c0       	rjmp	.+144    	; 0x138e <nwkTxTaskHandler+0x116>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    12fe:	c8 82       	st	Y, r12
    1300:	46 c0       	rjmp	.+140    	; 0x138e <nwkTxTaskHandler+0x116>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    1302:	80 91 8f 05 	lds	r24, 0x058F
    1306:	90 91 90 05 	lds	r25, 0x0590
    130a:	89 2b       	or	r24, r25
    130c:	09 f0       	breq	.+2      	; 0x1310 <nwkTxTaskHandler+0x98>
    130e:	3f c0       	rjmp	.+126    	; 0x138e <nwkTxTaskHandler+0x116>
        {
          nwkTxPhyActiveFrame = frame;
    1310:	d0 93 90 05 	sts	0x0590, r29
    1314:	c0 93 8f 05 	sts	0x058F, r28
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1318:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    131a:	69 81       	ldd	r22, Y+1	; 0x01
    131c:	ce 01       	movw	r24, r28
    131e:	02 96       	adiw	r24, 0x02	; 2
    1320:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <PHY_DataReq>
          nwkIb.lock++;
    1324:	f8 01       	movw	r30, r16
    1326:	86 a1       	ldd	r24, Z+38	; 0x26
    1328:	97 a1       	ldd	r25, Z+39	; 0x27
    132a:	01 96       	adiw	r24, 0x01	; 1
    132c:	97 a3       	std	Z+39, r25	; 0x27
    132e:	86 a3       	std	Z+38, r24	; 0x26
    1330:	2e c0       	rjmp	.+92     	; 0x138e <nwkTxTaskHandler+0x116>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    1332:	fe 01       	movw	r30, r28
    1334:	ed 57       	subi	r30, 0x7D	; 125
    1336:	ff 4f       	sbci	r31, 0xFF	; 255
    1338:	80 81       	ld	r24, Z
    133a:	81 11       	cpse	r24, r1
    133c:	18 c0       	rjmp	.+48     	; 0x136e <nwkTxTaskHandler+0xf6>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    133e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1340:	3e 85       	ldd	r19, Y+14	; 0x0e
    1342:	f8 01       	movw	r30, r16
    1344:	80 81       	ld	r24, Z
    1346:	91 81       	ldd	r25, Z+1	; 0x01
    1348:	28 17       	cp	r18, r24
    134a:	39 07       	cpc	r19, r25
    134c:	71 f4       	brne	.+28     	; 0x136a <nwkTxTaskHandler+0xf2>
    134e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1350:	80 ff       	sbrs	r24, 0
    1352:	0b c0       	rjmp	.+22     	; 0x136a <nwkTxTaskHandler+0xf2>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1354:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1356:	fe 01       	movw	r30, r28
    1358:	ec 57       	subi	r30, 0x7C	; 124
    135a:	ff 4f       	sbci	r31, 0xFF	; 255
    135c:	f1 82       	std	Z+1, r15	; 0x01
    135e:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    1360:	82 e8       	ldi	r24, 0x82	; 130
    1362:	95 e0       	ldi	r25, 0x05	; 5
    1364:	0e 94 da 0b 	call	0x17b4	; 0x17b4 <SYS_TimerStart>
    1368:	12 c0       	rjmp	.+36     	; 0x138e <nwkTxTaskHandler+0x116>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    136a:	d8 82       	st	Y, r13
    136c:	10 c0       	rjmp	.+32     	; 0x138e <nwkTxTaskHandler+0x116>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    136e:	d8 82       	st	Y, r13
    1370:	0e c0       	rjmp	.+28     	; 0x138e <nwkTxTaskHandler+0x116>
      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
#endif
        if (NULL == frame->tx.confirm)
    1372:	fe 01       	movw	r30, r28
    1374:	e9 57       	subi	r30, 0x79	; 121
    1376:	ff 4f       	sbci	r31, 0xFF	; 255
    1378:	01 90       	ld	r0, Z+
    137a:	f0 81       	ld	r31, Z
    137c:	e0 2d       	mov	r30, r0
    137e:	30 97       	sbiw	r30, 0x00	; 0
    1380:	21 f4       	brne	.+8      	; 0x138a <nwkTxTaskHandler+0x112>
          nwkFrameFree(frame);
    1382:	ce 01       	movw	r24, r28
    1384:	0e 94 06 05 	call	0xa0c	; 0xa0c <nwkFrameFree>
    1388:	02 c0       	rjmp	.+4      	; 0x138e <nwkTxTaskHandler+0x116>
        else
          frame->tx.confirm(frame);
    138a:	ce 01       	movw	r24, r28
    138c:	09 95       	icall
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    138e:	ce 01       	movw	r24, r28
    1390:	0e 94 10 05 	call	0xa20	; 0xa20 <nwkFrameNext>
    1394:	ec 01       	movw	r28, r24
    1396:	89 2b       	or	r24, r25
    1398:	09 f0       	breq	.+2      	; 0x139c <nwkTxTaskHandler+0x124>
    139a:	97 cf       	rjmp	.-210    	; 0x12ca <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	1f 91       	pop	r17
    13a2:	0f 91       	pop	r16
    13a4:	ff 90       	pop	r15
    13a6:	ef 90       	pop	r14
    13a8:	df 90       	pop	r13
    13aa:	cf 90       	pop	r12
    13ac:	bf 90       	pop	r11
    13ae:	af 90       	pop	r10
    13b0:	9f 90       	pop	r9
    13b2:	08 95       	ret

000013b4 <phySetChannel>:

/*************************************************************************//**
*****************************************************************************/
static void phySetChannel(void)
{
  CC_CTRL_1_REG_s.ccBand = phyBand;
    13b4:	80 91 91 05 	lds	r24, 0x0591
    13b8:	98 2f       	mov	r25, r24
    13ba:	9f 70       	andi	r25, 0x0F	; 15
    13bc:	e4 e5       	ldi	r30, 0x54	; 84
    13be:	f1 e0       	ldi	r31, 0x01	; 1
    13c0:	80 81       	ld	r24, Z
    13c2:	80 7f       	andi	r24, 0xF0	; 240
    13c4:	89 2b       	or	r24, r25
    13c6:	80 83       	st	Z, r24

  if (phyBand)
    13c8:	80 91 91 05 	lds	r24, 0x0591
    13cc:	88 23       	and	r24, r24
    13ce:	29 f0       	breq	.+10     	; 0x13da <phySetChannel+0x26>
    CC_CTRL_0_REG = phyChannel;
    13d0:	80 91 92 05 	lds	r24, 0x0592
    13d4:	80 93 53 01 	sts	0x0153, r24
    13d8:	08 95       	ret
  else
    PHY_CC_CCA_REG_s.channel = phyChannel;
    13da:	80 91 92 05 	lds	r24, 0x0592
    13de:	98 2f       	mov	r25, r24
    13e0:	9f 71       	andi	r25, 0x1F	; 31
    13e2:	e8 e4       	ldi	r30, 0x48	; 72
    13e4:	f1 e0       	ldi	r31, 0x01	; 1
    13e6:	80 81       	ld	r24, Z
    13e8:	80 7e       	andi	r24, 0xE0	; 224
    13ea:	89 2b       	or	r24, r25
    13ec:	80 83       	st	Z, r24
    13ee:	08 95       	ret

000013f0 <phyTrxSetState>:

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
  TRX_STATE_REG = TRX_CMD_FORCE_TRX_OFF;
    13f0:	93 e0       	ldi	r25, 0x03	; 3
    13f2:	90 93 42 01 	sts	0x0142, r25
  while (TRX_STATUS_TRX_OFF != TRX_STATUS_REG_s.trxStatus);
    13f6:	e1 e4       	ldi	r30, 0x41	; 65
    13f8:	f1 e0       	ldi	r31, 0x01	; 1
    13fa:	90 81       	ld	r25, Z
    13fc:	9f 71       	andi	r25, 0x1F	; 31
    13fe:	98 30       	cpi	r25, 0x08	; 8
    1400:	e1 f7       	brne	.-8      	; 0x13fa <phyTrxSetState+0xa>

  TRX_STATE_REG = state;
    1402:	80 93 42 01 	sts	0x0142, r24
  while (state != TRX_STATUS_REG_s.trxStatus);
    1406:	e1 e4       	ldi	r30, 0x41	; 65
    1408:	f1 e0       	ldi	r31, 0x01	; 1
    140a:	90 81       	ld	r25, Z
    140c:	9f 71       	andi	r25, 0x1F	; 31
    140e:	98 13       	cpse	r25, r24
    1410:	fc cf       	rjmp	.-8      	; 0x140a <phyTrxSetState+0x1a>
}
    1412:	08 95       	ret

00001414 <phySetRxState>:

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
  phyTrxSetState(TRX_CMD_TRX_OFF);
    1414:	88 e0       	ldi	r24, 0x08	; 8
    1416:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    141a:	8f ef       	ldi	r24, 0xFF	; 255
    141c:	80 93 4f 01 	sts	0x014F, r24

  if (phyRxState)
    1420:	80 91 93 05 	lds	r24, 0x0593
    1424:	88 23       	and	r24, r24
    1426:	19 f0       	breq	.+6      	; 0x142e <phySetRxState+0x1a>
    phyTrxSetState(TRX_CMD_RX_AACK_ON);
    1428:	86 e1       	ldi	r24, 0x16	; 22
    142a:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <phyTrxSetState>
    142e:	08 95       	ret

00001430 <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
    1430:	e9 e3       	ldi	r30, 0x39	; 57
    1432:	f1 e0       	ldi	r31, 0x01	; 1
    1434:	80 81       	ld	r24, Z
    1436:	81 60       	ori	r24, 0x01	; 1
    1438:	80 83       	st	Z, r24

  phyRxState = false;
    143a:	10 92 93 05 	sts	0x0593, r1
  phyBand = 0;
    143e:	10 92 91 05 	sts	0x0591, r1
  phyState = PHY_STATE_IDLE;
    1442:	81 e0       	ldi	r24, 0x01	; 1
    1444:	80 93 14 06 	sts	0x0614, r24

  phyTrxSetState(TRX_CMD_TRX_OFF);
    1448:	88 e0       	ldi	r24, 0x08	; 8
    144a:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
    144e:	8b ee       	ldi	r24, 0xEB	; 235
    1450:	80 93 56 01 	sts	0x0156, r24

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
    1454:	ec e4       	ldi	r30, 0x4C	; 76
    1456:	f1 e0       	ldi	r31, 0x01	; 1
    1458:	80 81       	ld	r24, Z
    145a:	80 68       	ori	r24, 0x80	; 128
    145c:	80 83       	st	Z, r24
    145e:	08 95       	ret

00001460 <PHY_SetRxState>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
  phyRxState = rx;
    1460:	80 93 93 05 	sts	0x0593, r24
  phySetRxState();
    1464:	0e 94 0a 0a 	call	0x1414	; 0x1414 <phySetRxState>
    1468:	08 95       	ret

0000146a <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
  phyChannel = channel;
    146a:	80 93 92 05 	sts	0x0592, r24
  phySetChannel();
    146e:	0e 94 da 09 	call	0x13b4	; 0x13b4 <phySetChannel>
    1472:	08 95       	ret

00001474 <PHY_SetPanId>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
    1474:	cf 93       	push	r28
    1476:	df 93       	push	r29
    1478:	00 d0       	rcall	.+0      	; 0x147a <PHY_SetPanId+0x6>
    147a:	cd b7       	in	r28, 0x3d	; 61
    147c:	de b7       	in	r29, 0x3e	; 62
    147e:	9a 83       	std	Y+2, r25	; 0x02
    1480:	89 83       	std	Y+1, r24	; 0x01
  uint8_t *d = (uint8_t *)&panId;

  PAN_ID_0_REG = d[0];
    1482:	80 93 62 01 	sts	0x0162, r24
  PAN_ID_1_REG = d[1];
    1486:	8a 81       	ldd	r24, Y+2	; 0x02
    1488:	80 93 63 01 	sts	0x0163, r24
}
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	df 91       	pop	r29
    1492:	cf 91       	pop	r28
    1494:	08 95       	ret

00001496 <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
    1496:	cf 93       	push	r28
    1498:	df 93       	push	r29
    149a:	00 d0       	rcall	.+0      	; 0x149c <PHY_SetShortAddr+0x6>
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
    14a0:	9a 83       	std	Y+2, r25	; 0x02
    14a2:	89 83       	std	Y+1, r24	; 0x01
  uint8_t *d = (uint8_t *)&addr;

  SHORT_ADDR_0_REG = d[0];
    14a4:	80 93 60 01 	sts	0x0160, r24
  SHORT_ADDR_1_REG = d[1];
    14a8:	8a 81       	ldd	r24, Y+2	; 0x02
    14aa:	80 93 61 01 	sts	0x0161, r24

#ifndef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
  CSMA_SEED_0_REG = d[0] + d[1];
    14ae:	9a 81       	ldd	r25, Y+2	; 0x02
    14b0:	89 81       	ldd	r24, Y+1	; 0x01
    14b2:	89 0f       	add	r24, r25
    14b4:	80 93 6d 01 	sts	0x016D, r24
#endif
}
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	df 91       	pop	r29
    14be:	cf 91       	pop	r28
    14c0:	08 95       	ret

000014c2 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    14c2:	0f 93       	push	r16
    14c4:	1f 93       	push	r17
    14c6:	cf 93       	push	r28
    14c8:	8c 01       	movw	r16, r24
    14ca:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    14cc:	89 e1       	ldi	r24, 0x19	; 25
    14ce:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    14d2:	8f ef       	ldi	r24, 0xFF	; 255
    14d4:	80 93 4f 01 	sts	0x014F, r24

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    14d8:	82 e0       	ldi	r24, 0x02	; 2
    14da:	8c 0f       	add	r24, r28
    14dc:	80 93 80 01 	sts	0x0180, r24
  for (uint8_t i = 0; i < size; i++)
    14e0:	cc 23       	and	r28, r28
    14e2:	81 f0       	breq	.+32     	; 0x1504 <PHY_DataReq+0x42>
    14e4:	f8 01       	movw	r30, r16
    14e6:	c1 50       	subi	r28, 0x01	; 1
    14e8:	2c 2f       	mov	r18, r28
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	2f 5f       	subi	r18, 0xFF	; 255
    14ee:	3f 4f       	sbci	r19, 0xFF	; 255
    14f0:	c8 01       	movw	r24, r16
    14f2:	82 0f       	add	r24, r18
    14f4:	93 1f       	adc	r25, r19
    14f6:	a1 e8       	ldi	r26, 0x81	; 129
    14f8:	b1 e0       	ldi	r27, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    14fa:	21 91       	ld	r18, Z+
    14fc:	2d 93       	st	X+, r18
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    14fe:	e8 17       	cp	r30, r24
    1500:	f9 07       	cpc	r31, r25
    1502:	d9 f7       	brne	.-10     	; 0x14fa <PHY_DataReq+0x38>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    1504:	83 e0       	ldi	r24, 0x03	; 3
    1506:	80 93 14 06 	sts	0x0614, r24
  TRX_STATE_REG = TRX_CMD_TX_START;
    150a:	82 e0       	ldi	r24, 0x02	; 2
    150c:	80 93 42 01 	sts	0x0142, r24
}
    1510:	cf 91       	pop	r28
    1512:	1f 91       	pop	r17
    1514:	0f 91       	pop	r16
    1516:	08 95       	ret

00001518 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    1518:	1f 93       	push	r17
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	00 d0       	rcall	.+0      	; 0x1520 <PHY_TaskHandler+0x8>
    1520:	00 d0       	rcall	.+0      	; 0x1522 <PHY_TaskHandler+0xa>
    1522:	1f 92       	push	r1
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    1528:	80 91 14 06 	lds	r24, 0x0614
    152c:	82 30       	cpi	r24, 0x02	; 2
    152e:	09 f4       	brne	.+2      	; 0x1532 <PHY_TaskHandler+0x1a>
    1530:	68 c0       	rjmp	.+208    	; 0x1602 <PHY_TaskHandler+0xea>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    1532:	80 91 4f 01 	lds	r24, 0x014F
    1536:	83 ff       	sbrs	r24, 3
    1538:	3f c0       	rjmp	.+126    	; 0x15b8 <PHY_TaskHandler+0xa0>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    153a:	a0 91 7b 01 	lds	r26, 0x017B

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    153e:	6a 2f       	mov	r22, r26
    1540:	70 e0       	ldi	r23, 0x00	; 0
    1542:	ab 01       	movw	r20, r22
    1544:	4f 5f       	subi	r20, 0xFF	; 255
    1546:	5f 4f       	sbci	r21, 0xFF	; 255
    1548:	80 e0       	ldi	r24, 0x00	; 0
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    154e:	fc 01       	movw	r30, r24
    1550:	e0 58       	subi	r30, 0x80	; 128
    1552:	fe 4f       	sbci	r31, 0xFE	; 254
    1554:	30 81       	ld	r19, Z
    1556:	fc 01       	movw	r30, r24
    1558:	ec 56       	subi	r30, 0x6C	; 108
    155a:	fa 4f       	sbci	r31, 0xFA	; 250
    155c:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    155e:	2f 5f       	subi	r18, 0xFF	; 255
    1560:	82 2f       	mov	r24, r18
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	84 17       	cp	r24, r20
    1566:	95 07       	cpc	r25, r21
    1568:	94 f3       	brlt	.-28     	; 0x154e <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    156a:	84 e9       	ldi	r24, 0x94	; 148
    156c:	95 e0       	ldi	r25, 0x05	; 5
    156e:	9a 83       	std	Y+2, r25	; 0x02
    1570:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    1572:	a2 50       	subi	r26, 0x02	; 2
    1574:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    1576:	fb 01       	movw	r30, r22
    1578:	ec 56       	subi	r30, 0x6C	; 108
    157a:	fa 4f       	sbci	r31, 0xFA	; 250
    157c:	80 81       	ld	r24, Z
    157e:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    1580:	80 91 47 01 	lds	r24, 0x0147
    1584:	8a 55       	subi	r24, 0x5A	; 90
    1586:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    1588:	ce 01       	movw	r24, r28
    158a:	01 96       	adiw	r24, 0x01	; 1
    158c:	0e 94 8f 05 	call	0xb1e	; 0xb1e <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    1590:	e1 e4       	ldi	r30, 0x41	; 65
    1592:	f1 e0       	ldi	r31, 0x01	; 1
    1594:	80 81       	ld	r24, Z
    1596:	8f 71       	andi	r24, 0x1F	; 31
    1598:	86 31       	cpi	r24, 0x16	; 22
    159a:	e1 f7       	brne	.-8      	; 0x1594 <PHY_TaskHandler+0x7c>

    IRQ_STATUS_REG_s.rxEnd = 1;
    159c:	ef e4       	ldi	r30, 0x4F	; 79
    159e:	f1 e0       	ldi	r31, 0x01	; 1
    15a0:	80 81       	ld	r24, Z
    15a2:	88 60       	ori	r24, 0x08	; 8
    15a4:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    15a6:	ec e4       	ldi	r30, 0x4C	; 76
    15a8:	f1 e0       	ldi	r31, 0x01	; 1
    15aa:	80 81       	ld	r24, Z
    15ac:	8f 77       	andi	r24, 0x7F	; 127
    15ae:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    15b0:	80 81       	ld	r24, Z
    15b2:	80 68       	ori	r24, 0x80	; 128
    15b4:	80 83       	st	Z, r24
    15b6:	25 c0       	rjmp	.+74     	; 0x1602 <PHY_TaskHandler+0xea>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    15b8:	80 91 4f 01 	lds	r24, 0x014F
    15bc:	86 ff       	sbrs	r24, 6
    15be:	21 c0       	rjmp	.+66     	; 0x1602 <PHY_TaskHandler+0xea>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    15c0:	80 91 41 01 	lds	r24, 0x0141
    15c4:	8f 71       	andi	r24, 0x1F	; 31
    15c6:	89 31       	cpi	r24, 0x19	; 25
    15c8:	b9 f4       	brne	.+46     	; 0x15f8 <PHY_TaskHandler+0xe0>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    15ca:	10 91 42 01 	lds	r17, 0x0142
    15ce:	12 95       	swap	r17
    15d0:	16 95       	lsr	r17
    15d2:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    15d4:	49 f0       	breq	.+18     	; 0x15e8 <PHY_TaskHandler+0xd0>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    15d6:	13 30       	cpi	r17, 0x03	; 3
    15d8:	21 f0       	breq	.+8      	; 0x15e2 <PHY_TaskHandler+0xca>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    15da:	15 30       	cpi	r17, 0x05	; 5
    15dc:	21 f0       	breq	.+8      	; 0x15e6 <PHY_TaskHandler+0xce>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    15de:	13 e0       	ldi	r17, 0x03	; 3
    15e0:	03 c0       	rjmp	.+6      	; 0x15e8 <PHY_TaskHandler+0xd0>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    15e2:	11 e0       	ldi	r17, 0x01	; 1
    15e4:	01 c0       	rjmp	.+2      	; 0x15e8 <PHY_TaskHandler+0xd0>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
    15e6:	12 e0       	ldi	r17, 0x02	; 2
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    15e8:	0e 94 0a 0a 	call	0x1414	; 0x1414 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	80 93 14 06 	sts	0x0614, r24

      PHY_DataConf(status);
    15f2:	81 2f       	mov	r24, r17
    15f4:	0e 94 19 09 	call	0x1232	; 0x1232 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    15f8:	ef e4       	ldi	r30, 0x4F	; 79
    15fa:	f1 e0       	ldi	r31, 0x01	; 1
    15fc:	80 81       	ld	r24, Z
    15fe:	80 64       	ori	r24, 0x40	; 64
    1600:	80 83       	st	Z, r24
  }
}
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	0f 90       	pop	r0
    160a:	0f 90       	pop	r0
    160c:	df 91       	pop	r29
    160e:	cf 91       	pop	r28
    1610:	1f 91       	pop	r17
    1612:	08 95       	ret

00001614 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    1614:	0e 94 26 02 	call	0x44c	; 0x44c <HAL_Init>
  SYS_TimerInit();
    1618:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <SYS_TimerInit>
  PHY_Init();
    161c:	0e 94 18 0a 	call	0x1430	; 0x1430 <PHY_Init>
  NWK_Init();
    1620:	0e 94 9a 03 	call	0x734	; 0x734 <NWK_Init>
    1624:	08 95       	ret

00001626 <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
    1626:	0e 94 8c 0a 	call	0x1518	; 0x1518 <PHY_TaskHandler>
  NWK_TaskHandler();
    162a:	0e 94 cb 03 	call	0x796	; 0x796 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    162e:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <SYS_TimerTaskHandler>
    1632:	08 95       	ret

00001634 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    1634:	0f 93       	push	r16
    1636:	1f 93       	push	r17
    1638:	cf 93       	push	r28
    163a:	df 93       	push	r29
    163c:	ec 01       	movw	r28, r24
  if (timers)
    163e:	80 91 15 06 	lds	r24, 0x0615
    1642:	90 91 16 06 	lds	r25, 0x0616
    1646:	00 97       	sbiw	r24, 0x00	; 0
    1648:	09 f4       	brne	.+2      	; 0x164c <placeTimer+0x18>
    164a:	45 c0       	rjmp	.+138    	; 0x16d6 <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    164c:	4e 81       	ldd	r20, Y+6	; 0x06
    164e:	5f 81       	ldd	r21, Y+7	; 0x07
    1650:	68 85       	ldd	r22, Y+8	; 0x08
    1652:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    1654:	fc 01       	movw	r30, r24
    1656:	02 81       	ldd	r16, Z+2	; 0x02
    1658:	13 81       	ldd	r17, Z+3	; 0x03
    165a:	24 81       	ldd	r18, Z+4	; 0x04
    165c:	35 81       	ldd	r19, Z+5	; 0x05
    165e:	40 17       	cp	r20, r16
    1660:	51 07       	cpc	r21, r17
    1662:	62 07       	cpc	r22, r18
    1664:	73 07       	cpc	r23, r19
    1666:	60 f0       	brcs	.+24     	; 0x1680 <placeTimer+0x4c>
    1668:	dc 01       	movw	r26, r24
    166a:	17 c0       	rjmp	.+46     	; 0x169a <placeTimer+0x66>
    166c:	02 81       	ldd	r16, Z+2	; 0x02
    166e:	13 81       	ldd	r17, Z+3	; 0x03
    1670:	24 81       	ldd	r18, Z+4	; 0x04
    1672:	35 81       	ldd	r19, Z+5	; 0x05
    1674:	40 17       	cp	r20, r16
    1676:	51 07       	cpc	r21, r17
    1678:	62 07       	cpc	r22, r18
    167a:	73 07       	cpc	r23, r19
    167c:	68 f4       	brcc	.+26     	; 0x1698 <placeTimer+0x64>
    167e:	03 c0       	rjmp	.+6      	; 0x1686 <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1680:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    1682:	a0 e0       	ldi	r26, 0x00	; 0
    1684:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    1686:	04 1b       	sub	r16, r20
    1688:	15 0b       	sbc	r17, r21
    168a:	26 0b       	sbc	r18, r22
    168c:	37 0b       	sbc	r19, r23
    168e:	02 83       	std	Z+2, r16	; 0x02
    1690:	13 83       	std	Z+3, r17	; 0x03
    1692:	24 83       	std	Z+4, r18	; 0x04
    1694:	35 83       	std	Z+5, r19	; 0x05
         break;
    1696:	0a c0       	rjmp	.+20     	; 0x16ac <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1698:	df 01       	movw	r26, r30
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    169a:	40 1b       	sub	r20, r16
    169c:	51 0b       	sbc	r21, r17
    169e:	62 0b       	sbc	r22, r18
    16a0:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    16a2:	ed 91       	ld	r30, X+
    16a4:	fc 91       	ld	r31, X
    16a6:	11 97       	sbiw	r26, 0x01	; 1
    16a8:	30 97       	sbiw	r30, 0x00	; 0
    16aa:	01 f7       	brne	.-64     	; 0x166c <placeTimer+0x38>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    16ac:	4a 83       	std	Y+2, r20	; 0x02
    16ae:	5b 83       	std	Y+3, r21	; 0x03
    16b0:	6c 83       	std	Y+4, r22	; 0x04
    16b2:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    16b4:	10 97       	sbiw	r26, 0x00	; 0
    16b6:	41 f0       	breq	.+16     	; 0x16c8 <placeTimer+0x94>
    {
      timer->next = prev->next;
    16b8:	8d 91       	ld	r24, X+
    16ba:	9c 91       	ld	r25, X
    16bc:	11 97       	sbiw	r26, 0x01	; 1
    16be:	99 83       	std	Y+1, r25	; 0x01
    16c0:	88 83       	st	Y, r24
      prev->next = timer;
    16c2:	cd 93       	st	X+, r28
    16c4:	dc 93       	st	X, r29
    16c6:	15 c0       	rjmp	.+42     	; 0x16f2 <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    16c8:	99 83       	std	Y+1, r25	; 0x01
    16ca:	88 83       	st	Y, r24
      timers = timer;
    16cc:	d0 93 16 06 	sts	0x0616, r29
    16d0:	c0 93 15 06 	sts	0x0615, r28
    16d4:	0e c0       	rjmp	.+28     	; 0x16f2 <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    16d6:	19 82       	std	Y+1, r1	; 0x01
    16d8:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    16da:	8e 81       	ldd	r24, Y+6	; 0x06
    16dc:	9f 81       	ldd	r25, Y+7	; 0x07
    16de:	a8 85       	ldd	r26, Y+8	; 0x08
    16e0:	b9 85       	ldd	r27, Y+9	; 0x09
    16e2:	8a 83       	std	Y+2, r24	; 0x02
    16e4:	9b 83       	std	Y+3, r25	; 0x03
    16e6:	ac 83       	std	Y+4, r26	; 0x04
    16e8:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    16ea:	d0 93 16 06 	sts	0x0616, r29
    16ee:	c0 93 15 06 	sts	0x0615, r28
  }
}
    16f2:	df 91       	pop	r29
    16f4:	cf 91       	pop	r28
    16f6:	1f 91       	pop	r17
    16f8:	0f 91       	pop	r16
    16fa:	08 95       	ret

000016fc <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    16fc:	10 92 16 06 	sts	0x0616, r1
    1700:	10 92 15 06 	sts	0x0615, r1
    1704:	08 95       	ret

00001706 <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    170a:	a0 91 15 06 	lds	r26, 0x0615
    170e:	b0 91 16 06 	lds	r27, 0x0616
    1712:	10 97       	sbiw	r26, 0x00	; 0
    1714:	91 f1       	breq	.+100    	; 0x177a <SYS_TimerStop+0x74>
  {
    if (t == timer)
    1716:	a8 17       	cp	r26, r24
    1718:	b9 07       	cpc	r27, r25
    171a:	51 f5       	brne	.+84     	; 0x1770 <SYS_TimerStop+0x6a>
    171c:	0a c0       	rjmp	.+20     	; 0x1732 <SYS_TimerStop+0x2c>
    171e:	8e 17       	cp	r24, r30
    1720:	9f 07       	cpc	r25, r31
    1722:	29 f5       	brne	.+74     	; 0x176e <SYS_TimerStop+0x68>
    {
      if (prev)
    1724:	10 97       	sbiw	r26, 0x00	; 0
    1726:	31 f0       	breq	.+12     	; 0x1734 <SYS_TimerStop+0x2e>
        prev->next = t->next;
    1728:	20 81       	ld	r18, Z
    172a:	31 81       	ldd	r19, Z+1	; 0x01
    172c:	2d 93       	st	X+, r18
    172e:	3c 93       	st	X, r19
    1730:	07 c0       	rjmp	.+14     	; 0x1740 <SYS_TimerStop+0x3a>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    1732:	fc 01       	movw	r30, r24
    if (t == timer)
    {
      if (prev)
        prev->next = t->next;
      else
        timers = t->next;
    1734:	20 81       	ld	r18, Z
    1736:	31 81       	ldd	r19, Z+1	; 0x01
    1738:	30 93 16 06 	sts	0x0616, r19
    173c:	20 93 15 06 	sts	0x0615, r18

      if (t->next)
    1740:	01 90       	ld	r0, Z+
    1742:	f0 81       	ld	r31, Z
    1744:	e0 2d       	mov	r30, r0
    1746:	30 97       	sbiw	r30, 0x00	; 0
    1748:	c1 f0       	breq	.+48     	; 0x177a <SYS_TimerStop+0x74>
        t->next->timeout += timer->timeout;
    174a:	42 81       	ldd	r20, Z+2	; 0x02
    174c:	53 81       	ldd	r21, Z+3	; 0x03
    174e:	64 81       	ldd	r22, Z+4	; 0x04
    1750:	75 81       	ldd	r23, Z+5	; 0x05
    1752:	ec 01       	movw	r28, r24
    1754:	8a 81       	ldd	r24, Y+2	; 0x02
    1756:	9b 81       	ldd	r25, Y+3	; 0x03
    1758:	ac 81       	ldd	r26, Y+4	; 0x04
    175a:	bd 81       	ldd	r27, Y+5	; 0x05
    175c:	84 0f       	add	r24, r20
    175e:	95 1f       	adc	r25, r21
    1760:	a6 1f       	adc	r26, r22
    1762:	b7 1f       	adc	r27, r23
    1764:	82 83       	std	Z+2, r24	; 0x02
    1766:	93 83       	std	Z+3, r25	; 0x03
    1768:	a4 83       	std	Z+4, r26	; 0x04
    176a:	b5 83       	std	Z+5, r27	; 0x05
    176c:	06 c0       	rjmp	.+12     	; 0x177a <SYS_TimerStop+0x74>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    176e:	df 01       	movw	r26, r30
    1770:	ed 91       	ld	r30, X+
    1772:	fc 91       	ld	r31, X
    1774:	11 97       	sbiw	r26, 0x01	; 1
    1776:	30 97       	sbiw	r30, 0x00	; 0
    1778:	91 f6       	brne	.-92     	; 0x171e <SYS_TimerStop+0x18>

      break;
    }
    prev = t;
  }
}
    177a:	df 91       	pop	r29
    177c:	cf 91       	pop	r28
    177e:	08 95       	ret

00001780 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1780:	e0 91 15 06 	lds	r30, 0x0615
    1784:	f0 91 16 06 	lds	r31, 0x0616
    1788:	30 97       	sbiw	r30, 0x00	; 0
    178a:	71 f0       	breq	.+28     	; 0x17a8 <SYS_TimerStarted+0x28>
    if (t == timer)
    178c:	e8 17       	cp	r30, r24
    178e:	f9 07       	cpc	r31, r25
    1790:	21 f4       	brne	.+8      	; 0x179a <SYS_TimerStarted+0x1a>
    1792:	0c c0       	rjmp	.+24     	; 0x17ac <SYS_TimerStarted+0x2c>
    1794:	8e 17       	cp	r24, r30
    1796:	9f 07       	cpc	r25, r31
    1798:	59 f0       	breq	.+22     	; 0x17b0 <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    179a:	01 90       	ld	r0, Z+
    179c:	f0 81       	ld	r31, Z
    179e:	e0 2d       	mov	r30, r0
    17a0:	30 97       	sbiw	r30, 0x00	; 0
    17a2:	c1 f7       	brne	.-16     	; 0x1794 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    17a4:	80 e0       	ldi	r24, 0x00	; 0
    17a6:	08 95       	ret
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	08 95       	ret
    17b0:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    17b2:	08 95       	ret

000017b4 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    17b4:	cf 93       	push	r28
    17b6:	df 93       	push	r29
    17b8:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    17ba:	0e 94 c0 0b 	call	0x1780	; 0x1780 <SYS_TimerStarted>
    17be:	81 11       	cpse	r24, r1
    17c0:	03 c0       	rjmp	.+6      	; 0x17c8 <SYS_TimerStart+0x14>
    placeTimer(timer);
    17c2:	ce 01       	movw	r24, r28
    17c4:	0e 94 1a 0b 	call	0x1634	; 0x1634 <placeTimer>
}
    17c8:	df 91       	pop	r29
    17ca:	cf 91       	pop	r28
    17cc:	08 95       	ret

000017ce <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    17ce:	cf 92       	push	r12
    17d0:	df 92       	push	r13
    17d2:	ef 92       	push	r14
    17d4:	ff 92       	push	r15
    17d6:	cf 93       	push	r28
    17d8:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    17da:	80 91 17 06 	lds	r24, 0x0617
    17de:	88 23       	and	r24, r24
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <SYS_TimerTaskHandler+0x16>
    17e2:	5a c0       	rjmp	.+180    	; 0x1898 <SYS_TimerTaskHandler+0xca>
    return;

  ATOMIC_SECTION_ENTER
    17e4:	8f b7       	in	r24, 0x3f	; 63
    17e6:	f8 94       	cli
    cnt = halTimerIrqCount;
    17e8:	c0 90 17 06 	lds	r12, 0x0617
    halTimerIrqCount = 0;
    17ec:	10 92 17 06 	sts	0x0617, r1
  ATOMIC_SECTION_LEAVE
    17f0:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    17f2:	d1 2c       	mov	r13, r1
    17f4:	e1 2c       	mov	r14, r1
    17f6:	f1 2c       	mov	r15, r1
    17f8:	cc 0c       	add	r12, r12
    17fa:	dd 1c       	adc	r13, r13
    17fc:	ee 1c       	adc	r14, r14
    17fe:	ff 1c       	adc	r15, r15
    1800:	d7 01       	movw	r26, r14
    1802:	c6 01       	movw	r24, r12
    1804:	88 0f       	add	r24, r24
    1806:	99 1f       	adc	r25, r25
    1808:	aa 1f       	adc	r26, r26
    180a:	bb 1f       	adc	r27, r27
    180c:	88 0f       	add	r24, r24
    180e:	99 1f       	adc	r25, r25
    1810:	aa 1f       	adc	r26, r26
    1812:	bb 1f       	adc	r27, r27
    1814:	c8 0e       	add	r12, r24
    1816:	d9 1e       	adc	r13, r25
    1818:	ea 1e       	adc	r14, r26
    181a:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    181c:	c0 91 15 06 	lds	r28, 0x0615
    1820:	d0 91 16 06 	lds	r29, 0x0616
    1824:	20 97       	sbiw	r28, 0x00	; 0
    1826:	c1 f1       	breq	.+112    	; 0x1898 <SYS_TimerTaskHandler+0xca>
    1828:	8a 81       	ldd	r24, Y+2	; 0x02
    182a:	9b 81       	ldd	r25, Y+3	; 0x03
    182c:	ac 81       	ldd	r26, Y+4	; 0x04
    182e:	bd 81       	ldd	r27, Y+5	; 0x05
    1830:	c8 16       	cp	r12, r24
    1832:	d9 06       	cpc	r13, r25
    1834:	ea 06       	cpc	r14, r26
    1836:	fb 06       	cpc	r15, r27
    1838:	18 f1       	brcs	.+70     	; 0x1880 <SYS_TimerTaskHandler+0xb2>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    183a:	c8 1a       	sub	r12, r24
    183c:	d9 0a       	sbc	r13, r25
    183e:	ea 0a       	sbc	r14, r26
    1840:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    1842:	88 81       	ld	r24, Y
    1844:	99 81       	ldd	r25, Y+1	; 0x01
    1846:	90 93 16 06 	sts	0x0616, r25
    184a:	80 93 15 06 	sts	0x0615, r24
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    184e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1850:	81 30       	cpi	r24, 0x01	; 1
    1852:	19 f4       	brne	.+6      	; 0x185a <SYS_TimerTaskHandler+0x8c>
      placeTimer(timer);
    1854:	ce 01       	movw	r24, r28
    1856:	0e 94 1a 0b 	call	0x1634	; 0x1634 <placeTimer>
    timer->handler(timer);
    185a:	eb 85       	ldd	r30, Y+11	; 0x0b
    185c:	fc 85       	ldd	r31, Y+12	; 0x0c
    185e:	ce 01       	movw	r24, r28
    1860:	09 95       	icall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    1862:	c0 91 15 06 	lds	r28, 0x0615
    1866:	d0 91 16 06 	lds	r29, 0x0616
    186a:	20 97       	sbiw	r28, 0x00	; 0
    186c:	a9 f0       	breq	.+42     	; 0x1898 <SYS_TimerTaskHandler+0xca>
    186e:	8a 81       	ldd	r24, Y+2	; 0x02
    1870:	9b 81       	ldd	r25, Y+3	; 0x03
    1872:	ac 81       	ldd	r26, Y+4	; 0x04
    1874:	bd 81       	ldd	r27, Y+5	; 0x05
    1876:	c8 16       	cp	r12, r24
    1878:	d9 06       	cpc	r13, r25
    187a:	ea 06       	cpc	r14, r26
    187c:	fb 06       	cpc	r15, r27
    187e:	e8 f6       	brcc	.-70     	; 0x183a <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    1880:	8a 81       	ldd	r24, Y+2	; 0x02
    1882:	9b 81       	ldd	r25, Y+3	; 0x03
    1884:	ac 81       	ldd	r26, Y+4	; 0x04
    1886:	bd 81       	ldd	r27, Y+5	; 0x05
    1888:	8c 19       	sub	r24, r12
    188a:	9d 09       	sbc	r25, r13
    188c:	ae 09       	sbc	r26, r14
    188e:	bf 09       	sbc	r27, r15
    1890:	8a 83       	std	Y+2, r24	; 0x02
    1892:	9b 83       	std	Y+3, r25	; 0x03
    1894:	ac 83       	std	Y+4, r26	; 0x04
    1896:	bd 83       	std	Y+5, r27	; 0x05
}
    1898:	df 91       	pop	r29
    189a:	cf 91       	pop	r28
    189c:	ff 90       	pop	r15
    189e:	ef 90       	pop	r14
    18a0:	df 90       	pop	r13
    18a2:	cf 90       	pop	r12
    18a4:	08 95       	ret

000018a6 <vfprintf>:
    18a6:	a3 e1       	ldi	r26, 0x13	; 19
    18a8:	b0 e0       	ldi	r27, 0x00	; 0
    18aa:	e9 e5       	ldi	r30, 0x59	; 89
    18ac:	fc e0       	ldi	r31, 0x0C	; 12
    18ae:	0c 94 f1 0f 	jmp	0x1fe2	; 0x1fe2 <__prologue_saves__>
    18b2:	6c 01       	movw	r12, r24
    18b4:	4b 01       	movw	r8, r22
    18b6:	2a 01       	movw	r4, r20
    18b8:	fc 01       	movw	r30, r24
    18ba:	17 82       	std	Z+7, r1	; 0x07
    18bc:	16 82       	std	Z+6, r1	; 0x06
    18be:	83 81       	ldd	r24, Z+3	; 0x03
    18c0:	81 ff       	sbrs	r24, 1
    18c2:	43 c3       	rjmp	.+1670   	; 0x1f4a <vfprintf+0x6a4>
    18c4:	ae 01       	movw	r20, r28
    18c6:	4f 5f       	subi	r20, 0xFF	; 255
    18c8:	5f 4f       	sbci	r21, 0xFF	; 255
    18ca:	3a 01       	movw	r6, r20
    18cc:	f6 01       	movw	r30, r12
    18ce:	93 81       	ldd	r25, Z+3	; 0x03
    18d0:	f4 01       	movw	r30, r8
    18d2:	93 fd       	sbrc	r25, 3
    18d4:	85 91       	lpm	r24, Z+
    18d6:	93 ff       	sbrs	r25, 3
    18d8:	81 91       	ld	r24, Z+
    18da:	4f 01       	movw	r8, r30
    18dc:	88 23       	and	r24, r24
    18de:	09 f4       	brne	.+2      	; 0x18e2 <vfprintf+0x3c>
    18e0:	30 c3       	rjmp	.+1632   	; 0x1f42 <vfprintf+0x69c>
    18e2:	85 32       	cpi	r24, 0x25	; 37
    18e4:	39 f4       	brne	.+14     	; 0x18f4 <vfprintf+0x4e>
    18e6:	93 fd       	sbrc	r25, 3
    18e8:	85 91       	lpm	r24, Z+
    18ea:	93 ff       	sbrs	r25, 3
    18ec:	81 91       	ld	r24, Z+
    18ee:	4f 01       	movw	r8, r30
    18f0:	85 32       	cpi	r24, 0x25	; 37
    18f2:	39 f4       	brne	.+14     	; 0x1902 <vfprintf+0x5c>
    18f4:	b6 01       	movw	r22, r12
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <fputc>
    18fc:	52 01       	movw	r10, r4
    18fe:	25 01       	movw	r4, r10
    1900:	e5 cf       	rjmp	.-54     	; 0x18cc <vfprintf+0x26>
    1902:	10 e0       	ldi	r17, 0x00	; 0
    1904:	f1 2c       	mov	r15, r1
    1906:	20 e0       	ldi	r18, 0x00	; 0
    1908:	20 32       	cpi	r18, 0x20	; 32
    190a:	a0 f4       	brcc	.+40     	; 0x1934 <vfprintf+0x8e>
    190c:	8b 32       	cpi	r24, 0x2B	; 43
    190e:	69 f0       	breq	.+26     	; 0x192a <vfprintf+0x84>
    1910:	30 f4       	brcc	.+12     	; 0x191e <vfprintf+0x78>
    1912:	80 32       	cpi	r24, 0x20	; 32
    1914:	59 f0       	breq	.+22     	; 0x192c <vfprintf+0x86>
    1916:	83 32       	cpi	r24, 0x23	; 35
    1918:	69 f4       	brne	.+26     	; 0x1934 <vfprintf+0x8e>
    191a:	20 61       	ori	r18, 0x10	; 16
    191c:	2c c0       	rjmp	.+88     	; 0x1976 <vfprintf+0xd0>
    191e:	8d 32       	cpi	r24, 0x2D	; 45
    1920:	39 f0       	breq	.+14     	; 0x1930 <vfprintf+0x8a>
    1922:	80 33       	cpi	r24, 0x30	; 48
    1924:	39 f4       	brne	.+14     	; 0x1934 <vfprintf+0x8e>
    1926:	21 60       	ori	r18, 0x01	; 1
    1928:	26 c0       	rjmp	.+76     	; 0x1976 <vfprintf+0xd0>
    192a:	22 60       	ori	r18, 0x02	; 2
    192c:	24 60       	ori	r18, 0x04	; 4
    192e:	23 c0       	rjmp	.+70     	; 0x1976 <vfprintf+0xd0>
    1930:	28 60       	ori	r18, 0x08	; 8
    1932:	21 c0       	rjmp	.+66     	; 0x1976 <vfprintf+0xd0>
    1934:	27 fd       	sbrc	r18, 7
    1936:	27 c0       	rjmp	.+78     	; 0x1986 <vfprintf+0xe0>
    1938:	30 ed       	ldi	r19, 0xD0	; 208
    193a:	38 0f       	add	r19, r24
    193c:	3a 30       	cpi	r19, 0x0A	; 10
    193e:	78 f4       	brcc	.+30     	; 0x195e <vfprintf+0xb8>
    1940:	26 ff       	sbrs	r18, 6
    1942:	06 c0       	rjmp	.+12     	; 0x1950 <vfprintf+0xaa>
    1944:	fa e0       	ldi	r31, 0x0A	; 10
    1946:	1f 9f       	mul	r17, r31
    1948:	30 0d       	add	r19, r0
    194a:	11 24       	eor	r1, r1
    194c:	13 2f       	mov	r17, r19
    194e:	13 c0       	rjmp	.+38     	; 0x1976 <vfprintf+0xd0>
    1950:	4a e0       	ldi	r20, 0x0A	; 10
    1952:	f4 9e       	mul	r15, r20
    1954:	30 0d       	add	r19, r0
    1956:	11 24       	eor	r1, r1
    1958:	f3 2e       	mov	r15, r19
    195a:	20 62       	ori	r18, 0x20	; 32
    195c:	0c c0       	rjmp	.+24     	; 0x1976 <vfprintf+0xd0>
    195e:	8e 32       	cpi	r24, 0x2E	; 46
    1960:	21 f4       	brne	.+8      	; 0x196a <vfprintf+0xc4>
    1962:	26 fd       	sbrc	r18, 6
    1964:	ee c2       	rjmp	.+1500   	; 0x1f42 <vfprintf+0x69c>
    1966:	20 64       	ori	r18, 0x40	; 64
    1968:	06 c0       	rjmp	.+12     	; 0x1976 <vfprintf+0xd0>
    196a:	8c 36       	cpi	r24, 0x6C	; 108
    196c:	11 f4       	brne	.+4      	; 0x1972 <vfprintf+0xcc>
    196e:	20 68       	ori	r18, 0x80	; 128
    1970:	02 c0       	rjmp	.+4      	; 0x1976 <vfprintf+0xd0>
    1972:	88 36       	cpi	r24, 0x68	; 104
    1974:	41 f4       	brne	.+16     	; 0x1986 <vfprintf+0xe0>
    1976:	f4 01       	movw	r30, r8
    1978:	93 fd       	sbrc	r25, 3
    197a:	85 91       	lpm	r24, Z+
    197c:	93 ff       	sbrs	r25, 3
    197e:	81 91       	ld	r24, Z+
    1980:	4f 01       	movw	r8, r30
    1982:	81 11       	cpse	r24, r1
    1984:	c1 cf       	rjmp	.-126    	; 0x1908 <vfprintf+0x62>
    1986:	9b eb       	ldi	r25, 0xBB	; 187
    1988:	98 0f       	add	r25, r24
    198a:	93 30       	cpi	r25, 0x03	; 3
    198c:	18 f4       	brcc	.+6      	; 0x1994 <vfprintf+0xee>
    198e:	20 61       	ori	r18, 0x10	; 16
    1990:	80 5e       	subi	r24, 0xE0	; 224
    1992:	06 c0       	rjmp	.+12     	; 0x19a0 <vfprintf+0xfa>
    1994:	9b e9       	ldi	r25, 0x9B	; 155
    1996:	98 0f       	add	r25, r24
    1998:	93 30       	cpi	r25, 0x03	; 3
    199a:	08 f0       	brcs	.+2      	; 0x199e <vfprintf+0xf8>
    199c:	71 c1       	rjmp	.+738    	; 0x1c80 <vfprintf+0x3da>
    199e:	2f 7e       	andi	r18, 0xEF	; 239
    19a0:	26 ff       	sbrs	r18, 6
    19a2:	16 e0       	ldi	r17, 0x06	; 6
    19a4:	2f 73       	andi	r18, 0x3F	; 63
    19a6:	32 2e       	mov	r3, r18
    19a8:	85 36       	cpi	r24, 0x65	; 101
    19aa:	19 f4       	brne	.+6      	; 0x19b2 <vfprintf+0x10c>
    19ac:	20 64       	ori	r18, 0x40	; 64
    19ae:	32 2e       	mov	r3, r18
    19b0:	08 c0       	rjmp	.+16     	; 0x19c2 <vfprintf+0x11c>
    19b2:	86 36       	cpi	r24, 0x66	; 102
    19b4:	21 f4       	brne	.+8      	; 0x19be <vfprintf+0x118>
    19b6:	f2 2f       	mov	r31, r18
    19b8:	f0 68       	ori	r31, 0x80	; 128
    19ba:	3f 2e       	mov	r3, r31
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <vfprintf+0x11c>
    19be:	11 11       	cpse	r17, r1
    19c0:	11 50       	subi	r17, 0x01	; 1
    19c2:	37 fe       	sbrs	r3, 7
    19c4:	07 c0       	rjmp	.+14     	; 0x19d4 <vfprintf+0x12e>
    19c6:	1c 33       	cpi	r17, 0x3C	; 60
    19c8:	50 f4       	brcc	.+20     	; 0x19de <vfprintf+0x138>
    19ca:	ee 24       	eor	r14, r14
    19cc:	e3 94       	inc	r14
    19ce:	e1 0e       	add	r14, r17
    19d0:	27 e0       	ldi	r18, 0x07	; 7
    19d2:	0b c0       	rjmp	.+22     	; 0x19ea <vfprintf+0x144>
    19d4:	18 30       	cpi	r17, 0x08	; 8
    19d6:	38 f0       	brcs	.+14     	; 0x19e6 <vfprintf+0x140>
    19d8:	27 e0       	ldi	r18, 0x07	; 7
    19da:	17 e0       	ldi	r17, 0x07	; 7
    19dc:	05 c0       	rjmp	.+10     	; 0x19e8 <vfprintf+0x142>
    19de:	27 e0       	ldi	r18, 0x07	; 7
    19e0:	4c e3       	ldi	r20, 0x3C	; 60
    19e2:	e4 2e       	mov	r14, r20
    19e4:	02 c0       	rjmp	.+4      	; 0x19ea <vfprintf+0x144>
    19e6:	21 2f       	mov	r18, r17
    19e8:	e1 2c       	mov	r14, r1
    19ea:	52 01       	movw	r10, r4
    19ec:	44 e0       	ldi	r20, 0x04	; 4
    19ee:	a4 0e       	add	r10, r20
    19f0:	b1 1c       	adc	r11, r1
    19f2:	f2 01       	movw	r30, r4
    19f4:	60 81       	ld	r22, Z
    19f6:	71 81       	ldd	r23, Z+1	; 0x01
    19f8:	82 81       	ldd	r24, Z+2	; 0x02
    19fa:	93 81       	ldd	r25, Z+3	; 0x03
    19fc:	0e 2d       	mov	r16, r14
    19fe:	a3 01       	movw	r20, r6
    1a00:	0e 94 84 10 	call	0x2108	; 0x2108 <__ftoa_engine>
    1a04:	2c 01       	movw	r4, r24
    1a06:	09 81       	ldd	r16, Y+1	; 0x01
    1a08:	00 ff       	sbrs	r16, 0
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <vfprintf+0x16a>
    1a0c:	03 ff       	sbrs	r16, 3
    1a0e:	07 c0       	rjmp	.+14     	; 0x1a1e <vfprintf+0x178>
    1a10:	31 fc       	sbrc	r3, 1
    1a12:	08 c0       	rjmp	.+16     	; 0x1a24 <vfprintf+0x17e>
    1a14:	32 fe       	sbrs	r3, 2
    1a16:	09 c0       	rjmp	.+18     	; 0x1a2a <vfprintf+0x184>
    1a18:	30 e2       	ldi	r19, 0x20	; 32
    1a1a:	23 2e       	mov	r2, r19
    1a1c:	07 c0       	rjmp	.+14     	; 0x1a2c <vfprintf+0x186>
    1a1e:	2d e2       	ldi	r18, 0x2D	; 45
    1a20:	22 2e       	mov	r2, r18
    1a22:	04 c0       	rjmp	.+8      	; 0x1a2c <vfprintf+0x186>
    1a24:	9b e2       	ldi	r25, 0x2B	; 43
    1a26:	29 2e       	mov	r2, r25
    1a28:	01 c0       	rjmp	.+2      	; 0x1a2c <vfprintf+0x186>
    1a2a:	21 2c       	mov	r2, r1
    1a2c:	80 2f       	mov	r24, r16
    1a2e:	8c 70       	andi	r24, 0x0C	; 12
    1a30:	19 f0       	breq	.+6      	; 0x1a38 <vfprintf+0x192>
    1a32:	21 10       	cpse	r2, r1
    1a34:	68 c2       	rjmp	.+1232   	; 0x1f06 <vfprintf+0x660>
    1a36:	a8 c2       	rjmp	.+1360   	; 0x1f88 <vfprintf+0x6e2>
    1a38:	37 fe       	sbrs	r3, 7
    1a3a:	0f c0       	rjmp	.+30     	; 0x1a5a <vfprintf+0x1b4>
    1a3c:	e4 0c       	add	r14, r4
    1a3e:	04 ff       	sbrs	r16, 4
    1a40:	04 c0       	rjmp	.+8      	; 0x1a4a <vfprintf+0x1a4>
    1a42:	8a 81       	ldd	r24, Y+2	; 0x02
    1a44:	81 33       	cpi	r24, 0x31	; 49
    1a46:	09 f4       	brne	.+2      	; 0x1a4a <vfprintf+0x1a4>
    1a48:	ea 94       	dec	r14
    1a4a:	1e 14       	cp	r1, r14
    1a4c:	74 f5       	brge	.+92     	; 0x1aaa <vfprintf+0x204>
    1a4e:	f8 e0       	ldi	r31, 0x08	; 8
    1a50:	fe 15       	cp	r31, r14
    1a52:	78 f5       	brcc	.+94     	; 0x1ab2 <vfprintf+0x20c>
    1a54:	88 e0       	ldi	r24, 0x08	; 8
    1a56:	e8 2e       	mov	r14, r24
    1a58:	2c c0       	rjmp	.+88     	; 0x1ab2 <vfprintf+0x20c>
    1a5a:	36 fc       	sbrc	r3, 6
    1a5c:	2a c0       	rjmp	.+84     	; 0x1ab2 <vfprintf+0x20c>
    1a5e:	81 2f       	mov	r24, r17
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	84 15       	cp	r24, r4
    1a64:	95 05       	cpc	r25, r5
    1a66:	9c f0       	brlt	.+38     	; 0x1a8e <vfprintf+0x1e8>
    1a68:	2c ef       	ldi	r18, 0xFC	; 252
    1a6a:	42 16       	cp	r4, r18
    1a6c:	2f ef       	ldi	r18, 0xFF	; 255
    1a6e:	52 06       	cpc	r5, r18
    1a70:	74 f0       	brlt	.+28     	; 0x1a8e <vfprintf+0x1e8>
    1a72:	43 2d       	mov	r20, r3
    1a74:	40 68       	ori	r20, 0x80	; 128
    1a76:	34 2e       	mov	r3, r20
    1a78:	0a c0       	rjmp	.+20     	; 0x1a8e <vfprintf+0x1e8>
    1a7a:	e2 e0       	ldi	r30, 0x02	; 2
    1a7c:	f0 e0       	ldi	r31, 0x00	; 0
    1a7e:	ec 0f       	add	r30, r28
    1a80:	fd 1f       	adc	r31, r29
    1a82:	e1 0f       	add	r30, r17
    1a84:	f1 1d       	adc	r31, r1
    1a86:	80 81       	ld	r24, Z
    1a88:	80 33       	cpi	r24, 0x30	; 48
    1a8a:	19 f4       	brne	.+6      	; 0x1a92 <vfprintf+0x1ec>
    1a8c:	11 50       	subi	r17, 0x01	; 1
    1a8e:	11 11       	cpse	r17, r1
    1a90:	f4 cf       	rjmp	.-24     	; 0x1a7a <vfprintf+0x1d4>
    1a92:	37 fe       	sbrs	r3, 7
    1a94:	0e c0       	rjmp	.+28     	; 0x1ab2 <vfprintf+0x20c>
    1a96:	ee 24       	eor	r14, r14
    1a98:	e3 94       	inc	r14
    1a9a:	e1 0e       	add	r14, r17
    1a9c:	81 2f       	mov	r24, r17
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	48 16       	cp	r4, r24
    1aa2:	59 06       	cpc	r5, r25
    1aa4:	2c f4       	brge	.+10     	; 0x1ab0 <vfprintf+0x20a>
    1aa6:	14 19       	sub	r17, r4
    1aa8:	04 c0       	rjmp	.+8      	; 0x1ab2 <vfprintf+0x20c>
    1aaa:	ee 24       	eor	r14, r14
    1aac:	e3 94       	inc	r14
    1aae:	01 c0       	rjmp	.+2      	; 0x1ab2 <vfprintf+0x20c>
    1ab0:	10 e0       	ldi	r17, 0x00	; 0
    1ab2:	37 fe       	sbrs	r3, 7
    1ab4:	06 c0       	rjmp	.+12     	; 0x1ac2 <vfprintf+0x21c>
    1ab6:	14 14       	cp	r1, r4
    1ab8:	15 04       	cpc	r1, r5
    1aba:	34 f4       	brge	.+12     	; 0x1ac8 <vfprintf+0x222>
    1abc:	c2 01       	movw	r24, r4
    1abe:	01 96       	adiw	r24, 0x01	; 1
    1ac0:	05 c0       	rjmp	.+10     	; 0x1acc <vfprintf+0x226>
    1ac2:	85 e0       	ldi	r24, 0x05	; 5
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <vfprintf+0x226>
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	21 10       	cpse	r2, r1
    1ace:	01 96       	adiw	r24, 0x01	; 1
    1ad0:	11 23       	and	r17, r17
    1ad2:	31 f0       	breq	.+12     	; 0x1ae0 <vfprintf+0x23a>
    1ad4:	21 2f       	mov	r18, r17
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	2f 5f       	subi	r18, 0xFF	; 255
    1ada:	3f 4f       	sbci	r19, 0xFF	; 255
    1adc:	82 0f       	add	r24, r18
    1ade:	93 1f       	adc	r25, r19
    1ae0:	2f 2d       	mov	r18, r15
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	82 17       	cp	r24, r18
    1ae6:	93 07       	cpc	r25, r19
    1ae8:	14 f4       	brge	.+4      	; 0x1aee <vfprintf+0x248>
    1aea:	f8 1a       	sub	r15, r24
    1aec:	01 c0       	rjmp	.+2      	; 0x1af0 <vfprintf+0x24a>
    1aee:	f1 2c       	mov	r15, r1
    1af0:	83 2d       	mov	r24, r3
    1af2:	89 70       	andi	r24, 0x09	; 9
    1af4:	49 f4       	brne	.+18     	; 0x1b08 <vfprintf+0x262>
    1af6:	ff 20       	and	r15, r15
    1af8:	39 f0       	breq	.+14     	; 0x1b08 <vfprintf+0x262>
    1afa:	b6 01       	movw	r22, r12
    1afc:	80 e2       	ldi	r24, 0x20	; 32
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <fputc>
    1b04:	fa 94       	dec	r15
    1b06:	f7 cf       	rjmp	.-18     	; 0x1af6 <vfprintf+0x250>
    1b08:	22 20       	and	r2, r2
    1b0a:	29 f0       	breq	.+10     	; 0x1b16 <vfprintf+0x270>
    1b0c:	b6 01       	movw	r22, r12
    1b0e:	82 2d       	mov	r24, r2
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <fputc>
    1b16:	33 fc       	sbrc	r3, 3
    1b18:	09 c0       	rjmp	.+18     	; 0x1b2c <vfprintf+0x286>
    1b1a:	ff 20       	and	r15, r15
    1b1c:	39 f0       	breq	.+14     	; 0x1b2c <vfprintf+0x286>
    1b1e:	b6 01       	movw	r22, r12
    1b20:	80 e3       	ldi	r24, 0x30	; 48
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <fputc>
    1b28:	fa 94       	dec	r15
    1b2a:	f7 cf       	rjmp	.-18     	; 0x1b1a <vfprintf+0x274>
    1b2c:	37 fe       	sbrs	r3, 7
    1b2e:	5a c0       	rjmp	.+180    	; 0x1be4 <vfprintf+0x33e>
    1b30:	94 2d       	mov	r25, r4
    1b32:	85 2d       	mov	r24, r5
    1b34:	57 fe       	sbrs	r5, 7
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <vfprintf+0x296>
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	29 2e       	mov	r2, r25
    1b3e:	38 2e       	mov	r3, r24
    1b40:	20 e0       	ldi	r18, 0x00	; 0
    1b42:	30 e0       	ldi	r19, 0x00	; 0
    1b44:	a2 01       	movw	r20, r4
    1b46:	4e 19       	sub	r20, r14
    1b48:	51 09       	sbc	r21, r1
    1b4a:	5d 87       	std	Y+13, r21	; 0x0d
    1b4c:	4c 87       	std	Y+12, r20	; 0x0c
    1b4e:	a2 01       	movw	r20, r4
    1b50:	42 19       	sub	r20, r2
    1b52:	53 09       	sbc	r21, r3
    1b54:	5f 87       	std	Y+15, r21	; 0x0f
    1b56:	4e 87       	std	Y+14, r20	; 0x0e
    1b58:	61 2f       	mov	r22, r17
    1b5a:	70 e0       	ldi	r23, 0x00	; 0
    1b5c:	44 27       	eor	r20, r20
    1b5e:	55 27       	eor	r21, r21
    1b60:	46 1b       	sub	r20, r22
    1b62:	57 0b       	sbc	r21, r23
    1b64:	59 8b       	std	Y+17, r21	; 0x11
    1b66:	48 8b       	std	Y+16, r20	; 0x10
    1b68:	5f ef       	ldi	r21, 0xFF	; 255
    1b6a:	25 16       	cp	r2, r21
    1b6c:	35 06       	cpc	r3, r21
    1b6e:	49 f4       	brne	.+18     	; 0x1b82 <vfprintf+0x2dc>
    1b70:	b6 01       	movw	r22, r12
    1b72:	8e e2       	ldi	r24, 0x2E	; 46
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	2a 8b       	std	Y+18, r18	; 0x12
    1b78:	3b 8b       	std	Y+19, r19	; 0x13
    1b7a:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <fputc>
    1b7e:	3b 89       	ldd	r19, Y+19	; 0x13
    1b80:	2a 89       	ldd	r18, Y+18	; 0x12
    1b82:	42 14       	cp	r4, r2
    1b84:	53 04       	cpc	r5, r3
    1b86:	6c f0       	brlt	.+26     	; 0x1ba2 <vfprintf+0x2fc>
    1b88:	4c 85       	ldd	r20, Y+12	; 0x0c
    1b8a:	5d 85       	ldd	r21, Y+13	; 0x0d
    1b8c:	42 15       	cp	r20, r2
    1b8e:	53 05       	cpc	r21, r3
    1b90:	44 f4       	brge	.+16     	; 0x1ba2 <vfprintf+0x2fc>
    1b92:	ee 85       	ldd	r30, Y+14	; 0x0e
    1b94:	ff 85       	ldd	r31, Y+15	; 0x0f
    1b96:	e2 0f       	add	r30, r18
    1b98:	f3 1f       	adc	r31, r19
    1b9a:	e6 0d       	add	r30, r6
    1b9c:	f7 1d       	adc	r31, r7
    1b9e:	81 81       	ldd	r24, Z+1	; 0x01
    1ba0:	01 c0       	rjmp	.+2      	; 0x1ba4 <vfprintf+0x2fe>
    1ba2:	80 e3       	ldi	r24, 0x30	; 48
    1ba4:	51 e0       	ldi	r21, 0x01	; 1
    1ba6:	25 1a       	sub	r2, r21
    1ba8:	31 08       	sbc	r3, r1
    1baa:	2f 5f       	subi	r18, 0xFF	; 255
    1bac:	3f 4f       	sbci	r19, 0xFF	; 255
    1bae:	48 89       	ldd	r20, Y+16	; 0x10
    1bb0:	59 89       	ldd	r21, Y+17	; 0x11
    1bb2:	24 16       	cp	r2, r20
    1bb4:	35 06       	cpc	r3, r21
    1bb6:	4c f0       	brlt	.+18     	; 0x1bca <vfprintf+0x324>
    1bb8:	b6 01       	movw	r22, r12
    1bba:	90 e0       	ldi	r25, 0x00	; 0
    1bbc:	2a 8b       	std	Y+18, r18	; 0x12
    1bbe:	3b 8b       	std	Y+19, r19	; 0x13
    1bc0:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <fputc>
    1bc4:	2a 89       	ldd	r18, Y+18	; 0x12
    1bc6:	3b 89       	ldd	r19, Y+19	; 0x13
    1bc8:	cf cf       	rjmp	.-98     	; 0x1b68 <vfprintf+0x2c2>
    1bca:	24 14       	cp	r2, r4
    1bcc:	35 04       	cpc	r3, r5
    1bce:	39 f4       	brne	.+14     	; 0x1bde <vfprintf+0x338>
    1bd0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd2:	96 33       	cpi	r25, 0x36	; 54
    1bd4:	18 f4       	brcc	.+6      	; 0x1bdc <vfprintf+0x336>
    1bd6:	95 33       	cpi	r25, 0x35	; 53
    1bd8:	11 f4       	brne	.+4      	; 0x1bde <vfprintf+0x338>
    1bda:	04 ff       	sbrs	r16, 4
    1bdc:	81 e3       	ldi	r24, 0x31	; 49
    1bde:	b6 01       	movw	r22, r12
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	4b c0       	rjmp	.+150    	; 0x1c7a <vfprintf+0x3d4>
    1be4:	8a 81       	ldd	r24, Y+2	; 0x02
    1be6:	81 33       	cpi	r24, 0x31	; 49
    1be8:	09 f0       	breq	.+2      	; 0x1bec <vfprintf+0x346>
    1bea:	0f 7e       	andi	r16, 0xEF	; 239
    1bec:	b6 01       	movw	r22, r12
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <fputc>
    1bf4:	11 11       	cpse	r17, r1
    1bf6:	05 c0       	rjmp	.+10     	; 0x1c02 <vfprintf+0x35c>
    1bf8:	34 fc       	sbrc	r3, 4
    1bfa:	18 c0       	rjmp	.+48     	; 0x1c2c <vfprintf+0x386>
    1bfc:	85 e6       	ldi	r24, 0x65	; 101
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	17 c0       	rjmp	.+46     	; 0x1c30 <vfprintf+0x38a>
    1c02:	b6 01       	movw	r22, r12
    1c04:	8e e2       	ldi	r24, 0x2E	; 46
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <fputc>
    1c0c:	82 e0       	ldi	r24, 0x02	; 2
    1c0e:	ee 24       	eor	r14, r14
    1c10:	e3 94       	inc	r14
    1c12:	e8 0e       	add	r14, r24
    1c14:	f3 01       	movw	r30, r6
    1c16:	e8 0f       	add	r30, r24
    1c18:	f1 1d       	adc	r31, r1
    1c1a:	80 81       	ld	r24, Z
    1c1c:	b6 01       	movw	r22, r12
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <fputc>
    1c24:	11 50       	subi	r17, 0x01	; 1
    1c26:	8e 2d       	mov	r24, r14
    1c28:	91 f7       	brne	.-28     	; 0x1c0e <vfprintf+0x368>
    1c2a:	e6 cf       	rjmp	.-52     	; 0x1bf8 <vfprintf+0x352>
    1c2c:	85 e4       	ldi	r24, 0x45	; 69
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	b6 01       	movw	r22, r12
    1c32:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <fputc>
    1c36:	57 fc       	sbrc	r5, 7
    1c38:	05 c0       	rjmp	.+10     	; 0x1c44 <vfprintf+0x39e>
    1c3a:	41 14       	cp	r4, r1
    1c3c:	51 04       	cpc	r5, r1
    1c3e:	39 f4       	brne	.+14     	; 0x1c4e <vfprintf+0x3a8>
    1c40:	04 ff       	sbrs	r16, 4
    1c42:	05 c0       	rjmp	.+10     	; 0x1c4e <vfprintf+0x3a8>
    1c44:	51 94       	neg	r5
    1c46:	41 94       	neg	r4
    1c48:	51 08       	sbc	r5, r1
    1c4a:	8d e2       	ldi	r24, 0x2D	; 45
    1c4c:	01 c0       	rjmp	.+2      	; 0x1c50 <vfprintf+0x3aa>
    1c4e:	8b e2       	ldi	r24, 0x2B	; 43
    1c50:	b6 01       	movw	r22, r12
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <fputc>
    1c58:	80 e3       	ldi	r24, 0x30	; 48
    1c5a:	9a e0       	ldi	r25, 0x0A	; 10
    1c5c:	49 16       	cp	r4, r25
    1c5e:	51 04       	cpc	r5, r1
    1c60:	2c f0       	brlt	.+10     	; 0x1c6c <vfprintf+0x3c6>
    1c62:	8f 5f       	subi	r24, 0xFF	; 255
    1c64:	5a e0       	ldi	r21, 0x0A	; 10
    1c66:	45 1a       	sub	r4, r21
    1c68:	51 08       	sbc	r5, r1
    1c6a:	f7 cf       	rjmp	.-18     	; 0x1c5a <vfprintf+0x3b4>
    1c6c:	b6 01       	movw	r22, r12
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <fputc>
    1c74:	b6 01       	movw	r22, r12
    1c76:	c2 01       	movw	r24, r4
    1c78:	c0 96       	adiw	r24, 0x30	; 48
    1c7a:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <fputc>
    1c7e:	57 c1       	rjmp	.+686    	; 0x1f2e <vfprintf+0x688>
    1c80:	83 36       	cpi	r24, 0x63	; 99
    1c82:	31 f0       	breq	.+12     	; 0x1c90 <vfprintf+0x3ea>
    1c84:	83 37       	cpi	r24, 0x73	; 115
    1c86:	79 f0       	breq	.+30     	; 0x1ca6 <vfprintf+0x400>
    1c88:	83 35       	cpi	r24, 0x53	; 83
    1c8a:	09 f0       	breq	.+2      	; 0x1c8e <vfprintf+0x3e8>
    1c8c:	58 c0       	rjmp	.+176    	; 0x1d3e <vfprintf+0x498>
    1c8e:	21 c0       	rjmp	.+66     	; 0x1cd2 <vfprintf+0x42c>
    1c90:	52 01       	movw	r10, r4
    1c92:	e2 e0       	ldi	r30, 0x02	; 2
    1c94:	ae 0e       	add	r10, r30
    1c96:	b1 1c       	adc	r11, r1
    1c98:	f2 01       	movw	r30, r4
    1c9a:	80 81       	ld	r24, Z
    1c9c:	89 83       	std	Y+1, r24	; 0x01
    1c9e:	01 e0       	ldi	r16, 0x01	; 1
    1ca0:	10 e0       	ldi	r17, 0x00	; 0
    1ca2:	23 01       	movw	r4, r6
    1ca4:	14 c0       	rjmp	.+40     	; 0x1cce <vfprintf+0x428>
    1ca6:	52 01       	movw	r10, r4
    1ca8:	f2 e0       	ldi	r31, 0x02	; 2
    1caa:	af 0e       	add	r10, r31
    1cac:	b1 1c       	adc	r11, r1
    1cae:	f2 01       	movw	r30, r4
    1cb0:	40 80       	ld	r4, Z
    1cb2:	51 80       	ldd	r5, Z+1	; 0x01
    1cb4:	26 ff       	sbrs	r18, 6
    1cb6:	03 c0       	rjmp	.+6      	; 0x1cbe <vfprintf+0x418>
    1cb8:	61 2f       	mov	r22, r17
    1cba:	70 e0       	ldi	r23, 0x00	; 0
    1cbc:	02 c0       	rjmp	.+4      	; 0x1cc2 <vfprintf+0x41c>
    1cbe:	6f ef       	ldi	r22, 0xFF	; 255
    1cc0:	7f ef       	ldi	r23, 0xFF	; 255
    1cc2:	c2 01       	movw	r24, r4
    1cc4:	2a 8b       	std	Y+18, r18	; 0x12
    1cc6:	0e 94 70 11 	call	0x22e0	; 0x22e0 <strnlen>
    1cca:	8c 01       	movw	r16, r24
    1ccc:	2a 89       	ldd	r18, Y+18	; 0x12
    1cce:	2f 77       	andi	r18, 0x7F	; 127
    1cd0:	15 c0       	rjmp	.+42     	; 0x1cfc <vfprintf+0x456>
    1cd2:	52 01       	movw	r10, r4
    1cd4:	f2 e0       	ldi	r31, 0x02	; 2
    1cd6:	af 0e       	add	r10, r31
    1cd8:	b1 1c       	adc	r11, r1
    1cda:	f2 01       	movw	r30, r4
    1cdc:	40 80       	ld	r4, Z
    1cde:	51 80       	ldd	r5, Z+1	; 0x01
    1ce0:	26 ff       	sbrs	r18, 6
    1ce2:	03 c0       	rjmp	.+6      	; 0x1cea <vfprintf+0x444>
    1ce4:	61 2f       	mov	r22, r17
    1ce6:	70 e0       	ldi	r23, 0x00	; 0
    1ce8:	02 c0       	rjmp	.+4      	; 0x1cee <vfprintf+0x448>
    1cea:	6f ef       	ldi	r22, 0xFF	; 255
    1cec:	7f ef       	ldi	r23, 0xFF	; 255
    1cee:	c2 01       	movw	r24, r4
    1cf0:	2a 8b       	std	Y+18, r18	; 0x12
    1cf2:	0e 94 5c 11 	call	0x22b8	; 0x22b8 <strnlen_P>
    1cf6:	8c 01       	movw	r16, r24
    1cf8:	2a 89       	ldd	r18, Y+18	; 0x12
    1cfa:	20 68       	ori	r18, 0x80	; 128
    1cfc:	32 2e       	mov	r3, r18
    1cfe:	23 fd       	sbrc	r18, 3
    1d00:	1a c0       	rjmp	.+52     	; 0x1d36 <vfprintf+0x490>
    1d02:	8f 2d       	mov	r24, r15
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	08 17       	cp	r16, r24
    1d08:	19 07       	cpc	r17, r25
    1d0a:	a8 f4       	brcc	.+42     	; 0x1d36 <vfprintf+0x490>
    1d0c:	b6 01       	movw	r22, r12
    1d0e:	80 e2       	ldi	r24, 0x20	; 32
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <fputc>
    1d16:	fa 94       	dec	r15
    1d18:	f4 cf       	rjmp	.-24     	; 0x1d02 <vfprintf+0x45c>
    1d1a:	f2 01       	movw	r30, r4
    1d1c:	37 fc       	sbrc	r3, 7
    1d1e:	85 91       	lpm	r24, Z+
    1d20:	37 fe       	sbrs	r3, 7
    1d22:	81 91       	ld	r24, Z+
    1d24:	2f 01       	movw	r4, r30
    1d26:	b6 01       	movw	r22, r12
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <fputc>
    1d2e:	f1 10       	cpse	r15, r1
    1d30:	fa 94       	dec	r15
    1d32:	01 50       	subi	r16, 0x01	; 1
    1d34:	11 09       	sbc	r17, r1
    1d36:	01 15       	cp	r16, r1
    1d38:	11 05       	cpc	r17, r1
    1d3a:	79 f7       	brne	.-34     	; 0x1d1a <vfprintf+0x474>
    1d3c:	f8 c0       	rjmp	.+496    	; 0x1f2e <vfprintf+0x688>
    1d3e:	84 36       	cpi	r24, 0x64	; 100
    1d40:	11 f0       	breq	.+4      	; 0x1d46 <vfprintf+0x4a0>
    1d42:	89 36       	cpi	r24, 0x69	; 105
    1d44:	59 f5       	brne	.+86     	; 0x1d9c <vfprintf+0x4f6>
    1d46:	52 01       	movw	r10, r4
    1d48:	27 ff       	sbrs	r18, 7
    1d4a:	09 c0       	rjmp	.+18     	; 0x1d5e <vfprintf+0x4b8>
    1d4c:	f4 e0       	ldi	r31, 0x04	; 4
    1d4e:	af 0e       	add	r10, r31
    1d50:	b1 1c       	adc	r11, r1
    1d52:	f2 01       	movw	r30, r4
    1d54:	60 81       	ld	r22, Z
    1d56:	71 81       	ldd	r23, Z+1	; 0x01
    1d58:	82 81       	ldd	r24, Z+2	; 0x02
    1d5a:	93 81       	ldd	r25, Z+3	; 0x03
    1d5c:	0a c0       	rjmp	.+20     	; 0x1d72 <vfprintf+0x4cc>
    1d5e:	f2 e0       	ldi	r31, 0x02	; 2
    1d60:	af 0e       	add	r10, r31
    1d62:	b1 1c       	adc	r11, r1
    1d64:	f2 01       	movw	r30, r4
    1d66:	60 81       	ld	r22, Z
    1d68:	71 81       	ldd	r23, Z+1	; 0x01
    1d6a:	07 2e       	mov	r0, r23
    1d6c:	00 0c       	add	r0, r0
    1d6e:	88 0b       	sbc	r24, r24
    1d70:	99 0b       	sbc	r25, r25
    1d72:	2f 76       	andi	r18, 0x6F	; 111
    1d74:	32 2e       	mov	r3, r18
    1d76:	97 ff       	sbrs	r25, 7
    1d78:	09 c0       	rjmp	.+18     	; 0x1d8c <vfprintf+0x4e6>
    1d7a:	90 95       	com	r25
    1d7c:	80 95       	com	r24
    1d7e:	70 95       	com	r23
    1d80:	61 95       	neg	r22
    1d82:	7f 4f       	sbci	r23, 0xFF	; 255
    1d84:	8f 4f       	sbci	r24, 0xFF	; 255
    1d86:	9f 4f       	sbci	r25, 0xFF	; 255
    1d88:	20 68       	ori	r18, 0x80	; 128
    1d8a:	32 2e       	mov	r3, r18
    1d8c:	2a e0       	ldi	r18, 0x0A	; 10
    1d8e:	30 e0       	ldi	r19, 0x00	; 0
    1d90:	a3 01       	movw	r20, r6
    1d92:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <__ultoa_invert>
    1d96:	e8 2e       	mov	r14, r24
    1d98:	e6 18       	sub	r14, r6
    1d9a:	3f c0       	rjmp	.+126    	; 0x1e1a <vfprintf+0x574>
    1d9c:	02 2f       	mov	r16, r18
    1d9e:	85 37       	cpi	r24, 0x75	; 117
    1da0:	21 f4       	brne	.+8      	; 0x1daa <vfprintf+0x504>
    1da2:	0f 7e       	andi	r16, 0xEF	; 239
    1da4:	2a e0       	ldi	r18, 0x0A	; 10
    1da6:	30 e0       	ldi	r19, 0x00	; 0
    1da8:	1d c0       	rjmp	.+58     	; 0x1de4 <vfprintf+0x53e>
    1daa:	09 7f       	andi	r16, 0xF9	; 249
    1dac:	8f 36       	cpi	r24, 0x6F	; 111
    1dae:	91 f0       	breq	.+36     	; 0x1dd4 <vfprintf+0x52e>
    1db0:	18 f4       	brcc	.+6      	; 0x1db8 <vfprintf+0x512>
    1db2:	88 35       	cpi	r24, 0x58	; 88
    1db4:	59 f0       	breq	.+22     	; 0x1dcc <vfprintf+0x526>
    1db6:	c5 c0       	rjmp	.+394    	; 0x1f42 <vfprintf+0x69c>
    1db8:	80 37       	cpi	r24, 0x70	; 112
    1dba:	19 f0       	breq	.+6      	; 0x1dc2 <vfprintf+0x51c>
    1dbc:	88 37       	cpi	r24, 0x78	; 120
    1dbe:	11 f0       	breq	.+4      	; 0x1dc4 <vfprintf+0x51e>
    1dc0:	c0 c0       	rjmp	.+384    	; 0x1f42 <vfprintf+0x69c>
    1dc2:	00 61       	ori	r16, 0x10	; 16
    1dc4:	04 ff       	sbrs	r16, 4
    1dc6:	09 c0       	rjmp	.+18     	; 0x1dda <vfprintf+0x534>
    1dc8:	04 60       	ori	r16, 0x04	; 4
    1dca:	07 c0       	rjmp	.+14     	; 0x1dda <vfprintf+0x534>
    1dcc:	24 ff       	sbrs	r18, 4
    1dce:	08 c0       	rjmp	.+16     	; 0x1de0 <vfprintf+0x53a>
    1dd0:	06 60       	ori	r16, 0x06	; 6
    1dd2:	06 c0       	rjmp	.+12     	; 0x1de0 <vfprintf+0x53a>
    1dd4:	28 e0       	ldi	r18, 0x08	; 8
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	05 c0       	rjmp	.+10     	; 0x1de4 <vfprintf+0x53e>
    1dda:	20 e1       	ldi	r18, 0x10	; 16
    1ddc:	30 e0       	ldi	r19, 0x00	; 0
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <vfprintf+0x53e>
    1de0:	20 e1       	ldi	r18, 0x10	; 16
    1de2:	32 e0       	ldi	r19, 0x02	; 2
    1de4:	52 01       	movw	r10, r4
    1de6:	07 ff       	sbrs	r16, 7
    1de8:	09 c0       	rjmp	.+18     	; 0x1dfc <vfprintf+0x556>
    1dea:	f4 e0       	ldi	r31, 0x04	; 4
    1dec:	af 0e       	add	r10, r31
    1dee:	b1 1c       	adc	r11, r1
    1df0:	f2 01       	movw	r30, r4
    1df2:	60 81       	ld	r22, Z
    1df4:	71 81       	ldd	r23, Z+1	; 0x01
    1df6:	82 81       	ldd	r24, Z+2	; 0x02
    1df8:	93 81       	ldd	r25, Z+3	; 0x03
    1dfa:	08 c0       	rjmp	.+16     	; 0x1e0c <vfprintf+0x566>
    1dfc:	f2 e0       	ldi	r31, 0x02	; 2
    1dfe:	af 0e       	add	r10, r31
    1e00:	b1 1c       	adc	r11, r1
    1e02:	f2 01       	movw	r30, r4
    1e04:	60 81       	ld	r22, Z
    1e06:	71 81       	ldd	r23, Z+1	; 0x01
    1e08:	80 e0       	ldi	r24, 0x00	; 0
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	a3 01       	movw	r20, r6
    1e0e:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <__ultoa_invert>
    1e12:	e8 2e       	mov	r14, r24
    1e14:	e6 18       	sub	r14, r6
    1e16:	0f 77       	andi	r16, 0x7F	; 127
    1e18:	30 2e       	mov	r3, r16
    1e1a:	36 fe       	sbrs	r3, 6
    1e1c:	0b c0       	rjmp	.+22     	; 0x1e34 <vfprintf+0x58e>
    1e1e:	33 2d       	mov	r19, r3
    1e20:	3e 7f       	andi	r19, 0xFE	; 254
    1e22:	e1 16       	cp	r14, r17
    1e24:	50 f4       	brcc	.+20     	; 0x1e3a <vfprintf+0x594>
    1e26:	34 fe       	sbrs	r3, 4
    1e28:	0a c0       	rjmp	.+20     	; 0x1e3e <vfprintf+0x598>
    1e2a:	32 fc       	sbrc	r3, 2
    1e2c:	08 c0       	rjmp	.+16     	; 0x1e3e <vfprintf+0x598>
    1e2e:	33 2d       	mov	r19, r3
    1e30:	3e 7e       	andi	r19, 0xEE	; 238
    1e32:	05 c0       	rjmp	.+10     	; 0x1e3e <vfprintf+0x598>
    1e34:	0e 2d       	mov	r16, r14
    1e36:	33 2d       	mov	r19, r3
    1e38:	03 c0       	rjmp	.+6      	; 0x1e40 <vfprintf+0x59a>
    1e3a:	0e 2d       	mov	r16, r14
    1e3c:	01 c0       	rjmp	.+2      	; 0x1e40 <vfprintf+0x59a>
    1e3e:	01 2f       	mov	r16, r17
    1e40:	34 ff       	sbrs	r19, 4
    1e42:	0c c0       	rjmp	.+24     	; 0x1e5c <vfprintf+0x5b6>
    1e44:	fe 01       	movw	r30, r28
    1e46:	ee 0d       	add	r30, r14
    1e48:	f1 1d       	adc	r31, r1
    1e4a:	80 81       	ld	r24, Z
    1e4c:	80 33       	cpi	r24, 0x30	; 48
    1e4e:	11 f4       	brne	.+4      	; 0x1e54 <vfprintf+0x5ae>
    1e50:	39 7e       	andi	r19, 0xE9	; 233
    1e52:	08 c0       	rjmp	.+16     	; 0x1e64 <vfprintf+0x5be>
    1e54:	32 ff       	sbrs	r19, 2
    1e56:	05 c0       	rjmp	.+10     	; 0x1e62 <vfprintf+0x5bc>
    1e58:	0e 5f       	subi	r16, 0xFE	; 254
    1e5a:	04 c0       	rjmp	.+8      	; 0x1e64 <vfprintf+0x5be>
    1e5c:	83 2f       	mov	r24, r19
    1e5e:	86 78       	andi	r24, 0x86	; 134
    1e60:	09 f0       	breq	.+2      	; 0x1e64 <vfprintf+0x5be>
    1e62:	0f 5f       	subi	r16, 0xFF	; 255
    1e64:	33 fd       	sbrc	r19, 3
    1e66:	13 c0       	rjmp	.+38     	; 0x1e8e <vfprintf+0x5e8>
    1e68:	30 ff       	sbrs	r19, 0
    1e6a:	06 c0       	rjmp	.+12     	; 0x1e78 <vfprintf+0x5d2>
    1e6c:	1e 2d       	mov	r17, r14
    1e6e:	0f 15       	cp	r16, r15
    1e70:	18 f4       	brcc	.+6      	; 0x1e78 <vfprintf+0x5d2>
    1e72:	1f 0d       	add	r17, r15
    1e74:	10 1b       	sub	r17, r16
    1e76:	0f 2d       	mov	r16, r15
    1e78:	0f 15       	cp	r16, r15
    1e7a:	68 f4       	brcc	.+26     	; 0x1e96 <vfprintf+0x5f0>
    1e7c:	b6 01       	movw	r22, r12
    1e7e:	80 e2       	ldi	r24, 0x20	; 32
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	3b 8b       	std	Y+19, r19	; 0x13
    1e84:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <fputc>
    1e88:	0f 5f       	subi	r16, 0xFF	; 255
    1e8a:	3b 89       	ldd	r19, Y+19	; 0x13
    1e8c:	f5 cf       	rjmp	.-22     	; 0x1e78 <vfprintf+0x5d2>
    1e8e:	0f 15       	cp	r16, r15
    1e90:	10 f4       	brcc	.+4      	; 0x1e96 <vfprintf+0x5f0>
    1e92:	f0 1a       	sub	r15, r16
    1e94:	01 c0       	rjmp	.+2      	; 0x1e98 <vfprintf+0x5f2>
    1e96:	f1 2c       	mov	r15, r1
    1e98:	34 ff       	sbrs	r19, 4
    1e9a:	12 c0       	rjmp	.+36     	; 0x1ec0 <vfprintf+0x61a>
    1e9c:	b6 01       	movw	r22, r12
    1e9e:	80 e3       	ldi	r24, 0x30	; 48
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	3b 8b       	std	Y+19, r19	; 0x13
    1ea4:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <fputc>
    1ea8:	3b 89       	ldd	r19, Y+19	; 0x13
    1eaa:	32 ff       	sbrs	r19, 2
    1eac:	17 c0       	rjmp	.+46     	; 0x1edc <vfprintf+0x636>
    1eae:	31 fd       	sbrc	r19, 1
    1eb0:	03 c0       	rjmp	.+6      	; 0x1eb8 <vfprintf+0x612>
    1eb2:	88 e7       	ldi	r24, 0x78	; 120
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <vfprintf+0x616>
    1eb8:	88 e5       	ldi	r24, 0x58	; 88
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	b6 01       	movw	r22, r12
    1ebe:	0c c0       	rjmp	.+24     	; 0x1ed8 <vfprintf+0x632>
    1ec0:	83 2f       	mov	r24, r19
    1ec2:	86 78       	andi	r24, 0x86	; 134
    1ec4:	59 f0       	breq	.+22     	; 0x1edc <vfprintf+0x636>
    1ec6:	31 ff       	sbrs	r19, 1
    1ec8:	02 c0       	rjmp	.+4      	; 0x1ece <vfprintf+0x628>
    1eca:	8b e2       	ldi	r24, 0x2B	; 43
    1ecc:	01 c0       	rjmp	.+2      	; 0x1ed0 <vfprintf+0x62a>
    1ece:	80 e2       	ldi	r24, 0x20	; 32
    1ed0:	37 fd       	sbrc	r19, 7
    1ed2:	8d e2       	ldi	r24, 0x2D	; 45
    1ed4:	b6 01       	movw	r22, r12
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <fputc>
    1edc:	e1 16       	cp	r14, r17
    1ede:	38 f4       	brcc	.+14     	; 0x1eee <vfprintf+0x648>
    1ee0:	b6 01       	movw	r22, r12
    1ee2:	80 e3       	ldi	r24, 0x30	; 48
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <fputc>
    1eea:	11 50       	subi	r17, 0x01	; 1
    1eec:	f7 cf       	rjmp	.-18     	; 0x1edc <vfprintf+0x636>
    1eee:	ea 94       	dec	r14
    1ef0:	f3 01       	movw	r30, r6
    1ef2:	ee 0d       	add	r30, r14
    1ef4:	f1 1d       	adc	r31, r1
    1ef6:	80 81       	ld	r24, Z
    1ef8:	b6 01       	movw	r22, r12
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <fputc>
    1f00:	e1 10       	cpse	r14, r1
    1f02:	f5 cf       	rjmp	.-22     	; 0x1eee <vfprintf+0x648>
    1f04:	14 c0       	rjmp	.+40     	; 0x1f2e <vfprintf+0x688>
    1f06:	f4 e0       	ldi	r31, 0x04	; 4
    1f08:	ff 15       	cp	r31, r15
    1f0a:	58 f5       	brcc	.+86     	; 0x1f62 <vfprintf+0x6bc>
    1f0c:	84 e0       	ldi	r24, 0x04	; 4
    1f0e:	f8 1a       	sub	r15, r24
    1f10:	33 fe       	sbrs	r3, 3
    1f12:	1e c0       	rjmp	.+60     	; 0x1f50 <vfprintf+0x6aa>
    1f14:	21 10       	cpse	r2, r1
    1f16:	26 c0       	rjmp	.+76     	; 0x1f64 <vfprintf+0x6be>
    1f18:	03 ff       	sbrs	r16, 3
    1f1a:	2a c0       	rjmp	.+84     	; 0x1f70 <vfprintf+0x6ca>
    1f1c:	04 e3       	ldi	r16, 0x34	; 52
    1f1e:	11 e0       	ldi	r17, 0x01	; 1
    1f20:	f3 2d       	mov	r31, r3
    1f22:	f0 71       	andi	r31, 0x10	; 16
    1f24:	3f 2e       	mov	r3, r31
    1f26:	f8 01       	movw	r30, r16
    1f28:	84 91       	lpm	r24, Z
    1f2a:	81 11       	cpse	r24, r1
    1f2c:	24 c0       	rjmp	.+72     	; 0x1f76 <vfprintf+0x6d0>
    1f2e:	ff 20       	and	r15, r15
    1f30:	09 f4       	brne	.+2      	; 0x1f34 <vfprintf+0x68e>
    1f32:	e5 cc       	rjmp	.-1590   	; 0x18fe <vfprintf+0x58>
    1f34:	b6 01       	movw	r22, r12
    1f36:	80 e2       	ldi	r24, 0x20	; 32
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <fputc>
    1f3e:	fa 94       	dec	r15
    1f40:	f6 cf       	rjmp	.-20     	; 0x1f2e <vfprintf+0x688>
    1f42:	f6 01       	movw	r30, r12
    1f44:	86 81       	ldd	r24, Z+6	; 0x06
    1f46:	97 81       	ldd	r25, Z+7	; 0x07
    1f48:	26 c0       	rjmp	.+76     	; 0x1f96 <vfprintf+0x6f0>
    1f4a:	8f ef       	ldi	r24, 0xFF	; 255
    1f4c:	9f ef       	ldi	r25, 0xFF	; 255
    1f4e:	23 c0       	rjmp	.+70     	; 0x1f96 <vfprintf+0x6f0>
    1f50:	b6 01       	movw	r22, r12
    1f52:	80 e2       	ldi	r24, 0x20	; 32
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <fputc>
    1f5a:	fa 94       	dec	r15
    1f5c:	f1 10       	cpse	r15, r1
    1f5e:	f8 cf       	rjmp	.-16     	; 0x1f50 <vfprintf+0x6aa>
    1f60:	d9 cf       	rjmp	.-78     	; 0x1f14 <vfprintf+0x66e>
    1f62:	f1 2c       	mov	r15, r1
    1f64:	b6 01       	movw	r22, r12
    1f66:	82 2d       	mov	r24, r2
    1f68:	90 e0       	ldi	r25, 0x00	; 0
    1f6a:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <fputc>
    1f6e:	d4 cf       	rjmp	.-88     	; 0x1f18 <vfprintf+0x672>
    1f70:	08 e3       	ldi	r16, 0x38	; 56
    1f72:	11 e0       	ldi	r17, 0x01	; 1
    1f74:	d5 cf       	rjmp	.-86     	; 0x1f20 <vfprintf+0x67a>
    1f76:	31 10       	cpse	r3, r1
    1f78:	80 52       	subi	r24, 0x20	; 32
    1f7a:	b6 01       	movw	r22, r12
    1f7c:	90 e0       	ldi	r25, 0x00	; 0
    1f7e:	0e 94 7b 11 	call	0x22f6	; 0x22f6 <fputc>
    1f82:	0f 5f       	subi	r16, 0xFF	; 255
    1f84:	1f 4f       	sbci	r17, 0xFF	; 255
    1f86:	cf cf       	rjmp	.-98     	; 0x1f26 <vfprintf+0x680>
    1f88:	23 e0       	ldi	r18, 0x03	; 3
    1f8a:	2f 15       	cp	r18, r15
    1f8c:	10 f4       	brcc	.+4      	; 0x1f92 <vfprintf+0x6ec>
    1f8e:	83 e0       	ldi	r24, 0x03	; 3
    1f90:	be cf       	rjmp	.-132    	; 0x1f0e <vfprintf+0x668>
    1f92:	f1 2c       	mov	r15, r1
    1f94:	c1 cf       	rjmp	.-126    	; 0x1f18 <vfprintf+0x672>
    1f96:	63 96       	adiw	r28, 0x13	; 19
    1f98:	e2 e1       	ldi	r30, 0x12	; 18
    1f9a:	0c 94 0d 10 	jmp	0x201a	; 0x201a <__epilogue_restores__>

00001f9e <__udivmodsi4>:
    1f9e:	a1 e2       	ldi	r26, 0x21	; 33
    1fa0:	1a 2e       	mov	r1, r26
    1fa2:	aa 1b       	sub	r26, r26
    1fa4:	bb 1b       	sub	r27, r27
    1fa6:	fd 01       	movw	r30, r26
    1fa8:	0d c0       	rjmp	.+26     	; 0x1fc4 <__udivmodsi4_ep>

00001faa <__udivmodsi4_loop>:
    1faa:	aa 1f       	adc	r26, r26
    1fac:	bb 1f       	adc	r27, r27
    1fae:	ee 1f       	adc	r30, r30
    1fb0:	ff 1f       	adc	r31, r31
    1fb2:	a2 17       	cp	r26, r18
    1fb4:	b3 07       	cpc	r27, r19
    1fb6:	e4 07       	cpc	r30, r20
    1fb8:	f5 07       	cpc	r31, r21
    1fba:	20 f0       	brcs	.+8      	; 0x1fc4 <__udivmodsi4_ep>
    1fbc:	a2 1b       	sub	r26, r18
    1fbe:	b3 0b       	sbc	r27, r19
    1fc0:	e4 0b       	sbc	r30, r20
    1fc2:	f5 0b       	sbc	r31, r21

00001fc4 <__udivmodsi4_ep>:
    1fc4:	66 1f       	adc	r22, r22
    1fc6:	77 1f       	adc	r23, r23
    1fc8:	88 1f       	adc	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	1a 94       	dec	r1
    1fce:	69 f7       	brne	.-38     	; 0x1faa <__udivmodsi4_loop>
    1fd0:	60 95       	com	r22
    1fd2:	70 95       	com	r23
    1fd4:	80 95       	com	r24
    1fd6:	90 95       	com	r25
    1fd8:	9b 01       	movw	r18, r22
    1fda:	ac 01       	movw	r20, r24
    1fdc:	bd 01       	movw	r22, r26
    1fde:	cf 01       	movw	r24, r30
    1fe0:	08 95       	ret

00001fe2 <__prologue_saves__>:
    1fe2:	2f 92       	push	r2
    1fe4:	3f 92       	push	r3
    1fe6:	4f 92       	push	r4
    1fe8:	5f 92       	push	r5
    1fea:	6f 92       	push	r6
    1fec:	7f 92       	push	r7
    1fee:	8f 92       	push	r8
    1ff0:	9f 92       	push	r9
    1ff2:	af 92       	push	r10
    1ff4:	bf 92       	push	r11
    1ff6:	cf 92       	push	r12
    1ff8:	df 92       	push	r13
    1ffa:	ef 92       	push	r14
    1ffc:	ff 92       	push	r15
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	cd b7       	in	r28, 0x3d	; 61
    2008:	de b7       	in	r29, 0x3e	; 62
    200a:	ca 1b       	sub	r28, r26
    200c:	db 0b       	sbc	r29, r27
    200e:	0f b6       	in	r0, 0x3f	; 63
    2010:	f8 94       	cli
    2012:	de bf       	out	0x3e, r29	; 62
    2014:	0f be       	out	0x3f, r0	; 63
    2016:	cd bf       	out	0x3d, r28	; 61
    2018:	09 94       	ijmp

0000201a <__epilogue_restores__>:
    201a:	2a 88       	ldd	r2, Y+18	; 0x12
    201c:	39 88       	ldd	r3, Y+17	; 0x11
    201e:	48 88       	ldd	r4, Y+16	; 0x10
    2020:	5f 84       	ldd	r5, Y+15	; 0x0f
    2022:	6e 84       	ldd	r6, Y+14	; 0x0e
    2024:	7d 84       	ldd	r7, Y+13	; 0x0d
    2026:	8c 84       	ldd	r8, Y+12	; 0x0c
    2028:	9b 84       	ldd	r9, Y+11	; 0x0b
    202a:	aa 84       	ldd	r10, Y+10	; 0x0a
    202c:	b9 84       	ldd	r11, Y+9	; 0x09
    202e:	c8 84       	ldd	r12, Y+8	; 0x08
    2030:	df 80       	ldd	r13, Y+7	; 0x07
    2032:	ee 80       	ldd	r14, Y+6	; 0x06
    2034:	fd 80       	ldd	r15, Y+5	; 0x05
    2036:	0c 81       	ldd	r16, Y+4	; 0x04
    2038:	1b 81       	ldd	r17, Y+3	; 0x03
    203a:	aa 81       	ldd	r26, Y+2	; 0x02
    203c:	b9 81       	ldd	r27, Y+1	; 0x01
    203e:	ce 0f       	add	r28, r30
    2040:	d1 1d       	adc	r29, r1
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	f8 94       	cli
    2046:	de bf       	out	0x3e, r29	; 62
    2048:	0f be       	out	0x3f, r0	; 63
    204a:	cd bf       	out	0x3d, r28	; 61
    204c:	ed 01       	movw	r28, r26
    204e:	08 95       	ret

00002050 <do_rand>:
    2050:	8f 92       	push	r8
    2052:	9f 92       	push	r9
    2054:	af 92       	push	r10
    2056:	bf 92       	push	r11
    2058:	cf 92       	push	r12
    205a:	df 92       	push	r13
    205c:	ef 92       	push	r14
    205e:	ff 92       	push	r15
    2060:	cf 93       	push	r28
    2062:	df 93       	push	r29
    2064:	ec 01       	movw	r28, r24
    2066:	68 81       	ld	r22, Y
    2068:	79 81       	ldd	r23, Y+1	; 0x01
    206a:	8a 81       	ldd	r24, Y+2	; 0x02
    206c:	9b 81       	ldd	r25, Y+3	; 0x03
    206e:	61 15       	cp	r22, r1
    2070:	71 05       	cpc	r23, r1
    2072:	81 05       	cpc	r24, r1
    2074:	91 05       	cpc	r25, r1
    2076:	21 f4       	brne	.+8      	; 0x2080 <do_rand+0x30>
    2078:	64 e2       	ldi	r22, 0x24	; 36
    207a:	79 ed       	ldi	r23, 0xD9	; 217
    207c:	8b e5       	ldi	r24, 0x5B	; 91
    207e:	97 e0       	ldi	r25, 0x07	; 7
    2080:	2d e1       	ldi	r18, 0x1D	; 29
    2082:	33 ef       	ldi	r19, 0xF3	; 243
    2084:	41 e0       	ldi	r20, 0x01	; 1
    2086:	50 e0       	ldi	r21, 0x00	; 0
    2088:	0e 94 57 12 	call	0x24ae	; 0x24ae <__divmodsi4>
    208c:	49 01       	movw	r8, r18
    208e:	5a 01       	movw	r10, r20
    2090:	9b 01       	movw	r18, r22
    2092:	ac 01       	movw	r20, r24
    2094:	a7 ea       	ldi	r26, 0xA7	; 167
    2096:	b1 e4       	ldi	r27, 0x41	; 65
    2098:	0e 94 76 12 	call	0x24ec	; 0x24ec <__muluhisi3>
    209c:	6b 01       	movw	r12, r22
    209e:	7c 01       	movw	r14, r24
    20a0:	ac ee       	ldi	r26, 0xEC	; 236
    20a2:	b4 ef       	ldi	r27, 0xF4	; 244
    20a4:	a5 01       	movw	r20, r10
    20a6:	94 01       	movw	r18, r8
    20a8:	0e 94 84 12 	call	0x2508	; 0x2508 <__mulohisi3>
    20ac:	dc 01       	movw	r26, r24
    20ae:	cb 01       	movw	r24, r22
    20b0:	8c 0d       	add	r24, r12
    20b2:	9d 1d       	adc	r25, r13
    20b4:	ae 1d       	adc	r26, r14
    20b6:	bf 1d       	adc	r27, r15
    20b8:	b7 ff       	sbrs	r27, 7
    20ba:	03 c0       	rjmp	.+6      	; 0x20c2 <do_rand+0x72>
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	a1 09       	sbc	r26, r1
    20c0:	b0 48       	sbci	r27, 0x80	; 128
    20c2:	88 83       	st	Y, r24
    20c4:	99 83       	std	Y+1, r25	; 0x01
    20c6:	aa 83       	std	Y+2, r26	; 0x02
    20c8:	bb 83       	std	Y+3, r27	; 0x03
    20ca:	9f 77       	andi	r25, 0x7F	; 127
    20cc:	df 91       	pop	r29
    20ce:	cf 91       	pop	r28
    20d0:	ff 90       	pop	r15
    20d2:	ef 90       	pop	r14
    20d4:	df 90       	pop	r13
    20d6:	cf 90       	pop	r12
    20d8:	bf 90       	pop	r11
    20da:	af 90       	pop	r10
    20dc:	9f 90       	pop	r9
    20de:	8f 90       	pop	r8
    20e0:	08 95       	ret

000020e2 <rand_r>:
    20e2:	0e 94 28 10 	call	0x2050	; 0x2050 <do_rand>
    20e6:	08 95       	ret

000020e8 <rand>:
    20e8:	80 e0       	ldi	r24, 0x00	; 0
    20ea:	92 e0       	ldi	r25, 0x02	; 2
    20ec:	0e 94 28 10 	call	0x2050	; 0x2050 <do_rand>
    20f0:	08 95       	ret

000020f2 <srand>:
    20f2:	a0 e0       	ldi	r26, 0x00	; 0
    20f4:	b0 e0       	ldi	r27, 0x00	; 0
    20f6:	80 93 00 02 	sts	0x0200, r24
    20fa:	90 93 01 02 	sts	0x0201, r25
    20fe:	a0 93 02 02 	sts	0x0202, r26
    2102:	b0 93 03 02 	sts	0x0203, r27
    2106:	08 95       	ret

00002108 <__ftoa_engine>:
    2108:	28 30       	cpi	r18, 0x08	; 8
    210a:	08 f0       	brcs	.+2      	; 0x210e <__ftoa_engine+0x6>
    210c:	27 e0       	ldi	r18, 0x07	; 7
    210e:	33 27       	eor	r19, r19
    2110:	da 01       	movw	r26, r20
    2112:	99 0f       	add	r25, r25
    2114:	31 1d       	adc	r19, r1
    2116:	87 fd       	sbrc	r24, 7
    2118:	91 60       	ori	r25, 0x01	; 1
    211a:	00 96       	adiw	r24, 0x00	; 0
    211c:	61 05       	cpc	r22, r1
    211e:	71 05       	cpc	r23, r1
    2120:	39 f4       	brne	.+14     	; 0x2130 <__ftoa_engine+0x28>
    2122:	32 60       	ori	r19, 0x02	; 2
    2124:	2e 5f       	subi	r18, 0xFE	; 254
    2126:	3d 93       	st	X+, r19
    2128:	30 e3       	ldi	r19, 0x30	; 48
    212a:	2a 95       	dec	r18
    212c:	e1 f7       	brne	.-8      	; 0x2126 <__ftoa_engine+0x1e>
    212e:	08 95       	ret
    2130:	9f 3f       	cpi	r25, 0xFF	; 255
    2132:	30 f0       	brcs	.+12     	; 0x2140 <__ftoa_engine+0x38>
    2134:	80 38       	cpi	r24, 0x80	; 128
    2136:	71 05       	cpc	r23, r1
    2138:	61 05       	cpc	r22, r1
    213a:	09 f0       	breq	.+2      	; 0x213e <__ftoa_engine+0x36>
    213c:	3c 5f       	subi	r19, 0xFC	; 252
    213e:	3c 5f       	subi	r19, 0xFC	; 252
    2140:	3d 93       	st	X+, r19
    2142:	91 30       	cpi	r25, 0x01	; 1
    2144:	08 f0       	brcs	.+2      	; 0x2148 <__ftoa_engine+0x40>
    2146:	80 68       	ori	r24, 0x80	; 128
    2148:	91 1d       	adc	r25, r1
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	1f 93       	push	r17
    2150:	0f 93       	push	r16
    2152:	ff 92       	push	r15
    2154:	ef 92       	push	r14
    2156:	19 2f       	mov	r17, r25
    2158:	98 7f       	andi	r25, 0xF8	; 248
    215a:	96 95       	lsr	r25
    215c:	e9 2f       	mov	r30, r25
    215e:	96 95       	lsr	r25
    2160:	96 95       	lsr	r25
    2162:	e9 0f       	add	r30, r25
    2164:	ff 27       	eor	r31, r31
    2166:	ea 56       	subi	r30, 0x6A	; 106
    2168:	fe 4f       	sbci	r31, 0xFE	; 254
    216a:	99 27       	eor	r25, r25
    216c:	33 27       	eor	r19, r19
    216e:	ee 24       	eor	r14, r14
    2170:	ff 24       	eor	r15, r15
    2172:	a7 01       	movw	r20, r14
    2174:	e7 01       	movw	r28, r14
    2176:	05 90       	lpm	r0, Z+
    2178:	08 94       	sec
    217a:	07 94       	ror	r0
    217c:	28 f4       	brcc	.+10     	; 0x2188 <__ftoa_engine+0x80>
    217e:	36 0f       	add	r19, r22
    2180:	e7 1e       	adc	r14, r23
    2182:	f8 1e       	adc	r15, r24
    2184:	49 1f       	adc	r20, r25
    2186:	51 1d       	adc	r21, r1
    2188:	66 0f       	add	r22, r22
    218a:	77 1f       	adc	r23, r23
    218c:	88 1f       	adc	r24, r24
    218e:	99 1f       	adc	r25, r25
    2190:	06 94       	lsr	r0
    2192:	a1 f7       	brne	.-24     	; 0x217c <__ftoa_engine+0x74>
    2194:	05 90       	lpm	r0, Z+
    2196:	07 94       	ror	r0
    2198:	28 f4       	brcc	.+10     	; 0x21a4 <__ftoa_engine+0x9c>
    219a:	e7 0e       	add	r14, r23
    219c:	f8 1e       	adc	r15, r24
    219e:	49 1f       	adc	r20, r25
    21a0:	56 1f       	adc	r21, r22
    21a2:	c1 1d       	adc	r28, r1
    21a4:	77 0f       	add	r23, r23
    21a6:	88 1f       	adc	r24, r24
    21a8:	99 1f       	adc	r25, r25
    21aa:	66 1f       	adc	r22, r22
    21ac:	06 94       	lsr	r0
    21ae:	a1 f7       	brne	.-24     	; 0x2198 <__ftoa_engine+0x90>
    21b0:	05 90       	lpm	r0, Z+
    21b2:	07 94       	ror	r0
    21b4:	28 f4       	brcc	.+10     	; 0x21c0 <__ftoa_engine+0xb8>
    21b6:	f8 0e       	add	r15, r24
    21b8:	49 1f       	adc	r20, r25
    21ba:	56 1f       	adc	r21, r22
    21bc:	c7 1f       	adc	r28, r23
    21be:	d1 1d       	adc	r29, r1
    21c0:	88 0f       	add	r24, r24
    21c2:	99 1f       	adc	r25, r25
    21c4:	66 1f       	adc	r22, r22
    21c6:	77 1f       	adc	r23, r23
    21c8:	06 94       	lsr	r0
    21ca:	a1 f7       	brne	.-24     	; 0x21b4 <__ftoa_engine+0xac>
    21cc:	05 90       	lpm	r0, Z+
    21ce:	07 94       	ror	r0
    21d0:	20 f4       	brcc	.+8      	; 0x21da <__ftoa_engine+0xd2>
    21d2:	49 0f       	add	r20, r25
    21d4:	56 1f       	adc	r21, r22
    21d6:	c7 1f       	adc	r28, r23
    21d8:	d8 1f       	adc	r29, r24
    21da:	99 0f       	add	r25, r25
    21dc:	66 1f       	adc	r22, r22
    21de:	77 1f       	adc	r23, r23
    21e0:	88 1f       	adc	r24, r24
    21e2:	06 94       	lsr	r0
    21e4:	a9 f7       	brne	.-22     	; 0x21d0 <__ftoa_engine+0xc8>
    21e6:	84 91       	lpm	r24, Z
    21e8:	10 95       	com	r17
    21ea:	17 70       	andi	r17, 0x07	; 7
    21ec:	41 f0       	breq	.+16     	; 0x21fe <__ftoa_engine+0xf6>
    21ee:	d6 95       	lsr	r29
    21f0:	c7 95       	ror	r28
    21f2:	57 95       	ror	r21
    21f4:	47 95       	ror	r20
    21f6:	f7 94       	ror	r15
    21f8:	e7 94       	ror	r14
    21fa:	1a 95       	dec	r17
    21fc:	c1 f7       	brne	.-16     	; 0x21ee <__ftoa_engine+0xe6>
    21fe:	ec e3       	ldi	r30, 0x3C	; 60
    2200:	f1 e0       	ldi	r31, 0x01	; 1
    2202:	68 94       	set
    2204:	15 90       	lpm	r1, Z+
    2206:	15 91       	lpm	r17, Z+
    2208:	35 91       	lpm	r19, Z+
    220a:	65 91       	lpm	r22, Z+
    220c:	95 91       	lpm	r25, Z+
    220e:	05 90       	lpm	r0, Z+
    2210:	7f e2       	ldi	r23, 0x2F	; 47
    2212:	73 95       	inc	r23
    2214:	e1 18       	sub	r14, r1
    2216:	f1 0a       	sbc	r15, r17
    2218:	43 0b       	sbc	r20, r19
    221a:	56 0b       	sbc	r21, r22
    221c:	c9 0b       	sbc	r28, r25
    221e:	d0 09       	sbc	r29, r0
    2220:	c0 f7       	brcc	.-16     	; 0x2212 <__stack+0x13>
    2222:	e1 0c       	add	r14, r1
    2224:	f1 1e       	adc	r15, r17
    2226:	43 1f       	adc	r20, r19
    2228:	56 1f       	adc	r21, r22
    222a:	c9 1f       	adc	r28, r25
    222c:	d0 1d       	adc	r29, r0
    222e:	7e f4       	brtc	.+30     	; 0x224e <__stack+0x4f>
    2230:	70 33       	cpi	r23, 0x30	; 48
    2232:	11 f4       	brne	.+4      	; 0x2238 <__stack+0x39>
    2234:	8a 95       	dec	r24
    2236:	e6 cf       	rjmp	.-52     	; 0x2204 <__stack+0x5>
    2238:	e8 94       	clt
    223a:	01 50       	subi	r16, 0x01	; 1
    223c:	30 f0       	brcs	.+12     	; 0x224a <__stack+0x4b>
    223e:	08 0f       	add	r16, r24
    2240:	0a f4       	brpl	.+2      	; 0x2244 <__stack+0x45>
    2242:	00 27       	eor	r16, r16
    2244:	02 17       	cp	r16, r18
    2246:	08 f4       	brcc	.+2      	; 0x224a <__stack+0x4b>
    2248:	20 2f       	mov	r18, r16
    224a:	23 95       	inc	r18
    224c:	02 2f       	mov	r16, r18
    224e:	7a 33       	cpi	r23, 0x3A	; 58
    2250:	28 f0       	brcs	.+10     	; 0x225c <__stack+0x5d>
    2252:	79 e3       	ldi	r23, 0x39	; 57
    2254:	7d 93       	st	X+, r23
    2256:	2a 95       	dec	r18
    2258:	e9 f7       	brne	.-6      	; 0x2254 <__stack+0x55>
    225a:	10 c0       	rjmp	.+32     	; 0x227c <__stack+0x7d>
    225c:	7d 93       	st	X+, r23
    225e:	2a 95       	dec	r18
    2260:	89 f6       	brne	.-94     	; 0x2204 <__stack+0x5>
    2262:	06 94       	lsr	r0
    2264:	97 95       	ror	r25
    2266:	67 95       	ror	r22
    2268:	37 95       	ror	r19
    226a:	17 95       	ror	r17
    226c:	17 94       	ror	r1
    226e:	e1 18       	sub	r14, r1
    2270:	f1 0a       	sbc	r15, r17
    2272:	43 0b       	sbc	r20, r19
    2274:	56 0b       	sbc	r21, r22
    2276:	c9 0b       	sbc	r28, r25
    2278:	d0 09       	sbc	r29, r0
    227a:	98 f0       	brcs	.+38     	; 0x22a2 <__stack+0xa3>
    227c:	23 95       	inc	r18
    227e:	7e 91       	ld	r23, -X
    2280:	73 95       	inc	r23
    2282:	7a 33       	cpi	r23, 0x3A	; 58
    2284:	08 f0       	brcs	.+2      	; 0x2288 <__stack+0x89>
    2286:	70 e3       	ldi	r23, 0x30	; 48
    2288:	7c 93       	st	X, r23
    228a:	20 13       	cpse	r18, r16
    228c:	b8 f7       	brcc	.-18     	; 0x227c <__stack+0x7d>
    228e:	7e 91       	ld	r23, -X
    2290:	70 61       	ori	r23, 0x10	; 16
    2292:	7d 93       	st	X+, r23
    2294:	30 f0       	brcs	.+12     	; 0x22a2 <__stack+0xa3>
    2296:	83 95       	inc	r24
    2298:	71 e3       	ldi	r23, 0x31	; 49
    229a:	7d 93       	st	X+, r23
    229c:	70 e3       	ldi	r23, 0x30	; 48
    229e:	2a 95       	dec	r18
    22a0:	e1 f7       	brne	.-8      	; 0x229a <__stack+0x9b>
    22a2:	11 24       	eor	r1, r1
    22a4:	ef 90       	pop	r14
    22a6:	ff 90       	pop	r15
    22a8:	0f 91       	pop	r16
    22aa:	1f 91       	pop	r17
    22ac:	cf 91       	pop	r28
    22ae:	df 91       	pop	r29
    22b0:	99 27       	eor	r25, r25
    22b2:	87 fd       	sbrc	r24, 7
    22b4:	90 95       	com	r25
    22b6:	08 95       	ret

000022b8 <strnlen_P>:
    22b8:	fc 01       	movw	r30, r24
    22ba:	05 90       	lpm	r0, Z+
    22bc:	61 50       	subi	r22, 0x01	; 1
    22be:	70 40       	sbci	r23, 0x00	; 0
    22c0:	01 10       	cpse	r0, r1
    22c2:	d8 f7       	brcc	.-10     	; 0x22ba <strnlen_P+0x2>
    22c4:	80 95       	com	r24
    22c6:	90 95       	com	r25
    22c8:	8e 0f       	add	r24, r30
    22ca:	9f 1f       	adc	r25, r31
    22cc:	08 95       	ret

000022ce <memcpy>:
    22ce:	fb 01       	movw	r30, r22
    22d0:	dc 01       	movw	r26, r24
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <memcpy+0xa>
    22d4:	01 90       	ld	r0, Z+
    22d6:	0d 92       	st	X+, r0
    22d8:	41 50       	subi	r20, 0x01	; 1
    22da:	50 40       	sbci	r21, 0x00	; 0
    22dc:	d8 f7       	brcc	.-10     	; 0x22d4 <memcpy+0x6>
    22de:	08 95       	ret

000022e0 <strnlen>:
    22e0:	fc 01       	movw	r30, r24
    22e2:	61 50       	subi	r22, 0x01	; 1
    22e4:	70 40       	sbci	r23, 0x00	; 0
    22e6:	01 90       	ld	r0, Z+
    22e8:	01 10       	cpse	r0, r1
    22ea:	d8 f7       	brcc	.-10     	; 0x22e2 <strnlen+0x2>
    22ec:	80 95       	com	r24
    22ee:	90 95       	com	r25
    22f0:	8e 0f       	add	r24, r30
    22f2:	9f 1f       	adc	r25, r31
    22f4:	08 95       	ret

000022f6 <fputc>:
    22f6:	0f 93       	push	r16
    22f8:	1f 93       	push	r17
    22fa:	cf 93       	push	r28
    22fc:	df 93       	push	r29
    22fe:	fb 01       	movw	r30, r22
    2300:	23 81       	ldd	r18, Z+3	; 0x03
    2302:	21 fd       	sbrc	r18, 1
    2304:	03 c0       	rjmp	.+6      	; 0x230c <fputc+0x16>
    2306:	8f ef       	ldi	r24, 0xFF	; 255
    2308:	9f ef       	ldi	r25, 0xFF	; 255
    230a:	28 c0       	rjmp	.+80     	; 0x235c <fputc+0x66>
    230c:	22 ff       	sbrs	r18, 2
    230e:	16 c0       	rjmp	.+44     	; 0x233c <fputc+0x46>
    2310:	46 81       	ldd	r20, Z+6	; 0x06
    2312:	57 81       	ldd	r21, Z+7	; 0x07
    2314:	24 81       	ldd	r18, Z+4	; 0x04
    2316:	35 81       	ldd	r19, Z+5	; 0x05
    2318:	42 17       	cp	r20, r18
    231a:	53 07       	cpc	r21, r19
    231c:	44 f4       	brge	.+16     	; 0x232e <fputc+0x38>
    231e:	a0 81       	ld	r26, Z
    2320:	b1 81       	ldd	r27, Z+1	; 0x01
    2322:	9d 01       	movw	r18, r26
    2324:	2f 5f       	subi	r18, 0xFF	; 255
    2326:	3f 4f       	sbci	r19, 0xFF	; 255
    2328:	31 83       	std	Z+1, r19	; 0x01
    232a:	20 83       	st	Z, r18
    232c:	8c 93       	st	X, r24
    232e:	26 81       	ldd	r18, Z+6	; 0x06
    2330:	37 81       	ldd	r19, Z+7	; 0x07
    2332:	2f 5f       	subi	r18, 0xFF	; 255
    2334:	3f 4f       	sbci	r19, 0xFF	; 255
    2336:	37 83       	std	Z+7, r19	; 0x07
    2338:	26 83       	std	Z+6, r18	; 0x06
    233a:	10 c0       	rjmp	.+32     	; 0x235c <fputc+0x66>
    233c:	eb 01       	movw	r28, r22
    233e:	09 2f       	mov	r16, r25
    2340:	18 2f       	mov	r17, r24
    2342:	00 84       	ldd	r0, Z+8	; 0x08
    2344:	f1 85       	ldd	r31, Z+9	; 0x09
    2346:	e0 2d       	mov	r30, r0
    2348:	09 95       	icall
    234a:	89 2b       	or	r24, r25
    234c:	e1 f6       	brne	.-72     	; 0x2306 <fputc+0x10>
    234e:	8e 81       	ldd	r24, Y+6	; 0x06
    2350:	9f 81       	ldd	r25, Y+7	; 0x07
    2352:	01 96       	adiw	r24, 0x01	; 1
    2354:	9f 83       	std	Y+7, r25	; 0x07
    2356:	8e 83       	std	Y+6, r24	; 0x06
    2358:	81 2f       	mov	r24, r17
    235a:	90 2f       	mov	r25, r16
    235c:	df 91       	pop	r29
    235e:	cf 91       	pop	r28
    2360:	1f 91       	pop	r17
    2362:	0f 91       	pop	r16
    2364:	08 95       	ret

00002366 <printf>:
    2366:	a0 e0       	ldi	r26, 0x00	; 0
    2368:	b0 e0       	ldi	r27, 0x00	; 0
    236a:	e9 eb       	ldi	r30, 0xB9	; 185
    236c:	f1 e1       	ldi	r31, 0x11	; 17
    236e:	0c 94 01 10 	jmp	0x2002	; 0x2002 <__prologue_saves__+0x20>
    2372:	ae 01       	movw	r20, r28
    2374:	4b 5f       	subi	r20, 0xFB	; 251
    2376:	5f 4f       	sbci	r21, 0xFF	; 255
    2378:	fa 01       	movw	r30, r20
    237a:	61 91       	ld	r22, Z+
    237c:	71 91       	ld	r23, Z+
    237e:	af 01       	movw	r20, r30
    2380:	80 91 42 06 	lds	r24, 0x0642
    2384:	90 91 43 06 	lds	r25, 0x0643
    2388:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <vfprintf>
    238c:	e2 e0       	ldi	r30, 0x02	; 2
    238e:	0c 94 1d 10 	jmp	0x203a	; 0x203a <__epilogue_restores__+0x20>

00002392 <puts>:
    2392:	0f 93       	push	r16
    2394:	1f 93       	push	r17
    2396:	cf 93       	push	r28
    2398:	df 93       	push	r29
    239a:	e0 91 42 06 	lds	r30, 0x0642
    239e:	f0 91 43 06 	lds	r31, 0x0643
    23a2:	23 81       	ldd	r18, Z+3	; 0x03
    23a4:	21 ff       	sbrs	r18, 1
    23a6:	1b c0       	rjmp	.+54     	; 0x23de <puts+0x4c>
    23a8:	8c 01       	movw	r16, r24
    23aa:	d0 e0       	ldi	r29, 0x00	; 0
    23ac:	c0 e0       	ldi	r28, 0x00	; 0
    23ae:	f8 01       	movw	r30, r16
    23b0:	81 91       	ld	r24, Z+
    23b2:	8f 01       	movw	r16, r30
    23b4:	60 91 42 06 	lds	r22, 0x0642
    23b8:	70 91 43 06 	lds	r23, 0x0643
    23bc:	db 01       	movw	r26, r22
    23be:	18 96       	adiw	r26, 0x08	; 8
    23c0:	ed 91       	ld	r30, X+
    23c2:	fc 91       	ld	r31, X
    23c4:	19 97       	sbiw	r26, 0x09	; 9
    23c6:	88 23       	and	r24, r24
    23c8:	31 f0       	breq	.+12     	; 0x23d6 <puts+0x44>
    23ca:	09 95       	icall
    23cc:	89 2b       	or	r24, r25
    23ce:	79 f3       	breq	.-34     	; 0x23ae <puts+0x1c>
    23d0:	df ef       	ldi	r29, 0xFF	; 255
    23d2:	cf ef       	ldi	r28, 0xFF	; 255
    23d4:	ec cf       	rjmp	.-40     	; 0x23ae <puts+0x1c>
    23d6:	8a e0       	ldi	r24, 0x0A	; 10
    23d8:	09 95       	icall
    23da:	89 2b       	or	r24, r25
    23dc:	19 f0       	breq	.+6      	; 0x23e4 <puts+0x52>
    23de:	8f ef       	ldi	r24, 0xFF	; 255
    23e0:	9f ef       	ldi	r25, 0xFF	; 255
    23e2:	02 c0       	rjmp	.+4      	; 0x23e8 <puts+0x56>
    23e4:	8d 2f       	mov	r24, r29
    23e6:	9c 2f       	mov	r25, r28
    23e8:	df 91       	pop	r29
    23ea:	cf 91       	pop	r28
    23ec:	1f 91       	pop	r17
    23ee:	0f 91       	pop	r16
    23f0:	08 95       	ret

000023f2 <__ultoa_invert>:
    23f2:	fa 01       	movw	r30, r20
    23f4:	aa 27       	eor	r26, r26
    23f6:	28 30       	cpi	r18, 0x08	; 8
    23f8:	51 f1       	breq	.+84     	; 0x244e <__ultoa_invert+0x5c>
    23fa:	20 31       	cpi	r18, 0x10	; 16
    23fc:	81 f1       	breq	.+96     	; 0x245e <__ultoa_invert+0x6c>
    23fe:	e8 94       	clt
    2400:	6f 93       	push	r22
    2402:	6e 7f       	andi	r22, 0xFE	; 254
    2404:	6e 5f       	subi	r22, 0xFE	; 254
    2406:	7f 4f       	sbci	r23, 0xFF	; 255
    2408:	8f 4f       	sbci	r24, 0xFF	; 255
    240a:	9f 4f       	sbci	r25, 0xFF	; 255
    240c:	af 4f       	sbci	r26, 0xFF	; 255
    240e:	b1 e0       	ldi	r27, 0x01	; 1
    2410:	3e d0       	rcall	.+124    	; 0x248e <__ultoa_invert+0x9c>
    2412:	b4 e0       	ldi	r27, 0x04	; 4
    2414:	3c d0       	rcall	.+120    	; 0x248e <__ultoa_invert+0x9c>
    2416:	67 0f       	add	r22, r23
    2418:	78 1f       	adc	r23, r24
    241a:	89 1f       	adc	r24, r25
    241c:	9a 1f       	adc	r25, r26
    241e:	a1 1d       	adc	r26, r1
    2420:	68 0f       	add	r22, r24
    2422:	79 1f       	adc	r23, r25
    2424:	8a 1f       	adc	r24, r26
    2426:	91 1d       	adc	r25, r1
    2428:	a1 1d       	adc	r26, r1
    242a:	6a 0f       	add	r22, r26
    242c:	71 1d       	adc	r23, r1
    242e:	81 1d       	adc	r24, r1
    2430:	91 1d       	adc	r25, r1
    2432:	a1 1d       	adc	r26, r1
    2434:	20 d0       	rcall	.+64     	; 0x2476 <__ultoa_invert+0x84>
    2436:	09 f4       	brne	.+2      	; 0x243a <__ultoa_invert+0x48>
    2438:	68 94       	set
    243a:	3f 91       	pop	r19
    243c:	2a e0       	ldi	r18, 0x0A	; 10
    243e:	26 9f       	mul	r18, r22
    2440:	11 24       	eor	r1, r1
    2442:	30 19       	sub	r19, r0
    2444:	30 5d       	subi	r19, 0xD0	; 208
    2446:	31 93       	st	Z+, r19
    2448:	de f6       	brtc	.-74     	; 0x2400 <__ultoa_invert+0xe>
    244a:	cf 01       	movw	r24, r30
    244c:	08 95       	ret
    244e:	46 2f       	mov	r20, r22
    2450:	47 70       	andi	r20, 0x07	; 7
    2452:	40 5d       	subi	r20, 0xD0	; 208
    2454:	41 93       	st	Z+, r20
    2456:	b3 e0       	ldi	r27, 0x03	; 3
    2458:	0f d0       	rcall	.+30     	; 0x2478 <__ultoa_invert+0x86>
    245a:	c9 f7       	brne	.-14     	; 0x244e <__ultoa_invert+0x5c>
    245c:	f6 cf       	rjmp	.-20     	; 0x244a <__ultoa_invert+0x58>
    245e:	46 2f       	mov	r20, r22
    2460:	4f 70       	andi	r20, 0x0F	; 15
    2462:	40 5d       	subi	r20, 0xD0	; 208
    2464:	4a 33       	cpi	r20, 0x3A	; 58
    2466:	18 f0       	brcs	.+6      	; 0x246e <__ultoa_invert+0x7c>
    2468:	49 5d       	subi	r20, 0xD9	; 217
    246a:	31 fd       	sbrc	r19, 1
    246c:	40 52       	subi	r20, 0x20	; 32
    246e:	41 93       	st	Z+, r20
    2470:	02 d0       	rcall	.+4      	; 0x2476 <__ultoa_invert+0x84>
    2472:	a9 f7       	brne	.-22     	; 0x245e <__ultoa_invert+0x6c>
    2474:	ea cf       	rjmp	.-44     	; 0x244a <__ultoa_invert+0x58>
    2476:	b4 e0       	ldi	r27, 0x04	; 4
    2478:	a6 95       	lsr	r26
    247a:	97 95       	ror	r25
    247c:	87 95       	ror	r24
    247e:	77 95       	ror	r23
    2480:	67 95       	ror	r22
    2482:	ba 95       	dec	r27
    2484:	c9 f7       	brne	.-14     	; 0x2478 <__ultoa_invert+0x86>
    2486:	00 97       	sbiw	r24, 0x00	; 0
    2488:	61 05       	cpc	r22, r1
    248a:	71 05       	cpc	r23, r1
    248c:	08 95       	ret
    248e:	9b 01       	movw	r18, r22
    2490:	ac 01       	movw	r20, r24
    2492:	0a 2e       	mov	r0, r26
    2494:	06 94       	lsr	r0
    2496:	57 95       	ror	r21
    2498:	47 95       	ror	r20
    249a:	37 95       	ror	r19
    249c:	27 95       	ror	r18
    249e:	ba 95       	dec	r27
    24a0:	c9 f7       	brne	.-14     	; 0x2494 <__ultoa_invert+0xa2>
    24a2:	62 0f       	add	r22, r18
    24a4:	73 1f       	adc	r23, r19
    24a6:	84 1f       	adc	r24, r20
    24a8:	95 1f       	adc	r25, r21
    24aa:	a0 1d       	adc	r26, r0
    24ac:	08 95       	ret

000024ae <__divmodsi4>:
    24ae:	05 2e       	mov	r0, r21
    24b0:	97 fb       	bst	r25, 7
    24b2:	1e f4       	brtc	.+6      	; 0x24ba <__divmodsi4+0xc>
    24b4:	00 94       	com	r0
    24b6:	0e 94 6e 12 	call	0x24dc	; 0x24dc <__negsi2>
    24ba:	57 fd       	sbrc	r21, 7
    24bc:	07 d0       	rcall	.+14     	; 0x24cc <__divmodsi4_neg2>
    24be:	0e 94 cf 0f 	call	0x1f9e	; 0x1f9e <__udivmodsi4>
    24c2:	07 fc       	sbrc	r0, 7
    24c4:	03 d0       	rcall	.+6      	; 0x24cc <__divmodsi4_neg2>
    24c6:	4e f4       	brtc	.+18     	; 0x24da <__divmodsi4_exit>
    24c8:	0c 94 6e 12 	jmp	0x24dc	; 0x24dc <__negsi2>

000024cc <__divmodsi4_neg2>:
    24cc:	50 95       	com	r21
    24ce:	40 95       	com	r20
    24d0:	30 95       	com	r19
    24d2:	21 95       	neg	r18
    24d4:	3f 4f       	sbci	r19, 0xFF	; 255
    24d6:	4f 4f       	sbci	r20, 0xFF	; 255
    24d8:	5f 4f       	sbci	r21, 0xFF	; 255

000024da <__divmodsi4_exit>:
    24da:	08 95       	ret

000024dc <__negsi2>:
    24dc:	90 95       	com	r25
    24de:	80 95       	com	r24
    24e0:	70 95       	com	r23
    24e2:	61 95       	neg	r22
    24e4:	7f 4f       	sbci	r23, 0xFF	; 255
    24e6:	8f 4f       	sbci	r24, 0xFF	; 255
    24e8:	9f 4f       	sbci	r25, 0xFF	; 255
    24ea:	08 95       	ret

000024ec <__muluhisi3>:
    24ec:	0e 94 89 12 	call	0x2512	; 0x2512 <__umulhisi3>
    24f0:	a5 9f       	mul	r26, r21
    24f2:	90 0d       	add	r25, r0
    24f4:	b4 9f       	mul	r27, r20
    24f6:	90 0d       	add	r25, r0
    24f8:	a4 9f       	mul	r26, r20
    24fa:	80 0d       	add	r24, r0
    24fc:	91 1d       	adc	r25, r1
    24fe:	11 24       	eor	r1, r1
    2500:	08 95       	ret

00002502 <__mulshisi3>:
    2502:	b7 ff       	sbrs	r27, 7
    2504:	0c 94 76 12 	jmp	0x24ec	; 0x24ec <__muluhisi3>

00002508 <__mulohisi3>:
    2508:	0e 94 76 12 	call	0x24ec	; 0x24ec <__muluhisi3>
    250c:	82 1b       	sub	r24, r18
    250e:	93 0b       	sbc	r25, r19
    2510:	08 95       	ret

00002512 <__umulhisi3>:
    2512:	a2 9f       	mul	r26, r18
    2514:	b0 01       	movw	r22, r0
    2516:	b3 9f       	mul	r27, r19
    2518:	c0 01       	movw	r24, r0
    251a:	a3 9f       	mul	r26, r19
    251c:	70 0d       	add	r23, r0
    251e:	81 1d       	adc	r24, r1
    2520:	11 24       	eor	r1, r1
    2522:	91 1d       	adc	r25, r1
    2524:	b2 9f       	mul	r27, r18
    2526:	70 0d       	add	r23, r0
    2528:	81 1d       	adc	r24, r1
    252a:	11 24       	eor	r1, r1
    252c:	91 1d       	adc	r25, r1
    252e:	08 95       	ret

00002530 <_exit>:
    2530:	f8 94       	cli

00002532 <__stop_program>:
    2532:	ff cf       	rjmp	.-2      	; 0x2532 <__stop_program>
