
ATMOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ae  00800200  00002662  000026f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002662  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000bb  008002ae  008002ae  000027a4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000027a4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002800  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000358  00000000  00000000  00002840  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000287b  00000000  00000000  00002b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001207  00000000  00000000  00005413  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001181  00000000  00000000  0000661a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008b4  00000000  00000000  0000779c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000097d  00000000  00000000  00008050  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002394  00000000  00000000  000089cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000300  00000000  00000000  0000ad61  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__ctors_end>
       4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      10:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      14:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      18:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      1c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      20:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      24:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      28:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      30:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      34:	0c 94 a4 0a 	jmp	0x1548	; 0x1548 <__vector_13>
      38:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      3c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      40:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      44:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      48:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      4c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      50:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      54:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      58:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      5c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      60:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      64:	0c 94 dc 0a 	jmp	0x15b8	; 0x15b8 <__vector_25>
      68:	0c 94 c4 0a 	jmp	0x1588	; 0x1588 <__vector_26>
      6c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      70:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      74:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      78:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      7c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      80:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      84:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      88:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      8c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      90:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      94:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      98:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      9c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a8:	0c 94 b3 0a 	jmp	0x1566	; 0x1566 <__vector_42>
      ac:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      bc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      cc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      dc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      ec:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      fc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     100:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     104:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     108:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     10c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     110:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     114:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     118:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     11c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     120:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     124:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     128:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     12c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     130:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>

00000134 <__trampolines_end>:
     134:	6e 61       	ori	r22, 0x1E	; 30
     136:	6e 00       	.word	0x006e	; ????

00000138 <__c.2177>:
     138:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     148:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     158:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     168:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     178:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     188:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     198:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     208:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     218:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     228:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000236 <__ctors_end>:
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	d1 e2       	ldi	r29, 0x21	; 33
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61

00000242 <__do_copy_data>:
     242:	12 e0       	ldi	r17, 0x02	; 2
     244:	a0 e0       	ldi	r26, 0x00	; 0
     246:	b2 e0       	ldi	r27, 0x02	; 2
     248:	e2 e6       	ldi	r30, 0x62	; 98
     24a:	f6 e2       	ldi	r31, 0x26	; 38
     24c:	02 c0       	rjmp	.+4      	; 0x252 <__do_copy_data+0x10>
     24e:	05 90       	lpm	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	ae 3a       	cpi	r26, 0xAE	; 174
     254:	b1 07       	cpc	r27, r17
     256:	d9 f7       	brne	.-10     	; 0x24e <__do_copy_data+0xc>

00000258 <__do_clear_bss>:
     258:	23 e0       	ldi	r18, 0x03	; 3
     25a:	ae ea       	ldi	r26, 0xAE	; 174
     25c:	b2 e0       	ldi	r27, 0x02	; 2
     25e:	01 c0       	rjmp	.+2      	; 0x262 <.do_clear_bss_start>

00000260 <.do_clear_bss_loop>:
     260:	1d 92       	st	X+, r1

00000262 <.do_clear_bss_start>:
     262:	a9 36       	cpi	r26, 0x69	; 105
     264:	b2 07       	cpc	r27, r18
     266:	e1 f7       	brne	.-8      	; 0x260 <.do_clear_bss_loop>
     268:	0e 94 61 01 	call	0x2c2	; 0x2c2 <main>
     26c:	0c 94 2f 13 	jmp	0x265e	; 0x265e <_exit>

00000270 <__bad_interrupt>:
     270:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000274 <my_delay_ms>:
char refC[3]={'2','4',0};
	
char sendbuff[100];

void my_delay_ms(int n) {
	while(n--) {
     274:	00 97       	sbiw	r24, 0x00	; 0
     276:	41 f0       	breq	.+16     	; 0x288 <my_delay_ms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     278:	ef e9       	ldi	r30, 0x9F	; 159
     27a:	ff e0       	ldi	r31, 0x0F	; 15
     27c:	31 97       	sbiw	r30, 0x01	; 1
     27e:	f1 f7       	brne	.-4      	; 0x27c <my_delay_ms+0x8>
     280:	00 c0       	rjmp	.+0      	; 0x282 <my_delay_ms+0xe>
     282:	00 00       	nop
     284:	01 97       	sbiw	r24, 0x01	; 1
     286:	c1 f7       	brne	.-16     	; 0x278 <my_delay_ms+0x4>
     288:	08 95       	ret

0000028a <checkChar>:
	}
}

char checkChar(char *ref, char test){
	int j=0;
	while((ref[j]!=test) && (ref[j]!=0)) j++;
     28a:	fc 01       	movw	r30, r24
     28c:	20 81       	ld	r18, Z
     28e:	26 17       	cp	r18, r22
     290:	71 f0       	breq	.+28     	; 0x2ae <checkChar+0x24>
     292:	22 23       	and	r18, r18
     294:	91 f0       	breq	.+36     	; 0x2ba <checkChar+0x30>
     296:	31 96       	adiw	r30, 0x01	; 1
     298:	20 e0       	ldi	r18, 0x00	; 0
     29a:	30 e0       	ldi	r19, 0x00	; 0
     29c:	2f 5f       	subi	r18, 0xFF	; 255
     29e:	3f 4f       	sbci	r19, 0xFF	; 255
     2a0:	91 91       	ld	r25, Z+
     2a2:	96 17       	cp	r25, r22
     2a4:	31 f0       	breq	.+12     	; 0x2b2 <checkChar+0x28>
     2a6:	91 11       	cpse	r25, r1
     2a8:	f9 cf       	rjmp	.-14     	; 0x29c <checkChar+0x12>
	if(ref[j]==0) return 100;
     2aa:	84 e6       	ldi	r24, 0x64	; 100
     2ac:	08 95       	ret
		_delay_ms(1);
	}
}

char checkChar(char *ref, char test){
	int j=0;
     2ae:	20 e0       	ldi	r18, 0x00	; 0
     2b0:	30 e0       	ldi	r19, 0x00	; 0
	while((ref[j]!=test) && (ref[j]!=0)) j++;
	if(ref[j]==0) return 100;
     2b2:	66 23       	and	r22, r22
     2b4:	21 f0       	breq	.+8      	; 0x2be <checkChar+0x34>
	return j;
     2b6:	82 2f       	mov	r24, r18
     2b8:	08 95       	ret
}

char checkChar(char *ref, char test){
	int j=0;
	while((ref[j]!=test) && (ref[j]!=0)) j++;
	if(ref[j]==0) return 100;
     2ba:	84 e6       	ldi	r24, 0x64	; 100
     2bc:	08 95       	ret
     2be:	84 e6       	ldi	r24, 0x64	; 100
	return j;
}
     2c0:	08 95       	ret

000002c2 <main>:

static void APP_Init(void){
	PWR_Init();
     2c2:	0e 94 6f 09 	call	0x12de	; 0x12de <PWR_Init>
	PWR_TurnOn5V();
     2c6:	0e 94 73 09 	call	0x12e6	; 0x12e6 <PWR_TurnOn5V>
	USART0_Init(76800);
     2ca:	60 e0       	ldi	r22, 0x00	; 0
     2cc:	7c e2       	ldi	r23, 0x2C	; 44
     2ce:	81 e0       	ldi	r24, 0x01	; 1
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 61 0a 	call	0x14c2	; 0x14c2 <USART0_Init>
	DDRB |= 0b00010000;
     2d6:	24 9a       	sbi	0x04, 4	; 4
	DDRE |= 0b00001000;
     2d8:	6b 9a       	sbi	0x0d, 3	; 13
	PORTE|= 0b00001000;
     2da:	73 9a       	sbi	0x0e, 3	; 14
	TWI_Init(10000);
     2dc:	60 e1       	ldi	r22, 0x10	; 16
     2de:	77 e2       	ldi	r23, 0x27	; 39
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 85 09 	call	0x130a	; 0x130a <TWI_Init>
	ADC_Init();
     2e8:	0e 94 22 09 	call	0x1244	; 0x1244 <ADC_Init>
	TGS2600_Init();
     2ec:	0e 94 ef 08 	call	0x11de	; 0x11de <TGS2600_Init>
	Si7020_init();
     2f0:	0e 94 4b 08 	call	0x1096	; 0x1096 <Si7020_init>
	printf("BMP280 Status %i\n", BMP280_Init());
     2f4:	0e 94 7f 03 	call	0x6fe	; 0x6fe <BMP280_Init>
     2f8:	1f 92       	push	r1
     2fa:	8f 93       	push	r24
     2fc:	87 e1       	ldi	r24, 0x17	; 23
     2fe:	92 e0       	ldi	r25, 0x02	; 2
     300:	9f 93       	push	r25
     302:	8f 93       	push	r24
     304:	0e 94 68 12 	call	0x24d0	; 0x24d0 <printf>
	BMP280_SetOversampling(4);
     308:	84 e0       	ldi	r24, 0x04	; 4
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	0e 94 5f 04 	call	0x8be	; 0x8be <BMP280_SetOversampling>
	SPI_SlaveInit();
     310:	0e 94 75 09 	call	0x12ea	; 0x12ea <SPI_SlaveInit>

int main(void)
{
  //SYS_Init(); //Commented out until wireless hardware is tuned
  APP_Init();
  printf("\n======================\n");
     314:	89 e2       	ldi	r24, 0x29	; 41
     316:	92 e0       	ldi	r25, 0x02	; 2
     318:	0e 94 7e 12 	call	0x24fc	; 0x24fc <puts>
     31c:	0f 90       	pop	r0
     31e:	0f 90       	pop	r0
     320:	0f 90       	pop	r0
     322:	0f 90       	pop	r0
{

	printf("Top of loop\n");
	//SPI Test
	int i;
	for(i=0;i<=1;i++){
     324:	41 2c       	mov	r4, r1
     326:	31 2c       	mov	r3, r1
		if((i==1) && (checkChar(&ref1[0],buff[0])==100))i=0; 
     328:	0e ea       	ldi	r16, 0xAE	; 174
     32a:	12 e0       	ldi	r17, 0x02	; 2
		buff[i]=SPI_SlaveReceive();
	}
	PORTB |= 0b00010000; //LED on
	printf("Received %s\n",buff);
     32c:	0f 2e       	mov	r0, r31
     32e:	fd e4       	ldi	r31, 0x4D	; 77
     330:	af 2e       	mov	r10, r31
     332:	f2 e0       	ldi	r31, 0x02	; 2
     334:	bf 2e       	mov	r11, r31
     336:	f0 2d       	mov	r31, r0
				case '1':
					dummy = Si7020_readHumidity(&data[0],3);
					sprintf(&sendbuff[0],"%.3F\r",Si7020_calHumidity(&data[0]));
					break;
				default:
					sendbuff[0]='\r';
     338:	0f 2e       	mov	r0, r31
     33a:	fa ef       	ldi	r31, 0xFA	; 250
     33c:	ef 2e       	mov	r14, r31
     33e:	f2 e0       	ldi	r31, 0x02	; 2
     340:	ff 2e       	mov	r15, r31
     342:	f0 2d       	mov	r31, r0
     344:	0f 2e       	mov	r0, r31
     346:	fd e0       	ldi	r31, 0x0D	; 13
     348:	5f 2e       	mov	r5, r31
     34a:	f0 2d       	mov	r31, r0
		case 'H':
			//switch(checkChar(&refH[0],buff[1])){
			switch(buff[1]){
				case '1':
					dummy = Si7020_readHumidity(&data[0],3);
					sprintf(&sendbuff[0],"%.3F\r",Si7020_calHumidity(&data[0]));
     34c:	0f 2e       	mov	r0, r31
     34e:	fa e5       	ldi	r31, 0x5A	; 90
     350:	8f 2e       	mov	r8, r31
     352:	f2 e0       	ldi	r31, 0x02	; 2
     354:	9f 2e       	mov	r9, r31
     356:	f0 2d       	mov	r31, r0
			}
			break;
		default:
			break;
	}
	printf("Sending SPI: \n%s\n",sendbuff);
     358:	0f 2e       	mov	r0, r31
     35a:	f4 e6       	ldi	r31, 0x64	; 100
     35c:	cf 2e       	mov	r12, r31
     35e:	f2 e0       	ldi	r31, 0x02	; 2
     360:	df 2e       	mov	r13, r31
     362:	f0 2d       	mov	r31, r0
     364:	0f 2e       	mov	r0, r31
     366:	fb ef       	ldi	r31, 0xFB	; 251
     368:	6f 2e       	mov	r6, r31
     36a:	f2 e0       	ldi	r31, 0x02	; 2
     36c:	7f 2e       	mov	r7, r31
     36e:	f0 2d       	mov	r31, r0
}

static void APP_TaskHandler(void)
{

	printf("Top of loop\n");
     370:	81 e4       	ldi	r24, 0x41	; 65
     372:	92 e0       	ldi	r25, 0x02	; 2
     374:	0e 94 7e 12 	call	0x24fc	; 0x24fc <puts>
	//SPI Test
	int i;
	for(i=0;i<=1;i++){
     378:	c4 2d       	mov	r28, r4
     37a:	d3 2d       	mov	r29, r3
		if((i==1) && (checkChar(&ref1[0],buff[0])==100))i=0; 
     37c:	c1 30       	cpi	r28, 0x01	; 1
     37e:	d1 05       	cpc	r29, r1
     380:	51 f4       	brne	.+20     	; 0x396 <main+0xd4>
     382:	d8 01       	movw	r26, r16
     384:	6c 91       	ld	r22, X
     386:	80 e0       	ldi	r24, 0x00	; 0
     388:	92 e0       	ldi	r25, 0x02	; 2
     38a:	0e 94 45 01 	call	0x28a	; 0x28a <checkChar>
     38e:	84 36       	cpi	r24, 0x64	; 100
     390:	09 f0       	breq	.+2      	; 0x394 <main+0xd2>
     392:	2c c1       	rjmp	.+600    	; 0x5ec <main+0x32a>
     394:	31 c1       	rjmp	.+610    	; 0x5f8 <main+0x336>
		buff[i]=SPI_SlaveReceive();
     396:	0e 94 79 09 	call	0x12f2	; 0x12f2 <SPI_SlaveReceive>
     39a:	fe 01       	movw	r30, r28
     39c:	e2 55       	subi	r30, 0x52	; 82
     39e:	fd 4f       	sbci	r31, 0xFD	; 253
     3a0:	80 83       	st	Z, r24
{

	printf("Top of loop\n");
	//SPI Test
	int i;
	for(i=0;i<=1;i++){
     3a2:	21 96       	adiw	r28, 0x01	; 1
     3a4:	c2 30       	cpi	r28, 0x02	; 2
     3a6:	d1 05       	cpc	r29, r1
     3a8:	4c f3       	brlt	.-46     	; 0x37c <main+0xba>
		if((i==1) && (checkChar(&ref1[0],buff[0])==100))i=0; 
		buff[i]=SPI_SlaveReceive();
	}
	PORTB |= 0b00010000; //LED on
     3aa:	2c 9a       	sbi	0x05, 4	; 5
	printf("Received %s\n",buff);
     3ac:	1f 93       	push	r17
     3ae:	0f 93       	push	r16
     3b0:	bf 92       	push	r11
     3b2:	af 92       	push	r10
     3b4:	0e 94 68 12 	call	0x24d0	; 0x24d0 <printf>
	char result;
	switch(buff[0]){
     3b8:	0f 90       	pop	r0
     3ba:	0f 90       	pop	r0
     3bc:	0f 90       	pop	r0
     3be:	0f 90       	pop	r0
     3c0:	f8 01       	movw	r30, r16
     3c2:	80 81       	ld	r24, Z
     3c4:	88 34       	cpi	r24, 0x48	; 72
     3c6:	09 f4       	brne	.+2      	; 0x3ca <main+0x108>
     3c8:	a0 c0       	rjmp	.+320    	; 0x50a <main+0x248>
     3ca:	20 f4       	brcc	.+8      	; 0x3d4 <main+0x112>
     3cc:	83 34       	cpi	r24, 0x43	; 67
     3ce:	09 f4       	brne	.+2      	; 0x3d2 <main+0x110>
     3d0:	c1 c0       	rjmp	.+386    	; 0x554 <main+0x292>
     3d2:	f1 c0       	rjmp	.+482    	; 0x5b6 <main+0x2f4>
     3d4:	80 35       	cpi	r24, 0x50	; 80
     3d6:	09 f4       	brne	.+2      	; 0x3da <main+0x118>
     3d8:	6a c0       	rjmp	.+212    	; 0x4ae <main+0x1ec>
     3da:	84 35       	cpi	r24, 0x54	; 84
     3dc:	09 f0       	breq	.+2      	; 0x3e0 <main+0x11e>
     3de:	eb c0       	rjmp	.+470    	; 0x5b6 <main+0x2f4>
		case 'T':
			//switch(checkChar(&refT[0], buff[1])){
			switch(buff[1]){
     3e0:	81 81       	ldd	r24, Z+1	; 0x01
     3e2:	82 33       	cpi	r24, 0x32	; 50
     3e4:	71 f1       	breq	.+92     	; 0x442 <main+0x180>
     3e6:	83 33       	cpi	r24, 0x33	; 51
     3e8:	09 f4       	brne	.+2      	; 0x3ec <main+0x12a>
     3ea:	49 c0       	rjmp	.+146    	; 0x47e <main+0x1bc>
     3ec:	81 33       	cpi	r24, 0x31	; 49
     3ee:	09 f0       	breq	.+2      	; 0x3f2 <main+0x130>
     3f0:	5b c0       	rjmp	.+182    	; 0x4a8 <main+0x1e6>
				case '1':
					result = BMP280_StartMeasurment();
     3f2:	0e 94 65 04 	call	0x8ca	; 0x8ca <BMP280_StartMeasurment>
					if(result!=0){
     3f6:	88 23       	and	r24, r24
     3f8:	49 f0       	breq	.+18     	; 0x40c <main+0x14a>
						my_delay_ms(result);
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 3a 01 	call	0x274	; 0x274 <my_delay_ms>
						result = BMP280_GetTemperatureAndPressure(&T,&P);
     400:	6e e5       	ldi	r22, 0x5E	; 94
     402:	73 e0       	ldi	r23, 0x03	; 3
     404:	86 ee       	ldi	r24, 0xE6	; 230
     406:	92 e0       	ldi	r25, 0x02	; 2
     408:	0e 94 ac 07 	call	0xf58	; 0xf58 <BMP280_GetTemperatureAndPressure>
					}
					sprintf(&sendbuff[0],"%.3F\r",T);
     40c:	80 91 e9 02 	lds	r24, 0x02E9
     410:	8f 93       	push	r24
     412:	80 91 e8 02 	lds	r24, 0x02E8
     416:	8f 93       	push	r24
     418:	80 91 e7 02 	lds	r24, 0x02E7
     41c:	8f 93       	push	r24
     41e:	80 91 e6 02 	lds	r24, 0x02E6
     422:	8f 93       	push	r24
     424:	9f 92       	push	r9
     426:	8f 92       	push	r8
     428:	ff 92       	push	r15
     42a:	ef 92       	push	r14
     42c:	0e 94 ae 12 	call	0x255c	; 0x255c <sprintf>
     430:	ed b7       	in	r30, 0x3d	; 61
     432:	fe b7       	in	r31, 0x3e	; 62
     434:	38 96       	adiw	r30, 0x08	; 8
     436:	0f b6       	in	r0, 0x3f	; 63
     438:	f8 94       	cli
     43a:	fe bf       	out	0x3e, r31	; 62
     43c:	0f be       	out	0x3f, r0	; 63
     43e:	ed bf       	out	0x3d, r30	; 61
     440:	ba c0       	rjmp	.+372    	; 0x5b6 <main+0x2f4>
					break;
				case '2':
					dummy = Si7020_readTemperature(&data[0],3);
     442:	63 e0       	ldi	r22, 0x03	; 3
     444:	8e ee       	ldi	r24, 0xEE	; 238
     446:	92 e0       	ldi	r25, 0x02	; 2
     448:	0e 94 9d 08 	call	0x113a	; 0x113a <Si7020_readTemperature>
     44c:	80 93 f5 02 	sts	0x02F5, r24
					sprintf(&sendbuff[0],"%.3F\r",Si7020_calTemperature(&data[0]));
     450:	8e ee       	ldi	r24, 0xEE	; 238
     452:	92 e0       	ldi	r25, 0x02	; 2
     454:	0e 94 cf 08 	call	0x119e	; 0x119e <Si7020_calTemperature>
     458:	9f 93       	push	r25
     45a:	8f 93       	push	r24
     45c:	7f 93       	push	r23
     45e:	6f 93       	push	r22
     460:	9f 92       	push	r9
     462:	8f 92       	push	r8
     464:	ff 92       	push	r15
     466:	ef 92       	push	r14
     468:	0e 94 ae 12 	call	0x255c	; 0x255c <sprintf>
     46c:	8d b7       	in	r24, 0x3d	; 61
     46e:	9e b7       	in	r25, 0x3e	; 62
     470:	08 96       	adiw	r24, 0x08	; 8
     472:	0f b6       	in	r0, 0x3f	; 63
     474:	f8 94       	cli
     476:	9e bf       	out	0x3e, r25	; 62
     478:	0f be       	out	0x3f, r0	; 63
     47a:	8d bf       	out	0x3d, r24	; 61
     47c:	9c c0       	rjmp	.+312    	; 0x5b6 <main+0x2f4>
					break;
				case '3':
					sprintf(&sendbuff[0],"%.3F\r",ADC_DieTemp());
     47e:	0e 94 4e 09 	call	0x129c	; 0x129c <ADC_DieTemp>
     482:	9f 93       	push	r25
     484:	8f 93       	push	r24
     486:	7f 93       	push	r23
     488:	6f 93       	push	r22
     48a:	9f 92       	push	r9
     48c:	8f 92       	push	r8
     48e:	ff 92       	push	r15
     490:	ef 92       	push	r14
     492:	0e 94 ae 12 	call	0x255c	; 0x255c <sprintf>
     496:	ad b7       	in	r26, 0x3d	; 61
     498:	be b7       	in	r27, 0x3e	; 62
     49a:	18 96       	adiw	r26, 0x08	; 8
     49c:	0f b6       	in	r0, 0x3f	; 63
     49e:	f8 94       	cli
     4a0:	be bf       	out	0x3e, r27	; 62
     4a2:	0f be       	out	0x3f, r0	; 63
     4a4:	ad bf       	out	0x3d, r26	; 61
     4a6:	87 c0       	rjmp	.+270    	; 0x5b6 <main+0x2f4>
					break;
				default:
					sendbuff[0]='\r';
     4a8:	f7 01       	movw	r30, r14
     4aa:	50 82       	st	Z, r5
     4ac:	84 c0       	rjmp	.+264    	; 0x5b6 <main+0x2f4>
					break;
			}
			break;
		case 'P':
			//switch(checkChar(&refP[0],buff[1])){
			switch(buff[1]){
     4ae:	81 81       	ldd	r24, Z+1	; 0x01
     4b0:	81 33       	cpi	r24, 0x31	; 49
     4b2:	41 f5       	brne	.+80     	; 0x504 <main+0x242>
				case '1':
					result = BMP280_StartMeasurment();
     4b4:	0e 94 65 04 	call	0x8ca	; 0x8ca <BMP280_StartMeasurment>
					if(result!=0){
     4b8:	88 23       	and	r24, r24
     4ba:	49 f0       	breq	.+18     	; 0x4ce <main+0x20c>
						my_delay_ms(result);
     4bc:	90 e0       	ldi	r25, 0x00	; 0
     4be:	0e 94 3a 01 	call	0x274	; 0x274 <my_delay_ms>
						result = BMP280_GetTemperatureAndPressure(&T,&P);
     4c2:	6e e5       	ldi	r22, 0x5E	; 94
     4c4:	73 e0       	ldi	r23, 0x03	; 3
     4c6:	86 ee       	ldi	r24, 0xE6	; 230
     4c8:	92 e0       	ldi	r25, 0x02	; 2
     4ca:	0e 94 ac 07 	call	0xf58	; 0xf58 <BMP280_GetTemperatureAndPressure>
					}
					sprintf(&sendbuff[0],"%.3F\r",P);
     4ce:	80 91 61 03 	lds	r24, 0x0361
     4d2:	8f 93       	push	r24
     4d4:	80 91 60 03 	lds	r24, 0x0360
     4d8:	8f 93       	push	r24
     4da:	80 91 5f 03 	lds	r24, 0x035F
     4de:	8f 93       	push	r24
     4e0:	80 91 5e 03 	lds	r24, 0x035E
     4e4:	8f 93       	push	r24
     4e6:	9f 92       	push	r9
     4e8:	8f 92       	push	r8
     4ea:	ff 92       	push	r15
     4ec:	ef 92       	push	r14
     4ee:	0e 94 ae 12 	call	0x255c	; 0x255c <sprintf>
     4f2:	ed b7       	in	r30, 0x3d	; 61
     4f4:	fe b7       	in	r31, 0x3e	; 62
     4f6:	38 96       	adiw	r30, 0x08	; 8
     4f8:	0f b6       	in	r0, 0x3f	; 63
     4fa:	f8 94       	cli
     4fc:	fe bf       	out	0x3e, r31	; 62
     4fe:	0f be       	out	0x3f, r0	; 63
     500:	ed bf       	out	0x3d, r30	; 61
     502:	59 c0       	rjmp	.+178    	; 0x5b6 <main+0x2f4>
					break;
				default:
					sendbuff[0]='\r';
     504:	d7 01       	movw	r26, r14
     506:	5c 92       	st	X, r5
     508:	56 c0       	rjmp	.+172    	; 0x5b6 <main+0x2f4>
					break;
			}
			break;
		case 'H':
			//switch(checkChar(&refH[0],buff[1])){
			switch(buff[1]){
     50a:	f8 01       	movw	r30, r16
     50c:	81 81       	ldd	r24, Z+1	; 0x01
     50e:	81 33       	cpi	r24, 0x31	; 49
     510:	f1 f4       	brne	.+60     	; 0x54e <main+0x28c>
				case '1':
					dummy = Si7020_readHumidity(&data[0],3);
     512:	63 e0       	ldi	r22, 0x03	; 3
     514:	8e ee       	ldi	r24, 0xEE	; 238
     516:	92 e0       	ldi	r25, 0x02	; 2
     518:	0e 94 4d 08 	call	0x109a	; 0x109a <Si7020_readHumidity>
     51c:	80 93 f5 02 	sts	0x02F5, r24
					sprintf(&sendbuff[0],"%.3F\r",Si7020_calHumidity(&data[0]));
     520:	8e ee       	ldi	r24, 0xEE	; 238
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	0e 94 7f 08 	call	0x10fe	; 0x10fe <Si7020_calHumidity>
     528:	9f 93       	push	r25
     52a:	8f 93       	push	r24
     52c:	7f 93       	push	r23
     52e:	6f 93       	push	r22
     530:	9f 92       	push	r9
     532:	8f 92       	push	r8
     534:	ff 92       	push	r15
     536:	ef 92       	push	r14
     538:	0e 94 ae 12 	call	0x255c	; 0x255c <sprintf>
     53c:	8d b7       	in	r24, 0x3d	; 61
     53e:	9e b7       	in	r25, 0x3e	; 62
     540:	08 96       	adiw	r24, 0x08	; 8
     542:	0f b6       	in	r0, 0x3f	; 63
     544:	f8 94       	cli
     546:	9e bf       	out	0x3e, r25	; 62
     548:	0f be       	out	0x3f, r0	; 63
     54a:	8d bf       	out	0x3d, r24	; 61
     54c:	34 c0       	rjmp	.+104    	; 0x5b6 <main+0x2f4>
					break;
				default:
					sendbuff[0]='\r';
     54e:	d7 01       	movw	r26, r14
     550:	5c 92       	st	X, r5
     552:	31 c0       	rjmp	.+98     	; 0x5b6 <main+0x2f4>
					break;
			}
			break;
		case 'C':
			//switch(checkChar(&refC[0],buff[1])){
			switch(buff[1]){
     554:	f8 01       	movw	r30, r16
     556:	81 81       	ldd	r24, Z+1	; 0x01
     558:	82 33       	cpi	r24, 0x32	; 50
     55a:	19 f0       	breq	.+6      	; 0x562 <main+0x2a0>
     55c:	84 33       	cpi	r24, 0x34	; 52
     55e:	a1 f0       	breq	.+40     	; 0x588 <main+0x2c6>
     560:	28 c0       	rjmp	.+80     	; 0x5b2 <main+0x2f0>
				case '2':
					sprintf(&sendbuff[0],"%i\r",K30_readCO2());
     562:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <K30_readCO2>
     566:	9f 93       	push	r25
     568:	8f 93       	push	r24
     56a:	a0 e6       	ldi	r26, 0x60	; 96
     56c:	b2 e0       	ldi	r27, 0x02	; 2
     56e:	bf 93       	push	r27
     570:	af 93       	push	r26
     572:	ff 92       	push	r15
     574:	ef 92       	push	r14
     576:	0e 94 ae 12 	call	0x255c	; 0x255c <sprintf>
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	0f 90       	pop	r0
     580:	0f 90       	pop	r0
     582:	0f 90       	pop	r0
     584:	0f 90       	pop	r0
     586:	17 c0       	rjmp	.+46     	; 0x5b6 <main+0x2f4>
					break;
				case '4':
					sprintf(&sendbuff[0],"%.3F\r",TGS2600_GetResistance());		
     588:	0e 94 f3 08 	call	0x11e6	; 0x11e6 <TGS2600_GetResistance>
     58c:	9f 93       	push	r25
     58e:	8f 93       	push	r24
     590:	7f 93       	push	r23
     592:	6f 93       	push	r22
     594:	9f 92       	push	r9
     596:	8f 92       	push	r8
     598:	ff 92       	push	r15
     59a:	ef 92       	push	r14
     59c:	0e 94 ae 12 	call	0x255c	; 0x255c <sprintf>
     5a0:	8d b7       	in	r24, 0x3d	; 61
     5a2:	9e b7       	in	r25, 0x3e	; 62
     5a4:	08 96       	adiw	r24, 0x08	; 8
     5a6:	0f b6       	in	r0, 0x3f	; 63
     5a8:	f8 94       	cli
     5aa:	9e bf       	out	0x3e, r25	; 62
     5ac:	0f be       	out	0x3f, r0	; 63
     5ae:	8d bf       	out	0x3d, r24	; 61
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <main+0x2f4>
					break;			
				default:
					sendbuff[0]='\r';
     5b2:	d7 01       	movw	r26, r14
     5b4:	5c 92       	st	X, r5
			}
			break;
		default:
			break;
	}
	printf("Sending SPI: \n%s\n",sendbuff);
     5b6:	ff 92       	push	r15
     5b8:	ef 92       	push	r14
     5ba:	df 92       	push	r13
     5bc:	cf 92       	push	r12
     5be:	0e 94 68 12 	call	0x24d0	; 0x24d0 <printf>
	i=0;
	PORTE&=0b11110111;
     5c2:	73 98       	cbi	0x0e, 3	; 14
	while(sendbuff[i]!='\r'){
     5c4:	f7 01       	movw	r30, r14
     5c6:	80 81       	ld	r24, Z
     5c8:	0f 90       	pop	r0
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	8d 30       	cpi	r24, 0x0D	; 13
     5d2:	31 f0       	breq	.+12     	; 0x5e0 <main+0x31e>
     5d4:	e3 01       	movw	r28, r6
		SPI_SlaveTransmit(sendbuff[i]);
     5d6:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SPI_SlaveTransmit>
			break;
	}
	printf("Sending SPI: \n%s\n",sendbuff);
	i=0;
	PORTE&=0b11110111;
	while(sendbuff[i]!='\r'){
     5da:	89 91       	ld	r24, Y+
     5dc:	8d 30       	cpi	r24, 0x0D	; 13
     5de:	d9 f7       	brne	.-10     	; 0x5d6 <main+0x314>
		SPI_SlaveTransmit(sendbuff[i]);
		i++;
	}
	SPI_SlaveTransmit('\r');
     5e0:	85 2d       	mov	r24, r5
     5e2:	0e 94 7e 09 	call	0x12fc	; 0x12fc <SPI_SlaveTransmit>
	PORTE|=0b00001000;
     5e6:	73 9a       	sbi	0x0e, 3	; 14
	PORTB &= 0b11101111; //LED off
     5e8:	2c 98       	cbi	0x05, 4	; 5
     5ea:	c2 ce       	rjmp	.-636    	; 0x370 <main+0xae>
	printf("Top of loop\n");
	//SPI Test
	int i;
	for(i=0;i<=1;i++){
		if((i==1) && (checkChar(&ref1[0],buff[0])==100))i=0; 
		buff[i]=SPI_SlaveReceive();
     5ec:	0e 94 79 09 	call	0x12f2	; 0x12f2 <SPI_SlaveReceive>
     5f0:	d8 01       	movw	r26, r16
     5f2:	11 96       	adiw	r26, 0x01	; 1
     5f4:	8c 93       	st	X, r24
     5f6:	d9 ce       	rjmp	.-590    	; 0x3aa <main+0xe8>
     5f8:	0e 94 79 09 	call	0x12f2	; 0x12f2 <SPI_SlaveReceive>
     5fc:	f8 01       	movw	r30, r16
     5fe:	80 83       	st	Z, r24
     600:	bd ce       	rjmp	.-646    	; 0x37c <main+0xba>

00000602 <check_crc>:

/*************************************************************************//**
  @brief CRC check
  @return remainder
*****************************************************************************/
unsigned int check_crc(uint16_t message_from_sensor, uint8_t check_value_from_sensor) {
     602:	cf 92       	push	r12
     604:	df 92       	push	r13
     606:	ef 92       	push	r14
     608:	ff 92       	push	r15
	uint32_t remainder = (uint32_t)message_from_sensor << 8; //Pad with 8 bits because we have to add in the check value
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	ba 2f       	mov	r27, r26
     610:	a9 2f       	mov	r26, r25
     612:	98 2f       	mov	r25, r24
     614:	88 27       	eor	r24, r24
	remainder |= check_value_from_sensor; //Add on the check value
     616:	86 2b       	or	r24, r22
     618:	27 e1       	ldi	r18, 0x17	; 23
     61a:	30 e0       	ldi	r19, 0x00	; 0

	uint32_t divsor = (uint32_t)SHIFTED_DIVISOR;
     61c:	40 e0       	ldi	r20, 0x00	; 0
     61e:	50 e8       	ldi	r21, 0x80	; 128
     620:	68 e9       	ldi	r22, 0x98	; 152
     622:	70 e0       	ldi	r23, 0x00	; 0

	for (int i = 0 ; i < 16 ; i++) //Operate on only 16 positions of max 24. The remaining 8 are our remainder and should be zero when we're done.
	{
		if( remainder & (uint32_t)1<<(23 - i) ) //Check if there is a one in the left position
     624:	6c 01       	movw	r12, r24
     626:	7d 01       	movw	r14, r26
     628:	02 2e       	mov	r0, r18
     62a:	04 c0       	rjmp	.+8      	; 0x634 <check_crc+0x32>
     62c:	f6 94       	lsr	r15
     62e:	e7 94       	ror	r14
     630:	d7 94       	ror	r13
     632:	c7 94       	ror	r12
     634:	0a 94       	dec	r0
     636:	d2 f7       	brpl	.-12     	; 0x62c <check_crc+0x2a>
     638:	c0 fe       	sbrs	r12, 0
     63a:	04 c0       	rjmp	.+8      	; 0x644 <check_crc+0x42>
		remainder ^= divsor;
     63c:	84 27       	eor	r24, r20
     63e:	95 27       	eor	r25, r21
     640:	a6 27       	eor	r26, r22
     642:	b7 27       	eor	r27, r23

		divsor >>= 1; //Rotate the divsor max 16 times so that we have 8 bits left of a remainder
     644:	76 95       	lsr	r23
     646:	67 95       	ror	r22
     648:	57 95       	ror	r21
     64a:	47 95       	ror	r20
     64c:	21 50       	subi	r18, 0x01	; 1
     64e:	31 09       	sbc	r19, r1
	uint32_t remainder = (uint32_t)message_from_sensor << 8; //Pad with 8 bits because we have to add in the check value
	remainder |= check_value_from_sensor; //Add on the check value

	uint32_t divsor = (uint32_t)SHIFTED_DIVISOR;

	for (int i = 0 ; i < 16 ; i++) //Operate on only 16 positions of max 24. The remaining 8 are our remainder and should be zero when we're done.
     650:	27 30       	cpi	r18, 0x07	; 7
     652:	31 05       	cpc	r19, r1
     654:	39 f7       	brne	.-50     	; 0x624 <check_crc+0x22>

		divsor >>= 1; //Rotate the divsor max 16 times so that we have 8 bits left of a remainder
	}

	return (unsigned int)remainder;
}
     656:	ff 90       	pop	r15
     658:	ef 90       	pop	r14
     65a:	df 90       	pop	r13
     65c:	cf 90       	pop	r12
     65e:	08 95       	ret

00000660 <BMP280_ReadBytes>:
  @brief Reads some bytes from the BMP280
  @param[in] *values pointer to an array to store the bytes, put the starting register in values[0]
  @param[in] length how many bytes to read
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadBytes(unsigned char *values, char length){
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	ec 01       	movw	r28, r24
     668:	16 2f       	mov	r17, r22
	//printf("BMP280_ReadBytes");
	//printf("0x%1x",(unsigned)TWI_BeginWrite(BMP280_ADDR));
	TWI_BeginWrite(BMP280_ADDR);
     66a:	86 e7       	ldi	r24, 0x76	; 118
     66c:	0e 94 b1 09 	call	0x1362	; 0x1362 <TWI_BeginWrite>
	//printf("0x%1x",(unsigned)TWI_WriteByte(values[0]));
	TWI_WriteByte(values[0]);//Write the register address
     670:	88 81       	ld	r24, Y
     672:	0e 94 a3 09 	call	0x1346	; 0x1346 <TWI_WriteByte>
	status = TWI_BeginRead(BMP280_ADDR); //Send a repeated start
     676:	86 e7       	ldi	r24, 0x76	; 118
     678:	0e 94 ce 09 	call	0x139c	; 0x139c <TWI_BeginRead>
     67c:	80 93 b1 02 	sts	0x02B1, r24
	//printf("0x%1x",status);
	if (status == TWI_SLAR_ACK){
     680:	80 34       	cpi	r24, 0x40	; 64
     682:	81 f4       	brne	.+32     	; 0x6a4 <BMP280_ReadBytes+0x44>
		if(((TWI_Read(&values[0],length,false)&TWSR_MASK) == TWI_REC_NACK) && (TWI_Stop() != 0)) return(1); //Receive bytes, send a STOP bit, and check for success
     684:	61 2f       	mov	r22, r17
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	40 e0       	ldi	r20, 0x00	; 0
     68a:	ce 01       	movw	r24, r28
     68c:	0e 94 0b 0a 	call	0x1416	; 0x1416 <TWI_Read>
     690:	88 7f       	andi	r24, 0xF8	; 248
     692:	88 35       	cpi	r24, 0x58	; 88
     694:	49 f4       	brne	.+18     	; 0x6a8 <BMP280_ReadBytes+0x48>
     696:	0e 94 06 0a 	call	0x140c	; 0x140c <TWI_Stop>
     69a:	91 e0       	ldi	r25, 0x01	; 1
     69c:	81 11       	cpse	r24, r1
     69e:	05 c0       	rjmp	.+10     	; 0x6aa <BMP280_ReadBytes+0x4a>
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	03 c0       	rjmp	.+6      	; 0x6aa <BMP280_ReadBytes+0x4a>
	}
	return(0);
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	01 c0       	rjmp	.+2      	; 0x6aa <BMP280_ReadBytes+0x4a>
     6a8:	90 e0       	ldi	r25, 0x00	; 0
}
     6aa:	89 2f       	mov	r24, r25
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	1f 91       	pop	r17
     6b2:	08 95       	ret

000006b4 <BMP280_ReadInt>:
  @brief Reads an int from the BMP280
  @param[in] address The register address of the first byte of the uint
  @param[out] val* A pointer to a uint to store the received data to
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadInt(char address, int *val){
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	00 d0       	rcall	.+0      	; 0x6be <BMP280_ReadInt+0xa>
     6be:	cd b7       	in	r28, 0x3d	; 61
     6c0:	de b7       	in	r29, 0x3e	; 62
     6c2:	8b 01       	movw	r16, r22
	//printf("\nBMP280_ReadInt");
	unsigned char data[2];	//char is 4 bits, 1 byte

	data[0] = address;
     6c4:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     6c6:	62 e0       	ldi	r22, 0x02	; 2
     6c8:	ce 01       	movw	r24, r28
     6ca:	01 96       	adiw	r24, 0x01	; 1
     6cc:	0e 94 30 03 	call	0x660	; 0x660 <BMP280_ReadBytes>
     6d0:	88 23       	and	r24, r24
     6d2:	59 f0       	breq	.+22     	; 0x6ea <BMP280_ReadInt+0x36>
		*val = (((int)data[1]<<8)|(int)data[0]);
     6d4:	8a 81       	ldd	r24, Y+2	; 0x02
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	98 2f       	mov	r25, r24
     6da:	88 27       	eor	r24, r24
     6dc:	29 81       	ldd	r18, Y+1	; 0x01
     6de:	82 2b       	or	r24, r18
     6e0:	f8 01       	movw	r30, r16
     6e2:	91 83       	std	Z+1, r25	; 0x01
     6e4:	80 83       	st	Z, r24
		return(1);
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	03 c0       	rjmp	.+6      	; 0x6f0 <BMP280_ReadInt+0x3c>
	}
	*val = 0;
     6ea:	f8 01       	movw	r30, r16
     6ec:	11 82       	std	Z+1, r1	; 0x01
     6ee:	10 82       	st	Z, r1
	return(0);
}
     6f0:	0f 90       	pop	r0
     6f2:	0f 90       	pop	r0
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	08 95       	ret

000006fe <BMP280_Init>:

/*************************************************************************//**
  @brief Initializes the BMP280 and reads the calibration data from the device
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
char BMP280_Init(void){
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	00 d0       	rcall	.+0      	; 0x704 <BMP280_Init+0x6>
     704:	cd b7       	in	r28, 0x3d	; 61
     706:	de b7       	in	r29, 0x3e	; 62
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
     708:	88 e8       	ldi	r24, 0x88	; 136
     70a:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     70c:	62 e0       	ldi	r22, 0x02	; 2
     70e:	ce 01       	movw	r24, r28
     710:	01 96       	adiw	r24, 0x01	; 1
     712:	0e 94 30 03 	call	0x660	; 0x660 <BMP280_ReadBytes>
     716:	88 23       	and	r24, r24
     718:	99 f0       	breq	.+38     	; 0x740 <BMP280_Init+0x42>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     71a:	8a 81       	ldd	r24, Y+2	; 0x02
     71c:	90 e0       	ldi	r25, 0x00	; 0
     71e:	98 2f       	mov	r25, r24
     720:	88 27       	eor	r24, r24
     722:	29 81       	ldd	r18, Y+1	; 0x01
     724:	82 2b       	or	r24, r18
     726:	90 93 bc 02 	sts	0x02BC, r25
     72a:	80 93 bb 02 	sts	0x02BB, r24

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
     72e:	61 ed       	ldi	r22, 0xD1	; 209
     730:	72 e0       	ldi	r23, 0x02	; 2
     732:	8a e8       	ldi	r24, 0x8A	; 138
     734:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <BMP280_ReadInt>
	// used in the calculations when taking measurements.

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
     738:	88 23       	and	r24, r24
     73a:	09 f4       	brne	.+2      	; 0x73e <BMP280_Init+0x40>
     73c:	bb c0       	rjmp	.+374    	; 0x8b4 <BMP280_Init+0x1b6>
     73e:	05 c0       	rjmp	.+10     	; 0x74a <BMP280_Init+0x4c>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     740:	10 92 bc 02 	sts	0x02BC, r1
     744:	10 92 bb 02 	sts	0x02BB, r1
     748:	b5 c0       	rjmp	.+362    	; 0x8b4 <BMP280_Init+0x1b6>
	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
     74a:	6f ec       	ldi	r22, 0xCF	; 207
     74c:	72 e0       	ldi	r23, 0x02	; 2
     74e:	8c e8       	ldi	r24, 0x8C	; 140
     750:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <BMP280_ReadInt>

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
     754:	88 23       	and	r24, r24
     756:	09 f4       	brne	.+2      	; 0x75a <BMP280_Init+0x5c>
     758:	ad c0       	rjmp	.+346    	; 0x8b4 <BMP280_Init+0x1b6>
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
     75a:	8e e8       	ldi	r24, 0x8E	; 142
     75c:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     75e:	62 e0       	ldi	r22, 0x02	; 2
     760:	ce 01       	movw	r24, r28
     762:	01 96       	adiw	r24, 0x01	; 1
     764:	0e 94 30 03 	call	0x660	; 0x660 <BMP280_ReadBytes>
     768:	88 23       	and	r24, r24
     76a:	99 f0       	breq	.+38     	; 0x792 <BMP280_Init+0x94>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     76c:	8a 81       	ldd	r24, Y+2	; 0x02
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	98 2f       	mov	r25, r24
     772:	88 27       	eor	r24, r24
     774:	29 81       	ldd	r18, Y+1	; 0x01
     776:	82 2b       	or	r24, r18
     778:	90 93 be 02 	sts	0x02BE, r25
     77c:	80 93 bd 02 	sts	0x02BD, r24
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     780:	6d ec       	ldi	r22, 0xCD	; 205
     782:	72 e0       	ldi	r23, 0x02	; 2
     784:	80 e9       	ldi	r24, 0x90	; 144
     786:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <BMP280_ReadInt>
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
     78a:	88 23       	and	r24, r24
     78c:	09 f4       	brne	.+2      	; 0x790 <BMP280_Init+0x92>
     78e:	92 c0       	rjmp	.+292    	; 0x8b4 <BMP280_Init+0x1b6>
     790:	05 c0       	rjmp	.+10     	; 0x79c <BMP280_Init+0x9e>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     792:	10 92 be 02 	sts	0x02BE, r1
     796:	10 92 bd 02 	sts	0x02BD, r1
     79a:	8c c0       	rjmp	.+280    	; 0x8b4 <BMP280_Init+0x1b6>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     79c:	6b ec       	ldi	r22, 0xCB	; 203
     79e:	72 e0       	ldi	r23, 0x02	; 2
     7a0:	82 e9       	ldi	r24, 0x92	; 146
     7a2:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <BMP280_ReadInt>
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     7a6:	88 23       	and	r24, r24
     7a8:	09 f4       	brne	.+2      	; 0x7ac <BMP280_Init+0xae>
     7aa:	84 c0       	rjmp	.+264    	; 0x8b4 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     7ac:	69 ec       	ldi	r22, 0xC9	; 201
     7ae:	72 e0       	ldi	r23, 0x02	; 2
     7b0:	84 e9       	ldi	r24, 0x94	; 148
     7b2:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <BMP280_ReadInt>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     7b6:	88 23       	and	r24, r24
     7b8:	09 f4       	brne	.+2      	; 0x7bc <BMP280_Init+0xbe>
     7ba:	7c c0       	rjmp	.+248    	; 0x8b4 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     7bc:	67 ec       	ldi	r22, 0xC7	; 199
     7be:	72 e0       	ldi	r23, 0x02	; 2
     7c0:	86 e9       	ldi	r24, 0x96	; 150
     7c2:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <BMP280_ReadInt>
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     7c6:	88 23       	and	r24, r24
     7c8:	09 f4       	brne	.+2      	; 0x7cc <BMP280_Init+0xce>
     7ca:	74 c0       	rjmp	.+232    	; 0x8b4 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     7cc:	65 ec       	ldi	r22, 0xC5	; 197
     7ce:	72 e0       	ldi	r23, 0x02	; 2
     7d0:	88 e9       	ldi	r24, 0x98	; 152
     7d2:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <BMP280_ReadInt>
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     7d6:	88 23       	and	r24, r24
     7d8:	09 f4       	brne	.+2      	; 0x7dc <BMP280_Init+0xde>
     7da:	6c c0       	rjmp	.+216    	; 0x8b4 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     7dc:	63 ec       	ldi	r22, 0xC3	; 195
     7de:	72 e0       	ldi	r23, 0x02	; 2
     7e0:	8a e9       	ldi	r24, 0x9A	; 154
     7e2:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <BMP280_ReadInt>
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     7e6:	88 23       	and	r24, r24
     7e8:	09 f4       	brne	.+2      	; 0x7ec <BMP280_Init+0xee>
     7ea:	64 c0       	rjmp	.+200    	; 0x8b4 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     7ec:	61 ec       	ldi	r22, 0xC1	; 193
     7ee:	72 e0       	ldi	r23, 0x02	; 2
     7f0:	8c e9       	ldi	r24, 0x9C	; 156
     7f2:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <BMP280_ReadInt>
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     7f6:	88 23       	and	r24, r24
     7f8:	09 f4       	brne	.+2      	; 0x7fc <BMP280_Init+0xfe>
     7fa:	5c c0       	rjmp	.+184    	; 0x8b4 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9C, &dig_P8)  &&
		BMP280_ReadInt(0x9E, &dig_P9)){
     7fc:	6f eb       	ldi	r22, 0xBF	; 191
     7fe:	72 e0       	ldi	r23, 0x02	; 2
     800:	8e e9       	ldi	r24, 0x9E	; 158
     802:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <BMP280_ReadInt>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     806:	88 23       	and	r24, r24
     808:	09 f4       	brne	.+2      	; 0x80c <BMP280_Init+0x10e>
     80a:	54 c0       	rjmp	.+168    	; 0x8b4 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9E, &dig_P9)){
			printf("\nT: %i ,%i ,%i P: %i ,%i ,%i ,%i ,%i ,%i ,%i ,%1 ,%i \n",dig_T1,dig_T2,dig_T3,dig_P1,dig_P2,dig_P3,dig_P4,dig_P5,dig_P6,dig_P7,dig_P8,dig_P9);
     80c:	80 91 c0 02 	lds	r24, 0x02C0
     810:	8f 93       	push	r24
     812:	80 91 bf 02 	lds	r24, 0x02BF
     816:	8f 93       	push	r24
     818:	80 91 c2 02 	lds	r24, 0x02C2
     81c:	8f 93       	push	r24
     81e:	80 91 c1 02 	lds	r24, 0x02C1
     822:	8f 93       	push	r24
     824:	80 91 c4 02 	lds	r24, 0x02C4
     828:	8f 93       	push	r24
     82a:	80 91 c3 02 	lds	r24, 0x02C3
     82e:	8f 93       	push	r24
     830:	80 91 c6 02 	lds	r24, 0x02C6
     834:	8f 93       	push	r24
     836:	80 91 c5 02 	lds	r24, 0x02C5
     83a:	8f 93       	push	r24
     83c:	80 91 c8 02 	lds	r24, 0x02C8
     840:	8f 93       	push	r24
     842:	80 91 c7 02 	lds	r24, 0x02C7
     846:	8f 93       	push	r24
     848:	80 91 ca 02 	lds	r24, 0x02CA
     84c:	8f 93       	push	r24
     84e:	80 91 c9 02 	lds	r24, 0x02C9
     852:	8f 93       	push	r24
     854:	80 91 cc 02 	lds	r24, 0x02CC
     858:	8f 93       	push	r24
     85a:	80 91 cb 02 	lds	r24, 0x02CB
     85e:	8f 93       	push	r24
     860:	80 91 ce 02 	lds	r24, 0x02CE
     864:	8f 93       	push	r24
     866:	80 91 cd 02 	lds	r24, 0x02CD
     86a:	8f 93       	push	r24
     86c:	80 91 be 02 	lds	r24, 0x02BE
     870:	8f 93       	push	r24
     872:	80 91 bd 02 	lds	r24, 0x02BD
     876:	8f 93       	push	r24
     878:	80 91 d0 02 	lds	r24, 0x02D0
     87c:	8f 93       	push	r24
     87e:	80 91 cf 02 	lds	r24, 0x02CF
     882:	8f 93       	push	r24
     884:	80 91 d2 02 	lds	r24, 0x02D2
     888:	8f 93       	push	r24
     88a:	80 91 d1 02 	lds	r24, 0x02D1
     88e:	8f 93       	push	r24
     890:	80 91 bc 02 	lds	r24, 0x02BC
     894:	8f 93       	push	r24
     896:	80 91 bb 02 	lds	r24, 0x02BB
     89a:	8f 93       	push	r24
     89c:	86 e7       	ldi	r24, 0x76	; 118
     89e:	92 e0       	ldi	r25, 0x02	; 2
     8a0:	9f 93       	push	r25
     8a2:	8f 93       	push	r24
     8a4:	0e 94 68 12 	call	0x24d0	; 0x24d0 <printf>
		return (1);
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	f8 94       	cli
     8ac:	de bf       	out	0x3e, r29	; 62
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	cd bf       	out	0x3d, r28	; 61
     8b2:	81 e0       	ldi	r24, 0x01	; 1
	}
	else 
		return (0);
}
     8b4:	0f 90       	pop	r0
     8b6:	0f 90       	pop	r0
     8b8:	df 91       	pop	r29
     8ba:	cf 91       	pop	r28
     8bc:	08 95       	ret

000008be <BMP280_SetOversampling>:
  @brief Sets the oversampling setting for the library
  @param[in] oss Oversampling setting
  @return 1
*****************************************************************************/
char BMP280_SetOversampling(short oss){
	oversampling = oss;
     8be:	90 93 ba 02 	sts	0x02BA, r25
     8c2:	80 93 b9 02 	sts	0x02B9, r24
	return (1);
}
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	08 95       	ret

000008ca <BMP280_StartMeasurment>:

/*************************************************************************//**
  @brief Starts a measurement
  @return time to wait for result (in ms)
*****************************************************************************/
char BMP280_StartMeasurment(void){
     8ca:	1f 93       	push	r17
     8cc:	cf 93       	push	r28
     8ce:	df 93       	push	r29
     8d0:	00 d0       	rcall	.+0      	; 0x8d2 <BMP280_StartMeasurment+0x8>
     8d2:	cd b7       	in	r28, 0x3d	; 61
     8d4:	de b7       	in	r29, 0x3e	; 62
	unsigned char data[2], result, delay;
	
	data[0] = BMP280_REG_CONTROL;
     8d6:	84 ef       	ldi	r24, 0xF4	; 244
     8d8:	89 83       	std	Y+1, r24	; 0x01

	switch (oversampling){
     8da:	80 91 b9 02 	lds	r24, 0x02B9
     8de:	90 91 ba 02 	lds	r25, 0x02BA
     8e2:	82 30       	cpi	r24, 0x02	; 2
     8e4:	91 05       	cpc	r25, r1
     8e6:	01 f1       	breq	.+64     	; 0x928 <BMP280_StartMeasurment+0x5e>
     8e8:	2c f4       	brge	.+10     	; 0x8f4 <BMP280_StartMeasurment+0x2a>
     8ea:	00 97       	sbiw	r24, 0x00	; 0
     8ec:	49 f0       	breq	.+18     	; 0x900 <BMP280_StartMeasurment+0x36>
     8ee:	01 97       	sbiw	r24, 0x01	; 1
     8f0:	89 f0       	breq	.+34     	; 0x914 <BMP280_StartMeasurment+0x4a>
     8f2:	38 c0       	rjmp	.+112    	; 0x964 <BMP280_StartMeasurment+0x9a>
     8f4:	83 30       	cpi	r24, 0x03	; 3
     8f6:	91 05       	cpc	r25, r1
     8f8:	09 f1       	breq	.+66     	; 0x93c <BMP280_StartMeasurment+0x72>
     8fa:	04 97       	sbiw	r24, 0x04	; 4
     8fc:	49 f1       	breq	.+82     	; 0x950 <BMP280_StartMeasurment+0x86>
     8fe:	32 c0       	rjmp	.+100    	; 0x964 <BMP280_StartMeasurment+0x9a>
		case 0:
		data[1] = BMP280_COMMAND_PRESSURE0;
     900:	85 e2       	ldi	r24, 0x25	; 37
     902:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	90 93 b8 02 	sts	0x02B8, r25
     90c:	80 93 b7 02 	sts	0x02B7, r24
		delay = 8;
     910:	18 e0       	ldi	r17, 0x08	; 8
		break;
     912:	2b c0       	rjmp	.+86     	; 0x96a <BMP280_StartMeasurment+0xa0>
		case 1:
		data[1] = BMP280_COMMAND_PRESSURE1;
     914:	89 e2       	ldi	r24, 0x29	; 41
     916:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	90 93 b8 02 	sts	0x02B8, r25
     920:	80 93 b7 02 	sts	0x02B7, r24
		delay = 10;
     924:	1a e0       	ldi	r17, 0x0A	; 10
		break;
     926:	21 c0       	rjmp	.+66     	; 0x96a <BMP280_StartMeasurment+0xa0>
		case 2:
		data[1] = BMP280_COMMAND_PRESSURE2;
     928:	8d e2       	ldi	r24, 0x2D	; 45
     92a:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	90 93 b8 02 	sts	0x02B8, r25
     934:	80 93 b7 02 	sts	0x02B7, r24
		delay = 15;
     938:	1f e0       	ldi	r17, 0x0F	; 15
		break;
     93a:	17 c0       	rjmp	.+46     	; 0x96a <BMP280_StartMeasurment+0xa0>
		case 3:
		data[1] = BMP280_COMMAND_PRESSURE3;
     93c:	81 e3       	ldi	r24, 0x31	; 49
     93e:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	90 e0       	ldi	r25, 0x00	; 0
     944:	90 93 b8 02 	sts	0x02B8, r25
     948:	80 93 b7 02 	sts	0x02B7, r24
		delay = 24;
     94c:	18 e1       	ldi	r17, 0x18	; 24
		break;
     94e:	0d c0       	rjmp	.+26     	; 0x96a <BMP280_StartMeasurment+0xa0>
		case 4:
		data[1] = BMP280_COMMAND_PRESSURE4;
     950:	8d e5       	ldi	r24, 0x5D	; 93
     952:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	90 93 b8 02 	sts	0x02B8, r25
     95c:	80 93 b7 02 	sts	0x02B7, r24
		delay = 45;
     960:	1d e2       	ldi	r17, 0x2D	; 45
		break;
     962:	03 c0       	rjmp	.+6      	; 0x96a <BMP280_StartMeasurment+0xa0>
		default:
		data[1] = BMP280_COMMAND_PRESSURE0;
     964:	85 e2       	ldi	r24, 0x25	; 37
     966:	8a 83       	std	Y+2, r24	; 0x02
		delay = 9;
     968:	19 e0       	ldi	r17, 0x09	; 9
  @param[in] *values pointer to an array to send, put the starting register in values[0]
  @param[in] length how many bytes to write (including the starting register ie. sizeof(values))
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_WriteBytes(unsigned char *values, char length){
	TWI_BeginWrite(BMP280_ADDR);
     96a:	86 e7       	ldi	r24, 0x76	; 118
     96c:	0e 94 b1 09 	call	0x1362	; 0x1362 <TWI_BeginWrite>
	if((TWI_Write(&values[0],length) == TWI_SENT_ACK) && (TWI_Stop() != 0)) return 1; //Send bytes, a STOP bit, and check for success
     970:	62 e0       	ldi	r22, 0x02	; 2
     972:	70 e0       	ldi	r23, 0x00	; 0
     974:	ce 01       	movw	r24, r28
     976:	01 96       	adiw	r24, 0x01	; 1
     978:	0e 94 47 0a 	call	0x148e	; 0x148e <TWI_Write>
     97c:	88 32       	cpi	r24, 0x28	; 40
     97e:	31 f4       	brne	.+12     	; 0x98c <BMP280_StartMeasurment+0xc2>
     980:	0e 94 06 0a 	call	0x140c	; 0x140c <TWI_Stop>
		data[1] = BMP280_COMMAND_PRESSURE0;
		delay = 9;
		break;
	}
	result = BMP280_WriteBytes(&data[0], 2);
	if (result) // good write?
     984:	88 23       	and	r24, r24
     986:	19 f0       	breq	.+6      	; 0x98e <BMP280_StartMeasurment+0xc4>
	return(delay); // return the delay in ms (rounded up) to wait before retrieving data
     988:	81 2f       	mov	r24, r17
     98a:	01 c0       	rjmp	.+2      	; 0x98e <BMP280_StartMeasurment+0xc4>
	else
	return(0); // or return 0 if there was a problem communicating with the BMP
     98c:	80 e0       	ldi	r24, 0x00	; 0
}
     98e:	0f 90       	pop	r0
     990:	0f 90       	pop	r0
     992:	df 91       	pop	r29
     994:	cf 91       	pop	r28
     996:	1f 91       	pop	r17
     998:	08 95       	ret

0000099a <BMP280_GetUnPT>:
  @brief Gets the uncalibrated temperature and pressure data
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetUnPT(double *uP, double *uT){
     99a:	8f 92       	push	r8
     99c:	9f 92       	push	r9
     99e:	af 92       	push	r10
     9a0:	bf 92       	push	r11
     9a2:	cf 92       	push	r12
     9a4:	df 92       	push	r13
     9a6:	ef 92       	push	r14
     9a8:	ff 92       	push	r15
     9aa:	1f 93       	push	r17
     9ac:	cf 93       	push	r28
     9ae:	df 93       	push	r29
     9b0:	00 d0       	rcall	.+0      	; 0x9b2 <BMP280_GetUnPT+0x18>
     9b2:	00 d0       	rcall	.+0      	; 0x9b4 <BMP280_GetUnPT+0x1a>
     9b4:	00 d0       	rcall	.+0      	; 0x9b6 <BMP280_GetUnPT+0x1c>
     9b6:	cd b7       	in	r28, 0x3d	; 61
     9b8:	de b7       	in	r29, 0x3e	; 62
     9ba:	6c 01       	movw	r12, r24
     9bc:	7b 01       	movw	r14, r22
	unsigned char data[6];
	char result;
	
	data[0] = BMP280_REG_RESULT_PRESSURE; //0xF7
     9be:	87 ef       	ldi	r24, 0xF7	; 247
     9c0:	89 83       	std	Y+1, r24	; 0x01

	result = BMP280_ReadBytes(&data[0], 6); // 0xF7; xF8, 0xF9, 0xFA, 0xFB, 0xFC
     9c2:	66 e0       	ldi	r22, 0x06	; 6
     9c4:	ce 01       	movw	r24, r28
     9c6:	01 96       	adiw	r24, 0x01	; 1
     9c8:	0e 94 30 03 	call	0x660	; 0x660 <BMP280_ReadBytes>
     9cc:	18 2f       	mov	r17, r24
	if (result){ // good read
     9ce:	88 23       	and	r24, r24
     9d0:	09 f4       	brne	.+2      	; 0x9d4 <BMP280_GetUnPT+0x3a>
     9d2:	76 c0       	rjmp	.+236    	; 0xac0 <BMP280_GetUnPT+0x126>
		double factor = pow(2, 4);
		*uP = (( (data[0] *256.0) + data[1] + (data[2]/256.0))) * factor ;	//20bit UP
     9d4:	69 81       	ldd	r22, Y+1	; 0x01
     9d6:	70 e0       	ldi	r23, 0x00	; 0
     9d8:	80 e0       	ldi	r24, 0x00	; 0
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__floatsisf>
     9e0:	20 e0       	ldi	r18, 0x00	; 0
     9e2:	30 e0       	ldi	r19, 0x00	; 0
     9e4:	40 e8       	ldi	r20, 0x80	; 128
     9e6:	53 e4       	ldi	r21, 0x43	; 67
     9e8:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     9ec:	4b 01       	movw	r8, r22
     9ee:	5c 01       	movw	r10, r24
     9f0:	8a 81       	ldd	r24, Y+2	; 0x02
     9f2:	68 2f       	mov	r22, r24
     9f4:	70 e0       	ldi	r23, 0x00	; 0
     9f6:	80 e0       	ldi	r24, 0x00	; 0
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__floatsisf>
     9fe:	9b 01       	movw	r18, r22
     a00:	ac 01       	movw	r20, r24
     a02:	c5 01       	movw	r24, r10
     a04:	b4 01       	movw	r22, r8
     a06:	0e 94 30 0b 	call	0x1660	; 0x1660 <__addsf3>
     a0a:	4b 01       	movw	r8, r22
     a0c:	5c 01       	movw	r10, r24
     a0e:	4b 81       	ldd	r20, Y+3	; 0x03
     a10:	64 2f       	mov	r22, r20
     a12:	70 e0       	ldi	r23, 0x00	; 0
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__floatsisf>
     a1c:	20 e0       	ldi	r18, 0x00	; 0
     a1e:	30 e0       	ldi	r19, 0x00	; 0
     a20:	40 e8       	ldi	r20, 0x80	; 128
     a22:	5b e3       	ldi	r21, 0x3B	; 59
     a24:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     a28:	9b 01       	movw	r18, r22
     a2a:	ac 01       	movw	r20, r24
     a2c:	c5 01       	movw	r24, r10
     a2e:	b4 01       	movw	r22, r8
     a30:	0e 94 30 0b 	call	0x1660	; 0x1660 <__addsf3>
     a34:	20 e0       	ldi	r18, 0x00	; 0
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	40 e8       	ldi	r20, 0x80	; 128
     a3a:	51 e4       	ldi	r21, 0x41	; 65
     a3c:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     a40:	f6 01       	movw	r30, r12
     a42:	60 83       	st	Z, r22
     a44:	71 83       	std	Z+1, r23	; 0x01
     a46:	82 83       	std	Z+2, r24	; 0x02
     a48:	93 83       	std	Z+3, r25	; 0x03
		*uT = (( (data[3] *256.0) + data[4] + (data[5]/256.0))) * factor ;	//20bit UT
     a4a:	6c 81       	ldd	r22, Y+4	; 0x04
     a4c:	70 e0       	ldi	r23, 0x00	; 0
     a4e:	80 e0       	ldi	r24, 0x00	; 0
     a50:	90 e0       	ldi	r25, 0x00	; 0
     a52:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__floatsisf>
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e8       	ldi	r20, 0x80	; 128
     a5c:	53 e4       	ldi	r21, 0x43	; 67
     a5e:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     a62:	4b 01       	movw	r8, r22
     a64:	5c 01       	movw	r10, r24
     a66:	8d 81       	ldd	r24, Y+5	; 0x05
     a68:	68 2f       	mov	r22, r24
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	80 e0       	ldi	r24, 0x00	; 0
     a6e:	90 e0       	ldi	r25, 0x00	; 0
     a70:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__floatsisf>
     a74:	9b 01       	movw	r18, r22
     a76:	ac 01       	movw	r20, r24
     a78:	c5 01       	movw	r24, r10
     a7a:	b4 01       	movw	r22, r8
     a7c:	0e 94 30 0b 	call	0x1660	; 0x1660 <__addsf3>
     a80:	4b 01       	movw	r8, r22
     a82:	5c 01       	movw	r10, r24
     a84:	8e 81       	ldd	r24, Y+6	; 0x06
     a86:	68 2f       	mov	r22, r24
     a88:	70 e0       	ldi	r23, 0x00	; 0
     a8a:	80 e0       	ldi	r24, 0x00	; 0
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__floatsisf>
     a92:	20 e0       	ldi	r18, 0x00	; 0
     a94:	30 e0       	ldi	r19, 0x00	; 0
     a96:	40 e8       	ldi	r20, 0x80	; 128
     a98:	5b e3       	ldi	r21, 0x3B	; 59
     a9a:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     a9e:	9b 01       	movw	r18, r22
     aa0:	ac 01       	movw	r20, r24
     aa2:	c5 01       	movw	r24, r10
     aa4:	b4 01       	movw	r22, r8
     aa6:	0e 94 30 0b 	call	0x1660	; 0x1660 <__addsf3>
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	30 e0       	ldi	r19, 0x00	; 0
     aae:	40 e8       	ldi	r20, 0x80	; 128
     ab0:	51 e4       	ldi	r21, 0x41	; 65
     ab2:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     ab6:	f7 01       	movw	r30, r14
     ab8:	60 83       	st	Z, r22
     aba:	71 83       	std	Z+1, r23	; 0x01
     abc:	82 83       	std	Z+2, r24	; 0x02
     abe:	93 83       	std	Z+3, r25	; 0x03
		
	}
	return(result);
}
     ac0:	81 2f       	mov	r24, r17
     ac2:	26 96       	adiw	r28, 0x06	; 6
     ac4:	0f b6       	in	r0, 0x3f	; 63
     ac6:	f8 94       	cli
     ac8:	de bf       	out	0x3e, r29	; 62
     aca:	0f be       	out	0x3f, r0	; 63
     acc:	cd bf       	out	0x3d, r28	; 61
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	1f 91       	pop	r17
     ad4:	ff 90       	pop	r15
     ad6:	ef 90       	pop	r14
     ad8:	df 90       	pop	r13
     ada:	cf 90       	pop	r12
     adc:	bf 90       	pop	r11
     ade:	af 90       	pop	r10
     ae0:	9f 90       	pop	r9
     ae2:	8f 90       	pop	r8
     ae4:	08 95       	ret

00000ae6 <BMP280_CalcTemperature>:
  @brief Calculates temperature
  @param[out] pointer to a place to store the temperature data
  @param[in] pointer to the uncalibrated temperature data
  @return status
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
     ae6:	4f 92       	push	r4
     ae8:	5f 92       	push	r5
     aea:	6f 92       	push	r6
     aec:	7f 92       	push	r7
     aee:	8f 92       	push	r8
     af0:	9f 92       	push	r9
     af2:	af 92       	push	r10
     af4:	bf 92       	push	r11
     af6:	cf 92       	push	r12
     af8:	df 92       	push	r13
     afa:	ef 92       	push	r14
     afc:	ff 92       	push	r15
     afe:	cf 93       	push	r28
     b00:	df 93       	push	r29
     b02:	ec 01       	movw	r28, r24
	double adc_T = *uT ;
     b04:	fb 01       	movw	r30, r22
     b06:	c0 80       	ld	r12, Z
     b08:	d1 80       	ldd	r13, Z+1	; 0x01
     b0a:	e2 80       	ldd	r14, Z+2	; 0x02
     b0c:	f3 80       	ldd	r15, Z+3	; 0x03
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
     b0e:	80 91 bb 02 	lds	r24, 0x02BB
     b12:	90 91 bc 02 	lds	r25, 0x02BC
     b16:	bc 01       	movw	r22, r24
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 49 0c 	call	0x1892	; 0x1892 <__floatunsisf>
     b20:	2b 01       	movw	r4, r22
     b22:	3c 01       	movw	r6, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
     b24:	20 e0       	ldi	r18, 0x00	; 0
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	40 e0       	ldi	r20, 0x00	; 0
     b2a:	57 e3       	ldi	r21, 0x37	; 55
     b2c:	c7 01       	movw	r24, r14
     b2e:	b6 01       	movw	r22, r12
     b30:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     b34:	4b 01       	movw	r8, r22
     b36:	5c 01       	movw	r10, r24
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	30 e0       	ldi	r19, 0x00	; 0
     b3c:	40 e0       	ldi	r20, 0x00	; 0
     b3e:	59 e3       	ldi	r21, 0x39	; 57
     b40:	c3 01       	movw	r24, r6
     b42:	b2 01       	movw	r22, r4
     b44:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     b48:	9b 01       	movw	r18, r22
     b4a:	ac 01       	movw	r20, r24
     b4c:	c5 01       	movw	r24, r10
     b4e:	b4 01       	movw	r22, r8
     b50:	0e 94 2f 0b 	call	0x165e	; 0x165e <__subsf3>
     b54:	4b 01       	movw	r8, r22
     b56:	5c 01       	movw	r10, r24
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
	double adc_T = *uT ;
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
     b58:	20 e0       	ldi	r18, 0x00	; 0
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	40 e8       	ldi	r20, 0x80	; 128
     b5e:	58 e3       	ldi	r21, 0x38	; 56
     b60:	c7 01       	movw	r24, r14
     b62:	b6 01       	movw	r22, r12
     b64:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     b68:	6b 01       	movw	r12, r22
     b6a:	7c 01       	movw	r14, r24
     b6c:	20 e0       	ldi	r18, 0x00	; 0
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	40 e8       	ldi	r20, 0x80	; 128
     b72:	5a e3       	ldi	r21, 0x3A	; 58
     b74:	c3 01       	movw	r24, r6
     b76:	b2 01       	movw	r22, r4
     b78:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     b7c:	9b 01       	movw	r18, r22
     b7e:	ac 01       	movw	r20, r24
     b80:	c7 01       	movw	r24, r14
     b82:	b6 01       	movw	r22, r12
     b84:	0e 94 2f 0b 	call	0x165e	; 0x165e <__subsf3>
     b88:	6b 01       	movw	r12, r22
     b8a:	7c 01       	movw	r14, r24
     b8c:	80 91 d1 02 	lds	r24, 0x02D1
     b90:	90 91 d2 02 	lds	r25, 0x02D2
     b94:	bc 01       	movw	r22, r24
     b96:	99 0f       	add	r25, r25
     b98:	88 0b       	sbc	r24, r24
     b9a:	99 0b       	sbc	r25, r25
     b9c:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__floatsisf>
     ba0:	9b 01       	movw	r18, r22
     ba2:	ac 01       	movw	r20, r24
     ba4:	c7 01       	movw	r24, r14
     ba6:	b6 01       	movw	r22, r12
     ba8:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     bac:	6b 01       	movw	r12, r22
     bae:	7c 01       	movw	r14, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
     bb0:	a5 01       	movw	r20, r10
     bb2:	94 01       	movw	r18, r8
     bb4:	c5 01       	movw	r24, r10
     bb6:	b4 01       	movw	r22, r8
     bb8:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     bbc:	4b 01       	movw	r8, r22
     bbe:	5c 01       	movw	r10, r24
     bc0:	40 91 cf 02 	lds	r20, 0x02CF
     bc4:	50 91 d0 02 	lds	r21, 0x02D0
     bc8:	ba 01       	movw	r22, r20
     bca:	55 0f       	add	r21, r21
     bcc:	88 0b       	sbc	r24, r24
     bce:	99 0b       	sbc	r25, r25
     bd0:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__floatsisf>
     bd4:	9b 01       	movw	r18, r22
     bd6:	ac 01       	movw	r20, r24
     bd8:	c5 01       	movw	r24, r10
     bda:	b4 01       	movw	r22, r8
     bdc:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     be0:	9b 01       	movw	r18, r22
     be2:	ac 01       	movw	r20, r24
	t_fine = (long signed int)(var1+var2);
     be4:	c7 01       	movw	r24, r14
     be6:	b6 01       	movw	r22, r12
     be8:	0e 94 30 0b 	call	0x1660	; 0x1660 <__addsf3>
     bec:	6b 01       	movw	r12, r22
     bee:	7c 01       	movw	r14, r24
     bf0:	0e 94 13 0c 	call	0x1826	; 0x1826 <__fixsfsi>
     bf4:	60 93 b3 02 	sts	0x02B3, r22
     bf8:	70 93 b4 02 	sts	0x02B4, r23
     bfc:	80 93 b5 02 	sts	0x02B5, r24
     c00:	90 93 b6 02 	sts	0x02B6, r25
	
	*T = (var1+var2)/5120.0;
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 ea       	ldi	r20, 0xA0	; 160
     c0a:	55 e4       	ldi	r21, 0x45	; 69
     c0c:	c7 01       	movw	r24, r14
     c0e:	b6 01       	movw	r22, r12
     c10:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__divsf3>
     c14:	6b 01       	movw	r12, r22
     c16:	7c 01       	movw	r14, r24
     c18:	68 83       	st	Y, r22
     c1a:	79 83       	std	Y+1, r23	; 0x01
     c1c:	8a 83       	std	Y+2, r24	; 0x02
     c1e:	9b 83       	std	Y+3, r25	; 0x03
	
	if(*T>100.0 || *T <(-100.0))return 0;
     c20:	20 e0       	ldi	r18, 0x00	; 0
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	48 ec       	ldi	r20, 0xC8	; 200
     c26:	52 e4       	ldi	r21, 0x42	; 66
     c28:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__gesf2>
     c2c:	18 16       	cp	r1, r24
     c2e:	74 f0       	brlt	.+28     	; 0xc4c <BMP280_CalcTemperature+0x166>
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	48 ec       	ldi	r20, 0xC8	; 200
     c36:	52 ec       	ldi	r21, 0xC2	; 194
     c38:	c7 01       	movw	r24, r14
     c3a:	b6 01       	movw	r22, r12
     c3c:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__cmpsf2>
     c40:	88 1f       	adc	r24, r24
     c42:	88 27       	eor	r24, r24
     c44:	88 1f       	adc	r24, r24
     c46:	91 e0       	ldi	r25, 0x01	; 1
     c48:	89 27       	eor	r24, r25
     c4a:	01 c0       	rjmp	.+2      	; 0xc4e <BMP280_CalcTemperature+0x168>
     c4c:	80 e0       	ldi	r24, 0x00	; 0
	
	return (1);
}
     c4e:	df 91       	pop	r29
     c50:	cf 91       	pop	r28
     c52:	ff 90       	pop	r15
     c54:	ef 90       	pop	r14
     c56:	df 90       	pop	r13
     c58:	cf 90       	pop	r12
     c5a:	bf 90       	pop	r11
     c5c:	af 90       	pop	r10
     c5e:	9f 90       	pop	r9
     c60:	8f 90       	pop	r8
     c62:	7f 90       	pop	r7
     c64:	6f 90       	pop	r6
     c66:	5f 90       	pop	r5
     c68:	4f 90       	pop	r4
     c6a:	08 95       	ret

00000c6c <BMP280_CalcPressure>:
  @brief Calculates pressure
  @param[out] pointer to a place to store the pressure data
  @param[in] pointer to the uncalibrated pressure data
  @return status
*****************************************************************************/
char BMP280_CalcPressure(double *P,double *uP){
     c6c:	4f 92       	push	r4
     c6e:	5f 92       	push	r5
     c70:	6f 92       	push	r6
     c72:	7f 92       	push	r7
     c74:	8f 92       	push	r8
     c76:	9f 92       	push	r9
     c78:	af 92       	push	r10
     c7a:	bf 92       	push	r11
     c7c:	cf 92       	push	r12
     c7e:	df 92       	push	r13
     c80:	ef 92       	push	r14
     c82:	ff 92       	push	r15
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	8c 01       	movw	r16, r24
     c8e:	eb 01       	movw	r28, r22
	//char result;
	double var1 , var2 ;
	
	var1 = ((double)t_fine/2.0) - 64000.0;
     c90:	60 91 b3 02 	lds	r22, 0x02B3
     c94:	70 91 b4 02 	lds	r23, 0x02B4
     c98:	80 91 b5 02 	lds	r24, 0x02B5
     c9c:	90 91 b6 02 	lds	r25, 0x02B6
     ca0:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__floatsisf>
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	5f e3       	ldi	r21, 0x3F	; 63
     cac:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     cb0:	20 e0       	ldi	r18, 0x00	; 0
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	4a e7       	ldi	r20, 0x7A	; 122
     cb6:	57 e4       	ldi	r21, 0x47	; 71
     cb8:	0e 94 2f 0b 	call	0x165e	; 0x165e <__subsf3>
     cbc:	6b 01       	movw	r12, r22
     cbe:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
     cc0:	60 91 c5 02 	lds	r22, 0x02C5
     cc4:	70 91 c6 02 	lds	r23, 0x02C6
     cc8:	07 2e       	mov	r0, r23
     cca:	00 0c       	add	r0, r0
     ccc:	88 0b       	sbc	r24, r24
     cce:	99 0b       	sbc	r25, r25
     cd0:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__floatsisf>
     cd4:	a7 01       	movw	r20, r14
     cd6:	96 01       	movw	r18, r12
     cd8:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	40 e0       	ldi	r20, 0x00	; 0
     ce2:	58 e3       	ldi	r21, 0x38	; 56
     ce4:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     ce8:	a7 01       	movw	r20, r14
     cea:	96 01       	movw	r18, r12
     cec:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     cf0:	4b 01       	movw	r8, r22
     cf2:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
     cf4:	60 91 c7 02 	lds	r22, 0x02C7
     cf8:	70 91 c8 02 	lds	r23, 0x02C8
     cfc:	07 2e       	mov	r0, r23
     cfe:	00 0c       	add	r0, r0
     d00:	88 0b       	sbc	r24, r24
     d02:	99 0b       	sbc	r25, r25
     d04:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__floatsisf>
     d08:	a7 01       	movw	r20, r14
     d0a:	96 01       	movw	r18, r12
     d0c:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     d10:	9b 01       	movw	r18, r22
     d12:	ac 01       	movw	r20, r24
     d14:	0e 94 30 0b 	call	0x1660	; 0x1660 <__addsf3>
     d18:	a5 01       	movw	r20, r10
     d1a:	94 01       	movw	r18, r8
     d1c:	0e 94 30 0b 	call	0x1660	; 0x1660 <__addsf3>
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e8       	ldi	r20, 0x80	; 128
     d26:	5e e3       	ldi	r21, 0x3E	; 62
     d28:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     d2c:	4b 01       	movw	r8, r22
     d2e:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var1 = (((double)dig_P3) * var1 * var1/524288.0 + ((double)dig_P2) * var1) / 524288.0;
     d30:	60 91 cb 02 	lds	r22, 0x02CB
     d34:	70 91 cc 02 	lds	r23, 0x02CC
     d38:	07 2e       	mov	r0, r23
     d3a:	00 0c       	add	r0, r0
     d3c:	88 0b       	sbc	r24, r24
     d3e:	99 0b       	sbc	r25, r25
     d40:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__floatsisf>
     d44:	a7 01       	movw	r20, r14
     d46:	96 01       	movw	r18, r12
     d48:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     d4c:	a7 01       	movw	r20, r14
     d4e:	96 01       	movw	r18, r12
     d50:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	40 e0       	ldi	r20, 0x00	; 0
     d5a:	56 e3       	ldi	r21, 0x36	; 54
     d5c:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     d60:	2b 01       	movw	r4, r22
     d62:	3c 01       	movw	r6, r24
     d64:	60 91 cd 02 	lds	r22, 0x02CD
     d68:	70 91 ce 02 	lds	r23, 0x02CE
     d6c:	07 2e       	mov	r0, r23
     d6e:	00 0c       	add	r0, r0
     d70:	88 0b       	sbc	r24, r24
     d72:	99 0b       	sbc	r25, r25
     d74:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__floatsisf>
     d78:	a7 01       	movw	r20, r14
     d7a:	96 01       	movw	r18, r12
     d7c:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     d80:	9b 01       	movw	r18, r22
     d82:	ac 01       	movw	r20, r24
     d84:	c3 01       	movw	r24, r6
     d86:	b2 01       	movw	r22, r4
     d88:	0e 94 30 0b 	call	0x1660	; 0x1660 <__addsf3>
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e0       	ldi	r20, 0x00	; 0
     d92:	56 e3       	ldi	r21, 0x36	; 54
     d94:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	40 e0       	ldi	r20, 0x00	; 0
     d9e:	57 e4       	ldi	r21, 0x47	; 71
     da0:	0e 94 30 0b 	call	0x1660	; 0x1660 <__addsf3>
     da4:	20 e0       	ldi	r18, 0x00	; 0
     da6:	30 e0       	ldi	r19, 0x00	; 0
     da8:	40 e0       	ldi	r20, 0x00	; 0
     daa:	58 e3       	ldi	r21, 0x38	; 56
     dac:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     db0:	6b 01       	movw	r12, r22
     db2:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
     db4:	28 81       	ld	r18, Y
     db6:	39 81       	ldd	r19, Y+1	; 0x01
     db8:	4a 81       	ldd	r20, Y+2	; 0x02
     dba:	5b 81       	ldd	r21, Y+3	; 0x03
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	80 e8       	ldi	r24, 0x80	; 128
     dc2:	99 e4       	ldi	r25, 0x49	; 73
     dc4:	0e 94 2f 0b 	call	0x165e	; 0x165e <__subsf3>
     dc8:	2b 01       	movw	r4, r22
     dca:	3c 01       	movw	r6, r24
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
     dcc:	60 91 c9 02 	lds	r22, 0x02C9
     dd0:	70 91 ca 02 	lds	r23, 0x02CA
     dd4:	07 2e       	mov	r0, r23
     dd6:	00 0c       	add	r0, r0
     dd8:	88 0b       	sbc	r24, r24
     dda:	99 0b       	sbc	r25, r25
     ddc:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__floatsisf>
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	40 e8       	ldi	r20, 0x80	; 128
     de6:	57 e4       	ldi	r21, 0x47	; 71
     de8:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     dec:	9b 01       	movw	r18, r22
     dee:	ac 01       	movw	r20, r24
     df0:	c5 01       	movw	r24, r10
     df2:	b4 01       	movw	r22, r8
     df4:	0e 94 30 0b 	call	0x1660	; 0x1660 <__addsf3>
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	40 e8       	ldi	r20, 0x80	; 128
     dfe:	59 e3       	ldi	r21, 0x39	; 57
     e00:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     e04:	9b 01       	movw	r18, r22
     e06:	ac 01       	movw	r20, r24
     e08:	c3 01       	movw	r24, r6
     e0a:	b2 01       	movw	r22, r4
     e0c:	0e 94 2f 0b 	call	0x165e	; 0x165e <__subsf3>
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e5       	ldi	r19, 0x50	; 80
     e14:	43 ec       	ldi	r20, 0xC3	; 195
     e16:	55 e4       	ldi	r21, 0x45	; 69
     e18:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     e1c:	4b 01       	movw	r8, r22
     e1e:	5c 01       	movw	r10, r24
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
     e20:	80 91 bd 02 	lds	r24, 0x02BD
     e24:	90 91 be 02 	lds	r25, 0x02BE
     e28:	bc 01       	movw	r22, r24
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0e 94 49 0c 	call	0x1892	; 0x1892 <__floatunsisf>
     e32:	9b 01       	movw	r18, r22
     e34:	ac 01       	movw	r20, r24
     e36:	c7 01       	movw	r24, r14
     e38:	b6 01       	movw	r22, r12
     e3a:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     e3e:	9b 01       	movw	r18, r22
     e40:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
     e42:	c5 01       	movw	r24, r10
     e44:	b4 01       	movw	r22, r8
     e46:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__divsf3>
     e4a:	6b 01       	movw	r12, r22
     e4c:	7c 01       	movw	r14, r24
	//Serial.print("p = ");Serial.println(p,2);
	
	var1 = ((double)dig_P9)*p*p/2147483648.0;	//overflow
     e4e:	60 91 bf 02 	lds	r22, 0x02BF
     e52:	70 91 c0 02 	lds	r23, 0x02C0
     e56:	07 2e       	mov	r0, r23
     e58:	00 0c       	add	r0, r0
     e5a:	88 0b       	sbc	r24, r24
     e5c:	99 0b       	sbc	r25, r25
     e5e:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__floatsisf>
     e62:	a7 01       	movw	r20, r14
     e64:	96 01       	movw	r18, r12
     e66:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     e6a:	a7 01       	movw	r20, r14
     e6c:	96 01       	movw	r18, r12
     e6e:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e0       	ldi	r20, 0x00	; 0
     e78:	50 e3       	ldi	r21, 0x30	; 48
     e7a:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     e7e:	4b 01       	movw	r8, r22
     e80:	5c 01       	movw	r10, r24
	
	var2 = p*((double)dig_P8)/32768.0;
     e82:	80 91 c1 02 	lds	r24, 0x02C1
     e86:	90 91 c2 02 	lds	r25, 0x02C2
     e8a:	bc 01       	movw	r22, r24
     e8c:	99 0f       	add	r25, r25
     e8e:	88 0b       	sbc	r24, r24
     e90:	99 0b       	sbc	r25, r25
     e92:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__floatsisf>
     e96:	a7 01       	movw	r20, r14
     e98:	96 01       	movw	r18, r12
     e9a:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	40 e0       	ldi	r20, 0x00	; 0
     ea4:	58 e3       	ldi	r21, 0x38	; 56
     ea6:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     eaa:	9b 01       	movw	r18, r22
     eac:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	p = p + (var1+var2+((double)dig_P7))/16.0;
     eae:	c5 01       	movw	r24, r10
     eb0:	b4 01       	movw	r22, r8
     eb2:	0e 94 30 0b 	call	0x1660	; 0x1660 <__addsf3>
     eb6:	4b 01       	movw	r8, r22
     eb8:	5c 01       	movw	r10, r24
     eba:	80 91 c3 02 	lds	r24, 0x02C3
     ebe:	90 91 c4 02 	lds	r25, 0x02C4
     ec2:	bc 01       	movw	r22, r24
     ec4:	99 0f       	add	r25, r25
     ec6:	88 0b       	sbc	r24, r24
     ec8:	99 0b       	sbc	r25, r25
     eca:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__floatsisf>
     ece:	9b 01       	movw	r18, r22
     ed0:	ac 01       	movw	r20, r24
     ed2:	c5 01       	movw	r24, r10
     ed4:	b4 01       	movw	r22, r8
     ed6:	0e 94 30 0b 	call	0x1660	; 0x1660 <__addsf3>
     eda:	20 e0       	ldi	r18, 0x00	; 0
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	40 e8       	ldi	r20, 0x80	; 128
     ee0:	5d e3       	ldi	r21, 0x3D	; 61
     ee2:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
     ee6:	a7 01       	movw	r20, r14
     ee8:	96 01       	movw	r18, r12
     eea:	0e 94 30 0b 	call	0x1660	; 0x1660 <__addsf3>
	//Serial.print("p = ");Serial.println(p,2);
	
	*P = p/100.0 ;
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	48 ec       	ldi	r20, 0xC8	; 200
     ef4:	52 e4       	ldi	r21, 0x42	; 66
     ef6:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__divsf3>
     efa:	6b 01       	movw	r12, r22
     efc:	7c 01       	movw	r14, r24
     efe:	f8 01       	movw	r30, r16
     f00:	60 83       	st	Z, r22
     f02:	71 83       	std	Z+1, r23	; 0x01
     f04:	82 83       	std	Z+2, r24	; 0x02
     f06:	93 83       	std	Z+3, r25	; 0x03
	
	if((*P>1200.0) || (*P < 800.0))return (0);
     f08:	20 e0       	ldi	r18, 0x00	; 0
     f0a:	30 e0       	ldi	r19, 0x00	; 0
     f0c:	46 e9       	ldi	r20, 0x96	; 150
     f0e:	54 e4       	ldi	r21, 0x44	; 68
     f10:	0e 94 fb 0c 	call	0x19f6	; 0x19f6 <__gesf2>
     f14:	18 16       	cp	r1, r24
     f16:	74 f0       	brlt	.+28     	; 0xf34 <BMP280_CalcPressure+0x2c8>
     f18:	20 e0       	ldi	r18, 0x00	; 0
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	48 e4       	ldi	r20, 0x48	; 72
     f1e:	54 e4       	ldi	r21, 0x44	; 68
     f20:	c7 01       	movw	r24, r14
     f22:	b6 01       	movw	r22, r12
     f24:	0e 94 9c 0b 	call	0x1738	; 0x1738 <__cmpsf2>
     f28:	88 1f       	adc	r24, r24
     f2a:	88 27       	eor	r24, r24
     f2c:	88 1f       	adc	r24, r24
     f2e:	91 e0       	ldi	r25, 0x01	; 1
     f30:	89 27       	eor	r24, r25
     f32:	01 c0       	rjmp	.+2      	; 0xf36 <BMP280_CalcPressure+0x2ca>
     f34:	80 e0       	ldi	r24, 0x00	; 0
	return (1);
}
     f36:	df 91       	pop	r29
     f38:	cf 91       	pop	r28
     f3a:	1f 91       	pop	r17
     f3c:	0f 91       	pop	r16
     f3e:	ff 90       	pop	r15
     f40:	ef 90       	pop	r14
     f42:	df 90       	pop	r13
     f44:	cf 90       	pop	r12
     f46:	bf 90       	pop	r11
     f48:	af 90       	pop	r10
     f4a:	9f 90       	pop	r9
     f4c:	8f 90       	pop	r8
     f4e:	7f 90       	pop	r7
     f50:	6f 90       	pop	r6
     f52:	5f 90       	pop	r5
     f54:	4f 90       	pop	r4
     f56:	08 95       	ret

00000f58 <BMP280_GetTemperatureAndPressure>:
  @brief Gets temperature and pressure
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetTemperatureAndPressure(double *T,double *P){
     f58:	ef 92       	push	r14
     f5a:	ff 92       	push	r15
     f5c:	0f 93       	push	r16
     f5e:	1f 93       	push	r17
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	28 97       	sbiw	r28, 0x08	; 8
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
     f74:	8c 01       	movw	r16, r24
     f76:	7b 01       	movw	r14, r22
	double uP,uT ;
	char result = BMP280_GetUnPT(&uP,&uT);
     f78:	be 01       	movw	r22, r28
     f7a:	6b 5f       	subi	r22, 0xFB	; 251
     f7c:	7f 4f       	sbci	r23, 0xFF	; 255
     f7e:	ce 01       	movw	r24, r28
     f80:	01 96       	adiw	r24, 0x01	; 1
     f82:	0e 94 cd 04 	call	0x99a	; 0x99a <BMP280_GetUnPT>
	if(result!=0){
     f86:	88 23       	and	r24, r24
     f88:	d1 f0       	breq	.+52     	; 0xfbe <BMP280_GetTemperatureAndPressure+0x66>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
     f8a:	be 01       	movw	r22, r28
     f8c:	6b 5f       	subi	r22, 0xFB	; 251
     f8e:	7f 4f       	sbci	r23, 0xFF	; 255
     f90:	c8 01       	movw	r24, r16
     f92:	0e 94 73 05 	call	0xae6	; 0xae6 <BMP280_CalcTemperature>
		if(result){
     f96:	88 23       	and	r24, r24
     f98:	69 f0       	breq	.+26     	; 0xfb4 <BMP280_GetTemperatureAndPressure+0x5c>
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
     f9a:	be 01       	movw	r22, r28
     f9c:	6f 5f       	subi	r22, 0xFF	; 255
     f9e:	7f 4f       	sbci	r23, 0xFF	; 255
     fa0:	c7 01       	movw	r24, r14
     fa2:	0e 94 36 06 	call	0xc6c	; 0xc6c <BMP280_CalcPressure>
			if(result)return (1);
     fa6:	81 11       	cpse	r24, r1
     fa8:	0f c0       	rjmp	.+30     	; 0xfc8 <BMP280_GetTemperatureAndPressure+0x70>
			else error = 3 ;	// pressure error ;
     faa:	83 e0       	ldi	r24, 0x03	; 3
     fac:	80 93 b2 02 	sts	0x02B2, r24
			return (0);
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	0b c0       	rjmp	.+22     	; 0xfca <BMP280_GetTemperatureAndPressure+0x72>
		}else
		error = 2;	// temperature error ;
     fb4:	82 e0       	ldi	r24, 0x02	; 2
     fb6:	80 93 b2 02 	sts	0x02B2, r24
	}
	else
	error = 1;
	
	return (0);
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	06 c0       	rjmp	.+12     	; 0xfca <BMP280_GetTemperatureAndPressure+0x72>
			return (0);
		}else
		error = 2;	// temperature error ;
	}
	else
	error = 1;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	80 93 b2 02 	sts	0x02B2, r24
	
	return (0);
     fc4:	80 e0       	ldi	r24, 0x00	; 0
     fc6:	01 c0       	rjmp	.+2      	; 0xfca <BMP280_GetTemperatureAndPressure+0x72>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
		if(result){
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
			if(result)return (1);
     fc8:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	error = 1;
	
	return (0);
}
     fca:	28 96       	adiw	r28, 0x08	; 8
     fcc:	0f b6       	in	r0, 0x3f	; 63
     fce:	f8 94       	cli
     fd0:	de bf       	out	0x3e, r29	; 62
     fd2:	0f be       	out	0x3f, r0	; 63
     fd4:	cd bf       	out	0x3d, r28	; 61
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	1f 91       	pop	r17
     fdc:	0f 91       	pop	r16
     fde:	ff 90       	pop	r15
     fe0:	ef 90       	pop	r14
     fe2:	08 95       	ret

00000fe4 <K30_readCO2>:
	TWI_Init(200000);
	return 0;
}
*/

int K30_readCO2(){
     fe4:	cf 93       	push	r28
     fe6:	df 93       	push	r29
     fe8:	00 d0       	rcall	.+0      	; 0xfea <K30_readCO2+0x6>
     fea:	00 d0       	rcall	.+0      	; 0xfec <K30_readCO2+0x8>
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
	int val=0;
	int sum=0;
	
	char status;
	//printf("K30_readCO2");
	unsigned char buffer[4]={0,0,0,0};
     ff0:	19 82       	std	Y+1, r1	; 0x01
     ff2:	1a 82       	std	Y+2, r1	; 0x02
     ff4:	1b 82       	std	Y+3, r1	; 0x03
     ff6:	1c 82       	std	Y+4, r1	; 0x04
	status=TWI_BeginWrite(0x68);
     ff8:	88 e6       	ldi	r24, 0x68	; 104
     ffa:	0e 94 b1 09 	call	0x1362	; 0x1362 <TWI_BeginWrite>
	if(status!=TWI_SLAW_ACK) return 0;
     ffe:	88 31       	cpi	r24, 0x18	; 24
    1000:	a9 f5       	brne	.+106    	; 0x106c <K30_readCO2+0x88>
	status=TWI_Write(&readcmd[0],4);
    1002:	64 e0       	ldi	r22, 0x04	; 4
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	85 e0       	ldi	r24, 0x05	; 5
    1008:	92 e0       	ldi	r25, 0x02	; 2
    100a:	0e 94 47 0a 	call	0x148e	; 0x148e <TWI_Write>
	if(status!=TWI_SENT_ACK) return 0;
    100e:	88 32       	cpi	r24, 0x28	; 40
    1010:	81 f5       	brne	.+96     	; 0x1072 <K30_readCO2+0x8e>
	TWI_Stop();
    1012:	0e 94 06 0a 	call	0x140c	; 0x140c <TWI_Stop>
    1016:	8f e3       	ldi	r24, 0x3F	; 63
    1018:	9c e9       	ldi	r25, 0x9C	; 156
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	f1 f7       	brne	.-4      	; 0x101a <K30_readCO2+0x36>
    101e:	00 c0       	rjmp	.+0      	; 0x1020 <K30_readCO2+0x3c>
    1020:	00 00       	nop
	_delay_ms(10);
	status=TWI_BeginRead(0x68);
    1022:	88 e6       	ldi	r24, 0x68	; 104
    1024:	0e 94 ce 09 	call	0x139c	; 0x139c <TWI_BeginRead>
	if(status!=TWI_SLAR_ACK) return 0;
    1028:	80 34       	cpi	r24, 0x40	; 64
    102a:	31 f5       	brne	.+76     	; 0x1078 <K30_readCO2+0x94>
	status=TWI_Read(&buffer[0],4,true);
    102c:	41 e0       	ldi	r20, 0x01	; 1
    102e:	64 e0       	ldi	r22, 0x04	; 4
    1030:	70 e0       	ldi	r23, 0x00	; 0
    1032:	ce 01       	movw	r24, r28
    1034:	01 96       	adiw	r24, 0x01	; 1
    1036:	0e 94 0b 0a 	call	0x1416	; 0x1416 <TWI_Read>
	if(status!=TWI_REC_ACK) return 0;
    103a:	80 35       	cpi	r24, 0x50	; 80
    103c:	01 f5       	brne	.+64     	; 0x107e <K30_readCO2+0x9a>
	TWI_Stop();
    103e:	0e 94 06 0a 	call	0x140c	; 0x140c <TWI_Stop>
	
	val = 0;
	val |= buffer[1] & 0xFF;
    1042:	2a 81       	ldd	r18, Y+2	; 0x02
    1044:	30 e0       	ldi	r19, 0x00	; 0
	val = val << 8;
	val |= buffer[2] & 0xFF;
    1046:	8b 81       	ldd	r24, Y+3	; 0x03
    1048:	90 e0       	ldi	r25, 0x00	; 0
	sum = buffer[0] + buffer[1] + buffer[2];
	if(sum==buffer[3]){return val;}
    104a:	6c 81       	ldd	r22, Y+4	; 0x04
    104c:	70 e0       	ldi	r23, 0x00	; 0
	
	val = 0;
	val |= buffer[1] & 0xFF;
	val = val << 8;
	val |= buffer[2] & 0xFF;
	sum = buffer[0] + buffer[1] + buffer[2];
    104e:	49 81       	ldd	r20, Y+1	; 0x01
    1050:	f9 01       	movw	r30, r18
    1052:	e4 0f       	add	r30, r20
    1054:	f1 1d       	adc	r31, r1
    1056:	af 01       	movw	r20, r30
    1058:	48 0f       	add	r20, r24
    105a:	59 1f       	adc	r21, r25
	if(sum==buffer[3]){return val;}
    105c:	64 17       	cp	r22, r20
    105e:	75 07       	cpc	r23, r21
    1060:	89 f4       	brne	.+34     	; 0x1084 <K30_readCO2+0xa0>
	if(status!=TWI_REC_ACK) return 0;
	TWI_Stop();
	
	val = 0;
	val |= buffer[1] & 0xFF;
	val = val << 8;
    1062:	32 2f       	mov	r19, r18
    1064:	22 27       	eor	r18, r18
	val |= buffer[2] & 0xFF;
	sum = buffer[0] + buffer[1] + buffer[2];
	if(sum==buffer[3]){return val;}
    1066:	82 2b       	or	r24, r18
    1068:	93 2b       	or	r25, r19
    106a:	0e c0       	rjmp	.+28     	; 0x1088 <K30_readCO2+0xa4>
	
	char status;
	//printf("K30_readCO2");
	unsigned char buffer[4]={0,0,0,0};
	status=TWI_BeginWrite(0x68);
	if(status!=TWI_SLAW_ACK) return 0;
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	0b c0       	rjmp	.+22     	; 0x1088 <K30_readCO2+0xa4>
	status=TWI_Write(&readcmd[0],4);
	if(status!=TWI_SENT_ACK) return 0;
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	08 c0       	rjmp	.+16     	; 0x1088 <K30_readCO2+0xa4>
	TWI_Stop();
	_delay_ms(10);
	status=TWI_BeginRead(0x68);
	if(status!=TWI_SLAR_ACK) return 0;
    1078:	80 e0       	ldi	r24, 0x00	; 0
    107a:	90 e0       	ldi	r25, 0x00	; 0
    107c:	05 c0       	rjmp	.+10     	; 0x1088 <K30_readCO2+0xa4>
	status=TWI_Read(&buffer[0],4,true);
	if(status!=TWI_REC_ACK) return 0;
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	02 c0       	rjmp	.+4      	; 0x1088 <K30_readCO2+0xa4>
	val |= buffer[1] & 0xFF;
	val = val << 8;
	val |= buffer[2] & 0xFF;
	sum = buffer[0] + buffer[1] + buffer[2];
	if(sum==buffer[3]){return val;}
	else{return 0;}
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	90 e0       	ldi	r25, 0x00	; 0
	
}
    1088:	0f 90       	pop	r0
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	08 95       	ret

00001096 <Si7020_init>:
*****************************************************************************/
char Si7020_init() {
	// Initialize the TWI library at 200kHz
	//TWI_Init(200000);
	return 0;
}
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	08 95       	ret

0000109a <Si7020_readHumidity>:

/*************************************************************************//**
  @brief Read humidity from Si7020
  @return status one if successfully read and crc check, otherwise return zero
*****************************************************************************/
char Si7020_readHumidity(unsigned char *data, char length){
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	ec 01       	movw	r28, r24
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
    10a0:	80 e4       	ldi	r24, 0x40	; 64
    10a2:	0e 94 b1 09 	call	0x1362	; 0x1362 <TWI_BeginWrite>
	status = TWI_WriteByte(SI7020_REL_HUMIDITY_HOLD);	
    10a6:	85 ee       	ldi	r24, 0xE5	; 229
    10a8:	0e 94 a3 09 	call	0x1346	; 0x1346 <TWI_WriteByte>
	if(status != TWI_SENT_ACK) return 0; //Error out
    10ac:	88 32       	cpi	r24, 0x28	; 40
    10ae:	e9 f4       	brne	.+58     	; 0x10ea <Si7020_readHumidity+0x50>
	
	status = TWI_BeginRead(SI7020_ADDR);
    10b0:	80 e4       	ldi	r24, 0x40	; 64
    10b2:	0e 94 ce 09 	call	0x139c	; 0x139c <TWI_BeginRead>
	if(status != TWI_SLAR_ACK)	return 0;
    10b6:	80 34       	cpi	r24, 0x40	; 64
    10b8:	d1 f4       	brne	.+52     	; 0x10ee <Si7020_readHumidity+0x54>
	
	status = TWI_Read(data,3,false);
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	63 e0       	ldi	r22, 0x03	; 3
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	ce 01       	movw	r24, r28
    10c2:	0e 94 0b 0a 	call	0x1416	; 0x1416 <TWI_Read>
	if(status !=TWI_REC_ACK)	return 0;
    10c6:	80 35       	cpi	r24, 0x50	; 80
    10c8:	a1 f4       	brne	.+40     	; 0x10f2 <Si7020_readHumidity+0x58>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawHumidity, checksum) != 0) return 0;
    10ca:	6a 81       	ldd	r22, Y+2	; 0x02
    10cc:	70 e0       	ldi	r23, 0x00	; 0
	if(status !=TWI_REC_ACK)	return 0;
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
    10ce:	88 81       	ld	r24, Y
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	98 2f       	mov	r25, r24
    10d4:	88 27       	eor	r24, r24
    10d6:	29 81       	ldd	r18, Y+1	; 0x01
	if(check_crc(rawHumidity, checksum) != 0) return 0;
    10d8:	82 2b       	or	r24, r18
    10da:	0e 94 01 03 	call	0x602	; 0x602 <check_crc>
    10de:	89 2b       	or	r24, r25
    10e0:	51 f4       	brne	.+20     	; 0x10f6 <Si7020_readHumidity+0x5c>
	
	TWI_Stop();
    10e2:	0e 94 06 0a 	call	0x140c	; 0x140c <TWI_Stop>
	return 1;
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	07 c0       	rjmp	.+14     	; 0x10f8 <Si7020_readHumidity+0x5e>
char Si7020_readHumidity(unsigned char *data, char length){
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
	status = TWI_WriteByte(SI7020_REL_HUMIDITY_HOLD);	
	if(status != TWI_SENT_ACK) return 0; //Error out
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	05 c0       	rjmp	.+10     	; 0x10f8 <Si7020_readHumidity+0x5e>
	
	status = TWI_BeginRead(SI7020_ADDR);
	if(status != TWI_SLAR_ACK)	return 0;
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	03 c0       	rjmp	.+6      	; 0x10f8 <Si7020_readHumidity+0x5e>
	
	status = TWI_Read(data,3,false);
	if(status !=TWI_REC_ACK)	return 0;
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	01 c0       	rjmp	.+2      	; 0x10f8 <Si7020_readHumidity+0x5e>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawHumidity, checksum) != 0) return 0;
    10f6:	80 e0       	ldi	r24, 0x00	; 0
	
	TWI_Stop();
	return 1;
}
    10f8:	df 91       	pop	r29
    10fa:	cf 91       	pop	r28
    10fc:	08 95       	ret

000010fe <Si7020_calHumidity>:
*****************************************************************************/
float Si7020_calHumidity(unsigned char *data) {
	unsigned char msb = data[0];
	unsigned char lsb = data[1];

	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
    10fe:	fc 01       	movw	r30, r24
    1100:	60 81       	ld	r22, Z
    1102:	70 e0       	ldi	r23, 0x00	; 0
    1104:	76 2f       	mov	r23, r22
    1106:	66 27       	eor	r22, r22
    1108:	81 81       	ldd	r24, Z+1	; 0x01
    110a:	68 2b       	or	r22, r24
	
	//Given the raw humidity data, calculate the actual relative humidity
	float tempRH = rawHumidity / (float)65536;
    110c:	80 e0       	ldi	r24, 0x00	; 0
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 49 0c 	call	0x1892	; 0x1892 <__floatunsisf>
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e8       	ldi	r20, 0x80	; 128
    111a:	57 e3       	ldi	r21, 0x37	; 55
    111c:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
	float rh = 125 * tempRH -6;
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	4a ef       	ldi	r20, 0xFA	; 250
    1126:	52 e4       	ldi	r21, 0x42	; 66
    1128:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
    112c:	20 e0       	ldi	r18, 0x00	; 0
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	40 ec       	ldi	r20, 0xC0	; 192
    1132:	50 e4       	ldi	r21, 0x40	; 64
    1134:	0e 94 2f 0b 	call	0x165e	; 0x165e <__subsf3>
	
	return rh;
}
    1138:	08 95       	ret

0000113a <Si7020_readTemperature>:

/*************************************************************************//**
  @brief Read temperature from Si7020
  @return status one if successfully read and crc check, otherwise return zero
*****************************************************************************/
char Si7020_readTemperature(unsigned char *data, char length){
    113a:	cf 93       	push	r28
    113c:	df 93       	push	r29
    113e:	ec 01       	movw	r28, r24
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
    1140:	80 e4       	ldi	r24, 0x40	; 64
    1142:	0e 94 b1 09 	call	0x1362	; 0x1362 <TWI_BeginWrite>
	status = TWI_WriteByte(SI7020_TEMPERATURE_HOLD);	
    1146:	83 ee       	ldi	r24, 0xE3	; 227
    1148:	0e 94 a3 09 	call	0x1346	; 0x1346 <TWI_WriteByte>
	if(status != TWI_SENT_ACK) return 0; //Error out
    114c:	88 32       	cpi	r24, 0x28	; 40
    114e:	e9 f4       	brne	.+58     	; 0x118a <Si7020_readTemperature+0x50>
	
	status = TWI_BeginRead(SI7020_ADDR);
    1150:	80 e4       	ldi	r24, 0x40	; 64
    1152:	0e 94 ce 09 	call	0x139c	; 0x139c <TWI_BeginRead>
	if(status != TWI_SLAR_ACK)	return 0;
    1156:	80 34       	cpi	r24, 0x40	; 64
    1158:	d1 f4       	brne	.+52     	; 0x118e <Si7020_readTemperature+0x54>
	
	status = TWI_Read(data,3,false);
    115a:	40 e0       	ldi	r20, 0x00	; 0
    115c:	63 e0       	ldi	r22, 0x03	; 3
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	ce 01       	movw	r24, r28
    1162:	0e 94 0b 0a 	call	0x1416	; 0x1416 <TWI_Read>
	if(status !=TWI_REC_ACK)	return 0;
    1166:	80 35       	cpi	r24, 0x50	; 80
    1168:	a1 f4       	brne	.+40     	; 0x1192 <Si7020_readTemperature+0x58>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawTemperature, checksum) != 0) return 0;
    116a:	6a 81       	ldd	r22, Y+2	; 0x02
    116c:	70 e0       	ldi	r23, 0x00	; 0
	if(status !=TWI_REC_ACK)	return 0;
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
    116e:	88 81       	ld	r24, Y
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	98 2f       	mov	r25, r24
    1174:	88 27       	eor	r24, r24
    1176:	29 81       	ldd	r18, Y+1	; 0x01
	if(check_crc(rawTemperature, checksum) != 0) return 0;
    1178:	82 2b       	or	r24, r18
    117a:	0e 94 01 03 	call	0x602	; 0x602 <check_crc>
    117e:	89 2b       	or	r24, r25
    1180:	51 f4       	brne	.+20     	; 0x1196 <Si7020_readTemperature+0x5c>
	
	TWI_Stop();
    1182:	0e 94 06 0a 	call	0x140c	; 0x140c <TWI_Stop>
	return 1;
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	07 c0       	rjmp	.+14     	; 0x1198 <Si7020_readTemperature+0x5e>
char Si7020_readTemperature(unsigned char *data, char length){
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
	status = TWI_WriteByte(SI7020_TEMPERATURE_HOLD);	
	if(status != TWI_SENT_ACK) return 0; //Error out
    118a:	80 e0       	ldi	r24, 0x00	; 0
    118c:	05 c0       	rjmp	.+10     	; 0x1198 <Si7020_readTemperature+0x5e>
	
	status = TWI_BeginRead(SI7020_ADDR);
	if(status != TWI_SLAR_ACK)	return 0;
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	03 c0       	rjmp	.+6      	; 0x1198 <Si7020_readTemperature+0x5e>
	
	status = TWI_Read(data,3,false);
	if(status !=TWI_REC_ACK)	return 0;
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	01 c0       	rjmp	.+2      	; 0x1198 <Si7020_readTemperature+0x5e>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawTemperature, checksum) != 0) return 0;
    1196:	80 e0       	ldi	r24, 0x00	; 0
	
	TWI_Stop();
	return 1;
}
    1198:	df 91       	pop	r29
    119a:	cf 91       	pop	r28
    119c:	08 95       	ret

0000119e <Si7020_calTemperature>:
  @return temperature value
*****************************************************************************/
float Si7020_calTemperature(unsigned char *data) {
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
    119e:	fc 01       	movw	r30, r24
    11a0:	60 81       	ld	r22, Z
    11a2:	70 e0       	ldi	r23, 0x00	; 0
    11a4:	76 2f       	mov	r23, r22
    11a6:	66 27       	eor	r22, r22
    11a8:	81 81       	ldd	r24, Z+1	; 0x01
    11aa:	68 2b       	or	r22, r24
	
	//Given the raw temperature data, calculate the actual temperature
	float tempTemperature = rawTemperature / (float)65536; 
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	90 e0       	ldi	r25, 0x00	; 0
    11b0:	0e 94 49 0c 	call	0x1892	; 0x1892 <__floatunsisf>
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	40 e8       	ldi	r20, 0x80	; 128
    11ba:	57 e3       	ldi	r21, 0x37	; 55
    11bc:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
	float realTemperature = 175.72 * tempTemperature - 46.85;
    11c0:	22 e5       	ldi	r18, 0x52	; 82
    11c2:	38 eb       	ldi	r19, 0xB8	; 184
    11c4:	4f e2       	ldi	r20, 0x2F	; 47
    11c6:	53 e4       	ldi	r21, 0x43	; 67
    11c8:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
    11cc:	26 e6       	ldi	r18, 0x66	; 102
    11ce:	36 e6       	ldi	r19, 0x66	; 102
    11d0:	4b e3       	ldi	r20, 0x3B	; 59
    11d2:	52 e4       	ldi	r21, 0x42	; 66
    11d4:	0e 94 2f 0b 	call	0x165e	; 0x165e <__subsf3>
	
	return realTemperature;
    11d8:	08 95       	ret

000011da <TGS2600_TurnOn>:
	DDRB |= 0b00100000;
	TGS2600_TurnOn();
}

void TGS2600_TurnOn(void){
	PORTB |= 0b00100000;
    11da:	2d 9a       	sbi	0x05, 5	; 5
    11dc:	08 95       	ret

000011de <TGS2600_Init>:
#include "devices/TGS2600.h"
#include "drivers/ADC.h"
#include "drivers/PWR.h"

void TGS2600_Init(void){
	DDRB |= 0b00100000;
    11de:	25 9a       	sbi	0x04, 5	; 4
	TGS2600_TurnOn();
    11e0:	0e 94 ed 08 	call	0x11da	; 0x11da <TGS2600_TurnOn>
    11e4:	08 95       	ret

000011e6 <TGS2600_GetResistance>:

void TGS2600_TurnOff(void){
	PORTB &= 0b11011111;
}

float TGS2600_GetResistance(void){
    11e6:	cf 92       	push	r12
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
	float r;
	ADC_Reference(REFERENCE_AREF);
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	0e 94 2e 09 	call	0x125c	; 0x125c <ADC_Reference>
	r=(float)ADC_Convert(ADC1);
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	0e 94 37 09 	call	0x126e	; 0x126e <ADC_Convert>
    11fa:	bc 01       	movw	r22, r24
    11fc:	99 0f       	add	r25, r25
    11fe:	88 0b       	sbc	r24, r24
    1200:	99 0b       	sbc	r25, r25
    1202:	0e 94 4b 0c 	call	0x1896	; 0x1896 <__floatsisf>
	r*=(1.8/1024);
    1206:	26 e6       	ldi	r18, 0x66	; 102
    1208:	36 e6       	ldi	r19, 0x66	; 102
    120a:	46 ee       	ldi	r20, 0xE6	; 230
    120c:	5a e3       	ldi	r21, 0x3A	; 58
    120e:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
    1212:	6b 01       	movw	r12, r22
    1214:	7c 01       	movw	r14, r24
	return ((10000*1.8)-(10000*r))/r;
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e4       	ldi	r19, 0x40	; 64
    121a:	4c e1       	ldi	r20, 0x1C	; 28
    121c:	56 e4       	ldi	r21, 0x46	; 70
    121e:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
    1222:	9b 01       	movw	r18, r22
    1224:	ac 01       	movw	r20, r24
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	70 ea       	ldi	r23, 0xA0	; 160
    122a:	8c e8       	ldi	r24, 0x8C	; 140
    122c:	96 e4       	ldi	r25, 0x46	; 70
    122e:	0e 94 2f 0b 	call	0x165e	; 0x165e <__subsf3>
    1232:	a7 01       	movw	r20, r14
    1234:	96 01       	movw	r18, r12
    1236:	0e 94 a1 0b 	call	0x1742	; 0x1742 <__divsf3>
    123a:	ff 90       	pop	r15
    123c:	ef 90       	pop	r14
    123e:	df 90       	pop	r13
    1240:	cf 90       	pop	r12
    1242:	08 95       	ret

00001244 <ADC_Init>:

/*************************************************************************//**
  @brief Initializes the ADC
*****************************************************************************/
void ADC_Init(void) {
	ADCSRA = (1<<ADEN)|(4<<ADPS0); //enables the ADC module, CPU clock prescale=16
    1244:	84 e8       	ldi	r24, 0x84	; 132
    1246:	80 93 7a 00 	sts	0x007A, r24
	
	ADCSRC = 0x05|(1<<ADTHT0)|(1<<ADTHT1); //ADSUT=5
    124a:	85 ec       	ldi	r24, 0xC5	; 197
    124c:	80 93 77 00 	sts	0x0077, r24
	while((ADCSRB&(1<<AVDDOK))==0);
    1250:	eb e7       	ldi	r30, 0x7B	; 123
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 81       	ld	r24, Z
    1256:	88 23       	and	r24, r24
    1258:	ec f7       	brge	.-6      	; 0x1254 <ADC_Init+0x10>
}
    125a:	08 95       	ret

0000125c <ADC_Reference>:

void ADC_Reference(unsigned char ref){
	ADMUX &= 0b00111111;
    125c:	ec e7       	ldi	r30, 0x7C	; 124
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	90 81       	ld	r25, Z
    1262:	9f 73       	andi	r25, 0x3F	; 63
    1264:	90 83       	st	Z, r25
	ADMUX |= ref;
    1266:	90 81       	ld	r25, Z
    1268:	89 2b       	or	r24, r25
    126a:	80 83       	st	Z, r24
    126c:	08 95       	ret

0000126e <ADC_Convert>:
}

int ADC_Convert(unsigned char channel) {
	int result =0;
	ADMUX &= 0b11000000;
    126e:	ec e7       	ldi	r30, 0x7C	; 124
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	90 81       	ld	r25, Z
    1274:	90 7c       	andi	r25, 0xC0	; 192
    1276:	90 83       	st	Z, r25
	ADMUX |= channel;
    1278:	90 81       	ld	r25, Z
    127a:	89 2b       	or	r24, r25
    127c:	80 83       	st	Z, r24
	ADCSRA |= (1<<ADSC); //starts a single conversion
    127e:	ea e7       	ldi	r30, 0x7A	; 122
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	80 64       	ori	r24, 0x40	; 64
    1286:	80 83       	st	Z, r24

	while (ADCSRA & (1<<ADSC)); //new conversion completed when ADSC becomes 0
    1288:	80 81       	ld	r24, Z
    128a:	86 fd       	sbrc	r24, 6
    128c:	fd cf       	rjmp	.-6      	; 0x1288 <ADC_Convert+0x1a>

	return result | ((ADCL)|(ADCH<<8));
    128e:	80 91 78 00 	lds	r24, 0x0078
    1292:	20 91 79 00 	lds	r18, 0x0079
    1296:	90 e0       	ldi	r25, 0x00	; 0
}
    1298:	92 2b       	or	r25, r18
    129a:	08 95       	ret

0000129c <ADC_DieTemp>:
float ADC_DieTemp (void) {
	int t;
	/*ADC_Reference(REFERENCE_1_6V);
	t=ADC_Convert(ADC_TEMP);
	*/
	ADCSRC = 10<<ADSUT0; // set start-up time
    129c:	8a e0       	ldi	r24, 0x0A	; 10
    129e:	80 93 77 00 	sts	0x0077, r24
	ADCSRB = 1<<MUX5; // set MUX5 first
    12a2:	88 e0       	ldi	r24, 0x08	; 8
    12a4:	80 93 7b 00 	sts	0x007B, r24
	ADMUX = (3<<REFS0) + (9<<MUX0); // store new ADMUX, 1.6V AREF
    12a8:	89 ec       	ldi	r24, 0xC9	; 201
    12aa:	80 93 7c 00 	sts	0x007C, r24
	// switch ADC on, set prescaler, start conversion
	ADCSRA = (1<<ADEN) + (1<<ADSC) + (4<<ADPS0);
    12ae:	84 ec       	ldi	r24, 0xC4	; 196
    12b0:	80 93 7a 00 	sts	0x007A, r24
	return (1.13*(float)ADC)-272.8;
    12b4:	60 91 78 00 	lds	r22, 0x0078
    12b8:	70 91 79 00 	lds	r23, 0x0079
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	0e 94 49 0c 	call	0x1892	; 0x1892 <__floatunsisf>
    12c4:	27 ed       	ldi	r18, 0xD7	; 215
    12c6:	33 ea       	ldi	r19, 0xA3	; 163
    12c8:	40 e9       	ldi	r20, 0x90	; 144
    12ca:	5f e3       	ldi	r21, 0x3F	; 63
    12cc:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__mulsf3>
    12d0:	26 e6       	ldi	r18, 0x66	; 102
    12d2:	36 e6       	ldi	r19, 0x66	; 102
    12d4:	48 e8       	ldi	r20, 0x88	; 136
    12d6:	53 e4       	ldi	r21, 0x43	; 67
    12d8:	0e 94 2f 0b 	call	0x165e	; 0x165e <__subsf3>
}
    12dc:	08 95       	ret

000012de <PWR_Init>:

/*************************************************************************//**
  @brief Initializes the power management system
*****************************************************************************/
void PWR_Init(void){
	DDRD |= 0b11000000;
    12de:	8a b1       	in	r24, 0x0a	; 10
    12e0:	80 6c       	ori	r24, 0xC0	; 192
    12e2:	8a b9       	out	0x0a, r24	; 10
    12e4:	08 95       	ret

000012e6 <PWR_TurnOn5V>:

/*************************************************************************//**
  @brief Turns on the 5V power supply
*****************************************************************************/
void PWR_TurnOn5V(void){
	PORTD |= 0b10000000;
    12e6:	5f 9a       	sbi	0x0b, 7	; 11
    12e8:	08 95       	ret

000012ea <SPI_SlaveInit>:

unsigned char buffer[16];

void SPI_SlaveInit(void)
{
	DDRB |= (1<<PORTB3); //Set MISO output
    12ea:	23 9a       	sbi	0x04, 3	; 4
	SPCR = (1<<SPE); //Enable SPI
    12ec:	80 e4       	ldi	r24, 0x40	; 64
    12ee:	8c bd       	out	0x2c, r24	; 44
    12f0:	08 95       	ret

000012f2 <SPI_SlaveReceive>:
}
char SPI_SlaveReceive(void)
{
	while(!(SPSR & (1<<SPIF))); //Wait for reception complete
    12f2:	0d b4       	in	r0, 0x2d	; 45
    12f4:	07 fe       	sbrs	r0, 7
    12f6:	fd cf       	rjmp	.-6      	; 0x12f2 <SPI_SlaveReceive>
	
	return SPDR;
    12f8:	8e b5       	in	r24, 0x2e	; 46
}
    12fa:	08 95       	ret

000012fc <SPI_SlaveTransmit>:
void SPI_SlaveTransmit(char d)
{
	char dummy;
	SPDR=d;
    12fc:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))); //Wait for reception complete
    12fe:	0d b4       	in	r0, 0x2d	; 45
    1300:	07 fe       	sbrs	r0, 7
    1302:	fd cf       	rjmp	.-6      	; 0x12fe <SPI_SlaveTransmit+0x2>
	
	dummy=SPDR;
    1304:	8e b5       	in	r24, 0x2e	; 46
	SPDR=dummy;
    1306:	8e bd       	out	0x2e, r24	; 46
    1308:	08 95       	ret

0000130a <TWI_Init>:
/*************************************************************************//**
  @brief Initializes the 2-wire Serial Interface as a master
  @param[in] freq SCL frequency (Do not exceed 400kHz)
  @return Status (@c 0 on failure, nonzero otherwise)
*****************************************************************************/
char TWI_Init(unsigned long freq){
    130a:	9b 01       	movw	r18, r22
    130c:	ac 01       	movw	r20, r24
	//printf("TWI_Init");
	TWSR=0x00;
    130e:	10 92 b9 00 	sts	0x00B9, r1
	TWBR=(unsigned char)(((F_CPU/freq)-16UL)/8UL); //Compute settings value and set frequency
    1312:	60 e0       	ldi	r22, 0x00	; 0
    1314:	74 e2       	ldi	r23, 0x24	; 36
    1316:	84 ef       	ldi	r24, 0xF4	; 244
    1318:	90 e0       	ldi	r25, 0x00	; 0
    131a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__udivmodsi4>
    131e:	da 01       	movw	r26, r20
    1320:	c9 01       	movw	r24, r18
    1322:	40 97       	sbiw	r24, 0x10	; 16
    1324:	a1 09       	sbc	r26, r1
    1326:	b1 09       	sbc	r27, r1
    1328:	68 94       	set
    132a:	12 f8       	bld	r1, 2
    132c:	b6 95       	lsr	r27
    132e:	a7 95       	ror	r26
    1330:	97 95       	ror	r25
    1332:	87 95       	ror	r24
    1334:	16 94       	lsr	r1
    1336:	d1 f7       	brne	.-12     	; 0x132c <TWI_Init+0x22>
    1338:	80 93 b8 00 	sts	0x00B8, r24
	TWCR=(1 << TWEN);
    133c:	84 e0       	ldi	r24, 0x04	; 4
    133e:	80 93 bc 00 	sts	0x00BC, r24
	
	//TWAR=0; //Disable slave mode
	
	return 1; //May want to actually check for success here
}
    1342:	81 e0       	ldi	r24, 0x01	; 1
    1344:	08 95       	ret

00001346 <TWI_WriteByte>:
  @param[in] data byte to send
  @return Status code, TWI_SENT_ACK or TWI_SENT_NACK on success
*****************************************************************************/
char TWI_WriteByte(unsigned char data){
	//printf("TWI_WriteByte");
	TWDR = data; //Stage the data to send
    1346:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
    134a:	84 e8       	ldi	r24, 0x84	; 132
    134c:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);//Send the data
    1350:	ec eb       	ldi	r30, 0xBC	; 188
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	88 23       	and	r24, r24
    1358:	ec f7       	brge	.-6      	; 0x1354 <TWI_WriteByte+0xe>
	
	return TWSR&TWSR_MASK;//Return the status code
    135a:	80 91 b9 00 	lds	r24, 0x00B9
}
    135e:	88 7f       	andi	r24, 0xF8	; 248
    1360:	08 95       	ret

00001362 <TWI_BeginWrite>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAW_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginWrite(unsigned char address){
	//printf("TWI_BeginWrite");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
    1362:	94 ee       	ldi	r25, 0xE4	; 228
    1364:	90 93 bc 00 	sts	0x00BC, r25
	int i=0;
	while ((TWCR & (1<<TWINT)) == 0);
    1368:	ec eb       	ldi	r30, 0xBC	; 188
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	90 81       	ld	r25, Z
    136e:	99 23       	and	r25, r25
    1370:	ec f7       	brge	.-6      	; 0x136c <TWI_BeginWrite+0xa>
    1372:	ef e9       	ldi	r30, 0x9F	; 159
    1374:	ff e0       	ldi	r31, 0x0F	; 15
    1376:	31 97       	sbiw	r30, 0x01	; 1
    1378:	f1 f7       	brne	.-4      	; 0x1376 <TWI_BeginWrite+0x14>
    137a:	00 c0       	rjmp	.+0      	; 0x137c <TWI_BeginWrite+0x1a>
    137c:	00 00       	nop
	_delay_ms(1);
	char stat = (TWSR & TWSR_MASK);
    137e:	90 91 b9 00 	lds	r25, 0x00B9
    1382:	98 7f       	andi	r25, 0xF8	; 248
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
    1384:	98 30       	cpi	r25, 0x08	; 8
    1386:	31 f0       	breq	.+12     	; 0x1394 <TWI_BeginWrite+0x32>
    1388:	90 31       	cpi	r25, 0x10	; 16
    138a:	21 f0       	breq	.+8      	; 0x1394 <TWI_BeginWrite+0x32>
    138c:	80 91 b9 00 	lds	r24, 0x00B9
    1390:	88 7f       	andi	r24, 0xF8	; 248
    1392:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) & SLAW_MASK); //reset bit 0 to send a write bit, send
    1394:	88 0f       	add	r24, r24
    1396:	0e 94 a3 09 	call	0x1346	; 0x1346 <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	return stat;//Return the status code
}
    139a:	08 95       	ret

0000139c <TWI_BeginRead>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAR_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginRead(unsigned char address){
	//printf("TWI_BeginRead");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
    139c:	94 ee       	ldi	r25, 0xE4	; 228
    139e:	90 93 bc 00 	sts	0x00BC, r25
	while ((TWCR & (1<<TWINT)) == 0);
    13a2:	ec eb       	ldi	r30, 0xBC	; 188
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	90 81       	ld	r25, Z
    13a8:	99 23       	and	r25, r25
    13aa:	ec f7       	brge	.-6      	; 0x13a6 <TWI_BeginRead+0xa>
	
	char stat = (TWSR & TWSR_MASK);
    13ac:	90 91 b9 00 	lds	r25, 0x00B9
    13b0:	98 7f       	andi	r25, 0xF8	; 248
	//printf("0x%1x",(unsigned)stat);
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
    13b2:	98 30       	cpi	r25, 0x08	; 8
    13b4:	31 f0       	breq	.+12     	; 0x13c2 <TWI_BeginRead+0x26>
    13b6:	90 31       	cpi	r25, 0x10	; 16
    13b8:	21 f0       	breq	.+8      	; 0x13c2 <TWI_BeginRead+0x26>
    13ba:	80 91 b9 00 	lds	r24, 0x00B9
    13be:	88 7f       	andi	r24, 0xF8	; 248
    13c0:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) | SLAR_MASK); //set bit 0 to send a read bit and send it
    13c2:	88 0f       	add	r24, r24
    13c4:	81 60       	ori	r24, 0x01	; 1
    13c6:	0e 94 a3 09 	call	0x1346	; 0x1346 <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	
	return stat;//Return the status code
}
    13ca:	08 95       	ret

000013cc <TWI_ReadAck>:
/*************************************************************************//**
  @brief Receives a byte over TWI and returns an ACK
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_ACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadAck(unsigned char *data){
    13cc:	dc 01       	movw	r26, r24
	//printf("TWI_ReadAck");
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Start receiving, ending with an ACK
    13ce:	84 ec       	ldi	r24, 0xC4	; 196
    13d0:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);
    13d4:	ec eb       	ldi	r30, 0xBC	; 188
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	90 81       	ld	r25, Z
    13da:	99 23       	and	r25, r25
    13dc:	ec f7       	brge	.-6      	; 0x13d8 <TWI_ReadAck+0xc>
	*data=TWDR; //Store the data
    13de:	80 91 bb 00 	lds	r24, 0x00BB
    13e2:	8c 93       	st	X, r24
	
	return TWSR&TWSR_MASK;//Return the status code
    13e4:	80 91 b9 00 	lds	r24, 0x00B9
}
    13e8:	88 7f       	andi	r24, 0xF8	; 248
    13ea:	08 95       	ret

000013ec <TWI_ReadNack>:
/*************************************************************************//**
  @brief Receives a byte over TWI and returns a NACK
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_NACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadNack(unsigned char *data){
    13ec:	dc 01       	movw	r26, r24
	//printf("TWI_ReadNack");
	TWCR = (1<<TWINT)|(1<<TWEN); //Start receiving, ending with a NACK
    13ee:	84 e8       	ldi	r24, 0x84	; 132
    13f0:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);
    13f4:	ec eb       	ldi	r30, 0xBC	; 188
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	90 81       	ld	r25, Z
    13fa:	99 23       	and	r25, r25
    13fc:	ec f7       	brge	.-6      	; 0x13f8 <TWI_ReadNack+0xc>
	*data=TWDR; //Store the data
    13fe:	80 91 bb 00 	lds	r24, 0x00BB
    1402:	8c 93       	st	X, r24
	
	return TWSR&TWSR_MASK;//Return the status code
    1404:	80 91 b9 00 	lds	r24, 0x00B9
}
    1408:	88 7f       	andi	r24, 0xF8	; 248
    140a:	08 95       	ret

0000140c <TWI_Stop>:
  @brief Sends a Stop bit, be sure to send a Start bit before future interactions on the bus
  @return Status code, should always be nonzero
*****************************************************************************/
char TWI_Stop(void){
	//printf("TWI_Stop");
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    140c:	84 e9       	ldi	r24, 0x94	; 148
    140e:	80 93 bc 00 	sts	0x00BC, r24
	return 1;
}
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	08 95       	ret

00001416 <TWI_Read>:
  @param[in] amount Number of bytes to recieve
  @param[in] whether or not to send an ACK on the last byte, sends NACK if false
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
    1416:	9f 92       	push	r9
    1418:	af 92       	push	r10
    141a:	bf 92       	push	r11
    141c:	cf 92       	push	r12
    141e:	df 92       	push	r13
    1420:	ef 92       	push	r14
    1422:	ff 92       	push	r15
    1424:	0f 93       	push	r16
    1426:	1f 93       	push	r17
    1428:	cf 93       	push	r28
    142a:	df 93       	push	r29
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
    142c:	16 16       	cp	r1, r22
    142e:	17 06       	cpc	r1, r23
    1430:	0c f5       	brge	.+66     	; 0x1474 <TWI_Read+0x5e>
    1432:	94 2e       	mov	r9, r20
    1434:	8b 01       	movw	r16, r22
    1436:	7c 01       	movw	r14, r24
    1438:	c0 e0       	ldi	r28, 0x00	; 0
    143a:	d0 e0       	ldi	r29, 0x00	; 0
		if((ack==false) && ((amount-1)==i)){
    143c:	6b 01       	movw	r12, r22
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	c8 1a       	sub	r12, r24
    1442:	d1 08       	sbc	r13, r1
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
    1444:	57 01       	movw	r10, r14
    1446:	ac 0c       	add	r10, r12
    1448:	bd 1c       	adc	r11, r13
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
		if((ack==false) && ((amount-1)==i)){
    144a:	91 10       	cpse	r9, r1
    144c:	07 c0       	rjmp	.+14     	; 0x145c <TWI_Read+0x46>
    144e:	cc 16       	cp	r12, r28
    1450:	dd 06       	cpc	r13, r29
    1452:	21 f4       	brne	.+8      	; 0x145c <TWI_Read+0x46>
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
    1454:	c5 01       	movw	r24, r10
    1456:	0e 94 f6 09 	call	0x13ec	; 0x13ec <TWI_ReadNack>
    145a:	05 c0       	rjmp	.+10     	; 0x1466 <TWI_Read+0x50>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}else{
			status=TWI_ReadAck(&data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
    145c:	c7 01       	movw	r24, r14
    145e:	8c 0f       	add	r24, r28
    1460:	9d 1f       	adc	r25, r29
    1462:	0e 94 e6 09 	call	0x13cc	; 0x13cc <TWI_ReadAck>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}
		//printf("A");
		if(status!=TWI_REC_ACK)return status; //If NACK was selected, returning here is fine since the loop is already ending
    1466:	80 35       	cpi	r24, 0x50	; 80
    1468:	31 f4       	brne	.+12     	; 0x1476 <TWI_Read+0x60>
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
    146a:	21 96       	adiw	r28, 0x01	; 1
    146c:	c0 17       	cp	r28, r16
    146e:	d1 07       	cpc	r29, r17
    1470:	61 f7       	brne	.-40     	; 0x144a <TWI_Read+0x34>
    1472:	01 c0       	rjmp	.+2      	; 0x1476 <TWI_Read+0x60>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
    1474:	80 e0       	ldi	r24, 0x00	; 0
		//will return if something goes wrong partway through
		//printf("B");
	}
	//printf("0x%1x",(unsigned)status);
	return status;
}
    1476:	df 91       	pop	r29
    1478:	cf 91       	pop	r28
    147a:	1f 91       	pop	r17
    147c:	0f 91       	pop	r16
    147e:	ff 90       	pop	r15
    1480:	ef 90       	pop	r14
    1482:	df 90       	pop	r13
    1484:	cf 90       	pop	r12
    1486:	bf 90       	pop	r11
    1488:	af 90       	pop	r10
    148a:	9f 90       	pop	r9
    148c:	08 95       	ret

0000148e <TWI_Write>:
  @param[in] *data Pointer to an array of bytes to send
  @param[in] amount Number of bytes to send
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
    148e:	0f 93       	push	r16
    1490:	1f 93       	push	r17
    1492:	cf 93       	push	r28
    1494:	df 93       	push	r29
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
    1496:	16 16       	cp	r1, r22
    1498:	17 06       	cpc	r1, r23
    149a:	6c f4       	brge	.+26     	; 0x14b6 <TWI_Write+0x28>
    149c:	8c 01       	movw	r16, r24
    149e:	ec 01       	movw	r28, r24
    14a0:	06 0f       	add	r16, r22
    14a2:	17 1f       	adc	r17, r23
		status=TWI_WriteByte(data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
    14a4:	89 91       	ld	r24, Y+
    14a6:	0e 94 a3 09 	call	0x1346	; 0x1346 <TWI_WriteByte>
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
    14aa:	88 32       	cpi	r24, 0x28	; 40
    14ac:	29 f4       	brne	.+10     	; 0x14b8 <TWI_Write+0x2a>
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
    14ae:	c0 17       	cp	r28, r16
    14b0:	d1 07       	cpc	r29, r17
    14b2:	c1 f7       	brne	.-16     	; 0x14a4 <TWI_Write+0x16>
    14b4:	01 c0       	rjmp	.+2      	; 0x14b8 <TWI_Write+0x2a>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
    14b6:	80 e0       	ldi	r24, 0x00	; 0
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
		//will return if something goes wrong partway through
	}
	return status;
    14b8:	df 91       	pop	r29
    14ba:	cf 91       	pop	r28
    14bc:	1f 91       	pop	r17
    14be:	0f 91       	pop	r16
    14c0:	08 95       	ret

000014c2 <USART0_Init>:
  @brief Initializes USART0 in asynchronous UART mode, 8 bit data, 1 stop bit
  @param[in] desired baud rate (configuration values computed using F_CPU)
*****************************************************************************/
void USART0_Init(unsigned long baud){
	
	stdout = &USART0_stdout; //make stdout print to USART0
    14c2:	29 e0       	ldi	r18, 0x09	; 9
    14c4:	32 e0       	ldi	r19, 0x02	; 2
    14c6:	30 93 66 03 	sts	0x0366, r19
    14ca:	20 93 65 03 	sts	0x0365, r18
	
	//Compute UBRR for baudrate setting
	unsigned short ubrr=(unsigned short)((F_CPU/(baud*16UL))-1);
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	88 0f       	add	r24, r24
    14d4:	99 1f       	adc	r25, r25
    14d6:	aa 1f       	adc	r26, r26
    14d8:	bb 1f       	adc	r27, r27
    14da:	88 0f       	add	r24, r24
    14dc:	99 1f       	adc	r25, r25
    14de:	aa 1f       	adc	r26, r26
    14e0:	bb 1f       	adc	r27, r27
    14e2:	9c 01       	movw	r18, r24
    14e4:	ad 01       	movw	r20, r26
    14e6:	22 0f       	add	r18, r18
    14e8:	33 1f       	adc	r19, r19
    14ea:	44 1f       	adc	r20, r20
    14ec:	55 1f       	adc	r21, r21
    14ee:	22 0f       	add	r18, r18
    14f0:	33 1f       	adc	r19, r19
    14f2:	44 1f       	adc	r20, r20
    14f4:	55 1f       	adc	r21, r21
    14f6:	60 e0       	ldi	r22, 0x00	; 0
    14f8:	74 e2       	ldi	r23, 0x24	; 36
    14fa:	84 ef       	ldi	r24, 0xF4	; 244
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <__udivmodsi4>
    1502:	21 50       	subi	r18, 0x01	; 1
    1504:	31 09       	sbc	r19, r1
	
	//Set BAUD rate.
	UBRR0H = (unsigned char) (ubrr >> 8);
    1506:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) ubrr;
    150a:	20 93 c4 00 	sts	0x00C4, r18
	/*Set frame format. 8 data bit(settings bits UCSZ00 and UCSZ01  UCSR0B), 1 stop bit(by default and need not to be worried about). 
	The UCSZ01:0 bits combined with the UCSZ02 bit in UCSR0B sets the number of data
	bits (Character Size) in the frame that the Receiver and Transmitter use. 
	If a change on frame format is needed, make sure to modify UCSR0B register above accordingly.
	See datasheet pg. 390.*/
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
    150e:	86 e0       	ldi	r24, 0x06	; 6
    1510:	80 93 c2 00 	sts	0x00C2, r24
	
	//Enable receiver and transmitter. Enable the USART Receive Complete interrupt(RXCIE).
	//UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0));
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);//Enable RX/TX, no interrupts
    1514:	88 e1       	ldi	r24, 0x18	; 24
    1516:	80 93 c1 00 	sts	0x00C1, r24
    151a:	08 95       	ret

0000151c <USART0_Transmit>:
Function contains busy loops for simplicity in debugging. Not production code.
  @brief Transmits a byte via USART0
  @param[in] data byte to be transmitted
*****************************************************************************/
void USART0_Transmit(unsigned char data){
	while(!(UCSR0A & (1 << UDRE0))); //Wait for the empty transmit buffer. (Waiting UDR0 to be empty.)
    151c:	e0 ec       	ldi	r30, 0xC0	; 192
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	90 81       	ld	r25, Z
    1522:	95 ff       	sbrs	r25, 5
    1524:	fd cf       	rjmp	.-6      	; 0x1520 <USART0_Transmit+0x4>
		UDR0 = data;			//store the data in the USART Data Register
    1526:	80 93 c6 00 	sts	0x00C6, r24
    152a:	08 95       	ret

0000152c <USART0_putchar_printf>:
  @brief Called when stdout is being printed to USART0 (this is set up at runtime)
  @param[in] var byte to transmit
  @param[in/out] *stream Pointer to a stdio.h FILE io stream
  @return Status
*****************************************************************************/
int USART0_putchar_printf(char var, FILE *stream) {
    152c:	cf 93       	push	r28
    152e:	c8 2f       	mov	r28, r24
	if (var == '\n') USART0_Transmit('\r');
    1530:	8a 30       	cpi	r24, 0x0A	; 10
    1532:	19 f4       	brne	.+6      	; 0x153a <USART0_putchar_printf+0xe>
    1534:	8d e0       	ldi	r24, 0x0D	; 13
    1536:	0e 94 8e 0a 	call	0x151c	; 0x151c <USART0_Transmit>
	USART0_Transmit(var);
    153a:	8c 2f       	mov	r24, r28
    153c:	0e 94 8e 0a 	call	0x151c	; 0x151c <USART0_Transmit>
	return 0;
}
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	cf 91       	pop	r28
    1546:	08 95       	ret

00001548 <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
    1548:	1f 92       	push	r1
    154a:	0f 92       	push	r0
    154c:	0f b6       	in	r0, 0x3f	; 63
    154e:	0f 92       	push	r0
    1550:	11 24       	eor	r1, r1
    1552:	8f 93       	push	r24
  halSleepTimerEvent = true;
    1554:	81 e0       	ldi	r24, 0x01	; 1
    1556:	80 93 d3 02 	sts	0x02D3, r24
}
    155a:	8f 91       	pop	r24
    155c:	0f 90       	pop	r0
    155e:	0f be       	out	0x3f, r0	; 63
    1560:	0f 90       	pop	r0
    1562:	1f 90       	pop	r1
    1564:	18 95       	reti

00001566 <__vector_42>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    1566:	1f 92       	push	r1
    1568:	0f 92       	push	r0
    156a:	0f b6       	in	r0, 0x3f	; 63
    156c:	0f 92       	push	r0
    156e:	11 24       	eor	r1, r1
    1570:	8f 93       	push	r24
  halTimerIrqCount++;
    1572:	80 91 62 03 	lds	r24, 0x0362
    1576:	8f 5f       	subi	r24, 0xFF	; 255
    1578:	80 93 62 03 	sts	0x0362, r24
}
    157c:	8f 91       	pop	r24
    157e:	0f 90       	pop	r0
    1580:	0f be       	out	0x3f, r0	; 63
    1582:	0f 90       	pop	r0
    1584:	1f 90       	pop	r1
    1586:	18 95       	reti

00001588 <__vector_26>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
    1588:	1f 92       	push	r1
    158a:	0f 92       	push	r0
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	0f 92       	push	r0
    1590:	11 24       	eor	r1, r1
    1592:	8f 93       	push	r24
    1594:	ef 93       	push	r30
    1596:	ff 93       	push	r31
  udrEmpty = true;
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	80 93 d5 02 	sts	0x02D5, r24
  UCSRxB &= ~(1 << UDRIE1);
    159e:	e1 ec       	ldi	r30, 0xC1	; 193
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	8f 7d       	andi	r24, 0xDF	; 223
    15a6:	80 83       	st	Z, r24
}
    15a8:	ff 91       	pop	r31
    15aa:	ef 91       	pop	r30
    15ac:	8f 91       	pop	r24
    15ae:	0f 90       	pop	r0
    15b0:	0f be       	out	0x3f, r0	; 63
    15b2:	0f 90       	pop	r0
    15b4:	1f 90       	pop	r1
    15b6:	18 95       	reti

000015b8 <__vector_25>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
    15b8:	1f 92       	push	r1
    15ba:	0f 92       	push	r0
    15bc:	0f b6       	in	r0, 0x3f	; 63
    15be:	0f 92       	push	r0
    15c0:	11 24       	eor	r1, r1
    15c2:	2f 93       	push	r18
    15c4:	3f 93       	push	r19
    15c6:	4f 93       	push	r20
    15c8:	5f 93       	push	r21
    15ca:	6f 93       	push	r22
    15cc:	7f 93       	push	r23
    15ce:	8f 93       	push	r24
    15d0:	9f 93       	push	r25
    15d2:	af 93       	push	r26
    15d4:	bf 93       	push	r27
    15d6:	ef 93       	push	r30
    15d8:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
    15da:	80 91 c0 00 	lds	r24, 0x00C0
  uint8_t byte = UDRx;
    15de:	20 91 c6 00 	lds	r18, 0x00C6

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
    15e2:	8c 71       	andi	r24, 0x1C	; 28
    15e4:	59 f5       	brne	.+86     	; 0x163c <__vector_25+0x84>
  {
    if (rxFifo.bytes == rxFifo.size)
    15e6:	e6 ed       	ldi	r30, 0xD6	; 214
    15e8:	f2 e0       	ldi	r31, 0x02	; 2
    15ea:	46 81       	ldd	r20, Z+6	; 0x06
    15ec:	57 81       	ldd	r21, Z+7	; 0x07
    15ee:	84 81       	ldd	r24, Z+4	; 0x04
    15f0:	95 81       	ldd	r25, Z+5	; 0x05
    15f2:	48 17       	cp	r20, r24
    15f4:	59 07       	cpc	r21, r25
    15f6:	11 f1       	breq	.+68     	; 0x163c <__vector_25+0x84>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
    15f8:	40 85       	ldd	r20, Z+8	; 0x08
    15fa:	51 85       	ldd	r21, Z+9	; 0x09
    15fc:	82 81       	ldd	r24, Z+2	; 0x02
    15fe:	93 81       	ldd	r25, Z+3	; 0x03
    1600:	bc 01       	movw	r22, r24
    1602:	6f 5f       	subi	r22, 0xFF	; 255
    1604:	7f 4f       	sbci	r23, 0xFF	; 255
    1606:	73 83       	std	Z+3, r23	; 0x03
    1608:	62 83       	std	Z+2, r22	; 0x02
    160a:	da 01       	movw	r26, r20
    160c:	a8 0f       	add	r26, r24
    160e:	b9 1f       	adc	r27, r25
    1610:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
    1612:	22 81       	ldd	r18, Z+2	; 0x02
    1614:	33 81       	ldd	r19, Z+3	; 0x03
    1616:	84 81       	ldd	r24, Z+4	; 0x04
    1618:	95 81       	ldd	r25, Z+5	; 0x05
    161a:	28 17       	cp	r18, r24
    161c:	39 07       	cpc	r19, r25
    161e:	21 f4       	brne	.+8      	; 0x1628 <__vector_25+0x70>
      rxFifo.tail = 0;
    1620:	10 92 d9 02 	sts	0x02D9, r1
    1624:	10 92 d8 02 	sts	0x02D8, r1
    rxFifo.bytes++;
    1628:	e6 ed       	ldi	r30, 0xD6	; 214
    162a:	f2 e0       	ldi	r31, 0x02	; 2
    162c:	86 81       	ldd	r24, Z+6	; 0x06
    162e:	97 81       	ldd	r25, Z+7	; 0x07
    1630:	01 96       	adiw	r24, 0x01	; 1
    1632:	97 83       	std	Z+7, r25	; 0x07
    1634:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	80 93 d4 02 	sts	0x02D4, r24
  }

  PRAGMA(diag_default=Pa082);
}
    163c:	ff 91       	pop	r31
    163e:	ef 91       	pop	r30
    1640:	bf 91       	pop	r27
    1642:	af 91       	pop	r26
    1644:	9f 91       	pop	r25
    1646:	8f 91       	pop	r24
    1648:	7f 91       	pop	r23
    164a:	6f 91       	pop	r22
    164c:	5f 91       	pop	r21
    164e:	4f 91       	pop	r20
    1650:	3f 91       	pop	r19
    1652:	2f 91       	pop	r18
    1654:	0f 90       	pop	r0
    1656:	0f be       	out	0x3f, r0	; 63
    1658:	0f 90       	pop	r0
    165a:	1f 90       	pop	r1
    165c:	18 95       	reti

0000165e <__subsf3>:
    165e:	50 58       	subi	r21, 0x80	; 128

00001660 <__addsf3>:
    1660:	bb 27       	eor	r27, r27
    1662:	aa 27       	eor	r26, r26
    1664:	0e 94 47 0b 	call	0x168e	; 0x168e <__addsf3x>
    1668:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__fp_round>
    166c:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__fp_pscA>
    1670:	38 f0       	brcs	.+14     	; 0x1680 <__addsf3+0x20>
    1672:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__fp_pscB>
    1676:	20 f0       	brcs	.+8      	; 0x1680 <__addsf3+0x20>
    1678:	39 f4       	brne	.+14     	; 0x1688 <__addsf3+0x28>
    167a:	9f 3f       	cpi	r25, 0xFF	; 255
    167c:	19 f4       	brne	.+6      	; 0x1684 <__addsf3+0x24>
    167e:	26 f4       	brtc	.+8      	; 0x1688 <__addsf3+0x28>
    1680:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__fp_nan>
    1684:	0e f4       	brtc	.+2      	; 0x1688 <__addsf3+0x28>
    1686:	e0 95       	com	r30
    1688:	e7 fb       	bst	r30, 7
    168a:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__fp_inf>

0000168e <__addsf3x>:
    168e:	e9 2f       	mov	r30, r25
    1690:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__fp_split3>
    1694:	58 f3       	brcs	.-42     	; 0x166c <__addsf3+0xc>
    1696:	ba 17       	cp	r27, r26
    1698:	62 07       	cpc	r22, r18
    169a:	73 07       	cpc	r23, r19
    169c:	84 07       	cpc	r24, r20
    169e:	95 07       	cpc	r25, r21
    16a0:	20 f0       	brcs	.+8      	; 0x16aa <__addsf3x+0x1c>
    16a2:	79 f4       	brne	.+30     	; 0x16c2 <__addsf3x+0x34>
    16a4:	a6 f5       	brtc	.+104    	; 0x170e <__addsf3x+0x80>
    16a6:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__fp_zero>
    16aa:	0e f4       	brtc	.+2      	; 0x16ae <__addsf3x+0x20>
    16ac:	e0 95       	com	r30
    16ae:	0b 2e       	mov	r0, r27
    16b0:	ba 2f       	mov	r27, r26
    16b2:	a0 2d       	mov	r26, r0
    16b4:	0b 01       	movw	r0, r22
    16b6:	b9 01       	movw	r22, r18
    16b8:	90 01       	movw	r18, r0
    16ba:	0c 01       	movw	r0, r24
    16bc:	ca 01       	movw	r24, r20
    16be:	a0 01       	movw	r20, r0
    16c0:	11 24       	eor	r1, r1
    16c2:	ff 27       	eor	r31, r31
    16c4:	59 1b       	sub	r21, r25
    16c6:	99 f0       	breq	.+38     	; 0x16ee <__addsf3x+0x60>
    16c8:	59 3f       	cpi	r21, 0xF9	; 249
    16ca:	50 f4       	brcc	.+20     	; 0x16e0 <__addsf3x+0x52>
    16cc:	50 3e       	cpi	r21, 0xE0	; 224
    16ce:	68 f1       	brcs	.+90     	; 0x172a <__addsf3x+0x9c>
    16d0:	1a 16       	cp	r1, r26
    16d2:	f0 40       	sbci	r31, 0x00	; 0
    16d4:	a2 2f       	mov	r26, r18
    16d6:	23 2f       	mov	r18, r19
    16d8:	34 2f       	mov	r19, r20
    16da:	44 27       	eor	r20, r20
    16dc:	58 5f       	subi	r21, 0xF8	; 248
    16de:	f3 cf       	rjmp	.-26     	; 0x16c6 <__addsf3x+0x38>
    16e0:	46 95       	lsr	r20
    16e2:	37 95       	ror	r19
    16e4:	27 95       	ror	r18
    16e6:	a7 95       	ror	r26
    16e8:	f0 40       	sbci	r31, 0x00	; 0
    16ea:	53 95       	inc	r21
    16ec:	c9 f7       	brne	.-14     	; 0x16e0 <__addsf3x+0x52>
    16ee:	7e f4       	brtc	.+30     	; 0x170e <__addsf3x+0x80>
    16f0:	1f 16       	cp	r1, r31
    16f2:	ba 0b       	sbc	r27, r26
    16f4:	62 0b       	sbc	r22, r18
    16f6:	73 0b       	sbc	r23, r19
    16f8:	84 0b       	sbc	r24, r20
    16fa:	ba f0       	brmi	.+46     	; 0x172a <__addsf3x+0x9c>
    16fc:	91 50       	subi	r25, 0x01	; 1
    16fe:	a1 f0       	breq	.+40     	; 0x1728 <__addsf3x+0x9a>
    1700:	ff 0f       	add	r31, r31
    1702:	bb 1f       	adc	r27, r27
    1704:	66 1f       	adc	r22, r22
    1706:	77 1f       	adc	r23, r23
    1708:	88 1f       	adc	r24, r24
    170a:	c2 f7       	brpl	.-16     	; 0x16fc <__addsf3x+0x6e>
    170c:	0e c0       	rjmp	.+28     	; 0x172a <__addsf3x+0x9c>
    170e:	ba 0f       	add	r27, r26
    1710:	62 1f       	adc	r22, r18
    1712:	73 1f       	adc	r23, r19
    1714:	84 1f       	adc	r24, r20
    1716:	48 f4       	brcc	.+18     	; 0x172a <__addsf3x+0x9c>
    1718:	87 95       	ror	r24
    171a:	77 95       	ror	r23
    171c:	67 95       	ror	r22
    171e:	b7 95       	ror	r27
    1720:	f7 95       	ror	r31
    1722:	9e 3f       	cpi	r25, 0xFE	; 254
    1724:	08 f0       	brcs	.+2      	; 0x1728 <__addsf3x+0x9a>
    1726:	b0 cf       	rjmp	.-160    	; 0x1688 <__addsf3+0x28>
    1728:	93 95       	inc	r25
    172a:	88 0f       	add	r24, r24
    172c:	08 f0       	brcs	.+2      	; 0x1730 <__addsf3x+0xa2>
    172e:	99 27       	eor	r25, r25
    1730:	ee 0f       	add	r30, r30
    1732:	97 95       	ror	r25
    1734:	87 95       	ror	r24
    1736:	08 95       	ret

00001738 <__cmpsf2>:
    1738:	0e 94 86 0c 	call	0x190c	; 0x190c <__fp_cmp>
    173c:	08 f4       	brcc	.+2      	; 0x1740 <__cmpsf2+0x8>
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	08 95       	ret

00001742 <__divsf3>:
    1742:	0e 94 b5 0b 	call	0x176a	; 0x176a <__divsf3x>
    1746:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__fp_round>
    174a:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__fp_pscB>
    174e:	58 f0       	brcs	.+22     	; 0x1766 <__divsf3+0x24>
    1750:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__fp_pscA>
    1754:	40 f0       	brcs	.+16     	; 0x1766 <__divsf3+0x24>
    1756:	29 f4       	brne	.+10     	; 0x1762 <__divsf3+0x20>
    1758:	5f 3f       	cpi	r21, 0xFF	; 255
    175a:	29 f0       	breq	.+10     	; 0x1766 <__divsf3+0x24>
    175c:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__fp_inf>
    1760:	51 11       	cpse	r21, r1
    1762:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__fp_szero>
    1766:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__fp_nan>

0000176a <__divsf3x>:
    176a:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__fp_split3>
    176e:	68 f3       	brcs	.-38     	; 0x174a <__divsf3+0x8>

00001770 <__divsf3_pse>:
    1770:	99 23       	and	r25, r25
    1772:	b1 f3       	breq	.-20     	; 0x1760 <__divsf3+0x1e>
    1774:	55 23       	and	r21, r21
    1776:	91 f3       	breq	.-28     	; 0x175c <__divsf3+0x1a>
    1778:	95 1b       	sub	r25, r21
    177a:	55 0b       	sbc	r21, r21
    177c:	bb 27       	eor	r27, r27
    177e:	aa 27       	eor	r26, r26
    1780:	62 17       	cp	r22, r18
    1782:	73 07       	cpc	r23, r19
    1784:	84 07       	cpc	r24, r20
    1786:	38 f0       	brcs	.+14     	; 0x1796 <__divsf3_pse+0x26>
    1788:	9f 5f       	subi	r25, 0xFF	; 255
    178a:	5f 4f       	sbci	r21, 0xFF	; 255
    178c:	22 0f       	add	r18, r18
    178e:	33 1f       	adc	r19, r19
    1790:	44 1f       	adc	r20, r20
    1792:	aa 1f       	adc	r26, r26
    1794:	a9 f3       	breq	.-22     	; 0x1780 <__divsf3_pse+0x10>
    1796:	35 d0       	rcall	.+106    	; 0x1802 <__divsf3_pse+0x92>
    1798:	0e 2e       	mov	r0, r30
    179a:	3a f0       	brmi	.+14     	; 0x17aa <__divsf3_pse+0x3a>
    179c:	e0 e8       	ldi	r30, 0x80	; 128
    179e:	32 d0       	rcall	.+100    	; 0x1804 <__divsf3_pse+0x94>
    17a0:	91 50       	subi	r25, 0x01	; 1
    17a2:	50 40       	sbci	r21, 0x00	; 0
    17a4:	e6 95       	lsr	r30
    17a6:	00 1c       	adc	r0, r0
    17a8:	ca f7       	brpl	.-14     	; 0x179c <__divsf3_pse+0x2c>
    17aa:	2b d0       	rcall	.+86     	; 0x1802 <__divsf3_pse+0x92>
    17ac:	fe 2f       	mov	r31, r30
    17ae:	29 d0       	rcall	.+82     	; 0x1802 <__divsf3_pse+0x92>
    17b0:	66 0f       	add	r22, r22
    17b2:	77 1f       	adc	r23, r23
    17b4:	88 1f       	adc	r24, r24
    17b6:	bb 1f       	adc	r27, r27
    17b8:	26 17       	cp	r18, r22
    17ba:	37 07       	cpc	r19, r23
    17bc:	48 07       	cpc	r20, r24
    17be:	ab 07       	cpc	r26, r27
    17c0:	b0 e8       	ldi	r27, 0x80	; 128
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <__divsf3_pse+0x56>
    17c4:	bb 0b       	sbc	r27, r27
    17c6:	80 2d       	mov	r24, r0
    17c8:	bf 01       	movw	r22, r30
    17ca:	ff 27       	eor	r31, r31
    17cc:	93 58       	subi	r25, 0x83	; 131
    17ce:	5f 4f       	sbci	r21, 0xFF	; 255
    17d0:	3a f0       	brmi	.+14     	; 0x17e0 <__divsf3_pse+0x70>
    17d2:	9e 3f       	cpi	r25, 0xFE	; 254
    17d4:	51 05       	cpc	r21, r1
    17d6:	78 f0       	brcs	.+30     	; 0x17f6 <__divsf3_pse+0x86>
    17d8:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__fp_inf>
    17dc:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__fp_szero>
    17e0:	5f 3f       	cpi	r21, 0xFF	; 255
    17e2:	e4 f3       	brlt	.-8      	; 0x17dc <__divsf3_pse+0x6c>
    17e4:	98 3e       	cpi	r25, 0xE8	; 232
    17e6:	d4 f3       	brlt	.-12     	; 0x17dc <__divsf3_pse+0x6c>
    17e8:	86 95       	lsr	r24
    17ea:	77 95       	ror	r23
    17ec:	67 95       	ror	r22
    17ee:	b7 95       	ror	r27
    17f0:	f7 95       	ror	r31
    17f2:	9f 5f       	subi	r25, 0xFF	; 255
    17f4:	c9 f7       	brne	.-14     	; 0x17e8 <__divsf3_pse+0x78>
    17f6:	88 0f       	add	r24, r24
    17f8:	91 1d       	adc	r25, r1
    17fa:	96 95       	lsr	r25
    17fc:	87 95       	ror	r24
    17fe:	97 f9       	bld	r25, 7
    1800:	08 95       	ret
    1802:	e1 e0       	ldi	r30, 0x01	; 1
    1804:	66 0f       	add	r22, r22
    1806:	77 1f       	adc	r23, r23
    1808:	88 1f       	adc	r24, r24
    180a:	bb 1f       	adc	r27, r27
    180c:	62 17       	cp	r22, r18
    180e:	73 07       	cpc	r23, r19
    1810:	84 07       	cpc	r24, r20
    1812:	ba 07       	cpc	r27, r26
    1814:	20 f0       	brcs	.+8      	; 0x181e <__divsf3_pse+0xae>
    1816:	62 1b       	sub	r22, r18
    1818:	73 0b       	sbc	r23, r19
    181a:	84 0b       	sbc	r24, r20
    181c:	ba 0b       	sbc	r27, r26
    181e:	ee 1f       	adc	r30, r30
    1820:	88 f7       	brcc	.-30     	; 0x1804 <__divsf3_pse+0x94>
    1822:	e0 95       	com	r30
    1824:	08 95       	ret

00001826 <__fixsfsi>:
    1826:	0e 94 1a 0c 	call	0x1834	; 0x1834 <__fixunssfsi>
    182a:	68 94       	set
    182c:	b1 11       	cpse	r27, r1
    182e:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__fp_szero>
    1832:	08 95       	ret

00001834 <__fixunssfsi>:
    1834:	0e 94 da 0c 	call	0x19b4	; 0x19b4 <__fp_splitA>
    1838:	88 f0       	brcs	.+34     	; 0x185c <__fixunssfsi+0x28>
    183a:	9f 57       	subi	r25, 0x7F	; 127
    183c:	98 f0       	brcs	.+38     	; 0x1864 <__fixunssfsi+0x30>
    183e:	b9 2f       	mov	r27, r25
    1840:	99 27       	eor	r25, r25
    1842:	b7 51       	subi	r27, 0x17	; 23
    1844:	b0 f0       	brcs	.+44     	; 0x1872 <__fixunssfsi+0x3e>
    1846:	e1 f0       	breq	.+56     	; 0x1880 <__fixunssfsi+0x4c>
    1848:	66 0f       	add	r22, r22
    184a:	77 1f       	adc	r23, r23
    184c:	88 1f       	adc	r24, r24
    184e:	99 1f       	adc	r25, r25
    1850:	1a f0       	brmi	.+6      	; 0x1858 <__fixunssfsi+0x24>
    1852:	ba 95       	dec	r27
    1854:	c9 f7       	brne	.-14     	; 0x1848 <__fixunssfsi+0x14>
    1856:	14 c0       	rjmp	.+40     	; 0x1880 <__fixunssfsi+0x4c>
    1858:	b1 30       	cpi	r27, 0x01	; 1
    185a:	91 f0       	breq	.+36     	; 0x1880 <__fixunssfsi+0x4c>
    185c:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <__fp_zero>
    1860:	b1 e0       	ldi	r27, 0x01	; 1
    1862:	08 95       	ret
    1864:	0c 94 f4 0c 	jmp	0x19e8	; 0x19e8 <__fp_zero>
    1868:	67 2f       	mov	r22, r23
    186a:	78 2f       	mov	r23, r24
    186c:	88 27       	eor	r24, r24
    186e:	b8 5f       	subi	r27, 0xF8	; 248
    1870:	39 f0       	breq	.+14     	; 0x1880 <__fixunssfsi+0x4c>
    1872:	b9 3f       	cpi	r27, 0xF9	; 249
    1874:	cc f3       	brlt	.-14     	; 0x1868 <__fixunssfsi+0x34>
    1876:	86 95       	lsr	r24
    1878:	77 95       	ror	r23
    187a:	67 95       	ror	r22
    187c:	b3 95       	inc	r27
    187e:	d9 f7       	brne	.-10     	; 0x1876 <__fixunssfsi+0x42>
    1880:	3e f4       	brtc	.+14     	; 0x1890 <__fixunssfsi+0x5c>
    1882:	90 95       	com	r25
    1884:	80 95       	com	r24
    1886:	70 95       	com	r23
    1888:	61 95       	neg	r22
    188a:	7f 4f       	sbci	r23, 0xFF	; 255
    188c:	8f 4f       	sbci	r24, 0xFF	; 255
    188e:	9f 4f       	sbci	r25, 0xFF	; 255
    1890:	08 95       	ret

00001892 <__floatunsisf>:
    1892:	e8 94       	clt
    1894:	09 c0       	rjmp	.+18     	; 0x18a8 <__floatsisf+0x12>

00001896 <__floatsisf>:
    1896:	97 fb       	bst	r25, 7
    1898:	3e f4       	brtc	.+14     	; 0x18a8 <__floatsisf+0x12>
    189a:	90 95       	com	r25
    189c:	80 95       	com	r24
    189e:	70 95       	com	r23
    18a0:	61 95       	neg	r22
    18a2:	7f 4f       	sbci	r23, 0xFF	; 255
    18a4:	8f 4f       	sbci	r24, 0xFF	; 255
    18a6:	9f 4f       	sbci	r25, 0xFF	; 255
    18a8:	99 23       	and	r25, r25
    18aa:	a9 f0       	breq	.+42     	; 0x18d6 <__floatsisf+0x40>
    18ac:	f9 2f       	mov	r31, r25
    18ae:	96 e9       	ldi	r25, 0x96	; 150
    18b0:	bb 27       	eor	r27, r27
    18b2:	93 95       	inc	r25
    18b4:	f6 95       	lsr	r31
    18b6:	87 95       	ror	r24
    18b8:	77 95       	ror	r23
    18ba:	67 95       	ror	r22
    18bc:	b7 95       	ror	r27
    18be:	f1 11       	cpse	r31, r1
    18c0:	f8 cf       	rjmp	.-16     	; 0x18b2 <__floatsisf+0x1c>
    18c2:	fa f4       	brpl	.+62     	; 0x1902 <__floatsisf+0x6c>
    18c4:	bb 0f       	add	r27, r27
    18c6:	11 f4       	brne	.+4      	; 0x18cc <__floatsisf+0x36>
    18c8:	60 ff       	sbrs	r22, 0
    18ca:	1b c0       	rjmp	.+54     	; 0x1902 <__floatsisf+0x6c>
    18cc:	6f 5f       	subi	r22, 0xFF	; 255
    18ce:	7f 4f       	sbci	r23, 0xFF	; 255
    18d0:	8f 4f       	sbci	r24, 0xFF	; 255
    18d2:	9f 4f       	sbci	r25, 0xFF	; 255
    18d4:	16 c0       	rjmp	.+44     	; 0x1902 <__floatsisf+0x6c>
    18d6:	88 23       	and	r24, r24
    18d8:	11 f0       	breq	.+4      	; 0x18de <__floatsisf+0x48>
    18da:	96 e9       	ldi	r25, 0x96	; 150
    18dc:	11 c0       	rjmp	.+34     	; 0x1900 <__floatsisf+0x6a>
    18de:	77 23       	and	r23, r23
    18e0:	21 f0       	breq	.+8      	; 0x18ea <__floatsisf+0x54>
    18e2:	9e e8       	ldi	r25, 0x8E	; 142
    18e4:	87 2f       	mov	r24, r23
    18e6:	76 2f       	mov	r23, r22
    18e8:	05 c0       	rjmp	.+10     	; 0x18f4 <__floatsisf+0x5e>
    18ea:	66 23       	and	r22, r22
    18ec:	71 f0       	breq	.+28     	; 0x190a <__floatsisf+0x74>
    18ee:	96 e8       	ldi	r25, 0x86	; 134
    18f0:	86 2f       	mov	r24, r22
    18f2:	70 e0       	ldi	r23, 0x00	; 0
    18f4:	60 e0       	ldi	r22, 0x00	; 0
    18f6:	2a f0       	brmi	.+10     	; 0x1902 <__floatsisf+0x6c>
    18f8:	9a 95       	dec	r25
    18fa:	66 0f       	add	r22, r22
    18fc:	77 1f       	adc	r23, r23
    18fe:	88 1f       	adc	r24, r24
    1900:	da f7       	brpl	.-10     	; 0x18f8 <__floatsisf+0x62>
    1902:	88 0f       	add	r24, r24
    1904:	96 95       	lsr	r25
    1906:	87 95       	ror	r24
    1908:	97 f9       	bld	r25, 7
    190a:	08 95       	ret

0000190c <__fp_cmp>:
    190c:	99 0f       	add	r25, r25
    190e:	00 08       	sbc	r0, r0
    1910:	55 0f       	add	r21, r21
    1912:	aa 0b       	sbc	r26, r26
    1914:	e0 e8       	ldi	r30, 0x80	; 128
    1916:	fe ef       	ldi	r31, 0xFE	; 254
    1918:	16 16       	cp	r1, r22
    191a:	17 06       	cpc	r1, r23
    191c:	e8 07       	cpc	r30, r24
    191e:	f9 07       	cpc	r31, r25
    1920:	c0 f0       	brcs	.+48     	; 0x1952 <__fp_cmp+0x46>
    1922:	12 16       	cp	r1, r18
    1924:	13 06       	cpc	r1, r19
    1926:	e4 07       	cpc	r30, r20
    1928:	f5 07       	cpc	r31, r21
    192a:	98 f0       	brcs	.+38     	; 0x1952 <__fp_cmp+0x46>
    192c:	62 1b       	sub	r22, r18
    192e:	73 0b       	sbc	r23, r19
    1930:	84 0b       	sbc	r24, r20
    1932:	95 0b       	sbc	r25, r21
    1934:	39 f4       	brne	.+14     	; 0x1944 <__fp_cmp+0x38>
    1936:	0a 26       	eor	r0, r26
    1938:	61 f0       	breq	.+24     	; 0x1952 <__fp_cmp+0x46>
    193a:	23 2b       	or	r18, r19
    193c:	24 2b       	or	r18, r20
    193e:	25 2b       	or	r18, r21
    1940:	21 f4       	brne	.+8      	; 0x194a <__fp_cmp+0x3e>
    1942:	08 95       	ret
    1944:	0a 26       	eor	r0, r26
    1946:	09 f4       	brne	.+2      	; 0x194a <__fp_cmp+0x3e>
    1948:	a1 40       	sbci	r26, 0x01	; 1
    194a:	a6 95       	lsr	r26
    194c:	8f ef       	ldi	r24, 0xFF	; 255
    194e:	81 1d       	adc	r24, r1
    1950:	81 1d       	adc	r24, r1
    1952:	08 95       	ret

00001954 <__fp_inf>:
    1954:	97 f9       	bld	r25, 7
    1956:	9f 67       	ori	r25, 0x7F	; 127
    1958:	80 e8       	ldi	r24, 0x80	; 128
    195a:	70 e0       	ldi	r23, 0x00	; 0
    195c:	60 e0       	ldi	r22, 0x00	; 0
    195e:	08 95       	ret

00001960 <__fp_nan>:
    1960:	9f ef       	ldi	r25, 0xFF	; 255
    1962:	80 ec       	ldi	r24, 0xC0	; 192
    1964:	08 95       	ret

00001966 <__fp_pscA>:
    1966:	00 24       	eor	r0, r0
    1968:	0a 94       	dec	r0
    196a:	16 16       	cp	r1, r22
    196c:	17 06       	cpc	r1, r23
    196e:	18 06       	cpc	r1, r24
    1970:	09 06       	cpc	r0, r25
    1972:	08 95       	ret

00001974 <__fp_pscB>:
    1974:	00 24       	eor	r0, r0
    1976:	0a 94       	dec	r0
    1978:	12 16       	cp	r1, r18
    197a:	13 06       	cpc	r1, r19
    197c:	14 06       	cpc	r1, r20
    197e:	05 06       	cpc	r0, r21
    1980:	08 95       	ret

00001982 <__fp_round>:
    1982:	09 2e       	mov	r0, r25
    1984:	03 94       	inc	r0
    1986:	00 0c       	add	r0, r0
    1988:	11 f4       	brne	.+4      	; 0x198e <__fp_round+0xc>
    198a:	88 23       	and	r24, r24
    198c:	52 f0       	brmi	.+20     	; 0x19a2 <__fp_round+0x20>
    198e:	bb 0f       	add	r27, r27
    1990:	40 f4       	brcc	.+16     	; 0x19a2 <__fp_round+0x20>
    1992:	bf 2b       	or	r27, r31
    1994:	11 f4       	brne	.+4      	; 0x199a <__fp_round+0x18>
    1996:	60 ff       	sbrs	r22, 0
    1998:	04 c0       	rjmp	.+8      	; 0x19a2 <__fp_round+0x20>
    199a:	6f 5f       	subi	r22, 0xFF	; 255
    199c:	7f 4f       	sbci	r23, 0xFF	; 255
    199e:	8f 4f       	sbci	r24, 0xFF	; 255
    19a0:	9f 4f       	sbci	r25, 0xFF	; 255
    19a2:	08 95       	ret

000019a4 <__fp_split3>:
    19a4:	57 fd       	sbrc	r21, 7
    19a6:	90 58       	subi	r25, 0x80	; 128
    19a8:	44 0f       	add	r20, r20
    19aa:	55 1f       	adc	r21, r21
    19ac:	59 f0       	breq	.+22     	; 0x19c4 <__fp_splitA+0x10>
    19ae:	5f 3f       	cpi	r21, 0xFF	; 255
    19b0:	71 f0       	breq	.+28     	; 0x19ce <__fp_splitA+0x1a>
    19b2:	47 95       	ror	r20

000019b4 <__fp_splitA>:
    19b4:	88 0f       	add	r24, r24
    19b6:	97 fb       	bst	r25, 7
    19b8:	99 1f       	adc	r25, r25
    19ba:	61 f0       	breq	.+24     	; 0x19d4 <__fp_splitA+0x20>
    19bc:	9f 3f       	cpi	r25, 0xFF	; 255
    19be:	79 f0       	breq	.+30     	; 0x19de <__fp_splitA+0x2a>
    19c0:	87 95       	ror	r24
    19c2:	08 95       	ret
    19c4:	12 16       	cp	r1, r18
    19c6:	13 06       	cpc	r1, r19
    19c8:	14 06       	cpc	r1, r20
    19ca:	55 1f       	adc	r21, r21
    19cc:	f2 cf       	rjmp	.-28     	; 0x19b2 <__fp_split3+0xe>
    19ce:	46 95       	lsr	r20
    19d0:	f1 df       	rcall	.-30     	; 0x19b4 <__fp_splitA>
    19d2:	08 c0       	rjmp	.+16     	; 0x19e4 <__fp_splitA+0x30>
    19d4:	16 16       	cp	r1, r22
    19d6:	17 06       	cpc	r1, r23
    19d8:	18 06       	cpc	r1, r24
    19da:	99 1f       	adc	r25, r25
    19dc:	f1 cf       	rjmp	.-30     	; 0x19c0 <__fp_splitA+0xc>
    19de:	86 95       	lsr	r24
    19e0:	71 05       	cpc	r23, r1
    19e2:	61 05       	cpc	r22, r1
    19e4:	08 94       	sec
    19e6:	08 95       	ret

000019e8 <__fp_zero>:
    19e8:	e8 94       	clt

000019ea <__fp_szero>:
    19ea:	bb 27       	eor	r27, r27
    19ec:	66 27       	eor	r22, r22
    19ee:	77 27       	eor	r23, r23
    19f0:	cb 01       	movw	r24, r22
    19f2:	97 f9       	bld	r25, 7
    19f4:	08 95       	ret

000019f6 <__gesf2>:
    19f6:	0e 94 86 0c 	call	0x190c	; 0x190c <__fp_cmp>
    19fa:	08 f4       	brcc	.+2      	; 0x19fe <__gesf2+0x8>
    19fc:	8f ef       	ldi	r24, 0xFF	; 255
    19fe:	08 95       	ret

00001a00 <__mulsf3>:
    1a00:	0e 94 13 0d 	call	0x1a26	; 0x1a26 <__mulsf3x>
    1a04:	0c 94 c1 0c 	jmp	0x1982	; 0x1982 <__fp_round>
    1a08:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__fp_pscA>
    1a0c:	38 f0       	brcs	.+14     	; 0x1a1c <__mulsf3+0x1c>
    1a0e:	0e 94 ba 0c 	call	0x1974	; 0x1974 <__fp_pscB>
    1a12:	20 f0       	brcs	.+8      	; 0x1a1c <__mulsf3+0x1c>
    1a14:	95 23       	and	r25, r21
    1a16:	11 f0       	breq	.+4      	; 0x1a1c <__mulsf3+0x1c>
    1a18:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__fp_inf>
    1a1c:	0c 94 b0 0c 	jmp	0x1960	; 0x1960 <__fp_nan>
    1a20:	11 24       	eor	r1, r1
    1a22:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__fp_szero>

00001a26 <__mulsf3x>:
    1a26:	0e 94 d2 0c 	call	0x19a4	; 0x19a4 <__fp_split3>
    1a2a:	70 f3       	brcs	.-36     	; 0x1a08 <__mulsf3+0x8>

00001a2c <__mulsf3_pse>:
    1a2c:	95 9f       	mul	r25, r21
    1a2e:	c1 f3       	breq	.-16     	; 0x1a20 <__mulsf3+0x20>
    1a30:	95 0f       	add	r25, r21
    1a32:	50 e0       	ldi	r21, 0x00	; 0
    1a34:	55 1f       	adc	r21, r21
    1a36:	62 9f       	mul	r22, r18
    1a38:	f0 01       	movw	r30, r0
    1a3a:	72 9f       	mul	r23, r18
    1a3c:	bb 27       	eor	r27, r27
    1a3e:	f0 0d       	add	r31, r0
    1a40:	b1 1d       	adc	r27, r1
    1a42:	63 9f       	mul	r22, r19
    1a44:	aa 27       	eor	r26, r26
    1a46:	f0 0d       	add	r31, r0
    1a48:	b1 1d       	adc	r27, r1
    1a4a:	aa 1f       	adc	r26, r26
    1a4c:	64 9f       	mul	r22, r20
    1a4e:	66 27       	eor	r22, r22
    1a50:	b0 0d       	add	r27, r0
    1a52:	a1 1d       	adc	r26, r1
    1a54:	66 1f       	adc	r22, r22
    1a56:	82 9f       	mul	r24, r18
    1a58:	22 27       	eor	r18, r18
    1a5a:	b0 0d       	add	r27, r0
    1a5c:	a1 1d       	adc	r26, r1
    1a5e:	62 1f       	adc	r22, r18
    1a60:	73 9f       	mul	r23, r19
    1a62:	b0 0d       	add	r27, r0
    1a64:	a1 1d       	adc	r26, r1
    1a66:	62 1f       	adc	r22, r18
    1a68:	83 9f       	mul	r24, r19
    1a6a:	a0 0d       	add	r26, r0
    1a6c:	61 1d       	adc	r22, r1
    1a6e:	22 1f       	adc	r18, r18
    1a70:	74 9f       	mul	r23, r20
    1a72:	33 27       	eor	r19, r19
    1a74:	a0 0d       	add	r26, r0
    1a76:	61 1d       	adc	r22, r1
    1a78:	23 1f       	adc	r18, r19
    1a7a:	84 9f       	mul	r24, r20
    1a7c:	60 0d       	add	r22, r0
    1a7e:	21 1d       	adc	r18, r1
    1a80:	82 2f       	mov	r24, r18
    1a82:	76 2f       	mov	r23, r22
    1a84:	6a 2f       	mov	r22, r26
    1a86:	11 24       	eor	r1, r1
    1a88:	9f 57       	subi	r25, 0x7F	; 127
    1a8a:	50 40       	sbci	r21, 0x00	; 0
    1a8c:	9a f0       	brmi	.+38     	; 0x1ab4 <__mulsf3_pse+0x88>
    1a8e:	f1 f0       	breq	.+60     	; 0x1acc <__mulsf3_pse+0xa0>
    1a90:	88 23       	and	r24, r24
    1a92:	4a f0       	brmi	.+18     	; 0x1aa6 <__mulsf3_pse+0x7a>
    1a94:	ee 0f       	add	r30, r30
    1a96:	ff 1f       	adc	r31, r31
    1a98:	bb 1f       	adc	r27, r27
    1a9a:	66 1f       	adc	r22, r22
    1a9c:	77 1f       	adc	r23, r23
    1a9e:	88 1f       	adc	r24, r24
    1aa0:	91 50       	subi	r25, 0x01	; 1
    1aa2:	50 40       	sbci	r21, 0x00	; 0
    1aa4:	a9 f7       	brne	.-22     	; 0x1a90 <__mulsf3_pse+0x64>
    1aa6:	9e 3f       	cpi	r25, 0xFE	; 254
    1aa8:	51 05       	cpc	r21, r1
    1aaa:	80 f0       	brcs	.+32     	; 0x1acc <__mulsf3_pse+0xa0>
    1aac:	0c 94 aa 0c 	jmp	0x1954	; 0x1954 <__fp_inf>
    1ab0:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__fp_szero>
    1ab4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ab6:	e4 f3       	brlt	.-8      	; 0x1ab0 <__mulsf3_pse+0x84>
    1ab8:	98 3e       	cpi	r25, 0xE8	; 232
    1aba:	d4 f3       	brlt	.-12     	; 0x1ab0 <__mulsf3_pse+0x84>
    1abc:	86 95       	lsr	r24
    1abe:	77 95       	ror	r23
    1ac0:	67 95       	ror	r22
    1ac2:	b7 95       	ror	r27
    1ac4:	f7 95       	ror	r31
    1ac6:	e7 95       	ror	r30
    1ac8:	9f 5f       	subi	r25, 0xFF	; 255
    1aca:	c1 f7       	brne	.-16     	; 0x1abc <__mulsf3_pse+0x90>
    1acc:	fe 2b       	or	r31, r30
    1ace:	88 0f       	add	r24, r24
    1ad0:	91 1d       	adc	r25, r1
    1ad2:	96 95       	lsr	r25
    1ad4:	87 95       	ror	r24
    1ad6:	97 f9       	bld	r25, 7
    1ad8:	08 95       	ret

00001ada <vfprintf>:
    1ada:	a3 e1       	ldi	r26, 0x13	; 19
    1adc:	b0 e0       	ldi	r27, 0x00	; 0
    1ade:	e3 e7       	ldi	r30, 0x73	; 115
    1ae0:	fd e0       	ldi	r31, 0x0D	; 13
    1ae2:	0c 94 0b 11 	jmp	0x2216	; 0x2216 <__prologue_saves__>
    1ae6:	6c 01       	movw	r12, r24
    1ae8:	4b 01       	movw	r8, r22
    1aea:	2a 01       	movw	r4, r20
    1aec:	fc 01       	movw	r30, r24
    1aee:	17 82       	std	Z+7, r1	; 0x07
    1af0:	16 82       	std	Z+6, r1	; 0x06
    1af2:	83 81       	ldd	r24, Z+3	; 0x03
    1af4:	81 ff       	sbrs	r24, 1
    1af6:	43 c3       	rjmp	.+1670   	; 0x217e <vfprintf+0x6a4>
    1af8:	ae 01       	movw	r20, r28
    1afa:	4f 5f       	subi	r20, 0xFF	; 255
    1afc:	5f 4f       	sbci	r21, 0xFF	; 255
    1afe:	3a 01       	movw	r6, r20
    1b00:	f6 01       	movw	r30, r12
    1b02:	93 81       	ldd	r25, Z+3	; 0x03
    1b04:	f4 01       	movw	r30, r8
    1b06:	93 fd       	sbrc	r25, 3
    1b08:	85 91       	lpm	r24, Z+
    1b0a:	93 ff       	sbrs	r25, 3
    1b0c:	81 91       	ld	r24, Z+
    1b0e:	4f 01       	movw	r8, r30
    1b10:	88 23       	and	r24, r24
    1b12:	09 f4       	brne	.+2      	; 0x1b16 <vfprintf+0x3c>
    1b14:	30 c3       	rjmp	.+1632   	; 0x2176 <vfprintf+0x69c>
    1b16:	85 32       	cpi	r24, 0x25	; 37
    1b18:	39 f4       	brne	.+14     	; 0x1b28 <vfprintf+0x4e>
    1b1a:	93 fd       	sbrc	r25, 3
    1b1c:	85 91       	lpm	r24, Z+
    1b1e:	93 ff       	sbrs	r25, 3
    1b20:	81 91       	ld	r24, Z+
    1b22:	4f 01       	movw	r8, r30
    1b24:	85 32       	cpi	r24, 0x25	; 37
    1b26:	39 f4       	brne	.+14     	; 0x1b36 <vfprintf+0x5c>
    1b28:	b6 01       	movw	r22, r12
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	0e 94 30 12 	call	0x2460	; 0x2460 <fputc>
    1b30:	52 01       	movw	r10, r4
    1b32:	25 01       	movw	r4, r10
    1b34:	e5 cf       	rjmp	.-54     	; 0x1b00 <vfprintf+0x26>
    1b36:	10 e0       	ldi	r17, 0x00	; 0
    1b38:	f1 2c       	mov	r15, r1
    1b3a:	20 e0       	ldi	r18, 0x00	; 0
    1b3c:	20 32       	cpi	r18, 0x20	; 32
    1b3e:	a0 f4       	brcc	.+40     	; 0x1b68 <vfprintf+0x8e>
    1b40:	8b 32       	cpi	r24, 0x2B	; 43
    1b42:	69 f0       	breq	.+26     	; 0x1b5e <vfprintf+0x84>
    1b44:	30 f4       	brcc	.+12     	; 0x1b52 <vfprintf+0x78>
    1b46:	80 32       	cpi	r24, 0x20	; 32
    1b48:	59 f0       	breq	.+22     	; 0x1b60 <vfprintf+0x86>
    1b4a:	83 32       	cpi	r24, 0x23	; 35
    1b4c:	69 f4       	brne	.+26     	; 0x1b68 <vfprintf+0x8e>
    1b4e:	20 61       	ori	r18, 0x10	; 16
    1b50:	2c c0       	rjmp	.+88     	; 0x1baa <vfprintf+0xd0>
    1b52:	8d 32       	cpi	r24, 0x2D	; 45
    1b54:	39 f0       	breq	.+14     	; 0x1b64 <vfprintf+0x8a>
    1b56:	80 33       	cpi	r24, 0x30	; 48
    1b58:	39 f4       	brne	.+14     	; 0x1b68 <vfprintf+0x8e>
    1b5a:	21 60       	ori	r18, 0x01	; 1
    1b5c:	26 c0       	rjmp	.+76     	; 0x1baa <vfprintf+0xd0>
    1b5e:	22 60       	ori	r18, 0x02	; 2
    1b60:	24 60       	ori	r18, 0x04	; 4
    1b62:	23 c0       	rjmp	.+70     	; 0x1baa <vfprintf+0xd0>
    1b64:	28 60       	ori	r18, 0x08	; 8
    1b66:	21 c0       	rjmp	.+66     	; 0x1baa <vfprintf+0xd0>
    1b68:	27 fd       	sbrc	r18, 7
    1b6a:	27 c0       	rjmp	.+78     	; 0x1bba <vfprintf+0xe0>
    1b6c:	30 ed       	ldi	r19, 0xD0	; 208
    1b6e:	38 0f       	add	r19, r24
    1b70:	3a 30       	cpi	r19, 0x0A	; 10
    1b72:	78 f4       	brcc	.+30     	; 0x1b92 <vfprintf+0xb8>
    1b74:	26 ff       	sbrs	r18, 6
    1b76:	06 c0       	rjmp	.+12     	; 0x1b84 <vfprintf+0xaa>
    1b78:	fa e0       	ldi	r31, 0x0A	; 10
    1b7a:	1f 9f       	mul	r17, r31
    1b7c:	30 0d       	add	r19, r0
    1b7e:	11 24       	eor	r1, r1
    1b80:	13 2f       	mov	r17, r19
    1b82:	13 c0       	rjmp	.+38     	; 0x1baa <vfprintf+0xd0>
    1b84:	4a e0       	ldi	r20, 0x0A	; 10
    1b86:	f4 9e       	mul	r15, r20
    1b88:	30 0d       	add	r19, r0
    1b8a:	11 24       	eor	r1, r1
    1b8c:	f3 2e       	mov	r15, r19
    1b8e:	20 62       	ori	r18, 0x20	; 32
    1b90:	0c c0       	rjmp	.+24     	; 0x1baa <vfprintf+0xd0>
    1b92:	8e 32       	cpi	r24, 0x2E	; 46
    1b94:	21 f4       	brne	.+8      	; 0x1b9e <vfprintf+0xc4>
    1b96:	26 fd       	sbrc	r18, 6
    1b98:	ee c2       	rjmp	.+1500   	; 0x2176 <vfprintf+0x69c>
    1b9a:	20 64       	ori	r18, 0x40	; 64
    1b9c:	06 c0       	rjmp	.+12     	; 0x1baa <vfprintf+0xd0>
    1b9e:	8c 36       	cpi	r24, 0x6C	; 108
    1ba0:	11 f4       	brne	.+4      	; 0x1ba6 <vfprintf+0xcc>
    1ba2:	20 68       	ori	r18, 0x80	; 128
    1ba4:	02 c0       	rjmp	.+4      	; 0x1baa <vfprintf+0xd0>
    1ba6:	88 36       	cpi	r24, 0x68	; 104
    1ba8:	41 f4       	brne	.+16     	; 0x1bba <vfprintf+0xe0>
    1baa:	f4 01       	movw	r30, r8
    1bac:	93 fd       	sbrc	r25, 3
    1bae:	85 91       	lpm	r24, Z+
    1bb0:	93 ff       	sbrs	r25, 3
    1bb2:	81 91       	ld	r24, Z+
    1bb4:	4f 01       	movw	r8, r30
    1bb6:	81 11       	cpse	r24, r1
    1bb8:	c1 cf       	rjmp	.-126    	; 0x1b3c <vfprintf+0x62>
    1bba:	9b eb       	ldi	r25, 0xBB	; 187
    1bbc:	98 0f       	add	r25, r24
    1bbe:	93 30       	cpi	r25, 0x03	; 3
    1bc0:	18 f4       	brcc	.+6      	; 0x1bc8 <vfprintf+0xee>
    1bc2:	20 61       	ori	r18, 0x10	; 16
    1bc4:	80 5e       	subi	r24, 0xE0	; 224
    1bc6:	06 c0       	rjmp	.+12     	; 0x1bd4 <vfprintf+0xfa>
    1bc8:	9b e9       	ldi	r25, 0x9B	; 155
    1bca:	98 0f       	add	r25, r24
    1bcc:	93 30       	cpi	r25, 0x03	; 3
    1bce:	08 f0       	brcs	.+2      	; 0x1bd2 <vfprintf+0xf8>
    1bd0:	71 c1       	rjmp	.+738    	; 0x1eb4 <vfprintf+0x3da>
    1bd2:	2f 7e       	andi	r18, 0xEF	; 239
    1bd4:	26 ff       	sbrs	r18, 6
    1bd6:	16 e0       	ldi	r17, 0x06	; 6
    1bd8:	2f 73       	andi	r18, 0x3F	; 63
    1bda:	32 2e       	mov	r3, r18
    1bdc:	85 36       	cpi	r24, 0x65	; 101
    1bde:	19 f4       	brne	.+6      	; 0x1be6 <vfprintf+0x10c>
    1be0:	20 64       	ori	r18, 0x40	; 64
    1be2:	32 2e       	mov	r3, r18
    1be4:	08 c0       	rjmp	.+16     	; 0x1bf6 <vfprintf+0x11c>
    1be6:	86 36       	cpi	r24, 0x66	; 102
    1be8:	21 f4       	brne	.+8      	; 0x1bf2 <vfprintf+0x118>
    1bea:	f2 2f       	mov	r31, r18
    1bec:	f0 68       	ori	r31, 0x80	; 128
    1bee:	3f 2e       	mov	r3, r31
    1bf0:	02 c0       	rjmp	.+4      	; 0x1bf6 <vfprintf+0x11c>
    1bf2:	11 11       	cpse	r17, r1
    1bf4:	11 50       	subi	r17, 0x01	; 1
    1bf6:	37 fe       	sbrs	r3, 7
    1bf8:	07 c0       	rjmp	.+14     	; 0x1c08 <vfprintf+0x12e>
    1bfa:	1c 33       	cpi	r17, 0x3C	; 60
    1bfc:	50 f4       	brcc	.+20     	; 0x1c12 <vfprintf+0x138>
    1bfe:	ee 24       	eor	r14, r14
    1c00:	e3 94       	inc	r14
    1c02:	e1 0e       	add	r14, r17
    1c04:	27 e0       	ldi	r18, 0x07	; 7
    1c06:	0b c0       	rjmp	.+22     	; 0x1c1e <vfprintf+0x144>
    1c08:	18 30       	cpi	r17, 0x08	; 8
    1c0a:	38 f0       	brcs	.+14     	; 0x1c1a <vfprintf+0x140>
    1c0c:	27 e0       	ldi	r18, 0x07	; 7
    1c0e:	17 e0       	ldi	r17, 0x07	; 7
    1c10:	05 c0       	rjmp	.+10     	; 0x1c1c <vfprintf+0x142>
    1c12:	27 e0       	ldi	r18, 0x07	; 7
    1c14:	4c e3       	ldi	r20, 0x3C	; 60
    1c16:	e4 2e       	mov	r14, r20
    1c18:	02 c0       	rjmp	.+4      	; 0x1c1e <vfprintf+0x144>
    1c1a:	21 2f       	mov	r18, r17
    1c1c:	e1 2c       	mov	r14, r1
    1c1e:	52 01       	movw	r10, r4
    1c20:	44 e0       	ldi	r20, 0x04	; 4
    1c22:	a4 0e       	add	r10, r20
    1c24:	b1 1c       	adc	r11, r1
    1c26:	f2 01       	movw	r30, r4
    1c28:	60 81       	ld	r22, Z
    1c2a:	71 81       	ldd	r23, Z+1	; 0x01
    1c2c:	82 81       	ldd	r24, Z+2	; 0x02
    1c2e:	93 81       	ldd	r25, Z+3	; 0x03
    1c30:	0e 2d       	mov	r16, r14
    1c32:	a3 01       	movw	r20, r6
    1c34:	0e 94 42 11 	call	0x2284	; 0x2284 <__ftoa_engine>
    1c38:	2c 01       	movw	r4, r24
    1c3a:	09 81       	ldd	r16, Y+1	; 0x01
    1c3c:	00 ff       	sbrs	r16, 0
    1c3e:	02 c0       	rjmp	.+4      	; 0x1c44 <vfprintf+0x16a>
    1c40:	03 ff       	sbrs	r16, 3
    1c42:	07 c0       	rjmp	.+14     	; 0x1c52 <vfprintf+0x178>
    1c44:	31 fc       	sbrc	r3, 1
    1c46:	08 c0       	rjmp	.+16     	; 0x1c58 <vfprintf+0x17e>
    1c48:	32 fe       	sbrs	r3, 2
    1c4a:	09 c0       	rjmp	.+18     	; 0x1c5e <vfprintf+0x184>
    1c4c:	30 e2       	ldi	r19, 0x20	; 32
    1c4e:	23 2e       	mov	r2, r19
    1c50:	07 c0       	rjmp	.+14     	; 0x1c60 <vfprintf+0x186>
    1c52:	2d e2       	ldi	r18, 0x2D	; 45
    1c54:	22 2e       	mov	r2, r18
    1c56:	04 c0       	rjmp	.+8      	; 0x1c60 <vfprintf+0x186>
    1c58:	9b e2       	ldi	r25, 0x2B	; 43
    1c5a:	29 2e       	mov	r2, r25
    1c5c:	01 c0       	rjmp	.+2      	; 0x1c60 <vfprintf+0x186>
    1c5e:	21 2c       	mov	r2, r1
    1c60:	80 2f       	mov	r24, r16
    1c62:	8c 70       	andi	r24, 0x0C	; 12
    1c64:	19 f0       	breq	.+6      	; 0x1c6c <vfprintf+0x192>
    1c66:	21 10       	cpse	r2, r1
    1c68:	68 c2       	rjmp	.+1232   	; 0x213a <vfprintf+0x660>
    1c6a:	a8 c2       	rjmp	.+1360   	; 0x21bc <vfprintf+0x6e2>
    1c6c:	37 fe       	sbrs	r3, 7
    1c6e:	0f c0       	rjmp	.+30     	; 0x1c8e <vfprintf+0x1b4>
    1c70:	e4 0c       	add	r14, r4
    1c72:	04 ff       	sbrs	r16, 4
    1c74:	04 c0       	rjmp	.+8      	; 0x1c7e <vfprintf+0x1a4>
    1c76:	8a 81       	ldd	r24, Y+2	; 0x02
    1c78:	81 33       	cpi	r24, 0x31	; 49
    1c7a:	09 f4       	brne	.+2      	; 0x1c7e <vfprintf+0x1a4>
    1c7c:	ea 94       	dec	r14
    1c7e:	1e 14       	cp	r1, r14
    1c80:	74 f5       	brge	.+92     	; 0x1cde <vfprintf+0x204>
    1c82:	f8 e0       	ldi	r31, 0x08	; 8
    1c84:	fe 15       	cp	r31, r14
    1c86:	78 f5       	brcc	.+94     	; 0x1ce6 <vfprintf+0x20c>
    1c88:	88 e0       	ldi	r24, 0x08	; 8
    1c8a:	e8 2e       	mov	r14, r24
    1c8c:	2c c0       	rjmp	.+88     	; 0x1ce6 <vfprintf+0x20c>
    1c8e:	36 fc       	sbrc	r3, 6
    1c90:	2a c0       	rjmp	.+84     	; 0x1ce6 <vfprintf+0x20c>
    1c92:	81 2f       	mov	r24, r17
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	84 15       	cp	r24, r4
    1c98:	95 05       	cpc	r25, r5
    1c9a:	9c f0       	brlt	.+38     	; 0x1cc2 <vfprintf+0x1e8>
    1c9c:	2c ef       	ldi	r18, 0xFC	; 252
    1c9e:	42 16       	cp	r4, r18
    1ca0:	2f ef       	ldi	r18, 0xFF	; 255
    1ca2:	52 06       	cpc	r5, r18
    1ca4:	74 f0       	brlt	.+28     	; 0x1cc2 <vfprintf+0x1e8>
    1ca6:	43 2d       	mov	r20, r3
    1ca8:	40 68       	ori	r20, 0x80	; 128
    1caa:	34 2e       	mov	r3, r20
    1cac:	0a c0       	rjmp	.+20     	; 0x1cc2 <vfprintf+0x1e8>
    1cae:	e2 e0       	ldi	r30, 0x02	; 2
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	ec 0f       	add	r30, r28
    1cb4:	fd 1f       	adc	r31, r29
    1cb6:	e1 0f       	add	r30, r17
    1cb8:	f1 1d       	adc	r31, r1
    1cba:	80 81       	ld	r24, Z
    1cbc:	80 33       	cpi	r24, 0x30	; 48
    1cbe:	19 f4       	brne	.+6      	; 0x1cc6 <vfprintf+0x1ec>
    1cc0:	11 50       	subi	r17, 0x01	; 1
    1cc2:	11 11       	cpse	r17, r1
    1cc4:	f4 cf       	rjmp	.-24     	; 0x1cae <vfprintf+0x1d4>
    1cc6:	37 fe       	sbrs	r3, 7
    1cc8:	0e c0       	rjmp	.+28     	; 0x1ce6 <vfprintf+0x20c>
    1cca:	ee 24       	eor	r14, r14
    1ccc:	e3 94       	inc	r14
    1cce:	e1 0e       	add	r14, r17
    1cd0:	81 2f       	mov	r24, r17
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	48 16       	cp	r4, r24
    1cd6:	59 06       	cpc	r5, r25
    1cd8:	2c f4       	brge	.+10     	; 0x1ce4 <vfprintf+0x20a>
    1cda:	14 19       	sub	r17, r4
    1cdc:	04 c0       	rjmp	.+8      	; 0x1ce6 <vfprintf+0x20c>
    1cde:	ee 24       	eor	r14, r14
    1ce0:	e3 94       	inc	r14
    1ce2:	01 c0       	rjmp	.+2      	; 0x1ce6 <vfprintf+0x20c>
    1ce4:	10 e0       	ldi	r17, 0x00	; 0
    1ce6:	37 fe       	sbrs	r3, 7
    1ce8:	06 c0       	rjmp	.+12     	; 0x1cf6 <vfprintf+0x21c>
    1cea:	14 14       	cp	r1, r4
    1cec:	15 04       	cpc	r1, r5
    1cee:	34 f4       	brge	.+12     	; 0x1cfc <vfprintf+0x222>
    1cf0:	c2 01       	movw	r24, r4
    1cf2:	01 96       	adiw	r24, 0x01	; 1
    1cf4:	05 c0       	rjmp	.+10     	; 0x1d00 <vfprintf+0x226>
    1cf6:	85 e0       	ldi	r24, 0x05	; 5
    1cf8:	90 e0       	ldi	r25, 0x00	; 0
    1cfa:	02 c0       	rjmp	.+4      	; 0x1d00 <vfprintf+0x226>
    1cfc:	81 e0       	ldi	r24, 0x01	; 1
    1cfe:	90 e0       	ldi	r25, 0x00	; 0
    1d00:	21 10       	cpse	r2, r1
    1d02:	01 96       	adiw	r24, 0x01	; 1
    1d04:	11 23       	and	r17, r17
    1d06:	31 f0       	breq	.+12     	; 0x1d14 <vfprintf+0x23a>
    1d08:	21 2f       	mov	r18, r17
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	2f 5f       	subi	r18, 0xFF	; 255
    1d0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1d10:	82 0f       	add	r24, r18
    1d12:	93 1f       	adc	r25, r19
    1d14:	2f 2d       	mov	r18, r15
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	82 17       	cp	r24, r18
    1d1a:	93 07       	cpc	r25, r19
    1d1c:	14 f4       	brge	.+4      	; 0x1d22 <vfprintf+0x248>
    1d1e:	f8 1a       	sub	r15, r24
    1d20:	01 c0       	rjmp	.+2      	; 0x1d24 <vfprintf+0x24a>
    1d22:	f1 2c       	mov	r15, r1
    1d24:	83 2d       	mov	r24, r3
    1d26:	89 70       	andi	r24, 0x09	; 9
    1d28:	49 f4       	brne	.+18     	; 0x1d3c <vfprintf+0x262>
    1d2a:	ff 20       	and	r15, r15
    1d2c:	39 f0       	breq	.+14     	; 0x1d3c <vfprintf+0x262>
    1d2e:	b6 01       	movw	r22, r12
    1d30:	80 e2       	ldi	r24, 0x20	; 32
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	0e 94 30 12 	call	0x2460	; 0x2460 <fputc>
    1d38:	fa 94       	dec	r15
    1d3a:	f7 cf       	rjmp	.-18     	; 0x1d2a <vfprintf+0x250>
    1d3c:	22 20       	and	r2, r2
    1d3e:	29 f0       	breq	.+10     	; 0x1d4a <vfprintf+0x270>
    1d40:	b6 01       	movw	r22, r12
    1d42:	82 2d       	mov	r24, r2
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	0e 94 30 12 	call	0x2460	; 0x2460 <fputc>
    1d4a:	33 fc       	sbrc	r3, 3
    1d4c:	09 c0       	rjmp	.+18     	; 0x1d60 <vfprintf+0x286>
    1d4e:	ff 20       	and	r15, r15
    1d50:	39 f0       	breq	.+14     	; 0x1d60 <vfprintf+0x286>
    1d52:	b6 01       	movw	r22, r12
    1d54:	80 e3       	ldi	r24, 0x30	; 48
    1d56:	90 e0       	ldi	r25, 0x00	; 0
    1d58:	0e 94 30 12 	call	0x2460	; 0x2460 <fputc>
    1d5c:	fa 94       	dec	r15
    1d5e:	f7 cf       	rjmp	.-18     	; 0x1d4e <vfprintf+0x274>
    1d60:	37 fe       	sbrs	r3, 7
    1d62:	5a c0       	rjmp	.+180    	; 0x1e18 <vfprintf+0x33e>
    1d64:	94 2d       	mov	r25, r4
    1d66:	85 2d       	mov	r24, r5
    1d68:	57 fe       	sbrs	r5, 7
    1d6a:	02 c0       	rjmp	.+4      	; 0x1d70 <vfprintf+0x296>
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	29 2e       	mov	r2, r25
    1d72:	38 2e       	mov	r3, r24
    1d74:	20 e0       	ldi	r18, 0x00	; 0
    1d76:	30 e0       	ldi	r19, 0x00	; 0
    1d78:	a2 01       	movw	r20, r4
    1d7a:	4e 19       	sub	r20, r14
    1d7c:	51 09       	sbc	r21, r1
    1d7e:	5d 87       	std	Y+13, r21	; 0x0d
    1d80:	4c 87       	std	Y+12, r20	; 0x0c
    1d82:	a2 01       	movw	r20, r4
    1d84:	42 19       	sub	r20, r2
    1d86:	53 09       	sbc	r21, r3
    1d88:	5f 87       	std	Y+15, r21	; 0x0f
    1d8a:	4e 87       	std	Y+14, r20	; 0x0e
    1d8c:	61 2f       	mov	r22, r17
    1d8e:	70 e0       	ldi	r23, 0x00	; 0
    1d90:	44 27       	eor	r20, r20
    1d92:	55 27       	eor	r21, r21
    1d94:	46 1b       	sub	r20, r22
    1d96:	57 0b       	sbc	r21, r23
    1d98:	59 8b       	std	Y+17, r21	; 0x11
    1d9a:	48 8b       	std	Y+16, r20	; 0x10
    1d9c:	5f ef       	ldi	r21, 0xFF	; 255
    1d9e:	25 16       	cp	r2, r21
    1da0:	35 06       	cpc	r3, r21
    1da2:	49 f4       	brne	.+18     	; 0x1db6 <vfprintf+0x2dc>
    1da4:	b6 01       	movw	r22, r12
    1da6:	8e e2       	ldi	r24, 0x2E	; 46
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	2a 8b       	std	Y+18, r18	; 0x12
    1dac:	3b 8b       	std	Y+19, r19	; 0x13
    1dae:	0e 94 30 12 	call	0x2460	; 0x2460 <fputc>
    1db2:	3b 89       	ldd	r19, Y+19	; 0x13
    1db4:	2a 89       	ldd	r18, Y+18	; 0x12
    1db6:	42 14       	cp	r4, r2
    1db8:	53 04       	cpc	r5, r3
    1dba:	6c f0       	brlt	.+26     	; 0x1dd6 <vfprintf+0x2fc>
    1dbc:	4c 85       	ldd	r20, Y+12	; 0x0c
    1dbe:	5d 85       	ldd	r21, Y+13	; 0x0d
    1dc0:	42 15       	cp	r20, r2
    1dc2:	53 05       	cpc	r21, r3
    1dc4:	44 f4       	brge	.+16     	; 0x1dd6 <vfprintf+0x2fc>
    1dc6:	ee 85       	ldd	r30, Y+14	; 0x0e
    1dc8:	ff 85       	ldd	r31, Y+15	; 0x0f
    1dca:	e2 0f       	add	r30, r18
    1dcc:	f3 1f       	adc	r31, r19
    1dce:	e6 0d       	add	r30, r6
    1dd0:	f7 1d       	adc	r31, r7
    1dd2:	81 81       	ldd	r24, Z+1	; 0x01
    1dd4:	01 c0       	rjmp	.+2      	; 0x1dd8 <vfprintf+0x2fe>
    1dd6:	80 e3       	ldi	r24, 0x30	; 48
    1dd8:	51 e0       	ldi	r21, 0x01	; 1
    1dda:	25 1a       	sub	r2, r21
    1ddc:	31 08       	sbc	r3, r1
    1dde:	2f 5f       	subi	r18, 0xFF	; 255
    1de0:	3f 4f       	sbci	r19, 0xFF	; 255
    1de2:	48 89       	ldd	r20, Y+16	; 0x10
    1de4:	59 89       	ldd	r21, Y+17	; 0x11
    1de6:	24 16       	cp	r2, r20
    1de8:	35 06       	cpc	r3, r21
    1dea:	4c f0       	brlt	.+18     	; 0x1dfe <vfprintf+0x324>
    1dec:	b6 01       	movw	r22, r12
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	2a 8b       	std	Y+18, r18	; 0x12
    1df2:	3b 8b       	std	Y+19, r19	; 0x13
    1df4:	0e 94 30 12 	call	0x2460	; 0x2460 <fputc>
    1df8:	2a 89       	ldd	r18, Y+18	; 0x12
    1dfa:	3b 89       	ldd	r19, Y+19	; 0x13
    1dfc:	cf cf       	rjmp	.-98     	; 0x1d9c <vfprintf+0x2c2>
    1dfe:	24 14       	cp	r2, r4
    1e00:	35 04       	cpc	r3, r5
    1e02:	39 f4       	brne	.+14     	; 0x1e12 <vfprintf+0x338>
    1e04:	9a 81       	ldd	r25, Y+2	; 0x02
    1e06:	96 33       	cpi	r25, 0x36	; 54
    1e08:	18 f4       	brcc	.+6      	; 0x1e10 <vfprintf+0x336>
    1e0a:	95 33       	cpi	r25, 0x35	; 53
    1e0c:	11 f4       	brne	.+4      	; 0x1e12 <vfprintf+0x338>
    1e0e:	04 ff       	sbrs	r16, 4
    1e10:	81 e3       	ldi	r24, 0x31	; 49
    1e12:	b6 01       	movw	r22, r12
    1e14:	90 e0       	ldi	r25, 0x00	; 0
    1e16:	4b c0       	rjmp	.+150    	; 0x1eae <vfprintf+0x3d4>
    1e18:	8a 81       	ldd	r24, Y+2	; 0x02
    1e1a:	81 33       	cpi	r24, 0x31	; 49
    1e1c:	09 f0       	breq	.+2      	; 0x1e20 <vfprintf+0x346>
    1e1e:	0f 7e       	andi	r16, 0xEF	; 239
    1e20:	b6 01       	movw	r22, r12
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	0e 94 30 12 	call	0x2460	; 0x2460 <fputc>
    1e28:	11 11       	cpse	r17, r1
    1e2a:	05 c0       	rjmp	.+10     	; 0x1e36 <vfprintf+0x35c>
    1e2c:	34 fc       	sbrc	r3, 4
    1e2e:	18 c0       	rjmp	.+48     	; 0x1e60 <vfprintf+0x386>
    1e30:	85 e6       	ldi	r24, 0x65	; 101
    1e32:	90 e0       	ldi	r25, 0x00	; 0
    1e34:	17 c0       	rjmp	.+46     	; 0x1e64 <vfprintf+0x38a>
    1e36:	b6 01       	movw	r22, r12
    1e38:	8e e2       	ldi	r24, 0x2E	; 46
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	0e 94 30 12 	call	0x2460	; 0x2460 <fputc>
    1e40:	82 e0       	ldi	r24, 0x02	; 2
    1e42:	ee 24       	eor	r14, r14
    1e44:	e3 94       	inc	r14
    1e46:	e8 0e       	add	r14, r24
    1e48:	f3 01       	movw	r30, r6
    1e4a:	e8 0f       	add	r30, r24
    1e4c:	f1 1d       	adc	r31, r1
    1e4e:	80 81       	ld	r24, Z
    1e50:	b6 01       	movw	r22, r12
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	0e 94 30 12 	call	0x2460	; 0x2460 <fputc>
    1e58:	11 50       	subi	r17, 0x01	; 1
    1e5a:	8e 2d       	mov	r24, r14
    1e5c:	91 f7       	brne	.-28     	; 0x1e42 <vfprintf+0x368>
    1e5e:	e6 cf       	rjmp	.-52     	; 0x1e2c <vfprintf+0x352>
    1e60:	85 e4       	ldi	r24, 0x45	; 69
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	b6 01       	movw	r22, r12
    1e66:	0e 94 30 12 	call	0x2460	; 0x2460 <fputc>
    1e6a:	57 fc       	sbrc	r5, 7
    1e6c:	05 c0       	rjmp	.+10     	; 0x1e78 <vfprintf+0x39e>
    1e6e:	41 14       	cp	r4, r1
    1e70:	51 04       	cpc	r5, r1
    1e72:	39 f4       	brne	.+14     	; 0x1e82 <vfprintf+0x3a8>
    1e74:	04 ff       	sbrs	r16, 4
    1e76:	05 c0       	rjmp	.+10     	; 0x1e82 <vfprintf+0x3a8>
    1e78:	51 94       	neg	r5
    1e7a:	41 94       	neg	r4
    1e7c:	51 08       	sbc	r5, r1
    1e7e:	8d e2       	ldi	r24, 0x2D	; 45
    1e80:	01 c0       	rjmp	.+2      	; 0x1e84 <vfprintf+0x3aa>
    1e82:	8b e2       	ldi	r24, 0x2B	; 43
    1e84:	b6 01       	movw	r22, r12
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	0e 94 30 12 	call	0x2460	; 0x2460 <fputc>
    1e8c:	80 e3       	ldi	r24, 0x30	; 48
    1e8e:	9a e0       	ldi	r25, 0x0A	; 10
    1e90:	49 16       	cp	r4, r25
    1e92:	51 04       	cpc	r5, r1
    1e94:	2c f0       	brlt	.+10     	; 0x1ea0 <vfprintf+0x3c6>
    1e96:	8f 5f       	subi	r24, 0xFF	; 255
    1e98:	5a e0       	ldi	r21, 0x0A	; 10
    1e9a:	45 1a       	sub	r4, r21
    1e9c:	51 08       	sbc	r5, r1
    1e9e:	f7 cf       	rjmp	.-18     	; 0x1e8e <vfprintf+0x3b4>
    1ea0:	b6 01       	movw	r22, r12
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	0e 94 30 12 	call	0x2460	; 0x2460 <fputc>
    1ea8:	b6 01       	movw	r22, r12
    1eaa:	c2 01       	movw	r24, r4
    1eac:	c0 96       	adiw	r24, 0x30	; 48
    1eae:	0e 94 30 12 	call	0x2460	; 0x2460 <fputc>
    1eb2:	57 c1       	rjmp	.+686    	; 0x2162 <vfprintf+0x688>
    1eb4:	83 36       	cpi	r24, 0x63	; 99
    1eb6:	31 f0       	breq	.+12     	; 0x1ec4 <vfprintf+0x3ea>
    1eb8:	83 37       	cpi	r24, 0x73	; 115
    1eba:	79 f0       	breq	.+30     	; 0x1eda <vfprintf+0x400>
    1ebc:	83 35       	cpi	r24, 0x53	; 83
    1ebe:	09 f0       	breq	.+2      	; 0x1ec2 <vfprintf+0x3e8>
    1ec0:	58 c0       	rjmp	.+176    	; 0x1f72 <vfprintf+0x498>
    1ec2:	21 c0       	rjmp	.+66     	; 0x1f06 <vfprintf+0x42c>
    1ec4:	52 01       	movw	r10, r4
    1ec6:	e2 e0       	ldi	r30, 0x02	; 2
    1ec8:	ae 0e       	add	r10, r30
    1eca:	b1 1c       	adc	r11, r1
    1ecc:	f2 01       	movw	r30, r4
    1ece:	80 81       	ld	r24, Z
    1ed0:	89 83       	std	Y+1, r24	; 0x01
    1ed2:	01 e0       	ldi	r16, 0x01	; 1
    1ed4:	10 e0       	ldi	r17, 0x00	; 0
    1ed6:	23 01       	movw	r4, r6
    1ed8:	14 c0       	rjmp	.+40     	; 0x1f02 <vfprintf+0x428>
    1eda:	52 01       	movw	r10, r4
    1edc:	f2 e0       	ldi	r31, 0x02	; 2
    1ede:	af 0e       	add	r10, r31
    1ee0:	b1 1c       	adc	r11, r1
    1ee2:	f2 01       	movw	r30, r4
    1ee4:	40 80       	ld	r4, Z
    1ee6:	51 80       	ldd	r5, Z+1	; 0x01
    1ee8:	26 ff       	sbrs	r18, 6
    1eea:	03 c0       	rjmp	.+6      	; 0x1ef2 <vfprintf+0x418>
    1eec:	61 2f       	mov	r22, r17
    1eee:	70 e0       	ldi	r23, 0x00	; 0
    1ef0:	02 c0       	rjmp	.+4      	; 0x1ef6 <vfprintf+0x41c>
    1ef2:	6f ef       	ldi	r22, 0xFF	; 255
    1ef4:	7f ef       	ldi	r23, 0xFF	; 255
    1ef6:	c2 01       	movw	r24, r4
    1ef8:	2a 8b       	std	Y+18, r18	; 0x12
    1efa:	0e 94 25 12 	call	0x244a	; 0x244a <strnlen>
    1efe:	8c 01       	movw	r16, r24
    1f00:	2a 89       	ldd	r18, Y+18	; 0x12
    1f02:	2f 77       	andi	r18, 0x7F	; 127
    1f04:	15 c0       	rjmp	.+42     	; 0x1f30 <vfprintf+0x456>
    1f06:	52 01       	movw	r10, r4
    1f08:	f2 e0       	ldi	r31, 0x02	; 2
    1f0a:	af 0e       	add	r10, r31
    1f0c:	b1 1c       	adc	r11, r1
    1f0e:	f2 01       	movw	r30, r4
    1f10:	40 80       	ld	r4, Z
    1f12:	51 80       	ldd	r5, Z+1	; 0x01
    1f14:	26 ff       	sbrs	r18, 6
    1f16:	03 c0       	rjmp	.+6      	; 0x1f1e <vfprintf+0x444>
    1f18:	61 2f       	mov	r22, r17
    1f1a:	70 e0       	ldi	r23, 0x00	; 0
    1f1c:	02 c0       	rjmp	.+4      	; 0x1f22 <vfprintf+0x448>
    1f1e:	6f ef       	ldi	r22, 0xFF	; 255
    1f20:	7f ef       	ldi	r23, 0xFF	; 255
    1f22:	c2 01       	movw	r24, r4
    1f24:	2a 8b       	std	Y+18, r18	; 0x12
    1f26:	0e 94 1a 12 	call	0x2434	; 0x2434 <strnlen_P>
    1f2a:	8c 01       	movw	r16, r24
    1f2c:	2a 89       	ldd	r18, Y+18	; 0x12
    1f2e:	20 68       	ori	r18, 0x80	; 128
    1f30:	32 2e       	mov	r3, r18
    1f32:	23 fd       	sbrc	r18, 3
    1f34:	1a c0       	rjmp	.+52     	; 0x1f6a <vfprintf+0x490>
    1f36:	8f 2d       	mov	r24, r15
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	08 17       	cp	r16, r24
    1f3c:	19 07       	cpc	r17, r25
    1f3e:	a8 f4       	brcc	.+42     	; 0x1f6a <vfprintf+0x490>
    1f40:	b6 01       	movw	r22, r12
    1f42:	80 e2       	ldi	r24, 0x20	; 32
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	0e 94 30 12 	call	0x2460	; 0x2460 <fputc>
    1f4a:	fa 94       	dec	r15
    1f4c:	f4 cf       	rjmp	.-24     	; 0x1f36 <vfprintf+0x45c>
    1f4e:	f2 01       	movw	r30, r4
    1f50:	37 fc       	sbrc	r3, 7
    1f52:	85 91       	lpm	r24, Z+
    1f54:	37 fe       	sbrs	r3, 7
    1f56:	81 91       	ld	r24, Z+
    1f58:	2f 01       	movw	r4, r30
    1f5a:	b6 01       	movw	r22, r12
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	0e 94 30 12 	call	0x2460	; 0x2460 <fputc>
    1f62:	f1 10       	cpse	r15, r1
    1f64:	fa 94       	dec	r15
    1f66:	01 50       	subi	r16, 0x01	; 1
    1f68:	11 09       	sbc	r17, r1
    1f6a:	01 15       	cp	r16, r1
    1f6c:	11 05       	cpc	r17, r1
    1f6e:	79 f7       	brne	.-34     	; 0x1f4e <vfprintf+0x474>
    1f70:	f8 c0       	rjmp	.+496    	; 0x2162 <vfprintf+0x688>
    1f72:	84 36       	cpi	r24, 0x64	; 100
    1f74:	11 f0       	breq	.+4      	; 0x1f7a <vfprintf+0x4a0>
    1f76:	89 36       	cpi	r24, 0x69	; 105
    1f78:	59 f5       	brne	.+86     	; 0x1fd0 <vfprintf+0x4f6>
    1f7a:	52 01       	movw	r10, r4
    1f7c:	27 ff       	sbrs	r18, 7
    1f7e:	09 c0       	rjmp	.+18     	; 0x1f92 <vfprintf+0x4b8>
    1f80:	f4 e0       	ldi	r31, 0x04	; 4
    1f82:	af 0e       	add	r10, r31
    1f84:	b1 1c       	adc	r11, r1
    1f86:	f2 01       	movw	r30, r4
    1f88:	60 81       	ld	r22, Z
    1f8a:	71 81       	ldd	r23, Z+1	; 0x01
    1f8c:	82 81       	ldd	r24, Z+2	; 0x02
    1f8e:	93 81       	ldd	r25, Z+3	; 0x03
    1f90:	0a c0       	rjmp	.+20     	; 0x1fa6 <vfprintf+0x4cc>
    1f92:	f2 e0       	ldi	r31, 0x02	; 2
    1f94:	af 0e       	add	r10, r31
    1f96:	b1 1c       	adc	r11, r1
    1f98:	f2 01       	movw	r30, r4
    1f9a:	60 81       	ld	r22, Z
    1f9c:	71 81       	ldd	r23, Z+1	; 0x01
    1f9e:	07 2e       	mov	r0, r23
    1fa0:	00 0c       	add	r0, r0
    1fa2:	88 0b       	sbc	r24, r24
    1fa4:	99 0b       	sbc	r25, r25
    1fa6:	2f 76       	andi	r18, 0x6F	; 111
    1fa8:	32 2e       	mov	r3, r18
    1faa:	97 ff       	sbrs	r25, 7
    1fac:	09 c0       	rjmp	.+18     	; 0x1fc0 <vfprintf+0x4e6>
    1fae:	90 95       	com	r25
    1fb0:	80 95       	com	r24
    1fb2:	70 95       	com	r23
    1fb4:	61 95       	neg	r22
    1fb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb8:	8f 4f       	sbci	r24, 0xFF	; 255
    1fba:	9f 4f       	sbci	r25, 0xFF	; 255
    1fbc:	20 68       	ori	r18, 0x80	; 128
    1fbe:	32 2e       	mov	r3, r18
    1fc0:	2a e0       	ldi	r18, 0x0A	; 10
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	a3 01       	movw	r20, r6
    1fc6:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__ultoa_invert>
    1fca:	e8 2e       	mov	r14, r24
    1fcc:	e6 18       	sub	r14, r6
    1fce:	3f c0       	rjmp	.+126    	; 0x204e <vfprintf+0x574>
    1fd0:	02 2f       	mov	r16, r18
    1fd2:	85 37       	cpi	r24, 0x75	; 117
    1fd4:	21 f4       	brne	.+8      	; 0x1fde <vfprintf+0x504>
    1fd6:	0f 7e       	andi	r16, 0xEF	; 239
    1fd8:	2a e0       	ldi	r18, 0x0A	; 10
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	1d c0       	rjmp	.+58     	; 0x2018 <vfprintf+0x53e>
    1fde:	09 7f       	andi	r16, 0xF9	; 249
    1fe0:	8f 36       	cpi	r24, 0x6F	; 111
    1fe2:	91 f0       	breq	.+36     	; 0x2008 <vfprintf+0x52e>
    1fe4:	18 f4       	brcc	.+6      	; 0x1fec <vfprintf+0x512>
    1fe6:	88 35       	cpi	r24, 0x58	; 88
    1fe8:	59 f0       	breq	.+22     	; 0x2000 <vfprintf+0x526>
    1fea:	c5 c0       	rjmp	.+394    	; 0x2176 <vfprintf+0x69c>
    1fec:	80 37       	cpi	r24, 0x70	; 112
    1fee:	19 f0       	breq	.+6      	; 0x1ff6 <vfprintf+0x51c>
    1ff0:	88 37       	cpi	r24, 0x78	; 120
    1ff2:	11 f0       	breq	.+4      	; 0x1ff8 <vfprintf+0x51e>
    1ff4:	c0 c0       	rjmp	.+384    	; 0x2176 <vfprintf+0x69c>
    1ff6:	00 61       	ori	r16, 0x10	; 16
    1ff8:	04 ff       	sbrs	r16, 4
    1ffa:	09 c0       	rjmp	.+18     	; 0x200e <vfprintf+0x534>
    1ffc:	04 60       	ori	r16, 0x04	; 4
    1ffe:	07 c0       	rjmp	.+14     	; 0x200e <vfprintf+0x534>
    2000:	24 ff       	sbrs	r18, 4
    2002:	08 c0       	rjmp	.+16     	; 0x2014 <vfprintf+0x53a>
    2004:	06 60       	ori	r16, 0x06	; 6
    2006:	06 c0       	rjmp	.+12     	; 0x2014 <vfprintf+0x53a>
    2008:	28 e0       	ldi	r18, 0x08	; 8
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	05 c0       	rjmp	.+10     	; 0x2018 <vfprintf+0x53e>
    200e:	20 e1       	ldi	r18, 0x10	; 16
    2010:	30 e0       	ldi	r19, 0x00	; 0
    2012:	02 c0       	rjmp	.+4      	; 0x2018 <vfprintf+0x53e>
    2014:	20 e1       	ldi	r18, 0x10	; 16
    2016:	32 e0       	ldi	r19, 0x02	; 2
    2018:	52 01       	movw	r10, r4
    201a:	07 ff       	sbrs	r16, 7
    201c:	09 c0       	rjmp	.+18     	; 0x2030 <vfprintf+0x556>
    201e:	f4 e0       	ldi	r31, 0x04	; 4
    2020:	af 0e       	add	r10, r31
    2022:	b1 1c       	adc	r11, r1
    2024:	f2 01       	movw	r30, r4
    2026:	60 81       	ld	r22, Z
    2028:	71 81       	ldd	r23, Z+1	; 0x01
    202a:	82 81       	ldd	r24, Z+2	; 0x02
    202c:	93 81       	ldd	r25, Z+3	; 0x03
    202e:	08 c0       	rjmp	.+16     	; 0x2040 <vfprintf+0x566>
    2030:	f2 e0       	ldi	r31, 0x02	; 2
    2032:	af 0e       	add	r10, r31
    2034:	b1 1c       	adc	r11, r1
    2036:	f2 01       	movw	r30, r4
    2038:	60 81       	ld	r22, Z
    203a:	71 81       	ldd	r23, Z+1	; 0x01
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	a3 01       	movw	r20, r6
    2042:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <__ultoa_invert>
    2046:	e8 2e       	mov	r14, r24
    2048:	e6 18       	sub	r14, r6
    204a:	0f 77       	andi	r16, 0x7F	; 127
    204c:	30 2e       	mov	r3, r16
    204e:	36 fe       	sbrs	r3, 6
    2050:	0b c0       	rjmp	.+22     	; 0x2068 <vfprintf+0x58e>
    2052:	33 2d       	mov	r19, r3
    2054:	3e 7f       	andi	r19, 0xFE	; 254
    2056:	e1 16       	cp	r14, r17
    2058:	50 f4       	brcc	.+20     	; 0x206e <vfprintf+0x594>
    205a:	34 fe       	sbrs	r3, 4
    205c:	0a c0       	rjmp	.+20     	; 0x2072 <vfprintf+0x598>
    205e:	32 fc       	sbrc	r3, 2
    2060:	08 c0       	rjmp	.+16     	; 0x2072 <vfprintf+0x598>
    2062:	33 2d       	mov	r19, r3
    2064:	3e 7e       	andi	r19, 0xEE	; 238
    2066:	05 c0       	rjmp	.+10     	; 0x2072 <vfprintf+0x598>
    2068:	0e 2d       	mov	r16, r14
    206a:	33 2d       	mov	r19, r3
    206c:	03 c0       	rjmp	.+6      	; 0x2074 <vfprintf+0x59a>
    206e:	0e 2d       	mov	r16, r14
    2070:	01 c0       	rjmp	.+2      	; 0x2074 <vfprintf+0x59a>
    2072:	01 2f       	mov	r16, r17
    2074:	34 ff       	sbrs	r19, 4
    2076:	0c c0       	rjmp	.+24     	; 0x2090 <vfprintf+0x5b6>
    2078:	fe 01       	movw	r30, r28
    207a:	ee 0d       	add	r30, r14
    207c:	f1 1d       	adc	r31, r1
    207e:	80 81       	ld	r24, Z
    2080:	80 33       	cpi	r24, 0x30	; 48
    2082:	11 f4       	brne	.+4      	; 0x2088 <vfprintf+0x5ae>
    2084:	39 7e       	andi	r19, 0xE9	; 233
    2086:	08 c0       	rjmp	.+16     	; 0x2098 <vfprintf+0x5be>
    2088:	32 ff       	sbrs	r19, 2
    208a:	05 c0       	rjmp	.+10     	; 0x2096 <vfprintf+0x5bc>
    208c:	0e 5f       	subi	r16, 0xFE	; 254
    208e:	04 c0       	rjmp	.+8      	; 0x2098 <vfprintf+0x5be>
    2090:	83 2f       	mov	r24, r19
    2092:	86 78       	andi	r24, 0x86	; 134
    2094:	09 f0       	breq	.+2      	; 0x2098 <vfprintf+0x5be>
    2096:	0f 5f       	subi	r16, 0xFF	; 255
    2098:	33 fd       	sbrc	r19, 3
    209a:	13 c0       	rjmp	.+38     	; 0x20c2 <vfprintf+0x5e8>
    209c:	30 ff       	sbrs	r19, 0
    209e:	06 c0       	rjmp	.+12     	; 0x20ac <vfprintf+0x5d2>
    20a0:	1e 2d       	mov	r17, r14
    20a2:	0f 15       	cp	r16, r15
    20a4:	18 f4       	brcc	.+6      	; 0x20ac <vfprintf+0x5d2>
    20a6:	1f 0d       	add	r17, r15
    20a8:	10 1b       	sub	r17, r16
    20aa:	0f 2d       	mov	r16, r15
    20ac:	0f 15       	cp	r16, r15
    20ae:	68 f4       	brcc	.+26     	; 0x20ca <vfprintf+0x5f0>
    20b0:	b6 01       	movw	r22, r12
    20b2:	80 e2       	ldi	r24, 0x20	; 32
    20b4:	90 e0       	ldi	r25, 0x00	; 0
    20b6:	3b 8b       	std	Y+19, r19	; 0x13
    20b8:	0e 94 30 12 	call	0x2460	; 0x2460 <fputc>
    20bc:	0f 5f       	subi	r16, 0xFF	; 255
    20be:	3b 89       	ldd	r19, Y+19	; 0x13
    20c0:	f5 cf       	rjmp	.-22     	; 0x20ac <vfprintf+0x5d2>
    20c2:	0f 15       	cp	r16, r15
    20c4:	10 f4       	brcc	.+4      	; 0x20ca <vfprintf+0x5f0>
    20c6:	f0 1a       	sub	r15, r16
    20c8:	01 c0       	rjmp	.+2      	; 0x20cc <vfprintf+0x5f2>
    20ca:	f1 2c       	mov	r15, r1
    20cc:	34 ff       	sbrs	r19, 4
    20ce:	12 c0       	rjmp	.+36     	; 0x20f4 <vfprintf+0x61a>
    20d0:	b6 01       	movw	r22, r12
    20d2:	80 e3       	ldi	r24, 0x30	; 48
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	3b 8b       	std	Y+19, r19	; 0x13
    20d8:	0e 94 30 12 	call	0x2460	; 0x2460 <fputc>
    20dc:	3b 89       	ldd	r19, Y+19	; 0x13
    20de:	32 ff       	sbrs	r19, 2
    20e0:	17 c0       	rjmp	.+46     	; 0x2110 <vfprintf+0x636>
    20e2:	31 fd       	sbrc	r19, 1
    20e4:	03 c0       	rjmp	.+6      	; 0x20ec <vfprintf+0x612>
    20e6:	88 e7       	ldi	r24, 0x78	; 120
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	02 c0       	rjmp	.+4      	; 0x20f0 <vfprintf+0x616>
    20ec:	88 e5       	ldi	r24, 0x58	; 88
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	b6 01       	movw	r22, r12
    20f2:	0c c0       	rjmp	.+24     	; 0x210c <vfprintf+0x632>
    20f4:	83 2f       	mov	r24, r19
    20f6:	86 78       	andi	r24, 0x86	; 134
    20f8:	59 f0       	breq	.+22     	; 0x2110 <vfprintf+0x636>
    20fa:	31 ff       	sbrs	r19, 1
    20fc:	02 c0       	rjmp	.+4      	; 0x2102 <vfprintf+0x628>
    20fe:	8b e2       	ldi	r24, 0x2B	; 43
    2100:	01 c0       	rjmp	.+2      	; 0x2104 <vfprintf+0x62a>
    2102:	80 e2       	ldi	r24, 0x20	; 32
    2104:	37 fd       	sbrc	r19, 7
    2106:	8d e2       	ldi	r24, 0x2D	; 45
    2108:	b6 01       	movw	r22, r12
    210a:	90 e0       	ldi	r25, 0x00	; 0
    210c:	0e 94 30 12 	call	0x2460	; 0x2460 <fputc>
    2110:	e1 16       	cp	r14, r17
    2112:	38 f4       	brcc	.+14     	; 0x2122 <vfprintf+0x648>
    2114:	b6 01       	movw	r22, r12
    2116:	80 e3       	ldi	r24, 0x30	; 48
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	0e 94 30 12 	call	0x2460	; 0x2460 <fputc>
    211e:	11 50       	subi	r17, 0x01	; 1
    2120:	f7 cf       	rjmp	.-18     	; 0x2110 <vfprintf+0x636>
    2122:	ea 94       	dec	r14
    2124:	f3 01       	movw	r30, r6
    2126:	ee 0d       	add	r30, r14
    2128:	f1 1d       	adc	r31, r1
    212a:	80 81       	ld	r24, Z
    212c:	b6 01       	movw	r22, r12
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	0e 94 30 12 	call	0x2460	; 0x2460 <fputc>
    2134:	e1 10       	cpse	r14, r1
    2136:	f5 cf       	rjmp	.-22     	; 0x2122 <vfprintf+0x648>
    2138:	14 c0       	rjmp	.+40     	; 0x2162 <vfprintf+0x688>
    213a:	f4 e0       	ldi	r31, 0x04	; 4
    213c:	ff 15       	cp	r31, r15
    213e:	58 f5       	brcc	.+86     	; 0x2196 <vfprintf+0x6bc>
    2140:	84 e0       	ldi	r24, 0x04	; 4
    2142:	f8 1a       	sub	r15, r24
    2144:	33 fe       	sbrs	r3, 3
    2146:	1e c0       	rjmp	.+60     	; 0x2184 <vfprintf+0x6aa>
    2148:	21 10       	cpse	r2, r1
    214a:	26 c0       	rjmp	.+76     	; 0x2198 <vfprintf+0x6be>
    214c:	03 ff       	sbrs	r16, 3
    214e:	2a c0       	rjmp	.+84     	; 0x21a4 <vfprintf+0x6ca>
    2150:	04 e3       	ldi	r16, 0x34	; 52
    2152:	11 e0       	ldi	r17, 0x01	; 1
    2154:	f3 2d       	mov	r31, r3
    2156:	f0 71       	andi	r31, 0x10	; 16
    2158:	3f 2e       	mov	r3, r31
    215a:	f8 01       	movw	r30, r16
    215c:	84 91       	lpm	r24, Z
    215e:	81 11       	cpse	r24, r1
    2160:	24 c0       	rjmp	.+72     	; 0x21aa <vfprintf+0x6d0>
    2162:	ff 20       	and	r15, r15
    2164:	09 f4       	brne	.+2      	; 0x2168 <vfprintf+0x68e>
    2166:	e5 cc       	rjmp	.-1590   	; 0x1b32 <vfprintf+0x58>
    2168:	b6 01       	movw	r22, r12
    216a:	80 e2       	ldi	r24, 0x20	; 32
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	0e 94 30 12 	call	0x2460	; 0x2460 <fputc>
    2172:	fa 94       	dec	r15
    2174:	f6 cf       	rjmp	.-20     	; 0x2162 <vfprintf+0x688>
    2176:	f6 01       	movw	r30, r12
    2178:	86 81       	ldd	r24, Z+6	; 0x06
    217a:	97 81       	ldd	r25, Z+7	; 0x07
    217c:	26 c0       	rjmp	.+76     	; 0x21ca <vfprintf+0x6f0>
    217e:	8f ef       	ldi	r24, 0xFF	; 255
    2180:	9f ef       	ldi	r25, 0xFF	; 255
    2182:	23 c0       	rjmp	.+70     	; 0x21ca <vfprintf+0x6f0>
    2184:	b6 01       	movw	r22, r12
    2186:	80 e2       	ldi	r24, 0x20	; 32
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	0e 94 30 12 	call	0x2460	; 0x2460 <fputc>
    218e:	fa 94       	dec	r15
    2190:	f1 10       	cpse	r15, r1
    2192:	f8 cf       	rjmp	.-16     	; 0x2184 <vfprintf+0x6aa>
    2194:	d9 cf       	rjmp	.-78     	; 0x2148 <vfprintf+0x66e>
    2196:	f1 2c       	mov	r15, r1
    2198:	b6 01       	movw	r22, r12
    219a:	82 2d       	mov	r24, r2
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	0e 94 30 12 	call	0x2460	; 0x2460 <fputc>
    21a2:	d4 cf       	rjmp	.-88     	; 0x214c <vfprintf+0x672>
    21a4:	08 e3       	ldi	r16, 0x38	; 56
    21a6:	11 e0       	ldi	r17, 0x01	; 1
    21a8:	d5 cf       	rjmp	.-86     	; 0x2154 <vfprintf+0x67a>
    21aa:	31 10       	cpse	r3, r1
    21ac:	80 52       	subi	r24, 0x20	; 32
    21ae:	b6 01       	movw	r22, r12
    21b0:	90 e0       	ldi	r25, 0x00	; 0
    21b2:	0e 94 30 12 	call	0x2460	; 0x2460 <fputc>
    21b6:	0f 5f       	subi	r16, 0xFF	; 255
    21b8:	1f 4f       	sbci	r17, 0xFF	; 255
    21ba:	cf cf       	rjmp	.-98     	; 0x215a <vfprintf+0x680>
    21bc:	23 e0       	ldi	r18, 0x03	; 3
    21be:	2f 15       	cp	r18, r15
    21c0:	10 f4       	brcc	.+4      	; 0x21c6 <vfprintf+0x6ec>
    21c2:	83 e0       	ldi	r24, 0x03	; 3
    21c4:	be cf       	rjmp	.-132    	; 0x2142 <vfprintf+0x668>
    21c6:	f1 2c       	mov	r15, r1
    21c8:	c1 cf       	rjmp	.-126    	; 0x214c <vfprintf+0x672>
    21ca:	63 96       	adiw	r28, 0x13	; 19
    21cc:	e2 e1       	ldi	r30, 0x12	; 18
    21ce:	0c 94 27 11 	jmp	0x224e	; 0x224e <__epilogue_restores__>

000021d2 <__udivmodsi4>:
    21d2:	a1 e2       	ldi	r26, 0x21	; 33
    21d4:	1a 2e       	mov	r1, r26
    21d6:	aa 1b       	sub	r26, r26
    21d8:	bb 1b       	sub	r27, r27
    21da:	fd 01       	movw	r30, r26
    21dc:	0d c0       	rjmp	.+26     	; 0x21f8 <__udivmodsi4_ep>

000021de <__udivmodsi4_loop>:
    21de:	aa 1f       	adc	r26, r26
    21e0:	bb 1f       	adc	r27, r27
    21e2:	ee 1f       	adc	r30, r30
    21e4:	ff 1f       	adc	r31, r31
    21e6:	a2 17       	cp	r26, r18
    21e8:	b3 07       	cpc	r27, r19
    21ea:	e4 07       	cpc	r30, r20
    21ec:	f5 07       	cpc	r31, r21
    21ee:	20 f0       	brcs	.+8      	; 0x21f8 <__udivmodsi4_ep>
    21f0:	a2 1b       	sub	r26, r18
    21f2:	b3 0b       	sbc	r27, r19
    21f4:	e4 0b       	sbc	r30, r20
    21f6:	f5 0b       	sbc	r31, r21

000021f8 <__udivmodsi4_ep>:
    21f8:	66 1f       	adc	r22, r22
    21fa:	77 1f       	adc	r23, r23
    21fc:	88 1f       	adc	r24, r24
    21fe:	99 1f       	adc	r25, r25
    2200:	1a 94       	dec	r1
    2202:	69 f7       	brne	.-38     	; 0x21de <__udivmodsi4_loop>
    2204:	60 95       	com	r22
    2206:	70 95       	com	r23
    2208:	80 95       	com	r24
    220a:	90 95       	com	r25
    220c:	9b 01       	movw	r18, r22
    220e:	ac 01       	movw	r20, r24
    2210:	bd 01       	movw	r22, r26
    2212:	cf 01       	movw	r24, r30
    2214:	08 95       	ret

00002216 <__prologue_saves__>:
    2216:	2f 92       	push	r2
    2218:	3f 92       	push	r3
    221a:	4f 92       	push	r4
    221c:	5f 92       	push	r5
    221e:	6f 92       	push	r6
    2220:	7f 92       	push	r7
    2222:	8f 92       	push	r8
    2224:	9f 92       	push	r9
    2226:	af 92       	push	r10
    2228:	bf 92       	push	r11
    222a:	cf 92       	push	r12
    222c:	df 92       	push	r13
    222e:	ef 92       	push	r14
    2230:	ff 92       	push	r15
    2232:	0f 93       	push	r16
    2234:	1f 93       	push	r17
    2236:	cf 93       	push	r28
    2238:	df 93       	push	r29
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	ca 1b       	sub	r28, r26
    2240:	db 0b       	sbc	r29, r27
    2242:	0f b6       	in	r0, 0x3f	; 63
    2244:	f8 94       	cli
    2246:	de bf       	out	0x3e, r29	; 62
    2248:	0f be       	out	0x3f, r0	; 63
    224a:	cd bf       	out	0x3d, r28	; 61
    224c:	09 94       	ijmp

0000224e <__epilogue_restores__>:
    224e:	2a 88       	ldd	r2, Y+18	; 0x12
    2250:	39 88       	ldd	r3, Y+17	; 0x11
    2252:	48 88       	ldd	r4, Y+16	; 0x10
    2254:	5f 84       	ldd	r5, Y+15	; 0x0f
    2256:	6e 84       	ldd	r6, Y+14	; 0x0e
    2258:	7d 84       	ldd	r7, Y+13	; 0x0d
    225a:	8c 84       	ldd	r8, Y+12	; 0x0c
    225c:	9b 84       	ldd	r9, Y+11	; 0x0b
    225e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2260:	b9 84       	ldd	r11, Y+9	; 0x09
    2262:	c8 84       	ldd	r12, Y+8	; 0x08
    2264:	df 80       	ldd	r13, Y+7	; 0x07
    2266:	ee 80       	ldd	r14, Y+6	; 0x06
    2268:	fd 80       	ldd	r15, Y+5	; 0x05
    226a:	0c 81       	ldd	r16, Y+4	; 0x04
    226c:	1b 81       	ldd	r17, Y+3	; 0x03
    226e:	aa 81       	ldd	r26, Y+2	; 0x02
    2270:	b9 81       	ldd	r27, Y+1	; 0x01
    2272:	ce 0f       	add	r28, r30
    2274:	d1 1d       	adc	r29, r1
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	f8 94       	cli
    227a:	de bf       	out	0x3e, r29	; 62
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	cd bf       	out	0x3d, r28	; 61
    2280:	ed 01       	movw	r28, r26
    2282:	08 95       	ret

00002284 <__ftoa_engine>:
    2284:	28 30       	cpi	r18, 0x08	; 8
    2286:	08 f0       	brcs	.+2      	; 0x228a <__ftoa_engine+0x6>
    2288:	27 e0       	ldi	r18, 0x07	; 7
    228a:	33 27       	eor	r19, r19
    228c:	da 01       	movw	r26, r20
    228e:	99 0f       	add	r25, r25
    2290:	31 1d       	adc	r19, r1
    2292:	87 fd       	sbrc	r24, 7
    2294:	91 60       	ori	r25, 0x01	; 1
    2296:	00 96       	adiw	r24, 0x00	; 0
    2298:	61 05       	cpc	r22, r1
    229a:	71 05       	cpc	r23, r1
    229c:	39 f4       	brne	.+14     	; 0x22ac <__ftoa_engine+0x28>
    229e:	32 60       	ori	r19, 0x02	; 2
    22a0:	2e 5f       	subi	r18, 0xFE	; 254
    22a2:	3d 93       	st	X+, r19
    22a4:	30 e3       	ldi	r19, 0x30	; 48
    22a6:	2a 95       	dec	r18
    22a8:	e1 f7       	brne	.-8      	; 0x22a2 <__ftoa_engine+0x1e>
    22aa:	08 95       	ret
    22ac:	9f 3f       	cpi	r25, 0xFF	; 255
    22ae:	30 f0       	brcs	.+12     	; 0x22bc <__ftoa_engine+0x38>
    22b0:	80 38       	cpi	r24, 0x80	; 128
    22b2:	71 05       	cpc	r23, r1
    22b4:	61 05       	cpc	r22, r1
    22b6:	09 f0       	breq	.+2      	; 0x22ba <__ftoa_engine+0x36>
    22b8:	3c 5f       	subi	r19, 0xFC	; 252
    22ba:	3c 5f       	subi	r19, 0xFC	; 252
    22bc:	3d 93       	st	X+, r19
    22be:	91 30       	cpi	r25, 0x01	; 1
    22c0:	08 f0       	brcs	.+2      	; 0x22c4 <__ftoa_engine+0x40>
    22c2:	80 68       	ori	r24, 0x80	; 128
    22c4:	91 1d       	adc	r25, r1
    22c6:	df 93       	push	r29
    22c8:	cf 93       	push	r28
    22ca:	1f 93       	push	r17
    22cc:	0f 93       	push	r16
    22ce:	ff 92       	push	r15
    22d0:	ef 92       	push	r14
    22d2:	19 2f       	mov	r17, r25
    22d4:	98 7f       	andi	r25, 0xF8	; 248
    22d6:	96 95       	lsr	r25
    22d8:	e9 2f       	mov	r30, r25
    22da:	96 95       	lsr	r25
    22dc:	96 95       	lsr	r25
    22de:	e9 0f       	add	r30, r25
    22e0:	ff 27       	eor	r31, r31
    22e2:	ea 56       	subi	r30, 0x6A	; 106
    22e4:	fe 4f       	sbci	r31, 0xFE	; 254
    22e6:	99 27       	eor	r25, r25
    22e8:	33 27       	eor	r19, r19
    22ea:	ee 24       	eor	r14, r14
    22ec:	ff 24       	eor	r15, r15
    22ee:	a7 01       	movw	r20, r14
    22f0:	e7 01       	movw	r28, r14
    22f2:	05 90       	lpm	r0, Z+
    22f4:	08 94       	sec
    22f6:	07 94       	ror	r0
    22f8:	28 f4       	brcc	.+10     	; 0x2304 <__ftoa_engine+0x80>
    22fa:	36 0f       	add	r19, r22
    22fc:	e7 1e       	adc	r14, r23
    22fe:	f8 1e       	adc	r15, r24
    2300:	49 1f       	adc	r20, r25
    2302:	51 1d       	adc	r21, r1
    2304:	66 0f       	add	r22, r22
    2306:	77 1f       	adc	r23, r23
    2308:	88 1f       	adc	r24, r24
    230a:	99 1f       	adc	r25, r25
    230c:	06 94       	lsr	r0
    230e:	a1 f7       	brne	.-24     	; 0x22f8 <__ftoa_engine+0x74>
    2310:	05 90       	lpm	r0, Z+
    2312:	07 94       	ror	r0
    2314:	28 f4       	brcc	.+10     	; 0x2320 <__ftoa_engine+0x9c>
    2316:	e7 0e       	add	r14, r23
    2318:	f8 1e       	adc	r15, r24
    231a:	49 1f       	adc	r20, r25
    231c:	56 1f       	adc	r21, r22
    231e:	c1 1d       	adc	r28, r1
    2320:	77 0f       	add	r23, r23
    2322:	88 1f       	adc	r24, r24
    2324:	99 1f       	adc	r25, r25
    2326:	66 1f       	adc	r22, r22
    2328:	06 94       	lsr	r0
    232a:	a1 f7       	brne	.-24     	; 0x2314 <__ftoa_engine+0x90>
    232c:	05 90       	lpm	r0, Z+
    232e:	07 94       	ror	r0
    2330:	28 f4       	brcc	.+10     	; 0x233c <__ftoa_engine+0xb8>
    2332:	f8 0e       	add	r15, r24
    2334:	49 1f       	adc	r20, r25
    2336:	56 1f       	adc	r21, r22
    2338:	c7 1f       	adc	r28, r23
    233a:	d1 1d       	adc	r29, r1
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	66 1f       	adc	r22, r22
    2342:	77 1f       	adc	r23, r23
    2344:	06 94       	lsr	r0
    2346:	a1 f7       	brne	.-24     	; 0x2330 <__ftoa_engine+0xac>
    2348:	05 90       	lpm	r0, Z+
    234a:	07 94       	ror	r0
    234c:	20 f4       	brcc	.+8      	; 0x2356 <__ftoa_engine+0xd2>
    234e:	49 0f       	add	r20, r25
    2350:	56 1f       	adc	r21, r22
    2352:	c7 1f       	adc	r28, r23
    2354:	d8 1f       	adc	r29, r24
    2356:	99 0f       	add	r25, r25
    2358:	66 1f       	adc	r22, r22
    235a:	77 1f       	adc	r23, r23
    235c:	88 1f       	adc	r24, r24
    235e:	06 94       	lsr	r0
    2360:	a9 f7       	brne	.-22     	; 0x234c <__ftoa_engine+0xc8>
    2362:	84 91       	lpm	r24, Z
    2364:	10 95       	com	r17
    2366:	17 70       	andi	r17, 0x07	; 7
    2368:	41 f0       	breq	.+16     	; 0x237a <__ftoa_engine+0xf6>
    236a:	d6 95       	lsr	r29
    236c:	c7 95       	ror	r28
    236e:	57 95       	ror	r21
    2370:	47 95       	ror	r20
    2372:	f7 94       	ror	r15
    2374:	e7 94       	ror	r14
    2376:	1a 95       	dec	r17
    2378:	c1 f7       	brne	.-16     	; 0x236a <__ftoa_engine+0xe6>
    237a:	ec e3       	ldi	r30, 0x3C	; 60
    237c:	f1 e0       	ldi	r31, 0x01	; 1
    237e:	68 94       	set
    2380:	15 90       	lpm	r1, Z+
    2382:	15 91       	lpm	r17, Z+
    2384:	35 91       	lpm	r19, Z+
    2386:	65 91       	lpm	r22, Z+
    2388:	95 91       	lpm	r25, Z+
    238a:	05 90       	lpm	r0, Z+
    238c:	7f e2       	ldi	r23, 0x2F	; 47
    238e:	73 95       	inc	r23
    2390:	e1 18       	sub	r14, r1
    2392:	f1 0a       	sbc	r15, r17
    2394:	43 0b       	sbc	r20, r19
    2396:	56 0b       	sbc	r21, r22
    2398:	c9 0b       	sbc	r28, r25
    239a:	d0 09       	sbc	r29, r0
    239c:	c0 f7       	brcc	.-16     	; 0x238e <__ftoa_engine+0x10a>
    239e:	e1 0c       	add	r14, r1
    23a0:	f1 1e       	adc	r15, r17
    23a2:	43 1f       	adc	r20, r19
    23a4:	56 1f       	adc	r21, r22
    23a6:	c9 1f       	adc	r28, r25
    23a8:	d0 1d       	adc	r29, r0
    23aa:	7e f4       	brtc	.+30     	; 0x23ca <__ftoa_engine+0x146>
    23ac:	70 33       	cpi	r23, 0x30	; 48
    23ae:	11 f4       	brne	.+4      	; 0x23b4 <__ftoa_engine+0x130>
    23b0:	8a 95       	dec	r24
    23b2:	e6 cf       	rjmp	.-52     	; 0x2380 <__ftoa_engine+0xfc>
    23b4:	e8 94       	clt
    23b6:	01 50       	subi	r16, 0x01	; 1
    23b8:	30 f0       	brcs	.+12     	; 0x23c6 <__ftoa_engine+0x142>
    23ba:	08 0f       	add	r16, r24
    23bc:	0a f4       	brpl	.+2      	; 0x23c0 <__ftoa_engine+0x13c>
    23be:	00 27       	eor	r16, r16
    23c0:	02 17       	cp	r16, r18
    23c2:	08 f4       	brcc	.+2      	; 0x23c6 <__ftoa_engine+0x142>
    23c4:	20 2f       	mov	r18, r16
    23c6:	23 95       	inc	r18
    23c8:	02 2f       	mov	r16, r18
    23ca:	7a 33       	cpi	r23, 0x3A	; 58
    23cc:	28 f0       	brcs	.+10     	; 0x23d8 <__ftoa_engine+0x154>
    23ce:	79 e3       	ldi	r23, 0x39	; 57
    23d0:	7d 93       	st	X+, r23
    23d2:	2a 95       	dec	r18
    23d4:	e9 f7       	brne	.-6      	; 0x23d0 <__ftoa_engine+0x14c>
    23d6:	10 c0       	rjmp	.+32     	; 0x23f8 <__ftoa_engine+0x174>
    23d8:	7d 93       	st	X+, r23
    23da:	2a 95       	dec	r18
    23dc:	89 f6       	brne	.-94     	; 0x2380 <__ftoa_engine+0xfc>
    23de:	06 94       	lsr	r0
    23e0:	97 95       	ror	r25
    23e2:	67 95       	ror	r22
    23e4:	37 95       	ror	r19
    23e6:	17 95       	ror	r17
    23e8:	17 94       	ror	r1
    23ea:	e1 18       	sub	r14, r1
    23ec:	f1 0a       	sbc	r15, r17
    23ee:	43 0b       	sbc	r20, r19
    23f0:	56 0b       	sbc	r21, r22
    23f2:	c9 0b       	sbc	r28, r25
    23f4:	d0 09       	sbc	r29, r0
    23f6:	98 f0       	brcs	.+38     	; 0x241e <__ftoa_engine+0x19a>
    23f8:	23 95       	inc	r18
    23fa:	7e 91       	ld	r23, -X
    23fc:	73 95       	inc	r23
    23fe:	7a 33       	cpi	r23, 0x3A	; 58
    2400:	08 f0       	brcs	.+2      	; 0x2404 <__ftoa_engine+0x180>
    2402:	70 e3       	ldi	r23, 0x30	; 48
    2404:	7c 93       	st	X, r23
    2406:	20 13       	cpse	r18, r16
    2408:	b8 f7       	brcc	.-18     	; 0x23f8 <__ftoa_engine+0x174>
    240a:	7e 91       	ld	r23, -X
    240c:	70 61       	ori	r23, 0x10	; 16
    240e:	7d 93       	st	X+, r23
    2410:	30 f0       	brcs	.+12     	; 0x241e <__ftoa_engine+0x19a>
    2412:	83 95       	inc	r24
    2414:	71 e3       	ldi	r23, 0x31	; 49
    2416:	7d 93       	st	X+, r23
    2418:	70 e3       	ldi	r23, 0x30	; 48
    241a:	2a 95       	dec	r18
    241c:	e1 f7       	brne	.-8      	; 0x2416 <__ftoa_engine+0x192>
    241e:	11 24       	eor	r1, r1
    2420:	ef 90       	pop	r14
    2422:	ff 90       	pop	r15
    2424:	0f 91       	pop	r16
    2426:	1f 91       	pop	r17
    2428:	cf 91       	pop	r28
    242a:	df 91       	pop	r29
    242c:	99 27       	eor	r25, r25
    242e:	87 fd       	sbrc	r24, 7
    2430:	90 95       	com	r25
    2432:	08 95       	ret

00002434 <strnlen_P>:
    2434:	fc 01       	movw	r30, r24
    2436:	05 90       	lpm	r0, Z+
    2438:	61 50       	subi	r22, 0x01	; 1
    243a:	70 40       	sbci	r23, 0x00	; 0
    243c:	01 10       	cpse	r0, r1
    243e:	d8 f7       	brcc	.-10     	; 0x2436 <strnlen_P+0x2>
    2440:	80 95       	com	r24
    2442:	90 95       	com	r25
    2444:	8e 0f       	add	r24, r30
    2446:	9f 1f       	adc	r25, r31
    2448:	08 95       	ret

0000244a <strnlen>:
    244a:	fc 01       	movw	r30, r24
    244c:	61 50       	subi	r22, 0x01	; 1
    244e:	70 40       	sbci	r23, 0x00	; 0
    2450:	01 90       	ld	r0, Z+
    2452:	01 10       	cpse	r0, r1
    2454:	d8 f7       	brcc	.-10     	; 0x244c <strnlen+0x2>
    2456:	80 95       	com	r24
    2458:	90 95       	com	r25
    245a:	8e 0f       	add	r24, r30
    245c:	9f 1f       	adc	r25, r31
    245e:	08 95       	ret

00002460 <fputc>:
    2460:	0f 93       	push	r16
    2462:	1f 93       	push	r17
    2464:	cf 93       	push	r28
    2466:	df 93       	push	r29
    2468:	fb 01       	movw	r30, r22
    246a:	23 81       	ldd	r18, Z+3	; 0x03
    246c:	21 fd       	sbrc	r18, 1
    246e:	03 c0       	rjmp	.+6      	; 0x2476 <fputc+0x16>
    2470:	8f ef       	ldi	r24, 0xFF	; 255
    2472:	9f ef       	ldi	r25, 0xFF	; 255
    2474:	28 c0       	rjmp	.+80     	; 0x24c6 <fputc+0x66>
    2476:	22 ff       	sbrs	r18, 2
    2478:	16 c0       	rjmp	.+44     	; 0x24a6 <fputc+0x46>
    247a:	46 81       	ldd	r20, Z+6	; 0x06
    247c:	57 81       	ldd	r21, Z+7	; 0x07
    247e:	24 81       	ldd	r18, Z+4	; 0x04
    2480:	35 81       	ldd	r19, Z+5	; 0x05
    2482:	42 17       	cp	r20, r18
    2484:	53 07       	cpc	r21, r19
    2486:	44 f4       	brge	.+16     	; 0x2498 <fputc+0x38>
    2488:	a0 81       	ld	r26, Z
    248a:	b1 81       	ldd	r27, Z+1	; 0x01
    248c:	9d 01       	movw	r18, r26
    248e:	2f 5f       	subi	r18, 0xFF	; 255
    2490:	3f 4f       	sbci	r19, 0xFF	; 255
    2492:	31 83       	std	Z+1, r19	; 0x01
    2494:	20 83       	st	Z, r18
    2496:	8c 93       	st	X, r24
    2498:	26 81       	ldd	r18, Z+6	; 0x06
    249a:	37 81       	ldd	r19, Z+7	; 0x07
    249c:	2f 5f       	subi	r18, 0xFF	; 255
    249e:	3f 4f       	sbci	r19, 0xFF	; 255
    24a0:	37 83       	std	Z+7, r19	; 0x07
    24a2:	26 83       	std	Z+6, r18	; 0x06
    24a4:	10 c0       	rjmp	.+32     	; 0x24c6 <fputc+0x66>
    24a6:	eb 01       	movw	r28, r22
    24a8:	09 2f       	mov	r16, r25
    24aa:	18 2f       	mov	r17, r24
    24ac:	00 84       	ldd	r0, Z+8	; 0x08
    24ae:	f1 85       	ldd	r31, Z+9	; 0x09
    24b0:	e0 2d       	mov	r30, r0
    24b2:	09 95       	icall
    24b4:	89 2b       	or	r24, r25
    24b6:	e1 f6       	brne	.-72     	; 0x2470 <fputc+0x10>
    24b8:	8e 81       	ldd	r24, Y+6	; 0x06
    24ba:	9f 81       	ldd	r25, Y+7	; 0x07
    24bc:	01 96       	adiw	r24, 0x01	; 1
    24be:	9f 83       	std	Y+7, r25	; 0x07
    24c0:	8e 83       	std	Y+6, r24	; 0x06
    24c2:	81 2f       	mov	r24, r17
    24c4:	90 2f       	mov	r25, r16
    24c6:	df 91       	pop	r29
    24c8:	cf 91       	pop	r28
    24ca:	1f 91       	pop	r17
    24cc:	0f 91       	pop	r16
    24ce:	08 95       	ret

000024d0 <printf>:
    24d0:	a0 e0       	ldi	r26, 0x00	; 0
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	ee e6       	ldi	r30, 0x6E	; 110
    24d6:	f2 e1       	ldi	r31, 0x12	; 18
    24d8:	0c 94 1b 11 	jmp	0x2236	; 0x2236 <__prologue_saves__+0x20>
    24dc:	ae 01       	movw	r20, r28
    24de:	4b 5f       	subi	r20, 0xFB	; 251
    24e0:	5f 4f       	sbci	r21, 0xFF	; 255
    24e2:	fa 01       	movw	r30, r20
    24e4:	61 91       	ld	r22, Z+
    24e6:	71 91       	ld	r23, Z+
    24e8:	af 01       	movw	r20, r30
    24ea:	80 91 65 03 	lds	r24, 0x0365
    24ee:	90 91 66 03 	lds	r25, 0x0366
    24f2:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <vfprintf>
    24f6:	e2 e0       	ldi	r30, 0x02	; 2
    24f8:	0c 94 37 11 	jmp	0x226e	; 0x226e <__epilogue_restores__+0x20>

000024fc <puts>:
    24fc:	0f 93       	push	r16
    24fe:	1f 93       	push	r17
    2500:	cf 93       	push	r28
    2502:	df 93       	push	r29
    2504:	e0 91 65 03 	lds	r30, 0x0365
    2508:	f0 91 66 03 	lds	r31, 0x0366
    250c:	23 81       	ldd	r18, Z+3	; 0x03
    250e:	21 ff       	sbrs	r18, 1
    2510:	1b c0       	rjmp	.+54     	; 0x2548 <puts+0x4c>
    2512:	8c 01       	movw	r16, r24
    2514:	d0 e0       	ldi	r29, 0x00	; 0
    2516:	c0 e0       	ldi	r28, 0x00	; 0
    2518:	f8 01       	movw	r30, r16
    251a:	81 91       	ld	r24, Z+
    251c:	8f 01       	movw	r16, r30
    251e:	60 91 65 03 	lds	r22, 0x0365
    2522:	70 91 66 03 	lds	r23, 0x0366
    2526:	db 01       	movw	r26, r22
    2528:	18 96       	adiw	r26, 0x08	; 8
    252a:	ed 91       	ld	r30, X+
    252c:	fc 91       	ld	r31, X
    252e:	19 97       	sbiw	r26, 0x09	; 9
    2530:	88 23       	and	r24, r24
    2532:	31 f0       	breq	.+12     	; 0x2540 <puts+0x44>
    2534:	09 95       	icall
    2536:	89 2b       	or	r24, r25
    2538:	79 f3       	breq	.-34     	; 0x2518 <puts+0x1c>
    253a:	df ef       	ldi	r29, 0xFF	; 255
    253c:	cf ef       	ldi	r28, 0xFF	; 255
    253e:	ec cf       	rjmp	.-40     	; 0x2518 <puts+0x1c>
    2540:	8a e0       	ldi	r24, 0x0A	; 10
    2542:	09 95       	icall
    2544:	89 2b       	or	r24, r25
    2546:	19 f0       	breq	.+6      	; 0x254e <puts+0x52>
    2548:	8f ef       	ldi	r24, 0xFF	; 255
    254a:	9f ef       	ldi	r25, 0xFF	; 255
    254c:	02 c0       	rjmp	.+4      	; 0x2552 <puts+0x56>
    254e:	8d 2f       	mov	r24, r29
    2550:	9c 2f       	mov	r25, r28
    2552:	df 91       	pop	r29
    2554:	cf 91       	pop	r28
    2556:	1f 91       	pop	r17
    2558:	0f 91       	pop	r16
    255a:	08 95       	ret

0000255c <sprintf>:
    255c:	ae e0       	ldi	r26, 0x0E	; 14
    255e:	b0 e0       	ldi	r27, 0x00	; 0
    2560:	e4 eb       	ldi	r30, 0xB4	; 180
    2562:	f2 e1       	ldi	r31, 0x12	; 18
    2564:	0c 94 19 11 	jmp	0x2232	; 0x2232 <__prologue_saves__+0x1c>
    2568:	0d 89       	ldd	r16, Y+21	; 0x15
    256a:	1e 89       	ldd	r17, Y+22	; 0x16
    256c:	86 e0       	ldi	r24, 0x06	; 6
    256e:	8c 83       	std	Y+4, r24	; 0x04
    2570:	1a 83       	std	Y+2, r17	; 0x02
    2572:	09 83       	std	Y+1, r16	; 0x01
    2574:	8f ef       	ldi	r24, 0xFF	; 255
    2576:	9f e7       	ldi	r25, 0x7F	; 127
    2578:	9e 83       	std	Y+6, r25	; 0x06
    257a:	8d 83       	std	Y+5, r24	; 0x05
    257c:	ae 01       	movw	r20, r28
    257e:	47 5e       	subi	r20, 0xE7	; 231
    2580:	5f 4f       	sbci	r21, 0xFF	; 255
    2582:	6f 89       	ldd	r22, Y+23	; 0x17
    2584:	78 8d       	ldd	r23, Y+24	; 0x18
    2586:	ce 01       	movw	r24, r28
    2588:	01 96       	adiw	r24, 0x01	; 1
    258a:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <vfprintf>
    258e:	2f 81       	ldd	r18, Y+7	; 0x07
    2590:	38 85       	ldd	r19, Y+8	; 0x08
    2592:	f8 01       	movw	r30, r16
    2594:	e2 0f       	add	r30, r18
    2596:	f3 1f       	adc	r31, r19
    2598:	10 82       	st	Z, r1
    259a:	2e 96       	adiw	r28, 0x0e	; 14
    259c:	e4 e0       	ldi	r30, 0x04	; 4
    259e:	0c 94 35 11 	jmp	0x226a	; 0x226a <__epilogue_restores__+0x1c>

000025a2 <__ultoa_invert>:
    25a2:	fa 01       	movw	r30, r20
    25a4:	aa 27       	eor	r26, r26
    25a6:	28 30       	cpi	r18, 0x08	; 8
    25a8:	51 f1       	breq	.+84     	; 0x25fe <__ultoa_invert+0x5c>
    25aa:	20 31       	cpi	r18, 0x10	; 16
    25ac:	81 f1       	breq	.+96     	; 0x260e <__ultoa_invert+0x6c>
    25ae:	e8 94       	clt
    25b0:	6f 93       	push	r22
    25b2:	6e 7f       	andi	r22, 0xFE	; 254
    25b4:	6e 5f       	subi	r22, 0xFE	; 254
    25b6:	7f 4f       	sbci	r23, 0xFF	; 255
    25b8:	8f 4f       	sbci	r24, 0xFF	; 255
    25ba:	9f 4f       	sbci	r25, 0xFF	; 255
    25bc:	af 4f       	sbci	r26, 0xFF	; 255
    25be:	b1 e0       	ldi	r27, 0x01	; 1
    25c0:	3e d0       	rcall	.+124    	; 0x263e <__ultoa_invert+0x9c>
    25c2:	b4 e0       	ldi	r27, 0x04	; 4
    25c4:	3c d0       	rcall	.+120    	; 0x263e <__ultoa_invert+0x9c>
    25c6:	67 0f       	add	r22, r23
    25c8:	78 1f       	adc	r23, r24
    25ca:	89 1f       	adc	r24, r25
    25cc:	9a 1f       	adc	r25, r26
    25ce:	a1 1d       	adc	r26, r1
    25d0:	68 0f       	add	r22, r24
    25d2:	79 1f       	adc	r23, r25
    25d4:	8a 1f       	adc	r24, r26
    25d6:	91 1d       	adc	r25, r1
    25d8:	a1 1d       	adc	r26, r1
    25da:	6a 0f       	add	r22, r26
    25dc:	71 1d       	adc	r23, r1
    25de:	81 1d       	adc	r24, r1
    25e0:	91 1d       	adc	r25, r1
    25e2:	a1 1d       	adc	r26, r1
    25e4:	20 d0       	rcall	.+64     	; 0x2626 <__ultoa_invert+0x84>
    25e6:	09 f4       	brne	.+2      	; 0x25ea <__ultoa_invert+0x48>
    25e8:	68 94       	set
    25ea:	3f 91       	pop	r19
    25ec:	2a e0       	ldi	r18, 0x0A	; 10
    25ee:	26 9f       	mul	r18, r22
    25f0:	11 24       	eor	r1, r1
    25f2:	30 19       	sub	r19, r0
    25f4:	30 5d       	subi	r19, 0xD0	; 208
    25f6:	31 93       	st	Z+, r19
    25f8:	de f6       	brtc	.-74     	; 0x25b0 <__ultoa_invert+0xe>
    25fa:	cf 01       	movw	r24, r30
    25fc:	08 95       	ret
    25fe:	46 2f       	mov	r20, r22
    2600:	47 70       	andi	r20, 0x07	; 7
    2602:	40 5d       	subi	r20, 0xD0	; 208
    2604:	41 93       	st	Z+, r20
    2606:	b3 e0       	ldi	r27, 0x03	; 3
    2608:	0f d0       	rcall	.+30     	; 0x2628 <__ultoa_invert+0x86>
    260a:	c9 f7       	brne	.-14     	; 0x25fe <__ultoa_invert+0x5c>
    260c:	f6 cf       	rjmp	.-20     	; 0x25fa <__ultoa_invert+0x58>
    260e:	46 2f       	mov	r20, r22
    2610:	4f 70       	andi	r20, 0x0F	; 15
    2612:	40 5d       	subi	r20, 0xD0	; 208
    2614:	4a 33       	cpi	r20, 0x3A	; 58
    2616:	18 f0       	brcs	.+6      	; 0x261e <__ultoa_invert+0x7c>
    2618:	49 5d       	subi	r20, 0xD9	; 217
    261a:	31 fd       	sbrc	r19, 1
    261c:	40 52       	subi	r20, 0x20	; 32
    261e:	41 93       	st	Z+, r20
    2620:	02 d0       	rcall	.+4      	; 0x2626 <__ultoa_invert+0x84>
    2622:	a9 f7       	brne	.-22     	; 0x260e <__ultoa_invert+0x6c>
    2624:	ea cf       	rjmp	.-44     	; 0x25fa <__ultoa_invert+0x58>
    2626:	b4 e0       	ldi	r27, 0x04	; 4
    2628:	a6 95       	lsr	r26
    262a:	97 95       	ror	r25
    262c:	87 95       	ror	r24
    262e:	77 95       	ror	r23
    2630:	67 95       	ror	r22
    2632:	ba 95       	dec	r27
    2634:	c9 f7       	brne	.-14     	; 0x2628 <__ultoa_invert+0x86>
    2636:	00 97       	sbiw	r24, 0x00	; 0
    2638:	61 05       	cpc	r22, r1
    263a:	71 05       	cpc	r23, r1
    263c:	08 95       	ret
    263e:	9b 01       	movw	r18, r22
    2640:	ac 01       	movw	r20, r24
    2642:	0a 2e       	mov	r0, r26
    2644:	06 94       	lsr	r0
    2646:	57 95       	ror	r21
    2648:	47 95       	ror	r20
    264a:	37 95       	ror	r19
    264c:	27 95       	ror	r18
    264e:	ba 95       	dec	r27
    2650:	c9 f7       	brne	.-14     	; 0x2644 <__ultoa_invert+0xa2>
    2652:	62 0f       	add	r22, r18
    2654:	73 1f       	adc	r23, r19
    2656:	84 1f       	adc	r24, r20
    2658:	95 1f       	adc	r25, r21
    265a:	a0 1d       	adc	r26, r0
    265c:	08 95       	ret

0000265e <_exit>:
    265e:	f8 94       	cli

00002660 <__stop_program>:
    2660:	ff cf       	rjmp	.-2      	; 0x2660 <__stop_program>
