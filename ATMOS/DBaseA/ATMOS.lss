
ATMOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000018c  00800200  00002cc2  00002d56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002cc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000047f  0080038c  0080038c  00002ee2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002ee2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f40  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000660  00000000  00000000  00002f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007195  00000000  00000000  000035e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000289b  00000000  00000000  0000a775  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000232f  00000000  00000000  0000d010  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f50  00000000  00000000  0000f340  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001f2f  00000000  00000000  00010290  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003cab  00000000  00000000  000121bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000690  00000000  00000000  00015e6a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__ctors_end>
       4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      10:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      14:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      18:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      1c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      20:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      24:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      28:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      30:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      34:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <__vector_13>
      38:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      3c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      40:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      44:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      48:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      4c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      50:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      54:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      58:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      5c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      60:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      64:	0c 94 22 07 	jmp	0xe44	; 0xe44 <__vector_25>
      68:	0c 94 0a 07 	jmp	0xe14	; 0xe14 <__vector_26>
      6c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      70:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      74:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      78:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      7c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      80:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      84:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      88:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      8c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      90:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      94:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      98:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      9c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a8:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <__vector_42>
      ac:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      bc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      cc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      dc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      ec:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      fc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     100:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     104:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     108:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     10c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     110:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     114:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     118:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     11c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     120:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     124:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     128:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     12c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     130:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>

00000134 <__trampolines_end>:
     134:	6e 61       	ori	r22, 0x1E	; 30
     136:	6e 00       	.word	0x006e	; ????

00000138 <__c.2177>:
     138:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     148:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     158:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     168:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     178:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     188:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     198:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     208:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     218:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     228:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000236 <__ctors_end>:
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	d1 e2       	ldi	r29, 0x21	; 33
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61

00000242 <__do_copy_data>:
     242:	13 e0       	ldi	r17, 0x03	; 3
     244:	a0 e0       	ldi	r26, 0x00	; 0
     246:	b2 e0       	ldi	r27, 0x02	; 2
     248:	e2 ec       	ldi	r30, 0xC2	; 194
     24a:	fc e2       	ldi	r31, 0x2C	; 44
     24c:	02 c0       	rjmp	.+4      	; 0x252 <__do_copy_data+0x10>
     24e:	05 90       	lpm	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	ac 38       	cpi	r26, 0x8C	; 140
     254:	b1 07       	cpc	r27, r17
     256:	d9 f7       	brne	.-10     	; 0x24e <__do_copy_data+0xc>

00000258 <__do_clear_bss>:
     258:	28 e0       	ldi	r18, 0x08	; 8
     25a:	ac e8       	ldi	r26, 0x8C	; 140
     25c:	b3 e0       	ldi	r27, 0x03	; 3
     25e:	01 c0       	rjmp	.+2      	; 0x262 <.do_clear_bss_start>

00000260 <.do_clear_bss_loop>:
     260:	1d 92       	st	X+, r1

00000262 <.do_clear_bss_start>:
     262:	ab 30       	cpi	r26, 0x0B	; 11
     264:	b2 07       	cpc	r27, r18
     266:	e1 f7       	brne	.-8      	; 0x260 <.do_clear_bss_loop>
     268:	0e 94 3a 01 	call	0x274	; 0x274 <main>
     26c:	0c 94 5f 16 	jmp	0x2cbe	; 0x2cbe <_exit>

00000270 <__bad_interrupt>:
     270:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000274 <main>:
  {
    //SYS_TaskHandler(); //Commented out until wireless hardware is tuned
    APP_TaskHandler();
  }
  */
  SYS_Init(); //Commented out until wireless hardware is tuned
     274:	0e 94 0e 0f 	call	0x1e1c	; 0x1e1c <SYS_Init>
	if(ref[j]==0) return 100;
	return j;
}

static void APP_Init(void){
	PWR_Init();
     278:	0e 94 af 04 	call	0x95e	; 0x95e <PWR_Init>
	PWR_TurnOn5V();
     27c:	0e 94 b3 04 	call	0x966	; 0x966 <PWR_TurnOn5V>
	USART0_Init(76800);
     280:	60 e0       	ldi	r22, 0x00	; 0
     282:	7c e2       	ldi	r23, 0x2C	; 44
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <USART0_Init>
	DDRB |= 0b00010000;
     28c:	24 9a       	sbi	0x04, 4	; 4
	DDRE |= 0b00001000;
     28e:	6b 9a       	sbi	0x0d, 3	; 13
	PORTE|= 0b00001000;
     290:	73 9a       	sbi	0x0e, 3	; 14
	TWI_Init(10000);
     292:	60 e1       	ldi	r22, 0x10	; 16
     294:	77 e2       	ldi	r23, 0x27	; 39
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 b9 04 	call	0x972	; 0x972 <TWI_Init>
	ADC_Init();
     29e:	0e 94 a3 04 	call	0x946	; 0x946 <ADC_Init>
	TGS2600_Init();
     2a2:	0e 94 9f 04 	call	0x93e	; 0x93e <TGS2600_Init>
	Si7020_init();
     2a6:	0e 94 9b 04 	call	0x936	; 0x936 <Si7020_init>
	printf("BMP280 Status %i\n", BMP280_Init());
     2aa:	0e 94 42 02 	call	0x484	; 0x484 <BMP280_Init>
     2ae:	1f 92       	push	r1
     2b0:	8f 93       	push	r24
     2b2:	82 e1       	ldi	r24, 0x12	; 18
     2b4:	92 e0       	ldi	r25, 0x02	; 2
     2b6:	9f 93       	push	r25
     2b8:	8f 93       	push	r24
     2ba:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <printf>
	BMP280_SetOversampling(4);
     2be:	84 e0       	ldi	r24, 0x04	; 4
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 22 03 	call	0x644	; 0x644 <BMP280_SetOversampling>
	SPI_SlaveInit();
     2c6:	0e 94 b5 04 	call	0x96a	; 0x96a <SPI_SlaveInit>
    APP_TaskHandler();
  }
  */
  SYS_Init(); //Commented out until wireless hardware is tuned
  APP_Init();
  printf("\n==========***==========\n");
     2ca:	84 e2       	ldi	r24, 0x24	; 36
     2cc:	92 e0       	ldi	r25, 0x02	; 2
     2ce:	0e 94 90 15 	call	0x2b20	; 0x2b20 <puts>
  LWMesh();
     2d2:	0e 94 cf 03 	call	0x79e	; 0x79e <LWMesh>
     2d6:	0f 90       	pop	r0
     2d8:	0f 90       	pop	r0
     2da:	0f 90       	pop	r0
     2dc:	0f 90       	pop	r0
}
     2de:	80 e0       	ldi	r24, 0x00	; 0
     2e0:	90 e0       	ldi	r25, 0x00	; 0
     2e2:	08 95       	ret

000002e4 <appCmdCheckPendingTable>:
}

/*************************************************************************//**
*****************************************************************************/
static void appCmdCheckPendingTable(void)
{
     2e4:	cf 92       	push	r12
     2e6:	df 92       	push	r13
     2e8:	ef 92       	push	r14
     2ea:	ff 92       	push	r15
     2ec:	0f 93       	push	r16
     2ee:	1f 93       	push	r17
     2f0:	cf 93       	push	r28
     2f2:	df 93       	push	r29
  if (appCmdInProgress)
     2f4:	80 91 9d 03 	lds	r24, 0x039D
     2f8:	90 91 9e 03 	lds	r25, 0x039E
     2fc:	89 2b       	or	r24, r25
     2fe:	79 f5       	brne	.+94     	; 0x35e <appCmdCheckPendingTable+0x7a>
     300:	0f e9       	ldi	r16, 0x9F	; 159
     302:	13 e0       	ldi	r17, 0x03	; 3
     304:	c3 ea       	ldi	r28, 0xA3	; 163
     306:	d3 e0       	ldi	r29, 0x03	; 3
     308:	0f 2e       	mov	r0, r31
     30a:	fc ec       	ldi	r31, 0xCC	; 204
     30c:	cf 2e       	mov	r12, r31
     30e:	f3 e0       	ldi	r31, 0x03	; 3
     310:	df 2e       	mov	r13, r31
     312:	f0 2d       	mov	r31, r0
*****************************************************************************/
static void appCmdDataRequest(AppCmdPendingTableEntry_t *entry)
{
  appCmdInProgress = entry;

  appCmdDataReq.dstAddr = entry->addr;
     314:	0f 2e       	mov	r0, r31
     316:	fc e8       	ldi	r31, 0x8C	; 140
     318:	ef 2e       	mov	r14, r31
     31a:	f3 e0       	ldi	r31, 0x03	; 3
     31c:	ff 2e       	mov	r15, r31
     31e:	f0 2d       	mov	r31, r0
     320:	fe 01       	movw	r30, r28
     322:	31 97       	sbiw	r30, 0x01	; 1
  if (appCmdInProgress)
    return;

  for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++)
  {
    if (appCmdPendingTable[i].ready)
     324:	90 81       	ld	r25, Z
     326:	99 23       	and	r25, r25
     328:	a1 f0       	breq	.+40     	; 0x352 <appCmdCheckPendingTable+0x6e>

/*************************************************************************//**
*****************************************************************************/
static void appCmdDataRequest(AppCmdPendingTableEntry_t *entry)
{
  appCmdInProgress = entry;
     32a:	10 93 9e 03 	sts	0x039E, r17
     32e:	00 93 9d 03 	sts	0x039D, r16

  appCmdDataReq.dstAddr = entry->addr;
     332:	f8 01       	movw	r30, r16
     334:	80 81       	ld	r24, Z
     336:	91 81       	ldd	r25, Z+1	; 0x01
     338:	f7 01       	movw	r30, r14
     33a:	96 83       	std	Z+6, r25	; 0x06
     33c:	85 83       	std	Z+5, r24	; 0x05
  appCmdDataReq.data = &entry->payload;
     33e:	d3 87       	std	Z+11, r29	; 0x0b
     340:	c2 87       	std	Z+10, r28	; 0x0a
     342:	fe 01       	movw	r30, r28
     344:	32 97       	sbiw	r30, 0x02	; 2
  appCmdDataReq.size = entry->size;
     346:	80 81       	ld	r24, Z
     348:	f7 01       	movw	r30, r14
     34a:	84 87       	std	Z+12, r24	; 0x0c
  NWK_DataReq(&appCmdDataReq);
     34c:	c7 01       	movw	r24, r14
     34e:	0e 94 e5 07 	call	0xfca	; 0xfca <NWK_DataReq>
     352:	07 5f       	subi	r16, 0xF7	; 247
     354:	1f 4f       	sbci	r17, 0xFF	; 255
     356:	29 96       	adiw	r28, 0x09	; 9
static void appCmdCheckPendingTable(void)
{
  if (appCmdInProgress)
    return;

  for (uint8_t i = 0; i < APP_CMD_PENDING_TABLE_SIZE; i++)
     358:	0c 15       	cp	r16, r12
     35a:	1d 05       	cpc	r17, r13
     35c:	09 f7       	brne	.-62     	; 0x320 <appCmdCheckPendingTable+0x3c>
  {
    if (appCmdPendingTable[i].ready)
      appCmdDataRequest(&appCmdPendingTable[i]);
  }
}
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	ff 90       	pop	r15
     368:	ef 90       	pop	r14
     36a:	df 90       	pop	r13
     36c:	cf 90       	pop	r12
     36e:	08 95       	ret

00000370 <APP_CommandsPending>:
*****************************************************************************/
bool APP_CommandsPending(uint16_t addr)
{
  for (uint8_t i = 1; i < APP_CMD_PENDING_TABLE_SIZE; i++)
  {
    if (addr == appCmdPendingTable[i].addr)
     370:	20 91 a8 03 	lds	r18, 0x03A8
     374:	30 91 a9 03 	lds	r19, 0x03A9
     378:	28 17       	cp	r18, r24
     37a:	39 07       	cpc	r19, r25
     37c:	f1 f0       	breq	.+60     	; 0x3ba <APP_CommandsPending+0x4a>
     37e:	20 91 b1 03 	lds	r18, 0x03B1
     382:	30 91 b2 03 	lds	r19, 0x03B2
     386:	28 17       	cp	r18, r24
     388:	39 07       	cpc	r19, r25
     38a:	89 f0       	breq	.+34     	; 0x3ae <APP_CommandsPending+0x3e>
     38c:	20 91 ba 03 	lds	r18, 0x03BA
     390:	30 91 bb 03 	lds	r19, 0x03BB
     394:	28 17       	cp	r18, r24
     396:	39 07       	cpc	r19, r25
     398:	69 f0       	breq	.+26     	; 0x3b4 <APP_CommandsPending+0x44>
     39a:	20 91 c3 03 	lds	r18, 0x03C3
     39e:	30 91 c4 03 	lds	r19, 0x03C4
     3a2:	28 17       	cp	r18, r24
     3a4:	39 07       	cpc	r19, r25
     3a6:	e9 f4       	brne	.+58     	; 0x3e2 <APP_CommandsPending+0x72>
     3a8:	84 e0       	ldi	r24, 0x04	; 4
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	08 c0       	rjmp	.+16     	; 0x3be <APP_CommandsPending+0x4e>
     3ae:	82 e0       	ldi	r24, 0x02	; 2
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	05 c0       	rjmp	.+10     	; 0x3be <APP_CommandsPending+0x4e>
     3b4:	83 e0       	ldi	r24, 0x03	; 3
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	02 c0       	rjmp	.+4      	; 0x3be <APP_CommandsPending+0x4e>
     3ba:	81 e0       	ldi	r24, 0x01	; 1
     3bc:	90 e0       	ldi	r25, 0x00	; 0
    {
      appCmdPendingTable[i].ready = true;
     3be:	fc 01       	movw	r30, r24
     3c0:	ee 0f       	add	r30, r30
     3c2:	ff 1f       	adc	r31, r31
     3c4:	ee 0f       	add	r30, r30
     3c6:	ff 1f       	adc	r31, r31
     3c8:	ee 0f       	add	r30, r30
     3ca:	ff 1f       	adc	r31, r31
     3cc:	8e 0f       	add	r24, r30
     3ce:	9f 1f       	adc	r25, r31
     3d0:	fc 01       	movw	r30, r24
     3d2:	e1 56       	subi	r30, 0x61	; 97
     3d4:	fc 4f       	sbci	r31, 0xFC	; 252
     3d6:	81 e0       	ldi	r24, 0x01	; 1
     3d8:	83 83       	std	Z+3, r24	; 0x03
      appCmdCheckPendingTable();
     3da:	0e 94 72 01 	call	0x2e4	; 0x2e4 <appCmdCheckPendingTable>
      return true;
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	08 95       	ret
    }
  }

  return false;
     3e2:	80 e0       	ldi	r24, 0x00	; 0
}
     3e4:	08 95       	ret

000003e6 <BMP280_ReadBytes>:
  @brief Reads some bytes from the BMP280
  @param[in] *values pointer to an array to store the bytes, put the starting register in values[0]
  @param[in] length how many bytes to read
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadBytes(unsigned char *values, char length){
     3e6:	1f 93       	push	r17
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	ec 01       	movw	r28, r24
     3ee:	16 2f       	mov	r17, r22
	//printf("BMP280_ReadBytes");
	//printf("0x%1x",(unsigned)TWI_BeginWrite(BMP280_ADDR));
	TWI_BeginWrite(BMP280_ADDR);
     3f0:	86 e7       	ldi	r24, 0x76	; 118
     3f2:	0e 94 e5 04 	call	0x9ca	; 0x9ca <TWI_BeginWrite>
	//printf("0x%1x",(unsigned)TWI_WriteByte(values[0]));
	TWI_WriteByte(values[0]);//Write the register address
     3f6:	88 81       	ld	r24, Y
     3f8:	0e 94 d7 04 	call	0x9ae	; 0x9ae <TWI_WriteByte>
	status = TWI_BeginRead(BMP280_ADDR); //Send a repeated start
     3fc:	86 e7       	ldi	r24, 0x76	; 118
     3fe:	0e 94 02 05 	call	0xa04	; 0xa04 <TWI_BeginRead>
     402:	80 93 cc 03 	sts	0x03CC, r24
	//printf("0x%1x",status);
	if (status == TWI_SLAR_ACK){
     406:	80 34       	cpi	r24, 0x40	; 64
     408:	81 f4       	brne	.+32     	; 0x42a <BMP280_ReadBytes+0x44>
		if(((TWI_Read(&values[0],length,false)&TWSR_MASK) == TWI_REC_NACK) && (TWI_Stop() != 0)) return(1); //Receive bytes, send a STOP bit, and check for success
     40a:	61 2f       	mov	r22, r17
     40c:	70 e0       	ldi	r23, 0x00	; 0
     40e:	40 e0       	ldi	r20, 0x00	; 0
     410:	ce 01       	movw	r24, r28
     412:	0e 94 3f 05 	call	0xa7e	; 0xa7e <TWI_Read>
     416:	88 7f       	andi	r24, 0xF8	; 248
     418:	88 35       	cpi	r24, 0x58	; 88
     41a:	49 f4       	brne	.+18     	; 0x42e <BMP280_ReadBytes+0x48>
     41c:	0e 94 3a 05 	call	0xa74	; 0xa74 <TWI_Stop>
     420:	91 e0       	ldi	r25, 0x01	; 1
     422:	81 11       	cpse	r24, r1
     424:	05 c0       	rjmp	.+10     	; 0x430 <BMP280_ReadBytes+0x4a>
     426:	90 e0       	ldi	r25, 0x00	; 0
     428:	03 c0       	rjmp	.+6      	; 0x430 <BMP280_ReadBytes+0x4a>
	}
	return(0);
     42a:	90 e0       	ldi	r25, 0x00	; 0
     42c:	01 c0       	rjmp	.+2      	; 0x430 <BMP280_ReadBytes+0x4a>
     42e:	90 e0       	ldi	r25, 0x00	; 0
}
     430:	89 2f       	mov	r24, r25
     432:	df 91       	pop	r29
     434:	cf 91       	pop	r28
     436:	1f 91       	pop	r17
     438:	08 95       	ret

0000043a <BMP280_ReadInt>:
  @brief Reads an int from the BMP280
  @param[in] address The register address of the first byte of the uint
  @param[out] val* A pointer to a uint to store the received data to
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadInt(char address, int *val){
     43a:	0f 93       	push	r16
     43c:	1f 93       	push	r17
     43e:	cf 93       	push	r28
     440:	df 93       	push	r29
     442:	00 d0       	rcall	.+0      	; 0x444 <BMP280_ReadInt+0xa>
     444:	cd b7       	in	r28, 0x3d	; 61
     446:	de b7       	in	r29, 0x3e	; 62
     448:	8b 01       	movw	r16, r22
	//printf("\nBMP280_ReadInt");
	unsigned char data[2];	//char is 4 bits, 1 byte

	data[0] = address;
     44a:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     44c:	62 e0       	ldi	r22, 0x02	; 2
     44e:	ce 01       	movw	r24, r28
     450:	01 96       	adiw	r24, 0x01	; 1
     452:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <BMP280_ReadBytes>
     456:	88 23       	and	r24, r24
     458:	59 f0       	breq	.+22     	; 0x470 <BMP280_ReadInt+0x36>
		*val = (((int)data[1]<<8)|(int)data[0]);
     45a:	8a 81       	ldd	r24, Y+2	; 0x02
     45c:	90 e0       	ldi	r25, 0x00	; 0
     45e:	98 2f       	mov	r25, r24
     460:	88 27       	eor	r24, r24
     462:	29 81       	ldd	r18, Y+1	; 0x01
     464:	82 2b       	or	r24, r18
     466:	f8 01       	movw	r30, r16
     468:	91 83       	std	Z+1, r25	; 0x01
     46a:	80 83       	st	Z, r24
		return(1);
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	03 c0       	rjmp	.+6      	; 0x476 <BMP280_ReadInt+0x3c>
	}
	*val = 0;
     470:	f8 01       	movw	r30, r16
     472:	11 82       	std	Z+1, r1	; 0x01
     474:	10 82       	st	Z, r1
	return(0);
}
     476:	0f 90       	pop	r0
     478:	0f 90       	pop	r0
     47a:	df 91       	pop	r29
     47c:	cf 91       	pop	r28
     47e:	1f 91       	pop	r17
     480:	0f 91       	pop	r16
     482:	08 95       	ret

00000484 <BMP280_Init>:

/*************************************************************************//**
  @brief Initializes the BMP280 and reads the calibration data from the device
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
char BMP280_Init(void){
     484:	cf 93       	push	r28
     486:	df 93       	push	r29
     488:	00 d0       	rcall	.+0      	; 0x48a <BMP280_Init+0x6>
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
     48e:	88 e8       	ldi	r24, 0x88	; 136
     490:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     492:	62 e0       	ldi	r22, 0x02	; 2
     494:	ce 01       	movw	r24, r28
     496:	01 96       	adiw	r24, 0x01	; 1
     498:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <BMP280_ReadBytes>
     49c:	88 23       	and	r24, r24
     49e:	99 f0       	breq	.+38     	; 0x4c6 <BMP280_Init+0x42>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     4a0:	8a 81       	ldd	r24, Y+2	; 0x02
     4a2:	90 e0       	ldi	r25, 0x00	; 0
     4a4:	98 2f       	mov	r25, r24
     4a6:	88 27       	eor	r24, r24
     4a8:	29 81       	ldd	r18, Y+1	; 0x01
     4aa:	82 2b       	or	r24, r18
     4ac:	90 93 d0 03 	sts	0x03D0, r25
     4b0:	80 93 cf 03 	sts	0x03CF, r24

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
     4b4:	65 ee       	ldi	r22, 0xE5	; 229
     4b6:	73 e0       	ldi	r23, 0x03	; 3
     4b8:	8a e8       	ldi	r24, 0x8A	; 138
     4ba:	0e 94 1d 02 	call	0x43a	; 0x43a <BMP280_ReadInt>
	// used in the calculations when taking measurements.

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
     4be:	88 23       	and	r24, r24
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <BMP280_Init+0x40>
     4c2:	bb c0       	rjmp	.+374    	; 0x63a <BMP280_Init+0x1b6>
     4c4:	05 c0       	rjmp	.+10     	; 0x4d0 <BMP280_Init+0x4c>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     4c6:	10 92 d0 03 	sts	0x03D0, r1
     4ca:	10 92 cf 03 	sts	0x03CF, r1
     4ce:	b5 c0       	rjmp	.+362    	; 0x63a <BMP280_Init+0x1b6>
	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
     4d0:	63 ee       	ldi	r22, 0xE3	; 227
     4d2:	73 e0       	ldi	r23, 0x03	; 3
     4d4:	8c e8       	ldi	r24, 0x8C	; 140
     4d6:	0e 94 1d 02 	call	0x43a	; 0x43a <BMP280_ReadInt>

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
     4da:	88 23       	and	r24, r24
     4dc:	09 f4       	brne	.+2      	; 0x4e0 <BMP280_Init+0x5c>
     4de:	ad c0       	rjmp	.+346    	; 0x63a <BMP280_Init+0x1b6>
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
     4e0:	8e e8       	ldi	r24, 0x8E	; 142
     4e2:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     4e4:	62 e0       	ldi	r22, 0x02	; 2
     4e6:	ce 01       	movw	r24, r28
     4e8:	01 96       	adiw	r24, 0x01	; 1
     4ea:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <BMP280_ReadBytes>
     4ee:	88 23       	and	r24, r24
     4f0:	99 f0       	breq	.+38     	; 0x518 <BMP280_Init+0x94>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     4f2:	8a 81       	ldd	r24, Y+2	; 0x02
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	98 2f       	mov	r25, r24
     4f8:	88 27       	eor	r24, r24
     4fa:	29 81       	ldd	r18, Y+1	; 0x01
     4fc:	82 2b       	or	r24, r18
     4fe:	90 93 d2 03 	sts	0x03D2, r25
     502:	80 93 d1 03 	sts	0x03D1, r24
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     506:	61 ee       	ldi	r22, 0xE1	; 225
     508:	73 e0       	ldi	r23, 0x03	; 3
     50a:	80 e9       	ldi	r24, 0x90	; 144
     50c:	0e 94 1d 02 	call	0x43a	; 0x43a <BMP280_ReadInt>
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
     510:	88 23       	and	r24, r24
     512:	09 f4       	brne	.+2      	; 0x516 <BMP280_Init+0x92>
     514:	92 c0       	rjmp	.+292    	; 0x63a <BMP280_Init+0x1b6>
     516:	05 c0       	rjmp	.+10     	; 0x522 <BMP280_Init+0x9e>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     518:	10 92 d2 03 	sts	0x03D2, r1
     51c:	10 92 d1 03 	sts	0x03D1, r1
     520:	8c c0       	rjmp	.+280    	; 0x63a <BMP280_Init+0x1b6>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     522:	6f ed       	ldi	r22, 0xDF	; 223
     524:	73 e0       	ldi	r23, 0x03	; 3
     526:	82 e9       	ldi	r24, 0x92	; 146
     528:	0e 94 1d 02 	call	0x43a	; 0x43a <BMP280_ReadInt>
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     52c:	88 23       	and	r24, r24
     52e:	09 f4       	brne	.+2      	; 0x532 <BMP280_Init+0xae>
     530:	84 c0       	rjmp	.+264    	; 0x63a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     532:	6d ed       	ldi	r22, 0xDD	; 221
     534:	73 e0       	ldi	r23, 0x03	; 3
     536:	84 e9       	ldi	r24, 0x94	; 148
     538:	0e 94 1d 02 	call	0x43a	; 0x43a <BMP280_ReadInt>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     53c:	88 23       	and	r24, r24
     53e:	09 f4       	brne	.+2      	; 0x542 <BMP280_Init+0xbe>
     540:	7c c0       	rjmp	.+248    	; 0x63a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     542:	6b ed       	ldi	r22, 0xDB	; 219
     544:	73 e0       	ldi	r23, 0x03	; 3
     546:	86 e9       	ldi	r24, 0x96	; 150
     548:	0e 94 1d 02 	call	0x43a	; 0x43a <BMP280_ReadInt>
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     54c:	88 23       	and	r24, r24
     54e:	09 f4       	brne	.+2      	; 0x552 <BMP280_Init+0xce>
     550:	74 c0       	rjmp	.+232    	; 0x63a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     552:	69 ed       	ldi	r22, 0xD9	; 217
     554:	73 e0       	ldi	r23, 0x03	; 3
     556:	88 e9       	ldi	r24, 0x98	; 152
     558:	0e 94 1d 02 	call	0x43a	; 0x43a <BMP280_ReadInt>
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     55c:	88 23       	and	r24, r24
     55e:	09 f4       	brne	.+2      	; 0x562 <BMP280_Init+0xde>
     560:	6c c0       	rjmp	.+216    	; 0x63a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     562:	67 ed       	ldi	r22, 0xD7	; 215
     564:	73 e0       	ldi	r23, 0x03	; 3
     566:	8a e9       	ldi	r24, 0x9A	; 154
     568:	0e 94 1d 02 	call	0x43a	; 0x43a <BMP280_ReadInt>
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     56c:	88 23       	and	r24, r24
     56e:	09 f4       	brne	.+2      	; 0x572 <BMP280_Init+0xee>
     570:	64 c0       	rjmp	.+200    	; 0x63a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     572:	65 ed       	ldi	r22, 0xD5	; 213
     574:	73 e0       	ldi	r23, 0x03	; 3
     576:	8c e9       	ldi	r24, 0x9C	; 156
     578:	0e 94 1d 02 	call	0x43a	; 0x43a <BMP280_ReadInt>
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     57c:	88 23       	and	r24, r24
     57e:	09 f4       	brne	.+2      	; 0x582 <BMP280_Init+0xfe>
     580:	5c c0       	rjmp	.+184    	; 0x63a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9C, &dig_P8)  &&
		BMP280_ReadInt(0x9E, &dig_P9)){
     582:	63 ed       	ldi	r22, 0xD3	; 211
     584:	73 e0       	ldi	r23, 0x03	; 3
     586:	8e e9       	ldi	r24, 0x9E	; 158
     588:	0e 94 1d 02 	call	0x43a	; 0x43a <BMP280_ReadInt>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     58c:	88 23       	and	r24, r24
     58e:	09 f4       	brne	.+2      	; 0x592 <BMP280_Init+0x10e>
     590:	54 c0       	rjmp	.+168    	; 0x63a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9E, &dig_P9)){
			printf("\nT: %i ,%i ,%i P: %i ,%i ,%i ,%i ,%i ,%i ,%i ,%1 ,%i \n",dig_T1,dig_T2,dig_T3,dig_P1,dig_P2,dig_P3,dig_P4,dig_P5,dig_P6,dig_P7,dig_P8,dig_P9);
     592:	80 91 d4 03 	lds	r24, 0x03D4
     596:	8f 93       	push	r24
     598:	80 91 d3 03 	lds	r24, 0x03D3
     59c:	8f 93       	push	r24
     59e:	80 91 d6 03 	lds	r24, 0x03D6
     5a2:	8f 93       	push	r24
     5a4:	80 91 d5 03 	lds	r24, 0x03D5
     5a8:	8f 93       	push	r24
     5aa:	80 91 d8 03 	lds	r24, 0x03D8
     5ae:	8f 93       	push	r24
     5b0:	80 91 d7 03 	lds	r24, 0x03D7
     5b4:	8f 93       	push	r24
     5b6:	80 91 da 03 	lds	r24, 0x03DA
     5ba:	8f 93       	push	r24
     5bc:	80 91 d9 03 	lds	r24, 0x03D9
     5c0:	8f 93       	push	r24
     5c2:	80 91 dc 03 	lds	r24, 0x03DC
     5c6:	8f 93       	push	r24
     5c8:	80 91 db 03 	lds	r24, 0x03DB
     5cc:	8f 93       	push	r24
     5ce:	80 91 de 03 	lds	r24, 0x03DE
     5d2:	8f 93       	push	r24
     5d4:	80 91 dd 03 	lds	r24, 0x03DD
     5d8:	8f 93       	push	r24
     5da:	80 91 e0 03 	lds	r24, 0x03E0
     5de:	8f 93       	push	r24
     5e0:	80 91 df 03 	lds	r24, 0x03DF
     5e4:	8f 93       	push	r24
     5e6:	80 91 e2 03 	lds	r24, 0x03E2
     5ea:	8f 93       	push	r24
     5ec:	80 91 e1 03 	lds	r24, 0x03E1
     5f0:	8f 93       	push	r24
     5f2:	80 91 d2 03 	lds	r24, 0x03D2
     5f6:	8f 93       	push	r24
     5f8:	80 91 d1 03 	lds	r24, 0x03D1
     5fc:	8f 93       	push	r24
     5fe:	80 91 e4 03 	lds	r24, 0x03E4
     602:	8f 93       	push	r24
     604:	80 91 e3 03 	lds	r24, 0x03E3
     608:	8f 93       	push	r24
     60a:	80 91 e6 03 	lds	r24, 0x03E6
     60e:	8f 93       	push	r24
     610:	80 91 e5 03 	lds	r24, 0x03E5
     614:	8f 93       	push	r24
     616:	80 91 d0 03 	lds	r24, 0x03D0
     61a:	8f 93       	push	r24
     61c:	80 91 cf 03 	lds	r24, 0x03CF
     620:	8f 93       	push	r24
     622:	8d e3       	ldi	r24, 0x3D	; 61
     624:	92 e0       	ldi	r25, 0x02	; 2
     626:	9f 93       	push	r25
     628:	8f 93       	push	r24
     62a:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <printf>
		return (1);
     62e:	0f b6       	in	r0, 0x3f	; 63
     630:	f8 94       	cli
     632:	de bf       	out	0x3e, r29	; 62
     634:	0f be       	out	0x3f, r0	; 63
     636:	cd bf       	out	0x3d, r28	; 61
     638:	81 e0       	ldi	r24, 0x01	; 1
	}
	else 
		return (0);
}
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	df 91       	pop	r29
     640:	cf 91       	pop	r28
     642:	08 95       	ret

00000644 <BMP280_SetOversampling>:
  @brief Sets the oversampling setting for the library
  @param[in] oss Oversampling setting
  @return 1
*****************************************************************************/
char BMP280_SetOversampling(short oss){
	oversampling = oss;
     644:	90 93 ce 03 	sts	0x03CE, r25
     648:	80 93 cd 03 	sts	0x03CD, r24
	return (1);
}
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	08 95       	ret

00000650 <appDataSendingTimerHandler>:

/******************************************************************************//**
**********************************************************************************/
static void appDataSendingTimerHandler(SYS_Timer_t *timer)
{
	if (APP_STATE_WAIT_SEND_TIMER == appState) {
     650:	80 91 1d 04 	lds	r24, 0x041D
     654:	84 30       	cpi	r24, 0x04	; 4
     656:	41 f4       	brne	.+16     	; 0x668 <appDataSendingTimerHandler+0x18>
		appState = APP_STATE_SEND;
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	80 93 1d 04 	sts	0x041D, r24
		printf("State: APP_STATE_SEND\n");
     65e:	84 e7       	ldi	r24, 0x74	; 116
     660:	92 e0       	ldi	r25, 0x02	; 2
     662:	0e 94 90 15 	call	0x2b20	; 0x2b20 <puts>
     666:	08 95       	ret
	} else {
		SYS_TimerStart(&appDataSendingTimer);
     668:	87 ee       	ldi	r24, 0xE7	; 231
     66a:	93 e0       	ldi	r25, 0x03	; 3
     66c:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <SYS_TimerStart>
		printf("Restart system sending timer.\n");
     670:	8a e8       	ldi	r24, 0x8A	; 138
     672:	92 e0       	ldi	r25, 0x02	; 2
     674:	0e 94 90 15 	call	0x2b20	; 0x2b20 <puts>
     678:	08 95       	ret

0000067a <appUartSendMessage>:
	#endif
}

/*************************************************************************//**
*****************************************************************************/
static void appUartSendMessage(uint8_t *data, uint8_t size) {
     67a:	cf 92       	push	r12
     67c:	df 92       	push	r13
     67e:	ef 92       	push	r14
     680:	ff 92       	push	r15
     682:	0f 93       	push	r16
     684:	1f 93       	push	r17
     686:	cf 93       	push	r28
     688:	df 93       	push	r29
     68a:	7c 01       	movw	r14, r24
     68c:	16 2f       	mov	r17, r22
	// TODO
	  uint8_t cs = 0;

	  HAL_UartWriteByte(0x10);
     68e:	80 e1       	ldi	r24, 0x10	; 16
     690:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <HAL_UartWriteByte>
	  HAL_UartWriteByte(0x02);
     694:	82 e0       	ldi	r24, 0x02	; 2
     696:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <HAL_UartWriteByte>

	  for (uint8_t i = 0; i < size; i++)
     69a:	11 23       	and	r17, r17
     69c:	f9 f0       	breq	.+62     	; 0x6dc <appUartSendMessage+0x62>
     69e:	e7 01       	movw	r28, r14
     6a0:	11 50       	subi	r17, 0x01	; 1
     6a2:	c1 2e       	mov	r12, r17
     6a4:	d1 2c       	mov	r13, r1
     6a6:	8f ef       	ldi	r24, 0xFF	; 255
     6a8:	c8 1a       	sub	r12, r24
     6aa:	d8 0a       	sbc	r13, r24
     6ac:	ce 0c       	add	r12, r14
     6ae:	df 1c       	adc	r13, r15
     6b0:	f1 2c       	mov	r15, r1
     6b2:	8e 01       	movw	r16, r28
	  {
		  if (data[i] == 0x10)
     6b4:	98 81       	ld	r25, Y
     6b6:	90 31       	cpi	r25, 0x10	; 16
     6b8:	29 f4       	brne	.+10     	; 0x6c4 <appUartSendMessage+0x4a>
		  {
			  HAL_UartWriteByte(0x10);
     6ba:	80 e1       	ldi	r24, 0x10	; 16
     6bc:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <HAL_UartWriteByte>
			  cs += 0x10;
     6c0:	e0 e1       	ldi	r30, 0x10	; 16
     6c2:	fe 0e       	add	r15, r30
		  }
		  HAL_UartWriteByte(data[i]);
     6c4:	f8 01       	movw	r30, r16
     6c6:	80 81       	ld	r24, Z
     6c8:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <HAL_UartWriteByte>
     6cc:	21 96       	adiw	r28, 0x01	; 1
		  cs += data[i];
     6ce:	f8 01       	movw	r30, r16
     6d0:	90 81       	ld	r25, Z
     6d2:	f9 0e       	add	r15, r25
	  uint8_t cs = 0;

	  HAL_UartWriteByte(0x10);
	  HAL_UartWriteByte(0x02);

	  for (uint8_t i = 0; i < size; i++)
     6d4:	cc 15       	cp	r28, r12
     6d6:	dd 05       	cpc	r29, r13
     6d8:	61 f7       	brne	.-40     	; 0x6b2 <appUartSendMessage+0x38>
     6da:	01 c0       	rjmp	.+2      	; 0x6de <appUartSendMessage+0x64>

/*************************************************************************//**
*****************************************************************************/
static void appUartSendMessage(uint8_t *data, uint8_t size) {
	// TODO
	  uint8_t cs = 0;
     6dc:	f1 2c       	mov	r15, r1
		  }
		  HAL_UartWriteByte(data[i]);
		  cs += data[i];
	  }

	  HAL_UartWriteByte(0x10);
     6de:	80 e1       	ldi	r24, 0x10	; 16
     6e0:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <HAL_UartWriteByte>
	  HAL_UartWriteByte(0x03);
     6e4:	83 e0       	ldi	r24, 0x03	; 3
     6e6:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <HAL_UartWriteByte>
	  cs += 0x10 + 0x02 + 0x10 + 0x03;

	  HAL_UartWriteByte(cs);
     6ea:	85 e2       	ldi	r24, 0x25	; 37
     6ec:	8f 0d       	add	r24, r15
     6ee:	0e 94 e3 06 	call	0xdc6	; 0xdc6 <HAL_UartWriteByte>
}
     6f2:	df 91       	pop	r29
     6f4:	cf 91       	pop	r28
     6f6:	1f 91       	pop	r17
     6f8:	0f 91       	pop	r16
     6fa:	ff 90       	pop	r15
     6fc:	ef 90       	pop	r14
     6fe:	df 90       	pop	r13
     700:	cf 90       	pop	r12
     702:	08 95       	ret

00000704 <appDataInd>:



//====  Receive Data =====
static bool appDataInd(NWK_DataInd_t *ind)
{
     704:	0f 93       	push	r16
     706:	1f 93       	push	r17
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	8c 01       	movw	r16, r24
	/* TODO
	if (!appReadyToReceive)
	return false;
	*/
	printf("appDataInd is called.\n");
     70e:	88 ea       	ldi	r24, 0xA8	; 168
     710:	92 e0       	ldi	r25, 0x02	; 2
     712:	0e 94 90 15 	call	0x2b20	; 0x2b20 <puts>
	AppMessage_t *msg = (AppMessage_t *)ind->data;
     716:	f8 01       	movw	r30, r16
     718:	c7 81       	ldd	r28, Z+7	; 0x07
     71a:	d0 85       	ldd	r29, Z+8	; 0x08
	
	msg->lqi	= ind->lqi;
     71c:	82 85       	ldd	r24, Z+10	; 0x0a
     71e:	88 8b       	std	Y+16, r24	; 0x10
	msg->rssi	= ind->rssi;
     720:	83 85       	ldd	r24, Z+11	; 0x0b
     722:	89 8b       	std	Y+17, r24	; 0x11
	appUartSendMessage(ind->data, ind->size);
     724:	61 85       	ldd	r22, Z+9	; 0x09
     726:	87 81       	ldd	r24, Z+7	; 0x07
     728:	90 85       	ldd	r25, Z+8	; 0x08
     72a:	0e 94 3d 03 	call	0x67a	; 0x67a <appUartSendMessage>
	
	if (APP_CommandsPending(ind->srcAddr)) {
     72e:	f8 01       	movw	r30, r16
     730:	80 81       	ld	r24, Z
     732:	91 81       	ldd	r25, Z+1	; 0x01
     734:	0e 94 b8 01 	call	0x370	; 0x370 <APP_CommandsPending>
     738:	88 23       	and	r24, r24
     73a:	19 f0       	breq	.+6      	; 0x742 <appDataInd+0x3e>
		NWK_SetAckControl(APP_COMMAND_PENDING); // APP_DO_NOT_SLEEP
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	0e 94 a5 09 	call	0x134a	; 0x134a <NWK_SetAckControl>
	}
	
	printf("Receiving: temperature is %ld (0x%x)\n", msg->sensors.temperature, (unsigned int)msg->sensors.temperature);
     742:	88 8d       	ldd	r24, Y+24	; 0x18
     744:	99 8d       	ldd	r25, Y+25	; 0x19
     746:	2a 8d       	ldd	r18, Y+26	; 0x1a
     748:	3b 8d       	ldd	r19, Y+27	; 0x1b
     74a:	9f 93       	push	r25
     74c:	8f 93       	push	r24
     74e:	3f 93       	push	r19
     750:	2f 93       	push	r18
     752:	9f 93       	push	r25
     754:	8f 93       	push	r24
     756:	8e eb       	ldi	r24, 0xBE	; 190
     758:	92 e0       	ldi	r25, 0x02	; 2
     75a:	9f 93       	push	r25
     75c:	8f 93       	push	r24
     75e:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <printf>
	printf("Receiving: battery is %ld (0x%x)\n", msg->sensors.battery, (unsigned int)msg->sensors.battery);
     762:	8c 89       	ldd	r24, Y+20	; 0x14
     764:	9d 89       	ldd	r25, Y+21	; 0x15
     766:	2e 89       	ldd	r18, Y+22	; 0x16
     768:	3f 89       	ldd	r19, Y+23	; 0x17
     76a:	9f 93       	push	r25
     76c:	8f 93       	push	r24
     76e:	3f 93       	push	r19
     770:	2f 93       	push	r18
     772:	9f 93       	push	r25
     774:	8f 93       	push	r24
     776:	84 ee       	ldi	r24, 0xE4	; 228
     778:	92 e0       	ldi	r25, 0x02	; 2
     77a:	9f 93       	push	r25
     77c:	8f 93       	push	r24
     77e:	0e 94 7a 15 	call	0x2af4	; 0x2af4 <printf>
	
	return true;
     782:	8d b7       	in	r24, 0x3d	; 61
     784:	9e b7       	in	r25, 0x3e	; 62
     786:	40 96       	adiw	r24, 0x10	; 16
     788:	0f b6       	in	r0, 0x3f	; 63
     78a:	f8 94       	cli
     78c:	9e bf       	out	0x3e, r25	; 62
     78e:	0f be       	out	0x3f, r0	; 63
     790:	8d bf       	out	0x3d, r24	; 61
}
     792:	81 e0       	ldi	r24, 0x01	; 1
     794:	df 91       	pop	r29
     796:	cf 91       	pop	r28
     798:	1f 91       	pop	r17
     79a:	0f 91       	pop	r16
     79c:	08 95       	ret

0000079e <LWMesh>:


/******************************************************************************//**
**********************************************************************************/
int LWMesh(void) {
	printf("Light weight mesh started.\n");
     79e:	86 e0       	ldi	r24, 0x06	; 6
     7a0:	93 e0       	ldi	r25, 0x03	; 3
     7a2:	0e 94 90 15 	call	0x2b20	; 0x2b20 <puts>
	//SYS_Init();
	HAL_UartInit(76800);
     7a6:	60 e0       	ldi	r22, 0x00	; 0
     7a8:	7c e2       	ldi	r23, 0x2C	; 44
     7aa:	81 e0       	ldi	r24, 0x01	; 1
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	0e 94 8e 06 	call	0xd1c	; 0xd1c <HAL_UartInit>
		{
			NWK_WakeupReq();
			//HAL_LedInit();
			//HAL_LedOn(APP_LED_NETWORK);
				
			appState = APP_STATE_SEND;
     7b2:	33 24       	eor	r3, r3
     7b4:	33 94       	inc	r3


/*- Implementations -------------------------------------------------------------*/
static void appInit(void) {
	printf("State: APP_STATE_INITIAL\n");
	appMsg.nodeType			= APP_NODE_TYPE;
     7b6:	c4 ef       	ldi	r28, 0xF4	; 244
     7b8:	d3 e0       	ldi	r29, 0x03	; 3
	appMsg.shortAddr		= APP_ADDR;
	appMsg.extAddr			= APP_ADDR; // TODO
	appMsg.parentShortAddr	= 0;
	appMsg.panId			= APP_PANID;
	appMsg.workingChannel	= APP_CHANNEL;
     7ba:	0f 2e       	mov	r0, r31
     7bc:	ff e0       	ldi	r31, 0x0F	; 15
     7be:	2f 2e       	mov	r2, r31
     7c0:	f0 2d       	mov	r31, r0
	appMsg.lqi				= 0;
	appMsg.rssi				= 0;
	
	appMsg.sensors.type		= 1; // TODO
	appMsg.sensors.size		= sizeof(int32_t) * 3; // TODO
	appMsg.sensors.temperature = 88; // TODO
     7c2:	0f 2e       	mov	r0, r31
     7c4:	f8 e5       	ldi	r31, 0x58	; 88
     7c6:	8f 2e       	mov	r8, r31
     7c8:	91 2c       	mov	r9, r1
     7ca:	a1 2c       	mov	r10, r1
     7cc:	b1 2c       	mov	r11, r1
     7ce:	f0 2d       	mov	r31, r0
	NWK_SetSecurityKey((uint8_t *)APP_SECURITY_KEY);
	#endif

	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
	
	appDataSendingTimer.interval = APP_SENDING_INTERVAL;
     7d0:	07 ee       	ldi	r16, 0xE7	; 231
     7d2:	13 e0       	ldi	r17, 0x03	; 3
		appMsg.parentShortAddr = NWK_RouteNextHop(0, 0);
	#else
		appMsg.parentShortAddr = 0;
	#endif
		
	appMsg.sensors.temperature = 111; // Dummy data
     7d4:	0f 2e       	mov	r0, r31
     7d6:	ff e6       	ldi	r31, 0x6F	; 111
     7d8:	cf 2e       	mov	r12, r31
     7da:	d1 2c       	mov	r13, r1
     7dc:	e1 2c       	mov	r14, r1
     7de:	f1 2c       	mov	r15, r1
     7e0:	f0 2d       	mov	r31, r0
	appMsg.sensors.battery = 50; // Dummy data
     7e2:	0f 2e       	mov	r0, r31
     7e4:	f2 e3       	ldi	r31, 0x32	; 50
     7e6:	4f 2e       	mov	r4, r31
     7e8:	51 2c       	mov	r5, r1
     7ea:	61 2c       	mov	r6, r1
     7ec:	71 2c       	mov	r7, r1
     7ee:	f0 2d       	mov	r31, r0
	//SYS_Init();
	HAL_UartInit(76800);
	
	while (1)
	{
		SYS_TaskHandler();
     7f0:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <SYS_TaskHandler>

/******************************************************************************//**
**********************************************************************************/
static void APP_TaskHandler(void) {
	//TODO: Put your application code here
	switch(appState) {
     7f4:	80 91 1d 04 	lds	r24, 0x041D
     7f8:	83 30       	cpi	r24, 0x03	; 3
     7fa:	09 f4       	brne	.+2      	; 0x7fe <LWMesh+0x60>
     7fc:	7c c0       	rjmp	.+248    	; 0x8f6 <LWMesh+0x158>
     7fe:	30 f4       	brcc	.+12     	; 0x80c <LWMesh+0x6e>
     800:	88 23       	and	r24, r24
     802:	69 f0       	breq	.+26     	; 0x81e <LWMesh+0x80>
     804:	81 30       	cpi	r24, 0x01	; 1
     806:	09 f4       	brne	.+2      	; 0x80a <LWMesh+0x6c>
     808:	5d c0       	rjmp	.+186    	; 0x8c4 <LWMesh+0x126>
     80a:	f2 cf       	rjmp	.-28     	; 0x7f0 <LWMesh+0x52>
     80c:	87 30       	cpi	r24, 0x07	; 7
     80e:	09 f4       	brne	.+2      	; 0x812 <LWMesh+0x74>
     810:	83 c0       	rjmp	.+262    	; 0x918 <LWMesh+0x17a>
     812:	88 30       	cpi	r24, 0x08	; 8
     814:	09 f4       	brne	.+2      	; 0x818 <LWMesh+0x7a>
     816:	8a c0       	rjmp	.+276    	; 0x92c <LWMesh+0x18e>
     818:	86 30       	cpi	r24, 0x06	; 6
     81a:	51 f7       	brne	.-44     	; 0x7f0 <LWMesh+0x52>
     81c:	73 c0       	rjmp	.+230    	; 0x904 <LWMesh+0x166>
#include "devices/LWMesh.h"


/*- Implementations -------------------------------------------------------------*/
static void appInit(void) {
	printf("State: APP_STATE_INITIAL\n");
     81e:	81 e2       	ldi	r24, 0x21	; 33
     820:	93 e0       	ldi	r25, 0x03	; 3
     822:	0e 94 90 15 	call	0x2b20	; 0x2b20 <puts>
	appMsg.nodeType			= APP_NODE_TYPE;
     826:	18 82       	st	Y, r1
	appMsg.shortAddr		= APP_ADDR;
     828:	1a 82       	std	Y+2, r1	; 0x02
     82a:	19 82       	std	Y+1, r1	; 0x01
	appMsg.extAddr			= APP_ADDR; // TODO
     82c:	1b 82       	std	Y+3, r1	; 0x03
     82e:	1c 82       	std	Y+4, r1	; 0x04
     830:	1d 82       	std	Y+5, r1	; 0x05
     832:	1e 82       	std	Y+6, r1	; 0x06
     834:	1f 82       	std	Y+7, r1	; 0x07
     836:	18 86       	std	Y+8, r1	; 0x08
     838:	19 86       	std	Y+9, r1	; 0x09
     83a:	1a 86       	std	Y+10, r1	; 0x0a
	appMsg.parentShortAddr	= 0;
     83c:	1c 86       	std	Y+12, r1	; 0x0c
     83e:	1b 86       	std	Y+11, r1	; 0x0b
	appMsg.panId			= APP_PANID;
     840:	84 e3       	ldi	r24, 0x34	; 52
     842:	92 e1       	ldi	r25, 0x12	; 18
     844:	9e 87       	std	Y+14, r25	; 0x0e
     846:	8d 87       	std	Y+13, r24	; 0x0d
	appMsg.workingChannel	= APP_CHANNEL;
     848:	2f 86       	std	Y+15, r2	; 0x0f
	appMsg.lqi				= 0;
     84a:	18 8a       	std	Y+16, r1	; 0x10
	appMsg.rssi				= 0;
     84c:	19 8a       	std	Y+17, r1	; 0x11
	
	appMsg.sensors.type		= 1; // TODO
     84e:	3a 8a       	std	Y+18, r3	; 0x12
	appMsg.sensors.size		= sizeof(int32_t) * 3; // TODO
     850:	9c e0       	ldi	r25, 0x0C	; 12
     852:	9b 8b       	std	Y+19, r25	; 0x13
	appMsg.sensors.temperature = 88; // TODO
     854:	88 8e       	std	Y+24, r8	; 0x18
     856:	99 8e       	std	Y+25, r9	; 0x19
     858:	aa 8e       	std	Y+26, r10	; 0x1a
     85a:	bb 8e       	std	Y+27, r11	; 0x1b
	
	appMsg.caption.type		= 32;
     85c:	e0 e2       	ldi	r30, 0x20	; 32
     85e:	ec 8f       	std	Y+28, r30	; 0x1c
	appMsg.caption.size		= APP_CAPTION_SIZE;
     860:	8b e0       	ldi	r24, 0x0B	; 11
     862:	8d 8f       	std	Y+29, r24	; 0x1d
	memcpy(appMsg.caption.text, APP_CAPTION, APP_CAPTION_SIZE);
     864:	ea e3       	ldi	r30, 0x3A	; 58
     866:	f3 e0       	ldi	r31, 0x03	; 3
     868:	a2 e1       	ldi	r26, 0x12	; 18
     86a:	b4 e0       	ldi	r27, 0x04	; 4
     86c:	01 90       	ld	r0, Z+
     86e:	0d 92       	st	X+, r0
     870:	8a 95       	dec	r24
     872:	e1 f7       	brne	.-8      	; 0x86c <LWMesh+0xce>

	HAL_BoardInit();
	//HAL_LedInit();
	
	/* Network Configuration */
	NWK_SetAddr(APP_ADDR);
     874:	80 e0       	ldi	r24, 0x00	; 0
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	0e 94 8f 07 	call	0xf1e	; 0xf1e <NWK_SetAddr>
	NWK_SetPanId(APP_PANID);
     87c:	84 e3       	ldi	r24, 0x34	; 52
     87e:	92 e1       	ldi	r25, 0x12	; 18
     880:	0e 94 96 07 	call	0xf2c	; 0xf2c <NWK_SetPanId>
	
	PHY_SetChannel(APP_CHANNEL);
     884:	82 2d       	mov	r24, r2
     886:	0e 94 22 0e 	call	0x1c44	; 0x1c44 <PHY_SetChannel>
	//PHY_SetBand(APP_BAND); // only for sub-GHz radios
	//PHY_SetModulation(APP_MODULATION); // only for sub-GHz radios
	//PHY_SetTxPower(APP_POWER); // radio-dependent
	PHY_SetRxState(true);
     88a:	83 2d       	mov	r24, r3
     88c:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <PHY_SetRxState>
	
	#ifdef NWK_ENABLE_SECURITY
	NWK_SetSecurityKey((uint8_t *)APP_SECURITY_KEY);
	#endif

	NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
     890:	62 e8       	ldi	r22, 0x82	; 130
     892:	73 e0       	ldi	r23, 0x03	; 3
     894:	83 2d       	mov	r24, r3
     896:	0e 94 9d 07 	call	0xf3a	; 0xf3a <NWK_OpenEndpoint>
	
	appDataSendingTimer.interval = APP_SENDING_INTERVAL;
     89a:	88 ee       	ldi	r24, 0xE8	; 232
     89c:	93 e0       	ldi	r25, 0x03	; 3
     89e:	a0 e0       	ldi	r26, 0x00	; 0
     8a0:	b0 e0       	ldi	r27, 0x00	; 0
     8a2:	f8 01       	movw	r30, r16
     8a4:	86 83       	std	Z+6, r24	; 0x06
     8a6:	97 83       	std	Z+7, r25	; 0x07
     8a8:	a0 87       	std	Z+8, r26	; 0x08
     8aa:	b1 87       	std	Z+9, r27	; 0x09
	appDataSendingTimer.mode = SYS_TIMER_INTERVAL_MODE;
     8ac:	12 86       	std	Z+10, r1	; 0x0a
	appDataSendingTimer.handler = appDataSendingTimerHandler;
     8ae:	88 e2       	ldi	r24, 0x28	; 40
     8b0:	93 e0       	ldi	r25, 0x03	; 3
     8b2:	94 87       	std	Z+12, r25	; 0x0c
     8b4:	83 87       	std	Z+11, r24	; 0x0b
	appCommandWaitTimer.interval	= NWK_ACK_WAIT_TIME;
	appCommandWaitTimer.handler		= appCommandWaitTimerHandler;
	
	#endif
	//APP_CommandsInit(); // TODO
	appState = APP_STATE_SEND; // TODO
     8b6:	30 92 1d 04 	sts	0x041D, r3
	
	printf("State: appInit end.\n");
     8ba:	86 e4       	ldi	r24, 0x46	; 70
     8bc:	93 e0       	ldi	r25, 0x03	; 3
     8be:	0e 94 90 15 	call	0x2b20	; 0x2b20 <puts>
     8c2:	96 cf       	rjmp	.-212    	; 0x7f0 <LWMesh+0x52>
**********************************************************************************/
static void appSendData(void) {
	#ifdef NWK_ENABLE_ROUTING
		appMsg.parentShortAddr = NWK_RouteNextHop(0, 0);
	#else
		appMsg.parentShortAddr = 0;
     8c4:	1c 86       	std	Y+12, r1	; 0x0c
     8c6:	1b 86       	std	Y+11, r1	; 0x0b
	#endif
		
	appMsg.sensors.temperature = 111; // Dummy data
     8c8:	c8 8e       	std	Y+24, r12	; 0x18
     8ca:	d9 8e       	std	Y+25, r13	; 0x19
     8cc:	ea 8e       	std	Y+26, r14	; 0x1a
     8ce:	fb 8e       	std	Y+27, r15	; 0x1b
	appMsg.sensors.battery = 50; // Dummy data
     8d0:	4c 8a       	std	Y+20, r4	; 0x14
     8d2:	5d 8a       	std	Y+21, r5	; 0x15
     8d4:	6e 8a       	std	Y+22, r6	; 0x16
     8d6:	7f 8a       	std	Y+23, r7	; 0x17
	
	#if defined(APP_COORDINATOR)
		appUartSendMessage((uint8_t *)&appMsg, sizeof(appMsg)); // TODO
     8d8:	69 e2       	ldi	r22, 0x29	; 41
     8da:	ce 01       	movw	r24, r28
     8dc:	0e 94 3d 03 	call	0x67a	; 0x67a <appUartSendMessage>
		SYS_TimerStart(&appDataSendingTimer);
     8e0:	c8 01       	movw	r24, r16
     8e2:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <SYS_TimerStart>
		appState = APP_STATE_WAIT_SEND_TIMER;
     8e6:	84 e0       	ldi	r24, 0x04	; 4
     8e8:	80 93 1d 04 	sts	0x041D, r24
		printf("APP_COORDINATOR State: APP_STATE_WAIT_SEND_TIMER\n");
     8ec:	8a e5       	ldi	r24, 0x5A	; 90
     8ee:	93 e0       	ldi	r25, 0x03	; 3
     8f0:	0e 94 90 15 	call	0x2b20	; 0x2b20 <puts>
     8f4:	7d cf       	rjmp	.-262    	; 0x7f0 <LWMesh+0x52>
		case APP_STATE_SENDING_DONE:
		{
			#if defined(APP_ENDDEVICE)
				appState = APP_STATE_PREPARE_TO_SLEEP;
			#else
				SYS_TimerStart(&appDataSendingTimer);
     8f6:	c8 01       	movw	r24, r16
     8f8:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <SYS_TimerStart>
				appState = APP_STATE_WAIT_SEND_TIMER;
     8fc:	84 e0       	ldi	r24, 0x04	; 4
     8fe:	80 93 1d 04 	sts	0x041D, r24
     902:	76 cf       	rjmp	.-276    	; 0x7f0 <LWMesh+0x52>
		case APP_STATE_WAIT_COMMAND_TIMER:
			break;
		*/
		case APP_STATE_PREPARE_TO_SLEEP:
		{
			if (!NWK_Busy()) {
     904:	0e 94 a6 07 	call	0xf4c	; 0xf4c <NWK_Busy>
     908:	81 11       	cpse	r24, r1
     90a:	72 cf       	rjmp	.-284    	; 0x7f0 <LWMesh+0x52>
				NWK_SleepReq();
     90c:	0e 94 af 07 	call	0xf5e	; 0xf5e <NWK_SleepReq>
				appState = APP_STATE_SLEEP;
     910:	97 e0       	ldi	r25, 0x07	; 7
     912:	90 93 1d 04 	sts	0x041D, r25
     916:	6c cf       	rjmp	.-296    	; 0x7f0 <LWMesh+0x52>
			break;
		}
		case APP_STATE_SLEEP:
		{
			//HAL_LedClose();
			HAL_Sleep(APP_SENDING_INTERVAL);
     918:	68 ee       	ldi	r22, 0xE8	; 232
     91a:	73 e0       	ldi	r23, 0x03	; 3
     91c:	80 e0       	ldi	r24, 0x00	; 0
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	0e 94 d3 05 	call	0xba6	; 0xba6 <HAL_Sleep>
			appState = APP_STATE_WAKEUP;
     924:	e8 e0       	ldi	r30, 0x08	; 8
     926:	e0 93 1d 04 	sts	0x041D, r30
     92a:	62 cf       	rjmp	.-316    	; 0x7f0 <LWMesh+0x52>
			break;
		}
		case APP_STATE_WAKEUP:
		{
			NWK_WakeupReq();
     92c:	0e 94 b2 07 	call	0xf64	; 0xf64 <NWK_WakeupReq>
			//HAL_LedInit();
			//HAL_LedOn(APP_LED_NETWORK);
				
			appState = APP_STATE_SEND;
     930:	30 92 1d 04 	sts	0x041D, r3
     934:	5d cf       	rjmp	.-326    	; 0x7f0 <LWMesh+0x52>

00000936 <Si7020_init>:
*****************************************************************************/
char Si7020_init() {
	// Initialize the TWI library at 200kHz
	//TWI_Init(200000);
	return 0;
}
     936:	80 e0       	ldi	r24, 0x00	; 0
     938:	08 95       	ret

0000093a <TGS2600_TurnOn>:
	DDRB |= 0b00100000;
	TGS2600_TurnOn();
}

void TGS2600_TurnOn(void){
	PORTB |= 0b00100000;
     93a:	2d 9a       	sbi	0x05, 5	; 5
     93c:	08 95       	ret

0000093e <TGS2600_Init>:
#include "devices/TGS2600.h"
#include "drivers/ADC.h"
#include "drivers/PWR.h"

void TGS2600_Init(void){
	DDRB |= 0b00100000;
     93e:	25 9a       	sbi	0x04, 5	; 4
	TGS2600_TurnOn();
     940:	0e 94 9d 04 	call	0x93a	; 0x93a <TGS2600_TurnOn>
     944:	08 95       	ret

00000946 <ADC_Init>:

/*************************************************************************//**
  @brief Initializes the ADC
*****************************************************************************/
void ADC_Init(void) {
	ADCSRA = (1<<ADEN)|(4<<ADPS0); //enables the ADC module, CPU clock prescale=16
     946:	84 e8       	ldi	r24, 0x84	; 132
     948:	80 93 7a 00 	sts	0x007A, r24
	
	ADCSRC = 0x05|(1<<ADTHT0)|(1<<ADTHT1); //ADSUT=5
     94c:	85 ec       	ldi	r24, 0xC5	; 197
     94e:	80 93 77 00 	sts	0x0077, r24
	while((ADCSRB&(1<<AVDDOK))==0);
     952:	eb e7       	ldi	r30, 0x7B	; 123
     954:	f0 e0       	ldi	r31, 0x00	; 0
     956:	80 81       	ld	r24, Z
     958:	88 23       	and	r24, r24
     95a:	ec f7       	brge	.-6      	; 0x956 <ADC_Init+0x10>
}
     95c:	08 95       	ret

0000095e <PWR_Init>:

/*************************************************************************//**
  @brief Initializes the power management system
*****************************************************************************/
void PWR_Init(void){
	DDRD |= 0b11000000;
     95e:	8a b1       	in	r24, 0x0a	; 10
     960:	80 6c       	ori	r24, 0xC0	; 192
     962:	8a b9       	out	0x0a, r24	; 10
     964:	08 95       	ret

00000966 <PWR_TurnOn5V>:

/*************************************************************************//**
  @brief Turns on the 5V power supply
*****************************************************************************/
void PWR_TurnOn5V(void){
	PORTD |= 0b10000000;
     966:	5f 9a       	sbi	0x0b, 7	; 11
     968:	08 95       	ret

0000096a <SPI_SlaveInit>:

unsigned char buffer[16];

void SPI_SlaveInit(void)
{
	DDRB |= (1<<PORTB3); //Set MISO output
     96a:	23 9a       	sbi	0x04, 3	; 4
	SPCR = (1<<SPE); //Enable SPI
     96c:	80 e4       	ldi	r24, 0x40	; 64
     96e:	8c bd       	out	0x2c, r24	; 44
     970:	08 95       	ret

00000972 <TWI_Init>:
/*************************************************************************//**
  @brief Initializes the 2-wire Serial Interface as a master
  @param[in] freq SCL frequency (Do not exceed 400kHz)
  @return Status (@c 0 on failure, nonzero otherwise)
*****************************************************************************/
char TWI_Init(unsigned long freq){
     972:	9b 01       	movw	r18, r22
     974:	ac 01       	movw	r20, r24
	//printf("TWI_Init");
	TWSR=0x00;
     976:	10 92 b9 00 	sts	0x00B9, r1
	TWBR=(unsigned char)(((F_CPU/freq)-16UL)/8UL); //Compute settings value and set frequency
     97a:	60 e0       	ldi	r22, 0x00	; 0
     97c:	74 e2       	ldi	r23, 0x24	; 36
     97e:	84 ef       	ldi	r24, 0xF4	; 244
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	0e 94 96 13 	call	0x272c	; 0x272c <__udivmodsi4>
     986:	da 01       	movw	r26, r20
     988:	c9 01       	movw	r24, r18
     98a:	40 97       	sbiw	r24, 0x10	; 16
     98c:	a1 09       	sbc	r26, r1
     98e:	b1 09       	sbc	r27, r1
     990:	68 94       	set
     992:	12 f8       	bld	r1, 2
     994:	b6 95       	lsr	r27
     996:	a7 95       	ror	r26
     998:	97 95       	ror	r25
     99a:	87 95       	ror	r24
     99c:	16 94       	lsr	r1
     99e:	d1 f7       	brne	.-12     	; 0x994 <TWI_Init+0x22>
     9a0:	80 93 b8 00 	sts	0x00B8, r24
	TWCR=(1 << TWEN);
     9a4:	84 e0       	ldi	r24, 0x04	; 4
     9a6:	80 93 bc 00 	sts	0x00BC, r24
	
	//TWAR=0; //Disable slave mode
	
	return 1; //May want to actually check for success here
}
     9aa:	81 e0       	ldi	r24, 0x01	; 1
     9ac:	08 95       	ret

000009ae <TWI_WriteByte>:
  @param[in] data byte to send
  @return Status code, TWI_SENT_ACK or TWI_SENT_NACK on success
*****************************************************************************/
char TWI_WriteByte(unsigned char data){
	//printf("TWI_WriteByte");
	TWDR = data; //Stage the data to send
     9ae:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
     9b2:	84 e8       	ldi	r24, 0x84	; 132
     9b4:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);//Send the data
     9b8:	ec eb       	ldi	r30, 0xBC	; 188
     9ba:	f0 e0       	ldi	r31, 0x00	; 0
     9bc:	80 81       	ld	r24, Z
     9be:	88 23       	and	r24, r24
     9c0:	ec f7       	brge	.-6      	; 0x9bc <TWI_WriteByte+0xe>
	
	return TWSR&TWSR_MASK;//Return the status code
     9c2:	80 91 b9 00 	lds	r24, 0x00B9
}
     9c6:	88 7f       	andi	r24, 0xF8	; 248
     9c8:	08 95       	ret

000009ca <TWI_BeginWrite>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAW_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginWrite(unsigned char address){
	//printf("TWI_BeginWrite");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
     9ca:	94 ee       	ldi	r25, 0xE4	; 228
     9cc:	90 93 bc 00 	sts	0x00BC, r25
	int i=0;
	while ((TWCR & (1<<TWINT)) == 0);
     9d0:	ec eb       	ldi	r30, 0xBC	; 188
     9d2:	f0 e0       	ldi	r31, 0x00	; 0
     9d4:	90 81       	ld	r25, Z
     9d6:	99 23       	and	r25, r25
     9d8:	ec f7       	brge	.-6      	; 0x9d4 <TWI_BeginWrite+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     9da:	ef e9       	ldi	r30, 0x9F	; 159
     9dc:	ff e0       	ldi	r31, 0x0F	; 15
     9de:	31 97       	sbiw	r30, 0x01	; 1
     9e0:	f1 f7       	brne	.-4      	; 0x9de <TWI_BeginWrite+0x14>
     9e2:	00 c0       	rjmp	.+0      	; 0x9e4 <TWI_BeginWrite+0x1a>
     9e4:	00 00       	nop
	_delay_ms(1);
	char stat = (TWSR & TWSR_MASK);
     9e6:	90 91 b9 00 	lds	r25, 0x00B9
     9ea:	98 7f       	andi	r25, 0xF8	; 248
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
     9ec:	98 30       	cpi	r25, 0x08	; 8
     9ee:	31 f0       	breq	.+12     	; 0x9fc <TWI_BeginWrite+0x32>
     9f0:	90 31       	cpi	r25, 0x10	; 16
     9f2:	21 f0       	breq	.+8      	; 0x9fc <TWI_BeginWrite+0x32>
     9f4:	80 91 b9 00 	lds	r24, 0x00B9
     9f8:	88 7f       	andi	r24, 0xF8	; 248
     9fa:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) & SLAW_MASK); //reset bit 0 to send a write bit, send
     9fc:	88 0f       	add	r24, r24
     9fe:	0e 94 d7 04 	call	0x9ae	; 0x9ae <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	return stat;//Return the status code
}
     a02:	08 95       	ret

00000a04 <TWI_BeginRead>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAR_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginRead(unsigned char address){
	//printf("TWI_BeginRead");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
     a04:	94 ee       	ldi	r25, 0xE4	; 228
     a06:	90 93 bc 00 	sts	0x00BC, r25
	while ((TWCR & (1<<TWINT)) == 0);
     a0a:	ec eb       	ldi	r30, 0xBC	; 188
     a0c:	f0 e0       	ldi	r31, 0x00	; 0
     a0e:	90 81       	ld	r25, Z
     a10:	99 23       	and	r25, r25
     a12:	ec f7       	brge	.-6      	; 0xa0e <TWI_BeginRead+0xa>
	
	char stat = (TWSR & TWSR_MASK);
     a14:	90 91 b9 00 	lds	r25, 0x00B9
     a18:	98 7f       	andi	r25, 0xF8	; 248
	//printf("0x%1x",(unsigned)stat);
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
     a1a:	98 30       	cpi	r25, 0x08	; 8
     a1c:	31 f0       	breq	.+12     	; 0xa2a <TWI_BeginRead+0x26>
     a1e:	90 31       	cpi	r25, 0x10	; 16
     a20:	21 f0       	breq	.+8      	; 0xa2a <TWI_BeginRead+0x26>
     a22:	80 91 b9 00 	lds	r24, 0x00B9
     a26:	88 7f       	andi	r24, 0xF8	; 248
     a28:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) | SLAR_MASK); //set bit 0 to send a read bit and send it
     a2a:	88 0f       	add	r24, r24
     a2c:	81 60       	ori	r24, 0x01	; 1
     a2e:	0e 94 d7 04 	call	0x9ae	; 0x9ae <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	
	return stat;//Return the status code
}
     a32:	08 95       	ret

00000a34 <TWI_ReadAck>:
/*************************************************************************//**
  @brief Receives a byte over TWI and returns an ACK
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_ACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadAck(unsigned char *data){
     a34:	dc 01       	movw	r26, r24
	//printf("TWI_ReadAck");
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Start receiving, ending with an ACK
     a36:	84 ec       	ldi	r24, 0xC4	; 196
     a38:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);
     a3c:	ec eb       	ldi	r30, 0xBC	; 188
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	90 81       	ld	r25, Z
     a42:	99 23       	and	r25, r25
     a44:	ec f7       	brge	.-6      	; 0xa40 <TWI_ReadAck+0xc>
	*data=TWDR; //Store the data
     a46:	80 91 bb 00 	lds	r24, 0x00BB
     a4a:	8c 93       	st	X, r24
	
	return TWSR&TWSR_MASK;//Return the status code
     a4c:	80 91 b9 00 	lds	r24, 0x00B9
}
     a50:	88 7f       	andi	r24, 0xF8	; 248
     a52:	08 95       	ret

00000a54 <TWI_ReadNack>:
/*************************************************************************//**
  @brief Receives a byte over TWI and returns a NACK
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_NACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadNack(unsigned char *data){
     a54:	dc 01       	movw	r26, r24
	//printf("TWI_ReadNack");
	TWCR = (1<<TWINT)|(1<<TWEN); //Start receiving, ending with a NACK
     a56:	84 e8       	ldi	r24, 0x84	; 132
     a58:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);
     a5c:	ec eb       	ldi	r30, 0xBC	; 188
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	90 81       	ld	r25, Z
     a62:	99 23       	and	r25, r25
     a64:	ec f7       	brge	.-6      	; 0xa60 <TWI_ReadNack+0xc>
	*data=TWDR; //Store the data
     a66:	80 91 bb 00 	lds	r24, 0x00BB
     a6a:	8c 93       	st	X, r24
	
	return TWSR&TWSR_MASK;//Return the status code
     a6c:	80 91 b9 00 	lds	r24, 0x00B9
}
     a70:	88 7f       	andi	r24, 0xF8	; 248
     a72:	08 95       	ret

00000a74 <TWI_Stop>:
  @brief Sends a Stop bit, be sure to send a Start bit before future interactions on the bus
  @return Status code, should always be nonzero
*****************************************************************************/
char TWI_Stop(void){
	//printf("TWI_Stop");
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     a74:	84 e9       	ldi	r24, 0x94	; 148
     a76:	80 93 bc 00 	sts	0x00BC, r24
	return 1;
}
     a7a:	81 e0       	ldi	r24, 0x01	; 1
     a7c:	08 95       	ret

00000a7e <TWI_Read>:
  @param[in] amount Number of bytes to recieve
  @param[in] whether or not to send an ACK on the last byte, sends NACK if false
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
     a7e:	9f 92       	push	r9
     a80:	af 92       	push	r10
     a82:	bf 92       	push	r11
     a84:	cf 92       	push	r12
     a86:	df 92       	push	r13
     a88:	ef 92       	push	r14
     a8a:	ff 92       	push	r15
     a8c:	0f 93       	push	r16
     a8e:	1f 93       	push	r17
     a90:	cf 93       	push	r28
     a92:	df 93       	push	r29
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
     a94:	16 16       	cp	r1, r22
     a96:	17 06       	cpc	r1, r23
     a98:	0c f5       	brge	.+66     	; 0xadc <TWI_Read+0x5e>
     a9a:	94 2e       	mov	r9, r20
     a9c:	8b 01       	movw	r16, r22
     a9e:	7c 01       	movw	r14, r24
     aa0:	c0 e0       	ldi	r28, 0x00	; 0
     aa2:	d0 e0       	ldi	r29, 0x00	; 0
		if((ack==false) && ((amount-1)==i)){
     aa4:	6b 01       	movw	r12, r22
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	c8 1a       	sub	r12, r24
     aaa:	d1 08       	sbc	r13, r1
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
     aac:	57 01       	movw	r10, r14
     aae:	ac 0c       	add	r10, r12
     ab0:	bd 1c       	adc	r11, r13
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
		if((ack==false) && ((amount-1)==i)){
     ab2:	91 10       	cpse	r9, r1
     ab4:	07 c0       	rjmp	.+14     	; 0xac4 <TWI_Read+0x46>
     ab6:	cc 16       	cp	r12, r28
     ab8:	dd 06       	cpc	r13, r29
     aba:	21 f4       	brne	.+8      	; 0xac4 <TWI_Read+0x46>
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
     abc:	c5 01       	movw	r24, r10
     abe:	0e 94 2a 05 	call	0xa54	; 0xa54 <TWI_ReadNack>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <TWI_Read+0x50>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}else{
			status=TWI_ReadAck(&data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
     ac4:	c7 01       	movw	r24, r14
     ac6:	8c 0f       	add	r24, r28
     ac8:	9d 1f       	adc	r25, r29
     aca:	0e 94 1a 05 	call	0xa34	; 0xa34 <TWI_ReadAck>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}
		//printf("A");
		if(status!=TWI_REC_ACK)return status; //If NACK was selected, returning here is fine since the loop is already ending
     ace:	80 35       	cpi	r24, 0x50	; 80
     ad0:	31 f4       	brne	.+12     	; 0xade <TWI_Read+0x60>
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
     ad2:	21 96       	adiw	r28, 0x01	; 1
     ad4:	c0 17       	cp	r28, r16
     ad6:	d1 07       	cpc	r29, r17
     ad8:	61 f7       	brne	.-40     	; 0xab2 <TWI_Read+0x34>
     ada:	01 c0       	rjmp	.+2      	; 0xade <TWI_Read+0x60>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
     adc:	80 e0       	ldi	r24, 0x00	; 0
		//will return if something goes wrong partway through
		//printf("B");
	}
	//printf("0x%1x",(unsigned)status);
	return status;
}
     ade:	df 91       	pop	r29
     ae0:	cf 91       	pop	r28
     ae2:	1f 91       	pop	r17
     ae4:	0f 91       	pop	r16
     ae6:	ff 90       	pop	r15
     ae8:	ef 90       	pop	r14
     aea:	df 90       	pop	r13
     aec:	cf 90       	pop	r12
     aee:	bf 90       	pop	r11
     af0:	af 90       	pop	r10
     af2:	9f 90       	pop	r9
     af4:	08 95       	ret

00000af6 <USART0_Init>:
  @brief Initializes USART0 in asynchronous UART mode, 8 bit data, 1 stop bit
  @param[in] desired baud rate (configuration values computed using F_CPU)
*****************************************************************************/
void USART0_Init(unsigned long baud){
	
	stdout = &USART0_stdout; //make stdout print to USART0
     af6:	24 e0       	ldi	r18, 0x04	; 4
     af8:	32 e0       	ldi	r19, 0x02	; 2
     afa:	30 93 08 08 	sts	0x0808, r19
     afe:	20 93 07 08 	sts	0x0807, r18
	
	//Compute UBRR for baudrate setting
	unsigned short ubrr=(unsigned short)((F_CPU/(baud*16UL))-1);
     b02:	dc 01       	movw	r26, r24
     b04:	cb 01       	movw	r24, r22
     b06:	88 0f       	add	r24, r24
     b08:	99 1f       	adc	r25, r25
     b0a:	aa 1f       	adc	r26, r26
     b0c:	bb 1f       	adc	r27, r27
     b0e:	88 0f       	add	r24, r24
     b10:	99 1f       	adc	r25, r25
     b12:	aa 1f       	adc	r26, r26
     b14:	bb 1f       	adc	r27, r27
     b16:	9c 01       	movw	r18, r24
     b18:	ad 01       	movw	r20, r26
     b1a:	22 0f       	add	r18, r18
     b1c:	33 1f       	adc	r19, r19
     b1e:	44 1f       	adc	r20, r20
     b20:	55 1f       	adc	r21, r21
     b22:	22 0f       	add	r18, r18
     b24:	33 1f       	adc	r19, r19
     b26:	44 1f       	adc	r20, r20
     b28:	55 1f       	adc	r21, r21
     b2a:	60 e0       	ldi	r22, 0x00	; 0
     b2c:	74 e2       	ldi	r23, 0x24	; 36
     b2e:	84 ef       	ldi	r24, 0xF4	; 244
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	0e 94 96 13 	call	0x272c	; 0x272c <__udivmodsi4>
     b36:	21 50       	subi	r18, 0x01	; 1
     b38:	31 09       	sbc	r19, r1
	
	//Set BAUD rate.
	UBRR0H = (unsigned char) (ubrr >> 8);
     b3a:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) ubrr;
     b3e:	20 93 c4 00 	sts	0x00C4, r18
	/*Set frame format. 8 data bit(settings bits UCSZ00 and UCSZ01  UCSR0B), 1 stop bit(by default and need not to be worried about). 
	The UCSZ01:0 bits combined with the UCSZ02 bit in UCSR0B sets the number of data
	bits (Character Size) in the frame that the Receiver and Transmitter use. 
	If a change on frame format is needed, make sure to modify UCSR0B register above accordingly.
	See datasheet pg. 390.*/
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
     b42:	86 e0       	ldi	r24, 0x06	; 6
     b44:	80 93 c2 00 	sts	0x00C2, r24
	
	//Enable receiver and transmitter. Enable the USART Receive Complete interrupt(RXCIE).
	//UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0));
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);//Enable RX/TX, no interrupts
     b48:	88 e1       	ldi	r24, 0x18	; 24
     b4a:	80 93 c1 00 	sts	0x00C1, r24
     b4e:	08 95       	ret

00000b50 <USART0_Transmit>:
Function contains busy loops for simplicity in debugging. Not production code.
  @brief Transmits a byte via USART0
  @param[in] data byte to be transmitted
*****************************************************************************/
void USART0_Transmit(unsigned char data){
	while(!(UCSR0A & (1 << UDRE0))); //Wait for the empty transmit buffer. (Waiting UDR0 to be empty.)
     b50:	e0 ec       	ldi	r30, 0xC0	; 192
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	90 81       	ld	r25, Z
     b56:	95 ff       	sbrs	r25, 5
     b58:	fd cf       	rjmp	.-6      	; 0xb54 <USART0_Transmit+0x4>
		UDR0 = data;			//store the data in the USART Data Register
     b5a:	80 93 c6 00 	sts	0x00C6, r24
     b5e:	08 95       	ret

00000b60 <USART0_putchar_printf>:
  @brief Called when stdout is being printed to USART0 (this is set up at runtime)
  @param[in] var byte to transmit
  @param[in/out] *stream Pointer to a stdio.h FILE io stream
  @return Status
*****************************************************************************/
int USART0_putchar_printf(char var, FILE *stream) {
     b60:	cf 93       	push	r28
     b62:	c8 2f       	mov	r28, r24
	if (var == '\n') USART0_Transmit('\r');
     b64:	8a 30       	cpi	r24, 0x0A	; 10
     b66:	19 f4       	brne	.+6      	; 0xb6e <USART0_putchar_printf+0xe>
     b68:	8d e0       	ldi	r24, 0x0D	; 13
     b6a:	0e 94 a8 05 	call	0xb50	; 0xb50 <USART0_Transmit>
	USART0_Transmit(var);
     b6e:	8c 2f       	mov	r24, r28
     b70:	0e 94 a8 05 	call	0xb50	; 0xb50 <USART0_Transmit>
	return 0;
}
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	cf 91       	pop	r28
     b7a:	08 95       	ret

00000b7c <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     b7c:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     b7e:	0f b6       	in	r0, 0x3f	; 63
     b80:	f8 94       	cli
     b82:	a8 95       	wdr
     b84:	80 91 60 00 	lds	r24, 0x0060
     b88:	88 61       	ori	r24, 0x18	; 24
     b8a:	80 93 60 00 	sts	0x0060, r24
     b8e:	10 92 60 00 	sts	0x0060, r1
     b92:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
     b94:	e1 e6       	ldi	r30, 0x61	; 97
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 e8       	ldi	r24, 0x80	; 128
     b9a:	80 83       	st	Z, r24
  CLKPR = 0;
     b9c:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     b9e:	78 94       	sei

  HAL_TimerInit();
     ba0:	0e 94 68 06 	call	0xcd0	; 0xcd0 <HAL_TimerInit>
     ba4:	08 95       	ret

00000ba6 <HAL_Sleep>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_Sleep(uint32_t interval)
{
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
  uint32_t ticks;
  uint16_t integer;
  uint8_t fractional;

  ticks = (interval * PRESCALED_CLOCK) / 1000ul;
     baa:	dc 01       	movw	r26, r24
     bac:	cb 01       	movw	r24, r22
     bae:	88 0f       	add	r24, r24
     bb0:	99 1f       	adc	r25, r25
     bb2:	aa 1f       	adc	r26, r26
     bb4:	bb 1f       	adc	r27, r27
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	aa 1f       	adc	r26, r26
     bbc:	bb 1f       	adc	r27, r27
     bbe:	88 0f       	add	r24, r24
     bc0:	99 1f       	adc	r25, r25
     bc2:	aa 1f       	adc	r26, r26
     bc4:	bb 1f       	adc	r27, r27
     bc6:	88 0f       	add	r24, r24
     bc8:	99 1f       	adc	r25, r25
     bca:	aa 1f       	adc	r26, r26
     bcc:	bb 1f       	adc	r27, r27
     bce:	bc 01       	movw	r22, r24
     bd0:	cd 01       	movw	r24, r26
     bd2:	66 0f       	add	r22, r22
     bd4:	77 1f       	adc	r23, r23
     bd6:	88 1f       	adc	r24, r24
     bd8:	99 1f       	adc	r25, r25
     bda:	28 ee       	ldi	r18, 0xE8	; 232
     bdc:	33 e0       	ldi	r19, 0x03	; 3
     bde:	40 e0       	ldi	r20, 0x00	; 0
     be0:	50 e0       	ldi	r21, 0x00	; 0
     be2:	0e 94 96 13 	call	0x272c	; 0x272c <__udivmodsi4>
     be6:	da 01       	movw	r26, r20
     be8:	c9 01       	movw	r24, r18
  if (0 == ticks)
     bea:	21 15       	cp	r18, r1
     bec:	31 05       	cpc	r19, r1
     bee:	41 05       	cpc	r20, r1
     bf0:	51 05       	cpc	r21, r1
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <HAL_Sleep+0x50>
     bf4:	5b c0       	rjmp	.+182    	; 0xcac <HAL_Sleep+0x106>
    return;

  integer = ticks >> 8;
     bf6:	77 27       	eor	r23, r23
     bf8:	65 2f       	mov	r22, r21
     bfa:	54 2f       	mov	r21, r20
     bfc:	43 2f       	mov	r20, r19
  fractional = ticks & 0xff;
     bfe:	28 2f       	mov	r18, r24

  TIMSK2 = 0;
     c00:	10 92 70 00 	sts	0x0070, r1
  ASSR |= (1 << AS2);
     c04:	e6 eb       	ldi	r30, 0xB6	; 182
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	80 62       	ori	r24, 0x20	; 32
     c0c:	80 83       	st	Z, r24
  TCCR2A = 0;
     c0e:	10 92 b0 00 	sts	0x00B0, r1
  TCCR2B = 0;
     c12:	10 92 b1 00 	sts	0x00B1, r1
  TCNT2 = 0;
     c16:	10 92 b2 00 	sts	0x00B2, r1

/*************************************************************************//**
*****************************************************************************/
static inline void halSleepSynchronize(void)
{
  while (ASSR & ((1 << TCN2UB) | (1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB)));
     c1a:	80 81       	ld	r24, Z
     c1c:	8f 71       	andi	r24, 0x1F	; 31
     c1e:	e9 f7       	brne	.-6      	; 0xc1a <HAL_Sleep+0x74>
  TCCR2A = 0;
  TCCR2B = 0;
  TCNT2 = 0;
  halSleepSynchronize();

  TIFR2 = (1 << OCF2B) | (1 << OCF2A) | (1 << TOV2);
     c20:	87 e0       	ldi	r24, 0x07	; 7
     c22:	87 bb       	out	0x17, r24	; 23
  TCCR2B = ((1 << CS20) | (1 << CS21) | (1 << CS22));   // clk/1024
     c24:	80 93 b1 00 	sts	0x00B1, r24
    halSleepTimerEvent = false;

    if (integer > 0)
      OCR2A = 0xff;
    else if (fractional > 0)
      OCR2A = fractional;
     c28:	c3 eb       	ldi	r28, 0xB3	; 179
     c2a:	d0 e0       	ldi	r29, 0x00	; 0
  while (1)
  {
    halSleepTimerEvent = false;

    if (integer > 0)
      OCR2A = 0xff;
     c2c:	6f ef       	ldi	r22, 0xFF	; 255
      halSleepSynchronize();
      ASSR &= ~(1 << AS2);
      return;
    }

    TIMSK2 |= (1 << OCIE2A);
     c2e:	a0 e7       	ldi	r26, 0x70	; 112
     c30:	b0 e0       	ldi	r27, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static inline void halSleepSynchronize(void)
{
  while (ASSR & ((1 << TCN2UB) | (1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB)));
     c32:	e6 eb       	ldi	r30, 0xB6	; 182
     c34:	f0 e0       	ldi	r31, 0x00	; 0

    TIMSK2 |= (1 << OCIE2A);

    halSleepSynchronize();

    SMCR = (1 << SM1) | (1 << SM0) | (1 << SE); // power-save
     c36:	37 e0       	ldi	r19, 0x07	; 7
     c38:	01 c0       	rjmp	.+2      	; 0xc3c <HAL_Sleep+0x96>
    if (event)
    {
      if (integer > 0)
        integer--;
      else
        fractional = 0;
     c3a:	20 e0       	ldi	r18, 0x00	; 0
  TIFR2 = (1 << OCF2B) | (1 << OCF2A) | (1 << TOV2);
  TCCR2B = ((1 << CS20) | (1 << CS21) | (1 << CS22));   // clk/1024

  while (1)
  {
    halSleepTimerEvent = false;
     c3c:	10 92 1e 04 	sts	0x041E, r1

    if (integer > 0)
     c40:	41 15       	cp	r20, r1
     c42:	51 05       	cpc	r21, r1
     c44:	11 f0       	breq	.+4      	; 0xc4a <HAL_Sleep+0xa4>
      OCR2A = 0xff;
     c46:	68 83       	st	Y, r22
     c48:	1b c0       	rjmp	.+54     	; 0xc80 <HAL_Sleep+0xda>
    else if (fractional > 0)
     c4a:	22 23       	and	r18, r18
     c4c:	11 f0       	breq	.+4      	; 0xc52 <HAL_Sleep+0xac>
      OCR2A = fractional;
     c4e:	28 83       	st	Y, r18
     c50:	17 c0       	rjmp	.+46     	; 0xc80 <HAL_Sleep+0xda>

/*************************************************************************//**
*****************************************************************************/
static inline void halSleepSynchronize(void)
{
  while (ASSR & ((1 << TCN2UB) | (1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB)));
     c52:	e6 eb       	ldi	r30, 0xB6	; 182
     c54:	f0 e0       	ldi	r31, 0x00	; 0
     c56:	80 81       	ld	r24, Z
     c58:	8f 71       	andi	r24, 0x1F	; 31
     c5a:	e9 f7       	brne	.-6      	; 0xc56 <HAL_Sleep+0xb0>
    else if (fractional > 0)
      OCR2A = fractional;
    else
    {
      halSleepSynchronize();
      TIMSK2 = 0;
     c5c:	10 92 70 00 	sts	0x0070, r1
      TCCR2B = 0;
     c60:	10 92 b1 00 	sts	0x00B1, r1
      GTCCR |= (1 << PSRASY);
     c64:	83 b5       	in	r24, 0x23	; 35
     c66:	82 60       	ori	r24, 0x02	; 2
     c68:	83 bd       	out	0x23, r24	; 35

/*************************************************************************//**
*****************************************************************************/
static inline void halSleepSynchronize(void)
{
  while (ASSR & ((1 << TCN2UB) | (1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB)));
     c6a:	e6 eb       	ldi	r30, 0xB6	; 182
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	8f 71       	andi	r24, 0x1F	; 31
     c72:	e9 f7       	brne	.-6      	; 0xc6e <HAL_Sleep+0xc8>
      halSleepSynchronize();
      TIMSK2 = 0;
      TCCR2B = 0;
      GTCCR |= (1 << PSRASY);
      halSleepSynchronize();
      ASSR &= ~(1 << AS2);
     c74:	e6 eb       	ldi	r30, 0xB6	; 182
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	8f 7d       	andi	r24, 0xDF	; 223
     c7c:	80 83       	st	Z, r24
      return;
     c7e:	16 c0       	rjmp	.+44     	; 0xcac <HAL_Sleep+0x106>
    }

    TIMSK2 |= (1 << OCIE2A);
     c80:	8c 91       	ld	r24, X
     c82:	82 60       	ori	r24, 0x02	; 2
     c84:	8c 93       	st	X, r24

/*************************************************************************//**
*****************************************************************************/
static inline void halSleepSynchronize(void)
{
  while (ASSR & ((1 << TCN2UB) | (1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB)));
     c86:	80 81       	ld	r24, Z
     c88:	8f 71       	andi	r24, 0x1F	; 31
     c8a:	e9 f7       	brne	.-6      	; 0xc86 <HAL_Sleep+0xe0>

    TIMSK2 |= (1 << OCIE2A);

    halSleepSynchronize();

    SMCR = (1 << SM1) | (1 << SM0) | (1 << SE); // power-save
     c8c:	33 bf       	out	0x33, r19	; 51
    asm("sleep");
     c8e:	88 95       	sleep
    SMCR = 0;
     c90:	13 be       	out	0x33, r1	; 51

    bool event;

    ATOMIC_SECTION_ENTER
     c92:	9f b7       	in	r25, 0x3f	; 63
     c94:	f8 94       	cli
      event = halSleepTimerEvent;
     c96:	80 91 1e 04 	lds	r24, 0x041E
    ATOMIC_SECTION_LEAVE
     c9a:	9f bf       	out	0x3f, r25	; 63

    if (event)
     c9c:	88 23       	and	r24, r24
     c9e:	71 f2       	breq	.-100    	; 0xc3c <HAL_Sleep+0x96>
    {
      if (integer > 0)
     ca0:	41 15       	cp	r20, r1
     ca2:	51 05       	cpc	r21, r1
     ca4:	51 f2       	breq	.-108    	; 0xc3a <HAL_Sleep+0x94>
        integer--;
     ca6:	41 50       	subi	r20, 0x01	; 1
     ca8:	51 09       	sbc	r21, r1
     caa:	c8 cf       	rjmp	.-112    	; 0xc3c <HAL_Sleep+0x96>
    else
    {
      // TODO: wakeup from some other source
    }
  }
}
     cac:	df 91       	pop	r29
     cae:	cf 91       	pop	r28
     cb0:	08 95       	ret

00000cb2 <__vector_13>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
     cb2:	1f 92       	push	r1
     cb4:	0f 92       	push	r0
     cb6:	0f b6       	in	r0, 0x3f	; 63
     cb8:	0f 92       	push	r0
     cba:	11 24       	eor	r1, r1
     cbc:	8f 93       	push	r24
  halSleepTimerEvent = true;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	80 93 1e 04 	sts	0x041E, r24
}
     cc4:	8f 91       	pop	r24
     cc6:	0f 90       	pop	r0
     cc8:	0f be       	out	0x3f, r0	; 63
     cca:	0f 90       	pop	r0
     ccc:	1f 90       	pop	r1
     cce:	18 95       	reti

00000cd0 <HAL_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_TimerInit(void)
{
  halTimerIrqCount = 0;
     cd0:	10 92 dc 07 	sts	0x07DC, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
     cd4:	80 e2       	ldi	r24, 0x20	; 32
     cd6:	9e e4       	ldi	r25, 0x4E	; 78
     cd8:	90 93 a9 00 	sts	0x00A9, r25
     cdc:	80 93 a8 00 	sts	0x00A8, r24
  TCCR4B = (1 << WGM12);              // CTC mode
     ce0:	e1 ea       	ldi	r30, 0xA1	; 161
     ce2:	f0 e0       	ldi	r31, 0x00	; 0
     ce4:	88 e0       	ldi	r24, 0x08	; 8
     ce6:	80 83       	st	Z, r24
  TCCR4B |= (1 << CS11);              // Prescaler 8
     ce8:	80 81       	ld	r24, Z
     cea:	82 60       	ori	r24, 0x02	; 2
     cec:	80 83       	st	Z, r24
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
     cee:	e2 e7       	ldi	r30, 0x72	; 114
     cf0:	f0 e0       	ldi	r31, 0x00	; 0
     cf2:	80 81       	ld	r24, Z
     cf4:	82 60       	ori	r24, 0x02	; 2
     cf6:	80 83       	st	Z, r24
     cf8:	08 95       	ret

00000cfa <__vector_42>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     cfa:	1f 92       	push	r1
     cfc:	0f 92       	push	r0
     cfe:	0f b6       	in	r0, 0x3f	; 63
     d00:	0f 92       	push	r0
     d02:	11 24       	eor	r1, r1
     d04:	8f 93       	push	r24
  halTimerIrqCount++;
     d06:	80 91 dc 07 	lds	r24, 0x07DC
     d0a:	8f 5f       	subi	r24, 0xFF	; 255
     d0c:	80 93 dc 07 	sts	0x07DC, r24
}
     d10:	8f 91       	pop	r24
     d12:	0f 90       	pop	r0
     d14:	0f be       	out	0x3f, r0	; 63
     d16:	0f 90       	pop	r0
     d18:	1f 90       	pop	r1
     d1a:	18 95       	reti

00000d1c <HAL_UartInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartInit(uint32_t baudrate)
{
  uint32_t brr = ((uint32_t)F_CPU * 2) / (16 * baudrate) - 1;
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	88 0f       	add	r24, r24
     d22:	99 1f       	adc	r25, r25
     d24:	aa 1f       	adc	r26, r26
     d26:	bb 1f       	adc	r27, r27
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	aa 1f       	adc	r26, r26
     d2e:	bb 1f       	adc	r27, r27
     d30:	9c 01       	movw	r18, r24
     d32:	ad 01       	movw	r20, r26
     d34:	22 0f       	add	r18, r18
     d36:	33 1f       	adc	r19, r19
     d38:	44 1f       	adc	r20, r20
     d3a:	55 1f       	adc	r21, r21
     d3c:	22 0f       	add	r18, r18
     d3e:	33 1f       	adc	r19, r19
     d40:	44 1f       	adc	r20, r20
     d42:	55 1f       	adc	r21, r21
     d44:	60 e0       	ldi	r22, 0x00	; 0
     d46:	78 e4       	ldi	r23, 0x48	; 72
     d48:	88 ee       	ldi	r24, 0xE8	; 232
     d4a:	91 e0       	ldi	r25, 0x01	; 1
     d4c:	0e 94 96 13 	call	0x272c	; 0x272c <__udivmodsi4>
     d50:	ba 01       	movw	r22, r20
     d52:	a9 01       	movw	r20, r18
     d54:	41 50       	subi	r20, 0x01	; 1
     d56:	51 09       	sbc	r21, r1
     d58:	61 09       	sbc	r22, r1
     d5a:	71 09       	sbc	r23, r1

  UBRRxH = (brr >> 8) & 0xff;
     d5c:	bb 27       	eor	r27, r27
     d5e:	a7 2f       	mov	r26, r23
     d60:	96 2f       	mov	r25, r22
     d62:	85 2f       	mov	r24, r21
     d64:	80 93 c5 00 	sts	0x00C5, r24
  UBRRxL = (brr & 0xff);
     d68:	40 93 c4 00 	sts	0x00C4, r20
  UCSRxA = (1 << U2X1);
     d6c:	82 e0       	ldi	r24, 0x02	; 2
     d6e:	80 93 c0 00 	sts	0x00C0, r24
  UCSRxB = (1 << TXEN1) | (1 << RXEN1) | (1 << RXCIE1);
     d72:	88 e9       	ldi	r24, 0x98	; 152
     d74:	80 93 c1 00 	sts	0x00C1, r24
  UCSRxC = (3 << UCSZ10);
     d78:	86 e0       	ldi	r24, 0x06	; 6
     d7a:	80 93 c2 00 	sts	0x00C2, r24

  txFifo.data = txData;
     d7e:	e1 e4       	ldi	r30, 0x41	; 65
     d80:	f4 e0       	ldi	r31, 0x04	; 4
     d82:	86 e3       	ldi	r24, 0x36	; 54
     d84:	94 e0       	ldi	r25, 0x04	; 4
     d86:	91 87       	std	Z+9, r25	; 0x09
     d88:	80 87       	std	Z+8, r24	; 0x08
  txFifo.size = HAL_UART_TX_FIFO_SIZE;
     d8a:	8a e0       	ldi	r24, 0x0A	; 10
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	95 83       	std	Z+5, r25	; 0x05
     d90:	84 83       	std	Z+4, r24	; 0x04
  txFifo.bytes = 0;
     d92:	17 82       	std	Z+7, r1	; 0x07
     d94:	16 82       	std	Z+6, r1	; 0x06
  txFifo.head = 0;
     d96:	11 82       	std	Z+1, r1	; 0x01
     d98:	10 82       	st	Z, r1
  txFifo.tail = 0;
     d9a:	13 82       	std	Z+3, r1	; 0x03
     d9c:	12 82       	std	Z+2, r1	; 0x02

  rxFifo.data = rxData;
     d9e:	ec e2       	ldi	r30, 0x2C	; 44
     da0:	f4 e0       	ldi	r31, 0x04	; 4
     da2:	21 e2       	ldi	r18, 0x21	; 33
     da4:	34 e0       	ldi	r19, 0x04	; 4
     da6:	31 87       	std	Z+9, r19	; 0x09
     da8:	20 87       	std	Z+8, r18	; 0x08
  rxFifo.size = HAL_UART_RX_FIFO_SIZE;
     daa:	95 83       	std	Z+5, r25	; 0x05
     dac:	84 83       	std	Z+4, r24	; 0x04
  rxFifo.bytes = 0;
     dae:	17 82       	std	Z+7, r1	; 0x07
     db0:	16 82       	std	Z+6, r1	; 0x06
  rxFifo.head = 0;
     db2:	11 82       	std	Z+1, r1	; 0x01
     db4:	10 82       	st	Z, r1
  rxFifo.tail = 0;
     db6:	13 82       	std	Z+3, r1	; 0x03
     db8:	12 82       	std	Z+2, r1	; 0x02

  udrEmpty = true;
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	80 93 20 04 	sts	0x0420, r24
  newData = false;
     dc0:	10 92 1f 04 	sts	0x041F, r1
     dc4:	08 95       	ret

00000dc6 <HAL_UartWriteByte>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartWriteByte(uint8_t byte)
{
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
  if (txFifo.bytes == txFifo.size)
     dca:	e1 e4       	ldi	r30, 0x41	; 65
     dcc:	f4 e0       	ldi	r31, 0x04	; 4
     dce:	26 81       	ldd	r18, Z+6	; 0x06
     dd0:	37 81       	ldd	r19, Z+7	; 0x07
     dd2:	64 81       	ldd	r22, Z+4	; 0x04
     dd4:	75 81       	ldd	r23, Z+5	; 0x05
     dd6:	26 17       	cp	r18, r22
     dd8:	37 07       	cpc	r19, r23
     dda:	c9 f0       	breq	.+50     	; 0xe0e <HAL_UartWriteByte+0x48>
    return;

  txFifo.data[txFifo.tail++] = byte;
     ddc:	c0 85       	ldd	r28, Z+8	; 0x08
     dde:	d1 85       	ldd	r29, Z+9	; 0x09
     de0:	42 81       	ldd	r20, Z+2	; 0x02
     de2:	53 81       	ldd	r21, Z+3	; 0x03
     de4:	da 01       	movw	r26, r20
     de6:	11 96       	adiw	r26, 0x01	; 1
     de8:	b3 83       	std	Z+3, r27	; 0x03
     dea:	a2 83       	std	Z+2, r26	; 0x02
     dec:	fe 01       	movw	r30, r28
     dee:	e4 0f       	add	r30, r20
     df0:	f5 1f       	adc	r31, r21
     df2:	80 83       	st	Z, r24
  if (txFifo.tail == txFifo.size)
     df4:	6a 17       	cp	r22, r26
     df6:	7b 07       	cpc	r23, r27
     df8:	21 f4       	brne	.+8      	; 0xe02 <HAL_UartWriteByte+0x3c>
    txFifo.tail = 0;
     dfa:	10 92 44 04 	sts	0x0444, r1
     dfe:	10 92 43 04 	sts	0x0443, r1
  txFifo.bytes++;
     e02:	2f 5f       	subi	r18, 0xFF	; 255
     e04:	3f 4f       	sbci	r19, 0xFF	; 255
     e06:	30 93 48 04 	sts	0x0448, r19
     e0a:	20 93 47 04 	sts	0x0447, r18
}
     e0e:	df 91       	pop	r29
     e10:	cf 91       	pop	r28
     e12:	08 95       	ret

00000e14 <__vector_26>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     e14:	1f 92       	push	r1
     e16:	0f 92       	push	r0
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	0f 92       	push	r0
     e1c:	11 24       	eor	r1, r1
     e1e:	8f 93       	push	r24
     e20:	ef 93       	push	r30
     e22:	ff 93       	push	r31
  udrEmpty = true;
     e24:	81 e0       	ldi	r24, 0x01	; 1
     e26:	80 93 20 04 	sts	0x0420, r24
  UCSRxB &= ~(1 << UDRIE1);
     e2a:	e1 ec       	ldi	r30, 0xC1	; 193
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	8f 7d       	andi	r24, 0xDF	; 223
     e32:	80 83       	st	Z, r24
}
     e34:	ff 91       	pop	r31
     e36:	ef 91       	pop	r30
     e38:	8f 91       	pop	r24
     e3a:	0f 90       	pop	r0
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	0f 90       	pop	r0
     e40:	1f 90       	pop	r1
     e42:	18 95       	reti

00000e44 <__vector_25>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     e44:	1f 92       	push	r1
     e46:	0f 92       	push	r0
     e48:	0f b6       	in	r0, 0x3f	; 63
     e4a:	0f 92       	push	r0
     e4c:	11 24       	eor	r1, r1
     e4e:	2f 93       	push	r18
     e50:	3f 93       	push	r19
     e52:	4f 93       	push	r20
     e54:	5f 93       	push	r21
     e56:	6f 93       	push	r22
     e58:	7f 93       	push	r23
     e5a:	8f 93       	push	r24
     e5c:	9f 93       	push	r25
     e5e:	af 93       	push	r26
     e60:	bf 93       	push	r27
     e62:	ef 93       	push	r30
     e64:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     e66:	80 91 c0 00 	lds	r24, 0x00C0
  uint8_t byte = UDRx;
     e6a:	20 91 c6 00 	lds	r18, 0x00C6

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     e6e:	8c 71       	andi	r24, 0x1C	; 28
     e70:	59 f5       	brne	.+86     	; 0xec8 <__vector_25+0x84>
  {
    if (rxFifo.bytes == rxFifo.size)
     e72:	ec e2       	ldi	r30, 0x2C	; 44
     e74:	f4 e0       	ldi	r31, 0x04	; 4
     e76:	46 81       	ldd	r20, Z+6	; 0x06
     e78:	57 81       	ldd	r21, Z+7	; 0x07
     e7a:	84 81       	ldd	r24, Z+4	; 0x04
     e7c:	95 81       	ldd	r25, Z+5	; 0x05
     e7e:	48 17       	cp	r20, r24
     e80:	59 07       	cpc	r21, r25
     e82:	11 f1       	breq	.+68     	; 0xec8 <__vector_25+0x84>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     e84:	40 85       	ldd	r20, Z+8	; 0x08
     e86:	51 85       	ldd	r21, Z+9	; 0x09
     e88:	82 81       	ldd	r24, Z+2	; 0x02
     e8a:	93 81       	ldd	r25, Z+3	; 0x03
     e8c:	bc 01       	movw	r22, r24
     e8e:	6f 5f       	subi	r22, 0xFF	; 255
     e90:	7f 4f       	sbci	r23, 0xFF	; 255
     e92:	73 83       	std	Z+3, r23	; 0x03
     e94:	62 83       	std	Z+2, r22	; 0x02
     e96:	da 01       	movw	r26, r20
     e98:	a8 0f       	add	r26, r24
     e9a:	b9 1f       	adc	r27, r25
     e9c:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
     e9e:	22 81       	ldd	r18, Z+2	; 0x02
     ea0:	33 81       	ldd	r19, Z+3	; 0x03
     ea2:	84 81       	ldd	r24, Z+4	; 0x04
     ea4:	95 81       	ldd	r25, Z+5	; 0x05
     ea6:	28 17       	cp	r18, r24
     ea8:	39 07       	cpc	r19, r25
     eaa:	21 f4       	brne	.+8      	; 0xeb4 <__vector_25+0x70>
      rxFifo.tail = 0;
     eac:	10 92 2f 04 	sts	0x042F, r1
     eb0:	10 92 2e 04 	sts	0x042E, r1
    rxFifo.bytes++;
     eb4:	ec e2       	ldi	r30, 0x2C	; 44
     eb6:	f4 e0       	ldi	r31, 0x04	; 4
     eb8:	86 81       	ldd	r24, Z+6	; 0x06
     eba:	97 81       	ldd	r25, Z+7	; 0x07
     ebc:	01 96       	adiw	r24, 0x01	; 1
     ebe:	97 83       	std	Z+7, r25	; 0x07
     ec0:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	80 93 1f 04 	sts	0x041F, r24
  }

  PRAGMA(diag_default=Pa082);
}
     ec8:	ff 91       	pop	r31
     eca:	ef 91       	pop	r30
     ecc:	bf 91       	pop	r27
     ece:	af 91       	pop	r26
     ed0:	9f 91       	pop	r25
     ed2:	8f 91       	pop	r24
     ed4:	7f 91       	pop	r23
     ed6:	6f 91       	pop	r22
     ed8:	5f 91       	pop	r21
     eda:	4f 91       	pop	r20
     edc:	3f 91       	pop	r19
     ede:	2f 91       	pop	r18
     ee0:	0f 90       	pop	r0
     ee2:	0f be       	out	0x3f, r0	; 63
     ee4:	0f 90       	pop	r0
     ee6:	1f 90       	pop	r1
     ee8:	18 95       	reti

00000eea <NWK_Init>:
/*************************************************************************//**
  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
  nwkIb.nwkSeqNum = 0;
     eea:	ed ed       	ldi	r30, 0xDD	; 221
     eec:	f7 e0       	ldi	r31, 0x07	; 7
     eee:	14 82       	std	Z+4, r1	; 0x04
  nwkIb.macSeqNum = 0;
     ef0:	15 82       	std	Z+5, r1	; 0x05
  nwkIb.addr = 0;
     ef2:	11 82       	std	Z+1, r1	; 0x01
     ef4:	10 82       	st	Z, r1
  nwkIb.lock = 0;
     ef6:	17 a2       	std	Z+39, r1	; 0x27
     ef8:	16 a2       	std	Z+38, r1	; 0x26
     efa:	e3 ee       	ldi	r30, 0xE3	; 227
     efc:	f7 e0       	ldi	r31, 0x07	; 7
     efe:	83 e0       	ldi	r24, 0x03	; 3
     f00:	98 e0       	ldi	r25, 0x08	; 8

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
    nwkIb.endpoint[i] = NULL;
     f02:	11 92       	st	Z+, r1
     f04:	11 92       	st	Z+, r1
  nwkIb.nwkSeqNum = 0;
  nwkIb.macSeqNum = 0;
  nwkIb.addr = 0;
  nwkIb.lock = 0;

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
     f06:	e8 17       	cp	r30, r24
     f08:	f9 07       	cpc	r31, r25
     f0a:	d9 f7       	brne	.-10     	; 0xf02 <NWK_Init+0x18>
    nwkIb.endpoint[i] = NULL;

  nwkTxInit();
     f0c:	0e 94 29 0c 	call	0x1852	; 0x1852 <nwkTxInit>
  nwkRxInit();
     f10:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <nwkRxInit>
  nwkFrameInit();
     f14:	0e 94 ae 08 	call	0x115c	; 0x115c <nwkFrameInit>
  nwkDataReqInit();
     f18:	0e 94 e0 07 	call	0xfc0	; 0xfc0 <nwkDataReqInit>
     f1c:	08 95       	ret

00000f1e <NWK_SetAddr>:
  @brief Sets network address of the node
  @param[in] addr Adddress to set
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
  nwkIb.addr = addr;
     f1e:	90 93 de 07 	sts	0x07DE, r25
     f22:	80 93 dd 07 	sts	0x07DD, r24
  PHY_SetShortAddr(addr);
     f26:	0e 94 38 0e 	call	0x1c70	; 0x1c70 <PHY_SetShortAddr>
     f2a:	08 95       	ret

00000f2c <NWK_SetPanId>:
  @brief Sets network identifier (PAN) of the node
  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
  nwkIb.panId = panId;
     f2c:	90 93 e0 07 	sts	0x07E0, r25
     f30:	80 93 df 07 	sts	0x07DF, r24
  PHY_SetPanId(panId);
     f34:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <PHY_SetPanId>
     f38:	08 95       	ret

00000f3a <NWK_OpenEndpoint>:
  @param[in] id Endpoint index (1-15)
  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
  nwkIb.endpoint[id] = handler;
     f3a:	e8 2f       	mov	r30, r24
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	ee 0f       	add	r30, r30
     f40:	ff 1f       	adc	r31, r31
     f42:	ed 51       	subi	r30, 0x1D	; 29
     f44:	f8 4f       	sbci	r31, 0xF8	; 248
     f46:	71 83       	std	Z+1, r23	; 0x01
     f48:	60 83       	st	Z, r22
     f4a:	08 95       	ret

00000f4c <NWK_Busy>:
  @brief Checks if network layer is ready for sleep
  @return @c true if network layer is ready for sleep or @c false otherwise
*****************************************************************************/
bool NWK_Busy(void)
{
  return nwkIb.lock > 0;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	20 91 03 08 	lds	r18, 0x0803
     f52:	30 91 04 08 	lds	r19, 0x0804
     f56:	23 2b       	or	r18, r19
     f58:	09 f4       	brne	.+2      	; 0xf5c <NWK_Busy+0x10>
     f5a:	80 e0       	ldi	r24, 0x00	; 0
}
     f5c:	08 95       	ret

00000f5e <NWK_SleepReq>:
/*************************************************************************//**
  @brief Puts network layer to a sleeping state
*****************************************************************************/
void NWK_SleepReq(void)
{
  PHY_Sleep();
     f5e:	0e 94 4e 0e 	call	0x1c9c	; 0x1c9c <PHY_Sleep>
     f62:	08 95       	ret

00000f64 <NWK_WakeupReq>:
/*************************************************************************//**
  @brief Puts network layer to an active state
*****************************************************************************/
void NWK_WakeupReq(void)
{
  PHY_Wakeup();
     f64:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <PHY_Wakeup>
     f68:	08 95       	ret

00000f6a <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     f6a:	0e 94 a8 09 	call	0x1350	; 0x1350 <nwkRxTaskHandler>
  nwkTxTaskHandler();
     f6e:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     f72:	0e 94 09 08 	call	0x1012	; 0x1012 <nwkDataReqTaskHandler>
     f76:	08 95       	ret

00000f78 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     f78:	e0 91 4b 04 	lds	r30, 0x044B
     f7c:	f0 91 4c 04 	lds	r31, 0x044C
     f80:	30 97       	sbiw	r30, 0x00	; 0
     f82:	d9 f0       	breq	.+54     	; 0xfba <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
     f84:	22 81       	ldd	r18, Z+2	; 0x02
     f86:	33 81       	ldd	r19, Z+3	; 0x03
     f88:	28 17       	cp	r18, r24
     f8a:	39 07       	cpc	r19, r25
     f8c:	89 f4       	brne	.+34     	; 0xfb0 <nwkDataReqTxConf+0x38>
     f8e:	05 c0       	rjmp	.+10     	; 0xf9a <nwkDataReqTxConf+0x22>
     f90:	22 81       	ldd	r18, Z+2	; 0x02
     f92:	33 81       	ldd	r19, Z+3	; 0x03
     f94:	28 17       	cp	r18, r24
     f96:	39 07       	cpc	r19, r25
     f98:	59 f4       	brne	.+22     	; 0xfb0 <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
     f9a:	dc 01       	movw	r26, r24
     f9c:	ad 57       	subi	r26, 0x7D	; 125
     f9e:	bf 4f       	sbci	r27, 0xFF	; 255
     fa0:	2c 91       	ld	r18, X
     fa2:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     fa4:	13 96       	adiw	r26, 0x03	; 3
     fa6:	2c 91       	ld	r18, X
     fa8:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     faa:	22 e0       	ldi	r18, 0x02	; 2
     fac:	24 83       	std	Z+4, r18	; 0x04
      break;
     fae:	05 c0       	rjmp	.+10     	; 0xfba <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     fb0:	01 90       	ld	r0, Z+
     fb2:	f0 81       	ld	r31, Z
     fb4:	e0 2d       	mov	r30, r0
     fb6:	30 97       	sbiw	r30, 0x00	; 0
     fb8:	59 f7       	brne	.-42     	; 0xf90 <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     fba:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <nwkFrameFree>
     fbe:	08 95       	ret

00000fc0 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     fc0:	10 92 4c 04 	sts	0x044C, r1
     fc4:	10 92 4b 04 	sts	0x044B, r1
     fc8:	08 95       	ret

00000fca <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     fca:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     fcc:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     fce:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     fd0:	13 82       	std	Z+3, r1	; 0x03
     fd2:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     fd4:	ad ed       	ldi	r26, 0xDD	; 221
     fd6:	b7 e0       	ldi	r27, 0x07	; 7
     fd8:	96 96       	adiw	r26, 0x26	; 38
     fda:	8d 91       	ld	r24, X+
     fdc:	9c 91       	ld	r25, X
     fde:	97 97       	sbiw	r26, 0x27	; 39
     fe0:	01 96       	adiw	r24, 0x01	; 1
     fe2:	97 96       	adiw	r26, 0x27	; 39
     fe4:	9c 93       	st	X, r25
     fe6:	8e 93       	st	-X, r24
     fe8:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
     fea:	80 91 4b 04 	lds	r24, 0x044B
     fee:	90 91 4c 04 	lds	r25, 0x044C
     ff2:	00 97       	sbiw	r24, 0x00	; 0
     ff4:	39 f4       	brne	.+14     	; 0x1004 <NWK_DataReq+0x3a>
  {
    req->next = NULL;
     ff6:	11 82       	std	Z+1, r1	; 0x01
     ff8:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     ffa:	f0 93 4c 04 	sts	0x044C, r31
     ffe:	e0 93 4b 04 	sts	0x044B, r30
    1002:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
    1004:	91 83       	std	Z+1, r25	; 0x01
    1006:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
    1008:	f0 93 4c 04 	sts	0x044C, r31
    100c:	e0 93 4b 04 	sts	0x044B, r30
    1010:	08 95       	ret

00001012 <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
    1012:	0f 93       	push	r16
    1014:	1f 93       	push	r17
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    101a:	e0 91 4b 04 	lds	r30, 0x044B
    101e:	f0 91 4c 04 	lds	r31, 0x044C
    1022:	30 97       	sbiw	r30, 0x00	; 0
    1024:	09 f4       	brne	.+2      	; 0x1028 <nwkDataReqTaskHandler+0x16>
    1026:	95 c0       	rjmp	.+298    	; 0x1152 <nwkDataReqTaskHandler+0x140>
    1028:	ef 01       	movw	r28, r30
  {
    switch (req->state)
    102a:	8c 81       	ldd	r24, Y+4	; 0x04
    102c:	88 23       	and	r24, r24
    102e:	21 f0       	breq	.+8      	; 0x1038 <nwkDataReqTaskHandler+0x26>
    1030:	82 30       	cpi	r24, 0x02	; 2
    1032:	09 f4       	brne	.+2      	; 0x1036 <nwkDataReqTaskHandler+0x24>
    1034:	68 c0       	rjmp	.+208    	; 0x1106 <nwkDataReqTaskHandler+0xf4>
    1036:	87 c0       	rjmp	.+270    	; 0x1146 <nwkDataReqTaskHandler+0x134>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
    1038:	0e 94 b9 08 	call	0x1172	; 0x1172 <nwkFrameAlloc>
    103c:	8c 01       	movw	r16, r24
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	21 f4       	brne	.+8      	; 0x104a <nwkDataReqTaskHandler+0x38>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
    1042:	82 e0       	ldi	r24, 0x02	; 2
    1044:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
    1046:	8f 87       	std	Y+15, r24	; 0x0f
    1048:	84 c0       	rjmp	.+264    	; 0x1152 <nwkDataReqTaskHandler+0x140>
    return;
  }

  req->frame = frame;
    104a:	9b 83       	std	Y+3, r25	; 0x03
    104c:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
    1052:	f8 01       	movw	r30, r16
    1054:	e9 57       	subi	r30, 0x79	; 121
    1056:	ff 4f       	sbci	r31, 0xFF	; 255
    1058:	8c eb       	ldi	r24, 0xBC	; 188
    105a:	97 e0       	ldi	r25, 0x07	; 7
    105c:	91 83       	std	Z+1, r25	; 0x01
    105e:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
    1060:	31 97       	sbiw	r30, 0x01	; 1
    1062:	89 85       	ldd	r24, Y+9	; 0x09
    1064:	82 fb       	bst	r24, 2
    1066:	88 27       	eor	r24, r24
    1068:	80 f9       	bld	r24, 0
    106a:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
    106c:	99 85       	ldd	r25, Y+9	; 0x09
    106e:	d8 01       	movw	r26, r16
    1070:	1b 96       	adiw	r26, 0x0b	; 11
    1072:	8c 91       	ld	r24, X
    1074:	1b 97       	sbiw	r26, 0x0b	; 11
    1076:	90 fb       	bst	r25, 0
    1078:	80 f9       	bld	r24, 0
    107a:	1b 96       	adiw	r26, 0x0b	; 11
    107c:	8c 93       	st	X, r24
    107e:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
    1080:	99 85       	ldd	r25, Y+9	; 0x09
    1082:	93 fb       	bst	r25, 3
    1084:	99 27       	eor	r25, r25
    1086:	90 f9       	bld	r25, 0
    1088:	90 fb       	bst	r25, 0
    108a:	82 f9       	bld	r24, 2
    108c:	1b 96       	adiw	r26, 0x0b	; 11
    108e:	8c 93       	st	X, r24
    1090:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    1092:	ed ed       	ldi	r30, 0xDD	; 221
    1094:	f7 e0       	ldi	r31, 0x07	; 7
    1096:	84 81       	ldd	r24, Z+4	; 0x04
    1098:	8f 5f       	subi	r24, 0xFF	; 255
    109a:	84 83       	std	Z+4, r24	; 0x04
    109c:	1c 96       	adiw	r26, 0x0c	; 12
    109e:	8c 93       	st	X, r24
    10a0:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
    10a2:	80 81       	ld	r24, Z
    10a4:	91 81       	ldd	r25, Z+1	; 0x01
    10a6:	1e 96       	adiw	r26, 0x0e	; 14
    10a8:	9c 93       	st	X, r25
    10aa:	8e 93       	st	-X, r24
    10ac:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
    10ae:	8d 81       	ldd	r24, Y+5	; 0x05
    10b0:	9e 81       	ldd	r25, Y+6	; 0x06
    10b2:	50 96       	adiw	r26, 0x10	; 16
    10b4:	9c 93       	st	X, r25
    10b6:	8e 93       	st	-X, r24
    10b8:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
    10ba:	88 85       	ldd	r24, Y+8	; 0x08
    10bc:	98 2f       	mov	r25, r24
    10be:	9f 70       	andi	r25, 0x0F	; 15
    10c0:	51 96       	adiw	r26, 0x11	; 17
    10c2:	8c 91       	ld	r24, X
    10c4:	51 97       	sbiw	r26, 0x11	; 17
    10c6:	80 7f       	andi	r24, 0xF0	; 240
    10c8:	89 2b       	or	r24, r25
    10ca:	51 96       	adiw	r26, 0x11	; 17
    10cc:	8c 93       	st	X, r24
    10ce:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
    10d0:	9f 81       	ldd	r25, Y+7	; 0x07
    10d2:	92 95       	swap	r25
    10d4:	90 7f       	andi	r25, 0xF0	; 240
    10d6:	8f 70       	andi	r24, 0x0F	; 15
    10d8:	89 2b       	or	r24, r25
    10da:	51 96       	adiw	r26, 0x11	; 17
    10dc:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
    10de:	f8 01       	movw	r30, r16
    10e0:	ef 57       	subi	r30, 0x7F	; 127
    10e2:	ff 4f       	sbci	r31, 0xFF	; 255
    10e4:	4c 85       	ldd	r20, Y+12	; 0x0c
    10e6:	50 e0       	ldi	r21, 0x00	; 0
    10e8:	6a 85       	ldd	r22, Y+10	; 0x0a
    10ea:	7b 85       	ldd	r23, Y+11	; 0x0b
    10ec:	80 81       	ld	r24, Z
    10ee:	91 81       	ldd	r25, Z+1	; 0x01
    10f0:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <memcpy>
  frame->size += req->size;
    10f4:	f8 01       	movw	r30, r16
    10f6:	91 81       	ldd	r25, Z+1	; 0x01
    10f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    10fa:	89 0f       	add	r24, r25
    10fc:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
    10fe:	c8 01       	movw	r24, r16
    1100:	0e 94 4c 0c 	call	0x1898	; 0x1898 <nwkTxFrame>
    1104:	26 c0       	rjmp	.+76     	; 0x1152 <nwkDataReqTaskHandler+0x140>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
    1106:	ce 17       	cp	r28, r30
    1108:	df 07       	cpc	r29, r31
    110a:	41 f4       	brne	.+16     	; 0x111c <nwkDataReqTaskHandler+0x10a>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
    110c:	88 81       	ld	r24, Y
    110e:	99 81       	ldd	r25, Y+1	; 0x01
    1110:	90 93 4c 04 	sts	0x044C, r25
    1114:	80 93 4b 04 	sts	0x044B, r24
    1118:	0a c0       	rjmp	.+20     	; 0x112e <nwkDataReqTaskHandler+0x11c>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
    111a:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
    111c:	80 81       	ld	r24, Z
    111e:	91 81       	ldd	r25, Z+1	; 0x01
    1120:	c8 17       	cp	r28, r24
    1122:	d9 07       	cpc	r29, r25
    1124:	d1 f7       	brne	.-12     	; 0x111a <nwkDataReqTaskHandler+0x108>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
    1126:	88 81       	ld	r24, Y
    1128:	99 81       	ldd	r25, Y+1	; 0x01
    112a:	91 83       	std	Z+1, r25	; 0x01
    112c:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
    112e:	ed ed       	ldi	r30, 0xDD	; 221
    1130:	f7 e0       	ldi	r31, 0x07	; 7
    1132:	86 a1       	ldd	r24, Z+38	; 0x26
    1134:	97 a1       	ldd	r25, Z+39	; 0x27
    1136:	01 97       	sbiw	r24, 0x01	; 1
    1138:	97 a3       	std	Z+39, r25	; 0x27
    113a:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
    113c:	ed 85       	ldd	r30, Y+13	; 0x0d
    113e:	fe 85       	ldd	r31, Y+14	; 0x0e
    1140:	ce 01       	movw	r24, r28
    1142:	09 95       	icall
    1144:	06 c0       	rjmp	.+12     	; 0x1152 <nwkDataReqTaskHandler+0x140>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
    1146:	09 90       	ld	r0, Y+
    1148:	d8 81       	ld	r29, Y
    114a:	c0 2d       	mov	r28, r0
    114c:	20 97       	sbiw	r28, 0x00	; 0
    114e:	09 f0       	breq	.+2      	; 0x1152 <nwkDataReqTaskHandler+0x140>
    1150:	6c cf       	rjmp	.-296    	; 0x102a <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
    1152:	df 91       	pop	r29
    1154:	cf 91       	pop	r28
    1156:	1f 91       	pop	r17
    1158:	0f 91       	pop	r16
    115a:	08 95       	ret

0000115c <nwkFrameInit>:
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    115c:	10 92 4d 04 	sts	0x044D, r1
    1160:	10 92 d6 04 	sts	0x04D6, r1
    1164:	10 92 5f 05 	sts	0x055F, r1
    1168:	10 92 e8 05 	sts	0x05E8, r1
    116c:	10 92 71 06 	sts	0x0671, r1
    1170:	08 95       	ret

00001172 <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
    1172:	80 91 4d 04 	lds	r24, 0x044D
    1176:	88 23       	and	r24, r24
    1178:	49 f0       	breq	.+18     	; 0x118c <nwkFrameAlloc+0x1a>
    117a:	e6 ed       	ldi	r30, 0xD6	; 214
    117c:	f4 e0       	ldi	r31, 0x04	; 4
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	ac 01       	movw	r20, r24
    1184:	20 81       	ld	r18, Z
    1186:	21 11       	cpse	r18, r1
    1188:	22 c0       	rjmp	.+68     	; 0x11ce <nwkFrameAlloc+0x5c>
    118a:	02 c0       	rjmp	.+4      	; 0x1190 <nwkFrameAlloc+0x1e>
    118c:	40 e0       	ldi	r20, 0x00	; 0
    118e:	50 e0       	ldi	r21, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
    1190:	69 e8       	ldi	r22, 0x89	; 137
    1192:	64 9f       	mul	r22, r20
    1194:	90 01       	movw	r18, r0
    1196:	65 9f       	mul	r22, r21
    1198:	30 0d       	add	r19, r0
    119a:	11 24       	eor	r1, r1
    119c:	c9 01       	movw	r24, r18
    119e:	83 5b       	subi	r24, 0xB3	; 179
    11a0:	9b 4f       	sbci	r25, 0xFB	; 251
    11a2:	fc 01       	movw	r30, r24
    11a4:	11 92       	st	Z+, r1
    11a6:	6a 95       	dec	r22
    11a8:	e9 f7       	brne	.-6      	; 0x11a4 <nwkFrameAlloc+0x32>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
    11aa:	40 e1       	ldi	r20, 0x10	; 16
    11ac:	fc 01       	movw	r30, r24
    11ae:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
    11b0:	ef 57       	subi	r30, 0x7F	; 127
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	21 5a       	subi	r18, 0xA1	; 161
    11b6:	3b 4f       	sbci	r19, 0xFB	; 251
    11b8:	31 83       	std	Z+1, r19	; 0x01
    11ba:	20 83       	st	Z, r18
      nwkIb.lock++;
    11bc:	ed ed       	ldi	r30, 0xDD	; 221
    11be:	f7 e0       	ldi	r31, 0x07	; 7
    11c0:	26 a1       	ldd	r18, Z+38	; 0x26
    11c2:	37 a1       	ldd	r19, Z+39	; 0x27
    11c4:	2f 5f       	subi	r18, 0xFF	; 255
    11c6:	3f 4f       	sbci	r19, 0xFF	; 255
    11c8:	37 a3       	std	Z+39, r19	; 0x27
    11ca:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
    11cc:	08 95       	ret
    11ce:	01 96       	adiw	r24, 0x01	; 1
    11d0:	e7 57       	subi	r30, 0x77	; 119
    11d2:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    11d4:	85 30       	cpi	r24, 0x05	; 5
    11d6:	91 05       	cpc	r25, r1
    11d8:	a1 f6       	brne	.-88     	; 0x1182 <nwkFrameAlloc+0x10>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
    11da:	80 e0       	ldi	r24, 0x00	; 0
    11dc:	90 e0       	ldi	r25, 0x00	; 0
}
    11de:	08 95       	ret

000011e0 <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
    11e0:	fc 01       	movw	r30, r24
    11e2:	10 82       	st	Z, r1
  nwkIb.lock--;
    11e4:	ed ed       	ldi	r30, 0xDD	; 221
    11e6:	f7 e0       	ldi	r31, 0x07	; 7
    11e8:	86 a1       	ldd	r24, Z+38	; 0x26
    11ea:	97 a1       	ldd	r25, Z+39	; 0x27
    11ec:	01 97       	sbiw	r24, 0x01	; 1
    11ee:	97 a3       	std	Z+39, r25	; 0x27
    11f0:	86 a3       	std	Z+38, r24	; 0x26
    11f2:	08 95       	ret

000011f4 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    11f4:	00 97       	sbiw	r24, 0x00	; 0
    11f6:	41 f0       	breq	.+16     	; 0x1208 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
    11f8:	fc 01       	movw	r30, r24
    11fa:	e7 57       	subi	r30, 0x77	; 119
    11fc:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    11fe:	86 e0       	ldi	r24, 0x06	; 6
    1200:	ea 3f       	cpi	r30, 0xFA	; 250
    1202:	f8 07       	cpc	r31, r24
    1204:	18 f0       	brcs	.+6      	; 0x120c <nwkFrameNext+0x18>
    1206:	15 c0       	rjmp	.+42     	; 0x1232 <nwkFrameNext+0x3e>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    1208:	ed e4       	ldi	r30, 0x4D	; 77
    120a:	f4 e0       	ldi	r31, 0x04	; 4
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    120c:	80 81       	ld	r24, Z
    120e:	88 23       	and	r24, r24
    1210:	39 f0       	breq	.+14     	; 0x1220 <nwkFrameNext+0x2c>
    1212:	03 c0       	rjmp	.+6      	; 0x121a <nwkFrameNext+0x26>
    1214:	80 81       	ld	r24, Z
    1216:	88 23       	and	r24, r24
    1218:	19 f0       	breq	.+6      	; 0x1220 <nwkFrameNext+0x2c>
      return frame;
    121a:	8e 2f       	mov	r24, r30
    121c:	9f 2f       	mov	r25, r31
    121e:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1220:	e7 57       	subi	r30, 0x77	; 119
    1222:	ff 4f       	sbci	r31, 0xFF	; 255
    1224:	86 e0       	ldi	r24, 0x06	; 6
    1226:	ea 3f       	cpi	r30, 0xFA	; 250
    1228:	f8 07       	cpc	r31, r24
    122a:	a0 f3       	brcs	.-24     	; 0x1214 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    122c:	80 e0       	ldi	r24, 0x00	; 0
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	08 95       	ret
    1232:	80 e0       	ldi	r24, 0x00	; 0
    1234:	90 e0       	ldi	r25, 0x00	; 0
}
    1236:	08 95       	ret

00001238 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
    1238:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
    123a:	dc 01       	movw	r26, r24
    123c:	ad 57       	subi	r26, 0x7D	; 125
    123e:	bf 4f       	sbci	r27, 0xFF	; 255
    1240:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
    1242:	ad ed       	ldi	r26, 0xDD	; 221
    1244:	b7 e0       	ldi	r27, 0x07	; 7
    1246:	14 96       	adiw	r26, 0x04	; 4
    1248:	9c 91       	ld	r25, X
    124a:	14 97       	sbiw	r26, 0x04	; 4
    124c:	9f 5f       	subi	r25, 0xFF	; 255
    124e:	14 96       	adiw	r26, 0x04	; 4
    1250:	9c 93       	st	X, r25
    1252:	14 97       	sbiw	r26, 0x04	; 4
    1254:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
    1256:	8d 91       	ld	r24, X+
    1258:	9c 91       	ld	r25, X
    125a:	96 87       	std	Z+14, r25	; 0x0e
    125c:	85 87       	std	Z+13, r24	; 0x0d
    125e:	08 95       	ret

00001260 <nwkRxServiceDataInd>:
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    1260:	dc 01       	movw	r26, r24
    1262:	19 96       	adiw	r26, 0x09	; 9
    1264:	2c 91       	ld	r18, X
    1266:	19 97       	sbiw	r26, 0x09	; 9
    1268:	22 23       	and	r18, r18
    126a:	51 f0       	breq	.+20     	; 0x1280 <nwkRxServiceDataInd+0x20>
    return false;

  switch (ind->data[0])
    126c:	17 96       	adiw	r26, 0x07	; 7
    126e:	ed 91       	ld	r30, X+
    1270:	fc 91       	ld	r31, X
    1272:	18 97       	sbiw	r26, 0x08	; 8
    1274:	20 81       	ld	r18, Z
    1276:	21 11       	cpse	r18, r1
    1278:	05 c0       	rjmp	.+10     	; 0x1284 <nwkRxServiceDataInd+0x24>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
    127a:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <nwkTxAckReceived>
    127e:	08 95       	ret
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    return false;
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	08 95       	ret
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
    1284:	80 e0       	ldi	r24, 0x00	; 0
  }
}
    1286:	08 95       	ret

00001288 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    1288:	bc 01       	movw	r22, r24
    128a:	ec e0       	ldi	r30, 0x0C	; 12
    128c:	f7 e0       	ldi	r31, 0x07	; 7
    128e:	2e e3       	ldi	r18, 0x3E	; 62
    1290:	37 e0       	ldi	r19, 0x07	; 7
  bool restart = false;
    1292:	40 e0       	ldi	r20, 0x00	; 0
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    1294:	51 e0       	ldi	r21, 0x01	; 1
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    1296:	90 81       	ld	r25, Z
    1298:	99 23       	and	r25, r25
    129a:	19 f0       	breq	.+6      	; 0x12a2 <nwkRxDuplicateRejectionTimerHandler+0x1a>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
    129c:	91 50       	subi	r25, 0x01	; 1
    129e:	90 83       	st	Z, r25
      restart = true;
    12a0:	45 2f       	mov	r20, r21
    12a2:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    12a4:	e2 17       	cp	r30, r18
    12a6:	f3 07       	cpc	r31, r19
    12a8:	b1 f7       	brne	.-20     	; 0x1296 <nwkRxDuplicateRejectionTimerHandler+0xe>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
    12aa:	44 23       	and	r20, r20
    12ac:	19 f0       	breq	.+6      	; 0x12b4 <nwkRxDuplicateRejectionTimerHandler+0x2c>
    12ae:	cb 01       	movw	r24, r22
    SYS_TimerStart(timer);
    12b0:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <SYS_TimerStart>
    12b4:	08 95       	ret

000012b6 <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    12b6:	ec e0       	ldi	r30, 0x0C	; 12
    12b8:	f7 e0       	ldi	r31, 0x07	; 7
    12ba:	8e e3       	ldi	r24, 0x3E	; 62
    12bc:	97 e0       	ldi	r25, 0x07	; 7
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
    12be:	10 82       	st	Z, r1
    12c0:	35 96       	adiw	r30, 0x05	; 5
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    12c2:	e8 17       	cp	r30, r24
    12c4:	f9 07       	cpc	r31, r25
    12c6:	d9 f7       	brne	.-10     	; 0x12be <nwkRxInit+0x8>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    12c8:	ea ef       	ldi	r30, 0xFA	; 250
    12ca:	f6 e0       	ldi	r31, 0x06	; 6
    12cc:	84 e6       	ldi	r24, 0x64	; 100
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	a0 e0       	ldi	r26, 0x00	; 0
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	86 83       	std	Z+6, r24	; 0x06
    12d6:	97 83       	std	Z+7, r25	; 0x07
    12d8:	a0 87       	std	Z+8, r26	; 0x08
    12da:	b1 87       	std	Z+9, r27	; 0x09
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    12dc:	12 86       	std	Z+10, r1	; 0x0a
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
    12de:	84 e4       	ldi	r24, 0x44	; 68
    12e0:	99 e0       	ldi	r25, 0x09	; 9
    12e2:	94 87       	std	Z+12, r25	; 0x0c
    12e4:	83 87       	std	Z+11, r24	; 0x0b

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
    12e6:	60 e3       	ldi	r22, 0x30	; 48
    12e8:	79 e0       	ldi	r23, 0x09	; 9
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	0e 94 9d 07 	call	0xf3a	; 0xf3a <NWK_OpenEndpoint>
    12f0:	08 95       	ret

000012f2 <PHY_DataInd>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
  NwkFrame_t *frame;

  if (0x88 != ind->data[1] || (0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
    12f6:	dc 01       	movw	r26, r24
    12f8:	ed 91       	ld	r30, X+
    12fa:	fc 91       	ld	r31, X
    12fc:	11 97       	sbiw	r26, 0x01	; 1
    12fe:	21 81       	ldd	r18, Z+1	; 0x01
    1300:	28 38       	cpi	r18, 0x88	; 136
    1302:	01 f5       	brne	.+64     	; 0x1344 <PHY_DataInd+0x52>
    1304:	20 81       	ld	r18, Z
    1306:	2f 7d       	andi	r18, 0xDF	; 223
    1308:	21 34       	cpi	r18, 0x41	; 65
    130a:	e1 f4       	brne	.+56     	; 0x1344 <PHY_DataInd+0x52>
    130c:	12 96       	adiw	r26, 0x02	; 2
    130e:	2c 91       	ld	r18, X
    1310:	20 31       	cpi	r18, 0x10	; 16
    1312:	c0 f0       	brcs	.+48     	; 0x1344 <PHY_DataInd+0x52>
    1314:	ec 01       	movw	r28, r24
      ind->size < sizeof(NwkFrameHeader_t))
    return;

  if (NULL == (frame = nwkFrameAlloc()))
    1316:	0e 94 b9 08 	call	0x1172	; 0x1172 <nwkFrameAlloc>
    131a:	00 97       	sbiw	r24, 0x00	; 0
    131c:	99 f0       	breq	.+38     	; 0x1344 <PHY_DataInd+0x52>
    return;

  frame->state = NWK_RX_STATE_RECEIVED;
    131e:	20 e2       	ldi	r18, 0x20	; 32
    1320:	fc 01       	movw	r30, r24
    1322:	20 83       	st	Z, r18
  frame->size = ind->size;
    1324:	2a 81       	ldd	r18, Y+2	; 0x02
    1326:	21 83       	std	Z+1, r18	; 0x01
  frame->rx.lqi = ind->lqi;
    1328:	2b 81       	ldd	r18, Y+3	; 0x03
    132a:	ed 57       	subi	r30, 0x7D	; 125
    132c:	ff 4f       	sbci	r31, 0xFF	; 255
    132e:	20 83       	st	Z, r18
  frame->rx.rssi = ind->rssi;
    1330:	2c 81       	ldd	r18, Y+4	; 0x04
    1332:	31 96       	adiw	r30, 0x01	; 1
    1334:	20 83       	st	Z, r18
  memcpy(frame->data, ind->data, ind->size);
    1336:	4a 81       	ldd	r20, Y+2	; 0x02
    1338:	50 e0       	ldi	r21, 0x00	; 0
    133a:	68 81       	ld	r22, Y
    133c:	79 81       	ldd	r23, Y+1	; 0x01
    133e:	02 96       	adiw	r24, 0x02	; 2
    1340:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <memcpy>
}
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	08 95       	ret

0000134a <NWK_SetAckControl>:

/*************************************************************************//**
*****************************************************************************/
void NWK_SetAckControl(uint8_t control)
{
  nwkRxAckControl = control;
    134a:	80 93 07 07 	sts	0x0707, r24
    134e:	08 95       	ret

00001350 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
    1350:	2f 92       	push	r2
    1352:	3f 92       	push	r3
    1354:	4f 92       	push	r4
    1356:	5f 92       	push	r5
    1358:	6f 92       	push	r6
    135a:	7f 92       	push	r7
    135c:	8f 92       	push	r8
    135e:	9f 92       	push	r9
    1360:	af 92       	push	r10
    1362:	bf 92       	push	r11
    1364:	cf 92       	push	r12
    1366:	df 92       	push	r13
    1368:	ef 92       	push	r14
    136a:	ff 92       	push	r15
    136c:	0f 93       	push	r16
    136e:	1f 93       	push	r17
    1370:	cf 93       	push	r28
    1372:	df 93       	push	r29
    1374:	cd b7       	in	r28, 0x3d	; 61
    1376:	de b7       	in	r29, 0x3e	; 62
    1378:	2c 97       	sbiw	r28, 0x0c	; 12
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	f8 94       	cli
    137e:	de bf       	out	0x3e, r29	; 62
    1380:	0f be       	out	0x3f, r0	; 63
    1382:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
    1384:	00 e0       	ldi	r16, 0x00	; 0
    1386:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    1388:	0f 2e       	mov	r0, r31
    138a:	f4 e2       	ldi	r31, 0x24	; 36
    138c:	df 2e       	mov	r13, r31
    138e:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    1390:	0f 2e       	mov	r0, r31
    1392:	fd ed       	ldi	r31, 0xDD	; 221
    1394:	8f 2e       	mov	r8, r31
    1396:	f7 e0       	ldi	r31, 0x07	; 7
    1398:	9f 2e       	mov	r9, r31
    139a:	f0 2d       	mov	r31, r0
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    139c:	68 94       	set
    139e:	cc 24       	eor	r12, r12
    13a0:	c4 f8       	bld	r12, 4
    13a2:	0f 2e       	mov	r0, r31
    13a4:	fc e0       	ldi	r31, 0x0C	; 12
    13a6:	4f 2e       	mov	r4, r31
    13a8:	f7 e0       	ldi	r31, 0x07	; 7
    13aa:	5f 2e       	mov	r5, r31
    13ac:	f0 2d       	mov	r31, r0
    13ae:	0f 2e       	mov	r0, r31
    13b0:	f8 e0       	ldi	r31, 0x08	; 8
    13b2:	6f 2e       	mov	r6, r31
    13b4:	f7 e0       	ldi	r31, 0x07	; 7
    13b6:	7f 2e       	mov	r7, r31
    13b8:	f0 2d       	mov	r31, r0
    13ba:	0f 2e       	mov	r0, r31
    13bc:	fa e3       	ldi	r31, 0x3A	; 58
    13be:	ef 2e       	mov	r14, r31
    13c0:	f7 e0       	ldi	r31, 0x07	; 7
    13c2:	ff 2e       	mov	r15, r31
    13c4:	f0 2d       	mov	r31, r0
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
    13c6:	31 2c       	mov	r3, r1
    13c8:	21 2c       	mov	r2, r1
    13ca:	58 01       	movw	r10, r16
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    13cc:	a8 c1       	rjmp	.+848    	; 0x171e <nwkRxTaskHandler+0x3ce>
  {
    switch (frame->state)
    13ce:	d5 01       	movw	r26, r10
    13d0:	8c 91       	ld	r24, X
    13d2:	82 32       	cpi	r24, 0x22	; 34
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <nwkRxTaskHandler+0x88>
    13d6:	d1 c0       	rjmp	.+418    	; 0x157a <nwkRxTaskHandler+0x22a>
    13d8:	84 32       	cpi	r24, 0x24	; 36
    13da:	09 f4       	brne	.+2      	; 0x13de <nwkRxTaskHandler+0x8e>
    13dc:	9d c1       	rjmp	.+826    	; 0x1718 <nwkRxTaskHandler+0x3c8>
    13de:	80 32       	cpi	r24, 0x20	; 32
    13e0:	09 f0       	breq	.+2      	; 0x13e4 <nwkRxTaskHandler+0x94>
    13e2:	9d c1       	rjmp	.+826    	; 0x171e <nwkRxTaskHandler+0x3ce>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
    13e4:	dc 92       	st	X, r13

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
    13e6:	1b 96       	adiw	r26, 0x0b	; 11
    13e8:	8c 91       	ld	r24, X
    13ea:	1b 97       	sbiw	r26, 0x0b	; 11
    13ec:	98 2f       	mov	r25, r24
    13ee:	9a 70       	andi	r25, 0x0A	; 10

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
    13f0:	09 f0       	breq	.+2      	; 0x13f4 <nwkRxTaskHandler+0xa4>
    13f2:	95 c1       	rjmp	.+810    	; 0x171e <nwkRxTaskHandler+0x3ce>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
    13f4:	15 96       	adiw	r26, 0x05	; 5
    13f6:	2d 91       	ld	r18, X+
    13f8:	3c 91       	ld	r19, X
    13fa:	16 97       	sbiw	r26, 0x06	; 6
    13fc:	2f 3f       	cpi	r18, 0xFF	; 255
    13fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1400:	81 f4       	brne	.+32     	; 0x1422 <nwkRxTaskHandler+0xd2>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1402:	f5 01       	movw	r30, r10
    1404:	87 85       	ldd	r24, Z+15	; 0x0f
    1406:	90 89       	ldd	r25, Z+16	; 0x10
    1408:	d4 01       	movw	r26, r8
    140a:	2d 91       	ld	r18, X+
    140c:	3c 91       	ld	r19, X
    140e:	28 17       	cp	r18, r24
    1410:	39 07       	cpc	r19, r25
    1412:	19 f0       	breq	.+6      	; 0x141a <nwkRxTaskHandler+0xca>
    1414:	01 96       	adiw	r24, 0x01	; 1
    1416:	09 f0       	breq	.+2      	; 0x141a <nwkRxTaskHandler+0xca>
    1418:	82 c1       	rjmp	.+772    	; 0x171e <nwkRxTaskHandler+0x3ce>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    141a:	22 e2       	ldi	r18, 0x22	; 34
    141c:	f5 01       	movw	r30, r10
    141e:	20 83       	st	Z, r18
    1420:	7e c1       	rjmp	.+764    	; 0x171e <nwkRxTaskHandler+0x3ce>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    1422:	d5 01       	movw	r26, r10
    1424:	1f 96       	adiw	r26, 0x0f	; 15
    1426:	2d 91       	ld	r18, X+
    1428:	3c 91       	ld	r19, X
    142a:	50 97       	sbiw	r26, 0x10	; 16
    142c:	2f 3f       	cpi	r18, 0xFF	; 255
    142e:	3f 4f       	sbci	r19, 0xFF	; 255
    1430:	09 f0       	breq	.+2      	; 0x1434 <nwkRxTaskHandler+0xe4>
    1432:	7d c1       	rjmp	.+762    	; 0x172e <nwkRxTaskHandler+0x3de>
    1434:	80 ff       	sbrs	r24, 0
    1436:	7b c1       	rjmp	.+758    	; 0x172e <nwkRxTaskHandler+0x3de>
    1438:	72 c1       	rjmp	.+740    	; 0x171e <nwkRxTaskHandler+0x3ce>
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
    143a:	8c 01       	movw	r16, r24

    if (entry->ttl && header->nwkSrcAddr == entry->src)
    143c:	2c 91       	ld	r18, X
    143e:	22 23       	and	r18, r18
    1440:	09 f4       	brne	.+2      	; 0x1444 <nwkRxTaskHandler+0xf4>
    1442:	56 c0       	rjmp	.+172    	; 0x14f0 <nwkRxTaskHandler+0x1a0>
    1444:	20 81       	ld	r18, Z
    1446:	31 81       	ldd	r19, Z+1	; 0x01
    1448:	42 17       	cp	r20, r18
    144a:	53 07       	cpc	r21, r19
    144c:	09 f0       	breq	.+2      	; 0x1450 <nwkRxTaskHandler+0x100>
    144e:	51 c0       	rjmp	.+162    	; 0x14f2 <nwkRxTaskHandler+0x1a2>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
    1450:	f5 01       	movw	r30, r10
    1452:	94 85       	ldd	r25, Z+12	; 0x0c
    1454:	f8 01       	movw	r30, r16
    1456:	ee 0f       	add	r30, r30
    1458:	ff 1f       	adc	r31, r31
    145a:	ee 0f       	add	r30, r30
    145c:	ff 1f       	adc	r31, r31
    145e:	e0 0f       	add	r30, r16
    1460:	f1 1f       	adc	r31, r17
    1462:	e8 5f       	subi	r30, 0xF8	; 248
    1464:	f8 4f       	sbci	r31, 0xF8	; 248
    1466:	82 81       	ldd	r24, Z+2	; 0x02
    1468:	89 1b       	sub	r24, r25

      if (diff < 8)
    146a:	88 30       	cpi	r24, 0x08	; 8
    146c:	38 f5       	brcc	.+78     	; 0x14bc <nwkRxTaskHandler+0x16c>
      {
        if (entry->mask & (1 << diff))
    146e:	f8 01       	movw	r30, r16
    1470:	ee 0f       	add	r30, r30
    1472:	ff 1f       	adc	r31, r31
    1474:	ee 0f       	add	r30, r30
    1476:	ff 1f       	adc	r31, r31
    1478:	e0 0f       	add	r30, r16
    147a:	f1 1f       	adc	r31, r17
    147c:	e8 5f       	subi	r30, 0xF8	; 248
    147e:	f8 4f       	sbci	r31, 0xF8	; 248
    1480:	93 81       	ldd	r25, Z+3	; 0x03
    1482:	29 2f       	mov	r18, r25
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	08 2e       	mov	r0, r24
    1488:	02 c0       	rjmp	.+4      	; 0x148e <nwkRxTaskHandler+0x13e>
    148a:	35 95       	asr	r19
    148c:	27 95       	ror	r18
    148e:	0a 94       	dec	r0
    1490:	e2 f7       	brpl	.-8      	; 0x148a <nwkRxTaskHandler+0x13a>
    1492:	20 fd       	sbrc	r18, 0
    1494:	44 c1       	rjmp	.+648    	; 0x171e <nwkRxTaskHandler+0x3ce>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
    1496:	f8 01       	movw	r30, r16
    1498:	ee 0f       	add	r30, r30
    149a:	ff 1f       	adc	r31, r31
    149c:	ee 0f       	add	r30, r30
    149e:	ff 1f       	adc	r31, r31
    14a0:	e0 0f       	add	r30, r16
    14a2:	f1 1f       	adc	r31, r17
    14a4:	e8 5f       	subi	r30, 0xF8	; 248
    14a6:	f8 4f       	sbci	r31, 0xF8	; 248
    14a8:	21 e0       	ldi	r18, 0x01	; 1
    14aa:	30 e0       	ldi	r19, 0x00	; 0
    14ac:	02 c0       	rjmp	.+4      	; 0x14b2 <nwkRxTaskHandler+0x162>
    14ae:	22 0f       	add	r18, r18
    14b0:	33 1f       	adc	r19, r19
    14b2:	8a 95       	dec	r24
    14b4:	e2 f7       	brpl	.-8      	; 0x14ae <nwkRxTaskHandler+0x15e>
    14b6:	92 2b       	or	r25, r18
    14b8:	93 83       	std	Z+3, r25	; 0x03
    14ba:	49 c1       	rjmp	.+658    	; 0x174e <nwkRxTaskHandler+0x3fe>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
    14bc:	f8 01       	movw	r30, r16
    14be:	ee 0f       	add	r30, r30
    14c0:	ff 1f       	adc	r31, r31
    14c2:	ee 0f       	add	r30, r30
    14c4:	ff 1f       	adc	r31, r31
    14c6:	0e 0f       	add	r16, r30
    14c8:	1f 1f       	adc	r17, r31
    14ca:	f8 01       	movw	r30, r16
    14cc:	e8 5f       	subi	r30, 0xF8	; 248
    14ce:	f8 4f       	sbci	r31, 0xF8	; 248
    14d0:	92 83       	std	Z+2, r25	; 0x02
        entry->mask = (entry->mask << shift) | 1;
    14d2:	23 81       	ldd	r18, Z+3	; 0x03
    14d4:	30 e0       	ldi	r19, 0x00	; 0
        entry->mask |= (1 << diff);
        return false;
      }
      else
      {
        uint8_t shift = -(int8_t)diff;
    14d6:	81 95       	neg	r24

        entry->seq = header->nwkSeq;
        entry->mask = (entry->mask << shift) | 1;
    14d8:	a9 01       	movw	r20, r18
    14da:	02 c0       	rjmp	.+4      	; 0x14e0 <nwkRxTaskHandler+0x190>
    14dc:	44 0f       	add	r20, r20
    14de:	55 1f       	adc	r21, r21
    14e0:	8a 95       	dec	r24
    14e2:	e2 f7       	brpl	.-8      	; 0x14dc <nwkRxTaskHandler+0x18c>
    14e4:	ca 01       	movw	r24, r20
    14e6:	81 60       	ori	r24, 0x01	; 1
    14e8:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
    14ea:	8b e0       	ldi	r24, 0x0B	; 11
    14ec:	84 83       	std	Z+4, r24	; 0x04
    14ee:	2f c1       	rjmp	.+606    	; 0x174e <nwkRxTaskHandler+0x3fe>
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
    14f0:	bf 01       	movw	r22, r30
    14f2:	01 96       	adiw	r24, 0x01	; 1
    14f4:	15 96       	adiw	r26, 0x05	; 5
    14f6:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    14f8:	ee 15       	cp	r30, r14
    14fa:	ff 05       	cpc	r31, r15
    14fc:	09 f0       	breq	.+2      	; 0x1500 <nwkRxTaskHandler+0x1b0>
    14fe:	9d cf       	rjmp	.-198    	; 0x143a <nwkRxTaskHandler+0xea>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
    1500:	61 15       	cp	r22, r1
    1502:	71 05       	cpc	r23, r1
    1504:	09 f4       	brne	.+2      	; 0x1508 <nwkRxTaskHandler+0x1b8>
    1506:	0b c1       	rjmp	.+534    	; 0x171e <nwkRxTaskHandler+0x3ce>
    return true;

  freeEntry->src = header->nwkSrcAddr;
    1508:	db 01       	movw	r26, r22
    150a:	11 96       	adiw	r26, 0x01	; 1
    150c:	5c 93       	st	X, r21
    150e:	4e 93       	st	-X, r20
  freeEntry->seq = header->nwkSeq;
    1510:	f5 01       	movw	r30, r10
    1512:	84 85       	ldd	r24, Z+12	; 0x0c
    1514:	12 96       	adiw	r26, 0x02	; 2
    1516:	8c 93       	st	X, r24
    1518:	12 97       	sbiw	r26, 0x02	; 2
  freeEntry->mask = 1;
    151a:	f1 e0       	ldi	r31, 0x01	; 1
    151c:	13 96       	adiw	r26, 0x03	; 3
    151e:	fc 93       	st	X, r31
    1520:	13 97       	sbiw	r26, 0x03	; 3
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
    1522:	8b e0       	ldi	r24, 0x0B	; 11
    1524:	14 96       	adiw	r26, 0x04	; 4
    1526:	8c 93       	st	X, r24

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
    1528:	8a ef       	ldi	r24, 0xFA	; 250
    152a:	96 e0       	ldi	r25, 0x06	; 6
    152c:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <SYS_TimerStart>
    1530:	0e c1       	rjmp	.+540    	; 0x174e <nwkRxTaskHandler+0x3fe>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    1532:	d5 01       	movw	r26, r10
    1534:	1f 96       	adiw	r26, 0x0f	; 15
    1536:	8d 91       	ld	r24, X+
    1538:	9c 91       	ld	r25, X
    153a:	50 97       	sbiw	r26, 0x10	; 16
    153c:	f4 01       	movw	r30, r8
    153e:	20 81       	ld	r18, Z
    1540:	31 81       	ldd	r19, Z+1	; 0x01
    1542:	28 17       	cp	r18, r24
    1544:	39 07       	cpc	r19, r25
    1546:	a9 f0       	breq	.+42     	; 0x1572 <nwkRxTaskHandler+0x222>
        0 == header->nwkFcf.linkLocal)
    1548:	1b 96       	adiw	r26, 0x0b	; 11
    154a:	2c 91       	ld	r18, X
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    154c:	22 fd       	sbrc	r18, 2
    154e:	0e c0       	rjmp	.+28     	; 0x156c <nwkRxTaskHandler+0x21c>
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
    1550:	c5 01       	movw	r24, r10
    1552:	0e 94 9b 0c 	call	0x1936	; 0x1936 <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
    1556:	d5 01       	movw	r26, r10
    1558:	1f 96       	adiw	r26, 0x0f	; 15
    155a:	8d 91       	ld	r24, X+
    155c:	9c 91       	ld	r25, X
    155e:	50 97       	sbiw	r26, 0x10	; 16
    1560:	f4 01       	movw	r30, r8
    1562:	20 81       	ld	r18, Z
    1564:	31 81       	ldd	r19, Z+1	; 0x01
    1566:	28 17       	cp	r18, r24
    1568:	39 07       	cpc	r19, r25
    156a:	19 f0       	breq	.+6      	; 0x1572 <nwkRxTaskHandler+0x222>
    156c:	01 96       	adiw	r24, 0x01	; 1
    156e:	09 f0       	breq	.+2      	; 0x1572 <nwkRxTaskHandler+0x222>
    1570:	d6 c0       	rjmp	.+428    	; 0x171e <nwkRxTaskHandler+0x3ce>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
    1572:	e2 e2       	ldi	r30, 0x22	; 34
    1574:	d5 01       	movw	r26, r10
    1576:	ec 93       	st	X, r30
    1578:	d2 c0       	rjmp	.+420    	; 0x171e <nwkRxTaskHandler+0x3ce>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
    157a:	10 92 07 07 	sts	0x0707, r1
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    157e:	d5 01       	movw	r26, r10
    1580:	51 96       	adiw	r26, 0x11	; 17
    1582:	2c 91       	ld	r18, X
    1584:	51 97       	sbiw	r26, 0x11	; 17
    1586:	22 95       	swap	r18
    1588:	2f 70       	andi	r18, 0x0F	; 15
    158a:	e2 2f       	mov	r30, r18
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	ee 0f       	add	r30, r30
    1590:	ff 1f       	adc	r31, r31
    1592:	ed 51       	subi	r30, 0x1D	; 29
    1594:	f8 4f       	sbci	r31, 0xF8	; 248
    1596:	01 90       	ld	r0, Z+
    1598:	f0 81       	ld	r31, Z
    159a:	e0 2d       	mov	r30, r0
    159c:	30 97       	sbiw	r30, 0x00	; 0
    159e:	09 f4       	brne	.+2      	; 0x15a2 <nwkRxTaskHandler+0x252>
    15a0:	61 c0       	rjmp	.+194    	; 0x1664 <nwkRxTaskHandler+0x314>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
    15a2:	1d 96       	adiw	r26, 0x0d	; 13
    15a4:	8d 91       	ld	r24, X+
    15a6:	9c 91       	ld	r25, X
    15a8:	1e 97       	sbiw	r26, 0x0e	; 14
    15aa:	9a 83       	std	Y+2, r25	; 0x02
    15ac:	89 83       	std	Y+1, r24	; 0x01
  ind.dstAddr = header->nwkDstAddr;
    15ae:	1f 96       	adiw	r26, 0x0f	; 15
    15b0:	4d 91       	ld	r20, X+
    15b2:	5c 91       	ld	r21, X
    15b4:	50 97       	sbiw	r26, 0x10	; 16
    15b6:	5c 83       	std	Y+4, r21	; 0x04
    15b8:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
    15ba:	51 96       	adiw	r26, 0x11	; 17
    15bc:	3c 91       	ld	r19, X
    15be:	51 97       	sbiw	r26, 0x11	; 17
    15c0:	3f 70       	andi	r19, 0x0F	; 15
    15c2:	3d 83       	std	Y+5, r19	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
    15c4:	2e 83       	std	Y+6, r18	; 0x06
  ind.data = frame->payload;
    15c6:	af 57       	subi	r26, 0x7F	; 127
    15c8:	bf 4f       	sbci	r27, 0xFF	; 255
    15ca:	6d 91       	ld	r22, X+
    15cc:	7c 91       	ld	r23, X
    15ce:	79 87       	std	Y+9, r23	; 0x09
    15d0:	68 87       	std	Y+8, r22	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
    15d2:	95 01       	movw	r18, r10
    15d4:	2e 5f       	subi	r18, 0xFE	; 254
    15d6:	3f 4f       	sbci	r19, 0xFF	; 255
    15d8:	26 1b       	sub	r18, r22
    15da:	37 0b       	sbc	r19, r23
    15dc:	d5 01       	movw	r26, r10
    15de:	11 96       	adiw	r26, 0x01	; 1
    15e0:	3c 91       	ld	r19, X
    15e2:	11 97       	sbiw	r26, 0x01	; 1
    15e4:	23 0f       	add	r18, r19
  ind.size = nwkFramePayloadSize(frame);
    15e6:	2a 87       	std	Y+10, r18	; 0x0a
  ind.lqi = frame->rx.lqi;
    15e8:	ad 57       	subi	r26, 0x7D	; 125
    15ea:	bf 4f       	sbci	r27, 0xFF	; 255
    15ec:	2c 91       	ld	r18, X
    15ee:	2b 87       	std	Y+11, r18	; 0x0b
  ind.rssi = frame->rx.rssi;
    15f0:	11 96       	adiw	r26, 0x01	; 1
    15f2:	2c 91       	ld	r18, X
    15f4:	2c 87       	std	Y+12, r18	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
    15f6:	d5 01       	movw	r26, r10
    15f8:	1b 96       	adiw	r26, 0x0b	; 11
    15fa:	3c 91       	ld	r19, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
    15fc:	63 2f       	mov	r22, r19
    15fe:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
    1600:	32 fd       	sbrc	r19, 2
    1602:	02 c0       	rjmp	.+4      	; 0x1608 <nwkRxTaskHandler+0x2b8>
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	01 c0       	rjmp	.+2      	; 0x160a <nwkRxTaskHandler+0x2ba>
    1608:	20 e2       	ldi	r18, 0x20	; 32
    160a:	26 2b       	or	r18, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
    160c:	33 fd       	sbrc	r19, 3
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <nwkRxTaskHandler+0x2c4>
    1610:	30 e0       	ldi	r19, 0x00	; 0
    1612:	01 c0       	rjmp	.+2      	; 0x1616 <nwkRxTaskHandler+0x2c6>
    1614:	30 e4       	ldi	r19, 0x40	; 64
    1616:	23 2b       	or	r18, r19
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
    1618:	4f 3f       	cpi	r20, 0xFF	; 255
    161a:	5f 4f       	sbci	r21, 0xFF	; 255
    161c:	11 f0       	breq	.+4      	; 0x1622 <nwkRxTaskHandler+0x2d2>
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	01 c0       	rjmp	.+2      	; 0x1624 <nwkRxTaskHandler+0x2d4>
    1622:	34 e0       	ldi	r19, 0x04	; 4
    1624:	23 2b       	or	r18, r19
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
    1626:	d5 01       	movw	r26, r10
    1628:	19 96       	adiw	r26, 0x09	; 9
    162a:	4d 91       	ld	r20, X+
    162c:	5c 91       	ld	r21, X
    162e:	1a 97       	sbiw	r26, 0x0a	; 10
    1630:	84 17       	cp	r24, r20
    1632:	95 07       	cpc	r25, r21
    1634:	11 f0       	breq	.+4      	; 0x163a <nwkRxTaskHandler+0x2ea>
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	01 c0       	rjmp	.+2      	; 0x163c <nwkRxTaskHandler+0x2ec>
    163a:	98 e0       	ldi	r25, 0x08	; 8
    163c:	82 2f       	mov	r24, r18
    163e:	89 2b       	or	r24, r25
    1640:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
    1642:	d5 01       	movw	r26, r10
    1644:	15 96       	adiw	r26, 0x05	; 5
    1646:	2d 91       	ld	r18, X+
    1648:	3c 91       	ld	r19, X
    164a:	16 97       	sbiw	r26, 0x06	; 6
    164c:	2f 3f       	cpi	r18, 0xFF	; 255
    164e:	3f 4f       	sbci	r19, 0xFF	; 255
    1650:	11 f0       	breq	.+4      	; 0x1656 <nwkRxTaskHandler+0x306>
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	01 c0       	rjmp	.+2      	; 0x1658 <nwkRxTaskHandler+0x308>
    1656:	9c 2d       	mov	r25, r12
    1658:	89 2b       	or	r24, r25
    165a:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
    165c:	ce 01       	movw	r24, r28
    165e:	01 96       	adiw	r24, 0x01	; 1
    1660:	09 95       	icall
    1662:	01 c0       	rjmp	.+2      	; 0x1666 <nwkRxTaskHandler+0x316>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
    1664:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
    1666:	f5 01       	movw	r30, r10
    1668:	93 85       	ldd	r25, Z+11	; 0x0b
    166a:	90 ff       	sbrs	r25, 0
    ack = false;
    166c:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
    166e:	d5 01       	movw	r26, r10
    1670:	17 96       	adiw	r26, 0x07	; 7
    1672:	2d 91       	ld	r18, X+
    1674:	3c 91       	ld	r19, X
    1676:	18 97       	sbiw	r26, 0x08	; 8
    1678:	2f 3f       	cpi	r18, 0xFF	; 255
    167a:	3f 4f       	sbci	r19, 0xFF	; 255
    167c:	69 f4       	brne	.+26     	; 0x1698 <nwkRxTaskHandler+0x348>
    167e:	f4 01       	movw	r30, r8
    1680:	40 81       	ld	r20, Z
    1682:	51 81       	ldd	r21, Z+1	; 0x01
    1684:	d5 01       	movw	r26, r10
    1686:	1f 96       	adiw	r26, 0x0f	; 15
    1688:	2d 91       	ld	r18, X+
    168a:	3c 91       	ld	r19, X
    168c:	50 97       	sbiw	r26, 0x10	; 16
    168e:	42 17       	cp	r20, r18
    1690:	53 07       	cpc	r21, r19
    1692:	11 f4       	brne	.+4      	; 0x1698 <nwkRxTaskHandler+0x348>
      nwkIb.addr == frame->header.nwkDstAddr &&
    1694:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
    1696:	81 e0       	ldi	r24, 0x01	; 1

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    1698:	f5 01       	movw	r30, r10
    169a:	25 81       	ldd	r18, Z+5	; 0x05
    169c:	36 81       	ldd	r19, Z+6	; 0x06
    169e:	2f 3f       	cpi	r18, 0xFF	; 255
    16a0:	3f 4f       	sbci	r19, 0xFF	; 255
    16a2:	b9 f1       	breq	.+110    	; 0x1712 <nwkRxTaskHandler+0x3c2>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
    16a4:	d4 01       	movw	r26, r8
    16a6:	2d 91       	ld	r18, X+
    16a8:	3c 91       	ld	r19, X
    16aa:	2f 3f       	cpi	r18, 0xFF	; 255
    16ac:	3f 4f       	sbci	r19, 0xFF	; 255
    16ae:	89 f1       	breq	.+98     	; 0x1712 <nwkRxTaskHandler+0x3c2>
    ack = false;

  if (ack)
    16b0:	88 23       	and	r24, r24
    16b2:	79 f1       	breq	.+94     	; 0x1712 <nwkRxTaskHandler+0x3c2>
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
    16b4:	0e 94 b9 08 	call	0x1172	; 0x1172 <nwkFrameAlloc>
    16b8:	8c 01       	movw	r16, r24
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	51 f1       	breq	.+84     	; 0x1712 <nwkRxTaskHandler+0x3c2>
    return;

  nwkFrameCommandInit(ack);
    16be:	0e 94 1c 09 	call	0x1238	; 0x1238 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
    16c2:	f8 01       	movw	r30, r16
    16c4:	81 81       	ldd	r24, Z+1	; 0x01
    16c6:	8d 5f       	subi	r24, 0xFD	; 253
    16c8:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
    16ca:	e9 57       	subi	r30, 0x79	; 121
    16cc:	ff 4f       	sbci	r31, 0xFF	; 255
    16ce:	11 82       	std	Z+1, r1	; 0x01
    16d0:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
    16d2:	d5 01       	movw	r26, r10
    16d4:	1b 96       	adiw	r26, 0x0b	; 11
    16d6:	8c 91       	ld	r24, X
    16d8:	1b 97       	sbiw	r26, 0x0b	; 11
    16da:	86 95       	lsr	r24
    16dc:	81 70       	andi	r24, 0x01	; 1
    16de:	f8 01       	movw	r30, r16
    16e0:	93 85       	ldd	r25, Z+11	; 0x0b
    16e2:	80 fb       	bst	r24, 0
    16e4:	91 f9       	bld	r25, 1
    16e6:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
    16e8:	1d 96       	adiw	r26, 0x0d	; 13
    16ea:	8d 91       	ld	r24, X+
    16ec:	9c 91       	ld	r25, X
    16ee:	1e 97       	sbiw	r26, 0x0e	; 14
    16f0:	90 8b       	std	Z+16, r25	; 0x10
    16f2:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
    16f4:	ef 57       	subi	r30, 0x7F	; 127
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	01 90       	ld	r0, Z+
    16fa:	f0 81       	ld	r31, Z
    16fc:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
    16fe:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
    1700:	80 91 07 07 	lds	r24, 0x0707
    1704:	82 83       	std	Z+2, r24	; 0x02
  command->seq = frame->header.nwkSeq;
    1706:	1c 96       	adiw	r26, 0x0c	; 12
    1708:	8c 91       	ld	r24, X
    170a:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(ack);
    170c:	c8 01       	movw	r24, r16
    170e:	0e 94 4c 0c 	call	0x1898	; 0x1898 <nwkTxFrame>
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
    1712:	d5 01       	movw	r26, r10
    1714:	dc 92       	st	X, r13
    1716:	03 c0       	rjmp	.+6      	; 0x171e <nwkRxTaskHandler+0x3ce>
      } break;
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
    1718:	c5 01       	movw	r24, r10
    171a:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    171e:	c5 01       	movw	r24, r10
    1720:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <nwkFrameNext>
    1724:	5c 01       	movw	r10, r24
    1726:	89 2b       	or	r24, r25
    1728:	09 f0       	breq	.+2      	; 0x172c <nwkRxTaskHandler+0x3dc>
    172a:	51 ce       	rjmp	.-862    	; 0x13ce <nwkRxTaskHandler+0x7e>
    172c:	17 c0       	rjmp	.+46     	; 0x175c <nwkRxTaskHandler+0x40c>
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
    172e:	f5 01       	movw	r30, r10
    1730:	45 85       	ldd	r20, Z+13	; 0x0d
    1732:	56 85       	ldd	r21, Z+14	; 0x0e
    1734:	d4 01       	movw	r26, r8
    1736:	8d 91       	ld	r24, X+
    1738:	9c 91       	ld	r25, X
    173a:	84 17       	cp	r24, r20
    173c:	95 07       	cpc	r25, r21
    173e:	79 f3       	breq	.-34     	; 0x171e <nwkRxTaskHandler+0x3ce>
    1740:	d2 01       	movw	r26, r4
    1742:	f3 01       	movw	r30, r6
    1744:	83 2d       	mov	r24, r3
    1746:	92 2d       	mov	r25, r2
    1748:	63 2d       	mov	r22, r3
    174a:	72 2d       	mov	r23, r2
    174c:	76 ce       	rjmp	.-788    	; 0x143a <nwkRxTaskHandler+0xea>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
    174e:	f5 01       	movw	r30, r10
    1750:	87 81       	ldd	r24, Z+7	; 0x07
    1752:	90 85       	ldd	r25, Z+8	; 0x08
    1754:	01 96       	adiw	r24, 0x01	; 1
    1756:	09 f0       	breq	.+2      	; 0x175a <nwkRxTaskHandler+0x40a>
    1758:	fe ce       	rjmp	.-516    	; 0x1556 <nwkRxTaskHandler+0x206>
    175a:	eb ce       	rjmp	.-554    	; 0x1532 <nwkRxTaskHandler+0x1e2>
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
    175c:	2c 96       	adiw	r28, 0x0c	; 12
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	f8 94       	cli
    1762:	de bf       	out	0x3e, r29	; 62
    1764:	0f be       	out	0x3f, r0	; 63
    1766:	cd bf       	out	0x3d, r28	; 61
    1768:	df 91       	pop	r29
    176a:	cf 91       	pop	r28
    176c:	1f 91       	pop	r17
    176e:	0f 91       	pop	r16
    1770:	ff 90       	pop	r15
    1772:	ef 90       	pop	r14
    1774:	df 90       	pop	r13
    1776:	cf 90       	pop	r12
    1778:	bf 90       	pop	r11
    177a:	af 90       	pop	r10
    177c:	9f 90       	pop	r9
    177e:	8f 90       	pop	r8
    1780:	7f 90       	pop	r7
    1782:	6f 90       	pop	r6
    1784:	5f 90       	pop	r5
    1786:	4f 90       	pop	r4
    1788:	3f 90       	pop	r3
    178a:	2f 90       	pop	r2
    178c:	08 95       	ret

0000178e <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    178e:	ef 92       	push	r14
    1790:	ff 92       	push	r15
    1792:	0f 93       	push	r16
    1794:	1f 93       	push	r17
    1796:	cf 93       	push	r28
    1798:	7c 01       	movw	r14, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    179a:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    17a0:	01 e0       	ldi	r16, 0x01	; 1

      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    17a2:	c3 e1       	ldi	r28, 0x13	; 19
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    17a4:	13 c0       	rjmp	.+38     	; 0x17cc <nwkTxDelayTimerHandler+0x3e>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    17a6:	fc 01       	movw	r30, r24
    17a8:	20 81       	ld	r18, Z
    17aa:	21 31       	cpi	r18, 0x11	; 17
    17ac:	79 f4       	brne	.+30     	; 0x17cc <nwkTxDelayTimerHandler+0x3e>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    17ae:	ec 57       	subi	r30, 0x7C	; 124
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	20 81       	ld	r18, Z
    17b4:	31 81       	ldd	r19, Z+1	; 0x01
    17b6:	21 50       	subi	r18, 0x01	; 1
    17b8:	31 09       	sbc	r19, r1
    17ba:	31 83       	std	Z+1, r19	; 0x01
    17bc:	20 83       	st	Z, r18
    17be:	23 2b       	or	r18, r19
    17c0:	21 f4       	brne	.+8      	; 0x17ca <nwkTxDelayTimerHandler+0x3c>
        frame->state = NWK_TX_STATE_SEND;
    17c2:	fc 01       	movw	r30, r24
    17c4:	c0 83       	st	Z, r28

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    17c6:	10 2f       	mov	r17, r16
    17c8:	01 c0       	rjmp	.+2      	; 0x17cc <nwkTxDelayTimerHandler+0x3e>
    17ca:	10 2f       	mov	r17, r16
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    17cc:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <nwkFrameNext>
    17d0:	00 97       	sbiw	r24, 0x00	; 0
    17d2:	49 f7       	brne	.-46     	; 0x17a6 <nwkTxDelayTimerHandler+0x18>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
    17d4:	11 23       	and	r17, r17
    17d6:	19 f0       	breq	.+6      	; 0x17de <nwkTxDelayTimerHandler+0x50>
    SYS_TimerStart(timer);
    17d8:	c7 01       	movw	r24, r14
    17da:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <SYS_TimerStart>
}
    17de:	cf 91       	pop	r28
    17e0:	1f 91       	pop	r17
    17e2:	0f 91       	pop	r16
    17e4:	ff 90       	pop	r15
    17e6:	ef 90       	pop	r14
    17e8:	08 95       	ret

000017ea <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    17ea:	ef 92       	push	r14
    17ec:	ff 92       	push	r15
    17ee:	0f 93       	push	r16
    17f0:	1f 93       	push	r17
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	7c 01       	movw	r14, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    17f8:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    17fe:	01 e0       	ldi	r16, 0x01	; 1

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    1800:	d7 e1       	ldi	r29, 0x17	; 23
  frame->tx.status = status;
    1802:	c0 e1       	ldi	r28, 0x10	; 16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    1804:	16 c0       	rjmp	.+44     	; 0x1832 <nwkTxAckWaitTimerHandler+0x48>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    1806:	fc 01       	movw	r30, r24
    1808:	20 81       	ld	r18, Z
    180a:	26 31       	cpi	r18, 0x16	; 22
    180c:	91 f4       	brne	.+36     	; 0x1832 <nwkTxAckWaitTimerHandler+0x48>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    180e:	ec 57       	subi	r30, 0x7C	; 124
    1810:	ff 4f       	sbci	r31, 0xFF	; 255
    1812:	20 81       	ld	r18, Z
    1814:	31 81       	ldd	r19, Z+1	; 0x01
    1816:	21 50       	subi	r18, 0x01	; 1
    1818:	31 09       	sbc	r19, r1
    181a:	31 83       	std	Z+1, r19	; 0x01
    181c:	20 83       	st	Z, r18
    181e:	23 2b       	or	r18, r19
    1820:	39 f4       	brne	.+14     	; 0x1830 <nwkTxAckWaitTimerHandler+0x46>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    1822:	fc 01       	movw	r30, r24
    1824:	d0 83       	st	Z, r29
  frame->tx.status = status;
    1826:	ed 57       	subi	r30, 0x7D	; 125
    1828:	ff 4f       	sbci	r31, 0xFF	; 255
    182a:	c0 83       	st	Z, r28

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    182c:	10 2f       	mov	r17, r16
    182e:	01 c0       	rjmp	.+2      	; 0x1832 <nwkTxAckWaitTimerHandler+0x48>
    1830:	10 2f       	mov	r17, r16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    1832:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <nwkFrameNext>
    1836:	00 97       	sbiw	r24, 0x00	; 0
    1838:	31 f7       	brne	.-52     	; 0x1806 <nwkTxAckWaitTimerHandler+0x1c>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
    183a:	11 23       	and	r17, r17
    183c:	19 f0       	breq	.+6      	; 0x1844 <nwkTxAckWaitTimerHandler+0x5a>
    SYS_TimerStart(timer);
    183e:	c7 01       	movw	r24, r14
    1840:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <SYS_TimerStart>
}
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	1f 91       	pop	r17
    184a:	0f 91       	pop	r16
    184c:	ff 90       	pop	r15
    184e:	ef 90       	pop	r14
    1850:	08 95       	ret

00001852 <nwkTxInit>:
/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
    1852:	10 92 55 07 	sts	0x0755, r1
    1856:	10 92 54 07 	sts	0x0754, r1

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    185a:	e7 e4       	ldi	r30, 0x47	; 71
    185c:	f7 e0       	ldi	r31, 0x07	; 7
    185e:	82 e3       	ldi	r24, 0x32	; 50
    1860:	90 e0       	ldi	r25, 0x00	; 0
    1862:	a0 e0       	ldi	r26, 0x00	; 0
    1864:	b0 e0       	ldi	r27, 0x00	; 0
    1866:	86 83       	std	Z+6, r24	; 0x06
    1868:	97 83       	std	Z+7, r25	; 0x07
    186a:	a0 87       	std	Z+8, r26	; 0x08
    186c:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    186e:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    1870:	85 ef       	ldi	r24, 0xF5	; 245
    1872:	9b e0       	ldi	r25, 0x0B	; 11
    1874:	94 87       	std	Z+12, r25	; 0x0c
    1876:	83 87       	std	Z+11, r24	; 0x0b

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    1878:	ea e3       	ldi	r30, 0x3A	; 58
    187a:	f7 e0       	ldi	r31, 0x07	; 7
    187c:	8a e0       	ldi	r24, 0x0A	; 10
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	a0 e0       	ldi	r26, 0x00	; 0
    1882:	b0 e0       	ldi	r27, 0x00	; 0
    1884:	86 83       	std	Z+6, r24	; 0x06
    1886:	97 83       	std	Z+7, r25	; 0x07
    1888:	a0 87       	std	Z+8, r26	; 0x08
    188a:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    188c:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    188e:	87 ec       	ldi	r24, 0xC7	; 199
    1890:	9b e0       	ldi	r25, 0x0B	; 11
    1892:	94 87       	std	Z+12, r25	; 0x0c
    1894:	83 87       	std	Z+11, r24	; 0x0b
    1896:	08 95       	ret

00001898 <nwkTxFrame>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    1898:	cf 93       	push	r28
    189a:	df 93       	push	r29
    189c:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (frame->tx.control & NWK_TX_CONTROL_ROUTING)
    189e:	dc 01       	movw	r26, r24
    18a0:	aa 57       	subi	r26, 0x7A	; 122
    18a2:	bf 4f       	sbci	r27, 0xFF	; 255
    18a4:	8c 91       	ld	r24, X
    18a6:	81 ff       	sbrs	r24, 1
    18a8:	03 c0       	rjmp	.+6      	; 0x18b0 <nwkTxFrame+0x18>
  {
    frame->state = NWK_TX_STATE_DELAY;
    18aa:	92 e1       	ldi	r25, 0x12	; 18
    18ac:	90 83       	st	Z, r25
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <nwkTxFrame+0x1c>
  #ifdef NWK_ENABLE_SECURITY
    if (header->nwkFcf.security)
      frame->state = NWK_TX_STATE_ENCRYPT;
    else
  #endif
      frame->state = NWK_TX_STATE_DELAY;
    18b0:	92 e1       	ldi	r25, 0x12	; 18
    18b2:	90 83       	st	Z, r25
  }

  frame->tx.status = NWK_SUCCESS_STATUS;
    18b4:	df 01       	movw	r26, r30
    18b6:	ad 57       	subi	r26, 0x7D	; 125
    18b8:	bf 4f       	sbci	r27, 0xFF	; 255
    18ba:	1c 92       	st	X, r1

  if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)
    18bc:	80 ff       	sbrs	r24, 0
    18be:	05 c0       	rjmp	.+10     	; 0x18ca <nwkTxFrame+0x32>
    header->macDstPanId = NWK_BROADCAST_PANID;
    18c0:	8f ef       	ldi	r24, 0xFF	; 255
    18c2:	9f ef       	ldi	r25, 0xFF	; 255
    18c4:	96 83       	std	Z+6, r25	; 0x06
    18c6:	85 83       	std	Z+5, r24	; 0x05
    18c8:	06 c0       	rjmp	.+12     	; 0x18d6 <nwkTxFrame+0x3e>
  else
    header->macDstPanId = nwkIb.panId;
    18ca:	80 91 df 07 	lds	r24, 0x07DF
    18ce:	90 91 e0 07 	lds	r25, 0x07E0
    18d2:	96 83       	std	Z+6, r25	; 0x06
    18d4:	85 83       	std	Z+5, r24	; 0x05
  if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) && 
      0 == (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID))
    nwkRoutePrepareTx(frame);
  else
#endif
    header->macDstAddr = header->nwkDstAddr;
    18d6:	27 85       	ldd	r18, Z+15	; 0x0f
    18d8:	30 89       	ldd	r19, Z+16	; 0x10
    18da:	30 87       	std	Z+8, r19	; 0x08
    18dc:	27 83       	std	Z+7, r18	; 0x07

  header->macSrcAddr = nwkIb.addr;
    18de:	ad ed       	ldi	r26, 0xDD	; 221
    18e0:	b7 e0       	ldi	r27, 0x07	; 7
    18e2:	8d 91       	ld	r24, X+
    18e4:	9c 91       	ld	r25, X
    18e6:	11 97       	sbiw	r26, 0x01	; 1
    18e8:	92 87       	std	Z+10, r25	; 0x0a
    18ea:	81 87       	std	Z+9, r24	; 0x09
  header->macSeq = ++nwkIb.macSeqNum;
    18ec:	15 96       	adiw	r26, 0x05	; 5
    18ee:	8c 91       	ld	r24, X
    18f0:	15 97       	sbiw	r26, 0x05	; 5
    18f2:	8f 5f       	subi	r24, 0xFF	; 255
    18f4:	15 96       	adiw	r26, 0x05	; 5
    18f6:	8c 93       	st	X, r24
    18f8:	84 83       	std	Z+4, r24	; 0x04

  if (NWK_BROADCAST_ADDR == header->macDstAddr)
    18fa:	2f 3f       	cpi	r18, 0xFF	; 255
    18fc:	3f 4f       	sbci	r19, 0xFF	; 255
    18fe:	81 f4       	brne	.+32     	; 0x1920 <nwkTxFrame+0x88>
    1900:	ef 01       	movw	r28, r30
  {
    header->macFcf = 0x8841;
    1902:	81 e4       	ldi	r24, 0x41	; 65
    1904:	98 e8       	ldi	r25, 0x88	; 136
    1906:	93 83       	std	Z+3, r25	; 0x03
    1908:	82 83       	std	Z+2, r24	; 0x02
    frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    190a:	0e 94 3b 14 	call	0x2876	; 0x2876 <rand>
    190e:	fe 01       	movw	r30, r28
    1910:	ec 57       	subi	r30, 0x7C	; 124
    1912:	ff 4f       	sbci	r31, 0xFF	; 255
    1914:	87 70       	andi	r24, 0x07	; 7
    1916:	99 27       	eor	r25, r25
    1918:	01 96       	adiw	r24, 0x01	; 1
    191a:	91 83       	std	Z+1, r25	; 0x01
    191c:	80 83       	st	Z, r24
    191e:	08 c0       	rjmp	.+16     	; 0x1930 <nwkTxFrame+0x98>
  }
  else
  {
    header->macFcf = 0x8861;
    1920:	81 e6       	ldi	r24, 0x61	; 97
    1922:	98 e8       	ldi	r25, 0x88	; 136
    1924:	93 83       	std	Z+3, r25	; 0x03
    1926:	82 83       	std	Z+2, r24	; 0x02
    frame->tx.timeout = 0;
    1928:	ec 57       	subi	r30, 0x7C	; 124
    192a:	ff 4f       	sbci	r31, 0xFF	; 255
    192c:	11 82       	std	Z+1, r1	; 0x01
    192e:	10 82       	st	Z, r1
  }
}
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	08 95       	ret

00001936 <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    1936:	0f 93       	push	r16
    1938:	1f 93       	push	r17
    193a:	cf 93       	push	r28
    193c:	df 93       	push	r29
    193e:	8c 01       	movw	r16, r24
  NwkFrame_t *newFrame;

  if (NULL == (newFrame = nwkFrameAlloc()))
    1940:	0e 94 b9 08 	call	0x1172	; 0x1172 <nwkFrameAlloc>
    1944:	ec 01       	movw	r28, r24
    1946:	89 2b       	or	r24, r25
    1948:	b9 f1       	breq	.+110    	; 0x19b8 <nwkTxBroadcastFrame+0x82>
    return;

  newFrame->state = NWK_TX_STATE_DELAY;
    194a:	82 e1       	ldi	r24, 0x12	; 18
    194c:	88 83       	st	Y, r24
  newFrame->size = frame->size;
    194e:	f8 01       	movw	r30, r16
    1950:	81 81       	ldd	r24, Z+1	; 0x01
    1952:	89 83       	std	Y+1, r24	; 0x01
  newFrame->tx.status = NWK_SUCCESS_STATUS;
    1954:	fe 01       	movw	r30, r28
    1956:	ed 57       	subi	r30, 0x7D	; 125
    1958:	ff 4f       	sbci	r31, 0xFF	; 255
    195a:	10 82       	st	Z, r1
  newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    195c:	0e 94 3b 14 	call	0x2876	; 0x2876 <rand>
    1960:	fe 01       	movw	r30, r28
    1962:	ec 57       	subi	r30, 0x7C	; 124
    1964:	ff 4f       	sbci	r31, 0xFF	; 255
    1966:	87 70       	andi	r24, 0x07	; 7
    1968:	99 27       	eor	r25, r25
    196a:	01 96       	adiw	r24, 0x01	; 1
    196c:	91 83       	std	Z+1, r25	; 0x01
    196e:	80 83       	st	Z, r24
  newFrame->tx.confirm = NULL;
    1970:	33 96       	adiw	r30, 0x03	; 3
    1972:	11 82       	std	Z+1, r1	; 0x01
    1974:	10 82       	st	Z, r1
  memcpy(newFrame->data, frame->data, frame->size);
    1976:	f8 01       	movw	r30, r16
    1978:	41 81       	ldd	r20, Z+1	; 0x01
    197a:	50 e0       	ldi	r21, 0x00	; 0
    197c:	b8 01       	movw	r22, r16
    197e:	6e 5f       	subi	r22, 0xFE	; 254
    1980:	7f 4f       	sbci	r23, 0xFF	; 255
    1982:	ce 01       	movw	r24, r28
    1984:	02 96       	adiw	r24, 0x02	; 2
    1986:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <memcpy>

  newFrame->header.macFcf = 0x8841;
    198a:	81 e4       	ldi	r24, 0x41	; 65
    198c:	98 e8       	ldi	r25, 0x88	; 136
    198e:	9b 83       	std	Y+3, r25	; 0x03
    1990:	8a 83       	std	Y+2, r24	; 0x02
  newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    1992:	8f ef       	ldi	r24, 0xFF	; 255
    1994:	9f ef       	ldi	r25, 0xFF	; 255
    1996:	98 87       	std	Y+8, r25	; 0x08
    1998:	8f 83       	std	Y+7, r24	; 0x07
  newFrame->header.macDstPanId = frame->header.macDstPanId;
    199a:	f8 01       	movw	r30, r16
    199c:	85 81       	ldd	r24, Z+5	; 0x05
    199e:	96 81       	ldd	r25, Z+6	; 0x06
    19a0:	9e 83       	std	Y+6, r25	; 0x06
    19a2:	8d 83       	std	Y+5, r24	; 0x05
  newFrame->header.macSrcAddr = nwkIb.addr;
    19a4:	ed ed       	ldi	r30, 0xDD	; 221
    19a6:	f7 e0       	ldi	r31, 0x07	; 7
    19a8:	80 81       	ld	r24, Z
    19aa:	91 81       	ldd	r25, Z+1	; 0x01
    19ac:	9a 87       	std	Y+10, r25	; 0x0a
    19ae:	89 87       	std	Y+9, r24	; 0x09
  newFrame->header.macSeq = ++nwkIb.macSeqNum;
    19b0:	85 81       	ldd	r24, Z+5	; 0x05
    19b2:	8f 5f       	subi	r24, 0xFF	; 255
    19b4:	85 83       	std	Z+5, r24	; 0x05
    19b6:	8c 83       	std	Y+4, r24	; 0x04
}
    19b8:	df 91       	pop	r29
    19ba:	cf 91       	pop	r28
    19bc:	1f 91       	pop	r17
    19be:	0f 91       	pop	r16
    19c0:	08 95       	ret

000019c2 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    19c2:	cf 93       	push	r28
    19c4:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    19c6:	fc 01       	movw	r30, r24
    19c8:	c7 81       	ldd	r28, Z+7	; 0x07
    19ca:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    19cc:	81 85       	ldd	r24, Z+9	; 0x09
    19ce:	83 30       	cpi	r24, 0x03	; 3
    19d0:	c9 f4       	brne	.+50     	; 0x1a04 <nwkTxAckReceived+0x42>
    19d2:	80 e0       	ldi	r24, 0x00	; 0
    19d4:	90 e0       	ldi	r25, 0x00	; 0
    19d6:	10 c0       	rjmp	.+32     	; 0x19f8 <nwkTxAckReceived+0x36>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
    19d8:	fc 01       	movw	r30, r24
    19da:	20 81       	ld	r18, Z
    19dc:	26 31       	cpi	r18, 0x16	; 22
    19de:	61 f4       	brne	.+24     	; 0x19f8 <nwkTxAckReceived+0x36>
    19e0:	34 85       	ldd	r19, Z+12	; 0x0c
    19e2:	29 81       	ldd	r18, Y+1	; 0x01
    19e4:	32 13       	cpse	r19, r18
    19e6:	08 c0       	rjmp	.+16     	; 0x19f8 <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    19e8:	27 e1       	ldi	r18, 0x17	; 23
    19ea:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    19ec:	2a 81       	ldd	r18, Y+2	; 0x02
    19ee:	ea 57       	subi	r30, 0x7A	; 122
    19f0:	ff 4f       	sbci	r31, 0xFF	; 255
    19f2:	20 83       	st	Z, r18
      return true;
    19f4:	81 e0       	ldi	r24, 0x01	; 1
    19f6:	07 c0       	rjmp	.+14     	; 0x1a06 <nwkTxAckReceived+0x44>
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
    19f8:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <nwkFrameNext>
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	61 f7       	brne	.-40     	; 0x19d8 <nwkTxAckReceived+0x16>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
    1a00:	80 e0       	ldi	r24, 0x00	; 0
    1a02:	01 c0       	rjmp	.+2      	; 0x1a06 <nwkTxAckReceived+0x44>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
    1a04:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
    1a06:	df 91       	pop	r29
    1a08:	cf 91       	pop	r28
    1a0a:	08 95       	ret

00001a0c <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1a0c:	e0 91 54 07 	lds	r30, 0x0754
    1a10:	f0 91 55 07 	lds	r31, 0x0755

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    1a14:	81 30       	cpi	r24, 0x01	; 1
    1a16:	21 f0       	breq	.+8      	; 0x1a20 <PHY_DataConf+0x14>
    1a18:	48 f0       	brcs	.+18     	; 0x1a2c <PHY_DataConf+0x20>
    1a1a:	82 30       	cpi	r24, 0x02	; 2
    1a1c:	19 f0       	breq	.+6      	; 0x1a24 <PHY_DataConf+0x18>
    1a1e:	04 c0       	rjmp	.+8      	; 0x1a28 <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    1a20:	80 e2       	ldi	r24, 0x20	; 32
    1a22:	05 c0       	rjmp	.+10     	; 0x1a2e <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    1a24:	81 e2       	ldi	r24, 0x21	; 33
    1a26:	03 c0       	rjmp	.+6      	; 0x1a2e <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	01 c0       	rjmp	.+2      	; 0x1a2e <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    1a2c:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1a2e:	df 01       	movw	r26, r30
    1a30:	ad 57       	subi	r26, 0x7D	; 125
    1a32:	bf 4f       	sbci	r27, 0xFF	; 255
    1a34:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    1a36:	85 e1       	ldi	r24, 0x15	; 21
    1a38:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    1a3a:	10 92 55 07 	sts	0x0755, r1
    1a3e:	10 92 54 07 	sts	0x0754, r1
  nwkIb.lock--;
    1a42:	ed ed       	ldi	r30, 0xDD	; 221
    1a44:	f7 e0       	ldi	r31, 0x07	; 7
    1a46:	86 a1       	ldd	r24, Z+38	; 0x26
    1a48:	97 a1       	ldd	r25, Z+39	; 0x27
    1a4a:	01 97       	sbiw	r24, 0x01	; 1
    1a4c:	97 a3       	std	Z+39, r25	; 0x27
    1a4e:	86 a3       	std	Z+38, r24	; 0x26
    1a50:	08 95       	ret

00001a52 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    1a52:	9f 92       	push	r9
    1a54:	af 92       	push	r10
    1a56:	bf 92       	push	r11
    1a58:	cf 92       	push	r12
    1a5a:	df 92       	push	r13
    1a5c:	ef 92       	push	r14
    1a5e:	ff 92       	push	r15
    1a60:	0f 93       	push	r16
    1a62:	1f 93       	push	r17
    1a64:	cf 93       	push	r28
    1a66:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    1a68:	c0 e0       	ldi	r28, 0x00	; 0
    1a6a:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1a6c:	0f 2e       	mov	r0, r31
    1a6e:	f4 e1       	ldi	r31, 0x14	; 20
    1a70:	af 2e       	mov	r10, r31
    1a72:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    1a74:	0d ed       	ldi	r16, 0xDD	; 221
    1a76:	17 e0       	ldi	r17, 0x07	; 7
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    1a78:	0f 2e       	mov	r0, r31
    1a7a:	f7 e1       	ldi	r31, 0x17	; 23
    1a7c:	df 2e       	mov	r13, r31
    1a7e:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1a80:	0f 2e       	mov	r0, r31
    1a82:	f6 e1       	ldi	r31, 0x16	; 22
    1a84:	9f 2e       	mov	r9, r31
    1a86:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1a88:	0f 2e       	mov	r0, r31
    1a8a:	f5 e1       	ldi	r31, 0x15	; 21
    1a8c:	ef 2e       	mov	r14, r31
    1a8e:	f1 2c       	mov	r15, r1
    1a90:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    1a92:	0f 2e       	mov	r0, r31
    1a94:	f3 e1       	ldi	r31, 0x13	; 19
    1a96:	cf 2e       	mov	r12, r31
    1a98:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    1a9a:	0f 2e       	mov	r0, r31
    1a9c:	f1 e1       	ldi	r31, 0x11	; 17
    1a9e:	bf 2e       	mov	r11, r31
    1aa0:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1aa2:	62 c0       	rjmp	.+196    	; 0x1b68 <nwkTxTaskHandler+0x116>
  {
    switch (frame->state)
    1aa4:	88 81       	ld	r24, Y
    1aa6:	83 31       	cpi	r24, 0x13	; 19
    1aa8:	c9 f0       	breq	.+50     	; 0x1adc <nwkTxTaskHandler+0x8a>
    1aaa:	18 f4       	brcc	.+6      	; 0x1ab2 <nwkTxTaskHandler+0x60>
    1aac:	82 31       	cpi	r24, 0x12	; 18
    1aae:	39 f0       	breq	.+14     	; 0x1abe <nwkTxTaskHandler+0x6c>
    1ab0:	5b c0       	rjmp	.+182    	; 0x1b68 <nwkTxTaskHandler+0x116>
    1ab2:	85 31       	cpi	r24, 0x15	; 21
    1ab4:	59 f1       	breq	.+86     	; 0x1b0c <nwkTxTaskHandler+0xba>
    1ab6:	87 31       	cpi	r24, 0x17	; 23
    1ab8:	09 f4       	brne	.+2      	; 0x1abc <nwkTxTaskHandler+0x6a>
    1aba:	48 c0       	rjmp	.+144    	; 0x1b4c <nwkTxTaskHandler+0xfa>
    1abc:	55 c0       	rjmp	.+170    	; 0x1b68 <nwkTxTaskHandler+0x116>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    1abe:	fe 01       	movw	r30, r28
    1ac0:	ec 57       	subi	r30, 0x7C	; 124
    1ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ac4:	80 81       	ld	r24, Z
    1ac6:	91 81       	ldd	r25, Z+1	; 0x01
    1ac8:	89 2b       	or	r24, r25
    1aca:	31 f0       	breq	.+12     	; 0x1ad8 <nwkTxTaskHandler+0x86>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    1acc:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    1ace:	8a e3       	ldi	r24, 0x3A	; 58
    1ad0:	97 e0       	ldi	r25, 0x07	; 7
    1ad2:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <SYS_TimerStart>
    1ad6:	48 c0       	rjmp	.+144    	; 0x1b68 <nwkTxTaskHandler+0x116>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    1ad8:	c8 82       	st	Y, r12
    1ada:	46 c0       	rjmp	.+140    	; 0x1b68 <nwkTxTaskHandler+0x116>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    1adc:	80 91 54 07 	lds	r24, 0x0754
    1ae0:	90 91 55 07 	lds	r25, 0x0755
    1ae4:	89 2b       	or	r24, r25
    1ae6:	09 f0       	breq	.+2      	; 0x1aea <nwkTxTaskHandler+0x98>
    1ae8:	3f c0       	rjmp	.+126    	; 0x1b68 <nwkTxTaskHandler+0x116>
        {
          nwkTxPhyActiveFrame = frame;
    1aea:	d0 93 55 07 	sts	0x0755, r29
    1aee:	c0 93 54 07 	sts	0x0754, r28
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1af2:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    1af4:	69 81       	ldd	r22, Y+1	; 0x01
    1af6:	ce 01       	movw	r24, r28
    1af8:	02 96       	adiw	r24, 0x02	; 2
    1afa:	0e 94 65 0e 	call	0x1cca	; 0x1cca <PHY_DataReq>
          nwkIb.lock++;
    1afe:	f8 01       	movw	r30, r16
    1b00:	86 a1       	ldd	r24, Z+38	; 0x26
    1b02:	97 a1       	ldd	r25, Z+39	; 0x27
    1b04:	01 96       	adiw	r24, 0x01	; 1
    1b06:	97 a3       	std	Z+39, r25	; 0x27
    1b08:	86 a3       	std	Z+38, r24	; 0x26
    1b0a:	2e c0       	rjmp	.+92     	; 0x1b68 <nwkTxTaskHandler+0x116>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	ed 57       	subi	r30, 0x7D	; 125
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	80 81       	ld	r24, Z
    1b14:	81 11       	cpse	r24, r1
    1b16:	18 c0       	rjmp	.+48     	; 0x1b48 <nwkTxTaskHandler+0xf6>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    1b18:	2d 85       	ldd	r18, Y+13	; 0x0d
    1b1a:	3e 85       	ldd	r19, Y+14	; 0x0e
    1b1c:	f8 01       	movw	r30, r16
    1b1e:	80 81       	ld	r24, Z
    1b20:	91 81       	ldd	r25, Z+1	; 0x01
    1b22:	28 17       	cp	r18, r24
    1b24:	39 07       	cpc	r19, r25
    1b26:	71 f4       	brne	.+28     	; 0x1b44 <nwkTxTaskHandler+0xf2>
    1b28:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b2a:	80 ff       	sbrs	r24, 0
    1b2c:	0b c0       	rjmp	.+22     	; 0x1b44 <nwkTxTaskHandler+0xf2>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1b2e:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1b30:	fe 01       	movw	r30, r28
    1b32:	ec 57       	subi	r30, 0x7C	; 124
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	f1 82       	std	Z+1, r15	; 0x01
    1b38:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    1b3a:	87 e4       	ldi	r24, 0x47	; 71
    1b3c:	97 e0       	ldi	r25, 0x07	; 7
    1b3e:	0e 94 a1 0f 	call	0x1f42	; 0x1f42 <SYS_TimerStart>
    1b42:	12 c0       	rjmp	.+36     	; 0x1b68 <nwkTxTaskHandler+0x116>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    1b44:	d8 82       	st	Y, r13
    1b46:	10 c0       	rjmp	.+32     	; 0x1b68 <nwkTxTaskHandler+0x116>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    1b48:	d8 82       	st	Y, r13
    1b4a:	0e c0       	rjmp	.+28     	; 0x1b68 <nwkTxTaskHandler+0x116>
      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
#endif
        if (NULL == frame->tx.confirm)
    1b4c:	fe 01       	movw	r30, r28
    1b4e:	e9 57       	subi	r30, 0x79	; 121
    1b50:	ff 4f       	sbci	r31, 0xFF	; 255
    1b52:	01 90       	ld	r0, Z+
    1b54:	f0 81       	ld	r31, Z
    1b56:	e0 2d       	mov	r30, r0
    1b58:	30 97       	sbiw	r30, 0x00	; 0
    1b5a:	21 f4       	brne	.+8      	; 0x1b64 <nwkTxTaskHandler+0x112>
          nwkFrameFree(frame);
    1b5c:	ce 01       	movw	r24, r28
    1b5e:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <nwkFrameFree>
    1b62:	02 c0       	rjmp	.+4      	; 0x1b68 <nwkTxTaskHandler+0x116>
        else
          frame->tx.confirm(frame);
    1b64:	ce 01       	movw	r24, r28
    1b66:	09 95       	icall
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1b68:	ce 01       	movw	r24, r28
    1b6a:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <nwkFrameNext>
    1b6e:	ec 01       	movw	r28, r24
    1b70:	89 2b       	or	r24, r25
    1b72:	09 f0       	breq	.+2      	; 0x1b76 <nwkTxTaskHandler+0x124>
    1b74:	97 cf       	rjmp	.-210    	; 0x1aa4 <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    1b76:	df 91       	pop	r29
    1b78:	cf 91       	pop	r28
    1b7a:	1f 91       	pop	r17
    1b7c:	0f 91       	pop	r16
    1b7e:	ff 90       	pop	r15
    1b80:	ef 90       	pop	r14
    1b82:	df 90       	pop	r13
    1b84:	cf 90       	pop	r12
    1b86:	bf 90       	pop	r11
    1b88:	af 90       	pop	r10
    1b8a:	9f 90       	pop	r9
    1b8c:	08 95       	ret

00001b8e <phySetChannel>:

/*************************************************************************//**
*****************************************************************************/
static void phySetChannel(void)
{
  CC_CTRL_1_REG_s.ccBand = phyBand;
    1b8e:	80 91 56 07 	lds	r24, 0x0756
    1b92:	98 2f       	mov	r25, r24
    1b94:	9f 70       	andi	r25, 0x0F	; 15
    1b96:	e4 e5       	ldi	r30, 0x54	; 84
    1b98:	f1 e0       	ldi	r31, 0x01	; 1
    1b9a:	80 81       	ld	r24, Z
    1b9c:	80 7f       	andi	r24, 0xF0	; 240
    1b9e:	89 2b       	or	r24, r25
    1ba0:	80 83       	st	Z, r24

  if (phyBand)
    1ba2:	80 91 56 07 	lds	r24, 0x0756
    1ba6:	88 23       	and	r24, r24
    1ba8:	29 f0       	breq	.+10     	; 0x1bb4 <phySetChannel+0x26>
    CC_CTRL_0_REG = phyChannel;
    1baa:	80 91 57 07 	lds	r24, 0x0757
    1bae:	80 93 53 01 	sts	0x0153, r24
    1bb2:	08 95       	ret
  else
    PHY_CC_CCA_REG_s.channel = phyChannel;
    1bb4:	80 91 57 07 	lds	r24, 0x0757
    1bb8:	98 2f       	mov	r25, r24
    1bba:	9f 71       	andi	r25, 0x1F	; 31
    1bbc:	e8 e4       	ldi	r30, 0x48	; 72
    1bbe:	f1 e0       	ldi	r31, 0x01	; 1
    1bc0:	80 81       	ld	r24, Z
    1bc2:	80 7e       	andi	r24, 0xE0	; 224
    1bc4:	89 2b       	or	r24, r25
    1bc6:	80 83       	st	Z, r24
    1bc8:	08 95       	ret

00001bca <phyTrxSetState>:

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
  TRX_STATE_REG = TRX_CMD_FORCE_TRX_OFF;
    1bca:	93 e0       	ldi	r25, 0x03	; 3
    1bcc:	90 93 42 01 	sts	0x0142, r25
  while (TRX_STATUS_TRX_OFF != TRX_STATUS_REG_s.trxStatus);
    1bd0:	e1 e4       	ldi	r30, 0x41	; 65
    1bd2:	f1 e0       	ldi	r31, 0x01	; 1
    1bd4:	90 81       	ld	r25, Z
    1bd6:	9f 71       	andi	r25, 0x1F	; 31
    1bd8:	98 30       	cpi	r25, 0x08	; 8
    1bda:	e1 f7       	brne	.-8      	; 0x1bd4 <phyTrxSetState+0xa>

  TRX_STATE_REG = state;
    1bdc:	80 93 42 01 	sts	0x0142, r24
  while (state != TRX_STATUS_REG_s.trxStatus);
    1be0:	e1 e4       	ldi	r30, 0x41	; 65
    1be2:	f1 e0       	ldi	r31, 0x01	; 1
    1be4:	90 81       	ld	r25, Z
    1be6:	9f 71       	andi	r25, 0x1F	; 31
    1be8:	98 13       	cpse	r25, r24
    1bea:	fc cf       	rjmp	.-8      	; 0x1be4 <phyTrxSetState+0x1a>
}
    1bec:	08 95       	ret

00001bee <phySetRxState>:

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
  phyTrxSetState(TRX_CMD_TRX_OFF);
    1bee:	88 e0       	ldi	r24, 0x08	; 8
    1bf0:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    1bf4:	8f ef       	ldi	r24, 0xFF	; 255
    1bf6:	80 93 4f 01 	sts	0x014F, r24

  if (phyRxState)
    1bfa:	80 91 58 07 	lds	r24, 0x0758
    1bfe:	88 23       	and	r24, r24
    1c00:	19 f0       	breq	.+6      	; 0x1c08 <phySetRxState+0x1a>
    phyTrxSetState(TRX_CMD_RX_AACK_ON);
    1c02:	86 e1       	ldi	r24, 0x16	; 22
    1c04:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <phyTrxSetState>
    1c08:	08 95       	ret

00001c0a <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
    1c0a:	e9 e3       	ldi	r30, 0x39	; 57
    1c0c:	f1 e0       	ldi	r31, 0x01	; 1
    1c0e:	80 81       	ld	r24, Z
    1c10:	81 60       	ori	r24, 0x01	; 1
    1c12:	80 83       	st	Z, r24

  phyRxState = false;
    1c14:	10 92 58 07 	sts	0x0758, r1
  phyBand = 0;
    1c18:	10 92 56 07 	sts	0x0756, r1
  phyState = PHY_STATE_IDLE;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	80 93 d9 07 	sts	0x07D9, r24

  phyTrxSetState(TRX_CMD_TRX_OFF);
    1c22:	88 e0       	ldi	r24, 0x08	; 8
    1c24:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
    1c28:	8b ee       	ldi	r24, 0xEB	; 235
    1c2a:	80 93 56 01 	sts	0x0156, r24

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
    1c2e:	ec e4       	ldi	r30, 0x4C	; 76
    1c30:	f1 e0       	ldi	r31, 0x01	; 1
    1c32:	80 81       	ld	r24, Z
    1c34:	80 68       	ori	r24, 0x80	; 128
    1c36:	80 83       	st	Z, r24
    1c38:	08 95       	ret

00001c3a <PHY_SetRxState>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
  phyRxState = rx;
    1c3a:	80 93 58 07 	sts	0x0758, r24
  phySetRxState();
    1c3e:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <phySetRxState>
    1c42:	08 95       	ret

00001c44 <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
  phyChannel = channel;
    1c44:	80 93 57 07 	sts	0x0757, r24
  phySetChannel();
    1c48:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <phySetChannel>
    1c4c:	08 95       	ret

00001c4e <PHY_SetPanId>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
    1c4e:	cf 93       	push	r28
    1c50:	df 93       	push	r29
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <PHY_SetPanId+0x6>
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
    1c58:	9a 83       	std	Y+2, r25	; 0x02
    1c5a:	89 83       	std	Y+1, r24	; 0x01
  uint8_t *d = (uint8_t *)&panId;

  PAN_ID_0_REG = d[0];
    1c5c:	80 93 62 01 	sts	0x0162, r24
  PAN_ID_1_REG = d[1];
    1c60:	8a 81       	ldd	r24, Y+2	; 0x02
    1c62:	80 93 63 01 	sts	0x0163, r24
}
    1c66:	0f 90       	pop	r0
    1c68:	0f 90       	pop	r0
    1c6a:	df 91       	pop	r29
    1c6c:	cf 91       	pop	r28
    1c6e:	08 95       	ret

00001c70 <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
    1c70:	cf 93       	push	r28
    1c72:	df 93       	push	r29
    1c74:	00 d0       	rcall	.+0      	; 0x1c76 <PHY_SetShortAddr+0x6>
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
    1c7a:	9a 83       	std	Y+2, r25	; 0x02
    1c7c:	89 83       	std	Y+1, r24	; 0x01
  uint8_t *d = (uint8_t *)&addr;

  SHORT_ADDR_0_REG = d[0];
    1c7e:	80 93 60 01 	sts	0x0160, r24
  SHORT_ADDR_1_REG = d[1];
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	80 93 61 01 	sts	0x0161, r24

#ifndef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
  CSMA_SEED_0_REG = d[0] + d[1];
    1c88:	9a 81       	ldd	r25, Y+2	; 0x02
    1c8a:	89 81       	ldd	r24, Y+1	; 0x01
    1c8c:	89 0f       	add	r24, r25
    1c8e:	80 93 6d 01 	sts	0x016D, r24
#endif
}
    1c92:	0f 90       	pop	r0
    1c94:	0f 90       	pop	r0
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	08 95       	ret

00001c9c <PHY_Sleep>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Sleep(void)
{
  phyTrxSetState(TRX_CMD_TRX_OFF);
    1c9c:	88 e0       	ldi	r24, 0x08	; 8
    1c9e:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <phyTrxSetState>
  TRXPR_REG_s.slptr = 1;
    1ca2:	e9 e3       	ldi	r30, 0x39	; 57
    1ca4:	f1 e0       	ldi	r31, 0x01	; 1
    1ca6:	80 81       	ld	r24, Z
    1ca8:	82 60       	ori	r24, 0x02	; 2
    1caa:	80 83       	st	Z, r24
  phyState = PHY_STATE_SLEEP;
    1cac:	82 e0       	ldi	r24, 0x02	; 2
    1cae:	80 93 d9 07 	sts	0x07D9, r24
    1cb2:	08 95       	ret

00001cb4 <PHY_Wakeup>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Wakeup(void)
{
  TRXPR_REG_s.slptr = 0;
    1cb4:	e9 e3       	ldi	r30, 0x39	; 57
    1cb6:	f1 e0       	ldi	r31, 0x01	; 1
    1cb8:	80 81       	ld	r24, Z
    1cba:	8d 7f       	andi	r24, 0xFD	; 253
    1cbc:	80 83       	st	Z, r24
  phySetRxState();
    1cbe:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <phySetRxState>
  phyState = PHY_STATE_IDLE;
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	80 93 d9 07 	sts	0x07D9, r24
    1cc8:	08 95       	ret

00001cca <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    1cca:	0f 93       	push	r16
    1ccc:	1f 93       	push	r17
    1cce:	cf 93       	push	r28
    1cd0:	8c 01       	movw	r16, r24
    1cd2:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    1cd4:	89 e1       	ldi	r24, 0x19	; 25
    1cd6:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    1cda:	8f ef       	ldi	r24, 0xFF	; 255
    1cdc:	80 93 4f 01 	sts	0x014F, r24

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    1ce0:	82 e0       	ldi	r24, 0x02	; 2
    1ce2:	8c 0f       	add	r24, r28
    1ce4:	80 93 80 01 	sts	0x0180, r24
  for (uint8_t i = 0; i < size; i++)
    1ce8:	cc 23       	and	r28, r28
    1cea:	81 f0       	breq	.+32     	; 0x1d0c <PHY_DataReq+0x42>
    1cec:	f8 01       	movw	r30, r16
    1cee:	c1 50       	subi	r28, 0x01	; 1
    1cf0:	2c 2f       	mov	r18, r28
    1cf2:	30 e0       	ldi	r19, 0x00	; 0
    1cf4:	2f 5f       	subi	r18, 0xFF	; 255
    1cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    1cf8:	c8 01       	movw	r24, r16
    1cfa:	82 0f       	add	r24, r18
    1cfc:	93 1f       	adc	r25, r19
    1cfe:	a1 e8       	ldi	r26, 0x81	; 129
    1d00:	b1 e0       	ldi	r27, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    1d02:	21 91       	ld	r18, Z+
    1d04:	2d 93       	st	X+, r18
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    1d06:	e8 17       	cp	r30, r24
    1d08:	f9 07       	cpc	r31, r25
    1d0a:	d9 f7       	brne	.-10     	; 0x1d02 <PHY_DataReq+0x38>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    1d0c:	83 e0       	ldi	r24, 0x03	; 3
    1d0e:	80 93 d9 07 	sts	0x07D9, r24
  TRX_STATE_REG = TRX_CMD_TX_START;
    1d12:	82 e0       	ldi	r24, 0x02	; 2
    1d14:	80 93 42 01 	sts	0x0142, r24
}
    1d18:	cf 91       	pop	r28
    1d1a:	1f 91       	pop	r17
    1d1c:	0f 91       	pop	r16
    1d1e:	08 95       	ret

00001d20 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    1d20:	1f 93       	push	r17
    1d22:	cf 93       	push	r28
    1d24:	df 93       	push	r29
    1d26:	00 d0       	rcall	.+0      	; 0x1d28 <PHY_TaskHandler+0x8>
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <PHY_TaskHandler+0xa>
    1d2a:	1f 92       	push	r1
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    1d30:	80 91 d9 07 	lds	r24, 0x07D9
    1d34:	82 30       	cpi	r24, 0x02	; 2
    1d36:	09 f4       	brne	.+2      	; 0x1d3a <PHY_TaskHandler+0x1a>
    1d38:	68 c0       	rjmp	.+208    	; 0x1e0a <PHY_TaskHandler+0xea>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    1d3a:	80 91 4f 01 	lds	r24, 0x014F
    1d3e:	83 ff       	sbrs	r24, 3
    1d40:	3f c0       	rjmp	.+126    	; 0x1dc0 <PHY_TaskHandler+0xa0>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    1d42:	a0 91 7b 01 	lds	r26, 0x017B

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    1d46:	6a 2f       	mov	r22, r26
    1d48:	70 e0       	ldi	r23, 0x00	; 0
    1d4a:	ab 01       	movw	r20, r22
    1d4c:	4f 5f       	subi	r20, 0xFF	; 255
    1d4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d50:	80 e0       	ldi	r24, 0x00	; 0
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    1d56:	fc 01       	movw	r30, r24
    1d58:	e0 58       	subi	r30, 0x80	; 128
    1d5a:	fe 4f       	sbci	r31, 0xFE	; 254
    1d5c:	30 81       	ld	r19, Z
    1d5e:	fc 01       	movw	r30, r24
    1d60:	e7 5a       	subi	r30, 0xA7	; 167
    1d62:	f8 4f       	sbci	r31, 0xF8	; 248
    1d64:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    1d66:	2f 5f       	subi	r18, 0xFF	; 255
    1d68:	82 2f       	mov	r24, r18
    1d6a:	90 e0       	ldi	r25, 0x00	; 0
    1d6c:	84 17       	cp	r24, r20
    1d6e:	95 07       	cpc	r25, r21
    1d70:	94 f3       	brlt	.-28     	; 0x1d56 <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    1d72:	89 e5       	ldi	r24, 0x59	; 89
    1d74:	97 e0       	ldi	r25, 0x07	; 7
    1d76:	9a 83       	std	Y+2, r25	; 0x02
    1d78:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    1d7a:	a2 50       	subi	r26, 0x02	; 2
    1d7c:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    1d7e:	fb 01       	movw	r30, r22
    1d80:	e7 5a       	subi	r30, 0xA7	; 167
    1d82:	f8 4f       	sbci	r31, 0xF8	; 248
    1d84:	80 81       	ld	r24, Z
    1d86:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    1d88:	80 91 47 01 	lds	r24, 0x0147
    1d8c:	8a 55       	subi	r24, 0x5A	; 90
    1d8e:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    1d90:	ce 01       	movw	r24, r28
    1d92:	01 96       	adiw	r24, 0x01	; 1
    1d94:	0e 94 79 09 	call	0x12f2	; 0x12f2 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    1d98:	e1 e4       	ldi	r30, 0x41	; 65
    1d9a:	f1 e0       	ldi	r31, 0x01	; 1
    1d9c:	80 81       	ld	r24, Z
    1d9e:	8f 71       	andi	r24, 0x1F	; 31
    1da0:	86 31       	cpi	r24, 0x16	; 22
    1da2:	e1 f7       	brne	.-8      	; 0x1d9c <PHY_TaskHandler+0x7c>

    IRQ_STATUS_REG_s.rxEnd = 1;
    1da4:	ef e4       	ldi	r30, 0x4F	; 79
    1da6:	f1 e0       	ldi	r31, 0x01	; 1
    1da8:	80 81       	ld	r24, Z
    1daa:	88 60       	ori	r24, 0x08	; 8
    1dac:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    1dae:	ec e4       	ldi	r30, 0x4C	; 76
    1db0:	f1 e0       	ldi	r31, 0x01	; 1
    1db2:	80 81       	ld	r24, Z
    1db4:	8f 77       	andi	r24, 0x7F	; 127
    1db6:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    1db8:	80 81       	ld	r24, Z
    1dba:	80 68       	ori	r24, 0x80	; 128
    1dbc:	80 83       	st	Z, r24
    1dbe:	25 c0       	rjmp	.+74     	; 0x1e0a <PHY_TaskHandler+0xea>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    1dc0:	80 91 4f 01 	lds	r24, 0x014F
    1dc4:	86 ff       	sbrs	r24, 6
    1dc6:	21 c0       	rjmp	.+66     	; 0x1e0a <PHY_TaskHandler+0xea>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    1dc8:	80 91 41 01 	lds	r24, 0x0141
    1dcc:	8f 71       	andi	r24, 0x1F	; 31
    1dce:	89 31       	cpi	r24, 0x19	; 25
    1dd0:	b9 f4       	brne	.+46     	; 0x1e00 <PHY_TaskHandler+0xe0>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    1dd2:	10 91 42 01 	lds	r17, 0x0142
    1dd6:	12 95       	swap	r17
    1dd8:	16 95       	lsr	r17
    1dda:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    1ddc:	49 f0       	breq	.+18     	; 0x1df0 <PHY_TaskHandler+0xd0>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    1dde:	13 30       	cpi	r17, 0x03	; 3
    1de0:	21 f0       	breq	.+8      	; 0x1dea <PHY_TaskHandler+0xca>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    1de2:	15 30       	cpi	r17, 0x05	; 5
    1de4:	21 f0       	breq	.+8      	; 0x1dee <PHY_TaskHandler+0xce>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    1de6:	13 e0       	ldi	r17, 0x03	; 3
    1de8:	03 c0       	rjmp	.+6      	; 0x1df0 <PHY_TaskHandler+0xd0>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    1dea:	11 e0       	ldi	r17, 0x01	; 1
    1dec:	01 c0       	rjmp	.+2      	; 0x1df0 <PHY_TaskHandler+0xd0>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
    1dee:	12 e0       	ldi	r17, 0x02	; 2
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    1df0:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <phySetRxState>
      phyState = PHY_STATE_IDLE;
    1df4:	81 e0       	ldi	r24, 0x01	; 1
    1df6:	80 93 d9 07 	sts	0x07D9, r24

      PHY_DataConf(status);
    1dfa:	81 2f       	mov	r24, r17
    1dfc:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    1e00:	ef e4       	ldi	r30, 0x4F	; 79
    1e02:	f1 e0       	ldi	r31, 0x01	; 1
    1e04:	80 81       	ld	r24, Z
    1e06:	80 64       	ori	r24, 0x40	; 64
    1e08:	80 83       	st	Z, r24
  }
}
    1e0a:	0f 90       	pop	r0
    1e0c:	0f 90       	pop	r0
    1e0e:	0f 90       	pop	r0
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	df 91       	pop	r29
    1e16:	cf 91       	pop	r28
    1e18:	1f 91       	pop	r17
    1e1a:	08 95       	ret

00001e1c <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    1e1c:	0e 94 be 05 	call	0xb7c	; 0xb7c <HAL_Init>
  SYS_TimerInit();
    1e20:	0e 94 82 0f 	call	0x1f04	; 0x1f04 <SYS_TimerInit>
  PHY_Init();
    1e24:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <PHY_Init>
  NWK_Init();
    1e28:	0e 94 75 07 	call	0xeea	; 0xeea <NWK_Init>
    1e2c:	08 95       	ret

00001e2e <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
    1e2e:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <PHY_TaskHandler>
  NWK_TaskHandler();
    1e32:	0e 94 b5 07 	call	0xf6a	; 0xf6a <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    1e36:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <SYS_TimerTaskHandler>
    1e3a:	08 95       	ret

00001e3c <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    1e3c:	0f 93       	push	r16
    1e3e:	1f 93       	push	r17
    1e40:	cf 93       	push	r28
    1e42:	df 93       	push	r29
    1e44:	ec 01       	movw	r28, r24
  if (timers)
    1e46:	80 91 da 07 	lds	r24, 0x07DA
    1e4a:	90 91 db 07 	lds	r25, 0x07DB
    1e4e:	00 97       	sbiw	r24, 0x00	; 0
    1e50:	09 f4       	brne	.+2      	; 0x1e54 <placeTimer+0x18>
    1e52:	45 c0       	rjmp	.+138    	; 0x1ede <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    1e54:	4e 81       	ldd	r20, Y+6	; 0x06
    1e56:	5f 81       	ldd	r21, Y+7	; 0x07
    1e58:	68 85       	ldd	r22, Y+8	; 0x08
    1e5a:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	02 81       	ldd	r16, Z+2	; 0x02
    1e60:	13 81       	ldd	r17, Z+3	; 0x03
    1e62:	24 81       	ldd	r18, Z+4	; 0x04
    1e64:	35 81       	ldd	r19, Z+5	; 0x05
    1e66:	40 17       	cp	r20, r16
    1e68:	51 07       	cpc	r21, r17
    1e6a:	62 07       	cpc	r22, r18
    1e6c:	73 07       	cpc	r23, r19
    1e6e:	60 f0       	brcs	.+24     	; 0x1e88 <placeTimer+0x4c>
    1e70:	dc 01       	movw	r26, r24
    1e72:	17 c0       	rjmp	.+46     	; 0x1ea2 <placeTimer+0x66>
    1e74:	02 81       	ldd	r16, Z+2	; 0x02
    1e76:	13 81       	ldd	r17, Z+3	; 0x03
    1e78:	24 81       	ldd	r18, Z+4	; 0x04
    1e7a:	35 81       	ldd	r19, Z+5	; 0x05
    1e7c:	40 17       	cp	r20, r16
    1e7e:	51 07       	cpc	r21, r17
    1e80:	62 07       	cpc	r22, r18
    1e82:	73 07       	cpc	r23, r19
    1e84:	68 f4       	brcc	.+26     	; 0x1ea0 <placeTimer+0x64>
    1e86:	03 c0       	rjmp	.+6      	; 0x1e8e <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1e88:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    1e8a:	a0 e0       	ldi	r26, 0x00	; 0
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    1e8e:	04 1b       	sub	r16, r20
    1e90:	15 0b       	sbc	r17, r21
    1e92:	26 0b       	sbc	r18, r22
    1e94:	37 0b       	sbc	r19, r23
    1e96:	02 83       	std	Z+2, r16	; 0x02
    1e98:	13 83       	std	Z+3, r17	; 0x03
    1e9a:	24 83       	std	Z+4, r18	; 0x04
    1e9c:	35 83       	std	Z+5, r19	; 0x05
         break;
    1e9e:	0a c0       	rjmp	.+20     	; 0x1eb4 <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1ea0:	df 01       	movw	r26, r30
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    1ea2:	40 1b       	sub	r20, r16
    1ea4:	51 0b       	sbc	r21, r17
    1ea6:	62 0b       	sbc	r22, r18
    1ea8:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1eaa:	ed 91       	ld	r30, X+
    1eac:	fc 91       	ld	r31, X
    1eae:	11 97       	sbiw	r26, 0x01	; 1
    1eb0:	30 97       	sbiw	r30, 0x00	; 0
    1eb2:	01 f7       	brne	.-64     	; 0x1e74 <placeTimer+0x38>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    1eb4:	4a 83       	std	Y+2, r20	; 0x02
    1eb6:	5b 83       	std	Y+3, r21	; 0x03
    1eb8:	6c 83       	std	Y+4, r22	; 0x04
    1eba:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    1ebc:	10 97       	sbiw	r26, 0x00	; 0
    1ebe:	41 f0       	breq	.+16     	; 0x1ed0 <placeTimer+0x94>
    {
      timer->next = prev->next;
    1ec0:	8d 91       	ld	r24, X+
    1ec2:	9c 91       	ld	r25, X
    1ec4:	11 97       	sbiw	r26, 0x01	; 1
    1ec6:	99 83       	std	Y+1, r25	; 0x01
    1ec8:	88 83       	st	Y, r24
      prev->next = timer;
    1eca:	cd 93       	st	X+, r28
    1ecc:	dc 93       	st	X, r29
    1ece:	15 c0       	rjmp	.+42     	; 0x1efa <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    1ed0:	99 83       	std	Y+1, r25	; 0x01
    1ed2:	88 83       	st	Y, r24
      timers = timer;
    1ed4:	d0 93 db 07 	sts	0x07DB, r29
    1ed8:	c0 93 da 07 	sts	0x07DA, r28
    1edc:	0e c0       	rjmp	.+28     	; 0x1efa <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    1ede:	19 82       	std	Y+1, r1	; 0x01
    1ee0:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    1ee2:	8e 81       	ldd	r24, Y+6	; 0x06
    1ee4:	9f 81       	ldd	r25, Y+7	; 0x07
    1ee6:	a8 85       	ldd	r26, Y+8	; 0x08
    1ee8:	b9 85       	ldd	r27, Y+9	; 0x09
    1eea:	8a 83       	std	Y+2, r24	; 0x02
    1eec:	9b 83       	std	Y+3, r25	; 0x03
    1eee:	ac 83       	std	Y+4, r26	; 0x04
    1ef0:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    1ef2:	d0 93 db 07 	sts	0x07DB, r29
    1ef6:	c0 93 da 07 	sts	0x07DA, r28
  }
}
    1efa:	df 91       	pop	r29
    1efc:	cf 91       	pop	r28
    1efe:	1f 91       	pop	r17
    1f00:	0f 91       	pop	r16
    1f02:	08 95       	ret

00001f04 <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    1f04:	10 92 db 07 	sts	0x07DB, r1
    1f08:	10 92 da 07 	sts	0x07DA, r1
    1f0c:	08 95       	ret

00001f0e <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1f0e:	e0 91 da 07 	lds	r30, 0x07DA
    1f12:	f0 91 db 07 	lds	r31, 0x07DB
    1f16:	30 97       	sbiw	r30, 0x00	; 0
    1f18:	71 f0       	breq	.+28     	; 0x1f36 <SYS_TimerStarted+0x28>
    if (t == timer)
    1f1a:	e8 17       	cp	r30, r24
    1f1c:	f9 07       	cpc	r31, r25
    1f1e:	21 f4       	brne	.+8      	; 0x1f28 <SYS_TimerStarted+0x1a>
    1f20:	0c c0       	rjmp	.+24     	; 0x1f3a <SYS_TimerStarted+0x2c>
    1f22:	8e 17       	cp	r24, r30
    1f24:	9f 07       	cpc	r25, r31
    1f26:	59 f0       	breq	.+22     	; 0x1f3e <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1f28:	01 90       	ld	r0, Z+
    1f2a:	f0 81       	ld	r31, Z
    1f2c:	e0 2d       	mov	r30, r0
    1f2e:	30 97       	sbiw	r30, 0x00	; 0
    1f30:	c1 f7       	brne	.-16     	; 0x1f22 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	08 95       	ret
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	08 95       	ret
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    1f40:	08 95       	ret

00001f42 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    1f42:	cf 93       	push	r28
    1f44:	df 93       	push	r29
    1f46:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    1f48:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <SYS_TimerStarted>
    1f4c:	81 11       	cpse	r24, r1
    1f4e:	03 c0       	rjmp	.+6      	; 0x1f56 <SYS_TimerStart+0x14>
    placeTimer(timer);
    1f50:	ce 01       	movw	r24, r28
    1f52:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <placeTimer>
}
    1f56:	df 91       	pop	r29
    1f58:	cf 91       	pop	r28
    1f5a:	08 95       	ret

00001f5c <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    1f5c:	cf 92       	push	r12
    1f5e:	df 92       	push	r13
    1f60:	ef 92       	push	r14
    1f62:	ff 92       	push	r15
    1f64:	cf 93       	push	r28
    1f66:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    1f68:	80 91 dc 07 	lds	r24, 0x07DC
    1f6c:	88 23       	and	r24, r24
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <SYS_TimerTaskHandler+0x16>
    1f70:	5a c0       	rjmp	.+180    	; 0x2026 <SYS_TimerTaskHandler+0xca>
    return;

  ATOMIC_SECTION_ENTER
    1f72:	8f b7       	in	r24, 0x3f	; 63
    1f74:	f8 94       	cli
    cnt = halTimerIrqCount;
    1f76:	c0 90 dc 07 	lds	r12, 0x07DC
    halTimerIrqCount = 0;
    1f7a:	10 92 dc 07 	sts	0x07DC, r1
  ATOMIC_SECTION_LEAVE
    1f7e:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    1f80:	d1 2c       	mov	r13, r1
    1f82:	e1 2c       	mov	r14, r1
    1f84:	f1 2c       	mov	r15, r1
    1f86:	cc 0c       	add	r12, r12
    1f88:	dd 1c       	adc	r13, r13
    1f8a:	ee 1c       	adc	r14, r14
    1f8c:	ff 1c       	adc	r15, r15
    1f8e:	d7 01       	movw	r26, r14
    1f90:	c6 01       	movw	r24, r12
    1f92:	88 0f       	add	r24, r24
    1f94:	99 1f       	adc	r25, r25
    1f96:	aa 1f       	adc	r26, r26
    1f98:	bb 1f       	adc	r27, r27
    1f9a:	88 0f       	add	r24, r24
    1f9c:	99 1f       	adc	r25, r25
    1f9e:	aa 1f       	adc	r26, r26
    1fa0:	bb 1f       	adc	r27, r27
    1fa2:	c8 0e       	add	r12, r24
    1fa4:	d9 1e       	adc	r13, r25
    1fa6:	ea 1e       	adc	r14, r26
    1fa8:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    1faa:	c0 91 da 07 	lds	r28, 0x07DA
    1fae:	d0 91 db 07 	lds	r29, 0x07DB
    1fb2:	20 97       	sbiw	r28, 0x00	; 0
    1fb4:	c1 f1       	breq	.+112    	; 0x2026 <SYS_TimerTaskHandler+0xca>
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1fba:	ac 81       	ldd	r26, Y+4	; 0x04
    1fbc:	bd 81       	ldd	r27, Y+5	; 0x05
    1fbe:	c8 16       	cp	r12, r24
    1fc0:	d9 06       	cpc	r13, r25
    1fc2:	ea 06       	cpc	r14, r26
    1fc4:	fb 06       	cpc	r15, r27
    1fc6:	18 f1       	brcs	.+70     	; 0x200e <SYS_TimerTaskHandler+0xb2>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    1fc8:	c8 1a       	sub	r12, r24
    1fca:	d9 0a       	sbc	r13, r25
    1fcc:	ea 0a       	sbc	r14, r26
    1fce:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    1fd0:	88 81       	ld	r24, Y
    1fd2:	99 81       	ldd	r25, Y+1	; 0x01
    1fd4:	90 93 db 07 	sts	0x07DB, r25
    1fd8:	80 93 da 07 	sts	0x07DA, r24
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    1fdc:	8a 85       	ldd	r24, Y+10	; 0x0a
    1fde:	81 30       	cpi	r24, 0x01	; 1
    1fe0:	19 f4       	brne	.+6      	; 0x1fe8 <SYS_TimerTaskHandler+0x8c>
      placeTimer(timer);
    1fe2:	ce 01       	movw	r24, r28
    1fe4:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <placeTimer>
    timer->handler(timer);
    1fe8:	eb 85       	ldd	r30, Y+11	; 0x0b
    1fea:	fc 85       	ldd	r31, Y+12	; 0x0c
    1fec:	ce 01       	movw	r24, r28
    1fee:	09 95       	icall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    1ff0:	c0 91 da 07 	lds	r28, 0x07DA
    1ff4:	d0 91 db 07 	lds	r29, 0x07DB
    1ff8:	20 97       	sbiw	r28, 0x00	; 0
    1ffa:	a9 f0       	breq	.+42     	; 0x2026 <SYS_TimerTaskHandler+0xca>
    1ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffe:	9b 81       	ldd	r25, Y+3	; 0x03
    2000:	ac 81       	ldd	r26, Y+4	; 0x04
    2002:	bd 81       	ldd	r27, Y+5	; 0x05
    2004:	c8 16       	cp	r12, r24
    2006:	d9 06       	cpc	r13, r25
    2008:	ea 06       	cpc	r14, r26
    200a:	fb 06       	cpc	r15, r27
    200c:	e8 f6       	brcc	.-70     	; 0x1fc8 <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    200e:	8a 81       	ldd	r24, Y+2	; 0x02
    2010:	9b 81       	ldd	r25, Y+3	; 0x03
    2012:	ac 81       	ldd	r26, Y+4	; 0x04
    2014:	bd 81       	ldd	r27, Y+5	; 0x05
    2016:	8c 19       	sub	r24, r12
    2018:	9d 09       	sbc	r25, r13
    201a:	ae 09       	sbc	r26, r14
    201c:	bf 09       	sbc	r27, r15
    201e:	8a 83       	std	Y+2, r24	; 0x02
    2020:	9b 83       	std	Y+3, r25	; 0x03
    2022:	ac 83       	std	Y+4, r26	; 0x04
    2024:	bd 83       	std	Y+5, r27	; 0x05
}
    2026:	df 91       	pop	r29
    2028:	cf 91       	pop	r28
    202a:	ff 90       	pop	r15
    202c:	ef 90       	pop	r14
    202e:	df 90       	pop	r13
    2030:	cf 90       	pop	r12
    2032:	08 95       	ret

00002034 <vfprintf>:
    2034:	a3 e1       	ldi	r26, 0x13	; 19
    2036:	b0 e0       	ldi	r27, 0x00	; 0
    2038:	e0 e2       	ldi	r30, 0x20	; 32
    203a:	f0 e1       	ldi	r31, 0x10	; 16
    203c:	0c 94 b8 13 	jmp	0x2770	; 0x2770 <__prologue_saves__>
    2040:	6c 01       	movw	r12, r24
    2042:	4b 01       	movw	r8, r22
    2044:	2a 01       	movw	r4, r20
    2046:	fc 01       	movw	r30, r24
    2048:	17 82       	std	Z+7, r1	; 0x07
    204a:	16 82       	std	Z+6, r1	; 0x06
    204c:	83 81       	ldd	r24, Z+3	; 0x03
    204e:	81 ff       	sbrs	r24, 1
    2050:	43 c3       	rjmp	.+1670   	; 0x26d8 <__stack+0x4d9>
    2052:	ae 01       	movw	r20, r28
    2054:	4f 5f       	subi	r20, 0xFF	; 255
    2056:	5f 4f       	sbci	r21, 0xFF	; 255
    2058:	3a 01       	movw	r6, r20
    205a:	f6 01       	movw	r30, r12
    205c:	93 81       	ldd	r25, Z+3	; 0x03
    205e:	f4 01       	movw	r30, r8
    2060:	93 fd       	sbrc	r25, 3
    2062:	85 91       	lpm	r24, Z+
    2064:	93 ff       	sbrs	r25, 3
    2066:	81 91       	ld	r24, Z+
    2068:	4f 01       	movw	r8, r30
    206a:	88 23       	and	r24, r24
    206c:	09 f4       	brne	.+2      	; 0x2070 <vfprintf+0x3c>
    206e:	30 c3       	rjmp	.+1632   	; 0x26d0 <__stack+0x4d1>
    2070:	85 32       	cpi	r24, 0x25	; 37
    2072:	39 f4       	brne	.+14     	; 0x2082 <vfprintf+0x4e>
    2074:	93 fd       	sbrc	r25, 3
    2076:	85 91       	lpm	r24, Z+
    2078:	93 ff       	sbrs	r25, 3
    207a:	81 91       	ld	r24, Z+
    207c:	4f 01       	movw	r8, r30
    207e:	85 32       	cpi	r24, 0x25	; 37
    2080:	39 f4       	brne	.+14     	; 0x2090 <vfprintf+0x5c>
    2082:	b6 01       	movw	r22, r12
    2084:	90 e0       	ldi	r25, 0x00	; 0
    2086:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    208a:	52 01       	movw	r10, r4
    208c:	25 01       	movw	r4, r10
    208e:	e5 cf       	rjmp	.-54     	; 0x205a <vfprintf+0x26>
    2090:	10 e0       	ldi	r17, 0x00	; 0
    2092:	f1 2c       	mov	r15, r1
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	20 32       	cpi	r18, 0x20	; 32
    2098:	a0 f4       	brcc	.+40     	; 0x20c2 <vfprintf+0x8e>
    209a:	8b 32       	cpi	r24, 0x2B	; 43
    209c:	69 f0       	breq	.+26     	; 0x20b8 <vfprintf+0x84>
    209e:	30 f4       	brcc	.+12     	; 0x20ac <vfprintf+0x78>
    20a0:	80 32       	cpi	r24, 0x20	; 32
    20a2:	59 f0       	breq	.+22     	; 0x20ba <vfprintf+0x86>
    20a4:	83 32       	cpi	r24, 0x23	; 35
    20a6:	69 f4       	brne	.+26     	; 0x20c2 <vfprintf+0x8e>
    20a8:	20 61       	ori	r18, 0x10	; 16
    20aa:	2c c0       	rjmp	.+88     	; 0x2104 <vfprintf+0xd0>
    20ac:	8d 32       	cpi	r24, 0x2D	; 45
    20ae:	39 f0       	breq	.+14     	; 0x20be <vfprintf+0x8a>
    20b0:	80 33       	cpi	r24, 0x30	; 48
    20b2:	39 f4       	brne	.+14     	; 0x20c2 <vfprintf+0x8e>
    20b4:	21 60       	ori	r18, 0x01	; 1
    20b6:	26 c0       	rjmp	.+76     	; 0x2104 <vfprintf+0xd0>
    20b8:	22 60       	ori	r18, 0x02	; 2
    20ba:	24 60       	ori	r18, 0x04	; 4
    20bc:	23 c0       	rjmp	.+70     	; 0x2104 <vfprintf+0xd0>
    20be:	28 60       	ori	r18, 0x08	; 8
    20c0:	21 c0       	rjmp	.+66     	; 0x2104 <vfprintf+0xd0>
    20c2:	27 fd       	sbrc	r18, 7
    20c4:	27 c0       	rjmp	.+78     	; 0x2114 <vfprintf+0xe0>
    20c6:	30 ed       	ldi	r19, 0xD0	; 208
    20c8:	38 0f       	add	r19, r24
    20ca:	3a 30       	cpi	r19, 0x0A	; 10
    20cc:	78 f4       	brcc	.+30     	; 0x20ec <vfprintf+0xb8>
    20ce:	26 ff       	sbrs	r18, 6
    20d0:	06 c0       	rjmp	.+12     	; 0x20de <vfprintf+0xaa>
    20d2:	fa e0       	ldi	r31, 0x0A	; 10
    20d4:	1f 9f       	mul	r17, r31
    20d6:	30 0d       	add	r19, r0
    20d8:	11 24       	eor	r1, r1
    20da:	13 2f       	mov	r17, r19
    20dc:	13 c0       	rjmp	.+38     	; 0x2104 <vfprintf+0xd0>
    20de:	4a e0       	ldi	r20, 0x0A	; 10
    20e0:	f4 9e       	mul	r15, r20
    20e2:	30 0d       	add	r19, r0
    20e4:	11 24       	eor	r1, r1
    20e6:	f3 2e       	mov	r15, r19
    20e8:	20 62       	ori	r18, 0x20	; 32
    20ea:	0c c0       	rjmp	.+24     	; 0x2104 <vfprintf+0xd0>
    20ec:	8e 32       	cpi	r24, 0x2E	; 46
    20ee:	21 f4       	brne	.+8      	; 0x20f8 <vfprintf+0xc4>
    20f0:	26 fd       	sbrc	r18, 6
    20f2:	ee c2       	rjmp	.+1500   	; 0x26d0 <__stack+0x4d1>
    20f4:	20 64       	ori	r18, 0x40	; 64
    20f6:	06 c0       	rjmp	.+12     	; 0x2104 <vfprintf+0xd0>
    20f8:	8c 36       	cpi	r24, 0x6C	; 108
    20fa:	11 f4       	brne	.+4      	; 0x2100 <vfprintf+0xcc>
    20fc:	20 68       	ori	r18, 0x80	; 128
    20fe:	02 c0       	rjmp	.+4      	; 0x2104 <vfprintf+0xd0>
    2100:	88 36       	cpi	r24, 0x68	; 104
    2102:	41 f4       	brne	.+16     	; 0x2114 <vfprintf+0xe0>
    2104:	f4 01       	movw	r30, r8
    2106:	93 fd       	sbrc	r25, 3
    2108:	85 91       	lpm	r24, Z+
    210a:	93 ff       	sbrs	r25, 3
    210c:	81 91       	ld	r24, Z+
    210e:	4f 01       	movw	r8, r30
    2110:	81 11       	cpse	r24, r1
    2112:	c1 cf       	rjmp	.-126    	; 0x2096 <vfprintf+0x62>
    2114:	9b eb       	ldi	r25, 0xBB	; 187
    2116:	98 0f       	add	r25, r24
    2118:	93 30       	cpi	r25, 0x03	; 3
    211a:	18 f4       	brcc	.+6      	; 0x2122 <vfprintf+0xee>
    211c:	20 61       	ori	r18, 0x10	; 16
    211e:	80 5e       	subi	r24, 0xE0	; 224
    2120:	06 c0       	rjmp	.+12     	; 0x212e <vfprintf+0xfa>
    2122:	9b e9       	ldi	r25, 0x9B	; 155
    2124:	98 0f       	add	r25, r24
    2126:	93 30       	cpi	r25, 0x03	; 3
    2128:	08 f0       	brcs	.+2      	; 0x212c <vfprintf+0xf8>
    212a:	71 c1       	rjmp	.+738    	; 0x240e <__stack+0x20f>
    212c:	2f 7e       	andi	r18, 0xEF	; 239
    212e:	26 ff       	sbrs	r18, 6
    2130:	16 e0       	ldi	r17, 0x06	; 6
    2132:	2f 73       	andi	r18, 0x3F	; 63
    2134:	32 2e       	mov	r3, r18
    2136:	85 36       	cpi	r24, 0x65	; 101
    2138:	19 f4       	brne	.+6      	; 0x2140 <vfprintf+0x10c>
    213a:	20 64       	ori	r18, 0x40	; 64
    213c:	32 2e       	mov	r3, r18
    213e:	08 c0       	rjmp	.+16     	; 0x2150 <vfprintf+0x11c>
    2140:	86 36       	cpi	r24, 0x66	; 102
    2142:	21 f4       	brne	.+8      	; 0x214c <vfprintf+0x118>
    2144:	f2 2f       	mov	r31, r18
    2146:	f0 68       	ori	r31, 0x80	; 128
    2148:	3f 2e       	mov	r3, r31
    214a:	02 c0       	rjmp	.+4      	; 0x2150 <vfprintf+0x11c>
    214c:	11 11       	cpse	r17, r1
    214e:	11 50       	subi	r17, 0x01	; 1
    2150:	37 fe       	sbrs	r3, 7
    2152:	07 c0       	rjmp	.+14     	; 0x2162 <vfprintf+0x12e>
    2154:	1c 33       	cpi	r17, 0x3C	; 60
    2156:	50 f4       	brcc	.+20     	; 0x216c <vfprintf+0x138>
    2158:	ee 24       	eor	r14, r14
    215a:	e3 94       	inc	r14
    215c:	e1 0e       	add	r14, r17
    215e:	27 e0       	ldi	r18, 0x07	; 7
    2160:	0b c0       	rjmp	.+22     	; 0x2178 <vfprintf+0x144>
    2162:	18 30       	cpi	r17, 0x08	; 8
    2164:	38 f0       	brcs	.+14     	; 0x2174 <vfprintf+0x140>
    2166:	27 e0       	ldi	r18, 0x07	; 7
    2168:	17 e0       	ldi	r17, 0x07	; 7
    216a:	05 c0       	rjmp	.+10     	; 0x2176 <vfprintf+0x142>
    216c:	27 e0       	ldi	r18, 0x07	; 7
    216e:	4c e3       	ldi	r20, 0x3C	; 60
    2170:	e4 2e       	mov	r14, r20
    2172:	02 c0       	rjmp	.+4      	; 0x2178 <vfprintf+0x144>
    2174:	21 2f       	mov	r18, r17
    2176:	e1 2c       	mov	r14, r1
    2178:	52 01       	movw	r10, r4
    217a:	44 e0       	ldi	r20, 0x04	; 4
    217c:	a4 0e       	add	r10, r20
    217e:	b1 1c       	adc	r11, r1
    2180:	f2 01       	movw	r30, r4
    2182:	60 81       	ld	r22, Z
    2184:	71 81       	ldd	r23, Z+1	; 0x01
    2186:	82 81       	ldd	r24, Z+2	; 0x02
    2188:	93 81       	ldd	r25, Z+3	; 0x03
    218a:	0e 2d       	mov	r16, r14
    218c:	a3 01       	movw	r20, r6
    218e:	0e 94 4b 14 	call	0x2896	; 0x2896 <__ftoa_engine>
    2192:	2c 01       	movw	r4, r24
    2194:	09 81       	ldd	r16, Y+1	; 0x01
    2196:	00 ff       	sbrs	r16, 0
    2198:	02 c0       	rjmp	.+4      	; 0x219e <vfprintf+0x16a>
    219a:	03 ff       	sbrs	r16, 3
    219c:	07 c0       	rjmp	.+14     	; 0x21ac <vfprintf+0x178>
    219e:	31 fc       	sbrc	r3, 1
    21a0:	08 c0       	rjmp	.+16     	; 0x21b2 <vfprintf+0x17e>
    21a2:	32 fe       	sbrs	r3, 2
    21a4:	09 c0       	rjmp	.+18     	; 0x21b8 <vfprintf+0x184>
    21a6:	30 e2       	ldi	r19, 0x20	; 32
    21a8:	23 2e       	mov	r2, r19
    21aa:	07 c0       	rjmp	.+14     	; 0x21ba <vfprintf+0x186>
    21ac:	2d e2       	ldi	r18, 0x2D	; 45
    21ae:	22 2e       	mov	r2, r18
    21b0:	04 c0       	rjmp	.+8      	; 0x21ba <vfprintf+0x186>
    21b2:	9b e2       	ldi	r25, 0x2B	; 43
    21b4:	29 2e       	mov	r2, r25
    21b6:	01 c0       	rjmp	.+2      	; 0x21ba <vfprintf+0x186>
    21b8:	21 2c       	mov	r2, r1
    21ba:	80 2f       	mov	r24, r16
    21bc:	8c 70       	andi	r24, 0x0C	; 12
    21be:	19 f0       	breq	.+6      	; 0x21c6 <vfprintf+0x192>
    21c0:	21 10       	cpse	r2, r1
    21c2:	68 c2       	rjmp	.+1232   	; 0x2694 <__stack+0x495>
    21c4:	a8 c2       	rjmp	.+1360   	; 0x2716 <__stack+0x517>
    21c6:	37 fe       	sbrs	r3, 7
    21c8:	0f c0       	rjmp	.+30     	; 0x21e8 <vfprintf+0x1b4>
    21ca:	e4 0c       	add	r14, r4
    21cc:	04 ff       	sbrs	r16, 4
    21ce:	04 c0       	rjmp	.+8      	; 0x21d8 <vfprintf+0x1a4>
    21d0:	8a 81       	ldd	r24, Y+2	; 0x02
    21d2:	81 33       	cpi	r24, 0x31	; 49
    21d4:	09 f4       	brne	.+2      	; 0x21d8 <vfprintf+0x1a4>
    21d6:	ea 94       	dec	r14
    21d8:	1e 14       	cp	r1, r14
    21da:	74 f5       	brge	.+92     	; 0x2238 <__stack+0x39>
    21dc:	f8 e0       	ldi	r31, 0x08	; 8
    21de:	fe 15       	cp	r31, r14
    21e0:	78 f5       	brcc	.+94     	; 0x2240 <__stack+0x41>
    21e2:	88 e0       	ldi	r24, 0x08	; 8
    21e4:	e8 2e       	mov	r14, r24
    21e6:	2c c0       	rjmp	.+88     	; 0x2240 <__stack+0x41>
    21e8:	36 fc       	sbrc	r3, 6
    21ea:	2a c0       	rjmp	.+84     	; 0x2240 <__stack+0x41>
    21ec:	81 2f       	mov	r24, r17
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	84 15       	cp	r24, r4
    21f2:	95 05       	cpc	r25, r5
    21f4:	9c f0       	brlt	.+38     	; 0x221c <__stack+0x1d>
    21f6:	2c ef       	ldi	r18, 0xFC	; 252
    21f8:	42 16       	cp	r4, r18
    21fa:	2f ef       	ldi	r18, 0xFF	; 255
    21fc:	52 06       	cpc	r5, r18
    21fe:	74 f0       	brlt	.+28     	; 0x221c <__stack+0x1d>
    2200:	43 2d       	mov	r20, r3
    2202:	40 68       	ori	r20, 0x80	; 128
    2204:	34 2e       	mov	r3, r20
    2206:	0a c0       	rjmp	.+20     	; 0x221c <__stack+0x1d>
    2208:	e2 e0       	ldi	r30, 0x02	; 2
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	ec 0f       	add	r30, r28
    220e:	fd 1f       	adc	r31, r29
    2210:	e1 0f       	add	r30, r17
    2212:	f1 1d       	adc	r31, r1
    2214:	80 81       	ld	r24, Z
    2216:	80 33       	cpi	r24, 0x30	; 48
    2218:	19 f4       	brne	.+6      	; 0x2220 <__stack+0x21>
    221a:	11 50       	subi	r17, 0x01	; 1
    221c:	11 11       	cpse	r17, r1
    221e:	f4 cf       	rjmp	.-24     	; 0x2208 <__stack+0x9>
    2220:	37 fe       	sbrs	r3, 7
    2222:	0e c0       	rjmp	.+28     	; 0x2240 <__stack+0x41>
    2224:	ee 24       	eor	r14, r14
    2226:	e3 94       	inc	r14
    2228:	e1 0e       	add	r14, r17
    222a:	81 2f       	mov	r24, r17
    222c:	90 e0       	ldi	r25, 0x00	; 0
    222e:	48 16       	cp	r4, r24
    2230:	59 06       	cpc	r5, r25
    2232:	2c f4       	brge	.+10     	; 0x223e <__stack+0x3f>
    2234:	14 19       	sub	r17, r4
    2236:	04 c0       	rjmp	.+8      	; 0x2240 <__stack+0x41>
    2238:	ee 24       	eor	r14, r14
    223a:	e3 94       	inc	r14
    223c:	01 c0       	rjmp	.+2      	; 0x2240 <__stack+0x41>
    223e:	10 e0       	ldi	r17, 0x00	; 0
    2240:	37 fe       	sbrs	r3, 7
    2242:	06 c0       	rjmp	.+12     	; 0x2250 <__stack+0x51>
    2244:	14 14       	cp	r1, r4
    2246:	15 04       	cpc	r1, r5
    2248:	34 f4       	brge	.+12     	; 0x2256 <__stack+0x57>
    224a:	c2 01       	movw	r24, r4
    224c:	01 96       	adiw	r24, 0x01	; 1
    224e:	05 c0       	rjmp	.+10     	; 0x225a <__stack+0x5b>
    2250:	85 e0       	ldi	r24, 0x05	; 5
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	02 c0       	rjmp	.+4      	; 0x225a <__stack+0x5b>
    2256:	81 e0       	ldi	r24, 0x01	; 1
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	21 10       	cpse	r2, r1
    225c:	01 96       	adiw	r24, 0x01	; 1
    225e:	11 23       	and	r17, r17
    2260:	31 f0       	breq	.+12     	; 0x226e <__stack+0x6f>
    2262:	21 2f       	mov	r18, r17
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	2f 5f       	subi	r18, 0xFF	; 255
    2268:	3f 4f       	sbci	r19, 0xFF	; 255
    226a:	82 0f       	add	r24, r18
    226c:	93 1f       	adc	r25, r19
    226e:	2f 2d       	mov	r18, r15
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	82 17       	cp	r24, r18
    2274:	93 07       	cpc	r25, r19
    2276:	14 f4       	brge	.+4      	; 0x227c <__stack+0x7d>
    2278:	f8 1a       	sub	r15, r24
    227a:	01 c0       	rjmp	.+2      	; 0x227e <__stack+0x7f>
    227c:	f1 2c       	mov	r15, r1
    227e:	83 2d       	mov	r24, r3
    2280:	89 70       	andi	r24, 0x09	; 9
    2282:	49 f4       	brne	.+18     	; 0x2296 <__stack+0x97>
    2284:	ff 20       	and	r15, r15
    2286:	39 f0       	breq	.+14     	; 0x2296 <__stack+0x97>
    2288:	b6 01       	movw	r22, r12
    228a:	80 e2       	ldi	r24, 0x20	; 32
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    2292:	fa 94       	dec	r15
    2294:	f7 cf       	rjmp	.-18     	; 0x2284 <__stack+0x85>
    2296:	22 20       	and	r2, r2
    2298:	29 f0       	breq	.+10     	; 0x22a4 <__stack+0xa5>
    229a:	b6 01       	movw	r22, r12
    229c:	82 2d       	mov	r24, r2
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    22a4:	33 fc       	sbrc	r3, 3
    22a6:	09 c0       	rjmp	.+18     	; 0x22ba <__stack+0xbb>
    22a8:	ff 20       	and	r15, r15
    22aa:	39 f0       	breq	.+14     	; 0x22ba <__stack+0xbb>
    22ac:	b6 01       	movw	r22, r12
    22ae:	80 e3       	ldi	r24, 0x30	; 48
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    22b6:	fa 94       	dec	r15
    22b8:	f7 cf       	rjmp	.-18     	; 0x22a8 <__stack+0xa9>
    22ba:	37 fe       	sbrs	r3, 7
    22bc:	5a c0       	rjmp	.+180    	; 0x2372 <__stack+0x173>
    22be:	94 2d       	mov	r25, r4
    22c0:	85 2d       	mov	r24, r5
    22c2:	57 fe       	sbrs	r5, 7
    22c4:	02 c0       	rjmp	.+4      	; 0x22ca <__stack+0xcb>
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	29 2e       	mov	r2, r25
    22cc:	38 2e       	mov	r3, r24
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	a2 01       	movw	r20, r4
    22d4:	4e 19       	sub	r20, r14
    22d6:	51 09       	sbc	r21, r1
    22d8:	5d 87       	std	Y+13, r21	; 0x0d
    22da:	4c 87       	std	Y+12, r20	; 0x0c
    22dc:	a2 01       	movw	r20, r4
    22de:	42 19       	sub	r20, r2
    22e0:	53 09       	sbc	r21, r3
    22e2:	5f 87       	std	Y+15, r21	; 0x0f
    22e4:	4e 87       	std	Y+14, r20	; 0x0e
    22e6:	61 2f       	mov	r22, r17
    22e8:	70 e0       	ldi	r23, 0x00	; 0
    22ea:	44 27       	eor	r20, r20
    22ec:	55 27       	eor	r21, r21
    22ee:	46 1b       	sub	r20, r22
    22f0:	57 0b       	sbc	r21, r23
    22f2:	59 8b       	std	Y+17, r21	; 0x11
    22f4:	48 8b       	std	Y+16, r20	; 0x10
    22f6:	5f ef       	ldi	r21, 0xFF	; 255
    22f8:	25 16       	cp	r2, r21
    22fa:	35 06       	cpc	r3, r21
    22fc:	49 f4       	brne	.+18     	; 0x2310 <__stack+0x111>
    22fe:	b6 01       	movw	r22, r12
    2300:	8e e2       	ldi	r24, 0x2E	; 46
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	2a 8b       	std	Y+18, r18	; 0x12
    2306:	3b 8b       	std	Y+19, r19	; 0x13
    2308:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    230c:	3b 89       	ldd	r19, Y+19	; 0x13
    230e:	2a 89       	ldd	r18, Y+18	; 0x12
    2310:	42 14       	cp	r4, r2
    2312:	53 04       	cpc	r5, r3
    2314:	6c f0       	brlt	.+26     	; 0x2330 <__stack+0x131>
    2316:	4c 85       	ldd	r20, Y+12	; 0x0c
    2318:	5d 85       	ldd	r21, Y+13	; 0x0d
    231a:	42 15       	cp	r20, r2
    231c:	53 05       	cpc	r21, r3
    231e:	44 f4       	brge	.+16     	; 0x2330 <__stack+0x131>
    2320:	ee 85       	ldd	r30, Y+14	; 0x0e
    2322:	ff 85       	ldd	r31, Y+15	; 0x0f
    2324:	e2 0f       	add	r30, r18
    2326:	f3 1f       	adc	r31, r19
    2328:	e6 0d       	add	r30, r6
    232a:	f7 1d       	adc	r31, r7
    232c:	81 81       	ldd	r24, Z+1	; 0x01
    232e:	01 c0       	rjmp	.+2      	; 0x2332 <__stack+0x133>
    2330:	80 e3       	ldi	r24, 0x30	; 48
    2332:	51 e0       	ldi	r21, 0x01	; 1
    2334:	25 1a       	sub	r2, r21
    2336:	31 08       	sbc	r3, r1
    2338:	2f 5f       	subi	r18, 0xFF	; 255
    233a:	3f 4f       	sbci	r19, 0xFF	; 255
    233c:	48 89       	ldd	r20, Y+16	; 0x10
    233e:	59 89       	ldd	r21, Y+17	; 0x11
    2340:	24 16       	cp	r2, r20
    2342:	35 06       	cpc	r3, r21
    2344:	4c f0       	brlt	.+18     	; 0x2358 <__stack+0x159>
    2346:	b6 01       	movw	r22, r12
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	2a 8b       	std	Y+18, r18	; 0x12
    234c:	3b 8b       	std	Y+19, r19	; 0x13
    234e:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    2352:	2a 89       	ldd	r18, Y+18	; 0x12
    2354:	3b 89       	ldd	r19, Y+19	; 0x13
    2356:	cf cf       	rjmp	.-98     	; 0x22f6 <__stack+0xf7>
    2358:	24 14       	cp	r2, r4
    235a:	35 04       	cpc	r3, r5
    235c:	39 f4       	brne	.+14     	; 0x236c <__stack+0x16d>
    235e:	9a 81       	ldd	r25, Y+2	; 0x02
    2360:	96 33       	cpi	r25, 0x36	; 54
    2362:	18 f4       	brcc	.+6      	; 0x236a <__stack+0x16b>
    2364:	95 33       	cpi	r25, 0x35	; 53
    2366:	11 f4       	brne	.+4      	; 0x236c <__stack+0x16d>
    2368:	04 ff       	sbrs	r16, 4
    236a:	81 e3       	ldi	r24, 0x31	; 49
    236c:	b6 01       	movw	r22, r12
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	4b c0       	rjmp	.+150    	; 0x2408 <__stack+0x209>
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	81 33       	cpi	r24, 0x31	; 49
    2376:	09 f0       	breq	.+2      	; 0x237a <__stack+0x17b>
    2378:	0f 7e       	andi	r16, 0xEF	; 239
    237a:	b6 01       	movw	r22, r12
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    2382:	11 11       	cpse	r17, r1
    2384:	05 c0       	rjmp	.+10     	; 0x2390 <__stack+0x191>
    2386:	34 fc       	sbrc	r3, 4
    2388:	18 c0       	rjmp	.+48     	; 0x23ba <__stack+0x1bb>
    238a:	85 e6       	ldi	r24, 0x65	; 101
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	17 c0       	rjmp	.+46     	; 0x23be <__stack+0x1bf>
    2390:	b6 01       	movw	r22, r12
    2392:	8e e2       	ldi	r24, 0x2E	; 46
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    239a:	82 e0       	ldi	r24, 0x02	; 2
    239c:	ee 24       	eor	r14, r14
    239e:	e3 94       	inc	r14
    23a0:	e8 0e       	add	r14, r24
    23a2:	f3 01       	movw	r30, r6
    23a4:	e8 0f       	add	r30, r24
    23a6:	f1 1d       	adc	r31, r1
    23a8:	80 81       	ld	r24, Z
    23aa:	b6 01       	movw	r22, r12
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    23b2:	11 50       	subi	r17, 0x01	; 1
    23b4:	8e 2d       	mov	r24, r14
    23b6:	91 f7       	brne	.-28     	; 0x239c <__stack+0x19d>
    23b8:	e6 cf       	rjmp	.-52     	; 0x2386 <__stack+0x187>
    23ba:	85 e4       	ldi	r24, 0x45	; 69
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	b6 01       	movw	r22, r12
    23c0:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    23c4:	57 fc       	sbrc	r5, 7
    23c6:	05 c0       	rjmp	.+10     	; 0x23d2 <__stack+0x1d3>
    23c8:	41 14       	cp	r4, r1
    23ca:	51 04       	cpc	r5, r1
    23cc:	39 f4       	brne	.+14     	; 0x23dc <__stack+0x1dd>
    23ce:	04 ff       	sbrs	r16, 4
    23d0:	05 c0       	rjmp	.+10     	; 0x23dc <__stack+0x1dd>
    23d2:	51 94       	neg	r5
    23d4:	41 94       	neg	r4
    23d6:	51 08       	sbc	r5, r1
    23d8:	8d e2       	ldi	r24, 0x2D	; 45
    23da:	01 c0       	rjmp	.+2      	; 0x23de <__stack+0x1df>
    23dc:	8b e2       	ldi	r24, 0x2B	; 43
    23de:	b6 01       	movw	r22, r12
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    23e6:	80 e3       	ldi	r24, 0x30	; 48
    23e8:	9a e0       	ldi	r25, 0x0A	; 10
    23ea:	49 16       	cp	r4, r25
    23ec:	51 04       	cpc	r5, r1
    23ee:	2c f0       	brlt	.+10     	; 0x23fa <__stack+0x1fb>
    23f0:	8f 5f       	subi	r24, 0xFF	; 255
    23f2:	5a e0       	ldi	r21, 0x0A	; 10
    23f4:	45 1a       	sub	r4, r21
    23f6:	51 08       	sbc	r5, r1
    23f8:	f7 cf       	rjmp	.-18     	; 0x23e8 <__stack+0x1e9>
    23fa:	b6 01       	movw	r22, r12
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    2402:	b6 01       	movw	r22, r12
    2404:	c2 01       	movw	r24, r4
    2406:	c0 96       	adiw	r24, 0x30	; 48
    2408:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    240c:	57 c1       	rjmp	.+686    	; 0x26bc <__stack+0x4bd>
    240e:	83 36       	cpi	r24, 0x63	; 99
    2410:	31 f0       	breq	.+12     	; 0x241e <__stack+0x21f>
    2412:	83 37       	cpi	r24, 0x73	; 115
    2414:	79 f0       	breq	.+30     	; 0x2434 <__stack+0x235>
    2416:	83 35       	cpi	r24, 0x53	; 83
    2418:	09 f0       	breq	.+2      	; 0x241c <__stack+0x21d>
    241a:	58 c0       	rjmp	.+176    	; 0x24cc <__stack+0x2cd>
    241c:	21 c0       	rjmp	.+66     	; 0x2460 <__stack+0x261>
    241e:	52 01       	movw	r10, r4
    2420:	e2 e0       	ldi	r30, 0x02	; 2
    2422:	ae 0e       	add	r10, r30
    2424:	b1 1c       	adc	r11, r1
    2426:	f2 01       	movw	r30, r4
    2428:	80 81       	ld	r24, Z
    242a:	89 83       	std	Y+1, r24	; 0x01
    242c:	01 e0       	ldi	r16, 0x01	; 1
    242e:	10 e0       	ldi	r17, 0x00	; 0
    2430:	23 01       	movw	r4, r6
    2432:	14 c0       	rjmp	.+40     	; 0x245c <__stack+0x25d>
    2434:	52 01       	movw	r10, r4
    2436:	f2 e0       	ldi	r31, 0x02	; 2
    2438:	af 0e       	add	r10, r31
    243a:	b1 1c       	adc	r11, r1
    243c:	f2 01       	movw	r30, r4
    243e:	40 80       	ld	r4, Z
    2440:	51 80       	ldd	r5, Z+1	; 0x01
    2442:	26 ff       	sbrs	r18, 6
    2444:	03 c0       	rjmp	.+6      	; 0x244c <__stack+0x24d>
    2446:	61 2f       	mov	r22, r17
    2448:	70 e0       	ldi	r23, 0x00	; 0
    244a:	02 c0       	rjmp	.+4      	; 0x2450 <__stack+0x251>
    244c:	6f ef       	ldi	r22, 0xFF	; 255
    244e:	7f ef       	ldi	r23, 0xFF	; 255
    2450:	c2 01       	movw	r24, r4
    2452:	2a 8b       	std	Y+18, r18	; 0x12
    2454:	0e 94 37 15 	call	0x2a6e	; 0x2a6e <strnlen>
    2458:	8c 01       	movw	r16, r24
    245a:	2a 89       	ldd	r18, Y+18	; 0x12
    245c:	2f 77       	andi	r18, 0x7F	; 127
    245e:	15 c0       	rjmp	.+42     	; 0x248a <__stack+0x28b>
    2460:	52 01       	movw	r10, r4
    2462:	f2 e0       	ldi	r31, 0x02	; 2
    2464:	af 0e       	add	r10, r31
    2466:	b1 1c       	adc	r11, r1
    2468:	f2 01       	movw	r30, r4
    246a:	40 80       	ld	r4, Z
    246c:	51 80       	ldd	r5, Z+1	; 0x01
    246e:	26 ff       	sbrs	r18, 6
    2470:	03 c0       	rjmp	.+6      	; 0x2478 <__stack+0x279>
    2472:	61 2f       	mov	r22, r17
    2474:	70 e0       	ldi	r23, 0x00	; 0
    2476:	02 c0       	rjmp	.+4      	; 0x247c <__stack+0x27d>
    2478:	6f ef       	ldi	r22, 0xFF	; 255
    247a:	7f ef       	ldi	r23, 0xFF	; 255
    247c:	c2 01       	movw	r24, r4
    247e:	2a 8b       	std	Y+18, r18	; 0x12
    2480:	0e 94 23 15 	call	0x2a46	; 0x2a46 <strnlen_P>
    2484:	8c 01       	movw	r16, r24
    2486:	2a 89       	ldd	r18, Y+18	; 0x12
    2488:	20 68       	ori	r18, 0x80	; 128
    248a:	32 2e       	mov	r3, r18
    248c:	23 fd       	sbrc	r18, 3
    248e:	1a c0       	rjmp	.+52     	; 0x24c4 <__stack+0x2c5>
    2490:	8f 2d       	mov	r24, r15
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	08 17       	cp	r16, r24
    2496:	19 07       	cpc	r17, r25
    2498:	a8 f4       	brcc	.+42     	; 0x24c4 <__stack+0x2c5>
    249a:	b6 01       	movw	r22, r12
    249c:	80 e2       	ldi	r24, 0x20	; 32
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    24a4:	fa 94       	dec	r15
    24a6:	f4 cf       	rjmp	.-24     	; 0x2490 <__stack+0x291>
    24a8:	f2 01       	movw	r30, r4
    24aa:	37 fc       	sbrc	r3, 7
    24ac:	85 91       	lpm	r24, Z+
    24ae:	37 fe       	sbrs	r3, 7
    24b0:	81 91       	ld	r24, Z+
    24b2:	2f 01       	movw	r4, r30
    24b4:	b6 01       	movw	r22, r12
    24b6:	90 e0       	ldi	r25, 0x00	; 0
    24b8:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    24bc:	f1 10       	cpse	r15, r1
    24be:	fa 94       	dec	r15
    24c0:	01 50       	subi	r16, 0x01	; 1
    24c2:	11 09       	sbc	r17, r1
    24c4:	01 15       	cp	r16, r1
    24c6:	11 05       	cpc	r17, r1
    24c8:	79 f7       	brne	.-34     	; 0x24a8 <__stack+0x2a9>
    24ca:	f8 c0       	rjmp	.+496    	; 0x26bc <__stack+0x4bd>
    24cc:	84 36       	cpi	r24, 0x64	; 100
    24ce:	11 f0       	breq	.+4      	; 0x24d4 <__stack+0x2d5>
    24d0:	89 36       	cpi	r24, 0x69	; 105
    24d2:	59 f5       	brne	.+86     	; 0x252a <__stack+0x32b>
    24d4:	52 01       	movw	r10, r4
    24d6:	27 ff       	sbrs	r18, 7
    24d8:	09 c0       	rjmp	.+18     	; 0x24ec <__stack+0x2ed>
    24da:	f4 e0       	ldi	r31, 0x04	; 4
    24dc:	af 0e       	add	r10, r31
    24de:	b1 1c       	adc	r11, r1
    24e0:	f2 01       	movw	r30, r4
    24e2:	60 81       	ld	r22, Z
    24e4:	71 81       	ldd	r23, Z+1	; 0x01
    24e6:	82 81       	ldd	r24, Z+2	; 0x02
    24e8:	93 81       	ldd	r25, Z+3	; 0x03
    24ea:	0a c0       	rjmp	.+20     	; 0x2500 <__stack+0x301>
    24ec:	f2 e0       	ldi	r31, 0x02	; 2
    24ee:	af 0e       	add	r10, r31
    24f0:	b1 1c       	adc	r11, r1
    24f2:	f2 01       	movw	r30, r4
    24f4:	60 81       	ld	r22, Z
    24f6:	71 81       	ldd	r23, Z+1	; 0x01
    24f8:	07 2e       	mov	r0, r23
    24fa:	00 0c       	add	r0, r0
    24fc:	88 0b       	sbc	r24, r24
    24fe:	99 0b       	sbc	r25, r25
    2500:	2f 76       	andi	r18, 0x6F	; 111
    2502:	32 2e       	mov	r3, r18
    2504:	97 ff       	sbrs	r25, 7
    2506:	09 c0       	rjmp	.+18     	; 0x251a <__stack+0x31b>
    2508:	90 95       	com	r25
    250a:	80 95       	com	r24
    250c:	70 95       	com	r23
    250e:	61 95       	neg	r22
    2510:	7f 4f       	sbci	r23, 0xFF	; 255
    2512:	8f 4f       	sbci	r24, 0xFF	; 255
    2514:	9f 4f       	sbci	r25, 0xFF	; 255
    2516:	20 68       	ori	r18, 0x80	; 128
    2518:	32 2e       	mov	r3, r18
    251a:	2a e0       	ldi	r18, 0x0A	; 10
    251c:	30 e0       	ldi	r19, 0x00	; 0
    251e:	a3 01       	movw	r20, r6
    2520:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <__ultoa_invert>
    2524:	e8 2e       	mov	r14, r24
    2526:	e6 18       	sub	r14, r6
    2528:	3f c0       	rjmp	.+126    	; 0x25a8 <__stack+0x3a9>
    252a:	02 2f       	mov	r16, r18
    252c:	85 37       	cpi	r24, 0x75	; 117
    252e:	21 f4       	brne	.+8      	; 0x2538 <__stack+0x339>
    2530:	0f 7e       	andi	r16, 0xEF	; 239
    2532:	2a e0       	ldi	r18, 0x0A	; 10
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	1d c0       	rjmp	.+58     	; 0x2572 <__stack+0x373>
    2538:	09 7f       	andi	r16, 0xF9	; 249
    253a:	8f 36       	cpi	r24, 0x6F	; 111
    253c:	91 f0       	breq	.+36     	; 0x2562 <__stack+0x363>
    253e:	18 f4       	brcc	.+6      	; 0x2546 <__stack+0x347>
    2540:	88 35       	cpi	r24, 0x58	; 88
    2542:	59 f0       	breq	.+22     	; 0x255a <__stack+0x35b>
    2544:	c5 c0       	rjmp	.+394    	; 0x26d0 <__stack+0x4d1>
    2546:	80 37       	cpi	r24, 0x70	; 112
    2548:	19 f0       	breq	.+6      	; 0x2550 <__stack+0x351>
    254a:	88 37       	cpi	r24, 0x78	; 120
    254c:	11 f0       	breq	.+4      	; 0x2552 <__stack+0x353>
    254e:	c0 c0       	rjmp	.+384    	; 0x26d0 <__stack+0x4d1>
    2550:	00 61       	ori	r16, 0x10	; 16
    2552:	04 ff       	sbrs	r16, 4
    2554:	09 c0       	rjmp	.+18     	; 0x2568 <__stack+0x369>
    2556:	04 60       	ori	r16, 0x04	; 4
    2558:	07 c0       	rjmp	.+14     	; 0x2568 <__stack+0x369>
    255a:	24 ff       	sbrs	r18, 4
    255c:	08 c0       	rjmp	.+16     	; 0x256e <__stack+0x36f>
    255e:	06 60       	ori	r16, 0x06	; 6
    2560:	06 c0       	rjmp	.+12     	; 0x256e <__stack+0x36f>
    2562:	28 e0       	ldi	r18, 0x08	; 8
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	05 c0       	rjmp	.+10     	; 0x2572 <__stack+0x373>
    2568:	20 e1       	ldi	r18, 0x10	; 16
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	02 c0       	rjmp	.+4      	; 0x2572 <__stack+0x373>
    256e:	20 e1       	ldi	r18, 0x10	; 16
    2570:	32 e0       	ldi	r19, 0x02	; 2
    2572:	52 01       	movw	r10, r4
    2574:	07 ff       	sbrs	r16, 7
    2576:	09 c0       	rjmp	.+18     	; 0x258a <__stack+0x38b>
    2578:	f4 e0       	ldi	r31, 0x04	; 4
    257a:	af 0e       	add	r10, r31
    257c:	b1 1c       	adc	r11, r1
    257e:	f2 01       	movw	r30, r4
    2580:	60 81       	ld	r22, Z
    2582:	71 81       	ldd	r23, Z+1	; 0x01
    2584:	82 81       	ldd	r24, Z+2	; 0x02
    2586:	93 81       	ldd	r25, Z+3	; 0x03
    2588:	08 c0       	rjmp	.+16     	; 0x259a <__stack+0x39b>
    258a:	f2 e0       	ldi	r31, 0x02	; 2
    258c:	af 0e       	add	r10, r31
    258e:	b1 1c       	adc	r11, r1
    2590:	f2 01       	movw	r30, r4
    2592:	60 81       	ld	r22, Z
    2594:	71 81       	ldd	r23, Z+1	; 0x01
    2596:	80 e0       	ldi	r24, 0x00	; 0
    2598:	90 e0       	ldi	r25, 0x00	; 0
    259a:	a3 01       	movw	r20, r6
    259c:	0e 94 c0 15 	call	0x2b80	; 0x2b80 <__ultoa_invert>
    25a0:	e8 2e       	mov	r14, r24
    25a2:	e6 18       	sub	r14, r6
    25a4:	0f 77       	andi	r16, 0x7F	; 127
    25a6:	30 2e       	mov	r3, r16
    25a8:	36 fe       	sbrs	r3, 6
    25aa:	0b c0       	rjmp	.+22     	; 0x25c2 <__stack+0x3c3>
    25ac:	33 2d       	mov	r19, r3
    25ae:	3e 7f       	andi	r19, 0xFE	; 254
    25b0:	e1 16       	cp	r14, r17
    25b2:	50 f4       	brcc	.+20     	; 0x25c8 <__stack+0x3c9>
    25b4:	34 fe       	sbrs	r3, 4
    25b6:	0a c0       	rjmp	.+20     	; 0x25cc <__stack+0x3cd>
    25b8:	32 fc       	sbrc	r3, 2
    25ba:	08 c0       	rjmp	.+16     	; 0x25cc <__stack+0x3cd>
    25bc:	33 2d       	mov	r19, r3
    25be:	3e 7e       	andi	r19, 0xEE	; 238
    25c0:	05 c0       	rjmp	.+10     	; 0x25cc <__stack+0x3cd>
    25c2:	0e 2d       	mov	r16, r14
    25c4:	33 2d       	mov	r19, r3
    25c6:	03 c0       	rjmp	.+6      	; 0x25ce <__stack+0x3cf>
    25c8:	0e 2d       	mov	r16, r14
    25ca:	01 c0       	rjmp	.+2      	; 0x25ce <__stack+0x3cf>
    25cc:	01 2f       	mov	r16, r17
    25ce:	34 ff       	sbrs	r19, 4
    25d0:	0c c0       	rjmp	.+24     	; 0x25ea <__stack+0x3eb>
    25d2:	fe 01       	movw	r30, r28
    25d4:	ee 0d       	add	r30, r14
    25d6:	f1 1d       	adc	r31, r1
    25d8:	80 81       	ld	r24, Z
    25da:	80 33       	cpi	r24, 0x30	; 48
    25dc:	11 f4       	brne	.+4      	; 0x25e2 <__stack+0x3e3>
    25de:	39 7e       	andi	r19, 0xE9	; 233
    25e0:	08 c0       	rjmp	.+16     	; 0x25f2 <__stack+0x3f3>
    25e2:	32 ff       	sbrs	r19, 2
    25e4:	05 c0       	rjmp	.+10     	; 0x25f0 <__stack+0x3f1>
    25e6:	0e 5f       	subi	r16, 0xFE	; 254
    25e8:	04 c0       	rjmp	.+8      	; 0x25f2 <__stack+0x3f3>
    25ea:	83 2f       	mov	r24, r19
    25ec:	86 78       	andi	r24, 0x86	; 134
    25ee:	09 f0       	breq	.+2      	; 0x25f2 <__stack+0x3f3>
    25f0:	0f 5f       	subi	r16, 0xFF	; 255
    25f2:	33 fd       	sbrc	r19, 3
    25f4:	13 c0       	rjmp	.+38     	; 0x261c <__stack+0x41d>
    25f6:	30 ff       	sbrs	r19, 0
    25f8:	06 c0       	rjmp	.+12     	; 0x2606 <__stack+0x407>
    25fa:	1e 2d       	mov	r17, r14
    25fc:	0f 15       	cp	r16, r15
    25fe:	18 f4       	brcc	.+6      	; 0x2606 <__stack+0x407>
    2600:	1f 0d       	add	r17, r15
    2602:	10 1b       	sub	r17, r16
    2604:	0f 2d       	mov	r16, r15
    2606:	0f 15       	cp	r16, r15
    2608:	68 f4       	brcc	.+26     	; 0x2624 <__stack+0x425>
    260a:	b6 01       	movw	r22, r12
    260c:	80 e2       	ldi	r24, 0x20	; 32
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	3b 8b       	std	Y+19, r19	; 0x13
    2612:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    2616:	0f 5f       	subi	r16, 0xFF	; 255
    2618:	3b 89       	ldd	r19, Y+19	; 0x13
    261a:	f5 cf       	rjmp	.-22     	; 0x2606 <__stack+0x407>
    261c:	0f 15       	cp	r16, r15
    261e:	10 f4       	brcc	.+4      	; 0x2624 <__stack+0x425>
    2620:	f0 1a       	sub	r15, r16
    2622:	01 c0       	rjmp	.+2      	; 0x2626 <__stack+0x427>
    2624:	f1 2c       	mov	r15, r1
    2626:	34 ff       	sbrs	r19, 4
    2628:	12 c0       	rjmp	.+36     	; 0x264e <__stack+0x44f>
    262a:	b6 01       	movw	r22, r12
    262c:	80 e3       	ldi	r24, 0x30	; 48
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	3b 8b       	std	Y+19, r19	; 0x13
    2632:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    2636:	3b 89       	ldd	r19, Y+19	; 0x13
    2638:	32 ff       	sbrs	r19, 2
    263a:	17 c0       	rjmp	.+46     	; 0x266a <__stack+0x46b>
    263c:	31 fd       	sbrc	r19, 1
    263e:	03 c0       	rjmp	.+6      	; 0x2646 <__stack+0x447>
    2640:	88 e7       	ldi	r24, 0x78	; 120
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	02 c0       	rjmp	.+4      	; 0x264a <__stack+0x44b>
    2646:	88 e5       	ldi	r24, 0x58	; 88
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	b6 01       	movw	r22, r12
    264c:	0c c0       	rjmp	.+24     	; 0x2666 <__stack+0x467>
    264e:	83 2f       	mov	r24, r19
    2650:	86 78       	andi	r24, 0x86	; 134
    2652:	59 f0       	breq	.+22     	; 0x266a <__stack+0x46b>
    2654:	31 ff       	sbrs	r19, 1
    2656:	02 c0       	rjmp	.+4      	; 0x265c <__stack+0x45d>
    2658:	8b e2       	ldi	r24, 0x2B	; 43
    265a:	01 c0       	rjmp	.+2      	; 0x265e <__stack+0x45f>
    265c:	80 e2       	ldi	r24, 0x20	; 32
    265e:	37 fd       	sbrc	r19, 7
    2660:	8d e2       	ldi	r24, 0x2D	; 45
    2662:	b6 01       	movw	r22, r12
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    266a:	e1 16       	cp	r14, r17
    266c:	38 f4       	brcc	.+14     	; 0x267c <__stack+0x47d>
    266e:	b6 01       	movw	r22, r12
    2670:	80 e3       	ldi	r24, 0x30	; 48
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    2678:	11 50       	subi	r17, 0x01	; 1
    267a:	f7 cf       	rjmp	.-18     	; 0x266a <__stack+0x46b>
    267c:	ea 94       	dec	r14
    267e:	f3 01       	movw	r30, r6
    2680:	ee 0d       	add	r30, r14
    2682:	f1 1d       	adc	r31, r1
    2684:	80 81       	ld	r24, Z
    2686:	b6 01       	movw	r22, r12
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    268e:	e1 10       	cpse	r14, r1
    2690:	f5 cf       	rjmp	.-22     	; 0x267c <__stack+0x47d>
    2692:	14 c0       	rjmp	.+40     	; 0x26bc <__stack+0x4bd>
    2694:	f4 e0       	ldi	r31, 0x04	; 4
    2696:	ff 15       	cp	r31, r15
    2698:	58 f5       	brcc	.+86     	; 0x26f0 <__stack+0x4f1>
    269a:	84 e0       	ldi	r24, 0x04	; 4
    269c:	f8 1a       	sub	r15, r24
    269e:	33 fe       	sbrs	r3, 3
    26a0:	1e c0       	rjmp	.+60     	; 0x26de <__stack+0x4df>
    26a2:	21 10       	cpse	r2, r1
    26a4:	26 c0       	rjmp	.+76     	; 0x26f2 <__stack+0x4f3>
    26a6:	03 ff       	sbrs	r16, 3
    26a8:	2a c0       	rjmp	.+84     	; 0x26fe <__stack+0x4ff>
    26aa:	04 e3       	ldi	r16, 0x34	; 52
    26ac:	11 e0       	ldi	r17, 0x01	; 1
    26ae:	f3 2d       	mov	r31, r3
    26b0:	f0 71       	andi	r31, 0x10	; 16
    26b2:	3f 2e       	mov	r3, r31
    26b4:	f8 01       	movw	r30, r16
    26b6:	84 91       	lpm	r24, Z
    26b8:	81 11       	cpse	r24, r1
    26ba:	24 c0       	rjmp	.+72     	; 0x2704 <__stack+0x505>
    26bc:	ff 20       	and	r15, r15
    26be:	09 f4       	brne	.+2      	; 0x26c2 <__stack+0x4c3>
    26c0:	e5 cc       	rjmp	.-1590   	; 0x208c <vfprintf+0x58>
    26c2:	b6 01       	movw	r22, r12
    26c4:	80 e2       	ldi	r24, 0x20	; 32
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    26cc:	fa 94       	dec	r15
    26ce:	f6 cf       	rjmp	.-20     	; 0x26bc <__stack+0x4bd>
    26d0:	f6 01       	movw	r30, r12
    26d2:	86 81       	ldd	r24, Z+6	; 0x06
    26d4:	97 81       	ldd	r25, Z+7	; 0x07
    26d6:	26 c0       	rjmp	.+76     	; 0x2724 <__stack+0x525>
    26d8:	8f ef       	ldi	r24, 0xFF	; 255
    26da:	9f ef       	ldi	r25, 0xFF	; 255
    26dc:	23 c0       	rjmp	.+70     	; 0x2724 <__stack+0x525>
    26de:	b6 01       	movw	r22, r12
    26e0:	80 e2       	ldi	r24, 0x20	; 32
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    26e8:	fa 94       	dec	r15
    26ea:	f1 10       	cpse	r15, r1
    26ec:	f8 cf       	rjmp	.-16     	; 0x26de <__stack+0x4df>
    26ee:	d9 cf       	rjmp	.-78     	; 0x26a2 <__stack+0x4a3>
    26f0:	f1 2c       	mov	r15, r1
    26f2:	b6 01       	movw	r22, r12
    26f4:	82 2d       	mov	r24, r2
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    26fc:	d4 cf       	rjmp	.-88     	; 0x26a6 <__stack+0x4a7>
    26fe:	08 e3       	ldi	r16, 0x38	; 56
    2700:	11 e0       	ldi	r17, 0x01	; 1
    2702:	d5 cf       	rjmp	.-86     	; 0x26ae <__stack+0x4af>
    2704:	31 10       	cpse	r3, r1
    2706:	80 52       	subi	r24, 0x20	; 32
    2708:	b6 01       	movw	r22, r12
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	0e 94 42 15 	call	0x2a84	; 0x2a84 <fputc>
    2710:	0f 5f       	subi	r16, 0xFF	; 255
    2712:	1f 4f       	sbci	r17, 0xFF	; 255
    2714:	cf cf       	rjmp	.-98     	; 0x26b4 <__stack+0x4b5>
    2716:	23 e0       	ldi	r18, 0x03	; 3
    2718:	2f 15       	cp	r18, r15
    271a:	10 f4       	brcc	.+4      	; 0x2720 <__stack+0x521>
    271c:	83 e0       	ldi	r24, 0x03	; 3
    271e:	be cf       	rjmp	.-132    	; 0x269c <__stack+0x49d>
    2720:	f1 2c       	mov	r15, r1
    2722:	c1 cf       	rjmp	.-126    	; 0x26a6 <__stack+0x4a7>
    2724:	63 96       	adiw	r28, 0x13	; 19
    2726:	e2 e1       	ldi	r30, 0x12	; 18
    2728:	0c 94 d4 13 	jmp	0x27a8	; 0x27a8 <__epilogue_restores__>

0000272c <__udivmodsi4>:
    272c:	a1 e2       	ldi	r26, 0x21	; 33
    272e:	1a 2e       	mov	r1, r26
    2730:	aa 1b       	sub	r26, r26
    2732:	bb 1b       	sub	r27, r27
    2734:	fd 01       	movw	r30, r26
    2736:	0d c0       	rjmp	.+26     	; 0x2752 <__udivmodsi4_ep>

00002738 <__udivmodsi4_loop>:
    2738:	aa 1f       	adc	r26, r26
    273a:	bb 1f       	adc	r27, r27
    273c:	ee 1f       	adc	r30, r30
    273e:	ff 1f       	adc	r31, r31
    2740:	a2 17       	cp	r26, r18
    2742:	b3 07       	cpc	r27, r19
    2744:	e4 07       	cpc	r30, r20
    2746:	f5 07       	cpc	r31, r21
    2748:	20 f0       	brcs	.+8      	; 0x2752 <__udivmodsi4_ep>
    274a:	a2 1b       	sub	r26, r18
    274c:	b3 0b       	sbc	r27, r19
    274e:	e4 0b       	sbc	r30, r20
    2750:	f5 0b       	sbc	r31, r21

00002752 <__udivmodsi4_ep>:
    2752:	66 1f       	adc	r22, r22
    2754:	77 1f       	adc	r23, r23
    2756:	88 1f       	adc	r24, r24
    2758:	99 1f       	adc	r25, r25
    275a:	1a 94       	dec	r1
    275c:	69 f7       	brne	.-38     	; 0x2738 <__udivmodsi4_loop>
    275e:	60 95       	com	r22
    2760:	70 95       	com	r23
    2762:	80 95       	com	r24
    2764:	90 95       	com	r25
    2766:	9b 01       	movw	r18, r22
    2768:	ac 01       	movw	r20, r24
    276a:	bd 01       	movw	r22, r26
    276c:	cf 01       	movw	r24, r30
    276e:	08 95       	ret

00002770 <__prologue_saves__>:
    2770:	2f 92       	push	r2
    2772:	3f 92       	push	r3
    2774:	4f 92       	push	r4
    2776:	5f 92       	push	r5
    2778:	6f 92       	push	r6
    277a:	7f 92       	push	r7
    277c:	8f 92       	push	r8
    277e:	9f 92       	push	r9
    2780:	af 92       	push	r10
    2782:	bf 92       	push	r11
    2784:	cf 92       	push	r12
    2786:	df 92       	push	r13
    2788:	ef 92       	push	r14
    278a:	ff 92       	push	r15
    278c:	0f 93       	push	r16
    278e:	1f 93       	push	r17
    2790:	cf 93       	push	r28
    2792:	df 93       	push	r29
    2794:	cd b7       	in	r28, 0x3d	; 61
    2796:	de b7       	in	r29, 0x3e	; 62
    2798:	ca 1b       	sub	r28, r26
    279a:	db 0b       	sbc	r29, r27
    279c:	0f b6       	in	r0, 0x3f	; 63
    279e:	f8 94       	cli
    27a0:	de bf       	out	0x3e, r29	; 62
    27a2:	0f be       	out	0x3f, r0	; 63
    27a4:	cd bf       	out	0x3d, r28	; 61
    27a6:	09 94       	ijmp

000027a8 <__epilogue_restores__>:
    27a8:	2a 88       	ldd	r2, Y+18	; 0x12
    27aa:	39 88       	ldd	r3, Y+17	; 0x11
    27ac:	48 88       	ldd	r4, Y+16	; 0x10
    27ae:	5f 84       	ldd	r5, Y+15	; 0x0f
    27b0:	6e 84       	ldd	r6, Y+14	; 0x0e
    27b2:	7d 84       	ldd	r7, Y+13	; 0x0d
    27b4:	8c 84       	ldd	r8, Y+12	; 0x0c
    27b6:	9b 84       	ldd	r9, Y+11	; 0x0b
    27b8:	aa 84       	ldd	r10, Y+10	; 0x0a
    27ba:	b9 84       	ldd	r11, Y+9	; 0x09
    27bc:	c8 84       	ldd	r12, Y+8	; 0x08
    27be:	df 80       	ldd	r13, Y+7	; 0x07
    27c0:	ee 80       	ldd	r14, Y+6	; 0x06
    27c2:	fd 80       	ldd	r15, Y+5	; 0x05
    27c4:	0c 81       	ldd	r16, Y+4	; 0x04
    27c6:	1b 81       	ldd	r17, Y+3	; 0x03
    27c8:	aa 81       	ldd	r26, Y+2	; 0x02
    27ca:	b9 81       	ldd	r27, Y+1	; 0x01
    27cc:	ce 0f       	add	r28, r30
    27ce:	d1 1d       	adc	r29, r1
    27d0:	0f b6       	in	r0, 0x3f	; 63
    27d2:	f8 94       	cli
    27d4:	de bf       	out	0x3e, r29	; 62
    27d6:	0f be       	out	0x3f, r0	; 63
    27d8:	cd bf       	out	0x3d, r28	; 61
    27da:	ed 01       	movw	r28, r26
    27dc:	08 95       	ret

000027de <do_rand>:
    27de:	8f 92       	push	r8
    27e0:	9f 92       	push	r9
    27e2:	af 92       	push	r10
    27e4:	bf 92       	push	r11
    27e6:	cf 92       	push	r12
    27e8:	df 92       	push	r13
    27ea:	ef 92       	push	r14
    27ec:	ff 92       	push	r15
    27ee:	cf 93       	push	r28
    27f0:	df 93       	push	r29
    27f2:	ec 01       	movw	r28, r24
    27f4:	68 81       	ld	r22, Y
    27f6:	79 81       	ldd	r23, Y+1	; 0x01
    27f8:	8a 81       	ldd	r24, Y+2	; 0x02
    27fa:	9b 81       	ldd	r25, Y+3	; 0x03
    27fc:	61 15       	cp	r22, r1
    27fe:	71 05       	cpc	r23, r1
    2800:	81 05       	cpc	r24, r1
    2802:	91 05       	cpc	r25, r1
    2804:	21 f4       	brne	.+8      	; 0x280e <do_rand+0x30>
    2806:	64 e2       	ldi	r22, 0x24	; 36
    2808:	79 ed       	ldi	r23, 0xD9	; 217
    280a:	8b e5       	ldi	r24, 0x5B	; 91
    280c:	97 e0       	ldi	r25, 0x07	; 7
    280e:	2d e1       	ldi	r18, 0x1D	; 29
    2810:	33 ef       	ldi	r19, 0xF3	; 243
    2812:	41 e0       	ldi	r20, 0x01	; 1
    2814:	50 e0       	ldi	r21, 0x00	; 0
    2816:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <__divmodsi4>
    281a:	49 01       	movw	r8, r18
    281c:	5a 01       	movw	r10, r20
    281e:	9b 01       	movw	r18, r22
    2820:	ac 01       	movw	r20, r24
    2822:	a7 ea       	ldi	r26, 0xA7	; 167
    2824:	b1 e4       	ldi	r27, 0x41	; 65
    2826:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__muluhisi3>
    282a:	6b 01       	movw	r12, r22
    282c:	7c 01       	movw	r14, r24
    282e:	ac ee       	ldi	r26, 0xEC	; 236
    2830:	b4 ef       	ldi	r27, 0xF4	; 244
    2832:	a5 01       	movw	r20, r10
    2834:	94 01       	movw	r18, r8
    2836:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <__mulohisi3>
    283a:	dc 01       	movw	r26, r24
    283c:	cb 01       	movw	r24, r22
    283e:	8c 0d       	add	r24, r12
    2840:	9d 1d       	adc	r25, r13
    2842:	ae 1d       	adc	r26, r14
    2844:	bf 1d       	adc	r27, r15
    2846:	b7 ff       	sbrs	r27, 7
    2848:	03 c0       	rjmp	.+6      	; 0x2850 <do_rand+0x72>
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	a1 09       	sbc	r26, r1
    284e:	b0 48       	sbci	r27, 0x80	; 128
    2850:	88 83       	st	Y, r24
    2852:	99 83       	std	Y+1, r25	; 0x01
    2854:	aa 83       	std	Y+2, r26	; 0x02
    2856:	bb 83       	std	Y+3, r27	; 0x03
    2858:	9f 77       	andi	r25, 0x7F	; 127
    285a:	df 91       	pop	r29
    285c:	cf 91       	pop	r28
    285e:	ff 90       	pop	r15
    2860:	ef 90       	pop	r14
    2862:	df 90       	pop	r13
    2864:	cf 90       	pop	r12
    2866:	bf 90       	pop	r11
    2868:	af 90       	pop	r10
    286a:	9f 90       	pop	r9
    286c:	8f 90       	pop	r8
    286e:	08 95       	ret

00002870 <rand_r>:
    2870:	0e 94 ef 13 	call	0x27de	; 0x27de <do_rand>
    2874:	08 95       	ret

00002876 <rand>:
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	92 e0       	ldi	r25, 0x02	; 2
    287a:	0e 94 ef 13 	call	0x27de	; 0x27de <do_rand>
    287e:	08 95       	ret

00002880 <srand>:
    2880:	a0 e0       	ldi	r26, 0x00	; 0
    2882:	b0 e0       	ldi	r27, 0x00	; 0
    2884:	80 93 00 02 	sts	0x0200, r24
    2888:	90 93 01 02 	sts	0x0201, r25
    288c:	a0 93 02 02 	sts	0x0202, r26
    2890:	b0 93 03 02 	sts	0x0203, r27
    2894:	08 95       	ret

00002896 <__ftoa_engine>:
    2896:	28 30       	cpi	r18, 0x08	; 8
    2898:	08 f0       	brcs	.+2      	; 0x289c <__ftoa_engine+0x6>
    289a:	27 e0       	ldi	r18, 0x07	; 7
    289c:	33 27       	eor	r19, r19
    289e:	da 01       	movw	r26, r20
    28a0:	99 0f       	add	r25, r25
    28a2:	31 1d       	adc	r19, r1
    28a4:	87 fd       	sbrc	r24, 7
    28a6:	91 60       	ori	r25, 0x01	; 1
    28a8:	00 96       	adiw	r24, 0x00	; 0
    28aa:	61 05       	cpc	r22, r1
    28ac:	71 05       	cpc	r23, r1
    28ae:	39 f4       	brne	.+14     	; 0x28be <__ftoa_engine+0x28>
    28b0:	32 60       	ori	r19, 0x02	; 2
    28b2:	2e 5f       	subi	r18, 0xFE	; 254
    28b4:	3d 93       	st	X+, r19
    28b6:	30 e3       	ldi	r19, 0x30	; 48
    28b8:	2a 95       	dec	r18
    28ba:	e1 f7       	brne	.-8      	; 0x28b4 <__ftoa_engine+0x1e>
    28bc:	08 95       	ret
    28be:	9f 3f       	cpi	r25, 0xFF	; 255
    28c0:	30 f0       	brcs	.+12     	; 0x28ce <__ftoa_engine+0x38>
    28c2:	80 38       	cpi	r24, 0x80	; 128
    28c4:	71 05       	cpc	r23, r1
    28c6:	61 05       	cpc	r22, r1
    28c8:	09 f0       	breq	.+2      	; 0x28cc <__ftoa_engine+0x36>
    28ca:	3c 5f       	subi	r19, 0xFC	; 252
    28cc:	3c 5f       	subi	r19, 0xFC	; 252
    28ce:	3d 93       	st	X+, r19
    28d0:	91 30       	cpi	r25, 0x01	; 1
    28d2:	08 f0       	brcs	.+2      	; 0x28d6 <__ftoa_engine+0x40>
    28d4:	80 68       	ori	r24, 0x80	; 128
    28d6:	91 1d       	adc	r25, r1
    28d8:	df 93       	push	r29
    28da:	cf 93       	push	r28
    28dc:	1f 93       	push	r17
    28de:	0f 93       	push	r16
    28e0:	ff 92       	push	r15
    28e2:	ef 92       	push	r14
    28e4:	19 2f       	mov	r17, r25
    28e6:	98 7f       	andi	r25, 0xF8	; 248
    28e8:	96 95       	lsr	r25
    28ea:	e9 2f       	mov	r30, r25
    28ec:	96 95       	lsr	r25
    28ee:	96 95       	lsr	r25
    28f0:	e9 0f       	add	r30, r25
    28f2:	ff 27       	eor	r31, r31
    28f4:	ea 56       	subi	r30, 0x6A	; 106
    28f6:	fe 4f       	sbci	r31, 0xFE	; 254
    28f8:	99 27       	eor	r25, r25
    28fa:	33 27       	eor	r19, r19
    28fc:	ee 24       	eor	r14, r14
    28fe:	ff 24       	eor	r15, r15
    2900:	a7 01       	movw	r20, r14
    2902:	e7 01       	movw	r28, r14
    2904:	05 90       	lpm	r0, Z+
    2906:	08 94       	sec
    2908:	07 94       	ror	r0
    290a:	28 f4       	brcc	.+10     	; 0x2916 <__ftoa_engine+0x80>
    290c:	36 0f       	add	r19, r22
    290e:	e7 1e       	adc	r14, r23
    2910:	f8 1e       	adc	r15, r24
    2912:	49 1f       	adc	r20, r25
    2914:	51 1d       	adc	r21, r1
    2916:	66 0f       	add	r22, r22
    2918:	77 1f       	adc	r23, r23
    291a:	88 1f       	adc	r24, r24
    291c:	99 1f       	adc	r25, r25
    291e:	06 94       	lsr	r0
    2920:	a1 f7       	brne	.-24     	; 0x290a <__ftoa_engine+0x74>
    2922:	05 90       	lpm	r0, Z+
    2924:	07 94       	ror	r0
    2926:	28 f4       	brcc	.+10     	; 0x2932 <__ftoa_engine+0x9c>
    2928:	e7 0e       	add	r14, r23
    292a:	f8 1e       	adc	r15, r24
    292c:	49 1f       	adc	r20, r25
    292e:	56 1f       	adc	r21, r22
    2930:	c1 1d       	adc	r28, r1
    2932:	77 0f       	add	r23, r23
    2934:	88 1f       	adc	r24, r24
    2936:	99 1f       	adc	r25, r25
    2938:	66 1f       	adc	r22, r22
    293a:	06 94       	lsr	r0
    293c:	a1 f7       	brne	.-24     	; 0x2926 <__ftoa_engine+0x90>
    293e:	05 90       	lpm	r0, Z+
    2940:	07 94       	ror	r0
    2942:	28 f4       	brcc	.+10     	; 0x294e <__ftoa_engine+0xb8>
    2944:	f8 0e       	add	r15, r24
    2946:	49 1f       	adc	r20, r25
    2948:	56 1f       	adc	r21, r22
    294a:	c7 1f       	adc	r28, r23
    294c:	d1 1d       	adc	r29, r1
    294e:	88 0f       	add	r24, r24
    2950:	99 1f       	adc	r25, r25
    2952:	66 1f       	adc	r22, r22
    2954:	77 1f       	adc	r23, r23
    2956:	06 94       	lsr	r0
    2958:	a1 f7       	brne	.-24     	; 0x2942 <__ftoa_engine+0xac>
    295a:	05 90       	lpm	r0, Z+
    295c:	07 94       	ror	r0
    295e:	20 f4       	brcc	.+8      	; 0x2968 <__ftoa_engine+0xd2>
    2960:	49 0f       	add	r20, r25
    2962:	56 1f       	adc	r21, r22
    2964:	c7 1f       	adc	r28, r23
    2966:	d8 1f       	adc	r29, r24
    2968:	99 0f       	add	r25, r25
    296a:	66 1f       	adc	r22, r22
    296c:	77 1f       	adc	r23, r23
    296e:	88 1f       	adc	r24, r24
    2970:	06 94       	lsr	r0
    2972:	a9 f7       	brne	.-22     	; 0x295e <__ftoa_engine+0xc8>
    2974:	84 91       	lpm	r24, Z
    2976:	10 95       	com	r17
    2978:	17 70       	andi	r17, 0x07	; 7
    297a:	41 f0       	breq	.+16     	; 0x298c <__ftoa_engine+0xf6>
    297c:	d6 95       	lsr	r29
    297e:	c7 95       	ror	r28
    2980:	57 95       	ror	r21
    2982:	47 95       	ror	r20
    2984:	f7 94       	ror	r15
    2986:	e7 94       	ror	r14
    2988:	1a 95       	dec	r17
    298a:	c1 f7       	brne	.-16     	; 0x297c <__ftoa_engine+0xe6>
    298c:	ec e3       	ldi	r30, 0x3C	; 60
    298e:	f1 e0       	ldi	r31, 0x01	; 1
    2990:	68 94       	set
    2992:	15 90       	lpm	r1, Z+
    2994:	15 91       	lpm	r17, Z+
    2996:	35 91       	lpm	r19, Z+
    2998:	65 91       	lpm	r22, Z+
    299a:	95 91       	lpm	r25, Z+
    299c:	05 90       	lpm	r0, Z+
    299e:	7f e2       	ldi	r23, 0x2F	; 47
    29a0:	73 95       	inc	r23
    29a2:	e1 18       	sub	r14, r1
    29a4:	f1 0a       	sbc	r15, r17
    29a6:	43 0b       	sbc	r20, r19
    29a8:	56 0b       	sbc	r21, r22
    29aa:	c9 0b       	sbc	r28, r25
    29ac:	d0 09       	sbc	r29, r0
    29ae:	c0 f7       	brcc	.-16     	; 0x29a0 <__ftoa_engine+0x10a>
    29b0:	e1 0c       	add	r14, r1
    29b2:	f1 1e       	adc	r15, r17
    29b4:	43 1f       	adc	r20, r19
    29b6:	56 1f       	adc	r21, r22
    29b8:	c9 1f       	adc	r28, r25
    29ba:	d0 1d       	adc	r29, r0
    29bc:	7e f4       	brtc	.+30     	; 0x29dc <__ftoa_engine+0x146>
    29be:	70 33       	cpi	r23, 0x30	; 48
    29c0:	11 f4       	brne	.+4      	; 0x29c6 <__ftoa_engine+0x130>
    29c2:	8a 95       	dec	r24
    29c4:	e6 cf       	rjmp	.-52     	; 0x2992 <__ftoa_engine+0xfc>
    29c6:	e8 94       	clt
    29c8:	01 50       	subi	r16, 0x01	; 1
    29ca:	30 f0       	brcs	.+12     	; 0x29d8 <__ftoa_engine+0x142>
    29cc:	08 0f       	add	r16, r24
    29ce:	0a f4       	brpl	.+2      	; 0x29d2 <__ftoa_engine+0x13c>
    29d0:	00 27       	eor	r16, r16
    29d2:	02 17       	cp	r16, r18
    29d4:	08 f4       	brcc	.+2      	; 0x29d8 <__ftoa_engine+0x142>
    29d6:	20 2f       	mov	r18, r16
    29d8:	23 95       	inc	r18
    29da:	02 2f       	mov	r16, r18
    29dc:	7a 33       	cpi	r23, 0x3A	; 58
    29de:	28 f0       	brcs	.+10     	; 0x29ea <__ftoa_engine+0x154>
    29e0:	79 e3       	ldi	r23, 0x39	; 57
    29e2:	7d 93       	st	X+, r23
    29e4:	2a 95       	dec	r18
    29e6:	e9 f7       	brne	.-6      	; 0x29e2 <__ftoa_engine+0x14c>
    29e8:	10 c0       	rjmp	.+32     	; 0x2a0a <__ftoa_engine+0x174>
    29ea:	7d 93       	st	X+, r23
    29ec:	2a 95       	dec	r18
    29ee:	89 f6       	brne	.-94     	; 0x2992 <__ftoa_engine+0xfc>
    29f0:	06 94       	lsr	r0
    29f2:	97 95       	ror	r25
    29f4:	67 95       	ror	r22
    29f6:	37 95       	ror	r19
    29f8:	17 95       	ror	r17
    29fa:	17 94       	ror	r1
    29fc:	e1 18       	sub	r14, r1
    29fe:	f1 0a       	sbc	r15, r17
    2a00:	43 0b       	sbc	r20, r19
    2a02:	56 0b       	sbc	r21, r22
    2a04:	c9 0b       	sbc	r28, r25
    2a06:	d0 09       	sbc	r29, r0
    2a08:	98 f0       	brcs	.+38     	; 0x2a30 <__ftoa_engine+0x19a>
    2a0a:	23 95       	inc	r18
    2a0c:	7e 91       	ld	r23, -X
    2a0e:	73 95       	inc	r23
    2a10:	7a 33       	cpi	r23, 0x3A	; 58
    2a12:	08 f0       	brcs	.+2      	; 0x2a16 <__ftoa_engine+0x180>
    2a14:	70 e3       	ldi	r23, 0x30	; 48
    2a16:	7c 93       	st	X, r23
    2a18:	20 13       	cpse	r18, r16
    2a1a:	b8 f7       	brcc	.-18     	; 0x2a0a <__ftoa_engine+0x174>
    2a1c:	7e 91       	ld	r23, -X
    2a1e:	70 61       	ori	r23, 0x10	; 16
    2a20:	7d 93       	st	X+, r23
    2a22:	30 f0       	brcs	.+12     	; 0x2a30 <__ftoa_engine+0x19a>
    2a24:	83 95       	inc	r24
    2a26:	71 e3       	ldi	r23, 0x31	; 49
    2a28:	7d 93       	st	X+, r23
    2a2a:	70 e3       	ldi	r23, 0x30	; 48
    2a2c:	2a 95       	dec	r18
    2a2e:	e1 f7       	brne	.-8      	; 0x2a28 <__ftoa_engine+0x192>
    2a30:	11 24       	eor	r1, r1
    2a32:	ef 90       	pop	r14
    2a34:	ff 90       	pop	r15
    2a36:	0f 91       	pop	r16
    2a38:	1f 91       	pop	r17
    2a3a:	cf 91       	pop	r28
    2a3c:	df 91       	pop	r29
    2a3e:	99 27       	eor	r25, r25
    2a40:	87 fd       	sbrc	r24, 7
    2a42:	90 95       	com	r25
    2a44:	08 95       	ret

00002a46 <strnlen_P>:
    2a46:	fc 01       	movw	r30, r24
    2a48:	05 90       	lpm	r0, Z+
    2a4a:	61 50       	subi	r22, 0x01	; 1
    2a4c:	70 40       	sbci	r23, 0x00	; 0
    2a4e:	01 10       	cpse	r0, r1
    2a50:	d8 f7       	brcc	.-10     	; 0x2a48 <strnlen_P+0x2>
    2a52:	80 95       	com	r24
    2a54:	90 95       	com	r25
    2a56:	8e 0f       	add	r24, r30
    2a58:	9f 1f       	adc	r25, r31
    2a5a:	08 95       	ret

00002a5c <memcpy>:
    2a5c:	fb 01       	movw	r30, r22
    2a5e:	dc 01       	movw	r26, r24
    2a60:	02 c0       	rjmp	.+4      	; 0x2a66 <memcpy+0xa>
    2a62:	01 90       	ld	r0, Z+
    2a64:	0d 92       	st	X+, r0
    2a66:	41 50       	subi	r20, 0x01	; 1
    2a68:	50 40       	sbci	r21, 0x00	; 0
    2a6a:	d8 f7       	brcc	.-10     	; 0x2a62 <memcpy+0x6>
    2a6c:	08 95       	ret

00002a6e <strnlen>:
    2a6e:	fc 01       	movw	r30, r24
    2a70:	61 50       	subi	r22, 0x01	; 1
    2a72:	70 40       	sbci	r23, 0x00	; 0
    2a74:	01 90       	ld	r0, Z+
    2a76:	01 10       	cpse	r0, r1
    2a78:	d8 f7       	brcc	.-10     	; 0x2a70 <strnlen+0x2>
    2a7a:	80 95       	com	r24
    2a7c:	90 95       	com	r25
    2a7e:	8e 0f       	add	r24, r30
    2a80:	9f 1f       	adc	r25, r31
    2a82:	08 95       	ret

00002a84 <fputc>:
    2a84:	0f 93       	push	r16
    2a86:	1f 93       	push	r17
    2a88:	cf 93       	push	r28
    2a8a:	df 93       	push	r29
    2a8c:	fb 01       	movw	r30, r22
    2a8e:	23 81       	ldd	r18, Z+3	; 0x03
    2a90:	21 fd       	sbrc	r18, 1
    2a92:	03 c0       	rjmp	.+6      	; 0x2a9a <fputc+0x16>
    2a94:	8f ef       	ldi	r24, 0xFF	; 255
    2a96:	9f ef       	ldi	r25, 0xFF	; 255
    2a98:	28 c0       	rjmp	.+80     	; 0x2aea <fputc+0x66>
    2a9a:	22 ff       	sbrs	r18, 2
    2a9c:	16 c0       	rjmp	.+44     	; 0x2aca <fputc+0x46>
    2a9e:	46 81       	ldd	r20, Z+6	; 0x06
    2aa0:	57 81       	ldd	r21, Z+7	; 0x07
    2aa2:	24 81       	ldd	r18, Z+4	; 0x04
    2aa4:	35 81       	ldd	r19, Z+5	; 0x05
    2aa6:	42 17       	cp	r20, r18
    2aa8:	53 07       	cpc	r21, r19
    2aaa:	44 f4       	brge	.+16     	; 0x2abc <fputc+0x38>
    2aac:	a0 81       	ld	r26, Z
    2aae:	b1 81       	ldd	r27, Z+1	; 0x01
    2ab0:	9d 01       	movw	r18, r26
    2ab2:	2f 5f       	subi	r18, 0xFF	; 255
    2ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ab6:	31 83       	std	Z+1, r19	; 0x01
    2ab8:	20 83       	st	Z, r18
    2aba:	8c 93       	st	X, r24
    2abc:	26 81       	ldd	r18, Z+6	; 0x06
    2abe:	37 81       	ldd	r19, Z+7	; 0x07
    2ac0:	2f 5f       	subi	r18, 0xFF	; 255
    2ac2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac4:	37 83       	std	Z+7, r19	; 0x07
    2ac6:	26 83       	std	Z+6, r18	; 0x06
    2ac8:	10 c0       	rjmp	.+32     	; 0x2aea <fputc+0x66>
    2aca:	eb 01       	movw	r28, r22
    2acc:	09 2f       	mov	r16, r25
    2ace:	18 2f       	mov	r17, r24
    2ad0:	00 84       	ldd	r0, Z+8	; 0x08
    2ad2:	f1 85       	ldd	r31, Z+9	; 0x09
    2ad4:	e0 2d       	mov	r30, r0
    2ad6:	09 95       	icall
    2ad8:	89 2b       	or	r24, r25
    2ada:	e1 f6       	brne	.-72     	; 0x2a94 <fputc+0x10>
    2adc:	8e 81       	ldd	r24, Y+6	; 0x06
    2ade:	9f 81       	ldd	r25, Y+7	; 0x07
    2ae0:	01 96       	adiw	r24, 0x01	; 1
    2ae2:	9f 83       	std	Y+7, r25	; 0x07
    2ae4:	8e 83       	std	Y+6, r24	; 0x06
    2ae6:	81 2f       	mov	r24, r17
    2ae8:	90 2f       	mov	r25, r16
    2aea:	df 91       	pop	r29
    2aec:	cf 91       	pop	r28
    2aee:	1f 91       	pop	r17
    2af0:	0f 91       	pop	r16
    2af2:	08 95       	ret

00002af4 <printf>:
    2af4:	a0 e0       	ldi	r26, 0x00	; 0
    2af6:	b0 e0       	ldi	r27, 0x00	; 0
    2af8:	e0 e8       	ldi	r30, 0x80	; 128
    2afa:	f5 e1       	ldi	r31, 0x15	; 21
    2afc:	0c 94 c8 13 	jmp	0x2790	; 0x2790 <__prologue_saves__+0x20>
    2b00:	ae 01       	movw	r20, r28
    2b02:	4b 5f       	subi	r20, 0xFB	; 251
    2b04:	5f 4f       	sbci	r21, 0xFF	; 255
    2b06:	fa 01       	movw	r30, r20
    2b08:	61 91       	ld	r22, Z+
    2b0a:	71 91       	ld	r23, Z+
    2b0c:	af 01       	movw	r20, r30
    2b0e:	80 91 07 08 	lds	r24, 0x0807
    2b12:	90 91 08 08 	lds	r25, 0x0808
    2b16:	0e 94 1a 10 	call	0x2034	; 0x2034 <vfprintf>
    2b1a:	e2 e0       	ldi	r30, 0x02	; 2
    2b1c:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <__epilogue_restores__+0x20>

00002b20 <puts>:
    2b20:	0f 93       	push	r16
    2b22:	1f 93       	push	r17
    2b24:	cf 93       	push	r28
    2b26:	df 93       	push	r29
    2b28:	e0 91 07 08 	lds	r30, 0x0807
    2b2c:	f0 91 08 08 	lds	r31, 0x0808
    2b30:	23 81       	ldd	r18, Z+3	; 0x03
    2b32:	21 ff       	sbrs	r18, 1
    2b34:	1b c0       	rjmp	.+54     	; 0x2b6c <puts+0x4c>
    2b36:	8c 01       	movw	r16, r24
    2b38:	d0 e0       	ldi	r29, 0x00	; 0
    2b3a:	c0 e0       	ldi	r28, 0x00	; 0
    2b3c:	f8 01       	movw	r30, r16
    2b3e:	81 91       	ld	r24, Z+
    2b40:	8f 01       	movw	r16, r30
    2b42:	60 91 07 08 	lds	r22, 0x0807
    2b46:	70 91 08 08 	lds	r23, 0x0808
    2b4a:	db 01       	movw	r26, r22
    2b4c:	18 96       	adiw	r26, 0x08	; 8
    2b4e:	ed 91       	ld	r30, X+
    2b50:	fc 91       	ld	r31, X
    2b52:	19 97       	sbiw	r26, 0x09	; 9
    2b54:	88 23       	and	r24, r24
    2b56:	31 f0       	breq	.+12     	; 0x2b64 <puts+0x44>
    2b58:	09 95       	icall
    2b5a:	89 2b       	or	r24, r25
    2b5c:	79 f3       	breq	.-34     	; 0x2b3c <puts+0x1c>
    2b5e:	df ef       	ldi	r29, 0xFF	; 255
    2b60:	cf ef       	ldi	r28, 0xFF	; 255
    2b62:	ec cf       	rjmp	.-40     	; 0x2b3c <puts+0x1c>
    2b64:	8a e0       	ldi	r24, 0x0A	; 10
    2b66:	09 95       	icall
    2b68:	89 2b       	or	r24, r25
    2b6a:	19 f0       	breq	.+6      	; 0x2b72 <puts+0x52>
    2b6c:	8f ef       	ldi	r24, 0xFF	; 255
    2b6e:	9f ef       	ldi	r25, 0xFF	; 255
    2b70:	02 c0       	rjmp	.+4      	; 0x2b76 <puts+0x56>
    2b72:	8d 2f       	mov	r24, r29
    2b74:	9c 2f       	mov	r25, r28
    2b76:	df 91       	pop	r29
    2b78:	cf 91       	pop	r28
    2b7a:	1f 91       	pop	r17
    2b7c:	0f 91       	pop	r16
    2b7e:	08 95       	ret

00002b80 <__ultoa_invert>:
    2b80:	fa 01       	movw	r30, r20
    2b82:	aa 27       	eor	r26, r26
    2b84:	28 30       	cpi	r18, 0x08	; 8
    2b86:	51 f1       	breq	.+84     	; 0x2bdc <__ultoa_invert+0x5c>
    2b88:	20 31       	cpi	r18, 0x10	; 16
    2b8a:	81 f1       	breq	.+96     	; 0x2bec <__ultoa_invert+0x6c>
    2b8c:	e8 94       	clt
    2b8e:	6f 93       	push	r22
    2b90:	6e 7f       	andi	r22, 0xFE	; 254
    2b92:	6e 5f       	subi	r22, 0xFE	; 254
    2b94:	7f 4f       	sbci	r23, 0xFF	; 255
    2b96:	8f 4f       	sbci	r24, 0xFF	; 255
    2b98:	9f 4f       	sbci	r25, 0xFF	; 255
    2b9a:	af 4f       	sbci	r26, 0xFF	; 255
    2b9c:	b1 e0       	ldi	r27, 0x01	; 1
    2b9e:	3e d0       	rcall	.+124    	; 0x2c1c <__ultoa_invert+0x9c>
    2ba0:	b4 e0       	ldi	r27, 0x04	; 4
    2ba2:	3c d0       	rcall	.+120    	; 0x2c1c <__ultoa_invert+0x9c>
    2ba4:	67 0f       	add	r22, r23
    2ba6:	78 1f       	adc	r23, r24
    2ba8:	89 1f       	adc	r24, r25
    2baa:	9a 1f       	adc	r25, r26
    2bac:	a1 1d       	adc	r26, r1
    2bae:	68 0f       	add	r22, r24
    2bb0:	79 1f       	adc	r23, r25
    2bb2:	8a 1f       	adc	r24, r26
    2bb4:	91 1d       	adc	r25, r1
    2bb6:	a1 1d       	adc	r26, r1
    2bb8:	6a 0f       	add	r22, r26
    2bba:	71 1d       	adc	r23, r1
    2bbc:	81 1d       	adc	r24, r1
    2bbe:	91 1d       	adc	r25, r1
    2bc0:	a1 1d       	adc	r26, r1
    2bc2:	20 d0       	rcall	.+64     	; 0x2c04 <__ultoa_invert+0x84>
    2bc4:	09 f4       	brne	.+2      	; 0x2bc8 <__ultoa_invert+0x48>
    2bc6:	68 94       	set
    2bc8:	3f 91       	pop	r19
    2bca:	2a e0       	ldi	r18, 0x0A	; 10
    2bcc:	26 9f       	mul	r18, r22
    2bce:	11 24       	eor	r1, r1
    2bd0:	30 19       	sub	r19, r0
    2bd2:	30 5d       	subi	r19, 0xD0	; 208
    2bd4:	31 93       	st	Z+, r19
    2bd6:	de f6       	brtc	.-74     	; 0x2b8e <__ultoa_invert+0xe>
    2bd8:	cf 01       	movw	r24, r30
    2bda:	08 95       	ret
    2bdc:	46 2f       	mov	r20, r22
    2bde:	47 70       	andi	r20, 0x07	; 7
    2be0:	40 5d       	subi	r20, 0xD0	; 208
    2be2:	41 93       	st	Z+, r20
    2be4:	b3 e0       	ldi	r27, 0x03	; 3
    2be6:	0f d0       	rcall	.+30     	; 0x2c06 <__ultoa_invert+0x86>
    2be8:	c9 f7       	brne	.-14     	; 0x2bdc <__ultoa_invert+0x5c>
    2bea:	f6 cf       	rjmp	.-20     	; 0x2bd8 <__ultoa_invert+0x58>
    2bec:	46 2f       	mov	r20, r22
    2bee:	4f 70       	andi	r20, 0x0F	; 15
    2bf0:	40 5d       	subi	r20, 0xD0	; 208
    2bf2:	4a 33       	cpi	r20, 0x3A	; 58
    2bf4:	18 f0       	brcs	.+6      	; 0x2bfc <__ultoa_invert+0x7c>
    2bf6:	49 5d       	subi	r20, 0xD9	; 217
    2bf8:	31 fd       	sbrc	r19, 1
    2bfa:	40 52       	subi	r20, 0x20	; 32
    2bfc:	41 93       	st	Z+, r20
    2bfe:	02 d0       	rcall	.+4      	; 0x2c04 <__ultoa_invert+0x84>
    2c00:	a9 f7       	brne	.-22     	; 0x2bec <__ultoa_invert+0x6c>
    2c02:	ea cf       	rjmp	.-44     	; 0x2bd8 <__ultoa_invert+0x58>
    2c04:	b4 e0       	ldi	r27, 0x04	; 4
    2c06:	a6 95       	lsr	r26
    2c08:	97 95       	ror	r25
    2c0a:	87 95       	ror	r24
    2c0c:	77 95       	ror	r23
    2c0e:	67 95       	ror	r22
    2c10:	ba 95       	dec	r27
    2c12:	c9 f7       	brne	.-14     	; 0x2c06 <__ultoa_invert+0x86>
    2c14:	00 97       	sbiw	r24, 0x00	; 0
    2c16:	61 05       	cpc	r22, r1
    2c18:	71 05       	cpc	r23, r1
    2c1a:	08 95       	ret
    2c1c:	9b 01       	movw	r18, r22
    2c1e:	ac 01       	movw	r20, r24
    2c20:	0a 2e       	mov	r0, r26
    2c22:	06 94       	lsr	r0
    2c24:	57 95       	ror	r21
    2c26:	47 95       	ror	r20
    2c28:	37 95       	ror	r19
    2c2a:	27 95       	ror	r18
    2c2c:	ba 95       	dec	r27
    2c2e:	c9 f7       	brne	.-14     	; 0x2c22 <__ultoa_invert+0xa2>
    2c30:	62 0f       	add	r22, r18
    2c32:	73 1f       	adc	r23, r19
    2c34:	84 1f       	adc	r24, r20
    2c36:	95 1f       	adc	r25, r21
    2c38:	a0 1d       	adc	r26, r0
    2c3a:	08 95       	ret

00002c3c <__divmodsi4>:
    2c3c:	05 2e       	mov	r0, r21
    2c3e:	97 fb       	bst	r25, 7
    2c40:	1e f4       	brtc	.+6      	; 0x2c48 <__divmodsi4+0xc>
    2c42:	00 94       	com	r0
    2c44:	0e 94 35 16 	call	0x2c6a	; 0x2c6a <__negsi2>
    2c48:	57 fd       	sbrc	r21, 7
    2c4a:	07 d0       	rcall	.+14     	; 0x2c5a <__divmodsi4_neg2>
    2c4c:	0e 94 96 13 	call	0x272c	; 0x272c <__udivmodsi4>
    2c50:	07 fc       	sbrc	r0, 7
    2c52:	03 d0       	rcall	.+6      	; 0x2c5a <__divmodsi4_neg2>
    2c54:	4e f4       	brtc	.+18     	; 0x2c68 <__divmodsi4_exit>
    2c56:	0c 94 35 16 	jmp	0x2c6a	; 0x2c6a <__negsi2>

00002c5a <__divmodsi4_neg2>:
    2c5a:	50 95       	com	r21
    2c5c:	40 95       	com	r20
    2c5e:	30 95       	com	r19
    2c60:	21 95       	neg	r18
    2c62:	3f 4f       	sbci	r19, 0xFF	; 255
    2c64:	4f 4f       	sbci	r20, 0xFF	; 255
    2c66:	5f 4f       	sbci	r21, 0xFF	; 255

00002c68 <__divmodsi4_exit>:
    2c68:	08 95       	ret

00002c6a <__negsi2>:
    2c6a:	90 95       	com	r25
    2c6c:	80 95       	com	r24
    2c6e:	70 95       	com	r23
    2c70:	61 95       	neg	r22
    2c72:	7f 4f       	sbci	r23, 0xFF	; 255
    2c74:	8f 4f       	sbci	r24, 0xFF	; 255
    2c76:	9f 4f       	sbci	r25, 0xFF	; 255
    2c78:	08 95       	ret

00002c7a <__muluhisi3>:
    2c7a:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <__umulhisi3>
    2c7e:	a5 9f       	mul	r26, r21
    2c80:	90 0d       	add	r25, r0
    2c82:	b4 9f       	mul	r27, r20
    2c84:	90 0d       	add	r25, r0
    2c86:	a4 9f       	mul	r26, r20
    2c88:	80 0d       	add	r24, r0
    2c8a:	91 1d       	adc	r25, r1
    2c8c:	11 24       	eor	r1, r1
    2c8e:	08 95       	ret

00002c90 <__mulshisi3>:
    2c90:	b7 ff       	sbrs	r27, 7
    2c92:	0c 94 3d 16 	jmp	0x2c7a	; 0x2c7a <__muluhisi3>

00002c96 <__mulohisi3>:
    2c96:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <__muluhisi3>
    2c9a:	82 1b       	sub	r24, r18
    2c9c:	93 0b       	sbc	r25, r19
    2c9e:	08 95       	ret

00002ca0 <__umulhisi3>:
    2ca0:	a2 9f       	mul	r26, r18
    2ca2:	b0 01       	movw	r22, r0
    2ca4:	b3 9f       	mul	r27, r19
    2ca6:	c0 01       	movw	r24, r0
    2ca8:	a3 9f       	mul	r26, r19
    2caa:	70 0d       	add	r23, r0
    2cac:	81 1d       	adc	r24, r1
    2cae:	11 24       	eor	r1, r1
    2cb0:	91 1d       	adc	r25, r1
    2cb2:	b2 9f       	mul	r27, r18
    2cb4:	70 0d       	add	r23, r0
    2cb6:	81 1d       	adc	r24, r1
    2cb8:	11 24       	eor	r1, r1
    2cba:	91 1d       	adc	r25, r1
    2cbc:	08 95       	ret

00002cbe <_exit>:
    2cbe:	f8 94       	cli

00002cc0 <__stop_program>:
    2cc0:	ff cf       	rjmp	.-2      	; 0x2cc0 <__stop_program>
