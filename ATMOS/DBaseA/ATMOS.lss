
ATMOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000262  00800200  00002b96  00002c2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002b96  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000482  00800462  00800462  00002e8c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002e8c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002ee8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000648  00000000  00000000  00002f28  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006d98  00000000  00000000  00003570  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000027c4  00000000  00000000  0000a308  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000231f  00000000  00000000  0000cacc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000f30  00000000  00000000  0000edec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001b41  00000000  00000000  0000fd1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00003657  00000000  00000000  0001185d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005b8  00000000  00000000  00014eb4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__ctors_end>
       4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      10:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      14:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      18:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      1c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      20:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      24:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      28:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      30:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      34:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__vector_13>
      38:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      3c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      40:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      44:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      48:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      4c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      50:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      54:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      58:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      5c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      60:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      64:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      68:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      6c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      70:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      74:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      78:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      7c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      80:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      84:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      88:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      8c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      90:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      94:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      98:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      9c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a8:	0c 94 22 08 	jmp	0x1044	; 0x1044 <__vector_42>
      ac:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      bc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      cc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      dc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      ec:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      fc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     100:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     104:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     108:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     10c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     110:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     114:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     118:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     11c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     120:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     124:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     128:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     12c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     130:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>

00000134 <__trampolines_end>:
     134:	6e 61       	ori	r22, 0x1E	; 30
     136:	6e 00       	.word	0x006e	; ????

00000138 <__c.2177>:
     138:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     148:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     158:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     168:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     178:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     188:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     198:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     208:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     218:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     228:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000236 <__ctors_end>:
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	d1 e2       	ldi	r29, 0x21	; 33
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61

00000242 <__do_copy_data>:
     242:	14 e0       	ldi	r17, 0x04	; 4
     244:	a0 e0       	ldi	r26, 0x00	; 0
     246:	b2 e0       	ldi	r27, 0x02	; 2
     248:	e6 e9       	ldi	r30, 0x96	; 150
     24a:	fb e2       	ldi	r31, 0x2B	; 43
     24c:	02 c0       	rjmp	.+4      	; 0x252 <__do_copy_data+0x10>
     24e:	05 90       	lpm	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	a2 36       	cpi	r26, 0x62	; 98
     254:	b1 07       	cpc	r27, r17
     256:	d9 f7       	brne	.-10     	; 0x24e <__do_copy_data+0xc>

00000258 <__do_clear_bss>:
     258:	28 e0       	ldi	r18, 0x08	; 8
     25a:	a2 e6       	ldi	r26, 0x62	; 98
     25c:	b4 e0       	ldi	r27, 0x04	; 4
     25e:	01 c0       	rjmp	.+2      	; 0x262 <.do_clear_bss_start>

00000260 <.do_clear_bss_loop>:
     260:	1d 92       	st	X+, r1

00000262 <.do_clear_bss_start>:
     262:	a4 3e       	cpi	r26, 0xE4	; 228
     264:	b2 07       	cpc	r27, r18
     266:	e1 f7       	brne	.-8      	; 0x260 <.do_clear_bss_loop>
     268:	0e 94 3a 01 	call	0x274	; 0x274 <main>
     26c:	0c 94 c9 15 	jmp	0x2b92	; 0x2b92 <_exit>

00000270 <__bad_interrupt>:
     270:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000274 <main>:
}


int main(void)
{
	SYS_Init();
     274:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <SYS_Init>
#include "avr/io.h"
#include "avr/interrupt.h"

/* TODO : clean up these messy init */
static void APP_Init(void){
	PWR_Init();
     278:	0e 94 cf 06 	call	0xd9e	; 0xd9e <PWR_Init>
	PWR_TurnOn5V();
     27c:	0e 94 d3 06 	call	0xda6	; 0xda6 <PWR_TurnOn5V>
	USART0_Init(9600);
     280:	60 e8       	ldi	r22, 0x80	; 128
     282:	75 e2       	ldi	r23, 0x25	; 37
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 b5 07 	call	0xf6a	; 0xf6a <USART0_Init>
	DDRB |= 0b00010000;
     28c:	24 9a       	sbi	0x04, 4	; 4
	DDRE |= 0b00001000;
     28e:	6b 9a       	sbi	0x0d, 3	; 13
	PORTE|= 0b00001000;
     290:	73 9a       	sbi	0x0e, 3	; 14
	TWI_Init(10000);
     292:	60 e1       	ldi	r22, 0x10	; 16
     294:	77 e2       	ldi	r23, 0x27	; 39
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 d9 06 	call	0xdb2	; 0xdb2 <TWI_Init>
	ADC_Init();
     29e:	0e 94 47 06 	call	0xc8e	; 0xc8e <ADC_Init>
	printf("BMP280 Status %i\n", BMP280_Init());
     2a2:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <BMP280_Init>
     2a6:	9f 93       	push	r25
     2a8:	8f 93       	push	r24
     2aa:	86 e2       	ldi	r24, 0x26	; 38
     2ac:	92 e0       	ldi	r25, 0x02	; 2
     2ae:	9f 93       	push	r25
     2b0:	8f 93       	push	r24
     2b2:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <printf>
	BMP280_SetOversampling(4);
     2b6:	84 e0       	ldi	r24, 0x04	; 4
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 b2 02 	call	0x564	; 0x564 <BMP280_SetOversampling>
	SPI_SlaveInit();
     2be:	0e 94 d5 06 	call	0xdaa	; 0xdaa <SPI_SlaveInit>
{
	SYS_Init();
	APP_Init();
	
	// could have sealed following in a function //
	init_timeoutq();
     2c2:	0e 94 41 0a 	call	0x1482	; 0x1482 <init_timeoutq>
	BMP280Sensor *BMP280_ptr = New_BMP280_Sensor( 0 );
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0e 94 a9 0c 	call	0x1952	; 0x1952 <New_BMP280_Sensor>
     2ce:	ec 01       	movw	r28, r24
	BMP280_FctnInit(BMP280_ptr);
     2d0:	0e 94 3d 0c 	call	0x187a	; 0x187a <BMP280_FctnInit>
	init_Event_Timer();
     2d4:	0e 94 8c 06 	call	0xd18	; 0xd18 <init_Event_Timer>
	printf("init done!\n");
     2d8:	88 e3       	ldi	r24, 0x38	; 56
     2da:	92 e0       	ldi	r25, 0x02	; 2
     2dc:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <puts>
	
	// could have sealed following in a function //
	load_new_sensor( 1, 4, (BaseSensor *)BMP280_ptr, 0 );
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	ae 01       	movw	r20, r28
     2e6:	64 e0       	ldi	r22, 0x04	; 4
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 c3 0a 	call	0x1586	; 0x1586 <load_new_sensor>
	// load_new_sensor( 4, 4, (BaseSensor *)Si7020_ptr, 0 );
	init_set_timer( get_next_interval() );
     2f2:	0e 94 6d 0a 	call	0x14da	; 0x14da <get_next_interval>
     2f6:	0e 94 9c 06 	call	0xd38	; 0xd38 <init_set_timer>
	
	// Enable global interrupt //
	sei();
     2fa:	78 94       	sei
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	0f 90       	pop	r0

	for (;;){}
     304:	ff cf       	rjmp	.-2      	; 0x304 <main+0x90>

00000306 <BMP280_ReadBytes>:
  @brief Reads some bytes from the BMP280
  @param[in] *values pointer to an array to store the bytes, put the starting register in values[0]
  @param[in] length how many bytes to read
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadBytes(unsigned char *values, char length){
     306:	1f 93       	push	r17
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	ec 01       	movw	r28, r24
     30e:	16 2f       	mov	r17, r22
	//printf("BMP280_ReadBytes");
	//printf("0x%1x",(unsigned)TWI_BeginWrite(BMP280_ADDR));
	TWI_BeginWrite(BMP280_ADDR);
     310:	86 e7       	ldi	r24, 0x76	; 118
     312:	0e 94 05 07 	call	0xe0a	; 0xe0a <TWI_BeginWrite>
	//printf("0x%1x",(unsigned)TWI_WriteByte(values[0]));
	TWI_WriteByte(values[0]);//Write the register address
     316:	88 81       	ld	r24, Y
     318:	0e 94 f7 06 	call	0xdee	; 0xdee <TWI_WriteByte>
	status = TWI_BeginRead(BMP280_ADDR); //Send a repeated start
     31c:	86 e7       	ldi	r24, 0x76	; 118
     31e:	0e 94 22 07 	call	0xe44	; 0xe44 <TWI_BeginRead>
     322:	80 93 62 04 	sts	0x0462, r24
	//printf("0x%1x",status);
	if (status == TWI_SLAR_ACK){
     326:	80 34       	cpi	r24, 0x40	; 64
     328:	81 f4       	brne	.+32     	; 0x34a <BMP280_ReadBytes+0x44>
		if(((TWI_Read(&values[0],length,false)&TWSR_MASK) == TWI_REC_NACK) && (TWI_Stop() != 0)) return(1); //Receive bytes, send a STOP bit, and check for success
     32a:	61 2f       	mov	r22, r17
     32c:	70 e0       	ldi	r23, 0x00	; 0
     32e:	40 e0       	ldi	r20, 0x00	; 0
     330:	ce 01       	movw	r24, r28
     332:	0e 94 5f 07 	call	0xebe	; 0xebe <TWI_Read>
     336:	88 7f       	andi	r24, 0xF8	; 248
     338:	88 35       	cpi	r24, 0x58	; 88
     33a:	49 f4       	brne	.+18     	; 0x34e <BMP280_ReadBytes+0x48>
     33c:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <TWI_Stop>
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	81 11       	cpse	r24, r1
     344:	05 c0       	rjmp	.+10     	; 0x350 <BMP280_ReadBytes+0x4a>
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	03 c0       	rjmp	.+6      	; 0x350 <BMP280_ReadBytes+0x4a>
	}
	return(0);
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	01 c0       	rjmp	.+2      	; 0x350 <BMP280_ReadBytes+0x4a>
     34e:	90 e0       	ldi	r25, 0x00	; 0
}
     350:	89 2f       	mov	r24, r25
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	1f 91       	pop	r17
     358:	08 95       	ret

0000035a <BMP280_ReadInt>:
  @brief Reads an int from the BMP280
  @param[in] address The register address of the first byte of the uint
  @param[out] val* A pointer to a uint to store the received data to
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadInt(char address, int *val){
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	00 d0       	rcall	.+0      	; 0x364 <BMP280_ReadInt+0xa>
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
     368:	8b 01       	movw	r16, r22
	//printf("\nBMP280_ReadInt");
	unsigned char data[2];	//char is 4 bits, 1 byte

	data[0] = address;
     36a:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     36c:	62 e0       	ldi	r22, 0x02	; 2
     36e:	ce 01       	movw	r24, r28
     370:	01 96       	adiw	r24, 0x01	; 1
     372:	0e 94 83 01 	call	0x306	; 0x306 <BMP280_ReadBytes>
     376:	88 23       	and	r24, r24
     378:	59 f0       	breq	.+22     	; 0x390 <BMP280_ReadInt+0x36>
		*val = (((int)data[1]<<8)|(int)data[0]);
     37a:	8a 81       	ldd	r24, Y+2	; 0x02
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	98 2f       	mov	r25, r24
     380:	88 27       	eor	r24, r24
     382:	29 81       	ldd	r18, Y+1	; 0x01
     384:	82 2b       	or	r24, r18
     386:	f8 01       	movw	r30, r16
     388:	91 83       	std	Z+1, r25	; 0x01
     38a:	80 83       	st	Z, r24
		return(1);
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	03 c0       	rjmp	.+6      	; 0x396 <BMP280_ReadInt+0x3c>
	}
	*val = 0;
     390:	f8 01       	movw	r30, r16
     392:	11 82       	std	Z+1, r1	; 0x01
     394:	10 82       	st	Z, r1
	return(0);
}
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	08 95       	ret

000003a4 <BMP280_Init>:

/*************************************************************************//**
  @brief Initializes the BMP280 and reads the calibration data from the device
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
char BMP280_Init(void){
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	00 d0       	rcall	.+0      	; 0x3aa <BMP280_Init+0x6>
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
     3ae:	88 e8       	ldi	r24, 0x88	; 136
     3b0:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     3b2:	62 e0       	ldi	r22, 0x02	; 2
     3b4:	ce 01       	movw	r24, r28
     3b6:	01 96       	adiw	r24, 0x01	; 1
     3b8:	0e 94 83 01 	call	0x306	; 0x306 <BMP280_ReadBytes>
     3bc:	88 23       	and	r24, r24
     3be:	99 f0       	breq	.+38     	; 0x3e6 <BMP280_Init+0x42>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     3c0:	8a 81       	ldd	r24, Y+2	; 0x02
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	98 2f       	mov	r25, r24
     3c6:	88 27       	eor	r24, r24
     3c8:	29 81       	ldd	r18, Y+1	; 0x01
     3ca:	82 2b       	or	r24, r18
     3cc:	90 93 6d 04 	sts	0x046D, r25
     3d0:	80 93 6c 04 	sts	0x046C, r24

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
     3d4:	62 e8       	ldi	r22, 0x82	; 130
     3d6:	74 e0       	ldi	r23, 0x04	; 4
     3d8:	8a e8       	ldi	r24, 0x8A	; 138
     3da:	0e 94 ad 01 	call	0x35a	; 0x35a <BMP280_ReadInt>
	// used in the calculations when taking measurements.

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
     3de:	88 23       	and	r24, r24
     3e0:	09 f4       	brne	.+2      	; 0x3e4 <BMP280_Init+0x40>
     3e2:	bb c0       	rjmp	.+374    	; 0x55a <BMP280_Init+0x1b6>
     3e4:	05 c0       	rjmp	.+10     	; 0x3f0 <BMP280_Init+0x4c>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     3e6:	10 92 6d 04 	sts	0x046D, r1
     3ea:	10 92 6c 04 	sts	0x046C, r1
     3ee:	b5 c0       	rjmp	.+362    	; 0x55a <BMP280_Init+0x1b6>
	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
     3f0:	60 e8       	ldi	r22, 0x80	; 128
     3f2:	74 e0       	ldi	r23, 0x04	; 4
     3f4:	8c e8       	ldi	r24, 0x8C	; 140
     3f6:	0e 94 ad 01 	call	0x35a	; 0x35a <BMP280_ReadInt>

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
     3fa:	88 23       	and	r24, r24
     3fc:	09 f4       	brne	.+2      	; 0x400 <BMP280_Init+0x5c>
     3fe:	ad c0       	rjmp	.+346    	; 0x55a <BMP280_Init+0x1b6>
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
     400:	8e e8       	ldi	r24, 0x8E	; 142
     402:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     404:	62 e0       	ldi	r22, 0x02	; 2
     406:	ce 01       	movw	r24, r28
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	0e 94 83 01 	call	0x306	; 0x306 <BMP280_ReadBytes>
     40e:	88 23       	and	r24, r24
     410:	99 f0       	breq	.+38     	; 0x438 <BMP280_Init+0x94>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     412:	8a 81       	ldd	r24, Y+2	; 0x02
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	98 2f       	mov	r25, r24
     418:	88 27       	eor	r24, r24
     41a:	29 81       	ldd	r18, Y+1	; 0x01
     41c:	82 2b       	or	r24, r18
     41e:	90 93 6f 04 	sts	0x046F, r25
     422:	80 93 6e 04 	sts	0x046E, r24
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     426:	6e e7       	ldi	r22, 0x7E	; 126
     428:	74 e0       	ldi	r23, 0x04	; 4
     42a:	80 e9       	ldi	r24, 0x90	; 144
     42c:	0e 94 ad 01 	call	0x35a	; 0x35a <BMP280_ReadInt>
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
     430:	88 23       	and	r24, r24
     432:	09 f4       	brne	.+2      	; 0x436 <BMP280_Init+0x92>
     434:	92 c0       	rjmp	.+292    	; 0x55a <BMP280_Init+0x1b6>
     436:	05 c0       	rjmp	.+10     	; 0x442 <BMP280_Init+0x9e>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     438:	10 92 6f 04 	sts	0x046F, r1
     43c:	10 92 6e 04 	sts	0x046E, r1
     440:	8c c0       	rjmp	.+280    	; 0x55a <BMP280_Init+0x1b6>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     442:	6c e7       	ldi	r22, 0x7C	; 124
     444:	74 e0       	ldi	r23, 0x04	; 4
     446:	82 e9       	ldi	r24, 0x92	; 146
     448:	0e 94 ad 01 	call	0x35a	; 0x35a <BMP280_ReadInt>
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     44c:	88 23       	and	r24, r24
     44e:	09 f4       	brne	.+2      	; 0x452 <BMP280_Init+0xae>
     450:	84 c0       	rjmp	.+264    	; 0x55a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     452:	6a e7       	ldi	r22, 0x7A	; 122
     454:	74 e0       	ldi	r23, 0x04	; 4
     456:	84 e9       	ldi	r24, 0x94	; 148
     458:	0e 94 ad 01 	call	0x35a	; 0x35a <BMP280_ReadInt>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     45c:	88 23       	and	r24, r24
     45e:	09 f4       	brne	.+2      	; 0x462 <BMP280_Init+0xbe>
     460:	7c c0       	rjmp	.+248    	; 0x55a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     462:	68 e7       	ldi	r22, 0x78	; 120
     464:	74 e0       	ldi	r23, 0x04	; 4
     466:	86 e9       	ldi	r24, 0x96	; 150
     468:	0e 94 ad 01 	call	0x35a	; 0x35a <BMP280_ReadInt>
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     46c:	88 23       	and	r24, r24
     46e:	09 f4       	brne	.+2      	; 0x472 <BMP280_Init+0xce>
     470:	74 c0       	rjmp	.+232    	; 0x55a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     472:	66 e7       	ldi	r22, 0x76	; 118
     474:	74 e0       	ldi	r23, 0x04	; 4
     476:	88 e9       	ldi	r24, 0x98	; 152
     478:	0e 94 ad 01 	call	0x35a	; 0x35a <BMP280_ReadInt>
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     47c:	88 23       	and	r24, r24
     47e:	09 f4       	brne	.+2      	; 0x482 <BMP280_Init+0xde>
     480:	6c c0       	rjmp	.+216    	; 0x55a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     482:	64 e7       	ldi	r22, 0x74	; 116
     484:	74 e0       	ldi	r23, 0x04	; 4
     486:	8a e9       	ldi	r24, 0x9A	; 154
     488:	0e 94 ad 01 	call	0x35a	; 0x35a <BMP280_ReadInt>
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     48c:	88 23       	and	r24, r24
     48e:	09 f4       	brne	.+2      	; 0x492 <BMP280_Init+0xee>
     490:	64 c0       	rjmp	.+200    	; 0x55a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     492:	62 e7       	ldi	r22, 0x72	; 114
     494:	74 e0       	ldi	r23, 0x04	; 4
     496:	8c e9       	ldi	r24, 0x9C	; 156
     498:	0e 94 ad 01 	call	0x35a	; 0x35a <BMP280_ReadInt>
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     49c:	88 23       	and	r24, r24
     49e:	09 f4       	brne	.+2      	; 0x4a2 <BMP280_Init+0xfe>
     4a0:	5c c0       	rjmp	.+184    	; 0x55a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9C, &dig_P8)  &&
		BMP280_ReadInt(0x9E, &dig_P9)){
     4a2:	60 e7       	ldi	r22, 0x70	; 112
     4a4:	74 e0       	ldi	r23, 0x04	; 4
     4a6:	8e e9       	ldi	r24, 0x9E	; 158
     4a8:	0e 94 ad 01 	call	0x35a	; 0x35a <BMP280_ReadInt>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     4ac:	88 23       	and	r24, r24
     4ae:	09 f4       	brne	.+2      	; 0x4b2 <BMP280_Init+0x10e>
     4b0:	54 c0       	rjmp	.+168    	; 0x55a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9E, &dig_P9)){
			printf("\nT: %i ,%i ,%i P: %i ,%i ,%i ,%i ,%i ,%i ,%i ,%1 ,%i \n",dig_T1,dig_T2,dig_T3,dig_P1,dig_P2,dig_P3,dig_P4,dig_P5,dig_P6,dig_P7,dig_P8,dig_P9);
     4b2:	80 91 71 04 	lds	r24, 0x0471
     4b6:	8f 93       	push	r24
     4b8:	80 91 70 04 	lds	r24, 0x0470
     4bc:	8f 93       	push	r24
     4be:	80 91 73 04 	lds	r24, 0x0473
     4c2:	8f 93       	push	r24
     4c4:	80 91 72 04 	lds	r24, 0x0472
     4c8:	8f 93       	push	r24
     4ca:	80 91 75 04 	lds	r24, 0x0475
     4ce:	8f 93       	push	r24
     4d0:	80 91 74 04 	lds	r24, 0x0474
     4d4:	8f 93       	push	r24
     4d6:	80 91 77 04 	lds	r24, 0x0477
     4da:	8f 93       	push	r24
     4dc:	80 91 76 04 	lds	r24, 0x0476
     4e0:	8f 93       	push	r24
     4e2:	80 91 79 04 	lds	r24, 0x0479
     4e6:	8f 93       	push	r24
     4e8:	80 91 78 04 	lds	r24, 0x0478
     4ec:	8f 93       	push	r24
     4ee:	80 91 7b 04 	lds	r24, 0x047B
     4f2:	8f 93       	push	r24
     4f4:	80 91 7a 04 	lds	r24, 0x047A
     4f8:	8f 93       	push	r24
     4fa:	80 91 7d 04 	lds	r24, 0x047D
     4fe:	8f 93       	push	r24
     500:	80 91 7c 04 	lds	r24, 0x047C
     504:	8f 93       	push	r24
     506:	80 91 7f 04 	lds	r24, 0x047F
     50a:	8f 93       	push	r24
     50c:	80 91 7e 04 	lds	r24, 0x047E
     510:	8f 93       	push	r24
     512:	80 91 6f 04 	lds	r24, 0x046F
     516:	8f 93       	push	r24
     518:	80 91 6e 04 	lds	r24, 0x046E
     51c:	8f 93       	push	r24
     51e:	80 91 81 04 	lds	r24, 0x0481
     522:	8f 93       	push	r24
     524:	80 91 80 04 	lds	r24, 0x0480
     528:	8f 93       	push	r24
     52a:	80 91 83 04 	lds	r24, 0x0483
     52e:	8f 93       	push	r24
     530:	80 91 82 04 	lds	r24, 0x0482
     534:	8f 93       	push	r24
     536:	80 91 6d 04 	lds	r24, 0x046D
     53a:	8f 93       	push	r24
     53c:	80 91 6c 04 	lds	r24, 0x046C
     540:	8f 93       	push	r24
     542:	83 e4       	ldi	r24, 0x43	; 67
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	9f 93       	push	r25
     548:	8f 93       	push	r24
     54a:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <printf>
		return (1);
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	f8 94       	cli
     552:	de bf       	out	0x3e, r29	; 62
     554:	0f be       	out	0x3f, r0	; 63
     556:	cd bf       	out	0x3d, r28	; 61
     558:	81 e0       	ldi	r24, 0x01	; 1
	}
	else 
		return (0);
}
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	08 95       	ret

00000564 <BMP280_SetOversampling>:
  @brief Sets the oversampling setting for the library
  @param[in] oss Oversampling setting
  @return 1
*****************************************************************************/
char BMP280_SetOversampling(short oss){
	oversampling = oss;
     564:	90 93 6b 04 	sts	0x046B, r25
     568:	80 93 6a 04 	sts	0x046A, r24
	return (1);
}
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	08 95       	ret

00000570 <BMP280_StartMeasurment>:

/*************************************************************************//**
  @brief Starts a measurement
  @return time to wait for result (in ms)
*****************************************************************************/
char BMP280_StartMeasurment(void){
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	00 d0       	rcall	.+0      	; 0x578 <BMP280_StartMeasurment+0x8>
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
	unsigned char data[2], result, delay;
	
	data[0] = BMP280_REG_CONTROL;
     57c:	84 ef       	ldi	r24, 0xF4	; 244
     57e:	89 83       	std	Y+1, r24	; 0x01

	switch (oversampling){
     580:	80 91 6a 04 	lds	r24, 0x046A
     584:	90 91 6b 04 	lds	r25, 0x046B
     588:	82 30       	cpi	r24, 0x02	; 2
     58a:	91 05       	cpc	r25, r1
     58c:	01 f1       	breq	.+64     	; 0x5ce <BMP280_StartMeasurment+0x5e>
     58e:	2c f4       	brge	.+10     	; 0x59a <BMP280_StartMeasurment+0x2a>
     590:	00 97       	sbiw	r24, 0x00	; 0
     592:	49 f0       	breq	.+18     	; 0x5a6 <BMP280_StartMeasurment+0x36>
     594:	01 97       	sbiw	r24, 0x01	; 1
     596:	89 f0       	breq	.+34     	; 0x5ba <BMP280_StartMeasurment+0x4a>
     598:	38 c0       	rjmp	.+112    	; 0x60a <BMP280_StartMeasurment+0x9a>
     59a:	83 30       	cpi	r24, 0x03	; 3
     59c:	91 05       	cpc	r25, r1
     59e:	09 f1       	breq	.+66     	; 0x5e2 <BMP280_StartMeasurment+0x72>
     5a0:	04 97       	sbiw	r24, 0x04	; 4
     5a2:	49 f1       	breq	.+82     	; 0x5f6 <BMP280_StartMeasurment+0x86>
     5a4:	32 c0       	rjmp	.+100    	; 0x60a <BMP280_StartMeasurment+0x9a>
		case 0:
		data[1] = BMP280_COMMAND_PRESSURE0;
     5a6:	85 e2       	ldi	r24, 0x25	; 37
     5a8:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	90 93 69 04 	sts	0x0469, r25
     5b2:	80 93 68 04 	sts	0x0468, r24
		delay = 8;
     5b6:	18 e0       	ldi	r17, 0x08	; 8
		break;
     5b8:	2b c0       	rjmp	.+86     	; 0x610 <BMP280_StartMeasurment+0xa0>
		case 1:
		data[1] = BMP280_COMMAND_PRESSURE1;
     5ba:	89 e2       	ldi	r24, 0x29	; 41
     5bc:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	90 93 69 04 	sts	0x0469, r25
     5c6:	80 93 68 04 	sts	0x0468, r24
		delay = 10;
     5ca:	1a e0       	ldi	r17, 0x0A	; 10
		break;
     5cc:	21 c0       	rjmp	.+66     	; 0x610 <BMP280_StartMeasurment+0xa0>
		case 2:
		data[1] = BMP280_COMMAND_PRESSURE2;
     5ce:	8d e2       	ldi	r24, 0x2D	; 45
     5d0:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	90 93 69 04 	sts	0x0469, r25
     5da:	80 93 68 04 	sts	0x0468, r24
		delay = 15;
     5de:	1f e0       	ldi	r17, 0x0F	; 15
		break;
     5e0:	17 c0       	rjmp	.+46     	; 0x610 <BMP280_StartMeasurment+0xa0>
		case 3:
		data[1] = BMP280_COMMAND_PRESSURE3;
     5e2:	81 e3       	ldi	r24, 0x31	; 49
     5e4:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	90 93 69 04 	sts	0x0469, r25
     5ee:	80 93 68 04 	sts	0x0468, r24
		delay = 24;
     5f2:	18 e1       	ldi	r17, 0x18	; 24
		break;
     5f4:	0d c0       	rjmp	.+26     	; 0x610 <BMP280_StartMeasurment+0xa0>
		case 4:
		data[1] = BMP280_COMMAND_PRESSURE4;
     5f6:	8d e5       	ldi	r24, 0x5D	; 93
     5f8:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	90 93 69 04 	sts	0x0469, r25
     602:	80 93 68 04 	sts	0x0468, r24
		delay = 45;
     606:	1d e2       	ldi	r17, 0x2D	; 45
		break;
     608:	03 c0       	rjmp	.+6      	; 0x610 <BMP280_StartMeasurment+0xa0>
		default:
		data[1] = BMP280_COMMAND_PRESSURE0;
     60a:	85 e2       	ldi	r24, 0x25	; 37
     60c:	8a 83       	std	Y+2, r24	; 0x02
		delay = 9;
     60e:	19 e0       	ldi	r17, 0x09	; 9
  @param[in] *values pointer to an array to send, put the starting register in values[0]
  @param[in] length how many bytes to write (including the starting register ie. sizeof(values))
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_WriteBytes(unsigned char *values, char length){
	TWI_BeginWrite(BMP280_ADDR);
     610:	86 e7       	ldi	r24, 0x76	; 118
     612:	0e 94 05 07 	call	0xe0a	; 0xe0a <TWI_BeginWrite>
	if((TWI_Write(&values[0],length) == TWI_SENT_ACK) && (TWI_Stop() != 0)) return 1; //Send bytes, a STOP bit, and check for success
     616:	62 e0       	ldi	r22, 0x02	; 2
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	ce 01       	movw	r24, r28
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	0e 94 9b 07 	call	0xf36	; 0xf36 <TWI_Write>
     622:	88 32       	cpi	r24, 0x28	; 40
     624:	31 f4       	brne	.+12     	; 0x632 <BMP280_StartMeasurment+0xc2>
     626:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <TWI_Stop>
		data[1] = BMP280_COMMAND_PRESSURE0;
		delay = 9;
		break;
	}
	result = BMP280_WriteBytes(&data[0], 2);
	if (result) // good write?
     62a:	88 23       	and	r24, r24
     62c:	21 f0       	breq	.+8      	; 0x636 <BMP280_StartMeasurment+0xc6>
	return(delay); // return the delay in ms (rounded up) to wait before retrieving data
     62e:	81 2f       	mov	r24, r17
     630:	03 c0       	rjmp	.+6      	; 0x638 <BMP280_StartMeasurment+0xc8>
	else
	return(-1); // or return -1 if there was a problem communicating with the BMP
     632:	8f ef       	ldi	r24, 0xFF	; 255
     634:	01 c0       	rjmp	.+2      	; 0x638 <BMP280_StartMeasurment+0xc8>
     636:	8f ef       	ldi	r24, 0xFF	; 255
}
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	08 95       	ret

00000644 <BMP280_GetUnPT>:
  @brief Gets the uncalibrated temperature and pressure data
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetUnPT(double *uP, double *uT){
     644:	8f 92       	push	r8
     646:	9f 92       	push	r9
     648:	af 92       	push	r10
     64a:	bf 92       	push	r11
     64c:	cf 92       	push	r12
     64e:	df 92       	push	r13
     650:	ef 92       	push	r14
     652:	ff 92       	push	r15
     654:	1f 93       	push	r17
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	00 d0       	rcall	.+0      	; 0x65c <BMP280_GetUnPT+0x18>
     65c:	00 d0       	rcall	.+0      	; 0x65e <BMP280_GetUnPT+0x1a>
     65e:	00 d0       	rcall	.+0      	; 0x660 <BMP280_GetUnPT+0x1c>
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
     664:	6c 01       	movw	r12, r24
     666:	7b 01       	movw	r14, r22
	unsigned char data[6];
	char result;
	
	data[0] = BMP280_REG_RESULT_PRESSURE; //0xF7
     668:	87 ef       	ldi	r24, 0xF7	; 247
     66a:	89 83       	std	Y+1, r24	; 0x01

	result = BMP280_ReadBytes(&data[0], 6); // 0xF7; xF8, 0xF9, 0xFA, 0xFB, 0xFC
     66c:	66 e0       	ldi	r22, 0x06	; 6
     66e:	ce 01       	movw	r24, r28
     670:	01 96       	adiw	r24, 0x01	; 1
     672:	0e 94 83 01 	call	0x306	; 0x306 <BMP280_ReadBytes>
     676:	18 2f       	mov	r17, r24
	if (result){ // good read
     678:	88 23       	and	r24, r24
     67a:	09 f4       	brne	.+2      	; 0x67e <BMP280_GetUnPT+0x3a>
     67c:	76 c0       	rjmp	.+236    	; 0x76a <BMP280_GetUnPT+0x126>
		double factor = pow(2, 4);
		*uP = (( (data[0] *256.0) + data[1] + (data[2]/256.0))) * factor ;	//20bit UP
     67e:	69 81       	ldd	r22, Y+1	; 0x01
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	40 e8       	ldi	r20, 0x80	; 128
     690:	53 e4       	ldi	r21, 0x43	; 67
     692:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     696:	4b 01       	movw	r8, r22
     698:	5c 01       	movw	r10, r24
     69a:	8a 81       	ldd	r24, Y+2	; 0x02
     69c:	68 2f       	mov	r22, r24
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
     6a8:	9b 01       	movw	r18, r22
     6aa:	ac 01       	movw	r20, r24
     6ac:	c5 01       	movw	r24, r10
     6ae:	b4 01       	movw	r22, r8
     6b0:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__addsf3>
     6b4:	4b 01       	movw	r8, r22
     6b6:	5c 01       	movw	r10, r24
     6b8:	4b 81       	ldd	r20, Y+3	; 0x03
     6ba:	64 2f       	mov	r22, r20
     6bc:	70 e0       	ldi	r23, 0x00	; 0
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	90 e0       	ldi	r25, 0x00	; 0
     6c2:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	40 e8       	ldi	r20, 0x80	; 128
     6cc:	5b e3       	ldi	r21, 0x3B	; 59
     6ce:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     6d2:	9b 01       	movw	r18, r22
     6d4:	ac 01       	movw	r20, r24
     6d6:	c5 01       	movw	r24, r10
     6d8:	b4 01       	movw	r22, r8
     6da:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__addsf3>
     6de:	20 e0       	ldi	r18, 0x00	; 0
     6e0:	30 e0       	ldi	r19, 0x00	; 0
     6e2:	40 e8       	ldi	r20, 0x80	; 128
     6e4:	51 e4       	ldi	r21, 0x41	; 65
     6e6:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     6ea:	f6 01       	movw	r30, r12
     6ec:	60 83       	st	Z, r22
     6ee:	71 83       	std	Z+1, r23	; 0x01
     6f0:	82 83       	std	Z+2, r24	; 0x02
     6f2:	93 83       	std	Z+3, r25	; 0x03
		*uT = (( (data[3] *256.0) + data[4] + (data[5]/256.0))) * factor ;	//20bit UT
     6f4:	6c 81       	ldd	r22, Y+4	; 0x04
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	80 e0       	ldi	r24, 0x00	; 0
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
     700:	20 e0       	ldi	r18, 0x00	; 0
     702:	30 e0       	ldi	r19, 0x00	; 0
     704:	40 e8       	ldi	r20, 0x80	; 128
     706:	53 e4       	ldi	r21, 0x43	; 67
     708:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     70c:	4b 01       	movw	r8, r22
     70e:	5c 01       	movw	r10, r24
     710:	8d 81       	ldd	r24, Y+5	; 0x05
     712:	68 2f       	mov	r22, r24
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	90 e0       	ldi	r25, 0x00	; 0
     71a:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
     71e:	9b 01       	movw	r18, r22
     720:	ac 01       	movw	r20, r24
     722:	c5 01       	movw	r24, r10
     724:	b4 01       	movw	r22, r8
     726:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__addsf3>
     72a:	4b 01       	movw	r8, r22
     72c:	5c 01       	movw	r10, r24
     72e:	8e 81       	ldd	r24, Y+6	; 0x06
     730:	68 2f       	mov	r22, r24
     732:	70 e0       	ldi	r23, 0x00	; 0
     734:	80 e0       	ldi	r24, 0x00	; 0
     736:	90 e0       	ldi	r25, 0x00	; 0
     738:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	40 e8       	ldi	r20, 0x80	; 128
     742:	5b e3       	ldi	r21, 0x3B	; 59
     744:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     748:	9b 01       	movw	r18, r22
     74a:	ac 01       	movw	r20, r24
     74c:	c5 01       	movw	r24, r10
     74e:	b4 01       	movw	r22, r8
     750:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__addsf3>
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	40 e8       	ldi	r20, 0x80	; 128
     75a:	51 e4       	ldi	r21, 0x41	; 65
     75c:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     760:	f7 01       	movw	r30, r14
     762:	60 83       	st	Z, r22
     764:	71 83       	std	Z+1, r23	; 0x01
     766:	82 83       	std	Z+2, r24	; 0x02
     768:	93 83       	std	Z+3, r25	; 0x03
		
	}
	return(result);
}
     76a:	81 2f       	mov	r24, r17
     76c:	26 96       	adiw	r28, 0x06	; 6
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	f8 94       	cli
     772:	de bf       	out	0x3e, r29	; 62
     774:	0f be       	out	0x3f, r0	; 63
     776:	cd bf       	out	0x3d, r28	; 61
     778:	df 91       	pop	r29
     77a:	cf 91       	pop	r28
     77c:	1f 91       	pop	r17
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	df 90       	pop	r13
     784:	cf 90       	pop	r12
     786:	bf 90       	pop	r11
     788:	af 90       	pop	r10
     78a:	9f 90       	pop	r9
     78c:	8f 90       	pop	r8
     78e:	08 95       	ret

00000790 <BMP280_CalcTemperature>:
  @brief Calculates temperature
  @param[out] pointer to a place to store the temperature data
  @param[in] pointer to the uncalibrated temperature data
  @return status
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
     790:	4f 92       	push	r4
     792:	5f 92       	push	r5
     794:	6f 92       	push	r6
     796:	7f 92       	push	r7
     798:	8f 92       	push	r8
     79a:	9f 92       	push	r9
     79c:	af 92       	push	r10
     79e:	bf 92       	push	r11
     7a0:	cf 92       	push	r12
     7a2:	df 92       	push	r13
     7a4:	ef 92       	push	r14
     7a6:	ff 92       	push	r15
     7a8:	cf 93       	push	r28
     7aa:	df 93       	push	r29
     7ac:	ec 01       	movw	r28, r24
	double adc_T = *uT ;
     7ae:	fb 01       	movw	r30, r22
     7b0:	c0 80       	ld	r12, Z
     7b2:	d1 80       	ldd	r13, Z+1	; 0x01
     7b4:	e2 80       	ldd	r14, Z+2	; 0x02
     7b6:	f3 80       	ldd	r15, Z+3	; 0x03
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
     7b8:	80 91 6c 04 	lds	r24, 0x046C
     7bc:	90 91 6d 04 	lds	r25, 0x046D
     7c0:	bc 01       	movw	r22, r24
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <__floatunsisf>
     7ca:	2b 01       	movw	r4, r22
     7cc:	3c 01       	movw	r6, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	40 e0       	ldi	r20, 0x00	; 0
     7d4:	57 e3       	ldi	r21, 0x37	; 55
     7d6:	c7 01       	movw	r24, r14
     7d8:	b6 01       	movw	r22, r12
     7da:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     7de:	4b 01       	movw	r8, r22
     7e0:	5c 01       	movw	r10, r24
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	59 e3       	ldi	r21, 0x39	; 57
     7ea:	c3 01       	movw	r24, r6
     7ec:	b2 01       	movw	r22, r4
     7ee:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     7f2:	9b 01       	movw	r18, r22
     7f4:	ac 01       	movw	r20, r24
     7f6:	c5 01       	movw	r24, r10
     7f8:	b4 01       	movw	r22, r8
     7fa:	0e 94 bf 0c 	call	0x197e	; 0x197e <__subsf3>
     7fe:	4b 01       	movw	r8, r22
     800:	5c 01       	movw	r10, r24
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
	double adc_T = *uT ;
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
     802:	20 e0       	ldi	r18, 0x00	; 0
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	40 e8       	ldi	r20, 0x80	; 128
     808:	58 e3       	ldi	r21, 0x38	; 56
     80a:	c7 01       	movw	r24, r14
     80c:	b6 01       	movw	r22, r12
     80e:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     812:	6b 01       	movw	r12, r22
     814:	7c 01       	movw	r14, r24
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	40 e8       	ldi	r20, 0x80	; 128
     81c:	5a e3       	ldi	r21, 0x3A	; 58
     81e:	c3 01       	movw	r24, r6
     820:	b2 01       	movw	r22, r4
     822:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     826:	9b 01       	movw	r18, r22
     828:	ac 01       	movw	r20, r24
     82a:	c7 01       	movw	r24, r14
     82c:	b6 01       	movw	r22, r12
     82e:	0e 94 bf 0c 	call	0x197e	; 0x197e <__subsf3>
     832:	6b 01       	movw	r12, r22
     834:	7c 01       	movw	r14, r24
     836:	80 91 82 04 	lds	r24, 0x0482
     83a:	90 91 83 04 	lds	r25, 0x0483
     83e:	bc 01       	movw	r22, r24
     840:	99 0f       	add	r25, r25
     842:	88 0b       	sbc	r24, r24
     844:	99 0b       	sbc	r25, r25
     846:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
     84a:	9b 01       	movw	r18, r22
     84c:	ac 01       	movw	r20, r24
     84e:	c7 01       	movw	r24, r14
     850:	b6 01       	movw	r22, r12
     852:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     856:	6b 01       	movw	r12, r22
     858:	7c 01       	movw	r14, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
     85a:	a5 01       	movw	r20, r10
     85c:	94 01       	movw	r18, r8
     85e:	c5 01       	movw	r24, r10
     860:	b4 01       	movw	r22, r8
     862:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     866:	4b 01       	movw	r8, r22
     868:	5c 01       	movw	r10, r24
     86a:	40 91 80 04 	lds	r20, 0x0480
     86e:	50 91 81 04 	lds	r21, 0x0481
     872:	ba 01       	movw	r22, r20
     874:	55 0f       	add	r21, r21
     876:	88 0b       	sbc	r24, r24
     878:	99 0b       	sbc	r25, r25
     87a:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
     87e:	9b 01       	movw	r18, r22
     880:	ac 01       	movw	r20, r24
     882:	c5 01       	movw	r24, r10
     884:	b4 01       	movw	r22, r8
     886:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     88a:	9b 01       	movw	r18, r22
     88c:	ac 01       	movw	r20, r24
	t_fine = (long signed int)(var1+var2);
     88e:	c7 01       	movw	r24, r14
     890:	b6 01       	movw	r22, r12
     892:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__addsf3>
     896:	6b 01       	movw	r12, r22
     898:	7c 01       	movw	r14, r24
     89a:	0e 94 a3 0d 	call	0x1b46	; 0x1b46 <__fixsfsi>
     89e:	60 93 64 04 	sts	0x0464, r22
     8a2:	70 93 65 04 	sts	0x0465, r23
     8a6:	80 93 66 04 	sts	0x0466, r24
     8aa:	90 93 67 04 	sts	0x0467, r25
	
	*T = (var1+var2)/5120.0;
     8ae:	20 e0       	ldi	r18, 0x00	; 0
     8b0:	30 e0       	ldi	r19, 0x00	; 0
     8b2:	40 ea       	ldi	r20, 0xA0	; 160
     8b4:	55 e4       	ldi	r21, 0x45	; 69
     8b6:	c7 01       	movw	r24, r14
     8b8:	b6 01       	movw	r22, r12
     8ba:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__divsf3>
     8be:	6b 01       	movw	r12, r22
     8c0:	7c 01       	movw	r14, r24
     8c2:	68 83       	st	Y, r22
     8c4:	79 83       	std	Y+1, r23	; 0x01
     8c6:	8a 83       	std	Y+2, r24	; 0x02
     8c8:	9b 83       	std	Y+3, r25	; 0x03
	
	if(*T>100.0 || *T <(-100.0))return 0;
     8ca:	20 e0       	ldi	r18, 0x00	; 0
     8cc:	30 e0       	ldi	r19, 0x00	; 0
     8ce:	48 ec       	ldi	r20, 0xC8	; 200
     8d0:	52 e4       	ldi	r21, 0x42	; 66
     8d2:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__gesf2>
     8d6:	18 16       	cp	r1, r24
     8d8:	74 f0       	brlt	.+28     	; 0x8f6 <BMP280_CalcTemperature+0x166>
     8da:	20 e0       	ldi	r18, 0x00	; 0
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	48 ec       	ldi	r20, 0xC8	; 200
     8e0:	52 ec       	ldi	r21, 0xC2	; 194
     8e2:	c7 01       	movw	r24, r14
     8e4:	b6 01       	movw	r22, r12
     8e6:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <__cmpsf2>
     8ea:	88 1f       	adc	r24, r24
     8ec:	88 27       	eor	r24, r24
     8ee:	88 1f       	adc	r24, r24
     8f0:	91 e0       	ldi	r25, 0x01	; 1
     8f2:	89 27       	eor	r24, r25
     8f4:	01 c0       	rjmp	.+2      	; 0x8f8 <BMP280_CalcTemperature+0x168>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
	
	return (1);
}
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	ff 90       	pop	r15
     8fe:	ef 90       	pop	r14
     900:	df 90       	pop	r13
     902:	cf 90       	pop	r12
     904:	bf 90       	pop	r11
     906:	af 90       	pop	r10
     908:	9f 90       	pop	r9
     90a:	8f 90       	pop	r8
     90c:	7f 90       	pop	r7
     90e:	6f 90       	pop	r6
     910:	5f 90       	pop	r5
     912:	4f 90       	pop	r4
     914:	08 95       	ret

00000916 <BMP280_CalcPressure>:
  @brief Calculates pressure
  @param[out] pointer to a place to store the pressure data
  @param[in] pointer to the uncalibrated pressure data
  @return status
*****************************************************************************/
char BMP280_CalcPressure(double *P,double *uP){
     916:	4f 92       	push	r4
     918:	5f 92       	push	r5
     91a:	6f 92       	push	r6
     91c:	7f 92       	push	r7
     91e:	8f 92       	push	r8
     920:	9f 92       	push	r9
     922:	af 92       	push	r10
     924:	bf 92       	push	r11
     926:	cf 92       	push	r12
     928:	df 92       	push	r13
     92a:	ef 92       	push	r14
     92c:	ff 92       	push	r15
     92e:	0f 93       	push	r16
     930:	1f 93       	push	r17
     932:	cf 93       	push	r28
     934:	df 93       	push	r29
     936:	8c 01       	movw	r16, r24
     938:	eb 01       	movw	r28, r22
	//char result;
	double var1 , var2 ;
	
	var1 = ((double)t_fine/2.0) - 64000.0;
     93a:	60 91 64 04 	lds	r22, 0x0464
     93e:	70 91 65 04 	lds	r23, 0x0465
     942:	80 91 66 04 	lds	r24, 0x0466
     946:	90 91 67 04 	lds	r25, 0x0467
     94a:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
     94e:	20 e0       	ldi	r18, 0x00	; 0
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	40 e0       	ldi	r20, 0x00	; 0
     954:	5f e3       	ldi	r21, 0x3F	; 63
     956:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     95a:	20 e0       	ldi	r18, 0x00	; 0
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	4a e7       	ldi	r20, 0x7A	; 122
     960:	57 e4       	ldi	r21, 0x47	; 71
     962:	0e 94 bf 0c 	call	0x197e	; 0x197e <__subsf3>
     966:	6b 01       	movw	r12, r22
     968:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
     96a:	60 91 76 04 	lds	r22, 0x0476
     96e:	70 91 77 04 	lds	r23, 0x0477
     972:	07 2e       	mov	r0, r23
     974:	00 0c       	add	r0, r0
     976:	88 0b       	sbc	r24, r24
     978:	99 0b       	sbc	r25, r25
     97a:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
     97e:	a7 01       	movw	r20, r14
     980:	96 01       	movw	r18, r12
     982:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     986:	20 e0       	ldi	r18, 0x00	; 0
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	40 e0       	ldi	r20, 0x00	; 0
     98c:	58 e3       	ldi	r21, 0x38	; 56
     98e:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     992:	a7 01       	movw	r20, r14
     994:	96 01       	movw	r18, r12
     996:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     99a:	4b 01       	movw	r8, r22
     99c:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
     99e:	60 91 78 04 	lds	r22, 0x0478
     9a2:	70 91 79 04 	lds	r23, 0x0479
     9a6:	07 2e       	mov	r0, r23
     9a8:	00 0c       	add	r0, r0
     9aa:	88 0b       	sbc	r24, r24
     9ac:	99 0b       	sbc	r25, r25
     9ae:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
     9b2:	a7 01       	movw	r20, r14
     9b4:	96 01       	movw	r18, r12
     9b6:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     9ba:	9b 01       	movw	r18, r22
     9bc:	ac 01       	movw	r20, r24
     9be:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__addsf3>
     9c2:	a5 01       	movw	r20, r10
     9c4:	94 01       	movw	r18, r8
     9c6:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__addsf3>
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
     9ca:	20 e0       	ldi	r18, 0x00	; 0
     9cc:	30 e0       	ldi	r19, 0x00	; 0
     9ce:	40 e8       	ldi	r20, 0x80	; 128
     9d0:	5e e3       	ldi	r21, 0x3E	; 62
     9d2:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     9d6:	4b 01       	movw	r8, r22
     9d8:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var1 = (((double)dig_P3) * var1 * var1/524288.0 + ((double)dig_P2) * var1) / 524288.0;
     9da:	60 91 7c 04 	lds	r22, 0x047C
     9de:	70 91 7d 04 	lds	r23, 0x047D
     9e2:	07 2e       	mov	r0, r23
     9e4:	00 0c       	add	r0, r0
     9e6:	88 0b       	sbc	r24, r24
     9e8:	99 0b       	sbc	r25, r25
     9ea:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
     9ee:	a7 01       	movw	r20, r14
     9f0:	96 01       	movw	r18, r12
     9f2:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     9f6:	a7 01       	movw	r20, r14
     9f8:	96 01       	movw	r18, r12
     9fa:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     9fe:	20 e0       	ldi	r18, 0x00	; 0
     a00:	30 e0       	ldi	r19, 0x00	; 0
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	56 e3       	ldi	r21, 0x36	; 54
     a06:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     a0a:	2b 01       	movw	r4, r22
     a0c:	3c 01       	movw	r6, r24
     a0e:	60 91 7e 04 	lds	r22, 0x047E
     a12:	70 91 7f 04 	lds	r23, 0x047F
     a16:	07 2e       	mov	r0, r23
     a18:	00 0c       	add	r0, r0
     a1a:	88 0b       	sbc	r24, r24
     a1c:	99 0b       	sbc	r25, r25
     a1e:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
     a22:	a7 01       	movw	r20, r14
     a24:	96 01       	movw	r18, r12
     a26:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     a2a:	9b 01       	movw	r18, r22
     a2c:	ac 01       	movw	r20, r24
     a2e:	c3 01       	movw	r24, r6
     a30:	b2 01       	movw	r22, r4
     a32:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__addsf3>
     a36:	20 e0       	ldi	r18, 0x00	; 0
     a38:	30 e0       	ldi	r19, 0x00	; 0
     a3a:	40 e0       	ldi	r20, 0x00	; 0
     a3c:	56 e3       	ldi	r21, 0x36	; 54
     a3e:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
     a42:	20 e0       	ldi	r18, 0x00	; 0
     a44:	30 e0       	ldi	r19, 0x00	; 0
     a46:	40 e0       	ldi	r20, 0x00	; 0
     a48:	57 e4       	ldi	r21, 0x47	; 71
     a4a:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__addsf3>
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	30 e0       	ldi	r19, 0x00	; 0
     a52:	40 e0       	ldi	r20, 0x00	; 0
     a54:	58 e3       	ldi	r21, 0x38	; 56
     a56:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     a5a:	6b 01       	movw	r12, r22
     a5c:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
     a5e:	28 81       	ld	r18, Y
     a60:	39 81       	ldd	r19, Y+1	; 0x01
     a62:	4a 81       	ldd	r20, Y+2	; 0x02
     a64:	5b 81       	ldd	r21, Y+3	; 0x03
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	70 e0       	ldi	r23, 0x00	; 0
     a6a:	80 e8       	ldi	r24, 0x80	; 128
     a6c:	99 e4       	ldi	r25, 0x49	; 73
     a6e:	0e 94 bf 0c 	call	0x197e	; 0x197e <__subsf3>
     a72:	2b 01       	movw	r4, r22
     a74:	3c 01       	movw	r6, r24
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
     a76:	60 91 7a 04 	lds	r22, 0x047A
     a7a:	70 91 7b 04 	lds	r23, 0x047B
     a7e:	07 2e       	mov	r0, r23
     a80:	00 0c       	add	r0, r0
     a82:	88 0b       	sbc	r24, r24
     a84:	99 0b       	sbc	r25, r25
     a86:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	30 e0       	ldi	r19, 0x00	; 0
     a8e:	40 e8       	ldi	r20, 0x80	; 128
     a90:	57 e4       	ldi	r21, 0x47	; 71
     a92:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     a96:	9b 01       	movw	r18, r22
     a98:	ac 01       	movw	r20, r24
     a9a:	c5 01       	movw	r24, r10
     a9c:	b4 01       	movw	r22, r8
     a9e:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__addsf3>
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	59 e3       	ldi	r21, 0x39	; 57
     aaa:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     aae:	9b 01       	movw	r18, r22
     ab0:	ac 01       	movw	r20, r24
     ab2:	c3 01       	movw	r24, r6
     ab4:	b2 01       	movw	r22, r4
     ab6:	0e 94 bf 0c 	call	0x197e	; 0x197e <__subsf3>
     aba:	20 e0       	ldi	r18, 0x00	; 0
     abc:	30 e5       	ldi	r19, 0x50	; 80
     abe:	43 ec       	ldi	r20, 0xC3	; 195
     ac0:	55 e4       	ldi	r21, 0x45	; 69
     ac2:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     ac6:	4b 01       	movw	r8, r22
     ac8:	5c 01       	movw	r10, r24
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
     aca:	80 91 6e 04 	lds	r24, 0x046E
     ace:	90 91 6f 04 	lds	r25, 0x046F
     ad2:	bc 01       	movw	r22, r24
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <__floatunsisf>
     adc:	9b 01       	movw	r18, r22
     ade:	ac 01       	movw	r20, r24
     ae0:	c7 01       	movw	r24, r14
     ae2:	b6 01       	movw	r22, r12
     ae4:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     ae8:	9b 01       	movw	r18, r22
     aea:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
     aec:	c5 01       	movw	r24, r10
     aee:	b4 01       	movw	r22, r8
     af0:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__divsf3>
     af4:	6b 01       	movw	r12, r22
     af6:	7c 01       	movw	r14, r24
	//Serial.print("p = ");Serial.println(p,2);
	
	var1 = ((double)dig_P9)*p*p/2147483648.0;	//overflow
     af8:	60 91 70 04 	lds	r22, 0x0470
     afc:	70 91 71 04 	lds	r23, 0x0471
     b00:	07 2e       	mov	r0, r23
     b02:	00 0c       	add	r0, r0
     b04:	88 0b       	sbc	r24, r24
     b06:	99 0b       	sbc	r25, r25
     b08:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
     b0c:	a7 01       	movw	r20, r14
     b0e:	96 01       	movw	r18, r12
     b10:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     b14:	a7 01       	movw	r20, r14
     b16:	96 01       	movw	r18, r12
     b18:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	50 e3       	ldi	r21, 0x30	; 48
     b24:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     b28:	4b 01       	movw	r8, r22
     b2a:	5c 01       	movw	r10, r24
	
	var2 = p*((double)dig_P8)/32768.0;
     b2c:	80 91 72 04 	lds	r24, 0x0472
     b30:	90 91 73 04 	lds	r25, 0x0473
     b34:	bc 01       	movw	r22, r24
     b36:	99 0f       	add	r25, r25
     b38:	88 0b       	sbc	r24, r24
     b3a:	99 0b       	sbc	r25, r25
     b3c:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
     b40:	a7 01       	movw	r20, r14
     b42:	96 01       	movw	r18, r12
     b44:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	58 e3       	ldi	r21, 0x38	; 56
     b50:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     b54:	9b 01       	movw	r18, r22
     b56:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	p = p + (var1+var2+((double)dig_P7))/16.0;
     b58:	c5 01       	movw	r24, r10
     b5a:	b4 01       	movw	r22, r8
     b5c:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__addsf3>
     b60:	4b 01       	movw	r8, r22
     b62:	5c 01       	movw	r10, r24
     b64:	80 91 74 04 	lds	r24, 0x0474
     b68:	90 91 75 04 	lds	r25, 0x0475
     b6c:	bc 01       	movw	r22, r24
     b6e:	99 0f       	add	r25, r25
     b70:	88 0b       	sbc	r24, r24
     b72:	99 0b       	sbc	r25, r25
     b74:	0e 94 db 0d 	call	0x1bb6	; 0x1bb6 <__floatsisf>
     b78:	9b 01       	movw	r18, r22
     b7a:	ac 01       	movw	r20, r24
     b7c:	c5 01       	movw	r24, r10
     b7e:	b4 01       	movw	r22, r8
     b80:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__addsf3>
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	40 e8       	ldi	r20, 0x80	; 128
     b8a:	5d e3       	ldi	r21, 0x3D	; 61
     b8c:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <__mulsf3>
     b90:	a7 01       	movw	r20, r14
     b92:	96 01       	movw	r18, r12
     b94:	0e 94 c0 0c 	call	0x1980	; 0x1980 <__addsf3>
	//Serial.print("p = ");Serial.println(p,2);
	
	*P = p/100.0 ;
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	48 ec       	ldi	r20, 0xC8	; 200
     b9e:	52 e4       	ldi	r21, 0x42	; 66
     ba0:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <__divsf3>
     ba4:	6b 01       	movw	r12, r22
     ba6:	7c 01       	movw	r14, r24
     ba8:	f8 01       	movw	r30, r16
     baa:	60 83       	st	Z, r22
     bac:	71 83       	std	Z+1, r23	; 0x01
     bae:	82 83       	std	Z+2, r24	; 0x02
     bb0:	93 83       	std	Z+3, r25	; 0x03
	
	if((*P>1200.0) || (*P < 800.0))return (0);
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	46 e9       	ldi	r20, 0x96	; 150
     bb8:	54 e4       	ldi	r21, 0x44	; 68
     bba:	0e 94 8b 0e 	call	0x1d16	; 0x1d16 <__gesf2>
     bbe:	18 16       	cp	r1, r24
     bc0:	74 f0       	brlt	.+28     	; 0xbde <BMP280_CalcPressure+0x2c8>
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	48 e4       	ldi	r20, 0x48	; 72
     bc8:	54 e4       	ldi	r21, 0x44	; 68
     bca:	c7 01       	movw	r24, r14
     bcc:	b6 01       	movw	r22, r12
     bce:	0e 94 2c 0d 	call	0x1a58	; 0x1a58 <__cmpsf2>
     bd2:	88 1f       	adc	r24, r24
     bd4:	88 27       	eor	r24, r24
     bd6:	88 1f       	adc	r24, r24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	89 27       	eor	r24, r25
     bdc:	01 c0       	rjmp	.+2      	; 0xbe0 <BMP280_CalcPressure+0x2ca>
     bde:	80 e0       	ldi	r24, 0x00	; 0
	return (1);
}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	cf 90       	pop	r12
     bf0:	bf 90       	pop	r11
     bf2:	af 90       	pop	r10
     bf4:	9f 90       	pop	r9
     bf6:	8f 90       	pop	r8
     bf8:	7f 90       	pop	r7
     bfa:	6f 90       	pop	r6
     bfc:	5f 90       	pop	r5
     bfe:	4f 90       	pop	r4
     c00:	08 95       	ret

00000c02 <BMP280_GetTemperatureAndPressure>:
  @brief Gets temperature and pressure
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetTemperatureAndPressure(double *T,double *P){
     c02:	ef 92       	push	r14
     c04:	ff 92       	push	r15
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	28 97       	sbiw	r28, 0x08	; 8
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	de bf       	out	0x3e, r29	; 62
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	cd bf       	out	0x3d, r28	; 61
     c1e:	8c 01       	movw	r16, r24
     c20:	7b 01       	movw	r14, r22
	double uP,uT ;
	char result = BMP280_GetUnPT(&uP,&uT);
     c22:	be 01       	movw	r22, r28
     c24:	6b 5f       	subi	r22, 0xFB	; 251
     c26:	7f 4f       	sbci	r23, 0xFF	; 255
     c28:	ce 01       	movw	r24, r28
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	0e 94 22 03 	call	0x644	; 0x644 <BMP280_GetUnPT>
	if(result!=0){
     c30:	88 23       	and	r24, r24
     c32:	d1 f0       	breq	.+52     	; 0xc68 <BMP280_GetTemperatureAndPressure+0x66>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
     c34:	be 01       	movw	r22, r28
     c36:	6b 5f       	subi	r22, 0xFB	; 251
     c38:	7f 4f       	sbci	r23, 0xFF	; 255
     c3a:	c8 01       	movw	r24, r16
     c3c:	0e 94 c8 03 	call	0x790	; 0x790 <BMP280_CalcTemperature>
		if(result){
     c40:	88 23       	and	r24, r24
     c42:	69 f0       	breq	.+26     	; 0xc5e <BMP280_GetTemperatureAndPressure+0x5c>
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
     c44:	be 01       	movw	r22, r28
     c46:	6f 5f       	subi	r22, 0xFF	; 255
     c48:	7f 4f       	sbci	r23, 0xFF	; 255
     c4a:	c7 01       	movw	r24, r14
     c4c:	0e 94 8b 04 	call	0x916	; 0x916 <BMP280_CalcPressure>
			if(result)return (1);
     c50:	81 11       	cpse	r24, r1
     c52:	0f c0       	rjmp	.+30     	; 0xc72 <BMP280_GetTemperatureAndPressure+0x70>
			else error = 3 ;	// pressure error ;
     c54:	83 e0       	ldi	r24, 0x03	; 3
     c56:	80 93 63 04 	sts	0x0463, r24
			return (0);
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	0b c0       	rjmp	.+22     	; 0xc74 <BMP280_GetTemperatureAndPressure+0x72>
		}else
		error = 2;	// temperature error ;
     c5e:	82 e0       	ldi	r24, 0x02	; 2
     c60:	80 93 63 04 	sts	0x0463, r24
	}
	else
	error = 1;
	
	return (0);
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	06 c0       	rjmp	.+12     	; 0xc74 <BMP280_GetTemperatureAndPressure+0x72>
			return (0);
		}else
		error = 2;	// temperature error ;
	}
	else
	error = 1;
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	80 93 63 04 	sts	0x0463, r24
	
	return (0);
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	01 c0       	rjmp	.+2      	; 0xc74 <BMP280_GetTemperatureAndPressure+0x72>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
		if(result){
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
			if(result)return (1);
     c72:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	error = 1;
	
	return (0);
}
     c74:	28 96       	adiw	r28, 0x08	; 8
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	de bf       	out	0x3e, r29	; 62
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	cd bf       	out	0x3d, r28	; 61
     c80:	df 91       	pop	r29
     c82:	cf 91       	pop	r28
     c84:	1f 91       	pop	r17
     c86:	0f 91       	pop	r16
     c88:	ff 90       	pop	r15
     c8a:	ef 90       	pop	r14
     c8c:	08 95       	ret

00000c8e <ADC_Init>:

/*************************************************************************//**
  @brief Initializes the ADC
*****************************************************************************/
void ADC_Init(void) {
	ADCSRA = (1<<ADEN)|(4<<ADPS0); //enables the ADC module, CPU clock prescale=16
     c8e:	84 e8       	ldi	r24, 0x84	; 132
     c90:	80 93 7a 00 	sts	0x007A, r24
	
	ADCSRC = 0x05|(1<<ADTHT0)|(1<<ADTHT1); //ADSUT=5
     c94:	85 ec       	ldi	r24, 0xC5	; 197
     c96:	80 93 77 00 	sts	0x0077, r24
	while((ADCSRB&(1<<AVDDOK))==0);
     c9a:	eb e7       	ldi	r30, 0x7B	; 123
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	88 23       	and	r24, r24
     ca2:	ec f7       	brge	.-6      	; 0xc9e <ADC_Init+0x10>
}
     ca4:	08 95       	ret

00000ca6 <__vector_13>:
#ifdef ATMEL

static int timer_usage = 0;

ISR(TIMER2_COMPA_vect)
{
     ca6:	1f 92       	push	r1
     ca8:	0f 92       	push	r0
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	0f 92       	push	r0
     cae:	11 24       	eor	r1, r1
     cb0:	2f 93       	push	r18
     cb2:	3f 93       	push	r19
     cb4:	4f 93       	push	r20
     cb6:	5f 93       	push	r21
     cb8:	6f 93       	push	r22
     cba:	7f 93       	push	r23
     cbc:	8f 93       	push	r24
     cbe:	9f 93       	push	r25
     cc0:	af 93       	push	r26
     cc2:	bf 93       	push	r27
     cc4:	ef 93       	push	r30
     cc6:	ff 93       	push	r31
	timer_usage ++;
     cc8:	80 91 84 04 	lds	r24, 0x0484
     ccc:	90 91 85 04 	lds	r25, 0x0485
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	90 93 85 04 	sts	0x0485, r25
     cd6:	80 93 84 04 	sts	0x0484, r24
	printf("count1 = %d\n",timer_usage);
     cda:	9f 93       	push	r25
     cdc:	8f 93       	push	r24
     cde:	8a e7       	ldi	r24, 0x7A	; 122
     ce0:	92 e0       	ldi	r25, 0x02	; 2
     ce2:	9f 93       	push	r25
     ce4:	8f 93       	push	r24
     ce6:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <printf>
	handle_timeoutq_event();
     cea:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <handle_timeoutq_event>
     cee:	0f 90       	pop	r0
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
}
     cf6:	ff 91       	pop	r31
     cf8:	ef 91       	pop	r30
     cfa:	bf 91       	pop	r27
     cfc:	af 91       	pop	r26
     cfe:	9f 91       	pop	r25
     d00:	8f 91       	pop	r24
     d02:	7f 91       	pop	r23
     d04:	6f 91       	pop	r22
     d06:	5f 91       	pop	r21
     d08:	4f 91       	pop	r20
     d0a:	3f 91       	pop	r19
     d0c:	2f 91       	pop	r18
     d0e:	0f 90       	pop	r0
     d10:	0f be       	out	0x3f, r0	; 63
     d12:	0f 90       	pop	r0
     d14:	1f 90       	pop	r1
     d16:	18 95       	reti

00000d18 <init_Event_Timer>:

/* Initialization Routine Example 3 : Timer 2 Async operation */
/* Clock for Timer 2 is taken from crystal connected to TOSC pins */
void init_Event_Timer(void)
{
	timer_usage = 0;
     d18:	10 92 85 04 	sts	0x0485, r1
     d1c:	10 92 84 04 	sts	0x0484, r1
	/* Select clock source as crystal on TOSCn pins */
	ASSR |= 1 << AS2;
     d20:	e6 eb       	ldi	r30, 0xB6	; 182
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	80 81       	ld	r24, Z
     d26:	80 62       	ori	r24, 0x20	; 32
     d28:	80 83       	st	Z, r24
	/* Clear Timer on compare match. Toggle OC2A on Compare Match */
	TCCR2A = (1<<COM2A0) | (1<<WGM21);
     d2a:	82 e4       	ldi	r24, 0x42	; 66
     d2c:	80 93 b0 00 	sts	0x00B0, r24
	/* Timer Clock = 32768 Hz / 1024 */
	TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
     d30:	87 e0       	ldi	r24, 0x07	; 7
     d32:	80 93 b1 00 	sts	0x00B1, r24
     d36:	08 95       	ret

00000d38 <init_set_timer>:
}


void general_set_timer( int period_number )
{
    OCR2A = period_number * APERIOD ;
     d38:	88 0f       	add	r24, r24
     d3a:	88 0f       	add	r24, r24
     d3c:	88 0f       	add	r24, r24
     d3e:	80 93 b3 00 	sts	0x00B3, r24
{
    general_set_timer( period_number );
    /* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) 
     d42:	e6 eb       	ldi	r30, 0xB6	; 182
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	8f 71       	andi	r24, 0x1F	; 31
     d4a:	e9 f7       	brne	.-6      	; 0xd46 <init_set_timer+0xe>
		| (1 << TCR2BUB) | (1<< TCN2UB))));
	/* Clear pending interrupts */
	TIFR2  = (1 << TOV2) | (1 << OCF2A) | (1 << OCF2B);
     d4c:	87 e0       	ldi	r24, 0x07	; 7
     d4e:	87 bb       	out	0x17, r24	; 23
	/* Enable Timer 2 Output Compare Match Interrupt */
	TIMSK2 = (1 << OCIE2A);
     d50:	82 e0       	ldi	r24, 0x02	; 2
     d52:	80 93 70 00 	sts	0x0070, r24
     d56:	08 95       	ret

00000d58 <set_timer>:
}

void set_timer( int period_number )
{
     d58:	cf 93       	push	r28
     d5a:	df 93       	push	r29
     d5c:	ec 01       	movw	r28, r24
	printf("set timer gap = %d\n\n", period_number);
     d5e:	df 93       	push	r29
     d60:	cf 93       	push	r28
     d62:	87 e8       	ldi	r24, 0x87	; 135
     d64:	92 e0       	ldi	r25, 0x02	; 2
     d66:	9f 93       	push	r25
     d68:	8f 93       	push	r24
     d6a:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <printf>
	if( period_number == 0)
     d6e:	0f 90       	pop	r0
     d70:	0f 90       	pop	r0
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	20 97       	sbiw	r28, 0x00	; 0
     d78:	79 f0       	breq	.+30     	; 0xd98 <set_timer+0x40>
	{
		/* we won't every set a zero timeout, will we ? */
		return;
	}
    if( timer_usage == 0 )
     d7a:	80 91 84 04 	lds	r24, 0x0484
     d7e:	90 91 85 04 	lds	r25, 0x0485
     d82:	89 2b       	or	r24, r25
     d84:	21 f4       	brne	.+8      	; 0xd8e <set_timer+0x36>
    {
        init_set_timer( period_number );
     d86:	ce 01       	movw	r24, r28
     d88:	0e 94 9c 06 	call	0xd38	; 0xd38 <init_set_timer>
     d8c:	05 c0       	rjmp	.+10     	; 0xd98 <set_timer+0x40>
}


void general_set_timer( int period_number )
{
    OCR2A = period_number * APERIOD ;
     d8e:	cc 0f       	add	r28, r28
     d90:	cc 0f       	add	r28, r28
     d92:	cc 0f       	add	r28, r28
     d94:	c0 93 b3 00 	sts	0x00B3, r28
    }
    else
    {
        general_set_timer( period_number );
    }
}	
     d98:	df 91       	pop	r29
     d9a:	cf 91       	pop	r28
     d9c:	08 95       	ret

00000d9e <PWR_Init>:

/*************************************************************************//**
  @brief Initializes the power management system
*****************************************************************************/
void PWR_Init(void){
	DDRD |= 0b11000000;
     d9e:	8a b1       	in	r24, 0x0a	; 10
     da0:	80 6c       	ori	r24, 0xC0	; 192
     da2:	8a b9       	out	0x0a, r24	; 10
     da4:	08 95       	ret

00000da6 <PWR_TurnOn5V>:

/*************************************************************************//**
  @brief Turns on the 5V power supply
*****************************************************************************/
void PWR_TurnOn5V(void){
	PORTD |= 0b10000000;
     da6:	5f 9a       	sbi	0x0b, 7	; 11
     da8:	08 95       	ret

00000daa <SPI_SlaveInit>:

unsigned char buffer[16];

void SPI_SlaveInit(void)
{
	DDRB |= (1<<PORTB3); //Set MISO output
     daa:	23 9a       	sbi	0x04, 3	; 4
	SPCR = (1<<SPE); //Enable SPI
     dac:	80 e4       	ldi	r24, 0x40	; 64
     dae:	8c bd       	out	0x2c, r24	; 44
     db0:	08 95       	ret

00000db2 <TWI_Init>:
/*************************************************************************//**
  @brief Initializes the 2-wire Serial Interface as a master
  @param[in] freq SCL frequency (Do not exceed 400kHz)
  @return Status (@c 0 on failure, nonzero otherwise)
*****************************************************************************/
char TWI_Init(unsigned long freq){
     db2:	9b 01       	movw	r18, r22
     db4:	ac 01       	movw	r20, r24
	//printf("TWI_Init");
	TWSR=0x00;
     db6:	10 92 b9 00 	sts	0x00B9, r1
	TWBR=(unsigned char)(((F_CPU/freq)-16UL)/8UL); //Compute settings value and set frequency
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	74 e2       	ldi	r23, 0x24	; 36
     dbe:	84 ef       	ldi	r24, 0xF4	; 244
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e 94 79 12 	call	0x24f2	; 0x24f2 <__udivmodsi4>
     dc6:	da 01       	movw	r26, r20
     dc8:	c9 01       	movw	r24, r18
     dca:	40 97       	sbiw	r24, 0x10	; 16
     dcc:	a1 09       	sbc	r26, r1
     dce:	b1 09       	sbc	r27, r1
     dd0:	68 94       	set
     dd2:	12 f8       	bld	r1, 2
     dd4:	b6 95       	lsr	r27
     dd6:	a7 95       	ror	r26
     dd8:	97 95       	ror	r25
     dda:	87 95       	ror	r24
     ddc:	16 94       	lsr	r1
     dde:	d1 f7       	brne	.-12     	; 0xdd4 <TWI_Init+0x22>
     de0:	80 93 b8 00 	sts	0x00B8, r24
	TWCR=(1 << TWEN);
     de4:	84 e0       	ldi	r24, 0x04	; 4
     de6:	80 93 bc 00 	sts	0x00BC, r24
	
	//TWAR=0; //Disable slave mode
	
	return 1; //May want to actually check for success here
}
     dea:	81 e0       	ldi	r24, 0x01	; 1
     dec:	08 95       	ret

00000dee <TWI_WriteByte>:
  @param[in] data byte to send
  @return Status code, TWI_SENT_ACK or TWI_SENT_NACK on success
*****************************************************************************/
char TWI_WriteByte(unsigned char data){
	//printf("TWI_WriteByte");
	TWDR = data; //Stage the data to send
     dee:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
     df2:	84 e8       	ldi	r24, 0x84	; 132
     df4:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);//Send the data
     df8:	ec eb       	ldi	r30, 0xBC	; 188
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	88 23       	and	r24, r24
     e00:	ec f7       	brge	.-6      	; 0xdfc <TWI_WriteByte+0xe>
	
	return TWSR&TWSR_MASK;//Return the status code
     e02:	80 91 b9 00 	lds	r24, 0x00B9
}
     e06:	88 7f       	andi	r24, 0xF8	; 248
     e08:	08 95       	ret

00000e0a <TWI_BeginWrite>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAW_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginWrite(unsigned char address){
	//printf("TWI_BeginWrite");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
     e0a:	94 ee       	ldi	r25, 0xE4	; 228
     e0c:	90 93 bc 00 	sts	0x00BC, r25
	int i=0;
	while ((TWCR & (1<<TWINT)) == 0);
     e10:	ec eb       	ldi	r30, 0xBC	; 188
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	90 81       	ld	r25, Z
     e16:	99 23       	and	r25, r25
     e18:	ec f7       	brge	.-6      	; 0xe14 <TWI_BeginWrite+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e1a:	ef e9       	ldi	r30, 0x9F	; 159
     e1c:	ff e0       	ldi	r31, 0x0F	; 15
     e1e:	31 97       	sbiw	r30, 0x01	; 1
     e20:	f1 f7       	brne	.-4      	; 0xe1e <TWI_BeginWrite+0x14>
     e22:	00 c0       	rjmp	.+0      	; 0xe24 <TWI_BeginWrite+0x1a>
     e24:	00 00       	nop
	_delay_ms(1);
	char stat = (TWSR & TWSR_MASK);
     e26:	90 91 b9 00 	lds	r25, 0x00B9
     e2a:	98 7f       	andi	r25, 0xF8	; 248
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
     e2c:	98 30       	cpi	r25, 0x08	; 8
     e2e:	31 f0       	breq	.+12     	; 0xe3c <TWI_BeginWrite+0x32>
     e30:	90 31       	cpi	r25, 0x10	; 16
     e32:	21 f0       	breq	.+8      	; 0xe3c <TWI_BeginWrite+0x32>
     e34:	80 91 b9 00 	lds	r24, 0x00B9
     e38:	88 7f       	andi	r24, 0xF8	; 248
     e3a:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) & SLAW_MASK); //reset bit 0 to send a write bit, send
     e3c:	88 0f       	add	r24, r24
     e3e:	0e 94 f7 06 	call	0xdee	; 0xdee <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	return stat;//Return the status code
}
     e42:	08 95       	ret

00000e44 <TWI_BeginRead>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAR_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginRead(unsigned char address){
	//printf("TWI_BeginRead");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
     e44:	94 ee       	ldi	r25, 0xE4	; 228
     e46:	90 93 bc 00 	sts	0x00BC, r25
	while ((TWCR & (1<<TWINT)) == 0);
     e4a:	ec eb       	ldi	r30, 0xBC	; 188
     e4c:	f0 e0       	ldi	r31, 0x00	; 0
     e4e:	90 81       	ld	r25, Z
     e50:	99 23       	and	r25, r25
     e52:	ec f7       	brge	.-6      	; 0xe4e <TWI_BeginRead+0xa>
	
	char stat = (TWSR & TWSR_MASK);
     e54:	90 91 b9 00 	lds	r25, 0x00B9
     e58:	98 7f       	andi	r25, 0xF8	; 248
	//printf("0x%1x",(unsigned)stat);
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
     e5a:	98 30       	cpi	r25, 0x08	; 8
     e5c:	31 f0       	breq	.+12     	; 0xe6a <TWI_BeginRead+0x26>
     e5e:	90 31       	cpi	r25, 0x10	; 16
     e60:	21 f0       	breq	.+8      	; 0xe6a <TWI_BeginRead+0x26>
     e62:	80 91 b9 00 	lds	r24, 0x00B9
     e66:	88 7f       	andi	r24, 0xF8	; 248
     e68:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) | SLAR_MASK); //set bit 0 to send a read bit and send it
     e6a:	88 0f       	add	r24, r24
     e6c:	81 60       	ori	r24, 0x01	; 1
     e6e:	0e 94 f7 06 	call	0xdee	; 0xdee <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	
	return stat;//Return the status code
}
     e72:	08 95       	ret

00000e74 <TWI_ReadAck>:
/*************************************************************************//**
  @brief Receives a byte over TWI and returns an ACK
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_ACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadAck(unsigned char *data){
     e74:	dc 01       	movw	r26, r24
	//printf("TWI_ReadAck");
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Start receiving, ending with an ACK
     e76:	84 ec       	ldi	r24, 0xC4	; 196
     e78:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);
     e7c:	ec eb       	ldi	r30, 0xBC	; 188
     e7e:	f0 e0       	ldi	r31, 0x00	; 0
     e80:	90 81       	ld	r25, Z
     e82:	99 23       	and	r25, r25
     e84:	ec f7       	brge	.-6      	; 0xe80 <TWI_ReadAck+0xc>
	*data=TWDR; //Store the data
     e86:	80 91 bb 00 	lds	r24, 0x00BB
     e8a:	8c 93       	st	X, r24
	
	return TWSR&TWSR_MASK;//Return the status code
     e8c:	80 91 b9 00 	lds	r24, 0x00B9
}
     e90:	88 7f       	andi	r24, 0xF8	; 248
     e92:	08 95       	ret

00000e94 <TWI_ReadNack>:
/*************************************************************************//**
  @brief Receives a byte over TWI and returns a NACK
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_NACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadNack(unsigned char *data){
     e94:	dc 01       	movw	r26, r24
	//printf("TWI_ReadNack");
	TWCR = (1<<TWINT)|(1<<TWEN); //Start receiving, ending with a NACK
     e96:	84 e8       	ldi	r24, 0x84	; 132
     e98:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);
     e9c:	ec eb       	ldi	r30, 0xBC	; 188
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	90 81       	ld	r25, Z
     ea2:	99 23       	and	r25, r25
     ea4:	ec f7       	brge	.-6      	; 0xea0 <TWI_ReadNack+0xc>
	*data=TWDR; //Store the data
     ea6:	80 91 bb 00 	lds	r24, 0x00BB
     eaa:	8c 93       	st	X, r24
	
	return TWSR&TWSR_MASK;//Return the status code
     eac:	80 91 b9 00 	lds	r24, 0x00B9
}
     eb0:	88 7f       	andi	r24, 0xF8	; 248
     eb2:	08 95       	ret

00000eb4 <TWI_Stop>:
  @brief Sends a Stop bit, be sure to send a Start bit before future interactions on the bus
  @return Status code, should always be nonzero
*****************************************************************************/
char TWI_Stop(void){
	//printf("TWI_Stop");
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     eb4:	84 e9       	ldi	r24, 0x94	; 148
     eb6:	80 93 bc 00 	sts	0x00BC, r24
	return 1;
}
     eba:	81 e0       	ldi	r24, 0x01	; 1
     ebc:	08 95       	ret

00000ebe <TWI_Read>:
  @param[in] amount Number of bytes to recieve
  @param[in] whether or not to send an ACK on the last byte, sends NACK if false
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
     ebe:	9f 92       	push	r9
     ec0:	af 92       	push	r10
     ec2:	bf 92       	push	r11
     ec4:	cf 92       	push	r12
     ec6:	df 92       	push	r13
     ec8:	ef 92       	push	r14
     eca:	ff 92       	push	r15
     ecc:	0f 93       	push	r16
     ece:	1f 93       	push	r17
     ed0:	cf 93       	push	r28
     ed2:	df 93       	push	r29
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
     ed4:	16 16       	cp	r1, r22
     ed6:	17 06       	cpc	r1, r23
     ed8:	0c f5       	brge	.+66     	; 0xf1c <TWI_Read+0x5e>
     eda:	94 2e       	mov	r9, r20
     edc:	8b 01       	movw	r16, r22
     ede:	7c 01       	movw	r14, r24
     ee0:	c0 e0       	ldi	r28, 0x00	; 0
     ee2:	d0 e0       	ldi	r29, 0x00	; 0
		if((ack==false) && ((amount-1)==i)){
     ee4:	6b 01       	movw	r12, r22
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	c8 1a       	sub	r12, r24
     eea:	d1 08       	sbc	r13, r1
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
     eec:	57 01       	movw	r10, r14
     eee:	ac 0c       	add	r10, r12
     ef0:	bd 1c       	adc	r11, r13
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
		if((ack==false) && ((amount-1)==i)){
     ef2:	91 10       	cpse	r9, r1
     ef4:	07 c0       	rjmp	.+14     	; 0xf04 <TWI_Read+0x46>
     ef6:	cc 16       	cp	r12, r28
     ef8:	dd 06       	cpc	r13, r29
     efa:	21 f4       	brne	.+8      	; 0xf04 <TWI_Read+0x46>
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
     efc:	c5 01       	movw	r24, r10
     efe:	0e 94 4a 07 	call	0xe94	; 0xe94 <TWI_ReadNack>
     f02:	05 c0       	rjmp	.+10     	; 0xf0e <TWI_Read+0x50>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}else{
			status=TWI_ReadAck(&data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
     f04:	c7 01       	movw	r24, r14
     f06:	8c 0f       	add	r24, r28
     f08:	9d 1f       	adc	r25, r29
     f0a:	0e 94 3a 07 	call	0xe74	; 0xe74 <TWI_ReadAck>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}
		//printf("A");
		if(status!=TWI_REC_ACK)return status; //If NACK was selected, returning here is fine since the loop is already ending
     f0e:	80 35       	cpi	r24, 0x50	; 80
     f10:	31 f4       	brne	.+12     	; 0xf1e <TWI_Read+0x60>
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
     f12:	21 96       	adiw	r28, 0x01	; 1
     f14:	c0 17       	cp	r28, r16
     f16:	d1 07       	cpc	r29, r17
     f18:	61 f7       	brne	.-40     	; 0xef2 <TWI_Read+0x34>
     f1a:	01 c0       	rjmp	.+2      	; 0xf1e <TWI_Read+0x60>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
     f1c:	80 e0       	ldi	r24, 0x00	; 0
		//will return if something goes wrong partway through
		//printf("B");
	}
	//printf("0x%1x",(unsigned)status);
	return status;
}
     f1e:	df 91       	pop	r29
     f20:	cf 91       	pop	r28
     f22:	1f 91       	pop	r17
     f24:	0f 91       	pop	r16
     f26:	ff 90       	pop	r15
     f28:	ef 90       	pop	r14
     f2a:	df 90       	pop	r13
     f2c:	cf 90       	pop	r12
     f2e:	bf 90       	pop	r11
     f30:	af 90       	pop	r10
     f32:	9f 90       	pop	r9
     f34:	08 95       	ret

00000f36 <TWI_Write>:
  @param[in] *data Pointer to an array of bytes to send
  @param[in] amount Number of bytes to send
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
     f36:	0f 93       	push	r16
     f38:	1f 93       	push	r17
     f3a:	cf 93       	push	r28
     f3c:	df 93       	push	r29
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
     f3e:	16 16       	cp	r1, r22
     f40:	17 06       	cpc	r1, r23
     f42:	6c f4       	brge	.+26     	; 0xf5e <TWI_Write+0x28>
     f44:	8c 01       	movw	r16, r24
     f46:	ec 01       	movw	r28, r24
     f48:	06 0f       	add	r16, r22
     f4a:	17 1f       	adc	r17, r23
		status=TWI_WriteByte(data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
     f4c:	89 91       	ld	r24, Y+
     f4e:	0e 94 f7 06 	call	0xdee	; 0xdee <TWI_WriteByte>
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
     f52:	88 32       	cpi	r24, 0x28	; 40
     f54:	29 f4       	brne	.+10     	; 0xf60 <TWI_Write+0x2a>
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
     f56:	c0 17       	cp	r28, r16
     f58:	d1 07       	cpc	r29, r17
     f5a:	c1 f7       	brne	.-16     	; 0xf4c <TWI_Write+0x16>
     f5c:	01 c0       	rjmp	.+2      	; 0xf60 <TWI_Write+0x2a>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
     f5e:	80 e0       	ldi	r24, 0x00	; 0
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
		//will return if something goes wrong partway through
	}
	return status;
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	1f 91       	pop	r17
     f66:	0f 91       	pop	r16
     f68:	08 95       	ret

00000f6a <USART0_Init>:
  @brief Initializes USART0 in asynchronous UART mode, 8 bit data, 1 stop bit
  @param[in] desired baud rate (configuration values computed using F_CPU)
*****************************************************************************/
void USART0_Init(unsigned long baud){
	
	stdout = &USART0_stdout; //make stdout print to USART0
     f6a:	26 e0       	ldi	r18, 0x06	; 6
     f6c:	32 e0       	ldi	r19, 0x02	; 2
     f6e:	30 93 e1 08 	sts	0x08E1, r19
     f72:	20 93 e0 08 	sts	0x08E0, r18
	
	//Compute UBRR for baudrate setting
	unsigned short ubrr=(unsigned short)((F_CPU/(baud*16UL))-1);
     f76:	dc 01       	movw	r26, r24
     f78:	cb 01       	movw	r24, r22
     f7a:	88 0f       	add	r24, r24
     f7c:	99 1f       	adc	r25, r25
     f7e:	aa 1f       	adc	r26, r26
     f80:	bb 1f       	adc	r27, r27
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	aa 1f       	adc	r26, r26
     f88:	bb 1f       	adc	r27, r27
     f8a:	9c 01       	movw	r18, r24
     f8c:	ad 01       	movw	r20, r26
     f8e:	22 0f       	add	r18, r18
     f90:	33 1f       	adc	r19, r19
     f92:	44 1f       	adc	r20, r20
     f94:	55 1f       	adc	r21, r21
     f96:	22 0f       	add	r18, r18
     f98:	33 1f       	adc	r19, r19
     f9a:	44 1f       	adc	r20, r20
     f9c:	55 1f       	adc	r21, r21
     f9e:	60 e0       	ldi	r22, 0x00	; 0
     fa0:	74 e2       	ldi	r23, 0x24	; 36
     fa2:	84 ef       	ldi	r24, 0xF4	; 244
     fa4:	90 e0       	ldi	r25, 0x00	; 0
     fa6:	0e 94 79 12 	call	0x24f2	; 0x24f2 <__udivmodsi4>
     faa:	21 50       	subi	r18, 0x01	; 1
     fac:	31 09       	sbc	r19, r1
	
	//Set BAUD rate.
	UBRR0H = (unsigned char) (ubrr >> 8);
     fae:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) ubrr;
     fb2:	20 93 c4 00 	sts	0x00C4, r18
	/*Set frame format. 8 data bit(settings bits UCSZ00 and UCSZ01  UCSR0B), 1 stop bit(by default and need not to be worried about). 
	The UCSZ01:0 bits combined with the UCSZ02 bit in UCSR0B sets the number of data
	bits (Character Size) in the frame that the Receiver and Transmitter use. 
	If a change on frame format is needed, make sure to modify UCSR0B register above accordingly.
	See datasheet pg. 390.*/
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
     fb6:	86 e0       	ldi	r24, 0x06	; 6
     fb8:	80 93 c2 00 	sts	0x00C2, r24
	
	//Enable receiver and transmitter. Enable the USART Receive Complete interrupt(RXCIE).
	//UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0));
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);//Enable RX/TX, no interrupts
     fbc:	88 e1       	ldi	r24, 0x18	; 24
     fbe:	80 93 c1 00 	sts	0x00C1, r24
     fc2:	08 95       	ret

00000fc4 <USART0_Transmit>:
Function contains busy loops for simplicity in debugging. Not production code.
  @brief Transmits a byte via USART0
  @param[in] data byte to be transmitted
*****************************************************************************/
void USART0_Transmit(unsigned char data){
	while(!(UCSR0A & (1 << UDRE0))); //Wait for the empty transmit buffer. (Waiting UDR0 to be empty.)
     fc4:	e0 ec       	ldi	r30, 0xC0	; 192
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	90 81       	ld	r25, Z
     fca:	95 ff       	sbrs	r25, 5
     fcc:	fd cf       	rjmp	.-6      	; 0xfc8 <USART0_Transmit+0x4>
		UDR0 = data;			//store the data in the USART Data Register
     fce:	80 93 c6 00 	sts	0x00C6, r24
     fd2:	08 95       	ret

00000fd4 <USART0_putchar_printf>:
  @brief Called when stdout is being printed to USART0 (this is set up at runtime)
  @param[in] var byte to transmit
  @param[in/out] *stream Pointer to a stdio.h FILE io stream
  @return Status
*****************************************************************************/
int USART0_putchar_printf(char var, FILE *stream) {
     fd4:	cf 93       	push	r28
     fd6:	c8 2f       	mov	r28, r24
	if (var == '\n') USART0_Transmit('\r');
     fd8:	8a 30       	cpi	r24, 0x0A	; 10
     fda:	19 f4       	brne	.+6      	; 0xfe2 <USART0_putchar_printf+0xe>
     fdc:	8d e0       	ldi	r24, 0x0D	; 13
     fde:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <USART0_Transmit>
	USART0_Transmit(var);
     fe2:	8c 2f       	mov	r24, r28
     fe4:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <USART0_Transmit>
	return 0;
}
     fe8:	80 e0       	ldi	r24, 0x00	; 0
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	cf 91       	pop	r28
     fee:	08 95       	ret

00000ff0 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     ff0:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     ff2:	0f b6       	in	r0, 0x3f	; 63
     ff4:	f8 94       	cli
     ff6:	a8 95       	wdr
     ff8:	80 91 60 00 	lds	r24, 0x0060
     ffc:	88 61       	ori	r24, 0x18	; 24
     ffe:	80 93 60 00 	sts	0x0060, r24
    1002:	10 92 60 00 	sts	0x0060, r1
    1006:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
    1008:	e1 e6       	ldi	r30, 0x61	; 97
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 e8       	ldi	r24, 0x80	; 128
    100e:	80 83       	st	Z, r24
  CLKPR = 0;
    1010:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
    1012:	78 94       	sei

  HAL_TimerInit();
    1014:	0e 94 0d 08 	call	0x101a	; 0x101a <HAL_TimerInit>
    1018:	08 95       	ret

0000101a <HAL_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_TimerInit(void)
{
  halTimerIrqCount = 0;
    101a:	10 92 b1 08 	sts	0x08B1, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
    101e:	80 e2       	ldi	r24, 0x20	; 32
    1020:	9e e4       	ldi	r25, 0x4E	; 78
    1022:	90 93 a9 00 	sts	0x00A9, r25
    1026:	80 93 a8 00 	sts	0x00A8, r24
  TCCR4B = (1 << WGM12);              // CTC mode
    102a:	e1 ea       	ldi	r30, 0xA1	; 161
    102c:	f0 e0       	ldi	r31, 0x00	; 0
    102e:	88 e0       	ldi	r24, 0x08	; 8
    1030:	80 83       	st	Z, r24
  TCCR4B |= (1 << CS11);              // Prescaler 8
    1032:	80 81       	ld	r24, Z
    1034:	82 60       	ori	r24, 0x02	; 2
    1036:	80 83       	st	Z, r24
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
    1038:	e2 e7       	ldi	r30, 0x72	; 114
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	80 81       	ld	r24, Z
    103e:	82 60       	ori	r24, 0x02	; 2
    1040:	80 83       	st	Z, r24
    1042:	08 95       	ret

00001044 <__vector_42>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    1044:	1f 92       	push	r1
    1046:	0f 92       	push	r0
    1048:	0f b6       	in	r0, 0x3f	; 63
    104a:	0f 92       	push	r0
    104c:	11 24       	eor	r1, r1
    104e:	8f 93       	push	r24
  halTimerIrqCount++;
    1050:	80 91 b1 08 	lds	r24, 0x08B1
    1054:	8f 5f       	subi	r24, 0xFF	; 255
    1056:	80 93 b1 08 	sts	0x08B1, r24
}
    105a:	8f 91       	pop	r24
    105c:	0f 90       	pop	r0
    105e:	0f be       	out	0x3f, r0	; 63
    1060:	0f 90       	pop	r0
    1062:	1f 90       	pop	r1
    1064:	18 95       	reti

00001066 <NWK_Init>:
/*************************************************************************//**
  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
  nwkIb.nwkSeqNum = 0;
    1066:	e2 eb       	ldi	r30, 0xB2	; 178
    1068:	f8 e0       	ldi	r31, 0x08	; 8
    106a:	14 82       	std	Z+4, r1	; 0x04
  nwkIb.macSeqNum = 0;
    106c:	15 82       	std	Z+5, r1	; 0x05
  nwkIb.addr = 0;
    106e:	11 82       	std	Z+1, r1	; 0x01
    1070:	10 82       	st	Z, r1
  nwkIb.lock = 0;
    1072:	17 a2       	std	Z+39, r1	; 0x27
    1074:	16 a2       	std	Z+38, r1	; 0x26
    1076:	e8 eb       	ldi	r30, 0xB8	; 184
    1078:	f8 e0       	ldi	r31, 0x08	; 8
    107a:	88 ed       	ldi	r24, 0xD8	; 216
    107c:	98 e0       	ldi	r25, 0x08	; 8

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
    nwkIb.endpoint[i] = NULL;
    107e:	11 92       	st	Z+, r1
    1080:	11 92       	st	Z+, r1
  nwkIb.nwkSeqNum = 0;
  nwkIb.macSeqNum = 0;
  nwkIb.addr = 0;
  nwkIb.lock = 0;

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
    1082:	e8 17       	cp	r30, r24
    1084:	f9 07       	cpc	r31, r25
    1086:	d9 f7       	brne	.-10     	; 0x107e <NWK_Init+0x18>
    nwkIb.endpoint[i] = NULL;

  nwkTxInit();
    1088:	0e 94 33 09 	call	0x1266	; 0x1266 <nwkTxInit>
  nwkRxInit();
    108c:	0e 94 b3 08 	call	0x1166	; 0x1166 <nwkRxInit>
  nwkFrameInit();
    1090:	0e 94 5b 08 	call	0x10b6	; 0x10b6 <nwkFrameInit>
  nwkDataReqInit();
    1094:	0e 94 56 08 	call	0x10ac	; 0x10ac <nwkDataReqInit>
    1098:	08 95       	ret

0000109a <NWK_OpenEndpoint>:
  @param[in] id Endpoint index (1-15)
  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
  nwkIb.endpoint[id] = handler;
    109a:	e8 2f       	mov	r30, r24
    109c:	f0 e0       	ldi	r31, 0x00	; 0
    109e:	ee 0f       	add	r30, r30
    10a0:	ff 1f       	adc	r31, r31
    10a2:	e8 54       	subi	r30, 0x48	; 72
    10a4:	f7 4f       	sbci	r31, 0xF7	; 247
    10a6:	71 83       	std	Z+1, r23	; 0x01
    10a8:	60 83       	st	Z, r22
    10aa:	08 95       	ret

000010ac <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
    10ac:	10 92 87 04 	sts	0x0487, r1
    10b0:	10 92 86 04 	sts	0x0486, r1
    10b4:	08 95       	ret

000010b6 <nwkFrameInit>:
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    10b6:	10 92 88 04 	sts	0x0488, r1
    10ba:	10 92 11 05 	sts	0x0511, r1
    10be:	10 92 9a 05 	sts	0x059A, r1
    10c2:	10 92 23 06 	sts	0x0623, r1
    10c6:	10 92 ac 06 	sts	0x06AC, r1
    10ca:	08 95       	ret

000010cc <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    10cc:	00 97       	sbiw	r24, 0x00	; 0
    10ce:	41 f0       	breq	.+16     	; 0x10e0 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
    10d0:	fc 01       	movw	r30, r24
    10d2:	e7 57       	subi	r30, 0x77	; 119
    10d4:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    10d6:	87 e0       	ldi	r24, 0x07	; 7
    10d8:	e5 33       	cpi	r30, 0x35	; 53
    10da:	f8 07       	cpc	r31, r24
    10dc:	18 f0       	brcs	.+6      	; 0x10e4 <nwkFrameNext+0x18>
    10de:	15 c0       	rjmp	.+42     	; 0x110a <nwkFrameNext+0x3e>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    10e0:	e8 e8       	ldi	r30, 0x88	; 136
    10e2:	f4 e0       	ldi	r31, 0x04	; 4
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    10e4:	80 81       	ld	r24, Z
    10e6:	88 23       	and	r24, r24
    10e8:	39 f0       	breq	.+14     	; 0x10f8 <nwkFrameNext+0x2c>
    10ea:	03 c0       	rjmp	.+6      	; 0x10f2 <nwkFrameNext+0x26>
    10ec:	80 81       	ld	r24, Z
    10ee:	88 23       	and	r24, r24
    10f0:	19 f0       	breq	.+6      	; 0x10f8 <nwkFrameNext+0x2c>
      return frame;
    10f2:	8e 2f       	mov	r24, r30
    10f4:	9f 2f       	mov	r25, r31
    10f6:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    10f8:	e7 57       	subi	r30, 0x77	; 119
    10fa:	ff 4f       	sbci	r31, 0xFF	; 255
    10fc:	87 e0       	ldi	r24, 0x07	; 7
    10fe:	e5 33       	cpi	r30, 0x35	; 53
    1100:	f8 07       	cpc	r31, r24
    1102:	a0 f3       	brcs	.-24     	; 0x10ec <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    1104:	80 e0       	ldi	r24, 0x00	; 0
    1106:	90 e0       	ldi	r25, 0x00	; 0
    1108:	08 95       	ret
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	90 e0       	ldi	r25, 0x00	; 0
}
    110e:	08 95       	ret

00001110 <nwkRxServiceDataInd>:
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    1110:	dc 01       	movw	r26, r24
    1112:	19 96       	adiw	r26, 0x09	; 9
    1114:	2c 91       	ld	r18, X
    1116:	19 97       	sbiw	r26, 0x09	; 9
    1118:	22 23       	and	r18, r18
    111a:	51 f0       	breq	.+20     	; 0x1130 <nwkRxServiceDataInd+0x20>
    return false;

  switch (ind->data[0])
    111c:	17 96       	adiw	r26, 0x07	; 7
    111e:	ed 91       	ld	r30, X+
    1120:	fc 91       	ld	r31, X
    1122:	18 97       	sbiw	r26, 0x08	; 8
    1124:	20 81       	ld	r18, Z
    1126:	21 11       	cpse	r18, r1
    1128:	05 c0       	rjmp	.+10     	; 0x1134 <nwkRxServiceDataInd+0x24>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
    112a:	0e 94 56 09 	call	0x12ac	; 0x12ac <nwkTxAckReceived>
    112e:	08 95       	ret
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    return false;
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	08 95       	ret
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
    1134:	80 e0       	ldi	r24, 0x00	; 0
  }
}
    1136:	08 95       	ret

00001138 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    1138:	bc 01       	movw	r22, r24
    113a:	e6 e4       	ldi	r30, 0x46	; 70
    113c:	f7 e0       	ldi	r31, 0x07	; 7
    113e:	28 e7       	ldi	r18, 0x78	; 120
    1140:	37 e0       	ldi	r19, 0x07	; 7
  bool restart = false;
    1142:	40 e0       	ldi	r20, 0x00	; 0
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    1144:	51 e0       	ldi	r21, 0x01	; 1
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    1146:	90 81       	ld	r25, Z
    1148:	99 23       	and	r25, r25
    114a:	19 f0       	breq	.+6      	; 0x1152 <nwkRxDuplicateRejectionTimerHandler+0x1a>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
    114c:	91 50       	subi	r25, 0x01	; 1
    114e:	90 83       	st	Z, r25
      restart = true;
    1150:	45 2f       	mov	r20, r21
    1152:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1154:	e2 17       	cp	r30, r18
    1156:	f3 07       	cpc	r31, r19
    1158:	b1 f7       	brne	.-20     	; 0x1146 <nwkRxDuplicateRejectionTimerHandler+0xe>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
    115a:	44 23       	and	r20, r20
    115c:	19 f0       	breq	.+6      	; 0x1164 <nwkRxDuplicateRejectionTimerHandler+0x2c>
    115e:	cb 01       	movw	r24, r22
    SYS_TimerStart(timer);
    1160:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <SYS_TimerStart>
    1164:	08 95       	ret

00001166 <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    1166:	e6 e4       	ldi	r30, 0x46	; 70
    1168:	f7 e0       	ldi	r31, 0x07	; 7
    116a:	88 e7       	ldi	r24, 0x78	; 120
    116c:	97 e0       	ldi	r25, 0x07	; 7
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
    116e:	10 82       	st	Z, r1
    1170:	35 96       	adiw	r30, 0x05	; 5
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1172:	e8 17       	cp	r30, r24
    1174:	f9 07       	cpc	r31, r25
    1176:	d9 f7       	brne	.-10     	; 0x116e <nwkRxInit+0x8>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    1178:	e5 e3       	ldi	r30, 0x35	; 53
    117a:	f7 e0       	ldi	r31, 0x07	; 7
    117c:	84 e6       	ldi	r24, 0x64	; 100
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	a0 e0       	ldi	r26, 0x00	; 0
    1182:	b0 e0       	ldi	r27, 0x00	; 0
    1184:	86 83       	std	Z+6, r24	; 0x06
    1186:	97 83       	std	Z+7, r25	; 0x07
    1188:	a0 87       	std	Z+8, r26	; 0x08
    118a:	b1 87       	std	Z+9, r27	; 0x09
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    118c:	12 86       	std	Z+10, r1	; 0x0a
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
    118e:	8c e9       	ldi	r24, 0x9C	; 156
    1190:	98 e0       	ldi	r25, 0x08	; 8
    1192:	94 87       	std	Z+12, r25	; 0x0c
    1194:	83 87       	std	Z+11, r24	; 0x0b

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
    1196:	68 e8       	ldi	r22, 0x88	; 136
    1198:	78 e0       	ldi	r23, 0x08	; 8
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	0e 94 4d 08 	call	0x109a	; 0x109a <NWK_OpenEndpoint>
    11a0:	08 95       	ret

000011a2 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    11a2:	ef 92       	push	r14
    11a4:	ff 92       	push	r15
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	cf 93       	push	r28
    11ac:	7c 01       	movw	r14, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    11ae:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    11b4:	01 e0       	ldi	r16, 0x01	; 1

      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    11b6:	c3 e1       	ldi	r28, 0x13	; 19
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    11b8:	13 c0       	rjmp	.+38     	; 0x11e0 <nwkTxDelayTimerHandler+0x3e>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    11ba:	fc 01       	movw	r30, r24
    11bc:	20 81       	ld	r18, Z
    11be:	21 31       	cpi	r18, 0x11	; 17
    11c0:	79 f4       	brne	.+30     	; 0x11e0 <nwkTxDelayTimerHandler+0x3e>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    11c2:	ec 57       	subi	r30, 0x7C	; 124
    11c4:	ff 4f       	sbci	r31, 0xFF	; 255
    11c6:	20 81       	ld	r18, Z
    11c8:	31 81       	ldd	r19, Z+1	; 0x01
    11ca:	21 50       	subi	r18, 0x01	; 1
    11cc:	31 09       	sbc	r19, r1
    11ce:	31 83       	std	Z+1, r19	; 0x01
    11d0:	20 83       	st	Z, r18
    11d2:	23 2b       	or	r18, r19
    11d4:	21 f4       	brne	.+8      	; 0x11de <nwkTxDelayTimerHandler+0x3c>
        frame->state = NWK_TX_STATE_SEND;
    11d6:	fc 01       	movw	r30, r24
    11d8:	c0 83       	st	Z, r28

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    11da:	10 2f       	mov	r17, r16
    11dc:	01 c0       	rjmp	.+2      	; 0x11e0 <nwkTxDelayTimerHandler+0x3e>
    11de:	10 2f       	mov	r17, r16
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    11e0:	0e 94 66 08 	call	0x10cc	; 0x10cc <nwkFrameNext>
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	49 f7       	brne	.-46     	; 0x11ba <nwkTxDelayTimerHandler+0x18>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
    11e8:	11 23       	and	r17, r17
    11ea:	19 f0       	breq	.+6      	; 0x11f2 <nwkTxDelayTimerHandler+0x50>
    SYS_TimerStart(timer);
    11ec:	c7 01       	movw	r24, r14
    11ee:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <SYS_TimerStart>
}
    11f2:	cf 91       	pop	r28
    11f4:	1f 91       	pop	r17
    11f6:	0f 91       	pop	r16
    11f8:	ff 90       	pop	r15
    11fa:	ef 90       	pop	r14
    11fc:	08 95       	ret

000011fe <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    11fe:	ef 92       	push	r14
    1200:	ff 92       	push	r15
    1202:	0f 93       	push	r16
    1204:	1f 93       	push	r17
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
    120a:	7c 01       	movw	r14, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    120c:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    1212:	01 e0       	ldi	r16, 0x01	; 1

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    1214:	d7 e1       	ldi	r29, 0x17	; 23
  frame->tx.status = status;
    1216:	c0 e1       	ldi	r28, 0x10	; 16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    1218:	16 c0       	rjmp	.+44     	; 0x1246 <nwkTxAckWaitTimerHandler+0x48>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    121a:	fc 01       	movw	r30, r24
    121c:	20 81       	ld	r18, Z
    121e:	26 31       	cpi	r18, 0x16	; 22
    1220:	91 f4       	brne	.+36     	; 0x1246 <nwkTxAckWaitTimerHandler+0x48>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    1222:	ec 57       	subi	r30, 0x7C	; 124
    1224:	ff 4f       	sbci	r31, 0xFF	; 255
    1226:	20 81       	ld	r18, Z
    1228:	31 81       	ldd	r19, Z+1	; 0x01
    122a:	21 50       	subi	r18, 0x01	; 1
    122c:	31 09       	sbc	r19, r1
    122e:	31 83       	std	Z+1, r19	; 0x01
    1230:	20 83       	st	Z, r18
    1232:	23 2b       	or	r18, r19
    1234:	39 f4       	brne	.+14     	; 0x1244 <nwkTxAckWaitTimerHandler+0x46>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    1236:	fc 01       	movw	r30, r24
    1238:	d0 83       	st	Z, r29
  frame->tx.status = status;
    123a:	ed 57       	subi	r30, 0x7D	; 125
    123c:	ff 4f       	sbci	r31, 0xFF	; 255
    123e:	c0 83       	st	Z, r28

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    1240:	10 2f       	mov	r17, r16
    1242:	01 c0       	rjmp	.+2      	; 0x1246 <nwkTxAckWaitTimerHandler+0x48>
    1244:	10 2f       	mov	r17, r16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    1246:	0e 94 66 08 	call	0x10cc	; 0x10cc <nwkFrameNext>
    124a:	00 97       	sbiw	r24, 0x00	; 0
    124c:	31 f7       	brne	.-52     	; 0x121a <nwkTxAckWaitTimerHandler+0x1c>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
    124e:	11 23       	and	r17, r17
    1250:	19 f0       	breq	.+6      	; 0x1258 <nwkTxAckWaitTimerHandler+0x5a>
    SYS_TimerStart(timer);
    1252:	c7 01       	movw	r24, r14
    1254:	0e 94 e5 0b 	call	0x17ca	; 0x17ca <SYS_TimerStart>
}
    1258:	df 91       	pop	r29
    125a:	cf 91       	pop	r28
    125c:	1f 91       	pop	r17
    125e:	0f 91       	pop	r16
    1260:	ff 90       	pop	r15
    1262:	ef 90       	pop	r14
    1264:	08 95       	ret

00001266 <nwkTxInit>:
/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
    1266:	10 92 8f 07 	sts	0x078F, r1
    126a:	10 92 8e 07 	sts	0x078E, r1

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    126e:	e1 e8       	ldi	r30, 0x81	; 129
    1270:	f7 e0       	ldi	r31, 0x07	; 7
    1272:	82 e3       	ldi	r24, 0x32	; 50
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	a0 e0       	ldi	r26, 0x00	; 0
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	86 83       	std	Z+6, r24	; 0x06
    127c:	97 83       	std	Z+7, r25	; 0x07
    127e:	a0 87       	std	Z+8, r26	; 0x08
    1280:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1282:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    1284:	8f ef       	ldi	r24, 0xFF	; 255
    1286:	98 e0       	ldi	r25, 0x08	; 8
    1288:	94 87       	std	Z+12, r25	; 0x0c
    128a:	83 87       	std	Z+11, r24	; 0x0b

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    128c:	e4 e7       	ldi	r30, 0x74	; 116
    128e:	f7 e0       	ldi	r31, 0x07	; 7
    1290:	8a e0       	ldi	r24, 0x0A	; 10
    1292:	90 e0       	ldi	r25, 0x00	; 0
    1294:	a0 e0       	ldi	r26, 0x00	; 0
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	86 83       	std	Z+6, r24	; 0x06
    129a:	97 83       	std	Z+7, r25	; 0x07
    129c:	a0 87       	std	Z+8, r26	; 0x08
    129e:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    12a0:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    12a2:	81 ed       	ldi	r24, 0xD1	; 209
    12a4:	98 e0       	ldi	r25, 0x08	; 8
    12a6:	94 87       	std	Z+12, r25	; 0x0c
    12a8:	83 87       	std	Z+11, r24	; 0x0b
    12aa:	08 95       	ret

000012ac <nwkTxAckReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    12ac:	cf 93       	push	r28
    12ae:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    12b0:	fc 01       	movw	r30, r24
    12b2:	c7 81       	ldd	r28, Z+7	; 0x07
    12b4:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    12b6:	81 85       	ldd	r24, Z+9	; 0x09
    12b8:	83 30       	cpi	r24, 0x03	; 3
    12ba:	c9 f4       	brne	.+50     	; 0x12ee <nwkTxAckReceived+0x42>
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	10 c0       	rjmp	.+32     	; 0x12e2 <nwkTxAckReceived+0x36>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
    12c2:	fc 01       	movw	r30, r24
    12c4:	20 81       	ld	r18, Z
    12c6:	26 31       	cpi	r18, 0x16	; 22
    12c8:	61 f4       	brne	.+24     	; 0x12e2 <nwkTxAckReceived+0x36>
    12ca:	34 85       	ldd	r19, Z+12	; 0x0c
    12cc:	29 81       	ldd	r18, Y+1	; 0x01
    12ce:	32 13       	cpse	r19, r18
    12d0:	08 c0       	rjmp	.+16     	; 0x12e2 <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    12d2:	27 e1       	ldi	r18, 0x17	; 23
    12d4:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    12d6:	2a 81       	ldd	r18, Y+2	; 0x02
    12d8:	ea 57       	subi	r30, 0x7A	; 122
    12da:	ff 4f       	sbci	r31, 0xFF	; 255
    12dc:	20 83       	st	Z, r18
      return true;
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	07 c0       	rjmp	.+14     	; 0x12f0 <nwkTxAckReceived+0x44>
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
    12e2:	0e 94 66 08 	call	0x10cc	; 0x10cc <nwkFrameNext>
    12e6:	00 97       	sbiw	r24, 0x00	; 0
    12e8:	61 f7       	brne	.-40     	; 0x12c2 <nwkTxAckReceived+0x16>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
    12ea:	80 e0       	ldi	r24, 0x00	; 0
    12ec:	01 c0       	rjmp	.+2      	; 0x12f0 <nwkTxAckReceived+0x44>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
    12ee:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	08 95       	ret

000012f6 <phyTrxSetState>:

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
  TRX_STATE_REG = TRX_CMD_FORCE_TRX_OFF;
    12f6:	93 e0       	ldi	r25, 0x03	; 3
    12f8:	90 93 42 01 	sts	0x0142, r25
  while (TRX_STATUS_TRX_OFF != TRX_STATUS_REG_s.trxStatus);
    12fc:	e1 e4       	ldi	r30, 0x41	; 65
    12fe:	f1 e0       	ldi	r31, 0x01	; 1
    1300:	90 81       	ld	r25, Z
    1302:	9f 71       	andi	r25, 0x1F	; 31
    1304:	98 30       	cpi	r25, 0x08	; 8
    1306:	e1 f7       	brne	.-8      	; 0x1300 <phyTrxSetState+0xa>

  TRX_STATE_REG = state;
    1308:	80 93 42 01 	sts	0x0142, r24
  while (state != TRX_STATUS_REG_s.trxStatus);
    130c:	e1 e4       	ldi	r30, 0x41	; 65
    130e:	f1 e0       	ldi	r31, 0x01	; 1
    1310:	90 81       	ld	r25, Z
    1312:	9f 71       	andi	r25, 0x1F	; 31
    1314:	98 13       	cpse	r25, r24
    1316:	fc cf       	rjmp	.-8      	; 0x1310 <phyTrxSetState+0x1a>
}
    1318:	08 95       	ret

0000131a <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
    131a:	e9 e3       	ldi	r30, 0x39	; 57
    131c:	f1 e0       	ldi	r31, 0x01	; 1
    131e:	80 81       	ld	r24, Z
    1320:	81 60       	ori	r24, 0x01	; 1
    1322:	80 83       	st	Z, r24

  phyRxState = false;
    1324:	10 92 91 07 	sts	0x0791, r1
  phyBand = 0;
    1328:	10 92 90 07 	sts	0x0790, r1
  phyState = PHY_STATE_IDLE;
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	80 93 92 07 	sts	0x0792, r24

  phyTrxSetState(TRX_CMD_TRX_OFF);
    1332:	88 e0       	ldi	r24, 0x08	; 8
    1334:	0e 94 7b 09 	call	0x12f6	; 0x12f6 <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
    1338:	8b ee       	ldi	r24, 0xEB	; 235
    133a:	80 93 56 01 	sts	0x0156, r24

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
    133e:	ec e4       	ldi	r30, 0x4C	; 76
    1340:	f1 e0       	ldi	r31, 0x01	; 1
    1342:	80 81       	ld	r24, Z
    1344:	80 68       	ori	r24, 0x80	; 128
    1346:	80 83       	st	Z, r24
    1348:	08 95       	ret

0000134a <sensor_handler>:
/* 
 * sensor_handler function
 * return 1 if it has some borrow time 
 */
int sensor_handler( struct event *p )
{
    134a:	0f 93       	push	r16
    134c:	1f 93       	push	r17
    134e:	cf 93       	push	r28
    1350:	df 93       	push	r29
    1352:	ec 01       	movw	r28, r24
	int retNum;
	int data = 0;
	BaseSensor *sp;

	/* sanity check */
	if( p == EV_NULL )
    1354:	89 2b       	or	r24, r25
    1356:	59 f4       	brne	.+22     	; 0x136e <sensor_handler+0x24>
	{
		#ifdef DEBUG
		printf("Null Event Error !!!");
    1358:	8c e9       	ldi	r24, 0x9C	; 156
    135a:	92 e0       	ldi	r25, 0x02	; 2
    135c:	9f 93       	push	r25
    135e:	8f 93       	push	r24
    1360:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <printf>
		#endif
		return 0;
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	80 e0       	ldi	r24, 0x00	; 0
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	85 c0       	rjmp	.+266    	; 0x1478 <sensor_handler+0x12e>
	}
	sp = ( BaseSensor * )( p->sp );
    136e:	0a 85       	ldd	r16, Y+10	; 0x0a
    1370:	1b 85       	ldd	r17, Y+11	; 0x0b

	#ifdef DEBUG
	printf("cur_state = %d\n", p->cur_state);
    1372:	9e 85       	ldd	r25, Y+14	; 0x0e
    1374:	1f 92       	push	r1
    1376:	9f 93       	push	r25
    1378:	21 eb       	ldi	r18, 0xB1	; 177
    137a:	32 e0       	ldi	r19, 0x02	; 2
    137c:	3f 93       	push	r19
    137e:	2f 93       	push	r18
    1380:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <printf>
	#endif
	switch( p->cur_state )
    1384:	0f 90       	pop	r0
    1386:	0f 90       	pop	r0
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	9e 85       	ldd	r25, Y+14	; 0x0e
    138e:	91 30       	cpi	r25, 0x01	; 1
    1390:	a9 f0       	breq	.+42     	; 0x13bc <sensor_handler+0x72>
    1392:	38 f0       	brcs	.+14     	; 0x13a2 <sensor_handler+0x58>
    1394:	92 30       	cpi	r25, 0x02	; 2
    1396:	09 f4       	brne	.+2      	; 0x139a <sensor_handler+0x50>
    1398:	55 c0       	rjmp	.+170    	; 0x1444 <sensor_handler+0xfa>
    139a:	94 30       	cpi	r25, 0x04	; 4
    139c:	09 f4       	brne	.+2      	; 0x13a0 <sensor_handler+0x56>
    139e:	62 c0       	rjmp	.+196    	; 0x1464 <sensor_handler+0x11a>
    13a0:	69 c0       	rjmp	.+210    	; 0x1474 <sensor_handler+0x12a>
	{
		/* New : init first, if retNum is not 0 goto Oops state */
		case New :
		// the way to call init() is different than most other functions, since it is virtual function in BaseDevice .
		retNum = sp->abstract.device_vt->init( &(sp->abstract) );
    13a2:	d8 01       	movw	r26, r16
    13a4:	ed 91       	ld	r30, X+
    13a6:	fc 91       	ld	r31, X
    13a8:	02 80       	ldd	r0, Z+2	; 0x02
    13aa:	f3 81       	ldd	r31, Z+3	; 0x03
    13ac:	e0 2d       	mov	r30, r0
    13ae:	c8 01       	movw	r24, r16
    13b0:	09 95       	icall
		if(retNum != 0)
		{
			p->cur_state = Oops;
		}
		p->cur_state = Ready;
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	8e 87       	std	Y+14, r24	; 0x0e
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	90 e0       	ldi	r25, 0x00	; 0
		if(retNum != 0)
		{
			p->cur_state = Oops;
		}
		p->cur_state = Ready;
		break;
    13ba:	5e c0       	rjmp	.+188    	; 0x1478 <sensor_handler+0x12e>
		
		
		
		/* Ready : ready to activate collection request, if retNum is not 0 goto Oops state */
		case Ready :
		retNum = sp->vmt->Request(p->sp);
    13bc:	d8 01       	movw	r26, r16
    13be:	14 96       	adiw	r26, 0x04	; 4
    13c0:	ed 91       	ld	r30, X+
    13c2:	fc 91       	ld	r31, X
    13c4:	15 97       	sbiw	r26, 0x05	; 5
    13c6:	04 80       	ldd	r0, Z+4	; 0x04
    13c8:	f5 81       	ldd	r31, Z+5	; 0x05
    13ca:	e0 2d       	mov	r30, r0
    13cc:	8a 85       	ldd	r24, Y+10	; 0x0a
    13ce:	9b 85       	ldd	r25, Y+11	; 0x0b
    13d0:	09 95       	icall
		if ( retNum == -1 )
    13d2:	8f 3f       	cpi	r24, 0xFF	; 255
    13d4:	bf ef       	ldi	r27, 0xFF	; 255
    13d6:	9b 07       	cpc	r25, r27
    13d8:	29 f4       	brne	.+10     	; 0x13e4 <sensor_handler+0x9a>
		{
			p->cur_state = Oops;
    13da:	84 e0       	ldi	r24, 0x04	; 4
    13dc:	8e 87       	std	Y+14, r24	; 0x0e
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    13de:	80 e0       	ldi	r24, 0x00	; 0
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	4a c0       	rjmp	.+148    	; 0x1478 <sensor_handler+0x12e>
		retNum = sp->vmt->Request(p->sp);
		if ( retNum == -1 )
		{
			p->cur_state = Oops;
		}
		else if( retNum == 0 )
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	e1 f4       	brne	.+56     	; 0x1420 <sensor_handler+0xd6>
		{
			p->cur_state = Ready;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	8e 87       	std	Y+14, r24	; 0x0e
			data = sp->vmt->Collect(p->sp);
    13ec:	d8 01       	movw	r26, r16
    13ee:	14 96       	adiw	r26, 0x04	; 4
    13f0:	ed 91       	ld	r30, X+
    13f2:	fc 91       	ld	r31, X
    13f4:	15 97       	sbiw	r26, 0x05	; 5
    13f6:	06 80       	ldd	r0, Z+6	; 0x06
    13f8:	f7 81       	ldd	r31, Z+7	; 0x07
    13fa:	e0 2d       	mov	r30, r0
    13fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    13fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1400:	09 95       	icall
			#ifdef DEBUG
			printf("data : %d\n", data);
    1402:	9f 93       	push	r25
    1404:	8f 93       	push	r24
    1406:	81 ec       	ldi	r24, 0xC1	; 193
    1408:	92 e0       	ldi	r25, 0x02	; 2
    140a:	9f 93       	push	r25
    140c:	8f 93       	push	r24
    140e:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <printf>
    1412:	0f 90       	pop	r0
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    141a:	80 e0       	ldi	r24, 0x00	; 0
    141c:	90 e0       	ldi	r25, 0x00	; 0
    141e:	2c c0       	rjmp	.+88     	; 0x1478 <sensor_handler+0x12e>
			printf("data : %d\n", data);
			#endif
		}
		else
		{
			p->cur_state = Running;
    1420:	22 e0       	ldi	r18, 0x02	; 2
    1422:	2e 87       	std	Y+14, r18	; 0x0e
			p->timeout = retNum;
    1424:	9d 83       	std	Y+5, r25	; 0x05
    1426:	8c 83       	std	Y+4, r24	; 0x04
			p->borrow_timeout = retNum;
    1428:	99 87       	std	Y+9, r25	; 0x09
    142a:	88 87       	std	Y+8, r24	; 0x08
			LL_POP( timeoutq );
    142c:	80 91 a9 08 	lds	r24, 0x08A9
    1430:	90 91 aa 08 	lds	r25, 0x08AA
    1434:	0e 94 31 0c 	call	0x1862	; 0x1862 <ll_pop>
			insert_timeoutq_event( p );
    1438:	ce 01       	movw	r24, r28
    143a:	0e 94 8a 0a 	call	0x1514	; 0x1514 <insert_timeoutq_event>
			return 1;
    143e:	81 e0       	ldi	r24, 0x01	; 1
    1440:	90 e0       	ldi	r25, 0x00	; 0
    1442:	1a c0       	rjmp	.+52     	; 0x1478 <sensor_handler+0x12e>
		
		
		/* Running : ready to pull data right away */
		case Running :
		//      data = p->sp->vmt->Collect();
		p->cur_state = Ready;
    1444:	81 e0       	ldi	r24, 0x01	; 1
    1446:	8e 87       	std	Y+14, r24	; 0x0e
		p->sp->vmt->Collect(p->sp);
    1448:	8a 85       	ldd	r24, Y+10	; 0x0a
    144a:	9b 85       	ldd	r25, Y+11	; 0x0b
    144c:	dc 01       	movw	r26, r24
    144e:	14 96       	adiw	r26, 0x04	; 4
    1450:	ed 91       	ld	r30, X+
    1452:	fc 91       	ld	r31, X
    1454:	15 97       	sbiw	r26, 0x05	; 5
    1456:	06 80       	ldd	r0, Z+6	; 0x06
    1458:	f7 81       	ldd	r31, Z+7	; 0x07
    145a:	e0 2d       	mov	r30, r0
    145c:	09 95       	icall
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    145e:	80 e0       	ldi	r24, 0x00	; 0
    1460:	90 e0       	ldi	r25, 0x00	; 0
		/* Running : ready to pull data right away */
		case Running :
		//      data = p->sp->vmt->Collect();
		p->cur_state = Ready;
		p->sp->vmt->Collect(p->sp);
		break;
    1462:	0a c0       	rjmp	.+20     	; 0x1478 <sensor_handler+0x12e>
		
		/* Oops : when some errors occur */
		case Oops :
		/* TODO : ( we may want to do something in reset function and ) re-init by setting the state to new */
#ifdef DEBUG
		      printf("Something really wrong happens\n");
    1464:	8c ec       	ldi	r24, 0xCC	; 204
    1466:	92 e0       	ldi	r25, 0x02	; 2
    1468:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <puts>
#endif
		p->cur_state = New;
    146c:	1e 86       	std	Y+14, r1	; 0x0e
		break;
	}
	return 0;
    146e:	80 e0       	ldi	r24, 0x00	; 0
    1470:	90 e0       	ldi	r25, 0x00	; 0
		/* TODO : ( we may want to do something in reset function and ) re-init by setting the state to new */
#ifdef DEBUG
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
    1472:	02 c0       	rjmp	.+4      	; 0x1478 <sensor_handler+0x12e>
	}
	return 0;
    1474:	80 e0       	ldi	r24, 0x00	; 0
    1476:	90 e0       	ldi	r25, 0x00	; 0
	// printf(" run :\n\t");
	// p->sp->vmt->MyPrint(p->sp);

}
    1478:	df 91       	pop	r29
    147a:	cf 91       	pop	r28
    147c:	1f 91       	pop	r17
    147e:	0f 91       	pop	r16
    1480:	08 95       	ret

00001482 <init_timeoutq>:
/* 
 * like other many stuff, we got an init function
 * fill the freelist with all entries and left the timeoutq empty
 */
void init_timeoutq()
{
    1482:	0f 93       	push	r16
    1484:	1f 93       	push	r17
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
	int i;

	timeoutq = (struct event *)&TQ;
    148a:	e5 ea       	ldi	r30, 0xA5	; 165
    148c:	f8 e0       	ldi	r31, 0x08	; 8
    148e:	f0 93 aa 08 	sts	0x08AA, r31
    1492:	e0 93 a9 08 	sts	0x08A9, r30
	LL_INIT(timeoutq);
    1496:	f3 83       	std	Z+3, r31	; 0x03
    1498:	e2 83       	std	Z+2, r30	; 0x02
    149a:	f1 83       	std	Z+1, r31	; 0x01
    149c:	e0 83       	st	Z, r30
	freelist = (struct event *)&FL;
    149e:	eb ea       	ldi	r30, 0xAB	; 171
    14a0:	f8 e0       	ldi	r31, 0x08	; 8
    14a2:	f0 93 b0 08 	sts	0x08B0, r31
    14a6:	e0 93 af 08 	sts	0x08AF, r30
	LL_INIT(freelist);
    14aa:	f3 83       	std	Z+3, r31	; 0x03
    14ac:	e2 83       	std	Z+2, r30	; 0x02
    14ae:	f1 83       	std	Z+1, r31	; 0x01
    14b0:	e0 83       	st	Z, r30
    14b2:	c5 e9       	ldi	r28, 0x95	; 149
    14b4:	d7 e0       	ldi	r29, 0x07	; 7
    14b6:	05 ea       	ldi	r16, 0xA5	; 165
    14b8:	18 e0       	ldi	r17, 0x08	; 8

	for (i=0; i<MAX_EVENTS; i++) {
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
    14ba:	be 01       	movw	r22, r28
    14bc:	80 91 af 08 	lds	r24, 0x08AF
    14c0:	90 91 b0 08 	lds	r25, 0x08B0
    14c4:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <ll_r_insert>
    14c8:	61 96       	adiw	r28, 0x11	; 17
	timeoutq = (struct event *)&TQ;
	LL_INIT(timeoutq);
	freelist = (struct event *)&FL;
	LL_INIT(freelist);

	for (i=0; i<MAX_EVENTS; i++) {
    14ca:	c0 17       	cp	r28, r16
    14cc:	d1 07       	cpc	r29, r17
    14ce:	a9 f7       	brne	.-22     	; 0x14ba <init_timeoutq+0x38>
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
	}

	return;
}
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	1f 91       	pop	r17
    14d6:	0f 91       	pop	r16
    14d8:	08 95       	ret

000014da <get_next_interval>:
 * return the numbers of period we should launch next
 */
int get_next_interval()
{
	int wait_time = MAX_SLEEP_INTERVAL;
	struct event * ev = ( struct event * ) LL_TOP( timeoutq );
    14da:	80 91 a9 08 	lds	r24, 0x08A9
    14de:	90 91 aa 08 	lds	r25, 0x08AA
    14e2:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <ll_first>

	/* sanity check */
    /* no event in queue */
    /* TODO : to optimize the sleep time or let the CPU sleep or set up some other interrupts */
	if( EV_NULL == ev )
    14e6:	00 97       	sbiw	r24, 0x00	; 0
    14e8:	59 f4       	brne	.+22     	; 0x1500 <get_next_interval+0x26>
	{
#ifdef DEBUG
		printf("we may get some memory leakage issue, or something really bad occurs\n");
    14ea:	8b ee       	ldi	r24, 0xEB	; 235
    14ec:	92 e0       	ldi	r25, 0x02	; 2
    14ee:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <puts>
		printf("so we are going to take some really sleep, since no event in scheduler\n");
    14f2:	80 e3       	ldi	r24, 0x30	; 48
    14f4:	93 e0       	ldi	r25, 0x03	; 3
    14f6:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <puts>
#endif
	    return wait_time;
    14fa:	8f ef       	ldi	r24, 0xFF	; 255
    14fc:	9f ef       	ldi	r25, 0xFF	; 255
    14fe:	08 95       	ret
	}
	wait_time = ( wait_time > ( ev->timeout ) ) ? ( ev->timeout ) : wait_time ;
    1500:	fc 01       	movw	r30, r24
    1502:	24 81       	ldd	r18, Z+4	; 0x04
    1504:	35 81       	ldd	r19, Z+5	; 0x05
    1506:	33 23       	and	r19, r19
    1508:	14 f0       	brlt	.+4      	; 0x150e <get_next_interval+0x34>
    150a:	2f ef       	ldi	r18, 0xFF	; 255
    150c:	3f ef       	ldi	r19, 0xFF	; 255
	return wait_time;
    150e:	82 2f       	mov	r24, r18
    1510:	93 2f       	mov	r25, r19
}
    1512:	08 95       	ret

00001514 <insert_timeoutq_event>:
	set_timer(get_next_interval());
    return 0;
}

void insert_timeoutq_event( struct event * ep)
{
    1514:	cf 93       	push	r28
    1516:	df 93       	push	r29
    1518:	dc 01       	movw	r26, r24
	// Try to insert it according to timeout and timeoutq
	struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
    151a:	c0 91 a9 08 	lds	r28, 0x08A9
    151e:	d0 91 aa 08 	lds	r29, 0x08AA
    1522:	ea 81       	ldd	r30, Y+2	; 0x02
    1524:	fb 81       	ldd	r31, Y+3	; 0x03
    1526:	ce 17       	cp	r28, r30
    1528:	df 07       	cpc	r29, r31
    152a:	09 f1       	breq	.+66     	; 0x156e <insert_timeoutq_event+0x5a>
	{
		if( it != EV_NULL )
    152c:	30 97       	sbiw	r30, 0x00	; 0
    152e:	c9 f0       	breq	.+50     	; 0x1562 <insert_timeoutq_event+0x4e>
		{
			if( ( it->timeout ) > ( ep->timeout ) )
    1530:	44 81       	ldd	r20, Z+4	; 0x04
    1532:	55 81       	ldd	r21, Z+5	; 0x05
    1534:	14 96       	adiw	r26, 0x04	; 4
    1536:	2d 91       	ld	r18, X+
    1538:	3c 91       	ld	r19, X
    153a:	15 97       	sbiw	r26, 0x05	; 5
    153c:	24 17       	cp	r18, r20
    153e:	35 07       	cpc	r19, r21
    1540:	54 f4       	brge	.+20     	; 0x1556 <insert_timeoutq_event+0x42>
			{
				it->timeout -= ep->timeout;
    1542:	42 1b       	sub	r20, r18
    1544:	53 0b       	sbc	r21, r19
    1546:	55 83       	std	Z+5, r21	; 0x05
    1548:	44 83       	std	Z+4, r20	; 0x04
				LL_L_INSERT( it, ep );
    154a:	bd 01       	movw	r22, r26
    154c:	80 81       	ld	r24, Z
    154e:	91 81       	ldd	r25, Z+1	; 0x01
    1550:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <ll_r_insert>
    1554:	15 c0       	rjmp	.+42     	; 0x1580 <insert_timeoutq_event+0x6c>
				// printf("left insert \n");
				break;
			}
			else
			{
				ep->timeout -= it->timeout;
    1556:	24 1b       	sub	r18, r20
    1558:	35 0b       	sbc	r19, r21
    155a:	15 96       	adiw	r26, 0x05	; 5
    155c:	3c 93       	st	X, r19
    155e:	2e 93       	st	-X, r18
    1560:	14 97       	sbiw	r26, 0x04	; 4
	// Try to insert it according to timeout and timeoutq
	struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
    1562:	02 80       	ldd	r0, Z+2	; 0x02
    1564:	f3 81       	ldd	r31, Z+3	; 0x03
    1566:	e0 2d       	mov	r30, r0
    1568:	ce 17       	cp	r28, r30
    156a:	df 07       	cpc	r29, r31
    156c:	f9 f6       	brne	.-66     	; 0x152c <insert_timeoutq_event+0x18>
	}
	
	// If not insert it left to the header
	if( is_pushed == 0 )
	{
		LL_APPEND(timeoutq, ep);
    156e:	e0 91 a9 08 	lds	r30, 0x08A9
    1572:	f0 91 aa 08 	lds	r31, 0x08AA
    1576:	bd 01       	movw	r22, r26
    1578:	80 81       	ld	r24, Z
    157a:	91 81       	ldd	r25, Z+1	; 0x01
    157c:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <ll_r_insert>

	#ifdef DEBUG
	// dump_timeoutq();
	#endif

}
    1580:	df 91       	pop	r29
    1582:	cf 91       	pop	r28
    1584:	08 95       	ret

00001586 <load_new_sensor>:

/* 
 * load a brand new sensor activity in the scheduler
 */
int load_new_sensor( int timeout, int repeat, BaseSensor *device_ptr, int otherinfo )
{
    1586:	cf 92       	push	r12
    1588:	df 92       	push	r13
    158a:	ef 92       	push	r14
    158c:	ff 92       	push	r15
    158e:	0f 93       	push	r16
    1590:	1f 93       	push	r17
    1592:	cf 93       	push	r28
    1594:	df 93       	push	r29
    1596:	6c 01       	movw	r12, r24
    1598:	7b 01       	movw	r14, r22
    159a:	8a 01       	movw	r16, r20
    159c:	e9 01       	movw	r28, r18

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    159e:	80 91 af 08 	lds	r24, 0x08AF
    15a2:	90 91 b0 08 	lds	r25, 0x08B0
    15a6:	0e 94 31 0c 	call	0x1862	; 0x1862 <ll_pop>
    15aa:	fc 01       	movw	r30, r24
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
    15ac:	89 2b       	or	r24, r25
    15ae:	b1 f0       	breq	.+44     	; 0x15dc <load_new_sensor+0x56>
        return -1;
    ep->timeout = timeout;
    15b0:	d5 82       	std	Z+5, r13	; 0x05
    15b2:	c4 82       	std	Z+4, r12	; 0x04
    ep->repeat_interval = repeat;
    15b4:	f7 82       	std	Z+7, r15	; 0x07
    15b6:	e6 82       	std	Z+6, r14	; 0x06
	ep->borrow_timeout = 0;
    15b8:	11 86       	std	Z+9, r1	; 0x09
    15ba:	10 86       	std	Z+8, r1	; 0x08
    ep->sp = device_ptr;
    15bc:	13 87       	std	Z+11, r17	; 0x0b
    15be:	02 87       	std	Z+10, r16	; 0x0a
    ep->info = otherinfo;
    15c0:	d5 87       	std	Z+13, r29	; 0x0d
    15c2:	c4 87       	std	Z+12, r28	; 0x0c
    ep->cur_state = Ready;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	86 87       	std	Z+14, r24	; 0x0e
    ep->run = sensor_handler;
    15c8:	85 ea       	ldi	r24, 0xA5	; 165
    15ca:	99 e0       	ldi	r25, 0x09	; 9
    15cc:	90 8b       	std	Z+16, r25	; 0x10
    15ce:	87 87       	std	Z+15, r24	; 0x0f
    insert_timeoutq_event( ep );
    15d0:	cf 01       	movw	r24, r30
    15d2:	0e 94 8a 0a 	call	0x1514	; 0x1514 <insert_timeoutq_event>
    return 0;
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	02 c0       	rjmp	.+4      	; 0x15e0 <load_new_sensor+0x5a>

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
        return -1;
    15dc:	8f ef       	ldi	r24, 0xFF	; 255
    15de:	9f ef       	ldi	r25, 0xFF	; 255
    ep->info = otherinfo;
    ep->cur_state = Ready;
    ep->run = sensor_handler;
    insert_timeoutq_event( ep );
    return 0;
}
    15e0:	df 91       	pop	r29
    15e2:	cf 91       	pop	r28
    15e4:	1f 91       	pop	r17
    15e6:	0f 91       	pop	r16
    15e8:	ff 90       	pop	r15
    15ea:	ef 90       	pop	r14
    15ec:	df 90       	pop	r13
    15ee:	cf 90       	pop	r12
    15f0:	08 95       	ret

000015f2 <handle_timeoutq_event>:
/* 
 * handle the next one in timeout queue
 * the return value is reserved and now we just return 0
 */
int handle_timeoutq_event( )
{
    15f2:	cf 93       	push	r28
    15f4:	df 93       	push	r29
	/* assume we get a valid one */
	struct event * ev = (struct event * )LL_TOP( timeoutq );
    15f6:	80 91 a9 08 	lds	r24, 0x08A9
    15fa:	90 91 aa 08 	lds	r25, 0x08AA
    15fe:	0e 94 f2 0b 	call	0x17e4	; 0x17e4 <ll_first>
    1602:	ec 01       	movw	r28, r24
	if( EV_NULL == ev )
    1604:	89 2b       	or	r24, r25
    1606:	09 f4       	brne	.+2      	; 0x160a <handle_timeoutq_event+0x18>
    1608:	4c c0       	rjmp	.+152    	; 0x16a2 <handle_timeoutq_event+0xb0>
        return -1;
    
    /* sanity check */
    if( ev->sp == NULL )
    160a:	8a 85       	ldd	r24, Y+10	; 0x0a
    160c:	9b 85       	ldd	r25, Y+11	; 0x0b
    160e:	89 2b       	or	r24, r25
    1610:	09 f4       	brne	.+2      	; 0x1614 <handle_timeoutq_event+0x22>
    1612:	4a c0       	rjmp	.+148    	; 0x16a8 <handle_timeoutq_event+0xb6>
        return -1;

	/* retNum may need to be designed in other ways */
    int retNum = ev->run( ev );
    1614:	ef 85       	ldd	r30, Y+15	; 0x0f
    1616:	f8 89       	ldd	r31, Y+16	; 0x10
    1618:	ce 01       	movw	r24, r28
    161a:	09 95       	icall
	/* 
	 * return 1 if it has to with some borrow time( have a request-time!=0 case ) 
	 * which means the event has already entered the scheduler, 
	 * and won't need to do anything else
	 */
	if( retNum == 1 )
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	69 f4       	brne	.+26     	; 0x163a <handle_timeoutq_event+0x48>
	{
		/* judge if the next top in queue has a timeout <= 0, which we may want to handle it right now */
		if( get_next_interval() == 0 )
    1620:	0e 94 6d 0a 	call	0x14da	; 0x14da <get_next_interval>
    1624:	89 2b       	or	r24, r25
    1626:	11 f4       	brne	.+4      	; 0x162c <handle_timeoutq_event+0x3a>
			handle_timeoutq_event();
    1628:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <handle_timeoutq_event>
			
		set_timer(get_next_interval());
    162c:	0e 94 6d 0a 	call	0x14da	; 0x14da <get_next_interval>
    1630:	0e 94 ac 06 	call	0xd58	; 0xd58 <set_timer>
		return 0;
    1634:	80 e0       	ldi	r24, 0x00	; 0
    1636:	90 e0       	ldi	r25, 0x00	; 0
    1638:	39 c0       	rjmp	.+114    	; 0x16ac <handle_timeoutq_event+0xba>
    /*
	 * return 0 means we just fired a case, 
	 * and may need to judge it over the repeat time to re-insert into the scheduler,
	 * since we definitely want to collect data periodically
	 */
    LL_POP( timeoutq );
    163a:	80 91 a9 08 	lds	r24, 0x08A9
    163e:	90 91 aa 08 	lds	r25, 0x08AA
    1642:	0e 94 31 0c 	call	0x1862	; 0x1862 <ll_pop>
    if( ev->repeat_interval != 0 )
    1646:	8e 81       	ldd	r24, Y+6	; 0x06
    1648:	9f 81       	ldd	r25, Y+7	; 0x07
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	b1 f0       	breq	.+44     	; 0x167a <handle_timeoutq_event+0x88>
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
    164e:	28 85       	ldd	r18, Y+8	; 0x08
    1650:	39 85       	ldd	r19, Y+9	; 0x09
    1652:	ac 01       	movw	r20, r24
    1654:	42 1b       	sub	r20, r18
    1656:	53 0b       	sbc	r21, r19
    1658:	9a 01       	movw	r18, r20
    165a:	5d 83       	std	Y+5, r21	; 0x05
    165c:	4c 83       	std	Y+4, r20	; 0x04
		while( ev->timeout < 0 )
    165e:	55 23       	and	r21, r21
    1660:	34 f4       	brge	.+12     	; 0x166e <handle_timeoutq_event+0x7c>
		{
			ev->timeout += ev->repeat_interval;
    1662:	28 0f       	add	r18, r24
    1664:	39 1f       	adc	r19, r25
	 */
    LL_POP( timeoutq );
    if( ev->repeat_interval != 0 )
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
		while( ev->timeout < 0 )
    1666:	33 23       	and	r19, r19
    1668:	e4 f3       	brlt	.-8      	; 0x1662 <handle_timeoutq_event+0x70>
    166a:	3d 83       	std	Y+5, r19	; 0x05
    166c:	2c 83       	std	Y+4, r18	; 0x04
		{
			ev->timeout += ev->repeat_interval;
		}
		ev->borrow_timeout = 0;
    166e:	19 86       	std	Y+9, r1	; 0x09
    1670:	18 86       	std	Y+8, r1	; 0x08
        insert_timeoutq_event( ev );
    1672:	ce 01       	movw	r24, r28
    1674:	0e 94 8a 0a 	call	0x1514	; 0x1514 <insert_timeoutq_event>
    1678:	07 c0       	rjmp	.+14     	; 0x1688 <handle_timeoutq_event+0x96>
    }
    else
    {
        LL_PUSH( freelist, ev );
    167a:	be 01       	movw	r22, r28
    167c:	80 91 af 08 	lds	r24, 0x08AF
    1680:	90 91 b0 08 	lds	r25, 0x08B0
    1684:	0e 94 fb 0b 	call	0x17f6	; 0x17f6 <ll_r_insert>
    }

	
	/* judge if the next top in queue has a timeout <= 0, which we may want to handle it right now */
	if( get_next_interval() == 0 )
    1688:	0e 94 6d 0a 	call	0x14da	; 0x14da <get_next_interval>
    168c:	89 2b       	or	r24, r25
    168e:	11 f4       	brne	.+4      	; 0x1694 <handle_timeoutq_event+0xa2>
		handle_timeoutq_event();
    1690:	0e 94 f9 0a 	call	0x15f2	; 0x15f2 <handle_timeoutq_event>
		
	set_timer(get_next_interval());
    1694:	0e 94 6d 0a 	call	0x14da	; 0x14da <get_next_interval>
    1698:	0e 94 ac 06 	call	0xd58	; 0xd58 <set_timer>
    return 0;
    169c:	80 e0       	ldi	r24, 0x00	; 0
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	05 c0       	rjmp	.+10     	; 0x16ac <handle_timeoutq_event+0xba>
int handle_timeoutq_event( )
{
	/* assume we get a valid one */
	struct event * ev = (struct event * )LL_TOP( timeoutq );
	if( EV_NULL == ev )
        return -1;
    16a2:	8f ef       	ldi	r24, 0xFF	; 255
    16a4:	9f ef       	ldi	r25, 0xFF	; 255
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <handle_timeoutq_event+0xba>
    
    /* sanity check */
    if( ev->sp == NULL )
        return -1;
    16a8:	8f ef       	ldi	r24, 0xFF	; 255
    16aa:	9f ef       	ldi	r25, 0xFF	; 255
	if( get_next_interval() == 0 )
		handle_timeoutq_event();
		
	set_timer(get_next_interval());
    return 0;
}
    16ac:	df 91       	pop	r29
    16ae:	cf 91       	pop	r28
    16b0:	08 95       	ret

000016b2 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    16b2:	0e 94 f8 07 	call	0xff0	; 0xff0 <HAL_Init>
  SYS_TimerInit();
    16b6:	0e 94 c6 0b 	call	0x178c	; 0x178c <SYS_TimerInit>
  PHY_Init();
    16ba:	0e 94 8d 09 	call	0x131a	; 0x131a <PHY_Init>
  NWK_Init();
    16be:	0e 94 33 08 	call	0x1066	; 0x1066 <NWK_Init>
    16c2:	08 95       	ret

000016c4 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    16c4:	0f 93       	push	r16
    16c6:	1f 93       	push	r17
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	ec 01       	movw	r28, r24
  if (timers)
    16ce:	80 91 93 07 	lds	r24, 0x0793
    16d2:	90 91 94 07 	lds	r25, 0x0794
    16d6:	00 97       	sbiw	r24, 0x00	; 0
    16d8:	09 f4       	brne	.+2      	; 0x16dc <placeTimer+0x18>
    16da:	45 c0       	rjmp	.+138    	; 0x1766 <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    16dc:	4e 81       	ldd	r20, Y+6	; 0x06
    16de:	5f 81       	ldd	r21, Y+7	; 0x07
    16e0:	68 85       	ldd	r22, Y+8	; 0x08
    16e2:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    16e4:	fc 01       	movw	r30, r24
    16e6:	02 81       	ldd	r16, Z+2	; 0x02
    16e8:	13 81       	ldd	r17, Z+3	; 0x03
    16ea:	24 81       	ldd	r18, Z+4	; 0x04
    16ec:	35 81       	ldd	r19, Z+5	; 0x05
    16ee:	40 17       	cp	r20, r16
    16f0:	51 07       	cpc	r21, r17
    16f2:	62 07       	cpc	r22, r18
    16f4:	73 07       	cpc	r23, r19
    16f6:	60 f0       	brcs	.+24     	; 0x1710 <placeTimer+0x4c>
    16f8:	dc 01       	movw	r26, r24
    16fa:	17 c0       	rjmp	.+46     	; 0x172a <placeTimer+0x66>
    16fc:	02 81       	ldd	r16, Z+2	; 0x02
    16fe:	13 81       	ldd	r17, Z+3	; 0x03
    1700:	24 81       	ldd	r18, Z+4	; 0x04
    1702:	35 81       	ldd	r19, Z+5	; 0x05
    1704:	40 17       	cp	r20, r16
    1706:	51 07       	cpc	r21, r17
    1708:	62 07       	cpc	r22, r18
    170a:	73 07       	cpc	r23, r19
    170c:	68 f4       	brcc	.+26     	; 0x1728 <placeTimer+0x64>
    170e:	03 c0       	rjmp	.+6      	; 0x1716 <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1710:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    1712:	a0 e0       	ldi	r26, 0x00	; 0
    1714:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    1716:	04 1b       	sub	r16, r20
    1718:	15 0b       	sbc	r17, r21
    171a:	26 0b       	sbc	r18, r22
    171c:	37 0b       	sbc	r19, r23
    171e:	02 83       	std	Z+2, r16	; 0x02
    1720:	13 83       	std	Z+3, r17	; 0x03
    1722:	24 83       	std	Z+4, r18	; 0x04
    1724:	35 83       	std	Z+5, r19	; 0x05
         break;
    1726:	0a c0       	rjmp	.+20     	; 0x173c <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1728:	df 01       	movw	r26, r30
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    172a:	40 1b       	sub	r20, r16
    172c:	51 0b       	sbc	r21, r17
    172e:	62 0b       	sbc	r22, r18
    1730:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1732:	ed 91       	ld	r30, X+
    1734:	fc 91       	ld	r31, X
    1736:	11 97       	sbiw	r26, 0x01	; 1
    1738:	30 97       	sbiw	r30, 0x00	; 0
    173a:	01 f7       	brne	.-64     	; 0x16fc <placeTimer+0x38>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    173c:	4a 83       	std	Y+2, r20	; 0x02
    173e:	5b 83       	std	Y+3, r21	; 0x03
    1740:	6c 83       	std	Y+4, r22	; 0x04
    1742:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    1744:	10 97       	sbiw	r26, 0x00	; 0
    1746:	41 f0       	breq	.+16     	; 0x1758 <placeTimer+0x94>
    {
      timer->next = prev->next;
    1748:	8d 91       	ld	r24, X+
    174a:	9c 91       	ld	r25, X
    174c:	11 97       	sbiw	r26, 0x01	; 1
    174e:	99 83       	std	Y+1, r25	; 0x01
    1750:	88 83       	st	Y, r24
      prev->next = timer;
    1752:	cd 93       	st	X+, r28
    1754:	dc 93       	st	X, r29
    1756:	15 c0       	rjmp	.+42     	; 0x1782 <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    1758:	99 83       	std	Y+1, r25	; 0x01
    175a:	88 83       	st	Y, r24
      timers = timer;
    175c:	d0 93 94 07 	sts	0x0794, r29
    1760:	c0 93 93 07 	sts	0x0793, r28
    1764:	0e c0       	rjmp	.+28     	; 0x1782 <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    1766:	19 82       	std	Y+1, r1	; 0x01
    1768:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    176a:	8e 81       	ldd	r24, Y+6	; 0x06
    176c:	9f 81       	ldd	r25, Y+7	; 0x07
    176e:	a8 85       	ldd	r26, Y+8	; 0x08
    1770:	b9 85       	ldd	r27, Y+9	; 0x09
    1772:	8a 83       	std	Y+2, r24	; 0x02
    1774:	9b 83       	std	Y+3, r25	; 0x03
    1776:	ac 83       	std	Y+4, r26	; 0x04
    1778:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    177a:	d0 93 94 07 	sts	0x0794, r29
    177e:	c0 93 93 07 	sts	0x0793, r28
  }
}
    1782:	df 91       	pop	r29
    1784:	cf 91       	pop	r28
    1786:	1f 91       	pop	r17
    1788:	0f 91       	pop	r16
    178a:	08 95       	ret

0000178c <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    178c:	10 92 94 07 	sts	0x0794, r1
    1790:	10 92 93 07 	sts	0x0793, r1
    1794:	08 95       	ret

00001796 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1796:	e0 91 93 07 	lds	r30, 0x0793
    179a:	f0 91 94 07 	lds	r31, 0x0794
    179e:	30 97       	sbiw	r30, 0x00	; 0
    17a0:	71 f0       	breq	.+28     	; 0x17be <SYS_TimerStarted+0x28>
    if (t == timer)
    17a2:	e8 17       	cp	r30, r24
    17a4:	f9 07       	cpc	r31, r25
    17a6:	21 f4       	brne	.+8      	; 0x17b0 <SYS_TimerStarted+0x1a>
    17a8:	0c c0       	rjmp	.+24     	; 0x17c2 <SYS_TimerStarted+0x2c>
    17aa:	8e 17       	cp	r24, r30
    17ac:	9f 07       	cpc	r25, r31
    17ae:	59 f0       	breq	.+22     	; 0x17c6 <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    17b0:	01 90       	ld	r0, Z+
    17b2:	f0 81       	ld	r31, Z
    17b4:	e0 2d       	mov	r30, r0
    17b6:	30 97       	sbiw	r30, 0x00	; 0
    17b8:	c1 f7       	brne	.-16     	; 0x17aa <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	08 95       	ret
    17be:	80 e0       	ldi	r24, 0x00	; 0
    17c0:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	08 95       	ret
    17c6:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    17c8:	08 95       	ret

000017ca <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    17d0:	0e 94 cb 0b 	call	0x1796	; 0x1796 <SYS_TimerStarted>
    17d4:	81 11       	cpse	r24, r1
    17d6:	03 c0       	rjmp	.+6      	; 0x17de <SYS_TimerStart+0x14>
    placeTimer(timer);
    17d8:	ce 01       	movw	r24, r28
    17da:	0e 94 62 0b 	call	0x16c4	; 0x16c4 <placeTimer>
}
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	08 95       	ret

000017e4 <ll_first>:
 * lp is list pointer
 */
llobject_t *
ll_first(lp)
llobject_t *lp;
{
    17e4:	fc 01       	movw	r30, r24
    if (LL_IS_EMPTY(lp)) {
    17e6:	82 81       	ldd	r24, Z+2	; 0x02
    17e8:	93 81       	ldd	r25, Z+3	; 0x03
    17ea:	8e 17       	cp	r24, r30
    17ec:	9f 07       	cpc	r25, r31
    17ee:	11 f4       	brne	.+4      	; 0x17f4 <ll_first+0x10>
		return LL_NULL;
    17f0:	80 e0       	ldi	r24, 0x00	; 0
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    }
    return lp->next;
}
    17f4:	08 95       	ret

000017f6 <ll_r_insert>:
llobject_t *
ll_r_insert(ip, ep)
llobject_t *ip;
llobject_t *ep;
{
    llobject_t *tp = ip->next;
    17f6:	dc 01       	movw	r26, r24
    17f8:	12 96       	adiw	r26, 0x02	; 2
    17fa:	ed 91       	ld	r30, X+
    17fc:	fc 91       	ld	r31, X
    17fe:	13 97       	sbiw	r26, 0x03	; 3

    tp->prev = ep;
    1800:	71 83       	std	Z+1, r23	; 0x01
    1802:	60 83       	st	Z, r22
    ep->next = tp;
    1804:	db 01       	movw	r26, r22
    1806:	13 96       	adiw	r26, 0x03	; 3
    1808:	fc 93       	st	X, r31
    180a:	ee 93       	st	-X, r30
    180c:	12 97       	sbiw	r26, 0x02	; 2
    ip->next = ep;
    180e:	fc 01       	movw	r30, r24
    1810:	73 83       	std	Z+3, r23	; 0x03
    1812:	62 83       	std	Z+2, r22	; 0x02
    ep->prev = ip;
    1814:	8d 93       	st	X+, r24
    1816:	9c 93       	st	X, r25

    return ep;
}
    1818:	cb 01       	movw	r24, r22
    181a:	08 95       	ret

0000181c <ll_detach>:
 */
llobject_t *
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    181c:	fb 01       	movw	r30, r22
    if (LL_IS_EMPTY(lp) || lp == ep) {
    181e:	dc 01       	movw	r26, r24
    1820:	12 96       	adiw	r26, 0x02	; 2
    1822:	2d 91       	ld	r18, X+
    1824:	3c 91       	ld	r19, X
    1826:	13 97       	sbiw	r26, 0x03	; 3
    1828:	28 17       	cp	r18, r24
    182a:	39 07       	cpc	r19, r25
    182c:	a1 f0       	breq	.+40     	; 0x1856 <ll_detach+0x3a>
    182e:	86 17       	cp	r24, r22
    1830:	97 07       	cpc	r25, r23
    1832:	a1 f0       	breq	.+40     	; 0x185c <ll_detach+0x40>
		return LL_NULL;
    }

    (ep->prev)->next = ep->next;
    1834:	a0 81       	ld	r26, Z
    1836:	b1 81       	ldd	r27, Z+1	; 0x01
    1838:	82 81       	ldd	r24, Z+2	; 0x02
    183a:	93 81       	ldd	r25, Z+3	; 0x03
    183c:	13 96       	adiw	r26, 0x03	; 3
    183e:	9c 93       	st	X, r25
    1840:	8e 93       	st	-X, r24
    1842:	12 97       	sbiw	r26, 0x02	; 2
    (ep->next)->prev = ep->prev;
    1844:	a2 81       	ldd	r26, Z+2	; 0x02
    1846:	b3 81       	ldd	r27, Z+3	; 0x03
    1848:	80 81       	ld	r24, Z
    184a:	91 81       	ldd	r25, Z+1	; 0x01
    184c:	8d 93       	st	X+, r24
    184e:	9c 93       	st	X, r25

    return ep;
    1850:	86 2f       	mov	r24, r22
    1852:	9f 2f       	mov	r25, r31
    1854:	08 95       	ret
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    if (LL_IS_EMPTY(lp) || lp == ep) {
		return LL_NULL;
    1856:	80 e0       	ldi	r24, 0x00	; 0
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	08 95       	ret
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	90 e0       	ldi	r25, 0x00	; 0

    (ep->prev)->next = ep->next;
    (ep->next)->prev = ep->prev;

    return ep;
}
    1860:	08 95       	ret

00001862 <ll_pop>:
 */
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
    1862:	fc 01       	movw	r30, r24
    1864:	62 81       	ldd	r22, Z+2	; 0x02
    1866:	73 81       	ldd	r23, Z+3	; 0x03
    1868:	68 17       	cp	r22, r24
    186a:	79 07       	cpc	r23, r25
    186c:	19 f0       	breq	.+6      	; 0x1874 <ll_pop+0x12>
		return LL_NULL;
    }
    return LL_DETACH(lp, lp->next);
    186e:	0e 94 0e 0c 	call	0x181c	; 0x181c <ll_detach>
    1872:	08 95       	ret
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
		return LL_NULL;
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	90 e0       	ldi	r25, 0x00	; 0
    }
    return LL_DETACH(lp, lp->next);
}
    1878:	08 95       	ret

0000187a <BMP280_FctnInit>:



void BMP280_FctnInit(BMP280Sensor *this)
{
	this->inherited.vmt = &BMP280_vmt;
    187a:	2c e1       	ldi	r18, 0x1C	; 28
    187c:	32 e0       	ldi	r19, 0x02	; 2
    187e:	fc 01       	movw	r30, r24
    1880:	35 83       	std	Z+5, r19	; 0x05
    1882:	24 83       	std	Z+4, r18	; 0x04
    1884:	08 95       	ret

00001886 <BMP280_Configure>:

int BMP280_Configure(BMP280Sensor *this )
{
	// virtual function
	return 0;
}
    1886:	80 e0       	ldi	r24, 0x00	; 0
    1888:	90 e0       	ldi	r25, 0x00	; 0
    188a:	08 95       	ret

0000188c <BMP280_VTinit>:
	printf("BMP280_Error\n");
	return 0;
}
void BMP280_VTinit( BMP280Sensor* this)
{
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
    188c:	24 e1       	ldi	r18, 0x14	; 20
    188e:	32 e0       	ldi	r19, 0x02	; 2
    1890:	fc 01       	movw	r30, r24
    1892:	31 83       	std	Z+1, r19	; 0x01
    1894:	20 83       	st	Z, r18
    1896:	08 95       	ret

00001898 <BMP280_reset>:

int BMP280_reset( BMP280Sensor* this)
{
    // virtual function
    return 0;
}
    1898:	80 e0       	ldi	r24, 0x00	; 0
    189a:	90 e0       	ldi	r25, 0x00	; 0
    189c:	08 95       	ret

0000189e <BMP280_getType>:

int BMP280_getType(BMP280Sensor* this)
{
    return TYPE_SENSOR;
}
    189e:	82 e0       	ldi	r24, 0x02	; 2
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	08 95       	ret

000018a4 <BMP280_Error>:
	return 0;
}

int BMP280_Error(BMP280Sensor *this )
{
	printf("BMP280_Error\n");
    18a4:	8f ef       	ldi	r24, 0xFF	; 255
    18a6:	93 e0       	ldi	r25, 0x03	; 3
    18a8:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <puts>
	return 0;
}
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	08 95       	ret

000018b2 <BMP280_init>:
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
}

int BMP280_init( BMP280Sensor* this)
{
    printf("BMP280 Sensor Init\n");
    18b2:	8c e0       	ldi	r24, 0x0C	; 12
    18b4:	94 e0       	ldi	r25, 0x04	; 4
    18b6:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <puts>
    return 0;
}
    18ba:	80 e0       	ldi	r24, 0x00	; 0
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	08 95       	ret

000018c0 <BMP280_Request>:
	return 0;
}

int BMP280_Request(BMP280Sensor *this )
{
	printf("BMP280 Request\n");
    18c0:	8f e1       	ldi	r24, 0x1F	; 31
    18c2:	94 e0       	ldi	r25, 0x04	; 4
    18c4:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <puts>
	int Delay = BMP280_StartMeasurment();
    18c8:	0e 94 b8 02 	call	0x570	; 0x570 <BMP280_StartMeasurment>
	if( Delay == 0 )
    18cc:	88 23       	and	r24, r24
    18ce:	19 f0       	breq	.+6      	; 0x18d6 <BMP280_Request+0x16>
		return 0;
	else
		return 2;
    18d0:	82 e0       	ldi	r24, 0x02	; 2
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	08 95       	ret
int BMP280_Request(BMP280Sensor *this )
{
	printf("BMP280 Request\n");
	int Delay = BMP280_StartMeasurment();
	if( Delay == 0 )
		return 0;
    18d6:	80 e0       	ldi	r24, 0x00	; 0
    18d8:	90 e0       	ldi	r25, 0x00	; 0
	else
		return 2;
}
    18da:	08 95       	ret

000018dc <BMP280_Collect>:

int BMP280_Collect(BMP280Sensor *this )
{
    18dc:	cf 93       	push	r28
    18de:	df 93       	push	r29
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
    18e4:	28 97       	sbiw	r28, 0x08	; 8
    18e6:	0f b6       	in	r0, 0x3f	; 63
    18e8:	f8 94       	cli
    18ea:	de bf       	out	0x3e, r29	; 62
    18ec:	0f be       	out	0x3f, r0	; 63
    18ee:	cd bf       	out	0x3d, r28	; 61
	printf("BMP280 Collect\n");
    18f0:	8e e2       	ldi	r24, 0x2E	; 46
    18f2:	94 e0       	ldi	r25, 0x04	; 4
    18f4:	0e 94 3b 15 	call	0x2a76	; 0x2a76 <puts>
	double T, P;
	BMP280_GetTemperatureAndPressure(&T,&P);
    18f8:	be 01       	movw	r22, r28
    18fa:	6b 5f       	subi	r22, 0xFB	; 251
    18fc:	7f 4f       	sbci	r23, 0xFF	; 255
    18fe:	ce 01       	movw	r24, r28
    1900:	01 96       	adiw	r24, 0x01	; 1
    1902:	0e 94 01 06 	call	0xc02	; 0xc02 <BMP280_GetTemperatureAndPressure>
	printf("Temperature = %.3f\nPressure = %.3f\n",T,P);
    1906:	88 85       	ldd	r24, Y+8	; 0x08
    1908:	8f 93       	push	r24
    190a:	8f 81       	ldd	r24, Y+7	; 0x07
    190c:	8f 93       	push	r24
    190e:	8e 81       	ldd	r24, Y+6	; 0x06
    1910:	8f 93       	push	r24
    1912:	8d 81       	ldd	r24, Y+5	; 0x05
    1914:	8f 93       	push	r24
    1916:	8c 81       	ldd	r24, Y+4	; 0x04
    1918:	8f 93       	push	r24
    191a:	8b 81       	ldd	r24, Y+3	; 0x03
    191c:	8f 93       	push	r24
    191e:	8a 81       	ldd	r24, Y+2	; 0x02
    1920:	8f 93       	push	r24
    1922:	89 81       	ldd	r24, Y+1	; 0x01
    1924:	8f 93       	push	r24
    1926:	8d e3       	ldi	r24, 0x3D	; 61
    1928:	94 e0       	ldi	r25, 0x04	; 4
    192a:	9f 93       	push	r25
    192c:	8f 93       	push	r24
    192e:	0e 94 25 15 	call	0x2a4a	; 0x2a4a <printf>
	return 0;
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	f8 94       	cli
    1936:	de bf       	out	0x3e, r29	; 62
    1938:	0f be       	out	0x3f, r0	; 63
    193a:	cd bf       	out	0x3d, r28	; 61
}
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	90 e0       	ldi	r25, 0x00	; 0
    1940:	28 96       	adiw	r28, 0x08	; 8
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	f8 94       	cli
    1946:	de bf       	out	0x3e, r29	; 62
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	cd bf       	out	0x3d, r28	; 61
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	08 95       	ret

00001952 <New_BMP280_Sensor>:
    return TYPE_SENSOR;
}


BMP280Sensor* New_BMP280_Sensor( int num)
{
    1952:	cf 93       	push	r28
    1954:	df 93       	push	r29
    1956:	ec 01       	movw	r28, r24
	BMP280Sensor *p = malloc(sizeof(BMP280Sensor));
    1958:	86 e0       	ldi	r24, 0x06	; 6
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 d2 12 	call	0x25a4	; 0x25a4 <malloc>
    1960:	fc 01       	movw	r30, r24
	printf("BMP280_Error\n");
	return 0;
}
void BMP280_VTinit( BMP280Sensor* this)
{
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
    1962:	84 e1       	ldi	r24, 0x14	; 20
    1964:	92 e0       	ldi	r25, 0x02	; 2
    1966:	91 83       	std	Z+1, r25	; 0x01
    1968:	80 83       	st	Z, r24



void BMP280_FctnInit(BMP280Sensor *this)
{
	this->inherited.vmt = &BMP280_vmt;
    196a:	8c e1       	ldi	r24, 0x1C	; 28
    196c:	92 e0       	ldi	r25, 0x02	; 2
    196e:	95 83       	std	Z+5, r25	; 0x05
    1970:	84 83       	std	Z+4, r24	; 0x04
BMP280Sensor* New_BMP280_Sensor( int num)
{
	BMP280Sensor *p = malloc(sizeof(BMP280Sensor));
    BMP280_VTinit( p );
    BMP280_FctnInit( p );
	p->inherited.test_num = num;
    1972:	d3 83       	std	Z+3, r29	; 0x03
    1974:	c2 83       	std	Z+2, r28	; 0x02
	return p;
}
    1976:	cf 01       	movw	r24, r30
    1978:	df 91       	pop	r29
    197a:	cf 91       	pop	r28
    197c:	08 95       	ret

0000197e <__subsf3>:
    197e:	50 58       	subi	r21, 0x80	; 128

00001980 <__addsf3>:
    1980:	bb 27       	eor	r27, r27
    1982:	aa 27       	eor	r26, r26
    1984:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__addsf3x>
    1988:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__fp_round>
    198c:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <__fp_pscA>
    1990:	38 f0       	brcs	.+14     	; 0x19a0 <__addsf3+0x20>
    1992:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__fp_pscB>
    1996:	20 f0       	brcs	.+8      	; 0x19a0 <__addsf3+0x20>
    1998:	39 f4       	brne	.+14     	; 0x19a8 <__addsf3+0x28>
    199a:	9f 3f       	cpi	r25, 0xFF	; 255
    199c:	19 f4       	brne	.+6      	; 0x19a4 <__addsf3+0x24>
    199e:	26 f4       	brtc	.+8      	; 0x19a8 <__addsf3+0x28>
    19a0:	0c 94 40 0e 	jmp	0x1c80	; 0x1c80 <__fp_nan>
    19a4:	0e f4       	brtc	.+2      	; 0x19a8 <__addsf3+0x28>
    19a6:	e0 95       	com	r30
    19a8:	e7 fb       	bst	r30, 7
    19aa:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__fp_inf>

000019ae <__addsf3x>:
    19ae:	e9 2f       	mov	r30, r25
    19b0:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__fp_split3>
    19b4:	58 f3       	brcs	.-42     	; 0x198c <__addsf3+0xc>
    19b6:	ba 17       	cp	r27, r26
    19b8:	62 07       	cpc	r22, r18
    19ba:	73 07       	cpc	r23, r19
    19bc:	84 07       	cpc	r24, r20
    19be:	95 07       	cpc	r25, r21
    19c0:	20 f0       	brcs	.+8      	; 0x19ca <__addsf3x+0x1c>
    19c2:	79 f4       	brne	.+30     	; 0x19e2 <__addsf3x+0x34>
    19c4:	a6 f5       	brtc	.+104    	; 0x1a2e <__addsf3x+0x80>
    19c6:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__fp_zero>
    19ca:	0e f4       	brtc	.+2      	; 0x19ce <__addsf3x+0x20>
    19cc:	e0 95       	com	r30
    19ce:	0b 2e       	mov	r0, r27
    19d0:	ba 2f       	mov	r27, r26
    19d2:	a0 2d       	mov	r26, r0
    19d4:	0b 01       	movw	r0, r22
    19d6:	b9 01       	movw	r22, r18
    19d8:	90 01       	movw	r18, r0
    19da:	0c 01       	movw	r0, r24
    19dc:	ca 01       	movw	r24, r20
    19de:	a0 01       	movw	r20, r0
    19e0:	11 24       	eor	r1, r1
    19e2:	ff 27       	eor	r31, r31
    19e4:	59 1b       	sub	r21, r25
    19e6:	99 f0       	breq	.+38     	; 0x1a0e <__addsf3x+0x60>
    19e8:	59 3f       	cpi	r21, 0xF9	; 249
    19ea:	50 f4       	brcc	.+20     	; 0x1a00 <__addsf3x+0x52>
    19ec:	50 3e       	cpi	r21, 0xE0	; 224
    19ee:	68 f1       	brcs	.+90     	; 0x1a4a <__addsf3x+0x9c>
    19f0:	1a 16       	cp	r1, r26
    19f2:	f0 40       	sbci	r31, 0x00	; 0
    19f4:	a2 2f       	mov	r26, r18
    19f6:	23 2f       	mov	r18, r19
    19f8:	34 2f       	mov	r19, r20
    19fa:	44 27       	eor	r20, r20
    19fc:	58 5f       	subi	r21, 0xF8	; 248
    19fe:	f3 cf       	rjmp	.-26     	; 0x19e6 <__addsf3x+0x38>
    1a00:	46 95       	lsr	r20
    1a02:	37 95       	ror	r19
    1a04:	27 95       	ror	r18
    1a06:	a7 95       	ror	r26
    1a08:	f0 40       	sbci	r31, 0x00	; 0
    1a0a:	53 95       	inc	r21
    1a0c:	c9 f7       	brne	.-14     	; 0x1a00 <__addsf3x+0x52>
    1a0e:	7e f4       	brtc	.+30     	; 0x1a2e <__addsf3x+0x80>
    1a10:	1f 16       	cp	r1, r31
    1a12:	ba 0b       	sbc	r27, r26
    1a14:	62 0b       	sbc	r22, r18
    1a16:	73 0b       	sbc	r23, r19
    1a18:	84 0b       	sbc	r24, r20
    1a1a:	ba f0       	brmi	.+46     	; 0x1a4a <__addsf3x+0x9c>
    1a1c:	91 50       	subi	r25, 0x01	; 1
    1a1e:	a1 f0       	breq	.+40     	; 0x1a48 <__addsf3x+0x9a>
    1a20:	ff 0f       	add	r31, r31
    1a22:	bb 1f       	adc	r27, r27
    1a24:	66 1f       	adc	r22, r22
    1a26:	77 1f       	adc	r23, r23
    1a28:	88 1f       	adc	r24, r24
    1a2a:	c2 f7       	brpl	.-16     	; 0x1a1c <__addsf3x+0x6e>
    1a2c:	0e c0       	rjmp	.+28     	; 0x1a4a <__addsf3x+0x9c>
    1a2e:	ba 0f       	add	r27, r26
    1a30:	62 1f       	adc	r22, r18
    1a32:	73 1f       	adc	r23, r19
    1a34:	84 1f       	adc	r24, r20
    1a36:	48 f4       	brcc	.+18     	; 0x1a4a <__addsf3x+0x9c>
    1a38:	87 95       	ror	r24
    1a3a:	77 95       	ror	r23
    1a3c:	67 95       	ror	r22
    1a3e:	b7 95       	ror	r27
    1a40:	f7 95       	ror	r31
    1a42:	9e 3f       	cpi	r25, 0xFE	; 254
    1a44:	08 f0       	brcs	.+2      	; 0x1a48 <__addsf3x+0x9a>
    1a46:	b0 cf       	rjmp	.-160    	; 0x19a8 <__addsf3+0x28>
    1a48:	93 95       	inc	r25
    1a4a:	88 0f       	add	r24, r24
    1a4c:	08 f0       	brcs	.+2      	; 0x1a50 <__addsf3x+0xa2>
    1a4e:	99 27       	eor	r25, r25
    1a50:	ee 0f       	add	r30, r30
    1a52:	97 95       	ror	r25
    1a54:	87 95       	ror	r24
    1a56:	08 95       	ret

00001a58 <__cmpsf2>:
    1a58:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__fp_cmp>
    1a5c:	08 f4       	brcc	.+2      	; 0x1a60 <__cmpsf2+0x8>
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	08 95       	ret

00001a62 <__divsf3>:
    1a62:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <__divsf3x>
    1a66:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__fp_round>
    1a6a:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__fp_pscB>
    1a6e:	58 f0       	brcs	.+22     	; 0x1a86 <__divsf3+0x24>
    1a70:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <__fp_pscA>
    1a74:	40 f0       	brcs	.+16     	; 0x1a86 <__divsf3+0x24>
    1a76:	29 f4       	brne	.+10     	; 0x1a82 <__divsf3+0x20>
    1a78:	5f 3f       	cpi	r21, 0xFF	; 255
    1a7a:	29 f0       	breq	.+10     	; 0x1a86 <__divsf3+0x24>
    1a7c:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__fp_inf>
    1a80:	51 11       	cpse	r21, r1
    1a82:	0c 94 85 0e 	jmp	0x1d0a	; 0x1d0a <__fp_szero>
    1a86:	0c 94 40 0e 	jmp	0x1c80	; 0x1c80 <__fp_nan>

00001a8a <__divsf3x>:
    1a8a:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__fp_split3>
    1a8e:	68 f3       	brcs	.-38     	; 0x1a6a <__divsf3+0x8>

00001a90 <__divsf3_pse>:
    1a90:	99 23       	and	r25, r25
    1a92:	b1 f3       	breq	.-20     	; 0x1a80 <__divsf3+0x1e>
    1a94:	55 23       	and	r21, r21
    1a96:	91 f3       	breq	.-28     	; 0x1a7c <__divsf3+0x1a>
    1a98:	95 1b       	sub	r25, r21
    1a9a:	55 0b       	sbc	r21, r21
    1a9c:	bb 27       	eor	r27, r27
    1a9e:	aa 27       	eor	r26, r26
    1aa0:	62 17       	cp	r22, r18
    1aa2:	73 07       	cpc	r23, r19
    1aa4:	84 07       	cpc	r24, r20
    1aa6:	38 f0       	brcs	.+14     	; 0x1ab6 <__divsf3_pse+0x26>
    1aa8:	9f 5f       	subi	r25, 0xFF	; 255
    1aaa:	5f 4f       	sbci	r21, 0xFF	; 255
    1aac:	22 0f       	add	r18, r18
    1aae:	33 1f       	adc	r19, r19
    1ab0:	44 1f       	adc	r20, r20
    1ab2:	aa 1f       	adc	r26, r26
    1ab4:	a9 f3       	breq	.-22     	; 0x1aa0 <__divsf3_pse+0x10>
    1ab6:	35 d0       	rcall	.+106    	; 0x1b22 <__divsf3_pse+0x92>
    1ab8:	0e 2e       	mov	r0, r30
    1aba:	3a f0       	brmi	.+14     	; 0x1aca <__divsf3_pse+0x3a>
    1abc:	e0 e8       	ldi	r30, 0x80	; 128
    1abe:	32 d0       	rcall	.+100    	; 0x1b24 <__divsf3_pse+0x94>
    1ac0:	91 50       	subi	r25, 0x01	; 1
    1ac2:	50 40       	sbci	r21, 0x00	; 0
    1ac4:	e6 95       	lsr	r30
    1ac6:	00 1c       	adc	r0, r0
    1ac8:	ca f7       	brpl	.-14     	; 0x1abc <__divsf3_pse+0x2c>
    1aca:	2b d0       	rcall	.+86     	; 0x1b22 <__divsf3_pse+0x92>
    1acc:	fe 2f       	mov	r31, r30
    1ace:	29 d0       	rcall	.+82     	; 0x1b22 <__divsf3_pse+0x92>
    1ad0:	66 0f       	add	r22, r22
    1ad2:	77 1f       	adc	r23, r23
    1ad4:	88 1f       	adc	r24, r24
    1ad6:	bb 1f       	adc	r27, r27
    1ad8:	26 17       	cp	r18, r22
    1ada:	37 07       	cpc	r19, r23
    1adc:	48 07       	cpc	r20, r24
    1ade:	ab 07       	cpc	r26, r27
    1ae0:	b0 e8       	ldi	r27, 0x80	; 128
    1ae2:	09 f0       	breq	.+2      	; 0x1ae6 <__divsf3_pse+0x56>
    1ae4:	bb 0b       	sbc	r27, r27
    1ae6:	80 2d       	mov	r24, r0
    1ae8:	bf 01       	movw	r22, r30
    1aea:	ff 27       	eor	r31, r31
    1aec:	93 58       	subi	r25, 0x83	; 131
    1aee:	5f 4f       	sbci	r21, 0xFF	; 255
    1af0:	3a f0       	brmi	.+14     	; 0x1b00 <__divsf3_pse+0x70>
    1af2:	9e 3f       	cpi	r25, 0xFE	; 254
    1af4:	51 05       	cpc	r21, r1
    1af6:	78 f0       	brcs	.+30     	; 0x1b16 <__divsf3_pse+0x86>
    1af8:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__fp_inf>
    1afc:	0c 94 85 0e 	jmp	0x1d0a	; 0x1d0a <__fp_szero>
    1b00:	5f 3f       	cpi	r21, 0xFF	; 255
    1b02:	e4 f3       	brlt	.-8      	; 0x1afc <__divsf3_pse+0x6c>
    1b04:	98 3e       	cpi	r25, 0xE8	; 232
    1b06:	d4 f3       	brlt	.-12     	; 0x1afc <__divsf3_pse+0x6c>
    1b08:	86 95       	lsr	r24
    1b0a:	77 95       	ror	r23
    1b0c:	67 95       	ror	r22
    1b0e:	b7 95       	ror	r27
    1b10:	f7 95       	ror	r31
    1b12:	9f 5f       	subi	r25, 0xFF	; 255
    1b14:	c9 f7       	brne	.-14     	; 0x1b08 <__divsf3_pse+0x78>
    1b16:	88 0f       	add	r24, r24
    1b18:	91 1d       	adc	r25, r1
    1b1a:	96 95       	lsr	r25
    1b1c:	87 95       	ror	r24
    1b1e:	97 f9       	bld	r25, 7
    1b20:	08 95       	ret
    1b22:	e1 e0       	ldi	r30, 0x01	; 1
    1b24:	66 0f       	add	r22, r22
    1b26:	77 1f       	adc	r23, r23
    1b28:	88 1f       	adc	r24, r24
    1b2a:	bb 1f       	adc	r27, r27
    1b2c:	62 17       	cp	r22, r18
    1b2e:	73 07       	cpc	r23, r19
    1b30:	84 07       	cpc	r24, r20
    1b32:	ba 07       	cpc	r27, r26
    1b34:	20 f0       	brcs	.+8      	; 0x1b3e <__divsf3_pse+0xae>
    1b36:	62 1b       	sub	r22, r18
    1b38:	73 0b       	sbc	r23, r19
    1b3a:	84 0b       	sbc	r24, r20
    1b3c:	ba 0b       	sbc	r27, r26
    1b3e:	ee 1f       	adc	r30, r30
    1b40:	88 f7       	brcc	.-30     	; 0x1b24 <__divsf3_pse+0x94>
    1b42:	e0 95       	com	r30
    1b44:	08 95       	ret

00001b46 <__fixsfsi>:
    1b46:	0e 94 aa 0d 	call	0x1b54	; 0x1b54 <__fixunssfsi>
    1b4a:	68 94       	set
    1b4c:	b1 11       	cpse	r27, r1
    1b4e:	0c 94 85 0e 	jmp	0x1d0a	; 0x1d0a <__fp_szero>
    1b52:	08 95       	ret

00001b54 <__fixunssfsi>:
    1b54:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <__fp_splitA>
    1b58:	88 f0       	brcs	.+34     	; 0x1b7c <__fixunssfsi+0x28>
    1b5a:	9f 57       	subi	r25, 0x7F	; 127
    1b5c:	98 f0       	brcs	.+38     	; 0x1b84 <__fixunssfsi+0x30>
    1b5e:	b9 2f       	mov	r27, r25
    1b60:	99 27       	eor	r25, r25
    1b62:	b7 51       	subi	r27, 0x17	; 23
    1b64:	b0 f0       	brcs	.+44     	; 0x1b92 <__fixunssfsi+0x3e>
    1b66:	e1 f0       	breq	.+56     	; 0x1ba0 <__fixunssfsi+0x4c>
    1b68:	66 0f       	add	r22, r22
    1b6a:	77 1f       	adc	r23, r23
    1b6c:	88 1f       	adc	r24, r24
    1b6e:	99 1f       	adc	r25, r25
    1b70:	1a f0       	brmi	.+6      	; 0x1b78 <__fixunssfsi+0x24>
    1b72:	ba 95       	dec	r27
    1b74:	c9 f7       	brne	.-14     	; 0x1b68 <__fixunssfsi+0x14>
    1b76:	14 c0       	rjmp	.+40     	; 0x1ba0 <__fixunssfsi+0x4c>
    1b78:	b1 30       	cpi	r27, 0x01	; 1
    1b7a:	91 f0       	breq	.+36     	; 0x1ba0 <__fixunssfsi+0x4c>
    1b7c:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <__fp_zero>
    1b80:	b1 e0       	ldi	r27, 0x01	; 1
    1b82:	08 95       	ret
    1b84:	0c 94 84 0e 	jmp	0x1d08	; 0x1d08 <__fp_zero>
    1b88:	67 2f       	mov	r22, r23
    1b8a:	78 2f       	mov	r23, r24
    1b8c:	88 27       	eor	r24, r24
    1b8e:	b8 5f       	subi	r27, 0xF8	; 248
    1b90:	39 f0       	breq	.+14     	; 0x1ba0 <__fixunssfsi+0x4c>
    1b92:	b9 3f       	cpi	r27, 0xF9	; 249
    1b94:	cc f3       	brlt	.-14     	; 0x1b88 <__fixunssfsi+0x34>
    1b96:	86 95       	lsr	r24
    1b98:	77 95       	ror	r23
    1b9a:	67 95       	ror	r22
    1b9c:	b3 95       	inc	r27
    1b9e:	d9 f7       	brne	.-10     	; 0x1b96 <__fixunssfsi+0x42>
    1ba0:	3e f4       	brtc	.+14     	; 0x1bb0 <__fixunssfsi+0x5c>
    1ba2:	90 95       	com	r25
    1ba4:	80 95       	com	r24
    1ba6:	70 95       	com	r23
    1ba8:	61 95       	neg	r22
    1baa:	7f 4f       	sbci	r23, 0xFF	; 255
    1bac:	8f 4f       	sbci	r24, 0xFF	; 255
    1bae:	9f 4f       	sbci	r25, 0xFF	; 255
    1bb0:	08 95       	ret

00001bb2 <__floatunsisf>:
    1bb2:	e8 94       	clt
    1bb4:	09 c0       	rjmp	.+18     	; 0x1bc8 <__floatsisf+0x12>

00001bb6 <__floatsisf>:
    1bb6:	97 fb       	bst	r25, 7
    1bb8:	3e f4       	brtc	.+14     	; 0x1bc8 <__floatsisf+0x12>
    1bba:	90 95       	com	r25
    1bbc:	80 95       	com	r24
    1bbe:	70 95       	com	r23
    1bc0:	61 95       	neg	r22
    1bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bc4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc8:	99 23       	and	r25, r25
    1bca:	a9 f0       	breq	.+42     	; 0x1bf6 <__floatsisf+0x40>
    1bcc:	f9 2f       	mov	r31, r25
    1bce:	96 e9       	ldi	r25, 0x96	; 150
    1bd0:	bb 27       	eor	r27, r27
    1bd2:	93 95       	inc	r25
    1bd4:	f6 95       	lsr	r31
    1bd6:	87 95       	ror	r24
    1bd8:	77 95       	ror	r23
    1bda:	67 95       	ror	r22
    1bdc:	b7 95       	ror	r27
    1bde:	f1 11       	cpse	r31, r1
    1be0:	f8 cf       	rjmp	.-16     	; 0x1bd2 <__floatsisf+0x1c>
    1be2:	fa f4       	brpl	.+62     	; 0x1c22 <__floatsisf+0x6c>
    1be4:	bb 0f       	add	r27, r27
    1be6:	11 f4       	brne	.+4      	; 0x1bec <__floatsisf+0x36>
    1be8:	60 ff       	sbrs	r22, 0
    1bea:	1b c0       	rjmp	.+54     	; 0x1c22 <__floatsisf+0x6c>
    1bec:	6f 5f       	subi	r22, 0xFF	; 255
    1bee:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf0:	8f 4f       	sbci	r24, 0xFF	; 255
    1bf2:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf4:	16 c0       	rjmp	.+44     	; 0x1c22 <__floatsisf+0x6c>
    1bf6:	88 23       	and	r24, r24
    1bf8:	11 f0       	breq	.+4      	; 0x1bfe <__floatsisf+0x48>
    1bfa:	96 e9       	ldi	r25, 0x96	; 150
    1bfc:	11 c0       	rjmp	.+34     	; 0x1c20 <__floatsisf+0x6a>
    1bfe:	77 23       	and	r23, r23
    1c00:	21 f0       	breq	.+8      	; 0x1c0a <__floatsisf+0x54>
    1c02:	9e e8       	ldi	r25, 0x8E	; 142
    1c04:	87 2f       	mov	r24, r23
    1c06:	76 2f       	mov	r23, r22
    1c08:	05 c0       	rjmp	.+10     	; 0x1c14 <__floatsisf+0x5e>
    1c0a:	66 23       	and	r22, r22
    1c0c:	71 f0       	breq	.+28     	; 0x1c2a <__floatsisf+0x74>
    1c0e:	96 e8       	ldi	r25, 0x86	; 134
    1c10:	86 2f       	mov	r24, r22
    1c12:	70 e0       	ldi	r23, 0x00	; 0
    1c14:	60 e0       	ldi	r22, 0x00	; 0
    1c16:	2a f0       	brmi	.+10     	; 0x1c22 <__floatsisf+0x6c>
    1c18:	9a 95       	dec	r25
    1c1a:	66 0f       	add	r22, r22
    1c1c:	77 1f       	adc	r23, r23
    1c1e:	88 1f       	adc	r24, r24
    1c20:	da f7       	brpl	.-10     	; 0x1c18 <__floatsisf+0x62>
    1c22:	88 0f       	add	r24, r24
    1c24:	96 95       	lsr	r25
    1c26:	87 95       	ror	r24
    1c28:	97 f9       	bld	r25, 7
    1c2a:	08 95       	ret

00001c2c <__fp_cmp>:
    1c2c:	99 0f       	add	r25, r25
    1c2e:	00 08       	sbc	r0, r0
    1c30:	55 0f       	add	r21, r21
    1c32:	aa 0b       	sbc	r26, r26
    1c34:	e0 e8       	ldi	r30, 0x80	; 128
    1c36:	fe ef       	ldi	r31, 0xFE	; 254
    1c38:	16 16       	cp	r1, r22
    1c3a:	17 06       	cpc	r1, r23
    1c3c:	e8 07       	cpc	r30, r24
    1c3e:	f9 07       	cpc	r31, r25
    1c40:	c0 f0       	brcs	.+48     	; 0x1c72 <__fp_cmp+0x46>
    1c42:	12 16       	cp	r1, r18
    1c44:	13 06       	cpc	r1, r19
    1c46:	e4 07       	cpc	r30, r20
    1c48:	f5 07       	cpc	r31, r21
    1c4a:	98 f0       	brcs	.+38     	; 0x1c72 <__fp_cmp+0x46>
    1c4c:	62 1b       	sub	r22, r18
    1c4e:	73 0b       	sbc	r23, r19
    1c50:	84 0b       	sbc	r24, r20
    1c52:	95 0b       	sbc	r25, r21
    1c54:	39 f4       	brne	.+14     	; 0x1c64 <__fp_cmp+0x38>
    1c56:	0a 26       	eor	r0, r26
    1c58:	61 f0       	breq	.+24     	; 0x1c72 <__fp_cmp+0x46>
    1c5a:	23 2b       	or	r18, r19
    1c5c:	24 2b       	or	r18, r20
    1c5e:	25 2b       	or	r18, r21
    1c60:	21 f4       	brne	.+8      	; 0x1c6a <__fp_cmp+0x3e>
    1c62:	08 95       	ret
    1c64:	0a 26       	eor	r0, r26
    1c66:	09 f4       	brne	.+2      	; 0x1c6a <__fp_cmp+0x3e>
    1c68:	a1 40       	sbci	r26, 0x01	; 1
    1c6a:	a6 95       	lsr	r26
    1c6c:	8f ef       	ldi	r24, 0xFF	; 255
    1c6e:	81 1d       	adc	r24, r1
    1c70:	81 1d       	adc	r24, r1
    1c72:	08 95       	ret

00001c74 <__fp_inf>:
    1c74:	97 f9       	bld	r25, 7
    1c76:	9f 67       	ori	r25, 0x7F	; 127
    1c78:	80 e8       	ldi	r24, 0x80	; 128
    1c7a:	70 e0       	ldi	r23, 0x00	; 0
    1c7c:	60 e0       	ldi	r22, 0x00	; 0
    1c7e:	08 95       	ret

00001c80 <__fp_nan>:
    1c80:	9f ef       	ldi	r25, 0xFF	; 255
    1c82:	80 ec       	ldi	r24, 0xC0	; 192
    1c84:	08 95       	ret

00001c86 <__fp_pscA>:
    1c86:	00 24       	eor	r0, r0
    1c88:	0a 94       	dec	r0
    1c8a:	16 16       	cp	r1, r22
    1c8c:	17 06       	cpc	r1, r23
    1c8e:	18 06       	cpc	r1, r24
    1c90:	09 06       	cpc	r0, r25
    1c92:	08 95       	ret

00001c94 <__fp_pscB>:
    1c94:	00 24       	eor	r0, r0
    1c96:	0a 94       	dec	r0
    1c98:	12 16       	cp	r1, r18
    1c9a:	13 06       	cpc	r1, r19
    1c9c:	14 06       	cpc	r1, r20
    1c9e:	05 06       	cpc	r0, r21
    1ca0:	08 95       	ret

00001ca2 <__fp_round>:
    1ca2:	09 2e       	mov	r0, r25
    1ca4:	03 94       	inc	r0
    1ca6:	00 0c       	add	r0, r0
    1ca8:	11 f4       	brne	.+4      	; 0x1cae <__fp_round+0xc>
    1caa:	88 23       	and	r24, r24
    1cac:	52 f0       	brmi	.+20     	; 0x1cc2 <__fp_round+0x20>
    1cae:	bb 0f       	add	r27, r27
    1cb0:	40 f4       	brcc	.+16     	; 0x1cc2 <__fp_round+0x20>
    1cb2:	bf 2b       	or	r27, r31
    1cb4:	11 f4       	brne	.+4      	; 0x1cba <__fp_round+0x18>
    1cb6:	60 ff       	sbrs	r22, 0
    1cb8:	04 c0       	rjmp	.+8      	; 0x1cc2 <__fp_round+0x20>
    1cba:	6f 5f       	subi	r22, 0xFF	; 255
    1cbc:	7f 4f       	sbci	r23, 0xFF	; 255
    1cbe:	8f 4f       	sbci	r24, 0xFF	; 255
    1cc0:	9f 4f       	sbci	r25, 0xFF	; 255
    1cc2:	08 95       	ret

00001cc4 <__fp_split3>:
    1cc4:	57 fd       	sbrc	r21, 7
    1cc6:	90 58       	subi	r25, 0x80	; 128
    1cc8:	44 0f       	add	r20, r20
    1cca:	55 1f       	adc	r21, r21
    1ccc:	59 f0       	breq	.+22     	; 0x1ce4 <__fp_splitA+0x10>
    1cce:	5f 3f       	cpi	r21, 0xFF	; 255
    1cd0:	71 f0       	breq	.+28     	; 0x1cee <__fp_splitA+0x1a>
    1cd2:	47 95       	ror	r20

00001cd4 <__fp_splitA>:
    1cd4:	88 0f       	add	r24, r24
    1cd6:	97 fb       	bst	r25, 7
    1cd8:	99 1f       	adc	r25, r25
    1cda:	61 f0       	breq	.+24     	; 0x1cf4 <__fp_splitA+0x20>
    1cdc:	9f 3f       	cpi	r25, 0xFF	; 255
    1cde:	79 f0       	breq	.+30     	; 0x1cfe <__fp_splitA+0x2a>
    1ce0:	87 95       	ror	r24
    1ce2:	08 95       	ret
    1ce4:	12 16       	cp	r1, r18
    1ce6:	13 06       	cpc	r1, r19
    1ce8:	14 06       	cpc	r1, r20
    1cea:	55 1f       	adc	r21, r21
    1cec:	f2 cf       	rjmp	.-28     	; 0x1cd2 <__fp_split3+0xe>
    1cee:	46 95       	lsr	r20
    1cf0:	f1 df       	rcall	.-30     	; 0x1cd4 <__fp_splitA>
    1cf2:	08 c0       	rjmp	.+16     	; 0x1d04 <__fp_splitA+0x30>
    1cf4:	16 16       	cp	r1, r22
    1cf6:	17 06       	cpc	r1, r23
    1cf8:	18 06       	cpc	r1, r24
    1cfa:	99 1f       	adc	r25, r25
    1cfc:	f1 cf       	rjmp	.-30     	; 0x1ce0 <__fp_splitA+0xc>
    1cfe:	86 95       	lsr	r24
    1d00:	71 05       	cpc	r23, r1
    1d02:	61 05       	cpc	r22, r1
    1d04:	08 94       	sec
    1d06:	08 95       	ret

00001d08 <__fp_zero>:
    1d08:	e8 94       	clt

00001d0a <__fp_szero>:
    1d0a:	bb 27       	eor	r27, r27
    1d0c:	66 27       	eor	r22, r22
    1d0e:	77 27       	eor	r23, r23
    1d10:	cb 01       	movw	r24, r22
    1d12:	97 f9       	bld	r25, 7
    1d14:	08 95       	ret

00001d16 <__gesf2>:
    1d16:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <__fp_cmp>
    1d1a:	08 f4       	brcc	.+2      	; 0x1d1e <__gesf2+0x8>
    1d1c:	8f ef       	ldi	r24, 0xFF	; 255
    1d1e:	08 95       	ret

00001d20 <__mulsf3>:
    1d20:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <__mulsf3x>
    1d24:	0c 94 51 0e 	jmp	0x1ca2	; 0x1ca2 <__fp_round>
    1d28:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <__fp_pscA>
    1d2c:	38 f0       	brcs	.+14     	; 0x1d3c <__mulsf3+0x1c>
    1d2e:	0e 94 4a 0e 	call	0x1c94	; 0x1c94 <__fp_pscB>
    1d32:	20 f0       	brcs	.+8      	; 0x1d3c <__mulsf3+0x1c>
    1d34:	95 23       	and	r25, r21
    1d36:	11 f0       	breq	.+4      	; 0x1d3c <__mulsf3+0x1c>
    1d38:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__fp_inf>
    1d3c:	0c 94 40 0e 	jmp	0x1c80	; 0x1c80 <__fp_nan>
    1d40:	11 24       	eor	r1, r1
    1d42:	0c 94 85 0e 	jmp	0x1d0a	; 0x1d0a <__fp_szero>

00001d46 <__mulsf3x>:
    1d46:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <__fp_split3>
    1d4a:	70 f3       	brcs	.-36     	; 0x1d28 <__mulsf3+0x8>

00001d4c <__mulsf3_pse>:
    1d4c:	95 9f       	mul	r25, r21
    1d4e:	c1 f3       	breq	.-16     	; 0x1d40 <__mulsf3+0x20>
    1d50:	95 0f       	add	r25, r21
    1d52:	50 e0       	ldi	r21, 0x00	; 0
    1d54:	55 1f       	adc	r21, r21
    1d56:	62 9f       	mul	r22, r18
    1d58:	f0 01       	movw	r30, r0
    1d5a:	72 9f       	mul	r23, r18
    1d5c:	bb 27       	eor	r27, r27
    1d5e:	f0 0d       	add	r31, r0
    1d60:	b1 1d       	adc	r27, r1
    1d62:	63 9f       	mul	r22, r19
    1d64:	aa 27       	eor	r26, r26
    1d66:	f0 0d       	add	r31, r0
    1d68:	b1 1d       	adc	r27, r1
    1d6a:	aa 1f       	adc	r26, r26
    1d6c:	64 9f       	mul	r22, r20
    1d6e:	66 27       	eor	r22, r22
    1d70:	b0 0d       	add	r27, r0
    1d72:	a1 1d       	adc	r26, r1
    1d74:	66 1f       	adc	r22, r22
    1d76:	82 9f       	mul	r24, r18
    1d78:	22 27       	eor	r18, r18
    1d7a:	b0 0d       	add	r27, r0
    1d7c:	a1 1d       	adc	r26, r1
    1d7e:	62 1f       	adc	r22, r18
    1d80:	73 9f       	mul	r23, r19
    1d82:	b0 0d       	add	r27, r0
    1d84:	a1 1d       	adc	r26, r1
    1d86:	62 1f       	adc	r22, r18
    1d88:	83 9f       	mul	r24, r19
    1d8a:	a0 0d       	add	r26, r0
    1d8c:	61 1d       	adc	r22, r1
    1d8e:	22 1f       	adc	r18, r18
    1d90:	74 9f       	mul	r23, r20
    1d92:	33 27       	eor	r19, r19
    1d94:	a0 0d       	add	r26, r0
    1d96:	61 1d       	adc	r22, r1
    1d98:	23 1f       	adc	r18, r19
    1d9a:	84 9f       	mul	r24, r20
    1d9c:	60 0d       	add	r22, r0
    1d9e:	21 1d       	adc	r18, r1
    1da0:	82 2f       	mov	r24, r18
    1da2:	76 2f       	mov	r23, r22
    1da4:	6a 2f       	mov	r22, r26
    1da6:	11 24       	eor	r1, r1
    1da8:	9f 57       	subi	r25, 0x7F	; 127
    1daa:	50 40       	sbci	r21, 0x00	; 0
    1dac:	9a f0       	brmi	.+38     	; 0x1dd4 <__mulsf3_pse+0x88>
    1dae:	f1 f0       	breq	.+60     	; 0x1dec <__mulsf3_pse+0xa0>
    1db0:	88 23       	and	r24, r24
    1db2:	4a f0       	brmi	.+18     	; 0x1dc6 <__mulsf3_pse+0x7a>
    1db4:	ee 0f       	add	r30, r30
    1db6:	ff 1f       	adc	r31, r31
    1db8:	bb 1f       	adc	r27, r27
    1dba:	66 1f       	adc	r22, r22
    1dbc:	77 1f       	adc	r23, r23
    1dbe:	88 1f       	adc	r24, r24
    1dc0:	91 50       	subi	r25, 0x01	; 1
    1dc2:	50 40       	sbci	r21, 0x00	; 0
    1dc4:	a9 f7       	brne	.-22     	; 0x1db0 <__mulsf3_pse+0x64>
    1dc6:	9e 3f       	cpi	r25, 0xFE	; 254
    1dc8:	51 05       	cpc	r21, r1
    1dca:	80 f0       	brcs	.+32     	; 0x1dec <__mulsf3_pse+0xa0>
    1dcc:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__fp_inf>
    1dd0:	0c 94 85 0e 	jmp	0x1d0a	; 0x1d0a <__fp_szero>
    1dd4:	5f 3f       	cpi	r21, 0xFF	; 255
    1dd6:	e4 f3       	brlt	.-8      	; 0x1dd0 <__mulsf3_pse+0x84>
    1dd8:	98 3e       	cpi	r25, 0xE8	; 232
    1dda:	d4 f3       	brlt	.-12     	; 0x1dd0 <__mulsf3_pse+0x84>
    1ddc:	86 95       	lsr	r24
    1dde:	77 95       	ror	r23
    1de0:	67 95       	ror	r22
    1de2:	b7 95       	ror	r27
    1de4:	f7 95       	ror	r31
    1de6:	e7 95       	ror	r30
    1de8:	9f 5f       	subi	r25, 0xFF	; 255
    1dea:	c1 f7       	brne	.-16     	; 0x1ddc <__mulsf3_pse+0x90>
    1dec:	fe 2b       	or	r31, r30
    1dee:	88 0f       	add	r24, r24
    1df0:	91 1d       	adc	r25, r1
    1df2:	96 95       	lsr	r25
    1df4:	87 95       	ror	r24
    1df6:	97 f9       	bld	r25, 7
    1df8:	08 95       	ret

00001dfa <vfprintf>:
    1dfa:	a3 e1       	ldi	r26, 0x13	; 19
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	e3 e0       	ldi	r30, 0x03	; 3
    1e00:	ff e0       	ldi	r31, 0x0F	; 15
    1e02:	0c 94 9b 12 	jmp	0x2536	; 0x2536 <__prologue_saves__>
    1e06:	6c 01       	movw	r12, r24
    1e08:	4b 01       	movw	r8, r22
    1e0a:	2a 01       	movw	r4, r20
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	17 82       	std	Z+7, r1	; 0x07
    1e10:	16 82       	std	Z+6, r1	; 0x06
    1e12:	83 81       	ldd	r24, Z+3	; 0x03
    1e14:	81 ff       	sbrs	r24, 1
    1e16:	43 c3       	rjmp	.+1670   	; 0x249e <__stack+0x29f>
    1e18:	ae 01       	movw	r20, r28
    1e1a:	4f 5f       	subi	r20, 0xFF	; 255
    1e1c:	5f 4f       	sbci	r21, 0xFF	; 255
    1e1e:	3a 01       	movw	r6, r20
    1e20:	f6 01       	movw	r30, r12
    1e22:	93 81       	ldd	r25, Z+3	; 0x03
    1e24:	f4 01       	movw	r30, r8
    1e26:	93 fd       	sbrc	r25, 3
    1e28:	85 91       	lpm	r24, Z+
    1e2a:	93 ff       	sbrs	r25, 3
    1e2c:	81 91       	ld	r24, Z+
    1e2e:	4f 01       	movw	r8, r30
    1e30:	88 23       	and	r24, r24
    1e32:	09 f4       	brne	.+2      	; 0x1e36 <vfprintf+0x3c>
    1e34:	30 c3       	rjmp	.+1632   	; 0x2496 <__stack+0x297>
    1e36:	85 32       	cpi	r24, 0x25	; 37
    1e38:	39 f4       	brne	.+14     	; 0x1e48 <vfprintf+0x4e>
    1e3a:	93 fd       	sbrc	r25, 3
    1e3c:	85 91       	lpm	r24, Z+
    1e3e:	93 ff       	sbrs	r25, 3
    1e40:	81 91       	ld	r24, Z+
    1e42:	4f 01       	movw	r8, r30
    1e44:	85 32       	cpi	r24, 0x25	; 37
    1e46:	39 f4       	brne	.+14     	; 0x1e56 <vfprintf+0x5c>
    1e48:	b6 01       	movw	r22, r12
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	0e 94 ed 14 	call	0x29da	; 0x29da <fputc>
    1e50:	52 01       	movw	r10, r4
    1e52:	25 01       	movw	r4, r10
    1e54:	e5 cf       	rjmp	.-54     	; 0x1e20 <vfprintf+0x26>
    1e56:	10 e0       	ldi	r17, 0x00	; 0
    1e58:	f1 2c       	mov	r15, r1
    1e5a:	20 e0       	ldi	r18, 0x00	; 0
    1e5c:	20 32       	cpi	r18, 0x20	; 32
    1e5e:	a0 f4       	brcc	.+40     	; 0x1e88 <vfprintf+0x8e>
    1e60:	8b 32       	cpi	r24, 0x2B	; 43
    1e62:	69 f0       	breq	.+26     	; 0x1e7e <vfprintf+0x84>
    1e64:	30 f4       	brcc	.+12     	; 0x1e72 <vfprintf+0x78>
    1e66:	80 32       	cpi	r24, 0x20	; 32
    1e68:	59 f0       	breq	.+22     	; 0x1e80 <vfprintf+0x86>
    1e6a:	83 32       	cpi	r24, 0x23	; 35
    1e6c:	69 f4       	brne	.+26     	; 0x1e88 <vfprintf+0x8e>
    1e6e:	20 61       	ori	r18, 0x10	; 16
    1e70:	2c c0       	rjmp	.+88     	; 0x1eca <vfprintf+0xd0>
    1e72:	8d 32       	cpi	r24, 0x2D	; 45
    1e74:	39 f0       	breq	.+14     	; 0x1e84 <vfprintf+0x8a>
    1e76:	80 33       	cpi	r24, 0x30	; 48
    1e78:	39 f4       	brne	.+14     	; 0x1e88 <vfprintf+0x8e>
    1e7a:	21 60       	ori	r18, 0x01	; 1
    1e7c:	26 c0       	rjmp	.+76     	; 0x1eca <vfprintf+0xd0>
    1e7e:	22 60       	ori	r18, 0x02	; 2
    1e80:	24 60       	ori	r18, 0x04	; 4
    1e82:	23 c0       	rjmp	.+70     	; 0x1eca <vfprintf+0xd0>
    1e84:	28 60       	ori	r18, 0x08	; 8
    1e86:	21 c0       	rjmp	.+66     	; 0x1eca <vfprintf+0xd0>
    1e88:	27 fd       	sbrc	r18, 7
    1e8a:	27 c0       	rjmp	.+78     	; 0x1eda <vfprintf+0xe0>
    1e8c:	30 ed       	ldi	r19, 0xD0	; 208
    1e8e:	38 0f       	add	r19, r24
    1e90:	3a 30       	cpi	r19, 0x0A	; 10
    1e92:	78 f4       	brcc	.+30     	; 0x1eb2 <vfprintf+0xb8>
    1e94:	26 ff       	sbrs	r18, 6
    1e96:	06 c0       	rjmp	.+12     	; 0x1ea4 <vfprintf+0xaa>
    1e98:	fa e0       	ldi	r31, 0x0A	; 10
    1e9a:	1f 9f       	mul	r17, r31
    1e9c:	30 0d       	add	r19, r0
    1e9e:	11 24       	eor	r1, r1
    1ea0:	13 2f       	mov	r17, r19
    1ea2:	13 c0       	rjmp	.+38     	; 0x1eca <vfprintf+0xd0>
    1ea4:	4a e0       	ldi	r20, 0x0A	; 10
    1ea6:	f4 9e       	mul	r15, r20
    1ea8:	30 0d       	add	r19, r0
    1eaa:	11 24       	eor	r1, r1
    1eac:	f3 2e       	mov	r15, r19
    1eae:	20 62       	ori	r18, 0x20	; 32
    1eb0:	0c c0       	rjmp	.+24     	; 0x1eca <vfprintf+0xd0>
    1eb2:	8e 32       	cpi	r24, 0x2E	; 46
    1eb4:	21 f4       	brne	.+8      	; 0x1ebe <vfprintf+0xc4>
    1eb6:	26 fd       	sbrc	r18, 6
    1eb8:	ee c2       	rjmp	.+1500   	; 0x2496 <__stack+0x297>
    1eba:	20 64       	ori	r18, 0x40	; 64
    1ebc:	06 c0       	rjmp	.+12     	; 0x1eca <vfprintf+0xd0>
    1ebe:	8c 36       	cpi	r24, 0x6C	; 108
    1ec0:	11 f4       	brne	.+4      	; 0x1ec6 <vfprintf+0xcc>
    1ec2:	20 68       	ori	r18, 0x80	; 128
    1ec4:	02 c0       	rjmp	.+4      	; 0x1eca <vfprintf+0xd0>
    1ec6:	88 36       	cpi	r24, 0x68	; 104
    1ec8:	41 f4       	brne	.+16     	; 0x1eda <vfprintf+0xe0>
    1eca:	f4 01       	movw	r30, r8
    1ecc:	93 fd       	sbrc	r25, 3
    1ece:	85 91       	lpm	r24, Z+
    1ed0:	93 ff       	sbrs	r25, 3
    1ed2:	81 91       	ld	r24, Z+
    1ed4:	4f 01       	movw	r8, r30
    1ed6:	81 11       	cpse	r24, r1
    1ed8:	c1 cf       	rjmp	.-126    	; 0x1e5c <vfprintf+0x62>
    1eda:	9b eb       	ldi	r25, 0xBB	; 187
    1edc:	98 0f       	add	r25, r24
    1ede:	93 30       	cpi	r25, 0x03	; 3
    1ee0:	18 f4       	brcc	.+6      	; 0x1ee8 <vfprintf+0xee>
    1ee2:	20 61       	ori	r18, 0x10	; 16
    1ee4:	80 5e       	subi	r24, 0xE0	; 224
    1ee6:	06 c0       	rjmp	.+12     	; 0x1ef4 <vfprintf+0xfa>
    1ee8:	9b e9       	ldi	r25, 0x9B	; 155
    1eea:	98 0f       	add	r25, r24
    1eec:	93 30       	cpi	r25, 0x03	; 3
    1eee:	08 f0       	brcs	.+2      	; 0x1ef2 <vfprintf+0xf8>
    1ef0:	71 c1       	rjmp	.+738    	; 0x21d4 <vfprintf+0x3da>
    1ef2:	2f 7e       	andi	r18, 0xEF	; 239
    1ef4:	26 ff       	sbrs	r18, 6
    1ef6:	16 e0       	ldi	r17, 0x06	; 6
    1ef8:	2f 73       	andi	r18, 0x3F	; 63
    1efa:	32 2e       	mov	r3, r18
    1efc:	85 36       	cpi	r24, 0x65	; 101
    1efe:	19 f4       	brne	.+6      	; 0x1f06 <vfprintf+0x10c>
    1f00:	20 64       	ori	r18, 0x40	; 64
    1f02:	32 2e       	mov	r3, r18
    1f04:	08 c0       	rjmp	.+16     	; 0x1f16 <vfprintf+0x11c>
    1f06:	86 36       	cpi	r24, 0x66	; 102
    1f08:	21 f4       	brne	.+8      	; 0x1f12 <vfprintf+0x118>
    1f0a:	f2 2f       	mov	r31, r18
    1f0c:	f0 68       	ori	r31, 0x80	; 128
    1f0e:	3f 2e       	mov	r3, r31
    1f10:	02 c0       	rjmp	.+4      	; 0x1f16 <vfprintf+0x11c>
    1f12:	11 11       	cpse	r17, r1
    1f14:	11 50       	subi	r17, 0x01	; 1
    1f16:	37 fe       	sbrs	r3, 7
    1f18:	07 c0       	rjmp	.+14     	; 0x1f28 <vfprintf+0x12e>
    1f1a:	1c 33       	cpi	r17, 0x3C	; 60
    1f1c:	50 f4       	brcc	.+20     	; 0x1f32 <vfprintf+0x138>
    1f1e:	ee 24       	eor	r14, r14
    1f20:	e3 94       	inc	r14
    1f22:	e1 0e       	add	r14, r17
    1f24:	27 e0       	ldi	r18, 0x07	; 7
    1f26:	0b c0       	rjmp	.+22     	; 0x1f3e <vfprintf+0x144>
    1f28:	18 30       	cpi	r17, 0x08	; 8
    1f2a:	38 f0       	brcs	.+14     	; 0x1f3a <vfprintf+0x140>
    1f2c:	27 e0       	ldi	r18, 0x07	; 7
    1f2e:	17 e0       	ldi	r17, 0x07	; 7
    1f30:	05 c0       	rjmp	.+10     	; 0x1f3c <vfprintf+0x142>
    1f32:	27 e0       	ldi	r18, 0x07	; 7
    1f34:	4c e3       	ldi	r20, 0x3C	; 60
    1f36:	e4 2e       	mov	r14, r20
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <vfprintf+0x144>
    1f3a:	21 2f       	mov	r18, r17
    1f3c:	e1 2c       	mov	r14, r1
    1f3e:	52 01       	movw	r10, r4
    1f40:	44 e0       	ldi	r20, 0x04	; 4
    1f42:	a4 0e       	add	r10, r20
    1f44:	b1 1c       	adc	r11, r1
    1f46:	f2 01       	movw	r30, r4
    1f48:	60 81       	ld	r22, Z
    1f4a:	71 81       	ldd	r23, Z+1	; 0x01
    1f4c:	82 81       	ldd	r24, Z+2	; 0x02
    1f4e:	93 81       	ldd	r25, Z+3	; 0x03
    1f50:	0e 2d       	mov	r16, r14
    1f52:	a3 01       	movw	r20, r6
    1f54:	0e 94 ff 13 	call	0x27fe	; 0x27fe <__ftoa_engine>
    1f58:	2c 01       	movw	r4, r24
    1f5a:	09 81       	ldd	r16, Y+1	; 0x01
    1f5c:	00 ff       	sbrs	r16, 0
    1f5e:	02 c0       	rjmp	.+4      	; 0x1f64 <vfprintf+0x16a>
    1f60:	03 ff       	sbrs	r16, 3
    1f62:	07 c0       	rjmp	.+14     	; 0x1f72 <vfprintf+0x178>
    1f64:	31 fc       	sbrc	r3, 1
    1f66:	08 c0       	rjmp	.+16     	; 0x1f78 <vfprintf+0x17e>
    1f68:	32 fe       	sbrs	r3, 2
    1f6a:	09 c0       	rjmp	.+18     	; 0x1f7e <vfprintf+0x184>
    1f6c:	30 e2       	ldi	r19, 0x20	; 32
    1f6e:	23 2e       	mov	r2, r19
    1f70:	07 c0       	rjmp	.+14     	; 0x1f80 <vfprintf+0x186>
    1f72:	2d e2       	ldi	r18, 0x2D	; 45
    1f74:	22 2e       	mov	r2, r18
    1f76:	04 c0       	rjmp	.+8      	; 0x1f80 <vfprintf+0x186>
    1f78:	9b e2       	ldi	r25, 0x2B	; 43
    1f7a:	29 2e       	mov	r2, r25
    1f7c:	01 c0       	rjmp	.+2      	; 0x1f80 <vfprintf+0x186>
    1f7e:	21 2c       	mov	r2, r1
    1f80:	80 2f       	mov	r24, r16
    1f82:	8c 70       	andi	r24, 0x0C	; 12
    1f84:	19 f0       	breq	.+6      	; 0x1f8c <vfprintf+0x192>
    1f86:	21 10       	cpse	r2, r1
    1f88:	68 c2       	rjmp	.+1232   	; 0x245a <__stack+0x25b>
    1f8a:	a8 c2       	rjmp	.+1360   	; 0x24dc <__stack+0x2dd>
    1f8c:	37 fe       	sbrs	r3, 7
    1f8e:	0f c0       	rjmp	.+30     	; 0x1fae <vfprintf+0x1b4>
    1f90:	e4 0c       	add	r14, r4
    1f92:	04 ff       	sbrs	r16, 4
    1f94:	04 c0       	rjmp	.+8      	; 0x1f9e <vfprintf+0x1a4>
    1f96:	8a 81       	ldd	r24, Y+2	; 0x02
    1f98:	81 33       	cpi	r24, 0x31	; 49
    1f9a:	09 f4       	brne	.+2      	; 0x1f9e <vfprintf+0x1a4>
    1f9c:	ea 94       	dec	r14
    1f9e:	1e 14       	cp	r1, r14
    1fa0:	74 f5       	brge	.+92     	; 0x1ffe <vfprintf+0x204>
    1fa2:	f8 e0       	ldi	r31, 0x08	; 8
    1fa4:	fe 15       	cp	r31, r14
    1fa6:	78 f5       	brcc	.+94     	; 0x2006 <vfprintf+0x20c>
    1fa8:	88 e0       	ldi	r24, 0x08	; 8
    1faa:	e8 2e       	mov	r14, r24
    1fac:	2c c0       	rjmp	.+88     	; 0x2006 <vfprintf+0x20c>
    1fae:	36 fc       	sbrc	r3, 6
    1fb0:	2a c0       	rjmp	.+84     	; 0x2006 <vfprintf+0x20c>
    1fb2:	81 2f       	mov	r24, r17
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	84 15       	cp	r24, r4
    1fb8:	95 05       	cpc	r25, r5
    1fba:	9c f0       	brlt	.+38     	; 0x1fe2 <vfprintf+0x1e8>
    1fbc:	2c ef       	ldi	r18, 0xFC	; 252
    1fbe:	42 16       	cp	r4, r18
    1fc0:	2f ef       	ldi	r18, 0xFF	; 255
    1fc2:	52 06       	cpc	r5, r18
    1fc4:	74 f0       	brlt	.+28     	; 0x1fe2 <vfprintf+0x1e8>
    1fc6:	43 2d       	mov	r20, r3
    1fc8:	40 68       	ori	r20, 0x80	; 128
    1fca:	34 2e       	mov	r3, r20
    1fcc:	0a c0       	rjmp	.+20     	; 0x1fe2 <vfprintf+0x1e8>
    1fce:	e2 e0       	ldi	r30, 0x02	; 2
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	ec 0f       	add	r30, r28
    1fd4:	fd 1f       	adc	r31, r29
    1fd6:	e1 0f       	add	r30, r17
    1fd8:	f1 1d       	adc	r31, r1
    1fda:	80 81       	ld	r24, Z
    1fdc:	80 33       	cpi	r24, 0x30	; 48
    1fde:	19 f4       	brne	.+6      	; 0x1fe6 <vfprintf+0x1ec>
    1fe0:	11 50       	subi	r17, 0x01	; 1
    1fe2:	11 11       	cpse	r17, r1
    1fe4:	f4 cf       	rjmp	.-24     	; 0x1fce <vfprintf+0x1d4>
    1fe6:	37 fe       	sbrs	r3, 7
    1fe8:	0e c0       	rjmp	.+28     	; 0x2006 <vfprintf+0x20c>
    1fea:	ee 24       	eor	r14, r14
    1fec:	e3 94       	inc	r14
    1fee:	e1 0e       	add	r14, r17
    1ff0:	81 2f       	mov	r24, r17
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	48 16       	cp	r4, r24
    1ff6:	59 06       	cpc	r5, r25
    1ff8:	2c f4       	brge	.+10     	; 0x2004 <vfprintf+0x20a>
    1ffa:	14 19       	sub	r17, r4
    1ffc:	04 c0       	rjmp	.+8      	; 0x2006 <vfprintf+0x20c>
    1ffe:	ee 24       	eor	r14, r14
    2000:	e3 94       	inc	r14
    2002:	01 c0       	rjmp	.+2      	; 0x2006 <vfprintf+0x20c>
    2004:	10 e0       	ldi	r17, 0x00	; 0
    2006:	37 fe       	sbrs	r3, 7
    2008:	06 c0       	rjmp	.+12     	; 0x2016 <vfprintf+0x21c>
    200a:	14 14       	cp	r1, r4
    200c:	15 04       	cpc	r1, r5
    200e:	34 f4       	brge	.+12     	; 0x201c <vfprintf+0x222>
    2010:	c2 01       	movw	r24, r4
    2012:	01 96       	adiw	r24, 0x01	; 1
    2014:	05 c0       	rjmp	.+10     	; 0x2020 <vfprintf+0x226>
    2016:	85 e0       	ldi	r24, 0x05	; 5
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	02 c0       	rjmp	.+4      	; 0x2020 <vfprintf+0x226>
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	21 10       	cpse	r2, r1
    2022:	01 96       	adiw	r24, 0x01	; 1
    2024:	11 23       	and	r17, r17
    2026:	31 f0       	breq	.+12     	; 0x2034 <vfprintf+0x23a>
    2028:	21 2f       	mov	r18, r17
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	2f 5f       	subi	r18, 0xFF	; 255
    202e:	3f 4f       	sbci	r19, 0xFF	; 255
    2030:	82 0f       	add	r24, r18
    2032:	93 1f       	adc	r25, r19
    2034:	2f 2d       	mov	r18, r15
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	82 17       	cp	r24, r18
    203a:	93 07       	cpc	r25, r19
    203c:	14 f4       	brge	.+4      	; 0x2042 <vfprintf+0x248>
    203e:	f8 1a       	sub	r15, r24
    2040:	01 c0       	rjmp	.+2      	; 0x2044 <vfprintf+0x24a>
    2042:	f1 2c       	mov	r15, r1
    2044:	83 2d       	mov	r24, r3
    2046:	89 70       	andi	r24, 0x09	; 9
    2048:	49 f4       	brne	.+18     	; 0x205c <vfprintf+0x262>
    204a:	ff 20       	and	r15, r15
    204c:	39 f0       	breq	.+14     	; 0x205c <vfprintf+0x262>
    204e:	b6 01       	movw	r22, r12
    2050:	80 e2       	ldi	r24, 0x20	; 32
    2052:	90 e0       	ldi	r25, 0x00	; 0
    2054:	0e 94 ed 14 	call	0x29da	; 0x29da <fputc>
    2058:	fa 94       	dec	r15
    205a:	f7 cf       	rjmp	.-18     	; 0x204a <vfprintf+0x250>
    205c:	22 20       	and	r2, r2
    205e:	29 f0       	breq	.+10     	; 0x206a <vfprintf+0x270>
    2060:	b6 01       	movw	r22, r12
    2062:	82 2d       	mov	r24, r2
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	0e 94 ed 14 	call	0x29da	; 0x29da <fputc>
    206a:	33 fc       	sbrc	r3, 3
    206c:	09 c0       	rjmp	.+18     	; 0x2080 <vfprintf+0x286>
    206e:	ff 20       	and	r15, r15
    2070:	39 f0       	breq	.+14     	; 0x2080 <vfprintf+0x286>
    2072:	b6 01       	movw	r22, r12
    2074:	80 e3       	ldi	r24, 0x30	; 48
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	0e 94 ed 14 	call	0x29da	; 0x29da <fputc>
    207c:	fa 94       	dec	r15
    207e:	f7 cf       	rjmp	.-18     	; 0x206e <vfprintf+0x274>
    2080:	37 fe       	sbrs	r3, 7
    2082:	5a c0       	rjmp	.+180    	; 0x2138 <vfprintf+0x33e>
    2084:	94 2d       	mov	r25, r4
    2086:	85 2d       	mov	r24, r5
    2088:	57 fe       	sbrs	r5, 7
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <vfprintf+0x296>
    208c:	90 e0       	ldi	r25, 0x00	; 0
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	29 2e       	mov	r2, r25
    2092:	38 2e       	mov	r3, r24
    2094:	20 e0       	ldi	r18, 0x00	; 0
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	a2 01       	movw	r20, r4
    209a:	4e 19       	sub	r20, r14
    209c:	51 09       	sbc	r21, r1
    209e:	5d 87       	std	Y+13, r21	; 0x0d
    20a0:	4c 87       	std	Y+12, r20	; 0x0c
    20a2:	a2 01       	movw	r20, r4
    20a4:	42 19       	sub	r20, r2
    20a6:	53 09       	sbc	r21, r3
    20a8:	5f 87       	std	Y+15, r21	; 0x0f
    20aa:	4e 87       	std	Y+14, r20	; 0x0e
    20ac:	61 2f       	mov	r22, r17
    20ae:	70 e0       	ldi	r23, 0x00	; 0
    20b0:	44 27       	eor	r20, r20
    20b2:	55 27       	eor	r21, r21
    20b4:	46 1b       	sub	r20, r22
    20b6:	57 0b       	sbc	r21, r23
    20b8:	59 8b       	std	Y+17, r21	; 0x11
    20ba:	48 8b       	std	Y+16, r20	; 0x10
    20bc:	5f ef       	ldi	r21, 0xFF	; 255
    20be:	25 16       	cp	r2, r21
    20c0:	35 06       	cpc	r3, r21
    20c2:	49 f4       	brne	.+18     	; 0x20d6 <vfprintf+0x2dc>
    20c4:	b6 01       	movw	r22, r12
    20c6:	8e e2       	ldi	r24, 0x2E	; 46
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	2a 8b       	std	Y+18, r18	; 0x12
    20cc:	3b 8b       	std	Y+19, r19	; 0x13
    20ce:	0e 94 ed 14 	call	0x29da	; 0x29da <fputc>
    20d2:	3b 89       	ldd	r19, Y+19	; 0x13
    20d4:	2a 89       	ldd	r18, Y+18	; 0x12
    20d6:	42 14       	cp	r4, r2
    20d8:	53 04       	cpc	r5, r3
    20da:	6c f0       	brlt	.+26     	; 0x20f6 <vfprintf+0x2fc>
    20dc:	4c 85       	ldd	r20, Y+12	; 0x0c
    20de:	5d 85       	ldd	r21, Y+13	; 0x0d
    20e0:	42 15       	cp	r20, r2
    20e2:	53 05       	cpc	r21, r3
    20e4:	44 f4       	brge	.+16     	; 0x20f6 <vfprintf+0x2fc>
    20e6:	ee 85       	ldd	r30, Y+14	; 0x0e
    20e8:	ff 85       	ldd	r31, Y+15	; 0x0f
    20ea:	e2 0f       	add	r30, r18
    20ec:	f3 1f       	adc	r31, r19
    20ee:	e6 0d       	add	r30, r6
    20f0:	f7 1d       	adc	r31, r7
    20f2:	81 81       	ldd	r24, Z+1	; 0x01
    20f4:	01 c0       	rjmp	.+2      	; 0x20f8 <vfprintf+0x2fe>
    20f6:	80 e3       	ldi	r24, 0x30	; 48
    20f8:	51 e0       	ldi	r21, 0x01	; 1
    20fa:	25 1a       	sub	r2, r21
    20fc:	31 08       	sbc	r3, r1
    20fe:	2f 5f       	subi	r18, 0xFF	; 255
    2100:	3f 4f       	sbci	r19, 0xFF	; 255
    2102:	48 89       	ldd	r20, Y+16	; 0x10
    2104:	59 89       	ldd	r21, Y+17	; 0x11
    2106:	24 16       	cp	r2, r20
    2108:	35 06       	cpc	r3, r21
    210a:	4c f0       	brlt	.+18     	; 0x211e <vfprintf+0x324>
    210c:	b6 01       	movw	r22, r12
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	2a 8b       	std	Y+18, r18	; 0x12
    2112:	3b 8b       	std	Y+19, r19	; 0x13
    2114:	0e 94 ed 14 	call	0x29da	; 0x29da <fputc>
    2118:	2a 89       	ldd	r18, Y+18	; 0x12
    211a:	3b 89       	ldd	r19, Y+19	; 0x13
    211c:	cf cf       	rjmp	.-98     	; 0x20bc <vfprintf+0x2c2>
    211e:	24 14       	cp	r2, r4
    2120:	35 04       	cpc	r3, r5
    2122:	39 f4       	brne	.+14     	; 0x2132 <vfprintf+0x338>
    2124:	9a 81       	ldd	r25, Y+2	; 0x02
    2126:	96 33       	cpi	r25, 0x36	; 54
    2128:	18 f4       	brcc	.+6      	; 0x2130 <vfprintf+0x336>
    212a:	95 33       	cpi	r25, 0x35	; 53
    212c:	11 f4       	brne	.+4      	; 0x2132 <vfprintf+0x338>
    212e:	04 ff       	sbrs	r16, 4
    2130:	81 e3       	ldi	r24, 0x31	; 49
    2132:	b6 01       	movw	r22, r12
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	4b c0       	rjmp	.+150    	; 0x21ce <vfprintf+0x3d4>
    2138:	8a 81       	ldd	r24, Y+2	; 0x02
    213a:	81 33       	cpi	r24, 0x31	; 49
    213c:	09 f0       	breq	.+2      	; 0x2140 <vfprintf+0x346>
    213e:	0f 7e       	andi	r16, 0xEF	; 239
    2140:	b6 01       	movw	r22, r12
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	0e 94 ed 14 	call	0x29da	; 0x29da <fputc>
    2148:	11 11       	cpse	r17, r1
    214a:	05 c0       	rjmp	.+10     	; 0x2156 <vfprintf+0x35c>
    214c:	34 fc       	sbrc	r3, 4
    214e:	18 c0       	rjmp	.+48     	; 0x2180 <vfprintf+0x386>
    2150:	85 e6       	ldi	r24, 0x65	; 101
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	17 c0       	rjmp	.+46     	; 0x2184 <vfprintf+0x38a>
    2156:	b6 01       	movw	r22, r12
    2158:	8e e2       	ldi	r24, 0x2E	; 46
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	0e 94 ed 14 	call	0x29da	; 0x29da <fputc>
    2160:	82 e0       	ldi	r24, 0x02	; 2
    2162:	ee 24       	eor	r14, r14
    2164:	e3 94       	inc	r14
    2166:	e8 0e       	add	r14, r24
    2168:	f3 01       	movw	r30, r6
    216a:	e8 0f       	add	r30, r24
    216c:	f1 1d       	adc	r31, r1
    216e:	80 81       	ld	r24, Z
    2170:	b6 01       	movw	r22, r12
    2172:	90 e0       	ldi	r25, 0x00	; 0
    2174:	0e 94 ed 14 	call	0x29da	; 0x29da <fputc>
    2178:	11 50       	subi	r17, 0x01	; 1
    217a:	8e 2d       	mov	r24, r14
    217c:	91 f7       	brne	.-28     	; 0x2162 <vfprintf+0x368>
    217e:	e6 cf       	rjmp	.-52     	; 0x214c <vfprintf+0x352>
    2180:	85 e4       	ldi	r24, 0x45	; 69
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	b6 01       	movw	r22, r12
    2186:	0e 94 ed 14 	call	0x29da	; 0x29da <fputc>
    218a:	57 fc       	sbrc	r5, 7
    218c:	05 c0       	rjmp	.+10     	; 0x2198 <vfprintf+0x39e>
    218e:	41 14       	cp	r4, r1
    2190:	51 04       	cpc	r5, r1
    2192:	39 f4       	brne	.+14     	; 0x21a2 <vfprintf+0x3a8>
    2194:	04 ff       	sbrs	r16, 4
    2196:	05 c0       	rjmp	.+10     	; 0x21a2 <vfprintf+0x3a8>
    2198:	51 94       	neg	r5
    219a:	41 94       	neg	r4
    219c:	51 08       	sbc	r5, r1
    219e:	8d e2       	ldi	r24, 0x2D	; 45
    21a0:	01 c0       	rjmp	.+2      	; 0x21a4 <vfprintf+0x3aa>
    21a2:	8b e2       	ldi	r24, 0x2B	; 43
    21a4:	b6 01       	movw	r22, r12
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	0e 94 ed 14 	call	0x29da	; 0x29da <fputc>
    21ac:	80 e3       	ldi	r24, 0x30	; 48
    21ae:	9a e0       	ldi	r25, 0x0A	; 10
    21b0:	49 16       	cp	r4, r25
    21b2:	51 04       	cpc	r5, r1
    21b4:	2c f0       	brlt	.+10     	; 0x21c0 <vfprintf+0x3c6>
    21b6:	8f 5f       	subi	r24, 0xFF	; 255
    21b8:	5a e0       	ldi	r21, 0x0A	; 10
    21ba:	45 1a       	sub	r4, r21
    21bc:	51 08       	sbc	r5, r1
    21be:	f7 cf       	rjmp	.-18     	; 0x21ae <vfprintf+0x3b4>
    21c0:	b6 01       	movw	r22, r12
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	0e 94 ed 14 	call	0x29da	; 0x29da <fputc>
    21c8:	b6 01       	movw	r22, r12
    21ca:	c2 01       	movw	r24, r4
    21cc:	c0 96       	adiw	r24, 0x30	; 48
    21ce:	0e 94 ed 14 	call	0x29da	; 0x29da <fputc>
    21d2:	57 c1       	rjmp	.+686    	; 0x2482 <__stack+0x283>
    21d4:	83 36       	cpi	r24, 0x63	; 99
    21d6:	31 f0       	breq	.+12     	; 0x21e4 <vfprintf+0x3ea>
    21d8:	83 37       	cpi	r24, 0x73	; 115
    21da:	79 f0       	breq	.+30     	; 0x21fa <vfprintf+0x400>
    21dc:	83 35       	cpi	r24, 0x53	; 83
    21de:	09 f0       	breq	.+2      	; 0x21e2 <vfprintf+0x3e8>
    21e0:	58 c0       	rjmp	.+176    	; 0x2292 <__stack+0x93>
    21e2:	21 c0       	rjmp	.+66     	; 0x2226 <__stack+0x27>
    21e4:	52 01       	movw	r10, r4
    21e6:	e2 e0       	ldi	r30, 0x02	; 2
    21e8:	ae 0e       	add	r10, r30
    21ea:	b1 1c       	adc	r11, r1
    21ec:	f2 01       	movw	r30, r4
    21ee:	80 81       	ld	r24, Z
    21f0:	89 83       	std	Y+1, r24	; 0x01
    21f2:	01 e0       	ldi	r16, 0x01	; 1
    21f4:	10 e0       	ldi	r17, 0x00	; 0
    21f6:	23 01       	movw	r4, r6
    21f8:	14 c0       	rjmp	.+40     	; 0x2222 <__stack+0x23>
    21fa:	52 01       	movw	r10, r4
    21fc:	f2 e0       	ldi	r31, 0x02	; 2
    21fe:	af 0e       	add	r10, r31
    2200:	b1 1c       	adc	r11, r1
    2202:	f2 01       	movw	r30, r4
    2204:	40 80       	ld	r4, Z
    2206:	51 80       	ldd	r5, Z+1	; 0x01
    2208:	26 ff       	sbrs	r18, 6
    220a:	03 c0       	rjmp	.+6      	; 0x2212 <__stack+0x13>
    220c:	61 2f       	mov	r22, r17
    220e:	70 e0       	ldi	r23, 0x00	; 0
    2210:	02 c0       	rjmp	.+4      	; 0x2216 <__stack+0x17>
    2212:	6f ef       	ldi	r22, 0xFF	; 255
    2214:	7f ef       	ldi	r23, 0xFF	; 255
    2216:	c2 01       	movw	r24, r4
    2218:	2a 8b       	std	Y+18, r18	; 0x12
    221a:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <strnlen>
    221e:	8c 01       	movw	r16, r24
    2220:	2a 89       	ldd	r18, Y+18	; 0x12
    2222:	2f 77       	andi	r18, 0x7F	; 127
    2224:	15 c0       	rjmp	.+42     	; 0x2250 <__stack+0x51>
    2226:	52 01       	movw	r10, r4
    2228:	f2 e0       	ldi	r31, 0x02	; 2
    222a:	af 0e       	add	r10, r31
    222c:	b1 1c       	adc	r11, r1
    222e:	f2 01       	movw	r30, r4
    2230:	40 80       	ld	r4, Z
    2232:	51 80       	ldd	r5, Z+1	; 0x01
    2234:	26 ff       	sbrs	r18, 6
    2236:	03 c0       	rjmp	.+6      	; 0x223e <__stack+0x3f>
    2238:	61 2f       	mov	r22, r17
    223a:	70 e0       	ldi	r23, 0x00	; 0
    223c:	02 c0       	rjmp	.+4      	; 0x2242 <__stack+0x43>
    223e:	6f ef       	ldi	r22, 0xFF	; 255
    2240:	7f ef       	ldi	r23, 0xFF	; 255
    2242:	c2 01       	movw	r24, r4
    2244:	2a 8b       	std	Y+18, r18	; 0x12
    2246:	0e 94 d7 14 	call	0x29ae	; 0x29ae <strnlen_P>
    224a:	8c 01       	movw	r16, r24
    224c:	2a 89       	ldd	r18, Y+18	; 0x12
    224e:	20 68       	ori	r18, 0x80	; 128
    2250:	32 2e       	mov	r3, r18
    2252:	23 fd       	sbrc	r18, 3
    2254:	1a c0       	rjmp	.+52     	; 0x228a <__stack+0x8b>
    2256:	8f 2d       	mov	r24, r15
    2258:	90 e0       	ldi	r25, 0x00	; 0
    225a:	08 17       	cp	r16, r24
    225c:	19 07       	cpc	r17, r25
    225e:	a8 f4       	brcc	.+42     	; 0x228a <__stack+0x8b>
    2260:	b6 01       	movw	r22, r12
    2262:	80 e2       	ldi	r24, 0x20	; 32
    2264:	90 e0       	ldi	r25, 0x00	; 0
    2266:	0e 94 ed 14 	call	0x29da	; 0x29da <fputc>
    226a:	fa 94       	dec	r15
    226c:	f4 cf       	rjmp	.-24     	; 0x2256 <__stack+0x57>
    226e:	f2 01       	movw	r30, r4
    2270:	37 fc       	sbrc	r3, 7
    2272:	85 91       	lpm	r24, Z+
    2274:	37 fe       	sbrs	r3, 7
    2276:	81 91       	ld	r24, Z+
    2278:	2f 01       	movw	r4, r30
    227a:	b6 01       	movw	r22, r12
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	0e 94 ed 14 	call	0x29da	; 0x29da <fputc>
    2282:	f1 10       	cpse	r15, r1
    2284:	fa 94       	dec	r15
    2286:	01 50       	subi	r16, 0x01	; 1
    2288:	11 09       	sbc	r17, r1
    228a:	01 15       	cp	r16, r1
    228c:	11 05       	cpc	r17, r1
    228e:	79 f7       	brne	.-34     	; 0x226e <__stack+0x6f>
    2290:	f8 c0       	rjmp	.+496    	; 0x2482 <__stack+0x283>
    2292:	84 36       	cpi	r24, 0x64	; 100
    2294:	11 f0       	breq	.+4      	; 0x229a <__stack+0x9b>
    2296:	89 36       	cpi	r24, 0x69	; 105
    2298:	59 f5       	brne	.+86     	; 0x22f0 <__stack+0xf1>
    229a:	52 01       	movw	r10, r4
    229c:	27 ff       	sbrs	r18, 7
    229e:	09 c0       	rjmp	.+18     	; 0x22b2 <__stack+0xb3>
    22a0:	f4 e0       	ldi	r31, 0x04	; 4
    22a2:	af 0e       	add	r10, r31
    22a4:	b1 1c       	adc	r11, r1
    22a6:	f2 01       	movw	r30, r4
    22a8:	60 81       	ld	r22, Z
    22aa:	71 81       	ldd	r23, Z+1	; 0x01
    22ac:	82 81       	ldd	r24, Z+2	; 0x02
    22ae:	93 81       	ldd	r25, Z+3	; 0x03
    22b0:	0a c0       	rjmp	.+20     	; 0x22c6 <__stack+0xc7>
    22b2:	f2 e0       	ldi	r31, 0x02	; 2
    22b4:	af 0e       	add	r10, r31
    22b6:	b1 1c       	adc	r11, r1
    22b8:	f2 01       	movw	r30, r4
    22ba:	60 81       	ld	r22, Z
    22bc:	71 81       	ldd	r23, Z+1	; 0x01
    22be:	07 2e       	mov	r0, r23
    22c0:	00 0c       	add	r0, r0
    22c2:	88 0b       	sbc	r24, r24
    22c4:	99 0b       	sbc	r25, r25
    22c6:	2f 76       	andi	r18, 0x6F	; 111
    22c8:	32 2e       	mov	r3, r18
    22ca:	97 ff       	sbrs	r25, 7
    22cc:	09 c0       	rjmp	.+18     	; 0x22e0 <__stack+0xe1>
    22ce:	90 95       	com	r25
    22d0:	80 95       	com	r24
    22d2:	70 95       	com	r23
    22d4:	61 95       	neg	r22
    22d6:	7f 4f       	sbci	r23, 0xFF	; 255
    22d8:	8f 4f       	sbci	r24, 0xFF	; 255
    22da:	9f 4f       	sbci	r25, 0xFF	; 255
    22dc:	20 68       	ori	r18, 0x80	; 128
    22de:	32 2e       	mov	r3, r18
    22e0:	2a e0       	ldi	r18, 0x0A	; 10
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	a3 01       	movw	r20, r6
    22e6:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__ultoa_invert>
    22ea:	e8 2e       	mov	r14, r24
    22ec:	e6 18       	sub	r14, r6
    22ee:	3f c0       	rjmp	.+126    	; 0x236e <__stack+0x16f>
    22f0:	02 2f       	mov	r16, r18
    22f2:	85 37       	cpi	r24, 0x75	; 117
    22f4:	21 f4       	brne	.+8      	; 0x22fe <__stack+0xff>
    22f6:	0f 7e       	andi	r16, 0xEF	; 239
    22f8:	2a e0       	ldi	r18, 0x0A	; 10
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	1d c0       	rjmp	.+58     	; 0x2338 <__stack+0x139>
    22fe:	09 7f       	andi	r16, 0xF9	; 249
    2300:	8f 36       	cpi	r24, 0x6F	; 111
    2302:	91 f0       	breq	.+36     	; 0x2328 <__stack+0x129>
    2304:	18 f4       	brcc	.+6      	; 0x230c <__stack+0x10d>
    2306:	88 35       	cpi	r24, 0x58	; 88
    2308:	59 f0       	breq	.+22     	; 0x2320 <__stack+0x121>
    230a:	c5 c0       	rjmp	.+394    	; 0x2496 <__stack+0x297>
    230c:	80 37       	cpi	r24, 0x70	; 112
    230e:	19 f0       	breq	.+6      	; 0x2316 <__stack+0x117>
    2310:	88 37       	cpi	r24, 0x78	; 120
    2312:	11 f0       	breq	.+4      	; 0x2318 <__stack+0x119>
    2314:	c0 c0       	rjmp	.+384    	; 0x2496 <__stack+0x297>
    2316:	00 61       	ori	r16, 0x10	; 16
    2318:	04 ff       	sbrs	r16, 4
    231a:	09 c0       	rjmp	.+18     	; 0x232e <__stack+0x12f>
    231c:	04 60       	ori	r16, 0x04	; 4
    231e:	07 c0       	rjmp	.+14     	; 0x232e <__stack+0x12f>
    2320:	24 ff       	sbrs	r18, 4
    2322:	08 c0       	rjmp	.+16     	; 0x2334 <__stack+0x135>
    2324:	06 60       	ori	r16, 0x06	; 6
    2326:	06 c0       	rjmp	.+12     	; 0x2334 <__stack+0x135>
    2328:	28 e0       	ldi	r18, 0x08	; 8
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	05 c0       	rjmp	.+10     	; 0x2338 <__stack+0x139>
    232e:	20 e1       	ldi	r18, 0x10	; 16
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <__stack+0x139>
    2334:	20 e1       	ldi	r18, 0x10	; 16
    2336:	32 e0       	ldi	r19, 0x02	; 2
    2338:	52 01       	movw	r10, r4
    233a:	07 ff       	sbrs	r16, 7
    233c:	09 c0       	rjmp	.+18     	; 0x2350 <__stack+0x151>
    233e:	f4 e0       	ldi	r31, 0x04	; 4
    2340:	af 0e       	add	r10, r31
    2342:	b1 1c       	adc	r11, r1
    2344:	f2 01       	movw	r30, r4
    2346:	60 81       	ld	r22, Z
    2348:	71 81       	ldd	r23, Z+1	; 0x01
    234a:	82 81       	ldd	r24, Z+2	; 0x02
    234c:	93 81       	ldd	r25, Z+3	; 0x03
    234e:	08 c0       	rjmp	.+16     	; 0x2360 <__stack+0x161>
    2350:	f2 e0       	ldi	r31, 0x02	; 2
    2352:	af 0e       	add	r10, r31
    2354:	b1 1c       	adc	r11, r1
    2356:	f2 01       	movw	r30, r4
    2358:	60 81       	ld	r22, Z
    235a:	71 81       	ldd	r23, Z+1	; 0x01
    235c:	80 e0       	ldi	r24, 0x00	; 0
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	a3 01       	movw	r20, r6
    2362:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__ultoa_invert>
    2366:	e8 2e       	mov	r14, r24
    2368:	e6 18       	sub	r14, r6
    236a:	0f 77       	andi	r16, 0x7F	; 127
    236c:	30 2e       	mov	r3, r16
    236e:	36 fe       	sbrs	r3, 6
    2370:	0b c0       	rjmp	.+22     	; 0x2388 <__stack+0x189>
    2372:	33 2d       	mov	r19, r3
    2374:	3e 7f       	andi	r19, 0xFE	; 254
    2376:	e1 16       	cp	r14, r17
    2378:	50 f4       	brcc	.+20     	; 0x238e <__stack+0x18f>
    237a:	34 fe       	sbrs	r3, 4
    237c:	0a c0       	rjmp	.+20     	; 0x2392 <__stack+0x193>
    237e:	32 fc       	sbrc	r3, 2
    2380:	08 c0       	rjmp	.+16     	; 0x2392 <__stack+0x193>
    2382:	33 2d       	mov	r19, r3
    2384:	3e 7e       	andi	r19, 0xEE	; 238
    2386:	05 c0       	rjmp	.+10     	; 0x2392 <__stack+0x193>
    2388:	0e 2d       	mov	r16, r14
    238a:	33 2d       	mov	r19, r3
    238c:	03 c0       	rjmp	.+6      	; 0x2394 <__stack+0x195>
    238e:	0e 2d       	mov	r16, r14
    2390:	01 c0       	rjmp	.+2      	; 0x2394 <__stack+0x195>
    2392:	01 2f       	mov	r16, r17
    2394:	34 ff       	sbrs	r19, 4
    2396:	0c c0       	rjmp	.+24     	; 0x23b0 <__stack+0x1b1>
    2398:	fe 01       	movw	r30, r28
    239a:	ee 0d       	add	r30, r14
    239c:	f1 1d       	adc	r31, r1
    239e:	80 81       	ld	r24, Z
    23a0:	80 33       	cpi	r24, 0x30	; 48
    23a2:	11 f4       	brne	.+4      	; 0x23a8 <__stack+0x1a9>
    23a4:	39 7e       	andi	r19, 0xE9	; 233
    23a6:	08 c0       	rjmp	.+16     	; 0x23b8 <__stack+0x1b9>
    23a8:	32 ff       	sbrs	r19, 2
    23aa:	05 c0       	rjmp	.+10     	; 0x23b6 <__stack+0x1b7>
    23ac:	0e 5f       	subi	r16, 0xFE	; 254
    23ae:	04 c0       	rjmp	.+8      	; 0x23b8 <__stack+0x1b9>
    23b0:	83 2f       	mov	r24, r19
    23b2:	86 78       	andi	r24, 0x86	; 134
    23b4:	09 f0       	breq	.+2      	; 0x23b8 <__stack+0x1b9>
    23b6:	0f 5f       	subi	r16, 0xFF	; 255
    23b8:	33 fd       	sbrc	r19, 3
    23ba:	13 c0       	rjmp	.+38     	; 0x23e2 <__stack+0x1e3>
    23bc:	30 ff       	sbrs	r19, 0
    23be:	06 c0       	rjmp	.+12     	; 0x23cc <__stack+0x1cd>
    23c0:	1e 2d       	mov	r17, r14
    23c2:	0f 15       	cp	r16, r15
    23c4:	18 f4       	brcc	.+6      	; 0x23cc <__stack+0x1cd>
    23c6:	1f 0d       	add	r17, r15
    23c8:	10 1b       	sub	r17, r16
    23ca:	0f 2d       	mov	r16, r15
    23cc:	0f 15       	cp	r16, r15
    23ce:	68 f4       	brcc	.+26     	; 0x23ea <__stack+0x1eb>
    23d0:	b6 01       	movw	r22, r12
    23d2:	80 e2       	ldi	r24, 0x20	; 32
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	3b 8b       	std	Y+19, r19	; 0x13
    23d8:	0e 94 ed 14 	call	0x29da	; 0x29da <fputc>
    23dc:	0f 5f       	subi	r16, 0xFF	; 255
    23de:	3b 89       	ldd	r19, Y+19	; 0x13
    23e0:	f5 cf       	rjmp	.-22     	; 0x23cc <__stack+0x1cd>
    23e2:	0f 15       	cp	r16, r15
    23e4:	10 f4       	brcc	.+4      	; 0x23ea <__stack+0x1eb>
    23e6:	f0 1a       	sub	r15, r16
    23e8:	01 c0       	rjmp	.+2      	; 0x23ec <__stack+0x1ed>
    23ea:	f1 2c       	mov	r15, r1
    23ec:	34 ff       	sbrs	r19, 4
    23ee:	12 c0       	rjmp	.+36     	; 0x2414 <__stack+0x215>
    23f0:	b6 01       	movw	r22, r12
    23f2:	80 e3       	ldi	r24, 0x30	; 48
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	3b 8b       	std	Y+19, r19	; 0x13
    23f8:	0e 94 ed 14 	call	0x29da	; 0x29da <fputc>
    23fc:	3b 89       	ldd	r19, Y+19	; 0x13
    23fe:	32 ff       	sbrs	r19, 2
    2400:	17 c0       	rjmp	.+46     	; 0x2430 <__stack+0x231>
    2402:	31 fd       	sbrc	r19, 1
    2404:	03 c0       	rjmp	.+6      	; 0x240c <__stack+0x20d>
    2406:	88 e7       	ldi	r24, 0x78	; 120
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	02 c0       	rjmp	.+4      	; 0x2410 <__stack+0x211>
    240c:	88 e5       	ldi	r24, 0x58	; 88
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	b6 01       	movw	r22, r12
    2412:	0c c0       	rjmp	.+24     	; 0x242c <__stack+0x22d>
    2414:	83 2f       	mov	r24, r19
    2416:	86 78       	andi	r24, 0x86	; 134
    2418:	59 f0       	breq	.+22     	; 0x2430 <__stack+0x231>
    241a:	31 ff       	sbrs	r19, 1
    241c:	02 c0       	rjmp	.+4      	; 0x2422 <__stack+0x223>
    241e:	8b e2       	ldi	r24, 0x2B	; 43
    2420:	01 c0       	rjmp	.+2      	; 0x2424 <__stack+0x225>
    2422:	80 e2       	ldi	r24, 0x20	; 32
    2424:	37 fd       	sbrc	r19, 7
    2426:	8d e2       	ldi	r24, 0x2D	; 45
    2428:	b6 01       	movw	r22, r12
    242a:	90 e0       	ldi	r25, 0x00	; 0
    242c:	0e 94 ed 14 	call	0x29da	; 0x29da <fputc>
    2430:	e1 16       	cp	r14, r17
    2432:	38 f4       	brcc	.+14     	; 0x2442 <__stack+0x243>
    2434:	b6 01       	movw	r22, r12
    2436:	80 e3       	ldi	r24, 0x30	; 48
    2438:	90 e0       	ldi	r25, 0x00	; 0
    243a:	0e 94 ed 14 	call	0x29da	; 0x29da <fputc>
    243e:	11 50       	subi	r17, 0x01	; 1
    2440:	f7 cf       	rjmp	.-18     	; 0x2430 <__stack+0x231>
    2442:	ea 94       	dec	r14
    2444:	f3 01       	movw	r30, r6
    2446:	ee 0d       	add	r30, r14
    2448:	f1 1d       	adc	r31, r1
    244a:	80 81       	ld	r24, Z
    244c:	b6 01       	movw	r22, r12
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	0e 94 ed 14 	call	0x29da	; 0x29da <fputc>
    2454:	e1 10       	cpse	r14, r1
    2456:	f5 cf       	rjmp	.-22     	; 0x2442 <__stack+0x243>
    2458:	14 c0       	rjmp	.+40     	; 0x2482 <__stack+0x283>
    245a:	f4 e0       	ldi	r31, 0x04	; 4
    245c:	ff 15       	cp	r31, r15
    245e:	58 f5       	brcc	.+86     	; 0x24b6 <__stack+0x2b7>
    2460:	84 e0       	ldi	r24, 0x04	; 4
    2462:	f8 1a       	sub	r15, r24
    2464:	33 fe       	sbrs	r3, 3
    2466:	1e c0       	rjmp	.+60     	; 0x24a4 <__stack+0x2a5>
    2468:	21 10       	cpse	r2, r1
    246a:	26 c0       	rjmp	.+76     	; 0x24b8 <__stack+0x2b9>
    246c:	03 ff       	sbrs	r16, 3
    246e:	2a c0       	rjmp	.+84     	; 0x24c4 <__stack+0x2c5>
    2470:	04 e3       	ldi	r16, 0x34	; 52
    2472:	11 e0       	ldi	r17, 0x01	; 1
    2474:	f3 2d       	mov	r31, r3
    2476:	f0 71       	andi	r31, 0x10	; 16
    2478:	3f 2e       	mov	r3, r31
    247a:	f8 01       	movw	r30, r16
    247c:	84 91       	lpm	r24, Z
    247e:	81 11       	cpse	r24, r1
    2480:	24 c0       	rjmp	.+72     	; 0x24ca <__stack+0x2cb>
    2482:	ff 20       	and	r15, r15
    2484:	09 f4       	brne	.+2      	; 0x2488 <__stack+0x289>
    2486:	e5 cc       	rjmp	.-1590   	; 0x1e52 <vfprintf+0x58>
    2488:	b6 01       	movw	r22, r12
    248a:	80 e2       	ldi	r24, 0x20	; 32
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	0e 94 ed 14 	call	0x29da	; 0x29da <fputc>
    2492:	fa 94       	dec	r15
    2494:	f6 cf       	rjmp	.-20     	; 0x2482 <__stack+0x283>
    2496:	f6 01       	movw	r30, r12
    2498:	86 81       	ldd	r24, Z+6	; 0x06
    249a:	97 81       	ldd	r25, Z+7	; 0x07
    249c:	26 c0       	rjmp	.+76     	; 0x24ea <__stack+0x2eb>
    249e:	8f ef       	ldi	r24, 0xFF	; 255
    24a0:	9f ef       	ldi	r25, 0xFF	; 255
    24a2:	23 c0       	rjmp	.+70     	; 0x24ea <__stack+0x2eb>
    24a4:	b6 01       	movw	r22, r12
    24a6:	80 e2       	ldi	r24, 0x20	; 32
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	0e 94 ed 14 	call	0x29da	; 0x29da <fputc>
    24ae:	fa 94       	dec	r15
    24b0:	f1 10       	cpse	r15, r1
    24b2:	f8 cf       	rjmp	.-16     	; 0x24a4 <__stack+0x2a5>
    24b4:	d9 cf       	rjmp	.-78     	; 0x2468 <__stack+0x269>
    24b6:	f1 2c       	mov	r15, r1
    24b8:	b6 01       	movw	r22, r12
    24ba:	82 2d       	mov	r24, r2
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	0e 94 ed 14 	call	0x29da	; 0x29da <fputc>
    24c2:	d4 cf       	rjmp	.-88     	; 0x246c <__stack+0x26d>
    24c4:	08 e3       	ldi	r16, 0x38	; 56
    24c6:	11 e0       	ldi	r17, 0x01	; 1
    24c8:	d5 cf       	rjmp	.-86     	; 0x2474 <__stack+0x275>
    24ca:	31 10       	cpse	r3, r1
    24cc:	80 52       	subi	r24, 0x20	; 32
    24ce:	b6 01       	movw	r22, r12
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	0e 94 ed 14 	call	0x29da	; 0x29da <fputc>
    24d6:	0f 5f       	subi	r16, 0xFF	; 255
    24d8:	1f 4f       	sbci	r17, 0xFF	; 255
    24da:	cf cf       	rjmp	.-98     	; 0x247a <__stack+0x27b>
    24dc:	23 e0       	ldi	r18, 0x03	; 3
    24de:	2f 15       	cp	r18, r15
    24e0:	10 f4       	brcc	.+4      	; 0x24e6 <__stack+0x2e7>
    24e2:	83 e0       	ldi	r24, 0x03	; 3
    24e4:	be cf       	rjmp	.-132    	; 0x2462 <__stack+0x263>
    24e6:	f1 2c       	mov	r15, r1
    24e8:	c1 cf       	rjmp	.-126    	; 0x246c <__stack+0x26d>
    24ea:	63 96       	adiw	r28, 0x13	; 19
    24ec:	e2 e1       	ldi	r30, 0x12	; 18
    24ee:	0c 94 b7 12 	jmp	0x256e	; 0x256e <__epilogue_restores__>

000024f2 <__udivmodsi4>:
    24f2:	a1 e2       	ldi	r26, 0x21	; 33
    24f4:	1a 2e       	mov	r1, r26
    24f6:	aa 1b       	sub	r26, r26
    24f8:	bb 1b       	sub	r27, r27
    24fa:	fd 01       	movw	r30, r26
    24fc:	0d c0       	rjmp	.+26     	; 0x2518 <__udivmodsi4_ep>

000024fe <__udivmodsi4_loop>:
    24fe:	aa 1f       	adc	r26, r26
    2500:	bb 1f       	adc	r27, r27
    2502:	ee 1f       	adc	r30, r30
    2504:	ff 1f       	adc	r31, r31
    2506:	a2 17       	cp	r26, r18
    2508:	b3 07       	cpc	r27, r19
    250a:	e4 07       	cpc	r30, r20
    250c:	f5 07       	cpc	r31, r21
    250e:	20 f0       	brcs	.+8      	; 0x2518 <__udivmodsi4_ep>
    2510:	a2 1b       	sub	r26, r18
    2512:	b3 0b       	sbc	r27, r19
    2514:	e4 0b       	sbc	r30, r20
    2516:	f5 0b       	sbc	r31, r21

00002518 <__udivmodsi4_ep>:
    2518:	66 1f       	adc	r22, r22
    251a:	77 1f       	adc	r23, r23
    251c:	88 1f       	adc	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	1a 94       	dec	r1
    2522:	69 f7       	brne	.-38     	; 0x24fe <__udivmodsi4_loop>
    2524:	60 95       	com	r22
    2526:	70 95       	com	r23
    2528:	80 95       	com	r24
    252a:	90 95       	com	r25
    252c:	9b 01       	movw	r18, r22
    252e:	ac 01       	movw	r20, r24
    2530:	bd 01       	movw	r22, r26
    2532:	cf 01       	movw	r24, r30
    2534:	08 95       	ret

00002536 <__prologue_saves__>:
    2536:	2f 92       	push	r2
    2538:	3f 92       	push	r3
    253a:	4f 92       	push	r4
    253c:	5f 92       	push	r5
    253e:	6f 92       	push	r6
    2540:	7f 92       	push	r7
    2542:	8f 92       	push	r8
    2544:	9f 92       	push	r9
    2546:	af 92       	push	r10
    2548:	bf 92       	push	r11
    254a:	cf 92       	push	r12
    254c:	df 92       	push	r13
    254e:	ef 92       	push	r14
    2550:	ff 92       	push	r15
    2552:	0f 93       	push	r16
    2554:	1f 93       	push	r17
    2556:	cf 93       	push	r28
    2558:	df 93       	push	r29
    255a:	cd b7       	in	r28, 0x3d	; 61
    255c:	de b7       	in	r29, 0x3e	; 62
    255e:	ca 1b       	sub	r28, r26
    2560:	db 0b       	sbc	r29, r27
    2562:	0f b6       	in	r0, 0x3f	; 63
    2564:	f8 94       	cli
    2566:	de bf       	out	0x3e, r29	; 62
    2568:	0f be       	out	0x3f, r0	; 63
    256a:	cd bf       	out	0x3d, r28	; 61
    256c:	09 94       	ijmp

0000256e <__epilogue_restores__>:
    256e:	2a 88       	ldd	r2, Y+18	; 0x12
    2570:	39 88       	ldd	r3, Y+17	; 0x11
    2572:	48 88       	ldd	r4, Y+16	; 0x10
    2574:	5f 84       	ldd	r5, Y+15	; 0x0f
    2576:	6e 84       	ldd	r6, Y+14	; 0x0e
    2578:	7d 84       	ldd	r7, Y+13	; 0x0d
    257a:	8c 84       	ldd	r8, Y+12	; 0x0c
    257c:	9b 84       	ldd	r9, Y+11	; 0x0b
    257e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2580:	b9 84       	ldd	r11, Y+9	; 0x09
    2582:	c8 84       	ldd	r12, Y+8	; 0x08
    2584:	df 80       	ldd	r13, Y+7	; 0x07
    2586:	ee 80       	ldd	r14, Y+6	; 0x06
    2588:	fd 80       	ldd	r15, Y+5	; 0x05
    258a:	0c 81       	ldd	r16, Y+4	; 0x04
    258c:	1b 81       	ldd	r17, Y+3	; 0x03
    258e:	aa 81       	ldd	r26, Y+2	; 0x02
    2590:	b9 81       	ldd	r27, Y+1	; 0x01
    2592:	ce 0f       	add	r28, r30
    2594:	d1 1d       	adc	r29, r1
    2596:	0f b6       	in	r0, 0x3f	; 63
    2598:	f8 94       	cli
    259a:	de bf       	out	0x3e, r29	; 62
    259c:	0f be       	out	0x3f, r0	; 63
    259e:	cd bf       	out	0x3d, r28	; 61
    25a0:	ed 01       	movw	r28, r26
    25a2:	08 95       	ret

000025a4 <malloc>:
    25a4:	cf 93       	push	r28
    25a6:	df 93       	push	r29
    25a8:	82 30       	cpi	r24, 0x02	; 2
    25aa:	91 05       	cpc	r25, r1
    25ac:	10 f4       	brcc	.+4      	; 0x25b2 <malloc+0xe>
    25ae:	82 e0       	ldi	r24, 0x02	; 2
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	e0 91 dc 08 	lds	r30, 0x08DC
    25b6:	f0 91 dd 08 	lds	r31, 0x08DD
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	c0 e0       	ldi	r28, 0x00	; 0
    25c0:	d0 e0       	ldi	r29, 0x00	; 0
    25c2:	30 97       	sbiw	r30, 0x00	; 0
    25c4:	11 f1       	breq	.+68     	; 0x260a <malloc+0x66>
    25c6:	40 81       	ld	r20, Z
    25c8:	51 81       	ldd	r21, Z+1	; 0x01
    25ca:	48 17       	cp	r20, r24
    25cc:	59 07       	cpc	r21, r25
    25ce:	c0 f0       	brcs	.+48     	; 0x2600 <malloc+0x5c>
    25d0:	48 17       	cp	r20, r24
    25d2:	59 07       	cpc	r21, r25
    25d4:	61 f4       	brne	.+24     	; 0x25ee <malloc+0x4a>
    25d6:	82 81       	ldd	r24, Z+2	; 0x02
    25d8:	93 81       	ldd	r25, Z+3	; 0x03
    25da:	20 97       	sbiw	r28, 0x00	; 0
    25dc:	19 f0       	breq	.+6      	; 0x25e4 <malloc+0x40>
    25de:	9b 83       	std	Y+3, r25	; 0x03
    25e0:	8a 83       	std	Y+2, r24	; 0x02
    25e2:	2b c0       	rjmp	.+86     	; 0x263a <malloc+0x96>
    25e4:	90 93 dd 08 	sts	0x08DD, r25
    25e8:	80 93 dc 08 	sts	0x08DC, r24
    25ec:	26 c0       	rjmp	.+76     	; 0x263a <malloc+0x96>
    25ee:	21 15       	cp	r18, r1
    25f0:	31 05       	cpc	r19, r1
    25f2:	19 f0       	breq	.+6      	; 0x25fa <malloc+0x56>
    25f4:	42 17       	cp	r20, r18
    25f6:	53 07       	cpc	r21, r19
    25f8:	18 f4       	brcc	.+6      	; 0x2600 <malloc+0x5c>
    25fa:	9a 01       	movw	r18, r20
    25fc:	be 01       	movw	r22, r28
    25fe:	df 01       	movw	r26, r30
    2600:	ef 01       	movw	r28, r30
    2602:	02 80       	ldd	r0, Z+2	; 0x02
    2604:	f3 81       	ldd	r31, Z+3	; 0x03
    2606:	e0 2d       	mov	r30, r0
    2608:	dc cf       	rjmp	.-72     	; 0x25c2 <malloc+0x1e>
    260a:	21 15       	cp	r18, r1
    260c:	31 05       	cpc	r19, r1
    260e:	09 f1       	breq	.+66     	; 0x2652 <malloc+0xae>
    2610:	28 1b       	sub	r18, r24
    2612:	39 0b       	sbc	r19, r25
    2614:	24 30       	cpi	r18, 0x04	; 4
    2616:	31 05       	cpc	r19, r1
    2618:	90 f4       	brcc	.+36     	; 0x263e <malloc+0x9a>
    261a:	12 96       	adiw	r26, 0x02	; 2
    261c:	8d 91       	ld	r24, X+
    261e:	9c 91       	ld	r25, X
    2620:	13 97       	sbiw	r26, 0x03	; 3
    2622:	61 15       	cp	r22, r1
    2624:	71 05       	cpc	r23, r1
    2626:	21 f0       	breq	.+8      	; 0x2630 <malloc+0x8c>
    2628:	fb 01       	movw	r30, r22
    262a:	93 83       	std	Z+3, r25	; 0x03
    262c:	82 83       	std	Z+2, r24	; 0x02
    262e:	04 c0       	rjmp	.+8      	; 0x2638 <malloc+0x94>
    2630:	90 93 dd 08 	sts	0x08DD, r25
    2634:	80 93 dc 08 	sts	0x08DC, r24
    2638:	fd 01       	movw	r30, r26
    263a:	32 96       	adiw	r30, 0x02	; 2
    263c:	44 c0       	rjmp	.+136    	; 0x26c6 <malloc+0x122>
    263e:	fd 01       	movw	r30, r26
    2640:	e2 0f       	add	r30, r18
    2642:	f3 1f       	adc	r31, r19
    2644:	81 93       	st	Z+, r24
    2646:	91 93       	st	Z+, r25
    2648:	22 50       	subi	r18, 0x02	; 2
    264a:	31 09       	sbc	r19, r1
    264c:	2d 93       	st	X+, r18
    264e:	3c 93       	st	X, r19
    2650:	3a c0       	rjmp	.+116    	; 0x26c6 <malloc+0x122>
    2652:	20 91 da 08 	lds	r18, 0x08DA
    2656:	30 91 db 08 	lds	r19, 0x08DB
    265a:	23 2b       	or	r18, r19
    265c:	41 f4       	brne	.+16     	; 0x266e <malloc+0xca>
    265e:	20 91 02 02 	lds	r18, 0x0202
    2662:	30 91 03 02 	lds	r19, 0x0203
    2666:	30 93 db 08 	sts	0x08DB, r19
    266a:	20 93 da 08 	sts	0x08DA, r18
    266e:	20 91 00 02 	lds	r18, 0x0200
    2672:	30 91 01 02 	lds	r19, 0x0201
    2676:	21 15       	cp	r18, r1
    2678:	31 05       	cpc	r19, r1
    267a:	41 f4       	brne	.+16     	; 0x268c <malloc+0xe8>
    267c:	2d b7       	in	r18, 0x3d	; 61
    267e:	3e b7       	in	r19, 0x3e	; 62
    2680:	40 91 04 02 	lds	r20, 0x0204
    2684:	50 91 05 02 	lds	r21, 0x0205
    2688:	24 1b       	sub	r18, r20
    268a:	35 0b       	sbc	r19, r21
    268c:	e0 91 da 08 	lds	r30, 0x08DA
    2690:	f0 91 db 08 	lds	r31, 0x08DB
    2694:	e2 17       	cp	r30, r18
    2696:	f3 07       	cpc	r31, r19
    2698:	a0 f4       	brcc	.+40     	; 0x26c2 <malloc+0x11e>
    269a:	2e 1b       	sub	r18, r30
    269c:	3f 0b       	sbc	r19, r31
    269e:	28 17       	cp	r18, r24
    26a0:	39 07       	cpc	r19, r25
    26a2:	78 f0       	brcs	.+30     	; 0x26c2 <malloc+0x11e>
    26a4:	ac 01       	movw	r20, r24
    26a6:	4e 5f       	subi	r20, 0xFE	; 254
    26a8:	5f 4f       	sbci	r21, 0xFF	; 255
    26aa:	24 17       	cp	r18, r20
    26ac:	35 07       	cpc	r19, r21
    26ae:	48 f0       	brcs	.+18     	; 0x26c2 <malloc+0x11e>
    26b0:	4e 0f       	add	r20, r30
    26b2:	5f 1f       	adc	r21, r31
    26b4:	50 93 db 08 	sts	0x08DB, r21
    26b8:	40 93 da 08 	sts	0x08DA, r20
    26bc:	81 93       	st	Z+, r24
    26be:	91 93       	st	Z+, r25
    26c0:	02 c0       	rjmp	.+4      	; 0x26c6 <malloc+0x122>
    26c2:	e0 e0       	ldi	r30, 0x00	; 0
    26c4:	f0 e0       	ldi	r31, 0x00	; 0
    26c6:	cf 01       	movw	r24, r30
    26c8:	df 91       	pop	r29
    26ca:	cf 91       	pop	r28
    26cc:	08 95       	ret

000026ce <free>:
    26ce:	0f 93       	push	r16
    26d0:	1f 93       	push	r17
    26d2:	cf 93       	push	r28
    26d4:	df 93       	push	r29
    26d6:	00 97       	sbiw	r24, 0x00	; 0
    26d8:	09 f4       	brne	.+2      	; 0x26dc <free+0xe>
    26da:	8c c0       	rjmp	.+280    	; 0x27f4 <free+0x126>
    26dc:	fc 01       	movw	r30, r24
    26de:	32 97       	sbiw	r30, 0x02	; 2
    26e0:	13 82       	std	Z+3, r1	; 0x03
    26e2:	12 82       	std	Z+2, r1	; 0x02
    26e4:	00 91 dc 08 	lds	r16, 0x08DC
    26e8:	10 91 dd 08 	lds	r17, 0x08DD
    26ec:	01 15       	cp	r16, r1
    26ee:	11 05       	cpc	r17, r1
    26f0:	81 f4       	brne	.+32     	; 0x2712 <free+0x44>
    26f2:	20 81       	ld	r18, Z
    26f4:	31 81       	ldd	r19, Z+1	; 0x01
    26f6:	82 0f       	add	r24, r18
    26f8:	93 1f       	adc	r25, r19
    26fa:	20 91 da 08 	lds	r18, 0x08DA
    26fe:	30 91 db 08 	lds	r19, 0x08DB
    2702:	28 17       	cp	r18, r24
    2704:	39 07       	cpc	r19, r25
    2706:	79 f5       	brne	.+94     	; 0x2766 <free+0x98>
    2708:	f0 93 db 08 	sts	0x08DB, r31
    270c:	e0 93 da 08 	sts	0x08DA, r30
    2710:	71 c0       	rjmp	.+226    	; 0x27f4 <free+0x126>
    2712:	d8 01       	movw	r26, r16
    2714:	40 e0       	ldi	r20, 0x00	; 0
    2716:	50 e0       	ldi	r21, 0x00	; 0
    2718:	ae 17       	cp	r26, r30
    271a:	bf 07       	cpc	r27, r31
    271c:	50 f4       	brcc	.+20     	; 0x2732 <free+0x64>
    271e:	12 96       	adiw	r26, 0x02	; 2
    2720:	2d 91       	ld	r18, X+
    2722:	3c 91       	ld	r19, X
    2724:	13 97       	sbiw	r26, 0x03	; 3
    2726:	ad 01       	movw	r20, r26
    2728:	21 15       	cp	r18, r1
    272a:	31 05       	cpc	r19, r1
    272c:	09 f1       	breq	.+66     	; 0x2770 <free+0xa2>
    272e:	d9 01       	movw	r26, r18
    2730:	f3 cf       	rjmp	.-26     	; 0x2718 <free+0x4a>
    2732:	9d 01       	movw	r18, r26
    2734:	da 01       	movw	r26, r20
    2736:	33 83       	std	Z+3, r19	; 0x03
    2738:	22 83       	std	Z+2, r18	; 0x02
    273a:	60 81       	ld	r22, Z
    273c:	71 81       	ldd	r23, Z+1	; 0x01
    273e:	86 0f       	add	r24, r22
    2740:	97 1f       	adc	r25, r23
    2742:	82 17       	cp	r24, r18
    2744:	93 07       	cpc	r25, r19
    2746:	69 f4       	brne	.+26     	; 0x2762 <free+0x94>
    2748:	ec 01       	movw	r28, r24
    274a:	28 81       	ld	r18, Y
    274c:	39 81       	ldd	r19, Y+1	; 0x01
    274e:	26 0f       	add	r18, r22
    2750:	37 1f       	adc	r19, r23
    2752:	2e 5f       	subi	r18, 0xFE	; 254
    2754:	3f 4f       	sbci	r19, 0xFF	; 255
    2756:	31 83       	std	Z+1, r19	; 0x01
    2758:	20 83       	st	Z, r18
    275a:	8a 81       	ldd	r24, Y+2	; 0x02
    275c:	9b 81       	ldd	r25, Y+3	; 0x03
    275e:	93 83       	std	Z+3, r25	; 0x03
    2760:	82 83       	std	Z+2, r24	; 0x02
    2762:	45 2b       	or	r20, r21
    2764:	29 f4       	brne	.+10     	; 0x2770 <free+0xa2>
    2766:	f0 93 dd 08 	sts	0x08DD, r31
    276a:	e0 93 dc 08 	sts	0x08DC, r30
    276e:	42 c0       	rjmp	.+132    	; 0x27f4 <free+0x126>
    2770:	13 96       	adiw	r26, 0x03	; 3
    2772:	fc 93       	st	X, r31
    2774:	ee 93       	st	-X, r30
    2776:	12 97       	sbiw	r26, 0x02	; 2
    2778:	ed 01       	movw	r28, r26
    277a:	49 91       	ld	r20, Y+
    277c:	59 91       	ld	r21, Y+
    277e:	9e 01       	movw	r18, r28
    2780:	24 0f       	add	r18, r20
    2782:	35 1f       	adc	r19, r21
    2784:	e2 17       	cp	r30, r18
    2786:	f3 07       	cpc	r31, r19
    2788:	71 f4       	brne	.+28     	; 0x27a6 <free+0xd8>
    278a:	80 81       	ld	r24, Z
    278c:	91 81       	ldd	r25, Z+1	; 0x01
    278e:	84 0f       	add	r24, r20
    2790:	95 1f       	adc	r25, r21
    2792:	02 96       	adiw	r24, 0x02	; 2
    2794:	11 96       	adiw	r26, 0x01	; 1
    2796:	9c 93       	st	X, r25
    2798:	8e 93       	st	-X, r24
    279a:	82 81       	ldd	r24, Z+2	; 0x02
    279c:	93 81       	ldd	r25, Z+3	; 0x03
    279e:	13 96       	adiw	r26, 0x03	; 3
    27a0:	9c 93       	st	X, r25
    27a2:	8e 93       	st	-X, r24
    27a4:	12 97       	sbiw	r26, 0x02	; 2
    27a6:	e0 e0       	ldi	r30, 0x00	; 0
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	d8 01       	movw	r26, r16
    27ac:	12 96       	adiw	r26, 0x02	; 2
    27ae:	8d 91       	ld	r24, X+
    27b0:	9c 91       	ld	r25, X
    27b2:	13 97       	sbiw	r26, 0x03	; 3
    27b4:	00 97       	sbiw	r24, 0x00	; 0
    27b6:	19 f0       	breq	.+6      	; 0x27be <free+0xf0>
    27b8:	f8 01       	movw	r30, r16
    27ba:	8c 01       	movw	r16, r24
    27bc:	f6 cf       	rjmp	.-20     	; 0x27aa <free+0xdc>
    27be:	8d 91       	ld	r24, X+
    27c0:	9c 91       	ld	r25, X
    27c2:	98 01       	movw	r18, r16
    27c4:	2e 5f       	subi	r18, 0xFE	; 254
    27c6:	3f 4f       	sbci	r19, 0xFF	; 255
    27c8:	82 0f       	add	r24, r18
    27ca:	93 1f       	adc	r25, r19
    27cc:	20 91 da 08 	lds	r18, 0x08DA
    27d0:	30 91 db 08 	lds	r19, 0x08DB
    27d4:	28 17       	cp	r18, r24
    27d6:	39 07       	cpc	r19, r25
    27d8:	69 f4       	brne	.+26     	; 0x27f4 <free+0x126>
    27da:	30 97       	sbiw	r30, 0x00	; 0
    27dc:	29 f4       	brne	.+10     	; 0x27e8 <free+0x11a>
    27de:	10 92 dd 08 	sts	0x08DD, r1
    27e2:	10 92 dc 08 	sts	0x08DC, r1
    27e6:	02 c0       	rjmp	.+4      	; 0x27ec <free+0x11e>
    27e8:	13 82       	std	Z+3, r1	; 0x03
    27ea:	12 82       	std	Z+2, r1	; 0x02
    27ec:	10 93 db 08 	sts	0x08DB, r17
    27f0:	00 93 da 08 	sts	0x08DA, r16
    27f4:	df 91       	pop	r29
    27f6:	cf 91       	pop	r28
    27f8:	1f 91       	pop	r17
    27fa:	0f 91       	pop	r16
    27fc:	08 95       	ret

000027fe <__ftoa_engine>:
    27fe:	28 30       	cpi	r18, 0x08	; 8
    2800:	08 f0       	brcs	.+2      	; 0x2804 <__ftoa_engine+0x6>
    2802:	27 e0       	ldi	r18, 0x07	; 7
    2804:	33 27       	eor	r19, r19
    2806:	da 01       	movw	r26, r20
    2808:	99 0f       	add	r25, r25
    280a:	31 1d       	adc	r19, r1
    280c:	87 fd       	sbrc	r24, 7
    280e:	91 60       	ori	r25, 0x01	; 1
    2810:	00 96       	adiw	r24, 0x00	; 0
    2812:	61 05       	cpc	r22, r1
    2814:	71 05       	cpc	r23, r1
    2816:	39 f4       	brne	.+14     	; 0x2826 <__ftoa_engine+0x28>
    2818:	32 60       	ori	r19, 0x02	; 2
    281a:	2e 5f       	subi	r18, 0xFE	; 254
    281c:	3d 93       	st	X+, r19
    281e:	30 e3       	ldi	r19, 0x30	; 48
    2820:	2a 95       	dec	r18
    2822:	e1 f7       	brne	.-8      	; 0x281c <__ftoa_engine+0x1e>
    2824:	08 95       	ret
    2826:	9f 3f       	cpi	r25, 0xFF	; 255
    2828:	30 f0       	brcs	.+12     	; 0x2836 <__ftoa_engine+0x38>
    282a:	80 38       	cpi	r24, 0x80	; 128
    282c:	71 05       	cpc	r23, r1
    282e:	61 05       	cpc	r22, r1
    2830:	09 f0       	breq	.+2      	; 0x2834 <__ftoa_engine+0x36>
    2832:	3c 5f       	subi	r19, 0xFC	; 252
    2834:	3c 5f       	subi	r19, 0xFC	; 252
    2836:	3d 93       	st	X+, r19
    2838:	91 30       	cpi	r25, 0x01	; 1
    283a:	08 f0       	brcs	.+2      	; 0x283e <__ftoa_engine+0x40>
    283c:	80 68       	ori	r24, 0x80	; 128
    283e:	91 1d       	adc	r25, r1
    2840:	df 93       	push	r29
    2842:	cf 93       	push	r28
    2844:	1f 93       	push	r17
    2846:	0f 93       	push	r16
    2848:	ff 92       	push	r15
    284a:	ef 92       	push	r14
    284c:	19 2f       	mov	r17, r25
    284e:	98 7f       	andi	r25, 0xF8	; 248
    2850:	96 95       	lsr	r25
    2852:	e9 2f       	mov	r30, r25
    2854:	96 95       	lsr	r25
    2856:	96 95       	lsr	r25
    2858:	e9 0f       	add	r30, r25
    285a:	ff 27       	eor	r31, r31
    285c:	ea 56       	subi	r30, 0x6A	; 106
    285e:	fe 4f       	sbci	r31, 0xFE	; 254
    2860:	99 27       	eor	r25, r25
    2862:	33 27       	eor	r19, r19
    2864:	ee 24       	eor	r14, r14
    2866:	ff 24       	eor	r15, r15
    2868:	a7 01       	movw	r20, r14
    286a:	e7 01       	movw	r28, r14
    286c:	05 90       	lpm	r0, Z+
    286e:	08 94       	sec
    2870:	07 94       	ror	r0
    2872:	28 f4       	brcc	.+10     	; 0x287e <__ftoa_engine+0x80>
    2874:	36 0f       	add	r19, r22
    2876:	e7 1e       	adc	r14, r23
    2878:	f8 1e       	adc	r15, r24
    287a:	49 1f       	adc	r20, r25
    287c:	51 1d       	adc	r21, r1
    287e:	66 0f       	add	r22, r22
    2880:	77 1f       	adc	r23, r23
    2882:	88 1f       	adc	r24, r24
    2884:	99 1f       	adc	r25, r25
    2886:	06 94       	lsr	r0
    2888:	a1 f7       	brne	.-24     	; 0x2872 <__ftoa_engine+0x74>
    288a:	05 90       	lpm	r0, Z+
    288c:	07 94       	ror	r0
    288e:	28 f4       	brcc	.+10     	; 0x289a <__ftoa_engine+0x9c>
    2890:	e7 0e       	add	r14, r23
    2892:	f8 1e       	adc	r15, r24
    2894:	49 1f       	adc	r20, r25
    2896:	56 1f       	adc	r21, r22
    2898:	c1 1d       	adc	r28, r1
    289a:	77 0f       	add	r23, r23
    289c:	88 1f       	adc	r24, r24
    289e:	99 1f       	adc	r25, r25
    28a0:	66 1f       	adc	r22, r22
    28a2:	06 94       	lsr	r0
    28a4:	a1 f7       	brne	.-24     	; 0x288e <__ftoa_engine+0x90>
    28a6:	05 90       	lpm	r0, Z+
    28a8:	07 94       	ror	r0
    28aa:	28 f4       	brcc	.+10     	; 0x28b6 <__ftoa_engine+0xb8>
    28ac:	f8 0e       	add	r15, r24
    28ae:	49 1f       	adc	r20, r25
    28b0:	56 1f       	adc	r21, r22
    28b2:	c7 1f       	adc	r28, r23
    28b4:	d1 1d       	adc	r29, r1
    28b6:	88 0f       	add	r24, r24
    28b8:	99 1f       	adc	r25, r25
    28ba:	66 1f       	adc	r22, r22
    28bc:	77 1f       	adc	r23, r23
    28be:	06 94       	lsr	r0
    28c0:	a1 f7       	brne	.-24     	; 0x28aa <__ftoa_engine+0xac>
    28c2:	05 90       	lpm	r0, Z+
    28c4:	07 94       	ror	r0
    28c6:	20 f4       	brcc	.+8      	; 0x28d0 <__ftoa_engine+0xd2>
    28c8:	49 0f       	add	r20, r25
    28ca:	56 1f       	adc	r21, r22
    28cc:	c7 1f       	adc	r28, r23
    28ce:	d8 1f       	adc	r29, r24
    28d0:	99 0f       	add	r25, r25
    28d2:	66 1f       	adc	r22, r22
    28d4:	77 1f       	adc	r23, r23
    28d6:	88 1f       	adc	r24, r24
    28d8:	06 94       	lsr	r0
    28da:	a9 f7       	brne	.-22     	; 0x28c6 <__ftoa_engine+0xc8>
    28dc:	84 91       	lpm	r24, Z
    28de:	10 95       	com	r17
    28e0:	17 70       	andi	r17, 0x07	; 7
    28e2:	41 f0       	breq	.+16     	; 0x28f4 <__ftoa_engine+0xf6>
    28e4:	d6 95       	lsr	r29
    28e6:	c7 95       	ror	r28
    28e8:	57 95       	ror	r21
    28ea:	47 95       	ror	r20
    28ec:	f7 94       	ror	r15
    28ee:	e7 94       	ror	r14
    28f0:	1a 95       	dec	r17
    28f2:	c1 f7       	brne	.-16     	; 0x28e4 <__ftoa_engine+0xe6>
    28f4:	ec e3       	ldi	r30, 0x3C	; 60
    28f6:	f1 e0       	ldi	r31, 0x01	; 1
    28f8:	68 94       	set
    28fa:	15 90       	lpm	r1, Z+
    28fc:	15 91       	lpm	r17, Z+
    28fe:	35 91       	lpm	r19, Z+
    2900:	65 91       	lpm	r22, Z+
    2902:	95 91       	lpm	r25, Z+
    2904:	05 90       	lpm	r0, Z+
    2906:	7f e2       	ldi	r23, 0x2F	; 47
    2908:	73 95       	inc	r23
    290a:	e1 18       	sub	r14, r1
    290c:	f1 0a       	sbc	r15, r17
    290e:	43 0b       	sbc	r20, r19
    2910:	56 0b       	sbc	r21, r22
    2912:	c9 0b       	sbc	r28, r25
    2914:	d0 09       	sbc	r29, r0
    2916:	c0 f7       	brcc	.-16     	; 0x2908 <__ftoa_engine+0x10a>
    2918:	e1 0c       	add	r14, r1
    291a:	f1 1e       	adc	r15, r17
    291c:	43 1f       	adc	r20, r19
    291e:	56 1f       	adc	r21, r22
    2920:	c9 1f       	adc	r28, r25
    2922:	d0 1d       	adc	r29, r0
    2924:	7e f4       	brtc	.+30     	; 0x2944 <__ftoa_engine+0x146>
    2926:	70 33       	cpi	r23, 0x30	; 48
    2928:	11 f4       	brne	.+4      	; 0x292e <__ftoa_engine+0x130>
    292a:	8a 95       	dec	r24
    292c:	e6 cf       	rjmp	.-52     	; 0x28fa <__ftoa_engine+0xfc>
    292e:	e8 94       	clt
    2930:	01 50       	subi	r16, 0x01	; 1
    2932:	30 f0       	brcs	.+12     	; 0x2940 <__ftoa_engine+0x142>
    2934:	08 0f       	add	r16, r24
    2936:	0a f4       	brpl	.+2      	; 0x293a <__ftoa_engine+0x13c>
    2938:	00 27       	eor	r16, r16
    293a:	02 17       	cp	r16, r18
    293c:	08 f4       	brcc	.+2      	; 0x2940 <__ftoa_engine+0x142>
    293e:	20 2f       	mov	r18, r16
    2940:	23 95       	inc	r18
    2942:	02 2f       	mov	r16, r18
    2944:	7a 33       	cpi	r23, 0x3A	; 58
    2946:	28 f0       	brcs	.+10     	; 0x2952 <__ftoa_engine+0x154>
    2948:	79 e3       	ldi	r23, 0x39	; 57
    294a:	7d 93       	st	X+, r23
    294c:	2a 95       	dec	r18
    294e:	e9 f7       	brne	.-6      	; 0x294a <__ftoa_engine+0x14c>
    2950:	10 c0       	rjmp	.+32     	; 0x2972 <__ftoa_engine+0x174>
    2952:	7d 93       	st	X+, r23
    2954:	2a 95       	dec	r18
    2956:	89 f6       	brne	.-94     	; 0x28fa <__ftoa_engine+0xfc>
    2958:	06 94       	lsr	r0
    295a:	97 95       	ror	r25
    295c:	67 95       	ror	r22
    295e:	37 95       	ror	r19
    2960:	17 95       	ror	r17
    2962:	17 94       	ror	r1
    2964:	e1 18       	sub	r14, r1
    2966:	f1 0a       	sbc	r15, r17
    2968:	43 0b       	sbc	r20, r19
    296a:	56 0b       	sbc	r21, r22
    296c:	c9 0b       	sbc	r28, r25
    296e:	d0 09       	sbc	r29, r0
    2970:	98 f0       	brcs	.+38     	; 0x2998 <__ftoa_engine+0x19a>
    2972:	23 95       	inc	r18
    2974:	7e 91       	ld	r23, -X
    2976:	73 95       	inc	r23
    2978:	7a 33       	cpi	r23, 0x3A	; 58
    297a:	08 f0       	brcs	.+2      	; 0x297e <__ftoa_engine+0x180>
    297c:	70 e3       	ldi	r23, 0x30	; 48
    297e:	7c 93       	st	X, r23
    2980:	20 13       	cpse	r18, r16
    2982:	b8 f7       	brcc	.-18     	; 0x2972 <__ftoa_engine+0x174>
    2984:	7e 91       	ld	r23, -X
    2986:	70 61       	ori	r23, 0x10	; 16
    2988:	7d 93       	st	X+, r23
    298a:	30 f0       	brcs	.+12     	; 0x2998 <__ftoa_engine+0x19a>
    298c:	83 95       	inc	r24
    298e:	71 e3       	ldi	r23, 0x31	; 49
    2990:	7d 93       	st	X+, r23
    2992:	70 e3       	ldi	r23, 0x30	; 48
    2994:	2a 95       	dec	r18
    2996:	e1 f7       	brne	.-8      	; 0x2990 <__ftoa_engine+0x192>
    2998:	11 24       	eor	r1, r1
    299a:	ef 90       	pop	r14
    299c:	ff 90       	pop	r15
    299e:	0f 91       	pop	r16
    29a0:	1f 91       	pop	r17
    29a2:	cf 91       	pop	r28
    29a4:	df 91       	pop	r29
    29a6:	99 27       	eor	r25, r25
    29a8:	87 fd       	sbrc	r24, 7
    29aa:	90 95       	com	r25
    29ac:	08 95       	ret

000029ae <strnlen_P>:
    29ae:	fc 01       	movw	r30, r24
    29b0:	05 90       	lpm	r0, Z+
    29b2:	61 50       	subi	r22, 0x01	; 1
    29b4:	70 40       	sbci	r23, 0x00	; 0
    29b6:	01 10       	cpse	r0, r1
    29b8:	d8 f7       	brcc	.-10     	; 0x29b0 <strnlen_P+0x2>
    29ba:	80 95       	com	r24
    29bc:	90 95       	com	r25
    29be:	8e 0f       	add	r24, r30
    29c0:	9f 1f       	adc	r25, r31
    29c2:	08 95       	ret

000029c4 <strnlen>:
    29c4:	fc 01       	movw	r30, r24
    29c6:	61 50       	subi	r22, 0x01	; 1
    29c8:	70 40       	sbci	r23, 0x00	; 0
    29ca:	01 90       	ld	r0, Z+
    29cc:	01 10       	cpse	r0, r1
    29ce:	d8 f7       	brcc	.-10     	; 0x29c6 <strnlen+0x2>
    29d0:	80 95       	com	r24
    29d2:	90 95       	com	r25
    29d4:	8e 0f       	add	r24, r30
    29d6:	9f 1f       	adc	r25, r31
    29d8:	08 95       	ret

000029da <fputc>:
    29da:	0f 93       	push	r16
    29dc:	1f 93       	push	r17
    29de:	cf 93       	push	r28
    29e0:	df 93       	push	r29
    29e2:	fb 01       	movw	r30, r22
    29e4:	23 81       	ldd	r18, Z+3	; 0x03
    29e6:	21 fd       	sbrc	r18, 1
    29e8:	03 c0       	rjmp	.+6      	; 0x29f0 <fputc+0x16>
    29ea:	8f ef       	ldi	r24, 0xFF	; 255
    29ec:	9f ef       	ldi	r25, 0xFF	; 255
    29ee:	28 c0       	rjmp	.+80     	; 0x2a40 <fputc+0x66>
    29f0:	22 ff       	sbrs	r18, 2
    29f2:	16 c0       	rjmp	.+44     	; 0x2a20 <fputc+0x46>
    29f4:	46 81       	ldd	r20, Z+6	; 0x06
    29f6:	57 81       	ldd	r21, Z+7	; 0x07
    29f8:	24 81       	ldd	r18, Z+4	; 0x04
    29fa:	35 81       	ldd	r19, Z+5	; 0x05
    29fc:	42 17       	cp	r20, r18
    29fe:	53 07       	cpc	r21, r19
    2a00:	44 f4       	brge	.+16     	; 0x2a12 <fputc+0x38>
    2a02:	a0 81       	ld	r26, Z
    2a04:	b1 81       	ldd	r27, Z+1	; 0x01
    2a06:	9d 01       	movw	r18, r26
    2a08:	2f 5f       	subi	r18, 0xFF	; 255
    2a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a0c:	31 83       	std	Z+1, r19	; 0x01
    2a0e:	20 83       	st	Z, r18
    2a10:	8c 93       	st	X, r24
    2a12:	26 81       	ldd	r18, Z+6	; 0x06
    2a14:	37 81       	ldd	r19, Z+7	; 0x07
    2a16:	2f 5f       	subi	r18, 0xFF	; 255
    2a18:	3f 4f       	sbci	r19, 0xFF	; 255
    2a1a:	37 83       	std	Z+7, r19	; 0x07
    2a1c:	26 83       	std	Z+6, r18	; 0x06
    2a1e:	10 c0       	rjmp	.+32     	; 0x2a40 <fputc+0x66>
    2a20:	eb 01       	movw	r28, r22
    2a22:	09 2f       	mov	r16, r25
    2a24:	18 2f       	mov	r17, r24
    2a26:	00 84       	ldd	r0, Z+8	; 0x08
    2a28:	f1 85       	ldd	r31, Z+9	; 0x09
    2a2a:	e0 2d       	mov	r30, r0
    2a2c:	09 95       	icall
    2a2e:	89 2b       	or	r24, r25
    2a30:	e1 f6       	brne	.-72     	; 0x29ea <fputc+0x10>
    2a32:	8e 81       	ldd	r24, Y+6	; 0x06
    2a34:	9f 81       	ldd	r25, Y+7	; 0x07
    2a36:	01 96       	adiw	r24, 0x01	; 1
    2a38:	9f 83       	std	Y+7, r25	; 0x07
    2a3a:	8e 83       	std	Y+6, r24	; 0x06
    2a3c:	81 2f       	mov	r24, r17
    2a3e:	90 2f       	mov	r25, r16
    2a40:	df 91       	pop	r29
    2a42:	cf 91       	pop	r28
    2a44:	1f 91       	pop	r17
    2a46:	0f 91       	pop	r16
    2a48:	08 95       	ret

00002a4a <printf>:
    2a4a:	a0 e0       	ldi	r26, 0x00	; 0
    2a4c:	b0 e0       	ldi	r27, 0x00	; 0
    2a4e:	eb e2       	ldi	r30, 0x2B	; 43
    2a50:	f5 e1       	ldi	r31, 0x15	; 21
    2a52:	0c 94 ab 12 	jmp	0x2556	; 0x2556 <__prologue_saves__+0x20>
    2a56:	ae 01       	movw	r20, r28
    2a58:	4b 5f       	subi	r20, 0xFB	; 251
    2a5a:	5f 4f       	sbci	r21, 0xFF	; 255
    2a5c:	fa 01       	movw	r30, r20
    2a5e:	61 91       	ld	r22, Z+
    2a60:	71 91       	ld	r23, Z+
    2a62:	af 01       	movw	r20, r30
    2a64:	80 91 e0 08 	lds	r24, 0x08E0
    2a68:	90 91 e1 08 	lds	r25, 0x08E1
    2a6c:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <vfprintf>
    2a70:	e2 e0       	ldi	r30, 0x02	; 2
    2a72:	0c 94 c7 12 	jmp	0x258e	; 0x258e <__epilogue_restores__+0x20>

00002a76 <puts>:
    2a76:	0f 93       	push	r16
    2a78:	1f 93       	push	r17
    2a7a:	cf 93       	push	r28
    2a7c:	df 93       	push	r29
    2a7e:	e0 91 e0 08 	lds	r30, 0x08E0
    2a82:	f0 91 e1 08 	lds	r31, 0x08E1
    2a86:	23 81       	ldd	r18, Z+3	; 0x03
    2a88:	21 ff       	sbrs	r18, 1
    2a8a:	1b c0       	rjmp	.+54     	; 0x2ac2 <puts+0x4c>
    2a8c:	8c 01       	movw	r16, r24
    2a8e:	d0 e0       	ldi	r29, 0x00	; 0
    2a90:	c0 e0       	ldi	r28, 0x00	; 0
    2a92:	f8 01       	movw	r30, r16
    2a94:	81 91       	ld	r24, Z+
    2a96:	8f 01       	movw	r16, r30
    2a98:	60 91 e0 08 	lds	r22, 0x08E0
    2a9c:	70 91 e1 08 	lds	r23, 0x08E1
    2aa0:	db 01       	movw	r26, r22
    2aa2:	18 96       	adiw	r26, 0x08	; 8
    2aa4:	ed 91       	ld	r30, X+
    2aa6:	fc 91       	ld	r31, X
    2aa8:	19 97       	sbiw	r26, 0x09	; 9
    2aaa:	88 23       	and	r24, r24
    2aac:	31 f0       	breq	.+12     	; 0x2aba <puts+0x44>
    2aae:	09 95       	icall
    2ab0:	89 2b       	or	r24, r25
    2ab2:	79 f3       	breq	.-34     	; 0x2a92 <puts+0x1c>
    2ab4:	df ef       	ldi	r29, 0xFF	; 255
    2ab6:	cf ef       	ldi	r28, 0xFF	; 255
    2ab8:	ec cf       	rjmp	.-40     	; 0x2a92 <puts+0x1c>
    2aba:	8a e0       	ldi	r24, 0x0A	; 10
    2abc:	09 95       	icall
    2abe:	89 2b       	or	r24, r25
    2ac0:	19 f0       	breq	.+6      	; 0x2ac8 <puts+0x52>
    2ac2:	8f ef       	ldi	r24, 0xFF	; 255
    2ac4:	9f ef       	ldi	r25, 0xFF	; 255
    2ac6:	02 c0       	rjmp	.+4      	; 0x2acc <puts+0x56>
    2ac8:	8d 2f       	mov	r24, r29
    2aca:	9c 2f       	mov	r25, r28
    2acc:	df 91       	pop	r29
    2ace:	cf 91       	pop	r28
    2ad0:	1f 91       	pop	r17
    2ad2:	0f 91       	pop	r16
    2ad4:	08 95       	ret

00002ad6 <__ultoa_invert>:
    2ad6:	fa 01       	movw	r30, r20
    2ad8:	aa 27       	eor	r26, r26
    2ada:	28 30       	cpi	r18, 0x08	; 8
    2adc:	51 f1       	breq	.+84     	; 0x2b32 <__ultoa_invert+0x5c>
    2ade:	20 31       	cpi	r18, 0x10	; 16
    2ae0:	81 f1       	breq	.+96     	; 0x2b42 <__ultoa_invert+0x6c>
    2ae2:	e8 94       	clt
    2ae4:	6f 93       	push	r22
    2ae6:	6e 7f       	andi	r22, 0xFE	; 254
    2ae8:	6e 5f       	subi	r22, 0xFE	; 254
    2aea:	7f 4f       	sbci	r23, 0xFF	; 255
    2aec:	8f 4f       	sbci	r24, 0xFF	; 255
    2aee:	9f 4f       	sbci	r25, 0xFF	; 255
    2af0:	af 4f       	sbci	r26, 0xFF	; 255
    2af2:	b1 e0       	ldi	r27, 0x01	; 1
    2af4:	3e d0       	rcall	.+124    	; 0x2b72 <__ultoa_invert+0x9c>
    2af6:	b4 e0       	ldi	r27, 0x04	; 4
    2af8:	3c d0       	rcall	.+120    	; 0x2b72 <__ultoa_invert+0x9c>
    2afa:	67 0f       	add	r22, r23
    2afc:	78 1f       	adc	r23, r24
    2afe:	89 1f       	adc	r24, r25
    2b00:	9a 1f       	adc	r25, r26
    2b02:	a1 1d       	adc	r26, r1
    2b04:	68 0f       	add	r22, r24
    2b06:	79 1f       	adc	r23, r25
    2b08:	8a 1f       	adc	r24, r26
    2b0a:	91 1d       	adc	r25, r1
    2b0c:	a1 1d       	adc	r26, r1
    2b0e:	6a 0f       	add	r22, r26
    2b10:	71 1d       	adc	r23, r1
    2b12:	81 1d       	adc	r24, r1
    2b14:	91 1d       	adc	r25, r1
    2b16:	a1 1d       	adc	r26, r1
    2b18:	20 d0       	rcall	.+64     	; 0x2b5a <__ultoa_invert+0x84>
    2b1a:	09 f4       	brne	.+2      	; 0x2b1e <__ultoa_invert+0x48>
    2b1c:	68 94       	set
    2b1e:	3f 91       	pop	r19
    2b20:	2a e0       	ldi	r18, 0x0A	; 10
    2b22:	26 9f       	mul	r18, r22
    2b24:	11 24       	eor	r1, r1
    2b26:	30 19       	sub	r19, r0
    2b28:	30 5d       	subi	r19, 0xD0	; 208
    2b2a:	31 93       	st	Z+, r19
    2b2c:	de f6       	brtc	.-74     	; 0x2ae4 <__ultoa_invert+0xe>
    2b2e:	cf 01       	movw	r24, r30
    2b30:	08 95       	ret
    2b32:	46 2f       	mov	r20, r22
    2b34:	47 70       	andi	r20, 0x07	; 7
    2b36:	40 5d       	subi	r20, 0xD0	; 208
    2b38:	41 93       	st	Z+, r20
    2b3a:	b3 e0       	ldi	r27, 0x03	; 3
    2b3c:	0f d0       	rcall	.+30     	; 0x2b5c <__ultoa_invert+0x86>
    2b3e:	c9 f7       	brne	.-14     	; 0x2b32 <__ultoa_invert+0x5c>
    2b40:	f6 cf       	rjmp	.-20     	; 0x2b2e <__ultoa_invert+0x58>
    2b42:	46 2f       	mov	r20, r22
    2b44:	4f 70       	andi	r20, 0x0F	; 15
    2b46:	40 5d       	subi	r20, 0xD0	; 208
    2b48:	4a 33       	cpi	r20, 0x3A	; 58
    2b4a:	18 f0       	brcs	.+6      	; 0x2b52 <__ultoa_invert+0x7c>
    2b4c:	49 5d       	subi	r20, 0xD9	; 217
    2b4e:	31 fd       	sbrc	r19, 1
    2b50:	40 52       	subi	r20, 0x20	; 32
    2b52:	41 93       	st	Z+, r20
    2b54:	02 d0       	rcall	.+4      	; 0x2b5a <__ultoa_invert+0x84>
    2b56:	a9 f7       	brne	.-22     	; 0x2b42 <__ultoa_invert+0x6c>
    2b58:	ea cf       	rjmp	.-44     	; 0x2b2e <__ultoa_invert+0x58>
    2b5a:	b4 e0       	ldi	r27, 0x04	; 4
    2b5c:	a6 95       	lsr	r26
    2b5e:	97 95       	ror	r25
    2b60:	87 95       	ror	r24
    2b62:	77 95       	ror	r23
    2b64:	67 95       	ror	r22
    2b66:	ba 95       	dec	r27
    2b68:	c9 f7       	brne	.-14     	; 0x2b5c <__ultoa_invert+0x86>
    2b6a:	00 97       	sbiw	r24, 0x00	; 0
    2b6c:	61 05       	cpc	r22, r1
    2b6e:	71 05       	cpc	r23, r1
    2b70:	08 95       	ret
    2b72:	9b 01       	movw	r18, r22
    2b74:	ac 01       	movw	r20, r24
    2b76:	0a 2e       	mov	r0, r26
    2b78:	06 94       	lsr	r0
    2b7a:	57 95       	ror	r21
    2b7c:	47 95       	ror	r20
    2b7e:	37 95       	ror	r19
    2b80:	27 95       	ror	r18
    2b82:	ba 95       	dec	r27
    2b84:	c9 f7       	brne	.-14     	; 0x2b78 <__ultoa_invert+0xa2>
    2b86:	62 0f       	add	r22, r18
    2b88:	73 1f       	adc	r23, r19
    2b8a:	84 1f       	adc	r24, r20
    2b8c:	95 1f       	adc	r25, r21
    2b8e:	a0 1d       	adc	r26, r0
    2b90:	08 95       	ret

00002b92 <_exit>:
    2b92:	f8 94       	cli

00002b94 <__stop_program>:
    2b94:	ff cf       	rjmp	.-2      	; 0x2b94 <__stop_program>
