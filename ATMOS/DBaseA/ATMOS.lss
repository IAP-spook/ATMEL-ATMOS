
ATMOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003a2  00800200  00003ad0  00003b64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003ad0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004ca  008005a2  008005a2  00003f06  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003f06  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003f64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000007f8  00000000  00000000  00003fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009eb6  00000000  00000000  0000479c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003272  00000000  00000000  0000e652  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000303a  00000000  00000000  000118c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001470  00000000  00000000  00014900  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000232e  00000000  00000000  00015d70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000559a  00000000  00000000  0001809e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007b0  00000000  00000000  0001d638  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__ctors_end>
       4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      10:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      14:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      18:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      1c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      20:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      24:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      28:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      30:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      34:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      38:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      3c:	0c 94 24 07 	jmp	0xe48	; 0xe48 <__vector_15>
      40:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      44:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      48:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      4c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      50:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      54:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      58:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      5c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      60:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      64:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      68:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      6c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      70:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      74:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      78:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      7c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      80:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      84:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      88:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      8c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      90:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      94:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      98:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      9c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a8:	0c 94 df 09 	jmp	0x13be	; 0x13be <__vector_42>
      ac:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      bc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      cc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      dc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      ec:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      fc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     100:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     104:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     108:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     10c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     110:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     114:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     118:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     11c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     120:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     124:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     128:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     12c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     130:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>

00000134 <__trampolines_end>:
     134:	6e 61       	ori	r22, 0x1E	; 30
     136:	6e 00       	.word	0x006e	; ????

00000138 <__c.2177>:
     138:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     148:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     158:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     168:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     178:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     188:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     198:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     208:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     218:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     228:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000236 <__ctors_end>:
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	d1 e2       	ldi	r29, 0x21	; 33
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61

00000242 <__do_copy_data>:
     242:	15 e0       	ldi	r17, 0x05	; 5
     244:	a0 e0       	ldi	r26, 0x00	; 0
     246:	b2 e0       	ldi	r27, 0x02	; 2
     248:	e0 ed       	ldi	r30, 0xD0	; 208
     24a:	fa e3       	ldi	r31, 0x3A	; 58
     24c:	02 c0       	rjmp	.+4      	; 0x252 <__do_copy_data+0x10>
     24e:	05 90       	lpm	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	a2 3a       	cpi	r26, 0xA2	; 162
     254:	b1 07       	cpc	r27, r17
     256:	d9 f7       	brne	.-10     	; 0x24e <__do_copy_data+0xc>

00000258 <__do_clear_bss>:
     258:	2a e0       	ldi	r18, 0x0A	; 10
     25a:	a2 ea       	ldi	r26, 0xA2	; 162
     25c:	b5 e0       	ldi	r27, 0x05	; 5
     25e:	01 c0       	rjmp	.+2      	; 0x262 <.do_clear_bss_start>

00000260 <.do_clear_bss_loop>:
     260:	1d 92       	st	X+, r1

00000262 <.do_clear_bss_start>:
     262:	ac 36       	cpi	r26, 0x6C	; 108
     264:	b2 07       	cpc	r27, r18
     266:	e1 f7       	brne	.-8      	; 0x260 <.do_clear_bss_loop>
     268:	0e 94 3a 01 	call	0x274	; 0x274 <main>
     26c:	0c 94 66 1d 	jmp	0x3acc	; 0x3acc <_exit>

00000270 <__bad_interrupt>:
     270:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000274 <main>:
}


int main(void)
{
	SYS_Init();
     274:	0e 94 8f 0d 	call	0x1b1e	; 0x1b1e <SYS_Init>
int SensorDataCount;
DataUnit *cur_data = NULL;

/* TODO : clean up these messy init */
static void APP_Init(void){
	PWR_Init();
     278:	0e 94 8c 08 	call	0x1118	; 0x1118 <PWR_Init>
	PWR_TurnOn5V();
     27c:	0e 94 90 08 	call	0x1120	; 0x1120 <PWR_TurnOn5V>
	USART0_Init(9600);
     280:	60 e8       	ldi	r22, 0x80	; 128
     282:	75 e2       	ldi	r23, 0x25	; 37
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 72 09 	call	0x12e4	; 0x12e4 <USART0_Init>
	DDRB |= 0b00010000;
     28c:	24 9a       	sbi	0x04, 4	; 4
	DDRE |= 0b00001000;
     28e:	6b 9a       	sbi	0x0d, 3	; 13
	PORTE|= 0b00001000;
     290:	73 9a       	sbi	0x0e, 3	; 14
	TWI_Init(10000);
     292:	60 e1       	ldi	r22, 0x10	; 16
     294:	77 e2       	ldi	r23, 0x27	; 39
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 96 08 	call	0x112c	; 0x112c <TWI_Init>
	ADC_Init();
     29e:	0e 94 18 07 	call	0xe30	; 0xe30 <ADC_Init>
	printf("BMP280 Status %i\n", BMP280_Init());
     2a2:	0e 94 03 02 	call	0x406	; 0x406 <BMP280_Init>
     2a6:	9f 93       	push	r25
     2a8:	8f 93       	push	r24
     2aa:	86 e5       	ldi	r24, 0x56	; 86
     2ac:	92 e0       	ldi	r25, 0x02	; 2
     2ae:	9f 93       	push	r25
     2b0:	8f 93       	push	r24
     2b2:	0e 94 bb 1c 	call	0x3976	; 0x3976 <printf>
	BMP280_SetOversampling(4);
     2b6:	84 e0       	ldi	r24, 0x04	; 4
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <BMP280_SetOversampling>
	SPI_SlaveInit();
     2be:	0e 94 92 08 	call	0x1124	; 0x1124 <SPI_SlaveInit>
	SensorDataCount = 0;
     2c2:	10 92 32 0a 	sts	0x0A32, r1
     2c6:	10 92 31 0a 	sts	0x0A31, r1
{
	SYS_Init();
	APP_Init();
	
	// could have sealed following in a function //
	init_timeoutq();
     2ca:	0e 94 2f 0c 	call	0x185e	; 0x185e <init_timeoutq>
	BMP280Sensor *BMP280_ptr = New_BMP280_Sensor( 0,2 );
     2ce:	62 e0       	ldi	r22, 0x02	; 2
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 13 13 	call	0x2626	; 0x2626 <New_BMP280_Sensor>
     2da:	6c 01       	movw	r12, r24
	Si7020Sensor *Si_ptr = New_Si7020_Sensor(0,2);
     2dc:	62 e0       	ldi	r22, 0x02	; 2
     2de:	70 e0       	ldi	r23, 0x00	; 0
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <New_Si7020_Sensor>
     2e8:	7c 01       	movw	r14, r24
	
	DemoStorageDevice *Strg_ptr = New_DemoStorage_Device(0);
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 8e 11 	call	0x231c	; 0x231c <New_DemoStorage_Device>
     2f2:	8c 01       	movw	r16, r24
	LoadDataDevice *Load_ptr = New_LoadData_Device(0,Strg_ptr);
     2f4:	bc 01       	movw	r22, r24
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 60 12 	call	0x24c0	; 0x24c0 <New_LoadData_Device>
     2fe:	ec 01       	movw	r28, r24
	
	init_Event_Timer();
     300:	0e 94 69 07 	call	0xed2	; 0xed2 <init_Event_Timer>
	printf("init done!\n");
     304:	88 e6       	ldi	r24, 0x68	; 104
     306:	92 e0       	ldi	r25, 0x02	; 2
     308:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <puts>
	
	// could have sealed following in a function //
	load_new_sensor( 1000, 4000, (BaseSensor *)BMP280_ptr, 0 );
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	a6 01       	movw	r20, r12
     312:	60 ea       	ldi	r22, 0xA0	; 160
     314:	7f e0       	ldi	r23, 0x0F	; 15
     316:	88 ee       	ldi	r24, 0xE8	; 232
     318:	93 e0       	ldi	r25, 0x03	; 3
     31a:	0e 94 b6 0c 	call	0x196c	; 0x196c <load_new_sensor>
	load_new_sensor( 3000, 4000, (BaseSensor *)Si_ptr, 0 );
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	a7 01       	movw	r20, r14
     324:	60 ea       	ldi	r22, 0xA0	; 160
     326:	7f e0       	ldi	r23, 0x0F	; 15
     328:	88 eb       	ldi	r24, 0xB8	; 184
     32a:	9b e0       	ldi	r25, 0x0B	; 11
     32c:	0e 94 b6 0c 	call	0x196c	; 0x196c <load_new_sensor>
	load_new_device( 3300, 12000, (BaseDevice *)Strg_ptr, 0 );
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	a8 01       	movw	r20, r16
     336:	60 ee       	ldi	r22, 0xE0	; 224
     338:	7e e2       	ldi	r23, 0x2E	; 46
     33a:	84 ee       	ldi	r24, 0xE4	; 228
     33c:	9c e0       	ldi	r25, 0x0C	; 12
     33e:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <load_new_device>
	load_new_device( 100, 4000, (BaseDevice *)Load_ptr, 0 );
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	ae 01       	movw	r20, r28
     348:	60 ea       	ldi	r22, 0xA0	; 160
     34a:	7f e0       	ldi	r23, 0x0F	; 15
     34c:	84 e6       	ldi	r24, 0x64	; 100
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <load_new_device>
	// load_new_sensor( 4, 4, (BaseSensor *)Si7020_ptr, 0 );
	init_set_timer( get_next_interval() );
     354:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <get_next_interval>
     358:	0e 94 63 08 	call	0x10c6	; 0x10c6 <init_set_timer>
	
	// Enable global interrupt //
	sei();
     35c:	78 94       	sei
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0

	for (;;){}
     366:	ff cf       	rjmp	.-2      	; 0x366 <main+0xf2>

00000368 <BMP280_ReadBytes>:
  @brief Reads some bytes from the BMP280
  @param[in] *values pointer to an array to store the bytes, put the starting register in values[0]
  @param[in] length how many bytes to read
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadBytes(unsigned char *values, char length){
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	ec 01       	movw	r28, r24
     370:	16 2f       	mov	r17, r22
	//printf("BMP280_ReadBytes");
	//printf("0x%1x",(unsigned)TWI_BeginWrite(BMP280_ADDR));
	TWI_BeginWrite(BMP280_ADDR);
     372:	86 e7       	ldi	r24, 0x76	; 118
     374:	0e 94 c2 08 	call	0x1184	; 0x1184 <TWI_BeginWrite>
	//printf("0x%1x",(unsigned)TWI_WriteByte(values[0]));
	TWI_WriteByte(values[0]);//Write the register address
     378:	88 81       	ld	r24, Y
     37a:	0e 94 b4 08 	call	0x1168	; 0x1168 <TWI_WriteByte>
	status = TWI_BeginRead(BMP280_ADDR); //Send a repeated start
     37e:	86 e7       	ldi	r24, 0x76	; 118
     380:	0e 94 df 08 	call	0x11be	; 0x11be <TWI_BeginRead>
     384:	80 93 a4 05 	sts	0x05A4, r24
	//printf("0x%1x",status);
	if (status == TWI_SLAR_ACK){
     388:	80 34       	cpi	r24, 0x40	; 64
     38a:	81 f4       	brne	.+32     	; 0x3ac <BMP280_ReadBytes+0x44>
		if(((TWI_Read(&values[0],length,false)&TWSR_MASK) == TWI_REC_NACK) && (TWI_Stop() != 0)) return(1); //Receive bytes, send a STOP bit, and check for success
     38c:	61 2f       	mov	r22, r17
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	40 e0       	ldi	r20, 0x00	; 0
     392:	ce 01       	movw	r24, r28
     394:	0e 94 1c 09 	call	0x1238	; 0x1238 <TWI_Read>
     398:	88 7f       	andi	r24, 0xF8	; 248
     39a:	88 35       	cpi	r24, 0x58	; 88
     39c:	49 f4       	brne	.+18     	; 0x3b0 <BMP280_ReadBytes+0x48>
     39e:	0e 94 17 09 	call	0x122e	; 0x122e <TWI_Stop>
     3a2:	91 e0       	ldi	r25, 0x01	; 1
     3a4:	81 11       	cpse	r24, r1
     3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <BMP280_ReadBytes+0x4a>
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	03 c0       	rjmp	.+6      	; 0x3b2 <BMP280_ReadBytes+0x4a>
	}
	return(0);
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <BMP280_ReadBytes+0x4a>
     3b0:	90 e0       	ldi	r25, 0x00	; 0
}
     3b2:	89 2f       	mov	r24, r25
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	1f 91       	pop	r17
     3ba:	08 95       	ret

000003bc <BMP280_ReadInt>:
  @brief Reads an int from the BMP280
  @param[in] address The register address of the first byte of the uint
  @param[out] val* A pointer to a uint to store the received data to
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadInt(char address, int *val){
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	00 d0       	rcall	.+0      	; 0x3c6 <BMP280_ReadInt+0xa>
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
     3ca:	8b 01       	movw	r16, r22
	//printf("\nBMP280_ReadInt");
	unsigned char data[2];	//char is 4 bits, 1 byte

	data[0] = address;
     3cc:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     3ce:	62 e0       	ldi	r22, 0x02	; 2
     3d0:	ce 01       	movw	r24, r28
     3d2:	01 96       	adiw	r24, 0x01	; 1
     3d4:	0e 94 b4 01 	call	0x368	; 0x368 <BMP280_ReadBytes>
     3d8:	88 23       	and	r24, r24
     3da:	59 f0       	breq	.+22     	; 0x3f2 <BMP280_ReadInt+0x36>
		*val = (((int)data[1]<<8)|(int)data[0]);
     3dc:	8a 81       	ldd	r24, Y+2	; 0x02
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	98 2f       	mov	r25, r24
     3e2:	88 27       	eor	r24, r24
     3e4:	29 81       	ldd	r18, Y+1	; 0x01
     3e6:	82 2b       	or	r24, r18
     3e8:	f8 01       	movw	r30, r16
     3ea:	91 83       	std	Z+1, r25	; 0x01
     3ec:	80 83       	st	Z, r24
		return(1);
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <BMP280_ReadInt+0x3c>
	}
	*val = 0;
     3f2:	f8 01       	movw	r30, r16
     3f4:	11 82       	std	Z+1, r1	; 0x01
     3f6:	10 82       	st	Z, r1
	return(0);
}
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	08 95       	ret

00000406 <BMP280_Init>:

/*************************************************************************//**
  @brief Initializes the BMP280 and reads the calibration data from the device
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
char BMP280_Init(void){
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	00 d0       	rcall	.+0      	; 0x40c <BMP280_Init+0x6>
     40c:	cd b7       	in	r28, 0x3d	; 61
     40e:	de b7       	in	r29, 0x3e	; 62
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
     410:	88 e8       	ldi	r24, 0x88	; 136
     412:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     414:	62 e0       	ldi	r22, 0x02	; 2
     416:	ce 01       	movw	r24, r28
     418:	01 96       	adiw	r24, 0x01	; 1
     41a:	0e 94 b4 01 	call	0x368	; 0x368 <BMP280_ReadBytes>
     41e:	88 23       	and	r24, r24
     420:	99 f0       	breq	.+38     	; 0x448 <BMP280_Init+0x42>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     422:	8a 81       	ldd	r24, Y+2	; 0x02
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	98 2f       	mov	r25, r24
     428:	88 27       	eor	r24, r24
     42a:	29 81       	ldd	r18, Y+1	; 0x01
     42c:	82 2b       	or	r24, r18
     42e:	90 93 af 05 	sts	0x05AF, r25
     432:	80 93 ae 05 	sts	0x05AE, r24

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
     436:	64 ec       	ldi	r22, 0xC4	; 196
     438:	75 e0       	ldi	r23, 0x05	; 5
     43a:	8a e8       	ldi	r24, 0x8A	; 138
     43c:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
	// used in the calculations when taking measurements.

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
     440:	88 23       	and	r24, r24
     442:	09 f4       	brne	.+2      	; 0x446 <BMP280_Init+0x40>
     444:	bb c0       	rjmp	.+374    	; 0x5bc <BMP280_Init+0x1b6>
     446:	05 c0       	rjmp	.+10     	; 0x452 <BMP280_Init+0x4c>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     448:	10 92 af 05 	sts	0x05AF, r1
     44c:	10 92 ae 05 	sts	0x05AE, r1
     450:	b5 c0       	rjmp	.+362    	; 0x5bc <BMP280_Init+0x1b6>
	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
     452:	62 ec       	ldi	r22, 0xC2	; 194
     454:	75 e0       	ldi	r23, 0x05	; 5
     456:	8c e8       	ldi	r24, 0x8C	; 140
     458:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
     45c:	88 23       	and	r24, r24
     45e:	09 f4       	brne	.+2      	; 0x462 <BMP280_Init+0x5c>
     460:	ad c0       	rjmp	.+346    	; 0x5bc <BMP280_Init+0x1b6>
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
     462:	8e e8       	ldi	r24, 0x8E	; 142
     464:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     466:	62 e0       	ldi	r22, 0x02	; 2
     468:	ce 01       	movw	r24, r28
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	0e 94 b4 01 	call	0x368	; 0x368 <BMP280_ReadBytes>
     470:	88 23       	and	r24, r24
     472:	99 f0       	breq	.+38     	; 0x49a <BMP280_Init+0x94>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     474:	8a 81       	ldd	r24, Y+2	; 0x02
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	98 2f       	mov	r25, r24
     47a:	88 27       	eor	r24, r24
     47c:	29 81       	ldd	r18, Y+1	; 0x01
     47e:	82 2b       	or	r24, r18
     480:	90 93 b1 05 	sts	0x05B1, r25
     484:	80 93 b0 05 	sts	0x05B0, r24
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     488:	60 ec       	ldi	r22, 0xC0	; 192
     48a:	75 e0       	ldi	r23, 0x05	; 5
     48c:	80 e9       	ldi	r24, 0x90	; 144
     48e:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
     492:	88 23       	and	r24, r24
     494:	09 f4       	brne	.+2      	; 0x498 <BMP280_Init+0x92>
     496:	92 c0       	rjmp	.+292    	; 0x5bc <BMP280_Init+0x1b6>
     498:	05 c0       	rjmp	.+10     	; 0x4a4 <BMP280_Init+0x9e>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     49a:	10 92 b1 05 	sts	0x05B1, r1
     49e:	10 92 b0 05 	sts	0x05B0, r1
     4a2:	8c c0       	rjmp	.+280    	; 0x5bc <BMP280_Init+0x1b6>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     4a4:	6e eb       	ldi	r22, 0xBE	; 190
     4a6:	75 e0       	ldi	r23, 0x05	; 5
     4a8:	82 e9       	ldi	r24, 0x92	; 146
     4aa:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     4ae:	88 23       	and	r24, r24
     4b0:	09 f4       	brne	.+2      	; 0x4b4 <BMP280_Init+0xae>
     4b2:	84 c0       	rjmp	.+264    	; 0x5bc <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     4b4:	6c eb       	ldi	r22, 0xBC	; 188
     4b6:	75 e0       	ldi	r23, 0x05	; 5
     4b8:	84 e9       	ldi	r24, 0x94	; 148
     4ba:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     4be:	88 23       	and	r24, r24
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <BMP280_Init+0xbe>
     4c2:	7c c0       	rjmp	.+248    	; 0x5bc <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     4c4:	6a eb       	ldi	r22, 0xBA	; 186
     4c6:	75 e0       	ldi	r23, 0x05	; 5
     4c8:	86 e9       	ldi	r24, 0x96	; 150
     4ca:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     4ce:	88 23       	and	r24, r24
     4d0:	09 f4       	brne	.+2      	; 0x4d4 <BMP280_Init+0xce>
     4d2:	74 c0       	rjmp	.+232    	; 0x5bc <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     4d4:	68 eb       	ldi	r22, 0xB8	; 184
     4d6:	75 e0       	ldi	r23, 0x05	; 5
     4d8:	88 e9       	ldi	r24, 0x98	; 152
     4da:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     4de:	88 23       	and	r24, r24
     4e0:	09 f4       	brne	.+2      	; 0x4e4 <BMP280_Init+0xde>
     4e2:	6c c0       	rjmp	.+216    	; 0x5bc <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     4e4:	66 eb       	ldi	r22, 0xB6	; 182
     4e6:	75 e0       	ldi	r23, 0x05	; 5
     4e8:	8a e9       	ldi	r24, 0x9A	; 154
     4ea:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     4ee:	88 23       	and	r24, r24
     4f0:	09 f4       	brne	.+2      	; 0x4f4 <BMP280_Init+0xee>
     4f2:	64 c0       	rjmp	.+200    	; 0x5bc <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     4f4:	64 eb       	ldi	r22, 0xB4	; 180
     4f6:	75 e0       	ldi	r23, 0x05	; 5
     4f8:	8c e9       	ldi	r24, 0x9C	; 156
     4fa:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     4fe:	88 23       	and	r24, r24
     500:	09 f4       	brne	.+2      	; 0x504 <BMP280_Init+0xfe>
     502:	5c c0       	rjmp	.+184    	; 0x5bc <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9C, &dig_P8)  &&
		BMP280_ReadInt(0x9E, &dig_P9)){
     504:	62 eb       	ldi	r22, 0xB2	; 178
     506:	75 e0       	ldi	r23, 0x05	; 5
     508:	8e e9       	ldi	r24, 0x9E	; 158
     50a:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     50e:	88 23       	and	r24, r24
     510:	09 f4       	brne	.+2      	; 0x514 <BMP280_Init+0x10e>
     512:	54 c0       	rjmp	.+168    	; 0x5bc <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9E, &dig_P9)){
			printf("\nT: %i ,%i ,%i P: %i ,%i ,%i ,%i ,%i ,%i ,%i ,%1 ,%i \n",dig_T1,dig_T2,dig_T3,dig_P1,dig_P2,dig_P3,dig_P4,dig_P5,dig_P6,dig_P7,dig_P8,dig_P9);
     514:	80 91 b3 05 	lds	r24, 0x05B3
     518:	8f 93       	push	r24
     51a:	80 91 b2 05 	lds	r24, 0x05B2
     51e:	8f 93       	push	r24
     520:	80 91 b5 05 	lds	r24, 0x05B5
     524:	8f 93       	push	r24
     526:	80 91 b4 05 	lds	r24, 0x05B4
     52a:	8f 93       	push	r24
     52c:	80 91 b7 05 	lds	r24, 0x05B7
     530:	8f 93       	push	r24
     532:	80 91 b6 05 	lds	r24, 0x05B6
     536:	8f 93       	push	r24
     538:	80 91 b9 05 	lds	r24, 0x05B9
     53c:	8f 93       	push	r24
     53e:	80 91 b8 05 	lds	r24, 0x05B8
     542:	8f 93       	push	r24
     544:	80 91 bb 05 	lds	r24, 0x05BB
     548:	8f 93       	push	r24
     54a:	80 91 ba 05 	lds	r24, 0x05BA
     54e:	8f 93       	push	r24
     550:	80 91 bd 05 	lds	r24, 0x05BD
     554:	8f 93       	push	r24
     556:	80 91 bc 05 	lds	r24, 0x05BC
     55a:	8f 93       	push	r24
     55c:	80 91 bf 05 	lds	r24, 0x05BF
     560:	8f 93       	push	r24
     562:	80 91 be 05 	lds	r24, 0x05BE
     566:	8f 93       	push	r24
     568:	80 91 c1 05 	lds	r24, 0x05C1
     56c:	8f 93       	push	r24
     56e:	80 91 c0 05 	lds	r24, 0x05C0
     572:	8f 93       	push	r24
     574:	80 91 b1 05 	lds	r24, 0x05B1
     578:	8f 93       	push	r24
     57a:	80 91 b0 05 	lds	r24, 0x05B0
     57e:	8f 93       	push	r24
     580:	80 91 c3 05 	lds	r24, 0x05C3
     584:	8f 93       	push	r24
     586:	80 91 c2 05 	lds	r24, 0x05C2
     58a:	8f 93       	push	r24
     58c:	80 91 c5 05 	lds	r24, 0x05C5
     590:	8f 93       	push	r24
     592:	80 91 c4 05 	lds	r24, 0x05C4
     596:	8f 93       	push	r24
     598:	80 91 af 05 	lds	r24, 0x05AF
     59c:	8f 93       	push	r24
     59e:	80 91 ae 05 	lds	r24, 0x05AE
     5a2:	8f 93       	push	r24
     5a4:	83 e7       	ldi	r24, 0x73	; 115
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	9f 93       	push	r25
     5aa:	8f 93       	push	r24
     5ac:	0e 94 bb 1c 	call	0x3976	; 0x3976 <printf>
		return (1);
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	f8 94       	cli
     5b4:	de bf       	out	0x3e, r29	; 62
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	cd bf       	out	0x3d, r28	; 61
     5ba:	81 e0       	ldi	r24, 0x01	; 1
	}
	else 
		return (0);
}
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	08 95       	ret

000005c6 <BMP280_SetOversampling>:
  @brief Sets the oversampling setting for the library
  @param[in] oss Oversampling setting
  @return 1
*****************************************************************************/
char BMP280_SetOversampling(short oss){
	oversampling = oss;
     5c6:	90 93 ad 05 	sts	0x05AD, r25
     5ca:	80 93 ac 05 	sts	0x05AC, r24
	return (1);
}
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	08 95       	ret

000005d2 <BMP280_StartMeasurment>:

/*************************************************************************//**
  @brief Starts a measurement
  @return time to wait for result (in ms)
*****************************************************************************/
char BMP280_StartMeasurment(void){
     5d2:	1f 93       	push	r17
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	00 d0       	rcall	.+0      	; 0x5da <BMP280_StartMeasurment+0x8>
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
	unsigned char data[2], result, delay;
	
	data[0] = BMP280_REG_CONTROL;
     5de:	84 ef       	ldi	r24, 0xF4	; 244
     5e0:	89 83       	std	Y+1, r24	; 0x01

	switch (oversampling){
     5e2:	80 91 ac 05 	lds	r24, 0x05AC
     5e6:	90 91 ad 05 	lds	r25, 0x05AD
     5ea:	82 30       	cpi	r24, 0x02	; 2
     5ec:	91 05       	cpc	r25, r1
     5ee:	01 f1       	breq	.+64     	; 0x630 <BMP280_StartMeasurment+0x5e>
     5f0:	2c f4       	brge	.+10     	; 0x5fc <BMP280_StartMeasurment+0x2a>
     5f2:	00 97       	sbiw	r24, 0x00	; 0
     5f4:	49 f0       	breq	.+18     	; 0x608 <BMP280_StartMeasurment+0x36>
     5f6:	01 97       	sbiw	r24, 0x01	; 1
     5f8:	89 f0       	breq	.+34     	; 0x61c <BMP280_StartMeasurment+0x4a>
     5fa:	38 c0       	rjmp	.+112    	; 0x66c <BMP280_StartMeasurment+0x9a>
     5fc:	83 30       	cpi	r24, 0x03	; 3
     5fe:	91 05       	cpc	r25, r1
     600:	09 f1       	breq	.+66     	; 0x644 <BMP280_StartMeasurment+0x72>
     602:	04 97       	sbiw	r24, 0x04	; 4
     604:	49 f1       	breq	.+82     	; 0x658 <BMP280_StartMeasurment+0x86>
     606:	32 c0       	rjmp	.+100    	; 0x66c <BMP280_StartMeasurment+0x9a>
		case 0:
		data[1] = BMP280_COMMAND_PRESSURE0;
     608:	85 e2       	ldi	r24, 0x25	; 37
     60a:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	90 93 ab 05 	sts	0x05AB, r25
     614:	80 93 aa 05 	sts	0x05AA, r24
		delay = 8;
     618:	18 e0       	ldi	r17, 0x08	; 8
		break;
     61a:	2b c0       	rjmp	.+86     	; 0x672 <BMP280_StartMeasurment+0xa0>
		case 1:
		data[1] = BMP280_COMMAND_PRESSURE1;
     61c:	89 e2       	ldi	r24, 0x29	; 41
     61e:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	90 93 ab 05 	sts	0x05AB, r25
     628:	80 93 aa 05 	sts	0x05AA, r24
		delay = 10;
     62c:	1a e0       	ldi	r17, 0x0A	; 10
		break;
     62e:	21 c0       	rjmp	.+66     	; 0x672 <BMP280_StartMeasurment+0xa0>
		case 2:
		data[1] = BMP280_COMMAND_PRESSURE2;
     630:	8d e2       	ldi	r24, 0x2D	; 45
     632:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	90 93 ab 05 	sts	0x05AB, r25
     63c:	80 93 aa 05 	sts	0x05AA, r24
		delay = 15;
     640:	1f e0       	ldi	r17, 0x0F	; 15
		break;
     642:	17 c0       	rjmp	.+46     	; 0x672 <BMP280_StartMeasurment+0xa0>
		case 3:
		data[1] = BMP280_COMMAND_PRESSURE3;
     644:	81 e3       	ldi	r24, 0x31	; 49
     646:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	90 93 ab 05 	sts	0x05AB, r25
     650:	80 93 aa 05 	sts	0x05AA, r24
		delay = 24;
     654:	18 e1       	ldi	r17, 0x18	; 24
		break;
     656:	0d c0       	rjmp	.+26     	; 0x672 <BMP280_StartMeasurment+0xa0>
		case 4:
		data[1] = BMP280_COMMAND_PRESSURE4;
     658:	8d e5       	ldi	r24, 0x5D	; 93
     65a:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	90 93 ab 05 	sts	0x05AB, r25
     664:	80 93 aa 05 	sts	0x05AA, r24
		delay = 45;
     668:	1d e2       	ldi	r17, 0x2D	; 45
		break;
     66a:	03 c0       	rjmp	.+6      	; 0x672 <BMP280_StartMeasurment+0xa0>
		default:
		data[1] = BMP280_COMMAND_PRESSURE0;
     66c:	85 e2       	ldi	r24, 0x25	; 37
     66e:	8a 83       	std	Y+2, r24	; 0x02
		delay = 9;
     670:	19 e0       	ldi	r17, 0x09	; 9
  @param[in] *values pointer to an array to send, put the starting register in values[0]
  @param[in] length how many bytes to write (including the starting register ie. sizeof(values))
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_WriteBytes(unsigned char *values, char length){
	TWI_BeginWrite(BMP280_ADDR);
     672:	86 e7       	ldi	r24, 0x76	; 118
     674:	0e 94 c2 08 	call	0x1184	; 0x1184 <TWI_BeginWrite>
	if((TWI_Write(&values[0],length) == TWI_SENT_ACK) && (TWI_Stop() != 0)) return 1; //Send bytes, a STOP bit, and check for success
     678:	62 e0       	ldi	r22, 0x02	; 2
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	ce 01       	movw	r24, r28
     67e:	01 96       	adiw	r24, 0x01	; 1
     680:	0e 94 58 09 	call	0x12b0	; 0x12b0 <TWI_Write>
     684:	88 32       	cpi	r24, 0x28	; 40
     686:	31 f4       	brne	.+12     	; 0x694 <BMP280_StartMeasurment+0xc2>
     688:	0e 94 17 09 	call	0x122e	; 0x122e <TWI_Stop>
		data[1] = BMP280_COMMAND_PRESSURE0;
		delay = 9;
		break;
	}
	result = BMP280_WriteBytes(&data[0], 2);
	if (result) // good write?
     68c:	88 23       	and	r24, r24
     68e:	21 f0       	breq	.+8      	; 0x698 <BMP280_StartMeasurment+0xc6>
	return(delay); // return the delay in ms (rounded up) to wait before retrieving data
     690:	81 2f       	mov	r24, r17
     692:	03 c0       	rjmp	.+6      	; 0x69a <BMP280_StartMeasurment+0xc8>
	else
	return(-1); // or return -1 if there was a problem communicating with the BMP
     694:	8f ef       	ldi	r24, 0xFF	; 255
     696:	01 c0       	rjmp	.+2      	; 0x69a <BMP280_StartMeasurment+0xc8>
     698:	8f ef       	ldi	r24, 0xFF	; 255
}
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	1f 91       	pop	r17
     6a4:	08 95       	ret

000006a6 <BMP280_GetUnPT>:
  @brief Gets the uncalibrated temperature and pressure data
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetUnPT(double *uP, double *uT){
     6a6:	8f 92       	push	r8
     6a8:	9f 92       	push	r9
     6aa:	af 92       	push	r10
     6ac:	bf 92       	push	r11
     6ae:	cf 92       	push	r12
     6b0:	df 92       	push	r13
     6b2:	ef 92       	push	r14
     6b4:	ff 92       	push	r15
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	00 d0       	rcall	.+0      	; 0x6be <BMP280_GetUnPT+0x18>
     6be:	00 d0       	rcall	.+0      	; 0x6c0 <BMP280_GetUnPT+0x1a>
     6c0:	00 d0       	rcall	.+0      	; 0x6c2 <BMP280_GetUnPT+0x1c>
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
     6c6:	6c 01       	movw	r12, r24
     6c8:	7b 01       	movw	r14, r22
	unsigned char data[6];
	char result;
	
	data[0] = BMP280_REG_RESULT_PRESSURE; //0xF7
     6ca:	87 ef       	ldi	r24, 0xF7	; 247
     6cc:	89 83       	std	Y+1, r24	; 0x01

	result = BMP280_ReadBytes(&data[0], 6); // 0xF7; xF8, 0xF9, 0xFA, 0xFB, 0xFC
     6ce:	66 e0       	ldi	r22, 0x06	; 6
     6d0:	ce 01       	movw	r24, r28
     6d2:	01 96       	adiw	r24, 0x01	; 1
     6d4:	0e 94 b4 01 	call	0x368	; 0x368 <BMP280_ReadBytes>
     6d8:	18 2f       	mov	r17, r24
	if (result){ // good read
     6da:	88 23       	and	r24, r24
     6dc:	09 f4       	brne	.+2      	; 0x6e0 <BMP280_GetUnPT+0x3a>
     6de:	76 c0       	rjmp	.+236    	; 0x7cc <BMP280_GetUnPT+0x126>
		double factor = pow(2, 4);
		*uP = (( (data[0] *256.0) + data[1] + (data[2]/256.0))) * factor ;	//20bit UP
     6e0:	69 81       	ldd	r22, Y+1	; 0x01
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__floatsisf>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	40 e8       	ldi	r20, 0x80	; 128
     6f2:	53 e4       	ldi	r21, 0x43	; 67
     6f4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     6f8:	4b 01       	movw	r8, r22
     6fa:	5c 01       	movw	r10, r24
     6fc:	8a 81       	ldd	r24, Y+2	; 0x02
     6fe:	68 2f       	mov	r22, r24
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	80 e0       	ldi	r24, 0x00	; 0
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__floatsisf>
     70a:	9b 01       	movw	r18, r22
     70c:	ac 01       	movw	r20, r24
     70e:	c5 01       	movw	r24, r10
     710:	b4 01       	movw	r22, r8
     712:	0e 94 15 14 	call	0x282a	; 0x282a <__addsf3>
     716:	4b 01       	movw	r8, r22
     718:	5c 01       	movw	r10, r24
     71a:	4b 81       	ldd	r20, Y+3	; 0x03
     71c:	64 2f       	mov	r22, r20
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	80 e0       	ldi	r24, 0x00	; 0
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__floatsisf>
     728:	20 e0       	ldi	r18, 0x00	; 0
     72a:	30 e0       	ldi	r19, 0x00	; 0
     72c:	40 e8       	ldi	r20, 0x80	; 128
     72e:	5b e3       	ldi	r21, 0x3B	; 59
     730:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     734:	9b 01       	movw	r18, r22
     736:	ac 01       	movw	r20, r24
     738:	c5 01       	movw	r24, r10
     73a:	b4 01       	movw	r22, r8
     73c:	0e 94 15 14 	call	0x282a	; 0x282a <__addsf3>
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	40 e8       	ldi	r20, 0x80	; 128
     746:	51 e4       	ldi	r21, 0x41	; 65
     748:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     74c:	f6 01       	movw	r30, r12
     74e:	60 83       	st	Z, r22
     750:	71 83       	std	Z+1, r23	; 0x01
     752:	82 83       	std	Z+2, r24	; 0x02
     754:	93 83       	std	Z+3, r25	; 0x03
		*uT = (( (data[3] *256.0) + data[4] + (data[5]/256.0))) * factor ;	//20bit UT
     756:	6c 81       	ldd	r22, Y+4	; 0x04
     758:	70 e0       	ldi	r23, 0x00	; 0
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	90 e0       	ldi	r25, 0x00	; 0
     75e:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__floatsisf>
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	40 e8       	ldi	r20, 0x80	; 128
     768:	53 e4       	ldi	r21, 0x43	; 67
     76a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     76e:	4b 01       	movw	r8, r22
     770:	5c 01       	movw	r10, r24
     772:	8d 81       	ldd	r24, Y+5	; 0x05
     774:	68 2f       	mov	r22, r24
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	80 e0       	ldi	r24, 0x00	; 0
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__floatsisf>
     780:	9b 01       	movw	r18, r22
     782:	ac 01       	movw	r20, r24
     784:	c5 01       	movw	r24, r10
     786:	b4 01       	movw	r22, r8
     788:	0e 94 15 14 	call	0x282a	; 0x282a <__addsf3>
     78c:	4b 01       	movw	r8, r22
     78e:	5c 01       	movw	r10, r24
     790:	8e 81       	ldd	r24, Y+6	; 0x06
     792:	68 2f       	mov	r22, r24
     794:	70 e0       	ldi	r23, 0x00	; 0
     796:	80 e0       	ldi	r24, 0x00	; 0
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__floatsisf>
     79e:	20 e0       	ldi	r18, 0x00	; 0
     7a0:	30 e0       	ldi	r19, 0x00	; 0
     7a2:	40 e8       	ldi	r20, 0x80	; 128
     7a4:	5b e3       	ldi	r21, 0x3B	; 59
     7a6:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     7aa:	9b 01       	movw	r18, r22
     7ac:	ac 01       	movw	r20, r24
     7ae:	c5 01       	movw	r24, r10
     7b0:	b4 01       	movw	r22, r8
     7b2:	0e 94 15 14 	call	0x282a	; 0x282a <__addsf3>
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	30 e0       	ldi	r19, 0x00	; 0
     7ba:	40 e8       	ldi	r20, 0x80	; 128
     7bc:	51 e4       	ldi	r21, 0x41	; 65
     7be:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     7c2:	f7 01       	movw	r30, r14
     7c4:	60 83       	st	Z, r22
     7c6:	71 83       	std	Z+1, r23	; 0x01
     7c8:	82 83       	std	Z+2, r24	; 0x02
     7ca:	93 83       	std	Z+3, r25	; 0x03
		
	}
	return(result);
}
     7cc:	81 2f       	mov	r24, r17
     7ce:	26 96       	adiw	r28, 0x06	; 6
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	f8 94       	cli
     7d4:	de bf       	out	0x3e, r29	; 62
     7d6:	0f be       	out	0x3f, r0	; 63
     7d8:	cd bf       	out	0x3d, r28	; 61
     7da:	df 91       	pop	r29
     7dc:	cf 91       	pop	r28
     7de:	1f 91       	pop	r17
     7e0:	ff 90       	pop	r15
     7e2:	ef 90       	pop	r14
     7e4:	df 90       	pop	r13
     7e6:	cf 90       	pop	r12
     7e8:	bf 90       	pop	r11
     7ea:	af 90       	pop	r10
     7ec:	9f 90       	pop	r9
     7ee:	8f 90       	pop	r8
     7f0:	08 95       	ret

000007f2 <BMP280_CalcTemperature>:
  @brief Calculates temperature
  @param[out] pointer to a place to store the temperature data
  @param[in] pointer to the uncalibrated temperature data
  @return status
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
     7f2:	4f 92       	push	r4
     7f4:	5f 92       	push	r5
     7f6:	6f 92       	push	r6
     7f8:	7f 92       	push	r7
     7fa:	8f 92       	push	r8
     7fc:	9f 92       	push	r9
     7fe:	af 92       	push	r10
     800:	bf 92       	push	r11
     802:	cf 92       	push	r12
     804:	df 92       	push	r13
     806:	ef 92       	push	r14
     808:	ff 92       	push	r15
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
     80e:	ec 01       	movw	r28, r24
	double adc_T = *uT ;
     810:	fb 01       	movw	r30, r22
     812:	c0 80       	ld	r12, Z
     814:	d1 80       	ldd	r13, Z+1	; 0x01
     816:	e2 80       	ldd	r14, Z+2	; 0x02
     818:	f3 80       	ldd	r15, Z+3	; 0x03
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
     81a:	80 91 ae 05 	lds	r24, 0x05AE
     81e:	90 91 af 05 	lds	r25, 0x05AF
     822:	bc 01       	movw	r22, r24
     824:	80 e0       	ldi	r24, 0x00	; 0
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <__floatunsisf>
     82c:	2b 01       	movw	r4, r22
     82e:	3c 01       	movw	r6, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
     830:	20 e0       	ldi	r18, 0x00	; 0
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	57 e3       	ldi	r21, 0x37	; 55
     838:	c7 01       	movw	r24, r14
     83a:	b6 01       	movw	r22, r12
     83c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     840:	4b 01       	movw	r8, r22
     842:	5c 01       	movw	r10, r24
     844:	20 e0       	ldi	r18, 0x00	; 0
     846:	30 e0       	ldi	r19, 0x00	; 0
     848:	40 e0       	ldi	r20, 0x00	; 0
     84a:	59 e3       	ldi	r21, 0x39	; 57
     84c:	c3 01       	movw	r24, r6
     84e:	b2 01       	movw	r22, r4
     850:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     854:	9b 01       	movw	r18, r22
     856:	ac 01       	movw	r20, r24
     858:	c5 01       	movw	r24, r10
     85a:	b4 01       	movw	r22, r8
     85c:	0e 94 14 14 	call	0x2828	; 0x2828 <__subsf3>
     860:	4b 01       	movw	r8, r22
     862:	5c 01       	movw	r10, r24
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
	double adc_T = *uT ;
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
     864:	20 e0       	ldi	r18, 0x00	; 0
     866:	30 e0       	ldi	r19, 0x00	; 0
     868:	40 e8       	ldi	r20, 0x80	; 128
     86a:	58 e3       	ldi	r21, 0x38	; 56
     86c:	c7 01       	movw	r24, r14
     86e:	b6 01       	movw	r22, r12
     870:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     874:	6b 01       	movw	r12, r22
     876:	7c 01       	movw	r14, r24
     878:	20 e0       	ldi	r18, 0x00	; 0
     87a:	30 e0       	ldi	r19, 0x00	; 0
     87c:	40 e8       	ldi	r20, 0x80	; 128
     87e:	5a e3       	ldi	r21, 0x3A	; 58
     880:	c3 01       	movw	r24, r6
     882:	b2 01       	movw	r22, r4
     884:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     888:	9b 01       	movw	r18, r22
     88a:	ac 01       	movw	r20, r24
     88c:	c7 01       	movw	r24, r14
     88e:	b6 01       	movw	r22, r12
     890:	0e 94 14 14 	call	0x2828	; 0x2828 <__subsf3>
     894:	6b 01       	movw	r12, r22
     896:	7c 01       	movw	r14, r24
     898:	80 91 c4 05 	lds	r24, 0x05C4
     89c:	90 91 c5 05 	lds	r25, 0x05C5
     8a0:	bc 01       	movw	r22, r24
     8a2:	99 0f       	add	r25, r25
     8a4:	88 0b       	sbc	r24, r24
     8a6:	99 0b       	sbc	r25, r25
     8a8:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__floatsisf>
     8ac:	9b 01       	movw	r18, r22
     8ae:	ac 01       	movw	r20, r24
     8b0:	c7 01       	movw	r24, r14
     8b2:	b6 01       	movw	r22, r12
     8b4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     8b8:	6b 01       	movw	r12, r22
     8ba:	7c 01       	movw	r14, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
     8bc:	a5 01       	movw	r20, r10
     8be:	94 01       	movw	r18, r8
     8c0:	c5 01       	movw	r24, r10
     8c2:	b4 01       	movw	r22, r8
     8c4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     8c8:	4b 01       	movw	r8, r22
     8ca:	5c 01       	movw	r10, r24
     8cc:	40 91 c2 05 	lds	r20, 0x05C2
     8d0:	50 91 c3 05 	lds	r21, 0x05C3
     8d4:	ba 01       	movw	r22, r20
     8d6:	55 0f       	add	r21, r21
     8d8:	88 0b       	sbc	r24, r24
     8da:	99 0b       	sbc	r25, r25
     8dc:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__floatsisf>
     8e0:	9b 01       	movw	r18, r22
     8e2:	ac 01       	movw	r20, r24
     8e4:	c5 01       	movw	r24, r10
     8e6:	b4 01       	movw	r22, r8
     8e8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     8ec:	9b 01       	movw	r18, r22
     8ee:	ac 01       	movw	r20, r24
	t_fine = (long signed int)(var1+var2);
     8f0:	c7 01       	movw	r24, r14
     8f2:	b6 01       	movw	r22, r12
     8f4:	0e 94 15 14 	call	0x282a	; 0x282a <__addsf3>
     8f8:	6b 01       	movw	r12, r22
     8fa:	7c 01       	movw	r14, r24
     8fc:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__fixsfsi>
     900:	60 93 a6 05 	sts	0x05A6, r22
     904:	70 93 a7 05 	sts	0x05A7, r23
     908:	80 93 a8 05 	sts	0x05A8, r24
     90c:	90 93 a9 05 	sts	0x05A9, r25
	
	*T = (var1+var2)/5120.0;
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	40 ea       	ldi	r20, 0xA0	; 160
     916:	55 e4       	ldi	r21, 0x45	; 69
     918:	c7 01       	movw	r24, r14
     91a:	b6 01       	movw	r22, r12
     91c:	0e 94 86 14 	call	0x290c	; 0x290c <__divsf3>
     920:	6b 01       	movw	r12, r22
     922:	7c 01       	movw	r14, r24
     924:	68 83       	st	Y, r22
     926:	79 83       	std	Y+1, r23	; 0x01
     928:	8a 83       	std	Y+2, r24	; 0x02
     92a:	9b 83       	std	Y+3, r25	; 0x03
	
	if(*T>100.0 || *T <(-100.0))return 0;
     92c:	20 e0       	ldi	r18, 0x00	; 0
     92e:	30 e0       	ldi	r19, 0x00	; 0
     930:	48 ec       	ldi	r20, 0xC8	; 200
     932:	52 e4       	ldi	r21, 0x42	; 66
     934:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <__gesf2>
     938:	18 16       	cp	r1, r24
     93a:	74 f0       	brlt	.+28     	; 0x958 <BMP280_CalcTemperature+0x166>
     93c:	20 e0       	ldi	r18, 0x00	; 0
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	48 ec       	ldi	r20, 0xC8	; 200
     942:	52 ec       	ldi	r21, 0xC2	; 194
     944:	c7 01       	movw	r24, r14
     946:	b6 01       	movw	r22, r12
     948:	0e 94 81 14 	call	0x2902	; 0x2902 <__cmpsf2>
     94c:	88 1f       	adc	r24, r24
     94e:	88 27       	eor	r24, r24
     950:	88 1f       	adc	r24, r24
     952:	91 e0       	ldi	r25, 0x01	; 1
     954:	89 27       	eor	r24, r25
     956:	01 c0       	rjmp	.+2      	; 0x95a <BMP280_CalcTemperature+0x168>
     958:	80 e0       	ldi	r24, 0x00	; 0
	
	return (1);
}
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	ff 90       	pop	r15
     960:	ef 90       	pop	r14
     962:	df 90       	pop	r13
     964:	cf 90       	pop	r12
     966:	bf 90       	pop	r11
     968:	af 90       	pop	r10
     96a:	9f 90       	pop	r9
     96c:	8f 90       	pop	r8
     96e:	7f 90       	pop	r7
     970:	6f 90       	pop	r6
     972:	5f 90       	pop	r5
     974:	4f 90       	pop	r4
     976:	08 95       	ret

00000978 <BMP280_CalcPressure>:
  @brief Calculates pressure
  @param[out] pointer to a place to store the pressure data
  @param[in] pointer to the uncalibrated pressure data
  @return status
*****************************************************************************/
char BMP280_CalcPressure(double *P,double *uP){
     978:	4f 92       	push	r4
     97a:	5f 92       	push	r5
     97c:	6f 92       	push	r6
     97e:	7f 92       	push	r7
     980:	8f 92       	push	r8
     982:	9f 92       	push	r9
     984:	af 92       	push	r10
     986:	bf 92       	push	r11
     988:	cf 92       	push	r12
     98a:	df 92       	push	r13
     98c:	ef 92       	push	r14
     98e:	ff 92       	push	r15
     990:	0f 93       	push	r16
     992:	1f 93       	push	r17
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	8c 01       	movw	r16, r24
     99a:	eb 01       	movw	r28, r22
	//char result;
	double var1 , var2 ;
	
	var1 = ((double)t_fine/2.0) - 64000.0;
     99c:	60 91 a6 05 	lds	r22, 0x05A6
     9a0:	70 91 a7 05 	lds	r23, 0x05A7
     9a4:	80 91 a8 05 	lds	r24, 0x05A8
     9a8:	90 91 a9 05 	lds	r25, 0x05A9
     9ac:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__floatsisf>
     9b0:	20 e0       	ldi	r18, 0x00	; 0
     9b2:	30 e0       	ldi	r19, 0x00	; 0
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	5f e3       	ldi	r21, 0x3F	; 63
     9b8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     9bc:	20 e0       	ldi	r18, 0x00	; 0
     9be:	30 e0       	ldi	r19, 0x00	; 0
     9c0:	4a e7       	ldi	r20, 0x7A	; 122
     9c2:	57 e4       	ldi	r21, 0x47	; 71
     9c4:	0e 94 14 14 	call	0x2828	; 0x2828 <__subsf3>
     9c8:	6b 01       	movw	r12, r22
     9ca:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
     9cc:	60 91 b8 05 	lds	r22, 0x05B8
     9d0:	70 91 b9 05 	lds	r23, 0x05B9
     9d4:	07 2e       	mov	r0, r23
     9d6:	00 0c       	add	r0, r0
     9d8:	88 0b       	sbc	r24, r24
     9da:	99 0b       	sbc	r25, r25
     9dc:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__floatsisf>
     9e0:	a7 01       	movw	r20, r14
     9e2:	96 01       	movw	r18, r12
     9e4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     9e8:	20 e0       	ldi	r18, 0x00	; 0
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	40 e0       	ldi	r20, 0x00	; 0
     9ee:	58 e3       	ldi	r21, 0x38	; 56
     9f0:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     9f4:	a7 01       	movw	r20, r14
     9f6:	96 01       	movw	r18, r12
     9f8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     9fc:	4b 01       	movw	r8, r22
     9fe:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
     a00:	60 91 ba 05 	lds	r22, 0x05BA
     a04:	70 91 bb 05 	lds	r23, 0x05BB
     a08:	07 2e       	mov	r0, r23
     a0a:	00 0c       	add	r0, r0
     a0c:	88 0b       	sbc	r24, r24
     a0e:	99 0b       	sbc	r25, r25
     a10:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__floatsisf>
     a14:	a7 01       	movw	r20, r14
     a16:	96 01       	movw	r18, r12
     a18:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     a1c:	9b 01       	movw	r18, r22
     a1e:	ac 01       	movw	r20, r24
     a20:	0e 94 15 14 	call	0x282a	; 0x282a <__addsf3>
     a24:	a5 01       	movw	r20, r10
     a26:	94 01       	movw	r18, r8
     a28:	0e 94 15 14 	call	0x282a	; 0x282a <__addsf3>
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	40 e8       	ldi	r20, 0x80	; 128
     a32:	5e e3       	ldi	r21, 0x3E	; 62
     a34:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     a38:	4b 01       	movw	r8, r22
     a3a:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var1 = (((double)dig_P3) * var1 * var1/524288.0 + ((double)dig_P2) * var1) / 524288.0;
     a3c:	60 91 be 05 	lds	r22, 0x05BE
     a40:	70 91 bf 05 	lds	r23, 0x05BF
     a44:	07 2e       	mov	r0, r23
     a46:	00 0c       	add	r0, r0
     a48:	88 0b       	sbc	r24, r24
     a4a:	99 0b       	sbc	r25, r25
     a4c:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__floatsisf>
     a50:	a7 01       	movw	r20, r14
     a52:	96 01       	movw	r18, r12
     a54:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     a58:	a7 01       	movw	r20, r14
     a5a:	96 01       	movw	r18, r12
     a5c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     a60:	20 e0       	ldi	r18, 0x00	; 0
     a62:	30 e0       	ldi	r19, 0x00	; 0
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	56 e3       	ldi	r21, 0x36	; 54
     a68:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     a6c:	2b 01       	movw	r4, r22
     a6e:	3c 01       	movw	r6, r24
     a70:	60 91 c0 05 	lds	r22, 0x05C0
     a74:	70 91 c1 05 	lds	r23, 0x05C1
     a78:	07 2e       	mov	r0, r23
     a7a:	00 0c       	add	r0, r0
     a7c:	88 0b       	sbc	r24, r24
     a7e:	99 0b       	sbc	r25, r25
     a80:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__floatsisf>
     a84:	a7 01       	movw	r20, r14
     a86:	96 01       	movw	r18, r12
     a88:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     a8c:	9b 01       	movw	r18, r22
     a8e:	ac 01       	movw	r20, r24
     a90:	c3 01       	movw	r24, r6
     a92:	b2 01       	movw	r22, r4
     a94:	0e 94 15 14 	call	0x282a	; 0x282a <__addsf3>
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	56 e3       	ldi	r21, 0x36	; 54
     aa0:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	57 e4       	ldi	r21, 0x47	; 71
     aac:	0e 94 15 14 	call	0x282a	; 0x282a <__addsf3>
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	40 e0       	ldi	r20, 0x00	; 0
     ab6:	58 e3       	ldi	r21, 0x38	; 56
     ab8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     abc:	6b 01       	movw	r12, r22
     abe:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
     ac0:	28 81       	ld	r18, Y
     ac2:	39 81       	ldd	r19, Y+1	; 0x01
     ac4:	4a 81       	ldd	r20, Y+2	; 0x02
     ac6:	5b 81       	ldd	r21, Y+3	; 0x03
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	80 e8       	ldi	r24, 0x80	; 128
     ace:	99 e4       	ldi	r25, 0x49	; 73
     ad0:	0e 94 14 14 	call	0x2828	; 0x2828 <__subsf3>
     ad4:	2b 01       	movw	r4, r22
     ad6:	3c 01       	movw	r6, r24
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
     ad8:	60 91 bc 05 	lds	r22, 0x05BC
     adc:	70 91 bd 05 	lds	r23, 0x05BD
     ae0:	07 2e       	mov	r0, r23
     ae2:	00 0c       	add	r0, r0
     ae4:	88 0b       	sbc	r24, r24
     ae6:	99 0b       	sbc	r25, r25
     ae8:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__floatsisf>
     aec:	20 e0       	ldi	r18, 0x00	; 0
     aee:	30 e0       	ldi	r19, 0x00	; 0
     af0:	40 e8       	ldi	r20, 0x80	; 128
     af2:	57 e4       	ldi	r21, 0x47	; 71
     af4:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     af8:	9b 01       	movw	r18, r22
     afa:	ac 01       	movw	r20, r24
     afc:	c5 01       	movw	r24, r10
     afe:	b4 01       	movw	r22, r8
     b00:	0e 94 15 14 	call	0x282a	; 0x282a <__addsf3>
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
     b04:	20 e0       	ldi	r18, 0x00	; 0
     b06:	30 e0       	ldi	r19, 0x00	; 0
     b08:	40 e8       	ldi	r20, 0x80	; 128
     b0a:	59 e3       	ldi	r21, 0x39	; 57
     b0c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     b10:	9b 01       	movw	r18, r22
     b12:	ac 01       	movw	r20, r24
     b14:	c3 01       	movw	r24, r6
     b16:	b2 01       	movw	r22, r4
     b18:	0e 94 14 14 	call	0x2828	; 0x2828 <__subsf3>
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e5       	ldi	r19, 0x50	; 80
     b20:	43 ec       	ldi	r20, 0xC3	; 195
     b22:	55 e4       	ldi	r21, 0x45	; 69
     b24:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     b28:	4b 01       	movw	r8, r22
     b2a:	5c 01       	movw	r10, r24
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
     b2c:	80 91 b0 05 	lds	r24, 0x05B0
     b30:	90 91 b1 05 	lds	r25, 0x05B1
     b34:	bc 01       	movw	r22, r24
     b36:	80 e0       	ldi	r24, 0x00	; 0
     b38:	90 e0       	ldi	r25, 0x00	; 0
     b3a:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <__floatunsisf>
     b3e:	9b 01       	movw	r18, r22
     b40:	ac 01       	movw	r20, r24
     b42:	c7 01       	movw	r24, r14
     b44:	b6 01       	movw	r22, r12
     b46:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     b4a:	9b 01       	movw	r18, r22
     b4c:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
     b4e:	c5 01       	movw	r24, r10
     b50:	b4 01       	movw	r22, r8
     b52:	0e 94 86 14 	call	0x290c	; 0x290c <__divsf3>
     b56:	6b 01       	movw	r12, r22
     b58:	7c 01       	movw	r14, r24
	//Serial.print("p = ");Serial.println(p,2);
	
	var1 = ((double)dig_P9)*p*p/2147483648.0;	//overflow
     b5a:	60 91 b2 05 	lds	r22, 0x05B2
     b5e:	70 91 b3 05 	lds	r23, 0x05B3
     b62:	07 2e       	mov	r0, r23
     b64:	00 0c       	add	r0, r0
     b66:	88 0b       	sbc	r24, r24
     b68:	99 0b       	sbc	r25, r25
     b6a:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__floatsisf>
     b6e:	a7 01       	movw	r20, r14
     b70:	96 01       	movw	r18, r12
     b72:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     b76:	a7 01       	movw	r20, r14
     b78:	96 01       	movw	r18, r12
     b7a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     b7e:	20 e0       	ldi	r18, 0x00	; 0
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	50 e3       	ldi	r21, 0x30	; 48
     b86:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     b8a:	4b 01       	movw	r8, r22
     b8c:	5c 01       	movw	r10, r24
	
	var2 = p*((double)dig_P8)/32768.0;
     b8e:	80 91 b4 05 	lds	r24, 0x05B4
     b92:	90 91 b5 05 	lds	r25, 0x05B5
     b96:	bc 01       	movw	r22, r24
     b98:	99 0f       	add	r25, r25
     b9a:	88 0b       	sbc	r24, r24
     b9c:	99 0b       	sbc	r25, r25
     b9e:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__floatsisf>
     ba2:	a7 01       	movw	r20, r14
     ba4:	96 01       	movw	r18, r12
     ba6:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	40 e0       	ldi	r20, 0x00	; 0
     bb0:	58 e3       	ldi	r21, 0x38	; 56
     bb2:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     bb6:	9b 01       	movw	r18, r22
     bb8:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	p = p + (var1+var2+((double)dig_P7))/16.0;
     bba:	c5 01       	movw	r24, r10
     bbc:	b4 01       	movw	r22, r8
     bbe:	0e 94 15 14 	call	0x282a	; 0x282a <__addsf3>
     bc2:	4b 01       	movw	r8, r22
     bc4:	5c 01       	movw	r10, r24
     bc6:	80 91 b6 05 	lds	r24, 0x05B6
     bca:	90 91 b7 05 	lds	r25, 0x05B7
     bce:	bc 01       	movw	r22, r24
     bd0:	99 0f       	add	r25, r25
     bd2:	88 0b       	sbc	r24, r24
     bd4:	99 0b       	sbc	r25, r25
     bd6:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__floatsisf>
     bda:	9b 01       	movw	r18, r22
     bdc:	ac 01       	movw	r20, r24
     bde:	c5 01       	movw	r24, r10
     be0:	b4 01       	movw	r22, r8
     be2:	0e 94 15 14 	call	0x282a	; 0x282a <__addsf3>
     be6:	20 e0       	ldi	r18, 0x00	; 0
     be8:	30 e0       	ldi	r19, 0x00	; 0
     bea:	40 e8       	ldi	r20, 0x80	; 128
     bec:	5d e3       	ldi	r21, 0x3D	; 61
     bee:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     bf2:	a7 01       	movw	r20, r14
     bf4:	96 01       	movw	r18, r12
     bf6:	0e 94 15 14 	call	0x282a	; 0x282a <__addsf3>
	//Serial.print("p = ");Serial.println(p,2);
	
	*P = p/100.0 ;
     bfa:	20 e0       	ldi	r18, 0x00	; 0
     bfc:	30 e0       	ldi	r19, 0x00	; 0
     bfe:	48 ec       	ldi	r20, 0xC8	; 200
     c00:	52 e4       	ldi	r21, 0x42	; 66
     c02:	0e 94 86 14 	call	0x290c	; 0x290c <__divsf3>
     c06:	6b 01       	movw	r12, r22
     c08:	7c 01       	movw	r14, r24
     c0a:	f8 01       	movw	r30, r16
     c0c:	60 83       	st	Z, r22
     c0e:	71 83       	std	Z+1, r23	; 0x01
     c10:	82 83       	std	Z+2, r24	; 0x02
     c12:	93 83       	std	Z+3, r25	; 0x03
	
	if((*P>1200.0) || (*P < 800.0))return (0);
     c14:	20 e0       	ldi	r18, 0x00	; 0
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	46 e9       	ldi	r20, 0x96	; 150
     c1a:	54 e4       	ldi	r21, 0x44	; 68
     c1c:	0e 94 e0 15 	call	0x2bc0	; 0x2bc0 <__gesf2>
     c20:	18 16       	cp	r1, r24
     c22:	74 f0       	brlt	.+28     	; 0xc40 <BMP280_CalcPressure+0x2c8>
     c24:	20 e0       	ldi	r18, 0x00	; 0
     c26:	30 e0       	ldi	r19, 0x00	; 0
     c28:	48 e4       	ldi	r20, 0x48	; 72
     c2a:	54 e4       	ldi	r21, 0x44	; 68
     c2c:	c7 01       	movw	r24, r14
     c2e:	b6 01       	movw	r22, r12
     c30:	0e 94 81 14 	call	0x2902	; 0x2902 <__cmpsf2>
     c34:	88 1f       	adc	r24, r24
     c36:	88 27       	eor	r24, r24
     c38:	88 1f       	adc	r24, r24
     c3a:	91 e0       	ldi	r25, 0x01	; 1
     c3c:	89 27       	eor	r24, r25
     c3e:	01 c0       	rjmp	.+2      	; 0xc42 <BMP280_CalcPressure+0x2ca>
     c40:	80 e0       	ldi	r24, 0x00	; 0
	return (1);
}
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	1f 91       	pop	r17
     c48:	0f 91       	pop	r16
     c4a:	ff 90       	pop	r15
     c4c:	ef 90       	pop	r14
     c4e:	df 90       	pop	r13
     c50:	cf 90       	pop	r12
     c52:	bf 90       	pop	r11
     c54:	af 90       	pop	r10
     c56:	9f 90       	pop	r9
     c58:	8f 90       	pop	r8
     c5a:	7f 90       	pop	r7
     c5c:	6f 90       	pop	r6
     c5e:	5f 90       	pop	r5
     c60:	4f 90       	pop	r4
     c62:	08 95       	ret

00000c64 <BMP280_GetTemperatureAndPressure>:
  @brief Gets temperature and pressure
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetTemperatureAndPressure(double *T,double *P){
     c64:	ef 92       	push	r14
     c66:	ff 92       	push	r15
     c68:	0f 93       	push	r16
     c6a:	1f 93       	push	r17
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
     c74:	28 97       	sbiw	r28, 0x08	; 8
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	de bf       	out	0x3e, r29	; 62
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	cd bf       	out	0x3d, r28	; 61
     c80:	8c 01       	movw	r16, r24
     c82:	7b 01       	movw	r14, r22
	double uP,uT ;
	char result = BMP280_GetUnPT(&uP,&uT);
     c84:	be 01       	movw	r22, r28
     c86:	6b 5f       	subi	r22, 0xFB	; 251
     c88:	7f 4f       	sbci	r23, 0xFF	; 255
     c8a:	ce 01       	movw	r24, r28
     c8c:	01 96       	adiw	r24, 0x01	; 1
     c8e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <BMP280_GetUnPT>
	if(result!=0){
     c92:	88 23       	and	r24, r24
     c94:	d1 f0       	breq	.+52     	; 0xcca <BMP280_GetTemperatureAndPressure+0x66>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
     c96:	be 01       	movw	r22, r28
     c98:	6b 5f       	subi	r22, 0xFB	; 251
     c9a:	7f 4f       	sbci	r23, 0xFF	; 255
     c9c:	c8 01       	movw	r24, r16
     c9e:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <BMP280_CalcTemperature>
		if(result){
     ca2:	88 23       	and	r24, r24
     ca4:	69 f0       	breq	.+26     	; 0xcc0 <BMP280_GetTemperatureAndPressure+0x5c>
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
     ca6:	be 01       	movw	r22, r28
     ca8:	6f 5f       	subi	r22, 0xFF	; 255
     caa:	7f 4f       	sbci	r23, 0xFF	; 255
     cac:	c7 01       	movw	r24, r14
     cae:	0e 94 bc 04 	call	0x978	; 0x978 <BMP280_CalcPressure>
			if(result)return (1);
     cb2:	81 11       	cpse	r24, r1
     cb4:	0f c0       	rjmp	.+30     	; 0xcd4 <BMP280_GetTemperatureAndPressure+0x70>
			else error = 3 ;	// pressure error ;
     cb6:	83 e0       	ldi	r24, 0x03	; 3
     cb8:	80 93 a5 05 	sts	0x05A5, r24
			return (0);
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	0b c0       	rjmp	.+22     	; 0xcd6 <BMP280_GetTemperatureAndPressure+0x72>
		}else
		error = 2;	// temperature error ;
     cc0:	82 e0       	ldi	r24, 0x02	; 2
     cc2:	80 93 a5 05 	sts	0x05A5, r24
	}
	else
	error = 1;
	
	return (0);
     cc6:	80 e0       	ldi	r24, 0x00	; 0
     cc8:	06 c0       	rjmp	.+12     	; 0xcd6 <BMP280_GetTemperatureAndPressure+0x72>
			return (0);
		}else
		error = 2;	// temperature error ;
	}
	else
	error = 1;
     cca:	81 e0       	ldi	r24, 0x01	; 1
     ccc:	80 93 a5 05 	sts	0x05A5, r24
	
	return (0);
     cd0:	80 e0       	ldi	r24, 0x00	; 0
     cd2:	01 c0       	rjmp	.+2      	; 0xcd6 <BMP280_GetTemperatureAndPressure+0x72>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
		if(result){
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
			if(result)return (1);
     cd4:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	error = 1;
	
	return (0);
}
     cd6:	28 96       	adiw	r28, 0x08	; 8
     cd8:	0f b6       	in	r0, 0x3f	; 63
     cda:	f8 94       	cli
     cdc:	de bf       	out	0x3e, r29	; 62
     cde:	0f be       	out	0x3f, r0	; 63
     ce0:	cd bf       	out	0x3d, r28	; 61
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	0f 91       	pop	r16
     cea:	ff 90       	pop	r15
     cec:	ef 90       	pop	r14
     cee:	08 95       	ret

00000cf0 <Si7020_readHumidity>:

/*************************************************************************//**
  @brief Read humidity from Si7020
  @return status one if successfully read and crc check, otherwise return zero
*****************************************************************************/
char Si7020_readHumidity(unsigned char *data, char length){
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	ec 01       	movw	r28, r24
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
     cf6:	80 e4       	ldi	r24, 0x40	; 64
     cf8:	0e 94 c2 08 	call	0x1184	; 0x1184 <TWI_BeginWrite>
	status = TWI_WriteByte(SI7020_REL_HUMIDITY_HOLD);	
     cfc:	85 ee       	ldi	r24, 0xE5	; 229
     cfe:	0e 94 b4 08 	call	0x1168	; 0x1168 <TWI_WriteByte>
	if(status != TWI_SENT_ACK) return 0; //Error out
     d02:	88 32       	cpi	r24, 0x28	; 40
     d04:	e9 f4       	brne	.+58     	; 0xd40 <Si7020_readHumidity+0x50>
	
	status = TWI_BeginRead(SI7020_ADDR);
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	0e 94 df 08 	call	0x11be	; 0x11be <TWI_BeginRead>
	if(status != TWI_SLAR_ACK)	return 0;
     d0c:	80 34       	cpi	r24, 0x40	; 64
     d0e:	d1 f4       	brne	.+52     	; 0xd44 <Si7020_readHumidity+0x54>
	
	status = TWI_Read(data,3,false);
     d10:	40 e0       	ldi	r20, 0x00	; 0
     d12:	63 e0       	ldi	r22, 0x03	; 3
     d14:	70 e0       	ldi	r23, 0x00	; 0
     d16:	ce 01       	movw	r24, r28
     d18:	0e 94 1c 09 	call	0x1238	; 0x1238 <TWI_Read>
	if(status !=TWI_REC_ACK)	return 0;
     d1c:	80 35       	cpi	r24, 0x50	; 80
     d1e:	a1 f4       	brne	.+40     	; 0xd48 <Si7020_readHumidity+0x58>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawHumidity, checksum) != 0) return 0;
     d20:	6a 81       	ldd	r22, Y+2	; 0x02
     d22:	70 e0       	ldi	r23, 0x00	; 0
	if(status !=TWI_REC_ACK)	return 0;
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
     d24:	88 81       	ld	r24, Y
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	98 2f       	mov	r25, r24
     d2a:	88 27       	eor	r24, r24
     d2c:	29 81       	ldd	r18, Y+1	; 0x01
	if(check_crc(rawHumidity, checksum) != 0) return 0;
     d2e:	82 2b       	or	r24, r18
     d30:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <check_crc>
     d34:	89 2b       	or	r24, r25
     d36:	51 f4       	brne	.+20     	; 0xd4c <Si7020_readHumidity+0x5c>
	
	TWI_Stop();
     d38:	0e 94 17 09 	call	0x122e	; 0x122e <TWI_Stop>
	return 1;
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	07 c0       	rjmp	.+14     	; 0xd4e <Si7020_readHumidity+0x5e>
char Si7020_readHumidity(unsigned char *data, char length){
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
	status = TWI_WriteByte(SI7020_REL_HUMIDITY_HOLD);	
	if(status != TWI_SENT_ACK) return 0; //Error out
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	05 c0       	rjmp	.+10     	; 0xd4e <Si7020_readHumidity+0x5e>
	
	status = TWI_BeginRead(SI7020_ADDR);
	if(status != TWI_SLAR_ACK)	return 0;
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	03 c0       	rjmp	.+6      	; 0xd4e <Si7020_readHumidity+0x5e>
	
	status = TWI_Read(data,3,false);
	if(status !=TWI_REC_ACK)	return 0;
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	01 c0       	rjmp	.+2      	; 0xd4e <Si7020_readHumidity+0x5e>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawHumidity, checksum) != 0) return 0;
     d4c:	80 e0       	ldi	r24, 0x00	; 0
	
	TWI_Stop();
	return 1;
}
     d4e:	df 91       	pop	r29
     d50:	cf 91       	pop	r28
     d52:	08 95       	ret

00000d54 <Si7020_calHumidity>:
*****************************************************************************/
float Si7020_calHumidity(unsigned char *data) {
	unsigned char msb = data[0];
	unsigned char lsb = data[1];

	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
     d54:	fc 01       	movw	r30, r24
     d56:	60 81       	ld	r22, Z
     d58:	70 e0       	ldi	r23, 0x00	; 0
     d5a:	76 2f       	mov	r23, r22
     d5c:	66 27       	eor	r22, r22
     d5e:	81 81       	ldd	r24, Z+1	; 0x01
     d60:	68 2b       	or	r22, r24
	
	//Given the raw humidity data, calculate the actual relative humidity
	float tempRH = rawHumidity / (float)65536;
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <__floatunsisf>
     d6a:	20 e0       	ldi	r18, 0x00	; 0
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	40 e8       	ldi	r20, 0x80	; 128
     d70:	57 e3       	ldi	r21, 0x37	; 55
     d72:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
	float rh = 125 * tempRH -6;
     d76:	20 e0       	ldi	r18, 0x00	; 0
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	4a ef       	ldi	r20, 0xFA	; 250
     d7c:	52 e4       	ldi	r21, 0x42	; 66
     d7e:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     d82:	20 e0       	ldi	r18, 0x00	; 0
     d84:	30 e0       	ldi	r19, 0x00	; 0
     d86:	40 ec       	ldi	r20, 0xC0	; 192
     d88:	50 e4       	ldi	r21, 0x40	; 64
     d8a:	0e 94 14 14 	call	0x2828	; 0x2828 <__subsf3>
	
	return rh;
}
     d8e:	08 95       	ret

00000d90 <Si7020_readTemperature>:

/*************************************************************************//**
  @brief Read temperature from Si7020
  @return status one if successfully read and crc check, otherwise return zero
*****************************************************************************/
char Si7020_readTemperature(unsigned char *data, char length){
     d90:	cf 93       	push	r28
     d92:	df 93       	push	r29
     d94:	ec 01       	movw	r28, r24
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
     d96:	80 e4       	ldi	r24, 0x40	; 64
     d98:	0e 94 c2 08 	call	0x1184	; 0x1184 <TWI_BeginWrite>
	status = TWI_WriteByte(SI7020_TEMPERATURE_HOLD);	
     d9c:	83 ee       	ldi	r24, 0xE3	; 227
     d9e:	0e 94 b4 08 	call	0x1168	; 0x1168 <TWI_WriteByte>
	if(status != TWI_SENT_ACK) return 0; //Error out
     da2:	88 32       	cpi	r24, 0x28	; 40
     da4:	e9 f4       	brne	.+58     	; 0xde0 <Si7020_readTemperature+0x50>
	
	status = TWI_BeginRead(SI7020_ADDR);
     da6:	80 e4       	ldi	r24, 0x40	; 64
     da8:	0e 94 df 08 	call	0x11be	; 0x11be <TWI_BeginRead>
	if(status != TWI_SLAR_ACK)	return 0;
     dac:	80 34       	cpi	r24, 0x40	; 64
     dae:	d1 f4       	brne	.+52     	; 0xde4 <Si7020_readTemperature+0x54>
	
	status = TWI_Read(data,3,false);
     db0:	40 e0       	ldi	r20, 0x00	; 0
     db2:	63 e0       	ldi	r22, 0x03	; 3
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	ce 01       	movw	r24, r28
     db8:	0e 94 1c 09 	call	0x1238	; 0x1238 <TWI_Read>
	if(status !=TWI_REC_ACK)	return 0;
     dbc:	80 35       	cpi	r24, 0x50	; 80
     dbe:	a1 f4       	brne	.+40     	; 0xde8 <Si7020_readTemperature+0x58>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawTemperature, checksum) != 0) return 0;
     dc0:	6a 81       	ldd	r22, Y+2	; 0x02
     dc2:	70 e0       	ldi	r23, 0x00	; 0
	if(status !=TWI_REC_ACK)	return 0;
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
     dc4:	88 81       	ld	r24, Y
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	98 2f       	mov	r25, r24
     dca:	88 27       	eor	r24, r24
     dcc:	29 81       	ldd	r18, Y+1	; 0x01
	if(check_crc(rawTemperature, checksum) != 0) return 0;
     dce:	82 2b       	or	r24, r18
     dd0:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <check_crc>
     dd4:	89 2b       	or	r24, r25
     dd6:	51 f4       	brne	.+20     	; 0xdec <Si7020_readTemperature+0x5c>
	
	TWI_Stop();
     dd8:	0e 94 17 09 	call	0x122e	; 0x122e <TWI_Stop>
	return 1;
     ddc:	81 e0       	ldi	r24, 0x01	; 1
     dde:	07 c0       	rjmp	.+14     	; 0xdee <Si7020_readTemperature+0x5e>
char Si7020_readTemperature(unsigned char *data, char length){
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
	status = TWI_WriteByte(SI7020_TEMPERATURE_HOLD);	
	if(status != TWI_SENT_ACK) return 0; //Error out
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	05 c0       	rjmp	.+10     	; 0xdee <Si7020_readTemperature+0x5e>
	
	status = TWI_BeginRead(SI7020_ADDR);
	if(status != TWI_SLAR_ACK)	return 0;
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	03 c0       	rjmp	.+6      	; 0xdee <Si7020_readTemperature+0x5e>
	
	status = TWI_Read(data,3,false);
	if(status !=TWI_REC_ACK)	return 0;
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	01 c0       	rjmp	.+2      	; 0xdee <Si7020_readTemperature+0x5e>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawTemperature, checksum) != 0) return 0;
     dec:	80 e0       	ldi	r24, 0x00	; 0
	
	TWI_Stop();
	return 1;
}
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	08 95       	ret

00000df4 <Si7020_calTemperature>:
  @return temperature value
*****************************************************************************/
float Si7020_calTemperature(unsigned char *data) {
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
     df4:	fc 01       	movw	r30, r24
     df6:	60 81       	ld	r22, Z
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	76 2f       	mov	r23, r22
     dfc:	66 27       	eor	r22, r22
     dfe:	81 81       	ldd	r24, Z+1	; 0x01
     e00:	68 2b       	or	r22, r24
	
	//Given the raw temperature data, calculate the actual temperature
	float tempTemperature = rawTemperature / (float)65536; 
     e02:	80 e0       	ldi	r24, 0x00	; 0
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <__floatunsisf>
     e0a:	20 e0       	ldi	r18, 0x00	; 0
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	40 e8       	ldi	r20, 0x80	; 128
     e10:	57 e3       	ldi	r21, 0x37	; 55
     e12:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
	float realTemperature = 175.72 * tempTemperature - 46.85;
     e16:	22 e5       	ldi	r18, 0x52	; 82
     e18:	38 eb       	ldi	r19, 0xB8	; 184
     e1a:	4f e2       	ldi	r20, 0x2F	; 47
     e1c:	53 e4       	ldi	r21, 0x43	; 67
     e1e:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     e22:	26 e6       	ldi	r18, 0x66	; 102
     e24:	36 e6       	ldi	r19, 0x66	; 102
     e26:	4b e3       	ldi	r20, 0x3B	; 59
     e28:	52 e4       	ldi	r21, 0x42	; 66
     e2a:	0e 94 14 14 	call	0x2828	; 0x2828 <__subsf3>
	
	return realTemperature;
     e2e:	08 95       	ret

00000e30 <ADC_Init>:

/*************************************************************************//**
  @brief Initializes the ADC
*****************************************************************************/
void ADC_Init(void) {
	ADCSRA = (1<<ADEN)|(4<<ADPS0); //enables the ADC module, CPU clock prescale=16
     e30:	84 e8       	ldi	r24, 0x84	; 132
     e32:	80 93 7a 00 	sts	0x007A, r24
	
	ADCSRC = 0x05|(1<<ADTHT0)|(1<<ADTHT1); //ADSUT=5
     e36:	85 ec       	ldi	r24, 0xC5	; 197
     e38:	80 93 77 00 	sts	0x0077, r24
	while((ADCSRB&(1<<AVDDOK))==0);
     e3c:	eb e7       	ldi	r30, 0x7B	; 123
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	88 23       	and	r24, r24
     e44:	ec f7       	brge	.-6      	; 0xe40 <ADC_Init+0x10>
}
     e46:	08 95       	ret

00000e48 <__vector_15>:

/*************************************************************************//**
  @brief Timer Interrupt Service Routine
*****************************************************************************/
ISR(TIMER2_OVF_vect)
{
     e48:	1f 92       	push	r1
     e4a:	0f 92       	push	r0
     e4c:	0f b6       	in	r0, 0x3f	; 63
     e4e:	0f 92       	push	r0
     e50:	11 24       	eor	r1, r1
     e52:	2f 93       	push	r18
     e54:	3f 93       	push	r19
     e56:	4f 93       	push	r20
     e58:	5f 93       	push	r21
     e5a:	6f 93       	push	r22
     e5c:	7f 93       	push	r23
     e5e:	8f 93       	push	r24
     e60:	9f 93       	push	r25
     e62:	af 93       	push	r26
     e64:	bf 93       	push	r27
     e66:	ef 93       	push	r30
     e68:	ff 93       	push	r31
	timer_usage ++;
     e6a:	80 91 ca 05 	lds	r24, 0x05CA
     e6e:	90 91 cb 05 	lds	r25, 0x05CB
     e72:	01 96       	adiw	r24, 0x01	; 1
     e74:	90 93 cb 05 	sts	0x05CB, r25
     e78:	80 93 ca 05 	sts	0x05CA, r24
	// printf("count1 = %d\n",timer_usage);
	printf("Timestamp : %ld\n",(TimeStamp));
     e7c:	80 91 c9 05 	lds	r24, 0x05C9
     e80:	8f 93       	push	r24
     e82:	80 91 c8 05 	lds	r24, 0x05C8
     e86:	8f 93       	push	r24
     e88:	80 91 c7 05 	lds	r24, 0x05C7
     e8c:	8f 93       	push	r24
     e8e:	80 91 c6 05 	lds	r24, 0x05C6
     e92:	8f 93       	push	r24
     e94:	8a ea       	ldi	r24, 0xAA	; 170
     e96:	92 e0       	ldi	r25, 0x02	; 2
     e98:	9f 93       	push	r25
     e9a:	8f 93       	push	r24
     e9c:	0e 94 bb 1c 	call	0x3976	; 0x3976 <printf>
	handle_timeoutq_event();	
     ea0:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <handle_timeoutq_event>
     ea4:	0f 90       	pop	r0
     ea6:	0f 90       	pop	r0
     ea8:	0f 90       	pop	r0
     eaa:	0f 90       	pop	r0
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
}
     eb0:	ff 91       	pop	r31
     eb2:	ef 91       	pop	r30
     eb4:	bf 91       	pop	r27
     eb6:	af 91       	pop	r26
     eb8:	9f 91       	pop	r25
     eba:	8f 91       	pop	r24
     ebc:	7f 91       	pop	r23
     ebe:	6f 91       	pop	r22
     ec0:	5f 91       	pop	r21
     ec2:	4f 91       	pop	r20
     ec4:	3f 91       	pop	r19
     ec6:	2f 91       	pop	r18
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	0f 90       	pop	r0
     ece:	1f 90       	pop	r1
     ed0:	18 95       	reti

00000ed2 <init_Event_Timer>:

/* Initialization Routine Example 3 : Timer 2 Async operation */
/* Clock for Timer 2 is taken from crystal connected to TOSC pins */
void init_Event_Timer(void)
{
	TimeStamp = 0;
     ed2:	10 92 c6 05 	sts	0x05C6, r1
     ed6:	10 92 c7 05 	sts	0x05C7, r1
     eda:	10 92 c8 05 	sts	0x05C8, r1
     ede:	10 92 c9 05 	sts	0x05C9, r1
	timer_usage = 0;
     ee2:	10 92 cb 05 	sts	0x05CB, r1
     ee6:	10 92 ca 05 	sts	0x05CA, r1
	/* Select clock source as crystal on TOSCn pins */
	ASSR |= 1 << AS2;
     eea:	e6 eb       	ldi	r30, 0xB6	; 182
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	80 62       	ori	r24, 0x20	; 32
     ef2:	80 83       	st	Z, r24
	
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
     ef4:	80 81       	ld	r24, Z
     ef6:	8f 71       	andi	r24, 0x1F	; 31
     ef8:	e9 f7       	brne	.-6      	; 0xef4 <init_Event_Timer+0x22>
	
	/* Stop timer 2 */
	TCCR2B = 0x00;
     efa:	10 92 b1 00 	sts	0x00B1, r1
     efe:	08 95       	ret

00000f00 <general_set_timer>:
	// TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
}


void general_set_timer( int period_number )
{
     f00:	cf 93       	push	r28
     f02:	df 93       	push	r29
     f04:	ec 01       	movw	r28, r24
	// printf("debug %d\n",period_number);
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
     f06:	e6 eb       	ldi	r30, 0xB6	; 182
     f08:	f0 e0       	ldi	r31, 0x00	; 0
     f0a:	90 81       	ld	r25, Z
     f0c:	9f 71       	andi	r25, 0x1F	; 31
     f0e:	e9 f7       	brne	.-6      	; 0xf0a <general_set_timer+0xa>
	/* Stop timer 2 */
	TCCR2B = 0x00;
     f10:	10 92 b1 00 	sts	0x00B1, r1
	
	
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
     f14:	e6 eb       	ldi	r30, 0xB6	; 182
     f16:	f0 e0       	ldi	r31, 0x00	; 0
     f18:	90 81       	ld	r25, Z
     f1a:	9f 71       	andi	r25, 0x1F	; 31
     f1c:	e9 f7       	brne	.-6      	; 0xf18 <general_set_timer+0x18>
	 *  1    1    0     256		2s/256
	 *  1    1    1    1024		8s/256
	 */
	// Resolution
	// 0.25s/256
	if( period_number <= 250 )
     f1e:	cb 3f       	cpi	r28, 0xFB	; 251
     f20:	d1 05       	cpc	r29, r1
     f22:	04 f5       	brge	.+64     	; 0xf64 <general_set_timer+0x64>
	{
		temp = 256 - (int) ( 256.0/250.0 * period_number);
     f24:	be 01       	movw	r22, r28
     f26:	0d 2e       	mov	r0, r29
     f28:	00 0c       	add	r0, r0
     f2a:	88 0b       	sbc	r24, r24
     f2c:	99 0b       	sbc	r25, r25
     f2e:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__floatsisf>
     f32:	2f e6       	ldi	r18, 0x6F	; 111
     f34:	32 e1       	ldi	r19, 0x12	; 18
     f36:	43 e8       	ldi	r20, 0x83	; 131
     f38:	5f e3       	ldi	r21, 0x3F	; 63
     f3a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     f3e:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	31 e0       	ldi	r19, 0x01	; 1
     f46:	c9 01       	movw	r24, r18
     f48:	86 1b       	sub	r24, r22
     f4a:	97 0b       	sbc	r25, r23
     f4c:	8f 3f       	cpi	r24, 0xFF	; 255
     f4e:	91 05       	cpc	r25, r1
     f50:	19 f0       	breq	.+6      	; 0xf58 <general_set_timer+0x58>
     f52:	14 f0       	brlt	.+4      	; 0xf58 <general_set_timer+0x58>
     f54:	8f ef       	ldi	r24, 0xFF	; 255
     f56:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     f58:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS21)|(1<<CS20);
     f5c:	83 e0       	ldi	r24, 0x03	; 3
     f5e:	80 93 b1 00 	sts	0x00B1, r24
     f62:	94 c0       	rjmp	.+296    	; 0x108c <general_set_timer+0x18c>
	}
	// Resolution
	// 0.5s/256
	else if ( period_number <= 500 )
     f64:	c5 3f       	cpi	r28, 0xF5	; 245
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	d8 07       	cpc	r29, r24
     f6a:	04 f5       	brge	.+64     	; 0xfac <general_set_timer+0xac>
	{
		temp = 256 - (int) ( 256.0/500.0 * period_number);
     f6c:	be 01       	movw	r22, r28
     f6e:	0d 2e       	mov	r0, r29
     f70:	00 0c       	add	r0, r0
     f72:	88 0b       	sbc	r24, r24
     f74:	99 0b       	sbc	r25, r25
     f76:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__floatsisf>
     f7a:	2f e6       	ldi	r18, 0x6F	; 111
     f7c:	32 e1       	ldi	r19, 0x12	; 18
     f7e:	43 e0       	ldi	r20, 0x03	; 3
     f80:	5f e3       	ldi	r21, 0x3F	; 63
     f82:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     f86:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	31 e0       	ldi	r19, 0x01	; 1
     f8e:	c9 01       	movw	r24, r18
     f90:	86 1b       	sub	r24, r22
     f92:	97 0b       	sbc	r25, r23
     f94:	8f 3f       	cpi	r24, 0xFF	; 255
     f96:	91 05       	cpc	r25, r1
     f98:	19 f0       	breq	.+6      	; 0xfa0 <general_set_timer+0xa0>
     f9a:	14 f0       	brlt	.+4      	; 0xfa0 <general_set_timer+0xa0>
     f9c:	8f ef       	ldi	r24, 0xFF	; 255
     f9e:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     fa0:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22);
     fa4:	84 e0       	ldi	r24, 0x04	; 4
     fa6:	80 93 b1 00 	sts	0x00B1, r24
     faa:	70 c0       	rjmp	.+224    	; 0x108c <general_set_timer+0x18c>
	}
	// Resolution
	// 1s/256
	else if ( period_number <= 1000 )
     fac:	c9 3e       	cpi	r28, 0xE9	; 233
     fae:	83 e0       	ldi	r24, 0x03	; 3
     fb0:	d8 07       	cpc	r29, r24
     fb2:	04 f5       	brge	.+64     	; 0xff4 <general_set_timer+0xf4>
	{
		temp = 256 - (int) ( 256.0/1000.0 * period_number);
     fb4:	be 01       	movw	r22, r28
     fb6:	0d 2e       	mov	r0, r29
     fb8:	00 0c       	add	r0, r0
     fba:	88 0b       	sbc	r24, r24
     fbc:	99 0b       	sbc	r25, r25
     fbe:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__floatsisf>
     fc2:	2f e6       	ldi	r18, 0x6F	; 111
     fc4:	32 e1       	ldi	r19, 0x12	; 18
     fc6:	43 e8       	ldi	r20, 0x83	; 131
     fc8:	5e e3       	ldi	r21, 0x3E	; 62
     fca:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
     fce:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	31 e0       	ldi	r19, 0x01	; 1
     fd6:	c9 01       	movw	r24, r18
     fd8:	86 1b       	sub	r24, r22
     fda:	97 0b       	sbc	r25, r23
     fdc:	8f 3f       	cpi	r24, 0xFF	; 255
     fde:	91 05       	cpc	r25, r1
     fe0:	19 f0       	breq	.+6      	; 0xfe8 <general_set_timer+0xe8>
     fe2:	14 f0       	brlt	.+4      	; 0xfe8 <general_set_timer+0xe8>
     fe4:	8f ef       	ldi	r24, 0xFF	; 255
     fe6:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     fe8:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS20);	
     fec:	85 e0       	ldi	r24, 0x05	; 5
     fee:	80 93 b1 00 	sts	0x00B1, r24
     ff2:	4c c0       	rjmp	.+152    	; 0x108c <general_set_timer+0x18c>
	}
	// Resolution
	// 2s/256
	else if ( period_number <= 2000 )
     ff4:	c1 3d       	cpi	r28, 0xD1	; 209
     ff6:	87 e0       	ldi	r24, 0x07	; 7
     ff8:	d8 07       	cpc	r29, r24
     ffa:	04 f5       	brge	.+64     	; 0x103c <general_set_timer+0x13c>
	{
		temp = 256 - (int) ( 256.0/2000.0 * period_number);
     ffc:	be 01       	movw	r22, r28
     ffe:	0d 2e       	mov	r0, r29
    1000:	00 0c       	add	r0, r0
    1002:	88 0b       	sbc	r24, r24
    1004:	99 0b       	sbc	r25, r25
    1006:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__floatsisf>
    100a:	2f e6       	ldi	r18, 0x6F	; 111
    100c:	32 e1       	ldi	r19, 0x12	; 18
    100e:	43 e0       	ldi	r20, 0x03	; 3
    1010:	5e e3       	ldi	r21, 0x3E	; 62
    1012:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
    1016:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
    101a:	20 e0       	ldi	r18, 0x00	; 0
    101c:	31 e0       	ldi	r19, 0x01	; 1
    101e:	c9 01       	movw	r24, r18
    1020:	86 1b       	sub	r24, r22
    1022:	97 0b       	sbc	r25, r23
    1024:	8f 3f       	cpi	r24, 0xFF	; 255
    1026:	91 05       	cpc	r25, r1
    1028:	19 f0       	breq	.+6      	; 0x1030 <general_set_timer+0x130>
    102a:	14 f0       	brlt	.+4      	; 0x1030 <general_set_timer+0x130>
    102c:	8f ef       	ldi	r24, 0xFF	; 255
    102e:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
    1030:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS21);	
    1034:	86 e0       	ldi	r24, 0x06	; 6
    1036:	80 93 b1 00 	sts	0x00B1, r24
    103a:	28 c0       	rjmp	.+80     	; 0x108c <general_set_timer+0x18c>
	}
	// Resolution
	// 8s/256
	else if ( period_number <= 8000 )
    103c:	c1 34       	cpi	r28, 0x41	; 65
    103e:	8f e1       	ldi	r24, 0x1F	; 31
    1040:	d8 07       	cpc	r29, r24
    1042:	04 f5       	brge	.+64     	; 0x1084 <general_set_timer+0x184>
	{
		t = (int) ( 256.0/8000.0 * period_number);
    1044:	be 01       	movw	r22, r28
    1046:	0d 2e       	mov	r0, r29
    1048:	00 0c       	add	r0, r0
    104a:	88 0b       	sbc	r24, r24
    104c:	99 0b       	sbc	r25, r25
    104e:	0e 94 30 15 	call	0x2a60	; 0x2a60 <__floatsisf>
    1052:	2f e6       	ldi	r18, 0x6F	; 111
    1054:	32 e1       	ldi	r19, 0x12	; 18
    1056:	43 e0       	ldi	r20, 0x03	; 3
    1058:	5d e3       	ldi	r21, 0x3D	; 61
    105a:	0e 94 e5 15 	call	0x2bca	; 0x2bca <__mulsf3>
    105e:	0e 94 f8 14 	call	0x29f0	; 0x29f0 <__fixsfsi>
		temp = 256 - t;
		temp = temp > 255 ? 255 : temp ;
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	31 e0       	ldi	r19, 0x01	; 1
    1066:	c9 01       	movw	r24, r18
    1068:	86 1b       	sub	r24, r22
    106a:	97 0b       	sbc	r25, r23
    106c:	8f 3f       	cpi	r24, 0xFF	; 255
    106e:	91 05       	cpc	r25, r1
    1070:	19 f0       	breq	.+6      	; 0x1078 <general_set_timer+0x178>
    1072:	14 f0       	brlt	.+4      	; 0x1078 <general_set_timer+0x178>
    1074:	8f ef       	ldi	r24, 0xFF	; 255
    1076:	90 e0       	ldi	r25, 0x00	; 0

		TCNT2 = temp;
    1078:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
    107c:	87 e0       	ldi	r24, 0x07	; 7
    107e:	80 93 b1 00 	sts	0x00B1, r24
    1082:	04 c0       	rjmp	.+8      	; 0x108c <general_set_timer+0x18c>
	}
	else
	{
		printf("Timer exceeds max\n");
    1084:	8b eb       	ldi	r24, 0xBB	; 187
    1086:	92 e0       	ldi	r25, 0x02	; 2
    1088:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <puts>
	}

	/* start timer 2 */
	TCCR2A = 0x00;
    108c:	10 92 b0 00 	sts	0x00B0, r1
	TimeStamp += period_number;
    1090:	ce 01       	movw	r24, r28
    1092:	dd 0f       	add	r29, r29
    1094:	aa 0b       	sbc	r26, r26
    1096:	bb 0b       	sbc	r27, r27
    1098:	40 91 c6 05 	lds	r20, 0x05C6
    109c:	50 91 c7 05 	lds	r21, 0x05C7
    10a0:	60 91 c8 05 	lds	r22, 0x05C8
    10a4:	70 91 c9 05 	lds	r23, 0x05C9
    10a8:	84 0f       	add	r24, r20
    10aa:	95 1f       	adc	r25, r21
    10ac:	a6 1f       	adc	r26, r22
    10ae:	b7 1f       	adc	r27, r23
    10b0:	80 93 c6 05 	sts	0x05C6, r24
    10b4:	90 93 c7 05 	sts	0x05C7, r25
    10b8:	a0 93 c8 05 	sts	0x05C8, r26
    10bc:	b0 93 c9 05 	sts	0x05C9, r27
}
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	08 95       	ret

000010c6 <init_set_timer>:

void init_set_timer( int period_number )
{
    general_set_timer( period_number );
    10c6:	0e 94 80 07 	call	0xf00	; 0xf00 <general_set_timer>
	/* Clear pending interrupts */
	TIFR2  = (1 << TOV2) | (1 << OCF2A) | (1 << OCF2B);
    10ca:	87 e0       	ldi	r24, 0x07	; 7
    10cc:	87 bb       	out	0x17, r24	; 23
	/* Enable Overflow Interrupt */
	TIMSK2 = 1<<TOIE2;
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	80 93 70 00 	sts	0x0070, r24
    10d4:	08 95       	ret

000010d6 <set_timer>:

}

void set_timer( int period_number )
{
    10d6:	cf 93       	push	r28
    10d8:	df 93       	push	r29
    10da:	ec 01       	movw	r28, r24
	printf("set timer gap = %d\n\n", period_number);
    10dc:	df 93       	push	r29
    10de:	cf 93       	push	r28
    10e0:	8d ec       	ldi	r24, 0xCD	; 205
    10e2:	92 e0       	ldi	r25, 0x02	; 2
    10e4:	9f 93       	push	r25
    10e6:	8f 93       	push	r24
    10e8:	0e 94 bb 1c 	call	0x3976	; 0x3976 <printf>
	if( period_number == 0)
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	20 97       	sbiw	r28, 0x00	; 0
    10f6:	69 f0       	breq	.+26     	; 0x1112 <set_timer+0x3c>
	{
		/* we won't every set a zero timeout, will we ? */
		return;
	}
    if( timer_usage == 0 )
    10f8:	80 91 ca 05 	lds	r24, 0x05CA
    10fc:	90 91 cb 05 	lds	r25, 0x05CB
    1100:	89 2b       	or	r24, r25
    1102:	21 f4       	brne	.+8      	; 0x110c <set_timer+0x36>
    {
        init_set_timer( period_number );
    1104:	ce 01       	movw	r24, r28
    1106:	0e 94 63 08 	call	0x10c6	; 0x10c6 <init_set_timer>
    110a:	03 c0       	rjmp	.+6      	; 0x1112 <set_timer+0x3c>
    }
    else
    {
        general_set_timer( period_number );
    110c:	ce 01       	movw	r24, r28
    110e:	0e 94 80 07 	call	0xf00	; 0xf00 <general_set_timer>
    }
}	
    1112:	df 91       	pop	r29
    1114:	cf 91       	pop	r28
    1116:	08 95       	ret

00001118 <PWR_Init>:

/*************************************************************************//**
  @brief Initializes the power management system
*****************************************************************************/
void PWR_Init(void){
	DDRD |= 0b11000000;
    1118:	8a b1       	in	r24, 0x0a	; 10
    111a:	80 6c       	ori	r24, 0xC0	; 192
    111c:	8a b9       	out	0x0a, r24	; 10
    111e:	08 95       	ret

00001120 <PWR_TurnOn5V>:

/*************************************************************************//**
  @brief Turns on the 5V power supply
*****************************************************************************/
void PWR_TurnOn5V(void){
	PORTD |= 0b10000000;
    1120:	5f 9a       	sbi	0x0b, 7	; 11
    1122:	08 95       	ret

00001124 <SPI_SlaveInit>:

unsigned char buffer[16];

void SPI_SlaveInit(void)
{
	DDRB |= (1<<PORTB3); //Set MISO output
    1124:	23 9a       	sbi	0x04, 3	; 4
	SPCR = (1<<SPE); //Enable SPI
    1126:	80 e4       	ldi	r24, 0x40	; 64
    1128:	8c bd       	out	0x2c, r24	; 44
    112a:	08 95       	ret

0000112c <TWI_Init>:
/*************************************************************************//**
  @brief Initializes the 2-wire Serial Interface as a master
  @param[in] freq SCL frequency (Do not exceed 400kHz)
  @return Status (@c 0 on failure, nonzero otherwise)
*****************************************************************************/
char TWI_Init(unsigned long freq){
    112c:	9b 01       	movw	r18, r22
    112e:	ac 01       	movw	r20, r24
	//printf("TWI_Init");
	TWSR=0x00;
    1130:	10 92 b9 00 	sts	0x00B9, r1
	TWBR=(unsigned char)(((F_CPU/freq)-16UL)/8UL); //Compute settings value and set frequency
    1134:	60 e0       	ldi	r22, 0x00	; 0
    1136:	74 e2       	ldi	r23, 0x24	; 36
    1138:	84 ef       	ldi	r24, 0xF4	; 244
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 94 ce 19 	call	0x339c	; 0x339c <__udivmodsi4>
    1140:	da 01       	movw	r26, r20
    1142:	c9 01       	movw	r24, r18
    1144:	40 97       	sbiw	r24, 0x10	; 16
    1146:	a1 09       	sbc	r26, r1
    1148:	b1 09       	sbc	r27, r1
    114a:	68 94       	set
    114c:	12 f8       	bld	r1, 2
    114e:	b6 95       	lsr	r27
    1150:	a7 95       	ror	r26
    1152:	97 95       	ror	r25
    1154:	87 95       	ror	r24
    1156:	16 94       	lsr	r1
    1158:	d1 f7       	brne	.-12     	; 0x114e <TWI_Init+0x22>
    115a:	80 93 b8 00 	sts	0x00B8, r24
	TWCR=(1 << TWEN);
    115e:	84 e0       	ldi	r24, 0x04	; 4
    1160:	80 93 bc 00 	sts	0x00BC, r24
	
	//TWAR=0; //Disable slave mode
	
	return 1; //May want to actually check for success here
}
    1164:	81 e0       	ldi	r24, 0x01	; 1
    1166:	08 95       	ret

00001168 <TWI_WriteByte>:
  @param[in] data byte to send
  @return Status code, TWI_SENT_ACK or TWI_SENT_NACK on success
*****************************************************************************/
char TWI_WriteByte(unsigned char data){
	//printf("TWI_WriteByte");
	TWDR = data; //Stage the data to send
    1168:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
    116c:	84 e8       	ldi	r24, 0x84	; 132
    116e:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);//Send the data
    1172:	ec eb       	ldi	r30, 0xBC	; 188
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	80 81       	ld	r24, Z
    1178:	88 23       	and	r24, r24
    117a:	ec f7       	brge	.-6      	; 0x1176 <TWI_WriteByte+0xe>
	
	return TWSR&TWSR_MASK;//Return the status code
    117c:	80 91 b9 00 	lds	r24, 0x00B9
}
    1180:	88 7f       	andi	r24, 0xF8	; 248
    1182:	08 95       	ret

00001184 <TWI_BeginWrite>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAW_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginWrite(unsigned char address){
	//printf("TWI_BeginWrite");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
    1184:	94 ee       	ldi	r25, 0xE4	; 228
    1186:	90 93 bc 00 	sts	0x00BC, r25
	int i=0;
	while ((TWCR & (1<<TWINT)) == 0);
    118a:	ec eb       	ldi	r30, 0xBC	; 188
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	90 81       	ld	r25, Z
    1190:	99 23       	and	r25, r25
    1192:	ec f7       	brge	.-6      	; 0x118e <TWI_BeginWrite+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1194:	ef e9       	ldi	r30, 0x9F	; 159
    1196:	ff e0       	ldi	r31, 0x0F	; 15
    1198:	31 97       	sbiw	r30, 0x01	; 1
    119a:	f1 f7       	brne	.-4      	; 0x1198 <TWI_BeginWrite+0x14>
    119c:	00 c0       	rjmp	.+0      	; 0x119e <TWI_BeginWrite+0x1a>
    119e:	00 00       	nop
	_delay_ms(1);
	char stat = (TWSR & TWSR_MASK);
    11a0:	90 91 b9 00 	lds	r25, 0x00B9
    11a4:	98 7f       	andi	r25, 0xF8	; 248
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
    11a6:	98 30       	cpi	r25, 0x08	; 8
    11a8:	31 f0       	breq	.+12     	; 0x11b6 <TWI_BeginWrite+0x32>
    11aa:	90 31       	cpi	r25, 0x10	; 16
    11ac:	21 f0       	breq	.+8      	; 0x11b6 <TWI_BeginWrite+0x32>
    11ae:	80 91 b9 00 	lds	r24, 0x00B9
    11b2:	88 7f       	andi	r24, 0xF8	; 248
    11b4:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) & SLAW_MASK); //reset bit 0 to send a write bit, send
    11b6:	88 0f       	add	r24, r24
    11b8:	0e 94 b4 08 	call	0x1168	; 0x1168 <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	return stat;//Return the status code
}
    11bc:	08 95       	ret

000011be <TWI_BeginRead>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAR_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginRead(unsigned char address){
	//printf("TWI_BeginRead");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
    11be:	94 ee       	ldi	r25, 0xE4	; 228
    11c0:	90 93 bc 00 	sts	0x00BC, r25
	while ((TWCR & (1<<TWINT)) == 0);
    11c4:	ec eb       	ldi	r30, 0xBC	; 188
    11c6:	f0 e0       	ldi	r31, 0x00	; 0
    11c8:	90 81       	ld	r25, Z
    11ca:	99 23       	and	r25, r25
    11cc:	ec f7       	brge	.-6      	; 0x11c8 <TWI_BeginRead+0xa>
	
	char stat = (TWSR & TWSR_MASK);
    11ce:	90 91 b9 00 	lds	r25, 0x00B9
    11d2:	98 7f       	andi	r25, 0xF8	; 248
	//printf("0x%1x",(unsigned)stat);
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
    11d4:	98 30       	cpi	r25, 0x08	; 8
    11d6:	31 f0       	breq	.+12     	; 0x11e4 <TWI_BeginRead+0x26>
    11d8:	90 31       	cpi	r25, 0x10	; 16
    11da:	21 f0       	breq	.+8      	; 0x11e4 <TWI_BeginRead+0x26>
    11dc:	80 91 b9 00 	lds	r24, 0x00B9
    11e0:	88 7f       	andi	r24, 0xF8	; 248
    11e2:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) | SLAR_MASK); //set bit 0 to send a read bit and send it
    11e4:	88 0f       	add	r24, r24
    11e6:	81 60       	ori	r24, 0x01	; 1
    11e8:	0e 94 b4 08 	call	0x1168	; 0x1168 <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	
	return stat;//Return the status code
}
    11ec:	08 95       	ret

000011ee <TWI_ReadAck>:
/*************************************************************************//**
  @brief Receives a byte over TWI and returns an ACK
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_ACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadAck(unsigned char *data){
    11ee:	dc 01       	movw	r26, r24
	//printf("TWI_ReadAck");
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Start receiving, ending with an ACK
    11f0:	84 ec       	ldi	r24, 0xC4	; 196
    11f2:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);
    11f6:	ec eb       	ldi	r30, 0xBC	; 188
    11f8:	f0 e0       	ldi	r31, 0x00	; 0
    11fa:	90 81       	ld	r25, Z
    11fc:	99 23       	and	r25, r25
    11fe:	ec f7       	brge	.-6      	; 0x11fa <TWI_ReadAck+0xc>
	*data=TWDR; //Store the data
    1200:	80 91 bb 00 	lds	r24, 0x00BB
    1204:	8c 93       	st	X, r24
	
	return TWSR&TWSR_MASK;//Return the status code
    1206:	80 91 b9 00 	lds	r24, 0x00B9
}
    120a:	88 7f       	andi	r24, 0xF8	; 248
    120c:	08 95       	ret

0000120e <TWI_ReadNack>:
/*************************************************************************//**
  @brief Receives a byte over TWI and returns a NACK
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_NACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadNack(unsigned char *data){
    120e:	dc 01       	movw	r26, r24
	//printf("TWI_ReadNack");
	TWCR = (1<<TWINT)|(1<<TWEN); //Start receiving, ending with a NACK
    1210:	84 e8       	ldi	r24, 0x84	; 132
    1212:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);
    1216:	ec eb       	ldi	r30, 0xBC	; 188
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	90 81       	ld	r25, Z
    121c:	99 23       	and	r25, r25
    121e:	ec f7       	brge	.-6      	; 0x121a <TWI_ReadNack+0xc>
	*data=TWDR; //Store the data
    1220:	80 91 bb 00 	lds	r24, 0x00BB
    1224:	8c 93       	st	X, r24
	
	return TWSR&TWSR_MASK;//Return the status code
    1226:	80 91 b9 00 	lds	r24, 0x00B9
}
    122a:	88 7f       	andi	r24, 0xF8	; 248
    122c:	08 95       	ret

0000122e <TWI_Stop>:
  @brief Sends a Stop bit, be sure to send a Start bit before future interactions on the bus
  @return Status code, should always be nonzero
*****************************************************************************/
char TWI_Stop(void){
	//printf("TWI_Stop");
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    122e:	84 e9       	ldi	r24, 0x94	; 148
    1230:	80 93 bc 00 	sts	0x00BC, r24
	return 1;
}
    1234:	81 e0       	ldi	r24, 0x01	; 1
    1236:	08 95       	ret

00001238 <TWI_Read>:
  @param[in] amount Number of bytes to recieve
  @param[in] whether or not to send an ACK on the last byte, sends NACK if false
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
    1238:	9f 92       	push	r9
    123a:	af 92       	push	r10
    123c:	bf 92       	push	r11
    123e:	cf 92       	push	r12
    1240:	df 92       	push	r13
    1242:	ef 92       	push	r14
    1244:	ff 92       	push	r15
    1246:	0f 93       	push	r16
    1248:	1f 93       	push	r17
    124a:	cf 93       	push	r28
    124c:	df 93       	push	r29
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
    124e:	16 16       	cp	r1, r22
    1250:	17 06       	cpc	r1, r23
    1252:	0c f5       	brge	.+66     	; 0x1296 <TWI_Read+0x5e>
    1254:	94 2e       	mov	r9, r20
    1256:	8b 01       	movw	r16, r22
    1258:	7c 01       	movw	r14, r24
    125a:	c0 e0       	ldi	r28, 0x00	; 0
    125c:	d0 e0       	ldi	r29, 0x00	; 0
		if((ack==false) && ((amount-1)==i)){
    125e:	6b 01       	movw	r12, r22
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	c8 1a       	sub	r12, r24
    1264:	d1 08       	sbc	r13, r1
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
    1266:	57 01       	movw	r10, r14
    1268:	ac 0c       	add	r10, r12
    126a:	bd 1c       	adc	r11, r13
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
		if((ack==false) && ((amount-1)==i)){
    126c:	91 10       	cpse	r9, r1
    126e:	07 c0       	rjmp	.+14     	; 0x127e <TWI_Read+0x46>
    1270:	cc 16       	cp	r12, r28
    1272:	dd 06       	cpc	r13, r29
    1274:	21 f4       	brne	.+8      	; 0x127e <TWI_Read+0x46>
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
    1276:	c5 01       	movw	r24, r10
    1278:	0e 94 07 09 	call	0x120e	; 0x120e <TWI_ReadNack>
    127c:	05 c0       	rjmp	.+10     	; 0x1288 <TWI_Read+0x50>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}else{
			status=TWI_ReadAck(&data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
    127e:	c7 01       	movw	r24, r14
    1280:	8c 0f       	add	r24, r28
    1282:	9d 1f       	adc	r25, r29
    1284:	0e 94 f7 08 	call	0x11ee	; 0x11ee <TWI_ReadAck>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}
		//printf("A");
		if(status!=TWI_REC_ACK)return status; //If NACK was selected, returning here is fine since the loop is already ending
    1288:	80 35       	cpi	r24, 0x50	; 80
    128a:	31 f4       	brne	.+12     	; 0x1298 <TWI_Read+0x60>
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
    128c:	21 96       	adiw	r28, 0x01	; 1
    128e:	c0 17       	cp	r28, r16
    1290:	d1 07       	cpc	r29, r17
    1292:	61 f7       	brne	.-40     	; 0x126c <TWI_Read+0x34>
    1294:	01 c0       	rjmp	.+2      	; 0x1298 <TWI_Read+0x60>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
    1296:	80 e0       	ldi	r24, 0x00	; 0
		//will return if something goes wrong partway through
		//printf("B");
	}
	//printf("0x%1x",(unsigned)status);
	return status;
}
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	1f 91       	pop	r17
    129e:	0f 91       	pop	r16
    12a0:	ff 90       	pop	r15
    12a2:	ef 90       	pop	r14
    12a4:	df 90       	pop	r13
    12a6:	cf 90       	pop	r12
    12a8:	bf 90       	pop	r11
    12aa:	af 90       	pop	r10
    12ac:	9f 90       	pop	r9
    12ae:	08 95       	ret

000012b0 <TWI_Write>:
  @param[in] *data Pointer to an array of bytes to send
  @param[in] amount Number of bytes to send
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
    12b0:	0f 93       	push	r16
    12b2:	1f 93       	push	r17
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
    12b8:	16 16       	cp	r1, r22
    12ba:	17 06       	cpc	r1, r23
    12bc:	6c f4       	brge	.+26     	; 0x12d8 <TWI_Write+0x28>
    12be:	8c 01       	movw	r16, r24
    12c0:	ec 01       	movw	r28, r24
    12c2:	06 0f       	add	r16, r22
    12c4:	17 1f       	adc	r17, r23
		status=TWI_WriteByte(data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
    12c6:	89 91       	ld	r24, Y+
    12c8:	0e 94 b4 08 	call	0x1168	; 0x1168 <TWI_WriteByte>
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
    12cc:	88 32       	cpi	r24, 0x28	; 40
    12ce:	29 f4       	brne	.+10     	; 0x12da <TWI_Write+0x2a>
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
    12d0:	c0 17       	cp	r28, r16
    12d2:	d1 07       	cpc	r29, r17
    12d4:	c1 f7       	brne	.-16     	; 0x12c6 <TWI_Write+0x16>
    12d6:	01 c0       	rjmp	.+2      	; 0x12da <TWI_Write+0x2a>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
    12d8:	80 e0       	ldi	r24, 0x00	; 0
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
		//will return if something goes wrong partway through
	}
	return status;
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28
    12de:	1f 91       	pop	r17
    12e0:	0f 91       	pop	r16
    12e2:	08 95       	ret

000012e4 <USART0_Init>:
  @brief Initializes USART0 in asynchronous UART mode, 8 bit data, 1 stop bit
  @param[in] desired baud rate (configuration values computed using F_CPU)
*****************************************************************************/
void USART0_Init(unsigned long baud){
	
	stdout = &USART0_stdout; //make stdout print to USART0
    12e4:	26 e0       	ldi	r18, 0x06	; 6
    12e6:	32 e0       	ldi	r19, 0x02	; 2
    12e8:	30 93 69 0a 	sts	0x0A69, r19
    12ec:	20 93 68 0a 	sts	0x0A68, r18
	
	//Compute UBRR for baudrate setting
	unsigned short ubrr=(unsigned short)((F_CPU/(baud*16UL))-1);
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	88 0f       	add	r24, r24
    12f6:	99 1f       	adc	r25, r25
    12f8:	aa 1f       	adc	r26, r26
    12fa:	bb 1f       	adc	r27, r27
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	aa 1f       	adc	r26, r26
    1302:	bb 1f       	adc	r27, r27
    1304:	9c 01       	movw	r18, r24
    1306:	ad 01       	movw	r20, r26
    1308:	22 0f       	add	r18, r18
    130a:	33 1f       	adc	r19, r19
    130c:	44 1f       	adc	r20, r20
    130e:	55 1f       	adc	r21, r21
    1310:	22 0f       	add	r18, r18
    1312:	33 1f       	adc	r19, r19
    1314:	44 1f       	adc	r20, r20
    1316:	55 1f       	adc	r21, r21
    1318:	60 e0       	ldi	r22, 0x00	; 0
    131a:	74 e2       	ldi	r23, 0x24	; 36
    131c:	84 ef       	ldi	r24, 0xF4	; 244
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	0e 94 ce 19 	call	0x339c	; 0x339c <__udivmodsi4>
    1324:	21 50       	subi	r18, 0x01	; 1
    1326:	31 09       	sbc	r19, r1
	
	//Set BAUD rate.
	UBRR0H = (unsigned char) (ubrr >> 8);
    1328:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) ubrr;
    132c:	20 93 c4 00 	sts	0x00C4, r18
	/*Set frame format. 8 data bit(settings bits UCSZ00 and UCSZ01  UCSR0B), 1 stop bit(by default and need not to be worried about). 
	The UCSZ01:0 bits combined with the UCSZ02 bit in UCSR0B sets the number of data
	bits (Character Size) in the frame that the Receiver and Transmitter use. 
	If a change on frame format is needed, make sure to modify UCSR0B register above accordingly.
	See datasheet pg. 390.*/
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
    1330:	86 e0       	ldi	r24, 0x06	; 6
    1332:	80 93 c2 00 	sts	0x00C2, r24
	
	//Enable receiver and transmitter. Enable the USART Receive Complete interrupt(RXCIE).
	//UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0));
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);//Enable RX/TX, no interrupts
    1336:	88 e1       	ldi	r24, 0x18	; 24
    1338:	80 93 c1 00 	sts	0x00C1, r24
    133c:	08 95       	ret

0000133e <USART0_Transmit>:
Function contains busy loops for simplicity in debugging. Not production code.
  @brief Transmits a byte via USART0
  @param[in] data byte to be transmitted
*****************************************************************************/
void USART0_Transmit(unsigned char data){
	while(!(UCSR0A & (1 << UDRE0))); //Wait for the empty transmit buffer. (Waiting UDR0 to be empty.)
    133e:	e0 ec       	ldi	r30, 0xC0	; 192
    1340:	f0 e0       	ldi	r31, 0x00	; 0
    1342:	90 81       	ld	r25, Z
    1344:	95 ff       	sbrs	r25, 5
    1346:	fd cf       	rjmp	.-6      	; 0x1342 <USART0_Transmit+0x4>
		UDR0 = data;			//store the data in the USART Data Register
    1348:	80 93 c6 00 	sts	0x00C6, r24
    134c:	08 95       	ret

0000134e <USART0_putchar_printf>:
  @brief Called when stdout is being printed to USART0 (this is set up at runtime)
  @param[in] var byte to transmit
  @param[in/out] *stream Pointer to a stdio.h FILE io stream
  @return Status
*****************************************************************************/
int USART0_putchar_printf(char var, FILE *stream) {
    134e:	cf 93       	push	r28
    1350:	c8 2f       	mov	r28, r24
	if (var == '\n') USART0_Transmit('\r');
    1352:	8a 30       	cpi	r24, 0x0A	; 10
    1354:	19 f4       	brne	.+6      	; 0x135c <USART0_putchar_printf+0xe>
    1356:	8d e0       	ldi	r24, 0x0D	; 13
    1358:	0e 94 9f 09 	call	0x133e	; 0x133e <USART0_Transmit>
	USART0_Transmit(var);
    135c:	8c 2f       	mov	r24, r28
    135e:	0e 94 9f 09 	call	0x133e	; 0x133e <USART0_Transmit>
	return 0;
}
    1362:	80 e0       	ldi	r24, 0x00	; 0
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	cf 91       	pop	r28
    1368:	08 95       	ret

0000136a <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
    136a:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    136c:	0f b6       	in	r0, 0x3f	; 63
    136e:	f8 94       	cli
    1370:	a8 95       	wdr
    1372:	80 91 60 00 	lds	r24, 0x0060
    1376:	88 61       	ori	r24, 0x18	; 24
    1378:	80 93 60 00 	sts	0x0060, r24
    137c:	10 92 60 00 	sts	0x0060, r1
    1380:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
    1382:	e1 e6       	ldi	r30, 0x61	; 97
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	80 e8       	ldi	r24, 0x80	; 128
    1388:	80 83       	st	Z, r24
  CLKPR = 0;
    138a:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
    138c:	78 94       	sei

  HAL_TimerInit();
    138e:	0e 94 ca 09 	call	0x1394	; 0x1394 <HAL_TimerInit>
    1392:	08 95       	ret

00001394 <HAL_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_TimerInit(void)
{
  halTimerIrqCount = 0;
    1394:	10 92 39 0a 	sts	0x0A39, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
    1398:	80 e2       	ldi	r24, 0x20	; 32
    139a:	9e e4       	ldi	r25, 0x4E	; 78
    139c:	90 93 a9 00 	sts	0x00A9, r25
    13a0:	80 93 a8 00 	sts	0x00A8, r24
  TCCR4B = (1 << WGM12);              // CTC mode
    13a4:	e1 ea       	ldi	r30, 0xA1	; 161
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	88 e0       	ldi	r24, 0x08	; 8
    13aa:	80 83       	st	Z, r24
  TCCR4B |= (1 << CS11);              // Prescaler 8
    13ac:	80 81       	ld	r24, Z
    13ae:	82 60       	ori	r24, 0x02	; 2
    13b0:	80 83       	st	Z, r24
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
    13b2:	e2 e7       	ldi	r30, 0x72	; 114
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	82 60       	ori	r24, 0x02	; 2
    13ba:	80 83       	st	Z, r24
    13bc:	08 95       	ret

000013be <__vector_42>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    13be:	1f 92       	push	r1
    13c0:	0f 92       	push	r0
    13c2:	0f b6       	in	r0, 0x3f	; 63
    13c4:	0f 92       	push	r0
    13c6:	11 24       	eor	r1, r1
    13c8:	8f 93       	push	r24
  halTimerIrqCount++;
    13ca:	80 91 39 0a 	lds	r24, 0x0A39
    13ce:	8f 5f       	subi	r24, 0xFF	; 255
    13d0:	80 93 39 0a 	sts	0x0A39, r24
}
    13d4:	8f 91       	pop	r24
    13d6:	0f 90       	pop	r0
    13d8:	0f be       	out	0x3f, r0	; 63
    13da:	0f 90       	pop	r0
    13dc:	1f 90       	pop	r1
    13de:	18 95       	reti

000013e0 <NWK_Init>:
/*************************************************************************//**
  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
  nwkIb.nwkSeqNum = 0;
    13e0:	ea e3       	ldi	r30, 0x3A	; 58
    13e2:	fa e0       	ldi	r31, 0x0A	; 10
    13e4:	14 82       	std	Z+4, r1	; 0x04
  nwkIb.macSeqNum = 0;
    13e6:	15 82       	std	Z+5, r1	; 0x05
  nwkIb.addr = 0;
    13e8:	11 82       	std	Z+1, r1	; 0x01
    13ea:	10 82       	st	Z, r1
  nwkIb.lock = 0;
    13ec:	17 a2       	std	Z+39, r1	; 0x27
    13ee:	16 a2       	std	Z+38, r1	; 0x26
    13f0:	e0 e4       	ldi	r30, 0x40	; 64
    13f2:	fa e0       	ldi	r31, 0x0A	; 10
    13f4:	80 e6       	ldi	r24, 0x60	; 96
    13f6:	9a e0       	ldi	r25, 0x0A	; 10

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
    nwkIb.endpoint[i] = NULL;
    13f8:	11 92       	st	Z+, r1
    13fa:	11 92       	st	Z+, r1
  nwkIb.nwkSeqNum = 0;
  nwkIb.macSeqNum = 0;
  nwkIb.addr = 0;
  nwkIb.lock = 0;

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
    13fc:	e8 17       	cp	r30, r24
    13fe:	f9 07       	cpc	r31, r25
    1400:	d9 f7       	brne	.-10     	; 0x13f8 <NWK_Init+0x18>
    nwkIb.endpoint[i] = NULL;

  nwkTxInit();
    1402:	0e 94 f0 0a 	call	0x15e0	; 0x15e0 <nwkTxInit>
  nwkRxInit();
    1406:	0e 94 70 0a 	call	0x14e0	; 0x14e0 <nwkRxInit>
  nwkFrameInit();
    140a:	0e 94 18 0a 	call	0x1430	; 0x1430 <nwkFrameInit>
  nwkDataReqInit();
    140e:	0e 94 13 0a 	call	0x1426	; 0x1426 <nwkDataReqInit>
    1412:	08 95       	ret

00001414 <NWK_OpenEndpoint>:
  @param[in] id Endpoint index (1-15)
  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
  nwkIb.endpoint[id] = handler;
    1414:	e8 2f       	mov	r30, r24
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	ee 0f       	add	r30, r30
    141a:	ff 1f       	adc	r31, r31
    141c:	e0 5c       	subi	r30, 0xC0	; 192
    141e:	f5 4f       	sbci	r31, 0xF5	; 245
    1420:	71 83       	std	Z+1, r23	; 0x01
    1422:	60 83       	st	Z, r22
    1424:	08 95       	ret

00001426 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
    1426:	10 92 cd 05 	sts	0x05CD, r1
    142a:	10 92 cc 05 	sts	0x05CC, r1
    142e:	08 95       	ret

00001430 <nwkFrameInit>:
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    1430:	10 92 ce 05 	sts	0x05CE, r1
    1434:	10 92 57 06 	sts	0x0657, r1
    1438:	10 92 e0 06 	sts	0x06E0, r1
    143c:	10 92 69 07 	sts	0x0769, r1
    1440:	10 92 f2 07 	sts	0x07F2, r1
    1444:	08 95       	ret

00001446 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    1446:	00 97       	sbiw	r24, 0x00	; 0
    1448:	41 f0       	breq	.+16     	; 0x145a <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
    144a:	fc 01       	movw	r30, r24
    144c:	e7 57       	subi	r30, 0x77	; 119
    144e:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1450:	88 e0       	ldi	r24, 0x08	; 8
    1452:	eb 37       	cpi	r30, 0x7B	; 123
    1454:	f8 07       	cpc	r31, r24
    1456:	18 f0       	brcs	.+6      	; 0x145e <nwkFrameNext+0x18>
    1458:	15 c0       	rjmp	.+42     	; 0x1484 <nwkFrameNext+0x3e>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    145a:	ee ec       	ldi	r30, 0xCE	; 206
    145c:	f5 e0       	ldi	r31, 0x05	; 5
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    145e:	80 81       	ld	r24, Z
    1460:	88 23       	and	r24, r24
    1462:	39 f0       	breq	.+14     	; 0x1472 <nwkFrameNext+0x2c>
    1464:	03 c0       	rjmp	.+6      	; 0x146c <nwkFrameNext+0x26>
    1466:	80 81       	ld	r24, Z
    1468:	88 23       	and	r24, r24
    146a:	19 f0       	breq	.+6      	; 0x1472 <nwkFrameNext+0x2c>
      return frame;
    146c:	8e 2f       	mov	r24, r30
    146e:	9f 2f       	mov	r25, r31
    1470:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1472:	e7 57       	subi	r30, 0x77	; 119
    1474:	ff 4f       	sbci	r31, 0xFF	; 255
    1476:	88 e0       	ldi	r24, 0x08	; 8
    1478:	eb 37       	cpi	r30, 0x7B	; 123
    147a:	f8 07       	cpc	r31, r24
    147c:	a0 f3       	brcs	.-24     	; 0x1466 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    147e:	80 e0       	ldi	r24, 0x00	; 0
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	08 95       	ret
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	90 e0       	ldi	r25, 0x00	; 0
}
    1488:	08 95       	ret

0000148a <nwkRxServiceDataInd>:
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    148a:	dc 01       	movw	r26, r24
    148c:	19 96       	adiw	r26, 0x09	; 9
    148e:	2c 91       	ld	r18, X
    1490:	19 97       	sbiw	r26, 0x09	; 9
    1492:	22 23       	and	r18, r18
    1494:	51 f0       	breq	.+20     	; 0x14aa <nwkRxServiceDataInd+0x20>
    return false;

  switch (ind->data[0])
    1496:	17 96       	adiw	r26, 0x07	; 7
    1498:	ed 91       	ld	r30, X+
    149a:	fc 91       	ld	r31, X
    149c:	18 97       	sbiw	r26, 0x08	; 8
    149e:	20 81       	ld	r18, Z
    14a0:	21 11       	cpse	r18, r1
    14a2:	05 c0       	rjmp	.+10     	; 0x14ae <nwkRxServiceDataInd+0x24>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
    14a4:	0e 94 13 0b 	call	0x1626	; 0x1626 <nwkTxAckReceived>
    14a8:	08 95       	ret
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    return false;
    14aa:	80 e0       	ldi	r24, 0x00	; 0
    14ac:	08 95       	ret
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
    14ae:	80 e0       	ldi	r24, 0x00	; 0
  }
}
    14b0:	08 95       	ret

000014b2 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    14b2:	bc 01       	movw	r22, r24
    14b4:	ec e8       	ldi	r30, 0x8C	; 140
    14b6:	f8 e0       	ldi	r31, 0x08	; 8
    14b8:	2e eb       	ldi	r18, 0xBE	; 190
    14ba:	38 e0       	ldi	r19, 0x08	; 8
  bool restart = false;
    14bc:	40 e0       	ldi	r20, 0x00	; 0
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    14be:	51 e0       	ldi	r21, 0x01	; 1
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    14c0:	90 81       	ld	r25, Z
    14c2:	99 23       	and	r25, r25
    14c4:	19 f0       	breq	.+6      	; 0x14cc <nwkRxDuplicateRejectionTimerHandler+0x1a>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
    14c6:	91 50       	subi	r25, 0x01	; 1
    14c8:	90 83       	st	Z, r25
      restart = true;
    14ca:	45 2f       	mov	r20, r21
    14cc:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    14ce:	e2 17       	cp	r30, r18
    14d0:	f3 07       	cpc	r31, r19
    14d2:	b1 f7       	brne	.-20     	; 0x14c0 <nwkRxDuplicateRejectionTimerHandler+0xe>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
    14d4:	44 23       	and	r20, r20
    14d6:	19 f0       	breq	.+6      	; 0x14de <nwkRxDuplicateRejectionTimerHandler+0x2c>
    14d8:	cb 01       	movw	r24, r22
    SYS_TimerStart(timer);
    14da:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <SYS_TimerStart>
    14de:	08 95       	ret

000014e0 <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    14e0:	ec e8       	ldi	r30, 0x8C	; 140
    14e2:	f8 e0       	ldi	r31, 0x08	; 8
    14e4:	8e eb       	ldi	r24, 0xBE	; 190
    14e6:	98 e0       	ldi	r25, 0x08	; 8
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
    14e8:	10 82       	st	Z, r1
    14ea:	35 96       	adiw	r30, 0x05	; 5
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    14ec:	e8 17       	cp	r30, r24
    14ee:	f9 07       	cpc	r31, r25
    14f0:	d9 f7       	brne	.-10     	; 0x14e8 <nwkRxInit+0x8>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    14f2:	eb e7       	ldi	r30, 0x7B	; 123
    14f4:	f8 e0       	ldi	r31, 0x08	; 8
    14f6:	84 e6       	ldi	r24, 0x64	; 100
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	a0 e0       	ldi	r26, 0x00	; 0
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	86 83       	std	Z+6, r24	; 0x06
    1500:	97 83       	std	Z+7, r25	; 0x07
    1502:	a0 87       	std	Z+8, r26	; 0x08
    1504:	b1 87       	std	Z+9, r27	; 0x09
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1506:	12 86       	std	Z+10, r1	; 0x0a
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
    1508:	89 e5       	ldi	r24, 0x59	; 89
    150a:	9a e0       	ldi	r25, 0x0A	; 10
    150c:	94 87       	std	Z+12, r25	; 0x0c
    150e:	83 87       	std	Z+11, r24	; 0x0b

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
    1510:	65 e4       	ldi	r22, 0x45	; 69
    1512:	7a e0       	ldi	r23, 0x0A	; 10
    1514:	80 e0       	ldi	r24, 0x00	; 0
    1516:	0e 94 0a 0a 	call	0x1414	; 0x1414 <NWK_OpenEndpoint>
    151a:	08 95       	ret

0000151c <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    151c:	ef 92       	push	r14
    151e:	ff 92       	push	r15
    1520:	0f 93       	push	r16
    1522:	1f 93       	push	r17
    1524:	cf 93       	push	r28
    1526:	7c 01       	movw	r14, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    1528:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    152e:	01 e0       	ldi	r16, 0x01	; 1

      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    1530:	c3 e1       	ldi	r28, 0x13	; 19
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    1532:	13 c0       	rjmp	.+38     	; 0x155a <nwkTxDelayTimerHandler+0x3e>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    1534:	fc 01       	movw	r30, r24
    1536:	20 81       	ld	r18, Z
    1538:	21 31       	cpi	r18, 0x11	; 17
    153a:	79 f4       	brne	.+30     	; 0x155a <nwkTxDelayTimerHandler+0x3e>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    153c:	ec 57       	subi	r30, 0x7C	; 124
    153e:	ff 4f       	sbci	r31, 0xFF	; 255
    1540:	20 81       	ld	r18, Z
    1542:	31 81       	ldd	r19, Z+1	; 0x01
    1544:	21 50       	subi	r18, 0x01	; 1
    1546:	31 09       	sbc	r19, r1
    1548:	31 83       	std	Z+1, r19	; 0x01
    154a:	20 83       	st	Z, r18
    154c:	23 2b       	or	r18, r19
    154e:	21 f4       	brne	.+8      	; 0x1558 <nwkTxDelayTimerHandler+0x3c>
        frame->state = NWK_TX_STATE_SEND;
    1550:	fc 01       	movw	r30, r24
    1552:	c0 83       	st	Z, r28

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    1554:	10 2f       	mov	r17, r16
    1556:	01 c0       	rjmp	.+2      	; 0x155a <nwkTxDelayTimerHandler+0x3e>
    1558:	10 2f       	mov	r17, r16
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    155a:	0e 94 23 0a 	call	0x1446	; 0x1446 <nwkFrameNext>
    155e:	00 97       	sbiw	r24, 0x00	; 0
    1560:	49 f7       	brne	.-46     	; 0x1534 <nwkTxDelayTimerHandler+0x18>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
    1562:	11 23       	and	r17, r17
    1564:	19 f0       	breq	.+6      	; 0x156c <nwkTxDelayTimerHandler+0x50>
    SYS_TimerStart(timer);
    1566:	c7 01       	movw	r24, r14
    1568:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <SYS_TimerStart>
}
    156c:	cf 91       	pop	r28
    156e:	1f 91       	pop	r17
    1570:	0f 91       	pop	r16
    1572:	ff 90       	pop	r15
    1574:	ef 90       	pop	r14
    1576:	08 95       	ret

00001578 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    1578:	ef 92       	push	r14
    157a:	ff 92       	push	r15
    157c:	0f 93       	push	r16
    157e:	1f 93       	push	r17
    1580:	cf 93       	push	r28
    1582:	df 93       	push	r29
    1584:	7c 01       	movw	r14, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    1586:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    1588:	80 e0       	ldi	r24, 0x00	; 0
    158a:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    158c:	01 e0       	ldi	r16, 0x01	; 1

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    158e:	d7 e1       	ldi	r29, 0x17	; 23
  frame->tx.status = status;
    1590:	c0 e1       	ldi	r28, 0x10	; 16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    1592:	16 c0       	rjmp	.+44     	; 0x15c0 <nwkTxAckWaitTimerHandler+0x48>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    1594:	fc 01       	movw	r30, r24
    1596:	20 81       	ld	r18, Z
    1598:	26 31       	cpi	r18, 0x16	; 22
    159a:	91 f4       	brne	.+36     	; 0x15c0 <nwkTxAckWaitTimerHandler+0x48>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    159c:	ec 57       	subi	r30, 0x7C	; 124
    159e:	ff 4f       	sbci	r31, 0xFF	; 255
    15a0:	20 81       	ld	r18, Z
    15a2:	31 81       	ldd	r19, Z+1	; 0x01
    15a4:	21 50       	subi	r18, 0x01	; 1
    15a6:	31 09       	sbc	r19, r1
    15a8:	31 83       	std	Z+1, r19	; 0x01
    15aa:	20 83       	st	Z, r18
    15ac:	23 2b       	or	r18, r19
    15ae:	39 f4       	brne	.+14     	; 0x15be <nwkTxAckWaitTimerHandler+0x46>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    15b0:	fc 01       	movw	r30, r24
    15b2:	d0 83       	st	Z, r29
  frame->tx.status = status;
    15b4:	ed 57       	subi	r30, 0x7D	; 125
    15b6:	ff 4f       	sbci	r31, 0xFF	; 255
    15b8:	c0 83       	st	Z, r28

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    15ba:	10 2f       	mov	r17, r16
    15bc:	01 c0       	rjmp	.+2      	; 0x15c0 <nwkTxAckWaitTimerHandler+0x48>
    15be:	10 2f       	mov	r17, r16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    15c0:	0e 94 23 0a 	call	0x1446	; 0x1446 <nwkFrameNext>
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	31 f7       	brne	.-52     	; 0x1594 <nwkTxAckWaitTimerHandler+0x1c>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
    15c8:	11 23       	and	r17, r17
    15ca:	19 f0       	breq	.+6      	; 0x15d2 <nwkTxAckWaitTimerHandler+0x5a>
    SYS_TimerStart(timer);
    15cc:	c7 01       	movw	r24, r14
    15ce:	0e 94 1b 0e 	call	0x1c36	; 0x1c36 <SYS_TimerStart>
}
    15d2:	df 91       	pop	r29
    15d4:	cf 91       	pop	r28
    15d6:	1f 91       	pop	r17
    15d8:	0f 91       	pop	r16
    15da:	ff 90       	pop	r15
    15dc:	ef 90       	pop	r14
    15de:	08 95       	ret

000015e0 <nwkTxInit>:
/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
    15e0:	10 92 d5 08 	sts	0x08D5, r1
    15e4:	10 92 d4 08 	sts	0x08D4, r1

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    15e8:	e7 ec       	ldi	r30, 0xC7	; 199
    15ea:	f8 e0       	ldi	r31, 0x08	; 8
    15ec:	82 e3       	ldi	r24, 0x32	; 50
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	a0 e0       	ldi	r26, 0x00	; 0
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	86 83       	std	Z+6, r24	; 0x06
    15f6:	97 83       	std	Z+7, r25	; 0x07
    15f8:	a0 87       	std	Z+8, r26	; 0x08
    15fa:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    15fc:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    15fe:	8c eb       	ldi	r24, 0xBC	; 188
    1600:	9a e0       	ldi	r25, 0x0A	; 10
    1602:	94 87       	std	Z+12, r25	; 0x0c
    1604:	83 87       	std	Z+11, r24	; 0x0b

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    1606:	ea eb       	ldi	r30, 0xBA	; 186
    1608:	f8 e0       	ldi	r31, 0x08	; 8
    160a:	8a e0       	ldi	r24, 0x0A	; 10
    160c:	90 e0       	ldi	r25, 0x00	; 0
    160e:	a0 e0       	ldi	r26, 0x00	; 0
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	86 83       	std	Z+6, r24	; 0x06
    1614:	97 83       	std	Z+7, r25	; 0x07
    1616:	a0 87       	std	Z+8, r26	; 0x08
    1618:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    161a:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    161c:	8e e8       	ldi	r24, 0x8E	; 142
    161e:	9a e0       	ldi	r25, 0x0A	; 10
    1620:	94 87       	std	Z+12, r25	; 0x0c
    1622:	83 87       	std	Z+11, r24	; 0x0b
    1624:	08 95       	ret

00001626 <nwkTxAckReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    1626:	cf 93       	push	r28
    1628:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    162a:	fc 01       	movw	r30, r24
    162c:	c7 81       	ldd	r28, Z+7	; 0x07
    162e:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    1630:	81 85       	ldd	r24, Z+9	; 0x09
    1632:	83 30       	cpi	r24, 0x03	; 3
    1634:	c9 f4       	brne	.+50     	; 0x1668 <nwkTxAckReceived+0x42>
    1636:	80 e0       	ldi	r24, 0x00	; 0
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	10 c0       	rjmp	.+32     	; 0x165c <nwkTxAckReceived+0x36>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
    163c:	fc 01       	movw	r30, r24
    163e:	20 81       	ld	r18, Z
    1640:	26 31       	cpi	r18, 0x16	; 22
    1642:	61 f4       	brne	.+24     	; 0x165c <nwkTxAckReceived+0x36>
    1644:	34 85       	ldd	r19, Z+12	; 0x0c
    1646:	29 81       	ldd	r18, Y+1	; 0x01
    1648:	32 13       	cpse	r19, r18
    164a:	08 c0       	rjmp	.+16     	; 0x165c <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    164c:	27 e1       	ldi	r18, 0x17	; 23
    164e:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    1650:	2a 81       	ldd	r18, Y+2	; 0x02
    1652:	ea 57       	subi	r30, 0x7A	; 122
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	20 83       	st	Z, r18
      return true;
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	07 c0       	rjmp	.+14     	; 0x166a <nwkTxAckReceived+0x44>
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
    165c:	0e 94 23 0a 	call	0x1446	; 0x1446 <nwkFrameNext>
    1660:	00 97       	sbiw	r24, 0x00	; 0
    1662:	61 f7       	brne	.-40     	; 0x163c <nwkTxAckReceived+0x16>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	01 c0       	rjmp	.+2      	; 0x166a <nwkTxAckReceived+0x44>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
    1668:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
    166a:	df 91       	pop	r29
    166c:	cf 91       	pop	r28
    166e:	08 95       	ret

00001670 <phyTrxSetState>:

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
  TRX_STATE_REG = TRX_CMD_FORCE_TRX_OFF;
    1670:	93 e0       	ldi	r25, 0x03	; 3
    1672:	90 93 42 01 	sts	0x0142, r25
  while (TRX_STATUS_TRX_OFF != TRX_STATUS_REG_s.trxStatus);
    1676:	e1 e4       	ldi	r30, 0x41	; 65
    1678:	f1 e0       	ldi	r31, 0x01	; 1
    167a:	90 81       	ld	r25, Z
    167c:	9f 71       	andi	r25, 0x1F	; 31
    167e:	98 30       	cpi	r25, 0x08	; 8
    1680:	e1 f7       	brne	.-8      	; 0x167a <phyTrxSetState+0xa>

  TRX_STATE_REG = state;
    1682:	80 93 42 01 	sts	0x0142, r24
  while (state != TRX_STATUS_REG_s.trxStatus);
    1686:	e1 e4       	ldi	r30, 0x41	; 65
    1688:	f1 e0       	ldi	r31, 0x01	; 1
    168a:	90 81       	ld	r25, Z
    168c:	9f 71       	andi	r25, 0x1F	; 31
    168e:	98 13       	cpse	r25, r24
    1690:	fc cf       	rjmp	.-8      	; 0x168a <phyTrxSetState+0x1a>
}
    1692:	08 95       	ret

00001694 <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
    1694:	e9 e3       	ldi	r30, 0x39	; 57
    1696:	f1 e0       	ldi	r31, 0x01	; 1
    1698:	80 81       	ld	r24, Z
    169a:	81 60       	ori	r24, 0x01	; 1
    169c:	80 83       	st	Z, r24

  phyRxState = false;
    169e:	10 92 d7 08 	sts	0x08D7, r1
  phyBand = 0;
    16a2:	10 92 d6 08 	sts	0x08D6, r1
  phyState = PHY_STATE_IDLE;
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	80 93 d8 08 	sts	0x08D8, r24

  phyTrxSetState(TRX_CMD_TRX_OFF);
    16ac:	88 e0       	ldi	r24, 0x08	; 8
    16ae:	0e 94 38 0b 	call	0x1670	; 0x1670 <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
    16b2:	8b ee       	ldi	r24, 0xEB	; 235
    16b4:	80 93 56 01 	sts	0x0156, r24

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
    16b8:	ec e4       	ldi	r30, 0x4C	; 76
    16ba:	f1 e0       	ldi	r31, 0x01	; 1
    16bc:	80 81       	ld	r24, Z
    16be:	80 68       	ori	r24, 0x80	; 128
    16c0:	80 83       	st	Z, r24
    16c2:	08 95       	ret

000016c4 <sensor_handler>:

/*************************************************************************//**
  @brief sensor_handler function to decide the execution logic of a sensor according to its state, return 1 if it has some borrow time 
*****************************************************************************/
int sensor_handler( struct event *p )
{
    16c4:	0f 93       	push	r16
    16c6:	1f 93       	push	r17
    16c8:	cf 93       	push	r28
    16ca:	df 93       	push	r29
    16cc:	ec 01       	movw	r28, r24
	int retNum;
	int data = 0;
	BaseSensor *sp;
	/* sanity check */
	if( p == EV_NULL )
    16ce:	89 2b       	or	r24, r25
    16d0:	59 f4       	brne	.+22     	; 0x16e8 <sensor_handler+0x24>
	{
		#ifdef DEBUG
		printf("Null Event Error !!!");
    16d2:	82 ee       	ldi	r24, 0xE2	; 226
    16d4:	92 e0       	ldi	r25, 0x02	; 2
    16d6:	9f 93       	push	r25
    16d8:	8f 93       	push	r24
    16da:	0e 94 bb 1c 	call	0x3976	; 0x3976 <printf>
		#endif
		return 0;
    16de:	0f 90       	pop	r0
    16e0:	0f 90       	pop	r0
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	6a c0       	rjmp	.+212    	; 0x17bc <sensor_handler+0xf8>
	}
	sp = ( BaseSensor * )( p->sp );
    16e8:	0a 85       	ldd	r16, Y+10	; 0x0a
    16ea:	1b 85       	ldd	r17, Y+11	; 0x0b

	#ifdef DEBUG
	// printf("cur_state = %d\n", p->cur_state);
	#endif
	switch( p->cur_state )
    16ec:	9a 89       	ldd	r25, Y+18	; 0x12
    16ee:	91 30       	cpi	r25, 0x01	; 1
    16f0:	a9 f0       	breq	.+42     	; 0x171c <sensor_handler+0x58>
    16f2:	38 f0       	brcs	.+14     	; 0x1702 <sensor_handler+0x3e>
    16f4:	92 30       	cpi	r25, 0x02	; 2
    16f6:	09 f4       	brne	.+2      	; 0x16fa <sensor_handler+0x36>
    16f8:	48 c0       	rjmp	.+144    	; 0x178a <sensor_handler+0xc6>
    16fa:	94 30       	cpi	r25, 0x04	; 4
    16fc:	09 f4       	brne	.+2      	; 0x1700 <sensor_handler+0x3c>
    16fe:	54 c0       	rjmp	.+168    	; 0x17a8 <sensor_handler+0xe4>
    1700:	5b c0       	rjmp	.+182    	; 0x17b8 <sensor_handler+0xf4>
	{
		/* New : init first, if retNum is not 0 goto Oops state */
		case New :
		// the way to call init() is different than most other functions, since it is virtual function in BaseDevice .
		retNum = sp->abstract.device_vt->init( &(sp->abstract) );
    1702:	d8 01       	movw	r26, r16
    1704:	ed 91       	ld	r30, X+
    1706:	fc 91       	ld	r31, X
    1708:	02 80       	ldd	r0, Z+2	; 0x02
    170a:	f3 81       	ldd	r31, Z+3	; 0x03
    170c:	e0 2d       	mov	r30, r0
    170e:	c8 01       	movw	r24, r16
    1710:	09 95       	icall
		if(retNum != 0)
		{
			p->cur_state = Oops;
		}
		p->cur_state = Ready;
    1712:	81 e0       	ldi	r24, 0x01	; 1
    1714:	8a 8b       	std	Y+18, r24	; 0x12
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    1716:	80 e0       	ldi	r24, 0x00	; 0
    1718:	90 e0       	ldi	r25, 0x00	; 0
		if(retNum != 0)
		{
			p->cur_state = Oops;
		}
		p->cur_state = Ready;
		break;
    171a:	50 c0       	rjmp	.+160    	; 0x17bc <sensor_handler+0xf8>
		
		
		
		/* Ready : ready to activate collection request, if retNum is not 0 goto Oops state */
		case Ready :
		retNum = sp->vmt->Request(p->sp);
    171c:	d8 01       	movw	r26, r16
    171e:	1c 96       	adiw	r26, 0x0c	; 12
    1720:	ed 91       	ld	r30, X+
    1722:	fc 91       	ld	r31, X
    1724:	1d 97       	sbiw	r26, 0x0d	; 13
    1726:	04 80       	ldd	r0, Z+4	; 0x04
    1728:	f5 81       	ldd	r31, Z+5	; 0x05
    172a:	e0 2d       	mov	r30, r0
    172c:	c8 01       	movw	r24, r16
    172e:	09 95       	icall
		if ( retNum == -1 )
    1730:	8f 3f       	cpi	r24, 0xFF	; 255
    1732:	bf ef       	ldi	r27, 0xFF	; 255
    1734:	9b 07       	cpc	r25, r27
    1736:	29 f4       	brne	.+10     	; 0x1742 <sensor_handler+0x7e>
		{
			p->cur_state = Oops;
    1738:	84 e0       	ldi	r24, 0x04	; 4
    173a:	8a 8b       	std	Y+18, r24	; 0x12
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    173c:	80 e0       	ldi	r24, 0x00	; 0
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	3d c0       	rjmp	.+122    	; 0x17bc <sensor_handler+0xf8>
		retNum = sp->vmt->Request(p->sp);
		if ( retNum == -1 )
		{
			p->cur_state = Oops;
		}
		else if( retNum == 0 )
    1742:	00 97       	sbiw	r24, 0x00	; 0
    1744:	81 f4       	brne	.+32     	; 0x1766 <sensor_handler+0xa2>
		{
			p->cur_state = Ready;
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	8a 8b       	std	Y+18, r24	; 0x12
			data = sp->vmt->Collect(p->sp);
    174a:	d8 01       	movw	r26, r16
    174c:	1c 96       	adiw	r26, 0x0c	; 12
    174e:	ed 91       	ld	r30, X+
    1750:	fc 91       	ld	r31, X
    1752:	1d 97       	sbiw	r26, 0x0d	; 13
    1754:	06 80       	ldd	r0, Z+6	; 0x06
    1756:	f7 81       	ldd	r31, Z+7	; 0x07
    1758:	e0 2d       	mov	r30, r0
    175a:	8a 85       	ldd	r24, Y+10	; 0x0a
    175c:	9b 85       	ldd	r25, Y+11	; 0x0b
    175e:	09 95       	icall
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    1760:	80 e0       	ldi	r24, 0x00	; 0
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	2b c0       	rjmp	.+86     	; 0x17bc <sensor_handler+0xf8>
			// printf("data : %d\n", data);
			// #endif
		}
		else
		{
			p->cur_state = Running;
    1766:	22 e0       	ldi	r18, 0x02	; 2
    1768:	2a 8b       	std	Y+18, r18	; 0x12
			p->timeout = retNum;
    176a:	9d 83       	std	Y+5, r25	; 0x05
    176c:	8c 83       	std	Y+4, r24	; 0x04
			p->borrow_timeout = retNum;
    176e:	99 87       	std	Y+9, r25	; 0x09
    1770:	88 87       	std	Y+8, r24	; 0x08
			LL_POP( timeoutq );
    1772:	80 91 2f 0a 	lds	r24, 0x0A2F
    1776:	90 91 30 0a 	lds	r25, 0x0A30
    177a:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <ll_pop>
			insert_timeoutq_event( p );
    177e:	ce 01       	movw	r24, r28
    1780:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <insert_timeoutq_event>
			return 1;
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	19 c0       	rjmp	.+50     	; 0x17bc <sensor_handler+0xf8>
		
		
		/* Running : ready to pull data right away */
		case Running :
		//      data = p->sp->vmt->Collect();
		p->cur_state = Ready;
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	8a 8b       	std	Y+18, r24	; 0x12
		p->sp->vmt->Collect(p->sp);
    178e:	d8 01       	movw	r26, r16
    1790:	1c 96       	adiw	r26, 0x0c	; 12
    1792:	ed 91       	ld	r30, X+
    1794:	fc 91       	ld	r31, X
    1796:	1d 97       	sbiw	r26, 0x0d	; 13
    1798:	06 80       	ldd	r0, Z+6	; 0x06
    179a:	f7 81       	ldd	r31, Z+7	; 0x07
    179c:	e0 2d       	mov	r30, r0
    179e:	c8 01       	movw	r24, r16
    17a0:	09 95       	icall
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	90 e0       	ldi	r25, 0x00	; 0
		/* Running : ready to pull data right away */
		case Running :
		//      data = p->sp->vmt->Collect();
		p->cur_state = Ready;
		p->sp->vmt->Collect(p->sp);
		break;
    17a6:	0a c0       	rjmp	.+20     	; 0x17bc <sensor_handler+0xf8>
		
		/* Oops : when some errors occur */
		case Oops :
		/* TODO : ( we may want to do something in reset function and ) re-init by setting the state to new */
#ifdef DEBUG
		      printf("Something really wrong happens\n");
    17a8:	87 ef       	ldi	r24, 0xF7	; 247
    17aa:	92 e0       	ldi	r25, 0x02	; 2
    17ac:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <puts>
#endif
		p->cur_state = New;
    17b0:	1a 8a       	std	Y+18, r1	; 0x12
		break;
	}
	return 0;
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	90 e0       	ldi	r25, 0x00	; 0
		/* TODO : ( we may want to do something in reset function and ) re-init by setting the state to new */
#ifdef DEBUG
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <sensor_handler+0xf8>
	}
	return 0;
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	90 e0       	ldi	r25, 0x00	; 0
	// printf(" run :\n\t");
	// p->sp->vmt->MyPrint(p->sp);

}
    17bc:	df 91       	pop	r29
    17be:	cf 91       	pop	r28
    17c0:	1f 91       	pop	r17
    17c2:	0f 91       	pop	r16
    17c4:	08 95       	ret

000017c6 <device_handler>:
 */
/*************************************************************************//**
  @brief device_handler function to decide the execution logic of a non-sensor device according to its state.
*****************************************************************************/
int device_handler( struct event *p )
{
    17c6:	0f 93       	push	r16
    17c8:	1f 93       	push	r17
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	fc 01       	movw	r30, r24
	int retNum;
	BaseDevice * bdp = (BaseDevice *) ( p->load_p );
    17d0:	c4 85       	ldd	r28, Z+12	; 0x0c
    17d2:	d5 85       	ldd	r29, Z+13	; 0x0d
	LoadDataDevice *ldp = (LoadDataDevice*) ( p->load_p );
	DemoStorageDevice *ddp = (DemoStorageDevice*) ( p->store_p );
    17d4:	06 85       	ldd	r16, Z+14	; 0x0e
    17d6:	17 85       	ldd	r17, Z+15	; 0x0f

	/* sanity check */
	if( p == EV_NULL )
    17d8:	89 2b       	or	r24, r25
    17da:	29 f4       	brne	.+10     	; 0x17e6 <device_handler+0x20>
	{
		#ifdef DEBUG
		printf("Null Event Error !!!\n");
    17dc:	82 ee       	ldi	r24, 0xE2	; 226
    17de:	92 e0       	ldi	r25, 0x02	; 2
    17e0:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <puts>
		#endif
		return 0;
    17e4:	35 c0       	rjmp	.+106    	; 0x1850 <device_handler+0x8a>
	}
	
	switch( p->cur_state )
    17e6:	92 89       	ldd	r25, Z+18	; 0x12
    17e8:	99 23       	and	r25, r25
    17ea:	19 f0       	breq	.+6      	; 0x17f2 <device_handler+0x2c>
    17ec:	91 30       	cpi	r25, 0x01	; 1
    17ee:	21 f0       	breq	.+8      	; 0x17f8 <device_handler+0x32>
    17f0:	2f c0       	rjmp	.+94     	; 0x1850 <device_handler+0x8a>
	{
		/* New : init first, if retNum is not 0 goto Oops state */
		case New :
			p->cur_state = Ready;
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	82 8b       	std	Z+18, r24	; 0x12
			break;
    17f6:	2c c0       	rjmp	.+88     	; 0x1850 <device_handler+0x8a>
		case Ready :
			p->cur_state = Ready;
			if( bdp->device_vt->getType(bdp) == TYPE_DEVICE )
    17f8:	e8 81       	ld	r30, Y
    17fa:	f9 81       	ldd	r31, Y+1	; 0x01
    17fc:	06 80       	ldd	r0, Z+6	; 0x06
    17fe:	f7 81       	ldd	r31, Z+7	; 0x07
    1800:	e0 2d       	mov	r30, r0
    1802:	ce 01       	movw	r24, r28
    1804:	09 95       	icall
    1806:	05 97       	sbiw	r24, 0x05	; 5
    1808:	81 f4       	brne	.+32     	; 0x182a <device_handler+0x64>
			{
				printf("Load Device\n");
    180a:	86 e1       	ldi	r24, 0x16	; 22
    180c:	93 e0       	ldi	r25, 0x03	; 3
    180e:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <puts>
				ldp->vmt->Execute(ldp);
    1812:	ea 81       	ldd	r30, Y+2	; 0x02
    1814:	fb 81       	ldd	r31, Y+3	; 0x03
    1816:	02 80       	ldd	r0, Z+2	; 0x02
    1818:	f3 81       	ldd	r31, Z+3	; 0x03
    181a:	e0 2d       	mov	r30, r0
    181c:	ce 01       	movw	r24, r28
    181e:	09 95       	icall
				printf("Load Device Finish\n");
    1820:	82 e2       	ldi	r24, 0x22	; 34
    1822:	93 e0       	ldi	r25, 0x03	; 3
    1824:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <puts>
    1828:	13 c0       	rjmp	.+38     	; 0x1850 <device_handler+0x8a>
			}	
			else if( bdp->device_vt->getType(bdp) == TYPE_STORAGE_DEVICE )
    182a:	e8 81       	ld	r30, Y
    182c:	f9 81       	ldd	r31, Y+1	; 0x01
    182e:	06 80       	ldd	r0, Z+6	; 0x06
    1830:	f7 81       	ldd	r31, Z+7	; 0x07
    1832:	e0 2d       	mov	r30, r0
    1834:	ce 01       	movw	r24, r28
    1836:	09 95       	icall
    1838:	04 97       	sbiw	r24, 0x04	; 4
    183a:	51 f4       	brne	.+20     	; 0x1850 <device_handler+0x8a>
			{
				ddp->vmt->Execute(ddp);
    183c:	d8 01       	movw	r26, r16
    183e:	12 96       	adiw	r26, 0x02	; 2
    1840:	ed 91       	ld	r30, X+
    1842:	fc 91       	ld	r31, X
    1844:	13 97       	sbiw	r26, 0x03	; 3
    1846:	02 80       	ldd	r0, Z+2	; 0x02
    1848:	f3 81       	ldd	r31, Z+3	; 0x03
    184a:	e0 2d       	mov	r30, r0
    184c:	c8 01       	movw	r24, r16
    184e:	09 95       	icall
			break;
		default :
			break;
	}
	return 0;
}
    1850:	80 e0       	ldi	r24, 0x00	; 0
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	1f 91       	pop	r17
    185a:	0f 91       	pop	r16
    185c:	08 95       	ret

0000185e <init_timeoutq>:

/*************************************************************************//**
  @brief Init function of scheduler, which initialize all events and put them into freelist
*****************************************************************************/
void init_timeoutq()
{
    185e:	0f 93       	push	r16
    1860:	1f 93       	push	r17
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
	int i;

	timeoutq = (struct event *)&TQ;
    1866:	eb e2       	ldi	r30, 0x2B	; 43
    1868:	fa e0       	ldi	r31, 0x0A	; 10
    186a:	f0 93 30 0a 	sts	0x0A30, r31
    186e:	e0 93 2f 0a 	sts	0x0A2F, r30
	LL_INIT(timeoutq);
    1872:	f3 83       	std	Z+3, r31	; 0x03
    1874:	e2 83       	std	Z+2, r30	; 0x02
    1876:	f1 83       	std	Z+1, r31	; 0x01
    1878:	e0 83       	st	Z, r30
	freelist = (struct event *)&FL;
    187a:	e3 e3       	ldi	r30, 0x33	; 51
    187c:	fa e0       	ldi	r31, 0x0A	; 10
    187e:	f0 93 38 0a 	sts	0x0A38, r31
    1882:	e0 93 37 0a 	sts	0x0A37, r30
	LL_INIT(freelist);
    1886:	f3 83       	std	Z+3, r31	; 0x03
    1888:	e2 83       	std	Z+2, r30	; 0x02
    188a:	f1 83       	std	Z+1, r31	; 0x01
    188c:	e0 83       	st	Z, r30
    188e:	cb ed       	ldi	r28, 0xDB	; 219
    1890:	d8 e0       	ldi	r29, 0x08	; 8
    1892:	0b e2       	ldi	r16, 0x2B	; 43
    1894:	1a e0       	ldi	r17, 0x0A	; 10

	for (i=0; i<MAX_EVENTS; i++) {
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
    1896:	be 01       	movw	r22, r28
    1898:	80 91 37 0a 	lds	r24, 0x0A37
    189c:	90 91 38 0a 	lds	r25, 0x0A38
    18a0:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <ll_r_insert>
    18a4:	65 96       	adiw	r28, 0x15	; 21
	timeoutq = (struct event *)&TQ;
	LL_INIT(timeoutq);
	freelist = (struct event *)&FL;
	LL_INIT(freelist);

	for (i=0; i<MAX_EVENTS; i++) {
    18a6:	c0 17       	cp	r28, r16
    18a8:	d1 07       	cpc	r29, r17
    18aa:	a9 f7       	brne	.-22     	; 0x1896 <init_timeoutq+0x38>
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
	}

	return;
}
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	1f 91       	pop	r17
    18b2:	0f 91       	pop	r16
    18b4:	08 95       	ret

000018b6 <get_next_interval>:
*****************************************************************************/
int get_next_interval()
{

	int wait_time = MAX_SLEEP_INTERVAL;
	struct event * ev = ( struct event * ) LL_TOP( timeoutq );
    18b6:	80 91 2f 0a 	lds	r24, 0x0A2F
    18ba:	90 91 30 0a 	lds	r25, 0x0A30
    18be:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <ll_first>
    18c2:	fc 01       	movw	r30, r24

	/* sanity check */
    /* no event in queue */
    /* TODO : to optimize the sleep time or let the CPU sleep or set up some other interrupts */
	if( EV_NULL == ev )
    18c4:	89 2b       	or	r24, r25
    18c6:	59 f4       	brne	.+22     	; 0x18de <get_next_interval+0x28>
	{
#ifdef DEBUG
		printf("we may get some memory leakage issue, or something really bad occurs\n");
    18c8:	85 e3       	ldi	r24, 0x35	; 53
    18ca:	93 e0       	ldi	r25, 0x03	; 3
    18cc:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <puts>
		printf("so we are going to take some really sleep, since no event in scheduler\n");
    18d0:	8a e7       	ldi	r24, 0x7A	; 122
    18d2:	93 e0       	ldi	r25, 0x03	; 3
    18d4:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <puts>
#endif
	    return wait_time;
    18d8:	80 e4       	ldi	r24, 0x40	; 64
    18da:	9f e1       	ldi	r25, 0x1F	; 31
    18dc:	08 95       	ret
	}
	
	/* if the next event is nearer */
	if( wait_time > ev->timeout )
    18de:	84 81       	ldd	r24, Z+4	; 0x04
    18e0:	95 81       	ldd	r25, Z+5	; 0x05
    18e2:	80 34       	cpi	r24, 0x40	; 64
    18e4:	2f e1       	ldi	r18, 0x1F	; 31
    18e6:	92 07       	cpc	r25, r18
    18e8:	3c f0       	brlt	.+14     	; 0x18f8 <get_next_interval+0x42>
		wait_time = ev->timeout;
	}
	/* if the next event time is longer, we need to wait it time by time, since currently, the longest waiting time support is 8s */
	else
	{
		ev->timeout = ev->timeout - wait_time;
    18ea:	9c 01       	movw	r18, r24
    18ec:	20 54       	subi	r18, 0x40	; 64
    18ee:	3f 41       	sbci	r19, 0x1F	; 31
    18f0:	35 83       	std	Z+5, r19	; 0x05
    18f2:	24 83       	std	Z+4, r18	; 0x04
  @brief Return the the time ( ms ) of the next event
*****************************************************************************/
int get_next_interval()
{

	int wait_time = MAX_SLEEP_INTERVAL;
    18f4:	80 e4       	ldi	r24, 0x40	; 64
    18f6:	9f e1       	ldi	r25, 0x1F	; 31
	else
	{
		ev->timeout = ev->timeout - wait_time;
	}
	return wait_time;
}
    18f8:	08 95       	ret

000018fa <insert_timeoutq_event>:

/*************************************************************************//**
  @brief Insert a new event into the scheduler according to timeout order
*****************************************************************************/
void insert_timeoutq_event( struct event * ep)
{
    18fa:	cf 93       	push	r28
    18fc:	df 93       	push	r29
    18fe:	dc 01       	movw	r26, r24
	// Try to insert it according to timeout and timeoutq
	struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
    1900:	c0 91 2f 0a 	lds	r28, 0x0A2F
    1904:	d0 91 30 0a 	lds	r29, 0x0A30
    1908:	ea 81       	ldd	r30, Y+2	; 0x02
    190a:	fb 81       	ldd	r31, Y+3	; 0x03
    190c:	ce 17       	cp	r28, r30
    190e:	df 07       	cpc	r29, r31
    1910:	09 f1       	breq	.+66     	; 0x1954 <insert_timeoutq_event+0x5a>
	{
		if( it != EV_NULL )
    1912:	30 97       	sbiw	r30, 0x00	; 0
    1914:	c9 f0       	breq	.+50     	; 0x1948 <insert_timeoutq_event+0x4e>
		{
			if( ( it->timeout ) > ( ep->timeout ) )
    1916:	44 81       	ldd	r20, Z+4	; 0x04
    1918:	55 81       	ldd	r21, Z+5	; 0x05
    191a:	14 96       	adiw	r26, 0x04	; 4
    191c:	2d 91       	ld	r18, X+
    191e:	3c 91       	ld	r19, X
    1920:	15 97       	sbiw	r26, 0x05	; 5
    1922:	24 17       	cp	r18, r20
    1924:	35 07       	cpc	r19, r21
    1926:	54 f4       	brge	.+20     	; 0x193c <insert_timeoutq_event+0x42>
			{
				it->timeout -= ep->timeout;
    1928:	42 1b       	sub	r20, r18
    192a:	53 0b       	sbc	r21, r19
    192c:	55 83       	std	Z+5, r21	; 0x05
    192e:	44 83       	std	Z+4, r20	; 0x04
				LL_L_INSERT( it, ep );
    1930:	bd 01       	movw	r22, r26
    1932:	80 81       	ld	r24, Z
    1934:	91 81       	ldd	r25, Z+1	; 0x01
    1936:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <ll_r_insert>
    193a:	15 c0       	rjmp	.+42     	; 0x1966 <insert_timeoutq_event+0x6c>
				// printf("left insert \n");
				break;
			}
			else
			{
				ep->timeout -= it->timeout;
    193c:	24 1b       	sub	r18, r20
    193e:	35 0b       	sbc	r19, r21
    1940:	15 96       	adiw	r26, 0x05	; 5
    1942:	3c 93       	st	X, r19
    1944:	2e 93       	st	-X, r18
    1946:	14 97       	sbiw	r26, 0x04	; 4
	// Try to insert it according to timeout and timeoutq
	struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
    1948:	02 80       	ldd	r0, Z+2	; 0x02
    194a:	f3 81       	ldd	r31, Z+3	; 0x03
    194c:	e0 2d       	mov	r30, r0
    194e:	ce 17       	cp	r28, r30
    1950:	df 07       	cpc	r29, r31
    1952:	f9 f6       	brne	.-66     	; 0x1912 <insert_timeoutq_event+0x18>
	}
	
	// If not insert it left to the header
	if( is_pushed == 0 )
	{
		LL_APPEND(timeoutq, ep);
    1954:	e0 91 2f 0a 	lds	r30, 0x0A2F
    1958:	f0 91 30 0a 	lds	r31, 0x0A30
    195c:	bd 01       	movw	r22, r26
    195e:	80 81       	ld	r24, Z
    1960:	91 81       	ldd	r25, Z+1	; 0x01
    1962:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <ll_r_insert>

	#ifdef DEBUG
	// dump_timeoutq();
	#endif

}
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	08 95       	ret

0000196c <load_new_sensor>:

/*************************************************************************//**
  @brief Load a brand new sensor activity into the scheduler's timeoutQ
*****************************************************************************/
int load_new_sensor( int timeout, int repeat, BaseSensor *device_ptr, int otherinfo )
{
    196c:	cf 92       	push	r12
    196e:	df 92       	push	r13
    1970:	ef 92       	push	r14
    1972:	ff 92       	push	r15
    1974:	0f 93       	push	r16
    1976:	1f 93       	push	r17
    1978:	cf 93       	push	r28
    197a:	df 93       	push	r29
    197c:	6c 01       	movw	r12, r24
    197e:	7b 01       	movw	r14, r22
    1980:	8a 01       	movw	r16, r20
    1982:	e9 01       	movw	r28, r18

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    1984:	80 91 37 0a 	lds	r24, 0x0A37
    1988:	90 91 38 0a 	lds	r25, 0x0A38
    198c:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <ll_pop>
    1990:	fc 01       	movw	r30, r24
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
    1992:	89 2b       	or	r24, r25
    1994:	b1 f0       	breq	.+44     	; 0x19c2 <load_new_sensor+0x56>
        return -1;
    ep->timeout = timeout;
    1996:	d5 82       	std	Z+5, r13	; 0x05
    1998:	c4 82       	std	Z+4, r12	; 0x04
    ep->repeat_interval = repeat;
    199a:	f7 82       	std	Z+7, r15	; 0x07
    199c:	e6 82       	std	Z+6, r14	; 0x06
	ep->borrow_timeout = 0;
    199e:	11 86       	std	Z+9, r1	; 0x09
    19a0:	10 86       	std	Z+8, r1	; 0x08
    ep->sp = device_ptr;
    19a2:	13 87       	std	Z+11, r17	; 0x0b
    19a4:	02 87       	std	Z+10, r16	; 0x0a
    ep->info = otherinfo;
    19a6:	d1 8b       	std	Z+17, r29	; 0x11
    19a8:	c0 8b       	std	Z+16, r28	; 0x10
    ep->cur_state = Ready;
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	82 8b       	std	Z+18, r24	; 0x12
    ep->run = sensor_handler;
    19ae:	82 e6       	ldi	r24, 0x62	; 98
    19b0:	9b e0       	ldi	r25, 0x0B	; 11
    19b2:	94 8b       	std	Z+20, r25	; 0x14
    19b4:	83 8b       	std	Z+19, r24	; 0x13
    insert_timeoutq_event( ep );
    19b6:	cf 01       	movw	r24, r30
    19b8:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <insert_timeoutq_event>
    return 0;
    19bc:	80 e0       	ldi	r24, 0x00	; 0
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <load_new_sensor+0x5a>

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
        return -1;
    19c2:	8f ef       	ldi	r24, 0xFF	; 255
    19c4:	9f ef       	ldi	r25, 0xFF	; 255
    ep->info = otherinfo;
    ep->cur_state = Ready;
    ep->run = sensor_handler;
    insert_timeoutq_event( ep );
    return 0;
}
    19c6:	df 91       	pop	r29
    19c8:	cf 91       	pop	r28
    19ca:	1f 91       	pop	r17
    19cc:	0f 91       	pop	r16
    19ce:	ff 90       	pop	r15
    19d0:	ef 90       	pop	r14
    19d2:	df 90       	pop	r13
    19d4:	cf 90       	pop	r12
    19d6:	08 95       	ret

000019d8 <load_new_device>:

/*************************************************************************//**
  @brief Load a brand new device activity into the scheduler's timeoutQ
*****************************************************************************/
int load_new_device( int timeout, int repeat, BaseDevice *device_ptr, int otherinfo )
{
    19d8:	cf 92       	push	r12
    19da:	df 92       	push	r13
    19dc:	ef 92       	push	r14
    19de:	ff 92       	push	r15
    19e0:	0f 93       	push	r16
    19e2:	1f 93       	push	r17
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	6c 01       	movw	r12, r24
    19ea:	7b 01       	movw	r14, r22
    19ec:	ea 01       	movw	r28, r20
    19ee:	89 01       	movw	r16, r18

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    19f0:	80 91 37 0a 	lds	r24, 0x0A37
    19f4:	90 91 38 0a 	lds	r25, 0x0A38
    19f8:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <ll_pop>
    19fc:	fc 01       	movw	r30, r24
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
    19fe:	89 2b       	or	r24, r25
    1a00:	c1 f0       	breq	.+48     	; 0x1a32 <load_new_device+0x5a>
        return -1;
    ep->timeout = timeout;
    1a02:	d5 82       	std	Z+5, r13	; 0x05
    1a04:	c4 82       	std	Z+4, r12	; 0x04
    ep->repeat_interval = repeat;
    1a06:	f7 82       	std	Z+7, r15	; 0x07
    1a08:	e6 82       	std	Z+6, r14	; 0x06
	ep->borrow_timeout = 0;
    1a0a:	11 86       	std	Z+9, r1	; 0x09
    1a0c:	10 86       	std	Z+8, r1	; 0x08
    ep->load_p = device_ptr;
    1a0e:	d5 87       	std	Z+13, r29	; 0x0d
    1a10:	c4 87       	std	Z+12, r28	; 0x0c
	ep->store_p = device_ptr;
    1a12:	d7 87       	std	Z+15, r29	; 0x0f
    1a14:	c6 87       	std	Z+14, r28	; 0x0e
    ep->info = otherinfo;
    1a16:	11 8b       	std	Z+17, r17	; 0x11
    1a18:	00 8b       	std	Z+16, r16	; 0x10
    ep->cur_state = Ready;
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	82 8b       	std	Z+18, r24	; 0x12
    ep->run = device_handler;
    1a1e:	83 ee       	ldi	r24, 0xE3	; 227
    1a20:	9b e0       	ldi	r25, 0x0B	; 11
    1a22:	94 8b       	std	Z+20, r25	; 0x14
    1a24:	83 8b       	std	Z+19, r24	; 0x13
    insert_timeoutq_event( ep );
    1a26:	cf 01       	movw	r24, r30
    1a28:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <insert_timeoutq_event>
    return 0;
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	02 c0       	rjmp	.+4      	; 0x1a36 <load_new_device+0x5e>

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
        return -1;
    1a32:	8f ef       	ldi	r24, 0xFF	; 255
    1a34:	9f ef       	ldi	r25, 0xFF	; 255
    ep->info = otherinfo;
    ep->cur_state = Ready;
    ep->run = device_handler;
    insert_timeoutq_event( ep );
    return 0;
}
    1a36:	df 91       	pop	r29
    1a38:	cf 91       	pop	r28
    1a3a:	1f 91       	pop	r17
    1a3c:	0f 91       	pop	r16
    1a3e:	ff 90       	pop	r15
    1a40:	ef 90       	pop	r14
    1a42:	df 90       	pop	r13
    1a44:	cf 90       	pop	r12
    1a46:	08 95       	ret

00001a48 <handle_timeoutq_event>:

/*************************************************************************//**
  @brief Handle the next event in timeoutQ: execute the event's handler function according to the device type, re-insert it according to the period, and set a timer of next event.
*****************************************************************************/
int handle_timeoutq_event( )
{
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
	/* assume we get a valid one */
	struct event * ev = (struct event * )LL_TOP( timeoutq );
    1a4c:	80 91 2f 0a 	lds	r24, 0x0A2F
    1a50:	90 91 30 0a 	lds	r25, 0x0A30
    1a54:	0e 94 44 0e 	call	0x1c88	; 0x1c88 <ll_first>
    1a58:	ec 01       	movw	r28, r24
	if( EV_NULL == ev )
    1a5a:	89 2b       	or	r24, r25
    1a5c:	39 f4       	brne	.+14     	; 0x1a6c <handle_timeoutq_event+0x24>
	{
		printf("err\n");
    1a5e:	81 ec       	ldi	r24, 0xC1	; 193
    1a60:	93 e0       	ldi	r25, 0x03	; 3
    1a62:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <puts>
        return -1;
    1a66:	8f ef       	ldi	r24, 0xFF	; 255
    1a68:	9f ef       	ldi	r25, 0xFF	; 255
    1a6a:	56 c0       	rjmp	.+172    	; 0x1b18 <handle_timeoutq_event+0xd0>
	}
    
    /* sanity check */
    if( ev->sp == NULL && ev->load_p == NULL && ev->store_p == NULL)
    1a6c:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a6e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a70:	89 2b       	or	r24, r25
    1a72:	49 f4       	brne	.+18     	; 0x1a86 <handle_timeoutq_event+0x3e>
    1a74:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a76:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a78:	89 2b       	or	r24, r25
    1a7a:	29 f4       	brne	.+10     	; 0x1a86 <handle_timeoutq_event+0x3e>
    1a7c:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a7e:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a80:	89 2b       	or	r24, r25
    1a82:	09 f4       	brne	.+2      	; 0x1a86 <handle_timeoutq_event+0x3e>
    1a84:	47 c0       	rjmp	.+142    	; 0x1b14 <handle_timeoutq_event+0xcc>
        return -1;

	/* retNum may need to be designed in other ways */
    int retNum = ev->run( ev );
    1a86:	eb 89       	ldd	r30, Y+19	; 0x13
    1a88:	fc 89       	ldd	r31, Y+20	; 0x14
    1a8a:	ce 01       	movw	r24, r28
    1a8c:	09 95       	icall
	/* 
	 * return 1 if it has to with some borrow time( have a request-time!=0 case ) 
	 * which means the event has already entered the scheduler, 
	 * and won't need to do anything else
	 */
	if( retNum == 1 )
    1a8e:	01 97       	sbiw	r24, 0x01	; 1
    1a90:	69 f4       	brne	.+26     	; 0x1aac <handle_timeoutq_event+0x64>
	{
		/* judge if the next top in queue has a timeout <= 0, which we may want to handle it right now */
		if( get_next_interval() == 0 )
    1a92:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <get_next_interval>
    1a96:	89 2b       	or	r24, r25
    1a98:	11 f4       	brne	.+4      	; 0x1a9e <handle_timeoutq_event+0x56>
			handle_timeoutq_event();
    1a9a:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <handle_timeoutq_event>
			
		set_timer(get_next_interval());
    1a9e:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <get_next_interval>
    1aa2:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <set_timer>
		return 0;
    1aa6:	80 e0       	ldi	r24, 0x00	; 0
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	36 c0       	rjmp	.+108    	; 0x1b18 <handle_timeoutq_event+0xd0>
    /*
	 * return 0 means we just fired a case, 
	 * and may need to judge it over the repeat time to re-insert into the scheduler,
	 * since we definitely want to collect data periodically
	 */
    LL_POP( timeoutq );
    1aac:	80 91 2f 0a 	lds	r24, 0x0A2F
    1ab0:	90 91 30 0a 	lds	r25, 0x0A30
    1ab4:	0e 94 83 0e 	call	0x1d06	; 0x1d06 <ll_pop>
    if( ev->repeat_interval != 0 )
    1ab8:	8e 81       	ldd	r24, Y+6	; 0x06
    1aba:	9f 81       	ldd	r25, Y+7	; 0x07
    1abc:	00 97       	sbiw	r24, 0x00	; 0
    1abe:	b1 f0       	breq	.+44     	; 0x1aec <handle_timeoutq_event+0xa4>
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
    1ac0:	28 85       	ldd	r18, Y+8	; 0x08
    1ac2:	39 85       	ldd	r19, Y+9	; 0x09
    1ac4:	ac 01       	movw	r20, r24
    1ac6:	42 1b       	sub	r20, r18
    1ac8:	53 0b       	sbc	r21, r19
    1aca:	9a 01       	movw	r18, r20
    1acc:	5d 83       	std	Y+5, r21	; 0x05
    1ace:	4c 83       	std	Y+4, r20	; 0x04
		while( ev->timeout < 0 )
    1ad0:	55 23       	and	r21, r21
    1ad2:	34 f4       	brge	.+12     	; 0x1ae0 <handle_timeoutq_event+0x98>
		{
			ev->timeout += ev->repeat_interval;
    1ad4:	28 0f       	add	r18, r24
    1ad6:	39 1f       	adc	r19, r25
	 */
    LL_POP( timeoutq );
    if( ev->repeat_interval != 0 )
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
		while( ev->timeout < 0 )
    1ad8:	33 23       	and	r19, r19
    1ada:	e4 f3       	brlt	.-8      	; 0x1ad4 <handle_timeoutq_event+0x8c>
    1adc:	3d 83       	std	Y+5, r19	; 0x05
    1ade:	2c 83       	std	Y+4, r18	; 0x04
		{
			ev->timeout += ev->repeat_interval;
		}
		ev->borrow_timeout = 0;
    1ae0:	19 86       	std	Y+9, r1	; 0x09
    1ae2:	18 86       	std	Y+8, r1	; 0x08
        insert_timeoutq_event( ev );
    1ae4:	ce 01       	movw	r24, r28
    1ae6:	0e 94 7d 0c 	call	0x18fa	; 0x18fa <insert_timeoutq_event>
    1aea:	07 c0       	rjmp	.+14     	; 0x1afa <handle_timeoutq_event+0xb2>
    }
    else
    {
        LL_PUSH( freelist, ev );
    1aec:	be 01       	movw	r22, r28
    1aee:	80 91 37 0a 	lds	r24, 0x0A37
    1af2:	90 91 38 0a 	lds	r25, 0x0A38
    1af6:	0e 94 4d 0e 	call	0x1c9a	; 0x1c9a <ll_r_insert>
    }

	
	/* judge if the next top in queue has a timeout <= 0, which we may want to handle it right now */
	if( get_next_interval() == 0 )
    1afa:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <get_next_interval>
    1afe:	89 2b       	or	r24, r25
    1b00:	11 f4       	brne	.+4      	; 0x1b06 <handle_timeoutq_event+0xbe>
		handle_timeoutq_event();
    1b02:	0e 94 24 0d 	call	0x1a48	; 0x1a48 <handle_timeoutq_event>
		
	set_timer(get_next_interval());
    1b06:	0e 94 5b 0c 	call	0x18b6	; 0x18b6 <get_next_interval>
    1b0a:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <set_timer>
    return 0;
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <handle_timeoutq_event+0xd0>
        return -1;
	}
    
    /* sanity check */
    if( ev->sp == NULL && ev->load_p == NULL && ev->store_p == NULL)
        return -1;
    1b14:	8f ef       	ldi	r24, 0xFF	; 255
    1b16:	9f ef       	ldi	r25, 0xFF	; 255
	if( get_next_interval() == 0 )
		handle_timeoutq_event();
		
	set_timer(get_next_interval());
    return 0;
}
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	08 95       	ret

00001b1e <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    1b1e:	0e 94 b5 09 	call	0x136a	; 0x136a <HAL_Init>
  SYS_TimerInit();
    1b22:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <SYS_TimerInit>
  PHY_Init();
    1b26:	0e 94 4a 0b 	call	0x1694	; 0x1694 <PHY_Init>
  NWK_Init();
    1b2a:	0e 94 f0 09 	call	0x13e0	; 0x13e0 <NWK_Init>
    1b2e:	08 95       	ret

00001b30 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    1b30:	0f 93       	push	r16
    1b32:	1f 93       	push	r17
    1b34:	cf 93       	push	r28
    1b36:	df 93       	push	r29
    1b38:	ec 01       	movw	r28, r24
  if (timers)
    1b3a:	80 91 d9 08 	lds	r24, 0x08D9
    1b3e:	90 91 da 08 	lds	r25, 0x08DA
    1b42:	00 97       	sbiw	r24, 0x00	; 0
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <placeTimer+0x18>
    1b46:	45 c0       	rjmp	.+138    	; 0x1bd2 <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    1b48:	4e 81       	ldd	r20, Y+6	; 0x06
    1b4a:	5f 81       	ldd	r21, Y+7	; 0x07
    1b4c:	68 85       	ldd	r22, Y+8	; 0x08
    1b4e:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    1b50:	fc 01       	movw	r30, r24
    1b52:	02 81       	ldd	r16, Z+2	; 0x02
    1b54:	13 81       	ldd	r17, Z+3	; 0x03
    1b56:	24 81       	ldd	r18, Z+4	; 0x04
    1b58:	35 81       	ldd	r19, Z+5	; 0x05
    1b5a:	40 17       	cp	r20, r16
    1b5c:	51 07       	cpc	r21, r17
    1b5e:	62 07       	cpc	r22, r18
    1b60:	73 07       	cpc	r23, r19
    1b62:	60 f0       	brcs	.+24     	; 0x1b7c <placeTimer+0x4c>
    1b64:	dc 01       	movw	r26, r24
    1b66:	17 c0       	rjmp	.+46     	; 0x1b96 <placeTimer+0x66>
    1b68:	02 81       	ldd	r16, Z+2	; 0x02
    1b6a:	13 81       	ldd	r17, Z+3	; 0x03
    1b6c:	24 81       	ldd	r18, Z+4	; 0x04
    1b6e:	35 81       	ldd	r19, Z+5	; 0x05
    1b70:	40 17       	cp	r20, r16
    1b72:	51 07       	cpc	r21, r17
    1b74:	62 07       	cpc	r22, r18
    1b76:	73 07       	cpc	r23, r19
    1b78:	68 f4       	brcc	.+26     	; 0x1b94 <placeTimer+0x64>
    1b7a:	03 c0       	rjmp	.+6      	; 0x1b82 <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1b7c:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    1b7e:	a0 e0       	ldi	r26, 0x00	; 0
    1b80:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    1b82:	04 1b       	sub	r16, r20
    1b84:	15 0b       	sbc	r17, r21
    1b86:	26 0b       	sbc	r18, r22
    1b88:	37 0b       	sbc	r19, r23
    1b8a:	02 83       	std	Z+2, r16	; 0x02
    1b8c:	13 83       	std	Z+3, r17	; 0x03
    1b8e:	24 83       	std	Z+4, r18	; 0x04
    1b90:	35 83       	std	Z+5, r19	; 0x05
         break;
    1b92:	0a c0       	rjmp	.+20     	; 0x1ba8 <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1b94:	df 01       	movw	r26, r30
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    1b96:	40 1b       	sub	r20, r16
    1b98:	51 0b       	sbc	r21, r17
    1b9a:	62 0b       	sbc	r22, r18
    1b9c:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1b9e:	ed 91       	ld	r30, X+
    1ba0:	fc 91       	ld	r31, X
    1ba2:	11 97       	sbiw	r26, 0x01	; 1
    1ba4:	30 97       	sbiw	r30, 0x00	; 0
    1ba6:	01 f7       	brne	.-64     	; 0x1b68 <placeTimer+0x38>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    1ba8:	4a 83       	std	Y+2, r20	; 0x02
    1baa:	5b 83       	std	Y+3, r21	; 0x03
    1bac:	6c 83       	std	Y+4, r22	; 0x04
    1bae:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    1bb0:	10 97       	sbiw	r26, 0x00	; 0
    1bb2:	41 f0       	breq	.+16     	; 0x1bc4 <placeTimer+0x94>
    {
      timer->next = prev->next;
    1bb4:	8d 91       	ld	r24, X+
    1bb6:	9c 91       	ld	r25, X
    1bb8:	11 97       	sbiw	r26, 0x01	; 1
    1bba:	99 83       	std	Y+1, r25	; 0x01
    1bbc:	88 83       	st	Y, r24
      prev->next = timer;
    1bbe:	cd 93       	st	X+, r28
    1bc0:	dc 93       	st	X, r29
    1bc2:	15 c0       	rjmp	.+42     	; 0x1bee <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    1bc4:	99 83       	std	Y+1, r25	; 0x01
    1bc6:	88 83       	st	Y, r24
      timers = timer;
    1bc8:	d0 93 da 08 	sts	0x08DA, r29
    1bcc:	c0 93 d9 08 	sts	0x08D9, r28
    1bd0:	0e c0       	rjmp	.+28     	; 0x1bee <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    1bd2:	19 82       	std	Y+1, r1	; 0x01
    1bd4:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    1bd6:	8e 81       	ldd	r24, Y+6	; 0x06
    1bd8:	9f 81       	ldd	r25, Y+7	; 0x07
    1bda:	a8 85       	ldd	r26, Y+8	; 0x08
    1bdc:	b9 85       	ldd	r27, Y+9	; 0x09
    1bde:	8a 83       	std	Y+2, r24	; 0x02
    1be0:	9b 83       	std	Y+3, r25	; 0x03
    1be2:	ac 83       	std	Y+4, r26	; 0x04
    1be4:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    1be6:	d0 93 da 08 	sts	0x08DA, r29
    1bea:	c0 93 d9 08 	sts	0x08D9, r28
  }
}
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	1f 91       	pop	r17
    1bf4:	0f 91       	pop	r16
    1bf6:	08 95       	ret

00001bf8 <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    1bf8:	10 92 da 08 	sts	0x08DA, r1
    1bfc:	10 92 d9 08 	sts	0x08D9, r1
    1c00:	08 95       	ret

00001c02 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1c02:	e0 91 d9 08 	lds	r30, 0x08D9
    1c06:	f0 91 da 08 	lds	r31, 0x08DA
    1c0a:	30 97       	sbiw	r30, 0x00	; 0
    1c0c:	71 f0       	breq	.+28     	; 0x1c2a <SYS_TimerStarted+0x28>
    if (t == timer)
    1c0e:	e8 17       	cp	r30, r24
    1c10:	f9 07       	cpc	r31, r25
    1c12:	21 f4       	brne	.+8      	; 0x1c1c <SYS_TimerStarted+0x1a>
    1c14:	0c c0       	rjmp	.+24     	; 0x1c2e <SYS_TimerStarted+0x2c>
    1c16:	8e 17       	cp	r24, r30
    1c18:	9f 07       	cpc	r25, r31
    1c1a:	59 f0       	breq	.+22     	; 0x1c32 <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1c1c:	01 90       	ld	r0, Z+
    1c1e:	f0 81       	ld	r31, Z
    1c20:	e0 2d       	mov	r30, r0
    1c22:	30 97       	sbiw	r30, 0x00	; 0
    1c24:	c1 f7       	brne	.-16     	; 0x1c16 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    1c26:	80 e0       	ldi	r24, 0x00	; 0
    1c28:	08 95       	ret
    1c2a:	80 e0       	ldi	r24, 0x00	; 0
    1c2c:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    1c2e:	81 e0       	ldi	r24, 0x01	; 1
    1c30:	08 95       	ret
    1c32:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    1c34:	08 95       	ret

00001c36 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    1c3c:	0e 94 01 0e 	call	0x1c02	; 0x1c02 <SYS_TimerStarted>
    1c40:	81 11       	cpse	r24, r1
    1c42:	03 c0       	rjmp	.+6      	; 0x1c4a <SYS_TimerStart+0x14>
    placeTimer(timer);
    1c44:	ce 01       	movw	r24, r28
    1c46:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <placeTimer>
}
    1c4a:	df 91       	pop	r29
    1c4c:	cf 91       	pop	r28
    1c4e:	08 95       	ret

00001c50 <check_crc>:
/*************************************************************************//**
  @brief CRC check
  @return remainder
*****************************************************************************/
unsigned int check_crc(uint16_t message_from_sensor, uint8_t check_value_from_sensor) {
	uint32_t remainder = (uint32_t)message_from_sensor << 8; //Pad with 8 bits because we have to add in the check value
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	30 e0       	ldi	r19, 0x00	; 0
    1c54:	38 2f       	mov	r19, r24
	remainder |= check_value_from_sensor; //Add on the check value
    1c56:	c9 01       	movw	r24, r18
    1c58:	86 2b       	or	r24, r22
    1c5a:	27 e1       	ldi	r18, 0x17	; 23
    1c5c:	30 e0       	ldi	r19, 0x00	; 0

	uint32_t divsor = (uint32_t)SHIFTED_DIVISOR;
    1c5e:	40 e0       	ldi	r20, 0x00	; 0
    1c60:	50 e8       	ldi	r21, 0x80	; 128

	for (int i = 0 ; i < 16 ; i++) //Operate on only 16 positions of max 24. The remaining 8 are our remainder and should be zero when we're done.
	{
		if( remainder & (uint32_t)1<<(23 - i) ) //Check if there is a one in the left position
    1c62:	bc 01       	movw	r22, r24
    1c64:	02 2e       	mov	r0, r18
    1c66:	02 c0       	rjmp	.+4      	; 0x1c6c <check_crc+0x1c>
    1c68:	76 95       	lsr	r23
    1c6a:	67 95       	ror	r22
    1c6c:	0a 94       	dec	r0
    1c6e:	e2 f7       	brpl	.-8      	; 0x1c68 <check_crc+0x18>
    1c70:	60 ff       	sbrs	r22, 0
    1c72:	02 c0       	rjmp	.+4      	; 0x1c78 <check_crc+0x28>
		remainder ^= divsor;
    1c74:	84 27       	eor	r24, r20
    1c76:	95 27       	eor	r25, r21

		divsor >>= 1; //Rotate the divsor max 16 times so that we have 8 bits left of a remainder
    1c78:	56 95       	lsr	r21
    1c7a:	47 95       	ror	r20
    1c7c:	21 50       	subi	r18, 0x01	; 1
    1c7e:	31 09       	sbc	r19, r1
	uint32_t remainder = (uint32_t)message_from_sensor << 8; //Pad with 8 bits because we have to add in the check value
	remainder |= check_value_from_sensor; //Add on the check value

	uint32_t divsor = (uint32_t)SHIFTED_DIVISOR;

	for (int i = 0 ; i < 16 ; i++) //Operate on only 16 positions of max 24. The remaining 8 are our remainder and should be zero when we're done.
    1c80:	27 30       	cpi	r18, 0x07	; 7
    1c82:	31 05       	cpc	r19, r1
    1c84:	71 f7       	brne	.-36     	; 0x1c62 <check_crc+0x12>

		divsor >>= 1; //Rotate the divsor max 16 times so that we have 8 bits left of a remainder
	}

	return (unsigned int)remainder;
    1c86:	08 95       	ret

00001c88 <ll_first>:
 * lp is list pointer
 */
llobject_t *
ll_first(lp)
llobject_t *lp;
{
    1c88:	fc 01       	movw	r30, r24
    if (LL_IS_EMPTY(lp)) {
    1c8a:	82 81       	ldd	r24, Z+2	; 0x02
    1c8c:	93 81       	ldd	r25, Z+3	; 0x03
    1c8e:	8e 17       	cp	r24, r30
    1c90:	9f 07       	cpc	r25, r31
    1c92:	11 f4       	brne	.+4      	; 0x1c98 <ll_first+0x10>
		return LL_NULL;
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    }
    return lp->next;
}
    1c98:	08 95       	ret

00001c9a <ll_r_insert>:
llobject_t *
ll_r_insert(ip, ep)
llobject_t *ip;
llobject_t *ep;
{
    llobject_t *tp = ip->next;
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	12 96       	adiw	r26, 0x02	; 2
    1c9e:	ed 91       	ld	r30, X+
    1ca0:	fc 91       	ld	r31, X
    1ca2:	13 97       	sbiw	r26, 0x03	; 3

    tp->prev = ep;
    1ca4:	71 83       	std	Z+1, r23	; 0x01
    1ca6:	60 83       	st	Z, r22
    ep->next = tp;
    1ca8:	db 01       	movw	r26, r22
    1caa:	13 96       	adiw	r26, 0x03	; 3
    1cac:	fc 93       	st	X, r31
    1cae:	ee 93       	st	-X, r30
    1cb0:	12 97       	sbiw	r26, 0x02	; 2
    ip->next = ep;
    1cb2:	fc 01       	movw	r30, r24
    1cb4:	73 83       	std	Z+3, r23	; 0x03
    1cb6:	62 83       	std	Z+2, r22	; 0x02
    ep->prev = ip;
    1cb8:	8d 93       	st	X+, r24
    1cba:	9c 93       	st	X, r25

    return ep;
}
    1cbc:	cb 01       	movw	r24, r22
    1cbe:	08 95       	ret

00001cc0 <ll_detach>:
 */
llobject_t *
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    1cc0:	fb 01       	movw	r30, r22
    if (LL_IS_EMPTY(lp) || lp == ep) {
    1cc2:	dc 01       	movw	r26, r24
    1cc4:	12 96       	adiw	r26, 0x02	; 2
    1cc6:	2d 91       	ld	r18, X+
    1cc8:	3c 91       	ld	r19, X
    1cca:	13 97       	sbiw	r26, 0x03	; 3
    1ccc:	28 17       	cp	r18, r24
    1cce:	39 07       	cpc	r19, r25
    1cd0:	a1 f0       	breq	.+40     	; 0x1cfa <ll_detach+0x3a>
    1cd2:	86 17       	cp	r24, r22
    1cd4:	97 07       	cpc	r25, r23
    1cd6:	a1 f0       	breq	.+40     	; 0x1d00 <ll_detach+0x40>
		return LL_NULL;
    }

    (ep->prev)->next = ep->next;
    1cd8:	a0 81       	ld	r26, Z
    1cda:	b1 81       	ldd	r27, Z+1	; 0x01
    1cdc:	82 81       	ldd	r24, Z+2	; 0x02
    1cde:	93 81       	ldd	r25, Z+3	; 0x03
    1ce0:	13 96       	adiw	r26, 0x03	; 3
    1ce2:	9c 93       	st	X, r25
    1ce4:	8e 93       	st	-X, r24
    1ce6:	12 97       	sbiw	r26, 0x02	; 2
    (ep->next)->prev = ep->prev;
    1ce8:	a2 81       	ldd	r26, Z+2	; 0x02
    1cea:	b3 81       	ldd	r27, Z+3	; 0x03
    1cec:	80 81       	ld	r24, Z
    1cee:	91 81       	ldd	r25, Z+1	; 0x01
    1cf0:	8d 93       	st	X+, r24
    1cf2:	9c 93       	st	X, r25

    return ep;
    1cf4:	86 2f       	mov	r24, r22
    1cf6:	9f 2f       	mov	r25, r31
    1cf8:	08 95       	ret
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    if (LL_IS_EMPTY(lp) || lp == ep) {
		return LL_NULL;
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	08 95       	ret
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	90 e0       	ldi	r25, 0x00	; 0

    (ep->prev)->next = ep->next;
    (ep->next)->prev = ep->prev;

    return ep;
}
    1d04:	08 95       	ret

00001d06 <ll_pop>:
 */
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
    1d06:	fc 01       	movw	r30, r24
    1d08:	62 81       	ldd	r22, Z+2	; 0x02
    1d0a:	73 81       	ldd	r23, Z+3	; 0x03
    1d0c:	68 17       	cp	r22, r24
    1d0e:	79 07       	cpc	r23, r25
    1d10:	19 f0       	breq	.+6      	; 0x1d18 <ll_pop+0x12>
		return LL_NULL;
    }
    return LL_DETACH(lp, lp->next);
    1d12:	0e 94 60 0e 	call	0x1cc0	; 0x1cc0 <ll_detach>
    1d16:	08 95       	ret
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
		return LL_NULL;
    1d18:	80 e0       	ldi	r24, 0x00	; 0
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    }
    return LL_DETACH(lp, lp->next);
}
    1d1c:	08 95       	ret

00001d1e <updateTime>:
 */ 
#include "utilities/inc/time.h"


void updateTime(long increment_msec, tm tm_eg)
{
    1d1e:	4f 92       	push	r4
    1d20:	5f 92       	push	r5
    1d22:	6f 92       	push	r6
    1d24:	7f 92       	push	r7
    1d26:	8f 92       	push	r8
    1d28:	9f 92       	push	r9
    1d2a:	af 92       	push	r10
    1d2c:	bf 92       	push	r11
    1d2e:	cf 92       	push	r12
    1d30:	df 92       	push	r13
    1d32:	ef 92       	push	r14
    1d34:	ff 92       	push	r15
    1d36:	0f 93       	push	r16
    1d38:	1f 93       	push	r17
    1d3a:	cf 93       	push	r28
    1d3c:	df 93       	push	r29
    1d3e:	cd b7       	in	r28, 0x3d	; 61
    1d40:	de b7       	in	r29, 0x3e	; 62
    1d42:	4b 01       	movw	r8, r22
    1d44:	5c 01       	movw	r10, r24
    1d46:	4b 88       	ldd	r4, Y+19	; 0x13
    1d48:	5c 88       	ldd	r5, Y+20	; 0x14
    1d4a:	6d 88       	ldd	r6, Y+21	; 0x15
    1d4c:	7e 88       	ldd	r7, Y+22	; 0x16
    1d4e:	cf 88       	ldd	r12, Y+23	; 0x17
    1d50:	d8 8c       	ldd	r13, Y+24	; 0x18
    1d52:	e9 8c       	ldd	r14, Y+25	; 0x19
    1d54:	fa 8c       	ldd	r15, Y+26	; 0x1a
	printf("time debug %ld\n",tm_eg.unix_time);
    1d56:	7f 92       	push	r7
    1d58:	6f 92       	push	r6
    1d5a:	5f 92       	push	r5
    1d5c:	4f 92       	push	r4
    1d5e:	0f e3       	ldi	r16, 0x3F	; 63
    1d60:	14 e0       	ldi	r17, 0x04	; 4
    1d62:	1f 93       	push	r17
    1d64:	0f 93       	push	r16
    1d66:	0e 94 bb 1c 	call	0x3976	; 0x3976 <printf>
	tm_eg.unix_msec += increment_msec;
    1d6a:	c5 01       	movw	r24, r10
    1d6c:	b4 01       	movw	r22, r8
    1d6e:	6c 0d       	add	r22, r12
    1d70:	7d 1d       	adc	r23, r13
    1d72:	8e 1d       	adc	r24, r14
    1d74:	9f 1d       	adc	r25, r15
	tm_eg.unix_time += tm_eg.unix_msec / 1000;
    1d76:	28 ee       	ldi	r18, 0xE8	; 232
    1d78:	33 e0       	ldi	r19, 0x03	; 3
    1d7a:	40 e0       	ldi	r20, 0x00	; 0
    1d7c:	50 e0       	ldi	r21, 0x00	; 0
    1d7e:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <__divmodsi4>
    1d82:	42 0e       	add	r4, r18
    1d84:	53 1e       	adc	r5, r19
    1d86:	64 1e       	adc	r6, r20
    1d88:	75 1e       	adc	r7, r21
	tm_eg.unix_msec = tm_eg.unix_msec % 1000;
	printf("time debug %ld\n",tm_eg.unix_time);
    1d8a:	7f 92       	push	r7
    1d8c:	6f 92       	push	r6
    1d8e:	5f 92       	push	r5
    1d90:	4f 92       	push	r4
    1d92:	1f 93       	push	r17
    1d94:	0f 93       	push	r16
    1d96:	0e 94 bb 1c 	call	0x3976	; 0x3976 <printf>
    1d9a:	0f b6       	in	r0, 0x3f	; 63
    1d9c:	f8 94       	cli
    1d9e:	de bf       	out	0x3e, r29	; 62
    1da0:	0f be       	out	0x3f, r0	; 63
    1da2:	cd bf       	out	0x3d, r28	; 61
}
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	1f 91       	pop	r17
    1daa:	0f 91       	pop	r16
    1dac:	ff 90       	pop	r15
    1dae:	ef 90       	pop	r14
    1db0:	df 90       	pop	r13
    1db2:	cf 90       	pop	r12
    1db4:	bf 90       	pop	r11
    1db6:	af 90       	pop	r10
    1db8:	9f 90       	pop	r9
    1dba:	8f 90       	pop	r8
    1dbc:	7f 90       	pop	r7
    1dbe:	6f 90       	pop	r6
    1dc0:	5f 90       	pop	r5
    1dc2:	4f 90       	pop	r4
    1dc4:	08 95       	ret

00001dc6 <calcDate>:
	tm_ptr->unix_time = calibrate_sec;
	tm_ptr->unix_msec = 500; // to minimize error
}

void calcDate(tm *tm_ptr)
{
    1dc6:	2f 92       	push	r2
    1dc8:	3f 92       	push	r3
    1dca:	4f 92       	push	r4
    1dcc:	5f 92       	push	r5
    1dce:	6f 92       	push	r6
    1dd0:	7f 92       	push	r7
    1dd2:	8f 92       	push	r8
    1dd4:	9f 92       	push	r9
    1dd6:	af 92       	push	r10
    1dd8:	bf 92       	push	r11
    1dda:	cf 92       	push	r12
    1ddc:	df 92       	push	r13
    1dde:	ef 92       	push	r14
    1de0:	ff 92       	push	r15
    1de2:	0f 93       	push	r16
    1de4:	1f 93       	push	r17
    1de6:	cf 93       	push	r28
    1de8:	df 93       	push	r29
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	61 97       	sbiw	r28, 0x11	; 17
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
    1dfa:	8c 01       	movw	r16, r24
	long seconds, minutes, hours, days, year, month;
	long dayOfWeek;
	seconds = tm_ptr->unix_time;
    1dfc:	dc 01       	movw	r26, r24
    1dfe:	4d 90       	ld	r4, X+
    1e00:	5d 90       	ld	r5, X+
    1e02:	6d 90       	ld	r6, X+
    1e04:	7c 90       	ld	r7, X

	/* calculate minutes */
	minutes  = seconds / 60;
    1e06:	0f 2e       	mov	r0, r31
    1e08:	fc e3       	ldi	r31, 0x3C	; 60
    1e0a:	8f 2e       	mov	r8, r31
    1e0c:	91 2c       	mov	r9, r1
    1e0e:	a1 2c       	mov	r10, r1
    1e10:	b1 2c       	mov	r11, r1
    1e12:	f0 2d       	mov	r31, r0
    1e14:	c3 01       	movw	r24, r6
    1e16:	b2 01       	movw	r22, r4
    1e18:	a5 01       	movw	r20, r10
    1e1a:	94 01       	movw	r18, r8
    1e1c:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <__divmodsi4>
    1e20:	69 01       	movw	r12, r18
    1e22:	7a 01       	movw	r14, r20
	seconds -= minutes * 60;
    1e24:	a4 ec       	ldi	r26, 0xC4	; 196
    1e26:	bf ef       	ldi	r27, 0xFF	; 255
    1e28:	0e 94 12 1a 	call	0x3424	; 0x3424 <__mulohisi3>
    1e2c:	9b 01       	movw	r18, r22
    1e2e:	ac 01       	movw	r20, r24
    1e30:	24 0d       	add	r18, r4
    1e32:	35 1d       	adc	r19, r5
    1e34:	46 1d       	adc	r20, r6
    1e36:	57 1d       	adc	r21, r7
    1e38:	29 83       	std	Y+1, r18	; 0x01
    1e3a:	3a 83       	std	Y+2, r19	; 0x02
    1e3c:	4b 83       	std	Y+3, r20	; 0x03
    1e3e:	5c 83       	std	Y+4, r21	; 0x04
	/* calculate hours */
	hours    = minutes / 60;
    1e40:	c7 01       	movw	r24, r14
    1e42:	b6 01       	movw	r22, r12
    1e44:	a5 01       	movw	r20, r10
    1e46:	94 01       	movw	r18, r8
    1e48:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <__divmodsi4>
    1e4c:	49 01       	movw	r8, r18
    1e4e:	5a 01       	movw	r10, r20
	minutes -= hours   * 60;
    1e50:	a4 ec       	ldi	r26, 0xC4	; 196
    1e52:	bf ef       	ldi	r27, 0xFF	; 255
    1e54:	0e 94 12 1a 	call	0x3424	; 0x3424 <__mulohisi3>
    1e58:	9b 01       	movw	r18, r22
    1e5a:	ac 01       	movw	r20, r24
    1e5c:	2c 0d       	add	r18, r12
    1e5e:	3d 1d       	adc	r19, r13
    1e60:	4e 1d       	adc	r20, r14
    1e62:	5f 1d       	adc	r21, r15
    1e64:	2d 83       	std	Y+5, r18	; 0x05
    1e66:	3e 83       	std	Y+6, r19	; 0x06
    1e68:	4f 83       	std	Y+7, r20	; 0x07
    1e6a:	58 87       	std	Y+8, r21	; 0x08
	/* calculate days */
	days     = hours   / 24;
    1e6c:	c5 01       	movw	r24, r10
    1e6e:	b4 01       	movw	r22, r8
    1e70:	28 e1       	ldi	r18, 0x18	; 24
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	50 e0       	ldi	r21, 0x00	; 0
    1e78:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <__divmodsi4>
    1e7c:	c2 2e       	mov	r12, r18
    1e7e:	d3 2e       	mov	r13, r19
    1e80:	e4 2e       	mov	r14, r20
    1e82:	f5 2e       	mov	r15, r21
	hours   -= days    * 24;
    1e84:	a8 ee       	ldi	r26, 0xE8	; 232
    1e86:	bf ef       	ldi	r27, 0xFF	; 255
    1e88:	0e 94 12 1a 	call	0x3424	; 0x3424 <__mulohisi3>
    1e8c:	9b 01       	movw	r18, r22
    1e8e:	ac 01       	movw	r20, r24
    1e90:	28 0d       	add	r18, r8
    1e92:	39 1d       	adc	r19, r9
    1e94:	4a 1d       	adc	r20, r10
    1e96:	5b 1d       	adc	r21, r11
    1e98:	29 87       	std	Y+9, r18	; 0x09
    1e9a:	3a 87       	std	Y+10, r19	; 0x0a
    1e9c:	4b 87       	std	Y+11, r20	; 0x0b
    1e9e:	5c 87       	std	Y+12, r21	; 0x0c

	/* Unix time starts in 1970 on a Thursday */
	year      = 1970;
	dayOfWeek = 4;
    1ea0:	81 2c       	mov	r8, r1
    1ea2:	91 2c       	mov	r9, r1
    1ea4:	54 01       	movw	r10, r8
    1ea6:	68 94       	set
    1ea8:	82 f8       	bld	r8, 2
	/* calculate days */
	days     = hours   / 24;
	hours   -= days    * 24;

	/* Unix time starts in 1970 on a Thursday */
	year      = 1970;
    1eaa:	0f 2e       	mov	r0, r31
    1eac:	f2 eb       	ldi	r31, 0xB2	; 178
    1eae:	4f 2e       	mov	r4, r31
    1eb0:	f7 e0       	ldi	r31, 0x07	; 7
    1eb2:	5f 2e       	mov	r5, r31
    1eb4:	61 2c       	mov	r6, r1
    1eb6:	71 2c       	mov	r7, r1
    1eb8:	f0 2d       	mov	r31, r0

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    1eba:	21 2c       	mov	r2, r1
		{
			dayOfWeek += leapYear ? 2 : 1;
    1ebc:	31 2c       	mov	r3, r1
	year      = 1970;
	dayOfWeek = 4;

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
    1ebe:	d3 01       	movw	r26, r6
    1ec0:	c2 01       	movw	r24, r4
    1ec2:	83 70       	andi	r24, 0x03	; 3
    1ec4:	99 27       	eor	r25, r25
    1ec6:	aa 27       	eor	r26, r26
    1ec8:	bb 27       	eor	r27, r27
    1eca:	89 2b       	or	r24, r25
    1ecc:	8a 2b       	or	r24, r26
    1ece:	8b 2b       	or	r24, r27
    1ed0:	09 f0       	breq	.+2      	; 0x1ed4 <calcDate+0x10e>
    1ed2:	f3 c0       	rjmp	.+486    	; 0x20ba <calcDate+0x2f4>
    1ed4:	c3 01       	movw	r24, r6
    1ed6:	b2 01       	movw	r22, r4
    1ed8:	24 e6       	ldi	r18, 0x64	; 100
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	40 e0       	ldi	r20, 0x00	; 0
    1ede:	50 e0       	ldi	r21, 0x00	; 0
    1ee0:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <__divmodsi4>
    1ee4:	67 2b       	or	r22, r23
    1ee6:	68 2b       	or	r22, r24
    1ee8:	69 2b       	or	r22, r25
    1eea:	09 f0       	breq	.+2      	; 0x1eee <calcDate+0x128>
    1eec:	d9 c0       	rjmp	.+434    	; 0x20a0 <calcDate+0x2da>
    1eee:	c3 01       	movw	r24, r6
    1ef0:	b2 01       	movw	r22, r4
    1ef2:	20 e9       	ldi	r18, 0x90	; 144
    1ef4:	31 e0       	ldi	r19, 0x01	; 1
    1ef6:	40 e0       	ldi	r20, 0x00	; 0
    1ef8:	50 e0       	ldi	r21, 0x00	; 0
    1efa:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <__divmodsi4>
    1efe:	67 2b       	or	r22, r23
    1f00:	68 2b       	or	r22, r24
    1f02:	69 2b       	or	r22, r25
    1f04:	09 f4       	brne	.+2      	; 0x1f08 <calcDate+0x142>
    1f06:	cc c0       	rjmp	.+408    	; 0x20a0 <calcDate+0x2da>
    1f08:	d8 c0       	rjmp	.+432    	; 0x20ba <calcDate+0x2f4>
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    1f0a:	8e e6       	ldi	r24, 0x6E	; 110
    1f0c:	91 e0       	ldi	r25, 0x01	; 1
    1f0e:	a0 e0       	ldi	r26, 0x00	; 0
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
		{
			dayOfWeek += leapYear ? 2 : 1;
    1f12:	42 e0       	ldi	r20, 0x02	; 2
    1f14:	50 e0       	ldi	r21, 0x00	; 0
    1f16:	60 e0       	ldi	r22, 0x00	; 0
    1f18:	70 e0       	ldi	r23, 0x00	; 0
    1f1a:	08 c0       	rjmp	.+16     	; 0x1f2c <calcDate+0x166>

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    1f1c:	8d e6       	ldi	r24, 0x6D	; 109
    1f1e:	91 e0       	ldi	r25, 0x01	; 1
    1f20:	a2 2d       	mov	r26, r2
    1f22:	b0 e0       	ldi	r27, 0x00	; 0
		{
			dayOfWeek += leapYear ? 2 : 1;
    1f24:	41 e0       	ldi	r20, 0x01	; 1
    1f26:	50 e0       	ldi	r21, 0x00	; 0
    1f28:	60 e0       	ldi	r22, 0x00	; 0
    1f2a:	73 2d       	mov	r23, r3
    1f2c:	84 0e       	add	r8, r20
    1f2e:	95 1e       	adc	r9, r21
    1f30:	a6 1e       	adc	r10, r22
    1f32:	b7 1e       	adc	r11, r23
			days      -= daysInYear;
    1f34:	c8 1a       	sub	r12, r24
    1f36:	d9 0a       	sbc	r13, r25
    1f38:	ea 0a       	sbc	r14, r26
    1f3a:	fb 0a       	sbc	r15, r27
			if (dayOfWeek >= 7)
    1f3c:	37 e0       	ldi	r19, 0x07	; 7
    1f3e:	83 16       	cp	r8, r19
    1f40:	91 04       	cpc	r9, r1
    1f42:	a1 04       	cpc	r10, r1
    1f44:	b1 04       	cpc	r11, r1
    1f46:	2c f0       	brlt	.+10     	; 0x1f52 <calcDate+0x18c>
			dayOfWeek -= 7;
    1f48:	47 e0       	ldi	r20, 0x07	; 7
    1f4a:	84 1a       	sub	r8, r20
    1f4c:	91 08       	sbc	r9, r1
    1f4e:	a1 08       	sbc	r10, r1
    1f50:	b1 08       	sbc	r11, r1
			++year;
    1f52:	5f ef       	ldi	r21, 0xFF	; 255
    1f54:	45 1a       	sub	r4, r21
    1f56:	55 0a       	sbc	r5, r21
    1f58:	65 0a       	sbc	r6, r21
    1f5a:	75 0a       	sbc	r7, r21
				else
				break;
			}
			break;
		}
	}
    1f5c:	b0 cf       	rjmp	.-160    	; 0x1ebe <calcDate+0xf8>
			dayOfWeek -= 7;
			++year;
		}
		else
		{
			tm_ptr->tm_yday = days;
    1f5e:	f8 01       	movw	r30, r16
    1f60:	84 a3       	std	Z+36, r24	; 0x24
    1f62:	95 a3       	std	Z+37, r25	; 0x25
    1f64:	a6 a3       	std	Z+38, r26	; 0x26
    1f66:	b7 a3       	std	Z+39, r27	; 0x27
			dayOfWeek  += days;
    1f68:	bc 01       	movw	r22, r24
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	68 0d       	add	r22, r8
    1f6e:	79 1d       	adc	r23, r9
    1f70:	8a 1d       	adc	r24, r10
    1f72:	9b 1d       	adc	r25, r11
			dayOfWeek  %= 7;
    1f74:	27 e0       	ldi	r18, 0x07	; 7
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e0       	ldi	r20, 0x00	; 0
    1f7a:	50 e0       	ldi	r21, 0x00	; 0
    1f7c:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <__divmodsi4>
    1f80:	6d 87       	std	Y+13, r22	; 0x0d
    1f82:	7e 87       	std	Y+14, r23	; 0x0e
    1f84:	8f 87       	std	Y+15, r24	; 0x0f
    1f86:	98 8b       	std	Y+16, r25	; 0x10
    1f88:	2f e4       	ldi	r18, 0x4F	; 79
    1f8a:	34 e0       	ldi	r19, 0x04	; 4
    1f8c:	41 e0       	ldi	r20, 0x01	; 1
    1f8e:	50 e0       	ldi	r21, 0x00	; 0
    1f90:	60 e0       	ldi	r22, 0x00	; 0
    1f92:	70 e0       	ldi	r23, 0x00	; 0
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	dc 01       	movw	r26, r24
    1f9a:	f9 01       	movw	r30, r18
    1f9c:	48 01       	movw	r8, r16
    1f9e:	07 c0       	rjmp	.+14     	; 0x1fae <calcDate+0x1e8>
    1fa0:	01 96       	adiw	r24, 0x01	; 1
    1fa2:	a1 1d       	adc	r26, r1
    1fa4:	b1 1d       	adc	r27, r1
    1fa6:	4f 5f       	subi	r20, 0xFF	; 255
    1fa8:	5f 4f       	sbci	r21, 0xFF	; 255
    1faa:	6f 4f       	sbci	r22, 0xFF	; 255
    1fac:	7f 4f       	sbci	r23, 0xFF	; 255
    1fae:	b8 2e       	mov	r11, r24
    1fb0:	a9 2e       	mov	r10, r25
    1fb2:	2a 2e       	mov	r2, r26
    1fb4:	b9 8b       	std	Y+17, r27	; 0x11

			/* calculate the month and day */
			static const uint8_t daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
			for(month = 0; month < 12; ++month)
			{
				uint8_t dim = daysInMonth[month];
    1fb6:	01 91       	ld	r16, Z+

				/* add a day to feburary if this is a leap year */
				if (month == 1 && leapYear)
    1fb8:	81 30       	cpi	r24, 0x01	; 1
    1fba:	91 05       	cpc	r25, r1
    1fbc:	a1 05       	cpc	r26, r1
    1fbe:	b1 05       	cpc	r27, r1
    1fc0:	29 f4       	brne	.+10     	; 0x1fcc <calcDate+0x206>
    1fc2:	33 20       	and	r3, r3
    1fc4:	09 f4       	brne	.+2      	; 0x1fc8 <calcDate+0x202>
    1fc6:	61 c0       	rjmp	.+194    	; 0x208a <calcDate+0x2c4>
				++dim;
    1fc8:	0f 5f       	subi	r16, 0xFF	; 255
    1fca:	5f c0       	rjmp	.+190    	; 0x208a <calcDate+0x2c4>

				if (days >= dim)
    1fcc:	10 e0       	ldi	r17, 0x00	; 0
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	c0 16       	cp	r12, r16
    1fd4:	d1 06       	cpc	r13, r17
    1fd6:	e2 06       	cpc	r14, r18
    1fd8:	f3 06       	cpc	r15, r19
    1fda:	7c f0       	brlt	.+30     	; 0x1ffa <calcDate+0x234>
				days -= dim;
    1fdc:	c0 1a       	sub	r12, r16
    1fde:	d1 0a       	sbc	r13, r17
    1fe0:	e2 0a       	sbc	r14, r18
    1fe2:	f3 0a       	sbc	r15, r19
			dayOfWeek  += days;
			dayOfWeek  %= 7;

			/* calculate the month and day */
			static const uint8_t daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
			for(month = 0; month < 12; ++month)
    1fe4:	b4 2e       	mov	r11, r20
    1fe6:	a5 2e       	mov	r10, r21
    1fe8:	26 2e       	mov	r2, r22
    1fea:	4c 30       	cpi	r20, 0x0C	; 12
    1fec:	51 05       	cpc	r21, r1
    1fee:	61 05       	cpc	r22, r1
    1ff0:	71 05       	cpc	r23, r1
    1ff2:	b4 f2       	brlt	.-84     	; 0x1fa0 <calcDate+0x1da>
    1ff4:	84 01       	movw	r16, r8
    1ff6:	27 2f       	mov	r18, r23
    1ff8:	02 c0       	rjmp	.+4      	; 0x1ffe <calcDate+0x238>
    1ffa:	84 01       	movw	r16, r8
    1ffc:	29 89       	ldd	r18, Y+17	; 0x11
			}
			break;
		}
	}

	tm_ptr->tm_sec  = seconds;
    1ffe:	89 81       	ldd	r24, Y+1	; 0x01
    2000:	9a 81       	ldd	r25, Y+2	; 0x02
    2002:	ab 81       	ldd	r26, Y+3	; 0x03
    2004:	bc 81       	ldd	r27, Y+4	; 0x04
    2006:	f8 01       	movw	r30, r16
    2008:	80 87       	std	Z+8, r24	; 0x08
    200a:	91 87       	std	Z+9, r25	; 0x09
    200c:	a2 87       	std	Z+10, r26	; 0x0a
    200e:	b3 87       	std	Z+11, r27	; 0x0b
	tm_ptr->tm_min  = minutes;
    2010:	8d 81       	ldd	r24, Y+5	; 0x05
    2012:	9e 81       	ldd	r25, Y+6	; 0x06
    2014:	af 81       	ldd	r26, Y+7	; 0x07
    2016:	b8 85       	ldd	r27, Y+8	; 0x08
    2018:	84 87       	std	Z+12, r24	; 0x0c
    201a:	95 87       	std	Z+13, r25	; 0x0d
    201c:	a6 87       	std	Z+14, r26	; 0x0e
    201e:	b7 87       	std	Z+15, r27	; 0x0f
	tm_ptr->tm_hour = hours;
    2020:	89 85       	ldd	r24, Y+9	; 0x09
    2022:	9a 85       	ldd	r25, Y+10	; 0x0a
    2024:	ab 85       	ldd	r26, Y+11	; 0x0b
    2026:	bc 85       	ldd	r27, Y+12	; 0x0c
    2028:	80 8b       	std	Z+16, r24	; 0x10
    202a:	91 8b       	std	Z+17, r25	; 0x11
    202c:	a2 8b       	std	Z+18, r26	; 0x12
    202e:	b3 8b       	std	Z+19, r27	; 0x13
	tm_ptr->tm_mday = days + 1;
    2030:	ff ef       	ldi	r31, 0xFF	; 255
    2032:	cf 1a       	sub	r12, r31
    2034:	df 0a       	sbc	r13, r31
    2036:	ef 0a       	sbc	r14, r31
    2038:	ff 0a       	sbc	r15, r31
    203a:	d8 01       	movw	r26, r16
    203c:	54 96       	adiw	r26, 0x14	; 20
    203e:	cd 92       	st	X+, r12
    2040:	dd 92       	st	X+, r13
    2042:	ed 92       	st	X+, r14
    2044:	fc 92       	st	X, r15
    2046:	57 97       	sbiw	r26, 0x17	; 23
	tm_ptr->tm_mon  = month;
    2048:	58 96       	adiw	r26, 0x18	; 24
    204a:	bc 92       	st	X, r11
    204c:	58 97       	sbiw	r26, 0x18	; 24
    204e:	59 96       	adiw	r26, 0x19	; 25
    2050:	ac 92       	st	X, r10
    2052:	59 97       	sbiw	r26, 0x19	; 25
    2054:	5a 96       	adiw	r26, 0x1a	; 26
    2056:	2c 92       	st	X, r2
    2058:	5a 97       	sbiw	r26, 0x1a	; 26
    205a:	5b 96       	adiw	r26, 0x1b	; 27
    205c:	2c 93       	st	X, r18
    205e:	5b 97       	sbiw	r26, 0x1b	; 27
	tm_ptr->tm_year = year;
    2060:	f8 01       	movw	r30, r16
    2062:	44 8e       	std	Z+28, r4	; 0x1c
    2064:	55 8e       	std	Z+29, r5	; 0x1d
    2066:	66 8e       	std	Z+30, r6	; 0x1e
    2068:	77 8e       	std	Z+31, r7	; 0x1f
	tm_ptr->tm_wday = dayOfWeek;
    206a:	2d 85       	ldd	r18, Y+13	; 0x0d
    206c:	3e 85       	ldd	r19, Y+14	; 0x0e
    206e:	4f 85       	ldd	r20, Y+15	; 0x0f
    2070:	58 89       	ldd	r21, Y+16	; 0x10
    2072:	90 96       	adiw	r26, 0x20	; 32
    2074:	2d 93       	st	X+, r18
    2076:	3d 93       	st	X+, r19
    2078:	4d 93       	st	X+, r20
    207a:	5c 93       	st	X, r21
    207c:	93 97       	sbiw	r26, 0x23	; 35
    207e:	29 c0       	rjmp	.+82     	; 0x20d2 <calcDate+0x30c>
				/* add a day to feburary if this is a leap year */
				if (month == 1 && leapYear)
				++dim;

				if (days >= dim)
				days -= dim;
    2080:	c0 1a       	sub	r12, r16
    2082:	d1 0a       	sbc	r13, r17
    2084:	e2 0a       	sbc	r14, r18
    2086:	f3 0a       	sbc	r15, r19
    2088:	8b cf       	rjmp	.-234    	; 0x1fa0 <calcDate+0x1da>

				/* add a day to feburary if this is a leap year */
				if (month == 1 && leapYear)
				++dim;

				if (days >= dim)
    208a:	10 e0       	ldi	r17, 0x00	; 0
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	30 e0       	ldi	r19, 0x00	; 0
    2090:	c0 16       	cp	r12, r16
    2092:	d1 06       	cpc	r13, r17
    2094:	e2 06       	cpc	r14, r18
    2096:	f3 06       	cpc	r15, r19
    2098:	9c f7       	brge	.-26     	; 0x2080 <calcDate+0x2ba>
    209a:	84 01       	movw	r16, r8
    209c:	29 89       	ldd	r18, Y+17	; 0x11
    209e:	af cf       	rjmp	.-162    	; 0x1ffe <calcDate+0x238>

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    20a0:	be e6       	ldi	r27, 0x6E	; 110
    20a2:	cb 16       	cp	r12, r27
    20a4:	b1 e0       	ldi	r27, 0x01	; 1
    20a6:	db 06       	cpc	r13, r27
    20a8:	e1 04       	cpc	r14, r1
    20aa:	f1 04       	cpc	r15, r1
    20ac:	0c f0       	brlt	.+2      	; 0x20b0 <calcDate+0x2ea>
    20ae:	2d cf       	rjmp	.-422    	; 0x1f0a <calcDate+0x144>
    20b0:	d7 01       	movw	r26, r14
    20b2:	c6 01       	movw	r24, r12
    20b4:	33 24       	eor	r3, r3
    20b6:	33 94       	inc	r3
    20b8:	52 cf       	rjmp	.-348    	; 0x1f5e <calcDate+0x198>
    20ba:	ed e6       	ldi	r30, 0x6D	; 109
    20bc:	ce 16       	cp	r12, r30
    20be:	e1 e0       	ldi	r30, 0x01	; 1
    20c0:	de 06       	cpc	r13, r30
    20c2:	e1 04       	cpc	r14, r1
    20c4:	f1 04       	cpc	r15, r1
    20c6:	0c f0       	brlt	.+2      	; 0x20ca <calcDate+0x304>
    20c8:	29 cf       	rjmp	.-430    	; 0x1f1c <calcDate+0x156>
    20ca:	d7 01       	movw	r26, r14
    20cc:	c6 01       	movw	r24, r12
    20ce:	31 2c       	mov	r3, r1
    20d0:	46 cf       	rjmp	.-372    	; 0x1f5e <calcDate+0x198>
	tm_ptr->tm_hour = hours;
	tm_ptr->tm_mday = days + 1;
	tm_ptr->tm_mon  = month;
	tm_ptr->tm_year = year;
	tm_ptr->tm_wday = dayOfWeek;
    20d2:	61 96       	adiw	r28, 0x11	; 17
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	df 91       	pop	r29
    20e0:	cf 91       	pop	r28
    20e2:	1f 91       	pop	r17
    20e4:	0f 91       	pop	r16
    20e6:	ff 90       	pop	r15
    20e8:	ef 90       	pop	r14
    20ea:	df 90       	pop	r13
    20ec:	cf 90       	pop	r12
    20ee:	bf 90       	pop	r11
    20f0:	af 90       	pop	r10
    20f2:	9f 90       	pop	r9
    20f4:	8f 90       	pop	r8
    20f6:	7f 90       	pop	r7
    20f8:	6f 90       	pop	r6
    20fa:	5f 90       	pop	r5
    20fc:	4f 90       	pop	r4
    20fe:	3f 90       	pop	r3
    2100:	2f 90       	pop	r2
    2102:	08 95       	ret

00002104 <DemoStorage_Device_VTinit>:
};


void DemoStorage_Device_VTinit( DemoStorageDevice *this )
{
	this->abstract.device_vt = &DemoStorageDevice_abstract_vmt;
    2104:	2c e1       	ldi	r18, 0x1C	; 28
    2106:	32 e0       	ldi	r19, 0x02	; 2
    2108:	fc 01       	movw	r30, r24
    210a:	31 83       	std	Z+1, r19	; 0x01
    210c:	20 83       	st	Z, r18
    210e:	08 95       	ret

00002110 <DemoStorage_Device_init>:
}

int DemoStorage_Device_init( DemoStorageDevice *this )
{
	return 0;
}
    2110:	80 e0       	ldi	r24, 0x00	; 0
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	08 95       	ret

00002116 <DemoStorage_Device_reset>:

int DemoStorage_Device_reset( DemoStorageDevice *this )
{
	return 0;
}
    2116:	80 e0       	ldi	r24, 0x00	; 0
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	08 95       	ret

0000211c <DemoStorage_Device_getType>:

int DemoStorage_Device_getType( DemoStorageDevice *this )
{
	return TYPE_STORAGE_DEVICE;
}
    211c:	84 e0       	ldi	r24, 0x04	; 4
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	08 95       	ret

00002122 <DemoStorage_Device_Tinit>:



void DemoStorage_Device_Tinit(DemoStorageDevice *this)
{
	this->vmt = &DemoStorageDevice_vmt;
    2122:	24 e1       	ldi	r18, 0x14	; 20
    2124:	32 e0       	ldi	r19, 0x02	; 2
    2126:	fc 01       	movw	r30, r24
    2128:	33 83       	std	Z+3, r19	; 0x03
    212a:	22 83       	std	Z+2, r18	; 0x02
    212c:	08 95       	ret

0000212e <DemoStorage_Device_Configure>:
}

int DemoStorage_Device_Configure(DemoStorageDevice *this)
{
	return 0;
}
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	08 95       	ret

00002134 <DemoStorageget_CurDataUnit>:

DataUnit * DemoStorageget_CurDataUnit(DemoStorageDevice *this)
{
    2134:	0f 93       	push	r16
    2136:	1f 93       	push	r17
    2138:	cf 93       	push	r28
    213a:	df 93       	push	r29
    213c:	ec 01       	movw	r28, r24
	int t = this->cur_pos;
    213e:	0e 81       	ldd	r16, Y+6	; 0x06
    2140:	1f 81       	ldd	r17, Y+7	; 0x07
	printf("Executre get store Device : %d\n",t);
    2142:	1f 93       	push	r17
    2144:	0f 93       	push	r16
    2146:	8b e5       	ldi	r24, 0x5B	; 91
    2148:	94 e0       	ldi	r25, 0x04	; 4
    214a:	9f 93       	push	r25
    214c:	8f 93       	push	r24
    214e:	0e 94 bb 1c 	call	0x3976	; 0x3976 <printf>
	this->cur_pos = this->cur_pos+1;
    2152:	8e 81       	ldd	r24, Y+6	; 0x06
    2154:	9f 81       	ldd	r25, Y+7	; 0x07
    2156:	01 96       	adiw	r24, 0x01	; 1
    2158:	9f 83       	std	Y+7, r25	; 0x07
    215a:	8e 83       	std	Y+6, r24	; 0x06
	DataUnit * data_t = this -> StoragesData;
	return (data_t + t);
    215c:	28 e3       	ldi	r18, 0x38	; 56
    215e:	20 9f       	mul	r18, r16
    2160:	c0 01       	movw	r24, r0
    2162:	21 9f       	mul	r18, r17
    2164:	90 0d       	add	r25, r0
    2166:	11 24       	eor	r1, r1
    2168:	28 85       	ldd	r18, Y+8	; 0x08
    216a:	39 85       	ldd	r19, Y+9	; 0x09
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	82 0f       	add	r24, r18
    2176:	93 1f       	adc	r25, r19
    2178:	df 91       	pop	r29
    217a:	cf 91       	pop	r28
    217c:	1f 91       	pop	r17
    217e:	0f 91       	pop	r16
    2180:	08 95       	ret

00002182 <DemoStorage_Device_Execute>:
{
	this->vmt = &DemoStorageDevice_vmt;
}

int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
    2182:	3f 92       	push	r3
    2184:	4f 92       	push	r4
    2186:	5f 92       	push	r5
    2188:	6f 92       	push	r6
    218a:	7f 92       	push	r7
    218c:	8f 92       	push	r8
    218e:	9f 92       	push	r9
    2190:	af 92       	push	r10
    2192:	bf 92       	push	r11
    2194:	cf 92       	push	r12
    2196:	df 92       	push	r13
    2198:	ef 92       	push	r14
    219a:	ff 92       	push	r15
    219c:	0f 93       	push	r16
    219e:	1f 93       	push	r17
    21a0:	cf 93       	push	r28
    21a2:	df 93       	push	r29
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	e8 97       	sbiw	r28, 0x38	; 56
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	de bf       	out	0x3e, r29	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	cd bf       	out	0x3d, r28	; 61
    21b4:	3c 01       	movw	r6, r24
	printf("Executre Storage Device\n");
    21b6:	8b e7       	ldi	r24, 0x7B	; 123
    21b8:	94 e0       	ldi	r25, 0x04	; 4
    21ba:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <puts>
	for( int i=0; i<this->cur_pos; i++)
    21be:	f3 01       	movw	r30, r6
    21c0:	86 81       	ldd	r24, Z+6	; 0x06
    21c2:	97 81       	ldd	r25, Z+7	; 0x07
    21c4:	18 16       	cp	r1, r24
    21c6:	19 06       	cpc	r1, r25
    21c8:	0c f0       	brlt	.+2      	; 0x21cc <DemoStorage_Device_Execute+0x4a>
    21ca:	8b c0       	rjmp	.+278    	; 0x22e2 <__stack+0xe3>
    21cc:	81 2c       	mov	r8, r1
    21ce:	91 2c       	mov	r9, r1
    21d0:	a1 2c       	mov	r10, r1
    21d2:	b1 2c       	mov	r11, r1
	{
		DataUnit temp = this->StoragesData[i];
    21d4:	0f 2e       	mov	r0, r31
    21d6:	f8 e3       	ldi	r31, 0x38	; 56
    21d8:	3f 2e       	mov	r3, r31
    21da:	f0 2d       	mov	r31, r0
		printf("%2d%2d%2d %2d%2d%2d\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
    21dc:	0f 2e       	mov	r0, r31
    21de:	f3 e9       	ldi	r31, 0x93	; 147
    21e0:	4f 2e       	mov	r4, r31
    21e2:	f4 e0       	ldi	r31, 0x04	; 4
    21e4:	5f 2e       	mov	r5, r31
    21e6:	f0 2d       	mov	r31, r0
    21e8:	6e 01       	movw	r12, r28
    21ea:	f1 e1       	ldi	r31, 0x11	; 17
    21ec:	cf 0e       	add	r12, r31
    21ee:	d1 1c       	adc	r13, r1
		for( int j = 0; j < MAX_NUM_DATA; ++j )
			printf("%3.3f ",temp.data[j]);
    21f0:	0f 2e       	mov	r0, r31
    21f2:	f8 ea       	ldi	r31, 0xA8	; 168
    21f4:	ef 2e       	mov	r14, r31
    21f6:	f4 e0       	ldi	r31, 0x04	; 4
    21f8:	ff 2e       	mov	r15, r31
    21fa:	f0 2d       	mov	r31, r0
int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
	{
		DataUnit temp = this->StoragesData[i];
    21fc:	f3 01       	movw	r30, r6
    21fe:	80 85       	ldd	r24, Z+8	; 0x08
    2200:	91 85       	ldd	r25, Z+9	; 0x09
    2202:	88 0d       	add	r24, r8
    2204:	99 1d       	adc	r25, r9
    2206:	fc 01       	movw	r30, r24
    2208:	de 01       	movw	r26, r28
    220a:	11 96       	adiw	r26, 0x01	; 1
    220c:	23 2d       	mov	r18, r3
    220e:	01 90       	ld	r0, Z+
    2210:	0d 92       	st	X+, r0
    2212:	2a 95       	dec	r18
    2214:	e1 f7       	brne	.-8      	; 0x220e <__stack+0xf>
		printf("%2d%2d%2d %2d%2d%2d\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
    2216:	fc 01       	movw	r30, r24
    2218:	23 8d       	ldd	r18, Z+27	; 0x1b
    221a:	2f 93       	push	r18
    221c:	22 8d       	ldd	r18, Z+26	; 0x1a
    221e:	2f 93       	push	r18
    2220:	21 8d       	ldd	r18, Z+25	; 0x19
    2222:	2f 93       	push	r18
    2224:	20 8d       	ldd	r18, Z+24	; 0x18
    2226:	2f 93       	push	r18
    2228:	27 8d       	ldd	r18, Z+31	; 0x1f
    222a:	2f 93       	push	r18
    222c:	26 8d       	ldd	r18, Z+30	; 0x1e
    222e:	2f 93       	push	r18
    2230:	25 8d       	ldd	r18, Z+29	; 0x1d
    2232:	2f 93       	push	r18
    2234:	24 8d       	ldd	r18, Z+28	; 0x1c
    2236:	2f 93       	push	r18
    2238:	23 a1       	ldd	r18, Z+35	; 0x23
    223a:	2f 93       	push	r18
    223c:	22 a1       	ldd	r18, Z+34	; 0x22
    223e:	2f 93       	push	r18
    2240:	21 a1       	ldd	r18, Z+33	; 0x21
    2242:	2f 93       	push	r18
    2244:	20 a1       	ldd	r18, Z+32	; 0x20
    2246:	2f 93       	push	r18
    2248:	27 a1       	ldd	r18, Z+39	; 0x27
    224a:	2f 93       	push	r18
    224c:	26 a1       	ldd	r18, Z+38	; 0x26
    224e:	2f 93       	push	r18
    2250:	25 a1       	ldd	r18, Z+37	; 0x25
    2252:	2f 93       	push	r18
    2254:	24 a1       	ldd	r18, Z+36	; 0x24
    2256:	2f 93       	push	r18
    2258:	23 a5       	ldd	r18, Z+43	; 0x2b
    225a:	2f 93       	push	r18
    225c:	22 a5       	ldd	r18, Z+42	; 0x2a
    225e:	2f 93       	push	r18
    2260:	21 a5       	ldd	r18, Z+41	; 0x29
    2262:	2f 93       	push	r18
    2264:	20 a5       	ldd	r18, Z+40	; 0x28
    2266:	2f 93       	push	r18
    2268:	27 a5       	ldd	r18, Z+47	; 0x2f
    226a:	2f 93       	push	r18
    226c:	26 a5       	ldd	r18, Z+46	; 0x2e
    226e:	2f 93       	push	r18
    2270:	25 a5       	ldd	r18, Z+45	; 0x2d
    2272:	2f 93       	push	r18
    2274:	84 a5       	ldd	r24, Z+44	; 0x2c
    2276:	8f 93       	push	r24
    2278:	5f 92       	push	r5
    227a:	4f 92       	push	r4
    227c:	0e 94 bb 1c 	call	0x3976	; 0x3976 <printf>
    2280:	8e 01       	movw	r16, r28
    2282:	0f 5f       	subi	r16, 0xFF	; 255
    2284:	1f 4f       	sbci	r17, 0xFF	; 255
    2286:	0f b6       	in	r0, 0x3f	; 63
    2288:	f8 94       	cli
    228a:	de bf       	out	0x3e, r29	; 62
    228c:	0f be       	out	0x3f, r0	; 63
    228e:	cd bf       	out	0x3d, r28	; 61
		for( int j = 0; j < MAX_NUM_DATA; ++j )
			printf("%3.3f ",temp.data[j]);
    2290:	f8 01       	movw	r30, r16
    2292:	80 81       	ld	r24, Z
    2294:	91 81       	ldd	r25, Z+1	; 0x01
    2296:	22 81       	ldd	r18, Z+2	; 0x02
    2298:	33 81       	ldd	r19, Z+3	; 0x03
    229a:	0c 5f       	subi	r16, 0xFC	; 252
    229c:	1f 4f       	sbci	r17, 0xFF	; 255
    229e:	3f 93       	push	r19
    22a0:	2f 93       	push	r18
    22a2:	9f 93       	push	r25
    22a4:	8f 93       	push	r24
    22a6:	ff 92       	push	r15
    22a8:	ef 92       	push	r14
    22aa:	0e 94 bb 1c 	call	0x3976	; 0x3976 <printf>
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
	{
		DataUnit temp = this->StoragesData[i];
		printf("%2d%2d%2d %2d%2d%2d\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
		for( int j = 0; j < MAX_NUM_DATA; ++j )
    22ae:	0f 90       	pop	r0
    22b0:	0f 90       	pop	r0
    22b2:	0f 90       	pop	r0
    22b4:	0f 90       	pop	r0
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	0c 15       	cp	r16, r12
    22bc:	1d 05       	cpc	r17, r13
    22be:	41 f7       	brne	.-48     	; 0x2290 <__stack+0x91>
			printf("%3.3f ",temp.data[j]);
		printf("\n");
    22c0:	8a e0       	ldi	r24, 0x0A	; 10
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	0e 94 d1 1c 	call	0x39a2	; 0x39a2 <putchar>
}

int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
    22c8:	ff ef       	ldi	r31, 0xFF	; 255
    22ca:	af 1a       	sub	r10, r31
    22cc:	bf 0a       	sbc	r11, r31
    22ce:	88 e3       	ldi	r24, 0x38	; 56
    22d0:	88 0e       	add	r8, r24
    22d2:	91 1c       	adc	r9, r1
    22d4:	f3 01       	movw	r30, r6
    22d6:	86 81       	ldd	r24, Z+6	; 0x06
    22d8:	97 81       	ldd	r25, Z+7	; 0x07
    22da:	a8 16       	cp	r10, r24
    22dc:	b9 06       	cpc	r11, r25
    22de:	0c f4       	brge	.+2      	; 0x22e2 <__stack+0xe3>
    22e0:	8d cf       	rjmp	.-230    	; 0x21fc <DemoStorage_Device_Execute+0x7a>
		printf("%2d%2d%2d %2d%2d%2d\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
		for( int j = 0; j < MAX_NUM_DATA; ++j )
			printf("%3.3f ",temp.data[j]);
		printf("\n");
	}
	this->cur_pos = 0;
    22e2:	f3 01       	movw	r30, r6
    22e4:	17 82       	std	Z+7, r1	; 0x07
    22e6:	16 82       	std	Z+6, r1	; 0x06
	return 0;
}
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	90 e0       	ldi	r25, 0x00	; 0
    22ec:	e8 96       	adiw	r28, 0x38	; 56
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	f8 94       	cli
    22f2:	de bf       	out	0x3e, r29	; 62
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	cd bf       	out	0x3d, r28	; 61
    22f8:	df 91       	pop	r29
    22fa:	cf 91       	pop	r28
    22fc:	1f 91       	pop	r17
    22fe:	0f 91       	pop	r16
    2300:	ff 90       	pop	r15
    2302:	ef 90       	pop	r14
    2304:	df 90       	pop	r13
    2306:	cf 90       	pop	r12
    2308:	bf 90       	pop	r11
    230a:	af 90       	pop	r10
    230c:	9f 90       	pop	r9
    230e:	8f 90       	pop	r8
    2310:	7f 90       	pop	r7
    2312:	6f 90       	pop	r6
    2314:	5f 90       	pop	r5
    2316:	4f 90       	pop	r4
    2318:	3f 90       	pop	r3
    231a:	08 95       	ret

0000231c <New_DemoStorage_Device>:
{
	return TYPE_STORAGE_DEVICE;
}

DemoStorageDevice* New_DemoStorage_Device( int infonum )
{
    231c:	cf 92       	push	r12
    231e:	df 92       	push	r13
    2320:	ef 92       	push	r14
    2322:	ff 92       	push	r15
    2324:	cf 93       	push	r28
    2326:	df 93       	push	r29
    2328:	7c 01       	movw	r14, r24
	DemoStorageDevice *p = malloc(sizeof(DemoStorageDevice));
    232a:	8a e0       	ldi	r24, 0x0A	; 10
    232c:	90 e0       	ldi	r25, 0x00	; 0
    232e:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <malloc>
    2332:	ec 01       	movw	r28, r24
	p->info = infonum;
    2334:	fd 82       	std	Y+5, r15	; 0x05
    2336:	ec 82       	std	Y+4, r14	; 0x04
};


void DemoStorage_Device_VTinit( DemoStorageDevice *this )
{
	this->abstract.device_vt = &DemoStorageDevice_abstract_vmt;
    2338:	8c e1       	ldi	r24, 0x1C	; 28
    233a:	92 e0       	ldi	r25, 0x02	; 2
    233c:	99 83       	std	Y+1, r25	; 0x01
    233e:	88 83       	st	Y, r24



void DemoStorage_Device_Tinit(DemoStorageDevice *this)
{
	this->vmt = &DemoStorageDevice_vmt;
    2340:	84 e1       	ldi	r24, 0x14	; 20
    2342:	92 e0       	ldi	r25, 0x02	; 2
    2344:	9b 83       	std	Y+3, r25	; 0x03
    2346:	8a 83       	std	Y+2, r24	; 0x02
{
	DemoStorageDevice *p = malloc(sizeof(DemoStorageDevice));
	p->info = infonum;
	DemoStorage_Device_VTinit(p);
	DemoStorage_Device_Tinit(p);
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
    2348:	88 e4       	ldi	r24, 0x48	; 72
    234a:	93 e0       	ldi	r25, 0x03	; 3
    234c:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <malloc>
    2350:	99 87       	std	Y+9, r25	; 0x09
    2352:	88 87       	std	Y+8, r24	; 0x08
    2354:	40 e0       	ldi	r20, 0x00	; 0
    2356:	50 e0       	ldi	r21, 0x00	; 0
{
	return TYPE_STORAGE_DEVICE;
}

DemoStorageDevice* New_DemoStorage_Device( int infonum )
{
    2358:	70 e0       	ldi	r23, 0x00	; 0
    235a:	60 e0       	ldi	r22, 0x00	; 0
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
		for( int j=0;j<MAX_NUM_DATA;j++)
		{
				p->StoragesData[i].data[j] = -9999; 
    235c:	0f 2e       	mov	r0, r31
    235e:	c1 2c       	mov	r12, r1
    2360:	fc e3       	ldi	r31, 0x3C	; 60
    2362:	df 2e       	mov	r13, r31
    2364:	fc e1       	ldi	r31, 0x1C	; 28
    2366:	ef 2e       	mov	r14, r31
    2368:	f6 ec       	ldi	r31, 0xC6	; 198
    236a:	ff 2e       	mov	r15, r31
    236c:	f0 2d       	mov	r31, r0
    236e:	2a c0       	rjmp	.+84     	; 0x23c4 <New_DemoStorage_Device+0xa8>
    2370:	e8 85       	ldd	r30, Y+8	; 0x08
    2372:	f9 85       	ldd	r31, Y+9	; 0x09
    2374:	e4 0f       	add	r30, r20
    2376:	f5 1f       	adc	r31, r21
    2378:	c9 01       	movw	r24, r18
    237a:	88 0f       	add	r24, r24
    237c:	99 1f       	adc	r25, r25
    237e:	88 0f       	add	r24, r24
    2380:	99 1f       	adc	r25, r25
    2382:	e8 0f       	add	r30, r24
    2384:	f9 1f       	adc	r31, r25
    2386:	c0 82       	st	Z, r12
    2388:	d1 82       	std	Z+1, r13	; 0x01
    238a:	e2 82       	std	Z+2, r14	; 0x02
    238c:	f3 82       	std	Z+3, r15	; 0x03
				p->StoragesData[i].data_tm.unix_msec = 0;
    238e:	e8 85       	ldd	r30, Y+8	; 0x08
    2390:	f9 85       	ldd	r31, Y+9	; 0x09
    2392:	e4 0f       	add	r30, r20
    2394:	f5 1f       	adc	r31, r21
    2396:	14 8a       	std	Z+20, r1	; 0x14
    2398:	15 8a       	std	Z+21, r1	; 0x15
    239a:	16 8a       	std	Z+22, r1	; 0x16
    239c:	17 8a       	std	Z+23, r1	; 0x17
				p->StoragesData[i].data_tm.unix_time = 0;
    239e:	e8 85       	ldd	r30, Y+8	; 0x08
    23a0:	f9 85       	ldd	r31, Y+9	; 0x09
    23a2:	e4 0f       	add	r30, r20
    23a4:	f5 1f       	adc	r31, r21
    23a6:	10 8a       	std	Z+16, r1	; 0x10
    23a8:	11 8a       	std	Z+17, r1	; 0x11
    23aa:	12 8a       	std	Z+18, r1	; 0x12
    23ac:	13 8a       	std	Z+19, r1	; 0x13
	DemoStorage_Device_VTinit(p);
	DemoStorage_Device_Tinit(p);
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
		for( int j=0;j<MAX_NUM_DATA;j++)
    23ae:	2f 5f       	subi	r18, 0xFF	; 255
    23b0:	3f 4f       	sbci	r19, 0xFF	; 255
    23b2:	24 30       	cpi	r18, 0x04	; 4
    23b4:	31 05       	cpc	r19, r1
    23b6:	e1 f6       	brne	.-72     	; 0x2370 <New_DemoStorage_Device+0x54>
    23b8:	48 5c       	subi	r20, 0xC8	; 200
    23ba:	5f 4f       	sbci	r21, 0xFF	; 255
	p->info = infonum;
	DemoStorage_Device_VTinit(p);
	DemoStorage_Device_Tinit(p);
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
    23bc:	48 34       	cpi	r20, 0x48	; 72
    23be:	83 e0       	ldi	r24, 0x03	; 3
    23c0:	58 07       	cpc	r21, r24
    23c2:	19 f0       	breq	.+6      	; 0x23ca <New_DemoStorage_Device+0xae>
{
	return TYPE_STORAGE_DEVICE;
}

DemoStorageDevice* New_DemoStorage_Device( int infonum )
{
    23c4:	27 2f       	mov	r18, r23
    23c6:	36 2f       	mov	r19, r22
    23c8:	d3 cf       	rjmp	.-90     	; 0x2370 <New_DemoStorage_Device+0x54>
		{
				p->StoragesData[i].data[j] = -9999; 
				p->StoragesData[i].data_tm.unix_msec = 0;
				p->StoragesData[i].data_tm.unix_time = 0;
		}
	p->cur_pos = 0;
    23ca:	1f 82       	std	Y+7, r1	; 0x07
    23cc:	1e 82       	std	Y+6, r1	; 0x06

	return p;
}
    23ce:	ce 01       	movw	r24, r28
    23d0:	df 91       	pop	r29
    23d2:	cf 91       	pop	r28
    23d4:	ff 90       	pop	r15
    23d6:	ef 90       	pop	r14
    23d8:	df 90       	pop	r13
    23da:	cf 90       	pop	r12
    23dc:	08 95       	ret

000023de <LoadData_Device_VTinit>:
};


void LoadData_Device_VTinit( LoadDataDevice *this )
{
	this->abstract.device_vt = &LoadDataDevice_abstract_vmt;
    23de:	2a e2       	ldi	r18, 0x2A	; 42
    23e0:	32 e0       	ldi	r19, 0x02	; 2
    23e2:	fc 01       	movw	r30, r24
    23e4:	31 83       	std	Z+1, r19	; 0x01
    23e6:	20 83       	st	Z, r18
    23e8:	08 95       	ret

000023ea <LoadData_Device_init>:
}

int LoadData_Device_init( LoadDataDevice *this )
{
	return 0;
}
    23ea:	80 e0       	ldi	r24, 0x00	; 0
    23ec:	90 e0       	ldi	r25, 0x00	; 0
    23ee:	08 95       	ret

000023f0 <LoadData_Device_reset>:

int LoadData_Device_reset( LoadDataDevice *this )
{
	return 0;
}
    23f0:	80 e0       	ldi	r24, 0x00	; 0
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	08 95       	ret

000023f6 <LoadData_Device_getType>:

int LoadData_Device_getType( LoadDataDevice *this )
{
	return TYPE_DEVICE;
}
    23f6:	85 e0       	ldi	r24, 0x05	; 5
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	08 95       	ret

000023fc <LoadData_Device_Tinit>:



void LoadData_Device_Tinit(LoadDataDevice *this)
{
	this->vmt = &LoadDataDevice_vmt;
    23fc:	24 e2       	ldi	r18, 0x24	; 36
    23fe:	32 e0       	ldi	r19, 0x02	; 2
    2400:	fc 01       	movw	r30, r24
    2402:	33 83       	std	Z+3, r19	; 0x03
    2404:	22 83       	std	Z+2, r18	; 0x02
    2406:	08 95       	ret

00002408 <LoadData_Device_Configure>:
}

int LoadData_Device_Configure(LoadDataDevice *this)
{
	return 0;
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	08 95       	ret

0000240e <LoadData_Device_Execute>:
{
	this->vmt = &LoadDataDevice_vmt;
}

int LoadData_Device_Execute(LoadDataDevice *this)
{
    240e:	cf 93       	push	r28
    2410:	df 93       	push	r29
    2412:	ec 01       	movw	r28, r24
	if( this -> store_device == NULL)
    2414:	8e 81       	ldd	r24, Y+6	; 0x06
    2416:	9f 81       	ldd	r25, Y+7	; 0x07
    2418:	89 2b       	or	r24, r25
    241a:	21 f4       	brne	.+8      	; 0x2424 <LoadData_Device_Execute+0x16>
		printf("NULL store device\n");
    241c:	8f ea       	ldi	r24, 0xAF	; 175
    241e:	94 e0       	ldi	r25, 0x04	; 4
    2420:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <puts>
	cur_data = this->store_device->vmt->get_CurDataUnit(this->store_device);
    2424:	8e 81       	ldd	r24, Y+6	; 0x06
    2426:	9f 81       	ldd	r25, Y+7	; 0x07
    2428:	dc 01       	movw	r26, r24
    242a:	12 96       	adiw	r26, 0x02	; 2
    242c:	ed 91       	ld	r30, X+
    242e:	fc 91       	ld	r31, X
    2430:	13 97       	sbiw	r26, 0x03	; 3
    2432:	06 80       	ldd	r0, Z+6	; 0x06
    2434:	f7 81       	ldd	r31, Z+7	; 0x07
    2436:	e0 2d       	mov	r30, r0
    2438:	09 95       	icall
    243a:	fc 01       	movw	r30, r24
    243c:	90 93 a3 05 	sts	0x05A3, r25
    2440:	80 93 a2 05 	sts	0x05A2, r24
	/*TODO : could init -999 here */
	
	
	if( cur_data != NULL)
    2444:	89 2b       	or	r24, r25
    2446:	b9 f1       	breq	.+110    	; 0x24b6 <LoadData_Device_Execute+0xa8>
	{
		updateTime((uint32_t)TimeStamp,cur_data->data_tm);
    2448:	40 91 c6 05 	lds	r20, 0x05C6
    244c:	50 91 c7 05 	lds	r21, 0x05C7
    2450:	60 91 c8 05 	lds	r22, 0x05C8
    2454:	70 91 c9 05 	lds	r23, 0x05C9
    2458:	cb 01       	movw	r24, r22
    245a:	ba 01       	movw	r22, r20
    245c:	88 27       	eor	r24, r24
    245e:	99 27       	eor	r25, r25
    2460:	2d b7       	in	r18, 0x3d	; 61
    2462:	3e b7       	in	r19, 0x3e	; 62
    2464:	28 52       	subi	r18, 0x28	; 40
    2466:	31 09       	sbc	r19, r1
    2468:	0f b6       	in	r0, 0x3f	; 63
    246a:	f8 94       	cli
    246c:	3e bf       	out	0x3e, r19	; 62
    246e:	0f be       	out	0x3f, r0	; 63
    2470:	2d bf       	out	0x3d, r18	; 61
    2472:	ad b7       	in	r26, 0x3d	; 61
    2474:	be b7       	in	r27, 0x3e	; 62
    2476:	11 96       	adiw	r26, 0x01	; 1
    2478:	28 e2       	ldi	r18, 0x28	; 40
    247a:	70 96       	adiw	r30, 0x10	; 16
    247c:	01 90       	ld	r0, Z+
    247e:	0d 92       	st	X+, r0
    2480:	2a 95       	dec	r18
    2482:	e1 f7       	brne	.-8      	; 0x247c <LoadData_Device_Execute+0x6e>
    2484:	0e 94 8f 0e 	call	0x1d1e	; 0x1d1e <updateTime>
		calcDate( &(cur_data->data_tm));
    2488:	8d b7       	in	r24, 0x3d	; 61
    248a:	9e b7       	in	r25, 0x3e	; 62
    248c:	88 96       	adiw	r24, 0x28	; 40
    248e:	0f b6       	in	r0, 0x3f	; 63
    2490:	f8 94       	cli
    2492:	9e bf       	out	0x3e, r25	; 62
    2494:	0f be       	out	0x3f, r0	; 63
    2496:	8d bf       	out	0x3d, r24	; 61
    2498:	80 91 a2 05 	lds	r24, 0x05A2
    249c:	90 91 a3 05 	lds	r25, 0x05A3
    24a0:	40 96       	adiw	r24, 0x10	; 16
    24a2:	0e 94 e3 0e 	call	0x1dc6	; 0x1dc6 <calcDate>
		TimeStamp = 0;
    24a6:	10 92 c6 05 	sts	0x05C6, r1
    24aa:	10 92 c7 05 	sts	0x05C7, r1
    24ae:	10 92 c8 05 	sts	0x05C8, r1
    24b2:	10 92 c9 05 	sts	0x05C9, r1
	}
	return 0;
}
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	df 91       	pop	r29
    24bc:	cf 91       	pop	r28
    24be:	08 95       	ret

000024c0 <New_LoadData_Device>:
{
	return TYPE_DEVICE;
}

LoadDataDevice* New_LoadData_Device( int infonum, DemoStorageDevice * ptr )
{
    24c0:	0f 93       	push	r16
    24c2:	1f 93       	push	r17
    24c4:	cf 93       	push	r28
    24c6:	df 93       	push	r29
    24c8:	8c 01       	movw	r16, r24
    24ca:	eb 01       	movw	r28, r22
	LoadDataDevice *p = malloc(sizeof(LoadDataDevice));
    24cc:	88 e0       	ldi	r24, 0x08	; 8
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <malloc>
    24d4:	fc 01       	movw	r30, r24
	p->info = infonum;
    24d6:	15 83       	std	Z+5, r17	; 0x05
    24d8:	04 83       	std	Z+4, r16	; 0x04
	p->store_device = ptr;
    24da:	d7 83       	std	Z+7, r29	; 0x07
    24dc:	c6 83       	std	Z+6, r28	; 0x06
};


void LoadData_Device_VTinit( LoadDataDevice *this )
{
	this->abstract.device_vt = &LoadDataDevice_abstract_vmt;
    24de:	8a e2       	ldi	r24, 0x2A	; 42
    24e0:	92 e0       	ldi	r25, 0x02	; 2
    24e2:	91 83       	std	Z+1, r25	; 0x01
    24e4:	80 83       	st	Z, r24



void LoadData_Device_Tinit(LoadDataDevice *this)
{
	this->vmt = &LoadDataDevice_vmt;
    24e6:	84 e2       	ldi	r24, 0x24	; 36
    24e8:	92 e0       	ldi	r25, 0x02	; 2
    24ea:	93 83       	std	Z+3, r25	; 0x03
    24ec:	82 83       	std	Z+2, r24	; 0x02
	p->info = infonum;
	p->store_device = ptr;
	LoadData_Device_VTinit(p);
	LoadData_Device_Tinit(p);
	return p;
}
    24ee:	cf 01       	movw	r24, r30
    24f0:	df 91       	pop	r29
    24f2:	cf 91       	pop	r28
    24f4:	1f 91       	pop	r17
    24f6:	0f 91       	pop	r16
    24f8:	08 95       	ret

000024fa <BMP280_FctnInit>:



void BMP280_FctnInit(BMP280Sensor *this)
{
	this->inherited.vmt = &BMP280_vmt;
    24fa:	2a e3       	ldi	r18, 0x3A	; 58
    24fc:	32 e0       	ldi	r19, 0x02	; 2
    24fe:	fc 01       	movw	r30, r24
    2500:	35 87       	std	Z+13, r19	; 0x0d
    2502:	24 87       	std	Z+12, r18	; 0x0c
    2504:	08 95       	ret

00002506 <BMP280_Configure>:

int BMP280_Configure(BMP280Sensor *this )
{
	// virtual function
	return 0;
}
    2506:	80 e0       	ldi	r24, 0x00	; 0
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	08 95       	ret

0000250c <BMP280_VTinit>:
	printf("BMP280_Error\n");
	return 0;
}
void BMP280_VTinit( BMP280Sensor* this)
{
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
    250c:	22 e3       	ldi	r18, 0x32	; 50
    250e:	32 e0       	ldi	r19, 0x02	; 2
    2510:	fc 01       	movw	r30, r24
    2512:	31 83       	std	Z+1, r19	; 0x01
    2514:	20 83       	st	Z, r18
    2516:	08 95       	ret

00002518 <BMP280_reset>:

int BMP280_reset( BMP280Sensor* this)
{
    // virtual function
    return 0;
}
    2518:	80 e0       	ldi	r24, 0x00	; 0
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	08 95       	ret

0000251e <BMP280_getType>:

int BMP280_getType(BMP280Sensor* this)
{
    return TYPE_SENSOR;
}
    251e:	83 e0       	ldi	r24, 0x03	; 3
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	08 95       	ret

00002524 <BMP280_Error>:
	return 0;
}

int BMP280_Error(BMP280Sensor *this )
{
	printf("BMP280_Error\n");
    2524:	81 ec       	ldi	r24, 0xC1	; 193
    2526:	94 e0       	ldi	r25, 0x04	; 4
    2528:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <puts>
	return 0;
}
    252c:	80 e0       	ldi	r24, 0x00	; 0
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	08 95       	ret

00002532 <BMP280_init>:
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
}

int BMP280_init( BMP280Sensor* this)
{
    printf("BMP280 Sensor Init\n");
    2532:	8e ec       	ldi	r24, 0xCE	; 206
    2534:	94 e0       	ldi	r25, 0x04	; 4
    2536:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <puts>
    return 0;
}
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	08 95       	ret

00002540 <BMP280_Request>:
	// virtual function
	return 0;
}

int BMP280_Request(BMP280Sensor *this )
{
    2540:	cf 93       	push	r28
    2542:	df 93       	push	r29
	printf("BMP280 Request\n");
    2544:	81 ee       	ldi	r24, 0xE1	; 225
    2546:	94 e0       	ldi	r25, 0x04	; 4
    2548:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <puts>
	int Delay = BMP280_StartMeasurment();
    254c:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <BMP280_StartMeasurment>
    2550:	c8 2f       	mov	r28, r24
    2552:	d0 e0       	ldi	r29, 0x00	; 0
	printf("\tWait for %d ms\n",Delay);
    2554:	1f 92       	push	r1
    2556:	8f 93       	push	r24
    2558:	80 ef       	ldi	r24, 0xF0	; 240
    255a:	94 e0       	ldi	r25, 0x04	; 4
    255c:	9f 93       	push	r25
    255e:	8f 93       	push	r24
    2560:	0e 94 bb 1c 	call	0x3976	; 0x3976 <printf>
	if( Delay == 0 )
    2564:	0f 90       	pop	r0
    2566:	0f 90       	pop	r0
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	20 97       	sbiw	r28, 0x00	; 0
    256e:	19 f0       	breq	.+6      	; 0x2576 <BMP280_Request+0x36>
		return 0;
	else
		return ( 1 + Delay );
    2570:	ce 01       	movw	r24, r28
    2572:	01 96       	adiw	r24, 0x01	; 1
    2574:	02 c0       	rjmp	.+4      	; 0x257a <BMP280_Request+0x3a>
{
	printf("BMP280 Request\n");
	int Delay = BMP280_StartMeasurment();
	printf("\tWait for %d ms\n",Delay);
	if( Delay == 0 )
		return 0;
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	90 e0       	ldi	r25, 0x00	; 0
	else
		return ( 1 + Delay );
}
    257a:	df 91       	pop	r29
    257c:	cf 91       	pop	r28
    257e:	08 95       	ret

00002580 <BMP280_Collect>:

int BMP280_Collect(BMP280Sensor *this )
{
    2580:	cf 93       	push	r28
    2582:	df 93       	push	r29
    2584:	cd b7       	in	r28, 0x3d	; 61
    2586:	de b7       	in	r29, 0x3e	; 62
    2588:	28 97       	sbiw	r28, 0x08	; 8
    258a:	0f b6       	in	r0, 0x3f	; 63
    258c:	f8 94       	cli
    258e:	de bf       	out	0x3e, r29	; 62
    2590:	0f be       	out	0x3f, r0	; 63
    2592:	cd bf       	out	0x3d, r28	; 61
	printf("BMP280 Collect\n");
    2594:	81 e0       	ldi	r24, 0x01	; 1
    2596:	95 e0       	ldi	r25, 0x05	; 5
    2598:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <puts>
	double T, P;
	BMP280_GetTemperatureAndPressure(&T,&P);
    259c:	be 01       	movw	r22, r28
    259e:	6b 5f       	subi	r22, 0xFB	; 251
    25a0:	7f 4f       	sbci	r23, 0xFF	; 255
    25a2:	ce 01       	movw	r24, r28
    25a4:	01 96       	adiw	r24, 0x01	; 1
    25a6:	0e 94 32 06 	call	0xc64	; 0xc64 <BMP280_GetTemperatureAndPressure>
	printf("\tTemperature = %.3f\n\tPressure = %.3f\n",T,P);
    25aa:	88 85       	ldd	r24, Y+8	; 0x08
    25ac:	8f 93       	push	r24
    25ae:	8f 81       	ldd	r24, Y+7	; 0x07
    25b0:	8f 93       	push	r24
    25b2:	8e 81       	ldd	r24, Y+6	; 0x06
    25b4:	8f 93       	push	r24
    25b6:	8d 81       	ldd	r24, Y+5	; 0x05
    25b8:	8f 93       	push	r24
    25ba:	8c 81       	ldd	r24, Y+4	; 0x04
    25bc:	8f 93       	push	r24
    25be:	8b 81       	ldd	r24, Y+3	; 0x03
    25c0:	8f 93       	push	r24
    25c2:	8a 81       	ldd	r24, Y+2	; 0x02
    25c4:	8f 93       	push	r24
    25c6:	89 81       	ldd	r24, Y+1	; 0x01
    25c8:	8f 93       	push	r24
    25ca:	80 e1       	ldi	r24, 0x10	; 16
    25cc:	95 e0       	ldi	r25, 0x05	; 5
    25ce:	9f 93       	push	r25
    25d0:	8f 93       	push	r24
    25d2:	0e 94 bb 1c 	call	0x3976	; 0x3976 <printf>
	/*
	for( int i = 0 ; i = this->inherited.getStartNum(); i < this->inherited.getEndNum() )
	{
	}
	*/
	cur_data->data[0] = T;
    25d6:	e0 91 a2 05 	lds	r30, 0x05A2
    25da:	f0 91 a3 05 	lds	r31, 0x05A3
    25de:	89 81       	ldd	r24, Y+1	; 0x01
    25e0:	9a 81       	ldd	r25, Y+2	; 0x02
    25e2:	ab 81       	ldd	r26, Y+3	; 0x03
    25e4:	bc 81       	ldd	r27, Y+4	; 0x04
    25e6:	80 83       	st	Z, r24
    25e8:	91 83       	std	Z+1, r25	; 0x01
    25ea:	a2 83       	std	Z+2, r26	; 0x02
    25ec:	b3 83       	std	Z+3, r27	; 0x03
	cur_data->data[1] = P; 
    25ee:	e0 91 a2 05 	lds	r30, 0x05A2
    25f2:	f0 91 a3 05 	lds	r31, 0x05A3
    25f6:	8d 81       	ldd	r24, Y+5	; 0x05
    25f8:	9e 81       	ldd	r25, Y+6	; 0x06
    25fa:	af 81       	ldd	r26, Y+7	; 0x07
    25fc:	b8 85       	ldd	r27, Y+8	; 0x08
    25fe:	84 83       	std	Z+4, r24	; 0x04
    2600:	95 83       	std	Z+5, r25	; 0x05
    2602:	a6 83       	std	Z+6, r26	; 0x06
    2604:	b7 83       	std	Z+7, r27	; 0x07
	return 0;
    2606:	0f b6       	in	r0, 0x3f	; 63
    2608:	f8 94       	cli
    260a:	de bf       	out	0x3e, r29	; 62
    260c:	0f be       	out	0x3f, r0	; 63
    260e:	cd bf       	out	0x3d, r28	; 61
}
    2610:	80 e0       	ldi	r24, 0x00	; 0
    2612:	90 e0       	ldi	r25, 0x00	; 0
    2614:	28 96       	adiw	r28, 0x08	; 8
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	f8 94       	cli
    261a:	de bf       	out	0x3e, r29	; 62
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	cd bf       	out	0x3d, r28	; 61
    2620:	df 91       	pop	r29
    2622:	cf 91       	pop	r28
    2624:	08 95       	ret

00002626 <New_BMP280_Sensor>:
    return TYPE_SENSOR;
}


BMP280Sensor* New_BMP280_Sensor( int num, int NumData )
{
    2626:	ef 92       	push	r14
    2628:	ff 92       	push	r15
    262a:	0f 93       	push	r16
    262c:	1f 93       	push	r17
    262e:	cf 93       	push	r28
    2630:	df 93       	push	r29
    2632:	7c 01       	movw	r14, r24
    2634:	8b 01       	movw	r16, r22
	BMP280Sensor *p = malloc(sizeof(BMP280Sensor));
    2636:	8e e0       	ldi	r24, 0x0E	; 14
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <malloc>
    263e:	ec 01       	movw	r28, r24
	printf("BMP280_Error\n");
	return 0;
}
void BMP280_VTinit( BMP280Sensor* this)
{
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
    2640:	82 e3       	ldi	r24, 0x32	; 50
    2642:	92 e0       	ldi	r25, 0x02	; 2
    2644:	99 83       	std	Y+1, r25	; 0x01
    2646:	88 83       	st	Y, r24



void BMP280_FctnInit(BMP280Sensor *this)
{
	this->inherited.vmt = &BMP280_vmt;
    2648:	8a e3       	ldi	r24, 0x3A	; 58
    264a:	92 e0       	ldi	r25, 0x02	; 2
    264c:	9d 87       	std	Y+13, r25	; 0x0d
    264e:	8c 87       	std	Y+12, r24	; 0x0c
BMP280Sensor* New_BMP280_Sensor( int num, int NumData )
{
	BMP280Sensor *p = malloc(sizeof(BMP280Sensor));
    BMP280_VTinit( p );
    BMP280_FctnInit( p );
	p->inherited.test_num = num;
    2650:	fb 82       	std	Y+3, r15	; 0x03
    2652:	ea 82       	std	Y+2, r14	; 0x02
	
	p->inherited.NumOfData = NumData;
    2654:	1f 83       	std	Y+7, r17	; 0x07
    2656:	0e 83       	std	Y+6, r16	; 0x06
	p->inherited.StartNum = SensorDataCount;
    2658:	80 91 31 0a 	lds	r24, 0x0A31
    265c:	90 91 32 0a 	lds	r25, 0x0A32
    2660:	9d 83       	std	Y+5, r25	; 0x05
    2662:	8c 83       	std	Y+4, r24	; 0x04
	SensorDataCount += NumData;
    2664:	b8 01       	movw	r22, r16
    2666:	68 0f       	add	r22, r24
    2668:	79 1f       	adc	r23, r25
    266a:	70 93 32 0a 	sts	0x0A32, r23
    266e:	60 93 31 0a 	sts	0x0A31, r22
	printf("SensorDataCount %d\n",SensorDataCount);
    2672:	7f 93       	push	r23
    2674:	6f 93       	push	r22
    2676:	86 e3       	ldi	r24, 0x36	; 54
    2678:	95 e0       	ldi	r25, 0x05	; 5
    267a:	9f 93       	push	r25
    267c:	8f 93       	push	r24
    267e:	0e 94 bb 1c 	call	0x3976	; 0x3976 <printf>
	//printf("get start %d end %d\n",p->inherited.getStartNum(& (p->inherited) ),p->inherited.getEndNum(& (p->inherited)));
	
	return p;
    2682:	0f 90       	pop	r0
    2684:	0f 90       	pop	r0
    2686:	0f 90       	pop	r0
    2688:	0f 90       	pop	r0
    268a:	ce 01       	movw	r24, r28
    268c:	df 91       	pop	r29
    268e:	cf 91       	pop	r28
    2690:	1f 91       	pop	r17
    2692:	0f 91       	pop	r16
    2694:	ff 90       	pop	r15
    2696:	ef 90       	pop	r14
    2698:	08 95       	ret

0000269a <Si7020_FctnInit>:



void Si7020_FctnInit(Si7020Sensor *this)
{
	this->inherited.vmt = &Si7020_vmt;
    269a:	2c e4       	ldi	r18, 0x4C	; 76
    269c:	32 e0       	ldi	r19, 0x02	; 2
    269e:	fc 01       	movw	r30, r24
    26a0:	35 87       	std	Z+13, r19	; 0x0d
    26a2:	24 87       	std	Z+12, r18	; 0x0c
    26a4:	08 95       	ret

000026a6 <Si7020_Configure>:

int Si7020_Configure(Si7020Sensor *this )
{
	// virtual function
	return 0;
}
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	08 95       	ret

000026ac <Si7020_Error>:

int Si7020_Error(Si7020Sensor *this )
{
	// virtual function
	return 0;
}
    26ac:	80 e0       	ldi	r24, 0x00	; 0
    26ae:	90 e0       	ldi	r25, 0x00	; 0
    26b0:	08 95       	ret

000026b2 <Si7020_VTinit>:
void Si7020_VTinit( Si7020Sensor* this)
{
	this->inherited.abstract.device_vt = &Si7020_abstract_vmt;
    26b2:	24 e4       	ldi	r18, 0x44	; 68
    26b4:	32 e0       	ldi	r19, 0x02	; 2
    26b6:	fc 01       	movw	r30, r24
    26b8:	31 83       	std	Z+1, r19	; 0x01
    26ba:	20 83       	st	Z, r18
    26bc:	08 95       	ret

000026be <Si7020_reset>:

int Si7020_reset( Si7020Sensor* this)
{
	// virtual function
	return 0;
}
    26be:	80 e0       	ldi	r24, 0x00	; 0
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	08 95       	ret

000026c4 <Si7020_getType>:

int Si7020_getType(Si7020Sensor* this)
{
	return TYPE_SENSOR;
}
    26c4:	83 e0       	ldi	r24, 0x03	; 3
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	08 95       	ret

000026ca <Si7020_Init>:
	this->inherited.abstract.device_vt = &Si7020_abstract_vmt;
}

int Si7020_Init( Si7020Sensor* this)
{
	printf("Si7020 Sensor Init\n");
    26ca:	8a e4       	ldi	r24, 0x4A	; 74
    26cc:	95 e0       	ldi	r25, 0x05	; 5
    26ce:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <puts>
	return 0;
}
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	08 95       	ret

000026d8 <Si7020_Request>:
	// virtual function
	return 0;
}

int Si7020_Request(Si7020Sensor *this )
{
    26d8:	cf 93       	push	r28
    26da:	df 93       	push	r29
    26dc:	ec 01       	movw	r28, r24
	printf("Si7020_Request\n");
    26de:	8d e5       	ldi	r24, 0x5D	; 93
    26e0:	95 e0       	ldi	r25, 0x05	; 5
    26e2:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <puts>
	Si7020_readTemperature(this->temperature_data,3);
    26e6:	63 e0       	ldi	r22, 0x03	; 3
    26e8:	ce 01       	movw	r24, r28
    26ea:	0e 96       	adiw	r24, 0x0e	; 14
    26ec:	0e 94 c8 06 	call	0xd90	; 0xd90 <Si7020_readTemperature>
	Si7020_readHumidity(this->humility_data,3);
    26f0:	63 e0       	ldi	r22, 0x03	; 3
    26f2:	ce 01       	movw	r24, r28
    26f4:	41 96       	adiw	r24, 0x11	; 17
    26f6:	0e 94 78 06 	call	0xcf0	; 0xcf0 <Si7020_readHumidity>
	return 0;
}
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	df 91       	pop	r29
    2700:	cf 91       	pop	r28
    2702:	08 95       	ret

00002704 <Si7020_Collect>:

int Si7020_Collect(Si7020Sensor *this )
{
    2704:	cf 92       	push	r12
    2706:	df 92       	push	r13
    2708:	ef 92       	push	r14
    270a:	ff 92       	push	r15
    270c:	0f 93       	push	r16
    270e:	1f 93       	push	r17
    2710:	cf 93       	push	r28
    2712:	df 93       	push	r29
    2714:	ec 01       	movw	r28, r24
	printf("Si7020_Collect\n");
    2716:	8c e6       	ldi	r24, 0x6C	; 108
    2718:	95 e0       	ldi	r25, 0x05	; 5
    271a:	0e 94 d8 1c 	call	0x39b0	; 0x39b0 <puts>
	float T = Si7020_calTemperature(this->temperature_data);
    271e:	ce 01       	movw	r24, r28
    2720:	0e 96       	adiw	r24, 0x0e	; 14
    2722:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <Si7020_calTemperature>
    2726:	c6 2e       	mov	r12, r22
    2728:	d7 2e       	mov	r13, r23
    272a:	e8 2e       	mov	r14, r24
    272c:	f9 2e       	mov	r15, r25
	float H = Si7020_calHumidity(this->humility_data);
    272e:	ce 01       	movw	r24, r28
    2730:	41 96       	adiw	r24, 0x11	; 17
    2732:	0e 94 aa 06 	call	0xd54	; 0xd54 <Si7020_calHumidity>
    2736:	06 2f       	mov	r16, r22
    2738:	17 2f       	mov	r17, r23
    273a:	d8 2f       	mov	r29, r24
    273c:	c9 2f       	mov	r28, r25
	printf("\tTemperature = %.3f\n\tHumility = %.3f\n",T,H);
    273e:	9f 93       	push	r25
    2740:	8f 93       	push	r24
    2742:	7f 93       	push	r23
    2744:	6f 93       	push	r22
    2746:	ff 92       	push	r15
    2748:	ef 92       	push	r14
    274a:	df 92       	push	r13
    274c:	cf 92       	push	r12
    274e:	8b e7       	ldi	r24, 0x7B	; 123
    2750:	95 e0       	ldi	r25, 0x05	; 5
    2752:	9f 93       	push	r25
    2754:	8f 93       	push	r24
    2756:	0e 94 bb 1c 	call	0x3976	; 0x3976 <printf>
	cur_data->data[2] = T;
    275a:	e0 91 a2 05 	lds	r30, 0x05A2
    275e:	f0 91 a3 05 	lds	r31, 0x05A3
    2762:	4c 2d       	mov	r20, r12
    2764:	5d 2d       	mov	r21, r13
    2766:	6e 2d       	mov	r22, r14
    2768:	7f 2d       	mov	r23, r15
    276a:	40 87       	std	Z+8, r20	; 0x08
    276c:	51 87       	std	Z+9, r21	; 0x09
    276e:	62 87       	std	Z+10, r22	; 0x0a
    2770:	73 87       	std	Z+11, r23	; 0x0b
	cur_data->data[3] = H;
    2772:	80 2f       	mov	r24, r16
    2774:	91 2f       	mov	r25, r17
    2776:	ad 2f       	mov	r26, r29
    2778:	bc 2f       	mov	r27, r28
    277a:	84 87       	std	Z+12, r24	; 0x0c
    277c:	95 87       	std	Z+13, r25	; 0x0d
    277e:	a6 87       	std	Z+14, r26	; 0x0e
    2780:	b7 87       	std	Z+15, r27	; 0x0f
	return 0;
    2782:	8d b7       	in	r24, 0x3d	; 61
    2784:	9e b7       	in	r25, 0x3e	; 62
    2786:	0a 96       	adiw	r24, 0x0a	; 10
    2788:	0f b6       	in	r0, 0x3f	; 63
    278a:	f8 94       	cli
    278c:	9e bf       	out	0x3e, r25	; 62
    278e:	0f be       	out	0x3f, r0	; 63
    2790:	8d bf       	out	0x3d, r24	; 61
}
    2792:	80 e0       	ldi	r24, 0x00	; 0
    2794:	90 e0       	ldi	r25, 0x00	; 0
    2796:	df 91       	pop	r29
    2798:	cf 91       	pop	r28
    279a:	1f 91       	pop	r17
    279c:	0f 91       	pop	r16
    279e:	ff 90       	pop	r15
    27a0:	ef 90       	pop	r14
    27a2:	df 90       	pop	r13
    27a4:	cf 90       	pop	r12
    27a6:	08 95       	ret

000027a8 <New_Si7020_Sensor>:
	return TYPE_SENSOR;
}


Si7020Sensor* New_Si7020_Sensor( int num, int NumData)
{
    27a8:	ef 92       	push	r14
    27aa:	ff 92       	push	r15
    27ac:	0f 93       	push	r16
    27ae:	1f 93       	push	r17
    27b0:	cf 93       	push	r28
    27b2:	df 93       	push	r29
    27b4:	7c 01       	movw	r14, r24
    27b6:	8b 01       	movw	r16, r22
	Si7020Sensor *p = malloc(sizeof(Si7020Sensor));
    27b8:	84 e1       	ldi	r24, 0x14	; 20
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	0e 94 68 1a 	call	0x34d0	; 0x34d0 <malloc>
    27c0:	ec 01       	movw	r28, r24
	// virtual function
	return 0;
}
void Si7020_VTinit( Si7020Sensor* this)
{
	this->inherited.abstract.device_vt = &Si7020_abstract_vmt;
    27c2:	84 e4       	ldi	r24, 0x44	; 68
    27c4:	92 e0       	ldi	r25, 0x02	; 2
    27c6:	99 83       	std	Y+1, r25	; 0x01
    27c8:	88 83       	st	Y, r24



void Si7020_FctnInit(Si7020Sensor *this)
{
	this->inherited.vmt = &Si7020_vmt;
    27ca:	8c e4       	ldi	r24, 0x4C	; 76
    27cc:	92 e0       	ldi	r25, 0x02	; 2
    27ce:	9d 87       	std	Y+13, r25	; 0x0d
    27d0:	8c 87       	std	Y+12, r24	; 0x0c
Si7020Sensor* New_Si7020_Sensor( int num, int NumData)
{
	Si7020Sensor *p = malloc(sizeof(Si7020Sensor));
	Si7020_VTinit( p );
	Si7020_FctnInit( p );
	p->inherited.test_num = num;
    27d2:	fb 82       	std	Y+3, r15	; 0x03
    27d4:	ea 82       	std	Y+2, r14	; 0x02
	
	p->inherited.NumOfData = NumData;
    27d6:	1f 83       	std	Y+7, r17	; 0x07
    27d8:	0e 83       	std	Y+6, r16	; 0x06
	p->inherited.StartNum = SensorDataCount;
    27da:	80 91 31 0a 	lds	r24, 0x0A31
    27de:	90 91 32 0a 	lds	r25, 0x0A32
    27e2:	9d 83       	std	Y+5, r25	; 0x05
    27e4:	8c 83       	std	Y+4, r24	; 0x04
	SensorDataCount += NumData;
    27e6:	b8 01       	movw	r22, r16
    27e8:	68 0f       	add	r22, r24
    27ea:	79 1f       	adc	r23, r25
    27ec:	70 93 32 0a 	sts	0x0A32, r23
    27f0:	60 93 31 0a 	sts	0x0A31, r22
	printf("SensorDataCount %d\n",SensorDataCount);
    27f4:	7f 93       	push	r23
    27f6:	6f 93       	push	r22
    27f8:	86 e3       	ldi	r24, 0x36	; 54
    27fa:	95 e0       	ldi	r25, 0x05	; 5
    27fc:	9f 93       	push	r25
    27fe:	8f 93       	push	r24
    2800:	0e 94 bb 1c 	call	0x3976	; 0x3976 <printf>
	
	for(int i = 0; i < 3; ++i )
	{
		p->temperature_data[i] = 0;
    2804:	1e 86       	std	Y+14, r1	; 0x0e
		p->humility_data[i] = 0;
    2806:	19 8a       	std	Y+17, r1	; 0x11
	SensorDataCount += NumData;
	printf("SensorDataCount %d\n",SensorDataCount);
	
	for(int i = 0; i < 3; ++i )
	{
		p->temperature_data[i] = 0;
    2808:	1f 86       	std	Y+15, r1	; 0x0f
		p->humility_data[i] = 0;
    280a:	1a 8a       	std	Y+18, r1	; 0x12
	SensorDataCount += NumData;
	printf("SensorDataCount %d\n",SensorDataCount);
	
	for(int i = 0; i < 3; ++i )
	{
		p->temperature_data[i] = 0;
    280c:	18 8a       	std	Y+16, r1	; 0x10
		p->humility_data[i] = 0;
    280e:	1b 8a       	std	Y+19, r1	; 0x13
	}
	
	return p;
    2810:	0f 90       	pop	r0
    2812:	0f 90       	pop	r0
    2814:	0f 90       	pop	r0
    2816:	0f 90       	pop	r0
    2818:	ce 01       	movw	r24, r28
    281a:	df 91       	pop	r29
    281c:	cf 91       	pop	r28
    281e:	1f 91       	pop	r17
    2820:	0f 91       	pop	r16
    2822:	ff 90       	pop	r15
    2824:	ef 90       	pop	r14
    2826:	08 95       	ret

00002828 <__subsf3>:
    2828:	50 58       	subi	r21, 0x80	; 128

0000282a <__addsf3>:
    282a:	bb 27       	eor	r27, r27
    282c:	aa 27       	eor	r26, r26
    282e:	0e 94 2c 14 	call	0x2858	; 0x2858 <__addsf3x>
    2832:	0c 94 a6 15 	jmp	0x2b4c	; 0x2b4c <__fp_round>
    2836:	0e 94 98 15 	call	0x2b30	; 0x2b30 <__fp_pscA>
    283a:	38 f0       	brcs	.+14     	; 0x284a <__addsf3+0x20>
    283c:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__fp_pscB>
    2840:	20 f0       	brcs	.+8      	; 0x284a <__addsf3+0x20>
    2842:	39 f4       	brne	.+14     	; 0x2852 <__addsf3+0x28>
    2844:	9f 3f       	cpi	r25, 0xFF	; 255
    2846:	19 f4       	brne	.+6      	; 0x284e <__addsf3+0x24>
    2848:	26 f4       	brtc	.+8      	; 0x2852 <__addsf3+0x28>
    284a:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__fp_nan>
    284e:	0e f4       	brtc	.+2      	; 0x2852 <__addsf3+0x28>
    2850:	e0 95       	com	r30
    2852:	e7 fb       	bst	r30, 7
    2854:	0c 94 8f 15 	jmp	0x2b1e	; 0x2b1e <__fp_inf>

00002858 <__addsf3x>:
    2858:	e9 2f       	mov	r30, r25
    285a:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__fp_split3>
    285e:	58 f3       	brcs	.-42     	; 0x2836 <__addsf3+0xc>
    2860:	ba 17       	cp	r27, r26
    2862:	62 07       	cpc	r22, r18
    2864:	73 07       	cpc	r23, r19
    2866:	84 07       	cpc	r24, r20
    2868:	95 07       	cpc	r25, r21
    286a:	20 f0       	brcs	.+8      	; 0x2874 <__addsf3x+0x1c>
    286c:	79 f4       	brne	.+30     	; 0x288c <__addsf3x+0x34>
    286e:	a6 f5       	brtc	.+104    	; 0x28d8 <__addsf3x+0x80>
    2870:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__fp_zero>
    2874:	0e f4       	brtc	.+2      	; 0x2878 <__addsf3x+0x20>
    2876:	e0 95       	com	r30
    2878:	0b 2e       	mov	r0, r27
    287a:	ba 2f       	mov	r27, r26
    287c:	a0 2d       	mov	r26, r0
    287e:	0b 01       	movw	r0, r22
    2880:	b9 01       	movw	r22, r18
    2882:	90 01       	movw	r18, r0
    2884:	0c 01       	movw	r0, r24
    2886:	ca 01       	movw	r24, r20
    2888:	a0 01       	movw	r20, r0
    288a:	11 24       	eor	r1, r1
    288c:	ff 27       	eor	r31, r31
    288e:	59 1b       	sub	r21, r25
    2890:	99 f0       	breq	.+38     	; 0x28b8 <__addsf3x+0x60>
    2892:	59 3f       	cpi	r21, 0xF9	; 249
    2894:	50 f4       	brcc	.+20     	; 0x28aa <__addsf3x+0x52>
    2896:	50 3e       	cpi	r21, 0xE0	; 224
    2898:	68 f1       	brcs	.+90     	; 0x28f4 <__addsf3x+0x9c>
    289a:	1a 16       	cp	r1, r26
    289c:	f0 40       	sbci	r31, 0x00	; 0
    289e:	a2 2f       	mov	r26, r18
    28a0:	23 2f       	mov	r18, r19
    28a2:	34 2f       	mov	r19, r20
    28a4:	44 27       	eor	r20, r20
    28a6:	58 5f       	subi	r21, 0xF8	; 248
    28a8:	f3 cf       	rjmp	.-26     	; 0x2890 <__addsf3x+0x38>
    28aa:	46 95       	lsr	r20
    28ac:	37 95       	ror	r19
    28ae:	27 95       	ror	r18
    28b0:	a7 95       	ror	r26
    28b2:	f0 40       	sbci	r31, 0x00	; 0
    28b4:	53 95       	inc	r21
    28b6:	c9 f7       	brne	.-14     	; 0x28aa <__addsf3x+0x52>
    28b8:	7e f4       	brtc	.+30     	; 0x28d8 <__addsf3x+0x80>
    28ba:	1f 16       	cp	r1, r31
    28bc:	ba 0b       	sbc	r27, r26
    28be:	62 0b       	sbc	r22, r18
    28c0:	73 0b       	sbc	r23, r19
    28c2:	84 0b       	sbc	r24, r20
    28c4:	ba f0       	brmi	.+46     	; 0x28f4 <__addsf3x+0x9c>
    28c6:	91 50       	subi	r25, 0x01	; 1
    28c8:	a1 f0       	breq	.+40     	; 0x28f2 <__addsf3x+0x9a>
    28ca:	ff 0f       	add	r31, r31
    28cc:	bb 1f       	adc	r27, r27
    28ce:	66 1f       	adc	r22, r22
    28d0:	77 1f       	adc	r23, r23
    28d2:	88 1f       	adc	r24, r24
    28d4:	c2 f7       	brpl	.-16     	; 0x28c6 <__addsf3x+0x6e>
    28d6:	0e c0       	rjmp	.+28     	; 0x28f4 <__addsf3x+0x9c>
    28d8:	ba 0f       	add	r27, r26
    28da:	62 1f       	adc	r22, r18
    28dc:	73 1f       	adc	r23, r19
    28de:	84 1f       	adc	r24, r20
    28e0:	48 f4       	brcc	.+18     	; 0x28f4 <__addsf3x+0x9c>
    28e2:	87 95       	ror	r24
    28e4:	77 95       	ror	r23
    28e6:	67 95       	ror	r22
    28e8:	b7 95       	ror	r27
    28ea:	f7 95       	ror	r31
    28ec:	9e 3f       	cpi	r25, 0xFE	; 254
    28ee:	08 f0       	brcs	.+2      	; 0x28f2 <__addsf3x+0x9a>
    28f0:	b0 cf       	rjmp	.-160    	; 0x2852 <__addsf3+0x28>
    28f2:	93 95       	inc	r25
    28f4:	88 0f       	add	r24, r24
    28f6:	08 f0       	brcs	.+2      	; 0x28fa <__addsf3x+0xa2>
    28f8:	99 27       	eor	r25, r25
    28fa:	ee 0f       	add	r30, r30
    28fc:	97 95       	ror	r25
    28fe:	87 95       	ror	r24
    2900:	08 95       	ret

00002902 <__cmpsf2>:
    2902:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__fp_cmp>
    2906:	08 f4       	brcc	.+2      	; 0x290a <__cmpsf2+0x8>
    2908:	81 e0       	ldi	r24, 0x01	; 1
    290a:	08 95       	ret

0000290c <__divsf3>:
    290c:	0e 94 9a 14 	call	0x2934	; 0x2934 <__divsf3x>
    2910:	0c 94 a6 15 	jmp	0x2b4c	; 0x2b4c <__fp_round>
    2914:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__fp_pscB>
    2918:	58 f0       	brcs	.+22     	; 0x2930 <__divsf3+0x24>
    291a:	0e 94 98 15 	call	0x2b30	; 0x2b30 <__fp_pscA>
    291e:	40 f0       	brcs	.+16     	; 0x2930 <__divsf3+0x24>
    2920:	29 f4       	brne	.+10     	; 0x292c <__divsf3+0x20>
    2922:	5f 3f       	cpi	r21, 0xFF	; 255
    2924:	29 f0       	breq	.+10     	; 0x2930 <__divsf3+0x24>
    2926:	0c 94 8f 15 	jmp	0x2b1e	; 0x2b1e <__fp_inf>
    292a:	51 11       	cpse	r21, r1
    292c:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__fp_szero>
    2930:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__fp_nan>

00002934 <__divsf3x>:
    2934:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__fp_split3>
    2938:	68 f3       	brcs	.-38     	; 0x2914 <__divsf3+0x8>

0000293a <__divsf3_pse>:
    293a:	99 23       	and	r25, r25
    293c:	b1 f3       	breq	.-20     	; 0x292a <__divsf3+0x1e>
    293e:	55 23       	and	r21, r21
    2940:	91 f3       	breq	.-28     	; 0x2926 <__divsf3+0x1a>
    2942:	95 1b       	sub	r25, r21
    2944:	55 0b       	sbc	r21, r21
    2946:	bb 27       	eor	r27, r27
    2948:	aa 27       	eor	r26, r26
    294a:	62 17       	cp	r22, r18
    294c:	73 07       	cpc	r23, r19
    294e:	84 07       	cpc	r24, r20
    2950:	38 f0       	brcs	.+14     	; 0x2960 <__divsf3_pse+0x26>
    2952:	9f 5f       	subi	r25, 0xFF	; 255
    2954:	5f 4f       	sbci	r21, 0xFF	; 255
    2956:	22 0f       	add	r18, r18
    2958:	33 1f       	adc	r19, r19
    295a:	44 1f       	adc	r20, r20
    295c:	aa 1f       	adc	r26, r26
    295e:	a9 f3       	breq	.-22     	; 0x294a <__divsf3_pse+0x10>
    2960:	35 d0       	rcall	.+106    	; 0x29cc <__divsf3_pse+0x92>
    2962:	0e 2e       	mov	r0, r30
    2964:	3a f0       	brmi	.+14     	; 0x2974 <__divsf3_pse+0x3a>
    2966:	e0 e8       	ldi	r30, 0x80	; 128
    2968:	32 d0       	rcall	.+100    	; 0x29ce <__divsf3_pse+0x94>
    296a:	91 50       	subi	r25, 0x01	; 1
    296c:	50 40       	sbci	r21, 0x00	; 0
    296e:	e6 95       	lsr	r30
    2970:	00 1c       	adc	r0, r0
    2972:	ca f7       	brpl	.-14     	; 0x2966 <__divsf3_pse+0x2c>
    2974:	2b d0       	rcall	.+86     	; 0x29cc <__divsf3_pse+0x92>
    2976:	fe 2f       	mov	r31, r30
    2978:	29 d0       	rcall	.+82     	; 0x29cc <__divsf3_pse+0x92>
    297a:	66 0f       	add	r22, r22
    297c:	77 1f       	adc	r23, r23
    297e:	88 1f       	adc	r24, r24
    2980:	bb 1f       	adc	r27, r27
    2982:	26 17       	cp	r18, r22
    2984:	37 07       	cpc	r19, r23
    2986:	48 07       	cpc	r20, r24
    2988:	ab 07       	cpc	r26, r27
    298a:	b0 e8       	ldi	r27, 0x80	; 128
    298c:	09 f0       	breq	.+2      	; 0x2990 <__divsf3_pse+0x56>
    298e:	bb 0b       	sbc	r27, r27
    2990:	80 2d       	mov	r24, r0
    2992:	bf 01       	movw	r22, r30
    2994:	ff 27       	eor	r31, r31
    2996:	93 58       	subi	r25, 0x83	; 131
    2998:	5f 4f       	sbci	r21, 0xFF	; 255
    299a:	3a f0       	brmi	.+14     	; 0x29aa <__divsf3_pse+0x70>
    299c:	9e 3f       	cpi	r25, 0xFE	; 254
    299e:	51 05       	cpc	r21, r1
    29a0:	78 f0       	brcs	.+30     	; 0x29c0 <__divsf3_pse+0x86>
    29a2:	0c 94 8f 15 	jmp	0x2b1e	; 0x2b1e <__fp_inf>
    29a6:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__fp_szero>
    29aa:	5f 3f       	cpi	r21, 0xFF	; 255
    29ac:	e4 f3       	brlt	.-8      	; 0x29a6 <__divsf3_pse+0x6c>
    29ae:	98 3e       	cpi	r25, 0xE8	; 232
    29b0:	d4 f3       	brlt	.-12     	; 0x29a6 <__divsf3_pse+0x6c>
    29b2:	86 95       	lsr	r24
    29b4:	77 95       	ror	r23
    29b6:	67 95       	ror	r22
    29b8:	b7 95       	ror	r27
    29ba:	f7 95       	ror	r31
    29bc:	9f 5f       	subi	r25, 0xFF	; 255
    29be:	c9 f7       	brne	.-14     	; 0x29b2 <__divsf3_pse+0x78>
    29c0:	88 0f       	add	r24, r24
    29c2:	91 1d       	adc	r25, r1
    29c4:	96 95       	lsr	r25
    29c6:	87 95       	ror	r24
    29c8:	97 f9       	bld	r25, 7
    29ca:	08 95       	ret
    29cc:	e1 e0       	ldi	r30, 0x01	; 1
    29ce:	66 0f       	add	r22, r22
    29d0:	77 1f       	adc	r23, r23
    29d2:	88 1f       	adc	r24, r24
    29d4:	bb 1f       	adc	r27, r27
    29d6:	62 17       	cp	r22, r18
    29d8:	73 07       	cpc	r23, r19
    29da:	84 07       	cpc	r24, r20
    29dc:	ba 07       	cpc	r27, r26
    29de:	20 f0       	brcs	.+8      	; 0x29e8 <__divsf3_pse+0xae>
    29e0:	62 1b       	sub	r22, r18
    29e2:	73 0b       	sbc	r23, r19
    29e4:	84 0b       	sbc	r24, r20
    29e6:	ba 0b       	sbc	r27, r26
    29e8:	ee 1f       	adc	r30, r30
    29ea:	88 f7       	brcc	.-30     	; 0x29ce <__divsf3_pse+0x94>
    29ec:	e0 95       	com	r30
    29ee:	08 95       	ret

000029f0 <__fixsfsi>:
    29f0:	0e 94 ff 14 	call	0x29fe	; 0x29fe <__fixunssfsi>
    29f4:	68 94       	set
    29f6:	b1 11       	cpse	r27, r1
    29f8:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__fp_szero>
    29fc:	08 95       	ret

000029fe <__fixunssfsi>:
    29fe:	0e 94 bf 15 	call	0x2b7e	; 0x2b7e <__fp_splitA>
    2a02:	88 f0       	brcs	.+34     	; 0x2a26 <__fixunssfsi+0x28>
    2a04:	9f 57       	subi	r25, 0x7F	; 127
    2a06:	98 f0       	brcs	.+38     	; 0x2a2e <__fixunssfsi+0x30>
    2a08:	b9 2f       	mov	r27, r25
    2a0a:	99 27       	eor	r25, r25
    2a0c:	b7 51       	subi	r27, 0x17	; 23
    2a0e:	b0 f0       	brcs	.+44     	; 0x2a3c <__fixunssfsi+0x3e>
    2a10:	e1 f0       	breq	.+56     	; 0x2a4a <__fixunssfsi+0x4c>
    2a12:	66 0f       	add	r22, r22
    2a14:	77 1f       	adc	r23, r23
    2a16:	88 1f       	adc	r24, r24
    2a18:	99 1f       	adc	r25, r25
    2a1a:	1a f0       	brmi	.+6      	; 0x2a22 <__fixunssfsi+0x24>
    2a1c:	ba 95       	dec	r27
    2a1e:	c9 f7       	brne	.-14     	; 0x2a12 <__fixunssfsi+0x14>
    2a20:	14 c0       	rjmp	.+40     	; 0x2a4a <__fixunssfsi+0x4c>
    2a22:	b1 30       	cpi	r27, 0x01	; 1
    2a24:	91 f0       	breq	.+36     	; 0x2a4a <__fixunssfsi+0x4c>
    2a26:	0e 94 d9 15 	call	0x2bb2	; 0x2bb2 <__fp_zero>
    2a2a:	b1 e0       	ldi	r27, 0x01	; 1
    2a2c:	08 95       	ret
    2a2e:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__fp_zero>
    2a32:	67 2f       	mov	r22, r23
    2a34:	78 2f       	mov	r23, r24
    2a36:	88 27       	eor	r24, r24
    2a38:	b8 5f       	subi	r27, 0xF8	; 248
    2a3a:	39 f0       	breq	.+14     	; 0x2a4a <__fixunssfsi+0x4c>
    2a3c:	b9 3f       	cpi	r27, 0xF9	; 249
    2a3e:	cc f3       	brlt	.-14     	; 0x2a32 <__fixunssfsi+0x34>
    2a40:	86 95       	lsr	r24
    2a42:	77 95       	ror	r23
    2a44:	67 95       	ror	r22
    2a46:	b3 95       	inc	r27
    2a48:	d9 f7       	brne	.-10     	; 0x2a40 <__fixunssfsi+0x42>
    2a4a:	3e f4       	brtc	.+14     	; 0x2a5a <__fixunssfsi+0x5c>
    2a4c:	90 95       	com	r25
    2a4e:	80 95       	com	r24
    2a50:	70 95       	com	r23
    2a52:	61 95       	neg	r22
    2a54:	7f 4f       	sbci	r23, 0xFF	; 255
    2a56:	8f 4f       	sbci	r24, 0xFF	; 255
    2a58:	9f 4f       	sbci	r25, 0xFF	; 255
    2a5a:	08 95       	ret

00002a5c <__floatunsisf>:
    2a5c:	e8 94       	clt
    2a5e:	09 c0       	rjmp	.+18     	; 0x2a72 <__floatsisf+0x12>

00002a60 <__floatsisf>:
    2a60:	97 fb       	bst	r25, 7
    2a62:	3e f4       	brtc	.+14     	; 0x2a72 <__floatsisf+0x12>
    2a64:	90 95       	com	r25
    2a66:	80 95       	com	r24
    2a68:	70 95       	com	r23
    2a6a:	61 95       	neg	r22
    2a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a6e:	8f 4f       	sbci	r24, 0xFF	; 255
    2a70:	9f 4f       	sbci	r25, 0xFF	; 255
    2a72:	99 23       	and	r25, r25
    2a74:	a9 f0       	breq	.+42     	; 0x2aa0 <__floatsisf+0x40>
    2a76:	f9 2f       	mov	r31, r25
    2a78:	96 e9       	ldi	r25, 0x96	; 150
    2a7a:	bb 27       	eor	r27, r27
    2a7c:	93 95       	inc	r25
    2a7e:	f6 95       	lsr	r31
    2a80:	87 95       	ror	r24
    2a82:	77 95       	ror	r23
    2a84:	67 95       	ror	r22
    2a86:	b7 95       	ror	r27
    2a88:	f1 11       	cpse	r31, r1
    2a8a:	f8 cf       	rjmp	.-16     	; 0x2a7c <__floatsisf+0x1c>
    2a8c:	fa f4       	brpl	.+62     	; 0x2acc <__floatsisf+0x6c>
    2a8e:	bb 0f       	add	r27, r27
    2a90:	11 f4       	brne	.+4      	; 0x2a96 <__floatsisf+0x36>
    2a92:	60 ff       	sbrs	r22, 0
    2a94:	1b c0       	rjmp	.+54     	; 0x2acc <__floatsisf+0x6c>
    2a96:	6f 5f       	subi	r22, 0xFF	; 255
    2a98:	7f 4f       	sbci	r23, 0xFF	; 255
    2a9a:	8f 4f       	sbci	r24, 0xFF	; 255
    2a9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a9e:	16 c0       	rjmp	.+44     	; 0x2acc <__floatsisf+0x6c>
    2aa0:	88 23       	and	r24, r24
    2aa2:	11 f0       	breq	.+4      	; 0x2aa8 <__floatsisf+0x48>
    2aa4:	96 e9       	ldi	r25, 0x96	; 150
    2aa6:	11 c0       	rjmp	.+34     	; 0x2aca <__floatsisf+0x6a>
    2aa8:	77 23       	and	r23, r23
    2aaa:	21 f0       	breq	.+8      	; 0x2ab4 <__floatsisf+0x54>
    2aac:	9e e8       	ldi	r25, 0x8E	; 142
    2aae:	87 2f       	mov	r24, r23
    2ab0:	76 2f       	mov	r23, r22
    2ab2:	05 c0       	rjmp	.+10     	; 0x2abe <__floatsisf+0x5e>
    2ab4:	66 23       	and	r22, r22
    2ab6:	71 f0       	breq	.+28     	; 0x2ad4 <__floatsisf+0x74>
    2ab8:	96 e8       	ldi	r25, 0x86	; 134
    2aba:	86 2f       	mov	r24, r22
    2abc:	70 e0       	ldi	r23, 0x00	; 0
    2abe:	60 e0       	ldi	r22, 0x00	; 0
    2ac0:	2a f0       	brmi	.+10     	; 0x2acc <__floatsisf+0x6c>
    2ac2:	9a 95       	dec	r25
    2ac4:	66 0f       	add	r22, r22
    2ac6:	77 1f       	adc	r23, r23
    2ac8:	88 1f       	adc	r24, r24
    2aca:	da f7       	brpl	.-10     	; 0x2ac2 <__floatsisf+0x62>
    2acc:	88 0f       	add	r24, r24
    2ace:	96 95       	lsr	r25
    2ad0:	87 95       	ror	r24
    2ad2:	97 f9       	bld	r25, 7
    2ad4:	08 95       	ret

00002ad6 <__fp_cmp>:
    2ad6:	99 0f       	add	r25, r25
    2ad8:	00 08       	sbc	r0, r0
    2ada:	55 0f       	add	r21, r21
    2adc:	aa 0b       	sbc	r26, r26
    2ade:	e0 e8       	ldi	r30, 0x80	; 128
    2ae0:	fe ef       	ldi	r31, 0xFE	; 254
    2ae2:	16 16       	cp	r1, r22
    2ae4:	17 06       	cpc	r1, r23
    2ae6:	e8 07       	cpc	r30, r24
    2ae8:	f9 07       	cpc	r31, r25
    2aea:	c0 f0       	brcs	.+48     	; 0x2b1c <__fp_cmp+0x46>
    2aec:	12 16       	cp	r1, r18
    2aee:	13 06       	cpc	r1, r19
    2af0:	e4 07       	cpc	r30, r20
    2af2:	f5 07       	cpc	r31, r21
    2af4:	98 f0       	brcs	.+38     	; 0x2b1c <__fp_cmp+0x46>
    2af6:	62 1b       	sub	r22, r18
    2af8:	73 0b       	sbc	r23, r19
    2afa:	84 0b       	sbc	r24, r20
    2afc:	95 0b       	sbc	r25, r21
    2afe:	39 f4       	brne	.+14     	; 0x2b0e <__fp_cmp+0x38>
    2b00:	0a 26       	eor	r0, r26
    2b02:	61 f0       	breq	.+24     	; 0x2b1c <__fp_cmp+0x46>
    2b04:	23 2b       	or	r18, r19
    2b06:	24 2b       	or	r18, r20
    2b08:	25 2b       	or	r18, r21
    2b0a:	21 f4       	brne	.+8      	; 0x2b14 <__fp_cmp+0x3e>
    2b0c:	08 95       	ret
    2b0e:	0a 26       	eor	r0, r26
    2b10:	09 f4       	brne	.+2      	; 0x2b14 <__fp_cmp+0x3e>
    2b12:	a1 40       	sbci	r26, 0x01	; 1
    2b14:	a6 95       	lsr	r26
    2b16:	8f ef       	ldi	r24, 0xFF	; 255
    2b18:	81 1d       	adc	r24, r1
    2b1a:	81 1d       	adc	r24, r1
    2b1c:	08 95       	ret

00002b1e <__fp_inf>:
    2b1e:	97 f9       	bld	r25, 7
    2b20:	9f 67       	ori	r25, 0x7F	; 127
    2b22:	80 e8       	ldi	r24, 0x80	; 128
    2b24:	70 e0       	ldi	r23, 0x00	; 0
    2b26:	60 e0       	ldi	r22, 0x00	; 0
    2b28:	08 95       	ret

00002b2a <__fp_nan>:
    2b2a:	9f ef       	ldi	r25, 0xFF	; 255
    2b2c:	80 ec       	ldi	r24, 0xC0	; 192
    2b2e:	08 95       	ret

00002b30 <__fp_pscA>:
    2b30:	00 24       	eor	r0, r0
    2b32:	0a 94       	dec	r0
    2b34:	16 16       	cp	r1, r22
    2b36:	17 06       	cpc	r1, r23
    2b38:	18 06       	cpc	r1, r24
    2b3a:	09 06       	cpc	r0, r25
    2b3c:	08 95       	ret

00002b3e <__fp_pscB>:
    2b3e:	00 24       	eor	r0, r0
    2b40:	0a 94       	dec	r0
    2b42:	12 16       	cp	r1, r18
    2b44:	13 06       	cpc	r1, r19
    2b46:	14 06       	cpc	r1, r20
    2b48:	05 06       	cpc	r0, r21
    2b4a:	08 95       	ret

00002b4c <__fp_round>:
    2b4c:	09 2e       	mov	r0, r25
    2b4e:	03 94       	inc	r0
    2b50:	00 0c       	add	r0, r0
    2b52:	11 f4       	brne	.+4      	; 0x2b58 <__fp_round+0xc>
    2b54:	88 23       	and	r24, r24
    2b56:	52 f0       	brmi	.+20     	; 0x2b6c <__fp_round+0x20>
    2b58:	bb 0f       	add	r27, r27
    2b5a:	40 f4       	brcc	.+16     	; 0x2b6c <__fp_round+0x20>
    2b5c:	bf 2b       	or	r27, r31
    2b5e:	11 f4       	brne	.+4      	; 0x2b64 <__fp_round+0x18>
    2b60:	60 ff       	sbrs	r22, 0
    2b62:	04 c0       	rjmp	.+8      	; 0x2b6c <__fp_round+0x20>
    2b64:	6f 5f       	subi	r22, 0xFF	; 255
    2b66:	7f 4f       	sbci	r23, 0xFF	; 255
    2b68:	8f 4f       	sbci	r24, 0xFF	; 255
    2b6a:	9f 4f       	sbci	r25, 0xFF	; 255
    2b6c:	08 95       	ret

00002b6e <__fp_split3>:
    2b6e:	57 fd       	sbrc	r21, 7
    2b70:	90 58       	subi	r25, 0x80	; 128
    2b72:	44 0f       	add	r20, r20
    2b74:	55 1f       	adc	r21, r21
    2b76:	59 f0       	breq	.+22     	; 0x2b8e <__fp_splitA+0x10>
    2b78:	5f 3f       	cpi	r21, 0xFF	; 255
    2b7a:	71 f0       	breq	.+28     	; 0x2b98 <__fp_splitA+0x1a>
    2b7c:	47 95       	ror	r20

00002b7e <__fp_splitA>:
    2b7e:	88 0f       	add	r24, r24
    2b80:	97 fb       	bst	r25, 7
    2b82:	99 1f       	adc	r25, r25
    2b84:	61 f0       	breq	.+24     	; 0x2b9e <__fp_splitA+0x20>
    2b86:	9f 3f       	cpi	r25, 0xFF	; 255
    2b88:	79 f0       	breq	.+30     	; 0x2ba8 <__fp_splitA+0x2a>
    2b8a:	87 95       	ror	r24
    2b8c:	08 95       	ret
    2b8e:	12 16       	cp	r1, r18
    2b90:	13 06       	cpc	r1, r19
    2b92:	14 06       	cpc	r1, r20
    2b94:	55 1f       	adc	r21, r21
    2b96:	f2 cf       	rjmp	.-28     	; 0x2b7c <__fp_split3+0xe>
    2b98:	46 95       	lsr	r20
    2b9a:	f1 df       	rcall	.-30     	; 0x2b7e <__fp_splitA>
    2b9c:	08 c0       	rjmp	.+16     	; 0x2bae <__fp_splitA+0x30>
    2b9e:	16 16       	cp	r1, r22
    2ba0:	17 06       	cpc	r1, r23
    2ba2:	18 06       	cpc	r1, r24
    2ba4:	99 1f       	adc	r25, r25
    2ba6:	f1 cf       	rjmp	.-30     	; 0x2b8a <__fp_splitA+0xc>
    2ba8:	86 95       	lsr	r24
    2baa:	71 05       	cpc	r23, r1
    2bac:	61 05       	cpc	r22, r1
    2bae:	08 94       	sec
    2bb0:	08 95       	ret

00002bb2 <__fp_zero>:
    2bb2:	e8 94       	clt

00002bb4 <__fp_szero>:
    2bb4:	bb 27       	eor	r27, r27
    2bb6:	66 27       	eor	r22, r22
    2bb8:	77 27       	eor	r23, r23
    2bba:	cb 01       	movw	r24, r22
    2bbc:	97 f9       	bld	r25, 7
    2bbe:	08 95       	ret

00002bc0 <__gesf2>:
    2bc0:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__fp_cmp>
    2bc4:	08 f4       	brcc	.+2      	; 0x2bc8 <__gesf2+0x8>
    2bc6:	8f ef       	ldi	r24, 0xFF	; 255
    2bc8:	08 95       	ret

00002bca <__mulsf3>:
    2bca:	0e 94 f8 15 	call	0x2bf0	; 0x2bf0 <__mulsf3x>
    2bce:	0c 94 a6 15 	jmp	0x2b4c	; 0x2b4c <__fp_round>
    2bd2:	0e 94 98 15 	call	0x2b30	; 0x2b30 <__fp_pscA>
    2bd6:	38 f0       	brcs	.+14     	; 0x2be6 <__mulsf3+0x1c>
    2bd8:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <__fp_pscB>
    2bdc:	20 f0       	brcs	.+8      	; 0x2be6 <__mulsf3+0x1c>
    2bde:	95 23       	and	r25, r21
    2be0:	11 f0       	breq	.+4      	; 0x2be6 <__mulsf3+0x1c>
    2be2:	0c 94 8f 15 	jmp	0x2b1e	; 0x2b1e <__fp_inf>
    2be6:	0c 94 95 15 	jmp	0x2b2a	; 0x2b2a <__fp_nan>
    2bea:	11 24       	eor	r1, r1
    2bec:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__fp_szero>

00002bf0 <__mulsf3x>:
    2bf0:	0e 94 b7 15 	call	0x2b6e	; 0x2b6e <__fp_split3>
    2bf4:	70 f3       	brcs	.-36     	; 0x2bd2 <__mulsf3+0x8>

00002bf6 <__mulsf3_pse>:
    2bf6:	95 9f       	mul	r25, r21
    2bf8:	c1 f3       	breq	.-16     	; 0x2bea <__mulsf3+0x20>
    2bfa:	95 0f       	add	r25, r21
    2bfc:	50 e0       	ldi	r21, 0x00	; 0
    2bfe:	55 1f       	adc	r21, r21
    2c00:	62 9f       	mul	r22, r18
    2c02:	f0 01       	movw	r30, r0
    2c04:	72 9f       	mul	r23, r18
    2c06:	bb 27       	eor	r27, r27
    2c08:	f0 0d       	add	r31, r0
    2c0a:	b1 1d       	adc	r27, r1
    2c0c:	63 9f       	mul	r22, r19
    2c0e:	aa 27       	eor	r26, r26
    2c10:	f0 0d       	add	r31, r0
    2c12:	b1 1d       	adc	r27, r1
    2c14:	aa 1f       	adc	r26, r26
    2c16:	64 9f       	mul	r22, r20
    2c18:	66 27       	eor	r22, r22
    2c1a:	b0 0d       	add	r27, r0
    2c1c:	a1 1d       	adc	r26, r1
    2c1e:	66 1f       	adc	r22, r22
    2c20:	82 9f       	mul	r24, r18
    2c22:	22 27       	eor	r18, r18
    2c24:	b0 0d       	add	r27, r0
    2c26:	a1 1d       	adc	r26, r1
    2c28:	62 1f       	adc	r22, r18
    2c2a:	73 9f       	mul	r23, r19
    2c2c:	b0 0d       	add	r27, r0
    2c2e:	a1 1d       	adc	r26, r1
    2c30:	62 1f       	adc	r22, r18
    2c32:	83 9f       	mul	r24, r19
    2c34:	a0 0d       	add	r26, r0
    2c36:	61 1d       	adc	r22, r1
    2c38:	22 1f       	adc	r18, r18
    2c3a:	74 9f       	mul	r23, r20
    2c3c:	33 27       	eor	r19, r19
    2c3e:	a0 0d       	add	r26, r0
    2c40:	61 1d       	adc	r22, r1
    2c42:	23 1f       	adc	r18, r19
    2c44:	84 9f       	mul	r24, r20
    2c46:	60 0d       	add	r22, r0
    2c48:	21 1d       	adc	r18, r1
    2c4a:	82 2f       	mov	r24, r18
    2c4c:	76 2f       	mov	r23, r22
    2c4e:	6a 2f       	mov	r22, r26
    2c50:	11 24       	eor	r1, r1
    2c52:	9f 57       	subi	r25, 0x7F	; 127
    2c54:	50 40       	sbci	r21, 0x00	; 0
    2c56:	9a f0       	brmi	.+38     	; 0x2c7e <__mulsf3_pse+0x88>
    2c58:	f1 f0       	breq	.+60     	; 0x2c96 <__mulsf3_pse+0xa0>
    2c5a:	88 23       	and	r24, r24
    2c5c:	4a f0       	brmi	.+18     	; 0x2c70 <__mulsf3_pse+0x7a>
    2c5e:	ee 0f       	add	r30, r30
    2c60:	ff 1f       	adc	r31, r31
    2c62:	bb 1f       	adc	r27, r27
    2c64:	66 1f       	adc	r22, r22
    2c66:	77 1f       	adc	r23, r23
    2c68:	88 1f       	adc	r24, r24
    2c6a:	91 50       	subi	r25, 0x01	; 1
    2c6c:	50 40       	sbci	r21, 0x00	; 0
    2c6e:	a9 f7       	brne	.-22     	; 0x2c5a <__mulsf3_pse+0x64>
    2c70:	9e 3f       	cpi	r25, 0xFE	; 254
    2c72:	51 05       	cpc	r21, r1
    2c74:	80 f0       	brcs	.+32     	; 0x2c96 <__mulsf3_pse+0xa0>
    2c76:	0c 94 8f 15 	jmp	0x2b1e	; 0x2b1e <__fp_inf>
    2c7a:	0c 94 da 15 	jmp	0x2bb4	; 0x2bb4 <__fp_szero>
    2c7e:	5f 3f       	cpi	r21, 0xFF	; 255
    2c80:	e4 f3       	brlt	.-8      	; 0x2c7a <__mulsf3_pse+0x84>
    2c82:	98 3e       	cpi	r25, 0xE8	; 232
    2c84:	d4 f3       	brlt	.-12     	; 0x2c7a <__mulsf3_pse+0x84>
    2c86:	86 95       	lsr	r24
    2c88:	77 95       	ror	r23
    2c8a:	67 95       	ror	r22
    2c8c:	b7 95       	ror	r27
    2c8e:	f7 95       	ror	r31
    2c90:	e7 95       	ror	r30
    2c92:	9f 5f       	subi	r25, 0xFF	; 255
    2c94:	c1 f7       	brne	.-16     	; 0x2c86 <__mulsf3_pse+0x90>
    2c96:	fe 2b       	or	r31, r30
    2c98:	88 0f       	add	r24, r24
    2c9a:	91 1d       	adc	r25, r1
    2c9c:	96 95       	lsr	r25
    2c9e:	87 95       	ror	r24
    2ca0:	97 f9       	bld	r25, 7
    2ca2:	08 95       	ret

00002ca4 <vfprintf>:
    2ca4:	a3 e1       	ldi	r26, 0x13	; 19
    2ca6:	b0 e0       	ldi	r27, 0x00	; 0
    2ca8:	e8 e5       	ldi	r30, 0x58	; 88
    2caa:	f6 e1       	ldi	r31, 0x16	; 22
    2cac:	0c 94 17 1a 	jmp	0x342e	; 0x342e <__prologue_saves__>
    2cb0:	6c 01       	movw	r12, r24
    2cb2:	4b 01       	movw	r8, r22
    2cb4:	2a 01       	movw	r4, r20
    2cb6:	fc 01       	movw	r30, r24
    2cb8:	17 82       	std	Z+7, r1	; 0x07
    2cba:	16 82       	std	Z+6, r1	; 0x06
    2cbc:	83 81       	ldd	r24, Z+3	; 0x03
    2cbe:	81 ff       	sbrs	r24, 1
    2cc0:	43 c3       	rjmp	.+1670   	; 0x3348 <vfprintf+0x6a4>
    2cc2:	ae 01       	movw	r20, r28
    2cc4:	4f 5f       	subi	r20, 0xFF	; 255
    2cc6:	5f 4f       	sbci	r21, 0xFF	; 255
    2cc8:	3a 01       	movw	r6, r20
    2cca:	f6 01       	movw	r30, r12
    2ccc:	93 81       	ldd	r25, Z+3	; 0x03
    2cce:	f4 01       	movw	r30, r8
    2cd0:	93 fd       	sbrc	r25, 3
    2cd2:	85 91       	lpm	r24, Z+
    2cd4:	93 ff       	sbrs	r25, 3
    2cd6:	81 91       	ld	r24, Z+
    2cd8:	4f 01       	movw	r8, r30
    2cda:	88 23       	and	r24, r24
    2cdc:	09 f4       	brne	.+2      	; 0x2ce0 <vfprintf+0x3c>
    2cde:	30 c3       	rjmp	.+1632   	; 0x3340 <vfprintf+0x69c>
    2ce0:	85 32       	cpi	r24, 0x25	; 37
    2ce2:	39 f4       	brne	.+14     	; 0x2cf2 <vfprintf+0x4e>
    2ce4:	93 fd       	sbrc	r25, 3
    2ce6:	85 91       	lpm	r24, Z+
    2ce8:	93 ff       	sbrs	r25, 3
    2cea:	81 91       	ld	r24, Z+
    2cec:	4f 01       	movw	r8, r30
    2cee:	85 32       	cpi	r24, 0x25	; 37
    2cf0:	39 f4       	brne	.+14     	; 0x2d00 <vfprintf+0x5c>
    2cf2:	b6 01       	movw	r22, r12
    2cf4:	90 e0       	ldi	r25, 0x00	; 0
    2cf6:	0e 94 83 1c 	call	0x3906	; 0x3906 <fputc>
    2cfa:	52 01       	movw	r10, r4
    2cfc:	25 01       	movw	r4, r10
    2cfe:	e5 cf       	rjmp	.-54     	; 0x2cca <vfprintf+0x26>
    2d00:	10 e0       	ldi	r17, 0x00	; 0
    2d02:	f1 2c       	mov	r15, r1
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	20 32       	cpi	r18, 0x20	; 32
    2d08:	a0 f4       	brcc	.+40     	; 0x2d32 <vfprintf+0x8e>
    2d0a:	8b 32       	cpi	r24, 0x2B	; 43
    2d0c:	69 f0       	breq	.+26     	; 0x2d28 <vfprintf+0x84>
    2d0e:	30 f4       	brcc	.+12     	; 0x2d1c <vfprintf+0x78>
    2d10:	80 32       	cpi	r24, 0x20	; 32
    2d12:	59 f0       	breq	.+22     	; 0x2d2a <vfprintf+0x86>
    2d14:	83 32       	cpi	r24, 0x23	; 35
    2d16:	69 f4       	brne	.+26     	; 0x2d32 <vfprintf+0x8e>
    2d18:	20 61       	ori	r18, 0x10	; 16
    2d1a:	2c c0       	rjmp	.+88     	; 0x2d74 <vfprintf+0xd0>
    2d1c:	8d 32       	cpi	r24, 0x2D	; 45
    2d1e:	39 f0       	breq	.+14     	; 0x2d2e <vfprintf+0x8a>
    2d20:	80 33       	cpi	r24, 0x30	; 48
    2d22:	39 f4       	brne	.+14     	; 0x2d32 <vfprintf+0x8e>
    2d24:	21 60       	ori	r18, 0x01	; 1
    2d26:	26 c0       	rjmp	.+76     	; 0x2d74 <vfprintf+0xd0>
    2d28:	22 60       	ori	r18, 0x02	; 2
    2d2a:	24 60       	ori	r18, 0x04	; 4
    2d2c:	23 c0       	rjmp	.+70     	; 0x2d74 <vfprintf+0xd0>
    2d2e:	28 60       	ori	r18, 0x08	; 8
    2d30:	21 c0       	rjmp	.+66     	; 0x2d74 <vfprintf+0xd0>
    2d32:	27 fd       	sbrc	r18, 7
    2d34:	27 c0       	rjmp	.+78     	; 0x2d84 <vfprintf+0xe0>
    2d36:	30 ed       	ldi	r19, 0xD0	; 208
    2d38:	38 0f       	add	r19, r24
    2d3a:	3a 30       	cpi	r19, 0x0A	; 10
    2d3c:	78 f4       	brcc	.+30     	; 0x2d5c <vfprintf+0xb8>
    2d3e:	26 ff       	sbrs	r18, 6
    2d40:	06 c0       	rjmp	.+12     	; 0x2d4e <vfprintf+0xaa>
    2d42:	fa e0       	ldi	r31, 0x0A	; 10
    2d44:	1f 9f       	mul	r17, r31
    2d46:	30 0d       	add	r19, r0
    2d48:	11 24       	eor	r1, r1
    2d4a:	13 2f       	mov	r17, r19
    2d4c:	13 c0       	rjmp	.+38     	; 0x2d74 <vfprintf+0xd0>
    2d4e:	4a e0       	ldi	r20, 0x0A	; 10
    2d50:	f4 9e       	mul	r15, r20
    2d52:	30 0d       	add	r19, r0
    2d54:	11 24       	eor	r1, r1
    2d56:	f3 2e       	mov	r15, r19
    2d58:	20 62       	ori	r18, 0x20	; 32
    2d5a:	0c c0       	rjmp	.+24     	; 0x2d74 <vfprintf+0xd0>
    2d5c:	8e 32       	cpi	r24, 0x2E	; 46
    2d5e:	21 f4       	brne	.+8      	; 0x2d68 <vfprintf+0xc4>
    2d60:	26 fd       	sbrc	r18, 6
    2d62:	ee c2       	rjmp	.+1500   	; 0x3340 <vfprintf+0x69c>
    2d64:	20 64       	ori	r18, 0x40	; 64
    2d66:	06 c0       	rjmp	.+12     	; 0x2d74 <vfprintf+0xd0>
    2d68:	8c 36       	cpi	r24, 0x6C	; 108
    2d6a:	11 f4       	brne	.+4      	; 0x2d70 <vfprintf+0xcc>
    2d6c:	20 68       	ori	r18, 0x80	; 128
    2d6e:	02 c0       	rjmp	.+4      	; 0x2d74 <vfprintf+0xd0>
    2d70:	88 36       	cpi	r24, 0x68	; 104
    2d72:	41 f4       	brne	.+16     	; 0x2d84 <vfprintf+0xe0>
    2d74:	f4 01       	movw	r30, r8
    2d76:	93 fd       	sbrc	r25, 3
    2d78:	85 91       	lpm	r24, Z+
    2d7a:	93 ff       	sbrs	r25, 3
    2d7c:	81 91       	ld	r24, Z+
    2d7e:	4f 01       	movw	r8, r30
    2d80:	81 11       	cpse	r24, r1
    2d82:	c1 cf       	rjmp	.-126    	; 0x2d06 <vfprintf+0x62>
    2d84:	9b eb       	ldi	r25, 0xBB	; 187
    2d86:	98 0f       	add	r25, r24
    2d88:	93 30       	cpi	r25, 0x03	; 3
    2d8a:	18 f4       	brcc	.+6      	; 0x2d92 <vfprintf+0xee>
    2d8c:	20 61       	ori	r18, 0x10	; 16
    2d8e:	80 5e       	subi	r24, 0xE0	; 224
    2d90:	06 c0       	rjmp	.+12     	; 0x2d9e <vfprintf+0xfa>
    2d92:	9b e9       	ldi	r25, 0x9B	; 155
    2d94:	98 0f       	add	r25, r24
    2d96:	93 30       	cpi	r25, 0x03	; 3
    2d98:	08 f0       	brcs	.+2      	; 0x2d9c <vfprintf+0xf8>
    2d9a:	71 c1       	rjmp	.+738    	; 0x307e <vfprintf+0x3da>
    2d9c:	2f 7e       	andi	r18, 0xEF	; 239
    2d9e:	26 ff       	sbrs	r18, 6
    2da0:	16 e0       	ldi	r17, 0x06	; 6
    2da2:	2f 73       	andi	r18, 0x3F	; 63
    2da4:	32 2e       	mov	r3, r18
    2da6:	85 36       	cpi	r24, 0x65	; 101
    2da8:	19 f4       	brne	.+6      	; 0x2db0 <vfprintf+0x10c>
    2daa:	20 64       	ori	r18, 0x40	; 64
    2dac:	32 2e       	mov	r3, r18
    2dae:	08 c0       	rjmp	.+16     	; 0x2dc0 <vfprintf+0x11c>
    2db0:	86 36       	cpi	r24, 0x66	; 102
    2db2:	21 f4       	brne	.+8      	; 0x2dbc <vfprintf+0x118>
    2db4:	f2 2f       	mov	r31, r18
    2db6:	f0 68       	ori	r31, 0x80	; 128
    2db8:	3f 2e       	mov	r3, r31
    2dba:	02 c0       	rjmp	.+4      	; 0x2dc0 <vfprintf+0x11c>
    2dbc:	11 11       	cpse	r17, r1
    2dbe:	11 50       	subi	r17, 0x01	; 1
    2dc0:	37 fe       	sbrs	r3, 7
    2dc2:	07 c0       	rjmp	.+14     	; 0x2dd2 <vfprintf+0x12e>
    2dc4:	1c 33       	cpi	r17, 0x3C	; 60
    2dc6:	50 f4       	brcc	.+20     	; 0x2ddc <vfprintf+0x138>
    2dc8:	ee 24       	eor	r14, r14
    2dca:	e3 94       	inc	r14
    2dcc:	e1 0e       	add	r14, r17
    2dce:	27 e0       	ldi	r18, 0x07	; 7
    2dd0:	0b c0       	rjmp	.+22     	; 0x2de8 <vfprintf+0x144>
    2dd2:	18 30       	cpi	r17, 0x08	; 8
    2dd4:	38 f0       	brcs	.+14     	; 0x2de4 <vfprintf+0x140>
    2dd6:	27 e0       	ldi	r18, 0x07	; 7
    2dd8:	17 e0       	ldi	r17, 0x07	; 7
    2dda:	05 c0       	rjmp	.+10     	; 0x2de6 <vfprintf+0x142>
    2ddc:	27 e0       	ldi	r18, 0x07	; 7
    2dde:	4c e3       	ldi	r20, 0x3C	; 60
    2de0:	e4 2e       	mov	r14, r20
    2de2:	02 c0       	rjmp	.+4      	; 0x2de8 <vfprintf+0x144>
    2de4:	21 2f       	mov	r18, r17
    2de6:	e1 2c       	mov	r14, r1
    2de8:	52 01       	movw	r10, r4
    2dea:	44 e0       	ldi	r20, 0x04	; 4
    2dec:	a4 0e       	add	r10, r20
    2dee:	b1 1c       	adc	r11, r1
    2df0:	f2 01       	movw	r30, r4
    2df2:	60 81       	ld	r22, Z
    2df4:	71 81       	ldd	r23, Z+1	; 0x01
    2df6:	82 81       	ldd	r24, Z+2	; 0x02
    2df8:	93 81       	ldd	r25, Z+3	; 0x03
    2dfa:	0e 2d       	mov	r16, r14
    2dfc:	a3 01       	movw	r20, r6
    2dfe:	0e 94 95 1b 	call	0x372a	; 0x372a <__ftoa_engine>
    2e02:	2c 01       	movw	r4, r24
    2e04:	09 81       	ldd	r16, Y+1	; 0x01
    2e06:	00 ff       	sbrs	r16, 0
    2e08:	02 c0       	rjmp	.+4      	; 0x2e0e <vfprintf+0x16a>
    2e0a:	03 ff       	sbrs	r16, 3
    2e0c:	07 c0       	rjmp	.+14     	; 0x2e1c <vfprintf+0x178>
    2e0e:	31 fc       	sbrc	r3, 1
    2e10:	08 c0       	rjmp	.+16     	; 0x2e22 <vfprintf+0x17e>
    2e12:	32 fe       	sbrs	r3, 2
    2e14:	09 c0       	rjmp	.+18     	; 0x2e28 <vfprintf+0x184>
    2e16:	30 e2       	ldi	r19, 0x20	; 32
    2e18:	23 2e       	mov	r2, r19
    2e1a:	07 c0       	rjmp	.+14     	; 0x2e2a <vfprintf+0x186>
    2e1c:	2d e2       	ldi	r18, 0x2D	; 45
    2e1e:	22 2e       	mov	r2, r18
    2e20:	04 c0       	rjmp	.+8      	; 0x2e2a <vfprintf+0x186>
    2e22:	9b e2       	ldi	r25, 0x2B	; 43
    2e24:	29 2e       	mov	r2, r25
    2e26:	01 c0       	rjmp	.+2      	; 0x2e2a <vfprintf+0x186>
    2e28:	21 2c       	mov	r2, r1
    2e2a:	80 2f       	mov	r24, r16
    2e2c:	8c 70       	andi	r24, 0x0C	; 12
    2e2e:	19 f0       	breq	.+6      	; 0x2e36 <vfprintf+0x192>
    2e30:	21 10       	cpse	r2, r1
    2e32:	68 c2       	rjmp	.+1232   	; 0x3304 <vfprintf+0x660>
    2e34:	a8 c2       	rjmp	.+1360   	; 0x3386 <vfprintf+0x6e2>
    2e36:	37 fe       	sbrs	r3, 7
    2e38:	0f c0       	rjmp	.+30     	; 0x2e58 <vfprintf+0x1b4>
    2e3a:	e4 0c       	add	r14, r4
    2e3c:	04 ff       	sbrs	r16, 4
    2e3e:	04 c0       	rjmp	.+8      	; 0x2e48 <vfprintf+0x1a4>
    2e40:	8a 81       	ldd	r24, Y+2	; 0x02
    2e42:	81 33       	cpi	r24, 0x31	; 49
    2e44:	09 f4       	brne	.+2      	; 0x2e48 <vfprintf+0x1a4>
    2e46:	ea 94       	dec	r14
    2e48:	1e 14       	cp	r1, r14
    2e4a:	74 f5       	brge	.+92     	; 0x2ea8 <vfprintf+0x204>
    2e4c:	f8 e0       	ldi	r31, 0x08	; 8
    2e4e:	fe 15       	cp	r31, r14
    2e50:	78 f5       	brcc	.+94     	; 0x2eb0 <vfprintf+0x20c>
    2e52:	88 e0       	ldi	r24, 0x08	; 8
    2e54:	e8 2e       	mov	r14, r24
    2e56:	2c c0       	rjmp	.+88     	; 0x2eb0 <vfprintf+0x20c>
    2e58:	36 fc       	sbrc	r3, 6
    2e5a:	2a c0       	rjmp	.+84     	; 0x2eb0 <vfprintf+0x20c>
    2e5c:	81 2f       	mov	r24, r17
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	84 15       	cp	r24, r4
    2e62:	95 05       	cpc	r25, r5
    2e64:	9c f0       	brlt	.+38     	; 0x2e8c <vfprintf+0x1e8>
    2e66:	2c ef       	ldi	r18, 0xFC	; 252
    2e68:	42 16       	cp	r4, r18
    2e6a:	2f ef       	ldi	r18, 0xFF	; 255
    2e6c:	52 06       	cpc	r5, r18
    2e6e:	74 f0       	brlt	.+28     	; 0x2e8c <vfprintf+0x1e8>
    2e70:	43 2d       	mov	r20, r3
    2e72:	40 68       	ori	r20, 0x80	; 128
    2e74:	34 2e       	mov	r3, r20
    2e76:	0a c0       	rjmp	.+20     	; 0x2e8c <vfprintf+0x1e8>
    2e78:	e2 e0       	ldi	r30, 0x02	; 2
    2e7a:	f0 e0       	ldi	r31, 0x00	; 0
    2e7c:	ec 0f       	add	r30, r28
    2e7e:	fd 1f       	adc	r31, r29
    2e80:	e1 0f       	add	r30, r17
    2e82:	f1 1d       	adc	r31, r1
    2e84:	80 81       	ld	r24, Z
    2e86:	80 33       	cpi	r24, 0x30	; 48
    2e88:	19 f4       	brne	.+6      	; 0x2e90 <vfprintf+0x1ec>
    2e8a:	11 50       	subi	r17, 0x01	; 1
    2e8c:	11 11       	cpse	r17, r1
    2e8e:	f4 cf       	rjmp	.-24     	; 0x2e78 <vfprintf+0x1d4>
    2e90:	37 fe       	sbrs	r3, 7
    2e92:	0e c0       	rjmp	.+28     	; 0x2eb0 <vfprintf+0x20c>
    2e94:	ee 24       	eor	r14, r14
    2e96:	e3 94       	inc	r14
    2e98:	e1 0e       	add	r14, r17
    2e9a:	81 2f       	mov	r24, r17
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	48 16       	cp	r4, r24
    2ea0:	59 06       	cpc	r5, r25
    2ea2:	2c f4       	brge	.+10     	; 0x2eae <vfprintf+0x20a>
    2ea4:	14 19       	sub	r17, r4
    2ea6:	04 c0       	rjmp	.+8      	; 0x2eb0 <vfprintf+0x20c>
    2ea8:	ee 24       	eor	r14, r14
    2eaa:	e3 94       	inc	r14
    2eac:	01 c0       	rjmp	.+2      	; 0x2eb0 <vfprintf+0x20c>
    2eae:	10 e0       	ldi	r17, 0x00	; 0
    2eb0:	37 fe       	sbrs	r3, 7
    2eb2:	06 c0       	rjmp	.+12     	; 0x2ec0 <vfprintf+0x21c>
    2eb4:	14 14       	cp	r1, r4
    2eb6:	15 04       	cpc	r1, r5
    2eb8:	34 f4       	brge	.+12     	; 0x2ec6 <vfprintf+0x222>
    2eba:	c2 01       	movw	r24, r4
    2ebc:	01 96       	adiw	r24, 0x01	; 1
    2ebe:	05 c0       	rjmp	.+10     	; 0x2eca <vfprintf+0x226>
    2ec0:	85 e0       	ldi	r24, 0x05	; 5
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	02 c0       	rjmp	.+4      	; 0x2eca <vfprintf+0x226>
    2ec6:	81 e0       	ldi	r24, 0x01	; 1
    2ec8:	90 e0       	ldi	r25, 0x00	; 0
    2eca:	21 10       	cpse	r2, r1
    2ecc:	01 96       	adiw	r24, 0x01	; 1
    2ece:	11 23       	and	r17, r17
    2ed0:	31 f0       	breq	.+12     	; 0x2ede <vfprintf+0x23a>
    2ed2:	21 2f       	mov	r18, r17
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	2f 5f       	subi	r18, 0xFF	; 255
    2ed8:	3f 4f       	sbci	r19, 0xFF	; 255
    2eda:	82 0f       	add	r24, r18
    2edc:	93 1f       	adc	r25, r19
    2ede:	2f 2d       	mov	r18, r15
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	82 17       	cp	r24, r18
    2ee4:	93 07       	cpc	r25, r19
    2ee6:	14 f4       	brge	.+4      	; 0x2eec <vfprintf+0x248>
    2ee8:	f8 1a       	sub	r15, r24
    2eea:	01 c0       	rjmp	.+2      	; 0x2eee <vfprintf+0x24a>
    2eec:	f1 2c       	mov	r15, r1
    2eee:	83 2d       	mov	r24, r3
    2ef0:	89 70       	andi	r24, 0x09	; 9
    2ef2:	49 f4       	brne	.+18     	; 0x2f06 <vfprintf+0x262>
    2ef4:	ff 20       	and	r15, r15
    2ef6:	39 f0       	breq	.+14     	; 0x2f06 <vfprintf+0x262>
    2ef8:	b6 01       	movw	r22, r12
    2efa:	80 e2       	ldi	r24, 0x20	; 32
    2efc:	90 e0       	ldi	r25, 0x00	; 0
    2efe:	0e 94 83 1c 	call	0x3906	; 0x3906 <fputc>
    2f02:	fa 94       	dec	r15
    2f04:	f7 cf       	rjmp	.-18     	; 0x2ef4 <vfprintf+0x250>
    2f06:	22 20       	and	r2, r2
    2f08:	29 f0       	breq	.+10     	; 0x2f14 <vfprintf+0x270>
    2f0a:	b6 01       	movw	r22, r12
    2f0c:	82 2d       	mov	r24, r2
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	0e 94 83 1c 	call	0x3906	; 0x3906 <fputc>
    2f14:	33 fc       	sbrc	r3, 3
    2f16:	09 c0       	rjmp	.+18     	; 0x2f2a <vfprintf+0x286>
    2f18:	ff 20       	and	r15, r15
    2f1a:	39 f0       	breq	.+14     	; 0x2f2a <vfprintf+0x286>
    2f1c:	b6 01       	movw	r22, r12
    2f1e:	80 e3       	ldi	r24, 0x30	; 48
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	0e 94 83 1c 	call	0x3906	; 0x3906 <fputc>
    2f26:	fa 94       	dec	r15
    2f28:	f7 cf       	rjmp	.-18     	; 0x2f18 <vfprintf+0x274>
    2f2a:	37 fe       	sbrs	r3, 7
    2f2c:	5a c0       	rjmp	.+180    	; 0x2fe2 <vfprintf+0x33e>
    2f2e:	94 2d       	mov	r25, r4
    2f30:	85 2d       	mov	r24, r5
    2f32:	57 fe       	sbrs	r5, 7
    2f34:	02 c0       	rjmp	.+4      	; 0x2f3a <vfprintf+0x296>
    2f36:	90 e0       	ldi	r25, 0x00	; 0
    2f38:	80 e0       	ldi	r24, 0x00	; 0
    2f3a:	29 2e       	mov	r2, r25
    2f3c:	38 2e       	mov	r3, r24
    2f3e:	20 e0       	ldi	r18, 0x00	; 0
    2f40:	30 e0       	ldi	r19, 0x00	; 0
    2f42:	a2 01       	movw	r20, r4
    2f44:	4e 19       	sub	r20, r14
    2f46:	51 09       	sbc	r21, r1
    2f48:	5d 87       	std	Y+13, r21	; 0x0d
    2f4a:	4c 87       	std	Y+12, r20	; 0x0c
    2f4c:	a2 01       	movw	r20, r4
    2f4e:	42 19       	sub	r20, r2
    2f50:	53 09       	sbc	r21, r3
    2f52:	5f 87       	std	Y+15, r21	; 0x0f
    2f54:	4e 87       	std	Y+14, r20	; 0x0e
    2f56:	61 2f       	mov	r22, r17
    2f58:	70 e0       	ldi	r23, 0x00	; 0
    2f5a:	44 27       	eor	r20, r20
    2f5c:	55 27       	eor	r21, r21
    2f5e:	46 1b       	sub	r20, r22
    2f60:	57 0b       	sbc	r21, r23
    2f62:	59 8b       	std	Y+17, r21	; 0x11
    2f64:	48 8b       	std	Y+16, r20	; 0x10
    2f66:	5f ef       	ldi	r21, 0xFF	; 255
    2f68:	25 16       	cp	r2, r21
    2f6a:	35 06       	cpc	r3, r21
    2f6c:	49 f4       	brne	.+18     	; 0x2f80 <vfprintf+0x2dc>
    2f6e:	b6 01       	movw	r22, r12
    2f70:	8e e2       	ldi	r24, 0x2E	; 46
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	2a 8b       	std	Y+18, r18	; 0x12
    2f76:	3b 8b       	std	Y+19, r19	; 0x13
    2f78:	0e 94 83 1c 	call	0x3906	; 0x3906 <fputc>
    2f7c:	3b 89       	ldd	r19, Y+19	; 0x13
    2f7e:	2a 89       	ldd	r18, Y+18	; 0x12
    2f80:	42 14       	cp	r4, r2
    2f82:	53 04       	cpc	r5, r3
    2f84:	6c f0       	brlt	.+26     	; 0x2fa0 <vfprintf+0x2fc>
    2f86:	4c 85       	ldd	r20, Y+12	; 0x0c
    2f88:	5d 85       	ldd	r21, Y+13	; 0x0d
    2f8a:	42 15       	cp	r20, r2
    2f8c:	53 05       	cpc	r21, r3
    2f8e:	44 f4       	brge	.+16     	; 0x2fa0 <vfprintf+0x2fc>
    2f90:	ee 85       	ldd	r30, Y+14	; 0x0e
    2f92:	ff 85       	ldd	r31, Y+15	; 0x0f
    2f94:	e2 0f       	add	r30, r18
    2f96:	f3 1f       	adc	r31, r19
    2f98:	e6 0d       	add	r30, r6
    2f9a:	f7 1d       	adc	r31, r7
    2f9c:	81 81       	ldd	r24, Z+1	; 0x01
    2f9e:	01 c0       	rjmp	.+2      	; 0x2fa2 <vfprintf+0x2fe>
    2fa0:	80 e3       	ldi	r24, 0x30	; 48
    2fa2:	51 e0       	ldi	r21, 0x01	; 1
    2fa4:	25 1a       	sub	r2, r21
    2fa6:	31 08       	sbc	r3, r1
    2fa8:	2f 5f       	subi	r18, 0xFF	; 255
    2faa:	3f 4f       	sbci	r19, 0xFF	; 255
    2fac:	48 89       	ldd	r20, Y+16	; 0x10
    2fae:	59 89       	ldd	r21, Y+17	; 0x11
    2fb0:	24 16       	cp	r2, r20
    2fb2:	35 06       	cpc	r3, r21
    2fb4:	4c f0       	brlt	.+18     	; 0x2fc8 <vfprintf+0x324>
    2fb6:	b6 01       	movw	r22, r12
    2fb8:	90 e0       	ldi	r25, 0x00	; 0
    2fba:	2a 8b       	std	Y+18, r18	; 0x12
    2fbc:	3b 8b       	std	Y+19, r19	; 0x13
    2fbe:	0e 94 83 1c 	call	0x3906	; 0x3906 <fputc>
    2fc2:	2a 89       	ldd	r18, Y+18	; 0x12
    2fc4:	3b 89       	ldd	r19, Y+19	; 0x13
    2fc6:	cf cf       	rjmp	.-98     	; 0x2f66 <vfprintf+0x2c2>
    2fc8:	24 14       	cp	r2, r4
    2fca:	35 04       	cpc	r3, r5
    2fcc:	39 f4       	brne	.+14     	; 0x2fdc <vfprintf+0x338>
    2fce:	9a 81       	ldd	r25, Y+2	; 0x02
    2fd0:	96 33       	cpi	r25, 0x36	; 54
    2fd2:	18 f4       	brcc	.+6      	; 0x2fda <vfprintf+0x336>
    2fd4:	95 33       	cpi	r25, 0x35	; 53
    2fd6:	11 f4       	brne	.+4      	; 0x2fdc <vfprintf+0x338>
    2fd8:	04 ff       	sbrs	r16, 4
    2fda:	81 e3       	ldi	r24, 0x31	; 49
    2fdc:	b6 01       	movw	r22, r12
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	4b c0       	rjmp	.+150    	; 0x3078 <vfprintf+0x3d4>
    2fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe4:	81 33       	cpi	r24, 0x31	; 49
    2fe6:	09 f0       	breq	.+2      	; 0x2fea <vfprintf+0x346>
    2fe8:	0f 7e       	andi	r16, 0xEF	; 239
    2fea:	b6 01       	movw	r22, r12
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	0e 94 83 1c 	call	0x3906	; 0x3906 <fputc>
    2ff2:	11 11       	cpse	r17, r1
    2ff4:	05 c0       	rjmp	.+10     	; 0x3000 <vfprintf+0x35c>
    2ff6:	34 fc       	sbrc	r3, 4
    2ff8:	18 c0       	rjmp	.+48     	; 0x302a <vfprintf+0x386>
    2ffa:	85 e6       	ldi	r24, 0x65	; 101
    2ffc:	90 e0       	ldi	r25, 0x00	; 0
    2ffe:	17 c0       	rjmp	.+46     	; 0x302e <vfprintf+0x38a>
    3000:	b6 01       	movw	r22, r12
    3002:	8e e2       	ldi	r24, 0x2E	; 46
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	0e 94 83 1c 	call	0x3906	; 0x3906 <fputc>
    300a:	82 e0       	ldi	r24, 0x02	; 2
    300c:	ee 24       	eor	r14, r14
    300e:	e3 94       	inc	r14
    3010:	e8 0e       	add	r14, r24
    3012:	f3 01       	movw	r30, r6
    3014:	e8 0f       	add	r30, r24
    3016:	f1 1d       	adc	r31, r1
    3018:	80 81       	ld	r24, Z
    301a:	b6 01       	movw	r22, r12
    301c:	90 e0       	ldi	r25, 0x00	; 0
    301e:	0e 94 83 1c 	call	0x3906	; 0x3906 <fputc>
    3022:	11 50       	subi	r17, 0x01	; 1
    3024:	8e 2d       	mov	r24, r14
    3026:	91 f7       	brne	.-28     	; 0x300c <vfprintf+0x368>
    3028:	e6 cf       	rjmp	.-52     	; 0x2ff6 <vfprintf+0x352>
    302a:	85 e4       	ldi	r24, 0x45	; 69
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	b6 01       	movw	r22, r12
    3030:	0e 94 83 1c 	call	0x3906	; 0x3906 <fputc>
    3034:	57 fc       	sbrc	r5, 7
    3036:	05 c0       	rjmp	.+10     	; 0x3042 <vfprintf+0x39e>
    3038:	41 14       	cp	r4, r1
    303a:	51 04       	cpc	r5, r1
    303c:	39 f4       	brne	.+14     	; 0x304c <vfprintf+0x3a8>
    303e:	04 ff       	sbrs	r16, 4
    3040:	05 c0       	rjmp	.+10     	; 0x304c <vfprintf+0x3a8>
    3042:	51 94       	neg	r5
    3044:	41 94       	neg	r4
    3046:	51 08       	sbc	r5, r1
    3048:	8d e2       	ldi	r24, 0x2D	; 45
    304a:	01 c0       	rjmp	.+2      	; 0x304e <vfprintf+0x3aa>
    304c:	8b e2       	ldi	r24, 0x2B	; 43
    304e:	b6 01       	movw	r22, r12
    3050:	90 e0       	ldi	r25, 0x00	; 0
    3052:	0e 94 83 1c 	call	0x3906	; 0x3906 <fputc>
    3056:	80 e3       	ldi	r24, 0x30	; 48
    3058:	9a e0       	ldi	r25, 0x0A	; 10
    305a:	49 16       	cp	r4, r25
    305c:	51 04       	cpc	r5, r1
    305e:	2c f0       	brlt	.+10     	; 0x306a <vfprintf+0x3c6>
    3060:	8f 5f       	subi	r24, 0xFF	; 255
    3062:	5a e0       	ldi	r21, 0x0A	; 10
    3064:	45 1a       	sub	r4, r21
    3066:	51 08       	sbc	r5, r1
    3068:	f7 cf       	rjmp	.-18     	; 0x3058 <vfprintf+0x3b4>
    306a:	b6 01       	movw	r22, r12
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	0e 94 83 1c 	call	0x3906	; 0x3906 <fputc>
    3072:	b6 01       	movw	r22, r12
    3074:	c2 01       	movw	r24, r4
    3076:	c0 96       	adiw	r24, 0x30	; 48
    3078:	0e 94 83 1c 	call	0x3906	; 0x3906 <fputc>
    307c:	57 c1       	rjmp	.+686    	; 0x332c <vfprintf+0x688>
    307e:	83 36       	cpi	r24, 0x63	; 99
    3080:	31 f0       	breq	.+12     	; 0x308e <vfprintf+0x3ea>
    3082:	83 37       	cpi	r24, 0x73	; 115
    3084:	79 f0       	breq	.+30     	; 0x30a4 <vfprintf+0x400>
    3086:	83 35       	cpi	r24, 0x53	; 83
    3088:	09 f0       	breq	.+2      	; 0x308c <vfprintf+0x3e8>
    308a:	58 c0       	rjmp	.+176    	; 0x313c <vfprintf+0x498>
    308c:	21 c0       	rjmp	.+66     	; 0x30d0 <vfprintf+0x42c>
    308e:	52 01       	movw	r10, r4
    3090:	e2 e0       	ldi	r30, 0x02	; 2
    3092:	ae 0e       	add	r10, r30
    3094:	b1 1c       	adc	r11, r1
    3096:	f2 01       	movw	r30, r4
    3098:	80 81       	ld	r24, Z
    309a:	89 83       	std	Y+1, r24	; 0x01
    309c:	01 e0       	ldi	r16, 0x01	; 1
    309e:	10 e0       	ldi	r17, 0x00	; 0
    30a0:	23 01       	movw	r4, r6
    30a2:	14 c0       	rjmp	.+40     	; 0x30cc <vfprintf+0x428>
    30a4:	52 01       	movw	r10, r4
    30a6:	f2 e0       	ldi	r31, 0x02	; 2
    30a8:	af 0e       	add	r10, r31
    30aa:	b1 1c       	adc	r11, r1
    30ac:	f2 01       	movw	r30, r4
    30ae:	40 80       	ld	r4, Z
    30b0:	51 80       	ldd	r5, Z+1	; 0x01
    30b2:	26 ff       	sbrs	r18, 6
    30b4:	03 c0       	rjmp	.+6      	; 0x30bc <vfprintf+0x418>
    30b6:	61 2f       	mov	r22, r17
    30b8:	70 e0       	ldi	r23, 0x00	; 0
    30ba:	02 c0       	rjmp	.+4      	; 0x30c0 <vfprintf+0x41c>
    30bc:	6f ef       	ldi	r22, 0xFF	; 255
    30be:	7f ef       	ldi	r23, 0xFF	; 255
    30c0:	c2 01       	movw	r24, r4
    30c2:	2a 8b       	std	Y+18, r18	; 0x12
    30c4:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <strnlen>
    30c8:	8c 01       	movw	r16, r24
    30ca:	2a 89       	ldd	r18, Y+18	; 0x12
    30cc:	2f 77       	andi	r18, 0x7F	; 127
    30ce:	15 c0       	rjmp	.+42     	; 0x30fa <vfprintf+0x456>
    30d0:	52 01       	movw	r10, r4
    30d2:	f2 e0       	ldi	r31, 0x02	; 2
    30d4:	af 0e       	add	r10, r31
    30d6:	b1 1c       	adc	r11, r1
    30d8:	f2 01       	movw	r30, r4
    30da:	40 80       	ld	r4, Z
    30dc:	51 80       	ldd	r5, Z+1	; 0x01
    30de:	26 ff       	sbrs	r18, 6
    30e0:	03 c0       	rjmp	.+6      	; 0x30e8 <vfprintf+0x444>
    30e2:	61 2f       	mov	r22, r17
    30e4:	70 e0       	ldi	r23, 0x00	; 0
    30e6:	02 c0       	rjmp	.+4      	; 0x30ec <vfprintf+0x448>
    30e8:	6f ef       	ldi	r22, 0xFF	; 255
    30ea:	7f ef       	ldi	r23, 0xFF	; 255
    30ec:	c2 01       	movw	r24, r4
    30ee:	2a 8b       	std	Y+18, r18	; 0x12
    30f0:	0e 94 6d 1c 	call	0x38da	; 0x38da <strnlen_P>
    30f4:	8c 01       	movw	r16, r24
    30f6:	2a 89       	ldd	r18, Y+18	; 0x12
    30f8:	20 68       	ori	r18, 0x80	; 128
    30fa:	32 2e       	mov	r3, r18
    30fc:	23 fd       	sbrc	r18, 3
    30fe:	1a c0       	rjmp	.+52     	; 0x3134 <vfprintf+0x490>
    3100:	8f 2d       	mov	r24, r15
    3102:	90 e0       	ldi	r25, 0x00	; 0
    3104:	08 17       	cp	r16, r24
    3106:	19 07       	cpc	r17, r25
    3108:	a8 f4       	brcc	.+42     	; 0x3134 <vfprintf+0x490>
    310a:	b6 01       	movw	r22, r12
    310c:	80 e2       	ldi	r24, 0x20	; 32
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	0e 94 83 1c 	call	0x3906	; 0x3906 <fputc>
    3114:	fa 94       	dec	r15
    3116:	f4 cf       	rjmp	.-24     	; 0x3100 <vfprintf+0x45c>
    3118:	f2 01       	movw	r30, r4
    311a:	37 fc       	sbrc	r3, 7
    311c:	85 91       	lpm	r24, Z+
    311e:	37 fe       	sbrs	r3, 7
    3120:	81 91       	ld	r24, Z+
    3122:	2f 01       	movw	r4, r30
    3124:	b6 01       	movw	r22, r12
    3126:	90 e0       	ldi	r25, 0x00	; 0
    3128:	0e 94 83 1c 	call	0x3906	; 0x3906 <fputc>
    312c:	f1 10       	cpse	r15, r1
    312e:	fa 94       	dec	r15
    3130:	01 50       	subi	r16, 0x01	; 1
    3132:	11 09       	sbc	r17, r1
    3134:	01 15       	cp	r16, r1
    3136:	11 05       	cpc	r17, r1
    3138:	79 f7       	brne	.-34     	; 0x3118 <vfprintf+0x474>
    313a:	f8 c0       	rjmp	.+496    	; 0x332c <vfprintf+0x688>
    313c:	84 36       	cpi	r24, 0x64	; 100
    313e:	11 f0       	breq	.+4      	; 0x3144 <vfprintf+0x4a0>
    3140:	89 36       	cpi	r24, 0x69	; 105
    3142:	59 f5       	brne	.+86     	; 0x319a <vfprintf+0x4f6>
    3144:	52 01       	movw	r10, r4
    3146:	27 ff       	sbrs	r18, 7
    3148:	09 c0       	rjmp	.+18     	; 0x315c <vfprintf+0x4b8>
    314a:	f4 e0       	ldi	r31, 0x04	; 4
    314c:	af 0e       	add	r10, r31
    314e:	b1 1c       	adc	r11, r1
    3150:	f2 01       	movw	r30, r4
    3152:	60 81       	ld	r22, Z
    3154:	71 81       	ldd	r23, Z+1	; 0x01
    3156:	82 81       	ldd	r24, Z+2	; 0x02
    3158:	93 81       	ldd	r25, Z+3	; 0x03
    315a:	0a c0       	rjmp	.+20     	; 0x3170 <vfprintf+0x4cc>
    315c:	f2 e0       	ldi	r31, 0x02	; 2
    315e:	af 0e       	add	r10, r31
    3160:	b1 1c       	adc	r11, r1
    3162:	f2 01       	movw	r30, r4
    3164:	60 81       	ld	r22, Z
    3166:	71 81       	ldd	r23, Z+1	; 0x01
    3168:	07 2e       	mov	r0, r23
    316a:	00 0c       	add	r0, r0
    316c:	88 0b       	sbc	r24, r24
    316e:	99 0b       	sbc	r25, r25
    3170:	2f 76       	andi	r18, 0x6F	; 111
    3172:	32 2e       	mov	r3, r18
    3174:	97 ff       	sbrs	r25, 7
    3176:	09 c0       	rjmp	.+18     	; 0x318a <vfprintf+0x4e6>
    3178:	90 95       	com	r25
    317a:	80 95       	com	r24
    317c:	70 95       	com	r23
    317e:	61 95       	neg	r22
    3180:	7f 4f       	sbci	r23, 0xFF	; 255
    3182:	8f 4f       	sbci	r24, 0xFF	; 255
    3184:	9f 4f       	sbci	r25, 0xFF	; 255
    3186:	20 68       	ori	r18, 0x80	; 128
    3188:	32 2e       	mov	r3, r18
    318a:	2a e0       	ldi	r18, 0x0A	; 10
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	a3 01       	movw	r20, r6
    3190:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <__ultoa_invert>
    3194:	e8 2e       	mov	r14, r24
    3196:	e6 18       	sub	r14, r6
    3198:	3f c0       	rjmp	.+126    	; 0x3218 <vfprintf+0x574>
    319a:	02 2f       	mov	r16, r18
    319c:	85 37       	cpi	r24, 0x75	; 117
    319e:	21 f4       	brne	.+8      	; 0x31a8 <vfprintf+0x504>
    31a0:	0f 7e       	andi	r16, 0xEF	; 239
    31a2:	2a e0       	ldi	r18, 0x0A	; 10
    31a4:	30 e0       	ldi	r19, 0x00	; 0
    31a6:	1d c0       	rjmp	.+58     	; 0x31e2 <vfprintf+0x53e>
    31a8:	09 7f       	andi	r16, 0xF9	; 249
    31aa:	8f 36       	cpi	r24, 0x6F	; 111
    31ac:	91 f0       	breq	.+36     	; 0x31d2 <vfprintf+0x52e>
    31ae:	18 f4       	brcc	.+6      	; 0x31b6 <vfprintf+0x512>
    31b0:	88 35       	cpi	r24, 0x58	; 88
    31b2:	59 f0       	breq	.+22     	; 0x31ca <vfprintf+0x526>
    31b4:	c5 c0       	rjmp	.+394    	; 0x3340 <vfprintf+0x69c>
    31b6:	80 37       	cpi	r24, 0x70	; 112
    31b8:	19 f0       	breq	.+6      	; 0x31c0 <vfprintf+0x51c>
    31ba:	88 37       	cpi	r24, 0x78	; 120
    31bc:	11 f0       	breq	.+4      	; 0x31c2 <vfprintf+0x51e>
    31be:	c0 c0       	rjmp	.+384    	; 0x3340 <vfprintf+0x69c>
    31c0:	00 61       	ori	r16, 0x10	; 16
    31c2:	04 ff       	sbrs	r16, 4
    31c4:	09 c0       	rjmp	.+18     	; 0x31d8 <vfprintf+0x534>
    31c6:	04 60       	ori	r16, 0x04	; 4
    31c8:	07 c0       	rjmp	.+14     	; 0x31d8 <vfprintf+0x534>
    31ca:	24 ff       	sbrs	r18, 4
    31cc:	08 c0       	rjmp	.+16     	; 0x31de <vfprintf+0x53a>
    31ce:	06 60       	ori	r16, 0x06	; 6
    31d0:	06 c0       	rjmp	.+12     	; 0x31de <vfprintf+0x53a>
    31d2:	28 e0       	ldi	r18, 0x08	; 8
    31d4:	30 e0       	ldi	r19, 0x00	; 0
    31d6:	05 c0       	rjmp	.+10     	; 0x31e2 <vfprintf+0x53e>
    31d8:	20 e1       	ldi	r18, 0x10	; 16
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	02 c0       	rjmp	.+4      	; 0x31e2 <vfprintf+0x53e>
    31de:	20 e1       	ldi	r18, 0x10	; 16
    31e0:	32 e0       	ldi	r19, 0x02	; 2
    31e2:	52 01       	movw	r10, r4
    31e4:	07 ff       	sbrs	r16, 7
    31e6:	09 c0       	rjmp	.+18     	; 0x31fa <vfprintf+0x556>
    31e8:	f4 e0       	ldi	r31, 0x04	; 4
    31ea:	af 0e       	add	r10, r31
    31ec:	b1 1c       	adc	r11, r1
    31ee:	f2 01       	movw	r30, r4
    31f0:	60 81       	ld	r22, Z
    31f2:	71 81       	ldd	r23, Z+1	; 0x01
    31f4:	82 81       	ldd	r24, Z+2	; 0x02
    31f6:	93 81       	ldd	r25, Z+3	; 0x03
    31f8:	08 c0       	rjmp	.+16     	; 0x320a <vfprintf+0x566>
    31fa:	f2 e0       	ldi	r31, 0x02	; 2
    31fc:	af 0e       	add	r10, r31
    31fe:	b1 1c       	adc	r11, r1
    3200:	f2 01       	movw	r30, r4
    3202:	60 81       	ld	r22, Z
    3204:	71 81       	ldd	r23, Z+1	; 0x01
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	a3 01       	movw	r20, r6
    320c:	0e 94 08 1d 	call	0x3a10	; 0x3a10 <__ultoa_invert>
    3210:	e8 2e       	mov	r14, r24
    3212:	e6 18       	sub	r14, r6
    3214:	0f 77       	andi	r16, 0x7F	; 127
    3216:	30 2e       	mov	r3, r16
    3218:	36 fe       	sbrs	r3, 6
    321a:	0b c0       	rjmp	.+22     	; 0x3232 <vfprintf+0x58e>
    321c:	33 2d       	mov	r19, r3
    321e:	3e 7f       	andi	r19, 0xFE	; 254
    3220:	e1 16       	cp	r14, r17
    3222:	50 f4       	brcc	.+20     	; 0x3238 <vfprintf+0x594>
    3224:	34 fe       	sbrs	r3, 4
    3226:	0a c0       	rjmp	.+20     	; 0x323c <vfprintf+0x598>
    3228:	32 fc       	sbrc	r3, 2
    322a:	08 c0       	rjmp	.+16     	; 0x323c <vfprintf+0x598>
    322c:	33 2d       	mov	r19, r3
    322e:	3e 7e       	andi	r19, 0xEE	; 238
    3230:	05 c0       	rjmp	.+10     	; 0x323c <vfprintf+0x598>
    3232:	0e 2d       	mov	r16, r14
    3234:	33 2d       	mov	r19, r3
    3236:	03 c0       	rjmp	.+6      	; 0x323e <vfprintf+0x59a>
    3238:	0e 2d       	mov	r16, r14
    323a:	01 c0       	rjmp	.+2      	; 0x323e <vfprintf+0x59a>
    323c:	01 2f       	mov	r16, r17
    323e:	34 ff       	sbrs	r19, 4
    3240:	0c c0       	rjmp	.+24     	; 0x325a <vfprintf+0x5b6>
    3242:	fe 01       	movw	r30, r28
    3244:	ee 0d       	add	r30, r14
    3246:	f1 1d       	adc	r31, r1
    3248:	80 81       	ld	r24, Z
    324a:	80 33       	cpi	r24, 0x30	; 48
    324c:	11 f4       	brne	.+4      	; 0x3252 <vfprintf+0x5ae>
    324e:	39 7e       	andi	r19, 0xE9	; 233
    3250:	08 c0       	rjmp	.+16     	; 0x3262 <vfprintf+0x5be>
    3252:	32 ff       	sbrs	r19, 2
    3254:	05 c0       	rjmp	.+10     	; 0x3260 <vfprintf+0x5bc>
    3256:	0e 5f       	subi	r16, 0xFE	; 254
    3258:	04 c0       	rjmp	.+8      	; 0x3262 <vfprintf+0x5be>
    325a:	83 2f       	mov	r24, r19
    325c:	86 78       	andi	r24, 0x86	; 134
    325e:	09 f0       	breq	.+2      	; 0x3262 <vfprintf+0x5be>
    3260:	0f 5f       	subi	r16, 0xFF	; 255
    3262:	33 fd       	sbrc	r19, 3
    3264:	13 c0       	rjmp	.+38     	; 0x328c <vfprintf+0x5e8>
    3266:	30 ff       	sbrs	r19, 0
    3268:	06 c0       	rjmp	.+12     	; 0x3276 <vfprintf+0x5d2>
    326a:	1e 2d       	mov	r17, r14
    326c:	0f 15       	cp	r16, r15
    326e:	18 f4       	brcc	.+6      	; 0x3276 <vfprintf+0x5d2>
    3270:	1f 0d       	add	r17, r15
    3272:	10 1b       	sub	r17, r16
    3274:	0f 2d       	mov	r16, r15
    3276:	0f 15       	cp	r16, r15
    3278:	68 f4       	brcc	.+26     	; 0x3294 <vfprintf+0x5f0>
    327a:	b6 01       	movw	r22, r12
    327c:	80 e2       	ldi	r24, 0x20	; 32
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	3b 8b       	std	Y+19, r19	; 0x13
    3282:	0e 94 83 1c 	call	0x3906	; 0x3906 <fputc>
    3286:	0f 5f       	subi	r16, 0xFF	; 255
    3288:	3b 89       	ldd	r19, Y+19	; 0x13
    328a:	f5 cf       	rjmp	.-22     	; 0x3276 <vfprintf+0x5d2>
    328c:	0f 15       	cp	r16, r15
    328e:	10 f4       	brcc	.+4      	; 0x3294 <vfprintf+0x5f0>
    3290:	f0 1a       	sub	r15, r16
    3292:	01 c0       	rjmp	.+2      	; 0x3296 <vfprintf+0x5f2>
    3294:	f1 2c       	mov	r15, r1
    3296:	34 ff       	sbrs	r19, 4
    3298:	12 c0       	rjmp	.+36     	; 0x32be <vfprintf+0x61a>
    329a:	b6 01       	movw	r22, r12
    329c:	80 e3       	ldi	r24, 0x30	; 48
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	3b 8b       	std	Y+19, r19	; 0x13
    32a2:	0e 94 83 1c 	call	0x3906	; 0x3906 <fputc>
    32a6:	3b 89       	ldd	r19, Y+19	; 0x13
    32a8:	32 ff       	sbrs	r19, 2
    32aa:	17 c0       	rjmp	.+46     	; 0x32da <vfprintf+0x636>
    32ac:	31 fd       	sbrc	r19, 1
    32ae:	03 c0       	rjmp	.+6      	; 0x32b6 <vfprintf+0x612>
    32b0:	88 e7       	ldi	r24, 0x78	; 120
    32b2:	90 e0       	ldi	r25, 0x00	; 0
    32b4:	02 c0       	rjmp	.+4      	; 0x32ba <vfprintf+0x616>
    32b6:	88 e5       	ldi	r24, 0x58	; 88
    32b8:	90 e0       	ldi	r25, 0x00	; 0
    32ba:	b6 01       	movw	r22, r12
    32bc:	0c c0       	rjmp	.+24     	; 0x32d6 <vfprintf+0x632>
    32be:	83 2f       	mov	r24, r19
    32c0:	86 78       	andi	r24, 0x86	; 134
    32c2:	59 f0       	breq	.+22     	; 0x32da <vfprintf+0x636>
    32c4:	31 ff       	sbrs	r19, 1
    32c6:	02 c0       	rjmp	.+4      	; 0x32cc <vfprintf+0x628>
    32c8:	8b e2       	ldi	r24, 0x2B	; 43
    32ca:	01 c0       	rjmp	.+2      	; 0x32ce <vfprintf+0x62a>
    32cc:	80 e2       	ldi	r24, 0x20	; 32
    32ce:	37 fd       	sbrc	r19, 7
    32d0:	8d e2       	ldi	r24, 0x2D	; 45
    32d2:	b6 01       	movw	r22, r12
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	0e 94 83 1c 	call	0x3906	; 0x3906 <fputc>
    32da:	e1 16       	cp	r14, r17
    32dc:	38 f4       	brcc	.+14     	; 0x32ec <vfprintf+0x648>
    32de:	b6 01       	movw	r22, r12
    32e0:	80 e3       	ldi	r24, 0x30	; 48
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	0e 94 83 1c 	call	0x3906	; 0x3906 <fputc>
    32e8:	11 50       	subi	r17, 0x01	; 1
    32ea:	f7 cf       	rjmp	.-18     	; 0x32da <vfprintf+0x636>
    32ec:	ea 94       	dec	r14
    32ee:	f3 01       	movw	r30, r6
    32f0:	ee 0d       	add	r30, r14
    32f2:	f1 1d       	adc	r31, r1
    32f4:	80 81       	ld	r24, Z
    32f6:	b6 01       	movw	r22, r12
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	0e 94 83 1c 	call	0x3906	; 0x3906 <fputc>
    32fe:	e1 10       	cpse	r14, r1
    3300:	f5 cf       	rjmp	.-22     	; 0x32ec <vfprintf+0x648>
    3302:	14 c0       	rjmp	.+40     	; 0x332c <vfprintf+0x688>
    3304:	f4 e0       	ldi	r31, 0x04	; 4
    3306:	ff 15       	cp	r31, r15
    3308:	58 f5       	brcc	.+86     	; 0x3360 <vfprintf+0x6bc>
    330a:	84 e0       	ldi	r24, 0x04	; 4
    330c:	f8 1a       	sub	r15, r24
    330e:	33 fe       	sbrs	r3, 3
    3310:	1e c0       	rjmp	.+60     	; 0x334e <vfprintf+0x6aa>
    3312:	21 10       	cpse	r2, r1
    3314:	26 c0       	rjmp	.+76     	; 0x3362 <vfprintf+0x6be>
    3316:	03 ff       	sbrs	r16, 3
    3318:	2a c0       	rjmp	.+84     	; 0x336e <vfprintf+0x6ca>
    331a:	04 e3       	ldi	r16, 0x34	; 52
    331c:	11 e0       	ldi	r17, 0x01	; 1
    331e:	f3 2d       	mov	r31, r3
    3320:	f0 71       	andi	r31, 0x10	; 16
    3322:	3f 2e       	mov	r3, r31
    3324:	f8 01       	movw	r30, r16
    3326:	84 91       	lpm	r24, Z
    3328:	81 11       	cpse	r24, r1
    332a:	24 c0       	rjmp	.+72     	; 0x3374 <vfprintf+0x6d0>
    332c:	ff 20       	and	r15, r15
    332e:	09 f4       	brne	.+2      	; 0x3332 <vfprintf+0x68e>
    3330:	e5 cc       	rjmp	.-1590   	; 0x2cfc <vfprintf+0x58>
    3332:	b6 01       	movw	r22, r12
    3334:	80 e2       	ldi	r24, 0x20	; 32
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	0e 94 83 1c 	call	0x3906	; 0x3906 <fputc>
    333c:	fa 94       	dec	r15
    333e:	f6 cf       	rjmp	.-20     	; 0x332c <vfprintf+0x688>
    3340:	f6 01       	movw	r30, r12
    3342:	86 81       	ldd	r24, Z+6	; 0x06
    3344:	97 81       	ldd	r25, Z+7	; 0x07
    3346:	26 c0       	rjmp	.+76     	; 0x3394 <vfprintf+0x6f0>
    3348:	8f ef       	ldi	r24, 0xFF	; 255
    334a:	9f ef       	ldi	r25, 0xFF	; 255
    334c:	23 c0       	rjmp	.+70     	; 0x3394 <vfprintf+0x6f0>
    334e:	b6 01       	movw	r22, r12
    3350:	80 e2       	ldi	r24, 0x20	; 32
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	0e 94 83 1c 	call	0x3906	; 0x3906 <fputc>
    3358:	fa 94       	dec	r15
    335a:	f1 10       	cpse	r15, r1
    335c:	f8 cf       	rjmp	.-16     	; 0x334e <vfprintf+0x6aa>
    335e:	d9 cf       	rjmp	.-78     	; 0x3312 <vfprintf+0x66e>
    3360:	f1 2c       	mov	r15, r1
    3362:	b6 01       	movw	r22, r12
    3364:	82 2d       	mov	r24, r2
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	0e 94 83 1c 	call	0x3906	; 0x3906 <fputc>
    336c:	d4 cf       	rjmp	.-88     	; 0x3316 <vfprintf+0x672>
    336e:	08 e3       	ldi	r16, 0x38	; 56
    3370:	11 e0       	ldi	r17, 0x01	; 1
    3372:	d5 cf       	rjmp	.-86     	; 0x331e <vfprintf+0x67a>
    3374:	31 10       	cpse	r3, r1
    3376:	80 52       	subi	r24, 0x20	; 32
    3378:	b6 01       	movw	r22, r12
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	0e 94 83 1c 	call	0x3906	; 0x3906 <fputc>
    3380:	0f 5f       	subi	r16, 0xFF	; 255
    3382:	1f 4f       	sbci	r17, 0xFF	; 255
    3384:	cf cf       	rjmp	.-98     	; 0x3324 <vfprintf+0x680>
    3386:	23 e0       	ldi	r18, 0x03	; 3
    3388:	2f 15       	cp	r18, r15
    338a:	10 f4       	brcc	.+4      	; 0x3390 <vfprintf+0x6ec>
    338c:	83 e0       	ldi	r24, 0x03	; 3
    338e:	be cf       	rjmp	.-132    	; 0x330c <vfprintf+0x668>
    3390:	f1 2c       	mov	r15, r1
    3392:	c1 cf       	rjmp	.-126    	; 0x3316 <vfprintf+0x672>
    3394:	63 96       	adiw	r28, 0x13	; 19
    3396:	e2 e1       	ldi	r30, 0x12	; 18
    3398:	0c 94 33 1a 	jmp	0x3466	; 0x3466 <__epilogue_restores__>

0000339c <__udivmodsi4>:
    339c:	a1 e2       	ldi	r26, 0x21	; 33
    339e:	1a 2e       	mov	r1, r26
    33a0:	aa 1b       	sub	r26, r26
    33a2:	bb 1b       	sub	r27, r27
    33a4:	fd 01       	movw	r30, r26
    33a6:	0d c0       	rjmp	.+26     	; 0x33c2 <__udivmodsi4_ep>

000033a8 <__udivmodsi4_loop>:
    33a8:	aa 1f       	adc	r26, r26
    33aa:	bb 1f       	adc	r27, r27
    33ac:	ee 1f       	adc	r30, r30
    33ae:	ff 1f       	adc	r31, r31
    33b0:	a2 17       	cp	r26, r18
    33b2:	b3 07       	cpc	r27, r19
    33b4:	e4 07       	cpc	r30, r20
    33b6:	f5 07       	cpc	r31, r21
    33b8:	20 f0       	brcs	.+8      	; 0x33c2 <__udivmodsi4_ep>
    33ba:	a2 1b       	sub	r26, r18
    33bc:	b3 0b       	sbc	r27, r19
    33be:	e4 0b       	sbc	r30, r20
    33c0:	f5 0b       	sbc	r31, r21

000033c2 <__udivmodsi4_ep>:
    33c2:	66 1f       	adc	r22, r22
    33c4:	77 1f       	adc	r23, r23
    33c6:	88 1f       	adc	r24, r24
    33c8:	99 1f       	adc	r25, r25
    33ca:	1a 94       	dec	r1
    33cc:	69 f7       	brne	.-38     	; 0x33a8 <__udivmodsi4_loop>
    33ce:	60 95       	com	r22
    33d0:	70 95       	com	r23
    33d2:	80 95       	com	r24
    33d4:	90 95       	com	r25
    33d6:	9b 01       	movw	r18, r22
    33d8:	ac 01       	movw	r20, r24
    33da:	bd 01       	movw	r22, r26
    33dc:	cf 01       	movw	r24, r30
    33de:	08 95       	ret

000033e0 <__divmodsi4>:
    33e0:	05 2e       	mov	r0, r21
    33e2:	97 fb       	bst	r25, 7
    33e4:	1e f4       	brtc	.+6      	; 0x33ec <__divmodsi4+0xc>
    33e6:	00 94       	com	r0
    33e8:	0e 94 07 1a 	call	0x340e	; 0x340e <__negsi2>
    33ec:	57 fd       	sbrc	r21, 7
    33ee:	07 d0       	rcall	.+14     	; 0x33fe <__divmodsi4_neg2>
    33f0:	0e 94 ce 19 	call	0x339c	; 0x339c <__udivmodsi4>
    33f4:	07 fc       	sbrc	r0, 7
    33f6:	03 d0       	rcall	.+6      	; 0x33fe <__divmodsi4_neg2>
    33f8:	4e f4       	brtc	.+18     	; 0x340c <__divmodsi4_exit>
    33fa:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__negsi2>

000033fe <__divmodsi4_neg2>:
    33fe:	50 95       	com	r21
    3400:	40 95       	com	r20
    3402:	30 95       	com	r19
    3404:	21 95       	neg	r18
    3406:	3f 4f       	sbci	r19, 0xFF	; 255
    3408:	4f 4f       	sbci	r20, 0xFF	; 255
    340a:	5f 4f       	sbci	r21, 0xFF	; 255

0000340c <__divmodsi4_exit>:
    340c:	08 95       	ret

0000340e <__negsi2>:
    340e:	90 95       	com	r25
    3410:	80 95       	com	r24
    3412:	70 95       	com	r23
    3414:	61 95       	neg	r22
    3416:	7f 4f       	sbci	r23, 0xFF	; 255
    3418:	8f 4f       	sbci	r24, 0xFF	; 255
    341a:	9f 4f       	sbci	r25, 0xFF	; 255
    341c:	08 95       	ret

0000341e <__mulshisi3>:
    341e:	b7 ff       	sbrs	r27, 7
    3420:	0c 94 4e 1a 	jmp	0x349c	; 0x349c <__muluhisi3>

00003424 <__mulohisi3>:
    3424:	0e 94 4e 1a 	call	0x349c	; 0x349c <__muluhisi3>
    3428:	82 1b       	sub	r24, r18
    342a:	93 0b       	sbc	r25, r19
    342c:	08 95       	ret

0000342e <__prologue_saves__>:
    342e:	2f 92       	push	r2
    3430:	3f 92       	push	r3
    3432:	4f 92       	push	r4
    3434:	5f 92       	push	r5
    3436:	6f 92       	push	r6
    3438:	7f 92       	push	r7
    343a:	8f 92       	push	r8
    343c:	9f 92       	push	r9
    343e:	af 92       	push	r10
    3440:	bf 92       	push	r11
    3442:	cf 92       	push	r12
    3444:	df 92       	push	r13
    3446:	ef 92       	push	r14
    3448:	ff 92       	push	r15
    344a:	0f 93       	push	r16
    344c:	1f 93       	push	r17
    344e:	cf 93       	push	r28
    3450:	df 93       	push	r29
    3452:	cd b7       	in	r28, 0x3d	; 61
    3454:	de b7       	in	r29, 0x3e	; 62
    3456:	ca 1b       	sub	r28, r26
    3458:	db 0b       	sbc	r29, r27
    345a:	0f b6       	in	r0, 0x3f	; 63
    345c:	f8 94       	cli
    345e:	de bf       	out	0x3e, r29	; 62
    3460:	0f be       	out	0x3f, r0	; 63
    3462:	cd bf       	out	0x3d, r28	; 61
    3464:	09 94       	ijmp

00003466 <__epilogue_restores__>:
    3466:	2a 88       	ldd	r2, Y+18	; 0x12
    3468:	39 88       	ldd	r3, Y+17	; 0x11
    346a:	48 88       	ldd	r4, Y+16	; 0x10
    346c:	5f 84       	ldd	r5, Y+15	; 0x0f
    346e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3470:	7d 84       	ldd	r7, Y+13	; 0x0d
    3472:	8c 84       	ldd	r8, Y+12	; 0x0c
    3474:	9b 84       	ldd	r9, Y+11	; 0x0b
    3476:	aa 84       	ldd	r10, Y+10	; 0x0a
    3478:	b9 84       	ldd	r11, Y+9	; 0x09
    347a:	c8 84       	ldd	r12, Y+8	; 0x08
    347c:	df 80       	ldd	r13, Y+7	; 0x07
    347e:	ee 80       	ldd	r14, Y+6	; 0x06
    3480:	fd 80       	ldd	r15, Y+5	; 0x05
    3482:	0c 81       	ldd	r16, Y+4	; 0x04
    3484:	1b 81       	ldd	r17, Y+3	; 0x03
    3486:	aa 81       	ldd	r26, Y+2	; 0x02
    3488:	b9 81       	ldd	r27, Y+1	; 0x01
    348a:	ce 0f       	add	r28, r30
    348c:	d1 1d       	adc	r29, r1
    348e:	0f b6       	in	r0, 0x3f	; 63
    3490:	f8 94       	cli
    3492:	de bf       	out	0x3e, r29	; 62
    3494:	0f be       	out	0x3f, r0	; 63
    3496:	cd bf       	out	0x3d, r28	; 61
    3498:	ed 01       	movw	r28, r26
    349a:	08 95       	ret

0000349c <__muluhisi3>:
    349c:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <__umulhisi3>
    34a0:	a5 9f       	mul	r26, r21
    34a2:	90 0d       	add	r25, r0
    34a4:	b4 9f       	mul	r27, r20
    34a6:	90 0d       	add	r25, r0
    34a8:	a4 9f       	mul	r26, r20
    34aa:	80 0d       	add	r24, r0
    34ac:	91 1d       	adc	r25, r1
    34ae:	11 24       	eor	r1, r1
    34b0:	08 95       	ret

000034b2 <__umulhisi3>:
    34b2:	a2 9f       	mul	r26, r18
    34b4:	b0 01       	movw	r22, r0
    34b6:	b3 9f       	mul	r27, r19
    34b8:	c0 01       	movw	r24, r0
    34ba:	a3 9f       	mul	r26, r19
    34bc:	70 0d       	add	r23, r0
    34be:	81 1d       	adc	r24, r1
    34c0:	11 24       	eor	r1, r1
    34c2:	91 1d       	adc	r25, r1
    34c4:	b2 9f       	mul	r27, r18
    34c6:	70 0d       	add	r23, r0
    34c8:	81 1d       	adc	r24, r1
    34ca:	11 24       	eor	r1, r1
    34cc:	91 1d       	adc	r25, r1
    34ce:	08 95       	ret

000034d0 <malloc>:
    34d0:	cf 93       	push	r28
    34d2:	df 93       	push	r29
    34d4:	82 30       	cpi	r24, 0x02	; 2
    34d6:	91 05       	cpc	r25, r1
    34d8:	10 f4       	brcc	.+4      	; 0x34de <malloc+0xe>
    34da:	82 e0       	ldi	r24, 0x02	; 2
    34dc:	90 e0       	ldi	r25, 0x00	; 0
    34de:	e0 91 64 0a 	lds	r30, 0x0A64
    34e2:	f0 91 65 0a 	lds	r31, 0x0A65
    34e6:	20 e0       	ldi	r18, 0x00	; 0
    34e8:	30 e0       	ldi	r19, 0x00	; 0
    34ea:	c0 e0       	ldi	r28, 0x00	; 0
    34ec:	d0 e0       	ldi	r29, 0x00	; 0
    34ee:	30 97       	sbiw	r30, 0x00	; 0
    34f0:	11 f1       	breq	.+68     	; 0x3536 <malloc+0x66>
    34f2:	40 81       	ld	r20, Z
    34f4:	51 81       	ldd	r21, Z+1	; 0x01
    34f6:	48 17       	cp	r20, r24
    34f8:	59 07       	cpc	r21, r25
    34fa:	c0 f0       	brcs	.+48     	; 0x352c <malloc+0x5c>
    34fc:	48 17       	cp	r20, r24
    34fe:	59 07       	cpc	r21, r25
    3500:	61 f4       	brne	.+24     	; 0x351a <malloc+0x4a>
    3502:	82 81       	ldd	r24, Z+2	; 0x02
    3504:	93 81       	ldd	r25, Z+3	; 0x03
    3506:	20 97       	sbiw	r28, 0x00	; 0
    3508:	19 f0       	breq	.+6      	; 0x3510 <malloc+0x40>
    350a:	9b 83       	std	Y+3, r25	; 0x03
    350c:	8a 83       	std	Y+2, r24	; 0x02
    350e:	2b c0       	rjmp	.+86     	; 0x3566 <malloc+0x96>
    3510:	90 93 65 0a 	sts	0x0A65, r25
    3514:	80 93 64 0a 	sts	0x0A64, r24
    3518:	26 c0       	rjmp	.+76     	; 0x3566 <malloc+0x96>
    351a:	21 15       	cp	r18, r1
    351c:	31 05       	cpc	r19, r1
    351e:	19 f0       	breq	.+6      	; 0x3526 <malloc+0x56>
    3520:	42 17       	cp	r20, r18
    3522:	53 07       	cpc	r21, r19
    3524:	18 f4       	brcc	.+6      	; 0x352c <malloc+0x5c>
    3526:	9a 01       	movw	r18, r20
    3528:	be 01       	movw	r22, r28
    352a:	df 01       	movw	r26, r30
    352c:	ef 01       	movw	r28, r30
    352e:	02 80       	ldd	r0, Z+2	; 0x02
    3530:	f3 81       	ldd	r31, Z+3	; 0x03
    3532:	e0 2d       	mov	r30, r0
    3534:	dc cf       	rjmp	.-72     	; 0x34ee <malloc+0x1e>
    3536:	21 15       	cp	r18, r1
    3538:	31 05       	cpc	r19, r1
    353a:	09 f1       	breq	.+66     	; 0x357e <malloc+0xae>
    353c:	28 1b       	sub	r18, r24
    353e:	39 0b       	sbc	r19, r25
    3540:	24 30       	cpi	r18, 0x04	; 4
    3542:	31 05       	cpc	r19, r1
    3544:	90 f4       	brcc	.+36     	; 0x356a <malloc+0x9a>
    3546:	12 96       	adiw	r26, 0x02	; 2
    3548:	8d 91       	ld	r24, X+
    354a:	9c 91       	ld	r25, X
    354c:	13 97       	sbiw	r26, 0x03	; 3
    354e:	61 15       	cp	r22, r1
    3550:	71 05       	cpc	r23, r1
    3552:	21 f0       	breq	.+8      	; 0x355c <malloc+0x8c>
    3554:	fb 01       	movw	r30, r22
    3556:	93 83       	std	Z+3, r25	; 0x03
    3558:	82 83       	std	Z+2, r24	; 0x02
    355a:	04 c0       	rjmp	.+8      	; 0x3564 <malloc+0x94>
    355c:	90 93 65 0a 	sts	0x0A65, r25
    3560:	80 93 64 0a 	sts	0x0A64, r24
    3564:	fd 01       	movw	r30, r26
    3566:	32 96       	adiw	r30, 0x02	; 2
    3568:	44 c0       	rjmp	.+136    	; 0x35f2 <malloc+0x122>
    356a:	fd 01       	movw	r30, r26
    356c:	e2 0f       	add	r30, r18
    356e:	f3 1f       	adc	r31, r19
    3570:	81 93       	st	Z+, r24
    3572:	91 93       	st	Z+, r25
    3574:	22 50       	subi	r18, 0x02	; 2
    3576:	31 09       	sbc	r19, r1
    3578:	2d 93       	st	X+, r18
    357a:	3c 93       	st	X, r19
    357c:	3a c0       	rjmp	.+116    	; 0x35f2 <malloc+0x122>
    357e:	20 91 62 0a 	lds	r18, 0x0A62
    3582:	30 91 63 0a 	lds	r19, 0x0A63
    3586:	23 2b       	or	r18, r19
    3588:	41 f4       	brne	.+16     	; 0x359a <malloc+0xca>
    358a:	20 91 02 02 	lds	r18, 0x0202
    358e:	30 91 03 02 	lds	r19, 0x0203
    3592:	30 93 63 0a 	sts	0x0A63, r19
    3596:	20 93 62 0a 	sts	0x0A62, r18
    359a:	20 91 00 02 	lds	r18, 0x0200
    359e:	30 91 01 02 	lds	r19, 0x0201
    35a2:	21 15       	cp	r18, r1
    35a4:	31 05       	cpc	r19, r1
    35a6:	41 f4       	brne	.+16     	; 0x35b8 <malloc+0xe8>
    35a8:	2d b7       	in	r18, 0x3d	; 61
    35aa:	3e b7       	in	r19, 0x3e	; 62
    35ac:	40 91 04 02 	lds	r20, 0x0204
    35b0:	50 91 05 02 	lds	r21, 0x0205
    35b4:	24 1b       	sub	r18, r20
    35b6:	35 0b       	sbc	r19, r21
    35b8:	e0 91 62 0a 	lds	r30, 0x0A62
    35bc:	f0 91 63 0a 	lds	r31, 0x0A63
    35c0:	e2 17       	cp	r30, r18
    35c2:	f3 07       	cpc	r31, r19
    35c4:	a0 f4       	brcc	.+40     	; 0x35ee <malloc+0x11e>
    35c6:	2e 1b       	sub	r18, r30
    35c8:	3f 0b       	sbc	r19, r31
    35ca:	28 17       	cp	r18, r24
    35cc:	39 07       	cpc	r19, r25
    35ce:	78 f0       	brcs	.+30     	; 0x35ee <malloc+0x11e>
    35d0:	ac 01       	movw	r20, r24
    35d2:	4e 5f       	subi	r20, 0xFE	; 254
    35d4:	5f 4f       	sbci	r21, 0xFF	; 255
    35d6:	24 17       	cp	r18, r20
    35d8:	35 07       	cpc	r19, r21
    35da:	48 f0       	brcs	.+18     	; 0x35ee <malloc+0x11e>
    35dc:	4e 0f       	add	r20, r30
    35de:	5f 1f       	adc	r21, r31
    35e0:	50 93 63 0a 	sts	0x0A63, r21
    35e4:	40 93 62 0a 	sts	0x0A62, r20
    35e8:	81 93       	st	Z+, r24
    35ea:	91 93       	st	Z+, r25
    35ec:	02 c0       	rjmp	.+4      	; 0x35f2 <malloc+0x122>
    35ee:	e0 e0       	ldi	r30, 0x00	; 0
    35f0:	f0 e0       	ldi	r31, 0x00	; 0
    35f2:	cf 01       	movw	r24, r30
    35f4:	df 91       	pop	r29
    35f6:	cf 91       	pop	r28
    35f8:	08 95       	ret

000035fa <free>:
    35fa:	0f 93       	push	r16
    35fc:	1f 93       	push	r17
    35fe:	cf 93       	push	r28
    3600:	df 93       	push	r29
    3602:	00 97       	sbiw	r24, 0x00	; 0
    3604:	09 f4       	brne	.+2      	; 0x3608 <free+0xe>
    3606:	8c c0       	rjmp	.+280    	; 0x3720 <free+0x126>
    3608:	fc 01       	movw	r30, r24
    360a:	32 97       	sbiw	r30, 0x02	; 2
    360c:	13 82       	std	Z+3, r1	; 0x03
    360e:	12 82       	std	Z+2, r1	; 0x02
    3610:	00 91 64 0a 	lds	r16, 0x0A64
    3614:	10 91 65 0a 	lds	r17, 0x0A65
    3618:	01 15       	cp	r16, r1
    361a:	11 05       	cpc	r17, r1
    361c:	81 f4       	brne	.+32     	; 0x363e <free+0x44>
    361e:	20 81       	ld	r18, Z
    3620:	31 81       	ldd	r19, Z+1	; 0x01
    3622:	82 0f       	add	r24, r18
    3624:	93 1f       	adc	r25, r19
    3626:	20 91 62 0a 	lds	r18, 0x0A62
    362a:	30 91 63 0a 	lds	r19, 0x0A63
    362e:	28 17       	cp	r18, r24
    3630:	39 07       	cpc	r19, r25
    3632:	79 f5       	brne	.+94     	; 0x3692 <free+0x98>
    3634:	f0 93 63 0a 	sts	0x0A63, r31
    3638:	e0 93 62 0a 	sts	0x0A62, r30
    363c:	71 c0       	rjmp	.+226    	; 0x3720 <free+0x126>
    363e:	d8 01       	movw	r26, r16
    3640:	40 e0       	ldi	r20, 0x00	; 0
    3642:	50 e0       	ldi	r21, 0x00	; 0
    3644:	ae 17       	cp	r26, r30
    3646:	bf 07       	cpc	r27, r31
    3648:	50 f4       	brcc	.+20     	; 0x365e <free+0x64>
    364a:	12 96       	adiw	r26, 0x02	; 2
    364c:	2d 91       	ld	r18, X+
    364e:	3c 91       	ld	r19, X
    3650:	13 97       	sbiw	r26, 0x03	; 3
    3652:	ad 01       	movw	r20, r26
    3654:	21 15       	cp	r18, r1
    3656:	31 05       	cpc	r19, r1
    3658:	09 f1       	breq	.+66     	; 0x369c <free+0xa2>
    365a:	d9 01       	movw	r26, r18
    365c:	f3 cf       	rjmp	.-26     	; 0x3644 <free+0x4a>
    365e:	9d 01       	movw	r18, r26
    3660:	da 01       	movw	r26, r20
    3662:	33 83       	std	Z+3, r19	; 0x03
    3664:	22 83       	std	Z+2, r18	; 0x02
    3666:	60 81       	ld	r22, Z
    3668:	71 81       	ldd	r23, Z+1	; 0x01
    366a:	86 0f       	add	r24, r22
    366c:	97 1f       	adc	r25, r23
    366e:	82 17       	cp	r24, r18
    3670:	93 07       	cpc	r25, r19
    3672:	69 f4       	brne	.+26     	; 0x368e <free+0x94>
    3674:	ec 01       	movw	r28, r24
    3676:	28 81       	ld	r18, Y
    3678:	39 81       	ldd	r19, Y+1	; 0x01
    367a:	26 0f       	add	r18, r22
    367c:	37 1f       	adc	r19, r23
    367e:	2e 5f       	subi	r18, 0xFE	; 254
    3680:	3f 4f       	sbci	r19, 0xFF	; 255
    3682:	31 83       	std	Z+1, r19	; 0x01
    3684:	20 83       	st	Z, r18
    3686:	8a 81       	ldd	r24, Y+2	; 0x02
    3688:	9b 81       	ldd	r25, Y+3	; 0x03
    368a:	93 83       	std	Z+3, r25	; 0x03
    368c:	82 83       	std	Z+2, r24	; 0x02
    368e:	45 2b       	or	r20, r21
    3690:	29 f4       	brne	.+10     	; 0x369c <free+0xa2>
    3692:	f0 93 65 0a 	sts	0x0A65, r31
    3696:	e0 93 64 0a 	sts	0x0A64, r30
    369a:	42 c0       	rjmp	.+132    	; 0x3720 <free+0x126>
    369c:	13 96       	adiw	r26, 0x03	; 3
    369e:	fc 93       	st	X, r31
    36a0:	ee 93       	st	-X, r30
    36a2:	12 97       	sbiw	r26, 0x02	; 2
    36a4:	ed 01       	movw	r28, r26
    36a6:	49 91       	ld	r20, Y+
    36a8:	59 91       	ld	r21, Y+
    36aa:	9e 01       	movw	r18, r28
    36ac:	24 0f       	add	r18, r20
    36ae:	35 1f       	adc	r19, r21
    36b0:	e2 17       	cp	r30, r18
    36b2:	f3 07       	cpc	r31, r19
    36b4:	71 f4       	brne	.+28     	; 0x36d2 <free+0xd8>
    36b6:	80 81       	ld	r24, Z
    36b8:	91 81       	ldd	r25, Z+1	; 0x01
    36ba:	84 0f       	add	r24, r20
    36bc:	95 1f       	adc	r25, r21
    36be:	02 96       	adiw	r24, 0x02	; 2
    36c0:	11 96       	adiw	r26, 0x01	; 1
    36c2:	9c 93       	st	X, r25
    36c4:	8e 93       	st	-X, r24
    36c6:	82 81       	ldd	r24, Z+2	; 0x02
    36c8:	93 81       	ldd	r25, Z+3	; 0x03
    36ca:	13 96       	adiw	r26, 0x03	; 3
    36cc:	9c 93       	st	X, r25
    36ce:	8e 93       	st	-X, r24
    36d0:	12 97       	sbiw	r26, 0x02	; 2
    36d2:	e0 e0       	ldi	r30, 0x00	; 0
    36d4:	f0 e0       	ldi	r31, 0x00	; 0
    36d6:	d8 01       	movw	r26, r16
    36d8:	12 96       	adiw	r26, 0x02	; 2
    36da:	8d 91       	ld	r24, X+
    36dc:	9c 91       	ld	r25, X
    36de:	13 97       	sbiw	r26, 0x03	; 3
    36e0:	00 97       	sbiw	r24, 0x00	; 0
    36e2:	19 f0       	breq	.+6      	; 0x36ea <free+0xf0>
    36e4:	f8 01       	movw	r30, r16
    36e6:	8c 01       	movw	r16, r24
    36e8:	f6 cf       	rjmp	.-20     	; 0x36d6 <free+0xdc>
    36ea:	8d 91       	ld	r24, X+
    36ec:	9c 91       	ld	r25, X
    36ee:	98 01       	movw	r18, r16
    36f0:	2e 5f       	subi	r18, 0xFE	; 254
    36f2:	3f 4f       	sbci	r19, 0xFF	; 255
    36f4:	82 0f       	add	r24, r18
    36f6:	93 1f       	adc	r25, r19
    36f8:	20 91 62 0a 	lds	r18, 0x0A62
    36fc:	30 91 63 0a 	lds	r19, 0x0A63
    3700:	28 17       	cp	r18, r24
    3702:	39 07       	cpc	r19, r25
    3704:	69 f4       	brne	.+26     	; 0x3720 <free+0x126>
    3706:	30 97       	sbiw	r30, 0x00	; 0
    3708:	29 f4       	brne	.+10     	; 0x3714 <free+0x11a>
    370a:	10 92 65 0a 	sts	0x0A65, r1
    370e:	10 92 64 0a 	sts	0x0A64, r1
    3712:	02 c0       	rjmp	.+4      	; 0x3718 <free+0x11e>
    3714:	13 82       	std	Z+3, r1	; 0x03
    3716:	12 82       	std	Z+2, r1	; 0x02
    3718:	10 93 63 0a 	sts	0x0A63, r17
    371c:	00 93 62 0a 	sts	0x0A62, r16
    3720:	df 91       	pop	r29
    3722:	cf 91       	pop	r28
    3724:	1f 91       	pop	r17
    3726:	0f 91       	pop	r16
    3728:	08 95       	ret

0000372a <__ftoa_engine>:
    372a:	28 30       	cpi	r18, 0x08	; 8
    372c:	08 f0       	brcs	.+2      	; 0x3730 <__ftoa_engine+0x6>
    372e:	27 e0       	ldi	r18, 0x07	; 7
    3730:	33 27       	eor	r19, r19
    3732:	da 01       	movw	r26, r20
    3734:	99 0f       	add	r25, r25
    3736:	31 1d       	adc	r19, r1
    3738:	87 fd       	sbrc	r24, 7
    373a:	91 60       	ori	r25, 0x01	; 1
    373c:	00 96       	adiw	r24, 0x00	; 0
    373e:	61 05       	cpc	r22, r1
    3740:	71 05       	cpc	r23, r1
    3742:	39 f4       	brne	.+14     	; 0x3752 <__ftoa_engine+0x28>
    3744:	32 60       	ori	r19, 0x02	; 2
    3746:	2e 5f       	subi	r18, 0xFE	; 254
    3748:	3d 93       	st	X+, r19
    374a:	30 e3       	ldi	r19, 0x30	; 48
    374c:	2a 95       	dec	r18
    374e:	e1 f7       	brne	.-8      	; 0x3748 <__ftoa_engine+0x1e>
    3750:	08 95       	ret
    3752:	9f 3f       	cpi	r25, 0xFF	; 255
    3754:	30 f0       	brcs	.+12     	; 0x3762 <__ftoa_engine+0x38>
    3756:	80 38       	cpi	r24, 0x80	; 128
    3758:	71 05       	cpc	r23, r1
    375a:	61 05       	cpc	r22, r1
    375c:	09 f0       	breq	.+2      	; 0x3760 <__ftoa_engine+0x36>
    375e:	3c 5f       	subi	r19, 0xFC	; 252
    3760:	3c 5f       	subi	r19, 0xFC	; 252
    3762:	3d 93       	st	X+, r19
    3764:	91 30       	cpi	r25, 0x01	; 1
    3766:	08 f0       	brcs	.+2      	; 0x376a <__ftoa_engine+0x40>
    3768:	80 68       	ori	r24, 0x80	; 128
    376a:	91 1d       	adc	r25, r1
    376c:	df 93       	push	r29
    376e:	cf 93       	push	r28
    3770:	1f 93       	push	r17
    3772:	0f 93       	push	r16
    3774:	ff 92       	push	r15
    3776:	ef 92       	push	r14
    3778:	19 2f       	mov	r17, r25
    377a:	98 7f       	andi	r25, 0xF8	; 248
    377c:	96 95       	lsr	r25
    377e:	e9 2f       	mov	r30, r25
    3780:	96 95       	lsr	r25
    3782:	96 95       	lsr	r25
    3784:	e9 0f       	add	r30, r25
    3786:	ff 27       	eor	r31, r31
    3788:	ea 56       	subi	r30, 0x6A	; 106
    378a:	fe 4f       	sbci	r31, 0xFE	; 254
    378c:	99 27       	eor	r25, r25
    378e:	33 27       	eor	r19, r19
    3790:	ee 24       	eor	r14, r14
    3792:	ff 24       	eor	r15, r15
    3794:	a7 01       	movw	r20, r14
    3796:	e7 01       	movw	r28, r14
    3798:	05 90       	lpm	r0, Z+
    379a:	08 94       	sec
    379c:	07 94       	ror	r0
    379e:	28 f4       	brcc	.+10     	; 0x37aa <__ftoa_engine+0x80>
    37a0:	36 0f       	add	r19, r22
    37a2:	e7 1e       	adc	r14, r23
    37a4:	f8 1e       	adc	r15, r24
    37a6:	49 1f       	adc	r20, r25
    37a8:	51 1d       	adc	r21, r1
    37aa:	66 0f       	add	r22, r22
    37ac:	77 1f       	adc	r23, r23
    37ae:	88 1f       	adc	r24, r24
    37b0:	99 1f       	adc	r25, r25
    37b2:	06 94       	lsr	r0
    37b4:	a1 f7       	brne	.-24     	; 0x379e <__ftoa_engine+0x74>
    37b6:	05 90       	lpm	r0, Z+
    37b8:	07 94       	ror	r0
    37ba:	28 f4       	brcc	.+10     	; 0x37c6 <__ftoa_engine+0x9c>
    37bc:	e7 0e       	add	r14, r23
    37be:	f8 1e       	adc	r15, r24
    37c0:	49 1f       	adc	r20, r25
    37c2:	56 1f       	adc	r21, r22
    37c4:	c1 1d       	adc	r28, r1
    37c6:	77 0f       	add	r23, r23
    37c8:	88 1f       	adc	r24, r24
    37ca:	99 1f       	adc	r25, r25
    37cc:	66 1f       	adc	r22, r22
    37ce:	06 94       	lsr	r0
    37d0:	a1 f7       	brne	.-24     	; 0x37ba <__ftoa_engine+0x90>
    37d2:	05 90       	lpm	r0, Z+
    37d4:	07 94       	ror	r0
    37d6:	28 f4       	brcc	.+10     	; 0x37e2 <__ftoa_engine+0xb8>
    37d8:	f8 0e       	add	r15, r24
    37da:	49 1f       	adc	r20, r25
    37dc:	56 1f       	adc	r21, r22
    37de:	c7 1f       	adc	r28, r23
    37e0:	d1 1d       	adc	r29, r1
    37e2:	88 0f       	add	r24, r24
    37e4:	99 1f       	adc	r25, r25
    37e6:	66 1f       	adc	r22, r22
    37e8:	77 1f       	adc	r23, r23
    37ea:	06 94       	lsr	r0
    37ec:	a1 f7       	brne	.-24     	; 0x37d6 <__ftoa_engine+0xac>
    37ee:	05 90       	lpm	r0, Z+
    37f0:	07 94       	ror	r0
    37f2:	20 f4       	brcc	.+8      	; 0x37fc <__ftoa_engine+0xd2>
    37f4:	49 0f       	add	r20, r25
    37f6:	56 1f       	adc	r21, r22
    37f8:	c7 1f       	adc	r28, r23
    37fa:	d8 1f       	adc	r29, r24
    37fc:	99 0f       	add	r25, r25
    37fe:	66 1f       	adc	r22, r22
    3800:	77 1f       	adc	r23, r23
    3802:	88 1f       	adc	r24, r24
    3804:	06 94       	lsr	r0
    3806:	a9 f7       	brne	.-22     	; 0x37f2 <__ftoa_engine+0xc8>
    3808:	84 91       	lpm	r24, Z
    380a:	10 95       	com	r17
    380c:	17 70       	andi	r17, 0x07	; 7
    380e:	41 f0       	breq	.+16     	; 0x3820 <__ftoa_engine+0xf6>
    3810:	d6 95       	lsr	r29
    3812:	c7 95       	ror	r28
    3814:	57 95       	ror	r21
    3816:	47 95       	ror	r20
    3818:	f7 94       	ror	r15
    381a:	e7 94       	ror	r14
    381c:	1a 95       	dec	r17
    381e:	c1 f7       	brne	.-16     	; 0x3810 <__ftoa_engine+0xe6>
    3820:	ec e3       	ldi	r30, 0x3C	; 60
    3822:	f1 e0       	ldi	r31, 0x01	; 1
    3824:	68 94       	set
    3826:	15 90       	lpm	r1, Z+
    3828:	15 91       	lpm	r17, Z+
    382a:	35 91       	lpm	r19, Z+
    382c:	65 91       	lpm	r22, Z+
    382e:	95 91       	lpm	r25, Z+
    3830:	05 90       	lpm	r0, Z+
    3832:	7f e2       	ldi	r23, 0x2F	; 47
    3834:	73 95       	inc	r23
    3836:	e1 18       	sub	r14, r1
    3838:	f1 0a       	sbc	r15, r17
    383a:	43 0b       	sbc	r20, r19
    383c:	56 0b       	sbc	r21, r22
    383e:	c9 0b       	sbc	r28, r25
    3840:	d0 09       	sbc	r29, r0
    3842:	c0 f7       	brcc	.-16     	; 0x3834 <__ftoa_engine+0x10a>
    3844:	e1 0c       	add	r14, r1
    3846:	f1 1e       	adc	r15, r17
    3848:	43 1f       	adc	r20, r19
    384a:	56 1f       	adc	r21, r22
    384c:	c9 1f       	adc	r28, r25
    384e:	d0 1d       	adc	r29, r0
    3850:	7e f4       	brtc	.+30     	; 0x3870 <__ftoa_engine+0x146>
    3852:	70 33       	cpi	r23, 0x30	; 48
    3854:	11 f4       	brne	.+4      	; 0x385a <__ftoa_engine+0x130>
    3856:	8a 95       	dec	r24
    3858:	e6 cf       	rjmp	.-52     	; 0x3826 <__ftoa_engine+0xfc>
    385a:	e8 94       	clt
    385c:	01 50       	subi	r16, 0x01	; 1
    385e:	30 f0       	brcs	.+12     	; 0x386c <__ftoa_engine+0x142>
    3860:	08 0f       	add	r16, r24
    3862:	0a f4       	brpl	.+2      	; 0x3866 <__ftoa_engine+0x13c>
    3864:	00 27       	eor	r16, r16
    3866:	02 17       	cp	r16, r18
    3868:	08 f4       	brcc	.+2      	; 0x386c <__ftoa_engine+0x142>
    386a:	20 2f       	mov	r18, r16
    386c:	23 95       	inc	r18
    386e:	02 2f       	mov	r16, r18
    3870:	7a 33       	cpi	r23, 0x3A	; 58
    3872:	28 f0       	brcs	.+10     	; 0x387e <__ftoa_engine+0x154>
    3874:	79 e3       	ldi	r23, 0x39	; 57
    3876:	7d 93       	st	X+, r23
    3878:	2a 95       	dec	r18
    387a:	e9 f7       	brne	.-6      	; 0x3876 <__ftoa_engine+0x14c>
    387c:	10 c0       	rjmp	.+32     	; 0x389e <__ftoa_engine+0x174>
    387e:	7d 93       	st	X+, r23
    3880:	2a 95       	dec	r18
    3882:	89 f6       	brne	.-94     	; 0x3826 <__ftoa_engine+0xfc>
    3884:	06 94       	lsr	r0
    3886:	97 95       	ror	r25
    3888:	67 95       	ror	r22
    388a:	37 95       	ror	r19
    388c:	17 95       	ror	r17
    388e:	17 94       	ror	r1
    3890:	e1 18       	sub	r14, r1
    3892:	f1 0a       	sbc	r15, r17
    3894:	43 0b       	sbc	r20, r19
    3896:	56 0b       	sbc	r21, r22
    3898:	c9 0b       	sbc	r28, r25
    389a:	d0 09       	sbc	r29, r0
    389c:	98 f0       	brcs	.+38     	; 0x38c4 <__ftoa_engine+0x19a>
    389e:	23 95       	inc	r18
    38a0:	7e 91       	ld	r23, -X
    38a2:	73 95       	inc	r23
    38a4:	7a 33       	cpi	r23, 0x3A	; 58
    38a6:	08 f0       	brcs	.+2      	; 0x38aa <__ftoa_engine+0x180>
    38a8:	70 e3       	ldi	r23, 0x30	; 48
    38aa:	7c 93       	st	X, r23
    38ac:	20 13       	cpse	r18, r16
    38ae:	b8 f7       	brcc	.-18     	; 0x389e <__ftoa_engine+0x174>
    38b0:	7e 91       	ld	r23, -X
    38b2:	70 61       	ori	r23, 0x10	; 16
    38b4:	7d 93       	st	X+, r23
    38b6:	30 f0       	brcs	.+12     	; 0x38c4 <__ftoa_engine+0x19a>
    38b8:	83 95       	inc	r24
    38ba:	71 e3       	ldi	r23, 0x31	; 49
    38bc:	7d 93       	st	X+, r23
    38be:	70 e3       	ldi	r23, 0x30	; 48
    38c0:	2a 95       	dec	r18
    38c2:	e1 f7       	brne	.-8      	; 0x38bc <__ftoa_engine+0x192>
    38c4:	11 24       	eor	r1, r1
    38c6:	ef 90       	pop	r14
    38c8:	ff 90       	pop	r15
    38ca:	0f 91       	pop	r16
    38cc:	1f 91       	pop	r17
    38ce:	cf 91       	pop	r28
    38d0:	df 91       	pop	r29
    38d2:	99 27       	eor	r25, r25
    38d4:	87 fd       	sbrc	r24, 7
    38d6:	90 95       	com	r25
    38d8:	08 95       	ret

000038da <strnlen_P>:
    38da:	fc 01       	movw	r30, r24
    38dc:	05 90       	lpm	r0, Z+
    38de:	61 50       	subi	r22, 0x01	; 1
    38e0:	70 40       	sbci	r23, 0x00	; 0
    38e2:	01 10       	cpse	r0, r1
    38e4:	d8 f7       	brcc	.-10     	; 0x38dc <strnlen_P+0x2>
    38e6:	80 95       	com	r24
    38e8:	90 95       	com	r25
    38ea:	8e 0f       	add	r24, r30
    38ec:	9f 1f       	adc	r25, r31
    38ee:	08 95       	ret

000038f0 <strnlen>:
    38f0:	fc 01       	movw	r30, r24
    38f2:	61 50       	subi	r22, 0x01	; 1
    38f4:	70 40       	sbci	r23, 0x00	; 0
    38f6:	01 90       	ld	r0, Z+
    38f8:	01 10       	cpse	r0, r1
    38fa:	d8 f7       	brcc	.-10     	; 0x38f2 <strnlen+0x2>
    38fc:	80 95       	com	r24
    38fe:	90 95       	com	r25
    3900:	8e 0f       	add	r24, r30
    3902:	9f 1f       	adc	r25, r31
    3904:	08 95       	ret

00003906 <fputc>:
    3906:	0f 93       	push	r16
    3908:	1f 93       	push	r17
    390a:	cf 93       	push	r28
    390c:	df 93       	push	r29
    390e:	fb 01       	movw	r30, r22
    3910:	23 81       	ldd	r18, Z+3	; 0x03
    3912:	21 fd       	sbrc	r18, 1
    3914:	03 c0       	rjmp	.+6      	; 0x391c <fputc+0x16>
    3916:	8f ef       	ldi	r24, 0xFF	; 255
    3918:	9f ef       	ldi	r25, 0xFF	; 255
    391a:	28 c0       	rjmp	.+80     	; 0x396c <fputc+0x66>
    391c:	22 ff       	sbrs	r18, 2
    391e:	16 c0       	rjmp	.+44     	; 0x394c <fputc+0x46>
    3920:	46 81       	ldd	r20, Z+6	; 0x06
    3922:	57 81       	ldd	r21, Z+7	; 0x07
    3924:	24 81       	ldd	r18, Z+4	; 0x04
    3926:	35 81       	ldd	r19, Z+5	; 0x05
    3928:	42 17       	cp	r20, r18
    392a:	53 07       	cpc	r21, r19
    392c:	44 f4       	brge	.+16     	; 0x393e <fputc+0x38>
    392e:	a0 81       	ld	r26, Z
    3930:	b1 81       	ldd	r27, Z+1	; 0x01
    3932:	9d 01       	movw	r18, r26
    3934:	2f 5f       	subi	r18, 0xFF	; 255
    3936:	3f 4f       	sbci	r19, 0xFF	; 255
    3938:	31 83       	std	Z+1, r19	; 0x01
    393a:	20 83       	st	Z, r18
    393c:	8c 93       	st	X, r24
    393e:	26 81       	ldd	r18, Z+6	; 0x06
    3940:	37 81       	ldd	r19, Z+7	; 0x07
    3942:	2f 5f       	subi	r18, 0xFF	; 255
    3944:	3f 4f       	sbci	r19, 0xFF	; 255
    3946:	37 83       	std	Z+7, r19	; 0x07
    3948:	26 83       	std	Z+6, r18	; 0x06
    394a:	10 c0       	rjmp	.+32     	; 0x396c <fputc+0x66>
    394c:	eb 01       	movw	r28, r22
    394e:	09 2f       	mov	r16, r25
    3950:	18 2f       	mov	r17, r24
    3952:	00 84       	ldd	r0, Z+8	; 0x08
    3954:	f1 85       	ldd	r31, Z+9	; 0x09
    3956:	e0 2d       	mov	r30, r0
    3958:	09 95       	icall
    395a:	89 2b       	or	r24, r25
    395c:	e1 f6       	brne	.-72     	; 0x3916 <fputc+0x10>
    395e:	8e 81       	ldd	r24, Y+6	; 0x06
    3960:	9f 81       	ldd	r25, Y+7	; 0x07
    3962:	01 96       	adiw	r24, 0x01	; 1
    3964:	9f 83       	std	Y+7, r25	; 0x07
    3966:	8e 83       	std	Y+6, r24	; 0x06
    3968:	81 2f       	mov	r24, r17
    396a:	90 2f       	mov	r25, r16
    396c:	df 91       	pop	r29
    396e:	cf 91       	pop	r28
    3970:	1f 91       	pop	r17
    3972:	0f 91       	pop	r16
    3974:	08 95       	ret

00003976 <printf>:
    3976:	a0 e0       	ldi	r26, 0x00	; 0
    3978:	b0 e0       	ldi	r27, 0x00	; 0
    397a:	e1 ec       	ldi	r30, 0xC1	; 193
    397c:	fc e1       	ldi	r31, 0x1C	; 28
    397e:	0c 94 27 1a 	jmp	0x344e	; 0x344e <__prologue_saves__+0x20>
    3982:	ae 01       	movw	r20, r28
    3984:	4b 5f       	subi	r20, 0xFB	; 251
    3986:	5f 4f       	sbci	r21, 0xFF	; 255
    3988:	fa 01       	movw	r30, r20
    398a:	61 91       	ld	r22, Z+
    398c:	71 91       	ld	r23, Z+
    398e:	af 01       	movw	r20, r30
    3990:	80 91 68 0a 	lds	r24, 0x0A68
    3994:	90 91 69 0a 	lds	r25, 0x0A69
    3998:	0e 94 52 16 	call	0x2ca4	; 0x2ca4 <vfprintf>
    399c:	e2 e0       	ldi	r30, 0x02	; 2
    399e:	0c 94 43 1a 	jmp	0x3486	; 0x3486 <__epilogue_restores__+0x20>

000039a2 <putchar>:
    39a2:	60 91 68 0a 	lds	r22, 0x0A68
    39a6:	70 91 69 0a 	lds	r23, 0x0A69
    39aa:	0e 94 83 1c 	call	0x3906	; 0x3906 <fputc>
    39ae:	08 95       	ret

000039b0 <puts>:
    39b0:	0f 93       	push	r16
    39b2:	1f 93       	push	r17
    39b4:	cf 93       	push	r28
    39b6:	df 93       	push	r29
    39b8:	e0 91 68 0a 	lds	r30, 0x0A68
    39bc:	f0 91 69 0a 	lds	r31, 0x0A69
    39c0:	23 81       	ldd	r18, Z+3	; 0x03
    39c2:	21 ff       	sbrs	r18, 1
    39c4:	1b c0       	rjmp	.+54     	; 0x39fc <puts+0x4c>
    39c6:	8c 01       	movw	r16, r24
    39c8:	d0 e0       	ldi	r29, 0x00	; 0
    39ca:	c0 e0       	ldi	r28, 0x00	; 0
    39cc:	f8 01       	movw	r30, r16
    39ce:	81 91       	ld	r24, Z+
    39d0:	8f 01       	movw	r16, r30
    39d2:	60 91 68 0a 	lds	r22, 0x0A68
    39d6:	70 91 69 0a 	lds	r23, 0x0A69
    39da:	db 01       	movw	r26, r22
    39dc:	18 96       	adiw	r26, 0x08	; 8
    39de:	ed 91       	ld	r30, X+
    39e0:	fc 91       	ld	r31, X
    39e2:	19 97       	sbiw	r26, 0x09	; 9
    39e4:	88 23       	and	r24, r24
    39e6:	31 f0       	breq	.+12     	; 0x39f4 <puts+0x44>
    39e8:	09 95       	icall
    39ea:	89 2b       	or	r24, r25
    39ec:	79 f3       	breq	.-34     	; 0x39cc <puts+0x1c>
    39ee:	df ef       	ldi	r29, 0xFF	; 255
    39f0:	cf ef       	ldi	r28, 0xFF	; 255
    39f2:	ec cf       	rjmp	.-40     	; 0x39cc <puts+0x1c>
    39f4:	8a e0       	ldi	r24, 0x0A	; 10
    39f6:	09 95       	icall
    39f8:	89 2b       	or	r24, r25
    39fa:	19 f0       	breq	.+6      	; 0x3a02 <puts+0x52>
    39fc:	8f ef       	ldi	r24, 0xFF	; 255
    39fe:	9f ef       	ldi	r25, 0xFF	; 255
    3a00:	02 c0       	rjmp	.+4      	; 0x3a06 <puts+0x56>
    3a02:	8d 2f       	mov	r24, r29
    3a04:	9c 2f       	mov	r25, r28
    3a06:	df 91       	pop	r29
    3a08:	cf 91       	pop	r28
    3a0a:	1f 91       	pop	r17
    3a0c:	0f 91       	pop	r16
    3a0e:	08 95       	ret

00003a10 <__ultoa_invert>:
    3a10:	fa 01       	movw	r30, r20
    3a12:	aa 27       	eor	r26, r26
    3a14:	28 30       	cpi	r18, 0x08	; 8
    3a16:	51 f1       	breq	.+84     	; 0x3a6c <__ultoa_invert+0x5c>
    3a18:	20 31       	cpi	r18, 0x10	; 16
    3a1a:	81 f1       	breq	.+96     	; 0x3a7c <__ultoa_invert+0x6c>
    3a1c:	e8 94       	clt
    3a1e:	6f 93       	push	r22
    3a20:	6e 7f       	andi	r22, 0xFE	; 254
    3a22:	6e 5f       	subi	r22, 0xFE	; 254
    3a24:	7f 4f       	sbci	r23, 0xFF	; 255
    3a26:	8f 4f       	sbci	r24, 0xFF	; 255
    3a28:	9f 4f       	sbci	r25, 0xFF	; 255
    3a2a:	af 4f       	sbci	r26, 0xFF	; 255
    3a2c:	b1 e0       	ldi	r27, 0x01	; 1
    3a2e:	3e d0       	rcall	.+124    	; 0x3aac <__ultoa_invert+0x9c>
    3a30:	b4 e0       	ldi	r27, 0x04	; 4
    3a32:	3c d0       	rcall	.+120    	; 0x3aac <__ultoa_invert+0x9c>
    3a34:	67 0f       	add	r22, r23
    3a36:	78 1f       	adc	r23, r24
    3a38:	89 1f       	adc	r24, r25
    3a3a:	9a 1f       	adc	r25, r26
    3a3c:	a1 1d       	adc	r26, r1
    3a3e:	68 0f       	add	r22, r24
    3a40:	79 1f       	adc	r23, r25
    3a42:	8a 1f       	adc	r24, r26
    3a44:	91 1d       	adc	r25, r1
    3a46:	a1 1d       	adc	r26, r1
    3a48:	6a 0f       	add	r22, r26
    3a4a:	71 1d       	adc	r23, r1
    3a4c:	81 1d       	adc	r24, r1
    3a4e:	91 1d       	adc	r25, r1
    3a50:	a1 1d       	adc	r26, r1
    3a52:	20 d0       	rcall	.+64     	; 0x3a94 <__ultoa_invert+0x84>
    3a54:	09 f4       	brne	.+2      	; 0x3a58 <__ultoa_invert+0x48>
    3a56:	68 94       	set
    3a58:	3f 91       	pop	r19
    3a5a:	2a e0       	ldi	r18, 0x0A	; 10
    3a5c:	26 9f       	mul	r18, r22
    3a5e:	11 24       	eor	r1, r1
    3a60:	30 19       	sub	r19, r0
    3a62:	30 5d       	subi	r19, 0xD0	; 208
    3a64:	31 93       	st	Z+, r19
    3a66:	de f6       	brtc	.-74     	; 0x3a1e <__ultoa_invert+0xe>
    3a68:	cf 01       	movw	r24, r30
    3a6a:	08 95       	ret
    3a6c:	46 2f       	mov	r20, r22
    3a6e:	47 70       	andi	r20, 0x07	; 7
    3a70:	40 5d       	subi	r20, 0xD0	; 208
    3a72:	41 93       	st	Z+, r20
    3a74:	b3 e0       	ldi	r27, 0x03	; 3
    3a76:	0f d0       	rcall	.+30     	; 0x3a96 <__ultoa_invert+0x86>
    3a78:	c9 f7       	brne	.-14     	; 0x3a6c <__ultoa_invert+0x5c>
    3a7a:	f6 cf       	rjmp	.-20     	; 0x3a68 <__ultoa_invert+0x58>
    3a7c:	46 2f       	mov	r20, r22
    3a7e:	4f 70       	andi	r20, 0x0F	; 15
    3a80:	40 5d       	subi	r20, 0xD0	; 208
    3a82:	4a 33       	cpi	r20, 0x3A	; 58
    3a84:	18 f0       	brcs	.+6      	; 0x3a8c <__ultoa_invert+0x7c>
    3a86:	49 5d       	subi	r20, 0xD9	; 217
    3a88:	31 fd       	sbrc	r19, 1
    3a8a:	40 52       	subi	r20, 0x20	; 32
    3a8c:	41 93       	st	Z+, r20
    3a8e:	02 d0       	rcall	.+4      	; 0x3a94 <__ultoa_invert+0x84>
    3a90:	a9 f7       	brne	.-22     	; 0x3a7c <__ultoa_invert+0x6c>
    3a92:	ea cf       	rjmp	.-44     	; 0x3a68 <__ultoa_invert+0x58>
    3a94:	b4 e0       	ldi	r27, 0x04	; 4
    3a96:	a6 95       	lsr	r26
    3a98:	97 95       	ror	r25
    3a9a:	87 95       	ror	r24
    3a9c:	77 95       	ror	r23
    3a9e:	67 95       	ror	r22
    3aa0:	ba 95       	dec	r27
    3aa2:	c9 f7       	brne	.-14     	; 0x3a96 <__ultoa_invert+0x86>
    3aa4:	00 97       	sbiw	r24, 0x00	; 0
    3aa6:	61 05       	cpc	r22, r1
    3aa8:	71 05       	cpc	r23, r1
    3aaa:	08 95       	ret
    3aac:	9b 01       	movw	r18, r22
    3aae:	ac 01       	movw	r20, r24
    3ab0:	0a 2e       	mov	r0, r26
    3ab2:	06 94       	lsr	r0
    3ab4:	57 95       	ror	r21
    3ab6:	47 95       	ror	r20
    3ab8:	37 95       	ror	r19
    3aba:	27 95       	ror	r18
    3abc:	ba 95       	dec	r27
    3abe:	c9 f7       	brne	.-14     	; 0x3ab2 <__ultoa_invert+0xa2>
    3ac0:	62 0f       	add	r22, r18
    3ac2:	73 1f       	adc	r23, r19
    3ac4:	84 1f       	adc	r24, r20
    3ac6:	95 1f       	adc	r25, r21
    3ac8:	a0 1d       	adc	r26, r0
    3aca:	08 95       	ret

00003acc <_exit>:
    3acc:	f8 94       	cli

00003ace <__stop_program>:
    3ace:	ff cf       	rjmp	.-2      	; 0x3ace <__stop_program>
