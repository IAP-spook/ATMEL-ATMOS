
ATMOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000292  00800200  00002db2  00002e46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002db2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000488  00800492  00800492  000030d8  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000030d8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000640  00000000  00000000  00003134  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007007  00000000  00000000  00003774  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000027e7  00000000  00000000  0000a77b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002462  00000000  00000000  0000cf62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000f84  00000000  00000000  0000f3c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001c0e  00000000  00000000  00010348  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003889  00000000  00000000  00011f56  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005f8  00000000  00000000  000157df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__ctors_end>
       4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      10:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      14:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      18:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      1c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      20:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      24:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      28:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      30:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      34:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      38:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      3c:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__vector_15>
      40:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      44:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      48:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      4c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      50:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      54:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      58:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      5c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      60:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      64:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      68:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      6c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      70:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      74:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      78:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      7c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      80:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      84:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      88:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      8c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      90:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      94:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      98:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      9c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a8:	0c 94 16 09 	jmp	0x122c	; 0x122c <__vector_42>
      ac:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      bc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      cc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      dc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      ec:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      fc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     100:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     104:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     108:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     10c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     110:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     114:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     118:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     11c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     120:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     124:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     128:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     12c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     130:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>

00000134 <__trampolines_end>:
     134:	6e 61       	ori	r22, 0x1E	; 30
     136:	6e 00       	.word	0x006e	; ????

00000138 <__c.2159>:
     138:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     148:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     158:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     168:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     178:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     188:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     198:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     208:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     218:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     228:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000236 <__ctors_end>:
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	d1 e2       	ldi	r29, 0x21	; 33
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61

00000242 <__do_copy_data>:
     242:	14 e0       	ldi	r17, 0x04	; 4
     244:	a0 e0       	ldi	r26, 0x00	; 0
     246:	b2 e0       	ldi	r27, 0x02	; 2
     248:	e2 eb       	ldi	r30, 0xB2	; 178
     24a:	fd e2       	ldi	r31, 0x2D	; 45
     24c:	02 c0       	rjmp	.+4      	; 0x252 <__do_copy_data+0x10>
     24e:	05 90       	lpm	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	a2 39       	cpi	r26, 0x92	; 146
     254:	b1 07       	cpc	r27, r17
     256:	d9 f7       	brne	.-10     	; 0x24e <__do_copy_data+0xc>

00000258 <__do_clear_bss>:
     258:	29 e0       	ldi	r18, 0x09	; 9
     25a:	a2 e9       	ldi	r26, 0x92	; 146
     25c:	b4 e0       	ldi	r27, 0x04	; 4
     25e:	01 c0       	rjmp	.+2      	; 0x262 <.do_clear_bss_start>

00000260 <.do_clear_bss_loop>:
     260:	1d 92       	st	X+, r1

00000262 <.do_clear_bss_start>:
     262:	aa 31       	cpi	r26, 0x1A	; 26
     264:	b2 07       	cpc	r27, r18
     266:	e1 f7       	brne	.-8      	; 0x260 <.do_clear_bss_loop>
     268:	0e 94 3a 01 	call	0x274	; 0x274 <main>
     26c:	0c 94 d7 16 	jmp	0x2dae	; 0x2dae <_exit>

00000270 <__bad_interrupt>:
     270:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000274 <main>:
}


int main(void)
{
	SYS_Init();
     274:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <SYS_Init>
#include "avr/interrupt.h"

int SensorDataCount;
/* TODO : clean up these messy init */
static void APP_Init(void){
	PWR_Init();
     278:	0e 94 c6 07 	call	0xf8c	; 0xf8c <PWR_Init>
	PWR_TurnOn5V();
     27c:	0e 94 ca 07 	call	0xf94	; 0xf94 <PWR_TurnOn5V>
	USART0_Init(9600);
     280:	60 e8       	ldi	r22, 0x80	; 128
     282:	75 e2       	ldi	r23, 0x25	; 37
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 ac 08 	call	0x1158	; 0x1158 <USART0_Init>
	DDRB |= 0b00010000;
     28c:	24 9a       	sbi	0x04, 4	; 4
	DDRE |= 0b00001000;
     28e:	6b 9a       	sbi	0x0d, 3	; 13
	PORTE|= 0b00001000;
     290:	73 9a       	sbi	0x0e, 3	; 14
	TWI_Init(10000);
     292:	60 e1       	ldi	r22, 0x10	; 16
     294:	77 e2       	ldi	r23, 0x27	; 39
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <TWI_Init>
	ADC_Init();
     29e:	0e 94 47 06 	call	0xc8e	; 0xc8e <ADC_Init>
	printf("BMP280 Status %i\n", BMP280_Init());
     2a2:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <BMP280_Init>
     2a6:	9f 93       	push	r25
     2a8:	8f 93       	push	r24
     2aa:	86 e2       	ldi	r24, 0x26	; 38
     2ac:	92 e0       	ldi	r25, 0x02	; 2
     2ae:	9f 93       	push	r25
     2b0:	8f 93       	push	r24
     2b2:	0e 94 38 16 	call	0x2c70	; 0x2c70 <printf>
	BMP280_SetOversampling(4);
     2b6:	84 e0       	ldi	r24, 0x04	; 4
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 b8 02 	call	0x570	; 0x570 <BMP280_SetOversampling>
	SPI_SlaveInit();
     2be:	0e 94 cc 07 	call	0xf98	; 0xf98 <SPI_SlaveInit>
	SensorDataCount = 0;
     2c2:	10 92 e0 08 	sts	0x08E0, r1
     2c6:	10 92 df 08 	sts	0x08DF, r1
{
	SYS_Init();
	APP_Init();
	
	// could have sealed following in a function //
	init_timeoutq();
     2ca:	0e 94 44 0b 	call	0x1688	; 0x1688 <init_timeoutq>
	BMP280Sensor *BMP280_ptr = New_BMP280_Sensor( 0,2 );
     2ce:	62 e0       	ldi	r22, 0x02	; 2
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 c9 0d 	call	0x1b92	; 0x1b92 <New_BMP280_Sensor>
     2da:	ec 01       	movw	r28, r24
	BMP280_FctnInit(BMP280_ptr);
     2dc:	0e 94 4b 0d 	call	0x1a96	; 0x1a96 <BMP280_FctnInit>
	init_Event_Timer();
     2e0:	0e 94 a2 06 	call	0xd44	; 0xd44 <init_Event_Timer>
	printf("init done!\n");
     2e4:	88 e3       	ldi	r24, 0x38	; 56
     2e6:	92 e0       	ldi	r25, 0x02	; 2
     2e8:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <puts>
	
	// could have sealed following in a function //
	load_new_sensor( 1000, 4000, (BaseSensor *)BMP280_ptr, 0 );
     2ec:	20 e0       	ldi	r18, 0x00	; 0
     2ee:	30 e0       	ldi	r19, 0x00	; 0
     2f0:	ae 01       	movw	r20, r28
     2f2:	60 ea       	ldi	r22, 0xA0	; 160
     2f4:	7f e0       	ldi	r23, 0x0F	; 15
     2f6:	88 ee       	ldi	r24, 0xE8	; 232
     2f8:	93 e0       	ldi	r25, 0x03	; 3
     2fa:	0e 94 ce 0b 	call	0x179c	; 0x179c <load_new_sensor>
	// load_new_sensor( 4, 4, (BaseSensor *)Si7020_ptr, 0 );
	init_set_timer( get_next_interval() );
     2fe:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <get_next_interval>
     302:	0e 94 9d 07 	call	0xf3a	; 0xf3a <init_set_timer>
	
	// Enable global interrupt //
	sei();
     306:	78 94       	sei
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	0f 90       	pop	r0
     310:	ff cf       	rjmp	.-2      	; 0x310 <main+0x9c>

00000312 <BMP280_ReadBytes>:
  @brief Reads some bytes from the BMP280
  @param[in] *values pointer to an array to store the bytes, put the starting register in values[0]
  @param[in] length how many bytes to read
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadBytes(unsigned char *values, char length){
     312:	1f 93       	push	r17
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	ec 01       	movw	r28, r24
     31a:	16 2f       	mov	r17, r22
	//printf("BMP280_ReadBytes");
	//printf("0x%1x",(unsigned)TWI_BeginWrite(BMP280_ADDR));
	TWI_BeginWrite(BMP280_ADDR);
     31c:	86 e7       	ldi	r24, 0x76	; 118
     31e:	0e 94 fc 07 	call	0xff8	; 0xff8 <TWI_BeginWrite>
	//printf("0x%1x",(unsigned)TWI_WriteByte(values[0]));
	TWI_WriteByte(values[0]);//Write the register address
     322:	88 81       	ld	r24, Y
     324:	0e 94 ee 07 	call	0xfdc	; 0xfdc <TWI_WriteByte>
	status = TWI_BeginRead(BMP280_ADDR); //Send a repeated start
     328:	86 e7       	ldi	r24, 0x76	; 118
     32a:	0e 94 19 08 	call	0x1032	; 0x1032 <TWI_BeginRead>
     32e:	80 93 92 04 	sts	0x0492, r24
	//printf("0x%1x",status);
	if (status == TWI_SLAR_ACK){
     332:	80 34       	cpi	r24, 0x40	; 64
     334:	81 f4       	brne	.+32     	; 0x356 <BMP280_ReadBytes+0x44>
		if(((TWI_Read(&values[0],length,false)&TWSR_MASK) == TWI_REC_NACK) && (TWI_Stop() != 0)) return(1); //Receive bytes, send a STOP bit, and check for success
     336:	61 2f       	mov	r22, r17
     338:	70 e0       	ldi	r23, 0x00	; 0
     33a:	40 e0       	ldi	r20, 0x00	; 0
     33c:	ce 01       	movw	r24, r28
     33e:	0e 94 56 08 	call	0x10ac	; 0x10ac <TWI_Read>
     342:	88 7f       	andi	r24, 0xF8	; 248
     344:	88 35       	cpi	r24, 0x58	; 88
     346:	49 f4       	brne	.+18     	; 0x35a <BMP280_ReadBytes+0x48>
     348:	0e 94 51 08 	call	0x10a2	; 0x10a2 <TWI_Stop>
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	81 11       	cpse	r24, r1
     350:	05 c0       	rjmp	.+10     	; 0x35c <BMP280_ReadBytes+0x4a>
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	03 c0       	rjmp	.+6      	; 0x35c <BMP280_ReadBytes+0x4a>
	}
	return(0);
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	01 c0       	rjmp	.+2      	; 0x35c <BMP280_ReadBytes+0x4a>
     35a:	90 e0       	ldi	r25, 0x00	; 0
}
     35c:	89 2f       	mov	r24, r25
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	08 95       	ret

00000366 <BMP280_ReadInt>:
  @brief Reads an int from the BMP280
  @param[in] address The register address of the first byte of the uint
  @param[out] val* A pointer to a uint to store the received data to
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadInt(char address, int *val){
     366:	0f 93       	push	r16
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	00 d0       	rcall	.+0      	; 0x370 <BMP280_ReadInt+0xa>
     370:	cd b7       	in	r28, 0x3d	; 61
     372:	de b7       	in	r29, 0x3e	; 62
     374:	8b 01       	movw	r16, r22
	//printf("\nBMP280_ReadInt");
	unsigned char data[2];	//char is 4 bits, 1 byte

	data[0] = address;
     376:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     378:	62 e0       	ldi	r22, 0x02	; 2
     37a:	ce 01       	movw	r24, r28
     37c:	01 96       	adiw	r24, 0x01	; 1
     37e:	0e 94 89 01 	call	0x312	; 0x312 <BMP280_ReadBytes>
     382:	88 23       	and	r24, r24
     384:	59 f0       	breq	.+22     	; 0x39c <BMP280_ReadInt+0x36>
		*val = (((int)data[1]<<8)|(int)data[0]);
     386:	8a 81       	ldd	r24, Y+2	; 0x02
     388:	90 e0       	ldi	r25, 0x00	; 0
     38a:	98 2f       	mov	r25, r24
     38c:	88 27       	eor	r24, r24
     38e:	29 81       	ldd	r18, Y+1	; 0x01
     390:	82 2b       	or	r24, r18
     392:	f8 01       	movw	r30, r16
     394:	91 83       	std	Z+1, r25	; 0x01
     396:	80 83       	st	Z, r24
		return(1);
     398:	81 e0       	ldi	r24, 0x01	; 1
     39a:	03 c0       	rjmp	.+6      	; 0x3a2 <BMP280_ReadInt+0x3c>
	}
	*val = 0;
     39c:	f8 01       	movw	r30, r16
     39e:	11 82       	std	Z+1, r1	; 0x01
     3a0:	10 82       	st	Z, r1
	return(0);
}
     3a2:	0f 90       	pop	r0
     3a4:	0f 90       	pop	r0
     3a6:	df 91       	pop	r29
     3a8:	cf 91       	pop	r28
     3aa:	1f 91       	pop	r17
     3ac:	0f 91       	pop	r16
     3ae:	08 95       	ret

000003b0 <BMP280_Init>:

/*************************************************************************//**
  @brief Initializes the BMP280 and reads the calibration data from the device
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
char BMP280_Init(void){
     3b0:	cf 93       	push	r28
     3b2:	df 93       	push	r29
     3b4:	00 d0       	rcall	.+0      	; 0x3b6 <BMP280_Init+0x6>
     3b6:	cd b7       	in	r28, 0x3d	; 61
     3b8:	de b7       	in	r29, 0x3e	; 62
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
     3ba:	88 e8       	ldi	r24, 0x88	; 136
     3bc:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     3be:	62 e0       	ldi	r22, 0x02	; 2
     3c0:	ce 01       	movw	r24, r28
     3c2:	01 96       	adiw	r24, 0x01	; 1
     3c4:	0e 94 89 01 	call	0x312	; 0x312 <BMP280_ReadBytes>
     3c8:	88 23       	and	r24, r24
     3ca:	99 f0       	breq	.+38     	; 0x3f2 <BMP280_Init+0x42>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     3cc:	8a 81       	ldd	r24, Y+2	; 0x02
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	98 2f       	mov	r25, r24
     3d2:	88 27       	eor	r24, r24
     3d4:	29 81       	ldd	r18, Y+1	; 0x01
     3d6:	82 2b       	or	r24, r18
     3d8:	90 93 9d 04 	sts	0x049D, r25
     3dc:	80 93 9c 04 	sts	0x049C, r24

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
     3e0:	62 eb       	ldi	r22, 0xB2	; 178
     3e2:	74 e0       	ldi	r23, 0x04	; 4
     3e4:	8a e8       	ldi	r24, 0x8A	; 138
     3e6:	0e 94 b3 01 	call	0x366	; 0x366 <BMP280_ReadInt>
	// used in the calculations when taking measurements.

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
     3ea:	88 23       	and	r24, r24
     3ec:	09 f4       	brne	.+2      	; 0x3f0 <BMP280_Init+0x40>
     3ee:	bb c0       	rjmp	.+374    	; 0x566 <BMP280_Init+0x1b6>
     3f0:	05 c0       	rjmp	.+10     	; 0x3fc <BMP280_Init+0x4c>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     3f2:	10 92 9d 04 	sts	0x049D, r1
     3f6:	10 92 9c 04 	sts	0x049C, r1
     3fa:	b5 c0       	rjmp	.+362    	; 0x566 <BMP280_Init+0x1b6>
	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
     3fc:	60 eb       	ldi	r22, 0xB0	; 176
     3fe:	74 e0       	ldi	r23, 0x04	; 4
     400:	8c e8       	ldi	r24, 0x8C	; 140
     402:	0e 94 b3 01 	call	0x366	; 0x366 <BMP280_ReadInt>

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
     406:	88 23       	and	r24, r24
     408:	09 f4       	brne	.+2      	; 0x40c <BMP280_Init+0x5c>
     40a:	ad c0       	rjmp	.+346    	; 0x566 <BMP280_Init+0x1b6>
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
     40c:	8e e8       	ldi	r24, 0x8E	; 142
     40e:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     410:	62 e0       	ldi	r22, 0x02	; 2
     412:	ce 01       	movw	r24, r28
     414:	01 96       	adiw	r24, 0x01	; 1
     416:	0e 94 89 01 	call	0x312	; 0x312 <BMP280_ReadBytes>
     41a:	88 23       	and	r24, r24
     41c:	99 f0       	breq	.+38     	; 0x444 <BMP280_Init+0x94>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     41e:	8a 81       	ldd	r24, Y+2	; 0x02
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	98 2f       	mov	r25, r24
     424:	88 27       	eor	r24, r24
     426:	29 81       	ldd	r18, Y+1	; 0x01
     428:	82 2b       	or	r24, r18
     42a:	90 93 9f 04 	sts	0x049F, r25
     42e:	80 93 9e 04 	sts	0x049E, r24
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     432:	6e ea       	ldi	r22, 0xAE	; 174
     434:	74 e0       	ldi	r23, 0x04	; 4
     436:	80 e9       	ldi	r24, 0x90	; 144
     438:	0e 94 b3 01 	call	0x366	; 0x366 <BMP280_ReadInt>
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
     43c:	88 23       	and	r24, r24
     43e:	09 f4       	brne	.+2      	; 0x442 <BMP280_Init+0x92>
     440:	92 c0       	rjmp	.+292    	; 0x566 <BMP280_Init+0x1b6>
     442:	05 c0       	rjmp	.+10     	; 0x44e <BMP280_Init+0x9e>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     444:	10 92 9f 04 	sts	0x049F, r1
     448:	10 92 9e 04 	sts	0x049E, r1
     44c:	8c c0       	rjmp	.+280    	; 0x566 <BMP280_Init+0x1b6>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     44e:	6c ea       	ldi	r22, 0xAC	; 172
     450:	74 e0       	ldi	r23, 0x04	; 4
     452:	82 e9       	ldi	r24, 0x92	; 146
     454:	0e 94 b3 01 	call	0x366	; 0x366 <BMP280_ReadInt>
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     458:	88 23       	and	r24, r24
     45a:	09 f4       	brne	.+2      	; 0x45e <BMP280_Init+0xae>
     45c:	84 c0       	rjmp	.+264    	; 0x566 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     45e:	6a ea       	ldi	r22, 0xAA	; 170
     460:	74 e0       	ldi	r23, 0x04	; 4
     462:	84 e9       	ldi	r24, 0x94	; 148
     464:	0e 94 b3 01 	call	0x366	; 0x366 <BMP280_ReadInt>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     468:	88 23       	and	r24, r24
     46a:	09 f4       	brne	.+2      	; 0x46e <BMP280_Init+0xbe>
     46c:	7c c0       	rjmp	.+248    	; 0x566 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     46e:	68 ea       	ldi	r22, 0xA8	; 168
     470:	74 e0       	ldi	r23, 0x04	; 4
     472:	86 e9       	ldi	r24, 0x96	; 150
     474:	0e 94 b3 01 	call	0x366	; 0x366 <BMP280_ReadInt>
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     478:	88 23       	and	r24, r24
     47a:	09 f4       	brne	.+2      	; 0x47e <BMP280_Init+0xce>
     47c:	74 c0       	rjmp	.+232    	; 0x566 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     47e:	66 ea       	ldi	r22, 0xA6	; 166
     480:	74 e0       	ldi	r23, 0x04	; 4
     482:	88 e9       	ldi	r24, 0x98	; 152
     484:	0e 94 b3 01 	call	0x366	; 0x366 <BMP280_ReadInt>
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     488:	88 23       	and	r24, r24
     48a:	09 f4       	brne	.+2      	; 0x48e <BMP280_Init+0xde>
     48c:	6c c0       	rjmp	.+216    	; 0x566 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     48e:	64 ea       	ldi	r22, 0xA4	; 164
     490:	74 e0       	ldi	r23, 0x04	; 4
     492:	8a e9       	ldi	r24, 0x9A	; 154
     494:	0e 94 b3 01 	call	0x366	; 0x366 <BMP280_ReadInt>
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     498:	88 23       	and	r24, r24
     49a:	09 f4       	brne	.+2      	; 0x49e <BMP280_Init+0xee>
     49c:	64 c0       	rjmp	.+200    	; 0x566 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     49e:	62 ea       	ldi	r22, 0xA2	; 162
     4a0:	74 e0       	ldi	r23, 0x04	; 4
     4a2:	8c e9       	ldi	r24, 0x9C	; 156
     4a4:	0e 94 b3 01 	call	0x366	; 0x366 <BMP280_ReadInt>
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     4a8:	88 23       	and	r24, r24
     4aa:	09 f4       	brne	.+2      	; 0x4ae <BMP280_Init+0xfe>
     4ac:	5c c0       	rjmp	.+184    	; 0x566 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9C, &dig_P8)  &&
		BMP280_ReadInt(0x9E, &dig_P9)){
     4ae:	60 ea       	ldi	r22, 0xA0	; 160
     4b0:	74 e0       	ldi	r23, 0x04	; 4
     4b2:	8e e9       	ldi	r24, 0x9E	; 158
     4b4:	0e 94 b3 01 	call	0x366	; 0x366 <BMP280_ReadInt>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     4b8:	88 23       	and	r24, r24
     4ba:	09 f4       	brne	.+2      	; 0x4be <BMP280_Init+0x10e>
     4bc:	54 c0       	rjmp	.+168    	; 0x566 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9E, &dig_P9)){
			printf("\nT: %i ,%i ,%i P: %i ,%i ,%i ,%i ,%i ,%i ,%i ,%1 ,%i \n",dig_T1,dig_T2,dig_T3,dig_P1,dig_P2,dig_P3,dig_P4,dig_P5,dig_P6,dig_P7,dig_P8,dig_P9);
     4be:	80 91 a1 04 	lds	r24, 0x04A1
     4c2:	8f 93       	push	r24
     4c4:	80 91 a0 04 	lds	r24, 0x04A0
     4c8:	8f 93       	push	r24
     4ca:	80 91 a3 04 	lds	r24, 0x04A3
     4ce:	8f 93       	push	r24
     4d0:	80 91 a2 04 	lds	r24, 0x04A2
     4d4:	8f 93       	push	r24
     4d6:	80 91 a5 04 	lds	r24, 0x04A5
     4da:	8f 93       	push	r24
     4dc:	80 91 a4 04 	lds	r24, 0x04A4
     4e0:	8f 93       	push	r24
     4e2:	80 91 a7 04 	lds	r24, 0x04A7
     4e6:	8f 93       	push	r24
     4e8:	80 91 a6 04 	lds	r24, 0x04A6
     4ec:	8f 93       	push	r24
     4ee:	80 91 a9 04 	lds	r24, 0x04A9
     4f2:	8f 93       	push	r24
     4f4:	80 91 a8 04 	lds	r24, 0x04A8
     4f8:	8f 93       	push	r24
     4fa:	80 91 ab 04 	lds	r24, 0x04AB
     4fe:	8f 93       	push	r24
     500:	80 91 aa 04 	lds	r24, 0x04AA
     504:	8f 93       	push	r24
     506:	80 91 ad 04 	lds	r24, 0x04AD
     50a:	8f 93       	push	r24
     50c:	80 91 ac 04 	lds	r24, 0x04AC
     510:	8f 93       	push	r24
     512:	80 91 af 04 	lds	r24, 0x04AF
     516:	8f 93       	push	r24
     518:	80 91 ae 04 	lds	r24, 0x04AE
     51c:	8f 93       	push	r24
     51e:	80 91 9f 04 	lds	r24, 0x049F
     522:	8f 93       	push	r24
     524:	80 91 9e 04 	lds	r24, 0x049E
     528:	8f 93       	push	r24
     52a:	80 91 b1 04 	lds	r24, 0x04B1
     52e:	8f 93       	push	r24
     530:	80 91 b0 04 	lds	r24, 0x04B0
     534:	8f 93       	push	r24
     536:	80 91 b3 04 	lds	r24, 0x04B3
     53a:	8f 93       	push	r24
     53c:	80 91 b2 04 	lds	r24, 0x04B2
     540:	8f 93       	push	r24
     542:	80 91 9d 04 	lds	r24, 0x049D
     546:	8f 93       	push	r24
     548:	80 91 9c 04 	lds	r24, 0x049C
     54c:	8f 93       	push	r24
     54e:	83 e4       	ldi	r24, 0x43	; 67
     550:	92 e0       	ldi	r25, 0x02	; 2
     552:	9f 93       	push	r25
     554:	8f 93       	push	r24
     556:	0e 94 38 16 	call	0x2c70	; 0x2c70 <printf>
		return (1);
     55a:	0f b6       	in	r0, 0x3f	; 63
     55c:	f8 94       	cli
     55e:	de bf       	out	0x3e, r29	; 62
     560:	0f be       	out	0x3f, r0	; 63
     562:	cd bf       	out	0x3d, r28	; 61
     564:	81 e0       	ldi	r24, 0x01	; 1
	}
	else 
		return (0);
}
     566:	0f 90       	pop	r0
     568:	0f 90       	pop	r0
     56a:	df 91       	pop	r29
     56c:	cf 91       	pop	r28
     56e:	08 95       	ret

00000570 <BMP280_SetOversampling>:
  @brief Sets the oversampling setting for the library
  @param[in] oss Oversampling setting
  @return 1
*****************************************************************************/
char BMP280_SetOversampling(short oss){
	oversampling = oss;
     570:	90 93 9b 04 	sts	0x049B, r25
     574:	80 93 9a 04 	sts	0x049A, r24
	return (1);
}
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	08 95       	ret

0000057c <BMP280_StartMeasurment>:

/*************************************************************************//**
  @brief Starts a measurement
  @return time to wait for result (in ms)
*****************************************************************************/
char BMP280_StartMeasurment(void){
     57c:	1f 93       	push	r17
     57e:	cf 93       	push	r28
     580:	df 93       	push	r29
     582:	00 d0       	rcall	.+0      	; 0x584 <BMP280_StartMeasurment+0x8>
     584:	cd b7       	in	r28, 0x3d	; 61
     586:	de b7       	in	r29, 0x3e	; 62
	unsigned char data[2], result, delay;
	
	data[0] = BMP280_REG_CONTROL;
     588:	84 ef       	ldi	r24, 0xF4	; 244
     58a:	89 83       	std	Y+1, r24	; 0x01

	switch (oversampling){
     58c:	80 91 9a 04 	lds	r24, 0x049A
     590:	90 91 9b 04 	lds	r25, 0x049B
     594:	82 30       	cpi	r24, 0x02	; 2
     596:	91 05       	cpc	r25, r1
     598:	01 f1       	breq	.+64     	; 0x5da <BMP280_StartMeasurment+0x5e>
     59a:	2c f4       	brge	.+10     	; 0x5a6 <BMP280_StartMeasurment+0x2a>
     59c:	00 97       	sbiw	r24, 0x00	; 0
     59e:	49 f0       	breq	.+18     	; 0x5b2 <BMP280_StartMeasurment+0x36>
     5a0:	01 97       	sbiw	r24, 0x01	; 1
     5a2:	89 f0       	breq	.+34     	; 0x5c6 <BMP280_StartMeasurment+0x4a>
     5a4:	38 c0       	rjmp	.+112    	; 0x616 <BMP280_StartMeasurment+0x9a>
     5a6:	83 30       	cpi	r24, 0x03	; 3
     5a8:	91 05       	cpc	r25, r1
     5aa:	09 f1       	breq	.+66     	; 0x5ee <BMP280_StartMeasurment+0x72>
     5ac:	04 97       	sbiw	r24, 0x04	; 4
     5ae:	49 f1       	breq	.+82     	; 0x602 <BMP280_StartMeasurment+0x86>
     5b0:	32 c0       	rjmp	.+100    	; 0x616 <BMP280_StartMeasurment+0x9a>
		case 0:
		data[1] = BMP280_COMMAND_PRESSURE0;
     5b2:	85 e2       	ldi	r24, 0x25	; 37
     5b4:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     5b6:	81 e0       	ldi	r24, 0x01	; 1
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	90 93 99 04 	sts	0x0499, r25
     5be:	80 93 98 04 	sts	0x0498, r24
		delay = 8;
     5c2:	18 e0       	ldi	r17, 0x08	; 8
		break;
     5c4:	2b c0       	rjmp	.+86     	; 0x61c <BMP280_StartMeasurment+0xa0>
		case 1:
		data[1] = BMP280_COMMAND_PRESSURE1;
     5c6:	89 e2       	ldi	r24, 0x29	; 41
     5c8:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	90 93 99 04 	sts	0x0499, r25
     5d2:	80 93 98 04 	sts	0x0498, r24
		delay = 10;
     5d6:	1a e0       	ldi	r17, 0x0A	; 10
		break;
     5d8:	21 c0       	rjmp	.+66     	; 0x61c <BMP280_StartMeasurment+0xa0>
		case 2:
		data[1] = BMP280_COMMAND_PRESSURE2;
     5da:	8d e2       	ldi	r24, 0x2D	; 45
     5dc:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	90 93 99 04 	sts	0x0499, r25
     5e6:	80 93 98 04 	sts	0x0498, r24
		delay = 15;
     5ea:	1f e0       	ldi	r17, 0x0F	; 15
		break;
     5ec:	17 c0       	rjmp	.+46     	; 0x61c <BMP280_StartMeasurment+0xa0>
		case 3:
		data[1] = BMP280_COMMAND_PRESSURE3;
     5ee:	81 e3       	ldi	r24, 0x31	; 49
     5f0:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	90 93 99 04 	sts	0x0499, r25
     5fa:	80 93 98 04 	sts	0x0498, r24
		delay = 24;
     5fe:	18 e1       	ldi	r17, 0x18	; 24
		break;
     600:	0d c0       	rjmp	.+26     	; 0x61c <BMP280_StartMeasurment+0xa0>
		case 4:
		data[1] = BMP280_COMMAND_PRESSURE4;
     602:	8d e5       	ldi	r24, 0x5D	; 93
     604:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	90 93 99 04 	sts	0x0499, r25
     60e:	80 93 98 04 	sts	0x0498, r24
		delay = 45;
     612:	1d e2       	ldi	r17, 0x2D	; 45
		break;
     614:	03 c0       	rjmp	.+6      	; 0x61c <BMP280_StartMeasurment+0xa0>
		default:
		data[1] = BMP280_COMMAND_PRESSURE0;
     616:	85 e2       	ldi	r24, 0x25	; 37
     618:	8a 83       	std	Y+2, r24	; 0x02
		delay = 9;
     61a:	19 e0       	ldi	r17, 0x09	; 9
  @param[in] *values pointer to an array to send, put the starting register in values[0]
  @param[in] length how many bytes to write (including the starting register ie. sizeof(values))
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_WriteBytes(unsigned char *values, char length){
	TWI_BeginWrite(BMP280_ADDR);
     61c:	86 e7       	ldi	r24, 0x76	; 118
     61e:	0e 94 fc 07 	call	0xff8	; 0xff8 <TWI_BeginWrite>
	if((TWI_Write(&values[0],length) == TWI_SENT_ACK) && (TWI_Stop() != 0)) return 1; //Send bytes, a STOP bit, and check for success
     622:	62 e0       	ldi	r22, 0x02	; 2
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	ce 01       	movw	r24, r28
     628:	01 96       	adiw	r24, 0x01	; 1
     62a:	0e 94 92 08 	call	0x1124	; 0x1124 <TWI_Write>
     62e:	88 32       	cpi	r24, 0x28	; 40
     630:	31 f4       	brne	.+12     	; 0x63e <BMP280_StartMeasurment+0xc2>
     632:	0e 94 51 08 	call	0x10a2	; 0x10a2 <TWI_Stop>
		data[1] = BMP280_COMMAND_PRESSURE0;
		delay = 9;
		break;
	}
	result = BMP280_WriteBytes(&data[0], 2);
	if (result) // good write?
     636:	81 11       	cpse	r24, r1
     638:	04 c0       	rjmp	.+8      	; 0x642 <BMP280_StartMeasurment+0xc6>
	return(delay); // return the delay in ms (rounded up) to wait before retrieving data
	else
	return(-1); // or return -1 if there was a problem communicating with the BMP
     63a:	8f ef       	ldi	r24, 0xFF	; 255
     63c:	03 c0       	rjmp	.+6      	; 0x644 <BMP280_StartMeasurment+0xc8>
     63e:	8f ef       	ldi	r24, 0xFF	; 255
     640:	01 c0       	rjmp	.+2      	; 0x644 <BMP280_StartMeasurment+0xc8>
		delay = 9;
		break;
	}
	result = BMP280_WriteBytes(&data[0], 2);
	if (result) // good write?
	return(delay); // return the delay in ms (rounded up) to wait before retrieving data
     642:	81 2f       	mov	r24, r17
	else
	return(-1); // or return -1 if there was a problem communicating with the BMP
}
     644:	0f 90       	pop	r0
     646:	0f 90       	pop	r0
     648:	df 91       	pop	r29
     64a:	cf 91       	pop	r28
     64c:	1f 91       	pop	r17
     64e:	08 95       	ret

00000650 <BMP280_GetUnPT>:
  @brief Gets the uncalibrated temperature and pressure data
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetUnPT(double *uP, double *uT){
     650:	8f 92       	push	r8
     652:	9f 92       	push	r9
     654:	bf 92       	push	r11
     656:	cf 92       	push	r12
     658:	df 92       	push	r13
     65a:	ef 92       	push	r14
     65c:	ff 92       	push	r15
     65e:	0f 93       	push	r16
     660:	1f 93       	push	r17
     662:	cf 93       	push	r28
     664:	df 93       	push	r29
     666:	00 d0       	rcall	.+0      	; 0x668 <BMP280_GetUnPT+0x18>
     668:	00 d0       	rcall	.+0      	; 0x66a <BMP280_GetUnPT+0x1a>
     66a:	00 d0       	rcall	.+0      	; 0x66c <BMP280_GetUnPT+0x1c>
     66c:	cd b7       	in	r28, 0x3d	; 61
     66e:	de b7       	in	r29, 0x3e	; 62
     670:	4c 01       	movw	r8, r24
     672:	8b 01       	movw	r16, r22
	unsigned char data[6];
	char result;
	
	data[0] = BMP280_REG_RESULT_PRESSURE; //0xF7
     674:	87 ef       	ldi	r24, 0xF7	; 247
     676:	89 83       	std	Y+1, r24	; 0x01

	result = BMP280_ReadBytes(&data[0], 6); // 0xF7; xF8, 0xF9, 0xFA, 0xFB, 0xFC
     678:	66 e0       	ldi	r22, 0x06	; 6
     67a:	ce 01       	movw	r24, r28
     67c:	01 96       	adiw	r24, 0x01	; 1
     67e:	0e 94 89 01 	call	0x312	; 0x312 <BMP280_ReadBytes>
     682:	b8 2e       	mov	r11, r24
	if (result){ // good read
     684:	88 23       	and	r24, r24
     686:	09 f4       	brne	.+2      	; 0x68a <BMP280_GetUnPT+0x3a>
     688:	72 c0       	rjmp	.+228    	; 0x76e <BMP280_GetUnPT+0x11e>
		double factor = pow(2, 4);
		*uP = (( (data[0] *256.0) + data[1] + (data[2]/256.0))) * factor ;	//20bit UP
     68a:	69 81       	ldd	r22, Y+1	; 0x01
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__floatsisf>
     696:	20 e0       	ldi	r18, 0x00	; 0
     698:	30 e0       	ldi	r19, 0x00	; 0
     69a:	40 e8       	ldi	r20, 0x80	; 128
     69c:	53 e4       	ldi	r21, 0x43	; 67
     69e:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     6a2:	6b 01       	movw	r12, r22
     6a4:	7c 01       	movw	r14, r24
     6a6:	6a 81       	ldd	r22, Y+2	; 0x02
     6a8:	70 e0       	ldi	r23, 0x00	; 0
     6aa:	80 e0       	ldi	r24, 0x00	; 0
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__floatsisf>
     6b2:	9b 01       	movw	r18, r22
     6b4:	ac 01       	movw	r20, r24
     6b6:	c7 01       	movw	r24, r14
     6b8:	b6 01       	movw	r22, r12
     6ba:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__addsf3>
     6be:	6b 01       	movw	r12, r22
     6c0:	7c 01       	movw	r14, r24
     6c2:	6b 81       	ldd	r22, Y+3	; 0x03
     6c4:	70 e0       	ldi	r23, 0x00	; 0
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__floatsisf>
     6ce:	20 e0       	ldi	r18, 0x00	; 0
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	40 e8       	ldi	r20, 0x80	; 128
     6d4:	5b e3       	ldi	r21, 0x3B	; 59
     6d6:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     6da:	9b 01       	movw	r18, r22
     6dc:	ac 01       	movw	r20, r24
     6de:	c7 01       	movw	r24, r14
     6e0:	b6 01       	movw	r22, r12
     6e2:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__addsf3>
     6e6:	20 e0       	ldi	r18, 0x00	; 0
     6e8:	30 e0       	ldi	r19, 0x00	; 0
     6ea:	40 e8       	ldi	r20, 0x80	; 128
     6ec:	51 e4       	ldi	r21, 0x41	; 65
     6ee:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     6f2:	f4 01       	movw	r30, r8
     6f4:	60 83       	st	Z, r22
     6f6:	71 83       	std	Z+1, r23	; 0x01
     6f8:	82 83       	std	Z+2, r24	; 0x02
     6fa:	93 83       	std	Z+3, r25	; 0x03
		*uT = (( (data[3] *256.0) + data[4] + (data[5]/256.0))) * factor ;	//20bit UT
     6fc:	6c 81       	ldd	r22, Y+4	; 0x04
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__floatsisf>
     708:	20 e0       	ldi	r18, 0x00	; 0
     70a:	30 e0       	ldi	r19, 0x00	; 0
     70c:	40 e8       	ldi	r20, 0x80	; 128
     70e:	53 e4       	ldi	r21, 0x43	; 67
     710:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     714:	6b 01       	movw	r12, r22
     716:	7c 01       	movw	r14, r24
     718:	6d 81       	ldd	r22, Y+5	; 0x05
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__floatsisf>
     724:	9b 01       	movw	r18, r22
     726:	ac 01       	movw	r20, r24
     728:	c7 01       	movw	r24, r14
     72a:	b6 01       	movw	r22, r12
     72c:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__addsf3>
     730:	6b 01       	movw	r12, r22
     732:	7c 01       	movw	r14, r24
     734:	6e 81       	ldd	r22, Y+6	; 0x06
     736:	70 e0       	ldi	r23, 0x00	; 0
     738:	80 e0       	ldi	r24, 0x00	; 0
     73a:	90 e0       	ldi	r25, 0x00	; 0
     73c:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__floatsisf>
     740:	20 e0       	ldi	r18, 0x00	; 0
     742:	30 e0       	ldi	r19, 0x00	; 0
     744:	40 e8       	ldi	r20, 0x80	; 128
     746:	5b e3       	ldi	r21, 0x3B	; 59
     748:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     74c:	9b 01       	movw	r18, r22
     74e:	ac 01       	movw	r20, r24
     750:	c7 01       	movw	r24, r14
     752:	b6 01       	movw	r22, r12
     754:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__addsf3>
     758:	20 e0       	ldi	r18, 0x00	; 0
     75a:	30 e0       	ldi	r19, 0x00	; 0
     75c:	40 e8       	ldi	r20, 0x80	; 128
     75e:	51 e4       	ldi	r21, 0x41	; 65
     760:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     764:	f8 01       	movw	r30, r16
     766:	60 83       	st	Z, r22
     768:	71 83       	std	Z+1, r23	; 0x01
     76a:	82 83       	std	Z+2, r24	; 0x02
     76c:	93 83       	std	Z+3, r25	; 0x03
		
	}
	return(result);
}
     76e:	8b 2d       	mov	r24, r11
     770:	26 96       	adiw	r28, 0x06	; 6
     772:	0f b6       	in	r0, 0x3f	; 63
     774:	f8 94       	cli
     776:	de bf       	out	0x3e, r29	; 62
     778:	0f be       	out	0x3f, r0	; 63
     77a:	cd bf       	out	0x3d, r28	; 61
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	0f 91       	pop	r16
     784:	ff 90       	pop	r15
     786:	ef 90       	pop	r14
     788:	df 90       	pop	r13
     78a:	cf 90       	pop	r12
     78c:	bf 90       	pop	r11
     78e:	9f 90       	pop	r9
     790:	8f 90       	pop	r8
     792:	08 95       	ret

00000794 <BMP280_CalcTemperature>:
  @brief Calculates temperature
  @param[out] pointer to a place to store the temperature data
  @param[in] pointer to the uncalibrated temperature data
  @return status
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
     794:	4f 92       	push	r4
     796:	5f 92       	push	r5
     798:	6f 92       	push	r6
     79a:	7f 92       	push	r7
     79c:	8f 92       	push	r8
     79e:	9f 92       	push	r9
     7a0:	af 92       	push	r10
     7a2:	bf 92       	push	r11
     7a4:	cf 92       	push	r12
     7a6:	df 92       	push	r13
     7a8:	ef 92       	push	r14
     7aa:	ff 92       	push	r15
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	ec 01       	movw	r28, r24
	double adc_T = *uT ;
     7b2:	fb 01       	movw	r30, r22
     7b4:	40 80       	ld	r4, Z
     7b6:	51 80       	ldd	r5, Z+1	; 0x01
     7b8:	62 80       	ldd	r6, Z+2	; 0x02
     7ba:	73 80       	ldd	r7, Z+3	; 0x03
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
     7bc:	60 91 9c 04 	lds	r22, 0x049C
     7c0:	70 91 9d 04 	lds	r23, 0x049D
     7c4:	80 e0       	ldi	r24, 0x00	; 0
     7c6:	90 e0       	ldi	r25, 0x00	; 0
     7c8:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__floatunsisf>
     7cc:	4b 01       	movw	r8, r22
     7ce:	5c 01       	movw	r10, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
     7d0:	20 e0       	ldi	r18, 0x00	; 0
     7d2:	30 e0       	ldi	r19, 0x00	; 0
     7d4:	40 e0       	ldi	r20, 0x00	; 0
     7d6:	57 e3       	ldi	r21, 0x37	; 55
     7d8:	c3 01       	movw	r24, r6
     7da:	b2 01       	movw	r22, r4
     7dc:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     7e0:	6b 01       	movw	r12, r22
     7e2:	7c 01       	movw	r14, r24
     7e4:	20 e0       	ldi	r18, 0x00	; 0
     7e6:	30 e0       	ldi	r19, 0x00	; 0
     7e8:	40 e0       	ldi	r20, 0x00	; 0
     7ea:	59 e3       	ldi	r21, 0x39	; 57
     7ec:	c5 01       	movw	r24, r10
     7ee:	b4 01       	movw	r22, r8
     7f0:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     7f4:	9b 01       	movw	r18, r22
     7f6:	ac 01       	movw	r20, r24
     7f8:	c7 01       	movw	r24, r14
     7fa:	b6 01       	movw	r22, r12
     7fc:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__subsf3>
     800:	6b 01       	movw	r12, r22
     802:	7c 01       	movw	r14, r24
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
	double adc_T = *uT ;
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
     804:	20 e0       	ldi	r18, 0x00	; 0
     806:	30 e0       	ldi	r19, 0x00	; 0
     808:	40 e8       	ldi	r20, 0x80	; 128
     80a:	58 e3       	ldi	r21, 0x38	; 56
     80c:	c3 01       	movw	r24, r6
     80e:	b2 01       	movw	r22, r4
     810:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     814:	2b 01       	movw	r4, r22
     816:	3c 01       	movw	r6, r24
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	30 e0       	ldi	r19, 0x00	; 0
     81c:	40 e8       	ldi	r20, 0x80	; 128
     81e:	5a e3       	ldi	r21, 0x3A	; 58
     820:	c5 01       	movw	r24, r10
     822:	b4 01       	movw	r22, r8
     824:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     828:	9b 01       	movw	r18, r22
     82a:	ac 01       	movw	r20, r24
     82c:	c3 01       	movw	r24, r6
     82e:	b2 01       	movw	r22, r4
     830:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__subsf3>
     834:	4b 01       	movw	r8, r22
     836:	5c 01       	movw	r10, r24
     838:	60 91 b2 04 	lds	r22, 0x04B2
     83c:	70 91 b3 04 	lds	r23, 0x04B3
     840:	88 27       	eor	r24, r24
     842:	77 fd       	sbrc	r23, 7
     844:	80 95       	com	r24
     846:	98 2f       	mov	r25, r24
     848:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__floatsisf>
     84c:	9b 01       	movw	r18, r22
     84e:	ac 01       	movw	r20, r24
     850:	c5 01       	movw	r24, r10
     852:	b4 01       	movw	r22, r8
     854:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     858:	4b 01       	movw	r8, r22
     85a:	5c 01       	movw	r10, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
     85c:	a7 01       	movw	r20, r14
     85e:	96 01       	movw	r18, r12
     860:	c7 01       	movw	r24, r14
     862:	b6 01       	movw	r22, r12
     864:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     868:	6b 01       	movw	r12, r22
     86a:	7c 01       	movw	r14, r24
     86c:	60 91 b0 04 	lds	r22, 0x04B0
     870:	70 91 b1 04 	lds	r23, 0x04B1
     874:	88 27       	eor	r24, r24
     876:	77 fd       	sbrc	r23, 7
     878:	80 95       	com	r24
     87a:	98 2f       	mov	r25, r24
     87c:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__floatsisf>
     880:	9b 01       	movw	r18, r22
     882:	ac 01       	movw	r20, r24
     884:	c7 01       	movw	r24, r14
     886:	b6 01       	movw	r22, r12
     888:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     88c:	9b 01       	movw	r18, r22
     88e:	ac 01       	movw	r20, r24
	t_fine = (long signed int)(var1+var2);
     890:	c5 01       	movw	r24, r10
     892:	b4 01       	movw	r22, r8
     894:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__addsf3>
     898:	6b 01       	movw	r12, r22
     89a:	7c 01       	movw	r14, r24
     89c:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__fixsfsi>
     8a0:	60 93 94 04 	sts	0x0494, r22
     8a4:	70 93 95 04 	sts	0x0495, r23
     8a8:	80 93 96 04 	sts	0x0496, r24
     8ac:	90 93 97 04 	sts	0x0497, r25
	
	*T = (var1+var2)/5120.0;
     8b0:	20 e0       	ldi	r18, 0x00	; 0
     8b2:	30 e0       	ldi	r19, 0x00	; 0
     8b4:	40 ea       	ldi	r20, 0xA0	; 160
     8b6:	55 e4       	ldi	r21, 0x45	; 69
     8b8:	c7 01       	movw	r24, r14
     8ba:	b6 01       	movw	r22, r12
     8bc:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__divsf3>
     8c0:	6b 01       	movw	r12, r22
     8c2:	7c 01       	movw	r14, r24
     8c4:	68 83       	st	Y, r22
     8c6:	79 83       	std	Y+1, r23	; 0x01
     8c8:	8a 83       	std	Y+2, r24	; 0x02
     8ca:	9b 83       	std	Y+3, r25	; 0x03
	
	if(*T>100.0 || *T <(-100.0))return 0;
     8cc:	20 e0       	ldi	r18, 0x00	; 0
     8ce:	30 e0       	ldi	r19, 0x00	; 0
     8d0:	48 ec       	ldi	r20, 0xC8	; 200
     8d2:	52 e4       	ldi	r21, 0x42	; 66
     8d4:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__gesf2>
     8d8:	18 16       	cp	r1, r24
     8da:	74 f0       	brlt	.+28     	; 0x8f8 <BMP280_CalcTemperature+0x164>
     8dc:	20 e0       	ldi	r18, 0x00	; 0
     8de:	30 e0       	ldi	r19, 0x00	; 0
     8e0:	48 ec       	ldi	r20, 0xC8	; 200
     8e2:	52 ec       	ldi	r21, 0xC2	; 194
     8e4:	c7 01       	movw	r24, r14
     8e6:	b6 01       	movw	r22, r12
     8e8:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__cmpsf2>
     8ec:	88 1f       	adc	r24, r24
     8ee:	88 27       	eor	r24, r24
     8f0:	88 1f       	adc	r24, r24
     8f2:	91 e0       	ldi	r25, 0x01	; 1
     8f4:	89 27       	eor	r24, r25
     8f6:	01 c0       	rjmp	.+2      	; 0x8fa <BMP280_CalcTemperature+0x166>
     8f8:	80 e0       	ldi	r24, 0x00	; 0
	
	return (1);
}
     8fa:	df 91       	pop	r29
     8fc:	cf 91       	pop	r28
     8fe:	ff 90       	pop	r15
     900:	ef 90       	pop	r14
     902:	df 90       	pop	r13
     904:	cf 90       	pop	r12
     906:	bf 90       	pop	r11
     908:	af 90       	pop	r10
     90a:	9f 90       	pop	r9
     90c:	8f 90       	pop	r8
     90e:	7f 90       	pop	r7
     910:	6f 90       	pop	r6
     912:	5f 90       	pop	r5
     914:	4f 90       	pop	r4
     916:	08 95       	ret

00000918 <BMP280_CalcPressure>:
  @brief Calculates pressure
  @param[out] pointer to a place to store the pressure data
  @param[in] pointer to the uncalibrated pressure data
  @return status
*****************************************************************************/
char BMP280_CalcPressure(double *P,double *uP){
     918:	4f 92       	push	r4
     91a:	5f 92       	push	r5
     91c:	6f 92       	push	r6
     91e:	7f 92       	push	r7
     920:	8f 92       	push	r8
     922:	9f 92       	push	r9
     924:	af 92       	push	r10
     926:	bf 92       	push	r11
     928:	cf 92       	push	r12
     92a:	df 92       	push	r13
     92c:	ef 92       	push	r14
     92e:	ff 92       	push	r15
     930:	0f 93       	push	r16
     932:	1f 93       	push	r17
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	8c 01       	movw	r16, r24
     93a:	eb 01       	movw	r28, r22
	//char result;
	double var1 , var2 ;
	
	var1 = ((double)t_fine/2.0) - 64000.0;
     93c:	60 91 94 04 	lds	r22, 0x0494
     940:	70 91 95 04 	lds	r23, 0x0495
     944:	80 91 96 04 	lds	r24, 0x0496
     948:	90 91 97 04 	lds	r25, 0x0497
     94c:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__floatsisf>
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	5f e3       	ldi	r21, 0x3F	; 63
     958:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	30 e0       	ldi	r19, 0x00	; 0
     960:	4a e7       	ldi	r20, 0x7A	; 122
     962:	57 e4       	ldi	r21, 0x47	; 71
     964:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__subsf3>
     968:	6b 01       	movw	r12, r22
     96a:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
     96c:	60 91 a6 04 	lds	r22, 0x04A6
     970:	70 91 a7 04 	lds	r23, 0x04A7
     974:	88 27       	eor	r24, r24
     976:	77 fd       	sbrc	r23, 7
     978:	80 95       	com	r24
     97a:	98 2f       	mov	r25, r24
     97c:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__floatsisf>
     980:	a7 01       	movw	r20, r14
     982:	96 01       	movw	r18, r12
     984:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     988:	20 e0       	ldi	r18, 0x00	; 0
     98a:	30 e0       	ldi	r19, 0x00	; 0
     98c:	40 e0       	ldi	r20, 0x00	; 0
     98e:	58 e3       	ldi	r21, 0x38	; 56
     990:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     994:	a7 01       	movw	r20, r14
     996:	96 01       	movw	r18, r12
     998:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     99c:	4b 01       	movw	r8, r22
     99e:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
     9a0:	60 91 a8 04 	lds	r22, 0x04A8
     9a4:	70 91 a9 04 	lds	r23, 0x04A9
     9a8:	88 27       	eor	r24, r24
     9aa:	77 fd       	sbrc	r23, 7
     9ac:	80 95       	com	r24
     9ae:	98 2f       	mov	r25, r24
     9b0:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__floatsisf>
     9b4:	a7 01       	movw	r20, r14
     9b6:	96 01       	movw	r18, r12
     9b8:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     9bc:	9b 01       	movw	r18, r22
     9be:	ac 01       	movw	r20, r24
     9c0:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__addsf3>
     9c4:	a5 01       	movw	r20, r10
     9c6:	94 01       	movw	r18, r8
     9c8:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__addsf3>
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
     9cc:	20 e0       	ldi	r18, 0x00	; 0
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	40 e8       	ldi	r20, 0x80	; 128
     9d2:	5e e3       	ldi	r21, 0x3E	; 62
     9d4:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     9d8:	4b 01       	movw	r8, r22
     9da:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var1 = (((double)dig_P3) * var1 * var1/524288.0 + ((double)dig_P2) * var1) / 524288.0;
     9dc:	60 91 ac 04 	lds	r22, 0x04AC
     9e0:	70 91 ad 04 	lds	r23, 0x04AD
     9e4:	88 27       	eor	r24, r24
     9e6:	77 fd       	sbrc	r23, 7
     9e8:	80 95       	com	r24
     9ea:	98 2f       	mov	r25, r24
     9ec:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__floatsisf>
     9f0:	a7 01       	movw	r20, r14
     9f2:	96 01       	movw	r18, r12
     9f4:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     9f8:	a7 01       	movw	r20, r14
     9fa:	96 01       	movw	r18, r12
     9fc:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     a00:	20 e0       	ldi	r18, 0x00	; 0
     a02:	30 e0       	ldi	r19, 0x00	; 0
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	56 e3       	ldi	r21, 0x36	; 54
     a08:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     a0c:	2b 01       	movw	r4, r22
     a0e:	3c 01       	movw	r6, r24
     a10:	60 91 ae 04 	lds	r22, 0x04AE
     a14:	70 91 af 04 	lds	r23, 0x04AF
     a18:	88 27       	eor	r24, r24
     a1a:	77 fd       	sbrc	r23, 7
     a1c:	80 95       	com	r24
     a1e:	98 2f       	mov	r25, r24
     a20:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__floatsisf>
     a24:	a7 01       	movw	r20, r14
     a26:	96 01       	movw	r18, r12
     a28:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     a2c:	9b 01       	movw	r18, r22
     a2e:	ac 01       	movw	r20, r24
     a30:	c3 01       	movw	r24, r6
     a32:	b2 01       	movw	r22, r4
     a34:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__addsf3>
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	56 e3       	ldi	r21, 0x36	; 54
     a40:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
     a44:	20 e0       	ldi	r18, 0x00	; 0
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	40 e0       	ldi	r20, 0x00	; 0
     a4a:	57 e4       	ldi	r21, 0x47	; 71
     a4c:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__addsf3>
     a50:	20 e0       	ldi	r18, 0x00	; 0
     a52:	30 e0       	ldi	r19, 0x00	; 0
     a54:	40 e0       	ldi	r20, 0x00	; 0
     a56:	58 e3       	ldi	r21, 0x38	; 56
     a58:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     a5c:	6b 01       	movw	r12, r22
     a5e:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
     a60:	28 81       	ld	r18, Y
     a62:	39 81       	ldd	r19, Y+1	; 0x01
     a64:	4a 81       	ldd	r20, Y+2	; 0x02
     a66:	5b 81       	ldd	r21, Y+3	; 0x03
     a68:	60 e0       	ldi	r22, 0x00	; 0
     a6a:	70 e0       	ldi	r23, 0x00	; 0
     a6c:	80 e8       	ldi	r24, 0x80	; 128
     a6e:	99 e4       	ldi	r25, 0x49	; 73
     a70:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__subsf3>
     a74:	2b 01       	movw	r4, r22
     a76:	3c 01       	movw	r6, r24
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
     a78:	60 91 aa 04 	lds	r22, 0x04AA
     a7c:	70 91 ab 04 	lds	r23, 0x04AB
     a80:	88 27       	eor	r24, r24
     a82:	77 fd       	sbrc	r23, 7
     a84:	80 95       	com	r24
     a86:	98 2f       	mov	r25, r24
     a88:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__floatsisf>
     a8c:	20 e0       	ldi	r18, 0x00	; 0
     a8e:	30 e0       	ldi	r19, 0x00	; 0
     a90:	40 e8       	ldi	r20, 0x80	; 128
     a92:	57 e4       	ldi	r21, 0x47	; 71
     a94:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     a98:	9b 01       	movw	r18, r22
     a9a:	ac 01       	movw	r20, r24
     a9c:	c5 01       	movw	r24, r10
     a9e:	b4 01       	movw	r22, r8
     aa0:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__addsf3>
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
     aa4:	20 e0       	ldi	r18, 0x00	; 0
     aa6:	30 e0       	ldi	r19, 0x00	; 0
     aa8:	40 e8       	ldi	r20, 0x80	; 128
     aaa:	59 e3       	ldi	r21, 0x39	; 57
     aac:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     ab0:	9b 01       	movw	r18, r22
     ab2:	ac 01       	movw	r20, r24
     ab4:	c3 01       	movw	r24, r6
     ab6:	b2 01       	movw	r22, r4
     ab8:	0e 94 02 0e 	call	0x1c04	; 0x1c04 <__subsf3>
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	30 e5       	ldi	r19, 0x50	; 80
     ac0:	43 ec       	ldi	r20, 0xC3	; 195
     ac2:	55 e4       	ldi	r21, 0x45	; 69
     ac4:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     ac8:	4b 01       	movw	r8, r22
     aca:	5c 01       	movw	r10, r24
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
     acc:	60 91 9e 04 	lds	r22, 0x049E
     ad0:	70 91 9f 04 	lds	r23, 0x049F
     ad4:	80 e0       	ldi	r24, 0x00	; 0
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <__floatunsisf>
     adc:	9b 01       	movw	r18, r22
     ade:	ac 01       	movw	r20, r24
     ae0:	c7 01       	movw	r24, r14
     ae2:	b6 01       	movw	r22, r12
     ae4:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     ae8:	9b 01       	movw	r18, r22
     aea:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
     aec:	c5 01       	movw	r24, r10
     aee:	b4 01       	movw	r22, r8
     af0:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__divsf3>
     af4:	6b 01       	movw	r12, r22
     af6:	7c 01       	movw	r14, r24
	//Serial.print("p = ");Serial.println(p,2);
	
	var1 = ((double)dig_P9)*p*p/2147483648.0;	//overflow
     af8:	60 91 a0 04 	lds	r22, 0x04A0
     afc:	70 91 a1 04 	lds	r23, 0x04A1
     b00:	88 27       	eor	r24, r24
     b02:	77 fd       	sbrc	r23, 7
     b04:	80 95       	com	r24
     b06:	98 2f       	mov	r25, r24
     b08:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__floatsisf>
     b0c:	a7 01       	movw	r20, r14
     b0e:	96 01       	movw	r18, r12
     b10:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     b14:	a7 01       	movw	r20, r14
     b16:	96 01       	movw	r18, r12
     b18:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	50 e3       	ldi	r21, 0x30	; 48
     b24:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     b28:	4b 01       	movw	r8, r22
     b2a:	5c 01       	movw	r10, r24
	
	var2 = p*((double)dig_P8)/32768.0;
     b2c:	60 91 a2 04 	lds	r22, 0x04A2
     b30:	70 91 a3 04 	lds	r23, 0x04A3
     b34:	88 27       	eor	r24, r24
     b36:	77 fd       	sbrc	r23, 7
     b38:	80 95       	com	r24
     b3a:	98 2f       	mov	r25, r24
     b3c:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__floatsisf>
     b40:	a7 01       	movw	r20, r14
     b42:	96 01       	movw	r18, r12
     b44:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     b48:	20 e0       	ldi	r18, 0x00	; 0
     b4a:	30 e0       	ldi	r19, 0x00	; 0
     b4c:	40 e0       	ldi	r20, 0x00	; 0
     b4e:	58 e3       	ldi	r21, 0x38	; 56
     b50:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     b54:	9b 01       	movw	r18, r22
     b56:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	p = p + (var1+var2+((double)dig_P7))/16.0;
     b58:	c5 01       	movw	r24, r10
     b5a:	b4 01       	movw	r22, r8
     b5c:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__addsf3>
     b60:	4b 01       	movw	r8, r22
     b62:	5c 01       	movw	r10, r24
     b64:	60 91 a4 04 	lds	r22, 0x04A4
     b68:	70 91 a5 04 	lds	r23, 0x04A5
     b6c:	88 27       	eor	r24, r24
     b6e:	77 fd       	sbrc	r23, 7
     b70:	80 95       	com	r24
     b72:	98 2f       	mov	r25, r24
     b74:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__floatsisf>
     b78:	9b 01       	movw	r18, r22
     b7a:	ac 01       	movw	r20, r24
     b7c:	c5 01       	movw	r24, r10
     b7e:	b4 01       	movw	r22, r8
     b80:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__addsf3>
     b84:	20 e0       	ldi	r18, 0x00	; 0
     b86:	30 e0       	ldi	r19, 0x00	; 0
     b88:	40 e8       	ldi	r20, 0x80	; 128
     b8a:	5d e3       	ldi	r21, 0x3D	; 61
     b8c:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     b90:	a7 01       	movw	r20, r14
     b92:	96 01       	movw	r18, r12
     b94:	0e 94 03 0e 	call	0x1c06	; 0x1c06 <__addsf3>
	//Serial.print("p = ");Serial.println(p,2);
	
	*P = p/100.0 ;
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	48 ec       	ldi	r20, 0xC8	; 200
     b9e:	52 e4       	ldi	r21, 0x42	; 66
     ba0:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <__divsf3>
     ba4:	6b 01       	movw	r12, r22
     ba6:	7c 01       	movw	r14, r24
     ba8:	f8 01       	movw	r30, r16
     baa:	60 83       	st	Z, r22
     bac:	71 83       	std	Z+1, r23	; 0x01
     bae:	82 83       	std	Z+2, r24	; 0x02
     bb0:	93 83       	std	Z+3, r25	; 0x03
	
	if((*P>1200.0) || (*P < 800.0))return (0);
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	46 e9       	ldi	r20, 0x96	; 150
     bb8:	54 e4       	ldi	r21, 0x44	; 68
     bba:	0e 94 b6 0f 	call	0x1f6c	; 0x1f6c <__gesf2>
     bbe:	18 16       	cp	r1, r24
     bc0:	74 f0       	brlt	.+28     	; 0xbde <BMP280_CalcPressure+0x2c6>
     bc2:	20 e0       	ldi	r18, 0x00	; 0
     bc4:	30 e0       	ldi	r19, 0x00	; 0
     bc6:	48 e4       	ldi	r20, 0x48	; 72
     bc8:	54 e4       	ldi	r21, 0x44	; 68
     bca:	c7 01       	movw	r24, r14
     bcc:	b6 01       	movw	r22, r12
     bce:	0e 94 67 0e 	call	0x1cce	; 0x1cce <__cmpsf2>
     bd2:	88 1f       	adc	r24, r24
     bd4:	88 27       	eor	r24, r24
     bd6:	88 1f       	adc	r24, r24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	89 27       	eor	r24, r25
     bdc:	01 c0       	rjmp	.+2      	; 0xbe0 <BMP280_CalcPressure+0x2c8>
     bde:	80 e0       	ldi	r24, 0x00	; 0
	return (1);
}
     be0:	df 91       	pop	r29
     be2:	cf 91       	pop	r28
     be4:	1f 91       	pop	r17
     be6:	0f 91       	pop	r16
     be8:	ff 90       	pop	r15
     bea:	ef 90       	pop	r14
     bec:	df 90       	pop	r13
     bee:	cf 90       	pop	r12
     bf0:	bf 90       	pop	r11
     bf2:	af 90       	pop	r10
     bf4:	9f 90       	pop	r9
     bf6:	8f 90       	pop	r8
     bf8:	7f 90       	pop	r7
     bfa:	6f 90       	pop	r6
     bfc:	5f 90       	pop	r5
     bfe:	4f 90       	pop	r4
     c00:	08 95       	ret

00000c02 <BMP280_GetTemperatureAndPressure>:
  @brief Gets temperature and pressure
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetTemperatureAndPressure(double *T,double *P){
     c02:	ef 92       	push	r14
     c04:	ff 92       	push	r15
     c06:	0f 93       	push	r16
     c08:	1f 93       	push	r17
     c0a:	cf 93       	push	r28
     c0c:	df 93       	push	r29
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
     c12:	28 97       	sbiw	r28, 0x08	; 8
     c14:	0f b6       	in	r0, 0x3f	; 63
     c16:	f8 94       	cli
     c18:	de bf       	out	0x3e, r29	; 62
     c1a:	0f be       	out	0x3f, r0	; 63
     c1c:	cd bf       	out	0x3d, r28	; 61
     c1e:	8c 01       	movw	r16, r24
     c20:	7b 01       	movw	r14, r22
	double uP,uT ;
	char result = BMP280_GetUnPT(&uP,&uT);
     c22:	be 01       	movw	r22, r28
     c24:	6b 5f       	subi	r22, 0xFB	; 251
     c26:	7f 4f       	sbci	r23, 0xFF	; 255
     c28:	ce 01       	movw	r24, r28
     c2a:	01 96       	adiw	r24, 0x01	; 1
     c2c:	0e 94 28 03 	call	0x650	; 0x650 <BMP280_GetUnPT>
	if(result!=0){
     c30:	88 23       	and	r24, r24
     c32:	d1 f0       	breq	.+52     	; 0xc68 <BMP280_GetTemperatureAndPressure+0x66>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
     c34:	be 01       	movw	r22, r28
     c36:	6b 5f       	subi	r22, 0xFB	; 251
     c38:	7f 4f       	sbci	r23, 0xFF	; 255
     c3a:	c8 01       	movw	r24, r16
     c3c:	0e 94 ca 03 	call	0x794	; 0x794 <BMP280_CalcTemperature>
		if(result){
     c40:	88 23       	and	r24, r24
     c42:	69 f0       	breq	.+26     	; 0xc5e <BMP280_GetTemperatureAndPressure+0x5c>
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
     c44:	be 01       	movw	r22, r28
     c46:	6f 5f       	subi	r22, 0xFF	; 255
     c48:	7f 4f       	sbci	r23, 0xFF	; 255
     c4a:	c7 01       	movw	r24, r14
     c4c:	0e 94 8c 04 	call	0x918	; 0x918 <BMP280_CalcPressure>
			if(result)return (1);
     c50:	81 11       	cpse	r24, r1
     c52:	0f c0       	rjmp	.+30     	; 0xc72 <BMP280_GetTemperatureAndPressure+0x70>
			else error = 3 ;	// pressure error ;
     c54:	83 e0       	ldi	r24, 0x03	; 3
     c56:	80 93 93 04 	sts	0x0493, r24
			return (0);
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	0b c0       	rjmp	.+22     	; 0xc74 <BMP280_GetTemperatureAndPressure+0x72>
		}else
		error = 2;	// temperature error ;
     c5e:	82 e0       	ldi	r24, 0x02	; 2
     c60:	80 93 93 04 	sts	0x0493, r24
	}
	else
	error = 1;
	
	return (0);
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	06 c0       	rjmp	.+12     	; 0xc74 <BMP280_GetTemperatureAndPressure+0x72>
			return (0);
		}else
		error = 2;	// temperature error ;
	}
	else
	error = 1;
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	80 93 93 04 	sts	0x0493, r24
	
	return (0);
     c6e:	80 e0       	ldi	r24, 0x00	; 0
     c70:	01 c0       	rjmp	.+2      	; 0xc74 <BMP280_GetTemperatureAndPressure+0x72>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
		if(result){
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
			if(result)return (1);
     c72:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	error = 1;
	
	return (0);
}
     c74:	28 96       	adiw	r28, 0x08	; 8
     c76:	0f b6       	in	r0, 0x3f	; 63
     c78:	f8 94       	cli
     c7a:	de bf       	out	0x3e, r29	; 62
     c7c:	0f be       	out	0x3f, r0	; 63
     c7e:	cd bf       	out	0x3d, r28	; 61
     c80:	df 91       	pop	r29
     c82:	cf 91       	pop	r28
     c84:	1f 91       	pop	r17
     c86:	0f 91       	pop	r16
     c88:	ff 90       	pop	r15
     c8a:	ef 90       	pop	r14
     c8c:	08 95       	ret

00000c8e <ADC_Init>:

/*************************************************************************//**
  @brief Initializes the ADC
*****************************************************************************/
void ADC_Init(void) {
	ADCSRA = (1<<ADEN)|(4<<ADPS0); //enables the ADC module, CPU clock prescale=16
     c8e:	84 e8       	ldi	r24, 0x84	; 132
     c90:	80 93 7a 00 	sts	0x007A, r24
	
	ADCSRC = 0x05|(1<<ADTHT0)|(1<<ADTHT1); //ADSUT=5
     c94:	85 ec       	ldi	r24, 0xC5	; 197
     c96:	80 93 77 00 	sts	0x0077, r24
	while((ADCSRB&(1<<AVDDOK))==0);
     c9a:	eb e7       	ldi	r30, 0x7B	; 123
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	88 23       	and	r24, r24
     ca2:	ec f7       	brge	.-6      	; 0xc9e <ADC_Init+0x10>
}
     ca4:	08 95       	ret

00000ca6 <__vector_15>:

/*************************************************************************//**
  @brief Timer Interrupt Service Routine
*****************************************************************************/
ISR(TIMER2_OVF_vect)
{
     ca6:	1f 92       	push	r1
     ca8:	0f 92       	push	r0
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	0f 92       	push	r0
     cae:	11 24       	eor	r1, r1
     cb0:	2f 93       	push	r18
     cb2:	3f 93       	push	r19
     cb4:	4f 93       	push	r20
     cb6:	5f 93       	push	r21
     cb8:	6f 93       	push	r22
     cba:	7f 93       	push	r23
     cbc:	8f 93       	push	r24
     cbe:	9f 93       	push	r25
     cc0:	af 93       	push	r26
     cc2:	bf 93       	push	r27
     cc4:	ef 93       	push	r30
     cc6:	ff 93       	push	r31
	timer_usage ++;
     cc8:	80 91 b8 04 	lds	r24, 0x04B8
     ccc:	90 91 b9 04 	lds	r25, 0x04B9
     cd0:	01 96       	adiw	r24, 0x01	; 1
     cd2:	90 93 b9 04 	sts	0x04B9, r25
     cd6:	80 93 b8 04 	sts	0x04B8, r24
	printf("count1 = %d\n",timer_usage);
     cda:	9f 93       	push	r25
     cdc:	8f 93       	push	r24
     cde:	8a e7       	ldi	r24, 0x7A	; 122
     ce0:	92 e0       	ldi	r25, 0x02	; 2
     ce2:	9f 93       	push	r25
     ce4:	8f 93       	push	r24
     ce6:	0e 94 38 16 	call	0x2c70	; 0x2c70 <printf>
	printf("Timestamp : %ld\n",(TimeStamp));
     cea:	80 91 b7 04 	lds	r24, 0x04B7
     cee:	8f 93       	push	r24
     cf0:	80 91 b6 04 	lds	r24, 0x04B6
     cf4:	8f 93       	push	r24
     cf6:	80 91 b5 04 	lds	r24, 0x04B5
     cfa:	8f 93       	push	r24
     cfc:	80 91 b4 04 	lds	r24, 0x04B4
     d00:	8f 93       	push	r24
     d02:	87 e8       	ldi	r24, 0x87	; 135
     d04:	92 e0       	ldi	r25, 0x02	; 2
     d06:	9f 93       	push	r25
     d08:	8f 93       	push	r24
     d0a:	0e 94 38 16 	call	0x2c70	; 0x2c70 <printf>
	handle_timeoutq_event();
     d0e:	0e 94 04 0c 	call	0x1808	; 0x1808 <handle_timeoutq_event>
     d12:	8d b7       	in	r24, 0x3d	; 61
     d14:	9e b7       	in	r25, 0x3e	; 62
     d16:	0a 96       	adiw	r24, 0x0a	; 10
     d18:	0f b6       	in	r0, 0x3f	; 63
     d1a:	f8 94       	cli
     d1c:	9e bf       	out	0x3e, r25	; 62
     d1e:	0f be       	out	0x3f, r0	; 63
     d20:	8d bf       	out	0x3d, r24	; 61
}
     d22:	ff 91       	pop	r31
     d24:	ef 91       	pop	r30
     d26:	bf 91       	pop	r27
     d28:	af 91       	pop	r26
     d2a:	9f 91       	pop	r25
     d2c:	8f 91       	pop	r24
     d2e:	7f 91       	pop	r23
     d30:	6f 91       	pop	r22
     d32:	5f 91       	pop	r21
     d34:	4f 91       	pop	r20
     d36:	3f 91       	pop	r19
     d38:	2f 91       	pop	r18
     d3a:	0f 90       	pop	r0
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	0f 90       	pop	r0
     d40:	1f 90       	pop	r1
     d42:	18 95       	reti

00000d44 <init_Event_Timer>:

/* Initialization Routine Example 3 : Timer 2 Async operation */
/* Clock for Timer 2 is taken from crystal connected to TOSC pins */
void init_Event_Timer(void)
{
	TimeStamp = 0;
     d44:	10 92 b4 04 	sts	0x04B4, r1
     d48:	10 92 b5 04 	sts	0x04B5, r1
     d4c:	10 92 b6 04 	sts	0x04B6, r1
     d50:	10 92 b7 04 	sts	0x04B7, r1
	timer_usage = 0;
     d54:	10 92 b9 04 	sts	0x04B9, r1
     d58:	10 92 b8 04 	sts	0x04B8, r1
	/* Select clock source as crystal on TOSCn pins */
	ASSR |= 1 << AS2;
     d5c:	e6 eb       	ldi	r30, 0xB6	; 182
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	80 81       	ld	r24, Z
     d62:	80 62       	ori	r24, 0x20	; 32
     d64:	80 83       	st	Z, r24
	
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
     d66:	80 81       	ld	r24, Z
     d68:	8f 71       	andi	r24, 0x1F	; 31
     d6a:	e9 f7       	brne	.-6      	; 0xd66 <init_Event_Timer+0x22>
	
	/* Stop timer 2 */
	TCCR2B = 0x00;
     d6c:	10 92 b1 00 	sts	0x00B1, r1
     d70:	08 95       	ret

00000d72 <general_set_timer>:
	// TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
}


void general_set_timer( int period_number )
{
     d72:	cf 93       	push	r28
     d74:	df 93       	push	r29
     d76:	ec 01       	movw	r28, r24
	// printf("debug %d\n",period_number);
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
     d78:	e6 eb       	ldi	r30, 0xB6	; 182
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	80 81       	ld	r24, Z
     d7e:	8f 71       	andi	r24, 0x1F	; 31
     d80:	e9 f7       	brne	.-6      	; 0xd7c <general_set_timer+0xa>
	/* Stop timer 2 */
	TCCR2B = 0x00;
     d82:	10 92 b1 00 	sts	0x00B1, r1
	
	
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
     d86:	e6 eb       	ldi	r30, 0xB6	; 182
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	8f 71       	andi	r24, 0x1F	; 31
     d8e:	e9 f7       	brne	.-6      	; 0xd8a <general_set_timer+0x18>
	 *  1    1    0     256		2s/256
	 *  1    1    1    1024		8s/256
	 */
	// Resolution
	// 0.25s/256
	if( period_number <= 250 )
     d90:	cb 3f       	cpi	r28, 0xFB	; 251
     d92:	d1 05       	cpc	r29, r1
     d94:	04 f5       	brge	.+64     	; 0xdd6 <general_set_timer+0x64>
	{
		temp = 256 - (int) ( 256.0/250.0 * period_number);
     d96:	be 01       	movw	r22, r28
     d98:	88 27       	eor	r24, r24
     d9a:	77 fd       	sbrc	r23, 7
     d9c:	80 95       	com	r24
     d9e:	98 2f       	mov	r25, r24
     da0:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__floatsisf>
     da4:	2f e6       	ldi	r18, 0x6F	; 111
     da6:	32 e1       	ldi	r19, 0x12	; 18
     da8:	43 e8       	ldi	r20, 0x83	; 131
     daa:	5f e3       	ldi	r21, 0x3F	; 63
     dac:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     db0:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
     db4:	20 e0       	ldi	r18, 0x00	; 0
     db6:	31 e0       	ldi	r19, 0x01	; 1
     db8:	c9 01       	movw	r24, r18
     dba:	86 1b       	sub	r24, r22
     dbc:	97 0b       	sbc	r25, r23
     dbe:	8f 3f       	cpi	r24, 0xFF	; 255
     dc0:	91 05       	cpc	r25, r1
     dc2:	19 f0       	breq	.+6      	; 0xdca <general_set_timer+0x58>
     dc4:	14 f0       	brlt	.+4      	; 0xdca <general_set_timer+0x58>
     dc6:	8f ef       	ldi	r24, 0xFF	; 255
     dc8:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     dca:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS21)|(1<<CS20);
     dce:	83 e0       	ldi	r24, 0x03	; 3
     dd0:	80 93 b1 00 	sts	0x00B1, r24
     dd4:	94 c0       	rjmp	.+296    	; 0xefe <general_set_timer+0x18c>
	}
	// Resolution
	// 0.5s/256
	else if ( period_number <= 500 )
     dd6:	c5 3f       	cpi	r28, 0xF5	; 245
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	d8 07       	cpc	r29, r24
     ddc:	04 f5       	brge	.+64     	; 0xe1e <general_set_timer+0xac>
	{
		temp = 256 - (int) ( 256.0/500.0 * period_number);
     dde:	be 01       	movw	r22, r28
     de0:	88 27       	eor	r24, r24
     de2:	77 fd       	sbrc	r23, 7
     de4:	80 95       	com	r24
     de6:	98 2f       	mov	r25, r24
     de8:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__floatsisf>
     dec:	2f e6       	ldi	r18, 0x6F	; 111
     dee:	32 e1       	ldi	r19, 0x12	; 18
     df0:	43 e0       	ldi	r20, 0x03	; 3
     df2:	5f e3       	ldi	r21, 0x3F	; 63
     df4:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     df8:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
     dfc:	20 e0       	ldi	r18, 0x00	; 0
     dfe:	31 e0       	ldi	r19, 0x01	; 1
     e00:	c9 01       	movw	r24, r18
     e02:	86 1b       	sub	r24, r22
     e04:	97 0b       	sbc	r25, r23
     e06:	8f 3f       	cpi	r24, 0xFF	; 255
     e08:	91 05       	cpc	r25, r1
     e0a:	19 f0       	breq	.+6      	; 0xe12 <general_set_timer+0xa0>
     e0c:	14 f0       	brlt	.+4      	; 0xe12 <general_set_timer+0xa0>
     e0e:	8f ef       	ldi	r24, 0xFF	; 255
     e10:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     e12:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22);
     e16:	84 e0       	ldi	r24, 0x04	; 4
     e18:	80 93 b1 00 	sts	0x00B1, r24
     e1c:	70 c0       	rjmp	.+224    	; 0xefe <general_set_timer+0x18c>
	}
	// Resolution
	// 1s/256
	else if ( period_number <= 1000 )
     e1e:	c9 3e       	cpi	r28, 0xE9	; 233
     e20:	83 e0       	ldi	r24, 0x03	; 3
     e22:	d8 07       	cpc	r29, r24
     e24:	04 f5       	brge	.+64     	; 0xe66 <general_set_timer+0xf4>
	{
		temp = 256 - (int) ( 256.0/1000.0 * period_number);
     e26:	be 01       	movw	r22, r28
     e28:	88 27       	eor	r24, r24
     e2a:	77 fd       	sbrc	r23, 7
     e2c:	80 95       	com	r24
     e2e:	98 2f       	mov	r25, r24
     e30:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__floatsisf>
     e34:	2f e6       	ldi	r18, 0x6F	; 111
     e36:	32 e1       	ldi	r19, 0x12	; 18
     e38:	43 e8       	ldi	r20, 0x83	; 131
     e3a:	5e e3       	ldi	r21, 0x3E	; 62
     e3c:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     e40:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	31 e0       	ldi	r19, 0x01	; 1
     e48:	c9 01       	movw	r24, r18
     e4a:	86 1b       	sub	r24, r22
     e4c:	97 0b       	sbc	r25, r23
     e4e:	8f 3f       	cpi	r24, 0xFF	; 255
     e50:	91 05       	cpc	r25, r1
     e52:	19 f0       	breq	.+6      	; 0xe5a <general_set_timer+0xe8>
     e54:	14 f0       	brlt	.+4      	; 0xe5a <general_set_timer+0xe8>
     e56:	8f ef       	ldi	r24, 0xFF	; 255
     e58:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     e5a:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS20);	
     e5e:	85 e0       	ldi	r24, 0x05	; 5
     e60:	80 93 b1 00 	sts	0x00B1, r24
     e64:	4c c0       	rjmp	.+152    	; 0xefe <general_set_timer+0x18c>
	}
	// Resolution
	// 2s/256
	else if ( period_number <= 2000 )
     e66:	c1 3d       	cpi	r28, 0xD1	; 209
     e68:	87 e0       	ldi	r24, 0x07	; 7
     e6a:	d8 07       	cpc	r29, r24
     e6c:	04 f5       	brge	.+64     	; 0xeae <general_set_timer+0x13c>
	{
		temp = 256 - (int) ( 256.0/2000.0 * period_number);
     e6e:	be 01       	movw	r22, r28
     e70:	88 27       	eor	r24, r24
     e72:	77 fd       	sbrc	r23, 7
     e74:	80 95       	com	r24
     e76:	98 2f       	mov	r25, r24
     e78:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__floatsisf>
     e7c:	2f e6       	ldi	r18, 0x6F	; 111
     e7e:	32 e1       	ldi	r19, 0x12	; 18
     e80:	43 e0       	ldi	r20, 0x03	; 3
     e82:	5e e3       	ldi	r21, 0x3E	; 62
     e84:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     e88:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	31 e0       	ldi	r19, 0x01	; 1
     e90:	c9 01       	movw	r24, r18
     e92:	86 1b       	sub	r24, r22
     e94:	97 0b       	sbc	r25, r23
     e96:	8f 3f       	cpi	r24, 0xFF	; 255
     e98:	91 05       	cpc	r25, r1
     e9a:	19 f0       	breq	.+6      	; 0xea2 <general_set_timer+0x130>
     e9c:	14 f0       	brlt	.+4      	; 0xea2 <general_set_timer+0x130>
     e9e:	8f ef       	ldi	r24, 0xFF	; 255
     ea0:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     ea2:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS21);	
     ea6:	86 e0       	ldi	r24, 0x06	; 6
     ea8:	80 93 b1 00 	sts	0x00B1, r24
     eac:	28 c0       	rjmp	.+80     	; 0xefe <general_set_timer+0x18c>
	}
	// Resolution
	// 8s/256
	else if ( period_number <= 8000 )
     eae:	c1 34       	cpi	r28, 0x41	; 65
     eb0:	8f e1       	ldi	r24, 0x1F	; 31
     eb2:	d8 07       	cpc	r29, r24
     eb4:	04 f5       	brge	.+64     	; 0xef6 <general_set_timer+0x184>
	{
		t = (int) ( 256.0/8000.0 * period_number);
     eb6:	be 01       	movw	r22, r28
     eb8:	88 27       	eor	r24, r24
     eba:	77 fd       	sbrc	r23, 7
     ebc:	80 95       	com	r24
     ebe:	98 2f       	mov	r25, r24
     ec0:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <__floatsisf>
     ec4:	2f e6       	ldi	r18, 0x6F	; 111
     ec6:	32 e1       	ldi	r19, 0x12	; 18
     ec8:	43 e0       	ldi	r20, 0x03	; 3
     eca:	5d e3       	ldi	r21, 0x3D	; 61
     ecc:	0e 94 ba 0f 	call	0x1f74	; 0x1f74 <__mulsf3>
     ed0:	0e 94 d3 0e 	call	0x1da6	; 0x1da6 <__fixsfsi>
		temp = 256 - t;
		temp = temp > 255 ? 255 : temp ;
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	31 e0       	ldi	r19, 0x01	; 1
     ed8:	c9 01       	movw	r24, r18
     eda:	86 1b       	sub	r24, r22
     edc:	97 0b       	sbc	r25, r23
     ede:	8f 3f       	cpi	r24, 0xFF	; 255
     ee0:	91 05       	cpc	r25, r1
     ee2:	19 f0       	breq	.+6      	; 0xeea <general_set_timer+0x178>
     ee4:	14 f0       	brlt	.+4      	; 0xeea <general_set_timer+0x178>
     ee6:	8f ef       	ldi	r24, 0xFF	; 255
     ee8:	90 e0       	ldi	r25, 0x00	; 0

		TCNT2 = temp;
     eea:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
     eee:	87 e0       	ldi	r24, 0x07	; 7
     ef0:	80 93 b1 00 	sts	0x00B1, r24
     ef4:	04 c0       	rjmp	.+8      	; 0xefe <general_set_timer+0x18c>
	}
	else
	{
		printf("Timer exceeds max\n");
     ef6:	88 e9       	ldi	r24, 0x98	; 152
     ef8:	92 e0       	ldi	r25, 0x02	; 2
     efa:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <puts>
	}

	/* start timer 2 */
	TCCR2A = 0x00;
     efe:	10 92 b0 00 	sts	0x00B0, r1
	TimeStamp += period_number;
     f02:	ce 01       	movw	r24, r28
     f04:	aa 27       	eor	r26, r26
     f06:	97 fd       	sbrc	r25, 7
     f08:	a0 95       	com	r26
     f0a:	ba 2f       	mov	r27, r26
     f0c:	40 91 b4 04 	lds	r20, 0x04B4
     f10:	50 91 b5 04 	lds	r21, 0x04B5
     f14:	60 91 b6 04 	lds	r22, 0x04B6
     f18:	70 91 b7 04 	lds	r23, 0x04B7
     f1c:	84 0f       	add	r24, r20
     f1e:	95 1f       	adc	r25, r21
     f20:	a6 1f       	adc	r26, r22
     f22:	b7 1f       	adc	r27, r23
     f24:	80 93 b4 04 	sts	0x04B4, r24
     f28:	90 93 b5 04 	sts	0x04B5, r25
     f2c:	a0 93 b6 04 	sts	0x04B6, r26
     f30:	b0 93 b7 04 	sts	0x04B7, r27
}
     f34:	df 91       	pop	r29
     f36:	cf 91       	pop	r28
     f38:	08 95       	ret

00000f3a <init_set_timer>:

void init_set_timer( int period_number )
{
    general_set_timer( period_number );
     f3a:	0e 94 b9 06 	call	0xd72	; 0xd72 <general_set_timer>
	/* Clear pending interrupts */
	TIFR2  = (1 << TOV2) | (1 << OCF2A) | (1 << OCF2B);
     f3e:	87 e0       	ldi	r24, 0x07	; 7
     f40:	87 bb       	out	0x17, r24	; 23
	/* Enable Overflow Interrupt */
	TIMSK2 = 1<<TOIE2;
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	80 93 70 00 	sts	0x0070, r24
     f48:	08 95       	ret

00000f4a <set_timer>:

}

void set_timer( int period_number )
{
     f4a:	cf 93       	push	r28
     f4c:	df 93       	push	r29
     f4e:	ec 01       	movw	r28, r24
	printf("set timer gap = %d\n\n", period_number);
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	8a ea       	ldi	r24, 0xAA	; 170
     f56:	92 e0       	ldi	r25, 0x02	; 2
     f58:	9f 93       	push	r25
     f5a:	8f 93       	push	r24
     f5c:	0e 94 38 16 	call	0x2c70	; 0x2c70 <printf>
	if( period_number == 0)
     f60:	0f 90       	pop	r0
     f62:	0f 90       	pop	r0
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	20 97       	sbiw	r28, 0x00	; 0
     f6a:	69 f0       	breq	.+26     	; 0xf86 <set_timer+0x3c>
	{
		/* we won't every set a zero timeout, will we ? */
		return;
	}
    if( timer_usage == 0 )
     f6c:	80 91 b8 04 	lds	r24, 0x04B8
     f70:	90 91 b9 04 	lds	r25, 0x04B9
     f74:	89 2b       	or	r24, r25
     f76:	21 f4       	brne	.+8      	; 0xf80 <set_timer+0x36>
    {
        init_set_timer( period_number );
     f78:	ce 01       	movw	r24, r28
     f7a:	0e 94 9d 07 	call	0xf3a	; 0xf3a <init_set_timer>
     f7e:	03 c0       	rjmp	.+6      	; 0xf86 <set_timer+0x3c>
    }
    else
    {
        general_set_timer( period_number );
     f80:	ce 01       	movw	r24, r28
     f82:	0e 94 b9 06 	call	0xd72	; 0xd72 <general_set_timer>
    }
}	
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	08 95       	ret

00000f8c <PWR_Init>:

/*************************************************************************//**
  @brief Initializes the power management system
*****************************************************************************/
void PWR_Init(void){
	DDRD |= 0b11000000;
     f8c:	8a b1       	in	r24, 0x0a	; 10
     f8e:	80 6c       	ori	r24, 0xC0	; 192
     f90:	8a b9       	out	0x0a, r24	; 10
     f92:	08 95       	ret

00000f94 <PWR_TurnOn5V>:

/*************************************************************************//**
  @brief Turns on the 5V power supply
*****************************************************************************/
void PWR_TurnOn5V(void){
	PORTD |= 0b10000000;
     f94:	5f 9a       	sbi	0x0b, 7	; 11
     f96:	08 95       	ret

00000f98 <SPI_SlaveInit>:

unsigned char buffer[16];

void SPI_SlaveInit(void)
{
	DDRB |= (1<<PORTB3); //Set MISO output
     f98:	23 9a       	sbi	0x04, 3	; 4
	SPCR = (1<<SPE); //Enable SPI
     f9a:	80 e4       	ldi	r24, 0x40	; 64
     f9c:	8c bd       	out	0x2c, r24	; 44
     f9e:	08 95       	ret

00000fa0 <TWI_Init>:
/*************************************************************************//**
  @brief Initializes the 2-wire Serial Interface as a master
  @param[in] freq SCL frequency (Do not exceed 400kHz)
  @return Status (@c 0 on failure, nonzero otherwise)
*****************************************************************************/
char TWI_Init(unsigned long freq){
     fa0:	9b 01       	movw	r18, r22
     fa2:	ac 01       	movw	r20, r24
	//printf("TWI_Init");
	TWSR=0x00;
     fa4:	10 92 b9 00 	sts	0x00B9, r1
	TWBR=(unsigned char)(((F_CPU/freq)-16UL)/8UL); //Compute settings value and set frequency
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	74 e2       	ldi	r23, 0x24	; 36
     fac:	84 ef       	ldi	r24, 0xF4	; 244
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	0e 94 98 13 	call	0x2730	; 0x2730 <__udivmodsi4>
     fb4:	da 01       	movw	r26, r20
     fb6:	c9 01       	movw	r24, r18
     fb8:	40 97       	sbiw	r24, 0x10	; 16
     fba:	a1 09       	sbc	r26, r1
     fbc:	b1 09       	sbc	r27, r1
     fbe:	68 94       	set
     fc0:	12 f8       	bld	r1, 2
     fc2:	b6 95       	lsr	r27
     fc4:	a7 95       	ror	r26
     fc6:	97 95       	ror	r25
     fc8:	87 95       	ror	r24
     fca:	16 94       	lsr	r1
     fcc:	d1 f7       	brne	.-12     	; 0xfc2 <TWI_Init+0x22>
     fce:	80 93 b8 00 	sts	0x00B8, r24
	TWCR=(1 << TWEN);
     fd2:	84 e0       	ldi	r24, 0x04	; 4
     fd4:	80 93 bc 00 	sts	0x00BC, r24
	
	//TWAR=0; //Disable slave mode
	
	return 1; //May want to actually check for success here
}
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	08 95       	ret

00000fdc <TWI_WriteByte>:
  @param[in] data byte to send
  @return Status code, TWI_SENT_ACK or TWI_SENT_NACK on success
*****************************************************************************/
char TWI_WriteByte(unsigned char data){
	//printf("TWI_WriteByte");
	TWDR = data; //Stage the data to send
     fdc:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
     fe0:	84 e8       	ldi	r24, 0x84	; 132
     fe2:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);//Send the data
     fe6:	ec eb       	ldi	r30, 0xBC	; 188
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	80 81       	ld	r24, Z
     fec:	88 23       	and	r24, r24
     fee:	ec f7       	brge	.-6      	; 0xfea <TWI_WriteByte+0xe>
	
	return TWSR&TWSR_MASK;//Return the status code
     ff0:	80 91 b9 00 	lds	r24, 0x00B9
}
     ff4:	88 7f       	andi	r24, 0xF8	; 248
     ff6:	08 95       	ret

00000ff8 <TWI_BeginWrite>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAW_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginWrite(unsigned char address){
	//printf("TWI_BeginWrite");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
     ff8:	94 ee       	ldi	r25, 0xE4	; 228
     ffa:	90 93 bc 00 	sts	0x00BC, r25
	int i=0;
	while ((TWCR & (1<<TWINT)) == 0);
     ffe:	ec eb       	ldi	r30, 0xBC	; 188
    1000:	f0 e0       	ldi	r31, 0x00	; 0
    1002:	90 81       	ld	r25, Z
    1004:	99 23       	and	r25, r25
    1006:	ec f7       	brge	.-6      	; 0x1002 <TWI_BeginWrite+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1008:	ef e9       	ldi	r30, 0x9F	; 159
    100a:	ff e0       	ldi	r31, 0x0F	; 15
    100c:	31 97       	sbiw	r30, 0x01	; 1
    100e:	f1 f7       	brne	.-4      	; 0x100c <TWI_BeginWrite+0x14>
    1010:	00 c0       	rjmp	.+0      	; 0x1012 <TWI_BeginWrite+0x1a>
    1012:	00 00       	nop
	_delay_ms(1);
	char stat = (TWSR & TWSR_MASK);
    1014:	90 91 b9 00 	lds	r25, 0x00B9
    1018:	98 7f       	andi	r25, 0xF8	; 248
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
    101a:	98 30       	cpi	r25, 0x08	; 8
    101c:	31 f0       	breq	.+12     	; 0x102a <TWI_BeginWrite+0x32>
    101e:	90 31       	cpi	r25, 0x10	; 16
    1020:	21 f0       	breq	.+8      	; 0x102a <TWI_BeginWrite+0x32>
    1022:	80 91 b9 00 	lds	r24, 0x00B9
    1026:	88 7f       	andi	r24, 0xF8	; 248
    1028:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) & SLAW_MASK); //reset bit 0 to send a write bit, send
    102a:	88 0f       	add	r24, r24
    102c:	0e 94 ee 07 	call	0xfdc	; 0xfdc <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	return stat;//Return the status code
}
    1030:	08 95       	ret

00001032 <TWI_BeginRead>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAR_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginRead(unsigned char address){
	//printf("TWI_BeginRead");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
    1032:	94 ee       	ldi	r25, 0xE4	; 228
    1034:	90 93 bc 00 	sts	0x00BC, r25
	while ((TWCR & (1<<TWINT)) == 0);
    1038:	ec eb       	ldi	r30, 0xBC	; 188
    103a:	f0 e0       	ldi	r31, 0x00	; 0
    103c:	90 81       	ld	r25, Z
    103e:	99 23       	and	r25, r25
    1040:	ec f7       	brge	.-6      	; 0x103c <TWI_BeginRead+0xa>
	
	char stat = (TWSR & TWSR_MASK);
    1042:	90 91 b9 00 	lds	r25, 0x00B9
    1046:	98 7f       	andi	r25, 0xF8	; 248
	//printf("0x%1x",(unsigned)stat);
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
    1048:	98 30       	cpi	r25, 0x08	; 8
    104a:	31 f0       	breq	.+12     	; 0x1058 <TWI_BeginRead+0x26>
    104c:	90 31       	cpi	r25, 0x10	; 16
    104e:	21 f0       	breq	.+8      	; 0x1058 <TWI_BeginRead+0x26>
    1050:	80 91 b9 00 	lds	r24, 0x00B9
    1054:	88 7f       	andi	r24, 0xF8	; 248
    1056:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) | SLAR_MASK); //set bit 0 to send a read bit and send it
    1058:	88 0f       	add	r24, r24
    105a:	81 60       	ori	r24, 0x01	; 1
    105c:	0e 94 ee 07 	call	0xfdc	; 0xfdc <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	
	return stat;//Return the status code
}
    1060:	08 95       	ret

00001062 <TWI_ReadAck>:
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_ACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadAck(unsigned char *data){
	//printf("TWI_ReadAck");
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Start receiving, ending with an ACK
    1062:	24 ec       	ldi	r18, 0xC4	; 196
    1064:	20 93 bc 00 	sts	0x00BC, r18
	while ((TWCR & (1<<TWINT)) == 0);
    1068:	ec eb       	ldi	r30, 0xBC	; 188
    106a:	f0 e0       	ldi	r31, 0x00	; 0
    106c:	20 81       	ld	r18, Z
    106e:	22 23       	and	r18, r18
    1070:	ec f7       	brge	.-6      	; 0x106c <TWI_ReadAck+0xa>
	*data=TWDR; //Store the data
    1072:	20 91 bb 00 	lds	r18, 0x00BB
    1076:	fc 01       	movw	r30, r24
    1078:	20 83       	st	Z, r18
	
	return TWSR&TWSR_MASK;//Return the status code
    107a:	80 91 b9 00 	lds	r24, 0x00B9
}
    107e:	88 7f       	andi	r24, 0xF8	; 248
    1080:	08 95       	ret

00001082 <TWI_ReadNack>:
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_NACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadNack(unsigned char *data){
	//printf("TWI_ReadNack");
	TWCR = (1<<TWINT)|(1<<TWEN); //Start receiving, ending with a NACK
    1082:	24 e8       	ldi	r18, 0x84	; 132
    1084:	20 93 bc 00 	sts	0x00BC, r18
	while ((TWCR & (1<<TWINT)) == 0);
    1088:	ec eb       	ldi	r30, 0xBC	; 188
    108a:	f0 e0       	ldi	r31, 0x00	; 0
    108c:	20 81       	ld	r18, Z
    108e:	22 23       	and	r18, r18
    1090:	ec f7       	brge	.-6      	; 0x108c <TWI_ReadNack+0xa>
	*data=TWDR; //Store the data
    1092:	20 91 bb 00 	lds	r18, 0x00BB
    1096:	fc 01       	movw	r30, r24
    1098:	20 83       	st	Z, r18
	
	return TWSR&TWSR_MASK;//Return the status code
    109a:	80 91 b9 00 	lds	r24, 0x00B9
}
    109e:	88 7f       	andi	r24, 0xF8	; 248
    10a0:	08 95       	ret

000010a2 <TWI_Stop>:
  @brief Sends a Stop bit, be sure to send a Start bit before future interactions on the bus
  @return Status code, should always be nonzero
*****************************************************************************/
char TWI_Stop(void){
	//printf("TWI_Stop");
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    10a2:	84 e9       	ldi	r24, 0x94	; 148
    10a4:	80 93 bc 00 	sts	0x00BC, r24
	return 1;
}
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	08 95       	ret

000010ac <TWI_Read>:
  @param[in] amount Number of bytes to recieve
  @param[in] whether or not to send an ACK on the last byte, sends NACK if false
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
    10ac:	9f 92       	push	r9
    10ae:	af 92       	push	r10
    10b0:	bf 92       	push	r11
    10b2:	cf 92       	push	r12
    10b4:	df 92       	push	r13
    10b6:	ef 92       	push	r14
    10b8:	ff 92       	push	r15
    10ba:	0f 93       	push	r16
    10bc:	1f 93       	push	r17
    10be:	cf 93       	push	r28
    10c0:	df 93       	push	r29
    10c2:	7c 01       	movw	r14, r24
    10c4:	8b 01       	movw	r16, r22
    10c6:	94 2e       	mov	r9, r20
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
    10c8:	16 16       	cp	r1, r22
    10ca:	17 06       	cpc	r1, r23
    10cc:	f4 f4       	brge	.+60     	; 0x110a <TWI_Read+0x5e>
    10ce:	c0 e0       	ldi	r28, 0x00	; 0
    10d0:	d0 e0       	ldi	r29, 0x00	; 0
		if((ack==false) && ((amount-1)==i)){
    10d2:	6b 01       	movw	r12, r22
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	c8 1a       	sub	r12, r24
    10d8:	d1 08       	sbc	r13, r1
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
    10da:	57 01       	movw	r10, r14
    10dc:	ac 0c       	add	r10, r12
    10de:	bd 1c       	adc	r11, r13
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
		if((ack==false) && ((amount-1)==i)){
    10e0:	91 10       	cpse	r9, r1
    10e2:	07 c0       	rjmp	.+14     	; 0x10f2 <TWI_Read+0x46>
    10e4:	cc 16       	cp	r12, r28
    10e6:	dd 06       	cpc	r13, r29
    10e8:	21 f4       	brne	.+8      	; 0x10f2 <TWI_Read+0x46>
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
    10ea:	c5 01       	movw	r24, r10
    10ec:	0e 94 41 08 	call	0x1082	; 0x1082 <TWI_ReadNack>
    10f0:	05 c0       	rjmp	.+10     	; 0x10fc <TWI_Read+0x50>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}else{
			status=TWI_ReadAck(&data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
    10f2:	c7 01       	movw	r24, r14
    10f4:	8c 0f       	add	r24, r28
    10f6:	9d 1f       	adc	r25, r29
    10f8:	0e 94 31 08 	call	0x1062	; 0x1062 <TWI_ReadAck>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}
		//printf("A");
		if(status!=TWI_REC_ACK)return status; //If NACK was selected, returning here is fine since the loop is already ending
    10fc:	80 35       	cpi	r24, 0x50	; 80
    10fe:	31 f4       	brne	.+12     	; 0x110c <TWI_Read+0x60>
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
    1100:	21 96       	adiw	r28, 0x01	; 1
    1102:	c0 17       	cp	r28, r16
    1104:	d1 07       	cpc	r29, r17
    1106:	61 f7       	brne	.-40     	; 0x10e0 <TWI_Read+0x34>
    1108:	01 c0       	rjmp	.+2      	; 0x110c <TWI_Read+0x60>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
    110a:	80 e0       	ldi	r24, 0x00	; 0
		//will return if something goes wrong partway through
		//printf("B");
	}
	//printf("0x%1x",(unsigned)status);
	return status;
}
    110c:	df 91       	pop	r29
    110e:	cf 91       	pop	r28
    1110:	1f 91       	pop	r17
    1112:	0f 91       	pop	r16
    1114:	ff 90       	pop	r15
    1116:	ef 90       	pop	r14
    1118:	df 90       	pop	r13
    111a:	cf 90       	pop	r12
    111c:	bf 90       	pop	r11
    111e:	af 90       	pop	r10
    1120:	9f 90       	pop	r9
    1122:	08 95       	ret

00001124 <TWI_Write>:
  @param[in] *data Pointer to an array of bytes to send
  @param[in] amount Number of bytes to send
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
    1124:	0f 93       	push	r16
    1126:	1f 93       	push	r17
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
    112c:	16 16       	cp	r1, r22
    112e:	17 06       	cpc	r1, r23
    1130:	6c f4       	brge	.+26     	; 0x114c <TWI_Write+0x28>
    1132:	ec 01       	movw	r28, r24
    1134:	8c 01       	movw	r16, r24
    1136:	06 0f       	add	r16, r22
    1138:	17 1f       	adc	r17, r23
		status=TWI_WriteByte(data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
    113a:	89 91       	ld	r24, Y+
    113c:	0e 94 ee 07 	call	0xfdc	; 0xfdc <TWI_WriteByte>
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
    1140:	88 32       	cpi	r24, 0x28	; 40
    1142:	29 f4       	brne	.+10     	; 0x114e <TWI_Write+0x2a>
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
    1144:	c0 17       	cp	r28, r16
    1146:	d1 07       	cpc	r29, r17
    1148:	c1 f7       	brne	.-16     	; 0x113a <TWI_Write+0x16>
    114a:	01 c0       	rjmp	.+2      	; 0x114e <TWI_Write+0x2a>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
    114c:	80 e0       	ldi	r24, 0x00	; 0
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
		//will return if something goes wrong partway through
	}
	return status;
    114e:	df 91       	pop	r29
    1150:	cf 91       	pop	r28
    1152:	1f 91       	pop	r17
    1154:	0f 91       	pop	r16
    1156:	08 95       	ret

00001158 <USART0_Init>:
  @brief Initializes USART0 in asynchronous UART mode, 8 bit data, 1 stop bit
  @param[in] desired baud rate (configuration values computed using F_CPU)
*****************************************************************************/
void USART0_Init(unsigned long baud){
	
	stdout = &USART0_stdout; //make stdout print to USART0
    1158:	26 e0       	ldi	r18, 0x06	; 6
    115a:	32 e0       	ldi	r19, 0x02	; 2
    115c:	30 93 17 09 	sts	0x0917, r19
    1160:	20 93 16 09 	sts	0x0916, r18
	
	//Compute UBRR for baudrate setting
	unsigned short ubrr=(unsigned short)((F_CPU/(baud*16UL))-1);
    1164:	dc 01       	movw	r26, r24
    1166:	cb 01       	movw	r24, r22
    1168:	88 0f       	add	r24, r24
    116a:	99 1f       	adc	r25, r25
    116c:	aa 1f       	adc	r26, r26
    116e:	bb 1f       	adc	r27, r27
    1170:	88 0f       	add	r24, r24
    1172:	99 1f       	adc	r25, r25
    1174:	aa 1f       	adc	r26, r26
    1176:	bb 1f       	adc	r27, r27
    1178:	9c 01       	movw	r18, r24
    117a:	ad 01       	movw	r20, r26
    117c:	22 0f       	add	r18, r18
    117e:	33 1f       	adc	r19, r19
    1180:	44 1f       	adc	r20, r20
    1182:	55 1f       	adc	r21, r21
    1184:	22 0f       	add	r18, r18
    1186:	33 1f       	adc	r19, r19
    1188:	44 1f       	adc	r20, r20
    118a:	55 1f       	adc	r21, r21
    118c:	60 e0       	ldi	r22, 0x00	; 0
    118e:	74 e2       	ldi	r23, 0x24	; 36
    1190:	84 ef       	ldi	r24, 0xF4	; 244
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	0e 94 98 13 	call	0x2730	; 0x2730 <__udivmodsi4>
    1198:	21 50       	subi	r18, 0x01	; 1
    119a:	31 09       	sbc	r19, r1
	
	//Set BAUD rate.
	UBRR0H = (unsigned char) (ubrr >> 8);
    119c:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) ubrr;
    11a0:	20 93 c4 00 	sts	0x00C4, r18
	/*Set frame format. 8 data bit(settings bits UCSZ00 and UCSZ01  UCSR0B), 1 stop bit(by default and need not to be worried about). 
	The UCSZ01:0 bits combined with the UCSZ02 bit in UCSR0B sets the number of data
	bits (Character Size) in the frame that the Receiver and Transmitter use. 
	If a change on frame format is needed, make sure to modify UCSR0B register above accordingly.
	See datasheet pg. 390.*/
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
    11a4:	86 e0       	ldi	r24, 0x06	; 6
    11a6:	80 93 c2 00 	sts	0x00C2, r24
	
	//Enable receiver and transmitter. Enable the USART Receive Complete interrupt(RXCIE).
	//UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0));
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);//Enable RX/TX, no interrupts
    11aa:	88 e1       	ldi	r24, 0x18	; 24
    11ac:	80 93 c1 00 	sts	0x00C1, r24
    11b0:	08 95       	ret

000011b2 <USART0_Transmit>:
Function contains busy loops for simplicity in debugging. Not production code.
  @brief Transmits a byte via USART0
  @param[in] data byte to be transmitted
*****************************************************************************/
void USART0_Transmit(unsigned char data){
	while(!(UCSR0A & (1 << UDRE0))); //Wait for the empty transmit buffer. (Waiting UDR0 to be empty.)
    11b2:	e0 ec       	ldi	r30, 0xC0	; 192
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	90 81       	ld	r25, Z
    11b8:	95 ff       	sbrs	r25, 5
    11ba:	fd cf       	rjmp	.-6      	; 0x11b6 <USART0_Transmit+0x4>
		UDR0 = data;			//store the data in the USART Data Register
    11bc:	80 93 c6 00 	sts	0x00C6, r24
    11c0:	08 95       	ret

000011c2 <USART0_putchar_printf>:
  @brief Called when stdout is being printed to USART0 (this is set up at runtime)
  @param[in] var byte to transmit
  @param[in/out] *stream Pointer to a stdio.h FILE io stream
  @return Status
*****************************************************************************/
int USART0_putchar_printf(char var, FILE *stream) {
    11c2:	cf 93       	push	r28
    11c4:	c8 2f       	mov	r28, r24
	if (var == '\n') USART0_Transmit('\r');
    11c6:	8a 30       	cpi	r24, 0x0A	; 10
    11c8:	19 f4       	brne	.+6      	; 0x11d0 <USART0_putchar_printf+0xe>
    11ca:	8d e0       	ldi	r24, 0x0D	; 13
    11cc:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <USART0_Transmit>
	USART0_Transmit(var);
    11d0:	8c 2f       	mov	r24, r28
    11d2:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <USART0_Transmit>
	return 0;
}
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	cf 91       	pop	r28
    11dc:	08 95       	ret

000011de <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
    11de:	14 be       	out	0x34, r1	; 52
  wdt_disable();
    11e0:	88 e1       	ldi	r24, 0x18	; 24
    11e2:	0f b6       	in	r0, 0x3f	; 63
    11e4:	f8 94       	cli
    11e6:	80 93 60 00 	sts	0x0060, r24
    11ea:	10 92 60 00 	sts	0x0060, r1
    11ee:	0f be       	out	0x3f, r0	; 63

  CLKPR = 1 << CLKPCE;
    11f0:	e1 e6       	ldi	r30, 0x61	; 97
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 e8       	ldi	r24, 0x80	; 128
    11f6:	80 83       	st	Z, r24
  CLKPR = 0;
    11f8:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
    11fa:	78 94       	sei

  HAL_TimerInit();
    11fc:	0e 94 01 09 	call	0x1202	; 0x1202 <HAL_TimerInit>
    1200:	08 95       	ret

00001202 <HAL_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_TimerInit(void)
{
  halTimerIrqCount = 0;
    1202:	10 92 e7 08 	sts	0x08E7, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
    1206:	80 e2       	ldi	r24, 0x20	; 32
    1208:	9e e4       	ldi	r25, 0x4E	; 78
    120a:	90 93 a9 00 	sts	0x00A9, r25
    120e:	80 93 a8 00 	sts	0x00A8, r24
  TCCR4B = (1 << WGM12);              // CTC mode
    1212:	e1 ea       	ldi	r30, 0xA1	; 161
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	88 e0       	ldi	r24, 0x08	; 8
    1218:	80 83       	st	Z, r24
  TCCR4B |= (1 << CS11);              // Prescaler 8
    121a:	80 81       	ld	r24, Z
    121c:	82 60       	ori	r24, 0x02	; 2
    121e:	80 83       	st	Z, r24
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
    1220:	e2 e7       	ldi	r30, 0x72	; 114
    1222:	f0 e0       	ldi	r31, 0x00	; 0
    1224:	80 81       	ld	r24, Z
    1226:	82 60       	ori	r24, 0x02	; 2
    1228:	80 83       	st	Z, r24
    122a:	08 95       	ret

0000122c <__vector_42>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    122c:	1f 92       	push	r1
    122e:	0f 92       	push	r0
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	0f 92       	push	r0
    1234:	11 24       	eor	r1, r1
    1236:	8f 93       	push	r24
  halTimerIrqCount++;
    1238:	80 91 e7 08 	lds	r24, 0x08E7
    123c:	8f 5f       	subi	r24, 0xFF	; 255
    123e:	80 93 e7 08 	sts	0x08E7, r24
}
    1242:	8f 91       	pop	r24
    1244:	0f 90       	pop	r0
    1246:	0f be       	out	0x3f, r0	; 63
    1248:	0f 90       	pop	r0
    124a:	1f 90       	pop	r1
    124c:	18 95       	reti

0000124e <NWK_Init>:
/*************************************************************************//**
  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
  nwkIb.nwkSeqNum = 0;
    124e:	10 92 ec 08 	sts	0x08EC, r1
  nwkIb.macSeqNum = 0;
    1252:	10 92 ed 08 	sts	0x08ED, r1
  nwkIb.addr = 0;
    1256:	10 92 e9 08 	sts	0x08E9, r1
    125a:	10 92 e8 08 	sts	0x08E8, r1
  nwkIb.lock = 0;
    125e:	10 92 0f 09 	sts	0x090F, r1
    1262:	10 92 0e 09 	sts	0x090E, r1
    1266:	ee ee       	ldi	r30, 0xEE	; 238
    1268:	f8 e0       	ldi	r31, 0x08	; 8
    126a:	8e e0       	ldi	r24, 0x0E	; 14
    126c:	99 e0       	ldi	r25, 0x09	; 9

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
    nwkIb.endpoint[i] = NULL;
    126e:	11 92       	st	Z+, r1
    1270:	11 92       	st	Z+, r1
  nwkIb.nwkSeqNum = 0;
  nwkIb.macSeqNum = 0;
  nwkIb.addr = 0;
  nwkIb.lock = 0;

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
    1272:	e8 17       	cp	r30, r24
    1274:	f9 07       	cpc	r31, r25
    1276:	d9 f7       	brne	.-10     	; 0x126e <NWK_Init+0x20>
    nwkIb.endpoint[i] = NULL;

  nwkTxInit();
    1278:	0e 94 38 0a 	call	0x1470	; 0x1470 <nwkTxInit>
  nwkRxInit();
    127c:	0e 94 ab 09 	call	0x1356	; 0x1356 <nwkRxInit>
  nwkFrameInit();
    1280:	0e 94 53 09 	call	0x12a6	; 0x12a6 <nwkFrameInit>
  nwkDataReqInit();
    1284:	0e 94 4e 09 	call	0x129c	; 0x129c <nwkDataReqInit>
    1288:	08 95       	ret

0000128a <NWK_OpenEndpoint>:
  @param[in] id Endpoint index (1-15)
  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
  nwkIb.endpoint[id] = handler;
    128a:	e8 2f       	mov	r30, r24
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	ee 0f       	add	r30, r30
    1290:	ff 1f       	adc	r31, r31
    1292:	e2 51       	subi	r30, 0x12	; 18
    1294:	f7 4f       	sbci	r31, 0xF7	; 247
    1296:	71 83       	std	Z+1, r23	; 0x01
    1298:	60 83       	st	Z, r22
    129a:	08 95       	ret

0000129c <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
    129c:	10 92 bb 04 	sts	0x04BB, r1
    12a0:	10 92 ba 04 	sts	0x04BA, r1
    12a4:	08 95       	ret

000012a6 <nwkFrameInit>:
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    12a6:	10 92 bc 04 	sts	0x04BC, r1
    12aa:	10 92 45 05 	sts	0x0545, r1
    12ae:	10 92 ce 05 	sts	0x05CE, r1
    12b2:	10 92 57 06 	sts	0x0657, r1
    12b6:	10 92 e0 06 	sts	0x06E0, r1
    12ba:	08 95       	ret

000012bc <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    12bc:	00 97       	sbiw	r24, 0x00	; 0
    12be:	41 f0       	breq	.+16     	; 0x12d0 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
    12c0:	fc 01       	movw	r30, r24
    12c2:	e7 57       	subi	r30, 0x77	; 119
    12c4:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    12c6:	87 e0       	ldi	r24, 0x07	; 7
    12c8:	e9 36       	cpi	r30, 0x69	; 105
    12ca:	f8 07       	cpc	r31, r24
    12cc:	18 f0       	brcs	.+6      	; 0x12d4 <nwkFrameNext+0x18>
    12ce:	12 c0       	rjmp	.+36     	; 0x12f4 <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    12d0:	ec eb       	ldi	r30, 0xBC	; 188
    12d2:	f4 e0       	ldi	r31, 0x04	; 4
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    12d4:	80 81       	ld	r24, Z
    12d6:	88 23       	and	r24, r24
    12d8:	21 f0       	breq	.+8      	; 0x12e2 <nwkFrameNext+0x26>
    12da:	0f c0       	rjmp	.+30     	; 0x12fa <nwkFrameNext+0x3e>
    12dc:	80 81       	ld	r24, Z
    12de:	81 11       	cpse	r24, r1
    12e0:	0f c0       	rjmp	.+30     	; 0x1300 <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    12e2:	e7 57       	subi	r30, 0x77	; 119
    12e4:	ff 4f       	sbci	r31, 0xFF	; 255
    12e6:	87 e0       	ldi	r24, 0x07	; 7
    12e8:	e9 36       	cpi	r30, 0x69	; 105
    12ea:	f8 07       	cpc	r31, r24
    12ec:	b8 f3       	brcs	.-18     	; 0x12dc <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    12ee:	80 e0       	ldi	r24, 0x00	; 0
    12f0:	90 e0       	ldi	r25, 0x00	; 0
    12f2:	08 95       	ret
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    12fa:	8e 2f       	mov	r24, r30
    12fc:	9f 2f       	mov	r25, r31
    12fe:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1300:	8e 2f       	mov	r24, r30
    1302:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
    1304:	08 95       	ret

00001306 <nwkRxServiceDataInd>:
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    1306:	dc 01       	movw	r26, r24
    1308:	19 96       	adiw	r26, 0x09	; 9
    130a:	2c 91       	ld	r18, X
    130c:	19 97       	sbiw	r26, 0x09	; 9
    130e:	22 23       	and	r18, r18
    1310:	51 f0       	breq	.+20     	; 0x1326 <nwkRxServiceDataInd+0x20>
    return false;

  switch (ind->data[0])
    1312:	17 96       	adiw	r26, 0x07	; 7
    1314:	ed 91       	ld	r30, X+
    1316:	fc 91       	ld	r31, X
    1318:	18 97       	sbiw	r26, 0x08	; 8
    131a:	20 81       	ld	r18, Z
    131c:	21 11       	cpse	r18, r1
    131e:	05 c0       	rjmp	.+10     	; 0x132a <nwkRxServiceDataInd+0x24>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
    1320:	0e 94 65 0a 	call	0x14ca	; 0x14ca <nwkTxAckReceived>
    1324:	08 95       	ret
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    return false;
    1326:	80 e0       	ldi	r24, 0x00	; 0
    1328:	08 95       	ret
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
    132a:	80 e0       	ldi	r24, 0x00	; 0
  }
}
    132c:	08 95       	ret

0000132e <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    132e:	ea e7       	ldi	r30, 0x7A	; 122
    1330:	f7 e0       	ldi	r31, 0x07	; 7
    1332:	2c ea       	ldi	r18, 0xAC	; 172
    1334:	37 e0       	ldi	r19, 0x07	; 7
  bool restart = false;
    1336:	50 e0       	ldi	r21, 0x00	; 0
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    1338:	61 e0       	ldi	r22, 0x01	; 1
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    133a:	40 81       	ld	r20, Z
    133c:	44 23       	and	r20, r20
    133e:	19 f0       	breq	.+6      	; 0x1346 <nwkRxDuplicateRejectionTimerHandler+0x18>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
    1340:	41 50       	subi	r20, 0x01	; 1
    1342:	40 83       	st	Z, r20
      restart = true;
    1344:	56 2f       	mov	r21, r22
    1346:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1348:	e2 17       	cp	r30, r18
    134a:	f3 07       	cpc	r31, r19
    134c:	b1 f7       	brne	.-20     	; 0x133a <nwkRxDuplicateRejectionTimerHandler+0xc>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
    134e:	51 11       	cpse	r21, r1
    SYS_TimerStart(timer);
    1350:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <SYS_TimerStart>
    1354:	08 95       	ret

00001356 <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    1356:	ea e7       	ldi	r30, 0x7A	; 122
    1358:	f7 e0       	ldi	r31, 0x07	; 7
    135a:	8c ea       	ldi	r24, 0xAC	; 172
    135c:	97 e0       	ldi	r25, 0x07	; 7
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
    135e:	10 82       	st	Z, r1
    1360:	35 96       	adiw	r30, 0x05	; 5
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1362:	e8 17       	cp	r30, r24
    1364:	f9 07       	cpc	r31, r25
    1366:	d9 f7       	brne	.-10     	; 0x135e <nwkRxInit+0x8>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    1368:	84 e6       	ldi	r24, 0x64	; 100
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	a0 e0       	ldi	r26, 0x00	; 0
    136e:	b0 e0       	ldi	r27, 0x00	; 0
    1370:	80 93 6f 07 	sts	0x076F, r24
    1374:	90 93 70 07 	sts	0x0770, r25
    1378:	a0 93 71 07 	sts	0x0771, r26
    137c:	b0 93 72 07 	sts	0x0772, r27
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1380:	10 92 73 07 	sts	0x0773, r1
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
    1384:	87 e9       	ldi	r24, 0x97	; 151
    1386:	99 e0       	ldi	r25, 0x09	; 9
    1388:	90 93 75 07 	sts	0x0775, r25
    138c:	80 93 74 07 	sts	0x0774, r24

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
    1390:	63 e8       	ldi	r22, 0x83	; 131
    1392:	79 e0       	ldi	r23, 0x09	; 9
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	0e 94 45 09 	call	0x128a	; 0x128a <NWK_OpenEndpoint>
    139a:	08 95       	ret

0000139c <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    139c:	ff 92       	push	r15
    139e:	0f 93       	push	r16
    13a0:	1f 93       	push	r17
    13a2:	cf 93       	push	r28
    13a4:	df 93       	push	r29
    13a6:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    13a8:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    13aa:	80 e0       	ldi	r24, 0x00	; 0
    13ac:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    13ae:	01 e0       	ldi	r16, 0x01	; 1

      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    13b0:	0f 2e       	mov	r0, r31
    13b2:	f3 e1       	ldi	r31, 0x13	; 19
    13b4:	ff 2e       	mov	r15, r31
    13b6:	f0 2d       	mov	r31, r0
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    13b8:	13 c0       	rjmp	.+38     	; 0x13e0 <nwkTxDelayTimerHandler+0x44>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    13ba:	fc 01       	movw	r30, r24
    13bc:	20 81       	ld	r18, Z
    13be:	21 31       	cpi	r18, 0x11	; 17
    13c0:	79 f4       	brne	.+30     	; 0x13e0 <nwkTxDelayTimerHandler+0x44>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    13c2:	ec 57       	subi	r30, 0x7C	; 124
    13c4:	ff 4f       	sbci	r31, 0xFF	; 255
    13c6:	20 81       	ld	r18, Z
    13c8:	31 81       	ldd	r19, Z+1	; 0x01
    13ca:	21 50       	subi	r18, 0x01	; 1
    13cc:	31 09       	sbc	r19, r1
    13ce:	31 83       	std	Z+1, r19	; 0x01
    13d0:	20 83       	st	Z, r18
    13d2:	23 2b       	or	r18, r19
    13d4:	21 f4       	brne	.+8      	; 0x13de <nwkTxDelayTimerHandler+0x42>
        frame->state = NWK_TX_STATE_SEND;
    13d6:	fc 01       	movw	r30, r24
    13d8:	f0 82       	st	Z, r15

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    13da:	10 2f       	mov	r17, r16
    13dc:	01 c0       	rjmp	.+2      	; 0x13e0 <nwkTxDelayTimerHandler+0x44>
    13de:	10 2f       	mov	r17, r16
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    13e0:	0e 94 5e 09 	call	0x12bc	; 0x12bc <nwkFrameNext>
    13e4:	00 97       	sbiw	r24, 0x00	; 0
    13e6:	49 f7       	brne	.-46     	; 0x13ba <nwkTxDelayTimerHandler+0x1e>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
    13e8:	11 23       	and	r17, r17
    13ea:	19 f0       	breq	.+6      	; 0x13f2 <nwkTxDelayTimerHandler+0x56>
    SYS_TimerStart(timer);
    13ec:	ce 01       	movw	r24, r28
    13ee:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <SYS_TimerStart>
}
    13f2:	df 91       	pop	r29
    13f4:	cf 91       	pop	r28
    13f6:	1f 91       	pop	r17
    13f8:	0f 91       	pop	r16
    13fa:	ff 90       	pop	r15
    13fc:	08 95       	ret

000013fe <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    13fe:	ef 92       	push	r14
    1400:	ff 92       	push	r15
    1402:	0f 93       	push	r16
    1404:	1f 93       	push	r17
    1406:	cf 93       	push	r28
    1408:	df 93       	push	r29
    140a:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    140c:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    140e:	80 e0       	ldi	r24, 0x00	; 0
    1410:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    1412:	01 e0       	ldi	r16, 0x01	; 1

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    1414:	0f 2e       	mov	r0, r31
    1416:	f7 e1       	ldi	r31, 0x17	; 23
    1418:	ef 2e       	mov	r14, r31
    141a:	f0 2d       	mov	r31, r0
  frame->tx.status = status;
    141c:	68 94       	set
    141e:	ff 24       	eor	r15, r15
    1420:	f4 f8       	bld	r15, 4
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    1422:	16 c0       	rjmp	.+44     	; 0x1450 <nwkTxAckWaitTimerHandler+0x52>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    1424:	fc 01       	movw	r30, r24
    1426:	20 81       	ld	r18, Z
    1428:	26 31       	cpi	r18, 0x16	; 22
    142a:	91 f4       	brne	.+36     	; 0x1450 <nwkTxAckWaitTimerHandler+0x52>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    142c:	ec 57       	subi	r30, 0x7C	; 124
    142e:	ff 4f       	sbci	r31, 0xFF	; 255
    1430:	20 81       	ld	r18, Z
    1432:	31 81       	ldd	r19, Z+1	; 0x01
    1434:	21 50       	subi	r18, 0x01	; 1
    1436:	31 09       	sbc	r19, r1
    1438:	31 83       	std	Z+1, r19	; 0x01
    143a:	20 83       	st	Z, r18
    143c:	23 2b       	or	r18, r19
    143e:	39 f4       	brne	.+14     	; 0x144e <nwkTxAckWaitTimerHandler+0x50>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    1440:	fc 01       	movw	r30, r24
    1442:	e0 82       	st	Z, r14
  frame->tx.status = status;
    1444:	ed 57       	subi	r30, 0x7D	; 125
    1446:	ff 4f       	sbci	r31, 0xFF	; 255
    1448:	f0 82       	st	Z, r15

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    144a:	10 2f       	mov	r17, r16
    144c:	01 c0       	rjmp	.+2      	; 0x1450 <nwkTxAckWaitTimerHandler+0x52>
    144e:	10 2f       	mov	r17, r16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    1450:	0e 94 5e 09 	call	0x12bc	; 0x12bc <nwkFrameNext>
    1454:	00 97       	sbiw	r24, 0x00	; 0
    1456:	31 f7       	brne	.-52     	; 0x1424 <nwkTxAckWaitTimerHandler+0x26>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
    1458:	11 23       	and	r17, r17
    145a:	19 f0       	breq	.+6      	; 0x1462 <nwkTxAckWaitTimerHandler+0x64>
    SYS_TimerStart(timer);
    145c:	ce 01       	movw	r24, r28
    145e:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <SYS_TimerStart>
}
    1462:	df 91       	pop	r29
    1464:	cf 91       	pop	r28
    1466:	1f 91       	pop	r17
    1468:	0f 91       	pop	r16
    146a:	ff 90       	pop	r15
    146c:	ef 90       	pop	r14
    146e:	08 95       	ret

00001470 <nwkTxInit>:
/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
    1470:	10 92 c3 07 	sts	0x07C3, r1
    1474:	10 92 c2 07 	sts	0x07C2, r1

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    1478:	82 e3       	ldi	r24, 0x32	; 50
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	a0 e0       	ldi	r26, 0x00	; 0
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	80 93 bb 07 	sts	0x07BB, r24
    1484:	90 93 bc 07 	sts	0x07BC, r25
    1488:	a0 93 bd 07 	sts	0x07BD, r26
    148c:	b0 93 be 07 	sts	0x07BE, r27
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1490:	10 92 bf 07 	sts	0x07BF, r1
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    1494:	8f ef       	ldi	r24, 0xFF	; 255
    1496:	99 e0       	ldi	r25, 0x09	; 9
    1498:	90 93 c1 07 	sts	0x07C1, r25
    149c:	80 93 c0 07 	sts	0x07C0, r24

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    14a0:	8a e0       	ldi	r24, 0x0A	; 10
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	a0 e0       	ldi	r26, 0x00	; 0
    14a6:	b0 e0       	ldi	r27, 0x00	; 0
    14a8:	80 93 ae 07 	sts	0x07AE, r24
    14ac:	90 93 af 07 	sts	0x07AF, r25
    14b0:	a0 93 b0 07 	sts	0x07B0, r26
    14b4:	b0 93 b1 07 	sts	0x07B1, r27
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    14b8:	10 92 b2 07 	sts	0x07B2, r1
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    14bc:	8e ec       	ldi	r24, 0xCE	; 206
    14be:	99 e0       	ldi	r25, 0x09	; 9
    14c0:	90 93 b4 07 	sts	0x07B4, r25
    14c4:	80 93 b3 07 	sts	0x07B3, r24
    14c8:	08 95       	ret

000014ca <nwkTxAckReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    14ce:	fc 01       	movw	r30, r24
    14d0:	c7 81       	ldd	r28, Z+7	; 0x07
    14d2:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    14d4:	81 85       	ldd	r24, Z+9	; 0x09
    14d6:	83 30       	cpi	r24, 0x03	; 3
    14d8:	c9 f4       	brne	.+50     	; 0x150c <nwkTxAckReceived+0x42>
    14da:	10 c0       	rjmp	.+32     	; 0x14fc <nwkTxAckReceived+0x32>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
    14dc:	fc 01       	movw	r30, r24
    14de:	20 81       	ld	r18, Z
    14e0:	26 31       	cpi	r18, 0x16	; 22
    14e2:	71 f4       	brne	.+28     	; 0x1500 <nwkTxAckReceived+0x36>
    14e4:	34 85       	ldd	r19, Z+12	; 0x0c
    14e6:	29 81       	ldd	r18, Y+1	; 0x01
    14e8:	32 13       	cpse	r19, r18
    14ea:	0a c0       	rjmp	.+20     	; 0x1500 <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    14ec:	27 e1       	ldi	r18, 0x17	; 23
    14ee:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    14f0:	2a 81       	ldd	r18, Y+2	; 0x02
    14f2:	ea 57       	subi	r30, 0x7A	; 122
    14f4:	ff 4f       	sbci	r31, 0xFF	; 255
    14f6:	20 83       	st	Z, r18
      return true;
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	09 c0       	rjmp	.+18     	; 0x150e <nwkTxAckReceived+0x44>
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    14fc:	80 e0       	ldi	r24, 0x00	; 0
    14fe:	90 e0       	ldi	r25, 0x00	; 0
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
    1500:	0e 94 5e 09 	call	0x12bc	; 0x12bc <nwkFrameNext>
    1504:	00 97       	sbiw	r24, 0x00	; 0
    1506:	51 f7       	brne	.-44     	; 0x14dc <nwkTxAckReceived+0x12>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	01 c0       	rjmp	.+2      	; 0x150e <nwkTxAckReceived+0x44>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
    150c:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
    150e:	df 91       	pop	r29
    1510:	cf 91       	pop	r28
    1512:	08 95       	ret

00001514 <phyTrxSetState>:

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
  TRX_STATE_REG = TRX_CMD_FORCE_TRX_OFF;
    1514:	93 e0       	ldi	r25, 0x03	; 3
    1516:	90 93 42 01 	sts	0x0142, r25
  while (TRX_STATUS_TRX_OFF != TRX_STATUS_REG_s.trxStatus);
    151a:	e1 e4       	ldi	r30, 0x41	; 65
    151c:	f1 e0       	ldi	r31, 0x01	; 1
    151e:	90 81       	ld	r25, Z
    1520:	9f 71       	andi	r25, 0x1F	; 31
    1522:	98 30       	cpi	r25, 0x08	; 8
    1524:	e1 f7       	brne	.-8      	; 0x151e <phyTrxSetState+0xa>

  TRX_STATE_REG = state;
    1526:	80 93 42 01 	sts	0x0142, r24
  while (state != TRX_STATUS_REG_s.trxStatus);
    152a:	e1 e4       	ldi	r30, 0x41	; 65
    152c:	f1 e0       	ldi	r31, 0x01	; 1
    152e:	90 81       	ld	r25, Z
    1530:	9f 71       	andi	r25, 0x1F	; 31
    1532:	98 13       	cpse	r25, r24
    1534:	fc cf       	rjmp	.-8      	; 0x152e <phyTrxSetState+0x1a>
}
    1536:	08 95       	ret

00001538 <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
    1538:	e9 e3       	ldi	r30, 0x39	; 57
    153a:	f1 e0       	ldi	r31, 0x01	; 1
    153c:	80 81       	ld	r24, Z
    153e:	81 60       	ori	r24, 0x01	; 1
    1540:	80 83       	st	Z, r24

  phyRxState = false;
    1542:	10 92 c5 07 	sts	0x07C5, r1
  phyBand = 0;
    1546:	10 92 c4 07 	sts	0x07C4, r1
  phyState = PHY_STATE_IDLE;
    154a:	81 e0       	ldi	r24, 0x01	; 1
    154c:	80 93 c6 07 	sts	0x07C6, r24

  phyTrxSetState(TRX_CMD_TRX_OFF);
    1550:	88 e0       	ldi	r24, 0x08	; 8
    1552:	0e 94 8a 0a 	call	0x1514	; 0x1514 <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
    1556:	8b ee       	ldi	r24, 0xEB	; 235
    1558:	80 93 56 01 	sts	0x0156, r24

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
    155c:	ec e4       	ldi	r30, 0x4C	; 76
    155e:	f1 e0       	ldi	r31, 0x01	; 1
    1560:	80 81       	ld	r24, Z
    1562:	80 68       	ori	r24, 0x80	; 128
    1564:	80 83       	st	Z, r24
    1566:	08 95       	ret

00001568 <sensor_handler>:

/*************************************************************************//**
  @brief sensor_handler function to decide the execution logic of a sensor according to its state, return 1 if it has some borrow time 
*****************************************************************************/
int sensor_handler( struct event *p )
{
    1568:	0f 93       	push	r16
    156a:	1f 93       	push	r17
    156c:	cf 93       	push	r28
    156e:	df 93       	push	r29
    1570:	ec 01       	movw	r28, r24
	int retNum;
	int data = 0;
	BaseSensor *sp;

	/* sanity check */
	if( p == EV_NULL )
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	59 f4       	brne	.+22     	; 0x158c <sensor_handler+0x24>
	{
		#ifdef DEBUG
		printf("Null Event Error !!!");
    1576:	8f eb       	ldi	r24, 0xBF	; 191
    1578:	92 e0       	ldi	r25, 0x02	; 2
    157a:	9f 93       	push	r25
    157c:	8f 93       	push	r24
    157e:	0e 94 38 16 	call	0x2c70	; 0x2c70 <printf>
		#endif
		return 0;
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	80 e0       	ldi	r24, 0x00	; 0
    1588:	90 e0       	ldi	r25, 0x00	; 0
    158a:	79 c0       	rjmp	.+242    	; 0x167e <sensor_handler+0x116>
	}
	sp = ( BaseSensor * )( p->sp );
    158c:	0a 85       	ldd	r16, Y+10	; 0x0a
    158e:	1b 85       	ldd	r17, Y+11	; 0x0b

	#ifdef DEBUG
	printf("cur_state = %d\n", p->cur_state);
    1590:	8e 85       	ldd	r24, Y+14	; 0x0e
    1592:	1f 92       	push	r1
    1594:	8f 93       	push	r24
    1596:	24 ed       	ldi	r18, 0xD4	; 212
    1598:	32 e0       	ldi	r19, 0x02	; 2
    159a:	3f 93       	push	r19
    159c:	2f 93       	push	r18
    159e:	0e 94 38 16 	call	0x2c70	; 0x2c70 <printf>
	#endif
	switch( p->cur_state )
    15a2:	0f 90       	pop	r0
    15a4:	0f 90       	pop	r0
    15a6:	0f 90       	pop	r0
    15a8:	0f 90       	pop	r0
    15aa:	8e 85       	ldd	r24, Y+14	; 0x0e
    15ac:	81 30       	cpi	r24, 0x01	; 1
    15ae:	a9 f0       	breq	.+42     	; 0x15da <sensor_handler+0x72>
    15b0:	38 f0       	brcs	.+14     	; 0x15c0 <sensor_handler+0x58>
    15b2:	82 30       	cpi	r24, 0x02	; 2
    15b4:	09 f4       	brne	.+2      	; 0x15b8 <sensor_handler+0x50>
    15b6:	49 c0       	rjmp	.+146    	; 0x164a <sensor_handler+0xe2>
    15b8:	84 30       	cpi	r24, 0x04	; 4
    15ba:	09 f4       	brne	.+2      	; 0x15be <sensor_handler+0x56>
    15bc:	56 c0       	rjmp	.+172    	; 0x166a <sensor_handler+0x102>
    15be:	5d c0       	rjmp	.+186    	; 0x167a <sensor_handler+0x112>
	{
		/* New : init first, if retNum is not 0 goto Oops state */
		case New :
		// the way to call init() is different than most other functions, since it is virtual function in BaseDevice .
		retNum = sp->abstract.device_vt->init( &(sp->abstract) );
    15c0:	d8 01       	movw	r26, r16
    15c2:	ed 91       	ld	r30, X+
    15c4:	fc 91       	ld	r31, X
    15c6:	02 80       	ldd	r0, Z+2	; 0x02
    15c8:	f3 81       	ldd	r31, Z+3	; 0x03
    15ca:	e0 2d       	mov	r30, r0
    15cc:	c8 01       	movw	r24, r16
    15ce:	09 95       	icall
		if(retNum != 0)
		{
			p->cur_state = Oops;
		}
		p->cur_state = Ready;
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	8e 87       	std	Y+14, r24	; 0x0e
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    15d4:	80 e0       	ldi	r24, 0x00	; 0
    15d6:	90 e0       	ldi	r25, 0x00	; 0
		if(retNum != 0)
		{
			p->cur_state = Oops;
		}
		p->cur_state = Ready;
		break;
    15d8:	52 c0       	rjmp	.+164    	; 0x167e <sensor_handler+0x116>
		
		
		
		/* Ready : ready to activate collection request, if retNum is not 0 goto Oops state */
		case Ready :
		retNum = sp->vmt->Request(p->sp);
    15da:	d8 01       	movw	r26, r16
    15dc:	1c 96       	adiw	r26, 0x0c	; 12
    15de:	ed 91       	ld	r30, X+
    15e0:	fc 91       	ld	r31, X
    15e2:	1d 97       	sbiw	r26, 0x0d	; 13
    15e4:	04 80       	ldd	r0, Z+4	; 0x04
    15e6:	f5 81       	ldd	r31, Z+5	; 0x05
    15e8:	e0 2d       	mov	r30, r0
    15ea:	8a 85       	ldd	r24, Y+10	; 0x0a
    15ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    15ee:	09 95       	icall
		if ( retNum == -1 )
    15f0:	8f 3f       	cpi	r24, 0xFF	; 255
    15f2:	bf ef       	ldi	r27, 0xFF	; 255
    15f4:	9b 07       	cpc	r25, r27
    15f6:	29 f4       	brne	.+10     	; 0x1602 <sensor_handler+0x9a>
		{
			p->cur_state = Oops;
    15f8:	84 e0       	ldi	r24, 0x04	; 4
    15fa:	8e 87       	std	Y+14, r24	; 0x0e
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	3e c0       	rjmp	.+124    	; 0x167e <sensor_handler+0x116>
		retNum = sp->vmt->Request(p->sp);
		if ( retNum == -1 )
		{
			p->cur_state = Oops;
		}
		else if( retNum == 0 )
    1602:	00 97       	sbiw	r24, 0x00	; 0
    1604:	81 f4       	brne	.+32     	; 0x1626 <sensor_handler+0xbe>
		{
			p->cur_state = Ready;
    1606:	81 e0       	ldi	r24, 0x01	; 1
    1608:	8e 87       	std	Y+14, r24	; 0x0e
			data = sp->vmt->Collect(p->sp);
    160a:	d8 01       	movw	r26, r16
    160c:	1c 96       	adiw	r26, 0x0c	; 12
    160e:	ed 91       	ld	r30, X+
    1610:	fc 91       	ld	r31, X
    1612:	1d 97       	sbiw	r26, 0x0d	; 13
    1614:	06 80       	ldd	r0, Z+6	; 0x06
    1616:	f7 81       	ldd	r31, Z+7	; 0x07
    1618:	e0 2d       	mov	r30, r0
    161a:	8a 85       	ldd	r24, Y+10	; 0x0a
    161c:	9b 85       	ldd	r25, Y+11	; 0x0b
    161e:	09 95       	icall
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    1620:	80 e0       	ldi	r24, 0x00	; 0
    1622:	90 e0       	ldi	r25, 0x00	; 0
    1624:	2c c0       	rjmp	.+88     	; 0x167e <sensor_handler+0x116>
			// printf("data : %d\n", data);
			// #endif
		}
		else
		{
			p->cur_state = Running;
    1626:	22 e0       	ldi	r18, 0x02	; 2
    1628:	2e 87       	std	Y+14, r18	; 0x0e
			p->timeout = retNum;
    162a:	9d 83       	std	Y+5, r25	; 0x05
    162c:	8c 83       	std	Y+4, r24	; 0x04
			p->borrow_timeout = retNum;
    162e:	99 87       	std	Y+9, r25	; 0x09
    1630:	88 87       	std	Y+8, r24	; 0x08
			LL_POP( timeoutq );
    1632:	80 91 dd 08 	lds	r24, 0x08DD
    1636:	90 91 de 08 	lds	r25, 0x08DE
    163a:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ll_pop>
			insert_timeoutq_event( p );
    163e:	ce 01       	movw	r24, r28
    1640:	0e 94 95 0b 	call	0x172a	; 0x172a <insert_timeoutq_event>
			return 1;
    1644:	81 e0       	ldi	r24, 0x01	; 1
    1646:	90 e0       	ldi	r25, 0x00	; 0
    1648:	1a c0       	rjmp	.+52     	; 0x167e <sensor_handler+0x116>
		
		
		/* Running : ready to pull data right away */
		case Running :
		//      data = p->sp->vmt->Collect();
		p->cur_state = Ready;
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	8e 87       	std	Y+14, r24	; 0x0e
		p->sp->vmt->Collect(p->sp);
    164e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1650:	9b 85       	ldd	r25, Y+11	; 0x0b
    1652:	dc 01       	movw	r26, r24
    1654:	1c 96       	adiw	r26, 0x0c	; 12
    1656:	ed 91       	ld	r30, X+
    1658:	fc 91       	ld	r31, X
    165a:	1d 97       	sbiw	r26, 0x0d	; 13
    165c:	06 80       	ldd	r0, Z+6	; 0x06
    165e:	f7 81       	ldd	r31, Z+7	; 0x07
    1660:	e0 2d       	mov	r30, r0
    1662:	09 95       	icall
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	90 e0       	ldi	r25, 0x00	; 0
		/* Running : ready to pull data right away */
		case Running :
		//      data = p->sp->vmt->Collect();
		p->cur_state = Ready;
		p->sp->vmt->Collect(p->sp);
		break;
    1668:	0a c0       	rjmp	.+20     	; 0x167e <sensor_handler+0x116>
		
		/* Oops : when some errors occur */
		case Oops :
		/* TODO : ( we may want to do something in reset function and ) re-init by setting the state to new */
#ifdef DEBUG
		      printf("Something really wrong happens\n");
    166a:	84 ee       	ldi	r24, 0xE4	; 228
    166c:	92 e0       	ldi	r25, 0x02	; 2
    166e:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <puts>
#endif
		p->cur_state = New;
    1672:	1e 86       	std	Y+14, r1	; 0x0e
		break;
	}
	return 0;
    1674:	80 e0       	ldi	r24, 0x00	; 0
    1676:	90 e0       	ldi	r25, 0x00	; 0
		/* TODO : ( we may want to do something in reset function and ) re-init by setting the state to new */
#ifdef DEBUG
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
    1678:	02 c0       	rjmp	.+4      	; 0x167e <sensor_handler+0x116>
	}
	return 0;
    167a:	80 e0       	ldi	r24, 0x00	; 0
    167c:	90 e0       	ldi	r25, 0x00	; 0
	// printf(" run :\n\t");
	// p->sp->vmt->MyPrint(p->sp);

}
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	1f 91       	pop	r17
    1684:	0f 91       	pop	r16
    1686:	08 95       	ret

00001688 <init_timeoutq>:

/*************************************************************************//**
  @brief Init function of scheduler, which initialize all events and put them into freelist
*****************************************************************************/
void init_timeoutq()
{
    1688:	0f 93       	push	r16
    168a:	1f 93       	push	r17
    168c:	cf 93       	push	r28
    168e:	df 93       	push	r29
	int i;

	timeoutq = (struct event *)&TQ;
    1690:	e9 ed       	ldi	r30, 0xD9	; 217
    1692:	f8 e0       	ldi	r31, 0x08	; 8
    1694:	f0 93 de 08 	sts	0x08DE, r31
    1698:	e0 93 dd 08 	sts	0x08DD, r30
	LL_INIT(timeoutq);
    169c:	f0 93 dc 08 	sts	0x08DC, r31
    16a0:	e0 93 db 08 	sts	0x08DB, r30
    16a4:	f1 83       	std	Z+1, r31	; 0x01
    16a6:	e0 83       	st	Z, r30
	freelist = (struct event *)&FL;
    16a8:	e1 ee       	ldi	r30, 0xE1	; 225
    16aa:	f8 e0       	ldi	r31, 0x08	; 8
    16ac:	f0 93 e6 08 	sts	0x08E6, r31
    16b0:	e0 93 e5 08 	sts	0x08E5, r30
	LL_INIT(freelist);
    16b4:	f0 93 e4 08 	sts	0x08E4, r31
    16b8:	e0 93 e3 08 	sts	0x08E3, r30
    16bc:	f1 83       	std	Z+1, r31	; 0x01
    16be:	e0 83       	st	Z, r30
    16c0:	c9 ec       	ldi	r28, 0xC9	; 201
    16c2:	d7 e0       	ldi	r29, 0x07	; 7
    16c4:	09 ed       	ldi	r16, 0xD9	; 217
    16c6:	18 e0       	ldi	r17, 0x08	; 8

	for (i=0; i<MAX_EVENTS; i++) {
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
    16c8:	be 01       	movw	r22, r28
    16ca:	80 91 e5 08 	lds	r24, 0x08E5
    16ce:	90 91 e6 08 	lds	r25, 0x08E6
    16d2:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <ll_r_insert>
    16d6:	61 96       	adiw	r28, 0x11	; 17
	timeoutq = (struct event *)&TQ;
	LL_INIT(timeoutq);
	freelist = (struct event *)&FL;
	LL_INIT(freelist);

	for (i=0; i<MAX_EVENTS; i++) {
    16d8:	c0 17       	cp	r28, r16
    16da:	d1 07       	cpc	r29, r17
    16dc:	a9 f7       	brne	.-22     	; 0x16c8 <init_timeoutq+0x40>
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
	}

	return;
}
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	1f 91       	pop	r17
    16e4:	0f 91       	pop	r16
    16e6:	08 95       	ret

000016e8 <get_next_interval>:
*****************************************************************************/
int get_next_interval()
{

	int wait_time = MAX_SLEEP_INTERVAL;
	struct event * ev = ( struct event * ) LL_TOP( timeoutq );
    16e8:	80 91 dd 08 	lds	r24, 0x08DD
    16ec:	90 91 de 08 	lds	r25, 0x08DE
    16f0:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <ll_first>
    16f4:	fc 01       	movw	r30, r24

	/* sanity check */
    /* no event in queue */
    /* TODO : to optimize the sleep time or let the CPU sleep or set up some other interrupts */
	if( EV_NULL == ev )
    16f6:	00 97       	sbiw	r24, 0x00	; 0
    16f8:	59 f4       	brne	.+22     	; 0x1710 <get_next_interval+0x28>
	{
#ifdef DEBUG
		printf("we may get some memory leakage issue, or something really bad occurs\n");
    16fa:	83 e0       	ldi	r24, 0x03	; 3
    16fc:	93 e0       	ldi	r25, 0x03	; 3
    16fe:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <puts>
		printf("so we are going to take some really sleep, since no event in scheduler\n");
    1702:	88 e4       	ldi	r24, 0x48	; 72
    1704:	93 e0       	ldi	r25, 0x03	; 3
    1706:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <puts>
#endif
	    return wait_time;
    170a:	80 e4       	ldi	r24, 0x40	; 64
    170c:	9f e1       	ldi	r25, 0x1F	; 31
    170e:	08 95       	ret
	}
	
	/* if the next event is nearer */
	if( wait_time > ev->timeout )
    1710:	84 81       	ldd	r24, Z+4	; 0x04
    1712:	95 81       	ldd	r25, Z+5	; 0x05
    1714:	80 34       	cpi	r24, 0x40	; 64
    1716:	2f e1       	ldi	r18, 0x1F	; 31
    1718:	92 07       	cpc	r25, r18
    171a:	34 f0       	brlt	.+12     	; 0x1728 <get_next_interval+0x40>
		wait_time = ev->timeout;
	}
	/* if the next event time is longer, we need to wait it time by time, since currently, the longest waiting time support is 8s */
	else
	{
		ev->timeout = ev->timeout - wait_time;
    171c:	80 54       	subi	r24, 0x40	; 64
    171e:	9f 41       	sbci	r25, 0x1F	; 31
    1720:	95 83       	std	Z+5, r25	; 0x05
    1722:	84 83       	std	Z+4, r24	; 0x04
  @brief Return the the time ( ms ) of the next event
*****************************************************************************/
int get_next_interval()
{

	int wait_time = MAX_SLEEP_INTERVAL;
    1724:	80 e4       	ldi	r24, 0x40	; 64
    1726:	9f e1       	ldi	r25, 0x1F	; 31
	else
	{
		ev->timeout = ev->timeout - wait_time;
	}
	return wait_time;
}
    1728:	08 95       	ret

0000172a <insert_timeoutq_event>:

/*************************************************************************//**
  @brief Insert a new event into the scheduler according to timeout order
*****************************************************************************/
void insert_timeoutq_event( struct event * ep)
{
    172a:	cf 93       	push	r28
    172c:	df 93       	push	r29
    172e:	dc 01       	movw	r26, r24
	// Try to insert it according to timeout and timeoutq
	struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
    1730:	c0 91 dd 08 	lds	r28, 0x08DD
    1734:	d0 91 de 08 	lds	r29, 0x08DE
    1738:	ea 81       	ldd	r30, Y+2	; 0x02
    173a:	fb 81       	ldd	r31, Y+3	; 0x03
    173c:	ce 17       	cp	r28, r30
    173e:	df 07       	cpc	r29, r31
    1740:	09 f1       	breq	.+66     	; 0x1784 <insert_timeoutq_event+0x5a>
	{
		if( it != EV_NULL )
    1742:	30 97       	sbiw	r30, 0x00	; 0
    1744:	c9 f0       	breq	.+50     	; 0x1778 <insert_timeoutq_event+0x4e>
		{
			if( ( it->timeout ) > ( ep->timeout ) )
    1746:	44 81       	ldd	r20, Z+4	; 0x04
    1748:	55 81       	ldd	r21, Z+5	; 0x05
    174a:	14 96       	adiw	r26, 0x04	; 4
    174c:	2d 91       	ld	r18, X+
    174e:	3c 91       	ld	r19, X
    1750:	15 97       	sbiw	r26, 0x05	; 5
    1752:	24 17       	cp	r18, r20
    1754:	35 07       	cpc	r19, r21
    1756:	54 f4       	brge	.+20     	; 0x176c <insert_timeoutq_event+0x42>
			{
				it->timeout -= ep->timeout;
    1758:	42 1b       	sub	r20, r18
    175a:	53 0b       	sbc	r21, r19
    175c:	55 83       	std	Z+5, r21	; 0x05
    175e:	44 83       	std	Z+4, r20	; 0x04
				LL_L_INSERT( it, ep );
    1760:	bd 01       	movw	r22, r26
    1762:	80 81       	ld	r24, Z
    1764:	91 81       	ldd	r25, Z+1	; 0x01
    1766:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <ll_r_insert>
    176a:	15 c0       	rjmp	.+42     	; 0x1796 <insert_timeoutq_event+0x6c>
				// printf("left insert \n");
				break;
			}
			else
			{
				ep->timeout -= it->timeout;
    176c:	24 1b       	sub	r18, r20
    176e:	35 0b       	sbc	r19, r21
    1770:	15 96       	adiw	r26, 0x05	; 5
    1772:	3c 93       	st	X, r19
    1774:	2e 93       	st	-X, r18
    1776:	14 97       	sbiw	r26, 0x04	; 4
	// Try to insert it according to timeout and timeoutq
	struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
    1778:	02 80       	ldd	r0, Z+2	; 0x02
    177a:	f3 81       	ldd	r31, Z+3	; 0x03
    177c:	e0 2d       	mov	r30, r0
    177e:	ce 17       	cp	r28, r30
    1780:	df 07       	cpc	r29, r31
    1782:	f9 f6       	brne	.-66     	; 0x1742 <insert_timeoutq_event+0x18>
	}
	
	// If not insert it left to the header
	if( is_pushed == 0 )
	{
		LL_APPEND(timeoutq, ep);
    1784:	e0 91 dd 08 	lds	r30, 0x08DD
    1788:	f0 91 de 08 	lds	r31, 0x08DE
    178c:	bd 01       	movw	r22, r26
    178e:	80 81       	ld	r24, Z
    1790:	91 81       	ldd	r25, Z+1	; 0x01
    1792:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <ll_r_insert>

	#ifdef DEBUG
	// dump_timeoutq();
	#endif

}
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	08 95       	ret

0000179c <load_new_sensor>:

/*************************************************************************//**
  @brief Load a brand new device activity into the scheduler's timeoutQ
*****************************************************************************/
int load_new_sensor( int timeout, int repeat, BaseSensor *device_ptr, int otherinfo )
{
    179c:	cf 92       	push	r12
    179e:	df 92       	push	r13
    17a0:	ef 92       	push	r14
    17a2:	ff 92       	push	r15
    17a4:	0f 93       	push	r16
    17a6:	1f 93       	push	r17
    17a8:	cf 93       	push	r28
    17aa:	df 93       	push	r29
    17ac:	6c 01       	movw	r12, r24
    17ae:	7b 01       	movw	r14, r22
    17b0:	8a 01       	movw	r16, r20
    17b2:	e9 01       	movw	r28, r18

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    17b4:	80 91 e5 08 	lds	r24, 0x08E5
    17b8:	90 91 e6 08 	lds	r25, 0x08E6
    17bc:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ll_pop>
    17c0:	fc 01       	movw	r30, r24
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	b1 f0       	breq	.+44     	; 0x17f2 <load_new_sensor+0x56>
        return -1;
    ep->timeout = timeout;
    17c6:	d5 82       	std	Z+5, r13	; 0x05
    17c8:	c4 82       	std	Z+4, r12	; 0x04
    ep->repeat_interval = repeat;
    17ca:	f7 82       	std	Z+7, r15	; 0x07
    17cc:	e6 82       	std	Z+6, r14	; 0x06
	ep->borrow_timeout = 0;
    17ce:	11 86       	std	Z+9, r1	; 0x09
    17d0:	10 86       	std	Z+8, r1	; 0x08
    ep->sp = device_ptr;
    17d2:	13 87       	std	Z+11, r17	; 0x0b
    17d4:	02 87       	std	Z+10, r16	; 0x0a
    ep->info = otherinfo;
    17d6:	d5 87       	std	Z+13, r29	; 0x0d
    17d8:	c4 87       	std	Z+12, r28	; 0x0c
    ep->cur_state = Ready;
    17da:	81 e0       	ldi	r24, 0x01	; 1
    17dc:	86 87       	std	Z+14, r24	; 0x0e
    ep->run = sensor_handler;
    17de:	84 eb       	ldi	r24, 0xB4	; 180
    17e0:	9a e0       	ldi	r25, 0x0A	; 10
    17e2:	90 8b       	std	Z+16, r25	; 0x10
    17e4:	87 87       	std	Z+15, r24	; 0x0f
    insert_timeoutq_event( ep );
    17e6:	cf 01       	movw	r24, r30
    17e8:	0e 94 95 0b 	call	0x172a	; 0x172a <insert_timeoutq_event>
    return 0;
    17ec:	80 e0       	ldi	r24, 0x00	; 0
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	02 c0       	rjmp	.+4      	; 0x17f6 <load_new_sensor+0x5a>

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
        return -1;
    17f2:	8f ef       	ldi	r24, 0xFF	; 255
    17f4:	9f ef       	ldi	r25, 0xFF	; 255
    ep->info = otherinfo;
    ep->cur_state = Ready;
    ep->run = sensor_handler;
    insert_timeoutq_event( ep );
    return 0;
}
    17f6:	df 91       	pop	r29
    17f8:	cf 91       	pop	r28
    17fa:	1f 91       	pop	r17
    17fc:	0f 91       	pop	r16
    17fe:	ff 90       	pop	r15
    1800:	ef 90       	pop	r14
    1802:	df 90       	pop	r13
    1804:	cf 90       	pop	r12
    1806:	08 95       	ret

00001808 <handle_timeoutq_event>:

/*************************************************************************//**
  @brief Handle the next event in timeoutQ: execute the event's handler function according to the device type, re-insert it according to the period, and set a timer of next event.
*****************************************************************************/
int handle_timeoutq_event( )
{
    1808:	cf 93       	push	r28
    180a:	df 93       	push	r29
	/* assume we get a valid one */
	struct event * ev = (struct event * )LL_TOP( timeoutq );
    180c:	80 91 dd 08 	lds	r24, 0x08DD
    1810:	90 91 de 08 	lds	r25, 0x08DE
    1814:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <ll_first>
    1818:	ec 01       	movw	r28, r24
	if( EV_NULL == ev )
    181a:	00 97       	sbiw	r24, 0x00	; 0
    181c:	09 f4       	brne	.+2      	; 0x1820 <handle_timeoutq_event+0x18>
    181e:	4c c0       	rjmp	.+152    	; 0x18b8 <handle_timeoutq_event+0xb0>
        return -1;
    
    /* sanity check */
    if( ev->sp == NULL )
    1820:	8a 85       	ldd	r24, Y+10	; 0x0a
    1822:	9b 85       	ldd	r25, Y+11	; 0x0b
    1824:	89 2b       	or	r24, r25
    1826:	09 f4       	brne	.+2      	; 0x182a <handle_timeoutq_event+0x22>
    1828:	4a c0       	rjmp	.+148    	; 0x18be <handle_timeoutq_event+0xb6>
        return -1;

	/* retNum may need to be designed in other ways */
    int retNum = ev->run( ev );
    182a:	ef 85       	ldd	r30, Y+15	; 0x0f
    182c:	f8 89       	ldd	r31, Y+16	; 0x10
    182e:	ce 01       	movw	r24, r28
    1830:	09 95       	icall
	/* 
	 * return 1 if it has to with some borrow time( have a request-time!=0 case ) 
	 * which means the event has already entered the scheduler, 
	 * and won't need to do anything else
	 */
	if( retNum == 1 )
    1832:	01 97       	sbiw	r24, 0x01	; 1
    1834:	69 f4       	brne	.+26     	; 0x1850 <handle_timeoutq_event+0x48>
	{
		/* judge if the next top in queue has a timeout <= 0, which we may want to handle it right now */
		if( get_next_interval() == 0 )
    1836:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <get_next_interval>
    183a:	89 2b       	or	r24, r25
    183c:	11 f4       	brne	.+4      	; 0x1842 <handle_timeoutq_event+0x3a>
			handle_timeoutq_event();
    183e:	0e 94 04 0c 	call	0x1808	; 0x1808 <handle_timeoutq_event>
			
		set_timer(get_next_interval());
    1842:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <get_next_interval>
    1846:	0e 94 a5 07 	call	0xf4a	; 0xf4a <set_timer>
		return 0;
    184a:	80 e0       	ldi	r24, 0x00	; 0
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	39 c0       	rjmp	.+114    	; 0x18c2 <handle_timeoutq_event+0xba>
    /*
	 * return 0 means we just fired a case, 
	 * and may need to judge it over the repeat time to re-insert into the scheduler,
	 * since we definitely want to collect data periodically
	 */
    LL_POP( timeoutq );
    1850:	80 91 dd 08 	lds	r24, 0x08DD
    1854:	90 91 de 08 	lds	r25, 0x08DE
    1858:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <ll_pop>
    if( ev->repeat_interval != 0 )
    185c:	8e 81       	ldd	r24, Y+6	; 0x06
    185e:	9f 81       	ldd	r25, Y+7	; 0x07
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	b1 f0       	breq	.+44     	; 0x1890 <handle_timeoutq_event+0x88>
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
    1864:	28 85       	ldd	r18, Y+8	; 0x08
    1866:	39 85       	ldd	r19, Y+9	; 0x09
    1868:	ac 01       	movw	r20, r24
    186a:	42 1b       	sub	r20, r18
    186c:	53 0b       	sbc	r21, r19
    186e:	9a 01       	movw	r18, r20
    1870:	5d 83       	std	Y+5, r21	; 0x05
    1872:	4c 83       	std	Y+4, r20	; 0x04
		while( ev->timeout < 0 )
    1874:	55 23       	and	r21, r21
    1876:	34 f4       	brge	.+12     	; 0x1884 <handle_timeoutq_event+0x7c>
		{
			ev->timeout += ev->repeat_interval;
    1878:	28 0f       	add	r18, r24
    187a:	39 1f       	adc	r19, r25
	 */
    LL_POP( timeoutq );
    if( ev->repeat_interval != 0 )
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
		while( ev->timeout < 0 )
    187c:	33 23       	and	r19, r19
    187e:	e4 f3       	brlt	.-8      	; 0x1878 <handle_timeoutq_event+0x70>
    1880:	3d 83       	std	Y+5, r19	; 0x05
    1882:	2c 83       	std	Y+4, r18	; 0x04
		{
			ev->timeout += ev->repeat_interval;
		}
		ev->borrow_timeout = 0;
    1884:	19 86       	std	Y+9, r1	; 0x09
    1886:	18 86       	std	Y+8, r1	; 0x08
        insert_timeoutq_event( ev );
    1888:	ce 01       	movw	r24, r28
    188a:	0e 94 95 0b 	call	0x172a	; 0x172a <insert_timeoutq_event>
    188e:	07 c0       	rjmp	.+14     	; 0x189e <handle_timeoutq_event+0x96>
    }
    else
    {
        LL_PUSH( freelist, ev );
    1890:	be 01       	movw	r22, r28
    1892:	80 91 e5 08 	lds	r24, 0x08E5
    1896:	90 91 e6 08 	lds	r25, 0x08E6
    189a:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <ll_r_insert>
    }

	
	/* judge if the next top in queue has a timeout <= 0, which we may want to handle it right now */
	if( get_next_interval() == 0 )
    189e:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <get_next_interval>
    18a2:	89 2b       	or	r24, r25
    18a4:	11 f4       	brne	.+4      	; 0x18aa <handle_timeoutq_event+0xa2>
		handle_timeoutq_event();
    18a6:	0e 94 04 0c 	call	0x1808	; 0x1808 <handle_timeoutq_event>
		
	set_timer(get_next_interval());
    18aa:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <get_next_interval>
    18ae:	0e 94 a5 07 	call	0xf4a	; 0xf4a <set_timer>
    return 0;
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	05 c0       	rjmp	.+10     	; 0x18c2 <handle_timeoutq_event+0xba>
int handle_timeoutq_event( )
{
	/* assume we get a valid one */
	struct event * ev = (struct event * )LL_TOP( timeoutq );
	if( EV_NULL == ev )
        return -1;
    18b8:	8f ef       	ldi	r24, 0xFF	; 255
    18ba:	9f ef       	ldi	r25, 0xFF	; 255
    18bc:	02 c0       	rjmp	.+4      	; 0x18c2 <handle_timeoutq_event+0xba>
    
    /* sanity check */
    if( ev->sp == NULL )
        return -1;
    18be:	8f ef       	ldi	r24, 0xFF	; 255
    18c0:	9f ef       	ldi	r25, 0xFF	; 255
	if( get_next_interval() == 0 )
		handle_timeoutq_event();
		
	set_timer(get_next_interval());
    return 0;
}
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	08 95       	ret

000018c8 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    18c8:	0e 94 ef 08 	call	0x11de	; 0x11de <HAL_Init>
  SYS_TimerInit();
    18cc:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <SYS_TimerInit>
  PHY_Init();
    18d0:	0e 94 9c 0a 	call	0x1538	; 0x1538 <PHY_Init>
  NWK_Init();
    18d4:	0e 94 27 09 	call	0x124e	; 0x124e <NWK_Init>
    18d8:	08 95       	ret

000018da <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    18da:	0f 93       	push	r16
    18dc:	1f 93       	push	r17
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
    18e2:	ec 01       	movw	r28, r24
  if (timers)
    18e4:	80 91 c7 07 	lds	r24, 0x07C7
    18e8:	90 91 c8 07 	lds	r25, 0x07C8
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	09 f4       	brne	.+2      	; 0x18f2 <placeTimer+0x18>
    18f0:	45 c0       	rjmp	.+138    	; 0x197c <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    18f2:	4e 81       	ldd	r20, Y+6	; 0x06
    18f4:	5f 81       	ldd	r21, Y+7	; 0x07
    18f6:	68 85       	ldd	r22, Y+8	; 0x08
    18f8:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    18fa:	fc 01       	movw	r30, r24
    18fc:	02 81       	ldd	r16, Z+2	; 0x02
    18fe:	13 81       	ldd	r17, Z+3	; 0x03
    1900:	24 81       	ldd	r18, Z+4	; 0x04
    1902:	35 81       	ldd	r19, Z+5	; 0x05
    1904:	40 17       	cp	r20, r16
    1906:	51 07       	cpc	r21, r17
    1908:	62 07       	cpc	r22, r18
    190a:	73 07       	cpc	r23, r19
    190c:	c0 f4       	brcc	.+48     	; 0x193e <placeTimer+0x64>
    190e:	0b c0       	rjmp	.+22     	; 0x1926 <placeTimer+0x4c>
    1910:	02 81       	ldd	r16, Z+2	; 0x02
    1912:	13 81       	ldd	r17, Z+3	; 0x03
    1914:	24 81       	ldd	r18, Z+4	; 0x04
    1916:	35 81       	ldd	r19, Z+5	; 0x05
    1918:	40 17       	cp	r20, r16
    191a:	51 07       	cpc	r21, r17
    191c:	62 07       	cpc	r22, r18
    191e:	73 07       	cpc	r23, r19
    1920:	28 f0       	brcs	.+10     	; 0x192c <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1922:	df 01       	movw	r26, r30
    1924:	0d c0       	rjmp	.+26     	; 0x1940 <placeTimer+0x66>
    1926:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    1928:	a0 e0       	ldi	r26, 0x00	; 0
    192a:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    192c:	04 1b       	sub	r16, r20
    192e:	15 0b       	sbc	r17, r21
    1930:	26 0b       	sbc	r18, r22
    1932:	37 0b       	sbc	r19, r23
    1934:	02 83       	std	Z+2, r16	; 0x02
    1936:	13 83       	std	Z+3, r17	; 0x03
    1938:	24 83       	std	Z+4, r18	; 0x04
    193a:	35 83       	std	Z+5, r19	; 0x05
         break;
    193c:	0a c0       	rjmp	.+20     	; 0x1952 <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    193e:	dc 01       	movw	r26, r24
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    1940:	40 1b       	sub	r20, r16
    1942:	51 0b       	sbc	r21, r17
    1944:	62 0b       	sbc	r22, r18
    1946:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1948:	ed 91       	ld	r30, X+
    194a:	fc 91       	ld	r31, X
    194c:	11 97       	sbiw	r26, 0x01	; 1
    194e:	30 97       	sbiw	r30, 0x00	; 0
    1950:	f9 f6       	brne	.-66     	; 0x1910 <placeTimer+0x36>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    1952:	4a 83       	std	Y+2, r20	; 0x02
    1954:	5b 83       	std	Y+3, r21	; 0x03
    1956:	6c 83       	std	Y+4, r22	; 0x04
    1958:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    195a:	10 97       	sbiw	r26, 0x00	; 0
    195c:	41 f0       	breq	.+16     	; 0x196e <placeTimer+0x94>
    {
      timer->next = prev->next;
    195e:	8d 91       	ld	r24, X+
    1960:	9c 91       	ld	r25, X
    1962:	11 97       	sbiw	r26, 0x01	; 1
    1964:	99 83       	std	Y+1, r25	; 0x01
    1966:	88 83       	st	Y, r24
      prev->next = timer;
    1968:	cd 93       	st	X+, r28
    196a:	dc 93       	st	X, r29
    196c:	15 c0       	rjmp	.+42     	; 0x1998 <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    196e:	99 83       	std	Y+1, r25	; 0x01
    1970:	88 83       	st	Y, r24
      timers = timer;
    1972:	d0 93 c8 07 	sts	0x07C8, r29
    1976:	c0 93 c7 07 	sts	0x07C7, r28
    197a:	0e c0       	rjmp	.+28     	; 0x1998 <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    197c:	19 82       	std	Y+1, r1	; 0x01
    197e:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    1980:	8e 81       	ldd	r24, Y+6	; 0x06
    1982:	9f 81       	ldd	r25, Y+7	; 0x07
    1984:	a8 85       	ldd	r26, Y+8	; 0x08
    1986:	b9 85       	ldd	r27, Y+9	; 0x09
    1988:	8a 83       	std	Y+2, r24	; 0x02
    198a:	9b 83       	std	Y+3, r25	; 0x03
    198c:	ac 83       	std	Y+4, r26	; 0x04
    198e:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    1990:	d0 93 c8 07 	sts	0x07C8, r29
    1994:	c0 93 c7 07 	sts	0x07C7, r28
  }
}
    1998:	df 91       	pop	r29
    199a:	cf 91       	pop	r28
    199c:	1f 91       	pop	r17
    199e:	0f 91       	pop	r16
    19a0:	08 95       	ret

000019a2 <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    19a2:	10 92 c8 07 	sts	0x07C8, r1
    19a6:	10 92 c7 07 	sts	0x07C7, r1
    19aa:	08 95       	ret

000019ac <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    19ac:	e0 91 c7 07 	lds	r30, 0x07C7
    19b0:	f0 91 c8 07 	lds	r31, 0x07C8
    19b4:	30 97       	sbiw	r30, 0x00	; 0
    19b6:	71 f0       	breq	.+28     	; 0x19d4 <SYS_TimerStarted+0x28>
    if (t == timer)
    19b8:	e8 17       	cp	r30, r24
    19ba:	f9 07       	cpc	r31, r25
    19bc:	21 f4       	brne	.+8      	; 0x19c6 <SYS_TimerStarted+0x1a>
    19be:	0c c0       	rjmp	.+24     	; 0x19d8 <SYS_TimerStarted+0x2c>
    19c0:	8e 17       	cp	r24, r30
    19c2:	9f 07       	cpc	r25, r31
    19c4:	59 f0       	breq	.+22     	; 0x19dc <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    19c6:	01 90       	ld	r0, Z+
    19c8:	f0 81       	ld	r31, Z
    19ca:	e0 2d       	mov	r30, r0
    19cc:	30 97       	sbiw	r30, 0x00	; 0
    19ce:	c1 f7       	brne	.-16     	; 0x19c0 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    19d0:	80 e0       	ldi	r24, 0x00	; 0
    19d2:	08 95       	ret
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	08 95       	ret
    19dc:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    19de:	08 95       	ret

000019e0 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
    19e4:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    19e6:	0e 94 d6 0c 	call	0x19ac	; 0x19ac <SYS_TimerStarted>
    19ea:	81 11       	cpse	r24, r1
    19ec:	03 c0       	rjmp	.+6      	; 0x19f4 <SYS_TimerStart+0x14>
    placeTimer(timer);
    19ee:	ce 01       	movw	r24, r28
    19f0:	0e 94 6d 0c 	call	0x18da	; 0x18da <placeTimer>
}
    19f4:	df 91       	pop	r29
    19f6:	cf 91       	pop	r28
    19f8:	08 95       	ret

000019fa <ll_first>:
 */
llobject_t *
ll_first(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
    19fa:	fc 01       	movw	r30, r24
    19fc:	22 81       	ldd	r18, Z+2	; 0x02
    19fe:	33 81       	ldd	r19, Z+3	; 0x03
    1a00:	28 17       	cp	r18, r24
    1a02:	39 07       	cpc	r19, r25
    1a04:	19 f4       	brne	.+6      	; 0x1a0c <ll_first+0x12>
		return LL_NULL;
    1a06:	80 e0       	ldi	r24, 0x00	; 0
    1a08:	90 e0       	ldi	r25, 0x00	; 0
    1a0a:	08 95       	ret
    }
    return lp->next;
    1a0c:	82 2f       	mov	r24, r18
    1a0e:	93 2f       	mov	r25, r19
}
    1a10:	08 95       	ret

00001a12 <ll_r_insert>:
llobject_t *
ll_r_insert(ip, ep)
llobject_t *ip;
llobject_t *ep;
{
    llobject_t *tp = ip->next;
    1a12:	dc 01       	movw	r26, r24
    1a14:	12 96       	adiw	r26, 0x02	; 2
    1a16:	ed 91       	ld	r30, X+
    1a18:	fc 91       	ld	r31, X
    1a1a:	13 97       	sbiw	r26, 0x03	; 3

    tp->prev = ep;
    1a1c:	71 83       	std	Z+1, r23	; 0x01
    1a1e:	60 83       	st	Z, r22
    ep->next = tp;
    1a20:	db 01       	movw	r26, r22
    1a22:	13 96       	adiw	r26, 0x03	; 3
    1a24:	fc 93       	st	X, r31
    1a26:	ee 93       	st	-X, r30
    1a28:	12 97       	sbiw	r26, 0x02	; 2
    ip->next = ep;
    1a2a:	fc 01       	movw	r30, r24
    1a2c:	73 83       	std	Z+3, r23	; 0x03
    1a2e:	62 83       	std	Z+2, r22	; 0x02
    ep->prev = ip;
    1a30:	8d 93       	st	X+, r24
    1a32:	9c 93       	st	X, r25

    return ep;
}
    1a34:	cb 01       	movw	r24, r22
    1a36:	08 95       	ret

00001a38 <ll_detach>:
 */
llobject_t *
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    1a38:	fb 01       	movw	r30, r22
    if (LL_IS_EMPTY(lp) || lp == ep) {
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	12 96       	adiw	r26, 0x02	; 2
    1a3e:	2d 91       	ld	r18, X+
    1a40:	3c 91       	ld	r19, X
    1a42:	13 97       	sbiw	r26, 0x03	; 3
    1a44:	28 17       	cp	r18, r24
    1a46:	39 07       	cpc	r19, r25
    1a48:	a1 f0       	breq	.+40     	; 0x1a72 <ll_detach+0x3a>
    1a4a:	86 17       	cp	r24, r22
    1a4c:	97 07       	cpc	r25, r23
    1a4e:	a1 f0       	breq	.+40     	; 0x1a78 <ll_detach+0x40>
		return LL_NULL;
    }

    (ep->prev)->next = ep->next;
    1a50:	a0 81       	ld	r26, Z
    1a52:	b1 81       	ldd	r27, Z+1	; 0x01
    1a54:	82 81       	ldd	r24, Z+2	; 0x02
    1a56:	93 81       	ldd	r25, Z+3	; 0x03
    1a58:	13 96       	adiw	r26, 0x03	; 3
    1a5a:	9c 93       	st	X, r25
    1a5c:	8e 93       	st	-X, r24
    1a5e:	12 97       	sbiw	r26, 0x02	; 2
    (ep->next)->prev = ep->prev;
    1a60:	a2 81       	ldd	r26, Z+2	; 0x02
    1a62:	b3 81       	ldd	r27, Z+3	; 0x03
    1a64:	80 81       	ld	r24, Z
    1a66:	91 81       	ldd	r25, Z+1	; 0x01
    1a68:	8d 93       	st	X+, r24
    1a6a:	9c 93       	st	X, r25

    return ep;
    1a6c:	86 2f       	mov	r24, r22
    1a6e:	9f 2f       	mov	r25, r31
    1a70:	08 95       	ret
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    if (LL_IS_EMPTY(lp) || lp == ep) {
		return LL_NULL;
    1a72:	80 e0       	ldi	r24, 0x00	; 0
    1a74:	90 e0       	ldi	r25, 0x00	; 0
    1a76:	08 95       	ret
    1a78:	80 e0       	ldi	r24, 0x00	; 0
    1a7a:	90 e0       	ldi	r25, 0x00	; 0

    (ep->prev)->next = ep->next;
    (ep->next)->prev = ep->prev;

    return ep;
}
    1a7c:	08 95       	ret

00001a7e <ll_pop>:
 */
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
    1a7e:	fc 01       	movw	r30, r24
    1a80:	62 81       	ldd	r22, Z+2	; 0x02
    1a82:	73 81       	ldd	r23, Z+3	; 0x03
    1a84:	68 17       	cp	r22, r24
    1a86:	79 07       	cpc	r23, r25
    1a88:	19 f0       	breq	.+6      	; 0x1a90 <ll_pop+0x12>
		return LL_NULL;
    }
    return LL_DETACH(lp, lp->next);
    1a8a:	0e 94 1c 0d 	call	0x1a38	; 0x1a38 <ll_detach>
    1a8e:	08 95       	ret
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
		return LL_NULL;
    1a90:	80 e0       	ldi	r24, 0x00	; 0
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    }
    return LL_DETACH(lp, lp->next);
}
    1a94:	08 95       	ret

00001a96 <BMP280_FctnInit>:



void BMP280_FctnInit(BMP280Sensor *this)
{
	this->inherited.vmt = &BMP280_vmt;
    1a96:	2c e1       	ldi	r18, 0x1C	; 28
    1a98:	32 e0       	ldi	r19, 0x02	; 2
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	35 87       	std	Z+13, r19	; 0x0d
    1a9e:	24 87       	std	Z+12, r18	; 0x0c
    1aa0:	08 95       	ret

00001aa2 <BMP280_Configure>:

int BMP280_Configure(BMP280Sensor *this )
{
	// virtual function
	return 0;
}
    1aa2:	80 e0       	ldi	r24, 0x00	; 0
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	08 95       	ret

00001aa8 <BMP280_VTinit>:
	printf("BMP280_Error\n");
	return 0;
}
void BMP280_VTinit( BMP280Sensor* this)
{
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
    1aa8:	24 e1       	ldi	r18, 0x14	; 20
    1aaa:	32 e0       	ldi	r19, 0x02	; 2
    1aac:	fc 01       	movw	r30, r24
    1aae:	31 83       	std	Z+1, r19	; 0x01
    1ab0:	20 83       	st	Z, r18
    1ab2:	08 95       	ret

00001ab4 <BMP280_reset>:

int BMP280_reset( BMP280Sensor* this)
{
    // virtual function
    return 0;
}
    1ab4:	80 e0       	ldi	r24, 0x00	; 0
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	08 95       	ret

00001aba <BMP280_getType>:

int BMP280_getType(BMP280Sensor* this)
{
    return TYPE_SENSOR;
}
    1aba:	83 e0       	ldi	r24, 0x03	; 3
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	08 95       	ret

00001ac0 <BMP280_Error>:
	return 0;
}

int BMP280_Error(BMP280Sensor *this )
{
	printf("BMP280_Error\n");
    1ac0:	89 e0       	ldi	r24, 0x09	; 9
    1ac2:	94 e0       	ldi	r25, 0x04	; 4
    1ac4:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <puts>
	return 0;
}
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	90 e0       	ldi	r25, 0x00	; 0
    1acc:	08 95       	ret

00001ace <BMP280_init>:
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
}

int BMP280_init( BMP280Sensor* this)
{
    printf("BMP280 Sensor Init\n");
    1ace:	86 e1       	ldi	r24, 0x16	; 22
    1ad0:	94 e0       	ldi	r25, 0x04	; 4
    1ad2:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <puts>
    return 0;
}
    1ad6:	80 e0       	ldi	r24, 0x00	; 0
    1ad8:	90 e0       	ldi	r25, 0x00	; 0
    1ada:	08 95       	ret

00001adc <BMP280_Request>:
	// virtual function
	return 0;
}

int BMP280_Request(BMP280Sensor *this )
{
    1adc:	cf 93       	push	r28
    1ade:	df 93       	push	r29
	printf("BMP280 Request\n");
    1ae0:	89 e2       	ldi	r24, 0x29	; 41
    1ae2:	94 e0       	ldi	r25, 0x04	; 4
    1ae4:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <puts>
	int Delay = BMP280_StartMeasurment();
    1ae8:	0e 94 be 02 	call	0x57c	; 0x57c <BMP280_StartMeasurment>
    1aec:	c8 2f       	mov	r28, r24
    1aee:	d0 e0       	ldi	r29, 0x00	; 0
	printf("\tWait for %d ms\n",Delay);
    1af0:	1f 92       	push	r1
    1af2:	8f 93       	push	r24
    1af4:	28 e3       	ldi	r18, 0x38	; 56
    1af6:	34 e0       	ldi	r19, 0x04	; 4
    1af8:	3f 93       	push	r19
    1afa:	2f 93       	push	r18
    1afc:	0e 94 38 16 	call	0x2c70	; 0x2c70 <printf>
	if( Delay == 0 )
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	0f 90       	pop	r0
    1b08:	20 97       	sbiw	r28, 0x00	; 0
    1b0a:	19 f0       	breq	.+6      	; 0x1b12 <BMP280_Request+0x36>
		return 0;
	else
		return ( 1 + Delay );
    1b0c:	ce 01       	movw	r24, r28
    1b0e:	01 96       	adiw	r24, 0x01	; 1
    1b10:	02 c0       	rjmp	.+4      	; 0x1b16 <BMP280_Request+0x3a>
{
	printf("BMP280 Request\n");
	int Delay = BMP280_StartMeasurment();
	printf("\tWait for %d ms\n",Delay);
	if( Delay == 0 )
		return 0;
    1b12:	80 e0       	ldi	r24, 0x00	; 0
    1b14:	90 e0       	ldi	r25, 0x00	; 0
	else
		return ( 1 + Delay );
}
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	08 95       	ret

00001b1c <BMP280_Collect>:

int BMP280_Collect(BMP280Sensor *this )
{
    1b1c:	cf 93       	push	r28
    1b1e:	df 93       	push	r29
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	28 97       	sbiw	r28, 0x08	; 8
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
	printf("BMP280 Collect\n");
    1b30:	89 e4       	ldi	r24, 0x49	; 73
    1b32:	94 e0       	ldi	r25, 0x04	; 4
    1b34:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <puts>
	double T, P;
	BMP280_GetTemperatureAndPressure(&T,&P);
    1b38:	be 01       	movw	r22, r28
    1b3a:	6b 5f       	subi	r22, 0xFB	; 251
    1b3c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b3e:	ce 01       	movw	r24, r28
    1b40:	01 96       	adiw	r24, 0x01	; 1
    1b42:	0e 94 01 06 	call	0xc02	; 0xc02 <BMP280_GetTemperatureAndPressure>
	printf("\tTemperature = %.3f\n\tPressure = %.3f\n",T,P);
    1b46:	88 85       	ldd	r24, Y+8	; 0x08
    1b48:	8f 93       	push	r24
    1b4a:	8f 81       	ldd	r24, Y+7	; 0x07
    1b4c:	8f 93       	push	r24
    1b4e:	8e 81       	ldd	r24, Y+6	; 0x06
    1b50:	8f 93       	push	r24
    1b52:	8d 81       	ldd	r24, Y+5	; 0x05
    1b54:	8f 93       	push	r24
    1b56:	8c 81       	ldd	r24, Y+4	; 0x04
    1b58:	8f 93       	push	r24
    1b5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5c:	8f 93       	push	r24
    1b5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b60:	8f 93       	push	r24
    1b62:	89 81       	ldd	r24, Y+1	; 0x01
    1b64:	8f 93       	push	r24
    1b66:	88 e5       	ldi	r24, 0x58	; 88
    1b68:	94 e0       	ldi	r25, 0x04	; 4
    1b6a:	9f 93       	push	r25
    1b6c:	8f 93       	push	r24
    1b6e:	0e 94 38 16 	call	0x2c70	; 0x2c70 <printf>
	return 0;
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	de bf       	out	0x3e, r29	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	cd bf       	out	0x3d, r28	; 61
}
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	28 96       	adiw	r28, 0x08	; 8
    1b82:	0f b6       	in	r0, 0x3f	; 63
    1b84:	f8 94       	cli
    1b86:	de bf       	out	0x3e, r29	; 62
    1b88:	0f be       	out	0x3f, r0	; 63
    1b8a:	cd bf       	out	0x3d, r28	; 61
    1b8c:	df 91       	pop	r29
    1b8e:	cf 91       	pop	r28
    1b90:	08 95       	ret

00001b92 <New_BMP280_Sensor>:
    return TYPE_SENSOR;
}


BMP280Sensor* New_BMP280_Sensor( int num, int NumData )
{
    1b92:	ef 92       	push	r14
    1b94:	ff 92       	push	r15
    1b96:	0f 93       	push	r16
    1b98:	1f 93       	push	r17
    1b9a:	cf 93       	push	r28
    1b9c:	df 93       	push	r29
    1b9e:	7c 01       	movw	r14, r24
    1ba0:	8b 01       	movw	r16, r22
	BMP280Sensor *p = malloc(sizeof(BMP280Sensor));
    1ba2:	8e e0       	ldi	r24, 0x0E	; 14
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <malloc>
    1baa:	ec 01       	movw	r28, r24
	printf("BMP280_Error\n");
	return 0;
}
void BMP280_VTinit( BMP280Sensor* this)
{
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
    1bac:	84 e1       	ldi	r24, 0x14	; 20
    1bae:	92 e0       	ldi	r25, 0x02	; 2
    1bb0:	99 83       	std	Y+1, r25	; 0x01
    1bb2:	88 83       	st	Y, r24



void BMP280_FctnInit(BMP280Sensor *this)
{
	this->inherited.vmt = &BMP280_vmt;
    1bb4:	8c e1       	ldi	r24, 0x1C	; 28
    1bb6:	92 e0       	ldi	r25, 0x02	; 2
    1bb8:	9d 87       	std	Y+13, r25	; 0x0d
    1bba:	8c 87       	std	Y+12, r24	; 0x0c
BMP280Sensor* New_BMP280_Sensor( int num, int NumData )
{
	BMP280Sensor *p = malloc(sizeof(BMP280Sensor));
    BMP280_VTinit( p );
    BMP280_FctnInit( p );
	p->inherited.test_num = num;
    1bbc:	fb 82       	std	Y+3, r15	; 0x03
    1bbe:	ea 82       	std	Y+2, r14	; 0x02
	
	p->inherited.NumOfData = NumData;
    1bc0:	1f 83       	std	Y+7, r17	; 0x07
    1bc2:	0e 83       	std	Y+6, r16	; 0x06
	p->inherited.StartNum = SensorDataCount;
    1bc4:	60 91 df 08 	lds	r22, 0x08DF
    1bc8:	70 91 e0 08 	lds	r23, 0x08E0
    1bcc:	7d 83       	std	Y+5, r23	; 0x05
    1bce:	6c 83       	std	Y+4, r22	; 0x04
	SensorDataCount += NumData;
    1bd0:	60 0f       	add	r22, r16
    1bd2:	71 1f       	adc	r23, r17
    1bd4:	70 93 e0 08 	sts	0x08E0, r23
    1bd8:	60 93 df 08 	sts	0x08DF, r22
	printf("SensorDataCount %d\n",SensorDataCount);
    1bdc:	7f 93       	push	r23
    1bde:	6f 93       	push	r22
    1be0:	8e e7       	ldi	r24, 0x7E	; 126
    1be2:	94 e0       	ldi	r25, 0x04	; 4
    1be4:	9f 93       	push	r25
    1be6:	8f 93       	push	r24
    1be8:	0e 94 38 16 	call	0x2c70	; 0x2c70 <printf>
	
	return p;
    1bec:	0f 90       	pop	r0
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	ce 01       	movw	r24, r28
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	ff 90       	pop	r15
    1c00:	ef 90       	pop	r14
    1c02:	08 95       	ret

00001c04 <__subsf3>:
    1c04:	50 58       	subi	r21, 0x80	; 128

00001c06 <__addsf3>:
    1c06:	bb 27       	eor	r27, r27
    1c08:	aa 27       	eor	r26, r26
    1c0a:	0e d0       	rcall	.+28     	; 0x1c28 <__addsf3x>
    1c0c:	75 c1       	rjmp	.+746    	; 0x1ef8 <__fp_round>
    1c0e:	66 d1       	rcall	.+716    	; 0x1edc <__fp_pscA>
    1c10:	30 f0       	brcs	.+12     	; 0x1c1e <__addsf3+0x18>
    1c12:	6b d1       	rcall	.+726    	; 0x1eea <__fp_pscB>
    1c14:	20 f0       	brcs	.+8      	; 0x1c1e <__addsf3+0x18>
    1c16:	31 f4       	brne	.+12     	; 0x1c24 <__addsf3+0x1e>
    1c18:	9f 3f       	cpi	r25, 0xFF	; 255
    1c1a:	11 f4       	brne	.+4      	; 0x1c20 <__addsf3+0x1a>
    1c1c:	1e f4       	brtc	.+6      	; 0x1c24 <__addsf3+0x1e>
    1c1e:	5b c1       	rjmp	.+694    	; 0x1ed6 <__fp_nan>
    1c20:	0e f4       	brtc	.+2      	; 0x1c24 <__addsf3+0x1e>
    1c22:	e0 95       	com	r30
    1c24:	e7 fb       	bst	r30, 7
    1c26:	51 c1       	rjmp	.+674    	; 0x1eca <__fp_inf>

00001c28 <__addsf3x>:
    1c28:	e9 2f       	mov	r30, r25
    1c2a:	77 d1       	rcall	.+750    	; 0x1f1a <__fp_split3>
    1c2c:	80 f3       	brcs	.-32     	; 0x1c0e <__addsf3+0x8>
    1c2e:	ba 17       	cp	r27, r26
    1c30:	62 07       	cpc	r22, r18
    1c32:	73 07       	cpc	r23, r19
    1c34:	84 07       	cpc	r24, r20
    1c36:	95 07       	cpc	r25, r21
    1c38:	18 f0       	brcs	.+6      	; 0x1c40 <__addsf3x+0x18>
    1c3a:	71 f4       	brne	.+28     	; 0x1c58 <__addsf3x+0x30>
    1c3c:	9e f5       	brtc	.+102    	; 0x1ca4 <__addsf3x+0x7c>
    1c3e:	8f c1       	rjmp	.+798    	; 0x1f5e <__fp_zero>
    1c40:	0e f4       	brtc	.+2      	; 0x1c44 <__addsf3x+0x1c>
    1c42:	e0 95       	com	r30
    1c44:	0b 2e       	mov	r0, r27
    1c46:	ba 2f       	mov	r27, r26
    1c48:	a0 2d       	mov	r26, r0
    1c4a:	0b 01       	movw	r0, r22
    1c4c:	b9 01       	movw	r22, r18
    1c4e:	90 01       	movw	r18, r0
    1c50:	0c 01       	movw	r0, r24
    1c52:	ca 01       	movw	r24, r20
    1c54:	a0 01       	movw	r20, r0
    1c56:	11 24       	eor	r1, r1
    1c58:	ff 27       	eor	r31, r31
    1c5a:	59 1b       	sub	r21, r25
    1c5c:	99 f0       	breq	.+38     	; 0x1c84 <__addsf3x+0x5c>
    1c5e:	59 3f       	cpi	r21, 0xF9	; 249
    1c60:	50 f4       	brcc	.+20     	; 0x1c76 <__addsf3x+0x4e>
    1c62:	50 3e       	cpi	r21, 0xE0	; 224
    1c64:	68 f1       	brcs	.+90     	; 0x1cc0 <__addsf3x+0x98>
    1c66:	1a 16       	cp	r1, r26
    1c68:	f0 40       	sbci	r31, 0x00	; 0
    1c6a:	a2 2f       	mov	r26, r18
    1c6c:	23 2f       	mov	r18, r19
    1c6e:	34 2f       	mov	r19, r20
    1c70:	44 27       	eor	r20, r20
    1c72:	58 5f       	subi	r21, 0xF8	; 248
    1c74:	f3 cf       	rjmp	.-26     	; 0x1c5c <__addsf3x+0x34>
    1c76:	46 95       	lsr	r20
    1c78:	37 95       	ror	r19
    1c7a:	27 95       	ror	r18
    1c7c:	a7 95       	ror	r26
    1c7e:	f0 40       	sbci	r31, 0x00	; 0
    1c80:	53 95       	inc	r21
    1c82:	c9 f7       	brne	.-14     	; 0x1c76 <__addsf3x+0x4e>
    1c84:	7e f4       	brtc	.+30     	; 0x1ca4 <__addsf3x+0x7c>
    1c86:	1f 16       	cp	r1, r31
    1c88:	ba 0b       	sbc	r27, r26
    1c8a:	62 0b       	sbc	r22, r18
    1c8c:	73 0b       	sbc	r23, r19
    1c8e:	84 0b       	sbc	r24, r20
    1c90:	ba f0       	brmi	.+46     	; 0x1cc0 <__addsf3x+0x98>
    1c92:	91 50       	subi	r25, 0x01	; 1
    1c94:	a1 f0       	breq	.+40     	; 0x1cbe <__addsf3x+0x96>
    1c96:	ff 0f       	add	r31, r31
    1c98:	bb 1f       	adc	r27, r27
    1c9a:	66 1f       	adc	r22, r22
    1c9c:	77 1f       	adc	r23, r23
    1c9e:	88 1f       	adc	r24, r24
    1ca0:	c2 f7       	brpl	.-16     	; 0x1c92 <__addsf3x+0x6a>
    1ca2:	0e c0       	rjmp	.+28     	; 0x1cc0 <__addsf3x+0x98>
    1ca4:	ba 0f       	add	r27, r26
    1ca6:	62 1f       	adc	r22, r18
    1ca8:	73 1f       	adc	r23, r19
    1caa:	84 1f       	adc	r24, r20
    1cac:	48 f4       	brcc	.+18     	; 0x1cc0 <__addsf3x+0x98>
    1cae:	87 95       	ror	r24
    1cb0:	77 95       	ror	r23
    1cb2:	67 95       	ror	r22
    1cb4:	b7 95       	ror	r27
    1cb6:	f7 95       	ror	r31
    1cb8:	9e 3f       	cpi	r25, 0xFE	; 254
    1cba:	08 f0       	brcs	.+2      	; 0x1cbe <__addsf3x+0x96>
    1cbc:	b3 cf       	rjmp	.-154    	; 0x1c24 <__addsf3+0x1e>
    1cbe:	93 95       	inc	r25
    1cc0:	88 0f       	add	r24, r24
    1cc2:	08 f0       	brcs	.+2      	; 0x1cc6 <__addsf3x+0x9e>
    1cc4:	99 27       	eor	r25, r25
    1cc6:	ee 0f       	add	r30, r30
    1cc8:	97 95       	ror	r25
    1cca:	87 95       	ror	r24
    1ccc:	08 95       	ret

00001cce <__cmpsf2>:
    1cce:	d9 d0       	rcall	.+434    	; 0x1e82 <__fp_cmp>
    1cd0:	08 f4       	brcc	.+2      	; 0x1cd4 <__cmpsf2+0x6>
    1cd2:	81 e0       	ldi	r24, 0x01	; 1
    1cd4:	08 95       	ret

00001cd6 <__divsf3>:
    1cd6:	0c d0       	rcall	.+24     	; 0x1cf0 <__divsf3x>
    1cd8:	0f c1       	rjmp	.+542    	; 0x1ef8 <__fp_round>
    1cda:	07 d1       	rcall	.+526    	; 0x1eea <__fp_pscB>
    1cdc:	40 f0       	brcs	.+16     	; 0x1cee <__divsf3+0x18>
    1cde:	fe d0       	rcall	.+508    	; 0x1edc <__fp_pscA>
    1ce0:	30 f0       	brcs	.+12     	; 0x1cee <__divsf3+0x18>
    1ce2:	21 f4       	brne	.+8      	; 0x1cec <__divsf3+0x16>
    1ce4:	5f 3f       	cpi	r21, 0xFF	; 255
    1ce6:	19 f0       	breq	.+6      	; 0x1cee <__divsf3+0x18>
    1ce8:	f0 c0       	rjmp	.+480    	; 0x1eca <__fp_inf>
    1cea:	51 11       	cpse	r21, r1
    1cec:	39 c1       	rjmp	.+626    	; 0x1f60 <__fp_szero>
    1cee:	f3 c0       	rjmp	.+486    	; 0x1ed6 <__fp_nan>

00001cf0 <__divsf3x>:
    1cf0:	14 d1       	rcall	.+552    	; 0x1f1a <__fp_split3>
    1cf2:	98 f3       	brcs	.-26     	; 0x1cda <__divsf3+0x4>

00001cf4 <__divsf3_pse>:
    1cf4:	99 23       	and	r25, r25
    1cf6:	c9 f3       	breq	.-14     	; 0x1cea <__divsf3+0x14>
    1cf8:	55 23       	and	r21, r21
    1cfa:	b1 f3       	breq	.-20     	; 0x1ce8 <__divsf3+0x12>
    1cfc:	95 1b       	sub	r25, r21
    1cfe:	55 0b       	sbc	r21, r21
    1d00:	bb 27       	eor	r27, r27
    1d02:	aa 27       	eor	r26, r26
    1d04:	62 17       	cp	r22, r18
    1d06:	73 07       	cpc	r23, r19
    1d08:	84 07       	cpc	r24, r20
    1d0a:	38 f0       	brcs	.+14     	; 0x1d1a <__divsf3_pse+0x26>
    1d0c:	9f 5f       	subi	r25, 0xFF	; 255
    1d0e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d10:	22 0f       	add	r18, r18
    1d12:	33 1f       	adc	r19, r19
    1d14:	44 1f       	adc	r20, r20
    1d16:	aa 1f       	adc	r26, r26
    1d18:	a9 f3       	breq	.-22     	; 0x1d04 <__divsf3_pse+0x10>
    1d1a:	33 d0       	rcall	.+102    	; 0x1d82 <__divsf3_pse+0x8e>
    1d1c:	0e 2e       	mov	r0, r30
    1d1e:	3a f0       	brmi	.+14     	; 0x1d2e <__divsf3_pse+0x3a>
    1d20:	e0 e8       	ldi	r30, 0x80	; 128
    1d22:	30 d0       	rcall	.+96     	; 0x1d84 <__divsf3_pse+0x90>
    1d24:	91 50       	subi	r25, 0x01	; 1
    1d26:	50 40       	sbci	r21, 0x00	; 0
    1d28:	e6 95       	lsr	r30
    1d2a:	00 1c       	adc	r0, r0
    1d2c:	ca f7       	brpl	.-14     	; 0x1d20 <__divsf3_pse+0x2c>
    1d2e:	29 d0       	rcall	.+82     	; 0x1d82 <__divsf3_pse+0x8e>
    1d30:	fe 2f       	mov	r31, r30
    1d32:	27 d0       	rcall	.+78     	; 0x1d82 <__divsf3_pse+0x8e>
    1d34:	66 0f       	add	r22, r22
    1d36:	77 1f       	adc	r23, r23
    1d38:	88 1f       	adc	r24, r24
    1d3a:	bb 1f       	adc	r27, r27
    1d3c:	26 17       	cp	r18, r22
    1d3e:	37 07       	cpc	r19, r23
    1d40:	48 07       	cpc	r20, r24
    1d42:	ab 07       	cpc	r26, r27
    1d44:	b0 e8       	ldi	r27, 0x80	; 128
    1d46:	09 f0       	breq	.+2      	; 0x1d4a <__divsf3_pse+0x56>
    1d48:	bb 0b       	sbc	r27, r27
    1d4a:	80 2d       	mov	r24, r0
    1d4c:	bf 01       	movw	r22, r30
    1d4e:	ff 27       	eor	r31, r31
    1d50:	93 58       	subi	r25, 0x83	; 131
    1d52:	5f 4f       	sbci	r21, 0xFF	; 255
    1d54:	2a f0       	brmi	.+10     	; 0x1d60 <__divsf3_pse+0x6c>
    1d56:	9e 3f       	cpi	r25, 0xFE	; 254
    1d58:	51 05       	cpc	r21, r1
    1d5a:	68 f0       	brcs	.+26     	; 0x1d76 <__divsf3_pse+0x82>
    1d5c:	b6 c0       	rjmp	.+364    	; 0x1eca <__fp_inf>
    1d5e:	00 c1       	rjmp	.+512    	; 0x1f60 <__fp_szero>
    1d60:	5f 3f       	cpi	r21, 0xFF	; 255
    1d62:	ec f3       	brlt	.-6      	; 0x1d5e <__divsf3_pse+0x6a>
    1d64:	98 3e       	cpi	r25, 0xE8	; 232
    1d66:	dc f3       	brlt	.-10     	; 0x1d5e <__divsf3_pse+0x6a>
    1d68:	86 95       	lsr	r24
    1d6a:	77 95       	ror	r23
    1d6c:	67 95       	ror	r22
    1d6e:	b7 95       	ror	r27
    1d70:	f7 95       	ror	r31
    1d72:	9f 5f       	subi	r25, 0xFF	; 255
    1d74:	c9 f7       	brne	.-14     	; 0x1d68 <__divsf3_pse+0x74>
    1d76:	88 0f       	add	r24, r24
    1d78:	91 1d       	adc	r25, r1
    1d7a:	96 95       	lsr	r25
    1d7c:	87 95       	ror	r24
    1d7e:	97 f9       	bld	r25, 7
    1d80:	08 95       	ret
    1d82:	e1 e0       	ldi	r30, 0x01	; 1
    1d84:	66 0f       	add	r22, r22
    1d86:	77 1f       	adc	r23, r23
    1d88:	88 1f       	adc	r24, r24
    1d8a:	bb 1f       	adc	r27, r27
    1d8c:	62 17       	cp	r22, r18
    1d8e:	73 07       	cpc	r23, r19
    1d90:	84 07       	cpc	r24, r20
    1d92:	ba 07       	cpc	r27, r26
    1d94:	20 f0       	brcs	.+8      	; 0x1d9e <__divsf3_pse+0xaa>
    1d96:	62 1b       	sub	r22, r18
    1d98:	73 0b       	sbc	r23, r19
    1d9a:	84 0b       	sbc	r24, r20
    1d9c:	ba 0b       	sbc	r27, r26
    1d9e:	ee 1f       	adc	r30, r30
    1da0:	88 f7       	brcc	.-30     	; 0x1d84 <__divsf3_pse+0x90>
    1da2:	e0 95       	com	r30
    1da4:	08 95       	ret

00001da6 <__fixsfsi>:
    1da6:	04 d0       	rcall	.+8      	; 0x1db0 <__fixunssfsi>
    1da8:	68 94       	set
    1daa:	b1 11       	cpse	r27, r1
    1dac:	d9 c0       	rjmp	.+434    	; 0x1f60 <__fp_szero>
    1dae:	08 95       	ret

00001db0 <__fixunssfsi>:
    1db0:	bc d0       	rcall	.+376    	; 0x1f2a <__fp_splitA>
    1db2:	88 f0       	brcs	.+34     	; 0x1dd6 <__fixunssfsi+0x26>
    1db4:	9f 57       	subi	r25, 0x7F	; 127
    1db6:	90 f0       	brcs	.+36     	; 0x1ddc <__fixunssfsi+0x2c>
    1db8:	b9 2f       	mov	r27, r25
    1dba:	99 27       	eor	r25, r25
    1dbc:	b7 51       	subi	r27, 0x17	; 23
    1dbe:	a0 f0       	brcs	.+40     	; 0x1de8 <__fixunssfsi+0x38>
    1dc0:	d1 f0       	breq	.+52     	; 0x1df6 <__fixunssfsi+0x46>
    1dc2:	66 0f       	add	r22, r22
    1dc4:	77 1f       	adc	r23, r23
    1dc6:	88 1f       	adc	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	1a f0       	brmi	.+6      	; 0x1dd2 <__fixunssfsi+0x22>
    1dcc:	ba 95       	dec	r27
    1dce:	c9 f7       	brne	.-14     	; 0x1dc2 <__fixunssfsi+0x12>
    1dd0:	12 c0       	rjmp	.+36     	; 0x1df6 <__fixunssfsi+0x46>
    1dd2:	b1 30       	cpi	r27, 0x01	; 1
    1dd4:	81 f0       	breq	.+32     	; 0x1df6 <__fixunssfsi+0x46>
    1dd6:	c3 d0       	rcall	.+390    	; 0x1f5e <__fp_zero>
    1dd8:	b1 e0       	ldi	r27, 0x01	; 1
    1dda:	08 95       	ret
    1ddc:	c0 c0       	rjmp	.+384    	; 0x1f5e <__fp_zero>
    1dde:	67 2f       	mov	r22, r23
    1de0:	78 2f       	mov	r23, r24
    1de2:	88 27       	eor	r24, r24
    1de4:	b8 5f       	subi	r27, 0xF8	; 248
    1de6:	39 f0       	breq	.+14     	; 0x1df6 <__fixunssfsi+0x46>
    1de8:	b9 3f       	cpi	r27, 0xF9	; 249
    1dea:	cc f3       	brlt	.-14     	; 0x1dde <__fixunssfsi+0x2e>
    1dec:	86 95       	lsr	r24
    1dee:	77 95       	ror	r23
    1df0:	67 95       	ror	r22
    1df2:	b3 95       	inc	r27
    1df4:	d9 f7       	brne	.-10     	; 0x1dec <__fixunssfsi+0x3c>
    1df6:	3e f4       	brtc	.+14     	; 0x1e06 <__fixunssfsi+0x56>
    1df8:	90 95       	com	r25
    1dfa:	80 95       	com	r24
    1dfc:	70 95       	com	r23
    1dfe:	61 95       	neg	r22
    1e00:	7f 4f       	sbci	r23, 0xFF	; 255
    1e02:	8f 4f       	sbci	r24, 0xFF	; 255
    1e04:	9f 4f       	sbci	r25, 0xFF	; 255
    1e06:	08 95       	ret

00001e08 <__floatunsisf>:
    1e08:	e8 94       	clt
    1e0a:	09 c0       	rjmp	.+18     	; 0x1e1e <__floatsisf+0x12>

00001e0c <__floatsisf>:
    1e0c:	97 fb       	bst	r25, 7
    1e0e:	3e f4       	brtc	.+14     	; 0x1e1e <__floatsisf+0x12>
    1e10:	90 95       	com	r25
    1e12:	80 95       	com	r24
    1e14:	70 95       	com	r23
    1e16:	61 95       	neg	r22
    1e18:	7f 4f       	sbci	r23, 0xFF	; 255
    1e1a:	8f 4f       	sbci	r24, 0xFF	; 255
    1e1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1e:	99 23       	and	r25, r25
    1e20:	a9 f0       	breq	.+42     	; 0x1e4c <__floatsisf+0x40>
    1e22:	f9 2f       	mov	r31, r25
    1e24:	96 e9       	ldi	r25, 0x96	; 150
    1e26:	bb 27       	eor	r27, r27
    1e28:	93 95       	inc	r25
    1e2a:	f6 95       	lsr	r31
    1e2c:	87 95       	ror	r24
    1e2e:	77 95       	ror	r23
    1e30:	67 95       	ror	r22
    1e32:	b7 95       	ror	r27
    1e34:	f1 11       	cpse	r31, r1
    1e36:	f8 cf       	rjmp	.-16     	; 0x1e28 <__floatsisf+0x1c>
    1e38:	fa f4       	brpl	.+62     	; 0x1e78 <__floatsisf+0x6c>
    1e3a:	bb 0f       	add	r27, r27
    1e3c:	11 f4       	brne	.+4      	; 0x1e42 <__floatsisf+0x36>
    1e3e:	60 ff       	sbrs	r22, 0
    1e40:	1b c0       	rjmp	.+54     	; 0x1e78 <__floatsisf+0x6c>
    1e42:	6f 5f       	subi	r22, 0xFF	; 255
    1e44:	7f 4f       	sbci	r23, 0xFF	; 255
    1e46:	8f 4f       	sbci	r24, 0xFF	; 255
    1e48:	9f 4f       	sbci	r25, 0xFF	; 255
    1e4a:	16 c0       	rjmp	.+44     	; 0x1e78 <__floatsisf+0x6c>
    1e4c:	88 23       	and	r24, r24
    1e4e:	11 f0       	breq	.+4      	; 0x1e54 <__floatsisf+0x48>
    1e50:	96 e9       	ldi	r25, 0x96	; 150
    1e52:	11 c0       	rjmp	.+34     	; 0x1e76 <__floatsisf+0x6a>
    1e54:	77 23       	and	r23, r23
    1e56:	21 f0       	breq	.+8      	; 0x1e60 <__floatsisf+0x54>
    1e58:	9e e8       	ldi	r25, 0x8E	; 142
    1e5a:	87 2f       	mov	r24, r23
    1e5c:	76 2f       	mov	r23, r22
    1e5e:	05 c0       	rjmp	.+10     	; 0x1e6a <__floatsisf+0x5e>
    1e60:	66 23       	and	r22, r22
    1e62:	71 f0       	breq	.+28     	; 0x1e80 <__floatsisf+0x74>
    1e64:	96 e8       	ldi	r25, 0x86	; 134
    1e66:	86 2f       	mov	r24, r22
    1e68:	70 e0       	ldi	r23, 0x00	; 0
    1e6a:	60 e0       	ldi	r22, 0x00	; 0
    1e6c:	2a f0       	brmi	.+10     	; 0x1e78 <__floatsisf+0x6c>
    1e6e:	9a 95       	dec	r25
    1e70:	66 0f       	add	r22, r22
    1e72:	77 1f       	adc	r23, r23
    1e74:	88 1f       	adc	r24, r24
    1e76:	da f7       	brpl	.-10     	; 0x1e6e <__floatsisf+0x62>
    1e78:	88 0f       	add	r24, r24
    1e7a:	96 95       	lsr	r25
    1e7c:	87 95       	ror	r24
    1e7e:	97 f9       	bld	r25, 7
    1e80:	08 95       	ret

00001e82 <__fp_cmp>:
    1e82:	99 0f       	add	r25, r25
    1e84:	00 08       	sbc	r0, r0
    1e86:	55 0f       	add	r21, r21
    1e88:	aa 0b       	sbc	r26, r26
    1e8a:	e0 e8       	ldi	r30, 0x80	; 128
    1e8c:	fe ef       	ldi	r31, 0xFE	; 254
    1e8e:	16 16       	cp	r1, r22
    1e90:	17 06       	cpc	r1, r23
    1e92:	e8 07       	cpc	r30, r24
    1e94:	f9 07       	cpc	r31, r25
    1e96:	c0 f0       	brcs	.+48     	; 0x1ec8 <__fp_cmp+0x46>
    1e98:	12 16       	cp	r1, r18
    1e9a:	13 06       	cpc	r1, r19
    1e9c:	e4 07       	cpc	r30, r20
    1e9e:	f5 07       	cpc	r31, r21
    1ea0:	98 f0       	brcs	.+38     	; 0x1ec8 <__fp_cmp+0x46>
    1ea2:	62 1b       	sub	r22, r18
    1ea4:	73 0b       	sbc	r23, r19
    1ea6:	84 0b       	sbc	r24, r20
    1ea8:	95 0b       	sbc	r25, r21
    1eaa:	39 f4       	brne	.+14     	; 0x1eba <__fp_cmp+0x38>
    1eac:	0a 26       	eor	r0, r26
    1eae:	61 f0       	breq	.+24     	; 0x1ec8 <__fp_cmp+0x46>
    1eb0:	23 2b       	or	r18, r19
    1eb2:	24 2b       	or	r18, r20
    1eb4:	25 2b       	or	r18, r21
    1eb6:	21 f4       	brne	.+8      	; 0x1ec0 <__fp_cmp+0x3e>
    1eb8:	08 95       	ret
    1eba:	0a 26       	eor	r0, r26
    1ebc:	09 f4       	brne	.+2      	; 0x1ec0 <__fp_cmp+0x3e>
    1ebe:	a1 40       	sbci	r26, 0x01	; 1
    1ec0:	a6 95       	lsr	r26
    1ec2:	8f ef       	ldi	r24, 0xFF	; 255
    1ec4:	81 1d       	adc	r24, r1
    1ec6:	81 1d       	adc	r24, r1
    1ec8:	08 95       	ret

00001eca <__fp_inf>:
    1eca:	97 f9       	bld	r25, 7
    1ecc:	9f 67       	ori	r25, 0x7F	; 127
    1ece:	80 e8       	ldi	r24, 0x80	; 128
    1ed0:	70 e0       	ldi	r23, 0x00	; 0
    1ed2:	60 e0       	ldi	r22, 0x00	; 0
    1ed4:	08 95       	ret

00001ed6 <__fp_nan>:
    1ed6:	9f ef       	ldi	r25, 0xFF	; 255
    1ed8:	80 ec       	ldi	r24, 0xC0	; 192
    1eda:	08 95       	ret

00001edc <__fp_pscA>:
    1edc:	00 24       	eor	r0, r0
    1ede:	0a 94       	dec	r0
    1ee0:	16 16       	cp	r1, r22
    1ee2:	17 06       	cpc	r1, r23
    1ee4:	18 06       	cpc	r1, r24
    1ee6:	09 06       	cpc	r0, r25
    1ee8:	08 95       	ret

00001eea <__fp_pscB>:
    1eea:	00 24       	eor	r0, r0
    1eec:	0a 94       	dec	r0
    1eee:	12 16       	cp	r1, r18
    1ef0:	13 06       	cpc	r1, r19
    1ef2:	14 06       	cpc	r1, r20
    1ef4:	05 06       	cpc	r0, r21
    1ef6:	08 95       	ret

00001ef8 <__fp_round>:
    1ef8:	09 2e       	mov	r0, r25
    1efa:	03 94       	inc	r0
    1efc:	00 0c       	add	r0, r0
    1efe:	11 f4       	brne	.+4      	; 0x1f04 <__fp_round+0xc>
    1f00:	88 23       	and	r24, r24
    1f02:	52 f0       	brmi	.+20     	; 0x1f18 <__fp_round+0x20>
    1f04:	bb 0f       	add	r27, r27
    1f06:	40 f4       	brcc	.+16     	; 0x1f18 <__fp_round+0x20>
    1f08:	bf 2b       	or	r27, r31
    1f0a:	11 f4       	brne	.+4      	; 0x1f10 <__fp_round+0x18>
    1f0c:	60 ff       	sbrs	r22, 0
    1f0e:	04 c0       	rjmp	.+8      	; 0x1f18 <__fp_round+0x20>
    1f10:	6f 5f       	subi	r22, 0xFF	; 255
    1f12:	7f 4f       	sbci	r23, 0xFF	; 255
    1f14:	8f 4f       	sbci	r24, 0xFF	; 255
    1f16:	9f 4f       	sbci	r25, 0xFF	; 255
    1f18:	08 95       	ret

00001f1a <__fp_split3>:
    1f1a:	57 fd       	sbrc	r21, 7
    1f1c:	90 58       	subi	r25, 0x80	; 128
    1f1e:	44 0f       	add	r20, r20
    1f20:	55 1f       	adc	r21, r21
    1f22:	59 f0       	breq	.+22     	; 0x1f3a <__fp_splitA+0x10>
    1f24:	5f 3f       	cpi	r21, 0xFF	; 255
    1f26:	71 f0       	breq	.+28     	; 0x1f44 <__fp_splitA+0x1a>
    1f28:	47 95       	ror	r20

00001f2a <__fp_splitA>:
    1f2a:	88 0f       	add	r24, r24
    1f2c:	97 fb       	bst	r25, 7
    1f2e:	99 1f       	adc	r25, r25
    1f30:	61 f0       	breq	.+24     	; 0x1f4a <__fp_splitA+0x20>
    1f32:	9f 3f       	cpi	r25, 0xFF	; 255
    1f34:	79 f0       	breq	.+30     	; 0x1f54 <__fp_splitA+0x2a>
    1f36:	87 95       	ror	r24
    1f38:	08 95       	ret
    1f3a:	12 16       	cp	r1, r18
    1f3c:	13 06       	cpc	r1, r19
    1f3e:	14 06       	cpc	r1, r20
    1f40:	55 1f       	adc	r21, r21
    1f42:	f2 cf       	rjmp	.-28     	; 0x1f28 <__fp_split3+0xe>
    1f44:	46 95       	lsr	r20
    1f46:	f1 df       	rcall	.-30     	; 0x1f2a <__fp_splitA>
    1f48:	08 c0       	rjmp	.+16     	; 0x1f5a <__fp_splitA+0x30>
    1f4a:	16 16       	cp	r1, r22
    1f4c:	17 06       	cpc	r1, r23
    1f4e:	18 06       	cpc	r1, r24
    1f50:	99 1f       	adc	r25, r25
    1f52:	f1 cf       	rjmp	.-30     	; 0x1f36 <__fp_splitA+0xc>
    1f54:	86 95       	lsr	r24
    1f56:	71 05       	cpc	r23, r1
    1f58:	61 05       	cpc	r22, r1
    1f5a:	08 94       	sec
    1f5c:	08 95       	ret

00001f5e <__fp_zero>:
    1f5e:	e8 94       	clt

00001f60 <__fp_szero>:
    1f60:	bb 27       	eor	r27, r27
    1f62:	66 27       	eor	r22, r22
    1f64:	77 27       	eor	r23, r23
    1f66:	cb 01       	movw	r24, r22
    1f68:	97 f9       	bld	r25, 7
    1f6a:	08 95       	ret

00001f6c <__gesf2>:
    1f6c:	8a df       	rcall	.-236    	; 0x1e82 <__fp_cmp>
    1f6e:	08 f4       	brcc	.+2      	; 0x1f72 <__gesf2+0x6>
    1f70:	8f ef       	ldi	r24, 0xFF	; 255
    1f72:	08 95       	ret

00001f74 <__mulsf3>:
    1f74:	0b d0       	rcall	.+22     	; 0x1f8c <__mulsf3x>
    1f76:	c0 cf       	rjmp	.-128    	; 0x1ef8 <__fp_round>
    1f78:	b1 df       	rcall	.-158    	; 0x1edc <__fp_pscA>
    1f7a:	28 f0       	brcs	.+10     	; 0x1f86 <__mulsf3+0x12>
    1f7c:	b6 df       	rcall	.-148    	; 0x1eea <__fp_pscB>
    1f7e:	18 f0       	brcs	.+6      	; 0x1f86 <__mulsf3+0x12>
    1f80:	95 23       	and	r25, r21
    1f82:	09 f0       	breq	.+2      	; 0x1f86 <__mulsf3+0x12>
    1f84:	a2 cf       	rjmp	.-188    	; 0x1eca <__fp_inf>
    1f86:	a7 cf       	rjmp	.-178    	; 0x1ed6 <__fp_nan>
    1f88:	11 24       	eor	r1, r1
    1f8a:	ea cf       	rjmp	.-44     	; 0x1f60 <__fp_szero>

00001f8c <__mulsf3x>:
    1f8c:	c6 df       	rcall	.-116    	; 0x1f1a <__fp_split3>
    1f8e:	a0 f3       	brcs	.-24     	; 0x1f78 <__mulsf3+0x4>

00001f90 <__mulsf3_pse>:
    1f90:	95 9f       	mul	r25, r21
    1f92:	d1 f3       	breq	.-12     	; 0x1f88 <__mulsf3+0x14>
    1f94:	95 0f       	add	r25, r21
    1f96:	50 e0       	ldi	r21, 0x00	; 0
    1f98:	55 1f       	adc	r21, r21
    1f9a:	62 9f       	mul	r22, r18
    1f9c:	f0 01       	movw	r30, r0
    1f9e:	72 9f       	mul	r23, r18
    1fa0:	bb 27       	eor	r27, r27
    1fa2:	f0 0d       	add	r31, r0
    1fa4:	b1 1d       	adc	r27, r1
    1fa6:	63 9f       	mul	r22, r19
    1fa8:	aa 27       	eor	r26, r26
    1faa:	f0 0d       	add	r31, r0
    1fac:	b1 1d       	adc	r27, r1
    1fae:	aa 1f       	adc	r26, r26
    1fb0:	64 9f       	mul	r22, r20
    1fb2:	66 27       	eor	r22, r22
    1fb4:	b0 0d       	add	r27, r0
    1fb6:	a1 1d       	adc	r26, r1
    1fb8:	66 1f       	adc	r22, r22
    1fba:	82 9f       	mul	r24, r18
    1fbc:	22 27       	eor	r18, r18
    1fbe:	b0 0d       	add	r27, r0
    1fc0:	a1 1d       	adc	r26, r1
    1fc2:	62 1f       	adc	r22, r18
    1fc4:	73 9f       	mul	r23, r19
    1fc6:	b0 0d       	add	r27, r0
    1fc8:	a1 1d       	adc	r26, r1
    1fca:	62 1f       	adc	r22, r18
    1fcc:	83 9f       	mul	r24, r19
    1fce:	a0 0d       	add	r26, r0
    1fd0:	61 1d       	adc	r22, r1
    1fd2:	22 1f       	adc	r18, r18
    1fd4:	74 9f       	mul	r23, r20
    1fd6:	33 27       	eor	r19, r19
    1fd8:	a0 0d       	add	r26, r0
    1fda:	61 1d       	adc	r22, r1
    1fdc:	23 1f       	adc	r18, r19
    1fde:	84 9f       	mul	r24, r20
    1fe0:	60 0d       	add	r22, r0
    1fe2:	21 1d       	adc	r18, r1
    1fe4:	82 2f       	mov	r24, r18
    1fe6:	76 2f       	mov	r23, r22
    1fe8:	6a 2f       	mov	r22, r26
    1fea:	11 24       	eor	r1, r1
    1fec:	9f 57       	subi	r25, 0x7F	; 127
    1fee:	50 40       	sbci	r21, 0x00	; 0
    1ff0:	8a f0       	brmi	.+34     	; 0x2014 <__mulsf3_pse+0x84>
    1ff2:	e1 f0       	breq	.+56     	; 0x202c <__mulsf3_pse+0x9c>
    1ff4:	88 23       	and	r24, r24
    1ff6:	4a f0       	brmi	.+18     	; 0x200a <__mulsf3_pse+0x7a>
    1ff8:	ee 0f       	add	r30, r30
    1ffa:	ff 1f       	adc	r31, r31
    1ffc:	bb 1f       	adc	r27, r27
    1ffe:	66 1f       	adc	r22, r22
    2000:	77 1f       	adc	r23, r23
    2002:	88 1f       	adc	r24, r24
    2004:	91 50       	subi	r25, 0x01	; 1
    2006:	50 40       	sbci	r21, 0x00	; 0
    2008:	a9 f7       	brne	.-22     	; 0x1ff4 <__mulsf3_pse+0x64>
    200a:	9e 3f       	cpi	r25, 0xFE	; 254
    200c:	51 05       	cpc	r21, r1
    200e:	70 f0       	brcs	.+28     	; 0x202c <__mulsf3_pse+0x9c>
    2010:	5c cf       	rjmp	.-328    	; 0x1eca <__fp_inf>
    2012:	a6 cf       	rjmp	.-180    	; 0x1f60 <__fp_szero>
    2014:	5f 3f       	cpi	r21, 0xFF	; 255
    2016:	ec f3       	brlt	.-6      	; 0x2012 <__mulsf3_pse+0x82>
    2018:	98 3e       	cpi	r25, 0xE8	; 232
    201a:	dc f3       	brlt	.-10     	; 0x2012 <__mulsf3_pse+0x82>
    201c:	86 95       	lsr	r24
    201e:	77 95       	ror	r23
    2020:	67 95       	ror	r22
    2022:	b7 95       	ror	r27
    2024:	f7 95       	ror	r31
    2026:	e7 95       	ror	r30
    2028:	9f 5f       	subi	r25, 0xFF	; 255
    202a:	c1 f7       	brne	.-16     	; 0x201c <__mulsf3_pse+0x8c>
    202c:	fe 2b       	or	r31, r30
    202e:	88 0f       	add	r24, r24
    2030:	91 1d       	adc	r25, r1
    2032:	96 95       	lsr	r25
    2034:	87 95       	ror	r24
    2036:	97 f9       	bld	r25, 7
    2038:	08 95       	ret

0000203a <vfprintf>:
    203a:	a3 e1       	ldi	r26, 0x13	; 19
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e3 e2       	ldi	r30, 0x23	; 35
    2040:	f0 e1       	ldi	r31, 0x10	; 16
    2042:	0c 94 ba 13 	jmp	0x2774	; 0x2774 <__prologue_saves__>
    2046:	7c 01       	movw	r14, r24
    2048:	1b 01       	movw	r2, r22
    204a:	6a 01       	movw	r12, r20
    204c:	fc 01       	movw	r30, r24
    204e:	17 82       	std	Z+7, r1	; 0x07
    2050:	16 82       	std	Z+6, r1	; 0x06
    2052:	83 81       	ldd	r24, Z+3	; 0x03
    2054:	81 ff       	sbrs	r24, 1
    2056:	66 c3       	rjmp	.+1740   	; 0x2724 <__stack+0x525>
    2058:	be 01       	movw	r22, r28
    205a:	6f 5f       	subi	r22, 0xFF	; 255
    205c:	7f 4f       	sbci	r23, 0xFF	; 255
    205e:	4b 01       	movw	r8, r22
    2060:	f7 01       	movw	r30, r14
    2062:	93 81       	ldd	r25, Z+3	; 0x03
    2064:	f1 01       	movw	r30, r2
    2066:	93 fd       	sbrc	r25, 3
    2068:	85 91       	lpm	r24, Z+
    206a:	93 ff       	sbrs	r25, 3
    206c:	81 91       	ld	r24, Z+
    206e:	1f 01       	movw	r2, r30
    2070:	88 23       	and	r24, r24
    2072:	09 f4       	brne	.+2      	; 0x2076 <vfprintf+0x3c>
    2074:	53 c3       	rjmp	.+1702   	; 0x271c <__stack+0x51d>
    2076:	85 32       	cpi	r24, 0x25	; 37
    2078:	39 f4       	brne	.+14     	; 0x2088 <vfprintf+0x4e>
    207a:	93 fd       	sbrc	r25, 3
    207c:	85 91       	lpm	r24, Z+
    207e:	93 ff       	sbrs	r25, 3
    2080:	81 91       	ld	r24, Z+
    2082:	1f 01       	movw	r2, r30
    2084:	85 32       	cpi	r24, 0x25	; 37
    2086:	39 f4       	brne	.+14     	; 0x2096 <vfprintf+0x5c>
    2088:	b7 01       	movw	r22, r14
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    2090:	56 01       	movw	r10, r12
    2092:	65 01       	movw	r12, r10
    2094:	e5 cf       	rjmp	.-54     	; 0x2060 <vfprintf+0x26>
    2096:	10 e0       	ldi	r17, 0x00	; 0
    2098:	51 2c       	mov	r5, r1
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	20 32       	cpi	r18, 0x20	; 32
    209e:	a0 f4       	brcc	.+40     	; 0x20c8 <vfprintf+0x8e>
    20a0:	8b 32       	cpi	r24, 0x2B	; 43
    20a2:	69 f0       	breq	.+26     	; 0x20be <vfprintf+0x84>
    20a4:	30 f4       	brcc	.+12     	; 0x20b2 <vfprintf+0x78>
    20a6:	80 32       	cpi	r24, 0x20	; 32
    20a8:	59 f0       	breq	.+22     	; 0x20c0 <vfprintf+0x86>
    20aa:	83 32       	cpi	r24, 0x23	; 35
    20ac:	69 f4       	brne	.+26     	; 0x20c8 <vfprintf+0x8e>
    20ae:	20 61       	ori	r18, 0x10	; 16
    20b0:	2c c0       	rjmp	.+88     	; 0x210a <vfprintf+0xd0>
    20b2:	8d 32       	cpi	r24, 0x2D	; 45
    20b4:	39 f0       	breq	.+14     	; 0x20c4 <vfprintf+0x8a>
    20b6:	80 33       	cpi	r24, 0x30	; 48
    20b8:	39 f4       	brne	.+14     	; 0x20c8 <vfprintf+0x8e>
    20ba:	21 60       	ori	r18, 0x01	; 1
    20bc:	26 c0       	rjmp	.+76     	; 0x210a <vfprintf+0xd0>
    20be:	22 60       	ori	r18, 0x02	; 2
    20c0:	24 60       	ori	r18, 0x04	; 4
    20c2:	23 c0       	rjmp	.+70     	; 0x210a <vfprintf+0xd0>
    20c4:	28 60       	ori	r18, 0x08	; 8
    20c6:	21 c0       	rjmp	.+66     	; 0x210a <vfprintf+0xd0>
    20c8:	27 fd       	sbrc	r18, 7
    20ca:	27 c0       	rjmp	.+78     	; 0x211a <vfprintf+0xe0>
    20cc:	30 ed       	ldi	r19, 0xD0	; 208
    20ce:	38 0f       	add	r19, r24
    20d0:	3a 30       	cpi	r19, 0x0A	; 10
    20d2:	78 f4       	brcc	.+30     	; 0x20f2 <vfprintf+0xb8>
    20d4:	26 ff       	sbrs	r18, 6
    20d6:	06 c0       	rjmp	.+12     	; 0x20e4 <vfprintf+0xaa>
    20d8:	fa e0       	ldi	r31, 0x0A	; 10
    20da:	1f 9f       	mul	r17, r31
    20dc:	30 0d       	add	r19, r0
    20de:	11 24       	eor	r1, r1
    20e0:	13 2f       	mov	r17, r19
    20e2:	13 c0       	rjmp	.+38     	; 0x210a <vfprintf+0xd0>
    20e4:	6a e0       	ldi	r22, 0x0A	; 10
    20e6:	56 9e       	mul	r5, r22
    20e8:	30 0d       	add	r19, r0
    20ea:	11 24       	eor	r1, r1
    20ec:	53 2e       	mov	r5, r19
    20ee:	20 62       	ori	r18, 0x20	; 32
    20f0:	0c c0       	rjmp	.+24     	; 0x210a <vfprintf+0xd0>
    20f2:	8e 32       	cpi	r24, 0x2E	; 46
    20f4:	21 f4       	brne	.+8      	; 0x20fe <vfprintf+0xc4>
    20f6:	26 fd       	sbrc	r18, 6
    20f8:	11 c3       	rjmp	.+1570   	; 0x271c <__stack+0x51d>
    20fa:	20 64       	ori	r18, 0x40	; 64
    20fc:	06 c0       	rjmp	.+12     	; 0x210a <vfprintf+0xd0>
    20fe:	8c 36       	cpi	r24, 0x6C	; 108
    2100:	11 f4       	brne	.+4      	; 0x2106 <vfprintf+0xcc>
    2102:	20 68       	ori	r18, 0x80	; 128
    2104:	02 c0       	rjmp	.+4      	; 0x210a <vfprintf+0xd0>
    2106:	88 36       	cpi	r24, 0x68	; 104
    2108:	41 f4       	brne	.+16     	; 0x211a <vfprintf+0xe0>
    210a:	f1 01       	movw	r30, r2
    210c:	93 fd       	sbrc	r25, 3
    210e:	85 91       	lpm	r24, Z+
    2110:	93 ff       	sbrs	r25, 3
    2112:	81 91       	ld	r24, Z+
    2114:	1f 01       	movw	r2, r30
    2116:	81 11       	cpse	r24, r1
    2118:	c1 cf       	rjmp	.-126    	; 0x209c <vfprintf+0x62>
    211a:	9b eb       	ldi	r25, 0xBB	; 187
    211c:	98 0f       	add	r25, r24
    211e:	93 30       	cpi	r25, 0x03	; 3
    2120:	18 f4       	brcc	.+6      	; 0x2128 <vfprintf+0xee>
    2122:	20 61       	ori	r18, 0x10	; 16
    2124:	80 5e       	subi	r24, 0xE0	; 224
    2126:	06 c0       	rjmp	.+12     	; 0x2134 <vfprintf+0xfa>
    2128:	9b e9       	ldi	r25, 0x9B	; 155
    212a:	98 0f       	add	r25, r24
    212c:	93 30       	cpi	r25, 0x03	; 3
    212e:	08 f0       	brcs	.+2      	; 0x2132 <vfprintf+0xf8>
    2130:	aa c1       	rjmp	.+852    	; 0x2486 <__stack+0x287>
    2132:	2f 7e       	andi	r18, 0xEF	; 239
    2134:	26 ff       	sbrs	r18, 6
    2136:	16 e0       	ldi	r17, 0x06	; 6
    2138:	2f 73       	andi	r18, 0x3F	; 63
    213a:	72 2e       	mov	r7, r18
    213c:	85 36       	cpi	r24, 0x65	; 101
    213e:	21 f4       	brne	.+8      	; 0x2148 <vfprintf+0x10e>
    2140:	f2 2f       	mov	r31, r18
    2142:	f0 64       	ori	r31, 0x40	; 64
    2144:	7f 2e       	mov	r7, r31
    2146:	08 c0       	rjmp	.+16     	; 0x2158 <vfprintf+0x11e>
    2148:	86 36       	cpi	r24, 0x66	; 102
    214a:	21 f4       	brne	.+8      	; 0x2154 <vfprintf+0x11a>
    214c:	62 2f       	mov	r22, r18
    214e:	60 68       	ori	r22, 0x80	; 128
    2150:	76 2e       	mov	r7, r22
    2152:	02 c0       	rjmp	.+4      	; 0x2158 <vfprintf+0x11e>
    2154:	11 11       	cpse	r17, r1
    2156:	11 50       	subi	r17, 0x01	; 1
    2158:	77 fe       	sbrs	r7, 7
    215a:	07 c0       	rjmp	.+14     	; 0x216a <vfprintf+0x130>
    215c:	1c 33       	cpi	r17, 0x3C	; 60
    215e:	48 f4       	brcc	.+18     	; 0x2172 <vfprintf+0x138>
    2160:	44 24       	eor	r4, r4
    2162:	43 94       	inc	r4
    2164:	41 0e       	add	r4, r17
    2166:	27 e0       	ldi	r18, 0x07	; 7
    2168:	0b c0       	rjmp	.+22     	; 0x2180 <vfprintf+0x146>
    216a:	18 30       	cpi	r17, 0x08	; 8
    216c:	30 f4       	brcc	.+12     	; 0x217a <vfprintf+0x140>
    216e:	21 2f       	mov	r18, r17
    2170:	06 c0       	rjmp	.+12     	; 0x217e <vfprintf+0x144>
    2172:	27 e0       	ldi	r18, 0x07	; 7
    2174:	4c e3       	ldi	r20, 0x3C	; 60
    2176:	44 2e       	mov	r4, r20
    2178:	03 c0       	rjmp	.+6      	; 0x2180 <vfprintf+0x146>
    217a:	27 e0       	ldi	r18, 0x07	; 7
    217c:	17 e0       	ldi	r17, 0x07	; 7
    217e:	41 2c       	mov	r4, r1
    2180:	56 01       	movw	r10, r12
    2182:	74 e0       	ldi	r23, 0x04	; 4
    2184:	a7 0e       	add	r10, r23
    2186:	b1 1c       	adc	r11, r1
    2188:	f6 01       	movw	r30, r12
    218a:	60 81       	ld	r22, Z
    218c:	71 81       	ldd	r23, Z+1	; 0x01
    218e:	82 81       	ldd	r24, Z+2	; 0x02
    2190:	93 81       	ldd	r25, Z+3	; 0x03
    2192:	04 2d       	mov	r16, r4
    2194:	a4 01       	movw	r20, r8
    2196:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__ftoa_engine>
    219a:	6c 01       	movw	r12, r24
    219c:	09 81       	ldd	r16, Y+1	; 0x01
    219e:	00 ff       	sbrs	r16, 0
    21a0:	02 c0       	rjmp	.+4      	; 0x21a6 <vfprintf+0x16c>
    21a2:	03 ff       	sbrs	r16, 3
    21a4:	06 c0       	rjmp	.+12     	; 0x21b2 <vfprintf+0x178>
    21a6:	71 fc       	sbrc	r7, 1
    21a8:	07 c0       	rjmp	.+14     	; 0x21b8 <vfprintf+0x17e>
    21aa:	72 fc       	sbrc	r7, 2
    21ac:	08 c0       	rjmp	.+16     	; 0x21be <vfprintf+0x184>
    21ae:	61 2c       	mov	r6, r1
    21b0:	08 c0       	rjmp	.+16     	; 0x21c2 <vfprintf+0x188>
    21b2:	3d e2       	ldi	r19, 0x2D	; 45
    21b4:	63 2e       	mov	r6, r19
    21b6:	05 c0       	rjmp	.+10     	; 0x21c2 <vfprintf+0x188>
    21b8:	2b e2       	ldi	r18, 0x2B	; 43
    21ba:	62 2e       	mov	r6, r18
    21bc:	02 c0       	rjmp	.+4      	; 0x21c2 <vfprintf+0x188>
    21be:	90 e2       	ldi	r25, 0x20	; 32
    21c0:	69 2e       	mov	r6, r25
    21c2:	80 2f       	mov	r24, r16
    21c4:	8c 70       	andi	r24, 0x0C	; 12
    21c6:	99 f1       	breq	.+102    	; 0x222e <__stack+0x2f>
    21c8:	66 20       	and	r6, r6
    21ca:	11 f0       	breq	.+4      	; 0x21d0 <vfprintf+0x196>
    21cc:	84 e0       	ldi	r24, 0x04	; 4
    21ce:	01 c0       	rjmp	.+2      	; 0x21d2 <vfprintf+0x198>
    21d0:	83 e0       	ldi	r24, 0x03	; 3
    21d2:	85 15       	cp	r24, r5
    21d4:	10 f0       	brcs	.+4      	; 0x21da <vfprintf+0x1a0>
    21d6:	51 2c       	mov	r5, r1
    21d8:	0b c0       	rjmp	.+22     	; 0x21f0 <vfprintf+0x1b6>
    21da:	58 1a       	sub	r5, r24
    21dc:	73 fc       	sbrc	r7, 3
    21de:	08 c0       	rjmp	.+16     	; 0x21f0 <vfprintf+0x1b6>
    21e0:	b7 01       	movw	r22, r14
    21e2:	80 e2       	ldi	r24, 0x20	; 32
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    21ea:	5a 94       	dec	r5
    21ec:	c9 f7       	brne	.-14     	; 0x21e0 <vfprintf+0x1a6>
    21ee:	f3 cf       	rjmp	.-26     	; 0x21d6 <vfprintf+0x19c>
    21f0:	66 20       	and	r6, r6
    21f2:	29 f0       	breq	.+10     	; 0x21fe <vfprintf+0x1c4>
    21f4:	b7 01       	movw	r22, r14
    21f6:	86 2d       	mov	r24, r6
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    21fe:	03 fd       	sbrc	r16, 3
    2200:	03 c0       	rjmp	.+6      	; 0x2208 <__stack+0x9>
    2202:	08 e3       	ldi	r16, 0x38	; 56
    2204:	11 e0       	ldi	r17, 0x01	; 1
    2206:	02 c0       	rjmp	.+4      	; 0x220c <__stack+0xd>
    2208:	04 e3       	ldi	r16, 0x34	; 52
    220a:	11 e0       	ldi	r17, 0x01	; 1
    220c:	f7 2d       	mov	r31, r7
    220e:	f0 71       	andi	r31, 0x10	; 16
    2210:	7f 2e       	mov	r7, r31
    2212:	f8 01       	movw	r30, r16
    2214:	84 91       	lpm	r24, Z
    2216:	88 23       	and	r24, r24
    2218:	09 f4       	brne	.+2      	; 0x221c <__stack+0x1d>
    221a:	76 c2       	rjmp	.+1260   	; 0x2708 <__stack+0x509>
    221c:	71 10       	cpse	r7, r1
    221e:	80 52       	subi	r24, 0x20	; 32
    2220:	b7 01       	movw	r22, r14
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    2228:	0f 5f       	subi	r16, 0xFF	; 255
    222a:	1f 4f       	sbci	r17, 0xFF	; 255
    222c:	f2 cf       	rjmp	.-28     	; 0x2212 <__stack+0x13>
    222e:	77 fe       	sbrs	r7, 7
    2230:	0f c0       	rjmp	.+30     	; 0x2250 <__stack+0x51>
    2232:	4c 0c       	add	r4, r12
    2234:	04 ff       	sbrs	r16, 4
    2236:	04 c0       	rjmp	.+8      	; 0x2240 <__stack+0x41>
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	81 33       	cpi	r24, 0x31	; 49
    223c:	09 f4       	brne	.+2      	; 0x2240 <__stack+0x41>
    223e:	4a 94       	dec	r4
    2240:	14 14       	cp	r1, r4
    2242:	74 f5       	brge	.+92     	; 0x22a0 <__stack+0xa1>
    2244:	f8 e0       	ldi	r31, 0x08	; 8
    2246:	f4 15       	cp	r31, r4
    2248:	78 f5       	brcc	.+94     	; 0x22a8 <__stack+0xa9>
    224a:	88 e0       	ldi	r24, 0x08	; 8
    224c:	48 2e       	mov	r4, r24
    224e:	2c c0       	rjmp	.+88     	; 0x22a8 <__stack+0xa9>
    2250:	76 fc       	sbrc	r7, 6
    2252:	2a c0       	rjmp	.+84     	; 0x22a8 <__stack+0xa9>
    2254:	81 2f       	mov	r24, r17
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	8c 15       	cp	r24, r12
    225a:	9d 05       	cpc	r25, r13
    225c:	9c f0       	brlt	.+38     	; 0x2284 <__stack+0x85>
    225e:	6c ef       	ldi	r22, 0xFC	; 252
    2260:	c6 16       	cp	r12, r22
    2262:	6f ef       	ldi	r22, 0xFF	; 255
    2264:	d6 06       	cpc	r13, r22
    2266:	74 f0       	brlt	.+28     	; 0x2284 <__stack+0x85>
    2268:	77 2d       	mov	r23, r7
    226a:	70 68       	ori	r23, 0x80	; 128
    226c:	77 2e       	mov	r7, r23
    226e:	0a c0       	rjmp	.+20     	; 0x2284 <__stack+0x85>
    2270:	e2 e0       	ldi	r30, 0x02	; 2
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	ec 0f       	add	r30, r28
    2276:	fd 1f       	adc	r31, r29
    2278:	e1 0f       	add	r30, r17
    227a:	f1 1d       	adc	r31, r1
    227c:	80 81       	ld	r24, Z
    227e:	80 33       	cpi	r24, 0x30	; 48
    2280:	19 f4       	brne	.+6      	; 0x2288 <__stack+0x89>
    2282:	11 50       	subi	r17, 0x01	; 1
    2284:	11 11       	cpse	r17, r1
    2286:	f4 cf       	rjmp	.-24     	; 0x2270 <__stack+0x71>
    2288:	77 fe       	sbrs	r7, 7
    228a:	0e c0       	rjmp	.+28     	; 0x22a8 <__stack+0xa9>
    228c:	44 24       	eor	r4, r4
    228e:	43 94       	inc	r4
    2290:	41 0e       	add	r4, r17
    2292:	81 2f       	mov	r24, r17
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	c8 16       	cp	r12, r24
    2298:	d9 06       	cpc	r13, r25
    229a:	2c f4       	brge	.+10     	; 0x22a6 <__stack+0xa7>
    229c:	1c 19       	sub	r17, r12
    229e:	04 c0       	rjmp	.+8      	; 0x22a8 <__stack+0xa9>
    22a0:	44 24       	eor	r4, r4
    22a2:	43 94       	inc	r4
    22a4:	01 c0       	rjmp	.+2      	; 0x22a8 <__stack+0xa9>
    22a6:	10 e0       	ldi	r17, 0x00	; 0
    22a8:	77 fe       	sbrs	r7, 7
    22aa:	07 c0       	rjmp	.+14     	; 0x22ba <__stack+0xbb>
    22ac:	1c 14       	cp	r1, r12
    22ae:	1d 04       	cpc	r1, r13
    22b0:	3c f4       	brge	.+14     	; 0x22c0 <__stack+0xc1>
    22b2:	96 01       	movw	r18, r12
    22b4:	2f 5f       	subi	r18, 0xFF	; 255
    22b6:	3f 4f       	sbci	r19, 0xFF	; 255
    22b8:	05 c0       	rjmp	.+10     	; 0x22c4 <__stack+0xc5>
    22ba:	25 e0       	ldi	r18, 0x05	; 5
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	02 c0       	rjmp	.+4      	; 0x22c4 <__stack+0xc5>
    22c0:	21 e0       	ldi	r18, 0x01	; 1
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	66 20       	and	r6, r6
    22c6:	11 f0       	breq	.+4      	; 0x22cc <__stack+0xcd>
    22c8:	2f 5f       	subi	r18, 0xFF	; 255
    22ca:	3f 4f       	sbci	r19, 0xFF	; 255
    22cc:	11 23       	and	r17, r17
    22ce:	31 f0       	breq	.+12     	; 0x22dc <__stack+0xdd>
    22d0:	41 2f       	mov	r20, r17
    22d2:	50 e0       	ldi	r21, 0x00	; 0
    22d4:	4f 5f       	subi	r20, 0xFF	; 255
    22d6:	5f 4f       	sbci	r21, 0xFF	; 255
    22d8:	24 0f       	add	r18, r20
    22da:	35 1f       	adc	r19, r21
    22dc:	45 2d       	mov	r20, r5
    22de:	50 e0       	ldi	r21, 0x00	; 0
    22e0:	24 17       	cp	r18, r20
    22e2:	35 07       	cpc	r19, r21
    22e4:	14 f4       	brge	.+4      	; 0x22ea <__stack+0xeb>
    22e6:	52 1a       	sub	r5, r18
    22e8:	01 c0       	rjmp	.+2      	; 0x22ec <__stack+0xed>
    22ea:	51 2c       	mov	r5, r1
    22ec:	87 2d       	mov	r24, r7
    22ee:	89 70       	andi	r24, 0x09	; 9
    22f0:	49 f4       	brne	.+18     	; 0x2304 <__stack+0x105>
    22f2:	55 20       	and	r5, r5
    22f4:	39 f0       	breq	.+14     	; 0x2304 <__stack+0x105>
    22f6:	b7 01       	movw	r22, r14
    22f8:	80 e2       	ldi	r24, 0x20	; 32
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    2300:	5a 94       	dec	r5
    2302:	f7 cf       	rjmp	.-18     	; 0x22f2 <__stack+0xf3>
    2304:	66 20       	and	r6, r6
    2306:	29 f0       	breq	.+10     	; 0x2312 <__stack+0x113>
    2308:	b7 01       	movw	r22, r14
    230a:	86 2d       	mov	r24, r6
    230c:	90 e0       	ldi	r25, 0x00	; 0
    230e:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    2312:	73 fc       	sbrc	r7, 3
    2314:	09 c0       	rjmp	.+18     	; 0x2328 <__stack+0x129>
    2316:	55 20       	and	r5, r5
    2318:	39 f0       	breq	.+14     	; 0x2328 <__stack+0x129>
    231a:	b7 01       	movw	r22, r14
    231c:	80 e3       	ldi	r24, 0x30	; 48
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    2324:	5a 94       	dec	r5
    2326:	f7 cf       	rjmp	.-18     	; 0x2316 <__stack+0x117>
    2328:	77 fe       	sbrs	r7, 7
    232a:	5f c0       	rjmp	.+190    	; 0x23ea <__stack+0x1eb>
    232c:	9c 2d       	mov	r25, r12
    232e:	8d 2d       	mov	r24, r13
    2330:	d7 fe       	sbrs	r13, 7
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <__stack+0x139>
    2334:	90 e0       	ldi	r25, 0x00	; 0
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	69 2e       	mov	r6, r25
    233a:	78 2e       	mov	r7, r24
    233c:	40 e0       	ldi	r20, 0x00	; 0
    233e:	50 e0       	ldi	r21, 0x00	; 0
    2340:	c6 01       	movw	r24, r12
    2342:	84 19       	sub	r24, r4
    2344:	91 09       	sbc	r25, r1
    2346:	9d 87       	std	Y+13, r25	; 0x0d
    2348:	8c 87       	std	Y+12, r24	; 0x0c
    234a:	96 01       	movw	r18, r12
    234c:	26 19       	sub	r18, r6
    234e:	37 09       	sbc	r19, r7
    2350:	28 0d       	add	r18, r8
    2352:	39 1d       	adc	r19, r9
    2354:	81 2f       	mov	r24, r17
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	ee 27       	eor	r30, r30
    235a:	ff 27       	eor	r31, r31
    235c:	e8 1b       	sub	r30, r24
    235e:	f9 0b       	sbc	r31, r25
    2360:	ff 87       	std	Y+15, r31	; 0x0f
    2362:	ee 87       	std	Y+14, r30	; 0x0e
    2364:	ff ef       	ldi	r31, 0xFF	; 255
    2366:	6f 16       	cp	r6, r31
    2368:	7f 06       	cpc	r7, r31
    236a:	69 f4       	brne	.+26     	; 0x2386 <__stack+0x187>
    236c:	b7 01       	movw	r22, r14
    236e:	8e e2       	ldi	r24, 0x2E	; 46
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	2b 8b       	std	Y+19, r18	; 0x13
    2374:	3a 8b       	std	Y+18, r19	; 0x12
    2376:	48 8b       	std	Y+16, r20	; 0x10
    2378:	59 8b       	std	Y+17, r21	; 0x11
    237a:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    237e:	59 89       	ldd	r21, Y+17	; 0x11
    2380:	48 89       	ldd	r20, Y+16	; 0x10
    2382:	3a 89       	ldd	r19, Y+18	; 0x12
    2384:	2b 89       	ldd	r18, Y+19	; 0x13
    2386:	c6 14       	cp	r12, r6
    2388:	d7 04       	cpc	r13, r7
    238a:	54 f0       	brlt	.+20     	; 0x23a0 <__stack+0x1a1>
    238c:	6c 85       	ldd	r22, Y+12	; 0x0c
    238e:	7d 85       	ldd	r23, Y+13	; 0x0d
    2390:	66 15       	cp	r22, r6
    2392:	77 05       	cpc	r23, r7
    2394:	2c f4       	brge	.+10     	; 0x23a0 <__stack+0x1a1>
    2396:	f9 01       	movw	r30, r18
    2398:	e4 0f       	add	r30, r20
    239a:	f5 1f       	adc	r31, r21
    239c:	81 81       	ldd	r24, Z+1	; 0x01
    239e:	01 c0       	rjmp	.+2      	; 0x23a2 <__stack+0x1a3>
    23a0:	80 e3       	ldi	r24, 0x30	; 48
    23a2:	71 e0       	ldi	r23, 0x01	; 1
    23a4:	67 1a       	sub	r6, r23
    23a6:	71 08       	sbc	r7, r1
    23a8:	4f 5f       	subi	r20, 0xFF	; 255
    23aa:	5f 4f       	sbci	r21, 0xFF	; 255
    23ac:	ee 85       	ldd	r30, Y+14	; 0x0e
    23ae:	ff 85       	ldd	r31, Y+15	; 0x0f
    23b0:	6e 16       	cp	r6, r30
    23b2:	7f 06       	cpc	r7, r31
    23b4:	6c f0       	brlt	.+26     	; 0x23d0 <__stack+0x1d1>
    23b6:	b7 01       	movw	r22, r14
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	2b 8b       	std	Y+19, r18	; 0x13
    23bc:	3a 8b       	std	Y+18, r19	; 0x12
    23be:	48 8b       	std	Y+16, r20	; 0x10
    23c0:	59 8b       	std	Y+17, r21	; 0x11
    23c2:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    23c6:	2b 89       	ldd	r18, Y+19	; 0x13
    23c8:	3a 89       	ldd	r19, Y+18	; 0x12
    23ca:	48 89       	ldd	r20, Y+16	; 0x10
    23cc:	59 89       	ldd	r21, Y+17	; 0x11
    23ce:	ca cf       	rjmp	.-108    	; 0x2364 <__stack+0x165>
    23d0:	6c 14       	cp	r6, r12
    23d2:	7d 04       	cpc	r7, r13
    23d4:	39 f4       	brne	.+14     	; 0x23e4 <__stack+0x1e5>
    23d6:	9a 81       	ldd	r25, Y+2	; 0x02
    23d8:	96 33       	cpi	r25, 0x36	; 54
    23da:	18 f4       	brcc	.+6      	; 0x23e2 <__stack+0x1e3>
    23dc:	95 33       	cpi	r25, 0x35	; 53
    23de:	11 f4       	brne	.+4      	; 0x23e4 <__stack+0x1e5>
    23e0:	04 ff       	sbrs	r16, 4
    23e2:	81 e3       	ldi	r24, 0x31	; 49
    23e4:	b7 01       	movw	r22, r14
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	4b c0       	rjmp	.+150    	; 0x2480 <__stack+0x281>
    23ea:	8a 81       	ldd	r24, Y+2	; 0x02
    23ec:	81 33       	cpi	r24, 0x31	; 49
    23ee:	09 f0       	breq	.+2      	; 0x23f2 <__stack+0x1f3>
    23f0:	0f 7e       	andi	r16, 0xEF	; 239
    23f2:	b7 01       	movw	r22, r14
    23f4:	90 e0       	ldi	r25, 0x00	; 0
    23f6:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    23fa:	11 11       	cpse	r17, r1
    23fc:	05 c0       	rjmp	.+10     	; 0x2408 <__stack+0x209>
    23fe:	74 fe       	sbrs	r7, 4
    2400:	18 c0       	rjmp	.+48     	; 0x2432 <__stack+0x233>
    2402:	85 e4       	ldi	r24, 0x45	; 69
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	17 c0       	rjmp	.+46     	; 0x2436 <__stack+0x237>
    2408:	b7 01       	movw	r22, r14
    240a:	8e e2       	ldi	r24, 0x2E	; 46
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    2412:	82 e0       	ldi	r24, 0x02	; 2
    2414:	66 24       	eor	r6, r6
    2416:	63 94       	inc	r6
    2418:	68 0e       	add	r6, r24
    241a:	f4 01       	movw	r30, r8
    241c:	e8 0f       	add	r30, r24
    241e:	f1 1d       	adc	r31, r1
    2420:	80 81       	ld	r24, Z
    2422:	b7 01       	movw	r22, r14
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    242a:	11 50       	subi	r17, 0x01	; 1
    242c:	41 f3       	breq	.-48     	; 0x23fe <__stack+0x1ff>
    242e:	86 2d       	mov	r24, r6
    2430:	f1 cf       	rjmp	.-30     	; 0x2414 <__stack+0x215>
    2432:	85 e6       	ldi	r24, 0x65	; 101
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	b7 01       	movw	r22, r14
    2438:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    243c:	d7 fc       	sbrc	r13, 7
    243e:	05 c0       	rjmp	.+10     	; 0x244a <__stack+0x24b>
    2440:	c1 14       	cp	r12, r1
    2442:	d1 04       	cpc	r13, r1
    2444:	39 f4       	brne	.+14     	; 0x2454 <__stack+0x255>
    2446:	04 ff       	sbrs	r16, 4
    2448:	05 c0       	rjmp	.+10     	; 0x2454 <__stack+0x255>
    244a:	d1 94       	neg	r13
    244c:	c1 94       	neg	r12
    244e:	d1 08       	sbc	r13, r1
    2450:	8d e2       	ldi	r24, 0x2D	; 45
    2452:	01 c0       	rjmp	.+2      	; 0x2456 <__stack+0x257>
    2454:	8b e2       	ldi	r24, 0x2B	; 43
    2456:	b7 01       	movw	r22, r14
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    245e:	80 e3       	ldi	r24, 0x30	; 48
    2460:	6a e0       	ldi	r22, 0x0A	; 10
    2462:	c6 16       	cp	r12, r22
    2464:	d1 04       	cpc	r13, r1
    2466:	2c f0       	brlt	.+10     	; 0x2472 <__stack+0x273>
    2468:	8f 5f       	subi	r24, 0xFF	; 255
    246a:	fa e0       	ldi	r31, 0x0A	; 10
    246c:	cf 1a       	sub	r12, r31
    246e:	d1 08       	sbc	r13, r1
    2470:	f7 cf       	rjmp	.-18     	; 0x2460 <__stack+0x261>
    2472:	b7 01       	movw	r22, r14
    2474:	90 e0       	ldi	r25, 0x00	; 0
    2476:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    247a:	b7 01       	movw	r22, r14
    247c:	c6 01       	movw	r24, r12
    247e:	c0 96       	adiw	r24, 0x30	; 48
    2480:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    2484:	41 c1       	rjmp	.+642    	; 0x2708 <__stack+0x509>
    2486:	83 36       	cpi	r24, 0x63	; 99
    2488:	31 f0       	breq	.+12     	; 0x2496 <__stack+0x297>
    248a:	83 37       	cpi	r24, 0x73	; 115
    248c:	79 f0       	breq	.+30     	; 0x24ac <__stack+0x2ad>
    248e:	83 35       	cpi	r24, 0x53	; 83
    2490:	09 f0       	breq	.+2      	; 0x2494 <__stack+0x295>
    2492:	58 c0       	rjmp	.+176    	; 0x2544 <__stack+0x345>
    2494:	21 c0       	rjmp	.+66     	; 0x24d8 <__stack+0x2d9>
    2496:	56 01       	movw	r10, r12
    2498:	72 e0       	ldi	r23, 0x02	; 2
    249a:	a7 0e       	add	r10, r23
    249c:	b1 1c       	adc	r11, r1
    249e:	f6 01       	movw	r30, r12
    24a0:	80 81       	ld	r24, Z
    24a2:	89 83       	std	Y+1, r24	; 0x01
    24a4:	01 e0       	ldi	r16, 0x01	; 1
    24a6:	10 e0       	ldi	r17, 0x00	; 0
    24a8:	64 01       	movw	r12, r8
    24aa:	14 c0       	rjmp	.+40     	; 0x24d4 <__stack+0x2d5>
    24ac:	56 01       	movw	r10, r12
    24ae:	f2 e0       	ldi	r31, 0x02	; 2
    24b0:	af 0e       	add	r10, r31
    24b2:	b1 1c       	adc	r11, r1
    24b4:	f6 01       	movw	r30, r12
    24b6:	c0 80       	ld	r12, Z
    24b8:	d1 80       	ldd	r13, Z+1	; 0x01
    24ba:	26 ff       	sbrs	r18, 6
    24bc:	03 c0       	rjmp	.+6      	; 0x24c4 <__stack+0x2c5>
    24be:	61 2f       	mov	r22, r17
    24c0:	70 e0       	ldi	r23, 0x00	; 0
    24c2:	02 c0       	rjmp	.+4      	; 0x24c8 <__stack+0x2c9>
    24c4:	6f ef       	ldi	r22, 0xFF	; 255
    24c6:	7f ef       	ldi	r23, 0xFF	; 255
    24c8:	c6 01       	movw	r24, r12
    24ca:	2b 8b       	std	Y+19, r18	; 0x13
    24cc:	0e 94 fb 15 	call	0x2bf6	; 0x2bf6 <strnlen>
    24d0:	8c 01       	movw	r16, r24
    24d2:	2b 89       	ldd	r18, Y+19	; 0x13
    24d4:	2f 77       	andi	r18, 0x7F	; 127
    24d6:	15 c0       	rjmp	.+42     	; 0x2502 <__stack+0x303>
    24d8:	56 01       	movw	r10, r12
    24da:	f2 e0       	ldi	r31, 0x02	; 2
    24dc:	af 0e       	add	r10, r31
    24de:	b1 1c       	adc	r11, r1
    24e0:	f6 01       	movw	r30, r12
    24e2:	c0 80       	ld	r12, Z
    24e4:	d1 80       	ldd	r13, Z+1	; 0x01
    24e6:	26 ff       	sbrs	r18, 6
    24e8:	03 c0       	rjmp	.+6      	; 0x24f0 <__stack+0x2f1>
    24ea:	61 2f       	mov	r22, r17
    24ec:	70 e0       	ldi	r23, 0x00	; 0
    24ee:	02 c0       	rjmp	.+4      	; 0x24f4 <__stack+0x2f5>
    24f0:	6f ef       	ldi	r22, 0xFF	; 255
    24f2:	7f ef       	ldi	r23, 0xFF	; 255
    24f4:	c6 01       	movw	r24, r12
    24f6:	2b 8b       	std	Y+19, r18	; 0x13
    24f8:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <strnlen_P>
    24fc:	8c 01       	movw	r16, r24
    24fe:	2b 89       	ldd	r18, Y+19	; 0x13
    2500:	20 68       	ori	r18, 0x80	; 128
    2502:	72 2e       	mov	r7, r18
    2504:	23 fd       	sbrc	r18, 3
    2506:	1a c0       	rjmp	.+52     	; 0x253c <__stack+0x33d>
    2508:	85 2d       	mov	r24, r5
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	08 17       	cp	r16, r24
    250e:	19 07       	cpc	r17, r25
    2510:	a8 f4       	brcc	.+42     	; 0x253c <__stack+0x33d>
    2512:	b7 01       	movw	r22, r14
    2514:	80 e2       	ldi	r24, 0x20	; 32
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    251c:	5a 94       	dec	r5
    251e:	f4 cf       	rjmp	.-24     	; 0x2508 <__stack+0x309>
    2520:	f6 01       	movw	r30, r12
    2522:	77 fc       	sbrc	r7, 7
    2524:	85 91       	lpm	r24, Z+
    2526:	77 fe       	sbrs	r7, 7
    2528:	81 91       	ld	r24, Z+
    252a:	6f 01       	movw	r12, r30
    252c:	b7 01       	movw	r22, r14
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    2534:	51 10       	cpse	r5, r1
    2536:	5a 94       	dec	r5
    2538:	01 50       	subi	r16, 0x01	; 1
    253a:	11 09       	sbc	r17, r1
    253c:	01 15       	cp	r16, r1
    253e:	11 05       	cpc	r17, r1
    2540:	79 f7       	brne	.-34     	; 0x2520 <__stack+0x321>
    2542:	e2 c0       	rjmp	.+452    	; 0x2708 <__stack+0x509>
    2544:	84 36       	cpi	r24, 0x64	; 100
    2546:	11 f0       	breq	.+4      	; 0x254c <__stack+0x34d>
    2548:	89 36       	cpi	r24, 0x69	; 105
    254a:	51 f5       	brne	.+84     	; 0x25a0 <__stack+0x3a1>
    254c:	56 01       	movw	r10, r12
    254e:	27 ff       	sbrs	r18, 7
    2550:	09 c0       	rjmp	.+18     	; 0x2564 <__stack+0x365>
    2552:	f4 e0       	ldi	r31, 0x04	; 4
    2554:	af 0e       	add	r10, r31
    2556:	b1 1c       	adc	r11, r1
    2558:	f6 01       	movw	r30, r12
    255a:	60 81       	ld	r22, Z
    255c:	71 81       	ldd	r23, Z+1	; 0x01
    255e:	82 81       	ldd	r24, Z+2	; 0x02
    2560:	93 81       	ldd	r25, Z+3	; 0x03
    2562:	0a c0       	rjmp	.+20     	; 0x2578 <__stack+0x379>
    2564:	f2 e0       	ldi	r31, 0x02	; 2
    2566:	af 0e       	add	r10, r31
    2568:	b1 1c       	adc	r11, r1
    256a:	f6 01       	movw	r30, r12
    256c:	60 81       	ld	r22, Z
    256e:	71 81       	ldd	r23, Z+1	; 0x01
    2570:	88 27       	eor	r24, r24
    2572:	77 fd       	sbrc	r23, 7
    2574:	80 95       	com	r24
    2576:	98 2f       	mov	r25, r24
    2578:	02 2f       	mov	r16, r18
    257a:	0f 76       	andi	r16, 0x6F	; 111
    257c:	97 ff       	sbrs	r25, 7
    257e:	08 c0       	rjmp	.+16     	; 0x2590 <__stack+0x391>
    2580:	90 95       	com	r25
    2582:	80 95       	com	r24
    2584:	70 95       	com	r23
    2586:	61 95       	neg	r22
    2588:	7f 4f       	sbci	r23, 0xFF	; 255
    258a:	8f 4f       	sbci	r24, 0xFF	; 255
    258c:	9f 4f       	sbci	r25, 0xFF	; 255
    258e:	00 68       	ori	r16, 0x80	; 128
    2590:	2a e0       	ldi	r18, 0x0A	; 10
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	a4 01       	movw	r20, r8
    2596:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <__ultoa_invert>
    259a:	c8 2e       	mov	r12, r24
    259c:	c8 18       	sub	r12, r8
    259e:	3e c0       	rjmp	.+124    	; 0x261c <__stack+0x41d>
    25a0:	02 2f       	mov	r16, r18
    25a2:	85 37       	cpi	r24, 0x75	; 117
    25a4:	21 f4       	brne	.+8      	; 0x25ae <__stack+0x3af>
    25a6:	0f 7e       	andi	r16, 0xEF	; 239
    25a8:	2a e0       	ldi	r18, 0x0A	; 10
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	1d c0       	rjmp	.+58     	; 0x25e8 <__stack+0x3e9>
    25ae:	09 7f       	andi	r16, 0xF9	; 249
    25b0:	8f 36       	cpi	r24, 0x6F	; 111
    25b2:	91 f0       	breq	.+36     	; 0x25d8 <__stack+0x3d9>
    25b4:	18 f4       	brcc	.+6      	; 0x25bc <__stack+0x3bd>
    25b6:	88 35       	cpi	r24, 0x58	; 88
    25b8:	59 f0       	breq	.+22     	; 0x25d0 <__stack+0x3d1>
    25ba:	b0 c0       	rjmp	.+352    	; 0x271c <__stack+0x51d>
    25bc:	80 37       	cpi	r24, 0x70	; 112
    25be:	19 f0       	breq	.+6      	; 0x25c6 <__stack+0x3c7>
    25c0:	88 37       	cpi	r24, 0x78	; 120
    25c2:	11 f0       	breq	.+4      	; 0x25c8 <__stack+0x3c9>
    25c4:	ab c0       	rjmp	.+342    	; 0x271c <__stack+0x51d>
    25c6:	00 61       	ori	r16, 0x10	; 16
    25c8:	04 ff       	sbrs	r16, 4
    25ca:	09 c0       	rjmp	.+18     	; 0x25de <__stack+0x3df>
    25cc:	04 60       	ori	r16, 0x04	; 4
    25ce:	07 c0       	rjmp	.+14     	; 0x25de <__stack+0x3df>
    25d0:	24 ff       	sbrs	r18, 4
    25d2:	08 c0       	rjmp	.+16     	; 0x25e4 <__stack+0x3e5>
    25d4:	06 60       	ori	r16, 0x06	; 6
    25d6:	06 c0       	rjmp	.+12     	; 0x25e4 <__stack+0x3e5>
    25d8:	28 e0       	ldi	r18, 0x08	; 8
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	05 c0       	rjmp	.+10     	; 0x25e8 <__stack+0x3e9>
    25de:	20 e1       	ldi	r18, 0x10	; 16
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	02 c0       	rjmp	.+4      	; 0x25e8 <__stack+0x3e9>
    25e4:	20 e1       	ldi	r18, 0x10	; 16
    25e6:	32 e0       	ldi	r19, 0x02	; 2
    25e8:	56 01       	movw	r10, r12
    25ea:	07 ff       	sbrs	r16, 7
    25ec:	09 c0       	rjmp	.+18     	; 0x2600 <__stack+0x401>
    25ee:	f4 e0       	ldi	r31, 0x04	; 4
    25f0:	af 0e       	add	r10, r31
    25f2:	b1 1c       	adc	r11, r1
    25f4:	f6 01       	movw	r30, r12
    25f6:	60 81       	ld	r22, Z
    25f8:	71 81       	ldd	r23, Z+1	; 0x01
    25fa:	82 81       	ldd	r24, Z+2	; 0x02
    25fc:	93 81       	ldd	r25, Z+3	; 0x03
    25fe:	08 c0       	rjmp	.+16     	; 0x2610 <__stack+0x411>
    2600:	f2 e0       	ldi	r31, 0x02	; 2
    2602:	af 0e       	add	r10, r31
    2604:	b1 1c       	adc	r11, r1
    2606:	f6 01       	movw	r30, r12
    2608:	60 81       	ld	r22, Z
    260a:	71 81       	ldd	r23, Z+1	; 0x01
    260c:	80 e0       	ldi	r24, 0x00	; 0
    260e:	90 e0       	ldi	r25, 0x00	; 0
    2610:	a4 01       	movw	r20, r8
    2612:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <__ultoa_invert>
    2616:	c8 2e       	mov	r12, r24
    2618:	c8 18       	sub	r12, r8
    261a:	0f 77       	andi	r16, 0x7F	; 127
    261c:	06 ff       	sbrs	r16, 6
    261e:	0b c0       	rjmp	.+22     	; 0x2636 <__stack+0x437>
    2620:	20 2f       	mov	r18, r16
    2622:	2e 7f       	andi	r18, 0xFE	; 254
    2624:	c1 16       	cp	r12, r17
    2626:	50 f4       	brcc	.+20     	; 0x263c <__stack+0x43d>
    2628:	04 ff       	sbrs	r16, 4
    262a:	0a c0       	rjmp	.+20     	; 0x2640 <__stack+0x441>
    262c:	02 fd       	sbrc	r16, 2
    262e:	08 c0       	rjmp	.+16     	; 0x2640 <__stack+0x441>
    2630:	20 2f       	mov	r18, r16
    2632:	2e 7e       	andi	r18, 0xEE	; 238
    2634:	05 c0       	rjmp	.+10     	; 0x2640 <__stack+0x441>
    2636:	dc 2c       	mov	r13, r12
    2638:	20 2f       	mov	r18, r16
    263a:	03 c0       	rjmp	.+6      	; 0x2642 <__stack+0x443>
    263c:	dc 2c       	mov	r13, r12
    263e:	01 c0       	rjmp	.+2      	; 0x2642 <__stack+0x443>
    2640:	d1 2e       	mov	r13, r17
    2642:	24 ff       	sbrs	r18, 4
    2644:	0d c0       	rjmp	.+26     	; 0x2660 <__stack+0x461>
    2646:	fe 01       	movw	r30, r28
    2648:	ec 0d       	add	r30, r12
    264a:	f1 1d       	adc	r31, r1
    264c:	80 81       	ld	r24, Z
    264e:	80 33       	cpi	r24, 0x30	; 48
    2650:	11 f4       	brne	.+4      	; 0x2656 <__stack+0x457>
    2652:	29 7e       	andi	r18, 0xE9	; 233
    2654:	09 c0       	rjmp	.+18     	; 0x2668 <__stack+0x469>
    2656:	22 ff       	sbrs	r18, 2
    2658:	06 c0       	rjmp	.+12     	; 0x2666 <__stack+0x467>
    265a:	d3 94       	inc	r13
    265c:	d3 94       	inc	r13
    265e:	04 c0       	rjmp	.+8      	; 0x2668 <__stack+0x469>
    2660:	82 2f       	mov	r24, r18
    2662:	86 78       	andi	r24, 0x86	; 134
    2664:	09 f0       	breq	.+2      	; 0x2668 <__stack+0x469>
    2666:	d3 94       	inc	r13
    2668:	23 fd       	sbrc	r18, 3
    266a:	13 c0       	rjmp	.+38     	; 0x2692 <__stack+0x493>
    266c:	20 ff       	sbrs	r18, 0
    266e:	06 c0       	rjmp	.+12     	; 0x267c <__stack+0x47d>
    2670:	1c 2d       	mov	r17, r12
    2672:	d5 14       	cp	r13, r5
    2674:	18 f4       	brcc	.+6      	; 0x267c <__stack+0x47d>
    2676:	15 0d       	add	r17, r5
    2678:	1d 19       	sub	r17, r13
    267a:	d5 2c       	mov	r13, r5
    267c:	d5 14       	cp	r13, r5
    267e:	68 f4       	brcc	.+26     	; 0x269a <__stack+0x49b>
    2680:	b7 01       	movw	r22, r14
    2682:	80 e2       	ldi	r24, 0x20	; 32
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	2b 8b       	std	Y+19, r18	; 0x13
    2688:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    268c:	d3 94       	inc	r13
    268e:	2b 89       	ldd	r18, Y+19	; 0x13
    2690:	f5 cf       	rjmp	.-22     	; 0x267c <__stack+0x47d>
    2692:	d5 14       	cp	r13, r5
    2694:	10 f4       	brcc	.+4      	; 0x269a <__stack+0x49b>
    2696:	5d 18       	sub	r5, r13
    2698:	01 c0       	rjmp	.+2      	; 0x269c <__stack+0x49d>
    269a:	51 2c       	mov	r5, r1
    269c:	24 ff       	sbrs	r18, 4
    269e:	12 c0       	rjmp	.+36     	; 0x26c4 <__stack+0x4c5>
    26a0:	b7 01       	movw	r22, r14
    26a2:	80 e3       	ldi	r24, 0x30	; 48
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	2b 8b       	std	Y+19, r18	; 0x13
    26a8:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    26ac:	2b 89       	ldd	r18, Y+19	; 0x13
    26ae:	22 ff       	sbrs	r18, 2
    26b0:	17 c0       	rjmp	.+46     	; 0x26e0 <__stack+0x4e1>
    26b2:	21 ff       	sbrs	r18, 1
    26b4:	03 c0       	rjmp	.+6      	; 0x26bc <__stack+0x4bd>
    26b6:	88 e5       	ldi	r24, 0x58	; 88
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	02 c0       	rjmp	.+4      	; 0x26c0 <__stack+0x4c1>
    26bc:	88 e7       	ldi	r24, 0x78	; 120
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	b7 01       	movw	r22, r14
    26c2:	0c c0       	rjmp	.+24     	; 0x26dc <__stack+0x4dd>
    26c4:	82 2f       	mov	r24, r18
    26c6:	86 78       	andi	r24, 0x86	; 134
    26c8:	59 f0       	breq	.+22     	; 0x26e0 <__stack+0x4e1>
    26ca:	21 fd       	sbrc	r18, 1
    26cc:	02 c0       	rjmp	.+4      	; 0x26d2 <__stack+0x4d3>
    26ce:	80 e2       	ldi	r24, 0x20	; 32
    26d0:	01 c0       	rjmp	.+2      	; 0x26d4 <__stack+0x4d5>
    26d2:	8b e2       	ldi	r24, 0x2B	; 43
    26d4:	27 fd       	sbrc	r18, 7
    26d6:	8d e2       	ldi	r24, 0x2D	; 45
    26d8:	b7 01       	movw	r22, r14
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    26e0:	c1 16       	cp	r12, r17
    26e2:	38 f4       	brcc	.+14     	; 0x26f2 <__stack+0x4f3>
    26e4:	b7 01       	movw	r22, r14
    26e6:	80 e3       	ldi	r24, 0x30	; 48
    26e8:	90 e0       	ldi	r25, 0x00	; 0
    26ea:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    26ee:	11 50       	subi	r17, 0x01	; 1
    26f0:	f7 cf       	rjmp	.-18     	; 0x26e0 <__stack+0x4e1>
    26f2:	ca 94       	dec	r12
    26f4:	f4 01       	movw	r30, r8
    26f6:	ec 0d       	add	r30, r12
    26f8:	f1 1d       	adc	r31, r1
    26fa:	80 81       	ld	r24, Z
    26fc:	b7 01       	movw	r22, r14
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    2704:	c1 10       	cpse	r12, r1
    2706:	f5 cf       	rjmp	.-22     	; 0x26f2 <__stack+0x4f3>
    2708:	55 20       	and	r5, r5
    270a:	09 f4       	brne	.+2      	; 0x270e <__stack+0x50f>
    270c:	c2 cc       	rjmp	.-1660   	; 0x2092 <vfprintf+0x58>
    270e:	b7 01       	movw	r22, r14
    2710:	80 e2       	ldi	r24, 0x20	; 32
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <fputc>
    2718:	5a 94       	dec	r5
    271a:	f6 cf       	rjmp	.-20     	; 0x2708 <__stack+0x509>
    271c:	f7 01       	movw	r30, r14
    271e:	86 81       	ldd	r24, Z+6	; 0x06
    2720:	97 81       	ldd	r25, Z+7	; 0x07
    2722:	02 c0       	rjmp	.+4      	; 0x2728 <__stack+0x529>
    2724:	8f ef       	ldi	r24, 0xFF	; 255
    2726:	9f ef       	ldi	r25, 0xFF	; 255
    2728:	63 96       	adiw	r28, 0x13	; 19
    272a:	e2 e1       	ldi	r30, 0x12	; 18
    272c:	0c 94 d6 13 	jmp	0x27ac	; 0x27ac <__epilogue_restores__>

00002730 <__udivmodsi4>:
    2730:	a1 e2       	ldi	r26, 0x21	; 33
    2732:	1a 2e       	mov	r1, r26
    2734:	aa 1b       	sub	r26, r26
    2736:	bb 1b       	sub	r27, r27
    2738:	fd 01       	movw	r30, r26
    273a:	0d c0       	rjmp	.+26     	; 0x2756 <__udivmodsi4_ep>

0000273c <__udivmodsi4_loop>:
    273c:	aa 1f       	adc	r26, r26
    273e:	bb 1f       	adc	r27, r27
    2740:	ee 1f       	adc	r30, r30
    2742:	ff 1f       	adc	r31, r31
    2744:	a2 17       	cp	r26, r18
    2746:	b3 07       	cpc	r27, r19
    2748:	e4 07       	cpc	r30, r20
    274a:	f5 07       	cpc	r31, r21
    274c:	20 f0       	brcs	.+8      	; 0x2756 <__udivmodsi4_ep>
    274e:	a2 1b       	sub	r26, r18
    2750:	b3 0b       	sbc	r27, r19
    2752:	e4 0b       	sbc	r30, r20
    2754:	f5 0b       	sbc	r31, r21

00002756 <__udivmodsi4_ep>:
    2756:	66 1f       	adc	r22, r22
    2758:	77 1f       	adc	r23, r23
    275a:	88 1f       	adc	r24, r24
    275c:	99 1f       	adc	r25, r25
    275e:	1a 94       	dec	r1
    2760:	69 f7       	brne	.-38     	; 0x273c <__udivmodsi4_loop>
    2762:	60 95       	com	r22
    2764:	70 95       	com	r23
    2766:	80 95       	com	r24
    2768:	90 95       	com	r25
    276a:	9b 01       	movw	r18, r22
    276c:	ac 01       	movw	r20, r24
    276e:	bd 01       	movw	r22, r26
    2770:	cf 01       	movw	r24, r30
    2772:	08 95       	ret

00002774 <__prologue_saves__>:
    2774:	2f 92       	push	r2
    2776:	3f 92       	push	r3
    2778:	4f 92       	push	r4
    277a:	5f 92       	push	r5
    277c:	6f 92       	push	r6
    277e:	7f 92       	push	r7
    2780:	8f 92       	push	r8
    2782:	9f 92       	push	r9
    2784:	af 92       	push	r10
    2786:	bf 92       	push	r11
    2788:	cf 92       	push	r12
    278a:	df 92       	push	r13
    278c:	ef 92       	push	r14
    278e:	ff 92       	push	r15
    2790:	0f 93       	push	r16
    2792:	1f 93       	push	r17
    2794:	cf 93       	push	r28
    2796:	df 93       	push	r29
    2798:	cd b7       	in	r28, 0x3d	; 61
    279a:	de b7       	in	r29, 0x3e	; 62
    279c:	ca 1b       	sub	r28, r26
    279e:	db 0b       	sbc	r29, r27
    27a0:	0f b6       	in	r0, 0x3f	; 63
    27a2:	f8 94       	cli
    27a4:	de bf       	out	0x3e, r29	; 62
    27a6:	0f be       	out	0x3f, r0	; 63
    27a8:	cd bf       	out	0x3d, r28	; 61
    27aa:	09 94       	ijmp

000027ac <__epilogue_restores__>:
    27ac:	2a 88       	ldd	r2, Y+18	; 0x12
    27ae:	39 88       	ldd	r3, Y+17	; 0x11
    27b0:	48 88       	ldd	r4, Y+16	; 0x10
    27b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    27b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    27b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    27b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    27ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    27bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    27be:	b9 84       	ldd	r11, Y+9	; 0x09
    27c0:	c8 84       	ldd	r12, Y+8	; 0x08
    27c2:	df 80       	ldd	r13, Y+7	; 0x07
    27c4:	ee 80       	ldd	r14, Y+6	; 0x06
    27c6:	fd 80       	ldd	r15, Y+5	; 0x05
    27c8:	0c 81       	ldd	r16, Y+4	; 0x04
    27ca:	1b 81       	ldd	r17, Y+3	; 0x03
    27cc:	aa 81       	ldd	r26, Y+2	; 0x02
    27ce:	b9 81       	ldd	r27, Y+1	; 0x01
    27d0:	ce 0f       	add	r28, r30
    27d2:	d1 1d       	adc	r29, r1
    27d4:	0f b6       	in	r0, 0x3f	; 63
    27d6:	f8 94       	cli
    27d8:	de bf       	out	0x3e, r29	; 62
    27da:	0f be       	out	0x3f, r0	; 63
    27dc:	cd bf       	out	0x3d, r28	; 61
    27de:	ed 01       	movw	r28, r26
    27e0:	08 95       	ret

000027e2 <malloc>:
    27e2:	cf 93       	push	r28
    27e4:	df 93       	push	r29
    27e6:	82 30       	cpi	r24, 0x02	; 2
    27e8:	91 05       	cpc	r25, r1
    27ea:	10 f4       	brcc	.+4      	; 0x27f0 <malloc+0xe>
    27ec:	82 e0       	ldi	r24, 0x02	; 2
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	e0 91 12 09 	lds	r30, 0x0912
    27f4:	f0 91 13 09 	lds	r31, 0x0913
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	a0 e0       	ldi	r26, 0x00	; 0
    27fe:	b0 e0       	ldi	r27, 0x00	; 0
    2800:	30 97       	sbiw	r30, 0x00	; 0
    2802:	39 f1       	breq	.+78     	; 0x2852 <malloc+0x70>
    2804:	40 81       	ld	r20, Z
    2806:	51 81       	ldd	r21, Z+1	; 0x01
    2808:	48 17       	cp	r20, r24
    280a:	59 07       	cpc	r21, r25
    280c:	b8 f0       	brcs	.+46     	; 0x283c <malloc+0x5a>
    280e:	48 17       	cp	r20, r24
    2810:	59 07       	cpc	r21, r25
    2812:	71 f4       	brne	.+28     	; 0x2830 <malloc+0x4e>
    2814:	82 81       	ldd	r24, Z+2	; 0x02
    2816:	93 81       	ldd	r25, Z+3	; 0x03
    2818:	10 97       	sbiw	r26, 0x00	; 0
    281a:	29 f0       	breq	.+10     	; 0x2826 <malloc+0x44>
    281c:	13 96       	adiw	r26, 0x03	; 3
    281e:	9c 93       	st	X, r25
    2820:	8e 93       	st	-X, r24
    2822:	12 97       	sbiw	r26, 0x02	; 2
    2824:	2c c0       	rjmp	.+88     	; 0x287e <malloc+0x9c>
    2826:	90 93 13 09 	sts	0x0913, r25
    282a:	80 93 12 09 	sts	0x0912, r24
    282e:	27 c0       	rjmp	.+78     	; 0x287e <malloc+0x9c>
    2830:	21 15       	cp	r18, r1
    2832:	31 05       	cpc	r19, r1
    2834:	31 f0       	breq	.+12     	; 0x2842 <malloc+0x60>
    2836:	42 17       	cp	r20, r18
    2838:	53 07       	cpc	r21, r19
    283a:	18 f0       	brcs	.+6      	; 0x2842 <malloc+0x60>
    283c:	a9 01       	movw	r20, r18
    283e:	db 01       	movw	r26, r22
    2840:	01 c0       	rjmp	.+2      	; 0x2844 <malloc+0x62>
    2842:	ef 01       	movw	r28, r30
    2844:	9a 01       	movw	r18, r20
    2846:	bd 01       	movw	r22, r26
    2848:	df 01       	movw	r26, r30
    284a:	02 80       	ldd	r0, Z+2	; 0x02
    284c:	f3 81       	ldd	r31, Z+3	; 0x03
    284e:	e0 2d       	mov	r30, r0
    2850:	d7 cf       	rjmp	.-82     	; 0x2800 <malloc+0x1e>
    2852:	21 15       	cp	r18, r1
    2854:	31 05       	cpc	r19, r1
    2856:	f9 f0       	breq	.+62     	; 0x2896 <malloc+0xb4>
    2858:	28 1b       	sub	r18, r24
    285a:	39 0b       	sbc	r19, r25
    285c:	24 30       	cpi	r18, 0x04	; 4
    285e:	31 05       	cpc	r19, r1
    2860:	80 f4       	brcc	.+32     	; 0x2882 <malloc+0xa0>
    2862:	8a 81       	ldd	r24, Y+2	; 0x02
    2864:	9b 81       	ldd	r25, Y+3	; 0x03
    2866:	61 15       	cp	r22, r1
    2868:	71 05       	cpc	r23, r1
    286a:	21 f0       	breq	.+8      	; 0x2874 <malloc+0x92>
    286c:	fb 01       	movw	r30, r22
    286e:	93 83       	std	Z+3, r25	; 0x03
    2870:	82 83       	std	Z+2, r24	; 0x02
    2872:	04 c0       	rjmp	.+8      	; 0x287c <malloc+0x9a>
    2874:	90 93 13 09 	sts	0x0913, r25
    2878:	80 93 12 09 	sts	0x0912, r24
    287c:	fe 01       	movw	r30, r28
    287e:	32 96       	adiw	r30, 0x02	; 2
    2880:	44 c0       	rjmp	.+136    	; 0x290a <malloc+0x128>
    2882:	fe 01       	movw	r30, r28
    2884:	e2 0f       	add	r30, r18
    2886:	f3 1f       	adc	r31, r19
    2888:	81 93       	st	Z+, r24
    288a:	91 93       	st	Z+, r25
    288c:	22 50       	subi	r18, 0x02	; 2
    288e:	31 09       	sbc	r19, r1
    2890:	39 83       	std	Y+1, r19	; 0x01
    2892:	28 83       	st	Y, r18
    2894:	3a c0       	rjmp	.+116    	; 0x290a <malloc+0x128>
    2896:	20 91 10 09 	lds	r18, 0x0910
    289a:	30 91 11 09 	lds	r19, 0x0911
    289e:	23 2b       	or	r18, r19
    28a0:	41 f4       	brne	.+16     	; 0x28b2 <malloc+0xd0>
    28a2:	20 91 02 02 	lds	r18, 0x0202
    28a6:	30 91 03 02 	lds	r19, 0x0203
    28aa:	30 93 11 09 	sts	0x0911, r19
    28ae:	20 93 10 09 	sts	0x0910, r18
    28b2:	20 91 00 02 	lds	r18, 0x0200
    28b6:	30 91 01 02 	lds	r19, 0x0201
    28ba:	21 15       	cp	r18, r1
    28bc:	31 05       	cpc	r19, r1
    28be:	41 f4       	brne	.+16     	; 0x28d0 <malloc+0xee>
    28c0:	2d b7       	in	r18, 0x3d	; 61
    28c2:	3e b7       	in	r19, 0x3e	; 62
    28c4:	40 91 04 02 	lds	r20, 0x0204
    28c8:	50 91 05 02 	lds	r21, 0x0205
    28cc:	24 1b       	sub	r18, r20
    28ce:	35 0b       	sbc	r19, r21
    28d0:	e0 91 10 09 	lds	r30, 0x0910
    28d4:	f0 91 11 09 	lds	r31, 0x0911
    28d8:	e2 17       	cp	r30, r18
    28da:	f3 07       	cpc	r31, r19
    28dc:	a0 f4       	brcc	.+40     	; 0x2906 <malloc+0x124>
    28de:	2e 1b       	sub	r18, r30
    28e0:	3f 0b       	sbc	r19, r31
    28e2:	28 17       	cp	r18, r24
    28e4:	39 07       	cpc	r19, r25
    28e6:	78 f0       	brcs	.+30     	; 0x2906 <malloc+0x124>
    28e8:	ac 01       	movw	r20, r24
    28ea:	4e 5f       	subi	r20, 0xFE	; 254
    28ec:	5f 4f       	sbci	r21, 0xFF	; 255
    28ee:	24 17       	cp	r18, r20
    28f0:	35 07       	cpc	r19, r21
    28f2:	48 f0       	brcs	.+18     	; 0x2906 <malloc+0x124>
    28f4:	4e 0f       	add	r20, r30
    28f6:	5f 1f       	adc	r21, r31
    28f8:	50 93 11 09 	sts	0x0911, r21
    28fc:	40 93 10 09 	sts	0x0910, r20
    2900:	81 93       	st	Z+, r24
    2902:	91 93       	st	Z+, r25
    2904:	02 c0       	rjmp	.+4      	; 0x290a <malloc+0x128>
    2906:	e0 e0       	ldi	r30, 0x00	; 0
    2908:	f0 e0       	ldi	r31, 0x00	; 0
    290a:	cf 01       	movw	r24, r30
    290c:	df 91       	pop	r29
    290e:	cf 91       	pop	r28
    2910:	08 95       	ret

00002912 <free>:
    2912:	cf 93       	push	r28
    2914:	df 93       	push	r29
    2916:	00 97       	sbiw	r24, 0x00	; 0
    2918:	09 f4       	brne	.+2      	; 0x291c <free+0xa>
    291a:	87 c0       	rjmp	.+270    	; 0x2a2a <free+0x118>
    291c:	fc 01       	movw	r30, r24
    291e:	32 97       	sbiw	r30, 0x02	; 2
    2920:	13 82       	std	Z+3, r1	; 0x03
    2922:	12 82       	std	Z+2, r1	; 0x02
    2924:	c0 91 12 09 	lds	r28, 0x0912
    2928:	d0 91 13 09 	lds	r29, 0x0913
    292c:	20 97       	sbiw	r28, 0x00	; 0
    292e:	81 f4       	brne	.+32     	; 0x2950 <free+0x3e>
    2930:	20 81       	ld	r18, Z
    2932:	31 81       	ldd	r19, Z+1	; 0x01
    2934:	28 0f       	add	r18, r24
    2936:	39 1f       	adc	r19, r25
    2938:	80 91 10 09 	lds	r24, 0x0910
    293c:	90 91 11 09 	lds	r25, 0x0911
    2940:	82 17       	cp	r24, r18
    2942:	93 07       	cpc	r25, r19
    2944:	79 f5       	brne	.+94     	; 0x29a4 <free+0x92>
    2946:	f0 93 11 09 	sts	0x0911, r31
    294a:	e0 93 10 09 	sts	0x0910, r30
    294e:	6d c0       	rjmp	.+218    	; 0x2a2a <free+0x118>
    2950:	de 01       	movw	r26, r28
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	30 e0       	ldi	r19, 0x00	; 0
    2956:	ae 17       	cp	r26, r30
    2958:	bf 07       	cpc	r27, r31
    295a:	50 f4       	brcc	.+20     	; 0x2970 <free+0x5e>
    295c:	12 96       	adiw	r26, 0x02	; 2
    295e:	4d 91       	ld	r20, X+
    2960:	5c 91       	ld	r21, X
    2962:	13 97       	sbiw	r26, 0x03	; 3
    2964:	9d 01       	movw	r18, r26
    2966:	41 15       	cp	r20, r1
    2968:	51 05       	cpc	r21, r1
    296a:	09 f1       	breq	.+66     	; 0x29ae <free+0x9c>
    296c:	da 01       	movw	r26, r20
    296e:	f3 cf       	rjmp	.-26     	; 0x2956 <free+0x44>
    2970:	b3 83       	std	Z+3, r27	; 0x03
    2972:	a2 83       	std	Z+2, r26	; 0x02
    2974:	40 81       	ld	r20, Z
    2976:	51 81       	ldd	r21, Z+1	; 0x01
    2978:	84 0f       	add	r24, r20
    297a:	95 1f       	adc	r25, r21
    297c:	8a 17       	cp	r24, r26
    297e:	9b 07       	cpc	r25, r27
    2980:	71 f4       	brne	.+28     	; 0x299e <free+0x8c>
    2982:	8d 91       	ld	r24, X+
    2984:	9c 91       	ld	r25, X
    2986:	11 97       	sbiw	r26, 0x01	; 1
    2988:	84 0f       	add	r24, r20
    298a:	95 1f       	adc	r25, r21
    298c:	02 96       	adiw	r24, 0x02	; 2
    298e:	91 83       	std	Z+1, r25	; 0x01
    2990:	80 83       	st	Z, r24
    2992:	12 96       	adiw	r26, 0x02	; 2
    2994:	8d 91       	ld	r24, X+
    2996:	9c 91       	ld	r25, X
    2998:	13 97       	sbiw	r26, 0x03	; 3
    299a:	93 83       	std	Z+3, r25	; 0x03
    299c:	82 83       	std	Z+2, r24	; 0x02
    299e:	21 15       	cp	r18, r1
    29a0:	31 05       	cpc	r19, r1
    29a2:	29 f4       	brne	.+10     	; 0x29ae <free+0x9c>
    29a4:	f0 93 13 09 	sts	0x0913, r31
    29a8:	e0 93 12 09 	sts	0x0912, r30
    29ac:	3e c0       	rjmp	.+124    	; 0x2a2a <free+0x118>
    29ae:	d9 01       	movw	r26, r18
    29b0:	13 96       	adiw	r26, 0x03	; 3
    29b2:	fc 93       	st	X, r31
    29b4:	ee 93       	st	-X, r30
    29b6:	12 97       	sbiw	r26, 0x02	; 2
    29b8:	4d 91       	ld	r20, X+
    29ba:	5d 91       	ld	r21, X+
    29bc:	a4 0f       	add	r26, r20
    29be:	b5 1f       	adc	r27, r21
    29c0:	ea 17       	cp	r30, r26
    29c2:	fb 07       	cpc	r31, r27
    29c4:	79 f4       	brne	.+30     	; 0x29e4 <free+0xd2>
    29c6:	80 81       	ld	r24, Z
    29c8:	91 81       	ldd	r25, Z+1	; 0x01
    29ca:	84 0f       	add	r24, r20
    29cc:	95 1f       	adc	r25, r21
    29ce:	02 96       	adiw	r24, 0x02	; 2
    29d0:	d9 01       	movw	r26, r18
    29d2:	11 96       	adiw	r26, 0x01	; 1
    29d4:	9c 93       	st	X, r25
    29d6:	8e 93       	st	-X, r24
    29d8:	82 81       	ldd	r24, Z+2	; 0x02
    29da:	93 81       	ldd	r25, Z+3	; 0x03
    29dc:	13 96       	adiw	r26, 0x03	; 3
    29de:	9c 93       	st	X, r25
    29e0:	8e 93       	st	-X, r24
    29e2:	12 97       	sbiw	r26, 0x02	; 2
    29e4:	e0 e0       	ldi	r30, 0x00	; 0
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	8a 81       	ldd	r24, Y+2	; 0x02
    29ea:	9b 81       	ldd	r25, Y+3	; 0x03
    29ec:	00 97       	sbiw	r24, 0x00	; 0
    29ee:	19 f0       	breq	.+6      	; 0x29f6 <free+0xe4>
    29f0:	fe 01       	movw	r30, r28
    29f2:	ec 01       	movw	r28, r24
    29f4:	f9 cf       	rjmp	.-14     	; 0x29e8 <free+0xd6>
    29f6:	ce 01       	movw	r24, r28
    29f8:	02 96       	adiw	r24, 0x02	; 2
    29fa:	28 81       	ld	r18, Y
    29fc:	39 81       	ldd	r19, Y+1	; 0x01
    29fe:	82 0f       	add	r24, r18
    2a00:	93 1f       	adc	r25, r19
    2a02:	20 91 10 09 	lds	r18, 0x0910
    2a06:	30 91 11 09 	lds	r19, 0x0911
    2a0a:	28 17       	cp	r18, r24
    2a0c:	39 07       	cpc	r19, r25
    2a0e:	69 f4       	brne	.+26     	; 0x2a2a <free+0x118>
    2a10:	30 97       	sbiw	r30, 0x00	; 0
    2a12:	29 f4       	brne	.+10     	; 0x2a1e <free+0x10c>
    2a14:	10 92 13 09 	sts	0x0913, r1
    2a18:	10 92 12 09 	sts	0x0912, r1
    2a1c:	02 c0       	rjmp	.+4      	; 0x2a22 <free+0x110>
    2a1e:	13 82       	std	Z+3, r1	; 0x03
    2a20:	12 82       	std	Z+2, r1	; 0x02
    2a22:	d0 93 11 09 	sts	0x0911, r29
    2a26:	c0 93 10 09 	sts	0x0910, r28
    2a2a:	df 91       	pop	r29
    2a2c:	cf 91       	pop	r28
    2a2e:	08 95       	ret

00002a30 <__ftoa_engine>:
    2a30:	28 30       	cpi	r18, 0x08	; 8
    2a32:	08 f0       	brcs	.+2      	; 0x2a36 <__ftoa_engine+0x6>
    2a34:	27 e0       	ldi	r18, 0x07	; 7
    2a36:	33 27       	eor	r19, r19
    2a38:	da 01       	movw	r26, r20
    2a3a:	99 0f       	add	r25, r25
    2a3c:	31 1d       	adc	r19, r1
    2a3e:	87 fd       	sbrc	r24, 7
    2a40:	91 60       	ori	r25, 0x01	; 1
    2a42:	00 96       	adiw	r24, 0x00	; 0
    2a44:	61 05       	cpc	r22, r1
    2a46:	71 05       	cpc	r23, r1
    2a48:	39 f4       	brne	.+14     	; 0x2a58 <__ftoa_engine+0x28>
    2a4a:	32 60       	ori	r19, 0x02	; 2
    2a4c:	2e 5f       	subi	r18, 0xFE	; 254
    2a4e:	3d 93       	st	X+, r19
    2a50:	30 e3       	ldi	r19, 0x30	; 48
    2a52:	2a 95       	dec	r18
    2a54:	e1 f7       	brne	.-8      	; 0x2a4e <__ftoa_engine+0x1e>
    2a56:	08 95       	ret
    2a58:	9f 3f       	cpi	r25, 0xFF	; 255
    2a5a:	30 f0       	brcs	.+12     	; 0x2a68 <__ftoa_engine+0x38>
    2a5c:	80 38       	cpi	r24, 0x80	; 128
    2a5e:	71 05       	cpc	r23, r1
    2a60:	61 05       	cpc	r22, r1
    2a62:	09 f0       	breq	.+2      	; 0x2a66 <__ftoa_engine+0x36>
    2a64:	3c 5f       	subi	r19, 0xFC	; 252
    2a66:	3c 5f       	subi	r19, 0xFC	; 252
    2a68:	3d 93       	st	X+, r19
    2a6a:	91 30       	cpi	r25, 0x01	; 1
    2a6c:	08 f0       	brcs	.+2      	; 0x2a70 <__ftoa_engine+0x40>
    2a6e:	80 68       	ori	r24, 0x80	; 128
    2a70:	91 1d       	adc	r25, r1
    2a72:	df 93       	push	r29
    2a74:	cf 93       	push	r28
    2a76:	1f 93       	push	r17
    2a78:	0f 93       	push	r16
    2a7a:	ff 92       	push	r15
    2a7c:	ef 92       	push	r14
    2a7e:	19 2f       	mov	r17, r25
    2a80:	98 7f       	andi	r25, 0xF8	; 248
    2a82:	96 95       	lsr	r25
    2a84:	e9 2f       	mov	r30, r25
    2a86:	96 95       	lsr	r25
    2a88:	96 95       	lsr	r25
    2a8a:	e9 0f       	add	r30, r25
    2a8c:	ff 27       	eor	r31, r31
    2a8e:	ea 56       	subi	r30, 0x6A	; 106
    2a90:	fe 4f       	sbci	r31, 0xFE	; 254
    2a92:	99 27       	eor	r25, r25
    2a94:	33 27       	eor	r19, r19
    2a96:	ee 24       	eor	r14, r14
    2a98:	ff 24       	eor	r15, r15
    2a9a:	a7 01       	movw	r20, r14
    2a9c:	e7 01       	movw	r28, r14
    2a9e:	05 90       	lpm	r0, Z+
    2aa0:	08 94       	sec
    2aa2:	07 94       	ror	r0
    2aa4:	28 f4       	brcc	.+10     	; 0x2ab0 <__ftoa_engine+0x80>
    2aa6:	36 0f       	add	r19, r22
    2aa8:	e7 1e       	adc	r14, r23
    2aaa:	f8 1e       	adc	r15, r24
    2aac:	49 1f       	adc	r20, r25
    2aae:	51 1d       	adc	r21, r1
    2ab0:	66 0f       	add	r22, r22
    2ab2:	77 1f       	adc	r23, r23
    2ab4:	88 1f       	adc	r24, r24
    2ab6:	99 1f       	adc	r25, r25
    2ab8:	06 94       	lsr	r0
    2aba:	a1 f7       	brne	.-24     	; 0x2aa4 <__ftoa_engine+0x74>
    2abc:	05 90       	lpm	r0, Z+
    2abe:	07 94       	ror	r0
    2ac0:	28 f4       	brcc	.+10     	; 0x2acc <__ftoa_engine+0x9c>
    2ac2:	e7 0e       	add	r14, r23
    2ac4:	f8 1e       	adc	r15, r24
    2ac6:	49 1f       	adc	r20, r25
    2ac8:	56 1f       	adc	r21, r22
    2aca:	c1 1d       	adc	r28, r1
    2acc:	77 0f       	add	r23, r23
    2ace:	88 1f       	adc	r24, r24
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	66 1f       	adc	r22, r22
    2ad4:	06 94       	lsr	r0
    2ad6:	a1 f7       	brne	.-24     	; 0x2ac0 <__ftoa_engine+0x90>
    2ad8:	05 90       	lpm	r0, Z+
    2ada:	07 94       	ror	r0
    2adc:	28 f4       	brcc	.+10     	; 0x2ae8 <__ftoa_engine+0xb8>
    2ade:	f8 0e       	add	r15, r24
    2ae0:	49 1f       	adc	r20, r25
    2ae2:	56 1f       	adc	r21, r22
    2ae4:	c7 1f       	adc	r28, r23
    2ae6:	d1 1d       	adc	r29, r1
    2ae8:	88 0f       	add	r24, r24
    2aea:	99 1f       	adc	r25, r25
    2aec:	66 1f       	adc	r22, r22
    2aee:	77 1f       	adc	r23, r23
    2af0:	06 94       	lsr	r0
    2af2:	a1 f7       	brne	.-24     	; 0x2adc <__ftoa_engine+0xac>
    2af4:	05 90       	lpm	r0, Z+
    2af6:	07 94       	ror	r0
    2af8:	20 f4       	brcc	.+8      	; 0x2b02 <__ftoa_engine+0xd2>
    2afa:	49 0f       	add	r20, r25
    2afc:	56 1f       	adc	r21, r22
    2afe:	c7 1f       	adc	r28, r23
    2b00:	d8 1f       	adc	r29, r24
    2b02:	99 0f       	add	r25, r25
    2b04:	66 1f       	adc	r22, r22
    2b06:	77 1f       	adc	r23, r23
    2b08:	88 1f       	adc	r24, r24
    2b0a:	06 94       	lsr	r0
    2b0c:	a9 f7       	brne	.-22     	; 0x2af8 <__ftoa_engine+0xc8>
    2b0e:	84 91       	lpm	r24, Z
    2b10:	10 95       	com	r17
    2b12:	17 70       	andi	r17, 0x07	; 7
    2b14:	41 f0       	breq	.+16     	; 0x2b26 <__ftoa_engine+0xf6>
    2b16:	d6 95       	lsr	r29
    2b18:	c7 95       	ror	r28
    2b1a:	57 95       	ror	r21
    2b1c:	47 95       	ror	r20
    2b1e:	f7 94       	ror	r15
    2b20:	e7 94       	ror	r14
    2b22:	1a 95       	dec	r17
    2b24:	c1 f7       	brne	.-16     	; 0x2b16 <__ftoa_engine+0xe6>
    2b26:	ec e3       	ldi	r30, 0x3C	; 60
    2b28:	f1 e0       	ldi	r31, 0x01	; 1
    2b2a:	68 94       	set
    2b2c:	15 90       	lpm	r1, Z+
    2b2e:	15 91       	lpm	r17, Z+
    2b30:	35 91       	lpm	r19, Z+
    2b32:	65 91       	lpm	r22, Z+
    2b34:	95 91       	lpm	r25, Z+
    2b36:	05 90       	lpm	r0, Z+
    2b38:	7f e2       	ldi	r23, 0x2F	; 47
    2b3a:	73 95       	inc	r23
    2b3c:	e1 18       	sub	r14, r1
    2b3e:	f1 0a       	sbc	r15, r17
    2b40:	43 0b       	sbc	r20, r19
    2b42:	56 0b       	sbc	r21, r22
    2b44:	c9 0b       	sbc	r28, r25
    2b46:	d0 09       	sbc	r29, r0
    2b48:	c0 f7       	brcc	.-16     	; 0x2b3a <__ftoa_engine+0x10a>
    2b4a:	e1 0c       	add	r14, r1
    2b4c:	f1 1e       	adc	r15, r17
    2b4e:	43 1f       	adc	r20, r19
    2b50:	56 1f       	adc	r21, r22
    2b52:	c9 1f       	adc	r28, r25
    2b54:	d0 1d       	adc	r29, r0
    2b56:	7e f4       	brtc	.+30     	; 0x2b76 <__ftoa_engine+0x146>
    2b58:	70 33       	cpi	r23, 0x30	; 48
    2b5a:	11 f4       	brne	.+4      	; 0x2b60 <__ftoa_engine+0x130>
    2b5c:	8a 95       	dec	r24
    2b5e:	e6 cf       	rjmp	.-52     	; 0x2b2c <__ftoa_engine+0xfc>
    2b60:	e8 94       	clt
    2b62:	01 50       	subi	r16, 0x01	; 1
    2b64:	30 f0       	brcs	.+12     	; 0x2b72 <__ftoa_engine+0x142>
    2b66:	08 0f       	add	r16, r24
    2b68:	0a f4       	brpl	.+2      	; 0x2b6c <__ftoa_engine+0x13c>
    2b6a:	00 27       	eor	r16, r16
    2b6c:	02 17       	cp	r16, r18
    2b6e:	08 f4       	brcc	.+2      	; 0x2b72 <__ftoa_engine+0x142>
    2b70:	20 2f       	mov	r18, r16
    2b72:	23 95       	inc	r18
    2b74:	02 2f       	mov	r16, r18
    2b76:	7a 33       	cpi	r23, 0x3A	; 58
    2b78:	28 f0       	brcs	.+10     	; 0x2b84 <__ftoa_engine+0x154>
    2b7a:	79 e3       	ldi	r23, 0x39	; 57
    2b7c:	7d 93       	st	X+, r23
    2b7e:	2a 95       	dec	r18
    2b80:	e9 f7       	brne	.-6      	; 0x2b7c <__ftoa_engine+0x14c>
    2b82:	10 c0       	rjmp	.+32     	; 0x2ba4 <__ftoa_engine+0x174>
    2b84:	7d 93       	st	X+, r23
    2b86:	2a 95       	dec	r18
    2b88:	89 f6       	brne	.-94     	; 0x2b2c <__ftoa_engine+0xfc>
    2b8a:	06 94       	lsr	r0
    2b8c:	97 95       	ror	r25
    2b8e:	67 95       	ror	r22
    2b90:	37 95       	ror	r19
    2b92:	17 95       	ror	r17
    2b94:	17 94       	ror	r1
    2b96:	e1 18       	sub	r14, r1
    2b98:	f1 0a       	sbc	r15, r17
    2b9a:	43 0b       	sbc	r20, r19
    2b9c:	56 0b       	sbc	r21, r22
    2b9e:	c9 0b       	sbc	r28, r25
    2ba0:	d0 09       	sbc	r29, r0
    2ba2:	98 f0       	brcs	.+38     	; 0x2bca <__ftoa_engine+0x19a>
    2ba4:	23 95       	inc	r18
    2ba6:	7e 91       	ld	r23, -X
    2ba8:	73 95       	inc	r23
    2baa:	7a 33       	cpi	r23, 0x3A	; 58
    2bac:	08 f0       	brcs	.+2      	; 0x2bb0 <__ftoa_engine+0x180>
    2bae:	70 e3       	ldi	r23, 0x30	; 48
    2bb0:	7c 93       	st	X, r23
    2bb2:	20 13       	cpse	r18, r16
    2bb4:	b8 f7       	brcc	.-18     	; 0x2ba4 <__ftoa_engine+0x174>
    2bb6:	7e 91       	ld	r23, -X
    2bb8:	70 61       	ori	r23, 0x10	; 16
    2bba:	7d 93       	st	X+, r23
    2bbc:	30 f0       	brcs	.+12     	; 0x2bca <__ftoa_engine+0x19a>
    2bbe:	83 95       	inc	r24
    2bc0:	71 e3       	ldi	r23, 0x31	; 49
    2bc2:	7d 93       	st	X+, r23
    2bc4:	70 e3       	ldi	r23, 0x30	; 48
    2bc6:	2a 95       	dec	r18
    2bc8:	e1 f7       	brne	.-8      	; 0x2bc2 <__ftoa_engine+0x192>
    2bca:	11 24       	eor	r1, r1
    2bcc:	ef 90       	pop	r14
    2bce:	ff 90       	pop	r15
    2bd0:	0f 91       	pop	r16
    2bd2:	1f 91       	pop	r17
    2bd4:	cf 91       	pop	r28
    2bd6:	df 91       	pop	r29
    2bd8:	99 27       	eor	r25, r25
    2bda:	87 fd       	sbrc	r24, 7
    2bdc:	90 95       	com	r25
    2bde:	08 95       	ret

00002be0 <strnlen_P>:
    2be0:	fc 01       	movw	r30, r24
    2be2:	05 90       	lpm	r0, Z+
    2be4:	61 50       	subi	r22, 0x01	; 1
    2be6:	70 40       	sbci	r23, 0x00	; 0
    2be8:	01 10       	cpse	r0, r1
    2bea:	d8 f7       	brcc	.-10     	; 0x2be2 <strnlen_P+0x2>
    2bec:	80 95       	com	r24
    2bee:	90 95       	com	r25
    2bf0:	8e 0f       	add	r24, r30
    2bf2:	9f 1f       	adc	r25, r31
    2bf4:	08 95       	ret

00002bf6 <strnlen>:
    2bf6:	fc 01       	movw	r30, r24
    2bf8:	61 50       	subi	r22, 0x01	; 1
    2bfa:	70 40       	sbci	r23, 0x00	; 0
    2bfc:	01 90       	ld	r0, Z+
    2bfe:	01 10       	cpse	r0, r1
    2c00:	d8 f7       	brcc	.-10     	; 0x2bf8 <strnlen+0x2>
    2c02:	80 95       	com	r24
    2c04:	90 95       	com	r25
    2c06:	8e 0f       	add	r24, r30
    2c08:	9f 1f       	adc	r25, r31
    2c0a:	08 95       	ret

00002c0c <fputc>:
    2c0c:	0f 93       	push	r16
    2c0e:	1f 93       	push	r17
    2c10:	cf 93       	push	r28
    2c12:	df 93       	push	r29
    2c14:	18 2f       	mov	r17, r24
    2c16:	09 2f       	mov	r16, r25
    2c18:	eb 01       	movw	r28, r22
    2c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c1c:	81 fd       	sbrc	r24, 1
    2c1e:	03 c0       	rjmp	.+6      	; 0x2c26 <fputc+0x1a>
    2c20:	8f ef       	ldi	r24, 0xFF	; 255
    2c22:	9f ef       	ldi	r25, 0xFF	; 255
    2c24:	20 c0       	rjmp	.+64     	; 0x2c66 <fputc+0x5a>
    2c26:	82 ff       	sbrs	r24, 2
    2c28:	10 c0       	rjmp	.+32     	; 0x2c4a <fputc+0x3e>
    2c2a:	4e 81       	ldd	r20, Y+6	; 0x06
    2c2c:	5f 81       	ldd	r21, Y+7	; 0x07
    2c2e:	2c 81       	ldd	r18, Y+4	; 0x04
    2c30:	3d 81       	ldd	r19, Y+5	; 0x05
    2c32:	42 17       	cp	r20, r18
    2c34:	53 07       	cpc	r21, r19
    2c36:	7c f4       	brge	.+30     	; 0x2c56 <fputc+0x4a>
    2c38:	e8 81       	ld	r30, Y
    2c3a:	f9 81       	ldd	r31, Y+1	; 0x01
    2c3c:	9f 01       	movw	r18, r30
    2c3e:	2f 5f       	subi	r18, 0xFF	; 255
    2c40:	3f 4f       	sbci	r19, 0xFF	; 255
    2c42:	39 83       	std	Y+1, r19	; 0x01
    2c44:	28 83       	st	Y, r18
    2c46:	10 83       	st	Z, r17
    2c48:	06 c0       	rjmp	.+12     	; 0x2c56 <fputc+0x4a>
    2c4a:	e8 85       	ldd	r30, Y+8	; 0x08
    2c4c:	f9 85       	ldd	r31, Y+9	; 0x09
    2c4e:	81 2f       	mov	r24, r17
    2c50:	09 95       	icall
    2c52:	89 2b       	or	r24, r25
    2c54:	29 f7       	brne	.-54     	; 0x2c20 <fputc+0x14>
    2c56:	2e 81       	ldd	r18, Y+6	; 0x06
    2c58:	3f 81       	ldd	r19, Y+7	; 0x07
    2c5a:	2f 5f       	subi	r18, 0xFF	; 255
    2c5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c5e:	3f 83       	std	Y+7, r19	; 0x07
    2c60:	2e 83       	std	Y+6, r18	; 0x06
    2c62:	81 2f       	mov	r24, r17
    2c64:	90 2f       	mov	r25, r16
    2c66:	df 91       	pop	r29
    2c68:	cf 91       	pop	r28
    2c6a:	1f 91       	pop	r17
    2c6c:	0f 91       	pop	r16
    2c6e:	08 95       	ret

00002c70 <printf>:
    2c70:	a0 e0       	ldi	r26, 0x00	; 0
    2c72:	b0 e0       	ldi	r27, 0x00	; 0
    2c74:	ee e3       	ldi	r30, 0x3E	; 62
    2c76:	f6 e1       	ldi	r31, 0x16	; 22
    2c78:	0c 94 ca 13 	jmp	0x2794	; 0x2794 <__prologue_saves__+0x20>
    2c7c:	fe 01       	movw	r30, r28
    2c7e:	35 96       	adiw	r30, 0x05	; 5
    2c80:	61 91       	ld	r22, Z+
    2c82:	71 91       	ld	r23, Z+
    2c84:	af 01       	movw	r20, r30
    2c86:	80 91 16 09 	lds	r24, 0x0916
    2c8a:	90 91 17 09 	lds	r25, 0x0917
    2c8e:	0e 94 1d 10 	call	0x203a	; 0x203a <vfprintf>
    2c92:	e2 e0       	ldi	r30, 0x02	; 2
    2c94:	0c 94 e6 13 	jmp	0x27cc	; 0x27cc <__epilogue_restores__+0x20>

00002c98 <puts>:
    2c98:	0f 93       	push	r16
    2c9a:	1f 93       	push	r17
    2c9c:	cf 93       	push	r28
    2c9e:	df 93       	push	r29
    2ca0:	e0 91 16 09 	lds	r30, 0x0916
    2ca4:	f0 91 17 09 	lds	r31, 0x0917
    2ca8:	23 81       	ldd	r18, Z+3	; 0x03
    2caa:	21 ff       	sbrs	r18, 1
    2cac:	1b c0       	rjmp	.+54     	; 0x2ce4 <puts+0x4c>
    2cae:	ec 01       	movw	r28, r24
    2cb0:	00 e0       	ldi	r16, 0x00	; 0
    2cb2:	10 e0       	ldi	r17, 0x00	; 0
    2cb4:	89 91       	ld	r24, Y+
    2cb6:	60 91 16 09 	lds	r22, 0x0916
    2cba:	70 91 17 09 	lds	r23, 0x0917
    2cbe:	db 01       	movw	r26, r22
    2cc0:	18 96       	adiw	r26, 0x08	; 8
    2cc2:	ed 91       	ld	r30, X+
    2cc4:	fc 91       	ld	r31, X
    2cc6:	19 97       	sbiw	r26, 0x09	; 9
    2cc8:	88 23       	and	r24, r24
    2cca:	31 f0       	breq	.+12     	; 0x2cd8 <puts+0x40>
    2ccc:	09 95       	icall
    2cce:	89 2b       	or	r24, r25
    2cd0:	89 f3       	breq	.-30     	; 0x2cb4 <puts+0x1c>
    2cd2:	0f ef       	ldi	r16, 0xFF	; 255
    2cd4:	1f ef       	ldi	r17, 0xFF	; 255
    2cd6:	ee cf       	rjmp	.-36     	; 0x2cb4 <puts+0x1c>
    2cd8:	8a e0       	ldi	r24, 0x0A	; 10
    2cda:	09 95       	icall
    2cdc:	89 2b       	or	r24, r25
    2cde:	11 f4       	brne	.+4      	; 0x2ce4 <puts+0x4c>
    2ce0:	c8 01       	movw	r24, r16
    2ce2:	02 c0       	rjmp	.+4      	; 0x2ce8 <puts+0x50>
    2ce4:	8f ef       	ldi	r24, 0xFF	; 255
    2ce6:	9f ef       	ldi	r25, 0xFF	; 255
    2ce8:	df 91       	pop	r29
    2cea:	cf 91       	pop	r28
    2cec:	1f 91       	pop	r17
    2cee:	0f 91       	pop	r16
    2cf0:	08 95       	ret

00002cf2 <__ultoa_invert>:
    2cf2:	fa 01       	movw	r30, r20
    2cf4:	aa 27       	eor	r26, r26
    2cf6:	28 30       	cpi	r18, 0x08	; 8
    2cf8:	51 f1       	breq	.+84     	; 0x2d4e <__ultoa_invert+0x5c>
    2cfa:	20 31       	cpi	r18, 0x10	; 16
    2cfc:	81 f1       	breq	.+96     	; 0x2d5e <__ultoa_invert+0x6c>
    2cfe:	e8 94       	clt
    2d00:	6f 93       	push	r22
    2d02:	6e 7f       	andi	r22, 0xFE	; 254
    2d04:	6e 5f       	subi	r22, 0xFE	; 254
    2d06:	7f 4f       	sbci	r23, 0xFF	; 255
    2d08:	8f 4f       	sbci	r24, 0xFF	; 255
    2d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    2d0c:	af 4f       	sbci	r26, 0xFF	; 255
    2d0e:	b1 e0       	ldi	r27, 0x01	; 1
    2d10:	3e d0       	rcall	.+124    	; 0x2d8e <__ultoa_invert+0x9c>
    2d12:	b4 e0       	ldi	r27, 0x04	; 4
    2d14:	3c d0       	rcall	.+120    	; 0x2d8e <__ultoa_invert+0x9c>
    2d16:	67 0f       	add	r22, r23
    2d18:	78 1f       	adc	r23, r24
    2d1a:	89 1f       	adc	r24, r25
    2d1c:	9a 1f       	adc	r25, r26
    2d1e:	a1 1d       	adc	r26, r1
    2d20:	68 0f       	add	r22, r24
    2d22:	79 1f       	adc	r23, r25
    2d24:	8a 1f       	adc	r24, r26
    2d26:	91 1d       	adc	r25, r1
    2d28:	a1 1d       	adc	r26, r1
    2d2a:	6a 0f       	add	r22, r26
    2d2c:	71 1d       	adc	r23, r1
    2d2e:	81 1d       	adc	r24, r1
    2d30:	91 1d       	adc	r25, r1
    2d32:	a1 1d       	adc	r26, r1
    2d34:	20 d0       	rcall	.+64     	; 0x2d76 <__ultoa_invert+0x84>
    2d36:	09 f4       	brne	.+2      	; 0x2d3a <__ultoa_invert+0x48>
    2d38:	68 94       	set
    2d3a:	3f 91       	pop	r19
    2d3c:	2a e0       	ldi	r18, 0x0A	; 10
    2d3e:	26 9f       	mul	r18, r22
    2d40:	11 24       	eor	r1, r1
    2d42:	30 19       	sub	r19, r0
    2d44:	30 5d       	subi	r19, 0xD0	; 208
    2d46:	31 93       	st	Z+, r19
    2d48:	de f6       	brtc	.-74     	; 0x2d00 <__ultoa_invert+0xe>
    2d4a:	cf 01       	movw	r24, r30
    2d4c:	08 95       	ret
    2d4e:	46 2f       	mov	r20, r22
    2d50:	47 70       	andi	r20, 0x07	; 7
    2d52:	40 5d       	subi	r20, 0xD0	; 208
    2d54:	41 93       	st	Z+, r20
    2d56:	b3 e0       	ldi	r27, 0x03	; 3
    2d58:	0f d0       	rcall	.+30     	; 0x2d78 <__ultoa_invert+0x86>
    2d5a:	c9 f7       	brne	.-14     	; 0x2d4e <__ultoa_invert+0x5c>
    2d5c:	f6 cf       	rjmp	.-20     	; 0x2d4a <__ultoa_invert+0x58>
    2d5e:	46 2f       	mov	r20, r22
    2d60:	4f 70       	andi	r20, 0x0F	; 15
    2d62:	40 5d       	subi	r20, 0xD0	; 208
    2d64:	4a 33       	cpi	r20, 0x3A	; 58
    2d66:	18 f0       	brcs	.+6      	; 0x2d6e <__ultoa_invert+0x7c>
    2d68:	49 5d       	subi	r20, 0xD9	; 217
    2d6a:	31 fd       	sbrc	r19, 1
    2d6c:	40 52       	subi	r20, 0x20	; 32
    2d6e:	41 93       	st	Z+, r20
    2d70:	02 d0       	rcall	.+4      	; 0x2d76 <__ultoa_invert+0x84>
    2d72:	a9 f7       	brne	.-22     	; 0x2d5e <__ultoa_invert+0x6c>
    2d74:	ea cf       	rjmp	.-44     	; 0x2d4a <__ultoa_invert+0x58>
    2d76:	b4 e0       	ldi	r27, 0x04	; 4
    2d78:	a6 95       	lsr	r26
    2d7a:	97 95       	ror	r25
    2d7c:	87 95       	ror	r24
    2d7e:	77 95       	ror	r23
    2d80:	67 95       	ror	r22
    2d82:	ba 95       	dec	r27
    2d84:	c9 f7       	brne	.-14     	; 0x2d78 <__ultoa_invert+0x86>
    2d86:	00 97       	sbiw	r24, 0x00	; 0
    2d88:	61 05       	cpc	r22, r1
    2d8a:	71 05       	cpc	r23, r1
    2d8c:	08 95       	ret
    2d8e:	9b 01       	movw	r18, r22
    2d90:	ac 01       	movw	r20, r24
    2d92:	0a 2e       	mov	r0, r26
    2d94:	06 94       	lsr	r0
    2d96:	57 95       	ror	r21
    2d98:	47 95       	ror	r20
    2d9a:	37 95       	ror	r19
    2d9c:	27 95       	ror	r18
    2d9e:	ba 95       	dec	r27
    2da0:	c9 f7       	brne	.-14     	; 0x2d94 <__ultoa_invert+0xa2>
    2da2:	62 0f       	add	r22, r18
    2da4:	73 1f       	adc	r23, r19
    2da6:	84 1f       	adc	r24, r20
    2da8:	95 1f       	adc	r25, r21
    2daa:	a0 1d       	adc	r26, r0
    2dac:	08 95       	ret

00002dae <_exit>:
    2dae:	f8 94       	cli

00002db0 <__stop_program>:
    2db0:	ff cf       	rjmp	.-2      	; 0x2db0 <__stop_program>
