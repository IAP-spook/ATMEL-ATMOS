
ATMOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
<<<<<<< HEAD
  0 .data         000004d0  00800200  0000436e  00004402  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000436e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005ab  008006d0  008006d0  000048d2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000048d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00004930  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000888  00000000  00000000  00004974  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000aed4  00000000  00000000  000051fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003559  00000000  00000000  000100d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004ed4  00000000  00000000  00013629  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000179c  00000000  00000000  00018500  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000254d  00000000  00000000  00019c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005acf  00000000  00000000  0001c1e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007e8  00000000  00000000  00021cb8  2**0
=======
  0 .data         0000035e  00800200  000034a8  0000353c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004ca  0080055e  0080055e  0000389a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000389a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000007c8  00000000  00000000  000038f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00009847  00000000  00000000  000040be  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000308d  00000000  00000000  0000d905  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002f89  00000000  00000000  00010992  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001370  00000000  00000000  0001391c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000223e  00000000  00000000  00014c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004c85  00000000  00000000  00016eca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000788  00000000  00000000  0001bb4f  2**0
>>>>>>> refs/remotes/origin/master
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1a c1       	rjmp	.+564    	; 0x236 <__ctors_end>
       2:	00 00       	nop
       4:	38 c1       	rjmp	.+624    	; 0x276 <__bad_interrupt>
       6:	00 00       	nop
       8:	36 c1       	rjmp	.+620    	; 0x276 <__bad_interrupt>
       a:	00 00       	nop
       c:	34 c1       	rjmp	.+616    	; 0x276 <__bad_interrupt>
       e:	00 00       	nop
      10:	32 c1       	rjmp	.+612    	; 0x276 <__bad_interrupt>
      12:	00 00       	nop
      14:	30 c1       	rjmp	.+608    	; 0x276 <__bad_interrupt>
      16:	00 00       	nop
      18:	2e c1       	rjmp	.+604    	; 0x276 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2c c1       	rjmp	.+600    	; 0x276 <__bad_interrupt>
      1e:	00 00       	nop
      20:	2a c1       	rjmp	.+596    	; 0x276 <__bad_interrupt>
      22:	00 00       	nop
      24:	28 c1       	rjmp	.+592    	; 0x276 <__bad_interrupt>
      26:	00 00       	nop
      28:	26 c1       	rjmp	.+588    	; 0x276 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	24 c1       	rjmp	.+584    	; 0x276 <__bad_interrupt>
      2e:	00 00       	nop
      30:	22 c1       	rjmp	.+580    	; 0x276 <__bad_interrupt>
      32:	00 00       	nop
      34:	20 c1       	rjmp	.+576    	; 0x276 <__bad_interrupt>
      36:	00 00       	nop
      38:	1e c1       	rjmp	.+572    	; 0x276 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	6a c3       	rjmp	.+1748   	; 0x712 <__vector_15>
      3e:	00 00       	nop
      40:	1a c1       	rjmp	.+564    	; 0x276 <__bad_interrupt>
      42:	00 00       	nop
      44:	18 c1       	rjmp	.+560    	; 0x276 <__bad_interrupt>
      46:	00 00       	nop
      48:	16 c1       	rjmp	.+556    	; 0x276 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	14 c1       	rjmp	.+552    	; 0x276 <__bad_interrupt>
      4e:	00 00       	nop
      50:	12 c1       	rjmp	.+548    	; 0x276 <__bad_interrupt>
      52:	00 00       	nop
      54:	10 c1       	rjmp	.+544    	; 0x276 <__bad_interrupt>
      56:	00 00       	nop
      58:	0e c1       	rjmp	.+540    	; 0x276 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c c1       	rjmp	.+536    	; 0x276 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0a c1       	rjmp	.+532    	; 0x276 <__bad_interrupt>
      62:	00 00       	nop
      64:	08 c1       	rjmp	.+528    	; 0x276 <__bad_interrupt>
      66:	00 00       	nop
      68:	06 c1       	rjmp	.+524    	; 0x276 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	04 c1       	rjmp	.+520    	; 0x276 <__bad_interrupt>
      6e:	00 00       	nop
      70:	02 c1       	rjmp	.+516    	; 0x276 <__bad_interrupt>
      72:	00 00       	nop
      74:	00 c1       	rjmp	.+512    	; 0x276 <__bad_interrupt>
      76:	00 00       	nop
      78:	fe c0       	rjmp	.+508    	; 0x276 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fc c0       	rjmp	.+504    	; 0x276 <__bad_interrupt>
      7e:	00 00       	nop
      80:	fa c0       	rjmp	.+500    	; 0x276 <__bad_interrupt>
      82:	00 00       	nop
      84:	f8 c0       	rjmp	.+496    	; 0x276 <__bad_interrupt>
      86:	00 00       	nop
      88:	f6 c0       	rjmp	.+492    	; 0x276 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f4 c0       	rjmp	.+488    	; 0x276 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f2 c0       	rjmp	.+484    	; 0x276 <__bad_interrupt>
      92:	00 00       	nop
      94:	f0 c0       	rjmp	.+480    	; 0x276 <__bad_interrupt>
      96:	00 00       	nop
      98:	ee c0       	rjmp	.+476    	; 0x276 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ec c0       	rjmp	.+472    	; 0x276 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ea c0       	rjmp	.+468    	; 0x276 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e8 c0       	rjmp	.+464    	; 0x276 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	f6 c5       	rjmp	.+3052   	; 0xc96 <__vector_42>
      aa:	00 00       	nop
      ac:	e4 c0       	rjmp	.+456    	; 0x276 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e2 c0       	rjmp	.+452    	; 0x276 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e0 c0       	rjmp	.+448    	; 0x276 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	de c0       	rjmp	.+444    	; 0x276 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	dc c0       	rjmp	.+440    	; 0x276 <__bad_interrupt>
      be:	00 00       	nop
      c0:	da c0       	rjmp	.+436    	; 0x276 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d8 c0       	rjmp	.+432    	; 0x276 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d6 c0       	rjmp	.+428    	; 0x276 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d4 c0       	rjmp	.+424    	; 0x276 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d2 c0       	rjmp	.+420    	; 0x276 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d0 c0       	rjmp	.+416    	; 0x276 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ce c0       	rjmp	.+412    	; 0x276 <__bad_interrupt>
      da:	00 00       	nop
      dc:	cc c0       	rjmp	.+408    	; 0x276 <__bad_interrupt>
      de:	00 00       	nop
      e0:	ca c0       	rjmp	.+404    	; 0x276 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c8 c0       	rjmp	.+400    	; 0x276 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	c6 c0       	rjmp	.+396    	; 0x276 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	c4 c0       	rjmp	.+392    	; 0x276 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c2 c0       	rjmp	.+388    	; 0x276 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	c0 c0       	rjmp	.+384    	; 0x276 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	be c0       	rjmp	.+380    	; 0x276 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	bc c0       	rjmp	.+376    	; 0x276 <__bad_interrupt>
      fe:	00 00       	nop
     100:	ba c0       	rjmp	.+372    	; 0x276 <__bad_interrupt>
     102:	00 00       	nop
     104:	b8 c0       	rjmp	.+368    	; 0x276 <__bad_interrupt>
     106:	00 00       	nop
     108:	b6 c0       	rjmp	.+364    	; 0x276 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	b4 c0       	rjmp	.+360    	; 0x276 <__bad_interrupt>
     10e:	00 00       	nop
     110:	b2 c0       	rjmp	.+356    	; 0x276 <__bad_interrupt>
     112:	00 00       	nop
     114:	b0 c0       	rjmp	.+352    	; 0x276 <__bad_interrupt>
     116:	00 00       	nop
     118:	ae c0       	rjmp	.+348    	; 0x276 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	ac c0       	rjmp	.+344    	; 0x276 <__bad_interrupt>
     11e:	00 00       	nop
     120:	aa c0       	rjmp	.+340    	; 0x276 <__bad_interrupt>
     122:	00 00       	nop
     124:	a8 c0       	rjmp	.+336    	; 0x276 <__bad_interrupt>
     126:	00 00       	nop
     128:	a6 c0       	rjmp	.+332    	; 0x276 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	a4 c0       	rjmp	.+328    	; 0x276 <__bad_interrupt>
     12e:	00 00       	nop
     130:	a2 c0       	rjmp	.+324    	; 0x276 <__bad_interrupt>
	...

00000134 <__trampolines_end>:
     134:	6e 61       	ori	r22, 0x1E	; 30
     136:	6e 00       	.word	0x006e	; ????

00000138 <__c.2177>:
     138:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     148:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     158:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     168:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     178:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     188:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     198:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     208:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     218:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     228:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000236 <__ctors_end>:
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	d1 e8       	ldi	r29, 0x81	; 129
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61
<<<<<<< HEAD
     242:	00 e0       	ldi	r16, 0x00	; 0
     244:	0c bf       	out	0x3c, r16	; 60

00000246 <__do_copy_data>:
     246:	16 e0       	ldi	r17, 0x06	; 6
     248:	a0 e0       	ldi	r26, 0x00	; 0
     24a:	b2 e0       	ldi	r27, 0x02	; 2
     24c:	ee e6       	ldi	r30, 0x6E	; 110
     24e:	f3 e4       	ldi	r31, 0x43	; 67
     250:	00 e0       	ldi	r16, 0x00	; 0
     252:	0b bf       	out	0x3b, r16	; 59
     254:	02 c0       	rjmp	.+4      	; 0x25a <__do_copy_data+0x14>
     256:	07 90       	elpm	r0, Z+
     258:	0d 92       	st	X+, r0
     25a:	a0 3d       	cpi	r26, 0xD0	; 208
     25c:	b1 07       	cpc	r27, r17
     25e:	d9 f7       	brne	.-10     	; 0x256 <__do_copy_data+0x10>

00000260 <__do_clear_bss>:
     260:	2c e0       	ldi	r18, 0x0C	; 12
     262:	a0 ed       	ldi	r26, 0xD0	; 208
     264:	b6 e0       	ldi	r27, 0x06	; 6
     266:	01 c0       	rjmp	.+2      	; 0x26a <.do_clear_bss_start>

00000268 <.do_clear_bss_loop>:
     268:	1d 92       	st	X+, r1

0000026a <.do_clear_bss_start>:
     26a:	ab 37       	cpi	r26, 0x7B	; 123
     26c:	b2 07       	cpc	r27, r18
     26e:	e1 f7       	brne	.-8      	; 0x268 <.do_clear_bss_loop>
     270:	94 d0       	rcall	.+296    	; 0x39a <main>
     272:	0c 94 b5 21 	jmp	0x436a	; 0x436a <_exit>

00000276 <__bad_interrupt>:
     276:	c4 ce       	rjmp	.-632    	; 0x0 <__vectors>

00000278 <init_parameter>:
	/* if there are some other parameters other than devices' and sensors', update them below as well */
=======

00000242 <__do_copy_data>:
     242:	15 e0       	ldi	r17, 0x05	; 5
     244:	a0 e0       	ldi	r26, 0x00	; 0
     246:	b2 e0       	ldi	r27, 0x02	; 2
     248:	e8 ea       	ldi	r30, 0xA8	; 168
     24a:	f4 e3       	ldi	r31, 0x34	; 52
     24c:	02 c0       	rjmp	.+4      	; 0x252 <__do_copy_data+0x10>
     24e:	05 90       	lpm	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	ae 35       	cpi	r26, 0x5E	; 94
     254:	b1 07       	cpc	r27, r17
     256:	d9 f7       	brne	.-10     	; 0x24e <__do_copy_data+0xc>

00000258 <__do_clear_bss>:
     258:	2a e0       	ldi	r18, 0x0A	; 10
     25a:	ae e5       	ldi	r26, 0x5E	; 94
     25c:	b5 e0       	ldi	r27, 0x05	; 5
     25e:	01 c0       	rjmp	.+2      	; 0x262 <.do_clear_bss_start>

00000260 <.do_clear_bss_loop>:
     260:	1d 92       	st	X+, r1

00000262 <.do_clear_bss_start>:
     262:	a8 32       	cpi	r26, 0x28	; 40
     264:	b2 07       	cpc	r27, r18
     266:	e1 f7       	brne	.-8      	; 0x260 <.do_clear_bss_loop>
     268:	0e 94 3a 01 	call	0x274	; 0x274 <main>
     26c:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <_exit>

00000270 <__bad_interrupt>:
     270:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000274 <main>:
>>>>>>> refs/remotes/origin/master
}

/* init all devices' parameters */
void init_parameter(GlobalParameter * globalPara)
{
     278:	af 92       	push	r10
     27a:	bf 92       	push	r11
     27c:	cf 92       	push	r12
     27e:	df 92       	push	r13
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	5c 01       	movw	r10, r24
     28e:	a6 e3       	ldi	r26, 0x36	; 54
     290:	b2 e0       	ldi	r27, 0x02	; 2
     292:	fc 01       	movw	r30, r24
     294:	b0 96       	adiw	r30, 0x20	; 32
     296:	2a e2       	ldi	r18, 0x2A	; 42
     298:	32 e0       	ldi	r19, 0x02	; 2
     29a:	8e e1       	ldi	r24, 0x1E	; 30
     29c:	92 e0       	ldi	r25, 0x02	; 2
     29e:	02 e4       	ldi	r16, 0x42	; 66
     2a0:	12 e0       	ldi	r17, 0x02	; 2
	/* init all sensors' parameters */
	for( int i = 0 ; i < SensorListEnd ; ++i )
	{
		//printf("%d\t%d\t%d\t%d\n",SensorInitStartTimeList[i],SENSOR_INIT_PERIOD,SensorCheckCodeList[i],SensorNumDataList[i]);
		globalPara->SensorList[i].StartTime = SensorInitStartTimeList[i];
		globalPara->SensorList[i].ExecutePeriod = SENSOR_INIT_PERIOD;
     2a2:	0f 2e       	mov	r0, r31
     2a4:	f0 ee       	ldi	r31, 0xE0	; 224
     2a6:	cf 2e       	mov	r12, r31
     2a8:	fe e2       	ldi	r31, 0x2E	; 46
     2aa:	df 2e       	mov	r13, r31
     2ac:	e1 2c       	mov	r14, r1
     2ae:	f1 2c       	mov	r15, r1
     2b0:	f0 2d       	mov	r31, r0
{
	/* init all sensors' parameters */
	for( int i = 0 ; i < SensorListEnd ; ++i )
	{
		//printf("%d\t%d\t%d\t%d\n",SensorInitStartTimeList[i],SENSOR_INIT_PERIOD,SensorCheckCodeList[i],SensorNumDataList[i]);
		globalPara->SensorList[i].StartTime = SensorInitStartTimeList[i];
     2b2:	4d 91       	ld	r20, X+
     2b4:	5d 91       	ld	r21, X+
     2b6:	6d 91       	ld	r22, X+
     2b8:	7d 91       	ld	r23, X+
     2ba:	40 83       	st	Z, r20
     2bc:	51 83       	std	Z+1, r21	; 0x01
     2be:	62 83       	std	Z+2, r22	; 0x02
     2c0:	73 83       	std	Z+3, r23	; 0x03
		globalPara->SensorList[i].ExecutePeriod = SENSOR_INIT_PERIOD;
     2c2:	c4 82       	std	Z+4, r12	; 0x04
     2c4:	d5 82       	std	Z+5, r13	; 0x05
     2c6:	e6 82       	std	Z+6, r14	; 0x06
     2c8:	f7 82       	std	Z+7, r15	; 0x07
		globalPara->SensorList[i].CheckCode = SensorCheckCodeList[i];
     2ca:	e9 01       	movw	r28, r18
     2cc:	49 91       	ld	r20, Y+
     2ce:	59 91       	ld	r21, Y+
     2d0:	69 91       	ld	r22, Y+
     2d2:	79 91       	ld	r23, Y+
     2d4:	9e 01       	movw	r18, r28
     2d6:	44 87       	std	Z+12, r20	; 0x0c
     2d8:	55 87       	std	Z+13, r21	; 0x0d
     2da:	66 87       	std	Z+14, r22	; 0x0e
     2dc:	77 87       	std	Z+15, r23	; 0x0f
		globalPara->SensorList[i].NumOfData = SensorNumDataList[i];
     2de:	ec 01       	movw	r28, r24
     2e0:	49 91       	ld	r20, Y+
     2e2:	59 91       	ld	r21, Y+
     2e4:	69 91       	ld	r22, Y+
     2e6:	79 91       	ld	r23, Y+
     2e8:	ce 01       	movw	r24, r28
     2ea:	40 87       	std	Z+8, r20	; 0x08
     2ec:	51 87       	std	Z+9, r21	; 0x09
     2ee:	62 87       	std	Z+10, r22	; 0x0a
     2f0:	73 87       	std	Z+11, r23	; 0x0b
     2f2:	70 96       	adiw	r30, 0x10	; 16

/* init all devices' parameters */
void init_parameter(GlobalParameter * globalPara)
{
	/* init all sensors' parameters */
	for( int i = 0 ; i < SensorListEnd ; ++i )
     2f4:	a0 17       	cp	r26, r16
     2f6:	b1 07       	cpc	r27, r17
     2f8:	e1 f6       	brne	.-72     	; 0x2b2 <init_parameter+0x3a>
	
	/* init all devices' parameters */
	for( int i = 0 ; i < DeviceListEnd ; ++i )
	{
		//printf("%d\t%d\t%d\t%d\n",DeviceInitStartTimeList[i],DeviceInitPeriodList[i],DeviceCheckCodeList[i],0);
		globalPara->DeviceList[i].StartTime = DeviceInitStartTimeList[i];
     2fa:	8e e0       	ldi	r24, 0x0E	; 14
     2fc:	92 e0       	ldi	r25, 0x02	; 2
     2fe:	fc 01       	movw	r30, r24
     300:	40 81       	ld	r20, Z
     302:	51 81       	ldd	r21, Z+1	; 0x01
     304:	62 81       	ldd	r22, Z+2	; 0x02
     306:	73 81       	ldd	r23, Z+3	; 0x03
     308:	e5 01       	movw	r28, r10
     30a:	48 83       	st	Y, r20
     30c:	59 83       	std	Y+1, r21	; 0x01
     30e:	6a 83       	std	Y+2, r22	; 0x02
     310:	7b 83       	std	Y+3, r23	; 0x03
		globalPara->DeviceList[i].ExecutePeriod = DeviceInitPeriodList[i];
     312:	a6 e1       	ldi	r26, 0x16	; 22
     314:	b2 e0       	ldi	r27, 0x02	; 2
     316:	4d 91       	ld	r20, X+
     318:	5d 91       	ld	r21, X+
     31a:	6d 91       	ld	r22, X+
     31c:	7c 91       	ld	r23, X
     31e:	13 97       	sbiw	r26, 0x03	; 3
     320:	4c 83       	std	Y+4, r20	; 0x04
     322:	5d 83       	std	Y+5, r21	; 0x05
     324:	6e 83       	std	Y+6, r22	; 0x06
     326:	7f 83       	std	Y+7, r23	; 0x07
		globalPara->DeviceList[i].CheckCode = DeviceCheckCodeList[i]; 
     328:	e6 e0       	ldi	r30, 0x06	; 6
     32a:	f2 e0       	ldi	r31, 0x02	; 2
     32c:	40 81       	ld	r20, Z
     32e:	51 81       	ldd	r21, Z+1	; 0x01
     330:	62 81       	ldd	r22, Z+2	; 0x02
     332:	73 81       	ldd	r23, Z+3	; 0x03
     334:	4c 87       	std	Y+12, r20	; 0x0c
     336:	5d 87       	std	Y+13, r21	; 0x0d
     338:	6e 87       	std	Y+14, r22	; 0x0e
     33a:	7f 87       	std	Y+15, r23	; 0x0f
		globalPara->DeviceList[i].NumOfData = 0;
     33c:	18 86       	std	Y+8, r1	; 0x08
     33e:	19 86       	std	Y+9, r1	; 0x09
     340:	1a 86       	std	Y+10, r1	; 0x0a
     342:	1b 86       	std	Y+11, r1	; 0x0b
	
	/* init all devices' parameters */
	for( int i = 0 ; i < DeviceListEnd ; ++i )
	{
		//printf("%d\t%d\t%d\t%d\n",DeviceInitStartTimeList[i],DeviceInitPeriodList[i],DeviceCheckCodeList[i],0);
		globalPara->DeviceList[i].StartTime = DeviceInitStartTimeList[i];
     344:	ec 01       	movw	r28, r24
     346:	4c 81       	ldd	r20, Y+4	; 0x04
     348:	5d 81       	ldd	r21, Y+5	; 0x05
     34a:	6e 81       	ldd	r22, Y+6	; 0x06
     34c:	7f 81       	ldd	r23, Y+7	; 0x07
     34e:	e5 01       	movw	r28, r10
     350:	48 8b       	std	Y+16, r20	; 0x10
     352:	59 8b       	std	Y+17, r21	; 0x11
     354:	6a 8b       	std	Y+18, r22	; 0x12
     356:	7b 8b       	std	Y+19, r23	; 0x13
		globalPara->DeviceList[i].ExecutePeriod = DeviceInitPeriodList[i];
     358:	14 96       	adiw	r26, 0x04	; 4
     35a:	8d 91       	ld	r24, X+
     35c:	9d 91       	ld	r25, X+
     35e:	0d 90       	ld	r0, X+
     360:	bc 91       	ld	r27, X
     362:	a0 2d       	mov	r26, r0
     364:	8c 8b       	std	Y+20, r24	; 0x14
     366:	9d 8b       	std	Y+21, r25	; 0x15
     368:	ae 8b       	std	Y+22, r26	; 0x16
     36a:	bf 8b       	std	Y+23, r27	; 0x17
		globalPara->DeviceList[i].CheckCode = DeviceCheckCodeList[i]; 
     36c:	84 81       	ldd	r24, Z+4	; 0x04
     36e:	95 81       	ldd	r25, Z+5	; 0x05
     370:	a6 81       	ldd	r26, Z+6	; 0x06
     372:	b7 81       	ldd	r27, Z+7	; 0x07
     374:	8c 8f       	std	Y+28, r24	; 0x1c
     376:	9d 8f       	std	Y+29, r25	; 0x1d
     378:	ae 8f       	std	Y+30, r26	; 0x1e
     37a:	bf 8f       	std	Y+31, r27	; 0x1f
		globalPara->DeviceList[i].NumOfData = 0;
     37c:	18 8e       	std	Y+24, r1	; 0x18
     37e:	19 8e       	std	Y+25, r1	; 0x19
     380:	1a 8e       	std	Y+26, r1	; 0x1a
     382:	1b 8e       	std	Y+27, r1	; 0x1b
	}
}
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	ff 90       	pop	r15
     38e:	ef 90       	pop	r14
     390:	df 90       	pop	r13
     392:	cf 90       	pop	r12
     394:	bf 90       	pop	r11
     396:	af 90       	pop	r10
     398:	08 95       	ret

0000039a <main>:
	// load_new_sensor( 4, 4, (BaseSensor *)Si7020_ptr, 0 );	
}

int main(void)
{
	SYS_Init();
<<<<<<< HEAD
     39a:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <SYS_Init>
tm cur_time;
GlobalParameter GP;
=======
     274:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <SYS_Init>
int SensorDataCount;
DataUnit *cur_data;
>>>>>>> refs/remotes/origin/master

/* TODO : clean up these messy init */
static void APP_Init(void){
	PWR_Init();
     39e:	30 d3       	rcall	.+1632   	; 0xa00 <PWR_Init>
	PWR_TurnOn5V();
     3a0:	33 d3       	rcall	.+1638   	; 0xa08 <PWR_TurnOn5V>
	USART0_Init(9600);
     3a2:	60 e8       	ldi	r22, 0x80	; 128
     3a4:	75 e2       	ldi	r23, 0x25	; 37
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0b d4       	rcall	.+2070   	; 0xbc2 <USART0_Init>
	DDRB |= 0b00010000;
     3ac:	24 9a       	sbi	0x04, 4	; 4
	DDRE |= 0b00001000;
     3ae:	6b 9a       	sbi	0x0d, 3	; 13
	PORTE|= 0b00001000;
     3b0:	73 9a       	sbi	0x0e, 3	; 14
	TWI_Init(10000);
     3b2:	60 e1       	ldi	r22, 0x10	; 16
     3b4:	77 e2       	ldi	r23, 0x27	; 39
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	2c d3       	rcall	.+1624   	; 0xa14 <TWI_Init>
	ADC_Init();
     3bc:	9e d1       	rcall	.+828    	; 0x6fa <ADC_Init>
	printf("BMP280 Status %i\n", BMP280_Init());
<<<<<<< HEAD
     3be:	0e 94 b5 0e 	call	0x1d6a	; 0x1d6a <BMP280_Init>
     3c2:	9f 93       	push	r25
     3c4:	8f 93       	push	r24
     3c6:	86 e9       	ldi	r24, 0x96	; 150
     3c8:	92 e0       	ldi	r25, 0x02	; 2
     3ca:	9f 93       	push	r25
     3cc:	8f 93       	push	r24
     3ce:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
=======
     2a2:	0e 94 03 02 	call	0x406	; 0x406 <BMP280_Init>
     2a6:	9f 93       	push	r25
     2a8:	8f 93       	push	r24
     2aa:	84 e5       	ldi	r24, 0x54	; 84
     2ac:	92 e0       	ldi	r25, 0x02	; 2
     2ae:	9f 93       	push	r25
     2b0:	8f 93       	push	r24
     2b2:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
>>>>>>> refs/remotes/origin/master
	BMP280_SetOversampling(4);
     3d2:	84 e0       	ldi	r24, 0x04	; 4
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 e4 10 	call	0x21c8	; 0x21c8 <BMP280_SetOversampling>
	SPI_SlaveInit();
     3da:	18 d3       	rcall	.+1584   	; 0xa0c <SPI_SlaveInit>
	SensorDataCount = 0;
<<<<<<< HEAD
     3dc:	10 92 f1 0b 	sts	0x0BF1, r1
     3e0:	10 92 f0 0b 	sts	0x0BF0, r1
}

static void DEVICE_Init(void){
=======
     2c2:	10 92 ec 09 	sts	0x09EC, r1
     2c6:	10 92 eb 09 	sts	0x09EB, r1
{
	SYS_Init();
	APP_Init();
>>>>>>> refs/remotes/origin/master
	
	init_parameter(&GP);
     3e4:	82 ef       	ldi	r24, 0xF2	; 242
     3e6:	9b e0       	ldi	r25, 0x0B	; 11
     3e8:	47 df       	rcall	.-370    	; 0x278 <init_parameter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3ea:	8f e8       	ldi	r24, 0x8F	; 143
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	01 97       	sbiw	r24, 0x01	; 1
     3f0:	f1 f7       	brne	.-4      	; 0x3ee <main+0x54>
     3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <main+0x5a>
     3f4:	00 00       	nop
	delay_us(100);
		
	init_timeoutq();
<<<<<<< HEAD
     3f6:	98 d6       	rcall	.+3376   	; 0x1128 <init_timeoutq>
     3f8:	8f e8       	ldi	r24, 0x8F	; 143
     3fa:	91 e0       	ldi	r25, 0x01	; 1
     3fc:	01 97       	sbiw	r24, 0x01	; 1
     3fe:	f1 f7       	brne	.-4      	; 0x3fc <main+0x62>
     400:	00 c0       	rjmp	.+0      	; 0x402 <main+0x68>
     402:	00 00       	nop
	delay_us(100);
	
	init_timestamp(&cur_time);
     404:	82 e1       	ldi	r24, 0x12	; 18
     406:	9a e0       	ldi	r25, 0x0A	; 10
     408:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <init_timestamp>
     40c:	8f e8       	ldi	r24, 0x8F	; 143
     40e:	91 e0       	ldi	r25, 0x01	; 1
     410:	01 97       	sbiw	r24, 0x01	; 1
     412:	f1 f7       	brne	.-4      	; 0x410 <main+0x76>
     414:	00 c0       	rjmp	.+0      	; 0x416 <main+0x7c>
     416:	00 00       	nop
	delay_us(100);
	
	BMP280Sensor *BMP280_ptr = New_BMP280_Sensor( 0,2 /* GP.SensorList[i].NumOfData */ );
     418:	62 e0       	ldi	r22, 0x02	; 2
     41a:	70 e0       	ldi	r23, 0x00	; 0
     41c:	80 e0       	ldi	r24, 0x00	; 0
     41e:	90 e0       	ldi	r25, 0x00	; 0
     420:	0e 94 7b 18 	call	0x30f6	; 0x30f6 <New_BMP280_Sensor>
     424:	8c 01       	movw	r16, r24
	printf("init success");
     426:	88 ea       	ldi	r24, 0xA8	; 168
     428:	92 e0       	ldi	r25, 0x02	; 2
     42a:	9f 93       	push	r25
     42c:	8f 93       	push	r24
     42e:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
     432:	8f e8       	ldi	r24, 0x8F	; 143
     434:	91 e0       	ldi	r25, 0x01	; 1
     436:	01 97       	sbiw	r24, 0x01	; 1
     438:	f1 f7       	brne	.-4      	; 0x436 <main+0x9c>
     43a:	00 c0       	rjmp	.+0      	; 0x43c <main+0xa2>
     43c:	00 00       	nop
	delay_us(100);
	
	/*Si7020Sensor *Si_ptr = New_Si7020_Sensor(0,2); */
	K30Sensor *K30_ptr = New_K30_Sensor(0,1);
     43e:	61 e0       	ldi	r22, 0x01	; 1
     440:	70 e0       	ldi	r23, 0x00	; 0
     442:	80 e0       	ldi	r24, 0x00	; 0
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	17 d1       	rcall	.+558    	; 0x676 <New_K30_Sensor>
     448:	4c 01       	movw	r8, r24
	
	DemoStorageDevice *Strg_ptr = New_DemoStorage_Device(0);
     44a:	80 e0       	ldi	r24, 0x00	; 0
     44c:	90 e0       	ldi	r25, 0x00	; 0
     44e:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <New_DemoStorage_Device>
     452:	6c 01       	movw	r12, r24
	LoadDataDevice *Load_ptr = New_LoadData_Device(0,Strg_ptr);
     454:	bc 01       	movw	r22, r24
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	90 e0       	ldi	r25, 0x00	; 0
     45a:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <New_LoadData_Device>
     45e:	5c 01       	movw	r10, r24
=======
     2ca:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <init_timeoutq>
	BMP280Sensor *BMP280_ptr = New_BMP280_Sensor( 0,2 );
     2ce:	62 e0       	ldi	r22, 0x02	; 2
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 9a 10 	call	0x2134	; 0x2134 <New_BMP280_Sensor>
     2da:	6c 01       	movw	r12, r24
	Si7020Sensor *Si_ptr = New_Si7020_Sensor(0,2);
     2dc:	62 e0       	ldi	r22, 0x02	; 2
     2de:	70 e0       	ldi	r23, 0x00	; 0
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 3e 11 	call	0x227c	; 0x227c <New_Si7020_Sensor>
     2e8:	7c 01       	movw	r14, r24
	
	DemoStorageDevice *Strg_ptr = New_DemoStorage_Device(0);
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <New_DemoStorage_Device>
     2f2:	ec 01       	movw	r28, r24
	LoadDataDevice *Load_ptr = New_LoadData_Device(0,Strg_ptr);
     2f4:	bc 01       	movw	r22, r24
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <New_LoadData_Device>
     2fe:	8c 01       	movw	r16, r24
>>>>>>> refs/remotes/origin/master
	
	init_Event_Timer();
     460:	a0 d1       	rcall	.+832    	; 0x7a2 <init_Event_Timer>
	printf("init done!\n");
<<<<<<< HEAD
     462:	85 eb       	ldi	r24, 0xB5	; 181
     464:	92 e0       	ldi	r25, 0x02	; 2
     466:	0e 94 27 21 	call	0x424e	; 0x424e <puts>
	
	/* load all sensors */
	load_new_sensor( GP.SensorList[BMP280].StartTime, GP.SensorList[BMP280].ExecutePeriod, (BaseSensor *)BMP280_ptr, 0 );
     46a:	c2 ef       	ldi	r28, 0xF2	; 242
     46c:	db e0       	ldi	r29, 0x0B	; 11
     46e:	2c a1       	ldd	r18, Y+36	; 0x24
     470:	3d a1       	ldd	r19, Y+37	; 0x25
     472:	4e a1       	ldd	r20, Y+38	; 0x26
     474:	5f a1       	ldd	r21, Y+39	; 0x27
     476:	68 a1       	ldd	r22, Y+32	; 0x20
     478:	79 a1       	ldd	r23, Y+33	; 0x21
     47a:	8a a1       	ldd	r24, Y+34	; 0x22
     47c:	9b a1       	ldd	r25, Y+35	; 0x23
     47e:	e1 2c       	mov	r14, r1
     480:	f1 2c       	mov	r15, r1
     482:	09 d7       	rcall	.+3602   	; 0x1296 <load_new_sensor>
	/* load_new_sensor( GP.SensorList[Si7020].StartTime, GP.SensorList[Si7020].ExecutePeriod, (BaseSensor *)Si_ptr, 0 ); */
	load_new_sensor( GP.SensorList[K30].StartTime, GP.SensorList[K30].ExecutePeriod, (BaseSensor *)K30_ptr, 0 );
     484:	20 91 36 0c 	lds	r18, 0x0C36
     488:	30 91 37 0c 	lds	r19, 0x0C37
     48c:	40 91 38 0c 	lds	r20, 0x0C38
     490:	50 91 39 0c 	lds	r21, 0x0C39
     494:	60 91 32 0c 	lds	r22, 0x0C32
     498:	70 91 33 0c 	lds	r23, 0x0C33
     49c:	80 91 34 0c 	lds	r24, 0x0C34
     4a0:	90 91 35 0c 	lds	r25, 0x0C35
     4a4:	84 01       	movw	r16, r8
     4a6:	f7 d6       	rcall	.+3566   	; 0x1296 <load_new_sensor>
	
	
	printf("%d\t%d\n",GP.DeviceList[DemoStorage].StartTime,GP.DeviceList[DemoStorage].ExecutePeriod);
     4a8:	8f 89       	ldd	r24, Y+23	; 0x17
     4aa:	8f 93       	push	r24
     4ac:	8e 89       	ldd	r24, Y+22	; 0x16
     4ae:	8f 93       	push	r24
     4b0:	8d 89       	ldd	r24, Y+21	; 0x15
     4b2:	8f 93       	push	r24
     4b4:	8c 89       	ldd	r24, Y+20	; 0x14
     4b6:	8f 93       	push	r24
     4b8:	8b 89       	ldd	r24, Y+19	; 0x13
     4ba:	8f 93       	push	r24
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	8f 93       	push	r24
     4c0:	89 89       	ldd	r24, Y+17	; 0x11
     4c2:	8f 93       	push	r24
     4c4:	88 89       	ldd	r24, Y+16	; 0x10
     4c6:	8f 93       	push	r24
     4c8:	20 ec       	ldi	r18, 0xC0	; 192
     4ca:	32 e0       	ldi	r19, 0x02	; 2
     4cc:	3f 93       	push	r19
     4ce:	2f 93       	push	r18
     4d0:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
	/* load all ( non-sensor ) devices */
	load_new_device( GP.DeviceList[DemoLoadData].StartTime, GP.DeviceList[DemoLoadData].ExecutePeriod, (BaseDevice *)Load_ptr, 0 );
     4d4:	2c 81       	ldd	r18, Y+4	; 0x04
     4d6:	3d 81       	ldd	r19, Y+5	; 0x05
     4d8:	4e 81       	ldd	r20, Y+6	; 0x06
     4da:	5f 81       	ldd	r21, Y+7	; 0x07
     4dc:	68 81       	ld	r22, Y
     4de:	79 81       	ldd	r23, Y+1	; 0x01
     4e0:	8a 81       	ldd	r24, Y+2	; 0x02
     4e2:	9b 81       	ldd	r25, Y+3	; 0x03
     4e4:	85 01       	movw	r16, r10
     4e6:	19 d7       	rcall	.+3634   	; 0x131a <load_new_device>
	load_new_device( GP.DeviceList[DemoStorage].StartTime, GP.DeviceList[DemoStorage].ExecutePeriod, (BaseDevice *)Strg_ptr, 0 );
     4e8:	2c 89       	ldd	r18, Y+20	; 0x14
     4ea:	3d 89       	ldd	r19, Y+21	; 0x15
     4ec:	4e 89       	ldd	r20, Y+22	; 0x16
     4ee:	5f 89       	ldd	r21, Y+23	; 0x17
     4f0:	68 89       	ldd	r22, Y+16	; 0x10
     4f2:	79 89       	ldd	r23, Y+17	; 0x11
     4f4:	8a 89       	ldd	r24, Y+18	; 0x12
     4f6:	9b 89       	ldd	r25, Y+19	; 0x13
     4f8:	86 01       	movw	r16, r12
     4fa:	0f d7       	rcall	.+3614   	; 0x131a <load_new_device>
{
	SYS_Init();
	APP_Init();
	DEVICE_Init();

	init_set_timer( get_next_interval() );
     4fc:	5f d6       	rcall	.+3262   	; 0x11bc <get_next_interval>
     4fe:	4c d2       	rcall	.+1176   	; 0x998 <init_set_timer>
	
	// Enable global interrupt //
	sei();
     500:	78 94       	sei
     502:	8d b7       	in	r24, 0x3d	; 61
     504:	9e b7       	in	r25, 0x3e	; 62
     506:	40 96       	adiw	r24, 0x10	; 16
     508:	0f b6       	in	r0, 0x3f	; 63
     50a:	f8 94       	cli
     50c:	9e bf       	out	0x3e, r25	; 62
     50e:	0f be       	out	0x3f, r0	; 63
     510:	8d bf       	out	0x3d, r24	; 61

	for (;;){}
     512:	ff cf       	rjmp	.-2      	; 0x512 <main+0x178>

00000514 <K30_delaytime>:
*/

int K30_delaytime()
{
	char status;
	status=TWI_BeginWrite(0x68);
     514:	88 e6       	ldi	r24, 0x68	; 104
     516:	aa d2       	rcall	.+1364   	; 0xa6c <TWI_BeginWrite>
	if(status!=TWI_SLAW_ACK) return -1;
     518:	88 31       	cpi	r24, 0x18	; 24
     51a:	59 f4       	brne	.+22     	; 0x532 <K30_delaytime+0x1e>
	status=TWI_Write(&readcmd[0],4);
     51c:	64 e0       	ldi	r22, 0x04	; 4
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	82 e4       	ldi	r24, 0x42	; 66
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	35 d3       	rcall	.+1642   	; 0xb90 <TWI_Write>
	if(status!=TWI_SENT_ACK) return -1;
     526:	88 32       	cpi	r24, 0x28	; 40
     528:	39 f4       	brne	.+14     	; 0x538 <K30_delaytime+0x24>
	TWI_Stop();	
     52a:	f3 d2       	rcall	.+1510   	; 0xb12 <TWI_Stop>
	return 10;
     52c:	8a e0       	ldi	r24, 0x0A	; 10
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	08 95       	ret

int K30_delaytime()
{
	char status;
	status=TWI_BeginWrite(0x68);
	if(status!=TWI_SLAW_ACK) return -1;
     532:	8f ef       	ldi	r24, 0xFF	; 255
     534:	9f ef       	ldi	r25, 0xFF	; 255
     536:	08 95       	ret
	status=TWI_Write(&readcmd[0],4);
	if(status!=TWI_SENT_ACK) return -1;
     538:	8f ef       	ldi	r24, 0xFF	; 255
     53a:	9f ef       	ldi	r25, 0xFF	; 255
	TWI_Stop();	
	return 10;
=======
     304:	86 e6       	ldi	r24, 0x66	; 102
     306:	92 e0       	ldi	r25, 0x02	; 2
     308:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
	
	// could have sealed following in a function //
	load_new_sensor( 1000, 4000, (BaseSensor *)BMP280_ptr, 0 );
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	a6 01       	movw	r20, r12
     312:	60 ea       	ldi	r22, 0xA0	; 160
     314:	7f e0       	ldi	r23, 0x0F	; 15
     316:	88 ee       	ldi	r24, 0xE8	; 232
     318:	93 e0       	ldi	r25, 0x03	; 3
     31a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <load_new_sensor>
	load_new_sensor( 3000, 4000, (BaseSensor *)Si_ptr, 0 );
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	a7 01       	movw	r20, r14
     324:	60 ea       	ldi	r22, 0xA0	; 160
     326:	7f e0       	ldi	r23, 0x0F	; 15
     328:	88 eb       	ldi	r24, 0xB8	; 184
     32a:	9b e0       	ldi	r25, 0x0B	; 11
     32c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <load_new_sensor>
	load_new_device( 1000, 12000, (BaseSensor *)Strg_ptr, 0 );
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	ae 01       	movw	r20, r28
     336:	60 ee       	ldi	r22, 0xE0	; 224
     338:	7e e2       	ldi	r23, 0x2E	; 46
     33a:	88 ee       	ldi	r24, 0xE8	; 232
     33c:	93 e0       	ldi	r25, 0x03	; 3
     33e:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <load_new_device>
	load_new_device( 100, 4000, (BaseSensor *)Load_ptr, 0 );
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	a8 01       	movw	r20, r16
     348:	60 ea       	ldi	r22, 0xA0	; 160
     34a:	7f e0       	ldi	r23, 0x0F	; 15
     34c:	84 e6       	ldi	r24, 0x64	; 100
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <load_new_device>
	// load_new_sensor( 4, 4, (BaseSensor *)Si7020_ptr, 0 );
	init_set_timer( get_next_interval() );
     354:	0e 94 92 0c 	call	0x1924	; 0x1924 <get_next_interval>
     358:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <init_set_timer>
	
	// Enable global interrupt //
	sei();
     35c:	78 94       	sei
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	ff cf       	rjmp	.-2      	; 0x366 <main+0xf2>

00000368 <BMP280_ReadBytes>:
  @brief Reads some bytes from the BMP280
  @param[in] *values pointer to an array to store the bytes, put the starting register in values[0]
  @param[in] length how many bytes to read
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadBytes(unsigned char *values, char length){
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	ec 01       	movw	r28, r24
     370:	16 2f       	mov	r17, r22
	//printf("BMP280_ReadBytes");
	//printf("0x%1x",(unsigned)TWI_BeginWrite(BMP280_ADDR));
	TWI_BeginWrite(BMP280_ADDR);
     372:	86 e7       	ldi	r24, 0x76	; 118
     374:	0e 94 c9 08 	call	0x1192	; 0x1192 <TWI_BeginWrite>
	//printf("0x%1x",(unsigned)TWI_WriteByte(values[0]));
	TWI_WriteByte(values[0]);//Write the register address
     378:	88 81       	ld	r24, Y
     37a:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_WriteByte>
	status = TWI_BeginRead(BMP280_ADDR); //Send a repeated start
     37e:	86 e7       	ldi	r24, 0x76	; 118
     380:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TWI_BeginRead>
     384:	80 93 5e 05 	sts	0x055E, r24
	//printf("0x%1x",status);
	if (status == TWI_SLAR_ACK){
     388:	80 34       	cpi	r24, 0x40	; 64
     38a:	81 f4       	brne	.+32     	; 0x3ac <BMP280_ReadBytes+0x44>
		if(((TWI_Read(&values[0],length,false)&TWSR_MASK) == TWI_REC_NACK) && (TWI_Stop() != 0)) return(1); //Receive bytes, send a STOP bit, and check for success
     38c:	61 2f       	mov	r22, r17
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	40 e0       	ldi	r20, 0x00	; 0
     392:	ce 01       	movw	r24, r28
     394:	0e 94 23 09 	call	0x1246	; 0x1246 <TWI_Read>
     398:	88 7f       	andi	r24, 0xF8	; 248
     39a:	88 35       	cpi	r24, 0x58	; 88
     39c:	49 f4       	brne	.+18     	; 0x3b0 <BMP280_ReadBytes+0x48>
     39e:	0e 94 1e 09 	call	0x123c	; 0x123c <TWI_Stop>
     3a2:	91 e0       	ldi	r25, 0x01	; 1
     3a4:	81 11       	cpse	r24, r1
     3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <BMP280_ReadBytes+0x4a>
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	03 c0       	rjmp	.+6      	; 0x3b2 <BMP280_ReadBytes+0x4a>
	}
	return(0);
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <BMP280_ReadBytes+0x4a>
     3b0:	90 e0       	ldi	r25, 0x00	; 0
}
     3b2:	89 2f       	mov	r24, r25
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	1f 91       	pop	r17
     3ba:	08 95       	ret

000003bc <BMP280_ReadInt>:
  @brief Reads an int from the BMP280
  @param[in] address The register address of the first byte of the uint
  @param[out] val* A pointer to a uint to store the received data to
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadInt(char address, int *val){
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	00 d0       	rcall	.+0      	; 0x3c6 <BMP280_ReadInt+0xa>
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
     3ca:	8b 01       	movw	r16, r22
	//printf("\nBMP280_ReadInt");
	unsigned char data[2];	//char is 4 bits, 1 byte

	data[0] = address;
     3cc:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     3ce:	62 e0       	ldi	r22, 0x02	; 2
     3d0:	ce 01       	movw	r24, r28
     3d2:	01 96       	adiw	r24, 0x01	; 1
     3d4:	0e 94 b4 01 	call	0x368	; 0x368 <BMP280_ReadBytes>
     3d8:	88 23       	and	r24, r24
     3da:	59 f0       	breq	.+22     	; 0x3f2 <BMP280_ReadInt+0x36>
		*val = (((int)data[1]<<8)|(int)data[0]);
     3dc:	8a 81       	ldd	r24, Y+2	; 0x02
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	98 2f       	mov	r25, r24
     3e2:	88 27       	eor	r24, r24
     3e4:	29 81       	ldd	r18, Y+1	; 0x01
     3e6:	82 2b       	or	r24, r18
     3e8:	f8 01       	movw	r30, r16
     3ea:	91 83       	std	Z+1, r25	; 0x01
     3ec:	80 83       	st	Z, r24
		return(1);
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <BMP280_ReadInt+0x3c>
	}
	*val = 0;
     3f2:	f8 01       	movw	r30, r16
     3f4:	11 82       	std	Z+1, r1	; 0x01
     3f6:	10 82       	st	Z, r1
	return(0);
>>>>>>> refs/remotes/origin/master
}
     53c:	08 95       	ret

0000053e <K30_readCO2>:

int K30_readCO2(){
     53e:	af 92       	push	r10
     540:	bf 92       	push	r11
     542:	cf 92       	push	r12
     544:	df 92       	push	r13
     546:	ef 92       	push	r14
     548:	ff 92       	push	r15
     54a:	0f 93       	push	r16
     54c:	1f 93       	push	r17
     54e:	cf 93       	push	r28
     550:	df 93       	push	r29
     552:	00 d0       	rcall	.+0      	; 0x554 <K30_readCO2+0x16>
     554:	1f 92       	push	r1
     556:	cd b7       	in	r28, 0x3d	; 61
     558:	de b7       	in	r29, 0x3e	; 62
	int val=0;
	int sum=0;
	
<<<<<<< HEAD
	char status;
	//printf("K30_readCO2");
	unsigned char buffer[4]={0,0,0,0};
     55a:	19 82       	std	Y+1, r1	; 0x01
     55c:	1a 82       	std	Y+2, r1	; 0x02
     55e:	1b 82       	std	Y+3, r1	; 0x03
     560:	1c 82       	std	Y+4, r1	; 0x04
	status=TWI_BeginRead(0x68);
     562:	88 e6       	ldi	r24, 0x68	; 104
     564:	9f d2       	rcall	.+1342   	; 0xaa4 <TWI_BeginRead>
	if(status!=TWI_SLAR_ACK) return -9998;
     566:	80 34       	cpi	r24, 0x40	; 64
     568:	b1 f5       	brne	.+108    	; 0x5d6 <K30_readCO2+0x98>
	status=TWI_Read(&buffer[0],4,true);
     56a:	41 e0       	ldi	r20, 0x01	; 1
     56c:	64 e0       	ldi	r22, 0x04	; 4
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	ce 01       	movw	r24, r28
     572:	01 96       	adiw	r24, 0x01	; 1
     574:	d3 d2       	rcall	.+1446   	; 0xb1c <TWI_Read>
	if(status!=TWI_REC_ACK) return -9997;
     576:	80 35       	cpi	r24, 0x50	; 80
     578:	89 f5       	brne	.+98     	; 0x5dc <K30_readCO2+0x9e>
	TWI_Stop();
     57a:	cb d2       	rcall	.+1430   	; 0xb12 <TWI_Stop>
	
	val = 0;
	val |= buffer[1] & 0xFF;
     57c:	9a 81       	ldd	r25, Y+2	; 0x02
     57e:	a9 2e       	mov	r10, r25
     580:	b1 2c       	mov	r11, r1
	val = val << 8;
     582:	fa 2c       	mov	r15, r10
     584:	ee 24       	eor	r14, r14
	val |= buffer[2] & 0xFF;
     586:	2b 81       	ldd	r18, Y+3	; 0x03
     588:	c2 2e       	mov	r12, r18
     58a:	d1 2c       	mov	r13, r1
     58c:	ec 28       	or	r14, r12
     58e:	fd 28       	or	r15, r13
	sum = buffer[0] + buffer[1] + buffer[2];
     590:	89 81       	ldd	r24, Y+1	; 0x01
     592:	08 2f       	mov	r16, r24
     594:	10 e0       	ldi	r17, 0x00	; 0
	printf("K30-DEBUG : %u,%u,%u,%u\n",buffer[0],buffer[1],buffer[2],buffer[3]);
     596:	3c 81       	ldd	r19, Y+4	; 0x04
     598:	1f 92       	push	r1
     59a:	3f 93       	push	r19
     59c:	1f 92       	push	r1
     59e:	2f 93       	push	r18
     5a0:	1f 92       	push	r1
     5a2:	9f 93       	push	r25
     5a4:	1f 92       	push	r1
     5a6:	8f 93       	push	r24
     5a8:	87 ec       	ldi	r24, 0xC7	; 199
     5aa:	92 e0       	ldi	r25, 0x02	; 2
     5ac:	9f 93       	push	r25
     5ae:	8f 93       	push	r24
     5b0:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
	if(sum==buffer[3]){return val;}
     5b4:	8c 81       	ldd	r24, Y+4	; 0x04
     5b6:	90 e0       	ldi	r25, 0x00	; 0
	
	val = 0;
	val |= buffer[1] & 0xFF;
	val = val << 8;
	val |= buffer[2] & 0xFF;
	sum = buffer[0] + buffer[1] + buffer[2];
     5b8:	0a 0d       	add	r16, r10
     5ba:	1b 1d       	adc	r17, r11
     5bc:	0c 0d       	add	r16, r12
     5be:	1d 1d       	adc	r17, r13
	printf("K30-DEBUG : %u,%u,%u,%u\n",buffer[0],buffer[1],buffer[2],buffer[3]);
	if(sum==buffer[3]){return val;}
     5c0:	0f b6       	in	r0, 0x3f	; 63
     5c2:	f8 94       	cli
     5c4:	de bf       	out	0x3e, r29	; 62
     5c6:	0f be       	out	0x3f, r0	; 63
     5c8:	cd bf       	out	0x3d, r28	; 61
     5ca:	80 17       	cp	r24, r16
     5cc:	91 07       	cpc	r25, r17
     5ce:	49 f4       	brne	.+18     	; 0x5e2 <K30_readCO2+0xa4>
     5d0:	8e 2d       	mov	r24, r14
     5d2:	9f 2d       	mov	r25, r15
     5d4:	08 c0       	rjmp	.+16     	; 0x5e6 <K30_readCO2+0xa8>
	
	char status;
	//printf("K30_readCO2");
	unsigned char buffer[4]={0,0,0,0};
	status=TWI_BeginRead(0x68);
	if(status!=TWI_SLAR_ACK) return -9998;
     5d6:	82 ef       	ldi	r24, 0xF2	; 242
     5d8:	98 ed       	ldi	r25, 0xD8	; 216
     5da:	05 c0       	rjmp	.+10     	; 0x5e6 <K30_readCO2+0xa8>
	status=TWI_Read(&buffer[0],4,true);
	if(status!=TWI_REC_ACK) return -9997;
     5dc:	83 ef       	ldi	r24, 0xF3	; 243
     5de:	98 ed       	ldi	r25, 0xD8	; 216
     5e0:	02 c0       	rjmp	.+4      	; 0x5e6 <K30_readCO2+0xa8>
	val = val << 8;
	val |= buffer[2] & 0xFF;
	sum = buffer[0] + buffer[1] + buffer[2];
	printf("K30-DEBUG : %u,%u,%u,%u\n",buffer[0],buffer[1],buffer[2],buffer[3]);
	if(sum==buffer[3]){return val;}
	else{return -9999;}
     5e2:	81 ef       	ldi	r24, 0xF1	; 241
     5e4:	98 ed       	ldi	r25, 0xD8	; 216
=======
	data[0] = address;
     410:	88 e8       	ldi	r24, 0x88	; 136
     412:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     414:	62 e0       	ldi	r22, 0x02	; 2
     416:	ce 01       	movw	r24, r28
     418:	01 96       	adiw	r24, 0x01	; 1
     41a:	0e 94 b4 01 	call	0x368	; 0x368 <BMP280_ReadBytes>
     41e:	88 23       	and	r24, r24
     420:	99 f0       	breq	.+38     	; 0x448 <BMP280_Init+0x42>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     422:	8a 81       	ldd	r24, Y+2	; 0x02
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	98 2f       	mov	r25, r24
     428:	88 27       	eor	r24, r24
     42a:	29 81       	ldd	r18, Y+1	; 0x01
     42c:	82 2b       	or	r24, r18
     42e:	90 93 69 05 	sts	0x0569, r25
     432:	80 93 68 05 	sts	0x0568, r24

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
     436:	6e e7       	ldi	r22, 0x7E	; 126
     438:	75 e0       	ldi	r23, 0x05	; 5
     43a:	8a e8       	ldi	r24, 0x8A	; 138
     43c:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
	// used in the calculations when taking measurements.

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
     440:	88 23       	and	r24, r24
     442:	09 f4       	brne	.+2      	; 0x446 <BMP280_Init+0x40>
     444:	bb c0       	rjmp	.+374    	; 0x5bc <BMP280_Init+0x1b6>
     446:	05 c0       	rjmp	.+10     	; 0x452 <BMP280_Init+0x4c>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     448:	10 92 69 05 	sts	0x0569, r1
     44c:	10 92 68 05 	sts	0x0568, r1
     450:	b5 c0       	rjmp	.+362    	; 0x5bc <BMP280_Init+0x1b6>
	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
     452:	6c e7       	ldi	r22, 0x7C	; 124
     454:	75 e0       	ldi	r23, 0x05	; 5
     456:	8c e8       	ldi	r24, 0x8C	; 140
     458:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>

	// Retrieve calibration data from device:
>>>>>>> refs/remotes/origin/master
	
}
     5e6:	0f 90       	pop	r0
     5e8:	0f 90       	pop	r0
     5ea:	0f 90       	pop	r0
     5ec:	0f 90       	pop	r0
     5ee:	df 91       	pop	r29
     5f0:	cf 91       	pop	r28
     5f2:	1f 91       	pop	r17
     5f4:	0f 91       	pop	r16
     5f6:	ff 90       	pop	r15
     5f8:	ef 90       	pop	r14
     5fa:	df 90       	pop	r13
     5fc:	cf 90       	pop	r12
     5fe:	bf 90       	pop	r11
     600:	af 90       	pop	r10
     602:	08 95       	ret

00000604 <K30_FctnInit>:
	K30_getType
};

void K30_FctnInit(K30Sensor *this)
{
	this->inherited.vmt = &K30_vmt;
     604:	2e e4       	ldi	r18, 0x4E	; 78
     606:	32 e0       	ldi	r19, 0x02	; 2
     608:	fc 01       	movw	r30, r24
     60a:	35 87       	std	Z+13, r19	; 0x0d
     60c:	24 87       	std	Z+12, r18	; 0x0c
     60e:	08 95       	ret

00000610 <K30_Configure>:

int K30_Configure(K30Sensor *this )
{
	// virtual function
	return 0;
}
     610:	80 e0       	ldi	r24, 0x00	; 0
     612:	90 e0       	ldi	r25, 0x00	; 0
     614:	08 95       	ret

00000616 <K30_Error>:

int K30_Error(K30Sensor *this )
{
	// virtual function
	return 0;
}
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	90 e0       	ldi	r25, 0x00	; 0
     61a:	08 95       	ret

0000061c <K30_VTinit>:
void K30_VTinit( K30Sensor* this)
{
	this->inherited.abstract.device_vt = &K30_abstract_vmt;
     61c:	26 e4       	ldi	r18, 0x46	; 70
     61e:	32 e0       	ldi	r19, 0x02	; 2
     620:	fc 01       	movw	r30, r24
     622:	31 83       	std	Z+1, r19	; 0x01
     624:	20 83       	st	Z, r18
     626:	08 95       	ret

00000628 <K30_reset>:

int K30_reset( K30Sensor* this)
{
	// virtual function
	return 0;
}
     628:	80 e0       	ldi	r24, 0x00	; 0
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	08 95       	ret

0000062e <K30_getType>:

int K30_getType(K30Sensor* this)
{
	return TYPE_SENSOR;
}
     62e:	83 e0       	ldi	r24, 0x03	; 3
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	08 95       	ret

00000634 <K30_Request>:
	return 0;
}

int K30_Request(K30Sensor *this )
{
	return K30_delaytime();
     634:	6f cf       	rjmp	.-290    	; 0x514 <K30_delaytime>
	if(status!=TWI_SENT_ACK) return 0;
	TWI_Stop();
	_delay_ms(10);
	return 0;
	*/
}
     636:	08 95       	ret

00000638 <K30_Collect>:

int K30_Collect(K30Sensor *this )
{
	double K30Data;
	K30Data = K30_readCO2();
     638:	82 df       	rcall	.-252    	; 0x53e <K30_readCO2>
     63a:	bc 01       	movw	r22, r24
     63c:	99 0f       	add	r25, r25
     63e:	88 0b       	sbc	r24, r24
     640:	99 0b       	sbc	r25, r25
     642:	0e 94 c0 19 	call	0x3380	; 0x3380 <__floatsisf>
	printf("\tK30 data is %lf\n",K30Data);
     646:	9f 93       	push	r25
     648:	8f 93       	push	r24
     64a:	7f 93       	push	r23
     64c:	6f 93       	push	r22
     64e:	80 ee       	ldi	r24, 0xE0	; 224
     650:	92 e0       	ldi	r25, 0x02	; 2
     652:	9f 93       	push	r25
     654:	8f 93       	push	r24
     656:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0
     664:	0f 90       	pop	r0
	sum = buffer[0] + buffer[1] + buffer[2];
	if(sum==buffer[3]){return val;}
		printf_P()
	else{return 0;}
*/
}
     666:	08 95       	ret

00000668 <K30_init>:
}

int K30_init( K30Sensor* this)
{
	// TWI_Init(200000);
	printf("K30 Sensor Init\n");
     668:	82 ef       	ldi	r24, 0xF2	; 242
     66a:	92 e0       	ldi	r25, 0x02	; 2
     66c:	0e 94 27 21 	call	0x424e	; 0x424e <puts>
	return 0;
}
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	08 95       	ret

00000676 <New_K30_Sensor>:
	return TYPE_SENSOR;
}


K30Sensor* New_K30_Sensor( int num, int NumData)
{
     676:	ef 92       	push	r14
     678:	ff 92       	push	r15
     67a:	0f 93       	push	r16
     67c:	1f 93       	push	r17
     67e:	cf 93       	push	r28
     680:	df 93       	push	r29
     682:	7c 01       	movw	r14, r24
     684:	8b 01       	movw	r16, r22
	K30Sensor *p = malloc(sizeof(K30Sensor));
     686:	8e e0       	ldi	r24, 0x0E	; 14
     688:	90 e0       	ldi	r25, 0x00	; 0
     68a:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <malloc>
     68e:	ec 01       	movw	r28, r24
	// virtual function
	return 0;
}
void K30_VTinit( K30Sensor* this)
{
	this->inherited.abstract.device_vt = &K30_abstract_vmt;
     690:	86 e4       	ldi	r24, 0x46	; 70
     692:	92 e0       	ldi	r25, 0x02	; 2
     694:	99 83       	std	Y+1, r25	; 0x01
     696:	88 83       	st	Y, r24
	K30_getType
};

void K30_FctnInit(K30Sensor *this)
{
	this->inherited.vmt = &K30_vmt;
     698:	8e e4       	ldi	r24, 0x4E	; 78
     69a:	92 e0       	ldi	r25, 0x02	; 2
     69c:	9d 87       	std	Y+13, r25	; 0x0d
     69e:	8c 87       	std	Y+12, r24	; 0x0c
K30Sensor* New_K30_Sensor( int num, int NumData)
{
	K30Sensor *p = malloc(sizeof(K30Sensor));
	K30_VTinit( p );
	K30_FctnInit( p );
	p->inherited.getStartNum = fctn_getStartNum;
     6a0:	80 e3       	ldi	r24, 0x30	; 48
     6a2:	9d e0       	ldi	r25, 0x0D	; 13
     6a4:	99 87       	std	Y+9, r25	; 0x09
     6a6:	88 87       	std	Y+8, r24	; 0x08
	p->inherited.getEndNum = fctn_getEndNum;
     6a8:	84 e3       	ldi	r24, 0x34	; 52
     6aa:	9d e0       	ldi	r25, 0x0D	; 13
     6ac:	9b 87       	std	Y+11, r25	; 0x0b
     6ae:	8a 87       	std	Y+10, r24	; 0x0a
	
<<<<<<< HEAD
	p->inherited.test_num = num;
     6b0:	fb 82       	std	Y+3, r15	; 0x03
     6b2:	ea 82       	std	Y+2, r14	; 0x02
	p->inherited.NumOfData = NumData;
     6b4:	1f 83       	std	Y+7, r17	; 0x07
     6b6:	0e 83       	std	Y+6, r16	; 0x06
	p->inherited.StartNum = SensorDataCount;
     6b8:	80 91 f0 0b 	lds	r24, 0x0BF0
     6bc:	90 91 f1 0b 	lds	r25, 0x0BF1
     6c0:	9d 83       	std	Y+5, r25	; 0x05
     6c2:	8c 83       	std	Y+4, r24	; 0x04
	SensorDataCount += NumData;
     6c4:	b8 01       	movw	r22, r16
     6c6:	68 0f       	add	r22, r24
     6c8:	79 1f       	adc	r23, r25
     6ca:	70 93 f1 0b 	sts	0x0BF1, r23
     6ce:	60 93 f0 0b 	sts	0x0BF0, r22
	printf("SensorDataCount %d\n",SensorDataCount);
     6d2:	7f 93       	push	r23
     6d4:	6f 93       	push	r22
     6d6:	82 e0       	ldi	r24, 0x02	; 2
     6d8:	93 e0       	ldi	r25, 0x03	; 3
     6da:	9f 93       	push	r25
     6dc:	8f 93       	push	r24
     6de:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
	
	return p;
     6e2:	0f 90       	pop	r0
     6e4:	0f 90       	pop	r0
     6e6:	0f 90       	pop	r0
     6e8:	0f 90       	pop	r0
=======
	data[0] = address;
     462:	8e e8       	ldi	r24, 0x8E	; 142
     464:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     466:	62 e0       	ldi	r22, 0x02	; 2
     468:	ce 01       	movw	r24, r28
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	0e 94 b4 01 	call	0x368	; 0x368 <BMP280_ReadBytes>
     470:	88 23       	and	r24, r24
     472:	99 f0       	breq	.+38     	; 0x49a <BMP280_Init+0x94>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     474:	8a 81       	ldd	r24, Y+2	; 0x02
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	98 2f       	mov	r25, r24
     47a:	88 27       	eor	r24, r24
     47c:	29 81       	ldd	r18, Y+1	; 0x01
     47e:	82 2b       	or	r24, r18
     480:	90 93 6b 05 	sts	0x056B, r25
     484:	80 93 6a 05 	sts	0x056A, r24
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     488:	6a e7       	ldi	r22, 0x7A	; 122
     48a:	75 e0       	ldi	r23, 0x05	; 5
     48c:	80 e9       	ldi	r24, 0x90	; 144
     48e:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
     492:	88 23       	and	r24, r24
     494:	09 f4       	brne	.+2      	; 0x498 <BMP280_Init+0x92>
     496:	92 c0       	rjmp	.+292    	; 0x5bc <BMP280_Init+0x1b6>
     498:	05 c0       	rjmp	.+10     	; 0x4a4 <BMP280_Init+0x9e>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     49a:	10 92 6b 05 	sts	0x056B, r1
     49e:	10 92 6a 05 	sts	0x056A, r1
     4a2:	8c c0       	rjmp	.+280    	; 0x5bc <BMP280_Init+0x1b6>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     4a4:	68 e7       	ldi	r22, 0x78	; 120
     4a6:	75 e0       	ldi	r23, 0x05	; 5
     4a8:	82 e9       	ldi	r24, 0x92	; 146
     4aa:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     4ae:	88 23       	and	r24, r24
     4b0:	09 f4       	brne	.+2      	; 0x4b4 <BMP280_Init+0xae>
     4b2:	84 c0       	rjmp	.+264    	; 0x5bc <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     4b4:	66 e7       	ldi	r22, 0x76	; 118
     4b6:	75 e0       	ldi	r23, 0x05	; 5
     4b8:	84 e9       	ldi	r24, 0x94	; 148
     4ba:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     4be:	88 23       	and	r24, r24
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <BMP280_Init+0xbe>
     4c2:	7c c0       	rjmp	.+248    	; 0x5bc <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     4c4:	64 e7       	ldi	r22, 0x74	; 116
     4c6:	75 e0       	ldi	r23, 0x05	; 5
     4c8:	86 e9       	ldi	r24, 0x96	; 150
     4ca:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     4ce:	88 23       	and	r24, r24
     4d0:	09 f4       	brne	.+2      	; 0x4d4 <BMP280_Init+0xce>
     4d2:	74 c0       	rjmp	.+232    	; 0x5bc <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     4d4:	62 e7       	ldi	r22, 0x72	; 114
     4d6:	75 e0       	ldi	r23, 0x05	; 5
     4d8:	88 e9       	ldi	r24, 0x98	; 152
     4da:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     4de:	88 23       	and	r24, r24
     4e0:	09 f4       	brne	.+2      	; 0x4e4 <BMP280_Init+0xde>
     4e2:	6c c0       	rjmp	.+216    	; 0x5bc <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     4e4:	60 e7       	ldi	r22, 0x70	; 112
     4e6:	75 e0       	ldi	r23, 0x05	; 5
     4e8:	8a e9       	ldi	r24, 0x9A	; 154
     4ea:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     4ee:	88 23       	and	r24, r24
     4f0:	09 f4       	brne	.+2      	; 0x4f4 <BMP280_Init+0xee>
     4f2:	64 c0       	rjmp	.+200    	; 0x5bc <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     4f4:	6e e6       	ldi	r22, 0x6E	; 110
     4f6:	75 e0       	ldi	r23, 0x05	; 5
     4f8:	8c e9       	ldi	r24, 0x9C	; 156
     4fa:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     4fe:	88 23       	and	r24, r24
     500:	09 f4       	brne	.+2      	; 0x504 <BMP280_Init+0xfe>
     502:	5c c0       	rjmp	.+184    	; 0x5bc <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9C, &dig_P8)  &&
		BMP280_ReadInt(0x9E, &dig_P9)){
     504:	6c e6       	ldi	r22, 0x6C	; 108
     506:	75 e0       	ldi	r23, 0x05	; 5
     508:	8e e9       	ldi	r24, 0x9E	; 158
     50a:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     50e:	88 23       	and	r24, r24
     510:	09 f4       	brne	.+2      	; 0x514 <BMP280_Init+0x10e>
     512:	54 c0       	rjmp	.+168    	; 0x5bc <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9E, &dig_P9)){
			printf("\nT: %i ,%i ,%i P: %i ,%i ,%i ,%i ,%i ,%i ,%i ,%1 ,%i \n",dig_T1,dig_T2,dig_T3,dig_P1,dig_P2,dig_P3,dig_P4,dig_P5,dig_P6,dig_P7,dig_P8,dig_P9);
     514:	80 91 6d 05 	lds	r24, 0x056D
     518:	8f 93       	push	r24
     51a:	80 91 6c 05 	lds	r24, 0x056C
     51e:	8f 93       	push	r24
     520:	80 91 6f 05 	lds	r24, 0x056F
     524:	8f 93       	push	r24
     526:	80 91 6e 05 	lds	r24, 0x056E
     52a:	8f 93       	push	r24
     52c:	80 91 71 05 	lds	r24, 0x0571
     530:	8f 93       	push	r24
     532:	80 91 70 05 	lds	r24, 0x0570
     536:	8f 93       	push	r24
     538:	80 91 73 05 	lds	r24, 0x0573
     53c:	8f 93       	push	r24
     53e:	80 91 72 05 	lds	r24, 0x0572
     542:	8f 93       	push	r24
     544:	80 91 75 05 	lds	r24, 0x0575
     548:	8f 93       	push	r24
     54a:	80 91 74 05 	lds	r24, 0x0574
     54e:	8f 93       	push	r24
     550:	80 91 77 05 	lds	r24, 0x0577
     554:	8f 93       	push	r24
     556:	80 91 76 05 	lds	r24, 0x0576
     55a:	8f 93       	push	r24
     55c:	80 91 79 05 	lds	r24, 0x0579
     560:	8f 93       	push	r24
     562:	80 91 78 05 	lds	r24, 0x0578
     566:	8f 93       	push	r24
     568:	80 91 7b 05 	lds	r24, 0x057B
     56c:	8f 93       	push	r24
     56e:	80 91 7a 05 	lds	r24, 0x057A
     572:	8f 93       	push	r24
     574:	80 91 6b 05 	lds	r24, 0x056B
     578:	8f 93       	push	r24
     57a:	80 91 6a 05 	lds	r24, 0x056A
     57e:	8f 93       	push	r24
     580:	80 91 7d 05 	lds	r24, 0x057D
     584:	8f 93       	push	r24
     586:	80 91 7c 05 	lds	r24, 0x057C
     58a:	8f 93       	push	r24
     58c:	80 91 7f 05 	lds	r24, 0x057F
     590:	8f 93       	push	r24
     592:	80 91 7e 05 	lds	r24, 0x057E
     596:	8f 93       	push	r24
     598:	80 91 69 05 	lds	r24, 0x0569
     59c:	8f 93       	push	r24
     59e:	80 91 68 05 	lds	r24, 0x0568
     5a2:	8f 93       	push	r24
     5a4:	81 e7       	ldi	r24, 0x71	; 113
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	9f 93       	push	r25
     5aa:	8f 93       	push	r24
     5ac:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
		return (1);
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	f8 94       	cli
     5b4:	de bf       	out	0x3e, r29	; 62
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	cd bf       	out	0x3d, r28	; 61
     5ba:	81 e0       	ldi	r24, 0x01	; 1
	}
	else 
		return (0);
>>>>>>> refs/remotes/origin/master
}
     6ea:	ce 01       	movw	r24, r28
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	1f 91       	pop	r17
     6f2:	0f 91       	pop	r16
     6f4:	ff 90       	pop	r15
     6f6:	ef 90       	pop	r14
     6f8:	08 95       	ret

000006fa <ADC_Init>:

/*************************************************************************//**
  @brief Initializes the ADC
*****************************************************************************/
<<<<<<< HEAD
void ADC_Init(void) {
	ADCSRA = (1<<ADEN)|(4<<ADPS0); //enables the ADC module, CPU clock prescale=16
     6fa:	84 e8       	ldi	r24, 0x84	; 132
     6fc:	80 93 7a 00 	sts	0x007A, r24
	
	ADCSRC = 0x05|(1<<ADTHT0)|(1<<ADTHT1); //ADSUT=5
     700:	85 ec       	ldi	r24, 0xC5	; 197
     702:	80 93 77 00 	sts	0x0077, r24
	while((ADCSRB&(1<<AVDDOK))==0);
     706:	eb e7       	ldi	r30, 0x7B	; 123
     708:	f0 e0       	ldi	r31, 0x00	; 0
     70a:	80 81       	ld	r24, Z
     70c:	88 23       	and	r24, r24
     70e:	ec f7       	brge	.-6      	; 0x70a <ADC_Init+0x10>
=======
char BMP280_SetOversampling(short oss){
	oversampling = oss;
     5c6:	90 93 67 05 	sts	0x0567, r25
     5ca:	80 93 66 05 	sts	0x0566, r24
	return (1);
>>>>>>> refs/remotes/origin/master
}
     710:	08 95       	ret

00000712 <__vector_15>:

/*************************************************************************//**
  @brief Timer Interrupt Service Routine
*****************************************************************************/
ISR(TIMER2_OVF_vect)
{
     712:	1f 92       	push	r1
     714:	0f 92       	push	r0
     716:	0f b6       	in	r0, 0x3f	; 63
     718:	0f 92       	push	r0
     71a:	11 24       	eor	r1, r1
     71c:	0b b6       	in	r0, 0x3b	; 59
     71e:	0f 92       	push	r0
     720:	2f 93       	push	r18
     722:	3f 93       	push	r19
     724:	4f 93       	push	r20
     726:	5f 93       	push	r21
     728:	6f 93       	push	r22
     72a:	7f 93       	push	r23
     72c:	8f 93       	push	r24
     72e:	9f 93       	push	r25
     730:	af 93       	push	r26
     732:	bf 93       	push	r27
     734:	ef 93       	push	r30
     736:	ff 93       	push	r31
	timer_usage ++;
     738:	80 91 d6 06 	lds	r24, 0x06D6
     73c:	90 91 d7 06 	lds	r25, 0x06D7
     740:	01 96       	adiw	r24, 0x01	; 1
     742:	90 93 d7 06 	sts	0x06D7, r25
     746:	80 93 d6 06 	sts	0x06D6, r24
	// printf("count1 = %d\n",timer_usage);
	printf("Timestamp : %ld\n",(TimeStamp));
     74a:	80 91 d5 06 	lds	r24, 0x06D5
     74e:	8f 93       	push	r24
     750:	80 91 d4 06 	lds	r24, 0x06D4
     754:	8f 93       	push	r24
     756:	80 91 d3 06 	lds	r24, 0x06D3
     75a:	8f 93       	push	r24
     75c:	80 91 d2 06 	lds	r24, 0x06D2
     760:	8f 93       	push	r24
     762:	86 e1       	ldi	r24, 0x16	; 22
     764:	93 e0       	ldi	r25, 0x03	; 3
     766:	9f 93       	push	r25
     768:	8f 93       	push	r24
     76a:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
	handle_timeoutq_event();	
     76e:	19 d6       	rcall	.+3122   	; 0x13a2 <handle_timeoutq_event>
     770:	0f 90       	pop	r0
     772:	0f 90       	pop	r0
     774:	0f 90       	pop	r0
     776:	0f 90       	pop	r0
     778:	0f 90       	pop	r0
     77a:	0f 90       	pop	r0
}
     77c:	ff 91       	pop	r31
     77e:	ef 91       	pop	r30
     780:	bf 91       	pop	r27
     782:	af 91       	pop	r26
     784:	9f 91       	pop	r25
     786:	8f 91       	pop	r24
     788:	7f 91       	pop	r23
     78a:	6f 91       	pop	r22
     78c:	5f 91       	pop	r21
     78e:	4f 91       	pop	r20
     790:	3f 91       	pop	r19
     792:	2f 91       	pop	r18
     794:	0f 90       	pop	r0
     796:	0b be       	out	0x3b, r0	; 59
     798:	0f 90       	pop	r0
     79a:	0f be       	out	0x3f, r0	; 63
     79c:	0f 90       	pop	r0
     79e:	1f 90       	pop	r1
     7a0:	18 95       	reti

000007a2 <init_Event_Timer>:

/* Initialization Routine Example 3 : Timer 2 Async operation */
/* Clock for Timer 2 is taken from crystal connected to TOSC pins */
void init_Event_Timer(void)
{
	TimeStamp = 0;
     7a2:	10 92 d2 06 	sts	0x06D2, r1
     7a6:	10 92 d3 06 	sts	0x06D3, r1
     7aa:	10 92 d4 06 	sts	0x06D4, r1
     7ae:	10 92 d5 06 	sts	0x06D5, r1
	timer_usage = 0;
     7b2:	10 92 d7 06 	sts	0x06D7, r1
     7b6:	10 92 d6 06 	sts	0x06D6, r1
	/* Select clock source as crystal on TOSCn pins */
	ASSR |= 1 << AS2;
     7ba:	e6 eb       	ldi	r30, 0xB6	; 182
     7bc:	f0 e0       	ldi	r31, 0x00	; 0
     7be:	80 81       	ld	r24, Z
     7c0:	80 62       	ori	r24, 0x20	; 32
     7c2:	80 83       	st	Z, r24
	
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
     7c4:	80 81       	ld	r24, Z
     7c6:	8f 71       	andi	r24, 0x1F	; 31
     7c8:	e9 f7       	brne	.-6      	; 0x7c4 <init_Event_Timer+0x22>
	
	/* Stop timer 2 */
	TCCR2B = 0x00;
     7ca:	10 92 b1 00 	sts	0x00B1, r1
     7ce:	08 95       	ret

<<<<<<< HEAD
000007d0 <general_set_timer>:
	// TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
}


void general_set_timer( int32_t period_number )
{
     7d0:	cf 92       	push	r12
     7d2:	df 92       	push	r13
     7d4:	ef 92       	push	r14
     7d6:	ff 92       	push	r15
     7d8:	6b 01       	movw	r12, r22
     7da:	7c 01       	movw	r14, r24
=======
	switch (oversampling){
     5e2:	80 91 66 05 	lds	r24, 0x0566
     5e6:	90 91 67 05 	lds	r25, 0x0567
     5ea:	82 30       	cpi	r24, 0x02	; 2
     5ec:	91 05       	cpc	r25, r1
     5ee:	01 f1       	breq	.+64     	; 0x630 <BMP280_StartMeasurment+0x5e>
     5f0:	2c f4       	brge	.+10     	; 0x5fc <BMP280_StartMeasurment+0x2a>
     5f2:	00 97       	sbiw	r24, 0x00	; 0
     5f4:	49 f0       	breq	.+18     	; 0x608 <BMP280_StartMeasurment+0x36>
     5f6:	01 97       	sbiw	r24, 0x01	; 1
     5f8:	89 f0       	breq	.+34     	; 0x61c <BMP280_StartMeasurment+0x4a>
     5fa:	38 c0       	rjmp	.+112    	; 0x66c <BMP280_StartMeasurment+0x9a>
     5fc:	83 30       	cpi	r24, 0x03	; 3
     5fe:	91 05       	cpc	r25, r1
     600:	09 f1       	breq	.+66     	; 0x644 <BMP280_StartMeasurment+0x72>
     602:	04 97       	sbiw	r24, 0x04	; 4
     604:	49 f1       	breq	.+82     	; 0x658 <BMP280_StartMeasurment+0x86>
     606:	32 c0       	rjmp	.+100    	; 0x66c <BMP280_StartMeasurment+0x9a>
		case 0:
		data[1] = BMP280_COMMAND_PRESSURE0;
     608:	85 e2       	ldi	r24, 0x25	; 37
     60a:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	90 93 65 05 	sts	0x0565, r25
     614:	80 93 64 05 	sts	0x0564, r24
		delay = 8;
     618:	18 e0       	ldi	r17, 0x08	; 8
		break;
     61a:	2b c0       	rjmp	.+86     	; 0x672 <BMP280_StartMeasurment+0xa0>
		case 1:
		data[1] = BMP280_COMMAND_PRESSURE1;
     61c:	89 e2       	ldi	r24, 0x29	; 41
     61e:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	90 93 65 05 	sts	0x0565, r25
     628:	80 93 64 05 	sts	0x0564, r24
		delay = 10;
     62c:	1a e0       	ldi	r17, 0x0A	; 10
		break;
     62e:	21 c0       	rjmp	.+66     	; 0x672 <BMP280_StartMeasurment+0xa0>
		case 2:
		data[1] = BMP280_COMMAND_PRESSURE2;
     630:	8d e2       	ldi	r24, 0x2D	; 45
     632:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	90 93 65 05 	sts	0x0565, r25
     63c:	80 93 64 05 	sts	0x0564, r24
		delay = 15;
     640:	1f e0       	ldi	r17, 0x0F	; 15
		break;
     642:	17 c0       	rjmp	.+46     	; 0x672 <BMP280_StartMeasurment+0xa0>
		case 3:
		data[1] = BMP280_COMMAND_PRESSURE3;
     644:	81 e3       	ldi	r24, 0x31	; 49
     646:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	90 93 65 05 	sts	0x0565, r25
     650:	80 93 64 05 	sts	0x0564, r24
		delay = 24;
     654:	18 e1       	ldi	r17, 0x18	; 24
		break;
     656:	0d c0       	rjmp	.+26     	; 0x672 <BMP280_StartMeasurment+0xa0>
		case 4:
		data[1] = BMP280_COMMAND_PRESSURE4;
     658:	8d e5       	ldi	r24, 0x5D	; 93
     65a:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	90 93 65 05 	sts	0x0565, r25
     664:	80 93 64 05 	sts	0x0564, r24
		delay = 45;
     668:	1d e2       	ldi	r17, 0x2D	; 45
		break;
     66a:	03 c0       	rjmp	.+6      	; 0x672 <BMP280_StartMeasurment+0xa0>
		default:
		data[1] = BMP280_COMMAND_PRESSURE0;
     66c:	85 e2       	ldi	r24, 0x25	; 37
     66e:	8a 83       	std	Y+2, r24	; 0x02
		delay = 9;
     670:	19 e0       	ldi	r17, 0x09	; 9
  @param[in] *values pointer to an array to send, put the starting register in values[0]
  @param[in] length how many bytes to write (including the starting register ie. sizeof(values))
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_WriteBytes(unsigned char *values, char length){
	TWI_BeginWrite(BMP280_ADDR);
     672:	86 e7       	ldi	r24, 0x76	; 118
     674:	0e 94 c9 08 	call	0x1192	; 0x1192 <TWI_BeginWrite>
	if((TWI_Write(&values[0],length) == TWI_SENT_ACK) && (TWI_Stop() != 0)) return 1; //Send bytes, a STOP bit, and check for success
     678:	62 e0       	ldi	r22, 0x02	; 2
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	ce 01       	movw	r24, r28
     67e:	01 96       	adiw	r24, 0x01	; 1
     680:	0e 94 5f 09 	call	0x12be	; 0x12be <TWI_Write>
     684:	88 32       	cpi	r24, 0x28	; 40
     686:	31 f4       	brne	.+12     	; 0x694 <BMP280_StartMeasurment+0xc2>
     688:	0e 94 1e 09 	call	0x123c	; 0x123c <TWI_Stop>
		data[1] = BMP280_COMMAND_PRESSURE0;
		delay = 9;
		break;
	}
	result = BMP280_WriteBytes(&data[0], 2);
	if (result) // good write?
     68c:	81 11       	cpse	r24, r1
     68e:	04 c0       	rjmp	.+8      	; 0x698 <BMP280_StartMeasurment+0xc6>
	return(delay); // return the delay in ms (rounded up) to wait before retrieving data
	else
	return(-1); // or return -1 if there was a problem communicating with the BMP
     690:	8f ef       	ldi	r24, 0xFF	; 255
     692:	03 c0       	rjmp	.+6      	; 0x69a <BMP280_StartMeasurment+0xc8>
     694:	8f ef       	ldi	r24, 0xFF	; 255
     696:	01 c0       	rjmp	.+2      	; 0x69a <BMP280_StartMeasurment+0xc8>
		delay = 9;
		break;
	}
	result = BMP280_WriteBytes(&data[0], 2);
	if (result) // good write?
	return(delay); // return the delay in ms (rounded up) to wait before retrieving data
     698:	81 2f       	mov	r24, r17
	else
	return(-1); // or return -1 if there was a problem communicating with the BMP
}
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	1f 91       	pop	r17
     6a4:	08 95       	ret

000006a6 <BMP280_GetUnPT>:
  @brief Gets the uncalibrated temperature and pressure data
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetUnPT(double *uP, double *uT){
     6a6:	8f 92       	push	r8
     6a8:	9f 92       	push	r9
     6aa:	bf 92       	push	r11
     6ac:	cf 92       	push	r12
     6ae:	df 92       	push	r13
     6b0:	ef 92       	push	r14
     6b2:	ff 92       	push	r15
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	00 d0       	rcall	.+0      	; 0x6be <BMP280_GetUnPT+0x18>
     6be:	00 d0       	rcall	.+0      	; 0x6c0 <BMP280_GetUnPT+0x1a>
     6c0:	00 d0       	rcall	.+0      	; 0x6c2 <BMP280_GetUnPT+0x1c>
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
     6c6:	4c 01       	movw	r8, r24
     6c8:	8b 01       	movw	r16, r22
	unsigned char data[6];
	char result;
	
	data[0] = BMP280_REG_RESULT_PRESSURE; //0xF7
     6ca:	87 ef       	ldi	r24, 0xF7	; 247
     6cc:	89 83       	std	Y+1, r24	; 0x01

	result = BMP280_ReadBytes(&data[0], 6); // 0xF7; xF8, 0xF9, 0xFA, 0xFB, 0xFC
     6ce:	66 e0       	ldi	r22, 0x06	; 6
     6d0:	ce 01       	movw	r24, r28
     6d2:	01 96       	adiw	r24, 0x01	; 1
     6d4:	0e 94 b4 01 	call	0x368	; 0x368 <BMP280_ReadBytes>
     6d8:	b8 2e       	mov	r11, r24
	if (result){ // good read
     6da:	88 23       	and	r24, r24
     6dc:	09 f4       	brne	.+2      	; 0x6e0 <BMP280_GetUnPT+0x3a>
     6de:	72 c0       	rjmp	.+228    	; 0x7c4 <BMP280_GetUnPT+0x11e>
		double factor = pow(2, 4);
		*uP = (( (data[0] *256.0) + data[1] + (data[2]/256.0))) * factor ;	//20bit UP
     6e0:	69 81       	ldd	r22, Y+1	; 0x01
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	40 e8       	ldi	r20, 0x80	; 128
     6f2:	53 e4       	ldi	r21, 0x43	; 67
     6f4:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     6f8:	6b 01       	movw	r12, r22
     6fa:	7c 01       	movw	r14, r24
     6fc:	6a 81       	ldd	r22, Y+2	; 0x02
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     708:	9b 01       	movw	r18, r22
     70a:	ac 01       	movw	r20, r24
     70c:	c7 01       	movw	r24, r14
     70e:	b6 01       	movw	r22, r12
     710:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
     714:	6b 01       	movw	r12, r22
     716:	7c 01       	movw	r14, r24
     718:	6b 81       	ldd	r22, Y+3	; 0x03
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	40 e8       	ldi	r20, 0x80	; 128
     72a:	5b e3       	ldi	r21, 0x3B	; 59
     72c:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     730:	9b 01       	movw	r18, r22
     732:	ac 01       	movw	r20, r24
     734:	c7 01       	movw	r24, r14
     736:	b6 01       	movw	r22, r12
     738:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	40 e8       	ldi	r20, 0x80	; 128
     742:	51 e4       	ldi	r21, 0x41	; 65
     744:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     748:	f4 01       	movw	r30, r8
     74a:	60 83       	st	Z, r22
     74c:	71 83       	std	Z+1, r23	; 0x01
     74e:	82 83       	std	Z+2, r24	; 0x02
     750:	93 83       	std	Z+3, r25	; 0x03
		*uT = (( (data[3] *256.0) + data[4] + (data[5]/256.0))) * factor ;	//20bit UT
     752:	6c 81       	ldd	r22, Y+4	; 0x04
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	40 e8       	ldi	r20, 0x80	; 128
     764:	53 e4       	ldi	r21, 0x43	; 67
     766:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     76a:	6b 01       	movw	r12, r22
     76c:	7c 01       	movw	r14, r24
     76e:	6d 81       	ldd	r22, Y+5	; 0x05
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     77a:	9b 01       	movw	r18, r22
     77c:	ac 01       	movw	r20, r24
     77e:	c7 01       	movw	r24, r14
     780:	b6 01       	movw	r22, r12
     782:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
     786:	6b 01       	movw	r12, r22
     788:	7c 01       	movw	r14, r24
     78a:	6e 81       	ldd	r22, Y+6	; 0x06
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	40 e8       	ldi	r20, 0x80	; 128
     79c:	5b e3       	ldi	r21, 0x3B	; 59
     79e:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     7a2:	9b 01       	movw	r18, r22
     7a4:	ac 01       	movw	r20, r24
     7a6:	c7 01       	movw	r24, r14
     7a8:	b6 01       	movw	r22, r12
     7aa:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	40 e8       	ldi	r20, 0x80	; 128
     7b4:	51 e4       	ldi	r21, 0x41	; 65
     7b6:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     7ba:	f8 01       	movw	r30, r16
     7bc:	60 83       	st	Z, r22
     7be:	71 83       	std	Z+1, r23	; 0x01
     7c0:	82 83       	std	Z+2, r24	; 0x02
     7c2:	93 83       	std	Z+3, r25	; 0x03
		
	}
	return(result);
}
     7c4:	8b 2d       	mov	r24, r11
     7c6:	26 96       	adiw	r28, 0x06	; 6
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	de bf       	out	0x3e, r29	; 62
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	cd bf       	out	0x3d, r28	; 61
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	ff 90       	pop	r15
     7dc:	ef 90       	pop	r14
     7de:	df 90       	pop	r13
     7e0:	cf 90       	pop	r12
     7e2:	bf 90       	pop	r11
     7e4:	9f 90       	pop	r9
     7e6:	8f 90       	pop	r8
     7e8:	08 95       	ret

000007ea <BMP280_CalcTemperature>:
  @brief Calculates temperature
  @param[out] pointer to a place to store the temperature data
  @param[in] pointer to the uncalibrated temperature data
  @return status
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
     7ea:	4f 92       	push	r4
     7ec:	5f 92       	push	r5
     7ee:	6f 92       	push	r6
     7f0:	7f 92       	push	r7
     7f2:	8f 92       	push	r8
     7f4:	9f 92       	push	r9
     7f6:	af 92       	push	r10
     7f8:	bf 92       	push	r11
     7fa:	cf 92       	push	r12
     7fc:	df 92       	push	r13
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	ec 01       	movw	r28, r24
	double adc_T = *uT ;
     808:	fb 01       	movw	r30, r22
     80a:	40 80       	ld	r4, Z
     80c:	51 80       	ldd	r5, Z+1	; 0x01
     80e:	62 80       	ldd	r6, Z+2	; 0x02
     810:	73 80       	ldd	r7, Z+3	; 0x03
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
     812:	60 91 68 05 	lds	r22, 0x0568
     816:	70 91 69 05 	lds	r23, 0x0569
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0e 94 7f 12 	call	0x24fe	; 0x24fe <__floatunsisf>
     822:	4b 01       	movw	r8, r22
     824:	5c 01       	movw	r10, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	40 e0       	ldi	r20, 0x00	; 0
     82c:	57 e3       	ldi	r21, 0x37	; 55
     82e:	c3 01       	movw	r24, r6
     830:	b2 01       	movw	r22, r4
     832:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     836:	6b 01       	movw	r12, r22
     838:	7c 01       	movw	r14, r24
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	40 e0       	ldi	r20, 0x00	; 0
     840:	59 e3       	ldi	r21, 0x39	; 57
     842:	c5 01       	movw	r24, r10
     844:	b4 01       	movw	r22, r8
     846:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     84a:	9b 01       	movw	r18, r22
     84c:	ac 01       	movw	r20, r24
     84e:	c7 01       	movw	r24, r14
     850:	b6 01       	movw	r22, r12
     852:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__subsf3>
     856:	6b 01       	movw	r12, r22
     858:	7c 01       	movw	r14, r24
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
	double adc_T = *uT ;
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	40 e8       	ldi	r20, 0x80	; 128
     860:	58 e3       	ldi	r21, 0x38	; 56
     862:	c3 01       	movw	r24, r6
     864:	b2 01       	movw	r22, r4
     866:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     86a:	2b 01       	movw	r4, r22
     86c:	3c 01       	movw	r6, r24
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	40 e8       	ldi	r20, 0x80	; 128
     874:	5a e3       	ldi	r21, 0x3A	; 58
     876:	c5 01       	movw	r24, r10
     878:	b4 01       	movw	r22, r8
     87a:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     87e:	9b 01       	movw	r18, r22
     880:	ac 01       	movw	r20, r24
     882:	c3 01       	movw	r24, r6
     884:	b2 01       	movw	r22, r4
     886:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__subsf3>
     88a:	4b 01       	movw	r8, r22
     88c:	5c 01       	movw	r10, r24
     88e:	60 91 7e 05 	lds	r22, 0x057E
     892:	70 91 7f 05 	lds	r23, 0x057F
     896:	88 27       	eor	r24, r24
     898:	77 fd       	sbrc	r23, 7
     89a:	80 95       	com	r24
     89c:	98 2f       	mov	r25, r24
     89e:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     8a2:	9b 01       	movw	r18, r22
     8a4:	ac 01       	movw	r20, r24
     8a6:	c5 01       	movw	r24, r10
     8a8:	b4 01       	movw	r22, r8
     8aa:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     8ae:	4b 01       	movw	r8, r22
     8b0:	5c 01       	movw	r10, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
     8b2:	a7 01       	movw	r20, r14
     8b4:	96 01       	movw	r18, r12
     8b6:	c7 01       	movw	r24, r14
     8b8:	b6 01       	movw	r22, r12
     8ba:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     8be:	6b 01       	movw	r12, r22
     8c0:	7c 01       	movw	r14, r24
     8c2:	60 91 7c 05 	lds	r22, 0x057C
     8c6:	70 91 7d 05 	lds	r23, 0x057D
     8ca:	88 27       	eor	r24, r24
     8cc:	77 fd       	sbrc	r23, 7
     8ce:	80 95       	com	r24
     8d0:	98 2f       	mov	r25, r24
     8d2:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     8d6:	9b 01       	movw	r18, r22
     8d8:	ac 01       	movw	r20, r24
     8da:	c7 01       	movw	r24, r14
     8dc:	b6 01       	movw	r22, r12
     8de:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     8e2:	9b 01       	movw	r18, r22
     8e4:	ac 01       	movw	r20, r24
	t_fine = (long signed int)(var1+var2);
     8e6:	c5 01       	movw	r24, r10
     8e8:	b4 01       	movw	r22, r8
     8ea:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
     8ee:	6b 01       	movw	r12, r22
     8f0:	7c 01       	movw	r14, r24
     8f2:	0e 94 4e 12 	call	0x249c	; 0x249c <__fixsfsi>
     8f6:	60 93 60 05 	sts	0x0560, r22
     8fa:	70 93 61 05 	sts	0x0561, r23
     8fe:	80 93 62 05 	sts	0x0562, r24
     902:	90 93 63 05 	sts	0x0563, r25
	
	*T = (var1+var2)/5120.0;
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	40 ea       	ldi	r20, 0xA0	; 160
     90c:	55 e4       	ldi	r21, 0x45	; 69
     90e:	c7 01       	movw	r24, r14
     910:	b6 01       	movw	r22, r12
     912:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__divsf3>
     916:	6b 01       	movw	r12, r22
     918:	7c 01       	movw	r14, r24
     91a:	68 83       	st	Y, r22
     91c:	79 83       	std	Y+1, r23	; 0x01
     91e:	8a 83       	std	Y+2, r24	; 0x02
     920:	9b 83       	std	Y+3, r25	; 0x03
	
	if(*T>100.0 || *T <(-100.0))return 0;
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	48 ec       	ldi	r20, 0xC8	; 200
     928:	52 e4       	ldi	r21, 0x42	; 66
     92a:	0e 94 31 13 	call	0x2662	; 0x2662 <__gesf2>
     92e:	18 16       	cp	r1, r24
     930:	74 f0       	brlt	.+28     	; 0x94e <BMP280_CalcTemperature+0x164>
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	48 ec       	ldi	r20, 0xC8	; 200
     938:	52 ec       	ldi	r21, 0xC2	; 194
     93a:	c7 01       	movw	r24, r14
     93c:	b6 01       	movw	r22, r12
     93e:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__cmpsf2>
     942:	88 1f       	adc	r24, r24
     944:	88 27       	eor	r24, r24
     946:	88 1f       	adc	r24, r24
     948:	91 e0       	ldi	r25, 0x01	; 1
     94a:	89 27       	eor	r24, r25
     94c:	01 c0       	rjmp	.+2      	; 0x950 <BMP280_CalcTemperature+0x166>
     94e:	80 e0       	ldi	r24, 0x00	; 0
	
	return (1);
}
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	ff 90       	pop	r15
     956:	ef 90       	pop	r14
     958:	df 90       	pop	r13
     95a:	cf 90       	pop	r12
     95c:	bf 90       	pop	r11
     95e:	af 90       	pop	r10
     960:	9f 90       	pop	r9
     962:	8f 90       	pop	r8
     964:	7f 90       	pop	r7
     966:	6f 90       	pop	r6
     968:	5f 90       	pop	r5
     96a:	4f 90       	pop	r4
     96c:	08 95       	ret

0000096e <BMP280_CalcPressure>:
  @brief Calculates pressure
  @param[out] pointer to a place to store the pressure data
  @param[in] pointer to the uncalibrated pressure data
  @return status
*****************************************************************************/
char BMP280_CalcPressure(double *P,double *uP){
     96e:	4f 92       	push	r4
     970:	5f 92       	push	r5
     972:	6f 92       	push	r6
     974:	7f 92       	push	r7
     976:	8f 92       	push	r8
     978:	9f 92       	push	r9
     97a:	af 92       	push	r10
     97c:	bf 92       	push	r11
     97e:	cf 92       	push	r12
     980:	df 92       	push	r13
     982:	ef 92       	push	r14
     984:	ff 92       	push	r15
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	8c 01       	movw	r16, r24
     990:	eb 01       	movw	r28, r22
	//char result;
	double var1 , var2 ;
	
	var1 = ((double)t_fine/2.0) - 64000.0;
     992:	60 91 60 05 	lds	r22, 0x0560
     996:	70 91 61 05 	lds	r23, 0x0561
     99a:	80 91 62 05 	lds	r24, 0x0562
     99e:	90 91 63 05 	lds	r25, 0x0563
     9a2:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     9a6:	20 e0       	ldi	r18, 0x00	; 0
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	40 e0       	ldi	r20, 0x00	; 0
     9ac:	5f e3       	ldi	r21, 0x3F	; 63
     9ae:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     9b2:	20 e0       	ldi	r18, 0x00	; 0
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	4a e7       	ldi	r20, 0x7A	; 122
     9b8:	57 e4       	ldi	r21, 0x47	; 71
     9ba:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__subsf3>
     9be:	6b 01       	movw	r12, r22
     9c0:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
     9c2:	60 91 72 05 	lds	r22, 0x0572
     9c6:	70 91 73 05 	lds	r23, 0x0573
     9ca:	88 27       	eor	r24, r24
     9cc:	77 fd       	sbrc	r23, 7
     9ce:	80 95       	com	r24
     9d0:	98 2f       	mov	r25, r24
     9d2:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     9d6:	a7 01       	movw	r20, r14
     9d8:	96 01       	movw	r18, r12
     9da:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	40 e0       	ldi	r20, 0x00	; 0
     9e4:	58 e3       	ldi	r21, 0x38	; 56
     9e6:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     9ea:	a7 01       	movw	r20, r14
     9ec:	96 01       	movw	r18, r12
     9ee:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     9f2:	4b 01       	movw	r8, r22
     9f4:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
     9f6:	60 91 74 05 	lds	r22, 0x0574
     9fa:	70 91 75 05 	lds	r23, 0x0575
     9fe:	88 27       	eor	r24, r24
     a00:	77 fd       	sbrc	r23, 7
     a02:	80 95       	com	r24
     a04:	98 2f       	mov	r25, r24
     a06:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     a0a:	a7 01       	movw	r20, r14
     a0c:	96 01       	movw	r18, r12
     a0e:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     a12:	9b 01       	movw	r18, r22
     a14:	ac 01       	movw	r20, r24
     a16:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
     a1a:	a5 01       	movw	r20, r10
     a1c:	94 01       	movw	r18, r8
     a1e:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	40 e8       	ldi	r20, 0x80	; 128
     a28:	5e e3       	ldi	r21, 0x3E	; 62
     a2a:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     a2e:	4b 01       	movw	r8, r22
     a30:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var1 = (((double)dig_P3) * var1 * var1/524288.0 + ((double)dig_P2) * var1) / 524288.0;
     a32:	60 91 78 05 	lds	r22, 0x0578
     a36:	70 91 79 05 	lds	r23, 0x0579
     a3a:	88 27       	eor	r24, r24
     a3c:	77 fd       	sbrc	r23, 7
     a3e:	80 95       	com	r24
     a40:	98 2f       	mov	r25, r24
     a42:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     a46:	a7 01       	movw	r20, r14
     a48:	96 01       	movw	r18, r12
     a4a:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     a4e:	a7 01       	movw	r20, r14
     a50:	96 01       	movw	r18, r12
     a52:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e0       	ldi	r20, 0x00	; 0
     a5c:	56 e3       	ldi	r21, 0x36	; 54
     a5e:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     a62:	2b 01       	movw	r4, r22
     a64:	3c 01       	movw	r6, r24
     a66:	60 91 7a 05 	lds	r22, 0x057A
     a6a:	70 91 7b 05 	lds	r23, 0x057B
     a6e:	88 27       	eor	r24, r24
     a70:	77 fd       	sbrc	r23, 7
     a72:	80 95       	com	r24
     a74:	98 2f       	mov	r25, r24
     a76:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     a7a:	a7 01       	movw	r20, r14
     a7c:	96 01       	movw	r18, r12
     a7e:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     a82:	9b 01       	movw	r18, r22
     a84:	ac 01       	movw	r20, r24
     a86:	c3 01       	movw	r24, r6
     a88:	b2 01       	movw	r22, r4
     a8a:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	56 e3       	ldi	r21, 0x36	; 54
     a96:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
     a9a:	20 e0       	ldi	r18, 0x00	; 0
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	40 e0       	ldi	r20, 0x00	; 0
     aa0:	57 e4       	ldi	r21, 0x47	; 71
     aa2:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	58 e3       	ldi	r21, 0x38	; 56
     aae:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     ab2:	6b 01       	movw	r12, r22
     ab4:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
     ab6:	28 81       	ld	r18, Y
     ab8:	39 81       	ldd	r19, Y+1	; 0x01
     aba:	4a 81       	ldd	r20, Y+2	; 0x02
     abc:	5b 81       	ldd	r21, Y+3	; 0x03
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	80 e8       	ldi	r24, 0x80	; 128
     ac4:	99 e4       	ldi	r25, 0x49	; 73
     ac6:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__subsf3>
     aca:	2b 01       	movw	r4, r22
     acc:	3c 01       	movw	r6, r24
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
     ace:	60 91 76 05 	lds	r22, 0x0576
     ad2:	70 91 77 05 	lds	r23, 0x0577
     ad6:	88 27       	eor	r24, r24
     ad8:	77 fd       	sbrc	r23, 7
     ada:	80 95       	com	r24
     adc:	98 2f       	mov	r25, r24
     ade:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     ae2:	20 e0       	ldi	r18, 0x00	; 0
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	40 e8       	ldi	r20, 0x80	; 128
     ae8:	57 e4       	ldi	r21, 0x47	; 71
     aea:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	c5 01       	movw	r24, r10
     af4:	b4 01       	movw	r22, r8
     af6:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	40 e8       	ldi	r20, 0x80	; 128
     b00:	59 e3       	ldi	r21, 0x39	; 57
     b02:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     b06:	9b 01       	movw	r18, r22
     b08:	ac 01       	movw	r20, r24
     b0a:	c3 01       	movw	r24, r6
     b0c:	b2 01       	movw	r22, r4
     b0e:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__subsf3>
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e5       	ldi	r19, 0x50	; 80
     b16:	43 ec       	ldi	r20, 0xC3	; 195
     b18:	55 e4       	ldi	r21, 0x45	; 69
     b1a:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     b1e:	4b 01       	movw	r8, r22
     b20:	5c 01       	movw	r10, r24
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
     b22:	60 91 6a 05 	lds	r22, 0x056A
     b26:	70 91 6b 05 	lds	r23, 0x056B
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	0e 94 7f 12 	call	0x24fe	; 0x24fe <__floatunsisf>
     b32:	9b 01       	movw	r18, r22
     b34:	ac 01       	movw	r20, r24
     b36:	c7 01       	movw	r24, r14
     b38:	b6 01       	movw	r22, r12
     b3a:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     b3e:	9b 01       	movw	r18, r22
     b40:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
     b42:	c5 01       	movw	r24, r10
     b44:	b4 01       	movw	r22, r8
     b46:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__divsf3>
     b4a:	6b 01       	movw	r12, r22
     b4c:	7c 01       	movw	r14, r24
	//Serial.print("p = ");Serial.println(p,2);
	
	var1 = ((double)dig_P9)*p*p/2147483648.0;	//overflow
     b4e:	60 91 6c 05 	lds	r22, 0x056C
     b52:	70 91 6d 05 	lds	r23, 0x056D
     b56:	88 27       	eor	r24, r24
     b58:	77 fd       	sbrc	r23, 7
     b5a:	80 95       	com	r24
     b5c:	98 2f       	mov	r25, r24
     b5e:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     b62:	a7 01       	movw	r20, r14
     b64:	96 01       	movw	r18, r12
     b66:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     b6a:	a7 01       	movw	r20, r14
     b6c:	96 01       	movw	r18, r12
     b6e:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     b72:	20 e0       	ldi	r18, 0x00	; 0
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	40 e0       	ldi	r20, 0x00	; 0
     b78:	50 e3       	ldi	r21, 0x30	; 48
     b7a:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     b7e:	4b 01       	movw	r8, r22
     b80:	5c 01       	movw	r10, r24
	
	var2 = p*((double)dig_P8)/32768.0;
     b82:	60 91 6e 05 	lds	r22, 0x056E
     b86:	70 91 6f 05 	lds	r23, 0x056F
     b8a:	88 27       	eor	r24, r24
     b8c:	77 fd       	sbrc	r23, 7
     b8e:	80 95       	com	r24
     b90:	98 2f       	mov	r25, r24
     b92:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     b96:	a7 01       	movw	r20, r14
     b98:	96 01       	movw	r18, r12
     b9a:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	58 e3       	ldi	r21, 0x38	; 56
     ba6:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     baa:	9b 01       	movw	r18, r22
     bac:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	p = p + (var1+var2+((double)dig_P7))/16.0;
     bae:	c5 01       	movw	r24, r10
     bb0:	b4 01       	movw	r22, r8
     bb2:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
     bb6:	4b 01       	movw	r8, r22
     bb8:	5c 01       	movw	r10, r24
     bba:	60 91 70 05 	lds	r22, 0x0570
     bbe:	70 91 71 05 	lds	r23, 0x0571
     bc2:	88 27       	eor	r24, r24
     bc4:	77 fd       	sbrc	r23, 7
     bc6:	80 95       	com	r24
     bc8:	98 2f       	mov	r25, r24
     bca:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     bce:	9b 01       	movw	r18, r22
     bd0:	ac 01       	movw	r20, r24
     bd2:	c5 01       	movw	r24, r10
     bd4:	b4 01       	movw	r22, r8
     bd6:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	40 e8       	ldi	r20, 0x80	; 128
     be0:	5d e3       	ldi	r21, 0x3D	; 61
     be2:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     be6:	a7 01       	movw	r20, r14
     be8:	96 01       	movw	r18, r12
     bea:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
	//Serial.print("p = ");Serial.println(p,2);
	
	*P = p/100.0 ;
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	48 ec       	ldi	r20, 0xC8	; 200
     bf4:	52 e4       	ldi	r21, 0x42	; 66
     bf6:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__divsf3>
     bfa:	6b 01       	movw	r12, r22
     bfc:	7c 01       	movw	r14, r24
     bfe:	f8 01       	movw	r30, r16
     c00:	60 83       	st	Z, r22
     c02:	71 83       	std	Z+1, r23	; 0x01
     c04:	82 83       	std	Z+2, r24	; 0x02
     c06:	93 83       	std	Z+3, r25	; 0x03
	
	if((*P>1200.0) || (*P < 800.0))return (0);
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	46 e9       	ldi	r20, 0x96	; 150
     c0e:	54 e4       	ldi	r21, 0x44	; 68
     c10:	0e 94 31 13 	call	0x2662	; 0x2662 <__gesf2>
     c14:	18 16       	cp	r1, r24
     c16:	74 f0       	brlt	.+28     	; 0xc34 <BMP280_CalcPressure+0x2c6>
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	48 e4       	ldi	r20, 0x48	; 72
     c1e:	54 e4       	ldi	r21, 0x44	; 68
     c20:	c7 01       	movw	r24, r14
     c22:	b6 01       	movw	r22, r12
     c24:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__cmpsf2>
     c28:	88 1f       	adc	r24, r24
     c2a:	88 27       	eor	r24, r24
     c2c:	88 1f       	adc	r24, r24
     c2e:	91 e0       	ldi	r25, 0x01	; 1
     c30:	89 27       	eor	r24, r25
     c32:	01 c0       	rjmp	.+2      	; 0xc36 <BMP280_CalcPressure+0x2c8>
     c34:	80 e0       	ldi	r24, 0x00	; 0
	return (1);
}
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	cf 90       	pop	r12
     c46:	bf 90       	pop	r11
     c48:	af 90       	pop	r10
     c4a:	9f 90       	pop	r9
     c4c:	8f 90       	pop	r8
     c4e:	7f 90       	pop	r7
     c50:	6f 90       	pop	r6
     c52:	5f 90       	pop	r5
     c54:	4f 90       	pop	r4
     c56:	08 95       	ret

00000c58 <BMP280_GetTemperatureAndPressure>:
  @brief Gets temperature and pressure
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetTemperatureAndPressure(double *T,double *P){
     c58:	ef 92       	push	r14
     c5a:	ff 92       	push	r15
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
     c68:	28 97       	sbiw	r28, 0x08	; 8
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	8c 01       	movw	r16, r24
     c76:	7b 01       	movw	r14, r22
	double uP,uT ;
	char result = BMP280_GetUnPT(&uP,&uT);
     c78:	be 01       	movw	r22, r28
     c7a:	6b 5f       	subi	r22, 0xFB	; 251
     c7c:	7f 4f       	sbci	r23, 0xFF	; 255
     c7e:	ce 01       	movw	r24, r28
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	0e 94 53 03 	call	0x6a6	; 0x6a6 <BMP280_GetUnPT>
	if(result!=0){
     c86:	88 23       	and	r24, r24
     c88:	d1 f0       	breq	.+52     	; 0xcbe <BMP280_GetTemperatureAndPressure+0x66>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
     c8a:	be 01       	movw	r22, r28
     c8c:	6b 5f       	subi	r22, 0xFB	; 251
     c8e:	7f 4f       	sbci	r23, 0xFF	; 255
     c90:	c8 01       	movw	r24, r16
     c92:	0e 94 f5 03 	call	0x7ea	; 0x7ea <BMP280_CalcTemperature>
		if(result){
     c96:	88 23       	and	r24, r24
     c98:	69 f0       	breq	.+26     	; 0xcb4 <BMP280_GetTemperatureAndPressure+0x5c>
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
     c9a:	be 01       	movw	r22, r28
     c9c:	6f 5f       	subi	r22, 0xFF	; 255
     c9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ca0:	c7 01       	movw	r24, r14
     ca2:	0e 94 b7 04 	call	0x96e	; 0x96e <BMP280_CalcPressure>
			if(result)return (1);
     ca6:	81 11       	cpse	r24, r1
     ca8:	0f c0       	rjmp	.+30     	; 0xcc8 <BMP280_GetTemperatureAndPressure+0x70>
			else error = 3 ;	// pressure error ;
     caa:	83 e0       	ldi	r24, 0x03	; 3
     cac:	80 93 5f 05 	sts	0x055F, r24
			return (0);
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	0b c0       	rjmp	.+22     	; 0xcca <BMP280_GetTemperatureAndPressure+0x72>
		}else
		error = 2;	// temperature error ;
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	80 93 5f 05 	sts	0x055F, r24
	}
	else
	error = 1;
	
	return (0);
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	06 c0       	rjmp	.+12     	; 0xcca <BMP280_GetTemperatureAndPressure+0x72>
			return (0);
		}else
		error = 2;	// temperature error ;
	}
	else
	error = 1;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	80 93 5f 05 	sts	0x055F, r24
	
	return (0);
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	01 c0       	rjmp	.+2      	; 0xcca <BMP280_GetTemperatureAndPressure+0x72>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
		if(result){
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
			if(result)return (1);
     cc8:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	error = 1;
	
	return (0);
}
     cca:	28 96       	adiw	r28, 0x08	; 8
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	cd bf       	out	0x3d, r28	; 61
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	ff 90       	pop	r15
     ce0:	ef 90       	pop	r14
     ce2:	08 95       	ret

00000ce4 <Si7020_readHumidity>:

/*************************************************************************//**
  @brief Read humidity from Si7020
  @return status one if successfully read and crc check, otherwise return zero
*****************************************************************************/
char Si7020_readHumidity(unsigned char *data, char length){
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	ec 01       	movw	r28, r24
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
     cea:	80 e4       	ldi	r24, 0x40	; 64
     cec:	0e 94 c9 08 	call	0x1192	; 0x1192 <TWI_BeginWrite>
	status = TWI_WriteByte(SI7020_REL_HUMIDITY_HOLD);	
     cf0:	85 ee       	ldi	r24, 0xE5	; 229
     cf2:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_WriteByte>
	if(status != TWI_SENT_ACK) return 0; //Error out
     cf6:	88 32       	cpi	r24, 0x28	; 40
     cf8:	e9 f4       	brne	.+58     	; 0xd34 <Si7020_readHumidity+0x50>
	
	status = TWI_BeginRead(SI7020_ADDR);
     cfa:	80 e4       	ldi	r24, 0x40	; 64
     cfc:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TWI_BeginRead>
	if(status != TWI_SLAR_ACK)	return 0;
     d00:	80 34       	cpi	r24, 0x40	; 64
     d02:	d1 f4       	brne	.+52     	; 0xd38 <Si7020_readHumidity+0x54>
	
	status = TWI_Read(data,3,false);
     d04:	40 e0       	ldi	r20, 0x00	; 0
     d06:	63 e0       	ldi	r22, 0x03	; 3
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	ce 01       	movw	r24, r28
     d0c:	0e 94 23 09 	call	0x1246	; 0x1246 <TWI_Read>
	if(status !=TWI_REC_ACK)	return 0;
     d10:	80 35       	cpi	r24, 0x50	; 80
     d12:	a1 f4       	brne	.+40     	; 0xd3c <Si7020_readHumidity+0x58>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawHumidity, checksum) != 0) return 0;
     d14:	6a 81       	ldd	r22, Y+2	; 0x02
     d16:	70 e0       	ldi	r23, 0x00	; 0
	if(status !=TWI_REC_ACK)	return 0;
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
     d18:	88 81       	ld	r24, Y
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	98 2f       	mov	r25, r24
     d1e:	88 27       	eor	r24, r24
     d20:	29 81       	ldd	r18, Y+1	; 0x01
	if(check_crc(rawHumidity, checksum) != 0) return 0;
     d22:	82 2b       	or	r24, r18
     d24:	0e 94 55 0e 	call	0x1caa	; 0x1caa <check_crc>
     d28:	89 2b       	or	r24, r25
     d2a:	51 f4       	brne	.+20     	; 0xd40 <Si7020_readHumidity+0x5c>
	
	TWI_Stop();
     d2c:	0e 94 1e 09 	call	0x123c	; 0x123c <TWI_Stop>
	return 1;
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	07 c0       	rjmp	.+14     	; 0xd42 <Si7020_readHumidity+0x5e>
char Si7020_readHumidity(unsigned char *data, char length){
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
	status = TWI_WriteByte(SI7020_REL_HUMIDITY_HOLD);	
	if(status != TWI_SENT_ACK) return 0; //Error out
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	05 c0       	rjmp	.+10     	; 0xd42 <Si7020_readHumidity+0x5e>
	
	status = TWI_BeginRead(SI7020_ADDR);
	if(status != TWI_SLAR_ACK)	return 0;
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	03 c0       	rjmp	.+6      	; 0xd42 <Si7020_readHumidity+0x5e>
	
	status = TWI_Read(data,3,false);
	if(status !=TWI_REC_ACK)	return 0;
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	01 c0       	rjmp	.+2      	; 0xd42 <Si7020_readHumidity+0x5e>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawHumidity, checksum) != 0) return 0;
     d40:	80 e0       	ldi	r24, 0x00	; 0
	
	TWI_Stop();
	return 1;
}
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	08 95       	ret

00000d48 <Si7020_calHumidity>:

/*************************************************************************//**
  @brief Calculate humidity from Si7020
  @return humidity value
*****************************************************************************/
float Si7020_calHumidity(unsigned char *data) {
     d48:	fc 01       	movw	r30, r24
	unsigned char msb = data[0];
	unsigned char lsb = data[1];

	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
     d4a:	80 81       	ld	r24, Z
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	98 2f       	mov	r25, r24
     d50:	88 27       	eor	r24, r24
     d52:	21 81       	ldd	r18, Z+1	; 0x01
     d54:	bc 01       	movw	r22, r24
     d56:	62 2b       	or	r22, r18
	
	//Given the raw humidity data, calculate the actual relative humidity
	float tempRH = rawHumidity / (float)65536;
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	0e 94 7f 12 	call	0x24fe	; 0x24fe <__floatunsisf>
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e8       	ldi	r20, 0x80	; 128
     d66:	57 e3       	ldi	r21, 0x37	; 55
     d68:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
	float rh = 125 * tempRH -6;
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	4a ef       	ldi	r20, 0xFA	; 250
     d72:	52 e4       	ldi	r21, 0x42	; 66
     d74:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	40 ec       	ldi	r20, 0xC0	; 192
     d7e:	50 e4       	ldi	r21, 0x40	; 64
     d80:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__subsf3>
	
	return rh;
}
     d84:	08 95       	ret

00000d86 <Si7020_readTemperature>:

/*************************************************************************//**
  @brief Read temperature from Si7020
  @return status one if successfully read and crc check, otherwise return zero
*****************************************************************************/
char Si7020_readTemperature(unsigned char *data, char length){
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	ec 01       	movw	r28, r24
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
     d8c:	80 e4       	ldi	r24, 0x40	; 64
     d8e:	0e 94 c9 08 	call	0x1192	; 0x1192 <TWI_BeginWrite>
	status = TWI_WriteByte(SI7020_TEMPERATURE_HOLD);	
     d92:	83 ee       	ldi	r24, 0xE3	; 227
     d94:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_WriteByte>
	if(status != TWI_SENT_ACK) return 0; //Error out
     d98:	88 32       	cpi	r24, 0x28	; 40
     d9a:	e9 f4       	brne	.+58     	; 0xdd6 <Si7020_readTemperature+0x50>
	
	status = TWI_BeginRead(SI7020_ADDR);
     d9c:	80 e4       	ldi	r24, 0x40	; 64
     d9e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TWI_BeginRead>
	if(status != TWI_SLAR_ACK)	return 0;
     da2:	80 34       	cpi	r24, 0x40	; 64
     da4:	d1 f4       	brne	.+52     	; 0xdda <Si7020_readTemperature+0x54>
	
	status = TWI_Read(data,3,false);
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	63 e0       	ldi	r22, 0x03	; 3
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	ce 01       	movw	r24, r28
     dae:	0e 94 23 09 	call	0x1246	; 0x1246 <TWI_Read>
	if(status !=TWI_REC_ACK)	return 0;
     db2:	80 35       	cpi	r24, 0x50	; 80
     db4:	a1 f4       	brne	.+40     	; 0xdde <Si7020_readTemperature+0x58>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawTemperature, checksum) != 0) return 0;
     db6:	6a 81       	ldd	r22, Y+2	; 0x02
     db8:	70 e0       	ldi	r23, 0x00	; 0
	if(status !=TWI_REC_ACK)	return 0;
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
     dba:	88 81       	ld	r24, Y
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	98 2f       	mov	r25, r24
     dc0:	88 27       	eor	r24, r24
     dc2:	29 81       	ldd	r18, Y+1	; 0x01
	if(check_crc(rawTemperature, checksum) != 0) return 0;
     dc4:	82 2b       	or	r24, r18
     dc6:	0e 94 55 0e 	call	0x1caa	; 0x1caa <check_crc>
     dca:	89 2b       	or	r24, r25
     dcc:	51 f4       	brne	.+20     	; 0xde2 <Si7020_readTemperature+0x5c>
	
	TWI_Stop();
     dce:	0e 94 1e 09 	call	0x123c	; 0x123c <TWI_Stop>
	return 1;
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	07 c0       	rjmp	.+14     	; 0xde4 <Si7020_readTemperature+0x5e>
char Si7020_readTemperature(unsigned char *data, char length){
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
	status = TWI_WriteByte(SI7020_TEMPERATURE_HOLD);	
	if(status != TWI_SENT_ACK) return 0; //Error out
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	05 c0       	rjmp	.+10     	; 0xde4 <Si7020_readTemperature+0x5e>
	
	status = TWI_BeginRead(SI7020_ADDR);
	if(status != TWI_SLAR_ACK)	return 0;
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	03 c0       	rjmp	.+6      	; 0xde4 <Si7020_readTemperature+0x5e>
	
	status = TWI_Read(data,3,false);
	if(status !=TWI_REC_ACK)	return 0;
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	01 c0       	rjmp	.+2      	; 0xde4 <Si7020_readTemperature+0x5e>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawTemperature, checksum) != 0) return 0;
     de2:	80 e0       	ldi	r24, 0x00	; 0
	
	TWI_Stop();
	return 1;
}
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	08 95       	ret

00000dea <Si7020_calTemperature>:

/*************************************************************************//**
  @brief Calculate temperature from Si7020
  @return temperature value
*****************************************************************************/
float Si7020_calTemperature(unsigned char *data) {
     dea:	fc 01       	movw	r30, r24
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
     dec:	80 81       	ld	r24, Z
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	98 2f       	mov	r25, r24
     df2:	88 27       	eor	r24, r24
     df4:	21 81       	ldd	r18, Z+1	; 0x01
     df6:	bc 01       	movw	r22, r24
     df8:	62 2b       	or	r22, r18
	
	//Given the raw temperature data, calculate the actual temperature
	float tempTemperature = rawTemperature / (float)65536; 
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 94 7f 12 	call	0x24fe	; 0x24fe <__floatunsisf>
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	40 e8       	ldi	r20, 0x80	; 128
     e08:	57 e3       	ldi	r21, 0x37	; 55
     e0a:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
	float realTemperature = 175.72 * tempTemperature - 46.85;
     e0e:	22 e5       	ldi	r18, 0x52	; 82
     e10:	38 eb       	ldi	r19, 0xB8	; 184
     e12:	4f e2       	ldi	r20, 0x2F	; 47
     e14:	53 e4       	ldi	r21, 0x43	; 67
     e16:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     e1a:	26 e6       	ldi	r18, 0x66	; 102
     e1c:	36 e6       	ldi	r19, 0x66	; 102
     e1e:	4b e3       	ldi	r20, 0x3B	; 59
     e20:	52 e4       	ldi	r21, 0x42	; 66
     e22:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__subsf3>
	
	return realTemperature;
     e26:	08 95       	ret

00000e28 <ADC_Init>:

/*************************************************************************//**
  @brief Initializes the ADC
*****************************************************************************/
void ADC_Init(void) {
	ADCSRA = (1<<ADEN)|(4<<ADPS0); //enables the ADC module, CPU clock prescale=16
     e28:	84 e8       	ldi	r24, 0x84	; 132
     e2a:	80 93 7a 00 	sts	0x007A, r24
	
	ADCSRC = 0x05|(1<<ADTHT0)|(1<<ADTHT1); //ADSUT=5
     e2e:	85 ec       	ldi	r24, 0xC5	; 197
     e30:	80 93 77 00 	sts	0x0077, r24
	while((ADCSRB&(1<<AVDDOK))==0);
     e34:	eb e7       	ldi	r30, 0x7B	; 123
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	88 23       	and	r24, r24
     e3c:	ec f7       	brge	.-6      	; 0xe38 <ADC_Init+0x10>
}
     e3e:	08 95       	ret

00000e40 <__vector_15>:

/*************************************************************************//**
  @brief Timer Interrupt Service Routine
*****************************************************************************/
ISR(TIMER2_OVF_vect)
{
     e40:	1f 92       	push	r1
     e42:	0f 92       	push	r0
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	0f 92       	push	r0
     e48:	11 24       	eor	r1, r1
     e4a:	2f 93       	push	r18
     e4c:	3f 93       	push	r19
     e4e:	4f 93       	push	r20
     e50:	5f 93       	push	r21
     e52:	6f 93       	push	r22
     e54:	7f 93       	push	r23
     e56:	8f 93       	push	r24
     e58:	9f 93       	push	r25
     e5a:	af 93       	push	r26
     e5c:	bf 93       	push	r27
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31
	timer_usage ++;
     e62:	80 91 84 05 	lds	r24, 0x0584
     e66:	90 91 85 05 	lds	r25, 0x0585
     e6a:	01 96       	adiw	r24, 0x01	; 1
     e6c:	90 93 85 05 	sts	0x0585, r25
     e70:	80 93 84 05 	sts	0x0584, r24
	printf("count1 = %d\n",timer_usage);
     e74:	9f 93       	push	r25
     e76:	8f 93       	push	r24
     e78:	88 ea       	ldi	r24, 0xA8	; 168
     e7a:	92 e0       	ldi	r25, 0x02	; 2
     e7c:	9f 93       	push	r25
     e7e:	8f 93       	push	r24
     e80:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
	printf("Timestamp : %ld\n",(TimeStamp));
     e84:	80 91 83 05 	lds	r24, 0x0583
     e88:	8f 93       	push	r24
     e8a:	80 91 82 05 	lds	r24, 0x0582
     e8e:	8f 93       	push	r24
     e90:	80 91 81 05 	lds	r24, 0x0581
     e94:	8f 93       	push	r24
     e96:	80 91 80 05 	lds	r24, 0x0580
     e9a:	8f 93       	push	r24
     e9c:	85 eb       	ldi	r24, 0xB5	; 181
     e9e:	92 e0       	ldi	r25, 0x02	; 2
     ea0:	9f 93       	push	r25
     ea2:	8f 93       	push	r24
     ea4:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
	handle_timeoutq_event();
     ea8:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <handle_timeoutq_event>
     eac:	8d b7       	in	r24, 0x3d	; 61
     eae:	9e b7       	in	r25, 0x3e	; 62
     eb0:	0a 96       	adiw	r24, 0x0a	; 10
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	9e bf       	out	0x3e, r25	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	8d bf       	out	0x3d, r24	; 61
}
     ebc:	ff 91       	pop	r31
     ebe:	ef 91       	pop	r30
     ec0:	bf 91       	pop	r27
     ec2:	af 91       	pop	r26
     ec4:	9f 91       	pop	r25
     ec6:	8f 91       	pop	r24
     ec8:	7f 91       	pop	r23
     eca:	6f 91       	pop	r22
     ecc:	5f 91       	pop	r21
     ece:	4f 91       	pop	r20
     ed0:	3f 91       	pop	r19
     ed2:	2f 91       	pop	r18
     ed4:	0f 90       	pop	r0
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	0f 90       	pop	r0
     eda:	1f 90       	pop	r1
     edc:	18 95       	reti

00000ede <init_Event_Timer>:

/* Initialization Routine Example 3 : Timer 2 Async operation */
/* Clock for Timer 2 is taken from crystal connected to TOSC pins */
void init_Event_Timer(void)
{
	TimeStamp = 0;
     ede:	10 92 80 05 	sts	0x0580, r1
     ee2:	10 92 81 05 	sts	0x0581, r1
     ee6:	10 92 82 05 	sts	0x0582, r1
     eea:	10 92 83 05 	sts	0x0583, r1
	timer_usage = 0;
     eee:	10 92 85 05 	sts	0x0585, r1
     ef2:	10 92 84 05 	sts	0x0584, r1
	/* Select clock source as crystal on TOSCn pins */
	ASSR |= 1 << AS2;
     ef6:	e6 eb       	ldi	r30, 0xB6	; 182
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	80 62       	ori	r24, 0x20	; 32
     efe:	80 83       	st	Z, r24
	
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
     f00:	80 81       	ld	r24, Z
     f02:	8f 71       	andi	r24, 0x1F	; 31
     f04:	e9 f7       	brne	.-6      	; 0xf00 <init_Event_Timer+0x22>
	
	/* Stop timer 2 */
	TCCR2B = 0x00;
     f06:	10 92 b1 00 	sts	0x00B1, r1
     f0a:	08 95       	ret

00000f0c <general_set_timer>:
	// TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
}


void general_set_timer( int period_number )
{
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	ec 01       	movw	r28, r24
>>>>>>> refs/remotes/origin/master
	// printf("debug %d\n",period_number);
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
<<<<<<< HEAD
     7dc:	e6 eb       	ldi	r30, 0xB6	; 182
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	80 81       	ld	r24, Z
     7e2:	8f 71       	andi	r24, 0x1F	; 31
     7e4:	e9 f7       	brne	.-6      	; 0x7e0 <general_set_timer+0x10>
	/* Stop timer 2 */
	TCCR2B = 0x00;
     7e6:	10 92 b1 00 	sts	0x00B1, r1
=======
     f12:	e6 eb       	ldi	r30, 0xB6	; 182
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8f 71       	andi	r24, 0x1F	; 31
     f1a:	e9 f7       	brne	.-6      	; 0xf16 <general_set_timer+0xa>
	/* Stop timer 2 */
	TCCR2B = 0x00;
     f1c:	10 92 b1 00 	sts	0x00B1, r1
>>>>>>> refs/remotes/origin/master
	
	
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
     7ea:	e6 eb       	ldi	r30, 0xB6	; 182
     7ec:	f0 e0       	ldi	r31, 0x00	; 0
     7ee:	80 81       	ld	r24, Z
     7f0:	8f 71       	andi	r24, 0x1F	; 31
     7f2:	e9 f7       	brne	.-6      	; 0x7ee <general_set_timer+0x1e>
	 *  1    1    0     256		2s/256
	 *  1    1    1    1024		8s/256
	 */
	// Resolution
	// 0.25s/256
	if( period_number <= 250 )
     7f4:	8b ef       	ldi	r24, 0xFB	; 251
     7f6:	c8 16       	cp	r12, r24
     7f8:	d1 04       	cpc	r13, r1
     7fa:	e1 04       	cpc	r14, r1
     7fc:	f1 04       	cpc	r15, r1
     7fe:	ec f4       	brge	.+58     	; 0x83a <general_set_timer+0x6a>
	{
<<<<<<< HEAD
		temp = 256 - (int32_t) ( 256.0/250.0 * period_number);
     800:	c7 01       	movw	r24, r14
     802:	b6 01       	movw	r22, r12
     804:	0e 94 c0 19 	call	0x3380	; 0x3380 <__floatsisf>
     808:	2f e6       	ldi	r18, 0x6F	; 111
     80a:	32 e1       	ldi	r19, 0x12	; 18
     80c:	43 e8       	ldi	r20, 0x83	; 131
     80e:	5f e3       	ldi	r21, 0x3F	; 63
     810:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <__mulsf3>
     814:	0e 94 8d 19 	call	0x331a	; 0x331a <__fixsfsi>
=======
		temp = 256 - (int) ( 256.0/250.0 * period_number);
     f30:	be 01       	movw	r22, r28
     f32:	88 27       	eor	r24, r24
     f34:	77 fd       	sbrc	r23, 7
     f36:	80 95       	com	r24
     f38:	98 2f       	mov	r25, r24
     f3a:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     f3e:	2f e6       	ldi	r18, 0x6F	; 111
     f40:	32 e1       	ldi	r19, 0x12	; 18
     f42:	43 e8       	ldi	r20, 0x83	; 131
     f44:	5f e3       	ldi	r21, 0x3F	; 63
     f46:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     f4a:	0e 94 4e 12 	call	0x249c	; 0x249c <__fixsfsi>
>>>>>>> refs/remotes/origin/master
		temp = temp > 255 ? 255 : temp ;
     818:	20 e0       	ldi	r18, 0x00	; 0
     81a:	31 e0       	ldi	r19, 0x01	; 1
     81c:	c9 01       	movw	r24, r18
     81e:	86 1b       	sub	r24, r22
     820:	97 0b       	sbc	r25, r23
     822:	8f 3f       	cpi	r24, 0xFF	; 255
     824:	91 05       	cpc	r25, r1
     826:	19 f0       	breq	.+6      	; 0x82e <general_set_timer+0x5e>
     828:	14 f0       	brlt	.+4      	; 0x82e <general_set_timer+0x5e>
     82a:	8f ef       	ldi	r24, 0xFF	; 255
     82c:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     82e:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS21)|(1<<CS20);
     832:	83 e0       	ldi	r24, 0x03	; 3
     834:	80 93 b1 00 	sts	0x00B1, r24
     838:	94 c0       	rjmp	.+296    	; 0x962 <general_set_timer+0x192>
	}
	// Resolution
	// 0.5s/256
	else if ( period_number <= 500 )
     83a:	85 ef       	ldi	r24, 0xF5	; 245
     83c:	c8 16       	cp	r12, r24
     83e:	81 e0       	ldi	r24, 0x01	; 1
     840:	d8 06       	cpc	r13, r24
     842:	e1 04       	cpc	r14, r1
     844:	f1 04       	cpc	r15, r1
     846:	ec f4       	brge	.+58     	; 0x882 <general_set_timer+0xb2>
	{
<<<<<<< HEAD
		temp = 256 - (int32_t) ( 256.0/500.0 * period_number);
     848:	c7 01       	movw	r24, r14
     84a:	b6 01       	movw	r22, r12
     84c:	0e 94 c0 19 	call	0x3380	; 0x3380 <__floatsisf>
     850:	2f e6       	ldi	r18, 0x6F	; 111
     852:	32 e1       	ldi	r19, 0x12	; 18
     854:	43 e0       	ldi	r20, 0x03	; 3
     856:	5f e3       	ldi	r21, 0x3F	; 63
     858:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <__mulsf3>
     85c:	0e 94 8d 19 	call	0x331a	; 0x331a <__fixsfsi>
=======
		temp = 256 - (int) ( 256.0/500.0 * period_number);
     f78:	be 01       	movw	r22, r28
     f7a:	88 27       	eor	r24, r24
     f7c:	77 fd       	sbrc	r23, 7
     f7e:	80 95       	com	r24
     f80:	98 2f       	mov	r25, r24
     f82:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     f86:	2f e6       	ldi	r18, 0x6F	; 111
     f88:	32 e1       	ldi	r19, 0x12	; 18
     f8a:	43 e0       	ldi	r20, 0x03	; 3
     f8c:	5f e3       	ldi	r21, 0x3F	; 63
     f8e:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     f92:	0e 94 4e 12 	call	0x249c	; 0x249c <__fixsfsi>
>>>>>>> refs/remotes/origin/master
		temp = temp > 255 ? 255 : temp ;
     860:	20 e0       	ldi	r18, 0x00	; 0
     862:	31 e0       	ldi	r19, 0x01	; 1
     864:	c9 01       	movw	r24, r18
     866:	86 1b       	sub	r24, r22
     868:	97 0b       	sbc	r25, r23
     86a:	8f 3f       	cpi	r24, 0xFF	; 255
     86c:	91 05       	cpc	r25, r1
     86e:	19 f0       	breq	.+6      	; 0x876 <general_set_timer+0xa6>
     870:	14 f0       	brlt	.+4      	; 0x876 <general_set_timer+0xa6>
     872:	8f ef       	ldi	r24, 0xFF	; 255
     874:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     876:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22);
     87a:	84 e0       	ldi	r24, 0x04	; 4
     87c:	80 93 b1 00 	sts	0x00B1, r24
     880:	70 c0       	rjmp	.+224    	; 0x962 <general_set_timer+0x192>
	}
	// Resolution
	// 1s/256
	else if ( period_number <= 1000 )
     882:	89 ee       	ldi	r24, 0xE9	; 233
     884:	c8 16       	cp	r12, r24
     886:	83 e0       	ldi	r24, 0x03	; 3
     888:	d8 06       	cpc	r13, r24
     88a:	e1 04       	cpc	r14, r1
     88c:	f1 04       	cpc	r15, r1
     88e:	ec f4       	brge	.+58     	; 0x8ca <general_set_timer+0xfa>
	{
<<<<<<< HEAD
		temp = 256 - (int32_t) ( 256.0/1000.0 * period_number);
     890:	c7 01       	movw	r24, r14
     892:	b6 01       	movw	r22, r12
     894:	0e 94 c0 19 	call	0x3380	; 0x3380 <__floatsisf>
     898:	2f e6       	ldi	r18, 0x6F	; 111
     89a:	32 e1       	ldi	r19, 0x12	; 18
     89c:	43 e8       	ldi	r20, 0x83	; 131
     89e:	5e e3       	ldi	r21, 0x3E	; 62
     8a0:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <__mulsf3>
     8a4:	0e 94 8d 19 	call	0x331a	; 0x331a <__fixsfsi>
=======
		temp = 256 - (int) ( 256.0/1000.0 * period_number);
     fc0:	be 01       	movw	r22, r28
     fc2:	88 27       	eor	r24, r24
     fc4:	77 fd       	sbrc	r23, 7
     fc6:	80 95       	com	r24
     fc8:	98 2f       	mov	r25, r24
     fca:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     fce:	2f e6       	ldi	r18, 0x6F	; 111
     fd0:	32 e1       	ldi	r19, 0x12	; 18
     fd2:	43 e8       	ldi	r20, 0x83	; 131
     fd4:	5e e3       	ldi	r21, 0x3E	; 62
     fd6:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     fda:	0e 94 4e 12 	call	0x249c	; 0x249c <__fixsfsi>
>>>>>>> refs/remotes/origin/master
		temp = temp > 255 ? 255 : temp ;
     8a8:	20 e0       	ldi	r18, 0x00	; 0
     8aa:	31 e0       	ldi	r19, 0x01	; 1
     8ac:	c9 01       	movw	r24, r18
     8ae:	86 1b       	sub	r24, r22
     8b0:	97 0b       	sbc	r25, r23
     8b2:	8f 3f       	cpi	r24, 0xFF	; 255
     8b4:	91 05       	cpc	r25, r1
     8b6:	19 f0       	breq	.+6      	; 0x8be <general_set_timer+0xee>
     8b8:	14 f0       	brlt	.+4      	; 0x8be <general_set_timer+0xee>
     8ba:	8f ef       	ldi	r24, 0xFF	; 255
     8bc:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     8be:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS20);	
     8c2:	85 e0       	ldi	r24, 0x05	; 5
     8c4:	80 93 b1 00 	sts	0x00B1, r24
     8c8:	4c c0       	rjmp	.+152    	; 0x962 <general_set_timer+0x192>
	}
	// Resolution
	// 2s/256
	else if ( period_number <= 2000 )
     8ca:	81 ed       	ldi	r24, 0xD1	; 209
     8cc:	c8 16       	cp	r12, r24
     8ce:	87 e0       	ldi	r24, 0x07	; 7
     8d0:	d8 06       	cpc	r13, r24
     8d2:	e1 04       	cpc	r14, r1
     8d4:	f1 04       	cpc	r15, r1
     8d6:	ec f4       	brge	.+58     	; 0x912 <general_set_timer+0x142>
	{
<<<<<<< HEAD
		temp = 256 - (int32_t) ( 256.0/2000.0 * period_number);
     8d8:	c7 01       	movw	r24, r14
     8da:	b6 01       	movw	r22, r12
     8dc:	0e 94 c0 19 	call	0x3380	; 0x3380 <__floatsisf>
     8e0:	2f e6       	ldi	r18, 0x6F	; 111
     8e2:	32 e1       	ldi	r19, 0x12	; 18
     8e4:	43 e0       	ldi	r20, 0x03	; 3
     8e6:	5e e3       	ldi	r21, 0x3E	; 62
     8e8:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <__mulsf3>
     8ec:	0e 94 8d 19 	call	0x331a	; 0x331a <__fixsfsi>
=======
		temp = 256 - (int) ( 256.0/2000.0 * period_number);
    1008:	be 01       	movw	r22, r28
    100a:	88 27       	eor	r24, r24
    100c:	77 fd       	sbrc	r23, 7
    100e:	80 95       	com	r24
    1010:	98 2f       	mov	r25, r24
    1012:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
    1016:	2f e6       	ldi	r18, 0x6F	; 111
    1018:	32 e1       	ldi	r19, 0x12	; 18
    101a:	43 e0       	ldi	r20, 0x03	; 3
    101c:	5e e3       	ldi	r21, 0x3E	; 62
    101e:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
    1022:	0e 94 4e 12 	call	0x249c	; 0x249c <__fixsfsi>
>>>>>>> refs/remotes/origin/master
		temp = temp > 255 ? 255 : temp ;
     8f0:	20 e0       	ldi	r18, 0x00	; 0
     8f2:	31 e0       	ldi	r19, 0x01	; 1
     8f4:	c9 01       	movw	r24, r18
     8f6:	86 1b       	sub	r24, r22
     8f8:	97 0b       	sbc	r25, r23
     8fa:	8f 3f       	cpi	r24, 0xFF	; 255
     8fc:	91 05       	cpc	r25, r1
     8fe:	19 f0       	breq	.+6      	; 0x906 <general_set_timer+0x136>
     900:	14 f0       	brlt	.+4      	; 0x906 <general_set_timer+0x136>
     902:	8f ef       	ldi	r24, 0xFF	; 255
     904:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     906:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS21);	
     90a:	86 e0       	ldi	r24, 0x06	; 6
     90c:	80 93 b1 00 	sts	0x00B1, r24
     910:	28 c0       	rjmp	.+80     	; 0x962 <general_set_timer+0x192>
	}
	// Resolution
	// 8s/256
	else if ( period_number <= 8000 )
     912:	81 e4       	ldi	r24, 0x41	; 65
     914:	c8 16       	cp	r12, r24
     916:	8f e1       	ldi	r24, 0x1F	; 31
     918:	d8 06       	cpc	r13, r24
     91a:	e1 04       	cpc	r14, r1
     91c:	f1 04       	cpc	r15, r1
     91e:	ec f4       	brge	.+58     	; 0x95a <general_set_timer+0x18a>
	{
<<<<<<< HEAD
		t = (int32_t) ( 256.0/8000.0 * period_number);
     920:	c7 01       	movw	r24, r14
     922:	b6 01       	movw	r22, r12
     924:	0e 94 c0 19 	call	0x3380	; 0x3380 <__floatsisf>
     928:	2f e6       	ldi	r18, 0x6F	; 111
     92a:	32 e1       	ldi	r19, 0x12	; 18
     92c:	43 e0       	ldi	r20, 0x03	; 3
     92e:	5d e3       	ldi	r21, 0x3D	; 61
     930:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <__mulsf3>
     934:	0e 94 8d 19 	call	0x331a	; 0x331a <__fixsfsi>
=======
		t = (int) ( 256.0/8000.0 * period_number);
    1050:	be 01       	movw	r22, r28
    1052:	88 27       	eor	r24, r24
    1054:	77 fd       	sbrc	r23, 7
    1056:	80 95       	com	r24
    1058:	98 2f       	mov	r25, r24
    105a:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
    105e:	2f e6       	ldi	r18, 0x6F	; 111
    1060:	32 e1       	ldi	r19, 0x12	; 18
    1062:	43 e0       	ldi	r20, 0x03	; 3
    1064:	5d e3       	ldi	r21, 0x3D	; 61
    1066:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
    106a:	0e 94 4e 12 	call	0x249c	; 0x249c <__fixsfsi>
>>>>>>> refs/remotes/origin/master
		temp = 256 - t;
		temp = temp > 255 ? 255 : temp ;
     938:	20 e0       	ldi	r18, 0x00	; 0
     93a:	31 e0       	ldi	r19, 0x01	; 1
     93c:	c9 01       	movw	r24, r18
     93e:	86 1b       	sub	r24, r22
     940:	97 0b       	sbc	r25, r23
     942:	8f 3f       	cpi	r24, 0xFF	; 255
     944:	91 05       	cpc	r25, r1
     946:	19 f0       	breq	.+6      	; 0x94e <general_set_timer+0x17e>
     948:	14 f0       	brlt	.+4      	; 0x94e <general_set_timer+0x17e>
     94a:	8f ef       	ldi	r24, 0xFF	; 255
     94c:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     94e:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
     952:	87 e0       	ldi	r24, 0x07	; 7
     954:	80 93 b1 00 	sts	0x00B1, r24
     958:	04 c0       	rjmp	.+8      	; 0x962 <general_set_timer+0x192>
	}
	else
	{
		printf("Timer exceeds max\n");
<<<<<<< HEAD
     95a:	87 e2       	ldi	r24, 0x27	; 39
     95c:	93 e0       	ldi	r25, 0x03	; 3
     95e:	0e 94 27 21 	call	0x424e	; 0x424e <puts>
=======
    1090:	86 ec       	ldi	r24, 0xC6	; 198
    1092:	92 e0       	ldi	r25, 0x02	; 2
    1094:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
>>>>>>> refs/remotes/origin/master
	}

	/* start timer 2 */
	TCCR2A = 0x00;
     962:	10 92 b0 00 	sts	0x00B0, r1
	TimeStamp += period_number;
<<<<<<< HEAD
     966:	80 91 d2 06 	lds	r24, 0x06D2
     96a:	90 91 d3 06 	lds	r25, 0x06D3
     96e:	a0 91 d4 06 	lds	r26, 0x06D4
     972:	b0 91 d5 06 	lds	r27, 0x06D5
     976:	c8 0e       	add	r12, r24
     978:	d9 1e       	adc	r13, r25
     97a:	ea 1e       	adc	r14, r26
     97c:	fb 1e       	adc	r15, r27
     97e:	c0 92 d2 06 	sts	0x06D2, r12
     982:	d0 92 d3 06 	sts	0x06D3, r13
     986:	e0 92 d4 06 	sts	0x06D4, r14
     98a:	f0 92 d5 06 	sts	0x06D5, r15
=======
    109c:	ce 01       	movw	r24, r28
    109e:	aa 27       	eor	r26, r26
    10a0:	97 fd       	sbrc	r25, 7
    10a2:	a0 95       	com	r26
    10a4:	ba 2f       	mov	r27, r26
    10a6:	40 91 80 05 	lds	r20, 0x0580
    10aa:	50 91 81 05 	lds	r21, 0x0581
    10ae:	60 91 82 05 	lds	r22, 0x0582
    10b2:	70 91 83 05 	lds	r23, 0x0583
    10b6:	84 0f       	add	r24, r20
    10b8:	95 1f       	adc	r25, r21
    10ba:	a6 1f       	adc	r26, r22
    10bc:	b7 1f       	adc	r27, r23
    10be:	80 93 80 05 	sts	0x0580, r24
    10c2:	90 93 81 05 	sts	0x0581, r25
    10c6:	a0 93 82 05 	sts	0x0582, r26
    10ca:	b0 93 83 05 	sts	0x0583, r27
>>>>>>> refs/remotes/origin/master
}
     98e:	ff 90       	pop	r15
     990:	ef 90       	pop	r14
     992:	df 90       	pop	r13
     994:	cf 90       	pop	r12
     996:	08 95       	ret

00000998 <init_set_timer>:

void init_set_timer( int32_t period_number )
{
    general_set_timer( period_number );
     998:	1b df       	rcall	.-458    	; 0x7d0 <general_set_timer>
	/* Clear pending interrupts */
	TIFR2  = (1 << TOV2) | (1 << OCF2A) | (1 << OCF2B);
     99a:	87 e0       	ldi	r24, 0x07	; 7
     99c:	87 bb       	out	0x17, r24	; 23
	/* Enable Overflow Interrupt */
	TIMSK2 = 1<<TOIE2;
     99e:	81 e0       	ldi	r24, 0x01	; 1
     9a0:	80 93 70 00 	sts	0x0070, r24
     9a4:	08 95       	ret

000009a6 <set_timer>:

}

void set_timer( int32_t period_number )
{
<<<<<<< HEAD
     9a6:	cf 92       	push	r12
     9a8:	df 92       	push	r13
     9aa:	ef 92       	push	r14
     9ac:	ff 92       	push	r15
     9ae:	6b 01       	movw	r12, r22
     9b0:	7c 01       	movw	r14, r24
	printf("set timer gap = %ld\n\n", period_number);
     9b2:	ff 92       	push	r15
     9b4:	ef 92       	push	r14
     9b6:	df 92       	push	r13
     9b8:	6f 93       	push	r22
     9ba:	89 e3       	ldi	r24, 0x39	; 57
     9bc:	93 e0       	ldi	r25, 0x03	; 3
     9be:	9f 93       	push	r25
     9c0:	8f 93       	push	r24
     9c2:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
=======
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	ec 01       	movw	r28, r24
	printf("set timer gap = %d\n\n", period_number);
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	88 ed       	ldi	r24, 0xD8	; 216
    10f0:	92 e0       	ldi	r25, 0x02	; 2
    10f2:	9f 93       	push	r25
    10f4:	8f 93       	push	r24
    10f6:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
>>>>>>> refs/remotes/origin/master
	if( period_number == 0)
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	0f 90       	pop	r0
     9d2:	c1 14       	cp	r12, r1
     9d4:	d1 04       	cpc	r13, r1
     9d6:	e1 04       	cpc	r14, r1
     9d8:	f1 04       	cpc	r15, r1
     9da:	69 f0       	breq	.+26     	; 0x9f6 <set_timer+0x50>
	{
		/* we won't every set a zero timeout, will we ? */
		return;
	}
    if( timer_usage == 0 )
<<<<<<< HEAD
     9dc:	80 91 d6 06 	lds	r24, 0x06D6
     9e0:	90 91 d7 06 	lds	r25, 0x06D7
     9e4:	89 2b       	or	r24, r25
     9e6:	21 f4       	brne	.+8      	; 0x9f0 <set_timer+0x4a>
=======
    1106:	80 91 84 05 	lds	r24, 0x0584
    110a:	90 91 85 05 	lds	r25, 0x0585
    110e:	89 2b       	or	r24, r25
    1110:	21 f4       	brne	.+8      	; 0x111a <set_timer+0x36>
>>>>>>> refs/remotes/origin/master
    {
        init_set_timer( period_number );
     9e8:	c7 01       	movw	r24, r14
     9ea:	b6 01       	movw	r22, r12
     9ec:	d5 df       	rcall	.-86     	; 0x998 <init_set_timer>
     9ee:	03 c0       	rjmp	.+6      	; 0x9f6 <set_timer+0x50>
    }
    else
    {
        general_set_timer( period_number );
     9f0:	c7 01       	movw	r24, r14
     9f2:	b6 01       	movw	r22, r12
     9f4:	ed de       	rcall	.-550    	; 0x7d0 <general_set_timer>
    }
}	
     9f6:	ff 90       	pop	r15
     9f8:	ef 90       	pop	r14
     9fa:	df 90       	pop	r13
     9fc:	cf 90       	pop	r12
     9fe:	08 95       	ret

00000a00 <PWR_Init>:

/*************************************************************************//**
  @brief Initializes the power management system
*****************************************************************************/
void PWR_Init(void){
	DDRD |= 0b11000000;
     a00:	8a b1       	in	r24, 0x0a	; 10
     a02:	80 6c       	ori	r24, 0xC0	; 192
     a04:	8a b9       	out	0x0a, r24	; 10
     a06:	08 95       	ret

00000a08 <PWR_TurnOn5V>:

/*************************************************************************//**
  @brief Turns on the 5V power supply
*****************************************************************************/
void PWR_TurnOn5V(void){
	PORTD |= 0b10000000;
     a08:	5f 9a       	sbi	0x0b, 7	; 11
     a0a:	08 95       	ret

00000a0c <SPI_SlaveInit>:

unsigned char buffer[16];

void SPI_SlaveInit(void)
{
	DDRB |= (1<<PORTB3); //Set MISO output
     a0c:	23 9a       	sbi	0x04, 3	; 4
	SPCR = (1<<SPE); //Enable SPI
     a0e:	80 e4       	ldi	r24, 0x40	; 64
     a10:	8c bd       	out	0x2c, r24	; 44
     a12:	08 95       	ret

00000a14 <TWI_Init>:
/*************************************************************************//**
  @brief Initializes the 2-wire Serial Interface as a master
  @param[in] freq SCL frequency (Do not exceed 400kHz)
  @return Status (@c 0 on failure, nonzero otherwise)
*****************************************************************************/
char TWI_Init(unsigned long freq){
     a14:	9b 01       	movw	r18, r22
     a16:	ac 01       	movw	r20, r24
	//printf("TWI_Init");
	TWSR=0x00;
     a18:	10 92 b9 00 	sts	0x00B9, r1
	TWBR=(unsigned char)(((F_CPU/freq)-16UL)/8UL); //Compute settings value and set frequency
<<<<<<< HEAD
     a1c:	60 e0       	ldi	r22, 0x00	; 0
     a1e:	74 e2       	ldi	r23, 0x24	; 36
     a20:	84 ef       	ldi	r24, 0xF4	; 244
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <__udivmodsi4>
     a28:	da 01       	movw	r26, r20
     a2a:	c9 01       	movw	r24, r18
     a2c:	40 97       	sbiw	r24, 0x10	; 16
     a2e:	a1 09       	sbc	r26, r1
     a30:	b1 09       	sbc	r27, r1
     a32:	68 94       	set
     a34:	12 f8       	bld	r1, 2
     a36:	b6 95       	lsr	r27
     a38:	a7 95       	ror	r26
     a3a:	97 95       	ror	r25
     a3c:	87 95       	ror	r24
     a3e:	16 94       	lsr	r1
     a40:	d1 f7       	brne	.-12     	; 0xa36 <TWI_Init+0x22>
     a42:	80 93 b8 00 	sts	0x00B8, r24
=======
    1142:	60 e0       	ldi	r22, 0x00	; 0
    1144:	74 e2       	ldi	r23, 0x24	; 36
    1146:	84 ef       	ldi	r24, 0xF4	; 244
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__udivmodsi4>
    114e:	da 01       	movw	r26, r20
    1150:	c9 01       	movw	r24, r18
    1152:	40 97       	sbiw	r24, 0x10	; 16
    1154:	a1 09       	sbc	r26, r1
    1156:	b1 09       	sbc	r27, r1
    1158:	68 94       	set
    115a:	12 f8       	bld	r1, 2
    115c:	b6 95       	lsr	r27
    115e:	a7 95       	ror	r26
    1160:	97 95       	ror	r25
    1162:	87 95       	ror	r24
    1164:	16 94       	lsr	r1
    1166:	d1 f7       	brne	.-12     	; 0x115c <TWI_Init+0x22>
    1168:	80 93 b8 00 	sts	0x00B8, r24
>>>>>>> refs/remotes/origin/master
	TWCR=(1 << TWEN);
     a46:	84 e0       	ldi	r24, 0x04	; 4
     a48:	80 93 bc 00 	sts	0x00BC, r24
	
	//TWAR=0; //Disable slave mode
	
	return 1; //May want to actually check for success here
}
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	08 95       	ret

00000a50 <TWI_WriteByte>:
  @param[in] data byte to send
  @return Status code, TWI_SENT_ACK or TWI_SENT_NACK on success
*****************************************************************************/
char TWI_WriteByte(unsigned char data){
	//printf("TWI_WriteByte");
	TWDR = data; //Stage the data to send
     a50:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
     a54:	84 e8       	ldi	r24, 0x84	; 132
     a56:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);//Send the data
     a5a:	ec eb       	ldi	r30, 0xBC	; 188
     a5c:	f0 e0       	ldi	r31, 0x00	; 0
     a5e:	80 81       	ld	r24, Z
     a60:	88 23       	and	r24, r24
     a62:	ec f7       	brge	.-6      	; 0xa5e <TWI_WriteByte+0xe>
	
	return TWSR&TWSR_MASK;//Return the status code
     a64:	80 91 b9 00 	lds	r24, 0x00B9
}
     a68:	88 7f       	andi	r24, 0xF8	; 248
     a6a:	08 95       	ret

00000a6c <TWI_BeginWrite>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAW_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginWrite(unsigned char address){
	//printf("TWI_BeginWrite");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
     a6c:	94 ee       	ldi	r25, 0xE4	; 228
     a6e:	90 93 bc 00 	sts	0x00BC, r25
	int i=0;
	while ((TWCR & (1<<TWINT)) == 0);
     a72:	ec eb       	ldi	r30, 0xBC	; 188
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	90 81       	ld	r25, Z
     a78:	99 23       	and	r25, r25
     a7a:	ec f7       	brge	.-6      	; 0xa76 <TWI_BeginWrite+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     a7c:	ef e9       	ldi	r30, 0x9F	; 159
     a7e:	ff e0       	ldi	r31, 0x0F	; 15
     a80:	31 97       	sbiw	r30, 0x01	; 1
     a82:	f1 f7       	brne	.-4      	; 0xa80 <TWI_BeginWrite+0x14>
     a84:	00 c0       	rjmp	.+0      	; 0xa86 <TWI_BeginWrite+0x1a>
     a86:	00 00       	nop
	_delay_ms(1);
	char stat = (TWSR & TWSR_MASK);
     a88:	90 91 b9 00 	lds	r25, 0x00B9
     a8c:	98 7f       	andi	r25, 0xF8	; 248
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
     a8e:	98 30       	cpi	r25, 0x08	; 8
     a90:	31 f0       	breq	.+12     	; 0xa9e <TWI_BeginWrite+0x32>
     a92:	90 31       	cpi	r25, 0x10	; 16
     a94:	21 f0       	breq	.+8      	; 0xa9e <TWI_BeginWrite+0x32>
     a96:	80 91 b9 00 	lds	r24, 0x00B9
     a9a:	88 7f       	andi	r24, 0xF8	; 248
     a9c:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) & SLAW_MASK); //reset bit 0 to send a write bit, send
     a9e:	88 0f       	add	r24, r24
     aa0:	d7 cf       	rjmp	.-82     	; 0xa50 <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	return stat;//Return the status code
}
     aa2:	08 95       	ret

00000aa4 <TWI_BeginRead>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAR_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginRead(unsigned char address){
	//printf("TWI_BeginRead");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
     aa4:	94 ee       	ldi	r25, 0xE4	; 228
     aa6:	90 93 bc 00 	sts	0x00BC, r25
	while ((TWCR & (1<<TWINT)) == 0);
     aaa:	ec eb       	ldi	r30, 0xBC	; 188
     aac:	f0 e0       	ldi	r31, 0x00	; 0
     aae:	90 81       	ld	r25, Z
     ab0:	99 23       	and	r25, r25
     ab2:	ec f7       	brge	.-6      	; 0xaae <TWI_BeginRead+0xa>
	
	char stat = (TWSR & TWSR_MASK);
     ab4:	90 91 b9 00 	lds	r25, 0x00B9
     ab8:	98 7f       	andi	r25, 0xF8	; 248
	//printf("0x%1x",(unsigned)stat);
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
     aba:	98 30       	cpi	r25, 0x08	; 8
     abc:	31 f0       	breq	.+12     	; 0xaca <TWI_BeginRead+0x26>
     abe:	90 31       	cpi	r25, 0x10	; 16
     ac0:	21 f0       	breq	.+8      	; 0xaca <TWI_BeginRead+0x26>
     ac2:	80 91 b9 00 	lds	r24, 0x00B9
     ac6:	88 7f       	andi	r24, 0xF8	; 248
     ac8:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) | SLAR_MASK); //set bit 0 to send a read bit and send it
     aca:	88 0f       	add	r24, r24
     acc:	81 60       	ori	r24, 0x01	; 1
     ace:	c0 cf       	rjmp	.-128    	; 0xa50 <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	
	return stat;//Return the status code
}
     ad0:	08 95       	ret

00000ad2 <TWI_ReadAck>:
/*************************************************************************//**
  @brief Receives a byte over TWI and returns an ACK
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_ACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadAck(unsigned char *data){
     ad2:	dc 01       	movw	r26, r24
	//printf("TWI_ReadAck");
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Start receiving, ending with an ACK
     ad4:	84 ec       	ldi	r24, 0xC4	; 196
     ad6:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);
     ada:	ec eb       	ldi	r30, 0xBC	; 188
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	90 81       	ld	r25, Z
     ae0:	99 23       	and	r25, r25
     ae2:	ec f7       	brge	.-6      	; 0xade <TWI_ReadAck+0xc>
	*data=TWDR; //Store the data
     ae4:	80 91 bb 00 	lds	r24, 0x00BB
     ae8:	8c 93       	st	X, r24
	
	return TWSR&TWSR_MASK;//Return the status code
     aea:	80 91 b9 00 	lds	r24, 0x00B9
}
     aee:	88 7f       	andi	r24, 0xF8	; 248
     af0:	08 95       	ret

00000af2 <TWI_ReadNack>:
/*************************************************************************//**
  @brief Receives a byte over TWI and returns a NACK
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_NACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadNack(unsigned char *data){
     af2:	dc 01       	movw	r26, r24
	//printf("TWI_ReadNack");
	TWCR = (1<<TWINT)|(1<<TWEN); //Start receiving, ending with a NACK
     af4:	84 e8       	ldi	r24, 0x84	; 132
     af6:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);
     afa:	ec eb       	ldi	r30, 0xBC	; 188
     afc:	f0 e0       	ldi	r31, 0x00	; 0
     afe:	90 81       	ld	r25, Z
     b00:	99 23       	and	r25, r25
     b02:	ec f7       	brge	.-6      	; 0xafe <TWI_ReadNack+0xc>
	*data=TWDR; //Store the data
     b04:	80 91 bb 00 	lds	r24, 0x00BB
     b08:	8c 93       	st	X, r24
	
	return TWSR&TWSR_MASK;//Return the status code
     b0a:	80 91 b9 00 	lds	r24, 0x00B9
}
     b0e:	88 7f       	andi	r24, 0xF8	; 248
     b10:	08 95       	ret

00000b12 <TWI_Stop>:
  @brief Sends a Stop bit, be sure to send a Start bit before future interactions on the bus
  @return Status code, should always be nonzero
*****************************************************************************/
char TWI_Stop(void){
	//printf("TWI_Stop");
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     b12:	84 e9       	ldi	r24, 0x94	; 148
     b14:	80 93 bc 00 	sts	0x00BC, r24
	return 1;
}
     b18:	81 e0       	ldi	r24, 0x01	; 1
     b1a:	08 95       	ret

00000b1c <TWI_Read>:
  @param[in] amount Number of bytes to recieve
  @param[in] whether or not to send an ACK on the last byte, sends NACK if false
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
     b1c:	9f 92       	push	r9
     b1e:	af 92       	push	r10
     b20:	bf 92       	push	r11
     b22:	cf 92       	push	r12
     b24:	df 92       	push	r13
     b26:	ef 92       	push	r14
     b28:	ff 92       	push	r15
     b2a:	0f 93       	push	r16
     b2c:	1f 93       	push	r17
     b2e:	cf 93       	push	r28
     b30:	df 93       	push	r29
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
     b32:	16 16       	cp	r1, r22
     b34:	17 06       	cpc	r1, r23
     b36:	fc f4       	brge	.+62     	; 0xb76 <TWI_Read+0x5a>
     b38:	94 2e       	mov	r9, r20
     b3a:	8b 01       	movw	r16, r22
     b3c:	7c 01       	movw	r14, r24
     b3e:	c0 e0       	ldi	r28, 0x00	; 0
     b40:	d0 e0       	ldi	r29, 0x00	; 0
		if((ack==false) && ((amount-1)==i)){
     b42:	6b 01       	movw	r12, r22
     b44:	81 e0       	ldi	r24, 0x01	; 1
     b46:	c8 1a       	sub	r12, r24
     b48:	d1 08       	sbc	r13, r1
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
     b4a:	57 01       	movw	r10, r14
     b4c:	ac 0c       	add	r10, r12
     b4e:	bd 1c       	adc	r11, r13
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
		if((ack==false) && ((amount-1)==i)){
     b50:	91 10       	cpse	r9, r1
     b52:	06 c0       	rjmp	.+12     	; 0xb60 <TWI_Read+0x44>
     b54:	cc 16       	cp	r12, r28
     b56:	dd 06       	cpc	r13, r29
     b58:	19 f4       	brne	.+6      	; 0xb60 <TWI_Read+0x44>
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
     b5a:	c5 01       	movw	r24, r10
     b5c:	ca df       	rcall	.-108    	; 0xaf2 <TWI_ReadNack>
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <TWI_Read+0x4c>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}else{
			status=TWI_ReadAck(&data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
     b60:	c7 01       	movw	r24, r14
     b62:	8c 0f       	add	r24, r28
     b64:	9d 1f       	adc	r25, r29
     b66:	b5 df       	rcall	.-150    	; 0xad2 <TWI_ReadAck>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}
		//printf("A");
		if(status!=TWI_REC_ACK)return status; //If NACK was selected, returning here is fine since the loop is already ending
     b68:	80 35       	cpi	r24, 0x50	; 80
     b6a:	31 f4       	brne	.+12     	; 0xb78 <TWI_Read+0x5c>
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
     b6c:	21 96       	adiw	r28, 0x01	; 1
     b6e:	c0 17       	cp	r28, r16
     b70:	d1 07       	cpc	r29, r17
     b72:	71 f7       	brne	.-36     	; 0xb50 <TWI_Read+0x34>
     b74:	01 c0       	rjmp	.+2      	; 0xb78 <TWI_Read+0x5c>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
     b76:	80 e0       	ldi	r24, 0x00	; 0
		//will return if something goes wrong partway through
		//printf("B");
	}
	//printf("0x%1x",(unsigned)status);
	return status;
}
     b78:	df 91       	pop	r29
     b7a:	cf 91       	pop	r28
     b7c:	1f 91       	pop	r17
     b7e:	0f 91       	pop	r16
     b80:	ff 90       	pop	r15
     b82:	ef 90       	pop	r14
     b84:	df 90       	pop	r13
     b86:	cf 90       	pop	r12
     b88:	bf 90       	pop	r11
     b8a:	af 90       	pop	r10
     b8c:	9f 90       	pop	r9
     b8e:	08 95       	ret

00000b90 <TWI_Write>:
  @param[in] *data Pointer to an array of bytes to send
  @param[in] amount Number of bytes to send
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
     b98:	16 16       	cp	r1, r22
     b9a:	17 06       	cpc	r1, r23
     b9c:	64 f4       	brge	.+24     	; 0xbb6 <TWI_Write+0x26>
     b9e:	8c 01       	movw	r16, r24
     ba0:	ec 01       	movw	r28, r24
     ba2:	06 0f       	add	r16, r22
     ba4:	17 1f       	adc	r17, r23
		status=TWI_WriteByte(data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
     ba6:	89 91       	ld	r24, Y+
     ba8:	53 df       	rcall	.-346    	; 0xa50 <TWI_WriteByte>
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
     baa:	88 32       	cpi	r24, 0x28	; 40
     bac:	29 f4       	brne	.+10     	; 0xbb8 <TWI_Write+0x28>
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
     bae:	c0 17       	cp	r28, r16
     bb0:	d1 07       	cpc	r29, r17
     bb2:	c9 f7       	brne	.-14     	; 0xba6 <TWI_Write+0x16>
     bb4:	01 c0       	rjmp	.+2      	; 0xbb8 <TWI_Write+0x28>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
     bb6:	80 e0       	ldi	r24, 0x00	; 0
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
		//will return if something goes wrong partway through
	}
	return status;
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	1f 91       	pop	r17
     bbe:	0f 91       	pop	r16
     bc0:	08 95       	ret

00000bc2 <USART0_Init>:
  @brief Initializes USART0 in asynchronous UART mode, 8 bit data, 1 stop bit
  @param[in] desired baud rate (configuration values computed using F_CPU)
*****************************************************************************/
void USART0_Init(unsigned long baud){
	
	stdout = &USART0_stdout; //make stdout print to USART0
<<<<<<< HEAD
     bc2:	28 e5       	ldi	r18, 0x58	; 88
     bc4:	32 e0       	ldi	r19, 0x02	; 2
     bc6:	30 93 78 0c 	sts	0x0C78, r19
     bca:	20 93 77 0c 	sts	0x0C77, r18
	
	//Compute UBRR for baudrate setting
	unsigned short ubrr=(unsigned short)((F_CPU/(baud*16UL))-1);
     bce:	dc 01       	movw	r26, r24
     bd0:	cb 01       	movw	r24, r22
     bd2:	88 0f       	add	r24, r24
     bd4:	99 1f       	adc	r25, r25
     bd6:	aa 1f       	adc	r26, r26
     bd8:	bb 1f       	adc	r27, r27
     bda:	88 0f       	add	r24, r24
     bdc:	99 1f       	adc	r25, r25
     bde:	aa 1f       	adc	r26, r26
     be0:	bb 1f       	adc	r27, r27
     be2:	9c 01       	movw	r18, r24
     be4:	ad 01       	movw	r20, r26
     be6:	22 0f       	add	r18, r18
     be8:	33 1f       	adc	r19, r19
     bea:	44 1f       	adc	r20, r20
     bec:	55 1f       	adc	r21, r21
     bee:	22 0f       	add	r18, r18
     bf0:	33 1f       	adc	r19, r19
     bf2:	44 1f       	adc	r20, r20
     bf4:	55 1f       	adc	r21, r21
     bf6:	60 e0       	ldi	r22, 0x00	; 0
     bf8:	74 e2       	ldi	r23, 0x24	; 36
     bfa:	84 ef       	ldi	r24, 0xF4	; 244
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 94 5f 1e 	call	0x3cbe	; 0x3cbe <__udivmodsi4>
     c02:	21 50       	subi	r18, 0x01	; 1
     c04:	31 09       	sbc	r19, r1
=======
    12f2:	26 e0       	ldi	r18, 0x06	; 6
    12f4:	32 e0       	ldi	r19, 0x02	; 2
    12f6:	30 93 25 0a 	sts	0x0A25, r19
    12fa:	20 93 24 0a 	sts	0x0A24, r18
	
	//Compute UBRR for baudrate setting
	unsigned short ubrr=(unsigned short)((F_CPU/(baud*16UL))-1);
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	aa 1f       	adc	r26, r26
    1308:	bb 1f       	adc	r27, r27
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	aa 1f       	adc	r26, r26
    1310:	bb 1f       	adc	r27, r27
    1312:	9c 01       	movw	r18, r24
    1314:	ad 01       	movw	r20, r26
    1316:	22 0f       	add	r18, r18
    1318:	33 1f       	adc	r19, r19
    131a:	44 1f       	adc	r20, r20
    131c:	55 1f       	adc	r21, r21
    131e:	22 0f       	add	r18, r18
    1320:	33 1f       	adc	r19, r19
    1322:	44 1f       	adc	r20, r20
    1324:	55 1f       	adc	r21, r21
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	74 e2       	ldi	r23, 0x24	; 36
    132a:	84 ef       	ldi	r24, 0xF4	; 244
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__udivmodsi4>
    1332:	21 50       	subi	r18, 0x01	; 1
    1334:	31 09       	sbc	r19, r1
>>>>>>> refs/remotes/origin/master
	
	//Set BAUD rate.
	UBRR0H = (unsigned char) (ubrr >> 8);
     c06:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) ubrr;
     c0a:	20 93 c4 00 	sts	0x00C4, r18
	/*Set frame format. 8 data bit(settings bits UCSZ00 and UCSZ01  UCSR0B), 1 stop bit(by default and need not to be worried about). 
	The UCSZ01:0 bits combined with the UCSZ02 bit in UCSR0B sets the number of data
	bits (Character Size) in the frame that the Receiver and Transmitter use. 
	If a change on frame format is needed, make sure to modify UCSR0B register above accordingly.
	See datasheet pg. 390.*/
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
     c0e:	86 e0       	ldi	r24, 0x06	; 6
     c10:	80 93 c2 00 	sts	0x00C2, r24
	
	//Enable receiver and transmitter. Enable the USART Receive Complete interrupt(RXCIE).
	//UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0));
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);//Enable RX/TX, no interrupts
     c14:	88 e1       	ldi	r24, 0x18	; 24
     c16:	80 93 c1 00 	sts	0x00C1, r24
     c1a:	08 95       	ret

00000c1c <USART0_Transmit>:
Function contains busy loops for simplicity in debugging. Not production code.
  @brief Transmits a byte via USART0
  @param[in] data byte to be transmitted
*****************************************************************************/
void USART0_Transmit(unsigned char data){
	while(!(UCSR0A & (1 << UDRE0))); //Wait for the empty transmit buffer. (Waiting UDR0 to be empty.)
     c1c:	e0 ec       	ldi	r30, 0xC0	; 192
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	90 81       	ld	r25, Z
     c22:	95 ff       	sbrs	r25, 5
     c24:	fd cf       	rjmp	.-6      	; 0xc20 <USART0_Transmit+0x4>
		UDR0 = data;			//store the data in the USART Data Register
     c26:	80 93 c6 00 	sts	0x00C6, r24
     c2a:	08 95       	ret

00000c2c <USART0_putchar_printf>:
  @brief Called when stdout is being printed to USART0 (this is set up at runtime)
  @param[in] var byte to transmit
  @param[in/out] *stream Pointer to a stdio.h FILE io stream
  @return Status
*****************************************************************************/
int USART0_putchar_printf(char var, FILE *stream) {
     c2c:	cf 93       	push	r28
     c2e:	c8 2f       	mov	r28, r24
	if (var == '\n') USART0_Transmit('\r');
     c30:	8a 30       	cpi	r24, 0x0A	; 10
     c32:	11 f4       	brne	.+4      	; 0xc38 <USART0_putchar_printf+0xc>
     c34:	8d e0       	ldi	r24, 0x0D	; 13
     c36:	f2 df       	rcall	.-28     	; 0xc1c <USART0_Transmit>
	USART0_Transmit(var);
     c38:	8c 2f       	mov	r24, r28
     c3a:	f0 df       	rcall	.-32     	; 0xc1c <USART0_Transmit>
	return 0;
}
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	90 e0       	ldi	r25, 0x00	; 0
     c40:	cf 91       	pop	r28
     c42:	08 95       	ret

00000c44 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     c44:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     c46:	0f b6       	in	r0, 0x3f	; 63
     c48:	f8 94       	cli
     c4a:	a8 95       	wdr
     c4c:	80 91 60 00 	lds	r24, 0x0060
     c50:	88 61       	ori	r24, 0x18	; 24
     c52:	80 93 60 00 	sts	0x0060, r24
     c56:	10 92 60 00 	sts	0x0060, r1
     c5a:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
     c5c:	e1 e6       	ldi	r30, 0x61	; 97
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	80 e8       	ldi	r24, 0x80	; 128
     c62:	80 83       	st	Z, r24
  CLKPR = 0;
     c64:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     c66:	78 94       	sei

  HAL_TimerInit();
     c68:	01 c0       	rjmp	.+2      	; 0xc6c <HAL_TimerInit>
     c6a:	08 95       	ret

00000c6c <HAL_TimerInit>:

<<<<<<< HEAD
  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
=======
/*************************************************************************//**
*****************************************************************************/
void HAL_TimerInit(void)
{
  halTimerIrqCount = 0;
    139c:	10 92 f5 09 	sts	0x09F5, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
    13a0:	80 e2       	ldi	r24, 0x20	; 32
    13a2:	9e e4       	ldi	r25, 0x4E	; 78
    13a4:	90 93 a9 00 	sts	0x00A9, r25
    13a8:	80 93 a8 00 	sts	0x00A8, r24
  TCCR4B = (1 << WGM12);              // CTC mode
    13ac:	e1 ea       	ldi	r30, 0xA1	; 161
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	88 e0       	ldi	r24, 0x08	; 8
    13b2:	80 83       	st	Z, r24
  TCCR4B |= (1 << CS11);              // Prescaler 8
    13b4:	80 81       	ld	r24, Z
    13b6:	82 60       	ori	r24, 0x02	; 2
    13b8:	80 83       	st	Z, r24
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
    13ba:	e2 e7       	ldi	r30, 0x72	; 114
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	82 60       	ori	r24, 0x02	; 2
    13c2:	80 83       	st	Z, r24
    13c4:	08 95       	ret

000013c6 <__vector_42>:
>>>>>>> refs/remotes/origin/master
}
     c6c:	10 92 48 0c 	sts	0x0C48, r1
     c70:	80 e2       	ldi	r24, 0x20	; 32
     c72:	9e e4       	ldi	r25, 0x4E	; 78
     c74:	90 93 a9 00 	sts	0x00A9, r25
     c78:	80 93 a8 00 	sts	0x00A8, r24
     c7c:	e1 ea       	ldi	r30, 0xA1	; 161
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	88 e0       	ldi	r24, 0x08	; 8
     c82:	80 83       	st	Z, r24
     c84:	80 81       	ld	r24, Z
     c86:	82 60       	ori	r24, 0x02	; 2
     c88:	80 83       	st	Z, r24
     c8a:	e2 e7       	ldi	r30, 0x72	; 114
     c8c:	f0 e0       	ldi	r31, 0x00	; 0
     c8e:	80 81       	ld	r24, Z
     c90:	82 60       	ori	r24, 0x02	; 2
     c92:	80 83       	st	Z, r24
     c94:	08 95       	ret

00000c96 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     c96:	1f 92       	push	r1
     c98:	0f 92       	push	r0
     c9a:	0f b6       	in	r0, 0x3f	; 63
     c9c:	0f 92       	push	r0
     c9e:	11 24       	eor	r1, r1
     ca0:	8f 93       	push	r24
  halTimerIrqCount++;
<<<<<<< HEAD
     ca2:	80 91 48 0c 	lds	r24, 0x0C48
     ca6:	8f 5f       	subi	r24, 0xFF	; 255
     ca8:	80 93 48 0c 	sts	0x0C48, r24
=======
    13d2:	80 91 f5 09 	lds	r24, 0x09F5
    13d6:	8f 5f       	subi	r24, 0xFF	; 255
    13d8:	80 93 f5 09 	sts	0x09F5, r24
>>>>>>> refs/remotes/origin/master
}
     cac:	8f 91       	pop	r24
     cae:	0f 90       	pop	r0
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	0f 90       	pop	r0
     cb4:	1f 90       	pop	r1
     cb6:	18 95       	reti

00000cb8 <NWK_Init>:
  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
<<<<<<< HEAD
  nwkIb.panId = panId;
  PHY_SetPanId(panId);
     cb8:	e9 e4       	ldi	r30, 0x49	; 73
     cba:	fc e0       	ldi	r31, 0x0C	; 12
     cbc:	14 82       	std	Z+4, r1	; 0x04
     cbe:	15 82       	std	Z+5, r1	; 0x05
     cc0:	11 82       	std	Z+1, r1	; 0x01
     cc2:	10 82       	st	Z, r1
     cc4:	17 a2       	std	Z+39, r1	; 0x27
     cc6:	16 a2       	std	Z+38, r1	; 0x26
     cc8:	ef e4       	ldi	r30, 0x4F	; 79
     cca:	fc e0       	ldi	r31, 0x0C	; 12
     ccc:	8f e6       	ldi	r24, 0x6F	; 111
     cce:	9c e0       	ldi	r25, 0x0C	; 12
     cd0:	11 92       	st	Z+, r1
     cd2:	11 92       	st	Z+, r1
     cd4:	e8 17       	cp	r30, r24
     cd6:	f9 07       	cpc	r31, r25
     cd8:	d9 f7       	brne	.-10     	; 0xcd0 <NWK_Init+0x18>
     cda:	e3 d0       	rcall	.+454    	; 0xea2 <nwkTxInit>
     cdc:	67 d0       	rcall	.+206    	; 0xdac <nwkRxInit>
     cde:	10 d0       	rcall	.+32     	; 0xd00 <nwkFrameInit>
     ce0:	0a c0       	rjmp	.+20     	; 0xcf6 <nwkDataReqInit>
     ce2:	08 95       	ret

00000ce4 <NWK_OpenEndpoint>:
=======
  nwkIb.nwkSeqNum = 0;
    13e8:	10 92 fa 09 	sts	0x09FA, r1
  nwkIb.macSeqNum = 0;
    13ec:	10 92 fb 09 	sts	0x09FB, r1
  nwkIb.addr = 0;
    13f0:	10 92 f7 09 	sts	0x09F7, r1
    13f4:	10 92 f6 09 	sts	0x09F6, r1
  nwkIb.lock = 0;
    13f8:	10 92 1d 0a 	sts	0x0A1D, r1
    13fc:	10 92 1c 0a 	sts	0x0A1C, r1
    1400:	ec ef       	ldi	r30, 0xFC	; 252
    1402:	f9 e0       	ldi	r31, 0x09	; 9
    1404:	8c e1       	ldi	r24, 0x1C	; 28
    1406:	9a e0       	ldi	r25, 0x0A	; 10

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
    nwkIb.endpoint[i] = NULL;
    1408:	11 92       	st	Z+, r1
    140a:	11 92       	st	Z+, r1
  nwkIb.nwkSeqNum = 0;
  nwkIb.macSeqNum = 0;
  nwkIb.addr = 0;
  nwkIb.lock = 0;

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
    140c:	e8 17       	cp	r30, r24
    140e:	f9 07       	cpc	r31, r25
    1410:	d9 f7       	brne	.-10     	; 0x1408 <NWK_Init+0x20>
    nwkIb.endpoint[i] = NULL;

  nwkTxInit();
    1412:	0e 94 05 0b 	call	0x160a	; 0x160a <nwkTxInit>
  nwkRxInit();
    1416:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <nwkRxInit>
  nwkFrameInit();
    141a:	0e 94 20 0a 	call	0x1440	; 0x1440 <nwkFrameInit>
  nwkDataReqInit();
    141e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <nwkDataReqInit>
    1422:	08 95       	ret

00001424 <NWK_OpenEndpoint>:
>>>>>>> refs/remotes/origin/master
  @param[in] id Endpoint index (1-15)
  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
  nwkIb.endpoint[id] = handler;
<<<<<<< HEAD
     ce4:	e8 2f       	mov	r30, r24
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	ee 0f       	add	r30, r30
     cea:	ff 1f       	adc	r31, r31
     cec:	e1 5b       	subi	r30, 0xB1	; 177
     cee:	f3 4f       	sbci	r31, 0xF3	; 243
     cf0:	71 83       	std	Z+1, r23	; 0x01
     cf2:	60 83       	st	Z, r22
     cf4:	08 95       	ret

00000cf6 <nwkDataReqInit>:
=======
    1424:	e8 2f       	mov	r30, r24
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	ee 0f       	add	r30, r30
    142a:	ff 1f       	adc	r31, r31
    142c:	e4 50       	subi	r30, 0x04	; 4
    142e:	f6 4f       	sbci	r31, 0xF6	; 246
    1430:	71 83       	std	Z+1, r23	; 0x01
    1432:	60 83       	st	Z, r22
    1434:	08 95       	ret

00001436 <nwkDataReqInit>:
>>>>>>> refs/remotes/origin/master
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
<<<<<<< HEAD
     cf6:	10 92 d9 06 	sts	0x06D9, r1
     cfa:	10 92 d8 06 	sts	0x06D8, r1
     cfe:	08 95       	ret
=======
    1436:	10 92 87 05 	sts	0x0587, r1
    143a:	10 92 86 05 	sts	0x0586, r1
    143e:	08 95       	ret
>>>>>>> refs/remotes/origin/master

00000d00 <nwkFrameInit>:
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
<<<<<<< HEAD
  frame->state = NWK_FRAME_STATE_FREE;
  nwkIb.lock--;
     d00:	10 92 da 06 	sts	0x06DA, r1
     d04:	10 92 63 07 	sts	0x0763, r1
     d08:	10 92 ec 07 	sts	0x07EC, r1
     d0c:	10 92 75 08 	sts	0x0875, r1
     d10:	10 92 fe 08 	sts	0x08FE, r1
     d14:	08 95       	ret

00000d16 <nwkFrameNext>:
=======
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    1440:	10 92 88 05 	sts	0x0588, r1
    1444:	10 92 11 06 	sts	0x0611, r1
    1448:	10 92 9a 06 	sts	0x069A, r1
    144c:	10 92 23 07 	sts	0x0723, r1
    1450:	10 92 ac 07 	sts	0x07AC, r1
    1454:	08 95       	ret

00001456 <nwkFrameNext>:
>>>>>>> refs/remotes/origin/master
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     d16:	00 97       	sbiw	r24, 0x00	; 0
     d18:	41 f0       	breq	.+16     	; 0xd2a <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     d1a:	fc 01       	movw	r30, r24
     d1c:	e7 57       	subi	r30, 0x77	; 119
     d1e:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
<<<<<<< HEAD
     d20:	89 e0       	ldi	r24, 0x09	; 9
     d22:	e7 38       	cpi	r30, 0x87	; 135
     d24:	f8 07       	cpc	r31, r24
     d26:	18 f0       	brcs	.+6      	; 0xd2e <nwkFrameNext+0x18>
     d28:	15 c0       	rjmp	.+42     	; 0xd54 <nwkFrameNext+0x3e>
=======
    1460:	88 e0       	ldi	r24, 0x08	; 8
    1462:	e5 33       	cpi	r30, 0x35	; 53
    1464:	f8 07       	cpc	r31, r24
    1466:	18 f0       	brcs	.+6      	; 0x146e <nwkFrameNext+0x18>
    1468:	12 c0       	rjmp	.+36     	; 0x148e <nwkFrameNext+0x38>
>>>>>>> refs/remotes/origin/master
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
<<<<<<< HEAD
     d2a:	ea ed       	ldi	r30, 0xDA	; 218
     d2c:	f6 e0       	ldi	r31, 0x06	; 6
=======
    146a:	e8 e8       	ldi	r30, 0x88	; 136
    146c:	f5 e0       	ldi	r31, 0x05	; 5
>>>>>>> refs/remotes/origin/master
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     d2e:	80 81       	ld	r24, Z
     d30:	88 23       	and	r24, r24
     d32:	39 f0       	breq	.+14     	; 0xd42 <nwkFrameNext+0x2c>
     d34:	03 c0       	rjmp	.+6      	; 0xd3c <nwkFrameNext+0x26>
     d36:	80 81       	ld	r24, Z
     d38:	88 23       	and	r24, r24
     d3a:	19 f0       	breq	.+6      	; 0xd42 <nwkFrameNext+0x2c>
      return frame;
     d3c:	8e 2f       	mov	r24, r30
     d3e:	9f 2f       	mov	r25, r31
     d40:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
<<<<<<< HEAD
     d42:	e7 57       	subi	r30, 0x77	; 119
     d44:	ff 4f       	sbci	r31, 0xFF	; 255
     d46:	89 e0       	ldi	r24, 0x09	; 9
     d48:	e7 38       	cpi	r30, 0x87	; 135
     d4a:	f8 07       	cpc	r31, r24
     d4c:	a0 f3       	brcs	.-24     	; 0xd36 <nwkFrameNext+0x20>
=======
    147c:	e7 57       	subi	r30, 0x77	; 119
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	88 e0       	ldi	r24, 0x08	; 8
    1482:	e5 33       	cpi	r30, 0x35	; 53
    1484:	f8 07       	cpc	r31, r24
    1486:	b8 f3       	brcs	.-18     	; 0x1476 <nwkFrameNext+0x20>
>>>>>>> refs/remotes/origin/master
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	08 95       	ret
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	90 e0       	ldi	r25, 0x00	; 0
}
     d58:	08 95       	ret

00000d5a <nwkRxServiceDataInd>:
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
     d5a:	dc 01       	movw	r26, r24
     d5c:	19 96       	adiw	r26, 0x09	; 9
     d5e:	2c 91       	ld	r18, X
     d60:	19 97       	sbiw	r26, 0x09	; 9
     d62:	22 23       	and	r18, r18
     d64:	49 f0       	breq	.+18     	; 0xd78 <nwkRxServiceDataInd+0x1e>
    return false;

  switch (ind->data[0])
     d66:	17 96       	adiw	r26, 0x07	; 7
     d68:	ed 91       	ld	r30, X+
     d6a:	fc 91       	ld	r31, X
     d6c:	18 97       	sbiw	r26, 0x08	; 8
     d6e:	20 81       	ld	r18, Z
     d70:	21 11       	cpse	r18, r1
     d72:	04 c0       	rjmp	.+8      	; 0xd7c <nwkRxServiceDataInd+0x22>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
     d74:	b9 c0       	rjmp	.+370    	; 0xee8 <nwkTxAckReceived>
     d76:	08 95       	ret
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    return false;
     d78:	80 e0       	ldi	r24, 0x00	; 0
     d7a:	08 95       	ret
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
     d7c:	80 e0       	ldi	r24, 0x00	; 0
  }
}
     d7e:	08 95       	ret

00000d80 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
<<<<<<< HEAD
     d80:	bc 01       	movw	r22, r24
     d82:	e8 e9       	ldi	r30, 0x98	; 152
     d84:	f9 e0       	ldi	r31, 0x09	; 9
     d86:	2a ec       	ldi	r18, 0xCA	; 202
     d88:	39 e0       	ldi	r19, 0x09	; 9
=======
    14c8:	e6 e4       	ldi	r30, 0x46	; 70
    14ca:	f8 e0       	ldi	r31, 0x08	; 8
    14cc:	28 e7       	ldi	r18, 0x78	; 120
    14ce:	38 e0       	ldi	r19, 0x08	; 8
>>>>>>> refs/remotes/origin/master
  bool restart = false;
     d8a:	40 e0       	ldi	r20, 0x00	; 0
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
     d8c:	51 e0       	ldi	r21, 0x01	; 1
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
     d8e:	90 81       	ld	r25, Z
     d90:	99 23       	and	r25, r25
     d92:	19 f0       	breq	.+6      	; 0xd9a <nwkRxDuplicateRejectionTimerHandler+0x1a>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
     d94:	91 50       	subi	r25, 0x01	; 1
     d96:	90 83       	st	Z, r25
      restart = true;
     d98:	45 2f       	mov	r20, r21
     d9a:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     d9c:	e2 17       	cp	r30, r18
     d9e:	f3 07       	cpc	r31, r19
     da0:	b1 f7       	brne	.-20     	; 0xd8e <nwkRxDuplicateRejectionTimerHandler+0xe>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
     da2:	44 23       	and	r20, r20
     da4:	11 f0       	breq	.+4      	; 0xdaa <nwkRxDuplicateRejectionTimerHandler+0x2a>
     da6:	cb 01       	movw	r24, r22
    SYS_TimerStart(timer);
<<<<<<< HEAD
     da8:	2f c4       	rjmp	.+2142   	; 0x1608 <SYS_TimerStart>
     daa:	08 95       	ret
=======
    14ea:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <SYS_TimerStart>
    14ee:	08 95       	ret
>>>>>>> refs/remotes/origin/master

00000dac <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
<<<<<<< HEAD
     dac:	e8 e9       	ldi	r30, 0x98	; 152
     dae:	f9 e0       	ldi	r31, 0x09	; 9
     db0:	8a ec       	ldi	r24, 0xCA	; 202
     db2:	99 e0       	ldi	r25, 0x09	; 9
=======
    14f0:	e6 e4       	ldi	r30, 0x46	; 70
    14f2:	f8 e0       	ldi	r31, 0x08	; 8
    14f4:	88 e7       	ldi	r24, 0x78	; 120
    14f6:	98 e0       	ldi	r25, 0x08	; 8
>>>>>>> refs/remotes/origin/master
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
     db4:	10 82       	st	Z, r1
     db6:	35 96       	adiw	r30, 0x05	; 5
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     db8:	e8 17       	cp	r30, r24
     dba:	f9 07       	cpc	r31, r25
     dbc:	d9 f7       	brne	.-10     	; 0xdb4 <nwkRxInit+0x8>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
<<<<<<< HEAD
     dbe:	e7 e8       	ldi	r30, 0x87	; 135
     dc0:	f9 e0       	ldi	r31, 0x09	; 9
     dc2:	84 e6       	ldi	r24, 0x64	; 100
     dc4:	90 e0       	ldi	r25, 0x00	; 0
     dc6:	a0 e0       	ldi	r26, 0x00	; 0
     dc8:	b0 e0       	ldi	r27, 0x00	; 0
     dca:	86 83       	std	Z+6, r24	; 0x06
     dcc:	97 83       	std	Z+7, r25	; 0x07
     dce:	a0 87       	std	Z+8, r26	; 0x08
     dd0:	b1 87       	std	Z+9, r27	; 0x09
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
     dd2:	12 86       	std	Z+10, r1	; 0x0a
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
     dd4:	80 ec       	ldi	r24, 0xC0	; 192
     dd6:	96 e0       	ldi	r25, 0x06	; 6
     dd8:	94 87       	std	Z+12, r25	; 0x0c
     dda:	83 87       	std	Z+11, r24	; 0x0b

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
     ddc:	6d ea       	ldi	r22, 0xAD	; 173
     dde:	76 e0       	ldi	r23, 0x06	; 6
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	80 cf       	rjmp	.-256    	; 0xce4 <NWK_OpenEndpoint>
     de4:	08 95       	ret

00000de6 <nwkTxDelayTimerHandler>:
  newFrame->header.macFcf = 0x8841;
  newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
  newFrame->header.macDstPanId = frame->header.macDstPanId;
  newFrame->header.macSrcAddr = nwkIb.addr;
  newFrame->header.macSeq = ++nwkIb.macSeqNum;
=======
    1502:	84 e6       	ldi	r24, 0x64	; 100
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	a0 e0       	ldi	r26, 0x00	; 0
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	80 93 3b 08 	sts	0x083B, r24
    150e:	90 93 3c 08 	sts	0x083C, r25
    1512:	a0 93 3d 08 	sts	0x083D, r26
    1516:	b0 93 3e 08 	sts	0x083E, r27
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    151a:	10 92 3f 08 	sts	0x083F, r1
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
    151e:	84 e6       	ldi	r24, 0x64	; 100
    1520:	9a e0       	ldi	r25, 0x0A	; 10
    1522:	90 93 41 08 	sts	0x0841, r25
    1526:	80 93 40 08 	sts	0x0840, r24

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
    152a:	60 e5       	ldi	r22, 0x50	; 80
    152c:	7a e0       	ldi	r23, 0x0A	; 10
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	0e 94 12 0a 	call	0x1424	; 0x1424 <NWK_OpenEndpoint>
    1534:	08 95       	ret

00001536 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    1536:	ff 92       	push	r15
    1538:	0f 93       	push	r16
    153a:	1f 93       	push	r17
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    1542:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    1548:	01 e0       	ldi	r16, 0x01	; 1

      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    154a:	0f 2e       	mov	r0, r31
    154c:	f3 e1       	ldi	r31, 0x13	; 19
    154e:	ff 2e       	mov	r15, r31
    1550:	f0 2d       	mov	r31, r0
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    1552:	13 c0       	rjmp	.+38     	; 0x157a <nwkTxDelayTimerHandler+0x44>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    1554:	fc 01       	movw	r30, r24
    1556:	20 81       	ld	r18, Z
    1558:	21 31       	cpi	r18, 0x11	; 17
    155a:	79 f4       	brne	.+30     	; 0x157a <nwkTxDelayTimerHandler+0x44>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    155c:	ec 57       	subi	r30, 0x7C	; 124
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	20 81       	ld	r18, Z
    1562:	31 81       	ldd	r19, Z+1	; 0x01
    1564:	21 50       	subi	r18, 0x01	; 1
    1566:	31 09       	sbc	r19, r1
    1568:	31 83       	std	Z+1, r19	; 0x01
    156a:	20 83       	st	Z, r18
    156c:	23 2b       	or	r18, r19
    156e:	21 f4       	brne	.+8      	; 0x1578 <nwkTxDelayTimerHandler+0x42>
        frame->state = NWK_TX_STATE_SEND;
    1570:	fc 01       	movw	r30, r24
    1572:	f0 82       	st	Z, r15

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    1574:	10 2f       	mov	r17, r16
    1576:	01 c0       	rjmp	.+2      	; 0x157a <nwkTxDelayTimerHandler+0x44>
    1578:	10 2f       	mov	r17, r16
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    157a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <nwkFrameNext>
    157e:	00 97       	sbiw	r24, 0x00	; 0
    1580:	49 f7       	brne	.-46     	; 0x1554 <nwkTxDelayTimerHandler+0x1e>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
    1582:	11 23       	and	r17, r17
    1584:	19 f0       	breq	.+6      	; 0x158c <nwkTxDelayTimerHandler+0x56>
    SYS_TimerStart(timer);
    1586:	ce 01       	movw	r24, r28
    1588:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <SYS_TimerStart>
}
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	1f 91       	pop	r17
    1592:	0f 91       	pop	r16
    1594:	ff 90       	pop	r15
    1596:	08 95       	ret

00001598 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    1598:	ef 92       	push	r14
    159a:	ff 92       	push	r15
    159c:	0f 93       	push	r16
    159e:	1f 93       	push	r17
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    15a6:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    15ac:	01 e0       	ldi	r16, 0x01	; 1

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    15ae:	0f 2e       	mov	r0, r31
    15b0:	f7 e1       	ldi	r31, 0x17	; 23
    15b2:	ef 2e       	mov	r14, r31
    15b4:	f0 2d       	mov	r31, r0
  frame->tx.status = status;
    15b6:	68 94       	set
    15b8:	ff 24       	eor	r15, r15
    15ba:	f4 f8       	bld	r15, 4
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    15bc:	16 c0       	rjmp	.+44     	; 0x15ea <nwkTxAckWaitTimerHandler+0x52>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    15be:	fc 01       	movw	r30, r24
    15c0:	20 81       	ld	r18, Z
    15c2:	26 31       	cpi	r18, 0x16	; 22
    15c4:	91 f4       	brne	.+36     	; 0x15ea <nwkTxAckWaitTimerHandler+0x52>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    15c6:	ec 57       	subi	r30, 0x7C	; 124
    15c8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ca:	20 81       	ld	r18, Z
    15cc:	31 81       	ldd	r19, Z+1	; 0x01
    15ce:	21 50       	subi	r18, 0x01	; 1
    15d0:	31 09       	sbc	r19, r1
    15d2:	31 83       	std	Z+1, r19	; 0x01
    15d4:	20 83       	st	Z, r18
    15d6:	23 2b       	or	r18, r19
    15d8:	39 f4       	brne	.+14     	; 0x15e8 <nwkTxAckWaitTimerHandler+0x50>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    15da:	fc 01       	movw	r30, r24
    15dc:	e0 82       	st	Z, r14
  frame->tx.status = status;
    15de:	ed 57       	subi	r30, 0x7D	; 125
    15e0:	ff 4f       	sbci	r31, 0xFF	; 255
    15e2:	f0 82       	st	Z, r15

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    15e4:	10 2f       	mov	r17, r16
    15e6:	01 c0       	rjmp	.+2      	; 0x15ea <nwkTxAckWaitTimerHandler+0x52>
    15e8:	10 2f       	mov	r17, r16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    15ea:	0e 94 2b 0a 	call	0x1456	; 0x1456 <nwkFrameNext>
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	31 f7       	brne	.-52     	; 0x15be <nwkTxAckWaitTimerHandler+0x26>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
    15f2:	11 23       	and	r17, r17
    15f4:	19 f0       	breq	.+6      	; 0x15fc <nwkTxAckWaitTimerHandler+0x64>
    SYS_TimerStart(timer);
    15f6:	ce 01       	movw	r24, r28
    15f8:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <SYS_TimerStart>
}
    15fc:	df 91       	pop	r29
    15fe:	cf 91       	pop	r28
    1600:	1f 91       	pop	r17
    1602:	0f 91       	pop	r16
    1604:	ff 90       	pop	r15
    1606:	ef 90       	pop	r14
    1608:	08 95       	ret

0000160a <nwkTxInit>:
/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
    160a:	10 92 8f 08 	sts	0x088F, r1
    160e:	10 92 8e 08 	sts	0x088E, r1

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    1612:	82 e3       	ldi	r24, 0x32	; 50
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	a0 e0       	ldi	r26, 0x00	; 0
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	80 93 87 08 	sts	0x0887, r24
    161e:	90 93 88 08 	sts	0x0888, r25
    1622:	a0 93 89 08 	sts	0x0889, r26
    1626:	b0 93 8a 08 	sts	0x088A, r27
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    162a:	10 92 8b 08 	sts	0x088B, r1
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    162e:	8c ec       	ldi	r24, 0xCC	; 204
    1630:	9a e0       	ldi	r25, 0x0A	; 10
    1632:	90 93 8d 08 	sts	0x088D, r25
    1636:	80 93 8c 08 	sts	0x088C, r24

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    163a:	8a e0       	ldi	r24, 0x0A	; 10
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	a0 e0       	ldi	r26, 0x00	; 0
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	80 93 7a 08 	sts	0x087A, r24
    1646:	90 93 7b 08 	sts	0x087B, r25
    164a:	a0 93 7c 08 	sts	0x087C, r26
    164e:	b0 93 7d 08 	sts	0x087D, r27
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1652:	10 92 7e 08 	sts	0x087E, r1
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    1656:	8b e9       	ldi	r24, 0x9B	; 155
    1658:	9a e0       	ldi	r25, 0x0A	; 10
    165a:	90 93 80 08 	sts	0x0880, r25
    165e:	80 93 7f 08 	sts	0x087F, r24
    1662:	08 95       	ret

00001664 <nwkTxAckReceived>:
>>>>>>> refs/remotes/origin/master
}
     de6:	ef 92       	push	r14
     de8:	ff 92       	push	r15
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	7c 01       	movw	r14, r24
     df2:	10 e0       	ldi	r17, 0x00	; 0
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	90 e0       	ldi	r25, 0x00	; 0
     df8:	01 e0       	ldi	r16, 0x01	; 1
     dfa:	c3 e1       	ldi	r28, 0x13	; 19
     dfc:	13 c0       	rjmp	.+38     	; 0xe24 <nwkTxDelayTimerHandler+0x3e>
     dfe:	fc 01       	movw	r30, r24
     e00:	20 81       	ld	r18, Z
     e02:	21 31       	cpi	r18, 0x11	; 17
     e04:	79 f4       	brne	.+30     	; 0xe24 <nwkTxDelayTimerHandler+0x3e>
     e06:	ec 57       	subi	r30, 0x7C	; 124
     e08:	ff 4f       	sbci	r31, 0xFF	; 255
     e0a:	20 81       	ld	r18, Z
     e0c:	31 81       	ldd	r19, Z+1	; 0x01
     e0e:	21 50       	subi	r18, 0x01	; 1
     e10:	31 09       	sbc	r19, r1
     e12:	31 83       	std	Z+1, r19	; 0x01
     e14:	20 83       	st	Z, r18
     e16:	23 2b       	or	r18, r19
     e18:	21 f4       	brne	.+8      	; 0xe22 <nwkTxDelayTimerHandler+0x3c>
     e1a:	fc 01       	movw	r30, r24
     e1c:	c0 83       	st	Z, r28
     e1e:	10 2f       	mov	r17, r16
     e20:	01 c0       	rjmp	.+2      	; 0xe24 <nwkTxDelayTimerHandler+0x3e>
     e22:	10 2f       	mov	r17, r16
     e24:	78 df       	rcall	.-272    	; 0xd16 <nwkFrameNext>
     e26:	00 97       	sbiw	r24, 0x00	; 0
     e28:	51 f7       	brne	.-44     	; 0xdfe <nwkTxDelayTimerHandler+0x18>
     e2a:	11 23       	and	r17, r17
     e2c:	11 f0       	breq	.+4      	; 0xe32 <nwkTxDelayTimerHandler+0x4c>
     e2e:	c7 01       	movw	r24, r14
     e30:	eb d3       	rcall	.+2006   	; 0x1608 <SYS_TimerStart>
     e32:	cf 91       	pop	r28
     e34:	1f 91       	pop	r17
     e36:	0f 91       	pop	r16
     e38:	ff 90       	pop	r15
     e3a:	ef 90       	pop	r14
     e3c:	08 95       	ret

00000e3e <nwkTxAckWaitTimerHandler>:
     e3e:	ef 92       	push	r14
     e40:	ff 92       	push	r15
     e42:	0f 93       	push	r16
     e44:	1f 93       	push	r17
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	7c 01       	movw	r14, r24
     e4c:	10 e0       	ldi	r17, 0x00	; 0
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	01 e0       	ldi	r16, 0x01	; 1
     e54:	d7 e1       	ldi	r29, 0x17	; 23
     e56:	c0 e1       	ldi	r28, 0x10	; 16
     e58:	16 c0       	rjmp	.+44     	; 0xe86 <nwkTxAckWaitTimerHandler+0x48>
     e5a:	fc 01       	movw	r30, r24
     e5c:	20 81       	ld	r18, Z
     e5e:	26 31       	cpi	r18, 0x16	; 22
     e60:	91 f4       	brne	.+36     	; 0xe86 <nwkTxAckWaitTimerHandler+0x48>
     e62:	ec 57       	subi	r30, 0x7C	; 124
     e64:	ff 4f       	sbci	r31, 0xFF	; 255
     e66:	20 81       	ld	r18, Z
     e68:	31 81       	ldd	r19, Z+1	; 0x01
     e6a:	21 50       	subi	r18, 0x01	; 1
     e6c:	31 09       	sbc	r19, r1
     e6e:	31 83       	std	Z+1, r19	; 0x01
     e70:	20 83       	st	Z, r18
     e72:	23 2b       	or	r18, r19
     e74:	39 f4       	brne	.+14     	; 0xe84 <nwkTxAckWaitTimerHandler+0x46>
     e76:	fc 01       	movw	r30, r24
     e78:	d0 83       	st	Z, r29
     e7a:	ed 57       	subi	r30, 0x7D	; 125
     e7c:	ff 4f       	sbci	r31, 0xFF	; 255
     e7e:	c0 83       	st	Z, r28
     e80:	10 2f       	mov	r17, r16
     e82:	01 c0       	rjmp	.+2      	; 0xe86 <nwkTxAckWaitTimerHandler+0x48>
     e84:	10 2f       	mov	r17, r16
     e86:	47 df       	rcall	.-370    	; 0xd16 <nwkFrameNext>
     e88:	00 97       	sbiw	r24, 0x00	; 0
     e8a:	39 f7       	brne	.-50     	; 0xe5a <nwkTxAckWaitTimerHandler+0x1c>
     e8c:	11 23       	and	r17, r17
     e8e:	11 f0       	breq	.+4      	; 0xe94 <nwkTxAckWaitTimerHandler+0x56>
     e90:	c7 01       	movw	r24, r14
     e92:	ba d3       	rcall	.+1908   	; 0x1608 <SYS_TimerStart>
     e94:	df 91       	pop	r29
     e96:	cf 91       	pop	r28
     e98:	1f 91       	pop	r17
     e9a:	0f 91       	pop	r16
     e9c:	ff 90       	pop	r15
     e9e:	ef 90       	pop	r14
     ea0:	08 95       	ret

00000ea2 <nwkTxInit>:
     ea2:	10 92 e1 09 	sts	0x09E1, r1
     ea6:	10 92 e0 09 	sts	0x09E0, r1
     eaa:	e3 ed       	ldi	r30, 0xD3	; 211
     eac:	f9 e0       	ldi	r31, 0x09	; 9
     eae:	82 e3       	ldi	r24, 0x32	; 50
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	a0 e0       	ldi	r26, 0x00	; 0
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	86 83       	std	Z+6, r24	; 0x06
     eb8:	97 83       	std	Z+7, r25	; 0x07
     eba:	a0 87       	std	Z+8, r26	; 0x08
     ebc:	b1 87       	std	Z+9, r27	; 0x09
     ebe:	12 86       	std	Z+10, r1	; 0x0a
     ec0:	8f e1       	ldi	r24, 0x1F	; 31
     ec2:	97 e0       	ldi	r25, 0x07	; 7
     ec4:	94 87       	std	Z+12, r25	; 0x0c
     ec6:	83 87       	std	Z+11, r24	; 0x0b
     ec8:	e6 ec       	ldi	r30, 0xC6	; 198
     eca:	f9 e0       	ldi	r31, 0x09	; 9
     ecc:	8a e0       	ldi	r24, 0x0A	; 10
     ece:	90 e0       	ldi	r25, 0x00	; 0
     ed0:	a0 e0       	ldi	r26, 0x00	; 0
     ed2:	b0 e0       	ldi	r27, 0x00	; 0
     ed4:	86 83       	std	Z+6, r24	; 0x06
     ed6:	97 83       	std	Z+7, r25	; 0x07
     ed8:	a0 87       	std	Z+8, r26	; 0x08
     eda:	b1 87       	std	Z+9, r27	; 0x09
     edc:	12 86       	std	Z+10, r1	; 0x0a
     ede:	83 ef       	ldi	r24, 0xF3	; 243
     ee0:	96 e0       	ldi	r25, 0x06	; 6
     ee2:	94 87       	std	Z+12, r25	; 0x0c
     ee4:	83 87       	std	Z+11, r24	; 0x0b
     ee6:	08 95       	ret

00000ee8 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
     ee8:	cf 93       	push	r28
     eea:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
     eec:	fc 01       	movw	r30, r24
     eee:	c7 81       	ldd	r28, Z+7	; 0x07
     ef0:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
     ef2:	81 85       	ldd	r24, Z+9	; 0x09
     ef4:	83 30       	cpi	r24, 0x03	; 3
     ef6:	c1 f4       	brne	.+48     	; 0xf28 <nwkTxAckReceived+0x40>
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	10 c0       	rjmp	.+32     	; 0xf1e <nwkTxAckReceived+0x36>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
     efe:	fc 01       	movw	r30, r24
     f00:	20 81       	ld	r18, Z
     f02:	26 31       	cpi	r18, 0x16	; 22
     f04:	61 f4       	brne	.+24     	; 0xf1e <nwkTxAckReceived+0x36>
     f06:	34 85       	ldd	r19, Z+12	; 0x0c
     f08:	29 81       	ldd	r18, Y+1	; 0x01
     f0a:	32 13       	cpse	r19, r18
     f0c:	08 c0       	rjmp	.+16     	; 0xf1e <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
     f0e:	27 e1       	ldi	r18, 0x17	; 23
     f10:	20 83       	st	Z, r18
      frame->tx.control = command->control;
     f12:	2a 81       	ldd	r18, Y+2	; 0x02
     f14:	ea 57       	subi	r30, 0x7A	; 122
     f16:	ff 4f       	sbci	r31, 0xFF	; 255
     f18:	20 83       	st	Z, r18
      return true;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	06 c0       	rjmp	.+12     	; 0xf2a <nwkTxAckReceived+0x42>
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
     f1e:	fb de       	rcall	.-522    	; 0xd16 <nwkFrameNext>
     f20:	00 97       	sbiw	r24, 0x00	; 0
     f22:	69 f7       	brne	.-38     	; 0xefe <nwkTxAckReceived+0x16>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
     f24:	80 e0       	ldi	r24, 0x00	; 0
     f26:	01 c0       	rjmp	.+2      	; 0xf2a <nwkTxAckReceived+0x42>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
     f28:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	08 95       	ret

00000f30 <phyTrxSetState>:
  phyTrxSetState(TRX_CMD_TRX_OFF);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  if (phyRxState)
    phyTrxSetState(TRX_CMD_RX_AACK_ON);
     f30:	93 e0       	ldi	r25, 0x03	; 3
     f32:	90 93 42 01 	sts	0x0142, r25
     f36:	e1 e4       	ldi	r30, 0x41	; 65
     f38:	f1 e0       	ldi	r31, 0x01	; 1
     f3a:	90 81       	ld	r25, Z
     f3c:	9f 71       	andi	r25, 0x1F	; 31
     f3e:	98 30       	cpi	r25, 0x08	; 8
     f40:	e1 f7       	brne	.-8      	; 0xf3a <phyTrxSetState+0xa>
     f42:	80 93 42 01 	sts	0x0142, r24
     f46:	e1 e4       	ldi	r30, 0x41	; 65
     f48:	f1 e0       	ldi	r31, 0x01	; 1
     f4a:	90 81       	ld	r25, Z
     f4c:	9f 71       	andi	r25, 0x1F	; 31
     f4e:	98 13       	cpse	r25, r24
     f50:	fc cf       	rjmp	.-8      	; 0xf4a <phyTrxSetState+0x1a>
     f52:	08 95       	ret

00000f54 <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
     f54:	e9 e3       	ldi	r30, 0x39	; 57
     f56:	f1 e0       	ldi	r31, 0x01	; 1
     f58:	80 81       	ld	r24, Z
     f5a:	81 60       	ori	r24, 0x01	; 1
     f5c:	80 83       	st	Z, r24

  phyRxState = false;
<<<<<<< HEAD
     f5e:	10 92 e3 09 	sts	0x09E3, r1
  phyBand = 0;
     f62:	10 92 e2 09 	sts	0x09E2, r1
  phyState = PHY_STATE_IDLE;
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	80 93 e4 09 	sts	0x09E4, r24
=======
    16dc:	10 92 91 08 	sts	0x0891, r1
  phyBand = 0;
    16e0:	10 92 90 08 	sts	0x0890, r1
  phyState = PHY_STATE_IDLE;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	80 93 92 08 	sts	0x0892, r24
>>>>>>> refs/remotes/origin/master

  phyTrxSetState(TRX_CMD_TRX_OFF);
     f6c:	88 e0       	ldi	r24, 0x08	; 8
     f6e:	e0 df       	rcall	.-64     	; 0xf30 <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
     f70:	8b ee       	ldi	r24, 0xEB	; 235
     f72:	80 93 56 01 	sts	0x0156, r24

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
     f76:	ec e4       	ldi	r30, 0x4C	; 76
     f78:	f1 e0       	ldi	r31, 0x01	; 1
     f7a:	80 81       	ld	r24, Z
     f7c:	80 68       	ori	r24, 0x80	; 128
     f7e:	80 83       	st	Z, r24
     f80:	08 95       	ret

00000f82 <sensor_handler>:

/*************************************************************************//**
  @brief sensor_handler function to decide the execution logic of a sensor according to its state, return 1 if it has some borrow time 
*****************************************************************************/
int sensor_handler( struct event *p )
{
     f82:	0f 93       	push	r16
     f84:	1f 93       	push	r17
     f86:	cf 93       	push	r28
     f88:	df 93       	push	r29
     f8a:	ec 01       	movw	r28, r24
	int retNum;
	BaseSensor *sp;
	/* sanity check */
	if( p == EV_NULL )
     f8c:	89 2b       	or	r24, r25
     f8e:	59 f4       	brne	.+22     	; 0xfa6 <sensor_handler+0x24>
	{
		#ifdef DEBUG
		printf("Null Event Error !!!");
<<<<<<< HEAD
     f90:	8f e4       	ldi	r24, 0x4F	; 79
     f92:	93 e0       	ldi	r25, 0x03	; 3
     f94:	9f 93       	push	r25
     f96:	8f 93       	push	r24
     f98:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
=======
    1710:	8d ee       	ldi	r24, 0xED	; 237
    1712:	92 e0       	ldi	r25, 0x02	; 2
    1714:	9f 93       	push	r25
    1716:	8f 93       	push	r24
    1718:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
>>>>>>> refs/remotes/origin/master
		#endif
		return 0;
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	80 e0       	ldi	r24, 0x00	; 0
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	70 c0       	rjmp	.+224    	; 0x1086 <sensor_handler+0x104>
	}
	sp = ( BaseSensor * )( p->sp );
     fa6:	08 89       	ldd	r16, Y+16	; 0x10
     fa8:	19 89       	ldd	r17, Y+17	; 0x11

	#ifdef DEBUG
<<<<<<< HEAD
	// printf("cur_state = %d\n", p->cur_state);
	#endif
	switch( p->cur_state )
     faa:	98 8d       	ldd	r25, Y+24	; 0x18
     fac:	91 30       	cpi	r25, 0x01	; 1
     fae:	a9 f0       	breq	.+42     	; 0xfda <sensor_handler+0x58>
     fb0:	38 f0       	brcs	.+14     	; 0xfc0 <sensor_handler+0x3e>
     fb2:	92 30       	cpi	r25, 0x02	; 2
     fb4:	09 f4       	brne	.+2      	; 0xfb8 <sensor_handler+0x36>
     fb6:	4e c0       	rjmp	.+156    	; 0x1054 <sensor_handler+0xd2>
     fb8:	94 30       	cpi	r25, 0x04	; 4
     fba:	09 f4       	brne	.+2      	; 0xfbe <sensor_handler+0x3c>
     fbc:	5a c0       	rjmp	.+180    	; 0x1072 <sensor_handler+0xf0>
     fbe:	61 c0       	rjmp	.+194    	; 0x1082 <sensor_handler+0x100>
=======
	printf("cur_state = %d\n", p->cur_state);
    172a:	8a 89       	ldd	r24, Y+18	; 0x12
    172c:	1f 92       	push	r1
    172e:	8f 93       	push	r24
    1730:	22 e0       	ldi	r18, 0x02	; 2
    1732:	33 e0       	ldi	r19, 0x03	; 3
    1734:	3f 93       	push	r19
    1736:	2f 93       	push	r18
    1738:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
	#endif
	switch( p->cur_state )
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	8a 89       	ldd	r24, Y+18	; 0x12
    1746:	81 30       	cpi	r24, 0x01	; 1
    1748:	a9 f0       	breq	.+42     	; 0x1774 <sensor_handler+0x72>
    174a:	38 f0       	brcs	.+14     	; 0x175a <sensor_handler+0x58>
    174c:	82 30       	cpi	r24, 0x02	; 2
    174e:	09 f4       	brne	.+2      	; 0x1752 <sensor_handler+0x50>
    1750:	49 c0       	rjmp	.+146    	; 0x17e4 <sensor_handler+0xe2>
    1752:	84 30       	cpi	r24, 0x04	; 4
    1754:	09 f4       	brne	.+2      	; 0x1758 <sensor_handler+0x56>
    1756:	56 c0       	rjmp	.+172    	; 0x1804 <sensor_handler+0x102>
    1758:	5d c0       	rjmp	.+186    	; 0x1814 <sensor_handler+0x112>
>>>>>>> refs/remotes/origin/master
	{
		/* New : init first, if retNum is not 0 goto Oops state */
		case New :
		// the way to call init() is different than most other functions, since it is virtual function in BaseDevice .
		retNum = sp->abstract.device_vt->init( &(sp->abstract) );
     fc0:	d8 01       	movw	r26, r16
     fc2:	ed 91       	ld	r30, X+
     fc4:	fc 91       	ld	r31, X
     fc6:	02 80       	ldd	r0, Z+2	; 0x02
     fc8:	f3 81       	ldd	r31, Z+3	; 0x03
     fca:	e0 2d       	mov	r30, r0
     fcc:	c8 01       	movw	r24, r16
     fce:	19 95       	eicall
		if(retNum != 0)
		{
			p->cur_state = Oops;
		}
		p->cur_state = Ready;
<<<<<<< HEAD
     fd0:	81 e0       	ldi	r24, 0x01	; 1
     fd2:	88 8f       	std	Y+24, r24	; 0x18
=======
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	8a 8b       	std	Y+18, r24	; 0x12
>>>>>>> refs/remotes/origin/master
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	90 e0       	ldi	r25, 0x00	; 0
		if(retNum != 0)
		{
			p->cur_state = Oops;
		}
		p->cur_state = Ready;
		break;
     fd8:	56 c0       	rjmp	.+172    	; 0x1086 <sensor_handler+0x104>
		
		
		
		/* Ready : ready to activate collection request, if retNum is not 0 goto Oops state */
		case Ready :
		retNum = sp->vmt->Request(p->sp);
     fda:	d8 01       	movw	r26, r16
     fdc:	1c 96       	adiw	r26, 0x0c	; 12
     fde:	ed 91       	ld	r30, X+
     fe0:	fc 91       	ld	r31, X
     fe2:	1d 97       	sbiw	r26, 0x0d	; 13
     fe4:	04 80       	ldd	r0, Z+4	; 0x04
     fe6:	f5 81       	ldd	r31, Z+5	; 0x05
     fe8:	e0 2d       	mov	r30, r0
     fea:	c8 01       	movw	r24, r16
     fec:	19 95       	eicall
		if ( retNum == -1 )
     fee:	8f 3f       	cpi	r24, 0xFF	; 255
     ff0:	bf ef       	ldi	r27, 0xFF	; 255
     ff2:	9b 07       	cpc	r25, r27
     ff4:	29 f4       	brne	.+10     	; 0x1000 <sensor_handler+0x7e>
		{
			p->cur_state = Oops;
<<<<<<< HEAD
     ff6:	84 e0       	ldi	r24, 0x04	; 4
     ff8:	88 8f       	std	Y+24, r24	; 0x18
=======
    1792:	84 e0       	ldi	r24, 0x04	; 4
    1794:	8a 8b       	std	Y+18, r24	; 0x12
>>>>>>> refs/remotes/origin/master
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	43 c0       	rjmp	.+134    	; 0x1086 <sensor_handler+0x104>
		retNum = sp->vmt->Request(p->sp);
		if ( retNum == -1 )
		{
			p->cur_state = Oops;
		}
		else if( retNum == 0 )
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	81 f4       	brne	.+32     	; 0x1024 <sensor_handler+0xa2>
		{
			p->cur_state = Ready;
<<<<<<< HEAD
    1004:	81 e0       	ldi	r24, 0x01	; 1
    1006:	88 8f       	std	Y+24, r24	; 0x18
			sp->vmt->Collect(p->sp);
    1008:	d8 01       	movw	r26, r16
    100a:	1c 96       	adiw	r26, 0x0c	; 12
    100c:	ed 91       	ld	r30, X+
    100e:	fc 91       	ld	r31, X
    1010:	1d 97       	sbiw	r26, 0x0d	; 13
    1012:	06 80       	ldd	r0, Z+6	; 0x06
    1014:	f7 81       	ldd	r31, Z+7	; 0x07
    1016:	e0 2d       	mov	r30, r0
    1018:	88 89       	ldd	r24, Y+16	; 0x10
    101a:	99 89       	ldd	r25, Y+17	; 0x11
    101c:	19 95       	eicall
=======
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	8a 8b       	std	Y+18, r24	; 0x12
			data = sp->vmt->Collect(p->sp);
    17a4:	d8 01       	movw	r26, r16
    17a6:	1c 96       	adiw	r26, 0x0c	; 12
    17a8:	ed 91       	ld	r30, X+
    17aa:	fc 91       	ld	r31, X
    17ac:	1d 97       	sbiw	r26, 0x0d	; 13
    17ae:	06 80       	ldd	r0, Z+6	; 0x06
    17b0:	f7 81       	ldd	r31, Z+7	; 0x07
    17b2:	e0 2d       	mov	r30, r0
    17b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    17b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    17b8:	09 95       	icall
>>>>>>> refs/remotes/origin/master
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	31 c0       	rjmp	.+98     	; 0x1086 <sensor_handler+0x104>
			// printf("data : %d\n", data);
			// #endif
		}
		else
		{
			p->cur_state = Running;
<<<<<<< HEAD
    1024:	22 e0       	ldi	r18, 0x02	; 2
    1026:	28 8f       	std	Y+24, r18	; 0x18
			p->timeout = (int16_t) retNum;
    1028:	09 2e       	mov	r0, r25
    102a:	00 0c       	add	r0, r0
    102c:	aa 0b       	sbc	r26, r26
    102e:	bb 0b       	sbc	r27, r27
    1030:	8c 83       	std	Y+4, r24	; 0x04
    1032:	9d 83       	std	Y+5, r25	; 0x05
    1034:	ae 83       	std	Y+6, r26	; 0x06
    1036:	bf 83       	std	Y+7, r27	; 0x07
			p->borrow_timeout = (int16_t)  retNum;
    1038:	8c 87       	std	Y+12, r24	; 0x0c
    103a:	9d 87       	std	Y+13, r25	; 0x0d
    103c:	ae 87       	std	Y+14, r26	; 0x0e
    103e:	bf 87       	std	Y+15, r27	; 0x0f
			LL_POP( timeoutq );
    1040:	80 91 ee 0b 	lds	r24, 0x0BEE
    1044:	90 91 ef 0b 	lds	r25, 0x0BEF
    1048:	29 d3       	rcall	.+1618   	; 0x169c <ll_pop>
			insert_timeoutq_event( p );
    104a:	ce 01       	movw	r24, r28
    104c:	db d0       	rcall	.+438    	; 0x1204 <insert_timeoutq_event>
=======
    17c0:	22 e0       	ldi	r18, 0x02	; 2
    17c2:	2a 8b       	std	Y+18, r18	; 0x12
			p->timeout = retNum;
    17c4:	9d 83       	std	Y+5, r25	; 0x05
    17c6:	8c 83       	std	Y+4, r24	; 0x04
			p->borrow_timeout = retNum;
    17c8:	99 87       	std	Y+9, r25	; 0x09
    17ca:	88 87       	std	Y+8, r24	; 0x08
			LL_POP( timeoutq );
    17cc:	80 91 e9 09 	lds	r24, 0x09E9
    17d0:	90 91 ea 09 	lds	r25, 0x09EA
    17d4:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <ll_pop>
			insert_timeoutq_event( p );
    17d8:	ce 01       	movw	r24, r28
    17da:	0e 94 b3 0c 	call	0x1966	; 0x1966 <insert_timeoutq_event>
>>>>>>> refs/remotes/origin/master
			return 1;
    104e:	81 e0       	ldi	r24, 0x01	; 1
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	19 c0       	rjmp	.+50     	; 0x1086 <sensor_handler+0x104>
		
		
		/* Running : ready to pull data right away */
		case Running :
		//      data = p->sp->vmt->Collect();
		p->cur_state = Ready;
<<<<<<< HEAD
    1054:	81 e0       	ldi	r24, 0x01	; 1
    1056:	88 8f       	std	Y+24, r24	; 0x18
=======
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	8a 8b       	std	Y+18, r24	; 0x12
>>>>>>> refs/remotes/origin/master
		p->sp->vmt->Collect(p->sp);
    1058:	d8 01       	movw	r26, r16
    105a:	1c 96       	adiw	r26, 0x0c	; 12
    105c:	ed 91       	ld	r30, X+
    105e:	fc 91       	ld	r31, X
    1060:	1d 97       	sbiw	r26, 0x0d	; 13
    1062:	06 80       	ldd	r0, Z+6	; 0x06
    1064:	f7 81       	ldd	r31, Z+7	; 0x07
    1066:	e0 2d       	mov	r30, r0
    1068:	c8 01       	movw	r24, r16
    106a:	19 95       	eicall
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    106c:	80 e0       	ldi	r24, 0x00	; 0
    106e:	90 e0       	ldi	r25, 0x00	; 0
		/* Running : ready to pull data right away */
		case Running :
		//      data = p->sp->vmt->Collect();
		p->cur_state = Ready;
		p->sp->vmt->Collect(p->sp);
		break;
    1070:	0a c0       	rjmp	.+20     	; 0x1086 <sensor_handler+0x104>
		
		/* Oops : when some errors occur */
		case Oops :
		/* TODO : ( we may want to do something in reset function and ) re-init by setting the state to new */
#ifdef DEBUG
		      printf("Something really wrong happens\n");
<<<<<<< HEAD
    1072:	84 e6       	ldi	r24, 0x64	; 100
    1074:	93 e0       	ldi	r25, 0x03	; 3
    1076:	0e 94 27 21 	call	0x424e	; 0x424e <puts>
#endif
		p->cur_state = New;
    107a:	18 8e       	std	Y+24, r1	; 0x18
=======
    1804:	82 e1       	ldi	r24, 0x12	; 18
    1806:	93 e0       	ldi	r25, 0x03	; 3
    1808:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
#endif
		p->cur_state = New;
    180c:	1a 8a       	std	Y+18, r1	; 0x12
>>>>>>> refs/remotes/origin/master
		break;
	}
	return 0;
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	90 e0       	ldi	r25, 0x00	; 0
		/* TODO : ( we may want to do something in reset function and ) re-init by setting the state to new */
#ifdef DEBUG
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
    1080:	02 c0       	rjmp	.+4      	; 0x1086 <sensor_handler+0x104>
	}
	return 0;
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	90 e0       	ldi	r25, 0x00	; 0
	// printf(" run :\n\t");
	// p->sp->vmt->MyPrint(p->sp);

}
    1086:	df 91       	pop	r29
    1088:	cf 91       	pop	r28
    108a:	1f 91       	pop	r17
    108c:	0f 91       	pop	r16
    108e:	08 95       	ret

00001090 <device_handler>:
 */
/*************************************************************************//**
  @brief device_handler function to decide the execution logic of a non-sensor device according to its state.
*****************************************************************************/
int device_handler( struct event *p )
{
    1090:	0f 93       	push	r16
    1092:	1f 93       	push	r17
    1094:	cf 93       	push	r28
    1096:	df 93       	push	r29
    1098:	fc 01       	movw	r30, r24
	int retNum = 0;
	BaseDevice * bdp = (BaseDevice *) ( p->load_p );
    109a:	c2 89       	ldd	r28, Z+18	; 0x12
    109c:	d3 89       	ldd	r29, Z+19	; 0x13
	LoadDataDevice *ldp = (LoadDataDevice*) ( p->load_p );
	DemoStorageDevice *ddp = (DemoStorageDevice*) ( p->store_p );
    109e:	04 89       	ldd	r16, Z+20	; 0x14
    10a0:	15 89       	ldd	r17, Z+21	; 0x15

	/* sanity check */
	if( p == EV_NULL )
    10a2:	89 2b       	or	r24, r25
    10a4:	29 f4       	brne	.+10     	; 0x10b0 <device_handler+0x20>
	{
		#ifdef DEBUG
		printf("Null Event Error !!!\n");
    10a6:	8f e4       	ldi	r24, 0x4F	; 79
    10a8:	93 e0       	ldi	r25, 0x03	; 3
    10aa:	0e 94 27 21 	call	0x424e	; 0x424e <puts>
		#endif
		return 0;
    10ae:	35 c0       	rjmp	.+106    	; 0x111a <device_handler+0x8a>
	}
	
	switch( p->cur_state )
    10b0:	90 8d       	ldd	r25, Z+24	; 0x18
    10b2:	99 23       	and	r25, r25
    10b4:	19 f0       	breq	.+6      	; 0x10bc <device_handler+0x2c>
    10b6:	91 30       	cpi	r25, 0x01	; 1
    10b8:	21 f0       	breq	.+8      	; 0x10c2 <device_handler+0x32>
    10ba:	2f c0       	rjmp	.+94     	; 0x111a <device_handler+0x8a>
	{
		/* New : init first, if retNum is not 0 goto Oops state */
		case New :
			p->cur_state = Ready;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	80 8f       	std	Z+24, r24	; 0x18
			break;
    10c0:	2c c0       	rjmp	.+88     	; 0x111a <device_handler+0x8a>
		case Ready :
			p->cur_state = Ready;
			if( bdp->device_vt->getType(bdp) == TYPE_DEVICE )
    10c2:	e8 81       	ld	r30, Y
    10c4:	f9 81       	ldd	r31, Y+1	; 0x01
    10c6:	06 80       	ldd	r0, Z+6	; 0x06
    10c8:	f7 81       	ldd	r31, Z+7	; 0x07
    10ca:	e0 2d       	mov	r30, r0
    10cc:	ce 01       	movw	r24, r28
    10ce:	19 95       	eicall
    10d0:	05 97       	sbiw	r24, 0x05	; 5
    10d2:	81 f4       	brne	.+32     	; 0x10f4 <device_handler+0x64>
			{
				printf("Load Device\n");
    10d4:	83 e8       	ldi	r24, 0x83	; 131
    10d6:	93 e0       	ldi	r25, 0x03	; 3
    10d8:	0e 94 27 21 	call	0x424e	; 0x424e <puts>
				ldp->vmt->Execute(ldp);
    10dc:	ea 81       	ldd	r30, Y+2	; 0x02
    10de:	fb 81       	ldd	r31, Y+3	; 0x03
    10e0:	02 80       	ldd	r0, Z+2	; 0x02
    10e2:	f3 81       	ldd	r31, Z+3	; 0x03
    10e4:	e0 2d       	mov	r30, r0
    10e6:	ce 01       	movw	r24, r28
    10e8:	19 95       	eicall
				printf("Load Device Finish\n");
    10ea:	8f e8       	ldi	r24, 0x8F	; 143
    10ec:	93 e0       	ldi	r25, 0x03	; 3
    10ee:	0e 94 27 21 	call	0x424e	; 0x424e <puts>
    10f2:	13 c0       	rjmp	.+38     	; 0x111a <device_handler+0x8a>
			}	
			else if( bdp->device_vt->getType(bdp) == TYPE_STORAGE_DEVICE )
    10f4:	e8 81       	ld	r30, Y
    10f6:	f9 81       	ldd	r31, Y+1	; 0x01
    10f8:	06 80       	ldd	r0, Z+6	; 0x06
    10fa:	f7 81       	ldd	r31, Z+7	; 0x07
    10fc:	e0 2d       	mov	r30, r0
    10fe:	ce 01       	movw	r24, r28
    1100:	19 95       	eicall
    1102:	04 97       	sbiw	r24, 0x04	; 4
    1104:	51 f4       	brne	.+20     	; 0x111a <device_handler+0x8a>
			{
				ddp->vmt->Execute(ddp);
    1106:	d8 01       	movw	r26, r16
    1108:	12 96       	adiw	r26, 0x02	; 2
    110a:	ed 91       	ld	r30, X+
    110c:	fc 91       	ld	r31, X
    110e:	13 97       	sbiw	r26, 0x03	; 3
    1110:	02 80       	ldd	r0, Z+2	; 0x02
    1112:	f3 81       	ldd	r31, Z+3	; 0x03
    1114:	e0 2d       	mov	r30, r0
    1116:	c8 01       	movw	r24, r16
    1118:	19 95       	eicall
			break;
		default :
			break;
	}
	return retNum;
}
    111a:	80 e0       	ldi	r24, 0x00	; 0
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	df 91       	pop	r29
    1120:	cf 91       	pop	r28
    1122:	1f 91       	pop	r17
    1124:	0f 91       	pop	r16
    1126:	08 95       	ret

<<<<<<< HEAD
00001128 <init_timeoutq>:
=======
00001822 <device_handler>:
 */
/*************************************************************************//**
  @brief device_handler function to decide the execution logic of a non-sensor device according to its state.
*****************************************************************************/
int device_handler( struct event *p )
{
    1822:	ef 92       	push	r14
    1824:	ff 92       	push	r15
    1826:	0f 93       	push	r16
    1828:	1f 93       	push	r17
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	fc 01       	movw	r30, r24
	int retNum;
	BaseDevice * bdp = (BaseDevice *) ( p->sp );
    1830:	c2 85       	ldd	r28, Z+10	; 0x0a
    1832:	d3 85       	ldd	r29, Z+11	; 0x0b
	LoadDataDevice *ldp = (LoadDataDevice*) ( p->load_p );
    1834:	04 85       	ldd	r16, Z+12	; 0x0c
    1836:	15 85       	ldd	r17, Z+13	; 0x0d
	DemoStorageDevice *ddp = (DemoStorageDevice*) ( p->store_p );
    1838:	e6 84       	ldd	r14, Z+14	; 0x0e
    183a:	f7 84       	ldd	r15, Z+15	; 0x0f

	/* sanity check */
	if( p == EV_NULL )
    183c:	00 97       	sbiw	r24, 0x00	; 0
    183e:	49 f4       	brne	.+18     	; 0x1852 <device_handler+0x30>
	{
		#ifdef DEBUG
		printf("Null Event Error !!!");
    1840:	8d ee       	ldi	r24, 0xED	; 237
    1842:	92 e0       	ldi	r25, 0x02	; 2
    1844:	9f 93       	push	r25
    1846:	8f 93       	push	r24
    1848:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
		#endif
		return 0;
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	30 c0       	rjmp	.+96     	; 0x18b2 <device_handler+0x90>
	}
	
	switch( p->cur_state )
    1852:	82 89       	ldd	r24, Z+18	; 0x12
    1854:	88 23       	and	r24, r24
    1856:	19 f0       	breq	.+6      	; 0x185e <device_handler+0x3c>
    1858:	81 30       	cpi	r24, 0x01	; 1
    185a:	21 f0       	breq	.+8      	; 0x1864 <device_handler+0x42>
    185c:	2a c0       	rjmp	.+84     	; 0x18b2 <device_handler+0x90>
	{
		/* New : init first, if retNum is not 0 goto Oops state */
		case New :
			p->cur_state = Ready;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	82 8b       	std	Z+18, r24	; 0x12
			break;
    1862:	27 c0       	rjmp	.+78     	; 0x18b2 <device_handler+0x90>
		case Ready :
			p->cur_state = Ready;
			if( bdp->device_vt->getType(bdp) == TYPE_DEVICE )
    1864:	e8 81       	ld	r30, Y
    1866:	f9 81       	ldd	r31, Y+1	; 0x01
    1868:	06 80       	ldd	r0, Z+6	; 0x06
    186a:	f7 81       	ldd	r31, Z+7	; 0x07
    186c:	e0 2d       	mov	r30, r0
    186e:	ce 01       	movw	r24, r28
    1870:	09 95       	icall
    1872:	05 97       	sbiw	r24, 0x05	; 5
    1874:	59 f4       	brne	.+22     	; 0x188c <device_handler+0x6a>
			{
				ldp->vmt->Execute(ldp);
    1876:	d8 01       	movw	r26, r16
    1878:	12 96       	adiw	r26, 0x02	; 2
    187a:	ed 91       	ld	r30, X+
    187c:	fc 91       	ld	r31, X
    187e:	13 97       	sbiw	r26, 0x03	; 3
    1880:	02 80       	ldd	r0, Z+2	; 0x02
    1882:	f3 81       	ldd	r31, Z+3	; 0x03
    1884:	e0 2d       	mov	r30, r0
    1886:	c8 01       	movw	r24, r16
    1888:	09 95       	icall
    188a:	13 c0       	rjmp	.+38     	; 0x18b2 <device_handler+0x90>
			}	
			else if( bdp->device_vt->getType(bdp) == TYPE_STORAGE_DEVICE )
    188c:	e8 81       	ld	r30, Y
    188e:	f9 81       	ldd	r31, Y+1	; 0x01
    1890:	06 80       	ldd	r0, Z+6	; 0x06
    1892:	f7 81       	ldd	r31, Z+7	; 0x07
    1894:	e0 2d       	mov	r30, r0
    1896:	ce 01       	movw	r24, r28
    1898:	09 95       	icall
    189a:	04 97       	sbiw	r24, 0x04	; 4
    189c:	51 f4       	brne	.+20     	; 0x18b2 <device_handler+0x90>
			{
				ddp->vmt->Execute(ddp);
    189e:	d7 01       	movw	r26, r14
    18a0:	12 96       	adiw	r26, 0x02	; 2
    18a2:	ed 91       	ld	r30, X+
    18a4:	fc 91       	ld	r31, X
    18a6:	13 97       	sbiw	r26, 0x03	; 3
    18a8:	02 80       	ldd	r0, Z+2	; 0x02
    18aa:	f3 81       	ldd	r31, Z+3	; 0x03
    18ac:	e0 2d       	mov	r30, r0
    18ae:	c7 01       	movw	r24, r14
    18b0:	09 95       	icall
			break;
		default :
			break;
	}
	return 0;
}
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
    18ba:	1f 91       	pop	r17
    18bc:	0f 91       	pop	r16
    18be:	ff 90       	pop	r15
    18c0:	ef 90       	pop	r14
    18c2:	08 95       	ret

000018c4 <init_timeoutq>:
>>>>>>> refs/remotes/origin/master

/*************************************************************************//**
  @brief Init function of scheduler, which initialize all events and put them into freelist
*****************************************************************************/
void init_timeoutq()
{
<<<<<<< HEAD
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
	int i;

	timeoutq = (struct event *)&TQ;
    1130:	ea ee       	ldi	r30, 0xEA	; 234
    1132:	fb e0       	ldi	r31, 0x0B	; 11
    1134:	f0 93 ef 0b 	sts	0x0BEF, r31
    1138:	e0 93 ee 0b 	sts	0x0BEE, r30
	LL_INIT(timeoutq);
    113c:	f3 83       	std	Z+3, r31	; 0x03
    113e:	e2 83       	std	Z+2, r30	; 0x02
    1140:	f1 83       	std	Z+1, r31	; 0x01
    1142:	e0 83       	st	Z, r30
	freelist = (struct event *)&FL;
    1144:	e2 e4       	ldi	r30, 0x42	; 66
    1146:	fc e0       	ldi	r31, 0x0C	; 12
    1148:	f0 93 47 0c 	sts	0x0C47, r31
    114c:	e0 93 46 0c 	sts	0x0C46, r30
	LL_INIT(freelist);
    1150:	f3 83       	std	Z+3, r31	; 0x03
    1152:	e2 83       	std	Z+2, r30	; 0x02
    1154:	f1 83       	std	Z+1, r31	; 0x01
    1156:	e0 83       	st	Z, r30
    1158:	ca e3       	ldi	r28, 0x3A	; 58
    115a:	da e0       	ldi	r29, 0x0A	; 10
    115c:	0a ee       	ldi	r16, 0xEA	; 234
    115e:	1b e0       	ldi	r17, 0x0B	; 11
=======
    18c4:	0f 93       	push	r16
    18c6:	1f 93       	push	r17
    18c8:	cf 93       	push	r28
    18ca:	df 93       	push	r29
	int i;

	timeoutq = (struct event *)&TQ;
    18cc:	e5 ee       	ldi	r30, 0xE5	; 229
    18ce:	f9 e0       	ldi	r31, 0x09	; 9
    18d0:	f0 93 ea 09 	sts	0x09EA, r31
    18d4:	e0 93 e9 09 	sts	0x09E9, r30
	LL_INIT(timeoutq);
    18d8:	f0 93 e8 09 	sts	0x09E8, r31
    18dc:	e0 93 e7 09 	sts	0x09E7, r30
    18e0:	f1 83       	std	Z+1, r31	; 0x01
    18e2:	e0 83       	st	Z, r30
	freelist = (struct event *)&FL;
    18e4:	ef ee       	ldi	r30, 0xEF	; 239
    18e6:	f9 e0       	ldi	r31, 0x09	; 9
    18e8:	f0 93 f4 09 	sts	0x09F4, r31
    18ec:	e0 93 f3 09 	sts	0x09F3, r30
	LL_INIT(freelist);
    18f0:	f0 93 f2 09 	sts	0x09F2, r31
    18f4:	e0 93 f1 09 	sts	0x09F1, r30
    18f8:	f1 83       	std	Z+1, r31	; 0x01
    18fa:	e0 83       	st	Z, r30
    18fc:	c5 e9       	ldi	r28, 0x95	; 149
    18fe:	d8 e0       	ldi	r29, 0x08	; 8
    1900:	05 ee       	ldi	r16, 0xE5	; 229
    1902:	19 e0       	ldi	r17, 0x09	; 9
>>>>>>> refs/remotes/origin/master

	for (i=0; i<MAX_EVENTS; i++) {
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
<<<<<<< HEAD
    1160:	be 01       	movw	r22, r28
    1162:	80 91 46 0c 	lds	r24, 0x0C46
    1166:	90 91 47 0c 	lds	r25, 0x0C47
    116a:	62 d2       	rcall	.+1220   	; 0x1630 <ll_r_insert>
    116c:	6b 96       	adiw	r28, 0x1b	; 27
=======
    1904:	be 01       	movw	r22, r28
    1906:	80 91 f3 09 	lds	r24, 0x09F3
    190a:	90 91 f4 09 	lds	r25, 0x09F4
    190e:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <ll_r_insert>
    1912:	65 96       	adiw	r28, 0x15	; 21
>>>>>>> refs/remotes/origin/master
	timeoutq = (struct event *)&TQ;
	LL_INIT(timeoutq);
	freelist = (struct event *)&FL;
	LL_INIT(freelist);

	for (i=0; i<MAX_EVENTS; i++) {
<<<<<<< HEAD
    116e:	c0 17       	cp	r28, r16
    1170:	d1 07       	cpc	r29, r17
    1172:	b1 f7       	brne	.-20     	; 0x1160 <init_timeoutq+0x38>
=======
    1914:	c0 17       	cp	r28, r16
    1916:	d1 07       	cpc	r29, r17
    1918:	a9 f7       	brne	.-22     	; 0x1904 <init_timeoutq+0x40>
>>>>>>> refs/remotes/origin/master
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
	}

	return;
}
<<<<<<< HEAD
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	08 95       	ret

0000117e <next_event_time_collapse>:

/*************************************************************************//**
  @brief Update next event's timeout value when we set timer for it.
*****************************************************************************/
void next_event_time_collapse(int32_t sleep_time)
{
    117e:	cf 92       	push	r12
    1180:	df 92       	push	r13
    1182:	ef 92       	push	r14
    1184:	ff 92       	push	r15
    1186:	6b 01       	movw	r12, r22
    1188:	7c 01       	movw	r14, r24
	struct event * ev = ( struct event * ) LL_TOP( timeoutq );
    118a:	80 91 ee 0b 	lds	r24, 0x0BEE
    118e:	90 91 ef 0b 	lds	r25, 0x0BEF
    1192:	45 d2       	rcall	.+1162   	; 0x161e <ll_first>
	if( EV_NULL == ev )
    1194:	00 97       	sbiw	r24, 0x00	; 0
    1196:	69 f0       	breq	.+26     	; 0x11b2 <next_event_time_collapse+0x34>
		return;
	ev->timeout -= sleep_time;
    1198:	fc 01       	movw	r30, r24
    119a:	44 81       	ldd	r20, Z+4	; 0x04
    119c:	55 81       	ldd	r21, Z+5	; 0x05
    119e:	66 81       	ldd	r22, Z+6	; 0x06
    11a0:	77 81       	ldd	r23, Z+7	; 0x07
    11a2:	4c 19       	sub	r20, r12
    11a4:	5d 09       	sbc	r21, r13
    11a6:	6e 09       	sbc	r22, r14
    11a8:	7f 09       	sbc	r23, r15
    11aa:	44 83       	std	Z+4, r20	; 0x04
    11ac:	55 83       	std	Z+5, r21	; 0x05
    11ae:	66 83       	std	Z+6, r22	; 0x06
    11b0:	77 83       	std	Z+7, r23	; 0x07
}
    11b2:	ff 90       	pop	r15
    11b4:	ef 90       	pop	r14
    11b6:	df 90       	pop	r13
    11b8:	cf 90       	pop	r12
    11ba:	08 95       	ret

000011bc <get_next_interval>:
=======
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	1f 91       	pop	r17
    1920:	0f 91       	pop	r16
    1922:	08 95       	ret

00001924 <get_next_interval>:
>>>>>>> refs/remotes/origin/master
*****************************************************************************/
int32_t get_next_interval()
{

	int32_t wait_time = MAX_SLEEP_INTERVAL;
	struct event * ev = ( struct event * ) LL_TOP( timeoutq );
<<<<<<< HEAD
    11bc:	80 91 ee 0b 	lds	r24, 0x0BEE
    11c0:	90 91 ef 0b 	lds	r25, 0x0BEF
    11c4:	2c d2       	rcall	.+1112   	; 0x161e <ll_first>
=======
    1924:	80 91 e9 09 	lds	r24, 0x09E9
    1928:	90 91 ea 09 	lds	r25, 0x09EA
    192c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <ll_first>
    1930:	fc 01       	movw	r30, r24
>>>>>>> refs/remotes/origin/master

	/* sanity check */
    /* no event in queue */
    /* TODO : to optimize the sleep time or let the CPU sleep or set up some other interrupts */
	if( EV_NULL == ev )
<<<<<<< HEAD
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	69 f4       	brne	.+26     	; 0x11e4 <get_next_interval+0x28>
	{
#ifdef DEBUG
		printf("we may get some memory leakage issue, or something really bad occurs\n");
    11ca:	82 ea       	ldi	r24, 0xA2	; 162
    11cc:	93 e0       	ldi	r25, 0x03	; 3
    11ce:	0e 94 27 21 	call	0x424e	; 0x424e <puts>
		printf("so we are going to take some really sleep, since no event in scheduler\n");
    11d2:	87 ee       	ldi	r24, 0xE7	; 231
    11d4:	93 e0       	ldi	r25, 0x03	; 3
    11d6:	0e 94 27 21 	call	0x424e	; 0x424e <puts>
#endif
	    return wait_time;
    11da:	60 e4       	ldi	r22, 0x40	; 64
    11dc:	7f e1       	ldi	r23, 0x1F	; 31
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	08 95       	ret
=======
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	59 f4       	brne	.+22     	; 0x194c <get_next_interval+0x28>
	{
#ifdef DEBUG
		printf("we may get some memory leakage issue, or something really bad occurs\n");
    1936:	81 e3       	ldi	r24, 0x31	; 49
    1938:	93 e0       	ldi	r25, 0x03	; 3
    193a:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
		printf("so we are going to take some really sleep, since no event in scheduler\n");
    193e:	86 e7       	ldi	r24, 0x76	; 118
    1940:	93 e0       	ldi	r25, 0x03	; 3
    1942:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
#endif
	    return wait_time;
    1946:	80 e4       	ldi	r24, 0x40	; 64
    1948:	9f e1       	ldi	r25, 0x1F	; 31
    194a:	08 95       	ret
>>>>>>> refs/remotes/origin/master
	}
	
	/* if the next event is nearer */
	if( wait_time > ev->timeout )
<<<<<<< HEAD
    11e4:	fc 01       	movw	r30, r24
    11e6:	64 81       	ldd	r22, Z+4	; 0x04
    11e8:	75 81       	ldd	r23, Z+5	; 0x05
    11ea:	86 81       	ldd	r24, Z+6	; 0x06
    11ec:	97 81       	ldd	r25, Z+7	; 0x07
    11ee:	60 34       	cpi	r22, 0x40	; 64
    11f0:	ff e1       	ldi	r31, 0x1F	; 31
    11f2:	7f 07       	cpc	r23, r31
    11f4:	81 05       	cpc	r24, r1
    11f6:	91 05       	cpc	r25, r1
    11f8:	24 f0       	brlt	.+8      	; 0x1202 <get_next_interval+0x46>
=======
    194c:	84 81       	ldd	r24, Z+4	; 0x04
    194e:	95 81       	ldd	r25, Z+5	; 0x05
    1950:	80 34       	cpi	r24, 0x40	; 64
    1952:	2f e1       	ldi	r18, 0x1F	; 31
    1954:	92 07       	cpc	r25, r18
    1956:	34 f0       	brlt	.+12     	; 0x1964 <get_next_interval+0x40>
		wait_time = ev->timeout;
	}
	/* if the next event time is longer, we need to wait it time by time, since currently, the longest waiting time support is 8s */
	else
	{
		ev->timeout = ev->timeout - wait_time;
    1958:	80 54       	subi	r24, 0x40	; 64
    195a:	9f 41       	sbci	r25, 0x1F	; 31
    195c:	95 83       	std	Z+5, r25	; 0x05
    195e:	84 83       	std	Z+4, r24	; 0x04
>>>>>>> refs/remotes/origin/master
  @brief Return the the time ( ms ) of the next event
*****************************************************************************/
int32_t get_next_interval()
{

<<<<<<< HEAD
	int32_t wait_time = MAX_SLEEP_INTERVAL;
    11fa:	60 e4       	ldi	r22, 0x40	; 64
    11fc:	7f e1       	ldi	r23, 0x1F	; 31
    11fe:	80 e0       	ldi	r24, 0x00	; 0
    1200:	90 e0       	ldi	r25, 0x00	; 0
=======
	int wait_time = MAX_SLEEP_INTERVAL;
    1960:	80 e4       	ldi	r24, 0x40	; 64
    1962:	9f e1       	ldi	r25, 0x1F	; 31
	else
>>>>>>> refs/remotes/origin/master
	{
		wait_time = ev->timeout;
	}
	/* if the next event time is longer, we need to wait it time by time in handle_timeoutq_event() function, since currently, the longest waiting time support is 8s */
	return wait_time;
}
<<<<<<< HEAD
    1202:	08 95       	ret

00001204 <insert_timeoutq_event>:
=======
    1964:	08 95       	ret

00001966 <insert_timeoutq_event>:
>>>>>>> refs/remotes/origin/master

/*************************************************************************//**
  @brief Insert a new event into the scheduler according to timeout order
*****************************************************************************/
void insert_timeoutq_event( struct event * ep)
{
<<<<<<< HEAD
    1204:	0f 93       	push	r16
    1206:	1f 93       	push	r17
    1208:	cf 93       	push	r28
    120a:	df 93       	push	r29
    120c:	dc 01       	movw	r26, r24
=======
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29
    196a:	dc 01       	movw	r26, r24
>>>>>>> refs/remotes/origin/master
	// Try to insert it according to timeout and timeoutq
	struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
<<<<<<< HEAD
    120e:	c0 91 ee 0b 	lds	r28, 0x0BEE
    1212:	d0 91 ef 0b 	lds	r29, 0x0BEF
    1216:	ea 81       	ldd	r30, Y+2	; 0x02
    1218:	fb 81       	ldd	r31, Y+3	; 0x03
    121a:	ce 17       	cp	r28, r30
    121c:	df 07       	cpc	r29, r31
    121e:	71 f1       	breq	.+92     	; 0x127c <insert_timeoutq_event+0x78>
	{
		if( it != EV_NULL )
    1220:	30 97       	sbiw	r30, 0x00	; 0
    1222:	31 f1       	breq	.+76     	; 0x1270 <insert_timeoutq_event+0x6c>
		{
			if( ( it->timeout ) > ( ep->timeout ) )
    1224:	04 81       	ldd	r16, Z+4	; 0x04
    1226:	15 81       	ldd	r17, Z+5	; 0x05
    1228:	26 81       	ldd	r18, Z+6	; 0x06
    122a:	37 81       	ldd	r19, Z+7	; 0x07
    122c:	14 96       	adiw	r26, 0x04	; 4
    122e:	4d 91       	ld	r20, X+
    1230:	5d 91       	ld	r21, X+
    1232:	6d 91       	ld	r22, X+
    1234:	7c 91       	ld	r23, X
    1236:	17 97       	sbiw	r26, 0x07	; 7
    1238:	40 17       	cp	r20, r16
    123a:	51 07       	cpc	r21, r17
    123c:	62 07       	cpc	r22, r18
    123e:	73 07       	cpc	r23, r19
    1240:	6c f4       	brge	.+26     	; 0x125c <insert_timeoutq_event+0x58>
			{
				it->timeout -= ep->timeout;
    1242:	04 1b       	sub	r16, r20
    1244:	15 0b       	sbc	r17, r21
    1246:	26 0b       	sbc	r18, r22
    1248:	37 0b       	sbc	r19, r23
    124a:	04 83       	std	Z+4, r16	; 0x04
    124c:	15 83       	std	Z+5, r17	; 0x05
    124e:	26 83       	std	Z+6, r18	; 0x06
    1250:	37 83       	std	Z+7, r19	; 0x07
				LL_L_INSERT( it, ep );
    1252:	bd 01       	movw	r22, r26
    1254:	80 81       	ld	r24, Z
    1256:	91 81       	ldd	r25, Z+1	; 0x01
    1258:	eb d1       	rcall	.+982    	; 0x1630 <ll_r_insert>
    125a:	18 c0       	rjmp	.+48     	; 0x128c <insert_timeoutq_event+0x88>
=======
    196c:	c0 91 e9 09 	lds	r28, 0x09E9
    1970:	d0 91 ea 09 	lds	r29, 0x09EA
    1974:	ea 81       	ldd	r30, Y+2	; 0x02
    1976:	fb 81       	ldd	r31, Y+3	; 0x03
    1978:	ce 17       	cp	r28, r30
    197a:	df 07       	cpc	r29, r31
    197c:	09 f1       	breq	.+66     	; 0x19c0 <insert_timeoutq_event+0x5a>
	{
		if( it != EV_NULL )
    197e:	30 97       	sbiw	r30, 0x00	; 0
    1980:	c9 f0       	breq	.+50     	; 0x19b4 <insert_timeoutq_event+0x4e>
		{
			if( ( it->timeout ) > ( ep->timeout ) )
    1982:	44 81       	ldd	r20, Z+4	; 0x04
    1984:	55 81       	ldd	r21, Z+5	; 0x05
    1986:	14 96       	adiw	r26, 0x04	; 4
    1988:	2d 91       	ld	r18, X+
    198a:	3c 91       	ld	r19, X
    198c:	15 97       	sbiw	r26, 0x05	; 5
    198e:	24 17       	cp	r18, r20
    1990:	35 07       	cpc	r19, r21
    1992:	54 f4       	brge	.+20     	; 0x19a8 <insert_timeoutq_event+0x42>
			{
				it->timeout -= ep->timeout;
    1994:	42 1b       	sub	r20, r18
    1996:	53 0b       	sbc	r21, r19
    1998:	55 83       	std	Z+5, r21	; 0x05
    199a:	44 83       	std	Z+4, r20	; 0x04
				LL_L_INSERT( it, ep );
    199c:	bd 01       	movw	r22, r26
    199e:	80 81       	ld	r24, Z
    19a0:	91 81       	ldd	r25, Z+1	; 0x01
    19a2:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <ll_r_insert>
    19a6:	15 c0       	rjmp	.+42     	; 0x19d2 <insert_timeoutq_event+0x6c>
>>>>>>> refs/remotes/origin/master
				// printf("left insert \n");
				break;
			}
			else
			{
				ep->timeout -= it->timeout;
<<<<<<< HEAD
    125c:	40 1b       	sub	r20, r16
    125e:	51 0b       	sbc	r21, r17
    1260:	62 0b       	sbc	r22, r18
    1262:	73 0b       	sbc	r23, r19
    1264:	14 96       	adiw	r26, 0x04	; 4
    1266:	4d 93       	st	X+, r20
    1268:	5d 93       	st	X+, r21
    126a:	6d 93       	st	X+, r22
    126c:	7c 93       	st	X, r23
    126e:	17 97       	sbiw	r26, 0x07	; 7
=======
    19a8:	24 1b       	sub	r18, r20
    19aa:	35 0b       	sbc	r19, r21
    19ac:	15 96       	adiw	r26, 0x05	; 5
    19ae:	3c 93       	st	X, r19
    19b0:	2e 93       	st	-X, r18
    19b2:	14 97       	sbiw	r26, 0x04	; 4
>>>>>>> refs/remotes/origin/master
	// Try to insert it according to timeout and timeoutq
	struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
<<<<<<< HEAD
    1270:	02 80       	ldd	r0, Z+2	; 0x02
    1272:	f3 81       	ldd	r31, Z+3	; 0x03
    1274:	e0 2d       	mov	r30, r0
    1276:	ce 17       	cp	r28, r30
    1278:	df 07       	cpc	r29, r31
    127a:	91 f6       	brne	.-92     	; 0x1220 <insert_timeoutq_event+0x1c>
=======
    19b4:	02 80       	ldd	r0, Z+2	; 0x02
    19b6:	f3 81       	ldd	r31, Z+3	; 0x03
    19b8:	e0 2d       	mov	r30, r0
    19ba:	ce 17       	cp	r28, r30
    19bc:	df 07       	cpc	r29, r31
    19be:	f9 f6       	brne	.-66     	; 0x197e <insert_timeoutq_event+0x18>
>>>>>>> refs/remotes/origin/master
	}
	
	// If not insert it left to the header
	if( is_pushed == 0 )
	{
		LL_APPEND(timeoutq, ep);
<<<<<<< HEAD
    127c:	e0 91 ee 0b 	lds	r30, 0x0BEE
    1280:	f0 91 ef 0b 	lds	r31, 0x0BEF
    1284:	bd 01       	movw	r22, r26
    1286:	80 81       	ld	r24, Z
    1288:	91 81       	ldd	r25, Z+1	; 0x01
    128a:	d2 d1       	rcall	.+932    	; 0x1630 <ll_r_insert>
=======
    19c0:	e0 91 e9 09 	lds	r30, 0x09E9
    19c4:	f0 91 ea 09 	lds	r31, 0x09EA
    19c8:	bd 01       	movw	r22, r26
    19ca:	80 81       	ld	r24, Z
    19cc:	91 81       	ldd	r25, Z+1	; 0x01
    19ce:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <ll_r_insert>
>>>>>>> refs/remotes/origin/master

	#ifdef DEBUG
	// dump_timeoutq();
	#endif

}
<<<<<<< HEAD
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	08 95       	ret

00001296 <load_new_sensor>:
=======
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	08 95       	ret

000019d8 <load_new_sensor>:
>>>>>>> refs/remotes/origin/master

/*************************************************************************//**
  @brief Load a brand new sensor activity into the scheduler's timeoutQ
*****************************************************************************/
int load_new_sensor( int32_t timeout, int32_t repeat, BaseSensor *device_ptr, int otherinfo )
{
<<<<<<< HEAD
    1296:	4f 92       	push	r4
    1298:	5f 92       	push	r5
    129a:	6f 92       	push	r6
    129c:	7f 92       	push	r7
    129e:	8f 92       	push	r8
    12a0:	9f 92       	push	r9
    12a2:	af 92       	push	r10
    12a4:	bf 92       	push	r11
    12a6:	ef 92       	push	r14
    12a8:	ff 92       	push	r15
    12aa:	0f 93       	push	r16
    12ac:	1f 93       	push	r17
    12ae:	2b 01       	movw	r4, r22
    12b0:	3c 01       	movw	r6, r24
    12b2:	49 01       	movw	r8, r18
    12b4:	5a 01       	movw	r10, r20

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    12b6:	80 91 46 0c 	lds	r24, 0x0C46
    12ba:	90 91 47 0c 	lds	r25, 0x0C47
    12be:	ee d1       	rcall	.+988    	; 0x169c <ll_pop>
    12c0:	fc 01       	movw	r30, r24
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
    12c2:	89 2b       	or	r24, r25
    12c4:	d9 f0       	breq	.+54     	; 0x12fc <load_new_sensor+0x66>
        return -1;
    ep->timeout = timeout;
    12c6:	44 82       	std	Z+4, r4	; 0x04
    12c8:	55 82       	std	Z+5, r5	; 0x05
    12ca:	66 82       	std	Z+6, r6	; 0x06
    12cc:	77 82       	std	Z+7, r7	; 0x07
    ep->repeat_interval = repeat;
    12ce:	80 86       	std	Z+8, r8	; 0x08
    12d0:	91 86       	std	Z+9, r9	; 0x09
    12d2:	a2 86       	std	Z+10, r10	; 0x0a
    12d4:	b3 86       	std	Z+11, r11	; 0x0b
	ep->borrow_timeout = 0;
    12d6:	14 86       	std	Z+12, r1	; 0x0c
    12d8:	15 86       	std	Z+13, r1	; 0x0d
    12da:	16 86       	std	Z+14, r1	; 0x0e
    12dc:	17 86       	std	Z+15, r1	; 0x0f
    ep->sp = device_ptr;
    12de:	11 8b       	std	Z+17, r17	; 0x11
    12e0:	00 8b       	std	Z+16, r16	; 0x10
    ep->info = otherinfo;
    12e2:	f7 8a       	std	Z+23, r15	; 0x17
    12e4:	e6 8a       	std	Z+22, r14	; 0x16
    ep->cur_state = Ready;
    12e6:	81 e0       	ldi	r24, 0x01	; 1
    12e8:	80 8f       	std	Z+24, r24	; 0x18
    ep->run = sensor_handler;
    12ea:	81 ec       	ldi	r24, 0xC1	; 193
    12ec:	97 e0       	ldi	r25, 0x07	; 7
    12ee:	92 8f       	std	Z+26, r25	; 0x1a
    12f0:	81 8f       	std	Z+25, r24	; 0x19
    insert_timeoutq_event( ep );
    12f2:	cf 01       	movw	r24, r30
    12f4:	87 df       	rcall	.-242    	; 0x1204 <insert_timeoutq_event>
    return 0;
    12f6:	80 e0       	ldi	r24, 0x00	; 0
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	02 c0       	rjmp	.+4      	; 0x1300 <load_new_sensor+0x6a>
=======
    19d8:	cf 92       	push	r12
    19da:	df 92       	push	r13
    19dc:	ef 92       	push	r14
    19de:	ff 92       	push	r15
    19e0:	0f 93       	push	r16
    19e2:	1f 93       	push	r17
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	6c 01       	movw	r12, r24
    19ea:	7b 01       	movw	r14, r22
    19ec:	8a 01       	movw	r16, r20
    19ee:	e9 01       	movw	r28, r18

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    19f0:	80 91 f3 09 	lds	r24, 0x09F3
    19f4:	90 91 f4 09 	lds	r25, 0x09F4
    19f8:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <ll_pop>
    19fc:	fc 01       	movw	r30, r24
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
    19fe:	00 97       	sbiw	r24, 0x00	; 0
    1a00:	b1 f0       	breq	.+44     	; 0x1a2e <load_new_sensor+0x56>
        return -1;
    ep->timeout = timeout;
    1a02:	d5 82       	std	Z+5, r13	; 0x05
    1a04:	c4 82       	std	Z+4, r12	; 0x04
    ep->repeat_interval = repeat;
    1a06:	f7 82       	std	Z+7, r15	; 0x07
    1a08:	e6 82       	std	Z+6, r14	; 0x06
	ep->borrow_timeout = 0;
    1a0a:	11 86       	std	Z+9, r1	; 0x09
    1a0c:	10 86       	std	Z+8, r1	; 0x08
    ep->sp = device_ptr;
    1a0e:	13 87       	std	Z+11, r17	; 0x0b
    1a10:	02 87       	std	Z+10, r16	; 0x0a
    ep->info = otherinfo;
    1a12:	d1 8b       	std	Z+17, r29	; 0x11
    1a14:	c0 8b       	std	Z+16, r28	; 0x10
    ep->cur_state = Ready;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	82 8b       	std	Z+18, r24	; 0x12
    ep->run = sensor_handler;
    1a1a:	81 e8       	ldi	r24, 0x81	; 129
    1a1c:	9b e0       	ldi	r25, 0x0B	; 11
    1a1e:	94 8b       	std	Z+20, r25	; 0x14
    1a20:	83 8b       	std	Z+19, r24	; 0x13
    insert_timeoutq_event( ep );
    1a22:	cf 01       	movw	r24, r30
    1a24:	0e 94 b3 0c 	call	0x1966	; 0x1966 <insert_timeoutq_event>
    return 0;
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <load_new_sensor+0x5a>
>>>>>>> refs/remotes/origin/master

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
        return -1;
<<<<<<< HEAD
    12fc:	8f ef       	ldi	r24, 0xFF	; 255
    12fe:	9f ef       	ldi	r25, 0xFF	; 255
=======
    1a2e:	8f ef       	ldi	r24, 0xFF	; 255
    1a30:	9f ef       	ldi	r25, 0xFF	; 255
>>>>>>> refs/remotes/origin/master
    ep->info = otherinfo;
    ep->cur_state = Ready;
    ep->run = sensor_handler;
    insert_timeoutq_event( ep );
    return 0;
}
<<<<<<< HEAD
    1300:	1f 91       	pop	r17
    1302:	0f 91       	pop	r16
    1304:	ff 90       	pop	r15
    1306:	ef 90       	pop	r14
    1308:	bf 90       	pop	r11
    130a:	af 90       	pop	r10
    130c:	9f 90       	pop	r9
    130e:	8f 90       	pop	r8
    1310:	7f 90       	pop	r7
    1312:	6f 90       	pop	r6
    1314:	5f 90       	pop	r5
    1316:	4f 90       	pop	r4
    1318:	08 95       	ret

0000131a <load_new_device>:
=======
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	ff 90       	pop	r15
    1a3c:	ef 90       	pop	r14
    1a3e:	df 90       	pop	r13
    1a40:	cf 90       	pop	r12
    1a42:	08 95       	ret

00001a44 <load_new_device>:
>>>>>>> refs/remotes/origin/master

/*************************************************************************//**
  @brief Load a brand new device activity into the scheduler's timeoutQ
*****************************************************************************/
<<<<<<< HEAD
int load_new_device( int32_t timeout, int32_t repeat, BaseDevice *device_ptr, int otherinfo )
{
    131a:	4f 92       	push	r4
    131c:	5f 92       	push	r5
    131e:	6f 92       	push	r6
    1320:	7f 92       	push	r7
    1322:	8f 92       	push	r8
    1324:	9f 92       	push	r9
    1326:	af 92       	push	r10
    1328:	bf 92       	push	r11
    132a:	ef 92       	push	r14
    132c:	ff 92       	push	r15
    132e:	0f 93       	push	r16
    1330:	1f 93       	push	r17
    1332:	2b 01       	movw	r4, r22
    1334:	3c 01       	movw	r6, r24
    1336:	49 01       	movw	r8, r18
    1338:	5a 01       	movw	r10, r20

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    133a:	80 91 46 0c 	lds	r24, 0x0C46
    133e:	90 91 47 0c 	lds	r25, 0x0C47
    1342:	ac d1       	rcall	.+856    	; 0x169c <ll_pop>
    1344:	fc 01       	movw	r30, r24
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
    1346:	89 2b       	or	r24, r25
    1348:	e9 f0       	breq	.+58     	; 0x1384 <load_new_device+0x6a>
        return -1;
    ep->timeout = timeout;
    134a:	44 82       	std	Z+4, r4	; 0x04
    134c:	55 82       	std	Z+5, r5	; 0x05
    134e:	66 82       	std	Z+6, r6	; 0x06
    1350:	77 82       	std	Z+7, r7	; 0x07
    ep->repeat_interval = repeat;
    1352:	80 86       	std	Z+8, r8	; 0x08
    1354:	91 86       	std	Z+9, r9	; 0x09
    1356:	a2 86       	std	Z+10, r10	; 0x0a
    1358:	b3 86       	std	Z+11, r11	; 0x0b
	ep->borrow_timeout = 0;
    135a:	14 86       	std	Z+12, r1	; 0x0c
    135c:	15 86       	std	Z+13, r1	; 0x0d
    135e:	16 86       	std	Z+14, r1	; 0x0e
    1360:	17 86       	std	Z+15, r1	; 0x0f
    ep->load_p = device_ptr;
    1362:	13 8b       	std	Z+19, r17	; 0x13
    1364:	02 8b       	std	Z+18, r16	; 0x12
	ep->store_p = device_ptr;
    1366:	15 8b       	std	Z+21, r17	; 0x15
    1368:	04 8b       	std	Z+20, r16	; 0x14
    ep->info = otherinfo;
    136a:	f7 8a       	std	Z+23, r15	; 0x17
    136c:	e6 8a       	std	Z+22, r14	; 0x16
    ep->cur_state = Ready;
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	80 8f       	std	Z+24, r24	; 0x18
    ep->run = device_handler;
    1372:	88 e4       	ldi	r24, 0x48	; 72
    1374:	98 e0       	ldi	r25, 0x08	; 8
    1376:	92 8f       	std	Z+26, r25	; 0x1a
    1378:	81 8f       	std	Z+25, r24	; 0x19
    insert_timeoutq_event( ep );
    137a:	cf 01       	movw	r24, r30
    137c:	43 df       	rcall	.-378    	; 0x1204 <insert_timeoutq_event>
    return 0;
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0
    1382:	02 c0       	rjmp	.+4      	; 0x1388 <load_new_device+0x6e>
=======
int load_new_device( int timeout, int repeat, BaseDevice *device_ptr, int otherinfo )
{
    1a44:	cf 92       	push	r12
    1a46:	df 92       	push	r13
    1a48:	ef 92       	push	r14
    1a4a:	ff 92       	push	r15
    1a4c:	0f 93       	push	r16
    1a4e:	1f 93       	push	r17
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	6c 01       	movw	r12, r24
    1a56:	7b 01       	movw	r14, r22
    1a58:	ea 01       	movw	r28, r20
    1a5a:	89 01       	movw	r16, r18

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    1a5c:	80 91 f3 09 	lds	r24, 0x09F3
    1a60:	90 91 f4 09 	lds	r25, 0x09F4
    1a64:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <ll_pop>
    1a68:	fc 01       	movw	r30, r24
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	d1 f0       	breq	.+52     	; 0x1aa2 <load_new_device+0x5e>
        return -1;
    ep->timeout = timeout;
    1a6e:	d5 82       	std	Z+5, r13	; 0x05
    1a70:	c4 82       	std	Z+4, r12	; 0x04
    ep->repeat_interval = repeat;
    1a72:	f7 82       	std	Z+7, r15	; 0x07
    1a74:	e6 82       	std	Z+6, r14	; 0x06
	ep->borrow_timeout = 0;
    1a76:	11 86       	std	Z+9, r1	; 0x09
    1a78:	10 86       	std	Z+8, r1	; 0x08
    ep->sp = device_ptr;
    1a7a:	d3 87       	std	Z+11, r29	; 0x0b
    1a7c:	c2 87       	std	Z+10, r28	; 0x0a
	ep->load_p = device_ptr;
    1a7e:	d5 87       	std	Z+13, r29	; 0x0d
    1a80:	c4 87       	std	Z+12, r28	; 0x0c
	ep->store_p = device_ptr;
    1a82:	d7 87       	std	Z+15, r29	; 0x0f
    1a84:	c6 87       	std	Z+14, r28	; 0x0e
    ep->info = otherinfo;
    1a86:	11 8b       	std	Z+17, r17	; 0x11
    1a88:	00 8b       	std	Z+16, r16	; 0x10
    ep->cur_state = Ready;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	82 8b       	std	Z+18, r24	; 0x12
    ep->run = device_handler;
    1a8e:	81 e1       	ldi	r24, 0x11	; 17
    1a90:	9c e0       	ldi	r25, 0x0C	; 12
    1a92:	94 8b       	std	Z+20, r25	; 0x14
    1a94:	83 8b       	std	Z+19, r24	; 0x13
    insert_timeoutq_event( ep );
    1a96:	cf 01       	movw	r24, r30
    1a98:	0e 94 b3 0c 	call	0x1966	; 0x1966 <insert_timeoutq_event>
    return 0;
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <load_new_device+0x62>
>>>>>>> refs/remotes/origin/master

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
        return -1;
<<<<<<< HEAD
    1384:	8f ef       	ldi	r24, 0xFF	; 255
    1386:	9f ef       	ldi	r25, 0xFF	; 255
=======
    1aa2:	8f ef       	ldi	r24, 0xFF	; 255
    1aa4:	9f ef       	ldi	r25, 0xFF	; 255
>>>>>>> refs/remotes/origin/master
    ep->info = otherinfo;
    ep->cur_state = Ready;
    ep->run = device_handler;
    insert_timeoutq_event( ep );
    return 0;
}
<<<<<<< HEAD
    1388:	1f 91       	pop	r17
    138a:	0f 91       	pop	r16
    138c:	ff 90       	pop	r15
    138e:	ef 90       	pop	r14
    1390:	bf 90       	pop	r11
    1392:	af 90       	pop	r10
    1394:	9f 90       	pop	r9
    1396:	8f 90       	pop	r8
    1398:	7f 90       	pop	r7
    139a:	6f 90       	pop	r6
    139c:	5f 90       	pop	r5
    139e:	4f 90       	pop	r4
    13a0:	08 95       	ret

000013a2 <handle_timeoutq_event>:
=======
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	1f 91       	pop	r17
    1aac:	0f 91       	pop	r16
    1aae:	ff 90       	pop	r15
    1ab0:	ef 90       	pop	r14
    1ab2:	df 90       	pop	r13
    1ab4:	cf 90       	pop	r12
    1ab6:	08 95       	ret

00001ab8 <handle_timeoutq_event>:
>>>>>>> refs/remotes/origin/master

/*************************************************************************//**
  @brief Handle the next event in timeoutQ: execute the event's handler function according to the device type, re-insert it according to the period, and set a timer of next event.
*****************************************************************************/
int handle_timeoutq_event( )
{
<<<<<<< HEAD
    13a2:	cf 92       	push	r12
    13a4:	df 92       	push	r13
    13a6:	ef 92       	push	r14
    13a8:	ff 92       	push	r15
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
	int retNum, sleep_time;
	/* assume we get a valid one */
	struct event * ev = (struct event * )LL_TOP( timeoutq );
    13b2:	80 91 ee 0b 	lds	r24, 0x0BEE
    13b6:	90 91 ef 0b 	lds	r25, 0x0BEF
    13ba:	31 d1       	rcall	.+610    	; 0x161e <ll_first>
    13bc:	ec 01       	movw	r28, r24
	if( EV_NULL == ev )
    13be:	89 2b       	or	r24, r25
    13c0:	39 f4       	brne	.+14     	; 0x13d0 <handle_timeoutq_event+0x2e>
	{
		printf("err\n");
    13c2:	8e e2       	ldi	r24, 0x2E	; 46
    13c4:	94 e0       	ldi	r25, 0x04	; 4
    13c6:	0e 94 27 21 	call	0x424e	; 0x424e <puts>
=======
    1ab8:	cf 93       	push	r28
    1aba:	df 93       	push	r29
	/* assume we get a valid one */
	struct event * ev = (struct event * )LL_TOP( timeoutq );
    1abc:	80 91 e9 09 	lds	r24, 0x09E9
    1ac0:	90 91 ea 09 	lds	r25, 0x09EA
    1ac4:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <ll_first>
    1ac8:	ec 01       	movw	r28, r24
	if( EV_NULL == ev )
    1aca:	00 97       	sbiw	r24, 0x00	; 0
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <handle_timeoutq_event+0x18>
    1ace:	4c c0       	rjmp	.+152    	; 0x1b68 <handle_timeoutq_event+0xb0>
>>>>>>> refs/remotes/origin/master
        return -1;
    13ca:	8f ef       	ldi	r24, 0xFF	; 255
    13cc:	9f ef       	ldi	r25, 0xFF	; 255
    13ce:	8b c0       	rjmp	.+278    	; 0x14e6 <handle_timeoutq_event+0x144>
	}
    
    /* sanity check */
<<<<<<< HEAD
    if( ev->sp == NULL && ev->load_p == NULL && ev->store_p == NULL)
    13d0:	88 89       	ldd	r24, Y+16	; 0x10
    13d2:	99 89       	ldd	r25, Y+17	; 0x11
    13d4:	89 2b       	or	r24, r25
    13d6:	49 f4       	brne	.+18     	; 0x13ea <handle_timeoutq_event+0x48>
    13d8:	8a 89       	ldd	r24, Y+18	; 0x12
    13da:	9b 89       	ldd	r25, Y+19	; 0x13
    13dc:	89 2b       	or	r24, r25
    13de:	29 f4       	brne	.+10     	; 0x13ea <handle_timeoutq_event+0x48>
    13e0:	8c 89       	ldd	r24, Y+20	; 0x14
    13e2:	9d 89       	ldd	r25, Y+21	; 0x15
    13e4:	89 2b       	or	r24, r25
    13e6:	09 f4       	brne	.+2      	; 0x13ea <handle_timeoutq_event+0x48>
    13e8:	7c c0       	rjmp	.+248    	; 0x14e2 <handle_timeoutq_event+0x140>
=======
    if( ev->sp == NULL )
    1ad0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ad2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ad4:	89 2b       	or	r24, r25
    1ad6:	09 f4       	brne	.+2      	; 0x1ada <handle_timeoutq_event+0x22>
    1ad8:	4a c0       	rjmp	.+148    	; 0x1b6e <handle_timeoutq_event+0xb6>
>>>>>>> refs/remotes/origin/master
        return -1;

	/* if it is not the right time, re-set the timer */
	if( ev->timeout != 0 )
    13ea:	8c 81       	ldd	r24, Y+4	; 0x04
    13ec:	9d 81       	ldd	r25, Y+5	; 0x05
    13ee:	ae 81       	ldd	r26, Y+6	; 0x06
    13f0:	bf 81       	ldd	r27, Y+7	; 0x07
    13f2:	89 2b       	or	r24, r25
    13f4:	8a 2b       	or	r24, r26
    13f6:	8b 2b       	or	r24, r27
    13f8:	71 f0       	breq	.+28     	; 0x1416 <handle_timeoutq_event+0x74>
	{
		sleep_time = get_next_interval();
    13fa:	e0 de       	rcall	.-576    	; 0x11bc <get_next_interval>
		next_event_time_collapse(sleep_time);
    13fc:	6b 01       	movw	r12, r22
    13fe:	77 0f       	add	r23, r23
    1400:	ee 08       	sbc	r14, r14
    1402:	ff 08       	sbc	r15, r15
    1404:	c7 01       	movw	r24, r14
    1406:	b6 01       	movw	r22, r12
    1408:	ba de       	rcall	.-652    	; 0x117e <next_event_time_collapse>
		set_timer(sleep_time);
    140a:	c7 01       	movw	r24, r14
    140c:	b6 01       	movw	r22, r12
    140e:	cb da       	rcall	.-2666   	; 0x9a6 <set_timer>
		return 0;
    1410:	80 e0       	ldi	r24, 0x00	; 0
    1412:	90 e0       	ldi	r25, 0x00	; 0
    1414:	68 c0       	rjmp	.+208    	; 0x14e6 <handle_timeoutq_event+0x144>
	}
	
	/* retNum may need to be designed in other ways */
<<<<<<< HEAD
    retNum = ev->run( ev );
    1416:	e9 8d       	ldd	r30, Y+25	; 0x19
    1418:	fa 8d       	ldd	r31, Y+26	; 0x1a
    141a:	ce 01       	movw	r24, r28
    141c:	19 95       	eicall
=======
    int retNum = ev->run( ev );
    1ada:	eb 89       	ldd	r30, Y+19	; 0x13
    1adc:	fc 89       	ldd	r31, Y+20	; 0x14
    1ade:	ce 01       	movw	r24, r28
    1ae0:	09 95       	icall
>>>>>>> refs/remotes/origin/master
	/* 
	 * return 1 if it has to with some borrow time( have a request-time!=0 case ) 
	 * which means the event has already entered the scheduler, 
	 * and won't need to do anything else
	 */
	if( retNum == 1 )
<<<<<<< HEAD
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	a9 f4       	brne	.+42     	; 0x144c <handle_timeoutq_event+0xaa>
=======
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	69 f4       	brne	.+26     	; 0x1b00 <handle_timeoutq_event+0x48>
>>>>>>> refs/remotes/origin/master
	{
		sleep_time = get_next_interval();
    1422:	cc de       	rcall	.-616    	; 0x11bc <get_next_interval>
		/* judge if the next top in queue has a timeout <= 0, which we may want to handle it right now */
<<<<<<< HEAD
		if( sleep_time == 0 )
    1424:	61 15       	cp	r22, r1
    1426:	71 05       	cpc	r23, r1
    1428:	21 f4       	brne	.+8      	; 0x1432 <handle_timeoutq_event+0x90>
		{
			handle_timeoutq_event();
    142a:	bb df       	rcall	.-138    	; 0x13a2 <handle_timeoutq_event>
			return 0;
    142c:	80 e0       	ldi	r24, 0x00	; 0
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	5a c0       	rjmp	.+180    	; 0x14e6 <handle_timeoutq_event+0x144>
		}
		next_event_time_collapse(sleep_time);	
    1432:	6b 01       	movw	r12, r22
    1434:	77 0f       	add	r23, r23
    1436:	ee 08       	sbc	r14, r14
    1438:	ff 08       	sbc	r15, r15
    143a:	c7 01       	movw	r24, r14
    143c:	b6 01       	movw	r22, r12
    143e:	9f de       	rcall	.-706    	; 0x117e <next_event_time_collapse>
		set_timer(sleep_time);
    1440:	c7 01       	movw	r24, r14
    1442:	b6 01       	movw	r22, r12
    1444:	b0 da       	rcall	.-2720   	; 0x9a6 <set_timer>
		return 0;
    1446:	80 e0       	ldi	r24, 0x00	; 0
    1448:	90 e0       	ldi	r25, 0x00	; 0
    144a:	4d c0       	rjmp	.+154    	; 0x14e6 <handle_timeoutq_event+0x144>
=======
		if( get_next_interval() == 0 )
    1ae6:	0e 94 92 0c 	call	0x1924	; 0x1924 <get_next_interval>
    1aea:	89 2b       	or	r24, r25
    1aec:	11 f4       	brne	.+4      	; 0x1af2 <handle_timeoutq_event+0x3a>
			handle_timeoutq_event();
    1aee:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <handle_timeoutq_event>
			
		set_timer(get_next_interval());
    1af2:	0e 94 92 0c 	call	0x1924	; 0x1924 <get_next_interval>
    1af6:	0e 94 72 08 	call	0x10e4	; 0x10e4 <set_timer>
		return 0;
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	39 c0       	rjmp	.+114    	; 0x1b72 <handle_timeoutq_event+0xba>
>>>>>>> refs/remotes/origin/master
    /*
	 * return 0 means we just fired a case, 
	 * and may need to judge it over the repeat time to re-insert into the scheduler,
	 * since we definitely want to collect data periodically
	 */
    LL_POP( timeoutq );
<<<<<<< HEAD
    144c:	80 91 ee 0b 	lds	r24, 0x0BEE
    1450:	90 91 ef 0b 	lds	r25, 0x0BEF
    1454:	23 d1       	rcall	.+582    	; 0x169c <ll_pop>
    if( ev->repeat_interval != 0 )
    1456:	88 85       	ldd	r24, Y+8	; 0x08
    1458:	99 85       	ldd	r25, Y+9	; 0x09
    145a:	aa 85       	ldd	r26, Y+10	; 0x0a
    145c:	bb 85       	ldd	r27, Y+11	; 0x0b
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	a1 05       	cpc	r26, r1
    1462:	b1 05       	cpc	r27, r1
    1464:	19 f1       	breq	.+70     	; 0x14ac <handle_timeoutq_event+0x10a>
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
    1466:	4c 85       	ldd	r20, Y+12	; 0x0c
    1468:	5d 85       	ldd	r21, Y+13	; 0x0d
    146a:	6e 85       	ldd	r22, Y+14	; 0x0e
    146c:	7f 85       	ldd	r23, Y+15	; 0x0f
    146e:	8c 01       	movw	r16, r24
    1470:	9d 01       	movw	r18, r26
    1472:	04 1b       	sub	r16, r20
    1474:	15 0b       	sbc	r17, r21
    1476:	26 0b       	sbc	r18, r22
    1478:	37 0b       	sbc	r19, r23
    147a:	b9 01       	movw	r22, r18
    147c:	a8 01       	movw	r20, r16
    147e:	0c 83       	std	Y+4, r16	; 0x04
    1480:	1d 83       	std	Y+5, r17	; 0x05
    1482:	2e 83       	std	Y+6, r18	; 0x06
    1484:	3f 83       	std	Y+7, r19	; 0x07
		while( ev->timeout < 0 )
    1486:	33 23       	and	r19, r19
    1488:	54 f4       	brge	.+20     	; 0x149e <handle_timeoutq_event+0xfc>
		{
			ev->timeout += ev->repeat_interval;
    148a:	48 0f       	add	r20, r24
    148c:	59 1f       	adc	r21, r25
    148e:	6a 1f       	adc	r22, r26
    1490:	7b 1f       	adc	r23, r27
=======
    1b00:	80 91 e9 09 	lds	r24, 0x09E9
    1b04:	90 91 ea 09 	lds	r25, 0x09EA
    1b08:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <ll_pop>
    if( ev->repeat_interval != 0 )
    1b0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	b1 f0       	breq	.+44     	; 0x1b40 <handle_timeoutq_event+0x88>
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
    1b14:	28 85       	ldd	r18, Y+8	; 0x08
    1b16:	39 85       	ldd	r19, Y+9	; 0x09
    1b18:	ac 01       	movw	r20, r24
    1b1a:	42 1b       	sub	r20, r18
    1b1c:	53 0b       	sbc	r21, r19
    1b1e:	9a 01       	movw	r18, r20
    1b20:	5d 83       	std	Y+5, r21	; 0x05
    1b22:	4c 83       	std	Y+4, r20	; 0x04
		while( ev->timeout < 0 )
    1b24:	55 23       	and	r21, r21
    1b26:	34 f4       	brge	.+12     	; 0x1b34 <handle_timeoutq_event+0x7c>
		{
			ev->timeout += ev->repeat_interval;
    1b28:	28 0f       	add	r18, r24
    1b2a:	39 1f       	adc	r19, r25
>>>>>>> refs/remotes/origin/master
	 */
    LL_POP( timeoutq );
    if( ev->repeat_interval != 0 )
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
		while( ev->timeout < 0 )
<<<<<<< HEAD
    1492:	77 23       	and	r23, r23
    1494:	d4 f3       	brlt	.-12     	; 0x148a <handle_timeoutq_event+0xe8>
    1496:	4c 83       	std	Y+4, r20	; 0x04
    1498:	5d 83       	std	Y+5, r21	; 0x05
    149a:	6e 83       	std	Y+6, r22	; 0x06
    149c:	7f 83       	std	Y+7, r23	; 0x07
=======
    1b2c:	33 23       	and	r19, r19
    1b2e:	e4 f3       	brlt	.-8      	; 0x1b28 <handle_timeoutq_event+0x70>
    1b30:	3d 83       	std	Y+5, r19	; 0x05
    1b32:	2c 83       	std	Y+4, r18	; 0x04
>>>>>>> refs/remotes/origin/master
		{
			ev->timeout += ev->repeat_interval;
		}
		ev->borrow_timeout = 0;
<<<<<<< HEAD
    149e:	1c 86       	std	Y+12, r1	; 0x0c
    14a0:	1d 86       	std	Y+13, r1	; 0x0d
    14a2:	1e 86       	std	Y+14, r1	; 0x0e
    14a4:	1f 86       	std	Y+15, r1	; 0x0f
        insert_timeoutq_event( ev );
    14a6:	ce 01       	movw	r24, r28
    14a8:	ad de       	rcall	.-678    	; 0x1204 <insert_timeoutq_event>
    14aa:	06 c0       	rjmp	.+12     	; 0x14b8 <handle_timeoutq_event+0x116>
=======
    1b34:	19 86       	std	Y+9, r1	; 0x09
    1b36:	18 86       	std	Y+8, r1	; 0x08
        insert_timeoutq_event( ev );
    1b38:	ce 01       	movw	r24, r28
    1b3a:	0e 94 b3 0c 	call	0x1966	; 0x1966 <insert_timeoutq_event>
    1b3e:	07 c0       	rjmp	.+14     	; 0x1b4e <handle_timeoutq_event+0x96>
>>>>>>> refs/remotes/origin/master
    }
    else
    {
        LL_PUSH( freelist, ev );
<<<<<<< HEAD
    14ac:	be 01       	movw	r22, r28
    14ae:	80 91 46 0c 	lds	r24, 0x0C46
    14b2:	90 91 47 0c 	lds	r25, 0x0C47
    14b6:	bc d0       	rcall	.+376    	; 0x1630 <ll_r_insert>
=======
    1b40:	be 01       	movw	r22, r28
    1b42:	80 91 f3 09 	lds	r24, 0x09F3
    1b46:	90 91 f4 09 	lds	r25, 0x09F4
    1b4a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <ll_r_insert>
>>>>>>> refs/remotes/origin/master
    }

	sleep_time = get_next_interval();
    14b8:	81 de       	rcall	.-766    	; 0x11bc <get_next_interval>
	/* judge if the next top in queue has a timeout <= 0, which we may want to handle it right now */
<<<<<<< HEAD
	if( sleep_time == 0 )
    14ba:	61 15       	cp	r22, r1
    14bc:	71 05       	cpc	r23, r1
    14be:	21 f4       	brne	.+8      	; 0x14c8 <handle_timeoutq_event+0x126>
	{
		handle_timeoutq_event();
    14c0:	70 df       	rcall	.-288    	; 0x13a2 <handle_timeoutq_event>
		return 0;
    14c2:	80 e0       	ldi	r24, 0x00	; 0
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	0f c0       	rjmp	.+30     	; 0x14e6 <handle_timeoutq_event+0x144>
	}
	next_event_time_collapse(sleep_time);	
    14c8:	6b 01       	movw	r12, r22
    14ca:	77 0f       	add	r23, r23
    14cc:	ee 08       	sbc	r14, r14
    14ce:	ff 08       	sbc	r15, r15
    14d0:	c7 01       	movw	r24, r14
    14d2:	b6 01       	movw	r22, r12
    14d4:	54 de       	rcall	.-856    	; 0x117e <next_event_time_collapse>
	set_timer(sleep_time);
    14d6:	c7 01       	movw	r24, r14
    14d8:	b6 01       	movw	r22, r12
    14da:	65 da       	rcall	.-2870   	; 0x9a6 <set_timer>
    return 0;
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	02 c0       	rjmp	.+4      	; 0x14e6 <handle_timeoutq_event+0x144>
        return -1;
	}
=======
	if( get_next_interval() == 0 )
    1b4e:	0e 94 92 0c 	call	0x1924	; 0x1924 <get_next_interval>
    1b52:	89 2b       	or	r24, r25
    1b54:	11 f4       	brne	.+4      	; 0x1b5a <handle_timeoutq_event+0xa2>
		handle_timeoutq_event();
    1b56:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <handle_timeoutq_event>
		
	set_timer(get_next_interval());
    1b5a:	0e 94 92 0c 	call	0x1924	; 0x1924 <get_next_interval>
    1b5e:	0e 94 72 08 	call	0x10e4	; 0x10e4 <set_timer>
    return 0;
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	05 c0       	rjmp	.+10     	; 0x1b72 <handle_timeoutq_event+0xba>
int handle_timeoutq_event( )
{
	/* assume we get a valid one */
	struct event * ev = (struct event * )LL_TOP( timeoutq );
	if( EV_NULL == ev )
        return -1;
    1b68:	8f ef       	ldi	r24, 0xFF	; 255
    1b6a:	9f ef       	ldi	r25, 0xFF	; 255
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <handle_timeoutq_event+0xba>
>>>>>>> refs/remotes/origin/master
    
    /* sanity check */
    if( ev->sp == NULL && ev->load_p == NULL && ev->store_p == NULL)
        return -1;
<<<<<<< HEAD
    14e2:	8f ef       	ldi	r24, 0xFF	; 255
    14e4:	9f ef       	ldi	r25, 0xFF	; 255
		return 0;
	}
	next_event_time_collapse(sleep_time);	
	set_timer(sleep_time);
    return 0;
}
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	1f 91       	pop	r17
    14ec:	0f 91       	pop	r16
    14ee:	ff 90       	pop	r15
    14f0:	ef 90       	pop	r14
    14f2:	df 90       	pop	r13
    14f4:	cf 90       	pop	r12
    14f6:	08 95       	ret

000014f8 <SYS_Init>:
=======
    1b6e:	8f ef       	ldi	r24, 0xFF	; 255
    1b70:	9f ef       	ldi	r25, 0xFF	; 255
	if( get_next_interval() == 0 )
		handle_timeoutq_event();
		
	set_timer(get_next_interval());
    return 0;
}
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	08 95       	ret

00001b78 <SYS_Init>:
>>>>>>> refs/remotes/origin/master

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
<<<<<<< HEAD
    14f8:	a5 db       	rcall	.-2230   	; 0xc44 <HAL_Init>
  SYS_TimerInit();
    14fa:	67 d0       	rcall	.+206    	; 0x15ca <SYS_TimerInit>
  PHY_Init();
    14fc:	2b dd       	rcall	.-1450   	; 0xf54 <PHY_Init>
  NWK_Init();
    14fe:	dc cb       	rjmp	.-2120   	; 0xcb8 <NWK_Init>
    1500:	08 95       	ret

00001502 <placeTimer>:

      break;
    }
    prev = t;
  }
=======
    1b78:	0e 94 bc 09 	call	0x1378	; 0x1378 <HAL_Init>
  SYS_TimerInit();
    1b7c:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <SYS_TimerInit>
  PHY_Init();
    1b80:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <PHY_Init>
  NWK_Init();
    1b84:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <NWK_Init>
    1b88:	08 95       	ret

00001b8a <placeTimer>:
>>>>>>> refs/remotes/origin/master
}
    1502:	0f 93       	push	r16
    1504:	1f 93       	push	r17
    1506:	cf 93       	push	r28
    1508:	df 93       	push	r29
    150a:	ec 01       	movw	r28, r24
    150c:	80 91 e5 09 	lds	r24, 0x09E5
    1510:	90 91 e6 09 	lds	r25, 0x09E6
    1514:	00 97       	sbiw	r24, 0x00	; 0
    1516:	09 f4       	brne	.+2      	; 0x151a <placeTimer+0x18>
    1518:	45 c0       	rjmp	.+138    	; 0x15a4 <placeTimer+0xa2>
    151a:	4e 81       	ldd	r20, Y+6	; 0x06
    151c:	5f 81       	ldd	r21, Y+7	; 0x07
    151e:	68 85       	ldd	r22, Y+8	; 0x08
    1520:	79 85       	ldd	r23, Y+9	; 0x09
    1522:	fc 01       	movw	r30, r24
    1524:	02 81       	ldd	r16, Z+2	; 0x02
    1526:	13 81       	ldd	r17, Z+3	; 0x03
    1528:	24 81       	ldd	r18, Z+4	; 0x04
    152a:	35 81       	ldd	r19, Z+5	; 0x05
    152c:	40 17       	cp	r20, r16
    152e:	51 07       	cpc	r21, r17
    1530:	62 07       	cpc	r22, r18
    1532:	73 07       	cpc	r23, r19
    1534:	60 f0       	brcs	.+24     	; 0x154e <placeTimer+0x4c>
    1536:	dc 01       	movw	r26, r24
    1538:	17 c0       	rjmp	.+46     	; 0x1568 <placeTimer+0x66>
    153a:	02 81       	ldd	r16, Z+2	; 0x02
    153c:	13 81       	ldd	r17, Z+3	; 0x03
    153e:	24 81       	ldd	r18, Z+4	; 0x04
    1540:	35 81       	ldd	r19, Z+5	; 0x05
    1542:	40 17       	cp	r20, r16
    1544:	51 07       	cpc	r21, r17
    1546:	62 07       	cpc	r22, r18
    1548:	73 07       	cpc	r23, r19
    154a:	68 f4       	brcc	.+26     	; 0x1566 <placeTimer+0x64>
    154c:	03 c0       	rjmp	.+6      	; 0x1554 <placeTimer+0x52>
    154e:	fc 01       	movw	r30, r24
    1550:	a0 e0       	ldi	r26, 0x00	; 0
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	04 1b       	sub	r16, r20
    1556:	15 0b       	sbc	r17, r21
    1558:	26 0b       	sbc	r18, r22
    155a:	37 0b       	sbc	r19, r23
    155c:	02 83       	std	Z+2, r16	; 0x02
    155e:	13 83       	std	Z+3, r17	; 0x03
    1560:	24 83       	std	Z+4, r18	; 0x04
    1562:	35 83       	std	Z+5, r19	; 0x05
    1564:	0a c0       	rjmp	.+20     	; 0x157a <placeTimer+0x78>
    1566:	df 01       	movw	r26, r30
    1568:	40 1b       	sub	r20, r16
    156a:	51 0b       	sbc	r21, r17
    156c:	62 0b       	sbc	r22, r18
    156e:	73 0b       	sbc	r23, r19
    1570:	ed 91       	ld	r30, X+
    1572:	fc 91       	ld	r31, X
    1574:	11 97       	sbiw	r26, 0x01	; 1
    1576:	30 97       	sbiw	r30, 0x00	; 0
    1578:	01 f7       	brne	.-64     	; 0x153a <placeTimer+0x38>
    157a:	4a 83       	std	Y+2, r20	; 0x02
    157c:	5b 83       	std	Y+3, r21	; 0x03
    157e:	6c 83       	std	Y+4, r22	; 0x04
    1580:	7d 83       	std	Y+5, r23	; 0x05
    1582:	10 97       	sbiw	r26, 0x00	; 0
    1584:	41 f0       	breq	.+16     	; 0x1596 <placeTimer+0x94>
    1586:	8d 91       	ld	r24, X+
    1588:	9c 91       	ld	r25, X
    158a:	11 97       	sbiw	r26, 0x01	; 1
    158c:	99 83       	std	Y+1, r25	; 0x01
    158e:	88 83       	st	Y, r24
    1590:	cd 93       	st	X+, r28
    1592:	dc 93       	st	X, r29
    1594:	15 c0       	rjmp	.+42     	; 0x15c0 <placeTimer+0xbe>
    1596:	99 83       	std	Y+1, r25	; 0x01
    1598:	88 83       	st	Y, r24
    159a:	d0 93 e6 09 	sts	0x09E6, r29
    159e:	c0 93 e5 09 	sts	0x09E5, r28
    15a2:	0e c0       	rjmp	.+28     	; 0x15c0 <placeTimer+0xbe>
    15a4:	19 82       	std	Y+1, r1	; 0x01
    15a6:	18 82       	st	Y, r1
    15a8:	8e 81       	ldd	r24, Y+6	; 0x06
    15aa:	9f 81       	ldd	r25, Y+7	; 0x07
    15ac:	a8 85       	ldd	r26, Y+8	; 0x08
    15ae:	b9 85       	ldd	r27, Y+9	; 0x09
    15b0:	8a 83       	std	Y+2, r24	; 0x02
    15b2:	9b 83       	std	Y+3, r25	; 0x03
    15b4:	ac 83       	std	Y+4, r26	; 0x04
    15b6:	bd 83       	std	Y+5, r27	; 0x05
    15b8:	d0 93 e6 09 	sts	0x09E6, r29
    15bc:	c0 93 e5 09 	sts	0x09E5, r28
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	1f 91       	pop	r17
    15c6:	0f 91       	pop	r16
    15c8:	08 95       	ret

000015ca <SYS_TimerInit>:
    15ca:	10 92 e6 09 	sts	0x09E6, r1
    15ce:	10 92 e5 09 	sts	0x09E5, r1
    15d2:	08 95       	ret

000015d4 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
<<<<<<< HEAD
  for (SYS_Timer_t *t = timers; t; t = t->next)
    15d4:	e0 91 e5 09 	lds	r30, 0x09E5
    15d8:	f0 91 e6 09 	lds	r31, 0x09E6
    15dc:	30 97       	sbiw	r30, 0x00	; 0
    15de:	71 f0       	breq	.+28     	; 0x15fc <SYS_TimerStarted+0x28>
    if (t == timer)
    15e0:	e8 17       	cp	r30, r24
    15e2:	f9 07       	cpc	r31, r25
    15e4:	21 f4       	brne	.+8      	; 0x15ee <SYS_TimerStarted+0x1a>
    15e6:	0c c0       	rjmp	.+24     	; 0x1600 <SYS_TimerStarted+0x2c>
    15e8:	8e 17       	cp	r24, r30
    15ea:	9f 07       	cpc	r25, r31
    15ec:	59 f0       	breq	.+22     	; 0x1604 <SYS_TimerStarted+0x30>

/*************************************************************************//**
=======
    1b8a:	0f 93       	push	r16
    1b8c:	1f 93       	push	r17
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	ec 01       	movw	r28, r24
  if (timers)
    1b94:	80 91 93 08 	lds	r24, 0x0893
    1b98:	90 91 94 08 	lds	r25, 0x0894
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <placeTimer+0x18>
    1ba0:	45 c0       	rjmp	.+138    	; 0x1c2c <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    1ba2:	4e 81       	ldd	r20, Y+6	; 0x06
    1ba4:	5f 81       	ldd	r21, Y+7	; 0x07
    1ba6:	68 85       	ldd	r22, Y+8	; 0x08
    1ba8:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    1baa:	fc 01       	movw	r30, r24
    1bac:	02 81       	ldd	r16, Z+2	; 0x02
    1bae:	13 81       	ldd	r17, Z+3	; 0x03
    1bb0:	24 81       	ldd	r18, Z+4	; 0x04
    1bb2:	35 81       	ldd	r19, Z+5	; 0x05
    1bb4:	40 17       	cp	r20, r16
    1bb6:	51 07       	cpc	r21, r17
    1bb8:	62 07       	cpc	r22, r18
    1bba:	73 07       	cpc	r23, r19
    1bbc:	c0 f4       	brcc	.+48     	; 0x1bee <placeTimer+0x64>
    1bbe:	0b c0       	rjmp	.+22     	; 0x1bd6 <placeTimer+0x4c>
    1bc0:	02 81       	ldd	r16, Z+2	; 0x02
    1bc2:	13 81       	ldd	r17, Z+3	; 0x03
    1bc4:	24 81       	ldd	r18, Z+4	; 0x04
    1bc6:	35 81       	ldd	r19, Z+5	; 0x05
    1bc8:	40 17       	cp	r20, r16
    1bca:	51 07       	cpc	r21, r17
    1bcc:	62 07       	cpc	r22, r18
    1bce:	73 07       	cpc	r23, r19
    1bd0:	28 f0       	brcs	.+10     	; 0x1bdc <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1bd2:	df 01       	movw	r26, r30
    1bd4:	0d c0       	rjmp	.+26     	; 0x1bf0 <placeTimer+0x66>
    1bd6:	fc 01       	movw	r30, r24
>>>>>>> refs/remotes/origin/master
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
<<<<<<< HEAD
  for (SYS_Timer_t *t = timers; t; t = t->next)
    15ee:	01 90       	ld	r0, Z+
    15f0:	f0 81       	ld	r31, Z
    15f2:	e0 2d       	mov	r30, r0
    15f4:	30 97       	sbiw	r30, 0x00	; 0
    15f6:	c1 f7       	brne	.-16     	; 0x15e8 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    15f8:	80 e0       	ldi	r24, 0x00	; 0
    15fa:	08 95       	ret
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	08 95       	ret
    1604:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    1606:	08 95       	ret

00001608 <SYS_TimerStart>:
}
=======
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    1bd8:	a0 e0       	ldi	r26, 0x00	; 0
    1bda:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    1bdc:	04 1b       	sub	r16, r20
    1bde:	15 0b       	sbc	r17, r21
    1be0:	26 0b       	sbc	r18, r22
    1be2:	37 0b       	sbc	r19, r23
    1be4:	02 83       	std	Z+2, r16	; 0x02
    1be6:	13 83       	std	Z+3, r17	; 0x03
    1be8:	24 83       	std	Z+4, r18	; 0x04
    1bea:	35 83       	std	Z+5, r19	; 0x05
         break;
    1bec:	0a c0       	rjmp	.+20     	; 0x1c02 <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1bee:	dc 01       	movw	r26, r24
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    1bf0:	40 1b       	sub	r20, r16
    1bf2:	51 0b       	sbc	r21, r17
    1bf4:	62 0b       	sbc	r22, r18
    1bf6:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1bf8:	ed 91       	ld	r30, X+
    1bfa:	fc 91       	ld	r31, X
    1bfc:	11 97       	sbiw	r26, 0x01	; 1
    1bfe:	30 97       	sbiw	r30, 0x00	; 0
    1c00:	f9 f6       	brne	.-66     	; 0x1bc0 <placeTimer+0x36>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    1c02:	4a 83       	std	Y+2, r20	; 0x02
    1c04:	5b 83       	std	Y+3, r21	; 0x03
    1c06:	6c 83       	std	Y+4, r22	; 0x04
    1c08:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    1c0a:	10 97       	sbiw	r26, 0x00	; 0
    1c0c:	41 f0       	breq	.+16     	; 0x1c1e <placeTimer+0x94>
    {
      timer->next = prev->next;
    1c0e:	8d 91       	ld	r24, X+
    1c10:	9c 91       	ld	r25, X
    1c12:	11 97       	sbiw	r26, 0x01	; 1
    1c14:	99 83       	std	Y+1, r25	; 0x01
    1c16:	88 83       	st	Y, r24
      prev->next = timer;
    1c18:	cd 93       	st	X+, r28
    1c1a:	dc 93       	st	X, r29
    1c1c:	15 c0       	rjmp	.+42     	; 0x1c48 <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    1c1e:	99 83       	std	Y+1, r25	; 0x01
    1c20:	88 83       	st	Y, r24
      timers = timer;
    1c22:	d0 93 94 08 	sts	0x0894, r29
    1c26:	c0 93 93 08 	sts	0x0893, r28
    1c2a:	0e c0       	rjmp	.+28     	; 0x1c48 <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    1c2c:	19 82       	std	Y+1, r1	; 0x01
    1c2e:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    1c30:	8e 81       	ldd	r24, Y+6	; 0x06
    1c32:	9f 81       	ldd	r25, Y+7	; 0x07
    1c34:	a8 85       	ldd	r26, Y+8	; 0x08
    1c36:	b9 85       	ldd	r27, Y+9	; 0x09
    1c38:	8a 83       	std	Y+2, r24	; 0x02
    1c3a:	9b 83       	std	Y+3, r25	; 0x03
    1c3c:	ac 83       	std	Y+4, r26	; 0x04
    1c3e:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    1c40:	d0 93 94 08 	sts	0x0894, r29
    1c44:	c0 93 93 08 	sts	0x0893, r28
  }
}
    1c48:	df 91       	pop	r29
    1c4a:	cf 91       	pop	r28
    1c4c:	1f 91       	pop	r17
    1c4e:	0f 91       	pop	r16
    1c50:	08 95       	ret

00001c52 <SYS_TimerInit>:
>>>>>>> refs/remotes/origin/master

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
<<<<<<< HEAD
    1608:	cf 93       	push	r28
    160a:	df 93       	push	r29
    160c:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    160e:	e2 df       	rcall	.-60     	; 0x15d4 <SYS_TimerStarted>
    1610:	81 11       	cpse	r24, r1
    1612:	02 c0       	rjmp	.+4      	; 0x1618 <SYS_TimerStart+0x10>
    placeTimer(timer);
    1614:	ce 01       	movw	r24, r28
    1616:	75 df       	rcall	.-278    	; 0x1502 <placeTimer>
}
    1618:	df 91       	pop	r29
    161a:	cf 91       	pop	r28
    161c:	08 95       	ret

0000161e <ll_first>:
 * lp is list pointer
 */
llobject_t *
ll_first(lp)
llobject_t *lp;
{
    161e:	fc 01       	movw	r30, r24
    if (LL_IS_EMPTY(lp)) {
    1620:	82 81       	ldd	r24, Z+2	; 0x02
    1622:	93 81       	ldd	r25, Z+3	; 0x03
    1624:	8e 17       	cp	r24, r30
    1626:	9f 07       	cpc	r25, r31
    1628:	11 f4       	brne	.+4      	; 0x162e <ll_first+0x10>
		return LL_NULL;
    162a:	80 e0       	ldi	r24, 0x00	; 0
    162c:	90 e0       	ldi	r25, 0x00	; 0
    }
    return lp->next;
}
    162e:	08 95       	ret

00001630 <ll_r_insert>:
llobject_t *
ll_r_insert(ip, ep)
llobject_t *ip;
llobject_t *ep;
{
    llobject_t *tp = ip->next;
    1630:	dc 01       	movw	r26, r24
    1632:	12 96       	adiw	r26, 0x02	; 2
    1634:	ed 91       	ld	r30, X+
    1636:	fc 91       	ld	r31, X
    1638:	13 97       	sbiw	r26, 0x03	; 3

    tp->prev = ep;
    163a:	71 83       	std	Z+1, r23	; 0x01
    163c:	60 83       	st	Z, r22
    ep->next = tp;
    163e:	db 01       	movw	r26, r22
    1640:	13 96       	adiw	r26, 0x03	; 3
    1642:	fc 93       	st	X, r31
    1644:	ee 93       	st	-X, r30
    1646:	12 97       	sbiw	r26, 0x02	; 2
    ip->next = ep;
    1648:	fc 01       	movw	r30, r24
    164a:	73 83       	std	Z+3, r23	; 0x03
    164c:	62 83       	std	Z+2, r22	; 0x02
    ep->prev = ip;
    164e:	8d 93       	st	X+, r24
    1650:	9c 93       	st	X, r25

    return ep;
}
    1652:	cb 01       	movw	r24, r22
    1654:	08 95       	ret

00001656 <ll_detach>:
 */
llobject_t *
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    1656:	fb 01       	movw	r30, r22
    if (LL_IS_EMPTY(lp) || lp == ep) {
    1658:	dc 01       	movw	r26, r24
    165a:	12 96       	adiw	r26, 0x02	; 2
    165c:	2d 91       	ld	r18, X+
    165e:	3c 91       	ld	r19, X
    1660:	13 97       	sbiw	r26, 0x03	; 3
    1662:	28 17       	cp	r18, r24
    1664:	39 07       	cpc	r19, r25
    1666:	a1 f0       	breq	.+40     	; 0x1690 <ll_detach+0x3a>
    1668:	86 17       	cp	r24, r22
    166a:	97 07       	cpc	r25, r23
    166c:	a1 f0       	breq	.+40     	; 0x1696 <ll_detach+0x40>
		return LL_NULL;
    }

    (ep->prev)->next = ep->next;
    166e:	a0 81       	ld	r26, Z
    1670:	b1 81       	ldd	r27, Z+1	; 0x01
    1672:	82 81       	ldd	r24, Z+2	; 0x02
    1674:	93 81       	ldd	r25, Z+3	; 0x03
    1676:	13 96       	adiw	r26, 0x03	; 3
    1678:	9c 93       	st	X, r25
    167a:	8e 93       	st	-X, r24
    167c:	12 97       	sbiw	r26, 0x02	; 2
    (ep->next)->prev = ep->prev;
    167e:	a2 81       	ldd	r26, Z+2	; 0x02
    1680:	b3 81       	ldd	r27, Z+3	; 0x03
    1682:	80 81       	ld	r24, Z
    1684:	91 81       	ldd	r25, Z+1	; 0x01
    1686:	8d 93       	st	X+, r24
    1688:	9c 93       	st	X, r25

    return ep;
    168a:	86 2f       	mov	r24, r22
    168c:	9f 2f       	mov	r25, r31
    168e:	08 95       	ret
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    if (LL_IS_EMPTY(lp) || lp == ep) {
		return LL_NULL;
    1690:	80 e0       	ldi	r24, 0x00	; 0
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	08 95       	ret
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	90 e0       	ldi	r25, 0x00	; 0

    (ep->prev)->next = ep->next;
    (ep->next)->prev = ep->prev;

    return ep;
}
    169a:	08 95       	ret

0000169c <ll_pop>:
 */
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
    169c:	fc 01       	movw	r30, r24
    169e:	62 81       	ldd	r22, Z+2	; 0x02
    16a0:	73 81       	ldd	r23, Z+3	; 0x03
    16a2:	68 17       	cp	r22, r24
    16a4:	79 07       	cpc	r23, r25
    16a6:	11 f0       	breq	.+4      	; 0x16ac <ll_pop+0x10>
		return LL_NULL;
    }
    return LL_DETACH(lp, lp->next);
    16a8:	d6 cf       	rjmp	.-84     	; 0x1656 <ll_detach>
    16aa:	08 95       	ret
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
		return LL_NULL;
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    }
    return LL_DETACH(lp, lp->next);
}
    16b0:	08 95       	ret

000016b2 <calcDate>:
	tm_ptr->unix_time = calibrate_sec;
	tm_ptr->unix_msec = 500; // to minimize error
}

void calcDate(tm *tm_ptr)
{
    16b2:	2f 92       	push	r2
    16b4:	3f 92       	push	r3
    16b6:	4f 92       	push	r4
    16b8:	5f 92       	push	r5
    16ba:	6f 92       	push	r6
    16bc:	7f 92       	push	r7
    16be:	8f 92       	push	r8
    16c0:	9f 92       	push	r9
    16c2:	af 92       	push	r10
    16c4:	bf 92       	push	r11
    16c6:	cf 92       	push	r12
    16c8:	df 92       	push	r13
    16ca:	ef 92       	push	r14
    16cc:	ff 92       	push	r15
    16ce:	0f 93       	push	r16
    16d0:	1f 93       	push	r17
    16d2:	cf 93       	push	r28
    16d4:	df 93       	push	r29
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	62 97       	sbiw	r28, 0x12	; 18
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	cd bf       	out	0x3d, r28	; 61
    16e6:	9a 8b       	std	Y+18, r25	; 0x12
    16e8:	89 8b       	std	Y+17, r24	; 0x11
	long seconds, minutes, hours, days, year, month;
	long dayOfWeek;
	seconds = tm_ptr->unix_time;
    16ea:	dc 01       	movw	r26, r24
    16ec:	4d 90       	ld	r4, X+
    16ee:	5d 90       	ld	r5, X+
    16f0:	6d 90       	ld	r6, X+
    16f2:	7c 90       	ld	r7, X

	/* calculate minutes */
	minutes  = seconds / 60;
    16f4:	0f 2e       	mov	r0, r31
    16f6:	fc e3       	ldi	r31, 0x3C	; 60
    16f8:	8f 2e       	mov	r8, r31
    16fa:	91 2c       	mov	r9, r1
    16fc:	a1 2c       	mov	r10, r1
    16fe:	b1 2c       	mov	r11, r1
    1700:	f0 2d       	mov	r31, r0
    1702:	c3 01       	movw	r24, r6
    1704:	b2 01       	movw	r22, r4
    1706:	a5 01       	movw	r20, r10
    1708:	94 01       	movw	r18, r8
    170a:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <__divmodsi4>
    170e:	69 01       	movw	r12, r18
    1710:	7a 01       	movw	r14, r20
	seconds -= minutes * 60;
    1712:	a4 ec       	ldi	r26, 0xC4	; 196
    1714:	bf ef       	ldi	r27, 0xFF	; 255
    1716:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__mulohisi3>
    171a:	9b 01       	movw	r18, r22
    171c:	ac 01       	movw	r20, r24
    171e:	24 0d       	add	r18, r4
    1720:	35 1d       	adc	r19, r5
    1722:	46 1d       	adc	r20, r6
    1724:	57 1d       	adc	r21, r7
    1726:	29 83       	std	Y+1, r18	; 0x01
    1728:	3a 83       	std	Y+2, r19	; 0x02
    172a:	4b 83       	std	Y+3, r20	; 0x03
    172c:	5c 83       	std	Y+4, r21	; 0x04
	/* calculate hours */
	hours    = minutes / 60;
    172e:	c7 01       	movw	r24, r14
    1730:	b6 01       	movw	r22, r12
    1732:	a5 01       	movw	r20, r10
    1734:	94 01       	movw	r18, r8
    1736:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <__divmodsi4>
    173a:	49 01       	movw	r8, r18
    173c:	5a 01       	movw	r10, r20
	minutes -= hours   * 60;
    173e:	a4 ec       	ldi	r26, 0xC4	; 196
    1740:	bf ef       	ldi	r27, 0xFF	; 255
    1742:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__mulohisi3>
    1746:	9b 01       	movw	r18, r22
    1748:	ac 01       	movw	r20, r24
    174a:	2c 0d       	add	r18, r12
    174c:	3d 1d       	adc	r19, r13
    174e:	4e 1d       	adc	r20, r14
    1750:	5f 1d       	adc	r21, r15
    1752:	2d 83       	std	Y+5, r18	; 0x05
    1754:	3e 83       	std	Y+6, r19	; 0x06
    1756:	4f 83       	std	Y+7, r20	; 0x07
    1758:	58 87       	std	Y+8, r21	; 0x08
	/* calculate days */
	days     = hours   / 24;
    175a:	c5 01       	movw	r24, r10
    175c:	b4 01       	movw	r22, r8
    175e:	28 e1       	ldi	r18, 0x18	; 24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	40 e0       	ldi	r20, 0x00	; 0
    1764:	50 e0       	ldi	r21, 0x00	; 0
    1766:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <__divmodsi4>
    176a:	c2 2e       	mov	r12, r18
    176c:	d3 2e       	mov	r13, r19
    176e:	e4 2e       	mov	r14, r20
    1770:	f5 2e       	mov	r15, r21
	hours   -= days    * 24;
    1772:	a8 ee       	ldi	r26, 0xE8	; 232
    1774:	bf ef       	ldi	r27, 0xFF	; 255
    1776:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <__mulohisi3>
    177a:	9b 01       	movw	r18, r22
    177c:	ac 01       	movw	r20, r24
    177e:	28 0d       	add	r18, r8
    1780:	39 1d       	adc	r19, r9
    1782:	4a 1d       	adc	r20, r10
    1784:	5b 1d       	adc	r21, r11
    1786:	29 87       	std	Y+9, r18	; 0x09
    1788:	3a 87       	std	Y+10, r19	; 0x0a
    178a:	4b 87       	std	Y+11, r20	; 0x0b
    178c:	5c 87       	std	Y+12, r21	; 0x0c

	/* Unix time starts in 1970 on a Thursday */
	year      = 1970;
	dayOfWeek = 4;
    178e:	81 2c       	mov	r8, r1
    1790:	91 2c       	mov	r9, r1
    1792:	54 01       	movw	r10, r8
    1794:	68 94       	set
    1796:	82 f8       	bld	r8, 2
	/* calculate days */
	days     = hours   / 24;
	hours   -= days    * 24;

	/* Unix time starts in 1970 on a Thursday */
	year      = 1970;
    1798:	0f 2e       	mov	r0, r31
    179a:	f2 eb       	ldi	r31, 0xB2	; 178
    179c:	4f 2e       	mov	r4, r31
    179e:	f7 e0       	ldi	r31, 0x07	; 7
    17a0:	5f 2e       	mov	r5, r31
    17a2:	61 2c       	mov	r6, r1
    17a4:	71 2c       	mov	r7, r1
    17a6:	f0 2d       	mov	r31, r0

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    17a8:	0d e6       	ldi	r16, 0x6D	; 109
    17aa:	11 e0       	ldi	r17, 0x01	; 1
    17ac:	21 2c       	mov	r2, r1
		{
			dayOfWeek += leapYear ? 2 : 1;
    17ae:	31 2c       	mov	r3, r1
	year      = 1970;
	dayOfWeek = 4;

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
    17b0:	d3 01       	movw	r26, r6
    17b2:	c2 01       	movw	r24, r4
    17b4:	83 70       	andi	r24, 0x03	; 3
    17b6:	99 27       	eor	r25, r25
    17b8:	aa 27       	eor	r26, r26
    17ba:	bb 27       	eor	r27, r27
    17bc:	89 2b       	or	r24, r25
    17be:	8a 2b       	or	r24, r26
    17c0:	8b 2b       	or	r24, r27
    17c2:	09 f0       	breq	.+2      	; 0x17c6 <calcDate+0x114>
    17c4:	ea c0       	rjmp	.+468    	; 0x199a <calcDate+0x2e8>
    17c6:	c3 01       	movw	r24, r6
    17c8:	b2 01       	movw	r22, r4
    17ca:	24 e6       	ldi	r18, 0x64	; 100
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	40 e0       	ldi	r20, 0x00	; 0
    17d0:	50 e0       	ldi	r21, 0x00	; 0
    17d2:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <__divmodsi4>
    17d6:	67 2b       	or	r22, r23
    17d8:	68 2b       	or	r22, r24
    17da:	69 2b       	or	r22, r25
    17dc:	09 f0       	breq	.+2      	; 0x17e0 <calcDate+0x12e>
    17de:	d0 c0       	rjmp	.+416    	; 0x1980 <calcDate+0x2ce>
    17e0:	c3 01       	movw	r24, r6
    17e2:	b2 01       	movw	r22, r4
    17e4:	20 e9       	ldi	r18, 0x90	; 144
    17e6:	31 e0       	ldi	r19, 0x01	; 1
    17e8:	40 e0       	ldi	r20, 0x00	; 0
    17ea:	50 e0       	ldi	r21, 0x00	; 0
    17ec:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <__divmodsi4>
    17f0:	67 2b       	or	r22, r23
    17f2:	68 2b       	or	r22, r24
    17f4:	69 2b       	or	r22, r25
    17f6:	09 f4       	brne	.+2      	; 0x17fa <calcDate+0x148>
    17f8:	c3 c0       	rjmp	.+390    	; 0x1980 <calcDate+0x2ce>
    17fa:	cf c0       	rjmp	.+414    	; 0x199a <calcDate+0x2e8>
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    17fc:	8e e6       	ldi	r24, 0x6E	; 110
    17fe:	91 e0       	ldi	r25, 0x01	; 1
    1800:	a0 e0       	ldi	r26, 0x00	; 0
    1802:	b0 e0       	ldi	r27, 0x00	; 0
		{
			dayOfWeek += leapYear ? 2 : 1;
    1804:	42 e0       	ldi	r20, 0x02	; 2
    1806:	50 e0       	ldi	r21, 0x00	; 0
    1808:	60 e0       	ldi	r22, 0x00	; 0
    180a:	70 e0       	ldi	r23, 0x00	; 0
    180c:	08 c0       	rjmp	.+16     	; 0x181e <calcDate+0x16c>

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    180e:	80 2f       	mov	r24, r16
    1810:	91 2f       	mov	r25, r17
    1812:	a2 2d       	mov	r26, r2
    1814:	b0 e0       	ldi	r27, 0x00	; 0
		{
			dayOfWeek += leapYear ? 2 : 1;
    1816:	41 e0       	ldi	r20, 0x01	; 1
    1818:	50 e0       	ldi	r21, 0x00	; 0
    181a:	60 e0       	ldi	r22, 0x00	; 0
    181c:	73 2d       	mov	r23, r3
    181e:	84 0e       	add	r8, r20
    1820:	95 1e       	adc	r9, r21
    1822:	a6 1e       	adc	r10, r22
    1824:	b7 1e       	adc	r11, r23
			days      -= daysInYear;
    1826:	c8 1a       	sub	r12, r24
    1828:	d9 0a       	sbc	r13, r25
    182a:	ea 0a       	sbc	r14, r26
    182c:	fb 0a       	sbc	r15, r27
			if (dayOfWeek >= 7)
    182e:	57 e0       	ldi	r21, 0x07	; 7
    1830:	85 16       	cp	r8, r21
    1832:	91 04       	cpc	r9, r1
    1834:	a1 04       	cpc	r10, r1
    1836:	b1 04       	cpc	r11, r1
    1838:	2c f0       	brlt	.+10     	; 0x1844 <calcDate+0x192>
			dayOfWeek -= 7;
    183a:	87 e0       	ldi	r24, 0x07	; 7
    183c:	88 1a       	sub	r8, r24
    183e:	91 08       	sbc	r9, r1
    1840:	a1 08       	sbc	r10, r1
    1842:	b1 08       	sbc	r11, r1
			++year;
    1844:	9f ef       	ldi	r25, 0xFF	; 255
    1846:	49 1a       	sub	r4, r25
    1848:	59 0a       	sbc	r5, r25
    184a:	69 0a       	sbc	r6, r25
    184c:	79 0a       	sbc	r7, r25
				else
				break;
			}
			break;
		}
	}
    184e:	b0 cf       	rjmp	.-160    	; 0x17b0 <calcDate+0xfe>
			dayOfWeek -= 7;
			++year;
		}
		else
		{
			tm_ptr->tm_yday = days;
    1850:	e9 89       	ldd	r30, Y+17	; 0x11
    1852:	fa 89       	ldd	r31, Y+18	; 0x12
    1854:	84 a3       	std	Z+36, r24	; 0x24
    1856:	95 a3       	std	Z+37, r25	; 0x25
    1858:	a6 a3       	std	Z+38, r26	; 0x26
    185a:	b7 a3       	std	Z+39, r27	; 0x27
			dayOfWeek  += days;
    185c:	bc 01       	movw	r22, r24
    185e:	cd 01       	movw	r24, r26
    1860:	68 0d       	add	r22, r8
    1862:	79 1d       	adc	r23, r9
    1864:	8a 1d       	adc	r24, r10
    1866:	9b 1d       	adc	r25, r11
			dayOfWeek  %= 7;
    1868:	27 e0       	ldi	r18, 0x07	; 7
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	40 e0       	ldi	r20, 0x00	; 0
    186e:	50 e0       	ldi	r21, 0x00	; 0
    1870:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <__divmodsi4>
    1874:	6d 87       	std	Y+13, r22	; 0x0d
    1876:	7e 87       	std	Y+14, r23	; 0x0e
    1878:	8f 87       	std	Y+15, r24	; 0x0f
    187a:	98 8b       	std	Y+16, r25	; 0x10
    187c:	ec ea       	ldi	r30, 0xAC	; 172
    187e:	f4 e0       	ldi	r31, 0x04	; 4
    1880:	81 2c       	mov	r8, r1
    1882:	91 2c       	mov	r9, r1
    1884:	54 01       	movw	r10, r8
    1886:	83 94       	inc	r8
    1888:	40 e0       	ldi	r20, 0x00	; 0
    188a:	50 e0       	ldi	r21, 0x00	; 0
    188c:	ba 01       	movw	r22, r20
    188e:	09 c0       	rjmp	.+18     	; 0x18a2 <calcDate+0x1f0>
    1890:	4f 5f       	subi	r20, 0xFF	; 255
    1892:	5f 4f       	sbci	r21, 0xFF	; 255
    1894:	6f 4f       	sbci	r22, 0xFF	; 255
    1896:	7f 4f       	sbci	r23, 0xFF	; 255
    1898:	3f ef       	ldi	r19, 0xFF	; 255
    189a:	83 1a       	sub	r8, r19
    189c:	93 0a       	sbc	r9, r19
    189e:	a3 0a       	sbc	r10, r19
    18a0:	b3 0a       	sbc	r11, r19
    18a2:	8a 01       	movw	r16, r20
    18a4:	9b 01       	movw	r18, r22

			/* calculate the month and day */
			static const uint8_t daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
			for(month = 0; month < 12; ++month)
			{
				uint8_t dim = daysInMonth[month];
    18a6:	81 91       	ld	r24, Z+

				/* add a day to feburary if this is a leap year */
				if (month == 1 && leapYear)
    18a8:	41 30       	cpi	r20, 0x01	; 1
    18aa:	51 05       	cpc	r21, r1
    18ac:	61 05       	cpc	r22, r1
    18ae:	71 05       	cpc	r23, r1
    18b0:	29 f4       	brne	.+10     	; 0x18bc <calcDate+0x20a>
    18b2:	33 20       	and	r3, r3
    18b4:	09 f4       	brne	.+2      	; 0x18b8 <calcDate+0x206>
    18b6:	5b c0       	rjmp	.+182    	; 0x196e <calcDate+0x2bc>
				++dim;
    18b8:	8f 5f       	subi	r24, 0xFF	; 255
    18ba:	59 c0       	rjmp	.+178    	; 0x196e <calcDate+0x2bc>

				if (days >= dim)
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	a0 e0       	ldi	r26, 0x00	; 0
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	c8 16       	cp	r12, r24
    18c4:	d9 06       	cpc	r13, r25
    18c6:	ea 06       	cpc	r14, r26
    18c8:	fb 06       	cpc	r15, r27
    18ca:	6c f0       	brlt	.+26     	; 0x18e6 <calcDate+0x234>
				days -= dim;
    18cc:	c8 1a       	sub	r12, r24
    18ce:	d9 0a       	sbc	r13, r25
    18d0:	ea 0a       	sbc	r14, r26
    18d2:	fb 0a       	sbc	r15, r27
			dayOfWeek  += days;
			dayOfWeek  %= 7;

			/* calculate the month and day */
			static const uint8_t daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
			for(month = 0; month < 12; ++month)
    18d4:	95 01       	movw	r18, r10
    18d6:	84 01       	movw	r16, r8
    18d8:	8c e0       	ldi	r24, 0x0C	; 12
    18da:	88 16       	cp	r8, r24
    18dc:	91 04       	cpc	r9, r1
    18de:	a1 04       	cpc	r10, r1
    18e0:	b1 04       	cpc	r11, r1
    18e2:	b4 f2       	brlt	.-84     	; 0x1890 <calcDate+0x1de>
    18e4:	00 c0       	rjmp	.+0      	; 0x18e6 <calcDate+0x234>
			}
			break;
		}
	}

	tm_ptr->tm_sec  = seconds;
    18e6:	89 81       	ldd	r24, Y+1	; 0x01
    18e8:	9a 81       	ldd	r25, Y+2	; 0x02
    18ea:	ab 81       	ldd	r26, Y+3	; 0x03
    18ec:	bc 81       	ldd	r27, Y+4	; 0x04
    18ee:	e9 89       	ldd	r30, Y+17	; 0x11
    18f0:	fa 89       	ldd	r31, Y+18	; 0x12
    18f2:	80 87       	std	Z+8, r24	; 0x08
    18f4:	91 87       	std	Z+9, r25	; 0x09
    18f6:	a2 87       	std	Z+10, r26	; 0x0a
    18f8:	b3 87       	std	Z+11, r27	; 0x0b
	tm_ptr->tm_min  = minutes;
    18fa:	8d 81       	ldd	r24, Y+5	; 0x05
    18fc:	9e 81       	ldd	r25, Y+6	; 0x06
    18fe:	af 81       	ldd	r26, Y+7	; 0x07
    1900:	b8 85       	ldd	r27, Y+8	; 0x08
    1902:	84 87       	std	Z+12, r24	; 0x0c
    1904:	95 87       	std	Z+13, r25	; 0x0d
    1906:	a6 87       	std	Z+14, r26	; 0x0e
    1908:	b7 87       	std	Z+15, r27	; 0x0f
	tm_ptr->tm_hour = hours;
    190a:	89 85       	ldd	r24, Y+9	; 0x09
    190c:	9a 85       	ldd	r25, Y+10	; 0x0a
    190e:	ab 85       	ldd	r26, Y+11	; 0x0b
    1910:	bc 85       	ldd	r27, Y+12	; 0x0c
    1912:	80 8b       	std	Z+16, r24	; 0x10
    1914:	91 8b       	std	Z+17, r25	; 0x11
    1916:	a2 8b       	std	Z+18, r26	; 0x12
    1918:	b3 8b       	std	Z+19, r27	; 0x13
	tm_ptr->tm_mday = days + 1;
    191a:	ff ef       	ldi	r31, 0xFF	; 255
    191c:	cf 1a       	sub	r12, r31
    191e:	df 0a       	sbc	r13, r31
    1920:	ef 0a       	sbc	r14, r31
    1922:	ff 0a       	sbc	r15, r31
    1924:	a9 89       	ldd	r26, Y+17	; 0x11
    1926:	ba 89       	ldd	r27, Y+18	; 0x12
    1928:	54 96       	adiw	r26, 0x14	; 20
    192a:	cd 92       	st	X+, r12
    192c:	dd 92       	st	X+, r13
    192e:	ed 92       	st	X+, r14
    1930:	fc 92       	st	X, r15
    1932:	57 97       	sbiw	r26, 0x17	; 23
	tm_ptr->tm_mon  = month + 1;
    1934:	d9 01       	movw	r26, r18
    1936:	c8 01       	movw	r24, r16
    1938:	01 96       	adiw	r24, 0x01	; 1
    193a:	a1 1d       	adc	r26, r1
    193c:	b1 1d       	adc	r27, r1
    193e:	e9 89       	ldd	r30, Y+17	; 0x11
    1940:	fa 89       	ldd	r31, Y+18	; 0x12
    1942:	80 8f       	std	Z+24, r24	; 0x18
    1944:	91 8f       	std	Z+25, r25	; 0x19
    1946:	a2 8f       	std	Z+26, r26	; 0x1a
    1948:	b3 8f       	std	Z+27, r27	; 0x1b
	tm_ptr->tm_year = year;
    194a:	44 8e       	std	Z+28, r4	; 0x1c
    194c:	55 8e       	std	Z+29, r5	; 0x1d
    194e:	66 8e       	std	Z+30, r6	; 0x1e
    1950:	77 8e       	std	Z+31, r7	; 0x1f
	tm_ptr->tm_wday = dayOfWeek;
    1952:	2d 85       	ldd	r18, Y+13	; 0x0d
    1954:	3e 85       	ldd	r19, Y+14	; 0x0e
    1956:	4f 85       	ldd	r20, Y+15	; 0x0f
    1958:	58 89       	ldd	r21, Y+16	; 0x10
    195a:	20 a3       	std	Z+32, r18	; 0x20
    195c:	31 a3       	std	Z+33, r19	; 0x21
    195e:	42 a3       	std	Z+34, r20	; 0x22
    1960:	53 a3       	std	Z+35, r21	; 0x23
    1962:	27 c0       	rjmp	.+78     	; 0x19b2 <calcDate+0x300>
				/* add a day to feburary if this is a leap year */
				if (month == 1 && leapYear)
				++dim;

				if (days >= dim)
				days -= dim;
    1964:	c8 1a       	sub	r12, r24
    1966:	d9 0a       	sbc	r13, r25
    1968:	ea 0a       	sbc	r14, r26
    196a:	fb 0a       	sbc	r15, r27
    196c:	91 cf       	rjmp	.-222    	; 0x1890 <calcDate+0x1de>

				/* add a day to feburary if this is a leap year */
				if (month == 1 && leapYear)
				++dim;

				if (days >= dim)
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	a0 e0       	ldi	r26, 0x00	; 0
    1972:	b0 e0       	ldi	r27, 0x00	; 0
    1974:	c8 16       	cp	r12, r24
    1976:	d9 06       	cpc	r13, r25
    1978:	ea 06       	cpc	r14, r26
    197a:	fb 06       	cpc	r15, r27
    197c:	9c f7       	brge	.-26     	; 0x1964 <calcDate+0x2b2>
    197e:	b3 cf       	rjmp	.-154    	; 0x18e6 <calcDate+0x234>

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    1980:	fe e6       	ldi	r31, 0x6E	; 110
    1982:	cf 16       	cp	r12, r31
    1984:	f1 e0       	ldi	r31, 0x01	; 1
    1986:	df 06       	cpc	r13, r31
    1988:	e1 04       	cpc	r14, r1
    198a:	f1 04       	cpc	r15, r1
    198c:	0c f0       	brlt	.+2      	; 0x1990 <calcDate+0x2de>
    198e:	36 cf       	rjmp	.-404    	; 0x17fc <calcDate+0x14a>
    1990:	d7 01       	movw	r26, r14
    1992:	c6 01       	movw	r24, r12
    1994:	33 24       	eor	r3, r3
    1996:	33 94       	inc	r3
    1998:	5b cf       	rjmp	.-330    	; 0x1850 <calcDate+0x19e>
    199a:	3d e6       	ldi	r19, 0x6D	; 109
    199c:	c3 16       	cp	r12, r19
    199e:	31 e0       	ldi	r19, 0x01	; 1
    19a0:	d3 06       	cpc	r13, r19
    19a2:	e1 04       	cpc	r14, r1
    19a4:	f1 04       	cpc	r15, r1
    19a6:	0c f0       	brlt	.+2      	; 0x19aa <calcDate+0x2f8>
    19a8:	32 cf       	rjmp	.-412    	; 0x180e <calcDate+0x15c>
    19aa:	d7 01       	movw	r26, r14
    19ac:	c6 01       	movw	r24, r12
    19ae:	31 2c       	mov	r3, r1
    19b0:	4f cf       	rjmp	.-354    	; 0x1850 <calcDate+0x19e>
	tm_ptr->tm_hour = hours;
	tm_ptr->tm_mday = days + 1;
	tm_ptr->tm_mon  = month + 1;
	tm_ptr->tm_year = year;
	tm_ptr->tm_wday = dayOfWeek;
}
    19b2:	62 96       	adiw	r28, 0x12	; 18
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	de bf       	out	0x3e, r29	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	cd bf       	out	0x3d, r28	; 61
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	1f 91       	pop	r17
    19c4:	0f 91       	pop	r16
    19c6:	ff 90       	pop	r15
    19c8:	ef 90       	pop	r14
    19ca:	df 90       	pop	r13
    19cc:	cf 90       	pop	r12
    19ce:	bf 90       	pop	r11
    19d0:	af 90       	pop	r10
    19d2:	9f 90       	pop	r9
    19d4:	8f 90       	pop	r8
    19d6:	7f 90       	pop	r7
    19d8:	6f 90       	pop	r6
    19da:	5f 90       	pop	r5
    19dc:	4f 90       	pop	r4
    19de:	3f 90       	pop	r3
    19e0:	2f 90       	pop	r2
    19e2:	08 95       	ret

000019e4 <updateTime>:
#include "utilities/inc/time.h"
#include <stdio.h>


void updateTime(long increment_msec, tm * tm_eg)
{
    19e4:	cf 92       	push	r12
    19e6:	df 92       	push	r13
    19e8:	ef 92       	push	r14
    19ea:	ff 92       	push	r15
    19ec:	0f 93       	push	r16
    19ee:	1f 93       	push	r17
    19f0:	cf 93       	push	r28
    19f2:	df 93       	push	r29
    19f4:	ea 01       	movw	r28, r20
	tm_eg->unix_msec += increment_msec;
    19f6:	cc 80       	ldd	r12, Y+4	; 0x04
    19f8:	dd 80       	ldd	r13, Y+5	; 0x05
    19fa:	ee 80       	ldd	r14, Y+6	; 0x06
    19fc:	ff 80       	ldd	r15, Y+7	; 0x07
    19fe:	6c 0d       	add	r22, r12
    1a00:	7d 1d       	adc	r23, r13
    1a02:	8e 1d       	adc	r24, r14
    1a04:	9f 1d       	adc	r25, r15
	tm_eg->unix_time += ( tm_eg->unix_msec / 1000 );
    1a06:	28 ee       	ldi	r18, 0xE8	; 232
    1a08:	33 e0       	ldi	r19, 0x03	; 3
    1a0a:	40 e0       	ldi	r20, 0x00	; 0
    1a0c:	50 e0       	ldi	r21, 0x00	; 0
    1a0e:	0e 94 81 1e 	call	0x3d02	; 0x3d02 <__divmodsi4>
    1a12:	c8 80       	ld	r12, Y
    1a14:	d9 80       	ldd	r13, Y+1	; 0x01
    1a16:	ea 80       	ldd	r14, Y+2	; 0x02
    1a18:	fb 80       	ldd	r15, Y+3	; 0x03
    1a1a:	89 01       	movw	r16, r18
    1a1c:	9a 01       	movw	r18, r20
    1a1e:	0c 0d       	add	r16, r12
    1a20:	1d 1d       	adc	r17, r13
    1a22:	2e 1d       	adc	r18, r14
    1a24:	3f 1d       	adc	r19, r15
    1a26:	08 83       	st	Y, r16
    1a28:	19 83       	std	Y+1, r17	; 0x01
    1a2a:	2a 83       	std	Y+2, r18	; 0x02
    1a2c:	3b 83       	std	Y+3, r19	; 0x03
	tm_eg->unix_msec = tm_eg->unix_msec % 1000;
    1a2e:	6c 83       	std	Y+4, r22	; 0x04
    1a30:	7d 83       	std	Y+5, r23	; 0x05
    1a32:	8e 83       	std	Y+6, r24	; 0x06
    1a34:	9f 83       	std	Y+7, r25	; 0x07
	calcDate(tm_eg);
    1a36:	ce 01       	movw	r24, r28
    1a38:	3c de       	rcall	.-904    	; 0x16b2 <calcDate>
}
    1a3a:	df 91       	pop	r29
    1a3c:	cf 91       	pop	r28
    1a3e:	1f 91       	pop	r17
    1a40:	0f 91       	pop	r16
    1a42:	ff 90       	pop	r15
    1a44:	ef 90       	pop	r14
    1a46:	df 90       	pop	r13
    1a48:	cf 90       	pop	r12
    1a4a:	08 95       	ret

00001a4c <init_timestamp>:



void init_timestamp(tm *tm_ptr)
{
	tm_ptr->unix_msec=0;
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	14 82       	std	Z+4, r1	; 0x04
    1a50:	15 82       	std	Z+5, r1	; 0x05
    1a52:	16 82       	std	Z+6, r1	; 0x06
    1a54:	17 82       	std	Z+7, r1	; 0x07
	tm_ptr->unix_time=0;
    1a56:	10 82       	st	Z, r1
    1a58:	11 82       	std	Z+1, r1	; 0x01
    1a5a:	12 82       	std	Z+2, r1	; 0x02
    1a5c:	13 82       	std	Z+3, r1	; 0x03
    1a5e:	08 95       	ret

00001a60 <fctn_getStartNum>:
}

int fctn_getStartNum( BaseSensor *this)
{
	return this->StartNum;
}
    1a60:	fc 01       	movw	r30, r24
    1a62:	84 81       	ldd	r24, Z+4	; 0x04
    1a64:	95 81       	ldd	r25, Z+5	; 0x05
    1a66:	08 95       	ret

00001a68 <fctn_getEndNum>:

int fctn_getEndNum( BaseSensor *this)
{
    1a68:	fc 01       	movw	r30, r24
	return ( this->StartNum + this->NumOfData );
    1a6a:	24 81       	ldd	r18, Z+4	; 0x04
    1a6c:	35 81       	ldd	r19, Z+5	; 0x05
    1a6e:	86 81       	ldd	r24, Z+6	; 0x06
    1a70:	97 81       	ldd	r25, Z+7	; 0x07
}
    1a72:	82 0f       	add	r24, r18
    1a74:	93 1f       	adc	r25, r19
    1a76:	08 95       	ret

00001a78 <BMP280_ReadBytes>:
  @brief Gets the oversampling setting for the library
  @return oversampling
*****************************************************************************/
short BMP280_GetOversampling(void){
	return oversampling;
}
    1a78:	1f 93       	push	r17
    1a7a:	cf 93       	push	r28
    1a7c:	df 93       	push	r29
    1a7e:	ec 01       	movw	r28, r24
    1a80:	16 2f       	mov	r17, r22
    1a82:	86 e7       	ldi	r24, 0x76	; 118
    1a84:	0e 94 36 05 	call	0xa6c	; 0xa6c <TWI_BeginWrite>
    1a88:	88 81       	ld	r24, Y
    1a8a:	0e 94 28 05 	call	0xa50	; 0xa50 <TWI_WriteByte>
    1a8e:	86 e7       	ldi	r24, 0x76	; 118
    1a90:	09 d8       	rcall	.-4078   	; 0xaa4 <TWI_BeginRead>
    1a92:	80 93 e7 09 	sts	0x09E7, r24
    1a96:	80 34       	cpi	r24, 0x40	; 64
    1a98:	71 f4       	brne	.+28     	; 0x1ab6 <BMP280_ReadBytes+0x3e>
    1a9a:	61 2f       	mov	r22, r17
    1a9c:	70 e0       	ldi	r23, 0x00	; 0
    1a9e:	40 e0       	ldi	r20, 0x00	; 0
    1aa0:	ce 01       	movw	r24, r28
    1aa2:	3c d8       	rcall	.-3976   	; 0xb1c <TWI_Read>
    1aa4:	88 7f       	andi	r24, 0xF8	; 248
    1aa6:	88 35       	cpi	r24, 0x58	; 88
    1aa8:	41 f4       	brne	.+16     	; 0x1aba <BMP280_ReadBytes+0x42>
    1aaa:	33 d8       	rcall	.-3994   	; 0xb12 <TWI_Stop>
    1aac:	91 e0       	ldi	r25, 0x01	; 1
    1aae:	81 11       	cpse	r24, r1
    1ab0:	05 c0       	rjmp	.+10     	; 0x1abc <BMP280_ReadBytes+0x44>
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	03 c0       	rjmp	.+6      	; 0x1abc <BMP280_ReadBytes+0x44>
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	01 c0       	rjmp	.+2      	; 0x1abc <BMP280_ReadBytes+0x44>
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	89 2f       	mov	r24, r25
    1abe:	df 91       	pop	r29
    1ac0:	cf 91       	pop	r28
    1ac2:	1f 91       	pop	r17
    1ac4:	08 95       	ret

00001ac6 <BMP280_ReadUInt>:
    1ac6:	0f 93       	push	r16
    1ac8:	1f 93       	push	r17
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	1f 92       	push	r1
    1ad0:	1f 92       	push	r1
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    1ad6:	8b 01       	movw	r16, r22
    1ad8:	89 83       	std	Y+1, r24	; 0x01
    1ada:	62 e0       	ldi	r22, 0x02	; 2
    1adc:	ce 01       	movw	r24, r28
    1ade:	01 96       	adiw	r24, 0x01	; 1
    1ae0:	cb df       	rcall	.-106    	; 0x1a78 <BMP280_ReadBytes>
    1ae2:	88 23       	and	r24, r24
    1ae4:	59 f0       	breq	.+22     	; 0x1afc <BMP280_ReadUInt+0x36>
    1ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	98 2f       	mov	r25, r24
    1aec:	88 27       	eor	r24, r24
    1aee:	29 81       	ldd	r18, Y+1	; 0x01
    1af0:	82 2b       	or	r24, r18
    1af2:	f8 01       	movw	r30, r16
    1af4:	91 83       	std	Z+1, r25	; 0x01
    1af6:	80 83       	st	Z, r24
    1af8:	81 e0       	ldi	r24, 0x01	; 1
    1afa:	03 c0       	rjmp	.+6      	; 0x1b02 <BMP280_ReadUInt+0x3c>
    1afc:	f8 01       	movw	r30, r16
    1afe:	11 82       	std	Z+1, r1	; 0x01
    1b00:	10 82       	st	Z, r1
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	df 91       	pop	r29
    1b08:	cf 91       	pop	r28
    1b0a:	1f 91       	pop	r17
    1b0c:	0f 91       	pop	r16
    1b0e:	08 95       	ret

00001b10 <BMP280_ReadInt>:
    1b10:	0f 93       	push	r16
    1b12:	1f 93       	push	r17
    1b14:	cf 93       	push	r28
    1b16:	df 93       	push	r29
    1b18:	1f 92       	push	r1
    1b1a:	1f 92       	push	r1
    1b1c:	cd b7       	in	r28, 0x3d	; 61
    1b1e:	de b7       	in	r29, 0x3e	; 62
    1b20:	8b 01       	movw	r16, r22
    1b22:	89 83       	std	Y+1, r24	; 0x01
    1b24:	62 e0       	ldi	r22, 0x02	; 2
    1b26:	ce 01       	movw	r24, r28
    1b28:	01 96       	adiw	r24, 0x01	; 1
    1b2a:	a6 df       	rcall	.-180    	; 0x1a78 <BMP280_ReadBytes>
    1b2c:	88 23       	and	r24, r24
    1b2e:	59 f0       	breq	.+22     	; 0x1b46 <BMP280_ReadInt+0x36>
    1b30:	8a 81       	ldd	r24, Y+2	; 0x02
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	98 2f       	mov	r25, r24
    1b36:	88 27       	eor	r24, r24
    1b38:	29 81       	ldd	r18, Y+1	; 0x01
    1b3a:	82 2b       	or	r24, r18
    1b3c:	f8 01       	movw	r30, r16
    1b3e:	91 83       	std	Z+1, r25	; 0x01
    1b40:	80 83       	st	Z, r24
    1b42:	81 e0       	ldi	r24, 0x01	; 1
    1b44:	03 c0       	rjmp	.+6      	; 0x1b4c <BMP280_ReadInt+0x3c>
    1b46:	f8 01       	movw	r30, r16
    1b48:	11 82       	std	Z+1, r1	; 0x01
    1b4a:	10 82       	st	Z, r1
    1b4c:	0f 90       	pop	r0
    1b4e:	0f 90       	pop	r0
    1b50:	df 91       	pop	r29
    1b52:	cf 91       	pop	r28
    1b54:	1f 91       	pop	r17
    1b56:	0f 91       	pop	r16
    1b58:	08 95       	ret

00001b5a <BMP280_ReadUChar>:
    1b5a:	0f 93       	push	r16
    1b5c:	1f 93       	push	r17
    1b5e:	cf 93       	push	r28
    1b60:	df 93       	push	r29
    1b62:	1f 92       	push	r1
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    1b68:	8b 01       	movw	r16, r22
    1b6a:	89 83       	std	Y+1, r24	; 0x01
    1b6c:	61 e0       	ldi	r22, 0x01	; 1
    1b6e:	ce 01       	movw	r24, r28
    1b70:	01 96       	adiw	r24, 0x01	; 1
    1b72:	82 df       	rcall	.-252    	; 0x1a78 <BMP280_ReadBytes>
    1b74:	88 23       	and	r24, r24
    1b76:	a1 f0       	breq	.+40     	; 0x1ba0 <BMP280_ReadUChar+0x46>
    1b78:	89 81       	ldd	r24, Y+1	; 0x01
    1b7a:	1f 92       	push	r1
    1b7c:	8f 93       	push	r24
    1b7e:	88 eb       	ldi	r24, 0xB8	; 184
    1b80:	94 e0       	ldi	r25, 0x04	; 4
    1b82:	9f 93       	push	r25
    1b84:	8f 93       	push	r24
    1b86:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	90 e0       	ldi	r25, 0x00	; 0
    1b8e:	f8 01       	movw	r30, r16
    1b90:	91 83       	std	Z+1, r25	; 0x01
    1b92:	80 83       	st	Z, r24
    1b94:	0f 90       	pop	r0
    1b96:	0f 90       	pop	r0
    1b98:	0f 90       	pop	r0
    1b9a:	0f 90       	pop	r0
    1b9c:	81 e0       	ldi	r24, 0x01	; 1
    1b9e:	03 c0       	rjmp	.+6      	; 0x1ba6 <BMP280_ReadUChar+0x4c>
    1ba0:	f8 01       	movw	r30, r16
    1ba2:	11 82       	std	Z+1, r1	; 0x01
    1ba4:	10 82       	st	Z, r1
    1ba6:	0f 90       	pop	r0
    1ba8:	df 91       	pop	r29
    1baa:	cf 91       	pop	r28
    1bac:	1f 91       	pop	r17
    1bae:	0f 91       	pop	r16
    1bb0:	08 95       	ret

00001bb2 <BMP280_ReadInt4>:
    1bb2:	cf 92       	push	r12
    1bb4:	df 92       	push	r13
    1bb6:	ef 92       	push	r14
    1bb8:	ff 92       	push	r15
    1bba:	0f 93       	push	r16
    1bbc:	1f 93       	push	r17
    1bbe:	cf 93       	push	r28
    1bc0:	df 93       	push	r29
    1bc2:	1f 92       	push	r1
    1bc4:	1f 92       	push	r1
    1bc6:	cd b7       	in	r28, 0x3d	; 61
    1bc8:	de b7       	in	r29, 0x3e	; 62
    1bca:	7b 01       	movw	r14, r22
    1bcc:	89 83       	std	Y+1, r24	; 0x01
    1bce:	00 91 00 00 	lds	r16, 0x0000
    1bd2:	10 91 01 00 	lds	r17, 0x0001
    1bd6:	b8 01       	movw	r22, r16
    1bd8:	8c 2f       	mov	r24, r28
    1bda:	8f 5f       	subi	r24, 0xFF	; 255
    1bdc:	be df       	rcall	.-132    	; 0x1b5a <BMP280_ReadUChar>
    1bde:	88 23       	and	r24, r24
    1be0:	51 f1       	breq	.+84     	; 0x1c36 <BMP280_ReadInt4+0x84>
    1be2:	c0 90 00 00 	lds	r12, 0x0000
    1be6:	d0 90 01 00 	lds	r13, 0x0001
    1bea:	b6 01       	movw	r22, r12
    1bec:	8c 2f       	mov	r24, r28
    1bee:	8e 5f       	subi	r24, 0xFE	; 254
    1bf0:	b4 df       	rcall	.-152    	; 0x1b5a <BMP280_ReadUChar>
    1bf2:	88 23       	and	r24, r24
    1bf4:	01 f1       	breq	.+64     	; 0x1c36 <BMP280_ReadInt4+0x84>
    1bf6:	df 92       	push	r13
    1bf8:	cf 92       	push	r12
    1bfa:	1f 93       	push	r17
    1bfc:	0f 93       	push	r16
    1bfe:	8e ec       	ldi	r24, 0xCE	; 206
    1c00:	94 e0       	ldi	r25, 0x04	; 4
    1c02:	9f 93       	push	r25
    1c04:	8f 93       	push	r24
    1c06:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1c0a:	02 95       	swap	r16
    1c0c:	12 95       	swap	r17
    1c0e:	10 7f       	andi	r17, 0xF0	; 240
    1c10:	10 27       	eor	r17, r16
    1c12:	00 7f       	andi	r16, 0xF0	; 240
    1c14:	10 27       	eor	r17, r16
    1c16:	8f e0       	ldi	r24, 0x0F	; 15
    1c18:	c8 22       	and	r12, r24
    1c1a:	dd 24       	eor	r13, r13
    1c1c:	0c 29       	or	r16, r12
    1c1e:	1d 29       	or	r17, r13
    1c20:	f7 01       	movw	r30, r14
    1c22:	11 83       	std	Z+1, r17	; 0x01
    1c24:	00 83       	st	Z, r16
    1c26:	0f 90       	pop	r0
    1c28:	0f 90       	pop	r0
    1c2a:	0f 90       	pop	r0
    1c2c:	0f 90       	pop	r0
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	81 e0       	ldi	r24, 0x01	; 1
    1c34:	04 c0       	rjmp	.+8      	; 0x1c3e <BMP280_ReadInt4+0x8c>
    1c36:	f7 01       	movw	r30, r14
    1c38:	11 82       	std	Z+1, r1	; 0x01
    1c3a:	10 82       	st	Z, r1
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	df 91       	pop	r29
    1c44:	cf 91       	pop	r28
    1c46:	1f 91       	pop	r17
    1c48:	0f 91       	pop	r16
    1c4a:	ff 90       	pop	r15
    1c4c:	ef 90       	pop	r14
    1c4e:	df 90       	pop	r13
    1c50:	cf 90       	pop	r12
    1c52:	08 95       	ret

00001c54 <BMP280_ReadInt5>:
    1c54:	cf 92       	push	r12
    1c56:	df 92       	push	r13
    1c58:	ef 92       	push	r14
    1c5a:	ff 92       	push	r15
    1c5c:	0f 93       	push	r16
    1c5e:	1f 93       	push	r17
    1c60:	cf 93       	push	r28
    1c62:	df 93       	push	r29
    1c64:	1f 92       	push	r1
    1c66:	1f 92       	push	r1
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	7b 01       	movw	r14, r22
    1c6e:	89 83       	std	Y+1, r24	; 0x01
    1c70:	00 91 00 00 	lds	r16, 0x0000
    1c74:	10 91 01 00 	lds	r17, 0x0001
    1c78:	b8 01       	movw	r22, r16
    1c7a:	8c 2f       	mov	r24, r28
    1c7c:	8f 5f       	subi	r24, 0xFF	; 255
    1c7e:	6d df       	rcall	.-294    	; 0x1b5a <BMP280_ReadUChar>
    1c80:	88 23       	and	r24, r24
    1c82:	09 f1       	breq	.+66     	; 0x1cc6 <BMP280_ReadInt5+0x72>
    1c84:	c0 90 00 00 	lds	r12, 0x0000
    1c88:	d0 90 01 00 	lds	r13, 0x0001
    1c8c:	b6 01       	movw	r22, r12
    1c8e:	8c 2f       	mov	r24, r28
    1c90:	8e 5f       	subi	r24, 0xFE	; 254
    1c92:	63 df       	rcall	.-314    	; 0x1b5a <BMP280_ReadUChar>
    1c94:	88 23       	and	r24, r24
    1c96:	b9 f0       	breq	.+46     	; 0x1cc6 <BMP280_ReadInt5+0x72>
    1c98:	15 95       	asr	r17
    1c9a:	07 95       	ror	r16
    1c9c:	15 95       	asr	r17
    1c9e:	07 95       	ror	r16
    1ca0:	15 95       	asr	r17
    1ca2:	07 95       	ror	r16
    1ca4:	15 95       	asr	r17
    1ca6:	07 95       	ror	r16
    1ca8:	cc 0c       	add	r12, r12
    1caa:	dd 1c       	adc	r13, r13
    1cac:	cc 0c       	add	r12, r12
    1cae:	dd 1c       	adc	r13, r13
    1cb0:	cc 0c       	add	r12, r12
    1cb2:	dd 1c       	adc	r13, r13
    1cb4:	cc 0c       	add	r12, r12
    1cb6:	dd 1c       	adc	r13, r13
    1cb8:	0c 29       	or	r16, r12
    1cba:	1d 29       	or	r17, r13
    1cbc:	f7 01       	movw	r30, r14
    1cbe:	11 83       	std	Z+1, r17	; 0x01
    1cc0:	00 83       	st	Z, r16
    1cc2:	81 e0       	ldi	r24, 0x01	; 1
    1cc4:	04 c0       	rjmp	.+8      	; 0x1cce <BMP280_ReadInt5+0x7a>
    1cc6:	f7 01       	movw	r30, r14
    1cc8:	11 82       	std	Z+1, r1	; 0x01
    1cca:	10 82       	st	Z, r1
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	0f 90       	pop	r0
    1cd0:	0f 90       	pop	r0
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	1f 91       	pop	r17
    1cd8:	0f 91       	pop	r16
    1cda:	ff 90       	pop	r15
    1cdc:	ef 90       	pop	r14
    1cde:	df 90       	pop	r13
    1ce0:	cf 90       	pop	r12
    1ce2:	08 95       	ret

00001ce4 <BME280_ClearCalibration>:
    1ce4:	10 92 f7 09 	sts	0x09F7, r1
    1ce8:	10 92 f6 09 	sts	0x09F6, r1
    1cec:	10 92 11 0a 	sts	0x0A11, r1
    1cf0:	10 92 10 0a 	sts	0x0A10, r1
    1cf4:	10 92 0f 0a 	sts	0x0A0F, r1
    1cf8:	10 92 0e 0a 	sts	0x0A0E, r1
    1cfc:	10 92 f5 09 	sts	0x09F5, r1
    1d00:	10 92 f4 09 	sts	0x09F4, r1
    1d04:	10 92 0d 0a 	sts	0x0A0D, r1
    1d08:	10 92 0c 0a 	sts	0x0A0C, r1
    1d0c:	10 92 0b 0a 	sts	0x0A0B, r1
    1d10:	10 92 0a 0a 	sts	0x0A0A, r1
    1d14:	10 92 09 0a 	sts	0x0A09, r1
    1d18:	10 92 08 0a 	sts	0x0A08, r1
    1d1c:	10 92 07 0a 	sts	0x0A07, r1
    1d20:	10 92 06 0a 	sts	0x0A06, r1
    1d24:	10 92 05 0a 	sts	0x0A05, r1
    1d28:	10 92 04 0a 	sts	0x0A04, r1
    1d2c:	10 92 03 0a 	sts	0x0A03, r1
    1d30:	10 92 02 0a 	sts	0x0A02, r1
    1d34:	10 92 01 0a 	sts	0x0A01, r1
    1d38:	10 92 00 0a 	sts	0x0A00, r1
    1d3c:	10 92 ff 09 	sts	0x09FF, r1
    1d40:	10 92 fe 09 	sts	0x09FE, r1
    1d44:	10 92 f3 09 	sts	0x09F3, r1
    1d48:	10 92 fd 09 	sts	0x09FD, r1
    1d4c:	10 92 fc 09 	sts	0x09FC, r1
    1d50:	10 92 f2 09 	sts	0x09F2, r1
    1d54:	10 92 fb 09 	sts	0x09FB, r1
    1d58:	10 92 fa 09 	sts	0x09FA, r1
    1d5c:	10 92 f9 09 	sts	0x09F9, r1
    1d60:	10 92 f8 09 	sts	0x09F8, r1
    1d64:	10 92 f1 09 	sts	0x09F1, r1
    1d68:	08 95       	ret

00001d6a <BMP280_Init>:
    1d6a:	0f 93       	push	r16
    1d6c:	1f 93       	push	r17
    1d6e:	cf 93       	push	r28
    1d70:	df 93       	push	r29
    1d72:	1f 92       	push	r1
    1d74:	cd b7       	in	r28, 0x3d	; 61
    1d76:	de b7       	in	r29, 0x3e	; 62
    1d78:	b5 df       	rcall	.-150    	; 0x1ce4 <BME280_ClearCalibration>
    1d7a:	66 ef       	ldi	r22, 0xF6	; 246
    1d7c:	79 e0       	ldi	r23, 0x09	; 9
    1d7e:	88 e8       	ldi	r24, 0x88	; 136
    1d80:	a2 de       	rcall	.-700    	; 0x1ac6 <BMP280_ReadUInt>
    1d82:	1f 92       	push	r1
    1d84:	8f 93       	push	r24
    1d86:	06 ee       	ldi	r16, 0xE6	; 230
    1d88:	14 e0       	ldi	r17, 0x04	; 4
    1d8a:	1f 93       	push	r17
    1d8c:	0f 93       	push	r16
    1d8e:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1d92:	60 e1       	ldi	r22, 0x10	; 16
    1d94:	7a e0       	ldi	r23, 0x0A	; 10
    1d96:	8a e8       	ldi	r24, 0x8A	; 138
    1d98:	bb de       	rcall	.-650    	; 0x1b10 <BMP280_ReadInt>
    1d9a:	1f 92       	push	r1
    1d9c:	8f 93       	push	r24
    1d9e:	1f 93       	push	r17
    1da0:	0f 93       	push	r16
    1da2:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1da6:	6e e0       	ldi	r22, 0x0E	; 14
    1da8:	7a e0       	ldi	r23, 0x0A	; 10
    1daa:	8c e8       	ldi	r24, 0x8C	; 140
    1dac:	b1 de       	rcall	.-670    	; 0x1b10 <BMP280_ReadInt>
    1dae:	1f 92       	push	r1
    1db0:	8f 93       	push	r24
    1db2:	1f 93       	push	r17
    1db4:	0f 93       	push	r16
    1db6:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1dba:	64 ef       	ldi	r22, 0xF4	; 244
    1dbc:	79 e0       	ldi	r23, 0x09	; 9
    1dbe:	8e e8       	ldi	r24, 0x8E	; 142
    1dc0:	82 de       	rcall	.-764    	; 0x1ac6 <BMP280_ReadUInt>
    1dc2:	1f 92       	push	r1
    1dc4:	8f 93       	push	r24
    1dc6:	1f 93       	push	r17
    1dc8:	0f 93       	push	r16
    1dca:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1dce:	6c e0       	ldi	r22, 0x0C	; 12
    1dd0:	7a e0       	ldi	r23, 0x0A	; 10
    1dd2:	80 e9       	ldi	r24, 0x90	; 144
    1dd4:	9d de       	rcall	.-710    	; 0x1b10 <BMP280_ReadInt>
    1dd6:	1f 92       	push	r1
    1dd8:	8f 93       	push	r24
    1dda:	1f 93       	push	r17
    1ddc:	0f 93       	push	r16
    1dde:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1de2:	6a e0       	ldi	r22, 0x0A	; 10
    1de4:	7a e0       	ldi	r23, 0x0A	; 10
    1de6:	82 e9       	ldi	r24, 0x92	; 146
    1de8:	93 de       	rcall	.-730    	; 0x1b10 <BMP280_ReadInt>
    1dea:	1f 92       	push	r1
    1dec:	8f 93       	push	r24
    1dee:	1f 93       	push	r17
    1df0:	0f 93       	push	r16
    1df2:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1df6:	68 e0       	ldi	r22, 0x08	; 8
    1df8:	7a e0       	ldi	r23, 0x0A	; 10
    1dfa:	84 e9       	ldi	r24, 0x94	; 148
    1dfc:	89 de       	rcall	.-750    	; 0x1b10 <BMP280_ReadInt>
    1dfe:	1f 92       	push	r1
    1e00:	8f 93       	push	r24
    1e02:	1f 93       	push	r17
    1e04:	0f 93       	push	r16
    1e06:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1e0a:	66 e0       	ldi	r22, 0x06	; 6
    1e0c:	7a e0       	ldi	r23, 0x0A	; 10
    1e0e:	86 e9       	ldi	r24, 0x96	; 150
    1e10:	7f de       	rcall	.-770    	; 0x1b10 <BMP280_ReadInt>
    1e12:	1f 92       	push	r1
    1e14:	8f 93       	push	r24
    1e16:	1f 93       	push	r17
    1e18:	0f 93       	push	r16
    1e1a:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	de bf       	out	0x3e, r29	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	cd bf       	out	0x3d, r28	; 61
    1e28:	64 e0       	ldi	r22, 0x04	; 4
    1e2a:	7a e0       	ldi	r23, 0x0A	; 10
    1e2c:	88 e9       	ldi	r24, 0x98	; 152
    1e2e:	70 de       	rcall	.-800    	; 0x1b10 <BMP280_ReadInt>
    1e30:	1f 92       	push	r1
    1e32:	8f 93       	push	r24
    1e34:	1f 93       	push	r17
    1e36:	0f 93       	push	r16
    1e38:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1e3c:	62 e0       	ldi	r22, 0x02	; 2
    1e3e:	7a e0       	ldi	r23, 0x0A	; 10
    1e40:	8a e9       	ldi	r24, 0x9A	; 154
    1e42:	66 de       	rcall	.-820    	; 0x1b10 <BMP280_ReadInt>
    1e44:	1f 92       	push	r1
    1e46:	8f 93       	push	r24
    1e48:	1f 93       	push	r17
    1e4a:	0f 93       	push	r16
    1e4c:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1e50:	60 e0       	ldi	r22, 0x00	; 0
    1e52:	7a e0       	ldi	r23, 0x0A	; 10
    1e54:	8c e9       	ldi	r24, 0x9C	; 156
    1e56:	5c de       	rcall	.-840    	; 0x1b10 <BMP280_ReadInt>
    1e58:	1f 92       	push	r1
    1e5a:	8f 93       	push	r24
    1e5c:	1f 93       	push	r17
    1e5e:	0f 93       	push	r16
    1e60:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1e64:	6e ef       	ldi	r22, 0xFE	; 254
    1e66:	79 e0       	ldi	r23, 0x09	; 9
    1e68:	8e e9       	ldi	r24, 0x9E	; 158
    1e6a:	52 de       	rcall	.-860    	; 0x1b10 <BMP280_ReadInt>
    1e6c:	1f 92       	push	r1
    1e6e:	8f 93       	push	r24
    1e70:	1f 93       	push	r17
    1e72:	0f 93       	push	r16
    1e74:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1e78:	63 ef       	ldi	r22, 0xF3	; 243
    1e7a:	79 e0       	ldi	r23, 0x09	; 9
    1e7c:	81 ea       	ldi	r24, 0xA1	; 161
    1e7e:	6d de       	rcall	.-806    	; 0x1b5a <BMP280_ReadUChar>
    1e80:	1f 92       	push	r1
    1e82:	8f 93       	push	r24
    1e84:	1f 93       	push	r17
    1e86:	0f 93       	push	r16
    1e88:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1e8c:	80 91 f3 09 	lds	r24, 0x09F3
    1e90:	1f 92       	push	r1
    1e92:	8f 93       	push	r24
    1e94:	87 ef       	ldi	r24, 0xF7	; 247
    1e96:	94 e0       	ldi	r25, 0x04	; 4
    1e98:	9f 93       	push	r25
    1e9a:	8f 93       	push	r24
    1e9c:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1ea0:	6c ef       	ldi	r22, 0xFC	; 252
    1ea2:	79 e0       	ldi	r23, 0x09	; 9
    1ea4:	81 ee       	ldi	r24, 0xE1	; 225
    1ea6:	34 de       	rcall	.-920    	; 0x1b10 <BMP280_ReadInt>
    1ea8:	1f 92       	push	r1
    1eaa:	8f 93       	push	r24
    1eac:	1f 93       	push	r17
    1eae:	0f 93       	push	r16
    1eb0:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1eb4:	80 91 fd 09 	lds	r24, 0x09FD
    1eb8:	8f 93       	push	r24
    1eba:	80 91 fc 09 	lds	r24, 0x09FC
    1ebe:	8f 93       	push	r24
    1ec0:	86 e0       	ldi	r24, 0x06	; 6
    1ec2:	95 e0       	ldi	r25, 0x05	; 5
    1ec4:	9f 93       	push	r25
    1ec6:	8f 93       	push	r24
    1ec8:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
    1ed6:	62 ef       	ldi	r22, 0xF2	; 242
    1ed8:	79 e0       	ldi	r23, 0x09	; 9
    1eda:	83 ee       	ldi	r24, 0xE3	; 227
    1edc:	3e de       	rcall	.-900    	; 0x1b5a <BMP280_ReadUChar>
    1ede:	1f 92       	push	r1
    1ee0:	8f 93       	push	r24
    1ee2:	1f 93       	push	r17
    1ee4:	0f 93       	push	r16
    1ee6:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1eea:	80 91 f2 09 	lds	r24, 0x09F2
    1eee:	1f 92       	push	r1
    1ef0:	8f 93       	push	r24
    1ef2:	85 e1       	ldi	r24, 0x15	; 21
    1ef4:	95 e0       	ldi	r25, 0x05	; 5
    1ef6:	9f 93       	push	r25
    1ef8:	8f 93       	push	r24
    1efa:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1efe:	6a ef       	ldi	r22, 0xFA	; 250
    1f00:	79 e0       	ldi	r23, 0x09	; 9
    1f02:	84 ee       	ldi	r24, 0xE4	; 228
    1f04:	56 de       	rcall	.-852    	; 0x1bb2 <BMP280_ReadInt4>
    1f06:	1f 92       	push	r1
    1f08:	8f 93       	push	r24
    1f0a:	1f 93       	push	r17
    1f0c:	0f 93       	push	r16
    1f0e:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1f12:	80 91 fb 09 	lds	r24, 0x09FB
    1f16:	8f 93       	push	r24
    1f18:	80 91 fa 09 	lds	r24, 0x09FA
    1f1c:	8f 93       	push	r24
    1f1e:	84 e2       	ldi	r24, 0x24	; 36
    1f20:	95 e0       	ldi	r25, 0x05	; 5
    1f22:	9f 93       	push	r25
    1f24:	8f 93       	push	r24
    1f26:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1f2a:	68 ef       	ldi	r22, 0xF8	; 248
    1f2c:	79 e0       	ldi	r23, 0x09	; 9
    1f2e:	85 ee       	ldi	r24, 0xE5	; 229
    1f30:	91 de       	rcall	.-734    	; 0x1c54 <BMP280_ReadInt5>
    1f32:	1f 92       	push	r1
    1f34:	8f 93       	push	r24
    1f36:	1f 93       	push	r17
    1f38:	0f 93       	push	r16
    1f3a:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1f3e:	80 91 f9 09 	lds	r24, 0x09F9
    1f42:	8f 93       	push	r24
    1f44:	80 91 f8 09 	lds	r24, 0x09F8
    1f48:	8f 93       	push	r24
    1f4a:	83 e3       	ldi	r24, 0x33	; 51
    1f4c:	95 e0       	ldi	r25, 0x05	; 5
    1f4e:	9f 93       	push	r25
    1f50:	8f 93       	push	r24
    1f52:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1f56:	87 ee       	ldi	r24, 0xE7	; 231
    1f58:	89 83       	std	Y+1, r24	; 0x01
    1f5a:	61 e0       	ldi	r22, 0x01	; 1
    1f5c:	ce 01       	movw	r24, r28
    1f5e:	01 96       	adiw	r24, 0x01	; 1
    1f60:	8b dd       	rcall	.-1258   	; 0x1a78 <BMP280_ReadBytes>
    1f62:	0f b6       	in	r0, 0x3f	; 63
    1f64:	f8 94       	cli
    1f66:	de bf       	out	0x3e, r29	; 62
    1f68:	0f be       	out	0x3f, r0	; 63
    1f6a:	cd bf       	out	0x3d, r28	; 61
    1f6c:	88 23       	and	r24, r24
    1f6e:	41 f0       	breq	.+16     	; 0x1f80 <BMP280_Init+0x216>
    1f70:	89 81       	ldd	r24, Y+1	; 0x01
    1f72:	90 e0       	ldi	r25, 0x00	; 0
    1f74:	90 93 f2 09 	sts	0x09F2, r25
    1f78:	80 93 f1 09 	sts	0x09F1, r24
    1f7c:	81 e0       	ldi	r24, 0x01	; 1
    1f7e:	04 c0       	rjmp	.+8      	; 0x1f88 <BMP280_Init+0x21e>
    1f80:	10 92 f2 09 	sts	0x09F2, r1
    1f84:	10 92 f1 09 	sts	0x09F1, r1
    1f88:	1f 92       	push	r1
    1f8a:	8f 93       	push	r24
    1f8c:	86 ee       	ldi	r24, 0xE6	; 230
    1f8e:	94 e0       	ldi	r25, 0x04	; 4
    1f90:	9f 93       	push	r25
    1f92:	8f 93       	push	r24
    1f94:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1f98:	80 91 f1 09 	lds	r24, 0x09F1
    1f9c:	28 2f       	mov	r18, r24
    1f9e:	08 2e       	mov	r0, r24
    1fa0:	00 0c       	add	r0, r0
    1fa2:	33 0b       	sbc	r19, r19
    1fa4:	3f 93       	push	r19
    1fa6:	8f 93       	push	r24
    1fa8:	82 e4       	ldi	r24, 0x42	; 66
    1faa:	95 e0       	ldi	r25, 0x05	; 5
    1fac:	9f 93       	push	r25
    1fae:	8f 93       	push	r24
    1fb0:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    1fb4:	66 ef       	ldi	r22, 0xF6	; 246
    1fb6:	79 e0       	ldi	r23, 0x09	; 9
    1fb8:	88 e8       	ldi	r24, 0x88	; 136
    1fba:	85 dd       	rcall	.-1270   	; 0x1ac6 <BMP280_ReadUInt>
    1fbc:	0f b6       	in	r0, 0x3f	; 63
    1fbe:	f8 94       	cli
    1fc0:	de bf       	out	0x3e, r29	; 62
    1fc2:	0f be       	out	0x3f, r0	; 63
    1fc4:	cd bf       	out	0x3d, r28	; 61
    1fc6:	88 23       	and	r24, r24
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <BMP280_Init+0x262>
    1fca:	f8 c0       	rjmp	.+496    	; 0x21bc <BMP280_Init+0x452>
    1fcc:	60 e1       	ldi	r22, 0x10	; 16
    1fce:	7a e0       	ldi	r23, 0x0A	; 10
    1fd0:	8a e8       	ldi	r24, 0x8A	; 138
    1fd2:	9e dd       	rcall	.-1220   	; 0x1b10 <BMP280_ReadInt>
    1fd4:	88 23       	and	r24, r24
    1fd6:	09 f4       	brne	.+2      	; 0x1fda <BMP280_Init+0x270>
    1fd8:	f1 c0       	rjmp	.+482    	; 0x21bc <BMP280_Init+0x452>
    1fda:	6e e0       	ldi	r22, 0x0E	; 14
    1fdc:	7a e0       	ldi	r23, 0x0A	; 10
    1fde:	8c e8       	ldi	r24, 0x8C	; 140
    1fe0:	97 dd       	rcall	.-1234   	; 0x1b10 <BMP280_ReadInt>
    1fe2:	88 23       	and	r24, r24
    1fe4:	09 f4       	brne	.+2      	; 0x1fe8 <BMP280_Init+0x27e>
    1fe6:	ea c0       	rjmp	.+468    	; 0x21bc <BMP280_Init+0x452>
    1fe8:	64 ef       	ldi	r22, 0xF4	; 244
    1fea:	79 e0       	ldi	r23, 0x09	; 9
    1fec:	8e e8       	ldi	r24, 0x8E	; 142
    1fee:	6b dd       	rcall	.-1322   	; 0x1ac6 <BMP280_ReadUInt>
    1ff0:	88 23       	and	r24, r24
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <BMP280_Init+0x28c>
    1ff4:	e3 c0       	rjmp	.+454    	; 0x21bc <BMP280_Init+0x452>
    1ff6:	6c e0       	ldi	r22, 0x0C	; 12
    1ff8:	7a e0       	ldi	r23, 0x0A	; 10
    1ffa:	80 e9       	ldi	r24, 0x90	; 144
    1ffc:	89 dd       	rcall	.-1262   	; 0x1b10 <BMP280_ReadInt>
    1ffe:	88 23       	and	r24, r24
    2000:	09 f4       	brne	.+2      	; 0x2004 <BMP280_Init+0x29a>
    2002:	dc c0       	rjmp	.+440    	; 0x21bc <BMP280_Init+0x452>
    2004:	6a e0       	ldi	r22, 0x0A	; 10
    2006:	7a e0       	ldi	r23, 0x0A	; 10
    2008:	82 e9       	ldi	r24, 0x92	; 146
    200a:	82 dd       	rcall	.-1276   	; 0x1b10 <BMP280_ReadInt>
    200c:	88 23       	and	r24, r24
    200e:	09 f4       	brne	.+2      	; 0x2012 <BMP280_Init+0x2a8>
    2010:	d5 c0       	rjmp	.+426    	; 0x21bc <BMP280_Init+0x452>
    2012:	68 e0       	ldi	r22, 0x08	; 8
    2014:	7a e0       	ldi	r23, 0x0A	; 10
    2016:	84 e9       	ldi	r24, 0x94	; 148
    2018:	7b dd       	rcall	.-1290   	; 0x1b10 <BMP280_ReadInt>
    201a:	88 23       	and	r24, r24
    201c:	09 f4       	brne	.+2      	; 0x2020 <BMP280_Init+0x2b6>
    201e:	ce c0       	rjmp	.+412    	; 0x21bc <BMP280_Init+0x452>
    2020:	66 e0       	ldi	r22, 0x06	; 6
    2022:	7a e0       	ldi	r23, 0x0A	; 10
    2024:	86 e9       	ldi	r24, 0x96	; 150
    2026:	74 dd       	rcall	.-1304   	; 0x1b10 <BMP280_ReadInt>
    2028:	88 23       	and	r24, r24
    202a:	09 f4       	brne	.+2      	; 0x202e <BMP280_Init+0x2c4>
    202c:	c7 c0       	rjmp	.+398    	; 0x21bc <BMP280_Init+0x452>
    202e:	64 e0       	ldi	r22, 0x04	; 4
    2030:	7a e0       	ldi	r23, 0x0A	; 10
    2032:	88 e9       	ldi	r24, 0x98	; 152
    2034:	6d dd       	rcall	.-1318   	; 0x1b10 <BMP280_ReadInt>
    2036:	88 23       	and	r24, r24
    2038:	09 f4       	brne	.+2      	; 0x203c <BMP280_Init+0x2d2>
    203a:	c0 c0       	rjmp	.+384    	; 0x21bc <BMP280_Init+0x452>
    203c:	62 e0       	ldi	r22, 0x02	; 2
    203e:	7a e0       	ldi	r23, 0x0A	; 10
    2040:	8a e9       	ldi	r24, 0x9A	; 154
    2042:	66 dd       	rcall	.-1332   	; 0x1b10 <BMP280_ReadInt>
    2044:	88 23       	and	r24, r24
    2046:	09 f4       	brne	.+2      	; 0x204a <BMP280_Init+0x2e0>
    2048:	b9 c0       	rjmp	.+370    	; 0x21bc <BMP280_Init+0x452>
    204a:	60 e0       	ldi	r22, 0x00	; 0
    204c:	7a e0       	ldi	r23, 0x0A	; 10
    204e:	8c e9       	ldi	r24, 0x9C	; 156
    2050:	5f dd       	rcall	.-1346   	; 0x1b10 <BMP280_ReadInt>
    2052:	88 23       	and	r24, r24
    2054:	09 f4       	brne	.+2      	; 0x2058 <BMP280_Init+0x2ee>
    2056:	b2 c0       	rjmp	.+356    	; 0x21bc <BMP280_Init+0x452>
    2058:	6e ef       	ldi	r22, 0xFE	; 254
    205a:	79 e0       	ldi	r23, 0x09	; 9
    205c:	8e e9       	ldi	r24, 0x9E	; 158
    205e:	58 dd       	rcall	.-1360   	; 0x1b10 <BMP280_ReadInt>
    2060:	88 23       	and	r24, r24
    2062:	09 f4       	brne	.+2      	; 0x2066 <BMP280_Init+0x2fc>
    2064:	ab c0       	rjmp	.+342    	; 0x21bc <BMP280_Init+0x452>
    2066:	63 ef       	ldi	r22, 0xF3	; 243
    2068:	79 e0       	ldi	r23, 0x09	; 9
    206a:	81 ea       	ldi	r24, 0xA1	; 161
    206c:	76 dd       	rcall	.-1300   	; 0x1b5a <BMP280_ReadUChar>
    206e:	88 23       	and	r24, r24
    2070:	09 f4       	brne	.+2      	; 0x2074 <BMP280_Init+0x30a>
    2072:	a4 c0       	rjmp	.+328    	; 0x21bc <BMP280_Init+0x452>
    2074:	6c ef       	ldi	r22, 0xFC	; 252
    2076:	79 e0       	ldi	r23, 0x09	; 9
    2078:	81 ee       	ldi	r24, 0xE1	; 225
    207a:	4a dd       	rcall	.-1388   	; 0x1b10 <BMP280_ReadInt>
    207c:	88 23       	and	r24, r24
    207e:	09 f4       	brne	.+2      	; 0x2082 <BMP280_Init+0x318>
    2080:	9d c0       	rjmp	.+314    	; 0x21bc <BMP280_Init+0x452>
    2082:	62 ef       	ldi	r22, 0xF2	; 242
    2084:	79 e0       	ldi	r23, 0x09	; 9
    2086:	83 ee       	ldi	r24, 0xE3	; 227
    2088:	68 dd       	rcall	.-1328   	; 0x1b5a <BMP280_ReadUChar>
    208a:	88 23       	and	r24, r24
    208c:	09 f4       	brne	.+2      	; 0x2090 <BMP280_Init+0x326>
    208e:	96 c0       	rjmp	.+300    	; 0x21bc <BMP280_Init+0x452>
    2090:	6a ef       	ldi	r22, 0xFA	; 250
    2092:	79 e0       	ldi	r23, 0x09	; 9
    2094:	84 ee       	ldi	r24, 0xE4	; 228
    2096:	8d dd       	rcall	.-1254   	; 0x1bb2 <BMP280_ReadInt4>
    2098:	88 23       	and	r24, r24
    209a:	09 f4       	brne	.+2      	; 0x209e <BMP280_Init+0x334>
    209c:	8f c0       	rjmp	.+286    	; 0x21bc <BMP280_Init+0x452>
    209e:	68 ef       	ldi	r22, 0xF8	; 248
    20a0:	79 e0       	ldi	r23, 0x09	; 9
    20a2:	85 ee       	ldi	r24, 0xE5	; 229
    20a4:	d7 dd       	rcall	.-1106   	; 0x1c54 <BMP280_ReadInt5>
    20a6:	88 23       	and	r24, r24
    20a8:	09 f4       	brne	.+2      	; 0x20ac <BMP280_Init+0x342>
    20aa:	88 c0       	rjmp	.+272    	; 0x21bc <BMP280_Init+0x452>
    20ac:	87 ee       	ldi	r24, 0xE7	; 231
    20ae:	89 83       	std	Y+1, r24	; 0x01
    20b0:	61 e0       	ldi	r22, 0x01	; 1
    20b2:	ce 01       	movw	r24, r28
    20b4:	01 96       	adiw	r24, 0x01	; 1
    20b6:	e0 dc       	rcall	.-1600   	; 0x1a78 <BMP280_ReadBytes>
    20b8:	88 23       	and	r24, r24
    20ba:	09 f4       	brne	.+2      	; 0x20be <BMP280_Init+0x354>
    20bc:	7b c0       	rjmp	.+246    	; 0x21b4 <BMP280_Init+0x44a>
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	90 93 f2 09 	sts	0x09F2, r25
    20c6:	80 93 f1 09 	sts	0x09F1, r24
    20ca:	28 2f       	mov	r18, r24
    20cc:	08 2e       	mov	r0, r24
    20ce:	00 0c       	add	r0, r0
    20d0:	33 0b       	sbc	r19, r19
    20d2:	3f 93       	push	r19
    20d4:	8f 93       	push	r24
    20d6:	80 91 f9 09 	lds	r24, 0x09F9
    20da:	8f 93       	push	r24
    20dc:	80 91 f8 09 	lds	r24, 0x09F8
    20e0:	8f 93       	push	r24
    20e2:	80 91 fb 09 	lds	r24, 0x09FB
    20e6:	8f 93       	push	r24
    20e8:	80 91 fa 09 	lds	r24, 0x09FA
    20ec:	8f 93       	push	r24
    20ee:	80 91 f2 09 	lds	r24, 0x09F2
    20f2:	1f 92       	push	r1
    20f4:	8f 93       	push	r24
    20f6:	80 91 fd 09 	lds	r24, 0x09FD
    20fa:	8f 93       	push	r24
    20fc:	80 91 fc 09 	lds	r24, 0x09FC
    2100:	8f 93       	push	r24
    2102:	80 91 f3 09 	lds	r24, 0x09F3
    2106:	1f 92       	push	r1
    2108:	8f 93       	push	r24
    210a:	80 91 ff 09 	lds	r24, 0x09FF
    210e:	8f 93       	push	r24
    2110:	80 91 fe 09 	lds	r24, 0x09FE
    2114:	8f 93       	push	r24
    2116:	80 91 01 0a 	lds	r24, 0x0A01
    211a:	8f 93       	push	r24
    211c:	80 91 00 0a 	lds	r24, 0x0A00
    2120:	8f 93       	push	r24
    2122:	80 91 03 0a 	lds	r24, 0x0A03
    2126:	8f 93       	push	r24
    2128:	80 91 02 0a 	lds	r24, 0x0A02
    212c:	8f 93       	push	r24
    212e:	80 91 05 0a 	lds	r24, 0x0A05
    2132:	8f 93       	push	r24
    2134:	80 91 04 0a 	lds	r24, 0x0A04
    2138:	8f 93       	push	r24
    213a:	80 91 07 0a 	lds	r24, 0x0A07
    213e:	8f 93       	push	r24
    2140:	80 91 06 0a 	lds	r24, 0x0A06
    2144:	8f 93       	push	r24
    2146:	80 91 09 0a 	lds	r24, 0x0A09
    214a:	8f 93       	push	r24
    214c:	80 91 08 0a 	lds	r24, 0x0A08
    2150:	8f 93       	push	r24
    2152:	80 91 0b 0a 	lds	r24, 0x0A0B
    2156:	8f 93       	push	r24
    2158:	80 91 0a 0a 	lds	r24, 0x0A0A
    215c:	8f 93       	push	r24
    215e:	80 91 0d 0a 	lds	r24, 0x0A0D
    2162:	8f 93       	push	r24
    2164:	80 91 0c 0a 	lds	r24, 0x0A0C
    2168:	8f 93       	push	r24
    216a:	80 91 f5 09 	lds	r24, 0x09F5
    216e:	8f 93       	push	r24
    2170:	80 91 f4 09 	lds	r24, 0x09F4
    2174:	8f 93       	push	r24
    2176:	80 91 0f 0a 	lds	r24, 0x0A0F
    217a:	8f 93       	push	r24
    217c:	80 91 0e 0a 	lds	r24, 0x0A0E
    2180:	8f 93       	push	r24
    2182:	80 91 11 0a 	lds	r24, 0x0A11
    2186:	8f 93       	push	r24
    2188:	80 91 10 0a 	lds	r24, 0x0A10
    218c:	8f 93       	push	r24
    218e:	80 91 f7 09 	lds	r24, 0x09F7
    2192:	8f 93       	push	r24
    2194:	80 91 f6 09 	lds	r24, 0x09F6
    2198:	8f 93       	push	r24
    219a:	81 e5       	ldi	r24, 0x51	; 81
    219c:	95 e0       	ldi	r25, 0x05	; 5
    219e:	9f 93       	push	r25
    21a0:	8f 93       	push	r24
    21a2:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	f8 94       	cli
    21aa:	de bf       	out	0x3e, r29	; 62
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	cd bf       	out	0x3d, r28	; 61
    21b0:	81 e0       	ldi	r24, 0x01	; 1
    21b2:	04 c0       	rjmp	.+8      	; 0x21bc <BMP280_Init+0x452>
    21b4:	10 92 f2 09 	sts	0x09F2, r1
    21b8:	10 92 f1 09 	sts	0x09F1, r1
    21bc:	0f 90       	pop	r0
    21be:	df 91       	pop	r29
    21c0:	cf 91       	pop	r28
    21c2:	1f 91       	pop	r17
    21c4:	0f 91       	pop	r16
    21c6:	08 95       	ret

000021c8 <BMP280_SetOversampling>:
  @brief Sets the oversampling setting for the library
  @param[in] oss Oversampling setting
  @return 1
*****************************************************************************/
char BMP280_SetOversampling(short oss){
	oversampling = oss;
    21c8:	90 93 f0 09 	sts	0x09F0, r25
    21cc:	80 93 ef 09 	sts	0x09EF, r24
	return (1);
}
    21d0:	81 e0       	ldi	r24, 0x01	; 1
    21d2:	08 95       	ret

000021d4 <BMP280_StartMeasurment>:

/*************************************************************************//**
  @brief Starts a measurement
  @return time to wait for result (in ms)
*****************************************************************************/
char BMP280_StartMeasurment(void){
    21d4:	1f 93       	push	r17
    21d6:	cf 93       	push	r28
    21d8:	df 93       	push	r29
    21da:	1f 92       	push	r1
    21dc:	1f 92       	push	r1
    21de:	cd b7       	in	r28, 0x3d	; 61
    21e0:	de b7       	in	r29, 0x3e	; 62
	unsigned char data[2], result, delay;
	
	data[0] = BMP280_REG_CONTROL;
    21e2:	84 ef       	ldi	r24, 0xF4	; 244
    21e4:	89 83       	std	Y+1, r24	; 0x01

	switch (oversampling){
    21e6:	80 91 ef 09 	lds	r24, 0x09EF
    21ea:	90 91 f0 09 	lds	r25, 0x09F0
    21ee:	82 30       	cpi	r24, 0x02	; 2
    21f0:	91 05       	cpc	r25, r1
    21f2:	01 f1       	breq	.+64     	; 0x2234 <BMP280_StartMeasurment+0x60>
    21f4:	2c f4       	brge	.+10     	; 0x2200 <BMP280_StartMeasurment+0x2c>
    21f6:	00 97       	sbiw	r24, 0x00	; 0
    21f8:	49 f0       	breq	.+18     	; 0x220c <BMP280_StartMeasurment+0x38>
    21fa:	01 97       	sbiw	r24, 0x01	; 1
    21fc:	89 f0       	breq	.+34     	; 0x2220 <BMP280_StartMeasurment+0x4c>
    21fe:	38 c0       	rjmp	.+112    	; 0x2270 <BMP280_StartMeasurment+0x9c>
    2200:	83 30       	cpi	r24, 0x03	; 3
    2202:	91 05       	cpc	r25, r1
    2204:	09 f1       	breq	.+66     	; 0x2248 <BMP280_StartMeasurment+0x74>
    2206:	04 97       	sbiw	r24, 0x04	; 4
    2208:	49 f1       	breq	.+82     	; 0x225c <BMP280_StartMeasurment+0x88>
    220a:	32 c0       	rjmp	.+100    	; 0x2270 <BMP280_StartMeasurment+0x9c>
		case 0:
		data[1] = BMP280_COMMAND_PRESSURE0;
    220c:	85 e2       	ldi	r24, 0x25	; 37
    220e:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	90 93 ee 09 	sts	0x09EE, r25
    2218:	80 93 ed 09 	sts	0x09ED, r24
		delay = 8;
    221c:	18 e0       	ldi	r17, 0x08	; 8
		break;
    221e:	2b c0       	rjmp	.+86     	; 0x2276 <BMP280_StartMeasurment+0xa2>
		case 1:
		data[1] = BMP280_COMMAND_PRESSURE1;
    2220:	89 e2       	ldi	r24, 0x29	; 41
    2222:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    2224:	81 e0       	ldi	r24, 0x01	; 1
    2226:	90 e0       	ldi	r25, 0x00	; 0
    2228:	90 93 ee 09 	sts	0x09EE, r25
    222c:	80 93 ed 09 	sts	0x09ED, r24
		delay = 10;
    2230:	1a e0       	ldi	r17, 0x0A	; 10
		break;
    2232:	21 c0       	rjmp	.+66     	; 0x2276 <BMP280_StartMeasurment+0xa2>
		case 2:
		data[1] = BMP280_COMMAND_PRESSURE2;
    2234:	8d e2       	ldi	r24, 0x2D	; 45
    2236:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	90 93 ee 09 	sts	0x09EE, r25
    2240:	80 93 ed 09 	sts	0x09ED, r24
		delay = 15;
    2244:	1f e0       	ldi	r17, 0x0F	; 15
		break;
    2246:	17 c0       	rjmp	.+46     	; 0x2276 <BMP280_StartMeasurment+0xa2>
		case 3:
		data[1] = BMP280_COMMAND_PRESSURE3;
    2248:	81 e3       	ldi	r24, 0x31	; 49
    224a:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	90 93 ee 09 	sts	0x09EE, r25
    2254:	80 93 ed 09 	sts	0x09ED, r24
		delay = 24;
    2258:	18 e1       	ldi	r17, 0x18	; 24
		break;
    225a:	0d c0       	rjmp	.+26     	; 0x2276 <BMP280_StartMeasurment+0xa2>
		case 4:
		data[1] = BMP280_COMMAND_PRESSURE4;
    225c:	8d e5       	ldi	r24, 0x5D	; 93
    225e:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    2260:	81 e0       	ldi	r24, 0x01	; 1
    2262:	90 e0       	ldi	r25, 0x00	; 0
    2264:	90 93 ee 09 	sts	0x09EE, r25
    2268:	80 93 ed 09 	sts	0x09ED, r24
		delay = 45;
    226c:	1d e2       	ldi	r17, 0x2D	; 45
		break;
    226e:	03 c0       	rjmp	.+6      	; 0x2276 <BMP280_StartMeasurment+0xa2>
		default:
		data[1] = BMP280_COMMAND_PRESSURE0;
    2270:	85 e2       	ldi	r24, 0x25	; 37
    2272:	8a 83       	std	Y+2, r24	; 0x02
		delay = 9;
    2274:	19 e0       	ldi	r17, 0x09	; 9
  @param[in] *values pointer to an array to send, put the starting register in values[0]
  @param[in] length how many bytes to write (including the starting register ie. sizeof(values))
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_WriteBytes(unsigned char *values, char length){
	TWI_BeginWrite(BMP280_ADDR);
    2276:	86 e7       	ldi	r24, 0x76	; 118
    2278:	0e 94 36 05 	call	0xa6c	; 0xa6c <TWI_BeginWrite>
	if((TWI_Write(&values[0],length) == TWI_SENT_ACK) && (TWI_Stop() != 0)) return 1; //Send bytes, a STOP bit, and check for success
    227c:	62 e0       	ldi	r22, 0x02	; 2
    227e:	70 e0       	ldi	r23, 0x00	; 0
    2280:	ce 01       	movw	r24, r28
    2282:	01 96       	adiw	r24, 0x01	; 1
    2284:	0e 94 c8 05 	call	0xb90	; 0xb90 <TWI_Write>
    2288:	88 32       	cpi	r24, 0x28	; 40
    228a:	31 f4       	brne	.+12     	; 0x2298 <BMP280_StartMeasurment+0xc4>
    228c:	0e 94 89 05 	call	0xb12	; 0xb12 <TWI_Stop>
		data[1] = BMP280_COMMAND_PRESSURE0;
		delay = 9;
		break;
	}
	result = BMP280_WriteBytes(&data[0], 2);
	if (result) // good write?
    2290:	88 23       	and	r24, r24
    2292:	21 f0       	breq	.+8      	; 0x229c <BMP280_StartMeasurment+0xc8>
	return(delay); // return the delay in ms (rounded up) to wait before retrieving data
    2294:	81 2f       	mov	r24, r17
    2296:	03 c0       	rjmp	.+6      	; 0x229e <BMP280_StartMeasurment+0xca>
	else
	return(-1); // or return -1 if there was a problem communicating with the BMP
    2298:	8f ef       	ldi	r24, 0xFF	; 255
    229a:	01 c0       	rjmp	.+2      	; 0x229e <BMP280_StartMeasurment+0xca>
    229c:	8f ef       	ldi	r24, 0xFF	; 255
	//printf("failure on writeInt");
}
    229e:	0f 90       	pop	r0
    22a0:	0f 90       	pop	r0
    22a2:	df 91       	pop	r29
    22a4:	cf 91       	pop	r28
    22a6:	1f 91       	pop	r17
    22a8:	08 95       	ret

000022aa <BMP280_GetUnPTH>:
  @brief Gets the uncalibrated temperature and pressure and humidity data
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetUnPTH(double *uP, double *uT, double *uH){
    22aa:	4f 92       	push	r4
    22ac:	5f 92       	push	r5
    22ae:	6f 92       	push	r6
    22b0:	7f 92       	push	r7
    22b2:	af 92       	push	r10
    22b4:	bf 92       	push	r11
    22b6:	cf 92       	push	r12
    22b8:	df 92       	push	r13
    22ba:	ef 92       	push	r14
    22bc:	ff 92       	push	r15
    22be:	1f 93       	push	r17
    22c0:	cf 93       	push	r28
    22c2:	df 93       	push	r29
    22c4:	cd b7       	in	r28, 0x3d	; 61
    22c6:	de b7       	in	r29, 0x3e	; 62
    22c8:	29 97       	sbiw	r28, 0x09	; 9
    22ca:	0f b6       	in	r0, 0x3f	; 63
    22cc:	f8 94       	cli
    22ce:	de bf       	out	0x3e, r29	; 62
    22d0:	0f be       	out	0x3f, r0	; 63
    22d2:	cd bf       	out	0x3d, r28	; 61
    22d4:	5c 01       	movw	r10, r24
    22d6:	6b 01       	movw	r12, r22
    22d8:	7a 01       	movw	r14, r20
	unsigned char data[9];
	char result;
	
	data[0] = BMP280_REG_RESULT_PRESSURE; //0xF7
    22da:	97 ef       	ldi	r25, 0xF7	; 247
    22dc:	99 83       	std	Y+1, r25	; 0x01

	result = BMP280_ReadBytes(&data[0], 8); // 0xF7; xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE
    22de:	68 e0       	ldi	r22, 0x08	; 8
    22e0:	ce 01       	movw	r24, r28
    22e2:	01 96       	adiw	r24, 0x01	; 1
    22e4:	c9 db       	rcall	.-2158   	; 0x1a78 <BMP280_ReadBytes>
    22e6:	18 2f       	mov	r17, r24
	if (result){ // good read
    22e8:	88 23       	and	r24, r24
    22ea:	09 f4       	brne	.+2      	; 0x22ee <BMP280_GetUnPTH+0x44>
    22ec:	c0 c0       	rjmp	.+384    	; 0x246e <BMP280_GetUnPTH+0x1c4>
		double factor = pow(2, 4);
		*uP = ( (data[0] *256.0) + data[1] + (data[2]/256.0) ) * factor ;	//20bit UP
    22ee:	69 81       	ldd	r22, Y+1	; 0x01
    22f0:	70 e0       	ldi	r23, 0x00	; 0
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	0e 94 c0 19 	call	0x3380	; 0x3380 <__floatsisf>
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e8       	ldi	r20, 0x80	; 128
    2300:	53 e4       	ldi	r21, 0x43	; 67
    2302:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <__mulsf3>
    2306:	2b 01       	movw	r4, r22
    2308:	3c 01       	movw	r6, r24
    230a:	8a 81       	ldd	r24, Y+2	; 0x02
    230c:	68 2f       	mov	r22, r24
    230e:	70 e0       	ldi	r23, 0x00	; 0
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	0e 94 c0 19 	call	0x3380	; 0x3380 <__floatsisf>
    2318:	9b 01       	movw	r18, r22
    231a:	ac 01       	movw	r20, r24
    231c:	c3 01       	movw	r24, r6
    231e:	b2 01       	movw	r22, r4
    2320:	2c d7       	rcall	.+3672   	; 0x317a <__addsf3>
    2322:	2b 01       	movw	r4, r22
    2324:	3c 01       	movw	r6, r24
    2326:	8b 81       	ldd	r24, Y+3	; 0x03
    2328:	68 2f       	mov	r22, r24
    232a:	70 e0       	ldi	r23, 0x00	; 0
    232c:	80 e0       	ldi	r24, 0x00	; 0
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	0e 94 c0 19 	call	0x3380	; 0x3380 <__floatsisf>
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	40 e8       	ldi	r20, 0x80	; 128
    233a:	5b e3       	ldi	r21, 0x3B	; 59
    233c:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <__mulsf3>
    2340:	9b 01       	movw	r18, r22
    2342:	ac 01       	movw	r20, r24
    2344:	c3 01       	movw	r24, r6
    2346:	b2 01       	movw	r22, r4
    2348:	18 d7       	rcall	.+3632   	; 0x317a <__addsf3>
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e8       	ldi	r20, 0x80	; 128
    2350:	51 e4       	ldi	r21, 0x41	; 65
    2352:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <__mulsf3>
    2356:	f5 01       	movw	r30, r10
    2358:	60 83       	st	Z, r22
    235a:	71 83       	std	Z+1, r23	; 0x01
    235c:	82 83       	std	Z+2, r24	; 0x02
    235e:	93 83       	std	Z+3, r25	; 0x03
		*uT = ( (data[3] *256.0) + data[4] + (data[5]/256.0) ) * factor ;	//20bit UT
    2360:	6c 81       	ldd	r22, Y+4	; 0x04
    2362:	70 e0       	ldi	r23, 0x00	; 0
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	0e 94 c0 19 	call	0x3380	; 0x3380 <__floatsisf>
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	30 e0       	ldi	r19, 0x00	; 0
    2370:	40 e8       	ldi	r20, 0x80	; 128
    2372:	53 e4       	ldi	r21, 0x43	; 67
    2374:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <__mulsf3>
    2378:	2b 01       	movw	r4, r22
    237a:	3c 01       	movw	r6, r24
    237c:	8d 81       	ldd	r24, Y+5	; 0x05
    237e:	68 2f       	mov	r22, r24
    2380:	70 e0       	ldi	r23, 0x00	; 0
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	fc d7       	rcall	.+4088   	; 0x3380 <__floatsisf>
    2388:	9b 01       	movw	r18, r22
    238a:	ac 01       	movw	r20, r24
    238c:	c3 01       	movw	r24, r6
    238e:	b2 01       	movw	r22, r4
    2390:	f4 d6       	rcall	.+3560   	; 0x317a <__addsf3>
    2392:	2b 01       	movw	r4, r22
    2394:	3c 01       	movw	r6, r24
    2396:	8e 81       	ldd	r24, Y+6	; 0x06
    2398:	68 2f       	mov	r22, r24
    239a:	70 e0       	ldi	r23, 0x00	; 0
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	ef d7       	rcall	.+4062   	; 0x3380 <__floatsisf>
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	40 e8       	ldi	r20, 0x80	; 128
    23a8:	5b e3       	ldi	r21, 0x3B	; 59
    23aa:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <__mulsf3>
    23ae:	9b 01       	movw	r18, r22
    23b0:	ac 01       	movw	r20, r24
    23b2:	c3 01       	movw	r24, r6
    23b4:	b2 01       	movw	r22, r4
    23b6:	e1 d6       	rcall	.+3522   	; 0x317a <__addsf3>
    23b8:	20 e0       	ldi	r18, 0x00	; 0
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e8       	ldi	r20, 0x80	; 128
    23be:	51 e4       	ldi	r21, 0x41	; 65
    23c0:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <__mulsf3>
    23c4:	f6 01       	movw	r30, r12
    23c6:	60 83       	st	Z, r22
    23c8:	71 83       	std	Z+1, r23	; 0x01
    23ca:	82 83       	std	Z+2, r24	; 0x02
    23cc:	93 83       	std	Z+3, r25	; 0x03
		*uH = ( (data[6] *256.0) + data[7] ) * factor ;	//16bit UH
    23ce:	6f 81       	ldd	r22, Y+7	; 0x07
    23d0:	70 e0       	ldi	r23, 0x00	; 0
    23d2:	80 e0       	ldi	r24, 0x00	; 0
    23d4:	90 e0       	ldi	r25, 0x00	; 0
    23d6:	d4 d7       	rcall	.+4008   	; 0x3380 <__floatsisf>
    23d8:	20 e0       	ldi	r18, 0x00	; 0
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	40 e8       	ldi	r20, 0x80	; 128
    23de:	53 e4       	ldi	r21, 0x43	; 67
    23e0:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <__mulsf3>
    23e4:	2b 01       	movw	r4, r22
    23e6:	3c 01       	movw	r6, r24
    23e8:	88 85       	ldd	r24, Y+8	; 0x08
    23ea:	68 2f       	mov	r22, r24
    23ec:	70 e0       	ldi	r23, 0x00	; 0
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	c6 d7       	rcall	.+3980   	; 0x3380 <__floatsisf>
    23f4:	9b 01       	movw	r18, r22
    23f6:	ac 01       	movw	r20, r24
    23f8:	c3 01       	movw	r24, r6
    23fa:	b2 01       	movw	r22, r4
    23fc:	be d6       	rcall	.+3452   	; 0x317a <__addsf3>
    23fe:	20 e0       	ldi	r18, 0x00	; 0
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	40 e8       	ldi	r20, 0x80	; 128
    2404:	51 e4       	ldi	r21, 0x41	; 65
    2406:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <__mulsf3>
    240a:	f7 01       	movw	r30, r14
    240c:	60 83       	st	Z, r22
    240e:	71 83       	std	Z+1, r23	; 0x01
    2410:	82 83       	std	Z+2, r24	; 0x02
    2412:	93 83       	std	Z+3, r25	; 0x03
		printf("\nH: %i ,%i ,%i ,%i ,%i ,%i \n",dig_H1,dig_H2,dig_H3,dig_H4,dig_H5,dig_H6);
    2414:	80 91 f1 09 	lds	r24, 0x09F1
    2418:	28 2f       	mov	r18, r24
    241a:	08 2e       	mov	r0, r24
    241c:	00 0c       	add	r0, r0
    241e:	33 0b       	sbc	r19, r19
    2420:	3f 93       	push	r19
    2422:	8f 93       	push	r24
    2424:	80 91 f9 09 	lds	r24, 0x09F9
    2428:	8f 93       	push	r24
    242a:	80 91 f8 09 	lds	r24, 0x09F8
    242e:	8f 93       	push	r24
    2430:	80 91 fb 09 	lds	r24, 0x09FB
    2434:	8f 93       	push	r24
    2436:	80 91 fa 09 	lds	r24, 0x09FA
    243a:	8f 93       	push	r24
    243c:	80 91 f2 09 	lds	r24, 0x09F2
    2440:	1f 92       	push	r1
    2442:	8f 93       	push	r24
    2444:	80 91 fd 09 	lds	r24, 0x09FD
    2448:	8f 93       	push	r24
    244a:	80 91 fc 09 	lds	r24, 0x09FC
    244e:	8f 93       	push	r24
    2450:	80 91 f3 09 	lds	r24, 0x09F3
    2454:	1f 92       	push	r1
    2456:	8f 93       	push	r24
    2458:	88 e8       	ldi	r24, 0x88	; 136
    245a:	95 e0       	ldi	r25, 0x05	; 5
    245c:	9f 93       	push	r25
    245e:	8f 93       	push	r24
    2460:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    2464:	0f b6       	in	r0, 0x3f	; 63
    2466:	f8 94       	cli
    2468:	de bf       	out	0x3e, r29	; 62
    246a:	0f be       	out	0x3f, r0	; 63
    246c:	cd bf       	out	0x3d, r28	; 61
	}
	return(result);
}
    246e:	81 2f       	mov	r24, r17
    2470:	29 96       	adiw	r28, 0x09	; 9
    2472:	0f b6       	in	r0, 0x3f	; 63
    2474:	f8 94       	cli
    2476:	de bf       	out	0x3e, r29	; 62
    2478:	0f be       	out	0x3f, r0	; 63
    247a:	cd bf       	out	0x3d, r28	; 61
    247c:	df 91       	pop	r29
    247e:	cf 91       	pop	r28
    2480:	1f 91       	pop	r17
    2482:	ff 90       	pop	r15
    2484:	ef 90       	pop	r14
    2486:	df 90       	pop	r13
    2488:	cf 90       	pop	r12
    248a:	bf 90       	pop	r11
    248c:	af 90       	pop	r10
    248e:	7f 90       	pop	r7
    2490:	6f 90       	pop	r6
    2492:	5f 90       	pop	r5
    2494:	4f 90       	pop	r4
    2496:	08 95       	ret

00002498 <BMP280_CalcTemperature>:
  @brief Calculates temperature
  @param[out] pointer to a place to store the temperature data
  @param[in] pointer to the uncalibrated temperature data
  @return status
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
    2498:	4f 92       	push	r4
    249a:	5f 92       	push	r5
    249c:	6f 92       	push	r6
    249e:	7f 92       	push	r7
    24a0:	8f 92       	push	r8
    24a2:	9f 92       	push	r9
    24a4:	af 92       	push	r10
    24a6:	bf 92       	push	r11
    24a8:	cf 92       	push	r12
    24aa:	df 92       	push	r13
    24ac:	ef 92       	push	r14
    24ae:	ff 92       	push	r15
    24b0:	cf 93       	push	r28
    24b2:	df 93       	push	r29
    24b4:	ec 01       	movw	r28, r24
	double adc_T = *uT ;
    24b6:	fb 01       	movw	r30, r22
    24b8:	c0 80       	ld	r12, Z
    24ba:	d1 80       	ldd	r13, Z+1	; 0x01
    24bc:	e2 80       	ldd	r14, Z+2	; 0x02
    24be:	f3 80       	ldd	r15, Z+3	; 0x03
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
    24c0:	80 91 f6 09 	lds	r24, 0x09F6
    24c4:	90 91 f7 09 	lds	r25, 0x09F7
    24c8:	bc 01       	movw	r22, r24
    24ca:	80 e0       	ldi	r24, 0x00	; 0
    24cc:	90 e0       	ldi	r25, 0x00	; 0
    24ce:	56 d7       	rcall	.+3756   	; 0x337c <__floatunsisf>
    24d0:	2b 01       	movw	r4, r22
    24d2:	3c 01       	movw	r6, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 e0       	ldi	r20, 0x00	; 0
    24da:	57 e3       	ldi	r21, 0x37	; 55
    24dc:	c7 01       	movw	r24, r14
    24de:	b6 01       	movw	r22, r12
    24e0:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <__mulsf3>
    24e4:	4b 01       	movw	r8, r22
    24e6:	5c 01       	movw	r10, r24
    24e8:	20 e0       	ldi	r18, 0x00	; 0
    24ea:	30 e0       	ldi	r19, 0x00	; 0
    24ec:	40 e0       	ldi	r20, 0x00	; 0
    24ee:	59 e3       	ldi	r21, 0x39	; 57
    24f0:	c3 01       	movw	r24, r6
    24f2:	b2 01       	movw	r22, r4
    24f4:	f9 d7       	rcall	.+4082   	; 0x34e8 <__mulsf3>
    24f6:	9b 01       	movw	r18, r22
    24f8:	ac 01       	movw	r20, r24
    24fa:	c5 01       	movw	r24, r10
    24fc:	b4 01       	movw	r22, r8
    24fe:	3c d6       	rcall	.+3192   	; 0x3178 <__subsf3>
    2500:	4b 01       	movw	r8, r22
    2502:	5c 01       	movw	r10, r24
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
	double adc_T = *uT ;
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	40 e8       	ldi	r20, 0x80	; 128
    250a:	58 e3       	ldi	r21, 0x38	; 56
    250c:	c7 01       	movw	r24, r14
    250e:	b6 01       	movw	r22, r12
    2510:	eb d7       	rcall	.+4054   	; 0x34e8 <__mulsf3>
    2512:	6b 01       	movw	r12, r22
    2514:	7c 01       	movw	r14, r24
    2516:	20 e0       	ldi	r18, 0x00	; 0
    2518:	30 e0       	ldi	r19, 0x00	; 0
    251a:	40 e8       	ldi	r20, 0x80	; 128
    251c:	5a e3       	ldi	r21, 0x3A	; 58
    251e:	c3 01       	movw	r24, r6
    2520:	b2 01       	movw	r22, r4
    2522:	e2 d7       	rcall	.+4036   	; 0x34e8 <__mulsf3>
    2524:	9b 01       	movw	r18, r22
    2526:	ac 01       	movw	r20, r24
    2528:	c7 01       	movw	r24, r14
    252a:	b6 01       	movw	r22, r12
    252c:	25 d6       	rcall	.+3146   	; 0x3178 <__subsf3>
    252e:	6b 01       	movw	r12, r22
    2530:	7c 01       	movw	r14, r24
    2532:	80 91 10 0a 	lds	r24, 0x0A10
    2536:	90 91 11 0a 	lds	r25, 0x0A11
    253a:	bc 01       	movw	r22, r24
    253c:	99 0f       	add	r25, r25
    253e:	88 0b       	sbc	r24, r24
    2540:	99 0b       	sbc	r25, r25
    2542:	1e d7       	rcall	.+3644   	; 0x3380 <__floatsisf>
    2544:	9b 01       	movw	r18, r22
    2546:	ac 01       	movw	r20, r24
    2548:	c7 01       	movw	r24, r14
    254a:	b6 01       	movw	r22, r12
    254c:	cd d7       	rcall	.+3994   	; 0x34e8 <__mulsf3>
    254e:	6b 01       	movw	r12, r22
    2550:	7c 01       	movw	r14, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
    2552:	a5 01       	movw	r20, r10
    2554:	94 01       	movw	r18, r8
    2556:	c5 01       	movw	r24, r10
    2558:	b4 01       	movw	r22, r8
    255a:	c6 d7       	rcall	.+3980   	; 0x34e8 <__mulsf3>
    255c:	4b 01       	movw	r8, r22
    255e:	5c 01       	movw	r10, r24
    2560:	40 91 0e 0a 	lds	r20, 0x0A0E
    2564:	50 91 0f 0a 	lds	r21, 0x0A0F
    2568:	ba 01       	movw	r22, r20
    256a:	55 0f       	add	r21, r21
    256c:	88 0b       	sbc	r24, r24
    256e:	99 0b       	sbc	r25, r25
    2570:	07 d7       	rcall	.+3598   	; 0x3380 <__floatsisf>
    2572:	9b 01       	movw	r18, r22
    2574:	ac 01       	movw	r20, r24
    2576:	c5 01       	movw	r24, r10
    2578:	b4 01       	movw	r22, r8
    257a:	b6 d7       	rcall	.+3948   	; 0x34e8 <__mulsf3>
    257c:	9b 01       	movw	r18, r22
    257e:	ac 01       	movw	r20, r24
	t_fine = (long signed int)(var1+var2);
    2580:	c7 01       	movw	r24, r14
    2582:	b6 01       	movw	r22, r12
    2584:	fa d5       	rcall	.+3060   	; 0x317a <__addsf3>
    2586:	6b 01       	movw	r12, r22
    2588:	7c 01       	movw	r14, r24
    258a:	c7 d6       	rcall	.+3470   	; 0x331a <__fixsfsi>
    258c:	60 93 e9 09 	sts	0x09E9, r22
    2590:	70 93 ea 09 	sts	0x09EA, r23
    2594:	80 93 eb 09 	sts	0x09EB, r24
    2598:	90 93 ec 09 	sts	0x09EC, r25
	
	*T = (var1+var2)/5120.0;
    259c:	20 e0       	ldi	r18, 0x00	; 0
    259e:	30 e0       	ldi	r19, 0x00	; 0
    25a0:	40 ea       	ldi	r20, 0xA0	; 160
    25a2:	55 e4       	ldi	r21, 0x45	; 69
    25a4:	c7 01       	movw	r24, r14
    25a6:	b6 01       	movw	r22, r12
    25a8:	50 d6       	rcall	.+3232   	; 0x324a <__divsf3>
    25aa:	6b 01       	movw	r12, r22
    25ac:	7c 01       	movw	r14, r24
    25ae:	68 83       	st	Y, r22
    25b0:	79 83       	std	Y+1, r23	; 0x01
    25b2:	8a 83       	std	Y+2, r24	; 0x02
    25b4:	9b 83       	std	Y+3, r25	; 0x03
	
	if(*T>100.0 || *T <(-100.0))return 0;
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	48 ec       	ldi	r20, 0xC8	; 200
    25bc:	52 e4       	ldi	r21, 0x42	; 66
    25be:	90 d7       	rcall	.+3872   	; 0x34e0 <__gesf2>
    25c0:	18 16       	cp	r1, r24
    25c2:	6c f0       	brlt	.+26     	; 0x25de <BMP280_CalcTemperature+0x146>
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	48 ec       	ldi	r20, 0xC8	; 200
    25ca:	52 ec       	ldi	r21, 0xC2	; 194
    25cc:	c7 01       	movw	r24, r14
    25ce:	b6 01       	movw	r22, r12
    25d0:	38 d6       	rcall	.+3184   	; 0x3242 <__cmpsf2>
    25d2:	88 1f       	adc	r24, r24
    25d4:	88 27       	eor	r24, r24
    25d6:	88 1f       	adc	r24, r24
    25d8:	91 e0       	ldi	r25, 0x01	; 1
    25da:	89 27       	eor	r24, r25
    25dc:	01 c0       	rjmp	.+2      	; 0x25e0 <BMP280_CalcTemperature+0x148>
    25de:	80 e0       	ldi	r24, 0x00	; 0
	
	return (1);
}
    25e0:	df 91       	pop	r29
    25e2:	cf 91       	pop	r28
    25e4:	ff 90       	pop	r15
    25e6:	ef 90       	pop	r14
    25e8:	df 90       	pop	r13
    25ea:	cf 90       	pop	r12
    25ec:	bf 90       	pop	r11
    25ee:	af 90       	pop	r10
    25f0:	9f 90       	pop	r9
    25f2:	8f 90       	pop	r8
    25f4:	7f 90       	pop	r7
    25f6:	6f 90       	pop	r6
    25f8:	5f 90       	pop	r5
    25fa:	4f 90       	pop	r4
    25fc:	08 95       	ret

000025fe <BMP280_CalcPressure>:
  @brief Calculates pressure
  @param[out] pointer to a place to store the pressure data
  @param[in] pointer to the uncalibrated pressure data
  @return status
*****************************************************************************/
char BMP280_CalcPressure(double *P,double *uP){
    25fe:	4f 92       	push	r4
    2600:	5f 92       	push	r5
    2602:	6f 92       	push	r6
    2604:	7f 92       	push	r7
    2606:	8f 92       	push	r8
    2608:	9f 92       	push	r9
    260a:	af 92       	push	r10
    260c:	bf 92       	push	r11
    260e:	cf 92       	push	r12
    2610:	df 92       	push	r13
    2612:	ef 92       	push	r14
    2614:	ff 92       	push	r15
    2616:	0f 93       	push	r16
    2618:	1f 93       	push	r17
    261a:	cf 93       	push	r28
    261c:	df 93       	push	r29
    261e:	8c 01       	movw	r16, r24
    2620:	eb 01       	movw	r28, r22
	//char result;
	double var1 , var2 ;
	
	var1 = ((double)t_fine/2.0) - 64000.0;
    2622:	60 91 e9 09 	lds	r22, 0x09E9
    2626:	70 91 ea 09 	lds	r23, 0x09EA
    262a:	80 91 eb 09 	lds	r24, 0x09EB
    262e:	90 91 ec 09 	lds	r25, 0x09EC
    2632:	a6 d6       	rcall	.+3404   	; 0x3380 <__floatsisf>
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	40 e0       	ldi	r20, 0x00	; 0
    263a:	5f e3       	ldi	r21, 0x3F	; 63
    263c:	55 d7       	rcall	.+3754   	; 0x34e8 <__mulsf3>
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	4a e7       	ldi	r20, 0x7A	; 122
    2644:	57 e4       	ldi	r21, 0x47	; 71
    2646:	98 d5       	rcall	.+2864   	; 0x3178 <__subsf3>
    2648:	6b 01       	movw	r12, r22
    264a:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
    264c:	60 91 04 0a 	lds	r22, 0x0A04
    2650:	70 91 05 0a 	lds	r23, 0x0A05
    2654:	07 2e       	mov	r0, r23
    2656:	00 0c       	add	r0, r0
    2658:	88 0b       	sbc	r24, r24
    265a:	99 0b       	sbc	r25, r25
    265c:	91 d6       	rcall	.+3362   	; 0x3380 <__floatsisf>
    265e:	a7 01       	movw	r20, r14
    2660:	96 01       	movw	r18, r12
    2662:	42 d7       	rcall	.+3716   	; 0x34e8 <__mulsf3>
    2664:	20 e0       	ldi	r18, 0x00	; 0
    2666:	30 e0       	ldi	r19, 0x00	; 0
    2668:	40 e0       	ldi	r20, 0x00	; 0
    266a:	58 e3       	ldi	r21, 0x38	; 56
    266c:	3d d7       	rcall	.+3706   	; 0x34e8 <__mulsf3>
    266e:	a7 01       	movw	r20, r14
    2670:	96 01       	movw	r18, r12
    2672:	3a d7       	rcall	.+3700   	; 0x34e8 <__mulsf3>
    2674:	4b 01       	movw	r8, r22
    2676:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
    2678:	60 91 06 0a 	lds	r22, 0x0A06
    267c:	70 91 07 0a 	lds	r23, 0x0A07
    2680:	07 2e       	mov	r0, r23
    2682:	00 0c       	add	r0, r0
    2684:	88 0b       	sbc	r24, r24
    2686:	99 0b       	sbc	r25, r25
    2688:	7b d6       	rcall	.+3318   	; 0x3380 <__floatsisf>
    268a:	a7 01       	movw	r20, r14
    268c:	96 01       	movw	r18, r12
    268e:	2c d7       	rcall	.+3672   	; 0x34e8 <__mulsf3>
    2690:	9b 01       	movw	r18, r22
    2692:	ac 01       	movw	r20, r24
    2694:	72 d5       	rcall	.+2788   	; 0x317a <__addsf3>
    2696:	a5 01       	movw	r20, r10
    2698:	94 01       	movw	r18, r8
    269a:	6f d5       	rcall	.+2782   	; 0x317a <__addsf3>
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	30 e0       	ldi	r19, 0x00	; 0
    26a0:	40 e8       	ldi	r20, 0x80	; 128
    26a2:	5e e3       	ldi	r21, 0x3E	; 62
    26a4:	21 d7       	rcall	.+3650   	; 0x34e8 <__mulsf3>
    26a6:	4b 01       	movw	r8, r22
    26a8:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var1 = (((double)dig_P3) * var1 * var1/524288.0 + ((double)dig_P2) * var1) / 524288.0;
    26aa:	60 91 0a 0a 	lds	r22, 0x0A0A
    26ae:	70 91 0b 0a 	lds	r23, 0x0A0B
    26b2:	07 2e       	mov	r0, r23
    26b4:	00 0c       	add	r0, r0
    26b6:	88 0b       	sbc	r24, r24
    26b8:	99 0b       	sbc	r25, r25
    26ba:	62 d6       	rcall	.+3268   	; 0x3380 <__floatsisf>
    26bc:	a7 01       	movw	r20, r14
    26be:	96 01       	movw	r18, r12
    26c0:	13 d7       	rcall	.+3622   	; 0x34e8 <__mulsf3>
    26c2:	a7 01       	movw	r20, r14
    26c4:	96 01       	movw	r18, r12
    26c6:	10 d7       	rcall	.+3616   	; 0x34e8 <__mulsf3>
    26c8:	20 e0       	ldi	r18, 0x00	; 0
    26ca:	30 e0       	ldi	r19, 0x00	; 0
    26cc:	40 e0       	ldi	r20, 0x00	; 0
    26ce:	56 e3       	ldi	r21, 0x36	; 54
    26d0:	0b d7       	rcall	.+3606   	; 0x34e8 <__mulsf3>
    26d2:	2b 01       	movw	r4, r22
    26d4:	3c 01       	movw	r6, r24
    26d6:	60 91 0c 0a 	lds	r22, 0x0A0C
    26da:	70 91 0d 0a 	lds	r23, 0x0A0D
    26de:	07 2e       	mov	r0, r23
    26e0:	00 0c       	add	r0, r0
    26e2:	88 0b       	sbc	r24, r24
    26e4:	99 0b       	sbc	r25, r25
    26e6:	4c d6       	rcall	.+3224   	; 0x3380 <__floatsisf>
    26e8:	a7 01       	movw	r20, r14
    26ea:	96 01       	movw	r18, r12
    26ec:	fd d6       	rcall	.+3578   	; 0x34e8 <__mulsf3>
    26ee:	9b 01       	movw	r18, r22
    26f0:	ac 01       	movw	r20, r24
    26f2:	c3 01       	movw	r24, r6
    26f4:	b2 01       	movw	r22, r4
    26f6:	41 d5       	rcall	.+2690   	; 0x317a <__addsf3>
    26f8:	20 e0       	ldi	r18, 0x00	; 0
    26fa:	30 e0       	ldi	r19, 0x00	; 0
    26fc:	40 e0       	ldi	r20, 0x00	; 0
    26fe:	56 e3       	ldi	r21, 0x36	; 54
    2700:	f3 d6       	rcall	.+3558   	; 0x34e8 <__mulsf3>
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
    2702:	20 e0       	ldi	r18, 0x00	; 0
    2704:	30 e0       	ldi	r19, 0x00	; 0
    2706:	40 e0       	ldi	r20, 0x00	; 0
    2708:	57 e4       	ldi	r21, 0x47	; 71
    270a:	37 d5       	rcall	.+2670   	; 0x317a <__addsf3>
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	40 e0       	ldi	r20, 0x00	; 0
    2712:	58 e3       	ldi	r21, 0x38	; 56
    2714:	e9 d6       	rcall	.+3538   	; 0x34e8 <__mulsf3>
    2716:	6b 01       	movw	r12, r22
    2718:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
    271a:	28 81       	ld	r18, Y
    271c:	39 81       	ldd	r19, Y+1	; 0x01
    271e:	4a 81       	ldd	r20, Y+2	; 0x02
    2720:	5b 81       	ldd	r21, Y+3	; 0x03
    2722:	60 e0       	ldi	r22, 0x00	; 0
    2724:	70 e0       	ldi	r23, 0x00	; 0
    2726:	80 e8       	ldi	r24, 0x80	; 128
    2728:	99 e4       	ldi	r25, 0x49	; 73
    272a:	26 d5       	rcall	.+2636   	; 0x3178 <__subsf3>
    272c:	2b 01       	movw	r4, r22
    272e:	3c 01       	movw	r6, r24
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
    2730:	60 91 08 0a 	lds	r22, 0x0A08
    2734:	70 91 09 0a 	lds	r23, 0x0A09
    2738:	07 2e       	mov	r0, r23
    273a:	00 0c       	add	r0, r0
    273c:	88 0b       	sbc	r24, r24
    273e:	99 0b       	sbc	r25, r25
    2740:	1f d6       	rcall	.+3134   	; 0x3380 <__floatsisf>
    2742:	20 e0       	ldi	r18, 0x00	; 0
    2744:	30 e0       	ldi	r19, 0x00	; 0
    2746:	40 e8       	ldi	r20, 0x80	; 128
    2748:	57 e4       	ldi	r21, 0x47	; 71
    274a:	ce d6       	rcall	.+3484   	; 0x34e8 <__mulsf3>
    274c:	9b 01       	movw	r18, r22
    274e:	ac 01       	movw	r20, r24
    2750:	c5 01       	movw	r24, r10
    2752:	b4 01       	movw	r22, r8
    2754:	12 d5       	rcall	.+2596   	; 0x317a <__addsf3>
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
    2756:	20 e0       	ldi	r18, 0x00	; 0
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	40 e8       	ldi	r20, 0x80	; 128
    275c:	59 e3       	ldi	r21, 0x39	; 57
    275e:	c4 d6       	rcall	.+3464   	; 0x34e8 <__mulsf3>
    2760:	9b 01       	movw	r18, r22
    2762:	ac 01       	movw	r20, r24
    2764:	c3 01       	movw	r24, r6
    2766:	b2 01       	movw	r22, r4
    2768:	07 d5       	rcall	.+2574   	; 0x3178 <__subsf3>
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	30 e5       	ldi	r19, 0x50	; 80
    276e:	43 ec       	ldi	r20, 0xC3	; 195
    2770:	55 e4       	ldi	r21, 0x45	; 69
    2772:	ba d6       	rcall	.+3444   	; 0x34e8 <__mulsf3>
    2774:	4b 01       	movw	r8, r22
    2776:	5c 01       	movw	r10, r24
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
    2778:	80 91 f4 09 	lds	r24, 0x09F4
    277c:	90 91 f5 09 	lds	r25, 0x09F5
    2780:	bc 01       	movw	r22, r24
    2782:	80 e0       	ldi	r24, 0x00	; 0
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	fa d5       	rcall	.+3060   	; 0x337c <__floatunsisf>
    2788:	9b 01       	movw	r18, r22
    278a:	ac 01       	movw	r20, r24
    278c:	c7 01       	movw	r24, r14
    278e:	b6 01       	movw	r22, r12
    2790:	ab d6       	rcall	.+3414   	; 0x34e8 <__mulsf3>
    2792:	9b 01       	movw	r18, r22
    2794:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
    2796:	c5 01       	movw	r24, r10
    2798:	b4 01       	movw	r22, r8
    279a:	57 d5       	rcall	.+2734   	; 0x324a <__divsf3>
    279c:	6b 01       	movw	r12, r22
    279e:	7c 01       	movw	r14, r24
	//Serial.print("p = ");Serial.println(p,2);
	
	var1 = ((double)dig_P9)*p*p/2147483648.0;	//overflow
    27a0:	60 91 fe 09 	lds	r22, 0x09FE
    27a4:	70 91 ff 09 	lds	r23, 0x09FF
    27a8:	07 2e       	mov	r0, r23
    27aa:	00 0c       	add	r0, r0
    27ac:	88 0b       	sbc	r24, r24
    27ae:	99 0b       	sbc	r25, r25
    27b0:	e7 d5       	rcall	.+3022   	; 0x3380 <__floatsisf>
    27b2:	a7 01       	movw	r20, r14
    27b4:	96 01       	movw	r18, r12
    27b6:	98 d6       	rcall	.+3376   	; 0x34e8 <__mulsf3>
    27b8:	a7 01       	movw	r20, r14
    27ba:	96 01       	movw	r18, r12
    27bc:	95 d6       	rcall	.+3370   	; 0x34e8 <__mulsf3>
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	40 e0       	ldi	r20, 0x00	; 0
    27c4:	50 e3       	ldi	r21, 0x30	; 48
    27c6:	90 d6       	rcall	.+3360   	; 0x34e8 <__mulsf3>
    27c8:	4b 01       	movw	r8, r22
    27ca:	5c 01       	movw	r10, r24
	
	var2 = p*((double)dig_P8)/32768.0;
    27cc:	80 91 00 0a 	lds	r24, 0x0A00
    27d0:	90 91 01 0a 	lds	r25, 0x0A01
    27d4:	bc 01       	movw	r22, r24
    27d6:	99 0f       	add	r25, r25
    27d8:	88 0b       	sbc	r24, r24
    27da:	99 0b       	sbc	r25, r25
    27dc:	d1 d5       	rcall	.+2978   	; 0x3380 <__floatsisf>
    27de:	a7 01       	movw	r20, r14
    27e0:	96 01       	movw	r18, r12
    27e2:	82 d6       	rcall	.+3332   	; 0x34e8 <__mulsf3>
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	40 e0       	ldi	r20, 0x00	; 0
    27ea:	58 e3       	ldi	r21, 0x38	; 56
    27ec:	7d d6       	rcall	.+3322   	; 0x34e8 <__mulsf3>
    27ee:	9b 01       	movw	r18, r22
    27f0:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	p = p + (var1+var2+((double)dig_P7))/16.0;
    27f2:	c5 01       	movw	r24, r10
    27f4:	b4 01       	movw	r22, r8
    27f6:	c1 d4       	rcall	.+2434   	; 0x317a <__addsf3>
    27f8:	4b 01       	movw	r8, r22
    27fa:	5c 01       	movw	r10, r24
    27fc:	80 91 02 0a 	lds	r24, 0x0A02
    2800:	90 91 03 0a 	lds	r25, 0x0A03
    2804:	bc 01       	movw	r22, r24
    2806:	99 0f       	add	r25, r25
    2808:	88 0b       	sbc	r24, r24
    280a:	99 0b       	sbc	r25, r25
    280c:	b9 d5       	rcall	.+2930   	; 0x3380 <__floatsisf>
    280e:	9b 01       	movw	r18, r22
    2810:	ac 01       	movw	r20, r24
    2812:	c5 01       	movw	r24, r10
    2814:	b4 01       	movw	r22, r8
    2816:	b1 d4       	rcall	.+2402   	; 0x317a <__addsf3>
    2818:	20 e0       	ldi	r18, 0x00	; 0
    281a:	30 e0       	ldi	r19, 0x00	; 0
    281c:	40 e8       	ldi	r20, 0x80	; 128
    281e:	5d e3       	ldi	r21, 0x3D	; 61
    2820:	63 d6       	rcall	.+3270   	; 0x34e8 <__mulsf3>
    2822:	a7 01       	movw	r20, r14
    2824:	96 01       	movw	r18, r12
    2826:	a9 d4       	rcall	.+2386   	; 0x317a <__addsf3>
	//Serial.print("p = ");Serial.println(p,2);
	
	*P = p/100.0 ;
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	48 ec       	ldi	r20, 0xC8	; 200
    282e:	52 e4       	ldi	r21, 0x42	; 66
    2830:	0c d5       	rcall	.+2584   	; 0x324a <__divsf3>
    2832:	6b 01       	movw	r12, r22
    2834:	7c 01       	movw	r14, r24
    2836:	f8 01       	movw	r30, r16
    2838:	60 83       	st	Z, r22
    283a:	71 83       	std	Z+1, r23	; 0x01
    283c:	82 83       	std	Z+2, r24	; 0x02
    283e:	93 83       	std	Z+3, r25	; 0x03
	
	if((*P>1200.0) || (*P < 800.0))return (0);
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	46 e9       	ldi	r20, 0x96	; 150
    2846:	54 e4       	ldi	r21, 0x44	; 68
    2848:	4b d6       	rcall	.+3222   	; 0x34e0 <__gesf2>
    284a:	18 16       	cp	r1, r24
    284c:	6c f0       	brlt	.+26     	; 0x2868 <BMP280_CalcPressure+0x26a>
    284e:	20 e0       	ldi	r18, 0x00	; 0
    2850:	30 e0       	ldi	r19, 0x00	; 0
    2852:	48 e4       	ldi	r20, 0x48	; 72
    2854:	54 e4       	ldi	r21, 0x44	; 68
    2856:	c7 01       	movw	r24, r14
    2858:	b6 01       	movw	r22, r12
    285a:	f3 d4       	rcall	.+2534   	; 0x3242 <__cmpsf2>
    285c:	88 1f       	adc	r24, r24
    285e:	88 27       	eor	r24, r24
    2860:	88 1f       	adc	r24, r24
    2862:	91 e0       	ldi	r25, 0x01	; 1
    2864:	89 27       	eor	r24, r25
    2866:	01 c0       	rjmp	.+2      	; 0x286a <BMP280_CalcPressure+0x26c>
    2868:	80 e0       	ldi	r24, 0x00	; 0
	return (1);
}
    286a:	df 91       	pop	r29
    286c:	cf 91       	pop	r28
    286e:	1f 91       	pop	r17
    2870:	0f 91       	pop	r16
    2872:	ff 90       	pop	r15
    2874:	ef 90       	pop	r14
    2876:	df 90       	pop	r13
    2878:	cf 90       	pop	r12
    287a:	bf 90       	pop	r11
    287c:	af 90       	pop	r10
    287e:	9f 90       	pop	r9
    2880:	8f 90       	pop	r8
    2882:	7f 90       	pop	r7
    2884:	6f 90       	pop	r6
    2886:	5f 90       	pop	r5
    2888:	4f 90       	pop	r4
    288a:	08 95       	ret

0000288c <BMP280_CalcHumidity>:
  @param[out] pointer to a place to store the humidity
  @param[in] pointer to the uncalibrated humidity data
  @return status
*****************************************************************************/
char BMP280_CalcHumidity(double *H,double *uH)
{
    288c:	4f 92       	push	r4
    288e:	5f 92       	push	r5
    2890:	6f 92       	push	r6
    2892:	7f 92       	push	r7
    2894:	8f 92       	push	r8
    2896:	9f 92       	push	r9
    2898:	af 92       	push	r10
    289a:	bf 92       	push	r11
    289c:	cf 92       	push	r12
    289e:	df 92       	push	r13
    28a0:	ef 92       	push	r14
    28a2:	ff 92       	push	r15
    28a4:	cf 93       	push	r28
    28a6:	df 93       	push	r29
    28a8:	ec 01       	movw	r28, r24
	double adc_H = *uH;
    28aa:	fb 01       	movw	r30, r22
    28ac:	80 80       	ld	r8, Z
    28ae:	91 80       	ldd	r9, Z+1	; 0x01
    28b0:	a2 80       	ldd	r10, Z+2	; 0x02
    28b2:	b3 80       	ldd	r11, Z+3	; 0x03
	double var1;
	
	var1 = (double)t_fine - 76800.0;
    28b4:	60 91 e9 09 	lds	r22, 0x09E9
    28b8:	70 91 ea 09 	lds	r23, 0x09EA
    28bc:	80 91 eb 09 	lds	r24, 0x09EB
    28c0:	90 91 ec 09 	lds	r25, 0x09EC
    28c4:	5d d5       	rcall	.+2746   	; 0x3380 <__floatsisf>
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	46 e9       	ldi	r20, 0x96	; 150
    28cc:	57 e4       	ldi	r21, 0x47	; 71
    28ce:	54 d4       	rcall	.+2216   	; 0x3178 <__subsf3>
    28d0:	6b 01       	movw	r12, r22
    28d2:	7c 01       	movw	r14, r24
	
	if (var1 != 0)
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	a9 01       	movw	r20, r18
    28da:	b3 d4       	rcall	.+2406   	; 0x3242 <__cmpsf2>
    28dc:	88 23       	and	r24, r24
    28de:	09 f4       	brne	.+2      	; 0x28e2 <BMP280_CalcHumidity+0x56>
    28e0:	da c0       	rjmp	.+436    	; 0x2a96 <BMP280_CalcHumidity+0x20a>
	{
		var1 = (((((adc_H * 16384) - ((double)dig_H4 * 1048576) - ((double)dig_H5 * var1)) + 16384 ) / 32768 ) * (((((((var1 * (double)dig_H6) / 1024) * (((var1 * (double)dig_H3) / 2048) + 32768)) / 1024) + 2097152) * ((double)dig_H2 + 8192) / 16384)));
    28e2:	20 e0       	ldi	r18, 0x00	; 0
    28e4:	30 e0       	ldi	r19, 0x00	; 0
    28e6:	40 e8       	ldi	r20, 0x80	; 128
    28e8:	56 e4       	ldi	r21, 0x46	; 70
    28ea:	c5 01       	movw	r24, r10
    28ec:	b4 01       	movw	r22, r8
    28ee:	fc d5       	rcall	.+3064   	; 0x34e8 <__mulsf3>
    28f0:	4b 01       	movw	r8, r22
    28f2:	5c 01       	movw	r10, r24
    28f4:	80 91 fa 09 	lds	r24, 0x09FA
    28f8:	90 91 fb 09 	lds	r25, 0x09FB
    28fc:	bc 01       	movw	r22, r24
    28fe:	99 0f       	add	r25, r25
    2900:	88 0b       	sbc	r24, r24
    2902:	99 0b       	sbc	r25, r25
    2904:	3d d5       	rcall	.+2682   	; 0x3380 <__floatsisf>
    2906:	20 e0       	ldi	r18, 0x00	; 0
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	40 e8       	ldi	r20, 0x80	; 128
    290c:	59 e4       	ldi	r21, 0x49	; 73
    290e:	ec d5       	rcall	.+3032   	; 0x34e8 <__mulsf3>
    2910:	9b 01       	movw	r18, r22
    2912:	ac 01       	movw	r20, r24
    2914:	c5 01       	movw	r24, r10
    2916:	b4 01       	movw	r22, r8
    2918:	2f d4       	rcall	.+2142   	; 0x3178 <__subsf3>
    291a:	4b 01       	movw	r8, r22
    291c:	5c 01       	movw	r10, r24
    291e:	80 91 f8 09 	lds	r24, 0x09F8
    2922:	90 91 f9 09 	lds	r25, 0x09F9
    2926:	bc 01       	movw	r22, r24
    2928:	99 0f       	add	r25, r25
    292a:	88 0b       	sbc	r24, r24
    292c:	99 0b       	sbc	r25, r25
    292e:	28 d5       	rcall	.+2640   	; 0x3380 <__floatsisf>
    2930:	a7 01       	movw	r20, r14
    2932:	96 01       	movw	r18, r12
    2934:	d9 d5       	rcall	.+2994   	; 0x34e8 <__mulsf3>
    2936:	9b 01       	movw	r18, r22
    2938:	ac 01       	movw	r20, r24
    293a:	c5 01       	movw	r24, r10
    293c:	b4 01       	movw	r22, r8
    293e:	1c d4       	rcall	.+2104   	; 0x3178 <__subsf3>
    2940:	20 e0       	ldi	r18, 0x00	; 0
    2942:	30 e0       	ldi	r19, 0x00	; 0
    2944:	40 e8       	ldi	r20, 0x80	; 128
    2946:	56 e4       	ldi	r21, 0x46	; 70
    2948:	18 d4       	rcall	.+2096   	; 0x317a <__addsf3>
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	40 e0       	ldi	r20, 0x00	; 0
    2950:	58 e3       	ldi	r21, 0x38	; 56
    2952:	ca d5       	rcall	.+2964   	; 0x34e8 <__mulsf3>
    2954:	4b 01       	movw	r8, r22
    2956:	5c 01       	movw	r10, r24
    2958:	60 91 f1 09 	lds	r22, 0x09F1
    295c:	06 2e       	mov	r0, r22
    295e:	00 0c       	add	r0, r0
    2960:	77 0b       	sbc	r23, r23
    2962:	88 0b       	sbc	r24, r24
    2964:	99 0b       	sbc	r25, r25
    2966:	0c d5       	rcall	.+2584   	; 0x3380 <__floatsisf>
    2968:	a7 01       	movw	r20, r14
    296a:	96 01       	movw	r18, r12
    296c:	bd d5       	rcall	.+2938   	; 0x34e8 <__mulsf3>
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e8       	ldi	r20, 0x80	; 128
    2974:	5a e3       	ldi	r21, 0x3A	; 58
    2976:	b8 d5       	rcall	.+2928   	; 0x34e8 <__mulsf3>
    2978:	2b 01       	movw	r4, r22
    297a:	3c 01       	movw	r6, r24
    297c:	60 91 f2 09 	lds	r22, 0x09F2
    2980:	70 e0       	ldi	r23, 0x00	; 0
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	fa d4       	rcall	.+2548   	; 0x337c <__floatunsisf>
    2988:	a7 01       	movw	r20, r14
    298a:	96 01       	movw	r18, r12
    298c:	ad d5       	rcall	.+2906   	; 0x34e8 <__mulsf3>
    298e:	20 e0       	ldi	r18, 0x00	; 0
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	40 e0       	ldi	r20, 0x00	; 0
    2994:	5a e3       	ldi	r21, 0x3A	; 58
    2996:	a8 d5       	rcall	.+2896   	; 0x34e8 <__mulsf3>
    2998:	20 e0       	ldi	r18, 0x00	; 0
    299a:	30 e0       	ldi	r19, 0x00	; 0
    299c:	40 e0       	ldi	r20, 0x00	; 0
    299e:	57 e4       	ldi	r21, 0x47	; 71
    29a0:	ec d3       	rcall	.+2008   	; 0x317a <__addsf3>
    29a2:	9b 01       	movw	r18, r22
    29a4:	ac 01       	movw	r20, r24
    29a6:	c3 01       	movw	r24, r6
    29a8:	b2 01       	movw	r22, r4
    29aa:	9e d5       	rcall	.+2876   	; 0x34e8 <__mulsf3>
    29ac:	20 e0       	ldi	r18, 0x00	; 0
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	40 e8       	ldi	r20, 0x80	; 128
    29b2:	5a e3       	ldi	r21, 0x3A	; 58
    29b4:	99 d5       	rcall	.+2866   	; 0x34e8 <__mulsf3>
    29b6:	20 e0       	ldi	r18, 0x00	; 0
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	40 e0       	ldi	r20, 0x00	; 0
    29bc:	5a e4       	ldi	r21, 0x4A	; 74
    29be:	dd d3       	rcall	.+1978   	; 0x317a <__addsf3>
    29c0:	6b 01       	movw	r12, r22
    29c2:	7c 01       	movw	r14, r24
    29c4:	80 91 fc 09 	lds	r24, 0x09FC
    29c8:	90 91 fd 09 	lds	r25, 0x09FD
    29cc:	bc 01       	movw	r22, r24
    29ce:	99 0f       	add	r25, r25
    29d0:	88 0b       	sbc	r24, r24
    29d2:	99 0b       	sbc	r25, r25
    29d4:	d5 d4       	rcall	.+2474   	; 0x3380 <__floatsisf>
    29d6:	20 e0       	ldi	r18, 0x00	; 0
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	40 e0       	ldi	r20, 0x00	; 0
    29dc:	56 e4       	ldi	r21, 0x46	; 70
    29de:	cd d3       	rcall	.+1946   	; 0x317a <__addsf3>
    29e0:	9b 01       	movw	r18, r22
    29e2:	ac 01       	movw	r20, r24
    29e4:	c7 01       	movw	r24, r14
    29e6:	b6 01       	movw	r22, r12
    29e8:	7f d5       	rcall	.+2814   	; 0x34e8 <__mulsf3>
    29ea:	20 e0       	ldi	r18, 0x00	; 0
    29ec:	30 e0       	ldi	r19, 0x00	; 0
    29ee:	40 e8       	ldi	r20, 0x80	; 128
    29f0:	58 e3       	ldi	r21, 0x38	; 56
    29f2:	7a d5       	rcall	.+2804   	; 0x34e8 <__mulsf3>
    29f4:	9b 01       	movw	r18, r22
    29f6:	ac 01       	movw	r20, r24
    29f8:	c5 01       	movw	r24, r10
    29fa:	b4 01       	movw	r22, r8
    29fc:	75 d5       	rcall	.+2794   	; 0x34e8 <__mulsf3>
    29fe:	6b 01       	movw	r12, r22
    2a00:	7c 01       	movw	r14, r24
		/*var1 = (adc_H - (((double)dig_H4) * 64.0 + ((double)dig_H5) / 16384.0 * var1)) *
				(((double)dig_H2) / 65536.0 * (1.0 + ((double)dig_H6) / 67108864.0 * 
				var1 * (1.0 + ((double)dig_H3) / 67108864.0 * var1))); */
		*H = var1;
    2a02:	68 83       	st	Y, r22
    2a04:	79 83       	std	Y+1, r23	; 0x01
    2a06:	8a 83       	std	Y+2, r24	; 0x02
    2a08:	9b 83       	std	Y+3, r25	; 0x03
	}
	else return (0);
	var1 = (var1 - (((((var1 / 32768) * (var1 / 32768)) / 128) * (double)dig_H1) / 16));
    2a0a:	20 e0       	ldi	r18, 0x00	; 0
    2a0c:	30 e0       	ldi	r19, 0x00	; 0
    2a0e:	40 e0       	ldi	r20, 0x00	; 0
    2a10:	58 e3       	ldi	r21, 0x38	; 56
    2a12:	6a d5       	rcall	.+2772   	; 0x34e8 <__mulsf3>
    2a14:	9b 01       	movw	r18, r22
    2a16:	ac 01       	movw	r20, r24
    2a18:	67 d5       	rcall	.+2766   	; 0x34e8 <__mulsf3>
    2a1a:	20 e0       	ldi	r18, 0x00	; 0
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	40 e0       	ldi	r20, 0x00	; 0
    2a20:	5c e3       	ldi	r21, 0x3C	; 60
    2a22:	62 d5       	rcall	.+2756   	; 0x34e8 <__mulsf3>
    2a24:	4b 01       	movw	r8, r22
    2a26:	5c 01       	movw	r10, r24
    2a28:	80 91 f3 09 	lds	r24, 0x09F3
    2a2c:	68 2f       	mov	r22, r24
    2a2e:	70 e0       	ldi	r23, 0x00	; 0
    2a30:	80 e0       	ldi	r24, 0x00	; 0
    2a32:	90 e0       	ldi	r25, 0x00	; 0
    2a34:	a3 d4       	rcall	.+2374   	; 0x337c <__floatunsisf>
    2a36:	9b 01       	movw	r18, r22
    2a38:	ac 01       	movw	r20, r24
    2a3a:	c5 01       	movw	r24, r10
    2a3c:	b4 01       	movw	r22, r8
    2a3e:	54 d5       	rcall	.+2728   	; 0x34e8 <__mulsf3>
    2a40:	20 e0       	ldi	r18, 0x00	; 0
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	40 e8       	ldi	r20, 0x80	; 128
    2a46:	5d e3       	ldi	r21, 0x3D	; 61
    2a48:	4f d5       	rcall	.+2718   	; 0x34e8 <__mulsf3>
    2a4a:	9b 01       	movw	r18, r22
    2a4c:	ac 01       	movw	r20, r24
    2a4e:	c7 01       	movw	r24, r14
    2a50:	b6 01       	movw	r22, r12
    2a52:	92 d3       	rcall	.+1828   	; 0x3178 <__subsf3>
    2a54:	6b 01       	movw	r12, r22
    2a56:	7c 01       	movw	r14, r24
	//var1 = var1 * (1.0 - ((double)dig_H1) * var1 / 524288.0);
	if (var1 > 100.0) {var1 = 100.0; *H = var1;}
    2a58:	20 e0       	ldi	r18, 0x00	; 0
    2a5a:	30 e0       	ldi	r19, 0x00	; 0
    2a5c:	48 ec       	ldi	r20, 0xC8	; 200
    2a5e:	52 e4       	ldi	r21, 0x42	; 66
    2a60:	3f d5       	rcall	.+2686   	; 0x34e0 <__gesf2>
    2a62:	18 16       	cp	r1, r24
    2a64:	54 f4       	brge	.+20     	; 0x2a7a <BMP280_CalcHumidity+0x1ee>
    2a66:	80 e0       	ldi	r24, 0x00	; 0
    2a68:	90 e0       	ldi	r25, 0x00	; 0
    2a6a:	a8 ec       	ldi	r26, 0xC8	; 200
    2a6c:	b2 e4       	ldi	r27, 0x42	; 66
    2a6e:	88 83       	st	Y, r24
    2a70:	99 83       	std	Y+1, r25	; 0x01
    2a72:	aa 83       	std	Y+2, r26	; 0x02
    2a74:	bb 83       	std	Y+3, r27	; 0x03
	else if (var1 < 0.0) {var1 = 0.0; *H = var1;}
	return (1);
    2a76:	81 e0       	ldi	r24, 0x01	; 1
    2a78:	11 c0       	rjmp	.+34     	; 0x2a9c <BMP280_CalcHumidity+0x210>
	}
	else return (0);
	var1 = (var1 - (((((var1 / 32768) * (var1 / 32768)) / 128) * (double)dig_H1) / 16));
	//var1 = var1 * (1.0 - ((double)dig_H1) * var1 / 524288.0);
	if (var1 > 100.0) {var1 = 100.0; *H = var1;}
	else if (var1 < 0.0) {var1 = 0.0; *H = var1;}
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	a9 01       	movw	r20, r18
    2a80:	c7 01       	movw	r24, r14
    2a82:	b6 01       	movw	r22, r12
    2a84:	de d3       	rcall	.+1980   	; 0x3242 <__cmpsf2>
    2a86:	88 23       	and	r24, r24
    2a88:	44 f4       	brge	.+16     	; 0x2a9a <BMP280_CalcHumidity+0x20e>
    2a8a:	18 82       	st	Y, r1
    2a8c:	19 82       	std	Y+1, r1	; 0x01
    2a8e:	1a 82       	std	Y+2, r1	; 0x02
    2a90:	1b 82       	std	Y+3, r1	; 0x03
	return (1);
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	03 c0       	rjmp	.+6      	; 0x2a9c <BMP280_CalcHumidity+0x210>
		/*var1 = (adc_H - (((double)dig_H4) * 64.0 + ((double)dig_H5) / 16384.0 * var1)) *
				(((double)dig_H2) / 65536.0 * (1.0 + ((double)dig_H6) / 67108864.0 * 
				var1 * (1.0 + ((double)dig_H3) / 67108864.0 * var1))); */
		*H = var1;
	}
	else return (0);
    2a96:	80 e0       	ldi	r24, 0x00	; 0
    2a98:	01 c0       	rjmp	.+2      	; 0x2a9c <BMP280_CalcHumidity+0x210>
	var1 = (var1 - (((((var1 / 32768) * (var1 / 32768)) / 128) * (double)dig_H1) / 16));
	//var1 = var1 * (1.0 - ((double)dig_H1) * var1 / 524288.0);
	if (var1 > 100.0) {var1 = 100.0; *H = var1;}
	else if (var1 < 0.0) {var1 = 0.0; *H = var1;}
	return (1);
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
}
    2a9c:	df 91       	pop	r29
    2a9e:	cf 91       	pop	r28
    2aa0:	ff 90       	pop	r15
    2aa2:	ef 90       	pop	r14
    2aa4:	df 90       	pop	r13
    2aa6:	cf 90       	pop	r12
    2aa8:	bf 90       	pop	r11
    2aaa:	af 90       	pop	r10
    2aac:	9f 90       	pop	r9
    2aae:	8f 90       	pop	r8
    2ab0:	7f 90       	pop	r7
    2ab2:	6f 90       	pop	r6
    2ab4:	5f 90       	pop	r5
    2ab6:	4f 90       	pop	r4
    2ab8:	08 95       	ret

00002aba <BMP280_GetTPH>:
  @brief Gets temperature and pressure
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetTPH(double *T, double *P, double *H){
    2aba:	cf 92       	push	r12
    2abc:	df 92       	push	r13
    2abe:	ef 92       	push	r14
    2ac0:	ff 92       	push	r15
    2ac2:	0f 93       	push	r16
    2ac4:	1f 93       	push	r17
    2ac6:	cf 93       	push	r28
    2ac8:	df 93       	push	r29
    2aca:	cd b7       	in	r28, 0x3d	; 61
    2acc:	de b7       	in	r29, 0x3e	; 62
    2ace:	2c 97       	sbiw	r28, 0x0c	; 12
    2ad0:	0f b6       	in	r0, 0x3f	; 63
    2ad2:	f8 94       	cli
    2ad4:	de bf       	out	0x3e, r29	; 62
    2ad6:	0f be       	out	0x3f, r0	; 63
    2ad8:	cd bf       	out	0x3d, r28	; 61
    2ada:	8c 01       	movw	r16, r24
    2adc:	7b 01       	movw	r14, r22
    2ade:	6a 01       	movw	r12, r20
	double uP,uT,uH ;
	char result = BMP280_GetUnPTH(&uP, &uT, &uH);
    2ae0:	ae 01       	movw	r20, r28
    2ae2:	47 5f       	subi	r20, 0xF7	; 247
    2ae4:	5f 4f       	sbci	r21, 0xFF	; 255
    2ae6:	be 01       	movw	r22, r28
    2ae8:	6b 5f       	subi	r22, 0xFB	; 251
    2aea:	7f 4f       	sbci	r23, 0xFF	; 255
    2aec:	ce 01       	movw	r24, r28
    2aee:	01 96       	adiw	r24, 0x01	; 1
    2af0:	dc db       	rcall	.-2120   	; 0x22aa <BMP280_GetUnPTH>
	if(result!=0){
    2af2:	88 23       	and	r24, r24
    2af4:	21 f1       	breq	.+72     	; 0x2b3e <BMP280_GetTPH+0x84>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
    2af6:	be 01       	movw	r22, r28
    2af8:	6b 5f       	subi	r22, 0xFB	; 251
    2afa:	7f 4f       	sbci	r23, 0xFF	; 255
    2afc:	c8 01       	movw	r24, r16
    2afe:	cc dc       	rcall	.-1640   	; 0x2498 <BMP280_CalcTemperature>
		if(result){
    2b00:	88 23       	and	r24, r24
    2b02:	c1 f0       	breq	.+48     	; 0x2b34 <BMP280_GetTPH+0x7a>
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
    2b04:	be 01       	movw	r22, r28
    2b06:	6f 5f       	subi	r22, 0xFF	; 255
    2b08:	7f 4f       	sbci	r23, 0xFF	; 255
    2b0a:	c7 01       	movw	r24, r14
    2b0c:	78 dd       	rcall	.-1296   	; 0x25fe <BMP280_CalcPressure>
			if(result){
    2b0e:	88 23       	and	r24, r24
    2b10:	61 f0       	breq	.+24     	; 0x2b2a <BMP280_GetTPH+0x70>
				result = BMP280_CalcHumidity(H,&uH); 	
    2b12:	be 01       	movw	r22, r28
    2b14:	67 5f       	subi	r22, 0xF7	; 247
    2b16:	7f 4f       	sbci	r23, 0xFF	; 255
    2b18:	c6 01       	movw	r24, r12
    2b1a:	b8 de       	rcall	.-656    	; 0x288c <BMP280_CalcHumidity>
				if(result)return (1);
    2b1c:	81 11       	cpse	r24, r1
    2b1e:	14 c0       	rjmp	.+40     	; 0x2b48 <BMP280_GetTPH+0x8e>
				else error = 4 ;	// humidity error ;
    2b20:	84 e0       	ldi	r24, 0x04	; 4
    2b22:	80 93 e8 09 	sts	0x09E8, r24
				return (0);
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	10 c0       	rjmp	.+32     	; 0x2b4a <BMP280_GetTPH+0x90>
			}else
			error = 3;	// pressure error ;
    2b2a:	83 e0       	ldi	r24, 0x03	; 3
    2b2c:	80 93 e8 09 	sts	0x09E8, r24
		}else
		error = 2; // temperature error
	}
	else
	error = 1;
	return (0);
    2b30:	80 e0       	ldi	r24, 0x00	; 0
    2b32:	0b c0       	rjmp	.+22     	; 0x2b4a <BMP280_GetTPH+0x90>
				else error = 4 ;	// humidity error ;
				return (0);
			}else
			error = 3;	// pressure error ;
		}else
		error = 2; // temperature error
    2b34:	82 e0       	ldi	r24, 0x02	; 2
    2b36:	80 93 e8 09 	sts	0x09E8, r24
	}
	else
	error = 1;
	return (0);
    2b3a:	80 e0       	ldi	r24, 0x00	; 0
    2b3c:	06 c0       	rjmp	.+12     	; 0x2b4a <BMP280_GetTPH+0x90>
			error = 3;	// pressure error ;
		}else
		error = 2; // temperature error
	}
	else
	error = 1;
    2b3e:	81 e0       	ldi	r24, 0x01	; 1
    2b40:	80 93 e8 09 	sts	0x09E8, r24
	return (0);
    2b44:	80 e0       	ldi	r24, 0x00	; 0
    2b46:	01 c0       	rjmp	.+2      	; 0x2b4a <BMP280_GetTPH+0x90>
		if(result){
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
			if(result){
				result = BMP280_CalcHumidity(H,&uH); 	
				if(result)return (1);
    2b48:	81 e0       	ldi	r24, 0x01	; 1
		error = 2; // temperature error
	}
	else
	error = 1;
	return (0);
}
    2b4a:	2c 96       	adiw	r28, 0x0c	; 12
    2b4c:	0f b6       	in	r0, 0x3f	; 63
    2b4e:	f8 94       	cli
    2b50:	de bf       	out	0x3e, r29	; 62
    2b52:	0f be       	out	0x3f, r0	; 63
    2b54:	cd bf       	out	0x3d, r28	; 61
    2b56:	df 91       	pop	r29
    2b58:	cf 91       	pop	r28
    2b5a:	1f 91       	pop	r17
    2b5c:	0f 91       	pop	r16
    2b5e:	ff 90       	pop	r15
    2b60:	ef 90       	pop	r14
    2b62:	df 90       	pop	r13
    2b64:	cf 90       	pop	r12
    2b66:	08 95       	ret

00002b68 <DemoStorage_Device_VTinit>:
};

=======
  timers = NULL;
    1c52:	10 92 94 08 	sts	0x0894, r1
    1c56:	10 92 93 08 	sts	0x0893, r1
    1c5a:	08 95       	ret

00001c5c <SYS_TimerStarted>:
>>>>>>> refs/remotes/origin/master

void DemoStorage_Device_VTinit( DemoStorageDevice *this )
{
<<<<<<< HEAD
	this->abstract.device_vt = &DemoStorageDevice_abstract_vmt;
    2b68:	2e e6       	ldi	r18, 0x6E	; 110
    2b6a:	32 e0       	ldi	r19, 0x02	; 2
    2b6c:	fc 01       	movw	r30, r24
    2b6e:	31 83       	std	Z+1, r19	; 0x01
    2b70:	20 83       	st	Z, r18
    2b72:	08 95       	ret

00002b74 <DemoStorage_Device_init>:
}

int DemoStorage_Device_init( DemoStorageDevice *this )
{
	return 0;
}
    2b74:	80 e0       	ldi	r24, 0x00	; 0
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	08 95       	ret

00002b7a <DemoStorage_Device_reset>:
=======
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1c5c:	e0 91 93 08 	lds	r30, 0x0893
    1c60:	f0 91 94 08 	lds	r31, 0x0894
    1c64:	30 97       	sbiw	r30, 0x00	; 0
    1c66:	71 f0       	breq	.+28     	; 0x1c84 <SYS_TimerStarted+0x28>
    if (t == timer)
    1c68:	e8 17       	cp	r30, r24
    1c6a:	f9 07       	cpc	r31, r25
    1c6c:	21 f4       	brne	.+8      	; 0x1c76 <SYS_TimerStarted+0x1a>
    1c6e:	0c c0       	rjmp	.+24     	; 0x1c88 <SYS_TimerStarted+0x2c>
    1c70:	8e 17       	cp	r24, r30
    1c72:	9f 07       	cpc	r25, r31
    1c74:	59 f0       	breq	.+22     	; 0x1c8c <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1c76:	01 90       	ld	r0, Z+
    1c78:	f0 81       	ld	r31, Z
    1c7a:	e0 2d       	mov	r30, r0
    1c7c:	30 97       	sbiw	r30, 0x00	; 0
    1c7e:	c1 f7       	brne	.-16     	; 0x1c70 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	08 95       	ret
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	08 95       	ret
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    1c8e:	08 95       	ret

00001c90 <SYS_TimerStart>:
}
>>>>>>> refs/remotes/origin/master

int DemoStorage_Device_reset( DemoStorageDevice *this )
{
<<<<<<< HEAD
	return 0;
}
    2b7a:	80 e0       	ldi	r24, 0x00	; 0
    2b7c:	90 e0       	ldi	r25, 0x00	; 0
    2b7e:	08 95       	ret

00002b80 <DemoStorage_Device_getType>:

int DemoStorage_Device_getType( DemoStorageDevice *this )
{
	return TYPE_STORAGE_DEVICE;
}
    2b80:	84 e0       	ldi	r24, 0x04	; 4
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	08 95       	ret

00002b86 <DemoStorage_Device_Tinit>:



void DemoStorage_Device_Tinit(DemoStorageDevice *this)
{
	this->vmt = &DemoStorageDevice_vmt;
    2b86:	26 e6       	ldi	r18, 0x66	; 102
    2b88:	32 e0       	ldi	r19, 0x02	; 2
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	33 83       	std	Z+3, r19	; 0x03
    2b8e:	22 83       	std	Z+2, r18	; 0x02
    2b90:	08 95       	ret

00002b92 <DemoStorage_Device_Configure>:
}

int DemoStorage_Device_Configure(DemoStorageDevice *this)
{
	return 0;
}
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	90 e0       	ldi	r25, 0x00	; 0
    2b96:	08 95       	ret
=======
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    1c96:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <SYS_TimerStarted>
    1c9a:	81 11       	cpse	r24, r1
    1c9c:	03 c0       	rjmp	.+6      	; 0x1ca4 <SYS_TimerStart+0x14>
    placeTimer(timer);
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <placeTimer>
}
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	08 95       	ret

00001caa <check_crc>:
/*************************************************************************//**
  @brief CRC check
  @return remainder
*****************************************************************************/
unsigned int check_crc(uint16_t message_from_sensor, uint8_t check_value_from_sensor) {
	uint32_t remainder = (uint32_t)message_from_sensor << 8; //Pad with 8 bits because we have to add in the check value
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	38 2f       	mov	r19, r24
	remainder |= check_value_from_sensor; //Add on the check value
    1cb0:	c9 01       	movw	r24, r18
    1cb2:	86 2b       	or	r24, r22
    1cb4:	27 e1       	ldi	r18, 0x17	; 23
    1cb6:	30 e0       	ldi	r19, 0x00	; 0

	uint32_t divsor = (uint32_t)SHIFTED_DIVISOR;
    1cb8:	40 e0       	ldi	r20, 0x00	; 0
    1cba:	50 e8       	ldi	r21, 0x80	; 128

	for (int i = 0 ; i < 16 ; i++) //Operate on only 16 positions of max 24. The remaining 8 are our remainder and should be zero when we're done.
	{
		if( remainder & (uint32_t)1<<(23 - i) ) //Check if there is a one in the left position
    1cbc:	bc 01       	movw	r22, r24
    1cbe:	02 2e       	mov	r0, r18
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <check_crc+0x1c>
    1cc2:	76 95       	lsr	r23
    1cc4:	67 95       	ror	r22
    1cc6:	0a 94       	dec	r0
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <check_crc+0x18>
    1cca:	60 ff       	sbrs	r22, 0
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <check_crc+0x28>
		remainder ^= divsor;
    1cce:	84 27       	eor	r24, r20
    1cd0:	95 27       	eor	r25, r21

		divsor >>= 1; //Rotate the divsor max 16 times so that we have 8 bits left of a remainder
    1cd2:	56 95       	lsr	r21
    1cd4:	47 95       	ror	r20
    1cd6:	21 50       	subi	r18, 0x01	; 1
    1cd8:	31 09       	sbc	r19, r1
	uint32_t remainder = (uint32_t)message_from_sensor << 8; //Pad with 8 bits because we have to add in the check value
	remainder |= check_value_from_sensor; //Add on the check value

	uint32_t divsor = (uint32_t)SHIFTED_DIVISOR;

	for (int i = 0 ; i < 16 ; i++) //Operate on only 16 positions of max 24. The remaining 8 are our remainder and should be zero when we're done.
    1cda:	27 30       	cpi	r18, 0x07	; 7
    1cdc:	31 05       	cpc	r19, r1
    1cde:	71 f7       	brne	.-36     	; 0x1cbc <check_crc+0x12>

		divsor >>= 1; //Rotate the divsor max 16 times so that we have 8 bits left of a remainder
	}

	return (unsigned int)remainder;
    1ce0:	08 95       	ret

00001ce2 <ll_first>:
 */
llobject_t *
ll_first(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	22 81       	ldd	r18, Z+2	; 0x02
    1ce6:	33 81       	ldd	r19, Z+3	; 0x03
    1ce8:	28 17       	cp	r18, r24
    1cea:	39 07       	cpc	r19, r25
    1cec:	19 f4       	brne	.+6      	; 0x1cf4 <ll_first+0x12>
		return LL_NULL;
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	08 95       	ret
    }
    return lp->next;
    1cf4:	82 2f       	mov	r24, r18
    1cf6:	93 2f       	mov	r25, r19
}
    1cf8:	08 95       	ret

00001cfa <ll_r_insert>:
llobject_t *
ll_r_insert(ip, ep)
llobject_t *ip;
llobject_t *ep;
{
    llobject_t *tp = ip->next;
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	12 96       	adiw	r26, 0x02	; 2
    1cfe:	ed 91       	ld	r30, X+
    1d00:	fc 91       	ld	r31, X
    1d02:	13 97       	sbiw	r26, 0x03	; 3

    tp->prev = ep;
    1d04:	71 83       	std	Z+1, r23	; 0x01
    1d06:	60 83       	st	Z, r22
    ep->next = tp;
    1d08:	db 01       	movw	r26, r22
    1d0a:	13 96       	adiw	r26, 0x03	; 3
    1d0c:	fc 93       	st	X, r31
    1d0e:	ee 93       	st	-X, r30
    1d10:	12 97       	sbiw	r26, 0x02	; 2
    ip->next = ep;
    1d12:	fc 01       	movw	r30, r24
    1d14:	73 83       	std	Z+3, r23	; 0x03
    1d16:	62 83       	std	Z+2, r22	; 0x02
    ep->prev = ip;
    1d18:	8d 93       	st	X+, r24
    1d1a:	9c 93       	st	X, r25

    return ep;
}
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	08 95       	ret

00001d20 <ll_detach>:
 */
llobject_t *
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    1d20:	fb 01       	movw	r30, r22
    if (LL_IS_EMPTY(lp) || lp == ep) {
    1d22:	dc 01       	movw	r26, r24
    1d24:	12 96       	adiw	r26, 0x02	; 2
    1d26:	2d 91       	ld	r18, X+
    1d28:	3c 91       	ld	r19, X
    1d2a:	13 97       	sbiw	r26, 0x03	; 3
    1d2c:	28 17       	cp	r18, r24
    1d2e:	39 07       	cpc	r19, r25
    1d30:	a1 f0       	breq	.+40     	; 0x1d5a <ll_detach+0x3a>
    1d32:	86 17       	cp	r24, r22
    1d34:	97 07       	cpc	r25, r23
    1d36:	a1 f0       	breq	.+40     	; 0x1d60 <ll_detach+0x40>
		return LL_NULL;
    }

    (ep->prev)->next = ep->next;
    1d38:	a0 81       	ld	r26, Z
    1d3a:	b1 81       	ldd	r27, Z+1	; 0x01
    1d3c:	82 81       	ldd	r24, Z+2	; 0x02
    1d3e:	93 81       	ldd	r25, Z+3	; 0x03
    1d40:	13 96       	adiw	r26, 0x03	; 3
    1d42:	9c 93       	st	X, r25
    1d44:	8e 93       	st	-X, r24
    1d46:	12 97       	sbiw	r26, 0x02	; 2
    (ep->next)->prev = ep->prev;
    1d48:	a2 81       	ldd	r26, Z+2	; 0x02
    1d4a:	b3 81       	ldd	r27, Z+3	; 0x03
    1d4c:	80 81       	ld	r24, Z
    1d4e:	91 81       	ldd	r25, Z+1	; 0x01
    1d50:	8d 93       	st	X+, r24
    1d52:	9c 93       	st	X, r25

    return ep;
    1d54:	86 2f       	mov	r24, r22
    1d56:	9f 2f       	mov	r25, r31
    1d58:	08 95       	ret
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    if (LL_IS_EMPTY(lp) || lp == ep) {
		return LL_NULL;
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	08 95       	ret
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	90 e0       	ldi	r25, 0x00	; 0

    (ep->prev)->next = ep->next;
    (ep->next)->prev = ep->prev;

    return ep;
}
    1d64:	08 95       	ret

00001d66 <ll_pop>:
 */
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
    1d66:	fc 01       	movw	r30, r24
    1d68:	62 81       	ldd	r22, Z+2	; 0x02
    1d6a:	73 81       	ldd	r23, Z+3	; 0x03
    1d6c:	68 17       	cp	r22, r24
    1d6e:	79 07       	cpc	r23, r25
    1d70:	19 f0       	breq	.+6      	; 0x1d78 <ll_pop+0x12>
		return LL_NULL;
    }
    return LL_DETACH(lp, lp->next);
    1d72:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <ll_detach>
    1d76:	08 95       	ret
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
		return LL_NULL;
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    }
    return LL_DETACH(lp, lp->next);
}
    1d7c:	08 95       	ret

00001d7e <DemoStorage_Device_VTinit>:
};
>>>>>>> refs/remotes/origin/master

00002b98 <DemoStorageget_CurDataUnit>:

DataUnit * DemoStorageget_CurDataUnit(DemoStorageDevice *this)
{
<<<<<<< HEAD
    2b98:	0f 93       	push	r16
    2b9a:	1f 93       	push	r17
    2b9c:	cf 93       	push	r28
    2b9e:	df 93       	push	r29
    2ba0:	ec 01       	movw	r28, r24
	int t = this->cur_pos;
    2ba2:	0e 81       	ldd	r16, Y+6	; 0x06
    2ba4:	1f 81       	ldd	r17, Y+7	; 0x07
	printf("Executre get store Device : %d\n",t);
    2ba6:	1f 93       	push	r17
    2ba8:	0f 93       	push	r16
    2baa:	85 ea       	ldi	r24, 0xA5	; 165
    2bac:	95 e0       	ldi	r25, 0x05	; 5
    2bae:	9f 93       	push	r25
    2bb0:	8f 93       	push	r24
    2bb2:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
	this->cur_pos = this->cur_pos+1;
    2bb6:	8e 81       	ldd	r24, Y+6	; 0x06
    2bb8:	9f 81       	ldd	r25, Y+7	; 0x07
    2bba:	01 96       	adiw	r24, 0x01	; 1
    2bbc:	9f 83       	std	Y+7, r25	; 0x07
    2bbe:	8e 83       	std	Y+6, r24	; 0x06
	DataUnit * data_t = this -> StoragesData;
	return (data_t + t);
    2bc0:	28 e3       	ldi	r18, 0x38	; 56
    2bc2:	20 9f       	mul	r18, r16
    2bc4:	c0 01       	movw	r24, r0
    2bc6:	21 9f       	mul	r18, r17
    2bc8:	90 0d       	add	r25, r0
    2bca:	11 24       	eor	r1, r1
    2bcc:	28 85       	ldd	r18, Y+8	; 0x08
    2bce:	39 85       	ldd	r19, Y+9	; 0x09
    2bd0:	0f 90       	pop	r0
    2bd2:	0f 90       	pop	r0
    2bd4:	0f 90       	pop	r0
    2bd6:	0f 90       	pop	r0
    2bd8:	82 0f       	add	r24, r18
    2bda:	93 1f       	adc	r25, r19
    2bdc:	df 91       	pop	r29
    2bde:	cf 91       	pop	r28
    2be0:	1f 91       	pop	r17
    2be2:	0f 91       	pop	r16
    2be4:	08 95       	ret

00002be6 <DemoStorage_Device_Execute>:
{
	this->vmt = &DemoStorageDevice_vmt;
=======
	this->abstract.device_vt = &DemoStorageDevice_abstract_vmt;
    1d7e:	2a e1       	ldi	r18, 0x1A	; 26
    1d80:	32 e0       	ldi	r19, 0x02	; 2
    1d82:	fc 01       	movw	r30, r24
    1d84:	31 83       	std	Z+1, r19	; 0x01
    1d86:	20 83       	st	Z, r18
    1d88:	08 95       	ret

00001d8a <DemoStorage_Device_init>:
>>>>>>> refs/remotes/origin/master
}

int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
    2be6:	3f 92       	push	r3
    2be8:	4f 92       	push	r4
    2bea:	5f 92       	push	r5
    2bec:	6f 92       	push	r6
    2bee:	7f 92       	push	r7
    2bf0:	8f 92       	push	r8
    2bf2:	9f 92       	push	r9
    2bf4:	af 92       	push	r10
    2bf6:	bf 92       	push	r11
    2bf8:	cf 92       	push	r12
    2bfa:	df 92       	push	r13
    2bfc:	ef 92       	push	r14
    2bfe:	ff 92       	push	r15
    2c00:	0f 93       	push	r16
    2c02:	1f 93       	push	r17
    2c04:	cf 93       	push	r28
    2c06:	df 93       	push	r29
    2c08:	cd b7       	in	r28, 0x3d	; 61
    2c0a:	de b7       	in	r29, 0x3e	; 62
    2c0c:	e8 97       	sbiw	r28, 0x38	; 56
    2c0e:	0f b6       	in	r0, 0x3f	; 63
    2c10:	f8 94       	cli
    2c12:	de bf       	out	0x3e, r29	; 62
    2c14:	0f be       	out	0x3f, r0	; 63
    2c16:	cd bf       	out	0x3d, r28	; 61
    2c18:	3c 01       	movw	r6, r24
	printf("Executre Storage Device\n");
    2c1a:	85 ec       	ldi	r24, 0xC5	; 197
    2c1c:	95 e0       	ldi	r25, 0x05	; 5
    2c1e:	0e 94 27 21 	call	0x424e	; 0x424e <puts>
	for( int i=0; i<this->cur_pos; i++)
    2c22:	f3 01       	movw	r30, r6
    2c24:	86 81       	ldd	r24, Z+6	; 0x06
    2c26:	97 81       	ldd	r25, Z+7	; 0x07
    2c28:	18 16       	cp	r1, r24
    2c2a:	19 06       	cpc	r1, r25
    2c2c:	0c f0       	brlt	.+2      	; 0x2c30 <DemoStorage_Device_Execute+0x4a>
    2c2e:	8b c0       	rjmp	.+278    	; 0x2d46 <DemoStorage_Device_Execute+0x160>
    2c30:	81 2c       	mov	r8, r1
    2c32:	91 2c       	mov	r9, r1
    2c34:	a1 2c       	mov	r10, r1
    2c36:	b1 2c       	mov	r11, r1
	{
		DataUnit temp = this->StoragesData[i];
    2c38:	0f 2e       	mov	r0, r31
    2c3a:	f8 e3       	ldi	r31, 0x38	; 56
    2c3c:	3f 2e       	mov	r3, r31
    2c3e:	f0 2d       	mov	r31, r0
		printf("%04ld %02ld %02ld %02ld %02ld %02ld\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
    2c40:	0f 2e       	mov	r0, r31
    2c42:	fd ed       	ldi	r31, 0xDD	; 221
    2c44:	4f 2e       	mov	r4, r31
    2c46:	f5 e0       	ldi	r31, 0x05	; 5
    2c48:	5f 2e       	mov	r5, r31
    2c4a:	f0 2d       	mov	r31, r0
    2c4c:	6e 01       	movw	r12, r28
    2c4e:	f1 e1       	ldi	r31, 0x11	; 17
    2c50:	cf 0e       	add	r12, r31
    2c52:	d1 1c       	adc	r13, r1
		for( int j = 0; j < MAX_NUM_DATA; ++j )
			printf("%3.3f ",temp.data[j]);
    2c54:	0f 2e       	mov	r0, r31
    2c56:	f2 e0       	ldi	r31, 0x02	; 2
    2c58:	ef 2e       	mov	r14, r31
    2c5a:	f6 e0       	ldi	r31, 0x06	; 6
    2c5c:	ff 2e       	mov	r15, r31
    2c5e:	f0 2d       	mov	r31, r0
int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
	{
		DataUnit temp = this->StoragesData[i];
    2c60:	f3 01       	movw	r30, r6
    2c62:	80 85       	ldd	r24, Z+8	; 0x08
    2c64:	91 85       	ldd	r25, Z+9	; 0x09
    2c66:	88 0d       	add	r24, r8
    2c68:	99 1d       	adc	r25, r9
    2c6a:	fc 01       	movw	r30, r24
    2c6c:	de 01       	movw	r26, r28
    2c6e:	11 96       	adiw	r26, 0x01	; 1
    2c70:	23 2d       	mov	r18, r3
    2c72:	01 90       	ld	r0, Z+
    2c74:	0d 92       	st	X+, r0
    2c76:	2a 95       	dec	r18
    2c78:	e1 f7       	brne	.-8      	; 0x2c72 <DemoStorage_Device_Execute+0x8c>
		printf("%04ld %02ld %02ld %02ld %02ld %02ld\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
    2c7a:	fc 01       	movw	r30, r24
    2c7c:	23 8d       	ldd	r18, Z+27	; 0x1b
    2c7e:	2f 93       	push	r18
    2c80:	22 8d       	ldd	r18, Z+26	; 0x1a
    2c82:	2f 93       	push	r18
    2c84:	21 8d       	ldd	r18, Z+25	; 0x19
    2c86:	2f 93       	push	r18
    2c88:	20 8d       	ldd	r18, Z+24	; 0x18
    2c8a:	2f 93       	push	r18
    2c8c:	27 8d       	ldd	r18, Z+31	; 0x1f
    2c8e:	2f 93       	push	r18
    2c90:	26 8d       	ldd	r18, Z+30	; 0x1e
    2c92:	2f 93       	push	r18
    2c94:	25 8d       	ldd	r18, Z+29	; 0x1d
    2c96:	2f 93       	push	r18
    2c98:	24 8d       	ldd	r18, Z+28	; 0x1c
    2c9a:	2f 93       	push	r18
    2c9c:	23 a1       	ldd	r18, Z+35	; 0x23
    2c9e:	2f 93       	push	r18
    2ca0:	22 a1       	ldd	r18, Z+34	; 0x22
    2ca2:	2f 93       	push	r18
    2ca4:	21 a1       	ldd	r18, Z+33	; 0x21
    2ca6:	2f 93       	push	r18
    2ca8:	20 a1       	ldd	r18, Z+32	; 0x20
    2caa:	2f 93       	push	r18
    2cac:	27 a1       	ldd	r18, Z+39	; 0x27
    2cae:	2f 93       	push	r18
    2cb0:	26 a1       	ldd	r18, Z+38	; 0x26
    2cb2:	2f 93       	push	r18
    2cb4:	25 a1       	ldd	r18, Z+37	; 0x25
    2cb6:	2f 93       	push	r18
    2cb8:	24 a1       	ldd	r18, Z+36	; 0x24
    2cba:	2f 93       	push	r18
    2cbc:	23 a5       	ldd	r18, Z+43	; 0x2b
    2cbe:	2f 93       	push	r18
    2cc0:	22 a5       	ldd	r18, Z+42	; 0x2a
    2cc2:	2f 93       	push	r18
    2cc4:	21 a5       	ldd	r18, Z+41	; 0x29
    2cc6:	2f 93       	push	r18
    2cc8:	20 a5       	ldd	r18, Z+40	; 0x28
    2cca:	2f 93       	push	r18
    2ccc:	27 a5       	ldd	r18, Z+47	; 0x2f
    2cce:	2f 93       	push	r18
    2cd0:	26 a5       	ldd	r18, Z+46	; 0x2e
    2cd2:	2f 93       	push	r18
    2cd4:	25 a5       	ldd	r18, Z+45	; 0x2d
    2cd6:	2f 93       	push	r18
    2cd8:	84 a5       	ldd	r24, Z+44	; 0x2c
    2cda:	8f 93       	push	r24
    2cdc:	5f 92       	push	r5
    2cde:	4f 92       	push	r4
    2ce0:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
    2ce4:	8e 01       	movw	r16, r28
    2ce6:	0f 5f       	subi	r16, 0xFF	; 255
    2ce8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cea:	0f b6       	in	r0, 0x3f	; 63
    2cec:	f8 94       	cli
    2cee:	de bf       	out	0x3e, r29	; 62
    2cf0:	0f be       	out	0x3f, r0	; 63
    2cf2:	cd bf       	out	0x3d, r28	; 61
		for( int j = 0; j < MAX_NUM_DATA; ++j )
			printf("%3.3f ",temp.data[j]);
    2cf4:	f8 01       	movw	r30, r16
    2cf6:	80 81       	ld	r24, Z
    2cf8:	91 81       	ldd	r25, Z+1	; 0x01
    2cfa:	22 81       	ldd	r18, Z+2	; 0x02
    2cfc:	33 81       	ldd	r19, Z+3	; 0x03
    2cfe:	0c 5f       	subi	r16, 0xFC	; 252
    2d00:	1f 4f       	sbci	r17, 0xFF	; 255
    2d02:	3f 93       	push	r19
    2d04:	2f 93       	push	r18
    2d06:	9f 93       	push	r25
    2d08:	8f 93       	push	r24
    2d0a:	ff 92       	push	r15
    2d0c:	ef 92       	push	r14
    2d0e:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
	{
		DataUnit temp = this->StoragesData[i];
		printf("%04ld %02ld %02ld %02ld %02ld %02ld\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
		for( int j = 0; j < MAX_NUM_DATA; ++j )
    2d12:	0f 90       	pop	r0
    2d14:	0f 90       	pop	r0
    2d16:	0f 90       	pop	r0
    2d18:	0f 90       	pop	r0
    2d1a:	0f 90       	pop	r0
    2d1c:	0f 90       	pop	r0
    2d1e:	0c 15       	cp	r16, r12
    2d20:	1d 05       	cpc	r17, r13
    2d22:	41 f7       	brne	.-48     	; 0x2cf4 <DemoStorage_Device_Execute+0x10e>
			printf("%3.3f ",temp.data[j]);
		printf("\n");
    2d24:	8a e0       	ldi	r24, 0x0A	; 10
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	0e 94 22 21 	call	0x4244	; 0x4244 <putchar>
}
<<<<<<< HEAD
=======
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	08 95       	ret

00001d90 <DemoStorage_Device_reset>:
>>>>>>> refs/remotes/origin/master

int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
    2d2c:	ff ef       	ldi	r31, 0xFF	; 255
    2d2e:	af 1a       	sub	r10, r31
    2d30:	bf 0a       	sbc	r11, r31
    2d32:	88 e3       	ldi	r24, 0x38	; 56
    2d34:	88 0e       	add	r8, r24
    2d36:	91 1c       	adc	r9, r1
    2d38:	f3 01       	movw	r30, r6
    2d3a:	86 81       	ldd	r24, Z+6	; 0x06
    2d3c:	97 81       	ldd	r25, Z+7	; 0x07
    2d3e:	a8 16       	cp	r10, r24
    2d40:	b9 06       	cpc	r11, r25
    2d42:	0c f4       	brge	.+2      	; 0x2d46 <DemoStorage_Device_Execute+0x160>
    2d44:	8d cf       	rjmp	.-230    	; 0x2c60 <DemoStorage_Device_Execute+0x7a>
		printf("%04ld %02ld %02ld %02ld %02ld %02ld\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
		for( int j = 0; j < MAX_NUM_DATA; ++j )
			printf("%3.3f ",temp.data[j]);
		printf("\n");
	}
	this->cur_pos = 0;
    2d46:	f3 01       	movw	r30, r6
    2d48:	17 82       	std	Z+7, r1	; 0x07
    2d4a:	16 82       	std	Z+6, r1	; 0x06
	return 0;
}
<<<<<<< HEAD
    2d4c:	80 e0       	ldi	r24, 0x00	; 0
    2d4e:	90 e0       	ldi	r25, 0x00	; 0
    2d50:	e8 96       	adiw	r28, 0x38	; 56
    2d52:	0f b6       	in	r0, 0x3f	; 63
    2d54:	f8 94       	cli
    2d56:	de bf       	out	0x3e, r29	; 62
    2d58:	0f be       	out	0x3f, r0	; 63
    2d5a:	cd bf       	out	0x3d, r28	; 61
    2d5c:	df 91       	pop	r29
    2d5e:	cf 91       	pop	r28
    2d60:	1f 91       	pop	r17
    2d62:	0f 91       	pop	r16
    2d64:	ff 90       	pop	r15
    2d66:	ef 90       	pop	r14
    2d68:	df 90       	pop	r13
    2d6a:	cf 90       	pop	r12
    2d6c:	bf 90       	pop	r11
    2d6e:	af 90       	pop	r10
    2d70:	9f 90       	pop	r9
    2d72:	8f 90       	pop	r8
    2d74:	7f 90       	pop	r7
    2d76:	6f 90       	pop	r6
    2d78:	5f 90       	pop	r5
    2d7a:	4f 90       	pop	r4
    2d7c:	3f 90       	pop	r3
    2d7e:	08 95       	ret

00002d80 <New_DemoStorage_Device>:
{
	return TYPE_STORAGE_DEVICE;
}

DemoStorageDevice* New_DemoStorage_Device( int infonum )
{
    2d80:	cf 92       	push	r12
    2d82:	df 92       	push	r13
    2d84:	ef 92       	push	r14
    2d86:	ff 92       	push	r15
    2d88:	cf 93       	push	r28
    2d8a:	df 93       	push	r29
    2d8c:	7c 01       	movw	r14, r24
	DemoStorageDevice *p = malloc(sizeof(DemoStorageDevice));
    2d8e:	8a e0       	ldi	r24, 0x0A	; 10
    2d90:	90 e0       	ldi	r25, 0x00	; 0
    2d92:	f2 d7       	rcall	.+4068   	; 0x3d78 <malloc>
    2d94:	ec 01       	movw	r28, r24
	p->info = infonum;
    2d96:	fd 82       	std	Y+5, r15	; 0x05
    2d98:	ec 82       	std	Y+4, r14	; 0x04
=======
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	08 95       	ret

00001d96 <DemoStorage_Device_getType>:

int DemoStorage_Device_getType( DemoStorageDevice *this )
{
	return TYPE_STORAGE_DEVICE;
}
    1d96:	84 e0       	ldi	r24, 0x04	; 4
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	08 95       	ret

00001d9c <DemoStorage_Device_Tinit>:



void DemoStorage_Device_Tinit(DemoStorageDevice *this)
{
	this->vmt = &DemoStorageDevice_vmt;
    1d9c:	24 e1       	ldi	r18, 0x14	; 20
    1d9e:	32 e0       	ldi	r19, 0x02	; 2
    1da0:	fc 01       	movw	r30, r24
    1da2:	33 83       	std	Z+3, r19	; 0x03
    1da4:	22 83       	std	Z+2, r18	; 0x02
    1da6:	08 95       	ret

00001da8 <DemoStorage_Device_Configure>:
}

int DemoStorage_Device_Configure(DemoStorageDevice *this)
{
	return 0;
}
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	08 95       	ret

00001dae <DemoStorage_Device_Execute>:
{
	this->vmt = &DemoStorageDevice_vmt;
}

int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
    1dae:	3f 92       	push	r3
    1db0:	4f 92       	push	r4
    1db2:	5f 92       	push	r5
    1db4:	6f 92       	push	r6
    1db6:	7f 92       	push	r7
    1db8:	8f 92       	push	r8
    1dba:	9f 92       	push	r9
    1dbc:	af 92       	push	r10
    1dbe:	bf 92       	push	r11
    1dc0:	cf 92       	push	r12
    1dc2:	df 92       	push	r13
    1dc4:	ef 92       	push	r14
    1dc6:	ff 92       	push	r15
    1dc8:	0f 93       	push	r16
    1dca:	1f 93       	push	r17
    1dcc:	cf 93       	push	r28
    1dce:	df 93       	push	r29
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	a4 97       	sbiw	r28, 0x24	; 36
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	3c 01       	movw	r6, r24
	printf("Executre Storage Device\n");
    1de2:	87 e3       	ldi	r24, 0x37	; 55
    1de4:	94 e0       	ldi	r25, 0x04	; 4
    1de6:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
	for( int i=0; i<this->cur_pos; i++)
    1dea:	f3 01       	movw	r30, r6
    1dec:	86 81       	ldd	r24, Z+6	; 0x06
    1dee:	97 81       	ldd	r25, Z+7	; 0x07
    1df0:	18 16       	cp	r1, r24
    1df2:	19 06       	cpc	r1, r25
    1df4:	0c f0       	brlt	.+2      	; 0x1df8 <DemoStorage_Device_Execute+0x4a>
    1df6:	6f c0       	rjmp	.+222    	; 0x1ed6 <DemoStorage_Device_Execute+0x128>
    1df8:	81 2c       	mov	r8, r1
    1dfa:	91 2c       	mov	r9, r1
    1dfc:	a1 2c       	mov	r10, r1
    1dfe:	b1 2c       	mov	r11, r1
	{
		DataUnit temp = this->StoragesData[i];
    1e00:	0f 2e       	mov	r0, r31
    1e02:	f4 e2       	ldi	r31, 0x24	; 36
    1e04:	3f 2e       	mov	r3, r31
    1e06:	f0 2d       	mov	r31, r0
		printf("%d%d%d %d%d%d\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
    1e08:	0f 2e       	mov	r0, r31
    1e0a:	ff e4       	ldi	r31, 0x4F	; 79
    1e0c:	4f 2e       	mov	r4, r31
    1e0e:	f4 e0       	ldi	r31, 0x04	; 4
    1e10:	5f 2e       	mov	r5, r31
    1e12:	f0 2d       	mov	r31, r0
    1e14:	6e 01       	movw	r12, r28
    1e16:	f1 e1       	ldi	r31, 0x11	; 17
    1e18:	cf 0e       	add	r12, r31
    1e1a:	d1 1c       	adc	r13, r1
		for( int j = 0; j < MAX_NUM_DATA; ++j )
		printf("%3.3f ",temp.data[j]);
    1e1c:	0f 2e       	mov	r0, r31
    1e1e:	fe e5       	ldi	r31, 0x5E	; 94
    1e20:	ef 2e       	mov	r14, r31
    1e22:	f4 e0       	ldi	r31, 0x04	; 4
    1e24:	ff 2e       	mov	r15, r31
    1e26:	f0 2d       	mov	r31, r0
int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
	{
		DataUnit temp = this->StoragesData[i];
    1e28:	f3 01       	movw	r30, r6
    1e2a:	80 85       	ldd	r24, Z+8	; 0x08
    1e2c:	91 85       	ldd	r25, Z+9	; 0x09
    1e2e:	88 0d       	add	r24, r8
    1e30:	99 1d       	adc	r25, r9
    1e32:	fc 01       	movw	r30, r24
    1e34:	de 01       	movw	r26, r28
    1e36:	11 96       	adiw	r26, 0x01	; 1
    1e38:	23 2d       	mov	r18, r3
    1e3a:	01 90       	ld	r0, Z+
    1e3c:	0d 92       	st	X+, r0
    1e3e:	2a 95       	dec	r18
    1e40:	e1 f7       	brne	.-8      	; 0x1e3a <DemoStorage_Device_Execute+0x8c>
		printf("%d%d%d %d%d%d\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
    1e42:	fc 01       	movw	r30, r24
    1e44:	25 89       	ldd	r18, Z+21	; 0x15
    1e46:	2f 93       	push	r18
    1e48:	24 89       	ldd	r18, Z+20	; 0x14
    1e4a:	2f 93       	push	r18
    1e4c:	27 89       	ldd	r18, Z+23	; 0x17
    1e4e:	2f 93       	push	r18
    1e50:	26 89       	ldd	r18, Z+22	; 0x16
    1e52:	2f 93       	push	r18
    1e54:	21 8d       	ldd	r18, Z+25	; 0x19
    1e56:	2f 93       	push	r18
    1e58:	20 8d       	ldd	r18, Z+24	; 0x18
    1e5a:	2f 93       	push	r18
    1e5c:	23 8d       	ldd	r18, Z+27	; 0x1b
    1e5e:	2f 93       	push	r18
    1e60:	22 8d       	ldd	r18, Z+26	; 0x1a
    1e62:	2f 93       	push	r18
    1e64:	25 8d       	ldd	r18, Z+29	; 0x1d
    1e66:	2f 93       	push	r18
    1e68:	24 8d       	ldd	r18, Z+28	; 0x1c
    1e6a:	2f 93       	push	r18
    1e6c:	27 8d       	ldd	r18, Z+31	; 0x1f
    1e6e:	2f 93       	push	r18
    1e70:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e72:	8f 93       	push	r24
    1e74:	5f 92       	push	r5
    1e76:	4f 92       	push	r4
    1e78:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
    1e7c:	8e 01       	movw	r16, r28
    1e7e:	0f 5f       	subi	r16, 0xFF	; 255
    1e80:	1f 4f       	sbci	r17, 0xFF	; 255
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	de bf       	out	0x3e, r29	; 62
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	cd bf       	out	0x3d, r28	; 61
		for( int j = 0; j < MAX_NUM_DATA; ++j )
		printf("%3.3f ",temp.data[j]);
    1e8c:	f8 01       	movw	r30, r16
    1e8e:	80 81       	ld	r24, Z
    1e90:	91 81       	ldd	r25, Z+1	; 0x01
    1e92:	22 81       	ldd	r18, Z+2	; 0x02
    1e94:	33 81       	ldd	r19, Z+3	; 0x03
    1e96:	0c 5f       	subi	r16, 0xFC	; 252
    1e98:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9a:	3f 93       	push	r19
    1e9c:	2f 93       	push	r18
    1e9e:	9f 93       	push	r25
    1ea0:	8f 93       	push	r24
    1ea2:	ff 92       	push	r15
    1ea4:	ef 92       	push	r14
    1ea6:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
	{
		DataUnit temp = this->StoragesData[i];
		printf("%d%d%d %d%d%d\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
		for( int j = 0; j < MAX_NUM_DATA; ++j )
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	0c 15       	cp	r16, r12
    1eb8:	1d 05       	cpc	r17, r13
    1eba:	41 f7       	brne	.-48     	; 0x1e8c <DemoStorage_Device_Execute+0xde>
}

int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
    1ebc:	ff ef       	ldi	r31, 0xFF	; 255
    1ebe:	af 1a       	sub	r10, r31
    1ec0:	bf 0a       	sbc	r11, r31
    1ec2:	84 e2       	ldi	r24, 0x24	; 36
    1ec4:	88 0e       	add	r8, r24
    1ec6:	91 1c       	adc	r9, r1
    1ec8:	f3 01       	movw	r30, r6
    1eca:	86 81       	ldd	r24, Z+6	; 0x06
    1ecc:	97 81       	ldd	r25, Z+7	; 0x07
    1ece:	a8 16       	cp	r10, r24
    1ed0:	b9 06       	cpc	r11, r25
    1ed2:	0c f4       	brge	.+2      	; 0x1ed6 <DemoStorage_Device_Execute+0x128>
    1ed4:	a9 cf       	rjmp	.-174    	; 0x1e28 <DemoStorage_Device_Execute+0x7a>
		DataUnit temp = this->StoragesData[i];
		printf("%d%d%d %d%d%d\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
		for( int j = 0; j < MAX_NUM_DATA; ++j )
		printf("%3.3f ",temp.data[j]);
	}
	this->cur_pos = 0;
    1ed6:	f3 01       	movw	r30, r6
    1ed8:	17 82       	std	Z+7, r1	; 0x07
    1eda:	16 82       	std	Z+6, r1	; 0x06
	return 0;
}
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	a4 96       	adiw	r28, 0x24	; 36
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	f8 94       	cli
    1ee6:	de bf       	out	0x3e, r29	; 62
    1ee8:	0f be       	out	0x3f, r0	; 63
    1eea:	cd bf       	out	0x3d, r28	; 61
    1eec:	df 91       	pop	r29
    1eee:	cf 91       	pop	r28
    1ef0:	1f 91       	pop	r17
    1ef2:	0f 91       	pop	r16
    1ef4:	ff 90       	pop	r15
    1ef6:	ef 90       	pop	r14
    1ef8:	df 90       	pop	r13
    1efa:	cf 90       	pop	r12
    1efc:	bf 90       	pop	r11
    1efe:	af 90       	pop	r10
    1f00:	9f 90       	pop	r9
    1f02:	8f 90       	pop	r8
    1f04:	7f 90       	pop	r7
    1f06:	6f 90       	pop	r6
    1f08:	5f 90       	pop	r5
    1f0a:	4f 90       	pop	r4
    1f0c:	3f 90       	pop	r3
    1f0e:	08 95       	ret

00001f10 <New_DemoStorage_Device>:
{
	return TYPE_STORAGE_DEVICE;
}

DemoStorageDevice* New_DemoStorage_Device( int infonum )
{
    1f10:	0f 93       	push	r16
    1f12:	1f 93       	push	r17
    1f14:	cf 93       	push	r28
    1f16:	df 93       	push	r29
    1f18:	8c 01       	movw	r16, r24
	DemoStorageDevice *p = malloc(sizeof(DemoStorageDevice));
    1f1a:	8c e0       	ldi	r24, 0x0C	; 12
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <malloc>
    1f22:	ec 01       	movw	r28, r24
	p->info = infonum;
    1f24:	1d 83       	std	Y+5, r17	; 0x05
    1f26:	0c 83       	std	Y+4, r16	; 0x04
>>>>>>> refs/remotes/origin/master
};


void DemoStorage_Device_VTinit( DemoStorageDevice *this )
{
	this->abstract.device_vt = &DemoStorageDevice_abstract_vmt;
<<<<<<< HEAD
    2d9a:	8e e6       	ldi	r24, 0x6E	; 110
    2d9c:	92 e0       	ldi	r25, 0x02	; 2
    2d9e:	99 83       	std	Y+1, r25	; 0x01
    2da0:	88 83       	st	Y, r24
=======
    1f28:	8a e1       	ldi	r24, 0x1A	; 26
    1f2a:	92 e0       	ldi	r25, 0x02	; 2
    1f2c:	99 83       	std	Y+1, r25	; 0x01
    1f2e:	88 83       	st	Y, r24
>>>>>>> refs/remotes/origin/master



void DemoStorage_Device_Tinit(DemoStorageDevice *this)
{
	this->vmt = &DemoStorageDevice_vmt;
<<<<<<< HEAD
    2da2:	86 e6       	ldi	r24, 0x66	; 102
    2da4:	92 e0       	ldi	r25, 0x02	; 2
    2da6:	9b 83       	std	Y+3, r25	; 0x03
    2da8:	8a 83       	std	Y+2, r24	; 0x02
=======
    1f30:	84 e1       	ldi	r24, 0x14	; 20
    1f32:	92 e0       	ldi	r25, 0x02	; 2
    1f34:	9b 83       	std	Y+3, r25	; 0x03
    1f36:	8a 83       	std	Y+2, r24	; 0x02
>>>>>>> refs/remotes/origin/master
{
	DemoStorageDevice *p = malloc(sizeof(DemoStorageDevice));
	p->info = infonum;
	DemoStorage_Device_VTinit(p);
	DemoStorage_Device_Tinit(p);
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
<<<<<<< HEAD
    2daa:	88 e4       	ldi	r24, 0x48	; 72
    2dac:	93 e0       	ldi	r25, 0x03	; 3
    2dae:	e4 d7       	rcall	.+4040   	; 0x3d78 <malloc>
    2db0:	99 87       	std	Y+9, r25	; 0x09
    2db2:	88 87       	std	Y+8, r24	; 0x08
    2db4:	40 e0       	ldi	r20, 0x00	; 0
    2db6:	50 e0       	ldi	r21, 0x00	; 0
=======
    1f38:	8c e1       	ldi	r24, 0x1C	; 28
    1f3a:	92 e0       	ldi	r25, 0x02	; 2
    1f3c:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <malloc>
    1f40:	99 87       	std	Y+9, r25	; 0x09
    1f42:	88 87       	std	Y+8, r24	; 0x08
    1f44:	a0 e0       	ldi	r26, 0x00	; 0
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
>>>>>>> refs/remotes/origin/master
{
	return TYPE_STORAGE_DEVICE;
}

DemoStorageDevice* New_DemoStorage_Device( int infonum )
{
<<<<<<< HEAD
    2db8:	70 e0       	ldi	r23, 0x00	; 0
    2dba:	60 e0       	ldi	r22, 0x00	; 0
=======
    1f48:	00 e0       	ldi	r16, 0x00	; 0
    1f4a:	10 e0       	ldi	r17, 0x00	; 0
	DemoStorage_Device_Tinit(p);
>>>>>>> refs/remotes/origin/master
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
		for( int j=0;j<MAX_NUM_DATA;j++)
<<<<<<< HEAD
		{
				p->StoragesData[i].data[j] = -9999; 
    2dbc:	0f 2e       	mov	r0, r31
    2dbe:	c1 2c       	mov	r12, r1
    2dc0:	fc e3       	ldi	r31, 0x3C	; 60
    2dc2:	df 2e       	mov	r13, r31
    2dc4:	fc e1       	ldi	r31, 0x1C	; 28
    2dc6:	ef 2e       	mov	r14, r31
    2dc8:	f6 ec       	ldi	r31, 0xC6	; 198
    2dca:	ff 2e       	mov	r15, r31
    2dcc:	f0 2d       	mov	r31, r0
    2dce:	2a c0       	rjmp	.+84     	; 0x2e24 <New_DemoStorage_Device+0xa4>
    2dd0:	e8 85       	ldd	r30, Y+8	; 0x08
    2dd2:	f9 85       	ldd	r31, Y+9	; 0x09
    2dd4:	e4 0f       	add	r30, r20
    2dd6:	f5 1f       	adc	r31, r21
    2dd8:	c9 01       	movw	r24, r18
    2dda:	88 0f       	add	r24, r24
    2ddc:	99 1f       	adc	r25, r25
    2dde:	88 0f       	add	r24, r24
    2de0:	99 1f       	adc	r25, r25
    2de2:	e8 0f       	add	r30, r24
    2de4:	f9 1f       	adc	r31, r25
    2de6:	c0 82       	st	Z, r12
    2de8:	d1 82       	std	Z+1, r13	; 0x01
    2dea:	e2 82       	std	Z+2, r14	; 0x02
    2dec:	f3 82       	std	Z+3, r15	; 0x03
				p->StoragesData[i].data_tm.unix_msec = 0;
    2dee:	e8 85       	ldd	r30, Y+8	; 0x08
    2df0:	f9 85       	ldd	r31, Y+9	; 0x09
    2df2:	e4 0f       	add	r30, r20
    2df4:	f5 1f       	adc	r31, r21
    2df6:	14 8a       	std	Z+20, r1	; 0x14
    2df8:	15 8a       	std	Z+21, r1	; 0x15
    2dfa:	16 8a       	std	Z+22, r1	; 0x16
    2dfc:	17 8a       	std	Z+23, r1	; 0x17
				p->StoragesData[i].data_tm.unix_time = 0;
    2dfe:	e8 85       	ldd	r30, Y+8	; 0x08
    2e00:	f9 85       	ldd	r31, Y+9	; 0x09
    2e02:	e4 0f       	add	r30, r20
    2e04:	f5 1f       	adc	r31, r21
    2e06:	10 8a       	std	Z+16, r1	; 0x10
    2e08:	11 8a       	std	Z+17, r1	; 0x11
    2e0a:	12 8a       	std	Z+18, r1	; 0x12
    2e0c:	13 8a       	std	Z+19, r1	; 0x13
=======
			p->StoragesData[i].data[j] = -9999; 
    1f4c:	40 e0       	ldi	r20, 0x00	; 0
    1f4e:	5c e3       	ldi	r21, 0x3C	; 60
    1f50:	6c e1       	ldi	r22, 0x1C	; 28
    1f52:	76 ec       	ldi	r23, 0xC6	; 198
    1f54:	19 c0       	rjmp	.+50     	; 0x1f88 <New_DemoStorage_Device+0x78>
    1f56:	e8 85       	ldd	r30, Y+8	; 0x08
    1f58:	f9 85       	ldd	r31, Y+9	; 0x09
    1f5a:	ea 0f       	add	r30, r26
    1f5c:	fb 1f       	adc	r31, r27
    1f5e:	c9 01       	movw	r24, r18
    1f60:	88 0f       	add	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	88 0f       	add	r24, r24
    1f66:	99 1f       	adc	r25, r25
    1f68:	e8 0f       	add	r30, r24
    1f6a:	f9 1f       	adc	r31, r25
    1f6c:	40 83       	st	Z, r20
    1f6e:	51 83       	std	Z+1, r21	; 0x01
    1f70:	62 83       	std	Z+2, r22	; 0x02
    1f72:	73 83       	std	Z+3, r23	; 0x03
>>>>>>> refs/remotes/origin/master
	DemoStorage_Device_VTinit(p);
	DemoStorage_Device_Tinit(p);
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
		for( int j=0;j<MAX_NUM_DATA;j++)
<<<<<<< HEAD
    2e0e:	2f 5f       	subi	r18, 0xFF	; 255
    2e10:	3f 4f       	sbci	r19, 0xFF	; 255
    2e12:	24 30       	cpi	r18, 0x04	; 4
    2e14:	31 05       	cpc	r19, r1
    2e16:	e1 f6       	brne	.-72     	; 0x2dd0 <New_DemoStorage_Device+0x50>
    2e18:	48 5c       	subi	r20, 0xC8	; 200
    2e1a:	5f 4f       	sbci	r21, 0xFF	; 255
=======
    1f74:	2f 5f       	subi	r18, 0xFF	; 255
    1f76:	3f 4f       	sbci	r19, 0xFF	; 255
    1f78:	24 30       	cpi	r18, 0x04	; 4
    1f7a:	31 05       	cpc	r19, r1
    1f7c:	61 f7       	brne	.-40     	; 0x1f56 <New_DemoStorage_Device+0x46>
    1f7e:	94 96       	adiw	r26, 0x24	; 36
>>>>>>> refs/remotes/origin/master
	p->info = infonum;
	DemoStorage_Device_VTinit(p);
	DemoStorage_Device_Tinit(p);
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
<<<<<<< HEAD
    2e1c:	48 34       	cpi	r20, 0x48	; 72
    2e1e:	83 e0       	ldi	r24, 0x03	; 3
    2e20:	58 07       	cpc	r21, r24
    2e22:	19 f0       	breq	.+6      	; 0x2e2a <New_DemoStorage_Device+0xaa>
=======
    1f80:	ac 31       	cpi	r26, 0x1C	; 28
    1f82:	82 e0       	ldi	r24, 0x02	; 2
    1f84:	b8 07       	cpc	r27, r24
    1f86:	19 f0       	breq	.+6      	; 0x1f8e <New_DemoStorage_Device+0x7e>
>>>>>>> refs/remotes/origin/master
{
	return TYPE_STORAGE_DEVICE;
}

DemoStorageDevice* New_DemoStorage_Device( int infonum )
{
<<<<<<< HEAD
    2e24:	27 2f       	mov	r18, r23
    2e26:	36 2f       	mov	r19, r22
    2e28:	d3 cf       	rjmp	.-90     	; 0x2dd0 <New_DemoStorage_Device+0x50>
		{
				p->StoragesData[i].data[j] = -9999; 
				p->StoragesData[i].data_tm.unix_msec = 0;
				p->StoragesData[i].data_tm.unix_time = 0;
		}
	p->cur_pos = 0;
    2e2a:	1f 82       	std	Y+7, r1	; 0x07
    2e2c:	1e 82       	std	Y+6, r1	; 0x06

	return p;
}
    2e2e:	ce 01       	movw	r24, r28
    2e30:	df 91       	pop	r29
    2e32:	cf 91       	pop	r28
    2e34:	ff 90       	pop	r15
    2e36:	ef 90       	pop	r14
    2e38:	df 90       	pop	r13
    2e3a:	cf 90       	pop	r12
    2e3c:	08 95       	ret

00002e3e <LoadData_Device_VTinit>:
=======
    1f88:	20 2f       	mov	r18, r16
    1f8a:	31 2f       	mov	r19, r17
    1f8c:	e4 cf       	rjmp	.-56     	; 0x1f56 <New_DemoStorage_Device+0x46>
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
		for( int j=0;j<MAX_NUM_DATA;j++)
			p->StoragesData[i].data[j] = -9999; 
	p->cur_pos = 0;
    1f8e:	1f 82       	std	Y+7, r1	; 0x07
    1f90:	1e 82       	std	Y+6, r1	; 0x06

	return p;
}
    1f92:	ce 01       	movw	r24, r28
    1f94:	df 91       	pop	r29
    1f96:	cf 91       	pop	r28
    1f98:	1f 91       	pop	r17
    1f9a:	0f 91       	pop	r16
    1f9c:	08 95       	ret

00001f9e <LoadData_Device_VTinit>:
>>>>>>> refs/remotes/origin/master
};


void LoadData_Device_VTinit( LoadDataDevice *this )
{
	this->abstract.device_vt = &LoadDataDevice_abstract_vmt;
<<<<<<< HEAD
    2e3e:	2c e7       	ldi	r18, 0x7C	; 124
    2e40:	32 e0       	ldi	r19, 0x02	; 2
    2e42:	fc 01       	movw	r30, r24
    2e44:	31 83       	std	Z+1, r19	; 0x01
    2e46:	20 83       	st	Z, r18
    2e48:	08 95       	ret

00002e4a <LoadData_Device_init>:
=======
    1f9e:	28 e2       	ldi	r18, 0x28	; 40
    1fa0:	32 e0       	ldi	r19, 0x02	; 2
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	31 83       	std	Z+1, r19	; 0x01
    1fa6:	20 83       	st	Z, r18
    1fa8:	08 95       	ret

00001faa <LoadData_Device_init>:
>>>>>>> refs/remotes/origin/master
}

int LoadData_Device_init( LoadDataDevice *this )
{
	return 0;
}
<<<<<<< HEAD
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	08 95       	ret

00002e50 <LoadData_Device_reset>:
=======
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	08 95       	ret

00001fb0 <LoadData_Device_reset>:
>>>>>>> refs/remotes/origin/master

int LoadData_Device_reset( LoadDataDevice *this )
{
	return 0;
}
<<<<<<< HEAD
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	08 95       	ret

00002e56 <LoadData_Device_getType>:
=======
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	08 95       	ret

00001fb6 <LoadData_Device_getType>:
>>>>>>> refs/remotes/origin/master

int LoadData_Device_getType( LoadDataDevice *this )
{
	return TYPE_DEVICE;
}
<<<<<<< HEAD
    2e56:	85 e0       	ldi	r24, 0x05	; 5
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	08 95       	ret

00002e5c <LoadData_Device_Tinit>:



void LoadData_Device_Tinit(LoadDataDevice *this)
{
	this->vmt = &LoadDataDevice_vmt;
    2e5c:	26 e7       	ldi	r18, 0x76	; 118
    2e5e:	32 e0       	ldi	r19, 0x02	; 2
    2e60:	fc 01       	movw	r30, r24
    2e62:	33 83       	std	Z+3, r19	; 0x03
    2e64:	22 83       	std	Z+2, r18	; 0x02
    2e66:	08 95       	ret

00002e68 <LoadData_Device_Configure>:
}

int LoadData_Device_Configure(LoadDataDevice *this)
{
	return 0;
}
    2e68:	80 e0       	ldi	r24, 0x00	; 0
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	08 95       	ret

00002e6e <LoadData_Device_Execute>:
{
	this->vmt = &LoadDataDevice_vmt;
}

int LoadData_Device_Execute(LoadDataDevice *this)
{
    2e6e:	cf 93       	push	r28
    2e70:	df 93       	push	r29
    2e72:	ec 01       	movw	r28, r24
	if( this -> store_device == NULL)
    2e74:	8e 81       	ldd	r24, Y+6	; 0x06
    2e76:	9f 81       	ldd	r25, Y+7	; 0x07
    2e78:	89 2b       	or	r24, r25
    2e7a:	21 f4       	brne	.+8      	; 0x2e84 <LoadData_Device_Execute+0x16>
		printf("NULL store device\n");
    2e7c:	89 e0       	ldi	r24, 0x09	; 9
    2e7e:	96 e0       	ldi	r25, 0x06	; 6
    2e80:	0e 94 27 21 	call	0x424e	; 0x424e <puts>
	cur_data = this->store_device->vmt->get_CurDataUnit(this->store_device);
    2e84:	8e 81       	ldd	r24, Y+6	; 0x06
    2e86:	9f 81       	ldd	r25, Y+7	; 0x07
    2e88:	dc 01       	movw	r26, r24
    2e8a:	12 96       	adiw	r26, 0x02	; 2
    2e8c:	ed 91       	ld	r30, X+
    2e8e:	fc 91       	ld	r31, X
    2e90:	13 97       	sbiw	r26, 0x03	; 3
    2e92:	06 80       	ldd	r0, Z+6	; 0x06
    2e94:	f7 81       	ldd	r31, Z+7	; 0x07
    2e96:	e0 2d       	mov	r30, r0
    2e98:	19 95       	eicall
    2e9a:	90 93 d1 06 	sts	0x06D1, r25
    2e9e:	80 93 d0 06 	sts	0x06D0, r24
	/*TODO : could init -999 here */
	
	
	if( cur_data != NULL)
    2ea2:	89 2b       	or	r24, r25
    2ea4:	09 f4       	brne	.+2      	; 0x2ea8 <LoadData_Device_Execute+0x3a>
    2ea6:	44 c0       	rjmp	.+136    	; 0x2f30 <LoadData_Device_Execute+0xc2>
	{
		updateTime((uint32_t)TimeStamp,&cur_time);
    2ea8:	80 91 d2 06 	lds	r24, 0x06D2
    2eac:	90 91 d3 06 	lds	r25, 0x06D3
    2eb0:	a0 91 d4 06 	lds	r26, 0x06D4
    2eb4:	b0 91 d5 06 	lds	r27, 0x06D5
    2eb8:	bc 01       	movw	r22, r24
    2eba:	cd 01       	movw	r24, r26
    2ebc:	88 27       	eor	r24, r24
    2ebe:	99 27       	eor	r25, r25
    2ec0:	42 e1       	ldi	r20, 0x12	; 18
    2ec2:	5a e0       	ldi	r21, 0x0A	; 10
    2ec4:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <updateTime>
		cur_data->data_tm.unix_time = cur_time.unix_time;
    2ec8:	80 91 d0 06 	lds	r24, 0x06D0
    2ecc:	90 91 d1 06 	lds	r25, 0x06D1
    2ed0:	40 91 12 0a 	lds	r20, 0x0A12
    2ed4:	50 91 13 0a 	lds	r21, 0x0A13
    2ed8:	60 91 14 0a 	lds	r22, 0x0A14
    2edc:	70 91 15 0a 	lds	r23, 0x0A15
    2ee0:	fc 01       	movw	r30, r24
    2ee2:	40 8b       	std	Z+16, r20	; 0x10
    2ee4:	51 8b       	std	Z+17, r21	; 0x11
    2ee6:	62 8b       	std	Z+18, r22	; 0x12
    2ee8:	73 8b       	std	Z+19, r23	; 0x13
		calcDate( &(cur_data->data_tm));
    2eea:	40 96       	adiw	r24, 0x10	; 16
    2eec:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <calcDate>
		printf("time debug3 %ld\n",cur_data->data_tm.unix_time);
    2ef0:	e0 91 d0 06 	lds	r30, 0x06D0
    2ef4:	f0 91 d1 06 	lds	r31, 0x06D1
    2ef8:	83 89       	ldd	r24, Z+19	; 0x13
    2efa:	8f 93       	push	r24
    2efc:	82 89       	ldd	r24, Z+18	; 0x12
    2efe:	8f 93       	push	r24
    2f00:	81 89       	ldd	r24, Z+17	; 0x11
    2f02:	8f 93       	push	r24
    2f04:	80 89       	ldd	r24, Z+16	; 0x10
    2f06:	8f 93       	push	r24
    2f08:	8b e1       	ldi	r24, 0x1B	; 27
    2f0a:	96 e0       	ldi	r25, 0x06	; 6
    2f0c:	9f 93       	push	r25
    2f0e:	8f 93       	push	r24
    2f10:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
		TimeStamp = 0;
    2f14:	10 92 d2 06 	sts	0x06D2, r1
    2f18:	10 92 d3 06 	sts	0x06D3, r1
    2f1c:	10 92 d4 06 	sts	0x06D4, r1
    2f20:	10 92 d5 06 	sts	0x06D5, r1
    2f24:	0f 90       	pop	r0
    2f26:	0f 90       	pop	r0
    2f28:	0f 90       	pop	r0
    2f2a:	0f 90       	pop	r0
    2f2c:	0f 90       	pop	r0
    2f2e:	0f 90       	pop	r0
	}
	return 0;
}
    2f30:	80 e0       	ldi	r24, 0x00	; 0
    2f32:	90 e0       	ldi	r25, 0x00	; 0
    2f34:	df 91       	pop	r29
    2f36:	cf 91       	pop	r28
    2f38:	08 95       	ret

00002f3a <New_LoadData_Device>:
=======
    1fb6:	85 e0       	ldi	r24, 0x05	; 5
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	08 95       	ret

00001fbc <LoadData_Device_Tinit>:



void LoadData_Device_Tinit(LoadDataDevice *this)
{
	this->vmt = &LoadDataDevice_vmt;
    1fbc:	22 e2       	ldi	r18, 0x22	; 34
    1fbe:	32 e0       	ldi	r19, 0x02	; 2
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	33 83       	std	Z+3, r19	; 0x03
    1fc4:	22 83       	std	Z+2, r18	; 0x02
    1fc6:	08 95       	ret

00001fc8 <LoadData_Device_Configure>:
}

int LoadData_Device_Configure(LoadDataDevice *this)
{
	return 0;
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	08 95       	ret

00001fce <LoadData_Device_Execute>:
{
	this->vmt = &LoadDataDevice_vmt;
}

int LoadData_Device_Execute(LoadDataDevice *this)
{
    1fce:	cf 93       	push	r28
    1fd0:	df 93       	push	r29
    1fd2:	ec 01       	movw	r28, r24
	printf("Executre LoadData Device\n");
    1fd4:	85 e6       	ldi	r24, 0x65	; 101
    1fd6:	94 e0       	ldi	r25, 0x04	; 4
    1fd8:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
	cur_data = this->store_device->get_CurDataUnit(this->store_device);
    1fdc:	8e 81       	ldd	r24, Y+6	; 0x06
    1fde:	9f 81       	ldd	r25, Y+7	; 0x07
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	1a 96       	adiw	r26, 0x0a	; 10
    1fe4:	ed 91       	ld	r30, X+
    1fe6:	fc 91       	ld	r31, X
    1fe8:	1b 97       	sbiw	r26, 0x0b	; 11
    1fea:	09 95       	icall
    1fec:	90 93 ee 09 	sts	0x09EE, r25
    1ff0:	80 93 ed 09 	sts	0x09ED, r24
	return 0;
}
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	df 91       	pop	r29
    1ffa:	cf 91       	pop	r28
    1ffc:	08 95       	ret

00001ffe <New_LoadData_Device>:
>>>>>>> refs/remotes/origin/master
{
	return TYPE_DEVICE;
}

LoadDataDevice* New_LoadData_Device( int infonum, DemoStorageDevice * ptr )
{
<<<<<<< HEAD
    2f3a:	0f 93       	push	r16
    2f3c:	1f 93       	push	r17
    2f3e:	cf 93       	push	r28
    2f40:	df 93       	push	r29
    2f42:	8c 01       	movw	r16, r24
    2f44:	eb 01       	movw	r28, r22
	LoadDataDevice *p = malloc(sizeof(LoadDataDevice));
    2f46:	88 e0       	ldi	r24, 0x08	; 8
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	16 d7       	rcall	.+3628   	; 0x3d78 <malloc>
    2f4c:	fc 01       	movw	r30, r24
	p->info = infonum;
    2f4e:	15 83       	std	Z+5, r17	; 0x05
    2f50:	04 83       	std	Z+4, r16	; 0x04
	p->store_device = ptr;
    2f52:	d7 83       	std	Z+7, r29	; 0x07
    2f54:	c6 83       	std	Z+6, r28	; 0x06
=======
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	8c 01       	movw	r16, r24
    2008:	eb 01       	movw	r28, r22
	LoadDataDevice *p = malloc(sizeof(LoadDataDevice));
    200a:	88 e0       	ldi	r24, 0x08	; 8
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <malloc>
    2012:	fc 01       	movw	r30, r24
	p->info = infonum;
    2014:	15 83       	std	Z+5, r17	; 0x05
    2016:	04 83       	std	Z+4, r16	; 0x04
	p->store_device = ptr;
    2018:	d7 83       	std	Z+7, r29	; 0x07
    201a:	c6 83       	std	Z+6, r28	; 0x06
>>>>>>> refs/remotes/origin/master
};


void LoadData_Device_VTinit( LoadDataDevice *this )
{
	this->abstract.device_vt = &LoadDataDevice_abstract_vmt;
<<<<<<< HEAD
    2f56:	8c e7       	ldi	r24, 0x7C	; 124
    2f58:	92 e0       	ldi	r25, 0x02	; 2
    2f5a:	91 83       	std	Z+1, r25	; 0x01
    2f5c:	80 83       	st	Z, r24
=======
    201c:	88 e2       	ldi	r24, 0x28	; 40
    201e:	92 e0       	ldi	r25, 0x02	; 2
    2020:	91 83       	std	Z+1, r25	; 0x01
    2022:	80 83       	st	Z, r24
>>>>>>> refs/remotes/origin/master



void LoadData_Device_Tinit(LoadDataDevice *this)
{
	this->vmt = &LoadDataDevice_vmt;
<<<<<<< HEAD
    2f5e:	86 e7       	ldi	r24, 0x76	; 118
    2f60:	92 e0       	ldi	r25, 0x02	; 2
    2f62:	93 83       	std	Z+3, r25	; 0x03
    2f64:	82 83       	std	Z+2, r24	; 0x02
=======
    2024:	82 e2       	ldi	r24, 0x22	; 34
    2026:	92 e0       	ldi	r25, 0x02	; 2
    2028:	93 83       	std	Z+3, r25	; 0x03
    202a:	82 83       	std	Z+2, r24	; 0x02
>>>>>>> refs/remotes/origin/master
	p->info = infonum;
	p->store_device = ptr;
	LoadData_Device_VTinit(p);
	LoadData_Device_Tinit(p);
	return p;
}
<<<<<<< HEAD
    2f66:	cf 01       	movw	r24, r30
    2f68:	df 91       	pop	r29
    2f6a:	cf 91       	pop	r28
    2f6c:	1f 91       	pop	r17
    2f6e:	0f 91       	pop	r16
    2f70:	08 95       	ret

00002f72 <BMP280_FctnInit>:
=======
    202c:	cf 01       	movw	r24, r30
    202e:	df 91       	pop	r29
    2030:	cf 91       	pop	r28
    2032:	1f 91       	pop	r17
    2034:	0f 91       	pop	r16
    2036:	08 95       	ret

00002038 <BMP280_FctnInit>:
>>>>>>> refs/remotes/origin/master



void BMP280_FctnInit(BMP280Sensor *this)
{
	this->inherited.vmt = &BMP280_vmt;
<<<<<<< HEAD
    2f72:	2c e8       	ldi	r18, 0x8C	; 140
    2f74:	32 e0       	ldi	r19, 0x02	; 2
    2f76:	fc 01       	movw	r30, r24
    2f78:	35 87       	std	Z+13, r19	; 0x0d
    2f7a:	24 87       	std	Z+12, r18	; 0x0c
    2f7c:	08 95       	ret

00002f7e <BMP280_Configure>:
=======
    2038:	28 e3       	ldi	r18, 0x38	; 56
    203a:	32 e0       	ldi	r19, 0x02	; 2
    203c:	fc 01       	movw	r30, r24
    203e:	35 87       	std	Z+13, r19	; 0x0d
    2040:	24 87       	std	Z+12, r18	; 0x0c
    2042:	08 95       	ret

00002044 <BMP280_Configure>:
>>>>>>> refs/remotes/origin/master

int BMP280_Configure(BMP280Sensor *this )
{
	// virtual function
	return 0;
}
<<<<<<< HEAD
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	08 95       	ret

00002f84 <BMP280_VTinit>:
=======
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	08 95       	ret

0000204a <BMP280_VTinit>:
>>>>>>> refs/remotes/origin/master
	printf("BMP280_Error\n");
	return 0;
}
void BMP280_VTinit( BMP280Sensor* this)
{
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
<<<<<<< HEAD
    2f84:	24 e8       	ldi	r18, 0x84	; 132
    2f86:	32 e0       	ldi	r19, 0x02	; 2
    2f88:	fc 01       	movw	r30, r24
    2f8a:	31 83       	std	Z+1, r19	; 0x01
    2f8c:	20 83       	st	Z, r18
    2f8e:	08 95       	ret

00002f90 <BMP280_reset>:
=======
    204a:	20 e3       	ldi	r18, 0x30	; 48
    204c:	32 e0       	ldi	r19, 0x02	; 2
    204e:	fc 01       	movw	r30, r24
    2050:	31 83       	std	Z+1, r19	; 0x01
    2052:	20 83       	st	Z, r18
    2054:	08 95       	ret

00002056 <BMP280_reset>:
>>>>>>> refs/remotes/origin/master

int BMP280_reset( BMP280Sensor* this)
{
    // virtual function
    return 0;
}
<<<<<<< HEAD
    2f90:	80 e0       	ldi	r24, 0x00	; 0
    2f92:	90 e0       	ldi	r25, 0x00	; 0
    2f94:	08 95       	ret

00002f96 <BMP280_getType>:
=======
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	08 95       	ret

0000205c <BMP280_getType>:
>>>>>>> refs/remotes/origin/master

int BMP280_getType(BMP280Sensor* this)
{
    return TYPE_SENSOR;
}
<<<<<<< HEAD
    2f96:	83 e0       	ldi	r24, 0x03	; 3
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	08 95       	ret

00002f9c <BMP280_Error>:
=======
    205c:	83 e0       	ldi	r24, 0x03	; 3
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	08 95       	ret

00002062 <BMP280_Error>:
>>>>>>> refs/remotes/origin/master
	return 0;
}

int BMP280_Error(BMP280Sensor *this )
{
	printf("BMP280_Error\n");
<<<<<<< HEAD
    2f9c:	8c e2       	ldi	r24, 0x2C	; 44
    2f9e:	96 e0       	ldi	r25, 0x06	; 6
    2fa0:	0e 94 27 21 	call	0x424e	; 0x424e <puts>
	return 0;
}
    2fa4:	80 e0       	ldi	r24, 0x00	; 0
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	08 95       	ret

00002faa <BMP280_init>:
=======
    2062:	8e e7       	ldi	r24, 0x7E	; 126
    2064:	94 e0       	ldi	r25, 0x04	; 4
    2066:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
	return 0;
}
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	08 95       	ret

00002070 <BMP280_init>:
>>>>>>> refs/remotes/origin/master
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
}

int BMP280_init( BMP280Sensor* this)
{
    printf("BMP280 Sensor Init\n");
<<<<<<< HEAD
    2faa:	89 e3       	ldi	r24, 0x39	; 57
    2fac:	96 e0       	ldi	r25, 0x06	; 6
    2fae:	0e 94 27 21 	call	0x424e	; 0x424e <puts>
    return 0;
}
    2fb2:	80 e0       	ldi	r24, 0x00	; 0
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	08 95       	ret

00002fb8 <BMP280_Request>:
=======
    2070:	8b e8       	ldi	r24, 0x8B	; 139
    2072:	94 e0       	ldi	r25, 0x04	; 4
    2074:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
    return 0;
}
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	08 95       	ret

0000207e <BMP280_Request>:
>>>>>>> refs/remotes/origin/master
	// virtual function
	return 0;
}

int BMP280_Request(BMP280Sensor *this )
{
<<<<<<< HEAD
    2fb8:	cf 93       	push	r28
    2fba:	df 93       	push	r29
	printf("BMP280 Request\n");
    2fbc:	8c e4       	ldi	r24, 0x4C	; 76
    2fbe:	96 e0       	ldi	r25, 0x06	; 6
    2fc0:	0e 94 27 21 	call	0x424e	; 0x424e <puts>
	int Delay = BMP280_StartMeasurment();
    2fc4:	07 d9       	rcall	.-3570   	; 0x21d4 <BMP280_StartMeasurment>
    2fc6:	c8 2f       	mov	r28, r24
    2fc8:	d0 e0       	ldi	r29, 0x00	; 0
	printf("\tWait for %d ms\n",Delay);
    2fca:	1f 92       	push	r1
    2fcc:	8f 93       	push	r24
    2fce:	8b e5       	ldi	r24, 0x5B	; 91
    2fd0:	96 e0       	ldi	r25, 0x06	; 6
    2fd2:	9f 93       	push	r25
    2fd4:	8f 93       	push	r24
    2fd6:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
	if( Delay == 0 )
    2fda:	0f 90       	pop	r0
    2fdc:	0f 90       	pop	r0
    2fde:	0f 90       	pop	r0
    2fe0:	0f 90       	pop	r0
    2fe2:	20 97       	sbiw	r28, 0x00	; 0
    2fe4:	19 f0       	breq	.+6      	; 0x2fec <BMP280_Request+0x34>
		return 0;
	else
		return ( 1 + Delay );
    2fe6:	ce 01       	movw	r24, r28
    2fe8:	01 96       	adiw	r24, 0x01	; 1
    2fea:	02 c0       	rjmp	.+4      	; 0x2ff0 <BMP280_Request+0x38>
=======
    207e:	cf 93       	push	r28
    2080:	df 93       	push	r29
	printf("BMP280 Request\n");
    2082:	8e e9       	ldi	r24, 0x9E	; 158
    2084:	94 e0       	ldi	r25, 0x04	; 4
    2086:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
	int Delay = BMP280_StartMeasurment();
    208a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <BMP280_StartMeasurment>
    208e:	c8 2f       	mov	r28, r24
    2090:	d0 e0       	ldi	r29, 0x00	; 0
	printf("\tWait for %d ms\n",Delay);
    2092:	1f 92       	push	r1
    2094:	8f 93       	push	r24
    2096:	2d ea       	ldi	r18, 0xAD	; 173
    2098:	34 e0       	ldi	r19, 0x04	; 4
    209a:	3f 93       	push	r19
    209c:	2f 93       	push	r18
    209e:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
	if( Delay == 0 )
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	20 97       	sbiw	r28, 0x00	; 0
    20ac:	19 f0       	breq	.+6      	; 0x20b4 <BMP280_Request+0x36>
		return 0;
	else
		return ( 1 + Delay );
    20ae:	ce 01       	movw	r24, r28
    20b0:	01 96       	adiw	r24, 0x01	; 1
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <BMP280_Request+0x3a>
>>>>>>> refs/remotes/origin/master
{
	printf("BMP280 Request\n");
	int Delay = BMP280_StartMeasurment();
	printf("\tWait for %d ms\n",Delay);
	if( Delay == 0 )
		return 0;
<<<<<<< HEAD
    2fec:	80 e0       	ldi	r24, 0x00	; 0
    2fee:	90 e0       	ldi	r25, 0x00	; 0
	else
		return ( 1 + Delay );
}
    2ff0:	df 91       	pop	r29
    2ff2:	cf 91       	pop	r28
    2ff4:	08 95       	ret

00002ff6 <BMP280_Collect>:

int BMP280_Collect(BMP280Sensor *this )
{
    2ff6:	ef 92       	push	r14
    2ff8:	ff 92       	push	r15
    2ffa:	0f 93       	push	r16
    2ffc:	1f 93       	push	r17
    2ffe:	cf 93       	push	r28
    3000:	df 93       	push	r29
    3002:	cd b7       	in	r28, 0x3d	; 61
    3004:	de b7       	in	r29, 0x3e	; 62
    3006:	2c 97       	sbiw	r28, 0x0c	; 12
    3008:	0f b6       	in	r0, 0x3f	; 63
    300a:	f8 94       	cli
    300c:	de bf       	out	0x3e, r29	; 62
    300e:	0f be       	out	0x3f, r0	; 63
    3010:	cd bf       	out	0x3d, r28	; 61
    3012:	8c 01       	movw	r16, r24
	printf("BMP280 Collect\n");
    3014:	8c e6       	ldi	r24, 0x6C	; 108
    3016:	96 e0       	ldi	r25, 0x06	; 6
    3018:	0e 94 27 21 	call	0x424e	; 0x424e <puts>
	// double BMP280Data[3] = {-999,-999,-999};
	double T, P, H;
	BMP280_GetTPH(&T,&P,&H);
    301c:	ae 01       	movw	r20, r28
    301e:	47 5f       	subi	r20, 0xF7	; 247
    3020:	5f 4f       	sbci	r21, 0xFF	; 255
    3022:	be 01       	movw	r22, r28
    3024:	6b 5f       	subi	r22, 0xFB	; 251
    3026:	7f 4f       	sbci	r23, 0xFF	; 255
    3028:	ce 01       	movw	r24, r28
    302a:	01 96       	adiw	r24, 0x01	; 1
    302c:	46 dd       	rcall	.-1396   	; 0x2aba <BMP280_GetTPH>
	// BMP280_GetTPH(BMP280Data,BMP280Data+1,BMP280Data+2);
	printf("\tTemperature = %.3f\n\tPressure = %.3f\n\tHumidity = %.3f\n",T,P,H);
    302e:	8c 85       	ldd	r24, Y+12	; 0x0c
    3030:	8f 93       	push	r24
    3032:	8b 85       	ldd	r24, Y+11	; 0x0b
    3034:	8f 93       	push	r24
    3036:	8a 85       	ldd	r24, Y+10	; 0x0a
    3038:	8f 93       	push	r24
    303a:	89 85       	ldd	r24, Y+9	; 0x09
    303c:	8f 93       	push	r24
    303e:	88 85       	ldd	r24, Y+8	; 0x08
    3040:	8f 93       	push	r24
    3042:	8f 81       	ldd	r24, Y+7	; 0x07
    3044:	8f 93       	push	r24
    3046:	8e 81       	ldd	r24, Y+6	; 0x06
    3048:	8f 93       	push	r24
    304a:	8d 81       	ldd	r24, Y+5	; 0x05
    304c:	8f 93       	push	r24
    304e:	8c 81       	ldd	r24, Y+4	; 0x04
    3050:	8f 93       	push	r24
    3052:	8b 81       	ldd	r24, Y+3	; 0x03
    3054:	8f 93       	push	r24
    3056:	8a 81       	ldd	r24, Y+2	; 0x02
    3058:	8f 93       	push	r24
    305a:	89 81       	ldd	r24, Y+1	; 0x01
    305c:	8f 93       	push	r24
    305e:	8b e7       	ldi	r24, 0x7B	; 123
    3060:	96 e0       	ldi	r25, 0x06	; 6
    3062:	9f 93       	push	r25
    3064:	8f 93       	push	r24
    3066:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
	printf("\tgetStart = %d\n\tgetEnd = %d\n",this->inherited.getStartNum( &this->inherited ),this->inherited.getEndNum( &this->inherited ));
    306a:	d8 01       	movw	r26, r16
    306c:	1a 96       	adiw	r26, 0x0a	; 10
    306e:	ed 91       	ld	r30, X+
    3070:	fc 91       	ld	r31, X
    3072:	1b 97       	sbiw	r26, 0x0b	; 11
    3074:	c8 01       	movw	r24, r16
    3076:	19 95       	eicall
    3078:	f8 2e       	mov	r15, r24
    307a:	e9 2e       	mov	r14, r25
    307c:	d8 01       	movw	r26, r16
    307e:	18 96       	adiw	r26, 0x08	; 8
    3080:	ed 91       	ld	r30, X+
    3082:	fc 91       	ld	r31, X
    3084:	19 97       	sbiw	r26, 0x09	; 9
    3086:	c8 01       	movw	r24, r16
    3088:	19 95       	eicall
    308a:	ef 92       	push	r14
    308c:	ff 92       	push	r15
    308e:	9f 93       	push	r25
    3090:	8f 93       	push	r24
    3092:	82 eb       	ldi	r24, 0xB2	; 178
    3094:	96 e0       	ldi	r25, 0x06	; 6
    3096:	9f 93       	push	r25
    3098:	8f 93       	push	r24
    309a:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
	for( int i = this->inherited.getStartNum(); i < this->inherited.getEndNum(); ++i )
	{
		cur_data->data[i] = BMP280Data[j++];
	}
	*/
	cur_data->data[0] = T;
    309e:	e0 91 d0 06 	lds	r30, 0x06D0
    30a2:	f0 91 d1 06 	lds	r31, 0x06D1
    30a6:	89 81       	ldd	r24, Y+1	; 0x01
    30a8:	9a 81       	ldd	r25, Y+2	; 0x02
    30aa:	ab 81       	ldd	r26, Y+3	; 0x03
    30ac:	bc 81       	ldd	r27, Y+4	; 0x04
    30ae:	80 83       	st	Z, r24
    30b0:	91 83       	std	Z+1, r25	; 0x01
    30b2:	a2 83       	std	Z+2, r26	; 0x02
    30b4:	b3 83       	std	Z+3, r27	; 0x03
	cur_data->data[1] = P; 
    30b6:	e0 91 d0 06 	lds	r30, 0x06D0
    30ba:	f0 91 d1 06 	lds	r31, 0x06D1
    30be:	8d 81       	ldd	r24, Y+5	; 0x05
    30c0:	9e 81       	ldd	r25, Y+6	; 0x06
    30c2:	af 81       	ldd	r26, Y+7	; 0x07
    30c4:	b8 85       	ldd	r27, Y+8	; 0x08
    30c6:	84 83       	std	Z+4, r24	; 0x04
    30c8:	95 83       	std	Z+5, r25	; 0x05
    30ca:	a6 83       	std	Z+6, r26	; 0x06
    30cc:	b7 83       	std	Z+7, r27	; 0x07
	return 0;
    30ce:	0f b6       	in	r0, 0x3f	; 63
    30d0:	f8 94       	cli
    30d2:	de bf       	out	0x3e, r29	; 62
    30d4:	0f be       	out	0x3f, r0	; 63
    30d6:	cd bf       	out	0x3d, r28	; 61
}
    30d8:	80 e0       	ldi	r24, 0x00	; 0
    30da:	90 e0       	ldi	r25, 0x00	; 0
    30dc:	2c 96       	adiw	r28, 0x0c	; 12
    30de:	0f b6       	in	r0, 0x3f	; 63
    30e0:	f8 94       	cli
    30e2:	de bf       	out	0x3e, r29	; 62
    30e4:	0f be       	out	0x3f, r0	; 63
    30e6:	cd bf       	out	0x3d, r28	; 61
    30e8:	df 91       	pop	r29
    30ea:	cf 91       	pop	r28
    30ec:	1f 91       	pop	r17
    30ee:	0f 91       	pop	r16
    30f0:	ff 90       	pop	r15
    30f2:	ef 90       	pop	r14
    30f4:	08 95       	ret

000030f6 <New_BMP280_Sensor>:
=======
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	90 e0       	ldi	r25, 0x00	; 0
	else
		return ( 1 + Delay );
}
    20b8:	df 91       	pop	r29
    20ba:	cf 91       	pop	r28
    20bc:	08 95       	ret

000020be <BMP280_Collect>:

int BMP280_Collect(BMP280Sensor *this )
{
    20be:	cf 93       	push	r28
    20c0:	df 93       	push	r29
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	28 97       	sbiw	r28, 0x08	; 8
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	f8 94       	cli
    20cc:	de bf       	out	0x3e, r29	; 62
    20ce:	0f be       	out	0x3f, r0	; 63
    20d0:	cd bf       	out	0x3d, r28	; 61
	printf("BMP280 Collect\n");
    20d2:	8e eb       	ldi	r24, 0xBE	; 190
    20d4:	94 e0       	ldi	r25, 0x04	; 4
    20d6:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
	double T, P;
	BMP280_GetTemperatureAndPressure(&T,&P);
    20da:	be 01       	movw	r22, r28
    20dc:	6b 5f       	subi	r22, 0xFB	; 251
    20de:	7f 4f       	sbci	r23, 0xFF	; 255
    20e0:	ce 01       	movw	r24, r28
    20e2:	01 96       	adiw	r24, 0x01	; 1
    20e4:	0e 94 2c 06 	call	0xc58	; 0xc58 <BMP280_GetTemperatureAndPressure>
	printf("\tTemperature = %.3f\n\tPressure = %.3f\n",T,P);
    20e8:	88 85       	ldd	r24, Y+8	; 0x08
    20ea:	8f 93       	push	r24
    20ec:	8f 81       	ldd	r24, Y+7	; 0x07
    20ee:	8f 93       	push	r24
    20f0:	8e 81       	ldd	r24, Y+6	; 0x06
    20f2:	8f 93       	push	r24
    20f4:	8d 81       	ldd	r24, Y+5	; 0x05
    20f6:	8f 93       	push	r24
    20f8:	8c 81       	ldd	r24, Y+4	; 0x04
    20fa:	8f 93       	push	r24
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	8f 93       	push	r24
    2100:	8a 81       	ldd	r24, Y+2	; 0x02
    2102:	8f 93       	push	r24
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	8f 93       	push	r24
    2108:	8d ec       	ldi	r24, 0xCD	; 205
    210a:	94 e0       	ldi	r25, 0x04	; 4
    210c:	9f 93       	push	r25
    210e:	8f 93       	push	r24
    2110:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
	return 0;
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
}
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	28 96       	adiw	r28, 0x08	; 8
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	f8 94       	cli
    2128:	de bf       	out	0x3e, r29	; 62
    212a:	0f be       	out	0x3f, r0	; 63
    212c:	cd bf       	out	0x3d, r28	; 61
    212e:	df 91       	pop	r29
    2130:	cf 91       	pop	r28
    2132:	08 95       	ret

00002134 <New_BMP280_Sensor>:
>>>>>>> refs/remotes/origin/master
    return TYPE_SENSOR;
}


BMP280Sensor* New_BMP280_Sensor( int num, int NumData )
{
<<<<<<< HEAD
    30f6:	ef 92       	push	r14
    30f8:	ff 92       	push	r15
    30fa:	0f 93       	push	r16
    30fc:	1f 93       	push	r17
    30fe:	cf 93       	push	r28
    3100:	df 93       	push	r29
    3102:	7c 01       	movw	r14, r24
    3104:	8b 01       	movw	r16, r22
	BMP280Sensor *p = malloc(sizeof(BMP280Sensor));
    3106:	8e e0       	ldi	r24, 0x0E	; 14
    3108:	90 e0       	ldi	r25, 0x00	; 0
    310a:	36 d6       	rcall	.+3180   	; 0x3d78 <malloc>
    310c:	ec 01       	movw	r28, r24
	p->inherited.getStartNum = fctn_getStartNum;
    310e:	80 e3       	ldi	r24, 0x30	; 48
    3110:	9d e0       	ldi	r25, 0x0D	; 13
    3112:	99 87       	std	Y+9, r25	; 0x09
    3114:	88 87       	std	Y+8, r24	; 0x08
	p->inherited.getEndNum = fctn_getEndNum;
    3116:	84 e3       	ldi	r24, 0x34	; 52
    3118:	9d e0       	ldi	r25, 0x0D	; 13
    311a:	9b 87       	std	Y+11, r25	; 0x0b
    311c:	8a 87       	std	Y+10, r24	; 0x0a
=======
    2134:	ef 92       	push	r14
    2136:	ff 92       	push	r15
    2138:	0f 93       	push	r16
    213a:	1f 93       	push	r17
    213c:	cf 93       	push	r28
    213e:	df 93       	push	r29
    2140:	7c 01       	movw	r14, r24
    2142:	8b 01       	movw	r16, r22
	BMP280Sensor *p = malloc(sizeof(BMP280Sensor));
    2144:	8e e0       	ldi	r24, 0x0E	; 14
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <malloc>
    214c:	ec 01       	movw	r28, r24
>>>>>>> refs/remotes/origin/master
	printf("BMP280_Error\n");
	return 0;
}
void BMP280_VTinit( BMP280Sensor* this)
{
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
<<<<<<< HEAD
    311e:	84 e8       	ldi	r24, 0x84	; 132
    3120:	92 e0       	ldi	r25, 0x02	; 2
    3122:	99 83       	std	Y+1, r25	; 0x01
    3124:	88 83       	st	Y, r24
=======
    214e:	80 e3       	ldi	r24, 0x30	; 48
    2150:	92 e0       	ldi	r25, 0x02	; 2
    2152:	99 83       	std	Y+1, r25	; 0x01
    2154:	88 83       	st	Y, r24
>>>>>>> refs/remotes/origin/master



void BMP280_FctnInit(BMP280Sensor *this)
{
	this->inherited.vmt = &BMP280_vmt;
<<<<<<< HEAD
    3126:	8c e8       	ldi	r24, 0x8C	; 140
    3128:	92 e0       	ldi	r25, 0x02	; 2
    312a:	9d 87       	std	Y+13, r25	; 0x0d
    312c:	8c 87       	std	Y+12, r24	; 0x0c
	p->inherited.getEndNum = fctn_getEndNum;
    BMP280_VTinit( p );
    BMP280_FctnInit( p );
	
	
	p->inherited.test_num = num;
    312e:	fb 82       	std	Y+3, r15	; 0x03
    3130:	ea 82       	std	Y+2, r14	; 0x02
	p->inherited.NumOfData = NumData;
    3132:	1f 83       	std	Y+7, r17	; 0x07
    3134:	0e 83       	std	Y+6, r16	; 0x06
	p->inherited.StartNum = SensorDataCount;
    3136:	80 91 f0 0b 	lds	r24, 0x0BF0
    313a:	90 91 f1 0b 	lds	r25, 0x0BF1
    313e:	9d 83       	std	Y+5, r25	; 0x05
    3140:	8c 83       	std	Y+4, r24	; 0x04
=======
    2156:	88 e3       	ldi	r24, 0x38	; 56
    2158:	92 e0       	ldi	r25, 0x02	; 2
    215a:	9d 87       	std	Y+13, r25	; 0x0d
    215c:	8c 87       	std	Y+12, r24	; 0x0c
BMP280Sensor* New_BMP280_Sensor( int num, int NumData )
{
	BMP280Sensor *p = malloc(sizeof(BMP280Sensor));
    BMP280_VTinit( p );
    BMP280_FctnInit( p );
	p->inherited.test_num = num;
    215e:	fb 82       	std	Y+3, r15	; 0x03
    2160:	ea 82       	std	Y+2, r14	; 0x02
	
	p->inherited.NumOfData = NumData;
    2162:	1f 83       	std	Y+7, r17	; 0x07
    2164:	0e 83       	std	Y+6, r16	; 0x06
	p->inherited.StartNum = SensorDataCount;
    2166:	60 91 eb 09 	lds	r22, 0x09EB
    216a:	70 91 ec 09 	lds	r23, 0x09EC
    216e:	7d 83       	std	Y+5, r23	; 0x05
    2170:	6c 83       	std	Y+4, r22	; 0x04
	SensorDataCount += NumData;
    2172:	60 0f       	add	r22, r16
    2174:	71 1f       	adc	r23, r17
    2176:	70 93 ec 09 	sts	0x09EC, r23
    217a:	60 93 eb 09 	sts	0x09EB, r22
	printf("SensorDataCount %d\n",SensorDataCount);
    217e:	7f 93       	push	r23
    2180:	6f 93       	push	r22
    2182:	83 ef       	ldi	r24, 0xF3	; 243
    2184:	94 e0       	ldi	r25, 0x04	; 4
    2186:	9f 93       	push	r25
    2188:	8f 93       	push	r24
    218a:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
	
	return p;
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	ce 01       	movw	r24, r28
    2198:	df 91       	pop	r29
    219a:	cf 91       	pop	r28
    219c:	1f 91       	pop	r17
    219e:	0f 91       	pop	r16
    21a0:	ff 90       	pop	r15
    21a2:	ef 90       	pop	r14
    21a4:	08 95       	ret

000021a6 <Si7020_FctnInit>:



void Si7020_FctnInit(Si7020Sensor *this)
{
	this->inherited.vmt = &Si7020_vmt;
    21a6:	2a e4       	ldi	r18, 0x4A	; 74
    21a8:	32 e0       	ldi	r19, 0x02	; 2
    21aa:	fc 01       	movw	r30, r24
    21ac:	35 87       	std	Z+13, r19	; 0x0d
    21ae:	24 87       	std	Z+12, r18	; 0x0c
    21b0:	08 95       	ret

000021b2 <Si7020_Configure>:

int Si7020_Configure(Si7020Sensor *this )
{
	// virtual function
	return 0;
}
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	08 95       	ret

000021b8 <Si7020_Error>:

int Si7020_Error(Si7020Sensor *this )
{
	// virtual function
	return 0;
}
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	08 95       	ret

000021be <Si7020_VTinit>:
void Si7020_VTinit( Si7020Sensor* this)
{
	this->inherited.abstract.device_vt = &Si7020_abstract_vmt;
    21be:	22 e4       	ldi	r18, 0x42	; 66
    21c0:	32 e0       	ldi	r19, 0x02	; 2
    21c2:	fc 01       	movw	r30, r24
    21c4:	31 83       	std	Z+1, r19	; 0x01
    21c6:	20 83       	st	Z, r18
    21c8:	08 95       	ret

000021ca <Si7020_reset>:

int Si7020_reset( Si7020Sensor* this)
{
	// virtual function
	return 0;
}
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	08 95       	ret

000021d0 <Si7020_getType>:

int Si7020_getType(Si7020Sensor* this)
{
	return TYPE_SENSOR;
}
    21d0:	83 e0       	ldi	r24, 0x03	; 3
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	08 95       	ret

000021d6 <Si7020_Init>:
	this->inherited.abstract.device_vt = &Si7020_abstract_vmt;
}

int Si7020_Init( Si7020Sensor* this)
{
	printf("Si7020 Sensor Init\n");
    21d6:	87 e0       	ldi	r24, 0x07	; 7
    21d8:	95 e0       	ldi	r25, 0x05	; 5
    21da:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
	return 0;
}
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	08 95       	ret

000021e4 <Si7020_Request>:
	// virtual function
	return 0;
}

int Si7020_Request(Si7020Sensor *this )
{
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	ec 01       	movw	r28, r24
	printf("Si7020_Request\n");
    21ea:	8a e1       	ldi	r24, 0x1A	; 26
    21ec:	95 e0       	ldi	r25, 0x05	; 5
    21ee:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
	Si7020_readTemperature(this->temperature_data,3);
    21f2:	63 e0       	ldi	r22, 0x03	; 3
    21f4:	ce 01       	movw	r24, r28
    21f6:	0e 96       	adiw	r24, 0x0e	; 14
    21f8:	0e 94 c3 06 	call	0xd86	; 0xd86 <Si7020_readTemperature>
	Si7020_readHumidity(this->humility_data,3);
    21fc:	63 e0       	ldi	r22, 0x03	; 3
    21fe:	ce 01       	movw	r24, r28
    2200:	41 96       	adiw	r24, 0x11	; 17
    2202:	0e 94 72 06 	call	0xce4	; 0xce4 <Si7020_readHumidity>
	return 0;
}
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	df 91       	pop	r29
    220c:	cf 91       	pop	r28
    220e:	08 95       	ret

00002210 <Si7020_Collect>:

int Si7020_Collect(Si7020Sensor *this )
{
    2210:	ef 92       	push	r14
    2212:	ff 92       	push	r15
    2214:	0f 93       	push	r16
    2216:	1f 93       	push	r17
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
    221c:	ec 01       	movw	r28, r24
	printf("Si7020_Collect\n");
    221e:	89 e2       	ldi	r24, 0x29	; 41
    2220:	95 e0       	ldi	r25, 0x05	; 5
    2222:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
	float T = Si7020_calTemperature(this->temperature_data);
    2226:	ce 01       	movw	r24, r28
    2228:	0e 96       	adiw	r24, 0x0e	; 14
    222a:	0e 94 f5 06 	call	0xdea	; 0xdea <Si7020_calTemperature>
    222e:	16 2f       	mov	r17, r22
    2230:	07 2f       	mov	r16, r23
    2232:	f8 2e       	mov	r15, r24
    2234:	e9 2e       	mov	r14, r25
	float H = Si7020_calHumidity(this->humility_data);
    2236:	ce 01       	movw	r24, r28
    2238:	41 96       	adiw	r24, 0x11	; 17
    223a:	0e 94 a4 06 	call	0xd48	; 0xd48 <Si7020_calHumidity>
	printf("\tTemperature = %.3f\n\tHumility = %.3f\n",T,H);
    223e:	9f 93       	push	r25
    2240:	8f 93       	push	r24
    2242:	7f 93       	push	r23
    2244:	6f 93       	push	r22
    2246:	ef 92       	push	r14
    2248:	ff 92       	push	r15
    224a:	0f 93       	push	r16
    224c:	1f 93       	push	r17
    224e:	88 e3       	ldi	r24, 0x38	; 56
    2250:	95 e0       	ldi	r25, 0x05	; 5
    2252:	9f 93       	push	r25
    2254:	8f 93       	push	r24
    2256:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
	return 0;
    225a:	8d b7       	in	r24, 0x3d	; 61
    225c:	9e b7       	in	r25, 0x3e	; 62
    225e:	0a 96       	adiw	r24, 0x0a	; 10
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	f8 94       	cli
    2264:	9e bf       	out	0x3e, r25	; 62
    2266:	0f be       	out	0x3f, r0	; 63
    2268:	8d bf       	out	0x3d, r24	; 61
}
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	df 91       	pop	r29
    2270:	cf 91       	pop	r28
    2272:	1f 91       	pop	r17
    2274:	0f 91       	pop	r16
    2276:	ff 90       	pop	r15
    2278:	ef 90       	pop	r14
    227a:	08 95       	ret

0000227c <New_Si7020_Sensor>:
	return TYPE_SENSOR;
}


Si7020Sensor* New_Si7020_Sensor( int num, int NumData)
{
    227c:	ef 92       	push	r14
    227e:	ff 92       	push	r15
    2280:	0f 93       	push	r16
    2282:	1f 93       	push	r17
    2284:	cf 93       	push	r28
    2286:	df 93       	push	r29
    2288:	7c 01       	movw	r14, r24
    228a:	8b 01       	movw	r16, r22
	Si7020Sensor *p = malloc(sizeof(Si7020Sensor));
    228c:	84 e1       	ldi	r24, 0x14	; 20
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <malloc>
    2294:	ec 01       	movw	r28, r24
	// virtual function
	return 0;
}
void Si7020_VTinit( Si7020Sensor* this)
{
	this->inherited.abstract.device_vt = &Si7020_abstract_vmt;
    2296:	82 e4       	ldi	r24, 0x42	; 66
    2298:	92 e0       	ldi	r25, 0x02	; 2
    229a:	99 83       	std	Y+1, r25	; 0x01
    229c:	88 83       	st	Y, r24



void Si7020_FctnInit(Si7020Sensor *this)
{
	this->inherited.vmt = &Si7020_vmt;
    229e:	8a e4       	ldi	r24, 0x4A	; 74
    22a0:	92 e0       	ldi	r25, 0x02	; 2
    22a2:	9d 87       	std	Y+13, r25	; 0x0d
    22a4:	8c 87       	std	Y+12, r24	; 0x0c
Si7020Sensor* New_Si7020_Sensor( int num, int NumData)
{
	Si7020Sensor *p = malloc(sizeof(Si7020Sensor));
	Si7020_VTinit( p );
	Si7020_FctnInit( p );
	p->inherited.test_num = num;
    22a6:	fb 82       	std	Y+3, r15	; 0x03
    22a8:	ea 82       	std	Y+2, r14	; 0x02
	
	p->inherited.NumOfData = NumData;
    22aa:	1f 83       	std	Y+7, r17	; 0x07
    22ac:	0e 83       	std	Y+6, r16	; 0x06
	p->inherited.StartNum = SensorDataCount;
    22ae:	60 91 eb 09 	lds	r22, 0x09EB
    22b2:	70 91 ec 09 	lds	r23, 0x09EC
    22b6:	7d 83       	std	Y+5, r23	; 0x05
    22b8:	6c 83       	std	Y+4, r22	; 0x04
	SensorDataCount += NumData;
    22ba:	60 0f       	add	r22, r16
    22bc:	71 1f       	adc	r23, r17
    22be:	70 93 ec 09 	sts	0x09EC, r23
    22c2:	60 93 eb 09 	sts	0x09EB, r22
	printf("SensorDataCount %d\n",SensorDataCount);
    22c6:	7f 93       	push	r23
    22c8:	6f 93       	push	r22
    22ca:	83 ef       	ldi	r24, 0xF3	; 243
    22cc:	94 e0       	ldi	r25, 0x04	; 4
    22ce:	9f 93       	push	r25
    22d0:	8f 93       	push	r24
    22d2:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
	
	for(int i = 0; i < 3; ++i )
	{
		p->temperature_data[i] = 0;
    22d6:	1e 86       	std	Y+14, r1	; 0x0e
		p->humility_data[i] = 0;
    22d8:	19 8a       	std	Y+17, r1	; 0x11
	SensorDataCount += NumData;
	printf("SensorDataCount %d\n",SensorDataCount);
	
	for(int i = 0; i < 3; ++i )
	{
		p->temperature_data[i] = 0;
    22da:	1f 86       	std	Y+15, r1	; 0x0f
		p->humility_data[i] = 0;
    22dc:	1a 8a       	std	Y+18, r1	; 0x12
>>>>>>> refs/remotes/origin/master
	SensorDataCount += NumData;
    3142:	b8 01       	movw	r22, r16
    3144:	68 0f       	add	r22, r24
    3146:	79 1f       	adc	r23, r25
    3148:	70 93 f1 0b 	sts	0x0BF1, r23
    314c:	60 93 f0 0b 	sts	0x0BF0, r22
	printf("SensorDataCount %d\n",SensorDataCount);
<<<<<<< HEAD
    3150:	7f 93       	push	r23
    3152:	6f 93       	push	r22
    3154:	82 e0       	ldi	r24, 0x02	; 2
    3156:	93 e0       	ldi	r25, 0x03	; 3
    3158:	9f 93       	push	r25
    315a:	8f 93       	push	r24
    315c:	0e 94 0f 21 	call	0x421e	; 0x421e <printf>
	//printf("get start %d end %d\n",p->inherited.getStartNum(& (p->inherited) ),p->inherited.getEndNum(& (p->inherited)));
	
	return p;
    3160:	0f 90       	pop	r0
    3162:	0f 90       	pop	r0
    3164:	0f 90       	pop	r0
    3166:	0f 90       	pop	r0
    3168:	ce 01       	movw	r24, r28
    316a:	df 91       	pop	r29
    316c:	cf 91       	pop	r28
    316e:	1f 91       	pop	r17
    3170:	0f 91       	pop	r16
    3172:	ff 90       	pop	r15
    3174:	ef 90       	pop	r14
    3176:	08 95       	ret

00003178 <__subsf3>:
    3178:	50 58       	subi	r21, 0x80	; 128

0000317a <__addsf3>:
    317a:	bb 27       	eor	r27, r27
    317c:	aa 27       	eor	r26, r26
    317e:	0e d0       	rcall	.+28     	; 0x319c <__addsf3x>
    3180:	75 c1       	rjmp	.+746    	; 0x346c <__fp_round>
    3182:	66 d1       	rcall	.+716    	; 0x3450 <__fp_pscA>
    3184:	30 f0       	brcs	.+12     	; 0x3192 <__addsf3+0x18>
    3186:	6b d1       	rcall	.+726    	; 0x345e <__fp_pscB>
    3188:	20 f0       	brcs	.+8      	; 0x3192 <__addsf3+0x18>
    318a:	31 f4       	brne	.+12     	; 0x3198 <__addsf3+0x1e>
    318c:	9f 3f       	cpi	r25, 0xFF	; 255
    318e:	11 f4       	brne	.+4      	; 0x3194 <__addsf3+0x1a>
    3190:	1e f4       	brtc	.+6      	; 0x3198 <__addsf3+0x1e>
    3192:	5b c1       	rjmp	.+694    	; 0x344a <__fp_nan>
    3194:	0e f4       	brtc	.+2      	; 0x3198 <__addsf3+0x1e>
    3196:	e0 95       	com	r30
    3198:	e7 fb       	bst	r30, 7
    319a:	51 c1       	rjmp	.+674    	; 0x343e <__fp_inf>

0000319c <__addsf3x>:
    319c:	e9 2f       	mov	r30, r25
    319e:	77 d1       	rcall	.+750    	; 0x348e <__fp_split3>
    31a0:	80 f3       	brcs	.-32     	; 0x3182 <__addsf3+0x8>
    31a2:	ba 17       	cp	r27, r26
    31a4:	62 07       	cpc	r22, r18
    31a6:	73 07       	cpc	r23, r19
    31a8:	84 07       	cpc	r24, r20
    31aa:	95 07       	cpc	r25, r21
    31ac:	18 f0       	brcs	.+6      	; 0x31b4 <__addsf3x+0x18>
    31ae:	71 f4       	brne	.+28     	; 0x31cc <__addsf3x+0x30>
    31b0:	9e f5       	brtc	.+102    	; 0x3218 <__addsf3x+0x7c>
    31b2:	8f c1       	rjmp	.+798    	; 0x34d2 <__fp_zero>
    31b4:	0e f4       	brtc	.+2      	; 0x31b8 <__addsf3x+0x1c>
    31b6:	e0 95       	com	r30
    31b8:	0b 2e       	mov	r0, r27
    31ba:	ba 2f       	mov	r27, r26
    31bc:	a0 2d       	mov	r26, r0
    31be:	0b 01       	movw	r0, r22
    31c0:	b9 01       	movw	r22, r18
    31c2:	90 01       	movw	r18, r0
    31c4:	0c 01       	movw	r0, r24
    31c6:	ca 01       	movw	r24, r20
    31c8:	a0 01       	movw	r20, r0
    31ca:	11 24       	eor	r1, r1
    31cc:	ff 27       	eor	r31, r31
    31ce:	59 1b       	sub	r21, r25
    31d0:	99 f0       	breq	.+38     	; 0x31f8 <__addsf3x+0x5c>
    31d2:	59 3f       	cpi	r21, 0xF9	; 249
    31d4:	50 f4       	brcc	.+20     	; 0x31ea <__addsf3x+0x4e>
    31d6:	50 3e       	cpi	r21, 0xE0	; 224
    31d8:	68 f1       	brcs	.+90     	; 0x3234 <__addsf3x+0x98>
    31da:	1a 16       	cp	r1, r26
    31dc:	f0 40       	sbci	r31, 0x00	; 0
    31de:	a2 2f       	mov	r26, r18
    31e0:	23 2f       	mov	r18, r19
    31e2:	34 2f       	mov	r19, r20
    31e4:	44 27       	eor	r20, r20
    31e6:	58 5f       	subi	r21, 0xF8	; 248
    31e8:	f3 cf       	rjmp	.-26     	; 0x31d0 <__addsf3x+0x34>
    31ea:	46 95       	lsr	r20
    31ec:	37 95       	ror	r19
    31ee:	27 95       	ror	r18
    31f0:	a7 95       	ror	r26
    31f2:	f0 40       	sbci	r31, 0x00	; 0
    31f4:	53 95       	inc	r21
    31f6:	c9 f7       	brne	.-14     	; 0x31ea <__addsf3x+0x4e>
    31f8:	7e f4       	brtc	.+30     	; 0x3218 <__addsf3x+0x7c>
    31fa:	1f 16       	cp	r1, r31
    31fc:	ba 0b       	sbc	r27, r26
    31fe:	62 0b       	sbc	r22, r18
    3200:	73 0b       	sbc	r23, r19
    3202:	84 0b       	sbc	r24, r20
    3204:	ba f0       	brmi	.+46     	; 0x3234 <__addsf3x+0x98>
    3206:	91 50       	subi	r25, 0x01	; 1
    3208:	a1 f0       	breq	.+40     	; 0x3232 <__addsf3x+0x96>
    320a:	ff 0f       	add	r31, r31
    320c:	bb 1f       	adc	r27, r27
    320e:	66 1f       	adc	r22, r22
    3210:	77 1f       	adc	r23, r23
    3212:	88 1f       	adc	r24, r24
    3214:	c2 f7       	brpl	.-16     	; 0x3206 <__addsf3x+0x6a>
    3216:	0e c0       	rjmp	.+28     	; 0x3234 <__addsf3x+0x98>
    3218:	ba 0f       	add	r27, r26
    321a:	62 1f       	adc	r22, r18
    321c:	73 1f       	adc	r23, r19
    321e:	84 1f       	adc	r24, r20
    3220:	48 f4       	brcc	.+18     	; 0x3234 <__addsf3x+0x98>
    3222:	87 95       	ror	r24
    3224:	77 95       	ror	r23
    3226:	67 95       	ror	r22
    3228:	b7 95       	ror	r27
    322a:	f7 95       	ror	r31
    322c:	9e 3f       	cpi	r25, 0xFE	; 254
    322e:	08 f0       	brcs	.+2      	; 0x3232 <__addsf3x+0x96>
    3230:	b3 cf       	rjmp	.-154    	; 0x3198 <__addsf3+0x1e>
    3232:	93 95       	inc	r25
    3234:	88 0f       	add	r24, r24
    3236:	08 f0       	brcs	.+2      	; 0x323a <__addsf3x+0x9e>
    3238:	99 27       	eor	r25, r25
    323a:	ee 0f       	add	r30, r30
    323c:	97 95       	ror	r25
    323e:	87 95       	ror	r24
    3240:	08 95       	ret

00003242 <__cmpsf2>:
    3242:	d9 d0       	rcall	.+434    	; 0x33f6 <__fp_cmp>
    3244:	08 f4       	brcc	.+2      	; 0x3248 <__cmpsf2+0x6>
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	08 95       	ret

0000324a <__divsf3>:
    324a:	0c d0       	rcall	.+24     	; 0x3264 <__divsf3x>
    324c:	0f c1       	rjmp	.+542    	; 0x346c <__fp_round>
    324e:	07 d1       	rcall	.+526    	; 0x345e <__fp_pscB>
    3250:	40 f0       	brcs	.+16     	; 0x3262 <__divsf3+0x18>
    3252:	fe d0       	rcall	.+508    	; 0x3450 <__fp_pscA>
    3254:	30 f0       	brcs	.+12     	; 0x3262 <__divsf3+0x18>
    3256:	21 f4       	brne	.+8      	; 0x3260 <__divsf3+0x16>
    3258:	5f 3f       	cpi	r21, 0xFF	; 255
    325a:	19 f0       	breq	.+6      	; 0x3262 <__divsf3+0x18>
    325c:	f0 c0       	rjmp	.+480    	; 0x343e <__fp_inf>
    325e:	51 11       	cpse	r21, r1
    3260:	39 c1       	rjmp	.+626    	; 0x34d4 <__fp_szero>
    3262:	f3 c0       	rjmp	.+486    	; 0x344a <__fp_nan>

00003264 <__divsf3x>:
    3264:	14 d1       	rcall	.+552    	; 0x348e <__fp_split3>
    3266:	98 f3       	brcs	.-26     	; 0x324e <__divsf3+0x4>

00003268 <__divsf3_pse>:
    3268:	99 23       	and	r25, r25
    326a:	c9 f3       	breq	.-14     	; 0x325e <__divsf3+0x14>
    326c:	55 23       	and	r21, r21
    326e:	b1 f3       	breq	.-20     	; 0x325c <__divsf3+0x12>
    3270:	95 1b       	sub	r25, r21
    3272:	55 0b       	sbc	r21, r21
    3274:	bb 27       	eor	r27, r27
    3276:	aa 27       	eor	r26, r26
    3278:	62 17       	cp	r22, r18
    327a:	73 07       	cpc	r23, r19
    327c:	84 07       	cpc	r24, r20
    327e:	38 f0       	brcs	.+14     	; 0x328e <__divsf3_pse+0x26>
    3280:	9f 5f       	subi	r25, 0xFF	; 255
    3282:	5f 4f       	sbci	r21, 0xFF	; 255
    3284:	22 0f       	add	r18, r18
    3286:	33 1f       	adc	r19, r19
    3288:	44 1f       	adc	r20, r20
    328a:	aa 1f       	adc	r26, r26
    328c:	a9 f3       	breq	.-22     	; 0x3278 <__divsf3_pse+0x10>
    328e:	33 d0       	rcall	.+102    	; 0x32f6 <__divsf3_pse+0x8e>
    3290:	0e 2e       	mov	r0, r30
    3292:	3a f0       	brmi	.+14     	; 0x32a2 <__divsf3_pse+0x3a>
    3294:	e0 e8       	ldi	r30, 0x80	; 128
    3296:	30 d0       	rcall	.+96     	; 0x32f8 <__divsf3_pse+0x90>
    3298:	91 50       	subi	r25, 0x01	; 1
    329a:	50 40       	sbci	r21, 0x00	; 0
    329c:	e6 95       	lsr	r30
    329e:	00 1c       	adc	r0, r0
    32a0:	ca f7       	brpl	.-14     	; 0x3294 <__divsf3_pse+0x2c>
    32a2:	29 d0       	rcall	.+82     	; 0x32f6 <__divsf3_pse+0x8e>
    32a4:	fe 2f       	mov	r31, r30
    32a6:	27 d0       	rcall	.+78     	; 0x32f6 <__divsf3_pse+0x8e>
    32a8:	66 0f       	add	r22, r22
    32aa:	77 1f       	adc	r23, r23
    32ac:	88 1f       	adc	r24, r24
    32ae:	bb 1f       	adc	r27, r27
    32b0:	26 17       	cp	r18, r22
    32b2:	37 07       	cpc	r19, r23
    32b4:	48 07       	cpc	r20, r24
    32b6:	ab 07       	cpc	r26, r27
    32b8:	b0 e8       	ldi	r27, 0x80	; 128
    32ba:	09 f0       	breq	.+2      	; 0x32be <__divsf3_pse+0x56>
    32bc:	bb 0b       	sbc	r27, r27
    32be:	80 2d       	mov	r24, r0
    32c0:	bf 01       	movw	r22, r30
    32c2:	ff 27       	eor	r31, r31
    32c4:	93 58       	subi	r25, 0x83	; 131
    32c6:	5f 4f       	sbci	r21, 0xFF	; 255
    32c8:	2a f0       	brmi	.+10     	; 0x32d4 <__divsf3_pse+0x6c>
    32ca:	9e 3f       	cpi	r25, 0xFE	; 254
    32cc:	51 05       	cpc	r21, r1
    32ce:	68 f0       	brcs	.+26     	; 0x32ea <__divsf3_pse+0x82>
    32d0:	b6 c0       	rjmp	.+364    	; 0x343e <__fp_inf>
    32d2:	00 c1       	rjmp	.+512    	; 0x34d4 <__fp_szero>
    32d4:	5f 3f       	cpi	r21, 0xFF	; 255
    32d6:	ec f3       	brlt	.-6      	; 0x32d2 <__divsf3_pse+0x6a>
    32d8:	98 3e       	cpi	r25, 0xE8	; 232
    32da:	dc f3       	brlt	.-10     	; 0x32d2 <__divsf3_pse+0x6a>
    32dc:	86 95       	lsr	r24
    32de:	77 95       	ror	r23
    32e0:	67 95       	ror	r22
    32e2:	b7 95       	ror	r27
    32e4:	f7 95       	ror	r31
    32e6:	9f 5f       	subi	r25, 0xFF	; 255
    32e8:	c9 f7       	brne	.-14     	; 0x32dc <__divsf3_pse+0x74>
    32ea:	88 0f       	add	r24, r24
    32ec:	91 1d       	adc	r25, r1
    32ee:	96 95       	lsr	r25
    32f0:	87 95       	ror	r24
    32f2:	97 f9       	bld	r25, 7
    32f4:	08 95       	ret
    32f6:	e1 e0       	ldi	r30, 0x01	; 1
    32f8:	66 0f       	add	r22, r22
    32fa:	77 1f       	adc	r23, r23
    32fc:	88 1f       	adc	r24, r24
    32fe:	bb 1f       	adc	r27, r27
    3300:	62 17       	cp	r22, r18
    3302:	73 07       	cpc	r23, r19
    3304:	84 07       	cpc	r24, r20
    3306:	ba 07       	cpc	r27, r26
    3308:	20 f0       	brcs	.+8      	; 0x3312 <__divsf3_pse+0xaa>
    330a:	62 1b       	sub	r22, r18
    330c:	73 0b       	sbc	r23, r19
    330e:	84 0b       	sbc	r24, r20
    3310:	ba 0b       	sbc	r27, r26
    3312:	ee 1f       	adc	r30, r30
    3314:	88 f7       	brcc	.-30     	; 0x32f8 <__divsf3_pse+0x90>
    3316:	e0 95       	com	r30
    3318:	08 95       	ret

0000331a <__fixsfsi>:
    331a:	04 d0       	rcall	.+8      	; 0x3324 <__fixunssfsi>
    331c:	68 94       	set
    331e:	b1 11       	cpse	r27, r1
    3320:	d9 c0       	rjmp	.+434    	; 0x34d4 <__fp_szero>
    3322:	08 95       	ret

00003324 <__fixunssfsi>:
    3324:	bc d0       	rcall	.+376    	; 0x349e <__fp_splitA>
    3326:	88 f0       	brcs	.+34     	; 0x334a <__fixunssfsi+0x26>
    3328:	9f 57       	subi	r25, 0x7F	; 127
    332a:	90 f0       	brcs	.+36     	; 0x3350 <__fixunssfsi+0x2c>
    332c:	b9 2f       	mov	r27, r25
    332e:	99 27       	eor	r25, r25
    3330:	b7 51       	subi	r27, 0x17	; 23
    3332:	a0 f0       	brcs	.+40     	; 0x335c <__fixunssfsi+0x38>
    3334:	d1 f0       	breq	.+52     	; 0x336a <__fixunssfsi+0x46>
    3336:	66 0f       	add	r22, r22
    3338:	77 1f       	adc	r23, r23
    333a:	88 1f       	adc	r24, r24
    333c:	99 1f       	adc	r25, r25
    333e:	1a f0       	brmi	.+6      	; 0x3346 <__fixunssfsi+0x22>
    3340:	ba 95       	dec	r27
    3342:	c9 f7       	brne	.-14     	; 0x3336 <__fixunssfsi+0x12>
    3344:	12 c0       	rjmp	.+36     	; 0x336a <__fixunssfsi+0x46>
    3346:	b1 30       	cpi	r27, 0x01	; 1
    3348:	81 f0       	breq	.+32     	; 0x336a <__fixunssfsi+0x46>
    334a:	c3 d0       	rcall	.+390    	; 0x34d2 <__fp_zero>
    334c:	b1 e0       	ldi	r27, 0x01	; 1
    334e:	08 95       	ret
    3350:	c0 c0       	rjmp	.+384    	; 0x34d2 <__fp_zero>
    3352:	67 2f       	mov	r22, r23
    3354:	78 2f       	mov	r23, r24
    3356:	88 27       	eor	r24, r24
    3358:	b8 5f       	subi	r27, 0xF8	; 248
    335a:	39 f0       	breq	.+14     	; 0x336a <__fixunssfsi+0x46>
    335c:	b9 3f       	cpi	r27, 0xF9	; 249
    335e:	cc f3       	brlt	.-14     	; 0x3352 <__fixunssfsi+0x2e>
    3360:	86 95       	lsr	r24
    3362:	77 95       	ror	r23
    3364:	67 95       	ror	r22
    3366:	b3 95       	inc	r27
    3368:	d9 f7       	brne	.-10     	; 0x3360 <__fixunssfsi+0x3c>
    336a:	3e f4       	brtc	.+14     	; 0x337a <__fixunssfsi+0x56>
    336c:	90 95       	com	r25
    336e:	80 95       	com	r24
    3370:	70 95       	com	r23
    3372:	61 95       	neg	r22
    3374:	7f 4f       	sbci	r23, 0xFF	; 255
    3376:	8f 4f       	sbci	r24, 0xFF	; 255
    3378:	9f 4f       	sbci	r25, 0xFF	; 255
    337a:	08 95       	ret

0000337c <__floatunsisf>:
    337c:	e8 94       	clt
    337e:	09 c0       	rjmp	.+18     	; 0x3392 <__floatsisf+0x12>

00003380 <__floatsisf>:
    3380:	97 fb       	bst	r25, 7
    3382:	3e f4       	brtc	.+14     	; 0x3392 <__floatsisf+0x12>
    3384:	90 95       	com	r25
    3386:	80 95       	com	r24
    3388:	70 95       	com	r23
    338a:	61 95       	neg	r22
    338c:	7f 4f       	sbci	r23, 0xFF	; 255
    338e:	8f 4f       	sbci	r24, 0xFF	; 255
    3390:	9f 4f       	sbci	r25, 0xFF	; 255
    3392:	99 23       	and	r25, r25
    3394:	a9 f0       	breq	.+42     	; 0x33c0 <__floatsisf+0x40>
    3396:	f9 2f       	mov	r31, r25
    3398:	96 e9       	ldi	r25, 0x96	; 150
    339a:	bb 27       	eor	r27, r27
    339c:	93 95       	inc	r25
    339e:	f6 95       	lsr	r31
    33a0:	87 95       	ror	r24
    33a2:	77 95       	ror	r23
    33a4:	67 95       	ror	r22
    33a6:	b7 95       	ror	r27
    33a8:	f1 11       	cpse	r31, r1
    33aa:	f8 cf       	rjmp	.-16     	; 0x339c <__floatsisf+0x1c>
    33ac:	fa f4       	brpl	.+62     	; 0x33ec <__floatsisf+0x6c>
    33ae:	bb 0f       	add	r27, r27
    33b0:	11 f4       	brne	.+4      	; 0x33b6 <__floatsisf+0x36>
    33b2:	60 ff       	sbrs	r22, 0
    33b4:	1b c0       	rjmp	.+54     	; 0x33ec <__floatsisf+0x6c>
    33b6:	6f 5f       	subi	r22, 0xFF	; 255
    33b8:	7f 4f       	sbci	r23, 0xFF	; 255
    33ba:	8f 4f       	sbci	r24, 0xFF	; 255
    33bc:	9f 4f       	sbci	r25, 0xFF	; 255
    33be:	16 c0       	rjmp	.+44     	; 0x33ec <__floatsisf+0x6c>
    33c0:	88 23       	and	r24, r24
    33c2:	11 f0       	breq	.+4      	; 0x33c8 <__floatsisf+0x48>
    33c4:	96 e9       	ldi	r25, 0x96	; 150
    33c6:	11 c0       	rjmp	.+34     	; 0x33ea <__floatsisf+0x6a>
    33c8:	77 23       	and	r23, r23
    33ca:	21 f0       	breq	.+8      	; 0x33d4 <__floatsisf+0x54>
    33cc:	9e e8       	ldi	r25, 0x8E	; 142
    33ce:	87 2f       	mov	r24, r23
    33d0:	76 2f       	mov	r23, r22
    33d2:	05 c0       	rjmp	.+10     	; 0x33de <__floatsisf+0x5e>
    33d4:	66 23       	and	r22, r22
    33d6:	71 f0       	breq	.+28     	; 0x33f4 <__floatsisf+0x74>
    33d8:	96 e8       	ldi	r25, 0x86	; 134
    33da:	86 2f       	mov	r24, r22
    33dc:	70 e0       	ldi	r23, 0x00	; 0
    33de:	60 e0       	ldi	r22, 0x00	; 0
    33e0:	2a f0       	brmi	.+10     	; 0x33ec <__floatsisf+0x6c>
    33e2:	9a 95       	dec	r25
    33e4:	66 0f       	add	r22, r22
    33e6:	77 1f       	adc	r23, r23
    33e8:	88 1f       	adc	r24, r24
    33ea:	da f7       	brpl	.-10     	; 0x33e2 <__floatsisf+0x62>
    33ec:	88 0f       	add	r24, r24
    33ee:	96 95       	lsr	r25
    33f0:	87 95       	ror	r24
    33f2:	97 f9       	bld	r25, 7
    33f4:	08 95       	ret

000033f6 <__fp_cmp>:
    33f6:	99 0f       	add	r25, r25
    33f8:	00 08       	sbc	r0, r0
    33fa:	55 0f       	add	r21, r21
    33fc:	aa 0b       	sbc	r26, r26
    33fe:	e0 e8       	ldi	r30, 0x80	; 128
    3400:	fe ef       	ldi	r31, 0xFE	; 254
    3402:	16 16       	cp	r1, r22
    3404:	17 06       	cpc	r1, r23
    3406:	e8 07       	cpc	r30, r24
    3408:	f9 07       	cpc	r31, r25
    340a:	c0 f0       	brcs	.+48     	; 0x343c <__fp_cmp+0x46>
    340c:	12 16       	cp	r1, r18
    340e:	13 06       	cpc	r1, r19
    3410:	e4 07       	cpc	r30, r20
    3412:	f5 07       	cpc	r31, r21
    3414:	98 f0       	brcs	.+38     	; 0x343c <__fp_cmp+0x46>
    3416:	62 1b       	sub	r22, r18
    3418:	73 0b       	sbc	r23, r19
    341a:	84 0b       	sbc	r24, r20
    341c:	95 0b       	sbc	r25, r21
    341e:	39 f4       	brne	.+14     	; 0x342e <__fp_cmp+0x38>
    3420:	0a 26       	eor	r0, r26
    3422:	61 f0       	breq	.+24     	; 0x343c <__fp_cmp+0x46>
    3424:	23 2b       	or	r18, r19
    3426:	24 2b       	or	r18, r20
    3428:	25 2b       	or	r18, r21
    342a:	21 f4       	brne	.+8      	; 0x3434 <__fp_cmp+0x3e>
    342c:	08 95       	ret
    342e:	0a 26       	eor	r0, r26
    3430:	09 f4       	brne	.+2      	; 0x3434 <__fp_cmp+0x3e>
    3432:	a1 40       	sbci	r26, 0x01	; 1
    3434:	a6 95       	lsr	r26
    3436:	8f ef       	ldi	r24, 0xFF	; 255
    3438:	81 1d       	adc	r24, r1
    343a:	81 1d       	adc	r24, r1
    343c:	08 95       	ret

0000343e <__fp_inf>:
    343e:	97 f9       	bld	r25, 7
    3440:	9f 67       	ori	r25, 0x7F	; 127
    3442:	80 e8       	ldi	r24, 0x80	; 128
    3444:	70 e0       	ldi	r23, 0x00	; 0
    3446:	60 e0       	ldi	r22, 0x00	; 0
    3448:	08 95       	ret

0000344a <__fp_nan>:
    344a:	9f ef       	ldi	r25, 0xFF	; 255
    344c:	80 ec       	ldi	r24, 0xC0	; 192
    344e:	08 95       	ret

00003450 <__fp_pscA>:
    3450:	00 24       	eor	r0, r0
    3452:	0a 94       	dec	r0
    3454:	16 16       	cp	r1, r22
    3456:	17 06       	cpc	r1, r23
    3458:	18 06       	cpc	r1, r24
    345a:	09 06       	cpc	r0, r25
    345c:	08 95       	ret

0000345e <__fp_pscB>:
    345e:	00 24       	eor	r0, r0
    3460:	0a 94       	dec	r0
    3462:	12 16       	cp	r1, r18
    3464:	13 06       	cpc	r1, r19
    3466:	14 06       	cpc	r1, r20
    3468:	05 06       	cpc	r0, r21
    346a:	08 95       	ret

0000346c <__fp_round>:
    346c:	09 2e       	mov	r0, r25
    346e:	03 94       	inc	r0
    3470:	00 0c       	add	r0, r0
    3472:	11 f4       	brne	.+4      	; 0x3478 <__fp_round+0xc>
    3474:	88 23       	and	r24, r24
    3476:	52 f0       	brmi	.+20     	; 0x348c <__fp_round+0x20>
    3478:	bb 0f       	add	r27, r27
    347a:	40 f4       	brcc	.+16     	; 0x348c <__fp_round+0x20>
    347c:	bf 2b       	or	r27, r31
    347e:	11 f4       	brne	.+4      	; 0x3484 <__fp_round+0x18>
    3480:	60 ff       	sbrs	r22, 0
    3482:	04 c0       	rjmp	.+8      	; 0x348c <__fp_round+0x20>
    3484:	6f 5f       	subi	r22, 0xFF	; 255
    3486:	7f 4f       	sbci	r23, 0xFF	; 255
    3488:	8f 4f       	sbci	r24, 0xFF	; 255
    348a:	9f 4f       	sbci	r25, 0xFF	; 255
    348c:	08 95       	ret

0000348e <__fp_split3>:
    348e:	57 fd       	sbrc	r21, 7
    3490:	90 58       	subi	r25, 0x80	; 128
    3492:	44 0f       	add	r20, r20
    3494:	55 1f       	adc	r21, r21
    3496:	59 f0       	breq	.+22     	; 0x34ae <__fp_splitA+0x10>
    3498:	5f 3f       	cpi	r21, 0xFF	; 255
    349a:	71 f0       	breq	.+28     	; 0x34b8 <__fp_splitA+0x1a>
    349c:	47 95       	ror	r20

0000349e <__fp_splitA>:
    349e:	88 0f       	add	r24, r24
    34a0:	97 fb       	bst	r25, 7
    34a2:	99 1f       	adc	r25, r25
    34a4:	61 f0       	breq	.+24     	; 0x34be <__fp_splitA+0x20>
    34a6:	9f 3f       	cpi	r25, 0xFF	; 255
    34a8:	79 f0       	breq	.+30     	; 0x34c8 <__fp_splitA+0x2a>
    34aa:	87 95       	ror	r24
    34ac:	08 95       	ret
    34ae:	12 16       	cp	r1, r18
    34b0:	13 06       	cpc	r1, r19
    34b2:	14 06       	cpc	r1, r20
    34b4:	55 1f       	adc	r21, r21
    34b6:	f2 cf       	rjmp	.-28     	; 0x349c <__fp_split3+0xe>
    34b8:	46 95       	lsr	r20
    34ba:	f1 df       	rcall	.-30     	; 0x349e <__fp_splitA>
    34bc:	08 c0       	rjmp	.+16     	; 0x34ce <__fp_splitA+0x30>
    34be:	16 16       	cp	r1, r22
    34c0:	17 06       	cpc	r1, r23
    34c2:	18 06       	cpc	r1, r24
    34c4:	99 1f       	adc	r25, r25
    34c6:	f1 cf       	rjmp	.-30     	; 0x34aa <__fp_splitA+0xc>
    34c8:	86 95       	lsr	r24
    34ca:	71 05       	cpc	r23, r1
    34cc:	61 05       	cpc	r22, r1
    34ce:	08 94       	sec
    34d0:	08 95       	ret

000034d2 <__fp_zero>:
    34d2:	e8 94       	clt

000034d4 <__fp_szero>:
    34d4:	bb 27       	eor	r27, r27
    34d6:	66 27       	eor	r22, r22
    34d8:	77 27       	eor	r23, r23
    34da:	cb 01       	movw	r24, r22
    34dc:	97 f9       	bld	r25, 7
    34de:	08 95       	ret

000034e0 <__gesf2>:
    34e0:	8a df       	rcall	.-236    	; 0x33f6 <__fp_cmp>
    34e2:	08 f4       	brcc	.+2      	; 0x34e6 <__gesf2+0x6>
    34e4:	8f ef       	ldi	r24, 0xFF	; 255
    34e6:	08 95       	ret

000034e8 <__mulsf3>:
    34e8:	0b d0       	rcall	.+22     	; 0x3500 <__mulsf3x>
    34ea:	c0 cf       	rjmp	.-128    	; 0x346c <__fp_round>
    34ec:	b1 df       	rcall	.-158    	; 0x3450 <__fp_pscA>
    34ee:	28 f0       	brcs	.+10     	; 0x34fa <__mulsf3+0x12>
    34f0:	b6 df       	rcall	.-148    	; 0x345e <__fp_pscB>
    34f2:	18 f0       	brcs	.+6      	; 0x34fa <__mulsf3+0x12>
    34f4:	95 23       	and	r25, r21
    34f6:	09 f0       	breq	.+2      	; 0x34fa <__mulsf3+0x12>
    34f8:	a2 cf       	rjmp	.-188    	; 0x343e <__fp_inf>
    34fa:	a7 cf       	rjmp	.-178    	; 0x344a <__fp_nan>
    34fc:	11 24       	eor	r1, r1
    34fe:	ea cf       	rjmp	.-44     	; 0x34d4 <__fp_szero>

00003500 <__mulsf3x>:
    3500:	c6 df       	rcall	.-116    	; 0x348e <__fp_split3>
    3502:	a0 f3       	brcs	.-24     	; 0x34ec <__mulsf3+0x4>

00003504 <__mulsf3_pse>:
    3504:	95 9f       	mul	r25, r21
    3506:	d1 f3       	breq	.-12     	; 0x34fc <__mulsf3+0x14>
    3508:	95 0f       	add	r25, r21
    350a:	50 e0       	ldi	r21, 0x00	; 0
    350c:	55 1f       	adc	r21, r21
    350e:	62 9f       	mul	r22, r18
    3510:	f0 01       	movw	r30, r0
    3512:	72 9f       	mul	r23, r18
    3514:	bb 27       	eor	r27, r27
    3516:	f0 0d       	add	r31, r0
    3518:	b1 1d       	adc	r27, r1
    351a:	63 9f       	mul	r22, r19
    351c:	aa 27       	eor	r26, r26
    351e:	f0 0d       	add	r31, r0
    3520:	b1 1d       	adc	r27, r1
    3522:	aa 1f       	adc	r26, r26
    3524:	64 9f       	mul	r22, r20
    3526:	66 27       	eor	r22, r22
    3528:	b0 0d       	add	r27, r0
    352a:	a1 1d       	adc	r26, r1
    352c:	66 1f       	adc	r22, r22
    352e:	82 9f       	mul	r24, r18
    3530:	22 27       	eor	r18, r18
    3532:	b0 0d       	add	r27, r0
    3534:	a1 1d       	adc	r26, r1
    3536:	62 1f       	adc	r22, r18
    3538:	73 9f       	mul	r23, r19
    353a:	b0 0d       	add	r27, r0
    353c:	a1 1d       	adc	r26, r1
    353e:	62 1f       	adc	r22, r18
    3540:	83 9f       	mul	r24, r19
    3542:	a0 0d       	add	r26, r0
    3544:	61 1d       	adc	r22, r1
    3546:	22 1f       	adc	r18, r18
    3548:	74 9f       	mul	r23, r20
    354a:	33 27       	eor	r19, r19
    354c:	a0 0d       	add	r26, r0
    354e:	61 1d       	adc	r22, r1
    3550:	23 1f       	adc	r18, r19
    3552:	84 9f       	mul	r24, r20
    3554:	60 0d       	add	r22, r0
    3556:	21 1d       	adc	r18, r1
    3558:	82 2f       	mov	r24, r18
    355a:	76 2f       	mov	r23, r22
    355c:	6a 2f       	mov	r22, r26
    355e:	11 24       	eor	r1, r1
    3560:	9f 57       	subi	r25, 0x7F	; 127
    3562:	50 40       	sbci	r21, 0x00	; 0
    3564:	8a f0       	brmi	.+34     	; 0x3588 <__mulsf3_pse+0x84>
    3566:	e1 f0       	breq	.+56     	; 0x35a0 <__mulsf3_pse+0x9c>
    3568:	88 23       	and	r24, r24
    356a:	4a f0       	brmi	.+18     	; 0x357e <__mulsf3_pse+0x7a>
    356c:	ee 0f       	add	r30, r30
    356e:	ff 1f       	adc	r31, r31
    3570:	bb 1f       	adc	r27, r27
    3572:	66 1f       	adc	r22, r22
    3574:	77 1f       	adc	r23, r23
    3576:	88 1f       	adc	r24, r24
    3578:	91 50       	subi	r25, 0x01	; 1
    357a:	50 40       	sbci	r21, 0x00	; 0
    357c:	a9 f7       	brne	.-22     	; 0x3568 <__mulsf3_pse+0x64>
    357e:	9e 3f       	cpi	r25, 0xFE	; 254
    3580:	51 05       	cpc	r21, r1
    3582:	70 f0       	brcs	.+28     	; 0x35a0 <__mulsf3_pse+0x9c>
    3584:	5c cf       	rjmp	.-328    	; 0x343e <__fp_inf>
    3586:	a6 cf       	rjmp	.-180    	; 0x34d4 <__fp_szero>
    3588:	5f 3f       	cpi	r21, 0xFF	; 255
    358a:	ec f3       	brlt	.-6      	; 0x3586 <__mulsf3_pse+0x82>
    358c:	98 3e       	cpi	r25, 0xE8	; 232
    358e:	dc f3       	brlt	.-10     	; 0x3586 <__mulsf3_pse+0x82>
    3590:	86 95       	lsr	r24
    3592:	77 95       	ror	r23
    3594:	67 95       	ror	r22
    3596:	b7 95       	ror	r27
    3598:	f7 95       	ror	r31
    359a:	e7 95       	ror	r30
    359c:	9f 5f       	subi	r25, 0xFF	; 255
    359e:	c1 f7       	brne	.-16     	; 0x3590 <__mulsf3_pse+0x8c>
    35a0:	fe 2b       	or	r31, r30
    35a2:	88 0f       	add	r24, r24
    35a4:	91 1d       	adc	r25, r1
    35a6:	96 95       	lsr	r25
    35a8:	87 95       	ror	r24
    35aa:	97 f9       	bld	r25, 7
    35ac:	08 95       	ret

000035ae <vfprintf>:
    35ae:	2f 92       	push	r2
    35b0:	3f 92       	push	r3
    35b2:	4f 92       	push	r4
    35b4:	5f 92       	push	r5
    35b6:	6f 92       	push	r6
    35b8:	7f 92       	push	r7
    35ba:	8f 92       	push	r8
    35bc:	9f 92       	push	r9
    35be:	af 92       	push	r10
    35c0:	bf 92       	push	r11
    35c2:	cf 92       	push	r12
    35c4:	df 92       	push	r13
    35c6:	ef 92       	push	r14
    35c8:	ff 92       	push	r15
    35ca:	0f 93       	push	r16
    35cc:	1f 93       	push	r17
    35ce:	cf 93       	push	r28
    35d0:	df 93       	push	r29
    35d2:	cd b7       	in	r28, 0x3d	; 61
    35d4:	de b7       	in	r29, 0x3e	; 62
    35d6:	63 97       	sbiw	r28, 0x13	; 19
    35d8:	0f b6       	in	r0, 0x3f	; 63
    35da:	f8 94       	cli
    35dc:	de bf       	out	0x3e, r29	; 62
    35de:	0f be       	out	0x3f, r0	; 63
    35e0:	cd bf       	out	0x3d, r28	; 61
    35e2:	6c 01       	movw	r12, r24
    35e4:	4b 01       	movw	r8, r22
    35e6:	2a 01       	movw	r4, r20
    35e8:	fc 01       	movw	r30, r24
    35ea:	17 82       	std	Z+7, r1	; 0x07
    35ec:	16 82       	std	Z+6, r1	; 0x06
    35ee:	83 81       	ldd	r24, Z+3	; 0x03
    35f0:	81 ff       	sbrs	r24, 1
    35f2:	29 c3       	rjmp	.+1618   	; 0x3c46 <vfprintf+0x698>
    35f4:	ae 01       	movw	r20, r28
    35f6:	4f 5f       	subi	r20, 0xFF	; 255
    35f8:	5f 4f       	sbci	r21, 0xFF	; 255
    35fa:	3a 01       	movw	r6, r20
    35fc:	f6 01       	movw	r30, r12
    35fe:	93 81       	ldd	r25, Z+3	; 0x03
    3600:	f4 01       	movw	r30, r8
    3602:	93 fd       	sbrc	r25, 3
    3604:	85 91       	lpm	r24, Z+
    3606:	93 ff       	sbrs	r25, 3
    3608:	81 91       	ld	r24, Z+
    360a:	4f 01       	movw	r8, r30
    360c:	88 23       	and	r24, r24
    360e:	09 f4       	brne	.+2      	; 0x3612 <vfprintf+0x64>
    3610:	16 c3       	rjmp	.+1580   	; 0x3c3e <vfprintf+0x690>
    3612:	85 32       	cpi	r24, 0x25	; 37
    3614:	39 f4       	brne	.+14     	; 0x3624 <vfprintf+0x76>
    3616:	93 fd       	sbrc	r25, 3
    3618:	85 91       	lpm	r24, Z+
    361a:	93 ff       	sbrs	r25, 3
    361c:	81 91       	ld	r24, Z+
    361e:	4f 01       	movw	r8, r30
    3620:	85 32       	cpi	r24, 0x25	; 37
    3622:	31 f4       	brne	.+12     	; 0x3630 <vfprintf+0x82>
    3624:	b6 01       	movw	r22, r12
    3626:	90 e0       	ldi	r25, 0x00	; 0
    3628:	c2 d5       	rcall	.+2948   	; 0x41ae <fputc>
    362a:	52 01       	movw	r10, r4
    362c:	25 01       	movw	r4, r10
    362e:	e6 cf       	rjmp	.-52     	; 0x35fc <vfprintf+0x4e>
    3630:	10 e0       	ldi	r17, 0x00	; 0
    3632:	f1 2c       	mov	r15, r1
    3634:	20 e0       	ldi	r18, 0x00	; 0
    3636:	20 32       	cpi	r18, 0x20	; 32
    3638:	a0 f4       	brcc	.+40     	; 0x3662 <vfprintf+0xb4>
    363a:	8b 32       	cpi	r24, 0x2B	; 43
    363c:	69 f0       	breq	.+26     	; 0x3658 <vfprintf+0xaa>
    363e:	30 f4       	brcc	.+12     	; 0x364c <vfprintf+0x9e>
    3640:	80 32       	cpi	r24, 0x20	; 32
    3642:	59 f0       	breq	.+22     	; 0x365a <vfprintf+0xac>
    3644:	83 32       	cpi	r24, 0x23	; 35
    3646:	69 f4       	brne	.+26     	; 0x3662 <vfprintf+0xb4>
    3648:	20 61       	ori	r18, 0x10	; 16
    364a:	2c c0       	rjmp	.+88     	; 0x36a4 <vfprintf+0xf6>
    364c:	8d 32       	cpi	r24, 0x2D	; 45
    364e:	39 f0       	breq	.+14     	; 0x365e <vfprintf+0xb0>
    3650:	80 33       	cpi	r24, 0x30	; 48
    3652:	39 f4       	brne	.+14     	; 0x3662 <vfprintf+0xb4>
    3654:	21 60       	ori	r18, 0x01	; 1
    3656:	26 c0       	rjmp	.+76     	; 0x36a4 <vfprintf+0xf6>
    3658:	22 60       	ori	r18, 0x02	; 2
    365a:	24 60       	ori	r18, 0x04	; 4
    365c:	23 c0       	rjmp	.+70     	; 0x36a4 <vfprintf+0xf6>
    365e:	28 60       	ori	r18, 0x08	; 8
    3660:	21 c0       	rjmp	.+66     	; 0x36a4 <vfprintf+0xf6>
    3662:	27 fd       	sbrc	r18, 7
    3664:	27 c0       	rjmp	.+78     	; 0x36b4 <vfprintf+0x106>
    3666:	30 ed       	ldi	r19, 0xD0	; 208
    3668:	38 0f       	add	r19, r24
    366a:	3a 30       	cpi	r19, 0x0A	; 10
    366c:	78 f4       	brcc	.+30     	; 0x368c <vfprintf+0xde>
    366e:	26 ff       	sbrs	r18, 6
    3670:	06 c0       	rjmp	.+12     	; 0x367e <vfprintf+0xd0>
    3672:	fa e0       	ldi	r31, 0x0A	; 10
    3674:	1f 9f       	mul	r17, r31
    3676:	30 0d       	add	r19, r0
    3678:	11 24       	eor	r1, r1
    367a:	13 2f       	mov	r17, r19
    367c:	13 c0       	rjmp	.+38     	; 0x36a4 <vfprintf+0xf6>
    367e:	4a e0       	ldi	r20, 0x0A	; 10
    3680:	f4 9e       	mul	r15, r20
    3682:	30 0d       	add	r19, r0
    3684:	11 24       	eor	r1, r1
    3686:	f3 2e       	mov	r15, r19
    3688:	20 62       	ori	r18, 0x20	; 32
    368a:	0c c0       	rjmp	.+24     	; 0x36a4 <vfprintf+0xf6>
    368c:	8e 32       	cpi	r24, 0x2E	; 46
    368e:	21 f4       	brne	.+8      	; 0x3698 <vfprintf+0xea>
    3690:	26 fd       	sbrc	r18, 6
    3692:	d5 c2       	rjmp	.+1450   	; 0x3c3e <vfprintf+0x690>
    3694:	20 64       	ori	r18, 0x40	; 64
    3696:	06 c0       	rjmp	.+12     	; 0x36a4 <vfprintf+0xf6>
    3698:	8c 36       	cpi	r24, 0x6C	; 108
    369a:	11 f4       	brne	.+4      	; 0x36a0 <vfprintf+0xf2>
    369c:	20 68       	ori	r18, 0x80	; 128
    369e:	02 c0       	rjmp	.+4      	; 0x36a4 <vfprintf+0xf6>
    36a0:	88 36       	cpi	r24, 0x68	; 104
    36a2:	41 f4       	brne	.+16     	; 0x36b4 <vfprintf+0x106>
    36a4:	f4 01       	movw	r30, r8
    36a6:	93 fd       	sbrc	r25, 3
    36a8:	85 91       	lpm	r24, Z+
    36aa:	93 ff       	sbrs	r25, 3
    36ac:	81 91       	ld	r24, Z+
    36ae:	4f 01       	movw	r8, r30
    36b0:	81 11       	cpse	r24, r1
    36b2:	c1 cf       	rjmp	.-126    	; 0x3636 <vfprintf+0x88>
    36b4:	9b eb       	ldi	r25, 0xBB	; 187
    36b6:	98 0f       	add	r25, r24
    36b8:	93 30       	cpi	r25, 0x03	; 3
    36ba:	18 f4       	brcc	.+6      	; 0x36c2 <vfprintf+0x114>
    36bc:	20 61       	ori	r18, 0x10	; 16
    36be:	80 5e       	subi	r24, 0xE0	; 224
    36c0:	06 c0       	rjmp	.+12     	; 0x36ce <vfprintf+0x120>
    36c2:	9b e9       	ldi	r25, 0x9B	; 155
    36c4:	98 0f       	add	r25, r24
    36c6:	93 30       	cpi	r25, 0x03	; 3
    36c8:	08 f0       	brcs	.+2      	; 0x36cc <vfprintf+0x11e>
    36ca:	64 c1       	rjmp	.+712    	; 0x3994 <vfprintf+0x3e6>
    36cc:	2f 7e       	andi	r18, 0xEF	; 239
    36ce:	26 ff       	sbrs	r18, 6
    36d0:	16 e0       	ldi	r17, 0x06	; 6
    36d2:	2f 73       	andi	r18, 0x3F	; 63
    36d4:	32 2e       	mov	r3, r18
    36d6:	85 36       	cpi	r24, 0x65	; 101
    36d8:	19 f4       	brne	.+6      	; 0x36e0 <vfprintf+0x132>
    36da:	20 64       	ori	r18, 0x40	; 64
    36dc:	32 2e       	mov	r3, r18
    36de:	08 c0       	rjmp	.+16     	; 0x36f0 <vfprintf+0x142>
    36e0:	86 36       	cpi	r24, 0x66	; 102
    36e2:	21 f4       	brne	.+8      	; 0x36ec <vfprintf+0x13e>
    36e4:	f2 2f       	mov	r31, r18
    36e6:	f0 68       	ori	r31, 0x80	; 128
    36e8:	3f 2e       	mov	r3, r31
    36ea:	02 c0       	rjmp	.+4      	; 0x36f0 <vfprintf+0x142>
    36ec:	11 11       	cpse	r17, r1
    36ee:	11 50       	subi	r17, 0x01	; 1
    36f0:	37 fe       	sbrs	r3, 7
    36f2:	07 c0       	rjmp	.+14     	; 0x3702 <vfprintf+0x154>
    36f4:	1c 33       	cpi	r17, 0x3C	; 60
    36f6:	50 f4       	brcc	.+20     	; 0x370c <vfprintf+0x15e>
    36f8:	ee 24       	eor	r14, r14
    36fa:	e3 94       	inc	r14
    36fc:	e1 0e       	add	r14, r17
    36fe:	27 e0       	ldi	r18, 0x07	; 7
    3700:	0b c0       	rjmp	.+22     	; 0x3718 <vfprintf+0x16a>
    3702:	18 30       	cpi	r17, 0x08	; 8
    3704:	38 f0       	brcs	.+14     	; 0x3714 <vfprintf+0x166>
    3706:	27 e0       	ldi	r18, 0x07	; 7
    3708:	17 e0       	ldi	r17, 0x07	; 7
    370a:	05 c0       	rjmp	.+10     	; 0x3716 <vfprintf+0x168>
    370c:	27 e0       	ldi	r18, 0x07	; 7
    370e:	4c e3       	ldi	r20, 0x3C	; 60
    3710:	e4 2e       	mov	r14, r20
    3712:	02 c0       	rjmp	.+4      	; 0x3718 <vfprintf+0x16a>
    3714:	21 2f       	mov	r18, r17
    3716:	e1 2c       	mov	r14, r1
    3718:	52 01       	movw	r10, r4
    371a:	44 e0       	ldi	r20, 0x04	; 4
    371c:	a4 0e       	add	r10, r20
    371e:	b1 1c       	adc	r11, r1
    3720:	f2 01       	movw	r30, r4
    3722:	60 81       	ld	r22, Z
    3724:	71 81       	ldd	r23, Z+1	; 0x01
    3726:	82 81       	ldd	r24, Z+2	; 0x02
    3728:	93 81       	ldd	r25, Z+3	; 0x03
    372a:	0e 2d       	mov	r16, r14
    372c:	a3 01       	movw	r20, r6
    372e:	51 d4       	rcall	.+2210   	; 0x3fd2 <__ftoa_engine>
    3730:	2c 01       	movw	r4, r24
    3732:	09 81       	ldd	r16, Y+1	; 0x01
    3734:	00 ff       	sbrs	r16, 0
    3736:	02 c0       	rjmp	.+4      	; 0x373c <vfprintf+0x18e>
    3738:	03 ff       	sbrs	r16, 3
    373a:	07 c0       	rjmp	.+14     	; 0x374a <vfprintf+0x19c>
    373c:	31 fc       	sbrc	r3, 1
    373e:	08 c0       	rjmp	.+16     	; 0x3750 <vfprintf+0x1a2>
    3740:	32 fe       	sbrs	r3, 2
    3742:	09 c0       	rjmp	.+18     	; 0x3756 <vfprintf+0x1a8>
    3744:	30 e2       	ldi	r19, 0x20	; 32
    3746:	23 2e       	mov	r2, r19
    3748:	07 c0       	rjmp	.+14     	; 0x3758 <vfprintf+0x1aa>
    374a:	2d e2       	ldi	r18, 0x2D	; 45
    374c:	22 2e       	mov	r2, r18
    374e:	04 c0       	rjmp	.+8      	; 0x3758 <vfprintf+0x1aa>
    3750:	9b e2       	ldi	r25, 0x2B	; 43
    3752:	29 2e       	mov	r2, r25
    3754:	01 c0       	rjmp	.+2      	; 0x3758 <vfprintf+0x1aa>
    3756:	21 2c       	mov	r2, r1
    3758:	80 2f       	mov	r24, r16
    375a:	8c 70       	andi	r24, 0x0C	; 12
    375c:	19 f0       	breq	.+6      	; 0x3764 <vfprintf+0x1b6>
    375e:	21 10       	cpse	r2, r1
    3760:	51 c2       	rjmp	.+1186   	; 0x3c04 <vfprintf+0x656>
    3762:	8d c2       	rjmp	.+1306   	; 0x3c7e <vfprintf+0x6d0>
    3764:	37 fe       	sbrs	r3, 7
    3766:	0f c0       	rjmp	.+30     	; 0x3786 <vfprintf+0x1d8>
    3768:	e4 0c       	add	r14, r4
    376a:	04 ff       	sbrs	r16, 4
    376c:	04 c0       	rjmp	.+8      	; 0x3776 <vfprintf+0x1c8>
    376e:	8a 81       	ldd	r24, Y+2	; 0x02
    3770:	81 33       	cpi	r24, 0x31	; 49
    3772:	09 f4       	brne	.+2      	; 0x3776 <vfprintf+0x1c8>
    3774:	ea 94       	dec	r14
    3776:	1e 14       	cp	r1, r14
    3778:	74 f5       	brge	.+92     	; 0x37d6 <vfprintf+0x228>
    377a:	f8 e0       	ldi	r31, 0x08	; 8
    377c:	fe 15       	cp	r31, r14
    377e:	78 f5       	brcc	.+94     	; 0x37de <vfprintf+0x230>
    3780:	88 e0       	ldi	r24, 0x08	; 8
    3782:	e8 2e       	mov	r14, r24
    3784:	2c c0       	rjmp	.+88     	; 0x37de <vfprintf+0x230>
    3786:	36 fc       	sbrc	r3, 6
    3788:	2a c0       	rjmp	.+84     	; 0x37de <vfprintf+0x230>
    378a:	81 2f       	mov	r24, r17
    378c:	90 e0       	ldi	r25, 0x00	; 0
    378e:	84 15       	cp	r24, r4
    3790:	95 05       	cpc	r25, r5
    3792:	9c f0       	brlt	.+38     	; 0x37ba <vfprintf+0x20c>
    3794:	2c ef       	ldi	r18, 0xFC	; 252
    3796:	42 16       	cp	r4, r18
    3798:	2f ef       	ldi	r18, 0xFF	; 255
    379a:	52 06       	cpc	r5, r18
    379c:	74 f0       	brlt	.+28     	; 0x37ba <vfprintf+0x20c>
    379e:	43 2d       	mov	r20, r3
    37a0:	40 68       	ori	r20, 0x80	; 128
    37a2:	34 2e       	mov	r3, r20
    37a4:	0a c0       	rjmp	.+20     	; 0x37ba <vfprintf+0x20c>
    37a6:	e2 e0       	ldi	r30, 0x02	; 2
    37a8:	f0 e0       	ldi	r31, 0x00	; 0
    37aa:	ec 0f       	add	r30, r28
    37ac:	fd 1f       	adc	r31, r29
    37ae:	e1 0f       	add	r30, r17
    37b0:	f1 1d       	adc	r31, r1
    37b2:	80 81       	ld	r24, Z
    37b4:	80 33       	cpi	r24, 0x30	; 48
    37b6:	19 f4       	brne	.+6      	; 0x37be <vfprintf+0x210>
    37b8:	11 50       	subi	r17, 0x01	; 1
    37ba:	11 11       	cpse	r17, r1
    37bc:	f4 cf       	rjmp	.-24     	; 0x37a6 <vfprintf+0x1f8>
    37be:	37 fe       	sbrs	r3, 7
    37c0:	0e c0       	rjmp	.+28     	; 0x37de <vfprintf+0x230>
    37c2:	ee 24       	eor	r14, r14
    37c4:	e3 94       	inc	r14
    37c6:	e1 0e       	add	r14, r17
    37c8:	81 2f       	mov	r24, r17
    37ca:	90 e0       	ldi	r25, 0x00	; 0
    37cc:	48 16       	cp	r4, r24
    37ce:	59 06       	cpc	r5, r25
    37d0:	2c f4       	brge	.+10     	; 0x37dc <vfprintf+0x22e>
    37d2:	14 19       	sub	r17, r4
    37d4:	04 c0       	rjmp	.+8      	; 0x37de <vfprintf+0x230>
    37d6:	ee 24       	eor	r14, r14
    37d8:	e3 94       	inc	r14
    37da:	01 c0       	rjmp	.+2      	; 0x37de <vfprintf+0x230>
    37dc:	10 e0       	ldi	r17, 0x00	; 0
    37de:	37 fe       	sbrs	r3, 7
    37e0:	06 c0       	rjmp	.+12     	; 0x37ee <vfprintf+0x240>
    37e2:	14 14       	cp	r1, r4
    37e4:	15 04       	cpc	r1, r5
    37e6:	34 f4       	brge	.+12     	; 0x37f4 <vfprintf+0x246>
    37e8:	c2 01       	movw	r24, r4
    37ea:	01 96       	adiw	r24, 0x01	; 1
    37ec:	05 c0       	rjmp	.+10     	; 0x37f8 <vfprintf+0x24a>
    37ee:	85 e0       	ldi	r24, 0x05	; 5
    37f0:	90 e0       	ldi	r25, 0x00	; 0
    37f2:	02 c0       	rjmp	.+4      	; 0x37f8 <vfprintf+0x24a>
    37f4:	81 e0       	ldi	r24, 0x01	; 1
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	21 10       	cpse	r2, r1
    37fa:	01 96       	adiw	r24, 0x01	; 1
    37fc:	11 23       	and	r17, r17
    37fe:	31 f0       	breq	.+12     	; 0x380c <vfprintf+0x25e>
    3800:	21 2f       	mov	r18, r17
    3802:	30 e0       	ldi	r19, 0x00	; 0
    3804:	2f 5f       	subi	r18, 0xFF	; 255
    3806:	3f 4f       	sbci	r19, 0xFF	; 255
    3808:	82 0f       	add	r24, r18
    380a:	93 1f       	adc	r25, r19
    380c:	2f 2d       	mov	r18, r15
    380e:	30 e0       	ldi	r19, 0x00	; 0
    3810:	82 17       	cp	r24, r18
    3812:	93 07       	cpc	r25, r19
    3814:	14 f4       	brge	.+4      	; 0x381a <vfprintf+0x26c>
    3816:	f8 1a       	sub	r15, r24
    3818:	01 c0       	rjmp	.+2      	; 0x381c <vfprintf+0x26e>
    381a:	f1 2c       	mov	r15, r1
    381c:	83 2d       	mov	r24, r3
    381e:	89 70       	andi	r24, 0x09	; 9
    3820:	41 f4       	brne	.+16     	; 0x3832 <vfprintf+0x284>
    3822:	ff 20       	and	r15, r15
    3824:	31 f0       	breq	.+12     	; 0x3832 <vfprintf+0x284>
    3826:	b6 01       	movw	r22, r12
    3828:	80 e2       	ldi	r24, 0x20	; 32
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	c0 d4       	rcall	.+2432   	; 0x41ae <fputc>
    382e:	fa 94       	dec	r15
    3830:	f8 cf       	rjmp	.-16     	; 0x3822 <vfprintf+0x274>
    3832:	22 20       	and	r2, r2
    3834:	21 f0       	breq	.+8      	; 0x383e <vfprintf+0x290>
    3836:	b6 01       	movw	r22, r12
    3838:	82 2d       	mov	r24, r2
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	b8 d4       	rcall	.+2416   	; 0x41ae <fputc>
    383e:	33 fc       	sbrc	r3, 3
    3840:	08 c0       	rjmp	.+16     	; 0x3852 <vfprintf+0x2a4>
    3842:	ff 20       	and	r15, r15
    3844:	31 f0       	breq	.+12     	; 0x3852 <vfprintf+0x2a4>
    3846:	b6 01       	movw	r22, r12
    3848:	80 e3       	ldi	r24, 0x30	; 48
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	b0 d4       	rcall	.+2400   	; 0x41ae <fputc>
    384e:	fa 94       	dec	r15
    3850:	f8 cf       	rjmp	.-16     	; 0x3842 <vfprintf+0x294>
    3852:	37 fe       	sbrs	r3, 7
    3854:	58 c0       	rjmp	.+176    	; 0x3906 <vfprintf+0x358>
    3856:	94 2d       	mov	r25, r4
    3858:	85 2d       	mov	r24, r5
    385a:	57 fe       	sbrs	r5, 7
    385c:	02 c0       	rjmp	.+4      	; 0x3862 <vfprintf+0x2b4>
    385e:	90 e0       	ldi	r25, 0x00	; 0
    3860:	80 e0       	ldi	r24, 0x00	; 0
    3862:	29 2e       	mov	r2, r25
    3864:	38 2e       	mov	r3, r24
    3866:	20 e0       	ldi	r18, 0x00	; 0
    3868:	30 e0       	ldi	r19, 0x00	; 0
    386a:	a2 01       	movw	r20, r4
    386c:	4e 19       	sub	r20, r14
    386e:	51 09       	sbc	r21, r1
    3870:	5d 87       	std	Y+13, r21	; 0x0d
    3872:	4c 87       	std	Y+12, r20	; 0x0c
    3874:	a2 01       	movw	r20, r4
    3876:	42 19       	sub	r20, r2
    3878:	53 09       	sbc	r21, r3
    387a:	5f 87       	std	Y+15, r21	; 0x0f
    387c:	4e 87       	std	Y+14, r20	; 0x0e
    387e:	61 2f       	mov	r22, r17
    3880:	70 e0       	ldi	r23, 0x00	; 0
    3882:	44 27       	eor	r20, r20
    3884:	55 27       	eor	r21, r21
    3886:	46 1b       	sub	r20, r22
    3888:	57 0b       	sbc	r21, r23
    388a:	59 8b       	std	Y+17, r21	; 0x11
    388c:	48 8b       	std	Y+16, r20	; 0x10
    388e:	5f ef       	ldi	r21, 0xFF	; 255
    3890:	25 16       	cp	r2, r21
    3892:	35 06       	cpc	r3, r21
    3894:	41 f4       	brne	.+16     	; 0x38a6 <vfprintf+0x2f8>
    3896:	b6 01       	movw	r22, r12
    3898:	8e e2       	ldi	r24, 0x2E	; 46
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	2a 8b       	std	Y+18, r18	; 0x12
    389e:	3b 8b       	std	Y+19, r19	; 0x13
    38a0:	86 d4       	rcall	.+2316   	; 0x41ae <fputc>
    38a2:	3b 89       	ldd	r19, Y+19	; 0x13
    38a4:	2a 89       	ldd	r18, Y+18	; 0x12
    38a6:	42 14       	cp	r4, r2
    38a8:	53 04       	cpc	r5, r3
    38aa:	6c f0       	brlt	.+26     	; 0x38c6 <vfprintf+0x318>
    38ac:	4c 85       	ldd	r20, Y+12	; 0x0c
    38ae:	5d 85       	ldd	r21, Y+13	; 0x0d
    38b0:	42 15       	cp	r20, r2
    38b2:	53 05       	cpc	r21, r3
    38b4:	44 f4       	brge	.+16     	; 0x38c6 <vfprintf+0x318>
    38b6:	ee 85       	ldd	r30, Y+14	; 0x0e
    38b8:	ff 85       	ldd	r31, Y+15	; 0x0f
    38ba:	e2 0f       	add	r30, r18
    38bc:	f3 1f       	adc	r31, r19
    38be:	e6 0d       	add	r30, r6
    38c0:	f7 1d       	adc	r31, r7
    38c2:	81 81       	ldd	r24, Z+1	; 0x01
    38c4:	01 c0       	rjmp	.+2      	; 0x38c8 <vfprintf+0x31a>
    38c6:	80 e3       	ldi	r24, 0x30	; 48
    38c8:	51 e0       	ldi	r21, 0x01	; 1
    38ca:	25 1a       	sub	r2, r21
    38cc:	31 08       	sbc	r3, r1
    38ce:	2f 5f       	subi	r18, 0xFF	; 255
    38d0:	3f 4f       	sbci	r19, 0xFF	; 255
    38d2:	48 89       	ldd	r20, Y+16	; 0x10
    38d4:	59 89       	ldd	r21, Y+17	; 0x11
    38d6:	24 16       	cp	r2, r20
    38d8:	35 06       	cpc	r3, r21
    38da:	44 f0       	brlt	.+16     	; 0x38ec <vfprintf+0x33e>
    38dc:	b6 01       	movw	r22, r12
    38de:	90 e0       	ldi	r25, 0x00	; 0
    38e0:	2a 8b       	std	Y+18, r18	; 0x12
    38e2:	3b 8b       	std	Y+19, r19	; 0x13
    38e4:	64 d4       	rcall	.+2248   	; 0x41ae <fputc>
    38e6:	2a 89       	ldd	r18, Y+18	; 0x12
    38e8:	3b 89       	ldd	r19, Y+19	; 0x13
    38ea:	d1 cf       	rjmp	.-94     	; 0x388e <vfprintf+0x2e0>
    38ec:	24 14       	cp	r2, r4
    38ee:	35 04       	cpc	r3, r5
    38f0:	39 f4       	brne	.+14     	; 0x3900 <vfprintf+0x352>
    38f2:	9a 81       	ldd	r25, Y+2	; 0x02
    38f4:	96 33       	cpi	r25, 0x36	; 54
    38f6:	18 f4       	brcc	.+6      	; 0x38fe <vfprintf+0x350>
    38f8:	95 33       	cpi	r25, 0x35	; 53
    38fa:	11 f4       	brne	.+4      	; 0x3900 <vfprintf+0x352>
    38fc:	04 ff       	sbrs	r16, 4
    38fe:	81 e3       	ldi	r24, 0x31	; 49
    3900:	b6 01       	movw	r22, r12
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	45 c0       	rjmp	.+138    	; 0x3990 <vfprintf+0x3e2>
    3906:	8a 81       	ldd	r24, Y+2	; 0x02
    3908:	81 33       	cpi	r24, 0x31	; 49
    390a:	09 f0       	breq	.+2      	; 0x390e <vfprintf+0x360>
    390c:	0f 7e       	andi	r16, 0xEF	; 239
    390e:	b6 01       	movw	r22, r12
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	4d d4       	rcall	.+2202   	; 0x41ae <fputc>
    3914:	11 11       	cpse	r17, r1
    3916:	05 c0       	rjmp	.+10     	; 0x3922 <vfprintf+0x374>
    3918:	34 fc       	sbrc	r3, 4
    391a:	16 c0       	rjmp	.+44     	; 0x3948 <vfprintf+0x39a>
    391c:	85 e6       	ldi	r24, 0x65	; 101
    391e:	90 e0       	ldi	r25, 0x00	; 0
    3920:	15 c0       	rjmp	.+42     	; 0x394c <vfprintf+0x39e>
    3922:	b6 01       	movw	r22, r12
    3924:	8e e2       	ldi	r24, 0x2E	; 46
    3926:	90 e0       	ldi	r25, 0x00	; 0
    3928:	42 d4       	rcall	.+2180   	; 0x41ae <fputc>
    392a:	82 e0       	ldi	r24, 0x02	; 2
    392c:	ee 24       	eor	r14, r14
    392e:	e3 94       	inc	r14
    3930:	e8 0e       	add	r14, r24
    3932:	f3 01       	movw	r30, r6
    3934:	e8 0f       	add	r30, r24
    3936:	f1 1d       	adc	r31, r1
    3938:	80 81       	ld	r24, Z
    393a:	b6 01       	movw	r22, r12
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	37 d4       	rcall	.+2158   	; 0x41ae <fputc>
    3940:	11 50       	subi	r17, 0x01	; 1
    3942:	8e 2d       	mov	r24, r14
    3944:	99 f7       	brne	.-26     	; 0x392c <vfprintf+0x37e>
    3946:	e8 cf       	rjmp	.-48     	; 0x3918 <vfprintf+0x36a>
    3948:	85 e4       	ldi	r24, 0x45	; 69
    394a:	90 e0       	ldi	r25, 0x00	; 0
    394c:	b6 01       	movw	r22, r12
    394e:	2f d4       	rcall	.+2142   	; 0x41ae <fputc>
    3950:	57 fc       	sbrc	r5, 7
    3952:	05 c0       	rjmp	.+10     	; 0x395e <vfprintf+0x3b0>
    3954:	41 14       	cp	r4, r1
    3956:	51 04       	cpc	r5, r1
    3958:	39 f4       	brne	.+14     	; 0x3968 <vfprintf+0x3ba>
    395a:	04 ff       	sbrs	r16, 4
    395c:	05 c0       	rjmp	.+10     	; 0x3968 <vfprintf+0x3ba>
    395e:	51 94       	neg	r5
    3960:	41 94       	neg	r4
    3962:	51 08       	sbc	r5, r1
    3964:	8d e2       	ldi	r24, 0x2D	; 45
    3966:	01 c0       	rjmp	.+2      	; 0x396a <vfprintf+0x3bc>
    3968:	8b e2       	ldi	r24, 0x2B	; 43
    396a:	b6 01       	movw	r22, r12
    396c:	90 e0       	ldi	r25, 0x00	; 0
    396e:	1f d4       	rcall	.+2110   	; 0x41ae <fputc>
    3970:	80 e3       	ldi	r24, 0x30	; 48
    3972:	9a e0       	ldi	r25, 0x0A	; 10
    3974:	49 16       	cp	r4, r25
    3976:	51 04       	cpc	r5, r1
    3978:	2c f0       	brlt	.+10     	; 0x3984 <vfprintf+0x3d6>
    397a:	8f 5f       	subi	r24, 0xFF	; 255
    397c:	5a e0       	ldi	r21, 0x0A	; 10
    397e:	45 1a       	sub	r4, r21
    3980:	51 08       	sbc	r5, r1
    3982:	f7 cf       	rjmp	.-18     	; 0x3972 <vfprintf+0x3c4>
    3984:	b6 01       	movw	r22, r12
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	12 d4       	rcall	.+2084   	; 0x41ae <fputc>
    398a:	b6 01       	movw	r22, r12
    398c:	c2 01       	movw	r24, r4
    398e:	c0 96       	adiw	r24, 0x30	; 48
    3990:	0e d4       	rcall	.+2076   	; 0x41ae <fputc>
    3992:	4c c1       	rjmp	.+664    	; 0x3c2c <vfprintf+0x67e>
    3994:	83 36       	cpi	r24, 0x63	; 99
    3996:	31 f0       	breq	.+12     	; 0x39a4 <vfprintf+0x3f6>
    3998:	83 37       	cpi	r24, 0x73	; 115
    399a:	79 f0       	breq	.+30     	; 0x39ba <vfprintf+0x40c>
    399c:	83 35       	cpi	r24, 0x53	; 83
    399e:	09 f0       	breq	.+2      	; 0x39a2 <vfprintf+0x3f4>
    39a0:	54 c0       	rjmp	.+168    	; 0x3a4a <vfprintf+0x49c>
    39a2:	20 c0       	rjmp	.+64     	; 0x39e4 <vfprintf+0x436>
    39a4:	52 01       	movw	r10, r4
    39a6:	e2 e0       	ldi	r30, 0x02	; 2
    39a8:	ae 0e       	add	r10, r30
    39aa:	b1 1c       	adc	r11, r1
    39ac:	f2 01       	movw	r30, r4
    39ae:	80 81       	ld	r24, Z
    39b0:	89 83       	std	Y+1, r24	; 0x01
    39b2:	01 e0       	ldi	r16, 0x01	; 1
    39b4:	10 e0       	ldi	r17, 0x00	; 0
    39b6:	23 01       	movw	r4, r6
    39b8:	13 c0       	rjmp	.+38     	; 0x39e0 <vfprintf+0x432>
    39ba:	52 01       	movw	r10, r4
    39bc:	f2 e0       	ldi	r31, 0x02	; 2
    39be:	af 0e       	add	r10, r31
    39c0:	b1 1c       	adc	r11, r1
    39c2:	f2 01       	movw	r30, r4
    39c4:	40 80       	ld	r4, Z
    39c6:	51 80       	ldd	r5, Z+1	; 0x01
    39c8:	26 ff       	sbrs	r18, 6
    39ca:	03 c0       	rjmp	.+6      	; 0x39d2 <vfprintf+0x424>
    39cc:	61 2f       	mov	r22, r17
    39ce:	70 e0       	ldi	r23, 0x00	; 0
    39d0:	02 c0       	rjmp	.+4      	; 0x39d6 <vfprintf+0x428>
    39d2:	6f ef       	ldi	r22, 0xFF	; 255
    39d4:	7f ef       	ldi	r23, 0xFF	; 255
    39d6:	c2 01       	movw	r24, r4
    39d8:	2a 8b       	std	Y+18, r18	; 0x12
    39da:	de d3       	rcall	.+1980   	; 0x4198 <strnlen>
    39dc:	8c 01       	movw	r16, r24
    39de:	2a 89       	ldd	r18, Y+18	; 0x12
    39e0:	2f 77       	andi	r18, 0x7F	; 127
    39e2:	14 c0       	rjmp	.+40     	; 0x3a0c <vfprintf+0x45e>
    39e4:	52 01       	movw	r10, r4
    39e6:	f2 e0       	ldi	r31, 0x02	; 2
    39e8:	af 0e       	add	r10, r31
    39ea:	b1 1c       	adc	r11, r1
    39ec:	f2 01       	movw	r30, r4
    39ee:	40 80       	ld	r4, Z
    39f0:	51 80       	ldd	r5, Z+1	; 0x01
    39f2:	26 ff       	sbrs	r18, 6
    39f4:	03 c0       	rjmp	.+6      	; 0x39fc <vfprintf+0x44e>
    39f6:	61 2f       	mov	r22, r17
    39f8:	70 e0       	ldi	r23, 0x00	; 0
    39fa:	02 c0       	rjmp	.+4      	; 0x3a00 <vfprintf+0x452>
    39fc:	6f ef       	ldi	r22, 0xFF	; 255
    39fe:	7f ef       	ldi	r23, 0xFF	; 255
    3a00:	c2 01       	movw	r24, r4
    3a02:	2a 8b       	std	Y+18, r18	; 0x12
    3a04:	be d3       	rcall	.+1916   	; 0x4182 <strnlen_P>
    3a06:	8c 01       	movw	r16, r24
    3a08:	2a 89       	ldd	r18, Y+18	; 0x12
    3a0a:	20 68       	ori	r18, 0x80	; 128
    3a0c:	32 2e       	mov	r3, r18
    3a0e:	23 fd       	sbrc	r18, 3
    3a10:	18 c0       	rjmp	.+48     	; 0x3a42 <vfprintf+0x494>
    3a12:	8f 2d       	mov	r24, r15
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	08 17       	cp	r16, r24
    3a18:	19 07       	cpc	r17, r25
    3a1a:	98 f4       	brcc	.+38     	; 0x3a42 <vfprintf+0x494>
    3a1c:	b6 01       	movw	r22, r12
    3a1e:	80 e2       	ldi	r24, 0x20	; 32
    3a20:	90 e0       	ldi	r25, 0x00	; 0
    3a22:	c5 d3       	rcall	.+1930   	; 0x41ae <fputc>
    3a24:	fa 94       	dec	r15
    3a26:	f5 cf       	rjmp	.-22     	; 0x3a12 <vfprintf+0x464>
    3a28:	f2 01       	movw	r30, r4
    3a2a:	37 fc       	sbrc	r3, 7
    3a2c:	85 91       	lpm	r24, Z+
    3a2e:	37 fe       	sbrs	r3, 7
    3a30:	81 91       	ld	r24, Z+
    3a32:	2f 01       	movw	r4, r30
    3a34:	b6 01       	movw	r22, r12
    3a36:	90 e0       	ldi	r25, 0x00	; 0
    3a38:	ba d3       	rcall	.+1908   	; 0x41ae <fputc>
    3a3a:	f1 10       	cpse	r15, r1
    3a3c:	fa 94       	dec	r15
    3a3e:	01 50       	subi	r16, 0x01	; 1
    3a40:	11 09       	sbc	r17, r1
    3a42:	01 15       	cp	r16, r1
    3a44:	11 05       	cpc	r17, r1
    3a46:	81 f7       	brne	.-32     	; 0x3a28 <vfprintf+0x47a>
    3a48:	f1 c0       	rjmp	.+482    	; 0x3c2c <vfprintf+0x67e>
    3a4a:	84 36       	cpi	r24, 0x64	; 100
    3a4c:	11 f0       	breq	.+4      	; 0x3a52 <vfprintf+0x4a4>
    3a4e:	89 36       	cpi	r24, 0x69	; 105
    3a50:	51 f5       	brne	.+84     	; 0x3aa6 <vfprintf+0x4f8>
    3a52:	52 01       	movw	r10, r4
    3a54:	27 ff       	sbrs	r18, 7
    3a56:	09 c0       	rjmp	.+18     	; 0x3a6a <vfprintf+0x4bc>
    3a58:	f4 e0       	ldi	r31, 0x04	; 4
    3a5a:	af 0e       	add	r10, r31
    3a5c:	b1 1c       	adc	r11, r1
    3a5e:	f2 01       	movw	r30, r4
    3a60:	60 81       	ld	r22, Z
    3a62:	71 81       	ldd	r23, Z+1	; 0x01
    3a64:	82 81       	ldd	r24, Z+2	; 0x02
    3a66:	93 81       	ldd	r25, Z+3	; 0x03
    3a68:	0a c0       	rjmp	.+20     	; 0x3a7e <vfprintf+0x4d0>
    3a6a:	f2 e0       	ldi	r31, 0x02	; 2
    3a6c:	af 0e       	add	r10, r31
    3a6e:	b1 1c       	adc	r11, r1
    3a70:	f2 01       	movw	r30, r4
    3a72:	60 81       	ld	r22, Z
    3a74:	71 81       	ldd	r23, Z+1	; 0x01
    3a76:	07 2e       	mov	r0, r23
    3a78:	00 0c       	add	r0, r0
    3a7a:	88 0b       	sbc	r24, r24
    3a7c:	99 0b       	sbc	r25, r25
    3a7e:	2f 76       	andi	r18, 0x6F	; 111
    3a80:	32 2e       	mov	r3, r18
    3a82:	97 ff       	sbrs	r25, 7
    3a84:	09 c0       	rjmp	.+18     	; 0x3a98 <vfprintf+0x4ea>
    3a86:	90 95       	com	r25
    3a88:	80 95       	com	r24
    3a8a:	70 95       	com	r23
    3a8c:	61 95       	neg	r22
    3a8e:	7f 4f       	sbci	r23, 0xFF	; 255
    3a90:	8f 4f       	sbci	r24, 0xFF	; 255
    3a92:	9f 4f       	sbci	r25, 0xFF	; 255
    3a94:	20 68       	ori	r18, 0x80	; 128
    3a96:	32 2e       	mov	r3, r18
    3a98:	2a e0       	ldi	r18, 0x0A	; 10
    3a9a:	30 e0       	ldi	r19, 0x00	; 0
    3a9c:	a3 01       	movw	r20, r6
    3a9e:	07 d4       	rcall	.+2062   	; 0x42ae <__ultoa_invert>
    3aa0:	e8 2e       	mov	r14, r24
    3aa2:	e6 18       	sub	r14, r6
    3aa4:	3e c0       	rjmp	.+124    	; 0x3b22 <vfprintf+0x574>
    3aa6:	02 2f       	mov	r16, r18
    3aa8:	85 37       	cpi	r24, 0x75	; 117
    3aaa:	21 f4       	brne	.+8      	; 0x3ab4 <vfprintf+0x506>
    3aac:	0f 7e       	andi	r16, 0xEF	; 239
    3aae:	2a e0       	ldi	r18, 0x0A	; 10
    3ab0:	30 e0       	ldi	r19, 0x00	; 0
    3ab2:	1d c0       	rjmp	.+58     	; 0x3aee <vfprintf+0x540>
    3ab4:	09 7f       	andi	r16, 0xF9	; 249
    3ab6:	8f 36       	cpi	r24, 0x6F	; 111
    3ab8:	91 f0       	breq	.+36     	; 0x3ade <vfprintf+0x530>
    3aba:	18 f4       	brcc	.+6      	; 0x3ac2 <vfprintf+0x514>
    3abc:	88 35       	cpi	r24, 0x58	; 88
    3abe:	59 f0       	breq	.+22     	; 0x3ad6 <vfprintf+0x528>
    3ac0:	be c0       	rjmp	.+380    	; 0x3c3e <vfprintf+0x690>
    3ac2:	80 37       	cpi	r24, 0x70	; 112
    3ac4:	19 f0       	breq	.+6      	; 0x3acc <vfprintf+0x51e>
    3ac6:	88 37       	cpi	r24, 0x78	; 120
    3ac8:	11 f0       	breq	.+4      	; 0x3ace <vfprintf+0x520>
    3aca:	b9 c0       	rjmp	.+370    	; 0x3c3e <vfprintf+0x690>
    3acc:	00 61       	ori	r16, 0x10	; 16
    3ace:	04 ff       	sbrs	r16, 4
    3ad0:	09 c0       	rjmp	.+18     	; 0x3ae4 <vfprintf+0x536>
    3ad2:	04 60       	ori	r16, 0x04	; 4
    3ad4:	07 c0       	rjmp	.+14     	; 0x3ae4 <vfprintf+0x536>
    3ad6:	24 ff       	sbrs	r18, 4
    3ad8:	08 c0       	rjmp	.+16     	; 0x3aea <vfprintf+0x53c>
    3ada:	06 60       	ori	r16, 0x06	; 6
    3adc:	06 c0       	rjmp	.+12     	; 0x3aea <vfprintf+0x53c>
    3ade:	28 e0       	ldi	r18, 0x08	; 8
    3ae0:	30 e0       	ldi	r19, 0x00	; 0
    3ae2:	05 c0       	rjmp	.+10     	; 0x3aee <vfprintf+0x540>
    3ae4:	20 e1       	ldi	r18, 0x10	; 16
    3ae6:	30 e0       	ldi	r19, 0x00	; 0
    3ae8:	02 c0       	rjmp	.+4      	; 0x3aee <vfprintf+0x540>
    3aea:	20 e1       	ldi	r18, 0x10	; 16
    3aec:	32 e0       	ldi	r19, 0x02	; 2
    3aee:	52 01       	movw	r10, r4
    3af0:	07 ff       	sbrs	r16, 7
    3af2:	09 c0       	rjmp	.+18     	; 0x3b06 <vfprintf+0x558>
    3af4:	f4 e0       	ldi	r31, 0x04	; 4
    3af6:	af 0e       	add	r10, r31
    3af8:	b1 1c       	adc	r11, r1
    3afa:	f2 01       	movw	r30, r4
    3afc:	60 81       	ld	r22, Z
    3afe:	71 81       	ldd	r23, Z+1	; 0x01
    3b00:	82 81       	ldd	r24, Z+2	; 0x02
    3b02:	93 81       	ldd	r25, Z+3	; 0x03
    3b04:	08 c0       	rjmp	.+16     	; 0x3b16 <vfprintf+0x568>
    3b06:	f2 e0       	ldi	r31, 0x02	; 2
    3b08:	af 0e       	add	r10, r31
    3b0a:	b1 1c       	adc	r11, r1
    3b0c:	f2 01       	movw	r30, r4
    3b0e:	60 81       	ld	r22, Z
    3b10:	71 81       	ldd	r23, Z+1	; 0x01
    3b12:	80 e0       	ldi	r24, 0x00	; 0
    3b14:	90 e0       	ldi	r25, 0x00	; 0
    3b16:	a3 01       	movw	r20, r6
    3b18:	ca d3       	rcall	.+1940   	; 0x42ae <__ultoa_invert>
    3b1a:	e8 2e       	mov	r14, r24
    3b1c:	e6 18       	sub	r14, r6
    3b1e:	0f 77       	andi	r16, 0x7F	; 127
    3b20:	30 2e       	mov	r3, r16
    3b22:	36 fe       	sbrs	r3, 6
    3b24:	0b c0       	rjmp	.+22     	; 0x3b3c <vfprintf+0x58e>
    3b26:	33 2d       	mov	r19, r3
    3b28:	3e 7f       	andi	r19, 0xFE	; 254
    3b2a:	e1 16       	cp	r14, r17
    3b2c:	50 f4       	brcc	.+20     	; 0x3b42 <vfprintf+0x594>
    3b2e:	34 fe       	sbrs	r3, 4
    3b30:	0a c0       	rjmp	.+20     	; 0x3b46 <vfprintf+0x598>
    3b32:	32 fc       	sbrc	r3, 2
    3b34:	08 c0       	rjmp	.+16     	; 0x3b46 <vfprintf+0x598>
    3b36:	33 2d       	mov	r19, r3
    3b38:	3e 7e       	andi	r19, 0xEE	; 238
    3b3a:	05 c0       	rjmp	.+10     	; 0x3b46 <vfprintf+0x598>
    3b3c:	0e 2d       	mov	r16, r14
    3b3e:	33 2d       	mov	r19, r3
    3b40:	03 c0       	rjmp	.+6      	; 0x3b48 <vfprintf+0x59a>
    3b42:	0e 2d       	mov	r16, r14
    3b44:	01 c0       	rjmp	.+2      	; 0x3b48 <vfprintf+0x59a>
    3b46:	01 2f       	mov	r16, r17
    3b48:	34 ff       	sbrs	r19, 4
    3b4a:	0c c0       	rjmp	.+24     	; 0x3b64 <vfprintf+0x5b6>
    3b4c:	fe 01       	movw	r30, r28
    3b4e:	ee 0d       	add	r30, r14
    3b50:	f1 1d       	adc	r31, r1
    3b52:	80 81       	ld	r24, Z
    3b54:	80 33       	cpi	r24, 0x30	; 48
    3b56:	11 f4       	brne	.+4      	; 0x3b5c <vfprintf+0x5ae>
    3b58:	39 7e       	andi	r19, 0xE9	; 233
    3b5a:	08 c0       	rjmp	.+16     	; 0x3b6c <vfprintf+0x5be>
    3b5c:	32 ff       	sbrs	r19, 2
    3b5e:	05 c0       	rjmp	.+10     	; 0x3b6a <vfprintf+0x5bc>
    3b60:	0e 5f       	subi	r16, 0xFE	; 254
    3b62:	04 c0       	rjmp	.+8      	; 0x3b6c <vfprintf+0x5be>
    3b64:	83 2f       	mov	r24, r19
    3b66:	86 78       	andi	r24, 0x86	; 134
    3b68:	09 f0       	breq	.+2      	; 0x3b6c <vfprintf+0x5be>
    3b6a:	0f 5f       	subi	r16, 0xFF	; 255
    3b6c:	33 fd       	sbrc	r19, 3
    3b6e:	12 c0       	rjmp	.+36     	; 0x3b94 <vfprintf+0x5e6>
    3b70:	30 ff       	sbrs	r19, 0
    3b72:	06 c0       	rjmp	.+12     	; 0x3b80 <vfprintf+0x5d2>
    3b74:	1e 2d       	mov	r17, r14
    3b76:	0f 15       	cp	r16, r15
    3b78:	18 f4       	brcc	.+6      	; 0x3b80 <vfprintf+0x5d2>
    3b7a:	1f 0d       	add	r17, r15
    3b7c:	10 1b       	sub	r17, r16
    3b7e:	0f 2d       	mov	r16, r15
    3b80:	0f 15       	cp	r16, r15
    3b82:	60 f4       	brcc	.+24     	; 0x3b9c <vfprintf+0x5ee>
    3b84:	b6 01       	movw	r22, r12
    3b86:	80 e2       	ldi	r24, 0x20	; 32
    3b88:	90 e0       	ldi	r25, 0x00	; 0
    3b8a:	3b 8b       	std	Y+19, r19	; 0x13
    3b8c:	10 d3       	rcall	.+1568   	; 0x41ae <fputc>
    3b8e:	0f 5f       	subi	r16, 0xFF	; 255
    3b90:	3b 89       	ldd	r19, Y+19	; 0x13
    3b92:	f6 cf       	rjmp	.-20     	; 0x3b80 <vfprintf+0x5d2>
    3b94:	0f 15       	cp	r16, r15
    3b96:	10 f4       	brcc	.+4      	; 0x3b9c <vfprintf+0x5ee>
    3b98:	f0 1a       	sub	r15, r16
    3b9a:	01 c0       	rjmp	.+2      	; 0x3b9e <vfprintf+0x5f0>
    3b9c:	f1 2c       	mov	r15, r1
    3b9e:	34 ff       	sbrs	r19, 4
    3ba0:	11 c0       	rjmp	.+34     	; 0x3bc4 <vfprintf+0x616>
    3ba2:	b6 01       	movw	r22, r12
    3ba4:	80 e3       	ldi	r24, 0x30	; 48
    3ba6:	90 e0       	ldi	r25, 0x00	; 0
    3ba8:	3b 8b       	std	Y+19, r19	; 0x13
    3baa:	01 d3       	rcall	.+1538   	; 0x41ae <fputc>
    3bac:	3b 89       	ldd	r19, Y+19	; 0x13
    3bae:	32 ff       	sbrs	r19, 2
    3bb0:	16 c0       	rjmp	.+44     	; 0x3bde <vfprintf+0x630>
    3bb2:	31 fd       	sbrc	r19, 1
    3bb4:	03 c0       	rjmp	.+6      	; 0x3bbc <vfprintf+0x60e>
    3bb6:	88 e7       	ldi	r24, 0x78	; 120
    3bb8:	90 e0       	ldi	r25, 0x00	; 0
    3bba:	02 c0       	rjmp	.+4      	; 0x3bc0 <vfprintf+0x612>
    3bbc:	88 e5       	ldi	r24, 0x58	; 88
    3bbe:	90 e0       	ldi	r25, 0x00	; 0
    3bc0:	b6 01       	movw	r22, r12
    3bc2:	0c c0       	rjmp	.+24     	; 0x3bdc <vfprintf+0x62e>
    3bc4:	83 2f       	mov	r24, r19
    3bc6:	86 78       	andi	r24, 0x86	; 134
    3bc8:	51 f0       	breq	.+20     	; 0x3bde <vfprintf+0x630>
    3bca:	31 ff       	sbrs	r19, 1
    3bcc:	02 c0       	rjmp	.+4      	; 0x3bd2 <vfprintf+0x624>
    3bce:	8b e2       	ldi	r24, 0x2B	; 43
    3bd0:	01 c0       	rjmp	.+2      	; 0x3bd4 <vfprintf+0x626>
    3bd2:	80 e2       	ldi	r24, 0x20	; 32
    3bd4:	37 fd       	sbrc	r19, 7
    3bd6:	8d e2       	ldi	r24, 0x2D	; 45
    3bd8:	b6 01       	movw	r22, r12
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	e8 d2       	rcall	.+1488   	; 0x41ae <fputc>
    3bde:	e1 16       	cp	r14, r17
    3be0:	30 f4       	brcc	.+12     	; 0x3bee <vfprintf+0x640>
    3be2:	b6 01       	movw	r22, r12
    3be4:	80 e3       	ldi	r24, 0x30	; 48
    3be6:	90 e0       	ldi	r25, 0x00	; 0
    3be8:	e2 d2       	rcall	.+1476   	; 0x41ae <fputc>
    3bea:	11 50       	subi	r17, 0x01	; 1
    3bec:	f8 cf       	rjmp	.-16     	; 0x3bde <vfprintf+0x630>
    3bee:	ea 94       	dec	r14
    3bf0:	f3 01       	movw	r30, r6
    3bf2:	ee 0d       	add	r30, r14
    3bf4:	f1 1d       	adc	r31, r1
    3bf6:	80 81       	ld	r24, Z
    3bf8:	b6 01       	movw	r22, r12
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	d8 d2       	rcall	.+1456   	; 0x41ae <fputc>
    3bfe:	e1 10       	cpse	r14, r1
    3c00:	f6 cf       	rjmp	.-20     	; 0x3bee <vfprintf+0x640>
    3c02:	14 c0       	rjmp	.+40     	; 0x3c2c <vfprintf+0x67e>
    3c04:	f4 e0       	ldi	r31, 0x04	; 4
    3c06:	ff 15       	cp	r31, r15
    3c08:	48 f5       	brcc	.+82     	; 0x3c5c <vfprintf+0x6ae>
    3c0a:	84 e0       	ldi	r24, 0x04	; 4
    3c0c:	f8 1a       	sub	r15, r24
    3c0e:	33 fe       	sbrs	r3, 3
    3c10:	1d c0       	rjmp	.+58     	; 0x3c4c <vfprintf+0x69e>
    3c12:	21 10       	cpse	r2, r1
    3c14:	24 c0       	rjmp	.+72     	; 0x3c5e <vfprintf+0x6b0>
    3c16:	03 ff       	sbrs	r16, 3
    3c18:	27 c0       	rjmp	.+78     	; 0x3c68 <vfprintf+0x6ba>
    3c1a:	04 e3       	ldi	r16, 0x34	; 52
    3c1c:	11 e0       	ldi	r17, 0x01	; 1
    3c1e:	f3 2d       	mov	r31, r3
    3c20:	f0 71       	andi	r31, 0x10	; 16
    3c22:	3f 2e       	mov	r3, r31
    3c24:	f8 01       	movw	r30, r16
    3c26:	84 91       	lpm	r24, Z
    3c28:	81 11       	cpse	r24, r1
    3c2a:	21 c0       	rjmp	.+66     	; 0x3c6e <vfprintf+0x6c0>
    3c2c:	ff 20       	and	r15, r15
    3c2e:	09 f4       	brne	.+2      	; 0x3c32 <vfprintf+0x684>
    3c30:	fd cc       	rjmp	.-1542   	; 0x362c <vfprintf+0x7e>
    3c32:	b6 01       	movw	r22, r12
    3c34:	80 e2       	ldi	r24, 0x20	; 32
    3c36:	90 e0       	ldi	r25, 0x00	; 0
    3c38:	ba d2       	rcall	.+1396   	; 0x41ae <fputc>
    3c3a:	fa 94       	dec	r15
    3c3c:	f7 cf       	rjmp	.-18     	; 0x3c2c <vfprintf+0x67e>
    3c3e:	f6 01       	movw	r30, r12
    3c40:	86 81       	ldd	r24, Z+6	; 0x06
    3c42:	97 81       	ldd	r25, Z+7	; 0x07
    3c44:	23 c0       	rjmp	.+70     	; 0x3c8c <vfprintf+0x6de>
    3c46:	8f ef       	ldi	r24, 0xFF	; 255
    3c48:	9f ef       	ldi	r25, 0xFF	; 255
    3c4a:	20 c0       	rjmp	.+64     	; 0x3c8c <vfprintf+0x6de>
    3c4c:	b6 01       	movw	r22, r12
    3c4e:	80 e2       	ldi	r24, 0x20	; 32
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	ad d2       	rcall	.+1370   	; 0x41ae <fputc>
    3c54:	fa 94       	dec	r15
    3c56:	f1 10       	cpse	r15, r1
    3c58:	f9 cf       	rjmp	.-14     	; 0x3c4c <vfprintf+0x69e>
    3c5a:	db cf       	rjmp	.-74     	; 0x3c12 <vfprintf+0x664>
    3c5c:	f1 2c       	mov	r15, r1
    3c5e:	b6 01       	movw	r22, r12
    3c60:	82 2d       	mov	r24, r2
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	a4 d2       	rcall	.+1352   	; 0x41ae <fputc>
    3c66:	d7 cf       	rjmp	.-82     	; 0x3c16 <vfprintf+0x668>
    3c68:	08 e3       	ldi	r16, 0x38	; 56
    3c6a:	11 e0       	ldi	r17, 0x01	; 1
    3c6c:	d8 cf       	rjmp	.-80     	; 0x3c1e <vfprintf+0x670>
    3c6e:	31 10       	cpse	r3, r1
    3c70:	80 52       	subi	r24, 0x20	; 32
    3c72:	b6 01       	movw	r22, r12
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	9b d2       	rcall	.+1334   	; 0x41ae <fputc>
    3c78:	0f 5f       	subi	r16, 0xFF	; 255
    3c7a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c7c:	d3 cf       	rjmp	.-90     	; 0x3c24 <vfprintf+0x676>
    3c7e:	23 e0       	ldi	r18, 0x03	; 3
    3c80:	2f 15       	cp	r18, r15
    3c82:	10 f4       	brcc	.+4      	; 0x3c88 <vfprintf+0x6da>
    3c84:	83 e0       	ldi	r24, 0x03	; 3
    3c86:	c2 cf       	rjmp	.-124    	; 0x3c0c <vfprintf+0x65e>
    3c88:	f1 2c       	mov	r15, r1
    3c8a:	c5 cf       	rjmp	.-118    	; 0x3c16 <vfprintf+0x668>
    3c8c:	63 96       	adiw	r28, 0x13	; 19
    3c8e:	0f b6       	in	r0, 0x3f	; 63
    3c90:	f8 94       	cli
    3c92:	de bf       	out	0x3e, r29	; 62
    3c94:	0f be       	out	0x3f, r0	; 63
    3c96:	cd bf       	out	0x3d, r28	; 61
    3c98:	df 91       	pop	r29
    3c9a:	cf 91       	pop	r28
    3c9c:	1f 91       	pop	r17
    3c9e:	0f 91       	pop	r16
    3ca0:	ff 90       	pop	r15
    3ca2:	ef 90       	pop	r14
    3ca4:	df 90       	pop	r13
    3ca6:	cf 90       	pop	r12
    3ca8:	bf 90       	pop	r11
    3caa:	af 90       	pop	r10
    3cac:	9f 90       	pop	r9
    3cae:	8f 90       	pop	r8
    3cb0:	7f 90       	pop	r7
    3cb2:	6f 90       	pop	r6
    3cb4:	5f 90       	pop	r5
    3cb6:	4f 90       	pop	r4
    3cb8:	3f 90       	pop	r3
    3cba:	2f 90       	pop	r2
    3cbc:	08 95       	ret

00003cbe <__udivmodsi4>:
    3cbe:	a1 e2       	ldi	r26, 0x21	; 33
    3cc0:	1a 2e       	mov	r1, r26
    3cc2:	aa 1b       	sub	r26, r26
    3cc4:	bb 1b       	sub	r27, r27
    3cc6:	fd 01       	movw	r30, r26
    3cc8:	0d c0       	rjmp	.+26     	; 0x3ce4 <__udivmodsi4_ep>

00003cca <__udivmodsi4_loop>:
    3cca:	aa 1f       	adc	r26, r26
    3ccc:	bb 1f       	adc	r27, r27
    3cce:	ee 1f       	adc	r30, r30
    3cd0:	ff 1f       	adc	r31, r31
    3cd2:	a2 17       	cp	r26, r18
    3cd4:	b3 07       	cpc	r27, r19
    3cd6:	e4 07       	cpc	r30, r20
    3cd8:	f5 07       	cpc	r31, r21
    3cda:	20 f0       	brcs	.+8      	; 0x3ce4 <__udivmodsi4_ep>
    3cdc:	a2 1b       	sub	r26, r18
    3cde:	b3 0b       	sbc	r27, r19
    3ce0:	e4 0b       	sbc	r30, r20
    3ce2:	f5 0b       	sbc	r31, r21

00003ce4 <__udivmodsi4_ep>:
    3ce4:	66 1f       	adc	r22, r22
    3ce6:	77 1f       	adc	r23, r23
    3ce8:	88 1f       	adc	r24, r24
    3cea:	99 1f       	adc	r25, r25
    3cec:	1a 94       	dec	r1
    3cee:	69 f7       	brne	.-38     	; 0x3cca <__udivmodsi4_loop>
    3cf0:	60 95       	com	r22
    3cf2:	70 95       	com	r23
    3cf4:	80 95       	com	r24
    3cf6:	90 95       	com	r25
    3cf8:	9b 01       	movw	r18, r22
    3cfa:	ac 01       	movw	r20, r24
    3cfc:	bd 01       	movw	r22, r26
    3cfe:	cf 01       	movw	r24, r30
    3d00:	08 95       	ret

00003d02 <__divmodsi4>:
    3d02:	05 2e       	mov	r0, r21
    3d04:	97 fb       	bst	r25, 7
    3d06:	16 f4       	brtc	.+4      	; 0x3d0c <__divmodsi4+0xa>
    3d08:	00 94       	com	r0
    3d0a:	0f d0       	rcall	.+30     	; 0x3d2a <__negsi2>
    3d0c:	57 fd       	sbrc	r21, 7
    3d0e:	05 d0       	rcall	.+10     	; 0x3d1a <__divmodsi4_neg2>
    3d10:	d6 df       	rcall	.-84     	; 0x3cbe <__udivmodsi4>
    3d12:	07 fc       	sbrc	r0, 7
    3d14:	02 d0       	rcall	.+4      	; 0x3d1a <__divmodsi4_neg2>
    3d16:	46 f4       	brtc	.+16     	; 0x3d28 <__divmodsi4_exit>
    3d18:	08 c0       	rjmp	.+16     	; 0x3d2a <__negsi2>

00003d1a <__divmodsi4_neg2>:
    3d1a:	50 95       	com	r21
    3d1c:	40 95       	com	r20
    3d1e:	30 95       	com	r19
    3d20:	21 95       	neg	r18
    3d22:	3f 4f       	sbci	r19, 0xFF	; 255
    3d24:	4f 4f       	sbci	r20, 0xFF	; 255
    3d26:	5f 4f       	sbci	r21, 0xFF	; 255

00003d28 <__divmodsi4_exit>:
    3d28:	08 95       	ret

00003d2a <__negsi2>:
    3d2a:	90 95       	com	r25
    3d2c:	80 95       	com	r24
    3d2e:	70 95       	com	r23
    3d30:	61 95       	neg	r22
    3d32:	7f 4f       	sbci	r23, 0xFF	; 255
    3d34:	8f 4f       	sbci	r24, 0xFF	; 255
    3d36:	9f 4f       	sbci	r25, 0xFF	; 255
    3d38:	08 95       	ret

00003d3a <__mulshisi3>:
    3d3a:	b7 ff       	sbrs	r27, 7
    3d3c:	04 c0       	rjmp	.+8      	; 0x3d46 <__muluhisi3>

00003d3e <__mulohisi3>:
    3d3e:	03 d0       	rcall	.+6      	; 0x3d46 <__muluhisi3>
    3d40:	82 1b       	sub	r24, r18
    3d42:	93 0b       	sbc	r25, r19
    3d44:	08 95       	ret

00003d46 <__muluhisi3>:
    3d46:	09 d0       	rcall	.+18     	; 0x3d5a <__umulhisi3>
    3d48:	a5 9f       	mul	r26, r21
    3d4a:	90 0d       	add	r25, r0
    3d4c:	b4 9f       	mul	r27, r20
    3d4e:	90 0d       	add	r25, r0
    3d50:	a4 9f       	mul	r26, r20
    3d52:	80 0d       	add	r24, r0
    3d54:	91 1d       	adc	r25, r1
    3d56:	11 24       	eor	r1, r1
    3d58:	08 95       	ret

00003d5a <__umulhisi3>:
    3d5a:	a2 9f       	mul	r26, r18
    3d5c:	b0 01       	movw	r22, r0
    3d5e:	b3 9f       	mul	r27, r19
    3d60:	c0 01       	movw	r24, r0
    3d62:	a3 9f       	mul	r26, r19
    3d64:	70 0d       	add	r23, r0
    3d66:	81 1d       	adc	r24, r1
    3d68:	11 24       	eor	r1, r1
    3d6a:	91 1d       	adc	r25, r1
    3d6c:	b2 9f       	mul	r27, r18
    3d6e:	70 0d       	add	r23, r0
    3d70:	81 1d       	adc	r24, r1
    3d72:	11 24       	eor	r1, r1
    3d74:	91 1d       	adc	r25, r1
    3d76:	08 95       	ret

00003d78 <malloc>:
    3d78:	cf 93       	push	r28
    3d7a:	df 93       	push	r29
    3d7c:	82 30       	cpi	r24, 0x02	; 2
    3d7e:	91 05       	cpc	r25, r1
    3d80:	10 f4       	brcc	.+4      	; 0x3d86 <malloc+0xe>
    3d82:	82 e0       	ldi	r24, 0x02	; 2
    3d84:	90 e0       	ldi	r25, 0x00	; 0
    3d86:	e0 91 73 0c 	lds	r30, 0x0C73
    3d8a:	f0 91 74 0c 	lds	r31, 0x0C74
    3d8e:	20 e0       	ldi	r18, 0x00	; 0
    3d90:	30 e0       	ldi	r19, 0x00	; 0
    3d92:	c0 e0       	ldi	r28, 0x00	; 0
    3d94:	d0 e0       	ldi	r29, 0x00	; 0
    3d96:	30 97       	sbiw	r30, 0x00	; 0
    3d98:	11 f1       	breq	.+68     	; 0x3dde <malloc+0x66>
    3d9a:	40 81       	ld	r20, Z
    3d9c:	51 81       	ldd	r21, Z+1	; 0x01
    3d9e:	48 17       	cp	r20, r24
    3da0:	59 07       	cpc	r21, r25
    3da2:	c0 f0       	brcs	.+48     	; 0x3dd4 <malloc+0x5c>
    3da4:	48 17       	cp	r20, r24
    3da6:	59 07       	cpc	r21, r25
    3da8:	61 f4       	brne	.+24     	; 0x3dc2 <malloc+0x4a>
    3daa:	82 81       	ldd	r24, Z+2	; 0x02
    3dac:	93 81       	ldd	r25, Z+3	; 0x03
    3dae:	20 97       	sbiw	r28, 0x00	; 0
    3db0:	19 f0       	breq	.+6      	; 0x3db8 <malloc+0x40>
    3db2:	9b 83       	std	Y+3, r25	; 0x03
    3db4:	8a 83       	std	Y+2, r24	; 0x02
    3db6:	2b c0       	rjmp	.+86     	; 0x3e0e <malloc+0x96>
    3db8:	90 93 74 0c 	sts	0x0C74, r25
    3dbc:	80 93 73 0c 	sts	0x0C73, r24
    3dc0:	26 c0       	rjmp	.+76     	; 0x3e0e <malloc+0x96>
    3dc2:	21 15       	cp	r18, r1
    3dc4:	31 05       	cpc	r19, r1
    3dc6:	19 f0       	breq	.+6      	; 0x3dce <malloc+0x56>
    3dc8:	42 17       	cp	r20, r18
    3dca:	53 07       	cpc	r21, r19
    3dcc:	18 f4       	brcc	.+6      	; 0x3dd4 <malloc+0x5c>
    3dce:	9a 01       	movw	r18, r20
    3dd0:	be 01       	movw	r22, r28
    3dd2:	df 01       	movw	r26, r30
    3dd4:	ef 01       	movw	r28, r30
    3dd6:	02 80       	ldd	r0, Z+2	; 0x02
    3dd8:	f3 81       	ldd	r31, Z+3	; 0x03
    3dda:	e0 2d       	mov	r30, r0
    3ddc:	dc cf       	rjmp	.-72     	; 0x3d96 <malloc+0x1e>
    3dde:	21 15       	cp	r18, r1
    3de0:	31 05       	cpc	r19, r1
    3de2:	09 f1       	breq	.+66     	; 0x3e26 <malloc+0xae>
    3de4:	28 1b       	sub	r18, r24
    3de6:	39 0b       	sbc	r19, r25
    3de8:	24 30       	cpi	r18, 0x04	; 4
    3dea:	31 05       	cpc	r19, r1
    3dec:	90 f4       	brcc	.+36     	; 0x3e12 <malloc+0x9a>
    3dee:	12 96       	adiw	r26, 0x02	; 2
    3df0:	8d 91       	ld	r24, X+
    3df2:	9c 91       	ld	r25, X
    3df4:	13 97       	sbiw	r26, 0x03	; 3
    3df6:	61 15       	cp	r22, r1
    3df8:	71 05       	cpc	r23, r1
    3dfa:	21 f0       	breq	.+8      	; 0x3e04 <malloc+0x8c>
    3dfc:	fb 01       	movw	r30, r22
    3dfe:	93 83       	std	Z+3, r25	; 0x03
    3e00:	82 83       	std	Z+2, r24	; 0x02
    3e02:	04 c0       	rjmp	.+8      	; 0x3e0c <malloc+0x94>
    3e04:	90 93 74 0c 	sts	0x0C74, r25
    3e08:	80 93 73 0c 	sts	0x0C73, r24
    3e0c:	fd 01       	movw	r30, r26
    3e0e:	32 96       	adiw	r30, 0x02	; 2
    3e10:	44 c0       	rjmp	.+136    	; 0x3e9a <malloc+0x122>
    3e12:	fd 01       	movw	r30, r26
    3e14:	e2 0f       	add	r30, r18
    3e16:	f3 1f       	adc	r31, r19
    3e18:	81 93       	st	Z+, r24
    3e1a:	91 93       	st	Z+, r25
    3e1c:	22 50       	subi	r18, 0x02	; 2
    3e1e:	31 09       	sbc	r19, r1
    3e20:	2d 93       	st	X+, r18
    3e22:	3c 93       	st	X, r19
    3e24:	3a c0       	rjmp	.+116    	; 0x3e9a <malloc+0x122>
    3e26:	20 91 71 0c 	lds	r18, 0x0C71
    3e2a:	30 91 72 0c 	lds	r19, 0x0C72
    3e2e:	23 2b       	or	r18, r19
    3e30:	41 f4       	brne	.+16     	; 0x3e42 <malloc+0xca>
    3e32:	20 91 02 02 	lds	r18, 0x0202
    3e36:	30 91 03 02 	lds	r19, 0x0203
    3e3a:	30 93 72 0c 	sts	0x0C72, r19
    3e3e:	20 93 71 0c 	sts	0x0C71, r18
    3e42:	20 91 00 02 	lds	r18, 0x0200
    3e46:	30 91 01 02 	lds	r19, 0x0201
    3e4a:	21 15       	cp	r18, r1
    3e4c:	31 05       	cpc	r19, r1
    3e4e:	41 f4       	brne	.+16     	; 0x3e60 <malloc+0xe8>
    3e50:	2d b7       	in	r18, 0x3d	; 61
    3e52:	3e b7       	in	r19, 0x3e	; 62
    3e54:	40 91 04 02 	lds	r20, 0x0204
    3e58:	50 91 05 02 	lds	r21, 0x0205
    3e5c:	24 1b       	sub	r18, r20
    3e5e:	35 0b       	sbc	r19, r21
    3e60:	e0 91 71 0c 	lds	r30, 0x0C71
    3e64:	f0 91 72 0c 	lds	r31, 0x0C72
    3e68:	e2 17       	cp	r30, r18
    3e6a:	f3 07       	cpc	r31, r19
    3e6c:	a0 f4       	brcc	.+40     	; 0x3e96 <malloc+0x11e>
    3e6e:	2e 1b       	sub	r18, r30
    3e70:	3f 0b       	sbc	r19, r31
    3e72:	28 17       	cp	r18, r24
    3e74:	39 07       	cpc	r19, r25
    3e76:	78 f0       	brcs	.+30     	; 0x3e96 <malloc+0x11e>
    3e78:	ac 01       	movw	r20, r24
    3e7a:	4e 5f       	subi	r20, 0xFE	; 254
    3e7c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e7e:	24 17       	cp	r18, r20
    3e80:	35 07       	cpc	r19, r21
    3e82:	48 f0       	brcs	.+18     	; 0x3e96 <malloc+0x11e>
    3e84:	4e 0f       	add	r20, r30
    3e86:	5f 1f       	adc	r21, r31
    3e88:	50 93 72 0c 	sts	0x0C72, r21
    3e8c:	40 93 71 0c 	sts	0x0C71, r20
    3e90:	81 93       	st	Z+, r24
    3e92:	91 93       	st	Z+, r25
    3e94:	02 c0       	rjmp	.+4      	; 0x3e9a <malloc+0x122>
    3e96:	e0 e0       	ldi	r30, 0x00	; 0
    3e98:	f0 e0       	ldi	r31, 0x00	; 0
    3e9a:	cf 01       	movw	r24, r30
    3e9c:	df 91       	pop	r29
    3e9e:	cf 91       	pop	r28
    3ea0:	08 95       	ret

00003ea2 <free>:
    3ea2:	0f 93       	push	r16
    3ea4:	1f 93       	push	r17
    3ea6:	cf 93       	push	r28
    3ea8:	df 93       	push	r29
    3eaa:	00 97       	sbiw	r24, 0x00	; 0
    3eac:	09 f4       	brne	.+2      	; 0x3eb0 <free+0xe>
    3eae:	8c c0       	rjmp	.+280    	; 0x3fc8 <free+0x126>
    3eb0:	fc 01       	movw	r30, r24
    3eb2:	32 97       	sbiw	r30, 0x02	; 2
    3eb4:	13 82       	std	Z+3, r1	; 0x03
    3eb6:	12 82       	std	Z+2, r1	; 0x02
    3eb8:	00 91 73 0c 	lds	r16, 0x0C73
    3ebc:	10 91 74 0c 	lds	r17, 0x0C74
    3ec0:	01 15       	cp	r16, r1
    3ec2:	11 05       	cpc	r17, r1
    3ec4:	81 f4       	brne	.+32     	; 0x3ee6 <free+0x44>
    3ec6:	20 81       	ld	r18, Z
    3ec8:	31 81       	ldd	r19, Z+1	; 0x01
    3eca:	82 0f       	add	r24, r18
    3ecc:	93 1f       	adc	r25, r19
    3ece:	20 91 71 0c 	lds	r18, 0x0C71
    3ed2:	30 91 72 0c 	lds	r19, 0x0C72
    3ed6:	28 17       	cp	r18, r24
    3ed8:	39 07       	cpc	r19, r25
    3eda:	79 f5       	brne	.+94     	; 0x3f3a <free+0x98>
    3edc:	f0 93 72 0c 	sts	0x0C72, r31
    3ee0:	e0 93 71 0c 	sts	0x0C71, r30
    3ee4:	71 c0       	rjmp	.+226    	; 0x3fc8 <free+0x126>
    3ee6:	d8 01       	movw	r26, r16
    3ee8:	40 e0       	ldi	r20, 0x00	; 0
    3eea:	50 e0       	ldi	r21, 0x00	; 0
    3eec:	ae 17       	cp	r26, r30
    3eee:	bf 07       	cpc	r27, r31
    3ef0:	50 f4       	brcc	.+20     	; 0x3f06 <free+0x64>
    3ef2:	12 96       	adiw	r26, 0x02	; 2
    3ef4:	2d 91       	ld	r18, X+
    3ef6:	3c 91       	ld	r19, X
    3ef8:	13 97       	sbiw	r26, 0x03	; 3
    3efa:	ad 01       	movw	r20, r26
    3efc:	21 15       	cp	r18, r1
    3efe:	31 05       	cpc	r19, r1
    3f00:	09 f1       	breq	.+66     	; 0x3f44 <free+0xa2>
    3f02:	d9 01       	movw	r26, r18
    3f04:	f3 cf       	rjmp	.-26     	; 0x3eec <free+0x4a>
    3f06:	9d 01       	movw	r18, r26
    3f08:	da 01       	movw	r26, r20
    3f0a:	33 83       	std	Z+3, r19	; 0x03
    3f0c:	22 83       	std	Z+2, r18	; 0x02
    3f0e:	60 81       	ld	r22, Z
    3f10:	71 81       	ldd	r23, Z+1	; 0x01
    3f12:	86 0f       	add	r24, r22
    3f14:	97 1f       	adc	r25, r23
    3f16:	82 17       	cp	r24, r18
    3f18:	93 07       	cpc	r25, r19
    3f1a:	69 f4       	brne	.+26     	; 0x3f36 <free+0x94>
    3f1c:	ec 01       	movw	r28, r24
    3f1e:	28 81       	ld	r18, Y
    3f20:	39 81       	ldd	r19, Y+1	; 0x01
    3f22:	26 0f       	add	r18, r22
    3f24:	37 1f       	adc	r19, r23
    3f26:	2e 5f       	subi	r18, 0xFE	; 254
    3f28:	3f 4f       	sbci	r19, 0xFF	; 255
    3f2a:	31 83       	std	Z+1, r19	; 0x01
    3f2c:	20 83       	st	Z, r18
    3f2e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f30:	9b 81       	ldd	r25, Y+3	; 0x03
    3f32:	93 83       	std	Z+3, r25	; 0x03
    3f34:	82 83       	std	Z+2, r24	; 0x02
    3f36:	45 2b       	or	r20, r21
    3f38:	29 f4       	brne	.+10     	; 0x3f44 <free+0xa2>
    3f3a:	f0 93 74 0c 	sts	0x0C74, r31
    3f3e:	e0 93 73 0c 	sts	0x0C73, r30
    3f42:	42 c0       	rjmp	.+132    	; 0x3fc8 <free+0x126>
    3f44:	13 96       	adiw	r26, 0x03	; 3
    3f46:	fc 93       	st	X, r31
    3f48:	ee 93       	st	-X, r30
    3f4a:	12 97       	sbiw	r26, 0x02	; 2
    3f4c:	ed 01       	movw	r28, r26
    3f4e:	49 91       	ld	r20, Y+
    3f50:	59 91       	ld	r21, Y+
    3f52:	9e 01       	movw	r18, r28
    3f54:	24 0f       	add	r18, r20
    3f56:	35 1f       	adc	r19, r21
    3f58:	e2 17       	cp	r30, r18
    3f5a:	f3 07       	cpc	r31, r19
    3f5c:	71 f4       	brne	.+28     	; 0x3f7a <free+0xd8>
    3f5e:	80 81       	ld	r24, Z
    3f60:	91 81       	ldd	r25, Z+1	; 0x01
    3f62:	84 0f       	add	r24, r20
    3f64:	95 1f       	adc	r25, r21
    3f66:	02 96       	adiw	r24, 0x02	; 2
    3f68:	11 96       	adiw	r26, 0x01	; 1
    3f6a:	9c 93       	st	X, r25
    3f6c:	8e 93       	st	-X, r24
    3f6e:	82 81       	ldd	r24, Z+2	; 0x02
    3f70:	93 81       	ldd	r25, Z+3	; 0x03
    3f72:	13 96       	adiw	r26, 0x03	; 3
    3f74:	9c 93       	st	X, r25
    3f76:	8e 93       	st	-X, r24
    3f78:	12 97       	sbiw	r26, 0x02	; 2
    3f7a:	e0 e0       	ldi	r30, 0x00	; 0
    3f7c:	f0 e0       	ldi	r31, 0x00	; 0
    3f7e:	d8 01       	movw	r26, r16
    3f80:	12 96       	adiw	r26, 0x02	; 2
    3f82:	8d 91       	ld	r24, X+
    3f84:	9c 91       	ld	r25, X
    3f86:	13 97       	sbiw	r26, 0x03	; 3
    3f88:	00 97       	sbiw	r24, 0x00	; 0
    3f8a:	19 f0       	breq	.+6      	; 0x3f92 <free+0xf0>
    3f8c:	f8 01       	movw	r30, r16
    3f8e:	8c 01       	movw	r16, r24
    3f90:	f6 cf       	rjmp	.-20     	; 0x3f7e <free+0xdc>
    3f92:	8d 91       	ld	r24, X+
    3f94:	9c 91       	ld	r25, X
    3f96:	98 01       	movw	r18, r16
    3f98:	2e 5f       	subi	r18, 0xFE	; 254
    3f9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3f9c:	82 0f       	add	r24, r18
    3f9e:	93 1f       	adc	r25, r19
    3fa0:	20 91 71 0c 	lds	r18, 0x0C71
    3fa4:	30 91 72 0c 	lds	r19, 0x0C72
    3fa8:	28 17       	cp	r18, r24
    3faa:	39 07       	cpc	r19, r25
    3fac:	69 f4       	brne	.+26     	; 0x3fc8 <free+0x126>
    3fae:	30 97       	sbiw	r30, 0x00	; 0
    3fb0:	29 f4       	brne	.+10     	; 0x3fbc <free+0x11a>
    3fb2:	10 92 74 0c 	sts	0x0C74, r1
    3fb6:	10 92 73 0c 	sts	0x0C73, r1
    3fba:	02 c0       	rjmp	.+4      	; 0x3fc0 <free+0x11e>
    3fbc:	13 82       	std	Z+3, r1	; 0x03
    3fbe:	12 82       	std	Z+2, r1	; 0x02
    3fc0:	10 93 72 0c 	sts	0x0C72, r17
    3fc4:	00 93 71 0c 	sts	0x0C71, r16
    3fc8:	df 91       	pop	r29
    3fca:	cf 91       	pop	r28
    3fcc:	1f 91       	pop	r17
    3fce:	0f 91       	pop	r16
    3fd0:	08 95       	ret

00003fd2 <__ftoa_engine>:
    3fd2:	28 30       	cpi	r18, 0x08	; 8
    3fd4:	08 f0       	brcs	.+2      	; 0x3fd8 <__ftoa_engine+0x6>
    3fd6:	27 e0       	ldi	r18, 0x07	; 7
    3fd8:	33 27       	eor	r19, r19
    3fda:	da 01       	movw	r26, r20
    3fdc:	99 0f       	add	r25, r25
    3fde:	31 1d       	adc	r19, r1
    3fe0:	87 fd       	sbrc	r24, 7
    3fe2:	91 60       	ori	r25, 0x01	; 1
    3fe4:	00 96       	adiw	r24, 0x00	; 0
    3fe6:	61 05       	cpc	r22, r1
    3fe8:	71 05       	cpc	r23, r1
    3fea:	39 f4       	brne	.+14     	; 0x3ffa <__ftoa_engine+0x28>
    3fec:	32 60       	ori	r19, 0x02	; 2
    3fee:	2e 5f       	subi	r18, 0xFE	; 254
    3ff0:	3d 93       	st	X+, r19
    3ff2:	30 e3       	ldi	r19, 0x30	; 48
    3ff4:	2a 95       	dec	r18
    3ff6:	e1 f7       	brne	.-8      	; 0x3ff0 <__ftoa_engine+0x1e>
    3ff8:	08 95       	ret
    3ffa:	9f 3f       	cpi	r25, 0xFF	; 255
    3ffc:	30 f0       	brcs	.+12     	; 0x400a <__ftoa_engine+0x38>
    3ffe:	80 38       	cpi	r24, 0x80	; 128
    4000:	71 05       	cpc	r23, r1
    4002:	61 05       	cpc	r22, r1
    4004:	09 f0       	breq	.+2      	; 0x4008 <__ftoa_engine+0x36>
    4006:	3c 5f       	subi	r19, 0xFC	; 252
    4008:	3c 5f       	subi	r19, 0xFC	; 252
    400a:	3d 93       	st	X+, r19
    400c:	91 30       	cpi	r25, 0x01	; 1
    400e:	08 f0       	brcs	.+2      	; 0x4012 <__ftoa_engine+0x40>
    4010:	80 68       	ori	r24, 0x80	; 128
    4012:	91 1d       	adc	r25, r1
    4014:	df 93       	push	r29
    4016:	cf 93       	push	r28
    4018:	1f 93       	push	r17
    401a:	0f 93       	push	r16
    401c:	ff 92       	push	r15
    401e:	ef 92       	push	r14
    4020:	19 2f       	mov	r17, r25
    4022:	98 7f       	andi	r25, 0xF8	; 248
    4024:	96 95       	lsr	r25
    4026:	e9 2f       	mov	r30, r25
    4028:	96 95       	lsr	r25
    402a:	96 95       	lsr	r25
    402c:	e9 0f       	add	r30, r25
    402e:	ff 27       	eor	r31, r31
    4030:	ea 56       	subi	r30, 0x6A	; 106
    4032:	fe 4f       	sbci	r31, 0xFE	; 254
    4034:	99 27       	eor	r25, r25
    4036:	33 27       	eor	r19, r19
    4038:	ee 24       	eor	r14, r14
    403a:	ff 24       	eor	r15, r15
    403c:	a7 01       	movw	r20, r14
    403e:	e7 01       	movw	r28, r14
    4040:	05 90       	lpm	r0, Z+
    4042:	08 94       	sec
    4044:	07 94       	ror	r0
    4046:	28 f4       	brcc	.+10     	; 0x4052 <__ftoa_engine+0x80>
    4048:	36 0f       	add	r19, r22
    404a:	e7 1e       	adc	r14, r23
    404c:	f8 1e       	adc	r15, r24
    404e:	49 1f       	adc	r20, r25
    4050:	51 1d       	adc	r21, r1
    4052:	66 0f       	add	r22, r22
    4054:	77 1f       	adc	r23, r23
    4056:	88 1f       	adc	r24, r24
    4058:	99 1f       	adc	r25, r25
    405a:	06 94       	lsr	r0
    405c:	a1 f7       	brne	.-24     	; 0x4046 <__ftoa_engine+0x74>
    405e:	05 90       	lpm	r0, Z+
    4060:	07 94       	ror	r0
    4062:	28 f4       	brcc	.+10     	; 0x406e <__ftoa_engine+0x9c>
    4064:	e7 0e       	add	r14, r23
    4066:	f8 1e       	adc	r15, r24
    4068:	49 1f       	adc	r20, r25
    406a:	56 1f       	adc	r21, r22
    406c:	c1 1d       	adc	r28, r1
    406e:	77 0f       	add	r23, r23
    4070:	88 1f       	adc	r24, r24
    4072:	99 1f       	adc	r25, r25
    4074:	66 1f       	adc	r22, r22
    4076:	06 94       	lsr	r0
    4078:	a1 f7       	brne	.-24     	; 0x4062 <__ftoa_engine+0x90>
    407a:	05 90       	lpm	r0, Z+
    407c:	07 94       	ror	r0
    407e:	28 f4       	brcc	.+10     	; 0x408a <__ftoa_engine+0xb8>
    4080:	f8 0e       	add	r15, r24
    4082:	49 1f       	adc	r20, r25
    4084:	56 1f       	adc	r21, r22
    4086:	c7 1f       	adc	r28, r23
    4088:	d1 1d       	adc	r29, r1
    408a:	88 0f       	add	r24, r24
    408c:	99 1f       	adc	r25, r25
    408e:	66 1f       	adc	r22, r22
    4090:	77 1f       	adc	r23, r23
    4092:	06 94       	lsr	r0
    4094:	a1 f7       	brne	.-24     	; 0x407e <__ftoa_engine+0xac>
    4096:	05 90       	lpm	r0, Z+
    4098:	07 94       	ror	r0
    409a:	20 f4       	brcc	.+8      	; 0x40a4 <__ftoa_engine+0xd2>
    409c:	49 0f       	add	r20, r25
    409e:	56 1f       	adc	r21, r22
    40a0:	c7 1f       	adc	r28, r23
    40a2:	d8 1f       	adc	r29, r24
    40a4:	99 0f       	add	r25, r25
    40a6:	66 1f       	adc	r22, r22
    40a8:	77 1f       	adc	r23, r23
    40aa:	88 1f       	adc	r24, r24
    40ac:	06 94       	lsr	r0
    40ae:	a9 f7       	brne	.-22     	; 0x409a <__ftoa_engine+0xc8>
    40b0:	84 91       	lpm	r24, Z
    40b2:	10 95       	com	r17
    40b4:	17 70       	andi	r17, 0x07	; 7
    40b6:	41 f0       	breq	.+16     	; 0x40c8 <__ftoa_engine+0xf6>
    40b8:	d6 95       	lsr	r29
    40ba:	c7 95       	ror	r28
    40bc:	57 95       	ror	r21
    40be:	47 95       	ror	r20
    40c0:	f7 94       	ror	r15
    40c2:	e7 94       	ror	r14
    40c4:	1a 95       	dec	r17
    40c6:	c1 f7       	brne	.-16     	; 0x40b8 <__ftoa_engine+0xe6>
    40c8:	ec e3       	ldi	r30, 0x3C	; 60
    40ca:	f1 e0       	ldi	r31, 0x01	; 1
    40cc:	68 94       	set
    40ce:	15 90       	lpm	r1, Z+
    40d0:	15 91       	lpm	r17, Z+
    40d2:	35 91       	lpm	r19, Z+
    40d4:	65 91       	lpm	r22, Z+
    40d6:	95 91       	lpm	r25, Z+
    40d8:	05 90       	lpm	r0, Z+
    40da:	7f e2       	ldi	r23, 0x2F	; 47
    40dc:	73 95       	inc	r23
    40de:	e1 18       	sub	r14, r1
    40e0:	f1 0a       	sbc	r15, r17
    40e2:	43 0b       	sbc	r20, r19
    40e4:	56 0b       	sbc	r21, r22
    40e6:	c9 0b       	sbc	r28, r25
    40e8:	d0 09       	sbc	r29, r0
    40ea:	c0 f7       	brcc	.-16     	; 0x40dc <__ftoa_engine+0x10a>
    40ec:	e1 0c       	add	r14, r1
    40ee:	f1 1e       	adc	r15, r17
    40f0:	43 1f       	adc	r20, r19
    40f2:	56 1f       	adc	r21, r22
    40f4:	c9 1f       	adc	r28, r25
    40f6:	d0 1d       	adc	r29, r0
    40f8:	7e f4       	brtc	.+30     	; 0x4118 <__ftoa_engine+0x146>
    40fa:	70 33       	cpi	r23, 0x30	; 48
    40fc:	11 f4       	brne	.+4      	; 0x4102 <__ftoa_engine+0x130>
    40fe:	8a 95       	dec	r24
    4100:	e6 cf       	rjmp	.-52     	; 0x40ce <__ftoa_engine+0xfc>
    4102:	e8 94       	clt
    4104:	01 50       	subi	r16, 0x01	; 1
    4106:	30 f0       	brcs	.+12     	; 0x4114 <__ftoa_engine+0x142>
    4108:	08 0f       	add	r16, r24
    410a:	0a f4       	brpl	.+2      	; 0x410e <__ftoa_engine+0x13c>
    410c:	00 27       	eor	r16, r16
    410e:	02 17       	cp	r16, r18
    4110:	08 f4       	brcc	.+2      	; 0x4114 <__ftoa_engine+0x142>
    4112:	20 2f       	mov	r18, r16
    4114:	23 95       	inc	r18
    4116:	02 2f       	mov	r16, r18
    4118:	7a 33       	cpi	r23, 0x3A	; 58
    411a:	28 f0       	brcs	.+10     	; 0x4126 <__ftoa_engine+0x154>
    411c:	79 e3       	ldi	r23, 0x39	; 57
    411e:	7d 93       	st	X+, r23
    4120:	2a 95       	dec	r18
    4122:	e9 f7       	brne	.-6      	; 0x411e <__ftoa_engine+0x14c>
    4124:	10 c0       	rjmp	.+32     	; 0x4146 <__ftoa_engine+0x174>
    4126:	7d 93       	st	X+, r23
    4128:	2a 95       	dec	r18
    412a:	89 f6       	brne	.-94     	; 0x40ce <__ftoa_engine+0xfc>
    412c:	06 94       	lsr	r0
    412e:	97 95       	ror	r25
    4130:	67 95       	ror	r22
    4132:	37 95       	ror	r19
    4134:	17 95       	ror	r17
    4136:	17 94       	ror	r1
    4138:	e1 18       	sub	r14, r1
    413a:	f1 0a       	sbc	r15, r17
    413c:	43 0b       	sbc	r20, r19
    413e:	56 0b       	sbc	r21, r22
    4140:	c9 0b       	sbc	r28, r25
    4142:	d0 09       	sbc	r29, r0
    4144:	98 f0       	brcs	.+38     	; 0x416c <__ftoa_engine+0x19a>
    4146:	23 95       	inc	r18
    4148:	7e 91       	ld	r23, -X
    414a:	73 95       	inc	r23
    414c:	7a 33       	cpi	r23, 0x3A	; 58
    414e:	08 f0       	brcs	.+2      	; 0x4152 <__ftoa_engine+0x180>
    4150:	70 e3       	ldi	r23, 0x30	; 48
    4152:	7c 93       	st	X, r23
    4154:	20 13       	cpse	r18, r16
    4156:	b8 f7       	brcc	.-18     	; 0x4146 <__ftoa_engine+0x174>
    4158:	7e 91       	ld	r23, -X
    415a:	70 61       	ori	r23, 0x10	; 16
    415c:	7d 93       	st	X+, r23
    415e:	30 f0       	brcs	.+12     	; 0x416c <__ftoa_engine+0x19a>
    4160:	83 95       	inc	r24
    4162:	71 e3       	ldi	r23, 0x31	; 49
    4164:	7d 93       	st	X+, r23
    4166:	70 e3       	ldi	r23, 0x30	; 48
    4168:	2a 95       	dec	r18
    416a:	e1 f7       	brne	.-8      	; 0x4164 <__ftoa_engine+0x192>
    416c:	11 24       	eor	r1, r1
    416e:	ef 90       	pop	r14
    4170:	ff 90       	pop	r15
    4172:	0f 91       	pop	r16
    4174:	1f 91       	pop	r17
    4176:	cf 91       	pop	r28
    4178:	df 91       	pop	r29
    417a:	99 27       	eor	r25, r25
    417c:	87 fd       	sbrc	r24, 7
    417e:	90 95       	com	r25
    4180:	08 95       	ret

00004182 <strnlen_P>:
    4182:	fc 01       	movw	r30, r24
    4184:	05 90       	lpm	r0, Z+
    4186:	61 50       	subi	r22, 0x01	; 1
    4188:	70 40       	sbci	r23, 0x00	; 0
    418a:	01 10       	cpse	r0, r1
    418c:	d8 f7       	brcc	.-10     	; 0x4184 <strnlen_P+0x2>
    418e:	80 95       	com	r24
    4190:	90 95       	com	r25
    4192:	8e 0f       	add	r24, r30
    4194:	9f 1f       	adc	r25, r31
    4196:	08 95       	ret

00004198 <strnlen>:
    4198:	fc 01       	movw	r30, r24
    419a:	61 50       	subi	r22, 0x01	; 1
    419c:	70 40       	sbci	r23, 0x00	; 0
    419e:	01 90       	ld	r0, Z+
    41a0:	01 10       	cpse	r0, r1
    41a2:	d8 f7       	brcc	.-10     	; 0x419a <strnlen+0x2>
    41a4:	80 95       	com	r24
    41a6:	90 95       	com	r25
    41a8:	8e 0f       	add	r24, r30
    41aa:	9f 1f       	adc	r25, r31
    41ac:	08 95       	ret

000041ae <fputc>:
    41ae:	0f 93       	push	r16
    41b0:	1f 93       	push	r17
    41b2:	cf 93       	push	r28
    41b4:	df 93       	push	r29
    41b6:	fb 01       	movw	r30, r22
    41b8:	23 81       	ldd	r18, Z+3	; 0x03
    41ba:	21 fd       	sbrc	r18, 1
    41bc:	03 c0       	rjmp	.+6      	; 0x41c4 <fputc+0x16>
    41be:	8f ef       	ldi	r24, 0xFF	; 255
    41c0:	9f ef       	ldi	r25, 0xFF	; 255
    41c2:	28 c0       	rjmp	.+80     	; 0x4214 <fputc+0x66>
    41c4:	22 ff       	sbrs	r18, 2
    41c6:	16 c0       	rjmp	.+44     	; 0x41f4 <fputc+0x46>
    41c8:	46 81       	ldd	r20, Z+6	; 0x06
    41ca:	57 81       	ldd	r21, Z+7	; 0x07
    41cc:	24 81       	ldd	r18, Z+4	; 0x04
    41ce:	35 81       	ldd	r19, Z+5	; 0x05
    41d0:	42 17       	cp	r20, r18
    41d2:	53 07       	cpc	r21, r19
    41d4:	44 f4       	brge	.+16     	; 0x41e6 <fputc+0x38>
    41d6:	a0 81       	ld	r26, Z
    41d8:	b1 81       	ldd	r27, Z+1	; 0x01
    41da:	9d 01       	movw	r18, r26
    41dc:	2f 5f       	subi	r18, 0xFF	; 255
    41de:	3f 4f       	sbci	r19, 0xFF	; 255
    41e0:	31 83       	std	Z+1, r19	; 0x01
    41e2:	20 83       	st	Z, r18
    41e4:	8c 93       	st	X, r24
    41e6:	26 81       	ldd	r18, Z+6	; 0x06
    41e8:	37 81       	ldd	r19, Z+7	; 0x07
    41ea:	2f 5f       	subi	r18, 0xFF	; 255
    41ec:	3f 4f       	sbci	r19, 0xFF	; 255
    41ee:	37 83       	std	Z+7, r19	; 0x07
    41f0:	26 83       	std	Z+6, r18	; 0x06
    41f2:	10 c0       	rjmp	.+32     	; 0x4214 <fputc+0x66>
    41f4:	eb 01       	movw	r28, r22
    41f6:	09 2f       	mov	r16, r25
    41f8:	18 2f       	mov	r17, r24
    41fa:	00 84       	ldd	r0, Z+8	; 0x08
    41fc:	f1 85       	ldd	r31, Z+9	; 0x09
    41fe:	e0 2d       	mov	r30, r0
    4200:	19 95       	eicall
    4202:	89 2b       	or	r24, r25
    4204:	e1 f6       	brne	.-72     	; 0x41be <fputc+0x10>
    4206:	8e 81       	ldd	r24, Y+6	; 0x06
    4208:	9f 81       	ldd	r25, Y+7	; 0x07
    420a:	01 96       	adiw	r24, 0x01	; 1
    420c:	9f 83       	std	Y+7, r25	; 0x07
    420e:	8e 83       	std	Y+6, r24	; 0x06
    4210:	81 2f       	mov	r24, r17
    4212:	90 2f       	mov	r25, r16
    4214:	df 91       	pop	r29
    4216:	cf 91       	pop	r28
    4218:	1f 91       	pop	r17
    421a:	0f 91       	pop	r16
    421c:	08 95       	ret

0000421e <printf>:
    421e:	cf 93       	push	r28
    4220:	df 93       	push	r29
    4222:	cd b7       	in	r28, 0x3d	; 61
    4224:	de b7       	in	r29, 0x3e	; 62
    4226:	ae 01       	movw	r20, r28
    4228:	4a 5f       	subi	r20, 0xFA	; 250
    422a:	5f 4f       	sbci	r21, 0xFF	; 255
    422c:	fa 01       	movw	r30, r20
    422e:	61 91       	ld	r22, Z+
    4230:	71 91       	ld	r23, Z+
    4232:	af 01       	movw	r20, r30
    4234:	80 91 77 0c 	lds	r24, 0x0C77
    4238:	90 91 78 0c 	lds	r25, 0x0C78
    423c:	b8 d9       	rcall	.-3216   	; 0x35ae <vfprintf>
    423e:	df 91       	pop	r29
    4240:	cf 91       	pop	r28
    4242:	08 95       	ret

00004244 <putchar>:
    4244:	60 91 77 0c 	lds	r22, 0x0C77
    4248:	70 91 78 0c 	lds	r23, 0x0C78
    424c:	b0 cf       	rjmp	.-160    	; 0x41ae <fputc>

0000424e <puts>:
    424e:	0f 93       	push	r16
    4250:	1f 93       	push	r17
    4252:	cf 93       	push	r28
    4254:	df 93       	push	r29
    4256:	e0 91 77 0c 	lds	r30, 0x0C77
    425a:	f0 91 78 0c 	lds	r31, 0x0C78
    425e:	23 81       	ldd	r18, Z+3	; 0x03
    4260:	21 ff       	sbrs	r18, 1
    4262:	1b c0       	rjmp	.+54     	; 0x429a <puts+0x4c>
    4264:	8c 01       	movw	r16, r24
    4266:	d0 e0       	ldi	r29, 0x00	; 0
    4268:	c0 e0       	ldi	r28, 0x00	; 0
    426a:	f8 01       	movw	r30, r16
    426c:	81 91       	ld	r24, Z+
    426e:	8f 01       	movw	r16, r30
    4270:	60 91 77 0c 	lds	r22, 0x0C77
    4274:	70 91 78 0c 	lds	r23, 0x0C78
    4278:	db 01       	movw	r26, r22
    427a:	18 96       	adiw	r26, 0x08	; 8
    427c:	ed 91       	ld	r30, X+
    427e:	fc 91       	ld	r31, X
    4280:	19 97       	sbiw	r26, 0x09	; 9
    4282:	88 23       	and	r24, r24
    4284:	31 f0       	breq	.+12     	; 0x4292 <puts+0x44>
    4286:	19 95       	eicall
    4288:	89 2b       	or	r24, r25
    428a:	79 f3       	breq	.-34     	; 0x426a <puts+0x1c>
    428c:	df ef       	ldi	r29, 0xFF	; 255
    428e:	cf ef       	ldi	r28, 0xFF	; 255
    4290:	ec cf       	rjmp	.-40     	; 0x426a <puts+0x1c>
    4292:	8a e0       	ldi	r24, 0x0A	; 10
    4294:	19 95       	eicall
    4296:	89 2b       	or	r24, r25
    4298:	19 f0       	breq	.+6      	; 0x42a0 <puts+0x52>
    429a:	8f ef       	ldi	r24, 0xFF	; 255
    429c:	9f ef       	ldi	r25, 0xFF	; 255
    429e:	02 c0       	rjmp	.+4      	; 0x42a4 <puts+0x56>
    42a0:	8d 2f       	mov	r24, r29
    42a2:	9c 2f       	mov	r25, r28
    42a4:	df 91       	pop	r29
    42a6:	cf 91       	pop	r28
    42a8:	1f 91       	pop	r17
    42aa:	0f 91       	pop	r16
    42ac:	08 95       	ret

000042ae <__ultoa_invert>:
    42ae:	fa 01       	movw	r30, r20
    42b0:	aa 27       	eor	r26, r26
    42b2:	28 30       	cpi	r18, 0x08	; 8
    42b4:	51 f1       	breq	.+84     	; 0x430a <__ultoa_invert+0x5c>
    42b6:	20 31       	cpi	r18, 0x10	; 16
    42b8:	81 f1       	breq	.+96     	; 0x431a <__ultoa_invert+0x6c>
    42ba:	e8 94       	clt
    42bc:	6f 93       	push	r22
    42be:	6e 7f       	andi	r22, 0xFE	; 254
    42c0:	6e 5f       	subi	r22, 0xFE	; 254
    42c2:	7f 4f       	sbci	r23, 0xFF	; 255
    42c4:	8f 4f       	sbci	r24, 0xFF	; 255
    42c6:	9f 4f       	sbci	r25, 0xFF	; 255
    42c8:	af 4f       	sbci	r26, 0xFF	; 255
    42ca:	b1 e0       	ldi	r27, 0x01	; 1
    42cc:	3e d0       	rcall	.+124    	; 0x434a <__ultoa_invert+0x9c>
    42ce:	b4 e0       	ldi	r27, 0x04	; 4
    42d0:	3c d0       	rcall	.+120    	; 0x434a <__ultoa_invert+0x9c>
    42d2:	67 0f       	add	r22, r23
    42d4:	78 1f       	adc	r23, r24
    42d6:	89 1f       	adc	r24, r25
    42d8:	9a 1f       	adc	r25, r26
    42da:	a1 1d       	adc	r26, r1
    42dc:	68 0f       	add	r22, r24
    42de:	79 1f       	adc	r23, r25
    42e0:	8a 1f       	adc	r24, r26
    42e2:	91 1d       	adc	r25, r1
    42e4:	a1 1d       	adc	r26, r1
    42e6:	6a 0f       	add	r22, r26
    42e8:	71 1d       	adc	r23, r1
    42ea:	81 1d       	adc	r24, r1
    42ec:	91 1d       	adc	r25, r1
    42ee:	a1 1d       	adc	r26, r1
    42f0:	20 d0       	rcall	.+64     	; 0x4332 <__ultoa_invert+0x84>
    42f2:	09 f4       	brne	.+2      	; 0x42f6 <__ultoa_invert+0x48>
    42f4:	68 94       	set
    42f6:	3f 91       	pop	r19
    42f8:	2a e0       	ldi	r18, 0x0A	; 10
    42fa:	26 9f       	mul	r18, r22
    42fc:	11 24       	eor	r1, r1
    42fe:	30 19       	sub	r19, r0
    4300:	30 5d       	subi	r19, 0xD0	; 208
    4302:	31 93       	st	Z+, r19
    4304:	de f6       	brtc	.-74     	; 0x42bc <__ultoa_invert+0xe>
    4306:	cf 01       	movw	r24, r30
    4308:	08 95       	ret
    430a:	46 2f       	mov	r20, r22
    430c:	47 70       	andi	r20, 0x07	; 7
    430e:	40 5d       	subi	r20, 0xD0	; 208
    4310:	41 93       	st	Z+, r20
    4312:	b3 e0       	ldi	r27, 0x03	; 3
    4314:	0f d0       	rcall	.+30     	; 0x4334 <__ultoa_invert+0x86>
    4316:	c9 f7       	brne	.-14     	; 0x430a <__ultoa_invert+0x5c>
    4318:	f6 cf       	rjmp	.-20     	; 0x4306 <__ultoa_invert+0x58>
    431a:	46 2f       	mov	r20, r22
    431c:	4f 70       	andi	r20, 0x0F	; 15
    431e:	40 5d       	subi	r20, 0xD0	; 208
    4320:	4a 33       	cpi	r20, 0x3A	; 58
    4322:	18 f0       	brcs	.+6      	; 0x432a <__ultoa_invert+0x7c>
    4324:	49 5d       	subi	r20, 0xD9	; 217
    4326:	31 fd       	sbrc	r19, 1
    4328:	40 52       	subi	r20, 0x20	; 32
    432a:	41 93       	st	Z+, r20
    432c:	02 d0       	rcall	.+4      	; 0x4332 <__ultoa_invert+0x84>
    432e:	a9 f7       	brne	.-22     	; 0x431a <__ultoa_invert+0x6c>
    4330:	ea cf       	rjmp	.-44     	; 0x4306 <__ultoa_invert+0x58>
    4332:	b4 e0       	ldi	r27, 0x04	; 4
    4334:	a6 95       	lsr	r26
    4336:	97 95       	ror	r25
    4338:	87 95       	ror	r24
    433a:	77 95       	ror	r23
    433c:	67 95       	ror	r22
    433e:	ba 95       	dec	r27
    4340:	c9 f7       	brne	.-14     	; 0x4334 <__ultoa_invert+0x86>
    4342:	00 97       	sbiw	r24, 0x00	; 0
    4344:	61 05       	cpc	r22, r1
    4346:	71 05       	cpc	r23, r1
    4348:	08 95       	ret
    434a:	9b 01       	movw	r18, r22
    434c:	ac 01       	movw	r20, r24
    434e:	0a 2e       	mov	r0, r26
    4350:	06 94       	lsr	r0
    4352:	57 95       	ror	r21
    4354:	47 95       	ror	r20
    4356:	37 95       	ror	r19
    4358:	27 95       	ror	r18
    435a:	ba 95       	dec	r27
    435c:	c9 f7       	brne	.-14     	; 0x4350 <__ultoa_invert+0xa2>
    435e:	62 0f       	add	r22, r18
    4360:	73 1f       	adc	r23, r19
    4362:	84 1f       	adc	r24, r20
    4364:	95 1f       	adc	r25, r21
    4366:	a0 1d       	adc	r26, r0
    4368:	08 95       	ret

0000436a <_exit>:
    436a:	f8 94       	cli

0000436c <__stop_program>:
    436c:	ff cf       	rjmp	.-2      	; 0x436c <__stop_program>
=======
	
	for(int i = 0; i < 3; ++i )
	{
		p->temperature_data[i] = 0;
    22de:	18 8a       	std	Y+16, r1	; 0x10
		p->humility_data[i] = 0;
    22e0:	1b 8a       	std	Y+19, r1	; 0x13
	}
	
	return p;
    22e2:	0f 90       	pop	r0
    22e4:	0f 90       	pop	r0
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	ce 01       	movw	r24, r28
    22ec:	df 91       	pop	r29
    22ee:	cf 91       	pop	r28
    22f0:	1f 91       	pop	r17
    22f2:	0f 91       	pop	r16
    22f4:	ff 90       	pop	r15
    22f6:	ef 90       	pop	r14
    22f8:	08 95       	ret

000022fa <__subsf3>:
    22fa:	50 58       	subi	r21, 0x80	; 128

000022fc <__addsf3>:
    22fc:	bb 27       	eor	r27, r27
    22fe:	aa 27       	eor	r26, r26
    2300:	0e d0       	rcall	.+28     	; 0x231e <__addsf3x>
    2302:	75 c1       	rjmp	.+746    	; 0x25ee <__fp_round>
    2304:	66 d1       	rcall	.+716    	; 0x25d2 <__fp_pscA>
    2306:	30 f0       	brcs	.+12     	; 0x2314 <__addsf3+0x18>
    2308:	6b d1       	rcall	.+726    	; 0x25e0 <__fp_pscB>
    230a:	20 f0       	brcs	.+8      	; 0x2314 <__addsf3+0x18>
    230c:	31 f4       	brne	.+12     	; 0x231a <__addsf3+0x1e>
    230e:	9f 3f       	cpi	r25, 0xFF	; 255
    2310:	11 f4       	brne	.+4      	; 0x2316 <__addsf3+0x1a>
    2312:	1e f4       	brtc	.+6      	; 0x231a <__addsf3+0x1e>
    2314:	5b c1       	rjmp	.+694    	; 0x25cc <__fp_nan>
    2316:	0e f4       	brtc	.+2      	; 0x231a <__addsf3+0x1e>
    2318:	e0 95       	com	r30
    231a:	e7 fb       	bst	r30, 7
    231c:	51 c1       	rjmp	.+674    	; 0x25c0 <__fp_inf>

0000231e <__addsf3x>:
    231e:	e9 2f       	mov	r30, r25
    2320:	77 d1       	rcall	.+750    	; 0x2610 <__fp_split3>
    2322:	80 f3       	brcs	.-32     	; 0x2304 <__addsf3+0x8>
    2324:	ba 17       	cp	r27, r26
    2326:	62 07       	cpc	r22, r18
    2328:	73 07       	cpc	r23, r19
    232a:	84 07       	cpc	r24, r20
    232c:	95 07       	cpc	r25, r21
    232e:	18 f0       	brcs	.+6      	; 0x2336 <__addsf3x+0x18>
    2330:	71 f4       	brne	.+28     	; 0x234e <__addsf3x+0x30>
    2332:	9e f5       	brtc	.+102    	; 0x239a <__addsf3x+0x7c>
    2334:	8f c1       	rjmp	.+798    	; 0x2654 <__fp_zero>
    2336:	0e f4       	brtc	.+2      	; 0x233a <__addsf3x+0x1c>
    2338:	e0 95       	com	r30
    233a:	0b 2e       	mov	r0, r27
    233c:	ba 2f       	mov	r27, r26
    233e:	a0 2d       	mov	r26, r0
    2340:	0b 01       	movw	r0, r22
    2342:	b9 01       	movw	r22, r18
    2344:	90 01       	movw	r18, r0
    2346:	0c 01       	movw	r0, r24
    2348:	ca 01       	movw	r24, r20
    234a:	a0 01       	movw	r20, r0
    234c:	11 24       	eor	r1, r1
    234e:	ff 27       	eor	r31, r31
    2350:	59 1b       	sub	r21, r25
    2352:	99 f0       	breq	.+38     	; 0x237a <__addsf3x+0x5c>
    2354:	59 3f       	cpi	r21, 0xF9	; 249
    2356:	50 f4       	brcc	.+20     	; 0x236c <__addsf3x+0x4e>
    2358:	50 3e       	cpi	r21, 0xE0	; 224
    235a:	68 f1       	brcs	.+90     	; 0x23b6 <__addsf3x+0x98>
    235c:	1a 16       	cp	r1, r26
    235e:	f0 40       	sbci	r31, 0x00	; 0
    2360:	a2 2f       	mov	r26, r18
    2362:	23 2f       	mov	r18, r19
    2364:	34 2f       	mov	r19, r20
    2366:	44 27       	eor	r20, r20
    2368:	58 5f       	subi	r21, 0xF8	; 248
    236a:	f3 cf       	rjmp	.-26     	; 0x2352 <__addsf3x+0x34>
    236c:	46 95       	lsr	r20
    236e:	37 95       	ror	r19
    2370:	27 95       	ror	r18
    2372:	a7 95       	ror	r26
    2374:	f0 40       	sbci	r31, 0x00	; 0
    2376:	53 95       	inc	r21
    2378:	c9 f7       	brne	.-14     	; 0x236c <__addsf3x+0x4e>
    237a:	7e f4       	brtc	.+30     	; 0x239a <__addsf3x+0x7c>
    237c:	1f 16       	cp	r1, r31
    237e:	ba 0b       	sbc	r27, r26
    2380:	62 0b       	sbc	r22, r18
    2382:	73 0b       	sbc	r23, r19
    2384:	84 0b       	sbc	r24, r20
    2386:	ba f0       	brmi	.+46     	; 0x23b6 <__addsf3x+0x98>
    2388:	91 50       	subi	r25, 0x01	; 1
    238a:	a1 f0       	breq	.+40     	; 0x23b4 <__addsf3x+0x96>
    238c:	ff 0f       	add	r31, r31
    238e:	bb 1f       	adc	r27, r27
    2390:	66 1f       	adc	r22, r22
    2392:	77 1f       	adc	r23, r23
    2394:	88 1f       	adc	r24, r24
    2396:	c2 f7       	brpl	.-16     	; 0x2388 <__addsf3x+0x6a>
    2398:	0e c0       	rjmp	.+28     	; 0x23b6 <__addsf3x+0x98>
    239a:	ba 0f       	add	r27, r26
    239c:	62 1f       	adc	r22, r18
    239e:	73 1f       	adc	r23, r19
    23a0:	84 1f       	adc	r24, r20
    23a2:	48 f4       	brcc	.+18     	; 0x23b6 <__addsf3x+0x98>
    23a4:	87 95       	ror	r24
    23a6:	77 95       	ror	r23
    23a8:	67 95       	ror	r22
    23aa:	b7 95       	ror	r27
    23ac:	f7 95       	ror	r31
    23ae:	9e 3f       	cpi	r25, 0xFE	; 254
    23b0:	08 f0       	brcs	.+2      	; 0x23b4 <__addsf3x+0x96>
    23b2:	b3 cf       	rjmp	.-154    	; 0x231a <__addsf3+0x1e>
    23b4:	93 95       	inc	r25
    23b6:	88 0f       	add	r24, r24
    23b8:	08 f0       	brcs	.+2      	; 0x23bc <__addsf3x+0x9e>
    23ba:	99 27       	eor	r25, r25
    23bc:	ee 0f       	add	r30, r30
    23be:	97 95       	ror	r25
    23c0:	87 95       	ror	r24
    23c2:	08 95       	ret

000023c4 <__cmpsf2>:
    23c4:	d9 d0       	rcall	.+434    	; 0x2578 <__fp_cmp>
    23c6:	08 f4       	brcc	.+2      	; 0x23ca <__cmpsf2+0x6>
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	08 95       	ret

000023cc <__divsf3>:
    23cc:	0c d0       	rcall	.+24     	; 0x23e6 <__divsf3x>
    23ce:	0f c1       	rjmp	.+542    	; 0x25ee <__fp_round>
    23d0:	07 d1       	rcall	.+526    	; 0x25e0 <__fp_pscB>
    23d2:	40 f0       	brcs	.+16     	; 0x23e4 <__divsf3+0x18>
    23d4:	fe d0       	rcall	.+508    	; 0x25d2 <__fp_pscA>
    23d6:	30 f0       	brcs	.+12     	; 0x23e4 <__divsf3+0x18>
    23d8:	21 f4       	brne	.+8      	; 0x23e2 <__divsf3+0x16>
    23da:	5f 3f       	cpi	r21, 0xFF	; 255
    23dc:	19 f0       	breq	.+6      	; 0x23e4 <__divsf3+0x18>
    23de:	f0 c0       	rjmp	.+480    	; 0x25c0 <__fp_inf>
    23e0:	51 11       	cpse	r21, r1
    23e2:	39 c1       	rjmp	.+626    	; 0x2656 <__fp_szero>
    23e4:	f3 c0       	rjmp	.+486    	; 0x25cc <__fp_nan>

000023e6 <__divsf3x>:
    23e6:	14 d1       	rcall	.+552    	; 0x2610 <__fp_split3>
    23e8:	98 f3       	brcs	.-26     	; 0x23d0 <__divsf3+0x4>

000023ea <__divsf3_pse>:
    23ea:	99 23       	and	r25, r25
    23ec:	c9 f3       	breq	.-14     	; 0x23e0 <__divsf3+0x14>
    23ee:	55 23       	and	r21, r21
    23f0:	b1 f3       	breq	.-20     	; 0x23de <__divsf3+0x12>
    23f2:	95 1b       	sub	r25, r21
    23f4:	55 0b       	sbc	r21, r21
    23f6:	bb 27       	eor	r27, r27
    23f8:	aa 27       	eor	r26, r26
    23fa:	62 17       	cp	r22, r18
    23fc:	73 07       	cpc	r23, r19
    23fe:	84 07       	cpc	r24, r20
    2400:	38 f0       	brcs	.+14     	; 0x2410 <__divsf3_pse+0x26>
    2402:	9f 5f       	subi	r25, 0xFF	; 255
    2404:	5f 4f       	sbci	r21, 0xFF	; 255
    2406:	22 0f       	add	r18, r18
    2408:	33 1f       	adc	r19, r19
    240a:	44 1f       	adc	r20, r20
    240c:	aa 1f       	adc	r26, r26
    240e:	a9 f3       	breq	.-22     	; 0x23fa <__divsf3_pse+0x10>
    2410:	33 d0       	rcall	.+102    	; 0x2478 <__divsf3_pse+0x8e>
    2412:	0e 2e       	mov	r0, r30
    2414:	3a f0       	brmi	.+14     	; 0x2424 <__divsf3_pse+0x3a>
    2416:	e0 e8       	ldi	r30, 0x80	; 128
    2418:	30 d0       	rcall	.+96     	; 0x247a <__divsf3_pse+0x90>
    241a:	91 50       	subi	r25, 0x01	; 1
    241c:	50 40       	sbci	r21, 0x00	; 0
    241e:	e6 95       	lsr	r30
    2420:	00 1c       	adc	r0, r0
    2422:	ca f7       	brpl	.-14     	; 0x2416 <__divsf3_pse+0x2c>
    2424:	29 d0       	rcall	.+82     	; 0x2478 <__divsf3_pse+0x8e>
    2426:	fe 2f       	mov	r31, r30
    2428:	27 d0       	rcall	.+78     	; 0x2478 <__divsf3_pse+0x8e>
    242a:	66 0f       	add	r22, r22
    242c:	77 1f       	adc	r23, r23
    242e:	88 1f       	adc	r24, r24
    2430:	bb 1f       	adc	r27, r27
    2432:	26 17       	cp	r18, r22
    2434:	37 07       	cpc	r19, r23
    2436:	48 07       	cpc	r20, r24
    2438:	ab 07       	cpc	r26, r27
    243a:	b0 e8       	ldi	r27, 0x80	; 128
    243c:	09 f0       	breq	.+2      	; 0x2440 <__divsf3_pse+0x56>
    243e:	bb 0b       	sbc	r27, r27
    2440:	80 2d       	mov	r24, r0
    2442:	bf 01       	movw	r22, r30
    2444:	ff 27       	eor	r31, r31
    2446:	93 58       	subi	r25, 0x83	; 131
    2448:	5f 4f       	sbci	r21, 0xFF	; 255
    244a:	2a f0       	brmi	.+10     	; 0x2456 <__divsf3_pse+0x6c>
    244c:	9e 3f       	cpi	r25, 0xFE	; 254
    244e:	51 05       	cpc	r21, r1
    2450:	68 f0       	brcs	.+26     	; 0x246c <__divsf3_pse+0x82>
    2452:	b6 c0       	rjmp	.+364    	; 0x25c0 <__fp_inf>
    2454:	00 c1       	rjmp	.+512    	; 0x2656 <__fp_szero>
    2456:	5f 3f       	cpi	r21, 0xFF	; 255
    2458:	ec f3       	brlt	.-6      	; 0x2454 <__divsf3_pse+0x6a>
    245a:	98 3e       	cpi	r25, 0xE8	; 232
    245c:	dc f3       	brlt	.-10     	; 0x2454 <__divsf3_pse+0x6a>
    245e:	86 95       	lsr	r24
    2460:	77 95       	ror	r23
    2462:	67 95       	ror	r22
    2464:	b7 95       	ror	r27
    2466:	f7 95       	ror	r31
    2468:	9f 5f       	subi	r25, 0xFF	; 255
    246a:	c9 f7       	brne	.-14     	; 0x245e <__divsf3_pse+0x74>
    246c:	88 0f       	add	r24, r24
    246e:	91 1d       	adc	r25, r1
    2470:	96 95       	lsr	r25
    2472:	87 95       	ror	r24
    2474:	97 f9       	bld	r25, 7
    2476:	08 95       	ret
    2478:	e1 e0       	ldi	r30, 0x01	; 1
    247a:	66 0f       	add	r22, r22
    247c:	77 1f       	adc	r23, r23
    247e:	88 1f       	adc	r24, r24
    2480:	bb 1f       	adc	r27, r27
    2482:	62 17       	cp	r22, r18
    2484:	73 07       	cpc	r23, r19
    2486:	84 07       	cpc	r24, r20
    2488:	ba 07       	cpc	r27, r26
    248a:	20 f0       	brcs	.+8      	; 0x2494 <__divsf3_pse+0xaa>
    248c:	62 1b       	sub	r22, r18
    248e:	73 0b       	sbc	r23, r19
    2490:	84 0b       	sbc	r24, r20
    2492:	ba 0b       	sbc	r27, r26
    2494:	ee 1f       	adc	r30, r30
    2496:	88 f7       	brcc	.-30     	; 0x247a <__divsf3_pse+0x90>
    2498:	e0 95       	com	r30
    249a:	08 95       	ret

0000249c <__fixsfsi>:
    249c:	04 d0       	rcall	.+8      	; 0x24a6 <__fixunssfsi>
    249e:	68 94       	set
    24a0:	b1 11       	cpse	r27, r1
    24a2:	d9 c0       	rjmp	.+434    	; 0x2656 <__fp_szero>
    24a4:	08 95       	ret

000024a6 <__fixunssfsi>:
    24a6:	bc d0       	rcall	.+376    	; 0x2620 <__fp_splitA>
    24a8:	88 f0       	brcs	.+34     	; 0x24cc <__fixunssfsi+0x26>
    24aa:	9f 57       	subi	r25, 0x7F	; 127
    24ac:	90 f0       	brcs	.+36     	; 0x24d2 <__fixunssfsi+0x2c>
    24ae:	b9 2f       	mov	r27, r25
    24b0:	99 27       	eor	r25, r25
    24b2:	b7 51       	subi	r27, 0x17	; 23
    24b4:	a0 f0       	brcs	.+40     	; 0x24de <__fixunssfsi+0x38>
    24b6:	d1 f0       	breq	.+52     	; 0x24ec <__fixunssfsi+0x46>
    24b8:	66 0f       	add	r22, r22
    24ba:	77 1f       	adc	r23, r23
    24bc:	88 1f       	adc	r24, r24
    24be:	99 1f       	adc	r25, r25
    24c0:	1a f0       	brmi	.+6      	; 0x24c8 <__fixunssfsi+0x22>
    24c2:	ba 95       	dec	r27
    24c4:	c9 f7       	brne	.-14     	; 0x24b8 <__fixunssfsi+0x12>
    24c6:	12 c0       	rjmp	.+36     	; 0x24ec <__fixunssfsi+0x46>
    24c8:	b1 30       	cpi	r27, 0x01	; 1
    24ca:	81 f0       	breq	.+32     	; 0x24ec <__fixunssfsi+0x46>
    24cc:	c3 d0       	rcall	.+390    	; 0x2654 <__fp_zero>
    24ce:	b1 e0       	ldi	r27, 0x01	; 1
    24d0:	08 95       	ret
    24d2:	c0 c0       	rjmp	.+384    	; 0x2654 <__fp_zero>
    24d4:	67 2f       	mov	r22, r23
    24d6:	78 2f       	mov	r23, r24
    24d8:	88 27       	eor	r24, r24
    24da:	b8 5f       	subi	r27, 0xF8	; 248
    24dc:	39 f0       	breq	.+14     	; 0x24ec <__fixunssfsi+0x46>
    24de:	b9 3f       	cpi	r27, 0xF9	; 249
    24e0:	cc f3       	brlt	.-14     	; 0x24d4 <__fixunssfsi+0x2e>
    24e2:	86 95       	lsr	r24
    24e4:	77 95       	ror	r23
    24e6:	67 95       	ror	r22
    24e8:	b3 95       	inc	r27
    24ea:	d9 f7       	brne	.-10     	; 0x24e2 <__fixunssfsi+0x3c>
    24ec:	3e f4       	brtc	.+14     	; 0x24fc <__fixunssfsi+0x56>
    24ee:	90 95       	com	r25
    24f0:	80 95       	com	r24
    24f2:	70 95       	com	r23
    24f4:	61 95       	neg	r22
    24f6:	7f 4f       	sbci	r23, 0xFF	; 255
    24f8:	8f 4f       	sbci	r24, 0xFF	; 255
    24fa:	9f 4f       	sbci	r25, 0xFF	; 255
    24fc:	08 95       	ret

000024fe <__floatunsisf>:
    24fe:	e8 94       	clt
    2500:	09 c0       	rjmp	.+18     	; 0x2514 <__floatsisf+0x12>

00002502 <__floatsisf>:
    2502:	97 fb       	bst	r25, 7
    2504:	3e f4       	brtc	.+14     	; 0x2514 <__floatsisf+0x12>
    2506:	90 95       	com	r25
    2508:	80 95       	com	r24
    250a:	70 95       	com	r23
    250c:	61 95       	neg	r22
    250e:	7f 4f       	sbci	r23, 0xFF	; 255
    2510:	8f 4f       	sbci	r24, 0xFF	; 255
    2512:	9f 4f       	sbci	r25, 0xFF	; 255
    2514:	99 23       	and	r25, r25
    2516:	a9 f0       	breq	.+42     	; 0x2542 <__floatsisf+0x40>
    2518:	f9 2f       	mov	r31, r25
    251a:	96 e9       	ldi	r25, 0x96	; 150
    251c:	bb 27       	eor	r27, r27
    251e:	93 95       	inc	r25
    2520:	f6 95       	lsr	r31
    2522:	87 95       	ror	r24
    2524:	77 95       	ror	r23
    2526:	67 95       	ror	r22
    2528:	b7 95       	ror	r27
    252a:	f1 11       	cpse	r31, r1
    252c:	f8 cf       	rjmp	.-16     	; 0x251e <__floatsisf+0x1c>
    252e:	fa f4       	brpl	.+62     	; 0x256e <__floatsisf+0x6c>
    2530:	bb 0f       	add	r27, r27
    2532:	11 f4       	brne	.+4      	; 0x2538 <__floatsisf+0x36>
    2534:	60 ff       	sbrs	r22, 0
    2536:	1b c0       	rjmp	.+54     	; 0x256e <__floatsisf+0x6c>
    2538:	6f 5f       	subi	r22, 0xFF	; 255
    253a:	7f 4f       	sbci	r23, 0xFF	; 255
    253c:	8f 4f       	sbci	r24, 0xFF	; 255
    253e:	9f 4f       	sbci	r25, 0xFF	; 255
    2540:	16 c0       	rjmp	.+44     	; 0x256e <__floatsisf+0x6c>
    2542:	88 23       	and	r24, r24
    2544:	11 f0       	breq	.+4      	; 0x254a <__floatsisf+0x48>
    2546:	96 e9       	ldi	r25, 0x96	; 150
    2548:	11 c0       	rjmp	.+34     	; 0x256c <__floatsisf+0x6a>
    254a:	77 23       	and	r23, r23
    254c:	21 f0       	breq	.+8      	; 0x2556 <__floatsisf+0x54>
    254e:	9e e8       	ldi	r25, 0x8E	; 142
    2550:	87 2f       	mov	r24, r23
    2552:	76 2f       	mov	r23, r22
    2554:	05 c0       	rjmp	.+10     	; 0x2560 <__floatsisf+0x5e>
    2556:	66 23       	and	r22, r22
    2558:	71 f0       	breq	.+28     	; 0x2576 <__floatsisf+0x74>
    255a:	96 e8       	ldi	r25, 0x86	; 134
    255c:	86 2f       	mov	r24, r22
    255e:	70 e0       	ldi	r23, 0x00	; 0
    2560:	60 e0       	ldi	r22, 0x00	; 0
    2562:	2a f0       	brmi	.+10     	; 0x256e <__floatsisf+0x6c>
    2564:	9a 95       	dec	r25
    2566:	66 0f       	add	r22, r22
    2568:	77 1f       	adc	r23, r23
    256a:	88 1f       	adc	r24, r24
    256c:	da f7       	brpl	.-10     	; 0x2564 <__floatsisf+0x62>
    256e:	88 0f       	add	r24, r24
    2570:	96 95       	lsr	r25
    2572:	87 95       	ror	r24
    2574:	97 f9       	bld	r25, 7
    2576:	08 95       	ret

00002578 <__fp_cmp>:
    2578:	99 0f       	add	r25, r25
    257a:	00 08       	sbc	r0, r0
    257c:	55 0f       	add	r21, r21
    257e:	aa 0b       	sbc	r26, r26
    2580:	e0 e8       	ldi	r30, 0x80	; 128
    2582:	fe ef       	ldi	r31, 0xFE	; 254
    2584:	16 16       	cp	r1, r22
    2586:	17 06       	cpc	r1, r23
    2588:	e8 07       	cpc	r30, r24
    258a:	f9 07       	cpc	r31, r25
    258c:	c0 f0       	brcs	.+48     	; 0x25be <__fp_cmp+0x46>
    258e:	12 16       	cp	r1, r18
    2590:	13 06       	cpc	r1, r19
    2592:	e4 07       	cpc	r30, r20
    2594:	f5 07       	cpc	r31, r21
    2596:	98 f0       	brcs	.+38     	; 0x25be <__fp_cmp+0x46>
    2598:	62 1b       	sub	r22, r18
    259a:	73 0b       	sbc	r23, r19
    259c:	84 0b       	sbc	r24, r20
    259e:	95 0b       	sbc	r25, r21
    25a0:	39 f4       	brne	.+14     	; 0x25b0 <__fp_cmp+0x38>
    25a2:	0a 26       	eor	r0, r26
    25a4:	61 f0       	breq	.+24     	; 0x25be <__fp_cmp+0x46>
    25a6:	23 2b       	or	r18, r19
    25a8:	24 2b       	or	r18, r20
    25aa:	25 2b       	or	r18, r21
    25ac:	21 f4       	brne	.+8      	; 0x25b6 <__fp_cmp+0x3e>
    25ae:	08 95       	ret
    25b0:	0a 26       	eor	r0, r26
    25b2:	09 f4       	brne	.+2      	; 0x25b6 <__fp_cmp+0x3e>
    25b4:	a1 40       	sbci	r26, 0x01	; 1
    25b6:	a6 95       	lsr	r26
    25b8:	8f ef       	ldi	r24, 0xFF	; 255
    25ba:	81 1d       	adc	r24, r1
    25bc:	81 1d       	adc	r24, r1
    25be:	08 95       	ret

000025c0 <__fp_inf>:
    25c0:	97 f9       	bld	r25, 7
    25c2:	9f 67       	ori	r25, 0x7F	; 127
    25c4:	80 e8       	ldi	r24, 0x80	; 128
    25c6:	70 e0       	ldi	r23, 0x00	; 0
    25c8:	60 e0       	ldi	r22, 0x00	; 0
    25ca:	08 95       	ret

000025cc <__fp_nan>:
    25cc:	9f ef       	ldi	r25, 0xFF	; 255
    25ce:	80 ec       	ldi	r24, 0xC0	; 192
    25d0:	08 95       	ret

000025d2 <__fp_pscA>:
    25d2:	00 24       	eor	r0, r0
    25d4:	0a 94       	dec	r0
    25d6:	16 16       	cp	r1, r22
    25d8:	17 06       	cpc	r1, r23
    25da:	18 06       	cpc	r1, r24
    25dc:	09 06       	cpc	r0, r25
    25de:	08 95       	ret

000025e0 <__fp_pscB>:
    25e0:	00 24       	eor	r0, r0
    25e2:	0a 94       	dec	r0
    25e4:	12 16       	cp	r1, r18
    25e6:	13 06       	cpc	r1, r19
    25e8:	14 06       	cpc	r1, r20
    25ea:	05 06       	cpc	r0, r21
    25ec:	08 95       	ret

000025ee <__fp_round>:
    25ee:	09 2e       	mov	r0, r25
    25f0:	03 94       	inc	r0
    25f2:	00 0c       	add	r0, r0
    25f4:	11 f4       	brne	.+4      	; 0x25fa <__fp_round+0xc>
    25f6:	88 23       	and	r24, r24
    25f8:	52 f0       	brmi	.+20     	; 0x260e <__fp_round+0x20>
    25fa:	bb 0f       	add	r27, r27
    25fc:	40 f4       	brcc	.+16     	; 0x260e <__fp_round+0x20>
    25fe:	bf 2b       	or	r27, r31
    2600:	11 f4       	brne	.+4      	; 0x2606 <__fp_round+0x18>
    2602:	60 ff       	sbrs	r22, 0
    2604:	04 c0       	rjmp	.+8      	; 0x260e <__fp_round+0x20>
    2606:	6f 5f       	subi	r22, 0xFF	; 255
    2608:	7f 4f       	sbci	r23, 0xFF	; 255
    260a:	8f 4f       	sbci	r24, 0xFF	; 255
    260c:	9f 4f       	sbci	r25, 0xFF	; 255
    260e:	08 95       	ret

00002610 <__fp_split3>:
    2610:	57 fd       	sbrc	r21, 7
    2612:	90 58       	subi	r25, 0x80	; 128
    2614:	44 0f       	add	r20, r20
    2616:	55 1f       	adc	r21, r21
    2618:	59 f0       	breq	.+22     	; 0x2630 <__fp_splitA+0x10>
    261a:	5f 3f       	cpi	r21, 0xFF	; 255
    261c:	71 f0       	breq	.+28     	; 0x263a <__fp_splitA+0x1a>
    261e:	47 95       	ror	r20

00002620 <__fp_splitA>:
    2620:	88 0f       	add	r24, r24
    2622:	97 fb       	bst	r25, 7
    2624:	99 1f       	adc	r25, r25
    2626:	61 f0       	breq	.+24     	; 0x2640 <__fp_splitA+0x20>
    2628:	9f 3f       	cpi	r25, 0xFF	; 255
    262a:	79 f0       	breq	.+30     	; 0x264a <__fp_splitA+0x2a>
    262c:	87 95       	ror	r24
    262e:	08 95       	ret
    2630:	12 16       	cp	r1, r18
    2632:	13 06       	cpc	r1, r19
    2634:	14 06       	cpc	r1, r20
    2636:	55 1f       	adc	r21, r21
    2638:	f2 cf       	rjmp	.-28     	; 0x261e <__fp_split3+0xe>
    263a:	46 95       	lsr	r20
    263c:	f1 df       	rcall	.-30     	; 0x2620 <__fp_splitA>
    263e:	08 c0       	rjmp	.+16     	; 0x2650 <__fp_splitA+0x30>
    2640:	16 16       	cp	r1, r22
    2642:	17 06       	cpc	r1, r23
    2644:	18 06       	cpc	r1, r24
    2646:	99 1f       	adc	r25, r25
    2648:	f1 cf       	rjmp	.-30     	; 0x262c <__fp_splitA+0xc>
    264a:	86 95       	lsr	r24
    264c:	71 05       	cpc	r23, r1
    264e:	61 05       	cpc	r22, r1
    2650:	08 94       	sec
    2652:	08 95       	ret

00002654 <__fp_zero>:
    2654:	e8 94       	clt

00002656 <__fp_szero>:
    2656:	bb 27       	eor	r27, r27
    2658:	66 27       	eor	r22, r22
    265a:	77 27       	eor	r23, r23
    265c:	cb 01       	movw	r24, r22
    265e:	97 f9       	bld	r25, 7
    2660:	08 95       	ret

00002662 <__gesf2>:
    2662:	8a df       	rcall	.-236    	; 0x2578 <__fp_cmp>
    2664:	08 f4       	brcc	.+2      	; 0x2668 <__gesf2+0x6>
    2666:	8f ef       	ldi	r24, 0xFF	; 255
    2668:	08 95       	ret

0000266a <__mulsf3>:
    266a:	0b d0       	rcall	.+22     	; 0x2682 <__mulsf3x>
    266c:	c0 cf       	rjmp	.-128    	; 0x25ee <__fp_round>
    266e:	b1 df       	rcall	.-158    	; 0x25d2 <__fp_pscA>
    2670:	28 f0       	brcs	.+10     	; 0x267c <__mulsf3+0x12>
    2672:	b6 df       	rcall	.-148    	; 0x25e0 <__fp_pscB>
    2674:	18 f0       	brcs	.+6      	; 0x267c <__mulsf3+0x12>
    2676:	95 23       	and	r25, r21
    2678:	09 f0       	breq	.+2      	; 0x267c <__mulsf3+0x12>
    267a:	a2 cf       	rjmp	.-188    	; 0x25c0 <__fp_inf>
    267c:	a7 cf       	rjmp	.-178    	; 0x25cc <__fp_nan>
    267e:	11 24       	eor	r1, r1
    2680:	ea cf       	rjmp	.-44     	; 0x2656 <__fp_szero>

00002682 <__mulsf3x>:
    2682:	c6 df       	rcall	.-116    	; 0x2610 <__fp_split3>
    2684:	a0 f3       	brcs	.-24     	; 0x266e <__mulsf3+0x4>

00002686 <__mulsf3_pse>:
    2686:	95 9f       	mul	r25, r21
    2688:	d1 f3       	breq	.-12     	; 0x267e <__mulsf3+0x14>
    268a:	95 0f       	add	r25, r21
    268c:	50 e0       	ldi	r21, 0x00	; 0
    268e:	55 1f       	adc	r21, r21
    2690:	62 9f       	mul	r22, r18
    2692:	f0 01       	movw	r30, r0
    2694:	72 9f       	mul	r23, r18
    2696:	bb 27       	eor	r27, r27
    2698:	f0 0d       	add	r31, r0
    269a:	b1 1d       	adc	r27, r1
    269c:	63 9f       	mul	r22, r19
    269e:	aa 27       	eor	r26, r26
    26a0:	f0 0d       	add	r31, r0
    26a2:	b1 1d       	adc	r27, r1
    26a4:	aa 1f       	adc	r26, r26
    26a6:	64 9f       	mul	r22, r20
    26a8:	66 27       	eor	r22, r22
    26aa:	b0 0d       	add	r27, r0
    26ac:	a1 1d       	adc	r26, r1
    26ae:	66 1f       	adc	r22, r22
    26b0:	82 9f       	mul	r24, r18
    26b2:	22 27       	eor	r18, r18
    26b4:	b0 0d       	add	r27, r0
    26b6:	a1 1d       	adc	r26, r1
    26b8:	62 1f       	adc	r22, r18
    26ba:	73 9f       	mul	r23, r19
    26bc:	b0 0d       	add	r27, r0
    26be:	a1 1d       	adc	r26, r1
    26c0:	62 1f       	adc	r22, r18
    26c2:	83 9f       	mul	r24, r19
    26c4:	a0 0d       	add	r26, r0
    26c6:	61 1d       	adc	r22, r1
    26c8:	22 1f       	adc	r18, r18
    26ca:	74 9f       	mul	r23, r20
    26cc:	33 27       	eor	r19, r19
    26ce:	a0 0d       	add	r26, r0
    26d0:	61 1d       	adc	r22, r1
    26d2:	23 1f       	adc	r18, r19
    26d4:	84 9f       	mul	r24, r20
    26d6:	60 0d       	add	r22, r0
    26d8:	21 1d       	adc	r18, r1
    26da:	82 2f       	mov	r24, r18
    26dc:	76 2f       	mov	r23, r22
    26de:	6a 2f       	mov	r22, r26
    26e0:	11 24       	eor	r1, r1
    26e2:	9f 57       	subi	r25, 0x7F	; 127
    26e4:	50 40       	sbci	r21, 0x00	; 0
    26e6:	8a f0       	brmi	.+34     	; 0x270a <__mulsf3_pse+0x84>
    26e8:	e1 f0       	breq	.+56     	; 0x2722 <__mulsf3_pse+0x9c>
    26ea:	88 23       	and	r24, r24
    26ec:	4a f0       	brmi	.+18     	; 0x2700 <__mulsf3_pse+0x7a>
    26ee:	ee 0f       	add	r30, r30
    26f0:	ff 1f       	adc	r31, r31
    26f2:	bb 1f       	adc	r27, r27
    26f4:	66 1f       	adc	r22, r22
    26f6:	77 1f       	adc	r23, r23
    26f8:	88 1f       	adc	r24, r24
    26fa:	91 50       	subi	r25, 0x01	; 1
    26fc:	50 40       	sbci	r21, 0x00	; 0
    26fe:	a9 f7       	brne	.-22     	; 0x26ea <__mulsf3_pse+0x64>
    2700:	9e 3f       	cpi	r25, 0xFE	; 254
    2702:	51 05       	cpc	r21, r1
    2704:	70 f0       	brcs	.+28     	; 0x2722 <__mulsf3_pse+0x9c>
    2706:	5c cf       	rjmp	.-328    	; 0x25c0 <__fp_inf>
    2708:	a6 cf       	rjmp	.-180    	; 0x2656 <__fp_szero>
    270a:	5f 3f       	cpi	r21, 0xFF	; 255
    270c:	ec f3       	brlt	.-6      	; 0x2708 <__mulsf3_pse+0x82>
    270e:	98 3e       	cpi	r25, 0xE8	; 232
    2710:	dc f3       	brlt	.-10     	; 0x2708 <__mulsf3_pse+0x82>
    2712:	86 95       	lsr	r24
    2714:	77 95       	ror	r23
    2716:	67 95       	ror	r22
    2718:	b7 95       	ror	r27
    271a:	f7 95       	ror	r31
    271c:	e7 95       	ror	r30
    271e:	9f 5f       	subi	r25, 0xFF	; 255
    2720:	c1 f7       	brne	.-16     	; 0x2712 <__mulsf3_pse+0x8c>
    2722:	fe 2b       	or	r31, r30
    2724:	88 0f       	add	r24, r24
    2726:	91 1d       	adc	r25, r1
    2728:	96 95       	lsr	r25
    272a:	87 95       	ror	r24
    272c:	97 f9       	bld	r25, 7
    272e:	08 95       	ret

00002730 <vfprintf>:
    2730:	a3 e1       	ldi	r26, 0x13	; 19
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	ee e9       	ldi	r30, 0x9E	; 158
    2736:	f3 e1       	ldi	r31, 0x13	; 19
    2738:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__prologue_saves__>
    273c:	7c 01       	movw	r14, r24
    273e:	1b 01       	movw	r2, r22
    2740:	6a 01       	movw	r12, r20
    2742:	fc 01       	movw	r30, r24
    2744:	17 82       	std	Z+7, r1	; 0x07
    2746:	16 82       	std	Z+6, r1	; 0x06
    2748:	83 81       	ldd	r24, Z+3	; 0x03
    274a:	81 ff       	sbrs	r24, 1
    274c:	66 c3       	rjmp	.+1740   	; 0x2e1a <vfprintf+0x6ea>
    274e:	be 01       	movw	r22, r28
    2750:	6f 5f       	subi	r22, 0xFF	; 255
    2752:	7f 4f       	sbci	r23, 0xFF	; 255
    2754:	4b 01       	movw	r8, r22
    2756:	f7 01       	movw	r30, r14
    2758:	93 81       	ldd	r25, Z+3	; 0x03
    275a:	f1 01       	movw	r30, r2
    275c:	93 fd       	sbrc	r25, 3
    275e:	85 91       	lpm	r24, Z+
    2760:	93 ff       	sbrs	r25, 3
    2762:	81 91       	ld	r24, Z+
    2764:	1f 01       	movw	r2, r30
    2766:	88 23       	and	r24, r24
    2768:	09 f4       	brne	.+2      	; 0x276c <vfprintf+0x3c>
    276a:	53 c3       	rjmp	.+1702   	; 0x2e12 <vfprintf+0x6e2>
    276c:	85 32       	cpi	r24, 0x25	; 37
    276e:	39 f4       	brne	.+14     	; 0x277e <vfprintf+0x4e>
    2770:	93 fd       	sbrc	r25, 3
    2772:	85 91       	lpm	r24, Z+
    2774:	93 ff       	sbrs	r25, 3
    2776:	81 91       	ld	r24, Z+
    2778:	1f 01       	movw	r2, r30
    277a:	85 32       	cpi	r24, 0x25	; 37
    277c:	39 f4       	brne	.+14     	; 0x278c <vfprintf+0x5c>
    277e:	b7 01       	movw	r22, r14
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2786:	56 01       	movw	r10, r12
    2788:	65 01       	movw	r12, r10
    278a:	e5 cf       	rjmp	.-54     	; 0x2756 <vfprintf+0x26>
    278c:	10 e0       	ldi	r17, 0x00	; 0
    278e:	51 2c       	mov	r5, r1
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	20 32       	cpi	r18, 0x20	; 32
    2794:	a0 f4       	brcc	.+40     	; 0x27be <vfprintf+0x8e>
    2796:	8b 32       	cpi	r24, 0x2B	; 43
    2798:	69 f0       	breq	.+26     	; 0x27b4 <vfprintf+0x84>
    279a:	30 f4       	brcc	.+12     	; 0x27a8 <vfprintf+0x78>
    279c:	80 32       	cpi	r24, 0x20	; 32
    279e:	59 f0       	breq	.+22     	; 0x27b6 <vfprintf+0x86>
    27a0:	83 32       	cpi	r24, 0x23	; 35
    27a2:	69 f4       	brne	.+26     	; 0x27be <vfprintf+0x8e>
    27a4:	20 61       	ori	r18, 0x10	; 16
    27a6:	2c c0       	rjmp	.+88     	; 0x2800 <vfprintf+0xd0>
    27a8:	8d 32       	cpi	r24, 0x2D	; 45
    27aa:	39 f0       	breq	.+14     	; 0x27ba <vfprintf+0x8a>
    27ac:	80 33       	cpi	r24, 0x30	; 48
    27ae:	39 f4       	brne	.+14     	; 0x27be <vfprintf+0x8e>
    27b0:	21 60       	ori	r18, 0x01	; 1
    27b2:	26 c0       	rjmp	.+76     	; 0x2800 <vfprintf+0xd0>
    27b4:	22 60       	ori	r18, 0x02	; 2
    27b6:	24 60       	ori	r18, 0x04	; 4
    27b8:	23 c0       	rjmp	.+70     	; 0x2800 <vfprintf+0xd0>
    27ba:	28 60       	ori	r18, 0x08	; 8
    27bc:	21 c0       	rjmp	.+66     	; 0x2800 <vfprintf+0xd0>
    27be:	27 fd       	sbrc	r18, 7
    27c0:	27 c0       	rjmp	.+78     	; 0x2810 <vfprintf+0xe0>
    27c2:	30 ed       	ldi	r19, 0xD0	; 208
    27c4:	38 0f       	add	r19, r24
    27c6:	3a 30       	cpi	r19, 0x0A	; 10
    27c8:	78 f4       	brcc	.+30     	; 0x27e8 <vfprintf+0xb8>
    27ca:	26 ff       	sbrs	r18, 6
    27cc:	06 c0       	rjmp	.+12     	; 0x27da <vfprintf+0xaa>
    27ce:	fa e0       	ldi	r31, 0x0A	; 10
    27d0:	1f 9f       	mul	r17, r31
    27d2:	30 0d       	add	r19, r0
    27d4:	11 24       	eor	r1, r1
    27d6:	13 2f       	mov	r17, r19
    27d8:	13 c0       	rjmp	.+38     	; 0x2800 <vfprintf+0xd0>
    27da:	6a e0       	ldi	r22, 0x0A	; 10
    27dc:	56 9e       	mul	r5, r22
    27de:	30 0d       	add	r19, r0
    27e0:	11 24       	eor	r1, r1
    27e2:	53 2e       	mov	r5, r19
    27e4:	20 62       	ori	r18, 0x20	; 32
    27e6:	0c c0       	rjmp	.+24     	; 0x2800 <vfprintf+0xd0>
    27e8:	8e 32       	cpi	r24, 0x2E	; 46
    27ea:	21 f4       	brne	.+8      	; 0x27f4 <vfprintf+0xc4>
    27ec:	26 fd       	sbrc	r18, 6
    27ee:	11 c3       	rjmp	.+1570   	; 0x2e12 <vfprintf+0x6e2>
    27f0:	20 64       	ori	r18, 0x40	; 64
    27f2:	06 c0       	rjmp	.+12     	; 0x2800 <vfprintf+0xd0>
    27f4:	8c 36       	cpi	r24, 0x6C	; 108
    27f6:	11 f4       	brne	.+4      	; 0x27fc <vfprintf+0xcc>
    27f8:	20 68       	ori	r18, 0x80	; 128
    27fa:	02 c0       	rjmp	.+4      	; 0x2800 <vfprintf+0xd0>
    27fc:	88 36       	cpi	r24, 0x68	; 104
    27fe:	41 f4       	brne	.+16     	; 0x2810 <vfprintf+0xe0>
    2800:	f1 01       	movw	r30, r2
    2802:	93 fd       	sbrc	r25, 3
    2804:	85 91       	lpm	r24, Z+
    2806:	93 ff       	sbrs	r25, 3
    2808:	81 91       	ld	r24, Z+
    280a:	1f 01       	movw	r2, r30
    280c:	81 11       	cpse	r24, r1
    280e:	c1 cf       	rjmp	.-126    	; 0x2792 <vfprintf+0x62>
    2810:	9b eb       	ldi	r25, 0xBB	; 187
    2812:	98 0f       	add	r25, r24
    2814:	93 30       	cpi	r25, 0x03	; 3
    2816:	18 f4       	brcc	.+6      	; 0x281e <vfprintf+0xee>
    2818:	20 61       	ori	r18, 0x10	; 16
    281a:	80 5e       	subi	r24, 0xE0	; 224
    281c:	06 c0       	rjmp	.+12     	; 0x282a <vfprintf+0xfa>
    281e:	9b e9       	ldi	r25, 0x9B	; 155
    2820:	98 0f       	add	r25, r24
    2822:	93 30       	cpi	r25, 0x03	; 3
    2824:	08 f0       	brcs	.+2      	; 0x2828 <vfprintf+0xf8>
    2826:	aa c1       	rjmp	.+852    	; 0x2b7c <vfprintf+0x44c>
    2828:	2f 7e       	andi	r18, 0xEF	; 239
    282a:	26 ff       	sbrs	r18, 6
    282c:	16 e0       	ldi	r17, 0x06	; 6
    282e:	2f 73       	andi	r18, 0x3F	; 63
    2830:	72 2e       	mov	r7, r18
    2832:	85 36       	cpi	r24, 0x65	; 101
    2834:	21 f4       	brne	.+8      	; 0x283e <vfprintf+0x10e>
    2836:	f2 2f       	mov	r31, r18
    2838:	f0 64       	ori	r31, 0x40	; 64
    283a:	7f 2e       	mov	r7, r31
    283c:	08 c0       	rjmp	.+16     	; 0x284e <vfprintf+0x11e>
    283e:	86 36       	cpi	r24, 0x66	; 102
    2840:	21 f4       	brne	.+8      	; 0x284a <vfprintf+0x11a>
    2842:	62 2f       	mov	r22, r18
    2844:	60 68       	ori	r22, 0x80	; 128
    2846:	76 2e       	mov	r7, r22
    2848:	02 c0       	rjmp	.+4      	; 0x284e <vfprintf+0x11e>
    284a:	11 11       	cpse	r17, r1
    284c:	11 50       	subi	r17, 0x01	; 1
    284e:	77 fe       	sbrs	r7, 7
    2850:	07 c0       	rjmp	.+14     	; 0x2860 <vfprintf+0x130>
    2852:	1c 33       	cpi	r17, 0x3C	; 60
    2854:	48 f4       	brcc	.+18     	; 0x2868 <vfprintf+0x138>
    2856:	44 24       	eor	r4, r4
    2858:	43 94       	inc	r4
    285a:	41 0e       	add	r4, r17
    285c:	27 e0       	ldi	r18, 0x07	; 7
    285e:	0b c0       	rjmp	.+22     	; 0x2876 <vfprintf+0x146>
    2860:	18 30       	cpi	r17, 0x08	; 8
    2862:	30 f4       	brcc	.+12     	; 0x2870 <vfprintf+0x140>
    2864:	21 2f       	mov	r18, r17
    2866:	06 c0       	rjmp	.+12     	; 0x2874 <vfprintf+0x144>
    2868:	27 e0       	ldi	r18, 0x07	; 7
    286a:	4c e3       	ldi	r20, 0x3C	; 60
    286c:	44 2e       	mov	r4, r20
    286e:	03 c0       	rjmp	.+6      	; 0x2876 <vfprintf+0x146>
    2870:	27 e0       	ldi	r18, 0x07	; 7
    2872:	17 e0       	ldi	r17, 0x07	; 7
    2874:	41 2c       	mov	r4, r1
    2876:	56 01       	movw	r10, r12
    2878:	74 e0       	ldi	r23, 0x04	; 4
    287a:	a7 0e       	add	r10, r23
    287c:	b1 1c       	adc	r11, r1
    287e:	f6 01       	movw	r30, r12
    2880:	60 81       	ld	r22, Z
    2882:	71 81       	ldd	r23, Z+1	; 0x01
    2884:	82 81       	ldd	r24, Z+2	; 0x02
    2886:	93 81       	ldd	r25, Z+3	; 0x03
    2888:	04 2d       	mov	r16, r4
    288a:	a4 01       	movw	r20, r8
    288c:	0e 94 93 18 	call	0x3126	; 0x3126 <__ftoa_engine>
    2890:	6c 01       	movw	r12, r24
    2892:	09 81       	ldd	r16, Y+1	; 0x01
    2894:	00 ff       	sbrs	r16, 0
    2896:	02 c0       	rjmp	.+4      	; 0x289c <vfprintf+0x16c>
    2898:	03 ff       	sbrs	r16, 3
    289a:	06 c0       	rjmp	.+12     	; 0x28a8 <vfprintf+0x178>
    289c:	71 fc       	sbrc	r7, 1
    289e:	07 c0       	rjmp	.+14     	; 0x28ae <vfprintf+0x17e>
    28a0:	72 fc       	sbrc	r7, 2
    28a2:	08 c0       	rjmp	.+16     	; 0x28b4 <vfprintf+0x184>
    28a4:	61 2c       	mov	r6, r1
    28a6:	08 c0       	rjmp	.+16     	; 0x28b8 <vfprintf+0x188>
    28a8:	3d e2       	ldi	r19, 0x2D	; 45
    28aa:	63 2e       	mov	r6, r19
    28ac:	05 c0       	rjmp	.+10     	; 0x28b8 <vfprintf+0x188>
    28ae:	2b e2       	ldi	r18, 0x2B	; 43
    28b0:	62 2e       	mov	r6, r18
    28b2:	02 c0       	rjmp	.+4      	; 0x28b8 <vfprintf+0x188>
    28b4:	90 e2       	ldi	r25, 0x20	; 32
    28b6:	69 2e       	mov	r6, r25
    28b8:	80 2f       	mov	r24, r16
    28ba:	8c 70       	andi	r24, 0x0C	; 12
    28bc:	99 f1       	breq	.+102    	; 0x2924 <vfprintf+0x1f4>
    28be:	66 20       	and	r6, r6
    28c0:	11 f0       	breq	.+4      	; 0x28c6 <vfprintf+0x196>
    28c2:	84 e0       	ldi	r24, 0x04	; 4
    28c4:	01 c0       	rjmp	.+2      	; 0x28c8 <vfprintf+0x198>
    28c6:	83 e0       	ldi	r24, 0x03	; 3
    28c8:	85 15       	cp	r24, r5
    28ca:	10 f0       	brcs	.+4      	; 0x28d0 <vfprintf+0x1a0>
    28cc:	51 2c       	mov	r5, r1
    28ce:	0b c0       	rjmp	.+22     	; 0x28e6 <vfprintf+0x1b6>
    28d0:	58 1a       	sub	r5, r24
    28d2:	73 fc       	sbrc	r7, 3
    28d4:	08 c0       	rjmp	.+16     	; 0x28e6 <vfprintf+0x1b6>
    28d6:	b7 01       	movw	r22, r14
    28d8:	80 e2       	ldi	r24, 0x20	; 32
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    28e0:	5a 94       	dec	r5
    28e2:	c9 f7       	brne	.-14     	; 0x28d6 <vfprintf+0x1a6>
    28e4:	f3 cf       	rjmp	.-26     	; 0x28cc <vfprintf+0x19c>
    28e6:	66 20       	and	r6, r6
    28e8:	29 f0       	breq	.+10     	; 0x28f4 <vfprintf+0x1c4>
    28ea:	b7 01       	movw	r22, r14
    28ec:	86 2d       	mov	r24, r6
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    28f4:	03 fd       	sbrc	r16, 3
    28f6:	03 c0       	rjmp	.+6      	; 0x28fe <vfprintf+0x1ce>
    28f8:	08 e3       	ldi	r16, 0x38	; 56
    28fa:	11 e0       	ldi	r17, 0x01	; 1
    28fc:	02 c0       	rjmp	.+4      	; 0x2902 <vfprintf+0x1d2>
    28fe:	04 e3       	ldi	r16, 0x34	; 52
    2900:	11 e0       	ldi	r17, 0x01	; 1
    2902:	f7 2d       	mov	r31, r7
    2904:	f0 71       	andi	r31, 0x10	; 16
    2906:	7f 2e       	mov	r7, r31
    2908:	f8 01       	movw	r30, r16
    290a:	84 91       	lpm	r24, Z
    290c:	88 23       	and	r24, r24
    290e:	09 f4       	brne	.+2      	; 0x2912 <vfprintf+0x1e2>
    2910:	76 c2       	rjmp	.+1260   	; 0x2dfe <vfprintf+0x6ce>
    2912:	71 10       	cpse	r7, r1
    2914:	80 52       	subi	r24, 0x20	; 32
    2916:	b7 01       	movw	r22, r14
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    291e:	0f 5f       	subi	r16, 0xFF	; 255
    2920:	1f 4f       	sbci	r17, 0xFF	; 255
    2922:	f2 cf       	rjmp	.-28     	; 0x2908 <vfprintf+0x1d8>
    2924:	77 fe       	sbrs	r7, 7
    2926:	0f c0       	rjmp	.+30     	; 0x2946 <vfprintf+0x216>
    2928:	4c 0c       	add	r4, r12
    292a:	04 ff       	sbrs	r16, 4
    292c:	04 c0       	rjmp	.+8      	; 0x2936 <vfprintf+0x206>
    292e:	8a 81       	ldd	r24, Y+2	; 0x02
    2930:	81 33       	cpi	r24, 0x31	; 49
    2932:	09 f4       	brne	.+2      	; 0x2936 <vfprintf+0x206>
    2934:	4a 94       	dec	r4
    2936:	14 14       	cp	r1, r4
    2938:	74 f5       	brge	.+92     	; 0x2996 <vfprintf+0x266>
    293a:	f8 e0       	ldi	r31, 0x08	; 8
    293c:	f4 15       	cp	r31, r4
    293e:	78 f5       	brcc	.+94     	; 0x299e <vfprintf+0x26e>
    2940:	88 e0       	ldi	r24, 0x08	; 8
    2942:	48 2e       	mov	r4, r24
    2944:	2c c0       	rjmp	.+88     	; 0x299e <vfprintf+0x26e>
    2946:	76 fc       	sbrc	r7, 6
    2948:	2a c0       	rjmp	.+84     	; 0x299e <vfprintf+0x26e>
    294a:	81 2f       	mov	r24, r17
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	8c 15       	cp	r24, r12
    2950:	9d 05       	cpc	r25, r13
    2952:	9c f0       	brlt	.+38     	; 0x297a <vfprintf+0x24a>
    2954:	6c ef       	ldi	r22, 0xFC	; 252
    2956:	c6 16       	cp	r12, r22
    2958:	6f ef       	ldi	r22, 0xFF	; 255
    295a:	d6 06       	cpc	r13, r22
    295c:	74 f0       	brlt	.+28     	; 0x297a <vfprintf+0x24a>
    295e:	77 2d       	mov	r23, r7
    2960:	70 68       	ori	r23, 0x80	; 128
    2962:	77 2e       	mov	r7, r23
    2964:	0a c0       	rjmp	.+20     	; 0x297a <vfprintf+0x24a>
    2966:	e2 e0       	ldi	r30, 0x02	; 2
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	ec 0f       	add	r30, r28
    296c:	fd 1f       	adc	r31, r29
    296e:	e1 0f       	add	r30, r17
    2970:	f1 1d       	adc	r31, r1
    2972:	80 81       	ld	r24, Z
    2974:	80 33       	cpi	r24, 0x30	; 48
    2976:	19 f4       	brne	.+6      	; 0x297e <vfprintf+0x24e>
    2978:	11 50       	subi	r17, 0x01	; 1
    297a:	11 11       	cpse	r17, r1
    297c:	f4 cf       	rjmp	.-24     	; 0x2966 <vfprintf+0x236>
    297e:	77 fe       	sbrs	r7, 7
    2980:	0e c0       	rjmp	.+28     	; 0x299e <vfprintf+0x26e>
    2982:	44 24       	eor	r4, r4
    2984:	43 94       	inc	r4
    2986:	41 0e       	add	r4, r17
    2988:	81 2f       	mov	r24, r17
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	c8 16       	cp	r12, r24
    298e:	d9 06       	cpc	r13, r25
    2990:	2c f4       	brge	.+10     	; 0x299c <vfprintf+0x26c>
    2992:	1c 19       	sub	r17, r12
    2994:	04 c0       	rjmp	.+8      	; 0x299e <vfprintf+0x26e>
    2996:	44 24       	eor	r4, r4
    2998:	43 94       	inc	r4
    299a:	01 c0       	rjmp	.+2      	; 0x299e <vfprintf+0x26e>
    299c:	10 e0       	ldi	r17, 0x00	; 0
    299e:	77 fe       	sbrs	r7, 7
    29a0:	07 c0       	rjmp	.+14     	; 0x29b0 <vfprintf+0x280>
    29a2:	1c 14       	cp	r1, r12
    29a4:	1d 04       	cpc	r1, r13
    29a6:	3c f4       	brge	.+14     	; 0x29b6 <vfprintf+0x286>
    29a8:	96 01       	movw	r18, r12
    29aa:	2f 5f       	subi	r18, 0xFF	; 255
    29ac:	3f 4f       	sbci	r19, 0xFF	; 255
    29ae:	05 c0       	rjmp	.+10     	; 0x29ba <vfprintf+0x28a>
    29b0:	25 e0       	ldi	r18, 0x05	; 5
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	02 c0       	rjmp	.+4      	; 0x29ba <vfprintf+0x28a>
    29b6:	21 e0       	ldi	r18, 0x01	; 1
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	66 20       	and	r6, r6
    29bc:	11 f0       	breq	.+4      	; 0x29c2 <vfprintf+0x292>
    29be:	2f 5f       	subi	r18, 0xFF	; 255
    29c0:	3f 4f       	sbci	r19, 0xFF	; 255
    29c2:	11 23       	and	r17, r17
    29c4:	31 f0       	breq	.+12     	; 0x29d2 <vfprintf+0x2a2>
    29c6:	41 2f       	mov	r20, r17
    29c8:	50 e0       	ldi	r21, 0x00	; 0
    29ca:	4f 5f       	subi	r20, 0xFF	; 255
    29cc:	5f 4f       	sbci	r21, 0xFF	; 255
    29ce:	24 0f       	add	r18, r20
    29d0:	35 1f       	adc	r19, r21
    29d2:	45 2d       	mov	r20, r5
    29d4:	50 e0       	ldi	r21, 0x00	; 0
    29d6:	24 17       	cp	r18, r20
    29d8:	35 07       	cpc	r19, r21
    29da:	14 f4       	brge	.+4      	; 0x29e0 <vfprintf+0x2b0>
    29dc:	52 1a       	sub	r5, r18
    29de:	01 c0       	rjmp	.+2      	; 0x29e2 <vfprintf+0x2b2>
    29e0:	51 2c       	mov	r5, r1
    29e2:	87 2d       	mov	r24, r7
    29e4:	89 70       	andi	r24, 0x09	; 9
    29e6:	49 f4       	brne	.+18     	; 0x29fa <vfprintf+0x2ca>
    29e8:	55 20       	and	r5, r5
    29ea:	39 f0       	breq	.+14     	; 0x29fa <vfprintf+0x2ca>
    29ec:	b7 01       	movw	r22, r14
    29ee:	80 e2       	ldi	r24, 0x20	; 32
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    29f6:	5a 94       	dec	r5
    29f8:	f7 cf       	rjmp	.-18     	; 0x29e8 <vfprintf+0x2b8>
    29fa:	66 20       	and	r6, r6
    29fc:	29 f0       	breq	.+10     	; 0x2a08 <vfprintf+0x2d8>
    29fe:	b7 01       	movw	r22, r14
    2a00:	86 2d       	mov	r24, r6
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2a08:	73 fc       	sbrc	r7, 3
    2a0a:	09 c0       	rjmp	.+18     	; 0x2a1e <vfprintf+0x2ee>
    2a0c:	55 20       	and	r5, r5
    2a0e:	39 f0       	breq	.+14     	; 0x2a1e <vfprintf+0x2ee>
    2a10:	b7 01       	movw	r22, r14
    2a12:	80 e3       	ldi	r24, 0x30	; 48
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2a1a:	5a 94       	dec	r5
    2a1c:	f7 cf       	rjmp	.-18     	; 0x2a0c <vfprintf+0x2dc>
    2a1e:	77 fe       	sbrs	r7, 7
    2a20:	5f c0       	rjmp	.+190    	; 0x2ae0 <vfprintf+0x3b0>
    2a22:	9c 2d       	mov	r25, r12
    2a24:	8d 2d       	mov	r24, r13
    2a26:	d7 fe       	sbrs	r13, 7
    2a28:	02 c0       	rjmp	.+4      	; 0x2a2e <vfprintf+0x2fe>
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	69 2e       	mov	r6, r25
    2a30:	78 2e       	mov	r7, r24
    2a32:	40 e0       	ldi	r20, 0x00	; 0
    2a34:	50 e0       	ldi	r21, 0x00	; 0
    2a36:	c6 01       	movw	r24, r12
    2a38:	84 19       	sub	r24, r4
    2a3a:	91 09       	sbc	r25, r1
    2a3c:	9d 87       	std	Y+13, r25	; 0x0d
    2a3e:	8c 87       	std	Y+12, r24	; 0x0c
    2a40:	96 01       	movw	r18, r12
    2a42:	26 19       	sub	r18, r6
    2a44:	37 09       	sbc	r19, r7
    2a46:	28 0d       	add	r18, r8
    2a48:	39 1d       	adc	r19, r9
    2a4a:	81 2f       	mov	r24, r17
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	ee 27       	eor	r30, r30
    2a50:	ff 27       	eor	r31, r31
    2a52:	e8 1b       	sub	r30, r24
    2a54:	f9 0b       	sbc	r31, r25
    2a56:	ff 87       	std	Y+15, r31	; 0x0f
    2a58:	ee 87       	std	Y+14, r30	; 0x0e
    2a5a:	ff ef       	ldi	r31, 0xFF	; 255
    2a5c:	6f 16       	cp	r6, r31
    2a5e:	7f 06       	cpc	r7, r31
    2a60:	69 f4       	brne	.+26     	; 0x2a7c <vfprintf+0x34c>
    2a62:	b7 01       	movw	r22, r14
    2a64:	8e e2       	ldi	r24, 0x2E	; 46
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	2b 8b       	std	Y+19, r18	; 0x13
    2a6a:	3a 8b       	std	Y+18, r19	; 0x12
    2a6c:	48 8b       	std	Y+16, r20	; 0x10
    2a6e:	59 8b       	std	Y+17, r21	; 0x11
    2a70:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2a74:	59 89       	ldd	r21, Y+17	; 0x11
    2a76:	48 89       	ldd	r20, Y+16	; 0x10
    2a78:	3a 89       	ldd	r19, Y+18	; 0x12
    2a7a:	2b 89       	ldd	r18, Y+19	; 0x13
    2a7c:	c6 14       	cp	r12, r6
    2a7e:	d7 04       	cpc	r13, r7
    2a80:	54 f0       	brlt	.+20     	; 0x2a96 <vfprintf+0x366>
    2a82:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a84:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a86:	66 15       	cp	r22, r6
    2a88:	77 05       	cpc	r23, r7
    2a8a:	2c f4       	brge	.+10     	; 0x2a96 <vfprintf+0x366>
    2a8c:	f9 01       	movw	r30, r18
    2a8e:	e4 0f       	add	r30, r20
    2a90:	f5 1f       	adc	r31, r21
    2a92:	81 81       	ldd	r24, Z+1	; 0x01
    2a94:	01 c0       	rjmp	.+2      	; 0x2a98 <vfprintf+0x368>
    2a96:	80 e3       	ldi	r24, 0x30	; 48
    2a98:	71 e0       	ldi	r23, 0x01	; 1
    2a9a:	67 1a       	sub	r6, r23
    2a9c:	71 08       	sbc	r7, r1
    2a9e:	4f 5f       	subi	r20, 0xFF	; 255
    2aa0:	5f 4f       	sbci	r21, 0xFF	; 255
    2aa2:	ee 85       	ldd	r30, Y+14	; 0x0e
    2aa4:	ff 85       	ldd	r31, Y+15	; 0x0f
    2aa6:	6e 16       	cp	r6, r30
    2aa8:	7f 06       	cpc	r7, r31
    2aaa:	6c f0       	brlt	.+26     	; 0x2ac6 <vfprintf+0x396>
    2aac:	b7 01       	movw	r22, r14
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	2b 8b       	std	Y+19, r18	; 0x13
    2ab2:	3a 8b       	std	Y+18, r19	; 0x12
    2ab4:	48 8b       	std	Y+16, r20	; 0x10
    2ab6:	59 8b       	std	Y+17, r21	; 0x11
    2ab8:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2abc:	2b 89       	ldd	r18, Y+19	; 0x13
    2abe:	3a 89       	ldd	r19, Y+18	; 0x12
    2ac0:	48 89       	ldd	r20, Y+16	; 0x10
    2ac2:	59 89       	ldd	r21, Y+17	; 0x11
    2ac4:	ca cf       	rjmp	.-108    	; 0x2a5a <vfprintf+0x32a>
    2ac6:	6c 14       	cp	r6, r12
    2ac8:	7d 04       	cpc	r7, r13
    2aca:	39 f4       	brne	.+14     	; 0x2ada <vfprintf+0x3aa>
    2acc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ace:	96 33       	cpi	r25, 0x36	; 54
    2ad0:	18 f4       	brcc	.+6      	; 0x2ad8 <vfprintf+0x3a8>
    2ad2:	95 33       	cpi	r25, 0x35	; 53
    2ad4:	11 f4       	brne	.+4      	; 0x2ada <vfprintf+0x3aa>
    2ad6:	04 ff       	sbrs	r16, 4
    2ad8:	81 e3       	ldi	r24, 0x31	; 49
    2ada:	b7 01       	movw	r22, r14
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	4b c0       	rjmp	.+150    	; 0x2b76 <vfprintf+0x446>
    2ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae2:	81 33       	cpi	r24, 0x31	; 49
    2ae4:	09 f0       	breq	.+2      	; 0x2ae8 <vfprintf+0x3b8>
    2ae6:	0f 7e       	andi	r16, 0xEF	; 239
    2ae8:	b7 01       	movw	r22, r14
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2af0:	11 11       	cpse	r17, r1
    2af2:	05 c0       	rjmp	.+10     	; 0x2afe <vfprintf+0x3ce>
    2af4:	74 fe       	sbrs	r7, 4
    2af6:	18 c0       	rjmp	.+48     	; 0x2b28 <vfprintf+0x3f8>
    2af8:	85 e4       	ldi	r24, 0x45	; 69
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	17 c0       	rjmp	.+46     	; 0x2b2c <vfprintf+0x3fc>
    2afe:	b7 01       	movw	r22, r14
    2b00:	8e e2       	ldi	r24, 0x2E	; 46
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2b08:	82 e0       	ldi	r24, 0x02	; 2
    2b0a:	66 24       	eor	r6, r6
    2b0c:	63 94       	inc	r6
    2b0e:	68 0e       	add	r6, r24
    2b10:	f4 01       	movw	r30, r8
    2b12:	e8 0f       	add	r30, r24
    2b14:	f1 1d       	adc	r31, r1
    2b16:	80 81       	ld	r24, Z
    2b18:	b7 01       	movw	r22, r14
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2b20:	11 50       	subi	r17, 0x01	; 1
    2b22:	41 f3       	breq	.-48     	; 0x2af4 <vfprintf+0x3c4>
    2b24:	86 2d       	mov	r24, r6
    2b26:	f1 cf       	rjmp	.-30     	; 0x2b0a <vfprintf+0x3da>
    2b28:	85 e6       	ldi	r24, 0x65	; 101
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	b7 01       	movw	r22, r14
    2b2e:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2b32:	d7 fc       	sbrc	r13, 7
    2b34:	05 c0       	rjmp	.+10     	; 0x2b40 <vfprintf+0x410>
    2b36:	c1 14       	cp	r12, r1
    2b38:	d1 04       	cpc	r13, r1
    2b3a:	39 f4       	brne	.+14     	; 0x2b4a <vfprintf+0x41a>
    2b3c:	04 ff       	sbrs	r16, 4
    2b3e:	05 c0       	rjmp	.+10     	; 0x2b4a <vfprintf+0x41a>
    2b40:	d1 94       	neg	r13
    2b42:	c1 94       	neg	r12
    2b44:	d1 08       	sbc	r13, r1
    2b46:	8d e2       	ldi	r24, 0x2D	; 45
    2b48:	01 c0       	rjmp	.+2      	; 0x2b4c <vfprintf+0x41c>
    2b4a:	8b e2       	ldi	r24, 0x2B	; 43
    2b4c:	b7 01       	movw	r22, r14
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2b54:	80 e3       	ldi	r24, 0x30	; 48
    2b56:	6a e0       	ldi	r22, 0x0A	; 10
    2b58:	c6 16       	cp	r12, r22
    2b5a:	d1 04       	cpc	r13, r1
    2b5c:	2c f0       	brlt	.+10     	; 0x2b68 <vfprintf+0x438>
    2b5e:	8f 5f       	subi	r24, 0xFF	; 255
    2b60:	fa e0       	ldi	r31, 0x0A	; 10
    2b62:	cf 1a       	sub	r12, r31
    2b64:	d1 08       	sbc	r13, r1
    2b66:	f7 cf       	rjmp	.-18     	; 0x2b56 <vfprintf+0x426>
    2b68:	b7 01       	movw	r22, r14
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2b70:	b7 01       	movw	r22, r14
    2b72:	c6 01       	movw	r24, r12
    2b74:	c0 96       	adiw	r24, 0x30	; 48
    2b76:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2b7a:	41 c1       	rjmp	.+642    	; 0x2dfe <vfprintf+0x6ce>
    2b7c:	83 36       	cpi	r24, 0x63	; 99
    2b7e:	31 f0       	breq	.+12     	; 0x2b8c <vfprintf+0x45c>
    2b80:	83 37       	cpi	r24, 0x73	; 115
    2b82:	79 f0       	breq	.+30     	; 0x2ba2 <vfprintf+0x472>
    2b84:	83 35       	cpi	r24, 0x53	; 83
    2b86:	09 f0       	breq	.+2      	; 0x2b8a <vfprintf+0x45a>
    2b88:	58 c0       	rjmp	.+176    	; 0x2c3a <vfprintf+0x50a>
    2b8a:	21 c0       	rjmp	.+66     	; 0x2bce <vfprintf+0x49e>
    2b8c:	56 01       	movw	r10, r12
    2b8e:	72 e0       	ldi	r23, 0x02	; 2
    2b90:	a7 0e       	add	r10, r23
    2b92:	b1 1c       	adc	r11, r1
    2b94:	f6 01       	movw	r30, r12
    2b96:	80 81       	ld	r24, Z
    2b98:	89 83       	std	Y+1, r24	; 0x01
    2b9a:	01 e0       	ldi	r16, 0x01	; 1
    2b9c:	10 e0       	ldi	r17, 0x00	; 0
    2b9e:	64 01       	movw	r12, r8
    2ba0:	14 c0       	rjmp	.+40     	; 0x2bca <vfprintf+0x49a>
    2ba2:	56 01       	movw	r10, r12
    2ba4:	f2 e0       	ldi	r31, 0x02	; 2
    2ba6:	af 0e       	add	r10, r31
    2ba8:	b1 1c       	adc	r11, r1
    2baa:	f6 01       	movw	r30, r12
    2bac:	c0 80       	ld	r12, Z
    2bae:	d1 80       	ldd	r13, Z+1	; 0x01
    2bb0:	26 ff       	sbrs	r18, 6
    2bb2:	03 c0       	rjmp	.+6      	; 0x2bba <vfprintf+0x48a>
    2bb4:	61 2f       	mov	r22, r17
    2bb6:	70 e0       	ldi	r23, 0x00	; 0
    2bb8:	02 c0       	rjmp	.+4      	; 0x2bbe <vfprintf+0x48e>
    2bba:	6f ef       	ldi	r22, 0xFF	; 255
    2bbc:	7f ef       	ldi	r23, 0xFF	; 255
    2bbe:	c6 01       	movw	r24, r12
    2bc0:	2b 8b       	std	Y+19, r18	; 0x13
    2bc2:	0e 94 76 19 	call	0x32ec	; 0x32ec <strnlen>
    2bc6:	8c 01       	movw	r16, r24
    2bc8:	2b 89       	ldd	r18, Y+19	; 0x13
    2bca:	2f 77       	andi	r18, 0x7F	; 127
    2bcc:	15 c0       	rjmp	.+42     	; 0x2bf8 <vfprintf+0x4c8>
    2bce:	56 01       	movw	r10, r12
    2bd0:	f2 e0       	ldi	r31, 0x02	; 2
    2bd2:	af 0e       	add	r10, r31
    2bd4:	b1 1c       	adc	r11, r1
    2bd6:	f6 01       	movw	r30, r12
    2bd8:	c0 80       	ld	r12, Z
    2bda:	d1 80       	ldd	r13, Z+1	; 0x01
    2bdc:	26 ff       	sbrs	r18, 6
    2bde:	03 c0       	rjmp	.+6      	; 0x2be6 <vfprintf+0x4b6>
    2be0:	61 2f       	mov	r22, r17
    2be2:	70 e0       	ldi	r23, 0x00	; 0
    2be4:	02 c0       	rjmp	.+4      	; 0x2bea <vfprintf+0x4ba>
    2be6:	6f ef       	ldi	r22, 0xFF	; 255
    2be8:	7f ef       	ldi	r23, 0xFF	; 255
    2bea:	c6 01       	movw	r24, r12
    2bec:	2b 8b       	std	Y+19, r18	; 0x13
    2bee:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <strnlen_P>
    2bf2:	8c 01       	movw	r16, r24
    2bf4:	2b 89       	ldd	r18, Y+19	; 0x13
    2bf6:	20 68       	ori	r18, 0x80	; 128
    2bf8:	72 2e       	mov	r7, r18
    2bfa:	23 fd       	sbrc	r18, 3
    2bfc:	1a c0       	rjmp	.+52     	; 0x2c32 <vfprintf+0x502>
    2bfe:	85 2d       	mov	r24, r5
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	08 17       	cp	r16, r24
    2c04:	19 07       	cpc	r17, r25
    2c06:	a8 f4       	brcc	.+42     	; 0x2c32 <vfprintf+0x502>
    2c08:	b7 01       	movw	r22, r14
    2c0a:	80 e2       	ldi	r24, 0x20	; 32
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2c12:	5a 94       	dec	r5
    2c14:	f4 cf       	rjmp	.-24     	; 0x2bfe <vfprintf+0x4ce>
    2c16:	f6 01       	movw	r30, r12
    2c18:	77 fc       	sbrc	r7, 7
    2c1a:	85 91       	lpm	r24, Z+
    2c1c:	77 fe       	sbrs	r7, 7
    2c1e:	81 91       	ld	r24, Z+
    2c20:	6f 01       	movw	r12, r30
    2c22:	b7 01       	movw	r22, r14
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2c2a:	51 10       	cpse	r5, r1
    2c2c:	5a 94       	dec	r5
    2c2e:	01 50       	subi	r16, 0x01	; 1
    2c30:	11 09       	sbc	r17, r1
    2c32:	01 15       	cp	r16, r1
    2c34:	11 05       	cpc	r17, r1
    2c36:	79 f7       	brne	.-34     	; 0x2c16 <vfprintf+0x4e6>
    2c38:	e2 c0       	rjmp	.+452    	; 0x2dfe <vfprintf+0x6ce>
    2c3a:	84 36       	cpi	r24, 0x64	; 100
    2c3c:	11 f0       	breq	.+4      	; 0x2c42 <vfprintf+0x512>
    2c3e:	89 36       	cpi	r24, 0x69	; 105
    2c40:	51 f5       	brne	.+84     	; 0x2c96 <vfprintf+0x566>
    2c42:	56 01       	movw	r10, r12
    2c44:	27 ff       	sbrs	r18, 7
    2c46:	09 c0       	rjmp	.+18     	; 0x2c5a <vfprintf+0x52a>
    2c48:	f4 e0       	ldi	r31, 0x04	; 4
    2c4a:	af 0e       	add	r10, r31
    2c4c:	b1 1c       	adc	r11, r1
    2c4e:	f6 01       	movw	r30, r12
    2c50:	60 81       	ld	r22, Z
    2c52:	71 81       	ldd	r23, Z+1	; 0x01
    2c54:	82 81       	ldd	r24, Z+2	; 0x02
    2c56:	93 81       	ldd	r25, Z+3	; 0x03
    2c58:	0a c0       	rjmp	.+20     	; 0x2c6e <vfprintf+0x53e>
    2c5a:	f2 e0       	ldi	r31, 0x02	; 2
    2c5c:	af 0e       	add	r10, r31
    2c5e:	b1 1c       	adc	r11, r1
    2c60:	f6 01       	movw	r30, r12
    2c62:	60 81       	ld	r22, Z
    2c64:	71 81       	ldd	r23, Z+1	; 0x01
    2c66:	88 27       	eor	r24, r24
    2c68:	77 fd       	sbrc	r23, 7
    2c6a:	80 95       	com	r24
    2c6c:	98 2f       	mov	r25, r24
    2c6e:	02 2f       	mov	r16, r18
    2c70:	0f 76       	andi	r16, 0x6F	; 111
    2c72:	97 ff       	sbrs	r25, 7
    2c74:	08 c0       	rjmp	.+16     	; 0x2c86 <vfprintf+0x556>
    2c76:	90 95       	com	r25
    2c78:	80 95       	com	r24
    2c7a:	70 95       	com	r23
    2c7c:	61 95       	neg	r22
    2c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c80:	8f 4f       	sbci	r24, 0xFF	; 255
    2c82:	9f 4f       	sbci	r25, 0xFF	; 255
    2c84:	00 68       	ori	r16, 0x80	; 128
    2c86:	2a e0       	ldi	r18, 0x0A	; 10
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	a4 01       	movw	r20, r8
    2c8c:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__ultoa_invert>
    2c90:	c8 2e       	mov	r12, r24
    2c92:	c8 18       	sub	r12, r8
    2c94:	3e c0       	rjmp	.+124    	; 0x2d12 <vfprintf+0x5e2>
    2c96:	02 2f       	mov	r16, r18
    2c98:	85 37       	cpi	r24, 0x75	; 117
    2c9a:	21 f4       	brne	.+8      	; 0x2ca4 <vfprintf+0x574>
    2c9c:	0f 7e       	andi	r16, 0xEF	; 239
    2c9e:	2a e0       	ldi	r18, 0x0A	; 10
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	1d c0       	rjmp	.+58     	; 0x2cde <vfprintf+0x5ae>
    2ca4:	09 7f       	andi	r16, 0xF9	; 249
    2ca6:	8f 36       	cpi	r24, 0x6F	; 111
    2ca8:	91 f0       	breq	.+36     	; 0x2cce <vfprintf+0x59e>
    2caa:	18 f4       	brcc	.+6      	; 0x2cb2 <vfprintf+0x582>
    2cac:	88 35       	cpi	r24, 0x58	; 88
    2cae:	59 f0       	breq	.+22     	; 0x2cc6 <vfprintf+0x596>
    2cb0:	b0 c0       	rjmp	.+352    	; 0x2e12 <vfprintf+0x6e2>
    2cb2:	80 37       	cpi	r24, 0x70	; 112
    2cb4:	19 f0       	breq	.+6      	; 0x2cbc <vfprintf+0x58c>
    2cb6:	88 37       	cpi	r24, 0x78	; 120
    2cb8:	11 f0       	breq	.+4      	; 0x2cbe <vfprintf+0x58e>
    2cba:	ab c0       	rjmp	.+342    	; 0x2e12 <vfprintf+0x6e2>
    2cbc:	00 61       	ori	r16, 0x10	; 16
    2cbe:	04 ff       	sbrs	r16, 4
    2cc0:	09 c0       	rjmp	.+18     	; 0x2cd4 <vfprintf+0x5a4>
    2cc2:	04 60       	ori	r16, 0x04	; 4
    2cc4:	07 c0       	rjmp	.+14     	; 0x2cd4 <vfprintf+0x5a4>
    2cc6:	24 ff       	sbrs	r18, 4
    2cc8:	08 c0       	rjmp	.+16     	; 0x2cda <vfprintf+0x5aa>
    2cca:	06 60       	ori	r16, 0x06	; 6
    2ccc:	06 c0       	rjmp	.+12     	; 0x2cda <vfprintf+0x5aa>
    2cce:	28 e0       	ldi	r18, 0x08	; 8
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	05 c0       	rjmp	.+10     	; 0x2cde <vfprintf+0x5ae>
    2cd4:	20 e1       	ldi	r18, 0x10	; 16
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	02 c0       	rjmp	.+4      	; 0x2cde <vfprintf+0x5ae>
    2cda:	20 e1       	ldi	r18, 0x10	; 16
    2cdc:	32 e0       	ldi	r19, 0x02	; 2
    2cde:	56 01       	movw	r10, r12
    2ce0:	07 ff       	sbrs	r16, 7
    2ce2:	09 c0       	rjmp	.+18     	; 0x2cf6 <vfprintf+0x5c6>
    2ce4:	f4 e0       	ldi	r31, 0x04	; 4
    2ce6:	af 0e       	add	r10, r31
    2ce8:	b1 1c       	adc	r11, r1
    2cea:	f6 01       	movw	r30, r12
    2cec:	60 81       	ld	r22, Z
    2cee:	71 81       	ldd	r23, Z+1	; 0x01
    2cf0:	82 81       	ldd	r24, Z+2	; 0x02
    2cf2:	93 81       	ldd	r25, Z+3	; 0x03
    2cf4:	08 c0       	rjmp	.+16     	; 0x2d06 <vfprintf+0x5d6>
    2cf6:	f2 e0       	ldi	r31, 0x02	; 2
    2cf8:	af 0e       	add	r10, r31
    2cfa:	b1 1c       	adc	r11, r1
    2cfc:	f6 01       	movw	r30, r12
    2cfe:	60 81       	ld	r22, Z
    2d00:	71 81       	ldd	r23, Z+1	; 0x01
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	a4 01       	movw	r20, r8
    2d08:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__ultoa_invert>
    2d0c:	c8 2e       	mov	r12, r24
    2d0e:	c8 18       	sub	r12, r8
    2d10:	0f 77       	andi	r16, 0x7F	; 127
    2d12:	06 ff       	sbrs	r16, 6
    2d14:	0b c0       	rjmp	.+22     	; 0x2d2c <vfprintf+0x5fc>
    2d16:	20 2f       	mov	r18, r16
    2d18:	2e 7f       	andi	r18, 0xFE	; 254
    2d1a:	c1 16       	cp	r12, r17
    2d1c:	50 f4       	brcc	.+20     	; 0x2d32 <vfprintf+0x602>
    2d1e:	04 ff       	sbrs	r16, 4
    2d20:	0a c0       	rjmp	.+20     	; 0x2d36 <vfprintf+0x606>
    2d22:	02 fd       	sbrc	r16, 2
    2d24:	08 c0       	rjmp	.+16     	; 0x2d36 <vfprintf+0x606>
    2d26:	20 2f       	mov	r18, r16
    2d28:	2e 7e       	andi	r18, 0xEE	; 238
    2d2a:	05 c0       	rjmp	.+10     	; 0x2d36 <vfprintf+0x606>
    2d2c:	dc 2c       	mov	r13, r12
    2d2e:	20 2f       	mov	r18, r16
    2d30:	03 c0       	rjmp	.+6      	; 0x2d38 <vfprintf+0x608>
    2d32:	dc 2c       	mov	r13, r12
    2d34:	01 c0       	rjmp	.+2      	; 0x2d38 <vfprintf+0x608>
    2d36:	d1 2e       	mov	r13, r17
    2d38:	24 ff       	sbrs	r18, 4
    2d3a:	0d c0       	rjmp	.+26     	; 0x2d56 <vfprintf+0x626>
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	ec 0d       	add	r30, r12
    2d40:	f1 1d       	adc	r31, r1
    2d42:	80 81       	ld	r24, Z
    2d44:	80 33       	cpi	r24, 0x30	; 48
    2d46:	11 f4       	brne	.+4      	; 0x2d4c <vfprintf+0x61c>
    2d48:	29 7e       	andi	r18, 0xE9	; 233
    2d4a:	09 c0       	rjmp	.+18     	; 0x2d5e <vfprintf+0x62e>
    2d4c:	22 ff       	sbrs	r18, 2
    2d4e:	06 c0       	rjmp	.+12     	; 0x2d5c <vfprintf+0x62c>
    2d50:	d3 94       	inc	r13
    2d52:	d3 94       	inc	r13
    2d54:	04 c0       	rjmp	.+8      	; 0x2d5e <vfprintf+0x62e>
    2d56:	82 2f       	mov	r24, r18
    2d58:	86 78       	andi	r24, 0x86	; 134
    2d5a:	09 f0       	breq	.+2      	; 0x2d5e <vfprintf+0x62e>
    2d5c:	d3 94       	inc	r13
    2d5e:	23 fd       	sbrc	r18, 3
    2d60:	13 c0       	rjmp	.+38     	; 0x2d88 <vfprintf+0x658>
    2d62:	20 ff       	sbrs	r18, 0
    2d64:	06 c0       	rjmp	.+12     	; 0x2d72 <vfprintf+0x642>
    2d66:	1c 2d       	mov	r17, r12
    2d68:	d5 14       	cp	r13, r5
    2d6a:	18 f4       	brcc	.+6      	; 0x2d72 <vfprintf+0x642>
    2d6c:	15 0d       	add	r17, r5
    2d6e:	1d 19       	sub	r17, r13
    2d70:	d5 2c       	mov	r13, r5
    2d72:	d5 14       	cp	r13, r5
    2d74:	68 f4       	brcc	.+26     	; 0x2d90 <vfprintf+0x660>
    2d76:	b7 01       	movw	r22, r14
    2d78:	80 e2       	ldi	r24, 0x20	; 32
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	2b 8b       	std	Y+19, r18	; 0x13
    2d7e:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2d82:	d3 94       	inc	r13
    2d84:	2b 89       	ldd	r18, Y+19	; 0x13
    2d86:	f5 cf       	rjmp	.-22     	; 0x2d72 <vfprintf+0x642>
    2d88:	d5 14       	cp	r13, r5
    2d8a:	10 f4       	brcc	.+4      	; 0x2d90 <vfprintf+0x660>
    2d8c:	5d 18       	sub	r5, r13
    2d8e:	01 c0       	rjmp	.+2      	; 0x2d92 <vfprintf+0x662>
    2d90:	51 2c       	mov	r5, r1
    2d92:	24 ff       	sbrs	r18, 4
    2d94:	12 c0       	rjmp	.+36     	; 0x2dba <vfprintf+0x68a>
    2d96:	b7 01       	movw	r22, r14
    2d98:	80 e3       	ldi	r24, 0x30	; 48
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	2b 8b       	std	Y+19, r18	; 0x13
    2d9e:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2da2:	2b 89       	ldd	r18, Y+19	; 0x13
    2da4:	22 ff       	sbrs	r18, 2
    2da6:	17 c0       	rjmp	.+46     	; 0x2dd6 <vfprintf+0x6a6>
    2da8:	21 ff       	sbrs	r18, 1
    2daa:	03 c0       	rjmp	.+6      	; 0x2db2 <vfprintf+0x682>
    2dac:	88 e5       	ldi	r24, 0x58	; 88
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	02 c0       	rjmp	.+4      	; 0x2db6 <vfprintf+0x686>
    2db2:	88 e7       	ldi	r24, 0x78	; 120
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	b7 01       	movw	r22, r14
    2db8:	0c c0       	rjmp	.+24     	; 0x2dd2 <vfprintf+0x6a2>
    2dba:	82 2f       	mov	r24, r18
    2dbc:	86 78       	andi	r24, 0x86	; 134
    2dbe:	59 f0       	breq	.+22     	; 0x2dd6 <vfprintf+0x6a6>
    2dc0:	21 fd       	sbrc	r18, 1
    2dc2:	02 c0       	rjmp	.+4      	; 0x2dc8 <vfprintf+0x698>
    2dc4:	80 e2       	ldi	r24, 0x20	; 32
    2dc6:	01 c0       	rjmp	.+2      	; 0x2dca <vfprintf+0x69a>
    2dc8:	8b e2       	ldi	r24, 0x2B	; 43
    2dca:	27 fd       	sbrc	r18, 7
    2dcc:	8d e2       	ldi	r24, 0x2D	; 45
    2dce:	b7 01       	movw	r22, r14
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2dd6:	c1 16       	cp	r12, r17
    2dd8:	38 f4       	brcc	.+14     	; 0x2de8 <vfprintf+0x6b8>
    2dda:	b7 01       	movw	r22, r14
    2ddc:	80 e3       	ldi	r24, 0x30	; 48
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2de4:	11 50       	subi	r17, 0x01	; 1
    2de6:	f7 cf       	rjmp	.-18     	; 0x2dd6 <vfprintf+0x6a6>
    2de8:	ca 94       	dec	r12
    2dea:	f4 01       	movw	r30, r8
    2dec:	ec 0d       	add	r30, r12
    2dee:	f1 1d       	adc	r31, r1
    2df0:	80 81       	ld	r24, Z
    2df2:	b7 01       	movw	r22, r14
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2dfa:	c1 10       	cpse	r12, r1
    2dfc:	f5 cf       	rjmp	.-22     	; 0x2de8 <vfprintf+0x6b8>
    2dfe:	55 20       	and	r5, r5
    2e00:	09 f4       	brne	.+2      	; 0x2e04 <vfprintf+0x6d4>
    2e02:	c2 cc       	rjmp	.-1660   	; 0x2788 <vfprintf+0x58>
    2e04:	b7 01       	movw	r22, r14
    2e06:	80 e2       	ldi	r24, 0x20	; 32
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2e0e:	5a 94       	dec	r5
    2e10:	f6 cf       	rjmp	.-20     	; 0x2dfe <vfprintf+0x6ce>
    2e12:	f7 01       	movw	r30, r14
    2e14:	86 81       	ldd	r24, Z+6	; 0x06
    2e16:	97 81       	ldd	r25, Z+7	; 0x07
    2e18:	02 c0       	rjmp	.+4      	; 0x2e1e <vfprintf+0x6ee>
    2e1a:	8f ef       	ldi	r24, 0xFF	; 255
    2e1c:	9f ef       	ldi	r25, 0xFF	; 255
    2e1e:	63 96       	adiw	r28, 0x13	; 19
    2e20:	e2 e1       	ldi	r30, 0x12	; 18
    2e22:	0c 94 51 17 	jmp	0x2ea2	; 0x2ea2 <__epilogue_restores__>

00002e26 <__udivmodsi4>:
    2e26:	a1 e2       	ldi	r26, 0x21	; 33
    2e28:	1a 2e       	mov	r1, r26
    2e2a:	aa 1b       	sub	r26, r26
    2e2c:	bb 1b       	sub	r27, r27
    2e2e:	fd 01       	movw	r30, r26
    2e30:	0d c0       	rjmp	.+26     	; 0x2e4c <__udivmodsi4_ep>

00002e32 <__udivmodsi4_loop>:
    2e32:	aa 1f       	adc	r26, r26
    2e34:	bb 1f       	adc	r27, r27
    2e36:	ee 1f       	adc	r30, r30
    2e38:	ff 1f       	adc	r31, r31
    2e3a:	a2 17       	cp	r26, r18
    2e3c:	b3 07       	cpc	r27, r19
    2e3e:	e4 07       	cpc	r30, r20
    2e40:	f5 07       	cpc	r31, r21
    2e42:	20 f0       	brcs	.+8      	; 0x2e4c <__udivmodsi4_ep>
    2e44:	a2 1b       	sub	r26, r18
    2e46:	b3 0b       	sbc	r27, r19
    2e48:	e4 0b       	sbc	r30, r20
    2e4a:	f5 0b       	sbc	r31, r21

00002e4c <__udivmodsi4_ep>:
    2e4c:	66 1f       	adc	r22, r22
    2e4e:	77 1f       	adc	r23, r23
    2e50:	88 1f       	adc	r24, r24
    2e52:	99 1f       	adc	r25, r25
    2e54:	1a 94       	dec	r1
    2e56:	69 f7       	brne	.-38     	; 0x2e32 <__udivmodsi4_loop>
    2e58:	60 95       	com	r22
    2e5a:	70 95       	com	r23
    2e5c:	80 95       	com	r24
    2e5e:	90 95       	com	r25
    2e60:	9b 01       	movw	r18, r22
    2e62:	ac 01       	movw	r20, r24
    2e64:	bd 01       	movw	r22, r26
    2e66:	cf 01       	movw	r24, r30
    2e68:	08 95       	ret

00002e6a <__prologue_saves__>:
    2e6a:	2f 92       	push	r2
    2e6c:	3f 92       	push	r3
    2e6e:	4f 92       	push	r4
    2e70:	5f 92       	push	r5
    2e72:	6f 92       	push	r6
    2e74:	7f 92       	push	r7
    2e76:	8f 92       	push	r8
    2e78:	9f 92       	push	r9
    2e7a:	af 92       	push	r10
    2e7c:	bf 92       	push	r11
    2e7e:	cf 92       	push	r12
    2e80:	df 92       	push	r13
    2e82:	ef 92       	push	r14
    2e84:	ff 92       	push	r15
    2e86:	0f 93       	push	r16
    2e88:	1f 93       	push	r17
    2e8a:	cf 93       	push	r28
    2e8c:	df 93       	push	r29
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
    2e92:	ca 1b       	sub	r28, r26
    2e94:	db 0b       	sbc	r29, r27
    2e96:	0f b6       	in	r0, 0x3f	; 63
    2e98:	f8 94       	cli
    2e9a:	de bf       	out	0x3e, r29	; 62
    2e9c:	0f be       	out	0x3f, r0	; 63
    2e9e:	cd bf       	out	0x3d, r28	; 61
    2ea0:	09 94       	ijmp

00002ea2 <__epilogue_restores__>:
    2ea2:	2a 88       	ldd	r2, Y+18	; 0x12
    2ea4:	39 88       	ldd	r3, Y+17	; 0x11
    2ea6:	48 88       	ldd	r4, Y+16	; 0x10
    2ea8:	5f 84       	ldd	r5, Y+15	; 0x0f
    2eaa:	6e 84       	ldd	r6, Y+14	; 0x0e
    2eac:	7d 84       	ldd	r7, Y+13	; 0x0d
    2eae:	8c 84       	ldd	r8, Y+12	; 0x0c
    2eb0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2eb2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2eb4:	b9 84       	ldd	r11, Y+9	; 0x09
    2eb6:	c8 84       	ldd	r12, Y+8	; 0x08
    2eb8:	df 80       	ldd	r13, Y+7	; 0x07
    2eba:	ee 80       	ldd	r14, Y+6	; 0x06
    2ebc:	fd 80       	ldd	r15, Y+5	; 0x05
    2ebe:	0c 81       	ldd	r16, Y+4	; 0x04
    2ec0:	1b 81       	ldd	r17, Y+3	; 0x03
    2ec2:	aa 81       	ldd	r26, Y+2	; 0x02
    2ec4:	b9 81       	ldd	r27, Y+1	; 0x01
    2ec6:	ce 0f       	add	r28, r30
    2ec8:	d1 1d       	adc	r29, r1
    2eca:	0f b6       	in	r0, 0x3f	; 63
    2ecc:	f8 94       	cli
    2ece:	de bf       	out	0x3e, r29	; 62
    2ed0:	0f be       	out	0x3f, r0	; 63
    2ed2:	cd bf       	out	0x3d, r28	; 61
    2ed4:	ed 01       	movw	r28, r26
    2ed6:	08 95       	ret

00002ed8 <malloc>:
    2ed8:	cf 93       	push	r28
    2eda:	df 93       	push	r29
    2edc:	82 30       	cpi	r24, 0x02	; 2
    2ede:	91 05       	cpc	r25, r1
    2ee0:	10 f4       	brcc	.+4      	; 0x2ee6 <malloc+0xe>
    2ee2:	82 e0       	ldi	r24, 0x02	; 2
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	e0 91 20 0a 	lds	r30, 0x0A20
    2eea:	f0 91 21 0a 	lds	r31, 0x0A21
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	a0 e0       	ldi	r26, 0x00	; 0
    2ef4:	b0 e0       	ldi	r27, 0x00	; 0
    2ef6:	30 97       	sbiw	r30, 0x00	; 0
    2ef8:	39 f1       	breq	.+78     	; 0x2f48 <malloc+0x70>
    2efa:	40 81       	ld	r20, Z
    2efc:	51 81       	ldd	r21, Z+1	; 0x01
    2efe:	48 17       	cp	r20, r24
    2f00:	59 07       	cpc	r21, r25
    2f02:	b8 f0       	brcs	.+46     	; 0x2f32 <malloc+0x5a>
    2f04:	48 17       	cp	r20, r24
    2f06:	59 07       	cpc	r21, r25
    2f08:	71 f4       	brne	.+28     	; 0x2f26 <malloc+0x4e>
    2f0a:	82 81       	ldd	r24, Z+2	; 0x02
    2f0c:	93 81       	ldd	r25, Z+3	; 0x03
    2f0e:	10 97       	sbiw	r26, 0x00	; 0
    2f10:	29 f0       	breq	.+10     	; 0x2f1c <malloc+0x44>
    2f12:	13 96       	adiw	r26, 0x03	; 3
    2f14:	9c 93       	st	X, r25
    2f16:	8e 93       	st	-X, r24
    2f18:	12 97       	sbiw	r26, 0x02	; 2
    2f1a:	2c c0       	rjmp	.+88     	; 0x2f74 <malloc+0x9c>
    2f1c:	90 93 21 0a 	sts	0x0A21, r25
    2f20:	80 93 20 0a 	sts	0x0A20, r24
    2f24:	27 c0       	rjmp	.+78     	; 0x2f74 <malloc+0x9c>
    2f26:	21 15       	cp	r18, r1
    2f28:	31 05       	cpc	r19, r1
    2f2a:	31 f0       	breq	.+12     	; 0x2f38 <malloc+0x60>
    2f2c:	42 17       	cp	r20, r18
    2f2e:	53 07       	cpc	r21, r19
    2f30:	18 f0       	brcs	.+6      	; 0x2f38 <malloc+0x60>
    2f32:	a9 01       	movw	r20, r18
    2f34:	db 01       	movw	r26, r22
    2f36:	01 c0       	rjmp	.+2      	; 0x2f3a <malloc+0x62>
    2f38:	ef 01       	movw	r28, r30
    2f3a:	9a 01       	movw	r18, r20
    2f3c:	bd 01       	movw	r22, r26
    2f3e:	df 01       	movw	r26, r30
    2f40:	02 80       	ldd	r0, Z+2	; 0x02
    2f42:	f3 81       	ldd	r31, Z+3	; 0x03
    2f44:	e0 2d       	mov	r30, r0
    2f46:	d7 cf       	rjmp	.-82     	; 0x2ef6 <malloc+0x1e>
    2f48:	21 15       	cp	r18, r1
    2f4a:	31 05       	cpc	r19, r1
    2f4c:	f9 f0       	breq	.+62     	; 0x2f8c <malloc+0xb4>
    2f4e:	28 1b       	sub	r18, r24
    2f50:	39 0b       	sbc	r19, r25
    2f52:	24 30       	cpi	r18, 0x04	; 4
    2f54:	31 05       	cpc	r19, r1
    2f56:	80 f4       	brcc	.+32     	; 0x2f78 <malloc+0xa0>
    2f58:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f5c:	61 15       	cp	r22, r1
    2f5e:	71 05       	cpc	r23, r1
    2f60:	21 f0       	breq	.+8      	; 0x2f6a <malloc+0x92>
    2f62:	fb 01       	movw	r30, r22
    2f64:	93 83       	std	Z+3, r25	; 0x03
    2f66:	82 83       	std	Z+2, r24	; 0x02
    2f68:	04 c0       	rjmp	.+8      	; 0x2f72 <malloc+0x9a>
    2f6a:	90 93 21 0a 	sts	0x0A21, r25
    2f6e:	80 93 20 0a 	sts	0x0A20, r24
    2f72:	fe 01       	movw	r30, r28
    2f74:	32 96       	adiw	r30, 0x02	; 2
    2f76:	44 c0       	rjmp	.+136    	; 0x3000 <malloc+0x128>
    2f78:	fe 01       	movw	r30, r28
    2f7a:	e2 0f       	add	r30, r18
    2f7c:	f3 1f       	adc	r31, r19
    2f7e:	81 93       	st	Z+, r24
    2f80:	91 93       	st	Z+, r25
    2f82:	22 50       	subi	r18, 0x02	; 2
    2f84:	31 09       	sbc	r19, r1
    2f86:	39 83       	std	Y+1, r19	; 0x01
    2f88:	28 83       	st	Y, r18
    2f8a:	3a c0       	rjmp	.+116    	; 0x3000 <malloc+0x128>
    2f8c:	20 91 1e 0a 	lds	r18, 0x0A1E
    2f90:	30 91 1f 0a 	lds	r19, 0x0A1F
    2f94:	23 2b       	or	r18, r19
    2f96:	41 f4       	brne	.+16     	; 0x2fa8 <malloc+0xd0>
    2f98:	20 91 02 02 	lds	r18, 0x0202
    2f9c:	30 91 03 02 	lds	r19, 0x0203
    2fa0:	30 93 1f 0a 	sts	0x0A1F, r19
    2fa4:	20 93 1e 0a 	sts	0x0A1E, r18
    2fa8:	20 91 00 02 	lds	r18, 0x0200
    2fac:	30 91 01 02 	lds	r19, 0x0201
    2fb0:	21 15       	cp	r18, r1
    2fb2:	31 05       	cpc	r19, r1
    2fb4:	41 f4       	brne	.+16     	; 0x2fc6 <malloc+0xee>
    2fb6:	2d b7       	in	r18, 0x3d	; 61
    2fb8:	3e b7       	in	r19, 0x3e	; 62
    2fba:	40 91 04 02 	lds	r20, 0x0204
    2fbe:	50 91 05 02 	lds	r21, 0x0205
    2fc2:	24 1b       	sub	r18, r20
    2fc4:	35 0b       	sbc	r19, r21
    2fc6:	e0 91 1e 0a 	lds	r30, 0x0A1E
    2fca:	f0 91 1f 0a 	lds	r31, 0x0A1F
    2fce:	e2 17       	cp	r30, r18
    2fd0:	f3 07       	cpc	r31, r19
    2fd2:	a0 f4       	brcc	.+40     	; 0x2ffc <malloc+0x124>
    2fd4:	2e 1b       	sub	r18, r30
    2fd6:	3f 0b       	sbc	r19, r31
    2fd8:	28 17       	cp	r18, r24
    2fda:	39 07       	cpc	r19, r25
    2fdc:	78 f0       	brcs	.+30     	; 0x2ffc <malloc+0x124>
    2fde:	ac 01       	movw	r20, r24
    2fe0:	4e 5f       	subi	r20, 0xFE	; 254
    2fe2:	5f 4f       	sbci	r21, 0xFF	; 255
    2fe4:	24 17       	cp	r18, r20
    2fe6:	35 07       	cpc	r19, r21
    2fe8:	48 f0       	brcs	.+18     	; 0x2ffc <malloc+0x124>
    2fea:	4e 0f       	add	r20, r30
    2fec:	5f 1f       	adc	r21, r31
    2fee:	50 93 1f 0a 	sts	0x0A1F, r21
    2ff2:	40 93 1e 0a 	sts	0x0A1E, r20
    2ff6:	81 93       	st	Z+, r24
    2ff8:	91 93       	st	Z+, r25
    2ffa:	02 c0       	rjmp	.+4      	; 0x3000 <malloc+0x128>
    2ffc:	e0 e0       	ldi	r30, 0x00	; 0
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	cf 01       	movw	r24, r30
    3002:	df 91       	pop	r29
    3004:	cf 91       	pop	r28
    3006:	08 95       	ret

00003008 <free>:
    3008:	cf 93       	push	r28
    300a:	df 93       	push	r29
    300c:	00 97       	sbiw	r24, 0x00	; 0
    300e:	09 f4       	brne	.+2      	; 0x3012 <free+0xa>
    3010:	87 c0       	rjmp	.+270    	; 0x3120 <free+0x118>
    3012:	fc 01       	movw	r30, r24
    3014:	32 97       	sbiw	r30, 0x02	; 2
    3016:	13 82       	std	Z+3, r1	; 0x03
    3018:	12 82       	std	Z+2, r1	; 0x02
    301a:	c0 91 20 0a 	lds	r28, 0x0A20
    301e:	d0 91 21 0a 	lds	r29, 0x0A21
    3022:	20 97       	sbiw	r28, 0x00	; 0
    3024:	81 f4       	brne	.+32     	; 0x3046 <free+0x3e>
    3026:	20 81       	ld	r18, Z
    3028:	31 81       	ldd	r19, Z+1	; 0x01
    302a:	28 0f       	add	r18, r24
    302c:	39 1f       	adc	r19, r25
    302e:	80 91 1e 0a 	lds	r24, 0x0A1E
    3032:	90 91 1f 0a 	lds	r25, 0x0A1F
    3036:	82 17       	cp	r24, r18
    3038:	93 07       	cpc	r25, r19
    303a:	79 f5       	brne	.+94     	; 0x309a <free+0x92>
    303c:	f0 93 1f 0a 	sts	0x0A1F, r31
    3040:	e0 93 1e 0a 	sts	0x0A1E, r30
    3044:	6d c0       	rjmp	.+218    	; 0x3120 <free+0x118>
    3046:	de 01       	movw	r26, r28
    3048:	20 e0       	ldi	r18, 0x00	; 0
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	ae 17       	cp	r26, r30
    304e:	bf 07       	cpc	r27, r31
    3050:	50 f4       	brcc	.+20     	; 0x3066 <free+0x5e>
    3052:	12 96       	adiw	r26, 0x02	; 2
    3054:	4d 91       	ld	r20, X+
    3056:	5c 91       	ld	r21, X
    3058:	13 97       	sbiw	r26, 0x03	; 3
    305a:	9d 01       	movw	r18, r26
    305c:	41 15       	cp	r20, r1
    305e:	51 05       	cpc	r21, r1
    3060:	09 f1       	breq	.+66     	; 0x30a4 <free+0x9c>
    3062:	da 01       	movw	r26, r20
    3064:	f3 cf       	rjmp	.-26     	; 0x304c <free+0x44>
    3066:	b3 83       	std	Z+3, r27	; 0x03
    3068:	a2 83       	std	Z+2, r26	; 0x02
    306a:	40 81       	ld	r20, Z
    306c:	51 81       	ldd	r21, Z+1	; 0x01
    306e:	84 0f       	add	r24, r20
    3070:	95 1f       	adc	r25, r21
    3072:	8a 17       	cp	r24, r26
    3074:	9b 07       	cpc	r25, r27
    3076:	71 f4       	brne	.+28     	; 0x3094 <free+0x8c>
    3078:	8d 91       	ld	r24, X+
    307a:	9c 91       	ld	r25, X
    307c:	11 97       	sbiw	r26, 0x01	; 1
    307e:	84 0f       	add	r24, r20
    3080:	95 1f       	adc	r25, r21
    3082:	02 96       	adiw	r24, 0x02	; 2
    3084:	91 83       	std	Z+1, r25	; 0x01
    3086:	80 83       	st	Z, r24
    3088:	12 96       	adiw	r26, 0x02	; 2
    308a:	8d 91       	ld	r24, X+
    308c:	9c 91       	ld	r25, X
    308e:	13 97       	sbiw	r26, 0x03	; 3
    3090:	93 83       	std	Z+3, r25	; 0x03
    3092:	82 83       	std	Z+2, r24	; 0x02
    3094:	21 15       	cp	r18, r1
    3096:	31 05       	cpc	r19, r1
    3098:	29 f4       	brne	.+10     	; 0x30a4 <free+0x9c>
    309a:	f0 93 21 0a 	sts	0x0A21, r31
    309e:	e0 93 20 0a 	sts	0x0A20, r30
    30a2:	3e c0       	rjmp	.+124    	; 0x3120 <free+0x118>
    30a4:	d9 01       	movw	r26, r18
    30a6:	13 96       	adiw	r26, 0x03	; 3
    30a8:	fc 93       	st	X, r31
    30aa:	ee 93       	st	-X, r30
    30ac:	12 97       	sbiw	r26, 0x02	; 2
    30ae:	4d 91       	ld	r20, X+
    30b0:	5d 91       	ld	r21, X+
    30b2:	a4 0f       	add	r26, r20
    30b4:	b5 1f       	adc	r27, r21
    30b6:	ea 17       	cp	r30, r26
    30b8:	fb 07       	cpc	r31, r27
    30ba:	79 f4       	brne	.+30     	; 0x30da <free+0xd2>
    30bc:	80 81       	ld	r24, Z
    30be:	91 81       	ldd	r25, Z+1	; 0x01
    30c0:	84 0f       	add	r24, r20
    30c2:	95 1f       	adc	r25, r21
    30c4:	02 96       	adiw	r24, 0x02	; 2
    30c6:	d9 01       	movw	r26, r18
    30c8:	11 96       	adiw	r26, 0x01	; 1
    30ca:	9c 93       	st	X, r25
    30cc:	8e 93       	st	-X, r24
    30ce:	82 81       	ldd	r24, Z+2	; 0x02
    30d0:	93 81       	ldd	r25, Z+3	; 0x03
    30d2:	13 96       	adiw	r26, 0x03	; 3
    30d4:	9c 93       	st	X, r25
    30d6:	8e 93       	st	-X, r24
    30d8:	12 97       	sbiw	r26, 0x02	; 2
    30da:	e0 e0       	ldi	r30, 0x00	; 0
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
    30de:	8a 81       	ldd	r24, Y+2	; 0x02
    30e0:	9b 81       	ldd	r25, Y+3	; 0x03
    30e2:	00 97       	sbiw	r24, 0x00	; 0
    30e4:	19 f0       	breq	.+6      	; 0x30ec <free+0xe4>
    30e6:	fe 01       	movw	r30, r28
    30e8:	ec 01       	movw	r28, r24
    30ea:	f9 cf       	rjmp	.-14     	; 0x30de <free+0xd6>
    30ec:	ce 01       	movw	r24, r28
    30ee:	02 96       	adiw	r24, 0x02	; 2
    30f0:	28 81       	ld	r18, Y
    30f2:	39 81       	ldd	r19, Y+1	; 0x01
    30f4:	82 0f       	add	r24, r18
    30f6:	93 1f       	adc	r25, r19
    30f8:	20 91 1e 0a 	lds	r18, 0x0A1E
    30fc:	30 91 1f 0a 	lds	r19, 0x0A1F
    3100:	28 17       	cp	r18, r24
    3102:	39 07       	cpc	r19, r25
    3104:	69 f4       	brne	.+26     	; 0x3120 <free+0x118>
    3106:	30 97       	sbiw	r30, 0x00	; 0
    3108:	29 f4       	brne	.+10     	; 0x3114 <free+0x10c>
    310a:	10 92 21 0a 	sts	0x0A21, r1
    310e:	10 92 20 0a 	sts	0x0A20, r1
    3112:	02 c0       	rjmp	.+4      	; 0x3118 <free+0x110>
    3114:	13 82       	std	Z+3, r1	; 0x03
    3116:	12 82       	std	Z+2, r1	; 0x02
    3118:	d0 93 1f 0a 	sts	0x0A1F, r29
    311c:	c0 93 1e 0a 	sts	0x0A1E, r28
    3120:	df 91       	pop	r29
    3122:	cf 91       	pop	r28
    3124:	08 95       	ret

00003126 <__ftoa_engine>:
    3126:	28 30       	cpi	r18, 0x08	; 8
    3128:	08 f0       	brcs	.+2      	; 0x312c <__ftoa_engine+0x6>
    312a:	27 e0       	ldi	r18, 0x07	; 7
    312c:	33 27       	eor	r19, r19
    312e:	da 01       	movw	r26, r20
    3130:	99 0f       	add	r25, r25
    3132:	31 1d       	adc	r19, r1
    3134:	87 fd       	sbrc	r24, 7
    3136:	91 60       	ori	r25, 0x01	; 1
    3138:	00 96       	adiw	r24, 0x00	; 0
    313a:	61 05       	cpc	r22, r1
    313c:	71 05       	cpc	r23, r1
    313e:	39 f4       	brne	.+14     	; 0x314e <__ftoa_engine+0x28>
    3140:	32 60       	ori	r19, 0x02	; 2
    3142:	2e 5f       	subi	r18, 0xFE	; 254
    3144:	3d 93       	st	X+, r19
    3146:	30 e3       	ldi	r19, 0x30	; 48
    3148:	2a 95       	dec	r18
    314a:	e1 f7       	brne	.-8      	; 0x3144 <__ftoa_engine+0x1e>
    314c:	08 95       	ret
    314e:	9f 3f       	cpi	r25, 0xFF	; 255
    3150:	30 f0       	brcs	.+12     	; 0x315e <__ftoa_engine+0x38>
    3152:	80 38       	cpi	r24, 0x80	; 128
    3154:	71 05       	cpc	r23, r1
    3156:	61 05       	cpc	r22, r1
    3158:	09 f0       	breq	.+2      	; 0x315c <__ftoa_engine+0x36>
    315a:	3c 5f       	subi	r19, 0xFC	; 252
    315c:	3c 5f       	subi	r19, 0xFC	; 252
    315e:	3d 93       	st	X+, r19
    3160:	91 30       	cpi	r25, 0x01	; 1
    3162:	08 f0       	brcs	.+2      	; 0x3166 <__ftoa_engine+0x40>
    3164:	80 68       	ori	r24, 0x80	; 128
    3166:	91 1d       	adc	r25, r1
    3168:	df 93       	push	r29
    316a:	cf 93       	push	r28
    316c:	1f 93       	push	r17
    316e:	0f 93       	push	r16
    3170:	ff 92       	push	r15
    3172:	ef 92       	push	r14
    3174:	19 2f       	mov	r17, r25
    3176:	98 7f       	andi	r25, 0xF8	; 248
    3178:	96 95       	lsr	r25
    317a:	e9 2f       	mov	r30, r25
    317c:	96 95       	lsr	r25
    317e:	96 95       	lsr	r25
    3180:	e9 0f       	add	r30, r25
    3182:	ff 27       	eor	r31, r31
    3184:	ea 56       	subi	r30, 0x6A	; 106
    3186:	fe 4f       	sbci	r31, 0xFE	; 254
    3188:	99 27       	eor	r25, r25
    318a:	33 27       	eor	r19, r19
    318c:	ee 24       	eor	r14, r14
    318e:	ff 24       	eor	r15, r15
    3190:	a7 01       	movw	r20, r14
    3192:	e7 01       	movw	r28, r14
    3194:	05 90       	lpm	r0, Z+
    3196:	08 94       	sec
    3198:	07 94       	ror	r0
    319a:	28 f4       	brcc	.+10     	; 0x31a6 <__ftoa_engine+0x80>
    319c:	36 0f       	add	r19, r22
    319e:	e7 1e       	adc	r14, r23
    31a0:	f8 1e       	adc	r15, r24
    31a2:	49 1f       	adc	r20, r25
    31a4:	51 1d       	adc	r21, r1
    31a6:	66 0f       	add	r22, r22
    31a8:	77 1f       	adc	r23, r23
    31aa:	88 1f       	adc	r24, r24
    31ac:	99 1f       	adc	r25, r25
    31ae:	06 94       	lsr	r0
    31b0:	a1 f7       	brne	.-24     	; 0x319a <__ftoa_engine+0x74>
    31b2:	05 90       	lpm	r0, Z+
    31b4:	07 94       	ror	r0
    31b6:	28 f4       	brcc	.+10     	; 0x31c2 <__ftoa_engine+0x9c>
    31b8:	e7 0e       	add	r14, r23
    31ba:	f8 1e       	adc	r15, r24
    31bc:	49 1f       	adc	r20, r25
    31be:	56 1f       	adc	r21, r22
    31c0:	c1 1d       	adc	r28, r1
    31c2:	77 0f       	add	r23, r23
    31c4:	88 1f       	adc	r24, r24
    31c6:	99 1f       	adc	r25, r25
    31c8:	66 1f       	adc	r22, r22
    31ca:	06 94       	lsr	r0
    31cc:	a1 f7       	brne	.-24     	; 0x31b6 <__ftoa_engine+0x90>
    31ce:	05 90       	lpm	r0, Z+
    31d0:	07 94       	ror	r0
    31d2:	28 f4       	brcc	.+10     	; 0x31de <__ftoa_engine+0xb8>
    31d4:	f8 0e       	add	r15, r24
    31d6:	49 1f       	adc	r20, r25
    31d8:	56 1f       	adc	r21, r22
    31da:	c7 1f       	adc	r28, r23
    31dc:	d1 1d       	adc	r29, r1
    31de:	88 0f       	add	r24, r24
    31e0:	99 1f       	adc	r25, r25
    31e2:	66 1f       	adc	r22, r22
    31e4:	77 1f       	adc	r23, r23
    31e6:	06 94       	lsr	r0
    31e8:	a1 f7       	brne	.-24     	; 0x31d2 <__ftoa_engine+0xac>
    31ea:	05 90       	lpm	r0, Z+
    31ec:	07 94       	ror	r0
    31ee:	20 f4       	brcc	.+8      	; 0x31f8 <__ftoa_engine+0xd2>
    31f0:	49 0f       	add	r20, r25
    31f2:	56 1f       	adc	r21, r22
    31f4:	c7 1f       	adc	r28, r23
    31f6:	d8 1f       	adc	r29, r24
    31f8:	99 0f       	add	r25, r25
    31fa:	66 1f       	adc	r22, r22
    31fc:	77 1f       	adc	r23, r23
    31fe:	88 1f       	adc	r24, r24
    3200:	06 94       	lsr	r0
    3202:	a9 f7       	brne	.-22     	; 0x31ee <__ftoa_engine+0xc8>
    3204:	84 91       	lpm	r24, Z
    3206:	10 95       	com	r17
    3208:	17 70       	andi	r17, 0x07	; 7
    320a:	41 f0       	breq	.+16     	; 0x321c <__ftoa_engine+0xf6>
    320c:	d6 95       	lsr	r29
    320e:	c7 95       	ror	r28
    3210:	57 95       	ror	r21
    3212:	47 95       	ror	r20
    3214:	f7 94       	ror	r15
    3216:	e7 94       	ror	r14
    3218:	1a 95       	dec	r17
    321a:	c1 f7       	brne	.-16     	; 0x320c <__ftoa_engine+0xe6>
    321c:	ec e3       	ldi	r30, 0x3C	; 60
    321e:	f1 e0       	ldi	r31, 0x01	; 1
    3220:	68 94       	set
    3222:	15 90       	lpm	r1, Z+
    3224:	15 91       	lpm	r17, Z+
    3226:	35 91       	lpm	r19, Z+
    3228:	65 91       	lpm	r22, Z+
    322a:	95 91       	lpm	r25, Z+
    322c:	05 90       	lpm	r0, Z+
    322e:	7f e2       	ldi	r23, 0x2F	; 47
    3230:	73 95       	inc	r23
    3232:	e1 18       	sub	r14, r1
    3234:	f1 0a       	sbc	r15, r17
    3236:	43 0b       	sbc	r20, r19
    3238:	56 0b       	sbc	r21, r22
    323a:	c9 0b       	sbc	r28, r25
    323c:	d0 09       	sbc	r29, r0
    323e:	c0 f7       	brcc	.-16     	; 0x3230 <__ftoa_engine+0x10a>
    3240:	e1 0c       	add	r14, r1
    3242:	f1 1e       	adc	r15, r17
    3244:	43 1f       	adc	r20, r19
    3246:	56 1f       	adc	r21, r22
    3248:	c9 1f       	adc	r28, r25
    324a:	d0 1d       	adc	r29, r0
    324c:	7e f4       	brtc	.+30     	; 0x326c <__ftoa_engine+0x146>
    324e:	70 33       	cpi	r23, 0x30	; 48
    3250:	11 f4       	brne	.+4      	; 0x3256 <__ftoa_engine+0x130>
    3252:	8a 95       	dec	r24
    3254:	e6 cf       	rjmp	.-52     	; 0x3222 <__ftoa_engine+0xfc>
    3256:	e8 94       	clt
    3258:	01 50       	subi	r16, 0x01	; 1
    325a:	30 f0       	brcs	.+12     	; 0x3268 <__ftoa_engine+0x142>
    325c:	08 0f       	add	r16, r24
    325e:	0a f4       	brpl	.+2      	; 0x3262 <__ftoa_engine+0x13c>
    3260:	00 27       	eor	r16, r16
    3262:	02 17       	cp	r16, r18
    3264:	08 f4       	brcc	.+2      	; 0x3268 <__ftoa_engine+0x142>
    3266:	20 2f       	mov	r18, r16
    3268:	23 95       	inc	r18
    326a:	02 2f       	mov	r16, r18
    326c:	7a 33       	cpi	r23, 0x3A	; 58
    326e:	28 f0       	brcs	.+10     	; 0x327a <__ftoa_engine+0x154>
    3270:	79 e3       	ldi	r23, 0x39	; 57
    3272:	7d 93       	st	X+, r23
    3274:	2a 95       	dec	r18
    3276:	e9 f7       	brne	.-6      	; 0x3272 <__ftoa_engine+0x14c>
    3278:	10 c0       	rjmp	.+32     	; 0x329a <__ftoa_engine+0x174>
    327a:	7d 93       	st	X+, r23
    327c:	2a 95       	dec	r18
    327e:	89 f6       	brne	.-94     	; 0x3222 <__ftoa_engine+0xfc>
    3280:	06 94       	lsr	r0
    3282:	97 95       	ror	r25
    3284:	67 95       	ror	r22
    3286:	37 95       	ror	r19
    3288:	17 95       	ror	r17
    328a:	17 94       	ror	r1
    328c:	e1 18       	sub	r14, r1
    328e:	f1 0a       	sbc	r15, r17
    3290:	43 0b       	sbc	r20, r19
    3292:	56 0b       	sbc	r21, r22
    3294:	c9 0b       	sbc	r28, r25
    3296:	d0 09       	sbc	r29, r0
    3298:	98 f0       	brcs	.+38     	; 0x32c0 <__ftoa_engine+0x19a>
    329a:	23 95       	inc	r18
    329c:	7e 91       	ld	r23, -X
    329e:	73 95       	inc	r23
    32a0:	7a 33       	cpi	r23, 0x3A	; 58
    32a2:	08 f0       	brcs	.+2      	; 0x32a6 <__ftoa_engine+0x180>
    32a4:	70 e3       	ldi	r23, 0x30	; 48
    32a6:	7c 93       	st	X, r23
    32a8:	20 13       	cpse	r18, r16
    32aa:	b8 f7       	brcc	.-18     	; 0x329a <__ftoa_engine+0x174>
    32ac:	7e 91       	ld	r23, -X
    32ae:	70 61       	ori	r23, 0x10	; 16
    32b0:	7d 93       	st	X+, r23
    32b2:	30 f0       	brcs	.+12     	; 0x32c0 <__ftoa_engine+0x19a>
    32b4:	83 95       	inc	r24
    32b6:	71 e3       	ldi	r23, 0x31	; 49
    32b8:	7d 93       	st	X+, r23
    32ba:	70 e3       	ldi	r23, 0x30	; 48
    32bc:	2a 95       	dec	r18
    32be:	e1 f7       	brne	.-8      	; 0x32b8 <__ftoa_engine+0x192>
    32c0:	11 24       	eor	r1, r1
    32c2:	ef 90       	pop	r14
    32c4:	ff 90       	pop	r15
    32c6:	0f 91       	pop	r16
    32c8:	1f 91       	pop	r17
    32ca:	cf 91       	pop	r28
    32cc:	df 91       	pop	r29
    32ce:	99 27       	eor	r25, r25
    32d0:	87 fd       	sbrc	r24, 7
    32d2:	90 95       	com	r25
    32d4:	08 95       	ret

000032d6 <strnlen_P>:
    32d6:	fc 01       	movw	r30, r24
    32d8:	05 90       	lpm	r0, Z+
    32da:	61 50       	subi	r22, 0x01	; 1
    32dc:	70 40       	sbci	r23, 0x00	; 0
    32de:	01 10       	cpse	r0, r1
    32e0:	d8 f7       	brcc	.-10     	; 0x32d8 <strnlen_P+0x2>
    32e2:	80 95       	com	r24
    32e4:	90 95       	com	r25
    32e6:	8e 0f       	add	r24, r30
    32e8:	9f 1f       	adc	r25, r31
    32ea:	08 95       	ret

000032ec <strnlen>:
    32ec:	fc 01       	movw	r30, r24
    32ee:	61 50       	subi	r22, 0x01	; 1
    32f0:	70 40       	sbci	r23, 0x00	; 0
    32f2:	01 90       	ld	r0, Z+
    32f4:	01 10       	cpse	r0, r1
    32f6:	d8 f7       	brcc	.-10     	; 0x32ee <strnlen+0x2>
    32f8:	80 95       	com	r24
    32fa:	90 95       	com	r25
    32fc:	8e 0f       	add	r24, r30
    32fe:	9f 1f       	adc	r25, r31
    3300:	08 95       	ret

00003302 <fputc>:
    3302:	0f 93       	push	r16
    3304:	1f 93       	push	r17
    3306:	cf 93       	push	r28
    3308:	df 93       	push	r29
    330a:	18 2f       	mov	r17, r24
    330c:	09 2f       	mov	r16, r25
    330e:	eb 01       	movw	r28, r22
    3310:	8b 81       	ldd	r24, Y+3	; 0x03
    3312:	81 fd       	sbrc	r24, 1
    3314:	03 c0       	rjmp	.+6      	; 0x331c <fputc+0x1a>
    3316:	8f ef       	ldi	r24, 0xFF	; 255
    3318:	9f ef       	ldi	r25, 0xFF	; 255
    331a:	20 c0       	rjmp	.+64     	; 0x335c <fputc+0x5a>
    331c:	82 ff       	sbrs	r24, 2
    331e:	10 c0       	rjmp	.+32     	; 0x3340 <fputc+0x3e>
    3320:	4e 81       	ldd	r20, Y+6	; 0x06
    3322:	5f 81       	ldd	r21, Y+7	; 0x07
    3324:	2c 81       	ldd	r18, Y+4	; 0x04
    3326:	3d 81       	ldd	r19, Y+5	; 0x05
    3328:	42 17       	cp	r20, r18
    332a:	53 07       	cpc	r21, r19
    332c:	7c f4       	brge	.+30     	; 0x334c <fputc+0x4a>
    332e:	e8 81       	ld	r30, Y
    3330:	f9 81       	ldd	r31, Y+1	; 0x01
    3332:	9f 01       	movw	r18, r30
    3334:	2f 5f       	subi	r18, 0xFF	; 255
    3336:	3f 4f       	sbci	r19, 0xFF	; 255
    3338:	39 83       	std	Y+1, r19	; 0x01
    333a:	28 83       	st	Y, r18
    333c:	10 83       	st	Z, r17
    333e:	06 c0       	rjmp	.+12     	; 0x334c <fputc+0x4a>
    3340:	e8 85       	ldd	r30, Y+8	; 0x08
    3342:	f9 85       	ldd	r31, Y+9	; 0x09
    3344:	81 2f       	mov	r24, r17
    3346:	09 95       	icall
    3348:	89 2b       	or	r24, r25
    334a:	29 f7       	brne	.-54     	; 0x3316 <fputc+0x14>
    334c:	2e 81       	ldd	r18, Y+6	; 0x06
    334e:	3f 81       	ldd	r19, Y+7	; 0x07
    3350:	2f 5f       	subi	r18, 0xFF	; 255
    3352:	3f 4f       	sbci	r19, 0xFF	; 255
    3354:	3f 83       	std	Y+7, r19	; 0x07
    3356:	2e 83       	std	Y+6, r18	; 0x06
    3358:	81 2f       	mov	r24, r17
    335a:	90 2f       	mov	r25, r16
    335c:	df 91       	pop	r29
    335e:	cf 91       	pop	r28
    3360:	1f 91       	pop	r17
    3362:	0f 91       	pop	r16
    3364:	08 95       	ret

00003366 <printf>:
    3366:	a0 e0       	ldi	r26, 0x00	; 0
    3368:	b0 e0       	ldi	r27, 0x00	; 0
    336a:	e9 eb       	ldi	r30, 0xB9	; 185
    336c:	f9 e1       	ldi	r31, 0x19	; 25
    336e:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__prologue_saves__+0x20>
    3372:	fe 01       	movw	r30, r28
    3374:	35 96       	adiw	r30, 0x05	; 5
    3376:	61 91       	ld	r22, Z+
    3378:	71 91       	ld	r23, Z+
    337a:	af 01       	movw	r20, r30
    337c:	80 91 24 0a 	lds	r24, 0x0A24
    3380:	90 91 25 0a 	lds	r25, 0x0A25
    3384:	0e 94 98 13 	call	0x2730	; 0x2730 <vfprintf>
    3388:	e2 e0       	ldi	r30, 0x02	; 2
    338a:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__epilogue_restores__+0x20>

0000338e <puts>:
    338e:	0f 93       	push	r16
    3390:	1f 93       	push	r17
    3392:	cf 93       	push	r28
    3394:	df 93       	push	r29
    3396:	e0 91 24 0a 	lds	r30, 0x0A24
    339a:	f0 91 25 0a 	lds	r31, 0x0A25
    339e:	23 81       	ldd	r18, Z+3	; 0x03
    33a0:	21 ff       	sbrs	r18, 1
    33a2:	1b c0       	rjmp	.+54     	; 0x33da <puts+0x4c>
    33a4:	ec 01       	movw	r28, r24
    33a6:	00 e0       	ldi	r16, 0x00	; 0
    33a8:	10 e0       	ldi	r17, 0x00	; 0
    33aa:	89 91       	ld	r24, Y+
    33ac:	60 91 24 0a 	lds	r22, 0x0A24
    33b0:	70 91 25 0a 	lds	r23, 0x0A25
    33b4:	db 01       	movw	r26, r22
    33b6:	18 96       	adiw	r26, 0x08	; 8
    33b8:	ed 91       	ld	r30, X+
    33ba:	fc 91       	ld	r31, X
    33bc:	19 97       	sbiw	r26, 0x09	; 9
    33be:	88 23       	and	r24, r24
    33c0:	31 f0       	breq	.+12     	; 0x33ce <puts+0x40>
    33c2:	09 95       	icall
    33c4:	89 2b       	or	r24, r25
    33c6:	89 f3       	breq	.-30     	; 0x33aa <puts+0x1c>
    33c8:	0f ef       	ldi	r16, 0xFF	; 255
    33ca:	1f ef       	ldi	r17, 0xFF	; 255
    33cc:	ee cf       	rjmp	.-36     	; 0x33aa <puts+0x1c>
    33ce:	8a e0       	ldi	r24, 0x0A	; 10
    33d0:	09 95       	icall
    33d2:	89 2b       	or	r24, r25
    33d4:	11 f4       	brne	.+4      	; 0x33da <puts+0x4c>
    33d6:	c8 01       	movw	r24, r16
    33d8:	02 c0       	rjmp	.+4      	; 0x33de <puts+0x50>
    33da:	8f ef       	ldi	r24, 0xFF	; 255
    33dc:	9f ef       	ldi	r25, 0xFF	; 255
    33de:	df 91       	pop	r29
    33e0:	cf 91       	pop	r28
    33e2:	1f 91       	pop	r17
    33e4:	0f 91       	pop	r16
    33e6:	08 95       	ret

000033e8 <__ultoa_invert>:
    33e8:	fa 01       	movw	r30, r20
    33ea:	aa 27       	eor	r26, r26
    33ec:	28 30       	cpi	r18, 0x08	; 8
    33ee:	51 f1       	breq	.+84     	; 0x3444 <__ultoa_invert+0x5c>
    33f0:	20 31       	cpi	r18, 0x10	; 16
    33f2:	81 f1       	breq	.+96     	; 0x3454 <__ultoa_invert+0x6c>
    33f4:	e8 94       	clt
    33f6:	6f 93       	push	r22
    33f8:	6e 7f       	andi	r22, 0xFE	; 254
    33fa:	6e 5f       	subi	r22, 0xFE	; 254
    33fc:	7f 4f       	sbci	r23, 0xFF	; 255
    33fe:	8f 4f       	sbci	r24, 0xFF	; 255
    3400:	9f 4f       	sbci	r25, 0xFF	; 255
    3402:	af 4f       	sbci	r26, 0xFF	; 255
    3404:	b1 e0       	ldi	r27, 0x01	; 1
    3406:	3e d0       	rcall	.+124    	; 0x3484 <__ultoa_invert+0x9c>
    3408:	b4 e0       	ldi	r27, 0x04	; 4
    340a:	3c d0       	rcall	.+120    	; 0x3484 <__ultoa_invert+0x9c>
    340c:	67 0f       	add	r22, r23
    340e:	78 1f       	adc	r23, r24
    3410:	89 1f       	adc	r24, r25
    3412:	9a 1f       	adc	r25, r26
    3414:	a1 1d       	adc	r26, r1
    3416:	68 0f       	add	r22, r24
    3418:	79 1f       	adc	r23, r25
    341a:	8a 1f       	adc	r24, r26
    341c:	91 1d       	adc	r25, r1
    341e:	a1 1d       	adc	r26, r1
    3420:	6a 0f       	add	r22, r26
    3422:	71 1d       	adc	r23, r1
    3424:	81 1d       	adc	r24, r1
    3426:	91 1d       	adc	r25, r1
    3428:	a1 1d       	adc	r26, r1
    342a:	20 d0       	rcall	.+64     	; 0x346c <__ultoa_invert+0x84>
    342c:	09 f4       	brne	.+2      	; 0x3430 <__ultoa_invert+0x48>
    342e:	68 94       	set
    3430:	3f 91       	pop	r19
    3432:	2a e0       	ldi	r18, 0x0A	; 10
    3434:	26 9f       	mul	r18, r22
    3436:	11 24       	eor	r1, r1
    3438:	30 19       	sub	r19, r0
    343a:	30 5d       	subi	r19, 0xD0	; 208
    343c:	31 93       	st	Z+, r19
    343e:	de f6       	brtc	.-74     	; 0x33f6 <__ultoa_invert+0xe>
    3440:	cf 01       	movw	r24, r30
    3442:	08 95       	ret
    3444:	46 2f       	mov	r20, r22
    3446:	47 70       	andi	r20, 0x07	; 7
    3448:	40 5d       	subi	r20, 0xD0	; 208
    344a:	41 93       	st	Z+, r20
    344c:	b3 e0       	ldi	r27, 0x03	; 3
    344e:	0f d0       	rcall	.+30     	; 0x346e <__ultoa_invert+0x86>
    3450:	c9 f7       	brne	.-14     	; 0x3444 <__ultoa_invert+0x5c>
    3452:	f6 cf       	rjmp	.-20     	; 0x3440 <__ultoa_invert+0x58>
    3454:	46 2f       	mov	r20, r22
    3456:	4f 70       	andi	r20, 0x0F	; 15
    3458:	40 5d       	subi	r20, 0xD0	; 208
    345a:	4a 33       	cpi	r20, 0x3A	; 58
    345c:	18 f0       	brcs	.+6      	; 0x3464 <__ultoa_invert+0x7c>
    345e:	49 5d       	subi	r20, 0xD9	; 217
    3460:	31 fd       	sbrc	r19, 1
    3462:	40 52       	subi	r20, 0x20	; 32
    3464:	41 93       	st	Z+, r20
    3466:	02 d0       	rcall	.+4      	; 0x346c <__ultoa_invert+0x84>
    3468:	a9 f7       	brne	.-22     	; 0x3454 <__ultoa_invert+0x6c>
    346a:	ea cf       	rjmp	.-44     	; 0x3440 <__ultoa_invert+0x58>
    346c:	b4 e0       	ldi	r27, 0x04	; 4
    346e:	a6 95       	lsr	r26
    3470:	97 95       	ror	r25
    3472:	87 95       	ror	r24
    3474:	77 95       	ror	r23
    3476:	67 95       	ror	r22
    3478:	ba 95       	dec	r27
    347a:	c9 f7       	brne	.-14     	; 0x346e <__ultoa_invert+0x86>
    347c:	00 97       	sbiw	r24, 0x00	; 0
    347e:	61 05       	cpc	r22, r1
    3480:	71 05       	cpc	r23, r1
    3482:	08 95       	ret
    3484:	9b 01       	movw	r18, r22
    3486:	ac 01       	movw	r20, r24
    3488:	0a 2e       	mov	r0, r26
    348a:	06 94       	lsr	r0
    348c:	57 95       	ror	r21
    348e:	47 95       	ror	r20
    3490:	37 95       	ror	r19
    3492:	27 95       	ror	r18
    3494:	ba 95       	dec	r27
    3496:	c9 f7       	brne	.-14     	; 0x348a <__ultoa_invert+0xa2>
    3498:	62 0f       	add	r22, r18
    349a:	73 1f       	adc	r23, r19
    349c:	84 1f       	adc	r24, r20
    349e:	95 1f       	adc	r25, r21
    34a0:	a0 1d       	adc	r26, r0
    34a2:	08 95       	ret

000034a4 <_exit>:
    34a4:	f8 94       	cli

000034a6 <__stop_program>:
    34a6:	ff cf       	rjmp	.-2      	; 0x34a6 <__stop_program>
>>>>>>> refs/remotes/origin/master
