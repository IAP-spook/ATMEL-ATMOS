
ATMOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000035e  00800200  000034a8  0000353c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000034a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004ca  0080055e  0080055e  0000389a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000389a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000007c8  00000000  00000000  000038f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00009847  00000000  00000000  000040be  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000308d  00000000  00000000  0000d905  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002f89  00000000  00000000  00010992  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001370  00000000  00000000  0001391c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000223e  00000000  00000000  00014c8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004c85  00000000  00000000  00016eca  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000788  00000000  00000000  0001bb4f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__ctors_end>
       4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      10:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      14:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      18:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      1c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      20:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      24:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      28:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      30:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      34:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      38:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      3c:	0c 94 20 07 	jmp	0xe40	; 0xe40 <__vector_15>
      40:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      44:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      48:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      4c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      50:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      54:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      58:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      5c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      60:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      64:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      68:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      6c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      70:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      74:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      78:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      7c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      80:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      84:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      88:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      8c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      90:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      94:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      98:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      9c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a8:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <__vector_42>
      ac:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      bc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      cc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      dc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      ec:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      fc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     100:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     104:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     108:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     10c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     110:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     114:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     118:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     11c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     120:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     124:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     128:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     12c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     130:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>

00000134 <__trampolines_end>:
     134:	6e 61       	ori	r22, 0x1E	; 30
     136:	6e 00       	.word	0x006e	; ????

00000138 <__c.2159>:
     138:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     148:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     158:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     168:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     178:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     188:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     198:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     208:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     218:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     228:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000236 <__ctors_end>:
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	d1 e2       	ldi	r29, 0x21	; 33
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61

00000242 <__do_copy_data>:
     242:	15 e0       	ldi	r17, 0x05	; 5
     244:	a0 e0       	ldi	r26, 0x00	; 0
     246:	b2 e0       	ldi	r27, 0x02	; 2
     248:	e8 ea       	ldi	r30, 0xA8	; 168
     24a:	f4 e3       	ldi	r31, 0x34	; 52
     24c:	02 c0       	rjmp	.+4      	; 0x252 <__do_copy_data+0x10>
     24e:	05 90       	lpm	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	ae 35       	cpi	r26, 0x5E	; 94
     254:	b1 07       	cpc	r27, r17
     256:	d9 f7       	brne	.-10     	; 0x24e <__do_copy_data+0xc>

00000258 <__do_clear_bss>:
     258:	2a e0       	ldi	r18, 0x0A	; 10
     25a:	ae e5       	ldi	r26, 0x5E	; 94
     25c:	b5 e0       	ldi	r27, 0x05	; 5
     25e:	01 c0       	rjmp	.+2      	; 0x262 <.do_clear_bss_start>

00000260 <.do_clear_bss_loop>:
     260:	1d 92       	st	X+, r1

00000262 <.do_clear_bss_start>:
     262:	a8 32       	cpi	r26, 0x28	; 40
     264:	b2 07       	cpc	r27, r18
     266:	e1 f7       	brne	.-8      	; 0x260 <.do_clear_bss_loop>
     268:	0e 94 3a 01 	call	0x274	; 0x274 <main>
     26c:	0c 94 52 1a 	jmp	0x34a4	; 0x34a4 <_exit>

00000270 <__bad_interrupt>:
     270:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000274 <main>:
}


int main(void)
{
	SYS_Init();
     274:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <SYS_Init>
int SensorDataCount;
DataUnit *cur_data;

/* TODO : clean up these messy init */
static void APP_Init(void){
	PWR_Init();
     278:	0e 94 93 08 	call	0x1126	; 0x1126 <PWR_Init>
	PWR_TurnOn5V();
     27c:	0e 94 97 08 	call	0x112e	; 0x112e <PWR_TurnOn5V>
	USART0_Init(9600);
     280:	60 e8       	ldi	r22, 0x80	; 128
     282:	75 e2       	ldi	r23, 0x25	; 37
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 79 09 	call	0x12f2	; 0x12f2 <USART0_Init>
	DDRB |= 0b00010000;
     28c:	24 9a       	sbi	0x04, 4	; 4
	DDRE |= 0b00001000;
     28e:	6b 9a       	sbi	0x0d, 3	; 13
	PORTE|= 0b00001000;
     290:	73 9a       	sbi	0x0e, 3	; 14
	TWI_Init(10000);
     292:	60 e1       	ldi	r22, 0x10	; 16
     294:	77 e2       	ldi	r23, 0x27	; 39
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 9d 08 	call	0x113a	; 0x113a <TWI_Init>
	ADC_Init();
     29e:	0e 94 14 07 	call	0xe28	; 0xe28 <ADC_Init>
	printf("BMP280 Status %i\n", BMP280_Init());
     2a2:	0e 94 03 02 	call	0x406	; 0x406 <BMP280_Init>
     2a6:	9f 93       	push	r25
     2a8:	8f 93       	push	r24
     2aa:	84 e5       	ldi	r24, 0x54	; 84
     2ac:	92 e0       	ldi	r25, 0x02	; 2
     2ae:	9f 93       	push	r25
     2b0:	8f 93       	push	r24
     2b2:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
	BMP280_SetOversampling(4);
     2b6:	84 e0       	ldi	r24, 0x04	; 4
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 e3 02 	call	0x5c6	; 0x5c6 <BMP280_SetOversampling>
	SPI_SlaveInit();
     2be:	0e 94 99 08 	call	0x1132	; 0x1132 <SPI_SlaveInit>
	SensorDataCount = 0;
     2c2:	10 92 ec 09 	sts	0x09EC, r1
     2c6:	10 92 eb 09 	sts	0x09EB, r1
{
	SYS_Init();
	APP_Init();
	
	// could have sealed following in a function //
	init_timeoutq();
     2ca:	0e 94 62 0c 	call	0x18c4	; 0x18c4 <init_timeoutq>
	BMP280Sensor *BMP280_ptr = New_BMP280_Sensor( 0,2 );
     2ce:	62 e0       	ldi	r22, 0x02	; 2
     2d0:	70 e0       	ldi	r23, 0x00	; 0
     2d2:	80 e0       	ldi	r24, 0x00	; 0
     2d4:	90 e0       	ldi	r25, 0x00	; 0
     2d6:	0e 94 9a 10 	call	0x2134	; 0x2134 <New_BMP280_Sensor>
     2da:	6c 01       	movw	r12, r24
	Si7020Sensor *Si_ptr = New_Si7020_Sensor(0,2);
     2dc:	62 e0       	ldi	r22, 0x02	; 2
     2de:	70 e0       	ldi	r23, 0x00	; 0
     2e0:	80 e0       	ldi	r24, 0x00	; 0
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	0e 94 3e 11 	call	0x227c	; 0x227c <New_Si7020_Sensor>
     2e8:	7c 01       	movw	r14, r24
	
	DemoStorageDevice *Strg_ptr = New_DemoStorage_Device(0);
     2ea:	80 e0       	ldi	r24, 0x00	; 0
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 88 0f 	call	0x1f10	; 0x1f10 <New_DemoStorage_Device>
     2f2:	ec 01       	movw	r28, r24
	LoadDataDevice *Load_ptr = New_LoadData_Device(0,Strg_ptr);
     2f4:	bc 01       	movw	r22, r24
     2f6:	80 e0       	ldi	r24, 0x00	; 0
     2f8:	90 e0       	ldi	r25, 0x00	; 0
     2fa:	0e 94 ff 0f 	call	0x1ffe	; 0x1ffe <New_LoadData_Device>
     2fe:	8c 01       	movw	r16, r24
	
	init_Event_Timer();
     300:	0e 94 6f 07 	call	0xede	; 0xede <init_Event_Timer>
	printf("init done!\n");
     304:	86 e6       	ldi	r24, 0x66	; 102
     306:	92 e0       	ldi	r25, 0x02	; 2
     308:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
	
	// could have sealed following in a function //
	load_new_sensor( 1000, 4000, (BaseSensor *)BMP280_ptr, 0 );
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	a6 01       	movw	r20, r12
     312:	60 ea       	ldi	r22, 0xA0	; 160
     314:	7f e0       	ldi	r23, 0x0F	; 15
     316:	88 ee       	ldi	r24, 0xE8	; 232
     318:	93 e0       	ldi	r25, 0x03	; 3
     31a:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <load_new_sensor>
	load_new_sensor( 3000, 4000, (BaseSensor *)Si_ptr, 0 );
     31e:	20 e0       	ldi	r18, 0x00	; 0
     320:	30 e0       	ldi	r19, 0x00	; 0
     322:	a7 01       	movw	r20, r14
     324:	60 ea       	ldi	r22, 0xA0	; 160
     326:	7f e0       	ldi	r23, 0x0F	; 15
     328:	88 eb       	ldi	r24, 0xB8	; 184
     32a:	9b e0       	ldi	r25, 0x0B	; 11
     32c:	0e 94 ec 0c 	call	0x19d8	; 0x19d8 <load_new_sensor>
	load_new_device( 1000, 12000, (BaseSensor *)Strg_ptr, 0 );
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	ae 01       	movw	r20, r28
     336:	60 ee       	ldi	r22, 0xE0	; 224
     338:	7e e2       	ldi	r23, 0x2E	; 46
     33a:	88 ee       	ldi	r24, 0xE8	; 232
     33c:	93 e0       	ldi	r25, 0x03	; 3
     33e:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <load_new_device>
	load_new_device( 100, 4000, (BaseSensor *)Load_ptr, 0 );
     342:	20 e0       	ldi	r18, 0x00	; 0
     344:	30 e0       	ldi	r19, 0x00	; 0
     346:	a8 01       	movw	r20, r16
     348:	60 ea       	ldi	r22, 0xA0	; 160
     34a:	7f e0       	ldi	r23, 0x0F	; 15
     34c:	84 e6       	ldi	r24, 0x64	; 100
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <load_new_device>
	// load_new_sensor( 4, 4, (BaseSensor *)Si7020_ptr, 0 );
	init_set_timer( get_next_interval() );
     354:	0e 94 92 0c 	call	0x1924	; 0x1924 <get_next_interval>
     358:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <init_set_timer>
	
	// Enable global interrupt //
	sei();
     35c:	78 94       	sei
     35e:	0f 90       	pop	r0
     360:	0f 90       	pop	r0
     362:	0f 90       	pop	r0
     364:	0f 90       	pop	r0
     366:	ff cf       	rjmp	.-2      	; 0x366 <main+0xf2>

00000368 <BMP280_ReadBytes>:
  @brief Reads some bytes from the BMP280
  @param[in] *values pointer to an array to store the bytes, put the starting register in values[0]
  @param[in] length how many bytes to read
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadBytes(unsigned char *values, char length){
     368:	1f 93       	push	r17
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	ec 01       	movw	r28, r24
     370:	16 2f       	mov	r17, r22
	//printf("BMP280_ReadBytes");
	//printf("0x%1x",(unsigned)TWI_BeginWrite(BMP280_ADDR));
	TWI_BeginWrite(BMP280_ADDR);
     372:	86 e7       	ldi	r24, 0x76	; 118
     374:	0e 94 c9 08 	call	0x1192	; 0x1192 <TWI_BeginWrite>
	//printf("0x%1x",(unsigned)TWI_WriteByte(values[0]));
	TWI_WriteByte(values[0]);//Write the register address
     378:	88 81       	ld	r24, Y
     37a:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_WriteByte>
	status = TWI_BeginRead(BMP280_ADDR); //Send a repeated start
     37e:	86 e7       	ldi	r24, 0x76	; 118
     380:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TWI_BeginRead>
     384:	80 93 5e 05 	sts	0x055E, r24
	//printf("0x%1x",status);
	if (status == TWI_SLAR_ACK){
     388:	80 34       	cpi	r24, 0x40	; 64
     38a:	81 f4       	brne	.+32     	; 0x3ac <BMP280_ReadBytes+0x44>
		if(((TWI_Read(&values[0],length,false)&TWSR_MASK) == TWI_REC_NACK) && (TWI_Stop() != 0)) return(1); //Receive bytes, send a STOP bit, and check for success
     38c:	61 2f       	mov	r22, r17
     38e:	70 e0       	ldi	r23, 0x00	; 0
     390:	40 e0       	ldi	r20, 0x00	; 0
     392:	ce 01       	movw	r24, r28
     394:	0e 94 23 09 	call	0x1246	; 0x1246 <TWI_Read>
     398:	88 7f       	andi	r24, 0xF8	; 248
     39a:	88 35       	cpi	r24, 0x58	; 88
     39c:	49 f4       	brne	.+18     	; 0x3b0 <BMP280_ReadBytes+0x48>
     39e:	0e 94 1e 09 	call	0x123c	; 0x123c <TWI_Stop>
     3a2:	91 e0       	ldi	r25, 0x01	; 1
     3a4:	81 11       	cpse	r24, r1
     3a6:	05 c0       	rjmp	.+10     	; 0x3b2 <BMP280_ReadBytes+0x4a>
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	03 c0       	rjmp	.+6      	; 0x3b2 <BMP280_ReadBytes+0x4a>
	}
	return(0);
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	01 c0       	rjmp	.+2      	; 0x3b2 <BMP280_ReadBytes+0x4a>
     3b0:	90 e0       	ldi	r25, 0x00	; 0
}
     3b2:	89 2f       	mov	r24, r25
     3b4:	df 91       	pop	r29
     3b6:	cf 91       	pop	r28
     3b8:	1f 91       	pop	r17
     3ba:	08 95       	ret

000003bc <BMP280_ReadInt>:
  @brief Reads an int from the BMP280
  @param[in] address The register address of the first byte of the uint
  @param[out] val* A pointer to a uint to store the received data to
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadInt(char address, int *val){
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	00 d0       	rcall	.+0      	; 0x3c6 <BMP280_ReadInt+0xa>
     3c6:	cd b7       	in	r28, 0x3d	; 61
     3c8:	de b7       	in	r29, 0x3e	; 62
     3ca:	8b 01       	movw	r16, r22
	//printf("\nBMP280_ReadInt");
	unsigned char data[2];	//char is 4 bits, 1 byte

	data[0] = address;
     3cc:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     3ce:	62 e0       	ldi	r22, 0x02	; 2
     3d0:	ce 01       	movw	r24, r28
     3d2:	01 96       	adiw	r24, 0x01	; 1
     3d4:	0e 94 b4 01 	call	0x368	; 0x368 <BMP280_ReadBytes>
     3d8:	88 23       	and	r24, r24
     3da:	59 f0       	breq	.+22     	; 0x3f2 <BMP280_ReadInt+0x36>
		*val = (((int)data[1]<<8)|(int)data[0]);
     3dc:	8a 81       	ldd	r24, Y+2	; 0x02
     3de:	90 e0       	ldi	r25, 0x00	; 0
     3e0:	98 2f       	mov	r25, r24
     3e2:	88 27       	eor	r24, r24
     3e4:	29 81       	ldd	r18, Y+1	; 0x01
     3e6:	82 2b       	or	r24, r18
     3e8:	f8 01       	movw	r30, r16
     3ea:	91 83       	std	Z+1, r25	; 0x01
     3ec:	80 83       	st	Z, r24
		return(1);
     3ee:	81 e0       	ldi	r24, 0x01	; 1
     3f0:	03 c0       	rjmp	.+6      	; 0x3f8 <BMP280_ReadInt+0x3c>
	}
	*val = 0;
     3f2:	f8 01       	movw	r30, r16
     3f4:	11 82       	std	Z+1, r1	; 0x01
     3f6:	10 82       	st	Z, r1
	return(0);
}
     3f8:	0f 90       	pop	r0
     3fa:	0f 90       	pop	r0
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	1f 91       	pop	r17
     402:	0f 91       	pop	r16
     404:	08 95       	ret

00000406 <BMP280_Init>:

/*************************************************************************//**
  @brief Initializes the BMP280 and reads the calibration data from the device
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
char BMP280_Init(void){
     406:	cf 93       	push	r28
     408:	df 93       	push	r29
     40a:	00 d0       	rcall	.+0      	; 0x40c <BMP280_Init+0x6>
     40c:	cd b7       	in	r28, 0x3d	; 61
     40e:	de b7       	in	r29, 0x3e	; 62
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
     410:	88 e8       	ldi	r24, 0x88	; 136
     412:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     414:	62 e0       	ldi	r22, 0x02	; 2
     416:	ce 01       	movw	r24, r28
     418:	01 96       	adiw	r24, 0x01	; 1
     41a:	0e 94 b4 01 	call	0x368	; 0x368 <BMP280_ReadBytes>
     41e:	88 23       	and	r24, r24
     420:	99 f0       	breq	.+38     	; 0x448 <BMP280_Init+0x42>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     422:	8a 81       	ldd	r24, Y+2	; 0x02
     424:	90 e0       	ldi	r25, 0x00	; 0
     426:	98 2f       	mov	r25, r24
     428:	88 27       	eor	r24, r24
     42a:	29 81       	ldd	r18, Y+1	; 0x01
     42c:	82 2b       	or	r24, r18
     42e:	90 93 69 05 	sts	0x0569, r25
     432:	80 93 68 05 	sts	0x0568, r24

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
     436:	6e e7       	ldi	r22, 0x7E	; 126
     438:	75 e0       	ldi	r23, 0x05	; 5
     43a:	8a e8       	ldi	r24, 0x8A	; 138
     43c:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
	// used in the calculations when taking measurements.

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
     440:	88 23       	and	r24, r24
     442:	09 f4       	brne	.+2      	; 0x446 <BMP280_Init+0x40>
     444:	bb c0       	rjmp	.+374    	; 0x5bc <BMP280_Init+0x1b6>
     446:	05 c0       	rjmp	.+10     	; 0x452 <BMP280_Init+0x4c>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     448:	10 92 69 05 	sts	0x0569, r1
     44c:	10 92 68 05 	sts	0x0568, r1
     450:	b5 c0       	rjmp	.+362    	; 0x5bc <BMP280_Init+0x1b6>
	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
     452:	6c e7       	ldi	r22, 0x7C	; 124
     454:	75 e0       	ldi	r23, 0x05	; 5
     456:	8c e8       	ldi	r24, 0x8C	; 140
     458:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
     45c:	88 23       	and	r24, r24
     45e:	09 f4       	brne	.+2      	; 0x462 <BMP280_Init+0x5c>
     460:	ad c0       	rjmp	.+346    	; 0x5bc <BMP280_Init+0x1b6>
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
     462:	8e e8       	ldi	r24, 0x8E	; 142
     464:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     466:	62 e0       	ldi	r22, 0x02	; 2
     468:	ce 01       	movw	r24, r28
     46a:	01 96       	adiw	r24, 0x01	; 1
     46c:	0e 94 b4 01 	call	0x368	; 0x368 <BMP280_ReadBytes>
     470:	88 23       	and	r24, r24
     472:	99 f0       	breq	.+38     	; 0x49a <BMP280_Init+0x94>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     474:	8a 81       	ldd	r24, Y+2	; 0x02
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	98 2f       	mov	r25, r24
     47a:	88 27       	eor	r24, r24
     47c:	29 81       	ldd	r18, Y+1	; 0x01
     47e:	82 2b       	or	r24, r18
     480:	90 93 6b 05 	sts	0x056B, r25
     484:	80 93 6a 05 	sts	0x056A, r24
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     488:	6a e7       	ldi	r22, 0x7A	; 122
     48a:	75 e0       	ldi	r23, 0x05	; 5
     48c:	80 e9       	ldi	r24, 0x90	; 144
     48e:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
     492:	88 23       	and	r24, r24
     494:	09 f4       	brne	.+2      	; 0x498 <BMP280_Init+0x92>
     496:	92 c0       	rjmp	.+292    	; 0x5bc <BMP280_Init+0x1b6>
     498:	05 c0       	rjmp	.+10     	; 0x4a4 <BMP280_Init+0x9e>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     49a:	10 92 6b 05 	sts	0x056B, r1
     49e:	10 92 6a 05 	sts	0x056A, r1
     4a2:	8c c0       	rjmp	.+280    	; 0x5bc <BMP280_Init+0x1b6>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     4a4:	68 e7       	ldi	r22, 0x78	; 120
     4a6:	75 e0       	ldi	r23, 0x05	; 5
     4a8:	82 e9       	ldi	r24, 0x92	; 146
     4aa:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     4ae:	88 23       	and	r24, r24
     4b0:	09 f4       	brne	.+2      	; 0x4b4 <BMP280_Init+0xae>
     4b2:	84 c0       	rjmp	.+264    	; 0x5bc <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     4b4:	66 e7       	ldi	r22, 0x76	; 118
     4b6:	75 e0       	ldi	r23, 0x05	; 5
     4b8:	84 e9       	ldi	r24, 0x94	; 148
     4ba:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     4be:	88 23       	and	r24, r24
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <BMP280_Init+0xbe>
     4c2:	7c c0       	rjmp	.+248    	; 0x5bc <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     4c4:	64 e7       	ldi	r22, 0x74	; 116
     4c6:	75 e0       	ldi	r23, 0x05	; 5
     4c8:	86 e9       	ldi	r24, 0x96	; 150
     4ca:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     4ce:	88 23       	and	r24, r24
     4d0:	09 f4       	brne	.+2      	; 0x4d4 <BMP280_Init+0xce>
     4d2:	74 c0       	rjmp	.+232    	; 0x5bc <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     4d4:	62 e7       	ldi	r22, 0x72	; 114
     4d6:	75 e0       	ldi	r23, 0x05	; 5
     4d8:	88 e9       	ldi	r24, 0x98	; 152
     4da:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     4de:	88 23       	and	r24, r24
     4e0:	09 f4       	brne	.+2      	; 0x4e4 <BMP280_Init+0xde>
     4e2:	6c c0       	rjmp	.+216    	; 0x5bc <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     4e4:	60 e7       	ldi	r22, 0x70	; 112
     4e6:	75 e0       	ldi	r23, 0x05	; 5
     4e8:	8a e9       	ldi	r24, 0x9A	; 154
     4ea:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     4ee:	88 23       	and	r24, r24
     4f0:	09 f4       	brne	.+2      	; 0x4f4 <BMP280_Init+0xee>
     4f2:	64 c0       	rjmp	.+200    	; 0x5bc <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     4f4:	6e e6       	ldi	r22, 0x6E	; 110
     4f6:	75 e0       	ldi	r23, 0x05	; 5
     4f8:	8c e9       	ldi	r24, 0x9C	; 156
     4fa:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     4fe:	88 23       	and	r24, r24
     500:	09 f4       	brne	.+2      	; 0x504 <BMP280_Init+0xfe>
     502:	5c c0       	rjmp	.+184    	; 0x5bc <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9C, &dig_P8)  &&
		BMP280_ReadInt(0x9E, &dig_P9)){
     504:	6c e6       	ldi	r22, 0x6C	; 108
     506:	75 e0       	ldi	r23, 0x05	; 5
     508:	8e e9       	ldi	r24, 0x9E	; 158
     50a:	0e 94 de 01 	call	0x3bc	; 0x3bc <BMP280_ReadInt>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     50e:	88 23       	and	r24, r24
     510:	09 f4       	brne	.+2      	; 0x514 <BMP280_Init+0x10e>
     512:	54 c0       	rjmp	.+168    	; 0x5bc <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9E, &dig_P9)){
			printf("\nT: %i ,%i ,%i P: %i ,%i ,%i ,%i ,%i ,%i ,%i ,%1 ,%i \n",dig_T1,dig_T2,dig_T3,dig_P1,dig_P2,dig_P3,dig_P4,dig_P5,dig_P6,dig_P7,dig_P8,dig_P9);
     514:	80 91 6d 05 	lds	r24, 0x056D
     518:	8f 93       	push	r24
     51a:	80 91 6c 05 	lds	r24, 0x056C
     51e:	8f 93       	push	r24
     520:	80 91 6f 05 	lds	r24, 0x056F
     524:	8f 93       	push	r24
     526:	80 91 6e 05 	lds	r24, 0x056E
     52a:	8f 93       	push	r24
     52c:	80 91 71 05 	lds	r24, 0x0571
     530:	8f 93       	push	r24
     532:	80 91 70 05 	lds	r24, 0x0570
     536:	8f 93       	push	r24
     538:	80 91 73 05 	lds	r24, 0x0573
     53c:	8f 93       	push	r24
     53e:	80 91 72 05 	lds	r24, 0x0572
     542:	8f 93       	push	r24
     544:	80 91 75 05 	lds	r24, 0x0575
     548:	8f 93       	push	r24
     54a:	80 91 74 05 	lds	r24, 0x0574
     54e:	8f 93       	push	r24
     550:	80 91 77 05 	lds	r24, 0x0577
     554:	8f 93       	push	r24
     556:	80 91 76 05 	lds	r24, 0x0576
     55a:	8f 93       	push	r24
     55c:	80 91 79 05 	lds	r24, 0x0579
     560:	8f 93       	push	r24
     562:	80 91 78 05 	lds	r24, 0x0578
     566:	8f 93       	push	r24
     568:	80 91 7b 05 	lds	r24, 0x057B
     56c:	8f 93       	push	r24
     56e:	80 91 7a 05 	lds	r24, 0x057A
     572:	8f 93       	push	r24
     574:	80 91 6b 05 	lds	r24, 0x056B
     578:	8f 93       	push	r24
     57a:	80 91 6a 05 	lds	r24, 0x056A
     57e:	8f 93       	push	r24
     580:	80 91 7d 05 	lds	r24, 0x057D
     584:	8f 93       	push	r24
     586:	80 91 7c 05 	lds	r24, 0x057C
     58a:	8f 93       	push	r24
     58c:	80 91 7f 05 	lds	r24, 0x057F
     590:	8f 93       	push	r24
     592:	80 91 7e 05 	lds	r24, 0x057E
     596:	8f 93       	push	r24
     598:	80 91 69 05 	lds	r24, 0x0569
     59c:	8f 93       	push	r24
     59e:	80 91 68 05 	lds	r24, 0x0568
     5a2:	8f 93       	push	r24
     5a4:	81 e7       	ldi	r24, 0x71	; 113
     5a6:	92 e0       	ldi	r25, 0x02	; 2
     5a8:	9f 93       	push	r25
     5aa:	8f 93       	push	r24
     5ac:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
		return (1);
     5b0:	0f b6       	in	r0, 0x3f	; 63
     5b2:	f8 94       	cli
     5b4:	de bf       	out	0x3e, r29	; 62
     5b6:	0f be       	out	0x3f, r0	; 63
     5b8:	cd bf       	out	0x3d, r28	; 61
     5ba:	81 e0       	ldi	r24, 0x01	; 1
	}
	else 
		return (0);
}
     5bc:	0f 90       	pop	r0
     5be:	0f 90       	pop	r0
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	08 95       	ret

000005c6 <BMP280_SetOversampling>:
  @brief Sets the oversampling setting for the library
  @param[in] oss Oversampling setting
  @return 1
*****************************************************************************/
char BMP280_SetOversampling(short oss){
	oversampling = oss;
     5c6:	90 93 67 05 	sts	0x0567, r25
     5ca:	80 93 66 05 	sts	0x0566, r24
	return (1);
}
     5ce:	81 e0       	ldi	r24, 0x01	; 1
     5d0:	08 95       	ret

000005d2 <BMP280_StartMeasurment>:

/*************************************************************************//**
  @brief Starts a measurement
  @return time to wait for result (in ms)
*****************************************************************************/
char BMP280_StartMeasurment(void){
     5d2:	1f 93       	push	r17
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	00 d0       	rcall	.+0      	; 0x5da <BMP280_StartMeasurment+0x8>
     5da:	cd b7       	in	r28, 0x3d	; 61
     5dc:	de b7       	in	r29, 0x3e	; 62
	unsigned char data[2], result, delay;
	
	data[0] = BMP280_REG_CONTROL;
     5de:	84 ef       	ldi	r24, 0xF4	; 244
     5e0:	89 83       	std	Y+1, r24	; 0x01

	switch (oversampling){
     5e2:	80 91 66 05 	lds	r24, 0x0566
     5e6:	90 91 67 05 	lds	r25, 0x0567
     5ea:	82 30       	cpi	r24, 0x02	; 2
     5ec:	91 05       	cpc	r25, r1
     5ee:	01 f1       	breq	.+64     	; 0x630 <BMP280_StartMeasurment+0x5e>
     5f0:	2c f4       	brge	.+10     	; 0x5fc <BMP280_StartMeasurment+0x2a>
     5f2:	00 97       	sbiw	r24, 0x00	; 0
     5f4:	49 f0       	breq	.+18     	; 0x608 <BMP280_StartMeasurment+0x36>
     5f6:	01 97       	sbiw	r24, 0x01	; 1
     5f8:	89 f0       	breq	.+34     	; 0x61c <BMP280_StartMeasurment+0x4a>
     5fa:	38 c0       	rjmp	.+112    	; 0x66c <BMP280_StartMeasurment+0x9a>
     5fc:	83 30       	cpi	r24, 0x03	; 3
     5fe:	91 05       	cpc	r25, r1
     600:	09 f1       	breq	.+66     	; 0x644 <BMP280_StartMeasurment+0x72>
     602:	04 97       	sbiw	r24, 0x04	; 4
     604:	49 f1       	breq	.+82     	; 0x658 <BMP280_StartMeasurment+0x86>
     606:	32 c0       	rjmp	.+100    	; 0x66c <BMP280_StartMeasurment+0x9a>
		case 0:
		data[1] = BMP280_COMMAND_PRESSURE0;
     608:	85 e2       	ldi	r24, 0x25	; 37
     60a:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	90 e0       	ldi	r25, 0x00	; 0
     610:	90 93 65 05 	sts	0x0565, r25
     614:	80 93 64 05 	sts	0x0564, r24
		delay = 8;
     618:	18 e0       	ldi	r17, 0x08	; 8
		break;
     61a:	2b c0       	rjmp	.+86     	; 0x672 <BMP280_StartMeasurment+0xa0>
		case 1:
		data[1] = BMP280_COMMAND_PRESSURE1;
     61c:	89 e2       	ldi	r24, 0x29	; 41
     61e:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     620:	81 e0       	ldi	r24, 0x01	; 1
     622:	90 e0       	ldi	r25, 0x00	; 0
     624:	90 93 65 05 	sts	0x0565, r25
     628:	80 93 64 05 	sts	0x0564, r24
		delay = 10;
     62c:	1a e0       	ldi	r17, 0x0A	; 10
		break;
     62e:	21 c0       	rjmp	.+66     	; 0x672 <BMP280_StartMeasurment+0xa0>
		case 2:
		data[1] = BMP280_COMMAND_PRESSURE2;
     630:	8d e2       	ldi	r24, 0x2D	; 45
     632:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	90 93 65 05 	sts	0x0565, r25
     63c:	80 93 64 05 	sts	0x0564, r24
		delay = 15;
     640:	1f e0       	ldi	r17, 0x0F	; 15
		break;
     642:	17 c0       	rjmp	.+46     	; 0x672 <BMP280_StartMeasurment+0xa0>
		case 3:
		data[1] = BMP280_COMMAND_PRESSURE3;
     644:	81 e3       	ldi	r24, 0x31	; 49
     646:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	90 e0       	ldi	r25, 0x00	; 0
     64c:	90 93 65 05 	sts	0x0565, r25
     650:	80 93 64 05 	sts	0x0564, r24
		delay = 24;
     654:	18 e1       	ldi	r17, 0x18	; 24
		break;
     656:	0d c0       	rjmp	.+26     	; 0x672 <BMP280_StartMeasurment+0xa0>
		case 4:
		data[1] = BMP280_COMMAND_PRESSURE4;
     658:	8d e5       	ldi	r24, 0x5D	; 93
     65a:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     65c:	81 e0       	ldi	r24, 0x01	; 1
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	90 93 65 05 	sts	0x0565, r25
     664:	80 93 64 05 	sts	0x0564, r24
		delay = 45;
     668:	1d e2       	ldi	r17, 0x2D	; 45
		break;
     66a:	03 c0       	rjmp	.+6      	; 0x672 <BMP280_StartMeasurment+0xa0>
		default:
		data[1] = BMP280_COMMAND_PRESSURE0;
     66c:	85 e2       	ldi	r24, 0x25	; 37
     66e:	8a 83       	std	Y+2, r24	; 0x02
		delay = 9;
     670:	19 e0       	ldi	r17, 0x09	; 9
  @param[in] *values pointer to an array to send, put the starting register in values[0]
  @param[in] length how many bytes to write (including the starting register ie. sizeof(values))
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_WriteBytes(unsigned char *values, char length){
	TWI_BeginWrite(BMP280_ADDR);
     672:	86 e7       	ldi	r24, 0x76	; 118
     674:	0e 94 c9 08 	call	0x1192	; 0x1192 <TWI_BeginWrite>
	if((TWI_Write(&values[0],length) == TWI_SENT_ACK) && (TWI_Stop() != 0)) return 1; //Send bytes, a STOP bit, and check for success
     678:	62 e0       	ldi	r22, 0x02	; 2
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	ce 01       	movw	r24, r28
     67e:	01 96       	adiw	r24, 0x01	; 1
     680:	0e 94 5f 09 	call	0x12be	; 0x12be <TWI_Write>
     684:	88 32       	cpi	r24, 0x28	; 40
     686:	31 f4       	brne	.+12     	; 0x694 <BMP280_StartMeasurment+0xc2>
     688:	0e 94 1e 09 	call	0x123c	; 0x123c <TWI_Stop>
		data[1] = BMP280_COMMAND_PRESSURE0;
		delay = 9;
		break;
	}
	result = BMP280_WriteBytes(&data[0], 2);
	if (result) // good write?
     68c:	81 11       	cpse	r24, r1
     68e:	04 c0       	rjmp	.+8      	; 0x698 <BMP280_StartMeasurment+0xc6>
	return(delay); // return the delay in ms (rounded up) to wait before retrieving data
	else
	return(-1); // or return -1 if there was a problem communicating with the BMP
     690:	8f ef       	ldi	r24, 0xFF	; 255
     692:	03 c0       	rjmp	.+6      	; 0x69a <BMP280_StartMeasurment+0xc8>
     694:	8f ef       	ldi	r24, 0xFF	; 255
     696:	01 c0       	rjmp	.+2      	; 0x69a <BMP280_StartMeasurment+0xc8>
		delay = 9;
		break;
	}
	result = BMP280_WriteBytes(&data[0], 2);
	if (result) // good write?
	return(delay); // return the delay in ms (rounded up) to wait before retrieving data
     698:	81 2f       	mov	r24, r17
	else
	return(-1); // or return -1 if there was a problem communicating with the BMP
}
     69a:	0f 90       	pop	r0
     69c:	0f 90       	pop	r0
     69e:	df 91       	pop	r29
     6a0:	cf 91       	pop	r28
     6a2:	1f 91       	pop	r17
     6a4:	08 95       	ret

000006a6 <BMP280_GetUnPT>:
  @brief Gets the uncalibrated temperature and pressure data
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetUnPT(double *uP, double *uT){
     6a6:	8f 92       	push	r8
     6a8:	9f 92       	push	r9
     6aa:	bf 92       	push	r11
     6ac:	cf 92       	push	r12
     6ae:	df 92       	push	r13
     6b0:	ef 92       	push	r14
     6b2:	ff 92       	push	r15
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	df 93       	push	r29
     6bc:	00 d0       	rcall	.+0      	; 0x6be <BMP280_GetUnPT+0x18>
     6be:	00 d0       	rcall	.+0      	; 0x6c0 <BMP280_GetUnPT+0x1a>
     6c0:	00 d0       	rcall	.+0      	; 0x6c2 <BMP280_GetUnPT+0x1c>
     6c2:	cd b7       	in	r28, 0x3d	; 61
     6c4:	de b7       	in	r29, 0x3e	; 62
     6c6:	4c 01       	movw	r8, r24
     6c8:	8b 01       	movw	r16, r22
	unsigned char data[6];
	char result;
	
	data[0] = BMP280_REG_RESULT_PRESSURE; //0xF7
     6ca:	87 ef       	ldi	r24, 0xF7	; 247
     6cc:	89 83       	std	Y+1, r24	; 0x01

	result = BMP280_ReadBytes(&data[0], 6); // 0xF7; xF8, 0xF9, 0xFA, 0xFB, 0xFC
     6ce:	66 e0       	ldi	r22, 0x06	; 6
     6d0:	ce 01       	movw	r24, r28
     6d2:	01 96       	adiw	r24, 0x01	; 1
     6d4:	0e 94 b4 01 	call	0x368	; 0x368 <BMP280_ReadBytes>
     6d8:	b8 2e       	mov	r11, r24
	if (result){ // good read
     6da:	88 23       	and	r24, r24
     6dc:	09 f4       	brne	.+2      	; 0x6e0 <BMP280_GetUnPT+0x3a>
     6de:	72 c0       	rjmp	.+228    	; 0x7c4 <BMP280_GetUnPT+0x11e>
		double factor = pow(2, 4);
		*uP = (( (data[0] *256.0) + data[1] + (data[2]/256.0))) * factor ;	//20bit UP
     6e0:	69 81       	ldd	r22, Y+1	; 0x01
     6e2:	70 e0       	ldi	r23, 0x00	; 0
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     6ec:	20 e0       	ldi	r18, 0x00	; 0
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	40 e8       	ldi	r20, 0x80	; 128
     6f2:	53 e4       	ldi	r21, 0x43	; 67
     6f4:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     6f8:	6b 01       	movw	r12, r22
     6fa:	7c 01       	movw	r14, r24
     6fc:	6a 81       	ldd	r22, Y+2	; 0x02
     6fe:	70 e0       	ldi	r23, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     708:	9b 01       	movw	r18, r22
     70a:	ac 01       	movw	r20, r24
     70c:	c7 01       	movw	r24, r14
     70e:	b6 01       	movw	r22, r12
     710:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
     714:	6b 01       	movw	r12, r22
     716:	7c 01       	movw	r14, r24
     718:	6b 81       	ldd	r22, Y+3	; 0x03
     71a:	70 e0       	ldi	r23, 0x00	; 0
     71c:	80 e0       	ldi	r24, 0x00	; 0
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	40 e8       	ldi	r20, 0x80	; 128
     72a:	5b e3       	ldi	r21, 0x3B	; 59
     72c:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     730:	9b 01       	movw	r18, r22
     732:	ac 01       	movw	r20, r24
     734:	c7 01       	movw	r24, r14
     736:	b6 01       	movw	r22, r12
     738:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
     73c:	20 e0       	ldi	r18, 0x00	; 0
     73e:	30 e0       	ldi	r19, 0x00	; 0
     740:	40 e8       	ldi	r20, 0x80	; 128
     742:	51 e4       	ldi	r21, 0x41	; 65
     744:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     748:	f4 01       	movw	r30, r8
     74a:	60 83       	st	Z, r22
     74c:	71 83       	std	Z+1, r23	; 0x01
     74e:	82 83       	std	Z+2, r24	; 0x02
     750:	93 83       	std	Z+3, r25	; 0x03
		*uT = (( (data[3] *256.0) + data[4] + (data[5]/256.0))) * factor ;	//20bit UT
     752:	6c 81       	ldd	r22, Y+4	; 0x04
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	80 e0       	ldi	r24, 0x00	; 0
     758:	90 e0       	ldi	r25, 0x00	; 0
     75a:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     75e:	20 e0       	ldi	r18, 0x00	; 0
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	40 e8       	ldi	r20, 0x80	; 128
     764:	53 e4       	ldi	r21, 0x43	; 67
     766:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     76a:	6b 01       	movw	r12, r22
     76c:	7c 01       	movw	r14, r24
     76e:	6d 81       	ldd	r22, Y+5	; 0x05
     770:	70 e0       	ldi	r23, 0x00	; 0
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     77a:	9b 01       	movw	r18, r22
     77c:	ac 01       	movw	r20, r24
     77e:	c7 01       	movw	r24, r14
     780:	b6 01       	movw	r22, r12
     782:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
     786:	6b 01       	movw	r12, r22
     788:	7c 01       	movw	r14, r24
     78a:	6e 81       	ldd	r22, Y+6	; 0x06
     78c:	70 e0       	ldi	r23, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     796:	20 e0       	ldi	r18, 0x00	; 0
     798:	30 e0       	ldi	r19, 0x00	; 0
     79a:	40 e8       	ldi	r20, 0x80	; 128
     79c:	5b e3       	ldi	r21, 0x3B	; 59
     79e:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     7a2:	9b 01       	movw	r18, r22
     7a4:	ac 01       	movw	r20, r24
     7a6:	c7 01       	movw	r24, r14
     7a8:	b6 01       	movw	r22, r12
     7aa:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
     7ae:	20 e0       	ldi	r18, 0x00	; 0
     7b0:	30 e0       	ldi	r19, 0x00	; 0
     7b2:	40 e8       	ldi	r20, 0x80	; 128
     7b4:	51 e4       	ldi	r21, 0x41	; 65
     7b6:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     7ba:	f8 01       	movw	r30, r16
     7bc:	60 83       	st	Z, r22
     7be:	71 83       	std	Z+1, r23	; 0x01
     7c0:	82 83       	std	Z+2, r24	; 0x02
     7c2:	93 83       	std	Z+3, r25	; 0x03
		
	}
	return(result);
}
     7c4:	8b 2d       	mov	r24, r11
     7c6:	26 96       	adiw	r28, 0x06	; 6
     7c8:	0f b6       	in	r0, 0x3f	; 63
     7ca:	f8 94       	cli
     7cc:	de bf       	out	0x3e, r29	; 62
     7ce:	0f be       	out	0x3f, r0	; 63
     7d0:	cd bf       	out	0x3d, r28	; 61
     7d2:	df 91       	pop	r29
     7d4:	cf 91       	pop	r28
     7d6:	1f 91       	pop	r17
     7d8:	0f 91       	pop	r16
     7da:	ff 90       	pop	r15
     7dc:	ef 90       	pop	r14
     7de:	df 90       	pop	r13
     7e0:	cf 90       	pop	r12
     7e2:	bf 90       	pop	r11
     7e4:	9f 90       	pop	r9
     7e6:	8f 90       	pop	r8
     7e8:	08 95       	ret

000007ea <BMP280_CalcTemperature>:
  @brief Calculates temperature
  @param[out] pointer to a place to store the temperature data
  @param[in] pointer to the uncalibrated temperature data
  @return status
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
     7ea:	4f 92       	push	r4
     7ec:	5f 92       	push	r5
     7ee:	6f 92       	push	r6
     7f0:	7f 92       	push	r7
     7f2:	8f 92       	push	r8
     7f4:	9f 92       	push	r9
     7f6:	af 92       	push	r10
     7f8:	bf 92       	push	r11
     7fa:	cf 92       	push	r12
     7fc:	df 92       	push	r13
     7fe:	ef 92       	push	r14
     800:	ff 92       	push	r15
     802:	cf 93       	push	r28
     804:	df 93       	push	r29
     806:	ec 01       	movw	r28, r24
	double adc_T = *uT ;
     808:	fb 01       	movw	r30, r22
     80a:	40 80       	ld	r4, Z
     80c:	51 80       	ldd	r5, Z+1	; 0x01
     80e:	62 80       	ldd	r6, Z+2	; 0x02
     810:	73 80       	ldd	r7, Z+3	; 0x03
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
     812:	60 91 68 05 	lds	r22, 0x0568
     816:	70 91 69 05 	lds	r23, 0x0569
     81a:	80 e0       	ldi	r24, 0x00	; 0
     81c:	90 e0       	ldi	r25, 0x00	; 0
     81e:	0e 94 7f 12 	call	0x24fe	; 0x24fe <__floatunsisf>
     822:	4b 01       	movw	r8, r22
     824:	5c 01       	movw	r10, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	40 e0       	ldi	r20, 0x00	; 0
     82c:	57 e3       	ldi	r21, 0x37	; 55
     82e:	c3 01       	movw	r24, r6
     830:	b2 01       	movw	r22, r4
     832:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     836:	6b 01       	movw	r12, r22
     838:	7c 01       	movw	r14, r24
     83a:	20 e0       	ldi	r18, 0x00	; 0
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	40 e0       	ldi	r20, 0x00	; 0
     840:	59 e3       	ldi	r21, 0x39	; 57
     842:	c5 01       	movw	r24, r10
     844:	b4 01       	movw	r22, r8
     846:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     84a:	9b 01       	movw	r18, r22
     84c:	ac 01       	movw	r20, r24
     84e:	c7 01       	movw	r24, r14
     850:	b6 01       	movw	r22, r12
     852:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__subsf3>
     856:	6b 01       	movw	r12, r22
     858:	7c 01       	movw	r14, r24
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
	double adc_T = *uT ;
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
     85a:	20 e0       	ldi	r18, 0x00	; 0
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	40 e8       	ldi	r20, 0x80	; 128
     860:	58 e3       	ldi	r21, 0x38	; 56
     862:	c3 01       	movw	r24, r6
     864:	b2 01       	movw	r22, r4
     866:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     86a:	2b 01       	movw	r4, r22
     86c:	3c 01       	movw	r6, r24
     86e:	20 e0       	ldi	r18, 0x00	; 0
     870:	30 e0       	ldi	r19, 0x00	; 0
     872:	40 e8       	ldi	r20, 0x80	; 128
     874:	5a e3       	ldi	r21, 0x3A	; 58
     876:	c5 01       	movw	r24, r10
     878:	b4 01       	movw	r22, r8
     87a:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     87e:	9b 01       	movw	r18, r22
     880:	ac 01       	movw	r20, r24
     882:	c3 01       	movw	r24, r6
     884:	b2 01       	movw	r22, r4
     886:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__subsf3>
     88a:	4b 01       	movw	r8, r22
     88c:	5c 01       	movw	r10, r24
     88e:	60 91 7e 05 	lds	r22, 0x057E
     892:	70 91 7f 05 	lds	r23, 0x057F
     896:	88 27       	eor	r24, r24
     898:	77 fd       	sbrc	r23, 7
     89a:	80 95       	com	r24
     89c:	98 2f       	mov	r25, r24
     89e:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     8a2:	9b 01       	movw	r18, r22
     8a4:	ac 01       	movw	r20, r24
     8a6:	c5 01       	movw	r24, r10
     8a8:	b4 01       	movw	r22, r8
     8aa:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     8ae:	4b 01       	movw	r8, r22
     8b0:	5c 01       	movw	r10, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
     8b2:	a7 01       	movw	r20, r14
     8b4:	96 01       	movw	r18, r12
     8b6:	c7 01       	movw	r24, r14
     8b8:	b6 01       	movw	r22, r12
     8ba:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     8be:	6b 01       	movw	r12, r22
     8c0:	7c 01       	movw	r14, r24
     8c2:	60 91 7c 05 	lds	r22, 0x057C
     8c6:	70 91 7d 05 	lds	r23, 0x057D
     8ca:	88 27       	eor	r24, r24
     8cc:	77 fd       	sbrc	r23, 7
     8ce:	80 95       	com	r24
     8d0:	98 2f       	mov	r25, r24
     8d2:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     8d6:	9b 01       	movw	r18, r22
     8d8:	ac 01       	movw	r20, r24
     8da:	c7 01       	movw	r24, r14
     8dc:	b6 01       	movw	r22, r12
     8de:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     8e2:	9b 01       	movw	r18, r22
     8e4:	ac 01       	movw	r20, r24
	t_fine = (long signed int)(var1+var2);
     8e6:	c5 01       	movw	r24, r10
     8e8:	b4 01       	movw	r22, r8
     8ea:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
     8ee:	6b 01       	movw	r12, r22
     8f0:	7c 01       	movw	r14, r24
     8f2:	0e 94 4e 12 	call	0x249c	; 0x249c <__fixsfsi>
     8f6:	60 93 60 05 	sts	0x0560, r22
     8fa:	70 93 61 05 	sts	0x0561, r23
     8fe:	80 93 62 05 	sts	0x0562, r24
     902:	90 93 63 05 	sts	0x0563, r25
	
	*T = (var1+var2)/5120.0;
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	40 ea       	ldi	r20, 0xA0	; 160
     90c:	55 e4       	ldi	r21, 0x45	; 69
     90e:	c7 01       	movw	r24, r14
     910:	b6 01       	movw	r22, r12
     912:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__divsf3>
     916:	6b 01       	movw	r12, r22
     918:	7c 01       	movw	r14, r24
     91a:	68 83       	st	Y, r22
     91c:	79 83       	std	Y+1, r23	; 0x01
     91e:	8a 83       	std	Y+2, r24	; 0x02
     920:	9b 83       	std	Y+3, r25	; 0x03
	
	if(*T>100.0 || *T <(-100.0))return 0;
     922:	20 e0       	ldi	r18, 0x00	; 0
     924:	30 e0       	ldi	r19, 0x00	; 0
     926:	48 ec       	ldi	r20, 0xC8	; 200
     928:	52 e4       	ldi	r21, 0x42	; 66
     92a:	0e 94 31 13 	call	0x2662	; 0x2662 <__gesf2>
     92e:	18 16       	cp	r1, r24
     930:	74 f0       	brlt	.+28     	; 0x94e <BMP280_CalcTemperature+0x164>
     932:	20 e0       	ldi	r18, 0x00	; 0
     934:	30 e0       	ldi	r19, 0x00	; 0
     936:	48 ec       	ldi	r20, 0xC8	; 200
     938:	52 ec       	ldi	r21, 0xC2	; 194
     93a:	c7 01       	movw	r24, r14
     93c:	b6 01       	movw	r22, r12
     93e:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__cmpsf2>
     942:	88 1f       	adc	r24, r24
     944:	88 27       	eor	r24, r24
     946:	88 1f       	adc	r24, r24
     948:	91 e0       	ldi	r25, 0x01	; 1
     94a:	89 27       	eor	r24, r25
     94c:	01 c0       	rjmp	.+2      	; 0x950 <BMP280_CalcTemperature+0x166>
     94e:	80 e0       	ldi	r24, 0x00	; 0
	
	return (1);
}
     950:	df 91       	pop	r29
     952:	cf 91       	pop	r28
     954:	ff 90       	pop	r15
     956:	ef 90       	pop	r14
     958:	df 90       	pop	r13
     95a:	cf 90       	pop	r12
     95c:	bf 90       	pop	r11
     95e:	af 90       	pop	r10
     960:	9f 90       	pop	r9
     962:	8f 90       	pop	r8
     964:	7f 90       	pop	r7
     966:	6f 90       	pop	r6
     968:	5f 90       	pop	r5
     96a:	4f 90       	pop	r4
     96c:	08 95       	ret

0000096e <BMP280_CalcPressure>:
  @brief Calculates pressure
  @param[out] pointer to a place to store the pressure data
  @param[in] pointer to the uncalibrated pressure data
  @return status
*****************************************************************************/
char BMP280_CalcPressure(double *P,double *uP){
     96e:	4f 92       	push	r4
     970:	5f 92       	push	r5
     972:	6f 92       	push	r6
     974:	7f 92       	push	r7
     976:	8f 92       	push	r8
     978:	9f 92       	push	r9
     97a:	af 92       	push	r10
     97c:	bf 92       	push	r11
     97e:	cf 92       	push	r12
     980:	df 92       	push	r13
     982:	ef 92       	push	r14
     984:	ff 92       	push	r15
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	cf 93       	push	r28
     98c:	df 93       	push	r29
     98e:	8c 01       	movw	r16, r24
     990:	eb 01       	movw	r28, r22
	//char result;
	double var1 , var2 ;
	
	var1 = ((double)t_fine/2.0) - 64000.0;
     992:	60 91 60 05 	lds	r22, 0x0560
     996:	70 91 61 05 	lds	r23, 0x0561
     99a:	80 91 62 05 	lds	r24, 0x0562
     99e:	90 91 63 05 	lds	r25, 0x0563
     9a2:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     9a6:	20 e0       	ldi	r18, 0x00	; 0
     9a8:	30 e0       	ldi	r19, 0x00	; 0
     9aa:	40 e0       	ldi	r20, 0x00	; 0
     9ac:	5f e3       	ldi	r21, 0x3F	; 63
     9ae:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     9b2:	20 e0       	ldi	r18, 0x00	; 0
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	4a e7       	ldi	r20, 0x7A	; 122
     9b8:	57 e4       	ldi	r21, 0x47	; 71
     9ba:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__subsf3>
     9be:	6b 01       	movw	r12, r22
     9c0:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
     9c2:	60 91 72 05 	lds	r22, 0x0572
     9c6:	70 91 73 05 	lds	r23, 0x0573
     9ca:	88 27       	eor	r24, r24
     9cc:	77 fd       	sbrc	r23, 7
     9ce:	80 95       	com	r24
     9d0:	98 2f       	mov	r25, r24
     9d2:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     9d6:	a7 01       	movw	r20, r14
     9d8:	96 01       	movw	r18, r12
     9da:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	40 e0       	ldi	r20, 0x00	; 0
     9e4:	58 e3       	ldi	r21, 0x38	; 56
     9e6:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     9ea:	a7 01       	movw	r20, r14
     9ec:	96 01       	movw	r18, r12
     9ee:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     9f2:	4b 01       	movw	r8, r22
     9f4:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
     9f6:	60 91 74 05 	lds	r22, 0x0574
     9fa:	70 91 75 05 	lds	r23, 0x0575
     9fe:	88 27       	eor	r24, r24
     a00:	77 fd       	sbrc	r23, 7
     a02:	80 95       	com	r24
     a04:	98 2f       	mov	r25, r24
     a06:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     a0a:	a7 01       	movw	r20, r14
     a0c:	96 01       	movw	r18, r12
     a0e:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     a12:	9b 01       	movw	r18, r22
     a14:	ac 01       	movw	r20, r24
     a16:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
     a1a:	a5 01       	movw	r20, r10
     a1c:	94 01       	movw	r18, r8
     a1e:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
     a22:	20 e0       	ldi	r18, 0x00	; 0
     a24:	30 e0       	ldi	r19, 0x00	; 0
     a26:	40 e8       	ldi	r20, 0x80	; 128
     a28:	5e e3       	ldi	r21, 0x3E	; 62
     a2a:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     a2e:	4b 01       	movw	r8, r22
     a30:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var1 = (((double)dig_P3) * var1 * var1/524288.0 + ((double)dig_P2) * var1) / 524288.0;
     a32:	60 91 78 05 	lds	r22, 0x0578
     a36:	70 91 79 05 	lds	r23, 0x0579
     a3a:	88 27       	eor	r24, r24
     a3c:	77 fd       	sbrc	r23, 7
     a3e:	80 95       	com	r24
     a40:	98 2f       	mov	r25, r24
     a42:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     a46:	a7 01       	movw	r20, r14
     a48:	96 01       	movw	r18, r12
     a4a:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     a4e:	a7 01       	movw	r20, r14
     a50:	96 01       	movw	r18, r12
     a52:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e0       	ldi	r20, 0x00	; 0
     a5c:	56 e3       	ldi	r21, 0x36	; 54
     a5e:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     a62:	2b 01       	movw	r4, r22
     a64:	3c 01       	movw	r6, r24
     a66:	60 91 7a 05 	lds	r22, 0x057A
     a6a:	70 91 7b 05 	lds	r23, 0x057B
     a6e:	88 27       	eor	r24, r24
     a70:	77 fd       	sbrc	r23, 7
     a72:	80 95       	com	r24
     a74:	98 2f       	mov	r25, r24
     a76:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     a7a:	a7 01       	movw	r20, r14
     a7c:	96 01       	movw	r18, r12
     a7e:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     a82:	9b 01       	movw	r18, r22
     a84:	ac 01       	movw	r20, r24
     a86:	c3 01       	movw	r24, r6
     a88:	b2 01       	movw	r22, r4
     a8a:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	30 e0       	ldi	r19, 0x00	; 0
     a92:	40 e0       	ldi	r20, 0x00	; 0
     a94:	56 e3       	ldi	r21, 0x36	; 54
     a96:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
     a9a:	20 e0       	ldi	r18, 0x00	; 0
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	40 e0       	ldi	r20, 0x00	; 0
     aa0:	57 e4       	ldi	r21, 0x47	; 71
     aa2:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
     aa6:	20 e0       	ldi	r18, 0x00	; 0
     aa8:	30 e0       	ldi	r19, 0x00	; 0
     aaa:	40 e0       	ldi	r20, 0x00	; 0
     aac:	58 e3       	ldi	r21, 0x38	; 56
     aae:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     ab2:	6b 01       	movw	r12, r22
     ab4:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
     ab6:	28 81       	ld	r18, Y
     ab8:	39 81       	ldd	r19, Y+1	; 0x01
     aba:	4a 81       	ldd	r20, Y+2	; 0x02
     abc:	5b 81       	ldd	r21, Y+3	; 0x03
     abe:	60 e0       	ldi	r22, 0x00	; 0
     ac0:	70 e0       	ldi	r23, 0x00	; 0
     ac2:	80 e8       	ldi	r24, 0x80	; 128
     ac4:	99 e4       	ldi	r25, 0x49	; 73
     ac6:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__subsf3>
     aca:	2b 01       	movw	r4, r22
     acc:	3c 01       	movw	r6, r24
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
     ace:	60 91 76 05 	lds	r22, 0x0576
     ad2:	70 91 77 05 	lds	r23, 0x0577
     ad6:	88 27       	eor	r24, r24
     ad8:	77 fd       	sbrc	r23, 7
     ada:	80 95       	com	r24
     adc:	98 2f       	mov	r25, r24
     ade:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     ae2:	20 e0       	ldi	r18, 0x00	; 0
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	40 e8       	ldi	r20, 0x80	; 128
     ae8:	57 e4       	ldi	r21, 0x47	; 71
     aea:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	c5 01       	movw	r24, r10
     af4:	b4 01       	movw	r22, r8
     af6:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
     afa:	20 e0       	ldi	r18, 0x00	; 0
     afc:	30 e0       	ldi	r19, 0x00	; 0
     afe:	40 e8       	ldi	r20, 0x80	; 128
     b00:	59 e3       	ldi	r21, 0x39	; 57
     b02:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     b06:	9b 01       	movw	r18, r22
     b08:	ac 01       	movw	r20, r24
     b0a:	c3 01       	movw	r24, r6
     b0c:	b2 01       	movw	r22, r4
     b0e:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__subsf3>
     b12:	20 e0       	ldi	r18, 0x00	; 0
     b14:	30 e5       	ldi	r19, 0x50	; 80
     b16:	43 ec       	ldi	r20, 0xC3	; 195
     b18:	55 e4       	ldi	r21, 0x45	; 69
     b1a:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     b1e:	4b 01       	movw	r8, r22
     b20:	5c 01       	movw	r10, r24
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
     b22:	60 91 6a 05 	lds	r22, 0x056A
     b26:	70 91 6b 05 	lds	r23, 0x056B
     b2a:	80 e0       	ldi	r24, 0x00	; 0
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	0e 94 7f 12 	call	0x24fe	; 0x24fe <__floatunsisf>
     b32:	9b 01       	movw	r18, r22
     b34:	ac 01       	movw	r20, r24
     b36:	c7 01       	movw	r24, r14
     b38:	b6 01       	movw	r22, r12
     b3a:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     b3e:	9b 01       	movw	r18, r22
     b40:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
     b42:	c5 01       	movw	r24, r10
     b44:	b4 01       	movw	r22, r8
     b46:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__divsf3>
     b4a:	6b 01       	movw	r12, r22
     b4c:	7c 01       	movw	r14, r24
	//Serial.print("p = ");Serial.println(p,2);
	
	var1 = ((double)dig_P9)*p*p/2147483648.0;	//overflow
     b4e:	60 91 6c 05 	lds	r22, 0x056C
     b52:	70 91 6d 05 	lds	r23, 0x056D
     b56:	88 27       	eor	r24, r24
     b58:	77 fd       	sbrc	r23, 7
     b5a:	80 95       	com	r24
     b5c:	98 2f       	mov	r25, r24
     b5e:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     b62:	a7 01       	movw	r20, r14
     b64:	96 01       	movw	r18, r12
     b66:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     b6a:	a7 01       	movw	r20, r14
     b6c:	96 01       	movw	r18, r12
     b6e:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     b72:	20 e0       	ldi	r18, 0x00	; 0
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	40 e0       	ldi	r20, 0x00	; 0
     b78:	50 e3       	ldi	r21, 0x30	; 48
     b7a:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     b7e:	4b 01       	movw	r8, r22
     b80:	5c 01       	movw	r10, r24
	
	var2 = p*((double)dig_P8)/32768.0;
     b82:	60 91 6e 05 	lds	r22, 0x056E
     b86:	70 91 6f 05 	lds	r23, 0x056F
     b8a:	88 27       	eor	r24, r24
     b8c:	77 fd       	sbrc	r23, 7
     b8e:	80 95       	com	r24
     b90:	98 2f       	mov	r25, r24
     b92:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     b96:	a7 01       	movw	r20, r14
     b98:	96 01       	movw	r18, r12
     b9a:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     b9e:	20 e0       	ldi	r18, 0x00	; 0
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	40 e0       	ldi	r20, 0x00	; 0
     ba4:	58 e3       	ldi	r21, 0x38	; 56
     ba6:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     baa:	9b 01       	movw	r18, r22
     bac:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	p = p + (var1+var2+((double)dig_P7))/16.0;
     bae:	c5 01       	movw	r24, r10
     bb0:	b4 01       	movw	r22, r8
     bb2:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
     bb6:	4b 01       	movw	r8, r22
     bb8:	5c 01       	movw	r10, r24
     bba:	60 91 70 05 	lds	r22, 0x0570
     bbe:	70 91 71 05 	lds	r23, 0x0571
     bc2:	88 27       	eor	r24, r24
     bc4:	77 fd       	sbrc	r23, 7
     bc6:	80 95       	com	r24
     bc8:	98 2f       	mov	r25, r24
     bca:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     bce:	9b 01       	movw	r18, r22
     bd0:	ac 01       	movw	r20, r24
     bd2:	c5 01       	movw	r24, r10
     bd4:	b4 01       	movw	r22, r8
     bd6:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
     bda:	20 e0       	ldi	r18, 0x00	; 0
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	40 e8       	ldi	r20, 0x80	; 128
     be0:	5d e3       	ldi	r21, 0x3D	; 61
     be2:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     be6:	a7 01       	movw	r20, r14
     be8:	96 01       	movw	r18, r12
     bea:	0e 94 7e 11 	call	0x22fc	; 0x22fc <__addsf3>
	//Serial.print("p = ");Serial.println(p,2);
	
	*P = p/100.0 ;
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	48 ec       	ldi	r20, 0xC8	; 200
     bf4:	52 e4       	ldi	r21, 0x42	; 66
     bf6:	0e 94 e6 11 	call	0x23cc	; 0x23cc <__divsf3>
     bfa:	6b 01       	movw	r12, r22
     bfc:	7c 01       	movw	r14, r24
     bfe:	f8 01       	movw	r30, r16
     c00:	60 83       	st	Z, r22
     c02:	71 83       	std	Z+1, r23	; 0x01
     c04:	82 83       	std	Z+2, r24	; 0x02
     c06:	93 83       	std	Z+3, r25	; 0x03
	
	if((*P>1200.0) || (*P < 800.0))return (0);
     c08:	20 e0       	ldi	r18, 0x00	; 0
     c0a:	30 e0       	ldi	r19, 0x00	; 0
     c0c:	46 e9       	ldi	r20, 0x96	; 150
     c0e:	54 e4       	ldi	r21, 0x44	; 68
     c10:	0e 94 31 13 	call	0x2662	; 0x2662 <__gesf2>
     c14:	18 16       	cp	r1, r24
     c16:	74 f0       	brlt	.+28     	; 0xc34 <BMP280_CalcPressure+0x2c6>
     c18:	20 e0       	ldi	r18, 0x00	; 0
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	48 e4       	ldi	r20, 0x48	; 72
     c1e:	54 e4       	ldi	r21, 0x44	; 68
     c20:	c7 01       	movw	r24, r14
     c22:	b6 01       	movw	r22, r12
     c24:	0e 94 e2 11 	call	0x23c4	; 0x23c4 <__cmpsf2>
     c28:	88 1f       	adc	r24, r24
     c2a:	88 27       	eor	r24, r24
     c2c:	88 1f       	adc	r24, r24
     c2e:	91 e0       	ldi	r25, 0x01	; 1
     c30:	89 27       	eor	r24, r25
     c32:	01 c0       	rjmp	.+2      	; 0xc36 <BMP280_CalcPressure+0x2c8>
     c34:	80 e0       	ldi	r24, 0x00	; 0
	return (1);
}
     c36:	df 91       	pop	r29
     c38:	cf 91       	pop	r28
     c3a:	1f 91       	pop	r17
     c3c:	0f 91       	pop	r16
     c3e:	ff 90       	pop	r15
     c40:	ef 90       	pop	r14
     c42:	df 90       	pop	r13
     c44:	cf 90       	pop	r12
     c46:	bf 90       	pop	r11
     c48:	af 90       	pop	r10
     c4a:	9f 90       	pop	r9
     c4c:	8f 90       	pop	r8
     c4e:	7f 90       	pop	r7
     c50:	6f 90       	pop	r6
     c52:	5f 90       	pop	r5
     c54:	4f 90       	pop	r4
     c56:	08 95       	ret

00000c58 <BMP280_GetTemperatureAndPressure>:
  @brief Gets temperature and pressure
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetTemperatureAndPressure(double *T,double *P){
     c58:	ef 92       	push	r14
     c5a:	ff 92       	push	r15
     c5c:	0f 93       	push	r16
     c5e:	1f 93       	push	r17
     c60:	cf 93       	push	r28
     c62:	df 93       	push	r29
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
     c68:	28 97       	sbiw	r28, 0x08	; 8
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	8c 01       	movw	r16, r24
     c76:	7b 01       	movw	r14, r22
	double uP,uT ;
	char result = BMP280_GetUnPT(&uP,&uT);
     c78:	be 01       	movw	r22, r28
     c7a:	6b 5f       	subi	r22, 0xFB	; 251
     c7c:	7f 4f       	sbci	r23, 0xFF	; 255
     c7e:	ce 01       	movw	r24, r28
     c80:	01 96       	adiw	r24, 0x01	; 1
     c82:	0e 94 53 03 	call	0x6a6	; 0x6a6 <BMP280_GetUnPT>
	if(result!=0){
     c86:	88 23       	and	r24, r24
     c88:	d1 f0       	breq	.+52     	; 0xcbe <BMP280_GetTemperatureAndPressure+0x66>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
     c8a:	be 01       	movw	r22, r28
     c8c:	6b 5f       	subi	r22, 0xFB	; 251
     c8e:	7f 4f       	sbci	r23, 0xFF	; 255
     c90:	c8 01       	movw	r24, r16
     c92:	0e 94 f5 03 	call	0x7ea	; 0x7ea <BMP280_CalcTemperature>
		if(result){
     c96:	88 23       	and	r24, r24
     c98:	69 f0       	breq	.+26     	; 0xcb4 <BMP280_GetTemperatureAndPressure+0x5c>
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
     c9a:	be 01       	movw	r22, r28
     c9c:	6f 5f       	subi	r22, 0xFF	; 255
     c9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ca0:	c7 01       	movw	r24, r14
     ca2:	0e 94 b7 04 	call	0x96e	; 0x96e <BMP280_CalcPressure>
			if(result)return (1);
     ca6:	81 11       	cpse	r24, r1
     ca8:	0f c0       	rjmp	.+30     	; 0xcc8 <BMP280_GetTemperatureAndPressure+0x70>
			else error = 3 ;	// pressure error ;
     caa:	83 e0       	ldi	r24, 0x03	; 3
     cac:	80 93 5f 05 	sts	0x055F, r24
			return (0);
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	0b c0       	rjmp	.+22     	; 0xcca <BMP280_GetTemperatureAndPressure+0x72>
		}else
		error = 2;	// temperature error ;
     cb4:	82 e0       	ldi	r24, 0x02	; 2
     cb6:	80 93 5f 05 	sts	0x055F, r24
	}
	else
	error = 1;
	
	return (0);
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	06 c0       	rjmp	.+12     	; 0xcca <BMP280_GetTemperatureAndPressure+0x72>
			return (0);
		}else
		error = 2;	// temperature error ;
	}
	else
	error = 1;
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	80 93 5f 05 	sts	0x055F, r24
	
	return (0);
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	01 c0       	rjmp	.+2      	; 0xcca <BMP280_GetTemperatureAndPressure+0x72>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
		if(result){
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
			if(result)return (1);
     cc8:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	error = 1;
	
	return (0);
}
     cca:	28 96       	adiw	r28, 0x08	; 8
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	f8 94       	cli
     cd0:	de bf       	out	0x3e, r29	; 62
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	cd bf       	out	0x3d, r28	; 61
     cd6:	df 91       	pop	r29
     cd8:	cf 91       	pop	r28
     cda:	1f 91       	pop	r17
     cdc:	0f 91       	pop	r16
     cde:	ff 90       	pop	r15
     ce0:	ef 90       	pop	r14
     ce2:	08 95       	ret

00000ce4 <Si7020_readHumidity>:

/*************************************************************************//**
  @brief Read humidity from Si7020
  @return status one if successfully read and crc check, otherwise return zero
*****************************************************************************/
char Si7020_readHumidity(unsigned char *data, char length){
     ce4:	cf 93       	push	r28
     ce6:	df 93       	push	r29
     ce8:	ec 01       	movw	r28, r24
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
     cea:	80 e4       	ldi	r24, 0x40	; 64
     cec:	0e 94 c9 08 	call	0x1192	; 0x1192 <TWI_BeginWrite>
	status = TWI_WriteByte(SI7020_REL_HUMIDITY_HOLD);	
     cf0:	85 ee       	ldi	r24, 0xE5	; 229
     cf2:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_WriteByte>
	if(status != TWI_SENT_ACK) return 0; //Error out
     cf6:	88 32       	cpi	r24, 0x28	; 40
     cf8:	e9 f4       	brne	.+58     	; 0xd34 <Si7020_readHumidity+0x50>
	
	status = TWI_BeginRead(SI7020_ADDR);
     cfa:	80 e4       	ldi	r24, 0x40	; 64
     cfc:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TWI_BeginRead>
	if(status != TWI_SLAR_ACK)	return 0;
     d00:	80 34       	cpi	r24, 0x40	; 64
     d02:	d1 f4       	brne	.+52     	; 0xd38 <Si7020_readHumidity+0x54>
	
	status = TWI_Read(data,3,false);
     d04:	40 e0       	ldi	r20, 0x00	; 0
     d06:	63 e0       	ldi	r22, 0x03	; 3
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	ce 01       	movw	r24, r28
     d0c:	0e 94 23 09 	call	0x1246	; 0x1246 <TWI_Read>
	if(status !=TWI_REC_ACK)	return 0;
     d10:	80 35       	cpi	r24, 0x50	; 80
     d12:	a1 f4       	brne	.+40     	; 0xd3c <Si7020_readHumidity+0x58>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawHumidity, checksum) != 0) return 0;
     d14:	6a 81       	ldd	r22, Y+2	; 0x02
     d16:	70 e0       	ldi	r23, 0x00	; 0
	if(status !=TWI_REC_ACK)	return 0;
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
     d18:	88 81       	ld	r24, Y
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	98 2f       	mov	r25, r24
     d1e:	88 27       	eor	r24, r24
     d20:	29 81       	ldd	r18, Y+1	; 0x01
	if(check_crc(rawHumidity, checksum) != 0) return 0;
     d22:	82 2b       	or	r24, r18
     d24:	0e 94 55 0e 	call	0x1caa	; 0x1caa <check_crc>
     d28:	89 2b       	or	r24, r25
     d2a:	51 f4       	brne	.+20     	; 0xd40 <Si7020_readHumidity+0x5c>
	
	TWI_Stop();
     d2c:	0e 94 1e 09 	call	0x123c	; 0x123c <TWI_Stop>
	return 1;
     d30:	81 e0       	ldi	r24, 0x01	; 1
     d32:	07 c0       	rjmp	.+14     	; 0xd42 <Si7020_readHumidity+0x5e>
char Si7020_readHumidity(unsigned char *data, char length){
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
	status = TWI_WriteByte(SI7020_REL_HUMIDITY_HOLD);	
	if(status != TWI_SENT_ACK) return 0; //Error out
     d34:	80 e0       	ldi	r24, 0x00	; 0
     d36:	05 c0       	rjmp	.+10     	; 0xd42 <Si7020_readHumidity+0x5e>
	
	status = TWI_BeginRead(SI7020_ADDR);
	if(status != TWI_SLAR_ACK)	return 0;
     d38:	80 e0       	ldi	r24, 0x00	; 0
     d3a:	03 c0       	rjmp	.+6      	; 0xd42 <Si7020_readHumidity+0x5e>
	
	status = TWI_Read(data,3,false);
	if(status !=TWI_REC_ACK)	return 0;
     d3c:	80 e0       	ldi	r24, 0x00	; 0
     d3e:	01 c0       	rjmp	.+2      	; 0xd42 <Si7020_readHumidity+0x5e>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawHumidity, checksum) != 0) return 0;
     d40:	80 e0       	ldi	r24, 0x00	; 0
	
	TWI_Stop();
	return 1;
}
     d42:	df 91       	pop	r29
     d44:	cf 91       	pop	r28
     d46:	08 95       	ret

00000d48 <Si7020_calHumidity>:

/*************************************************************************//**
  @brief Calculate humidity from Si7020
  @return humidity value
*****************************************************************************/
float Si7020_calHumidity(unsigned char *data) {
     d48:	fc 01       	movw	r30, r24
	unsigned char msb = data[0];
	unsigned char lsb = data[1];

	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
     d4a:	80 81       	ld	r24, Z
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	98 2f       	mov	r25, r24
     d50:	88 27       	eor	r24, r24
     d52:	21 81       	ldd	r18, Z+1	; 0x01
     d54:	bc 01       	movw	r22, r24
     d56:	62 2b       	or	r22, r18
	
	//Given the raw humidity data, calculate the actual relative humidity
	float tempRH = rawHumidity / (float)65536;
     d58:	80 e0       	ldi	r24, 0x00	; 0
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	0e 94 7f 12 	call	0x24fe	; 0x24fe <__floatunsisf>
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	40 e8       	ldi	r20, 0x80	; 128
     d66:	57 e3       	ldi	r21, 0x37	; 55
     d68:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
	float rh = 125 * tempRH -6;
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	4a ef       	ldi	r20, 0xFA	; 250
     d72:	52 e4       	ldi	r21, 0x42	; 66
     d74:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	40 ec       	ldi	r20, 0xC0	; 192
     d7e:	50 e4       	ldi	r21, 0x40	; 64
     d80:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__subsf3>
	
	return rh;
}
     d84:	08 95       	ret

00000d86 <Si7020_readTemperature>:

/*************************************************************************//**
  @brief Read temperature from Si7020
  @return status one if successfully read and crc check, otherwise return zero
*****************************************************************************/
char Si7020_readTemperature(unsigned char *data, char length){
     d86:	cf 93       	push	r28
     d88:	df 93       	push	r29
     d8a:	ec 01       	movw	r28, r24
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
     d8c:	80 e4       	ldi	r24, 0x40	; 64
     d8e:	0e 94 c9 08 	call	0x1192	; 0x1192 <TWI_BeginWrite>
	status = TWI_WriteByte(SI7020_TEMPERATURE_HOLD);	
     d92:	83 ee       	ldi	r24, 0xE3	; 227
     d94:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_WriteByte>
	if(status != TWI_SENT_ACK) return 0; //Error out
     d98:	88 32       	cpi	r24, 0x28	; 40
     d9a:	e9 f4       	brne	.+58     	; 0xdd6 <Si7020_readTemperature+0x50>
	
	status = TWI_BeginRead(SI7020_ADDR);
     d9c:	80 e4       	ldi	r24, 0x40	; 64
     d9e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <TWI_BeginRead>
	if(status != TWI_SLAR_ACK)	return 0;
     da2:	80 34       	cpi	r24, 0x40	; 64
     da4:	d1 f4       	brne	.+52     	; 0xdda <Si7020_readTemperature+0x54>
	
	status = TWI_Read(data,3,false);
     da6:	40 e0       	ldi	r20, 0x00	; 0
     da8:	63 e0       	ldi	r22, 0x03	; 3
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	ce 01       	movw	r24, r28
     dae:	0e 94 23 09 	call	0x1246	; 0x1246 <TWI_Read>
	if(status !=TWI_REC_ACK)	return 0;
     db2:	80 35       	cpi	r24, 0x50	; 80
     db4:	a1 f4       	brne	.+40     	; 0xdde <Si7020_readTemperature+0x58>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawTemperature, checksum) != 0) return 0;
     db6:	6a 81       	ldd	r22, Y+2	; 0x02
     db8:	70 e0       	ldi	r23, 0x00	; 0
	if(status !=TWI_REC_ACK)	return 0;
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
     dba:	88 81       	ld	r24, Y
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	98 2f       	mov	r25, r24
     dc0:	88 27       	eor	r24, r24
     dc2:	29 81       	ldd	r18, Y+1	; 0x01
	if(check_crc(rawTemperature, checksum) != 0) return 0;
     dc4:	82 2b       	or	r24, r18
     dc6:	0e 94 55 0e 	call	0x1caa	; 0x1caa <check_crc>
     dca:	89 2b       	or	r24, r25
     dcc:	51 f4       	brne	.+20     	; 0xde2 <Si7020_readTemperature+0x5c>
	
	TWI_Stop();
     dce:	0e 94 1e 09 	call	0x123c	; 0x123c <TWI_Stop>
	return 1;
     dd2:	81 e0       	ldi	r24, 0x01	; 1
     dd4:	07 c0       	rjmp	.+14     	; 0xde4 <Si7020_readTemperature+0x5e>
char Si7020_readTemperature(unsigned char *data, char length){
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
	status = TWI_WriteByte(SI7020_TEMPERATURE_HOLD);	
	if(status != TWI_SENT_ACK) return 0; //Error out
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	05 c0       	rjmp	.+10     	; 0xde4 <Si7020_readTemperature+0x5e>
	
	status = TWI_BeginRead(SI7020_ADDR);
	if(status != TWI_SLAR_ACK)	return 0;
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	03 c0       	rjmp	.+6      	; 0xde4 <Si7020_readTemperature+0x5e>
	
	status = TWI_Read(data,3,false);
	if(status !=TWI_REC_ACK)	return 0;
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	01 c0       	rjmp	.+2      	; 0xde4 <Si7020_readTemperature+0x5e>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawTemperature, checksum) != 0) return 0;
     de2:	80 e0       	ldi	r24, 0x00	; 0
	
	TWI_Stop();
	return 1;
}
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	08 95       	ret

00000dea <Si7020_calTemperature>:

/*************************************************************************//**
  @brief Calculate temperature from Si7020
  @return temperature value
*****************************************************************************/
float Si7020_calTemperature(unsigned char *data) {
     dea:	fc 01       	movw	r30, r24
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
     dec:	80 81       	ld	r24, Z
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	98 2f       	mov	r25, r24
     df2:	88 27       	eor	r24, r24
     df4:	21 81       	ldd	r18, Z+1	; 0x01
     df6:	bc 01       	movw	r22, r24
     df8:	62 2b       	or	r22, r18
	
	//Given the raw temperature data, calculate the actual temperature
	float tempTemperature = rawTemperature / (float)65536; 
     dfa:	80 e0       	ldi	r24, 0x00	; 0
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	0e 94 7f 12 	call	0x24fe	; 0x24fe <__floatunsisf>
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	40 e8       	ldi	r20, 0x80	; 128
     e08:	57 e3       	ldi	r21, 0x37	; 55
     e0a:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
	float realTemperature = 175.72 * tempTemperature - 46.85;
     e0e:	22 e5       	ldi	r18, 0x52	; 82
     e10:	38 eb       	ldi	r19, 0xB8	; 184
     e12:	4f e2       	ldi	r20, 0x2F	; 47
     e14:	53 e4       	ldi	r21, 0x43	; 67
     e16:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     e1a:	26 e6       	ldi	r18, 0x66	; 102
     e1c:	36 e6       	ldi	r19, 0x66	; 102
     e1e:	4b e3       	ldi	r20, 0x3B	; 59
     e20:	52 e4       	ldi	r21, 0x42	; 66
     e22:	0e 94 7d 11 	call	0x22fa	; 0x22fa <__subsf3>
	
	return realTemperature;
     e26:	08 95       	ret

00000e28 <ADC_Init>:

/*************************************************************************//**
  @brief Initializes the ADC
*****************************************************************************/
void ADC_Init(void) {
	ADCSRA = (1<<ADEN)|(4<<ADPS0); //enables the ADC module, CPU clock prescale=16
     e28:	84 e8       	ldi	r24, 0x84	; 132
     e2a:	80 93 7a 00 	sts	0x007A, r24
	
	ADCSRC = 0x05|(1<<ADTHT0)|(1<<ADTHT1); //ADSUT=5
     e2e:	85 ec       	ldi	r24, 0xC5	; 197
     e30:	80 93 77 00 	sts	0x0077, r24
	while((ADCSRB&(1<<AVDDOK))==0);
     e34:	eb e7       	ldi	r30, 0x7B	; 123
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	88 23       	and	r24, r24
     e3c:	ec f7       	brge	.-6      	; 0xe38 <ADC_Init+0x10>
}
     e3e:	08 95       	ret

00000e40 <__vector_15>:

/*************************************************************************//**
  @brief Timer Interrupt Service Routine
*****************************************************************************/
ISR(TIMER2_OVF_vect)
{
     e40:	1f 92       	push	r1
     e42:	0f 92       	push	r0
     e44:	0f b6       	in	r0, 0x3f	; 63
     e46:	0f 92       	push	r0
     e48:	11 24       	eor	r1, r1
     e4a:	2f 93       	push	r18
     e4c:	3f 93       	push	r19
     e4e:	4f 93       	push	r20
     e50:	5f 93       	push	r21
     e52:	6f 93       	push	r22
     e54:	7f 93       	push	r23
     e56:	8f 93       	push	r24
     e58:	9f 93       	push	r25
     e5a:	af 93       	push	r26
     e5c:	bf 93       	push	r27
     e5e:	ef 93       	push	r30
     e60:	ff 93       	push	r31
	timer_usage ++;
     e62:	80 91 84 05 	lds	r24, 0x0584
     e66:	90 91 85 05 	lds	r25, 0x0585
     e6a:	01 96       	adiw	r24, 0x01	; 1
     e6c:	90 93 85 05 	sts	0x0585, r25
     e70:	80 93 84 05 	sts	0x0584, r24
	printf("count1 = %d\n",timer_usage);
     e74:	9f 93       	push	r25
     e76:	8f 93       	push	r24
     e78:	88 ea       	ldi	r24, 0xA8	; 168
     e7a:	92 e0       	ldi	r25, 0x02	; 2
     e7c:	9f 93       	push	r25
     e7e:	8f 93       	push	r24
     e80:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
	printf("Timestamp : %ld\n",(TimeStamp));
     e84:	80 91 83 05 	lds	r24, 0x0583
     e88:	8f 93       	push	r24
     e8a:	80 91 82 05 	lds	r24, 0x0582
     e8e:	8f 93       	push	r24
     e90:	80 91 81 05 	lds	r24, 0x0581
     e94:	8f 93       	push	r24
     e96:	80 91 80 05 	lds	r24, 0x0580
     e9a:	8f 93       	push	r24
     e9c:	85 eb       	ldi	r24, 0xB5	; 181
     e9e:	92 e0       	ldi	r25, 0x02	; 2
     ea0:	9f 93       	push	r25
     ea2:	8f 93       	push	r24
     ea4:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
	handle_timeoutq_event();
     ea8:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <handle_timeoutq_event>
     eac:	8d b7       	in	r24, 0x3d	; 61
     eae:	9e b7       	in	r25, 0x3e	; 62
     eb0:	0a 96       	adiw	r24, 0x0a	; 10
     eb2:	0f b6       	in	r0, 0x3f	; 63
     eb4:	f8 94       	cli
     eb6:	9e bf       	out	0x3e, r25	; 62
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	8d bf       	out	0x3d, r24	; 61
}
     ebc:	ff 91       	pop	r31
     ebe:	ef 91       	pop	r30
     ec0:	bf 91       	pop	r27
     ec2:	af 91       	pop	r26
     ec4:	9f 91       	pop	r25
     ec6:	8f 91       	pop	r24
     ec8:	7f 91       	pop	r23
     eca:	6f 91       	pop	r22
     ecc:	5f 91       	pop	r21
     ece:	4f 91       	pop	r20
     ed0:	3f 91       	pop	r19
     ed2:	2f 91       	pop	r18
     ed4:	0f 90       	pop	r0
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	0f 90       	pop	r0
     eda:	1f 90       	pop	r1
     edc:	18 95       	reti

00000ede <init_Event_Timer>:

/* Initialization Routine Example 3 : Timer 2 Async operation */
/* Clock for Timer 2 is taken from crystal connected to TOSC pins */
void init_Event_Timer(void)
{
	TimeStamp = 0;
     ede:	10 92 80 05 	sts	0x0580, r1
     ee2:	10 92 81 05 	sts	0x0581, r1
     ee6:	10 92 82 05 	sts	0x0582, r1
     eea:	10 92 83 05 	sts	0x0583, r1
	timer_usage = 0;
     eee:	10 92 85 05 	sts	0x0585, r1
     ef2:	10 92 84 05 	sts	0x0584, r1
	/* Select clock source as crystal on TOSCn pins */
	ASSR |= 1 << AS2;
     ef6:	e6 eb       	ldi	r30, 0xB6	; 182
     ef8:	f0 e0       	ldi	r31, 0x00	; 0
     efa:	80 81       	ld	r24, Z
     efc:	80 62       	ori	r24, 0x20	; 32
     efe:	80 83       	st	Z, r24
	
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
     f00:	80 81       	ld	r24, Z
     f02:	8f 71       	andi	r24, 0x1F	; 31
     f04:	e9 f7       	brne	.-6      	; 0xf00 <init_Event_Timer+0x22>
	
	/* Stop timer 2 */
	TCCR2B = 0x00;
     f06:	10 92 b1 00 	sts	0x00B1, r1
     f0a:	08 95       	ret

00000f0c <general_set_timer>:
	// TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
}


void general_set_timer( int period_number )
{
     f0c:	cf 93       	push	r28
     f0e:	df 93       	push	r29
     f10:	ec 01       	movw	r28, r24
	// printf("debug %d\n",period_number);
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
     f12:	e6 eb       	ldi	r30, 0xB6	; 182
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8f 71       	andi	r24, 0x1F	; 31
     f1a:	e9 f7       	brne	.-6      	; 0xf16 <general_set_timer+0xa>
	/* Stop timer 2 */
	TCCR2B = 0x00;
     f1c:	10 92 b1 00 	sts	0x00B1, r1
	
	
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
     f20:	e6 eb       	ldi	r30, 0xB6	; 182
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	80 81       	ld	r24, Z
     f26:	8f 71       	andi	r24, 0x1F	; 31
     f28:	e9 f7       	brne	.-6      	; 0xf24 <general_set_timer+0x18>
	 *  1    1    0     256		2s/256
	 *  1    1    1    1024		8s/256
	 */
	// Resolution
	// 0.25s/256
	if( period_number <= 250 )
     f2a:	cb 3f       	cpi	r28, 0xFB	; 251
     f2c:	d1 05       	cpc	r29, r1
     f2e:	04 f5       	brge	.+64     	; 0xf70 <general_set_timer+0x64>
	{
		temp = 256 - (int) ( 256.0/250.0 * period_number);
     f30:	be 01       	movw	r22, r28
     f32:	88 27       	eor	r24, r24
     f34:	77 fd       	sbrc	r23, 7
     f36:	80 95       	com	r24
     f38:	98 2f       	mov	r25, r24
     f3a:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     f3e:	2f e6       	ldi	r18, 0x6F	; 111
     f40:	32 e1       	ldi	r19, 0x12	; 18
     f42:	43 e8       	ldi	r20, 0x83	; 131
     f44:	5f e3       	ldi	r21, 0x3F	; 63
     f46:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     f4a:	0e 94 4e 12 	call	0x249c	; 0x249c <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
     f4e:	20 e0       	ldi	r18, 0x00	; 0
     f50:	31 e0       	ldi	r19, 0x01	; 1
     f52:	c9 01       	movw	r24, r18
     f54:	86 1b       	sub	r24, r22
     f56:	97 0b       	sbc	r25, r23
     f58:	8f 3f       	cpi	r24, 0xFF	; 255
     f5a:	91 05       	cpc	r25, r1
     f5c:	19 f0       	breq	.+6      	; 0xf64 <general_set_timer+0x58>
     f5e:	14 f0       	brlt	.+4      	; 0xf64 <general_set_timer+0x58>
     f60:	8f ef       	ldi	r24, 0xFF	; 255
     f62:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     f64:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS21)|(1<<CS20);
     f68:	83 e0       	ldi	r24, 0x03	; 3
     f6a:	80 93 b1 00 	sts	0x00B1, r24
     f6e:	94 c0       	rjmp	.+296    	; 0x1098 <general_set_timer+0x18c>
	}
	// Resolution
	// 0.5s/256
	else if ( period_number <= 500 )
     f70:	c5 3f       	cpi	r28, 0xF5	; 245
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	d8 07       	cpc	r29, r24
     f76:	04 f5       	brge	.+64     	; 0xfb8 <general_set_timer+0xac>
	{
		temp = 256 - (int) ( 256.0/500.0 * period_number);
     f78:	be 01       	movw	r22, r28
     f7a:	88 27       	eor	r24, r24
     f7c:	77 fd       	sbrc	r23, 7
     f7e:	80 95       	com	r24
     f80:	98 2f       	mov	r25, r24
     f82:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     f86:	2f e6       	ldi	r18, 0x6F	; 111
     f88:	32 e1       	ldi	r19, 0x12	; 18
     f8a:	43 e0       	ldi	r20, 0x03	; 3
     f8c:	5f e3       	ldi	r21, 0x3F	; 63
     f8e:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     f92:	0e 94 4e 12 	call	0x249c	; 0x249c <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
     f96:	20 e0       	ldi	r18, 0x00	; 0
     f98:	31 e0       	ldi	r19, 0x01	; 1
     f9a:	c9 01       	movw	r24, r18
     f9c:	86 1b       	sub	r24, r22
     f9e:	97 0b       	sbc	r25, r23
     fa0:	8f 3f       	cpi	r24, 0xFF	; 255
     fa2:	91 05       	cpc	r25, r1
     fa4:	19 f0       	breq	.+6      	; 0xfac <general_set_timer+0xa0>
     fa6:	14 f0       	brlt	.+4      	; 0xfac <general_set_timer+0xa0>
     fa8:	8f ef       	ldi	r24, 0xFF	; 255
     faa:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     fac:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22);
     fb0:	84 e0       	ldi	r24, 0x04	; 4
     fb2:	80 93 b1 00 	sts	0x00B1, r24
     fb6:	70 c0       	rjmp	.+224    	; 0x1098 <general_set_timer+0x18c>
	}
	// Resolution
	// 1s/256
	else if ( period_number <= 1000 )
     fb8:	c9 3e       	cpi	r28, 0xE9	; 233
     fba:	83 e0       	ldi	r24, 0x03	; 3
     fbc:	d8 07       	cpc	r29, r24
     fbe:	04 f5       	brge	.+64     	; 0x1000 <general_set_timer+0xf4>
	{
		temp = 256 - (int) ( 256.0/1000.0 * period_number);
     fc0:	be 01       	movw	r22, r28
     fc2:	88 27       	eor	r24, r24
     fc4:	77 fd       	sbrc	r23, 7
     fc6:	80 95       	com	r24
     fc8:	98 2f       	mov	r25, r24
     fca:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
     fce:	2f e6       	ldi	r18, 0x6F	; 111
     fd0:	32 e1       	ldi	r19, 0x12	; 18
     fd2:	43 e8       	ldi	r20, 0x83	; 131
     fd4:	5e e3       	ldi	r21, 0x3E	; 62
     fd6:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
     fda:	0e 94 4e 12 	call	0x249c	; 0x249c <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
     fde:	20 e0       	ldi	r18, 0x00	; 0
     fe0:	31 e0       	ldi	r19, 0x01	; 1
     fe2:	c9 01       	movw	r24, r18
     fe4:	86 1b       	sub	r24, r22
     fe6:	97 0b       	sbc	r25, r23
     fe8:	8f 3f       	cpi	r24, 0xFF	; 255
     fea:	91 05       	cpc	r25, r1
     fec:	19 f0       	breq	.+6      	; 0xff4 <general_set_timer+0xe8>
     fee:	14 f0       	brlt	.+4      	; 0xff4 <general_set_timer+0xe8>
     ff0:	8f ef       	ldi	r24, 0xFF	; 255
     ff2:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     ff4:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS20);	
     ff8:	85 e0       	ldi	r24, 0x05	; 5
     ffa:	80 93 b1 00 	sts	0x00B1, r24
     ffe:	4c c0       	rjmp	.+152    	; 0x1098 <general_set_timer+0x18c>
	}
	// Resolution
	// 2s/256
	else if ( period_number <= 2000 )
    1000:	c1 3d       	cpi	r28, 0xD1	; 209
    1002:	87 e0       	ldi	r24, 0x07	; 7
    1004:	d8 07       	cpc	r29, r24
    1006:	04 f5       	brge	.+64     	; 0x1048 <general_set_timer+0x13c>
	{
		temp = 256 - (int) ( 256.0/2000.0 * period_number);
    1008:	be 01       	movw	r22, r28
    100a:	88 27       	eor	r24, r24
    100c:	77 fd       	sbrc	r23, 7
    100e:	80 95       	com	r24
    1010:	98 2f       	mov	r25, r24
    1012:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
    1016:	2f e6       	ldi	r18, 0x6F	; 111
    1018:	32 e1       	ldi	r19, 0x12	; 18
    101a:	43 e0       	ldi	r20, 0x03	; 3
    101c:	5e e3       	ldi	r21, 0x3E	; 62
    101e:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
    1022:	0e 94 4e 12 	call	0x249c	; 0x249c <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
    1026:	20 e0       	ldi	r18, 0x00	; 0
    1028:	31 e0       	ldi	r19, 0x01	; 1
    102a:	c9 01       	movw	r24, r18
    102c:	86 1b       	sub	r24, r22
    102e:	97 0b       	sbc	r25, r23
    1030:	8f 3f       	cpi	r24, 0xFF	; 255
    1032:	91 05       	cpc	r25, r1
    1034:	19 f0       	breq	.+6      	; 0x103c <general_set_timer+0x130>
    1036:	14 f0       	brlt	.+4      	; 0x103c <general_set_timer+0x130>
    1038:	8f ef       	ldi	r24, 0xFF	; 255
    103a:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
    103c:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS21);	
    1040:	86 e0       	ldi	r24, 0x06	; 6
    1042:	80 93 b1 00 	sts	0x00B1, r24
    1046:	28 c0       	rjmp	.+80     	; 0x1098 <general_set_timer+0x18c>
	}
	// Resolution
	// 8s/256
	else if ( period_number <= 8000 )
    1048:	c1 34       	cpi	r28, 0x41	; 65
    104a:	8f e1       	ldi	r24, 0x1F	; 31
    104c:	d8 07       	cpc	r29, r24
    104e:	04 f5       	brge	.+64     	; 0x1090 <general_set_timer+0x184>
	{
		t = (int) ( 256.0/8000.0 * period_number);
    1050:	be 01       	movw	r22, r28
    1052:	88 27       	eor	r24, r24
    1054:	77 fd       	sbrc	r23, 7
    1056:	80 95       	com	r24
    1058:	98 2f       	mov	r25, r24
    105a:	0e 94 81 12 	call	0x2502	; 0x2502 <__floatsisf>
    105e:	2f e6       	ldi	r18, 0x6F	; 111
    1060:	32 e1       	ldi	r19, 0x12	; 18
    1062:	43 e0       	ldi	r20, 0x03	; 3
    1064:	5d e3       	ldi	r21, 0x3D	; 61
    1066:	0e 94 35 13 	call	0x266a	; 0x266a <__mulsf3>
    106a:	0e 94 4e 12 	call	0x249c	; 0x249c <__fixsfsi>
		temp = 256 - t;
		temp = temp > 255 ? 255 : temp ;
    106e:	20 e0       	ldi	r18, 0x00	; 0
    1070:	31 e0       	ldi	r19, 0x01	; 1
    1072:	c9 01       	movw	r24, r18
    1074:	86 1b       	sub	r24, r22
    1076:	97 0b       	sbc	r25, r23
    1078:	8f 3f       	cpi	r24, 0xFF	; 255
    107a:	91 05       	cpc	r25, r1
    107c:	19 f0       	breq	.+6      	; 0x1084 <general_set_timer+0x178>
    107e:	14 f0       	brlt	.+4      	; 0x1084 <general_set_timer+0x178>
    1080:	8f ef       	ldi	r24, 0xFF	; 255
    1082:	90 e0       	ldi	r25, 0x00	; 0

		TCNT2 = temp;
    1084:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
    1088:	87 e0       	ldi	r24, 0x07	; 7
    108a:	80 93 b1 00 	sts	0x00B1, r24
    108e:	04 c0       	rjmp	.+8      	; 0x1098 <general_set_timer+0x18c>
	}
	else
	{
		printf("Timer exceeds max\n");
    1090:	86 ec       	ldi	r24, 0xC6	; 198
    1092:	92 e0       	ldi	r25, 0x02	; 2
    1094:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
	}

	/* start timer 2 */
	TCCR2A = 0x00;
    1098:	10 92 b0 00 	sts	0x00B0, r1
	TimeStamp += period_number;
    109c:	ce 01       	movw	r24, r28
    109e:	aa 27       	eor	r26, r26
    10a0:	97 fd       	sbrc	r25, 7
    10a2:	a0 95       	com	r26
    10a4:	ba 2f       	mov	r27, r26
    10a6:	40 91 80 05 	lds	r20, 0x0580
    10aa:	50 91 81 05 	lds	r21, 0x0581
    10ae:	60 91 82 05 	lds	r22, 0x0582
    10b2:	70 91 83 05 	lds	r23, 0x0583
    10b6:	84 0f       	add	r24, r20
    10b8:	95 1f       	adc	r25, r21
    10ba:	a6 1f       	adc	r26, r22
    10bc:	b7 1f       	adc	r27, r23
    10be:	80 93 80 05 	sts	0x0580, r24
    10c2:	90 93 81 05 	sts	0x0581, r25
    10c6:	a0 93 82 05 	sts	0x0582, r26
    10ca:	b0 93 83 05 	sts	0x0583, r27
}
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	08 95       	ret

000010d4 <init_set_timer>:

void init_set_timer( int period_number )
{
    general_set_timer( period_number );
    10d4:	0e 94 86 07 	call	0xf0c	; 0xf0c <general_set_timer>
	/* Clear pending interrupts */
	TIFR2  = (1 << TOV2) | (1 << OCF2A) | (1 << OCF2B);
    10d8:	87 e0       	ldi	r24, 0x07	; 7
    10da:	87 bb       	out	0x17, r24	; 23
	/* Enable Overflow Interrupt */
	TIMSK2 = 1<<TOIE2;
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	80 93 70 00 	sts	0x0070, r24
    10e2:	08 95       	ret

000010e4 <set_timer>:

}

void set_timer( int period_number )
{
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	ec 01       	movw	r28, r24
	printf("set timer gap = %d\n\n", period_number);
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	88 ed       	ldi	r24, 0xD8	; 216
    10f0:	92 e0       	ldi	r25, 0x02	; 2
    10f2:	9f 93       	push	r25
    10f4:	8f 93       	push	r24
    10f6:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
	if( period_number == 0)
    10fa:	0f 90       	pop	r0
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	20 97       	sbiw	r28, 0x00	; 0
    1104:	69 f0       	breq	.+26     	; 0x1120 <set_timer+0x3c>
	{
		/* we won't every set a zero timeout, will we ? */
		return;
	}
    if( timer_usage == 0 )
    1106:	80 91 84 05 	lds	r24, 0x0584
    110a:	90 91 85 05 	lds	r25, 0x0585
    110e:	89 2b       	or	r24, r25
    1110:	21 f4       	brne	.+8      	; 0x111a <set_timer+0x36>
    {
        init_set_timer( period_number );
    1112:	ce 01       	movw	r24, r28
    1114:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <init_set_timer>
    1118:	03 c0       	rjmp	.+6      	; 0x1120 <set_timer+0x3c>
    }
    else
    {
        general_set_timer( period_number );
    111a:	ce 01       	movw	r24, r28
    111c:	0e 94 86 07 	call	0xf0c	; 0xf0c <general_set_timer>
    }
}	
    1120:	df 91       	pop	r29
    1122:	cf 91       	pop	r28
    1124:	08 95       	ret

00001126 <PWR_Init>:

/*************************************************************************//**
  @brief Initializes the power management system
*****************************************************************************/
void PWR_Init(void){
	DDRD |= 0b11000000;
    1126:	8a b1       	in	r24, 0x0a	; 10
    1128:	80 6c       	ori	r24, 0xC0	; 192
    112a:	8a b9       	out	0x0a, r24	; 10
    112c:	08 95       	ret

0000112e <PWR_TurnOn5V>:

/*************************************************************************//**
  @brief Turns on the 5V power supply
*****************************************************************************/
void PWR_TurnOn5V(void){
	PORTD |= 0b10000000;
    112e:	5f 9a       	sbi	0x0b, 7	; 11
    1130:	08 95       	ret

00001132 <SPI_SlaveInit>:

unsigned char buffer[16];

void SPI_SlaveInit(void)
{
	DDRB |= (1<<PORTB3); //Set MISO output
    1132:	23 9a       	sbi	0x04, 3	; 4
	SPCR = (1<<SPE); //Enable SPI
    1134:	80 e4       	ldi	r24, 0x40	; 64
    1136:	8c bd       	out	0x2c, r24	; 44
    1138:	08 95       	ret

0000113a <TWI_Init>:
/*************************************************************************//**
  @brief Initializes the 2-wire Serial Interface as a master
  @param[in] freq SCL frequency (Do not exceed 400kHz)
  @return Status (@c 0 on failure, nonzero otherwise)
*****************************************************************************/
char TWI_Init(unsigned long freq){
    113a:	9b 01       	movw	r18, r22
    113c:	ac 01       	movw	r20, r24
	//printf("TWI_Init");
	TWSR=0x00;
    113e:	10 92 b9 00 	sts	0x00B9, r1
	TWBR=(unsigned char)(((F_CPU/freq)-16UL)/8UL); //Compute settings value and set frequency
    1142:	60 e0       	ldi	r22, 0x00	; 0
    1144:	74 e2       	ldi	r23, 0x24	; 36
    1146:	84 ef       	ldi	r24, 0xF4	; 244
    1148:	90 e0       	ldi	r25, 0x00	; 0
    114a:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__udivmodsi4>
    114e:	da 01       	movw	r26, r20
    1150:	c9 01       	movw	r24, r18
    1152:	40 97       	sbiw	r24, 0x10	; 16
    1154:	a1 09       	sbc	r26, r1
    1156:	b1 09       	sbc	r27, r1
    1158:	68 94       	set
    115a:	12 f8       	bld	r1, 2
    115c:	b6 95       	lsr	r27
    115e:	a7 95       	ror	r26
    1160:	97 95       	ror	r25
    1162:	87 95       	ror	r24
    1164:	16 94       	lsr	r1
    1166:	d1 f7       	brne	.-12     	; 0x115c <TWI_Init+0x22>
    1168:	80 93 b8 00 	sts	0x00B8, r24
	TWCR=(1 << TWEN);
    116c:	84 e0       	ldi	r24, 0x04	; 4
    116e:	80 93 bc 00 	sts	0x00BC, r24
	
	//TWAR=0; //Disable slave mode
	
	return 1; //May want to actually check for success here
}
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	08 95       	ret

00001176 <TWI_WriteByte>:
  @param[in] data byte to send
  @return Status code, TWI_SENT_ACK or TWI_SENT_NACK on success
*****************************************************************************/
char TWI_WriteByte(unsigned char data){
	//printf("TWI_WriteByte");
	TWDR = data; //Stage the data to send
    1176:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
    117a:	84 e8       	ldi	r24, 0x84	; 132
    117c:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);//Send the data
    1180:	ec eb       	ldi	r30, 0xBC	; 188
    1182:	f0 e0       	ldi	r31, 0x00	; 0
    1184:	80 81       	ld	r24, Z
    1186:	88 23       	and	r24, r24
    1188:	ec f7       	brge	.-6      	; 0x1184 <TWI_WriteByte+0xe>
	
	return TWSR&TWSR_MASK;//Return the status code
    118a:	80 91 b9 00 	lds	r24, 0x00B9
}
    118e:	88 7f       	andi	r24, 0xF8	; 248
    1190:	08 95       	ret

00001192 <TWI_BeginWrite>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAW_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginWrite(unsigned char address){
	//printf("TWI_BeginWrite");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
    1192:	94 ee       	ldi	r25, 0xE4	; 228
    1194:	90 93 bc 00 	sts	0x00BC, r25
	int i=0;
	while ((TWCR & (1<<TWINT)) == 0);
    1198:	ec eb       	ldi	r30, 0xBC	; 188
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	90 81       	ld	r25, Z
    119e:	99 23       	and	r25, r25
    11a0:	ec f7       	brge	.-6      	; 0x119c <TWI_BeginWrite+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    11a2:	ef e9       	ldi	r30, 0x9F	; 159
    11a4:	ff e0       	ldi	r31, 0x0F	; 15
    11a6:	31 97       	sbiw	r30, 0x01	; 1
    11a8:	f1 f7       	brne	.-4      	; 0x11a6 <TWI_BeginWrite+0x14>
    11aa:	00 c0       	rjmp	.+0      	; 0x11ac <TWI_BeginWrite+0x1a>
    11ac:	00 00       	nop
	_delay_ms(1);
	char stat = (TWSR & TWSR_MASK);
    11ae:	90 91 b9 00 	lds	r25, 0x00B9
    11b2:	98 7f       	andi	r25, 0xF8	; 248
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
    11b4:	98 30       	cpi	r25, 0x08	; 8
    11b6:	31 f0       	breq	.+12     	; 0x11c4 <TWI_BeginWrite+0x32>
    11b8:	90 31       	cpi	r25, 0x10	; 16
    11ba:	21 f0       	breq	.+8      	; 0x11c4 <TWI_BeginWrite+0x32>
    11bc:	80 91 b9 00 	lds	r24, 0x00B9
    11c0:	88 7f       	andi	r24, 0xF8	; 248
    11c2:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) & SLAW_MASK); //reset bit 0 to send a write bit, send
    11c4:	88 0f       	add	r24, r24
    11c6:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	return stat;//Return the status code
}
    11ca:	08 95       	ret

000011cc <TWI_BeginRead>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAR_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginRead(unsigned char address){
	//printf("TWI_BeginRead");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
    11cc:	94 ee       	ldi	r25, 0xE4	; 228
    11ce:	90 93 bc 00 	sts	0x00BC, r25
	while ((TWCR & (1<<TWINT)) == 0);
    11d2:	ec eb       	ldi	r30, 0xBC	; 188
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	90 81       	ld	r25, Z
    11d8:	99 23       	and	r25, r25
    11da:	ec f7       	brge	.-6      	; 0x11d6 <TWI_BeginRead+0xa>
	
	char stat = (TWSR & TWSR_MASK);
    11dc:	90 91 b9 00 	lds	r25, 0x00B9
    11e0:	98 7f       	andi	r25, 0xF8	; 248
	//printf("0x%1x",(unsigned)stat);
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
    11e2:	98 30       	cpi	r25, 0x08	; 8
    11e4:	31 f0       	breq	.+12     	; 0x11f2 <TWI_BeginRead+0x26>
    11e6:	90 31       	cpi	r25, 0x10	; 16
    11e8:	21 f0       	breq	.+8      	; 0x11f2 <TWI_BeginRead+0x26>
    11ea:	80 91 b9 00 	lds	r24, 0x00B9
    11ee:	88 7f       	andi	r24, 0xF8	; 248
    11f0:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) | SLAR_MASK); //set bit 0 to send a read bit and send it
    11f2:	88 0f       	add	r24, r24
    11f4:	81 60       	ori	r24, 0x01	; 1
    11f6:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	
	return stat;//Return the status code
}
    11fa:	08 95       	ret

000011fc <TWI_ReadAck>:
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_ACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadAck(unsigned char *data){
	//printf("TWI_ReadAck");
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Start receiving, ending with an ACK
    11fc:	24 ec       	ldi	r18, 0xC4	; 196
    11fe:	20 93 bc 00 	sts	0x00BC, r18
	while ((TWCR & (1<<TWINT)) == 0);
    1202:	ec eb       	ldi	r30, 0xBC	; 188
    1204:	f0 e0       	ldi	r31, 0x00	; 0
    1206:	20 81       	ld	r18, Z
    1208:	22 23       	and	r18, r18
    120a:	ec f7       	brge	.-6      	; 0x1206 <TWI_ReadAck+0xa>
	*data=TWDR; //Store the data
    120c:	20 91 bb 00 	lds	r18, 0x00BB
    1210:	fc 01       	movw	r30, r24
    1212:	20 83       	st	Z, r18
	
	return TWSR&TWSR_MASK;//Return the status code
    1214:	80 91 b9 00 	lds	r24, 0x00B9
}
    1218:	88 7f       	andi	r24, 0xF8	; 248
    121a:	08 95       	ret

0000121c <TWI_ReadNack>:
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_NACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadNack(unsigned char *data){
	//printf("TWI_ReadNack");
	TWCR = (1<<TWINT)|(1<<TWEN); //Start receiving, ending with a NACK
    121c:	24 e8       	ldi	r18, 0x84	; 132
    121e:	20 93 bc 00 	sts	0x00BC, r18
	while ((TWCR & (1<<TWINT)) == 0);
    1222:	ec eb       	ldi	r30, 0xBC	; 188
    1224:	f0 e0       	ldi	r31, 0x00	; 0
    1226:	20 81       	ld	r18, Z
    1228:	22 23       	and	r18, r18
    122a:	ec f7       	brge	.-6      	; 0x1226 <TWI_ReadNack+0xa>
	*data=TWDR; //Store the data
    122c:	20 91 bb 00 	lds	r18, 0x00BB
    1230:	fc 01       	movw	r30, r24
    1232:	20 83       	st	Z, r18
	
	return TWSR&TWSR_MASK;//Return the status code
    1234:	80 91 b9 00 	lds	r24, 0x00B9
}
    1238:	88 7f       	andi	r24, 0xF8	; 248
    123a:	08 95       	ret

0000123c <TWI_Stop>:
  @brief Sends a Stop bit, be sure to send a Start bit before future interactions on the bus
  @return Status code, should always be nonzero
*****************************************************************************/
char TWI_Stop(void){
	//printf("TWI_Stop");
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    123c:	84 e9       	ldi	r24, 0x94	; 148
    123e:	80 93 bc 00 	sts	0x00BC, r24
	return 1;
}
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	08 95       	ret

00001246 <TWI_Read>:
  @param[in] amount Number of bytes to recieve
  @param[in] whether or not to send an ACK on the last byte, sends NACK if false
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
    1246:	9f 92       	push	r9
    1248:	af 92       	push	r10
    124a:	bf 92       	push	r11
    124c:	cf 92       	push	r12
    124e:	df 92       	push	r13
    1250:	ef 92       	push	r14
    1252:	ff 92       	push	r15
    1254:	0f 93       	push	r16
    1256:	1f 93       	push	r17
    1258:	cf 93       	push	r28
    125a:	df 93       	push	r29
    125c:	7c 01       	movw	r14, r24
    125e:	8b 01       	movw	r16, r22
    1260:	94 2e       	mov	r9, r20
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
    1262:	16 16       	cp	r1, r22
    1264:	17 06       	cpc	r1, r23
    1266:	f4 f4       	brge	.+60     	; 0x12a4 <TWI_Read+0x5e>
    1268:	c0 e0       	ldi	r28, 0x00	; 0
    126a:	d0 e0       	ldi	r29, 0x00	; 0
		if((ack==false) && ((amount-1)==i)){
    126c:	6b 01       	movw	r12, r22
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	c8 1a       	sub	r12, r24
    1272:	d1 08       	sbc	r13, r1
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
    1274:	57 01       	movw	r10, r14
    1276:	ac 0c       	add	r10, r12
    1278:	bd 1c       	adc	r11, r13
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
		if((ack==false) && ((amount-1)==i)){
    127a:	91 10       	cpse	r9, r1
    127c:	07 c0       	rjmp	.+14     	; 0x128c <TWI_Read+0x46>
    127e:	cc 16       	cp	r12, r28
    1280:	dd 06       	cpc	r13, r29
    1282:	21 f4       	brne	.+8      	; 0x128c <TWI_Read+0x46>
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
    1284:	c5 01       	movw	r24, r10
    1286:	0e 94 0e 09 	call	0x121c	; 0x121c <TWI_ReadNack>
    128a:	05 c0       	rjmp	.+10     	; 0x1296 <TWI_Read+0x50>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}else{
			status=TWI_ReadAck(&data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
    128c:	c7 01       	movw	r24, r14
    128e:	8c 0f       	add	r24, r28
    1290:	9d 1f       	adc	r25, r29
    1292:	0e 94 fe 08 	call	0x11fc	; 0x11fc <TWI_ReadAck>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}
		//printf("A");
		if(status!=TWI_REC_ACK)return status; //If NACK was selected, returning here is fine since the loop is already ending
    1296:	80 35       	cpi	r24, 0x50	; 80
    1298:	31 f4       	brne	.+12     	; 0x12a6 <TWI_Read+0x60>
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
    129a:	21 96       	adiw	r28, 0x01	; 1
    129c:	c0 17       	cp	r28, r16
    129e:	d1 07       	cpc	r29, r17
    12a0:	61 f7       	brne	.-40     	; 0x127a <TWI_Read+0x34>
    12a2:	01 c0       	rjmp	.+2      	; 0x12a6 <TWI_Read+0x60>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
    12a4:	80 e0       	ldi	r24, 0x00	; 0
		//will return if something goes wrong partway through
		//printf("B");
	}
	//printf("0x%1x",(unsigned)status);
	return status;
}
    12a6:	df 91       	pop	r29
    12a8:	cf 91       	pop	r28
    12aa:	1f 91       	pop	r17
    12ac:	0f 91       	pop	r16
    12ae:	ff 90       	pop	r15
    12b0:	ef 90       	pop	r14
    12b2:	df 90       	pop	r13
    12b4:	cf 90       	pop	r12
    12b6:	bf 90       	pop	r11
    12b8:	af 90       	pop	r10
    12ba:	9f 90       	pop	r9
    12bc:	08 95       	ret

000012be <TWI_Write>:
  @param[in] *data Pointer to an array of bytes to send
  @param[in] amount Number of bytes to send
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
    12be:	0f 93       	push	r16
    12c0:	1f 93       	push	r17
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
    12c6:	16 16       	cp	r1, r22
    12c8:	17 06       	cpc	r1, r23
    12ca:	6c f4       	brge	.+26     	; 0x12e6 <TWI_Write+0x28>
    12cc:	ec 01       	movw	r28, r24
    12ce:	8c 01       	movw	r16, r24
    12d0:	06 0f       	add	r16, r22
    12d2:	17 1f       	adc	r17, r23
		status=TWI_WriteByte(data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
    12d4:	89 91       	ld	r24, Y+
    12d6:	0e 94 bb 08 	call	0x1176	; 0x1176 <TWI_WriteByte>
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
    12da:	88 32       	cpi	r24, 0x28	; 40
    12dc:	29 f4       	brne	.+10     	; 0x12e8 <TWI_Write+0x2a>
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
    12de:	c0 17       	cp	r28, r16
    12e0:	d1 07       	cpc	r29, r17
    12e2:	c1 f7       	brne	.-16     	; 0x12d4 <TWI_Write+0x16>
    12e4:	01 c0       	rjmp	.+2      	; 0x12e8 <TWI_Write+0x2a>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
    12e6:	80 e0       	ldi	r24, 0x00	; 0
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
		//will return if something goes wrong partway through
	}
	return status;
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	1f 91       	pop	r17
    12ee:	0f 91       	pop	r16
    12f0:	08 95       	ret

000012f2 <USART0_Init>:
  @brief Initializes USART0 in asynchronous UART mode, 8 bit data, 1 stop bit
  @param[in] desired baud rate (configuration values computed using F_CPU)
*****************************************************************************/
void USART0_Init(unsigned long baud){
	
	stdout = &USART0_stdout; //make stdout print to USART0
    12f2:	26 e0       	ldi	r18, 0x06	; 6
    12f4:	32 e0       	ldi	r19, 0x02	; 2
    12f6:	30 93 25 0a 	sts	0x0A25, r19
    12fa:	20 93 24 0a 	sts	0x0A24, r18
	
	//Compute UBRR for baudrate setting
	unsigned short ubrr=(unsigned short)((F_CPU/(baud*16UL))-1);
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	88 0f       	add	r24, r24
    1304:	99 1f       	adc	r25, r25
    1306:	aa 1f       	adc	r26, r26
    1308:	bb 1f       	adc	r27, r27
    130a:	88 0f       	add	r24, r24
    130c:	99 1f       	adc	r25, r25
    130e:	aa 1f       	adc	r26, r26
    1310:	bb 1f       	adc	r27, r27
    1312:	9c 01       	movw	r18, r24
    1314:	ad 01       	movw	r20, r26
    1316:	22 0f       	add	r18, r18
    1318:	33 1f       	adc	r19, r19
    131a:	44 1f       	adc	r20, r20
    131c:	55 1f       	adc	r21, r21
    131e:	22 0f       	add	r18, r18
    1320:	33 1f       	adc	r19, r19
    1322:	44 1f       	adc	r20, r20
    1324:	55 1f       	adc	r21, r21
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	74 e2       	ldi	r23, 0x24	; 36
    132a:	84 ef       	ldi	r24, 0xF4	; 244
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	0e 94 13 17 	call	0x2e26	; 0x2e26 <__udivmodsi4>
    1332:	21 50       	subi	r18, 0x01	; 1
    1334:	31 09       	sbc	r19, r1
	
	//Set BAUD rate.
	UBRR0H = (unsigned char) (ubrr >> 8);
    1336:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) ubrr;
    133a:	20 93 c4 00 	sts	0x00C4, r18
	/*Set frame format. 8 data bit(settings bits UCSZ00 and UCSZ01  UCSR0B), 1 stop bit(by default and need not to be worried about). 
	The UCSZ01:0 bits combined with the UCSZ02 bit in UCSR0B sets the number of data
	bits (Character Size) in the frame that the Receiver and Transmitter use. 
	If a change on frame format is needed, make sure to modify UCSR0B register above accordingly.
	See datasheet pg. 390.*/
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
    133e:	86 e0       	ldi	r24, 0x06	; 6
    1340:	80 93 c2 00 	sts	0x00C2, r24
	
	//Enable receiver and transmitter. Enable the USART Receive Complete interrupt(RXCIE).
	//UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0));
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);//Enable RX/TX, no interrupts
    1344:	88 e1       	ldi	r24, 0x18	; 24
    1346:	80 93 c1 00 	sts	0x00C1, r24
    134a:	08 95       	ret

0000134c <USART0_Transmit>:
Function contains busy loops for simplicity in debugging. Not production code.
  @brief Transmits a byte via USART0
  @param[in] data byte to be transmitted
*****************************************************************************/
void USART0_Transmit(unsigned char data){
	while(!(UCSR0A & (1 << UDRE0))); //Wait for the empty transmit buffer. (Waiting UDR0 to be empty.)
    134c:	e0 ec       	ldi	r30, 0xC0	; 192
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	90 81       	ld	r25, Z
    1352:	95 ff       	sbrs	r25, 5
    1354:	fd cf       	rjmp	.-6      	; 0x1350 <USART0_Transmit+0x4>
		UDR0 = data;			//store the data in the USART Data Register
    1356:	80 93 c6 00 	sts	0x00C6, r24
    135a:	08 95       	ret

0000135c <USART0_putchar_printf>:
  @brief Called when stdout is being printed to USART0 (this is set up at runtime)
  @param[in] var byte to transmit
  @param[in/out] *stream Pointer to a stdio.h FILE io stream
  @return Status
*****************************************************************************/
int USART0_putchar_printf(char var, FILE *stream) {
    135c:	cf 93       	push	r28
    135e:	c8 2f       	mov	r28, r24
	if (var == '\n') USART0_Transmit('\r');
    1360:	8a 30       	cpi	r24, 0x0A	; 10
    1362:	19 f4       	brne	.+6      	; 0x136a <USART0_putchar_printf+0xe>
    1364:	8d e0       	ldi	r24, 0x0D	; 13
    1366:	0e 94 a6 09 	call	0x134c	; 0x134c <USART0_Transmit>
	USART0_Transmit(var);
    136a:	8c 2f       	mov	r24, r28
    136c:	0e 94 a6 09 	call	0x134c	; 0x134c <USART0_Transmit>
	return 0;
}
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	cf 91       	pop	r28
    1376:	08 95       	ret

00001378 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
    1378:	14 be       	out	0x34, r1	; 52
  wdt_disable();
    137a:	88 e1       	ldi	r24, 0x18	; 24
    137c:	0f b6       	in	r0, 0x3f	; 63
    137e:	f8 94       	cli
    1380:	80 93 60 00 	sts	0x0060, r24
    1384:	10 92 60 00 	sts	0x0060, r1
    1388:	0f be       	out	0x3f, r0	; 63

  CLKPR = 1 << CLKPCE;
    138a:	e1 e6       	ldi	r30, 0x61	; 97
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 e8       	ldi	r24, 0x80	; 128
    1390:	80 83       	st	Z, r24
  CLKPR = 0;
    1392:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
    1394:	78 94       	sei

  HAL_TimerInit();
    1396:	0e 94 ce 09 	call	0x139c	; 0x139c <HAL_TimerInit>
    139a:	08 95       	ret

0000139c <HAL_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_TimerInit(void)
{
  halTimerIrqCount = 0;
    139c:	10 92 f5 09 	sts	0x09F5, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
    13a0:	80 e2       	ldi	r24, 0x20	; 32
    13a2:	9e e4       	ldi	r25, 0x4E	; 78
    13a4:	90 93 a9 00 	sts	0x00A9, r25
    13a8:	80 93 a8 00 	sts	0x00A8, r24
  TCCR4B = (1 << WGM12);              // CTC mode
    13ac:	e1 ea       	ldi	r30, 0xA1	; 161
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	88 e0       	ldi	r24, 0x08	; 8
    13b2:	80 83       	st	Z, r24
  TCCR4B |= (1 << CS11);              // Prescaler 8
    13b4:	80 81       	ld	r24, Z
    13b6:	82 60       	ori	r24, 0x02	; 2
    13b8:	80 83       	st	Z, r24
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
    13ba:	e2 e7       	ldi	r30, 0x72	; 114
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	82 60       	ori	r24, 0x02	; 2
    13c2:	80 83       	st	Z, r24
    13c4:	08 95       	ret

000013c6 <__vector_42>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    13c6:	1f 92       	push	r1
    13c8:	0f 92       	push	r0
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	0f 92       	push	r0
    13ce:	11 24       	eor	r1, r1
    13d0:	8f 93       	push	r24
  halTimerIrqCount++;
    13d2:	80 91 f5 09 	lds	r24, 0x09F5
    13d6:	8f 5f       	subi	r24, 0xFF	; 255
    13d8:	80 93 f5 09 	sts	0x09F5, r24
}
    13dc:	8f 91       	pop	r24
    13de:	0f 90       	pop	r0
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	0f 90       	pop	r0
    13e4:	1f 90       	pop	r1
    13e6:	18 95       	reti

000013e8 <NWK_Init>:
/*************************************************************************//**
  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
  nwkIb.nwkSeqNum = 0;
    13e8:	10 92 fa 09 	sts	0x09FA, r1
  nwkIb.macSeqNum = 0;
    13ec:	10 92 fb 09 	sts	0x09FB, r1
  nwkIb.addr = 0;
    13f0:	10 92 f7 09 	sts	0x09F7, r1
    13f4:	10 92 f6 09 	sts	0x09F6, r1
  nwkIb.lock = 0;
    13f8:	10 92 1d 0a 	sts	0x0A1D, r1
    13fc:	10 92 1c 0a 	sts	0x0A1C, r1
    1400:	ec ef       	ldi	r30, 0xFC	; 252
    1402:	f9 e0       	ldi	r31, 0x09	; 9
    1404:	8c e1       	ldi	r24, 0x1C	; 28
    1406:	9a e0       	ldi	r25, 0x0A	; 10

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
    nwkIb.endpoint[i] = NULL;
    1408:	11 92       	st	Z+, r1
    140a:	11 92       	st	Z+, r1
  nwkIb.nwkSeqNum = 0;
  nwkIb.macSeqNum = 0;
  nwkIb.addr = 0;
  nwkIb.lock = 0;

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
    140c:	e8 17       	cp	r30, r24
    140e:	f9 07       	cpc	r31, r25
    1410:	d9 f7       	brne	.-10     	; 0x1408 <NWK_Init+0x20>
    nwkIb.endpoint[i] = NULL;

  nwkTxInit();
    1412:	0e 94 05 0b 	call	0x160a	; 0x160a <nwkTxInit>
  nwkRxInit();
    1416:	0e 94 78 0a 	call	0x14f0	; 0x14f0 <nwkRxInit>
  nwkFrameInit();
    141a:	0e 94 20 0a 	call	0x1440	; 0x1440 <nwkFrameInit>
  nwkDataReqInit();
    141e:	0e 94 1b 0a 	call	0x1436	; 0x1436 <nwkDataReqInit>
    1422:	08 95       	ret

00001424 <NWK_OpenEndpoint>:
  @param[in] id Endpoint index (1-15)
  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
  nwkIb.endpoint[id] = handler;
    1424:	e8 2f       	mov	r30, r24
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	ee 0f       	add	r30, r30
    142a:	ff 1f       	adc	r31, r31
    142c:	e4 50       	subi	r30, 0x04	; 4
    142e:	f6 4f       	sbci	r31, 0xF6	; 246
    1430:	71 83       	std	Z+1, r23	; 0x01
    1432:	60 83       	st	Z, r22
    1434:	08 95       	ret

00001436 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
    1436:	10 92 87 05 	sts	0x0587, r1
    143a:	10 92 86 05 	sts	0x0586, r1
    143e:	08 95       	ret

00001440 <nwkFrameInit>:
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    1440:	10 92 88 05 	sts	0x0588, r1
    1444:	10 92 11 06 	sts	0x0611, r1
    1448:	10 92 9a 06 	sts	0x069A, r1
    144c:	10 92 23 07 	sts	0x0723, r1
    1450:	10 92 ac 07 	sts	0x07AC, r1
    1454:	08 95       	ret

00001456 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	41 f0       	breq	.+16     	; 0x146a <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
    145a:	fc 01       	movw	r30, r24
    145c:	e7 57       	subi	r30, 0x77	; 119
    145e:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1460:	88 e0       	ldi	r24, 0x08	; 8
    1462:	e5 33       	cpi	r30, 0x35	; 53
    1464:	f8 07       	cpc	r31, r24
    1466:	18 f0       	brcs	.+6      	; 0x146e <nwkFrameNext+0x18>
    1468:	12 c0       	rjmp	.+36     	; 0x148e <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    146a:	e8 e8       	ldi	r30, 0x88	; 136
    146c:	f5 e0       	ldi	r31, 0x05	; 5
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    146e:	80 81       	ld	r24, Z
    1470:	88 23       	and	r24, r24
    1472:	21 f0       	breq	.+8      	; 0x147c <nwkFrameNext+0x26>
    1474:	0f c0       	rjmp	.+30     	; 0x1494 <nwkFrameNext+0x3e>
    1476:	80 81       	ld	r24, Z
    1478:	81 11       	cpse	r24, r1
    147a:	0f c0       	rjmp	.+30     	; 0x149a <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    147c:	e7 57       	subi	r30, 0x77	; 119
    147e:	ff 4f       	sbci	r31, 0xFF	; 255
    1480:	88 e0       	ldi	r24, 0x08	; 8
    1482:	e5 33       	cpi	r30, 0x35	; 53
    1484:	f8 07       	cpc	r31, r24
    1486:	b8 f3       	brcs	.-18     	; 0x1476 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    1488:	80 e0       	ldi	r24, 0x00	; 0
    148a:	90 e0       	ldi	r25, 0x00	; 0
    148c:	08 95       	ret
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    1494:	8e 2f       	mov	r24, r30
    1496:	9f 2f       	mov	r25, r31
    1498:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    149a:	8e 2f       	mov	r24, r30
    149c:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
    149e:	08 95       	ret

000014a0 <nwkRxServiceDataInd>:
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    14a0:	dc 01       	movw	r26, r24
    14a2:	19 96       	adiw	r26, 0x09	; 9
    14a4:	2c 91       	ld	r18, X
    14a6:	19 97       	sbiw	r26, 0x09	; 9
    14a8:	22 23       	and	r18, r18
    14aa:	51 f0       	breq	.+20     	; 0x14c0 <nwkRxServiceDataInd+0x20>
    return false;

  switch (ind->data[0])
    14ac:	17 96       	adiw	r26, 0x07	; 7
    14ae:	ed 91       	ld	r30, X+
    14b0:	fc 91       	ld	r31, X
    14b2:	18 97       	sbiw	r26, 0x08	; 8
    14b4:	20 81       	ld	r18, Z
    14b6:	21 11       	cpse	r18, r1
    14b8:	05 c0       	rjmp	.+10     	; 0x14c4 <nwkRxServiceDataInd+0x24>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
    14ba:	0e 94 32 0b 	call	0x1664	; 0x1664 <nwkTxAckReceived>
    14be:	08 95       	ret
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    return false;
    14c0:	80 e0       	ldi	r24, 0x00	; 0
    14c2:	08 95       	ret
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
    14c4:	80 e0       	ldi	r24, 0x00	; 0
  }
}
    14c6:	08 95       	ret

000014c8 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    14c8:	e6 e4       	ldi	r30, 0x46	; 70
    14ca:	f8 e0       	ldi	r31, 0x08	; 8
    14cc:	28 e7       	ldi	r18, 0x78	; 120
    14ce:	38 e0       	ldi	r19, 0x08	; 8
  bool restart = false;
    14d0:	50 e0       	ldi	r21, 0x00	; 0
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    14d2:	61 e0       	ldi	r22, 0x01	; 1
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    14d4:	40 81       	ld	r20, Z
    14d6:	44 23       	and	r20, r20
    14d8:	19 f0       	breq	.+6      	; 0x14e0 <nwkRxDuplicateRejectionTimerHandler+0x18>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
    14da:	41 50       	subi	r20, 0x01	; 1
    14dc:	40 83       	st	Z, r20
      restart = true;
    14de:	56 2f       	mov	r21, r22
    14e0:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    14e2:	e2 17       	cp	r30, r18
    14e4:	f3 07       	cpc	r31, r19
    14e6:	b1 f7       	brne	.-20     	; 0x14d4 <nwkRxDuplicateRejectionTimerHandler+0xc>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
    14e8:	51 11       	cpse	r21, r1
    SYS_TimerStart(timer);
    14ea:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <SYS_TimerStart>
    14ee:	08 95       	ret

000014f0 <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    14f0:	e6 e4       	ldi	r30, 0x46	; 70
    14f2:	f8 e0       	ldi	r31, 0x08	; 8
    14f4:	88 e7       	ldi	r24, 0x78	; 120
    14f6:	98 e0       	ldi	r25, 0x08	; 8
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
    14f8:	10 82       	st	Z, r1
    14fa:	35 96       	adiw	r30, 0x05	; 5
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    14fc:	e8 17       	cp	r30, r24
    14fe:	f9 07       	cpc	r31, r25
    1500:	d9 f7       	brne	.-10     	; 0x14f8 <nwkRxInit+0x8>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    1502:	84 e6       	ldi	r24, 0x64	; 100
    1504:	90 e0       	ldi	r25, 0x00	; 0
    1506:	a0 e0       	ldi	r26, 0x00	; 0
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	80 93 3b 08 	sts	0x083B, r24
    150e:	90 93 3c 08 	sts	0x083C, r25
    1512:	a0 93 3d 08 	sts	0x083D, r26
    1516:	b0 93 3e 08 	sts	0x083E, r27
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    151a:	10 92 3f 08 	sts	0x083F, r1
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
    151e:	84 e6       	ldi	r24, 0x64	; 100
    1520:	9a e0       	ldi	r25, 0x0A	; 10
    1522:	90 93 41 08 	sts	0x0841, r25
    1526:	80 93 40 08 	sts	0x0840, r24

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
    152a:	60 e5       	ldi	r22, 0x50	; 80
    152c:	7a e0       	ldi	r23, 0x0A	; 10
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	0e 94 12 0a 	call	0x1424	; 0x1424 <NWK_OpenEndpoint>
    1534:	08 95       	ret

00001536 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    1536:	ff 92       	push	r15
    1538:	0f 93       	push	r16
    153a:	1f 93       	push	r17
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    1542:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    1548:	01 e0       	ldi	r16, 0x01	; 1

      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    154a:	0f 2e       	mov	r0, r31
    154c:	f3 e1       	ldi	r31, 0x13	; 19
    154e:	ff 2e       	mov	r15, r31
    1550:	f0 2d       	mov	r31, r0
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    1552:	13 c0       	rjmp	.+38     	; 0x157a <nwkTxDelayTimerHandler+0x44>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    1554:	fc 01       	movw	r30, r24
    1556:	20 81       	ld	r18, Z
    1558:	21 31       	cpi	r18, 0x11	; 17
    155a:	79 f4       	brne	.+30     	; 0x157a <nwkTxDelayTimerHandler+0x44>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    155c:	ec 57       	subi	r30, 0x7C	; 124
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	20 81       	ld	r18, Z
    1562:	31 81       	ldd	r19, Z+1	; 0x01
    1564:	21 50       	subi	r18, 0x01	; 1
    1566:	31 09       	sbc	r19, r1
    1568:	31 83       	std	Z+1, r19	; 0x01
    156a:	20 83       	st	Z, r18
    156c:	23 2b       	or	r18, r19
    156e:	21 f4       	brne	.+8      	; 0x1578 <nwkTxDelayTimerHandler+0x42>
        frame->state = NWK_TX_STATE_SEND;
    1570:	fc 01       	movw	r30, r24
    1572:	f0 82       	st	Z, r15

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    1574:	10 2f       	mov	r17, r16
    1576:	01 c0       	rjmp	.+2      	; 0x157a <nwkTxDelayTimerHandler+0x44>
    1578:	10 2f       	mov	r17, r16
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    157a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <nwkFrameNext>
    157e:	00 97       	sbiw	r24, 0x00	; 0
    1580:	49 f7       	brne	.-46     	; 0x1554 <nwkTxDelayTimerHandler+0x1e>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
    1582:	11 23       	and	r17, r17
    1584:	19 f0       	breq	.+6      	; 0x158c <nwkTxDelayTimerHandler+0x56>
    SYS_TimerStart(timer);
    1586:	ce 01       	movw	r24, r28
    1588:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <SYS_TimerStart>
}
    158c:	df 91       	pop	r29
    158e:	cf 91       	pop	r28
    1590:	1f 91       	pop	r17
    1592:	0f 91       	pop	r16
    1594:	ff 90       	pop	r15
    1596:	08 95       	ret

00001598 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    1598:	ef 92       	push	r14
    159a:	ff 92       	push	r15
    159c:	0f 93       	push	r16
    159e:	1f 93       	push	r17
    15a0:	cf 93       	push	r28
    15a2:	df 93       	push	r29
    15a4:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    15a6:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    15a8:	80 e0       	ldi	r24, 0x00	; 0
    15aa:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    15ac:	01 e0       	ldi	r16, 0x01	; 1

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    15ae:	0f 2e       	mov	r0, r31
    15b0:	f7 e1       	ldi	r31, 0x17	; 23
    15b2:	ef 2e       	mov	r14, r31
    15b4:	f0 2d       	mov	r31, r0
  frame->tx.status = status;
    15b6:	68 94       	set
    15b8:	ff 24       	eor	r15, r15
    15ba:	f4 f8       	bld	r15, 4
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    15bc:	16 c0       	rjmp	.+44     	; 0x15ea <nwkTxAckWaitTimerHandler+0x52>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    15be:	fc 01       	movw	r30, r24
    15c0:	20 81       	ld	r18, Z
    15c2:	26 31       	cpi	r18, 0x16	; 22
    15c4:	91 f4       	brne	.+36     	; 0x15ea <nwkTxAckWaitTimerHandler+0x52>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    15c6:	ec 57       	subi	r30, 0x7C	; 124
    15c8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ca:	20 81       	ld	r18, Z
    15cc:	31 81       	ldd	r19, Z+1	; 0x01
    15ce:	21 50       	subi	r18, 0x01	; 1
    15d0:	31 09       	sbc	r19, r1
    15d2:	31 83       	std	Z+1, r19	; 0x01
    15d4:	20 83       	st	Z, r18
    15d6:	23 2b       	or	r18, r19
    15d8:	39 f4       	brne	.+14     	; 0x15e8 <nwkTxAckWaitTimerHandler+0x50>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    15da:	fc 01       	movw	r30, r24
    15dc:	e0 82       	st	Z, r14
  frame->tx.status = status;
    15de:	ed 57       	subi	r30, 0x7D	; 125
    15e0:	ff 4f       	sbci	r31, 0xFF	; 255
    15e2:	f0 82       	st	Z, r15

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    15e4:	10 2f       	mov	r17, r16
    15e6:	01 c0       	rjmp	.+2      	; 0x15ea <nwkTxAckWaitTimerHandler+0x52>
    15e8:	10 2f       	mov	r17, r16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    15ea:	0e 94 2b 0a 	call	0x1456	; 0x1456 <nwkFrameNext>
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	31 f7       	brne	.-52     	; 0x15be <nwkTxAckWaitTimerHandler+0x26>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
    15f2:	11 23       	and	r17, r17
    15f4:	19 f0       	breq	.+6      	; 0x15fc <nwkTxAckWaitTimerHandler+0x64>
    SYS_TimerStart(timer);
    15f6:	ce 01       	movw	r24, r28
    15f8:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <SYS_TimerStart>
}
    15fc:	df 91       	pop	r29
    15fe:	cf 91       	pop	r28
    1600:	1f 91       	pop	r17
    1602:	0f 91       	pop	r16
    1604:	ff 90       	pop	r15
    1606:	ef 90       	pop	r14
    1608:	08 95       	ret

0000160a <nwkTxInit>:
/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
    160a:	10 92 8f 08 	sts	0x088F, r1
    160e:	10 92 8e 08 	sts	0x088E, r1

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    1612:	82 e3       	ldi	r24, 0x32	; 50
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	a0 e0       	ldi	r26, 0x00	; 0
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	80 93 87 08 	sts	0x0887, r24
    161e:	90 93 88 08 	sts	0x0888, r25
    1622:	a0 93 89 08 	sts	0x0889, r26
    1626:	b0 93 8a 08 	sts	0x088A, r27
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    162a:	10 92 8b 08 	sts	0x088B, r1
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    162e:	8c ec       	ldi	r24, 0xCC	; 204
    1630:	9a e0       	ldi	r25, 0x0A	; 10
    1632:	90 93 8d 08 	sts	0x088D, r25
    1636:	80 93 8c 08 	sts	0x088C, r24

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    163a:	8a e0       	ldi	r24, 0x0A	; 10
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	a0 e0       	ldi	r26, 0x00	; 0
    1640:	b0 e0       	ldi	r27, 0x00	; 0
    1642:	80 93 7a 08 	sts	0x087A, r24
    1646:	90 93 7b 08 	sts	0x087B, r25
    164a:	a0 93 7c 08 	sts	0x087C, r26
    164e:	b0 93 7d 08 	sts	0x087D, r27
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1652:	10 92 7e 08 	sts	0x087E, r1
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    1656:	8b e9       	ldi	r24, 0x9B	; 155
    1658:	9a e0       	ldi	r25, 0x0A	; 10
    165a:	90 93 80 08 	sts	0x0880, r25
    165e:	80 93 7f 08 	sts	0x087F, r24
    1662:	08 95       	ret

00001664 <nwkTxAckReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    1668:	fc 01       	movw	r30, r24
    166a:	c7 81       	ldd	r28, Z+7	; 0x07
    166c:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    166e:	81 85       	ldd	r24, Z+9	; 0x09
    1670:	83 30       	cpi	r24, 0x03	; 3
    1672:	c9 f4       	brne	.+50     	; 0x16a6 <nwkTxAckReceived+0x42>
    1674:	10 c0       	rjmp	.+32     	; 0x1696 <nwkTxAckReceived+0x32>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
    1676:	fc 01       	movw	r30, r24
    1678:	20 81       	ld	r18, Z
    167a:	26 31       	cpi	r18, 0x16	; 22
    167c:	71 f4       	brne	.+28     	; 0x169a <nwkTxAckReceived+0x36>
    167e:	34 85       	ldd	r19, Z+12	; 0x0c
    1680:	29 81       	ldd	r18, Y+1	; 0x01
    1682:	32 13       	cpse	r19, r18
    1684:	0a c0       	rjmp	.+20     	; 0x169a <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    1686:	27 e1       	ldi	r18, 0x17	; 23
    1688:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    168a:	2a 81       	ldd	r18, Y+2	; 0x02
    168c:	ea 57       	subi	r30, 0x7A	; 122
    168e:	ff 4f       	sbci	r31, 0xFF	; 255
    1690:	20 83       	st	Z, r18
      return true;
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	09 c0       	rjmp	.+18     	; 0x16a8 <nwkTxAckReceived+0x44>
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	90 e0       	ldi	r25, 0x00	; 0
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
    169a:	0e 94 2b 0a 	call	0x1456	; 0x1456 <nwkFrameNext>
    169e:	00 97       	sbiw	r24, 0x00	; 0
    16a0:	51 f7       	brne	.-44     	; 0x1676 <nwkTxAckReceived+0x12>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	01 c0       	rjmp	.+2      	; 0x16a8 <nwkTxAckReceived+0x44>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
    16a6:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
    16a8:	df 91       	pop	r29
    16aa:	cf 91       	pop	r28
    16ac:	08 95       	ret

000016ae <phyTrxSetState>:

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
  TRX_STATE_REG = TRX_CMD_FORCE_TRX_OFF;
    16ae:	93 e0       	ldi	r25, 0x03	; 3
    16b0:	90 93 42 01 	sts	0x0142, r25
  while (TRX_STATUS_TRX_OFF != TRX_STATUS_REG_s.trxStatus);
    16b4:	e1 e4       	ldi	r30, 0x41	; 65
    16b6:	f1 e0       	ldi	r31, 0x01	; 1
    16b8:	90 81       	ld	r25, Z
    16ba:	9f 71       	andi	r25, 0x1F	; 31
    16bc:	98 30       	cpi	r25, 0x08	; 8
    16be:	e1 f7       	brne	.-8      	; 0x16b8 <phyTrxSetState+0xa>

  TRX_STATE_REG = state;
    16c0:	80 93 42 01 	sts	0x0142, r24
  while (state != TRX_STATUS_REG_s.trxStatus);
    16c4:	e1 e4       	ldi	r30, 0x41	; 65
    16c6:	f1 e0       	ldi	r31, 0x01	; 1
    16c8:	90 81       	ld	r25, Z
    16ca:	9f 71       	andi	r25, 0x1F	; 31
    16cc:	98 13       	cpse	r25, r24
    16ce:	fc cf       	rjmp	.-8      	; 0x16c8 <phyTrxSetState+0x1a>
}
    16d0:	08 95       	ret

000016d2 <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
    16d2:	e9 e3       	ldi	r30, 0x39	; 57
    16d4:	f1 e0       	ldi	r31, 0x01	; 1
    16d6:	80 81       	ld	r24, Z
    16d8:	81 60       	ori	r24, 0x01	; 1
    16da:	80 83       	st	Z, r24

  phyRxState = false;
    16dc:	10 92 91 08 	sts	0x0891, r1
  phyBand = 0;
    16e0:	10 92 90 08 	sts	0x0890, r1
  phyState = PHY_STATE_IDLE;
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	80 93 92 08 	sts	0x0892, r24

  phyTrxSetState(TRX_CMD_TRX_OFF);
    16ea:	88 e0       	ldi	r24, 0x08	; 8
    16ec:	0e 94 57 0b 	call	0x16ae	; 0x16ae <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
    16f0:	8b ee       	ldi	r24, 0xEB	; 235
    16f2:	80 93 56 01 	sts	0x0156, r24

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
    16f6:	ec e4       	ldi	r30, 0x4C	; 76
    16f8:	f1 e0       	ldi	r31, 0x01	; 1
    16fa:	80 81       	ld	r24, Z
    16fc:	80 68       	ori	r24, 0x80	; 128
    16fe:	80 83       	st	Z, r24
    1700:	08 95       	ret

00001702 <sensor_handler>:

/*************************************************************************//**
  @brief sensor_handler function to decide the execution logic of a sensor according to its state, return 1 if it has some borrow time 
*****************************************************************************/
int sensor_handler( struct event *p )
{
    1702:	0f 93       	push	r16
    1704:	1f 93       	push	r17
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
    170a:	ec 01       	movw	r28, r24
	int retNum;
	int data = 0;
	BaseSensor *sp;

	/* sanity check */
	if( p == EV_NULL )
    170c:	00 97       	sbiw	r24, 0x00	; 0
    170e:	59 f4       	brne	.+22     	; 0x1726 <sensor_handler+0x24>
	{
		#ifdef DEBUG
		printf("Null Event Error !!!");
    1710:	8d ee       	ldi	r24, 0xED	; 237
    1712:	92 e0       	ldi	r25, 0x02	; 2
    1714:	9f 93       	push	r25
    1716:	8f 93       	push	r24
    1718:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
		#endif
		return 0;
    171c:	0f 90       	pop	r0
    171e:	0f 90       	pop	r0
    1720:	80 e0       	ldi	r24, 0x00	; 0
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	79 c0       	rjmp	.+242    	; 0x1818 <sensor_handler+0x116>
	}
	sp = ( BaseSensor * )( p->sp );
    1726:	0a 85       	ldd	r16, Y+10	; 0x0a
    1728:	1b 85       	ldd	r17, Y+11	; 0x0b

	#ifdef DEBUG
	printf("cur_state = %d\n", p->cur_state);
    172a:	8a 89       	ldd	r24, Y+18	; 0x12
    172c:	1f 92       	push	r1
    172e:	8f 93       	push	r24
    1730:	22 e0       	ldi	r18, 0x02	; 2
    1732:	33 e0       	ldi	r19, 0x03	; 3
    1734:	3f 93       	push	r19
    1736:	2f 93       	push	r18
    1738:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
	#endif
	switch( p->cur_state )
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	8a 89       	ldd	r24, Y+18	; 0x12
    1746:	81 30       	cpi	r24, 0x01	; 1
    1748:	a9 f0       	breq	.+42     	; 0x1774 <sensor_handler+0x72>
    174a:	38 f0       	brcs	.+14     	; 0x175a <sensor_handler+0x58>
    174c:	82 30       	cpi	r24, 0x02	; 2
    174e:	09 f4       	brne	.+2      	; 0x1752 <sensor_handler+0x50>
    1750:	49 c0       	rjmp	.+146    	; 0x17e4 <sensor_handler+0xe2>
    1752:	84 30       	cpi	r24, 0x04	; 4
    1754:	09 f4       	brne	.+2      	; 0x1758 <sensor_handler+0x56>
    1756:	56 c0       	rjmp	.+172    	; 0x1804 <sensor_handler+0x102>
    1758:	5d c0       	rjmp	.+186    	; 0x1814 <sensor_handler+0x112>
	{
		/* New : init first, if retNum is not 0 goto Oops state */
		case New :
		// the way to call init() is different than most other functions, since it is virtual function in BaseDevice .
		retNum = sp->abstract.device_vt->init( &(sp->abstract) );
    175a:	d8 01       	movw	r26, r16
    175c:	ed 91       	ld	r30, X+
    175e:	fc 91       	ld	r31, X
    1760:	02 80       	ldd	r0, Z+2	; 0x02
    1762:	f3 81       	ldd	r31, Z+3	; 0x03
    1764:	e0 2d       	mov	r30, r0
    1766:	c8 01       	movw	r24, r16
    1768:	09 95       	icall
		if(retNum != 0)
		{
			p->cur_state = Oops;
		}
		p->cur_state = Ready;
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	8a 8b       	std	Y+18, r24	; 0x12
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	90 e0       	ldi	r25, 0x00	; 0
		if(retNum != 0)
		{
			p->cur_state = Oops;
		}
		p->cur_state = Ready;
		break;
    1772:	52 c0       	rjmp	.+164    	; 0x1818 <sensor_handler+0x116>
		
		
		
		/* Ready : ready to activate collection request, if retNum is not 0 goto Oops state */
		case Ready :
		retNum = sp->vmt->Request(p->sp);
    1774:	d8 01       	movw	r26, r16
    1776:	1c 96       	adiw	r26, 0x0c	; 12
    1778:	ed 91       	ld	r30, X+
    177a:	fc 91       	ld	r31, X
    177c:	1d 97       	sbiw	r26, 0x0d	; 13
    177e:	04 80       	ldd	r0, Z+4	; 0x04
    1780:	f5 81       	ldd	r31, Z+5	; 0x05
    1782:	e0 2d       	mov	r30, r0
    1784:	8a 85       	ldd	r24, Y+10	; 0x0a
    1786:	9b 85       	ldd	r25, Y+11	; 0x0b
    1788:	09 95       	icall
		if ( retNum == -1 )
    178a:	8f 3f       	cpi	r24, 0xFF	; 255
    178c:	bf ef       	ldi	r27, 0xFF	; 255
    178e:	9b 07       	cpc	r25, r27
    1790:	29 f4       	brne	.+10     	; 0x179c <sensor_handler+0x9a>
		{
			p->cur_state = Oops;
    1792:	84 e0       	ldi	r24, 0x04	; 4
    1794:	8a 8b       	std	Y+18, r24	; 0x12
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	3e c0       	rjmp	.+124    	; 0x1818 <sensor_handler+0x116>
		retNum = sp->vmt->Request(p->sp);
		if ( retNum == -1 )
		{
			p->cur_state = Oops;
		}
		else if( retNum == 0 )
    179c:	00 97       	sbiw	r24, 0x00	; 0
    179e:	81 f4       	brne	.+32     	; 0x17c0 <sensor_handler+0xbe>
		{
			p->cur_state = Ready;
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	8a 8b       	std	Y+18, r24	; 0x12
			data = sp->vmt->Collect(p->sp);
    17a4:	d8 01       	movw	r26, r16
    17a6:	1c 96       	adiw	r26, 0x0c	; 12
    17a8:	ed 91       	ld	r30, X+
    17aa:	fc 91       	ld	r31, X
    17ac:	1d 97       	sbiw	r26, 0x0d	; 13
    17ae:	06 80       	ldd	r0, Z+6	; 0x06
    17b0:	f7 81       	ldd	r31, Z+7	; 0x07
    17b2:	e0 2d       	mov	r30, r0
    17b4:	8a 85       	ldd	r24, Y+10	; 0x0a
    17b6:	9b 85       	ldd	r25, Y+11	; 0x0b
    17b8:	09 95       	icall
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	2c c0       	rjmp	.+88     	; 0x1818 <sensor_handler+0x116>
			// printf("data : %d\n", data);
			// #endif
		}
		else
		{
			p->cur_state = Running;
    17c0:	22 e0       	ldi	r18, 0x02	; 2
    17c2:	2a 8b       	std	Y+18, r18	; 0x12
			p->timeout = retNum;
    17c4:	9d 83       	std	Y+5, r25	; 0x05
    17c6:	8c 83       	std	Y+4, r24	; 0x04
			p->borrow_timeout = retNum;
    17c8:	99 87       	std	Y+9, r25	; 0x09
    17ca:	88 87       	std	Y+8, r24	; 0x08
			LL_POP( timeoutq );
    17cc:	80 91 e9 09 	lds	r24, 0x09E9
    17d0:	90 91 ea 09 	lds	r25, 0x09EA
    17d4:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <ll_pop>
			insert_timeoutq_event( p );
    17d8:	ce 01       	movw	r24, r28
    17da:	0e 94 b3 0c 	call	0x1966	; 0x1966 <insert_timeoutq_event>
			return 1;
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	1a c0       	rjmp	.+52     	; 0x1818 <sensor_handler+0x116>
		
		
		/* Running : ready to pull data right away */
		case Running :
		//      data = p->sp->vmt->Collect();
		p->cur_state = Ready;
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	8a 8b       	std	Y+18, r24	; 0x12
		p->sp->vmt->Collect(p->sp);
    17e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    17ea:	9b 85       	ldd	r25, Y+11	; 0x0b
    17ec:	dc 01       	movw	r26, r24
    17ee:	1c 96       	adiw	r26, 0x0c	; 12
    17f0:	ed 91       	ld	r30, X+
    17f2:	fc 91       	ld	r31, X
    17f4:	1d 97       	sbiw	r26, 0x0d	; 13
    17f6:	06 80       	ldd	r0, Z+6	; 0x06
    17f8:	f7 81       	ldd	r31, Z+7	; 0x07
    17fa:	e0 2d       	mov	r30, r0
    17fc:	09 95       	icall
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    17fe:	80 e0       	ldi	r24, 0x00	; 0
    1800:	90 e0       	ldi	r25, 0x00	; 0
		/* Running : ready to pull data right away */
		case Running :
		//      data = p->sp->vmt->Collect();
		p->cur_state = Ready;
		p->sp->vmt->Collect(p->sp);
		break;
    1802:	0a c0       	rjmp	.+20     	; 0x1818 <sensor_handler+0x116>
		
		/* Oops : when some errors occur */
		case Oops :
		/* TODO : ( we may want to do something in reset function and ) re-init by setting the state to new */
#ifdef DEBUG
		      printf("Something really wrong happens\n");
    1804:	82 e1       	ldi	r24, 0x12	; 18
    1806:	93 e0       	ldi	r25, 0x03	; 3
    1808:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
#endif
		p->cur_state = New;
    180c:	1a 8a       	std	Y+18, r1	; 0x12
		break;
	}
	return 0;
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	90 e0       	ldi	r25, 0x00	; 0
		/* TODO : ( we may want to do something in reset function and ) re-init by setting the state to new */
#ifdef DEBUG
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
    1812:	02 c0       	rjmp	.+4      	; 0x1818 <sensor_handler+0x116>
	}
	return 0;
    1814:	80 e0       	ldi	r24, 0x00	; 0
    1816:	90 e0       	ldi	r25, 0x00	; 0
	// printf(" run :\n\t");
	// p->sp->vmt->MyPrint(p->sp);

}
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	08 95       	ret

00001822 <device_handler>:
 */
/*************************************************************************//**
  @brief device_handler function to decide the execution logic of a non-sensor device according to its state.
*****************************************************************************/
int device_handler( struct event *p )
{
    1822:	ef 92       	push	r14
    1824:	ff 92       	push	r15
    1826:	0f 93       	push	r16
    1828:	1f 93       	push	r17
    182a:	cf 93       	push	r28
    182c:	df 93       	push	r29
    182e:	fc 01       	movw	r30, r24
	int retNum;
	BaseDevice * bdp = (BaseDevice *) ( p->sp );
    1830:	c2 85       	ldd	r28, Z+10	; 0x0a
    1832:	d3 85       	ldd	r29, Z+11	; 0x0b
	LoadDataDevice *ldp = (LoadDataDevice*) ( p->load_p );
    1834:	04 85       	ldd	r16, Z+12	; 0x0c
    1836:	15 85       	ldd	r17, Z+13	; 0x0d
	DemoStorageDevice *ddp = (DemoStorageDevice*) ( p->store_p );
    1838:	e6 84       	ldd	r14, Z+14	; 0x0e
    183a:	f7 84       	ldd	r15, Z+15	; 0x0f

	/* sanity check */
	if( p == EV_NULL )
    183c:	00 97       	sbiw	r24, 0x00	; 0
    183e:	49 f4       	brne	.+18     	; 0x1852 <device_handler+0x30>
	{
		#ifdef DEBUG
		printf("Null Event Error !!!");
    1840:	8d ee       	ldi	r24, 0xED	; 237
    1842:	92 e0       	ldi	r25, 0x02	; 2
    1844:	9f 93       	push	r25
    1846:	8f 93       	push	r24
    1848:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
		#endif
		return 0;
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	30 c0       	rjmp	.+96     	; 0x18b2 <device_handler+0x90>
	}
	
	switch( p->cur_state )
    1852:	82 89       	ldd	r24, Z+18	; 0x12
    1854:	88 23       	and	r24, r24
    1856:	19 f0       	breq	.+6      	; 0x185e <device_handler+0x3c>
    1858:	81 30       	cpi	r24, 0x01	; 1
    185a:	21 f0       	breq	.+8      	; 0x1864 <device_handler+0x42>
    185c:	2a c0       	rjmp	.+84     	; 0x18b2 <device_handler+0x90>
	{
		/* New : init first, if retNum is not 0 goto Oops state */
		case New :
			p->cur_state = Ready;
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	82 8b       	std	Z+18, r24	; 0x12
			break;
    1862:	27 c0       	rjmp	.+78     	; 0x18b2 <device_handler+0x90>
		case Ready :
			p->cur_state = Ready;
			if( bdp->device_vt->getType(bdp) == TYPE_DEVICE )
    1864:	e8 81       	ld	r30, Y
    1866:	f9 81       	ldd	r31, Y+1	; 0x01
    1868:	06 80       	ldd	r0, Z+6	; 0x06
    186a:	f7 81       	ldd	r31, Z+7	; 0x07
    186c:	e0 2d       	mov	r30, r0
    186e:	ce 01       	movw	r24, r28
    1870:	09 95       	icall
    1872:	05 97       	sbiw	r24, 0x05	; 5
    1874:	59 f4       	brne	.+22     	; 0x188c <device_handler+0x6a>
			{
				ldp->vmt->Execute(ldp);
    1876:	d8 01       	movw	r26, r16
    1878:	12 96       	adiw	r26, 0x02	; 2
    187a:	ed 91       	ld	r30, X+
    187c:	fc 91       	ld	r31, X
    187e:	13 97       	sbiw	r26, 0x03	; 3
    1880:	02 80       	ldd	r0, Z+2	; 0x02
    1882:	f3 81       	ldd	r31, Z+3	; 0x03
    1884:	e0 2d       	mov	r30, r0
    1886:	c8 01       	movw	r24, r16
    1888:	09 95       	icall
    188a:	13 c0       	rjmp	.+38     	; 0x18b2 <device_handler+0x90>
			}	
			else if( bdp->device_vt->getType(bdp) == TYPE_STORAGE_DEVICE )
    188c:	e8 81       	ld	r30, Y
    188e:	f9 81       	ldd	r31, Y+1	; 0x01
    1890:	06 80       	ldd	r0, Z+6	; 0x06
    1892:	f7 81       	ldd	r31, Z+7	; 0x07
    1894:	e0 2d       	mov	r30, r0
    1896:	ce 01       	movw	r24, r28
    1898:	09 95       	icall
    189a:	04 97       	sbiw	r24, 0x04	; 4
    189c:	51 f4       	brne	.+20     	; 0x18b2 <device_handler+0x90>
			{
				ddp->vmt->Execute(ddp);
    189e:	d7 01       	movw	r26, r14
    18a0:	12 96       	adiw	r26, 0x02	; 2
    18a2:	ed 91       	ld	r30, X+
    18a4:	fc 91       	ld	r31, X
    18a6:	13 97       	sbiw	r26, 0x03	; 3
    18a8:	02 80       	ldd	r0, Z+2	; 0x02
    18aa:	f3 81       	ldd	r31, Z+3	; 0x03
    18ac:	e0 2d       	mov	r30, r0
    18ae:	c7 01       	movw	r24, r14
    18b0:	09 95       	icall
			break;
		default :
			break;
	}
	return 0;
}
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	90 e0       	ldi	r25, 0x00	; 0
    18b6:	df 91       	pop	r29
    18b8:	cf 91       	pop	r28
    18ba:	1f 91       	pop	r17
    18bc:	0f 91       	pop	r16
    18be:	ff 90       	pop	r15
    18c0:	ef 90       	pop	r14
    18c2:	08 95       	ret

000018c4 <init_timeoutq>:

/*************************************************************************//**
  @brief Init function of scheduler, which initialize all events and put them into freelist
*****************************************************************************/
void init_timeoutq()
{
    18c4:	0f 93       	push	r16
    18c6:	1f 93       	push	r17
    18c8:	cf 93       	push	r28
    18ca:	df 93       	push	r29
	int i;

	timeoutq = (struct event *)&TQ;
    18cc:	e5 ee       	ldi	r30, 0xE5	; 229
    18ce:	f9 e0       	ldi	r31, 0x09	; 9
    18d0:	f0 93 ea 09 	sts	0x09EA, r31
    18d4:	e0 93 e9 09 	sts	0x09E9, r30
	LL_INIT(timeoutq);
    18d8:	f0 93 e8 09 	sts	0x09E8, r31
    18dc:	e0 93 e7 09 	sts	0x09E7, r30
    18e0:	f1 83       	std	Z+1, r31	; 0x01
    18e2:	e0 83       	st	Z, r30
	freelist = (struct event *)&FL;
    18e4:	ef ee       	ldi	r30, 0xEF	; 239
    18e6:	f9 e0       	ldi	r31, 0x09	; 9
    18e8:	f0 93 f4 09 	sts	0x09F4, r31
    18ec:	e0 93 f3 09 	sts	0x09F3, r30
	LL_INIT(freelist);
    18f0:	f0 93 f2 09 	sts	0x09F2, r31
    18f4:	e0 93 f1 09 	sts	0x09F1, r30
    18f8:	f1 83       	std	Z+1, r31	; 0x01
    18fa:	e0 83       	st	Z, r30
    18fc:	c5 e9       	ldi	r28, 0x95	; 149
    18fe:	d8 e0       	ldi	r29, 0x08	; 8
    1900:	05 ee       	ldi	r16, 0xE5	; 229
    1902:	19 e0       	ldi	r17, 0x09	; 9

	for (i=0; i<MAX_EVENTS; i++) {
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
    1904:	be 01       	movw	r22, r28
    1906:	80 91 f3 09 	lds	r24, 0x09F3
    190a:	90 91 f4 09 	lds	r25, 0x09F4
    190e:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <ll_r_insert>
    1912:	65 96       	adiw	r28, 0x15	; 21
	timeoutq = (struct event *)&TQ;
	LL_INIT(timeoutq);
	freelist = (struct event *)&FL;
	LL_INIT(freelist);

	for (i=0; i<MAX_EVENTS; i++) {
    1914:	c0 17       	cp	r28, r16
    1916:	d1 07       	cpc	r29, r17
    1918:	a9 f7       	brne	.-22     	; 0x1904 <init_timeoutq+0x40>
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
	}

	return;
}
    191a:	df 91       	pop	r29
    191c:	cf 91       	pop	r28
    191e:	1f 91       	pop	r17
    1920:	0f 91       	pop	r16
    1922:	08 95       	ret

00001924 <get_next_interval>:
*****************************************************************************/
int get_next_interval()
{

	int wait_time = MAX_SLEEP_INTERVAL;
	struct event * ev = ( struct event * ) LL_TOP( timeoutq );
    1924:	80 91 e9 09 	lds	r24, 0x09E9
    1928:	90 91 ea 09 	lds	r25, 0x09EA
    192c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <ll_first>
    1930:	fc 01       	movw	r30, r24

	/* sanity check */
    /* no event in queue */
    /* TODO : to optimize the sleep time or let the CPU sleep or set up some other interrupts */
	if( EV_NULL == ev )
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	59 f4       	brne	.+22     	; 0x194c <get_next_interval+0x28>
	{
#ifdef DEBUG
		printf("we may get some memory leakage issue, or something really bad occurs\n");
    1936:	81 e3       	ldi	r24, 0x31	; 49
    1938:	93 e0       	ldi	r25, 0x03	; 3
    193a:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
		printf("so we are going to take some really sleep, since no event in scheduler\n");
    193e:	86 e7       	ldi	r24, 0x76	; 118
    1940:	93 e0       	ldi	r25, 0x03	; 3
    1942:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
#endif
	    return wait_time;
    1946:	80 e4       	ldi	r24, 0x40	; 64
    1948:	9f e1       	ldi	r25, 0x1F	; 31
    194a:	08 95       	ret
	}
	
	/* if the next event is nearer */
	if( wait_time > ev->timeout )
    194c:	84 81       	ldd	r24, Z+4	; 0x04
    194e:	95 81       	ldd	r25, Z+5	; 0x05
    1950:	80 34       	cpi	r24, 0x40	; 64
    1952:	2f e1       	ldi	r18, 0x1F	; 31
    1954:	92 07       	cpc	r25, r18
    1956:	34 f0       	brlt	.+12     	; 0x1964 <get_next_interval+0x40>
		wait_time = ev->timeout;
	}
	/* if the next event time is longer, we need to wait it time by time, since currently, the longest waiting time support is 8s */
	else
	{
		ev->timeout = ev->timeout - wait_time;
    1958:	80 54       	subi	r24, 0x40	; 64
    195a:	9f 41       	sbci	r25, 0x1F	; 31
    195c:	95 83       	std	Z+5, r25	; 0x05
    195e:	84 83       	std	Z+4, r24	; 0x04
  @brief Return the the time ( ms ) of the next event
*****************************************************************************/
int get_next_interval()
{

	int wait_time = MAX_SLEEP_INTERVAL;
    1960:	80 e4       	ldi	r24, 0x40	; 64
    1962:	9f e1       	ldi	r25, 0x1F	; 31
	else
	{
		ev->timeout = ev->timeout - wait_time;
	}
	return wait_time;
}
    1964:	08 95       	ret

00001966 <insert_timeoutq_event>:

/*************************************************************************//**
  @brief Insert a new event into the scheduler according to timeout order
*****************************************************************************/
void insert_timeoutq_event( struct event * ep)
{
    1966:	cf 93       	push	r28
    1968:	df 93       	push	r29
    196a:	dc 01       	movw	r26, r24
	// Try to insert it according to timeout and timeoutq
	struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
    196c:	c0 91 e9 09 	lds	r28, 0x09E9
    1970:	d0 91 ea 09 	lds	r29, 0x09EA
    1974:	ea 81       	ldd	r30, Y+2	; 0x02
    1976:	fb 81       	ldd	r31, Y+3	; 0x03
    1978:	ce 17       	cp	r28, r30
    197a:	df 07       	cpc	r29, r31
    197c:	09 f1       	breq	.+66     	; 0x19c0 <insert_timeoutq_event+0x5a>
	{
		if( it != EV_NULL )
    197e:	30 97       	sbiw	r30, 0x00	; 0
    1980:	c9 f0       	breq	.+50     	; 0x19b4 <insert_timeoutq_event+0x4e>
		{
			if( ( it->timeout ) > ( ep->timeout ) )
    1982:	44 81       	ldd	r20, Z+4	; 0x04
    1984:	55 81       	ldd	r21, Z+5	; 0x05
    1986:	14 96       	adiw	r26, 0x04	; 4
    1988:	2d 91       	ld	r18, X+
    198a:	3c 91       	ld	r19, X
    198c:	15 97       	sbiw	r26, 0x05	; 5
    198e:	24 17       	cp	r18, r20
    1990:	35 07       	cpc	r19, r21
    1992:	54 f4       	brge	.+20     	; 0x19a8 <insert_timeoutq_event+0x42>
			{
				it->timeout -= ep->timeout;
    1994:	42 1b       	sub	r20, r18
    1996:	53 0b       	sbc	r21, r19
    1998:	55 83       	std	Z+5, r21	; 0x05
    199a:	44 83       	std	Z+4, r20	; 0x04
				LL_L_INSERT( it, ep );
    199c:	bd 01       	movw	r22, r26
    199e:	80 81       	ld	r24, Z
    19a0:	91 81       	ldd	r25, Z+1	; 0x01
    19a2:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <ll_r_insert>
    19a6:	15 c0       	rjmp	.+42     	; 0x19d2 <insert_timeoutq_event+0x6c>
				// printf("left insert \n");
				break;
			}
			else
			{
				ep->timeout -= it->timeout;
    19a8:	24 1b       	sub	r18, r20
    19aa:	35 0b       	sbc	r19, r21
    19ac:	15 96       	adiw	r26, 0x05	; 5
    19ae:	3c 93       	st	X, r19
    19b0:	2e 93       	st	-X, r18
    19b2:	14 97       	sbiw	r26, 0x04	; 4
	// Try to insert it according to timeout and timeoutq
	struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
    19b4:	02 80       	ldd	r0, Z+2	; 0x02
    19b6:	f3 81       	ldd	r31, Z+3	; 0x03
    19b8:	e0 2d       	mov	r30, r0
    19ba:	ce 17       	cp	r28, r30
    19bc:	df 07       	cpc	r29, r31
    19be:	f9 f6       	brne	.-66     	; 0x197e <insert_timeoutq_event+0x18>
	}
	
	// If not insert it left to the header
	if( is_pushed == 0 )
	{
		LL_APPEND(timeoutq, ep);
    19c0:	e0 91 e9 09 	lds	r30, 0x09E9
    19c4:	f0 91 ea 09 	lds	r31, 0x09EA
    19c8:	bd 01       	movw	r22, r26
    19ca:	80 81       	ld	r24, Z
    19cc:	91 81       	ldd	r25, Z+1	; 0x01
    19ce:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <ll_r_insert>

	#ifdef DEBUG
	// dump_timeoutq();
	#endif

}
    19d2:	df 91       	pop	r29
    19d4:	cf 91       	pop	r28
    19d6:	08 95       	ret

000019d8 <load_new_sensor>:

/*************************************************************************//**
  @brief Load a brand new sensor activity into the scheduler's timeoutQ
*****************************************************************************/
int load_new_sensor( int timeout, int repeat, BaseSensor *device_ptr, int otherinfo )
{
    19d8:	cf 92       	push	r12
    19da:	df 92       	push	r13
    19dc:	ef 92       	push	r14
    19de:	ff 92       	push	r15
    19e0:	0f 93       	push	r16
    19e2:	1f 93       	push	r17
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	6c 01       	movw	r12, r24
    19ea:	7b 01       	movw	r14, r22
    19ec:	8a 01       	movw	r16, r20
    19ee:	e9 01       	movw	r28, r18

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    19f0:	80 91 f3 09 	lds	r24, 0x09F3
    19f4:	90 91 f4 09 	lds	r25, 0x09F4
    19f8:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <ll_pop>
    19fc:	fc 01       	movw	r30, r24
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
    19fe:	00 97       	sbiw	r24, 0x00	; 0
    1a00:	b1 f0       	breq	.+44     	; 0x1a2e <load_new_sensor+0x56>
        return -1;
    ep->timeout = timeout;
    1a02:	d5 82       	std	Z+5, r13	; 0x05
    1a04:	c4 82       	std	Z+4, r12	; 0x04
    ep->repeat_interval = repeat;
    1a06:	f7 82       	std	Z+7, r15	; 0x07
    1a08:	e6 82       	std	Z+6, r14	; 0x06
	ep->borrow_timeout = 0;
    1a0a:	11 86       	std	Z+9, r1	; 0x09
    1a0c:	10 86       	std	Z+8, r1	; 0x08
    ep->sp = device_ptr;
    1a0e:	13 87       	std	Z+11, r17	; 0x0b
    1a10:	02 87       	std	Z+10, r16	; 0x0a
    ep->info = otherinfo;
    1a12:	d1 8b       	std	Z+17, r29	; 0x11
    1a14:	c0 8b       	std	Z+16, r28	; 0x10
    ep->cur_state = Ready;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	82 8b       	std	Z+18, r24	; 0x12
    ep->run = sensor_handler;
    1a1a:	81 e8       	ldi	r24, 0x81	; 129
    1a1c:	9b e0       	ldi	r25, 0x0B	; 11
    1a1e:	94 8b       	std	Z+20, r25	; 0x14
    1a20:	83 8b       	std	Z+19, r24	; 0x13
    insert_timeoutq_event( ep );
    1a22:	cf 01       	movw	r24, r30
    1a24:	0e 94 b3 0c 	call	0x1966	; 0x1966 <insert_timeoutq_event>
    return 0;
    1a28:	80 e0       	ldi	r24, 0x00	; 0
    1a2a:	90 e0       	ldi	r25, 0x00	; 0
    1a2c:	02 c0       	rjmp	.+4      	; 0x1a32 <load_new_sensor+0x5a>

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
        return -1;
    1a2e:	8f ef       	ldi	r24, 0xFF	; 255
    1a30:	9f ef       	ldi	r25, 0xFF	; 255
    ep->info = otherinfo;
    ep->cur_state = Ready;
    ep->run = sensor_handler;
    insert_timeoutq_event( ep );
    return 0;
}
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    1a36:	1f 91       	pop	r17
    1a38:	0f 91       	pop	r16
    1a3a:	ff 90       	pop	r15
    1a3c:	ef 90       	pop	r14
    1a3e:	df 90       	pop	r13
    1a40:	cf 90       	pop	r12
    1a42:	08 95       	ret

00001a44 <load_new_device>:

/*************************************************************************//**
  @brief Load a brand new device activity into the scheduler's timeoutQ
*****************************************************************************/
int load_new_device( int timeout, int repeat, BaseDevice *device_ptr, int otherinfo )
{
    1a44:	cf 92       	push	r12
    1a46:	df 92       	push	r13
    1a48:	ef 92       	push	r14
    1a4a:	ff 92       	push	r15
    1a4c:	0f 93       	push	r16
    1a4e:	1f 93       	push	r17
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
    1a54:	6c 01       	movw	r12, r24
    1a56:	7b 01       	movw	r14, r22
    1a58:	ea 01       	movw	r28, r20
    1a5a:	89 01       	movw	r16, r18

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    1a5c:	80 91 f3 09 	lds	r24, 0x09F3
    1a60:	90 91 f4 09 	lds	r25, 0x09F4
    1a64:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <ll_pop>
    1a68:	fc 01       	movw	r30, r24
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	d1 f0       	breq	.+52     	; 0x1aa2 <load_new_device+0x5e>
        return -1;
    ep->timeout = timeout;
    1a6e:	d5 82       	std	Z+5, r13	; 0x05
    1a70:	c4 82       	std	Z+4, r12	; 0x04
    ep->repeat_interval = repeat;
    1a72:	f7 82       	std	Z+7, r15	; 0x07
    1a74:	e6 82       	std	Z+6, r14	; 0x06
	ep->borrow_timeout = 0;
    1a76:	11 86       	std	Z+9, r1	; 0x09
    1a78:	10 86       	std	Z+8, r1	; 0x08
    ep->sp = device_ptr;
    1a7a:	d3 87       	std	Z+11, r29	; 0x0b
    1a7c:	c2 87       	std	Z+10, r28	; 0x0a
	ep->load_p = device_ptr;
    1a7e:	d5 87       	std	Z+13, r29	; 0x0d
    1a80:	c4 87       	std	Z+12, r28	; 0x0c
	ep->store_p = device_ptr;
    1a82:	d7 87       	std	Z+15, r29	; 0x0f
    1a84:	c6 87       	std	Z+14, r28	; 0x0e
    ep->info = otherinfo;
    1a86:	11 8b       	std	Z+17, r17	; 0x11
    1a88:	00 8b       	std	Z+16, r16	; 0x10
    ep->cur_state = Ready;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	82 8b       	std	Z+18, r24	; 0x12
    ep->run = device_handler;
    1a8e:	81 e1       	ldi	r24, 0x11	; 17
    1a90:	9c e0       	ldi	r25, 0x0C	; 12
    1a92:	94 8b       	std	Z+20, r25	; 0x14
    1a94:	83 8b       	std	Z+19, r24	; 0x13
    insert_timeoutq_event( ep );
    1a96:	cf 01       	movw	r24, r30
    1a98:	0e 94 b3 0c 	call	0x1966	; 0x1966 <insert_timeoutq_event>
    return 0;
    1a9c:	80 e0       	ldi	r24, 0x00	; 0
    1a9e:	90 e0       	ldi	r25, 0x00	; 0
    1aa0:	02 c0       	rjmp	.+4      	; 0x1aa6 <load_new_device+0x62>

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
        return -1;
    1aa2:	8f ef       	ldi	r24, 0xFF	; 255
    1aa4:	9f ef       	ldi	r25, 0xFF	; 255
    ep->info = otherinfo;
    ep->cur_state = Ready;
    ep->run = device_handler;
    insert_timeoutq_event( ep );
    return 0;
}
    1aa6:	df 91       	pop	r29
    1aa8:	cf 91       	pop	r28
    1aaa:	1f 91       	pop	r17
    1aac:	0f 91       	pop	r16
    1aae:	ff 90       	pop	r15
    1ab0:	ef 90       	pop	r14
    1ab2:	df 90       	pop	r13
    1ab4:	cf 90       	pop	r12
    1ab6:	08 95       	ret

00001ab8 <handle_timeoutq_event>:

/*************************************************************************//**
  @brief Handle the next event in timeoutQ: execute the event's handler function according to the device type, re-insert it according to the period, and set a timer of next event.
*****************************************************************************/
int handle_timeoutq_event( )
{
    1ab8:	cf 93       	push	r28
    1aba:	df 93       	push	r29
	/* assume we get a valid one */
	struct event * ev = (struct event * )LL_TOP( timeoutq );
    1abc:	80 91 e9 09 	lds	r24, 0x09E9
    1ac0:	90 91 ea 09 	lds	r25, 0x09EA
    1ac4:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <ll_first>
    1ac8:	ec 01       	movw	r28, r24
	if( EV_NULL == ev )
    1aca:	00 97       	sbiw	r24, 0x00	; 0
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <handle_timeoutq_event+0x18>
    1ace:	4c c0       	rjmp	.+152    	; 0x1b68 <handle_timeoutq_event+0xb0>
        return -1;
    
    /* sanity check */
    if( ev->sp == NULL )
    1ad0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ad2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ad4:	89 2b       	or	r24, r25
    1ad6:	09 f4       	brne	.+2      	; 0x1ada <handle_timeoutq_event+0x22>
    1ad8:	4a c0       	rjmp	.+148    	; 0x1b6e <handle_timeoutq_event+0xb6>
        return -1;

	/* retNum may need to be designed in other ways */
    int retNum = ev->run( ev );
    1ada:	eb 89       	ldd	r30, Y+19	; 0x13
    1adc:	fc 89       	ldd	r31, Y+20	; 0x14
    1ade:	ce 01       	movw	r24, r28
    1ae0:	09 95       	icall
	/* 
	 * return 1 if it has to with some borrow time( have a request-time!=0 case ) 
	 * which means the event has already entered the scheduler, 
	 * and won't need to do anything else
	 */
	if( retNum == 1 )
    1ae2:	01 97       	sbiw	r24, 0x01	; 1
    1ae4:	69 f4       	brne	.+26     	; 0x1b00 <handle_timeoutq_event+0x48>
	{
		/* judge if the next top in queue has a timeout <= 0, which we may want to handle it right now */
		if( get_next_interval() == 0 )
    1ae6:	0e 94 92 0c 	call	0x1924	; 0x1924 <get_next_interval>
    1aea:	89 2b       	or	r24, r25
    1aec:	11 f4       	brne	.+4      	; 0x1af2 <handle_timeoutq_event+0x3a>
			handle_timeoutq_event();
    1aee:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <handle_timeoutq_event>
			
		set_timer(get_next_interval());
    1af2:	0e 94 92 0c 	call	0x1924	; 0x1924 <get_next_interval>
    1af6:	0e 94 72 08 	call	0x10e4	; 0x10e4 <set_timer>
		return 0;
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	39 c0       	rjmp	.+114    	; 0x1b72 <handle_timeoutq_event+0xba>
    /*
	 * return 0 means we just fired a case, 
	 * and may need to judge it over the repeat time to re-insert into the scheduler,
	 * since we definitely want to collect data periodically
	 */
    LL_POP( timeoutq );
    1b00:	80 91 e9 09 	lds	r24, 0x09E9
    1b04:	90 91 ea 09 	lds	r25, 0x09EA
    1b08:	0e 94 b3 0e 	call	0x1d66	; 0x1d66 <ll_pop>
    if( ev->repeat_interval != 0 )
    1b0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	b1 f0       	breq	.+44     	; 0x1b40 <handle_timeoutq_event+0x88>
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
    1b14:	28 85       	ldd	r18, Y+8	; 0x08
    1b16:	39 85       	ldd	r19, Y+9	; 0x09
    1b18:	ac 01       	movw	r20, r24
    1b1a:	42 1b       	sub	r20, r18
    1b1c:	53 0b       	sbc	r21, r19
    1b1e:	9a 01       	movw	r18, r20
    1b20:	5d 83       	std	Y+5, r21	; 0x05
    1b22:	4c 83       	std	Y+4, r20	; 0x04
		while( ev->timeout < 0 )
    1b24:	55 23       	and	r21, r21
    1b26:	34 f4       	brge	.+12     	; 0x1b34 <handle_timeoutq_event+0x7c>
		{
			ev->timeout += ev->repeat_interval;
    1b28:	28 0f       	add	r18, r24
    1b2a:	39 1f       	adc	r19, r25
	 */
    LL_POP( timeoutq );
    if( ev->repeat_interval != 0 )
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
		while( ev->timeout < 0 )
    1b2c:	33 23       	and	r19, r19
    1b2e:	e4 f3       	brlt	.-8      	; 0x1b28 <handle_timeoutq_event+0x70>
    1b30:	3d 83       	std	Y+5, r19	; 0x05
    1b32:	2c 83       	std	Y+4, r18	; 0x04
		{
			ev->timeout += ev->repeat_interval;
		}
		ev->borrow_timeout = 0;
    1b34:	19 86       	std	Y+9, r1	; 0x09
    1b36:	18 86       	std	Y+8, r1	; 0x08
        insert_timeoutq_event( ev );
    1b38:	ce 01       	movw	r24, r28
    1b3a:	0e 94 b3 0c 	call	0x1966	; 0x1966 <insert_timeoutq_event>
    1b3e:	07 c0       	rjmp	.+14     	; 0x1b4e <handle_timeoutq_event+0x96>
    }
    else
    {
        LL_PUSH( freelist, ev );
    1b40:	be 01       	movw	r22, r28
    1b42:	80 91 f3 09 	lds	r24, 0x09F3
    1b46:	90 91 f4 09 	lds	r25, 0x09F4
    1b4a:	0e 94 7d 0e 	call	0x1cfa	; 0x1cfa <ll_r_insert>
    }

	
	/* judge if the next top in queue has a timeout <= 0, which we may want to handle it right now */
	if( get_next_interval() == 0 )
    1b4e:	0e 94 92 0c 	call	0x1924	; 0x1924 <get_next_interval>
    1b52:	89 2b       	or	r24, r25
    1b54:	11 f4       	brne	.+4      	; 0x1b5a <handle_timeoutq_event+0xa2>
		handle_timeoutq_event();
    1b56:	0e 94 5c 0d 	call	0x1ab8	; 0x1ab8 <handle_timeoutq_event>
		
	set_timer(get_next_interval());
    1b5a:	0e 94 92 0c 	call	0x1924	; 0x1924 <get_next_interval>
    1b5e:	0e 94 72 08 	call	0x10e4	; 0x10e4 <set_timer>
    return 0;
    1b62:	80 e0       	ldi	r24, 0x00	; 0
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	05 c0       	rjmp	.+10     	; 0x1b72 <handle_timeoutq_event+0xba>
int handle_timeoutq_event( )
{
	/* assume we get a valid one */
	struct event * ev = (struct event * )LL_TOP( timeoutq );
	if( EV_NULL == ev )
        return -1;
    1b68:	8f ef       	ldi	r24, 0xFF	; 255
    1b6a:	9f ef       	ldi	r25, 0xFF	; 255
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <handle_timeoutq_event+0xba>
    
    /* sanity check */
    if( ev->sp == NULL )
        return -1;
    1b6e:	8f ef       	ldi	r24, 0xFF	; 255
    1b70:	9f ef       	ldi	r25, 0xFF	; 255
	if( get_next_interval() == 0 )
		handle_timeoutq_event();
		
	set_timer(get_next_interval());
    return 0;
}
    1b72:	df 91       	pop	r29
    1b74:	cf 91       	pop	r28
    1b76:	08 95       	ret

00001b78 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    1b78:	0e 94 bc 09 	call	0x1378	; 0x1378 <HAL_Init>
  SYS_TimerInit();
    1b7c:	0e 94 29 0e 	call	0x1c52	; 0x1c52 <SYS_TimerInit>
  PHY_Init();
    1b80:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <PHY_Init>
  NWK_Init();
    1b84:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <NWK_Init>
    1b88:	08 95       	ret

00001b8a <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    1b8a:	0f 93       	push	r16
    1b8c:	1f 93       	push	r17
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	ec 01       	movw	r28, r24
  if (timers)
    1b94:	80 91 93 08 	lds	r24, 0x0893
    1b98:	90 91 94 08 	lds	r25, 0x0894
    1b9c:	00 97       	sbiw	r24, 0x00	; 0
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <placeTimer+0x18>
    1ba0:	45 c0       	rjmp	.+138    	; 0x1c2c <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    1ba2:	4e 81       	ldd	r20, Y+6	; 0x06
    1ba4:	5f 81       	ldd	r21, Y+7	; 0x07
    1ba6:	68 85       	ldd	r22, Y+8	; 0x08
    1ba8:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    1baa:	fc 01       	movw	r30, r24
    1bac:	02 81       	ldd	r16, Z+2	; 0x02
    1bae:	13 81       	ldd	r17, Z+3	; 0x03
    1bb0:	24 81       	ldd	r18, Z+4	; 0x04
    1bb2:	35 81       	ldd	r19, Z+5	; 0x05
    1bb4:	40 17       	cp	r20, r16
    1bb6:	51 07       	cpc	r21, r17
    1bb8:	62 07       	cpc	r22, r18
    1bba:	73 07       	cpc	r23, r19
    1bbc:	c0 f4       	brcc	.+48     	; 0x1bee <placeTimer+0x64>
    1bbe:	0b c0       	rjmp	.+22     	; 0x1bd6 <placeTimer+0x4c>
    1bc0:	02 81       	ldd	r16, Z+2	; 0x02
    1bc2:	13 81       	ldd	r17, Z+3	; 0x03
    1bc4:	24 81       	ldd	r18, Z+4	; 0x04
    1bc6:	35 81       	ldd	r19, Z+5	; 0x05
    1bc8:	40 17       	cp	r20, r16
    1bca:	51 07       	cpc	r21, r17
    1bcc:	62 07       	cpc	r22, r18
    1bce:	73 07       	cpc	r23, r19
    1bd0:	28 f0       	brcs	.+10     	; 0x1bdc <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1bd2:	df 01       	movw	r26, r30
    1bd4:	0d c0       	rjmp	.+26     	; 0x1bf0 <placeTimer+0x66>
    1bd6:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    1bd8:	a0 e0       	ldi	r26, 0x00	; 0
    1bda:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    1bdc:	04 1b       	sub	r16, r20
    1bde:	15 0b       	sbc	r17, r21
    1be0:	26 0b       	sbc	r18, r22
    1be2:	37 0b       	sbc	r19, r23
    1be4:	02 83       	std	Z+2, r16	; 0x02
    1be6:	13 83       	std	Z+3, r17	; 0x03
    1be8:	24 83       	std	Z+4, r18	; 0x04
    1bea:	35 83       	std	Z+5, r19	; 0x05
         break;
    1bec:	0a c0       	rjmp	.+20     	; 0x1c02 <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1bee:	dc 01       	movw	r26, r24
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    1bf0:	40 1b       	sub	r20, r16
    1bf2:	51 0b       	sbc	r21, r17
    1bf4:	62 0b       	sbc	r22, r18
    1bf6:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1bf8:	ed 91       	ld	r30, X+
    1bfa:	fc 91       	ld	r31, X
    1bfc:	11 97       	sbiw	r26, 0x01	; 1
    1bfe:	30 97       	sbiw	r30, 0x00	; 0
    1c00:	f9 f6       	brne	.-66     	; 0x1bc0 <placeTimer+0x36>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    1c02:	4a 83       	std	Y+2, r20	; 0x02
    1c04:	5b 83       	std	Y+3, r21	; 0x03
    1c06:	6c 83       	std	Y+4, r22	; 0x04
    1c08:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    1c0a:	10 97       	sbiw	r26, 0x00	; 0
    1c0c:	41 f0       	breq	.+16     	; 0x1c1e <placeTimer+0x94>
    {
      timer->next = prev->next;
    1c0e:	8d 91       	ld	r24, X+
    1c10:	9c 91       	ld	r25, X
    1c12:	11 97       	sbiw	r26, 0x01	; 1
    1c14:	99 83       	std	Y+1, r25	; 0x01
    1c16:	88 83       	st	Y, r24
      prev->next = timer;
    1c18:	cd 93       	st	X+, r28
    1c1a:	dc 93       	st	X, r29
    1c1c:	15 c0       	rjmp	.+42     	; 0x1c48 <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    1c1e:	99 83       	std	Y+1, r25	; 0x01
    1c20:	88 83       	st	Y, r24
      timers = timer;
    1c22:	d0 93 94 08 	sts	0x0894, r29
    1c26:	c0 93 93 08 	sts	0x0893, r28
    1c2a:	0e c0       	rjmp	.+28     	; 0x1c48 <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    1c2c:	19 82       	std	Y+1, r1	; 0x01
    1c2e:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    1c30:	8e 81       	ldd	r24, Y+6	; 0x06
    1c32:	9f 81       	ldd	r25, Y+7	; 0x07
    1c34:	a8 85       	ldd	r26, Y+8	; 0x08
    1c36:	b9 85       	ldd	r27, Y+9	; 0x09
    1c38:	8a 83       	std	Y+2, r24	; 0x02
    1c3a:	9b 83       	std	Y+3, r25	; 0x03
    1c3c:	ac 83       	std	Y+4, r26	; 0x04
    1c3e:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    1c40:	d0 93 94 08 	sts	0x0894, r29
    1c44:	c0 93 93 08 	sts	0x0893, r28
  }
}
    1c48:	df 91       	pop	r29
    1c4a:	cf 91       	pop	r28
    1c4c:	1f 91       	pop	r17
    1c4e:	0f 91       	pop	r16
    1c50:	08 95       	ret

00001c52 <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    1c52:	10 92 94 08 	sts	0x0894, r1
    1c56:	10 92 93 08 	sts	0x0893, r1
    1c5a:	08 95       	ret

00001c5c <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1c5c:	e0 91 93 08 	lds	r30, 0x0893
    1c60:	f0 91 94 08 	lds	r31, 0x0894
    1c64:	30 97       	sbiw	r30, 0x00	; 0
    1c66:	71 f0       	breq	.+28     	; 0x1c84 <SYS_TimerStarted+0x28>
    if (t == timer)
    1c68:	e8 17       	cp	r30, r24
    1c6a:	f9 07       	cpc	r31, r25
    1c6c:	21 f4       	brne	.+8      	; 0x1c76 <SYS_TimerStarted+0x1a>
    1c6e:	0c c0       	rjmp	.+24     	; 0x1c88 <SYS_TimerStarted+0x2c>
    1c70:	8e 17       	cp	r24, r30
    1c72:	9f 07       	cpc	r25, r31
    1c74:	59 f0       	breq	.+22     	; 0x1c8c <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1c76:	01 90       	ld	r0, Z+
    1c78:	f0 81       	ld	r31, Z
    1c7a:	e0 2d       	mov	r30, r0
    1c7c:	30 97       	sbiw	r30, 0x00	; 0
    1c7e:	c1 f7       	brne	.-16     	; 0x1c70 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	08 95       	ret
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	08 95       	ret
    1c8c:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    1c8e:	08 95       	ret

00001c90 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    1c96:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <SYS_TimerStarted>
    1c9a:	81 11       	cpse	r24, r1
    1c9c:	03 c0       	rjmp	.+6      	; 0x1ca4 <SYS_TimerStart+0x14>
    placeTimer(timer);
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <placeTimer>
}
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	08 95       	ret

00001caa <check_crc>:
/*************************************************************************//**
  @brief CRC check
  @return remainder
*****************************************************************************/
unsigned int check_crc(uint16_t message_from_sensor, uint8_t check_value_from_sensor) {
	uint32_t remainder = (uint32_t)message_from_sensor << 8; //Pad with 8 bits because we have to add in the check value
    1caa:	20 e0       	ldi	r18, 0x00	; 0
    1cac:	30 e0       	ldi	r19, 0x00	; 0
    1cae:	38 2f       	mov	r19, r24
	remainder |= check_value_from_sensor; //Add on the check value
    1cb0:	c9 01       	movw	r24, r18
    1cb2:	86 2b       	or	r24, r22
    1cb4:	27 e1       	ldi	r18, 0x17	; 23
    1cb6:	30 e0       	ldi	r19, 0x00	; 0

	uint32_t divsor = (uint32_t)SHIFTED_DIVISOR;
    1cb8:	40 e0       	ldi	r20, 0x00	; 0
    1cba:	50 e8       	ldi	r21, 0x80	; 128

	for (int i = 0 ; i < 16 ; i++) //Operate on only 16 positions of max 24. The remaining 8 are our remainder and should be zero when we're done.
	{
		if( remainder & (uint32_t)1<<(23 - i) ) //Check if there is a one in the left position
    1cbc:	bc 01       	movw	r22, r24
    1cbe:	02 2e       	mov	r0, r18
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <check_crc+0x1c>
    1cc2:	76 95       	lsr	r23
    1cc4:	67 95       	ror	r22
    1cc6:	0a 94       	dec	r0
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <check_crc+0x18>
    1cca:	60 ff       	sbrs	r22, 0
    1ccc:	02 c0       	rjmp	.+4      	; 0x1cd2 <check_crc+0x28>
		remainder ^= divsor;
    1cce:	84 27       	eor	r24, r20
    1cd0:	95 27       	eor	r25, r21

		divsor >>= 1; //Rotate the divsor max 16 times so that we have 8 bits left of a remainder
    1cd2:	56 95       	lsr	r21
    1cd4:	47 95       	ror	r20
    1cd6:	21 50       	subi	r18, 0x01	; 1
    1cd8:	31 09       	sbc	r19, r1
	uint32_t remainder = (uint32_t)message_from_sensor << 8; //Pad with 8 bits because we have to add in the check value
	remainder |= check_value_from_sensor; //Add on the check value

	uint32_t divsor = (uint32_t)SHIFTED_DIVISOR;

	for (int i = 0 ; i < 16 ; i++) //Operate on only 16 positions of max 24. The remaining 8 are our remainder and should be zero when we're done.
    1cda:	27 30       	cpi	r18, 0x07	; 7
    1cdc:	31 05       	cpc	r19, r1
    1cde:	71 f7       	brne	.-36     	; 0x1cbc <check_crc+0x12>

		divsor >>= 1; //Rotate the divsor max 16 times so that we have 8 bits left of a remainder
	}

	return (unsigned int)remainder;
    1ce0:	08 95       	ret

00001ce2 <ll_first>:
 */
llobject_t *
ll_first(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	22 81       	ldd	r18, Z+2	; 0x02
    1ce6:	33 81       	ldd	r19, Z+3	; 0x03
    1ce8:	28 17       	cp	r18, r24
    1cea:	39 07       	cpc	r19, r25
    1cec:	19 f4       	brne	.+6      	; 0x1cf4 <ll_first+0x12>
		return LL_NULL;
    1cee:	80 e0       	ldi	r24, 0x00	; 0
    1cf0:	90 e0       	ldi	r25, 0x00	; 0
    1cf2:	08 95       	ret
    }
    return lp->next;
    1cf4:	82 2f       	mov	r24, r18
    1cf6:	93 2f       	mov	r25, r19
}
    1cf8:	08 95       	ret

00001cfa <ll_r_insert>:
llobject_t *
ll_r_insert(ip, ep)
llobject_t *ip;
llobject_t *ep;
{
    llobject_t *tp = ip->next;
    1cfa:	dc 01       	movw	r26, r24
    1cfc:	12 96       	adiw	r26, 0x02	; 2
    1cfe:	ed 91       	ld	r30, X+
    1d00:	fc 91       	ld	r31, X
    1d02:	13 97       	sbiw	r26, 0x03	; 3

    tp->prev = ep;
    1d04:	71 83       	std	Z+1, r23	; 0x01
    1d06:	60 83       	st	Z, r22
    ep->next = tp;
    1d08:	db 01       	movw	r26, r22
    1d0a:	13 96       	adiw	r26, 0x03	; 3
    1d0c:	fc 93       	st	X, r31
    1d0e:	ee 93       	st	-X, r30
    1d10:	12 97       	sbiw	r26, 0x02	; 2
    ip->next = ep;
    1d12:	fc 01       	movw	r30, r24
    1d14:	73 83       	std	Z+3, r23	; 0x03
    1d16:	62 83       	std	Z+2, r22	; 0x02
    ep->prev = ip;
    1d18:	8d 93       	st	X+, r24
    1d1a:	9c 93       	st	X, r25

    return ep;
}
    1d1c:	cb 01       	movw	r24, r22
    1d1e:	08 95       	ret

00001d20 <ll_detach>:
 */
llobject_t *
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    1d20:	fb 01       	movw	r30, r22
    if (LL_IS_EMPTY(lp) || lp == ep) {
    1d22:	dc 01       	movw	r26, r24
    1d24:	12 96       	adiw	r26, 0x02	; 2
    1d26:	2d 91       	ld	r18, X+
    1d28:	3c 91       	ld	r19, X
    1d2a:	13 97       	sbiw	r26, 0x03	; 3
    1d2c:	28 17       	cp	r18, r24
    1d2e:	39 07       	cpc	r19, r25
    1d30:	a1 f0       	breq	.+40     	; 0x1d5a <ll_detach+0x3a>
    1d32:	86 17       	cp	r24, r22
    1d34:	97 07       	cpc	r25, r23
    1d36:	a1 f0       	breq	.+40     	; 0x1d60 <ll_detach+0x40>
		return LL_NULL;
    }

    (ep->prev)->next = ep->next;
    1d38:	a0 81       	ld	r26, Z
    1d3a:	b1 81       	ldd	r27, Z+1	; 0x01
    1d3c:	82 81       	ldd	r24, Z+2	; 0x02
    1d3e:	93 81       	ldd	r25, Z+3	; 0x03
    1d40:	13 96       	adiw	r26, 0x03	; 3
    1d42:	9c 93       	st	X, r25
    1d44:	8e 93       	st	-X, r24
    1d46:	12 97       	sbiw	r26, 0x02	; 2
    (ep->next)->prev = ep->prev;
    1d48:	a2 81       	ldd	r26, Z+2	; 0x02
    1d4a:	b3 81       	ldd	r27, Z+3	; 0x03
    1d4c:	80 81       	ld	r24, Z
    1d4e:	91 81       	ldd	r25, Z+1	; 0x01
    1d50:	8d 93       	st	X+, r24
    1d52:	9c 93       	st	X, r25

    return ep;
    1d54:	86 2f       	mov	r24, r22
    1d56:	9f 2f       	mov	r25, r31
    1d58:	08 95       	ret
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    if (LL_IS_EMPTY(lp) || lp == ep) {
		return LL_NULL;
    1d5a:	80 e0       	ldi	r24, 0x00	; 0
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	08 95       	ret
    1d60:	80 e0       	ldi	r24, 0x00	; 0
    1d62:	90 e0       	ldi	r25, 0x00	; 0

    (ep->prev)->next = ep->next;
    (ep->next)->prev = ep->prev;

    return ep;
}
    1d64:	08 95       	ret

00001d66 <ll_pop>:
 */
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
    1d66:	fc 01       	movw	r30, r24
    1d68:	62 81       	ldd	r22, Z+2	; 0x02
    1d6a:	73 81       	ldd	r23, Z+3	; 0x03
    1d6c:	68 17       	cp	r22, r24
    1d6e:	79 07       	cpc	r23, r25
    1d70:	19 f0       	breq	.+6      	; 0x1d78 <ll_pop+0x12>
		return LL_NULL;
    }
    return LL_DETACH(lp, lp->next);
    1d72:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <ll_detach>
    1d76:	08 95       	ret
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
		return LL_NULL;
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    }
    return LL_DETACH(lp, lp->next);
}
    1d7c:	08 95       	ret

00001d7e <DemoStorage_Device_VTinit>:
};


void DemoStorage_Device_VTinit( DemoStorageDevice *this )
{
	this->abstract.device_vt = &DemoStorageDevice_abstract_vmt;
    1d7e:	2a e1       	ldi	r18, 0x1A	; 26
    1d80:	32 e0       	ldi	r19, 0x02	; 2
    1d82:	fc 01       	movw	r30, r24
    1d84:	31 83       	std	Z+1, r19	; 0x01
    1d86:	20 83       	st	Z, r18
    1d88:	08 95       	ret

00001d8a <DemoStorage_Device_init>:
}

int DemoStorage_Device_init( DemoStorageDevice *this )
{
	return 0;
}
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	08 95       	ret

00001d90 <DemoStorage_Device_reset>:

int DemoStorage_Device_reset( DemoStorageDevice *this )
{
	return 0;
}
    1d90:	80 e0       	ldi	r24, 0x00	; 0
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	08 95       	ret

00001d96 <DemoStorage_Device_getType>:

int DemoStorage_Device_getType( DemoStorageDevice *this )
{
	return TYPE_STORAGE_DEVICE;
}
    1d96:	84 e0       	ldi	r24, 0x04	; 4
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	08 95       	ret

00001d9c <DemoStorage_Device_Tinit>:



void DemoStorage_Device_Tinit(DemoStorageDevice *this)
{
	this->vmt = &DemoStorageDevice_vmt;
    1d9c:	24 e1       	ldi	r18, 0x14	; 20
    1d9e:	32 e0       	ldi	r19, 0x02	; 2
    1da0:	fc 01       	movw	r30, r24
    1da2:	33 83       	std	Z+3, r19	; 0x03
    1da4:	22 83       	std	Z+2, r18	; 0x02
    1da6:	08 95       	ret

00001da8 <DemoStorage_Device_Configure>:
}

int DemoStorage_Device_Configure(DemoStorageDevice *this)
{
	return 0;
}
    1da8:	80 e0       	ldi	r24, 0x00	; 0
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	08 95       	ret

00001dae <DemoStorage_Device_Execute>:
{
	this->vmt = &DemoStorageDevice_vmt;
}

int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
    1dae:	3f 92       	push	r3
    1db0:	4f 92       	push	r4
    1db2:	5f 92       	push	r5
    1db4:	6f 92       	push	r6
    1db6:	7f 92       	push	r7
    1db8:	8f 92       	push	r8
    1dba:	9f 92       	push	r9
    1dbc:	af 92       	push	r10
    1dbe:	bf 92       	push	r11
    1dc0:	cf 92       	push	r12
    1dc2:	df 92       	push	r13
    1dc4:	ef 92       	push	r14
    1dc6:	ff 92       	push	r15
    1dc8:	0f 93       	push	r16
    1dca:	1f 93       	push	r17
    1dcc:	cf 93       	push	r28
    1dce:	df 93       	push	r29
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    1dd4:	a4 97       	sbiw	r28, 0x24	; 36
    1dd6:	0f b6       	in	r0, 0x3f	; 63
    1dd8:	f8 94       	cli
    1dda:	de bf       	out	0x3e, r29	; 62
    1ddc:	0f be       	out	0x3f, r0	; 63
    1dde:	cd bf       	out	0x3d, r28	; 61
    1de0:	3c 01       	movw	r6, r24
	printf("Executre Storage Device\n");
    1de2:	87 e3       	ldi	r24, 0x37	; 55
    1de4:	94 e0       	ldi	r25, 0x04	; 4
    1de6:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
	for( int i=0; i<this->cur_pos; i++)
    1dea:	f3 01       	movw	r30, r6
    1dec:	86 81       	ldd	r24, Z+6	; 0x06
    1dee:	97 81       	ldd	r25, Z+7	; 0x07
    1df0:	18 16       	cp	r1, r24
    1df2:	19 06       	cpc	r1, r25
    1df4:	0c f0       	brlt	.+2      	; 0x1df8 <DemoStorage_Device_Execute+0x4a>
    1df6:	6f c0       	rjmp	.+222    	; 0x1ed6 <DemoStorage_Device_Execute+0x128>
    1df8:	81 2c       	mov	r8, r1
    1dfa:	91 2c       	mov	r9, r1
    1dfc:	a1 2c       	mov	r10, r1
    1dfe:	b1 2c       	mov	r11, r1
	{
		DataUnit temp = this->StoragesData[i];
    1e00:	0f 2e       	mov	r0, r31
    1e02:	f4 e2       	ldi	r31, 0x24	; 36
    1e04:	3f 2e       	mov	r3, r31
    1e06:	f0 2d       	mov	r31, r0
		printf("%d%d%d %d%d%d\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
    1e08:	0f 2e       	mov	r0, r31
    1e0a:	ff e4       	ldi	r31, 0x4F	; 79
    1e0c:	4f 2e       	mov	r4, r31
    1e0e:	f4 e0       	ldi	r31, 0x04	; 4
    1e10:	5f 2e       	mov	r5, r31
    1e12:	f0 2d       	mov	r31, r0
    1e14:	6e 01       	movw	r12, r28
    1e16:	f1 e1       	ldi	r31, 0x11	; 17
    1e18:	cf 0e       	add	r12, r31
    1e1a:	d1 1c       	adc	r13, r1
		for( int j = 0; j < MAX_NUM_DATA; ++j )
		printf("%3.3f ",temp.data[j]);
    1e1c:	0f 2e       	mov	r0, r31
    1e1e:	fe e5       	ldi	r31, 0x5E	; 94
    1e20:	ef 2e       	mov	r14, r31
    1e22:	f4 e0       	ldi	r31, 0x04	; 4
    1e24:	ff 2e       	mov	r15, r31
    1e26:	f0 2d       	mov	r31, r0
int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
	{
		DataUnit temp = this->StoragesData[i];
    1e28:	f3 01       	movw	r30, r6
    1e2a:	80 85       	ldd	r24, Z+8	; 0x08
    1e2c:	91 85       	ldd	r25, Z+9	; 0x09
    1e2e:	88 0d       	add	r24, r8
    1e30:	99 1d       	adc	r25, r9
    1e32:	fc 01       	movw	r30, r24
    1e34:	de 01       	movw	r26, r28
    1e36:	11 96       	adiw	r26, 0x01	; 1
    1e38:	23 2d       	mov	r18, r3
    1e3a:	01 90       	ld	r0, Z+
    1e3c:	0d 92       	st	X+, r0
    1e3e:	2a 95       	dec	r18
    1e40:	e1 f7       	brne	.-8      	; 0x1e3a <DemoStorage_Device_Execute+0x8c>
		printf("%d%d%d %d%d%d\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
    1e42:	fc 01       	movw	r30, r24
    1e44:	25 89       	ldd	r18, Z+21	; 0x15
    1e46:	2f 93       	push	r18
    1e48:	24 89       	ldd	r18, Z+20	; 0x14
    1e4a:	2f 93       	push	r18
    1e4c:	27 89       	ldd	r18, Z+23	; 0x17
    1e4e:	2f 93       	push	r18
    1e50:	26 89       	ldd	r18, Z+22	; 0x16
    1e52:	2f 93       	push	r18
    1e54:	21 8d       	ldd	r18, Z+25	; 0x19
    1e56:	2f 93       	push	r18
    1e58:	20 8d       	ldd	r18, Z+24	; 0x18
    1e5a:	2f 93       	push	r18
    1e5c:	23 8d       	ldd	r18, Z+27	; 0x1b
    1e5e:	2f 93       	push	r18
    1e60:	22 8d       	ldd	r18, Z+26	; 0x1a
    1e62:	2f 93       	push	r18
    1e64:	25 8d       	ldd	r18, Z+29	; 0x1d
    1e66:	2f 93       	push	r18
    1e68:	24 8d       	ldd	r18, Z+28	; 0x1c
    1e6a:	2f 93       	push	r18
    1e6c:	27 8d       	ldd	r18, Z+31	; 0x1f
    1e6e:	2f 93       	push	r18
    1e70:	86 8d       	ldd	r24, Z+30	; 0x1e
    1e72:	8f 93       	push	r24
    1e74:	5f 92       	push	r5
    1e76:	4f 92       	push	r4
    1e78:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
    1e7c:	8e 01       	movw	r16, r28
    1e7e:	0f 5f       	subi	r16, 0xFF	; 255
    1e80:	1f 4f       	sbci	r17, 0xFF	; 255
    1e82:	0f b6       	in	r0, 0x3f	; 63
    1e84:	f8 94       	cli
    1e86:	de bf       	out	0x3e, r29	; 62
    1e88:	0f be       	out	0x3f, r0	; 63
    1e8a:	cd bf       	out	0x3d, r28	; 61
		for( int j = 0; j < MAX_NUM_DATA; ++j )
		printf("%3.3f ",temp.data[j]);
    1e8c:	f8 01       	movw	r30, r16
    1e8e:	80 81       	ld	r24, Z
    1e90:	91 81       	ldd	r25, Z+1	; 0x01
    1e92:	22 81       	ldd	r18, Z+2	; 0x02
    1e94:	33 81       	ldd	r19, Z+3	; 0x03
    1e96:	0c 5f       	subi	r16, 0xFC	; 252
    1e98:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9a:	3f 93       	push	r19
    1e9c:	2f 93       	push	r18
    1e9e:	9f 93       	push	r25
    1ea0:	8f 93       	push	r24
    1ea2:	ff 92       	push	r15
    1ea4:	ef 92       	push	r14
    1ea6:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
	{
		DataUnit temp = this->StoragesData[i];
		printf("%d%d%d %d%d%d\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
		for( int j = 0; j < MAX_NUM_DATA; ++j )
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	0f 90       	pop	r0
    1eb2:	0f 90       	pop	r0
    1eb4:	0f 90       	pop	r0
    1eb6:	0c 15       	cp	r16, r12
    1eb8:	1d 05       	cpc	r17, r13
    1eba:	41 f7       	brne	.-48     	; 0x1e8c <DemoStorage_Device_Execute+0xde>
}

int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
    1ebc:	ff ef       	ldi	r31, 0xFF	; 255
    1ebe:	af 1a       	sub	r10, r31
    1ec0:	bf 0a       	sbc	r11, r31
    1ec2:	84 e2       	ldi	r24, 0x24	; 36
    1ec4:	88 0e       	add	r8, r24
    1ec6:	91 1c       	adc	r9, r1
    1ec8:	f3 01       	movw	r30, r6
    1eca:	86 81       	ldd	r24, Z+6	; 0x06
    1ecc:	97 81       	ldd	r25, Z+7	; 0x07
    1ece:	a8 16       	cp	r10, r24
    1ed0:	b9 06       	cpc	r11, r25
    1ed2:	0c f4       	brge	.+2      	; 0x1ed6 <DemoStorage_Device_Execute+0x128>
    1ed4:	a9 cf       	rjmp	.-174    	; 0x1e28 <DemoStorage_Device_Execute+0x7a>
		DataUnit temp = this->StoragesData[i];
		printf("%d%d%d %d%d%d\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
		for( int j = 0; j < MAX_NUM_DATA; ++j )
		printf("%3.3f ",temp.data[j]);
	}
	this->cur_pos = 0;
    1ed6:	f3 01       	movw	r30, r6
    1ed8:	17 82       	std	Z+7, r1	; 0x07
    1eda:	16 82       	std	Z+6, r1	; 0x06
	return 0;
}
    1edc:	80 e0       	ldi	r24, 0x00	; 0
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	a4 96       	adiw	r28, 0x24	; 36
    1ee2:	0f b6       	in	r0, 0x3f	; 63
    1ee4:	f8 94       	cli
    1ee6:	de bf       	out	0x3e, r29	; 62
    1ee8:	0f be       	out	0x3f, r0	; 63
    1eea:	cd bf       	out	0x3d, r28	; 61
    1eec:	df 91       	pop	r29
    1eee:	cf 91       	pop	r28
    1ef0:	1f 91       	pop	r17
    1ef2:	0f 91       	pop	r16
    1ef4:	ff 90       	pop	r15
    1ef6:	ef 90       	pop	r14
    1ef8:	df 90       	pop	r13
    1efa:	cf 90       	pop	r12
    1efc:	bf 90       	pop	r11
    1efe:	af 90       	pop	r10
    1f00:	9f 90       	pop	r9
    1f02:	8f 90       	pop	r8
    1f04:	7f 90       	pop	r7
    1f06:	6f 90       	pop	r6
    1f08:	5f 90       	pop	r5
    1f0a:	4f 90       	pop	r4
    1f0c:	3f 90       	pop	r3
    1f0e:	08 95       	ret

00001f10 <New_DemoStorage_Device>:
{
	return TYPE_STORAGE_DEVICE;
}

DemoStorageDevice* New_DemoStorage_Device( int infonum )
{
    1f10:	0f 93       	push	r16
    1f12:	1f 93       	push	r17
    1f14:	cf 93       	push	r28
    1f16:	df 93       	push	r29
    1f18:	8c 01       	movw	r16, r24
	DemoStorageDevice *p = malloc(sizeof(DemoStorageDevice));
    1f1a:	8c e0       	ldi	r24, 0x0C	; 12
    1f1c:	90 e0       	ldi	r25, 0x00	; 0
    1f1e:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <malloc>
    1f22:	ec 01       	movw	r28, r24
	p->info = infonum;
    1f24:	1d 83       	std	Y+5, r17	; 0x05
    1f26:	0c 83       	std	Y+4, r16	; 0x04
};


void DemoStorage_Device_VTinit( DemoStorageDevice *this )
{
	this->abstract.device_vt = &DemoStorageDevice_abstract_vmt;
    1f28:	8a e1       	ldi	r24, 0x1A	; 26
    1f2a:	92 e0       	ldi	r25, 0x02	; 2
    1f2c:	99 83       	std	Y+1, r25	; 0x01
    1f2e:	88 83       	st	Y, r24



void DemoStorage_Device_Tinit(DemoStorageDevice *this)
{
	this->vmt = &DemoStorageDevice_vmt;
    1f30:	84 e1       	ldi	r24, 0x14	; 20
    1f32:	92 e0       	ldi	r25, 0x02	; 2
    1f34:	9b 83       	std	Y+3, r25	; 0x03
    1f36:	8a 83       	std	Y+2, r24	; 0x02
{
	DemoStorageDevice *p = malloc(sizeof(DemoStorageDevice));
	p->info = infonum;
	DemoStorage_Device_VTinit(p);
	DemoStorage_Device_Tinit(p);
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
    1f38:	8c e1       	ldi	r24, 0x1C	; 28
    1f3a:	92 e0       	ldi	r25, 0x02	; 2
    1f3c:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <malloc>
    1f40:	99 87       	std	Y+9, r25	; 0x09
    1f42:	88 87       	std	Y+8, r24	; 0x08
    1f44:	a0 e0       	ldi	r26, 0x00	; 0
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
{
	return TYPE_STORAGE_DEVICE;
}

DemoStorageDevice* New_DemoStorage_Device( int infonum )
{
    1f48:	00 e0       	ldi	r16, 0x00	; 0
    1f4a:	10 e0       	ldi	r17, 0x00	; 0
	DemoStorage_Device_Tinit(p);
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
		for( int j=0;j<MAX_NUM_DATA;j++)
			p->StoragesData[i].data[j] = -9999; 
    1f4c:	40 e0       	ldi	r20, 0x00	; 0
    1f4e:	5c e3       	ldi	r21, 0x3C	; 60
    1f50:	6c e1       	ldi	r22, 0x1C	; 28
    1f52:	76 ec       	ldi	r23, 0xC6	; 198
    1f54:	19 c0       	rjmp	.+50     	; 0x1f88 <New_DemoStorage_Device+0x78>
    1f56:	e8 85       	ldd	r30, Y+8	; 0x08
    1f58:	f9 85       	ldd	r31, Y+9	; 0x09
    1f5a:	ea 0f       	add	r30, r26
    1f5c:	fb 1f       	adc	r31, r27
    1f5e:	c9 01       	movw	r24, r18
    1f60:	88 0f       	add	r24, r24
    1f62:	99 1f       	adc	r25, r25
    1f64:	88 0f       	add	r24, r24
    1f66:	99 1f       	adc	r25, r25
    1f68:	e8 0f       	add	r30, r24
    1f6a:	f9 1f       	adc	r31, r25
    1f6c:	40 83       	st	Z, r20
    1f6e:	51 83       	std	Z+1, r21	; 0x01
    1f70:	62 83       	std	Z+2, r22	; 0x02
    1f72:	73 83       	std	Z+3, r23	; 0x03
	DemoStorage_Device_VTinit(p);
	DemoStorage_Device_Tinit(p);
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
		for( int j=0;j<MAX_NUM_DATA;j++)
    1f74:	2f 5f       	subi	r18, 0xFF	; 255
    1f76:	3f 4f       	sbci	r19, 0xFF	; 255
    1f78:	24 30       	cpi	r18, 0x04	; 4
    1f7a:	31 05       	cpc	r19, r1
    1f7c:	61 f7       	brne	.-40     	; 0x1f56 <New_DemoStorage_Device+0x46>
    1f7e:	94 96       	adiw	r26, 0x24	; 36
	p->info = infonum;
	DemoStorage_Device_VTinit(p);
	DemoStorage_Device_Tinit(p);
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
    1f80:	ac 31       	cpi	r26, 0x1C	; 28
    1f82:	82 e0       	ldi	r24, 0x02	; 2
    1f84:	b8 07       	cpc	r27, r24
    1f86:	19 f0       	breq	.+6      	; 0x1f8e <New_DemoStorage_Device+0x7e>
{
	return TYPE_STORAGE_DEVICE;
}

DemoStorageDevice* New_DemoStorage_Device( int infonum )
{
    1f88:	20 2f       	mov	r18, r16
    1f8a:	31 2f       	mov	r19, r17
    1f8c:	e4 cf       	rjmp	.-56     	; 0x1f56 <New_DemoStorage_Device+0x46>
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
		for( int j=0;j<MAX_NUM_DATA;j++)
			p->StoragesData[i].data[j] = -9999; 
	p->cur_pos = 0;
    1f8e:	1f 82       	std	Y+7, r1	; 0x07
    1f90:	1e 82       	std	Y+6, r1	; 0x06

	return p;
}
    1f92:	ce 01       	movw	r24, r28
    1f94:	df 91       	pop	r29
    1f96:	cf 91       	pop	r28
    1f98:	1f 91       	pop	r17
    1f9a:	0f 91       	pop	r16
    1f9c:	08 95       	ret

00001f9e <LoadData_Device_VTinit>:
};


void LoadData_Device_VTinit( LoadDataDevice *this )
{
	this->abstract.device_vt = &LoadDataDevice_abstract_vmt;
    1f9e:	28 e2       	ldi	r18, 0x28	; 40
    1fa0:	32 e0       	ldi	r19, 0x02	; 2
    1fa2:	fc 01       	movw	r30, r24
    1fa4:	31 83       	std	Z+1, r19	; 0x01
    1fa6:	20 83       	st	Z, r18
    1fa8:	08 95       	ret

00001faa <LoadData_Device_init>:
}

int LoadData_Device_init( LoadDataDevice *this )
{
	return 0;
}
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	08 95       	ret

00001fb0 <LoadData_Device_reset>:

int LoadData_Device_reset( LoadDataDevice *this )
{
	return 0;
}
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	90 e0       	ldi	r25, 0x00	; 0
    1fb4:	08 95       	ret

00001fb6 <LoadData_Device_getType>:

int LoadData_Device_getType( LoadDataDevice *this )
{
	return TYPE_DEVICE;
}
    1fb6:	85 e0       	ldi	r24, 0x05	; 5
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	08 95       	ret

00001fbc <LoadData_Device_Tinit>:



void LoadData_Device_Tinit(LoadDataDevice *this)
{
	this->vmt = &LoadDataDevice_vmt;
    1fbc:	22 e2       	ldi	r18, 0x22	; 34
    1fbe:	32 e0       	ldi	r19, 0x02	; 2
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	33 83       	std	Z+3, r19	; 0x03
    1fc4:	22 83       	std	Z+2, r18	; 0x02
    1fc6:	08 95       	ret

00001fc8 <LoadData_Device_Configure>:
}

int LoadData_Device_Configure(LoadDataDevice *this)
{
	return 0;
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	08 95       	ret

00001fce <LoadData_Device_Execute>:
{
	this->vmt = &LoadDataDevice_vmt;
}

int LoadData_Device_Execute(LoadDataDevice *this)
{
    1fce:	cf 93       	push	r28
    1fd0:	df 93       	push	r29
    1fd2:	ec 01       	movw	r28, r24
	printf("Executre LoadData Device\n");
    1fd4:	85 e6       	ldi	r24, 0x65	; 101
    1fd6:	94 e0       	ldi	r25, 0x04	; 4
    1fd8:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
	cur_data = this->store_device->get_CurDataUnit(this->store_device);
    1fdc:	8e 81       	ldd	r24, Y+6	; 0x06
    1fde:	9f 81       	ldd	r25, Y+7	; 0x07
    1fe0:	dc 01       	movw	r26, r24
    1fe2:	1a 96       	adiw	r26, 0x0a	; 10
    1fe4:	ed 91       	ld	r30, X+
    1fe6:	fc 91       	ld	r31, X
    1fe8:	1b 97       	sbiw	r26, 0x0b	; 11
    1fea:	09 95       	icall
    1fec:	90 93 ee 09 	sts	0x09EE, r25
    1ff0:	80 93 ed 09 	sts	0x09ED, r24
	return 0;
}
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	df 91       	pop	r29
    1ffa:	cf 91       	pop	r28
    1ffc:	08 95       	ret

00001ffe <New_LoadData_Device>:
{
	return TYPE_DEVICE;
}

LoadDataDevice* New_LoadData_Device( int infonum, DemoStorageDevice * ptr )
{
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	8c 01       	movw	r16, r24
    2008:	eb 01       	movw	r28, r22
	LoadDataDevice *p = malloc(sizeof(LoadDataDevice));
    200a:	88 e0       	ldi	r24, 0x08	; 8
    200c:	90 e0       	ldi	r25, 0x00	; 0
    200e:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <malloc>
    2012:	fc 01       	movw	r30, r24
	p->info = infonum;
    2014:	15 83       	std	Z+5, r17	; 0x05
    2016:	04 83       	std	Z+4, r16	; 0x04
	p->store_device = ptr;
    2018:	d7 83       	std	Z+7, r29	; 0x07
    201a:	c6 83       	std	Z+6, r28	; 0x06
};


void LoadData_Device_VTinit( LoadDataDevice *this )
{
	this->abstract.device_vt = &LoadDataDevice_abstract_vmt;
    201c:	88 e2       	ldi	r24, 0x28	; 40
    201e:	92 e0       	ldi	r25, 0x02	; 2
    2020:	91 83       	std	Z+1, r25	; 0x01
    2022:	80 83       	st	Z, r24



void LoadData_Device_Tinit(LoadDataDevice *this)
{
	this->vmt = &LoadDataDevice_vmt;
    2024:	82 e2       	ldi	r24, 0x22	; 34
    2026:	92 e0       	ldi	r25, 0x02	; 2
    2028:	93 83       	std	Z+3, r25	; 0x03
    202a:	82 83       	std	Z+2, r24	; 0x02
	p->info = infonum;
	p->store_device = ptr;
	LoadData_Device_VTinit(p);
	LoadData_Device_Tinit(p);
	return p;
}
    202c:	cf 01       	movw	r24, r30
    202e:	df 91       	pop	r29
    2030:	cf 91       	pop	r28
    2032:	1f 91       	pop	r17
    2034:	0f 91       	pop	r16
    2036:	08 95       	ret

00002038 <BMP280_FctnInit>:



void BMP280_FctnInit(BMP280Sensor *this)
{
	this->inherited.vmt = &BMP280_vmt;
    2038:	28 e3       	ldi	r18, 0x38	; 56
    203a:	32 e0       	ldi	r19, 0x02	; 2
    203c:	fc 01       	movw	r30, r24
    203e:	35 87       	std	Z+13, r19	; 0x0d
    2040:	24 87       	std	Z+12, r18	; 0x0c
    2042:	08 95       	ret

00002044 <BMP280_Configure>:

int BMP280_Configure(BMP280Sensor *this )
{
	// virtual function
	return 0;
}
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	08 95       	ret

0000204a <BMP280_VTinit>:
	printf("BMP280_Error\n");
	return 0;
}
void BMP280_VTinit( BMP280Sensor* this)
{
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
    204a:	20 e3       	ldi	r18, 0x30	; 48
    204c:	32 e0       	ldi	r19, 0x02	; 2
    204e:	fc 01       	movw	r30, r24
    2050:	31 83       	std	Z+1, r19	; 0x01
    2052:	20 83       	st	Z, r18
    2054:	08 95       	ret

00002056 <BMP280_reset>:

int BMP280_reset( BMP280Sensor* this)
{
    // virtual function
    return 0;
}
    2056:	80 e0       	ldi	r24, 0x00	; 0
    2058:	90 e0       	ldi	r25, 0x00	; 0
    205a:	08 95       	ret

0000205c <BMP280_getType>:

int BMP280_getType(BMP280Sensor* this)
{
    return TYPE_SENSOR;
}
    205c:	83 e0       	ldi	r24, 0x03	; 3
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	08 95       	ret

00002062 <BMP280_Error>:
	return 0;
}

int BMP280_Error(BMP280Sensor *this )
{
	printf("BMP280_Error\n");
    2062:	8e e7       	ldi	r24, 0x7E	; 126
    2064:	94 e0       	ldi	r25, 0x04	; 4
    2066:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
	return 0;
}
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	08 95       	ret

00002070 <BMP280_init>:
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
}

int BMP280_init( BMP280Sensor* this)
{
    printf("BMP280 Sensor Init\n");
    2070:	8b e8       	ldi	r24, 0x8B	; 139
    2072:	94 e0       	ldi	r25, 0x04	; 4
    2074:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
    return 0;
}
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	90 e0       	ldi	r25, 0x00	; 0
    207c:	08 95       	ret

0000207e <BMP280_Request>:
	// virtual function
	return 0;
}

int BMP280_Request(BMP280Sensor *this )
{
    207e:	cf 93       	push	r28
    2080:	df 93       	push	r29
	printf("BMP280 Request\n");
    2082:	8e e9       	ldi	r24, 0x9E	; 158
    2084:	94 e0       	ldi	r25, 0x04	; 4
    2086:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
	int Delay = BMP280_StartMeasurment();
    208a:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <BMP280_StartMeasurment>
    208e:	c8 2f       	mov	r28, r24
    2090:	d0 e0       	ldi	r29, 0x00	; 0
	printf("\tWait for %d ms\n",Delay);
    2092:	1f 92       	push	r1
    2094:	8f 93       	push	r24
    2096:	2d ea       	ldi	r18, 0xAD	; 173
    2098:	34 e0       	ldi	r19, 0x04	; 4
    209a:	3f 93       	push	r19
    209c:	2f 93       	push	r18
    209e:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
	if( Delay == 0 )
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	0f 90       	pop	r0
    20aa:	20 97       	sbiw	r28, 0x00	; 0
    20ac:	19 f0       	breq	.+6      	; 0x20b4 <BMP280_Request+0x36>
		return 0;
	else
		return ( 1 + Delay );
    20ae:	ce 01       	movw	r24, r28
    20b0:	01 96       	adiw	r24, 0x01	; 1
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <BMP280_Request+0x3a>
{
	printf("BMP280 Request\n");
	int Delay = BMP280_StartMeasurment();
	printf("\tWait for %d ms\n",Delay);
	if( Delay == 0 )
		return 0;
    20b4:	80 e0       	ldi	r24, 0x00	; 0
    20b6:	90 e0       	ldi	r25, 0x00	; 0
	else
		return ( 1 + Delay );
}
    20b8:	df 91       	pop	r29
    20ba:	cf 91       	pop	r28
    20bc:	08 95       	ret

000020be <BMP280_Collect>:

int BMP280_Collect(BMP280Sensor *this )
{
    20be:	cf 93       	push	r28
    20c0:	df 93       	push	r29
    20c2:	cd b7       	in	r28, 0x3d	; 61
    20c4:	de b7       	in	r29, 0x3e	; 62
    20c6:	28 97       	sbiw	r28, 0x08	; 8
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	f8 94       	cli
    20cc:	de bf       	out	0x3e, r29	; 62
    20ce:	0f be       	out	0x3f, r0	; 63
    20d0:	cd bf       	out	0x3d, r28	; 61
	printf("BMP280 Collect\n");
    20d2:	8e eb       	ldi	r24, 0xBE	; 190
    20d4:	94 e0       	ldi	r25, 0x04	; 4
    20d6:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
	double T, P;
	BMP280_GetTemperatureAndPressure(&T,&P);
    20da:	be 01       	movw	r22, r28
    20dc:	6b 5f       	subi	r22, 0xFB	; 251
    20de:	7f 4f       	sbci	r23, 0xFF	; 255
    20e0:	ce 01       	movw	r24, r28
    20e2:	01 96       	adiw	r24, 0x01	; 1
    20e4:	0e 94 2c 06 	call	0xc58	; 0xc58 <BMP280_GetTemperatureAndPressure>
	printf("\tTemperature = %.3f\n\tPressure = %.3f\n",T,P);
    20e8:	88 85       	ldd	r24, Y+8	; 0x08
    20ea:	8f 93       	push	r24
    20ec:	8f 81       	ldd	r24, Y+7	; 0x07
    20ee:	8f 93       	push	r24
    20f0:	8e 81       	ldd	r24, Y+6	; 0x06
    20f2:	8f 93       	push	r24
    20f4:	8d 81       	ldd	r24, Y+5	; 0x05
    20f6:	8f 93       	push	r24
    20f8:	8c 81       	ldd	r24, Y+4	; 0x04
    20fa:	8f 93       	push	r24
    20fc:	8b 81       	ldd	r24, Y+3	; 0x03
    20fe:	8f 93       	push	r24
    2100:	8a 81       	ldd	r24, Y+2	; 0x02
    2102:	8f 93       	push	r24
    2104:	89 81       	ldd	r24, Y+1	; 0x01
    2106:	8f 93       	push	r24
    2108:	8d ec       	ldi	r24, 0xCD	; 205
    210a:	94 e0       	ldi	r25, 0x04	; 4
    210c:	9f 93       	push	r25
    210e:	8f 93       	push	r24
    2110:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
	return 0;
    2114:	0f b6       	in	r0, 0x3f	; 63
    2116:	f8 94       	cli
    2118:	de bf       	out	0x3e, r29	; 62
    211a:	0f be       	out	0x3f, r0	; 63
    211c:	cd bf       	out	0x3d, r28	; 61
}
    211e:	80 e0       	ldi	r24, 0x00	; 0
    2120:	90 e0       	ldi	r25, 0x00	; 0
    2122:	28 96       	adiw	r28, 0x08	; 8
    2124:	0f b6       	in	r0, 0x3f	; 63
    2126:	f8 94       	cli
    2128:	de bf       	out	0x3e, r29	; 62
    212a:	0f be       	out	0x3f, r0	; 63
    212c:	cd bf       	out	0x3d, r28	; 61
    212e:	df 91       	pop	r29
    2130:	cf 91       	pop	r28
    2132:	08 95       	ret

00002134 <New_BMP280_Sensor>:
    return TYPE_SENSOR;
}


BMP280Sensor* New_BMP280_Sensor( int num, int NumData )
{
    2134:	ef 92       	push	r14
    2136:	ff 92       	push	r15
    2138:	0f 93       	push	r16
    213a:	1f 93       	push	r17
    213c:	cf 93       	push	r28
    213e:	df 93       	push	r29
    2140:	7c 01       	movw	r14, r24
    2142:	8b 01       	movw	r16, r22
	BMP280Sensor *p = malloc(sizeof(BMP280Sensor));
    2144:	8e e0       	ldi	r24, 0x0E	; 14
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <malloc>
    214c:	ec 01       	movw	r28, r24
	printf("BMP280_Error\n");
	return 0;
}
void BMP280_VTinit( BMP280Sensor* this)
{
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
    214e:	80 e3       	ldi	r24, 0x30	; 48
    2150:	92 e0       	ldi	r25, 0x02	; 2
    2152:	99 83       	std	Y+1, r25	; 0x01
    2154:	88 83       	st	Y, r24



void BMP280_FctnInit(BMP280Sensor *this)
{
	this->inherited.vmt = &BMP280_vmt;
    2156:	88 e3       	ldi	r24, 0x38	; 56
    2158:	92 e0       	ldi	r25, 0x02	; 2
    215a:	9d 87       	std	Y+13, r25	; 0x0d
    215c:	8c 87       	std	Y+12, r24	; 0x0c
BMP280Sensor* New_BMP280_Sensor( int num, int NumData )
{
	BMP280Sensor *p = malloc(sizeof(BMP280Sensor));
    BMP280_VTinit( p );
    BMP280_FctnInit( p );
	p->inherited.test_num = num;
    215e:	fb 82       	std	Y+3, r15	; 0x03
    2160:	ea 82       	std	Y+2, r14	; 0x02
	
	p->inherited.NumOfData = NumData;
    2162:	1f 83       	std	Y+7, r17	; 0x07
    2164:	0e 83       	std	Y+6, r16	; 0x06
	p->inherited.StartNum = SensorDataCount;
    2166:	60 91 eb 09 	lds	r22, 0x09EB
    216a:	70 91 ec 09 	lds	r23, 0x09EC
    216e:	7d 83       	std	Y+5, r23	; 0x05
    2170:	6c 83       	std	Y+4, r22	; 0x04
	SensorDataCount += NumData;
    2172:	60 0f       	add	r22, r16
    2174:	71 1f       	adc	r23, r17
    2176:	70 93 ec 09 	sts	0x09EC, r23
    217a:	60 93 eb 09 	sts	0x09EB, r22
	printf("SensorDataCount %d\n",SensorDataCount);
    217e:	7f 93       	push	r23
    2180:	6f 93       	push	r22
    2182:	83 ef       	ldi	r24, 0xF3	; 243
    2184:	94 e0       	ldi	r25, 0x04	; 4
    2186:	9f 93       	push	r25
    2188:	8f 93       	push	r24
    218a:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
	
	return p;
    218e:	0f 90       	pop	r0
    2190:	0f 90       	pop	r0
    2192:	0f 90       	pop	r0
    2194:	0f 90       	pop	r0
    2196:	ce 01       	movw	r24, r28
    2198:	df 91       	pop	r29
    219a:	cf 91       	pop	r28
    219c:	1f 91       	pop	r17
    219e:	0f 91       	pop	r16
    21a0:	ff 90       	pop	r15
    21a2:	ef 90       	pop	r14
    21a4:	08 95       	ret

000021a6 <Si7020_FctnInit>:



void Si7020_FctnInit(Si7020Sensor *this)
{
	this->inherited.vmt = &Si7020_vmt;
    21a6:	2a e4       	ldi	r18, 0x4A	; 74
    21a8:	32 e0       	ldi	r19, 0x02	; 2
    21aa:	fc 01       	movw	r30, r24
    21ac:	35 87       	std	Z+13, r19	; 0x0d
    21ae:	24 87       	std	Z+12, r18	; 0x0c
    21b0:	08 95       	ret

000021b2 <Si7020_Configure>:

int Si7020_Configure(Si7020Sensor *this )
{
	// virtual function
	return 0;
}
    21b2:	80 e0       	ldi	r24, 0x00	; 0
    21b4:	90 e0       	ldi	r25, 0x00	; 0
    21b6:	08 95       	ret

000021b8 <Si7020_Error>:

int Si7020_Error(Si7020Sensor *this )
{
	// virtual function
	return 0;
}
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	08 95       	ret

000021be <Si7020_VTinit>:
void Si7020_VTinit( Si7020Sensor* this)
{
	this->inherited.abstract.device_vt = &Si7020_abstract_vmt;
    21be:	22 e4       	ldi	r18, 0x42	; 66
    21c0:	32 e0       	ldi	r19, 0x02	; 2
    21c2:	fc 01       	movw	r30, r24
    21c4:	31 83       	std	Z+1, r19	; 0x01
    21c6:	20 83       	st	Z, r18
    21c8:	08 95       	ret

000021ca <Si7020_reset>:

int Si7020_reset( Si7020Sensor* this)
{
	// virtual function
	return 0;
}
    21ca:	80 e0       	ldi	r24, 0x00	; 0
    21cc:	90 e0       	ldi	r25, 0x00	; 0
    21ce:	08 95       	ret

000021d0 <Si7020_getType>:

int Si7020_getType(Si7020Sensor* this)
{
	return TYPE_SENSOR;
}
    21d0:	83 e0       	ldi	r24, 0x03	; 3
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	08 95       	ret

000021d6 <Si7020_Init>:
	this->inherited.abstract.device_vt = &Si7020_abstract_vmt;
}

int Si7020_Init( Si7020Sensor* this)
{
	printf("Si7020 Sensor Init\n");
    21d6:	87 e0       	ldi	r24, 0x07	; 7
    21d8:	95 e0       	ldi	r25, 0x05	; 5
    21da:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
	return 0;
}
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	08 95       	ret

000021e4 <Si7020_Request>:
	// virtual function
	return 0;
}

int Si7020_Request(Si7020Sensor *this )
{
    21e4:	cf 93       	push	r28
    21e6:	df 93       	push	r29
    21e8:	ec 01       	movw	r28, r24
	printf("Si7020_Request\n");
    21ea:	8a e1       	ldi	r24, 0x1A	; 26
    21ec:	95 e0       	ldi	r25, 0x05	; 5
    21ee:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
	Si7020_readTemperature(this->temperature_data,3);
    21f2:	63 e0       	ldi	r22, 0x03	; 3
    21f4:	ce 01       	movw	r24, r28
    21f6:	0e 96       	adiw	r24, 0x0e	; 14
    21f8:	0e 94 c3 06 	call	0xd86	; 0xd86 <Si7020_readTemperature>
	Si7020_readHumidity(this->humility_data,3);
    21fc:	63 e0       	ldi	r22, 0x03	; 3
    21fe:	ce 01       	movw	r24, r28
    2200:	41 96       	adiw	r24, 0x11	; 17
    2202:	0e 94 72 06 	call	0xce4	; 0xce4 <Si7020_readHumidity>
	return 0;
}
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	df 91       	pop	r29
    220c:	cf 91       	pop	r28
    220e:	08 95       	ret

00002210 <Si7020_Collect>:

int Si7020_Collect(Si7020Sensor *this )
{
    2210:	ef 92       	push	r14
    2212:	ff 92       	push	r15
    2214:	0f 93       	push	r16
    2216:	1f 93       	push	r17
    2218:	cf 93       	push	r28
    221a:	df 93       	push	r29
    221c:	ec 01       	movw	r28, r24
	printf("Si7020_Collect\n");
    221e:	89 e2       	ldi	r24, 0x29	; 41
    2220:	95 e0       	ldi	r25, 0x05	; 5
    2222:	0e 94 c7 19 	call	0x338e	; 0x338e <puts>
	float T = Si7020_calTemperature(this->temperature_data);
    2226:	ce 01       	movw	r24, r28
    2228:	0e 96       	adiw	r24, 0x0e	; 14
    222a:	0e 94 f5 06 	call	0xdea	; 0xdea <Si7020_calTemperature>
    222e:	16 2f       	mov	r17, r22
    2230:	07 2f       	mov	r16, r23
    2232:	f8 2e       	mov	r15, r24
    2234:	e9 2e       	mov	r14, r25
	float H = Si7020_calHumidity(this->humility_data);
    2236:	ce 01       	movw	r24, r28
    2238:	41 96       	adiw	r24, 0x11	; 17
    223a:	0e 94 a4 06 	call	0xd48	; 0xd48 <Si7020_calHumidity>
	printf("\tTemperature = %.3f\n\tHumility = %.3f\n",T,H);
    223e:	9f 93       	push	r25
    2240:	8f 93       	push	r24
    2242:	7f 93       	push	r23
    2244:	6f 93       	push	r22
    2246:	ef 92       	push	r14
    2248:	ff 92       	push	r15
    224a:	0f 93       	push	r16
    224c:	1f 93       	push	r17
    224e:	88 e3       	ldi	r24, 0x38	; 56
    2250:	95 e0       	ldi	r25, 0x05	; 5
    2252:	9f 93       	push	r25
    2254:	8f 93       	push	r24
    2256:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
	return 0;
    225a:	8d b7       	in	r24, 0x3d	; 61
    225c:	9e b7       	in	r25, 0x3e	; 62
    225e:	0a 96       	adiw	r24, 0x0a	; 10
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	f8 94       	cli
    2264:	9e bf       	out	0x3e, r25	; 62
    2266:	0f be       	out	0x3f, r0	; 63
    2268:	8d bf       	out	0x3d, r24	; 61
}
    226a:	80 e0       	ldi	r24, 0x00	; 0
    226c:	90 e0       	ldi	r25, 0x00	; 0
    226e:	df 91       	pop	r29
    2270:	cf 91       	pop	r28
    2272:	1f 91       	pop	r17
    2274:	0f 91       	pop	r16
    2276:	ff 90       	pop	r15
    2278:	ef 90       	pop	r14
    227a:	08 95       	ret

0000227c <New_Si7020_Sensor>:
	return TYPE_SENSOR;
}


Si7020Sensor* New_Si7020_Sensor( int num, int NumData)
{
    227c:	ef 92       	push	r14
    227e:	ff 92       	push	r15
    2280:	0f 93       	push	r16
    2282:	1f 93       	push	r17
    2284:	cf 93       	push	r28
    2286:	df 93       	push	r29
    2288:	7c 01       	movw	r14, r24
    228a:	8b 01       	movw	r16, r22
	Si7020Sensor *p = malloc(sizeof(Si7020Sensor));
    228c:	84 e1       	ldi	r24, 0x14	; 20
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <malloc>
    2294:	ec 01       	movw	r28, r24
	// virtual function
	return 0;
}
void Si7020_VTinit( Si7020Sensor* this)
{
	this->inherited.abstract.device_vt = &Si7020_abstract_vmt;
    2296:	82 e4       	ldi	r24, 0x42	; 66
    2298:	92 e0       	ldi	r25, 0x02	; 2
    229a:	99 83       	std	Y+1, r25	; 0x01
    229c:	88 83       	st	Y, r24



void Si7020_FctnInit(Si7020Sensor *this)
{
	this->inherited.vmt = &Si7020_vmt;
    229e:	8a e4       	ldi	r24, 0x4A	; 74
    22a0:	92 e0       	ldi	r25, 0x02	; 2
    22a2:	9d 87       	std	Y+13, r25	; 0x0d
    22a4:	8c 87       	std	Y+12, r24	; 0x0c
Si7020Sensor* New_Si7020_Sensor( int num, int NumData)
{
	Si7020Sensor *p = malloc(sizeof(Si7020Sensor));
	Si7020_VTinit( p );
	Si7020_FctnInit( p );
	p->inherited.test_num = num;
    22a6:	fb 82       	std	Y+3, r15	; 0x03
    22a8:	ea 82       	std	Y+2, r14	; 0x02
	
	p->inherited.NumOfData = NumData;
    22aa:	1f 83       	std	Y+7, r17	; 0x07
    22ac:	0e 83       	std	Y+6, r16	; 0x06
	p->inherited.StartNum = SensorDataCount;
    22ae:	60 91 eb 09 	lds	r22, 0x09EB
    22b2:	70 91 ec 09 	lds	r23, 0x09EC
    22b6:	7d 83       	std	Y+5, r23	; 0x05
    22b8:	6c 83       	std	Y+4, r22	; 0x04
	SensorDataCount += NumData;
    22ba:	60 0f       	add	r22, r16
    22bc:	71 1f       	adc	r23, r17
    22be:	70 93 ec 09 	sts	0x09EC, r23
    22c2:	60 93 eb 09 	sts	0x09EB, r22
	printf("SensorDataCount %d\n",SensorDataCount);
    22c6:	7f 93       	push	r23
    22c8:	6f 93       	push	r22
    22ca:	83 ef       	ldi	r24, 0xF3	; 243
    22cc:	94 e0       	ldi	r25, 0x04	; 4
    22ce:	9f 93       	push	r25
    22d0:	8f 93       	push	r24
    22d2:	0e 94 b3 19 	call	0x3366	; 0x3366 <printf>
	
	for(int i = 0; i < 3; ++i )
	{
		p->temperature_data[i] = 0;
    22d6:	1e 86       	std	Y+14, r1	; 0x0e
		p->humility_data[i] = 0;
    22d8:	19 8a       	std	Y+17, r1	; 0x11
	SensorDataCount += NumData;
	printf("SensorDataCount %d\n",SensorDataCount);
	
	for(int i = 0; i < 3; ++i )
	{
		p->temperature_data[i] = 0;
    22da:	1f 86       	std	Y+15, r1	; 0x0f
		p->humility_data[i] = 0;
    22dc:	1a 8a       	std	Y+18, r1	; 0x12
	SensorDataCount += NumData;
	printf("SensorDataCount %d\n",SensorDataCount);
	
	for(int i = 0; i < 3; ++i )
	{
		p->temperature_data[i] = 0;
    22de:	18 8a       	std	Y+16, r1	; 0x10
		p->humility_data[i] = 0;
    22e0:	1b 8a       	std	Y+19, r1	; 0x13
	}
	
	return p;
    22e2:	0f 90       	pop	r0
    22e4:	0f 90       	pop	r0
    22e6:	0f 90       	pop	r0
    22e8:	0f 90       	pop	r0
    22ea:	ce 01       	movw	r24, r28
    22ec:	df 91       	pop	r29
    22ee:	cf 91       	pop	r28
    22f0:	1f 91       	pop	r17
    22f2:	0f 91       	pop	r16
    22f4:	ff 90       	pop	r15
    22f6:	ef 90       	pop	r14
    22f8:	08 95       	ret

000022fa <__subsf3>:
    22fa:	50 58       	subi	r21, 0x80	; 128

000022fc <__addsf3>:
    22fc:	bb 27       	eor	r27, r27
    22fe:	aa 27       	eor	r26, r26
    2300:	0e d0       	rcall	.+28     	; 0x231e <__addsf3x>
    2302:	75 c1       	rjmp	.+746    	; 0x25ee <__fp_round>
    2304:	66 d1       	rcall	.+716    	; 0x25d2 <__fp_pscA>
    2306:	30 f0       	brcs	.+12     	; 0x2314 <__addsf3+0x18>
    2308:	6b d1       	rcall	.+726    	; 0x25e0 <__fp_pscB>
    230a:	20 f0       	brcs	.+8      	; 0x2314 <__addsf3+0x18>
    230c:	31 f4       	brne	.+12     	; 0x231a <__addsf3+0x1e>
    230e:	9f 3f       	cpi	r25, 0xFF	; 255
    2310:	11 f4       	brne	.+4      	; 0x2316 <__addsf3+0x1a>
    2312:	1e f4       	brtc	.+6      	; 0x231a <__addsf3+0x1e>
    2314:	5b c1       	rjmp	.+694    	; 0x25cc <__fp_nan>
    2316:	0e f4       	brtc	.+2      	; 0x231a <__addsf3+0x1e>
    2318:	e0 95       	com	r30
    231a:	e7 fb       	bst	r30, 7
    231c:	51 c1       	rjmp	.+674    	; 0x25c0 <__fp_inf>

0000231e <__addsf3x>:
    231e:	e9 2f       	mov	r30, r25
    2320:	77 d1       	rcall	.+750    	; 0x2610 <__fp_split3>
    2322:	80 f3       	brcs	.-32     	; 0x2304 <__addsf3+0x8>
    2324:	ba 17       	cp	r27, r26
    2326:	62 07       	cpc	r22, r18
    2328:	73 07       	cpc	r23, r19
    232a:	84 07       	cpc	r24, r20
    232c:	95 07       	cpc	r25, r21
    232e:	18 f0       	brcs	.+6      	; 0x2336 <__addsf3x+0x18>
    2330:	71 f4       	brne	.+28     	; 0x234e <__addsf3x+0x30>
    2332:	9e f5       	brtc	.+102    	; 0x239a <__addsf3x+0x7c>
    2334:	8f c1       	rjmp	.+798    	; 0x2654 <__fp_zero>
    2336:	0e f4       	brtc	.+2      	; 0x233a <__addsf3x+0x1c>
    2338:	e0 95       	com	r30
    233a:	0b 2e       	mov	r0, r27
    233c:	ba 2f       	mov	r27, r26
    233e:	a0 2d       	mov	r26, r0
    2340:	0b 01       	movw	r0, r22
    2342:	b9 01       	movw	r22, r18
    2344:	90 01       	movw	r18, r0
    2346:	0c 01       	movw	r0, r24
    2348:	ca 01       	movw	r24, r20
    234a:	a0 01       	movw	r20, r0
    234c:	11 24       	eor	r1, r1
    234e:	ff 27       	eor	r31, r31
    2350:	59 1b       	sub	r21, r25
    2352:	99 f0       	breq	.+38     	; 0x237a <__addsf3x+0x5c>
    2354:	59 3f       	cpi	r21, 0xF9	; 249
    2356:	50 f4       	brcc	.+20     	; 0x236c <__addsf3x+0x4e>
    2358:	50 3e       	cpi	r21, 0xE0	; 224
    235a:	68 f1       	brcs	.+90     	; 0x23b6 <__addsf3x+0x98>
    235c:	1a 16       	cp	r1, r26
    235e:	f0 40       	sbci	r31, 0x00	; 0
    2360:	a2 2f       	mov	r26, r18
    2362:	23 2f       	mov	r18, r19
    2364:	34 2f       	mov	r19, r20
    2366:	44 27       	eor	r20, r20
    2368:	58 5f       	subi	r21, 0xF8	; 248
    236a:	f3 cf       	rjmp	.-26     	; 0x2352 <__addsf3x+0x34>
    236c:	46 95       	lsr	r20
    236e:	37 95       	ror	r19
    2370:	27 95       	ror	r18
    2372:	a7 95       	ror	r26
    2374:	f0 40       	sbci	r31, 0x00	; 0
    2376:	53 95       	inc	r21
    2378:	c9 f7       	brne	.-14     	; 0x236c <__addsf3x+0x4e>
    237a:	7e f4       	brtc	.+30     	; 0x239a <__addsf3x+0x7c>
    237c:	1f 16       	cp	r1, r31
    237e:	ba 0b       	sbc	r27, r26
    2380:	62 0b       	sbc	r22, r18
    2382:	73 0b       	sbc	r23, r19
    2384:	84 0b       	sbc	r24, r20
    2386:	ba f0       	brmi	.+46     	; 0x23b6 <__addsf3x+0x98>
    2388:	91 50       	subi	r25, 0x01	; 1
    238a:	a1 f0       	breq	.+40     	; 0x23b4 <__addsf3x+0x96>
    238c:	ff 0f       	add	r31, r31
    238e:	bb 1f       	adc	r27, r27
    2390:	66 1f       	adc	r22, r22
    2392:	77 1f       	adc	r23, r23
    2394:	88 1f       	adc	r24, r24
    2396:	c2 f7       	brpl	.-16     	; 0x2388 <__addsf3x+0x6a>
    2398:	0e c0       	rjmp	.+28     	; 0x23b6 <__addsf3x+0x98>
    239a:	ba 0f       	add	r27, r26
    239c:	62 1f       	adc	r22, r18
    239e:	73 1f       	adc	r23, r19
    23a0:	84 1f       	adc	r24, r20
    23a2:	48 f4       	brcc	.+18     	; 0x23b6 <__addsf3x+0x98>
    23a4:	87 95       	ror	r24
    23a6:	77 95       	ror	r23
    23a8:	67 95       	ror	r22
    23aa:	b7 95       	ror	r27
    23ac:	f7 95       	ror	r31
    23ae:	9e 3f       	cpi	r25, 0xFE	; 254
    23b0:	08 f0       	brcs	.+2      	; 0x23b4 <__addsf3x+0x96>
    23b2:	b3 cf       	rjmp	.-154    	; 0x231a <__addsf3+0x1e>
    23b4:	93 95       	inc	r25
    23b6:	88 0f       	add	r24, r24
    23b8:	08 f0       	brcs	.+2      	; 0x23bc <__addsf3x+0x9e>
    23ba:	99 27       	eor	r25, r25
    23bc:	ee 0f       	add	r30, r30
    23be:	97 95       	ror	r25
    23c0:	87 95       	ror	r24
    23c2:	08 95       	ret

000023c4 <__cmpsf2>:
    23c4:	d9 d0       	rcall	.+434    	; 0x2578 <__fp_cmp>
    23c6:	08 f4       	brcc	.+2      	; 0x23ca <__cmpsf2+0x6>
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	08 95       	ret

000023cc <__divsf3>:
    23cc:	0c d0       	rcall	.+24     	; 0x23e6 <__divsf3x>
    23ce:	0f c1       	rjmp	.+542    	; 0x25ee <__fp_round>
    23d0:	07 d1       	rcall	.+526    	; 0x25e0 <__fp_pscB>
    23d2:	40 f0       	brcs	.+16     	; 0x23e4 <__divsf3+0x18>
    23d4:	fe d0       	rcall	.+508    	; 0x25d2 <__fp_pscA>
    23d6:	30 f0       	brcs	.+12     	; 0x23e4 <__divsf3+0x18>
    23d8:	21 f4       	brne	.+8      	; 0x23e2 <__divsf3+0x16>
    23da:	5f 3f       	cpi	r21, 0xFF	; 255
    23dc:	19 f0       	breq	.+6      	; 0x23e4 <__divsf3+0x18>
    23de:	f0 c0       	rjmp	.+480    	; 0x25c0 <__fp_inf>
    23e0:	51 11       	cpse	r21, r1
    23e2:	39 c1       	rjmp	.+626    	; 0x2656 <__fp_szero>
    23e4:	f3 c0       	rjmp	.+486    	; 0x25cc <__fp_nan>

000023e6 <__divsf3x>:
    23e6:	14 d1       	rcall	.+552    	; 0x2610 <__fp_split3>
    23e8:	98 f3       	brcs	.-26     	; 0x23d0 <__divsf3+0x4>

000023ea <__divsf3_pse>:
    23ea:	99 23       	and	r25, r25
    23ec:	c9 f3       	breq	.-14     	; 0x23e0 <__divsf3+0x14>
    23ee:	55 23       	and	r21, r21
    23f0:	b1 f3       	breq	.-20     	; 0x23de <__divsf3+0x12>
    23f2:	95 1b       	sub	r25, r21
    23f4:	55 0b       	sbc	r21, r21
    23f6:	bb 27       	eor	r27, r27
    23f8:	aa 27       	eor	r26, r26
    23fa:	62 17       	cp	r22, r18
    23fc:	73 07       	cpc	r23, r19
    23fe:	84 07       	cpc	r24, r20
    2400:	38 f0       	brcs	.+14     	; 0x2410 <__divsf3_pse+0x26>
    2402:	9f 5f       	subi	r25, 0xFF	; 255
    2404:	5f 4f       	sbci	r21, 0xFF	; 255
    2406:	22 0f       	add	r18, r18
    2408:	33 1f       	adc	r19, r19
    240a:	44 1f       	adc	r20, r20
    240c:	aa 1f       	adc	r26, r26
    240e:	a9 f3       	breq	.-22     	; 0x23fa <__divsf3_pse+0x10>
    2410:	33 d0       	rcall	.+102    	; 0x2478 <__divsf3_pse+0x8e>
    2412:	0e 2e       	mov	r0, r30
    2414:	3a f0       	brmi	.+14     	; 0x2424 <__divsf3_pse+0x3a>
    2416:	e0 e8       	ldi	r30, 0x80	; 128
    2418:	30 d0       	rcall	.+96     	; 0x247a <__divsf3_pse+0x90>
    241a:	91 50       	subi	r25, 0x01	; 1
    241c:	50 40       	sbci	r21, 0x00	; 0
    241e:	e6 95       	lsr	r30
    2420:	00 1c       	adc	r0, r0
    2422:	ca f7       	brpl	.-14     	; 0x2416 <__divsf3_pse+0x2c>
    2424:	29 d0       	rcall	.+82     	; 0x2478 <__divsf3_pse+0x8e>
    2426:	fe 2f       	mov	r31, r30
    2428:	27 d0       	rcall	.+78     	; 0x2478 <__divsf3_pse+0x8e>
    242a:	66 0f       	add	r22, r22
    242c:	77 1f       	adc	r23, r23
    242e:	88 1f       	adc	r24, r24
    2430:	bb 1f       	adc	r27, r27
    2432:	26 17       	cp	r18, r22
    2434:	37 07       	cpc	r19, r23
    2436:	48 07       	cpc	r20, r24
    2438:	ab 07       	cpc	r26, r27
    243a:	b0 e8       	ldi	r27, 0x80	; 128
    243c:	09 f0       	breq	.+2      	; 0x2440 <__divsf3_pse+0x56>
    243e:	bb 0b       	sbc	r27, r27
    2440:	80 2d       	mov	r24, r0
    2442:	bf 01       	movw	r22, r30
    2444:	ff 27       	eor	r31, r31
    2446:	93 58       	subi	r25, 0x83	; 131
    2448:	5f 4f       	sbci	r21, 0xFF	; 255
    244a:	2a f0       	brmi	.+10     	; 0x2456 <__divsf3_pse+0x6c>
    244c:	9e 3f       	cpi	r25, 0xFE	; 254
    244e:	51 05       	cpc	r21, r1
    2450:	68 f0       	brcs	.+26     	; 0x246c <__divsf3_pse+0x82>
    2452:	b6 c0       	rjmp	.+364    	; 0x25c0 <__fp_inf>
    2454:	00 c1       	rjmp	.+512    	; 0x2656 <__fp_szero>
    2456:	5f 3f       	cpi	r21, 0xFF	; 255
    2458:	ec f3       	brlt	.-6      	; 0x2454 <__divsf3_pse+0x6a>
    245a:	98 3e       	cpi	r25, 0xE8	; 232
    245c:	dc f3       	brlt	.-10     	; 0x2454 <__divsf3_pse+0x6a>
    245e:	86 95       	lsr	r24
    2460:	77 95       	ror	r23
    2462:	67 95       	ror	r22
    2464:	b7 95       	ror	r27
    2466:	f7 95       	ror	r31
    2468:	9f 5f       	subi	r25, 0xFF	; 255
    246a:	c9 f7       	brne	.-14     	; 0x245e <__divsf3_pse+0x74>
    246c:	88 0f       	add	r24, r24
    246e:	91 1d       	adc	r25, r1
    2470:	96 95       	lsr	r25
    2472:	87 95       	ror	r24
    2474:	97 f9       	bld	r25, 7
    2476:	08 95       	ret
    2478:	e1 e0       	ldi	r30, 0x01	; 1
    247a:	66 0f       	add	r22, r22
    247c:	77 1f       	adc	r23, r23
    247e:	88 1f       	adc	r24, r24
    2480:	bb 1f       	adc	r27, r27
    2482:	62 17       	cp	r22, r18
    2484:	73 07       	cpc	r23, r19
    2486:	84 07       	cpc	r24, r20
    2488:	ba 07       	cpc	r27, r26
    248a:	20 f0       	brcs	.+8      	; 0x2494 <__divsf3_pse+0xaa>
    248c:	62 1b       	sub	r22, r18
    248e:	73 0b       	sbc	r23, r19
    2490:	84 0b       	sbc	r24, r20
    2492:	ba 0b       	sbc	r27, r26
    2494:	ee 1f       	adc	r30, r30
    2496:	88 f7       	brcc	.-30     	; 0x247a <__divsf3_pse+0x90>
    2498:	e0 95       	com	r30
    249a:	08 95       	ret

0000249c <__fixsfsi>:
    249c:	04 d0       	rcall	.+8      	; 0x24a6 <__fixunssfsi>
    249e:	68 94       	set
    24a0:	b1 11       	cpse	r27, r1
    24a2:	d9 c0       	rjmp	.+434    	; 0x2656 <__fp_szero>
    24a4:	08 95       	ret

000024a6 <__fixunssfsi>:
    24a6:	bc d0       	rcall	.+376    	; 0x2620 <__fp_splitA>
    24a8:	88 f0       	brcs	.+34     	; 0x24cc <__fixunssfsi+0x26>
    24aa:	9f 57       	subi	r25, 0x7F	; 127
    24ac:	90 f0       	brcs	.+36     	; 0x24d2 <__fixunssfsi+0x2c>
    24ae:	b9 2f       	mov	r27, r25
    24b0:	99 27       	eor	r25, r25
    24b2:	b7 51       	subi	r27, 0x17	; 23
    24b4:	a0 f0       	brcs	.+40     	; 0x24de <__fixunssfsi+0x38>
    24b6:	d1 f0       	breq	.+52     	; 0x24ec <__fixunssfsi+0x46>
    24b8:	66 0f       	add	r22, r22
    24ba:	77 1f       	adc	r23, r23
    24bc:	88 1f       	adc	r24, r24
    24be:	99 1f       	adc	r25, r25
    24c0:	1a f0       	brmi	.+6      	; 0x24c8 <__fixunssfsi+0x22>
    24c2:	ba 95       	dec	r27
    24c4:	c9 f7       	brne	.-14     	; 0x24b8 <__fixunssfsi+0x12>
    24c6:	12 c0       	rjmp	.+36     	; 0x24ec <__fixunssfsi+0x46>
    24c8:	b1 30       	cpi	r27, 0x01	; 1
    24ca:	81 f0       	breq	.+32     	; 0x24ec <__fixunssfsi+0x46>
    24cc:	c3 d0       	rcall	.+390    	; 0x2654 <__fp_zero>
    24ce:	b1 e0       	ldi	r27, 0x01	; 1
    24d0:	08 95       	ret
    24d2:	c0 c0       	rjmp	.+384    	; 0x2654 <__fp_zero>
    24d4:	67 2f       	mov	r22, r23
    24d6:	78 2f       	mov	r23, r24
    24d8:	88 27       	eor	r24, r24
    24da:	b8 5f       	subi	r27, 0xF8	; 248
    24dc:	39 f0       	breq	.+14     	; 0x24ec <__fixunssfsi+0x46>
    24de:	b9 3f       	cpi	r27, 0xF9	; 249
    24e0:	cc f3       	brlt	.-14     	; 0x24d4 <__fixunssfsi+0x2e>
    24e2:	86 95       	lsr	r24
    24e4:	77 95       	ror	r23
    24e6:	67 95       	ror	r22
    24e8:	b3 95       	inc	r27
    24ea:	d9 f7       	brne	.-10     	; 0x24e2 <__fixunssfsi+0x3c>
    24ec:	3e f4       	brtc	.+14     	; 0x24fc <__fixunssfsi+0x56>
    24ee:	90 95       	com	r25
    24f0:	80 95       	com	r24
    24f2:	70 95       	com	r23
    24f4:	61 95       	neg	r22
    24f6:	7f 4f       	sbci	r23, 0xFF	; 255
    24f8:	8f 4f       	sbci	r24, 0xFF	; 255
    24fa:	9f 4f       	sbci	r25, 0xFF	; 255
    24fc:	08 95       	ret

000024fe <__floatunsisf>:
    24fe:	e8 94       	clt
    2500:	09 c0       	rjmp	.+18     	; 0x2514 <__floatsisf+0x12>

00002502 <__floatsisf>:
    2502:	97 fb       	bst	r25, 7
    2504:	3e f4       	brtc	.+14     	; 0x2514 <__floatsisf+0x12>
    2506:	90 95       	com	r25
    2508:	80 95       	com	r24
    250a:	70 95       	com	r23
    250c:	61 95       	neg	r22
    250e:	7f 4f       	sbci	r23, 0xFF	; 255
    2510:	8f 4f       	sbci	r24, 0xFF	; 255
    2512:	9f 4f       	sbci	r25, 0xFF	; 255
    2514:	99 23       	and	r25, r25
    2516:	a9 f0       	breq	.+42     	; 0x2542 <__floatsisf+0x40>
    2518:	f9 2f       	mov	r31, r25
    251a:	96 e9       	ldi	r25, 0x96	; 150
    251c:	bb 27       	eor	r27, r27
    251e:	93 95       	inc	r25
    2520:	f6 95       	lsr	r31
    2522:	87 95       	ror	r24
    2524:	77 95       	ror	r23
    2526:	67 95       	ror	r22
    2528:	b7 95       	ror	r27
    252a:	f1 11       	cpse	r31, r1
    252c:	f8 cf       	rjmp	.-16     	; 0x251e <__floatsisf+0x1c>
    252e:	fa f4       	brpl	.+62     	; 0x256e <__floatsisf+0x6c>
    2530:	bb 0f       	add	r27, r27
    2532:	11 f4       	brne	.+4      	; 0x2538 <__floatsisf+0x36>
    2534:	60 ff       	sbrs	r22, 0
    2536:	1b c0       	rjmp	.+54     	; 0x256e <__floatsisf+0x6c>
    2538:	6f 5f       	subi	r22, 0xFF	; 255
    253a:	7f 4f       	sbci	r23, 0xFF	; 255
    253c:	8f 4f       	sbci	r24, 0xFF	; 255
    253e:	9f 4f       	sbci	r25, 0xFF	; 255
    2540:	16 c0       	rjmp	.+44     	; 0x256e <__floatsisf+0x6c>
    2542:	88 23       	and	r24, r24
    2544:	11 f0       	breq	.+4      	; 0x254a <__floatsisf+0x48>
    2546:	96 e9       	ldi	r25, 0x96	; 150
    2548:	11 c0       	rjmp	.+34     	; 0x256c <__floatsisf+0x6a>
    254a:	77 23       	and	r23, r23
    254c:	21 f0       	breq	.+8      	; 0x2556 <__floatsisf+0x54>
    254e:	9e e8       	ldi	r25, 0x8E	; 142
    2550:	87 2f       	mov	r24, r23
    2552:	76 2f       	mov	r23, r22
    2554:	05 c0       	rjmp	.+10     	; 0x2560 <__floatsisf+0x5e>
    2556:	66 23       	and	r22, r22
    2558:	71 f0       	breq	.+28     	; 0x2576 <__floatsisf+0x74>
    255a:	96 e8       	ldi	r25, 0x86	; 134
    255c:	86 2f       	mov	r24, r22
    255e:	70 e0       	ldi	r23, 0x00	; 0
    2560:	60 e0       	ldi	r22, 0x00	; 0
    2562:	2a f0       	brmi	.+10     	; 0x256e <__floatsisf+0x6c>
    2564:	9a 95       	dec	r25
    2566:	66 0f       	add	r22, r22
    2568:	77 1f       	adc	r23, r23
    256a:	88 1f       	adc	r24, r24
    256c:	da f7       	brpl	.-10     	; 0x2564 <__floatsisf+0x62>
    256e:	88 0f       	add	r24, r24
    2570:	96 95       	lsr	r25
    2572:	87 95       	ror	r24
    2574:	97 f9       	bld	r25, 7
    2576:	08 95       	ret

00002578 <__fp_cmp>:
    2578:	99 0f       	add	r25, r25
    257a:	00 08       	sbc	r0, r0
    257c:	55 0f       	add	r21, r21
    257e:	aa 0b       	sbc	r26, r26
    2580:	e0 e8       	ldi	r30, 0x80	; 128
    2582:	fe ef       	ldi	r31, 0xFE	; 254
    2584:	16 16       	cp	r1, r22
    2586:	17 06       	cpc	r1, r23
    2588:	e8 07       	cpc	r30, r24
    258a:	f9 07       	cpc	r31, r25
    258c:	c0 f0       	brcs	.+48     	; 0x25be <__fp_cmp+0x46>
    258e:	12 16       	cp	r1, r18
    2590:	13 06       	cpc	r1, r19
    2592:	e4 07       	cpc	r30, r20
    2594:	f5 07       	cpc	r31, r21
    2596:	98 f0       	brcs	.+38     	; 0x25be <__fp_cmp+0x46>
    2598:	62 1b       	sub	r22, r18
    259a:	73 0b       	sbc	r23, r19
    259c:	84 0b       	sbc	r24, r20
    259e:	95 0b       	sbc	r25, r21
    25a0:	39 f4       	brne	.+14     	; 0x25b0 <__fp_cmp+0x38>
    25a2:	0a 26       	eor	r0, r26
    25a4:	61 f0       	breq	.+24     	; 0x25be <__fp_cmp+0x46>
    25a6:	23 2b       	or	r18, r19
    25a8:	24 2b       	or	r18, r20
    25aa:	25 2b       	or	r18, r21
    25ac:	21 f4       	brne	.+8      	; 0x25b6 <__fp_cmp+0x3e>
    25ae:	08 95       	ret
    25b0:	0a 26       	eor	r0, r26
    25b2:	09 f4       	brne	.+2      	; 0x25b6 <__fp_cmp+0x3e>
    25b4:	a1 40       	sbci	r26, 0x01	; 1
    25b6:	a6 95       	lsr	r26
    25b8:	8f ef       	ldi	r24, 0xFF	; 255
    25ba:	81 1d       	adc	r24, r1
    25bc:	81 1d       	adc	r24, r1
    25be:	08 95       	ret

000025c0 <__fp_inf>:
    25c0:	97 f9       	bld	r25, 7
    25c2:	9f 67       	ori	r25, 0x7F	; 127
    25c4:	80 e8       	ldi	r24, 0x80	; 128
    25c6:	70 e0       	ldi	r23, 0x00	; 0
    25c8:	60 e0       	ldi	r22, 0x00	; 0
    25ca:	08 95       	ret

000025cc <__fp_nan>:
    25cc:	9f ef       	ldi	r25, 0xFF	; 255
    25ce:	80 ec       	ldi	r24, 0xC0	; 192
    25d0:	08 95       	ret

000025d2 <__fp_pscA>:
    25d2:	00 24       	eor	r0, r0
    25d4:	0a 94       	dec	r0
    25d6:	16 16       	cp	r1, r22
    25d8:	17 06       	cpc	r1, r23
    25da:	18 06       	cpc	r1, r24
    25dc:	09 06       	cpc	r0, r25
    25de:	08 95       	ret

000025e0 <__fp_pscB>:
    25e0:	00 24       	eor	r0, r0
    25e2:	0a 94       	dec	r0
    25e4:	12 16       	cp	r1, r18
    25e6:	13 06       	cpc	r1, r19
    25e8:	14 06       	cpc	r1, r20
    25ea:	05 06       	cpc	r0, r21
    25ec:	08 95       	ret

000025ee <__fp_round>:
    25ee:	09 2e       	mov	r0, r25
    25f0:	03 94       	inc	r0
    25f2:	00 0c       	add	r0, r0
    25f4:	11 f4       	brne	.+4      	; 0x25fa <__fp_round+0xc>
    25f6:	88 23       	and	r24, r24
    25f8:	52 f0       	brmi	.+20     	; 0x260e <__fp_round+0x20>
    25fa:	bb 0f       	add	r27, r27
    25fc:	40 f4       	brcc	.+16     	; 0x260e <__fp_round+0x20>
    25fe:	bf 2b       	or	r27, r31
    2600:	11 f4       	brne	.+4      	; 0x2606 <__fp_round+0x18>
    2602:	60 ff       	sbrs	r22, 0
    2604:	04 c0       	rjmp	.+8      	; 0x260e <__fp_round+0x20>
    2606:	6f 5f       	subi	r22, 0xFF	; 255
    2608:	7f 4f       	sbci	r23, 0xFF	; 255
    260a:	8f 4f       	sbci	r24, 0xFF	; 255
    260c:	9f 4f       	sbci	r25, 0xFF	; 255
    260e:	08 95       	ret

00002610 <__fp_split3>:
    2610:	57 fd       	sbrc	r21, 7
    2612:	90 58       	subi	r25, 0x80	; 128
    2614:	44 0f       	add	r20, r20
    2616:	55 1f       	adc	r21, r21
    2618:	59 f0       	breq	.+22     	; 0x2630 <__fp_splitA+0x10>
    261a:	5f 3f       	cpi	r21, 0xFF	; 255
    261c:	71 f0       	breq	.+28     	; 0x263a <__fp_splitA+0x1a>
    261e:	47 95       	ror	r20

00002620 <__fp_splitA>:
    2620:	88 0f       	add	r24, r24
    2622:	97 fb       	bst	r25, 7
    2624:	99 1f       	adc	r25, r25
    2626:	61 f0       	breq	.+24     	; 0x2640 <__fp_splitA+0x20>
    2628:	9f 3f       	cpi	r25, 0xFF	; 255
    262a:	79 f0       	breq	.+30     	; 0x264a <__fp_splitA+0x2a>
    262c:	87 95       	ror	r24
    262e:	08 95       	ret
    2630:	12 16       	cp	r1, r18
    2632:	13 06       	cpc	r1, r19
    2634:	14 06       	cpc	r1, r20
    2636:	55 1f       	adc	r21, r21
    2638:	f2 cf       	rjmp	.-28     	; 0x261e <__fp_split3+0xe>
    263a:	46 95       	lsr	r20
    263c:	f1 df       	rcall	.-30     	; 0x2620 <__fp_splitA>
    263e:	08 c0       	rjmp	.+16     	; 0x2650 <__fp_splitA+0x30>
    2640:	16 16       	cp	r1, r22
    2642:	17 06       	cpc	r1, r23
    2644:	18 06       	cpc	r1, r24
    2646:	99 1f       	adc	r25, r25
    2648:	f1 cf       	rjmp	.-30     	; 0x262c <__fp_splitA+0xc>
    264a:	86 95       	lsr	r24
    264c:	71 05       	cpc	r23, r1
    264e:	61 05       	cpc	r22, r1
    2650:	08 94       	sec
    2652:	08 95       	ret

00002654 <__fp_zero>:
    2654:	e8 94       	clt

00002656 <__fp_szero>:
    2656:	bb 27       	eor	r27, r27
    2658:	66 27       	eor	r22, r22
    265a:	77 27       	eor	r23, r23
    265c:	cb 01       	movw	r24, r22
    265e:	97 f9       	bld	r25, 7
    2660:	08 95       	ret

00002662 <__gesf2>:
    2662:	8a df       	rcall	.-236    	; 0x2578 <__fp_cmp>
    2664:	08 f4       	brcc	.+2      	; 0x2668 <__gesf2+0x6>
    2666:	8f ef       	ldi	r24, 0xFF	; 255
    2668:	08 95       	ret

0000266a <__mulsf3>:
    266a:	0b d0       	rcall	.+22     	; 0x2682 <__mulsf3x>
    266c:	c0 cf       	rjmp	.-128    	; 0x25ee <__fp_round>
    266e:	b1 df       	rcall	.-158    	; 0x25d2 <__fp_pscA>
    2670:	28 f0       	brcs	.+10     	; 0x267c <__mulsf3+0x12>
    2672:	b6 df       	rcall	.-148    	; 0x25e0 <__fp_pscB>
    2674:	18 f0       	brcs	.+6      	; 0x267c <__mulsf3+0x12>
    2676:	95 23       	and	r25, r21
    2678:	09 f0       	breq	.+2      	; 0x267c <__mulsf3+0x12>
    267a:	a2 cf       	rjmp	.-188    	; 0x25c0 <__fp_inf>
    267c:	a7 cf       	rjmp	.-178    	; 0x25cc <__fp_nan>
    267e:	11 24       	eor	r1, r1
    2680:	ea cf       	rjmp	.-44     	; 0x2656 <__fp_szero>

00002682 <__mulsf3x>:
    2682:	c6 df       	rcall	.-116    	; 0x2610 <__fp_split3>
    2684:	a0 f3       	brcs	.-24     	; 0x266e <__mulsf3+0x4>

00002686 <__mulsf3_pse>:
    2686:	95 9f       	mul	r25, r21
    2688:	d1 f3       	breq	.-12     	; 0x267e <__mulsf3+0x14>
    268a:	95 0f       	add	r25, r21
    268c:	50 e0       	ldi	r21, 0x00	; 0
    268e:	55 1f       	adc	r21, r21
    2690:	62 9f       	mul	r22, r18
    2692:	f0 01       	movw	r30, r0
    2694:	72 9f       	mul	r23, r18
    2696:	bb 27       	eor	r27, r27
    2698:	f0 0d       	add	r31, r0
    269a:	b1 1d       	adc	r27, r1
    269c:	63 9f       	mul	r22, r19
    269e:	aa 27       	eor	r26, r26
    26a0:	f0 0d       	add	r31, r0
    26a2:	b1 1d       	adc	r27, r1
    26a4:	aa 1f       	adc	r26, r26
    26a6:	64 9f       	mul	r22, r20
    26a8:	66 27       	eor	r22, r22
    26aa:	b0 0d       	add	r27, r0
    26ac:	a1 1d       	adc	r26, r1
    26ae:	66 1f       	adc	r22, r22
    26b0:	82 9f       	mul	r24, r18
    26b2:	22 27       	eor	r18, r18
    26b4:	b0 0d       	add	r27, r0
    26b6:	a1 1d       	adc	r26, r1
    26b8:	62 1f       	adc	r22, r18
    26ba:	73 9f       	mul	r23, r19
    26bc:	b0 0d       	add	r27, r0
    26be:	a1 1d       	adc	r26, r1
    26c0:	62 1f       	adc	r22, r18
    26c2:	83 9f       	mul	r24, r19
    26c4:	a0 0d       	add	r26, r0
    26c6:	61 1d       	adc	r22, r1
    26c8:	22 1f       	adc	r18, r18
    26ca:	74 9f       	mul	r23, r20
    26cc:	33 27       	eor	r19, r19
    26ce:	a0 0d       	add	r26, r0
    26d0:	61 1d       	adc	r22, r1
    26d2:	23 1f       	adc	r18, r19
    26d4:	84 9f       	mul	r24, r20
    26d6:	60 0d       	add	r22, r0
    26d8:	21 1d       	adc	r18, r1
    26da:	82 2f       	mov	r24, r18
    26dc:	76 2f       	mov	r23, r22
    26de:	6a 2f       	mov	r22, r26
    26e0:	11 24       	eor	r1, r1
    26e2:	9f 57       	subi	r25, 0x7F	; 127
    26e4:	50 40       	sbci	r21, 0x00	; 0
    26e6:	8a f0       	brmi	.+34     	; 0x270a <__mulsf3_pse+0x84>
    26e8:	e1 f0       	breq	.+56     	; 0x2722 <__mulsf3_pse+0x9c>
    26ea:	88 23       	and	r24, r24
    26ec:	4a f0       	brmi	.+18     	; 0x2700 <__mulsf3_pse+0x7a>
    26ee:	ee 0f       	add	r30, r30
    26f0:	ff 1f       	adc	r31, r31
    26f2:	bb 1f       	adc	r27, r27
    26f4:	66 1f       	adc	r22, r22
    26f6:	77 1f       	adc	r23, r23
    26f8:	88 1f       	adc	r24, r24
    26fa:	91 50       	subi	r25, 0x01	; 1
    26fc:	50 40       	sbci	r21, 0x00	; 0
    26fe:	a9 f7       	brne	.-22     	; 0x26ea <__mulsf3_pse+0x64>
    2700:	9e 3f       	cpi	r25, 0xFE	; 254
    2702:	51 05       	cpc	r21, r1
    2704:	70 f0       	brcs	.+28     	; 0x2722 <__mulsf3_pse+0x9c>
    2706:	5c cf       	rjmp	.-328    	; 0x25c0 <__fp_inf>
    2708:	a6 cf       	rjmp	.-180    	; 0x2656 <__fp_szero>
    270a:	5f 3f       	cpi	r21, 0xFF	; 255
    270c:	ec f3       	brlt	.-6      	; 0x2708 <__mulsf3_pse+0x82>
    270e:	98 3e       	cpi	r25, 0xE8	; 232
    2710:	dc f3       	brlt	.-10     	; 0x2708 <__mulsf3_pse+0x82>
    2712:	86 95       	lsr	r24
    2714:	77 95       	ror	r23
    2716:	67 95       	ror	r22
    2718:	b7 95       	ror	r27
    271a:	f7 95       	ror	r31
    271c:	e7 95       	ror	r30
    271e:	9f 5f       	subi	r25, 0xFF	; 255
    2720:	c1 f7       	brne	.-16     	; 0x2712 <__mulsf3_pse+0x8c>
    2722:	fe 2b       	or	r31, r30
    2724:	88 0f       	add	r24, r24
    2726:	91 1d       	adc	r25, r1
    2728:	96 95       	lsr	r25
    272a:	87 95       	ror	r24
    272c:	97 f9       	bld	r25, 7
    272e:	08 95       	ret

00002730 <vfprintf>:
    2730:	a3 e1       	ldi	r26, 0x13	; 19
    2732:	b0 e0       	ldi	r27, 0x00	; 0
    2734:	ee e9       	ldi	r30, 0x9E	; 158
    2736:	f3 e1       	ldi	r31, 0x13	; 19
    2738:	0c 94 35 17 	jmp	0x2e6a	; 0x2e6a <__prologue_saves__>
    273c:	7c 01       	movw	r14, r24
    273e:	1b 01       	movw	r2, r22
    2740:	6a 01       	movw	r12, r20
    2742:	fc 01       	movw	r30, r24
    2744:	17 82       	std	Z+7, r1	; 0x07
    2746:	16 82       	std	Z+6, r1	; 0x06
    2748:	83 81       	ldd	r24, Z+3	; 0x03
    274a:	81 ff       	sbrs	r24, 1
    274c:	66 c3       	rjmp	.+1740   	; 0x2e1a <vfprintf+0x6ea>
    274e:	be 01       	movw	r22, r28
    2750:	6f 5f       	subi	r22, 0xFF	; 255
    2752:	7f 4f       	sbci	r23, 0xFF	; 255
    2754:	4b 01       	movw	r8, r22
    2756:	f7 01       	movw	r30, r14
    2758:	93 81       	ldd	r25, Z+3	; 0x03
    275a:	f1 01       	movw	r30, r2
    275c:	93 fd       	sbrc	r25, 3
    275e:	85 91       	lpm	r24, Z+
    2760:	93 ff       	sbrs	r25, 3
    2762:	81 91       	ld	r24, Z+
    2764:	1f 01       	movw	r2, r30
    2766:	88 23       	and	r24, r24
    2768:	09 f4       	brne	.+2      	; 0x276c <vfprintf+0x3c>
    276a:	53 c3       	rjmp	.+1702   	; 0x2e12 <vfprintf+0x6e2>
    276c:	85 32       	cpi	r24, 0x25	; 37
    276e:	39 f4       	brne	.+14     	; 0x277e <vfprintf+0x4e>
    2770:	93 fd       	sbrc	r25, 3
    2772:	85 91       	lpm	r24, Z+
    2774:	93 ff       	sbrs	r25, 3
    2776:	81 91       	ld	r24, Z+
    2778:	1f 01       	movw	r2, r30
    277a:	85 32       	cpi	r24, 0x25	; 37
    277c:	39 f4       	brne	.+14     	; 0x278c <vfprintf+0x5c>
    277e:	b7 01       	movw	r22, r14
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2786:	56 01       	movw	r10, r12
    2788:	65 01       	movw	r12, r10
    278a:	e5 cf       	rjmp	.-54     	; 0x2756 <vfprintf+0x26>
    278c:	10 e0       	ldi	r17, 0x00	; 0
    278e:	51 2c       	mov	r5, r1
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	20 32       	cpi	r18, 0x20	; 32
    2794:	a0 f4       	brcc	.+40     	; 0x27be <vfprintf+0x8e>
    2796:	8b 32       	cpi	r24, 0x2B	; 43
    2798:	69 f0       	breq	.+26     	; 0x27b4 <vfprintf+0x84>
    279a:	30 f4       	brcc	.+12     	; 0x27a8 <vfprintf+0x78>
    279c:	80 32       	cpi	r24, 0x20	; 32
    279e:	59 f0       	breq	.+22     	; 0x27b6 <vfprintf+0x86>
    27a0:	83 32       	cpi	r24, 0x23	; 35
    27a2:	69 f4       	brne	.+26     	; 0x27be <vfprintf+0x8e>
    27a4:	20 61       	ori	r18, 0x10	; 16
    27a6:	2c c0       	rjmp	.+88     	; 0x2800 <vfprintf+0xd0>
    27a8:	8d 32       	cpi	r24, 0x2D	; 45
    27aa:	39 f0       	breq	.+14     	; 0x27ba <vfprintf+0x8a>
    27ac:	80 33       	cpi	r24, 0x30	; 48
    27ae:	39 f4       	brne	.+14     	; 0x27be <vfprintf+0x8e>
    27b0:	21 60       	ori	r18, 0x01	; 1
    27b2:	26 c0       	rjmp	.+76     	; 0x2800 <vfprintf+0xd0>
    27b4:	22 60       	ori	r18, 0x02	; 2
    27b6:	24 60       	ori	r18, 0x04	; 4
    27b8:	23 c0       	rjmp	.+70     	; 0x2800 <vfprintf+0xd0>
    27ba:	28 60       	ori	r18, 0x08	; 8
    27bc:	21 c0       	rjmp	.+66     	; 0x2800 <vfprintf+0xd0>
    27be:	27 fd       	sbrc	r18, 7
    27c0:	27 c0       	rjmp	.+78     	; 0x2810 <vfprintf+0xe0>
    27c2:	30 ed       	ldi	r19, 0xD0	; 208
    27c4:	38 0f       	add	r19, r24
    27c6:	3a 30       	cpi	r19, 0x0A	; 10
    27c8:	78 f4       	brcc	.+30     	; 0x27e8 <vfprintf+0xb8>
    27ca:	26 ff       	sbrs	r18, 6
    27cc:	06 c0       	rjmp	.+12     	; 0x27da <vfprintf+0xaa>
    27ce:	fa e0       	ldi	r31, 0x0A	; 10
    27d0:	1f 9f       	mul	r17, r31
    27d2:	30 0d       	add	r19, r0
    27d4:	11 24       	eor	r1, r1
    27d6:	13 2f       	mov	r17, r19
    27d8:	13 c0       	rjmp	.+38     	; 0x2800 <vfprintf+0xd0>
    27da:	6a e0       	ldi	r22, 0x0A	; 10
    27dc:	56 9e       	mul	r5, r22
    27de:	30 0d       	add	r19, r0
    27e0:	11 24       	eor	r1, r1
    27e2:	53 2e       	mov	r5, r19
    27e4:	20 62       	ori	r18, 0x20	; 32
    27e6:	0c c0       	rjmp	.+24     	; 0x2800 <vfprintf+0xd0>
    27e8:	8e 32       	cpi	r24, 0x2E	; 46
    27ea:	21 f4       	brne	.+8      	; 0x27f4 <vfprintf+0xc4>
    27ec:	26 fd       	sbrc	r18, 6
    27ee:	11 c3       	rjmp	.+1570   	; 0x2e12 <vfprintf+0x6e2>
    27f0:	20 64       	ori	r18, 0x40	; 64
    27f2:	06 c0       	rjmp	.+12     	; 0x2800 <vfprintf+0xd0>
    27f4:	8c 36       	cpi	r24, 0x6C	; 108
    27f6:	11 f4       	brne	.+4      	; 0x27fc <vfprintf+0xcc>
    27f8:	20 68       	ori	r18, 0x80	; 128
    27fa:	02 c0       	rjmp	.+4      	; 0x2800 <vfprintf+0xd0>
    27fc:	88 36       	cpi	r24, 0x68	; 104
    27fe:	41 f4       	brne	.+16     	; 0x2810 <vfprintf+0xe0>
    2800:	f1 01       	movw	r30, r2
    2802:	93 fd       	sbrc	r25, 3
    2804:	85 91       	lpm	r24, Z+
    2806:	93 ff       	sbrs	r25, 3
    2808:	81 91       	ld	r24, Z+
    280a:	1f 01       	movw	r2, r30
    280c:	81 11       	cpse	r24, r1
    280e:	c1 cf       	rjmp	.-126    	; 0x2792 <vfprintf+0x62>
    2810:	9b eb       	ldi	r25, 0xBB	; 187
    2812:	98 0f       	add	r25, r24
    2814:	93 30       	cpi	r25, 0x03	; 3
    2816:	18 f4       	brcc	.+6      	; 0x281e <vfprintf+0xee>
    2818:	20 61       	ori	r18, 0x10	; 16
    281a:	80 5e       	subi	r24, 0xE0	; 224
    281c:	06 c0       	rjmp	.+12     	; 0x282a <vfprintf+0xfa>
    281e:	9b e9       	ldi	r25, 0x9B	; 155
    2820:	98 0f       	add	r25, r24
    2822:	93 30       	cpi	r25, 0x03	; 3
    2824:	08 f0       	brcs	.+2      	; 0x2828 <vfprintf+0xf8>
    2826:	aa c1       	rjmp	.+852    	; 0x2b7c <vfprintf+0x44c>
    2828:	2f 7e       	andi	r18, 0xEF	; 239
    282a:	26 ff       	sbrs	r18, 6
    282c:	16 e0       	ldi	r17, 0x06	; 6
    282e:	2f 73       	andi	r18, 0x3F	; 63
    2830:	72 2e       	mov	r7, r18
    2832:	85 36       	cpi	r24, 0x65	; 101
    2834:	21 f4       	brne	.+8      	; 0x283e <vfprintf+0x10e>
    2836:	f2 2f       	mov	r31, r18
    2838:	f0 64       	ori	r31, 0x40	; 64
    283a:	7f 2e       	mov	r7, r31
    283c:	08 c0       	rjmp	.+16     	; 0x284e <vfprintf+0x11e>
    283e:	86 36       	cpi	r24, 0x66	; 102
    2840:	21 f4       	brne	.+8      	; 0x284a <vfprintf+0x11a>
    2842:	62 2f       	mov	r22, r18
    2844:	60 68       	ori	r22, 0x80	; 128
    2846:	76 2e       	mov	r7, r22
    2848:	02 c0       	rjmp	.+4      	; 0x284e <vfprintf+0x11e>
    284a:	11 11       	cpse	r17, r1
    284c:	11 50       	subi	r17, 0x01	; 1
    284e:	77 fe       	sbrs	r7, 7
    2850:	07 c0       	rjmp	.+14     	; 0x2860 <vfprintf+0x130>
    2852:	1c 33       	cpi	r17, 0x3C	; 60
    2854:	48 f4       	brcc	.+18     	; 0x2868 <vfprintf+0x138>
    2856:	44 24       	eor	r4, r4
    2858:	43 94       	inc	r4
    285a:	41 0e       	add	r4, r17
    285c:	27 e0       	ldi	r18, 0x07	; 7
    285e:	0b c0       	rjmp	.+22     	; 0x2876 <vfprintf+0x146>
    2860:	18 30       	cpi	r17, 0x08	; 8
    2862:	30 f4       	brcc	.+12     	; 0x2870 <vfprintf+0x140>
    2864:	21 2f       	mov	r18, r17
    2866:	06 c0       	rjmp	.+12     	; 0x2874 <vfprintf+0x144>
    2868:	27 e0       	ldi	r18, 0x07	; 7
    286a:	4c e3       	ldi	r20, 0x3C	; 60
    286c:	44 2e       	mov	r4, r20
    286e:	03 c0       	rjmp	.+6      	; 0x2876 <vfprintf+0x146>
    2870:	27 e0       	ldi	r18, 0x07	; 7
    2872:	17 e0       	ldi	r17, 0x07	; 7
    2874:	41 2c       	mov	r4, r1
    2876:	56 01       	movw	r10, r12
    2878:	74 e0       	ldi	r23, 0x04	; 4
    287a:	a7 0e       	add	r10, r23
    287c:	b1 1c       	adc	r11, r1
    287e:	f6 01       	movw	r30, r12
    2880:	60 81       	ld	r22, Z
    2882:	71 81       	ldd	r23, Z+1	; 0x01
    2884:	82 81       	ldd	r24, Z+2	; 0x02
    2886:	93 81       	ldd	r25, Z+3	; 0x03
    2888:	04 2d       	mov	r16, r4
    288a:	a4 01       	movw	r20, r8
    288c:	0e 94 93 18 	call	0x3126	; 0x3126 <__ftoa_engine>
    2890:	6c 01       	movw	r12, r24
    2892:	09 81       	ldd	r16, Y+1	; 0x01
    2894:	00 ff       	sbrs	r16, 0
    2896:	02 c0       	rjmp	.+4      	; 0x289c <vfprintf+0x16c>
    2898:	03 ff       	sbrs	r16, 3
    289a:	06 c0       	rjmp	.+12     	; 0x28a8 <vfprintf+0x178>
    289c:	71 fc       	sbrc	r7, 1
    289e:	07 c0       	rjmp	.+14     	; 0x28ae <vfprintf+0x17e>
    28a0:	72 fc       	sbrc	r7, 2
    28a2:	08 c0       	rjmp	.+16     	; 0x28b4 <vfprintf+0x184>
    28a4:	61 2c       	mov	r6, r1
    28a6:	08 c0       	rjmp	.+16     	; 0x28b8 <vfprintf+0x188>
    28a8:	3d e2       	ldi	r19, 0x2D	; 45
    28aa:	63 2e       	mov	r6, r19
    28ac:	05 c0       	rjmp	.+10     	; 0x28b8 <vfprintf+0x188>
    28ae:	2b e2       	ldi	r18, 0x2B	; 43
    28b0:	62 2e       	mov	r6, r18
    28b2:	02 c0       	rjmp	.+4      	; 0x28b8 <vfprintf+0x188>
    28b4:	90 e2       	ldi	r25, 0x20	; 32
    28b6:	69 2e       	mov	r6, r25
    28b8:	80 2f       	mov	r24, r16
    28ba:	8c 70       	andi	r24, 0x0C	; 12
    28bc:	99 f1       	breq	.+102    	; 0x2924 <vfprintf+0x1f4>
    28be:	66 20       	and	r6, r6
    28c0:	11 f0       	breq	.+4      	; 0x28c6 <vfprintf+0x196>
    28c2:	84 e0       	ldi	r24, 0x04	; 4
    28c4:	01 c0       	rjmp	.+2      	; 0x28c8 <vfprintf+0x198>
    28c6:	83 e0       	ldi	r24, 0x03	; 3
    28c8:	85 15       	cp	r24, r5
    28ca:	10 f0       	brcs	.+4      	; 0x28d0 <vfprintf+0x1a0>
    28cc:	51 2c       	mov	r5, r1
    28ce:	0b c0       	rjmp	.+22     	; 0x28e6 <vfprintf+0x1b6>
    28d0:	58 1a       	sub	r5, r24
    28d2:	73 fc       	sbrc	r7, 3
    28d4:	08 c0       	rjmp	.+16     	; 0x28e6 <vfprintf+0x1b6>
    28d6:	b7 01       	movw	r22, r14
    28d8:	80 e2       	ldi	r24, 0x20	; 32
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    28e0:	5a 94       	dec	r5
    28e2:	c9 f7       	brne	.-14     	; 0x28d6 <vfprintf+0x1a6>
    28e4:	f3 cf       	rjmp	.-26     	; 0x28cc <vfprintf+0x19c>
    28e6:	66 20       	and	r6, r6
    28e8:	29 f0       	breq	.+10     	; 0x28f4 <vfprintf+0x1c4>
    28ea:	b7 01       	movw	r22, r14
    28ec:	86 2d       	mov	r24, r6
    28ee:	90 e0       	ldi	r25, 0x00	; 0
    28f0:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    28f4:	03 fd       	sbrc	r16, 3
    28f6:	03 c0       	rjmp	.+6      	; 0x28fe <vfprintf+0x1ce>
    28f8:	08 e3       	ldi	r16, 0x38	; 56
    28fa:	11 e0       	ldi	r17, 0x01	; 1
    28fc:	02 c0       	rjmp	.+4      	; 0x2902 <vfprintf+0x1d2>
    28fe:	04 e3       	ldi	r16, 0x34	; 52
    2900:	11 e0       	ldi	r17, 0x01	; 1
    2902:	f7 2d       	mov	r31, r7
    2904:	f0 71       	andi	r31, 0x10	; 16
    2906:	7f 2e       	mov	r7, r31
    2908:	f8 01       	movw	r30, r16
    290a:	84 91       	lpm	r24, Z
    290c:	88 23       	and	r24, r24
    290e:	09 f4       	brne	.+2      	; 0x2912 <vfprintf+0x1e2>
    2910:	76 c2       	rjmp	.+1260   	; 0x2dfe <vfprintf+0x6ce>
    2912:	71 10       	cpse	r7, r1
    2914:	80 52       	subi	r24, 0x20	; 32
    2916:	b7 01       	movw	r22, r14
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    291e:	0f 5f       	subi	r16, 0xFF	; 255
    2920:	1f 4f       	sbci	r17, 0xFF	; 255
    2922:	f2 cf       	rjmp	.-28     	; 0x2908 <vfprintf+0x1d8>
    2924:	77 fe       	sbrs	r7, 7
    2926:	0f c0       	rjmp	.+30     	; 0x2946 <vfprintf+0x216>
    2928:	4c 0c       	add	r4, r12
    292a:	04 ff       	sbrs	r16, 4
    292c:	04 c0       	rjmp	.+8      	; 0x2936 <vfprintf+0x206>
    292e:	8a 81       	ldd	r24, Y+2	; 0x02
    2930:	81 33       	cpi	r24, 0x31	; 49
    2932:	09 f4       	brne	.+2      	; 0x2936 <vfprintf+0x206>
    2934:	4a 94       	dec	r4
    2936:	14 14       	cp	r1, r4
    2938:	74 f5       	brge	.+92     	; 0x2996 <vfprintf+0x266>
    293a:	f8 e0       	ldi	r31, 0x08	; 8
    293c:	f4 15       	cp	r31, r4
    293e:	78 f5       	brcc	.+94     	; 0x299e <vfprintf+0x26e>
    2940:	88 e0       	ldi	r24, 0x08	; 8
    2942:	48 2e       	mov	r4, r24
    2944:	2c c0       	rjmp	.+88     	; 0x299e <vfprintf+0x26e>
    2946:	76 fc       	sbrc	r7, 6
    2948:	2a c0       	rjmp	.+84     	; 0x299e <vfprintf+0x26e>
    294a:	81 2f       	mov	r24, r17
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	8c 15       	cp	r24, r12
    2950:	9d 05       	cpc	r25, r13
    2952:	9c f0       	brlt	.+38     	; 0x297a <vfprintf+0x24a>
    2954:	6c ef       	ldi	r22, 0xFC	; 252
    2956:	c6 16       	cp	r12, r22
    2958:	6f ef       	ldi	r22, 0xFF	; 255
    295a:	d6 06       	cpc	r13, r22
    295c:	74 f0       	brlt	.+28     	; 0x297a <vfprintf+0x24a>
    295e:	77 2d       	mov	r23, r7
    2960:	70 68       	ori	r23, 0x80	; 128
    2962:	77 2e       	mov	r7, r23
    2964:	0a c0       	rjmp	.+20     	; 0x297a <vfprintf+0x24a>
    2966:	e2 e0       	ldi	r30, 0x02	; 2
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	ec 0f       	add	r30, r28
    296c:	fd 1f       	adc	r31, r29
    296e:	e1 0f       	add	r30, r17
    2970:	f1 1d       	adc	r31, r1
    2972:	80 81       	ld	r24, Z
    2974:	80 33       	cpi	r24, 0x30	; 48
    2976:	19 f4       	brne	.+6      	; 0x297e <vfprintf+0x24e>
    2978:	11 50       	subi	r17, 0x01	; 1
    297a:	11 11       	cpse	r17, r1
    297c:	f4 cf       	rjmp	.-24     	; 0x2966 <vfprintf+0x236>
    297e:	77 fe       	sbrs	r7, 7
    2980:	0e c0       	rjmp	.+28     	; 0x299e <vfprintf+0x26e>
    2982:	44 24       	eor	r4, r4
    2984:	43 94       	inc	r4
    2986:	41 0e       	add	r4, r17
    2988:	81 2f       	mov	r24, r17
    298a:	90 e0       	ldi	r25, 0x00	; 0
    298c:	c8 16       	cp	r12, r24
    298e:	d9 06       	cpc	r13, r25
    2990:	2c f4       	brge	.+10     	; 0x299c <vfprintf+0x26c>
    2992:	1c 19       	sub	r17, r12
    2994:	04 c0       	rjmp	.+8      	; 0x299e <vfprintf+0x26e>
    2996:	44 24       	eor	r4, r4
    2998:	43 94       	inc	r4
    299a:	01 c0       	rjmp	.+2      	; 0x299e <vfprintf+0x26e>
    299c:	10 e0       	ldi	r17, 0x00	; 0
    299e:	77 fe       	sbrs	r7, 7
    29a0:	07 c0       	rjmp	.+14     	; 0x29b0 <vfprintf+0x280>
    29a2:	1c 14       	cp	r1, r12
    29a4:	1d 04       	cpc	r1, r13
    29a6:	3c f4       	brge	.+14     	; 0x29b6 <vfprintf+0x286>
    29a8:	96 01       	movw	r18, r12
    29aa:	2f 5f       	subi	r18, 0xFF	; 255
    29ac:	3f 4f       	sbci	r19, 0xFF	; 255
    29ae:	05 c0       	rjmp	.+10     	; 0x29ba <vfprintf+0x28a>
    29b0:	25 e0       	ldi	r18, 0x05	; 5
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	02 c0       	rjmp	.+4      	; 0x29ba <vfprintf+0x28a>
    29b6:	21 e0       	ldi	r18, 0x01	; 1
    29b8:	30 e0       	ldi	r19, 0x00	; 0
    29ba:	66 20       	and	r6, r6
    29bc:	11 f0       	breq	.+4      	; 0x29c2 <vfprintf+0x292>
    29be:	2f 5f       	subi	r18, 0xFF	; 255
    29c0:	3f 4f       	sbci	r19, 0xFF	; 255
    29c2:	11 23       	and	r17, r17
    29c4:	31 f0       	breq	.+12     	; 0x29d2 <vfprintf+0x2a2>
    29c6:	41 2f       	mov	r20, r17
    29c8:	50 e0       	ldi	r21, 0x00	; 0
    29ca:	4f 5f       	subi	r20, 0xFF	; 255
    29cc:	5f 4f       	sbci	r21, 0xFF	; 255
    29ce:	24 0f       	add	r18, r20
    29d0:	35 1f       	adc	r19, r21
    29d2:	45 2d       	mov	r20, r5
    29d4:	50 e0       	ldi	r21, 0x00	; 0
    29d6:	24 17       	cp	r18, r20
    29d8:	35 07       	cpc	r19, r21
    29da:	14 f4       	brge	.+4      	; 0x29e0 <vfprintf+0x2b0>
    29dc:	52 1a       	sub	r5, r18
    29de:	01 c0       	rjmp	.+2      	; 0x29e2 <vfprintf+0x2b2>
    29e0:	51 2c       	mov	r5, r1
    29e2:	87 2d       	mov	r24, r7
    29e4:	89 70       	andi	r24, 0x09	; 9
    29e6:	49 f4       	brne	.+18     	; 0x29fa <vfprintf+0x2ca>
    29e8:	55 20       	and	r5, r5
    29ea:	39 f0       	breq	.+14     	; 0x29fa <vfprintf+0x2ca>
    29ec:	b7 01       	movw	r22, r14
    29ee:	80 e2       	ldi	r24, 0x20	; 32
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    29f6:	5a 94       	dec	r5
    29f8:	f7 cf       	rjmp	.-18     	; 0x29e8 <vfprintf+0x2b8>
    29fa:	66 20       	and	r6, r6
    29fc:	29 f0       	breq	.+10     	; 0x2a08 <vfprintf+0x2d8>
    29fe:	b7 01       	movw	r22, r14
    2a00:	86 2d       	mov	r24, r6
    2a02:	90 e0       	ldi	r25, 0x00	; 0
    2a04:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2a08:	73 fc       	sbrc	r7, 3
    2a0a:	09 c0       	rjmp	.+18     	; 0x2a1e <vfprintf+0x2ee>
    2a0c:	55 20       	and	r5, r5
    2a0e:	39 f0       	breq	.+14     	; 0x2a1e <vfprintf+0x2ee>
    2a10:	b7 01       	movw	r22, r14
    2a12:	80 e3       	ldi	r24, 0x30	; 48
    2a14:	90 e0       	ldi	r25, 0x00	; 0
    2a16:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2a1a:	5a 94       	dec	r5
    2a1c:	f7 cf       	rjmp	.-18     	; 0x2a0c <vfprintf+0x2dc>
    2a1e:	77 fe       	sbrs	r7, 7
    2a20:	5f c0       	rjmp	.+190    	; 0x2ae0 <vfprintf+0x3b0>
    2a22:	9c 2d       	mov	r25, r12
    2a24:	8d 2d       	mov	r24, r13
    2a26:	d7 fe       	sbrs	r13, 7
    2a28:	02 c0       	rjmp	.+4      	; 0x2a2e <vfprintf+0x2fe>
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
    2a2e:	69 2e       	mov	r6, r25
    2a30:	78 2e       	mov	r7, r24
    2a32:	40 e0       	ldi	r20, 0x00	; 0
    2a34:	50 e0       	ldi	r21, 0x00	; 0
    2a36:	c6 01       	movw	r24, r12
    2a38:	84 19       	sub	r24, r4
    2a3a:	91 09       	sbc	r25, r1
    2a3c:	9d 87       	std	Y+13, r25	; 0x0d
    2a3e:	8c 87       	std	Y+12, r24	; 0x0c
    2a40:	96 01       	movw	r18, r12
    2a42:	26 19       	sub	r18, r6
    2a44:	37 09       	sbc	r19, r7
    2a46:	28 0d       	add	r18, r8
    2a48:	39 1d       	adc	r19, r9
    2a4a:	81 2f       	mov	r24, r17
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	ee 27       	eor	r30, r30
    2a50:	ff 27       	eor	r31, r31
    2a52:	e8 1b       	sub	r30, r24
    2a54:	f9 0b       	sbc	r31, r25
    2a56:	ff 87       	std	Y+15, r31	; 0x0f
    2a58:	ee 87       	std	Y+14, r30	; 0x0e
    2a5a:	ff ef       	ldi	r31, 0xFF	; 255
    2a5c:	6f 16       	cp	r6, r31
    2a5e:	7f 06       	cpc	r7, r31
    2a60:	69 f4       	brne	.+26     	; 0x2a7c <vfprintf+0x34c>
    2a62:	b7 01       	movw	r22, r14
    2a64:	8e e2       	ldi	r24, 0x2E	; 46
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	2b 8b       	std	Y+19, r18	; 0x13
    2a6a:	3a 8b       	std	Y+18, r19	; 0x12
    2a6c:	48 8b       	std	Y+16, r20	; 0x10
    2a6e:	59 8b       	std	Y+17, r21	; 0x11
    2a70:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2a74:	59 89       	ldd	r21, Y+17	; 0x11
    2a76:	48 89       	ldd	r20, Y+16	; 0x10
    2a78:	3a 89       	ldd	r19, Y+18	; 0x12
    2a7a:	2b 89       	ldd	r18, Y+19	; 0x13
    2a7c:	c6 14       	cp	r12, r6
    2a7e:	d7 04       	cpc	r13, r7
    2a80:	54 f0       	brlt	.+20     	; 0x2a96 <vfprintf+0x366>
    2a82:	6c 85       	ldd	r22, Y+12	; 0x0c
    2a84:	7d 85       	ldd	r23, Y+13	; 0x0d
    2a86:	66 15       	cp	r22, r6
    2a88:	77 05       	cpc	r23, r7
    2a8a:	2c f4       	brge	.+10     	; 0x2a96 <vfprintf+0x366>
    2a8c:	f9 01       	movw	r30, r18
    2a8e:	e4 0f       	add	r30, r20
    2a90:	f5 1f       	adc	r31, r21
    2a92:	81 81       	ldd	r24, Z+1	; 0x01
    2a94:	01 c0       	rjmp	.+2      	; 0x2a98 <vfprintf+0x368>
    2a96:	80 e3       	ldi	r24, 0x30	; 48
    2a98:	71 e0       	ldi	r23, 0x01	; 1
    2a9a:	67 1a       	sub	r6, r23
    2a9c:	71 08       	sbc	r7, r1
    2a9e:	4f 5f       	subi	r20, 0xFF	; 255
    2aa0:	5f 4f       	sbci	r21, 0xFF	; 255
    2aa2:	ee 85       	ldd	r30, Y+14	; 0x0e
    2aa4:	ff 85       	ldd	r31, Y+15	; 0x0f
    2aa6:	6e 16       	cp	r6, r30
    2aa8:	7f 06       	cpc	r7, r31
    2aaa:	6c f0       	brlt	.+26     	; 0x2ac6 <vfprintf+0x396>
    2aac:	b7 01       	movw	r22, r14
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	2b 8b       	std	Y+19, r18	; 0x13
    2ab2:	3a 8b       	std	Y+18, r19	; 0x12
    2ab4:	48 8b       	std	Y+16, r20	; 0x10
    2ab6:	59 8b       	std	Y+17, r21	; 0x11
    2ab8:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2abc:	2b 89       	ldd	r18, Y+19	; 0x13
    2abe:	3a 89       	ldd	r19, Y+18	; 0x12
    2ac0:	48 89       	ldd	r20, Y+16	; 0x10
    2ac2:	59 89       	ldd	r21, Y+17	; 0x11
    2ac4:	ca cf       	rjmp	.-108    	; 0x2a5a <vfprintf+0x32a>
    2ac6:	6c 14       	cp	r6, r12
    2ac8:	7d 04       	cpc	r7, r13
    2aca:	39 f4       	brne	.+14     	; 0x2ada <vfprintf+0x3aa>
    2acc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ace:	96 33       	cpi	r25, 0x36	; 54
    2ad0:	18 f4       	brcc	.+6      	; 0x2ad8 <vfprintf+0x3a8>
    2ad2:	95 33       	cpi	r25, 0x35	; 53
    2ad4:	11 f4       	brne	.+4      	; 0x2ada <vfprintf+0x3aa>
    2ad6:	04 ff       	sbrs	r16, 4
    2ad8:	81 e3       	ldi	r24, 0x31	; 49
    2ada:	b7 01       	movw	r22, r14
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	4b c0       	rjmp	.+150    	; 0x2b76 <vfprintf+0x446>
    2ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ae2:	81 33       	cpi	r24, 0x31	; 49
    2ae4:	09 f0       	breq	.+2      	; 0x2ae8 <vfprintf+0x3b8>
    2ae6:	0f 7e       	andi	r16, 0xEF	; 239
    2ae8:	b7 01       	movw	r22, r14
    2aea:	90 e0       	ldi	r25, 0x00	; 0
    2aec:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2af0:	11 11       	cpse	r17, r1
    2af2:	05 c0       	rjmp	.+10     	; 0x2afe <vfprintf+0x3ce>
    2af4:	74 fe       	sbrs	r7, 4
    2af6:	18 c0       	rjmp	.+48     	; 0x2b28 <vfprintf+0x3f8>
    2af8:	85 e4       	ldi	r24, 0x45	; 69
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	17 c0       	rjmp	.+46     	; 0x2b2c <vfprintf+0x3fc>
    2afe:	b7 01       	movw	r22, r14
    2b00:	8e e2       	ldi	r24, 0x2E	; 46
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2b08:	82 e0       	ldi	r24, 0x02	; 2
    2b0a:	66 24       	eor	r6, r6
    2b0c:	63 94       	inc	r6
    2b0e:	68 0e       	add	r6, r24
    2b10:	f4 01       	movw	r30, r8
    2b12:	e8 0f       	add	r30, r24
    2b14:	f1 1d       	adc	r31, r1
    2b16:	80 81       	ld	r24, Z
    2b18:	b7 01       	movw	r22, r14
    2b1a:	90 e0       	ldi	r25, 0x00	; 0
    2b1c:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2b20:	11 50       	subi	r17, 0x01	; 1
    2b22:	41 f3       	breq	.-48     	; 0x2af4 <vfprintf+0x3c4>
    2b24:	86 2d       	mov	r24, r6
    2b26:	f1 cf       	rjmp	.-30     	; 0x2b0a <vfprintf+0x3da>
    2b28:	85 e6       	ldi	r24, 0x65	; 101
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	b7 01       	movw	r22, r14
    2b2e:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2b32:	d7 fc       	sbrc	r13, 7
    2b34:	05 c0       	rjmp	.+10     	; 0x2b40 <vfprintf+0x410>
    2b36:	c1 14       	cp	r12, r1
    2b38:	d1 04       	cpc	r13, r1
    2b3a:	39 f4       	brne	.+14     	; 0x2b4a <vfprintf+0x41a>
    2b3c:	04 ff       	sbrs	r16, 4
    2b3e:	05 c0       	rjmp	.+10     	; 0x2b4a <vfprintf+0x41a>
    2b40:	d1 94       	neg	r13
    2b42:	c1 94       	neg	r12
    2b44:	d1 08       	sbc	r13, r1
    2b46:	8d e2       	ldi	r24, 0x2D	; 45
    2b48:	01 c0       	rjmp	.+2      	; 0x2b4c <vfprintf+0x41c>
    2b4a:	8b e2       	ldi	r24, 0x2B	; 43
    2b4c:	b7 01       	movw	r22, r14
    2b4e:	90 e0       	ldi	r25, 0x00	; 0
    2b50:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2b54:	80 e3       	ldi	r24, 0x30	; 48
    2b56:	6a e0       	ldi	r22, 0x0A	; 10
    2b58:	c6 16       	cp	r12, r22
    2b5a:	d1 04       	cpc	r13, r1
    2b5c:	2c f0       	brlt	.+10     	; 0x2b68 <vfprintf+0x438>
    2b5e:	8f 5f       	subi	r24, 0xFF	; 255
    2b60:	fa e0       	ldi	r31, 0x0A	; 10
    2b62:	cf 1a       	sub	r12, r31
    2b64:	d1 08       	sbc	r13, r1
    2b66:	f7 cf       	rjmp	.-18     	; 0x2b56 <vfprintf+0x426>
    2b68:	b7 01       	movw	r22, r14
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2b70:	b7 01       	movw	r22, r14
    2b72:	c6 01       	movw	r24, r12
    2b74:	c0 96       	adiw	r24, 0x30	; 48
    2b76:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2b7a:	41 c1       	rjmp	.+642    	; 0x2dfe <vfprintf+0x6ce>
    2b7c:	83 36       	cpi	r24, 0x63	; 99
    2b7e:	31 f0       	breq	.+12     	; 0x2b8c <vfprintf+0x45c>
    2b80:	83 37       	cpi	r24, 0x73	; 115
    2b82:	79 f0       	breq	.+30     	; 0x2ba2 <vfprintf+0x472>
    2b84:	83 35       	cpi	r24, 0x53	; 83
    2b86:	09 f0       	breq	.+2      	; 0x2b8a <vfprintf+0x45a>
    2b88:	58 c0       	rjmp	.+176    	; 0x2c3a <vfprintf+0x50a>
    2b8a:	21 c0       	rjmp	.+66     	; 0x2bce <vfprintf+0x49e>
    2b8c:	56 01       	movw	r10, r12
    2b8e:	72 e0       	ldi	r23, 0x02	; 2
    2b90:	a7 0e       	add	r10, r23
    2b92:	b1 1c       	adc	r11, r1
    2b94:	f6 01       	movw	r30, r12
    2b96:	80 81       	ld	r24, Z
    2b98:	89 83       	std	Y+1, r24	; 0x01
    2b9a:	01 e0       	ldi	r16, 0x01	; 1
    2b9c:	10 e0       	ldi	r17, 0x00	; 0
    2b9e:	64 01       	movw	r12, r8
    2ba0:	14 c0       	rjmp	.+40     	; 0x2bca <vfprintf+0x49a>
    2ba2:	56 01       	movw	r10, r12
    2ba4:	f2 e0       	ldi	r31, 0x02	; 2
    2ba6:	af 0e       	add	r10, r31
    2ba8:	b1 1c       	adc	r11, r1
    2baa:	f6 01       	movw	r30, r12
    2bac:	c0 80       	ld	r12, Z
    2bae:	d1 80       	ldd	r13, Z+1	; 0x01
    2bb0:	26 ff       	sbrs	r18, 6
    2bb2:	03 c0       	rjmp	.+6      	; 0x2bba <vfprintf+0x48a>
    2bb4:	61 2f       	mov	r22, r17
    2bb6:	70 e0       	ldi	r23, 0x00	; 0
    2bb8:	02 c0       	rjmp	.+4      	; 0x2bbe <vfprintf+0x48e>
    2bba:	6f ef       	ldi	r22, 0xFF	; 255
    2bbc:	7f ef       	ldi	r23, 0xFF	; 255
    2bbe:	c6 01       	movw	r24, r12
    2bc0:	2b 8b       	std	Y+19, r18	; 0x13
    2bc2:	0e 94 76 19 	call	0x32ec	; 0x32ec <strnlen>
    2bc6:	8c 01       	movw	r16, r24
    2bc8:	2b 89       	ldd	r18, Y+19	; 0x13
    2bca:	2f 77       	andi	r18, 0x7F	; 127
    2bcc:	15 c0       	rjmp	.+42     	; 0x2bf8 <vfprintf+0x4c8>
    2bce:	56 01       	movw	r10, r12
    2bd0:	f2 e0       	ldi	r31, 0x02	; 2
    2bd2:	af 0e       	add	r10, r31
    2bd4:	b1 1c       	adc	r11, r1
    2bd6:	f6 01       	movw	r30, r12
    2bd8:	c0 80       	ld	r12, Z
    2bda:	d1 80       	ldd	r13, Z+1	; 0x01
    2bdc:	26 ff       	sbrs	r18, 6
    2bde:	03 c0       	rjmp	.+6      	; 0x2be6 <vfprintf+0x4b6>
    2be0:	61 2f       	mov	r22, r17
    2be2:	70 e0       	ldi	r23, 0x00	; 0
    2be4:	02 c0       	rjmp	.+4      	; 0x2bea <vfprintf+0x4ba>
    2be6:	6f ef       	ldi	r22, 0xFF	; 255
    2be8:	7f ef       	ldi	r23, 0xFF	; 255
    2bea:	c6 01       	movw	r24, r12
    2bec:	2b 8b       	std	Y+19, r18	; 0x13
    2bee:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <strnlen_P>
    2bf2:	8c 01       	movw	r16, r24
    2bf4:	2b 89       	ldd	r18, Y+19	; 0x13
    2bf6:	20 68       	ori	r18, 0x80	; 128
    2bf8:	72 2e       	mov	r7, r18
    2bfa:	23 fd       	sbrc	r18, 3
    2bfc:	1a c0       	rjmp	.+52     	; 0x2c32 <vfprintf+0x502>
    2bfe:	85 2d       	mov	r24, r5
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	08 17       	cp	r16, r24
    2c04:	19 07       	cpc	r17, r25
    2c06:	a8 f4       	brcc	.+42     	; 0x2c32 <vfprintf+0x502>
    2c08:	b7 01       	movw	r22, r14
    2c0a:	80 e2       	ldi	r24, 0x20	; 32
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2c12:	5a 94       	dec	r5
    2c14:	f4 cf       	rjmp	.-24     	; 0x2bfe <vfprintf+0x4ce>
    2c16:	f6 01       	movw	r30, r12
    2c18:	77 fc       	sbrc	r7, 7
    2c1a:	85 91       	lpm	r24, Z+
    2c1c:	77 fe       	sbrs	r7, 7
    2c1e:	81 91       	ld	r24, Z+
    2c20:	6f 01       	movw	r12, r30
    2c22:	b7 01       	movw	r22, r14
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2c2a:	51 10       	cpse	r5, r1
    2c2c:	5a 94       	dec	r5
    2c2e:	01 50       	subi	r16, 0x01	; 1
    2c30:	11 09       	sbc	r17, r1
    2c32:	01 15       	cp	r16, r1
    2c34:	11 05       	cpc	r17, r1
    2c36:	79 f7       	brne	.-34     	; 0x2c16 <vfprintf+0x4e6>
    2c38:	e2 c0       	rjmp	.+452    	; 0x2dfe <vfprintf+0x6ce>
    2c3a:	84 36       	cpi	r24, 0x64	; 100
    2c3c:	11 f0       	breq	.+4      	; 0x2c42 <vfprintf+0x512>
    2c3e:	89 36       	cpi	r24, 0x69	; 105
    2c40:	51 f5       	brne	.+84     	; 0x2c96 <vfprintf+0x566>
    2c42:	56 01       	movw	r10, r12
    2c44:	27 ff       	sbrs	r18, 7
    2c46:	09 c0       	rjmp	.+18     	; 0x2c5a <vfprintf+0x52a>
    2c48:	f4 e0       	ldi	r31, 0x04	; 4
    2c4a:	af 0e       	add	r10, r31
    2c4c:	b1 1c       	adc	r11, r1
    2c4e:	f6 01       	movw	r30, r12
    2c50:	60 81       	ld	r22, Z
    2c52:	71 81       	ldd	r23, Z+1	; 0x01
    2c54:	82 81       	ldd	r24, Z+2	; 0x02
    2c56:	93 81       	ldd	r25, Z+3	; 0x03
    2c58:	0a c0       	rjmp	.+20     	; 0x2c6e <vfprintf+0x53e>
    2c5a:	f2 e0       	ldi	r31, 0x02	; 2
    2c5c:	af 0e       	add	r10, r31
    2c5e:	b1 1c       	adc	r11, r1
    2c60:	f6 01       	movw	r30, r12
    2c62:	60 81       	ld	r22, Z
    2c64:	71 81       	ldd	r23, Z+1	; 0x01
    2c66:	88 27       	eor	r24, r24
    2c68:	77 fd       	sbrc	r23, 7
    2c6a:	80 95       	com	r24
    2c6c:	98 2f       	mov	r25, r24
    2c6e:	02 2f       	mov	r16, r18
    2c70:	0f 76       	andi	r16, 0x6F	; 111
    2c72:	97 ff       	sbrs	r25, 7
    2c74:	08 c0       	rjmp	.+16     	; 0x2c86 <vfprintf+0x556>
    2c76:	90 95       	com	r25
    2c78:	80 95       	com	r24
    2c7a:	70 95       	com	r23
    2c7c:	61 95       	neg	r22
    2c7e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c80:	8f 4f       	sbci	r24, 0xFF	; 255
    2c82:	9f 4f       	sbci	r25, 0xFF	; 255
    2c84:	00 68       	ori	r16, 0x80	; 128
    2c86:	2a e0       	ldi	r18, 0x0A	; 10
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	a4 01       	movw	r20, r8
    2c8c:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__ultoa_invert>
    2c90:	c8 2e       	mov	r12, r24
    2c92:	c8 18       	sub	r12, r8
    2c94:	3e c0       	rjmp	.+124    	; 0x2d12 <vfprintf+0x5e2>
    2c96:	02 2f       	mov	r16, r18
    2c98:	85 37       	cpi	r24, 0x75	; 117
    2c9a:	21 f4       	brne	.+8      	; 0x2ca4 <vfprintf+0x574>
    2c9c:	0f 7e       	andi	r16, 0xEF	; 239
    2c9e:	2a e0       	ldi	r18, 0x0A	; 10
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	1d c0       	rjmp	.+58     	; 0x2cde <vfprintf+0x5ae>
    2ca4:	09 7f       	andi	r16, 0xF9	; 249
    2ca6:	8f 36       	cpi	r24, 0x6F	; 111
    2ca8:	91 f0       	breq	.+36     	; 0x2cce <vfprintf+0x59e>
    2caa:	18 f4       	brcc	.+6      	; 0x2cb2 <vfprintf+0x582>
    2cac:	88 35       	cpi	r24, 0x58	; 88
    2cae:	59 f0       	breq	.+22     	; 0x2cc6 <vfprintf+0x596>
    2cb0:	b0 c0       	rjmp	.+352    	; 0x2e12 <vfprintf+0x6e2>
    2cb2:	80 37       	cpi	r24, 0x70	; 112
    2cb4:	19 f0       	breq	.+6      	; 0x2cbc <vfprintf+0x58c>
    2cb6:	88 37       	cpi	r24, 0x78	; 120
    2cb8:	11 f0       	breq	.+4      	; 0x2cbe <vfprintf+0x58e>
    2cba:	ab c0       	rjmp	.+342    	; 0x2e12 <vfprintf+0x6e2>
    2cbc:	00 61       	ori	r16, 0x10	; 16
    2cbe:	04 ff       	sbrs	r16, 4
    2cc0:	09 c0       	rjmp	.+18     	; 0x2cd4 <vfprintf+0x5a4>
    2cc2:	04 60       	ori	r16, 0x04	; 4
    2cc4:	07 c0       	rjmp	.+14     	; 0x2cd4 <vfprintf+0x5a4>
    2cc6:	24 ff       	sbrs	r18, 4
    2cc8:	08 c0       	rjmp	.+16     	; 0x2cda <vfprintf+0x5aa>
    2cca:	06 60       	ori	r16, 0x06	; 6
    2ccc:	06 c0       	rjmp	.+12     	; 0x2cda <vfprintf+0x5aa>
    2cce:	28 e0       	ldi	r18, 0x08	; 8
    2cd0:	30 e0       	ldi	r19, 0x00	; 0
    2cd2:	05 c0       	rjmp	.+10     	; 0x2cde <vfprintf+0x5ae>
    2cd4:	20 e1       	ldi	r18, 0x10	; 16
    2cd6:	30 e0       	ldi	r19, 0x00	; 0
    2cd8:	02 c0       	rjmp	.+4      	; 0x2cde <vfprintf+0x5ae>
    2cda:	20 e1       	ldi	r18, 0x10	; 16
    2cdc:	32 e0       	ldi	r19, 0x02	; 2
    2cde:	56 01       	movw	r10, r12
    2ce0:	07 ff       	sbrs	r16, 7
    2ce2:	09 c0       	rjmp	.+18     	; 0x2cf6 <vfprintf+0x5c6>
    2ce4:	f4 e0       	ldi	r31, 0x04	; 4
    2ce6:	af 0e       	add	r10, r31
    2ce8:	b1 1c       	adc	r11, r1
    2cea:	f6 01       	movw	r30, r12
    2cec:	60 81       	ld	r22, Z
    2cee:	71 81       	ldd	r23, Z+1	; 0x01
    2cf0:	82 81       	ldd	r24, Z+2	; 0x02
    2cf2:	93 81       	ldd	r25, Z+3	; 0x03
    2cf4:	08 c0       	rjmp	.+16     	; 0x2d06 <vfprintf+0x5d6>
    2cf6:	f2 e0       	ldi	r31, 0x02	; 2
    2cf8:	af 0e       	add	r10, r31
    2cfa:	b1 1c       	adc	r11, r1
    2cfc:	f6 01       	movw	r30, r12
    2cfe:	60 81       	ld	r22, Z
    2d00:	71 81       	ldd	r23, Z+1	; 0x01
    2d02:	80 e0       	ldi	r24, 0x00	; 0
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	a4 01       	movw	r20, r8
    2d08:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <__ultoa_invert>
    2d0c:	c8 2e       	mov	r12, r24
    2d0e:	c8 18       	sub	r12, r8
    2d10:	0f 77       	andi	r16, 0x7F	; 127
    2d12:	06 ff       	sbrs	r16, 6
    2d14:	0b c0       	rjmp	.+22     	; 0x2d2c <vfprintf+0x5fc>
    2d16:	20 2f       	mov	r18, r16
    2d18:	2e 7f       	andi	r18, 0xFE	; 254
    2d1a:	c1 16       	cp	r12, r17
    2d1c:	50 f4       	brcc	.+20     	; 0x2d32 <vfprintf+0x602>
    2d1e:	04 ff       	sbrs	r16, 4
    2d20:	0a c0       	rjmp	.+20     	; 0x2d36 <vfprintf+0x606>
    2d22:	02 fd       	sbrc	r16, 2
    2d24:	08 c0       	rjmp	.+16     	; 0x2d36 <vfprintf+0x606>
    2d26:	20 2f       	mov	r18, r16
    2d28:	2e 7e       	andi	r18, 0xEE	; 238
    2d2a:	05 c0       	rjmp	.+10     	; 0x2d36 <vfprintf+0x606>
    2d2c:	dc 2c       	mov	r13, r12
    2d2e:	20 2f       	mov	r18, r16
    2d30:	03 c0       	rjmp	.+6      	; 0x2d38 <vfprintf+0x608>
    2d32:	dc 2c       	mov	r13, r12
    2d34:	01 c0       	rjmp	.+2      	; 0x2d38 <vfprintf+0x608>
    2d36:	d1 2e       	mov	r13, r17
    2d38:	24 ff       	sbrs	r18, 4
    2d3a:	0d c0       	rjmp	.+26     	; 0x2d56 <vfprintf+0x626>
    2d3c:	fe 01       	movw	r30, r28
    2d3e:	ec 0d       	add	r30, r12
    2d40:	f1 1d       	adc	r31, r1
    2d42:	80 81       	ld	r24, Z
    2d44:	80 33       	cpi	r24, 0x30	; 48
    2d46:	11 f4       	brne	.+4      	; 0x2d4c <vfprintf+0x61c>
    2d48:	29 7e       	andi	r18, 0xE9	; 233
    2d4a:	09 c0       	rjmp	.+18     	; 0x2d5e <vfprintf+0x62e>
    2d4c:	22 ff       	sbrs	r18, 2
    2d4e:	06 c0       	rjmp	.+12     	; 0x2d5c <vfprintf+0x62c>
    2d50:	d3 94       	inc	r13
    2d52:	d3 94       	inc	r13
    2d54:	04 c0       	rjmp	.+8      	; 0x2d5e <vfprintf+0x62e>
    2d56:	82 2f       	mov	r24, r18
    2d58:	86 78       	andi	r24, 0x86	; 134
    2d5a:	09 f0       	breq	.+2      	; 0x2d5e <vfprintf+0x62e>
    2d5c:	d3 94       	inc	r13
    2d5e:	23 fd       	sbrc	r18, 3
    2d60:	13 c0       	rjmp	.+38     	; 0x2d88 <vfprintf+0x658>
    2d62:	20 ff       	sbrs	r18, 0
    2d64:	06 c0       	rjmp	.+12     	; 0x2d72 <vfprintf+0x642>
    2d66:	1c 2d       	mov	r17, r12
    2d68:	d5 14       	cp	r13, r5
    2d6a:	18 f4       	brcc	.+6      	; 0x2d72 <vfprintf+0x642>
    2d6c:	15 0d       	add	r17, r5
    2d6e:	1d 19       	sub	r17, r13
    2d70:	d5 2c       	mov	r13, r5
    2d72:	d5 14       	cp	r13, r5
    2d74:	68 f4       	brcc	.+26     	; 0x2d90 <vfprintf+0x660>
    2d76:	b7 01       	movw	r22, r14
    2d78:	80 e2       	ldi	r24, 0x20	; 32
    2d7a:	90 e0       	ldi	r25, 0x00	; 0
    2d7c:	2b 8b       	std	Y+19, r18	; 0x13
    2d7e:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2d82:	d3 94       	inc	r13
    2d84:	2b 89       	ldd	r18, Y+19	; 0x13
    2d86:	f5 cf       	rjmp	.-22     	; 0x2d72 <vfprintf+0x642>
    2d88:	d5 14       	cp	r13, r5
    2d8a:	10 f4       	brcc	.+4      	; 0x2d90 <vfprintf+0x660>
    2d8c:	5d 18       	sub	r5, r13
    2d8e:	01 c0       	rjmp	.+2      	; 0x2d92 <vfprintf+0x662>
    2d90:	51 2c       	mov	r5, r1
    2d92:	24 ff       	sbrs	r18, 4
    2d94:	12 c0       	rjmp	.+36     	; 0x2dba <vfprintf+0x68a>
    2d96:	b7 01       	movw	r22, r14
    2d98:	80 e3       	ldi	r24, 0x30	; 48
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	2b 8b       	std	Y+19, r18	; 0x13
    2d9e:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2da2:	2b 89       	ldd	r18, Y+19	; 0x13
    2da4:	22 ff       	sbrs	r18, 2
    2da6:	17 c0       	rjmp	.+46     	; 0x2dd6 <vfprintf+0x6a6>
    2da8:	21 ff       	sbrs	r18, 1
    2daa:	03 c0       	rjmp	.+6      	; 0x2db2 <vfprintf+0x682>
    2dac:	88 e5       	ldi	r24, 0x58	; 88
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	02 c0       	rjmp	.+4      	; 0x2db6 <vfprintf+0x686>
    2db2:	88 e7       	ldi	r24, 0x78	; 120
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	b7 01       	movw	r22, r14
    2db8:	0c c0       	rjmp	.+24     	; 0x2dd2 <vfprintf+0x6a2>
    2dba:	82 2f       	mov	r24, r18
    2dbc:	86 78       	andi	r24, 0x86	; 134
    2dbe:	59 f0       	breq	.+22     	; 0x2dd6 <vfprintf+0x6a6>
    2dc0:	21 fd       	sbrc	r18, 1
    2dc2:	02 c0       	rjmp	.+4      	; 0x2dc8 <vfprintf+0x698>
    2dc4:	80 e2       	ldi	r24, 0x20	; 32
    2dc6:	01 c0       	rjmp	.+2      	; 0x2dca <vfprintf+0x69a>
    2dc8:	8b e2       	ldi	r24, 0x2B	; 43
    2dca:	27 fd       	sbrc	r18, 7
    2dcc:	8d e2       	ldi	r24, 0x2D	; 45
    2dce:	b7 01       	movw	r22, r14
    2dd0:	90 e0       	ldi	r25, 0x00	; 0
    2dd2:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2dd6:	c1 16       	cp	r12, r17
    2dd8:	38 f4       	brcc	.+14     	; 0x2de8 <vfprintf+0x6b8>
    2dda:	b7 01       	movw	r22, r14
    2ddc:	80 e3       	ldi	r24, 0x30	; 48
    2dde:	90 e0       	ldi	r25, 0x00	; 0
    2de0:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2de4:	11 50       	subi	r17, 0x01	; 1
    2de6:	f7 cf       	rjmp	.-18     	; 0x2dd6 <vfprintf+0x6a6>
    2de8:	ca 94       	dec	r12
    2dea:	f4 01       	movw	r30, r8
    2dec:	ec 0d       	add	r30, r12
    2dee:	f1 1d       	adc	r31, r1
    2df0:	80 81       	ld	r24, Z
    2df2:	b7 01       	movw	r22, r14
    2df4:	90 e0       	ldi	r25, 0x00	; 0
    2df6:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2dfa:	c1 10       	cpse	r12, r1
    2dfc:	f5 cf       	rjmp	.-22     	; 0x2de8 <vfprintf+0x6b8>
    2dfe:	55 20       	and	r5, r5
    2e00:	09 f4       	brne	.+2      	; 0x2e04 <vfprintf+0x6d4>
    2e02:	c2 cc       	rjmp	.-1660   	; 0x2788 <vfprintf+0x58>
    2e04:	b7 01       	movw	r22, r14
    2e06:	80 e2       	ldi	r24, 0x20	; 32
    2e08:	90 e0       	ldi	r25, 0x00	; 0
    2e0a:	0e 94 81 19 	call	0x3302	; 0x3302 <fputc>
    2e0e:	5a 94       	dec	r5
    2e10:	f6 cf       	rjmp	.-20     	; 0x2dfe <vfprintf+0x6ce>
    2e12:	f7 01       	movw	r30, r14
    2e14:	86 81       	ldd	r24, Z+6	; 0x06
    2e16:	97 81       	ldd	r25, Z+7	; 0x07
    2e18:	02 c0       	rjmp	.+4      	; 0x2e1e <vfprintf+0x6ee>
    2e1a:	8f ef       	ldi	r24, 0xFF	; 255
    2e1c:	9f ef       	ldi	r25, 0xFF	; 255
    2e1e:	63 96       	adiw	r28, 0x13	; 19
    2e20:	e2 e1       	ldi	r30, 0x12	; 18
    2e22:	0c 94 51 17 	jmp	0x2ea2	; 0x2ea2 <__epilogue_restores__>

00002e26 <__udivmodsi4>:
    2e26:	a1 e2       	ldi	r26, 0x21	; 33
    2e28:	1a 2e       	mov	r1, r26
    2e2a:	aa 1b       	sub	r26, r26
    2e2c:	bb 1b       	sub	r27, r27
    2e2e:	fd 01       	movw	r30, r26
    2e30:	0d c0       	rjmp	.+26     	; 0x2e4c <__udivmodsi4_ep>

00002e32 <__udivmodsi4_loop>:
    2e32:	aa 1f       	adc	r26, r26
    2e34:	bb 1f       	adc	r27, r27
    2e36:	ee 1f       	adc	r30, r30
    2e38:	ff 1f       	adc	r31, r31
    2e3a:	a2 17       	cp	r26, r18
    2e3c:	b3 07       	cpc	r27, r19
    2e3e:	e4 07       	cpc	r30, r20
    2e40:	f5 07       	cpc	r31, r21
    2e42:	20 f0       	brcs	.+8      	; 0x2e4c <__udivmodsi4_ep>
    2e44:	a2 1b       	sub	r26, r18
    2e46:	b3 0b       	sbc	r27, r19
    2e48:	e4 0b       	sbc	r30, r20
    2e4a:	f5 0b       	sbc	r31, r21

00002e4c <__udivmodsi4_ep>:
    2e4c:	66 1f       	adc	r22, r22
    2e4e:	77 1f       	adc	r23, r23
    2e50:	88 1f       	adc	r24, r24
    2e52:	99 1f       	adc	r25, r25
    2e54:	1a 94       	dec	r1
    2e56:	69 f7       	brne	.-38     	; 0x2e32 <__udivmodsi4_loop>
    2e58:	60 95       	com	r22
    2e5a:	70 95       	com	r23
    2e5c:	80 95       	com	r24
    2e5e:	90 95       	com	r25
    2e60:	9b 01       	movw	r18, r22
    2e62:	ac 01       	movw	r20, r24
    2e64:	bd 01       	movw	r22, r26
    2e66:	cf 01       	movw	r24, r30
    2e68:	08 95       	ret

00002e6a <__prologue_saves__>:
    2e6a:	2f 92       	push	r2
    2e6c:	3f 92       	push	r3
    2e6e:	4f 92       	push	r4
    2e70:	5f 92       	push	r5
    2e72:	6f 92       	push	r6
    2e74:	7f 92       	push	r7
    2e76:	8f 92       	push	r8
    2e78:	9f 92       	push	r9
    2e7a:	af 92       	push	r10
    2e7c:	bf 92       	push	r11
    2e7e:	cf 92       	push	r12
    2e80:	df 92       	push	r13
    2e82:	ef 92       	push	r14
    2e84:	ff 92       	push	r15
    2e86:	0f 93       	push	r16
    2e88:	1f 93       	push	r17
    2e8a:	cf 93       	push	r28
    2e8c:	df 93       	push	r29
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
    2e92:	ca 1b       	sub	r28, r26
    2e94:	db 0b       	sbc	r29, r27
    2e96:	0f b6       	in	r0, 0x3f	; 63
    2e98:	f8 94       	cli
    2e9a:	de bf       	out	0x3e, r29	; 62
    2e9c:	0f be       	out	0x3f, r0	; 63
    2e9e:	cd bf       	out	0x3d, r28	; 61
    2ea0:	09 94       	ijmp

00002ea2 <__epilogue_restores__>:
    2ea2:	2a 88       	ldd	r2, Y+18	; 0x12
    2ea4:	39 88       	ldd	r3, Y+17	; 0x11
    2ea6:	48 88       	ldd	r4, Y+16	; 0x10
    2ea8:	5f 84       	ldd	r5, Y+15	; 0x0f
    2eaa:	6e 84       	ldd	r6, Y+14	; 0x0e
    2eac:	7d 84       	ldd	r7, Y+13	; 0x0d
    2eae:	8c 84       	ldd	r8, Y+12	; 0x0c
    2eb0:	9b 84       	ldd	r9, Y+11	; 0x0b
    2eb2:	aa 84       	ldd	r10, Y+10	; 0x0a
    2eb4:	b9 84       	ldd	r11, Y+9	; 0x09
    2eb6:	c8 84       	ldd	r12, Y+8	; 0x08
    2eb8:	df 80       	ldd	r13, Y+7	; 0x07
    2eba:	ee 80       	ldd	r14, Y+6	; 0x06
    2ebc:	fd 80       	ldd	r15, Y+5	; 0x05
    2ebe:	0c 81       	ldd	r16, Y+4	; 0x04
    2ec0:	1b 81       	ldd	r17, Y+3	; 0x03
    2ec2:	aa 81       	ldd	r26, Y+2	; 0x02
    2ec4:	b9 81       	ldd	r27, Y+1	; 0x01
    2ec6:	ce 0f       	add	r28, r30
    2ec8:	d1 1d       	adc	r29, r1
    2eca:	0f b6       	in	r0, 0x3f	; 63
    2ecc:	f8 94       	cli
    2ece:	de bf       	out	0x3e, r29	; 62
    2ed0:	0f be       	out	0x3f, r0	; 63
    2ed2:	cd bf       	out	0x3d, r28	; 61
    2ed4:	ed 01       	movw	r28, r26
    2ed6:	08 95       	ret

00002ed8 <malloc>:
    2ed8:	cf 93       	push	r28
    2eda:	df 93       	push	r29
    2edc:	82 30       	cpi	r24, 0x02	; 2
    2ede:	91 05       	cpc	r25, r1
    2ee0:	10 f4       	brcc	.+4      	; 0x2ee6 <malloc+0xe>
    2ee2:	82 e0       	ldi	r24, 0x02	; 2
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	e0 91 20 0a 	lds	r30, 0x0A20
    2eea:	f0 91 21 0a 	lds	r31, 0x0A21
    2eee:	20 e0       	ldi	r18, 0x00	; 0
    2ef0:	30 e0       	ldi	r19, 0x00	; 0
    2ef2:	a0 e0       	ldi	r26, 0x00	; 0
    2ef4:	b0 e0       	ldi	r27, 0x00	; 0
    2ef6:	30 97       	sbiw	r30, 0x00	; 0
    2ef8:	39 f1       	breq	.+78     	; 0x2f48 <malloc+0x70>
    2efa:	40 81       	ld	r20, Z
    2efc:	51 81       	ldd	r21, Z+1	; 0x01
    2efe:	48 17       	cp	r20, r24
    2f00:	59 07       	cpc	r21, r25
    2f02:	b8 f0       	brcs	.+46     	; 0x2f32 <malloc+0x5a>
    2f04:	48 17       	cp	r20, r24
    2f06:	59 07       	cpc	r21, r25
    2f08:	71 f4       	brne	.+28     	; 0x2f26 <malloc+0x4e>
    2f0a:	82 81       	ldd	r24, Z+2	; 0x02
    2f0c:	93 81       	ldd	r25, Z+3	; 0x03
    2f0e:	10 97       	sbiw	r26, 0x00	; 0
    2f10:	29 f0       	breq	.+10     	; 0x2f1c <malloc+0x44>
    2f12:	13 96       	adiw	r26, 0x03	; 3
    2f14:	9c 93       	st	X, r25
    2f16:	8e 93       	st	-X, r24
    2f18:	12 97       	sbiw	r26, 0x02	; 2
    2f1a:	2c c0       	rjmp	.+88     	; 0x2f74 <malloc+0x9c>
    2f1c:	90 93 21 0a 	sts	0x0A21, r25
    2f20:	80 93 20 0a 	sts	0x0A20, r24
    2f24:	27 c0       	rjmp	.+78     	; 0x2f74 <malloc+0x9c>
    2f26:	21 15       	cp	r18, r1
    2f28:	31 05       	cpc	r19, r1
    2f2a:	31 f0       	breq	.+12     	; 0x2f38 <malloc+0x60>
    2f2c:	42 17       	cp	r20, r18
    2f2e:	53 07       	cpc	r21, r19
    2f30:	18 f0       	brcs	.+6      	; 0x2f38 <malloc+0x60>
    2f32:	a9 01       	movw	r20, r18
    2f34:	db 01       	movw	r26, r22
    2f36:	01 c0       	rjmp	.+2      	; 0x2f3a <malloc+0x62>
    2f38:	ef 01       	movw	r28, r30
    2f3a:	9a 01       	movw	r18, r20
    2f3c:	bd 01       	movw	r22, r26
    2f3e:	df 01       	movw	r26, r30
    2f40:	02 80       	ldd	r0, Z+2	; 0x02
    2f42:	f3 81       	ldd	r31, Z+3	; 0x03
    2f44:	e0 2d       	mov	r30, r0
    2f46:	d7 cf       	rjmp	.-82     	; 0x2ef6 <malloc+0x1e>
    2f48:	21 15       	cp	r18, r1
    2f4a:	31 05       	cpc	r19, r1
    2f4c:	f9 f0       	breq	.+62     	; 0x2f8c <malloc+0xb4>
    2f4e:	28 1b       	sub	r18, r24
    2f50:	39 0b       	sbc	r19, r25
    2f52:	24 30       	cpi	r18, 0x04	; 4
    2f54:	31 05       	cpc	r19, r1
    2f56:	80 f4       	brcc	.+32     	; 0x2f78 <malloc+0xa0>
    2f58:	8a 81       	ldd	r24, Y+2	; 0x02
    2f5a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f5c:	61 15       	cp	r22, r1
    2f5e:	71 05       	cpc	r23, r1
    2f60:	21 f0       	breq	.+8      	; 0x2f6a <malloc+0x92>
    2f62:	fb 01       	movw	r30, r22
    2f64:	93 83       	std	Z+3, r25	; 0x03
    2f66:	82 83       	std	Z+2, r24	; 0x02
    2f68:	04 c0       	rjmp	.+8      	; 0x2f72 <malloc+0x9a>
    2f6a:	90 93 21 0a 	sts	0x0A21, r25
    2f6e:	80 93 20 0a 	sts	0x0A20, r24
    2f72:	fe 01       	movw	r30, r28
    2f74:	32 96       	adiw	r30, 0x02	; 2
    2f76:	44 c0       	rjmp	.+136    	; 0x3000 <malloc+0x128>
    2f78:	fe 01       	movw	r30, r28
    2f7a:	e2 0f       	add	r30, r18
    2f7c:	f3 1f       	adc	r31, r19
    2f7e:	81 93       	st	Z+, r24
    2f80:	91 93       	st	Z+, r25
    2f82:	22 50       	subi	r18, 0x02	; 2
    2f84:	31 09       	sbc	r19, r1
    2f86:	39 83       	std	Y+1, r19	; 0x01
    2f88:	28 83       	st	Y, r18
    2f8a:	3a c0       	rjmp	.+116    	; 0x3000 <malloc+0x128>
    2f8c:	20 91 1e 0a 	lds	r18, 0x0A1E
    2f90:	30 91 1f 0a 	lds	r19, 0x0A1F
    2f94:	23 2b       	or	r18, r19
    2f96:	41 f4       	brne	.+16     	; 0x2fa8 <malloc+0xd0>
    2f98:	20 91 02 02 	lds	r18, 0x0202
    2f9c:	30 91 03 02 	lds	r19, 0x0203
    2fa0:	30 93 1f 0a 	sts	0x0A1F, r19
    2fa4:	20 93 1e 0a 	sts	0x0A1E, r18
    2fa8:	20 91 00 02 	lds	r18, 0x0200
    2fac:	30 91 01 02 	lds	r19, 0x0201
    2fb0:	21 15       	cp	r18, r1
    2fb2:	31 05       	cpc	r19, r1
    2fb4:	41 f4       	brne	.+16     	; 0x2fc6 <malloc+0xee>
    2fb6:	2d b7       	in	r18, 0x3d	; 61
    2fb8:	3e b7       	in	r19, 0x3e	; 62
    2fba:	40 91 04 02 	lds	r20, 0x0204
    2fbe:	50 91 05 02 	lds	r21, 0x0205
    2fc2:	24 1b       	sub	r18, r20
    2fc4:	35 0b       	sbc	r19, r21
    2fc6:	e0 91 1e 0a 	lds	r30, 0x0A1E
    2fca:	f0 91 1f 0a 	lds	r31, 0x0A1F
    2fce:	e2 17       	cp	r30, r18
    2fd0:	f3 07       	cpc	r31, r19
    2fd2:	a0 f4       	brcc	.+40     	; 0x2ffc <malloc+0x124>
    2fd4:	2e 1b       	sub	r18, r30
    2fd6:	3f 0b       	sbc	r19, r31
    2fd8:	28 17       	cp	r18, r24
    2fda:	39 07       	cpc	r19, r25
    2fdc:	78 f0       	brcs	.+30     	; 0x2ffc <malloc+0x124>
    2fde:	ac 01       	movw	r20, r24
    2fe0:	4e 5f       	subi	r20, 0xFE	; 254
    2fe2:	5f 4f       	sbci	r21, 0xFF	; 255
    2fe4:	24 17       	cp	r18, r20
    2fe6:	35 07       	cpc	r19, r21
    2fe8:	48 f0       	brcs	.+18     	; 0x2ffc <malloc+0x124>
    2fea:	4e 0f       	add	r20, r30
    2fec:	5f 1f       	adc	r21, r31
    2fee:	50 93 1f 0a 	sts	0x0A1F, r21
    2ff2:	40 93 1e 0a 	sts	0x0A1E, r20
    2ff6:	81 93       	st	Z+, r24
    2ff8:	91 93       	st	Z+, r25
    2ffa:	02 c0       	rjmp	.+4      	; 0x3000 <malloc+0x128>
    2ffc:	e0 e0       	ldi	r30, 0x00	; 0
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	cf 01       	movw	r24, r30
    3002:	df 91       	pop	r29
    3004:	cf 91       	pop	r28
    3006:	08 95       	ret

00003008 <free>:
    3008:	cf 93       	push	r28
    300a:	df 93       	push	r29
    300c:	00 97       	sbiw	r24, 0x00	; 0
    300e:	09 f4       	brne	.+2      	; 0x3012 <free+0xa>
    3010:	87 c0       	rjmp	.+270    	; 0x3120 <free+0x118>
    3012:	fc 01       	movw	r30, r24
    3014:	32 97       	sbiw	r30, 0x02	; 2
    3016:	13 82       	std	Z+3, r1	; 0x03
    3018:	12 82       	std	Z+2, r1	; 0x02
    301a:	c0 91 20 0a 	lds	r28, 0x0A20
    301e:	d0 91 21 0a 	lds	r29, 0x0A21
    3022:	20 97       	sbiw	r28, 0x00	; 0
    3024:	81 f4       	brne	.+32     	; 0x3046 <free+0x3e>
    3026:	20 81       	ld	r18, Z
    3028:	31 81       	ldd	r19, Z+1	; 0x01
    302a:	28 0f       	add	r18, r24
    302c:	39 1f       	adc	r19, r25
    302e:	80 91 1e 0a 	lds	r24, 0x0A1E
    3032:	90 91 1f 0a 	lds	r25, 0x0A1F
    3036:	82 17       	cp	r24, r18
    3038:	93 07       	cpc	r25, r19
    303a:	79 f5       	brne	.+94     	; 0x309a <free+0x92>
    303c:	f0 93 1f 0a 	sts	0x0A1F, r31
    3040:	e0 93 1e 0a 	sts	0x0A1E, r30
    3044:	6d c0       	rjmp	.+218    	; 0x3120 <free+0x118>
    3046:	de 01       	movw	r26, r28
    3048:	20 e0       	ldi	r18, 0x00	; 0
    304a:	30 e0       	ldi	r19, 0x00	; 0
    304c:	ae 17       	cp	r26, r30
    304e:	bf 07       	cpc	r27, r31
    3050:	50 f4       	brcc	.+20     	; 0x3066 <free+0x5e>
    3052:	12 96       	adiw	r26, 0x02	; 2
    3054:	4d 91       	ld	r20, X+
    3056:	5c 91       	ld	r21, X
    3058:	13 97       	sbiw	r26, 0x03	; 3
    305a:	9d 01       	movw	r18, r26
    305c:	41 15       	cp	r20, r1
    305e:	51 05       	cpc	r21, r1
    3060:	09 f1       	breq	.+66     	; 0x30a4 <free+0x9c>
    3062:	da 01       	movw	r26, r20
    3064:	f3 cf       	rjmp	.-26     	; 0x304c <free+0x44>
    3066:	b3 83       	std	Z+3, r27	; 0x03
    3068:	a2 83       	std	Z+2, r26	; 0x02
    306a:	40 81       	ld	r20, Z
    306c:	51 81       	ldd	r21, Z+1	; 0x01
    306e:	84 0f       	add	r24, r20
    3070:	95 1f       	adc	r25, r21
    3072:	8a 17       	cp	r24, r26
    3074:	9b 07       	cpc	r25, r27
    3076:	71 f4       	brne	.+28     	; 0x3094 <free+0x8c>
    3078:	8d 91       	ld	r24, X+
    307a:	9c 91       	ld	r25, X
    307c:	11 97       	sbiw	r26, 0x01	; 1
    307e:	84 0f       	add	r24, r20
    3080:	95 1f       	adc	r25, r21
    3082:	02 96       	adiw	r24, 0x02	; 2
    3084:	91 83       	std	Z+1, r25	; 0x01
    3086:	80 83       	st	Z, r24
    3088:	12 96       	adiw	r26, 0x02	; 2
    308a:	8d 91       	ld	r24, X+
    308c:	9c 91       	ld	r25, X
    308e:	13 97       	sbiw	r26, 0x03	; 3
    3090:	93 83       	std	Z+3, r25	; 0x03
    3092:	82 83       	std	Z+2, r24	; 0x02
    3094:	21 15       	cp	r18, r1
    3096:	31 05       	cpc	r19, r1
    3098:	29 f4       	brne	.+10     	; 0x30a4 <free+0x9c>
    309a:	f0 93 21 0a 	sts	0x0A21, r31
    309e:	e0 93 20 0a 	sts	0x0A20, r30
    30a2:	3e c0       	rjmp	.+124    	; 0x3120 <free+0x118>
    30a4:	d9 01       	movw	r26, r18
    30a6:	13 96       	adiw	r26, 0x03	; 3
    30a8:	fc 93       	st	X, r31
    30aa:	ee 93       	st	-X, r30
    30ac:	12 97       	sbiw	r26, 0x02	; 2
    30ae:	4d 91       	ld	r20, X+
    30b0:	5d 91       	ld	r21, X+
    30b2:	a4 0f       	add	r26, r20
    30b4:	b5 1f       	adc	r27, r21
    30b6:	ea 17       	cp	r30, r26
    30b8:	fb 07       	cpc	r31, r27
    30ba:	79 f4       	brne	.+30     	; 0x30da <free+0xd2>
    30bc:	80 81       	ld	r24, Z
    30be:	91 81       	ldd	r25, Z+1	; 0x01
    30c0:	84 0f       	add	r24, r20
    30c2:	95 1f       	adc	r25, r21
    30c4:	02 96       	adiw	r24, 0x02	; 2
    30c6:	d9 01       	movw	r26, r18
    30c8:	11 96       	adiw	r26, 0x01	; 1
    30ca:	9c 93       	st	X, r25
    30cc:	8e 93       	st	-X, r24
    30ce:	82 81       	ldd	r24, Z+2	; 0x02
    30d0:	93 81       	ldd	r25, Z+3	; 0x03
    30d2:	13 96       	adiw	r26, 0x03	; 3
    30d4:	9c 93       	st	X, r25
    30d6:	8e 93       	st	-X, r24
    30d8:	12 97       	sbiw	r26, 0x02	; 2
    30da:	e0 e0       	ldi	r30, 0x00	; 0
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
    30de:	8a 81       	ldd	r24, Y+2	; 0x02
    30e0:	9b 81       	ldd	r25, Y+3	; 0x03
    30e2:	00 97       	sbiw	r24, 0x00	; 0
    30e4:	19 f0       	breq	.+6      	; 0x30ec <free+0xe4>
    30e6:	fe 01       	movw	r30, r28
    30e8:	ec 01       	movw	r28, r24
    30ea:	f9 cf       	rjmp	.-14     	; 0x30de <free+0xd6>
    30ec:	ce 01       	movw	r24, r28
    30ee:	02 96       	adiw	r24, 0x02	; 2
    30f0:	28 81       	ld	r18, Y
    30f2:	39 81       	ldd	r19, Y+1	; 0x01
    30f4:	82 0f       	add	r24, r18
    30f6:	93 1f       	adc	r25, r19
    30f8:	20 91 1e 0a 	lds	r18, 0x0A1E
    30fc:	30 91 1f 0a 	lds	r19, 0x0A1F
    3100:	28 17       	cp	r18, r24
    3102:	39 07       	cpc	r19, r25
    3104:	69 f4       	brne	.+26     	; 0x3120 <free+0x118>
    3106:	30 97       	sbiw	r30, 0x00	; 0
    3108:	29 f4       	brne	.+10     	; 0x3114 <free+0x10c>
    310a:	10 92 21 0a 	sts	0x0A21, r1
    310e:	10 92 20 0a 	sts	0x0A20, r1
    3112:	02 c0       	rjmp	.+4      	; 0x3118 <free+0x110>
    3114:	13 82       	std	Z+3, r1	; 0x03
    3116:	12 82       	std	Z+2, r1	; 0x02
    3118:	d0 93 1f 0a 	sts	0x0A1F, r29
    311c:	c0 93 1e 0a 	sts	0x0A1E, r28
    3120:	df 91       	pop	r29
    3122:	cf 91       	pop	r28
    3124:	08 95       	ret

00003126 <__ftoa_engine>:
    3126:	28 30       	cpi	r18, 0x08	; 8
    3128:	08 f0       	brcs	.+2      	; 0x312c <__ftoa_engine+0x6>
    312a:	27 e0       	ldi	r18, 0x07	; 7
    312c:	33 27       	eor	r19, r19
    312e:	da 01       	movw	r26, r20
    3130:	99 0f       	add	r25, r25
    3132:	31 1d       	adc	r19, r1
    3134:	87 fd       	sbrc	r24, 7
    3136:	91 60       	ori	r25, 0x01	; 1
    3138:	00 96       	adiw	r24, 0x00	; 0
    313a:	61 05       	cpc	r22, r1
    313c:	71 05       	cpc	r23, r1
    313e:	39 f4       	brne	.+14     	; 0x314e <__ftoa_engine+0x28>
    3140:	32 60       	ori	r19, 0x02	; 2
    3142:	2e 5f       	subi	r18, 0xFE	; 254
    3144:	3d 93       	st	X+, r19
    3146:	30 e3       	ldi	r19, 0x30	; 48
    3148:	2a 95       	dec	r18
    314a:	e1 f7       	brne	.-8      	; 0x3144 <__ftoa_engine+0x1e>
    314c:	08 95       	ret
    314e:	9f 3f       	cpi	r25, 0xFF	; 255
    3150:	30 f0       	brcs	.+12     	; 0x315e <__ftoa_engine+0x38>
    3152:	80 38       	cpi	r24, 0x80	; 128
    3154:	71 05       	cpc	r23, r1
    3156:	61 05       	cpc	r22, r1
    3158:	09 f0       	breq	.+2      	; 0x315c <__ftoa_engine+0x36>
    315a:	3c 5f       	subi	r19, 0xFC	; 252
    315c:	3c 5f       	subi	r19, 0xFC	; 252
    315e:	3d 93       	st	X+, r19
    3160:	91 30       	cpi	r25, 0x01	; 1
    3162:	08 f0       	brcs	.+2      	; 0x3166 <__ftoa_engine+0x40>
    3164:	80 68       	ori	r24, 0x80	; 128
    3166:	91 1d       	adc	r25, r1
    3168:	df 93       	push	r29
    316a:	cf 93       	push	r28
    316c:	1f 93       	push	r17
    316e:	0f 93       	push	r16
    3170:	ff 92       	push	r15
    3172:	ef 92       	push	r14
    3174:	19 2f       	mov	r17, r25
    3176:	98 7f       	andi	r25, 0xF8	; 248
    3178:	96 95       	lsr	r25
    317a:	e9 2f       	mov	r30, r25
    317c:	96 95       	lsr	r25
    317e:	96 95       	lsr	r25
    3180:	e9 0f       	add	r30, r25
    3182:	ff 27       	eor	r31, r31
    3184:	ea 56       	subi	r30, 0x6A	; 106
    3186:	fe 4f       	sbci	r31, 0xFE	; 254
    3188:	99 27       	eor	r25, r25
    318a:	33 27       	eor	r19, r19
    318c:	ee 24       	eor	r14, r14
    318e:	ff 24       	eor	r15, r15
    3190:	a7 01       	movw	r20, r14
    3192:	e7 01       	movw	r28, r14
    3194:	05 90       	lpm	r0, Z+
    3196:	08 94       	sec
    3198:	07 94       	ror	r0
    319a:	28 f4       	brcc	.+10     	; 0x31a6 <__ftoa_engine+0x80>
    319c:	36 0f       	add	r19, r22
    319e:	e7 1e       	adc	r14, r23
    31a0:	f8 1e       	adc	r15, r24
    31a2:	49 1f       	adc	r20, r25
    31a4:	51 1d       	adc	r21, r1
    31a6:	66 0f       	add	r22, r22
    31a8:	77 1f       	adc	r23, r23
    31aa:	88 1f       	adc	r24, r24
    31ac:	99 1f       	adc	r25, r25
    31ae:	06 94       	lsr	r0
    31b0:	a1 f7       	brne	.-24     	; 0x319a <__ftoa_engine+0x74>
    31b2:	05 90       	lpm	r0, Z+
    31b4:	07 94       	ror	r0
    31b6:	28 f4       	brcc	.+10     	; 0x31c2 <__ftoa_engine+0x9c>
    31b8:	e7 0e       	add	r14, r23
    31ba:	f8 1e       	adc	r15, r24
    31bc:	49 1f       	adc	r20, r25
    31be:	56 1f       	adc	r21, r22
    31c0:	c1 1d       	adc	r28, r1
    31c2:	77 0f       	add	r23, r23
    31c4:	88 1f       	adc	r24, r24
    31c6:	99 1f       	adc	r25, r25
    31c8:	66 1f       	adc	r22, r22
    31ca:	06 94       	lsr	r0
    31cc:	a1 f7       	brne	.-24     	; 0x31b6 <__ftoa_engine+0x90>
    31ce:	05 90       	lpm	r0, Z+
    31d0:	07 94       	ror	r0
    31d2:	28 f4       	brcc	.+10     	; 0x31de <__ftoa_engine+0xb8>
    31d4:	f8 0e       	add	r15, r24
    31d6:	49 1f       	adc	r20, r25
    31d8:	56 1f       	adc	r21, r22
    31da:	c7 1f       	adc	r28, r23
    31dc:	d1 1d       	adc	r29, r1
    31de:	88 0f       	add	r24, r24
    31e0:	99 1f       	adc	r25, r25
    31e2:	66 1f       	adc	r22, r22
    31e4:	77 1f       	adc	r23, r23
    31e6:	06 94       	lsr	r0
    31e8:	a1 f7       	brne	.-24     	; 0x31d2 <__ftoa_engine+0xac>
    31ea:	05 90       	lpm	r0, Z+
    31ec:	07 94       	ror	r0
    31ee:	20 f4       	brcc	.+8      	; 0x31f8 <__ftoa_engine+0xd2>
    31f0:	49 0f       	add	r20, r25
    31f2:	56 1f       	adc	r21, r22
    31f4:	c7 1f       	adc	r28, r23
    31f6:	d8 1f       	adc	r29, r24
    31f8:	99 0f       	add	r25, r25
    31fa:	66 1f       	adc	r22, r22
    31fc:	77 1f       	adc	r23, r23
    31fe:	88 1f       	adc	r24, r24
    3200:	06 94       	lsr	r0
    3202:	a9 f7       	brne	.-22     	; 0x31ee <__ftoa_engine+0xc8>
    3204:	84 91       	lpm	r24, Z
    3206:	10 95       	com	r17
    3208:	17 70       	andi	r17, 0x07	; 7
    320a:	41 f0       	breq	.+16     	; 0x321c <__ftoa_engine+0xf6>
    320c:	d6 95       	lsr	r29
    320e:	c7 95       	ror	r28
    3210:	57 95       	ror	r21
    3212:	47 95       	ror	r20
    3214:	f7 94       	ror	r15
    3216:	e7 94       	ror	r14
    3218:	1a 95       	dec	r17
    321a:	c1 f7       	brne	.-16     	; 0x320c <__ftoa_engine+0xe6>
    321c:	ec e3       	ldi	r30, 0x3C	; 60
    321e:	f1 e0       	ldi	r31, 0x01	; 1
    3220:	68 94       	set
    3222:	15 90       	lpm	r1, Z+
    3224:	15 91       	lpm	r17, Z+
    3226:	35 91       	lpm	r19, Z+
    3228:	65 91       	lpm	r22, Z+
    322a:	95 91       	lpm	r25, Z+
    322c:	05 90       	lpm	r0, Z+
    322e:	7f e2       	ldi	r23, 0x2F	; 47
    3230:	73 95       	inc	r23
    3232:	e1 18       	sub	r14, r1
    3234:	f1 0a       	sbc	r15, r17
    3236:	43 0b       	sbc	r20, r19
    3238:	56 0b       	sbc	r21, r22
    323a:	c9 0b       	sbc	r28, r25
    323c:	d0 09       	sbc	r29, r0
    323e:	c0 f7       	brcc	.-16     	; 0x3230 <__ftoa_engine+0x10a>
    3240:	e1 0c       	add	r14, r1
    3242:	f1 1e       	adc	r15, r17
    3244:	43 1f       	adc	r20, r19
    3246:	56 1f       	adc	r21, r22
    3248:	c9 1f       	adc	r28, r25
    324a:	d0 1d       	adc	r29, r0
    324c:	7e f4       	brtc	.+30     	; 0x326c <__ftoa_engine+0x146>
    324e:	70 33       	cpi	r23, 0x30	; 48
    3250:	11 f4       	brne	.+4      	; 0x3256 <__ftoa_engine+0x130>
    3252:	8a 95       	dec	r24
    3254:	e6 cf       	rjmp	.-52     	; 0x3222 <__ftoa_engine+0xfc>
    3256:	e8 94       	clt
    3258:	01 50       	subi	r16, 0x01	; 1
    325a:	30 f0       	brcs	.+12     	; 0x3268 <__ftoa_engine+0x142>
    325c:	08 0f       	add	r16, r24
    325e:	0a f4       	brpl	.+2      	; 0x3262 <__ftoa_engine+0x13c>
    3260:	00 27       	eor	r16, r16
    3262:	02 17       	cp	r16, r18
    3264:	08 f4       	brcc	.+2      	; 0x3268 <__ftoa_engine+0x142>
    3266:	20 2f       	mov	r18, r16
    3268:	23 95       	inc	r18
    326a:	02 2f       	mov	r16, r18
    326c:	7a 33       	cpi	r23, 0x3A	; 58
    326e:	28 f0       	brcs	.+10     	; 0x327a <__ftoa_engine+0x154>
    3270:	79 e3       	ldi	r23, 0x39	; 57
    3272:	7d 93       	st	X+, r23
    3274:	2a 95       	dec	r18
    3276:	e9 f7       	brne	.-6      	; 0x3272 <__ftoa_engine+0x14c>
    3278:	10 c0       	rjmp	.+32     	; 0x329a <__ftoa_engine+0x174>
    327a:	7d 93       	st	X+, r23
    327c:	2a 95       	dec	r18
    327e:	89 f6       	brne	.-94     	; 0x3222 <__ftoa_engine+0xfc>
    3280:	06 94       	lsr	r0
    3282:	97 95       	ror	r25
    3284:	67 95       	ror	r22
    3286:	37 95       	ror	r19
    3288:	17 95       	ror	r17
    328a:	17 94       	ror	r1
    328c:	e1 18       	sub	r14, r1
    328e:	f1 0a       	sbc	r15, r17
    3290:	43 0b       	sbc	r20, r19
    3292:	56 0b       	sbc	r21, r22
    3294:	c9 0b       	sbc	r28, r25
    3296:	d0 09       	sbc	r29, r0
    3298:	98 f0       	brcs	.+38     	; 0x32c0 <__ftoa_engine+0x19a>
    329a:	23 95       	inc	r18
    329c:	7e 91       	ld	r23, -X
    329e:	73 95       	inc	r23
    32a0:	7a 33       	cpi	r23, 0x3A	; 58
    32a2:	08 f0       	brcs	.+2      	; 0x32a6 <__ftoa_engine+0x180>
    32a4:	70 e3       	ldi	r23, 0x30	; 48
    32a6:	7c 93       	st	X, r23
    32a8:	20 13       	cpse	r18, r16
    32aa:	b8 f7       	brcc	.-18     	; 0x329a <__ftoa_engine+0x174>
    32ac:	7e 91       	ld	r23, -X
    32ae:	70 61       	ori	r23, 0x10	; 16
    32b0:	7d 93       	st	X+, r23
    32b2:	30 f0       	brcs	.+12     	; 0x32c0 <__ftoa_engine+0x19a>
    32b4:	83 95       	inc	r24
    32b6:	71 e3       	ldi	r23, 0x31	; 49
    32b8:	7d 93       	st	X+, r23
    32ba:	70 e3       	ldi	r23, 0x30	; 48
    32bc:	2a 95       	dec	r18
    32be:	e1 f7       	brne	.-8      	; 0x32b8 <__ftoa_engine+0x192>
    32c0:	11 24       	eor	r1, r1
    32c2:	ef 90       	pop	r14
    32c4:	ff 90       	pop	r15
    32c6:	0f 91       	pop	r16
    32c8:	1f 91       	pop	r17
    32ca:	cf 91       	pop	r28
    32cc:	df 91       	pop	r29
    32ce:	99 27       	eor	r25, r25
    32d0:	87 fd       	sbrc	r24, 7
    32d2:	90 95       	com	r25
    32d4:	08 95       	ret

000032d6 <strnlen_P>:
    32d6:	fc 01       	movw	r30, r24
    32d8:	05 90       	lpm	r0, Z+
    32da:	61 50       	subi	r22, 0x01	; 1
    32dc:	70 40       	sbci	r23, 0x00	; 0
    32de:	01 10       	cpse	r0, r1
    32e0:	d8 f7       	brcc	.-10     	; 0x32d8 <strnlen_P+0x2>
    32e2:	80 95       	com	r24
    32e4:	90 95       	com	r25
    32e6:	8e 0f       	add	r24, r30
    32e8:	9f 1f       	adc	r25, r31
    32ea:	08 95       	ret

000032ec <strnlen>:
    32ec:	fc 01       	movw	r30, r24
    32ee:	61 50       	subi	r22, 0x01	; 1
    32f0:	70 40       	sbci	r23, 0x00	; 0
    32f2:	01 90       	ld	r0, Z+
    32f4:	01 10       	cpse	r0, r1
    32f6:	d8 f7       	brcc	.-10     	; 0x32ee <strnlen+0x2>
    32f8:	80 95       	com	r24
    32fa:	90 95       	com	r25
    32fc:	8e 0f       	add	r24, r30
    32fe:	9f 1f       	adc	r25, r31
    3300:	08 95       	ret

00003302 <fputc>:
    3302:	0f 93       	push	r16
    3304:	1f 93       	push	r17
    3306:	cf 93       	push	r28
    3308:	df 93       	push	r29
    330a:	18 2f       	mov	r17, r24
    330c:	09 2f       	mov	r16, r25
    330e:	eb 01       	movw	r28, r22
    3310:	8b 81       	ldd	r24, Y+3	; 0x03
    3312:	81 fd       	sbrc	r24, 1
    3314:	03 c0       	rjmp	.+6      	; 0x331c <fputc+0x1a>
    3316:	8f ef       	ldi	r24, 0xFF	; 255
    3318:	9f ef       	ldi	r25, 0xFF	; 255
    331a:	20 c0       	rjmp	.+64     	; 0x335c <fputc+0x5a>
    331c:	82 ff       	sbrs	r24, 2
    331e:	10 c0       	rjmp	.+32     	; 0x3340 <fputc+0x3e>
    3320:	4e 81       	ldd	r20, Y+6	; 0x06
    3322:	5f 81       	ldd	r21, Y+7	; 0x07
    3324:	2c 81       	ldd	r18, Y+4	; 0x04
    3326:	3d 81       	ldd	r19, Y+5	; 0x05
    3328:	42 17       	cp	r20, r18
    332a:	53 07       	cpc	r21, r19
    332c:	7c f4       	brge	.+30     	; 0x334c <fputc+0x4a>
    332e:	e8 81       	ld	r30, Y
    3330:	f9 81       	ldd	r31, Y+1	; 0x01
    3332:	9f 01       	movw	r18, r30
    3334:	2f 5f       	subi	r18, 0xFF	; 255
    3336:	3f 4f       	sbci	r19, 0xFF	; 255
    3338:	39 83       	std	Y+1, r19	; 0x01
    333a:	28 83       	st	Y, r18
    333c:	10 83       	st	Z, r17
    333e:	06 c0       	rjmp	.+12     	; 0x334c <fputc+0x4a>
    3340:	e8 85       	ldd	r30, Y+8	; 0x08
    3342:	f9 85       	ldd	r31, Y+9	; 0x09
    3344:	81 2f       	mov	r24, r17
    3346:	09 95       	icall
    3348:	89 2b       	or	r24, r25
    334a:	29 f7       	brne	.-54     	; 0x3316 <fputc+0x14>
    334c:	2e 81       	ldd	r18, Y+6	; 0x06
    334e:	3f 81       	ldd	r19, Y+7	; 0x07
    3350:	2f 5f       	subi	r18, 0xFF	; 255
    3352:	3f 4f       	sbci	r19, 0xFF	; 255
    3354:	3f 83       	std	Y+7, r19	; 0x07
    3356:	2e 83       	std	Y+6, r18	; 0x06
    3358:	81 2f       	mov	r24, r17
    335a:	90 2f       	mov	r25, r16
    335c:	df 91       	pop	r29
    335e:	cf 91       	pop	r28
    3360:	1f 91       	pop	r17
    3362:	0f 91       	pop	r16
    3364:	08 95       	ret

00003366 <printf>:
    3366:	a0 e0       	ldi	r26, 0x00	; 0
    3368:	b0 e0       	ldi	r27, 0x00	; 0
    336a:	e9 eb       	ldi	r30, 0xB9	; 185
    336c:	f9 e1       	ldi	r31, 0x19	; 25
    336e:	0c 94 45 17 	jmp	0x2e8a	; 0x2e8a <__prologue_saves__+0x20>
    3372:	fe 01       	movw	r30, r28
    3374:	35 96       	adiw	r30, 0x05	; 5
    3376:	61 91       	ld	r22, Z+
    3378:	71 91       	ld	r23, Z+
    337a:	af 01       	movw	r20, r30
    337c:	80 91 24 0a 	lds	r24, 0x0A24
    3380:	90 91 25 0a 	lds	r25, 0x0A25
    3384:	0e 94 98 13 	call	0x2730	; 0x2730 <vfprintf>
    3388:	e2 e0       	ldi	r30, 0x02	; 2
    338a:	0c 94 61 17 	jmp	0x2ec2	; 0x2ec2 <__epilogue_restores__+0x20>

0000338e <puts>:
    338e:	0f 93       	push	r16
    3390:	1f 93       	push	r17
    3392:	cf 93       	push	r28
    3394:	df 93       	push	r29
    3396:	e0 91 24 0a 	lds	r30, 0x0A24
    339a:	f0 91 25 0a 	lds	r31, 0x0A25
    339e:	23 81       	ldd	r18, Z+3	; 0x03
    33a0:	21 ff       	sbrs	r18, 1
    33a2:	1b c0       	rjmp	.+54     	; 0x33da <puts+0x4c>
    33a4:	ec 01       	movw	r28, r24
    33a6:	00 e0       	ldi	r16, 0x00	; 0
    33a8:	10 e0       	ldi	r17, 0x00	; 0
    33aa:	89 91       	ld	r24, Y+
    33ac:	60 91 24 0a 	lds	r22, 0x0A24
    33b0:	70 91 25 0a 	lds	r23, 0x0A25
    33b4:	db 01       	movw	r26, r22
    33b6:	18 96       	adiw	r26, 0x08	; 8
    33b8:	ed 91       	ld	r30, X+
    33ba:	fc 91       	ld	r31, X
    33bc:	19 97       	sbiw	r26, 0x09	; 9
    33be:	88 23       	and	r24, r24
    33c0:	31 f0       	breq	.+12     	; 0x33ce <puts+0x40>
    33c2:	09 95       	icall
    33c4:	89 2b       	or	r24, r25
    33c6:	89 f3       	breq	.-30     	; 0x33aa <puts+0x1c>
    33c8:	0f ef       	ldi	r16, 0xFF	; 255
    33ca:	1f ef       	ldi	r17, 0xFF	; 255
    33cc:	ee cf       	rjmp	.-36     	; 0x33aa <puts+0x1c>
    33ce:	8a e0       	ldi	r24, 0x0A	; 10
    33d0:	09 95       	icall
    33d2:	89 2b       	or	r24, r25
    33d4:	11 f4       	brne	.+4      	; 0x33da <puts+0x4c>
    33d6:	c8 01       	movw	r24, r16
    33d8:	02 c0       	rjmp	.+4      	; 0x33de <puts+0x50>
    33da:	8f ef       	ldi	r24, 0xFF	; 255
    33dc:	9f ef       	ldi	r25, 0xFF	; 255
    33de:	df 91       	pop	r29
    33e0:	cf 91       	pop	r28
    33e2:	1f 91       	pop	r17
    33e4:	0f 91       	pop	r16
    33e6:	08 95       	ret

000033e8 <__ultoa_invert>:
    33e8:	fa 01       	movw	r30, r20
    33ea:	aa 27       	eor	r26, r26
    33ec:	28 30       	cpi	r18, 0x08	; 8
    33ee:	51 f1       	breq	.+84     	; 0x3444 <__ultoa_invert+0x5c>
    33f0:	20 31       	cpi	r18, 0x10	; 16
    33f2:	81 f1       	breq	.+96     	; 0x3454 <__ultoa_invert+0x6c>
    33f4:	e8 94       	clt
    33f6:	6f 93       	push	r22
    33f8:	6e 7f       	andi	r22, 0xFE	; 254
    33fa:	6e 5f       	subi	r22, 0xFE	; 254
    33fc:	7f 4f       	sbci	r23, 0xFF	; 255
    33fe:	8f 4f       	sbci	r24, 0xFF	; 255
    3400:	9f 4f       	sbci	r25, 0xFF	; 255
    3402:	af 4f       	sbci	r26, 0xFF	; 255
    3404:	b1 e0       	ldi	r27, 0x01	; 1
    3406:	3e d0       	rcall	.+124    	; 0x3484 <__ultoa_invert+0x9c>
    3408:	b4 e0       	ldi	r27, 0x04	; 4
    340a:	3c d0       	rcall	.+120    	; 0x3484 <__ultoa_invert+0x9c>
    340c:	67 0f       	add	r22, r23
    340e:	78 1f       	adc	r23, r24
    3410:	89 1f       	adc	r24, r25
    3412:	9a 1f       	adc	r25, r26
    3414:	a1 1d       	adc	r26, r1
    3416:	68 0f       	add	r22, r24
    3418:	79 1f       	adc	r23, r25
    341a:	8a 1f       	adc	r24, r26
    341c:	91 1d       	adc	r25, r1
    341e:	a1 1d       	adc	r26, r1
    3420:	6a 0f       	add	r22, r26
    3422:	71 1d       	adc	r23, r1
    3424:	81 1d       	adc	r24, r1
    3426:	91 1d       	adc	r25, r1
    3428:	a1 1d       	adc	r26, r1
    342a:	20 d0       	rcall	.+64     	; 0x346c <__ultoa_invert+0x84>
    342c:	09 f4       	brne	.+2      	; 0x3430 <__ultoa_invert+0x48>
    342e:	68 94       	set
    3430:	3f 91       	pop	r19
    3432:	2a e0       	ldi	r18, 0x0A	; 10
    3434:	26 9f       	mul	r18, r22
    3436:	11 24       	eor	r1, r1
    3438:	30 19       	sub	r19, r0
    343a:	30 5d       	subi	r19, 0xD0	; 208
    343c:	31 93       	st	Z+, r19
    343e:	de f6       	brtc	.-74     	; 0x33f6 <__ultoa_invert+0xe>
    3440:	cf 01       	movw	r24, r30
    3442:	08 95       	ret
    3444:	46 2f       	mov	r20, r22
    3446:	47 70       	andi	r20, 0x07	; 7
    3448:	40 5d       	subi	r20, 0xD0	; 208
    344a:	41 93       	st	Z+, r20
    344c:	b3 e0       	ldi	r27, 0x03	; 3
    344e:	0f d0       	rcall	.+30     	; 0x346e <__ultoa_invert+0x86>
    3450:	c9 f7       	brne	.-14     	; 0x3444 <__ultoa_invert+0x5c>
    3452:	f6 cf       	rjmp	.-20     	; 0x3440 <__ultoa_invert+0x58>
    3454:	46 2f       	mov	r20, r22
    3456:	4f 70       	andi	r20, 0x0F	; 15
    3458:	40 5d       	subi	r20, 0xD0	; 208
    345a:	4a 33       	cpi	r20, 0x3A	; 58
    345c:	18 f0       	brcs	.+6      	; 0x3464 <__ultoa_invert+0x7c>
    345e:	49 5d       	subi	r20, 0xD9	; 217
    3460:	31 fd       	sbrc	r19, 1
    3462:	40 52       	subi	r20, 0x20	; 32
    3464:	41 93       	st	Z+, r20
    3466:	02 d0       	rcall	.+4      	; 0x346c <__ultoa_invert+0x84>
    3468:	a9 f7       	brne	.-22     	; 0x3454 <__ultoa_invert+0x6c>
    346a:	ea cf       	rjmp	.-44     	; 0x3440 <__ultoa_invert+0x58>
    346c:	b4 e0       	ldi	r27, 0x04	; 4
    346e:	a6 95       	lsr	r26
    3470:	97 95       	ror	r25
    3472:	87 95       	ror	r24
    3474:	77 95       	ror	r23
    3476:	67 95       	ror	r22
    3478:	ba 95       	dec	r27
    347a:	c9 f7       	brne	.-14     	; 0x346e <__ultoa_invert+0x86>
    347c:	00 97       	sbiw	r24, 0x00	; 0
    347e:	61 05       	cpc	r22, r1
    3480:	71 05       	cpc	r23, r1
    3482:	08 95       	ret
    3484:	9b 01       	movw	r18, r22
    3486:	ac 01       	movw	r20, r24
    3488:	0a 2e       	mov	r0, r26
    348a:	06 94       	lsr	r0
    348c:	57 95       	ror	r21
    348e:	47 95       	ror	r20
    3490:	37 95       	ror	r19
    3492:	27 95       	ror	r18
    3494:	ba 95       	dec	r27
    3496:	c9 f7       	brne	.-14     	; 0x348a <__ultoa_invert+0xa2>
    3498:	62 0f       	add	r22, r18
    349a:	73 1f       	adc	r23, r19
    349c:	84 1f       	adc	r24, r20
    349e:	95 1f       	adc	r25, r21
    34a0:	a0 1d       	adc	r26, r0
    34a2:	08 95       	ret

000034a4 <_exit>:
    34a4:	f8 94       	cli

000034a6 <__stop_program>:
    34a6:	ff cf       	rjmp	.-2      	; 0x34a6 <__stop_program>
