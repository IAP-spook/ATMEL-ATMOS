
ATMOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003ee  00800200  00003c72  00003d06  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003c72  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000512  008005ee  008005ee  000040f4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000040f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004150  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000890  00000000  00000000  00004190  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a8a4  00000000  00000000  00004a20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000034a4  00000000  00000000  0000f2c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000333d  00000000  00000000  00012768  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000015f0  00000000  00000000  00015aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000025e3  00000000  00000000  00017098  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005a0e  00000000  00000000  0001967b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000838  00000000  00000000  0001f089  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__ctors_end>
       4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      10:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      14:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      18:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      1c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      20:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      24:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      28:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      30:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      34:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      38:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      3c:	0c 94 38 02 	jmp	0x470	; 0x470 <__vector_15>
      40:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      44:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      48:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      4c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      50:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      54:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      58:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      5c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      60:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      64:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      68:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      6c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      70:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      74:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      78:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      7c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      80:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      84:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      88:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      8c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      90:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      94:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      98:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      9c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a8:	0c 94 f3 04 	jmp	0x9e6	; 0x9e6 <__vector_42>
      ac:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      bc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      cc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      dc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      ec:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      fc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     100:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     104:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     108:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     10c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     110:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     114:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     118:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     11c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     120:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     124:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     128:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     12c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     130:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>

00000134 <__trampolines_end>:
     134:	6e 61       	ori	r22, 0x1E	; 30
     136:	6e 00       	.word	0x006e	; ????

00000138 <__c.2177>:
     138:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     148:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     158:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     168:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     178:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     188:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     198:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     208:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     218:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     228:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000236 <__ctors_end>:
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	d1 e2       	ldi	r29, 0x21	; 33
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61

00000242 <__do_copy_data>:
     242:	15 e0       	ldi	r17, 0x05	; 5
     244:	a0 e0       	ldi	r26, 0x00	; 0
     246:	b2 e0       	ldi	r27, 0x02	; 2
     248:	e2 e7       	ldi	r30, 0x72	; 114
     24a:	fc e3       	ldi	r31, 0x3C	; 60
     24c:	02 c0       	rjmp	.+4      	; 0x252 <__do_copy_data+0x10>
     24e:	05 90       	lpm	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	ae 3e       	cpi	r26, 0xEE	; 238
     254:	b1 07       	cpc	r27, r17
     256:	d9 f7       	brne	.-10     	; 0x24e <__do_copy_data+0xc>

00000258 <__do_clear_bss>:
     258:	2b e0       	ldi	r18, 0x0B	; 11
     25a:	ae ee       	ldi	r26, 0xEE	; 238
     25c:	b5 e0       	ldi	r27, 0x05	; 5
     25e:	01 c0       	rjmp	.+2      	; 0x262 <.do_clear_bss_start>

00000260 <.do_clear_bss_loop>:
     260:	1d 92       	st	X+, r1

00000262 <.do_clear_bss_start>:
     262:	a0 30       	cpi	r26, 0x00	; 0
     264:	b2 07       	cpc	r27, r18
     266:	e1 f7       	brne	.-8      	; 0x260 <.do_clear_bss_loop>
     268:	0e 94 96 01 	call	0x32c	; 0x32c <main>
     26c:	0c 94 37 1e 	jmp	0x3c6e	; 0x3c6e <_exit>

00000270 <__bad_interrupt>:
     270:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000274 <init_parameter>:
	/* if there are some other parameters other than devices' and sensors', update them below as well */
}

/* init all devices' parameters */
void init_parameter(GlobalParameter * globalPara)
{
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	fc 01       	movw	r30, r24
	/* init all sensors' parameters */
	for( int i = 0 ; i < SensorListEnd ; ++i )
	{
		//printf("%d\t%d\t%d\t%d\n",SensorInitStartTimeList[i],SENSOR_INIT_PERIOD,SensorCheckCodeList[i],SensorNumDataList[i]);
		globalPara->SensorList[i].StartTime = SensorInitStartTimeList[i];
     27a:	2a e1       	ldi	r18, 0x1A	; 26
     27c:	32 e0       	ldi	r19, 0x02	; 2
     27e:	d9 01       	movw	r26, r18
     280:	8d 91       	ld	r24, X+
     282:	9c 91       	ld	r25, X
     284:	91 8b       	std	Z+17, r25	; 0x11
     286:	80 8b       	std	Z+16, r24	; 0x10
		globalPara->SensorList[i].ExecutePeriod = SENSOR_INIT_PERIOD;
     288:	80 ee       	ldi	r24, 0xE0	; 224
     28a:	9e e2       	ldi	r25, 0x2E	; 46
     28c:	93 8b       	std	Z+19, r25	; 0x13
     28e:	82 8b       	std	Z+18, r24	; 0x12
		globalPara->SensorList[i].CheckCode = SensorCheckCodeList[i];
     290:	c6 e1       	ldi	r28, 0x16	; 22
     292:	d2 e0       	ldi	r29, 0x02	; 2
     294:	48 81       	ld	r20, Y
     296:	59 81       	ldd	r21, Y+1	; 0x01
     298:	57 8b       	std	Z+23, r21	; 0x17
     29a:	46 8b       	std	Z+22, r20	; 0x16
		globalPara->SensorList[i].NumOfData = SensorNumDataList[i];
     29c:	62 e1       	ldi	r22, 0x12	; 18
     29e:	72 e0       	ldi	r23, 0x02	; 2
     2a0:	db 01       	movw	r26, r22
     2a2:	4d 91       	ld	r20, X+
     2a4:	5c 91       	ld	r21, X
     2a6:	55 8b       	std	Z+21, r21	; 0x15
     2a8:	44 8b       	std	Z+20, r20	; 0x14
{
	/* init all sensors' parameters */
	for( int i = 0 ; i < SensorListEnd ; ++i )
	{
		//printf("%d\t%d\t%d\t%d\n",SensorInitStartTimeList[i],SENSOR_INIT_PERIOD,SensorCheckCodeList[i],SensorNumDataList[i]);
		globalPara->SensorList[i].StartTime = SensorInitStartTimeList[i];
     2aa:	d9 01       	movw	r26, r18
     2ac:	12 96       	adiw	r26, 0x02	; 2
     2ae:	2d 91       	ld	r18, X+
     2b0:	3c 91       	ld	r19, X
     2b2:	13 97       	sbiw	r26, 0x03	; 3
     2b4:	31 8f       	std	Z+25, r19	; 0x19
     2b6:	20 8f       	std	Z+24, r18	; 0x18
		globalPara->SensorList[i].ExecutePeriod = SENSOR_INIT_PERIOD;
     2b8:	93 8f       	std	Z+27, r25	; 0x1b
     2ba:	82 8f       	std	Z+26, r24	; 0x1a
		globalPara->SensorList[i].CheckCode = SensorCheckCodeList[i];
     2bc:	8a 81       	ldd	r24, Y+2	; 0x02
     2be:	9b 81       	ldd	r25, Y+3	; 0x03
     2c0:	97 8f       	std	Z+31, r25	; 0x1f
     2c2:	86 8f       	std	Z+30, r24	; 0x1e
		globalPara->SensorList[i].NumOfData = SensorNumDataList[i];
     2c4:	db 01       	movw	r26, r22
     2c6:	12 96       	adiw	r26, 0x02	; 2
     2c8:	8d 91       	ld	r24, X+
     2ca:	9c 91       	ld	r25, X
     2cc:	13 97       	sbiw	r26, 0x03	; 3
     2ce:	95 8f       	std	Z+29, r25	; 0x1d
     2d0:	84 8f       	std	Z+28, r24	; 0x1c
	
	/* init all devices' parameters */
	for( int i = 0 ; i < DeviceListEnd ; ++i )
	{
		//printf("%d\t%d\t%d\t%d\n",DeviceInitStartTimeList[i],DeviceInitPeriodList[i],DeviceCheckCodeList[i],0);
		globalPara->DeviceList[i].StartTime = DeviceInitStartTimeList[i];
     2d2:	8a e0       	ldi	r24, 0x0A	; 10
     2d4:	92 e0       	ldi	r25, 0x02	; 2
     2d6:	dc 01       	movw	r26, r24
     2d8:	2d 91       	ld	r18, X+
     2da:	3c 91       	ld	r19, X
     2dc:	31 83       	std	Z+1, r19	; 0x01
     2de:	20 83       	st	Z, r18
		globalPara->DeviceList[i].ExecutePeriod = DeviceInitPeriodList[i];
     2e0:	ce e0       	ldi	r28, 0x0E	; 14
     2e2:	d2 e0       	ldi	r29, 0x02	; 2
     2e4:	28 81       	ld	r18, Y
     2e6:	39 81       	ldd	r19, Y+1	; 0x01
     2e8:	33 83       	std	Z+3, r19	; 0x03
     2ea:	22 83       	std	Z+2, r18	; 0x02
		globalPara->DeviceList[i].CheckCode = DeviceCheckCodeList[i]; 
     2ec:	46 e0       	ldi	r20, 0x06	; 6
     2ee:	52 e0       	ldi	r21, 0x02	; 2
     2f0:	da 01       	movw	r26, r20
     2f2:	2d 91       	ld	r18, X+
     2f4:	3c 91       	ld	r19, X
     2f6:	37 83       	std	Z+7, r19	; 0x07
     2f8:	26 83       	std	Z+6, r18	; 0x06
		globalPara->DeviceList[i].NumOfData = 0;
     2fa:	15 82       	std	Z+5, r1	; 0x05
     2fc:	14 82       	std	Z+4, r1	; 0x04
	
	/* init all devices' parameters */
	for( int i = 0 ; i < DeviceListEnd ; ++i )
	{
		//printf("%d\t%d\t%d\t%d\n",DeviceInitStartTimeList[i],DeviceInitPeriodList[i],DeviceCheckCodeList[i],0);
		globalPara->DeviceList[i].StartTime = DeviceInitStartTimeList[i];
     2fe:	dc 01       	movw	r26, r24
     300:	12 96       	adiw	r26, 0x02	; 2
     302:	8d 91       	ld	r24, X+
     304:	9c 91       	ld	r25, X
     306:	13 97       	sbiw	r26, 0x03	; 3
     308:	91 87       	std	Z+9, r25	; 0x09
     30a:	80 87       	std	Z+8, r24	; 0x08
		globalPara->DeviceList[i].ExecutePeriod = DeviceInitPeriodList[i];
     30c:	8a 81       	ldd	r24, Y+2	; 0x02
     30e:	9b 81       	ldd	r25, Y+3	; 0x03
     310:	93 87       	std	Z+11, r25	; 0x0b
     312:	82 87       	std	Z+10, r24	; 0x0a
		globalPara->DeviceList[i].CheckCode = DeviceCheckCodeList[i]; 
     314:	da 01       	movw	r26, r20
     316:	12 96       	adiw	r26, 0x02	; 2
     318:	8d 91       	ld	r24, X+
     31a:	9c 91       	ld	r25, X
     31c:	13 97       	sbiw	r26, 0x03	; 3
     31e:	97 87       	std	Z+15, r25	; 0x0f
     320:	86 87       	std	Z+14, r24	; 0x0e
		globalPara->DeviceList[i].NumOfData = 0;
     322:	15 86       	std	Z+13, r1	; 0x0d
     324:	14 86       	std	Z+12, r1	; 0x0c
	}
}
     326:	df 91       	pop	r29
     328:	cf 91       	pop	r28
     32a:	08 95       	ret

0000032c <main>:
	// load_new_sensor( 4, 4, (BaseSensor *)Si7020_ptr, 0 );	
}

int main(void)
{
	SYS_Init();
     32c:	0e 94 cb 08 	call	0x1196	; 0x1196 <SYS_Init>
tm cur_time;
GlobalParameter GP;

/* TODO : clean up these messy init */
static void APP_Init(void){
	PWR_Init();
     330:	0e 94 a0 03 	call	0x740	; 0x740 <PWR_Init>
	PWR_TurnOn5V();
     334:	0e 94 a4 03 	call	0x748	; 0x748 <PWR_TurnOn5V>
	USART0_Init(9600);
     338:	60 e8       	ldi	r22, 0x80	; 128
     33a:	75 e2       	ldi	r23, 0x25	; 37
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 86 04 	call	0x90c	; 0x90c <USART0_Init>
	DDRB |= 0b00010000;
     344:	24 9a       	sbi	0x04, 4	; 4
	DDRE |= 0b00001000;
     346:	6b 9a       	sbi	0x0d, 3	; 13
	PORTE|= 0b00001000;
     348:	73 9a       	sbi	0x0e, 3	; 14
	TWI_Init(10000);
     34a:	60 e1       	ldi	r22, 0x10	; 16
     34c:	77 e2       	ldi	r23, 0x27	; 39
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	90 e0       	ldi	r25, 0x00	; 0
     352:	0e 94 aa 03 	call	0x754	; 0x754 <TWI_Init>
	ADC_Init();
     356:	0e 94 2c 02 	call	0x458	; 0x458 <ADC_Init>
	printf("BMP280 Status %i\n", BMP280_Init());
     35a:	0e 94 fe 0b 	call	0x17fc	; 0x17fc <BMP280_Init>
     35e:	9f 93       	push	r25
     360:	8f 93       	push	r24
     362:	8e e6       	ldi	r24, 0x6E	; 110
     364:	92 e0       	ldi	r25, 0x02	; 2
     366:	9f 93       	push	r25
     368:	8f 93       	push	r24
     36a:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <printf>
	BMP280_SetOversampling(4);
     36e:	84 e0       	ldi	r24, 0x04	; 4
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 de 0c 	call	0x19bc	; 0x19bc <BMP280_SetOversampling>
	SPI_SlaveInit();
     376:	0e 94 a6 03 	call	0x74c	; 0x74c <SPI_SlaveInit>
	SensorDataCount = 0;
     37a:	10 92 a6 0a 	sts	0x0AA6, r1
     37e:	10 92 a5 0a 	sts	0x0AA5, r1
}

static void DEVICE_Init(void){
	
	init_parameter(&GP);
     382:	87 ea       	ldi	r24, 0xA7	; 167
     384:	9a e0       	ldi	r25, 0x0A	; 10
     386:	0e 94 3a 01 	call	0x274	; 0x274 <init_parameter>
	
	init_timeoutq();
     38a:	0e 94 43 07 	call	0xe86	; 0xe86 <init_timeoutq>
	init_timestamp(&cur_time);
     38e:	87 e2       	ldi	r24, 0x27	; 39
     390:	99 e0       	ldi	r25, 0x09	; 9
     392:	0e 94 99 0b 	call	0x1732	; 0x1732 <init_timestamp>
	
	BMP280Sensor *BMP280_ptr = New_BMP280_Sensor( 0,2 );
     396:	62 e0       	ldi	r22, 0x02	; 2
     398:	70 e0       	ldi	r23, 0x00	; 0
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	0e 94 d4 13 	call	0x27a8	; 0x27a8 <New_BMP280_Sensor>
     3a2:	5c 01       	movw	r10, r24
	Si7020Sensor *Si_ptr = New_Si7020_Sensor(0,2);
     3a4:	62 e0       	ldi	r22, 0x02	; 2
     3a6:	70 e0       	ldi	r23, 0x00	; 0
     3a8:	80 e0       	ldi	r24, 0x00	; 0
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	0e 94 9d 14 	call	0x293a	; 0x293a <New_Si7020_Sensor>
     3b0:	6c 01       	movw	r12, r24
	
	DemoStorageDevice *Strg_ptr = New_DemoStorage_Device(0);
     3b2:	80 e0       	ldi	r24, 0x00	; 0
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	0e 94 1f 12 	call	0x243e	; 0x243e <New_DemoStorage_Device>
     3ba:	8c 01       	movw	r16, r24
	LoadDataDevice *Load_ptr = New_LoadData_Device(0,Strg_ptr);
     3bc:	bc 01       	movw	r22, r24
     3be:	80 e0       	ldi	r24, 0x00	; 0
     3c0:	90 e0       	ldi	r25, 0x00	; 0
     3c2:	0e 94 fe 12 	call	0x25fc	; 0x25fc <New_LoadData_Device>
     3c6:	7c 01       	movw	r14, r24
	
	init_Event_Timer();
     3c8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <init_Event_Timer>
	printf("init done!\n");
     3cc:	80 e8       	ldi	r24, 0x80	; 128
     3ce:	92 e0       	ldi	r25, 0x02	; 2
     3d0:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <puts>
	
	/* load all sensors */
	load_new_sensor( GP.SensorList[BMP280].StartTime, GP.SensorList[BMP280].ExecutePeriod, (BaseSensor *)BMP280_ptr, 0 );
     3d4:	c7 ea       	ldi	r28, 0xA7	; 167
     3d6:	da e0       	ldi	r29, 0x0A	; 10
     3d8:	6a 89       	ldd	r22, Y+18	; 0x12
     3da:	7b 89       	ldd	r23, Y+19	; 0x13
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	a5 01       	movw	r20, r10
     3e2:	88 89       	ldd	r24, Y+16	; 0x10
     3e4:	99 89       	ldd	r25, Y+17	; 0x11
     3e6:	0e 94 db 07 	call	0xfb6	; 0xfb6 <load_new_sensor>
	load_new_sensor( GP.SensorList[Si7020].StartTime, GP.SensorList[Si7020].ExecutePeriod, (BaseSensor *)Si_ptr, 0 );
     3ea:	6a 8d       	ldd	r22, Y+26	; 0x1a
     3ec:	7b 8d       	ldd	r23, Y+27	; 0x1b
     3ee:	20 e0       	ldi	r18, 0x00	; 0
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	a6 01       	movw	r20, r12
     3f4:	88 8d       	ldd	r24, Y+24	; 0x18
     3f6:	99 8d       	ldd	r25, Y+25	; 0x19
     3f8:	0e 94 db 07 	call	0xfb6	; 0xfb6 <load_new_sensor>
	
	
	printf("%d\t%d\n",GP.DeviceList[DemoStorage].StartTime,GP.DeviceList[DemoStorage].ExecutePeriod);
     3fc:	8b 85       	ldd	r24, Y+11	; 0x0b
     3fe:	8f 93       	push	r24
     400:	8a 85       	ldd	r24, Y+10	; 0x0a
     402:	8f 93       	push	r24
     404:	89 85       	ldd	r24, Y+9	; 0x09
     406:	8f 93       	push	r24
     408:	88 85       	ldd	r24, Y+8	; 0x08
     40a:	8f 93       	push	r24
     40c:	2b e8       	ldi	r18, 0x8B	; 139
     40e:	32 e0       	ldi	r19, 0x02	; 2
     410:	3f 93       	push	r19
     412:	2f 93       	push	r18
     414:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <printf>
	/* load all ( non-sensor ) devices */
	load_new_device( GP.DeviceList[DemoLoadData].StartTime, GP.DeviceList[DemoLoadData].ExecutePeriod, (BaseDevice *)Load_ptr, 0 );
     418:	6a 81       	ldd	r22, Y+2	; 0x02
     41a:	7b 81       	ldd	r23, Y+3	; 0x03
     41c:	20 e0       	ldi	r18, 0x00	; 0
     41e:	30 e0       	ldi	r19, 0x00	; 0
     420:	a7 01       	movw	r20, r14
     422:	88 81       	ld	r24, Y
     424:	99 81       	ldd	r25, Y+1	; 0x01
     426:	0e 94 11 08 	call	0x1022	; 0x1022 <load_new_device>
	load_new_device( GP.DeviceList[DemoStorage].StartTime, GP.DeviceList[DemoStorage].ExecutePeriod, (BaseDevice *)Strg_ptr, 0 );
     42a:	6a 85       	ldd	r22, Y+10	; 0x0a
     42c:	7b 85       	ldd	r23, Y+11	; 0x0b
     42e:	20 e0       	ldi	r18, 0x00	; 0
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	a8 01       	movw	r20, r16
     434:	88 85       	ldd	r24, Y+8	; 0x08
     436:	99 85       	ldd	r25, Y+9	; 0x09
     438:	0e 94 11 08 	call	0x1022	; 0x1022 <load_new_device>
{
	SYS_Init();
	APP_Init();
	DEVICE_Init();

	init_set_timer( get_next_interval() );
     43c:	0e 94 85 07 	call	0xf0a	; 0xf0a <get_next_interval>
     440:	0e 94 77 03 	call	0x6ee	; 0x6ee <init_set_timer>
	
	// Enable global interrupt //
	sei();
     444:	78 94       	sei
     446:	8d b7       	in	r24, 0x3d	; 61
     448:	9e b7       	in	r25, 0x3e	; 62
     44a:	0a 96       	adiw	r24, 0x0a	; 10
     44c:	0f b6       	in	r0, 0x3f	; 63
     44e:	f8 94       	cli
     450:	9e bf       	out	0x3e, r25	; 62
     452:	0f be       	out	0x3f, r0	; 63
     454:	8d bf       	out	0x3d, r24	; 61

	for (;;){}
     456:	ff cf       	rjmp	.-2      	; 0x456 <main+0x12a>

00000458 <ADC_Init>:

/*************************************************************************//**
  @brief Initializes the ADC
*****************************************************************************/
void ADC_Init(void) {
	ADCSRA = (1<<ADEN)|(4<<ADPS0); //enables the ADC module, CPU clock prescale=16
     458:	84 e8       	ldi	r24, 0x84	; 132
     45a:	80 93 7a 00 	sts	0x007A, r24
	
	ADCSRC = 0x05|(1<<ADTHT0)|(1<<ADTHT1); //ADSUT=5
     45e:	85 ec       	ldi	r24, 0xC5	; 197
     460:	80 93 77 00 	sts	0x0077, r24
	while((ADCSRB&(1<<AVDDOK))==0);
     464:	eb e7       	ldi	r30, 0x7B	; 123
     466:	f0 e0       	ldi	r31, 0x00	; 0
     468:	80 81       	ld	r24, Z
     46a:	88 23       	and	r24, r24
     46c:	ec f7       	brge	.-6      	; 0x468 <ADC_Init+0x10>
}
     46e:	08 95       	ret

00000470 <__vector_15>:

/*************************************************************************//**
  @brief Timer Interrupt Service Routine
*****************************************************************************/
ISR(TIMER2_OVF_vect)
{
     470:	1f 92       	push	r1
     472:	0f 92       	push	r0
     474:	0f b6       	in	r0, 0x3f	; 63
     476:	0f 92       	push	r0
     478:	11 24       	eor	r1, r1
     47a:	2f 93       	push	r18
     47c:	3f 93       	push	r19
     47e:	4f 93       	push	r20
     480:	5f 93       	push	r21
     482:	6f 93       	push	r22
     484:	7f 93       	push	r23
     486:	8f 93       	push	r24
     488:	9f 93       	push	r25
     48a:	af 93       	push	r26
     48c:	bf 93       	push	r27
     48e:	ef 93       	push	r30
     490:	ff 93       	push	r31
	timer_usage ++;
     492:	80 91 f4 05 	lds	r24, 0x05F4
     496:	90 91 f5 05 	lds	r25, 0x05F5
     49a:	01 96       	adiw	r24, 0x01	; 1
     49c:	90 93 f5 05 	sts	0x05F5, r25
     4a0:	80 93 f4 05 	sts	0x05F4, r24
	// printf("count1 = %d\n",timer_usage);
	printf("Timestamp : %ld\n",(TimeStamp));
     4a4:	80 91 f3 05 	lds	r24, 0x05F3
     4a8:	8f 93       	push	r24
     4aa:	80 91 f2 05 	lds	r24, 0x05F2
     4ae:	8f 93       	push	r24
     4b0:	80 91 f1 05 	lds	r24, 0x05F1
     4b4:	8f 93       	push	r24
     4b6:	80 91 f0 05 	lds	r24, 0x05F0
     4ba:	8f 93       	push	r24
     4bc:	82 e9       	ldi	r24, 0x92	; 146
     4be:	92 e0       	ldi	r25, 0x02	; 2
     4c0:	9f 93       	push	r25
     4c2:	8f 93       	push	r24
     4c4:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <printf>
	handle_timeoutq_event();	
     4c8:	0e 94 49 08 	call	0x1092	; 0x1092 <handle_timeoutq_event>
     4cc:	0f 90       	pop	r0
     4ce:	0f 90       	pop	r0
     4d0:	0f 90       	pop	r0
     4d2:	0f 90       	pop	r0
     4d4:	0f 90       	pop	r0
     4d6:	0f 90       	pop	r0
}
     4d8:	ff 91       	pop	r31
     4da:	ef 91       	pop	r30
     4dc:	bf 91       	pop	r27
     4de:	af 91       	pop	r26
     4e0:	9f 91       	pop	r25
     4e2:	8f 91       	pop	r24
     4e4:	7f 91       	pop	r23
     4e6:	6f 91       	pop	r22
     4e8:	5f 91       	pop	r21
     4ea:	4f 91       	pop	r20
     4ec:	3f 91       	pop	r19
     4ee:	2f 91       	pop	r18
     4f0:	0f 90       	pop	r0
     4f2:	0f be       	out	0x3f, r0	; 63
     4f4:	0f 90       	pop	r0
     4f6:	1f 90       	pop	r1
     4f8:	18 95       	reti

000004fa <init_Event_Timer>:

/* Initialization Routine Example 3 : Timer 2 Async operation */
/* Clock for Timer 2 is taken from crystal connected to TOSC pins */
void init_Event_Timer(void)
{
	TimeStamp = 0;
     4fa:	10 92 f0 05 	sts	0x05F0, r1
     4fe:	10 92 f1 05 	sts	0x05F1, r1
     502:	10 92 f2 05 	sts	0x05F2, r1
     506:	10 92 f3 05 	sts	0x05F3, r1
	timer_usage = 0;
     50a:	10 92 f5 05 	sts	0x05F5, r1
     50e:	10 92 f4 05 	sts	0x05F4, r1
	/* Select clock source as crystal on TOSCn pins */
	ASSR |= 1 << AS2;
     512:	e6 eb       	ldi	r30, 0xB6	; 182
     514:	f0 e0       	ldi	r31, 0x00	; 0
     516:	80 81       	ld	r24, Z
     518:	80 62       	ori	r24, 0x20	; 32
     51a:	80 83       	st	Z, r24
	
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
     51c:	80 81       	ld	r24, Z
     51e:	8f 71       	andi	r24, 0x1F	; 31
     520:	e9 f7       	brne	.-6      	; 0x51c <init_Event_Timer+0x22>
	
	/* Stop timer 2 */
	TCCR2B = 0x00;
     522:	10 92 b1 00 	sts	0x00B1, r1
     526:	08 95       	ret

00000528 <general_set_timer>:
	// TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
}


void general_set_timer( int period_number )
{
     528:	cf 93       	push	r28
     52a:	df 93       	push	r29
     52c:	ec 01       	movw	r28, r24
	// printf("debug %d\n",period_number);
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
     52e:	e6 eb       	ldi	r30, 0xB6	; 182
     530:	f0 e0       	ldi	r31, 0x00	; 0
     532:	90 81       	ld	r25, Z
     534:	9f 71       	andi	r25, 0x1F	; 31
     536:	e9 f7       	brne	.-6      	; 0x532 <general_set_timer+0xa>
	/* Stop timer 2 */
	TCCR2B = 0x00;
     538:	10 92 b1 00 	sts	0x00B1, r1
	
	
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
     53c:	e6 eb       	ldi	r30, 0xB6	; 182
     53e:	f0 e0       	ldi	r31, 0x00	; 0
     540:	90 81       	ld	r25, Z
     542:	9f 71       	andi	r25, 0x1F	; 31
     544:	e9 f7       	brne	.-6      	; 0x540 <general_set_timer+0x18>
	 *  1    1    0     256		2s/256
	 *  1    1    1    1024		8s/256
	 */
	// Resolution
	// 0.25s/256
	if( period_number <= 250 )
     546:	cb 3f       	cpi	r28, 0xFB	; 251
     548:	d1 05       	cpc	r29, r1
     54a:	04 f5       	brge	.+64     	; 0x58c <general_set_timer+0x64>
	{
		temp = 256 - (int) ( 256.0/250.0 * period_number);
     54c:	be 01       	movw	r22, r28
     54e:	0d 2e       	mov	r0, r29
     550:	00 0c       	add	r0, r0
     552:	88 0b       	sbc	r24, r24
     554:	99 0b       	sbc	r25, r25
     556:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__floatsisf>
     55a:	2f e6       	ldi	r18, 0x6F	; 111
     55c:	32 e1       	ldi	r19, 0x12	; 18
     55e:	43 e8       	ldi	r20, 0x83	; 131
     560:	5f e3       	ldi	r21, 0x3F	; 63
     562:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
     566:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	31 e0       	ldi	r19, 0x01	; 1
     56e:	c9 01       	movw	r24, r18
     570:	86 1b       	sub	r24, r22
     572:	97 0b       	sbc	r25, r23
     574:	8f 3f       	cpi	r24, 0xFF	; 255
     576:	91 05       	cpc	r25, r1
     578:	19 f0       	breq	.+6      	; 0x580 <general_set_timer+0x58>
     57a:	14 f0       	brlt	.+4      	; 0x580 <general_set_timer+0x58>
     57c:	8f ef       	ldi	r24, 0xFF	; 255
     57e:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     580:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS21)|(1<<CS20);
     584:	83 e0       	ldi	r24, 0x03	; 3
     586:	80 93 b1 00 	sts	0x00B1, r24
     58a:	94 c0       	rjmp	.+296    	; 0x6b4 <general_set_timer+0x18c>
	}
	// Resolution
	// 0.5s/256
	else if ( period_number <= 500 )
     58c:	c5 3f       	cpi	r28, 0xF5	; 245
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	d8 07       	cpc	r29, r24
     592:	04 f5       	brge	.+64     	; 0x5d4 <general_set_timer+0xac>
	{
		temp = 256 - (int) ( 256.0/500.0 * period_number);
     594:	be 01       	movw	r22, r28
     596:	0d 2e       	mov	r0, r29
     598:	00 0c       	add	r0, r0
     59a:	88 0b       	sbc	r24, r24
     59c:	99 0b       	sbc	r25, r25
     59e:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__floatsisf>
     5a2:	2f e6       	ldi	r18, 0x6F	; 111
     5a4:	32 e1       	ldi	r19, 0x12	; 18
     5a6:	43 e0       	ldi	r20, 0x03	; 3
     5a8:	5f e3       	ldi	r21, 0x3F	; 63
     5aa:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
     5ae:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	31 e0       	ldi	r19, 0x01	; 1
     5b6:	c9 01       	movw	r24, r18
     5b8:	86 1b       	sub	r24, r22
     5ba:	97 0b       	sbc	r25, r23
     5bc:	8f 3f       	cpi	r24, 0xFF	; 255
     5be:	91 05       	cpc	r25, r1
     5c0:	19 f0       	breq	.+6      	; 0x5c8 <general_set_timer+0xa0>
     5c2:	14 f0       	brlt	.+4      	; 0x5c8 <general_set_timer+0xa0>
     5c4:	8f ef       	ldi	r24, 0xFF	; 255
     5c6:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     5c8:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22);
     5cc:	84 e0       	ldi	r24, 0x04	; 4
     5ce:	80 93 b1 00 	sts	0x00B1, r24
     5d2:	70 c0       	rjmp	.+224    	; 0x6b4 <general_set_timer+0x18c>
	}
	// Resolution
	// 1s/256
	else if ( period_number <= 1000 )
     5d4:	c9 3e       	cpi	r28, 0xE9	; 233
     5d6:	83 e0       	ldi	r24, 0x03	; 3
     5d8:	d8 07       	cpc	r29, r24
     5da:	04 f5       	brge	.+64     	; 0x61c <general_set_timer+0xf4>
	{
		temp = 256 - (int) ( 256.0/1000.0 * period_number);
     5dc:	be 01       	movw	r22, r28
     5de:	0d 2e       	mov	r0, r29
     5e0:	00 0c       	add	r0, r0
     5e2:	88 0b       	sbc	r24, r24
     5e4:	99 0b       	sbc	r25, r25
     5e6:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__floatsisf>
     5ea:	2f e6       	ldi	r18, 0x6F	; 111
     5ec:	32 e1       	ldi	r19, 0x12	; 18
     5ee:	43 e8       	ldi	r20, 0x83	; 131
     5f0:	5e e3       	ldi	r21, 0x3E	; 62
     5f2:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
     5f6:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	31 e0       	ldi	r19, 0x01	; 1
     5fe:	c9 01       	movw	r24, r18
     600:	86 1b       	sub	r24, r22
     602:	97 0b       	sbc	r25, r23
     604:	8f 3f       	cpi	r24, 0xFF	; 255
     606:	91 05       	cpc	r25, r1
     608:	19 f0       	breq	.+6      	; 0x610 <general_set_timer+0xe8>
     60a:	14 f0       	brlt	.+4      	; 0x610 <general_set_timer+0xe8>
     60c:	8f ef       	ldi	r24, 0xFF	; 255
     60e:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     610:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS20);	
     614:	85 e0       	ldi	r24, 0x05	; 5
     616:	80 93 b1 00 	sts	0x00B1, r24
     61a:	4c c0       	rjmp	.+152    	; 0x6b4 <general_set_timer+0x18c>
	}
	// Resolution
	// 2s/256
	else if ( period_number <= 2000 )
     61c:	c1 3d       	cpi	r28, 0xD1	; 209
     61e:	87 e0       	ldi	r24, 0x07	; 7
     620:	d8 07       	cpc	r29, r24
     622:	04 f5       	brge	.+64     	; 0x664 <general_set_timer+0x13c>
	{
		temp = 256 - (int) ( 256.0/2000.0 * period_number);
     624:	be 01       	movw	r22, r28
     626:	0d 2e       	mov	r0, r29
     628:	00 0c       	add	r0, r0
     62a:	88 0b       	sbc	r24, r24
     62c:	99 0b       	sbc	r25, r25
     62e:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__floatsisf>
     632:	2f e6       	ldi	r18, 0x6F	; 111
     634:	32 e1       	ldi	r19, 0x12	; 18
     636:	43 e0       	ldi	r20, 0x03	; 3
     638:	5e e3       	ldi	r21, 0x3E	; 62
     63a:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
     63e:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
     642:	20 e0       	ldi	r18, 0x00	; 0
     644:	31 e0       	ldi	r19, 0x01	; 1
     646:	c9 01       	movw	r24, r18
     648:	86 1b       	sub	r24, r22
     64a:	97 0b       	sbc	r25, r23
     64c:	8f 3f       	cpi	r24, 0xFF	; 255
     64e:	91 05       	cpc	r25, r1
     650:	19 f0       	breq	.+6      	; 0x658 <general_set_timer+0x130>
     652:	14 f0       	brlt	.+4      	; 0x658 <general_set_timer+0x130>
     654:	8f ef       	ldi	r24, 0xFF	; 255
     656:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     658:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS21);	
     65c:	86 e0       	ldi	r24, 0x06	; 6
     65e:	80 93 b1 00 	sts	0x00B1, r24
     662:	28 c0       	rjmp	.+80     	; 0x6b4 <general_set_timer+0x18c>
	}
	// Resolution
	// 8s/256
	else if ( period_number <= 8000 )
     664:	c1 34       	cpi	r28, 0x41	; 65
     666:	8f e1       	ldi	r24, 0x1F	; 31
     668:	d8 07       	cpc	r29, r24
     66a:	04 f5       	brge	.+64     	; 0x6ac <general_set_timer+0x184>
	{
		t = (int) ( 256.0/8000.0 * period_number);
     66c:	be 01       	movw	r22, r28
     66e:	0d 2e       	mov	r0, r29
     670:	00 0c       	add	r0, r0
     672:	88 0b       	sbc	r24, r24
     674:	99 0b       	sbc	r25, r25
     676:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__floatsisf>
     67a:	2f e6       	ldi	r18, 0x6F	; 111
     67c:	32 e1       	ldi	r19, 0x12	; 18
     67e:	43 e0       	ldi	r20, 0x03	; 3
     680:	5d e3       	ldi	r21, 0x3D	; 61
     682:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
     686:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__fixsfsi>
		temp = 256 - t;
		temp = temp > 255 ? 255 : temp ;
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	31 e0       	ldi	r19, 0x01	; 1
     68e:	c9 01       	movw	r24, r18
     690:	86 1b       	sub	r24, r22
     692:	97 0b       	sbc	r25, r23
     694:	8f 3f       	cpi	r24, 0xFF	; 255
     696:	91 05       	cpc	r25, r1
     698:	19 f0       	breq	.+6      	; 0x6a0 <general_set_timer+0x178>
     69a:	14 f0       	brlt	.+4      	; 0x6a0 <general_set_timer+0x178>
     69c:	8f ef       	ldi	r24, 0xFF	; 255
     69e:	90 e0       	ldi	r25, 0x00	; 0

		TCNT2 = temp;
     6a0:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
     6a4:	87 e0       	ldi	r24, 0x07	; 7
     6a6:	80 93 b1 00 	sts	0x00B1, r24
     6aa:	04 c0       	rjmp	.+8      	; 0x6b4 <general_set_timer+0x18c>
	}
	else
	{
		printf("Timer exceeds max\n");
     6ac:	83 ea       	ldi	r24, 0xA3	; 163
     6ae:	92 e0       	ldi	r25, 0x02	; 2
     6b0:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <puts>
	}

	/* start timer 2 */
	TCCR2A = 0x00;
     6b4:	10 92 b0 00 	sts	0x00B0, r1
	TimeStamp += period_number;
     6b8:	ce 01       	movw	r24, r28
     6ba:	dd 0f       	add	r29, r29
     6bc:	aa 0b       	sbc	r26, r26
     6be:	bb 0b       	sbc	r27, r27
     6c0:	40 91 f0 05 	lds	r20, 0x05F0
     6c4:	50 91 f1 05 	lds	r21, 0x05F1
     6c8:	60 91 f2 05 	lds	r22, 0x05F2
     6cc:	70 91 f3 05 	lds	r23, 0x05F3
     6d0:	84 0f       	add	r24, r20
     6d2:	95 1f       	adc	r25, r21
     6d4:	a6 1f       	adc	r26, r22
     6d6:	b7 1f       	adc	r27, r23
     6d8:	80 93 f0 05 	sts	0x05F0, r24
     6dc:	90 93 f1 05 	sts	0x05F1, r25
     6e0:	a0 93 f2 05 	sts	0x05F2, r26
     6e4:	b0 93 f3 05 	sts	0x05F3, r27
}
     6e8:	df 91       	pop	r29
     6ea:	cf 91       	pop	r28
     6ec:	08 95       	ret

000006ee <init_set_timer>:

void init_set_timer( int period_number )
{
    general_set_timer( period_number );
     6ee:	0e 94 94 02 	call	0x528	; 0x528 <general_set_timer>
	/* Clear pending interrupts */
	TIFR2  = (1 << TOV2) | (1 << OCF2A) | (1 << OCF2B);
     6f2:	87 e0       	ldi	r24, 0x07	; 7
     6f4:	87 bb       	out	0x17, r24	; 23
	/* Enable Overflow Interrupt */
	TIMSK2 = 1<<TOIE2;
     6f6:	81 e0       	ldi	r24, 0x01	; 1
     6f8:	80 93 70 00 	sts	0x0070, r24
     6fc:	08 95       	ret

000006fe <set_timer>:

}

void set_timer( int period_number )
{
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	ec 01       	movw	r28, r24
	printf("set timer gap = %d\n\n", period_number);
     704:	df 93       	push	r29
     706:	cf 93       	push	r28
     708:	85 eb       	ldi	r24, 0xB5	; 181
     70a:	92 e0       	ldi	r25, 0x02	; 2
     70c:	9f 93       	push	r25
     70e:	8f 93       	push	r24
     710:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <printf>
	if( period_number == 0)
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	0f 90       	pop	r0
     71a:	0f 90       	pop	r0
     71c:	20 97       	sbiw	r28, 0x00	; 0
     71e:	69 f0       	breq	.+26     	; 0x73a <set_timer+0x3c>
	{
		/* we won't every set a zero timeout, will we ? */
		return;
	}
    if( timer_usage == 0 )
     720:	80 91 f4 05 	lds	r24, 0x05F4
     724:	90 91 f5 05 	lds	r25, 0x05F5
     728:	89 2b       	or	r24, r25
     72a:	21 f4       	brne	.+8      	; 0x734 <set_timer+0x36>
    {
        init_set_timer( period_number );
     72c:	ce 01       	movw	r24, r28
     72e:	0e 94 77 03 	call	0x6ee	; 0x6ee <init_set_timer>
     732:	03 c0       	rjmp	.+6      	; 0x73a <set_timer+0x3c>
    }
    else
    {
        general_set_timer( period_number );
     734:	ce 01       	movw	r24, r28
     736:	0e 94 94 02 	call	0x528	; 0x528 <general_set_timer>
    }
}	
     73a:	df 91       	pop	r29
     73c:	cf 91       	pop	r28
     73e:	08 95       	ret

00000740 <PWR_Init>:

/*************************************************************************//**
  @brief Initializes the power management system
*****************************************************************************/
void PWR_Init(void){
	DDRD |= 0b11000000;
     740:	8a b1       	in	r24, 0x0a	; 10
     742:	80 6c       	ori	r24, 0xC0	; 192
     744:	8a b9       	out	0x0a, r24	; 10
     746:	08 95       	ret

00000748 <PWR_TurnOn5V>:

/*************************************************************************//**
  @brief Turns on the 5V power supply
*****************************************************************************/
void PWR_TurnOn5V(void){
	PORTD |= 0b10000000;
     748:	5f 9a       	sbi	0x0b, 7	; 11
     74a:	08 95       	ret

0000074c <SPI_SlaveInit>:

unsigned char buffer[16];

void SPI_SlaveInit(void)
{
	DDRB |= (1<<PORTB3); //Set MISO output
     74c:	23 9a       	sbi	0x04, 3	; 4
	SPCR = (1<<SPE); //Enable SPI
     74e:	80 e4       	ldi	r24, 0x40	; 64
     750:	8c bd       	out	0x2c, r24	; 44
     752:	08 95       	ret

00000754 <TWI_Init>:
/*************************************************************************//**
  @brief Initializes the 2-wire Serial Interface as a master
  @param[in] freq SCL frequency (Do not exceed 400kHz)
  @return Status (@c 0 on failure, nonzero otherwise)
*****************************************************************************/
char TWI_Init(unsigned long freq){
     754:	9b 01       	movw	r18, r22
     756:	ac 01       	movw	r20, r24
	//printf("TWI_Init");
	TWSR=0x00;
     758:	10 92 b9 00 	sts	0x00B9, r1
	TWBR=(unsigned char)(((F_CPU/freq)-16UL)/8UL); //Compute settings value and set frequency
     75c:	60 e0       	ldi	r22, 0x00	; 0
     75e:	74 e2       	ldi	r23, 0x24	; 36
     760:	84 ef       	ldi	r24, 0xF4	; 244
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	0e 94 9f 1a 	call	0x353e	; 0x353e <__udivmodsi4>
     768:	da 01       	movw	r26, r20
     76a:	c9 01       	movw	r24, r18
     76c:	40 97       	sbiw	r24, 0x10	; 16
     76e:	a1 09       	sbc	r26, r1
     770:	b1 09       	sbc	r27, r1
     772:	68 94       	set
     774:	12 f8       	bld	r1, 2
     776:	b6 95       	lsr	r27
     778:	a7 95       	ror	r26
     77a:	97 95       	ror	r25
     77c:	87 95       	ror	r24
     77e:	16 94       	lsr	r1
     780:	d1 f7       	brne	.-12     	; 0x776 <TWI_Init+0x22>
     782:	80 93 b8 00 	sts	0x00B8, r24
	TWCR=(1 << TWEN);
     786:	84 e0       	ldi	r24, 0x04	; 4
     788:	80 93 bc 00 	sts	0x00BC, r24
	
	//TWAR=0; //Disable slave mode
	
	return 1; //May want to actually check for success here
}
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	08 95       	ret

00000790 <TWI_WriteByte>:
  @param[in] data byte to send
  @return Status code, TWI_SENT_ACK or TWI_SENT_NACK on success
*****************************************************************************/
char TWI_WriteByte(unsigned char data){
	//printf("TWI_WriteByte");
	TWDR = data; //Stage the data to send
     790:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
     794:	84 e8       	ldi	r24, 0x84	; 132
     796:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);//Send the data
     79a:	ec eb       	ldi	r30, 0xBC	; 188
     79c:	f0 e0       	ldi	r31, 0x00	; 0
     79e:	80 81       	ld	r24, Z
     7a0:	88 23       	and	r24, r24
     7a2:	ec f7       	brge	.-6      	; 0x79e <TWI_WriteByte+0xe>
	
	return TWSR&TWSR_MASK;//Return the status code
     7a4:	80 91 b9 00 	lds	r24, 0x00B9
}
     7a8:	88 7f       	andi	r24, 0xF8	; 248
     7aa:	08 95       	ret

000007ac <TWI_BeginWrite>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAW_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginWrite(unsigned char address){
	//printf("TWI_BeginWrite");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
     7ac:	94 ee       	ldi	r25, 0xE4	; 228
     7ae:	90 93 bc 00 	sts	0x00BC, r25
	int i=0;
	while ((TWCR & (1<<TWINT)) == 0);
     7b2:	ec eb       	ldi	r30, 0xBC	; 188
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	90 81       	ld	r25, Z
     7b8:	99 23       	and	r25, r25
     7ba:	ec f7       	brge	.-6      	; 0x7b6 <TWI_BeginWrite+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7bc:	ef e9       	ldi	r30, 0x9F	; 159
     7be:	ff e0       	ldi	r31, 0x0F	; 15
     7c0:	31 97       	sbiw	r30, 0x01	; 1
     7c2:	f1 f7       	brne	.-4      	; 0x7c0 <TWI_BeginWrite+0x14>
     7c4:	00 c0       	rjmp	.+0      	; 0x7c6 <TWI_BeginWrite+0x1a>
     7c6:	00 00       	nop
	_delay_ms(1);
	char stat = (TWSR & TWSR_MASK);
     7c8:	90 91 b9 00 	lds	r25, 0x00B9
     7cc:	98 7f       	andi	r25, 0xF8	; 248
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
     7ce:	98 30       	cpi	r25, 0x08	; 8
     7d0:	31 f0       	breq	.+12     	; 0x7de <TWI_BeginWrite+0x32>
     7d2:	90 31       	cpi	r25, 0x10	; 16
     7d4:	21 f0       	breq	.+8      	; 0x7de <TWI_BeginWrite+0x32>
     7d6:	80 91 b9 00 	lds	r24, 0x00B9
     7da:	88 7f       	andi	r24, 0xF8	; 248
     7dc:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) & SLAW_MASK); //reset bit 0 to send a write bit, send
     7de:	88 0f       	add	r24, r24
     7e0:	0e 94 c8 03 	call	0x790	; 0x790 <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	return stat;//Return the status code
}
     7e4:	08 95       	ret

000007e6 <TWI_BeginRead>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAR_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginRead(unsigned char address){
	//printf("TWI_BeginRead");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
     7e6:	94 ee       	ldi	r25, 0xE4	; 228
     7e8:	90 93 bc 00 	sts	0x00BC, r25
	while ((TWCR & (1<<TWINT)) == 0);
     7ec:	ec eb       	ldi	r30, 0xBC	; 188
     7ee:	f0 e0       	ldi	r31, 0x00	; 0
     7f0:	90 81       	ld	r25, Z
     7f2:	99 23       	and	r25, r25
     7f4:	ec f7       	brge	.-6      	; 0x7f0 <TWI_BeginRead+0xa>
	
	char stat = (TWSR & TWSR_MASK);
     7f6:	90 91 b9 00 	lds	r25, 0x00B9
     7fa:	98 7f       	andi	r25, 0xF8	; 248
	//printf("0x%1x",(unsigned)stat);
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
     7fc:	98 30       	cpi	r25, 0x08	; 8
     7fe:	31 f0       	breq	.+12     	; 0x80c <TWI_BeginRead+0x26>
     800:	90 31       	cpi	r25, 0x10	; 16
     802:	21 f0       	breq	.+8      	; 0x80c <TWI_BeginRead+0x26>
     804:	80 91 b9 00 	lds	r24, 0x00B9
     808:	88 7f       	andi	r24, 0xF8	; 248
     80a:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) | SLAR_MASK); //set bit 0 to send a read bit and send it
     80c:	88 0f       	add	r24, r24
     80e:	81 60       	ori	r24, 0x01	; 1
     810:	0e 94 c8 03 	call	0x790	; 0x790 <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	
	return stat;//Return the status code
}
     814:	08 95       	ret

00000816 <TWI_ReadAck>:
/*************************************************************************//**
  @brief Receives a byte over TWI and returns an ACK
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_ACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadAck(unsigned char *data){
     816:	dc 01       	movw	r26, r24
	//printf("TWI_ReadAck");
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Start receiving, ending with an ACK
     818:	84 ec       	ldi	r24, 0xC4	; 196
     81a:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);
     81e:	ec eb       	ldi	r30, 0xBC	; 188
     820:	f0 e0       	ldi	r31, 0x00	; 0
     822:	90 81       	ld	r25, Z
     824:	99 23       	and	r25, r25
     826:	ec f7       	brge	.-6      	; 0x822 <TWI_ReadAck+0xc>
	*data=TWDR; //Store the data
     828:	80 91 bb 00 	lds	r24, 0x00BB
     82c:	8c 93       	st	X, r24
	
	return TWSR&TWSR_MASK;//Return the status code
     82e:	80 91 b9 00 	lds	r24, 0x00B9
}
     832:	88 7f       	andi	r24, 0xF8	; 248
     834:	08 95       	ret

00000836 <TWI_ReadNack>:
/*************************************************************************//**
  @brief Receives a byte over TWI and returns a NACK
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_NACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadNack(unsigned char *data){
     836:	dc 01       	movw	r26, r24
	//printf("TWI_ReadNack");
	TWCR = (1<<TWINT)|(1<<TWEN); //Start receiving, ending with a NACK
     838:	84 e8       	ldi	r24, 0x84	; 132
     83a:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);
     83e:	ec eb       	ldi	r30, 0xBC	; 188
     840:	f0 e0       	ldi	r31, 0x00	; 0
     842:	90 81       	ld	r25, Z
     844:	99 23       	and	r25, r25
     846:	ec f7       	brge	.-6      	; 0x842 <TWI_ReadNack+0xc>
	*data=TWDR; //Store the data
     848:	80 91 bb 00 	lds	r24, 0x00BB
     84c:	8c 93       	st	X, r24
	
	return TWSR&TWSR_MASK;//Return the status code
     84e:	80 91 b9 00 	lds	r24, 0x00B9
}
     852:	88 7f       	andi	r24, 0xF8	; 248
     854:	08 95       	ret

00000856 <TWI_Stop>:
  @brief Sends a Stop bit, be sure to send a Start bit before future interactions on the bus
  @return Status code, should always be nonzero
*****************************************************************************/
char TWI_Stop(void){
	//printf("TWI_Stop");
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     856:	84 e9       	ldi	r24, 0x94	; 148
     858:	80 93 bc 00 	sts	0x00BC, r24
	return 1;
}
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	08 95       	ret

00000860 <TWI_Read>:
  @param[in] amount Number of bytes to recieve
  @param[in] whether or not to send an ACK on the last byte, sends NACK if false
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
     860:	9f 92       	push	r9
     862:	af 92       	push	r10
     864:	bf 92       	push	r11
     866:	cf 92       	push	r12
     868:	df 92       	push	r13
     86a:	ef 92       	push	r14
     86c:	ff 92       	push	r15
     86e:	0f 93       	push	r16
     870:	1f 93       	push	r17
     872:	cf 93       	push	r28
     874:	df 93       	push	r29
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
     876:	16 16       	cp	r1, r22
     878:	17 06       	cpc	r1, r23
     87a:	0c f5       	brge	.+66     	; 0x8be <TWI_Read+0x5e>
     87c:	94 2e       	mov	r9, r20
     87e:	8b 01       	movw	r16, r22
     880:	7c 01       	movw	r14, r24
     882:	c0 e0       	ldi	r28, 0x00	; 0
     884:	d0 e0       	ldi	r29, 0x00	; 0
		if((ack==false) && ((amount-1)==i)){
     886:	6b 01       	movw	r12, r22
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	c8 1a       	sub	r12, r24
     88c:	d1 08       	sbc	r13, r1
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
     88e:	57 01       	movw	r10, r14
     890:	ac 0c       	add	r10, r12
     892:	bd 1c       	adc	r11, r13
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
		if((ack==false) && ((amount-1)==i)){
     894:	91 10       	cpse	r9, r1
     896:	07 c0       	rjmp	.+14     	; 0x8a6 <TWI_Read+0x46>
     898:	cc 16       	cp	r12, r28
     89a:	dd 06       	cpc	r13, r29
     89c:	21 f4       	brne	.+8      	; 0x8a6 <TWI_Read+0x46>
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
     89e:	c5 01       	movw	r24, r10
     8a0:	0e 94 1b 04 	call	0x836	; 0x836 <TWI_ReadNack>
     8a4:	05 c0       	rjmp	.+10     	; 0x8b0 <TWI_Read+0x50>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}else{
			status=TWI_ReadAck(&data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
     8a6:	c7 01       	movw	r24, r14
     8a8:	8c 0f       	add	r24, r28
     8aa:	9d 1f       	adc	r25, r29
     8ac:	0e 94 0b 04 	call	0x816	; 0x816 <TWI_ReadAck>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}
		//printf("A");
		if(status!=TWI_REC_ACK)return status; //If NACK was selected, returning here is fine since the loop is already ending
     8b0:	80 35       	cpi	r24, 0x50	; 80
     8b2:	31 f4       	brne	.+12     	; 0x8c0 <TWI_Read+0x60>
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
     8b4:	21 96       	adiw	r28, 0x01	; 1
     8b6:	c0 17       	cp	r28, r16
     8b8:	d1 07       	cpc	r29, r17
     8ba:	61 f7       	brne	.-40     	; 0x894 <TWI_Read+0x34>
     8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <TWI_Read+0x60>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
     8be:	80 e0       	ldi	r24, 0x00	; 0
		//will return if something goes wrong partway through
		//printf("B");
	}
	//printf("0x%1x",(unsigned)status);
	return status;
}
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	ff 90       	pop	r15
     8ca:	ef 90       	pop	r14
     8cc:	df 90       	pop	r13
     8ce:	cf 90       	pop	r12
     8d0:	bf 90       	pop	r11
     8d2:	af 90       	pop	r10
     8d4:	9f 90       	pop	r9
     8d6:	08 95       	ret

000008d8 <TWI_Write>:
  @param[in] *data Pointer to an array of bytes to send
  @param[in] amount Number of bytes to send
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
     8d8:	0f 93       	push	r16
     8da:	1f 93       	push	r17
     8dc:	cf 93       	push	r28
     8de:	df 93       	push	r29
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
     8e0:	16 16       	cp	r1, r22
     8e2:	17 06       	cpc	r1, r23
     8e4:	6c f4       	brge	.+26     	; 0x900 <TWI_Write+0x28>
     8e6:	8c 01       	movw	r16, r24
     8e8:	ec 01       	movw	r28, r24
     8ea:	06 0f       	add	r16, r22
     8ec:	17 1f       	adc	r17, r23
		status=TWI_WriteByte(data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
     8ee:	89 91       	ld	r24, Y+
     8f0:	0e 94 c8 03 	call	0x790	; 0x790 <TWI_WriteByte>
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
     8f4:	88 32       	cpi	r24, 0x28	; 40
     8f6:	29 f4       	brne	.+10     	; 0x902 <TWI_Write+0x2a>
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
     8f8:	c0 17       	cp	r28, r16
     8fa:	d1 07       	cpc	r29, r17
     8fc:	c1 f7       	brne	.-16     	; 0x8ee <TWI_Write+0x16>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <TWI_Write+0x2a>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
     900:	80 e0       	ldi	r24, 0x00	; 0
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
		//will return if something goes wrong partway through
	}
	return status;
     902:	df 91       	pop	r29
     904:	cf 91       	pop	r28
     906:	1f 91       	pop	r17
     908:	0f 91       	pop	r16
     90a:	08 95       	ret

0000090c <USART0_Init>:
  @brief Initializes USART0 in asynchronous UART mode, 8 bit data, 1 stop bit
  @param[in] desired baud rate (configuration values computed using F_CPU)
*****************************************************************************/
void USART0_Init(unsigned long baud){
	
	stdout = &USART0_stdout; //make stdout print to USART0
     90c:	2e e1       	ldi	r18, 0x1E	; 30
     90e:	32 e0       	ldi	r19, 0x02	; 2
     910:	30 93 fd 0a 	sts	0x0AFD, r19
     914:	20 93 fc 0a 	sts	0x0AFC, r18
	
	//Compute UBRR for baudrate setting
	unsigned short ubrr=(unsigned short)((F_CPU/(baud*16UL))-1);
     918:	dc 01       	movw	r26, r24
     91a:	cb 01       	movw	r24, r22
     91c:	88 0f       	add	r24, r24
     91e:	99 1f       	adc	r25, r25
     920:	aa 1f       	adc	r26, r26
     922:	bb 1f       	adc	r27, r27
     924:	88 0f       	add	r24, r24
     926:	99 1f       	adc	r25, r25
     928:	aa 1f       	adc	r26, r26
     92a:	bb 1f       	adc	r27, r27
     92c:	9c 01       	movw	r18, r24
     92e:	ad 01       	movw	r20, r26
     930:	22 0f       	add	r18, r18
     932:	33 1f       	adc	r19, r19
     934:	44 1f       	adc	r20, r20
     936:	55 1f       	adc	r21, r21
     938:	22 0f       	add	r18, r18
     93a:	33 1f       	adc	r19, r19
     93c:	44 1f       	adc	r20, r20
     93e:	55 1f       	adc	r21, r21
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	74 e2       	ldi	r23, 0x24	; 36
     944:	84 ef       	ldi	r24, 0xF4	; 244
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	0e 94 9f 1a 	call	0x353e	; 0x353e <__udivmodsi4>
     94c:	21 50       	subi	r18, 0x01	; 1
     94e:	31 09       	sbc	r19, r1
	
	//Set BAUD rate.
	UBRR0H = (unsigned char) (ubrr >> 8);
     950:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) ubrr;
     954:	20 93 c4 00 	sts	0x00C4, r18
	/*Set frame format. 8 data bit(settings bits UCSZ00 and UCSZ01  UCSR0B), 1 stop bit(by default and need not to be worried about). 
	The UCSZ01:0 bits combined with the UCSZ02 bit in UCSR0B sets the number of data
	bits (Character Size) in the frame that the Receiver and Transmitter use. 
	If a change on frame format is needed, make sure to modify UCSR0B register above accordingly.
	See datasheet pg. 390.*/
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
     958:	86 e0       	ldi	r24, 0x06	; 6
     95a:	80 93 c2 00 	sts	0x00C2, r24
	
	//Enable receiver and transmitter. Enable the USART Receive Complete interrupt(RXCIE).
	//UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0));
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);//Enable RX/TX, no interrupts
     95e:	88 e1       	ldi	r24, 0x18	; 24
     960:	80 93 c1 00 	sts	0x00C1, r24
     964:	08 95       	ret

00000966 <USART0_Transmit>:
Function contains busy loops for simplicity in debugging. Not production code.
  @brief Transmits a byte via USART0
  @param[in] data byte to be transmitted
*****************************************************************************/
void USART0_Transmit(unsigned char data){
	while(!(UCSR0A & (1 << UDRE0))); //Wait for the empty transmit buffer. (Waiting UDR0 to be empty.)
     966:	e0 ec       	ldi	r30, 0xC0	; 192
     968:	f0 e0       	ldi	r31, 0x00	; 0
     96a:	90 81       	ld	r25, Z
     96c:	95 ff       	sbrs	r25, 5
     96e:	fd cf       	rjmp	.-6      	; 0x96a <USART0_Transmit+0x4>
		UDR0 = data;			//store the data in the USART Data Register
     970:	80 93 c6 00 	sts	0x00C6, r24
     974:	08 95       	ret

00000976 <USART0_putchar_printf>:
  @brief Called when stdout is being printed to USART0 (this is set up at runtime)
  @param[in] var byte to transmit
  @param[in/out] *stream Pointer to a stdio.h FILE io stream
  @return Status
*****************************************************************************/
int USART0_putchar_printf(char var, FILE *stream) {
     976:	cf 93       	push	r28
     978:	c8 2f       	mov	r28, r24
	if (var == '\n') USART0_Transmit('\r');
     97a:	8a 30       	cpi	r24, 0x0A	; 10
     97c:	19 f4       	brne	.+6      	; 0x984 <USART0_putchar_printf+0xe>
     97e:	8d e0       	ldi	r24, 0x0D	; 13
     980:	0e 94 b3 04 	call	0x966	; 0x966 <USART0_Transmit>
	USART0_Transmit(var);
     984:	8c 2f       	mov	r24, r28
     986:	0e 94 b3 04 	call	0x966	; 0x966 <USART0_Transmit>
	return 0;
}
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	cf 91       	pop	r28
     990:	08 95       	ret

00000992 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     992:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     994:	0f b6       	in	r0, 0x3f	; 63
     996:	f8 94       	cli
     998:	a8 95       	wdr
     99a:	80 91 60 00 	lds	r24, 0x0060
     99e:	88 61       	ori	r24, 0x18	; 24
     9a0:	80 93 60 00 	sts	0x0060, r24
     9a4:	10 92 60 00 	sts	0x0060, r1
     9a8:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
     9aa:	e1 e6       	ldi	r30, 0x61	; 97
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	80 e8       	ldi	r24, 0x80	; 128
     9b0:	80 83       	st	Z, r24
  CLKPR = 0;
     9b2:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     9b4:	78 94       	sei

  HAL_TimerInit();
     9b6:	0e 94 de 04 	call	0x9bc	; 0x9bc <HAL_TimerInit>
     9ba:	08 95       	ret

000009bc <HAL_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_TimerInit(void)
{
  halTimerIrqCount = 0;
     9bc:	10 92 cd 0a 	sts	0x0ACD, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
     9c0:	80 e2       	ldi	r24, 0x20	; 32
     9c2:	9e e4       	ldi	r25, 0x4E	; 78
     9c4:	90 93 a9 00 	sts	0x00A9, r25
     9c8:	80 93 a8 00 	sts	0x00A8, r24
  TCCR4B = (1 << WGM12);              // CTC mode
     9cc:	e1 ea       	ldi	r30, 0xA1	; 161
     9ce:	f0 e0       	ldi	r31, 0x00	; 0
     9d0:	88 e0       	ldi	r24, 0x08	; 8
     9d2:	80 83       	st	Z, r24
  TCCR4B |= (1 << CS11);              // Prescaler 8
     9d4:	80 81       	ld	r24, Z
     9d6:	82 60       	ori	r24, 0x02	; 2
     9d8:	80 83       	st	Z, r24
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
     9da:	e2 e7       	ldi	r30, 0x72	; 114
     9dc:	f0 e0       	ldi	r31, 0x00	; 0
     9de:	80 81       	ld	r24, Z
     9e0:	82 60       	ori	r24, 0x02	; 2
     9e2:	80 83       	st	Z, r24
     9e4:	08 95       	ret

000009e6 <__vector_42>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     9e6:	1f 92       	push	r1
     9e8:	0f 92       	push	r0
     9ea:	0f b6       	in	r0, 0x3f	; 63
     9ec:	0f 92       	push	r0
     9ee:	11 24       	eor	r1, r1
     9f0:	8f 93       	push	r24
  halTimerIrqCount++;
     9f2:	80 91 cd 0a 	lds	r24, 0x0ACD
     9f6:	8f 5f       	subi	r24, 0xFF	; 255
     9f8:	80 93 cd 0a 	sts	0x0ACD, r24
}
     9fc:	8f 91       	pop	r24
     9fe:	0f 90       	pop	r0
     a00:	0f be       	out	0x3f, r0	; 63
     a02:	0f 90       	pop	r0
     a04:	1f 90       	pop	r1
     a06:	18 95       	reti

00000a08 <NWK_Init>:
/*************************************************************************//**
  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
  nwkIb.nwkSeqNum = 0;
     a08:	ee ec       	ldi	r30, 0xCE	; 206
     a0a:	fa e0       	ldi	r31, 0x0A	; 10
     a0c:	14 82       	std	Z+4, r1	; 0x04
  nwkIb.macSeqNum = 0;
     a0e:	15 82       	std	Z+5, r1	; 0x05
  nwkIb.addr = 0;
     a10:	11 82       	std	Z+1, r1	; 0x01
     a12:	10 82       	st	Z, r1
  nwkIb.lock = 0;
     a14:	17 a2       	std	Z+39, r1	; 0x27
     a16:	16 a2       	std	Z+38, r1	; 0x26
     a18:	e4 ed       	ldi	r30, 0xD4	; 212
     a1a:	fa e0       	ldi	r31, 0x0A	; 10
     a1c:	84 ef       	ldi	r24, 0xF4	; 244
     a1e:	9a e0       	ldi	r25, 0x0A	; 10

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
    nwkIb.endpoint[i] = NULL;
     a20:	11 92       	st	Z+, r1
     a22:	11 92       	st	Z+, r1
  nwkIb.nwkSeqNum = 0;
  nwkIb.macSeqNum = 0;
  nwkIb.addr = 0;
  nwkIb.lock = 0;

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
     a24:	e8 17       	cp	r30, r24
     a26:	f9 07       	cpc	r31, r25
     a28:	d9 f7       	brne	.-10     	; 0xa20 <NWK_Init+0x18>
    nwkIb.endpoint[i] = NULL;

  nwkTxInit();
     a2a:	0e 94 04 06 	call	0xc08	; 0xc08 <nwkTxInit>
  nwkRxInit();
     a2e:	0e 94 84 05 	call	0xb08	; 0xb08 <nwkRxInit>
  nwkFrameInit();
     a32:	0e 94 2c 05 	call	0xa58	; 0xa58 <nwkFrameInit>
  nwkDataReqInit();
     a36:	0e 94 27 05 	call	0xa4e	; 0xa4e <nwkDataReqInit>
     a3a:	08 95       	ret

00000a3c <NWK_OpenEndpoint>:
  @param[in] id Endpoint index (1-15)
  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
  nwkIb.endpoint[id] = handler;
     a3c:	e8 2f       	mov	r30, r24
     a3e:	f0 e0       	ldi	r31, 0x00	; 0
     a40:	ee 0f       	add	r30, r30
     a42:	ff 1f       	adc	r31, r31
     a44:	ec 52       	subi	r30, 0x2C	; 44
     a46:	f5 4f       	sbci	r31, 0xF5	; 245
     a48:	71 83       	std	Z+1, r23	; 0x01
     a4a:	60 83       	st	Z, r22
     a4c:	08 95       	ret

00000a4e <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     a4e:	10 92 f7 05 	sts	0x05F7, r1
     a52:	10 92 f6 05 	sts	0x05F6, r1
     a56:	08 95       	ret

00000a58 <nwkFrameInit>:
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     a58:	10 92 f8 05 	sts	0x05F8, r1
     a5c:	10 92 81 06 	sts	0x0681, r1
     a60:	10 92 0a 07 	sts	0x070A, r1
     a64:	10 92 93 07 	sts	0x0793, r1
     a68:	10 92 1c 08 	sts	0x081C, r1
     a6c:	08 95       	ret

00000a6e <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     a6e:	00 97       	sbiw	r24, 0x00	; 0
     a70:	41 f0       	breq	.+16     	; 0xa82 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     a72:	fc 01       	movw	r30, r24
     a74:	e7 57       	subi	r30, 0x77	; 119
     a76:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     a78:	88 e0       	ldi	r24, 0x08	; 8
     a7a:	e5 3a       	cpi	r30, 0xA5	; 165
     a7c:	f8 07       	cpc	r31, r24
     a7e:	18 f0       	brcs	.+6      	; 0xa86 <nwkFrameNext+0x18>
     a80:	15 c0       	rjmp	.+42     	; 0xaac <nwkFrameNext+0x3e>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     a82:	e8 ef       	ldi	r30, 0xF8	; 248
     a84:	f5 e0       	ldi	r31, 0x05	; 5
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     a86:	80 81       	ld	r24, Z
     a88:	88 23       	and	r24, r24
     a8a:	39 f0       	breq	.+14     	; 0xa9a <nwkFrameNext+0x2c>
     a8c:	03 c0       	rjmp	.+6      	; 0xa94 <nwkFrameNext+0x26>
     a8e:	80 81       	ld	r24, Z
     a90:	88 23       	and	r24, r24
     a92:	19 f0       	breq	.+6      	; 0xa9a <nwkFrameNext+0x2c>
      return frame;
     a94:	8e 2f       	mov	r24, r30
     a96:	9f 2f       	mov	r25, r31
     a98:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     a9a:	e7 57       	subi	r30, 0x77	; 119
     a9c:	ff 4f       	sbci	r31, 0xFF	; 255
     a9e:	88 e0       	ldi	r24, 0x08	; 8
     aa0:	e5 3a       	cpi	r30, 0xA5	; 165
     aa2:	f8 07       	cpc	r31, r24
     aa4:	a0 f3       	brcs	.-24     	; 0xa8e <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     aa6:	80 e0       	ldi	r24, 0x00	; 0
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	08 95       	ret
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	90 e0       	ldi	r25, 0x00	; 0
}
     ab0:	08 95       	ret

00000ab2 <nwkRxServiceDataInd>:
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
     ab2:	dc 01       	movw	r26, r24
     ab4:	19 96       	adiw	r26, 0x09	; 9
     ab6:	2c 91       	ld	r18, X
     ab8:	19 97       	sbiw	r26, 0x09	; 9
     aba:	22 23       	and	r18, r18
     abc:	51 f0       	breq	.+20     	; 0xad2 <nwkRxServiceDataInd+0x20>
    return false;

  switch (ind->data[0])
     abe:	17 96       	adiw	r26, 0x07	; 7
     ac0:	ed 91       	ld	r30, X+
     ac2:	fc 91       	ld	r31, X
     ac4:	18 97       	sbiw	r26, 0x08	; 8
     ac6:	20 81       	ld	r18, Z
     ac8:	21 11       	cpse	r18, r1
     aca:	05 c0       	rjmp	.+10     	; 0xad6 <nwkRxServiceDataInd+0x24>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
     acc:	0e 94 27 06 	call	0xc4e	; 0xc4e <nwkTxAckReceived>
     ad0:	08 95       	ret
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    return false;
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	08 95       	ret
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
     ad6:	80 e0       	ldi	r24, 0x00	; 0
  }
}
     ad8:	08 95       	ret

00000ada <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
     ada:	bc 01       	movw	r22, r24
     adc:	e6 eb       	ldi	r30, 0xB6	; 182
     ade:	f8 e0       	ldi	r31, 0x08	; 8
     ae0:	28 ee       	ldi	r18, 0xE8	; 232
     ae2:	38 e0       	ldi	r19, 0x08	; 8
  bool restart = false;
     ae4:	40 e0       	ldi	r20, 0x00	; 0
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
     ae6:	51 e0       	ldi	r21, 0x01	; 1
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
     ae8:	90 81       	ld	r25, Z
     aea:	99 23       	and	r25, r25
     aec:	19 f0       	breq	.+6      	; 0xaf4 <nwkRxDuplicateRejectionTimerHandler+0x1a>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
     aee:	91 50       	subi	r25, 0x01	; 1
     af0:	90 83       	st	Z, r25
      restart = true;
     af2:	45 2f       	mov	r20, r21
     af4:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     af6:	e2 17       	cp	r30, r18
     af8:	f3 07       	cpc	r31, r19
     afa:	b1 f7       	brne	.-20     	; 0xae8 <nwkRxDuplicateRejectionTimerHandler+0xe>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
     afc:	44 23       	and	r20, r20
     afe:	19 f0       	breq	.+6      	; 0xb06 <nwkRxDuplicateRejectionTimerHandler+0x2c>
     b00:	cb 01       	movw	r24, r22
    SYS_TimerStart(timer);
     b02:	0e 94 57 09 	call	0x12ae	; 0x12ae <SYS_TimerStart>
     b06:	08 95       	ret

00000b08 <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
     b08:	e6 eb       	ldi	r30, 0xB6	; 182
     b0a:	f8 e0       	ldi	r31, 0x08	; 8
     b0c:	88 ee       	ldi	r24, 0xE8	; 232
     b0e:	98 e0       	ldi	r25, 0x08	; 8
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
     b10:	10 82       	st	Z, r1
     b12:	35 96       	adiw	r30, 0x05	; 5
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     b14:	e8 17       	cp	r30, r24
     b16:	f9 07       	cpc	r31, r25
     b18:	d9 f7       	brne	.-10     	; 0xb10 <nwkRxInit+0x8>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
     b1a:	e5 ea       	ldi	r30, 0xA5	; 165
     b1c:	f8 e0       	ldi	r31, 0x08	; 8
     b1e:	84 e6       	ldi	r24, 0x64	; 100
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	86 83       	std	Z+6, r24	; 0x06
     b28:	97 83       	std	Z+7, r25	; 0x07
     b2a:	a0 87       	std	Z+8, r26	; 0x08
     b2c:	b1 87       	std	Z+9, r27	; 0x09
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
     b2e:	12 86       	std	Z+10, r1	; 0x0a
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
     b30:	8d e6       	ldi	r24, 0x6D	; 109
     b32:	95 e0       	ldi	r25, 0x05	; 5
     b34:	94 87       	std	Z+12, r25	; 0x0c
     b36:	83 87       	std	Z+11, r24	; 0x0b

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
     b38:	69 e5       	ldi	r22, 0x59	; 89
     b3a:	75 e0       	ldi	r23, 0x05	; 5
     b3c:	80 e0       	ldi	r24, 0x00	; 0
     b3e:	0e 94 1e 05 	call	0xa3c	; 0xa3c <NWK_OpenEndpoint>
     b42:	08 95       	ret

00000b44 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
     b44:	ef 92       	push	r14
     b46:	ff 92       	push	r15
     b48:	0f 93       	push	r16
     b4a:	1f 93       	push	r17
     b4c:	cf 93       	push	r28
     b4e:	7c 01       	movw	r14, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
     b50:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
     b56:	01 e0       	ldi	r16, 0x01	; 1

      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
     b58:	c3 e1       	ldi	r28, 0x13	; 19
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
     b5a:	13 c0       	rjmp	.+38     	; 0xb82 <nwkTxDelayTimerHandler+0x3e>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
     b5c:	fc 01       	movw	r30, r24
     b5e:	20 81       	ld	r18, Z
     b60:	21 31       	cpi	r18, 0x11	; 17
     b62:	79 f4       	brne	.+30     	; 0xb82 <nwkTxDelayTimerHandler+0x3e>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
     b64:	ec 57       	subi	r30, 0x7C	; 124
     b66:	ff 4f       	sbci	r31, 0xFF	; 255
     b68:	20 81       	ld	r18, Z
     b6a:	31 81       	ldd	r19, Z+1	; 0x01
     b6c:	21 50       	subi	r18, 0x01	; 1
     b6e:	31 09       	sbc	r19, r1
     b70:	31 83       	std	Z+1, r19	; 0x01
     b72:	20 83       	st	Z, r18
     b74:	23 2b       	or	r18, r19
     b76:	21 f4       	brne	.+8      	; 0xb80 <nwkTxDelayTimerHandler+0x3c>
        frame->state = NWK_TX_STATE_SEND;
     b78:	fc 01       	movw	r30, r24
     b7a:	c0 83       	st	Z, r28

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
     b7c:	10 2f       	mov	r17, r16
     b7e:	01 c0       	rjmp	.+2      	; 0xb82 <nwkTxDelayTimerHandler+0x3e>
     b80:	10 2f       	mov	r17, r16
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
     b82:	0e 94 37 05 	call	0xa6e	; 0xa6e <nwkFrameNext>
     b86:	00 97       	sbiw	r24, 0x00	; 0
     b88:	49 f7       	brne	.-46     	; 0xb5c <nwkTxDelayTimerHandler+0x18>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
     b8a:	11 23       	and	r17, r17
     b8c:	19 f0       	breq	.+6      	; 0xb94 <nwkTxDelayTimerHandler+0x50>
    SYS_TimerStart(timer);
     b8e:	c7 01       	movw	r24, r14
     b90:	0e 94 57 09 	call	0x12ae	; 0x12ae <SYS_TimerStart>
}
     b94:	cf 91       	pop	r28
     b96:	1f 91       	pop	r17
     b98:	0f 91       	pop	r16
     b9a:	ff 90       	pop	r15
     b9c:	ef 90       	pop	r14
     b9e:	08 95       	ret

00000ba0 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
     ba0:	ef 92       	push	r14
     ba2:	ff 92       	push	r15
     ba4:	0f 93       	push	r16
     ba6:	1f 93       	push	r17
     ba8:	cf 93       	push	r28
     baa:	df 93       	push	r29
     bac:	7c 01       	movw	r14, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
     bae:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
     bb4:	01 e0       	ldi	r16, 0x01	; 1

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
     bb6:	d7 e1       	ldi	r29, 0x17	; 23
  frame->tx.status = status;
     bb8:	c0 e1       	ldi	r28, 0x10	; 16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
     bba:	16 c0       	rjmp	.+44     	; 0xbe8 <nwkTxAckWaitTimerHandler+0x48>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
     bbc:	fc 01       	movw	r30, r24
     bbe:	20 81       	ld	r18, Z
     bc0:	26 31       	cpi	r18, 0x16	; 22
     bc2:	91 f4       	brne	.+36     	; 0xbe8 <nwkTxAckWaitTimerHandler+0x48>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
     bc4:	ec 57       	subi	r30, 0x7C	; 124
     bc6:	ff 4f       	sbci	r31, 0xFF	; 255
     bc8:	20 81       	ld	r18, Z
     bca:	31 81       	ldd	r19, Z+1	; 0x01
     bcc:	21 50       	subi	r18, 0x01	; 1
     bce:	31 09       	sbc	r19, r1
     bd0:	31 83       	std	Z+1, r19	; 0x01
     bd2:	20 83       	st	Z, r18
     bd4:	23 2b       	or	r18, r19
     bd6:	39 f4       	brne	.+14     	; 0xbe6 <nwkTxAckWaitTimerHandler+0x46>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
     bd8:	fc 01       	movw	r30, r24
     bda:	d0 83       	st	Z, r29
  frame->tx.status = status;
     bdc:	ed 57       	subi	r30, 0x7D	; 125
     bde:	ff 4f       	sbci	r31, 0xFF	; 255
     be0:	c0 83       	st	Z, r28

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
     be2:	10 2f       	mov	r17, r16
     be4:	01 c0       	rjmp	.+2      	; 0xbe8 <nwkTxAckWaitTimerHandler+0x48>
     be6:	10 2f       	mov	r17, r16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
     be8:	0e 94 37 05 	call	0xa6e	; 0xa6e <nwkFrameNext>
     bec:	00 97       	sbiw	r24, 0x00	; 0
     bee:	31 f7       	brne	.-52     	; 0xbbc <nwkTxAckWaitTimerHandler+0x1c>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
     bf0:	11 23       	and	r17, r17
     bf2:	19 f0       	breq	.+6      	; 0xbfa <nwkTxAckWaitTimerHandler+0x5a>
    SYS_TimerStart(timer);
     bf4:	c7 01       	movw	r24, r14
     bf6:	0e 94 57 09 	call	0x12ae	; 0x12ae <SYS_TimerStart>
}
     bfa:	df 91       	pop	r29
     bfc:	cf 91       	pop	r28
     bfe:	1f 91       	pop	r17
     c00:	0f 91       	pop	r16
     c02:	ff 90       	pop	r15
     c04:	ef 90       	pop	r14
     c06:	08 95       	ret

00000c08 <nwkTxInit>:
/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
     c08:	10 92 ff 08 	sts	0x08FF, r1
     c0c:	10 92 fe 08 	sts	0x08FE, r1

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
     c10:	e1 ef       	ldi	r30, 0xF1	; 241
     c12:	f8 e0       	ldi	r31, 0x08	; 8
     c14:	82 e3       	ldi	r24, 0x32	; 50
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	a0 e0       	ldi	r26, 0x00	; 0
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	86 83       	std	Z+6, r24	; 0x06
     c1e:	97 83       	std	Z+7, r25	; 0x07
     c20:	a0 87       	std	Z+8, r26	; 0x08
     c22:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
     c24:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
     c26:	80 ed       	ldi	r24, 0xD0	; 208
     c28:	95 e0       	ldi	r25, 0x05	; 5
     c2a:	94 87       	std	Z+12, r25	; 0x0c
     c2c:	83 87       	std	Z+11, r24	; 0x0b

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
     c2e:	e4 ee       	ldi	r30, 0xE4	; 228
     c30:	f8 e0       	ldi	r31, 0x08	; 8
     c32:	8a e0       	ldi	r24, 0x0A	; 10
     c34:	90 e0       	ldi	r25, 0x00	; 0
     c36:	a0 e0       	ldi	r26, 0x00	; 0
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	86 83       	std	Z+6, r24	; 0x06
     c3c:	97 83       	std	Z+7, r25	; 0x07
     c3e:	a0 87       	std	Z+8, r26	; 0x08
     c40:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
     c42:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
     c44:	82 ea       	ldi	r24, 0xA2	; 162
     c46:	95 e0       	ldi	r25, 0x05	; 5
     c48:	94 87       	std	Z+12, r25	; 0x0c
     c4a:	83 87       	std	Z+11, r24	; 0x0b
     c4c:	08 95       	ret

00000c4e <nwkTxAckReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
     c52:	fc 01       	movw	r30, r24
     c54:	c7 81       	ldd	r28, Z+7	; 0x07
     c56:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
     c58:	81 85       	ldd	r24, Z+9	; 0x09
     c5a:	83 30       	cpi	r24, 0x03	; 3
     c5c:	c9 f4       	brne	.+50     	; 0xc90 <nwkTxAckReceived+0x42>
     c5e:	80 e0       	ldi	r24, 0x00	; 0
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	10 c0       	rjmp	.+32     	; 0xc84 <nwkTxAckReceived+0x36>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
     c64:	fc 01       	movw	r30, r24
     c66:	20 81       	ld	r18, Z
     c68:	26 31       	cpi	r18, 0x16	; 22
     c6a:	61 f4       	brne	.+24     	; 0xc84 <nwkTxAckReceived+0x36>
     c6c:	34 85       	ldd	r19, Z+12	; 0x0c
     c6e:	29 81       	ldd	r18, Y+1	; 0x01
     c70:	32 13       	cpse	r19, r18
     c72:	08 c0       	rjmp	.+16     	; 0xc84 <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
     c74:	27 e1       	ldi	r18, 0x17	; 23
     c76:	20 83       	st	Z, r18
      frame->tx.control = command->control;
     c78:	2a 81       	ldd	r18, Y+2	; 0x02
     c7a:	ea 57       	subi	r30, 0x7A	; 122
     c7c:	ff 4f       	sbci	r31, 0xFF	; 255
     c7e:	20 83       	st	Z, r18
      return true;
     c80:	81 e0       	ldi	r24, 0x01	; 1
     c82:	07 c0       	rjmp	.+14     	; 0xc92 <nwkTxAckReceived+0x44>
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
     c84:	0e 94 37 05 	call	0xa6e	; 0xa6e <nwkFrameNext>
     c88:	00 97       	sbiw	r24, 0x00	; 0
     c8a:	61 f7       	brne	.-40     	; 0xc64 <nwkTxAckReceived+0x16>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	01 c0       	rjmp	.+2      	; 0xc92 <nwkTxAckReceived+0x44>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
     c90:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	08 95       	ret

00000c98 <phyTrxSetState>:

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
  TRX_STATE_REG = TRX_CMD_FORCE_TRX_OFF;
     c98:	93 e0       	ldi	r25, 0x03	; 3
     c9a:	90 93 42 01 	sts	0x0142, r25
  while (TRX_STATUS_TRX_OFF != TRX_STATUS_REG_s.trxStatus);
     c9e:	e1 e4       	ldi	r30, 0x41	; 65
     ca0:	f1 e0       	ldi	r31, 0x01	; 1
     ca2:	90 81       	ld	r25, Z
     ca4:	9f 71       	andi	r25, 0x1F	; 31
     ca6:	98 30       	cpi	r25, 0x08	; 8
     ca8:	e1 f7       	brne	.-8      	; 0xca2 <phyTrxSetState+0xa>

  TRX_STATE_REG = state;
     caa:	80 93 42 01 	sts	0x0142, r24
  while (state != TRX_STATUS_REG_s.trxStatus);
     cae:	e1 e4       	ldi	r30, 0x41	; 65
     cb0:	f1 e0       	ldi	r31, 0x01	; 1
     cb2:	90 81       	ld	r25, Z
     cb4:	9f 71       	andi	r25, 0x1F	; 31
     cb6:	98 13       	cpse	r25, r24
     cb8:	fc cf       	rjmp	.-8      	; 0xcb2 <phyTrxSetState+0x1a>
}
     cba:	08 95       	ret

00000cbc <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
     cbc:	e9 e3       	ldi	r30, 0x39	; 57
     cbe:	f1 e0       	ldi	r31, 0x01	; 1
     cc0:	80 81       	ld	r24, Z
     cc2:	81 60       	ori	r24, 0x01	; 1
     cc4:	80 83       	st	Z, r24

  phyRxState = false;
     cc6:	10 92 01 09 	sts	0x0901, r1
  phyBand = 0;
     cca:	10 92 00 09 	sts	0x0900, r1
  phyState = PHY_STATE_IDLE;
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	80 93 02 09 	sts	0x0902, r24

  phyTrxSetState(TRX_CMD_TRX_OFF);
     cd4:	88 e0       	ldi	r24, 0x08	; 8
     cd6:	0e 94 4c 06 	call	0xc98	; 0xc98 <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
     cda:	8b ee       	ldi	r24, 0xEB	; 235
     cdc:	80 93 56 01 	sts	0x0156, r24

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
     ce0:	ec e4       	ldi	r30, 0x4C	; 76
     ce2:	f1 e0       	ldi	r31, 0x01	; 1
     ce4:	80 81       	ld	r24, Z
     ce6:	80 68       	ori	r24, 0x80	; 128
     ce8:	80 83       	st	Z, r24
     cea:	08 95       	ret

00000cec <sensor_handler>:

/*************************************************************************//**
  @brief sensor_handler function to decide the execution logic of a sensor according to its state, return 1 if it has some borrow time 
*****************************************************************************/
int sensor_handler( struct event *p )
{
     cec:	0f 93       	push	r16
     cee:	1f 93       	push	r17
     cf0:	cf 93       	push	r28
     cf2:	df 93       	push	r29
     cf4:	ec 01       	movw	r28, r24
	int retNum;
	int data = 0;
	BaseSensor *sp;
	/* sanity check */
	if( p == EV_NULL )
     cf6:	89 2b       	or	r24, r25
     cf8:	59 f4       	brne	.+22     	; 0xd10 <sensor_handler+0x24>
	{
		#ifdef DEBUG
		printf("Null Event Error !!!");
     cfa:	8a ec       	ldi	r24, 0xCA	; 202
     cfc:	92 e0       	ldi	r25, 0x02	; 2
     cfe:	9f 93       	push	r25
     d00:	8f 93       	push	r24
     d02:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <printf>
		#endif
		return 0;
     d06:	0f 90       	pop	r0
     d08:	0f 90       	pop	r0
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	6a c0       	rjmp	.+212    	; 0xde4 <sensor_handler+0xf8>
	}
	sp = ( BaseSensor * )( p->sp );
     d10:	0a 85       	ldd	r16, Y+10	; 0x0a
     d12:	1b 85       	ldd	r17, Y+11	; 0x0b

	#ifdef DEBUG
	// printf("cur_state = %d\n", p->cur_state);
	#endif
	switch( p->cur_state )
     d14:	9a 89       	ldd	r25, Y+18	; 0x12
     d16:	91 30       	cpi	r25, 0x01	; 1
     d18:	a9 f0       	breq	.+42     	; 0xd44 <sensor_handler+0x58>
     d1a:	38 f0       	brcs	.+14     	; 0xd2a <sensor_handler+0x3e>
     d1c:	92 30       	cpi	r25, 0x02	; 2
     d1e:	09 f4       	brne	.+2      	; 0xd22 <sensor_handler+0x36>
     d20:	48 c0       	rjmp	.+144    	; 0xdb2 <sensor_handler+0xc6>
     d22:	94 30       	cpi	r25, 0x04	; 4
     d24:	09 f4       	brne	.+2      	; 0xd28 <sensor_handler+0x3c>
     d26:	54 c0       	rjmp	.+168    	; 0xdd0 <sensor_handler+0xe4>
     d28:	5b c0       	rjmp	.+182    	; 0xde0 <sensor_handler+0xf4>
	{
		/* New : init first, if retNum is not 0 goto Oops state */
		case New :
		// the way to call init() is different than most other functions, since it is virtual function in BaseDevice .
		retNum = sp->abstract.device_vt->init( &(sp->abstract) );
     d2a:	d8 01       	movw	r26, r16
     d2c:	ed 91       	ld	r30, X+
     d2e:	fc 91       	ld	r31, X
     d30:	02 80       	ldd	r0, Z+2	; 0x02
     d32:	f3 81       	ldd	r31, Z+3	; 0x03
     d34:	e0 2d       	mov	r30, r0
     d36:	c8 01       	movw	r24, r16
     d38:	09 95       	icall
		if(retNum != 0)
		{
			p->cur_state = Oops;
		}
		p->cur_state = Ready;
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	8a 8b       	std	Y+18, r24	; 0x12
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	90 e0       	ldi	r25, 0x00	; 0
		if(retNum != 0)
		{
			p->cur_state = Oops;
		}
		p->cur_state = Ready;
		break;
     d42:	50 c0       	rjmp	.+160    	; 0xde4 <sensor_handler+0xf8>
		
		
		
		/* Ready : ready to activate collection request, if retNum is not 0 goto Oops state */
		case Ready :
		retNum = sp->vmt->Request(p->sp);
     d44:	d8 01       	movw	r26, r16
     d46:	1c 96       	adiw	r26, 0x0c	; 12
     d48:	ed 91       	ld	r30, X+
     d4a:	fc 91       	ld	r31, X
     d4c:	1d 97       	sbiw	r26, 0x0d	; 13
     d4e:	04 80       	ldd	r0, Z+4	; 0x04
     d50:	f5 81       	ldd	r31, Z+5	; 0x05
     d52:	e0 2d       	mov	r30, r0
     d54:	c8 01       	movw	r24, r16
     d56:	09 95       	icall
		if ( retNum == -1 )
     d58:	8f 3f       	cpi	r24, 0xFF	; 255
     d5a:	bf ef       	ldi	r27, 0xFF	; 255
     d5c:	9b 07       	cpc	r25, r27
     d5e:	29 f4       	brne	.+10     	; 0xd6a <sensor_handler+0x7e>
		{
			p->cur_state = Oops;
     d60:	84 e0       	ldi	r24, 0x04	; 4
     d62:	8a 8b       	std	Y+18, r24	; 0x12
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
     d64:	80 e0       	ldi	r24, 0x00	; 0
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	3d c0       	rjmp	.+122    	; 0xde4 <sensor_handler+0xf8>
		retNum = sp->vmt->Request(p->sp);
		if ( retNum == -1 )
		{
			p->cur_state = Oops;
		}
		else if( retNum == 0 )
     d6a:	00 97       	sbiw	r24, 0x00	; 0
     d6c:	81 f4       	brne	.+32     	; 0xd8e <sensor_handler+0xa2>
		{
			p->cur_state = Ready;
     d6e:	81 e0       	ldi	r24, 0x01	; 1
     d70:	8a 8b       	std	Y+18, r24	; 0x12
			data = sp->vmt->Collect(p->sp);
     d72:	d8 01       	movw	r26, r16
     d74:	1c 96       	adiw	r26, 0x0c	; 12
     d76:	ed 91       	ld	r30, X+
     d78:	fc 91       	ld	r31, X
     d7a:	1d 97       	sbiw	r26, 0x0d	; 13
     d7c:	06 80       	ldd	r0, Z+6	; 0x06
     d7e:	f7 81       	ldd	r31, Z+7	; 0x07
     d80:	e0 2d       	mov	r30, r0
     d82:	8a 85       	ldd	r24, Y+10	; 0x0a
     d84:	9b 85       	ldd	r25, Y+11	; 0x0b
     d86:	09 95       	icall
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	2b c0       	rjmp	.+86     	; 0xde4 <sensor_handler+0xf8>
			// printf("data : %d\n", data);
			// #endif
		}
		else
		{
			p->cur_state = Running;
     d8e:	22 e0       	ldi	r18, 0x02	; 2
     d90:	2a 8b       	std	Y+18, r18	; 0x12
			p->timeout = retNum;
     d92:	9d 83       	std	Y+5, r25	; 0x05
     d94:	8c 83       	std	Y+4, r24	; 0x04
			p->borrow_timeout = retNum;
     d96:	99 87       	std	Y+9, r25	; 0x09
     d98:	88 87       	std	Y+8, r24	; 0x08
			LL_POP( timeoutq );
     d9a:	80 91 a3 0a 	lds	r24, 0x0AA3
     d9e:	90 91 a4 0a 	lds	r25, 0x0AA4
     da2:	0e 94 bf 09 	call	0x137e	; 0x137e <ll_pop>
			insert_timeoutq_event( p );
     da6:	ce 01       	movw	r24, r28
     da8:	0e 94 a2 07 	call	0xf44	; 0xf44 <insert_timeoutq_event>
			return 1;
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	19 c0       	rjmp	.+50     	; 0xde4 <sensor_handler+0xf8>
		
		
		/* Running : ready to pull data right away */
		case Running :
		//      data = p->sp->vmt->Collect();
		p->cur_state = Ready;
     db2:	81 e0       	ldi	r24, 0x01	; 1
     db4:	8a 8b       	std	Y+18, r24	; 0x12
		p->sp->vmt->Collect(p->sp);
     db6:	d8 01       	movw	r26, r16
     db8:	1c 96       	adiw	r26, 0x0c	; 12
     dba:	ed 91       	ld	r30, X+
     dbc:	fc 91       	ld	r31, X
     dbe:	1d 97       	sbiw	r26, 0x0d	; 13
     dc0:	06 80       	ldd	r0, Z+6	; 0x06
     dc2:	f7 81       	ldd	r31, Z+7	; 0x07
     dc4:	e0 2d       	mov	r30, r0
     dc6:	c8 01       	movw	r24, r16
     dc8:	09 95       	icall
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
     dca:	80 e0       	ldi	r24, 0x00	; 0
     dcc:	90 e0       	ldi	r25, 0x00	; 0
		/* Running : ready to pull data right away */
		case Running :
		//      data = p->sp->vmt->Collect();
		p->cur_state = Ready;
		p->sp->vmt->Collect(p->sp);
		break;
     dce:	0a c0       	rjmp	.+20     	; 0xde4 <sensor_handler+0xf8>
		
		/* Oops : when some errors occur */
		case Oops :
		/* TODO : ( we may want to do something in reset function and ) re-init by setting the state to new */
#ifdef DEBUG
		      printf("Something really wrong happens\n");
     dd0:	8f ed       	ldi	r24, 0xDF	; 223
     dd2:	92 e0       	ldi	r25, 0x02	; 2
     dd4:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <puts>
#endif
		p->cur_state = New;
     dd8:	1a 8a       	std	Y+18, r1	; 0x12
		break;
	}
	return 0;
     dda:	80 e0       	ldi	r24, 0x00	; 0
     ddc:	90 e0       	ldi	r25, 0x00	; 0
		/* TODO : ( we may want to do something in reset function and ) re-init by setting the state to new */
#ifdef DEBUG
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
     dde:	02 c0       	rjmp	.+4      	; 0xde4 <sensor_handler+0xf8>
	}
	return 0;
     de0:	80 e0       	ldi	r24, 0x00	; 0
     de2:	90 e0       	ldi	r25, 0x00	; 0
	// printf(" run :\n\t");
	// p->sp->vmt->MyPrint(p->sp);

}
     de4:	df 91       	pop	r29
     de6:	cf 91       	pop	r28
     de8:	1f 91       	pop	r17
     dea:	0f 91       	pop	r16
     dec:	08 95       	ret

00000dee <device_handler>:
 */
/*************************************************************************//**
  @brief device_handler function to decide the execution logic of a non-sensor device according to its state.
*****************************************************************************/
int device_handler( struct event *p )
{
     dee:	0f 93       	push	r16
     df0:	1f 93       	push	r17
     df2:	cf 93       	push	r28
     df4:	df 93       	push	r29
     df6:	fc 01       	movw	r30, r24
	int retNum;
	BaseDevice * bdp = (BaseDevice *) ( p->load_p );
     df8:	c4 85       	ldd	r28, Z+12	; 0x0c
     dfa:	d5 85       	ldd	r29, Z+13	; 0x0d
	LoadDataDevice *ldp = (LoadDataDevice*) ( p->load_p );
	DemoStorageDevice *ddp = (DemoStorageDevice*) ( p->store_p );
     dfc:	06 85       	ldd	r16, Z+14	; 0x0e
     dfe:	17 85       	ldd	r17, Z+15	; 0x0f

	/* sanity check */
	if( p == EV_NULL )
     e00:	89 2b       	or	r24, r25
     e02:	29 f4       	brne	.+10     	; 0xe0e <device_handler+0x20>
	{
		#ifdef DEBUG
		printf("Null Event Error !!!\n");
     e04:	8a ec       	ldi	r24, 0xCA	; 202
     e06:	92 e0       	ldi	r25, 0x02	; 2
     e08:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <puts>
		#endif
		return 0;
     e0c:	35 c0       	rjmp	.+106    	; 0xe78 <device_handler+0x8a>
	}
	
	switch( p->cur_state )
     e0e:	92 89       	ldd	r25, Z+18	; 0x12
     e10:	99 23       	and	r25, r25
     e12:	19 f0       	breq	.+6      	; 0xe1a <device_handler+0x2c>
     e14:	91 30       	cpi	r25, 0x01	; 1
     e16:	21 f0       	breq	.+8      	; 0xe20 <device_handler+0x32>
     e18:	2f c0       	rjmp	.+94     	; 0xe78 <device_handler+0x8a>
	{
		/* New : init first, if retNum is not 0 goto Oops state */
		case New :
			p->cur_state = Ready;
     e1a:	81 e0       	ldi	r24, 0x01	; 1
     e1c:	82 8b       	std	Z+18, r24	; 0x12
			break;
     e1e:	2c c0       	rjmp	.+88     	; 0xe78 <device_handler+0x8a>
		case Ready :
			p->cur_state = Ready;
			if( bdp->device_vt->getType(bdp) == TYPE_DEVICE )
     e20:	e8 81       	ld	r30, Y
     e22:	f9 81       	ldd	r31, Y+1	; 0x01
     e24:	06 80       	ldd	r0, Z+6	; 0x06
     e26:	f7 81       	ldd	r31, Z+7	; 0x07
     e28:	e0 2d       	mov	r30, r0
     e2a:	ce 01       	movw	r24, r28
     e2c:	09 95       	icall
     e2e:	05 97       	sbiw	r24, 0x05	; 5
     e30:	81 f4       	brne	.+32     	; 0xe52 <device_handler+0x64>
			{
				printf("Load Device\n");
     e32:	8e ef       	ldi	r24, 0xFE	; 254
     e34:	92 e0       	ldi	r25, 0x02	; 2
     e36:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <puts>
				ldp->vmt->Execute(ldp);
     e3a:	ea 81       	ldd	r30, Y+2	; 0x02
     e3c:	fb 81       	ldd	r31, Y+3	; 0x03
     e3e:	02 80       	ldd	r0, Z+2	; 0x02
     e40:	f3 81       	ldd	r31, Z+3	; 0x03
     e42:	e0 2d       	mov	r30, r0
     e44:	ce 01       	movw	r24, r28
     e46:	09 95       	icall
				printf("Load Device Finish\n");
     e48:	8a e0       	ldi	r24, 0x0A	; 10
     e4a:	93 e0       	ldi	r25, 0x03	; 3
     e4c:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <puts>
     e50:	13 c0       	rjmp	.+38     	; 0xe78 <device_handler+0x8a>
			}	
			else if( bdp->device_vt->getType(bdp) == TYPE_STORAGE_DEVICE )
     e52:	e8 81       	ld	r30, Y
     e54:	f9 81       	ldd	r31, Y+1	; 0x01
     e56:	06 80       	ldd	r0, Z+6	; 0x06
     e58:	f7 81       	ldd	r31, Z+7	; 0x07
     e5a:	e0 2d       	mov	r30, r0
     e5c:	ce 01       	movw	r24, r28
     e5e:	09 95       	icall
     e60:	04 97       	sbiw	r24, 0x04	; 4
     e62:	51 f4       	brne	.+20     	; 0xe78 <device_handler+0x8a>
			{
				ddp->vmt->Execute(ddp);
     e64:	d8 01       	movw	r26, r16
     e66:	12 96       	adiw	r26, 0x02	; 2
     e68:	ed 91       	ld	r30, X+
     e6a:	fc 91       	ld	r31, X
     e6c:	13 97       	sbiw	r26, 0x03	; 3
     e6e:	02 80       	ldd	r0, Z+2	; 0x02
     e70:	f3 81       	ldd	r31, Z+3	; 0x03
     e72:	e0 2d       	mov	r30, r0
     e74:	c8 01       	movw	r24, r16
     e76:	09 95       	icall
			break;
		default :
			break;
	}
	return 0;
}
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	08 95       	ret

00000e86 <init_timeoutq>:

/*************************************************************************//**
  @brief Init function of scheduler, which initialize all events and put them into freelist
*****************************************************************************/
void init_timeoutq()
{
     e86:	0f 93       	push	r16
     e88:	1f 93       	push	r17
     e8a:	cf 93       	push	r28
     e8c:	df 93       	push	r29
	int i;

	timeoutq = (struct event *)&TQ;
     e8e:	ef e9       	ldi	r30, 0x9F	; 159
     e90:	fa e0       	ldi	r31, 0x0A	; 10
     e92:	f0 93 a4 0a 	sts	0x0AA4, r31
     e96:	e0 93 a3 0a 	sts	0x0AA3, r30
	LL_INIT(timeoutq);
     e9a:	f3 83       	std	Z+3, r31	; 0x03
     e9c:	e2 83       	std	Z+2, r30	; 0x02
     e9e:	f1 83       	std	Z+1, r31	; 0x01
     ea0:	e0 83       	st	Z, r30
	freelist = (struct event *)&FL;
     ea2:	e7 ec       	ldi	r30, 0xC7	; 199
     ea4:	fa e0       	ldi	r31, 0x0A	; 10
     ea6:	f0 93 cc 0a 	sts	0x0ACC, r31
     eaa:	e0 93 cb 0a 	sts	0x0ACB, r30
	LL_INIT(freelist);
     eae:	f3 83       	std	Z+3, r31	; 0x03
     eb0:	e2 83       	std	Z+2, r30	; 0x02
     eb2:	f1 83       	std	Z+1, r31	; 0x01
     eb4:	e0 83       	st	Z, r30
     eb6:	cf e4       	ldi	r28, 0x4F	; 79
     eb8:	d9 e0       	ldi	r29, 0x09	; 9
     eba:	0f e9       	ldi	r16, 0x9F	; 159
     ebc:	1a e0       	ldi	r17, 0x0A	; 10

	for (i=0; i<MAX_EVENTS; i++) {
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
     ebe:	be 01       	movw	r22, r28
     ec0:	80 91 cb 0a 	lds	r24, 0x0ACB
     ec4:	90 91 cc 0a 	lds	r25, 0x0ACC
     ec8:	0e 94 89 09 	call	0x1312	; 0x1312 <ll_r_insert>
     ecc:	65 96       	adiw	r28, 0x15	; 21
	timeoutq = (struct event *)&TQ;
	LL_INIT(timeoutq);
	freelist = (struct event *)&FL;
	LL_INIT(freelist);

	for (i=0; i<MAX_EVENTS; i++) {
     ece:	c0 17       	cp	r28, r16
     ed0:	d1 07       	cpc	r29, r17
     ed2:	a9 f7       	brne	.-22     	; 0xebe <init_timeoutq+0x38>
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
	}

	return;
}
     ed4:	df 91       	pop	r29
     ed6:	cf 91       	pop	r28
     ed8:	1f 91       	pop	r17
     eda:	0f 91       	pop	r16
     edc:	08 95       	ret

00000ede <next_event_time_collapse>:

/*************************************************************************//**
  @brief Update next event's timeout value when we set timer for it.
*****************************************************************************/
void next_event_time_collapse(int sleep_time)
{
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	ec 01       	movw	r28, r24
	struct event * ev = ( struct event * ) LL_TOP( timeoutq );
     ee4:	80 91 a3 0a 	lds	r24, 0x0AA3
     ee8:	90 91 a4 0a 	lds	r25, 0x0AA4
     eec:	0e 94 80 09 	call	0x1300	; 0x1300 <ll_first>
     ef0:	fc 01       	movw	r30, r24
	if( EV_NULL == ev )
     ef2:	89 2b       	or	r24, r25
     ef4:	39 f0       	breq	.+14     	; 0xf04 <next_event_time_collapse+0x26>
		return;
	ev->timeout -= sleep_time;
     ef6:	24 81       	ldd	r18, Z+4	; 0x04
     ef8:	35 81       	ldd	r19, Z+5	; 0x05
     efa:	c9 01       	movw	r24, r18
     efc:	8c 1b       	sub	r24, r28
     efe:	9d 0b       	sbc	r25, r29
     f00:	95 83       	std	Z+5, r25	; 0x05
     f02:	84 83       	std	Z+4, r24	; 0x04
}
     f04:	df 91       	pop	r29
     f06:	cf 91       	pop	r28
     f08:	08 95       	ret

00000f0a <get_next_interval>:
*****************************************************************************/
int get_next_interval()
{

	int wait_time = MAX_SLEEP_INTERVAL;
	struct event * ev = ( struct event * ) LL_TOP( timeoutq );
     f0a:	80 91 a3 0a 	lds	r24, 0x0AA3
     f0e:	90 91 a4 0a 	lds	r25, 0x0AA4
     f12:	0e 94 80 09 	call	0x1300	; 0x1300 <ll_first>

	/* sanity check */
    /* no event in queue */
    /* TODO : to optimize the sleep time or let the CPU sleep or set up some other interrupts */
	if( EV_NULL == ev )
     f16:	00 97       	sbiw	r24, 0x00	; 0
     f18:	59 f4       	brne	.+22     	; 0xf30 <get_next_interval+0x26>
	{
#ifdef DEBUG
		printf("we may get some memory leakage issue, or something really bad occurs\n");
     f1a:	8d e1       	ldi	r24, 0x1D	; 29
     f1c:	93 e0       	ldi	r25, 0x03	; 3
     f1e:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <puts>
		printf("so we are going to take some really sleep, since no event in scheduler\n");
     f22:	82 e6       	ldi	r24, 0x62	; 98
     f24:	93 e0       	ldi	r25, 0x03	; 3
     f26:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <puts>
#endif
	    return wait_time;
     f2a:	80 e4       	ldi	r24, 0x40	; 64
     f2c:	9f e1       	ldi	r25, 0x1F	; 31
     f2e:	08 95       	ret
	}
	
	/* if the next event is nearer */
	if( wait_time > ev->timeout )
     f30:	fc 01       	movw	r30, r24
     f32:	84 81       	ldd	r24, Z+4	; 0x04
     f34:	95 81       	ldd	r25, Z+5	; 0x05
     f36:	80 34       	cpi	r24, 0x40	; 64
     f38:	ff e1       	ldi	r31, 0x1F	; 31
     f3a:	9f 07       	cpc	r25, r31
     f3c:	14 f0       	brlt	.+4      	; 0xf42 <get_next_interval+0x38>
  @brief Return the the time ( ms ) of the next event
*****************************************************************************/
int get_next_interval()
{

	int wait_time = MAX_SLEEP_INTERVAL;
     f3e:	80 e4       	ldi	r24, 0x40	; 64
     f40:	9f e1       	ldi	r25, 0x1F	; 31
	{
		wait_time = ev->timeout;
	}
	/* if the next event time is longer, we need to wait it time by time in handle_timeoutq_event() function, since currently, the longest waiting time support is 8s */
	return wait_time;
}
     f42:	08 95       	ret

00000f44 <insert_timeoutq_event>:

/*************************************************************************//**
  @brief Insert a new event into the scheduler according to timeout order
*****************************************************************************/
void insert_timeoutq_event( struct event * ep)
{
     f44:	cf 93       	push	r28
     f46:	df 93       	push	r29
     f48:	dc 01       	movw	r26, r24
	// Try to insert it according to timeout and timeoutq
	struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
     f4a:	c0 91 a3 0a 	lds	r28, 0x0AA3
     f4e:	d0 91 a4 0a 	lds	r29, 0x0AA4
     f52:	ea 81       	ldd	r30, Y+2	; 0x02
     f54:	fb 81       	ldd	r31, Y+3	; 0x03
     f56:	ce 17       	cp	r28, r30
     f58:	df 07       	cpc	r29, r31
     f5a:	09 f1       	breq	.+66     	; 0xf9e <insert_timeoutq_event+0x5a>
	{
		if( it != EV_NULL )
     f5c:	30 97       	sbiw	r30, 0x00	; 0
     f5e:	c9 f0       	breq	.+50     	; 0xf92 <insert_timeoutq_event+0x4e>
		{
			if( ( it->timeout ) > ( ep->timeout ) )
     f60:	44 81       	ldd	r20, Z+4	; 0x04
     f62:	55 81       	ldd	r21, Z+5	; 0x05
     f64:	14 96       	adiw	r26, 0x04	; 4
     f66:	2d 91       	ld	r18, X+
     f68:	3c 91       	ld	r19, X
     f6a:	15 97       	sbiw	r26, 0x05	; 5
     f6c:	24 17       	cp	r18, r20
     f6e:	35 07       	cpc	r19, r21
     f70:	54 f4       	brge	.+20     	; 0xf86 <insert_timeoutq_event+0x42>
			{
				it->timeout -= ep->timeout;
     f72:	42 1b       	sub	r20, r18
     f74:	53 0b       	sbc	r21, r19
     f76:	55 83       	std	Z+5, r21	; 0x05
     f78:	44 83       	std	Z+4, r20	; 0x04
				LL_L_INSERT( it, ep );
     f7a:	bd 01       	movw	r22, r26
     f7c:	80 81       	ld	r24, Z
     f7e:	91 81       	ldd	r25, Z+1	; 0x01
     f80:	0e 94 89 09 	call	0x1312	; 0x1312 <ll_r_insert>
     f84:	15 c0       	rjmp	.+42     	; 0xfb0 <insert_timeoutq_event+0x6c>
				// printf("left insert \n");
				break;
			}
			else
			{
				ep->timeout -= it->timeout;
     f86:	24 1b       	sub	r18, r20
     f88:	35 0b       	sbc	r19, r21
     f8a:	15 96       	adiw	r26, 0x05	; 5
     f8c:	3c 93       	st	X, r19
     f8e:	2e 93       	st	-X, r18
     f90:	14 97       	sbiw	r26, 0x04	; 4
	// Try to insert it according to timeout and timeoutq
	struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
     f92:	02 80       	ldd	r0, Z+2	; 0x02
     f94:	f3 81       	ldd	r31, Z+3	; 0x03
     f96:	e0 2d       	mov	r30, r0
     f98:	ce 17       	cp	r28, r30
     f9a:	df 07       	cpc	r29, r31
     f9c:	f9 f6       	brne	.-66     	; 0xf5c <insert_timeoutq_event+0x18>
	}
	
	// If not insert it left to the header
	if( is_pushed == 0 )
	{
		LL_APPEND(timeoutq, ep);
     f9e:	e0 91 a3 0a 	lds	r30, 0x0AA3
     fa2:	f0 91 a4 0a 	lds	r31, 0x0AA4
     fa6:	bd 01       	movw	r22, r26
     fa8:	80 81       	ld	r24, Z
     faa:	91 81       	ldd	r25, Z+1	; 0x01
     fac:	0e 94 89 09 	call	0x1312	; 0x1312 <ll_r_insert>

	#ifdef DEBUG
	// dump_timeoutq();
	#endif

}
     fb0:	df 91       	pop	r29
     fb2:	cf 91       	pop	r28
     fb4:	08 95       	ret

00000fb6 <load_new_sensor>:

/*************************************************************************//**
  @brief Load a brand new sensor activity into the scheduler's timeoutQ
*****************************************************************************/
int load_new_sensor( int timeout, int repeat, BaseSensor *device_ptr, int otherinfo )
{
     fb6:	cf 92       	push	r12
     fb8:	df 92       	push	r13
     fba:	ef 92       	push	r14
     fbc:	ff 92       	push	r15
     fbe:	0f 93       	push	r16
     fc0:	1f 93       	push	r17
     fc2:	cf 93       	push	r28
     fc4:	df 93       	push	r29
     fc6:	6c 01       	movw	r12, r24
     fc8:	7b 01       	movw	r14, r22
     fca:	8a 01       	movw	r16, r20
     fcc:	e9 01       	movw	r28, r18

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
     fce:	80 91 cb 0a 	lds	r24, 0x0ACB
     fd2:	90 91 cc 0a 	lds	r25, 0x0ACC
     fd6:	0e 94 bf 09 	call	0x137e	; 0x137e <ll_pop>
     fda:	fc 01       	movw	r30, r24
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
     fdc:	89 2b       	or	r24, r25
     fde:	b1 f0       	breq	.+44     	; 0x100c <load_new_sensor+0x56>
        return -1;
    ep->timeout = timeout;
     fe0:	d5 82       	std	Z+5, r13	; 0x05
     fe2:	c4 82       	std	Z+4, r12	; 0x04
    ep->repeat_interval = repeat;
     fe4:	f7 82       	std	Z+7, r15	; 0x07
     fe6:	e6 82       	std	Z+6, r14	; 0x06
	ep->borrow_timeout = 0;
     fe8:	11 86       	std	Z+9, r1	; 0x09
     fea:	10 86       	std	Z+8, r1	; 0x08
    ep->sp = device_ptr;
     fec:	13 87       	std	Z+11, r17	; 0x0b
     fee:	02 87       	std	Z+10, r16	; 0x0a
    ep->info = otherinfo;
     ff0:	d1 8b       	std	Z+17, r29	; 0x11
     ff2:	c0 8b       	std	Z+16, r28	; 0x10
    ep->cur_state = Ready;
     ff4:	81 e0       	ldi	r24, 0x01	; 1
     ff6:	82 8b       	std	Z+18, r24	; 0x12
    ep->run = sensor_handler;
     ff8:	86 e7       	ldi	r24, 0x76	; 118
     ffa:	96 e0       	ldi	r25, 0x06	; 6
     ffc:	94 8b       	std	Z+20, r25	; 0x14
     ffe:	83 8b       	std	Z+19, r24	; 0x13
    insert_timeoutq_event( ep );
    1000:	cf 01       	movw	r24, r30
    1002:	0e 94 a2 07 	call	0xf44	; 0xf44 <insert_timeoutq_event>
    return 0;
    1006:	80 e0       	ldi	r24, 0x00	; 0
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	02 c0       	rjmp	.+4      	; 0x1010 <load_new_sensor+0x5a>

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
        return -1;
    100c:	8f ef       	ldi	r24, 0xFF	; 255
    100e:	9f ef       	ldi	r25, 0xFF	; 255
    ep->info = otherinfo;
    ep->cur_state = Ready;
    ep->run = sensor_handler;
    insert_timeoutq_event( ep );
    return 0;
}
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	ff 90       	pop	r15
    101a:	ef 90       	pop	r14
    101c:	df 90       	pop	r13
    101e:	cf 90       	pop	r12
    1020:	08 95       	ret

00001022 <load_new_device>:

/*************************************************************************//**
  @brief Load a brand new device activity into the scheduler's timeoutQ
*****************************************************************************/
int load_new_device( int timeout, int repeat, BaseDevice *device_ptr, int otherinfo )
{
    1022:	cf 92       	push	r12
    1024:	df 92       	push	r13
    1026:	ef 92       	push	r14
    1028:	ff 92       	push	r15
    102a:	0f 93       	push	r16
    102c:	1f 93       	push	r17
    102e:	cf 93       	push	r28
    1030:	df 93       	push	r29
    1032:	6c 01       	movw	r12, r24
    1034:	7b 01       	movw	r14, r22
    1036:	ea 01       	movw	r28, r20
    1038:	89 01       	movw	r16, r18

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    103a:	80 91 cb 0a 	lds	r24, 0x0ACB
    103e:	90 91 cc 0a 	lds	r25, 0x0ACC
    1042:	0e 94 bf 09 	call	0x137e	; 0x137e <ll_pop>
    1046:	fc 01       	movw	r30, r24
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
    1048:	89 2b       	or	r24, r25
    104a:	c1 f0       	breq	.+48     	; 0x107c <load_new_device+0x5a>
        return -1;
    ep->timeout = timeout;
    104c:	d5 82       	std	Z+5, r13	; 0x05
    104e:	c4 82       	std	Z+4, r12	; 0x04
    ep->repeat_interval = repeat;
    1050:	f7 82       	std	Z+7, r15	; 0x07
    1052:	e6 82       	std	Z+6, r14	; 0x06
	ep->borrow_timeout = 0;
    1054:	11 86       	std	Z+9, r1	; 0x09
    1056:	10 86       	std	Z+8, r1	; 0x08
    ep->load_p = device_ptr;
    1058:	d5 87       	std	Z+13, r29	; 0x0d
    105a:	c4 87       	std	Z+12, r28	; 0x0c
	ep->store_p = device_ptr;
    105c:	d7 87       	std	Z+15, r29	; 0x0f
    105e:	c6 87       	std	Z+14, r28	; 0x0e
    ep->info = otherinfo;
    1060:	11 8b       	std	Z+17, r17	; 0x11
    1062:	00 8b       	std	Z+16, r16	; 0x10
    ep->cur_state = Ready;
    1064:	81 e0       	ldi	r24, 0x01	; 1
    1066:	82 8b       	std	Z+18, r24	; 0x12
    ep->run = device_handler;
    1068:	87 ef       	ldi	r24, 0xF7	; 247
    106a:	96 e0       	ldi	r25, 0x06	; 6
    106c:	94 8b       	std	Z+20, r25	; 0x14
    106e:	83 8b       	std	Z+19, r24	; 0x13
    insert_timeoutq_event( ep );
    1070:	cf 01       	movw	r24, r30
    1072:	0e 94 a2 07 	call	0xf44	; 0xf44 <insert_timeoutq_event>
    return 0;
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	02 c0       	rjmp	.+4      	; 0x1080 <load_new_device+0x5e>

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
        return -1;
    107c:	8f ef       	ldi	r24, 0xFF	; 255
    107e:	9f ef       	ldi	r25, 0xFF	; 255
    ep->info = otherinfo;
    ep->cur_state = Ready;
    ep->run = device_handler;
    insert_timeoutq_event( ep );
    return 0;
}
    1080:	df 91       	pop	r29
    1082:	cf 91       	pop	r28
    1084:	1f 91       	pop	r17
    1086:	0f 91       	pop	r16
    1088:	ff 90       	pop	r15
    108a:	ef 90       	pop	r14
    108c:	df 90       	pop	r13
    108e:	cf 90       	pop	r12
    1090:	08 95       	ret

00001092 <handle_timeoutq_event>:

/*************************************************************************//**
  @brief Handle the next event in timeoutQ: execute the event's handler function according to the device type, re-insert it according to the period, and set a timer of next event.
*****************************************************************************/
int handle_timeoutq_event( )
{
    1092:	0f 93       	push	r16
    1094:	1f 93       	push	r17
    1096:	cf 93       	push	r28
    1098:	df 93       	push	r29
	int retNum, sleep_time;
	/* assume we get a valid one */
	struct event * ev = (struct event * )LL_TOP( timeoutq );
    109a:	80 91 a3 0a 	lds	r24, 0x0AA3
    109e:	90 91 a4 0a 	lds	r25, 0x0AA4
    10a2:	0e 94 80 09 	call	0x1300	; 0x1300 <ll_first>
    10a6:	ec 01       	movw	r28, r24
	if( EV_NULL == ev )
    10a8:	89 2b       	or	r24, r25
    10aa:	39 f4       	brne	.+14     	; 0x10ba <handle_timeoutq_event+0x28>
	{
		printf("err\n");
    10ac:	89 ea       	ldi	r24, 0xA9	; 169
    10ae:	93 e0       	ldi	r25, 0x03	; 3
    10b0:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <puts>
        return -1;
    10b4:	0f ef       	ldi	r16, 0xFF	; 255
    10b6:	1f ef       	ldi	r17, 0xFF	; 255
    10b8:	68 c0       	rjmp	.+208    	; 0x118a <handle_timeoutq_event+0xf8>
	}
    
    /* sanity check */
    if( ev->sp == NULL && ev->load_p == NULL && ev->store_p == NULL)
    10ba:	8a 85       	ldd	r24, Y+10	; 0x0a
    10bc:	9b 85       	ldd	r25, Y+11	; 0x0b
    10be:	89 2b       	or	r24, r25
    10c0:	49 f4       	brne	.+18     	; 0x10d4 <handle_timeoutq_event+0x42>
    10c2:	8c 85       	ldd	r24, Y+12	; 0x0c
    10c4:	9d 85       	ldd	r25, Y+13	; 0x0d
    10c6:	89 2b       	or	r24, r25
    10c8:	29 f4       	brne	.+10     	; 0x10d4 <handle_timeoutq_event+0x42>
    10ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    10cc:	9f 85       	ldd	r25, Y+15	; 0x0f
    10ce:	89 2b       	or	r24, r25
    10d0:	09 f4       	brne	.+2      	; 0x10d4 <handle_timeoutq_event+0x42>
    10d2:	59 c0       	rjmp	.+178    	; 0x1186 <handle_timeoutq_event+0xf4>
        return -1;

	/* if it is not the right time, re-set the timer */
	if( ev->timeout != 0 )
    10d4:	0c 81       	ldd	r16, Y+4	; 0x04
    10d6:	1d 81       	ldd	r17, Y+5	; 0x05
    10d8:	01 15       	cp	r16, r1
    10da:	11 05       	cpc	r17, r1
    10dc:	59 f0       	breq	.+22     	; 0x10f4 <handle_timeoutq_event+0x62>
	{
		sleep_time = get_next_interval();
    10de:	0e 94 85 07 	call	0xf0a	; 0xf0a <get_next_interval>
    10e2:	ec 01       	movw	r28, r24
		next_event_time_collapse(sleep_time);
    10e4:	0e 94 6f 07 	call	0xede	; 0xede <next_event_time_collapse>
		set_timer(sleep_time);
    10e8:	ce 01       	movw	r24, r28
    10ea:	0e 94 7f 03 	call	0x6fe	; 0x6fe <set_timer>
		return 0;
    10ee:	00 e0       	ldi	r16, 0x00	; 0
    10f0:	10 e0       	ldi	r17, 0x00	; 0
    10f2:	4b c0       	rjmp	.+150    	; 0x118a <handle_timeoutq_event+0xf8>
	}
	
	/* retNum may need to be designed in other ways */
    retNum = ev->run( ev );
    10f4:	eb 89       	ldd	r30, Y+19	; 0x13
    10f6:	fc 89       	ldd	r31, Y+20	; 0x14
    10f8:	ce 01       	movw	r24, r28
    10fa:	09 95       	icall
	/* 
	 * return 1 if it has to with some borrow time( have a request-time!=0 case ) 
	 * which means the event has already entered the scheduler, 
	 * and won't need to do anything else
	 */
	if( retNum == 1 )
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	71 f4       	brne	.+28     	; 0x111c <handle_timeoutq_event+0x8a>
	{
		sleep_time = get_next_interval();
    1100:	0e 94 85 07 	call	0xf0a	; 0xf0a <get_next_interval>
    1104:	ec 01       	movw	r28, r24
		/* judge if the next top in queue has a timeout <= 0, which we may want to handle it right now */
		if( sleep_time == 0 )
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	19 f4       	brne	.+6      	; 0x1110 <handle_timeoutq_event+0x7e>
		{
			handle_timeoutq_event();
    110a:	0e 94 49 08 	call	0x1092	; 0x1092 <handle_timeoutq_event>
			return 0;
    110e:	3d c0       	rjmp	.+122    	; 0x118a <handle_timeoutq_event+0xf8>
		}
		next_event_time_collapse(sleep_time);	
    1110:	0e 94 6f 07 	call	0xede	; 0xede <next_event_time_collapse>
		set_timer(sleep_time);
    1114:	ce 01       	movw	r24, r28
    1116:	0e 94 7f 03 	call	0x6fe	; 0x6fe <set_timer>
		return 0;
    111a:	37 c0       	rjmp	.+110    	; 0x118a <handle_timeoutq_event+0xf8>
    /*
	 * return 0 means we just fired a case, 
	 * and may need to judge it over the repeat time to re-insert into the scheduler,
	 * since we definitely want to collect data periodically
	 */
    LL_POP( timeoutq );
    111c:	80 91 a3 0a 	lds	r24, 0x0AA3
    1120:	90 91 a4 0a 	lds	r25, 0x0AA4
    1124:	0e 94 bf 09 	call	0x137e	; 0x137e <ll_pop>
    if( ev->repeat_interval != 0 )
    1128:	4e 81       	ldd	r20, Y+6	; 0x06
    112a:	5f 81       	ldd	r21, Y+7	; 0x07
    112c:	41 15       	cp	r20, r1
    112e:	51 05       	cpc	r21, r1
    1130:	a9 f0       	breq	.+42     	; 0x115c <handle_timeoutq_event+0xca>
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
    1132:	88 85       	ldd	r24, Y+8	; 0x08
    1134:	99 85       	ldd	r25, Y+9	; 0x09
    1136:	9a 01       	movw	r18, r20
    1138:	28 1b       	sub	r18, r24
    113a:	39 0b       	sbc	r19, r25
    113c:	3d 83       	std	Y+5, r19	; 0x05
    113e:	2c 83       	std	Y+4, r18	; 0x04
		while( ev->timeout < 0 )
    1140:	33 23       	and	r19, r19
    1142:	34 f4       	brge	.+12     	; 0x1150 <handle_timeoutq_event+0xbe>
		{
			ev->timeout += ev->repeat_interval;
    1144:	24 0f       	add	r18, r20
    1146:	35 1f       	adc	r19, r21
	 */
    LL_POP( timeoutq );
    if( ev->repeat_interval != 0 )
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
		while( ev->timeout < 0 )
    1148:	33 23       	and	r19, r19
    114a:	e4 f3       	brlt	.-8      	; 0x1144 <handle_timeoutq_event+0xb2>
    114c:	3d 83       	std	Y+5, r19	; 0x05
    114e:	2c 83       	std	Y+4, r18	; 0x04
		{
			ev->timeout += ev->repeat_interval;
		}
		ev->borrow_timeout = 0;
    1150:	19 86       	std	Y+9, r1	; 0x09
    1152:	18 86       	std	Y+8, r1	; 0x08
        insert_timeoutq_event( ev );
    1154:	ce 01       	movw	r24, r28
    1156:	0e 94 a2 07 	call	0xf44	; 0xf44 <insert_timeoutq_event>
    115a:	07 c0       	rjmp	.+14     	; 0x116a <handle_timeoutq_event+0xd8>
    }
    else
    {
        LL_PUSH( freelist, ev );
    115c:	be 01       	movw	r22, r28
    115e:	80 91 cb 0a 	lds	r24, 0x0ACB
    1162:	90 91 cc 0a 	lds	r25, 0x0ACC
    1166:	0e 94 89 09 	call	0x1312	; 0x1312 <ll_r_insert>
    }

	sleep_time = get_next_interval();
    116a:	0e 94 85 07 	call	0xf0a	; 0xf0a <get_next_interval>
    116e:	ec 01       	movw	r28, r24
	/* judge if the next top in queue has a timeout <= 0, which we may want to handle it right now */
	if( sleep_time == 0 )
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	19 f4       	brne	.+6      	; 0x117a <handle_timeoutq_event+0xe8>
	{
		handle_timeoutq_event();
    1174:	0e 94 49 08 	call	0x1092	; 0x1092 <handle_timeoutq_event>
		return 0;
    1178:	08 c0       	rjmp	.+16     	; 0x118a <handle_timeoutq_event+0xf8>
	}
	next_event_time_collapse(sleep_time);	
    117a:	0e 94 6f 07 	call	0xede	; 0xede <next_event_time_collapse>
	set_timer(sleep_time);
    117e:	ce 01       	movw	r24, r28
    1180:	0e 94 7f 03 	call	0x6fe	; 0x6fe <set_timer>
    return 0;
    1184:	02 c0       	rjmp	.+4      	; 0x118a <handle_timeoutq_event+0xf8>
        return -1;
	}
    
    /* sanity check */
    if( ev->sp == NULL && ev->load_p == NULL && ev->store_p == NULL)
        return -1;
    1186:	0f ef       	ldi	r16, 0xFF	; 255
    1188:	1f ef       	ldi	r17, 0xFF	; 255
		return 0;
	}
	next_event_time_collapse(sleep_time);	
	set_timer(sleep_time);
    return 0;
}
    118a:	c8 01       	movw	r24, r16
    118c:	df 91       	pop	r29
    118e:	cf 91       	pop	r28
    1190:	1f 91       	pop	r17
    1192:	0f 91       	pop	r16
    1194:	08 95       	ret

00001196 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    1196:	0e 94 c9 04 	call	0x992	; 0x992 <HAL_Init>
  SYS_TimerInit();
    119a:	0e 94 38 09 	call	0x1270	; 0x1270 <SYS_TimerInit>
  PHY_Init();
    119e:	0e 94 5e 06 	call	0xcbc	; 0xcbc <PHY_Init>
  NWK_Init();
    11a2:	0e 94 04 05 	call	0xa08	; 0xa08 <NWK_Init>
    11a6:	08 95       	ret

000011a8 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    11a8:	0f 93       	push	r16
    11aa:	1f 93       	push	r17
    11ac:	cf 93       	push	r28
    11ae:	df 93       	push	r29
    11b0:	ec 01       	movw	r28, r24
  if (timers)
    11b2:	80 91 03 09 	lds	r24, 0x0903
    11b6:	90 91 04 09 	lds	r25, 0x0904
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	09 f4       	brne	.+2      	; 0x11c0 <placeTimer+0x18>
    11be:	45 c0       	rjmp	.+138    	; 0x124a <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    11c0:	4e 81       	ldd	r20, Y+6	; 0x06
    11c2:	5f 81       	ldd	r21, Y+7	; 0x07
    11c4:	68 85       	ldd	r22, Y+8	; 0x08
    11c6:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    11c8:	fc 01       	movw	r30, r24
    11ca:	02 81       	ldd	r16, Z+2	; 0x02
    11cc:	13 81       	ldd	r17, Z+3	; 0x03
    11ce:	24 81       	ldd	r18, Z+4	; 0x04
    11d0:	35 81       	ldd	r19, Z+5	; 0x05
    11d2:	40 17       	cp	r20, r16
    11d4:	51 07       	cpc	r21, r17
    11d6:	62 07       	cpc	r22, r18
    11d8:	73 07       	cpc	r23, r19
    11da:	60 f0       	brcs	.+24     	; 0x11f4 <placeTimer+0x4c>
    11dc:	dc 01       	movw	r26, r24
    11de:	17 c0       	rjmp	.+46     	; 0x120e <placeTimer+0x66>
    11e0:	02 81       	ldd	r16, Z+2	; 0x02
    11e2:	13 81       	ldd	r17, Z+3	; 0x03
    11e4:	24 81       	ldd	r18, Z+4	; 0x04
    11e6:	35 81       	ldd	r19, Z+5	; 0x05
    11e8:	40 17       	cp	r20, r16
    11ea:	51 07       	cpc	r21, r17
    11ec:	62 07       	cpc	r22, r18
    11ee:	73 07       	cpc	r23, r19
    11f0:	68 f4       	brcc	.+26     	; 0x120c <placeTimer+0x64>
    11f2:	03 c0       	rjmp	.+6      	; 0x11fa <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    11f4:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    11f6:	a0 e0       	ldi	r26, 0x00	; 0
    11f8:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    11fa:	04 1b       	sub	r16, r20
    11fc:	15 0b       	sbc	r17, r21
    11fe:	26 0b       	sbc	r18, r22
    1200:	37 0b       	sbc	r19, r23
    1202:	02 83       	std	Z+2, r16	; 0x02
    1204:	13 83       	std	Z+3, r17	; 0x03
    1206:	24 83       	std	Z+4, r18	; 0x04
    1208:	35 83       	std	Z+5, r19	; 0x05
         break;
    120a:	0a c0       	rjmp	.+20     	; 0x1220 <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    120c:	df 01       	movw	r26, r30
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    120e:	40 1b       	sub	r20, r16
    1210:	51 0b       	sbc	r21, r17
    1212:	62 0b       	sbc	r22, r18
    1214:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1216:	ed 91       	ld	r30, X+
    1218:	fc 91       	ld	r31, X
    121a:	11 97       	sbiw	r26, 0x01	; 1
    121c:	30 97       	sbiw	r30, 0x00	; 0
    121e:	01 f7       	brne	.-64     	; 0x11e0 <placeTimer+0x38>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    1220:	4a 83       	std	Y+2, r20	; 0x02
    1222:	5b 83       	std	Y+3, r21	; 0x03
    1224:	6c 83       	std	Y+4, r22	; 0x04
    1226:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    1228:	10 97       	sbiw	r26, 0x00	; 0
    122a:	41 f0       	breq	.+16     	; 0x123c <placeTimer+0x94>
    {
      timer->next = prev->next;
    122c:	8d 91       	ld	r24, X+
    122e:	9c 91       	ld	r25, X
    1230:	11 97       	sbiw	r26, 0x01	; 1
    1232:	99 83       	std	Y+1, r25	; 0x01
    1234:	88 83       	st	Y, r24
      prev->next = timer;
    1236:	cd 93       	st	X+, r28
    1238:	dc 93       	st	X, r29
    123a:	15 c0       	rjmp	.+42     	; 0x1266 <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    123c:	99 83       	std	Y+1, r25	; 0x01
    123e:	88 83       	st	Y, r24
      timers = timer;
    1240:	d0 93 04 09 	sts	0x0904, r29
    1244:	c0 93 03 09 	sts	0x0903, r28
    1248:	0e c0       	rjmp	.+28     	; 0x1266 <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    124a:	19 82       	std	Y+1, r1	; 0x01
    124c:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    124e:	8e 81       	ldd	r24, Y+6	; 0x06
    1250:	9f 81       	ldd	r25, Y+7	; 0x07
    1252:	a8 85       	ldd	r26, Y+8	; 0x08
    1254:	b9 85       	ldd	r27, Y+9	; 0x09
    1256:	8a 83       	std	Y+2, r24	; 0x02
    1258:	9b 83       	std	Y+3, r25	; 0x03
    125a:	ac 83       	std	Y+4, r26	; 0x04
    125c:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    125e:	d0 93 04 09 	sts	0x0904, r29
    1262:	c0 93 03 09 	sts	0x0903, r28
  }
}
    1266:	df 91       	pop	r29
    1268:	cf 91       	pop	r28
    126a:	1f 91       	pop	r17
    126c:	0f 91       	pop	r16
    126e:	08 95       	ret

00001270 <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    1270:	10 92 04 09 	sts	0x0904, r1
    1274:	10 92 03 09 	sts	0x0903, r1
    1278:	08 95       	ret

0000127a <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    127a:	e0 91 03 09 	lds	r30, 0x0903
    127e:	f0 91 04 09 	lds	r31, 0x0904
    1282:	30 97       	sbiw	r30, 0x00	; 0
    1284:	71 f0       	breq	.+28     	; 0x12a2 <SYS_TimerStarted+0x28>
    if (t == timer)
    1286:	e8 17       	cp	r30, r24
    1288:	f9 07       	cpc	r31, r25
    128a:	21 f4       	brne	.+8      	; 0x1294 <SYS_TimerStarted+0x1a>
    128c:	0c c0       	rjmp	.+24     	; 0x12a6 <SYS_TimerStarted+0x2c>
    128e:	8e 17       	cp	r24, r30
    1290:	9f 07       	cpc	r25, r31
    1292:	59 f0       	breq	.+22     	; 0x12aa <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1294:	01 90       	ld	r0, Z+
    1296:	f0 81       	ld	r31, Z
    1298:	e0 2d       	mov	r30, r0
    129a:	30 97       	sbiw	r30, 0x00	; 0
    129c:	c1 f7       	brne	.-16     	; 0x128e <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	08 95       	ret
    12a2:	80 e0       	ldi	r24, 0x00	; 0
    12a4:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    12a6:	81 e0       	ldi	r24, 0x01	; 1
    12a8:	08 95       	ret
    12aa:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    12ac:	08 95       	ret

000012ae <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    12b4:	0e 94 3d 09 	call	0x127a	; 0x127a <SYS_TimerStarted>
    12b8:	81 11       	cpse	r24, r1
    12ba:	03 c0       	rjmp	.+6      	; 0x12c2 <SYS_TimerStart+0x14>
    placeTimer(timer);
    12bc:	ce 01       	movw	r24, r28
    12be:	0e 94 d4 08 	call	0x11a8	; 0x11a8 <placeTimer>
}
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	08 95       	ret

000012c8 <check_crc>:
/*************************************************************************//**
  @brief CRC check
  @return remainder
*****************************************************************************/
unsigned int check_crc(uint16_t message_from_sensor, uint8_t check_value_from_sensor) {
	uint32_t remainder = (uint32_t)message_from_sensor << 8; //Pad with 8 bits because we have to add in the check value
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	38 2f       	mov	r19, r24
	remainder |= check_value_from_sensor; //Add on the check value
    12ce:	c9 01       	movw	r24, r18
    12d0:	86 2b       	or	r24, r22
    12d2:	27 e1       	ldi	r18, 0x17	; 23
    12d4:	30 e0       	ldi	r19, 0x00	; 0

	uint32_t divsor = (uint32_t)SHIFTED_DIVISOR;
    12d6:	40 e0       	ldi	r20, 0x00	; 0
    12d8:	50 e8       	ldi	r21, 0x80	; 128

	for (int i = 0 ; i < 16 ; i++) //Operate on only 16 positions of max 24. The remaining 8 are our remainder and should be zero when we're done.
	{
		if( remainder & (uint32_t)1<<(23 - i) ) //Check if there is a one in the left position
    12da:	bc 01       	movw	r22, r24
    12dc:	02 2e       	mov	r0, r18
    12de:	02 c0       	rjmp	.+4      	; 0x12e4 <check_crc+0x1c>
    12e0:	76 95       	lsr	r23
    12e2:	67 95       	ror	r22
    12e4:	0a 94       	dec	r0
    12e6:	e2 f7       	brpl	.-8      	; 0x12e0 <check_crc+0x18>
    12e8:	60 ff       	sbrs	r22, 0
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <check_crc+0x28>
		remainder ^= divsor;
    12ec:	84 27       	eor	r24, r20
    12ee:	95 27       	eor	r25, r21

		divsor >>= 1; //Rotate the divsor max 16 times so that we have 8 bits left of a remainder
    12f0:	56 95       	lsr	r21
    12f2:	47 95       	ror	r20
    12f4:	21 50       	subi	r18, 0x01	; 1
    12f6:	31 09       	sbc	r19, r1
	uint32_t remainder = (uint32_t)message_from_sensor << 8; //Pad with 8 bits because we have to add in the check value
	remainder |= check_value_from_sensor; //Add on the check value

	uint32_t divsor = (uint32_t)SHIFTED_DIVISOR;

	for (int i = 0 ; i < 16 ; i++) //Operate on only 16 positions of max 24. The remaining 8 are our remainder and should be zero when we're done.
    12f8:	27 30       	cpi	r18, 0x07	; 7
    12fa:	31 05       	cpc	r19, r1
    12fc:	71 f7       	brne	.-36     	; 0x12da <check_crc+0x12>

		divsor >>= 1; //Rotate the divsor max 16 times so that we have 8 bits left of a remainder
	}

	return (unsigned int)remainder;
    12fe:	08 95       	ret

00001300 <ll_first>:
 * lp is list pointer
 */
llobject_t *
ll_first(lp)
llobject_t *lp;
{
    1300:	fc 01       	movw	r30, r24
    if (LL_IS_EMPTY(lp)) {
    1302:	82 81       	ldd	r24, Z+2	; 0x02
    1304:	93 81       	ldd	r25, Z+3	; 0x03
    1306:	8e 17       	cp	r24, r30
    1308:	9f 07       	cpc	r25, r31
    130a:	11 f4       	brne	.+4      	; 0x1310 <ll_first+0x10>
		return LL_NULL;
    130c:	80 e0       	ldi	r24, 0x00	; 0
    130e:	90 e0       	ldi	r25, 0x00	; 0
    }
    return lp->next;
}
    1310:	08 95       	ret

00001312 <ll_r_insert>:
llobject_t *
ll_r_insert(ip, ep)
llobject_t *ip;
llobject_t *ep;
{
    llobject_t *tp = ip->next;
    1312:	dc 01       	movw	r26, r24
    1314:	12 96       	adiw	r26, 0x02	; 2
    1316:	ed 91       	ld	r30, X+
    1318:	fc 91       	ld	r31, X
    131a:	13 97       	sbiw	r26, 0x03	; 3

    tp->prev = ep;
    131c:	71 83       	std	Z+1, r23	; 0x01
    131e:	60 83       	st	Z, r22
    ep->next = tp;
    1320:	db 01       	movw	r26, r22
    1322:	13 96       	adiw	r26, 0x03	; 3
    1324:	fc 93       	st	X, r31
    1326:	ee 93       	st	-X, r30
    1328:	12 97       	sbiw	r26, 0x02	; 2
    ip->next = ep;
    132a:	fc 01       	movw	r30, r24
    132c:	73 83       	std	Z+3, r23	; 0x03
    132e:	62 83       	std	Z+2, r22	; 0x02
    ep->prev = ip;
    1330:	8d 93       	st	X+, r24
    1332:	9c 93       	st	X, r25

    return ep;
}
    1334:	cb 01       	movw	r24, r22
    1336:	08 95       	ret

00001338 <ll_detach>:
 */
llobject_t *
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    1338:	fb 01       	movw	r30, r22
    if (LL_IS_EMPTY(lp) || lp == ep) {
    133a:	dc 01       	movw	r26, r24
    133c:	12 96       	adiw	r26, 0x02	; 2
    133e:	2d 91       	ld	r18, X+
    1340:	3c 91       	ld	r19, X
    1342:	13 97       	sbiw	r26, 0x03	; 3
    1344:	28 17       	cp	r18, r24
    1346:	39 07       	cpc	r19, r25
    1348:	a1 f0       	breq	.+40     	; 0x1372 <ll_detach+0x3a>
    134a:	86 17       	cp	r24, r22
    134c:	97 07       	cpc	r25, r23
    134e:	a1 f0       	breq	.+40     	; 0x1378 <ll_detach+0x40>
		return LL_NULL;
    }

    (ep->prev)->next = ep->next;
    1350:	a0 81       	ld	r26, Z
    1352:	b1 81       	ldd	r27, Z+1	; 0x01
    1354:	82 81       	ldd	r24, Z+2	; 0x02
    1356:	93 81       	ldd	r25, Z+3	; 0x03
    1358:	13 96       	adiw	r26, 0x03	; 3
    135a:	9c 93       	st	X, r25
    135c:	8e 93       	st	-X, r24
    135e:	12 97       	sbiw	r26, 0x02	; 2
    (ep->next)->prev = ep->prev;
    1360:	a2 81       	ldd	r26, Z+2	; 0x02
    1362:	b3 81       	ldd	r27, Z+3	; 0x03
    1364:	80 81       	ld	r24, Z
    1366:	91 81       	ldd	r25, Z+1	; 0x01
    1368:	8d 93       	st	X+, r24
    136a:	9c 93       	st	X, r25

    return ep;
    136c:	86 2f       	mov	r24, r22
    136e:	9f 2f       	mov	r25, r31
    1370:	08 95       	ret
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    if (LL_IS_EMPTY(lp) || lp == ep) {
		return LL_NULL;
    1372:	80 e0       	ldi	r24, 0x00	; 0
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	08 95       	ret
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0

    (ep->prev)->next = ep->next;
    (ep->next)->prev = ep->prev;

    return ep;
}
    137c:	08 95       	ret

0000137e <ll_pop>:
 */
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
    137e:	fc 01       	movw	r30, r24
    1380:	62 81       	ldd	r22, Z+2	; 0x02
    1382:	73 81       	ldd	r23, Z+3	; 0x03
    1384:	68 17       	cp	r22, r24
    1386:	79 07       	cpc	r23, r25
    1388:	19 f0       	breq	.+6      	; 0x1390 <ll_pop+0x12>
		return LL_NULL;
    }
    return LL_DETACH(lp, lp->next);
    138a:	0e 94 9c 09 	call	0x1338	; 0x1338 <ll_detach>
    138e:	08 95       	ret
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
		return LL_NULL;
    1390:	80 e0       	ldi	r24, 0x00	; 0
    1392:	90 e0       	ldi	r25, 0x00	; 0
    }
    return LL_DETACH(lp, lp->next);
}
    1394:	08 95       	ret

00001396 <calcDate>:
	tm_ptr->unix_time = calibrate_sec;
	tm_ptr->unix_msec = 500; // to minimize error
}

void calcDate(tm *tm_ptr)
{
    1396:	2f 92       	push	r2
    1398:	3f 92       	push	r3
    139a:	4f 92       	push	r4
    139c:	5f 92       	push	r5
    139e:	6f 92       	push	r6
    13a0:	7f 92       	push	r7
    13a2:	8f 92       	push	r8
    13a4:	9f 92       	push	r9
    13a6:	af 92       	push	r10
    13a8:	bf 92       	push	r11
    13aa:	cf 92       	push	r12
    13ac:	df 92       	push	r13
    13ae:	ef 92       	push	r14
    13b0:	ff 92       	push	r15
    13b2:	0f 93       	push	r16
    13b4:	1f 93       	push	r17
    13b6:	cf 93       	push	r28
    13b8:	df 93       	push	r29
    13ba:	cd b7       	in	r28, 0x3d	; 61
    13bc:	de b7       	in	r29, 0x3e	; 62
    13be:	62 97       	sbiw	r28, 0x12	; 18
    13c0:	0f b6       	in	r0, 0x3f	; 63
    13c2:	f8 94       	cli
    13c4:	de bf       	out	0x3e, r29	; 62
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	cd bf       	out	0x3d, r28	; 61
    13ca:	9a 8b       	std	Y+18, r25	; 0x12
    13cc:	89 8b       	std	Y+17, r24	; 0x11
	long seconds, minutes, hours, days, year, month;
	long dayOfWeek;
	seconds = tm_ptr->unix_time;
    13ce:	dc 01       	movw	r26, r24
    13d0:	4d 90       	ld	r4, X+
    13d2:	5d 90       	ld	r5, X+
    13d4:	6d 90       	ld	r6, X+
    13d6:	7c 90       	ld	r7, X

	/* calculate minutes */
	minutes  = seconds / 60;
    13d8:	0f 2e       	mov	r0, r31
    13da:	fc e3       	ldi	r31, 0x3C	; 60
    13dc:	8f 2e       	mov	r8, r31
    13de:	91 2c       	mov	r9, r1
    13e0:	a1 2c       	mov	r10, r1
    13e2:	b1 2c       	mov	r11, r1
    13e4:	f0 2d       	mov	r31, r0
    13e6:	c3 01       	movw	r24, r6
    13e8:	b2 01       	movw	r22, r4
    13ea:	a5 01       	movw	r20, r10
    13ec:	94 01       	movw	r18, r8
    13ee:	0e 94 c1 1a 	call	0x3582	; 0x3582 <__divmodsi4>
    13f2:	69 01       	movw	r12, r18
    13f4:	7a 01       	movw	r14, r20
	seconds -= minutes * 60;
    13f6:	a4 ec       	ldi	r26, 0xC4	; 196
    13f8:	bf ef       	ldi	r27, 0xFF	; 255
    13fa:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <__mulohisi3>
    13fe:	9b 01       	movw	r18, r22
    1400:	ac 01       	movw	r20, r24
    1402:	24 0d       	add	r18, r4
    1404:	35 1d       	adc	r19, r5
    1406:	46 1d       	adc	r20, r6
    1408:	57 1d       	adc	r21, r7
    140a:	29 83       	std	Y+1, r18	; 0x01
    140c:	3a 83       	std	Y+2, r19	; 0x02
    140e:	4b 83       	std	Y+3, r20	; 0x03
    1410:	5c 83       	std	Y+4, r21	; 0x04
	/* calculate hours */
	hours    = minutes / 60;
    1412:	c7 01       	movw	r24, r14
    1414:	b6 01       	movw	r22, r12
    1416:	a5 01       	movw	r20, r10
    1418:	94 01       	movw	r18, r8
    141a:	0e 94 c1 1a 	call	0x3582	; 0x3582 <__divmodsi4>
    141e:	49 01       	movw	r8, r18
    1420:	5a 01       	movw	r10, r20
	minutes -= hours   * 60;
    1422:	a4 ec       	ldi	r26, 0xC4	; 196
    1424:	bf ef       	ldi	r27, 0xFF	; 255
    1426:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <__mulohisi3>
    142a:	9b 01       	movw	r18, r22
    142c:	ac 01       	movw	r20, r24
    142e:	2c 0d       	add	r18, r12
    1430:	3d 1d       	adc	r19, r13
    1432:	4e 1d       	adc	r20, r14
    1434:	5f 1d       	adc	r21, r15
    1436:	2d 83       	std	Y+5, r18	; 0x05
    1438:	3e 83       	std	Y+6, r19	; 0x06
    143a:	4f 83       	std	Y+7, r20	; 0x07
    143c:	58 87       	std	Y+8, r21	; 0x08
	/* calculate days */
	days     = hours   / 24;
    143e:	c5 01       	movw	r24, r10
    1440:	b4 01       	movw	r22, r8
    1442:	28 e1       	ldi	r18, 0x18	; 24
    1444:	30 e0       	ldi	r19, 0x00	; 0
    1446:	40 e0       	ldi	r20, 0x00	; 0
    1448:	50 e0       	ldi	r21, 0x00	; 0
    144a:	0e 94 c1 1a 	call	0x3582	; 0x3582 <__divmodsi4>
    144e:	c2 2e       	mov	r12, r18
    1450:	d3 2e       	mov	r13, r19
    1452:	e4 2e       	mov	r14, r20
    1454:	f5 2e       	mov	r15, r21
	hours   -= days    * 24;
    1456:	a8 ee       	ldi	r26, 0xE8	; 232
    1458:	bf ef       	ldi	r27, 0xFF	; 255
    145a:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <__mulohisi3>
    145e:	9b 01       	movw	r18, r22
    1460:	ac 01       	movw	r20, r24
    1462:	28 0d       	add	r18, r8
    1464:	39 1d       	adc	r19, r9
    1466:	4a 1d       	adc	r20, r10
    1468:	5b 1d       	adc	r21, r11
    146a:	29 87       	std	Y+9, r18	; 0x09
    146c:	3a 87       	std	Y+10, r19	; 0x0a
    146e:	4b 87       	std	Y+11, r20	; 0x0b
    1470:	5c 87       	std	Y+12, r21	; 0x0c

	/* Unix time starts in 1970 on a Thursday */
	year      = 1970;
	dayOfWeek = 4;
    1472:	81 2c       	mov	r8, r1
    1474:	91 2c       	mov	r9, r1
    1476:	54 01       	movw	r10, r8
    1478:	68 94       	set
    147a:	82 f8       	bld	r8, 2
	/* calculate days */
	days     = hours   / 24;
	hours   -= days    * 24;

	/* Unix time starts in 1970 on a Thursday */
	year      = 1970;
    147c:	0f 2e       	mov	r0, r31
    147e:	f2 eb       	ldi	r31, 0xB2	; 178
    1480:	4f 2e       	mov	r4, r31
    1482:	f7 e0       	ldi	r31, 0x07	; 7
    1484:	5f 2e       	mov	r5, r31
    1486:	61 2c       	mov	r6, r1
    1488:	71 2c       	mov	r7, r1
    148a:	f0 2d       	mov	r31, r0

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    148c:	0d e6       	ldi	r16, 0x6D	; 109
    148e:	11 e0       	ldi	r17, 0x01	; 1
    1490:	21 2c       	mov	r2, r1
		{
			dayOfWeek += leapYear ? 2 : 1;
    1492:	31 2c       	mov	r3, r1
	year      = 1970;
	dayOfWeek = 4;

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
    1494:	d3 01       	movw	r26, r6
    1496:	c2 01       	movw	r24, r4
    1498:	83 70       	andi	r24, 0x03	; 3
    149a:	99 27       	eor	r25, r25
    149c:	aa 27       	eor	r26, r26
    149e:	bb 27       	eor	r27, r27
    14a0:	89 2b       	or	r24, r25
    14a2:	8a 2b       	or	r24, r26
    14a4:	8b 2b       	or	r24, r27
    14a6:	09 f0       	breq	.+2      	; 0x14aa <calcDate+0x114>
    14a8:	ea c0       	rjmp	.+468    	; 0x167e <calcDate+0x2e8>
    14aa:	c3 01       	movw	r24, r6
    14ac:	b2 01       	movw	r22, r4
    14ae:	24 e6       	ldi	r18, 0x64	; 100
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	40 e0       	ldi	r20, 0x00	; 0
    14b4:	50 e0       	ldi	r21, 0x00	; 0
    14b6:	0e 94 c1 1a 	call	0x3582	; 0x3582 <__divmodsi4>
    14ba:	67 2b       	or	r22, r23
    14bc:	68 2b       	or	r22, r24
    14be:	69 2b       	or	r22, r25
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <calcDate+0x12e>
    14c2:	d0 c0       	rjmp	.+416    	; 0x1664 <calcDate+0x2ce>
    14c4:	c3 01       	movw	r24, r6
    14c6:	b2 01       	movw	r22, r4
    14c8:	20 e9       	ldi	r18, 0x90	; 144
    14ca:	31 e0       	ldi	r19, 0x01	; 1
    14cc:	40 e0       	ldi	r20, 0x00	; 0
    14ce:	50 e0       	ldi	r21, 0x00	; 0
    14d0:	0e 94 c1 1a 	call	0x3582	; 0x3582 <__divmodsi4>
    14d4:	67 2b       	or	r22, r23
    14d6:	68 2b       	or	r22, r24
    14d8:	69 2b       	or	r22, r25
    14da:	09 f4       	brne	.+2      	; 0x14de <calcDate+0x148>
    14dc:	c3 c0       	rjmp	.+390    	; 0x1664 <calcDate+0x2ce>
    14de:	cf c0       	rjmp	.+414    	; 0x167e <calcDate+0x2e8>
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    14e0:	8e e6       	ldi	r24, 0x6E	; 110
    14e2:	91 e0       	ldi	r25, 0x01	; 1
    14e4:	a0 e0       	ldi	r26, 0x00	; 0
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
		{
			dayOfWeek += leapYear ? 2 : 1;
    14e8:	42 e0       	ldi	r20, 0x02	; 2
    14ea:	50 e0       	ldi	r21, 0x00	; 0
    14ec:	60 e0       	ldi	r22, 0x00	; 0
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	08 c0       	rjmp	.+16     	; 0x1502 <calcDate+0x16c>

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    14f2:	80 2f       	mov	r24, r16
    14f4:	91 2f       	mov	r25, r17
    14f6:	a2 2d       	mov	r26, r2
    14f8:	b0 e0       	ldi	r27, 0x00	; 0
		{
			dayOfWeek += leapYear ? 2 : 1;
    14fa:	41 e0       	ldi	r20, 0x01	; 1
    14fc:	50 e0       	ldi	r21, 0x00	; 0
    14fe:	60 e0       	ldi	r22, 0x00	; 0
    1500:	73 2d       	mov	r23, r3
    1502:	84 0e       	add	r8, r20
    1504:	95 1e       	adc	r9, r21
    1506:	a6 1e       	adc	r10, r22
    1508:	b7 1e       	adc	r11, r23
			days      -= daysInYear;
    150a:	c8 1a       	sub	r12, r24
    150c:	d9 0a       	sbc	r13, r25
    150e:	ea 0a       	sbc	r14, r26
    1510:	fb 0a       	sbc	r15, r27
			if (dayOfWeek >= 7)
    1512:	57 e0       	ldi	r21, 0x07	; 7
    1514:	85 16       	cp	r8, r21
    1516:	91 04       	cpc	r9, r1
    1518:	a1 04       	cpc	r10, r1
    151a:	b1 04       	cpc	r11, r1
    151c:	2c f0       	brlt	.+10     	; 0x1528 <calcDate+0x192>
			dayOfWeek -= 7;
    151e:	87 e0       	ldi	r24, 0x07	; 7
    1520:	88 1a       	sub	r8, r24
    1522:	91 08       	sbc	r9, r1
    1524:	a1 08       	sbc	r10, r1
    1526:	b1 08       	sbc	r11, r1
			++year;
    1528:	9f ef       	ldi	r25, 0xFF	; 255
    152a:	49 1a       	sub	r4, r25
    152c:	59 0a       	sbc	r5, r25
    152e:	69 0a       	sbc	r6, r25
    1530:	79 0a       	sbc	r7, r25
				else
				break;
			}
			break;
		}
	}
    1532:	b0 cf       	rjmp	.-160    	; 0x1494 <calcDate+0xfe>
			dayOfWeek -= 7;
			++year;
		}
		else
		{
			tm_ptr->tm_yday = days;
    1534:	e9 89       	ldd	r30, Y+17	; 0x11
    1536:	fa 89       	ldd	r31, Y+18	; 0x12
    1538:	84 a3       	std	Z+36, r24	; 0x24
    153a:	95 a3       	std	Z+37, r25	; 0x25
    153c:	a6 a3       	std	Z+38, r26	; 0x26
    153e:	b7 a3       	std	Z+39, r27	; 0x27
			dayOfWeek  += days;
    1540:	bc 01       	movw	r22, r24
    1542:	cd 01       	movw	r24, r26
    1544:	68 0d       	add	r22, r8
    1546:	79 1d       	adc	r23, r9
    1548:	8a 1d       	adc	r24, r10
    154a:	9b 1d       	adc	r25, r11
			dayOfWeek  %= 7;
    154c:	27 e0       	ldi	r18, 0x07	; 7
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e0       	ldi	r20, 0x00	; 0
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	0e 94 c1 1a 	call	0x3582	; 0x3582 <__divmodsi4>
    1558:	6d 87       	std	Y+13, r22	; 0x0d
    155a:	7e 87       	std	Y+14, r23	; 0x0e
    155c:	8f 87       	std	Y+15, r24	; 0x0f
    155e:	98 8b       	std	Y+16, r25	; 0x10
    1560:	e7 e2       	ldi	r30, 0x27	; 39
    1562:	f4 e0       	ldi	r31, 0x04	; 4
    1564:	81 2c       	mov	r8, r1
    1566:	91 2c       	mov	r9, r1
    1568:	54 01       	movw	r10, r8
    156a:	83 94       	inc	r8
    156c:	40 e0       	ldi	r20, 0x00	; 0
    156e:	50 e0       	ldi	r21, 0x00	; 0
    1570:	ba 01       	movw	r22, r20
    1572:	09 c0       	rjmp	.+18     	; 0x1586 <calcDate+0x1f0>
    1574:	4f 5f       	subi	r20, 0xFF	; 255
    1576:	5f 4f       	sbci	r21, 0xFF	; 255
    1578:	6f 4f       	sbci	r22, 0xFF	; 255
    157a:	7f 4f       	sbci	r23, 0xFF	; 255
    157c:	3f ef       	ldi	r19, 0xFF	; 255
    157e:	83 1a       	sub	r8, r19
    1580:	93 0a       	sbc	r9, r19
    1582:	a3 0a       	sbc	r10, r19
    1584:	b3 0a       	sbc	r11, r19
    1586:	8a 01       	movw	r16, r20
    1588:	9b 01       	movw	r18, r22

			/* calculate the month and day */
			static const uint8_t daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
			for(month = 0; month < 12; ++month)
			{
				uint8_t dim = daysInMonth[month];
    158a:	81 91       	ld	r24, Z+

				/* add a day to feburary if this is a leap year */
				if (month == 1 && leapYear)
    158c:	41 30       	cpi	r20, 0x01	; 1
    158e:	51 05       	cpc	r21, r1
    1590:	61 05       	cpc	r22, r1
    1592:	71 05       	cpc	r23, r1
    1594:	29 f4       	brne	.+10     	; 0x15a0 <calcDate+0x20a>
    1596:	33 20       	and	r3, r3
    1598:	09 f4       	brne	.+2      	; 0x159c <calcDate+0x206>
    159a:	5b c0       	rjmp	.+182    	; 0x1652 <calcDate+0x2bc>
				++dim;
    159c:	8f 5f       	subi	r24, 0xFF	; 255
    159e:	59 c0       	rjmp	.+178    	; 0x1652 <calcDate+0x2bc>

				if (days >= dim)
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	a0 e0       	ldi	r26, 0x00	; 0
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	c8 16       	cp	r12, r24
    15a8:	d9 06       	cpc	r13, r25
    15aa:	ea 06       	cpc	r14, r26
    15ac:	fb 06       	cpc	r15, r27
    15ae:	6c f0       	brlt	.+26     	; 0x15ca <calcDate+0x234>
				days -= dim;
    15b0:	c8 1a       	sub	r12, r24
    15b2:	d9 0a       	sbc	r13, r25
    15b4:	ea 0a       	sbc	r14, r26
    15b6:	fb 0a       	sbc	r15, r27
			dayOfWeek  += days;
			dayOfWeek  %= 7;

			/* calculate the month and day */
			static const uint8_t daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
			for(month = 0; month < 12; ++month)
    15b8:	95 01       	movw	r18, r10
    15ba:	84 01       	movw	r16, r8
    15bc:	8c e0       	ldi	r24, 0x0C	; 12
    15be:	88 16       	cp	r8, r24
    15c0:	91 04       	cpc	r9, r1
    15c2:	a1 04       	cpc	r10, r1
    15c4:	b1 04       	cpc	r11, r1
    15c6:	b4 f2       	brlt	.-84     	; 0x1574 <calcDate+0x1de>
    15c8:	00 c0       	rjmp	.+0      	; 0x15ca <calcDate+0x234>
			}
			break;
		}
	}

	tm_ptr->tm_sec  = seconds;
    15ca:	89 81       	ldd	r24, Y+1	; 0x01
    15cc:	9a 81       	ldd	r25, Y+2	; 0x02
    15ce:	ab 81       	ldd	r26, Y+3	; 0x03
    15d0:	bc 81       	ldd	r27, Y+4	; 0x04
    15d2:	e9 89       	ldd	r30, Y+17	; 0x11
    15d4:	fa 89       	ldd	r31, Y+18	; 0x12
    15d6:	80 87       	std	Z+8, r24	; 0x08
    15d8:	91 87       	std	Z+9, r25	; 0x09
    15da:	a2 87       	std	Z+10, r26	; 0x0a
    15dc:	b3 87       	std	Z+11, r27	; 0x0b
	tm_ptr->tm_min  = minutes;
    15de:	8d 81       	ldd	r24, Y+5	; 0x05
    15e0:	9e 81       	ldd	r25, Y+6	; 0x06
    15e2:	af 81       	ldd	r26, Y+7	; 0x07
    15e4:	b8 85       	ldd	r27, Y+8	; 0x08
    15e6:	84 87       	std	Z+12, r24	; 0x0c
    15e8:	95 87       	std	Z+13, r25	; 0x0d
    15ea:	a6 87       	std	Z+14, r26	; 0x0e
    15ec:	b7 87       	std	Z+15, r27	; 0x0f
	tm_ptr->tm_hour = hours;
    15ee:	89 85       	ldd	r24, Y+9	; 0x09
    15f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    15f2:	ab 85       	ldd	r26, Y+11	; 0x0b
    15f4:	bc 85       	ldd	r27, Y+12	; 0x0c
    15f6:	80 8b       	std	Z+16, r24	; 0x10
    15f8:	91 8b       	std	Z+17, r25	; 0x11
    15fa:	a2 8b       	std	Z+18, r26	; 0x12
    15fc:	b3 8b       	std	Z+19, r27	; 0x13
	tm_ptr->tm_mday = days + 1;
    15fe:	ff ef       	ldi	r31, 0xFF	; 255
    1600:	cf 1a       	sub	r12, r31
    1602:	df 0a       	sbc	r13, r31
    1604:	ef 0a       	sbc	r14, r31
    1606:	ff 0a       	sbc	r15, r31
    1608:	a9 89       	ldd	r26, Y+17	; 0x11
    160a:	ba 89       	ldd	r27, Y+18	; 0x12
    160c:	54 96       	adiw	r26, 0x14	; 20
    160e:	cd 92       	st	X+, r12
    1610:	dd 92       	st	X+, r13
    1612:	ed 92       	st	X+, r14
    1614:	fc 92       	st	X, r15
    1616:	57 97       	sbiw	r26, 0x17	; 23
	tm_ptr->tm_mon  = month + 1;
    1618:	d9 01       	movw	r26, r18
    161a:	c8 01       	movw	r24, r16
    161c:	01 96       	adiw	r24, 0x01	; 1
    161e:	a1 1d       	adc	r26, r1
    1620:	b1 1d       	adc	r27, r1
    1622:	e9 89       	ldd	r30, Y+17	; 0x11
    1624:	fa 89       	ldd	r31, Y+18	; 0x12
    1626:	80 8f       	std	Z+24, r24	; 0x18
    1628:	91 8f       	std	Z+25, r25	; 0x19
    162a:	a2 8f       	std	Z+26, r26	; 0x1a
    162c:	b3 8f       	std	Z+27, r27	; 0x1b
	tm_ptr->tm_year = year;
    162e:	44 8e       	std	Z+28, r4	; 0x1c
    1630:	55 8e       	std	Z+29, r5	; 0x1d
    1632:	66 8e       	std	Z+30, r6	; 0x1e
    1634:	77 8e       	std	Z+31, r7	; 0x1f
	tm_ptr->tm_wday = dayOfWeek;
    1636:	2d 85       	ldd	r18, Y+13	; 0x0d
    1638:	3e 85       	ldd	r19, Y+14	; 0x0e
    163a:	4f 85       	ldd	r20, Y+15	; 0x0f
    163c:	58 89       	ldd	r21, Y+16	; 0x10
    163e:	20 a3       	std	Z+32, r18	; 0x20
    1640:	31 a3       	std	Z+33, r19	; 0x21
    1642:	42 a3       	std	Z+34, r20	; 0x22
    1644:	53 a3       	std	Z+35, r21	; 0x23
    1646:	27 c0       	rjmp	.+78     	; 0x1696 <calcDate+0x300>
				/* add a day to feburary if this is a leap year */
				if (month == 1 && leapYear)
				++dim;

				if (days >= dim)
				days -= dim;
    1648:	c8 1a       	sub	r12, r24
    164a:	d9 0a       	sbc	r13, r25
    164c:	ea 0a       	sbc	r14, r26
    164e:	fb 0a       	sbc	r15, r27
    1650:	91 cf       	rjmp	.-222    	; 0x1574 <calcDate+0x1de>

				/* add a day to feburary if this is a leap year */
				if (month == 1 && leapYear)
				++dim;

				if (days >= dim)
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	a0 e0       	ldi	r26, 0x00	; 0
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	c8 16       	cp	r12, r24
    165a:	d9 06       	cpc	r13, r25
    165c:	ea 06       	cpc	r14, r26
    165e:	fb 06       	cpc	r15, r27
    1660:	9c f7       	brge	.-26     	; 0x1648 <calcDate+0x2b2>
    1662:	b3 cf       	rjmp	.-154    	; 0x15ca <calcDate+0x234>

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    1664:	fe e6       	ldi	r31, 0x6E	; 110
    1666:	cf 16       	cp	r12, r31
    1668:	f1 e0       	ldi	r31, 0x01	; 1
    166a:	df 06       	cpc	r13, r31
    166c:	e1 04       	cpc	r14, r1
    166e:	f1 04       	cpc	r15, r1
    1670:	0c f0       	brlt	.+2      	; 0x1674 <calcDate+0x2de>
    1672:	36 cf       	rjmp	.-404    	; 0x14e0 <calcDate+0x14a>
    1674:	d7 01       	movw	r26, r14
    1676:	c6 01       	movw	r24, r12
    1678:	33 24       	eor	r3, r3
    167a:	33 94       	inc	r3
    167c:	5b cf       	rjmp	.-330    	; 0x1534 <calcDate+0x19e>
    167e:	3d e6       	ldi	r19, 0x6D	; 109
    1680:	c3 16       	cp	r12, r19
    1682:	31 e0       	ldi	r19, 0x01	; 1
    1684:	d3 06       	cpc	r13, r19
    1686:	e1 04       	cpc	r14, r1
    1688:	f1 04       	cpc	r15, r1
    168a:	0c f0       	brlt	.+2      	; 0x168e <calcDate+0x2f8>
    168c:	32 cf       	rjmp	.-412    	; 0x14f2 <calcDate+0x15c>
    168e:	d7 01       	movw	r26, r14
    1690:	c6 01       	movw	r24, r12
    1692:	31 2c       	mov	r3, r1
    1694:	4f cf       	rjmp	.-354    	; 0x1534 <calcDate+0x19e>
	tm_ptr->tm_hour = hours;
	tm_ptr->tm_mday = days + 1;
	tm_ptr->tm_mon  = month + 1;
	tm_ptr->tm_year = year;
	tm_ptr->tm_wday = dayOfWeek;
}
    1696:	62 96       	adiw	r28, 0x12	; 18
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	de bf       	out	0x3e, r29	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	cd bf       	out	0x3d, r28	; 61
    16a2:	df 91       	pop	r29
    16a4:	cf 91       	pop	r28
    16a6:	1f 91       	pop	r17
    16a8:	0f 91       	pop	r16
    16aa:	ff 90       	pop	r15
    16ac:	ef 90       	pop	r14
    16ae:	df 90       	pop	r13
    16b0:	cf 90       	pop	r12
    16b2:	bf 90       	pop	r11
    16b4:	af 90       	pop	r10
    16b6:	9f 90       	pop	r9
    16b8:	8f 90       	pop	r8
    16ba:	7f 90       	pop	r7
    16bc:	6f 90       	pop	r6
    16be:	5f 90       	pop	r5
    16c0:	4f 90       	pop	r4
    16c2:	3f 90       	pop	r3
    16c4:	2f 90       	pop	r2
    16c6:	08 95       	ret

000016c8 <updateTime>:
#include "utilities/inc/time.h"
#include <stdio.h>


void updateTime(long increment_msec, tm * tm_eg)
{
    16c8:	cf 92       	push	r12
    16ca:	df 92       	push	r13
    16cc:	ef 92       	push	r14
    16ce:	ff 92       	push	r15
    16d0:	0f 93       	push	r16
    16d2:	1f 93       	push	r17
    16d4:	cf 93       	push	r28
    16d6:	df 93       	push	r29
    16d8:	ea 01       	movw	r28, r20
	tm_eg->unix_msec += increment_msec;
    16da:	cc 80       	ldd	r12, Y+4	; 0x04
    16dc:	dd 80       	ldd	r13, Y+5	; 0x05
    16de:	ee 80       	ldd	r14, Y+6	; 0x06
    16e0:	ff 80       	ldd	r15, Y+7	; 0x07
    16e2:	6c 0d       	add	r22, r12
    16e4:	7d 1d       	adc	r23, r13
    16e6:	8e 1d       	adc	r24, r14
    16e8:	9f 1d       	adc	r25, r15
	tm_eg->unix_time += ( tm_eg->unix_msec / 1000 );
    16ea:	28 ee       	ldi	r18, 0xE8	; 232
    16ec:	33 e0       	ldi	r19, 0x03	; 3
    16ee:	40 e0       	ldi	r20, 0x00	; 0
    16f0:	50 e0       	ldi	r21, 0x00	; 0
    16f2:	0e 94 c1 1a 	call	0x3582	; 0x3582 <__divmodsi4>
    16f6:	c8 80       	ld	r12, Y
    16f8:	d9 80       	ldd	r13, Y+1	; 0x01
    16fa:	ea 80       	ldd	r14, Y+2	; 0x02
    16fc:	fb 80       	ldd	r15, Y+3	; 0x03
    16fe:	89 01       	movw	r16, r18
    1700:	9a 01       	movw	r18, r20
    1702:	0c 0d       	add	r16, r12
    1704:	1d 1d       	adc	r17, r13
    1706:	2e 1d       	adc	r18, r14
    1708:	3f 1d       	adc	r19, r15
    170a:	08 83       	st	Y, r16
    170c:	19 83       	std	Y+1, r17	; 0x01
    170e:	2a 83       	std	Y+2, r18	; 0x02
    1710:	3b 83       	std	Y+3, r19	; 0x03
	tm_eg->unix_msec = tm_eg->unix_msec % 1000;
    1712:	6c 83       	std	Y+4, r22	; 0x04
    1714:	7d 83       	std	Y+5, r23	; 0x05
    1716:	8e 83       	std	Y+6, r24	; 0x06
    1718:	9f 83       	std	Y+7, r25	; 0x07
	calcDate(tm_eg);
    171a:	ce 01       	movw	r24, r28
    171c:	0e 94 cb 09 	call	0x1396	; 0x1396 <calcDate>
}
    1720:	df 91       	pop	r29
    1722:	cf 91       	pop	r28
    1724:	1f 91       	pop	r17
    1726:	0f 91       	pop	r16
    1728:	ff 90       	pop	r15
    172a:	ef 90       	pop	r14
    172c:	df 90       	pop	r13
    172e:	cf 90       	pop	r12
    1730:	08 95       	ret

00001732 <init_timestamp>:



void init_timestamp(tm *tm_ptr)
{
	tm_ptr->unix_msec=0;
    1732:	fc 01       	movw	r30, r24
    1734:	14 82       	std	Z+4, r1	; 0x04
    1736:	15 82       	std	Z+5, r1	; 0x05
    1738:	16 82       	std	Z+6, r1	; 0x06
    173a:	17 82       	std	Z+7, r1	; 0x07
	tm_ptr->unix_time=0;
    173c:	10 82       	st	Z, r1
    173e:	11 82       	std	Z+1, r1	; 0x01
    1740:	12 82       	std	Z+2, r1	; 0x02
    1742:	13 82       	std	Z+3, r1	; 0x03
    1744:	08 95       	ret

00001746 <fctn_getStartNum>:
}

int fctn_getStartNum( BaseSensor *this)
{
	return this->StartNum;
}
    1746:	fc 01       	movw	r30, r24
    1748:	84 81       	ldd	r24, Z+4	; 0x04
    174a:	95 81       	ldd	r25, Z+5	; 0x05
    174c:	08 95       	ret

0000174e <fctn_getEndNum>:

int fctn_getEndNum( BaseSensor *this)
{
    174e:	fc 01       	movw	r30, r24
	return ( this->StartNum + this->NumOfData );
    1750:	24 81       	ldd	r18, Z+4	; 0x04
    1752:	35 81       	ldd	r19, Z+5	; 0x05
    1754:	86 81       	ldd	r24, Z+6	; 0x06
    1756:	97 81       	ldd	r25, Z+7	; 0x07
}
    1758:	82 0f       	add	r24, r18
    175a:	93 1f       	adc	r25, r19
    175c:	08 95       	ret

0000175e <BMP280_ReadBytes>:
  @brief Reads some bytes from the BMP280
  @param[in] *values pointer to an array to store the bytes, put the starting register in values[0]
  @param[in] length how many bytes to read
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadBytes(unsigned char *values, char length){
    175e:	1f 93       	push	r17
    1760:	cf 93       	push	r28
    1762:	df 93       	push	r29
    1764:	ec 01       	movw	r28, r24
    1766:	16 2f       	mov	r17, r22
	//printf("BMP280_ReadBytes");
	//printf("0x%1x",(unsigned)TWI_BeginWrite(BMP280_ADDR));
	TWI_BeginWrite(BMP280_ADDR);
    1768:	86 e7       	ldi	r24, 0x76	; 118
    176a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <TWI_BeginWrite>
	//printf("0x%1x",(unsigned)TWI_WriteByte(values[0]));
	TWI_WriteByte(values[0]);//Write the register address
    176e:	88 81       	ld	r24, Y
    1770:	0e 94 c8 03 	call	0x790	; 0x790 <TWI_WriteByte>
	status = TWI_BeginRead(BMP280_ADDR); //Send a repeated start
    1774:	86 e7       	ldi	r24, 0x76	; 118
    1776:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <TWI_BeginRead>
    177a:	80 93 05 09 	sts	0x0905, r24
	//printf("0x%1x",status);
	if (status == TWI_SLAR_ACK){
    177e:	80 34       	cpi	r24, 0x40	; 64
    1780:	81 f4       	brne	.+32     	; 0x17a2 <BMP280_ReadBytes+0x44>
		if(((TWI_Read(&values[0],length,false)&TWSR_MASK) == TWI_REC_NACK) && (TWI_Stop() != 0)) return(1); //Receive bytes, send a STOP bit, and check for success
    1782:	61 2f       	mov	r22, r17
    1784:	70 e0       	ldi	r23, 0x00	; 0
    1786:	40 e0       	ldi	r20, 0x00	; 0
    1788:	ce 01       	movw	r24, r28
    178a:	0e 94 30 04 	call	0x860	; 0x860 <TWI_Read>
    178e:	88 7f       	andi	r24, 0xF8	; 248
    1790:	88 35       	cpi	r24, 0x58	; 88
    1792:	49 f4       	brne	.+18     	; 0x17a6 <BMP280_ReadBytes+0x48>
    1794:	0e 94 2b 04 	call	0x856	; 0x856 <TWI_Stop>
    1798:	91 e0       	ldi	r25, 0x01	; 1
    179a:	81 11       	cpse	r24, r1
    179c:	05 c0       	rjmp	.+10     	; 0x17a8 <BMP280_ReadBytes+0x4a>
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	03 c0       	rjmp	.+6      	; 0x17a8 <BMP280_ReadBytes+0x4a>
	}
	return(0);
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	01 c0       	rjmp	.+2      	; 0x17a8 <BMP280_ReadBytes+0x4a>
    17a6:	90 e0       	ldi	r25, 0x00	; 0
}
    17a8:	89 2f       	mov	r24, r25
    17aa:	df 91       	pop	r29
    17ac:	cf 91       	pop	r28
    17ae:	1f 91       	pop	r17
    17b0:	08 95       	ret

000017b2 <BMP280_ReadInt>:
  @brief Reads an int from the BMP280
  @param[in] address The register address of the first byte of the uint
  @param[out] val* A pointer to a uint to store the received data to
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadInt(char address, int *val){
    17b2:	0f 93       	push	r16
    17b4:	1f 93       	push	r17
    17b6:	cf 93       	push	r28
    17b8:	df 93       	push	r29
    17ba:	00 d0       	rcall	.+0      	; 0x17bc <BMP280_ReadInt+0xa>
    17bc:	cd b7       	in	r28, 0x3d	; 61
    17be:	de b7       	in	r29, 0x3e	; 62
    17c0:	8b 01       	movw	r16, r22
	//printf("\nBMP280_ReadInt");
	unsigned char data[2];	//char is 4 bits, 1 byte

	data[0] = address;
    17c2:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
    17c4:	62 e0       	ldi	r22, 0x02	; 2
    17c6:	ce 01       	movw	r24, r28
    17c8:	01 96       	adiw	r24, 0x01	; 1
    17ca:	0e 94 af 0b 	call	0x175e	; 0x175e <BMP280_ReadBytes>
    17ce:	88 23       	and	r24, r24
    17d0:	59 f0       	breq	.+22     	; 0x17e8 <BMP280_ReadInt+0x36>
		*val = (((int)data[1]<<8)|(int)data[0]);
    17d2:	8a 81       	ldd	r24, Y+2	; 0x02
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	98 2f       	mov	r25, r24
    17d8:	88 27       	eor	r24, r24
    17da:	29 81       	ldd	r18, Y+1	; 0x01
    17dc:	82 2b       	or	r24, r18
    17de:	f8 01       	movw	r30, r16
    17e0:	91 83       	std	Z+1, r25	; 0x01
    17e2:	80 83       	st	Z, r24
		return(1);
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	03 c0       	rjmp	.+6      	; 0x17ee <BMP280_ReadInt+0x3c>
	}
	*val = 0;
    17e8:	f8 01       	movw	r30, r16
    17ea:	11 82       	std	Z+1, r1	; 0x01
    17ec:	10 82       	st	Z, r1
	return(0);
}
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	df 91       	pop	r29
    17f4:	cf 91       	pop	r28
    17f6:	1f 91       	pop	r17
    17f8:	0f 91       	pop	r16
    17fa:	08 95       	ret

000017fc <BMP280_Init>:

/*************************************************************************//**
  @brief Initializes the BMP280 and reads the calibration data from the device
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
char BMP280_Init(void){
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	00 d0       	rcall	.+0      	; 0x1802 <BMP280_Init+0x6>
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
    1806:	88 e8       	ldi	r24, 0x88	; 136
    1808:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
    180a:	62 e0       	ldi	r22, 0x02	; 2
    180c:	ce 01       	movw	r24, r28
    180e:	01 96       	adiw	r24, 0x01	; 1
    1810:	0e 94 af 0b 	call	0x175e	; 0x175e <BMP280_ReadBytes>
    1814:	88 23       	and	r24, r24
    1816:	99 f0       	breq	.+38     	; 0x183e <BMP280_Init+0x42>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	98 2f       	mov	r25, r24
    181e:	88 27       	eor	r24, r24
    1820:	29 81       	ldd	r18, Y+1	; 0x01
    1822:	82 2b       	or	r24, r18
    1824:	90 93 10 09 	sts	0x0910, r25
    1828:	80 93 0f 09 	sts	0x090F, r24

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
    182c:	65 e2       	ldi	r22, 0x25	; 37
    182e:	79 e0       	ldi	r23, 0x09	; 9
    1830:	8a e8       	ldi	r24, 0x8A	; 138
    1832:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <BMP280_ReadInt>
	// used in the calculations when taking measurements.

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
    1836:	88 23       	and	r24, r24
    1838:	09 f4       	brne	.+2      	; 0x183c <BMP280_Init+0x40>
    183a:	bb c0       	rjmp	.+374    	; 0x19b2 <BMP280_Init+0x1b6>
    183c:	05 c0       	rjmp	.+10     	; 0x1848 <BMP280_Init+0x4c>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
    183e:	10 92 10 09 	sts	0x0910, r1
    1842:	10 92 0f 09 	sts	0x090F, r1
    1846:	b5 c0       	rjmp	.+362    	; 0x19b2 <BMP280_Init+0x1b6>
	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
    1848:	63 e2       	ldi	r22, 0x23	; 35
    184a:	79 e0       	ldi	r23, 0x09	; 9
    184c:	8c e8       	ldi	r24, 0x8C	; 140
    184e:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <BMP280_ReadInt>

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
    1852:	88 23       	and	r24, r24
    1854:	09 f4       	brne	.+2      	; 0x1858 <BMP280_Init+0x5c>
    1856:	ad c0       	rjmp	.+346    	; 0x19b2 <BMP280_Init+0x1b6>
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
    1858:	8e e8       	ldi	r24, 0x8E	; 142
    185a:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
    185c:	62 e0       	ldi	r22, 0x02	; 2
    185e:	ce 01       	movw	r24, r28
    1860:	01 96       	adiw	r24, 0x01	; 1
    1862:	0e 94 af 0b 	call	0x175e	; 0x175e <BMP280_ReadBytes>
    1866:	88 23       	and	r24, r24
    1868:	99 f0       	breq	.+38     	; 0x1890 <BMP280_Init+0x94>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
    186a:	8a 81       	ldd	r24, Y+2	; 0x02
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	98 2f       	mov	r25, r24
    1870:	88 27       	eor	r24, r24
    1872:	29 81       	ldd	r18, Y+1	; 0x01
    1874:	82 2b       	or	r24, r18
    1876:	90 93 12 09 	sts	0x0912, r25
    187a:	80 93 11 09 	sts	0x0911, r24
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
    187e:	61 e2       	ldi	r22, 0x21	; 33
    1880:	79 e0       	ldi	r23, 0x09	; 9
    1882:	80 e9       	ldi	r24, 0x90	; 144
    1884:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <BMP280_ReadInt>
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
    1888:	88 23       	and	r24, r24
    188a:	09 f4       	brne	.+2      	; 0x188e <BMP280_Init+0x92>
    188c:	92 c0       	rjmp	.+292    	; 0x19b2 <BMP280_Init+0x1b6>
    188e:	05 c0       	rjmp	.+10     	; 0x189a <BMP280_Init+0x9e>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
    1890:	10 92 12 09 	sts	0x0912, r1
    1894:	10 92 11 09 	sts	0x0911, r1
    1898:	8c c0       	rjmp	.+280    	; 0x19b2 <BMP280_Init+0x1b6>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
    189a:	6f e1       	ldi	r22, 0x1F	; 31
    189c:	79 e0       	ldi	r23, 0x09	; 9
    189e:	82 e9       	ldi	r24, 0x92	; 146
    18a0:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <BMP280_ReadInt>
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
    18a4:	88 23       	and	r24, r24
    18a6:	09 f4       	brne	.+2      	; 0x18aa <BMP280_Init+0xae>
    18a8:	84 c0       	rjmp	.+264    	; 0x19b2 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
    18aa:	6d e1       	ldi	r22, 0x1D	; 29
    18ac:	79 e0       	ldi	r23, 0x09	; 9
    18ae:	84 e9       	ldi	r24, 0x94	; 148
    18b0:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <BMP280_ReadInt>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
    18b4:	88 23       	and	r24, r24
    18b6:	09 f4       	brne	.+2      	; 0x18ba <BMP280_Init+0xbe>
    18b8:	7c c0       	rjmp	.+248    	; 0x19b2 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
    18ba:	6b e1       	ldi	r22, 0x1B	; 27
    18bc:	79 e0       	ldi	r23, 0x09	; 9
    18be:	86 e9       	ldi	r24, 0x96	; 150
    18c0:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <BMP280_ReadInt>
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
    18c4:	88 23       	and	r24, r24
    18c6:	09 f4       	brne	.+2      	; 0x18ca <BMP280_Init+0xce>
    18c8:	74 c0       	rjmp	.+232    	; 0x19b2 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
    18ca:	69 e1       	ldi	r22, 0x19	; 25
    18cc:	79 e0       	ldi	r23, 0x09	; 9
    18ce:	88 e9       	ldi	r24, 0x98	; 152
    18d0:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <BMP280_ReadInt>
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
    18d4:	88 23       	and	r24, r24
    18d6:	09 f4       	brne	.+2      	; 0x18da <BMP280_Init+0xde>
    18d8:	6c c0       	rjmp	.+216    	; 0x19b2 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
    18da:	67 e1       	ldi	r22, 0x17	; 23
    18dc:	79 e0       	ldi	r23, 0x09	; 9
    18de:	8a e9       	ldi	r24, 0x9A	; 154
    18e0:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <BMP280_ReadInt>
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
    18e4:	88 23       	and	r24, r24
    18e6:	09 f4       	brne	.+2      	; 0x18ea <BMP280_Init+0xee>
    18e8:	64 c0       	rjmp	.+200    	; 0x19b2 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
    18ea:	65 e1       	ldi	r22, 0x15	; 21
    18ec:	79 e0       	ldi	r23, 0x09	; 9
    18ee:	8c e9       	ldi	r24, 0x9C	; 156
    18f0:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <BMP280_ReadInt>
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
    18f4:	88 23       	and	r24, r24
    18f6:	09 f4       	brne	.+2      	; 0x18fa <BMP280_Init+0xfe>
    18f8:	5c c0       	rjmp	.+184    	; 0x19b2 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9C, &dig_P8)  &&
		BMP280_ReadInt(0x9E, &dig_P9)){
    18fa:	63 e1       	ldi	r22, 0x13	; 19
    18fc:	79 e0       	ldi	r23, 0x09	; 9
    18fe:	8e e9       	ldi	r24, 0x9E	; 158
    1900:	0e 94 d9 0b 	call	0x17b2	; 0x17b2 <BMP280_ReadInt>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
    1904:	88 23       	and	r24, r24
    1906:	09 f4       	brne	.+2      	; 0x190a <BMP280_Init+0x10e>
    1908:	54 c0       	rjmp	.+168    	; 0x19b2 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9E, &dig_P9)){
			printf("\nT: %i ,%i ,%i P: %i ,%i ,%i ,%i ,%i ,%i ,%i ,%1 ,%i \n",dig_T1,dig_T2,dig_T3,dig_P1,dig_P2,dig_P3,dig_P4,dig_P5,dig_P6,dig_P7,dig_P8,dig_P9);
    190a:	80 91 14 09 	lds	r24, 0x0914
    190e:	8f 93       	push	r24
    1910:	80 91 13 09 	lds	r24, 0x0913
    1914:	8f 93       	push	r24
    1916:	80 91 16 09 	lds	r24, 0x0916
    191a:	8f 93       	push	r24
    191c:	80 91 15 09 	lds	r24, 0x0915
    1920:	8f 93       	push	r24
    1922:	80 91 18 09 	lds	r24, 0x0918
    1926:	8f 93       	push	r24
    1928:	80 91 17 09 	lds	r24, 0x0917
    192c:	8f 93       	push	r24
    192e:	80 91 1a 09 	lds	r24, 0x091A
    1932:	8f 93       	push	r24
    1934:	80 91 19 09 	lds	r24, 0x0919
    1938:	8f 93       	push	r24
    193a:	80 91 1c 09 	lds	r24, 0x091C
    193e:	8f 93       	push	r24
    1940:	80 91 1b 09 	lds	r24, 0x091B
    1944:	8f 93       	push	r24
    1946:	80 91 1e 09 	lds	r24, 0x091E
    194a:	8f 93       	push	r24
    194c:	80 91 1d 09 	lds	r24, 0x091D
    1950:	8f 93       	push	r24
    1952:	80 91 20 09 	lds	r24, 0x0920
    1956:	8f 93       	push	r24
    1958:	80 91 1f 09 	lds	r24, 0x091F
    195c:	8f 93       	push	r24
    195e:	80 91 22 09 	lds	r24, 0x0922
    1962:	8f 93       	push	r24
    1964:	80 91 21 09 	lds	r24, 0x0921
    1968:	8f 93       	push	r24
    196a:	80 91 12 09 	lds	r24, 0x0912
    196e:	8f 93       	push	r24
    1970:	80 91 11 09 	lds	r24, 0x0911
    1974:	8f 93       	push	r24
    1976:	80 91 24 09 	lds	r24, 0x0924
    197a:	8f 93       	push	r24
    197c:	80 91 23 09 	lds	r24, 0x0923
    1980:	8f 93       	push	r24
    1982:	80 91 26 09 	lds	r24, 0x0926
    1986:	8f 93       	push	r24
    1988:	80 91 25 09 	lds	r24, 0x0925
    198c:	8f 93       	push	r24
    198e:	80 91 10 09 	lds	r24, 0x0910
    1992:	8f 93       	push	r24
    1994:	80 91 0f 09 	lds	r24, 0x090F
    1998:	8f 93       	push	r24
    199a:	83 e3       	ldi	r24, 0x33	; 51
    199c:	94 e0       	ldi	r25, 0x04	; 4
    199e:	9f 93       	push	r25
    19a0:	8f 93       	push	r24
    19a2:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <printf>
		return (1);
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	f8 94       	cli
    19aa:	de bf       	out	0x3e, r29	; 62
    19ac:	0f be       	out	0x3f, r0	; 63
    19ae:	cd bf       	out	0x3d, r28	; 61
    19b0:	81 e0       	ldi	r24, 0x01	; 1
	}
	else 
		return (0);
}
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	df 91       	pop	r29
    19b8:	cf 91       	pop	r28
    19ba:	08 95       	ret

000019bc <BMP280_SetOversampling>:
  @brief Sets the oversampling setting for the library
  @param[in] oss Oversampling setting
  @return 1
*****************************************************************************/
char BMP280_SetOversampling(short oss){
	oversampling = oss;
    19bc:	90 93 0e 09 	sts	0x090E, r25
    19c0:	80 93 0d 09 	sts	0x090D, r24
	return (1);
}
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	08 95       	ret

000019c8 <BMP280_StartMeasurment>:

/*************************************************************************//**
  @brief Starts a measurement
  @return time to wait for result (in ms)
*****************************************************************************/
char BMP280_StartMeasurment(void){
    19c8:	1f 93       	push	r17
    19ca:	cf 93       	push	r28
    19cc:	df 93       	push	r29
    19ce:	00 d0       	rcall	.+0      	; 0x19d0 <BMP280_StartMeasurment+0x8>
    19d0:	cd b7       	in	r28, 0x3d	; 61
    19d2:	de b7       	in	r29, 0x3e	; 62
	unsigned char data[2], result, delay;
	
	data[0] = BMP280_REG_CONTROL;
    19d4:	84 ef       	ldi	r24, 0xF4	; 244
    19d6:	89 83       	std	Y+1, r24	; 0x01

	switch (oversampling){
    19d8:	80 91 0d 09 	lds	r24, 0x090D
    19dc:	90 91 0e 09 	lds	r25, 0x090E
    19e0:	82 30       	cpi	r24, 0x02	; 2
    19e2:	91 05       	cpc	r25, r1
    19e4:	01 f1       	breq	.+64     	; 0x1a26 <BMP280_StartMeasurment+0x5e>
    19e6:	2c f4       	brge	.+10     	; 0x19f2 <BMP280_StartMeasurment+0x2a>
    19e8:	00 97       	sbiw	r24, 0x00	; 0
    19ea:	49 f0       	breq	.+18     	; 0x19fe <BMP280_StartMeasurment+0x36>
    19ec:	01 97       	sbiw	r24, 0x01	; 1
    19ee:	89 f0       	breq	.+34     	; 0x1a12 <BMP280_StartMeasurment+0x4a>
    19f0:	38 c0       	rjmp	.+112    	; 0x1a62 <BMP280_StartMeasurment+0x9a>
    19f2:	83 30       	cpi	r24, 0x03	; 3
    19f4:	91 05       	cpc	r25, r1
    19f6:	09 f1       	breq	.+66     	; 0x1a3a <BMP280_StartMeasurment+0x72>
    19f8:	04 97       	sbiw	r24, 0x04	; 4
    19fa:	49 f1       	breq	.+82     	; 0x1a4e <BMP280_StartMeasurment+0x86>
    19fc:	32 c0       	rjmp	.+100    	; 0x1a62 <BMP280_StartMeasurment+0x9a>
		case 0:
		data[1] = BMP280_COMMAND_PRESSURE0;
    19fe:	85 e2       	ldi	r24, 0x25	; 37
    1a00:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    1a02:	81 e0       	ldi	r24, 0x01	; 1
    1a04:	90 e0       	ldi	r25, 0x00	; 0
    1a06:	90 93 0c 09 	sts	0x090C, r25
    1a0a:	80 93 0b 09 	sts	0x090B, r24
		delay = 8;
    1a0e:	18 e0       	ldi	r17, 0x08	; 8
		break;
    1a10:	2b c0       	rjmp	.+86     	; 0x1a68 <BMP280_StartMeasurment+0xa0>
		case 1:
		data[1] = BMP280_COMMAND_PRESSURE1;
    1a12:	89 e2       	ldi	r24, 0x29	; 41
    1a14:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    1a16:	81 e0       	ldi	r24, 0x01	; 1
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	90 93 0c 09 	sts	0x090C, r25
    1a1e:	80 93 0b 09 	sts	0x090B, r24
		delay = 10;
    1a22:	1a e0       	ldi	r17, 0x0A	; 10
		break;
    1a24:	21 c0       	rjmp	.+66     	; 0x1a68 <BMP280_StartMeasurment+0xa0>
		case 2:
		data[1] = BMP280_COMMAND_PRESSURE2;
    1a26:	8d e2       	ldi	r24, 0x2D	; 45
    1a28:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    1a2a:	81 e0       	ldi	r24, 0x01	; 1
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	90 93 0c 09 	sts	0x090C, r25
    1a32:	80 93 0b 09 	sts	0x090B, r24
		delay = 15;
    1a36:	1f e0       	ldi	r17, 0x0F	; 15
		break;
    1a38:	17 c0       	rjmp	.+46     	; 0x1a68 <BMP280_StartMeasurment+0xa0>
		case 3:
		data[1] = BMP280_COMMAND_PRESSURE3;
    1a3a:	81 e3       	ldi	r24, 0x31	; 49
    1a3c:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	90 93 0c 09 	sts	0x090C, r25
    1a46:	80 93 0b 09 	sts	0x090B, r24
		delay = 24;
    1a4a:	18 e1       	ldi	r17, 0x18	; 24
		break;
    1a4c:	0d c0       	rjmp	.+26     	; 0x1a68 <BMP280_StartMeasurment+0xa0>
		case 4:
		data[1] = BMP280_COMMAND_PRESSURE4;
    1a4e:	8d e5       	ldi	r24, 0x5D	; 93
    1a50:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    1a52:	81 e0       	ldi	r24, 0x01	; 1
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	90 93 0c 09 	sts	0x090C, r25
    1a5a:	80 93 0b 09 	sts	0x090B, r24
		delay = 45;
    1a5e:	1d e2       	ldi	r17, 0x2D	; 45
		break;
    1a60:	03 c0       	rjmp	.+6      	; 0x1a68 <BMP280_StartMeasurment+0xa0>
		default:
		data[1] = BMP280_COMMAND_PRESSURE0;
    1a62:	85 e2       	ldi	r24, 0x25	; 37
    1a64:	8a 83       	std	Y+2, r24	; 0x02
		delay = 9;
    1a66:	19 e0       	ldi	r17, 0x09	; 9
  @param[in] *values pointer to an array to send, put the starting register in values[0]
  @param[in] length how many bytes to write (including the starting register ie. sizeof(values))
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_WriteBytes(unsigned char *values, char length){
	TWI_BeginWrite(BMP280_ADDR);
    1a68:	86 e7       	ldi	r24, 0x76	; 118
    1a6a:	0e 94 d6 03 	call	0x7ac	; 0x7ac <TWI_BeginWrite>
	if((TWI_Write(&values[0],length) == TWI_SENT_ACK) && (TWI_Stop() != 0)) return 1; //Send bytes, a STOP bit, and check for success
    1a6e:	62 e0       	ldi	r22, 0x02	; 2
    1a70:	70 e0       	ldi	r23, 0x00	; 0
    1a72:	ce 01       	movw	r24, r28
    1a74:	01 96       	adiw	r24, 0x01	; 1
    1a76:	0e 94 6c 04 	call	0x8d8	; 0x8d8 <TWI_Write>
    1a7a:	88 32       	cpi	r24, 0x28	; 40
    1a7c:	31 f4       	brne	.+12     	; 0x1a8a <BMP280_StartMeasurment+0xc2>
    1a7e:	0e 94 2b 04 	call	0x856	; 0x856 <TWI_Stop>
		data[1] = BMP280_COMMAND_PRESSURE0;
		delay = 9;
		break;
	}
	result = BMP280_WriteBytes(&data[0], 2);
	if (result) // good write?
    1a82:	88 23       	and	r24, r24
    1a84:	21 f0       	breq	.+8      	; 0x1a8e <BMP280_StartMeasurment+0xc6>
	return(delay); // return the delay in ms (rounded up) to wait before retrieving data
    1a86:	81 2f       	mov	r24, r17
    1a88:	03 c0       	rjmp	.+6      	; 0x1a90 <BMP280_StartMeasurment+0xc8>
	else
	return(-1); // or return -1 if there was a problem communicating with the BMP
    1a8a:	8f ef       	ldi	r24, 0xFF	; 255
    1a8c:	01 c0       	rjmp	.+2      	; 0x1a90 <BMP280_StartMeasurment+0xc8>
    1a8e:	8f ef       	ldi	r24, 0xFF	; 255
}
    1a90:	0f 90       	pop	r0
    1a92:	0f 90       	pop	r0
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	1f 91       	pop	r17
    1a9a:	08 95       	ret

00001a9c <BMP280_GetUnPT>:
  @brief Gets the uncalibrated temperature and pressure data
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetUnPT(double *uP, double *uT){
    1a9c:	8f 92       	push	r8
    1a9e:	9f 92       	push	r9
    1aa0:	af 92       	push	r10
    1aa2:	bf 92       	push	r11
    1aa4:	cf 92       	push	r12
    1aa6:	df 92       	push	r13
    1aa8:	ef 92       	push	r14
    1aaa:	ff 92       	push	r15
    1aac:	1f 93       	push	r17
    1aae:	cf 93       	push	r28
    1ab0:	df 93       	push	r29
    1ab2:	00 d0       	rcall	.+0      	; 0x1ab4 <BMP280_GetUnPT+0x18>
    1ab4:	00 d0       	rcall	.+0      	; 0x1ab6 <BMP280_GetUnPT+0x1a>
    1ab6:	00 d0       	rcall	.+0      	; 0x1ab8 <BMP280_GetUnPT+0x1c>
    1ab8:	cd b7       	in	r28, 0x3d	; 61
    1aba:	de b7       	in	r29, 0x3e	; 62
    1abc:	6c 01       	movw	r12, r24
    1abe:	7b 01       	movw	r14, r22
	unsigned char data[6];
	char result;
	
	data[0] = BMP280_REG_RESULT_PRESSURE; //0xF7
    1ac0:	87 ef       	ldi	r24, 0xF7	; 247
    1ac2:	89 83       	std	Y+1, r24	; 0x01

	result = BMP280_ReadBytes(&data[0], 6); // 0xF7; xF8, 0xF9, 0xFA, 0xFB, 0xFC
    1ac4:	66 e0       	ldi	r22, 0x06	; 6
    1ac6:	ce 01       	movw	r24, r28
    1ac8:	01 96       	adiw	r24, 0x01	; 1
    1aca:	0e 94 af 0b 	call	0x175e	; 0x175e <BMP280_ReadBytes>
    1ace:	18 2f       	mov	r17, r24
	if (result){ // good read
    1ad0:	88 23       	and	r24, r24
    1ad2:	09 f4       	brne	.+2      	; 0x1ad6 <BMP280_GetUnPT+0x3a>
    1ad4:	76 c0       	rjmp	.+236    	; 0x1bc2 <BMP280_GetUnPT+0x126>
		double factor = pow(2, 4);
		*uP = (( (data[0] *256.0) + data[1] + (data[2]/256.0))) * factor ;	//20bit UP
    1ad6:	69 81       	ldd	r22, Y+1	; 0x01
    1ad8:	70 e0       	ldi	r23, 0x00	; 0
    1ada:	80 e0       	ldi	r24, 0x00	; 0
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__floatsisf>
    1ae2:	20 e0       	ldi	r18, 0x00	; 0
    1ae4:	30 e0       	ldi	r19, 0x00	; 0
    1ae6:	40 e8       	ldi	r20, 0x80	; 128
    1ae8:	53 e4       	ldi	r21, 0x43	; 67
    1aea:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1aee:	4b 01       	movw	r8, r22
    1af0:	5c 01       	movw	r10, r24
    1af2:	8a 81       	ldd	r24, Y+2	; 0x02
    1af4:	68 2f       	mov	r22, r24
    1af6:	70 e0       	ldi	r23, 0x00	; 0
    1af8:	80 e0       	ldi	r24, 0x00	; 0
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__floatsisf>
    1b00:	9b 01       	movw	r18, r22
    1b02:	ac 01       	movw	r20, r24
    1b04:	c5 01       	movw	r24, r10
    1b06:	b4 01       	movw	r22, r8
    1b08:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__addsf3>
    1b0c:	4b 01       	movw	r8, r22
    1b0e:	5c 01       	movw	r10, r24
    1b10:	4b 81       	ldd	r20, Y+3	; 0x03
    1b12:	64 2f       	mov	r22, r20
    1b14:	70 e0       	ldi	r23, 0x00	; 0
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__floatsisf>
    1b1e:	20 e0       	ldi	r18, 0x00	; 0
    1b20:	30 e0       	ldi	r19, 0x00	; 0
    1b22:	40 e8       	ldi	r20, 0x80	; 128
    1b24:	5b e3       	ldi	r21, 0x3B	; 59
    1b26:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1b2a:	9b 01       	movw	r18, r22
    1b2c:	ac 01       	movw	r20, r24
    1b2e:	c5 01       	movw	r24, r10
    1b30:	b4 01       	movw	r22, r8
    1b32:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__addsf3>
    1b36:	20 e0       	ldi	r18, 0x00	; 0
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	40 e8       	ldi	r20, 0x80	; 128
    1b3c:	51 e4       	ldi	r21, 0x41	; 65
    1b3e:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1b42:	f6 01       	movw	r30, r12
    1b44:	60 83       	st	Z, r22
    1b46:	71 83       	std	Z+1, r23	; 0x01
    1b48:	82 83       	std	Z+2, r24	; 0x02
    1b4a:	93 83       	std	Z+3, r25	; 0x03
		*uT = (( (data[3] *256.0) + data[4] + (data[5]/256.0))) * factor ;	//20bit UT
    1b4c:	6c 81       	ldd	r22, Y+4	; 0x04
    1b4e:	70 e0       	ldi	r23, 0x00	; 0
    1b50:	80 e0       	ldi	r24, 0x00	; 0
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__floatsisf>
    1b58:	20 e0       	ldi	r18, 0x00	; 0
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	40 e8       	ldi	r20, 0x80	; 128
    1b5e:	53 e4       	ldi	r21, 0x43	; 67
    1b60:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1b64:	4b 01       	movw	r8, r22
    1b66:	5c 01       	movw	r10, r24
    1b68:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6a:	68 2f       	mov	r22, r24
    1b6c:	70 e0       	ldi	r23, 0x00	; 0
    1b6e:	80 e0       	ldi	r24, 0x00	; 0
    1b70:	90 e0       	ldi	r25, 0x00	; 0
    1b72:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__floatsisf>
    1b76:	9b 01       	movw	r18, r22
    1b78:	ac 01       	movw	r20, r24
    1b7a:	c5 01       	movw	r24, r10
    1b7c:	b4 01       	movw	r22, r8
    1b7e:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__addsf3>
    1b82:	4b 01       	movw	r8, r22
    1b84:	5c 01       	movw	r10, r24
    1b86:	8e 81       	ldd	r24, Y+6	; 0x06
    1b88:	68 2f       	mov	r22, r24
    1b8a:	70 e0       	ldi	r23, 0x00	; 0
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__floatsisf>
    1b94:	20 e0       	ldi	r18, 0x00	; 0
    1b96:	30 e0       	ldi	r19, 0x00	; 0
    1b98:	40 e8       	ldi	r20, 0x80	; 128
    1b9a:	5b e3       	ldi	r21, 0x3B	; 59
    1b9c:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1ba0:	9b 01       	movw	r18, r22
    1ba2:	ac 01       	movw	r20, r24
    1ba4:	c5 01       	movw	r24, r10
    1ba6:	b4 01       	movw	r22, r8
    1ba8:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__addsf3>
    1bac:	20 e0       	ldi	r18, 0x00	; 0
    1bae:	30 e0       	ldi	r19, 0x00	; 0
    1bb0:	40 e8       	ldi	r20, 0x80	; 128
    1bb2:	51 e4       	ldi	r21, 0x41	; 65
    1bb4:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1bb8:	f7 01       	movw	r30, r14
    1bba:	60 83       	st	Z, r22
    1bbc:	71 83       	std	Z+1, r23	; 0x01
    1bbe:	82 83       	std	Z+2, r24	; 0x02
    1bc0:	93 83       	std	Z+3, r25	; 0x03
		
	}
	return(result);
}
    1bc2:	81 2f       	mov	r24, r17
    1bc4:	26 96       	adiw	r28, 0x06	; 6
    1bc6:	0f b6       	in	r0, 0x3f	; 63
    1bc8:	f8 94       	cli
    1bca:	de bf       	out	0x3e, r29	; 62
    1bcc:	0f be       	out	0x3f, r0	; 63
    1bce:	cd bf       	out	0x3d, r28	; 61
    1bd0:	df 91       	pop	r29
    1bd2:	cf 91       	pop	r28
    1bd4:	1f 91       	pop	r17
    1bd6:	ff 90       	pop	r15
    1bd8:	ef 90       	pop	r14
    1bda:	df 90       	pop	r13
    1bdc:	cf 90       	pop	r12
    1bde:	bf 90       	pop	r11
    1be0:	af 90       	pop	r10
    1be2:	9f 90       	pop	r9
    1be4:	8f 90       	pop	r8
    1be6:	08 95       	ret

00001be8 <BMP280_CalcTemperature>:
  @brief Calculates temperature
  @param[out] pointer to a place to store the temperature data
  @param[in] pointer to the uncalibrated temperature data
  @return status
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
    1be8:	4f 92       	push	r4
    1bea:	5f 92       	push	r5
    1bec:	6f 92       	push	r6
    1bee:	7f 92       	push	r7
    1bf0:	8f 92       	push	r8
    1bf2:	9f 92       	push	r9
    1bf4:	af 92       	push	r10
    1bf6:	bf 92       	push	r11
    1bf8:	cf 92       	push	r12
    1bfa:	df 92       	push	r13
    1bfc:	ef 92       	push	r14
    1bfe:	ff 92       	push	r15
    1c00:	cf 93       	push	r28
    1c02:	df 93       	push	r29
    1c04:	ec 01       	movw	r28, r24
	double adc_T = *uT ;
    1c06:	fb 01       	movw	r30, r22
    1c08:	c0 80       	ld	r12, Z
    1c0a:	d1 80       	ldd	r13, Z+1	; 0x01
    1c0c:	e2 80       	ldd	r14, Z+2	; 0x02
    1c0e:	f3 80       	ldd	r15, Z+3	; 0x03
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
    1c10:	80 91 0f 09 	lds	r24, 0x090F
    1c14:	90 91 10 09 	lds	r25, 0x0910
    1c18:	bc 01       	movw	r22, r24
    1c1a:	80 e0       	ldi	r24, 0x00	; 0
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <__floatunsisf>
    1c22:	2b 01       	movw	r4, r22
    1c24:	3c 01       	movw	r6, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
    1c26:	20 e0       	ldi	r18, 0x00	; 0
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	40 e0       	ldi	r20, 0x00	; 0
    1c2c:	57 e3       	ldi	r21, 0x37	; 55
    1c2e:	c7 01       	movw	r24, r14
    1c30:	b6 01       	movw	r22, r12
    1c32:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1c36:	4b 01       	movw	r8, r22
    1c38:	5c 01       	movw	r10, r24
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	40 e0       	ldi	r20, 0x00	; 0
    1c40:	59 e3       	ldi	r21, 0x39	; 57
    1c42:	c3 01       	movw	r24, r6
    1c44:	b2 01       	movw	r22, r4
    1c46:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1c4a:	9b 01       	movw	r18, r22
    1c4c:	ac 01       	movw	r20, r24
    1c4e:	c5 01       	movw	r24, r10
    1c50:	b4 01       	movw	r22, r8
    1c52:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__subsf3>
    1c56:	4b 01       	movw	r8, r22
    1c58:	5c 01       	movw	r10, r24
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
	double adc_T = *uT ;
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	40 e8       	ldi	r20, 0x80	; 128
    1c60:	58 e3       	ldi	r21, 0x38	; 56
    1c62:	c7 01       	movw	r24, r14
    1c64:	b6 01       	movw	r22, r12
    1c66:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1c6a:	6b 01       	movw	r12, r22
    1c6c:	7c 01       	movw	r14, r24
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	40 e8       	ldi	r20, 0x80	; 128
    1c74:	5a e3       	ldi	r21, 0x3A	; 58
    1c76:	c3 01       	movw	r24, r6
    1c78:	b2 01       	movw	r22, r4
    1c7a:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1c7e:	9b 01       	movw	r18, r22
    1c80:	ac 01       	movw	r20, r24
    1c82:	c7 01       	movw	r24, r14
    1c84:	b6 01       	movw	r22, r12
    1c86:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__subsf3>
    1c8a:	6b 01       	movw	r12, r22
    1c8c:	7c 01       	movw	r14, r24
    1c8e:	80 91 25 09 	lds	r24, 0x0925
    1c92:	90 91 26 09 	lds	r25, 0x0926
    1c96:	bc 01       	movw	r22, r24
    1c98:	99 0f       	add	r25, r25
    1c9a:	88 0b       	sbc	r24, r24
    1c9c:	99 0b       	sbc	r25, r25
    1c9e:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__floatsisf>
    1ca2:	9b 01       	movw	r18, r22
    1ca4:	ac 01       	movw	r20, r24
    1ca6:	c7 01       	movw	r24, r14
    1ca8:	b6 01       	movw	r22, r12
    1caa:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1cae:	6b 01       	movw	r12, r22
    1cb0:	7c 01       	movw	r14, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
    1cb2:	a5 01       	movw	r20, r10
    1cb4:	94 01       	movw	r18, r8
    1cb6:	c5 01       	movw	r24, r10
    1cb8:	b4 01       	movw	r22, r8
    1cba:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1cbe:	4b 01       	movw	r8, r22
    1cc0:	5c 01       	movw	r10, r24
    1cc2:	40 91 23 09 	lds	r20, 0x0923
    1cc6:	50 91 24 09 	lds	r21, 0x0924
    1cca:	ba 01       	movw	r22, r20
    1ccc:	55 0f       	add	r21, r21
    1cce:	88 0b       	sbc	r24, r24
    1cd0:	99 0b       	sbc	r25, r25
    1cd2:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__floatsisf>
    1cd6:	9b 01       	movw	r18, r22
    1cd8:	ac 01       	movw	r20, r24
    1cda:	c5 01       	movw	r24, r10
    1cdc:	b4 01       	movw	r22, r8
    1cde:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1ce2:	9b 01       	movw	r18, r22
    1ce4:	ac 01       	movw	r20, r24
	t_fine = (long signed int)(var1+var2);
    1ce6:	c7 01       	movw	r24, r14
    1ce8:	b6 01       	movw	r22, r12
    1cea:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__addsf3>
    1cee:	6b 01       	movw	r12, r22
    1cf0:	7c 01       	movw	r14, r24
    1cf2:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <__fixsfsi>
    1cf6:	60 93 07 09 	sts	0x0907, r22
    1cfa:	70 93 08 09 	sts	0x0908, r23
    1cfe:	80 93 09 09 	sts	0x0909, r24
    1d02:	90 93 0a 09 	sts	0x090A, r25
	
	*T = (var1+var2)/5120.0;
    1d06:	20 e0       	ldi	r18, 0x00	; 0
    1d08:	30 e0       	ldi	r19, 0x00	; 0
    1d0a:	40 ea       	ldi	r20, 0xA0	; 160
    1d0c:	55 e4       	ldi	r21, 0x45	; 69
    1d0e:	c7 01       	movw	r24, r14
    1d10:	b6 01       	movw	r22, r12
    1d12:	0e 94 57 15 	call	0x2aae	; 0x2aae <__divsf3>
    1d16:	6b 01       	movw	r12, r22
    1d18:	7c 01       	movw	r14, r24
    1d1a:	68 83       	st	Y, r22
    1d1c:	79 83       	std	Y+1, r23	; 0x01
    1d1e:	8a 83       	std	Y+2, r24	; 0x02
    1d20:	9b 83       	std	Y+3, r25	; 0x03
	
	if(*T>100.0 || *T <(-100.0))return 0;
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	48 ec       	ldi	r20, 0xC8	; 200
    1d28:	52 e4       	ldi	r21, 0x42	; 66
    1d2a:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__gesf2>
    1d2e:	18 16       	cp	r1, r24
    1d30:	74 f0       	brlt	.+28     	; 0x1d4e <BMP280_CalcTemperature+0x166>
    1d32:	20 e0       	ldi	r18, 0x00	; 0
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	48 ec       	ldi	r20, 0xC8	; 200
    1d38:	52 ec       	ldi	r21, 0xC2	; 194
    1d3a:	c7 01       	movw	r24, r14
    1d3c:	b6 01       	movw	r22, r12
    1d3e:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__cmpsf2>
    1d42:	88 1f       	adc	r24, r24
    1d44:	88 27       	eor	r24, r24
    1d46:	88 1f       	adc	r24, r24
    1d48:	91 e0       	ldi	r25, 0x01	; 1
    1d4a:	89 27       	eor	r24, r25
    1d4c:	01 c0       	rjmp	.+2      	; 0x1d50 <BMP280_CalcTemperature+0x168>
    1d4e:	80 e0       	ldi	r24, 0x00	; 0
	
	return (1);
}
    1d50:	df 91       	pop	r29
    1d52:	cf 91       	pop	r28
    1d54:	ff 90       	pop	r15
    1d56:	ef 90       	pop	r14
    1d58:	df 90       	pop	r13
    1d5a:	cf 90       	pop	r12
    1d5c:	bf 90       	pop	r11
    1d5e:	af 90       	pop	r10
    1d60:	9f 90       	pop	r9
    1d62:	8f 90       	pop	r8
    1d64:	7f 90       	pop	r7
    1d66:	6f 90       	pop	r6
    1d68:	5f 90       	pop	r5
    1d6a:	4f 90       	pop	r4
    1d6c:	08 95       	ret

00001d6e <BMP280_CalcPressure>:
  @brief Calculates pressure
  @param[out] pointer to a place to store the pressure data
  @param[in] pointer to the uncalibrated pressure data
  @return status
*****************************************************************************/
char BMP280_CalcPressure(double *P,double *uP){
    1d6e:	4f 92       	push	r4
    1d70:	5f 92       	push	r5
    1d72:	6f 92       	push	r6
    1d74:	7f 92       	push	r7
    1d76:	8f 92       	push	r8
    1d78:	9f 92       	push	r9
    1d7a:	af 92       	push	r10
    1d7c:	bf 92       	push	r11
    1d7e:	cf 92       	push	r12
    1d80:	df 92       	push	r13
    1d82:	ef 92       	push	r14
    1d84:	ff 92       	push	r15
    1d86:	0f 93       	push	r16
    1d88:	1f 93       	push	r17
    1d8a:	cf 93       	push	r28
    1d8c:	df 93       	push	r29
    1d8e:	8c 01       	movw	r16, r24
    1d90:	eb 01       	movw	r28, r22
	//char result;
	double var1 , var2 ;
	
	var1 = ((double)t_fine/2.0) - 64000.0;
    1d92:	60 91 07 09 	lds	r22, 0x0907
    1d96:	70 91 08 09 	lds	r23, 0x0908
    1d9a:	80 91 09 09 	lds	r24, 0x0909
    1d9e:	90 91 0a 09 	lds	r25, 0x090A
    1da2:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__floatsisf>
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	30 e0       	ldi	r19, 0x00	; 0
    1daa:	40 e0       	ldi	r20, 0x00	; 0
    1dac:	5f e3       	ldi	r21, 0x3F	; 63
    1dae:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1db2:	20 e0       	ldi	r18, 0x00	; 0
    1db4:	30 e0       	ldi	r19, 0x00	; 0
    1db6:	4a e7       	ldi	r20, 0x7A	; 122
    1db8:	57 e4       	ldi	r21, 0x47	; 71
    1dba:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__subsf3>
    1dbe:	6b 01       	movw	r12, r22
    1dc0:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
    1dc2:	60 91 19 09 	lds	r22, 0x0919
    1dc6:	70 91 1a 09 	lds	r23, 0x091A
    1dca:	07 2e       	mov	r0, r23
    1dcc:	00 0c       	add	r0, r0
    1dce:	88 0b       	sbc	r24, r24
    1dd0:	99 0b       	sbc	r25, r25
    1dd2:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__floatsisf>
    1dd6:	a7 01       	movw	r20, r14
    1dd8:	96 01       	movw	r18, r12
    1dda:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1dde:	20 e0       	ldi	r18, 0x00	; 0
    1de0:	30 e0       	ldi	r19, 0x00	; 0
    1de2:	40 e0       	ldi	r20, 0x00	; 0
    1de4:	58 e3       	ldi	r21, 0x38	; 56
    1de6:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1dea:	a7 01       	movw	r20, r14
    1dec:	96 01       	movw	r18, r12
    1dee:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1df2:	4b 01       	movw	r8, r22
    1df4:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
    1df6:	60 91 1b 09 	lds	r22, 0x091B
    1dfa:	70 91 1c 09 	lds	r23, 0x091C
    1dfe:	07 2e       	mov	r0, r23
    1e00:	00 0c       	add	r0, r0
    1e02:	88 0b       	sbc	r24, r24
    1e04:	99 0b       	sbc	r25, r25
    1e06:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__floatsisf>
    1e0a:	a7 01       	movw	r20, r14
    1e0c:	96 01       	movw	r18, r12
    1e0e:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1e12:	9b 01       	movw	r18, r22
    1e14:	ac 01       	movw	r20, r24
    1e16:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__addsf3>
    1e1a:	a5 01       	movw	r20, r10
    1e1c:	94 01       	movw	r18, r8
    1e1e:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__addsf3>
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e8       	ldi	r20, 0x80	; 128
    1e28:	5e e3       	ldi	r21, 0x3E	; 62
    1e2a:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1e2e:	4b 01       	movw	r8, r22
    1e30:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var1 = (((double)dig_P3) * var1 * var1/524288.0 + ((double)dig_P2) * var1) / 524288.0;
    1e32:	60 91 1f 09 	lds	r22, 0x091F
    1e36:	70 91 20 09 	lds	r23, 0x0920
    1e3a:	07 2e       	mov	r0, r23
    1e3c:	00 0c       	add	r0, r0
    1e3e:	88 0b       	sbc	r24, r24
    1e40:	99 0b       	sbc	r25, r25
    1e42:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__floatsisf>
    1e46:	a7 01       	movw	r20, r14
    1e48:	96 01       	movw	r18, r12
    1e4a:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1e4e:	a7 01       	movw	r20, r14
    1e50:	96 01       	movw	r18, r12
    1e52:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1e56:	20 e0       	ldi	r18, 0x00	; 0
    1e58:	30 e0       	ldi	r19, 0x00	; 0
    1e5a:	40 e0       	ldi	r20, 0x00	; 0
    1e5c:	56 e3       	ldi	r21, 0x36	; 54
    1e5e:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1e62:	2b 01       	movw	r4, r22
    1e64:	3c 01       	movw	r6, r24
    1e66:	60 91 21 09 	lds	r22, 0x0921
    1e6a:	70 91 22 09 	lds	r23, 0x0922
    1e6e:	07 2e       	mov	r0, r23
    1e70:	00 0c       	add	r0, r0
    1e72:	88 0b       	sbc	r24, r24
    1e74:	99 0b       	sbc	r25, r25
    1e76:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__floatsisf>
    1e7a:	a7 01       	movw	r20, r14
    1e7c:	96 01       	movw	r18, r12
    1e7e:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1e82:	9b 01       	movw	r18, r22
    1e84:	ac 01       	movw	r20, r24
    1e86:	c3 01       	movw	r24, r6
    1e88:	b2 01       	movw	r22, r4
    1e8a:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__addsf3>
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e0       	ldi	r20, 0x00	; 0
    1e94:	56 e3       	ldi	r21, 0x36	; 54
    1e96:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
    1e9a:	20 e0       	ldi	r18, 0x00	; 0
    1e9c:	30 e0       	ldi	r19, 0x00	; 0
    1e9e:	40 e0       	ldi	r20, 0x00	; 0
    1ea0:	57 e4       	ldi	r21, 0x47	; 71
    1ea2:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__addsf3>
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	58 e3       	ldi	r21, 0x38	; 56
    1eae:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1eb2:	6b 01       	movw	r12, r22
    1eb4:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
    1eb6:	28 81       	ld	r18, Y
    1eb8:	39 81       	ldd	r19, Y+1	; 0x01
    1eba:	4a 81       	ldd	r20, Y+2	; 0x02
    1ebc:	5b 81       	ldd	r21, Y+3	; 0x03
    1ebe:	60 e0       	ldi	r22, 0x00	; 0
    1ec0:	70 e0       	ldi	r23, 0x00	; 0
    1ec2:	80 e8       	ldi	r24, 0x80	; 128
    1ec4:	99 e4       	ldi	r25, 0x49	; 73
    1ec6:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__subsf3>
    1eca:	2b 01       	movw	r4, r22
    1ecc:	3c 01       	movw	r6, r24
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
    1ece:	60 91 1d 09 	lds	r22, 0x091D
    1ed2:	70 91 1e 09 	lds	r23, 0x091E
    1ed6:	07 2e       	mov	r0, r23
    1ed8:	00 0c       	add	r0, r0
    1eda:	88 0b       	sbc	r24, r24
    1edc:	99 0b       	sbc	r25, r25
    1ede:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__floatsisf>
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	40 e8       	ldi	r20, 0x80	; 128
    1ee8:	57 e4       	ldi	r21, 0x47	; 71
    1eea:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1eee:	9b 01       	movw	r18, r22
    1ef0:	ac 01       	movw	r20, r24
    1ef2:	c5 01       	movw	r24, r10
    1ef4:	b4 01       	movw	r22, r8
    1ef6:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__addsf3>
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
    1efa:	20 e0       	ldi	r18, 0x00	; 0
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	40 e8       	ldi	r20, 0x80	; 128
    1f00:	59 e3       	ldi	r21, 0x39	; 57
    1f02:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1f06:	9b 01       	movw	r18, r22
    1f08:	ac 01       	movw	r20, r24
    1f0a:	c3 01       	movw	r24, r6
    1f0c:	b2 01       	movw	r22, r4
    1f0e:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__subsf3>
    1f12:	20 e0       	ldi	r18, 0x00	; 0
    1f14:	30 e5       	ldi	r19, 0x50	; 80
    1f16:	43 ec       	ldi	r20, 0xC3	; 195
    1f18:	55 e4       	ldi	r21, 0x45	; 69
    1f1a:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1f1e:	4b 01       	movw	r8, r22
    1f20:	5c 01       	movw	r10, r24
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
    1f22:	80 91 11 09 	lds	r24, 0x0911
    1f26:	90 91 12 09 	lds	r25, 0x0912
    1f2a:	bc 01       	movw	r22, r24
    1f2c:	80 e0       	ldi	r24, 0x00	; 0
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <__floatunsisf>
    1f34:	9b 01       	movw	r18, r22
    1f36:	ac 01       	movw	r20, r24
    1f38:	c7 01       	movw	r24, r14
    1f3a:	b6 01       	movw	r22, r12
    1f3c:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1f40:	9b 01       	movw	r18, r22
    1f42:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
    1f44:	c5 01       	movw	r24, r10
    1f46:	b4 01       	movw	r22, r8
    1f48:	0e 94 57 15 	call	0x2aae	; 0x2aae <__divsf3>
    1f4c:	6b 01       	movw	r12, r22
    1f4e:	7c 01       	movw	r14, r24
	//Serial.print("p = ");Serial.println(p,2);
	
	var1 = ((double)dig_P9)*p*p/2147483648.0;	//overflow
    1f50:	60 91 13 09 	lds	r22, 0x0913
    1f54:	70 91 14 09 	lds	r23, 0x0914
    1f58:	07 2e       	mov	r0, r23
    1f5a:	00 0c       	add	r0, r0
    1f5c:	88 0b       	sbc	r24, r24
    1f5e:	99 0b       	sbc	r25, r25
    1f60:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__floatsisf>
    1f64:	a7 01       	movw	r20, r14
    1f66:	96 01       	movw	r18, r12
    1f68:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1f6c:	a7 01       	movw	r20, r14
    1f6e:	96 01       	movw	r18, r12
    1f70:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	40 e0       	ldi	r20, 0x00	; 0
    1f7a:	50 e3       	ldi	r21, 0x30	; 48
    1f7c:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1f80:	4b 01       	movw	r8, r22
    1f82:	5c 01       	movw	r10, r24
	
	var2 = p*((double)dig_P8)/32768.0;
    1f84:	80 91 15 09 	lds	r24, 0x0915
    1f88:	90 91 16 09 	lds	r25, 0x0916
    1f8c:	bc 01       	movw	r22, r24
    1f8e:	99 0f       	add	r25, r25
    1f90:	88 0b       	sbc	r24, r24
    1f92:	99 0b       	sbc	r25, r25
    1f94:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__floatsisf>
    1f98:	a7 01       	movw	r20, r14
    1f9a:	96 01       	movw	r18, r12
    1f9c:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
    1fa2:	30 e0       	ldi	r19, 0x00	; 0
    1fa4:	40 e0       	ldi	r20, 0x00	; 0
    1fa6:	58 e3       	ldi	r21, 0x38	; 56
    1fa8:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1fac:	9b 01       	movw	r18, r22
    1fae:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	p = p + (var1+var2+((double)dig_P7))/16.0;
    1fb0:	c5 01       	movw	r24, r10
    1fb2:	b4 01       	movw	r22, r8
    1fb4:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__addsf3>
    1fb8:	4b 01       	movw	r8, r22
    1fba:	5c 01       	movw	r10, r24
    1fbc:	80 91 17 09 	lds	r24, 0x0917
    1fc0:	90 91 18 09 	lds	r25, 0x0918
    1fc4:	bc 01       	movw	r22, r24
    1fc6:	99 0f       	add	r25, r25
    1fc8:	88 0b       	sbc	r24, r24
    1fca:	99 0b       	sbc	r25, r25
    1fcc:	0e 94 01 16 	call	0x2c02	; 0x2c02 <__floatsisf>
    1fd0:	9b 01       	movw	r18, r22
    1fd2:	ac 01       	movw	r20, r24
    1fd4:	c5 01       	movw	r24, r10
    1fd6:	b4 01       	movw	r22, r8
    1fd8:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__addsf3>
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e8       	ldi	r20, 0x80	; 128
    1fe2:	5d e3       	ldi	r21, 0x3D	; 61
    1fe4:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    1fe8:	a7 01       	movw	r20, r14
    1fea:	96 01       	movw	r18, r12
    1fec:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__addsf3>
	//Serial.print("p = ");Serial.println(p,2);
	
	*P = p/100.0 ;
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	30 e0       	ldi	r19, 0x00	; 0
    1ff4:	48 ec       	ldi	r20, 0xC8	; 200
    1ff6:	52 e4       	ldi	r21, 0x42	; 66
    1ff8:	0e 94 57 15 	call	0x2aae	; 0x2aae <__divsf3>
    1ffc:	6b 01       	movw	r12, r22
    1ffe:	7c 01       	movw	r14, r24
    2000:	f8 01       	movw	r30, r16
    2002:	60 83       	st	Z, r22
    2004:	71 83       	std	Z+1, r23	; 0x01
    2006:	82 83       	std	Z+2, r24	; 0x02
    2008:	93 83       	std	Z+3, r25	; 0x03
	
	if((*P>1200.0) || (*P < 800.0))return (0);
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	46 e9       	ldi	r20, 0x96	; 150
    2010:	54 e4       	ldi	r21, 0x44	; 68
    2012:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <__gesf2>
    2016:	18 16       	cp	r1, r24
    2018:	74 f0       	brlt	.+28     	; 0x2036 <BMP280_CalcPressure+0x2c8>
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	48 e4       	ldi	r20, 0x48	; 72
    2020:	54 e4       	ldi	r21, 0x44	; 68
    2022:	c7 01       	movw	r24, r14
    2024:	b6 01       	movw	r22, r12
    2026:	0e 94 52 15 	call	0x2aa4	; 0x2aa4 <__cmpsf2>
    202a:	88 1f       	adc	r24, r24
    202c:	88 27       	eor	r24, r24
    202e:	88 1f       	adc	r24, r24
    2030:	91 e0       	ldi	r25, 0x01	; 1
    2032:	89 27       	eor	r24, r25
    2034:	01 c0       	rjmp	.+2      	; 0x2038 <BMP280_CalcPressure+0x2ca>
    2036:	80 e0       	ldi	r24, 0x00	; 0
	return (1);
}
    2038:	df 91       	pop	r29
    203a:	cf 91       	pop	r28
    203c:	1f 91       	pop	r17
    203e:	0f 91       	pop	r16
    2040:	ff 90       	pop	r15
    2042:	ef 90       	pop	r14
    2044:	df 90       	pop	r13
    2046:	cf 90       	pop	r12
    2048:	bf 90       	pop	r11
    204a:	af 90       	pop	r10
    204c:	9f 90       	pop	r9
    204e:	8f 90       	pop	r8
    2050:	7f 90       	pop	r7
    2052:	6f 90       	pop	r6
    2054:	5f 90       	pop	r5
    2056:	4f 90       	pop	r4
    2058:	08 95       	ret

0000205a <BMP280_GetTemperatureAndPressure>:
  @brief Gets temperature and pressure
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetTemperatureAndPressure(double *T,double *P){
    205a:	ef 92       	push	r14
    205c:	ff 92       	push	r15
    205e:	0f 93       	push	r16
    2060:	1f 93       	push	r17
    2062:	cf 93       	push	r28
    2064:	df 93       	push	r29
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	28 97       	sbiw	r28, 0x08	; 8
    206c:	0f b6       	in	r0, 0x3f	; 63
    206e:	f8 94       	cli
    2070:	de bf       	out	0x3e, r29	; 62
    2072:	0f be       	out	0x3f, r0	; 63
    2074:	cd bf       	out	0x3d, r28	; 61
    2076:	8c 01       	movw	r16, r24
    2078:	7b 01       	movw	r14, r22
	double uP,uT ;
	char result = BMP280_GetUnPT(&uP,&uT);
    207a:	be 01       	movw	r22, r28
    207c:	6b 5f       	subi	r22, 0xFB	; 251
    207e:	7f 4f       	sbci	r23, 0xFF	; 255
    2080:	ce 01       	movw	r24, r28
    2082:	01 96       	adiw	r24, 0x01	; 1
    2084:	0e 94 4e 0d 	call	0x1a9c	; 0x1a9c <BMP280_GetUnPT>
	if(result!=0){
    2088:	88 23       	and	r24, r24
    208a:	d1 f0       	breq	.+52     	; 0x20c0 <BMP280_GetTemperatureAndPressure+0x66>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
    208c:	be 01       	movw	r22, r28
    208e:	6b 5f       	subi	r22, 0xFB	; 251
    2090:	7f 4f       	sbci	r23, 0xFF	; 255
    2092:	c8 01       	movw	r24, r16
    2094:	0e 94 f4 0d 	call	0x1be8	; 0x1be8 <BMP280_CalcTemperature>
		if(result){
    2098:	88 23       	and	r24, r24
    209a:	69 f0       	breq	.+26     	; 0x20b6 <BMP280_GetTemperatureAndPressure+0x5c>
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
    209c:	be 01       	movw	r22, r28
    209e:	6f 5f       	subi	r22, 0xFF	; 255
    20a0:	7f 4f       	sbci	r23, 0xFF	; 255
    20a2:	c7 01       	movw	r24, r14
    20a4:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <BMP280_CalcPressure>
			if(result)return (1);
    20a8:	81 11       	cpse	r24, r1
    20aa:	0f c0       	rjmp	.+30     	; 0x20ca <BMP280_GetTemperatureAndPressure+0x70>
			else error = 3 ;	// pressure error ;
    20ac:	83 e0       	ldi	r24, 0x03	; 3
    20ae:	80 93 06 09 	sts	0x0906, r24
			return (0);
    20b2:	80 e0       	ldi	r24, 0x00	; 0
    20b4:	0b c0       	rjmp	.+22     	; 0x20cc <BMP280_GetTemperatureAndPressure+0x72>
		}else
		error = 2;	// temperature error ;
    20b6:	82 e0       	ldi	r24, 0x02	; 2
    20b8:	80 93 06 09 	sts	0x0906, r24
	}
	else
	error = 1;
	
	return (0);
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	06 c0       	rjmp	.+12     	; 0x20cc <BMP280_GetTemperatureAndPressure+0x72>
			return (0);
		}else
		error = 2;	// temperature error ;
	}
	else
	error = 1;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	80 93 06 09 	sts	0x0906, r24
	
	return (0);
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	01 c0       	rjmp	.+2      	; 0x20cc <BMP280_GetTemperatureAndPressure+0x72>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
		if(result){
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
			if(result)return (1);
    20ca:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	error = 1;
	
	return (0);
}
    20cc:	28 96       	adiw	r28, 0x08	; 8
    20ce:	0f b6       	in	r0, 0x3f	; 63
    20d0:	f8 94       	cli
    20d2:	de bf       	out	0x3e, r29	; 62
    20d4:	0f be       	out	0x3f, r0	; 63
    20d6:	cd bf       	out	0x3d, r28	; 61
    20d8:	df 91       	pop	r29
    20da:	cf 91       	pop	r28
    20dc:	1f 91       	pop	r17
    20de:	0f 91       	pop	r16
    20e0:	ff 90       	pop	r15
    20e2:	ef 90       	pop	r14
    20e4:	08 95       	ret

000020e6 <Si7020_readHumidity>:

/*************************************************************************//**
  @brief Read humidity from Si7020
  @return status one if successfully read and crc check, otherwise return zero
*****************************************************************************/
char Si7020_readHumidity(unsigned char *data, char length){
    20e6:	cf 93       	push	r28
    20e8:	df 93       	push	r29
    20ea:	ec 01       	movw	r28, r24
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
    20ec:	80 e4       	ldi	r24, 0x40	; 64
    20ee:	0e 94 d6 03 	call	0x7ac	; 0x7ac <TWI_BeginWrite>
	status = TWI_WriteByte(SI7020_REL_HUMIDITY_HOLD);	
    20f2:	85 ee       	ldi	r24, 0xE5	; 229
    20f4:	0e 94 c8 03 	call	0x790	; 0x790 <TWI_WriteByte>
	if(status != TWI_SENT_ACK) return 0; //Error out
    20f8:	88 32       	cpi	r24, 0x28	; 40
    20fa:	e9 f4       	brne	.+58     	; 0x2136 <Si7020_readHumidity+0x50>
	
	status = TWI_BeginRead(SI7020_ADDR);
    20fc:	80 e4       	ldi	r24, 0x40	; 64
    20fe:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <TWI_BeginRead>
	if(status != TWI_SLAR_ACK)	return 0;
    2102:	80 34       	cpi	r24, 0x40	; 64
    2104:	d1 f4       	brne	.+52     	; 0x213a <Si7020_readHumidity+0x54>
	
	status = TWI_Read(data,3,false);
    2106:	40 e0       	ldi	r20, 0x00	; 0
    2108:	63 e0       	ldi	r22, 0x03	; 3
    210a:	70 e0       	ldi	r23, 0x00	; 0
    210c:	ce 01       	movw	r24, r28
    210e:	0e 94 30 04 	call	0x860	; 0x860 <TWI_Read>
	if(status !=TWI_REC_ACK)	return 0;
    2112:	80 35       	cpi	r24, 0x50	; 80
    2114:	a1 f4       	brne	.+40     	; 0x213e <Si7020_readHumidity+0x58>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawHumidity, checksum) != 0) return 0;
    2116:	6a 81       	ldd	r22, Y+2	; 0x02
    2118:	70 e0       	ldi	r23, 0x00	; 0
	if(status !=TWI_REC_ACK)	return 0;
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
    211a:	88 81       	ld	r24, Y
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	98 2f       	mov	r25, r24
    2120:	88 27       	eor	r24, r24
    2122:	29 81       	ldd	r18, Y+1	; 0x01
	if(check_crc(rawHumidity, checksum) != 0) return 0;
    2124:	82 2b       	or	r24, r18
    2126:	0e 94 64 09 	call	0x12c8	; 0x12c8 <check_crc>
    212a:	89 2b       	or	r24, r25
    212c:	51 f4       	brne	.+20     	; 0x2142 <Si7020_readHumidity+0x5c>
	
	TWI_Stop();
    212e:	0e 94 2b 04 	call	0x856	; 0x856 <TWI_Stop>
	return 1;
    2132:	81 e0       	ldi	r24, 0x01	; 1
    2134:	07 c0       	rjmp	.+14     	; 0x2144 <Si7020_readHumidity+0x5e>
char Si7020_readHumidity(unsigned char *data, char length){
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
	status = TWI_WriteByte(SI7020_REL_HUMIDITY_HOLD);	
	if(status != TWI_SENT_ACK) return 0; //Error out
    2136:	80 e0       	ldi	r24, 0x00	; 0
    2138:	05 c0       	rjmp	.+10     	; 0x2144 <Si7020_readHumidity+0x5e>
	
	status = TWI_BeginRead(SI7020_ADDR);
	if(status != TWI_SLAR_ACK)	return 0;
    213a:	80 e0       	ldi	r24, 0x00	; 0
    213c:	03 c0       	rjmp	.+6      	; 0x2144 <Si7020_readHumidity+0x5e>
	
	status = TWI_Read(data,3,false);
	if(status !=TWI_REC_ACK)	return 0;
    213e:	80 e0       	ldi	r24, 0x00	; 0
    2140:	01 c0       	rjmp	.+2      	; 0x2144 <Si7020_readHumidity+0x5e>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawHumidity, checksum) != 0) return 0;
    2142:	80 e0       	ldi	r24, 0x00	; 0
	
	TWI_Stop();
	return 1;
}
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	08 95       	ret

0000214a <Si7020_calHumidity>:
*****************************************************************************/
float Si7020_calHumidity(unsigned char *data) {
	unsigned char msb = data[0];
	unsigned char lsb = data[1];

	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
    214a:	fc 01       	movw	r30, r24
    214c:	60 81       	ld	r22, Z
    214e:	70 e0       	ldi	r23, 0x00	; 0
    2150:	76 2f       	mov	r23, r22
    2152:	66 27       	eor	r22, r22
    2154:	81 81       	ldd	r24, Z+1	; 0x01
    2156:	68 2b       	or	r22, r24
	
	//Given the raw humidity data, calculate the actual relative humidity
	float tempRH = rawHumidity / (float)65536;
    2158:	80 e0       	ldi	r24, 0x00	; 0
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <__floatunsisf>
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	40 e8       	ldi	r20, 0x80	; 128
    2166:	57 e3       	ldi	r21, 0x37	; 55
    2168:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
	float rh = 125 * tempRH -6;
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	4a ef       	ldi	r20, 0xFA	; 250
    2172:	52 e4       	ldi	r21, 0x42	; 66
    2174:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	40 ec       	ldi	r20, 0xC0	; 192
    217e:	50 e4       	ldi	r21, 0x40	; 64
    2180:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__subsf3>
	
	return rh;
}
    2184:	08 95       	ret

00002186 <Si7020_readTemperature>:

/*************************************************************************//**
  @brief Read temperature from Si7020
  @return status one if successfully read and crc check, otherwise return zero
*****************************************************************************/
char Si7020_readTemperature(unsigned char *data, char length){
    2186:	cf 93       	push	r28
    2188:	df 93       	push	r29
    218a:	ec 01       	movw	r28, r24
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
    218c:	80 e4       	ldi	r24, 0x40	; 64
    218e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <TWI_BeginWrite>
	status = TWI_WriteByte(SI7020_TEMPERATURE_HOLD);	
    2192:	83 ee       	ldi	r24, 0xE3	; 227
    2194:	0e 94 c8 03 	call	0x790	; 0x790 <TWI_WriteByte>
	if(status != TWI_SENT_ACK) return 0; //Error out
    2198:	88 32       	cpi	r24, 0x28	; 40
    219a:	e9 f4       	brne	.+58     	; 0x21d6 <Si7020_readTemperature+0x50>
	
	status = TWI_BeginRead(SI7020_ADDR);
    219c:	80 e4       	ldi	r24, 0x40	; 64
    219e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <TWI_BeginRead>
	if(status != TWI_SLAR_ACK)	return 0;
    21a2:	80 34       	cpi	r24, 0x40	; 64
    21a4:	d1 f4       	brne	.+52     	; 0x21da <Si7020_readTemperature+0x54>
	
	status = TWI_Read(data,3,false);
    21a6:	40 e0       	ldi	r20, 0x00	; 0
    21a8:	63 e0       	ldi	r22, 0x03	; 3
    21aa:	70 e0       	ldi	r23, 0x00	; 0
    21ac:	ce 01       	movw	r24, r28
    21ae:	0e 94 30 04 	call	0x860	; 0x860 <TWI_Read>
	if(status !=TWI_REC_ACK)	return 0;
    21b2:	80 35       	cpi	r24, 0x50	; 80
    21b4:	a1 f4       	brne	.+40     	; 0x21de <Si7020_readTemperature+0x58>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawTemperature, checksum) != 0) return 0;
    21b6:	6a 81       	ldd	r22, Y+2	; 0x02
    21b8:	70 e0       	ldi	r23, 0x00	; 0
	if(status !=TWI_REC_ACK)	return 0;
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
    21ba:	88 81       	ld	r24, Y
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	98 2f       	mov	r25, r24
    21c0:	88 27       	eor	r24, r24
    21c2:	29 81       	ldd	r18, Y+1	; 0x01
	if(check_crc(rawTemperature, checksum) != 0) return 0;
    21c4:	82 2b       	or	r24, r18
    21c6:	0e 94 64 09 	call	0x12c8	; 0x12c8 <check_crc>
    21ca:	89 2b       	or	r24, r25
    21cc:	51 f4       	brne	.+20     	; 0x21e2 <Si7020_readTemperature+0x5c>
	
	TWI_Stop();
    21ce:	0e 94 2b 04 	call	0x856	; 0x856 <TWI_Stop>
	return 1;
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	07 c0       	rjmp	.+14     	; 0x21e4 <Si7020_readTemperature+0x5e>
char Si7020_readTemperature(unsigned char *data, char length){
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
	status = TWI_WriteByte(SI7020_TEMPERATURE_HOLD);	
	if(status != TWI_SENT_ACK) return 0; //Error out
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	05 c0       	rjmp	.+10     	; 0x21e4 <Si7020_readTemperature+0x5e>
	
	status = TWI_BeginRead(SI7020_ADDR);
	if(status != TWI_SLAR_ACK)	return 0;
    21da:	80 e0       	ldi	r24, 0x00	; 0
    21dc:	03 c0       	rjmp	.+6      	; 0x21e4 <Si7020_readTemperature+0x5e>
	
	status = TWI_Read(data,3,false);
	if(status !=TWI_REC_ACK)	return 0;
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	01 c0       	rjmp	.+2      	; 0x21e4 <Si7020_readTemperature+0x5e>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawTemperature, checksum) != 0) return 0;
    21e2:	80 e0       	ldi	r24, 0x00	; 0
	
	TWI_Stop();
	return 1;
}
    21e4:	df 91       	pop	r29
    21e6:	cf 91       	pop	r28
    21e8:	08 95       	ret

000021ea <Si7020_calTemperature>:
  @return temperature value
*****************************************************************************/
float Si7020_calTemperature(unsigned char *data) {
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
    21ea:	fc 01       	movw	r30, r24
    21ec:	60 81       	ld	r22, Z
    21ee:	70 e0       	ldi	r23, 0x00	; 0
    21f0:	76 2f       	mov	r23, r22
    21f2:	66 27       	eor	r22, r22
    21f4:	81 81       	ldd	r24, Z+1	; 0x01
    21f6:	68 2b       	or	r22, r24
	
	//Given the raw temperature data, calculate the actual temperature
	float tempTemperature = rawTemperature / (float)65536; 
    21f8:	80 e0       	ldi	r24, 0x00	; 0
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	0e 94 ff 15 	call	0x2bfe	; 0x2bfe <__floatunsisf>
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e8       	ldi	r20, 0x80	; 128
    2206:	57 e3       	ldi	r21, 0x37	; 55
    2208:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
	float realTemperature = 175.72 * tempTemperature - 46.85;
    220c:	22 e5       	ldi	r18, 0x52	; 82
    220e:	38 eb       	ldi	r19, 0xB8	; 184
    2210:	4f e2       	ldi	r20, 0x2F	; 47
    2212:	53 e4       	ldi	r21, 0x43	; 67
    2214:	0e 94 b6 16 	call	0x2d6c	; 0x2d6c <__mulsf3>
    2218:	26 e6       	ldi	r18, 0x66	; 102
    221a:	36 e6       	ldi	r19, 0x66	; 102
    221c:	4b e3       	ldi	r20, 0x3B	; 59
    221e:	52 e4       	ldi	r21, 0x42	; 66
    2220:	0e 94 e5 14 	call	0x29ca	; 0x29ca <__subsf3>
	
	return realTemperature;
    2224:	08 95       	ret

00002226 <DemoStorage_Device_VTinit>:
};


void DemoStorage_Device_VTinit( DemoStorageDevice *this )
{
	this->abstract.device_vt = &DemoStorageDevice_abstract_vmt;
    2226:	24 e3       	ldi	r18, 0x34	; 52
    2228:	32 e0       	ldi	r19, 0x02	; 2
    222a:	fc 01       	movw	r30, r24
    222c:	31 83       	std	Z+1, r19	; 0x01
    222e:	20 83       	st	Z, r18
    2230:	08 95       	ret

00002232 <DemoStorage_Device_init>:
}

int DemoStorage_Device_init( DemoStorageDevice *this )
{
	return 0;
}
    2232:	80 e0       	ldi	r24, 0x00	; 0
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	08 95       	ret

00002238 <DemoStorage_Device_reset>:

int DemoStorage_Device_reset( DemoStorageDevice *this )
{
	return 0;
}
    2238:	80 e0       	ldi	r24, 0x00	; 0
    223a:	90 e0       	ldi	r25, 0x00	; 0
    223c:	08 95       	ret

0000223e <DemoStorage_Device_getType>:

int DemoStorage_Device_getType( DemoStorageDevice *this )
{
	return TYPE_STORAGE_DEVICE;
}
    223e:	84 e0       	ldi	r24, 0x04	; 4
    2240:	90 e0       	ldi	r25, 0x00	; 0
    2242:	08 95       	ret

00002244 <DemoStorage_Device_Tinit>:



void DemoStorage_Device_Tinit(DemoStorageDevice *this)
{
	this->vmt = &DemoStorageDevice_vmt;
    2244:	2c e2       	ldi	r18, 0x2C	; 44
    2246:	32 e0       	ldi	r19, 0x02	; 2
    2248:	fc 01       	movw	r30, r24
    224a:	33 83       	std	Z+3, r19	; 0x03
    224c:	22 83       	std	Z+2, r18	; 0x02
    224e:	08 95       	ret

00002250 <DemoStorage_Device_Configure>:
}

int DemoStorage_Device_Configure(DemoStorageDevice *this)
{
	return 0;
}
    2250:	80 e0       	ldi	r24, 0x00	; 0
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	08 95       	ret

00002256 <DemoStorageget_CurDataUnit>:

DataUnit * DemoStorageget_CurDataUnit(DemoStorageDevice *this)
{
    2256:	0f 93       	push	r16
    2258:	1f 93       	push	r17
    225a:	cf 93       	push	r28
    225c:	df 93       	push	r29
    225e:	ec 01       	movw	r28, r24
	int t = this->cur_pos;
    2260:	0e 81       	ldd	r16, Y+6	; 0x06
    2262:	1f 81       	ldd	r17, Y+7	; 0x07
	printf("Executre get store Device : %d\n",t);
    2264:	1f 93       	push	r17
    2266:	0f 93       	push	r16
    2268:	8a e6       	ldi	r24, 0x6A	; 106
    226a:	94 e0       	ldi	r25, 0x04	; 4
    226c:	9f 93       	push	r25
    226e:	8f 93       	push	r24
    2270:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <printf>
	this->cur_pos = this->cur_pos+1;
    2274:	8e 81       	ldd	r24, Y+6	; 0x06
    2276:	9f 81       	ldd	r25, Y+7	; 0x07
    2278:	01 96       	adiw	r24, 0x01	; 1
    227a:	9f 83       	std	Y+7, r25	; 0x07
    227c:	8e 83       	std	Y+6, r24	; 0x06
	DataUnit * data_t = this -> StoragesData;
	return (data_t + t);
    227e:	28 e3       	ldi	r18, 0x38	; 56
    2280:	20 9f       	mul	r18, r16
    2282:	c0 01       	movw	r24, r0
    2284:	21 9f       	mul	r18, r17
    2286:	90 0d       	add	r25, r0
    2288:	11 24       	eor	r1, r1
    228a:	28 85       	ldd	r18, Y+8	; 0x08
    228c:	39 85       	ldd	r19, Y+9	; 0x09
    228e:	0f 90       	pop	r0
    2290:	0f 90       	pop	r0
    2292:	0f 90       	pop	r0
    2294:	0f 90       	pop	r0
    2296:	82 0f       	add	r24, r18
    2298:	93 1f       	adc	r25, r19
    229a:	df 91       	pop	r29
    229c:	cf 91       	pop	r28
    229e:	1f 91       	pop	r17
    22a0:	0f 91       	pop	r16
    22a2:	08 95       	ret

000022a4 <DemoStorage_Device_Execute>:
{
	this->vmt = &DemoStorageDevice_vmt;
}

int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
    22a4:	3f 92       	push	r3
    22a6:	4f 92       	push	r4
    22a8:	5f 92       	push	r5
    22aa:	6f 92       	push	r6
    22ac:	7f 92       	push	r7
    22ae:	8f 92       	push	r8
    22b0:	9f 92       	push	r9
    22b2:	af 92       	push	r10
    22b4:	bf 92       	push	r11
    22b6:	cf 92       	push	r12
    22b8:	df 92       	push	r13
    22ba:	ef 92       	push	r14
    22bc:	ff 92       	push	r15
    22be:	0f 93       	push	r16
    22c0:	1f 93       	push	r17
    22c2:	cf 93       	push	r28
    22c4:	df 93       	push	r29
    22c6:	cd b7       	in	r28, 0x3d	; 61
    22c8:	de b7       	in	r29, 0x3e	; 62
    22ca:	e8 97       	sbiw	r28, 0x38	; 56
    22cc:	0f b6       	in	r0, 0x3f	; 63
    22ce:	f8 94       	cli
    22d0:	de bf       	out	0x3e, r29	; 62
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	cd bf       	out	0x3d, r28	; 61
    22d6:	3c 01       	movw	r6, r24
	printf("Executre Storage Device\n");
    22d8:	8a e8       	ldi	r24, 0x8A	; 138
    22da:	94 e0       	ldi	r25, 0x04	; 4
    22dc:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <puts>
	for( int i=0; i<this->cur_pos; i++)
    22e0:	f3 01       	movw	r30, r6
    22e2:	86 81       	ldd	r24, Z+6	; 0x06
    22e4:	97 81       	ldd	r25, Z+7	; 0x07
    22e6:	18 16       	cp	r1, r24
    22e8:	19 06       	cpc	r1, r25
    22ea:	0c f0       	brlt	.+2      	; 0x22ee <DemoStorage_Device_Execute+0x4a>
    22ec:	8b c0       	rjmp	.+278    	; 0x2404 <DemoStorage_Device_Execute+0x160>
    22ee:	81 2c       	mov	r8, r1
    22f0:	91 2c       	mov	r9, r1
    22f2:	a1 2c       	mov	r10, r1
    22f4:	b1 2c       	mov	r11, r1
	{
		DataUnit temp = this->StoragesData[i];
    22f6:	0f 2e       	mov	r0, r31
    22f8:	f8 e3       	ldi	r31, 0x38	; 56
    22fa:	3f 2e       	mov	r3, r31
    22fc:	f0 2d       	mov	r31, r0
		printf("%04ld %02ld %02ld %02ld %02ld %02ld\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
    22fe:	0f 2e       	mov	r0, r31
    2300:	f2 ea       	ldi	r31, 0xA2	; 162
    2302:	4f 2e       	mov	r4, r31
    2304:	f4 e0       	ldi	r31, 0x04	; 4
    2306:	5f 2e       	mov	r5, r31
    2308:	f0 2d       	mov	r31, r0
    230a:	6e 01       	movw	r12, r28
    230c:	f1 e1       	ldi	r31, 0x11	; 17
    230e:	cf 0e       	add	r12, r31
    2310:	d1 1c       	adc	r13, r1
		for( int j = 0; j < MAX_NUM_DATA; ++j )
			printf("%3.3f ",temp.data[j]);
    2312:	0f 2e       	mov	r0, r31
    2314:	f7 ec       	ldi	r31, 0xC7	; 199
    2316:	ef 2e       	mov	r14, r31
    2318:	f4 e0       	ldi	r31, 0x04	; 4
    231a:	ff 2e       	mov	r15, r31
    231c:	f0 2d       	mov	r31, r0
int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
	{
		DataUnit temp = this->StoragesData[i];
    231e:	f3 01       	movw	r30, r6
    2320:	80 85       	ldd	r24, Z+8	; 0x08
    2322:	91 85       	ldd	r25, Z+9	; 0x09
    2324:	88 0d       	add	r24, r8
    2326:	99 1d       	adc	r25, r9
    2328:	fc 01       	movw	r30, r24
    232a:	de 01       	movw	r26, r28
    232c:	11 96       	adiw	r26, 0x01	; 1
    232e:	23 2d       	mov	r18, r3
    2330:	01 90       	ld	r0, Z+
    2332:	0d 92       	st	X+, r0
    2334:	2a 95       	dec	r18
    2336:	e1 f7       	brne	.-8      	; 0x2330 <DemoStorage_Device_Execute+0x8c>
		printf("%04ld %02ld %02ld %02ld %02ld %02ld\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
    2338:	fc 01       	movw	r30, r24
    233a:	23 8d       	ldd	r18, Z+27	; 0x1b
    233c:	2f 93       	push	r18
    233e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2340:	2f 93       	push	r18
    2342:	21 8d       	ldd	r18, Z+25	; 0x19
    2344:	2f 93       	push	r18
    2346:	20 8d       	ldd	r18, Z+24	; 0x18
    2348:	2f 93       	push	r18
    234a:	27 8d       	ldd	r18, Z+31	; 0x1f
    234c:	2f 93       	push	r18
    234e:	26 8d       	ldd	r18, Z+30	; 0x1e
    2350:	2f 93       	push	r18
    2352:	25 8d       	ldd	r18, Z+29	; 0x1d
    2354:	2f 93       	push	r18
    2356:	24 8d       	ldd	r18, Z+28	; 0x1c
    2358:	2f 93       	push	r18
    235a:	23 a1       	ldd	r18, Z+35	; 0x23
    235c:	2f 93       	push	r18
    235e:	22 a1       	ldd	r18, Z+34	; 0x22
    2360:	2f 93       	push	r18
    2362:	21 a1       	ldd	r18, Z+33	; 0x21
    2364:	2f 93       	push	r18
    2366:	20 a1       	ldd	r18, Z+32	; 0x20
    2368:	2f 93       	push	r18
    236a:	27 a1       	ldd	r18, Z+39	; 0x27
    236c:	2f 93       	push	r18
    236e:	26 a1       	ldd	r18, Z+38	; 0x26
    2370:	2f 93       	push	r18
    2372:	25 a1       	ldd	r18, Z+37	; 0x25
    2374:	2f 93       	push	r18
    2376:	24 a1       	ldd	r18, Z+36	; 0x24
    2378:	2f 93       	push	r18
    237a:	23 a5       	ldd	r18, Z+43	; 0x2b
    237c:	2f 93       	push	r18
    237e:	22 a5       	ldd	r18, Z+42	; 0x2a
    2380:	2f 93       	push	r18
    2382:	21 a5       	ldd	r18, Z+41	; 0x29
    2384:	2f 93       	push	r18
    2386:	20 a5       	ldd	r18, Z+40	; 0x28
    2388:	2f 93       	push	r18
    238a:	27 a5       	ldd	r18, Z+47	; 0x2f
    238c:	2f 93       	push	r18
    238e:	26 a5       	ldd	r18, Z+46	; 0x2e
    2390:	2f 93       	push	r18
    2392:	25 a5       	ldd	r18, Z+45	; 0x2d
    2394:	2f 93       	push	r18
    2396:	84 a5       	ldd	r24, Z+44	; 0x2c
    2398:	8f 93       	push	r24
    239a:	5f 92       	push	r5
    239c:	4f 92       	push	r4
    239e:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <printf>
    23a2:	8e 01       	movw	r16, r28
    23a4:	0f 5f       	subi	r16, 0xFF	; 255
    23a6:	1f 4f       	sbci	r17, 0xFF	; 255
    23a8:	0f b6       	in	r0, 0x3f	; 63
    23aa:	f8 94       	cli
    23ac:	de bf       	out	0x3e, r29	; 62
    23ae:	0f be       	out	0x3f, r0	; 63
    23b0:	cd bf       	out	0x3d, r28	; 61
		for( int j = 0; j < MAX_NUM_DATA; ++j )
			printf("%3.3f ",temp.data[j]);
    23b2:	f8 01       	movw	r30, r16
    23b4:	80 81       	ld	r24, Z
    23b6:	91 81       	ldd	r25, Z+1	; 0x01
    23b8:	22 81       	ldd	r18, Z+2	; 0x02
    23ba:	33 81       	ldd	r19, Z+3	; 0x03
    23bc:	0c 5f       	subi	r16, 0xFC	; 252
    23be:	1f 4f       	sbci	r17, 0xFF	; 255
    23c0:	3f 93       	push	r19
    23c2:	2f 93       	push	r18
    23c4:	9f 93       	push	r25
    23c6:	8f 93       	push	r24
    23c8:	ff 92       	push	r15
    23ca:	ef 92       	push	r14
    23cc:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <printf>
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
	{
		DataUnit temp = this->StoragesData[i];
		printf("%04ld %02ld %02ld %02ld %02ld %02ld\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
		for( int j = 0; j < MAX_NUM_DATA; ++j )
    23d0:	0f 90       	pop	r0
    23d2:	0f 90       	pop	r0
    23d4:	0f 90       	pop	r0
    23d6:	0f 90       	pop	r0
    23d8:	0f 90       	pop	r0
    23da:	0f 90       	pop	r0
    23dc:	0c 15       	cp	r16, r12
    23de:	1d 05       	cpc	r17, r13
    23e0:	41 f7       	brne	.-48     	; 0x23b2 <DemoStorage_Device_Execute+0x10e>
			printf("%3.3f ",temp.data[j]);
		printf("\n");
    23e2:	8a e0       	ldi	r24, 0x0A	; 10
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	0e 94 a2 1d 	call	0x3b44	; 0x3b44 <putchar>
}

int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
    23ea:	ff ef       	ldi	r31, 0xFF	; 255
    23ec:	af 1a       	sub	r10, r31
    23ee:	bf 0a       	sbc	r11, r31
    23f0:	88 e3       	ldi	r24, 0x38	; 56
    23f2:	88 0e       	add	r8, r24
    23f4:	91 1c       	adc	r9, r1
    23f6:	f3 01       	movw	r30, r6
    23f8:	86 81       	ldd	r24, Z+6	; 0x06
    23fa:	97 81       	ldd	r25, Z+7	; 0x07
    23fc:	a8 16       	cp	r10, r24
    23fe:	b9 06       	cpc	r11, r25
    2400:	0c f4       	brge	.+2      	; 0x2404 <DemoStorage_Device_Execute+0x160>
    2402:	8d cf       	rjmp	.-230    	; 0x231e <DemoStorage_Device_Execute+0x7a>
		printf("%04ld %02ld %02ld %02ld %02ld %02ld\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
		for( int j = 0; j < MAX_NUM_DATA; ++j )
			printf("%3.3f ",temp.data[j]);
		printf("\n");
	}
	this->cur_pos = 0;
    2404:	f3 01       	movw	r30, r6
    2406:	17 82       	std	Z+7, r1	; 0x07
    2408:	16 82       	std	Z+6, r1	; 0x06
	return 0;
}
    240a:	80 e0       	ldi	r24, 0x00	; 0
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	e8 96       	adiw	r28, 0x38	; 56
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	f8 94       	cli
    2414:	de bf       	out	0x3e, r29	; 62
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	cd bf       	out	0x3d, r28	; 61
    241a:	df 91       	pop	r29
    241c:	cf 91       	pop	r28
    241e:	1f 91       	pop	r17
    2420:	0f 91       	pop	r16
    2422:	ff 90       	pop	r15
    2424:	ef 90       	pop	r14
    2426:	df 90       	pop	r13
    2428:	cf 90       	pop	r12
    242a:	bf 90       	pop	r11
    242c:	af 90       	pop	r10
    242e:	9f 90       	pop	r9
    2430:	8f 90       	pop	r8
    2432:	7f 90       	pop	r7
    2434:	6f 90       	pop	r6
    2436:	5f 90       	pop	r5
    2438:	4f 90       	pop	r4
    243a:	3f 90       	pop	r3
    243c:	08 95       	ret

0000243e <New_DemoStorage_Device>:
{
	return TYPE_STORAGE_DEVICE;
}

DemoStorageDevice* New_DemoStorage_Device( int infonum )
{
    243e:	cf 92       	push	r12
    2440:	df 92       	push	r13
    2442:	ef 92       	push	r14
    2444:	ff 92       	push	r15
    2446:	cf 93       	push	r28
    2448:	df 93       	push	r29
    244a:	7c 01       	movw	r14, r24
	DemoStorageDevice *p = malloc(sizeof(DemoStorageDevice));
    244c:	8a e0       	ldi	r24, 0x0A	; 10
    244e:	90 e0       	ldi	r25, 0x00	; 0
    2450:	0e 94 39 1b 	call	0x3672	; 0x3672 <malloc>
    2454:	ec 01       	movw	r28, r24
	p->info = infonum;
    2456:	fd 82       	std	Y+5, r15	; 0x05
    2458:	ec 82       	std	Y+4, r14	; 0x04
};


void DemoStorage_Device_VTinit( DemoStorageDevice *this )
{
	this->abstract.device_vt = &DemoStorageDevice_abstract_vmt;
    245a:	84 e3       	ldi	r24, 0x34	; 52
    245c:	92 e0       	ldi	r25, 0x02	; 2
    245e:	99 83       	std	Y+1, r25	; 0x01
    2460:	88 83       	st	Y, r24



void DemoStorage_Device_Tinit(DemoStorageDevice *this)
{
	this->vmt = &DemoStorageDevice_vmt;
    2462:	8c e2       	ldi	r24, 0x2C	; 44
    2464:	92 e0       	ldi	r25, 0x02	; 2
    2466:	9b 83       	std	Y+3, r25	; 0x03
    2468:	8a 83       	std	Y+2, r24	; 0x02
{
	DemoStorageDevice *p = malloc(sizeof(DemoStorageDevice));
	p->info = infonum;
	DemoStorage_Device_VTinit(p);
	DemoStorage_Device_Tinit(p);
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
    246a:	88 e4       	ldi	r24, 0x48	; 72
    246c:	93 e0       	ldi	r25, 0x03	; 3
    246e:	0e 94 39 1b 	call	0x3672	; 0x3672 <malloc>
    2472:	99 87       	std	Y+9, r25	; 0x09
    2474:	88 87       	std	Y+8, r24	; 0x08
    2476:	40 e0       	ldi	r20, 0x00	; 0
    2478:	50 e0       	ldi	r21, 0x00	; 0
{
	return TYPE_STORAGE_DEVICE;
}

DemoStorageDevice* New_DemoStorage_Device( int infonum )
{
    247a:	70 e0       	ldi	r23, 0x00	; 0
    247c:	60 e0       	ldi	r22, 0x00	; 0
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
		for( int j=0;j<MAX_NUM_DATA;j++)
		{
				p->StoragesData[i].data[j] = -9999; 
    247e:	0f 2e       	mov	r0, r31
    2480:	c1 2c       	mov	r12, r1
    2482:	fc e3       	ldi	r31, 0x3C	; 60
    2484:	df 2e       	mov	r13, r31
    2486:	fc e1       	ldi	r31, 0x1C	; 28
    2488:	ef 2e       	mov	r14, r31
    248a:	f6 ec       	ldi	r31, 0xC6	; 198
    248c:	ff 2e       	mov	r15, r31
    248e:	f0 2d       	mov	r31, r0
    2490:	2a c0       	rjmp	.+84     	; 0x24e6 <New_DemoStorage_Device+0xa8>
    2492:	e8 85       	ldd	r30, Y+8	; 0x08
    2494:	f9 85       	ldd	r31, Y+9	; 0x09
    2496:	e4 0f       	add	r30, r20
    2498:	f5 1f       	adc	r31, r21
    249a:	c9 01       	movw	r24, r18
    249c:	88 0f       	add	r24, r24
    249e:	99 1f       	adc	r25, r25
    24a0:	88 0f       	add	r24, r24
    24a2:	99 1f       	adc	r25, r25
    24a4:	e8 0f       	add	r30, r24
    24a6:	f9 1f       	adc	r31, r25
    24a8:	c0 82       	st	Z, r12
    24aa:	d1 82       	std	Z+1, r13	; 0x01
    24ac:	e2 82       	std	Z+2, r14	; 0x02
    24ae:	f3 82       	std	Z+3, r15	; 0x03
				p->StoragesData[i].data_tm.unix_msec = 0;
    24b0:	e8 85       	ldd	r30, Y+8	; 0x08
    24b2:	f9 85       	ldd	r31, Y+9	; 0x09
    24b4:	e4 0f       	add	r30, r20
    24b6:	f5 1f       	adc	r31, r21
    24b8:	14 8a       	std	Z+20, r1	; 0x14
    24ba:	15 8a       	std	Z+21, r1	; 0x15
    24bc:	16 8a       	std	Z+22, r1	; 0x16
    24be:	17 8a       	std	Z+23, r1	; 0x17
				p->StoragesData[i].data_tm.unix_time = 0;
    24c0:	e8 85       	ldd	r30, Y+8	; 0x08
    24c2:	f9 85       	ldd	r31, Y+9	; 0x09
    24c4:	e4 0f       	add	r30, r20
    24c6:	f5 1f       	adc	r31, r21
    24c8:	10 8a       	std	Z+16, r1	; 0x10
    24ca:	11 8a       	std	Z+17, r1	; 0x11
    24cc:	12 8a       	std	Z+18, r1	; 0x12
    24ce:	13 8a       	std	Z+19, r1	; 0x13
	DemoStorage_Device_VTinit(p);
	DemoStorage_Device_Tinit(p);
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
		for( int j=0;j<MAX_NUM_DATA;j++)
    24d0:	2f 5f       	subi	r18, 0xFF	; 255
    24d2:	3f 4f       	sbci	r19, 0xFF	; 255
    24d4:	24 30       	cpi	r18, 0x04	; 4
    24d6:	31 05       	cpc	r19, r1
    24d8:	e1 f6       	brne	.-72     	; 0x2492 <New_DemoStorage_Device+0x54>
    24da:	48 5c       	subi	r20, 0xC8	; 200
    24dc:	5f 4f       	sbci	r21, 0xFF	; 255
	p->info = infonum;
	DemoStorage_Device_VTinit(p);
	DemoStorage_Device_Tinit(p);
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
    24de:	48 34       	cpi	r20, 0x48	; 72
    24e0:	83 e0       	ldi	r24, 0x03	; 3
    24e2:	58 07       	cpc	r21, r24
    24e4:	19 f0       	breq	.+6      	; 0x24ec <New_DemoStorage_Device+0xae>
{
	return TYPE_STORAGE_DEVICE;
}

DemoStorageDevice* New_DemoStorage_Device( int infonum )
{
    24e6:	27 2f       	mov	r18, r23
    24e8:	36 2f       	mov	r19, r22
    24ea:	d3 cf       	rjmp	.-90     	; 0x2492 <New_DemoStorage_Device+0x54>
		{
				p->StoragesData[i].data[j] = -9999; 
				p->StoragesData[i].data_tm.unix_msec = 0;
				p->StoragesData[i].data_tm.unix_time = 0;
		}
	p->cur_pos = 0;
    24ec:	1f 82       	std	Y+7, r1	; 0x07
    24ee:	1e 82       	std	Y+6, r1	; 0x06

	return p;
}
    24f0:	ce 01       	movw	r24, r28
    24f2:	df 91       	pop	r29
    24f4:	cf 91       	pop	r28
    24f6:	ff 90       	pop	r15
    24f8:	ef 90       	pop	r14
    24fa:	df 90       	pop	r13
    24fc:	cf 90       	pop	r12
    24fe:	08 95       	ret

00002500 <LoadData_Device_VTinit>:
};


void LoadData_Device_VTinit( LoadDataDevice *this )
{
	this->abstract.device_vt = &LoadDataDevice_abstract_vmt;
    2500:	22 e4       	ldi	r18, 0x42	; 66
    2502:	32 e0       	ldi	r19, 0x02	; 2
    2504:	fc 01       	movw	r30, r24
    2506:	31 83       	std	Z+1, r19	; 0x01
    2508:	20 83       	st	Z, r18
    250a:	08 95       	ret

0000250c <LoadData_Device_init>:
}

int LoadData_Device_init( LoadDataDevice *this )
{
	return 0;
}
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	08 95       	ret

00002512 <LoadData_Device_reset>:

int LoadData_Device_reset( LoadDataDevice *this )
{
	return 0;
}
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	08 95       	ret

00002518 <LoadData_Device_getType>:

int LoadData_Device_getType( LoadDataDevice *this )
{
	return TYPE_DEVICE;
}
    2518:	85 e0       	ldi	r24, 0x05	; 5
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	08 95       	ret

0000251e <LoadData_Device_Tinit>:



void LoadData_Device_Tinit(LoadDataDevice *this)
{
	this->vmt = &LoadDataDevice_vmt;
    251e:	2c e3       	ldi	r18, 0x3C	; 60
    2520:	32 e0       	ldi	r19, 0x02	; 2
    2522:	fc 01       	movw	r30, r24
    2524:	33 83       	std	Z+3, r19	; 0x03
    2526:	22 83       	std	Z+2, r18	; 0x02
    2528:	08 95       	ret

0000252a <LoadData_Device_Configure>:
}

int LoadData_Device_Configure(LoadDataDevice *this)
{
	return 0;
}
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	08 95       	ret

00002530 <LoadData_Device_Execute>:
{
	this->vmt = &LoadDataDevice_vmt;
}

int LoadData_Device_Execute(LoadDataDevice *this)
{
    2530:	cf 93       	push	r28
    2532:	df 93       	push	r29
    2534:	ec 01       	movw	r28, r24
	if( this -> store_device == NULL)
    2536:	8e 81       	ldd	r24, Y+6	; 0x06
    2538:	9f 81       	ldd	r25, Y+7	; 0x07
    253a:	89 2b       	or	r24, r25
    253c:	21 f4       	brne	.+8      	; 0x2546 <LoadData_Device_Execute+0x16>
		printf("NULL store device\n");
    253e:	8e ec       	ldi	r24, 0xCE	; 206
    2540:	94 e0       	ldi	r25, 0x04	; 4
    2542:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <puts>
	cur_data = this->store_device->vmt->get_CurDataUnit(this->store_device);
    2546:	8e 81       	ldd	r24, Y+6	; 0x06
    2548:	9f 81       	ldd	r25, Y+7	; 0x07
    254a:	dc 01       	movw	r26, r24
    254c:	12 96       	adiw	r26, 0x02	; 2
    254e:	ed 91       	ld	r30, X+
    2550:	fc 91       	ld	r31, X
    2552:	13 97       	sbiw	r26, 0x03	; 3
    2554:	06 80       	ldd	r0, Z+6	; 0x06
    2556:	f7 81       	ldd	r31, Z+7	; 0x07
    2558:	e0 2d       	mov	r30, r0
    255a:	09 95       	icall
    255c:	90 93 ef 05 	sts	0x05EF, r25
    2560:	80 93 ee 05 	sts	0x05EE, r24
	/*TODO : could init -999 here */
	
	
	if( cur_data != NULL)
    2564:	89 2b       	or	r24, r25
    2566:	09 f4       	brne	.+2      	; 0x256a <LoadData_Device_Execute+0x3a>
    2568:	44 c0       	rjmp	.+136    	; 0x25f2 <LoadData_Device_Execute+0xc2>
	{
		updateTime((uint32_t)TimeStamp,&cur_time);
    256a:	80 91 f0 05 	lds	r24, 0x05F0
    256e:	90 91 f1 05 	lds	r25, 0x05F1
    2572:	a0 91 f2 05 	lds	r26, 0x05F2
    2576:	b0 91 f3 05 	lds	r27, 0x05F3
    257a:	bc 01       	movw	r22, r24
    257c:	cd 01       	movw	r24, r26
    257e:	88 27       	eor	r24, r24
    2580:	99 27       	eor	r25, r25
    2582:	47 e2       	ldi	r20, 0x27	; 39
    2584:	59 e0       	ldi	r21, 0x09	; 9
    2586:	0e 94 64 0b 	call	0x16c8	; 0x16c8 <updateTime>
		cur_data->data_tm.unix_time = cur_time.unix_time;
    258a:	80 91 ee 05 	lds	r24, 0x05EE
    258e:	90 91 ef 05 	lds	r25, 0x05EF
    2592:	40 91 27 09 	lds	r20, 0x0927
    2596:	50 91 28 09 	lds	r21, 0x0928
    259a:	60 91 29 09 	lds	r22, 0x0929
    259e:	70 91 2a 09 	lds	r23, 0x092A
    25a2:	fc 01       	movw	r30, r24
    25a4:	40 8b       	std	Z+16, r20	; 0x10
    25a6:	51 8b       	std	Z+17, r21	; 0x11
    25a8:	62 8b       	std	Z+18, r22	; 0x12
    25aa:	73 8b       	std	Z+19, r23	; 0x13
		calcDate( &(cur_data->data_tm));
    25ac:	40 96       	adiw	r24, 0x10	; 16
    25ae:	0e 94 cb 09 	call	0x1396	; 0x1396 <calcDate>
		printf("time debug3 %ld\n",cur_data->data_tm.unix_time);
    25b2:	e0 91 ee 05 	lds	r30, 0x05EE
    25b6:	f0 91 ef 05 	lds	r31, 0x05EF
    25ba:	83 89       	ldd	r24, Z+19	; 0x13
    25bc:	8f 93       	push	r24
    25be:	82 89       	ldd	r24, Z+18	; 0x12
    25c0:	8f 93       	push	r24
    25c2:	81 89       	ldd	r24, Z+17	; 0x11
    25c4:	8f 93       	push	r24
    25c6:	80 89       	ldd	r24, Z+16	; 0x10
    25c8:	8f 93       	push	r24
    25ca:	80 ee       	ldi	r24, 0xE0	; 224
    25cc:	94 e0       	ldi	r25, 0x04	; 4
    25ce:	9f 93       	push	r25
    25d0:	8f 93       	push	r24
    25d2:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <printf>
		TimeStamp = 0;
    25d6:	10 92 f0 05 	sts	0x05F0, r1
    25da:	10 92 f1 05 	sts	0x05F1, r1
    25de:	10 92 f2 05 	sts	0x05F2, r1
    25e2:	10 92 f3 05 	sts	0x05F3, r1
    25e6:	0f 90       	pop	r0
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
	}
	return 0;
}
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	df 91       	pop	r29
    25f8:	cf 91       	pop	r28
    25fa:	08 95       	ret

000025fc <New_LoadData_Device>:
{
	return TYPE_DEVICE;
}

LoadDataDevice* New_LoadData_Device( int infonum, DemoStorageDevice * ptr )
{
    25fc:	0f 93       	push	r16
    25fe:	1f 93       	push	r17
    2600:	cf 93       	push	r28
    2602:	df 93       	push	r29
    2604:	8c 01       	movw	r16, r24
    2606:	eb 01       	movw	r28, r22
	LoadDataDevice *p = malloc(sizeof(LoadDataDevice));
    2608:	88 e0       	ldi	r24, 0x08	; 8
    260a:	90 e0       	ldi	r25, 0x00	; 0
    260c:	0e 94 39 1b 	call	0x3672	; 0x3672 <malloc>
    2610:	fc 01       	movw	r30, r24
	p->info = infonum;
    2612:	15 83       	std	Z+5, r17	; 0x05
    2614:	04 83       	std	Z+4, r16	; 0x04
	p->store_device = ptr;
    2616:	d7 83       	std	Z+7, r29	; 0x07
    2618:	c6 83       	std	Z+6, r28	; 0x06
};


void LoadData_Device_VTinit( LoadDataDevice *this )
{
	this->abstract.device_vt = &LoadDataDevice_abstract_vmt;
    261a:	82 e4       	ldi	r24, 0x42	; 66
    261c:	92 e0       	ldi	r25, 0x02	; 2
    261e:	91 83       	std	Z+1, r25	; 0x01
    2620:	80 83       	st	Z, r24



void LoadData_Device_Tinit(LoadDataDevice *this)
{
	this->vmt = &LoadDataDevice_vmt;
    2622:	8c e3       	ldi	r24, 0x3C	; 60
    2624:	92 e0       	ldi	r25, 0x02	; 2
    2626:	93 83       	std	Z+3, r25	; 0x03
    2628:	82 83       	std	Z+2, r24	; 0x02
	p->info = infonum;
	p->store_device = ptr;
	LoadData_Device_VTinit(p);
	LoadData_Device_Tinit(p);
	return p;
}
    262a:	cf 01       	movw	r24, r30
    262c:	df 91       	pop	r29
    262e:	cf 91       	pop	r28
    2630:	1f 91       	pop	r17
    2632:	0f 91       	pop	r16
    2634:	08 95       	ret

00002636 <BMP280_FctnInit>:



void BMP280_FctnInit(BMP280Sensor *this)
{
	this->inherited.vmt = &BMP280_vmt;
    2636:	22 e5       	ldi	r18, 0x52	; 82
    2638:	32 e0       	ldi	r19, 0x02	; 2
    263a:	fc 01       	movw	r30, r24
    263c:	35 87       	std	Z+13, r19	; 0x0d
    263e:	24 87       	std	Z+12, r18	; 0x0c
    2640:	08 95       	ret

00002642 <BMP280_Configure>:

int BMP280_Configure(BMP280Sensor *this )
{
	// virtual function
	return 0;
}
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	08 95       	ret

00002648 <BMP280_VTinit>:
	printf("BMP280_Error\n");
	return 0;
}
void BMP280_VTinit( BMP280Sensor* this)
{
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
    2648:	2a e4       	ldi	r18, 0x4A	; 74
    264a:	32 e0       	ldi	r19, 0x02	; 2
    264c:	fc 01       	movw	r30, r24
    264e:	31 83       	std	Z+1, r19	; 0x01
    2650:	20 83       	st	Z, r18
    2652:	08 95       	ret

00002654 <BMP280_reset>:

int BMP280_reset( BMP280Sensor* this)
{
    // virtual function
    return 0;
}
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	08 95       	ret

0000265a <BMP280_getType>:

int BMP280_getType(BMP280Sensor* this)
{
    return TYPE_SENSOR;
}
    265a:	83 e0       	ldi	r24, 0x03	; 3
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	08 95       	ret

00002660 <BMP280_Error>:
	return 0;
}

int BMP280_Error(BMP280Sensor *this )
{
	printf("BMP280_Error\n");
    2660:	81 ef       	ldi	r24, 0xF1	; 241
    2662:	94 e0       	ldi	r25, 0x04	; 4
    2664:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <puts>
	return 0;
}
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	08 95       	ret

0000266e <BMP280_init>:
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
}

int BMP280_init( BMP280Sensor* this)
{
    printf("BMP280 Sensor Init\n");
    266e:	8e ef       	ldi	r24, 0xFE	; 254
    2670:	94 e0       	ldi	r25, 0x04	; 4
    2672:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <puts>
    return 0;
}
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	08 95       	ret

0000267c <BMP280_Request>:
	// virtual function
	return 0;
}

int BMP280_Request(BMP280Sensor *this )
{
    267c:	cf 93       	push	r28
    267e:	df 93       	push	r29
	printf("BMP280 Request\n");
    2680:	81 e1       	ldi	r24, 0x11	; 17
    2682:	95 e0       	ldi	r25, 0x05	; 5
    2684:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <puts>
	int Delay = BMP280_StartMeasurment();
    2688:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <BMP280_StartMeasurment>
    268c:	c8 2f       	mov	r28, r24
    268e:	d0 e0       	ldi	r29, 0x00	; 0
	printf("\tWait for %d ms\n",Delay);
    2690:	1f 92       	push	r1
    2692:	8f 93       	push	r24
    2694:	80 e2       	ldi	r24, 0x20	; 32
    2696:	95 e0       	ldi	r25, 0x05	; 5
    2698:	9f 93       	push	r25
    269a:	8f 93       	push	r24
    269c:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <printf>
	if( Delay == 0 )
    26a0:	0f 90       	pop	r0
    26a2:	0f 90       	pop	r0
    26a4:	0f 90       	pop	r0
    26a6:	0f 90       	pop	r0
    26a8:	20 97       	sbiw	r28, 0x00	; 0
    26aa:	19 f0       	breq	.+6      	; 0x26b2 <BMP280_Request+0x36>
		return 0;
	else
		return ( 1 + Delay );
    26ac:	ce 01       	movw	r24, r28
    26ae:	01 96       	adiw	r24, 0x01	; 1
    26b0:	02 c0       	rjmp	.+4      	; 0x26b6 <BMP280_Request+0x3a>
{
	printf("BMP280 Request\n");
	int Delay = BMP280_StartMeasurment();
	printf("\tWait for %d ms\n",Delay);
	if( Delay == 0 )
		return 0;
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	90 e0       	ldi	r25, 0x00	; 0
	else
		return ( 1 + Delay );
}
    26b6:	df 91       	pop	r29
    26b8:	cf 91       	pop	r28
    26ba:	08 95       	ret

000026bc <BMP280_Collect>:

int BMP280_Collect(BMP280Sensor *this )
{
    26bc:	ef 92       	push	r14
    26be:	ff 92       	push	r15
    26c0:	0f 93       	push	r16
    26c2:	1f 93       	push	r17
    26c4:	cf 93       	push	r28
    26c6:	df 93       	push	r29
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
    26cc:	28 97       	sbiw	r28, 0x08	; 8
    26ce:	0f b6       	in	r0, 0x3f	; 63
    26d0:	f8 94       	cli
    26d2:	de bf       	out	0x3e, r29	; 62
    26d4:	0f be       	out	0x3f, r0	; 63
    26d6:	cd bf       	out	0x3d, r28	; 61
    26d8:	8c 01       	movw	r16, r24
	printf("BMP280 Collect\n");
    26da:	81 e3       	ldi	r24, 0x31	; 49
    26dc:	95 e0       	ldi	r25, 0x05	; 5
    26de:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <puts>
	double T, P;
	BMP280_GetTemperatureAndPressure(&T,&P);
    26e2:	be 01       	movw	r22, r28
    26e4:	6b 5f       	subi	r22, 0xFB	; 251
    26e6:	7f 4f       	sbci	r23, 0xFF	; 255
    26e8:	ce 01       	movw	r24, r28
    26ea:	01 96       	adiw	r24, 0x01	; 1
    26ec:	0e 94 2d 10 	call	0x205a	; 0x205a <BMP280_GetTemperatureAndPressure>
	printf("\tTemperature = %.3f\n\tPressure = %.3f\n",T,P);
    26f0:	88 85       	ldd	r24, Y+8	; 0x08
    26f2:	8f 93       	push	r24
    26f4:	8f 81       	ldd	r24, Y+7	; 0x07
    26f6:	8f 93       	push	r24
    26f8:	8e 81       	ldd	r24, Y+6	; 0x06
    26fa:	8f 93       	push	r24
    26fc:	8d 81       	ldd	r24, Y+5	; 0x05
    26fe:	8f 93       	push	r24
    2700:	8c 81       	ldd	r24, Y+4	; 0x04
    2702:	8f 93       	push	r24
    2704:	8b 81       	ldd	r24, Y+3	; 0x03
    2706:	8f 93       	push	r24
    2708:	8a 81       	ldd	r24, Y+2	; 0x02
    270a:	8f 93       	push	r24
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	8f 93       	push	r24
    2710:	80 e4       	ldi	r24, 0x40	; 64
    2712:	95 e0       	ldi	r25, 0x05	; 5
    2714:	9f 93       	push	r25
    2716:	8f 93       	push	r24
    2718:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <printf>
	printf("\tgetStart = %d\n\tgetEnd = %d\n",this->inherited.getStartNum( &this->inherited ),this->inherited.getEndNum( &this->inherited ));
    271c:	d8 01       	movw	r26, r16
    271e:	1a 96       	adiw	r26, 0x0a	; 10
    2720:	ed 91       	ld	r30, X+
    2722:	fc 91       	ld	r31, X
    2724:	1b 97       	sbiw	r26, 0x0b	; 11
    2726:	c8 01       	movw	r24, r16
    2728:	09 95       	icall
    272a:	f8 2e       	mov	r15, r24
    272c:	e9 2e       	mov	r14, r25
    272e:	d8 01       	movw	r26, r16
    2730:	18 96       	adiw	r26, 0x08	; 8
    2732:	ed 91       	ld	r30, X+
    2734:	fc 91       	ld	r31, X
    2736:	19 97       	sbiw	r26, 0x09	; 9
    2738:	c8 01       	movw	r24, r16
    273a:	09 95       	icall
    273c:	ef 92       	push	r14
    273e:	ff 92       	push	r15
    2740:	9f 93       	push	r25
    2742:	8f 93       	push	r24
    2744:	86 e6       	ldi	r24, 0x66	; 102
    2746:	95 e0       	ldi	r25, 0x05	; 5
    2748:	9f 93       	push	r25
    274a:	8f 93       	push	r24
    274c:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <printf>
	/*
	for( int i = 0 ; i = this->inherited.getStartNum(); i < this->inherited.getEndNum() )
	{
	}
	*/
	cur_data->data[0] = T;
    2750:	e0 91 ee 05 	lds	r30, 0x05EE
    2754:	f0 91 ef 05 	lds	r31, 0x05EF
    2758:	89 81       	ldd	r24, Y+1	; 0x01
    275a:	9a 81       	ldd	r25, Y+2	; 0x02
    275c:	ab 81       	ldd	r26, Y+3	; 0x03
    275e:	bc 81       	ldd	r27, Y+4	; 0x04
    2760:	80 83       	st	Z, r24
    2762:	91 83       	std	Z+1, r25	; 0x01
    2764:	a2 83       	std	Z+2, r26	; 0x02
    2766:	b3 83       	std	Z+3, r27	; 0x03
	cur_data->data[1] = P; 
    2768:	e0 91 ee 05 	lds	r30, 0x05EE
    276c:	f0 91 ef 05 	lds	r31, 0x05EF
    2770:	8d 81       	ldd	r24, Y+5	; 0x05
    2772:	9e 81       	ldd	r25, Y+6	; 0x06
    2774:	af 81       	ldd	r26, Y+7	; 0x07
    2776:	b8 85       	ldd	r27, Y+8	; 0x08
    2778:	84 83       	std	Z+4, r24	; 0x04
    277a:	95 83       	std	Z+5, r25	; 0x05
    277c:	a6 83       	std	Z+6, r26	; 0x06
    277e:	b7 83       	std	Z+7, r27	; 0x07
	return 0;
    2780:	0f b6       	in	r0, 0x3f	; 63
    2782:	f8 94       	cli
    2784:	de bf       	out	0x3e, r29	; 62
    2786:	0f be       	out	0x3f, r0	; 63
    2788:	cd bf       	out	0x3d, r28	; 61
}
    278a:	80 e0       	ldi	r24, 0x00	; 0
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	28 96       	adiw	r28, 0x08	; 8
    2790:	0f b6       	in	r0, 0x3f	; 63
    2792:	f8 94       	cli
    2794:	de bf       	out	0x3e, r29	; 62
    2796:	0f be       	out	0x3f, r0	; 63
    2798:	cd bf       	out	0x3d, r28	; 61
    279a:	df 91       	pop	r29
    279c:	cf 91       	pop	r28
    279e:	1f 91       	pop	r17
    27a0:	0f 91       	pop	r16
    27a2:	ff 90       	pop	r15
    27a4:	ef 90       	pop	r14
    27a6:	08 95       	ret

000027a8 <New_BMP280_Sensor>:
    return TYPE_SENSOR;
}


BMP280Sensor* New_BMP280_Sensor( int num, int NumData )
{
    27a8:	ef 92       	push	r14
    27aa:	ff 92       	push	r15
    27ac:	0f 93       	push	r16
    27ae:	1f 93       	push	r17
    27b0:	cf 93       	push	r28
    27b2:	df 93       	push	r29
    27b4:	7c 01       	movw	r14, r24
    27b6:	8b 01       	movw	r16, r22
	BMP280Sensor *p = malloc(sizeof(BMP280Sensor));
    27b8:	8e e0       	ldi	r24, 0x0E	; 14
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	0e 94 39 1b 	call	0x3672	; 0x3672 <malloc>
    27c0:	ec 01       	movw	r28, r24
	p->inherited.getStartNum = fctn_getStartNum;
    27c2:	83 ea       	ldi	r24, 0xA3	; 163
    27c4:	9b e0       	ldi	r25, 0x0B	; 11
    27c6:	99 87       	std	Y+9, r25	; 0x09
    27c8:	88 87       	std	Y+8, r24	; 0x08
	p->inherited.getEndNum = fctn_getEndNum;
    27ca:	87 ea       	ldi	r24, 0xA7	; 167
    27cc:	9b e0       	ldi	r25, 0x0B	; 11
    27ce:	9b 87       	std	Y+11, r25	; 0x0b
    27d0:	8a 87       	std	Y+10, r24	; 0x0a
	printf("BMP280_Error\n");
	return 0;
}
void BMP280_VTinit( BMP280Sensor* this)
{
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
    27d2:	8a e4       	ldi	r24, 0x4A	; 74
    27d4:	92 e0       	ldi	r25, 0x02	; 2
    27d6:	99 83       	std	Y+1, r25	; 0x01
    27d8:	88 83       	st	Y, r24



void BMP280_FctnInit(BMP280Sensor *this)
{
	this->inherited.vmt = &BMP280_vmt;
    27da:	82 e5       	ldi	r24, 0x52	; 82
    27dc:	92 e0       	ldi	r25, 0x02	; 2
    27de:	9d 87       	std	Y+13, r25	; 0x0d
    27e0:	8c 87       	std	Y+12, r24	; 0x0c
	p->inherited.getEndNum = fctn_getEndNum;
    BMP280_VTinit( p );
    BMP280_FctnInit( p );
	
	
	p->inherited.test_num = num;
    27e2:	fb 82       	std	Y+3, r15	; 0x03
    27e4:	ea 82       	std	Y+2, r14	; 0x02
	p->inherited.NumOfData = NumData;
    27e6:	1f 83       	std	Y+7, r17	; 0x07
    27e8:	0e 83       	std	Y+6, r16	; 0x06
	p->inherited.StartNum = SensorDataCount;
    27ea:	80 91 a5 0a 	lds	r24, 0x0AA5
    27ee:	90 91 a6 0a 	lds	r25, 0x0AA6
    27f2:	9d 83       	std	Y+5, r25	; 0x05
    27f4:	8c 83       	std	Y+4, r24	; 0x04
	SensorDataCount += NumData;
    27f6:	b8 01       	movw	r22, r16
    27f8:	68 0f       	add	r22, r24
    27fa:	79 1f       	adc	r23, r25
    27fc:	70 93 a6 0a 	sts	0x0AA6, r23
    2800:	60 93 a5 0a 	sts	0x0AA5, r22
	printf("SensorDataCount %d\n",SensorDataCount);
    2804:	7f 93       	push	r23
    2806:	6f 93       	push	r22
    2808:	83 e8       	ldi	r24, 0x83	; 131
    280a:	95 e0       	ldi	r25, 0x05	; 5
    280c:	9f 93       	push	r25
    280e:	8f 93       	push	r24
    2810:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <printf>
	//printf("get start %d end %d\n",p->inherited.getStartNum(& (p->inherited) ),p->inherited.getEndNum(& (p->inherited)));
	
	return p;
    2814:	0f 90       	pop	r0
    2816:	0f 90       	pop	r0
    2818:	0f 90       	pop	r0
    281a:	0f 90       	pop	r0
    281c:	ce 01       	movw	r24, r28
    281e:	df 91       	pop	r29
    2820:	cf 91       	pop	r28
    2822:	1f 91       	pop	r17
    2824:	0f 91       	pop	r16
    2826:	ff 90       	pop	r15
    2828:	ef 90       	pop	r14
    282a:	08 95       	ret

0000282c <Si7020_FctnInit>:



void Si7020_FctnInit(Si7020Sensor *this)
{
	this->inherited.vmt = &Si7020_vmt;
    282c:	24 e6       	ldi	r18, 0x64	; 100
    282e:	32 e0       	ldi	r19, 0x02	; 2
    2830:	fc 01       	movw	r30, r24
    2832:	35 87       	std	Z+13, r19	; 0x0d
    2834:	24 87       	std	Z+12, r18	; 0x0c
    2836:	08 95       	ret

00002838 <Si7020_Configure>:

int Si7020_Configure(Si7020Sensor *this )
{
	// virtual function
	return 0;
}
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	08 95       	ret

0000283e <Si7020_Error>:

int Si7020_Error(Si7020Sensor *this )
{
	// virtual function
	return 0;
}
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	90 e0       	ldi	r25, 0x00	; 0
    2842:	08 95       	ret

00002844 <Si7020_VTinit>:
void Si7020_VTinit( Si7020Sensor* this)
{
	this->inherited.abstract.device_vt = &Si7020_abstract_vmt;
    2844:	2c e5       	ldi	r18, 0x5C	; 92
    2846:	32 e0       	ldi	r19, 0x02	; 2
    2848:	fc 01       	movw	r30, r24
    284a:	31 83       	std	Z+1, r19	; 0x01
    284c:	20 83       	st	Z, r18
    284e:	08 95       	ret

00002850 <Si7020_reset>:

int Si7020_reset( Si7020Sensor* this)
{
	// virtual function
	return 0;
}
    2850:	80 e0       	ldi	r24, 0x00	; 0
    2852:	90 e0       	ldi	r25, 0x00	; 0
    2854:	08 95       	ret

00002856 <Si7020_getType>:

int Si7020_getType(Si7020Sensor* this)
{
	return TYPE_SENSOR;
}
    2856:	83 e0       	ldi	r24, 0x03	; 3
    2858:	90 e0       	ldi	r25, 0x00	; 0
    285a:	08 95       	ret

0000285c <Si7020_Init>:
	this->inherited.abstract.device_vt = &Si7020_abstract_vmt;
}

int Si7020_Init( Si7020Sensor* this)
{
	printf("Si7020 Sensor Init\n");
    285c:	87 e9       	ldi	r24, 0x97	; 151
    285e:	95 e0       	ldi	r25, 0x05	; 5
    2860:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <puts>
	return 0;
}
    2864:	80 e0       	ldi	r24, 0x00	; 0
    2866:	90 e0       	ldi	r25, 0x00	; 0
    2868:	08 95       	ret

0000286a <Si7020_Request>:
	// virtual function
	return 0;
}

int Si7020_Request(Si7020Sensor *this )
{
    286a:	cf 93       	push	r28
    286c:	df 93       	push	r29
    286e:	ec 01       	movw	r28, r24
	printf("Si7020_Request\n");
    2870:	8a ea       	ldi	r24, 0xAA	; 170
    2872:	95 e0       	ldi	r25, 0x05	; 5
    2874:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <puts>
	Si7020_readTemperature(this->temperature_data,3);
    2878:	63 e0       	ldi	r22, 0x03	; 3
    287a:	ce 01       	movw	r24, r28
    287c:	0e 96       	adiw	r24, 0x0e	; 14
    287e:	0e 94 c3 10 	call	0x2186	; 0x2186 <Si7020_readTemperature>
	Si7020_readHumidity(this->humility_data,3);
    2882:	63 e0       	ldi	r22, 0x03	; 3
    2884:	ce 01       	movw	r24, r28
    2886:	41 96       	adiw	r24, 0x11	; 17
    2888:	0e 94 73 10 	call	0x20e6	; 0x20e6 <Si7020_readHumidity>
	return 0;
}
    288c:	80 e0       	ldi	r24, 0x00	; 0
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	df 91       	pop	r29
    2892:	cf 91       	pop	r28
    2894:	08 95       	ret

00002896 <Si7020_Collect>:

int Si7020_Collect(Si7020Sensor *this )
{
    2896:	cf 92       	push	r12
    2898:	df 92       	push	r13
    289a:	ef 92       	push	r14
    289c:	ff 92       	push	r15
    289e:	0f 93       	push	r16
    28a0:	1f 93       	push	r17
    28a2:	cf 93       	push	r28
    28a4:	df 93       	push	r29
    28a6:	ec 01       	movw	r28, r24
	printf("Si7020_Collect\n");
    28a8:	89 eb       	ldi	r24, 0xB9	; 185
    28aa:	95 e0       	ldi	r25, 0x05	; 5
    28ac:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <puts>
	float T = Si7020_calTemperature(this->temperature_data);
    28b0:	ce 01       	movw	r24, r28
    28b2:	0e 96       	adiw	r24, 0x0e	; 14
    28b4:	0e 94 f5 10 	call	0x21ea	; 0x21ea <Si7020_calTemperature>
    28b8:	c6 2e       	mov	r12, r22
    28ba:	d7 2e       	mov	r13, r23
    28bc:	e8 2e       	mov	r14, r24
    28be:	f9 2e       	mov	r15, r25
	float H = Si7020_calHumidity(this->humility_data);
    28c0:	ce 01       	movw	r24, r28
    28c2:	41 96       	adiw	r24, 0x11	; 17
    28c4:	0e 94 a5 10 	call	0x214a	; 0x214a <Si7020_calHumidity>
    28c8:	06 2f       	mov	r16, r22
    28ca:	17 2f       	mov	r17, r23
    28cc:	d8 2f       	mov	r29, r24
    28ce:	c9 2f       	mov	r28, r25
	printf("\tTemperature = %.3f\n\tHumility = %.3f\n",T,H);
    28d0:	9f 93       	push	r25
    28d2:	8f 93       	push	r24
    28d4:	7f 93       	push	r23
    28d6:	6f 93       	push	r22
    28d8:	ff 92       	push	r15
    28da:	ef 92       	push	r14
    28dc:	df 92       	push	r13
    28de:	cf 92       	push	r12
    28e0:	88 ec       	ldi	r24, 0xC8	; 200
    28e2:	95 e0       	ldi	r25, 0x05	; 5
    28e4:	9f 93       	push	r25
    28e6:	8f 93       	push	r24
    28e8:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <printf>
	cur_data->data[2] = T;
    28ec:	e0 91 ee 05 	lds	r30, 0x05EE
    28f0:	f0 91 ef 05 	lds	r31, 0x05EF
    28f4:	4c 2d       	mov	r20, r12
    28f6:	5d 2d       	mov	r21, r13
    28f8:	6e 2d       	mov	r22, r14
    28fa:	7f 2d       	mov	r23, r15
    28fc:	40 87       	std	Z+8, r20	; 0x08
    28fe:	51 87       	std	Z+9, r21	; 0x09
    2900:	62 87       	std	Z+10, r22	; 0x0a
    2902:	73 87       	std	Z+11, r23	; 0x0b
	cur_data->data[3] = H;
    2904:	80 2f       	mov	r24, r16
    2906:	91 2f       	mov	r25, r17
    2908:	ad 2f       	mov	r26, r29
    290a:	bc 2f       	mov	r27, r28
    290c:	84 87       	std	Z+12, r24	; 0x0c
    290e:	95 87       	std	Z+13, r25	; 0x0d
    2910:	a6 87       	std	Z+14, r26	; 0x0e
    2912:	b7 87       	std	Z+15, r27	; 0x0f
	return 0;
    2914:	8d b7       	in	r24, 0x3d	; 61
    2916:	9e b7       	in	r25, 0x3e	; 62
    2918:	0a 96       	adiw	r24, 0x0a	; 10
    291a:	0f b6       	in	r0, 0x3f	; 63
    291c:	f8 94       	cli
    291e:	9e bf       	out	0x3e, r25	; 62
    2920:	0f be       	out	0x3f, r0	; 63
    2922:	8d bf       	out	0x3d, r24	; 61
}
    2924:	80 e0       	ldi	r24, 0x00	; 0
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	df 91       	pop	r29
    292a:	cf 91       	pop	r28
    292c:	1f 91       	pop	r17
    292e:	0f 91       	pop	r16
    2930:	ff 90       	pop	r15
    2932:	ef 90       	pop	r14
    2934:	df 90       	pop	r13
    2936:	cf 90       	pop	r12
    2938:	08 95       	ret

0000293a <New_Si7020_Sensor>:
	return TYPE_SENSOR;
}


Si7020Sensor* New_Si7020_Sensor( int num, int NumData)
{
    293a:	ef 92       	push	r14
    293c:	ff 92       	push	r15
    293e:	0f 93       	push	r16
    2940:	1f 93       	push	r17
    2942:	cf 93       	push	r28
    2944:	df 93       	push	r29
    2946:	7c 01       	movw	r14, r24
    2948:	8b 01       	movw	r16, r22
	Si7020Sensor *p = malloc(sizeof(Si7020Sensor));
    294a:	84 e1       	ldi	r24, 0x14	; 20
    294c:	90 e0       	ldi	r25, 0x00	; 0
    294e:	0e 94 39 1b 	call	0x3672	; 0x3672 <malloc>
    2952:	ec 01       	movw	r28, r24
	// virtual function
	return 0;
}
void Si7020_VTinit( Si7020Sensor* this)
{
	this->inherited.abstract.device_vt = &Si7020_abstract_vmt;
    2954:	8c e5       	ldi	r24, 0x5C	; 92
    2956:	92 e0       	ldi	r25, 0x02	; 2
    2958:	99 83       	std	Y+1, r25	; 0x01
    295a:	88 83       	st	Y, r24



void Si7020_FctnInit(Si7020Sensor *this)
{
	this->inherited.vmt = &Si7020_vmt;
    295c:	84 e6       	ldi	r24, 0x64	; 100
    295e:	92 e0       	ldi	r25, 0x02	; 2
    2960:	9d 87       	std	Y+13, r25	; 0x0d
    2962:	8c 87       	std	Y+12, r24	; 0x0c
Si7020Sensor* New_Si7020_Sensor( int num, int NumData)
{
	Si7020Sensor *p = malloc(sizeof(Si7020Sensor));
	Si7020_VTinit( p );
	Si7020_FctnInit( p );
	p->inherited.getStartNum = fctn_getStartNum;
    2964:	83 ea       	ldi	r24, 0xA3	; 163
    2966:	9b e0       	ldi	r25, 0x0B	; 11
    2968:	99 87       	std	Y+9, r25	; 0x09
    296a:	88 87       	std	Y+8, r24	; 0x08
	p->inherited.getEndNum = fctn_getEndNum;
    296c:	87 ea       	ldi	r24, 0xA7	; 167
    296e:	9b e0       	ldi	r25, 0x0B	; 11
    2970:	9b 87       	std	Y+11, r25	; 0x0b
    2972:	8a 87       	std	Y+10, r24	; 0x0a
	
	p->inherited.test_num = num;
    2974:	fb 82       	std	Y+3, r15	; 0x03
    2976:	ea 82       	std	Y+2, r14	; 0x02
	p->inherited.NumOfData = NumData;
    2978:	1f 83       	std	Y+7, r17	; 0x07
    297a:	0e 83       	std	Y+6, r16	; 0x06
	p->inherited.StartNum = SensorDataCount;
    297c:	80 91 a5 0a 	lds	r24, 0x0AA5
    2980:	90 91 a6 0a 	lds	r25, 0x0AA6
    2984:	9d 83       	std	Y+5, r25	; 0x05
    2986:	8c 83       	std	Y+4, r24	; 0x04
	SensorDataCount += NumData;
    2988:	b8 01       	movw	r22, r16
    298a:	68 0f       	add	r22, r24
    298c:	79 1f       	adc	r23, r25
    298e:	70 93 a6 0a 	sts	0x0AA6, r23
    2992:	60 93 a5 0a 	sts	0x0AA5, r22
	printf("SensorDataCount %d\n",SensorDataCount);
    2996:	7f 93       	push	r23
    2998:	6f 93       	push	r22
    299a:	83 e8       	ldi	r24, 0x83	; 131
    299c:	95 e0       	ldi	r25, 0x05	; 5
    299e:	9f 93       	push	r25
    29a0:	8f 93       	push	r24
    29a2:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <printf>
	
	for(int i = 0; i < 3; ++i )
	{
		p->temperature_data[i] = 0;
    29a6:	1e 86       	std	Y+14, r1	; 0x0e
		p->humility_data[i] = 0;
    29a8:	19 8a       	std	Y+17, r1	; 0x11
	SensorDataCount += NumData;
	printf("SensorDataCount %d\n",SensorDataCount);
	
	for(int i = 0; i < 3; ++i )
	{
		p->temperature_data[i] = 0;
    29aa:	1f 86       	std	Y+15, r1	; 0x0f
		p->humility_data[i] = 0;
    29ac:	1a 8a       	std	Y+18, r1	; 0x12
	SensorDataCount += NumData;
	printf("SensorDataCount %d\n",SensorDataCount);
	
	for(int i = 0; i < 3; ++i )
	{
		p->temperature_data[i] = 0;
    29ae:	18 8a       	std	Y+16, r1	; 0x10
		p->humility_data[i] = 0;
    29b0:	1b 8a       	std	Y+19, r1	; 0x13
	}
	
	return p;
    29b2:	0f 90       	pop	r0
    29b4:	0f 90       	pop	r0
    29b6:	0f 90       	pop	r0
    29b8:	0f 90       	pop	r0
    29ba:	ce 01       	movw	r24, r28
    29bc:	df 91       	pop	r29
    29be:	cf 91       	pop	r28
    29c0:	1f 91       	pop	r17
    29c2:	0f 91       	pop	r16
    29c4:	ff 90       	pop	r15
    29c6:	ef 90       	pop	r14
    29c8:	08 95       	ret

000029ca <__subsf3>:
    29ca:	50 58       	subi	r21, 0x80	; 128

000029cc <__addsf3>:
    29cc:	bb 27       	eor	r27, r27
    29ce:	aa 27       	eor	r26, r26
    29d0:	0e 94 fd 14 	call	0x29fa	; 0x29fa <__addsf3x>
    29d4:	0c 94 77 16 	jmp	0x2cee	; 0x2cee <__fp_round>
    29d8:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <__fp_pscA>
    29dc:	38 f0       	brcs	.+14     	; 0x29ec <__addsf3+0x20>
    29de:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__fp_pscB>
    29e2:	20 f0       	brcs	.+8      	; 0x29ec <__addsf3+0x20>
    29e4:	39 f4       	brne	.+14     	; 0x29f4 <__addsf3+0x28>
    29e6:	9f 3f       	cpi	r25, 0xFF	; 255
    29e8:	19 f4       	brne	.+6      	; 0x29f0 <__addsf3+0x24>
    29ea:	26 f4       	brtc	.+8      	; 0x29f4 <__addsf3+0x28>
    29ec:	0c 94 66 16 	jmp	0x2ccc	; 0x2ccc <__fp_nan>
    29f0:	0e f4       	brtc	.+2      	; 0x29f4 <__addsf3+0x28>
    29f2:	e0 95       	com	r30
    29f4:	e7 fb       	bst	r30, 7
    29f6:	0c 94 60 16 	jmp	0x2cc0	; 0x2cc0 <__fp_inf>

000029fa <__addsf3x>:
    29fa:	e9 2f       	mov	r30, r25
    29fc:	0e 94 88 16 	call	0x2d10	; 0x2d10 <__fp_split3>
    2a00:	58 f3       	brcs	.-42     	; 0x29d8 <__addsf3+0xc>
    2a02:	ba 17       	cp	r27, r26
    2a04:	62 07       	cpc	r22, r18
    2a06:	73 07       	cpc	r23, r19
    2a08:	84 07       	cpc	r24, r20
    2a0a:	95 07       	cpc	r25, r21
    2a0c:	20 f0       	brcs	.+8      	; 0x2a16 <__addsf3x+0x1c>
    2a0e:	79 f4       	brne	.+30     	; 0x2a2e <__addsf3x+0x34>
    2a10:	a6 f5       	brtc	.+104    	; 0x2a7a <__addsf3x+0x80>
    2a12:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__fp_zero>
    2a16:	0e f4       	brtc	.+2      	; 0x2a1a <__addsf3x+0x20>
    2a18:	e0 95       	com	r30
    2a1a:	0b 2e       	mov	r0, r27
    2a1c:	ba 2f       	mov	r27, r26
    2a1e:	a0 2d       	mov	r26, r0
    2a20:	0b 01       	movw	r0, r22
    2a22:	b9 01       	movw	r22, r18
    2a24:	90 01       	movw	r18, r0
    2a26:	0c 01       	movw	r0, r24
    2a28:	ca 01       	movw	r24, r20
    2a2a:	a0 01       	movw	r20, r0
    2a2c:	11 24       	eor	r1, r1
    2a2e:	ff 27       	eor	r31, r31
    2a30:	59 1b       	sub	r21, r25
    2a32:	99 f0       	breq	.+38     	; 0x2a5a <__addsf3x+0x60>
    2a34:	59 3f       	cpi	r21, 0xF9	; 249
    2a36:	50 f4       	brcc	.+20     	; 0x2a4c <__addsf3x+0x52>
    2a38:	50 3e       	cpi	r21, 0xE0	; 224
    2a3a:	68 f1       	brcs	.+90     	; 0x2a96 <__addsf3x+0x9c>
    2a3c:	1a 16       	cp	r1, r26
    2a3e:	f0 40       	sbci	r31, 0x00	; 0
    2a40:	a2 2f       	mov	r26, r18
    2a42:	23 2f       	mov	r18, r19
    2a44:	34 2f       	mov	r19, r20
    2a46:	44 27       	eor	r20, r20
    2a48:	58 5f       	subi	r21, 0xF8	; 248
    2a4a:	f3 cf       	rjmp	.-26     	; 0x2a32 <__addsf3x+0x38>
    2a4c:	46 95       	lsr	r20
    2a4e:	37 95       	ror	r19
    2a50:	27 95       	ror	r18
    2a52:	a7 95       	ror	r26
    2a54:	f0 40       	sbci	r31, 0x00	; 0
    2a56:	53 95       	inc	r21
    2a58:	c9 f7       	brne	.-14     	; 0x2a4c <__addsf3x+0x52>
    2a5a:	7e f4       	brtc	.+30     	; 0x2a7a <__addsf3x+0x80>
    2a5c:	1f 16       	cp	r1, r31
    2a5e:	ba 0b       	sbc	r27, r26
    2a60:	62 0b       	sbc	r22, r18
    2a62:	73 0b       	sbc	r23, r19
    2a64:	84 0b       	sbc	r24, r20
    2a66:	ba f0       	brmi	.+46     	; 0x2a96 <__addsf3x+0x9c>
    2a68:	91 50       	subi	r25, 0x01	; 1
    2a6a:	a1 f0       	breq	.+40     	; 0x2a94 <__addsf3x+0x9a>
    2a6c:	ff 0f       	add	r31, r31
    2a6e:	bb 1f       	adc	r27, r27
    2a70:	66 1f       	adc	r22, r22
    2a72:	77 1f       	adc	r23, r23
    2a74:	88 1f       	adc	r24, r24
    2a76:	c2 f7       	brpl	.-16     	; 0x2a68 <__addsf3x+0x6e>
    2a78:	0e c0       	rjmp	.+28     	; 0x2a96 <__addsf3x+0x9c>
    2a7a:	ba 0f       	add	r27, r26
    2a7c:	62 1f       	adc	r22, r18
    2a7e:	73 1f       	adc	r23, r19
    2a80:	84 1f       	adc	r24, r20
    2a82:	48 f4       	brcc	.+18     	; 0x2a96 <__addsf3x+0x9c>
    2a84:	87 95       	ror	r24
    2a86:	77 95       	ror	r23
    2a88:	67 95       	ror	r22
    2a8a:	b7 95       	ror	r27
    2a8c:	f7 95       	ror	r31
    2a8e:	9e 3f       	cpi	r25, 0xFE	; 254
    2a90:	08 f0       	brcs	.+2      	; 0x2a94 <__addsf3x+0x9a>
    2a92:	b0 cf       	rjmp	.-160    	; 0x29f4 <__addsf3+0x28>
    2a94:	93 95       	inc	r25
    2a96:	88 0f       	add	r24, r24
    2a98:	08 f0       	brcs	.+2      	; 0x2a9c <__addsf3x+0xa2>
    2a9a:	99 27       	eor	r25, r25
    2a9c:	ee 0f       	add	r30, r30
    2a9e:	97 95       	ror	r25
    2aa0:	87 95       	ror	r24
    2aa2:	08 95       	ret

00002aa4 <__cmpsf2>:
    2aa4:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__fp_cmp>
    2aa8:	08 f4       	brcc	.+2      	; 0x2aac <__cmpsf2+0x8>
    2aaa:	81 e0       	ldi	r24, 0x01	; 1
    2aac:	08 95       	ret

00002aae <__divsf3>:
    2aae:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <__divsf3x>
    2ab2:	0c 94 77 16 	jmp	0x2cee	; 0x2cee <__fp_round>
    2ab6:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__fp_pscB>
    2aba:	58 f0       	brcs	.+22     	; 0x2ad2 <__divsf3+0x24>
    2abc:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <__fp_pscA>
    2ac0:	40 f0       	brcs	.+16     	; 0x2ad2 <__divsf3+0x24>
    2ac2:	29 f4       	brne	.+10     	; 0x2ace <__divsf3+0x20>
    2ac4:	5f 3f       	cpi	r21, 0xFF	; 255
    2ac6:	29 f0       	breq	.+10     	; 0x2ad2 <__divsf3+0x24>
    2ac8:	0c 94 60 16 	jmp	0x2cc0	; 0x2cc0 <__fp_inf>
    2acc:	51 11       	cpse	r21, r1
    2ace:	0c 94 ab 16 	jmp	0x2d56	; 0x2d56 <__fp_szero>
    2ad2:	0c 94 66 16 	jmp	0x2ccc	; 0x2ccc <__fp_nan>

00002ad6 <__divsf3x>:
    2ad6:	0e 94 88 16 	call	0x2d10	; 0x2d10 <__fp_split3>
    2ada:	68 f3       	brcs	.-38     	; 0x2ab6 <__divsf3+0x8>

00002adc <__divsf3_pse>:
    2adc:	99 23       	and	r25, r25
    2ade:	b1 f3       	breq	.-20     	; 0x2acc <__divsf3+0x1e>
    2ae0:	55 23       	and	r21, r21
    2ae2:	91 f3       	breq	.-28     	; 0x2ac8 <__divsf3+0x1a>
    2ae4:	95 1b       	sub	r25, r21
    2ae6:	55 0b       	sbc	r21, r21
    2ae8:	bb 27       	eor	r27, r27
    2aea:	aa 27       	eor	r26, r26
    2aec:	62 17       	cp	r22, r18
    2aee:	73 07       	cpc	r23, r19
    2af0:	84 07       	cpc	r24, r20
    2af2:	38 f0       	brcs	.+14     	; 0x2b02 <__divsf3_pse+0x26>
    2af4:	9f 5f       	subi	r25, 0xFF	; 255
    2af6:	5f 4f       	sbci	r21, 0xFF	; 255
    2af8:	22 0f       	add	r18, r18
    2afa:	33 1f       	adc	r19, r19
    2afc:	44 1f       	adc	r20, r20
    2afe:	aa 1f       	adc	r26, r26
    2b00:	a9 f3       	breq	.-22     	; 0x2aec <__divsf3_pse+0x10>
    2b02:	35 d0       	rcall	.+106    	; 0x2b6e <__divsf3_pse+0x92>
    2b04:	0e 2e       	mov	r0, r30
    2b06:	3a f0       	brmi	.+14     	; 0x2b16 <__divsf3_pse+0x3a>
    2b08:	e0 e8       	ldi	r30, 0x80	; 128
    2b0a:	32 d0       	rcall	.+100    	; 0x2b70 <__divsf3_pse+0x94>
    2b0c:	91 50       	subi	r25, 0x01	; 1
    2b0e:	50 40       	sbci	r21, 0x00	; 0
    2b10:	e6 95       	lsr	r30
    2b12:	00 1c       	adc	r0, r0
    2b14:	ca f7       	brpl	.-14     	; 0x2b08 <__divsf3_pse+0x2c>
    2b16:	2b d0       	rcall	.+86     	; 0x2b6e <__divsf3_pse+0x92>
    2b18:	fe 2f       	mov	r31, r30
    2b1a:	29 d0       	rcall	.+82     	; 0x2b6e <__divsf3_pse+0x92>
    2b1c:	66 0f       	add	r22, r22
    2b1e:	77 1f       	adc	r23, r23
    2b20:	88 1f       	adc	r24, r24
    2b22:	bb 1f       	adc	r27, r27
    2b24:	26 17       	cp	r18, r22
    2b26:	37 07       	cpc	r19, r23
    2b28:	48 07       	cpc	r20, r24
    2b2a:	ab 07       	cpc	r26, r27
    2b2c:	b0 e8       	ldi	r27, 0x80	; 128
    2b2e:	09 f0       	breq	.+2      	; 0x2b32 <__divsf3_pse+0x56>
    2b30:	bb 0b       	sbc	r27, r27
    2b32:	80 2d       	mov	r24, r0
    2b34:	bf 01       	movw	r22, r30
    2b36:	ff 27       	eor	r31, r31
    2b38:	93 58       	subi	r25, 0x83	; 131
    2b3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b3c:	3a f0       	brmi	.+14     	; 0x2b4c <__divsf3_pse+0x70>
    2b3e:	9e 3f       	cpi	r25, 0xFE	; 254
    2b40:	51 05       	cpc	r21, r1
    2b42:	78 f0       	brcs	.+30     	; 0x2b62 <__divsf3_pse+0x86>
    2b44:	0c 94 60 16 	jmp	0x2cc0	; 0x2cc0 <__fp_inf>
    2b48:	0c 94 ab 16 	jmp	0x2d56	; 0x2d56 <__fp_szero>
    2b4c:	5f 3f       	cpi	r21, 0xFF	; 255
    2b4e:	e4 f3       	brlt	.-8      	; 0x2b48 <__divsf3_pse+0x6c>
    2b50:	98 3e       	cpi	r25, 0xE8	; 232
    2b52:	d4 f3       	brlt	.-12     	; 0x2b48 <__divsf3_pse+0x6c>
    2b54:	86 95       	lsr	r24
    2b56:	77 95       	ror	r23
    2b58:	67 95       	ror	r22
    2b5a:	b7 95       	ror	r27
    2b5c:	f7 95       	ror	r31
    2b5e:	9f 5f       	subi	r25, 0xFF	; 255
    2b60:	c9 f7       	brne	.-14     	; 0x2b54 <__divsf3_pse+0x78>
    2b62:	88 0f       	add	r24, r24
    2b64:	91 1d       	adc	r25, r1
    2b66:	96 95       	lsr	r25
    2b68:	87 95       	ror	r24
    2b6a:	97 f9       	bld	r25, 7
    2b6c:	08 95       	ret
    2b6e:	e1 e0       	ldi	r30, 0x01	; 1
    2b70:	66 0f       	add	r22, r22
    2b72:	77 1f       	adc	r23, r23
    2b74:	88 1f       	adc	r24, r24
    2b76:	bb 1f       	adc	r27, r27
    2b78:	62 17       	cp	r22, r18
    2b7a:	73 07       	cpc	r23, r19
    2b7c:	84 07       	cpc	r24, r20
    2b7e:	ba 07       	cpc	r27, r26
    2b80:	20 f0       	brcs	.+8      	; 0x2b8a <__divsf3_pse+0xae>
    2b82:	62 1b       	sub	r22, r18
    2b84:	73 0b       	sbc	r23, r19
    2b86:	84 0b       	sbc	r24, r20
    2b88:	ba 0b       	sbc	r27, r26
    2b8a:	ee 1f       	adc	r30, r30
    2b8c:	88 f7       	brcc	.-30     	; 0x2b70 <__divsf3_pse+0x94>
    2b8e:	e0 95       	com	r30
    2b90:	08 95       	ret

00002b92 <__fixsfsi>:
    2b92:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <__fixunssfsi>
    2b96:	68 94       	set
    2b98:	b1 11       	cpse	r27, r1
    2b9a:	0c 94 ab 16 	jmp	0x2d56	; 0x2d56 <__fp_szero>
    2b9e:	08 95       	ret

00002ba0 <__fixunssfsi>:
    2ba0:	0e 94 90 16 	call	0x2d20	; 0x2d20 <__fp_splitA>
    2ba4:	88 f0       	brcs	.+34     	; 0x2bc8 <__fixunssfsi+0x28>
    2ba6:	9f 57       	subi	r25, 0x7F	; 127
    2ba8:	98 f0       	brcs	.+38     	; 0x2bd0 <__fixunssfsi+0x30>
    2baa:	b9 2f       	mov	r27, r25
    2bac:	99 27       	eor	r25, r25
    2bae:	b7 51       	subi	r27, 0x17	; 23
    2bb0:	b0 f0       	brcs	.+44     	; 0x2bde <__fixunssfsi+0x3e>
    2bb2:	e1 f0       	breq	.+56     	; 0x2bec <__fixunssfsi+0x4c>
    2bb4:	66 0f       	add	r22, r22
    2bb6:	77 1f       	adc	r23, r23
    2bb8:	88 1f       	adc	r24, r24
    2bba:	99 1f       	adc	r25, r25
    2bbc:	1a f0       	brmi	.+6      	; 0x2bc4 <__fixunssfsi+0x24>
    2bbe:	ba 95       	dec	r27
    2bc0:	c9 f7       	brne	.-14     	; 0x2bb4 <__fixunssfsi+0x14>
    2bc2:	14 c0       	rjmp	.+40     	; 0x2bec <__fixunssfsi+0x4c>
    2bc4:	b1 30       	cpi	r27, 0x01	; 1
    2bc6:	91 f0       	breq	.+36     	; 0x2bec <__fixunssfsi+0x4c>
    2bc8:	0e 94 aa 16 	call	0x2d54	; 0x2d54 <__fp_zero>
    2bcc:	b1 e0       	ldi	r27, 0x01	; 1
    2bce:	08 95       	ret
    2bd0:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__fp_zero>
    2bd4:	67 2f       	mov	r22, r23
    2bd6:	78 2f       	mov	r23, r24
    2bd8:	88 27       	eor	r24, r24
    2bda:	b8 5f       	subi	r27, 0xF8	; 248
    2bdc:	39 f0       	breq	.+14     	; 0x2bec <__fixunssfsi+0x4c>
    2bde:	b9 3f       	cpi	r27, 0xF9	; 249
    2be0:	cc f3       	brlt	.-14     	; 0x2bd4 <__fixunssfsi+0x34>
    2be2:	86 95       	lsr	r24
    2be4:	77 95       	ror	r23
    2be6:	67 95       	ror	r22
    2be8:	b3 95       	inc	r27
    2bea:	d9 f7       	brne	.-10     	; 0x2be2 <__fixunssfsi+0x42>
    2bec:	3e f4       	brtc	.+14     	; 0x2bfc <__fixunssfsi+0x5c>
    2bee:	90 95       	com	r25
    2bf0:	80 95       	com	r24
    2bf2:	70 95       	com	r23
    2bf4:	61 95       	neg	r22
    2bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf8:	8f 4f       	sbci	r24, 0xFF	; 255
    2bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    2bfc:	08 95       	ret

00002bfe <__floatunsisf>:
    2bfe:	e8 94       	clt
    2c00:	09 c0       	rjmp	.+18     	; 0x2c14 <__floatsisf+0x12>

00002c02 <__floatsisf>:
    2c02:	97 fb       	bst	r25, 7
    2c04:	3e f4       	brtc	.+14     	; 0x2c14 <__floatsisf+0x12>
    2c06:	90 95       	com	r25
    2c08:	80 95       	com	r24
    2c0a:	70 95       	com	r23
    2c0c:	61 95       	neg	r22
    2c0e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c10:	8f 4f       	sbci	r24, 0xFF	; 255
    2c12:	9f 4f       	sbci	r25, 0xFF	; 255
    2c14:	99 23       	and	r25, r25
    2c16:	a9 f0       	breq	.+42     	; 0x2c42 <__floatsisf+0x40>
    2c18:	f9 2f       	mov	r31, r25
    2c1a:	96 e9       	ldi	r25, 0x96	; 150
    2c1c:	bb 27       	eor	r27, r27
    2c1e:	93 95       	inc	r25
    2c20:	f6 95       	lsr	r31
    2c22:	87 95       	ror	r24
    2c24:	77 95       	ror	r23
    2c26:	67 95       	ror	r22
    2c28:	b7 95       	ror	r27
    2c2a:	f1 11       	cpse	r31, r1
    2c2c:	f8 cf       	rjmp	.-16     	; 0x2c1e <__floatsisf+0x1c>
    2c2e:	fa f4       	brpl	.+62     	; 0x2c6e <__floatsisf+0x6c>
    2c30:	bb 0f       	add	r27, r27
    2c32:	11 f4       	brne	.+4      	; 0x2c38 <__floatsisf+0x36>
    2c34:	60 ff       	sbrs	r22, 0
    2c36:	1b c0       	rjmp	.+54     	; 0x2c6e <__floatsisf+0x6c>
    2c38:	6f 5f       	subi	r22, 0xFF	; 255
    2c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    2c3c:	8f 4f       	sbci	r24, 0xFF	; 255
    2c3e:	9f 4f       	sbci	r25, 0xFF	; 255
    2c40:	16 c0       	rjmp	.+44     	; 0x2c6e <__floatsisf+0x6c>
    2c42:	88 23       	and	r24, r24
    2c44:	11 f0       	breq	.+4      	; 0x2c4a <__floatsisf+0x48>
    2c46:	96 e9       	ldi	r25, 0x96	; 150
    2c48:	11 c0       	rjmp	.+34     	; 0x2c6c <__floatsisf+0x6a>
    2c4a:	77 23       	and	r23, r23
    2c4c:	21 f0       	breq	.+8      	; 0x2c56 <__floatsisf+0x54>
    2c4e:	9e e8       	ldi	r25, 0x8E	; 142
    2c50:	87 2f       	mov	r24, r23
    2c52:	76 2f       	mov	r23, r22
    2c54:	05 c0       	rjmp	.+10     	; 0x2c60 <__floatsisf+0x5e>
    2c56:	66 23       	and	r22, r22
    2c58:	71 f0       	breq	.+28     	; 0x2c76 <__floatsisf+0x74>
    2c5a:	96 e8       	ldi	r25, 0x86	; 134
    2c5c:	86 2f       	mov	r24, r22
    2c5e:	70 e0       	ldi	r23, 0x00	; 0
    2c60:	60 e0       	ldi	r22, 0x00	; 0
    2c62:	2a f0       	brmi	.+10     	; 0x2c6e <__floatsisf+0x6c>
    2c64:	9a 95       	dec	r25
    2c66:	66 0f       	add	r22, r22
    2c68:	77 1f       	adc	r23, r23
    2c6a:	88 1f       	adc	r24, r24
    2c6c:	da f7       	brpl	.-10     	; 0x2c64 <__floatsisf+0x62>
    2c6e:	88 0f       	add	r24, r24
    2c70:	96 95       	lsr	r25
    2c72:	87 95       	ror	r24
    2c74:	97 f9       	bld	r25, 7
    2c76:	08 95       	ret

00002c78 <__fp_cmp>:
    2c78:	99 0f       	add	r25, r25
    2c7a:	00 08       	sbc	r0, r0
    2c7c:	55 0f       	add	r21, r21
    2c7e:	aa 0b       	sbc	r26, r26
    2c80:	e0 e8       	ldi	r30, 0x80	; 128
    2c82:	fe ef       	ldi	r31, 0xFE	; 254
    2c84:	16 16       	cp	r1, r22
    2c86:	17 06       	cpc	r1, r23
    2c88:	e8 07       	cpc	r30, r24
    2c8a:	f9 07       	cpc	r31, r25
    2c8c:	c0 f0       	brcs	.+48     	; 0x2cbe <__fp_cmp+0x46>
    2c8e:	12 16       	cp	r1, r18
    2c90:	13 06       	cpc	r1, r19
    2c92:	e4 07       	cpc	r30, r20
    2c94:	f5 07       	cpc	r31, r21
    2c96:	98 f0       	brcs	.+38     	; 0x2cbe <__fp_cmp+0x46>
    2c98:	62 1b       	sub	r22, r18
    2c9a:	73 0b       	sbc	r23, r19
    2c9c:	84 0b       	sbc	r24, r20
    2c9e:	95 0b       	sbc	r25, r21
    2ca0:	39 f4       	brne	.+14     	; 0x2cb0 <__fp_cmp+0x38>
    2ca2:	0a 26       	eor	r0, r26
    2ca4:	61 f0       	breq	.+24     	; 0x2cbe <__fp_cmp+0x46>
    2ca6:	23 2b       	or	r18, r19
    2ca8:	24 2b       	or	r18, r20
    2caa:	25 2b       	or	r18, r21
    2cac:	21 f4       	brne	.+8      	; 0x2cb6 <__fp_cmp+0x3e>
    2cae:	08 95       	ret
    2cb0:	0a 26       	eor	r0, r26
    2cb2:	09 f4       	brne	.+2      	; 0x2cb6 <__fp_cmp+0x3e>
    2cb4:	a1 40       	sbci	r26, 0x01	; 1
    2cb6:	a6 95       	lsr	r26
    2cb8:	8f ef       	ldi	r24, 0xFF	; 255
    2cba:	81 1d       	adc	r24, r1
    2cbc:	81 1d       	adc	r24, r1
    2cbe:	08 95       	ret

00002cc0 <__fp_inf>:
    2cc0:	97 f9       	bld	r25, 7
    2cc2:	9f 67       	ori	r25, 0x7F	; 127
    2cc4:	80 e8       	ldi	r24, 0x80	; 128
    2cc6:	70 e0       	ldi	r23, 0x00	; 0
    2cc8:	60 e0       	ldi	r22, 0x00	; 0
    2cca:	08 95       	ret

00002ccc <__fp_nan>:
    2ccc:	9f ef       	ldi	r25, 0xFF	; 255
    2cce:	80 ec       	ldi	r24, 0xC0	; 192
    2cd0:	08 95       	ret

00002cd2 <__fp_pscA>:
    2cd2:	00 24       	eor	r0, r0
    2cd4:	0a 94       	dec	r0
    2cd6:	16 16       	cp	r1, r22
    2cd8:	17 06       	cpc	r1, r23
    2cda:	18 06       	cpc	r1, r24
    2cdc:	09 06       	cpc	r0, r25
    2cde:	08 95       	ret

00002ce0 <__fp_pscB>:
    2ce0:	00 24       	eor	r0, r0
    2ce2:	0a 94       	dec	r0
    2ce4:	12 16       	cp	r1, r18
    2ce6:	13 06       	cpc	r1, r19
    2ce8:	14 06       	cpc	r1, r20
    2cea:	05 06       	cpc	r0, r21
    2cec:	08 95       	ret

00002cee <__fp_round>:
    2cee:	09 2e       	mov	r0, r25
    2cf0:	03 94       	inc	r0
    2cf2:	00 0c       	add	r0, r0
    2cf4:	11 f4       	brne	.+4      	; 0x2cfa <__fp_round+0xc>
    2cf6:	88 23       	and	r24, r24
    2cf8:	52 f0       	brmi	.+20     	; 0x2d0e <__fp_round+0x20>
    2cfa:	bb 0f       	add	r27, r27
    2cfc:	40 f4       	brcc	.+16     	; 0x2d0e <__fp_round+0x20>
    2cfe:	bf 2b       	or	r27, r31
    2d00:	11 f4       	brne	.+4      	; 0x2d06 <__fp_round+0x18>
    2d02:	60 ff       	sbrs	r22, 0
    2d04:	04 c0       	rjmp	.+8      	; 0x2d0e <__fp_round+0x20>
    2d06:	6f 5f       	subi	r22, 0xFF	; 255
    2d08:	7f 4f       	sbci	r23, 0xFF	; 255
    2d0a:	8f 4f       	sbci	r24, 0xFF	; 255
    2d0c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d0e:	08 95       	ret

00002d10 <__fp_split3>:
    2d10:	57 fd       	sbrc	r21, 7
    2d12:	90 58       	subi	r25, 0x80	; 128
    2d14:	44 0f       	add	r20, r20
    2d16:	55 1f       	adc	r21, r21
    2d18:	59 f0       	breq	.+22     	; 0x2d30 <__fp_splitA+0x10>
    2d1a:	5f 3f       	cpi	r21, 0xFF	; 255
    2d1c:	71 f0       	breq	.+28     	; 0x2d3a <__fp_splitA+0x1a>
    2d1e:	47 95       	ror	r20

00002d20 <__fp_splitA>:
    2d20:	88 0f       	add	r24, r24
    2d22:	97 fb       	bst	r25, 7
    2d24:	99 1f       	adc	r25, r25
    2d26:	61 f0       	breq	.+24     	; 0x2d40 <__fp_splitA+0x20>
    2d28:	9f 3f       	cpi	r25, 0xFF	; 255
    2d2a:	79 f0       	breq	.+30     	; 0x2d4a <__fp_splitA+0x2a>
    2d2c:	87 95       	ror	r24
    2d2e:	08 95       	ret
    2d30:	12 16       	cp	r1, r18
    2d32:	13 06       	cpc	r1, r19
    2d34:	14 06       	cpc	r1, r20
    2d36:	55 1f       	adc	r21, r21
    2d38:	f2 cf       	rjmp	.-28     	; 0x2d1e <__fp_split3+0xe>
    2d3a:	46 95       	lsr	r20
    2d3c:	f1 df       	rcall	.-30     	; 0x2d20 <__fp_splitA>
    2d3e:	08 c0       	rjmp	.+16     	; 0x2d50 <__fp_splitA+0x30>
    2d40:	16 16       	cp	r1, r22
    2d42:	17 06       	cpc	r1, r23
    2d44:	18 06       	cpc	r1, r24
    2d46:	99 1f       	adc	r25, r25
    2d48:	f1 cf       	rjmp	.-30     	; 0x2d2c <__fp_splitA+0xc>
    2d4a:	86 95       	lsr	r24
    2d4c:	71 05       	cpc	r23, r1
    2d4e:	61 05       	cpc	r22, r1
    2d50:	08 94       	sec
    2d52:	08 95       	ret

00002d54 <__fp_zero>:
    2d54:	e8 94       	clt

00002d56 <__fp_szero>:
    2d56:	bb 27       	eor	r27, r27
    2d58:	66 27       	eor	r22, r22
    2d5a:	77 27       	eor	r23, r23
    2d5c:	cb 01       	movw	r24, r22
    2d5e:	97 f9       	bld	r25, 7
    2d60:	08 95       	ret

00002d62 <__gesf2>:
    2d62:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <__fp_cmp>
    2d66:	08 f4       	brcc	.+2      	; 0x2d6a <__gesf2+0x8>
    2d68:	8f ef       	ldi	r24, 0xFF	; 255
    2d6a:	08 95       	ret

00002d6c <__mulsf3>:
    2d6c:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <__mulsf3x>
    2d70:	0c 94 77 16 	jmp	0x2cee	; 0x2cee <__fp_round>
    2d74:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <__fp_pscA>
    2d78:	38 f0       	brcs	.+14     	; 0x2d88 <__mulsf3+0x1c>
    2d7a:	0e 94 70 16 	call	0x2ce0	; 0x2ce0 <__fp_pscB>
    2d7e:	20 f0       	brcs	.+8      	; 0x2d88 <__mulsf3+0x1c>
    2d80:	95 23       	and	r25, r21
    2d82:	11 f0       	breq	.+4      	; 0x2d88 <__mulsf3+0x1c>
    2d84:	0c 94 60 16 	jmp	0x2cc0	; 0x2cc0 <__fp_inf>
    2d88:	0c 94 66 16 	jmp	0x2ccc	; 0x2ccc <__fp_nan>
    2d8c:	11 24       	eor	r1, r1
    2d8e:	0c 94 ab 16 	jmp	0x2d56	; 0x2d56 <__fp_szero>

00002d92 <__mulsf3x>:
    2d92:	0e 94 88 16 	call	0x2d10	; 0x2d10 <__fp_split3>
    2d96:	70 f3       	brcs	.-36     	; 0x2d74 <__mulsf3+0x8>

00002d98 <__mulsf3_pse>:
    2d98:	95 9f       	mul	r25, r21
    2d9a:	c1 f3       	breq	.-16     	; 0x2d8c <__mulsf3+0x20>
    2d9c:	95 0f       	add	r25, r21
    2d9e:	50 e0       	ldi	r21, 0x00	; 0
    2da0:	55 1f       	adc	r21, r21
    2da2:	62 9f       	mul	r22, r18
    2da4:	f0 01       	movw	r30, r0
    2da6:	72 9f       	mul	r23, r18
    2da8:	bb 27       	eor	r27, r27
    2daa:	f0 0d       	add	r31, r0
    2dac:	b1 1d       	adc	r27, r1
    2dae:	63 9f       	mul	r22, r19
    2db0:	aa 27       	eor	r26, r26
    2db2:	f0 0d       	add	r31, r0
    2db4:	b1 1d       	adc	r27, r1
    2db6:	aa 1f       	adc	r26, r26
    2db8:	64 9f       	mul	r22, r20
    2dba:	66 27       	eor	r22, r22
    2dbc:	b0 0d       	add	r27, r0
    2dbe:	a1 1d       	adc	r26, r1
    2dc0:	66 1f       	adc	r22, r22
    2dc2:	82 9f       	mul	r24, r18
    2dc4:	22 27       	eor	r18, r18
    2dc6:	b0 0d       	add	r27, r0
    2dc8:	a1 1d       	adc	r26, r1
    2dca:	62 1f       	adc	r22, r18
    2dcc:	73 9f       	mul	r23, r19
    2dce:	b0 0d       	add	r27, r0
    2dd0:	a1 1d       	adc	r26, r1
    2dd2:	62 1f       	adc	r22, r18
    2dd4:	83 9f       	mul	r24, r19
    2dd6:	a0 0d       	add	r26, r0
    2dd8:	61 1d       	adc	r22, r1
    2dda:	22 1f       	adc	r18, r18
    2ddc:	74 9f       	mul	r23, r20
    2dde:	33 27       	eor	r19, r19
    2de0:	a0 0d       	add	r26, r0
    2de2:	61 1d       	adc	r22, r1
    2de4:	23 1f       	adc	r18, r19
    2de6:	84 9f       	mul	r24, r20
    2de8:	60 0d       	add	r22, r0
    2dea:	21 1d       	adc	r18, r1
    2dec:	82 2f       	mov	r24, r18
    2dee:	76 2f       	mov	r23, r22
    2df0:	6a 2f       	mov	r22, r26
    2df2:	11 24       	eor	r1, r1
    2df4:	9f 57       	subi	r25, 0x7F	; 127
    2df6:	50 40       	sbci	r21, 0x00	; 0
    2df8:	9a f0       	brmi	.+38     	; 0x2e20 <__mulsf3_pse+0x88>
    2dfa:	f1 f0       	breq	.+60     	; 0x2e38 <__mulsf3_pse+0xa0>
    2dfc:	88 23       	and	r24, r24
    2dfe:	4a f0       	brmi	.+18     	; 0x2e12 <__mulsf3_pse+0x7a>
    2e00:	ee 0f       	add	r30, r30
    2e02:	ff 1f       	adc	r31, r31
    2e04:	bb 1f       	adc	r27, r27
    2e06:	66 1f       	adc	r22, r22
    2e08:	77 1f       	adc	r23, r23
    2e0a:	88 1f       	adc	r24, r24
    2e0c:	91 50       	subi	r25, 0x01	; 1
    2e0e:	50 40       	sbci	r21, 0x00	; 0
    2e10:	a9 f7       	brne	.-22     	; 0x2dfc <__mulsf3_pse+0x64>
    2e12:	9e 3f       	cpi	r25, 0xFE	; 254
    2e14:	51 05       	cpc	r21, r1
    2e16:	80 f0       	brcs	.+32     	; 0x2e38 <__mulsf3_pse+0xa0>
    2e18:	0c 94 60 16 	jmp	0x2cc0	; 0x2cc0 <__fp_inf>
    2e1c:	0c 94 ab 16 	jmp	0x2d56	; 0x2d56 <__fp_szero>
    2e20:	5f 3f       	cpi	r21, 0xFF	; 255
    2e22:	e4 f3       	brlt	.-8      	; 0x2e1c <__mulsf3_pse+0x84>
    2e24:	98 3e       	cpi	r25, 0xE8	; 232
    2e26:	d4 f3       	brlt	.-12     	; 0x2e1c <__mulsf3_pse+0x84>
    2e28:	86 95       	lsr	r24
    2e2a:	77 95       	ror	r23
    2e2c:	67 95       	ror	r22
    2e2e:	b7 95       	ror	r27
    2e30:	f7 95       	ror	r31
    2e32:	e7 95       	ror	r30
    2e34:	9f 5f       	subi	r25, 0xFF	; 255
    2e36:	c1 f7       	brne	.-16     	; 0x2e28 <__mulsf3_pse+0x90>
    2e38:	fe 2b       	or	r31, r30
    2e3a:	88 0f       	add	r24, r24
    2e3c:	91 1d       	adc	r25, r1
    2e3e:	96 95       	lsr	r25
    2e40:	87 95       	ror	r24
    2e42:	97 f9       	bld	r25, 7
    2e44:	08 95       	ret

00002e46 <vfprintf>:
    2e46:	a3 e1       	ldi	r26, 0x13	; 19
    2e48:	b0 e0       	ldi	r27, 0x00	; 0
    2e4a:	e9 e2       	ldi	r30, 0x29	; 41
    2e4c:	f7 e1       	ldi	r31, 0x17	; 23
    2e4e:	0c 94 e8 1a 	jmp	0x35d0	; 0x35d0 <__prologue_saves__>
    2e52:	6c 01       	movw	r12, r24
    2e54:	4b 01       	movw	r8, r22
    2e56:	2a 01       	movw	r4, r20
    2e58:	fc 01       	movw	r30, r24
    2e5a:	17 82       	std	Z+7, r1	; 0x07
    2e5c:	16 82       	std	Z+6, r1	; 0x06
    2e5e:	83 81       	ldd	r24, Z+3	; 0x03
    2e60:	81 ff       	sbrs	r24, 1
    2e62:	43 c3       	rjmp	.+1670   	; 0x34ea <vfprintf+0x6a4>
    2e64:	ae 01       	movw	r20, r28
    2e66:	4f 5f       	subi	r20, 0xFF	; 255
    2e68:	5f 4f       	sbci	r21, 0xFF	; 255
    2e6a:	3a 01       	movw	r6, r20
    2e6c:	f6 01       	movw	r30, r12
    2e6e:	93 81       	ldd	r25, Z+3	; 0x03
    2e70:	f4 01       	movw	r30, r8
    2e72:	93 fd       	sbrc	r25, 3
    2e74:	85 91       	lpm	r24, Z+
    2e76:	93 ff       	sbrs	r25, 3
    2e78:	81 91       	ld	r24, Z+
    2e7a:	4f 01       	movw	r8, r30
    2e7c:	88 23       	and	r24, r24
    2e7e:	09 f4       	brne	.+2      	; 0x2e82 <vfprintf+0x3c>
    2e80:	30 c3       	rjmp	.+1632   	; 0x34e2 <vfprintf+0x69c>
    2e82:	85 32       	cpi	r24, 0x25	; 37
    2e84:	39 f4       	brne	.+14     	; 0x2e94 <vfprintf+0x4e>
    2e86:	93 fd       	sbrc	r25, 3
    2e88:	85 91       	lpm	r24, Z+
    2e8a:	93 ff       	sbrs	r25, 3
    2e8c:	81 91       	ld	r24, Z+
    2e8e:	4f 01       	movw	r8, r30
    2e90:	85 32       	cpi	r24, 0x25	; 37
    2e92:	39 f4       	brne	.+14     	; 0x2ea2 <vfprintf+0x5c>
    2e94:	b6 01       	movw	r22, r12
    2e96:	90 e0       	ldi	r25, 0x00	; 0
    2e98:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <fputc>
    2e9c:	52 01       	movw	r10, r4
    2e9e:	25 01       	movw	r4, r10
    2ea0:	e5 cf       	rjmp	.-54     	; 0x2e6c <vfprintf+0x26>
    2ea2:	10 e0       	ldi	r17, 0x00	; 0
    2ea4:	f1 2c       	mov	r15, r1
    2ea6:	20 e0       	ldi	r18, 0x00	; 0
    2ea8:	20 32       	cpi	r18, 0x20	; 32
    2eaa:	a0 f4       	brcc	.+40     	; 0x2ed4 <vfprintf+0x8e>
    2eac:	8b 32       	cpi	r24, 0x2B	; 43
    2eae:	69 f0       	breq	.+26     	; 0x2eca <vfprintf+0x84>
    2eb0:	30 f4       	brcc	.+12     	; 0x2ebe <vfprintf+0x78>
    2eb2:	80 32       	cpi	r24, 0x20	; 32
    2eb4:	59 f0       	breq	.+22     	; 0x2ecc <vfprintf+0x86>
    2eb6:	83 32       	cpi	r24, 0x23	; 35
    2eb8:	69 f4       	brne	.+26     	; 0x2ed4 <vfprintf+0x8e>
    2eba:	20 61       	ori	r18, 0x10	; 16
    2ebc:	2c c0       	rjmp	.+88     	; 0x2f16 <vfprintf+0xd0>
    2ebe:	8d 32       	cpi	r24, 0x2D	; 45
    2ec0:	39 f0       	breq	.+14     	; 0x2ed0 <vfprintf+0x8a>
    2ec2:	80 33       	cpi	r24, 0x30	; 48
    2ec4:	39 f4       	brne	.+14     	; 0x2ed4 <vfprintf+0x8e>
    2ec6:	21 60       	ori	r18, 0x01	; 1
    2ec8:	26 c0       	rjmp	.+76     	; 0x2f16 <vfprintf+0xd0>
    2eca:	22 60       	ori	r18, 0x02	; 2
    2ecc:	24 60       	ori	r18, 0x04	; 4
    2ece:	23 c0       	rjmp	.+70     	; 0x2f16 <vfprintf+0xd0>
    2ed0:	28 60       	ori	r18, 0x08	; 8
    2ed2:	21 c0       	rjmp	.+66     	; 0x2f16 <vfprintf+0xd0>
    2ed4:	27 fd       	sbrc	r18, 7
    2ed6:	27 c0       	rjmp	.+78     	; 0x2f26 <vfprintf+0xe0>
    2ed8:	30 ed       	ldi	r19, 0xD0	; 208
    2eda:	38 0f       	add	r19, r24
    2edc:	3a 30       	cpi	r19, 0x0A	; 10
    2ede:	78 f4       	brcc	.+30     	; 0x2efe <vfprintf+0xb8>
    2ee0:	26 ff       	sbrs	r18, 6
    2ee2:	06 c0       	rjmp	.+12     	; 0x2ef0 <vfprintf+0xaa>
    2ee4:	fa e0       	ldi	r31, 0x0A	; 10
    2ee6:	1f 9f       	mul	r17, r31
    2ee8:	30 0d       	add	r19, r0
    2eea:	11 24       	eor	r1, r1
    2eec:	13 2f       	mov	r17, r19
    2eee:	13 c0       	rjmp	.+38     	; 0x2f16 <vfprintf+0xd0>
    2ef0:	4a e0       	ldi	r20, 0x0A	; 10
    2ef2:	f4 9e       	mul	r15, r20
    2ef4:	30 0d       	add	r19, r0
    2ef6:	11 24       	eor	r1, r1
    2ef8:	f3 2e       	mov	r15, r19
    2efa:	20 62       	ori	r18, 0x20	; 32
    2efc:	0c c0       	rjmp	.+24     	; 0x2f16 <vfprintf+0xd0>
    2efe:	8e 32       	cpi	r24, 0x2E	; 46
    2f00:	21 f4       	brne	.+8      	; 0x2f0a <vfprintf+0xc4>
    2f02:	26 fd       	sbrc	r18, 6
    2f04:	ee c2       	rjmp	.+1500   	; 0x34e2 <vfprintf+0x69c>
    2f06:	20 64       	ori	r18, 0x40	; 64
    2f08:	06 c0       	rjmp	.+12     	; 0x2f16 <vfprintf+0xd0>
    2f0a:	8c 36       	cpi	r24, 0x6C	; 108
    2f0c:	11 f4       	brne	.+4      	; 0x2f12 <vfprintf+0xcc>
    2f0e:	20 68       	ori	r18, 0x80	; 128
    2f10:	02 c0       	rjmp	.+4      	; 0x2f16 <vfprintf+0xd0>
    2f12:	88 36       	cpi	r24, 0x68	; 104
    2f14:	41 f4       	brne	.+16     	; 0x2f26 <vfprintf+0xe0>
    2f16:	f4 01       	movw	r30, r8
    2f18:	93 fd       	sbrc	r25, 3
    2f1a:	85 91       	lpm	r24, Z+
    2f1c:	93 ff       	sbrs	r25, 3
    2f1e:	81 91       	ld	r24, Z+
    2f20:	4f 01       	movw	r8, r30
    2f22:	81 11       	cpse	r24, r1
    2f24:	c1 cf       	rjmp	.-126    	; 0x2ea8 <vfprintf+0x62>
    2f26:	9b eb       	ldi	r25, 0xBB	; 187
    2f28:	98 0f       	add	r25, r24
    2f2a:	93 30       	cpi	r25, 0x03	; 3
    2f2c:	18 f4       	brcc	.+6      	; 0x2f34 <vfprintf+0xee>
    2f2e:	20 61       	ori	r18, 0x10	; 16
    2f30:	80 5e       	subi	r24, 0xE0	; 224
    2f32:	06 c0       	rjmp	.+12     	; 0x2f40 <vfprintf+0xfa>
    2f34:	9b e9       	ldi	r25, 0x9B	; 155
    2f36:	98 0f       	add	r25, r24
    2f38:	93 30       	cpi	r25, 0x03	; 3
    2f3a:	08 f0       	brcs	.+2      	; 0x2f3e <vfprintf+0xf8>
    2f3c:	71 c1       	rjmp	.+738    	; 0x3220 <vfprintf+0x3da>
    2f3e:	2f 7e       	andi	r18, 0xEF	; 239
    2f40:	26 ff       	sbrs	r18, 6
    2f42:	16 e0       	ldi	r17, 0x06	; 6
    2f44:	2f 73       	andi	r18, 0x3F	; 63
    2f46:	32 2e       	mov	r3, r18
    2f48:	85 36       	cpi	r24, 0x65	; 101
    2f4a:	19 f4       	brne	.+6      	; 0x2f52 <vfprintf+0x10c>
    2f4c:	20 64       	ori	r18, 0x40	; 64
    2f4e:	32 2e       	mov	r3, r18
    2f50:	08 c0       	rjmp	.+16     	; 0x2f62 <vfprintf+0x11c>
    2f52:	86 36       	cpi	r24, 0x66	; 102
    2f54:	21 f4       	brne	.+8      	; 0x2f5e <vfprintf+0x118>
    2f56:	f2 2f       	mov	r31, r18
    2f58:	f0 68       	ori	r31, 0x80	; 128
    2f5a:	3f 2e       	mov	r3, r31
    2f5c:	02 c0       	rjmp	.+4      	; 0x2f62 <vfprintf+0x11c>
    2f5e:	11 11       	cpse	r17, r1
    2f60:	11 50       	subi	r17, 0x01	; 1
    2f62:	37 fe       	sbrs	r3, 7
    2f64:	07 c0       	rjmp	.+14     	; 0x2f74 <vfprintf+0x12e>
    2f66:	1c 33       	cpi	r17, 0x3C	; 60
    2f68:	50 f4       	brcc	.+20     	; 0x2f7e <vfprintf+0x138>
    2f6a:	ee 24       	eor	r14, r14
    2f6c:	e3 94       	inc	r14
    2f6e:	e1 0e       	add	r14, r17
    2f70:	27 e0       	ldi	r18, 0x07	; 7
    2f72:	0b c0       	rjmp	.+22     	; 0x2f8a <vfprintf+0x144>
    2f74:	18 30       	cpi	r17, 0x08	; 8
    2f76:	38 f0       	brcs	.+14     	; 0x2f86 <vfprintf+0x140>
    2f78:	27 e0       	ldi	r18, 0x07	; 7
    2f7a:	17 e0       	ldi	r17, 0x07	; 7
    2f7c:	05 c0       	rjmp	.+10     	; 0x2f88 <vfprintf+0x142>
    2f7e:	27 e0       	ldi	r18, 0x07	; 7
    2f80:	4c e3       	ldi	r20, 0x3C	; 60
    2f82:	e4 2e       	mov	r14, r20
    2f84:	02 c0       	rjmp	.+4      	; 0x2f8a <vfprintf+0x144>
    2f86:	21 2f       	mov	r18, r17
    2f88:	e1 2c       	mov	r14, r1
    2f8a:	52 01       	movw	r10, r4
    2f8c:	44 e0       	ldi	r20, 0x04	; 4
    2f8e:	a4 0e       	add	r10, r20
    2f90:	b1 1c       	adc	r11, r1
    2f92:	f2 01       	movw	r30, r4
    2f94:	60 81       	ld	r22, Z
    2f96:	71 81       	ldd	r23, Z+1	; 0x01
    2f98:	82 81       	ldd	r24, Z+2	; 0x02
    2f9a:	93 81       	ldd	r25, Z+3	; 0x03
    2f9c:	0e 2d       	mov	r16, r14
    2f9e:	a3 01       	movw	r20, r6
    2fa0:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__ftoa_engine>
    2fa4:	2c 01       	movw	r4, r24
    2fa6:	09 81       	ldd	r16, Y+1	; 0x01
    2fa8:	00 ff       	sbrs	r16, 0
    2faa:	02 c0       	rjmp	.+4      	; 0x2fb0 <vfprintf+0x16a>
    2fac:	03 ff       	sbrs	r16, 3
    2fae:	07 c0       	rjmp	.+14     	; 0x2fbe <vfprintf+0x178>
    2fb0:	31 fc       	sbrc	r3, 1
    2fb2:	08 c0       	rjmp	.+16     	; 0x2fc4 <vfprintf+0x17e>
    2fb4:	32 fe       	sbrs	r3, 2
    2fb6:	09 c0       	rjmp	.+18     	; 0x2fca <vfprintf+0x184>
    2fb8:	30 e2       	ldi	r19, 0x20	; 32
    2fba:	23 2e       	mov	r2, r19
    2fbc:	07 c0       	rjmp	.+14     	; 0x2fcc <vfprintf+0x186>
    2fbe:	2d e2       	ldi	r18, 0x2D	; 45
    2fc0:	22 2e       	mov	r2, r18
    2fc2:	04 c0       	rjmp	.+8      	; 0x2fcc <vfprintf+0x186>
    2fc4:	9b e2       	ldi	r25, 0x2B	; 43
    2fc6:	29 2e       	mov	r2, r25
    2fc8:	01 c0       	rjmp	.+2      	; 0x2fcc <vfprintf+0x186>
    2fca:	21 2c       	mov	r2, r1
    2fcc:	80 2f       	mov	r24, r16
    2fce:	8c 70       	andi	r24, 0x0C	; 12
    2fd0:	19 f0       	breq	.+6      	; 0x2fd8 <vfprintf+0x192>
    2fd2:	21 10       	cpse	r2, r1
    2fd4:	68 c2       	rjmp	.+1232   	; 0x34a6 <vfprintf+0x660>
    2fd6:	a8 c2       	rjmp	.+1360   	; 0x3528 <vfprintf+0x6e2>
    2fd8:	37 fe       	sbrs	r3, 7
    2fda:	0f c0       	rjmp	.+30     	; 0x2ffa <vfprintf+0x1b4>
    2fdc:	e4 0c       	add	r14, r4
    2fde:	04 ff       	sbrs	r16, 4
    2fe0:	04 c0       	rjmp	.+8      	; 0x2fea <vfprintf+0x1a4>
    2fe2:	8a 81       	ldd	r24, Y+2	; 0x02
    2fe4:	81 33       	cpi	r24, 0x31	; 49
    2fe6:	09 f4       	brne	.+2      	; 0x2fea <vfprintf+0x1a4>
    2fe8:	ea 94       	dec	r14
    2fea:	1e 14       	cp	r1, r14
    2fec:	74 f5       	brge	.+92     	; 0x304a <vfprintf+0x204>
    2fee:	f8 e0       	ldi	r31, 0x08	; 8
    2ff0:	fe 15       	cp	r31, r14
    2ff2:	78 f5       	brcc	.+94     	; 0x3052 <vfprintf+0x20c>
    2ff4:	88 e0       	ldi	r24, 0x08	; 8
    2ff6:	e8 2e       	mov	r14, r24
    2ff8:	2c c0       	rjmp	.+88     	; 0x3052 <vfprintf+0x20c>
    2ffa:	36 fc       	sbrc	r3, 6
    2ffc:	2a c0       	rjmp	.+84     	; 0x3052 <vfprintf+0x20c>
    2ffe:	81 2f       	mov	r24, r17
    3000:	90 e0       	ldi	r25, 0x00	; 0
    3002:	84 15       	cp	r24, r4
    3004:	95 05       	cpc	r25, r5
    3006:	9c f0       	brlt	.+38     	; 0x302e <vfprintf+0x1e8>
    3008:	2c ef       	ldi	r18, 0xFC	; 252
    300a:	42 16       	cp	r4, r18
    300c:	2f ef       	ldi	r18, 0xFF	; 255
    300e:	52 06       	cpc	r5, r18
    3010:	74 f0       	brlt	.+28     	; 0x302e <vfprintf+0x1e8>
    3012:	43 2d       	mov	r20, r3
    3014:	40 68       	ori	r20, 0x80	; 128
    3016:	34 2e       	mov	r3, r20
    3018:	0a c0       	rjmp	.+20     	; 0x302e <vfprintf+0x1e8>
    301a:	e2 e0       	ldi	r30, 0x02	; 2
    301c:	f0 e0       	ldi	r31, 0x00	; 0
    301e:	ec 0f       	add	r30, r28
    3020:	fd 1f       	adc	r31, r29
    3022:	e1 0f       	add	r30, r17
    3024:	f1 1d       	adc	r31, r1
    3026:	80 81       	ld	r24, Z
    3028:	80 33       	cpi	r24, 0x30	; 48
    302a:	19 f4       	brne	.+6      	; 0x3032 <vfprintf+0x1ec>
    302c:	11 50       	subi	r17, 0x01	; 1
    302e:	11 11       	cpse	r17, r1
    3030:	f4 cf       	rjmp	.-24     	; 0x301a <vfprintf+0x1d4>
    3032:	37 fe       	sbrs	r3, 7
    3034:	0e c0       	rjmp	.+28     	; 0x3052 <vfprintf+0x20c>
    3036:	ee 24       	eor	r14, r14
    3038:	e3 94       	inc	r14
    303a:	e1 0e       	add	r14, r17
    303c:	81 2f       	mov	r24, r17
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	48 16       	cp	r4, r24
    3042:	59 06       	cpc	r5, r25
    3044:	2c f4       	brge	.+10     	; 0x3050 <vfprintf+0x20a>
    3046:	14 19       	sub	r17, r4
    3048:	04 c0       	rjmp	.+8      	; 0x3052 <vfprintf+0x20c>
    304a:	ee 24       	eor	r14, r14
    304c:	e3 94       	inc	r14
    304e:	01 c0       	rjmp	.+2      	; 0x3052 <vfprintf+0x20c>
    3050:	10 e0       	ldi	r17, 0x00	; 0
    3052:	37 fe       	sbrs	r3, 7
    3054:	06 c0       	rjmp	.+12     	; 0x3062 <vfprintf+0x21c>
    3056:	14 14       	cp	r1, r4
    3058:	15 04       	cpc	r1, r5
    305a:	34 f4       	brge	.+12     	; 0x3068 <vfprintf+0x222>
    305c:	c2 01       	movw	r24, r4
    305e:	01 96       	adiw	r24, 0x01	; 1
    3060:	05 c0       	rjmp	.+10     	; 0x306c <vfprintf+0x226>
    3062:	85 e0       	ldi	r24, 0x05	; 5
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	02 c0       	rjmp	.+4      	; 0x306c <vfprintf+0x226>
    3068:	81 e0       	ldi	r24, 0x01	; 1
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	21 10       	cpse	r2, r1
    306e:	01 96       	adiw	r24, 0x01	; 1
    3070:	11 23       	and	r17, r17
    3072:	31 f0       	breq	.+12     	; 0x3080 <vfprintf+0x23a>
    3074:	21 2f       	mov	r18, r17
    3076:	30 e0       	ldi	r19, 0x00	; 0
    3078:	2f 5f       	subi	r18, 0xFF	; 255
    307a:	3f 4f       	sbci	r19, 0xFF	; 255
    307c:	82 0f       	add	r24, r18
    307e:	93 1f       	adc	r25, r19
    3080:	2f 2d       	mov	r18, r15
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	82 17       	cp	r24, r18
    3086:	93 07       	cpc	r25, r19
    3088:	14 f4       	brge	.+4      	; 0x308e <vfprintf+0x248>
    308a:	f8 1a       	sub	r15, r24
    308c:	01 c0       	rjmp	.+2      	; 0x3090 <vfprintf+0x24a>
    308e:	f1 2c       	mov	r15, r1
    3090:	83 2d       	mov	r24, r3
    3092:	89 70       	andi	r24, 0x09	; 9
    3094:	49 f4       	brne	.+18     	; 0x30a8 <vfprintf+0x262>
    3096:	ff 20       	and	r15, r15
    3098:	39 f0       	breq	.+14     	; 0x30a8 <vfprintf+0x262>
    309a:	b6 01       	movw	r22, r12
    309c:	80 e2       	ldi	r24, 0x20	; 32
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <fputc>
    30a4:	fa 94       	dec	r15
    30a6:	f7 cf       	rjmp	.-18     	; 0x3096 <vfprintf+0x250>
    30a8:	22 20       	and	r2, r2
    30aa:	29 f0       	breq	.+10     	; 0x30b6 <vfprintf+0x270>
    30ac:	b6 01       	movw	r22, r12
    30ae:	82 2d       	mov	r24, r2
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <fputc>
    30b6:	33 fc       	sbrc	r3, 3
    30b8:	09 c0       	rjmp	.+18     	; 0x30cc <vfprintf+0x286>
    30ba:	ff 20       	and	r15, r15
    30bc:	39 f0       	breq	.+14     	; 0x30cc <vfprintf+0x286>
    30be:	b6 01       	movw	r22, r12
    30c0:	80 e3       	ldi	r24, 0x30	; 48
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <fputc>
    30c8:	fa 94       	dec	r15
    30ca:	f7 cf       	rjmp	.-18     	; 0x30ba <vfprintf+0x274>
    30cc:	37 fe       	sbrs	r3, 7
    30ce:	5a c0       	rjmp	.+180    	; 0x3184 <vfprintf+0x33e>
    30d0:	94 2d       	mov	r25, r4
    30d2:	85 2d       	mov	r24, r5
    30d4:	57 fe       	sbrs	r5, 7
    30d6:	02 c0       	rjmp	.+4      	; 0x30dc <vfprintf+0x296>
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	80 e0       	ldi	r24, 0x00	; 0
    30dc:	29 2e       	mov	r2, r25
    30de:	38 2e       	mov	r3, r24
    30e0:	20 e0       	ldi	r18, 0x00	; 0
    30e2:	30 e0       	ldi	r19, 0x00	; 0
    30e4:	a2 01       	movw	r20, r4
    30e6:	4e 19       	sub	r20, r14
    30e8:	51 09       	sbc	r21, r1
    30ea:	5d 87       	std	Y+13, r21	; 0x0d
    30ec:	4c 87       	std	Y+12, r20	; 0x0c
    30ee:	a2 01       	movw	r20, r4
    30f0:	42 19       	sub	r20, r2
    30f2:	53 09       	sbc	r21, r3
    30f4:	5f 87       	std	Y+15, r21	; 0x0f
    30f6:	4e 87       	std	Y+14, r20	; 0x0e
    30f8:	61 2f       	mov	r22, r17
    30fa:	70 e0       	ldi	r23, 0x00	; 0
    30fc:	44 27       	eor	r20, r20
    30fe:	55 27       	eor	r21, r21
    3100:	46 1b       	sub	r20, r22
    3102:	57 0b       	sbc	r21, r23
    3104:	59 8b       	std	Y+17, r21	; 0x11
    3106:	48 8b       	std	Y+16, r20	; 0x10
    3108:	5f ef       	ldi	r21, 0xFF	; 255
    310a:	25 16       	cp	r2, r21
    310c:	35 06       	cpc	r3, r21
    310e:	49 f4       	brne	.+18     	; 0x3122 <vfprintf+0x2dc>
    3110:	b6 01       	movw	r22, r12
    3112:	8e e2       	ldi	r24, 0x2E	; 46
    3114:	90 e0       	ldi	r25, 0x00	; 0
    3116:	2a 8b       	std	Y+18, r18	; 0x12
    3118:	3b 8b       	std	Y+19, r19	; 0x13
    311a:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <fputc>
    311e:	3b 89       	ldd	r19, Y+19	; 0x13
    3120:	2a 89       	ldd	r18, Y+18	; 0x12
    3122:	42 14       	cp	r4, r2
    3124:	53 04       	cpc	r5, r3
    3126:	6c f0       	brlt	.+26     	; 0x3142 <vfprintf+0x2fc>
    3128:	4c 85       	ldd	r20, Y+12	; 0x0c
    312a:	5d 85       	ldd	r21, Y+13	; 0x0d
    312c:	42 15       	cp	r20, r2
    312e:	53 05       	cpc	r21, r3
    3130:	44 f4       	brge	.+16     	; 0x3142 <vfprintf+0x2fc>
    3132:	ee 85       	ldd	r30, Y+14	; 0x0e
    3134:	ff 85       	ldd	r31, Y+15	; 0x0f
    3136:	e2 0f       	add	r30, r18
    3138:	f3 1f       	adc	r31, r19
    313a:	e6 0d       	add	r30, r6
    313c:	f7 1d       	adc	r31, r7
    313e:	81 81       	ldd	r24, Z+1	; 0x01
    3140:	01 c0       	rjmp	.+2      	; 0x3144 <vfprintf+0x2fe>
    3142:	80 e3       	ldi	r24, 0x30	; 48
    3144:	51 e0       	ldi	r21, 0x01	; 1
    3146:	25 1a       	sub	r2, r21
    3148:	31 08       	sbc	r3, r1
    314a:	2f 5f       	subi	r18, 0xFF	; 255
    314c:	3f 4f       	sbci	r19, 0xFF	; 255
    314e:	48 89       	ldd	r20, Y+16	; 0x10
    3150:	59 89       	ldd	r21, Y+17	; 0x11
    3152:	24 16       	cp	r2, r20
    3154:	35 06       	cpc	r3, r21
    3156:	4c f0       	brlt	.+18     	; 0x316a <vfprintf+0x324>
    3158:	b6 01       	movw	r22, r12
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	2a 8b       	std	Y+18, r18	; 0x12
    315e:	3b 8b       	std	Y+19, r19	; 0x13
    3160:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <fputc>
    3164:	2a 89       	ldd	r18, Y+18	; 0x12
    3166:	3b 89       	ldd	r19, Y+19	; 0x13
    3168:	cf cf       	rjmp	.-98     	; 0x3108 <vfprintf+0x2c2>
    316a:	24 14       	cp	r2, r4
    316c:	35 04       	cpc	r3, r5
    316e:	39 f4       	brne	.+14     	; 0x317e <vfprintf+0x338>
    3170:	9a 81       	ldd	r25, Y+2	; 0x02
    3172:	96 33       	cpi	r25, 0x36	; 54
    3174:	18 f4       	brcc	.+6      	; 0x317c <vfprintf+0x336>
    3176:	95 33       	cpi	r25, 0x35	; 53
    3178:	11 f4       	brne	.+4      	; 0x317e <vfprintf+0x338>
    317a:	04 ff       	sbrs	r16, 4
    317c:	81 e3       	ldi	r24, 0x31	; 49
    317e:	b6 01       	movw	r22, r12
    3180:	90 e0       	ldi	r25, 0x00	; 0
    3182:	4b c0       	rjmp	.+150    	; 0x321a <vfprintf+0x3d4>
    3184:	8a 81       	ldd	r24, Y+2	; 0x02
    3186:	81 33       	cpi	r24, 0x31	; 49
    3188:	09 f0       	breq	.+2      	; 0x318c <vfprintf+0x346>
    318a:	0f 7e       	andi	r16, 0xEF	; 239
    318c:	b6 01       	movw	r22, r12
    318e:	90 e0       	ldi	r25, 0x00	; 0
    3190:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <fputc>
    3194:	11 11       	cpse	r17, r1
    3196:	05 c0       	rjmp	.+10     	; 0x31a2 <vfprintf+0x35c>
    3198:	34 fc       	sbrc	r3, 4
    319a:	18 c0       	rjmp	.+48     	; 0x31cc <vfprintf+0x386>
    319c:	85 e6       	ldi	r24, 0x65	; 101
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	17 c0       	rjmp	.+46     	; 0x31d0 <vfprintf+0x38a>
    31a2:	b6 01       	movw	r22, r12
    31a4:	8e e2       	ldi	r24, 0x2E	; 46
    31a6:	90 e0       	ldi	r25, 0x00	; 0
    31a8:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <fputc>
    31ac:	82 e0       	ldi	r24, 0x02	; 2
    31ae:	ee 24       	eor	r14, r14
    31b0:	e3 94       	inc	r14
    31b2:	e8 0e       	add	r14, r24
    31b4:	f3 01       	movw	r30, r6
    31b6:	e8 0f       	add	r30, r24
    31b8:	f1 1d       	adc	r31, r1
    31ba:	80 81       	ld	r24, Z
    31bc:	b6 01       	movw	r22, r12
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <fputc>
    31c4:	11 50       	subi	r17, 0x01	; 1
    31c6:	8e 2d       	mov	r24, r14
    31c8:	91 f7       	brne	.-28     	; 0x31ae <vfprintf+0x368>
    31ca:	e6 cf       	rjmp	.-52     	; 0x3198 <vfprintf+0x352>
    31cc:	85 e4       	ldi	r24, 0x45	; 69
    31ce:	90 e0       	ldi	r25, 0x00	; 0
    31d0:	b6 01       	movw	r22, r12
    31d2:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <fputc>
    31d6:	57 fc       	sbrc	r5, 7
    31d8:	05 c0       	rjmp	.+10     	; 0x31e4 <vfprintf+0x39e>
    31da:	41 14       	cp	r4, r1
    31dc:	51 04       	cpc	r5, r1
    31de:	39 f4       	brne	.+14     	; 0x31ee <vfprintf+0x3a8>
    31e0:	04 ff       	sbrs	r16, 4
    31e2:	05 c0       	rjmp	.+10     	; 0x31ee <vfprintf+0x3a8>
    31e4:	51 94       	neg	r5
    31e6:	41 94       	neg	r4
    31e8:	51 08       	sbc	r5, r1
    31ea:	8d e2       	ldi	r24, 0x2D	; 45
    31ec:	01 c0       	rjmp	.+2      	; 0x31f0 <vfprintf+0x3aa>
    31ee:	8b e2       	ldi	r24, 0x2B	; 43
    31f0:	b6 01       	movw	r22, r12
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <fputc>
    31f8:	80 e3       	ldi	r24, 0x30	; 48
    31fa:	9a e0       	ldi	r25, 0x0A	; 10
    31fc:	49 16       	cp	r4, r25
    31fe:	51 04       	cpc	r5, r1
    3200:	2c f0       	brlt	.+10     	; 0x320c <vfprintf+0x3c6>
    3202:	8f 5f       	subi	r24, 0xFF	; 255
    3204:	5a e0       	ldi	r21, 0x0A	; 10
    3206:	45 1a       	sub	r4, r21
    3208:	51 08       	sbc	r5, r1
    320a:	f7 cf       	rjmp	.-18     	; 0x31fa <vfprintf+0x3b4>
    320c:	b6 01       	movw	r22, r12
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <fputc>
    3214:	b6 01       	movw	r22, r12
    3216:	c2 01       	movw	r24, r4
    3218:	c0 96       	adiw	r24, 0x30	; 48
    321a:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <fputc>
    321e:	57 c1       	rjmp	.+686    	; 0x34ce <vfprintf+0x688>
    3220:	83 36       	cpi	r24, 0x63	; 99
    3222:	31 f0       	breq	.+12     	; 0x3230 <vfprintf+0x3ea>
    3224:	83 37       	cpi	r24, 0x73	; 115
    3226:	79 f0       	breq	.+30     	; 0x3246 <vfprintf+0x400>
    3228:	83 35       	cpi	r24, 0x53	; 83
    322a:	09 f0       	breq	.+2      	; 0x322e <vfprintf+0x3e8>
    322c:	58 c0       	rjmp	.+176    	; 0x32de <vfprintf+0x498>
    322e:	21 c0       	rjmp	.+66     	; 0x3272 <vfprintf+0x42c>
    3230:	52 01       	movw	r10, r4
    3232:	e2 e0       	ldi	r30, 0x02	; 2
    3234:	ae 0e       	add	r10, r30
    3236:	b1 1c       	adc	r11, r1
    3238:	f2 01       	movw	r30, r4
    323a:	80 81       	ld	r24, Z
    323c:	89 83       	std	Y+1, r24	; 0x01
    323e:	01 e0       	ldi	r16, 0x01	; 1
    3240:	10 e0       	ldi	r17, 0x00	; 0
    3242:	23 01       	movw	r4, r6
    3244:	14 c0       	rjmp	.+40     	; 0x326e <vfprintf+0x428>
    3246:	52 01       	movw	r10, r4
    3248:	f2 e0       	ldi	r31, 0x02	; 2
    324a:	af 0e       	add	r10, r31
    324c:	b1 1c       	adc	r11, r1
    324e:	f2 01       	movw	r30, r4
    3250:	40 80       	ld	r4, Z
    3252:	51 80       	ldd	r5, Z+1	; 0x01
    3254:	26 ff       	sbrs	r18, 6
    3256:	03 c0       	rjmp	.+6      	; 0x325e <vfprintf+0x418>
    3258:	61 2f       	mov	r22, r17
    325a:	70 e0       	ldi	r23, 0x00	; 0
    325c:	02 c0       	rjmp	.+4      	; 0x3262 <vfprintf+0x41c>
    325e:	6f ef       	ldi	r22, 0xFF	; 255
    3260:	7f ef       	ldi	r23, 0xFF	; 255
    3262:	c2 01       	movw	r24, r4
    3264:	2a 8b       	std	Y+18, r18	; 0x12
    3266:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <strnlen>
    326a:	8c 01       	movw	r16, r24
    326c:	2a 89       	ldd	r18, Y+18	; 0x12
    326e:	2f 77       	andi	r18, 0x7F	; 127
    3270:	15 c0       	rjmp	.+42     	; 0x329c <vfprintf+0x456>
    3272:	52 01       	movw	r10, r4
    3274:	f2 e0       	ldi	r31, 0x02	; 2
    3276:	af 0e       	add	r10, r31
    3278:	b1 1c       	adc	r11, r1
    327a:	f2 01       	movw	r30, r4
    327c:	40 80       	ld	r4, Z
    327e:	51 80       	ldd	r5, Z+1	; 0x01
    3280:	26 ff       	sbrs	r18, 6
    3282:	03 c0       	rjmp	.+6      	; 0x328a <vfprintf+0x444>
    3284:	61 2f       	mov	r22, r17
    3286:	70 e0       	ldi	r23, 0x00	; 0
    3288:	02 c0       	rjmp	.+4      	; 0x328e <vfprintf+0x448>
    328a:	6f ef       	ldi	r22, 0xFF	; 255
    328c:	7f ef       	ldi	r23, 0xFF	; 255
    328e:	c2 01       	movw	r24, r4
    3290:	2a 8b       	std	Y+18, r18	; 0x12
    3292:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <strnlen_P>
    3296:	8c 01       	movw	r16, r24
    3298:	2a 89       	ldd	r18, Y+18	; 0x12
    329a:	20 68       	ori	r18, 0x80	; 128
    329c:	32 2e       	mov	r3, r18
    329e:	23 fd       	sbrc	r18, 3
    32a0:	1a c0       	rjmp	.+52     	; 0x32d6 <vfprintf+0x490>
    32a2:	8f 2d       	mov	r24, r15
    32a4:	90 e0       	ldi	r25, 0x00	; 0
    32a6:	08 17       	cp	r16, r24
    32a8:	19 07       	cpc	r17, r25
    32aa:	a8 f4       	brcc	.+42     	; 0x32d6 <vfprintf+0x490>
    32ac:	b6 01       	movw	r22, r12
    32ae:	80 e2       	ldi	r24, 0x20	; 32
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <fputc>
    32b6:	fa 94       	dec	r15
    32b8:	f4 cf       	rjmp	.-24     	; 0x32a2 <vfprintf+0x45c>
    32ba:	f2 01       	movw	r30, r4
    32bc:	37 fc       	sbrc	r3, 7
    32be:	85 91       	lpm	r24, Z+
    32c0:	37 fe       	sbrs	r3, 7
    32c2:	81 91       	ld	r24, Z+
    32c4:	2f 01       	movw	r4, r30
    32c6:	b6 01       	movw	r22, r12
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <fputc>
    32ce:	f1 10       	cpse	r15, r1
    32d0:	fa 94       	dec	r15
    32d2:	01 50       	subi	r16, 0x01	; 1
    32d4:	11 09       	sbc	r17, r1
    32d6:	01 15       	cp	r16, r1
    32d8:	11 05       	cpc	r17, r1
    32da:	79 f7       	brne	.-34     	; 0x32ba <vfprintf+0x474>
    32dc:	f8 c0       	rjmp	.+496    	; 0x34ce <vfprintf+0x688>
    32de:	84 36       	cpi	r24, 0x64	; 100
    32e0:	11 f0       	breq	.+4      	; 0x32e6 <vfprintf+0x4a0>
    32e2:	89 36       	cpi	r24, 0x69	; 105
    32e4:	59 f5       	brne	.+86     	; 0x333c <vfprintf+0x4f6>
    32e6:	52 01       	movw	r10, r4
    32e8:	27 ff       	sbrs	r18, 7
    32ea:	09 c0       	rjmp	.+18     	; 0x32fe <vfprintf+0x4b8>
    32ec:	f4 e0       	ldi	r31, 0x04	; 4
    32ee:	af 0e       	add	r10, r31
    32f0:	b1 1c       	adc	r11, r1
    32f2:	f2 01       	movw	r30, r4
    32f4:	60 81       	ld	r22, Z
    32f6:	71 81       	ldd	r23, Z+1	; 0x01
    32f8:	82 81       	ldd	r24, Z+2	; 0x02
    32fa:	93 81       	ldd	r25, Z+3	; 0x03
    32fc:	0a c0       	rjmp	.+20     	; 0x3312 <vfprintf+0x4cc>
    32fe:	f2 e0       	ldi	r31, 0x02	; 2
    3300:	af 0e       	add	r10, r31
    3302:	b1 1c       	adc	r11, r1
    3304:	f2 01       	movw	r30, r4
    3306:	60 81       	ld	r22, Z
    3308:	71 81       	ldd	r23, Z+1	; 0x01
    330a:	07 2e       	mov	r0, r23
    330c:	00 0c       	add	r0, r0
    330e:	88 0b       	sbc	r24, r24
    3310:	99 0b       	sbc	r25, r25
    3312:	2f 76       	andi	r18, 0x6F	; 111
    3314:	32 2e       	mov	r3, r18
    3316:	97 ff       	sbrs	r25, 7
    3318:	09 c0       	rjmp	.+18     	; 0x332c <vfprintf+0x4e6>
    331a:	90 95       	com	r25
    331c:	80 95       	com	r24
    331e:	70 95       	com	r23
    3320:	61 95       	neg	r22
    3322:	7f 4f       	sbci	r23, 0xFF	; 255
    3324:	8f 4f       	sbci	r24, 0xFF	; 255
    3326:	9f 4f       	sbci	r25, 0xFF	; 255
    3328:	20 68       	ori	r18, 0x80	; 128
    332a:	32 2e       	mov	r3, r18
    332c:	2a e0       	ldi	r18, 0x0A	; 10
    332e:	30 e0       	ldi	r19, 0x00	; 0
    3330:	a3 01       	movw	r20, r6
    3332:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <__ultoa_invert>
    3336:	e8 2e       	mov	r14, r24
    3338:	e6 18       	sub	r14, r6
    333a:	3f c0       	rjmp	.+126    	; 0x33ba <vfprintf+0x574>
    333c:	02 2f       	mov	r16, r18
    333e:	85 37       	cpi	r24, 0x75	; 117
    3340:	21 f4       	brne	.+8      	; 0x334a <vfprintf+0x504>
    3342:	0f 7e       	andi	r16, 0xEF	; 239
    3344:	2a e0       	ldi	r18, 0x0A	; 10
    3346:	30 e0       	ldi	r19, 0x00	; 0
    3348:	1d c0       	rjmp	.+58     	; 0x3384 <vfprintf+0x53e>
    334a:	09 7f       	andi	r16, 0xF9	; 249
    334c:	8f 36       	cpi	r24, 0x6F	; 111
    334e:	91 f0       	breq	.+36     	; 0x3374 <vfprintf+0x52e>
    3350:	18 f4       	brcc	.+6      	; 0x3358 <vfprintf+0x512>
    3352:	88 35       	cpi	r24, 0x58	; 88
    3354:	59 f0       	breq	.+22     	; 0x336c <vfprintf+0x526>
    3356:	c5 c0       	rjmp	.+394    	; 0x34e2 <vfprintf+0x69c>
    3358:	80 37       	cpi	r24, 0x70	; 112
    335a:	19 f0       	breq	.+6      	; 0x3362 <vfprintf+0x51c>
    335c:	88 37       	cpi	r24, 0x78	; 120
    335e:	11 f0       	breq	.+4      	; 0x3364 <vfprintf+0x51e>
    3360:	c0 c0       	rjmp	.+384    	; 0x34e2 <vfprintf+0x69c>
    3362:	00 61       	ori	r16, 0x10	; 16
    3364:	04 ff       	sbrs	r16, 4
    3366:	09 c0       	rjmp	.+18     	; 0x337a <vfprintf+0x534>
    3368:	04 60       	ori	r16, 0x04	; 4
    336a:	07 c0       	rjmp	.+14     	; 0x337a <vfprintf+0x534>
    336c:	24 ff       	sbrs	r18, 4
    336e:	08 c0       	rjmp	.+16     	; 0x3380 <vfprintf+0x53a>
    3370:	06 60       	ori	r16, 0x06	; 6
    3372:	06 c0       	rjmp	.+12     	; 0x3380 <vfprintf+0x53a>
    3374:	28 e0       	ldi	r18, 0x08	; 8
    3376:	30 e0       	ldi	r19, 0x00	; 0
    3378:	05 c0       	rjmp	.+10     	; 0x3384 <vfprintf+0x53e>
    337a:	20 e1       	ldi	r18, 0x10	; 16
    337c:	30 e0       	ldi	r19, 0x00	; 0
    337e:	02 c0       	rjmp	.+4      	; 0x3384 <vfprintf+0x53e>
    3380:	20 e1       	ldi	r18, 0x10	; 16
    3382:	32 e0       	ldi	r19, 0x02	; 2
    3384:	52 01       	movw	r10, r4
    3386:	07 ff       	sbrs	r16, 7
    3388:	09 c0       	rjmp	.+18     	; 0x339c <vfprintf+0x556>
    338a:	f4 e0       	ldi	r31, 0x04	; 4
    338c:	af 0e       	add	r10, r31
    338e:	b1 1c       	adc	r11, r1
    3390:	f2 01       	movw	r30, r4
    3392:	60 81       	ld	r22, Z
    3394:	71 81       	ldd	r23, Z+1	; 0x01
    3396:	82 81       	ldd	r24, Z+2	; 0x02
    3398:	93 81       	ldd	r25, Z+3	; 0x03
    339a:	08 c0       	rjmp	.+16     	; 0x33ac <vfprintf+0x566>
    339c:	f2 e0       	ldi	r31, 0x02	; 2
    339e:	af 0e       	add	r10, r31
    33a0:	b1 1c       	adc	r11, r1
    33a2:	f2 01       	movw	r30, r4
    33a4:	60 81       	ld	r22, Z
    33a6:	71 81       	ldd	r23, Z+1	; 0x01
    33a8:	80 e0       	ldi	r24, 0x00	; 0
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	a3 01       	movw	r20, r6
    33ae:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <__ultoa_invert>
    33b2:	e8 2e       	mov	r14, r24
    33b4:	e6 18       	sub	r14, r6
    33b6:	0f 77       	andi	r16, 0x7F	; 127
    33b8:	30 2e       	mov	r3, r16
    33ba:	36 fe       	sbrs	r3, 6
    33bc:	0b c0       	rjmp	.+22     	; 0x33d4 <vfprintf+0x58e>
    33be:	33 2d       	mov	r19, r3
    33c0:	3e 7f       	andi	r19, 0xFE	; 254
    33c2:	e1 16       	cp	r14, r17
    33c4:	50 f4       	brcc	.+20     	; 0x33da <vfprintf+0x594>
    33c6:	34 fe       	sbrs	r3, 4
    33c8:	0a c0       	rjmp	.+20     	; 0x33de <vfprintf+0x598>
    33ca:	32 fc       	sbrc	r3, 2
    33cc:	08 c0       	rjmp	.+16     	; 0x33de <vfprintf+0x598>
    33ce:	33 2d       	mov	r19, r3
    33d0:	3e 7e       	andi	r19, 0xEE	; 238
    33d2:	05 c0       	rjmp	.+10     	; 0x33de <vfprintf+0x598>
    33d4:	0e 2d       	mov	r16, r14
    33d6:	33 2d       	mov	r19, r3
    33d8:	03 c0       	rjmp	.+6      	; 0x33e0 <vfprintf+0x59a>
    33da:	0e 2d       	mov	r16, r14
    33dc:	01 c0       	rjmp	.+2      	; 0x33e0 <vfprintf+0x59a>
    33de:	01 2f       	mov	r16, r17
    33e0:	34 ff       	sbrs	r19, 4
    33e2:	0c c0       	rjmp	.+24     	; 0x33fc <vfprintf+0x5b6>
    33e4:	fe 01       	movw	r30, r28
    33e6:	ee 0d       	add	r30, r14
    33e8:	f1 1d       	adc	r31, r1
    33ea:	80 81       	ld	r24, Z
    33ec:	80 33       	cpi	r24, 0x30	; 48
    33ee:	11 f4       	brne	.+4      	; 0x33f4 <vfprintf+0x5ae>
    33f0:	39 7e       	andi	r19, 0xE9	; 233
    33f2:	08 c0       	rjmp	.+16     	; 0x3404 <vfprintf+0x5be>
    33f4:	32 ff       	sbrs	r19, 2
    33f6:	05 c0       	rjmp	.+10     	; 0x3402 <vfprintf+0x5bc>
    33f8:	0e 5f       	subi	r16, 0xFE	; 254
    33fa:	04 c0       	rjmp	.+8      	; 0x3404 <vfprintf+0x5be>
    33fc:	83 2f       	mov	r24, r19
    33fe:	86 78       	andi	r24, 0x86	; 134
    3400:	09 f0       	breq	.+2      	; 0x3404 <vfprintf+0x5be>
    3402:	0f 5f       	subi	r16, 0xFF	; 255
    3404:	33 fd       	sbrc	r19, 3
    3406:	13 c0       	rjmp	.+38     	; 0x342e <vfprintf+0x5e8>
    3408:	30 ff       	sbrs	r19, 0
    340a:	06 c0       	rjmp	.+12     	; 0x3418 <vfprintf+0x5d2>
    340c:	1e 2d       	mov	r17, r14
    340e:	0f 15       	cp	r16, r15
    3410:	18 f4       	brcc	.+6      	; 0x3418 <vfprintf+0x5d2>
    3412:	1f 0d       	add	r17, r15
    3414:	10 1b       	sub	r17, r16
    3416:	0f 2d       	mov	r16, r15
    3418:	0f 15       	cp	r16, r15
    341a:	68 f4       	brcc	.+26     	; 0x3436 <vfprintf+0x5f0>
    341c:	b6 01       	movw	r22, r12
    341e:	80 e2       	ldi	r24, 0x20	; 32
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	3b 8b       	std	Y+19, r19	; 0x13
    3424:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <fputc>
    3428:	0f 5f       	subi	r16, 0xFF	; 255
    342a:	3b 89       	ldd	r19, Y+19	; 0x13
    342c:	f5 cf       	rjmp	.-22     	; 0x3418 <vfprintf+0x5d2>
    342e:	0f 15       	cp	r16, r15
    3430:	10 f4       	brcc	.+4      	; 0x3436 <vfprintf+0x5f0>
    3432:	f0 1a       	sub	r15, r16
    3434:	01 c0       	rjmp	.+2      	; 0x3438 <vfprintf+0x5f2>
    3436:	f1 2c       	mov	r15, r1
    3438:	34 ff       	sbrs	r19, 4
    343a:	12 c0       	rjmp	.+36     	; 0x3460 <vfprintf+0x61a>
    343c:	b6 01       	movw	r22, r12
    343e:	80 e3       	ldi	r24, 0x30	; 48
    3440:	90 e0       	ldi	r25, 0x00	; 0
    3442:	3b 8b       	std	Y+19, r19	; 0x13
    3444:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <fputc>
    3448:	3b 89       	ldd	r19, Y+19	; 0x13
    344a:	32 ff       	sbrs	r19, 2
    344c:	17 c0       	rjmp	.+46     	; 0x347c <vfprintf+0x636>
    344e:	31 fd       	sbrc	r19, 1
    3450:	03 c0       	rjmp	.+6      	; 0x3458 <vfprintf+0x612>
    3452:	88 e7       	ldi	r24, 0x78	; 120
    3454:	90 e0       	ldi	r25, 0x00	; 0
    3456:	02 c0       	rjmp	.+4      	; 0x345c <vfprintf+0x616>
    3458:	88 e5       	ldi	r24, 0x58	; 88
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	b6 01       	movw	r22, r12
    345e:	0c c0       	rjmp	.+24     	; 0x3478 <vfprintf+0x632>
    3460:	83 2f       	mov	r24, r19
    3462:	86 78       	andi	r24, 0x86	; 134
    3464:	59 f0       	breq	.+22     	; 0x347c <vfprintf+0x636>
    3466:	31 ff       	sbrs	r19, 1
    3468:	02 c0       	rjmp	.+4      	; 0x346e <vfprintf+0x628>
    346a:	8b e2       	ldi	r24, 0x2B	; 43
    346c:	01 c0       	rjmp	.+2      	; 0x3470 <vfprintf+0x62a>
    346e:	80 e2       	ldi	r24, 0x20	; 32
    3470:	37 fd       	sbrc	r19, 7
    3472:	8d e2       	ldi	r24, 0x2D	; 45
    3474:	b6 01       	movw	r22, r12
    3476:	90 e0       	ldi	r25, 0x00	; 0
    3478:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <fputc>
    347c:	e1 16       	cp	r14, r17
    347e:	38 f4       	brcc	.+14     	; 0x348e <vfprintf+0x648>
    3480:	b6 01       	movw	r22, r12
    3482:	80 e3       	ldi	r24, 0x30	; 48
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <fputc>
    348a:	11 50       	subi	r17, 0x01	; 1
    348c:	f7 cf       	rjmp	.-18     	; 0x347c <vfprintf+0x636>
    348e:	ea 94       	dec	r14
    3490:	f3 01       	movw	r30, r6
    3492:	ee 0d       	add	r30, r14
    3494:	f1 1d       	adc	r31, r1
    3496:	80 81       	ld	r24, Z
    3498:	b6 01       	movw	r22, r12
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <fputc>
    34a0:	e1 10       	cpse	r14, r1
    34a2:	f5 cf       	rjmp	.-22     	; 0x348e <vfprintf+0x648>
    34a4:	14 c0       	rjmp	.+40     	; 0x34ce <vfprintf+0x688>
    34a6:	f4 e0       	ldi	r31, 0x04	; 4
    34a8:	ff 15       	cp	r31, r15
    34aa:	58 f5       	brcc	.+86     	; 0x3502 <vfprintf+0x6bc>
    34ac:	84 e0       	ldi	r24, 0x04	; 4
    34ae:	f8 1a       	sub	r15, r24
    34b0:	33 fe       	sbrs	r3, 3
    34b2:	1e c0       	rjmp	.+60     	; 0x34f0 <vfprintf+0x6aa>
    34b4:	21 10       	cpse	r2, r1
    34b6:	26 c0       	rjmp	.+76     	; 0x3504 <vfprintf+0x6be>
    34b8:	03 ff       	sbrs	r16, 3
    34ba:	2a c0       	rjmp	.+84     	; 0x3510 <vfprintf+0x6ca>
    34bc:	04 e3       	ldi	r16, 0x34	; 52
    34be:	11 e0       	ldi	r17, 0x01	; 1
    34c0:	f3 2d       	mov	r31, r3
    34c2:	f0 71       	andi	r31, 0x10	; 16
    34c4:	3f 2e       	mov	r3, r31
    34c6:	f8 01       	movw	r30, r16
    34c8:	84 91       	lpm	r24, Z
    34ca:	81 11       	cpse	r24, r1
    34cc:	24 c0       	rjmp	.+72     	; 0x3516 <vfprintf+0x6d0>
    34ce:	ff 20       	and	r15, r15
    34d0:	09 f4       	brne	.+2      	; 0x34d4 <vfprintf+0x68e>
    34d2:	e5 cc       	rjmp	.-1590   	; 0x2e9e <vfprintf+0x58>
    34d4:	b6 01       	movw	r22, r12
    34d6:	80 e2       	ldi	r24, 0x20	; 32
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <fputc>
    34de:	fa 94       	dec	r15
    34e0:	f6 cf       	rjmp	.-20     	; 0x34ce <vfprintf+0x688>
    34e2:	f6 01       	movw	r30, r12
    34e4:	86 81       	ldd	r24, Z+6	; 0x06
    34e6:	97 81       	ldd	r25, Z+7	; 0x07
    34e8:	26 c0       	rjmp	.+76     	; 0x3536 <vfprintf+0x6f0>
    34ea:	8f ef       	ldi	r24, 0xFF	; 255
    34ec:	9f ef       	ldi	r25, 0xFF	; 255
    34ee:	23 c0       	rjmp	.+70     	; 0x3536 <vfprintf+0x6f0>
    34f0:	b6 01       	movw	r22, r12
    34f2:	80 e2       	ldi	r24, 0x20	; 32
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <fputc>
    34fa:	fa 94       	dec	r15
    34fc:	f1 10       	cpse	r15, r1
    34fe:	f8 cf       	rjmp	.-16     	; 0x34f0 <vfprintf+0x6aa>
    3500:	d9 cf       	rjmp	.-78     	; 0x34b4 <vfprintf+0x66e>
    3502:	f1 2c       	mov	r15, r1
    3504:	b6 01       	movw	r22, r12
    3506:	82 2d       	mov	r24, r2
    3508:	90 e0       	ldi	r25, 0x00	; 0
    350a:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <fputc>
    350e:	d4 cf       	rjmp	.-88     	; 0x34b8 <vfprintf+0x672>
    3510:	08 e3       	ldi	r16, 0x38	; 56
    3512:	11 e0       	ldi	r17, 0x01	; 1
    3514:	d5 cf       	rjmp	.-86     	; 0x34c0 <vfprintf+0x67a>
    3516:	31 10       	cpse	r3, r1
    3518:	80 52       	subi	r24, 0x20	; 32
    351a:	b6 01       	movw	r22, r12
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <fputc>
    3522:	0f 5f       	subi	r16, 0xFF	; 255
    3524:	1f 4f       	sbci	r17, 0xFF	; 255
    3526:	cf cf       	rjmp	.-98     	; 0x34c6 <vfprintf+0x680>
    3528:	23 e0       	ldi	r18, 0x03	; 3
    352a:	2f 15       	cp	r18, r15
    352c:	10 f4       	brcc	.+4      	; 0x3532 <vfprintf+0x6ec>
    352e:	83 e0       	ldi	r24, 0x03	; 3
    3530:	be cf       	rjmp	.-132    	; 0x34ae <vfprintf+0x668>
    3532:	f1 2c       	mov	r15, r1
    3534:	c1 cf       	rjmp	.-126    	; 0x34b8 <vfprintf+0x672>
    3536:	63 96       	adiw	r28, 0x13	; 19
    3538:	e2 e1       	ldi	r30, 0x12	; 18
    353a:	0c 94 04 1b 	jmp	0x3608	; 0x3608 <__epilogue_restores__>

0000353e <__udivmodsi4>:
    353e:	a1 e2       	ldi	r26, 0x21	; 33
    3540:	1a 2e       	mov	r1, r26
    3542:	aa 1b       	sub	r26, r26
    3544:	bb 1b       	sub	r27, r27
    3546:	fd 01       	movw	r30, r26
    3548:	0d c0       	rjmp	.+26     	; 0x3564 <__udivmodsi4_ep>

0000354a <__udivmodsi4_loop>:
    354a:	aa 1f       	adc	r26, r26
    354c:	bb 1f       	adc	r27, r27
    354e:	ee 1f       	adc	r30, r30
    3550:	ff 1f       	adc	r31, r31
    3552:	a2 17       	cp	r26, r18
    3554:	b3 07       	cpc	r27, r19
    3556:	e4 07       	cpc	r30, r20
    3558:	f5 07       	cpc	r31, r21
    355a:	20 f0       	brcs	.+8      	; 0x3564 <__udivmodsi4_ep>
    355c:	a2 1b       	sub	r26, r18
    355e:	b3 0b       	sbc	r27, r19
    3560:	e4 0b       	sbc	r30, r20
    3562:	f5 0b       	sbc	r31, r21

00003564 <__udivmodsi4_ep>:
    3564:	66 1f       	adc	r22, r22
    3566:	77 1f       	adc	r23, r23
    3568:	88 1f       	adc	r24, r24
    356a:	99 1f       	adc	r25, r25
    356c:	1a 94       	dec	r1
    356e:	69 f7       	brne	.-38     	; 0x354a <__udivmodsi4_loop>
    3570:	60 95       	com	r22
    3572:	70 95       	com	r23
    3574:	80 95       	com	r24
    3576:	90 95       	com	r25
    3578:	9b 01       	movw	r18, r22
    357a:	ac 01       	movw	r20, r24
    357c:	bd 01       	movw	r22, r26
    357e:	cf 01       	movw	r24, r30
    3580:	08 95       	ret

00003582 <__divmodsi4>:
    3582:	05 2e       	mov	r0, r21
    3584:	97 fb       	bst	r25, 7
    3586:	1e f4       	brtc	.+6      	; 0x358e <__divmodsi4+0xc>
    3588:	00 94       	com	r0
    358a:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <__negsi2>
    358e:	57 fd       	sbrc	r21, 7
    3590:	07 d0       	rcall	.+14     	; 0x35a0 <__divmodsi4_neg2>
    3592:	0e 94 9f 1a 	call	0x353e	; 0x353e <__udivmodsi4>
    3596:	07 fc       	sbrc	r0, 7
    3598:	03 d0       	rcall	.+6      	; 0x35a0 <__divmodsi4_neg2>
    359a:	4e f4       	brtc	.+18     	; 0x35ae <__divmodsi4_exit>
    359c:	0c 94 d8 1a 	jmp	0x35b0	; 0x35b0 <__negsi2>

000035a0 <__divmodsi4_neg2>:
    35a0:	50 95       	com	r21
    35a2:	40 95       	com	r20
    35a4:	30 95       	com	r19
    35a6:	21 95       	neg	r18
    35a8:	3f 4f       	sbci	r19, 0xFF	; 255
    35aa:	4f 4f       	sbci	r20, 0xFF	; 255
    35ac:	5f 4f       	sbci	r21, 0xFF	; 255

000035ae <__divmodsi4_exit>:
    35ae:	08 95       	ret

000035b0 <__negsi2>:
    35b0:	90 95       	com	r25
    35b2:	80 95       	com	r24
    35b4:	70 95       	com	r23
    35b6:	61 95       	neg	r22
    35b8:	7f 4f       	sbci	r23, 0xFF	; 255
    35ba:	8f 4f       	sbci	r24, 0xFF	; 255
    35bc:	9f 4f       	sbci	r25, 0xFF	; 255
    35be:	08 95       	ret

000035c0 <__mulshisi3>:
    35c0:	b7 ff       	sbrs	r27, 7
    35c2:	0c 94 1f 1b 	jmp	0x363e	; 0x363e <__muluhisi3>

000035c6 <__mulohisi3>:
    35c6:	0e 94 1f 1b 	call	0x363e	; 0x363e <__muluhisi3>
    35ca:	82 1b       	sub	r24, r18
    35cc:	93 0b       	sbc	r25, r19
    35ce:	08 95       	ret

000035d0 <__prologue_saves__>:
    35d0:	2f 92       	push	r2
    35d2:	3f 92       	push	r3
    35d4:	4f 92       	push	r4
    35d6:	5f 92       	push	r5
    35d8:	6f 92       	push	r6
    35da:	7f 92       	push	r7
    35dc:	8f 92       	push	r8
    35de:	9f 92       	push	r9
    35e0:	af 92       	push	r10
    35e2:	bf 92       	push	r11
    35e4:	cf 92       	push	r12
    35e6:	df 92       	push	r13
    35e8:	ef 92       	push	r14
    35ea:	ff 92       	push	r15
    35ec:	0f 93       	push	r16
    35ee:	1f 93       	push	r17
    35f0:	cf 93       	push	r28
    35f2:	df 93       	push	r29
    35f4:	cd b7       	in	r28, 0x3d	; 61
    35f6:	de b7       	in	r29, 0x3e	; 62
    35f8:	ca 1b       	sub	r28, r26
    35fa:	db 0b       	sbc	r29, r27
    35fc:	0f b6       	in	r0, 0x3f	; 63
    35fe:	f8 94       	cli
    3600:	de bf       	out	0x3e, r29	; 62
    3602:	0f be       	out	0x3f, r0	; 63
    3604:	cd bf       	out	0x3d, r28	; 61
    3606:	09 94       	ijmp

00003608 <__epilogue_restores__>:
    3608:	2a 88       	ldd	r2, Y+18	; 0x12
    360a:	39 88       	ldd	r3, Y+17	; 0x11
    360c:	48 88       	ldd	r4, Y+16	; 0x10
    360e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3610:	6e 84       	ldd	r6, Y+14	; 0x0e
    3612:	7d 84       	ldd	r7, Y+13	; 0x0d
    3614:	8c 84       	ldd	r8, Y+12	; 0x0c
    3616:	9b 84       	ldd	r9, Y+11	; 0x0b
    3618:	aa 84       	ldd	r10, Y+10	; 0x0a
    361a:	b9 84       	ldd	r11, Y+9	; 0x09
    361c:	c8 84       	ldd	r12, Y+8	; 0x08
    361e:	df 80       	ldd	r13, Y+7	; 0x07
    3620:	ee 80       	ldd	r14, Y+6	; 0x06
    3622:	fd 80       	ldd	r15, Y+5	; 0x05
    3624:	0c 81       	ldd	r16, Y+4	; 0x04
    3626:	1b 81       	ldd	r17, Y+3	; 0x03
    3628:	aa 81       	ldd	r26, Y+2	; 0x02
    362a:	b9 81       	ldd	r27, Y+1	; 0x01
    362c:	ce 0f       	add	r28, r30
    362e:	d1 1d       	adc	r29, r1
    3630:	0f b6       	in	r0, 0x3f	; 63
    3632:	f8 94       	cli
    3634:	de bf       	out	0x3e, r29	; 62
    3636:	0f be       	out	0x3f, r0	; 63
    3638:	cd bf       	out	0x3d, r28	; 61
    363a:	ed 01       	movw	r28, r26
    363c:	08 95       	ret

0000363e <__muluhisi3>:
    363e:	0e 94 2a 1b 	call	0x3654	; 0x3654 <__umulhisi3>
    3642:	a5 9f       	mul	r26, r21
    3644:	90 0d       	add	r25, r0
    3646:	b4 9f       	mul	r27, r20
    3648:	90 0d       	add	r25, r0
    364a:	a4 9f       	mul	r26, r20
    364c:	80 0d       	add	r24, r0
    364e:	91 1d       	adc	r25, r1
    3650:	11 24       	eor	r1, r1
    3652:	08 95       	ret

00003654 <__umulhisi3>:
    3654:	a2 9f       	mul	r26, r18
    3656:	b0 01       	movw	r22, r0
    3658:	b3 9f       	mul	r27, r19
    365a:	c0 01       	movw	r24, r0
    365c:	a3 9f       	mul	r26, r19
    365e:	70 0d       	add	r23, r0
    3660:	81 1d       	adc	r24, r1
    3662:	11 24       	eor	r1, r1
    3664:	91 1d       	adc	r25, r1
    3666:	b2 9f       	mul	r27, r18
    3668:	70 0d       	add	r23, r0
    366a:	81 1d       	adc	r24, r1
    366c:	11 24       	eor	r1, r1
    366e:	91 1d       	adc	r25, r1
    3670:	08 95       	ret

00003672 <malloc>:
    3672:	cf 93       	push	r28
    3674:	df 93       	push	r29
    3676:	82 30       	cpi	r24, 0x02	; 2
    3678:	91 05       	cpc	r25, r1
    367a:	10 f4       	brcc	.+4      	; 0x3680 <malloc+0xe>
    367c:	82 e0       	ldi	r24, 0x02	; 2
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	e0 91 f8 0a 	lds	r30, 0x0AF8
    3684:	f0 91 f9 0a 	lds	r31, 0x0AF9
    3688:	20 e0       	ldi	r18, 0x00	; 0
    368a:	30 e0       	ldi	r19, 0x00	; 0
    368c:	c0 e0       	ldi	r28, 0x00	; 0
    368e:	d0 e0       	ldi	r29, 0x00	; 0
    3690:	30 97       	sbiw	r30, 0x00	; 0
    3692:	11 f1       	breq	.+68     	; 0x36d8 <malloc+0x66>
    3694:	40 81       	ld	r20, Z
    3696:	51 81       	ldd	r21, Z+1	; 0x01
    3698:	48 17       	cp	r20, r24
    369a:	59 07       	cpc	r21, r25
    369c:	c0 f0       	brcs	.+48     	; 0x36ce <malloc+0x5c>
    369e:	48 17       	cp	r20, r24
    36a0:	59 07       	cpc	r21, r25
    36a2:	61 f4       	brne	.+24     	; 0x36bc <malloc+0x4a>
    36a4:	82 81       	ldd	r24, Z+2	; 0x02
    36a6:	93 81       	ldd	r25, Z+3	; 0x03
    36a8:	20 97       	sbiw	r28, 0x00	; 0
    36aa:	19 f0       	breq	.+6      	; 0x36b2 <malloc+0x40>
    36ac:	9b 83       	std	Y+3, r25	; 0x03
    36ae:	8a 83       	std	Y+2, r24	; 0x02
    36b0:	2b c0       	rjmp	.+86     	; 0x3708 <malloc+0x96>
    36b2:	90 93 f9 0a 	sts	0x0AF9, r25
    36b6:	80 93 f8 0a 	sts	0x0AF8, r24
    36ba:	26 c0       	rjmp	.+76     	; 0x3708 <malloc+0x96>
    36bc:	21 15       	cp	r18, r1
    36be:	31 05       	cpc	r19, r1
    36c0:	19 f0       	breq	.+6      	; 0x36c8 <malloc+0x56>
    36c2:	42 17       	cp	r20, r18
    36c4:	53 07       	cpc	r21, r19
    36c6:	18 f4       	brcc	.+6      	; 0x36ce <malloc+0x5c>
    36c8:	9a 01       	movw	r18, r20
    36ca:	be 01       	movw	r22, r28
    36cc:	df 01       	movw	r26, r30
    36ce:	ef 01       	movw	r28, r30
    36d0:	02 80       	ldd	r0, Z+2	; 0x02
    36d2:	f3 81       	ldd	r31, Z+3	; 0x03
    36d4:	e0 2d       	mov	r30, r0
    36d6:	dc cf       	rjmp	.-72     	; 0x3690 <malloc+0x1e>
    36d8:	21 15       	cp	r18, r1
    36da:	31 05       	cpc	r19, r1
    36dc:	09 f1       	breq	.+66     	; 0x3720 <malloc+0xae>
    36de:	28 1b       	sub	r18, r24
    36e0:	39 0b       	sbc	r19, r25
    36e2:	24 30       	cpi	r18, 0x04	; 4
    36e4:	31 05       	cpc	r19, r1
    36e6:	90 f4       	brcc	.+36     	; 0x370c <malloc+0x9a>
    36e8:	12 96       	adiw	r26, 0x02	; 2
    36ea:	8d 91       	ld	r24, X+
    36ec:	9c 91       	ld	r25, X
    36ee:	13 97       	sbiw	r26, 0x03	; 3
    36f0:	61 15       	cp	r22, r1
    36f2:	71 05       	cpc	r23, r1
    36f4:	21 f0       	breq	.+8      	; 0x36fe <malloc+0x8c>
    36f6:	fb 01       	movw	r30, r22
    36f8:	93 83       	std	Z+3, r25	; 0x03
    36fa:	82 83       	std	Z+2, r24	; 0x02
    36fc:	04 c0       	rjmp	.+8      	; 0x3706 <malloc+0x94>
    36fe:	90 93 f9 0a 	sts	0x0AF9, r25
    3702:	80 93 f8 0a 	sts	0x0AF8, r24
    3706:	fd 01       	movw	r30, r26
    3708:	32 96       	adiw	r30, 0x02	; 2
    370a:	44 c0       	rjmp	.+136    	; 0x3794 <malloc+0x122>
    370c:	fd 01       	movw	r30, r26
    370e:	e2 0f       	add	r30, r18
    3710:	f3 1f       	adc	r31, r19
    3712:	81 93       	st	Z+, r24
    3714:	91 93       	st	Z+, r25
    3716:	22 50       	subi	r18, 0x02	; 2
    3718:	31 09       	sbc	r19, r1
    371a:	2d 93       	st	X+, r18
    371c:	3c 93       	st	X, r19
    371e:	3a c0       	rjmp	.+116    	; 0x3794 <malloc+0x122>
    3720:	20 91 f6 0a 	lds	r18, 0x0AF6
    3724:	30 91 f7 0a 	lds	r19, 0x0AF7
    3728:	23 2b       	or	r18, r19
    372a:	41 f4       	brne	.+16     	; 0x373c <malloc+0xca>
    372c:	20 91 02 02 	lds	r18, 0x0202
    3730:	30 91 03 02 	lds	r19, 0x0203
    3734:	30 93 f7 0a 	sts	0x0AF7, r19
    3738:	20 93 f6 0a 	sts	0x0AF6, r18
    373c:	20 91 00 02 	lds	r18, 0x0200
    3740:	30 91 01 02 	lds	r19, 0x0201
    3744:	21 15       	cp	r18, r1
    3746:	31 05       	cpc	r19, r1
    3748:	41 f4       	brne	.+16     	; 0x375a <malloc+0xe8>
    374a:	2d b7       	in	r18, 0x3d	; 61
    374c:	3e b7       	in	r19, 0x3e	; 62
    374e:	40 91 04 02 	lds	r20, 0x0204
    3752:	50 91 05 02 	lds	r21, 0x0205
    3756:	24 1b       	sub	r18, r20
    3758:	35 0b       	sbc	r19, r21
    375a:	e0 91 f6 0a 	lds	r30, 0x0AF6
    375e:	f0 91 f7 0a 	lds	r31, 0x0AF7
    3762:	e2 17       	cp	r30, r18
    3764:	f3 07       	cpc	r31, r19
    3766:	a0 f4       	brcc	.+40     	; 0x3790 <malloc+0x11e>
    3768:	2e 1b       	sub	r18, r30
    376a:	3f 0b       	sbc	r19, r31
    376c:	28 17       	cp	r18, r24
    376e:	39 07       	cpc	r19, r25
    3770:	78 f0       	brcs	.+30     	; 0x3790 <malloc+0x11e>
    3772:	ac 01       	movw	r20, r24
    3774:	4e 5f       	subi	r20, 0xFE	; 254
    3776:	5f 4f       	sbci	r21, 0xFF	; 255
    3778:	24 17       	cp	r18, r20
    377a:	35 07       	cpc	r19, r21
    377c:	48 f0       	brcs	.+18     	; 0x3790 <malloc+0x11e>
    377e:	4e 0f       	add	r20, r30
    3780:	5f 1f       	adc	r21, r31
    3782:	50 93 f7 0a 	sts	0x0AF7, r21
    3786:	40 93 f6 0a 	sts	0x0AF6, r20
    378a:	81 93       	st	Z+, r24
    378c:	91 93       	st	Z+, r25
    378e:	02 c0       	rjmp	.+4      	; 0x3794 <malloc+0x122>
    3790:	e0 e0       	ldi	r30, 0x00	; 0
    3792:	f0 e0       	ldi	r31, 0x00	; 0
    3794:	cf 01       	movw	r24, r30
    3796:	df 91       	pop	r29
    3798:	cf 91       	pop	r28
    379a:	08 95       	ret

0000379c <free>:
    379c:	0f 93       	push	r16
    379e:	1f 93       	push	r17
    37a0:	cf 93       	push	r28
    37a2:	df 93       	push	r29
    37a4:	00 97       	sbiw	r24, 0x00	; 0
    37a6:	09 f4       	brne	.+2      	; 0x37aa <free+0xe>
    37a8:	8c c0       	rjmp	.+280    	; 0x38c2 <free+0x126>
    37aa:	fc 01       	movw	r30, r24
    37ac:	32 97       	sbiw	r30, 0x02	; 2
    37ae:	13 82       	std	Z+3, r1	; 0x03
    37b0:	12 82       	std	Z+2, r1	; 0x02
    37b2:	00 91 f8 0a 	lds	r16, 0x0AF8
    37b6:	10 91 f9 0a 	lds	r17, 0x0AF9
    37ba:	01 15       	cp	r16, r1
    37bc:	11 05       	cpc	r17, r1
    37be:	81 f4       	brne	.+32     	; 0x37e0 <free+0x44>
    37c0:	20 81       	ld	r18, Z
    37c2:	31 81       	ldd	r19, Z+1	; 0x01
    37c4:	82 0f       	add	r24, r18
    37c6:	93 1f       	adc	r25, r19
    37c8:	20 91 f6 0a 	lds	r18, 0x0AF6
    37cc:	30 91 f7 0a 	lds	r19, 0x0AF7
    37d0:	28 17       	cp	r18, r24
    37d2:	39 07       	cpc	r19, r25
    37d4:	79 f5       	brne	.+94     	; 0x3834 <free+0x98>
    37d6:	f0 93 f7 0a 	sts	0x0AF7, r31
    37da:	e0 93 f6 0a 	sts	0x0AF6, r30
    37de:	71 c0       	rjmp	.+226    	; 0x38c2 <free+0x126>
    37e0:	d8 01       	movw	r26, r16
    37e2:	40 e0       	ldi	r20, 0x00	; 0
    37e4:	50 e0       	ldi	r21, 0x00	; 0
    37e6:	ae 17       	cp	r26, r30
    37e8:	bf 07       	cpc	r27, r31
    37ea:	50 f4       	brcc	.+20     	; 0x3800 <free+0x64>
    37ec:	12 96       	adiw	r26, 0x02	; 2
    37ee:	2d 91       	ld	r18, X+
    37f0:	3c 91       	ld	r19, X
    37f2:	13 97       	sbiw	r26, 0x03	; 3
    37f4:	ad 01       	movw	r20, r26
    37f6:	21 15       	cp	r18, r1
    37f8:	31 05       	cpc	r19, r1
    37fa:	09 f1       	breq	.+66     	; 0x383e <free+0xa2>
    37fc:	d9 01       	movw	r26, r18
    37fe:	f3 cf       	rjmp	.-26     	; 0x37e6 <free+0x4a>
    3800:	9d 01       	movw	r18, r26
    3802:	da 01       	movw	r26, r20
    3804:	33 83       	std	Z+3, r19	; 0x03
    3806:	22 83       	std	Z+2, r18	; 0x02
    3808:	60 81       	ld	r22, Z
    380a:	71 81       	ldd	r23, Z+1	; 0x01
    380c:	86 0f       	add	r24, r22
    380e:	97 1f       	adc	r25, r23
    3810:	82 17       	cp	r24, r18
    3812:	93 07       	cpc	r25, r19
    3814:	69 f4       	brne	.+26     	; 0x3830 <free+0x94>
    3816:	ec 01       	movw	r28, r24
    3818:	28 81       	ld	r18, Y
    381a:	39 81       	ldd	r19, Y+1	; 0x01
    381c:	26 0f       	add	r18, r22
    381e:	37 1f       	adc	r19, r23
    3820:	2e 5f       	subi	r18, 0xFE	; 254
    3822:	3f 4f       	sbci	r19, 0xFF	; 255
    3824:	31 83       	std	Z+1, r19	; 0x01
    3826:	20 83       	st	Z, r18
    3828:	8a 81       	ldd	r24, Y+2	; 0x02
    382a:	9b 81       	ldd	r25, Y+3	; 0x03
    382c:	93 83       	std	Z+3, r25	; 0x03
    382e:	82 83       	std	Z+2, r24	; 0x02
    3830:	45 2b       	or	r20, r21
    3832:	29 f4       	brne	.+10     	; 0x383e <free+0xa2>
    3834:	f0 93 f9 0a 	sts	0x0AF9, r31
    3838:	e0 93 f8 0a 	sts	0x0AF8, r30
    383c:	42 c0       	rjmp	.+132    	; 0x38c2 <free+0x126>
    383e:	13 96       	adiw	r26, 0x03	; 3
    3840:	fc 93       	st	X, r31
    3842:	ee 93       	st	-X, r30
    3844:	12 97       	sbiw	r26, 0x02	; 2
    3846:	ed 01       	movw	r28, r26
    3848:	49 91       	ld	r20, Y+
    384a:	59 91       	ld	r21, Y+
    384c:	9e 01       	movw	r18, r28
    384e:	24 0f       	add	r18, r20
    3850:	35 1f       	adc	r19, r21
    3852:	e2 17       	cp	r30, r18
    3854:	f3 07       	cpc	r31, r19
    3856:	71 f4       	brne	.+28     	; 0x3874 <free+0xd8>
    3858:	80 81       	ld	r24, Z
    385a:	91 81       	ldd	r25, Z+1	; 0x01
    385c:	84 0f       	add	r24, r20
    385e:	95 1f       	adc	r25, r21
    3860:	02 96       	adiw	r24, 0x02	; 2
    3862:	11 96       	adiw	r26, 0x01	; 1
    3864:	9c 93       	st	X, r25
    3866:	8e 93       	st	-X, r24
    3868:	82 81       	ldd	r24, Z+2	; 0x02
    386a:	93 81       	ldd	r25, Z+3	; 0x03
    386c:	13 96       	adiw	r26, 0x03	; 3
    386e:	9c 93       	st	X, r25
    3870:	8e 93       	st	-X, r24
    3872:	12 97       	sbiw	r26, 0x02	; 2
    3874:	e0 e0       	ldi	r30, 0x00	; 0
    3876:	f0 e0       	ldi	r31, 0x00	; 0
    3878:	d8 01       	movw	r26, r16
    387a:	12 96       	adiw	r26, 0x02	; 2
    387c:	8d 91       	ld	r24, X+
    387e:	9c 91       	ld	r25, X
    3880:	13 97       	sbiw	r26, 0x03	; 3
    3882:	00 97       	sbiw	r24, 0x00	; 0
    3884:	19 f0       	breq	.+6      	; 0x388c <free+0xf0>
    3886:	f8 01       	movw	r30, r16
    3888:	8c 01       	movw	r16, r24
    388a:	f6 cf       	rjmp	.-20     	; 0x3878 <free+0xdc>
    388c:	8d 91       	ld	r24, X+
    388e:	9c 91       	ld	r25, X
    3890:	98 01       	movw	r18, r16
    3892:	2e 5f       	subi	r18, 0xFE	; 254
    3894:	3f 4f       	sbci	r19, 0xFF	; 255
    3896:	82 0f       	add	r24, r18
    3898:	93 1f       	adc	r25, r19
    389a:	20 91 f6 0a 	lds	r18, 0x0AF6
    389e:	30 91 f7 0a 	lds	r19, 0x0AF7
    38a2:	28 17       	cp	r18, r24
    38a4:	39 07       	cpc	r19, r25
    38a6:	69 f4       	brne	.+26     	; 0x38c2 <free+0x126>
    38a8:	30 97       	sbiw	r30, 0x00	; 0
    38aa:	29 f4       	brne	.+10     	; 0x38b6 <free+0x11a>
    38ac:	10 92 f9 0a 	sts	0x0AF9, r1
    38b0:	10 92 f8 0a 	sts	0x0AF8, r1
    38b4:	02 c0       	rjmp	.+4      	; 0x38ba <free+0x11e>
    38b6:	13 82       	std	Z+3, r1	; 0x03
    38b8:	12 82       	std	Z+2, r1	; 0x02
    38ba:	10 93 f7 0a 	sts	0x0AF7, r17
    38be:	00 93 f6 0a 	sts	0x0AF6, r16
    38c2:	df 91       	pop	r29
    38c4:	cf 91       	pop	r28
    38c6:	1f 91       	pop	r17
    38c8:	0f 91       	pop	r16
    38ca:	08 95       	ret

000038cc <__ftoa_engine>:
    38cc:	28 30       	cpi	r18, 0x08	; 8
    38ce:	08 f0       	brcs	.+2      	; 0x38d2 <__ftoa_engine+0x6>
    38d0:	27 e0       	ldi	r18, 0x07	; 7
    38d2:	33 27       	eor	r19, r19
    38d4:	da 01       	movw	r26, r20
    38d6:	99 0f       	add	r25, r25
    38d8:	31 1d       	adc	r19, r1
    38da:	87 fd       	sbrc	r24, 7
    38dc:	91 60       	ori	r25, 0x01	; 1
    38de:	00 96       	adiw	r24, 0x00	; 0
    38e0:	61 05       	cpc	r22, r1
    38e2:	71 05       	cpc	r23, r1
    38e4:	39 f4       	brne	.+14     	; 0x38f4 <__ftoa_engine+0x28>
    38e6:	32 60       	ori	r19, 0x02	; 2
    38e8:	2e 5f       	subi	r18, 0xFE	; 254
    38ea:	3d 93       	st	X+, r19
    38ec:	30 e3       	ldi	r19, 0x30	; 48
    38ee:	2a 95       	dec	r18
    38f0:	e1 f7       	brne	.-8      	; 0x38ea <__ftoa_engine+0x1e>
    38f2:	08 95       	ret
    38f4:	9f 3f       	cpi	r25, 0xFF	; 255
    38f6:	30 f0       	brcs	.+12     	; 0x3904 <__ftoa_engine+0x38>
    38f8:	80 38       	cpi	r24, 0x80	; 128
    38fa:	71 05       	cpc	r23, r1
    38fc:	61 05       	cpc	r22, r1
    38fe:	09 f0       	breq	.+2      	; 0x3902 <__ftoa_engine+0x36>
    3900:	3c 5f       	subi	r19, 0xFC	; 252
    3902:	3c 5f       	subi	r19, 0xFC	; 252
    3904:	3d 93       	st	X+, r19
    3906:	91 30       	cpi	r25, 0x01	; 1
    3908:	08 f0       	brcs	.+2      	; 0x390c <__ftoa_engine+0x40>
    390a:	80 68       	ori	r24, 0x80	; 128
    390c:	91 1d       	adc	r25, r1
    390e:	df 93       	push	r29
    3910:	cf 93       	push	r28
    3912:	1f 93       	push	r17
    3914:	0f 93       	push	r16
    3916:	ff 92       	push	r15
    3918:	ef 92       	push	r14
    391a:	19 2f       	mov	r17, r25
    391c:	98 7f       	andi	r25, 0xF8	; 248
    391e:	96 95       	lsr	r25
    3920:	e9 2f       	mov	r30, r25
    3922:	96 95       	lsr	r25
    3924:	96 95       	lsr	r25
    3926:	e9 0f       	add	r30, r25
    3928:	ff 27       	eor	r31, r31
    392a:	ea 56       	subi	r30, 0x6A	; 106
    392c:	fe 4f       	sbci	r31, 0xFE	; 254
    392e:	99 27       	eor	r25, r25
    3930:	33 27       	eor	r19, r19
    3932:	ee 24       	eor	r14, r14
    3934:	ff 24       	eor	r15, r15
    3936:	a7 01       	movw	r20, r14
    3938:	e7 01       	movw	r28, r14
    393a:	05 90       	lpm	r0, Z+
    393c:	08 94       	sec
    393e:	07 94       	ror	r0
    3940:	28 f4       	brcc	.+10     	; 0x394c <__ftoa_engine+0x80>
    3942:	36 0f       	add	r19, r22
    3944:	e7 1e       	adc	r14, r23
    3946:	f8 1e       	adc	r15, r24
    3948:	49 1f       	adc	r20, r25
    394a:	51 1d       	adc	r21, r1
    394c:	66 0f       	add	r22, r22
    394e:	77 1f       	adc	r23, r23
    3950:	88 1f       	adc	r24, r24
    3952:	99 1f       	adc	r25, r25
    3954:	06 94       	lsr	r0
    3956:	a1 f7       	brne	.-24     	; 0x3940 <__ftoa_engine+0x74>
    3958:	05 90       	lpm	r0, Z+
    395a:	07 94       	ror	r0
    395c:	28 f4       	brcc	.+10     	; 0x3968 <__ftoa_engine+0x9c>
    395e:	e7 0e       	add	r14, r23
    3960:	f8 1e       	adc	r15, r24
    3962:	49 1f       	adc	r20, r25
    3964:	56 1f       	adc	r21, r22
    3966:	c1 1d       	adc	r28, r1
    3968:	77 0f       	add	r23, r23
    396a:	88 1f       	adc	r24, r24
    396c:	99 1f       	adc	r25, r25
    396e:	66 1f       	adc	r22, r22
    3970:	06 94       	lsr	r0
    3972:	a1 f7       	brne	.-24     	; 0x395c <__ftoa_engine+0x90>
    3974:	05 90       	lpm	r0, Z+
    3976:	07 94       	ror	r0
    3978:	28 f4       	brcc	.+10     	; 0x3984 <__ftoa_engine+0xb8>
    397a:	f8 0e       	add	r15, r24
    397c:	49 1f       	adc	r20, r25
    397e:	56 1f       	adc	r21, r22
    3980:	c7 1f       	adc	r28, r23
    3982:	d1 1d       	adc	r29, r1
    3984:	88 0f       	add	r24, r24
    3986:	99 1f       	adc	r25, r25
    3988:	66 1f       	adc	r22, r22
    398a:	77 1f       	adc	r23, r23
    398c:	06 94       	lsr	r0
    398e:	a1 f7       	brne	.-24     	; 0x3978 <__ftoa_engine+0xac>
    3990:	05 90       	lpm	r0, Z+
    3992:	07 94       	ror	r0
    3994:	20 f4       	brcc	.+8      	; 0x399e <__ftoa_engine+0xd2>
    3996:	49 0f       	add	r20, r25
    3998:	56 1f       	adc	r21, r22
    399a:	c7 1f       	adc	r28, r23
    399c:	d8 1f       	adc	r29, r24
    399e:	99 0f       	add	r25, r25
    39a0:	66 1f       	adc	r22, r22
    39a2:	77 1f       	adc	r23, r23
    39a4:	88 1f       	adc	r24, r24
    39a6:	06 94       	lsr	r0
    39a8:	a9 f7       	brne	.-22     	; 0x3994 <__ftoa_engine+0xc8>
    39aa:	84 91       	lpm	r24, Z
    39ac:	10 95       	com	r17
    39ae:	17 70       	andi	r17, 0x07	; 7
    39b0:	41 f0       	breq	.+16     	; 0x39c2 <__ftoa_engine+0xf6>
    39b2:	d6 95       	lsr	r29
    39b4:	c7 95       	ror	r28
    39b6:	57 95       	ror	r21
    39b8:	47 95       	ror	r20
    39ba:	f7 94       	ror	r15
    39bc:	e7 94       	ror	r14
    39be:	1a 95       	dec	r17
    39c0:	c1 f7       	brne	.-16     	; 0x39b2 <__ftoa_engine+0xe6>
    39c2:	ec e3       	ldi	r30, 0x3C	; 60
    39c4:	f1 e0       	ldi	r31, 0x01	; 1
    39c6:	68 94       	set
    39c8:	15 90       	lpm	r1, Z+
    39ca:	15 91       	lpm	r17, Z+
    39cc:	35 91       	lpm	r19, Z+
    39ce:	65 91       	lpm	r22, Z+
    39d0:	95 91       	lpm	r25, Z+
    39d2:	05 90       	lpm	r0, Z+
    39d4:	7f e2       	ldi	r23, 0x2F	; 47
    39d6:	73 95       	inc	r23
    39d8:	e1 18       	sub	r14, r1
    39da:	f1 0a       	sbc	r15, r17
    39dc:	43 0b       	sbc	r20, r19
    39de:	56 0b       	sbc	r21, r22
    39e0:	c9 0b       	sbc	r28, r25
    39e2:	d0 09       	sbc	r29, r0
    39e4:	c0 f7       	brcc	.-16     	; 0x39d6 <__ftoa_engine+0x10a>
    39e6:	e1 0c       	add	r14, r1
    39e8:	f1 1e       	adc	r15, r17
    39ea:	43 1f       	adc	r20, r19
    39ec:	56 1f       	adc	r21, r22
    39ee:	c9 1f       	adc	r28, r25
    39f0:	d0 1d       	adc	r29, r0
    39f2:	7e f4       	brtc	.+30     	; 0x3a12 <__ftoa_engine+0x146>
    39f4:	70 33       	cpi	r23, 0x30	; 48
    39f6:	11 f4       	brne	.+4      	; 0x39fc <__ftoa_engine+0x130>
    39f8:	8a 95       	dec	r24
    39fa:	e6 cf       	rjmp	.-52     	; 0x39c8 <__ftoa_engine+0xfc>
    39fc:	e8 94       	clt
    39fe:	01 50       	subi	r16, 0x01	; 1
    3a00:	30 f0       	brcs	.+12     	; 0x3a0e <__ftoa_engine+0x142>
    3a02:	08 0f       	add	r16, r24
    3a04:	0a f4       	brpl	.+2      	; 0x3a08 <__ftoa_engine+0x13c>
    3a06:	00 27       	eor	r16, r16
    3a08:	02 17       	cp	r16, r18
    3a0a:	08 f4       	brcc	.+2      	; 0x3a0e <__ftoa_engine+0x142>
    3a0c:	20 2f       	mov	r18, r16
    3a0e:	23 95       	inc	r18
    3a10:	02 2f       	mov	r16, r18
    3a12:	7a 33       	cpi	r23, 0x3A	; 58
    3a14:	28 f0       	brcs	.+10     	; 0x3a20 <__ftoa_engine+0x154>
    3a16:	79 e3       	ldi	r23, 0x39	; 57
    3a18:	7d 93       	st	X+, r23
    3a1a:	2a 95       	dec	r18
    3a1c:	e9 f7       	brne	.-6      	; 0x3a18 <__ftoa_engine+0x14c>
    3a1e:	10 c0       	rjmp	.+32     	; 0x3a40 <__ftoa_engine+0x174>
    3a20:	7d 93       	st	X+, r23
    3a22:	2a 95       	dec	r18
    3a24:	89 f6       	brne	.-94     	; 0x39c8 <__ftoa_engine+0xfc>
    3a26:	06 94       	lsr	r0
    3a28:	97 95       	ror	r25
    3a2a:	67 95       	ror	r22
    3a2c:	37 95       	ror	r19
    3a2e:	17 95       	ror	r17
    3a30:	17 94       	ror	r1
    3a32:	e1 18       	sub	r14, r1
    3a34:	f1 0a       	sbc	r15, r17
    3a36:	43 0b       	sbc	r20, r19
    3a38:	56 0b       	sbc	r21, r22
    3a3a:	c9 0b       	sbc	r28, r25
    3a3c:	d0 09       	sbc	r29, r0
    3a3e:	98 f0       	brcs	.+38     	; 0x3a66 <__ftoa_engine+0x19a>
    3a40:	23 95       	inc	r18
    3a42:	7e 91       	ld	r23, -X
    3a44:	73 95       	inc	r23
    3a46:	7a 33       	cpi	r23, 0x3A	; 58
    3a48:	08 f0       	brcs	.+2      	; 0x3a4c <__ftoa_engine+0x180>
    3a4a:	70 e3       	ldi	r23, 0x30	; 48
    3a4c:	7c 93       	st	X, r23
    3a4e:	20 13       	cpse	r18, r16
    3a50:	b8 f7       	brcc	.-18     	; 0x3a40 <__ftoa_engine+0x174>
    3a52:	7e 91       	ld	r23, -X
    3a54:	70 61       	ori	r23, 0x10	; 16
    3a56:	7d 93       	st	X+, r23
    3a58:	30 f0       	brcs	.+12     	; 0x3a66 <__ftoa_engine+0x19a>
    3a5a:	83 95       	inc	r24
    3a5c:	71 e3       	ldi	r23, 0x31	; 49
    3a5e:	7d 93       	st	X+, r23
    3a60:	70 e3       	ldi	r23, 0x30	; 48
    3a62:	2a 95       	dec	r18
    3a64:	e1 f7       	brne	.-8      	; 0x3a5e <__ftoa_engine+0x192>
    3a66:	11 24       	eor	r1, r1
    3a68:	ef 90       	pop	r14
    3a6a:	ff 90       	pop	r15
    3a6c:	0f 91       	pop	r16
    3a6e:	1f 91       	pop	r17
    3a70:	cf 91       	pop	r28
    3a72:	df 91       	pop	r29
    3a74:	99 27       	eor	r25, r25
    3a76:	87 fd       	sbrc	r24, 7
    3a78:	90 95       	com	r25
    3a7a:	08 95       	ret

00003a7c <strnlen_P>:
    3a7c:	fc 01       	movw	r30, r24
    3a7e:	05 90       	lpm	r0, Z+
    3a80:	61 50       	subi	r22, 0x01	; 1
    3a82:	70 40       	sbci	r23, 0x00	; 0
    3a84:	01 10       	cpse	r0, r1
    3a86:	d8 f7       	brcc	.-10     	; 0x3a7e <strnlen_P+0x2>
    3a88:	80 95       	com	r24
    3a8a:	90 95       	com	r25
    3a8c:	8e 0f       	add	r24, r30
    3a8e:	9f 1f       	adc	r25, r31
    3a90:	08 95       	ret

00003a92 <strnlen>:
    3a92:	fc 01       	movw	r30, r24
    3a94:	61 50       	subi	r22, 0x01	; 1
    3a96:	70 40       	sbci	r23, 0x00	; 0
    3a98:	01 90       	ld	r0, Z+
    3a9a:	01 10       	cpse	r0, r1
    3a9c:	d8 f7       	brcc	.-10     	; 0x3a94 <strnlen+0x2>
    3a9e:	80 95       	com	r24
    3aa0:	90 95       	com	r25
    3aa2:	8e 0f       	add	r24, r30
    3aa4:	9f 1f       	adc	r25, r31
    3aa6:	08 95       	ret

00003aa8 <fputc>:
    3aa8:	0f 93       	push	r16
    3aaa:	1f 93       	push	r17
    3aac:	cf 93       	push	r28
    3aae:	df 93       	push	r29
    3ab0:	fb 01       	movw	r30, r22
    3ab2:	23 81       	ldd	r18, Z+3	; 0x03
    3ab4:	21 fd       	sbrc	r18, 1
    3ab6:	03 c0       	rjmp	.+6      	; 0x3abe <fputc+0x16>
    3ab8:	8f ef       	ldi	r24, 0xFF	; 255
    3aba:	9f ef       	ldi	r25, 0xFF	; 255
    3abc:	28 c0       	rjmp	.+80     	; 0x3b0e <fputc+0x66>
    3abe:	22 ff       	sbrs	r18, 2
    3ac0:	16 c0       	rjmp	.+44     	; 0x3aee <fputc+0x46>
    3ac2:	46 81       	ldd	r20, Z+6	; 0x06
    3ac4:	57 81       	ldd	r21, Z+7	; 0x07
    3ac6:	24 81       	ldd	r18, Z+4	; 0x04
    3ac8:	35 81       	ldd	r19, Z+5	; 0x05
    3aca:	42 17       	cp	r20, r18
    3acc:	53 07       	cpc	r21, r19
    3ace:	44 f4       	brge	.+16     	; 0x3ae0 <fputc+0x38>
    3ad0:	a0 81       	ld	r26, Z
    3ad2:	b1 81       	ldd	r27, Z+1	; 0x01
    3ad4:	9d 01       	movw	r18, r26
    3ad6:	2f 5f       	subi	r18, 0xFF	; 255
    3ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    3ada:	31 83       	std	Z+1, r19	; 0x01
    3adc:	20 83       	st	Z, r18
    3ade:	8c 93       	st	X, r24
    3ae0:	26 81       	ldd	r18, Z+6	; 0x06
    3ae2:	37 81       	ldd	r19, Z+7	; 0x07
    3ae4:	2f 5f       	subi	r18, 0xFF	; 255
    3ae6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ae8:	37 83       	std	Z+7, r19	; 0x07
    3aea:	26 83       	std	Z+6, r18	; 0x06
    3aec:	10 c0       	rjmp	.+32     	; 0x3b0e <fputc+0x66>
    3aee:	eb 01       	movw	r28, r22
    3af0:	09 2f       	mov	r16, r25
    3af2:	18 2f       	mov	r17, r24
    3af4:	00 84       	ldd	r0, Z+8	; 0x08
    3af6:	f1 85       	ldd	r31, Z+9	; 0x09
    3af8:	e0 2d       	mov	r30, r0
    3afa:	09 95       	icall
    3afc:	89 2b       	or	r24, r25
    3afe:	e1 f6       	brne	.-72     	; 0x3ab8 <fputc+0x10>
    3b00:	8e 81       	ldd	r24, Y+6	; 0x06
    3b02:	9f 81       	ldd	r25, Y+7	; 0x07
    3b04:	01 96       	adiw	r24, 0x01	; 1
    3b06:	9f 83       	std	Y+7, r25	; 0x07
    3b08:	8e 83       	std	Y+6, r24	; 0x06
    3b0a:	81 2f       	mov	r24, r17
    3b0c:	90 2f       	mov	r25, r16
    3b0e:	df 91       	pop	r29
    3b10:	cf 91       	pop	r28
    3b12:	1f 91       	pop	r17
    3b14:	0f 91       	pop	r16
    3b16:	08 95       	ret

00003b18 <printf>:
    3b18:	a0 e0       	ldi	r26, 0x00	; 0
    3b1a:	b0 e0       	ldi	r27, 0x00	; 0
    3b1c:	e2 e9       	ldi	r30, 0x92	; 146
    3b1e:	fd e1       	ldi	r31, 0x1D	; 29
    3b20:	0c 94 f8 1a 	jmp	0x35f0	; 0x35f0 <__prologue_saves__+0x20>
    3b24:	ae 01       	movw	r20, r28
    3b26:	4b 5f       	subi	r20, 0xFB	; 251
    3b28:	5f 4f       	sbci	r21, 0xFF	; 255
    3b2a:	fa 01       	movw	r30, r20
    3b2c:	61 91       	ld	r22, Z+
    3b2e:	71 91       	ld	r23, Z+
    3b30:	af 01       	movw	r20, r30
    3b32:	80 91 fc 0a 	lds	r24, 0x0AFC
    3b36:	90 91 fd 0a 	lds	r25, 0x0AFD
    3b3a:	0e 94 23 17 	call	0x2e46	; 0x2e46 <vfprintf>
    3b3e:	e2 e0       	ldi	r30, 0x02	; 2
    3b40:	0c 94 14 1b 	jmp	0x3628	; 0x3628 <__epilogue_restores__+0x20>

00003b44 <putchar>:
    3b44:	60 91 fc 0a 	lds	r22, 0x0AFC
    3b48:	70 91 fd 0a 	lds	r23, 0x0AFD
    3b4c:	0e 94 54 1d 	call	0x3aa8	; 0x3aa8 <fputc>
    3b50:	08 95       	ret

00003b52 <puts>:
    3b52:	0f 93       	push	r16
    3b54:	1f 93       	push	r17
    3b56:	cf 93       	push	r28
    3b58:	df 93       	push	r29
    3b5a:	e0 91 fc 0a 	lds	r30, 0x0AFC
    3b5e:	f0 91 fd 0a 	lds	r31, 0x0AFD
    3b62:	23 81       	ldd	r18, Z+3	; 0x03
    3b64:	21 ff       	sbrs	r18, 1
    3b66:	1b c0       	rjmp	.+54     	; 0x3b9e <puts+0x4c>
    3b68:	8c 01       	movw	r16, r24
    3b6a:	d0 e0       	ldi	r29, 0x00	; 0
    3b6c:	c0 e0       	ldi	r28, 0x00	; 0
    3b6e:	f8 01       	movw	r30, r16
    3b70:	81 91       	ld	r24, Z+
    3b72:	8f 01       	movw	r16, r30
    3b74:	60 91 fc 0a 	lds	r22, 0x0AFC
    3b78:	70 91 fd 0a 	lds	r23, 0x0AFD
    3b7c:	db 01       	movw	r26, r22
    3b7e:	18 96       	adiw	r26, 0x08	; 8
    3b80:	ed 91       	ld	r30, X+
    3b82:	fc 91       	ld	r31, X
    3b84:	19 97       	sbiw	r26, 0x09	; 9
    3b86:	88 23       	and	r24, r24
    3b88:	31 f0       	breq	.+12     	; 0x3b96 <puts+0x44>
    3b8a:	09 95       	icall
    3b8c:	89 2b       	or	r24, r25
    3b8e:	79 f3       	breq	.-34     	; 0x3b6e <puts+0x1c>
    3b90:	df ef       	ldi	r29, 0xFF	; 255
    3b92:	cf ef       	ldi	r28, 0xFF	; 255
    3b94:	ec cf       	rjmp	.-40     	; 0x3b6e <puts+0x1c>
    3b96:	8a e0       	ldi	r24, 0x0A	; 10
    3b98:	09 95       	icall
    3b9a:	89 2b       	or	r24, r25
    3b9c:	19 f0       	breq	.+6      	; 0x3ba4 <puts+0x52>
    3b9e:	8f ef       	ldi	r24, 0xFF	; 255
    3ba0:	9f ef       	ldi	r25, 0xFF	; 255
    3ba2:	02 c0       	rjmp	.+4      	; 0x3ba8 <puts+0x56>
    3ba4:	8d 2f       	mov	r24, r29
    3ba6:	9c 2f       	mov	r25, r28
    3ba8:	df 91       	pop	r29
    3baa:	cf 91       	pop	r28
    3bac:	1f 91       	pop	r17
    3bae:	0f 91       	pop	r16
    3bb0:	08 95       	ret

00003bb2 <__ultoa_invert>:
    3bb2:	fa 01       	movw	r30, r20
    3bb4:	aa 27       	eor	r26, r26
    3bb6:	28 30       	cpi	r18, 0x08	; 8
    3bb8:	51 f1       	breq	.+84     	; 0x3c0e <__ultoa_invert+0x5c>
    3bba:	20 31       	cpi	r18, 0x10	; 16
    3bbc:	81 f1       	breq	.+96     	; 0x3c1e <__ultoa_invert+0x6c>
    3bbe:	e8 94       	clt
    3bc0:	6f 93       	push	r22
    3bc2:	6e 7f       	andi	r22, 0xFE	; 254
    3bc4:	6e 5f       	subi	r22, 0xFE	; 254
    3bc6:	7f 4f       	sbci	r23, 0xFF	; 255
    3bc8:	8f 4f       	sbci	r24, 0xFF	; 255
    3bca:	9f 4f       	sbci	r25, 0xFF	; 255
    3bcc:	af 4f       	sbci	r26, 0xFF	; 255
    3bce:	b1 e0       	ldi	r27, 0x01	; 1
    3bd0:	3e d0       	rcall	.+124    	; 0x3c4e <__ultoa_invert+0x9c>
    3bd2:	b4 e0       	ldi	r27, 0x04	; 4
    3bd4:	3c d0       	rcall	.+120    	; 0x3c4e <__ultoa_invert+0x9c>
    3bd6:	67 0f       	add	r22, r23
    3bd8:	78 1f       	adc	r23, r24
    3bda:	89 1f       	adc	r24, r25
    3bdc:	9a 1f       	adc	r25, r26
    3bde:	a1 1d       	adc	r26, r1
    3be0:	68 0f       	add	r22, r24
    3be2:	79 1f       	adc	r23, r25
    3be4:	8a 1f       	adc	r24, r26
    3be6:	91 1d       	adc	r25, r1
    3be8:	a1 1d       	adc	r26, r1
    3bea:	6a 0f       	add	r22, r26
    3bec:	71 1d       	adc	r23, r1
    3bee:	81 1d       	adc	r24, r1
    3bf0:	91 1d       	adc	r25, r1
    3bf2:	a1 1d       	adc	r26, r1
    3bf4:	20 d0       	rcall	.+64     	; 0x3c36 <__ultoa_invert+0x84>
    3bf6:	09 f4       	brne	.+2      	; 0x3bfa <__ultoa_invert+0x48>
    3bf8:	68 94       	set
    3bfa:	3f 91       	pop	r19
    3bfc:	2a e0       	ldi	r18, 0x0A	; 10
    3bfe:	26 9f       	mul	r18, r22
    3c00:	11 24       	eor	r1, r1
    3c02:	30 19       	sub	r19, r0
    3c04:	30 5d       	subi	r19, 0xD0	; 208
    3c06:	31 93       	st	Z+, r19
    3c08:	de f6       	brtc	.-74     	; 0x3bc0 <__ultoa_invert+0xe>
    3c0a:	cf 01       	movw	r24, r30
    3c0c:	08 95       	ret
    3c0e:	46 2f       	mov	r20, r22
    3c10:	47 70       	andi	r20, 0x07	; 7
    3c12:	40 5d       	subi	r20, 0xD0	; 208
    3c14:	41 93       	st	Z+, r20
    3c16:	b3 e0       	ldi	r27, 0x03	; 3
    3c18:	0f d0       	rcall	.+30     	; 0x3c38 <__ultoa_invert+0x86>
    3c1a:	c9 f7       	brne	.-14     	; 0x3c0e <__ultoa_invert+0x5c>
    3c1c:	f6 cf       	rjmp	.-20     	; 0x3c0a <__ultoa_invert+0x58>
    3c1e:	46 2f       	mov	r20, r22
    3c20:	4f 70       	andi	r20, 0x0F	; 15
    3c22:	40 5d       	subi	r20, 0xD0	; 208
    3c24:	4a 33       	cpi	r20, 0x3A	; 58
    3c26:	18 f0       	brcs	.+6      	; 0x3c2e <__ultoa_invert+0x7c>
    3c28:	49 5d       	subi	r20, 0xD9	; 217
    3c2a:	31 fd       	sbrc	r19, 1
    3c2c:	40 52       	subi	r20, 0x20	; 32
    3c2e:	41 93       	st	Z+, r20
    3c30:	02 d0       	rcall	.+4      	; 0x3c36 <__ultoa_invert+0x84>
    3c32:	a9 f7       	brne	.-22     	; 0x3c1e <__ultoa_invert+0x6c>
    3c34:	ea cf       	rjmp	.-44     	; 0x3c0a <__ultoa_invert+0x58>
    3c36:	b4 e0       	ldi	r27, 0x04	; 4
    3c38:	a6 95       	lsr	r26
    3c3a:	97 95       	ror	r25
    3c3c:	87 95       	ror	r24
    3c3e:	77 95       	ror	r23
    3c40:	67 95       	ror	r22
    3c42:	ba 95       	dec	r27
    3c44:	c9 f7       	brne	.-14     	; 0x3c38 <__ultoa_invert+0x86>
    3c46:	00 97       	sbiw	r24, 0x00	; 0
    3c48:	61 05       	cpc	r22, r1
    3c4a:	71 05       	cpc	r23, r1
    3c4c:	08 95       	ret
    3c4e:	9b 01       	movw	r18, r22
    3c50:	ac 01       	movw	r20, r24
    3c52:	0a 2e       	mov	r0, r26
    3c54:	06 94       	lsr	r0
    3c56:	57 95       	ror	r21
    3c58:	47 95       	ror	r20
    3c5a:	37 95       	ror	r19
    3c5c:	27 95       	ror	r18
    3c5e:	ba 95       	dec	r27
    3c60:	c9 f7       	brne	.-14     	; 0x3c54 <__ultoa_invert+0xa2>
    3c62:	62 0f       	add	r22, r18
    3c64:	73 1f       	adc	r23, r19
    3c66:	84 1f       	adc	r24, r20
    3c68:	95 1f       	adc	r25, r21
    3c6a:	a0 1d       	adc	r26, r0
    3c6c:	08 95       	ret

00003c6e <_exit>:
    3c6e:	f8 94       	cli

00003c70 <__stop_program>:
    3c70:	ff cf       	rjmp	.-2      	; 0x3c70 <__stop_program>
