
ATMOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000656  00800200  00006b7a  00006c0e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006b7a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005b1  00800856  00800856  00007264  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00007264  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  000072c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000009e0  00000000  00000000  00007304  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000dd29  00000000  00000000  00007ce4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000039d4  00000000  00000000  00015a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000065a5  00000000  00000000  000193e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001f90  00000000  00000000  0001f988  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000370f  00000000  00000000  00021918  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00007f38  00000000  00000000  00025027  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000930  00000000  00000000  0002cf5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	21 c1       	rjmp	.+578    	; 0x244 <__ctors_end>
       2:	00 00       	nop
       4:	3f c1       	rjmp	.+638    	; 0x284 <__bad_interrupt>
       6:	00 00       	nop
       8:	3d c1       	rjmp	.+634    	; 0x284 <__bad_interrupt>
       a:	00 00       	nop
       c:	3b c1       	rjmp	.+630    	; 0x284 <__bad_interrupt>
       e:	00 00       	nop
      10:	39 c1       	rjmp	.+626    	; 0x284 <__bad_interrupt>
      12:	00 00       	nop
      14:	37 c1       	rjmp	.+622    	; 0x284 <__bad_interrupt>
      16:	00 00       	nop
      18:	35 c1       	rjmp	.+618    	; 0x284 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	33 c1       	rjmp	.+614    	; 0x284 <__bad_interrupt>
      1e:	00 00       	nop
      20:	31 c1       	rjmp	.+610    	; 0x284 <__bad_interrupt>
      22:	00 00       	nop
      24:	2f c1       	rjmp	.+606    	; 0x284 <__bad_interrupt>
      26:	00 00       	nop
      28:	2d c1       	rjmp	.+602    	; 0x284 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2b c1       	rjmp	.+598    	; 0x284 <__bad_interrupt>
      2e:	00 00       	nop
      30:	29 c1       	rjmp	.+594    	; 0x284 <__bad_interrupt>
      32:	00 00       	nop
      34:	27 c1       	rjmp	.+590    	; 0x284 <__bad_interrupt>
      36:	00 00       	nop
      38:	25 c1       	rjmp	.+586    	; 0x284 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 99 16 	jmp	0x2d32	; 0x2d32 <__vector_15>
      40:	21 c1       	rjmp	.+578    	; 0x284 <__bad_interrupt>
      42:	00 00       	nop
      44:	1f c1       	rjmp	.+574    	; 0x284 <__bad_interrupt>
      46:	00 00       	nop
      48:	1d c1       	rjmp	.+570    	; 0x284 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1b c1       	rjmp	.+566    	; 0x284 <__bad_interrupt>
      4e:	00 00       	nop
      50:	19 c1       	rjmp	.+562    	; 0x284 <__bad_interrupt>
      52:	00 00       	nop
      54:	17 c1       	rjmp	.+558    	; 0x284 <__bad_interrupt>
      56:	00 00       	nop
      58:	15 c1       	rjmp	.+554    	; 0x284 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	13 c1       	rjmp	.+550    	; 0x284 <__bad_interrupt>
      5e:	00 00       	nop
      60:	11 c1       	rjmp	.+546    	; 0x284 <__bad_interrupt>
      62:	00 00       	nop
      64:	0f c1       	rjmp	.+542    	; 0x284 <__bad_interrupt>
      66:	00 00       	nop
      68:	0d c1       	rjmp	.+538    	; 0x284 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0b c1       	rjmp	.+534    	; 0x284 <__bad_interrupt>
      6e:	00 00       	nop
      70:	09 c1       	rjmp	.+530    	; 0x284 <__bad_interrupt>
      72:	00 00       	nop
      74:	07 c1       	rjmp	.+526    	; 0x284 <__bad_interrupt>
      76:	00 00       	nop
      78:	05 c1       	rjmp	.+522    	; 0x284 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	03 c1       	rjmp	.+518    	; 0x284 <__bad_interrupt>
      7e:	00 00       	nop
      80:	01 c1       	rjmp	.+514    	; 0x284 <__bad_interrupt>
      82:	00 00       	nop
      84:	ff c0       	rjmp	.+510    	; 0x284 <__bad_interrupt>
      86:	00 00       	nop
      88:	fd c0       	rjmp	.+506    	; 0x284 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fb c0       	rjmp	.+502    	; 0x284 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f9 c0       	rjmp	.+498    	; 0x284 <__bad_interrupt>
      92:	00 00       	nop
      94:	f7 c0       	rjmp	.+494    	; 0x284 <__bad_interrupt>
      96:	00 00       	nop
      98:	f5 c0       	rjmp	.+490    	; 0x284 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f3 c0       	rjmp	.+486    	; 0x284 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f1 c0       	rjmp	.+482    	; 0x284 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ef c0       	rjmp	.+478    	; 0x284 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 39 1a 	jmp	0x3472	; 0x3472 <__vector_42>
      ac:	eb c0       	rjmp	.+470    	; 0x284 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e9 c0       	rjmp	.+466    	; 0x284 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e7 c0       	rjmp	.+462    	; 0x284 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e5 c0       	rjmp	.+458    	; 0x284 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e3 c0       	rjmp	.+454    	; 0x284 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e1 c0       	rjmp	.+450    	; 0x284 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	df c0       	rjmp	.+446    	; 0x284 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	dd c0       	rjmp	.+442    	; 0x284 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	db c0       	rjmp	.+438    	; 0x284 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d9 c0       	rjmp	.+434    	; 0x284 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d7 c0       	rjmp	.+430    	; 0x284 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d5 c0       	rjmp	.+426    	; 0x284 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d3 c0       	rjmp	.+422    	; 0x284 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d1 c0       	rjmp	.+418    	; 0x284 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	cf c0       	rjmp	.+414    	; 0x284 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	cd c0       	rjmp	.+410    	; 0x284 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	cb c0       	rjmp	.+406    	; 0x284 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c9 c0       	rjmp	.+402    	; 0x284 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	c7 c0       	rjmp	.+398    	; 0x284 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	c5 c0       	rjmp	.+394    	; 0x284 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	c3 c0       	rjmp	.+390    	; 0x284 <__bad_interrupt>
      fe:	00 00       	nop
     100:	c1 c0       	rjmp	.+386    	; 0x284 <__bad_interrupt>
     102:	00 00       	nop
     104:	bf c0       	rjmp	.+382    	; 0x284 <__bad_interrupt>
     106:	00 00       	nop
     108:	bd c0       	rjmp	.+378    	; 0x284 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	bb c0       	rjmp	.+374    	; 0x284 <__bad_interrupt>
     10e:	00 00       	nop
     110:	b9 c0       	rjmp	.+370    	; 0x284 <__bad_interrupt>
     112:	00 00       	nop
     114:	b7 c0       	rjmp	.+366    	; 0x284 <__bad_interrupt>
     116:	00 00       	nop
     118:	b5 c0       	rjmp	.+362    	; 0x284 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	b3 c0       	rjmp	.+358    	; 0x284 <__bad_interrupt>
     11e:	00 00       	nop
     120:	b1 c0       	rjmp	.+354    	; 0x284 <__bad_interrupt>
     122:	00 00       	nop
     124:	af c0       	rjmp	.+350    	; 0x284 <__bad_interrupt>
     126:	00 00       	nop
     128:	ad c0       	rjmp	.+346    	; 0x284 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	ab c0       	rjmp	.+342    	; 0x284 <__bad_interrupt>
     12e:	00 00       	nop
     130:	a9 c0       	rjmp	.+338    	; 0x284 <__bad_interrupt>
     132:	00 00       	nop
     134:	01 10       	cpse	r0, r1
     136:	ed 0f       	add	r30, r29
     138:	f2 0f       	add	r31, r18
     13a:	ed 0f       	add	r30, r29
     13c:	f7 0f       	add	r31, r23
     13e:	ed 0f       	add	r30, r29
     140:	fc 0f       	add	r31, r28

00000142 <__trampolines_end>:
     142:	6e 61       	ori	r22, 0x1E	; 30
     144:	6e 00       	.word	0x006e	; ????

00000146 <__c.2177>:
     146:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     156:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     166:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     176:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     186:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     196:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1a6:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1b6:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1c6:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1d6:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1e6:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1f6:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     206:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     216:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     226:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     236:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000244 <__ctors_end>:
     244:	11 24       	eor	r1, r1
     246:	1f be       	out	0x3f, r1	; 63
     248:	cf ef       	ldi	r28, 0xFF	; 255
     24a:	d1 e8       	ldi	r29, 0x81	; 129
     24c:	de bf       	out	0x3e, r29	; 62
     24e:	cd bf       	out	0x3d, r28	; 61
     250:	00 e0       	ldi	r16, 0x00	; 0
     252:	0c bf       	out	0x3c, r16	; 60

00000254 <__do_copy_data>:
     254:	18 e0       	ldi	r17, 0x08	; 8
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b2 e0       	ldi	r27, 0x02	; 2
     25a:	ea e7       	ldi	r30, 0x7A	; 122
     25c:	fb e6       	ldi	r31, 0x6B	; 107
     25e:	00 e0       	ldi	r16, 0x00	; 0
     260:	0b bf       	out	0x3b, r16	; 59
     262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x14>
     264:	07 90       	elpm	r0, Z+
     266:	0d 92       	st	X+, r0
     268:	a6 35       	cpi	r26, 0x56	; 86
     26a:	b1 07       	cpc	r27, r17
     26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0x10>

0000026e <__do_clear_bss>:
     26e:	2e e0       	ldi	r18, 0x0E	; 14
     270:	a6 e5       	ldi	r26, 0x56	; 86
     272:	b8 e0       	ldi	r27, 0x08	; 8
     274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
     276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
     278:	a7 30       	cpi	r26, 0x07	; 7
     27a:	b2 07       	cpc	r27, r18
     27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
     27e:	94 d0       	rcall	.+296    	; 0x3a8 <main>
     280:	0c 94 bb 35 	jmp	0x6b76	; 0x6b76 <_exit>

00000284 <__bad_interrupt>:
     284:	bd ce       	rjmp	.-646    	; 0x0 <__vectors>

00000286 <init_parameter>:
	/* if there are some other parameters other than devices' and sensors', update them below as well */
}

/* init all devices' parameters */
void init_parameter(GlobalParameter * globalPara)
{
     286:	af 92       	push	r10
     288:	bf 92       	push	r11
     28a:	cf 92       	push	r12
     28c:	df 92       	push	r13
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	5c 01       	movw	r10, r24
     29c:	a6 e3       	ldi	r26, 0x36	; 54
     29e:	b2 e0       	ldi	r27, 0x02	; 2
     2a0:	fc 01       	movw	r30, r24
     2a2:	b0 96       	adiw	r30, 0x20	; 32
     2a4:	2a e2       	ldi	r18, 0x2A	; 42
     2a6:	32 e0       	ldi	r19, 0x02	; 2
     2a8:	8e e1       	ldi	r24, 0x1E	; 30
     2aa:	92 e0       	ldi	r25, 0x02	; 2
     2ac:	02 e4       	ldi	r16, 0x42	; 66
     2ae:	12 e0       	ldi	r17, 0x02	; 2
	/* init all sensors' parameters */
	for( int i = 0 ; i < SensorListEnd ; ++i )
	{
		//printf("%d\t%d\t%d\t%d\n",SensorInitStartTimeList[i],SENSOR_INIT_PERIOD,SensorCheckCodeList[i],SensorNumDataList[i]);
		globalPara->SensorList[i].StartTime = SensorInitStartTimeList[i];
		globalPara->SensorList[i].ExecutePeriod = SENSOR_INIT_PERIOD;
     2b0:	0f 2e       	mov	r0, r31
     2b2:	f0 ee       	ldi	r31, 0xE0	; 224
     2b4:	cf 2e       	mov	r12, r31
     2b6:	fe e2       	ldi	r31, 0x2E	; 46
     2b8:	df 2e       	mov	r13, r31
     2ba:	e1 2c       	mov	r14, r1
     2bc:	f1 2c       	mov	r15, r1
     2be:	f0 2d       	mov	r31, r0
{
	/* init all sensors' parameters */
	for( int i = 0 ; i < SensorListEnd ; ++i )
	{
		//printf("%d\t%d\t%d\t%d\n",SensorInitStartTimeList[i],SENSOR_INIT_PERIOD,SensorCheckCodeList[i],SensorNumDataList[i]);
		globalPara->SensorList[i].StartTime = SensorInitStartTimeList[i];
     2c0:	4d 91       	ld	r20, X+
     2c2:	5d 91       	ld	r21, X+
     2c4:	6d 91       	ld	r22, X+
     2c6:	7d 91       	ld	r23, X+
     2c8:	40 83       	st	Z, r20
     2ca:	51 83       	std	Z+1, r21	; 0x01
     2cc:	62 83       	std	Z+2, r22	; 0x02
     2ce:	73 83       	std	Z+3, r23	; 0x03
		globalPara->SensorList[i].ExecutePeriod = SENSOR_INIT_PERIOD;
     2d0:	c4 82       	std	Z+4, r12	; 0x04
     2d2:	d5 82       	std	Z+5, r13	; 0x05
     2d4:	e6 82       	std	Z+6, r14	; 0x06
     2d6:	f7 82       	std	Z+7, r15	; 0x07
		globalPara->SensorList[i].CheckCode = SensorCheckCodeList[i];
     2d8:	e9 01       	movw	r28, r18
     2da:	49 91       	ld	r20, Y+
     2dc:	59 91       	ld	r21, Y+
     2de:	69 91       	ld	r22, Y+
     2e0:	79 91       	ld	r23, Y+
     2e2:	9e 01       	movw	r18, r28
     2e4:	44 87       	std	Z+12, r20	; 0x0c
     2e6:	55 87       	std	Z+13, r21	; 0x0d
     2e8:	66 87       	std	Z+14, r22	; 0x0e
     2ea:	77 87       	std	Z+15, r23	; 0x0f
		globalPara->SensorList[i].NumOfData = SensorNumDataList[i];
     2ec:	ec 01       	movw	r28, r24
     2ee:	49 91       	ld	r20, Y+
     2f0:	59 91       	ld	r21, Y+
     2f2:	69 91       	ld	r22, Y+
     2f4:	79 91       	ld	r23, Y+
     2f6:	ce 01       	movw	r24, r28
     2f8:	40 87       	std	Z+8, r20	; 0x08
     2fa:	51 87       	std	Z+9, r21	; 0x09
     2fc:	62 87       	std	Z+10, r22	; 0x0a
     2fe:	73 87       	std	Z+11, r23	; 0x0b
     300:	70 96       	adiw	r30, 0x10	; 16

/* init all devices' parameters */
void init_parameter(GlobalParameter * globalPara)
{
	/* init all sensors' parameters */
	for( int i = 0 ; i < SensorListEnd ; ++i )
     302:	a0 17       	cp	r26, r16
     304:	b1 07       	cpc	r27, r17
     306:	e1 f6       	brne	.-72     	; 0x2c0 <init_parameter+0x3a>
	
	/* init all devices' parameters */
	for( int i = 0 ; i < DeviceListEnd ; ++i )
	{
		//printf("%d\t%d\t%d\t%d\n",DeviceInitStartTimeList[i],DeviceInitPeriodList[i],DeviceCheckCodeList[i],0);
		globalPara->DeviceList[i].StartTime = DeviceInitStartTimeList[i];
     308:	8e e0       	ldi	r24, 0x0E	; 14
     30a:	92 e0       	ldi	r25, 0x02	; 2
     30c:	fc 01       	movw	r30, r24
     30e:	40 81       	ld	r20, Z
     310:	51 81       	ldd	r21, Z+1	; 0x01
     312:	62 81       	ldd	r22, Z+2	; 0x02
     314:	73 81       	ldd	r23, Z+3	; 0x03
     316:	e5 01       	movw	r28, r10
     318:	48 83       	st	Y, r20
     31a:	59 83       	std	Y+1, r21	; 0x01
     31c:	6a 83       	std	Y+2, r22	; 0x02
     31e:	7b 83       	std	Y+3, r23	; 0x03
		globalPara->DeviceList[i].ExecutePeriod = DeviceInitPeriodList[i];
     320:	a6 e1       	ldi	r26, 0x16	; 22
     322:	b2 e0       	ldi	r27, 0x02	; 2
     324:	4d 91       	ld	r20, X+
     326:	5d 91       	ld	r21, X+
     328:	6d 91       	ld	r22, X+
     32a:	7c 91       	ld	r23, X
     32c:	13 97       	sbiw	r26, 0x03	; 3
     32e:	4c 83       	std	Y+4, r20	; 0x04
     330:	5d 83       	std	Y+5, r21	; 0x05
     332:	6e 83       	std	Y+6, r22	; 0x06
     334:	7f 83       	std	Y+7, r23	; 0x07
		globalPara->DeviceList[i].CheckCode = DeviceCheckCodeList[i]; 
     336:	e6 e0       	ldi	r30, 0x06	; 6
     338:	f2 e0       	ldi	r31, 0x02	; 2
     33a:	40 81       	ld	r20, Z
     33c:	51 81       	ldd	r21, Z+1	; 0x01
     33e:	62 81       	ldd	r22, Z+2	; 0x02
     340:	73 81       	ldd	r23, Z+3	; 0x03
     342:	4c 87       	std	Y+12, r20	; 0x0c
     344:	5d 87       	std	Y+13, r21	; 0x0d
     346:	6e 87       	std	Y+14, r22	; 0x0e
     348:	7f 87       	std	Y+15, r23	; 0x0f
		globalPara->DeviceList[i].NumOfData = 0;
     34a:	18 86       	std	Y+8, r1	; 0x08
     34c:	19 86       	std	Y+9, r1	; 0x09
     34e:	1a 86       	std	Y+10, r1	; 0x0a
     350:	1b 86       	std	Y+11, r1	; 0x0b
	
	/* init all devices' parameters */
	for( int i = 0 ; i < DeviceListEnd ; ++i )
	{
		//printf("%d\t%d\t%d\t%d\n",DeviceInitStartTimeList[i],DeviceInitPeriodList[i],DeviceCheckCodeList[i],0);
		globalPara->DeviceList[i].StartTime = DeviceInitStartTimeList[i];
     352:	ec 01       	movw	r28, r24
     354:	4c 81       	ldd	r20, Y+4	; 0x04
     356:	5d 81       	ldd	r21, Y+5	; 0x05
     358:	6e 81       	ldd	r22, Y+6	; 0x06
     35a:	7f 81       	ldd	r23, Y+7	; 0x07
     35c:	e5 01       	movw	r28, r10
     35e:	48 8b       	std	Y+16, r20	; 0x10
     360:	59 8b       	std	Y+17, r21	; 0x11
     362:	6a 8b       	std	Y+18, r22	; 0x12
     364:	7b 8b       	std	Y+19, r23	; 0x13
		globalPara->DeviceList[i].ExecutePeriod = DeviceInitPeriodList[i];
     366:	14 96       	adiw	r26, 0x04	; 4
     368:	8d 91       	ld	r24, X+
     36a:	9d 91       	ld	r25, X+
     36c:	0d 90       	ld	r0, X+
     36e:	bc 91       	ld	r27, X
     370:	a0 2d       	mov	r26, r0
     372:	8c 8b       	std	Y+20, r24	; 0x14
     374:	9d 8b       	std	Y+21, r25	; 0x15
     376:	ae 8b       	std	Y+22, r26	; 0x16
     378:	bf 8b       	std	Y+23, r27	; 0x17
		globalPara->DeviceList[i].CheckCode = DeviceCheckCodeList[i]; 
     37a:	84 81       	ldd	r24, Z+4	; 0x04
     37c:	95 81       	ldd	r25, Z+5	; 0x05
     37e:	a6 81       	ldd	r26, Z+6	; 0x06
     380:	b7 81       	ldd	r27, Z+7	; 0x07
     382:	8c 8f       	std	Y+28, r24	; 0x1c
     384:	9d 8f       	std	Y+29, r25	; 0x1d
     386:	ae 8f       	std	Y+30, r26	; 0x1e
     388:	bf 8f       	std	Y+31, r27	; 0x1f
		globalPara->DeviceList[i].NumOfData = 0;
     38a:	18 8e       	std	Y+24, r1	; 0x18
     38c:	19 8e       	std	Y+25, r1	; 0x19
     38e:	1a 8e       	std	Y+26, r1	; 0x1a
     390:	1b 8e       	std	Y+27, r1	; 0x1b
	}
}
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	ff 90       	pop	r15
     39c:	ef 90       	pop	r14
     39e:	df 90       	pop	r13
     3a0:	cf 90       	pop	r12
     3a2:	bf 90       	pop	r11
     3a4:	af 90       	pop	r10
     3a6:	08 95       	ret

000003a8 <main>:
	load_new_device( GP.DeviceList[DemoStorage].StartTime, GP.DeviceList[DemoStorage].ExecutePeriod, (BaseDevice *)Strg_ptr, 0 );
	// load_new_sensor( 4, 4, (BaseSensor *)Si7020_ptr, 0 );	
}

int main(void)
{
     3a8:	6f 92       	push	r6
     3aa:	7f 92       	push	r7
     3ac:	8f 92       	push	r8
     3ae:	9f 92       	push	r9
     3b0:	af 92       	push	r10
     3b2:	bf 92       	push	r11
     3b4:	cf 92       	push	r12
     3b6:	df 92       	push	r13
     3b8:	ef 92       	push	r14
     3ba:	ff 92       	push	r15
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
     3c8:	c8 5a       	subi	r28, 0xA8	; 168
     3ca:	d1 09       	sbc	r29, r1
     3cc:	0f b6       	in	r0, 0x3f	; 63
     3ce:	f8 94       	cli
     3d0:	de bf       	out	0x3e, r29	; 62
     3d2:	0f be       	out	0x3f, r0	; 63
     3d4:	cd bf       	out	0x3d, r28	; 61
	SYS_Init();
     3d6:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <SYS_Init>
tm cur_time;
GlobalParameter GP;

/* TODO : clean up these messy init */
static void APP_Init(void){
	PWR_Init();
     3da:	0e 94 10 18 	call	0x3020	; 0x3020 <PWR_Init>
	PWR_TurnOn5V();
     3de:	0e 94 14 18 	call	0x3028	; 0x3028 <PWR_TurnOn5V>
	USART0_Init(9600);
     3e2:	60 e8       	ldi	r22, 0x80	; 128
     3e4:	75 e2       	ldi	r23, 0x25	; 37
     3e6:	80 e0       	ldi	r24, 0x00	; 0
     3e8:	90 e0       	ldi	r25, 0x00	; 0
     3ea:	0e 94 cf 19 	call	0x339e	; 0x339e <USART0_Init>
	DDRB |= 0b00010000;
     3ee:	24 9a       	sbi	0x04, 4	; 4
	DDRE |= 0b00001000;
     3f0:	6b 9a       	sbi	0x0d, 3	; 13
	PORTE|= 0b00001000;
     3f2:	73 9a       	sbi	0x0e, 3	; 14
	TWI_Init(10000);
     3f4:	60 e1       	ldi	r22, 0x10	; 16
     3f6:	77 e2       	ldi	r23, 0x27	; 39
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 f8 18 	call	0x31f0	; 0x31f0 <TWI_Init>
	ADC_Init();
     400:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <ADC_Init>
	printf("BMP280 Status %i\n", BMP280_Init());
     404:	0e 94 a3 22 	call	0x4546	; 0x4546 <BMP280_Init>
     408:	9f 93       	push	r25
     40a:	8f 93       	push	r24
     40c:	86 ea       	ldi	r24, 0xA6	; 166
     40e:	92 e0       	ldi	r25, 0x02	; 2
     410:	9f 93       	push	r25
     412:	8f 93       	push	r24
     414:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
	BMP280_SetOversampling(4);
     418:	84 e0       	ldi	r24, 0x04	; 4
     41a:	90 e0       	ldi	r25, 0x00	; 0
     41c:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <BMP280_SetOversampling>
	//SPI_SlaveInit();
	SensorDataCount = 0;
     420:	10 92 7b 0d 	sts	0x0D7B, r1
     424:	10 92 7a 0d 	sts	0x0D7A, r1
}

static void DEVICE_Init(void){
	
	init_parameter(&GP);
     428:	8c e7       	ldi	r24, 0x7C	; 124
     42a:	9d e0       	ldi	r25, 0x0D	; 13
     42c:	2c df       	rcall	.-424    	; 0x286 <init_parameter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     42e:	8f e8       	ldi	r24, 0x8F	; 143
     430:	91 e0       	ldi	r25, 0x01	; 1
     432:	01 97       	sbiw	r24, 0x01	; 1
     434:	f1 f7       	brne	.-4      	; 0x432 <main+0x8a>
     436:	00 c0       	rjmp	.+0      	; 0x438 <main+0x90>
     438:	00 00       	nop
	delay_us(100);
		
	init_timeoutq();
     43a:	0e 94 82 1c 	call	0x3904	; 0x3904 <init_timeoutq>
     43e:	ef e8       	ldi	r30, 0x8F	; 143
     440:	f1 e0       	ldi	r31, 0x01	; 1
     442:	31 97       	sbiw	r30, 0x01	; 1
     444:	f1 f7       	brne	.-4      	; 0x442 <main+0x9a>
     446:	00 c0       	rjmp	.+0      	; 0x448 <main+0xa0>
     448:	00 00       	nop
	delay_us(100);
	
	init_timestamp(&cur_time);
     44a:	8c e9       	ldi	r24, 0x9C	; 156
     44c:	9b e0       	ldi	r25, 0x0B	; 11
     44e:	0e 94 14 21 	call	0x4228	; 0x4228 <init_timestamp>
     452:	8f e8       	ldi	r24, 0x8F	; 143
     454:	91 e0       	ldi	r25, 0x01	; 1
     456:	01 97       	sbiw	r24, 0x01	; 1
     458:	f1 f7       	brne	.-4      	; 0x456 <main+0xae>
     45a:	00 c0       	rjmp	.+0      	; 0x45c <main+0xb4>
     45c:	00 00       	nop
	delay_us(100);
	
	BMP280Sensor *BMP280_ptr = New_BMP280_Sensor( 0,2 /* GP.SensorList[i].NumOfData */ );
     45e:	62 e0       	ldi	r22, 0x02	; 2
     460:	70 e0       	ldi	r23, 0x00	; 0
     462:	80 e0       	ldi	r24, 0x00	; 0
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 6a 2c 	call	0x58d4	; 0x58d4 <New_BMP280_Sensor>
     46a:	8c 01       	movw	r16, r24
	printf("init success");
     46c:	88 eb       	ldi	r24, 0xB8	; 184
     46e:	92 e0       	ldi	r25, 0x02	; 2
     470:	9f 93       	push	r25
     472:	8f 93       	push	r24
     474:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
     478:	ef e8       	ldi	r30, 0x8F	; 143
     47a:	f1 e0       	ldi	r31, 0x01	; 1
     47c:	31 97       	sbiw	r30, 0x01	; 1
     47e:	f1 f7       	brne	.-4      	; 0x47c <main+0xd4>
     480:	00 c0       	rjmp	.+0      	; 0x482 <main+0xda>
     482:	00 00       	nop
	delay_us(100);
	
	/*Si7020Sensor *Si_ptr = New_Si7020_Sensor(0,2); */
	K30Sensor *K30_ptr = New_K30_Sensor(0,1);
     484:	61 e0       	ldi	r22, 0x01	; 1
     486:	70 e0       	ldi	r23, 0x00	; 0
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <New_K30_Sensor>
     490:	3c 01       	movw	r6, r24
	
	DemoStorageDevice *Strg_ptr = New_DemoStorage_Device(0);
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	0e 94 ae 2a 	call	0x555c	; 0x555c <New_DemoStorage_Device>
     49a:	5c 01       	movw	r10, r24
	LoadDataDevice *Load_ptr = New_LoadData_Device(0,Strg_ptr);
     49c:	bc 01       	movw	r22, r24
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 8c 2b 	call	0x5718	; 0x5718 <New_LoadData_Device>
     4a6:	4c 01       	movw	r8, r24
	
	init_Event_Timer();
     4a8:	0e 94 e1 16 	call	0x2dc2	; 0x2dc2 <init_Event_Timer>
	printf("init done!\n");
     4ac:	85 ec       	ldi	r24, 0xC5	; 197
     4ae:	92 e0       	ldi	r25, 0x02	; 2
     4b0:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
	
	/* load all sensors */
	load_new_sensor( GP.SensorList[BMP280].StartTime, GP.SensorList[BMP280].ExecutePeriod, (BaseSensor *)BMP280_ptr, 0 );
     4b4:	0f 2e       	mov	r0, r31
     4b6:	fc e7       	ldi	r31, 0x7C	; 124
     4b8:	cf 2e       	mov	r12, r31
     4ba:	fd e0       	ldi	r31, 0x0D	; 13
     4bc:	df 2e       	mov	r13, r31
     4be:	f0 2d       	mov	r31, r0
     4c0:	f6 01       	movw	r30, r12
     4c2:	24 a1       	ldd	r18, Z+36	; 0x24
     4c4:	35 a1       	ldd	r19, Z+37	; 0x25
     4c6:	46 a1       	ldd	r20, Z+38	; 0x26
     4c8:	57 a1       	ldd	r21, Z+39	; 0x27
     4ca:	60 a1       	ldd	r22, Z+32	; 0x20
     4cc:	71 a1       	ldd	r23, Z+33	; 0x21
     4ce:	82 a1       	ldd	r24, Z+34	; 0x22
     4d0:	93 a1       	ldd	r25, Z+35	; 0x23
     4d2:	e1 2c       	mov	r14, r1
     4d4:	f1 2c       	mov	r15, r1
     4d6:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <load_new_sensor>
	/* load_new_sensor( GP.SensorList[Si7020].StartTime, GP.SensorList[Si7020].ExecutePeriod, (BaseSensor *)Si_ptr, 0 ); */
	load_new_sensor( GP.SensorList[K30].StartTime, GP.SensorList[K30].ExecutePeriod, (BaseSensor *)K30_ptr, 0 );
     4da:	20 91 c0 0d 	lds	r18, 0x0DC0
     4de:	30 91 c1 0d 	lds	r19, 0x0DC1
     4e2:	40 91 c2 0d 	lds	r20, 0x0DC2
     4e6:	50 91 c3 0d 	lds	r21, 0x0DC3
     4ea:	60 91 bc 0d 	lds	r22, 0x0DBC
     4ee:	70 91 bd 0d 	lds	r23, 0x0DBD
     4f2:	80 91 be 0d 	lds	r24, 0x0DBE
     4f6:	90 91 bf 0d 	lds	r25, 0x0DBF
     4fa:	83 01       	movw	r16, r6
     4fc:	0e 94 39 1d 	call	0x3a72	; 0x3a72 <load_new_sensor>
	
	
	printf("%d\t%d\n",GP.DeviceList[DemoStorage].StartTime,GP.DeviceList[DemoStorage].ExecutePeriod);
     500:	f6 01       	movw	r30, r12
     502:	87 89       	ldd	r24, Z+23	; 0x17
     504:	8f 93       	push	r24
     506:	86 89       	ldd	r24, Z+22	; 0x16
     508:	8f 93       	push	r24
     50a:	85 89       	ldd	r24, Z+21	; 0x15
     50c:	8f 93       	push	r24
     50e:	84 89       	ldd	r24, Z+20	; 0x14
     510:	8f 93       	push	r24
     512:	83 89       	ldd	r24, Z+19	; 0x13
     514:	8f 93       	push	r24
     516:	82 89       	ldd	r24, Z+18	; 0x12
     518:	8f 93       	push	r24
     51a:	81 89       	ldd	r24, Z+17	; 0x11
     51c:	8f 93       	push	r24
     51e:	80 89       	ldd	r24, Z+16	; 0x10
     520:	8f 93       	push	r24
     522:	80 ed       	ldi	r24, 0xD0	; 208
     524:	92 e0       	ldi	r25, 0x02	; 2
     526:	9f 93       	push	r25
     528:	8f 93       	push	r24
     52a:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
	/* load all ( non-sensor ) devices */
	load_new_device( GP.DeviceList[DemoLoadData].StartTime, GP.DeviceList[DemoLoadData].ExecutePeriod, (BaseDevice *)Load_ptr, 0 );
     52e:	f6 01       	movw	r30, r12
     530:	24 81       	ldd	r18, Z+4	; 0x04
     532:	35 81       	ldd	r19, Z+5	; 0x05
     534:	46 81       	ldd	r20, Z+6	; 0x06
     536:	57 81       	ldd	r21, Z+7	; 0x07
     538:	60 81       	ld	r22, Z
     53a:	71 81       	ldd	r23, Z+1	; 0x01
     53c:	82 81       	ldd	r24, Z+2	; 0x02
     53e:	93 81       	ldd	r25, Z+3	; 0x03
     540:	84 01       	movw	r16, r8
     542:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <load_new_device>
	load_new_device( GP.DeviceList[DemoStorage].StartTime, GP.DeviceList[DemoStorage].ExecutePeriod, (BaseDevice *)Strg_ptr, 0 );
     546:	f6 01       	movw	r30, r12
     548:	24 89       	ldd	r18, Z+20	; 0x14
     54a:	35 89       	ldd	r19, Z+21	; 0x15
     54c:	46 89       	ldd	r20, Z+22	; 0x16
     54e:	57 89       	ldd	r21, Z+23	; 0x17
     550:	60 89       	ldd	r22, Z+16	; 0x10
     552:	71 89       	ldd	r23, Z+17	; 0x11
     554:	82 89       	ldd	r24, Z+18	; 0x12
     556:	93 89       	ldd	r25, Z+19	; 0x13
     558:	85 01       	movw	r16, r10
     55a:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <load_new_device>
	DEVICE_Init();
	FLASH_DEVICE_OBJECT fdo;
	ParameterType para;
	ReturnType ret;
	NMX_uint8 rbuffer[16];
	NMX_uint8 wbuffer[16] =
     55e:	80 e1       	ldi	r24, 0x10	; 16
     560:	e6 e9       	ldi	r30, 0x96	; 150
     562:	f2 e0       	ldi	r31, 0x02	; 2
     564:	de 01       	movw	r26, r28
     566:	a7 56       	subi	r26, 0x67	; 103
     568:	bf 4f       	sbci	r27, 0xFF	; 255
     56a:	01 90       	ld	r0, Z+
     56c:	0d 92       	st	X+, r0
     56e:	8a 95       	dec	r24
     570:	e1 f7       	brne	.-8      	; 0x56a <main+0x1c2>
	{
		0xBE, 0xEF, 0xFE, 0xED, 0xBE, 0xEF, 0xFE, 0xED,
		0xBE, 0xEF, 0xFE, 0xED, 0xBE, 0xEF, 0xFE, 0xED
	};
	spi_init_master();                    /* initialize your SPI interface */
     572:	0e 94 16 18 	call	0x302c	; 0x302c <spi_init_master>
	ret = Driver_Init(&fdo);            /* initialize the flash driver */
     576:	ce 01       	movw	r24, r28
     578:	01 96       	adiw	r24, 0x01	; 1
     57a:	6f d3       	rcall	.+1758   	; 0xc5a <Driver_Init>
	if (Flash_WrongType == ret)
     57c:	0f b6       	in	r0, 0x3f	; 63
     57e:	f8 94       	cli
     580:	de bf       	out	0x3e, r29	; 62
     582:	0f be       	out	0x3f, r0	; 63
     584:	cd bf       	out	0x3d, r28	; 61
     586:	83 31       	cpi	r24, 0x13	; 19
     588:	09 f4       	brne	.+2      	; 0x58c <main+0x1e4>
     58a:	6d c0       	rjmp	.+218    	; 0x666 <main+0x2be>
	{
		printf("Sorry, no device detected.\n");
		return -1;
	}
	printf("it detected the flash memory!");
     58c:	82 ef       	ldi	r24, 0xF2	; 242
     58e:	92 e0       	ldi	r25, 0x02	; 2
     590:	9f 93       	push	r25
     592:	8f 93       	push	r24
     594:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
	fdo.GenOp.SectorErase(0);           /* erase first sector */
     598:	65 96       	adiw	r28, 0x15	; 21
     59a:	ee ad       	ldd	r30, Y+62	; 0x3e
     59c:	ff ad       	ldd	r31, Y+63	; 0x3f
     59e:	65 97       	sbiw	r28, 0x15	; 21
     5a0:	80 e0       	ldi	r24, 0x00	; 0
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	19 95       	eicall
	para.PageProgram.udAddr = 0;        /* program 16 byte at address 0 */
     5a6:	c1 58       	subi	r28, 0x81	; 129
     5a8:	df 4f       	sbci	r29, 0xFF	; 255
     5aa:	18 82       	st	Y, r1
     5ac:	19 82       	std	Y+1, r1	; 0x01
     5ae:	1a 82       	std	Y+2, r1	; 0x02
     5b0:	1b 82       	std	Y+3, r1	; 0x03
     5b2:	cf 57       	subi	r28, 0x7F	; 127
     5b4:	d0 40       	sbci	r29, 0x00	; 0
	para.PageProgram.pArray = wbuffer;
     5b6:	ce 01       	movw	r24, r28
     5b8:	87 56       	subi	r24, 0x67	; 103
     5ba:	9f 4f       	sbci	r25, 0xFF	; 255
     5bc:	c9 57       	subi	r28, 0x79	; 121
     5be:	df 4f       	sbci	r29, 0xFF	; 255
     5c0:	99 83       	std	Y+1, r25	; 0x01
     5c2:	88 83       	st	Y, r24
     5c4:	c7 58       	subi	r28, 0x87	; 135
     5c6:	d0 40       	sbci	r29, 0x00	; 0
	para.PageProgram.udNrOfElementsInArray = 16;
     5c8:	81 2c       	mov	r8, r1
     5ca:	91 2c       	mov	r9, r1
     5cc:	54 01       	movw	r10, r8
     5ce:	68 94       	set
     5d0:	84 f8       	bld	r8, 4
     5d2:	cd 57       	subi	r28, 0x7D	; 125
     5d4:	df 4f       	sbci	r29, 0xFF	; 255
     5d6:	88 82       	st	Y, r8
     5d8:	99 82       	std	Y+1, r9	; 0x01
     5da:	aa 82       	std	Y+2, r10	; 0x02
     5dc:	bb 82       	std	Y+3, r11	; 0x03
     5de:	c3 58       	subi	r28, 0x83	; 131
     5e0:	d0 40       	sbci	r29, 0x00	; 0
	fdo.GenOp.DataProgram(PageProgram, &para);
     5e2:	61 96       	adiw	r28, 0x11	; 17
     5e4:	ee ad       	ldd	r30, Y+62	; 0x3e
     5e6:	ff ad       	ldd	r31, Y+63	; 0x3f
     5e8:	61 97       	sbiw	r28, 0x11	; 17
     5ea:	be 01       	movw	r22, r28
     5ec:	61 58       	subi	r22, 0x81	; 129
     5ee:	7f 4f       	sbci	r23, 0xFF	; 255
     5f0:	8d e0       	ldi	r24, 0x0D	; 13
     5f2:	19 95       	eicall
	para.Read.udAddr = 0;               /* read 16 byte at address 0 */
     5f4:	c1 58       	subi	r28, 0x81	; 129
     5f6:	df 4f       	sbci	r29, 0xFF	; 255
     5f8:	18 82       	st	Y, r1
     5fa:	19 82       	std	Y+1, r1	; 0x01
     5fc:	1a 82       	std	Y+2, r1	; 0x02
     5fe:	1b 82       	std	Y+3, r1	; 0x03
     600:	cf 57       	subi	r28, 0x7F	; 127
     602:	d0 40       	sbci	r29, 0x00	; 0
	para.Read.pArray = rbuffer;
     604:	6e 01       	movw	r12, r28
     606:	39 e8       	ldi	r19, 0x89	; 137
     608:	c3 0e       	add	r12, r19
     60a:	d1 1c       	adc	r13, r1
     60c:	c9 57       	subi	r28, 0x79	; 121
     60e:	df 4f       	sbci	r29, 0xFF	; 255
     610:	d9 82       	std	Y+1, r13	; 0x01
     612:	c8 82       	st	Y, r12
     614:	c7 58       	subi	r28, 0x87	; 135
     616:	d0 40       	sbci	r29, 0x00	; 0
	para.Read.udNrOfElementsToRead = 16;
     618:	cd 57       	subi	r28, 0x7D	; 125
     61a:	df 4f       	sbci	r29, 0xFF	; 255
     61c:	88 82       	st	Y, r8
     61e:	99 82       	std	Y+1, r9	; 0x01
     620:	aa 82       	std	Y+2, r10	; 0x02
     622:	bb 82       	std	Y+3, r11	; 0x03
     624:	c3 58       	subi	r28, 0x83	; 131
     626:	d0 40       	sbci	r29, 0x00	; 0
	fdo.GenOp.DataRead(Read, &para);
     628:	63 96       	adiw	r28, 0x13	; 19
     62a:	ee ad       	ldd	r30, Y+62	; 0x3e
     62c:	ff ad       	ldd	r31, Y+63	; 0x3f
     62e:	63 97       	sbiw	r28, 0x13	; 19
     630:	be 01       	movw	r22, r28
     632:	61 58       	subi	r22, 0x81	; 129
     634:	7f 4f       	sbci	r23, 0xFF	; 255
     636:	86 e0       	ldi	r24, 0x06	; 6
     638:	19 95       	eicall
	printf("The first device byte is: 0x%x\n", rbuffer[0]);
     63a:	f6 01       	movw	r30, r12
     63c:	80 81       	ld	r24, Z
     63e:	1f 92       	push	r1
     640:	8f 93       	push	r24
     642:	80 e1       	ldi	r24, 0x10	; 16
     644:	93 e0       	ldi	r25, 0x03	; 3
     646:	9f 93       	push	r25
     648:	8f 93       	push	r24
     64a:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
	init_set_timer( get_next_interval() );
     64e:	0e 94 cc 1c 	call	0x3998	; 0x3998 <get_next_interval>
     652:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <init_set_timer>
	
	// Enable global interrupt //
	sei();
     656:	78 94       	sei
     658:	0f 90       	pop	r0
     65a:	0f 90       	pop	r0
     65c:	0f 90       	pop	r0
     65e:	0f 90       	pop	r0
     660:	0f 90       	pop	r0
     662:	0f 90       	pop	r0

	for (;;){}
     664:	ff cf       	rjmp	.-2      	; 0x664 <main+0x2bc>
	};
	spi_init_master();                    /* initialize your SPI interface */
	ret = Driver_Init(&fdo);            /* initialize the flash driver */
	if (Flash_WrongType == ret)
	{
		printf("Sorry, no device detected.\n");
     666:	87 ed       	ldi	r24, 0xD7	; 215
     668:	92 e0       	ldi	r25, 0x02	; 2
     66a:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
	sei();

	for (;;){}
		
	return 0;
}
     66e:	8f ef       	ldi	r24, 0xFF	; 255
     670:	9f ef       	ldi	r25, 0xFF	; 255
     672:	c8 55       	subi	r28, 0x58	; 88
     674:	df 4f       	sbci	r29, 0xFF	; 255
     676:	0f b6       	in	r0, 0x3f	; 63
     678:	f8 94       	cli
     67a:	de bf       	out	0x3e, r29	; 62
     67c:	0f be       	out	0x3f, r0	; 63
     67e:	cd bf       	out	0x3d, r28	; 61
     680:	df 91       	pop	r29
     682:	cf 91       	pop	r28
     684:	1f 91       	pop	r17
     686:	0f 91       	pop	r16
     688:	ff 90       	pop	r15
     68a:	ef 90       	pop	r14
     68c:	df 90       	pop	r13
     68e:	cf 90       	pop	r12
     690:	bf 90       	pop	r11
     692:	af 90       	pop	r10
     694:	9f 90       	pop	r9
     696:	8f 90       	pop	r8
     698:	7f 90       	pop	r7
     69a:	6f 90       	pop	r6
     69c:	08 95       	ret

0000069e <K30_delaytime>:
*/

int K30_delaytime()
{
	char status;
	status=TWI_BeginWrite(0x68);
     69e:	88 e6       	ldi	r24, 0x68	; 104
     6a0:	0e 94 24 19 	call	0x3248	; 0x3248 <TWI_BeginWrite>
	if(status!=TWI_SLAW_ACK) return -1;
     6a4:	88 31       	cpi	r24, 0x18	; 24
     6a6:	69 f4       	brne	.+26     	; 0x6c2 <K30_delaytime+0x24>
	status=TWI_Write(&readcmd[0],4);
     6a8:	64 e0       	ldi	r22, 0x04	; 4
     6aa:	70 e0       	ldi	r23, 0x00	; 0
     6ac:	82 e4       	ldi	r24, 0x42	; 66
     6ae:	92 e0       	ldi	r25, 0x02	; 2
     6b0:	0e 94 b6 19 	call	0x336c	; 0x336c <TWI_Write>
	if(status!=TWI_SENT_ACK) return -1;
     6b4:	88 32       	cpi	r24, 0x28	; 40
     6b6:	41 f4       	brne	.+16     	; 0x6c8 <K30_delaytime+0x2a>
	TWI_Stop();	
     6b8:	0e 94 77 19 	call	0x32ee	; 0x32ee <TWI_Stop>
	return 10;
     6bc:	8a e0       	ldi	r24, 0x0A	; 10
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	08 95       	ret

int K30_delaytime()
{
	char status;
	status=TWI_BeginWrite(0x68);
	if(status!=TWI_SLAW_ACK) return -1;
     6c2:	8f ef       	ldi	r24, 0xFF	; 255
     6c4:	9f ef       	ldi	r25, 0xFF	; 255
     6c6:	08 95       	ret
	status=TWI_Write(&readcmd[0],4);
	if(status!=TWI_SENT_ACK) return -1;
     6c8:	8f ef       	ldi	r24, 0xFF	; 255
     6ca:	9f ef       	ldi	r25, 0xFF	; 255
	TWI_Stop();	
	return 10;
}
     6cc:	08 95       	ret

000006ce <K30_readCO2>:

int K30_readCO2(){
     6ce:	af 92       	push	r10
     6d0:	bf 92       	push	r11
     6d2:	cf 92       	push	r12
     6d4:	df 92       	push	r13
     6d6:	ef 92       	push	r14
     6d8:	ff 92       	push	r15
     6da:	0f 93       	push	r16
     6dc:	1f 93       	push	r17
     6de:	cf 93       	push	r28
     6e0:	df 93       	push	r29
     6e2:	00 d0       	rcall	.+0      	; 0x6e4 <K30_readCO2+0x16>
     6e4:	1f 92       	push	r1
     6e6:	cd b7       	in	r28, 0x3d	; 61
     6e8:	de b7       	in	r29, 0x3e	; 62
	int val=0;
	int sum=0;
	
	char status;
	//printf("K30_readCO2");
	unsigned char buffer[4]={0,0,0,0};
     6ea:	19 82       	std	Y+1, r1	; 0x01
     6ec:	1a 82       	std	Y+2, r1	; 0x02
     6ee:	1b 82       	std	Y+3, r1	; 0x03
     6f0:	1c 82       	std	Y+4, r1	; 0x04
	status=TWI_BeginRead(0x68);
     6f2:	88 e6       	ldi	r24, 0x68	; 104
     6f4:	0e 94 40 19 	call	0x3280	; 0x3280 <TWI_BeginRead>
	if(status!=TWI_SLAR_ACK) return -9998;
     6f8:	80 34       	cpi	r24, 0x40	; 64
     6fa:	c1 f5       	brne	.+112    	; 0x76c <K30_readCO2+0x9e>
	status=TWI_Read(&buffer[0],4,true);
     6fc:	41 e0       	ldi	r20, 0x01	; 1
     6fe:	64 e0       	ldi	r22, 0x04	; 4
     700:	70 e0       	ldi	r23, 0x00	; 0
     702:	ce 01       	movw	r24, r28
     704:	01 96       	adiw	r24, 0x01	; 1
     706:	0e 94 7c 19 	call	0x32f8	; 0x32f8 <TWI_Read>
	if(status!=TWI_REC_ACK) return -9997;
     70a:	80 35       	cpi	r24, 0x50	; 80
     70c:	91 f5       	brne	.+100    	; 0x772 <K30_readCO2+0xa4>
	TWI_Stop();
     70e:	0e 94 77 19 	call	0x32ee	; 0x32ee <TWI_Stop>
	
	val = 0;
	val |= buffer[1] & 0xFF;
     712:	9a 81       	ldd	r25, Y+2	; 0x02
     714:	a9 2e       	mov	r10, r25
     716:	b1 2c       	mov	r11, r1
	val = val << 8;
     718:	fa 2c       	mov	r15, r10
     71a:	ee 24       	eor	r14, r14
	val |= buffer[2] & 0xFF;
     71c:	2b 81       	ldd	r18, Y+3	; 0x03
     71e:	c2 2e       	mov	r12, r18
     720:	d1 2c       	mov	r13, r1
     722:	ec 28       	or	r14, r12
     724:	fd 28       	or	r15, r13
	sum = buffer[0] + buffer[1] + buffer[2];
     726:	89 81       	ldd	r24, Y+1	; 0x01
     728:	08 2f       	mov	r16, r24
     72a:	10 e0       	ldi	r17, 0x00	; 0
	printf("K30-DEBUG : %u,%u,%u,%u\n",buffer[0],buffer[1],buffer[2],buffer[3]);
     72c:	3c 81       	ldd	r19, Y+4	; 0x04
     72e:	1f 92       	push	r1
     730:	3f 93       	push	r19
     732:	1f 92       	push	r1
     734:	2f 93       	push	r18
     736:	1f 92       	push	r1
     738:	9f 93       	push	r25
     73a:	1f 92       	push	r1
     73c:	8f 93       	push	r24
     73e:	80 e3       	ldi	r24, 0x30	; 48
     740:	93 e0       	ldi	r25, 0x03	; 3
     742:	9f 93       	push	r25
     744:	8f 93       	push	r24
     746:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
	if(sum==buffer[3]){return val;}
     74a:	8c 81       	ldd	r24, Y+4	; 0x04
     74c:	90 e0       	ldi	r25, 0x00	; 0
	
	val = 0;
	val |= buffer[1] & 0xFF;
	val = val << 8;
	val |= buffer[2] & 0xFF;
	sum = buffer[0] + buffer[1] + buffer[2];
     74e:	0a 0d       	add	r16, r10
     750:	1b 1d       	adc	r17, r11
     752:	0c 0d       	add	r16, r12
     754:	1d 1d       	adc	r17, r13
	printf("K30-DEBUG : %u,%u,%u,%u\n",buffer[0],buffer[1],buffer[2],buffer[3]);
	if(sum==buffer[3]){return val;}
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	de bf       	out	0x3e, r29	; 62
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	cd bf       	out	0x3d, r28	; 61
     760:	80 17       	cp	r24, r16
     762:	91 07       	cpc	r25, r17
     764:	49 f4       	brne	.+18     	; 0x778 <K30_readCO2+0xaa>
     766:	8e 2d       	mov	r24, r14
     768:	9f 2d       	mov	r25, r15
     76a:	08 c0       	rjmp	.+16     	; 0x77c <K30_readCO2+0xae>
	
	char status;
	//printf("K30_readCO2");
	unsigned char buffer[4]={0,0,0,0};
	status=TWI_BeginRead(0x68);
	if(status!=TWI_SLAR_ACK) return -9998;
     76c:	82 ef       	ldi	r24, 0xF2	; 242
     76e:	98 ed       	ldi	r25, 0xD8	; 216
     770:	05 c0       	rjmp	.+10     	; 0x77c <K30_readCO2+0xae>
	status=TWI_Read(&buffer[0],4,true);
	if(status!=TWI_REC_ACK) return -9997;
     772:	83 ef       	ldi	r24, 0xF3	; 243
     774:	98 ed       	ldi	r25, 0xD8	; 216
     776:	02 c0       	rjmp	.+4      	; 0x77c <K30_readCO2+0xae>
	val = val << 8;
	val |= buffer[2] & 0xFF;
	sum = buffer[0] + buffer[1] + buffer[2];
	printf("K30-DEBUG : %u,%u,%u,%u\n",buffer[0],buffer[1],buffer[2],buffer[3]);
	if(sum==buffer[3]){return val;}
	else{return -9999;}
     778:	81 ef       	ldi	r24, 0xF1	; 241
     77a:	98 ed       	ldi	r25, 0xD8	; 216
	
}
     77c:	0f 90       	pop	r0
     77e:	0f 90       	pop	r0
     780:	0f 90       	pop	r0
     782:	0f 90       	pop	r0
     784:	df 91       	pop	r29
     786:	cf 91       	pop	r28
     788:	1f 91       	pop	r17
     78a:	0f 91       	pop	r16
     78c:	ff 90       	pop	r15
     78e:	ef 90       	pop	r14
     790:	df 90       	pop	r13
     792:	cf 90       	pop	r12
     794:	bf 90       	pop	r11
     796:	af 90       	pop	r10
     798:	08 95       	ret

0000079a <BlockOffset>:
 ******************************************************************************/
ReturnType  FlashProgramEraseSuspend( void )
{
	/* not implemented */
	return Flash_FunctionNotSupported;
}
     79a:	e0 91 d2 0d 	lds	r30, 0x0DD2
     79e:	f0 91 d3 0d 	lds	r31, 0x0DD3
     7a2:	05 a0       	ldd	r0, Z+37	; 0x25
     7a4:	02 c0       	rjmp	.+4      	; 0x7aa <BlockOffset+0x10>
     7a6:	88 0f       	add	r24, r24
     7a8:	99 1f       	adc	r25, r25
     7aa:	0a 94       	dec	r0
     7ac:	e2 f7       	brpl	.-8      	; 0x7a6 <BlockOffset+0xc>
     7ae:	bc 01       	movw	r22, r24
     7b0:	80 e0       	ldi	r24, 0x00	; 0
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	08 95       	ret

000007b6 <FlashReadDeviceIdentification>:
     7b6:	0f 93       	push	r16
     7b8:	1f 93       	push	r17
     7ba:	cf 93       	push	r28
     7bc:	df 93       	push	r29
     7be:	cd b7       	in	r28, 0x3d	; 61
     7c0:	de b7       	in	r29, 0x3e	; 62
     7c2:	60 97       	sbiw	r28, 0x10	; 16
     7c4:	0f b6       	in	r0, 0x3f	; 63
     7c6:	f8 94       	cli
     7c8:	de bf       	out	0x3e, r29	; 62
     7ca:	0f be       	out	0x3f, r0	; 63
     7cc:	cd bf       	out	0x3d, r28	; 61
     7ce:	8c 01       	movw	r16, r24
     7d0:	8f e9       	ldi	r24, 0x9F	; 159
     7d2:	8d 87       	std	Y+13, r24	; 0x0d
     7d4:	81 e0       	ldi	r24, 0x01	; 1
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	a0 e0       	ldi	r26, 0x00	; 0
     7da:	b0 e0       	ldi	r27, 0x00	; 0
     7dc:	8b 83       	std	Y+3, r24	; 0x03
     7de:	9c 83       	std	Y+4, r25	; 0x04
     7e0:	ad 83       	std	Y+5, r26	; 0x05
     7e2:	be 83       	std	Y+6, r27	; 0x06
     7e4:	ce 01       	movw	r24, r28
     7e6:	0d 96       	adiw	r24, 0x0d	; 13
     7e8:	9a 83       	std	Y+2, r25	; 0x02
     7ea:	89 83       	std	Y+1, r24	; 0x01
     7ec:	83 e0       	ldi	r24, 0x03	; 3
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	a0 e0       	ldi	r26, 0x00	; 0
     7f2:	b0 e0       	ldi	r27, 0x00	; 0
     7f4:	89 87       	std	Y+9, r24	; 0x09
     7f6:	9a 87       	std	Y+10, r25	; 0x0a
     7f8:	ab 87       	std	Y+11, r26	; 0x0b
     7fa:	bc 87       	std	Y+12, r27	; 0x0c
     7fc:	ce 01       	movw	r24, r28
     7fe:	0e 96       	adiw	r24, 0x0e	; 14
     800:	98 87       	std	Y+8, r25	; 0x08
     802:	8f 83       	std	Y+7, r24	; 0x07
     804:	23 e0       	ldi	r18, 0x03	; 3
     806:	41 e0       	ldi	r20, 0x01	; 1
     808:	be 01       	movw	r22, r28
     80a:	69 5f       	subi	r22, 0xF9	; 249
     80c:	7f 4f       	sbci	r23, 0xFF	; 255
     80e:	0d 97       	sbiw	r24, 0x0d	; 13
     810:	0e 94 25 18 	call	0x304a	; 0x304a <Serialize_SPI>
     814:	ef 81       	ldd	r30, Y+7	; 0x07
     816:	f8 85       	ldd	r31, Y+8	; 0x08
     818:	80 81       	ld	r24, Z
     81a:	1f 92       	push	r1
     81c:	8f 93       	push	r24
     81e:	89 e4       	ldi	r24, 0x49	; 73
     820:	93 e0       	ldi	r25, 0x03	; 3
     822:	9f 93       	push	r25
     824:	8f 93       	push	r24
     826:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
     82a:	ef 81       	ldd	r30, Y+7	; 0x07
     82c:	f8 85       	ldd	r31, Y+8	; 0x08
     82e:	81 81       	ldd	r24, Z+1	; 0x01
     830:	1f 92       	push	r1
     832:	8f 93       	push	r24
     834:	8d e5       	ldi	r24, 0x5D	; 93
     836:	93 e0       	ldi	r25, 0x03	; 3
     838:	9f 93       	push	r25
     83a:	8f 93       	push	r24
     83c:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
     840:	ef 81       	ldd	r30, Y+7	; 0x07
     842:	f8 85       	ldd	r31, Y+8	; 0x08
     844:	82 81       	ldd	r24, Z+2	; 0x02
     846:	1f 92       	push	r1
     848:	8f 93       	push	r24
     84a:	81 e7       	ldi	r24, 0x71	; 113
     84c:	93 e0       	ldi	r25, 0x03	; 3
     84e:	9f 93       	push	r25
     850:	8f 93       	push	r24
     852:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
     856:	ef 81       	ldd	r30, Y+7	; 0x07
     858:	f8 85       	ldd	r31, Y+8	; 0x08
     85a:	40 81       	ld	r20, Z
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	60 e0       	ldi	r22, 0x00	; 0
     860:	70 e0       	ldi	r23, 0x00	; 0
     862:	76 2f       	mov	r23, r22
     864:	65 2f       	mov	r22, r21
     866:	54 2f       	mov	r21, r20
     868:	44 27       	eor	r20, r20
     86a:	d8 01       	movw	r26, r16
     86c:	4d 93       	st	X+, r20
     86e:	5d 93       	st	X+, r21
     870:	6d 93       	st	X+, r22
     872:	7c 93       	st	X, r23
     874:	13 97       	sbiw	r26, 0x03	; 3
     876:	81 81       	ldd	r24, Z+1	; 0x01
     878:	48 2b       	or	r20, r24
     87a:	76 2f       	mov	r23, r22
     87c:	65 2f       	mov	r22, r21
     87e:	54 2f       	mov	r21, r20
     880:	44 27       	eor	r20, r20
     882:	4d 93       	st	X+, r20
     884:	5d 93       	st	X+, r21
     886:	6d 93       	st	X+, r22
     888:	7c 93       	st	X, r23
     88a:	13 97       	sbiw	r26, 0x03	; 3
     88c:	82 81       	ldd	r24, Z+2	; 0x02
     88e:	48 2b       	or	r20, r24
     890:	f8 01       	movw	r30, r16
     892:	40 83       	st	Z, r20
     894:	51 83       	std	Z+1, r21	; 0x01
     896:	62 83       	std	Z+2, r22	; 0x02
     898:	73 83       	std	Z+3, r23	; 0x03
     89a:	0f b6       	in	r0, 0x3f	; 63
     89c:	f8 94       	cli
     89e:	de bf       	out	0x3e, r29	; 62
     8a0:	0f be       	out	0x3f, r0	; 63
     8a2:	cd bf       	out	0x3d, r28	; 61
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	60 96       	adiw	r28, 0x10	; 16
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	f8 94       	cli
     8ac:	de bf       	out	0x3e, r29	; 62
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	cd bf       	out	0x3d, r28	; 61
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	1f 91       	pop	r17
     8b8:	0f 91       	pop	r16
     8ba:	08 95       	ret

000008bc <FlashReadStatusRegister>:
     8bc:	cf 93       	push	r28
     8be:	df 93       	push	r29
     8c0:	cd b7       	in	r28, 0x3d	; 61
     8c2:	de b7       	in	r29, 0x3e	; 62
     8c4:	2d 97       	sbiw	r28, 0x0d	; 13
     8c6:	0f b6       	in	r0, 0x3f	; 63
     8c8:	f8 94       	cli
     8ca:	de bf       	out	0x3e, r29	; 62
     8cc:	0f be       	out	0x3f, r0	; 63
     8ce:	cd bf       	out	0x3d, r28	; 61
     8d0:	25 e0       	ldi	r18, 0x05	; 5
     8d2:	2d 87       	std	Y+13, r18	; 0x0d
     8d4:	41 e0       	ldi	r20, 0x01	; 1
     8d6:	50 e0       	ldi	r21, 0x00	; 0
     8d8:	60 e0       	ldi	r22, 0x00	; 0
     8da:	70 e0       	ldi	r23, 0x00	; 0
     8dc:	4b 83       	std	Y+3, r20	; 0x03
     8de:	5c 83       	std	Y+4, r21	; 0x04
     8e0:	6d 83       	std	Y+5, r22	; 0x05
     8e2:	7e 83       	std	Y+6, r23	; 0x06
     8e4:	9e 01       	movw	r18, r28
     8e6:	23 5f       	subi	r18, 0xF3	; 243
     8e8:	3f 4f       	sbci	r19, 0xFF	; 255
     8ea:	3a 83       	std	Y+2, r19	; 0x02
     8ec:	29 83       	std	Y+1, r18	; 0x01
     8ee:	49 87       	std	Y+9, r20	; 0x09
     8f0:	5a 87       	std	Y+10, r21	; 0x0a
     8f2:	6b 87       	std	Y+11, r22	; 0x0b
     8f4:	7c 87       	std	Y+12, r23	; 0x0c
     8f6:	98 87       	std	Y+8, r25	; 0x08
     8f8:	8f 83       	std	Y+7, r24	; 0x07
     8fa:	23 e0       	ldi	r18, 0x03	; 3
     8fc:	be 01       	movw	r22, r28
     8fe:	69 5f       	subi	r22, 0xF9	; 249
     900:	7f 4f       	sbci	r23, 0xFF	; 255
     902:	ce 01       	movw	r24, r28
     904:	01 96       	adiw	r24, 0x01	; 1
     906:	0e 94 25 18 	call	0x304a	; 0x304a <Serialize_SPI>
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	2d 96       	adiw	r28, 0x0d	; 13
     90e:	0f b6       	in	r0, 0x3f	; 63
     910:	f8 94       	cli
     912:	de bf       	out	0x3e, r29	; 62
     914:	0f be       	out	0x3f, r0	; 63
     916:	cd bf       	out	0x3d, r28	; 61
     918:	df 91       	pop	r29
     91a:	cf 91       	pop	r28
     91c:	08 95       	ret

0000091e <FlashWriteEnable>:
     91e:	cf 93       	push	r28
     920:	df 93       	push	r29
     922:	cd b7       	in	r28, 0x3d	; 61
     924:	de b7       	in	r29, 0x3e	; 62
     926:	28 97       	sbiw	r28, 0x08	; 8
     928:	0f b6       	in	r0, 0x3f	; 63
     92a:	f8 94       	cli
     92c:	de bf       	out	0x3e, r29	; 62
     92e:	0f be       	out	0x3f, r0	; 63
     930:	cd bf       	out	0x3d, r28	; 61
     932:	86 e0       	ldi	r24, 0x06	; 6
     934:	8f 83       	std	Y+7, r24	; 0x07
     936:	81 e0       	ldi	r24, 0x01	; 1
     938:	90 e0       	ldi	r25, 0x00	; 0
     93a:	a0 e0       	ldi	r26, 0x00	; 0
     93c:	b0 e0       	ldi	r27, 0x00	; 0
     93e:	8b 83       	std	Y+3, r24	; 0x03
     940:	9c 83       	std	Y+4, r25	; 0x04
     942:	ad 83       	std	Y+5, r26	; 0x05
     944:	be 83       	std	Y+6, r27	; 0x06
     946:	ce 01       	movw	r24, r28
     948:	07 96       	adiw	r24, 0x07	; 7
     94a:	9a 83       	std	Y+2, r25	; 0x02
     94c:	89 83       	std	Y+1, r24	; 0x01
     94e:	23 e0       	ldi	r18, 0x03	; 3
     950:	41 e0       	ldi	r20, 0x01	; 1
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	06 97       	sbiw	r24, 0x06	; 6
     958:	0e 94 25 18 	call	0x304a	; 0x304a <Serialize_SPI>
     95c:	ce 01       	movw	r24, r28
     95e:	08 96       	adiw	r24, 0x08	; 8
     960:	ad df       	rcall	.-166    	; 0x8bc <FlashReadStatusRegister>
     962:	88 85       	ldd	r24, Y+8	; 0x08
     964:	81 ff       	sbrs	r24, 1
     966:	fa cf       	rjmp	.-12     	; 0x95c <FlashWriteEnable+0x3e>
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	28 96       	adiw	r28, 0x08	; 8
     96c:	0f b6       	in	r0, 0x3f	; 63
     96e:	f8 94       	cli
     970:	de bf       	out	0x3e, r29	; 62
     972:	0f be       	out	0x3f, r0	; 63
     974:	cd bf       	out	0x3d, r28	; 61
     976:	df 91       	pop	r29
     978:	cf 91       	pop	r28
     97a:	08 95       	ret

0000097c <FlashWriteDisable>:
     97c:	cf 93       	push	r28
     97e:	df 93       	push	r29
     980:	cd b7       	in	r28, 0x3d	; 61
     982:	de b7       	in	r29, 0x3e	; 62
     984:	28 97       	sbiw	r28, 0x08	; 8
     986:	0f b6       	in	r0, 0x3f	; 63
     988:	f8 94       	cli
     98a:	de bf       	out	0x3e, r29	; 62
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	cd bf       	out	0x3d, r28	; 61
     990:	84 e0       	ldi	r24, 0x04	; 4
     992:	8f 83       	std	Y+7, r24	; 0x07
     994:	81 e0       	ldi	r24, 0x01	; 1
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	a0 e0       	ldi	r26, 0x00	; 0
     99a:	b0 e0       	ldi	r27, 0x00	; 0
     99c:	8b 83       	std	Y+3, r24	; 0x03
     99e:	9c 83       	std	Y+4, r25	; 0x04
     9a0:	ad 83       	std	Y+5, r26	; 0x05
     9a2:	be 83       	std	Y+6, r27	; 0x06
     9a4:	ce 01       	movw	r24, r28
     9a6:	07 96       	adiw	r24, 0x07	; 7
     9a8:	9a 83       	std	Y+2, r25	; 0x02
     9aa:	89 83       	std	Y+1, r24	; 0x01
     9ac:	23 e0       	ldi	r18, 0x03	; 3
     9ae:	41 e0       	ldi	r20, 0x01	; 1
     9b0:	60 e0       	ldi	r22, 0x00	; 0
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	06 97       	sbiw	r24, 0x06	; 6
     9b6:	0e 94 25 18 	call	0x304a	; 0x304a <Serialize_SPI>
     9ba:	ce 01       	movw	r24, r28
     9bc:	08 96       	adiw	r24, 0x08	; 8
     9be:	7e df       	rcall	.-260    	; 0x8bc <FlashReadStatusRegister>
     9c0:	88 85       	ldd	r24, Y+8	; 0x08
     9c2:	81 fd       	sbrc	r24, 1
     9c4:	fa cf       	rjmp	.-12     	; 0x9ba <FlashWriteDisable+0x3e>
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	28 96       	adiw	r28, 0x08	; 8
     9ca:	0f b6       	in	r0, 0x3f	; 63
     9cc:	f8 94       	cli
     9ce:	de bf       	out	0x3e, r29	; 62
     9d0:	0f be       	out	0x3f, r0	; 63
     9d2:	cd bf       	out	0x3d, r28	; 61
     9d4:	df 91       	pop	r29
     9d6:	cf 91       	pop	r28
     9d8:	08 95       	ret

000009da <FlashClearFlagStatusRegister>:
     9da:	cf 93       	push	r28
     9dc:	df 93       	push	r29
     9de:	cd b7       	in	r28, 0x3d	; 61
     9e0:	de b7       	in	r29, 0x3e	; 62
     9e2:	27 97       	sbiw	r28, 0x07	; 7
     9e4:	0f b6       	in	r0, 0x3f	; 63
     9e6:	f8 94       	cli
     9e8:	de bf       	out	0x3e, r29	; 62
     9ea:	0f be       	out	0x3f, r0	; 63
     9ec:	cd bf       	out	0x3d, r28	; 61
     9ee:	80 e5       	ldi	r24, 0x50	; 80
     9f0:	8f 83       	std	Y+7, r24	; 0x07
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	90 e0       	ldi	r25, 0x00	; 0
     9f6:	a0 e0       	ldi	r26, 0x00	; 0
     9f8:	b0 e0       	ldi	r27, 0x00	; 0
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	9c 83       	std	Y+4, r25	; 0x04
     9fe:	ad 83       	std	Y+5, r26	; 0x05
     a00:	be 83       	std	Y+6, r27	; 0x06
     a02:	ce 01       	movw	r24, r28
     a04:	07 96       	adiw	r24, 0x07	; 7
     a06:	9a 83       	std	Y+2, r25	; 0x02
     a08:	89 83       	std	Y+1, r24	; 0x01
     a0a:	23 e0       	ldi	r18, 0x03	; 3
     a0c:	41 e0       	ldi	r20, 0x01	; 1
     a0e:	60 e0       	ldi	r22, 0x00	; 0
     a10:	70 e0       	ldi	r23, 0x00	; 0
     a12:	06 97       	sbiw	r24, 0x06	; 6
     a14:	0e 94 25 18 	call	0x304a	; 0x304a <Serialize_SPI>
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	27 96       	adiw	r28, 0x07	; 7
     a1c:	0f b6       	in	r0, 0x3f	; 63
     a1e:	f8 94       	cli
     a20:	de bf       	out	0x3e, r29	; 62
     a22:	0f be       	out	0x3f, r0	; 63
     a24:	cd bf       	out	0x3d, r28	; 61
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	08 95       	ret

00000a2c <FlashReadNVConfigurationRegister>:
     a2c:	cf 93       	push	r28
     a2e:	df 93       	push	r29
     a30:	cd b7       	in	r28, 0x3d	; 61
     a32:	de b7       	in	r29, 0x3e	; 62
     a34:	2d 97       	sbiw	r28, 0x0d	; 13
     a36:	0f b6       	in	r0, 0x3f	; 63
     a38:	f8 94       	cli
     a3a:	de bf       	out	0x3e, r29	; 62
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	cd bf       	out	0x3d, r28	; 61
     a40:	25 eb       	ldi	r18, 0xB5	; 181
     a42:	2d 87       	std	Y+13, r18	; 0x0d
     a44:	41 e0       	ldi	r20, 0x01	; 1
     a46:	50 e0       	ldi	r21, 0x00	; 0
     a48:	60 e0       	ldi	r22, 0x00	; 0
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	4b 83       	std	Y+3, r20	; 0x03
     a4e:	5c 83       	std	Y+4, r21	; 0x04
     a50:	6d 83       	std	Y+5, r22	; 0x05
     a52:	7e 83       	std	Y+6, r23	; 0x06
     a54:	9e 01       	movw	r18, r28
     a56:	23 5f       	subi	r18, 0xF3	; 243
     a58:	3f 4f       	sbci	r19, 0xFF	; 255
     a5a:	3a 83       	std	Y+2, r19	; 0x02
     a5c:	29 83       	std	Y+1, r18	; 0x01
     a5e:	42 e0       	ldi	r20, 0x02	; 2
     a60:	50 e0       	ldi	r21, 0x00	; 0
     a62:	60 e0       	ldi	r22, 0x00	; 0
     a64:	70 e0       	ldi	r23, 0x00	; 0
     a66:	49 87       	std	Y+9, r20	; 0x09
     a68:	5a 87       	std	Y+10, r21	; 0x0a
     a6a:	6b 87       	std	Y+11, r22	; 0x0b
     a6c:	7c 87       	std	Y+12, r23	; 0x0c
     a6e:	98 87       	std	Y+8, r25	; 0x08
     a70:	8f 83       	std	Y+7, r24	; 0x07
     a72:	23 e0       	ldi	r18, 0x03	; 3
     a74:	41 e0       	ldi	r20, 0x01	; 1
     a76:	be 01       	movw	r22, r28
     a78:	69 5f       	subi	r22, 0xF9	; 249
     a7a:	7f 4f       	sbci	r23, 0xFF	; 255
     a7c:	ce 01       	movw	r24, r28
     a7e:	01 96       	adiw	r24, 0x01	; 1
     a80:	0e 94 25 18 	call	0x304a	; 0x304a <Serialize_SPI>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	2d 96       	adiw	r28, 0x0d	; 13
     a88:	0f b6       	in	r0, 0x3f	; 63
     a8a:	f8 94       	cli
     a8c:	de bf       	out	0x3e, r29	; 62
     a8e:	0f be       	out	0x3f, r0	; 63
     a90:	cd bf       	out	0x3d, r28	; 61
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	08 95       	ret

00000a98 <FlashReadVolatileConfigurationRegister>:
     a98:	cf 93       	push	r28
     a9a:	df 93       	push	r29
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
     aa0:	2d 97       	sbiw	r28, 0x0d	; 13
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	f8 94       	cli
     aa6:	de bf       	out	0x3e, r29	; 62
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	cd bf       	out	0x3d, r28	; 61
     aac:	25 e8       	ldi	r18, 0x85	; 133
     aae:	2d 87       	std	Y+13, r18	; 0x0d
     ab0:	41 e0       	ldi	r20, 0x01	; 1
     ab2:	50 e0       	ldi	r21, 0x00	; 0
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	70 e0       	ldi	r23, 0x00	; 0
     ab8:	4b 83       	std	Y+3, r20	; 0x03
     aba:	5c 83       	std	Y+4, r21	; 0x04
     abc:	6d 83       	std	Y+5, r22	; 0x05
     abe:	7e 83       	std	Y+6, r23	; 0x06
     ac0:	9e 01       	movw	r18, r28
     ac2:	23 5f       	subi	r18, 0xF3	; 243
     ac4:	3f 4f       	sbci	r19, 0xFF	; 255
     ac6:	3a 83       	std	Y+2, r19	; 0x02
     ac8:	29 83       	std	Y+1, r18	; 0x01
     aca:	49 87       	std	Y+9, r20	; 0x09
     acc:	5a 87       	std	Y+10, r21	; 0x0a
     ace:	6b 87       	std	Y+11, r22	; 0x0b
     ad0:	7c 87       	std	Y+12, r23	; 0x0c
     ad2:	98 87       	std	Y+8, r25	; 0x08
     ad4:	8f 83       	std	Y+7, r24	; 0x07
     ad6:	23 e0       	ldi	r18, 0x03	; 3
     ad8:	be 01       	movw	r22, r28
     ada:	69 5f       	subi	r22, 0xF9	; 249
     adc:	7f 4f       	sbci	r23, 0xFF	; 255
     ade:	ce 01       	movw	r24, r28
     ae0:	01 96       	adiw	r24, 0x01	; 1
     ae2:	0e 94 25 18 	call	0x304a	; 0x304a <Serialize_SPI>
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	2d 96       	adiw	r28, 0x0d	; 13
     aea:	0f b6       	in	r0, 0x3f	; 63
     aec:	f8 94       	cli
     aee:	de bf       	out	0x3e, r29	; 62
     af0:	0f be       	out	0x3f, r0	; 63
     af2:	cd bf       	out	0x3d, r28	; 61
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	08 95       	ret

00000afa <FlashReadVolatileEnhancedConfigurationRegister>:
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	cd b7       	in	r28, 0x3d	; 61
     b00:	de b7       	in	r29, 0x3e	; 62
     b02:	2d 97       	sbiw	r28, 0x0d	; 13
     b04:	0f b6       	in	r0, 0x3f	; 63
     b06:	f8 94       	cli
     b08:	de bf       	out	0x3e, r29	; 62
     b0a:	0f be       	out	0x3f, r0	; 63
     b0c:	cd bf       	out	0x3d, r28	; 61
     b0e:	25 e6       	ldi	r18, 0x65	; 101
     b10:	2d 87       	std	Y+13, r18	; 0x0d
     b12:	41 e0       	ldi	r20, 0x01	; 1
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	4b 83       	std	Y+3, r20	; 0x03
     b1c:	5c 83       	std	Y+4, r21	; 0x04
     b1e:	6d 83       	std	Y+5, r22	; 0x05
     b20:	7e 83       	std	Y+6, r23	; 0x06
     b22:	9e 01       	movw	r18, r28
     b24:	23 5f       	subi	r18, 0xF3	; 243
     b26:	3f 4f       	sbci	r19, 0xFF	; 255
     b28:	3a 83       	std	Y+2, r19	; 0x02
     b2a:	29 83       	std	Y+1, r18	; 0x01
     b2c:	49 87       	std	Y+9, r20	; 0x09
     b2e:	5a 87       	std	Y+10, r21	; 0x0a
     b30:	6b 87       	std	Y+11, r22	; 0x0b
     b32:	7c 87       	std	Y+12, r23	; 0x0c
     b34:	98 87       	std	Y+8, r25	; 0x08
     b36:	8f 83       	std	Y+7, r24	; 0x07
     b38:	23 e0       	ldi	r18, 0x03	; 3
     b3a:	be 01       	movw	r22, r28
     b3c:	69 5f       	subi	r22, 0xF9	; 249
     b3e:	7f 4f       	sbci	r23, 0xFF	; 255
     b40:	ce 01       	movw	r24, r28
     b42:	01 96       	adiw	r24, 0x01	; 1
     b44:	0e 94 25 18 	call	0x304a	; 0x304a <Serialize_SPI>
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	2d 96       	adiw	r28, 0x0d	; 13
     b4c:	0f b6       	in	r0, 0x3f	; 63
     b4e:	f8 94       	cli
     b50:	de bf       	out	0x3e, r29	; 62
     b52:	0f be       	out	0x3f, r0	; 63
     b54:	cd bf       	out	0x3d, r28	; 61
     b56:	df 91       	pop	r29
     b58:	cf 91       	pop	r28
     b5a:	08 95       	ret

00000b5c <FlashReadFlagStatusRegister>:
     b5c:	cf 93       	push	r28
     b5e:	df 93       	push	r29
     b60:	cd b7       	in	r28, 0x3d	; 61
     b62:	de b7       	in	r29, 0x3e	; 62
     b64:	2d 97       	sbiw	r28, 0x0d	; 13
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	f8 94       	cli
     b6a:	de bf       	out	0x3e, r29	; 62
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	cd bf       	out	0x3d, r28	; 61
     b70:	20 e7       	ldi	r18, 0x70	; 112
     b72:	2d 87       	std	Y+13, r18	; 0x0d
     b74:	41 e0       	ldi	r20, 0x01	; 1
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	60 e0       	ldi	r22, 0x00	; 0
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	4b 83       	std	Y+3, r20	; 0x03
     b7e:	5c 83       	std	Y+4, r21	; 0x04
     b80:	6d 83       	std	Y+5, r22	; 0x05
     b82:	7e 83       	std	Y+6, r23	; 0x06
     b84:	9e 01       	movw	r18, r28
     b86:	23 5f       	subi	r18, 0xF3	; 243
     b88:	3f 4f       	sbci	r19, 0xFF	; 255
     b8a:	3a 83       	std	Y+2, r19	; 0x02
     b8c:	29 83       	std	Y+1, r18	; 0x01
     b8e:	49 87       	std	Y+9, r20	; 0x09
     b90:	5a 87       	std	Y+10, r21	; 0x0a
     b92:	6b 87       	std	Y+11, r22	; 0x0b
     b94:	7c 87       	std	Y+12, r23	; 0x0c
     b96:	98 87       	std	Y+8, r25	; 0x08
     b98:	8f 83       	std	Y+7, r24	; 0x07
     b9a:	23 e0       	ldi	r18, 0x03	; 3
     b9c:	be 01       	movw	r22, r28
     b9e:	69 5f       	subi	r22, 0xF9	; 249
     ba0:	7f 4f       	sbci	r23, 0xFF	; 255
     ba2:	ce 01       	movw	r24, r28
     ba4:	01 96       	adiw	r24, 0x01	; 1
     ba6:	0e 94 25 18 	call	0x304a	; 0x304a <Serialize_SPI>
     baa:	80 e0       	ldi	r24, 0x00	; 0
     bac:	2d 96       	adiw	r28, 0x0d	; 13
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	de bf       	out	0x3e, r29	; 62
     bb4:	0f be       	out	0x3f, r0	; 63
     bb6:	cd bf       	out	0x3d, r28	; 61
     bb8:	df 91       	pop	r29
     bba:	cf 91       	pop	r28
     bbc:	08 95       	ret

00000bbe <FlashEnter4ByteAddressMode>:
     bbe:	cf 93       	push	r28
     bc0:	df 93       	push	r29
     bc2:	cd b7       	in	r28, 0x3d	; 61
     bc4:	de b7       	in	r29, 0x3e	; 62
     bc6:	28 97       	sbiw	r28, 0x08	; 8
     bc8:	0f b6       	in	r0, 0x3f	; 63
     bca:	f8 94       	cli
     bcc:	de bf       	out	0x3e, r29	; 62
     bce:	0f be       	out	0x3f, r0	; 63
     bd0:	cd bf       	out	0x3d, r28	; 61
     bd2:	87 eb       	ldi	r24, 0xB7	; 183
     bd4:	8f 83       	std	Y+7, r24	; 0x07
     bd6:	a3 de       	rcall	.-698    	; 0x91e <FlashWriteEnable>
     bd8:	81 e0       	ldi	r24, 0x01	; 1
     bda:	90 e0       	ldi	r25, 0x00	; 0
     bdc:	a0 e0       	ldi	r26, 0x00	; 0
     bde:	b0 e0       	ldi	r27, 0x00	; 0
     be0:	8b 83       	std	Y+3, r24	; 0x03
     be2:	9c 83       	std	Y+4, r25	; 0x04
     be4:	ad 83       	std	Y+5, r26	; 0x05
     be6:	be 83       	std	Y+6, r27	; 0x06
     be8:	ce 01       	movw	r24, r28
     bea:	07 96       	adiw	r24, 0x07	; 7
     bec:	9a 83       	std	Y+2, r25	; 0x02
     bee:	89 83       	std	Y+1, r24	; 0x01
     bf0:	23 e0       	ldi	r18, 0x03	; 3
     bf2:	41 e0       	ldi	r20, 0x01	; 1
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	70 e0       	ldi	r23, 0x00	; 0
     bf8:	06 97       	sbiw	r24, 0x06	; 6
     bfa:	0e 94 25 18 	call	0x304a	; 0x304a <Serialize_SPI>
     bfe:	85 e8       	ldi	r24, 0x85	; 133
     c00:	93 e0       	ldi	r25, 0x03	; 3
     c02:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
     c06:	e0 91 d2 0d 	lds	r30, 0x0DD2
     c0a:	f0 91 d3 0d 	lds	r31, 0x0DD3
     c0e:	e6 59       	subi	r30, 0x96	; 150
     c10:	ff 4f       	sbci	r31, 0xFF	; 255
     c12:	01 90       	ld	r0, Z+
     c14:	f0 81       	ld	r31, Z
     c16:	e0 2d       	mov	r30, r0
     c18:	ce 01       	movw	r24, r28
     c1a:	08 96       	adiw	r24, 0x08	; 8
     c1c:	19 95       	eicall
     c1e:	88 85       	ldd	r24, Y+8	; 0x08
     c20:	80 ff       	sbrs	r24, 0
     c22:	09 c0       	rjmp	.+18     	; 0xc36 <FlashEnter4ByteAddressMode+0x78>
     c24:	e0 91 d2 0d 	lds	r30, 0x0DD2
     c28:	f0 91 d3 0d 	lds	r31, 0x0DD3
     c2c:	e9 5b       	subi	r30, 0xB9	; 185
     c2e:	ff 4f       	sbci	r31, 0xFF	; 255
     c30:	84 e0       	ldi	r24, 0x04	; 4
     c32:	80 83       	st	Z, r24
     c34:	08 c0       	rjmp	.+16     	; 0xc46 <FlashEnter4ByteAddressMode+0x88>
     c36:	e0 91 d2 0d 	lds	r30, 0x0DD2
     c3a:	f0 91 d3 0d 	lds	r31, 0x0DD3
     c3e:	e9 5b       	subi	r30, 0xB9	; 185
     c40:	ff 4f       	sbci	r31, 0xFF	; 255
     c42:	83 e0       	ldi	r24, 0x03	; 3
     c44:	80 83       	st	Z, r24
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	28 96       	adiw	r28, 0x08	; 8
     c4a:	0f b6       	in	r0, 0x3f	; 63
     c4c:	f8 94       	cli
     c4e:	de bf       	out	0x3e, r29	; 62
     c50:	0f be       	out	0x3f, r0	; 63
     c52:	cd bf       	out	0x3d, r28	; 61
     c54:	df 91       	pop	r29
     c56:	cf 91       	pop	r28
     c58:	08 95       	ret

00000c5a <Driver_Init>:
     c5a:	0f 93       	push	r16
     c5c:	1f 93       	push	r17
     c5e:	cf 93       	push	r28
     c60:	df 93       	push	r29
     c62:	00 d0       	rcall	.+0      	; 0xc64 <Driver_Init+0xa>
     c64:	1f 92       	push	r1
     c66:	1f 92       	push	r1
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
     c6c:	19 82       	std	Y+1, r1	; 0x01
     c6e:	1a 82       	std	Y+2, r1	; 0x02
     c70:	1b 82       	std	Y+3, r1	; 0x03
     c72:	1c 82       	std	Y+4, r1	; 0x04
     c74:	1d 82       	std	Y+5, r1	; 0x05
     c76:	90 93 d3 0d 	sts	0x0DD3, r25
     c7a:	80 93 d2 0d 	sts	0x0DD2, r24
     c7e:	ce 01       	movw	r24, r28
     c80:	02 96       	adiw	r24, 0x02	; 2
     c82:	99 dd       	rcall	.-1230   	; 0x7b6 <FlashReadDeviceIdentification>
     c84:	81 11       	cpse	r24, r1
     c86:	0c c0       	rjmp	.+24     	; 0xca0 <Driver_Init+0x46>
     c88:	e0 91 d2 0d 	lds	r30, 0x0DD2
     c8c:	f0 91 d3 0d 	lds	r31, 0x0DD3
     c90:	8a 81       	ldd	r24, Y+2	; 0x02
     c92:	9b 81       	ldd	r25, Y+3	; 0x03
     c94:	ac 81       	ldd	r26, Y+4	; 0x04
     c96:	bd 81       	ldd	r27, Y+5	; 0x05
     c98:	80 83       	st	Z, r24
     c9a:	91 83       	std	Z+1, r25	; 0x01
     c9c:	a2 83       	std	Z+2, r26	; 0x02
     c9e:	b3 83       	std	Z+3, r27	; 0x03
     ca0:	8a 81       	ldd	r24, Y+2	; 0x02
     ca2:	9b 81       	ldd	r25, Y+3	; 0x03
     ca4:	ac 81       	ldd	r26, Y+4	; 0x04
     ca6:	bd 81       	ldd	r27, Y+5	; 0x05
     ca8:	84 31       	cpi	r24, 0x14	; 20
     caa:	2b eb       	ldi	r18, 0xBB	; 187
     cac:	92 07       	cpc	r25, r18
     cae:	20 e2       	ldi	r18, 0x20	; 32
     cb0:	a2 07       	cpc	r26, r18
     cb2:	b1 05       	cpc	r27, r1
     cb4:	09 f0       	breq	.+2      	; 0xcb8 <Driver_Init+0x5e>
     cb6:	f0 c0       	rjmp	.+480    	; 0xe98 <Driver_Init+0x23e>
     cb8:	8c e9       	ldi	r24, 0x9C	; 156
     cba:	93 e0       	ldi	r25, 0x03	; 3
     cbc:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
     cc0:	e0 91 d2 0d 	lds	r30, 0x0DD2
     cc4:	f0 91 d3 0d 	lds	r31, 0x0DD3
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	a0 e1       	ldi	r26, 0x10	; 16
     cce:	b0 e0       	ldi	r27, 0x00	; 0
     cd0:	85 a7       	std	Z+45, r24	; 0x2d
     cd2:	96 a7       	std	Z+46, r25	; 0x2e
     cd4:	a7 a7       	std	Z+47, r26	; 0x2f
     cd6:	b0 ab       	std	Z+48, r27	; 0x30
     cd8:	80 e1       	ldi	r24, 0x10	; 16
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	a0 e0       	ldi	r26, 0x00	; 0
     cde:	b0 e0       	ldi	r27, 0x00	; 0
     ce0:	85 87       	std	Z+13, r24	; 0x0d
     ce2:	96 87       	std	Z+14, r25	; 0x0e
     ce4:	a7 87       	std	Z+15, r26	; 0x0f
     ce6:	b0 8b       	std	Z+16, r27	; 0x10
     ce8:	40 e0       	ldi	r20, 0x00	; 0
     cea:	50 e0       	ldi	r21, 0x00	; 0
     cec:	61 e0       	ldi	r22, 0x01	; 1
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	41 a3       	std	Z+33, r20	; 0x21
     cf2:	52 a3       	std	Z+34, r21	; 0x22
     cf4:	63 a3       	std	Z+35, r22	; 0x23
     cf6:	74 a3       	std	Z+36, r23	; 0x24
     cf8:	85 a3       	std	Z+37, r24	; 0x25
     cfa:	96 a3       	std	Z+38, r25	; 0x26
     cfc:	a7 a3       	std	Z+39, r26	; 0x27
     cfe:	b0 a7       	std	Z+40, r27	; 0x28
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	91 e0       	ldi	r25, 0x01	; 1
     d04:	a0 e0       	ldi	r26, 0x00	; 0
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	81 8b       	std	Z+17, r24	; 0x11
     d0a:	92 8b       	std	Z+18, r25	; 0x12
     d0c:	a3 8b       	std	Z+19, r26	; 0x13
     d0e:	b4 8b       	std	Z+20, r27	; 0x14
     d10:	40 e0       	ldi	r20, 0x00	; 0
     d12:	50 e1       	ldi	r21, 0x10	; 16
     d14:	60 e0       	ldi	r22, 0x00	; 0
     d16:	70 e0       	ldi	r23, 0x00	; 0
     d18:	41 a7       	std	Z+41, r20	; 0x29
     d1a:	52 a7       	std	Z+42, r21	; 0x2a
     d1c:	63 a7       	std	Z+43, r22	; 0x2b
     d1e:	74 a7       	std	Z+44, r23	; 0x2c
     d20:	0c e0       	ldi	r16, 0x0C	; 12
     d22:	10 e0       	ldi	r17, 0x00	; 0
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	05 8b       	std	Z+21, r16	; 0x15
     d2a:	16 8b       	std	Z+22, r17	; 0x16
     d2c:	27 8b       	std	Z+23, r18	; 0x17
     d2e:	30 8f       	std	Z+24, r19	; 0x18
     d30:	45 8f       	std	Z+29, r20	; 0x1d
     d32:	56 8f       	std	Z+30, r21	; 0x1e
     d34:	67 8f       	std	Z+31, r22	; 0x1f
     d36:	70 a3       	std	Z+32, r23	; 0x20
     d38:	81 8f       	std	Z+25, r24	; 0x19
     d3a:	92 8f       	std	Z+26, r25	; 0x1a
     d3c:	a3 8f       	std	Z+27, r26	; 0x1b
     d3e:	b4 8f       	std	Z+28, r27	; 0x1c
     d40:	80 e4       	ldi	r24, 0x40	; 64
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	a0 e0       	ldi	r26, 0x00	; 0
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	81 ab       	std	Z+49, r24	; 0x31
     d4a:	92 ab       	std	Z+50, r25	; 0x32
     d4c:	a3 ab       	std	Z+51, r26	; 0x33
     d4e:	b4 ab       	std	Z+52, r27	; 0x34
     d50:	8f ef       	ldi	r24, 0xFF	; 255
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	a0 e0       	ldi	r26, 0x00	; 0
     d56:	b0 e0       	ldi	r27, 0x00	; 0
     d58:	81 87       	std	Z+9, r24	; 0x09
     d5a:	92 87       	std	Z+10, r25	; 0x0a
     d5c:	a3 87       	std	Z+11, r26	; 0x0b
     d5e:	b4 87       	std	Z+12, r27	; 0x0c
     d60:	df 01       	movw	r26, r30
     d62:	a9 5b       	subi	r26, 0xB9	; 185
     d64:	bf 4f       	sbci	r27, 0xFF	; 255
     d66:	83 e0       	ldi	r24, 0x03	; 3
     d68:	8c 93       	st	X, r24
     d6a:	13 96       	adiw	r26, 0x03	; 3
     d6c:	8b ed       	ldi	r24, 0xDB	; 219
     d6e:	93 e0       	ldi	r25, 0x03	; 3
     d70:	11 96       	adiw	r26, 0x01	; 1
     d72:	9c 93       	st	X, r25
     d74:	8e 93       	st	-X, r24
     d76:	12 96       	adiw	r26, 0x02	; 2
     d78:	8e e5       	ldi	r24, 0x5E	; 94
     d7a:	94 e0       	ldi	r25, 0x04	; 4
     d7c:	11 96       	adiw	r26, 0x01	; 1
     d7e:	9c 93       	st	X, r25
     d80:	8e 93       	st	-X, r24
     d82:	12 96       	adiw	r26, 0x02	; 2
     d84:	87 ec       	ldi	r24, 0xC7	; 199
     d86:	92 e1       	ldi	r25, 0x12	; 18
     d88:	11 96       	adiw	r26, 0x01	; 1
     d8a:	9c 93       	st	X, r25
     d8c:	8e 93       	st	-X, r24
     d8e:	12 96       	adiw	r26, 0x02	; 2
     d90:	8e ed       	ldi	r24, 0xDE	; 222
     d92:	9f e0       	ldi	r25, 0x0F	; 15
     d94:	11 96       	adiw	r26, 0x01	; 1
     d96:	9c 93       	st	X, r25
     d98:	8e 93       	st	-X, r24
     d9a:	12 96       	adiw	r26, 0x02	; 2
     d9c:	88 ee       	ldi	r24, 0xE8	; 232
     d9e:	92 e1       	ldi	r25, 0x12	; 18
     da0:	11 96       	adiw	r26, 0x01	; 1
     da2:	9c 93       	st	X, r25
     da4:	8e 93       	st	-X, r24
     da6:	12 96       	adiw	r26, 0x02	; 2
     da8:	84 e6       	ldi	r24, 0x64	; 100
     daa:	93 e1       	ldi	r25, 0x13	; 19
     dac:	11 96       	adiw	r26, 0x01	; 1
     dae:	9c 93       	st	X, r25
     db0:	8e 93       	st	-X, r24
     db2:	12 96       	adiw	r26, 0x02	; 2
     db4:	11 96       	adiw	r26, 0x01	; 1
     db6:	1c 92       	st	X, r1
     db8:	1e 92       	st	-X, r1
     dba:	12 96       	adiw	r26, 0x02	; 2
     dbc:	11 96       	adiw	r26, 0x01	; 1
     dbe:	1c 92       	st	X, r1
     dc0:	1e 92       	st	-X, r1
     dc2:	50 97       	sbiw	r26, 0x10	; 16
     dc4:	8d ec       	ldi	r24, 0xCD	; 205
     dc6:	93 e0       	ldi	r25, 0x03	; 3
     dc8:	11 96       	adiw	r26, 0x01	; 1
     dca:	9c 93       	st	X, r25
     dcc:	8e 93       	st	-X, r24
     dce:	52 96       	adiw	r26, 0x12	; 18
     dd0:	8f e8       	ldi	r24, 0x8F	; 143
     dd2:	94 e0       	ldi	r25, 0x04	; 4
     dd4:	11 96       	adiw	r26, 0x01	; 1
     dd6:	9c 93       	st	X, r25
     dd8:	8e 93       	st	-X, r24
     dda:	12 96       	adiw	r26, 0x02	; 2
     ddc:	8e eb       	ldi	r24, 0xBE	; 190
     dde:	94 e0       	ldi	r25, 0x04	; 4
     de0:	11 96       	adiw	r26, 0x01	; 1
     de2:	9c 93       	st	X, r25
     de4:	8e 93       	st	-X, r24
     de6:	12 96       	adiw	r26, 0x02	; 2
     de8:	11 96       	adiw	r26, 0x01	; 1
     dea:	1c 92       	st	X, r1
     dec:	1e 92       	st	-X, r1
     dee:	12 96       	adiw	r26, 0x02	; 2
     df0:	11 96       	adiw	r26, 0x01	; 1
     df2:	1c 92       	st	X, r1
     df4:	1e 92       	st	-X, r1
     df6:	12 96       	adiw	r26, 0x02	; 2
     df8:	8d ee       	ldi	r24, 0xED	; 237
     dfa:	94 e0       	ldi	r25, 0x04	; 4
     dfc:	11 96       	adiw	r26, 0x01	; 1
     dfe:	9c 93       	st	X, r25
     e00:	8e 93       	st	-X, r24
     e02:	12 96       	adiw	r26, 0x02	; 2
     e04:	86 e1       	ldi	r24, 0x16	; 22
     e06:	95 e0       	ldi	r25, 0x05	; 5
     e08:	11 96       	adiw	r26, 0x01	; 1
     e0a:	9c 93       	st	X, r25
     e0c:	8e 93       	st	-X, r24
     e0e:	12 96       	adiw	r26, 0x02	; 2
     e10:	8c e4       	ldi	r24, 0x4C	; 76
     e12:	95 e0       	ldi	r25, 0x05	; 5
     e14:	11 96       	adiw	r26, 0x01	; 1
     e16:	9c 93       	st	X, r25
     e18:	8e 93       	st	-X, r24
     e1a:	12 96       	adiw	r26, 0x02	; 2
     e1c:	8d e7       	ldi	r24, 0x7D	; 125
     e1e:	95 e0       	ldi	r25, 0x05	; 5
     e20:	11 96       	adiw	r26, 0x01	; 1
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 96       	adiw	r26, 0x02	; 2
     e28:	8e ea       	ldi	r24, 0xAE	; 174
     e2a:	95 e0       	ldi	r25, 0x05	; 5
     e2c:	11 96       	adiw	r26, 0x01	; 1
     e2e:	9c 93       	st	X, r25
     e30:	8e 93       	st	-X, r24
     e32:	12 96       	adiw	r26, 0x02	; 2
     e34:	8b ea       	ldi	r24, 0xAB	; 171
     e36:	94 e1       	ldi	r25, 0x14	; 20
     e38:	11 96       	adiw	r26, 0x01	; 1
     e3a:	9c 93       	st	X, r25
     e3c:	8e 93       	st	-X, r24
     e3e:	12 96       	adiw	r26, 0x02	; 2
     e40:	89 e4       	ldi	r24, 0x49	; 73
     e42:	94 e1       	ldi	r25, 0x14	; 20
     e44:	11 96       	adiw	r26, 0x01	; 1
     e46:	9c 93       	st	X, r25
     e48:	8e 93       	st	-X, r24
     e4a:	12 96       	adiw	r26, 0x02	; 2
     e4c:	8a e7       	ldi	r24, 0x7A	; 122
     e4e:	94 e1       	ldi	r25, 0x14	; 20
     e50:	11 96       	adiw	r26, 0x01	; 1
     e52:	9c 93       	st	X, r25
     e54:	8e 93       	st	-X, r24
     e56:	12 96       	adiw	r26, 0x02	; 2
     e58:	11 96       	adiw	r26, 0x01	; 1
     e5a:	1c 92       	st	X, r1
     e5c:	1e 92       	st	-X, r1
     e5e:	12 96       	adiw	r26, 0x02	; 2
     e60:	11 96       	adiw	r26, 0x01	; 1
     e62:	1c 92       	st	X, r1
     e64:	1e 92       	st	-X, r1
     e66:	12 96       	adiw	r26, 0x02	; 2
     e68:	8e eb       	ldi	r24, 0xBE	; 190
     e6a:	90 e1       	ldi	r25, 0x10	; 16
     e6c:	11 96       	adiw	r26, 0x01	; 1
     e6e:	9c 93       	st	X, r25
     e70:	8e 93       	st	-X, r24
     e72:	12 96       	adiw	r26, 0x02	; 2
     e74:	86 e8       	ldi	r24, 0x86	; 134
     e76:	91 e1       	ldi	r25, 0x11	; 17
     e78:	11 96       	adiw	r26, 0x01	; 1
     e7a:	9c 93       	st	X, r25
     e7c:	8e 93       	st	-X, r24
     e7e:	12 96       	adiw	r26, 0x02	; 2
     e80:	84 e3       	ldi	r24, 0x34	; 52
     e82:	95 e1       	ldi	r25, 0x15	; 21
     e84:	8d 93       	st	X+, r24
     e86:	9c 93       	st	X, r25
     e88:	e4 58       	subi	r30, 0x84	; 132
     e8a:	ff 4f       	sbci	r31, 0xFF	; 255
     e8c:	87 e1       	ldi	r24, 0x17	; 23
     e8e:	90 e1       	ldi	r25, 0x10	; 16
     e90:	91 83       	std	Z+1, r25	; 0x01
     e92:	80 83       	st	Z, r24
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	a6 c7       	rjmp	.+3916   	; 0x1de4 <Driver_Init+0x118a>
     e98:	85 31       	cpi	r24, 0x15	; 21
     e9a:	2b eb       	ldi	r18, 0xBB	; 187
     e9c:	92 07       	cpc	r25, r18
     e9e:	20 e2       	ldi	r18, 0x20	; 32
     ea0:	a2 07       	cpc	r26, r18
     ea2:	b1 05       	cpc	r27, r1
     ea4:	09 f0       	breq	.+2      	; 0xea8 <Driver_Init+0x24e>
     ea6:	fc c0       	rjmp	.+504    	; 0x10a0 <Driver_Init+0x446>
     ea8:	8b ea       	ldi	r24, 0xAB	; 171
     eaa:	93 e0       	ldi	r25, 0x03	; 3
     eac:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
     eb0:	e0 91 d2 0d 	lds	r30, 0x0DD2
     eb4:	f0 91 d3 0d 	lds	r31, 0x0DD3
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	a0 e2       	ldi	r26, 0x20	; 32
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	85 a7       	std	Z+45, r24	; 0x2d
     ec2:	96 a7       	std	Z+46, r25	; 0x2e
     ec4:	a7 a7       	std	Z+47, r26	; 0x2f
     ec6:	b0 ab       	std	Z+48, r27	; 0x30
     ec8:	80 e2       	ldi	r24, 0x20	; 32
     eca:	90 e0       	ldi	r25, 0x00	; 0
     ecc:	a0 e0       	ldi	r26, 0x00	; 0
     ece:	b0 e0       	ldi	r27, 0x00	; 0
     ed0:	85 87       	std	Z+13, r24	; 0x0d
     ed2:	96 87       	std	Z+14, r25	; 0x0e
     ed4:	a7 87       	std	Z+15, r26	; 0x0f
     ed6:	b0 8b       	std	Z+16, r27	; 0x10
     ed8:	80 e0       	ldi	r24, 0x00	; 0
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	a1 e0       	ldi	r26, 0x01	; 1
     ede:	b0 e0       	ldi	r27, 0x00	; 0
     ee0:	81 a3       	std	Z+33, r24	; 0x21
     ee2:	92 a3       	std	Z+34, r25	; 0x22
     ee4:	a3 a3       	std	Z+35, r26	; 0x23
     ee6:	b4 a3       	std	Z+36, r27	; 0x24
     ee8:	80 e1       	ldi	r24, 0x10	; 16
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	a0 e0       	ldi	r26, 0x00	; 0
     eee:	b0 e0       	ldi	r27, 0x00	; 0
     ef0:	85 a3       	std	Z+37, r24	; 0x25
     ef2:	96 a3       	std	Z+38, r25	; 0x26
     ef4:	a7 a3       	std	Z+39, r26	; 0x27
     ef6:	b0 a7       	std	Z+40, r27	; 0x28
     ef8:	80 e0       	ldi	r24, 0x00	; 0
     efa:	92 e0       	ldi	r25, 0x02	; 2
     efc:	a0 e0       	ldi	r26, 0x00	; 0
     efe:	b0 e0       	ldi	r27, 0x00	; 0
     f00:	81 8b       	std	Z+17, r24	; 0x11
     f02:	92 8b       	std	Z+18, r25	; 0x12
     f04:	a3 8b       	std	Z+19, r26	; 0x13
     f06:	b4 8b       	std	Z+20, r27	; 0x14
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	90 e1       	ldi	r25, 0x10	; 16
     f0c:	a0 e0       	ldi	r26, 0x00	; 0
     f0e:	b0 e0       	ldi	r27, 0x00	; 0
     f10:	81 a7       	std	Z+41, r24	; 0x29
     f12:	92 a7       	std	Z+42, r25	; 0x2a
     f14:	a3 a7       	std	Z+43, r26	; 0x2b
     f16:	b4 a7       	std	Z+44, r27	; 0x2c
     f18:	8c e0       	ldi	r24, 0x0C	; 12
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	a0 e0       	ldi	r26, 0x00	; 0
     f1e:	b0 e0       	ldi	r27, 0x00	; 0
     f20:	85 8b       	std	Z+21, r24	; 0x15
     f22:	96 8b       	std	Z+22, r25	; 0x16
     f24:	a7 8b       	std	Z+23, r26	; 0x17
     f26:	b0 8f       	std	Z+24, r27	; 0x18
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e2       	ldi	r25, 0x20	; 32
     f2c:	a0 e0       	ldi	r26, 0x00	; 0
     f2e:	b0 e0       	ldi	r27, 0x00	; 0
     f30:	85 8f       	std	Z+29, r24	; 0x1d
     f32:	96 8f       	std	Z+30, r25	; 0x1e
     f34:	a7 8f       	std	Z+31, r26	; 0x1f
     f36:	b0 a3       	std	Z+32, r27	; 0x20
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	a0 e0       	ldi	r26, 0x00	; 0
     f3e:	b0 e0       	ldi	r27, 0x00	; 0
     f40:	81 8f       	std	Z+25, r24	; 0x19
     f42:	92 8f       	std	Z+26, r25	; 0x1a
     f44:	a3 8f       	std	Z+27, r26	; 0x1b
     f46:	b4 8f       	std	Z+28, r27	; 0x1c
     f48:	80 e4       	ldi	r24, 0x40	; 64
     f4a:	90 e0       	ldi	r25, 0x00	; 0
     f4c:	a0 e0       	ldi	r26, 0x00	; 0
     f4e:	b0 e0       	ldi	r27, 0x00	; 0
     f50:	81 ab       	std	Z+49, r24	; 0x31
     f52:	92 ab       	std	Z+50, r25	; 0x32
     f54:	a3 ab       	std	Z+51, r26	; 0x33
     f56:	b4 ab       	std	Z+52, r27	; 0x34
     f58:	8f ef       	ldi	r24, 0xFF	; 255
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	a0 e0       	ldi	r26, 0x00	; 0
     f5e:	b0 e0       	ldi	r27, 0x00	; 0
     f60:	81 87       	std	Z+9, r24	; 0x09
     f62:	92 87       	std	Z+10, r25	; 0x0a
     f64:	a3 87       	std	Z+11, r26	; 0x0b
     f66:	b4 87       	std	Z+12, r27	; 0x0c
     f68:	df 01       	movw	r26, r30
     f6a:	a9 5b       	subi	r26, 0xB9	; 185
     f6c:	bf 4f       	sbci	r27, 0xFF	; 255
     f6e:	83 e0       	ldi	r24, 0x03	; 3
     f70:	8c 93       	st	X, r24
     f72:	13 96       	adiw	r26, 0x03	; 3
     f74:	8b ed       	ldi	r24, 0xDB	; 219
     f76:	93 e0       	ldi	r25, 0x03	; 3
     f78:	11 96       	adiw	r26, 0x01	; 1
     f7a:	9c 93       	st	X, r25
     f7c:	8e 93       	st	-X, r24
     f7e:	12 96       	adiw	r26, 0x02	; 2
     f80:	8e e5       	ldi	r24, 0x5E	; 94
     f82:	94 e0       	ldi	r25, 0x04	; 4
     f84:	11 96       	adiw	r26, 0x01	; 1
     f86:	9c 93       	st	X, r25
     f88:	8e 93       	st	-X, r24
     f8a:	12 96       	adiw	r26, 0x02	; 2
     f8c:	87 ec       	ldi	r24, 0xC7	; 199
     f8e:	92 e1       	ldi	r25, 0x12	; 18
     f90:	11 96       	adiw	r26, 0x01	; 1
     f92:	9c 93       	st	X, r25
     f94:	8e 93       	st	-X, r24
     f96:	12 96       	adiw	r26, 0x02	; 2
     f98:	8e ed       	ldi	r24, 0xDE	; 222
     f9a:	9f e0       	ldi	r25, 0x0F	; 15
     f9c:	11 96       	adiw	r26, 0x01	; 1
     f9e:	9c 93       	st	X, r25
     fa0:	8e 93       	st	-X, r24
     fa2:	12 96       	adiw	r26, 0x02	; 2
     fa4:	88 ee       	ldi	r24, 0xE8	; 232
     fa6:	92 e1       	ldi	r25, 0x12	; 18
     fa8:	11 96       	adiw	r26, 0x01	; 1
     faa:	9c 93       	st	X, r25
     fac:	8e 93       	st	-X, r24
     fae:	12 96       	adiw	r26, 0x02	; 2
     fb0:	84 e6       	ldi	r24, 0x64	; 100
     fb2:	93 e1       	ldi	r25, 0x13	; 19
     fb4:	11 96       	adiw	r26, 0x01	; 1
     fb6:	9c 93       	st	X, r25
     fb8:	8e 93       	st	-X, r24
     fba:	12 96       	adiw	r26, 0x02	; 2
     fbc:	11 96       	adiw	r26, 0x01	; 1
     fbe:	1c 92       	st	X, r1
     fc0:	1e 92       	st	-X, r1
     fc2:	12 96       	adiw	r26, 0x02	; 2
     fc4:	11 96       	adiw	r26, 0x01	; 1
     fc6:	1c 92       	st	X, r1
     fc8:	1e 92       	st	-X, r1
     fca:	50 97       	sbiw	r26, 0x10	; 16
     fcc:	8d ec       	ldi	r24, 0xCD	; 205
     fce:	93 e0       	ldi	r25, 0x03	; 3
     fd0:	11 96       	adiw	r26, 0x01	; 1
     fd2:	9c 93       	st	X, r25
     fd4:	8e 93       	st	-X, r24
     fd6:	52 96       	adiw	r26, 0x12	; 18
     fd8:	8f e8       	ldi	r24, 0x8F	; 143
     fda:	94 e0       	ldi	r25, 0x04	; 4
     fdc:	11 96       	adiw	r26, 0x01	; 1
     fde:	9c 93       	st	X, r25
     fe0:	8e 93       	st	-X, r24
     fe2:	12 96       	adiw	r26, 0x02	; 2
     fe4:	8e eb       	ldi	r24, 0xBE	; 190
     fe6:	94 e0       	ldi	r25, 0x04	; 4
     fe8:	11 96       	adiw	r26, 0x01	; 1
     fea:	9c 93       	st	X, r25
     fec:	8e 93       	st	-X, r24
     fee:	12 96       	adiw	r26, 0x02	; 2
     ff0:	11 96       	adiw	r26, 0x01	; 1
     ff2:	1c 92       	st	X, r1
     ff4:	1e 92       	st	-X, r1
     ff6:	12 96       	adiw	r26, 0x02	; 2
     ff8:	11 96       	adiw	r26, 0x01	; 1
     ffa:	1c 92       	st	X, r1
     ffc:	1e 92       	st	-X, r1
     ffe:	12 96       	adiw	r26, 0x02	; 2
    1000:	8d ee       	ldi	r24, 0xED	; 237
    1002:	94 e0       	ldi	r25, 0x04	; 4
    1004:	11 96       	adiw	r26, 0x01	; 1
    1006:	9c 93       	st	X, r25
    1008:	8e 93       	st	-X, r24
    100a:	12 96       	adiw	r26, 0x02	; 2
    100c:	86 e1       	ldi	r24, 0x16	; 22
    100e:	95 e0       	ldi	r25, 0x05	; 5
    1010:	11 96       	adiw	r26, 0x01	; 1
    1012:	9c 93       	st	X, r25
    1014:	8e 93       	st	-X, r24
    1016:	12 96       	adiw	r26, 0x02	; 2
    1018:	8c e4       	ldi	r24, 0x4C	; 76
    101a:	95 e0       	ldi	r25, 0x05	; 5
    101c:	11 96       	adiw	r26, 0x01	; 1
    101e:	9c 93       	st	X, r25
    1020:	8e 93       	st	-X, r24
    1022:	12 96       	adiw	r26, 0x02	; 2
    1024:	8d e7       	ldi	r24, 0x7D	; 125
    1026:	95 e0       	ldi	r25, 0x05	; 5
    1028:	11 96       	adiw	r26, 0x01	; 1
    102a:	9c 93       	st	X, r25
    102c:	8e 93       	st	-X, r24
    102e:	12 96       	adiw	r26, 0x02	; 2
    1030:	8e ea       	ldi	r24, 0xAE	; 174
    1032:	95 e0       	ldi	r25, 0x05	; 5
    1034:	11 96       	adiw	r26, 0x01	; 1
    1036:	9c 93       	st	X, r25
    1038:	8e 93       	st	-X, r24
    103a:	12 96       	adiw	r26, 0x02	; 2
    103c:	8b ea       	ldi	r24, 0xAB	; 171
    103e:	94 e1       	ldi	r25, 0x14	; 20
    1040:	11 96       	adiw	r26, 0x01	; 1
    1042:	9c 93       	st	X, r25
    1044:	8e 93       	st	-X, r24
    1046:	12 96       	adiw	r26, 0x02	; 2
    1048:	89 e4       	ldi	r24, 0x49	; 73
    104a:	94 e1       	ldi	r25, 0x14	; 20
    104c:	11 96       	adiw	r26, 0x01	; 1
    104e:	9c 93       	st	X, r25
    1050:	8e 93       	st	-X, r24
    1052:	12 96       	adiw	r26, 0x02	; 2
    1054:	8a e7       	ldi	r24, 0x7A	; 122
    1056:	94 e1       	ldi	r25, 0x14	; 20
    1058:	11 96       	adiw	r26, 0x01	; 1
    105a:	9c 93       	st	X, r25
    105c:	8e 93       	st	-X, r24
    105e:	12 96       	adiw	r26, 0x02	; 2
    1060:	11 96       	adiw	r26, 0x01	; 1
    1062:	1c 92       	st	X, r1
    1064:	1e 92       	st	-X, r1
    1066:	12 96       	adiw	r26, 0x02	; 2
    1068:	11 96       	adiw	r26, 0x01	; 1
    106a:	1c 92       	st	X, r1
    106c:	1e 92       	st	-X, r1
    106e:	12 96       	adiw	r26, 0x02	; 2
    1070:	8e eb       	ldi	r24, 0xBE	; 190
    1072:	90 e1       	ldi	r25, 0x10	; 16
    1074:	11 96       	adiw	r26, 0x01	; 1
    1076:	9c 93       	st	X, r25
    1078:	8e 93       	st	-X, r24
    107a:	12 96       	adiw	r26, 0x02	; 2
    107c:	86 e8       	ldi	r24, 0x86	; 134
    107e:	91 e1       	ldi	r25, 0x11	; 17
    1080:	11 96       	adiw	r26, 0x01	; 1
    1082:	9c 93       	st	X, r25
    1084:	8e 93       	st	-X, r24
    1086:	12 96       	adiw	r26, 0x02	; 2
    1088:	84 e3       	ldi	r24, 0x34	; 52
    108a:	95 e1       	ldi	r25, 0x15	; 21
    108c:	8d 93       	st	X+, r24
    108e:	9c 93       	st	X, r25
    1090:	e4 58       	subi	r30, 0x84	; 132
    1092:	ff 4f       	sbci	r31, 0xFF	; 255
    1094:	87 e1       	ldi	r24, 0x17	; 23
    1096:	90 e1       	ldi	r25, 0x10	; 16
    1098:	91 83       	std	Z+1, r25	; 0x01
    109a:	80 83       	st	Z, r24
    109c:	80 e0       	ldi	r24, 0x00	; 0
    109e:	a2 c6       	rjmp	.+3396   	; 0x1de4 <Driver_Init+0x118a>
    10a0:	86 31       	cpi	r24, 0x16	; 22
    10a2:	2a eb       	ldi	r18, 0xBA	; 186
    10a4:	92 07       	cpc	r25, r18
    10a6:	20 e2       	ldi	r18, 0x20	; 32
    10a8:	a2 07       	cpc	r26, r18
    10aa:	b1 05       	cpc	r27, r1
    10ac:	09 f0       	breq	.+2      	; 0x10b0 <Driver_Init+0x456>
    10ae:	f8 c0       	rjmp	.+496    	; 0x12a0 <Driver_Init+0x646>
    10b0:	8b eb       	ldi	r24, 0xBB	; 187
    10b2:	93 e0       	ldi	r25, 0x03	; 3
    10b4:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
    10b8:	e0 91 d2 0d 	lds	r30, 0x0DD2
    10bc:	f0 91 d3 0d 	lds	r31, 0x0DD3
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	a0 e4       	ldi	r26, 0x40	; 64
    10c6:	b0 e0       	ldi	r27, 0x00	; 0
    10c8:	85 a7       	std	Z+45, r24	; 0x2d
    10ca:	96 a7       	std	Z+46, r25	; 0x2e
    10cc:	a7 a7       	std	Z+47, r26	; 0x2f
    10ce:	b0 ab       	std	Z+48, r27	; 0x30
    10d0:	80 e4       	ldi	r24, 0x40	; 64
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	a0 e0       	ldi	r26, 0x00	; 0
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	85 87       	std	Z+13, r24	; 0x0d
    10da:	96 87       	std	Z+14, r25	; 0x0e
    10dc:	a7 87       	std	Z+15, r26	; 0x0f
    10de:	b0 8b       	std	Z+16, r27	; 0x10
    10e0:	40 e0       	ldi	r20, 0x00	; 0
    10e2:	50 e0       	ldi	r21, 0x00	; 0
    10e4:	61 e0       	ldi	r22, 0x01	; 1
    10e6:	70 e0       	ldi	r23, 0x00	; 0
    10e8:	41 a3       	std	Z+33, r20	; 0x21
    10ea:	52 a3       	std	Z+34, r21	; 0x22
    10ec:	63 a3       	std	Z+35, r22	; 0x23
    10ee:	74 a3       	std	Z+36, r23	; 0x24
    10f0:	40 e1       	ldi	r20, 0x10	; 16
    10f2:	50 e0       	ldi	r21, 0x00	; 0
    10f4:	60 e0       	ldi	r22, 0x00	; 0
    10f6:	70 e0       	ldi	r23, 0x00	; 0
    10f8:	45 a3       	std	Z+37, r20	; 0x25
    10fa:	56 a3       	std	Z+38, r21	; 0x26
    10fc:	67 a3       	std	Z+39, r22	; 0x27
    10fe:	70 a7       	std	Z+40, r23	; 0x28
    1100:	40 e0       	ldi	r20, 0x00	; 0
    1102:	54 e0       	ldi	r21, 0x04	; 4
    1104:	60 e0       	ldi	r22, 0x00	; 0
    1106:	70 e0       	ldi	r23, 0x00	; 0
    1108:	41 8b       	std	Z+17, r20	; 0x11
    110a:	52 8b       	std	Z+18, r21	; 0x12
    110c:	63 8b       	std	Z+19, r22	; 0x13
    110e:	74 8b       	std	Z+20, r23	; 0x14
    1110:	40 e0       	ldi	r20, 0x00	; 0
    1112:	50 e1       	ldi	r21, 0x10	; 16
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	70 e0       	ldi	r23, 0x00	; 0
    1118:	41 a7       	std	Z+41, r20	; 0x29
    111a:	52 a7       	std	Z+42, r21	; 0x2a
    111c:	63 a7       	std	Z+43, r22	; 0x2b
    111e:	74 a7       	std	Z+44, r23	; 0x2c
    1120:	4c e0       	ldi	r20, 0x0C	; 12
    1122:	50 e0       	ldi	r21, 0x00	; 0
    1124:	60 e0       	ldi	r22, 0x00	; 0
    1126:	70 e0       	ldi	r23, 0x00	; 0
    1128:	45 8b       	std	Z+21, r20	; 0x15
    112a:	56 8b       	std	Z+22, r21	; 0x16
    112c:	67 8b       	std	Z+23, r22	; 0x17
    112e:	70 8f       	std	Z+24, r23	; 0x18
    1130:	40 e0       	ldi	r20, 0x00	; 0
    1132:	50 e4       	ldi	r21, 0x40	; 64
    1134:	60 e0       	ldi	r22, 0x00	; 0
    1136:	70 e0       	ldi	r23, 0x00	; 0
    1138:	45 8f       	std	Z+29, r20	; 0x1d
    113a:	56 8f       	std	Z+30, r21	; 0x1e
    113c:	67 8f       	std	Z+31, r22	; 0x1f
    113e:	70 a3       	std	Z+32, r23	; 0x20
    1140:	40 e0       	ldi	r20, 0x00	; 0
    1142:	51 e0       	ldi	r21, 0x01	; 1
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	70 e0       	ldi	r23, 0x00	; 0
    1148:	41 8f       	std	Z+25, r20	; 0x19
    114a:	52 8f       	std	Z+26, r21	; 0x1a
    114c:	63 8f       	std	Z+27, r22	; 0x1b
    114e:	74 8f       	std	Z+28, r23	; 0x1c
    1150:	81 ab       	std	Z+49, r24	; 0x31
    1152:	92 ab       	std	Z+50, r25	; 0x32
    1154:	a3 ab       	std	Z+51, r26	; 0x33
    1156:	b4 ab       	std	Z+52, r27	; 0x34
    1158:	8f ef       	ldi	r24, 0xFF	; 255
    115a:	90 e0       	ldi	r25, 0x00	; 0
    115c:	a0 e0       	ldi	r26, 0x00	; 0
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	81 87       	std	Z+9, r24	; 0x09
    1162:	92 87       	std	Z+10, r25	; 0x0a
    1164:	a3 87       	std	Z+11, r26	; 0x0b
    1166:	b4 87       	std	Z+12, r27	; 0x0c
    1168:	df 01       	movw	r26, r30
    116a:	a9 5b       	subi	r26, 0xB9	; 185
    116c:	bf 4f       	sbci	r27, 0xFF	; 255
    116e:	83 e0       	ldi	r24, 0x03	; 3
    1170:	8c 93       	st	X, r24
    1172:	13 96       	adiw	r26, 0x03	; 3
    1174:	8b ed       	ldi	r24, 0xDB	; 219
    1176:	93 e0       	ldi	r25, 0x03	; 3
    1178:	11 96       	adiw	r26, 0x01	; 1
    117a:	9c 93       	st	X, r25
    117c:	8e 93       	st	-X, r24
    117e:	12 96       	adiw	r26, 0x02	; 2
    1180:	8e e5       	ldi	r24, 0x5E	; 94
    1182:	94 e0       	ldi	r25, 0x04	; 4
    1184:	11 96       	adiw	r26, 0x01	; 1
    1186:	9c 93       	st	X, r25
    1188:	8e 93       	st	-X, r24
    118a:	12 96       	adiw	r26, 0x02	; 2
    118c:	87 ec       	ldi	r24, 0xC7	; 199
    118e:	92 e1       	ldi	r25, 0x12	; 18
    1190:	11 96       	adiw	r26, 0x01	; 1
    1192:	9c 93       	st	X, r25
    1194:	8e 93       	st	-X, r24
    1196:	12 96       	adiw	r26, 0x02	; 2
    1198:	8e ed       	ldi	r24, 0xDE	; 222
    119a:	9f e0       	ldi	r25, 0x0F	; 15
    119c:	11 96       	adiw	r26, 0x01	; 1
    119e:	9c 93       	st	X, r25
    11a0:	8e 93       	st	-X, r24
    11a2:	12 96       	adiw	r26, 0x02	; 2
    11a4:	88 ee       	ldi	r24, 0xE8	; 232
    11a6:	92 e1       	ldi	r25, 0x12	; 18
    11a8:	11 96       	adiw	r26, 0x01	; 1
    11aa:	9c 93       	st	X, r25
    11ac:	8e 93       	st	-X, r24
    11ae:	12 96       	adiw	r26, 0x02	; 2
    11b0:	84 e6       	ldi	r24, 0x64	; 100
    11b2:	93 e1       	ldi	r25, 0x13	; 19
    11b4:	11 96       	adiw	r26, 0x01	; 1
    11b6:	9c 93       	st	X, r25
    11b8:	8e 93       	st	-X, r24
    11ba:	12 96       	adiw	r26, 0x02	; 2
    11bc:	11 96       	adiw	r26, 0x01	; 1
    11be:	1c 92       	st	X, r1
    11c0:	1e 92       	st	-X, r1
    11c2:	12 96       	adiw	r26, 0x02	; 2
    11c4:	11 96       	adiw	r26, 0x01	; 1
    11c6:	1c 92       	st	X, r1
    11c8:	1e 92       	st	-X, r1
    11ca:	50 97       	sbiw	r26, 0x10	; 16
    11cc:	8d ec       	ldi	r24, 0xCD	; 205
    11ce:	93 e0       	ldi	r25, 0x03	; 3
    11d0:	11 96       	adiw	r26, 0x01	; 1
    11d2:	9c 93       	st	X, r25
    11d4:	8e 93       	st	-X, r24
    11d6:	52 96       	adiw	r26, 0x12	; 18
    11d8:	8f e8       	ldi	r24, 0x8F	; 143
    11da:	94 e0       	ldi	r25, 0x04	; 4
    11dc:	11 96       	adiw	r26, 0x01	; 1
    11de:	9c 93       	st	X, r25
    11e0:	8e 93       	st	-X, r24
    11e2:	12 96       	adiw	r26, 0x02	; 2
    11e4:	8e eb       	ldi	r24, 0xBE	; 190
    11e6:	94 e0       	ldi	r25, 0x04	; 4
    11e8:	11 96       	adiw	r26, 0x01	; 1
    11ea:	9c 93       	st	X, r25
    11ec:	8e 93       	st	-X, r24
    11ee:	12 96       	adiw	r26, 0x02	; 2
    11f0:	11 96       	adiw	r26, 0x01	; 1
    11f2:	1c 92       	st	X, r1
    11f4:	1e 92       	st	-X, r1
    11f6:	12 96       	adiw	r26, 0x02	; 2
    11f8:	11 96       	adiw	r26, 0x01	; 1
    11fa:	1c 92       	st	X, r1
    11fc:	1e 92       	st	-X, r1
    11fe:	12 96       	adiw	r26, 0x02	; 2
    1200:	8d ee       	ldi	r24, 0xED	; 237
    1202:	94 e0       	ldi	r25, 0x04	; 4
    1204:	11 96       	adiw	r26, 0x01	; 1
    1206:	9c 93       	st	X, r25
    1208:	8e 93       	st	-X, r24
    120a:	12 96       	adiw	r26, 0x02	; 2
    120c:	86 e1       	ldi	r24, 0x16	; 22
    120e:	95 e0       	ldi	r25, 0x05	; 5
    1210:	11 96       	adiw	r26, 0x01	; 1
    1212:	9c 93       	st	X, r25
    1214:	8e 93       	st	-X, r24
    1216:	12 96       	adiw	r26, 0x02	; 2
    1218:	8c e4       	ldi	r24, 0x4C	; 76
    121a:	95 e0       	ldi	r25, 0x05	; 5
    121c:	11 96       	adiw	r26, 0x01	; 1
    121e:	9c 93       	st	X, r25
    1220:	8e 93       	st	-X, r24
    1222:	12 96       	adiw	r26, 0x02	; 2
    1224:	8d e7       	ldi	r24, 0x7D	; 125
    1226:	95 e0       	ldi	r25, 0x05	; 5
    1228:	11 96       	adiw	r26, 0x01	; 1
    122a:	9c 93       	st	X, r25
    122c:	8e 93       	st	-X, r24
    122e:	12 96       	adiw	r26, 0x02	; 2
    1230:	8e ea       	ldi	r24, 0xAE	; 174
    1232:	95 e0       	ldi	r25, 0x05	; 5
    1234:	11 96       	adiw	r26, 0x01	; 1
    1236:	9c 93       	st	X, r25
    1238:	8e 93       	st	-X, r24
    123a:	12 96       	adiw	r26, 0x02	; 2
    123c:	8b ea       	ldi	r24, 0xAB	; 171
    123e:	94 e1       	ldi	r25, 0x14	; 20
    1240:	11 96       	adiw	r26, 0x01	; 1
    1242:	9c 93       	st	X, r25
    1244:	8e 93       	st	-X, r24
    1246:	12 96       	adiw	r26, 0x02	; 2
    1248:	89 e4       	ldi	r24, 0x49	; 73
    124a:	94 e1       	ldi	r25, 0x14	; 20
    124c:	11 96       	adiw	r26, 0x01	; 1
    124e:	9c 93       	st	X, r25
    1250:	8e 93       	st	-X, r24
    1252:	12 96       	adiw	r26, 0x02	; 2
    1254:	8a e7       	ldi	r24, 0x7A	; 122
    1256:	94 e1       	ldi	r25, 0x14	; 20
    1258:	11 96       	adiw	r26, 0x01	; 1
    125a:	9c 93       	st	X, r25
    125c:	8e 93       	st	-X, r24
    125e:	12 96       	adiw	r26, 0x02	; 2
    1260:	11 96       	adiw	r26, 0x01	; 1
    1262:	1c 92       	st	X, r1
    1264:	1e 92       	st	-X, r1
    1266:	12 96       	adiw	r26, 0x02	; 2
    1268:	11 96       	adiw	r26, 0x01	; 1
    126a:	1c 92       	st	X, r1
    126c:	1e 92       	st	-X, r1
    126e:	12 96       	adiw	r26, 0x02	; 2
    1270:	8e eb       	ldi	r24, 0xBE	; 190
    1272:	90 e1       	ldi	r25, 0x10	; 16
    1274:	11 96       	adiw	r26, 0x01	; 1
    1276:	9c 93       	st	X, r25
    1278:	8e 93       	st	-X, r24
    127a:	12 96       	adiw	r26, 0x02	; 2
    127c:	86 e8       	ldi	r24, 0x86	; 134
    127e:	91 e1       	ldi	r25, 0x11	; 17
    1280:	11 96       	adiw	r26, 0x01	; 1
    1282:	9c 93       	st	X, r25
    1284:	8e 93       	st	-X, r24
    1286:	12 96       	adiw	r26, 0x02	; 2
    1288:	84 e3       	ldi	r24, 0x34	; 52
    128a:	95 e1       	ldi	r25, 0x15	; 21
    128c:	8d 93       	st	X+, r24
    128e:	9c 93       	st	X, r25
    1290:	e4 58       	subi	r30, 0x84	; 132
    1292:	ff 4f       	sbci	r31, 0xFF	; 255
    1294:	87 e1       	ldi	r24, 0x17	; 23
    1296:	90 e1       	ldi	r25, 0x10	; 16
    1298:	91 83       	std	Z+1, r25	; 0x01
    129a:	80 83       	st	Z, r24
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	a2 c5       	rjmp	.+2884   	; 0x1de4 <Driver_Init+0x118a>
    12a0:	87 31       	cpi	r24, 0x17	; 23
    12a2:	2a eb       	ldi	r18, 0xBA	; 186
    12a4:	92 07       	cpc	r25, r18
    12a6:	20 e2       	ldi	r18, 0x20	; 32
    12a8:	a2 07       	cpc	r26, r18
    12aa:	b1 05       	cpc	r27, r1
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <Driver_Init+0x656>
    12ae:	fc c0       	rjmp	.+504    	; 0x14a8 <Driver_Init+0x84e>
    12b0:	8b ec       	ldi	r24, 0xCB	; 203
    12b2:	93 e0       	ldi	r25, 0x03	; 3
    12b4:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
    12b8:	e0 91 d2 0d 	lds	r30, 0x0DD2
    12bc:	f0 91 d3 0d 	lds	r31, 0x0DD3
    12c0:	80 e0       	ldi	r24, 0x00	; 0
    12c2:	90 e0       	ldi	r25, 0x00	; 0
    12c4:	a0 e8       	ldi	r26, 0x80	; 128
    12c6:	b0 e0       	ldi	r27, 0x00	; 0
    12c8:	85 a7       	std	Z+45, r24	; 0x2d
    12ca:	96 a7       	std	Z+46, r25	; 0x2e
    12cc:	a7 a7       	std	Z+47, r26	; 0x2f
    12ce:	b0 ab       	std	Z+48, r27	; 0x30
    12d0:	80 e8       	ldi	r24, 0x80	; 128
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	a0 e0       	ldi	r26, 0x00	; 0
    12d6:	b0 e0       	ldi	r27, 0x00	; 0
    12d8:	85 87       	std	Z+13, r24	; 0x0d
    12da:	96 87       	std	Z+14, r25	; 0x0e
    12dc:	a7 87       	std	Z+15, r26	; 0x0f
    12de:	b0 8b       	std	Z+16, r27	; 0x10
    12e0:	80 e0       	ldi	r24, 0x00	; 0
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	a1 e0       	ldi	r26, 0x01	; 1
    12e6:	b0 e0       	ldi	r27, 0x00	; 0
    12e8:	81 a3       	std	Z+33, r24	; 0x21
    12ea:	92 a3       	std	Z+34, r25	; 0x22
    12ec:	a3 a3       	std	Z+35, r26	; 0x23
    12ee:	b4 a3       	std	Z+36, r27	; 0x24
    12f0:	80 e1       	ldi	r24, 0x10	; 16
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	a0 e0       	ldi	r26, 0x00	; 0
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	85 a3       	std	Z+37, r24	; 0x25
    12fa:	96 a3       	std	Z+38, r25	; 0x26
    12fc:	a7 a3       	std	Z+39, r26	; 0x27
    12fe:	b0 a7       	std	Z+40, r27	; 0x28
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	98 e0       	ldi	r25, 0x08	; 8
    1304:	a0 e0       	ldi	r26, 0x00	; 0
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	81 8b       	std	Z+17, r24	; 0x11
    130a:	92 8b       	std	Z+18, r25	; 0x12
    130c:	a3 8b       	std	Z+19, r26	; 0x13
    130e:	b4 8b       	std	Z+20, r27	; 0x14
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	90 e1       	ldi	r25, 0x10	; 16
    1314:	a0 e0       	ldi	r26, 0x00	; 0
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	81 a7       	std	Z+41, r24	; 0x29
    131a:	92 a7       	std	Z+42, r25	; 0x2a
    131c:	a3 a7       	std	Z+43, r26	; 0x2b
    131e:	b4 a7       	std	Z+44, r27	; 0x2c
    1320:	8c e0       	ldi	r24, 0x0C	; 12
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	a0 e0       	ldi	r26, 0x00	; 0
    1326:	b0 e0       	ldi	r27, 0x00	; 0
    1328:	85 8b       	std	Z+21, r24	; 0x15
    132a:	96 8b       	std	Z+22, r25	; 0x16
    132c:	a7 8b       	std	Z+23, r26	; 0x17
    132e:	b0 8f       	std	Z+24, r27	; 0x18
    1330:	80 e0       	ldi	r24, 0x00	; 0
    1332:	90 e8       	ldi	r25, 0x80	; 128
    1334:	a0 e0       	ldi	r26, 0x00	; 0
    1336:	b0 e0       	ldi	r27, 0x00	; 0
    1338:	85 8f       	std	Z+29, r24	; 0x1d
    133a:	96 8f       	std	Z+30, r25	; 0x1e
    133c:	a7 8f       	std	Z+31, r26	; 0x1f
    133e:	b0 a3       	std	Z+32, r27	; 0x20
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	91 e0       	ldi	r25, 0x01	; 1
    1344:	a0 e0       	ldi	r26, 0x00	; 0
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	81 8f       	std	Z+25, r24	; 0x19
    134a:	92 8f       	std	Z+26, r25	; 0x1a
    134c:	a3 8f       	std	Z+27, r26	; 0x1b
    134e:	b4 8f       	std	Z+28, r27	; 0x1c
    1350:	80 e4       	ldi	r24, 0x40	; 64
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	a0 e0       	ldi	r26, 0x00	; 0
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	81 ab       	std	Z+49, r24	; 0x31
    135a:	92 ab       	std	Z+50, r25	; 0x32
    135c:	a3 ab       	std	Z+51, r26	; 0x33
    135e:	b4 ab       	std	Z+52, r27	; 0x34
    1360:	8f ef       	ldi	r24, 0xFF	; 255
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	a0 e0       	ldi	r26, 0x00	; 0
    1366:	b0 e0       	ldi	r27, 0x00	; 0
    1368:	81 87       	std	Z+9, r24	; 0x09
    136a:	92 87       	std	Z+10, r25	; 0x0a
    136c:	a3 87       	std	Z+11, r26	; 0x0b
    136e:	b4 87       	std	Z+12, r27	; 0x0c
    1370:	df 01       	movw	r26, r30
    1372:	a9 5b       	subi	r26, 0xB9	; 185
    1374:	bf 4f       	sbci	r27, 0xFF	; 255
    1376:	83 e0       	ldi	r24, 0x03	; 3
    1378:	8c 93       	st	X, r24
    137a:	13 96       	adiw	r26, 0x03	; 3
    137c:	8b ed       	ldi	r24, 0xDB	; 219
    137e:	93 e0       	ldi	r25, 0x03	; 3
    1380:	11 96       	adiw	r26, 0x01	; 1
    1382:	9c 93       	st	X, r25
    1384:	8e 93       	st	-X, r24
    1386:	12 96       	adiw	r26, 0x02	; 2
    1388:	8e e5       	ldi	r24, 0x5E	; 94
    138a:	94 e0       	ldi	r25, 0x04	; 4
    138c:	11 96       	adiw	r26, 0x01	; 1
    138e:	9c 93       	st	X, r25
    1390:	8e 93       	st	-X, r24
    1392:	12 96       	adiw	r26, 0x02	; 2
    1394:	87 ec       	ldi	r24, 0xC7	; 199
    1396:	92 e1       	ldi	r25, 0x12	; 18
    1398:	11 96       	adiw	r26, 0x01	; 1
    139a:	9c 93       	st	X, r25
    139c:	8e 93       	st	-X, r24
    139e:	12 96       	adiw	r26, 0x02	; 2
    13a0:	8e ed       	ldi	r24, 0xDE	; 222
    13a2:	9f e0       	ldi	r25, 0x0F	; 15
    13a4:	11 96       	adiw	r26, 0x01	; 1
    13a6:	9c 93       	st	X, r25
    13a8:	8e 93       	st	-X, r24
    13aa:	12 96       	adiw	r26, 0x02	; 2
    13ac:	88 ee       	ldi	r24, 0xE8	; 232
    13ae:	92 e1       	ldi	r25, 0x12	; 18
    13b0:	11 96       	adiw	r26, 0x01	; 1
    13b2:	9c 93       	st	X, r25
    13b4:	8e 93       	st	-X, r24
    13b6:	12 96       	adiw	r26, 0x02	; 2
    13b8:	84 e6       	ldi	r24, 0x64	; 100
    13ba:	93 e1       	ldi	r25, 0x13	; 19
    13bc:	11 96       	adiw	r26, 0x01	; 1
    13be:	9c 93       	st	X, r25
    13c0:	8e 93       	st	-X, r24
    13c2:	12 96       	adiw	r26, 0x02	; 2
    13c4:	11 96       	adiw	r26, 0x01	; 1
    13c6:	1c 92       	st	X, r1
    13c8:	1e 92       	st	-X, r1
    13ca:	12 96       	adiw	r26, 0x02	; 2
    13cc:	11 96       	adiw	r26, 0x01	; 1
    13ce:	1c 92       	st	X, r1
    13d0:	1e 92       	st	-X, r1
    13d2:	50 97       	sbiw	r26, 0x10	; 16
    13d4:	8d ec       	ldi	r24, 0xCD	; 205
    13d6:	93 e0       	ldi	r25, 0x03	; 3
    13d8:	11 96       	adiw	r26, 0x01	; 1
    13da:	9c 93       	st	X, r25
    13dc:	8e 93       	st	-X, r24
    13de:	52 96       	adiw	r26, 0x12	; 18
    13e0:	8f e8       	ldi	r24, 0x8F	; 143
    13e2:	94 e0       	ldi	r25, 0x04	; 4
    13e4:	11 96       	adiw	r26, 0x01	; 1
    13e6:	9c 93       	st	X, r25
    13e8:	8e 93       	st	-X, r24
    13ea:	12 96       	adiw	r26, 0x02	; 2
    13ec:	8e eb       	ldi	r24, 0xBE	; 190
    13ee:	94 e0       	ldi	r25, 0x04	; 4
    13f0:	11 96       	adiw	r26, 0x01	; 1
    13f2:	9c 93       	st	X, r25
    13f4:	8e 93       	st	-X, r24
    13f6:	12 96       	adiw	r26, 0x02	; 2
    13f8:	11 96       	adiw	r26, 0x01	; 1
    13fa:	1c 92       	st	X, r1
    13fc:	1e 92       	st	-X, r1
    13fe:	12 96       	adiw	r26, 0x02	; 2
    1400:	11 96       	adiw	r26, 0x01	; 1
    1402:	1c 92       	st	X, r1
    1404:	1e 92       	st	-X, r1
    1406:	12 96       	adiw	r26, 0x02	; 2
    1408:	8d ee       	ldi	r24, 0xED	; 237
    140a:	94 e0       	ldi	r25, 0x04	; 4
    140c:	11 96       	adiw	r26, 0x01	; 1
    140e:	9c 93       	st	X, r25
    1410:	8e 93       	st	-X, r24
    1412:	12 96       	adiw	r26, 0x02	; 2
    1414:	86 e1       	ldi	r24, 0x16	; 22
    1416:	95 e0       	ldi	r25, 0x05	; 5
    1418:	11 96       	adiw	r26, 0x01	; 1
    141a:	9c 93       	st	X, r25
    141c:	8e 93       	st	-X, r24
    141e:	12 96       	adiw	r26, 0x02	; 2
    1420:	8c e4       	ldi	r24, 0x4C	; 76
    1422:	95 e0       	ldi	r25, 0x05	; 5
    1424:	11 96       	adiw	r26, 0x01	; 1
    1426:	9c 93       	st	X, r25
    1428:	8e 93       	st	-X, r24
    142a:	12 96       	adiw	r26, 0x02	; 2
    142c:	8d e7       	ldi	r24, 0x7D	; 125
    142e:	95 e0       	ldi	r25, 0x05	; 5
    1430:	11 96       	adiw	r26, 0x01	; 1
    1432:	9c 93       	st	X, r25
    1434:	8e 93       	st	-X, r24
    1436:	12 96       	adiw	r26, 0x02	; 2
    1438:	8e ea       	ldi	r24, 0xAE	; 174
    143a:	95 e0       	ldi	r25, 0x05	; 5
    143c:	11 96       	adiw	r26, 0x01	; 1
    143e:	9c 93       	st	X, r25
    1440:	8e 93       	st	-X, r24
    1442:	12 96       	adiw	r26, 0x02	; 2
    1444:	8b ea       	ldi	r24, 0xAB	; 171
    1446:	94 e1       	ldi	r25, 0x14	; 20
    1448:	11 96       	adiw	r26, 0x01	; 1
    144a:	9c 93       	st	X, r25
    144c:	8e 93       	st	-X, r24
    144e:	12 96       	adiw	r26, 0x02	; 2
    1450:	89 e4       	ldi	r24, 0x49	; 73
    1452:	94 e1       	ldi	r25, 0x14	; 20
    1454:	11 96       	adiw	r26, 0x01	; 1
    1456:	9c 93       	st	X, r25
    1458:	8e 93       	st	-X, r24
    145a:	12 96       	adiw	r26, 0x02	; 2
    145c:	8a e7       	ldi	r24, 0x7A	; 122
    145e:	94 e1       	ldi	r25, 0x14	; 20
    1460:	11 96       	adiw	r26, 0x01	; 1
    1462:	9c 93       	st	X, r25
    1464:	8e 93       	st	-X, r24
    1466:	12 96       	adiw	r26, 0x02	; 2
    1468:	11 96       	adiw	r26, 0x01	; 1
    146a:	1c 92       	st	X, r1
    146c:	1e 92       	st	-X, r1
    146e:	12 96       	adiw	r26, 0x02	; 2
    1470:	11 96       	adiw	r26, 0x01	; 1
    1472:	1c 92       	st	X, r1
    1474:	1e 92       	st	-X, r1
    1476:	12 96       	adiw	r26, 0x02	; 2
    1478:	8e eb       	ldi	r24, 0xBE	; 190
    147a:	90 e1       	ldi	r25, 0x10	; 16
    147c:	11 96       	adiw	r26, 0x01	; 1
    147e:	9c 93       	st	X, r25
    1480:	8e 93       	st	-X, r24
    1482:	12 96       	adiw	r26, 0x02	; 2
    1484:	86 e8       	ldi	r24, 0x86	; 134
    1486:	91 e1       	ldi	r25, 0x11	; 17
    1488:	11 96       	adiw	r26, 0x01	; 1
    148a:	9c 93       	st	X, r25
    148c:	8e 93       	st	-X, r24
    148e:	12 96       	adiw	r26, 0x02	; 2
    1490:	84 e3       	ldi	r24, 0x34	; 52
    1492:	95 e1       	ldi	r25, 0x15	; 21
    1494:	8d 93       	st	X+, r24
    1496:	9c 93       	st	X, r25
    1498:	e4 58       	subi	r30, 0x84	; 132
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	87 e1       	ldi	r24, 0x17	; 23
    149e:	90 e1       	ldi	r25, 0x10	; 16
    14a0:	91 83       	std	Z+1, r25	; 0x01
    14a2:	80 83       	st	Z, r24
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	9e c4       	rjmp	.+2364   	; 0x1de4 <Driver_Init+0x118a>
    14a8:	88 31       	cpi	r24, 0x18	; 24
    14aa:	2a eb       	ldi	r18, 0xBA	; 186
    14ac:	92 07       	cpc	r25, r18
    14ae:	20 e2       	ldi	r18, 0x20	; 32
    14b0:	a2 07       	cpc	r26, r18
    14b2:	b1 05       	cpc	r27, r1
    14b4:	09 f0       	breq	.+2      	; 0x14b8 <Driver_Init+0x85e>
    14b6:	f0 c0       	rjmp	.+480    	; 0x1698 <Driver_Init+0xa3e>
    14b8:	8b ed       	ldi	r24, 0xDB	; 219
    14ba:	93 e0       	ldi	r25, 0x03	; 3
    14bc:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
    14c0:	e0 91 d2 0d 	lds	r30, 0x0DD2
    14c4:	f0 91 d3 0d 	lds	r31, 0x0DD3
    14c8:	80 e0       	ldi	r24, 0x00	; 0
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	a0 e0       	ldi	r26, 0x00	; 0
    14ce:	b1 e0       	ldi	r27, 0x01	; 1
    14d0:	85 a7       	std	Z+45, r24	; 0x2d
    14d2:	96 a7       	std	Z+46, r25	; 0x2e
    14d4:	a7 a7       	std	Z+47, r26	; 0x2f
    14d6:	b0 ab       	std	Z+48, r27	; 0x30
    14d8:	80 e0       	ldi	r24, 0x00	; 0
    14da:	91 e0       	ldi	r25, 0x01	; 1
    14dc:	a0 e0       	ldi	r26, 0x00	; 0
    14de:	b0 e0       	ldi	r27, 0x00	; 0
    14e0:	85 87       	std	Z+13, r24	; 0x0d
    14e2:	96 87       	std	Z+14, r25	; 0x0e
    14e4:	a7 87       	std	Z+15, r26	; 0x0f
    14e6:	b0 8b       	std	Z+16, r27	; 0x10
    14e8:	40 e0       	ldi	r20, 0x00	; 0
    14ea:	50 e0       	ldi	r21, 0x00	; 0
    14ec:	61 e0       	ldi	r22, 0x01	; 1
    14ee:	70 e0       	ldi	r23, 0x00	; 0
    14f0:	41 a3       	std	Z+33, r20	; 0x21
    14f2:	52 a3       	std	Z+34, r21	; 0x22
    14f4:	63 a3       	std	Z+35, r22	; 0x23
    14f6:	74 a3       	std	Z+36, r23	; 0x24
    14f8:	00 e1       	ldi	r16, 0x10	; 16
    14fa:	10 e0       	ldi	r17, 0x00	; 0
    14fc:	20 e0       	ldi	r18, 0x00	; 0
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	05 a3       	std	Z+37, r16	; 0x25
    1502:	16 a3       	std	Z+38, r17	; 0x26
    1504:	27 a3       	std	Z+39, r18	; 0x27
    1506:	30 a7       	std	Z+40, r19	; 0x28
    1508:	00 e0       	ldi	r16, 0x00	; 0
    150a:	10 e1       	ldi	r17, 0x10	; 16
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	01 8b       	std	Z+17, r16	; 0x11
    1512:	12 8b       	std	Z+18, r17	; 0x12
    1514:	23 8b       	std	Z+19, r18	; 0x13
    1516:	34 8b       	std	Z+20, r19	; 0x14
    1518:	01 a7       	std	Z+41, r16	; 0x29
    151a:	12 a7       	std	Z+42, r17	; 0x2a
    151c:	23 a7       	std	Z+43, r18	; 0x2b
    151e:	34 a7       	std	Z+44, r19	; 0x2c
    1520:	0c e0       	ldi	r16, 0x0C	; 12
    1522:	10 e0       	ldi	r17, 0x00	; 0
    1524:	20 e0       	ldi	r18, 0x00	; 0
    1526:	30 e0       	ldi	r19, 0x00	; 0
    1528:	05 8b       	std	Z+21, r16	; 0x15
    152a:	16 8b       	std	Z+22, r17	; 0x16
    152c:	27 8b       	std	Z+23, r18	; 0x17
    152e:	30 8f       	std	Z+24, r19	; 0x18
    1530:	45 8f       	std	Z+29, r20	; 0x1d
    1532:	56 8f       	std	Z+30, r21	; 0x1e
    1534:	67 8f       	std	Z+31, r22	; 0x1f
    1536:	70 a3       	std	Z+32, r23	; 0x20
    1538:	81 8f       	std	Z+25, r24	; 0x19
    153a:	92 8f       	std	Z+26, r25	; 0x1a
    153c:	a3 8f       	std	Z+27, r26	; 0x1b
    153e:	b4 8f       	std	Z+28, r27	; 0x1c
    1540:	80 e4       	ldi	r24, 0x40	; 64
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	a0 e0       	ldi	r26, 0x00	; 0
    1546:	b0 e0       	ldi	r27, 0x00	; 0
    1548:	81 ab       	std	Z+49, r24	; 0x31
    154a:	92 ab       	std	Z+50, r25	; 0x32
    154c:	a3 ab       	std	Z+51, r26	; 0x33
    154e:	b4 ab       	std	Z+52, r27	; 0x34
    1550:	8f ef       	ldi	r24, 0xFF	; 255
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	a0 e0       	ldi	r26, 0x00	; 0
    1556:	b0 e0       	ldi	r27, 0x00	; 0
    1558:	81 87       	std	Z+9, r24	; 0x09
    155a:	92 87       	std	Z+10, r25	; 0x0a
    155c:	a3 87       	std	Z+11, r26	; 0x0b
    155e:	b4 87       	std	Z+12, r27	; 0x0c
    1560:	df 01       	movw	r26, r30
    1562:	a9 5b       	subi	r26, 0xB9	; 185
    1564:	bf 4f       	sbci	r27, 0xFF	; 255
    1566:	83 e0       	ldi	r24, 0x03	; 3
    1568:	8c 93       	st	X, r24
    156a:	13 96       	adiw	r26, 0x03	; 3
    156c:	8b ed       	ldi	r24, 0xDB	; 219
    156e:	93 e0       	ldi	r25, 0x03	; 3
    1570:	11 96       	adiw	r26, 0x01	; 1
    1572:	9c 93       	st	X, r25
    1574:	8e 93       	st	-X, r24
    1576:	12 96       	adiw	r26, 0x02	; 2
    1578:	8e e5       	ldi	r24, 0x5E	; 94
    157a:	94 e0       	ldi	r25, 0x04	; 4
    157c:	11 96       	adiw	r26, 0x01	; 1
    157e:	9c 93       	st	X, r25
    1580:	8e 93       	st	-X, r24
    1582:	12 96       	adiw	r26, 0x02	; 2
    1584:	87 ec       	ldi	r24, 0xC7	; 199
    1586:	92 e1       	ldi	r25, 0x12	; 18
    1588:	11 96       	adiw	r26, 0x01	; 1
    158a:	9c 93       	st	X, r25
    158c:	8e 93       	st	-X, r24
    158e:	12 96       	adiw	r26, 0x02	; 2
    1590:	8e ed       	ldi	r24, 0xDE	; 222
    1592:	9f e0       	ldi	r25, 0x0F	; 15
    1594:	11 96       	adiw	r26, 0x01	; 1
    1596:	9c 93       	st	X, r25
    1598:	8e 93       	st	-X, r24
    159a:	12 96       	adiw	r26, 0x02	; 2
    159c:	88 ee       	ldi	r24, 0xE8	; 232
    159e:	92 e1       	ldi	r25, 0x12	; 18
    15a0:	11 96       	adiw	r26, 0x01	; 1
    15a2:	9c 93       	st	X, r25
    15a4:	8e 93       	st	-X, r24
    15a6:	12 96       	adiw	r26, 0x02	; 2
    15a8:	84 e6       	ldi	r24, 0x64	; 100
    15aa:	93 e1       	ldi	r25, 0x13	; 19
    15ac:	11 96       	adiw	r26, 0x01	; 1
    15ae:	9c 93       	st	X, r25
    15b0:	8e 93       	st	-X, r24
    15b2:	12 96       	adiw	r26, 0x02	; 2
    15b4:	11 96       	adiw	r26, 0x01	; 1
    15b6:	1c 92       	st	X, r1
    15b8:	1e 92       	st	-X, r1
    15ba:	12 96       	adiw	r26, 0x02	; 2
    15bc:	11 96       	adiw	r26, 0x01	; 1
    15be:	1c 92       	st	X, r1
    15c0:	1e 92       	st	-X, r1
    15c2:	50 97       	sbiw	r26, 0x10	; 16
    15c4:	8d ec       	ldi	r24, 0xCD	; 205
    15c6:	93 e0       	ldi	r25, 0x03	; 3
    15c8:	11 96       	adiw	r26, 0x01	; 1
    15ca:	9c 93       	st	X, r25
    15cc:	8e 93       	st	-X, r24
    15ce:	52 96       	adiw	r26, 0x12	; 18
    15d0:	8f e8       	ldi	r24, 0x8F	; 143
    15d2:	94 e0       	ldi	r25, 0x04	; 4
    15d4:	11 96       	adiw	r26, 0x01	; 1
    15d6:	9c 93       	st	X, r25
    15d8:	8e 93       	st	-X, r24
    15da:	12 96       	adiw	r26, 0x02	; 2
    15dc:	8e eb       	ldi	r24, 0xBE	; 190
    15de:	94 e0       	ldi	r25, 0x04	; 4
    15e0:	11 96       	adiw	r26, 0x01	; 1
    15e2:	9c 93       	st	X, r25
    15e4:	8e 93       	st	-X, r24
    15e6:	12 96       	adiw	r26, 0x02	; 2
    15e8:	11 96       	adiw	r26, 0x01	; 1
    15ea:	1c 92       	st	X, r1
    15ec:	1e 92       	st	-X, r1
    15ee:	12 96       	adiw	r26, 0x02	; 2
    15f0:	11 96       	adiw	r26, 0x01	; 1
    15f2:	1c 92       	st	X, r1
    15f4:	1e 92       	st	-X, r1
    15f6:	12 96       	adiw	r26, 0x02	; 2
    15f8:	8d ee       	ldi	r24, 0xED	; 237
    15fa:	94 e0       	ldi	r25, 0x04	; 4
    15fc:	11 96       	adiw	r26, 0x01	; 1
    15fe:	9c 93       	st	X, r25
    1600:	8e 93       	st	-X, r24
    1602:	12 96       	adiw	r26, 0x02	; 2
    1604:	86 e1       	ldi	r24, 0x16	; 22
    1606:	95 e0       	ldi	r25, 0x05	; 5
    1608:	11 96       	adiw	r26, 0x01	; 1
    160a:	9c 93       	st	X, r25
    160c:	8e 93       	st	-X, r24
    160e:	12 96       	adiw	r26, 0x02	; 2
    1610:	8c e4       	ldi	r24, 0x4C	; 76
    1612:	95 e0       	ldi	r25, 0x05	; 5
    1614:	11 96       	adiw	r26, 0x01	; 1
    1616:	9c 93       	st	X, r25
    1618:	8e 93       	st	-X, r24
    161a:	12 96       	adiw	r26, 0x02	; 2
    161c:	8d e7       	ldi	r24, 0x7D	; 125
    161e:	95 e0       	ldi	r25, 0x05	; 5
    1620:	11 96       	adiw	r26, 0x01	; 1
    1622:	9c 93       	st	X, r25
    1624:	8e 93       	st	-X, r24
    1626:	12 96       	adiw	r26, 0x02	; 2
    1628:	8e ea       	ldi	r24, 0xAE	; 174
    162a:	95 e0       	ldi	r25, 0x05	; 5
    162c:	11 96       	adiw	r26, 0x01	; 1
    162e:	9c 93       	st	X, r25
    1630:	8e 93       	st	-X, r24
    1632:	12 96       	adiw	r26, 0x02	; 2
    1634:	8b ea       	ldi	r24, 0xAB	; 171
    1636:	94 e1       	ldi	r25, 0x14	; 20
    1638:	11 96       	adiw	r26, 0x01	; 1
    163a:	9c 93       	st	X, r25
    163c:	8e 93       	st	-X, r24
    163e:	12 96       	adiw	r26, 0x02	; 2
    1640:	89 e4       	ldi	r24, 0x49	; 73
    1642:	94 e1       	ldi	r25, 0x14	; 20
    1644:	11 96       	adiw	r26, 0x01	; 1
    1646:	9c 93       	st	X, r25
    1648:	8e 93       	st	-X, r24
    164a:	12 96       	adiw	r26, 0x02	; 2
    164c:	8a e7       	ldi	r24, 0x7A	; 122
    164e:	94 e1       	ldi	r25, 0x14	; 20
    1650:	11 96       	adiw	r26, 0x01	; 1
    1652:	9c 93       	st	X, r25
    1654:	8e 93       	st	-X, r24
    1656:	12 96       	adiw	r26, 0x02	; 2
    1658:	11 96       	adiw	r26, 0x01	; 1
    165a:	1c 92       	st	X, r1
    165c:	1e 92       	st	-X, r1
    165e:	12 96       	adiw	r26, 0x02	; 2
    1660:	11 96       	adiw	r26, 0x01	; 1
    1662:	1c 92       	st	X, r1
    1664:	1e 92       	st	-X, r1
    1666:	12 96       	adiw	r26, 0x02	; 2
    1668:	8e eb       	ldi	r24, 0xBE	; 190
    166a:	90 e1       	ldi	r25, 0x10	; 16
    166c:	11 96       	adiw	r26, 0x01	; 1
    166e:	9c 93       	st	X, r25
    1670:	8e 93       	st	-X, r24
    1672:	12 96       	adiw	r26, 0x02	; 2
    1674:	86 e8       	ldi	r24, 0x86	; 134
    1676:	91 e1       	ldi	r25, 0x11	; 17
    1678:	11 96       	adiw	r26, 0x01	; 1
    167a:	9c 93       	st	X, r25
    167c:	8e 93       	st	-X, r24
    167e:	12 96       	adiw	r26, 0x02	; 2
    1680:	84 e3       	ldi	r24, 0x34	; 52
    1682:	95 e1       	ldi	r25, 0x15	; 21
    1684:	8d 93       	st	X+, r24
    1686:	9c 93       	st	X, r25
    1688:	e4 58       	subi	r30, 0x84	; 132
    168a:	ff 4f       	sbci	r31, 0xFF	; 255
    168c:	87 e1       	ldi	r24, 0x17	; 23
    168e:	90 e1       	ldi	r25, 0x10	; 16
    1690:	91 83       	std	Z+1, r25	; 0x01
    1692:	80 83       	st	Z, r24
    1694:	80 e0       	ldi	r24, 0x00	; 0
    1696:	a6 c3       	rjmp	.+1868   	; 0x1de4 <Driver_Init+0x118a>
    1698:	89 31       	cpi	r24, 0x19	; 25
    169a:	2a eb       	ldi	r18, 0xBA	; 186
    169c:	92 07       	cpc	r25, r18
    169e:	20 e2       	ldi	r18, 0x20	; 32
    16a0:	a2 07       	cpc	r26, r18
    16a2:	b1 05       	cpc	r27, r1
    16a4:	09 f0       	breq	.+2      	; 0x16a8 <Driver_Init+0xa4e>
    16a6:	18 c1       	rjmp	.+560    	; 0x18d8 <Driver_Init+0xc7e>
    16a8:	8c ee       	ldi	r24, 0xEC	; 236
    16aa:	93 e0       	ldi	r25, 0x03	; 3
    16ac:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
    16b0:	e0 91 d2 0d 	lds	r30, 0x0DD2
    16b4:	f0 91 d3 0d 	lds	r31, 0x0DD3
    16b8:	80 e0       	ldi	r24, 0x00	; 0
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	a0 e0       	ldi	r26, 0x00	; 0
    16be:	b2 e0       	ldi	r27, 0x02	; 2
    16c0:	85 a7       	std	Z+45, r24	; 0x2d
    16c2:	96 a7       	std	Z+46, r25	; 0x2e
    16c4:	a7 a7       	std	Z+47, r26	; 0x2f
    16c6:	b0 ab       	std	Z+48, r27	; 0x30
    16c8:	80 e0       	ldi	r24, 0x00	; 0
    16ca:	92 e0       	ldi	r25, 0x02	; 2
    16cc:	a0 e0       	ldi	r26, 0x00	; 0
    16ce:	b0 e0       	ldi	r27, 0x00	; 0
    16d0:	85 87       	std	Z+13, r24	; 0x0d
    16d2:	96 87       	std	Z+14, r25	; 0x0e
    16d4:	a7 87       	std	Z+15, r26	; 0x0f
    16d6:	b0 8b       	std	Z+16, r27	; 0x10
    16d8:	80 e0       	ldi	r24, 0x00	; 0
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	a1 e0       	ldi	r26, 0x01	; 1
    16de:	b0 e0       	ldi	r27, 0x00	; 0
    16e0:	81 a3       	std	Z+33, r24	; 0x21
    16e2:	92 a3       	std	Z+34, r25	; 0x22
    16e4:	a3 a3       	std	Z+35, r26	; 0x23
    16e6:	b4 a3       	std	Z+36, r27	; 0x24
    16e8:	80 e1       	ldi	r24, 0x10	; 16
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	a0 e0       	ldi	r26, 0x00	; 0
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	85 a3       	std	Z+37, r24	; 0x25
    16f2:	96 a3       	std	Z+38, r25	; 0x26
    16f4:	a7 a3       	std	Z+39, r26	; 0x27
    16f6:	b0 a7       	std	Z+40, r27	; 0x28
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e2       	ldi	r25, 0x20	; 32
    16fc:	a0 e0       	ldi	r26, 0x00	; 0
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	81 8b       	std	Z+17, r24	; 0x11
    1702:	92 8b       	std	Z+18, r25	; 0x12
    1704:	a3 8b       	std	Z+19, r26	; 0x13
    1706:	b4 8b       	std	Z+20, r27	; 0x14
    1708:	80 e0       	ldi	r24, 0x00	; 0
    170a:	90 e1       	ldi	r25, 0x10	; 16
    170c:	a0 e0       	ldi	r26, 0x00	; 0
    170e:	b0 e0       	ldi	r27, 0x00	; 0
    1710:	81 a7       	std	Z+41, r24	; 0x29
    1712:	92 a7       	std	Z+42, r25	; 0x2a
    1714:	a3 a7       	std	Z+43, r26	; 0x2b
    1716:	b4 a7       	std	Z+44, r27	; 0x2c
    1718:	8c e0       	ldi	r24, 0x0C	; 12
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	a0 e0       	ldi	r26, 0x00	; 0
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	85 8b       	std	Z+21, r24	; 0x15
    1722:	96 8b       	std	Z+22, r25	; 0x16
    1724:	a7 8b       	std	Z+23, r26	; 0x17
    1726:	b0 8f       	std	Z+24, r27	; 0x18
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	a2 e0       	ldi	r26, 0x02	; 2
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	85 8f       	std	Z+29, r24	; 0x1d
    1732:	96 8f       	std	Z+30, r25	; 0x1e
    1734:	a7 8f       	std	Z+31, r26	; 0x1f
    1736:	b0 a3       	std	Z+32, r27	; 0x20
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	91 e0       	ldi	r25, 0x01	; 1
    173c:	a0 e0       	ldi	r26, 0x00	; 0
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	81 8f       	std	Z+25, r24	; 0x19
    1742:	92 8f       	std	Z+26, r25	; 0x1a
    1744:	a3 8f       	std	Z+27, r26	; 0x1b
    1746:	b4 8f       	std	Z+28, r27	; 0x1c
    1748:	80 e4       	ldi	r24, 0x40	; 64
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	a0 e0       	ldi	r26, 0x00	; 0
    174e:	b0 e0       	ldi	r27, 0x00	; 0
    1750:	81 ab       	std	Z+49, r24	; 0x31
    1752:	92 ab       	std	Z+50, r25	; 0x32
    1754:	a3 ab       	std	Z+51, r26	; 0x33
    1756:	b4 ab       	std	Z+52, r27	; 0x34
    1758:	8f ef       	ldi	r24, 0xFF	; 255
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	a0 e0       	ldi	r26, 0x00	; 0
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	81 87       	std	Z+9, r24	; 0x09
    1762:	92 87       	std	Z+10, r25	; 0x0a
    1764:	a3 87       	std	Z+11, r26	; 0x0b
    1766:	b4 87       	std	Z+12, r27	; 0x0c
    1768:	df 01       	movw	r26, r30
    176a:	a9 5b       	subi	r26, 0xB9	; 185
    176c:	bf 4f       	sbci	r27, 0xFF	; 255
    176e:	83 e0       	ldi	r24, 0x03	; 3
    1770:	8c 93       	st	X, r24
    1772:	13 96       	adiw	r26, 0x03	; 3
    1774:	8b ed       	ldi	r24, 0xDB	; 219
    1776:	93 e0       	ldi	r25, 0x03	; 3
    1778:	11 96       	adiw	r26, 0x01	; 1
    177a:	9c 93       	st	X, r25
    177c:	8e 93       	st	-X, r24
    177e:	12 96       	adiw	r26, 0x02	; 2
    1780:	8e e5       	ldi	r24, 0x5E	; 94
    1782:	94 e0       	ldi	r25, 0x04	; 4
    1784:	11 96       	adiw	r26, 0x01	; 1
    1786:	9c 93       	st	X, r25
    1788:	8e 93       	st	-X, r24
    178a:	12 96       	adiw	r26, 0x02	; 2
    178c:	87 ec       	ldi	r24, 0xC7	; 199
    178e:	92 e1       	ldi	r25, 0x12	; 18
    1790:	11 96       	adiw	r26, 0x01	; 1
    1792:	9c 93       	st	X, r25
    1794:	8e 93       	st	-X, r24
    1796:	12 96       	adiw	r26, 0x02	; 2
    1798:	8e ed       	ldi	r24, 0xDE	; 222
    179a:	9f e0       	ldi	r25, 0x0F	; 15
    179c:	11 96       	adiw	r26, 0x01	; 1
    179e:	9c 93       	st	X, r25
    17a0:	8e 93       	st	-X, r24
    17a2:	12 96       	adiw	r26, 0x02	; 2
    17a4:	88 ee       	ldi	r24, 0xE8	; 232
    17a6:	92 e1       	ldi	r25, 0x12	; 18
    17a8:	11 96       	adiw	r26, 0x01	; 1
    17aa:	9c 93       	st	X, r25
    17ac:	8e 93       	st	-X, r24
    17ae:	12 96       	adiw	r26, 0x02	; 2
    17b0:	84 e6       	ldi	r24, 0x64	; 100
    17b2:	93 e1       	ldi	r25, 0x13	; 19
    17b4:	11 96       	adiw	r26, 0x01	; 1
    17b6:	9c 93       	st	X, r25
    17b8:	8e 93       	st	-X, r24
    17ba:	12 96       	adiw	r26, 0x02	; 2
    17bc:	11 96       	adiw	r26, 0x01	; 1
    17be:	1c 92       	st	X, r1
    17c0:	1e 92       	st	-X, r1
    17c2:	12 96       	adiw	r26, 0x02	; 2
    17c4:	11 96       	adiw	r26, 0x01	; 1
    17c6:	1c 92       	st	X, r1
    17c8:	1e 92       	st	-X, r1
    17ca:	50 97       	sbiw	r26, 0x10	; 16
    17cc:	8d ec       	ldi	r24, 0xCD	; 205
    17ce:	93 e0       	ldi	r25, 0x03	; 3
    17d0:	11 96       	adiw	r26, 0x01	; 1
    17d2:	9c 93       	st	X, r25
    17d4:	8e 93       	st	-X, r24
    17d6:	52 96       	adiw	r26, 0x12	; 18
    17d8:	8f e8       	ldi	r24, 0x8F	; 143
    17da:	94 e0       	ldi	r25, 0x04	; 4
    17dc:	11 96       	adiw	r26, 0x01	; 1
    17de:	9c 93       	st	X, r25
    17e0:	8e 93       	st	-X, r24
    17e2:	12 96       	adiw	r26, 0x02	; 2
    17e4:	8e eb       	ldi	r24, 0xBE	; 190
    17e6:	94 e0       	ldi	r25, 0x04	; 4
    17e8:	11 96       	adiw	r26, 0x01	; 1
    17ea:	9c 93       	st	X, r25
    17ec:	8e 93       	st	-X, r24
    17ee:	12 96       	adiw	r26, 0x02	; 2
    17f0:	11 96       	adiw	r26, 0x01	; 1
    17f2:	1c 92       	st	X, r1
    17f4:	1e 92       	st	-X, r1
    17f6:	12 96       	adiw	r26, 0x02	; 2
    17f8:	11 96       	adiw	r26, 0x01	; 1
    17fa:	1c 92       	st	X, r1
    17fc:	1e 92       	st	-X, r1
    17fe:	12 96       	adiw	r26, 0x02	; 2
    1800:	8d ee       	ldi	r24, 0xED	; 237
    1802:	94 e0       	ldi	r25, 0x04	; 4
    1804:	11 96       	adiw	r26, 0x01	; 1
    1806:	9c 93       	st	X, r25
    1808:	8e 93       	st	-X, r24
    180a:	12 96       	adiw	r26, 0x02	; 2
    180c:	86 e1       	ldi	r24, 0x16	; 22
    180e:	95 e0       	ldi	r25, 0x05	; 5
    1810:	11 96       	adiw	r26, 0x01	; 1
    1812:	9c 93       	st	X, r25
    1814:	8e 93       	st	-X, r24
    1816:	12 96       	adiw	r26, 0x02	; 2
    1818:	8c e4       	ldi	r24, 0x4C	; 76
    181a:	95 e0       	ldi	r25, 0x05	; 5
    181c:	11 96       	adiw	r26, 0x01	; 1
    181e:	9c 93       	st	X, r25
    1820:	8e 93       	st	-X, r24
    1822:	12 96       	adiw	r26, 0x02	; 2
    1824:	8d e7       	ldi	r24, 0x7D	; 125
    1826:	95 e0       	ldi	r25, 0x05	; 5
    1828:	11 96       	adiw	r26, 0x01	; 1
    182a:	9c 93       	st	X, r25
    182c:	8e 93       	st	-X, r24
    182e:	12 96       	adiw	r26, 0x02	; 2
    1830:	8e ea       	ldi	r24, 0xAE	; 174
    1832:	95 e0       	ldi	r25, 0x05	; 5
    1834:	11 96       	adiw	r26, 0x01	; 1
    1836:	9c 93       	st	X, r25
    1838:	8e 93       	st	-X, r24
    183a:	12 96       	adiw	r26, 0x02	; 2
    183c:	8b ea       	ldi	r24, 0xAB	; 171
    183e:	94 e1       	ldi	r25, 0x14	; 20
    1840:	11 96       	adiw	r26, 0x01	; 1
    1842:	9c 93       	st	X, r25
    1844:	8e 93       	st	-X, r24
    1846:	12 96       	adiw	r26, 0x02	; 2
    1848:	89 e4       	ldi	r24, 0x49	; 73
    184a:	94 e1       	ldi	r25, 0x14	; 20
    184c:	11 96       	adiw	r26, 0x01	; 1
    184e:	9c 93       	st	X, r25
    1850:	8e 93       	st	-X, r24
    1852:	12 96       	adiw	r26, 0x02	; 2
    1854:	8a e7       	ldi	r24, 0x7A	; 122
    1856:	94 e1       	ldi	r25, 0x14	; 20
    1858:	11 96       	adiw	r26, 0x01	; 1
    185a:	9c 93       	st	X, r25
    185c:	8e 93       	st	-X, r24
    185e:	12 96       	adiw	r26, 0x02	; 2
    1860:	8f ed       	ldi	r24, 0xDF	; 223
    1862:	95 e0       	ldi	r25, 0x05	; 5
    1864:	11 96       	adiw	r26, 0x01	; 1
    1866:	9c 93       	st	X, r25
    1868:	8e 93       	st	-X, r24
    186a:	12 96       	adiw	r26, 0x02	; 2
    186c:	80 ee       	ldi	r24, 0xE0	; 224
    186e:	94 e1       	ldi	r25, 0x14	; 20
    1870:	11 96       	adiw	r26, 0x01	; 1
    1872:	9c 93       	st	X, r25
    1874:	8e 93       	st	-X, r24
    1876:	12 96       	adiw	r26, 0x02	; 2
    1878:	8e eb       	ldi	r24, 0xBE	; 190
    187a:	90 e1       	ldi	r25, 0x10	; 16
    187c:	11 96       	adiw	r26, 0x01	; 1
    187e:	9c 93       	st	X, r25
    1880:	8e 93       	st	-X, r24
    1882:	12 96       	adiw	r26, 0x02	; 2
    1884:	86 e8       	ldi	r24, 0x86	; 134
    1886:	91 e1       	ldi	r25, 0x11	; 17
    1888:	11 96       	adiw	r26, 0x01	; 1
    188a:	9c 93       	st	X, r25
    188c:	8e 93       	st	-X, r24
    188e:	12 96       	adiw	r26, 0x02	; 2
    1890:	84 e3       	ldi	r24, 0x34	; 52
    1892:	95 e1       	ldi	r25, 0x15	; 21
    1894:	8d 93       	st	X+, r24
    1896:	9c 93       	st	X, r25
    1898:	e4 58       	subi	r30, 0x84	; 132
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	87 e1       	ldi	r24, 0x17	; 23
    189e:	90 e1       	ldi	r25, 0x10	; 16
    18a0:	91 83       	std	Z+1, r25	; 0x01
    18a2:	80 83       	st	Z, r24
    18a4:	8c d9       	rcall	.-3304   	; 0xbbe <FlashEnter4ByteAddressMode>
    18a6:	e0 91 d2 0d 	lds	r30, 0x0DD2
    18aa:	f0 91 d3 0d 	lds	r31, 0x0DD3
    18ae:	e6 59       	subi	r30, 0x96	; 150
    18b0:	ff 4f       	sbci	r31, 0xFF	; 255
    18b2:	01 90       	ld	r0, Z+
    18b4:	f0 81       	ld	r31, Z
    18b6:	e0 2d       	mov	r30, r0
    18b8:	ce 01       	movw	r24, r28
    18ba:	01 96       	adiw	r24, 0x01	; 1
    18bc:	19 95       	eicall
    18be:	89 81       	ldd	r24, Y+1	; 0x01
    18c0:	80 ff       	sbrs	r24, 0
    18c2:	8b c2       	rjmp	.+1302   	; 0x1dda <Driver_Init+0x1180>
    18c4:	e0 91 d2 0d 	lds	r30, 0x0DD2
    18c8:	f0 91 d3 0d 	lds	r31, 0x0DD3
    18cc:	e9 5b       	subi	r30, 0xB9	; 185
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	84 e0       	ldi	r24, 0x04	; 4
    18d2:	80 83       	st	Z, r24
    18d4:	80 e0       	ldi	r24, 0x00	; 0
    18d6:	86 c2       	rjmp	.+1292   	; 0x1de4 <Driver_Init+0x118a>
    18d8:	ac 01       	movw	r20, r24
    18da:	bd 01       	movw	r22, r26
    18dc:	5e 7f       	andi	r21, 0xFE	; 254
    18de:	40 32       	cpi	r20, 0x20	; 32
    18e0:	5a 4b       	sbci	r21, 0xBA	; 186
    18e2:	60 42       	sbci	r22, 0x20	; 32
    18e4:	71 05       	cpc	r23, r1
    18e6:	09 f0       	breq	.+2      	; 0x18ea <Driver_Init+0xc90>
    18e8:	29 c1       	rjmp	.+594    	; 0x1b3c <Driver_Init+0xee2>
    18ea:	8d ef       	ldi	r24, 0xFD	; 253
    18ec:	93 e0       	ldi	r25, 0x03	; 3
    18ee:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
    18f2:	e0 91 d2 0d 	lds	r30, 0x0DD2
    18f6:	f0 91 d3 0d 	lds	r31, 0x0DD3
    18fa:	80 e0       	ldi	r24, 0x00	; 0
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	a0 e0       	ldi	r26, 0x00	; 0
    1900:	b4 e0       	ldi	r27, 0x04	; 4
    1902:	85 a7       	std	Z+45, r24	; 0x2d
    1904:	96 a7       	std	Z+46, r25	; 0x2e
    1906:	a7 a7       	std	Z+47, r26	; 0x2f
    1908:	b0 ab       	std	Z+48, r27	; 0x30
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	94 e0       	ldi	r25, 0x04	; 4
    190e:	a0 e0       	ldi	r26, 0x00	; 0
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	85 87       	std	Z+13, r24	; 0x0d
    1914:	96 87       	std	Z+14, r25	; 0x0e
    1916:	a7 87       	std	Z+15, r26	; 0x0f
    1918:	b0 8b       	std	Z+16, r27	; 0x10
    191a:	80 e0       	ldi	r24, 0x00	; 0
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	a1 e0       	ldi	r26, 0x01	; 1
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	81 a3       	std	Z+33, r24	; 0x21
    1924:	92 a3       	std	Z+34, r25	; 0x22
    1926:	a3 a3       	std	Z+35, r26	; 0x23
    1928:	b4 a3       	std	Z+36, r27	; 0x24
    192a:	80 e1       	ldi	r24, 0x10	; 16
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	a0 e0       	ldi	r26, 0x00	; 0
    1930:	b0 e0       	ldi	r27, 0x00	; 0
    1932:	85 a3       	std	Z+37, r24	; 0x25
    1934:	96 a3       	std	Z+38, r25	; 0x26
    1936:	a7 a3       	std	Z+39, r26	; 0x27
    1938:	b0 a7       	std	Z+40, r27	; 0x28
    193a:	80 e1       	ldi	r24, 0x10	; 16
    193c:	97 e2       	ldi	r25, 0x27	; 39
    193e:	a0 e0       	ldi	r26, 0x00	; 0
    1940:	b0 e0       	ldi	r27, 0x00	; 0
    1942:	81 8b       	std	Z+17, r24	; 0x11
    1944:	92 8b       	std	Z+18, r25	; 0x12
    1946:	a3 8b       	std	Z+19, r26	; 0x13
    1948:	b4 8b       	std	Z+20, r27	; 0x14
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	90 e1       	ldi	r25, 0x10	; 16
    194e:	a0 e0       	ldi	r26, 0x00	; 0
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	81 a7       	std	Z+41, r24	; 0x29
    1954:	92 a7       	std	Z+42, r25	; 0x2a
    1956:	a3 a7       	std	Z+43, r26	; 0x2b
    1958:	b4 a7       	std	Z+44, r27	; 0x2c
    195a:	8c e0       	ldi	r24, 0x0C	; 12
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	a0 e0       	ldi	r26, 0x00	; 0
    1960:	b0 e0       	ldi	r27, 0x00	; 0
    1962:	85 8b       	std	Z+21, r24	; 0x15
    1964:	96 8b       	std	Z+22, r25	; 0x16
    1966:	a7 8b       	std	Z+23, r26	; 0x17
    1968:	b0 8f       	std	Z+24, r27	; 0x18
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	a4 e0       	ldi	r26, 0x04	; 4
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	85 8f       	std	Z+29, r24	; 0x1d
    1974:	96 8f       	std	Z+30, r25	; 0x1e
    1976:	a7 8f       	std	Z+31, r26	; 0x1f
    1978:	b0 a3       	std	Z+32, r27	; 0x20
    197a:	80 e0       	ldi	r24, 0x00	; 0
    197c:	91 e0       	ldi	r25, 0x01	; 1
    197e:	a0 e0       	ldi	r26, 0x00	; 0
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	81 8f       	std	Z+25, r24	; 0x19
    1984:	92 8f       	std	Z+26, r25	; 0x1a
    1986:	a3 8f       	std	Z+27, r26	; 0x1b
    1988:	b4 8f       	std	Z+28, r27	; 0x1c
    198a:	80 e4       	ldi	r24, 0x40	; 64
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	a0 e0       	ldi	r26, 0x00	; 0
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	81 ab       	std	Z+49, r24	; 0x31
    1994:	92 ab       	std	Z+50, r25	; 0x32
    1996:	a3 ab       	std	Z+51, r26	; 0x33
    1998:	b4 ab       	std	Z+52, r27	; 0x34
    199a:	82 e0       	ldi	r24, 0x02	; 2
    199c:	85 ab       	std	Z+53, r24	; 0x35
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	a0 e0       	ldi	r26, 0x00	; 0
    19a4:	b2 e0       	ldi	r27, 0x02	; 2
    19a6:	86 ab       	std	Z+54, r24	; 0x36
    19a8:	97 ab       	std	Z+55, r25	; 0x37
    19aa:	a0 af       	std	Z+56, r26	; 0x38
    19ac:	b1 af       	std	Z+57, r27	; 0x39
    19ae:	89 e1       	ldi	r24, 0x19	; 25
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	a0 e0       	ldi	r26, 0x00	; 0
    19b4:	b0 e0       	ldi	r27, 0x00	; 0
    19b6:	82 af       	std	Z+58, r24	; 0x3a
    19b8:	93 af       	std	Z+59, r25	; 0x3b
    19ba:	a4 af       	std	Z+60, r26	; 0x3c
    19bc:	b5 af       	std	Z+61, r27	; 0x3d
    19be:	8f ef       	ldi	r24, 0xFF	; 255
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	a0 e0       	ldi	r26, 0x00	; 0
    19c4:	b0 e0       	ldi	r27, 0x00	; 0
    19c6:	81 87       	std	Z+9, r24	; 0x09
    19c8:	92 87       	std	Z+10, r25	; 0x0a
    19ca:	a3 87       	std	Z+11, r26	; 0x0b
    19cc:	b4 87       	std	Z+12, r27	; 0x0c
    19ce:	df 01       	movw	r26, r30
    19d0:	a6 5b       	subi	r26, 0xB6	; 182
    19d2:	bf 4f       	sbci	r27, 0xFF	; 255
    19d4:	8b ed       	ldi	r24, 0xDB	; 219
    19d6:	93 e0       	ldi	r25, 0x03	; 3
    19d8:	11 96       	adiw	r26, 0x01	; 1
    19da:	9c 93       	st	X, r25
    19dc:	8e 93       	st	-X, r24
    19de:	12 96       	adiw	r26, 0x02	; 2
    19e0:	8e e5       	ldi	r24, 0x5E	; 94
    19e2:	94 e0       	ldi	r25, 0x04	; 4
    19e4:	11 96       	adiw	r26, 0x01	; 1
    19e6:	9c 93       	st	X, r25
    19e8:	8e 93       	st	-X, r24
    19ea:	12 96       	adiw	r26, 0x02	; 2
    19ec:	87 ec       	ldi	r24, 0xC7	; 199
    19ee:	92 e1       	ldi	r25, 0x12	; 18
    19f0:	11 96       	adiw	r26, 0x01	; 1
    19f2:	9c 93       	st	X, r25
    19f4:	8e 93       	st	-X, r24
    19f6:	12 96       	adiw	r26, 0x02	; 2
    19f8:	8e ed       	ldi	r24, 0xDE	; 222
    19fa:	9f e0       	ldi	r25, 0x0F	; 15
    19fc:	11 96       	adiw	r26, 0x01	; 1
    19fe:	9c 93       	st	X, r25
    1a00:	8e 93       	st	-X, r24
    1a02:	12 96       	adiw	r26, 0x02	; 2
    1a04:	88 ee       	ldi	r24, 0xE8	; 232
    1a06:	92 e1       	ldi	r25, 0x12	; 18
    1a08:	11 96       	adiw	r26, 0x01	; 1
    1a0a:	9c 93       	st	X, r25
    1a0c:	8e 93       	st	-X, r24
    1a0e:	12 96       	adiw	r26, 0x02	; 2
    1a10:	84 e6       	ldi	r24, 0x64	; 100
    1a12:	93 e1       	ldi	r25, 0x13	; 19
    1a14:	11 96       	adiw	r26, 0x01	; 1
    1a16:	9c 93       	st	X, r25
    1a18:	8e 93       	st	-X, r24
    1a1a:	12 96       	adiw	r26, 0x02	; 2
    1a1c:	8a ed       	ldi	r24, 0xDA	; 218
    1a1e:	93 e1       	ldi	r25, 0x13	; 19
    1a20:	11 96       	adiw	r26, 0x01	; 1
    1a22:	9c 93       	st	X, r25
    1a24:	8e 93       	st	-X, r24
    1a26:	12 96       	adiw	r26, 0x02	; 2
    1a28:	11 96       	adiw	r26, 0x01	; 1
    1a2a:	1c 92       	st	X, r1
    1a2c:	1e 92       	st	-X, r1
    1a2e:	50 97       	sbiw	r26, 0x10	; 16
    1a30:	8d ec       	ldi	r24, 0xCD	; 205
    1a32:	93 e0       	ldi	r25, 0x03	; 3
    1a34:	11 96       	adiw	r26, 0x01	; 1
    1a36:	9c 93       	st	X, r25
    1a38:	8e 93       	st	-X, r24
    1a3a:	52 96       	adiw	r26, 0x12	; 18
    1a3c:	8f e8       	ldi	r24, 0x8F	; 143
    1a3e:	94 e0       	ldi	r25, 0x04	; 4
    1a40:	11 96       	adiw	r26, 0x01	; 1
    1a42:	9c 93       	st	X, r25
    1a44:	8e 93       	st	-X, r24
    1a46:	12 96       	adiw	r26, 0x02	; 2
    1a48:	8e eb       	ldi	r24, 0xBE	; 190
    1a4a:	94 e0       	ldi	r25, 0x04	; 4
    1a4c:	11 96       	adiw	r26, 0x01	; 1
    1a4e:	9c 93       	st	X, r25
    1a50:	8e 93       	st	-X, r24
    1a52:	12 96       	adiw	r26, 0x02	; 2
    1a54:	11 96       	adiw	r26, 0x01	; 1
    1a56:	1c 92       	st	X, r1
    1a58:	1e 92       	st	-X, r1
    1a5a:	12 96       	adiw	r26, 0x02	; 2
    1a5c:	11 96       	adiw	r26, 0x01	; 1
    1a5e:	1c 92       	st	X, r1
    1a60:	1e 92       	st	-X, r1
    1a62:	12 96       	adiw	r26, 0x02	; 2
    1a64:	8d ee       	ldi	r24, 0xED	; 237
    1a66:	94 e0       	ldi	r25, 0x04	; 4
    1a68:	11 96       	adiw	r26, 0x01	; 1
    1a6a:	9c 93       	st	X, r25
    1a6c:	8e 93       	st	-X, r24
    1a6e:	12 96       	adiw	r26, 0x02	; 2
    1a70:	86 e1       	ldi	r24, 0x16	; 22
    1a72:	95 e0       	ldi	r25, 0x05	; 5
    1a74:	11 96       	adiw	r26, 0x01	; 1
    1a76:	9c 93       	st	X, r25
    1a78:	8e 93       	st	-X, r24
    1a7a:	12 96       	adiw	r26, 0x02	; 2
    1a7c:	8c e4       	ldi	r24, 0x4C	; 76
    1a7e:	95 e0       	ldi	r25, 0x05	; 5
    1a80:	11 96       	adiw	r26, 0x01	; 1
    1a82:	9c 93       	st	X, r25
    1a84:	8e 93       	st	-X, r24
    1a86:	12 96       	adiw	r26, 0x02	; 2
    1a88:	8d e7       	ldi	r24, 0x7D	; 125
    1a8a:	95 e0       	ldi	r25, 0x05	; 5
    1a8c:	11 96       	adiw	r26, 0x01	; 1
    1a8e:	9c 93       	st	X, r25
    1a90:	8e 93       	st	-X, r24
    1a92:	12 96       	adiw	r26, 0x02	; 2
    1a94:	8e ea       	ldi	r24, 0xAE	; 174
    1a96:	95 e0       	ldi	r25, 0x05	; 5
    1a98:	11 96       	adiw	r26, 0x01	; 1
    1a9a:	9c 93       	st	X, r25
    1a9c:	8e 93       	st	-X, r24
    1a9e:	12 96       	adiw	r26, 0x02	; 2
    1aa0:	8b ea       	ldi	r24, 0xAB	; 171
    1aa2:	94 e1       	ldi	r25, 0x14	; 20
    1aa4:	11 96       	adiw	r26, 0x01	; 1
    1aa6:	9c 93       	st	X, r25
    1aa8:	8e 93       	st	-X, r24
    1aaa:	12 96       	adiw	r26, 0x02	; 2
    1aac:	89 e4       	ldi	r24, 0x49	; 73
    1aae:	94 e1       	ldi	r25, 0x14	; 20
    1ab0:	11 96       	adiw	r26, 0x01	; 1
    1ab2:	9c 93       	st	X, r25
    1ab4:	8e 93       	st	-X, r24
    1ab6:	12 96       	adiw	r26, 0x02	; 2
    1ab8:	8a e7       	ldi	r24, 0x7A	; 122
    1aba:	94 e1       	ldi	r25, 0x14	; 20
    1abc:	11 96       	adiw	r26, 0x01	; 1
    1abe:	9c 93       	st	X, r25
    1ac0:	8e 93       	st	-X, r24
    1ac2:	12 96       	adiw	r26, 0x02	; 2
    1ac4:	8f ed       	ldi	r24, 0xDF	; 223
    1ac6:	95 e0       	ldi	r25, 0x05	; 5
    1ac8:	11 96       	adiw	r26, 0x01	; 1
    1aca:	9c 93       	st	X, r25
    1acc:	8e 93       	st	-X, r24
    1ace:	12 96       	adiw	r26, 0x02	; 2
    1ad0:	80 ee       	ldi	r24, 0xE0	; 224
    1ad2:	94 e1       	ldi	r25, 0x14	; 20
    1ad4:	11 96       	adiw	r26, 0x01	; 1
    1ad6:	9c 93       	st	X, r25
    1ad8:	8e 93       	st	-X, r24
    1ada:	12 96       	adiw	r26, 0x02	; 2
    1adc:	8e eb       	ldi	r24, 0xBE	; 190
    1ade:	90 e1       	ldi	r25, 0x10	; 16
    1ae0:	11 96       	adiw	r26, 0x01	; 1
    1ae2:	9c 93       	st	X, r25
    1ae4:	8e 93       	st	-X, r24
    1ae6:	12 96       	adiw	r26, 0x02	; 2
    1ae8:	86 e8       	ldi	r24, 0x86	; 134
    1aea:	91 e1       	ldi	r25, 0x11	; 17
    1aec:	11 96       	adiw	r26, 0x01	; 1
    1aee:	9c 93       	st	X, r25
    1af0:	8e 93       	st	-X, r24
    1af2:	12 96       	adiw	r26, 0x02	; 2
    1af4:	84 e3       	ldi	r24, 0x34	; 52
    1af6:	95 e1       	ldi	r25, 0x15	; 21
    1af8:	8d 93       	st	X+, r24
    1afa:	9c 93       	st	X, r25
    1afc:	e4 58       	subi	r30, 0x84	; 132
    1afe:	ff 4f       	sbci	r31, 0xFF	; 255
    1b00:	87 e1       	ldi	r24, 0x17	; 23
    1b02:	90 e1       	ldi	r25, 0x10	; 16
    1b04:	91 83       	std	Z+1, r25	; 0x01
    1b06:	80 83       	st	Z, r24
    1b08:	5a d8       	rcall	.-3916   	; 0xbbe <FlashEnter4ByteAddressMode>
    1b0a:	e0 91 d2 0d 	lds	r30, 0x0DD2
    1b0e:	f0 91 d3 0d 	lds	r31, 0x0DD3
    1b12:	e6 59       	subi	r30, 0x96	; 150
    1b14:	ff 4f       	sbci	r31, 0xFF	; 255
    1b16:	01 90       	ld	r0, Z+
    1b18:	f0 81       	ld	r31, Z
    1b1a:	e0 2d       	mov	r30, r0
    1b1c:	ce 01       	movw	r24, r28
    1b1e:	01 96       	adiw	r24, 0x01	; 1
    1b20:	19 95       	eicall
    1b22:	89 81       	ldd	r24, Y+1	; 0x01
    1b24:	80 ff       	sbrs	r24, 0
    1b26:	5b c1       	rjmp	.+694    	; 0x1dde <Driver_Init+0x1184>
    1b28:	e0 91 d2 0d 	lds	r30, 0x0DD2
    1b2c:	f0 91 d3 0d 	lds	r31, 0x0DD3
    1b30:	e9 5b       	subi	r30, 0xB9	; 185
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	84 e0       	ldi	r24, 0x04	; 4
    1b36:	80 83       	st	Z, r24
    1b38:	80 e0       	ldi	r24, 0x00	; 0
    1b3a:	54 c1       	rjmp	.+680    	; 0x1de4 <Driver_Init+0x118a>
    1b3c:	81 32       	cpi	r24, 0x21	; 33
    1b3e:	2a eb       	ldi	r18, 0xBA	; 186
    1b40:	92 07       	cpc	r25, r18
    1b42:	20 e2       	ldi	r18, 0x20	; 32
    1b44:	a2 07       	cpc	r26, r18
    1b46:	b1 05       	cpc	r27, r1
    1b48:	09 f0       	breq	.+2      	; 0x1b4c <Driver_Init+0xef2>
    1b4a:	35 c1       	rjmp	.+618    	; 0x1db6 <Driver_Init+0x115c>
    1b4c:	8e e0       	ldi	r24, 0x0E	; 14
    1b4e:	94 e0       	ldi	r25, 0x04	; 4
    1b50:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
    1b54:	e0 91 d2 0d 	lds	r30, 0x0DD2
    1b58:	f0 91 d3 0d 	lds	r31, 0x0DD3
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
    1b60:	a0 e0       	ldi	r26, 0x00	; 0
    1b62:	b8 e0       	ldi	r27, 0x08	; 8
    1b64:	85 a7       	std	Z+45, r24	; 0x2d
    1b66:	96 a7       	std	Z+46, r25	; 0x2e
    1b68:	a7 a7       	std	Z+47, r26	; 0x2f
    1b6a:	b0 ab       	std	Z+48, r27	; 0x30
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	98 e0       	ldi	r25, 0x08	; 8
    1b70:	a0 e0       	ldi	r26, 0x00	; 0
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	85 87       	std	Z+13, r24	; 0x0d
    1b76:	96 87       	std	Z+14, r25	; 0x0e
    1b78:	a7 87       	std	Z+15, r26	; 0x0f
    1b7a:	b0 8b       	std	Z+16, r27	; 0x10
    1b7c:	80 e0       	ldi	r24, 0x00	; 0
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	a1 e0       	ldi	r26, 0x01	; 1
    1b82:	b0 e0       	ldi	r27, 0x00	; 0
    1b84:	81 a3       	std	Z+33, r24	; 0x21
    1b86:	92 a3       	std	Z+34, r25	; 0x22
    1b88:	a3 a3       	std	Z+35, r26	; 0x23
    1b8a:	b4 a3       	std	Z+36, r27	; 0x24
    1b8c:	80 e1       	ldi	r24, 0x10	; 16
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	a0 e0       	ldi	r26, 0x00	; 0
    1b92:	b0 e0       	ldi	r27, 0x00	; 0
    1b94:	85 a3       	std	Z+37, r24	; 0x25
    1b96:	96 a3       	std	Z+38, r25	; 0x26
    1b98:	a7 a3       	std	Z+39, r26	; 0x27
    1b9a:	b0 a7       	std	Z+40, r27	; 0x28
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	90 e8       	ldi	r25, 0x80	; 128
    1ba0:	a0 e0       	ldi	r26, 0x00	; 0
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	81 8b       	std	Z+17, r24	; 0x11
    1ba6:	92 8b       	std	Z+18, r25	; 0x12
    1ba8:	a3 8b       	std	Z+19, r26	; 0x13
    1baa:	b4 8b       	std	Z+20, r27	; 0x14
    1bac:	80 e0       	ldi	r24, 0x00	; 0
    1bae:	90 e1       	ldi	r25, 0x10	; 16
    1bb0:	a0 e0       	ldi	r26, 0x00	; 0
    1bb2:	b0 e0       	ldi	r27, 0x00	; 0
    1bb4:	81 a7       	std	Z+41, r24	; 0x29
    1bb6:	92 a7       	std	Z+42, r25	; 0x2a
    1bb8:	a3 a7       	std	Z+43, r26	; 0x2b
    1bba:	b4 a7       	std	Z+44, r27	; 0x2c
    1bbc:	8c e0       	ldi	r24, 0x0C	; 12
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	a0 e0       	ldi	r26, 0x00	; 0
    1bc2:	b0 e0       	ldi	r27, 0x00	; 0
    1bc4:	85 8b       	std	Z+21, r24	; 0x15
    1bc6:	96 8b       	std	Z+22, r25	; 0x16
    1bc8:	a7 8b       	std	Z+23, r26	; 0x17
    1bca:	b0 8f       	std	Z+24, r27	; 0x18
    1bcc:	80 e0       	ldi	r24, 0x00	; 0
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	a8 e0       	ldi	r26, 0x08	; 8
    1bd2:	b0 e0       	ldi	r27, 0x00	; 0
    1bd4:	85 8f       	std	Z+29, r24	; 0x1d
    1bd6:	96 8f       	std	Z+30, r25	; 0x1e
    1bd8:	a7 8f       	std	Z+31, r26	; 0x1f
    1bda:	b0 a3       	std	Z+32, r27	; 0x20
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	91 e0       	ldi	r25, 0x01	; 1
    1be0:	a0 e0       	ldi	r26, 0x00	; 0
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	81 8f       	std	Z+25, r24	; 0x19
    1be6:	92 8f       	std	Z+26, r25	; 0x1a
    1be8:	a3 8f       	std	Z+27, r26	; 0x1b
    1bea:	b4 8f       	std	Z+28, r27	; 0x1c
    1bec:	80 e4       	ldi	r24, 0x40	; 64
    1bee:	90 e0       	ldi	r25, 0x00	; 0
    1bf0:	a0 e0       	ldi	r26, 0x00	; 0
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	81 ab       	std	Z+49, r24	; 0x31
    1bf6:	92 ab       	std	Z+50, r25	; 0x32
    1bf8:	a3 ab       	std	Z+51, r26	; 0x33
    1bfa:	b4 ab       	std	Z+52, r27	; 0x34
    1bfc:	8f ef       	ldi	r24, 0xFF	; 255
    1bfe:	90 e0       	ldi	r25, 0x00	; 0
    1c00:	a0 e0       	ldi	r26, 0x00	; 0
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	81 87       	std	Z+9, r24	; 0x09
    1c06:	92 87       	std	Z+10, r25	; 0x0a
    1c08:	a3 87       	std	Z+11, r26	; 0x0b
    1c0a:	b4 87       	std	Z+12, r27	; 0x0c
    1c0c:	84 e0       	ldi	r24, 0x04	; 4
    1c0e:	85 ab       	std	Z+53, r24	; 0x35
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	a0 e0       	ldi	r26, 0x00	; 0
    1c16:	b2 e0       	ldi	r27, 0x02	; 2
    1c18:	86 ab       	std	Z+54, r24	; 0x36
    1c1a:	97 ab       	std	Z+55, r25	; 0x37
    1c1c:	a0 af       	std	Z+56, r26	; 0x38
    1c1e:	b1 af       	std	Z+57, r27	; 0x39
    1c20:	89 e1       	ldi	r24, 0x19	; 25
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	a0 e0       	ldi	r26, 0x00	; 0
    1c26:	b0 e0       	ldi	r27, 0x00	; 0
    1c28:	82 af       	std	Z+58, r24	; 0x3a
    1c2a:	93 af       	std	Z+59, r25	; 0x3b
    1c2c:	a4 af       	std	Z+60, r26	; 0x3c
    1c2e:	b5 af       	std	Z+61, r27	; 0x3d
    1c30:	df 01       	movw	r26, r30
    1c32:	a9 5b       	subi	r26, 0xB9	; 185
    1c34:	bf 4f       	sbci	r27, 0xFF	; 255
    1c36:	83 e0       	ldi	r24, 0x03	; 3
    1c38:	8c 93       	st	X, r24
    1c3a:	13 96       	adiw	r26, 0x03	; 3
    1c3c:	8b ed       	ldi	r24, 0xDB	; 219
    1c3e:	93 e0       	ldi	r25, 0x03	; 3
    1c40:	11 96       	adiw	r26, 0x01	; 1
    1c42:	9c 93       	st	X, r25
    1c44:	8e 93       	st	-X, r24
    1c46:	12 96       	adiw	r26, 0x02	; 2
    1c48:	8e e5       	ldi	r24, 0x5E	; 94
    1c4a:	94 e0       	ldi	r25, 0x04	; 4
    1c4c:	11 96       	adiw	r26, 0x01	; 1
    1c4e:	9c 93       	st	X, r25
    1c50:	8e 93       	st	-X, r24
    1c52:	12 96       	adiw	r26, 0x02	; 2
    1c54:	87 ec       	ldi	r24, 0xC7	; 199
    1c56:	92 e1       	ldi	r25, 0x12	; 18
    1c58:	11 96       	adiw	r26, 0x01	; 1
    1c5a:	9c 93       	st	X, r25
    1c5c:	8e 93       	st	-X, r24
    1c5e:	12 96       	adiw	r26, 0x02	; 2
    1c60:	8e ed       	ldi	r24, 0xDE	; 222
    1c62:	9f e0       	ldi	r25, 0x0F	; 15
    1c64:	11 96       	adiw	r26, 0x01	; 1
    1c66:	9c 93       	st	X, r25
    1c68:	8e 93       	st	-X, r24
    1c6a:	12 96       	adiw	r26, 0x02	; 2
    1c6c:	88 ee       	ldi	r24, 0xE8	; 232
    1c6e:	92 e1       	ldi	r25, 0x12	; 18
    1c70:	11 96       	adiw	r26, 0x01	; 1
    1c72:	9c 93       	st	X, r25
    1c74:	8e 93       	st	-X, r24
    1c76:	12 96       	adiw	r26, 0x02	; 2
    1c78:	84 e6       	ldi	r24, 0x64	; 100
    1c7a:	93 e1       	ldi	r25, 0x13	; 19
    1c7c:	11 96       	adiw	r26, 0x01	; 1
    1c7e:	9c 93       	st	X, r25
    1c80:	8e 93       	st	-X, r24
    1c82:	12 96       	adiw	r26, 0x02	; 2
    1c84:	8a ed       	ldi	r24, 0xDA	; 218
    1c86:	93 e1       	ldi	r25, 0x13	; 19
    1c88:	11 96       	adiw	r26, 0x01	; 1
    1c8a:	9c 93       	st	X, r25
    1c8c:	8e 93       	st	-X, r24
    1c8e:	12 96       	adiw	r26, 0x02	; 2
    1c90:	11 96       	adiw	r26, 0x01	; 1
    1c92:	1c 92       	st	X, r1
    1c94:	1e 92       	st	-X, r1
    1c96:	50 97       	sbiw	r26, 0x10	; 16
    1c98:	8d ec       	ldi	r24, 0xCD	; 205
    1c9a:	93 e0       	ldi	r25, 0x03	; 3
    1c9c:	11 96       	adiw	r26, 0x01	; 1
    1c9e:	9c 93       	st	X, r25
    1ca0:	8e 93       	st	-X, r24
    1ca2:	52 96       	adiw	r26, 0x12	; 18
    1ca4:	8f e8       	ldi	r24, 0x8F	; 143
    1ca6:	94 e0       	ldi	r25, 0x04	; 4
    1ca8:	11 96       	adiw	r26, 0x01	; 1
    1caa:	9c 93       	st	X, r25
    1cac:	8e 93       	st	-X, r24
    1cae:	12 96       	adiw	r26, 0x02	; 2
    1cb0:	8e eb       	ldi	r24, 0xBE	; 190
    1cb2:	94 e0       	ldi	r25, 0x04	; 4
    1cb4:	11 96       	adiw	r26, 0x01	; 1
    1cb6:	9c 93       	st	X, r25
    1cb8:	8e 93       	st	-X, r24
    1cba:	12 96       	adiw	r26, 0x02	; 2
    1cbc:	11 96       	adiw	r26, 0x01	; 1
    1cbe:	1c 92       	st	X, r1
    1cc0:	1e 92       	st	-X, r1
    1cc2:	12 96       	adiw	r26, 0x02	; 2
    1cc4:	11 96       	adiw	r26, 0x01	; 1
    1cc6:	1c 92       	st	X, r1
    1cc8:	1e 92       	st	-X, r1
    1cca:	12 96       	adiw	r26, 0x02	; 2
    1ccc:	8d ee       	ldi	r24, 0xED	; 237
    1cce:	94 e0       	ldi	r25, 0x04	; 4
    1cd0:	11 96       	adiw	r26, 0x01	; 1
    1cd2:	9c 93       	st	X, r25
    1cd4:	8e 93       	st	-X, r24
    1cd6:	12 96       	adiw	r26, 0x02	; 2
    1cd8:	86 e1       	ldi	r24, 0x16	; 22
    1cda:	95 e0       	ldi	r25, 0x05	; 5
    1cdc:	11 96       	adiw	r26, 0x01	; 1
    1cde:	9c 93       	st	X, r25
    1ce0:	8e 93       	st	-X, r24
    1ce2:	12 96       	adiw	r26, 0x02	; 2
    1ce4:	8c e4       	ldi	r24, 0x4C	; 76
    1ce6:	95 e0       	ldi	r25, 0x05	; 5
    1ce8:	11 96       	adiw	r26, 0x01	; 1
    1cea:	9c 93       	st	X, r25
    1cec:	8e 93       	st	-X, r24
    1cee:	12 96       	adiw	r26, 0x02	; 2
    1cf0:	8d e7       	ldi	r24, 0x7D	; 125
    1cf2:	95 e0       	ldi	r25, 0x05	; 5
    1cf4:	11 96       	adiw	r26, 0x01	; 1
    1cf6:	9c 93       	st	X, r25
    1cf8:	8e 93       	st	-X, r24
    1cfa:	12 96       	adiw	r26, 0x02	; 2
    1cfc:	8e ea       	ldi	r24, 0xAE	; 174
    1cfe:	95 e0       	ldi	r25, 0x05	; 5
    1d00:	11 96       	adiw	r26, 0x01	; 1
    1d02:	9c 93       	st	X, r25
    1d04:	8e 93       	st	-X, r24
    1d06:	12 96       	adiw	r26, 0x02	; 2
    1d08:	8b ea       	ldi	r24, 0xAB	; 171
    1d0a:	94 e1       	ldi	r25, 0x14	; 20
    1d0c:	11 96       	adiw	r26, 0x01	; 1
    1d0e:	9c 93       	st	X, r25
    1d10:	8e 93       	st	-X, r24
    1d12:	12 96       	adiw	r26, 0x02	; 2
    1d14:	89 e4       	ldi	r24, 0x49	; 73
    1d16:	94 e1       	ldi	r25, 0x14	; 20
    1d18:	11 96       	adiw	r26, 0x01	; 1
    1d1a:	9c 93       	st	X, r25
    1d1c:	8e 93       	st	-X, r24
    1d1e:	12 96       	adiw	r26, 0x02	; 2
    1d20:	8a e7       	ldi	r24, 0x7A	; 122
    1d22:	94 e1       	ldi	r25, 0x14	; 20
    1d24:	11 96       	adiw	r26, 0x01	; 1
    1d26:	9c 93       	st	X, r25
    1d28:	8e 93       	st	-X, r24
    1d2a:	12 96       	adiw	r26, 0x02	; 2
    1d2c:	8f ed       	ldi	r24, 0xDF	; 223
    1d2e:	95 e0       	ldi	r25, 0x05	; 5
    1d30:	11 96       	adiw	r26, 0x01	; 1
    1d32:	9c 93       	st	X, r25
    1d34:	8e 93       	st	-X, r24
    1d36:	12 96       	adiw	r26, 0x02	; 2
    1d38:	80 ee       	ldi	r24, 0xE0	; 224
    1d3a:	94 e1       	ldi	r25, 0x14	; 20
    1d3c:	11 96       	adiw	r26, 0x01	; 1
    1d3e:	9c 93       	st	X, r25
    1d40:	8e 93       	st	-X, r24
    1d42:	12 96       	adiw	r26, 0x02	; 2
    1d44:	8e eb       	ldi	r24, 0xBE	; 190
    1d46:	90 e1       	ldi	r25, 0x10	; 16
    1d48:	11 96       	adiw	r26, 0x01	; 1
    1d4a:	9c 93       	st	X, r25
    1d4c:	8e 93       	st	-X, r24
    1d4e:	12 96       	adiw	r26, 0x02	; 2
    1d50:	86 e8       	ldi	r24, 0x86	; 134
    1d52:	91 e1       	ldi	r25, 0x11	; 17
    1d54:	11 96       	adiw	r26, 0x01	; 1
    1d56:	9c 93       	st	X, r25
    1d58:	8e 93       	st	-X, r24
    1d5a:	12 96       	adiw	r26, 0x02	; 2
    1d5c:	84 e3       	ldi	r24, 0x34	; 52
    1d5e:	95 e1       	ldi	r25, 0x15	; 21
    1d60:	8d 93       	st	X+, r24
    1d62:	9c 93       	st	X, r25
    1d64:	e4 58       	subi	r30, 0x84	; 132
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	87 e1       	ldi	r24, 0x17	; 23
    1d6a:	90 e1       	ldi	r25, 0x10	; 16
    1d6c:	91 83       	std	Z+1, r25	; 0x01
    1d6e:	80 83       	st	Z, r24
    1d70:	0e 94 df 05 	call	0xbbe	; 0xbbe <FlashEnter4ByteAddressMode>
    1d74:	8e e1       	ldi	r24, 0x1E	; 30
    1d76:	94 e0       	ldi	r25, 0x04	; 4
    1d78:	9f 93       	push	r25
    1d7a:	8f 93       	push	r24
    1d7c:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    1d80:	e0 91 d2 0d 	lds	r30, 0x0DD2
    1d84:	f0 91 d3 0d 	lds	r31, 0x0DD3
    1d88:	e6 59       	subi	r30, 0x96	; 150
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	01 90       	ld	r0, Z+
    1d8e:	f0 81       	ld	r31, Z
    1d90:	e0 2d       	mov	r30, r0
    1d92:	ce 01       	movw	r24, r28
    1d94:	01 96       	adiw	r24, 0x01	; 1
    1d96:	19 95       	eicall
    1d98:	89 81       	ldd	r24, Y+1	; 0x01
    1d9a:	0f 90       	pop	r0
    1d9c:	0f 90       	pop	r0
    1d9e:	80 ff       	sbrs	r24, 0
    1da0:	20 c0       	rjmp	.+64     	; 0x1de2 <Driver_Init+0x1188>
    1da2:	e0 91 d2 0d 	lds	r30, 0x0DD2
    1da6:	f0 91 d3 0d 	lds	r31, 0x0DD3
    1daa:	e9 5b       	subi	r30, 0xB9	; 185
    1dac:	ff 4f       	sbci	r31, 0xFF	; 255
    1dae:	84 e0       	ldi	r24, 0x04	; 4
    1db0:	80 83       	st	Z, r24
    1db2:	80 e0       	ldi	r24, 0x00	; 0
    1db4:	17 c0       	rjmp	.+46     	; 0x1de4 <Driver_Init+0x118a>
    1db6:	bf 93       	push	r27
    1db8:	af 93       	push	r26
    1dba:	9f 93       	push	r25
    1dbc:	8f 93       	push	r24
    1dbe:	85 e2       	ldi	r24, 0x25	; 37
    1dc0:	94 e0       	ldi	r25, 0x04	; 4
    1dc2:	9f 93       	push	r25
    1dc4:	8f 93       	push	r24
    1dc6:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    1dca:	0f 90       	pop	r0
    1dcc:	0f 90       	pop	r0
    1dce:	0f 90       	pop	r0
    1dd0:	0f 90       	pop	r0
    1dd2:	0f 90       	pop	r0
    1dd4:	0f 90       	pop	r0
    1dd6:	83 e1       	ldi	r24, 0x13	; 19
    1dd8:	05 c0       	rjmp	.+10     	; 0x1de4 <Driver_Init+0x118a>
    1dda:	80 e0       	ldi	r24, 0x00	; 0
    1ddc:	03 c0       	rjmp	.+6      	; 0x1de4 <Driver_Init+0x118a>
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	01 c0       	rjmp	.+2      	; 0x1de4 <Driver_Init+0x118a>
    1de2:	80 e0       	ldi	r24, 0x00	; 0
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	0f 90       	pop	r0
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	df 91       	pop	r29
    1df0:	cf 91       	pop	r28
    1df2:	1f 91       	pop	r17
    1df4:	0f 91       	pop	r16
    1df6:	08 95       	ret

00001df8 <IsFlashBusy>:
    1df8:	cf 93       	push	r28
    1dfa:	df 93       	push	r29
    1dfc:	1f 92       	push	r1
    1dfe:	cd b7       	in	r28, 0x3d	; 61
    1e00:	de b7       	in	r29, 0x3e	; 62
    1e02:	e0 91 d2 0d 	lds	r30, 0x0DD2
    1e06:	f0 91 d3 0d 	lds	r31, 0x0DD3
    1e0a:	80 81       	ld	r24, Z
    1e0c:	91 81       	ldd	r25, Z+1	; 0x01
    1e0e:	a2 81       	ldd	r26, Z+2	; 0x02
    1e10:	b3 81       	ldd	r27, Z+3	; 0x03
    1e12:	ac 01       	movw	r20, r24
    1e14:	bd 01       	movw	r22, r26
    1e16:	40 52       	subi	r20, 0x20	; 32
    1e18:	5a 4b       	sbci	r21, 0xBA	; 186
    1e1a:	60 42       	sbci	r22, 0x20	; 32
    1e1c:	71 09       	sbc	r23, r1
    1e1e:	42 30       	cpi	r20, 0x02	; 2
    1e20:	51 05       	cpc	r21, r1
    1e22:	61 05       	cpc	r22, r1
    1e24:	71 05       	cpc	r23, r1
    1e26:	28 f0       	brcs	.+10     	; 0x1e32 <IsFlashBusy+0x3a>
    1e28:	80 32       	cpi	r24, 0x20	; 32
    1e2a:	9b 4b       	sbci	r25, 0xBB	; 187
    1e2c:	a0 42       	sbci	r26, 0x20	; 32
    1e2e:	b1 05       	cpc	r27, r1
    1e30:	51 f4       	brne	.+20     	; 0x1e46 <IsFlashBusy+0x4e>
    1e32:	ce 01       	movw	r24, r28
    1e34:	01 96       	adiw	r24, 0x01	; 1
    1e36:	0e 94 ae 05 	call	0xb5c	; 0xb5c <FlashReadFlagStatusRegister>
    1e3a:	89 81       	ldd	r24, Y+1	; 0x01
    1e3c:	80 95       	com	r24
    1e3e:	88 1f       	adc	r24, r24
    1e40:	88 27       	eor	r24, r24
    1e42:	88 1f       	adc	r24, r24
    1e44:	06 c0       	rjmp	.+12     	; 0x1e52 <IsFlashBusy+0x5a>
    1e46:	ce 01       	movw	r24, r28
    1e48:	01 96       	adiw	r24, 0x01	; 1
    1e4a:	0e 94 5e 04 	call	0x8bc	; 0x8bc <FlashReadStatusRegister>
    1e4e:	89 81       	ldd	r24, Y+1	; 0x01
    1e50:	81 70       	andi	r24, 0x01	; 1
    1e52:	0f 90       	pop	r0
    1e54:	df 91       	pop	r29
    1e56:	cf 91       	pop	r28
    1e58:	08 95       	ret

00001e5a <FlashTimeOut>:
   other operations which would otherwise never return.
   The Routine uses COUNT_FOR_A_SECOND which is considered to be a loop that
   counts for one second. It needs to be adapted to the target Hardware.
-----------------------------------------------------------------------------*/
ReturnType FlashTimeOut(NMX_uint32 udSeconds)
{
    1e5a:	cf 92       	push	r12
    1e5c:	df 92       	push	r13
    1e5e:	ef 92       	push	r14
    1e60:	ff 92       	push	r15

	static NMX_uint32 udCounter = 0;
	if (udSeconds == 0)   /* Set Timeout to 0 */
    1e62:	61 15       	cp	r22, r1
    1e64:	71 05       	cpc	r23, r1
    1e66:	81 05       	cpc	r24, r1
    1e68:	91 05       	cpc	r25, r1
    1e6a:	a9 f0       	breq	.+42     	; 0x1e96 <FlashTimeOut+0x3c>
	{
		udCounter = 0;
	} /* EndIf */

	if (udCounter >= (udSeconds * COUNT_FOR_A_SECOND))
    1e6c:	c0 90 58 08 	lds	r12, 0x0858
    1e70:	d0 90 59 08 	lds	r13, 0x0859
    1e74:	e0 90 5a 08 	lds	r14, 0x085A
    1e78:	f0 90 5b 08 	lds	r15, 0x085B
    1e7c:	9b 01       	movw	r18, r22
    1e7e:	ac 01       	movw	r20, r24
    1e80:	6f ef       	ldi	r22, 0xFF	; 255
    1e82:	7f ef       	ldi	r23, 0xFF	; 255
    1e84:	8f ef       	ldi	r24, 0xFF	; 255
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	0e 94 4e 32 	call	0x649c	; 0x649c <__mulsi3>
    1e8c:	c6 16       	cp	r12, r22
    1e8e:	d7 06       	cpc	r13, r23
    1e90:	e8 06       	cpc	r14, r24
    1e92:	f9 06       	cpc	r15, r25
    1e94:	50 f0       	brcs	.+20     	; 0x1eaa <FlashTimeOut+0x50>
	{
		udCounter = 0;
    1e96:	10 92 58 08 	sts	0x0858, r1
    1e9a:	10 92 59 08 	sts	0x0859, r1
    1e9e:	10 92 5a 08 	sts	0x085A, r1
    1ea2:	10 92 5b 08 	sts	0x085B, r1
		return Flash_OperationTimeOut;
    1ea6:	8a e0       	ldi	r24, 0x0A	; 10
    1ea8:	0e c0       	rjmp	.+28     	; 0x1ec6 <FlashTimeOut+0x6c>
	}
	else
	{
		udCounter++;
    1eaa:	8f ef       	ldi	r24, 0xFF	; 255
    1eac:	c8 1a       	sub	r12, r24
    1eae:	d8 0a       	sbc	r13, r24
    1eb0:	e8 0a       	sbc	r14, r24
    1eb2:	f8 0a       	sbc	r15, r24
    1eb4:	c0 92 58 08 	sts	0x0858, r12
    1eb8:	d0 92 59 08 	sts	0x0859, r13
    1ebc:	e0 92 5a 08 	sts	0x085A, r14
    1ec0:	f0 92 5b 08 	sts	0x085B, r15
		return Flash_OperationOngoing;
    1ec4:	89 e0       	ldi	r24, 0x09	; 9
	} /* Endif */

} /* EndFunction FlashTimeOut */
    1ec6:	ff 90       	pop	r15
    1ec8:	ef 90       	pop	r14
    1eca:	df 90       	pop	r13
    1ecc:	cf 90       	pop	r12
    1ece:	08 95       	ret

00001ed0 <fill_addr_vect>:

/*-----------------------------------------------------------------------------
Description:   This function fill the vector in according with address mode
-----------------------------------------------------------------------------*/
void fill_addr_vect(uAddrType udAddr, NMX_uint8* pIns_Addr, NMX_uint8 num_address_byte)
{
    1ed0:	fa 01       	movw	r30, r20

	/* 3-addr byte mode */
	if(FLASH_3_BYTE_ADDR_MODE == num_address_byte)
    1ed2:	23 30       	cpi	r18, 0x03	; 3
    1ed4:	21 f4       	brne	.+8      	; 0x1ede <fill_addr_vect+0xe>
	{
		pIns_Addr[1]              = udAddr>>16;
    1ed6:	81 83       	std	Z+1, r24	; 0x01
		pIns_Addr[2]              = udAddr>>8;
    1ed8:	72 83       	std	Z+2, r23	; 0x02
		pIns_Addr[3]              = udAddr;
    1eda:	63 83       	std	Z+3, r22	; 0x03
    1edc:	08 95       	ret
	}

	/* 4-addr byte mode */
	if(FLASH_4_BYTE_ADDR_MODE == num_address_byte)
    1ede:	24 30       	cpi	r18, 0x04	; 4
    1ee0:	21 f4       	brne	.+8      	; 0x1eea <fill_addr_vect+0x1a>
	{
		pIns_Addr[1]              = udAddr>>24;
    1ee2:	91 83       	std	Z+1, r25	; 0x01
		pIns_Addr[2]              = udAddr>>16;
    1ee4:	82 83       	std	Z+2, r24	; 0x02
		pIns_Addr[3]              = udAddr>>8;
    1ee6:	73 83       	std	Z+3, r23	; 0x03
		pIns_Addr[4]              = udAddr;
    1ee8:	64 83       	std	Z+4, r22	; 0x04
    1eea:	08 95       	ret

00001eec <FlashDataRead>:
   Step 1: Validate address input
   Step 2: Initialize the data (i.e. Instruction) packet to be sent serially
   Step 3: Send the packet serially, and fill the buffer with the data being returned
*******************************************************************************/
ReturnType FlashDataRead( uAddrType udAddr, NMX_uint8 *ucpElements, NMX_uint32 udNrOfElementsToRead, NMX_uint8 insInstruction)
{
    1eec:	4f 92       	push	r4
    1eee:	5f 92       	push	r5
    1ef0:	6f 92       	push	r6
    1ef2:	7f 92       	push	r7
    1ef4:	8f 92       	push	r8
    1ef6:	9f 92       	push	r9
    1ef8:	af 92       	push	r10
    1efa:	bf 92       	push	r11
    1efc:	cf 92       	push	r12
    1efe:	df 92       	push	r13
    1f00:	ef 92       	push	r14
    1f02:	ff 92       	push	r15
    1f04:	0f 93       	push	r16
    1f06:	1f 93       	push	r17
    1f08:	cf 93       	push	r28
    1f0a:	df 93       	push	r29
    1f0c:	cd b7       	in	r28, 0x3d	; 61
    1f0e:	de b7       	in	r29, 0x3e	; 62
    1f10:	61 97       	sbiw	r28, 0x11	; 17
    1f12:	0f b6       	in	r0, 0x3f	; 63
    1f14:	f8 94       	cli
    1f16:	de bf       	out	0x3e, r29	; 62
    1f18:	0f be       	out	0x3f, r0	; 63
    1f1a:	cd bf       	out	0x3d, r28	; 61
    1f1c:	ae 2d       	mov	r26, r14
	CharStream char_stream_send;
	CharStream char_stream_recv;
	NMX_uint8  pIns_Addr[5];

	// Step 1: Validate address input
	if(!(udAddr < fdo->Desc.FlashSize))
    1f1e:	e0 91 d2 0d 	lds	r30, 0x0DD2
    1f22:	f0 91 d3 0d 	lds	r31, 0x0DD3
    1f26:	c5 a4       	ldd	r12, Z+45	; 0x2d
    1f28:	d6 a4       	ldd	r13, Z+46	; 0x2e
    1f2a:	e7 a4       	ldd	r14, Z+47	; 0x2f
    1f2c:	f0 a8       	ldd	r15, Z+48	; 0x30
    1f2e:	6c 15       	cp	r22, r12
    1f30:	7d 05       	cpc	r23, r13
    1f32:	8e 05       	cpc	r24, r14
    1f34:	9f 05       	cpc	r25, r15
    1f36:	50 f5       	brcc	.+84     	; 0x1f8c <FlashDataRead+0xa0>
    1f38:	48 01       	movw	r8, r16
    1f3a:	59 01       	movw	r10, r18
    1f3c:	6a 01       	movw	r12, r20
		return Flash_AddressInvalid;

	// Step 2: Initialize the data (i.e. Instruction) packet to be sent serially
	char_stream_send.length   = fdo->Desc.NumAddrByte + 1;
    1f3e:	e9 5b       	subi	r30, 0xB9	; 185
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	20 81       	ld	r18, Z
    1f44:	42 2f       	mov	r20, r18
    1f46:	50 e0       	ldi	r21, 0x00	; 0
    1f48:	4f 5f       	subi	r20, 0xFF	; 255
    1f4a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f4c:	2a 01       	movw	r4, r20
    1f4e:	55 0f       	add	r21, r21
    1f50:	66 08       	sbc	r6, r6
    1f52:	77 08       	sbc	r7, r7
    1f54:	4b 82       	std	Y+3, r4	; 0x03
    1f56:	5c 82       	std	Y+4, r5	; 0x04
    1f58:	6d 82       	std	Y+5, r6	; 0x05
    1f5a:	7e 82       	std	Y+6, r7	; 0x06
	char_stream_send.pChar    = pIns_Addr;
    1f5c:	ae 01       	movw	r20, r28
    1f5e:	43 5f       	subi	r20, 0xF3	; 243
    1f60:	5f 4f       	sbci	r21, 0xFF	; 255
    1f62:	5a 83       	std	Y+2, r21	; 0x02
    1f64:	49 83       	std	Y+1, r20	; 0x01
	pIns_Addr[0]              = insInstruction;
    1f66:	ad 87       	std	Y+13, r26	; 0x0d

	fill_addr_vect(udAddr, pIns_Addr, fdo->Desc.NumAddrByte);
    1f68:	b3 df       	rcall	.-154    	; 0x1ed0 <fill_addr_vect>

	char_stream_recv.length   = udNrOfElementsToRead;
    1f6a:	89 86       	std	Y+9, r8	; 0x09
    1f6c:	9a 86       	std	Y+10, r9	; 0x0a
    1f6e:	ab 86       	std	Y+11, r10	; 0x0b
    1f70:	bc 86       	std	Y+12, r11	; 0x0c
	char_stream_recv.pChar    = ucpElements;
    1f72:	d8 86       	std	Y+8, r13	; 0x08
    1f74:	cf 82       	std	Y+7, r12	; 0x07

	// Step 3: Send the packet serially, and fill the buffer with the data being returned
	Serialize_SPI(&char_stream_send,
    1f76:	23 e0       	ldi	r18, 0x03	; 3
    1f78:	41 e0       	ldi	r20, 0x01	; 1
    1f7a:	be 01       	movw	r22, r28
    1f7c:	69 5f       	subi	r22, 0xF9	; 249
    1f7e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f80:	ce 01       	movw	r24, r28
    1f82:	01 96       	adiw	r24, 0x01	; 1
    1f84:	0e 94 25 18 	call	0x304a	; 0x304a <Serialize_SPI>
	              &char_stream_recv,
	              OpsWakeUp,
	              OpsEndTransfer);

	return Flash_Success;
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	01 c0       	rjmp	.+2      	; 0x1f8e <FlashDataRead+0xa2>
	CharStream char_stream_recv;
	NMX_uint8  pIns_Addr[5];

	// Step 1: Validate address input
	if(!(udAddr < fdo->Desc.FlashSize))
		return Flash_AddressInvalid;
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
	              &char_stream_recv,
	              OpsWakeUp,
	              OpsEndTransfer);

	return Flash_Success;
}
    1f8e:	61 96       	adiw	r28, 0x11	; 17
    1f90:	0f b6       	in	r0, 0x3f	; 63
    1f92:	f8 94       	cli
    1f94:	de bf       	out	0x3e, r29	; 62
    1f96:	0f be       	out	0x3f, r0	; 63
    1f98:	cd bf       	out	0x3d, r28	; 61
    1f9a:	df 91       	pop	r29
    1f9c:	cf 91       	pop	r28
    1f9e:	1f 91       	pop	r17
    1fa0:	0f 91       	pop	r16
    1fa2:	ff 90       	pop	r15
    1fa4:	ef 90       	pop	r14
    1fa6:	df 90       	pop	r13
    1fa8:	cf 90       	pop	r12
    1faa:	bf 90       	pop	r11
    1fac:	af 90       	pop	r10
    1fae:	9f 90       	pop	r9
    1fb0:	8f 90       	pop	r8
    1fb2:	7f 90       	pop	r7
    1fb4:	6f 90       	pop	r6
    1fb6:	5f 90       	pop	r5
    1fb8:	4f 90       	pop	r4
    1fba:	08 95       	ret

00001fbc <DataRead>:
   Step 1: Select the right action using the insInstruction parameter
   Step 2: Execute the Flash memory Function
   Step 3: Return the Error Code
*******************************************************************************/
ReturnType DataRead(InstructionType insInstruction, ParameterType *fp)
{
    1fbc:	ef 92       	push	r14
    1fbe:	0f 93       	push	r16
    1fc0:	1f 93       	push	r17
	NMX_uint8 insCode;
	ReturnType rRetVal;

	switch (insInstruction)
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	fc 01       	movw	r30, r24
    1fc6:	36 97       	sbiw	r30, 0x06	; 6
    1fc8:	e7 30       	cpi	r30, 0x07	; 7
    1fca:	f1 05       	cpc	r31, r1
    1fcc:	58 f5       	brcc	.+86     	; 0x2024 <DataRead+0x68>
    1fce:	88 27       	eor	r24, r24
    1fd0:	e6 56       	subi	r30, 0x66	; 102
    1fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd4:	8f 4f       	sbci	r24, 0xFF	; 255
    1fd6:	0c 94 9b 32 	jmp	0x6536	; 0x6536 <__tablejump2__>
	case Read:
		insCode = SPI_FLASH_INS_READ;
		break;

	case FastRead:
		insCode = SPI_FLASH_INS_FAST_READ;
    1fda:	0f 2e       	mov	r0, r31
    1fdc:	fb e0       	ldi	r31, 0x0B	; 11
    1fde:	ef 2e       	mov	r14, r31
    1fe0:	f0 2d       	mov	r31, r0
    1fe2:	13 c0       	rjmp	.+38     	; 0x200a <DataRead+0x4e>
		break;

	case DualOutputFastRead:
		insCode = SPI_FLASH_INS_DOFR;
    1fe4:	0f 2e       	mov	r0, r31
    1fe6:	fb e3       	ldi	r31, 0x3B	; 59
    1fe8:	ef 2e       	mov	r14, r31
    1fea:	f0 2d       	mov	r31, r0
		break;
    1fec:	0e c0       	rjmp	.+28     	; 0x200a <DataRead+0x4e>

	case QuadOutputFastRead:
		insCode = SPI_FLASH_INS_QOFR;
    1fee:	0f 2e       	mov	r0, r31
    1ff0:	fb e6       	ldi	r31, 0x6B	; 107
    1ff2:	ef 2e       	mov	r14, r31
    1ff4:	f0 2d       	mov	r31, r0
		break;
    1ff6:	09 c0       	rjmp	.+18     	; 0x200a <DataRead+0x4e>

	case QuadInputOutputFastRead:
		insCode = SPI_FLASH_INS_QIOFR;
		break;
	case ReadFlashDiscovery:
		insCode = SPI_FLASH_INS_DISCOVER_PARAMETER;
    1ff8:	0f 2e       	mov	r0, r31
    1ffa:	fa e5       	ldi	r31, 0x5A	; 90
    1ffc:	ef 2e       	mov	r14, r31
    1ffe:	f0 2d       	mov	r31, r0
		break;
    2000:	04 c0       	rjmp	.+8      	; 0x200a <DataRead+0x4e>
	ReturnType rRetVal;

	switch (insInstruction)
	{
	case Read:
		insCode = SPI_FLASH_INS_READ;
    2002:	0f 2e       	mov	r0, r31
    2004:	f3 e0       	ldi	r31, 0x03	; 3
    2006:	ef 2e       	mov	r14, r31
    2008:	f0 2d       	mov	r31, r0
    200a:	fb 01       	movw	r30, r22
	default:
		return Flash_FunctionNotSupported;
		break;

	} /* EndSwitch */
	rRetVal = FlashDataRead(fp->Read.udAddr, fp->Read.pArray, fp->Read.udNrOfElementsToRead, insCode);
    200c:	04 81       	ldd	r16, Z+4	; 0x04
    200e:	15 81       	ldd	r17, Z+5	; 0x05
    2010:	26 81       	ldd	r18, Z+6	; 0x06
    2012:	37 81       	ldd	r19, Z+7	; 0x07
    2014:	40 85       	ldd	r20, Z+8	; 0x08
    2016:	51 85       	ldd	r21, Z+9	; 0x09
    2018:	60 81       	ld	r22, Z
    201a:	71 81       	ldd	r23, Z+1	; 0x01
    201c:	82 81       	ldd	r24, Z+2	; 0x02
    201e:	93 81       	ldd	r25, Z+3	; 0x03
    2020:	65 df       	rcall	.-310    	; 0x1eec <FlashDataRead>
	return rRetVal;
    2022:	01 c0       	rjmp	.+2      	; 0x2026 <DataRead+0x6a>
	case ReadFlashDiscovery:
		insCode = SPI_FLASH_INS_DISCOVER_PARAMETER;
		break;

	default:
		return Flash_FunctionNotSupported;
    2024:	87 e0       	ldi	r24, 0x07	; 7
		break;

	} /* EndSwitch */
	rRetVal = FlashDataRead(fp->Read.udAddr, fp->Read.pArray, fp->Read.udNrOfElementsToRead, insCode);
	return rRetVal;
}
    2026:	1f 91       	pop	r17
    2028:	0f 91       	pop	r16
    202a:	ef 90       	pop	r14
    202c:	08 95       	ret

0000202e <FlashOTPRead>:

Pseudo Code:

*******************************************************************************/
ReturnType FlashOTPRead(NMX_uint8 *ucpElements, NMX_uint32 udNrOfElementsToRead)
{
    202e:	8f 92       	push	r8
    2030:	9f 92       	push	r9
    2032:	af 92       	push	r10
    2034:	bf 92       	push	r11
    2036:	ef 92       	push	r14
    2038:	ff 92       	push	r15
    203a:	0f 93       	push	r16
    203c:	1f 93       	push	r17
    203e:	cf 93       	push	r28
    2040:	df 93       	push	r29
    2042:	cd b7       	in	r28, 0x3d	; 61
    2044:	de b7       	in	r29, 0x3e	; 62
    2046:	61 97       	sbiw	r28, 0x11	; 17
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	f8 94       	cli
    204c:	de bf       	out	0x3e, r29	; 62
    204e:	0f be       	out	0x3f, r0	; 63
    2050:	cd bf       	out	0x3d, r28	; 61
    2052:	7c 01       	movw	r14, r24
    2054:	4a 01       	movw	r8, r20
    2056:	5b 01       	movw	r10, r22

	/* Address is always 0x000000 */
	udAddr = 0x000000;

	// Step 2: Initialize the data (i.e. Instruction) packet to be sent serially
	char_stream_send.length   = fdo->Desc.NumAddrByte + 1;
    2058:	e0 91 d2 0d 	lds	r30, 0x0DD2
    205c:	f0 91 d3 0d 	lds	r31, 0x0DD3
    2060:	e9 5b       	subi	r30, 0xB9	; 185
    2062:	ff 4f       	sbci	r31, 0xFF	; 255
    2064:	00 81       	ld	r16, Z
    2066:	10 e0       	ldi	r17, 0x00	; 0
    2068:	0f 5f       	subi	r16, 0xFF	; 255
    206a:	1f 4f       	sbci	r17, 0xFF	; 255
    206c:	01 2e       	mov	r0, r17
    206e:	00 0c       	add	r0, r0
    2070:	22 0b       	sbc	r18, r18
    2072:	33 0b       	sbc	r19, r19
    2074:	0b 83       	std	Y+3, r16	; 0x03
    2076:	1c 83       	std	Y+4, r17	; 0x04
    2078:	2d 83       	std	Y+5, r18	; 0x05
    207a:	3e 83       	std	Y+6, r19	; 0x06
	char_stream_send.pChar    = pIns_Addr;
    207c:	ae 01       	movw	r20, r28
    207e:	43 5f       	subi	r20, 0xF3	; 243
    2080:	5f 4f       	sbci	r21, 0xFF	; 255
    2082:	5a 83       	std	Y+2, r21	; 0x02
    2084:	49 83       	std	Y+1, r20	; 0x01
	pIns_Addr[0]              = SPI_FLASH_INS_RDOTP;
    2086:	8b e4       	ldi	r24, 0x4B	; 75
    2088:	8d 87       	std	Y+13, r24	; 0x0d

	fill_addr_vect(udAddr, pIns_Addr, 3);
    208a:	23 e0       	ldi	r18, 0x03	; 3
    208c:	60 e0       	ldi	r22, 0x00	; 0
    208e:	70 e0       	ldi	r23, 0x00	; 0
    2090:	cb 01       	movw	r24, r22
    2092:	1e df       	rcall	.-452    	; 0x1ed0 <fill_addr_vect>

	char_stream_recv.length   = udNrOfElementsToRead;
    2094:	89 86       	std	Y+9, r8	; 0x09
    2096:	9a 86       	std	Y+10, r9	; 0x0a
    2098:	ab 86       	std	Y+11, r10	; 0x0b
    209a:	bc 86       	std	Y+12, r11	; 0x0c
	char_stream_recv.pChar    = ucpElements;
    209c:	f8 86       	std	Y+8, r15	; 0x08
    209e:	ef 82       	std	Y+7, r14	; 0x07

	// Step 3: Send the packet serially, and fill the buffer with the data being returned
	Serialize_SPI(&char_stream_send,
    20a0:	23 e0       	ldi	r18, 0x03	; 3
    20a2:	41 e0       	ldi	r20, 0x01	; 1
    20a4:	be 01       	movw	r22, r28
    20a6:	69 5f       	subi	r22, 0xF9	; 249
    20a8:	7f 4f       	sbci	r23, 0xFF	; 255
    20aa:	ce 01       	movw	r24, r28
    20ac:	01 96       	adiw	r24, 0x01	; 1
    20ae:	cd d7       	rcall	.+3994   	; 0x304a <Serialize_SPI>
	              &char_stream_recv,
	              OpsWakeUp,
	              OpsEndTransfer);

	return Flash_Success;
}
    20b0:	80 e0       	ldi	r24, 0x00	; 0
    20b2:	61 96       	adiw	r28, 0x11	; 17
    20b4:	0f b6       	in	r0, 0x3f	; 63
    20b6:	f8 94       	cli
    20b8:	de bf       	out	0x3e, r29	; 62
    20ba:	0f be       	out	0x3f, r0	; 63
    20bc:	cd bf       	out	0x3d, r28	; 61
    20be:	df 91       	pop	r29
    20c0:	cf 91       	pop	r28
    20c2:	1f 91       	pop	r17
    20c4:	0f 91       	pop	r16
    20c6:	ff 90       	pop	r15
    20c8:	ef 90       	pop	r14
    20ca:	bf 90       	pop	r11
    20cc:	af 90       	pop	r10
    20ce:	9f 90       	pop	r9
    20d0:	8f 90       	pop	r8
    20d2:	08 95       	ret

000020d4 <WAIT_TILL_Instruction_EXECUTION_COMPLETE>:

/*-----------------------------------------------------------------------------
Description:   This function wait till instruction execution is complete
-----------------------------------------------------------------------------*/
ReturnType WAIT_TILL_Instruction_EXECUTION_COMPLETE(NMX_sint16 second)
{
    20d4:	cf 92       	push	r12
    20d6:	df 92       	push	r13
    20d8:	ef 92       	push	r14
    20da:	ff 92       	push	r15
    20dc:	6c 01       	movw	r12, r24
	FlashTimeOut(0);
    20de:	60 e0       	ldi	r22, 0x00	; 0
    20e0:	70 e0       	ldi	r23, 0x00	; 0
    20e2:	cb 01       	movw	r24, r22
    20e4:	ba de       	rcall	.-652    	; 0x1e5a <FlashTimeOut>
	while(IsFlashBusy())
	{
		if(Flash_OperationTimeOut == FlashTimeOut(second))
    20e6:	0d 2c       	mov	r0, r13
    20e8:	00 0c       	add	r0, r0
    20ea:	ee 08       	sbc	r14, r14
    20ec:	ff 08       	sbc	r15, r15
Description:   This function wait till instruction execution is complete
-----------------------------------------------------------------------------*/
ReturnType WAIT_TILL_Instruction_EXECUTION_COMPLETE(NMX_sint16 second)
{
	FlashTimeOut(0);
	while(IsFlashBusy())
    20ee:	05 c0       	rjmp	.+10     	; 0x20fa <WAIT_TILL_Instruction_EXECUTION_COMPLETE+0x26>
	{
		if(Flash_OperationTimeOut == FlashTimeOut(second))
    20f0:	c7 01       	movw	r24, r14
    20f2:	b6 01       	movw	r22, r12
    20f4:	b2 de       	rcall	.-668    	; 0x1e5a <FlashTimeOut>
    20f6:	8a 30       	cpi	r24, 0x0A	; 10
    20f8:	19 f0       	breq	.+6      	; 0x2100 <WAIT_TILL_Instruction_EXECUTION_COMPLETE+0x2c>
Description:   This function wait till instruction execution is complete
-----------------------------------------------------------------------------*/
ReturnType WAIT_TILL_Instruction_EXECUTION_COMPLETE(NMX_sint16 second)
{
	FlashTimeOut(0);
	while(IsFlashBusy())
    20fa:	7e de       	rcall	.-772    	; 0x1df8 <IsFlashBusy>
    20fc:	81 11       	cpse	r24, r1
    20fe:	f8 cf       	rjmp	.-16     	; 0x20f0 <WAIT_TILL_Instruction_EXECUTION_COMPLETE+0x1c>
	{
		if(Flash_OperationTimeOut == FlashTimeOut(second))
			return  Flash_OperationTimeOut;
	}
	return Flash_Success;
}
    2100:	ff 90       	pop	r15
    2102:	ef 90       	pop	r14
    2104:	df 90       	pop	r13
    2106:	cf 90       	pop	r12
    2108:	08 95       	ret

0000210a <FlashWriteStatusRegister>:
   Step 2: Initialize the data (i.e. Instruction & value) packet to be sent serially
   Step 3: Send the packet serially
   Step 4: Wait until the operation completes or a timeout occurs.
*******************************************************************************/
ReturnType  FlashWriteStatusRegister(NMX_uint8 ucStatusRegister)
{
    210a:	1f 93       	push	r17
    210c:	cf 93       	push	r28
    210e:	df 93       	push	r29
    2110:	cd b7       	in	r28, 0x3d	; 61
    2112:	de b7       	in	r29, 0x3e	; 62
    2114:	28 97       	sbiw	r28, 0x08	; 8
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	de bf       	out	0x3e, r29	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	cd bf       	out	0x3d, r28	; 61
    2120:	18 2f       	mov	r17, r24
	CharStream char_stream_send;
	NMX_uint8  pIns_Val[2];

	// Step 1: Disable Write protection
	fdo->GenOp.WriteEnable();
    2122:	e0 91 d2 0d 	lds	r30, 0x0DD2
    2126:	f0 91 d3 0d 	lds	r31, 0x0DD3
    212a:	e6 5a       	subi	r30, 0xA6	; 166
    212c:	ff 4f       	sbci	r31, 0xFF	; 255
    212e:	01 90       	ld	r0, Z+
    2130:	f0 81       	ld	r31, Z
    2132:	e0 2d       	mov	r30, r0
    2134:	19 95       	eicall

	// Step 2: Initialize the data (i.e. Instruction & value) packet to be sent serially
	char_stream_send.length = 2;
    2136:	82 e0       	ldi	r24, 0x02	; 2
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	a0 e0       	ldi	r26, 0x00	; 0
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	8b 83       	std	Y+3, r24	; 0x03
    2140:	9c 83       	std	Y+4, r25	; 0x04
    2142:	ad 83       	std	Y+5, r26	; 0x05
    2144:	be 83       	std	Y+6, r27	; 0x06
	char_stream_send.pChar  = pIns_Val;
    2146:	ce 01       	movw	r24, r28
    2148:	07 96       	adiw	r24, 0x07	; 7
    214a:	9a 83       	std	Y+2, r25	; 0x02
    214c:	89 83       	std	Y+1, r24	; 0x01
	pIns_Val[0] = SPI_FLASH_INS_WRSR;
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	8f 83       	std	Y+7, r24	; 0x07
	pIns_Val[1] = ucStatusRegister;
    2152:	18 87       	std	Y+8, r17	; 0x08

	// Step 3: Send the packet serially
	Serialize_SPI(&char_stream_send,
    2154:	23 e0       	ldi	r18, 0x03	; 3
    2156:	41 e0       	ldi	r20, 0x01	; 1
    2158:	60 e0       	ldi	r22, 0x00	; 0
    215a:	70 e0       	ldi	r23, 0x00	; 0
    215c:	ce 01       	movw	r24, r28
    215e:	01 96       	adiw	r24, 0x01	; 1
    2160:	74 d7       	rcall	.+3816   	; 0x304a <Serialize_SPI>
	              NULL_PTR,
	              OpsWakeUp,
	              OpsEndTransfer);

	// Step 4: Wait until the operation completes or a timeout occurs.
	return WAIT_TILL_Instruction_EXECUTION_COMPLETE(1);
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	b6 df       	rcall	.-148    	; 0x20d4 <WAIT_TILL_Instruction_EXECUTION_COMPLETE>
}
    2168:	28 96       	adiw	r28, 0x08	; 8
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	cd bf       	out	0x3d, r28	; 61
    2174:	df 91       	pop	r29
    2176:	cf 91       	pop	r28
    2178:	1f 91       	pop	r17
    217a:	08 95       	ret

0000217c <FlashLockSector>:

Pseudo Code:

*******************************************************************************/
ReturnType FlashLockSector(uAddrType address,  NMX_uint32 len)
{
    217c:	2f 92       	push	r2
    217e:	3f 92       	push	r3
    2180:	4f 92       	push	r4
    2182:	5f 92       	push	r5
    2184:	6f 92       	push	r6
    2186:	7f 92       	push	r7
    2188:	8f 92       	push	r8
    218a:	9f 92       	push	r9
    218c:	af 92       	push	r10
    218e:	bf 92       	push	r11
    2190:	cf 92       	push	r12
    2192:	df 92       	push	r13
    2194:	ef 92       	push	r14
    2196:	ff 92       	push	r15
    2198:	0f 93       	push	r16
    219a:	1f 93       	push	r17
    219c:	cf 93       	push	r28
    219e:	df 93       	push	r29
    21a0:	00 d0       	rcall	.+0      	; 0x21a2 <FlashLockSector+0x26>
    21a2:	00 d0       	rcall	.+0      	; 0x21a4 <FlashLockSector+0x28>
    21a4:	cd b7       	in	r28, 0x3d	; 61
    21a6:	de b7       	in	r29, 0x3e	; 62
    21a8:	69 83       	std	Y+1, r22	; 0x01
    21aa:	7a 83       	std	Y+2, r23	; 0x02
    21ac:	8b 83       	std	Y+3, r24	; 0x03
    21ae:	9c 83       	std	Y+4, r25	; 0x04
    21b0:	29 01       	movw	r4, r18
    21b2:	3a 01       	movw	r6, r20
	NMX_uint8 TB, BP, SR;
	int i, protected_area, start_sector;
	int sector_size, num_of_sectors;

	sector_size = fdo->Desc.FlashSectorSize;
    21b4:	e0 91 d2 0d 	lds	r30, 0x0DD2
    21b8:	f0 91 d3 0d 	lds	r31, 0x0DD3
    21bc:	c1 a0       	ldd	r12, Z+33	; 0x21
    21be:	d2 a0       	ldd	r13, Z+34	; 0x22
	num_of_sectors = fdo->Desc.FlashSectorCount;
    21c0:	85 84       	ldd	r8, Z+13	; 0x0d
    21c2:	96 84       	ldd	r9, Z+14	; 0x0e
    21c4:	a7 84       	ldd	r10, Z+15	; 0x0f
    21c6:	b0 88       	ldd	r11, Z+16	; 0x10

	FlashWriteEnable();
    21c8:	0e 94 8f 04 	call	0x91e	; 0x91e <FlashWriteEnable>

	start_sector = address / sector_size;
    21cc:	0d 2c       	mov	r0, r13
    21ce:	00 0c       	add	r0, r0
    21d0:	ee 08       	sbc	r14, r14
    21d2:	ff 08       	sbc	r15, r15
	protected_area = len / sector_size;
    21d4:	c3 01       	movw	r24, r6
    21d6:	b2 01       	movw	r22, r4
    21d8:	a7 01       	movw	r20, r14
    21da:	96 01       	movw	r18, r12
    21dc:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__udivmodsi4>
    21e0:	29 01       	movw	r4, r18
    21e2:	3a 01       	movw	r6, r20
    21e4:	3e 83       	std	Y+6, r19	; 0x06
    21e6:	2d 83       	std	Y+5, r18	; 0x05

	if (protected_area == 0 || protected_area > num_of_sectors)
    21e8:	21 15       	cp	r18, r1
    21ea:	31 05       	cpc	r19, r1
    21ec:	09 f4       	brne	.+2      	; 0x21f0 <FlashLockSector+0x74>
    21ee:	6e c0       	rjmp	.+220    	; 0x22cc <FlashLockSector+0x150>
	NMX_uint8 TB, BP, SR;
	int i, protected_area, start_sector;
	int sector_size, num_of_sectors;

	sector_size = fdo->Desc.FlashSectorSize;
	num_of_sectors = fdo->Desc.FlashSectorCount;
    21f0:	84 01       	movw	r16, r8
	FlashWriteEnable();

	start_sector = address / sector_size;
	protected_area = len / sector_size;

	if (protected_area == 0 || protected_area > num_of_sectors)
    21f2:	82 16       	cp	r8, r18
    21f4:	93 06       	cpc	r9, r19
    21f6:	0c f4       	brge	.+2      	; 0x21fa <FlashLockSector+0x7e>
    21f8:	6b c0       	rjmp	.+214    	; 0x22d0 <FlashLockSector+0x154>
	sector_size = fdo->Desc.FlashSectorSize;
	num_of_sectors = fdo->Desc.FlashSectorCount;

	FlashWriteEnable();

	start_sector = address / sector_size;
    21fa:	69 81       	ldd	r22, Y+1	; 0x01
    21fc:	7a 81       	ldd	r23, Y+2	; 0x02
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	9c 81       	ldd	r25, Y+4	; 0x04
    2202:	a7 01       	movw	r20, r14
    2204:	96 01       	movw	r18, r12
    2206:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__udivmodsi4>
    220a:	29 83       	std	Y+1, r18	; 0x01
    220c:	3a 83       	std	Y+2, r19	; 0x02
    220e:	4b 83       	std	Y+3, r20	; 0x03
    2210:	5c 83       	std	Y+4, r21	; 0x04

	if (protected_area == 0 || protected_area > num_of_sectors)
		return Flash_AddressInvalid;

	//(pa & (pa - 1) == 0) verifica che pa sia una potenza di 2
	if ((start_sector != 0 && (start_sector + protected_area) != num_of_sectors) || (protected_area & (protected_area - 1)) != 0)
    2212:	21 15       	cp	r18, r1
    2214:	31 05       	cpc	r19, r1
    2216:	31 f0       	breq	.+12     	; 0x2224 <FlashLockSector+0xa8>
    2218:	24 0d       	add	r18, r4
    221a:	35 1d       	adc	r19, r5
    221c:	28 15       	cp	r18, r8
    221e:	39 05       	cpc	r19, r9
    2220:	09 f0       	breq	.+2      	; 0x2224 <FlashLockSector+0xa8>
    2222:	58 c0       	rjmp	.+176    	; 0x22d4 <FlashLockSector+0x158>
    2224:	c2 01       	movw	r24, r4
    2226:	01 97       	sbiw	r24, 0x01	; 1
    2228:	48 22       	and	r4, r24
    222a:	59 22       	and	r5, r25
    222c:	45 28       	or	r4, r5
    222e:	09 f0       	breq	.+2      	; 0x2232 <FlashLockSector+0xb6>
    2230:	53 c0       	rjmp	.+166    	; 0x22d8 <FlashLockSector+0x15c>
		return Flash_AddressInvalid;


	if (address/sector_size < num_of_sectors/2)
    2232:	64 01       	movw	r12, r8
    2234:	11 23       	and	r17, r17
    2236:	1c f4       	brge	.+6      	; 0x223e <FlashLockSector+0xc2>
    2238:	3f ef       	ldi	r19, 0xFF	; 255
    223a:	c3 1a       	sub	r12, r19
    223c:	d3 0a       	sbc	r13, r19
    223e:	d5 94       	asr	r13
    2240:	c7 94       	ror	r12
    2242:	0d 2c       	mov	r0, r13
    2244:	00 0c       	add	r0, r0
    2246:	ee 08       	sbc	r14, r14
    2248:	ff 08       	sbc	r15, r15
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	29 81       	ldd	r18, Y+1	; 0x01
    224e:	3a 81       	ldd	r19, Y+2	; 0x02
    2250:	4b 81       	ldd	r20, Y+3	; 0x03
    2252:	5c 81       	ldd	r21, Y+4	; 0x04
    2254:	2c 15       	cp	r18, r12
    2256:	3d 05       	cpc	r19, r13
    2258:	4e 05       	cpc	r20, r14
    225a:	5f 05       	cpc	r21, r15
    225c:	08 f0       	brcs	.+2      	; 0x2260 <FlashLockSector+0xe4>
    225e:	80 e0       	ldi	r24, 0x00	; 0
	{
		TB = 0;
	}

	BP = 1;
	for (i = 1; i <= num_of_sectors; i = i*2)
    2260:	10 16       	cp	r1, r16
    2262:	11 06       	cpc	r1, r17
    2264:	ac f4       	brge	.+42     	; 0x2290 <FlashLockSector+0x114>
	{
		if (protected_area == i)
    2266:	4d 81       	ldd	r20, Y+5	; 0x05
    2268:	5e 81       	ldd	r21, Y+6	; 0x06
    226a:	41 30       	cpi	r20, 0x01	; 1
    226c:	51 05       	cpc	r21, r1
    226e:	91 f0       	breq	.+36     	; 0x2294 <FlashLockSector+0x118>
    2270:	21 e0       	ldi	r18, 0x01	; 1
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	91 e0       	ldi	r25, 0x01	; 1
    2276:	05 c0       	rjmp	.+10     	; 0x2282 <FlashLockSector+0x106>
    2278:	ed 81       	ldd	r30, Y+5	; 0x05
    227a:	fe 81       	ldd	r31, Y+6	; 0x06
    227c:	e2 17       	cp	r30, r18
    227e:	f3 07       	cpc	r31, r19
    2280:	51 f0       	breq	.+20     	; 0x2296 <FlashLockSector+0x11a>
		{
			break;
		}
		BP++;
    2282:	9f 5f       	subi	r25, 0xFF	; 255
	{
		TB = 0;
	}

	BP = 1;
	for (i = 1; i <= num_of_sectors; i = i*2)
    2284:	22 0f       	add	r18, r18
    2286:	33 1f       	adc	r19, r19
    2288:	02 17       	cp	r16, r18
    228a:	13 07       	cpc	r17, r19
    228c:	ac f7       	brge	.-22     	; 0x2278 <FlashLockSector+0xfc>
    228e:	03 c0       	rjmp	.+6      	; 0x2296 <FlashLockSector+0x11a>
	else
	{
		TB = 0;
	}

	BP = 1;
    2290:	91 e0       	ldi	r25, 0x01	; 1
    2292:	01 c0       	rjmp	.+2      	; 0x2296 <FlashLockSector+0x11a>
    2294:	91 e0       	ldi	r25, 0x01	; 1
			break;
		}
		BP++;
	}

	SR = (((BP & 8) >> 3) << 6) | (TB << 5) | ((BP & 7) << 2);
    2296:	39 2f       	mov	r19, r25
    2298:	37 70       	andi	r19, 0x07	; 7
    229a:	33 0f       	add	r19, r19
    229c:	33 0f       	add	r19, r19
    229e:	82 95       	swap	r24
    22a0:	88 0f       	add	r24, r24
    22a2:	80 7e       	andi	r24, 0xE0	; 224
    22a4:	28 2f       	mov	r18, r24
    22a6:	23 2b       	or	r18, r19
    22a8:	93 fb       	bst	r25, 3
    22aa:	22 24       	eor	r2, r2
    22ac:	20 f8       	bld	r2, 0
    22ae:	31 2c       	mov	r3, r1
    22b0:	c1 01       	movw	r24, r2
    22b2:	00 24       	eor	r0, r0
    22b4:	96 95       	lsr	r25
    22b6:	87 95       	ror	r24
    22b8:	07 94       	ror	r0
    22ba:	96 95       	lsr	r25
    22bc:	87 95       	ror	r24
    22be:	07 94       	ror	r0
    22c0:	98 2f       	mov	r25, r24
    22c2:	80 2d       	mov	r24, r0

	FlashWriteStatusRegister(SR);
    22c4:	82 2b       	or	r24, r18
    22c6:	21 df       	rcall	.-446    	; 0x210a <FlashWriteStatusRegister>
	return Flash_Success;
    22c8:	80 e0       	ldi	r24, 0x00	; 0
    22ca:	07 c0       	rjmp	.+14     	; 0x22da <FlashLockSector+0x15e>

	start_sector = address / sector_size;
	protected_area = len / sector_size;

	if (protected_area == 0 || protected_area > num_of_sectors)
		return Flash_AddressInvalid;
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	05 c0       	rjmp	.+10     	; 0x22da <FlashLockSector+0x15e>
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	03 c0       	rjmp	.+6      	; 0x22da <FlashLockSector+0x15e>

	//(pa & (pa - 1) == 0) verifica che pa sia una potenza di 2
	if ((start_sector != 0 && (start_sector + protected_area) != num_of_sectors) || (protected_area & (protected_area - 1)) != 0)
		return Flash_AddressInvalid;
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	01 c0       	rjmp	.+2      	; 0x22da <FlashLockSector+0x15e>
    22d8:	81 e0       	ldi	r24, 0x01	; 1
	SR = (((BP & 8) >> 3) << 6) | (TB << 5) | ((BP & 7) << 2);

	FlashWriteStatusRegister(SR);
	return Flash_Success;

}
    22da:	26 96       	adiw	r28, 0x06	; 6
    22dc:	0f b6       	in	r0, 0x3f	; 63
    22de:	f8 94       	cli
    22e0:	de bf       	out	0x3e, r29	; 62
    22e2:	0f be       	out	0x3f, r0	; 63
    22e4:	cd bf       	out	0x3d, r28	; 61
    22e6:	df 91       	pop	r29
    22e8:	cf 91       	pop	r28
    22ea:	1f 91       	pop	r17
    22ec:	0f 91       	pop	r16
    22ee:	ff 90       	pop	r15
    22f0:	ef 90       	pop	r14
    22f2:	df 90       	pop	r13
    22f4:	cf 90       	pop	r12
    22f6:	bf 90       	pop	r11
    22f8:	af 90       	pop	r10
    22fa:	9f 90       	pop	r9
    22fc:	8f 90       	pop	r8
    22fe:	7f 90       	pop	r7
    2300:	6f 90       	pop	r6
    2302:	5f 90       	pop	r5
    2304:	4f 90       	pop	r4
    2306:	3f 90       	pop	r3
    2308:	2f 90       	pop	r2
    230a:	08 95       	ret

0000230c <FlashUnlockAllSector>:
ReturnType FlashUnlockAllSector(void)
{
	NMX_uint8 SR = 0;

	/* Set BP2, BP1, BP0 to 0 (all flash sectors unlocked) */
	FlashWriteStatusRegister(SR);
    230c:	80 e0       	ldi	r24, 0x00	; 0
    230e:	fd de       	rcall	.-518    	; 0x210a <FlashWriteStatusRegister>

	return Flash_Success;
}
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	08 95       	ret

00002314 <FlashGenProgram>:
   Step 6: Initialize the data (data to be programmed) packet to be sent serially
   Step 7: Send the packet (data to be programmed) serially
   Step 8: Wait until the operation completes or a timeout occurs.
*******************************************************************************/
ReturnType FlashGenProgram(uAddrType udAddr, NMX_uint8 *pArray , NMX_uint32 udNrOfElementsInArray, NMX_uint8 ubSpiInstruction)
{
    2314:	4f 92       	push	r4
    2316:	5f 92       	push	r5
    2318:	6f 92       	push	r6
    231a:	7f 92       	push	r7
    231c:	8f 92       	push	r8
    231e:	9f 92       	push	r9
    2320:	af 92       	push	r10
    2322:	bf 92       	push	r11
    2324:	cf 92       	push	r12
    2326:	df 92       	push	r13
    2328:	ef 92       	push	r14
    232a:	ff 92       	push	r15
    232c:	0f 93       	push	r16
    232e:	1f 93       	push	r17
    2330:	cf 93       	push	r28
    2332:	df 93       	push	r29
    2334:	cd b7       	in	r28, 0x3d	; 61
    2336:	de b7       	in	r29, 0x3e	; 62
    2338:	2c 97       	sbiw	r28, 0x0c	; 12
    233a:	0f b6       	in	r0, 0x3f	; 63
    233c:	f8 94       	cli
    233e:	de bf       	out	0x3e, r29	; 62
    2340:	0f be       	out	0x3f, r0	; 63
    2342:	cd bf       	out	0x3d, r28	; 61
    2344:	ae 2d       	mov	r26, r14
	NMX_uint8 pIns_Addr[5];
	NMX_uint8 fsr_value;
	ReturnType ret;

	// Step 1: Validate address input
	if(!(udAddr < fdo->Desc.FlashSize))
    2346:	e0 91 d2 0d 	lds	r30, 0x0DD2
    234a:	f0 91 d3 0d 	lds	r31, 0x0DD3
    234e:	c5 a4       	ldd	r12, Z+45	; 0x2d
    2350:	d6 a4       	ldd	r13, Z+46	; 0x2e
    2352:	e7 a4       	ldd	r14, Z+47	; 0x2f
    2354:	f0 a8       	ldd	r15, Z+48	; 0x30
    2356:	6c 15       	cp	r22, r12
    2358:	7d 05       	cpc	r23, r13
    235a:	8e 05       	cpc	r24, r14
    235c:	9f 05       	cpc	r25, r15
    235e:	08 f0       	brcs	.+2      	; 0x2362 <FlashGenProgram+0x4e>
    2360:	52 c0       	rjmp	.+164    	; 0x2406 <FlashGenProgram+0xf2>
    2362:	ea 2e       	mov	r14, r26
    2364:	48 01       	movw	r8, r16
    2366:	59 01       	movw	r10, r18
    2368:	6a 01       	movw	r12, r20
    236a:	2b 01       	movw	r4, r22
    236c:	3c 01       	movw	r6, r24
		return Flash_AddressInvalid;

	// Step 2: Check whether any previous Write, Program or Erase cycle is on-going
	if(IsFlashBusy()) return Flash_OperationOngoing;
    236e:	44 dd       	rcall	.-1400   	; 0x1df8 <IsFlashBusy>
    2370:	81 11       	cpse	r24, r1
    2372:	4b c0       	rjmp	.+150    	; 0x240a <FlashGenProgram+0xf6>

	// Step 3: Disable Write protection
	fdo->GenOp.WriteEnable();
    2374:	e0 91 d2 0d 	lds	r30, 0x0DD2
    2378:	f0 91 d3 0d 	lds	r31, 0x0DD3
    237c:	e6 5a       	subi	r30, 0xA6	; 166
    237e:	ff 4f       	sbci	r31, 0xFF	; 255
    2380:	01 90       	ld	r0, Z+
    2382:	f0 81       	ld	r31, Z
    2384:	e0 2d       	mov	r30, r0
    2386:	19 95       	eicall

	// Step 4: Initialize the data (Instruction & address only) packet to be sent serially
	char_stream_send.length   = fdo->Desc.NumAddrByte + 1;
    2388:	e0 91 d2 0d 	lds	r30, 0x0DD2
    238c:	f0 91 d3 0d 	lds	r31, 0x0DD3
    2390:	e9 5b       	subi	r30, 0xB9	; 185
    2392:	ff 4f       	sbci	r31, 0xFF	; 255
    2394:	20 81       	ld	r18, Z
    2396:	82 2f       	mov	r24, r18
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	01 96       	adiw	r24, 0x01	; 1
    239c:	09 2e       	mov	r0, r25
    239e:	00 0c       	add	r0, r0
    23a0:	aa 0b       	sbc	r26, r26
    23a2:	bb 0b       	sbc	r27, r27
    23a4:	8b 83       	std	Y+3, r24	; 0x03
    23a6:	9c 83       	std	Y+4, r25	; 0x04
    23a8:	ad 83       	std	Y+5, r26	; 0x05
    23aa:	be 83       	std	Y+6, r27	; 0x06
	char_stream_send.pChar    = pIns_Addr;
    23ac:	ae 01       	movw	r20, r28
    23ae:	49 5f       	subi	r20, 0xF9	; 249
    23b0:	5f 4f       	sbci	r21, 0xFF	; 255
    23b2:	5a 83       	std	Y+2, r21	; 0x02
    23b4:	49 83       	std	Y+1, r20	; 0x01

	pIns_Addr[0]              = ubSpiInstruction;
    23b6:	ef 82       	std	Y+7, r14	; 0x07

	fill_addr_vect(udAddr, pIns_Addr, fdo->Desc.NumAddrByte);
    23b8:	c3 01       	movw	r24, r6
    23ba:	b2 01       	movw	r22, r4
    23bc:	89 dd       	rcall	.-1262   	; 0x1ed0 <fill_addr_vect>

	// Step 5: Send the packet (Instruction & address only) serially
	Serialize_SPI(&char_stream_send,
    23be:	22 e0       	ldi	r18, 0x02	; 2
    23c0:	41 e0       	ldi	r20, 0x01	; 1
    23c2:	60 e0       	ldi	r22, 0x00	; 0
    23c4:	70 e0       	ldi	r23, 0x00	; 0
    23c6:	ce 01       	movw	r24, r28
    23c8:	01 96       	adiw	r24, 0x01	; 1
    23ca:	3f d6       	rcall	.+3198   	; 0x304a <Serialize_SPI>
	              NULL_PTR,
	              OpsWakeUp,
	              OpsInitTransfer);

	// Step 6: Initialize the data (data to be programmed) packet to be sent serially
	char_stream_send.length   = udNrOfElementsInArray;
    23cc:	8b 82       	std	Y+3, r8	; 0x03
    23ce:	9c 82       	std	Y+4, r9	; 0x04
    23d0:	ad 82       	std	Y+5, r10	; 0x05
    23d2:	be 82       	std	Y+6, r11	; 0x06
	char_stream_send.pChar    = pArray;
    23d4:	da 82       	std	Y+2, r13	; 0x02
    23d6:	c9 82       	std	Y+1, r12	; 0x01

	// Step 7: Send the packet (data to be programmed) serially
	Serialize_SPI(&char_stream_send,
    23d8:	23 e0       	ldi	r18, 0x03	; 3
    23da:	41 e0       	ldi	r20, 0x01	; 1
    23dc:	60 e0       	ldi	r22, 0x00	; 0
    23de:	70 e0       	ldi	r23, 0x00	; 0
    23e0:	ce 01       	movw	r24, r28
    23e2:	01 96       	adiw	r24, 0x01	; 1
    23e4:	32 d6       	rcall	.+3172   	; 0x304a <Serialize_SPI>
	              NULL_PTR,
	              OpsWakeUp,
	              OpsEndTransfer);

	// Step 8: Wait until the operation completes or a timeout occurs.
	ret = WAIT_TILL_Instruction_EXECUTION_COMPLETE(1);
    23e6:	81 e0       	ldi	r24, 0x01	; 1
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	74 de       	rcall	.-792    	; 0x20d4 <WAIT_TILL_Instruction_EXECUTION_COMPLETE>
    23ec:	18 2f       	mov	r17, r24


	FlashReadFlagStatusRegister(&fsr_value);
    23ee:	ce 01       	movw	r24, r28
    23f0:	0c 96       	adiw	r24, 0x0c	; 12
    23f2:	0e 94 ae 05 	call	0xb5c	; 0xb5c <FlashReadFlagStatusRegister>
	FlashClearFlagStatusRegister();
    23f6:	0e 94 ed 04 	call	0x9da	; 0x9da <FlashClearFlagStatusRegister>
    23fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    23fc:	82 71       	andi	r24, 0x12	; 18

	if((fsr_value & SPI_FSR_PROT) && (fsr_value & SPI_FSR_PROGRAM))
    23fe:	82 31       	cpi	r24, 0x12	; 18
    2400:	31 f0       	breq	.+12     	; 0x240e <FlashGenProgram+0xfa>
		return Flash_SectorProtected;

	return ret;
    2402:	81 2f       	mov	r24, r17
    2404:	05 c0       	rjmp	.+10     	; 0x2410 <FlashGenProgram+0xfc>
	NMX_uint8 fsr_value;
	ReturnType ret;

	// Step 1: Validate address input
	if(!(udAddr < fdo->Desc.FlashSize))
		return Flash_AddressInvalid;
    2406:	81 e0       	ldi	r24, 0x01	; 1
    2408:	03 c0       	rjmp	.+6      	; 0x2410 <FlashGenProgram+0xfc>

	// Step 2: Check whether any previous Write, Program or Erase cycle is on-going
	if(IsFlashBusy()) return Flash_OperationOngoing;
    240a:	89 e0       	ldi	r24, 0x09	; 9
    240c:	01 c0       	rjmp	.+2      	; 0x2410 <FlashGenProgram+0xfc>

	FlashReadFlagStatusRegister(&fsr_value);
	FlashClearFlagStatusRegister();

	if((fsr_value & SPI_FSR_PROT) && (fsr_value & SPI_FSR_PROGRAM))
		return Flash_SectorProtected;
    240e:	8c e0       	ldi	r24, 0x0C	; 12

	return ret;

}
    2410:	2c 96       	adiw	r28, 0x0c	; 12
    2412:	0f b6       	in	r0, 0x3f	; 63
    2414:	f8 94       	cli
    2416:	de bf       	out	0x3e, r29	; 62
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	cd bf       	out	0x3d, r28	; 61
    241c:	df 91       	pop	r29
    241e:	cf 91       	pop	r28
    2420:	1f 91       	pop	r17
    2422:	0f 91       	pop	r16
    2424:	ff 90       	pop	r15
    2426:	ef 90       	pop	r14
    2428:	df 90       	pop	r13
    242a:	cf 90       	pop	r12
    242c:	bf 90       	pop	r11
    242e:	af 90       	pop	r10
    2430:	9f 90       	pop	r9
    2432:	8f 90       	pop	r8
    2434:	7f 90       	pop	r7
    2436:	6f 90       	pop	r6
    2438:	5f 90       	pop	r5
    243a:	4f 90       	pop	r4
    243c:	08 95       	ret

0000243e <FlashDataProgram>:

/*******************************************************************************
Function:     	FlashDataProgram( )
*******************************************************************************/
ReturnType FlashDataProgram(uAddrType udAddr, NMX_uint8 *pArray , NMX_uint16 udNrOfElementsInArray, NMX_uint8 ubSpiInstruction)
{
    243e:	2f 92       	push	r2
    2440:	3f 92       	push	r3
    2442:	4f 92       	push	r4
    2444:	5f 92       	push	r5
    2446:	6f 92       	push	r6
    2448:	7f 92       	push	r7
    244a:	8f 92       	push	r8
    244c:	9f 92       	push	r9
    244e:	af 92       	push	r10
    2450:	bf 92       	push	r11
    2452:	cf 92       	push	r12
    2454:	df 92       	push	r13
    2456:	ef 92       	push	r14
    2458:	ff 92       	push	r15
    245a:	0f 93       	push	r16
    245c:	1f 93       	push	r17
    245e:	cf 93       	push	r28
    2460:	df 93       	push	r29
    2462:	4b 01       	movw	r8, r22
    2464:	5c 01       	movw	r10, r24
    2466:	6a 01       	movw	r12, r20
    2468:	19 01       	movw	r2, r18
    246a:	f0 2e       	mov	r15, r16
	ReturnType retValue = Flash_Success;
	NMX_uint16 dataOffset;

	// Enabling the Write
	fdo->GenOp.WriteEnable();
    246c:	e0 91 d2 0d 	lds	r30, 0x0DD2
    2470:	f0 91 d3 0d 	lds	r31, 0x0DD3
    2474:	e6 5a       	subi	r30, 0xA6	; 166
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	01 90       	ld	r0, Z+
    247a:	f0 81       	ld	r31, Z
    247c:	e0 2d       	mov	r30, r0
    247e:	19 95       	eicall

	if (retValue != Flash_Success)
		return retValue;

	// Computing the starting alignment, i.e. the distance from the 64 bytes boundary
	dataOffset = (fdo->Desc.FlashPageSize - (udAddr & fdo->Desc.FlashAddressMask) ) & fdo->Desc.FlashAddressMask;
    2480:	e0 91 d2 0d 	lds	r30, 0x0DD2
    2484:	f0 91 d3 0d 	lds	r31, 0x0DD3
    2488:	41 85       	ldd	r20, Z+9	; 0x09
    248a:	52 85       	ldd	r21, Z+10	; 0x0a
    248c:	ca 01       	movw	r24, r20
    248e:	88 21       	and	r24, r8
    2490:	99 21       	and	r25, r9
    2492:	c1 8d       	ldd	r28, Z+25	; 0x19
    2494:	d2 8d       	ldd	r29, Z+26	; 0x1a
    2496:	c8 1b       	sub	r28, r24
    2498:	d9 0b       	sbc	r29, r25
    249a:	c4 23       	and	r28, r20
    249c:	d5 23       	and	r29, r21
    249e:	2c 16       	cp	r2, r28
    24a0:	3d 06       	cpc	r3, r29
    24a2:	08 f4       	brcc	.+2      	; 0x24a6 <FlashDataProgram+0x68>
    24a4:	e1 01       	movw	r28, r2
	if (dataOffset > udNrOfElementsInArray)
		dataOffset = udNrOfElementsInArray;
	if (dataOffset > 0)
    24a6:	20 97       	sbiw	r28, 0x00	; 0
    24a8:	d1 f4       	brne	.+52     	; 0x24de <FlashDataProgram+0xa0>
		retValue = FlashGenProgram(udAddr, pArray, dataOffset, ubSpiInstruction);
		if (Flash_Success != retValue)
			return retValue;
	}

	for ( ; (dataOffset+fdo->Desc.FlashPageSize) < udNrOfElementsInArray; dataOffset += fdo->Desc.FlashPageSize)
    24aa:	ce 01       	movw	r24, r28
    24ac:	a0 e0       	ldi	r26, 0x00	; 0
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	e0 91 d2 0d 	lds	r30, 0x0DD2
    24b4:	f0 91 d3 0d 	lds	r31, 0x0DD3
    24b8:	01 8d       	ldd	r16, Z+25	; 0x19
    24ba:	12 8d       	ldd	r17, Z+26	; 0x1a
    24bc:	23 8d       	ldd	r18, Z+27	; 0x1b
    24be:	34 8d       	ldd	r19, Z+28	; 0x1c
    24c0:	21 01       	movw	r4, r2
    24c2:	61 2c       	mov	r6, r1
    24c4:	71 2c       	mov	r7, r1
    24c6:	ac 01       	movw	r20, r24
    24c8:	bd 01       	movw	r22, r26
    24ca:	40 0f       	add	r20, r16
    24cc:	51 1f       	adc	r21, r17
    24ce:	62 1f       	adc	r22, r18
    24d0:	73 1f       	adc	r23, r19
    24d2:	44 15       	cp	r20, r4
    24d4:	55 05       	cpc	r21, r5
    24d6:	66 05       	cpc	r22, r6
    24d8:	77 05       	cpc	r23, r7
    24da:	60 f0       	brcs	.+24     	; 0x24f4 <FlashDataProgram+0xb6>
    24dc:	30 c0       	rjmp	.+96     	; 0x253e <FlashDataProgram+0x100>
	dataOffset = (fdo->Desc.FlashPageSize - (udAddr & fdo->Desc.FlashAddressMask) ) & fdo->Desc.FlashAddressMask;
	if (dataOffset > udNrOfElementsInArray)
		dataOffset = udNrOfElementsInArray;
	if (dataOffset > 0)
	{
		retValue = FlashGenProgram(udAddr, pArray, dataOffset, ubSpiInstruction);
    24de:	8e 01       	movw	r16, r28
    24e0:	20 e0       	ldi	r18, 0x00	; 0
    24e2:	30 e0       	ldi	r19, 0x00	; 0
    24e4:	ef 2c       	mov	r14, r15
    24e6:	a6 01       	movw	r20, r12
    24e8:	c5 01       	movw	r24, r10
    24ea:	b4 01       	movw	r22, r8
    24ec:	13 df       	rcall	.-474    	; 0x2314 <FlashGenProgram>
		if (Flash_Success != retValue)
    24ee:	88 23       	and	r24, r24
    24f0:	e1 f2       	breq	.-72     	; 0x24aa <FlashDataProgram+0x6c>
    24f2:	3a c0       	rjmp	.+116    	; 0x2568 <FlashDataProgram+0x12a>
			return retValue;
	}

	for ( ; (dataOffset+fdo->Desc.FlashPageSize) < udNrOfElementsInArray; dataOffset += fdo->Desc.FlashPageSize)
	{
		retValue = FlashGenProgram(udAddr+dataOffset, pArray+dataOffset, fdo->Desc.FlashPageSize, ubSpiInstruction);
    24f4:	bc 01       	movw	r22, r24
    24f6:	cd 01       	movw	r24, r26
    24f8:	68 0d       	add	r22, r8
    24fa:	79 1d       	adc	r23, r9
    24fc:	8a 1d       	adc	r24, r10
    24fe:	9b 1d       	adc	r25, r11
    2500:	ef 2c       	mov	r14, r15
    2502:	a6 01       	movw	r20, r12
    2504:	4c 0f       	add	r20, r28
    2506:	5d 1f       	adc	r21, r29
    2508:	05 df       	rcall	.-502    	; 0x2314 <FlashGenProgram>
		if (Flash_Success != retValue)
    250a:	81 11       	cpse	r24, r1
    250c:	2d c0       	rjmp	.+90     	; 0x2568 <FlashDataProgram+0x12a>
		retValue = FlashGenProgram(udAddr, pArray, dataOffset, ubSpiInstruction);
		if (Flash_Success != retValue)
			return retValue;
	}

	for ( ; (dataOffset+fdo->Desc.FlashPageSize) < udNrOfElementsInArray; dataOffset += fdo->Desc.FlashPageSize)
    250e:	e0 91 d2 0d 	lds	r30, 0x0DD2
    2512:	f0 91 d3 0d 	lds	r31, 0x0DD3
    2516:	01 8d       	ldd	r16, Z+25	; 0x19
    2518:	12 8d       	ldd	r17, Z+26	; 0x1a
    251a:	23 8d       	ldd	r18, Z+27	; 0x1b
    251c:	34 8d       	ldd	r19, Z+28	; 0x1c
    251e:	c0 0f       	add	r28, r16
    2520:	d1 1f       	adc	r29, r17
    2522:	ce 01       	movw	r24, r28
    2524:	a0 e0       	ldi	r26, 0x00	; 0
    2526:	b0 e0       	ldi	r27, 0x00	; 0
    2528:	ac 01       	movw	r20, r24
    252a:	bd 01       	movw	r22, r26
    252c:	40 0f       	add	r20, r16
    252e:	51 1f       	adc	r21, r17
    2530:	62 1f       	adc	r22, r18
    2532:	73 1f       	adc	r23, r19
    2534:	44 15       	cp	r20, r4
    2536:	55 05       	cpc	r21, r5
    2538:	66 05       	cpc	r22, r6
    253a:	77 05       	cpc	r23, r7
    253c:	d8 f2       	brcs	.-74     	; 0x24f4 <FlashDataProgram+0xb6>
		retValue = FlashGenProgram(udAddr+dataOffset, pArray+dataOffset, fdo->Desc.FlashPageSize, ubSpiInstruction);
		if (Flash_Success != retValue)
			return retValue;
	}

	if (udNrOfElementsInArray > dataOffset)
    253e:	c2 15       	cp	r28, r2
    2540:	d3 05       	cpc	r29, r3
    2542:	88 f4       	brcc	.+34     	; 0x2566 <FlashDataProgram+0x128>
		retValue = FlashGenProgram(udAddr+dataOffset, pArray+dataOffset, (udNrOfElementsInArray-dataOffset), ubSpiInstruction);
    2544:	81 01       	movw	r16, r2
    2546:	0c 1b       	sub	r16, r28
    2548:	1d 0b       	sbc	r17, r29
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	a6 01       	movw	r20, r12
    2550:	4c 0f       	add	r20, r28
    2552:	5d 1f       	adc	r21, r29
    2554:	bc 01       	movw	r22, r24
    2556:	cd 01       	movw	r24, r26
    2558:	68 0d       	add	r22, r8
    255a:	79 1d       	adc	r23, r9
    255c:	8a 1d       	adc	r24, r10
    255e:	9b 1d       	adc	r25, r11
    2560:	ef 2c       	mov	r14, r15
    2562:	d8 de       	rcall	.-592    	; 0x2314 <FlashGenProgram>
    2564:	01 c0       	rjmp	.+2      	; 0x2568 <FlashDataProgram+0x12a>
    2566:	80 e0       	ldi	r24, 0x00	; 0

	return retValue;
}
    2568:	df 91       	pop	r29
    256a:	cf 91       	pop	r28
    256c:	1f 91       	pop	r17
    256e:	0f 91       	pop	r16
    2570:	ff 90       	pop	r15
    2572:	ef 90       	pop	r14
    2574:	df 90       	pop	r13
    2576:	cf 90       	pop	r12
    2578:	bf 90       	pop	r11
    257a:	af 90       	pop	r10
    257c:	9f 90       	pop	r9
    257e:	8f 90       	pop	r8
    2580:	7f 90       	pop	r7
    2582:	6f 90       	pop	r6
    2584:	5f 90       	pop	r5
    2586:	4f 90       	pop	r4
    2588:	3f 90       	pop	r3
    258a:	2f 90       	pop	r2
    258c:	08 95       	ret

0000258e <DataProgram>:
   Step 1: Select the right action using the insInstruction parameter
   Step 2: Execute the Flash memory Function
   Step 3: Return the Error Code
*******************************************************************************/
ReturnType DataProgram(InstructionType insInstruction, ParameterType *fp)
{
    258e:	0f 93       	push	r16
	ReturnType rRetVal;
	NMX_uint8 insCode;

	switch (insInstruction)
    2590:	8f 30       	cpi	r24, 0x0F	; 15
    2592:	79 f0       	breq	.+30     	; 0x25b2 <DataProgram+0x24>
    2594:	28 f4       	brcc	.+10     	; 0x25a0 <DataProgram+0x12>
    2596:	8d 30       	cpi	r24, 0x0D	; 13
    2598:	61 f0       	breq	.+24     	; 0x25b2 <DataProgram+0x24>
    259a:	8e 30       	cpi	r24, 0x0E	; 14
    259c:	31 f0       	breq	.+12     	; 0x25aa <DataProgram+0x1c>
    259e:	15 c0       	rjmp	.+42     	; 0x25ca <DataProgram+0x3c>
    25a0:	80 31       	cpi	r24, 0x10	; 16
    25a2:	29 f0       	breq	.+10     	; 0x25ae <DataProgram+0x20>
    25a4:	81 31       	cpi	r24, 0x11	; 17
    25a6:	89 f4       	brne	.+34     	; 0x25ca <DataProgram+0x3c>
    25a8:	04 c0       	rjmp	.+8      	; 0x25b2 <DataProgram+0x24>
#endif
		break;

	/* DUAL INPUT FAST PROGRAM */
	case DualInputProgram:
		insCode = SPI_FLASH_INS_DIPP;
    25aa:	02 ea       	ldi	r16, 0xA2	; 162
    25ac:	03 c0       	rjmp	.+6      	; 0x25b4 <DataProgram+0x26>
		break;

	/* QUAD INPUT FAST PROGRAM */
	case QuadInputProgram:
#ifndef SUPPORT_N25Q_STEP_B
		insCode = SPI_FLASH_INS_QIPP;
    25ae:	02 e3       	ldi	r16, 0x32	; 50
#endif
#ifdef SUPPORT_N25Q_STEP_B
		insCode = SPI_FLASH_INS_QIPP4B;
#endif
		break;
    25b0:	01 c0       	rjmp	.+2      	; 0x25b4 <DataProgram+0x26>
	{

	/* PAGE PROGRAM */
	case PageProgram:
#ifndef SUPPORT_N25Q_STEP_B
		insCode = SPI_FLASH_INS_PP;
    25b2:	02 e0       	ldi	r16, 0x02	; 2
    25b4:	fb 01       	movw	r30, r22
		return Flash_FunctionNotSupported;
		break;

	} /* EndSwitch */

	rRetVal = FlashDataProgram( (*fp).PageProgram.udAddr,
    25b6:	24 81       	ldd	r18, Z+4	; 0x04
    25b8:	35 81       	ldd	r19, Z+5	; 0x05
    25ba:	40 85       	ldd	r20, Z+8	; 0x08
    25bc:	51 85       	ldd	r21, Z+9	; 0x09
    25be:	60 81       	ld	r22, Z
    25c0:	71 81       	ldd	r23, Z+1	; 0x01
    25c2:	82 81       	ldd	r24, Z+2	; 0x02
    25c4:	93 81       	ldd	r25, Z+3	; 0x03
    25c6:	3b df       	rcall	.-394    	; 0x243e <FlashDataProgram>
	                            (*fp).PageProgram.pArray,
	                            (*fp).PageProgram.udNrOfElementsInArray,
	                            insCode
	                          );

	return rRetVal;
    25c8:	01 c0       	rjmp	.+2      	; 0x25cc <DataProgram+0x3e>
	case QuadInputExtendedFastProgram:
		insCode = SPI_FLASH_INS_QIEPP;
		break;

	default:
		return Flash_FunctionNotSupported;
    25ca:	87 e0       	ldi	r24, 0x07	; 7
	                            (*fp).PageProgram.udNrOfElementsInArray,
	                            insCode
	                          );

	return rRetVal;
} /* EndFunction Flash */
    25cc:	0f 91       	pop	r16
    25ce:	08 95       	ret

000025d0 <FlashSectorErase>:
   Step 4: Initialize the data (Instruction & address) packet to be sent serially
   Step 5: Send the packet (Instruction & address) serially
   Step 6: Wait until the operation completes or a timeout occurs.
*******************************************************************************/
ReturnType  FlashSectorErase( uSectorType uscSectorNr )
{
    25d0:	cf 92       	push	r12
    25d2:	df 92       	push	r13
    25d4:	ef 92       	push	r14
    25d6:	ff 92       	push	r15
    25d8:	0f 93       	push	r16
    25da:	1f 93       	push	r17
    25dc:	cf 93       	push	r28
    25de:	df 93       	push	r29
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
    25e4:	2c 97       	sbiw	r28, 0x0c	; 12
    25e6:	0f b6       	in	r0, 0x3f	; 63
    25e8:	f8 94       	cli
    25ea:	de bf       	out	0x3e, r29	; 62
    25ec:	0f be       	out	0x3f, r0	; 63
    25ee:	cd bf       	out	0x3d, r28	; 61
	uAddrType SectorAddr;
	NMX_uint8 fsr_value;
	ReturnType ret;

	// Step 1: Validate the sector number input
	if(!(uscSectorNr < fdo->Desc.FlashSectorCount)) return Flash_SectorNrInvalid;
    25f0:	e0 91 d2 0d 	lds	r30, 0x0DD2
    25f4:	f0 91 d3 0d 	lds	r31, 0x0DD3
    25f8:	8c 01       	movw	r16, r24
    25fa:	20 e0       	ldi	r18, 0x00	; 0
    25fc:	30 e0       	ldi	r19, 0x00	; 0
    25fe:	45 85       	ldd	r20, Z+13	; 0x0d
    2600:	56 85       	ldd	r21, Z+14	; 0x0e
    2602:	67 85       	ldd	r22, Z+15	; 0x0f
    2604:	70 89       	ldd	r23, Z+16	; 0x10
    2606:	04 17       	cp	r16, r20
    2608:	15 07       	cpc	r17, r21
    260a:	26 07       	cpc	r18, r22
    260c:	37 07       	cpc	r19, r23
    260e:	08 f0       	brcs	.+2      	; 0x2612 <FlashSectorErase+0x42>
    2610:	47 c0       	rjmp	.+142    	; 0x26a0 <FlashSectorErase+0xd0>

	SectorAddr = fdo->GenOp.BlockOffset(uscSectorNr);
    2612:	e8 5b       	subi	r30, 0xB8	; 184
    2614:	ff 4f       	sbci	r31, 0xFF	; 255
    2616:	01 90       	ld	r0, Z+
    2618:	f0 81       	ld	r31, Z
    261a:	e0 2d       	mov	r30, r0
    261c:	19 95       	eicall
    261e:	6b 01       	movw	r12, r22
    2620:	7c 01       	movw	r14, r24

	// Step 2: Check whether any previous Write, Program or Erase cycle is on going
	if(IsFlashBusy()) return Flash_OperationOngoing;
    2622:	ea db       	rcall	.-2092   	; 0x1df8 <IsFlashBusy>
    2624:	81 11       	cpse	r24, r1
    2626:	3e c0       	rjmp	.+124    	; 0x26a4 <FlashSectorErase+0xd4>

	// Step 3: Disable Write protection
	fdo->GenOp.WriteEnable();
    2628:	e0 91 d2 0d 	lds	r30, 0x0DD2
    262c:	f0 91 d3 0d 	lds	r31, 0x0DD3
    2630:	e6 5a       	subi	r30, 0xA6	; 166
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	01 90       	ld	r0, Z+
    2636:	f0 81       	ld	r31, Z
    2638:	e0 2d       	mov	r30, r0
    263a:	19 95       	eicall

	// Step 4: Initialize the data (Instruction & address) packet to be sent serially
	char_stream_send.length   = fdo->Desc.NumAddrByte + 1;
    263c:	e0 91 d2 0d 	lds	r30, 0x0DD2
    2640:	f0 91 d3 0d 	lds	r31, 0x0DD3
    2644:	e9 5b       	subi	r30, 0xB9	; 185
    2646:	ff 4f       	sbci	r31, 0xFF	; 255
    2648:	20 81       	ld	r18, Z
    264a:	82 2f       	mov	r24, r18
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	01 96       	adiw	r24, 0x01	; 1
    2650:	09 2e       	mov	r0, r25
    2652:	00 0c       	add	r0, r0
    2654:	aa 0b       	sbc	r26, r26
    2656:	bb 0b       	sbc	r27, r27
    2658:	8b 83       	std	Y+3, r24	; 0x03
    265a:	9c 83       	std	Y+4, r25	; 0x04
    265c:	ad 83       	std	Y+5, r26	; 0x05
    265e:	be 83       	std	Y+6, r27	; 0x06
	char_stream_send.pChar    = &pIns_Addr[0];
    2660:	ae 01       	movw	r20, r28
    2662:	49 5f       	subi	r20, 0xF9	; 249
    2664:	5f 4f       	sbci	r21, 0xFF	; 255
    2666:	5a 83       	std	Y+2, r21	; 0x02
    2668:	49 83       	std	Y+1, r20	; 0x01

#ifndef SUPPORT_N25Q_STEP_B
	pIns_Addr[0]              = SPI_FLASH_INS_SE;
    266a:	88 ed       	ldi	r24, 0xD8	; 216
    266c:	8f 83       	std	Y+7, r24	; 0x07
#endif
#ifdef SUPPORT_N25Q_STEP_B
	pIns_Addr[0]              = SPI_FLASH_INS_SE4B;
#endif

	fill_addr_vect(SectorAddr, pIns_Addr, fdo->Desc.NumAddrByte);
    266e:	c7 01       	movw	r24, r14
    2670:	b6 01       	movw	r22, r12
    2672:	2e dc       	rcall	.-1956   	; 0x1ed0 <fill_addr_vect>

	// Step 5: Send the packet (Instruction & address) serially
	Serialize_SPI(&char_stream_send,
    2674:	23 e0       	ldi	r18, 0x03	; 3
    2676:	41 e0       	ldi	r20, 0x01	; 1
    2678:	60 e0       	ldi	r22, 0x00	; 0
    267a:	70 e0       	ldi	r23, 0x00	; 0
    267c:	ce 01       	movw	r24, r28
    267e:	01 96       	adiw	r24, 0x01	; 1
    2680:	e4 d4       	rcall	.+2504   	; 0x304a <Serialize_SPI>
	              NULL_PTR,
	              OpsWakeUp,
	              OpsEndTransfer);

	// Step 6: Wait until the operation completes or a timeout occurs.
	ret = WAIT_TILL_Instruction_EXECUTION_COMPLETE(SE_TIMEOUT);
    2682:	83 e0       	ldi	r24, 0x03	; 3
    2684:	90 e0       	ldi	r25, 0x00	; 0
    2686:	26 dd       	rcall	.-1460   	; 0x20d4 <WAIT_TILL_Instruction_EXECUTION_COMPLETE>

	FlashReadFlagStatusRegister(&fsr_value);
    2688:	ce 01       	movw	r24, r28
    268a:	0c 96       	adiw	r24, 0x0c	; 12
    268c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <FlashReadFlagStatusRegister>
	FlashClearFlagStatusRegister();
    2690:	0e 94 ed 04 	call	0x9da	; 0x9da <FlashClearFlagStatusRegister>
    2694:	8c 85       	ldd	r24, Y+12	; 0x0c
    2696:	82 72       	andi	r24, 0x22	; 34

	if((fsr_value & SPI_FSR_PROT) && (fsr_value & SPI_FSR_ERASE))
    2698:	82 32       	cpi	r24, 0x22	; 34
    269a:	31 f0       	breq	.+12     	; 0x26a8 <FlashSectorErase+0xd8>
		return Flash_SectorProtected;

	return Flash_Success;
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	05 c0       	rjmp	.+10     	; 0x26aa <FlashSectorErase+0xda>
	uAddrType SectorAddr;
	NMX_uint8 fsr_value;
	ReturnType ret;

	// Step 1: Validate the sector number input
	if(!(uscSectorNr < fdo->Desc.FlashSectorCount)) return Flash_SectorNrInvalid;
    26a0:	86 e0       	ldi	r24, 0x06	; 6
    26a2:	03 c0       	rjmp	.+6      	; 0x26aa <FlashSectorErase+0xda>

	SectorAddr = fdo->GenOp.BlockOffset(uscSectorNr);

	// Step 2: Check whether any previous Write, Program or Erase cycle is on going
	if(IsFlashBusy()) return Flash_OperationOngoing;
    26a4:	89 e0       	ldi	r24, 0x09	; 9
    26a6:	01 c0       	rjmp	.+2      	; 0x26aa <FlashSectorErase+0xda>

	FlashReadFlagStatusRegister(&fsr_value);
	FlashClearFlagStatusRegister();

	if((fsr_value & SPI_FSR_PROT) && (fsr_value & SPI_FSR_ERASE))
		return Flash_SectorProtected;
    26a8:	8c e0       	ldi	r24, 0x0C	; 12

	return Flash_Success;
}
    26aa:	2c 96       	adiw	r28, 0x0c	; 12
    26ac:	0f b6       	in	r0, 0x3f	; 63
    26ae:	f8 94       	cli
    26b0:	de bf       	out	0x3e, r29	; 62
    26b2:	0f be       	out	0x3f, r0	; 63
    26b4:	cd bf       	out	0x3d, r28	; 61
    26b6:	df 91       	pop	r29
    26b8:	cf 91       	pop	r28
    26ba:	1f 91       	pop	r17
    26bc:	0f 91       	pop	r16
    26be:	ff 90       	pop	r15
    26c0:	ef 90       	pop	r14
    26c2:	df 90       	pop	r13
    26c4:	cf 90       	pop	r12
    26c6:	08 95       	ret

000026c8 <FlashSubSectorErase>:
   Step 4: Initialize the data (Instruction & address) packet to be sent serially
   Step 5: Send the packet (Instruction & address) serially
   Step 6: Wait until the operation completes or a timeout occurs.
*******************************************************************************/
ReturnType  FlashSubSectorErase( uSectorType uscSectorNr )
{
    26c8:	ff 92       	push	r15
    26ca:	0f 93       	push	r16
    26cc:	1f 93       	push	r17
    26ce:	cf 93       	push	r28
    26d0:	df 93       	push	r29
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    26d6:	2c 97       	sbiw	r28, 0x0c	; 12
    26d8:	0f b6       	in	r0, 0x3f	; 63
    26da:	f8 94       	cli
    26dc:	de bf       	out	0x3e, r29	; 62
    26de:	0f be       	out	0x3f, r0	; 63
    26e0:	cd bf       	out	0x3d, r28	; 61
	uAddrType SubSectorAddr;
	NMX_uint8 fsr_value;
	ReturnType ret;

	// Step 1: Validate the sector number input
	if(!(uscSectorNr < fdo->Desc.FlashSubSectorCount))
    26e2:	e0 91 d2 0d 	lds	r30, 0x0DD2
    26e6:	f0 91 d3 0d 	lds	r31, 0x0DD3
    26ea:	8c 01       	movw	r16, r24
    26ec:	20 e0       	ldi	r18, 0x00	; 0
    26ee:	30 e0       	ldi	r19, 0x00	; 0
    26f0:	41 89       	ldd	r20, Z+17	; 0x11
    26f2:	52 89       	ldd	r21, Z+18	; 0x12
    26f4:	63 89       	ldd	r22, Z+19	; 0x13
    26f6:	74 89       	ldd	r23, Z+20	; 0x14
    26f8:	04 17       	cp	r16, r20
    26fa:	15 07       	cpc	r17, r21
    26fc:	26 07       	cpc	r18, r22
    26fe:	37 07       	cpc	r19, r23
    2700:	08 f0       	brcs	.+2      	; 0x2704 <FlashSubSectorErase+0x3c>
    2702:	47 c0       	rjmp	.+142    	; 0x2792 <FlashSubSectorErase+0xca>
    2704:	8c 01       	movw	r16, r24
		return Flash_SectorNrInvalid;

	SubSectorAddr = uscSectorNr << fdo->Desc.FlashSubSectorSize_bit;
    2706:	f5 88       	ldd	r15, Z+21	; 0x15

	// Step 2: Check whether any previous Write, Program or Erase cycle is on going
	if(IsFlashBusy()) return Flash_OperationOngoing;
    2708:	77 db       	rcall	.-2322   	; 0x1df8 <IsFlashBusy>
    270a:	81 11       	cpse	r24, r1
    270c:	44 c0       	rjmp	.+136    	; 0x2796 <FlashSubSectorErase+0xce>

	// Step 3: Disable Write protection
	fdo->GenOp.WriteEnable();
    270e:	e0 91 d2 0d 	lds	r30, 0x0DD2
    2712:	f0 91 d3 0d 	lds	r31, 0x0DD3
    2716:	e6 5a       	subi	r30, 0xA6	; 166
    2718:	ff 4f       	sbci	r31, 0xFF	; 255
    271a:	01 90       	ld	r0, Z+
    271c:	f0 81       	ld	r31, Z
    271e:	e0 2d       	mov	r30, r0
    2720:	19 95       	eicall

	// Step 4: Initialize the data (Instruction & address) packet to be sent serially
	char_stream_send.length   = fdo->Desc.NumAddrByte + 1;;
    2722:	e0 91 d2 0d 	lds	r30, 0x0DD2
    2726:	f0 91 d3 0d 	lds	r31, 0x0DD3
    272a:	e9 5b       	subi	r30, 0xB9	; 185
    272c:	ff 4f       	sbci	r31, 0xFF	; 255
    272e:	20 81       	ld	r18, Z
    2730:	82 2f       	mov	r24, r18
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	01 96       	adiw	r24, 0x01	; 1
    2736:	09 2e       	mov	r0, r25
    2738:	00 0c       	add	r0, r0
    273a:	aa 0b       	sbc	r26, r26
    273c:	bb 0b       	sbc	r27, r27
    273e:	8b 83       	std	Y+3, r24	; 0x03
    2740:	9c 83       	std	Y+4, r25	; 0x04
    2742:	ad 83       	std	Y+5, r26	; 0x05
    2744:	be 83       	std	Y+6, r27	; 0x06
	char_stream_send.pChar    = &pIns_Addr[0];
    2746:	ae 01       	movw	r20, r28
    2748:	49 5f       	subi	r20, 0xF9	; 249
    274a:	5f 4f       	sbci	r21, 0xFF	; 255
    274c:	5a 83       	std	Y+2, r21	; 0x02
    274e:	49 83       	std	Y+1, r20	; 0x01

#ifndef SUPPORT_N25Q_STEP_B
	pIns_Addr[0]              = SPI_FLASH_INS_SSE;
    2750:	80 e2       	ldi	r24, 0x20	; 32
    2752:	8f 83       	std	Y+7, r24	; 0x07

	// Step 1: Validate the sector number input
	if(!(uscSectorNr < fdo->Desc.FlashSubSectorCount))
		return Flash_SectorNrInvalid;

	SubSectorAddr = uscSectorNr << fdo->Desc.FlashSubSectorSize_bit;
    2754:	b8 01       	movw	r22, r16
    2756:	02 c0       	rjmp	.+4      	; 0x275c <FlashSubSectorErase+0x94>
    2758:	66 0f       	add	r22, r22
    275a:	77 1f       	adc	r23, r23
    275c:	fa 94       	dec	r15
    275e:	e2 f7       	brpl	.-8      	; 0x2758 <FlashSubSectorErase+0x90>
    2760:	80 e0       	ldi	r24, 0x00	; 0
    2762:	90 e0       	ldi	r25, 0x00	; 0
#endif
#ifdef SUPPORT_N25Q_STEP_B
	pIns_Addr[0]              = SPI_FLASH_INS_SSE4B;
#endif

	fill_addr_vect(SubSectorAddr, pIns_Addr, fdo->Desc.NumAddrByte);
    2764:	b5 db       	rcall	.-2198   	; 0x1ed0 <fill_addr_vect>

	// Step 5: Send the packet (Instruction & address) serially
	Serialize_SPI(&char_stream_send,
    2766:	23 e0       	ldi	r18, 0x03	; 3
    2768:	41 e0       	ldi	r20, 0x01	; 1
    276a:	60 e0       	ldi	r22, 0x00	; 0
    276c:	70 e0       	ldi	r23, 0x00	; 0
    276e:	ce 01       	movw	r24, r28
    2770:	01 96       	adiw	r24, 0x01	; 1
    2772:	6b d4       	rcall	.+2262   	; 0x304a <Serialize_SPI>
	              NULL_PTR,
	              OpsWakeUp,
	              OpsEndTransfer);

	// Step 6: Wait until the operation completes or a timeout occurs.
	ret = WAIT_TILL_Instruction_EXECUTION_COMPLETE(SE_TIMEOUT);
    2774:	83 e0       	ldi	r24, 0x03	; 3
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	ad dc       	rcall	.-1702   	; 0x20d4 <WAIT_TILL_Instruction_EXECUTION_COMPLETE>

	FlashReadFlagStatusRegister(&fsr_value);
    277a:	ce 01       	movw	r24, r28
    277c:	0c 96       	adiw	r24, 0x0c	; 12
    277e:	0e 94 ae 05 	call	0xb5c	; 0xb5c <FlashReadFlagStatusRegister>
	FlashClearFlagStatusRegister();
    2782:	0e 94 ed 04 	call	0x9da	; 0x9da <FlashClearFlagStatusRegister>
    2786:	8c 85       	ldd	r24, Y+12	; 0x0c
    2788:	82 72       	andi	r24, 0x22	; 34

	if((fsr_value & SPI_FSR_PROT) && (fsr_value & SPI_FSR_ERASE))
    278a:	82 32       	cpi	r24, 0x22	; 34
    278c:	31 f0       	breq	.+12     	; 0x279a <FlashSubSectorErase+0xd2>
		return Flash_SectorProtected;

	return Flash_Success;
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	05 c0       	rjmp	.+10     	; 0x279c <FlashSubSectorErase+0xd4>
	NMX_uint8 fsr_value;
	ReturnType ret;

	// Step 1: Validate the sector number input
	if(!(uscSectorNr < fdo->Desc.FlashSubSectorCount))
		return Flash_SectorNrInvalid;
    2792:	86 e0       	ldi	r24, 0x06	; 6
    2794:	03 c0       	rjmp	.+6      	; 0x279c <FlashSubSectorErase+0xd4>

	SubSectorAddr = uscSectorNr << fdo->Desc.FlashSubSectorSize_bit;

	// Step 2: Check whether any previous Write, Program or Erase cycle is on going
	if(IsFlashBusy()) return Flash_OperationOngoing;
    2796:	89 e0       	ldi	r24, 0x09	; 9
    2798:	01 c0       	rjmp	.+2      	; 0x279c <FlashSubSectorErase+0xd4>

	FlashReadFlagStatusRegister(&fsr_value);
	FlashClearFlagStatusRegister();

	if((fsr_value & SPI_FSR_PROT) && (fsr_value & SPI_FSR_ERASE))
		return Flash_SectorProtected;
    279a:	8c e0       	ldi	r24, 0x0C	; 12

	return Flash_Success;
}
    279c:	2c 96       	adiw	r28, 0x0c	; 12
    279e:	0f b6       	in	r0, 0x3f	; 63
    27a0:	f8 94       	cli
    27a2:	de bf       	out	0x3e, r29	; 62
    27a4:	0f be       	out	0x3f, r0	; 63
    27a6:	cd bf       	out	0x3d, r28	; 61
    27a8:	df 91       	pop	r29
    27aa:	cf 91       	pop	r28
    27ac:	1f 91       	pop	r17
    27ae:	0f 91       	pop	r16
    27b0:	ff 90       	pop	r15
    27b2:	08 95       	ret

000027b4 <FlashDieErase>:

Pseudo Code:

*******************************************************************************/
ReturnType  FlashDieErase( uSectorType uscDieNr )
{
    27b4:	ff 92       	push	r15
    27b6:	0f 93       	push	r16
    27b8:	1f 93       	push	r17
    27ba:	cf 93       	push	r28
    27bc:	df 93       	push	r29
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	2c 97       	sbiw	r28, 0x0c	; 12
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	f8 94       	cli
    27c8:	de bf       	out	0x3e, r29	; 62
    27ca:	0f be       	out	0x3f, r0	; 63
    27cc:	cd bf       	out	0x3d, r28	; 61
	uAddrType DieAddr;
	NMX_uint8 fsr_value;
	ReturnType ret;

	// Step 1: Validate the sector number input
	if(!(uscDieNr < fdo->Desc.FlashDieCount))
    27ce:	e0 91 d2 0d 	lds	r30, 0x0DD2
    27d2:	f0 91 d3 0d 	lds	r31, 0x0DD3
    27d6:	25 a9       	ldd	r18, Z+53	; 0x35
    27d8:	30 e0       	ldi	r19, 0x00	; 0
    27da:	82 17       	cp	r24, r18
    27dc:	93 07       	cpc	r25, r19
    27de:	08 f0       	brcs	.+2      	; 0x27e2 <FlashDieErase+0x2e>
    27e0:	47 c0       	rjmp	.+142    	; 0x2870 <FlashDieErase+0xbc>
    27e2:	8c 01       	movw	r16, r24
		return Flash_SectorNrInvalid;

	DieAddr = uscDieNr << fdo->Desc.FlashDieSize_bit;
    27e4:	f2 ac       	ldd	r15, Z+58	; 0x3a

	// Step 2: Check whether any previous Write, Program or Erase cycle is on going
	if(IsFlashBusy()) return Flash_OperationOngoing;
    27e6:	08 db       	rcall	.-2544   	; 0x1df8 <IsFlashBusy>
    27e8:	81 11       	cpse	r24, r1
    27ea:	44 c0       	rjmp	.+136    	; 0x2874 <FlashDieErase+0xc0>

	// Step 3: Disable Write protection
	fdo->GenOp.WriteEnable();
    27ec:	e0 91 d2 0d 	lds	r30, 0x0DD2
    27f0:	f0 91 d3 0d 	lds	r31, 0x0DD3
    27f4:	e6 5a       	subi	r30, 0xA6	; 166
    27f6:	ff 4f       	sbci	r31, 0xFF	; 255
    27f8:	01 90       	ld	r0, Z+
    27fa:	f0 81       	ld	r31, Z
    27fc:	e0 2d       	mov	r30, r0
    27fe:	19 95       	eicall

	// Step 4: Initialize the data (Instruction & address) packet to be sent serially
	char_stream_send.length   = fdo->Desc.NumAddrByte + 1;;
    2800:	e0 91 d2 0d 	lds	r30, 0x0DD2
    2804:	f0 91 d3 0d 	lds	r31, 0x0DD3
    2808:	e9 5b       	subi	r30, 0xB9	; 185
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	20 81       	ld	r18, Z
    280e:	82 2f       	mov	r24, r18
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	01 96       	adiw	r24, 0x01	; 1
    2814:	09 2e       	mov	r0, r25
    2816:	00 0c       	add	r0, r0
    2818:	aa 0b       	sbc	r26, r26
    281a:	bb 0b       	sbc	r27, r27
    281c:	8b 83       	std	Y+3, r24	; 0x03
    281e:	9c 83       	std	Y+4, r25	; 0x04
    2820:	ad 83       	std	Y+5, r26	; 0x05
    2822:	be 83       	std	Y+6, r27	; 0x06
	char_stream_send.pChar    = &pIns_Addr[0];
    2824:	ae 01       	movw	r20, r28
    2826:	49 5f       	subi	r20, 0xF9	; 249
    2828:	5f 4f       	sbci	r21, 0xFF	; 255
    282a:	5a 83       	std	Y+2, r21	; 0x02
    282c:	49 83       	std	Y+1, r20	; 0x01
	pIns_Addr[0]              = SPI_FLASH_INS_DE;
    282e:	84 ec       	ldi	r24, 0xC4	; 196
    2830:	8f 83       	std	Y+7, r24	; 0x07

	// Step 1: Validate the sector number input
	if(!(uscDieNr < fdo->Desc.FlashDieCount))
		return Flash_SectorNrInvalid;

	DieAddr = uscDieNr << fdo->Desc.FlashDieSize_bit;
    2832:	b8 01       	movw	r22, r16
    2834:	02 c0       	rjmp	.+4      	; 0x283a <FlashDieErase+0x86>
    2836:	66 0f       	add	r22, r22
    2838:	77 1f       	adc	r23, r23
    283a:	fa 94       	dec	r15
    283c:	e2 f7       	brpl	.-8      	; 0x2836 <FlashDieErase+0x82>
    283e:	80 e0       	ldi	r24, 0x00	; 0
    2840:	90 e0       	ldi	r25, 0x00	; 0

	// Step 4: Initialize the data (Instruction & address) packet to be sent serially
	char_stream_send.length   = fdo->Desc.NumAddrByte + 1;;
	char_stream_send.pChar    = &pIns_Addr[0];
	pIns_Addr[0]              = SPI_FLASH_INS_DE;
	fill_addr_vect(DieAddr, pIns_Addr, fdo->Desc.NumAddrByte);
    2842:	46 db       	rcall	.-2420   	; 0x1ed0 <fill_addr_vect>

	// Step 5: Send the packet (Instruction & address) serially
	Serialize_SPI(&char_stream_send,
    2844:	23 e0       	ldi	r18, 0x03	; 3
    2846:	41 e0       	ldi	r20, 0x01	; 1
    2848:	60 e0       	ldi	r22, 0x00	; 0
    284a:	70 e0       	ldi	r23, 0x00	; 0
    284c:	ce 01       	movw	r24, r28
    284e:	01 96       	adiw	r24, 0x01	; 1
    2850:	fc d3       	rcall	.+2040   	; 0x304a <Serialize_SPI>
	              NULL_PTR,
	              OpsWakeUp,
	              OpsEndTransfer);

	// Step 6: Wait until the operation completes or a timeout occurs.
	ret = WAIT_TILL_Instruction_EXECUTION_COMPLETE(DIE_TIMEOUT);
    2852:	80 ee       	ldi	r24, 0xE0	; 224
    2854:	91 e0       	ldi	r25, 0x01	; 1
    2856:	3e dc       	rcall	.-1924   	; 0x20d4 <WAIT_TILL_Instruction_EXECUTION_COMPLETE>

	FlashReadFlagStatusRegister(&fsr_value);
    2858:	ce 01       	movw	r24, r28
    285a:	0c 96       	adiw	r24, 0x0c	; 12
    285c:	0e 94 ae 05 	call	0xb5c	; 0xb5c <FlashReadFlagStatusRegister>
	FlashClearFlagStatusRegister();
    2860:	0e 94 ed 04 	call	0x9da	; 0x9da <FlashClearFlagStatusRegister>
    2864:	8c 85       	ldd	r24, Y+12	; 0x0c
    2866:	82 72       	andi	r24, 0x22	; 34

	if((fsr_value & SPI_FSR_PROT) && (fsr_value & SPI_FSR_ERASE))
    2868:	82 32       	cpi	r24, 0x22	; 34
    286a:	31 f0       	breq	.+12     	; 0x2878 <FlashDieErase+0xc4>
		return Flash_SectorProtected;

	return Flash_Success;
    286c:	80 e0       	ldi	r24, 0x00	; 0
    286e:	05 c0       	rjmp	.+10     	; 0x287a <FlashDieErase+0xc6>
	NMX_uint8 fsr_value;
	ReturnType ret;

	// Step 1: Validate the sector number input
	if(!(uscDieNr < fdo->Desc.FlashDieCount))
		return Flash_SectorNrInvalid;
    2870:	86 e0       	ldi	r24, 0x06	; 6
    2872:	03 c0       	rjmp	.+6      	; 0x287a <FlashDieErase+0xc6>

	DieAddr = uscDieNr << fdo->Desc.FlashDieSize_bit;

	// Step 2: Check whether any previous Write, Program or Erase cycle is on going
	if(IsFlashBusy()) return Flash_OperationOngoing;
    2874:	89 e0       	ldi	r24, 0x09	; 9
    2876:	01 c0       	rjmp	.+2      	; 0x287a <FlashDieErase+0xc6>

	FlashReadFlagStatusRegister(&fsr_value);
	FlashClearFlagStatusRegister();

	if((fsr_value & SPI_FSR_PROT) && (fsr_value & SPI_FSR_ERASE))
		return Flash_SectorProtected;
    2878:	8c e0       	ldi	r24, 0x0C	; 12

	return Flash_Success;
}
    287a:	2c 96       	adiw	r28, 0x0c	; 12
    287c:	0f b6       	in	r0, 0x3f	; 63
    287e:	f8 94       	cli
    2880:	de bf       	out	0x3e, r29	; 62
    2882:	0f be       	out	0x3f, r0	; 63
    2884:	cd bf       	out	0x3d, r28	; 61
    2886:	df 91       	pop	r29
    2888:	cf 91       	pop	r28
    288a:	1f 91       	pop	r17
    288c:	0f 91       	pop	r16
    288e:	ff 90       	pop	r15
    2890:	08 95       	ret

00002892 <FlashWriteVolatileConfigurationRegister>:
   Step 2: Initialize the data (i.e. Instruction & value) packet to be sent serially
   Step 3: Send the packet serially
   Step 4: Wait until the operation completes or a timeout occurs.
*******************************************************************************/
ReturnType  FlashWriteVolatileConfigurationRegister( NMX_uint8 ucVolatileConfigurationRegister)
{
    2892:	1f 93       	push	r17
    2894:	cf 93       	push	r28
    2896:	df 93       	push	r29
    2898:	cd b7       	in	r28, 0x3d	; 61
    289a:	de b7       	in	r29, 0x3e	; 62
    289c:	28 97       	sbiw	r28, 0x08	; 8
    289e:	0f b6       	in	r0, 0x3f	; 63
    28a0:	f8 94       	cli
    28a2:	de bf       	out	0x3e, r29	; 62
    28a4:	0f be       	out	0x3f, r0	; 63
    28a6:	cd bf       	out	0x3d, r28	; 61
    28a8:	18 2f       	mov	r17, r24
	CharStream char_stream_send;
	NMX_uint8  pIns_Val[2];

	// Step 1: Disable Write protection
	FlashWriteEnable();
    28aa:	0e 94 8f 04 	call	0x91e	; 0x91e <FlashWriteEnable>

	// Step 2: Initialize the data (i.e. Instruction & value) packet to be sent serially
	char_stream_send.length = 2;
    28ae:	82 e0       	ldi	r24, 0x02	; 2
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	a0 e0       	ldi	r26, 0x00	; 0
    28b4:	b0 e0       	ldi	r27, 0x00	; 0
    28b6:	8b 83       	std	Y+3, r24	; 0x03
    28b8:	9c 83       	std	Y+4, r25	; 0x04
    28ba:	ad 83       	std	Y+5, r26	; 0x05
    28bc:	be 83       	std	Y+6, r27	; 0x06
	char_stream_send.pChar  = pIns_Val;
    28be:	ce 01       	movw	r24, r28
    28c0:	07 96       	adiw	r24, 0x07	; 7
    28c2:	9a 83       	std	Y+2, r25	; 0x02
    28c4:	89 83       	std	Y+1, r24	; 0x01
	pIns_Val[0] = SPI_FLASH_INS_WRVCR;
    28c6:	81 e8       	ldi	r24, 0x81	; 129
    28c8:	8f 83       	std	Y+7, r24	; 0x07
	pIns_Val[1] = ucVolatileConfigurationRegister;
    28ca:	18 87       	std	Y+8, r17	; 0x08

	// Step 3: Send the packet serially
	Serialize_SPI(&char_stream_send,
    28cc:	23 e0       	ldi	r18, 0x03	; 3
    28ce:	41 e0       	ldi	r20, 0x01	; 1
    28d0:	60 e0       	ldi	r22, 0x00	; 0
    28d2:	70 e0       	ldi	r23, 0x00	; 0
    28d4:	ce 01       	movw	r24, r28
    28d6:	01 96       	adiw	r24, 0x01	; 1
    28d8:	b8 d3       	rcall	.+1904   	; 0x304a <Serialize_SPI>
	              OpsEndTransfer);

	//SPI_setXiPMode(ucVolatileConfigurationRegister);

	// Step 4: Wait until the operation completes or a timeout occurs.
	return WAIT_TILL_Instruction_EXECUTION_COMPLETE(1);
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	fa db       	rcall	.-2060   	; 0x20d4 <WAIT_TILL_Instruction_EXECUTION_COMPLETE>
}
    28e0:	28 96       	adiw	r28, 0x08	; 8
    28e2:	0f b6       	in	r0, 0x3f	; 63
    28e4:	f8 94       	cli
    28e6:	de bf       	out	0x3e, r29	; 62
    28e8:	0f be       	out	0x3f, r0	; 63
    28ea:	cd bf       	out	0x3d, r28	; 61
    28ec:	df 91       	pop	r29
    28ee:	cf 91       	pop	r28
    28f0:	1f 91       	pop	r17
    28f2:	08 95       	ret

000028f4 <FlashWriteVolatileEnhancedConfigurationRegister>:
   Step 2: Initialize the data (i.e. Instruction & value) packet to be sent serially
   Step 3: Send the packet serially
   Step 5: Wait until the operation completes or a timeout occurs.
*******************************************************************************/
ReturnType  FlashWriteVolatileEnhancedConfigurationRegister( NMX_uint8 ucVolatileEnhancedConfigurationRegister)
{
    28f4:	1f 93       	push	r17
    28f6:	cf 93       	push	r28
    28f8:	df 93       	push	r29
    28fa:	cd b7       	in	r28, 0x3d	; 61
    28fc:	de b7       	in	r29, 0x3e	; 62
    28fe:	28 97       	sbiw	r28, 0x08	; 8
    2900:	0f b6       	in	r0, 0x3f	; 63
    2902:	f8 94       	cli
    2904:	de bf       	out	0x3e, r29	; 62
    2906:	0f be       	out	0x3f, r0	; 63
    2908:	cd bf       	out	0x3d, r28	; 61
    290a:	18 2f       	mov	r17, r24
	CharStream char_stream_send;
	NMX_uint8  pIns_Val[2];

	// Step 1: Disable Write protection
	FlashWriteEnable();
    290c:	0e 94 8f 04 	call	0x91e	; 0x91e <FlashWriteEnable>

	// Step 2: Initialize the data (i.e. Instruction & value) packet to be sent serially
	char_stream_send.length = 2;
    2910:	82 e0       	ldi	r24, 0x02	; 2
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	a0 e0       	ldi	r26, 0x00	; 0
    2916:	b0 e0       	ldi	r27, 0x00	; 0
    2918:	8b 83       	std	Y+3, r24	; 0x03
    291a:	9c 83       	std	Y+4, r25	; 0x04
    291c:	ad 83       	std	Y+5, r26	; 0x05
    291e:	be 83       	std	Y+6, r27	; 0x06
	char_stream_send.pChar  = pIns_Val;
    2920:	ce 01       	movw	r24, r28
    2922:	07 96       	adiw	r24, 0x07	; 7
    2924:	9a 83       	std	Y+2, r25	; 0x02
    2926:	89 83       	std	Y+1, r24	; 0x01
	pIns_Val[0] = SPI_FLASH_INS_WRVECR;
    2928:	81 e6       	ldi	r24, 0x61	; 97
    292a:	8f 83       	std	Y+7, r24	; 0x07
	pIns_Val[1] = ucVolatileEnhancedConfigurationRegister;
    292c:	18 87       	std	Y+8, r17	; 0x08

	// Step 3: Send the packet serially
	Serialize_SPI(&char_stream_send,
    292e:	23 e0       	ldi	r18, 0x03	; 3
    2930:	41 e0       	ldi	r20, 0x01	; 1
    2932:	60 e0       	ldi	r22, 0x00	; 0
    2934:	70 e0       	ldi	r23, 0x00	; 0
    2936:	ce 01       	movw	r24, r28
    2938:	01 96       	adiw	r24, 0x01	; 1
    293a:	87 d3       	rcall	.+1806   	; 0x304a <Serialize_SPI>
	              NULL_PTR,
	              OpsWakeUp,
	              OpsEndTransfer);

	// Step 5: Wait until the operation completes or a timeout occurs.
	return WAIT_TILL_Instruction_EXECUTION_COMPLETE(1);
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	c9 db       	rcall	.-2158   	; 0x20d4 <WAIT_TILL_Instruction_EXECUTION_COMPLETE>
}
    2942:	28 96       	adiw	r28, 0x08	; 8
    2944:	0f b6       	in	r0, 0x3f	; 63
    2946:	f8 94       	cli
    2948:	de bf       	out	0x3e, r29	; 62
    294a:	0f be       	out	0x3f, r0	; 63
    294c:	cd bf       	out	0x3d, r28	; 61
    294e:	df 91       	pop	r29
    2950:	cf 91       	pop	r28
    2952:	1f 91       	pop	r17
    2954:	08 95       	ret

00002956 <FlashWriteNVConfigurationRegister>:
   Step 2: Initialize the data (i.e. Instruction & value) packet to be sent serially
   Step 3: Send the packet serially
   Step 4: Wait until the operation completes or a timeout occurs.
*******************************************************************************/
ReturnType  FlashWriteNVConfigurationRegister( NMX_uint16 ucNVConfigurationRegister)
{
    2956:	0f 93       	push	r16
    2958:	1f 93       	push	r17
    295a:	cf 93       	push	r28
    295c:	df 93       	push	r29
    295e:	cd b7       	in	r28, 0x3d	; 61
    2960:	de b7       	in	r29, 0x3e	; 62
    2962:	29 97       	sbiw	r28, 0x09	; 9
    2964:	0f b6       	in	r0, 0x3f	; 63
    2966:	f8 94       	cli
    2968:	de bf       	out	0x3e, r29	; 62
    296a:	0f be       	out	0x3f, r0	; 63
    296c:	cd bf       	out	0x3d, r28	; 61
    296e:	18 2f       	mov	r17, r24
    2970:	09 2f       	mov	r16, r25
	CharStream char_stream_send;
	NMX_uint8  pIns_Val[3];

	// Step 1: Disable Write protection
	FlashWriteEnable();
    2972:	0e 94 8f 04 	call	0x91e	; 0x91e <FlashWriteEnable>

	// Step 2: Initialize the data (i.e. Instruction & value) packet to be sent serially
	char_stream_send.length = 3;
    2976:	83 e0       	ldi	r24, 0x03	; 3
    2978:	90 e0       	ldi	r25, 0x00	; 0
    297a:	a0 e0       	ldi	r26, 0x00	; 0
    297c:	b0 e0       	ldi	r27, 0x00	; 0
    297e:	8b 83       	std	Y+3, r24	; 0x03
    2980:	9c 83       	std	Y+4, r25	; 0x04
    2982:	ad 83       	std	Y+5, r26	; 0x05
    2984:	be 83       	std	Y+6, r27	; 0x06
	char_stream_send.pChar  = pIns_Val;
    2986:	ce 01       	movw	r24, r28
    2988:	07 96       	adiw	r24, 0x07	; 7
    298a:	9a 83       	std	Y+2, r25	; 0x02
    298c:	89 83       	std	Y+1, r24	; 0x01
	pIns_Val[0] = SPI_FLASH_INS_WRNVCR;
    298e:	81 eb       	ldi	r24, 0xB1	; 177
    2990:	8f 83       	std	Y+7, r24	; 0x07
	pIns_Val[1] = (ucNVConfigurationRegister >> 8)& 0xFF;
    2992:	08 87       	std	Y+8, r16	; 0x08
	pIns_Val[2] = ucNVConfigurationRegister & 0xFF;
    2994:	19 87       	std	Y+9, r17	; 0x09

	// Step 3: Send the packet serially
	Serialize_SPI(&char_stream_send,
    2996:	23 e0       	ldi	r18, 0x03	; 3
    2998:	41 e0       	ldi	r20, 0x01	; 1
    299a:	60 e0       	ldi	r22, 0x00	; 0
    299c:	70 e0       	ldi	r23, 0x00	; 0
    299e:	ce 01       	movw	r24, r28
    29a0:	01 96       	adiw	r24, 0x01	; 1
    29a2:	53 d3       	rcall	.+1702   	; 0x304a <Serialize_SPI>
	              NULL_PTR,
	              OpsWakeUp,
	              OpsEndTransfer);

	// Step 4: Wait until the operation completes or a timeout occurs.
	return WAIT_TILL_Instruction_EXECUTION_COMPLETE(1);
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	95 db       	rcall	.-2262   	; 0x20d4 <WAIT_TILL_Instruction_EXECUTION_COMPLETE>
}
    29aa:	29 96       	adiw	r28, 0x09	; 9
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	f8 94       	cli
    29b0:	de bf       	out	0x3e, r29	; 62
    29b2:	0f be       	out	0x3f, r0	; 63
    29b4:	cd bf       	out	0x3d, r28	; 61
    29b6:	df 91       	pop	r29
    29b8:	cf 91       	pop	r28
    29ba:	1f 91       	pop	r17
    29bc:	0f 91       	pop	r16
    29be:	08 95       	ret

000029c0 <FlashExit4ByteAddressMode>:
   Step 2: Initialize the data (i.e. Instruction & value) packet to be sent serially
   Step 3: Send the packet serially
   Step 4: Wait until the operation completes or a timeout occurs.
*******************************************************************************/
ReturnType FlashExit4ByteAddressMode(void)
{
    29c0:	1f 93       	push	r17
    29c2:	cf 93       	push	r28
    29c4:	df 93       	push	r29
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
    29ca:	28 97       	sbiw	r28, 0x08	; 8
    29cc:	0f b6       	in	r0, 0x3f	; 63
    29ce:	f8 94       	cli
    29d0:	de bf       	out	0x3e, r29	; 62
    29d2:	0f be       	out	0x3f, r0	; 63
    29d4:	cd bf       	out	0x3d, r28	; 61
	CharStream char_stream_send;
	NMX_uint8 cPER = SPI_FLASH_4B_MODE_EXIT;
    29d6:	89 ee       	ldi	r24, 0xE9	; 233
    29d8:	8f 83       	std	Y+7, r24	; 0x07
	ReturnType ret;
	NMX_uint8 flag;

#ifndef SUPPORT_N25Q_STEP_B
	FlashWriteEnable();
    29da:	0e 94 8f 04 	call	0x91e	; 0x91e <FlashWriteEnable>
#endif

	char_stream_send.length   = 1;
    29de:	81 e0       	ldi	r24, 0x01	; 1
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	a0 e0       	ldi	r26, 0x00	; 0
    29e4:	b0 e0       	ldi	r27, 0x00	; 0
    29e6:	8b 83       	std	Y+3, r24	; 0x03
    29e8:	9c 83       	std	Y+4, r25	; 0x04
    29ea:	ad 83       	std	Y+5, r26	; 0x05
    29ec:	be 83       	std	Y+6, r27	; 0x06
	char_stream_send.pChar    = &cPER;
    29ee:	ce 01       	movw	r24, r28
    29f0:	07 96       	adiw	r24, 0x07	; 7
    29f2:	9a 83       	std	Y+2, r25	; 0x02
    29f4:	89 83       	std	Y+1, r24	; 0x01

	Serialize_SPI(&char_stream_send,
    29f6:	23 e0       	ldi	r18, 0x03	; 3
    29f8:	41 e0       	ldi	r20, 0x01	; 1
    29fa:	60 e0       	ldi	r22, 0x00	; 0
    29fc:	70 e0       	ldi	r23, 0x00	; 0
    29fe:	06 97       	sbiw	r24, 0x06	; 6
    2a00:	24 d3       	rcall	.+1608   	; 0x304a <Serialize_SPI>
	              NULL_PTR,
	              OpsWakeUp,
	              OpsEndTransfer);

#ifdef DEBUG
	printf("EXIT 4-byte-addr mode\n");
    2a02:	8c e3       	ldi	r24, 0x3C	; 60
    2a04:	94 e0       	ldi	r25, 0x04	; 4
    2a06:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
#endif

	ret = WAIT_TILL_Instruction_EXECUTION_COMPLETE(1);
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	62 db       	rcall	.-2364   	; 0x20d4 <WAIT_TILL_Instruction_EXECUTION_COMPLETE>
    2a10:	18 2f       	mov	r17, r24

	/* verify current addr mode */
	fdo->GenOp.ReadFlagStatusRegister(&flag);
    2a12:	e0 91 d2 0d 	lds	r30, 0x0DD2
    2a16:	f0 91 d3 0d 	lds	r31, 0x0DD3
    2a1a:	e6 59       	subi	r30, 0x96	; 150
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	01 90       	ld	r0, Z+
    2a20:	f0 81       	ld	r31, Z
    2a22:	e0 2d       	mov	r30, r0
    2a24:	ce 01       	movw	r24, r28
    2a26:	08 96       	adiw	r24, 0x08	; 8
    2a28:	19 95       	eicall
	if (flag & 1)
    2a2a:	88 85       	ldd	r24, Y+8	; 0x08
    2a2c:	80 ff       	sbrs	r24, 0
    2a2e:	09 c0       	rjmp	.+18     	; 0x2a42 <FlashExit4ByteAddressMode+0x82>
		fdo->Desc.NumAddrByte = FLASH_4_BYTE_ADDR_MODE;
    2a30:	e0 91 d2 0d 	lds	r30, 0x0DD2
    2a34:	f0 91 d3 0d 	lds	r31, 0x0DD3
    2a38:	e9 5b       	subi	r30, 0xB9	; 185
    2a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a3c:	84 e0       	ldi	r24, 0x04	; 4
    2a3e:	80 83       	st	Z, r24
    2a40:	08 c0       	rjmp	.+16     	; 0x2a52 <FlashExit4ByteAddressMode+0x92>
	else
		fdo->Desc.NumAddrByte = FLASH_3_BYTE_ADDR_MODE;
    2a42:	e0 91 d2 0d 	lds	r30, 0x0DD2
    2a46:	f0 91 d3 0d 	lds	r31, 0x0DD3
    2a4a:	e9 5b       	subi	r30, 0xB9	; 185
    2a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a4e:	83 e0       	ldi	r24, 0x03	; 3
    2a50:	80 83       	st	Z, r24

	return ret;
}
    2a52:	81 2f       	mov	r24, r17
    2a54:	28 96       	adiw	r28, 0x08	; 8
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	f8 94       	cli
    2a5a:	de bf       	out	0x3e, r29	; 62
    2a5c:	0f be       	out	0x3f, r0	; 63
    2a5e:	cd bf       	out	0x3d, r28	; 61
    2a60:	df 91       	pop	r29
    2a62:	cf 91       	pop	r28
    2a64:	1f 91       	pop	r17
    2a66:	08 95       	ret

00002a68 <FlashOTPProgram>:

Pseudo Code:

*******************************************************************************/
ReturnType FlashOTPProgram(NMX_uint8 *pArray , NMX_uint32 udNrOfElementsInArray)
{
    2a68:	2f 92       	push	r2
    2a6a:	3f 92       	push	r3
    2a6c:	4f 92       	push	r4
    2a6e:	5f 92       	push	r5
    2a70:	6f 92       	push	r6
    2a72:	7f 92       	push	r7
    2a74:	8f 92       	push	r8
    2a76:	9f 92       	push	r9
    2a78:	af 92       	push	r10
    2a7a:	bf 92       	push	r11
    2a7c:	cf 92       	push	r12
    2a7e:	df 92       	push	r13
    2a80:	ef 92       	push	r14
    2a82:	ff 92       	push	r15
    2a84:	0f 93       	push	r16
    2a86:	1f 93       	push	r17
    2a88:	cf 93       	push	r28
    2a8a:	df 93       	push	r29
    2a8c:	cd b7       	in	r28, 0x3d	; 61
    2a8e:	de b7       	in	r29, 0x3e	; 62
    2a90:	2d 97       	sbiw	r28, 0x0d	; 13
    2a92:	0f b6       	in	r0, 0x3f	; 63
    2a94:	f8 94       	cli
    2a96:	de bf       	out	0x3e, r29	; 62
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	cd bf       	out	0x3d, r28	; 61
    2a9c:	8c 01       	movw	r16, r24
    2a9e:	4a 01       	movw	r8, r20
    2aa0:	5b 01       	movw	r10, r22

	// Step 8: Wait until the operation completes or a timeout occurs.
	ret = WAIT_TILL_Instruction_EXECUTION_COMPLETE(1);

	return ret;
}
    2aa2:	2d b7       	in	r18, 0x3d	; 61
    2aa4:	3e b7       	in	r19, 0x3e	; 62
    2aa6:	3d 87       	std	Y+13, r19	; 0x0d
    2aa8:	2c 87       	std	Y+12, r18	; 0x0c
ReturnType FlashOTPProgram(NMX_uint8 *pArray , NMX_uint32 udNrOfElementsInArray)
{
	CharStream char_stream_send;
	NMX_uint8 i;
	NMX_uint8 pIns_Addr[5];
	NMX_uint8 sentBuffer[fdo->Desc.FlashOTPSize+1];
    2aaa:	e0 91 d2 0d 	lds	r30, 0x0DD2
    2aae:	f0 91 d3 0d 	lds	r31, 0x0DD3
    2ab2:	41 a8       	ldd	r4, Z+49	; 0x31
    2ab4:	52 a8       	ldd	r5, Z+50	; 0x32
    2ab6:	63 a8       	ldd	r6, Z+51	; 0x33
    2ab8:	74 a8       	ldd	r7, Z+52	; 0x34
    2aba:	d3 01       	movw	r26, r6
    2abc:	c2 01       	movw	r24, r4
    2abe:	01 96       	adiw	r24, 0x01	; 1
    2ac0:	a1 1d       	adc	r26, r1
    2ac2:	b1 1d       	adc	r27, r1
    2ac4:	28 1b       	sub	r18, r24
    2ac6:	39 0b       	sbc	r19, r25
    2ac8:	0f b6       	in	r0, 0x3f	; 63
    2aca:	f8 94       	cli
    2acc:	3e bf       	out	0x3e, r19	; 62
    2ace:	0f be       	out	0x3f, r0	; 63
    2ad0:	2d bf       	out	0x3d, r18	; 61
    2ad2:	8d b7       	in	r24, 0x3d	; 61
    2ad4:	9e b7       	in	r25, 0x3e	; 62
    2ad6:	01 96       	adiw	r24, 0x01	; 1
    2ad8:	1c 01       	movw	r2, r24
    2ada:	bc 01       	movw	r22, r24
	NMX_uint32 udAddr;
	ReturnType ret;

	// Step 1: Validate address input
	if(udNrOfElementsInArray > fdo->Desc.FlashOTPSize)
    2adc:	48 14       	cp	r4, r8
    2ade:	59 04       	cpc	r5, r9
    2ae0:	6a 04       	cpc	r6, r10
    2ae2:	7b 04       	cpc	r7, r11
    2ae4:	08 f4       	brcc	.+2      	; 0x2ae8 <FlashOTPProgram+0x80>
    2ae6:	79 c0       	rjmp	.+242    	; 0x2bda <FlashOTPProgram+0x172>

	/* Address is always 0x000000 */
	udAddr = 0x000000;

	/* Output buffer (with user data within) is fixed to 65 elements */
	for(i=0; i<udNrOfElementsInArray; i++)
    2ae8:	81 14       	cp	r8, r1
    2aea:	91 04       	cpc	r9, r1
    2aec:	a1 04       	cpc	r10, r1
    2aee:	b1 04       	cpc	r11, r1
    2af0:	a9 f0       	breq	.+42     	; 0x2b1c <FlashOTPProgram+0xb4>
    2af2:	90 e0       	ldi	r25, 0x00	; 0
		sentBuffer[i] = pArray[i];
    2af4:	29 2f       	mov	r18, r25
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	fb 01       	movw	r30, r22
    2afa:	e2 0f       	add	r30, r18
    2afc:	f3 1f       	adc	r31, r19
    2afe:	d8 01       	movw	r26, r16
    2b00:	a2 0f       	add	r26, r18
    2b02:	b3 1f       	adc	r27, r19
    2b04:	8c 91       	ld	r24, X
    2b06:	80 83       	st	Z, r24

	/* Address is always 0x000000 */
	udAddr = 0x000000;

	/* Output buffer (with user data within) is fixed to 65 elements */
	for(i=0; i<udNrOfElementsInArray; i++)
    2b08:	9f 5f       	subi	r25, 0xFF	; 255
    2b0a:	c9 2e       	mov	r12, r25
    2b0c:	d1 2c       	mov	r13, r1
    2b0e:	e1 2c       	mov	r14, r1
    2b10:	f1 2c       	mov	r15, r1
    2b12:	c8 14       	cp	r12, r8
    2b14:	d9 04       	cpc	r13, r9
    2b16:	ea 04       	cpc	r14, r10
    2b18:	fb 04       	cpc	r15, r11
    2b1a:	60 f3       	brcs	.-40     	; 0x2af4 <FlashOTPProgram+0x8c>
		sentBuffer[i] = pArray[i];

	/* Fill the others bytes with 00 */
	for(i=udNrOfElementsInArray; i<fdo->Desc.FlashOTPSize; i++)
    2b1c:	98 2d       	mov	r25, r8
    2b1e:	a5 01       	movw	r20, r10
    2b20:	94 01       	movw	r18, r8
    2b22:	33 27       	eor	r19, r19
    2b24:	44 27       	eor	r20, r20
    2b26:	55 27       	eor	r21, r21
    2b28:	24 15       	cp	r18, r4
    2b2a:	35 05       	cpc	r19, r5
    2b2c:	46 05       	cpc	r20, r6
    2b2e:	57 05       	cpc	r21, r7
    2b30:	70 f4       	brcc	.+28     	; 0x2b4e <FlashOTPProgram+0xe6>
		sentBuffer[i] = 0x00;
    2b32:	fb 01       	movw	r30, r22
    2b34:	e9 0f       	add	r30, r25
    2b36:	f1 1d       	adc	r31, r1
    2b38:	10 82       	st	Z, r1
	/* Output buffer (with user data within) is fixed to 65 elements */
	for(i=0; i<udNrOfElementsInArray; i++)
		sentBuffer[i] = pArray[i];

	/* Fill the others bytes with 00 */
	for(i=udNrOfElementsInArray; i<fdo->Desc.FlashOTPSize; i++)
    2b3a:	9f 5f       	subi	r25, 0xFF	; 255
    2b3c:	c9 2e       	mov	r12, r25
    2b3e:	d1 2c       	mov	r13, r1
    2b40:	e1 2c       	mov	r14, r1
    2b42:	f1 2c       	mov	r15, r1
    2b44:	c4 14       	cp	r12, r4
    2b46:	d5 04       	cpc	r13, r5
    2b48:	e6 04       	cpc	r14, r6
    2b4a:	f7 04       	cpc	r15, r7
    2b4c:	90 f3       	brcs	.-28     	; 0x2b32 <FlashOTPProgram+0xca>
		sentBuffer[i] = 0x00;

	/* This is the byte 64, OTP Control byte (if bit 0 = 0 -> OTP Locked) */
	sentBuffer[fdo->Desc.FlashOTPSize] = 0;
    2b4e:	f1 01       	movw	r30, r2
    2b50:	e4 0d       	add	r30, r4
    2b52:	f5 1d       	adc	r31, r5
    2b54:	10 82       	st	Z, r1

	// Step 2: Check whether any previous Write, Program or Erase cycle is on-going
	if(IsFlashBusy())
    2b56:	50 d9       	rcall	.-3424   	; 0x1df8 <IsFlashBusy>
    2b58:	81 11       	cpse	r24, r1
    2b5a:	41 c0       	rjmp	.+130    	; 0x2bde <FlashOTPProgram+0x176>
		return Flash_OperationOngoing;

	// Step 3: Disable Write protection
	fdo->GenOp.WriteEnable();
    2b5c:	e0 91 d2 0d 	lds	r30, 0x0DD2
    2b60:	f0 91 d3 0d 	lds	r31, 0x0DD3
    2b64:	e6 5a       	subi	r30, 0xA6	; 166
    2b66:	ff 4f       	sbci	r31, 0xFF	; 255
    2b68:	01 90       	ld	r0, Z+
    2b6a:	f0 81       	ld	r31, Z
    2b6c:	e0 2d       	mov	r30, r0
    2b6e:	19 95       	eicall

	// Step 4: Initialize the data (Instruction & address only) packet to be sent serially
	char_stream_send.length   = fdo->Desc.NumAddrByte + 1;
    2b70:	e0 91 d2 0d 	lds	r30, 0x0DD2
    2b74:	f0 91 d3 0d 	lds	r31, 0x0DD3
    2b78:	e9 5b       	subi	r30, 0xB9	; 185
    2b7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b7c:	80 81       	ld	r24, Z
    2b7e:	90 e0       	ldi	r25, 0x00	; 0
    2b80:	01 96       	adiw	r24, 0x01	; 1
    2b82:	09 2e       	mov	r0, r25
    2b84:	00 0c       	add	r0, r0
    2b86:	aa 0b       	sbc	r26, r26
    2b88:	bb 0b       	sbc	r27, r27
    2b8a:	8b 83       	std	Y+3, r24	; 0x03
    2b8c:	9c 83       	std	Y+4, r25	; 0x04
    2b8e:	ad 83       	std	Y+5, r26	; 0x05
    2b90:	be 83       	std	Y+6, r27	; 0x06
	char_stream_send.pChar    = pIns_Addr;
    2b92:	ae 01       	movw	r20, r28
    2b94:	49 5f       	subi	r20, 0xF9	; 249
    2b96:	5f 4f       	sbci	r21, 0xFF	; 255
    2b98:	5a 83       	std	Y+2, r21	; 0x02
    2b9a:	49 83       	std	Y+1, r20	; 0x01

	pIns_Addr[0]              = SPI_FLASH_INS_PROTP;
    2b9c:	82 e4       	ldi	r24, 0x42	; 66
    2b9e:	8f 83       	std	Y+7, r24	; 0x07

	/* Always use 3 bytes address and address is 0x000000 */
	fill_addr_vect(udAddr, pIns_Addr, 3);
    2ba0:	23 e0       	ldi	r18, 0x03	; 3
    2ba2:	60 e0       	ldi	r22, 0x00	; 0
    2ba4:	70 e0       	ldi	r23, 0x00	; 0
    2ba6:	cb 01       	movw	r24, r22
    2ba8:	93 d9       	rcall	.-3290   	; 0x1ed0 <fill_addr_vect>

	// Step 5: Send the packet (Instruction & address only) serially
	Serialize_SPI(&char_stream_send,
    2baa:	22 e0       	ldi	r18, 0x02	; 2
    2bac:	41 e0       	ldi	r20, 0x01	; 1
    2bae:	60 e0       	ldi	r22, 0x00	; 0
    2bb0:	70 e0       	ldi	r23, 0x00	; 0
    2bb2:	ce 01       	movw	r24, r28
    2bb4:	01 96       	adiw	r24, 0x01	; 1
    2bb6:	49 d2       	rcall	.+1170   	; 0x304a <Serialize_SPI>
	              NULL_PTR,
	              OpsWakeUp,
	              OpsInitTransfer);

	// Step 6: Initialize the data (data to be programmed) packet to be sent serially
	char_stream_send.length   = udNrOfElementsInArray;
    2bb8:	8b 82       	std	Y+3, r8	; 0x03
    2bba:	9c 82       	std	Y+4, r9	; 0x04
    2bbc:	ad 82       	std	Y+5, r10	; 0x05
    2bbe:	be 82       	std	Y+6, r11	; 0x06
	char_stream_send.pChar    = pArray;
    2bc0:	1a 83       	std	Y+2, r17	; 0x02
    2bc2:	09 83       	std	Y+1, r16	; 0x01

	// Step 7: Send the packet (data to be programmed) serially
	Serialize_SPI(&char_stream_send,
    2bc4:	23 e0       	ldi	r18, 0x03	; 3
    2bc6:	41 e0       	ldi	r20, 0x01	; 1
    2bc8:	60 e0       	ldi	r22, 0x00	; 0
    2bca:	70 e0       	ldi	r23, 0x00	; 0
    2bcc:	ce 01       	movw	r24, r28
    2bce:	01 96       	adiw	r24, 0x01	; 1
    2bd0:	3c d2       	rcall	.+1144   	; 0x304a <Serialize_SPI>
	              NULL_PTR,
	              OpsWakeUp,
	              OpsEndTransfer);

	// Step 8: Wait until the operation completes or a timeout occurs.
	ret = WAIT_TILL_Instruction_EXECUTION_COMPLETE(1);
    2bd2:	81 e0       	ldi	r24, 0x01	; 1
    2bd4:	90 e0       	ldi	r25, 0x00	; 0
    2bd6:	7e da       	rcall	.-2820   	; 0x20d4 <WAIT_TILL_Instruction_EXECUTION_COMPLETE>

	return ret;
    2bd8:	03 c0       	rjmp	.+6      	; 0x2be0 <FlashOTPProgram+0x178>
	NMX_uint32 udAddr;
	ReturnType ret;

	// Step 1: Validate address input
	if(udNrOfElementsInArray > fdo->Desc.FlashOTPSize)
		return Flash_AddressInvalid;
    2bda:	81 e0       	ldi	r24, 0x01	; 1
    2bdc:	01 c0       	rjmp	.+2      	; 0x2be0 <FlashOTPProgram+0x178>
	/* This is the byte 64, OTP Control byte (if bit 0 = 0 -> OTP Locked) */
	sentBuffer[fdo->Desc.FlashOTPSize] = 0;

	// Step 2: Check whether any previous Write, Program or Erase cycle is on-going
	if(IsFlashBusy())
		return Flash_OperationOngoing;
    2bde:	89 e0       	ldi	r24, 0x09	; 9

	// Step 8: Wait until the operation completes or a timeout occurs.
	ret = WAIT_TILL_Instruction_EXECUTION_COMPLETE(1);

	return ret;
}
    2be0:	2c 85       	ldd	r18, Y+12	; 0x0c
    2be2:	3d 85       	ldd	r19, Y+13	; 0x0d
    2be4:	0f b6       	in	r0, 0x3f	; 63
    2be6:	f8 94       	cli
    2be8:	3e bf       	out	0x3e, r19	; 62
    2bea:	0f be       	out	0x3f, r0	; 63
    2bec:	2d bf       	out	0x3d, r18	; 61
    2bee:	2d 96       	adiw	r28, 0x0d	; 13
    2bf0:	0f b6       	in	r0, 0x3f	; 63
    2bf2:	f8 94       	cli
    2bf4:	de bf       	out	0x3e, r29	; 62
    2bf6:	0f be       	out	0x3f, r0	; 63
    2bf8:	cd bf       	out	0x3d, r28	; 61
    2bfa:	df 91       	pop	r29
    2bfc:	cf 91       	pop	r28
    2bfe:	1f 91       	pop	r17
    2c00:	0f 91       	pop	r16
    2c02:	ff 90       	pop	r15
    2c04:	ef 90       	pop	r14
    2c06:	df 90       	pop	r13
    2c08:	cf 90       	pop	r12
    2c0a:	bf 90       	pop	r11
    2c0c:	af 90       	pop	r10
    2c0e:	9f 90       	pop	r9
    2c10:	8f 90       	pop	r8
    2c12:	7f 90       	pop	r7
    2c14:	6f 90       	pop	r6
    2c16:	5f 90       	pop	r5
    2c18:	4f 90       	pop	r4
    2c1a:	3f 90       	pop	r3
    2c1c:	2f 90       	pop	r2
    2c1e:	08 95       	ret

00002c20 <K30_FctnInit>:
	K30_getType
};

void K30_FctnInit(K30Sensor *this)
{
	this->inherited.vmt = &K30_vmt;
    2c20:	2e e4       	ldi	r18, 0x4E	; 78
    2c22:	32 e0       	ldi	r19, 0x02	; 2
    2c24:	fc 01       	movw	r30, r24
    2c26:	35 87       	std	Z+13, r19	; 0x0d
    2c28:	24 87       	std	Z+12, r18	; 0x0c
    2c2a:	08 95       	ret

00002c2c <K30_Configure>:

int K30_Configure(K30Sensor *this )
{
	// virtual function
	return 0;
}
    2c2c:	80 e0       	ldi	r24, 0x00	; 0
    2c2e:	90 e0       	ldi	r25, 0x00	; 0
    2c30:	08 95       	ret

00002c32 <K30_Error>:

int K30_Error(K30Sensor *this )
{
	// virtual function
	return 0;
}
    2c32:	80 e0       	ldi	r24, 0x00	; 0
    2c34:	90 e0       	ldi	r25, 0x00	; 0
    2c36:	08 95       	ret

00002c38 <K30_VTinit>:
void K30_VTinit( K30Sensor* this)
{
	this->inherited.abstract.device_vt = &K30_abstract_vmt;
    2c38:	26 e4       	ldi	r18, 0x46	; 70
    2c3a:	32 e0       	ldi	r19, 0x02	; 2
    2c3c:	fc 01       	movw	r30, r24
    2c3e:	31 83       	std	Z+1, r19	; 0x01
    2c40:	20 83       	st	Z, r18
    2c42:	08 95       	ret

00002c44 <K30_reset>:

int K30_reset( K30Sensor* this)
{
	// virtual function
	return 0;
}
    2c44:	80 e0       	ldi	r24, 0x00	; 0
    2c46:	90 e0       	ldi	r25, 0x00	; 0
    2c48:	08 95       	ret

00002c4a <K30_getType>:

int K30_getType(K30Sensor* this)
{
	return TYPE_SENSOR;
}
    2c4a:	83 e0       	ldi	r24, 0x03	; 3
    2c4c:	90 e0       	ldi	r25, 0x00	; 0
    2c4e:	08 95       	ret

00002c50 <K30_Request>:
	return 0;
}

int K30_Request(K30Sensor *this )
{
	return K30_delaytime();
    2c50:	0c 94 4f 03 	jmp	0x69e	; 0x69e <K30_delaytime>
	if(status!=TWI_SENT_ACK) return 0;
	TWI_Stop();
	_delay_ms(10);
	return 0;
	*/
}
    2c54:	08 95       	ret

00002c56 <K30_Collect>:

int K30_Collect(K30Sensor *this )
{
	double K30Data;
	K30Data = K30_readCO2();
    2c56:	0e 94 67 03 	call	0x6ce	; 0x6ce <K30_readCO2>
    2c5a:	bc 01       	movw	r22, r24
    2c5c:	99 0f       	add	r25, r25
    2c5e:	88 0b       	sbc	r24, r24
    2c60:	99 0b       	sbc	r25, r25
    2c62:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__floatsisf>
	printf("\tK30 data is %lf\n",K30Data);
    2c66:	9f 93       	push	r25
    2c68:	8f 93       	push	r24
    2c6a:	7f 93       	push	r23
    2c6c:	6f 93       	push	r22
    2c6e:	82 e5       	ldi	r24, 0x52	; 82
    2c70:	94 e0       	ldi	r25, 0x04	; 4
    2c72:	9f 93       	push	r25
    2c74:	8f 93       	push	r24
    2c76:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    2c7a:	0f 90       	pop	r0
    2c7c:	0f 90       	pop	r0
    2c7e:	0f 90       	pop	r0
    2c80:	0f 90       	pop	r0
    2c82:	0f 90       	pop	r0
    2c84:	0f 90       	pop	r0
	sum = buffer[0] + buffer[1] + buffer[2];
	if(sum==buffer[3]){return val;}
		printf_P()
	else{return 0;}
*/
}
    2c86:	08 95       	ret

00002c88 <K30_init>:
}

int K30_init( K30Sensor* this)
{
	// TWI_Init(200000);
	printf("K30 Sensor Init\n");
    2c88:	84 e6       	ldi	r24, 0x64	; 100
    2c8a:	94 e0       	ldi	r25, 0x04	; 4
    2c8c:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
	return 0;
}
    2c90:	80 e0       	ldi	r24, 0x00	; 0
    2c92:	90 e0       	ldi	r25, 0x00	; 0
    2c94:	08 95       	ret

00002c96 <New_K30_Sensor>:
	return TYPE_SENSOR;
}


K30Sensor* New_K30_Sensor( int num, int NumData)
{
    2c96:	ef 92       	push	r14
    2c98:	ff 92       	push	r15
    2c9a:	0f 93       	push	r16
    2c9c:	1f 93       	push	r17
    2c9e:	cf 93       	push	r28
    2ca0:	df 93       	push	r29
    2ca2:	7c 01       	movw	r14, r24
    2ca4:	8b 01       	movw	r16, r22
	K30Sensor *p = malloc(sizeof(K30Sensor));
    2ca6:	8e e0       	ldi	r24, 0x0E	; 14
    2ca8:	90 e0       	ldi	r25, 0x00	; 0
    2caa:	0e 94 c2 32 	call	0x6584	; 0x6584 <malloc>
    2cae:	ec 01       	movw	r28, r24
	// virtual function
	return 0;
}
void K30_VTinit( K30Sensor* this)
{
	this->inherited.abstract.device_vt = &K30_abstract_vmt;
    2cb0:	86 e4       	ldi	r24, 0x46	; 70
    2cb2:	92 e0       	ldi	r25, 0x02	; 2
    2cb4:	99 83       	std	Y+1, r25	; 0x01
    2cb6:	88 83       	st	Y, r24
	K30_getType
};

void K30_FctnInit(K30Sensor *this)
{
	this->inherited.vmt = &K30_vmt;
    2cb8:	8e e4       	ldi	r24, 0x4E	; 78
    2cba:	92 e0       	ldi	r25, 0x02	; 2
    2cbc:	9d 87       	std	Y+13, r25	; 0x0d
    2cbe:	8c 87       	std	Y+12, r24	; 0x0c
K30Sensor* New_K30_Sensor( int num, int NumData)
{
	K30Sensor *p = malloc(sizeof(K30Sensor));
	K30_VTinit( p );
	K30_FctnInit( p );
	p->inherited.getStartNum = fctn_getStartNum;
    2cc0:	8e e1       	ldi	r24, 0x1E	; 30
    2cc2:	91 e2       	ldi	r25, 0x21	; 33
    2cc4:	99 87       	std	Y+9, r25	; 0x09
    2cc6:	88 87       	std	Y+8, r24	; 0x08
	p->inherited.getEndNum = fctn_getEndNum;
    2cc8:	82 e2       	ldi	r24, 0x22	; 34
    2cca:	91 e2       	ldi	r25, 0x21	; 33
    2ccc:	9b 87       	std	Y+11, r25	; 0x0b
    2cce:	8a 87       	std	Y+10, r24	; 0x0a
	
	p->inherited.test_num = num;
    2cd0:	fb 82       	std	Y+3, r15	; 0x03
    2cd2:	ea 82       	std	Y+2, r14	; 0x02
	p->inherited.NumOfData = NumData;
    2cd4:	1f 83       	std	Y+7, r17	; 0x07
    2cd6:	0e 83       	std	Y+6, r16	; 0x06
	p->inherited.StartNum = SensorDataCount;
    2cd8:	80 91 7a 0d 	lds	r24, 0x0D7A
    2cdc:	90 91 7b 0d 	lds	r25, 0x0D7B
    2ce0:	9d 83       	std	Y+5, r25	; 0x05
    2ce2:	8c 83       	std	Y+4, r24	; 0x04
	SensorDataCount += NumData;
    2ce4:	b8 01       	movw	r22, r16
    2ce6:	68 0f       	add	r22, r24
    2ce8:	79 1f       	adc	r23, r25
    2cea:	70 93 7b 0d 	sts	0x0D7B, r23
    2cee:	60 93 7a 0d 	sts	0x0D7A, r22
	printf("SensorDataCount %d\n",SensorDataCount);
    2cf2:	7f 93       	push	r23
    2cf4:	6f 93       	push	r22
    2cf6:	84 e7       	ldi	r24, 0x74	; 116
    2cf8:	94 e0       	ldi	r25, 0x04	; 4
    2cfa:	9f 93       	push	r25
    2cfc:	8f 93       	push	r24
    2cfe:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
	
	return p;
    2d02:	0f 90       	pop	r0
    2d04:	0f 90       	pop	r0
    2d06:	0f 90       	pop	r0
    2d08:	0f 90       	pop	r0
}
    2d0a:	ce 01       	movw	r24, r28
    2d0c:	df 91       	pop	r29
    2d0e:	cf 91       	pop	r28
    2d10:	1f 91       	pop	r17
    2d12:	0f 91       	pop	r16
    2d14:	ff 90       	pop	r15
    2d16:	ef 90       	pop	r14
    2d18:	08 95       	ret

00002d1a <ADC_Init>:

/*************************************************************************//**
  @brief Initializes the ADC
*****************************************************************************/
void ADC_Init(void) {
	ADCSRA = (1<<ADEN)|(4<<ADPS0); //enables the ADC module, CPU clock prescale=16
    2d1a:	84 e8       	ldi	r24, 0x84	; 132
    2d1c:	80 93 7a 00 	sts	0x007A, r24
	
	ADCSRC = 0x05|(1<<ADTHT0)|(1<<ADTHT1); //ADSUT=5
    2d20:	85 ec       	ldi	r24, 0xC5	; 197
    2d22:	80 93 77 00 	sts	0x0077, r24
	while((ADCSRB&(1<<AVDDOK))==0);
    2d26:	eb e7       	ldi	r30, 0x7B	; 123
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	80 81       	ld	r24, Z
    2d2c:	88 23       	and	r24, r24
    2d2e:	ec f7       	brge	.-6      	; 0x2d2a <ADC_Init+0x10>
}
    2d30:	08 95       	ret

00002d32 <__vector_15>:

/*************************************************************************//**
  @brief Timer Interrupt Service Routine
*****************************************************************************/
ISR(TIMER2_OVF_vect)
{
    2d32:	1f 92       	push	r1
    2d34:	0f 92       	push	r0
    2d36:	0f b6       	in	r0, 0x3f	; 63
    2d38:	0f 92       	push	r0
    2d3a:	11 24       	eor	r1, r1
    2d3c:	0b b6       	in	r0, 0x3b	; 59
    2d3e:	0f 92       	push	r0
    2d40:	2f 93       	push	r18
    2d42:	3f 93       	push	r19
    2d44:	4f 93       	push	r20
    2d46:	5f 93       	push	r21
    2d48:	6f 93       	push	r22
    2d4a:	7f 93       	push	r23
    2d4c:	8f 93       	push	r24
    2d4e:	9f 93       	push	r25
    2d50:	af 93       	push	r26
    2d52:	bf 93       	push	r27
    2d54:	ef 93       	push	r30
    2d56:	ff 93       	push	r31
	timer_usage ++;
    2d58:	80 91 60 08 	lds	r24, 0x0860
    2d5c:	90 91 61 08 	lds	r25, 0x0861
    2d60:	01 96       	adiw	r24, 0x01	; 1
    2d62:	90 93 61 08 	sts	0x0861, r25
    2d66:	80 93 60 08 	sts	0x0860, r24
	// printf("count1 = %d\n",timer_usage);
	printf("Timestamp : %ld\n",(TimeStamp));
    2d6a:	80 91 5f 08 	lds	r24, 0x085F
    2d6e:	8f 93       	push	r24
    2d70:	80 91 5e 08 	lds	r24, 0x085E
    2d74:	8f 93       	push	r24
    2d76:	80 91 5d 08 	lds	r24, 0x085D
    2d7a:	8f 93       	push	r24
    2d7c:	80 91 5c 08 	lds	r24, 0x085C
    2d80:	8f 93       	push	r24
    2d82:	88 e8       	ldi	r24, 0x88	; 136
    2d84:	94 e0       	ldi	r25, 0x04	; 4
    2d86:	9f 93       	push	r25
    2d88:	8f 93       	push	r24
    2d8a:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
	handle_timeoutq_event();	
    2d8e:	f7 d6       	rcall	.+3566   	; 0x3b7e <handle_timeoutq_event>
    2d90:	0f 90       	pop	r0
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	0f 90       	pop	r0
    2d98:	0f 90       	pop	r0
    2d9a:	0f 90       	pop	r0
}
    2d9c:	ff 91       	pop	r31
    2d9e:	ef 91       	pop	r30
    2da0:	bf 91       	pop	r27
    2da2:	af 91       	pop	r26
    2da4:	9f 91       	pop	r25
    2da6:	8f 91       	pop	r24
    2da8:	7f 91       	pop	r23
    2daa:	6f 91       	pop	r22
    2dac:	5f 91       	pop	r21
    2dae:	4f 91       	pop	r20
    2db0:	3f 91       	pop	r19
    2db2:	2f 91       	pop	r18
    2db4:	0f 90       	pop	r0
    2db6:	0b be       	out	0x3b, r0	; 59
    2db8:	0f 90       	pop	r0
    2dba:	0f be       	out	0x3f, r0	; 63
    2dbc:	0f 90       	pop	r0
    2dbe:	1f 90       	pop	r1
    2dc0:	18 95       	reti

00002dc2 <init_Event_Timer>:

/* Initialization Routine Example 3 : Timer 2 Async operation */
/* Clock for Timer 2 is taken from crystal connected to TOSC pins */
void init_Event_Timer(void)
{
	TimeStamp = 0;
    2dc2:	10 92 5c 08 	sts	0x085C, r1
    2dc6:	10 92 5d 08 	sts	0x085D, r1
    2dca:	10 92 5e 08 	sts	0x085E, r1
    2dce:	10 92 5f 08 	sts	0x085F, r1
	timer_usage = 0;
    2dd2:	10 92 61 08 	sts	0x0861, r1
    2dd6:	10 92 60 08 	sts	0x0860, r1
	/* Select clock source as crystal on TOSCn pins */
	ASSR |= 1 << AS2;
    2dda:	e6 eb       	ldi	r30, 0xB6	; 182
    2ddc:	f0 e0       	ldi	r31, 0x00	; 0
    2dde:	80 81       	ld	r24, Z
    2de0:	80 62       	ori	r24, 0x20	; 32
    2de2:	80 83       	st	Z, r24
	
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
    2de4:	80 81       	ld	r24, Z
    2de6:	8f 71       	andi	r24, 0x1F	; 31
    2de8:	e9 f7       	brne	.-6      	; 0x2de4 <init_Event_Timer+0x22>
	
	/* Stop timer 2 */
	TCCR2B = 0x00;
    2dea:	10 92 b1 00 	sts	0x00B1, r1
    2dee:	08 95       	ret

00002df0 <general_set_timer>:
	// TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
}


void general_set_timer( int32_t period_number )
{
    2df0:	cf 92       	push	r12
    2df2:	df 92       	push	r13
    2df4:	ef 92       	push	r14
    2df6:	ff 92       	push	r15
    2df8:	6b 01       	movw	r12, r22
    2dfa:	7c 01       	movw	r14, r24
	// printf("debug %d\n",period_number);
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
    2dfc:	e6 eb       	ldi	r30, 0xB6	; 182
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	80 81       	ld	r24, Z
    2e02:	8f 71       	andi	r24, 0x1F	; 31
    2e04:	e9 f7       	brne	.-6      	; 0x2e00 <general_set_timer+0x10>
	/* Stop timer 2 */
	TCCR2B = 0x00;
    2e06:	10 92 b1 00 	sts	0x00B1, r1
	
	
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
    2e0a:	e6 eb       	ldi	r30, 0xB6	; 182
    2e0c:	f0 e0       	ldi	r31, 0x00	; 0
    2e0e:	80 81       	ld	r24, Z
    2e10:	8f 71       	andi	r24, 0x1F	; 31
    2e12:	e9 f7       	brne	.-6      	; 0x2e0e <general_set_timer+0x1e>
	 *  1    1    0     256		2s/256
	 *  1    1    1    1024		8s/256
	 */
	// Resolution
	// 0.25s/256
	if( period_number <= 250 )
    2e14:	8b ef       	ldi	r24, 0xFB	; 251
    2e16:	c8 16       	cp	r12, r24
    2e18:	d1 04       	cpc	r13, r1
    2e1a:	e1 04       	cpc	r14, r1
    2e1c:	f1 04       	cpc	r15, r1
    2e1e:	ec f4       	brge	.+58     	; 0x2e5a <general_set_timer+0x6a>
	{
		temp = 256 - (int32_t) ( 256.0/250.0 * period_number);
    2e20:	c7 01       	movw	r24, r14
    2e22:	b6 01       	movw	r22, r12
    2e24:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__floatsisf>
    2e28:	2f e6       	ldi	r18, 0x6F	; 111
    2e2a:	32 e1       	ldi	r19, 0x12	; 18
    2e2c:	43 e8       	ldi	r20, 0x83	; 131
    2e2e:	5f e3       	ldi	r21, 0x3F	; 63
    2e30:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__mulsf3>
    2e34:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
    2e38:	20 e0       	ldi	r18, 0x00	; 0
    2e3a:	31 e0       	ldi	r19, 0x01	; 1
    2e3c:	c9 01       	movw	r24, r18
    2e3e:	86 1b       	sub	r24, r22
    2e40:	97 0b       	sbc	r25, r23
    2e42:	8f 3f       	cpi	r24, 0xFF	; 255
    2e44:	91 05       	cpc	r25, r1
    2e46:	19 f0       	breq	.+6      	; 0x2e4e <general_set_timer+0x5e>
    2e48:	14 f0       	brlt	.+4      	; 0x2e4e <general_set_timer+0x5e>
    2e4a:	8f ef       	ldi	r24, 0xFF	; 255
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
    2e4e:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS21)|(1<<CS20);
    2e52:	83 e0       	ldi	r24, 0x03	; 3
    2e54:	80 93 b1 00 	sts	0x00B1, r24
    2e58:	94 c0       	rjmp	.+296    	; 0x2f82 <general_set_timer+0x192>
	}
	// Resolution
	// 0.5s/256
	else if ( period_number <= 500 )
    2e5a:	85 ef       	ldi	r24, 0xF5	; 245
    2e5c:	c8 16       	cp	r12, r24
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	d8 06       	cpc	r13, r24
    2e62:	e1 04       	cpc	r14, r1
    2e64:	f1 04       	cpc	r15, r1
    2e66:	ec f4       	brge	.+58     	; 0x2ea2 <general_set_timer+0xb2>
	{
		temp = 256 - (int32_t) ( 256.0/500.0 * period_number);
    2e68:	c7 01       	movw	r24, r14
    2e6a:	b6 01       	movw	r22, r12
    2e6c:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__floatsisf>
    2e70:	2f e6       	ldi	r18, 0x6F	; 111
    2e72:	32 e1       	ldi	r19, 0x12	; 18
    2e74:	43 e0       	ldi	r20, 0x03	; 3
    2e76:	5f e3       	ldi	r21, 0x3F	; 63
    2e78:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__mulsf3>
    2e7c:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	31 e0       	ldi	r19, 0x01	; 1
    2e84:	c9 01       	movw	r24, r18
    2e86:	86 1b       	sub	r24, r22
    2e88:	97 0b       	sbc	r25, r23
    2e8a:	8f 3f       	cpi	r24, 0xFF	; 255
    2e8c:	91 05       	cpc	r25, r1
    2e8e:	19 f0       	breq	.+6      	; 0x2e96 <general_set_timer+0xa6>
    2e90:	14 f0       	brlt	.+4      	; 0x2e96 <general_set_timer+0xa6>
    2e92:	8f ef       	ldi	r24, 0xFF	; 255
    2e94:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
    2e96:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22);
    2e9a:	84 e0       	ldi	r24, 0x04	; 4
    2e9c:	80 93 b1 00 	sts	0x00B1, r24
    2ea0:	70 c0       	rjmp	.+224    	; 0x2f82 <general_set_timer+0x192>
	}
	// Resolution
	// 1s/256
	else if ( period_number <= 1000 )
    2ea2:	89 ee       	ldi	r24, 0xE9	; 233
    2ea4:	c8 16       	cp	r12, r24
    2ea6:	83 e0       	ldi	r24, 0x03	; 3
    2ea8:	d8 06       	cpc	r13, r24
    2eaa:	e1 04       	cpc	r14, r1
    2eac:	f1 04       	cpc	r15, r1
    2eae:	ec f4       	brge	.+58     	; 0x2eea <general_set_timer+0xfa>
	{
		temp = 256 - (int32_t) ( 256.0/1000.0 * period_number);
    2eb0:	c7 01       	movw	r24, r14
    2eb2:	b6 01       	movw	r22, r12
    2eb4:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__floatsisf>
    2eb8:	2f e6       	ldi	r18, 0x6F	; 111
    2eba:	32 e1       	ldi	r19, 0x12	; 18
    2ebc:	43 e8       	ldi	r20, 0x83	; 131
    2ebe:	5e e3       	ldi	r21, 0x3E	; 62
    2ec0:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__mulsf3>
    2ec4:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
    2ec8:	20 e0       	ldi	r18, 0x00	; 0
    2eca:	31 e0       	ldi	r19, 0x01	; 1
    2ecc:	c9 01       	movw	r24, r18
    2ece:	86 1b       	sub	r24, r22
    2ed0:	97 0b       	sbc	r25, r23
    2ed2:	8f 3f       	cpi	r24, 0xFF	; 255
    2ed4:	91 05       	cpc	r25, r1
    2ed6:	19 f0       	breq	.+6      	; 0x2ede <general_set_timer+0xee>
    2ed8:	14 f0       	brlt	.+4      	; 0x2ede <general_set_timer+0xee>
    2eda:	8f ef       	ldi	r24, 0xFF	; 255
    2edc:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
    2ede:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS20);	
    2ee2:	85 e0       	ldi	r24, 0x05	; 5
    2ee4:	80 93 b1 00 	sts	0x00B1, r24
    2ee8:	4c c0       	rjmp	.+152    	; 0x2f82 <general_set_timer+0x192>
	}
	// Resolution
	// 2s/256
	else if ( period_number <= 2000 )
    2eea:	81 ed       	ldi	r24, 0xD1	; 209
    2eec:	c8 16       	cp	r12, r24
    2eee:	87 e0       	ldi	r24, 0x07	; 7
    2ef0:	d8 06       	cpc	r13, r24
    2ef2:	e1 04       	cpc	r14, r1
    2ef4:	f1 04       	cpc	r15, r1
    2ef6:	ec f4       	brge	.+58     	; 0x2f32 <general_set_timer+0x142>
	{
		temp = 256 - (int32_t) ( 256.0/2000.0 * period_number);
    2ef8:	c7 01       	movw	r24, r14
    2efa:	b6 01       	movw	r22, r12
    2efc:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__floatsisf>
    2f00:	2f e6       	ldi	r18, 0x6F	; 111
    2f02:	32 e1       	ldi	r19, 0x12	; 18
    2f04:	43 e0       	ldi	r20, 0x03	; 3
    2f06:	5e e3       	ldi	r21, 0x3E	; 62
    2f08:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__mulsf3>
    2f0c:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
    2f10:	20 e0       	ldi	r18, 0x00	; 0
    2f12:	31 e0       	ldi	r19, 0x01	; 1
    2f14:	c9 01       	movw	r24, r18
    2f16:	86 1b       	sub	r24, r22
    2f18:	97 0b       	sbc	r25, r23
    2f1a:	8f 3f       	cpi	r24, 0xFF	; 255
    2f1c:	91 05       	cpc	r25, r1
    2f1e:	19 f0       	breq	.+6      	; 0x2f26 <general_set_timer+0x136>
    2f20:	14 f0       	brlt	.+4      	; 0x2f26 <general_set_timer+0x136>
    2f22:	8f ef       	ldi	r24, 0xFF	; 255
    2f24:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
    2f26:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS21);	
    2f2a:	86 e0       	ldi	r24, 0x06	; 6
    2f2c:	80 93 b1 00 	sts	0x00B1, r24
    2f30:	28 c0       	rjmp	.+80     	; 0x2f82 <general_set_timer+0x192>
	}
	// Resolution
	// 8s/256
	else if ( period_number <= 8000 )
    2f32:	81 e4       	ldi	r24, 0x41	; 65
    2f34:	c8 16       	cp	r12, r24
    2f36:	8f e1       	ldi	r24, 0x1F	; 31
    2f38:	d8 06       	cpc	r13, r24
    2f3a:	e1 04       	cpc	r14, r1
    2f3c:	f1 04       	cpc	r15, r1
    2f3e:	ec f4       	brge	.+58     	; 0x2f7a <general_set_timer+0x18a>
	{
		t = (int32_t) ( 256.0/8000.0 * period_number);
    2f40:	c7 01       	movw	r24, r14
    2f42:	b6 01       	movw	r22, r12
    2f44:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__floatsisf>
    2f48:	2f e6       	ldi	r18, 0x6F	; 111
    2f4a:	32 e1       	ldi	r19, 0x12	; 18
    2f4c:	43 e0       	ldi	r20, 0x03	; 3
    2f4e:	5d e3       	ldi	r21, 0x3D	; 61
    2f50:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__mulsf3>
    2f54:	0e 94 7c 2d 	call	0x5af8	; 0x5af8 <__fixsfsi>
		temp = 256 - t;
		temp = temp > 255 ? 255 : temp ;
    2f58:	20 e0       	ldi	r18, 0x00	; 0
    2f5a:	31 e0       	ldi	r19, 0x01	; 1
    2f5c:	c9 01       	movw	r24, r18
    2f5e:	86 1b       	sub	r24, r22
    2f60:	97 0b       	sbc	r25, r23
    2f62:	8f 3f       	cpi	r24, 0xFF	; 255
    2f64:	91 05       	cpc	r25, r1
    2f66:	19 f0       	breq	.+6      	; 0x2f6e <general_set_timer+0x17e>
    2f68:	14 f0       	brlt	.+4      	; 0x2f6e <general_set_timer+0x17e>
    2f6a:	8f ef       	ldi	r24, 0xFF	; 255
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
    2f6e:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
    2f72:	87 e0       	ldi	r24, 0x07	; 7
    2f74:	80 93 b1 00 	sts	0x00B1, r24
    2f78:	04 c0       	rjmp	.+8      	; 0x2f82 <general_set_timer+0x192>
	}
	else
	{
		printf("Timer exceeds max\n");
    2f7a:	89 e9       	ldi	r24, 0x99	; 153
    2f7c:	94 e0       	ldi	r25, 0x04	; 4
    2f7e:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
	}

	/* start timer 2 */
	TCCR2A = 0x00;
    2f82:	10 92 b0 00 	sts	0x00B0, r1
	TimeStamp += period_number;
    2f86:	80 91 5c 08 	lds	r24, 0x085C
    2f8a:	90 91 5d 08 	lds	r25, 0x085D
    2f8e:	a0 91 5e 08 	lds	r26, 0x085E
    2f92:	b0 91 5f 08 	lds	r27, 0x085F
    2f96:	c8 0e       	add	r12, r24
    2f98:	d9 1e       	adc	r13, r25
    2f9a:	ea 1e       	adc	r14, r26
    2f9c:	fb 1e       	adc	r15, r27
    2f9e:	c0 92 5c 08 	sts	0x085C, r12
    2fa2:	d0 92 5d 08 	sts	0x085D, r13
    2fa6:	e0 92 5e 08 	sts	0x085E, r14
    2faa:	f0 92 5f 08 	sts	0x085F, r15
}
    2fae:	ff 90       	pop	r15
    2fb0:	ef 90       	pop	r14
    2fb2:	df 90       	pop	r13
    2fb4:	cf 90       	pop	r12
    2fb6:	08 95       	ret

00002fb8 <init_set_timer>:

void init_set_timer( int32_t period_number )
{
    general_set_timer( period_number );
    2fb8:	1b df       	rcall	.-458    	; 0x2df0 <general_set_timer>
	/* Clear pending interrupts */
	TIFR2  = (1 << TOV2) | (1 << OCF2A) | (1 << OCF2B);
    2fba:	87 e0       	ldi	r24, 0x07	; 7
    2fbc:	87 bb       	out	0x17, r24	; 23
	/* Enable Overflow Interrupt */
	TIMSK2 = 1<<TOIE2;
    2fbe:	81 e0       	ldi	r24, 0x01	; 1
    2fc0:	80 93 70 00 	sts	0x0070, r24
    2fc4:	08 95       	ret

00002fc6 <set_timer>:

}

void set_timer( int32_t period_number )
{
    2fc6:	cf 92       	push	r12
    2fc8:	df 92       	push	r13
    2fca:	ef 92       	push	r14
    2fcc:	ff 92       	push	r15
    2fce:	6b 01       	movw	r12, r22
    2fd0:	7c 01       	movw	r14, r24
	printf("set timer gap = %ld\n\n", period_number);
    2fd2:	ff 92       	push	r15
    2fd4:	ef 92       	push	r14
    2fd6:	df 92       	push	r13
    2fd8:	6f 93       	push	r22
    2fda:	8b ea       	ldi	r24, 0xAB	; 171
    2fdc:	94 e0       	ldi	r25, 0x04	; 4
    2fde:	9f 93       	push	r25
    2fe0:	8f 93       	push	r24
    2fe2:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
	if( period_number == 0)
    2fe6:	0f 90       	pop	r0
    2fe8:	0f 90       	pop	r0
    2fea:	0f 90       	pop	r0
    2fec:	0f 90       	pop	r0
    2fee:	0f 90       	pop	r0
    2ff0:	0f 90       	pop	r0
    2ff2:	c1 14       	cp	r12, r1
    2ff4:	d1 04       	cpc	r13, r1
    2ff6:	e1 04       	cpc	r14, r1
    2ff8:	f1 04       	cpc	r15, r1
    2ffa:	69 f0       	breq	.+26     	; 0x3016 <set_timer+0x50>
	{
		/* we won't every set a zero timeout, will we ? */
		return;
	}
    if( timer_usage == 0 )
    2ffc:	80 91 60 08 	lds	r24, 0x0860
    3000:	90 91 61 08 	lds	r25, 0x0861
    3004:	89 2b       	or	r24, r25
    3006:	21 f4       	brne	.+8      	; 0x3010 <set_timer+0x4a>
    {
        init_set_timer( period_number );
    3008:	c7 01       	movw	r24, r14
    300a:	b6 01       	movw	r22, r12
    300c:	d5 df       	rcall	.-86     	; 0x2fb8 <init_set_timer>
    300e:	03 c0       	rjmp	.+6      	; 0x3016 <set_timer+0x50>
    }
    else
    {
        general_set_timer( period_number );
    3010:	c7 01       	movw	r24, r14
    3012:	b6 01       	movw	r22, r12
    3014:	ed de       	rcall	.-550    	; 0x2df0 <general_set_timer>
    }
}	
    3016:	ff 90       	pop	r15
    3018:	ef 90       	pop	r14
    301a:	df 90       	pop	r13
    301c:	cf 90       	pop	r12
    301e:	08 95       	ret

00003020 <PWR_Init>:

/*************************************************************************//**
  @brief Initializes the power management system
*****************************************************************************/
void PWR_Init(void){
	DDRD |= 0b11000000;
    3020:	8a b1       	in	r24, 0x0a	; 10
    3022:	80 6c       	ori	r24, 0xC0	; 192
    3024:	8a b9       	out	0x0a, r24	; 10
    3026:	08 95       	ret

00003028 <PWR_TurnOn5V>:

/*************************************************************************//**
  @brief Turns on the 5V power supply
*****************************************************************************/
void PWR_TurnOn5V(void){
	PORTD |= 0b10000000;
    3028:	5f 9a       	sbi	0x0b, 7	; 11
    302a:	08 95       	ret

0000302c <spi_init_master>:
#include <avr/io.h>

//Initialize SPI Master Device
void spi_init_master (void)
{
	DDRB &= ~((1<<PORTB2)|(1<<PORTB3)|(1<<PORTB1)|(1<<PORTB0));
    302c:	84 b1       	in	r24, 0x04	; 4
    302e:	80 7f       	andi	r24, 0xF0	; 240
    3030:	84 b9       	out	0x04, r24	; 4
    DDRB |= (1<<PORTB1)|(1<<PORTB2)|(1<<PORTB0);              //Set MOSI, SCK as Output
    3032:	84 b1       	in	r24, 0x04	; 4
    3034:	87 60       	ori	r24, 0x07	; 7
    3036:	84 b9       	out	0x04, r24	; 4
    SPCR = (1<<SPE)|(1<<MSTR)|(0<<SPR1)|(1<<SPR0); //Enable SPI, Set as Master
    3038:	81 e5       	ldi	r24, 0x51	; 81
    303a:	8c bd       	out	0x2c, r24	; 44
    303c:	08 95       	ret

0000303e <spi_tranceiver>:
                                       //Prescaler: Fosc/16, Enable Interrupts
}
//Function to send and receive data
unsigned char spi_tranceiver (unsigned char data)
{
    SPDR = data;                       //Load data into the buffer
    303e:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1<<SPIF) ));       //Wait until transmission complete
    3040:	0d b4       	in	r0, 0x2d	; 45
    3042:	07 fe       	sbrs	r0, 7
    3044:	fd cf       	rjmp	.-6      	; 0x3040 <spi_tranceiver+0x2>
    return(SPDR);                      //Return received data
    3046:	8e b5       	in	r24, 0x2e	; 46
}
    3048:	08 95       	ret

0000304a <Serialize_SPI>:
SPI_STATUS Serialize_SPI(const CharStream* char_stream_send,
                         CharStream* char_stream_recv,
                         SpiConfigOptions optBefore,
                         SpiConfigOptions optAfter
                        )
{
    304a:	8f 92       	push	r8
    304c:	9f 92       	push	r9
    304e:	af 92       	push	r10
    3050:	bf 92       	push	r11
    3052:	cf 92       	push	r12
    3054:	df 92       	push	r13
    3056:	ef 92       	push	r14
    3058:	ff 92       	push	r15
    305a:	0f 93       	push	r16
    305c:	1f 93       	push	r17
    305e:	cf 93       	push	r28
    3060:	df 93       	push	r29
    3062:	7c 01       	movw	r14, r24
    3064:	8b 01       	movw	r16, r22
	uint8 *char_send, *char_recv;
	uint16 rx_len = 0, tx_len = 0;
	
	int i;
	printf("\nSEND:");
    3066:	81 ec       	ldi	r24, 0xC1	; 193
    3068:	94 e0       	ldi	r25, 0x04	; 4
    306a:	9f 93       	push	r25
    306c:	8f 93       	push	r24
    306e:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
	for(i=0; i<char_stream_send->length; i++)
    3072:	0f 90       	pop	r0
    3074:	0f 90       	pop	r0
    3076:	f7 01       	movw	r30, r14
    3078:	82 81       	ldd	r24, Z+2	; 0x02
    307a:	93 81       	ldd	r25, Z+3	; 0x03
    307c:	a4 81       	ldd	r26, Z+4	; 0x04
    307e:	b5 81       	ldd	r27, Z+5	; 0x05
    3080:	89 2b       	or	r24, r25
    3082:	8a 2b       	or	r24, r26
    3084:	8b 2b       	or	r24, r27
    3086:	09 f4       	brne	.+2      	; 0x308a <Serialize_SPI+0x40>
    3088:	9c c0       	rjmp	.+312    	; 0x31c2 <Serialize_SPI+0x178>
    308a:	c0 e0       	ldi	r28, 0x00	; 0
    308c:	d0 e0       	ldi	r29, 0x00	; 0
		printf(" 0x%x \n",char_stream_send->pChar[i]);
    308e:	0f 2e       	mov	r0, r31
    3090:	f8 ec       	ldi	r31, 0xC8	; 200
    3092:	cf 2e       	mov	r12, r31
    3094:	f4 e0       	ldi	r31, 0x04	; 4
    3096:	df 2e       	mov	r13, r31
    3098:	f0 2d       	mov	r31, r0
    309a:	d7 01       	movw	r26, r14
    309c:	ed 91       	ld	r30, X+
    309e:	fc 91       	ld	r31, X
    30a0:	ec 0f       	add	r30, r28
    30a2:	fd 1f       	adc	r31, r29
    30a4:	80 81       	ld	r24, Z
    30a6:	1f 92       	push	r1
    30a8:	8f 93       	push	r24
    30aa:	df 92       	push	r13
    30ac:	cf 92       	push	r12
    30ae:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
	uint8 *char_send, *char_recv;
	uint16 rx_len = 0, tx_len = 0;
	
	int i;
	printf("\nSEND:");
	for(i=0; i<char_stream_send->length; i++)
    30b2:	21 96       	adiw	r28, 0x01	; 1
    30b4:	f7 01       	movw	r30, r14
    30b6:	82 81       	ldd	r24, Z+2	; 0x02
    30b8:	93 81       	ldd	r25, Z+3	; 0x03
    30ba:	a4 81       	ldd	r26, Z+4	; 0x04
    30bc:	b5 81       	ldd	r27, Z+5	; 0x05
    30be:	ae 01       	movw	r20, r28
    30c0:	0d 2e       	mov	r0, r29
    30c2:	00 0c       	add	r0, r0
    30c4:	66 0b       	sbc	r22, r22
    30c6:	77 0b       	sbc	r23, r23
    30c8:	0f 90       	pop	r0
    30ca:	0f 90       	pop	r0
    30cc:	0f 90       	pop	r0
    30ce:	0f 90       	pop	r0
    30d0:	48 17       	cp	r20, r24
    30d2:	59 07       	cpc	r21, r25
    30d4:	6a 07       	cpc	r22, r26
    30d6:	7b 07       	cpc	r23, r27
    30d8:	00 f3       	brcs	.-64     	; 0x309a <Serialize_SPI+0x50>
		printf(" 0x%x \n",char_stream_send->pChar[i]);

	tx_len = char_stream_send->length;
    30da:	9c 01       	movw	r18, r24
	char_send = char_stream_send->pChar;
    30dc:	40 81       	ld	r20, Z
    30de:	51 81       	ldd	r21, Z+1	; 0x01

	if (NULL_PTR != char_stream_recv)
    30e0:	01 15       	cp	r16, r1
    30e2:	11 05       	cpc	r17, r1
    30e4:	09 f4       	brne	.+2      	; 0x30e8 <Serialize_SPI+0x9e>
    30e6:	5e c0       	rjmp	.+188    	; 0x31a4 <Serialize_SPI+0x15a>
	{
		rx_len = char_stream_recv->length;
    30e8:	f8 01       	movw	r30, r16
    30ea:	82 80       	ldd	r8, Z+2	; 0x02
    30ec:	93 80       	ldd	r9, Z+3	; 0x03
		char_recv = char_stream_recv->pChar;
    30ee:	b0 80       	ld	r11, Z
    30f0:	a1 80       	ldd	r10, Z+1	; 0x01



	//ConfigureSpi(optBefore);

	while (tx_len-- > 0)
    30f2:	ec 01       	movw	r28, r24
    30f4:	21 97       	sbiw	r28, 0x01	; 1
    30f6:	89 2b       	or	r24, r25
    30f8:	19 f4       	brne	.+6      	; 0x3100 <Serialize_SPI+0xb6>
    30fa:	0c c0       	rjmp	.+24     	; 0x3114 <Serialize_SPI+0xca>
                         SpiConfigOptions optBefore,
                         SpiConfigOptions optAfter
                        )
{
	uint8 *char_send, *char_recv;
	uint16 rx_len = 0, tx_len = 0;
    30fc:	81 2c       	mov	r8, r1
    30fe:	91 2c       	mov	r9, r1
    3100:	c4 2e       	mov	r12, r20
    3102:	d5 2e       	mov	r13, r21

	//ConfigureSpi(optBefore);

	while (tx_len-- > 0)
	{
		spi_tranceiver (*(char_send++));
    3104:	d6 01       	movw	r26, r12
    3106:	8d 91       	ld	r24, X+
    3108:	6d 01       	movw	r12, r26
    310a:	99 df       	rcall	.-206    	; 0x303e <spi_tranceiver>
    310c:	ce 01       	movw	r24, r28



	//ConfigureSpi(optBefore);

	while (tx_len-- > 0)
    310e:	21 97       	sbiw	r28, 0x01	; 1
    3110:	89 2b       	or	r24, r25
    3112:	c1 f7       	brne	.-16     	; 0x3104 <Serialize_SPI+0xba>
	{
		spi_tranceiver (*(char_send++));
	}
	
	while (rx_len-- > 0)
    3114:	81 14       	cp	r8, r1
    3116:	91 04       	cpc	r9, r1
    3118:	51 f0       	breq	.+20     	; 0x312e <Serialize_SPI+0xe4>
    311a:	eb 2c       	mov	r14, r11
    311c:	fa 2c       	mov	r15, r10
    311e:	e4 01       	movw	r28, r8
	{
		*(char_recv++) = spi_tranceiver (0xff);
    3120:	8f ef       	ldi	r24, 0xFF	; 255
    3122:	8d df       	rcall	.-230    	; 0x303e <spi_tranceiver>
    3124:	f7 01       	movw	r30, r14
    3126:	81 93       	st	Z+, r24
    3128:	7f 01       	movw	r14, r30
    312a:	21 97       	sbiw	r28, 0x01	; 1
	while (tx_len-- > 0)
	{
		spi_tranceiver (*(char_send++));
	}
	
	while (rx_len-- > 0)
    312c:	c9 f7       	brne	.-14     	; 0x3120 <Serialize_SPI+0xd6>
		//printf("%x\n",spi_tranceiver(0xff));
	}

	//ConfigureSpi(optAfter);

printf("\nREC:");
    312e:	80 ed       	ldi	r24, 0xD0	; 208
    3130:	94 e0       	ldi	r25, 0x04	; 4
    3132:	9f 93       	push	r25
    3134:	8f 93       	push	r24
    3136:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
for(i=0; i<char_stream_recv->length; i++)
    313a:	0f 90       	pop	r0
    313c:	0f 90       	pop	r0
    313e:	f8 01       	movw	r30, r16
    3140:	82 81       	ldd	r24, Z+2	; 0x02
    3142:	93 81       	ldd	r25, Z+3	; 0x03
    3144:	a4 81       	ldd	r26, Z+4	; 0x04
    3146:	b5 81       	ldd	r27, Z+5	; 0x05
    3148:	89 2b       	or	r24, r25
    314a:	8a 2b       	or	r24, r26
    314c:	8b 2b       	or	r24, r27
    314e:	09 f4       	brne	.+2      	; 0x3152 <Serialize_SPI+0x108>
    3150:	41 c0       	rjmp	.+130    	; 0x31d4 <Serialize_SPI+0x18a>
    3152:	c0 e0       	ldi	r28, 0x00	; 0
    3154:	d0 e0       	ldi	r29, 0x00	; 0
printf(" 0x%x \n",char_stream_recv->pChar[i]);
    3156:	0f 2e       	mov	r0, r31
    3158:	f8 ec       	ldi	r31, 0xC8	; 200
    315a:	ef 2e       	mov	r14, r31
    315c:	f4 e0       	ldi	r31, 0x04	; 4
    315e:	ff 2e       	mov	r15, r31
    3160:	f0 2d       	mov	r31, r0
    3162:	d8 01       	movw	r26, r16
    3164:	ed 91       	ld	r30, X+
    3166:	fc 91       	ld	r31, X
    3168:	ec 0f       	add	r30, r28
    316a:	fd 1f       	adc	r31, r29
    316c:	80 81       	ld	r24, Z
    316e:	1f 92       	push	r1
    3170:	8f 93       	push	r24
    3172:	ff 92       	push	r15
    3174:	ef 92       	push	r14
    3176:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
	}

	//ConfigureSpi(optAfter);

printf("\nREC:");
for(i=0; i<char_stream_recv->length; i++)
    317a:	21 96       	adiw	r28, 0x01	; 1
    317c:	ae 01       	movw	r20, r28
    317e:	0d 2e       	mov	r0, r29
    3180:	00 0c       	add	r0, r0
    3182:	66 0b       	sbc	r22, r22
    3184:	77 0b       	sbc	r23, r23
    3186:	0f 90       	pop	r0
    3188:	0f 90       	pop	r0
    318a:	0f 90       	pop	r0
    318c:	0f 90       	pop	r0
    318e:	f8 01       	movw	r30, r16
    3190:	82 81       	ldd	r24, Z+2	; 0x02
    3192:	93 81       	ldd	r25, Z+3	; 0x03
    3194:	a4 81       	ldd	r26, Z+4	; 0x04
    3196:	b5 81       	ldd	r27, Z+5	; 0x05
    3198:	48 17       	cp	r20, r24
    319a:	59 07       	cpc	r21, r25
    319c:	6a 07       	cpc	r22, r26
    319e:	7b 07       	cpc	r23, r27
    31a0:	00 f3       	brcs	.-64     	; 0x3162 <Serialize_SPI+0x118>
    31a2:	18 c0       	rjmp	.+48     	; 0x31d4 <Serialize_SPI+0x18a>



	//ConfigureSpi(optBefore);

	while (tx_len-- > 0)
    31a4:	e9 01       	movw	r28, r18
    31a6:	21 97       	sbiw	r28, 0x01	; 1
    31a8:	23 2b       	or	r18, r19
    31aa:	09 f0       	breq	.+2      	; 0x31ae <Serialize_SPI+0x164>
    31ac:	a7 cf       	rjmp	.-178    	; 0x30fc <Serialize_SPI+0xb2>
    31ae:	bf cf       	rjmp	.-130    	; 0x312e <Serialize_SPI+0xe4>
	tx_len = char_stream_send->length;
	char_send = char_stream_send->pChar;

	if (NULL_PTR != char_stream_recv)
	{
		rx_len = char_stream_recv->length;
    31b0:	d8 01       	movw	r26, r16
    31b2:	12 96       	adiw	r26, 0x02	; 2
    31b4:	8d 90       	ld	r8, X+
    31b6:	9c 90       	ld	r9, X
    31b8:	13 97       	sbiw	r26, 0x03	; 3
		char_recv = char_stream_recv->pChar;
    31ba:	bc 90       	ld	r11, X
    31bc:	11 96       	adiw	r26, 0x01	; 1
    31be:	ac 90       	ld	r10, X
    31c0:	a9 cf       	rjmp	.-174    	; 0x3114 <Serialize_SPI+0xca>
	printf("\nSEND:");
	for(i=0; i<char_stream_send->length; i++)
		printf(" 0x%x \n",char_stream_send->pChar[i]);

	tx_len = char_stream_send->length;
	char_send = char_stream_send->pChar;
    31c2:	f7 01       	movw	r30, r14
    31c4:	40 81       	ld	r20, Z
    31c6:	51 81       	ldd	r21, Z+1	; 0x01

	if (NULL_PTR != char_stream_recv)
    31c8:	01 15       	cp	r16, r1
    31ca:	11 05       	cpc	r17, r1
    31cc:	89 f7       	brne	.-30     	; 0x31b0 <Serialize_SPI+0x166>
	int i;
	printf("\nSEND:");
	for(i=0; i<char_stream_send->length; i++)
		printf(" 0x%x \n",char_stream_send->pChar[i]);

	tx_len = char_stream_send->length;
    31ce:	20 e0       	ldi	r18, 0x00	; 0
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	e8 cf       	rjmp	.-48     	; 0x31a4 <Serialize_SPI+0x15a>
printf("\nREC:");
for(i=0; i<char_stream_recv->length; i++)
printf(" 0x%x \n",char_stream_recv->pChar[i]);

	return RetSpiSuccess;
    31d4:	81 e0       	ldi	r24, 0x01	; 1
    31d6:	df 91       	pop	r29
    31d8:	cf 91       	pop	r28
    31da:	1f 91       	pop	r17
    31dc:	0f 91       	pop	r16
    31de:	ff 90       	pop	r15
    31e0:	ef 90       	pop	r14
    31e2:	df 90       	pop	r13
    31e4:	cf 90       	pop	r12
    31e6:	bf 90       	pop	r11
    31e8:	af 90       	pop	r10
    31ea:	9f 90       	pop	r9
    31ec:	8f 90       	pop	r8
    31ee:	08 95       	ret

000031f0 <TWI_Init>:
/*************************************************************************//**
  @brief Initializes the 2-wire Serial Interface as a master
  @param[in] freq SCL frequency (Do not exceed 400kHz)
  @return Status (@c 0 on failure, nonzero otherwise)
*****************************************************************************/
char TWI_Init(unsigned long freq){
    31f0:	9b 01       	movw	r18, r22
    31f2:	ac 01       	movw	r20, r24
	//printf("TWI_Init");
	TWSR=0x00;
    31f4:	10 92 b9 00 	sts	0x00B9, r1
	TWBR=(unsigned char)(((F_CPU/freq)-16UL)/8UL); //Compute settings value and set frequency
    31f8:	60 e0       	ldi	r22, 0x00	; 0
    31fa:	74 e2       	ldi	r23, 0x24	; 36
    31fc:	84 ef       	ldi	r24, 0xF4	; 244
    31fe:	90 e0       	ldi	r25, 0x00	; 0
    3200:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__udivmodsi4>
    3204:	da 01       	movw	r26, r20
    3206:	c9 01       	movw	r24, r18
    3208:	40 97       	sbiw	r24, 0x10	; 16
    320a:	a1 09       	sbc	r26, r1
    320c:	b1 09       	sbc	r27, r1
    320e:	68 94       	set
    3210:	12 f8       	bld	r1, 2
    3212:	b6 95       	lsr	r27
    3214:	a7 95       	ror	r26
    3216:	97 95       	ror	r25
    3218:	87 95       	ror	r24
    321a:	16 94       	lsr	r1
    321c:	d1 f7       	brne	.-12     	; 0x3212 <TWI_Init+0x22>
    321e:	80 93 b8 00 	sts	0x00B8, r24
	TWCR=(1 << TWEN);
    3222:	84 e0       	ldi	r24, 0x04	; 4
    3224:	80 93 bc 00 	sts	0x00BC, r24
	
	//TWAR=0; //Disable slave mode
	
	return 1; //May want to actually check for success here
}
    3228:	81 e0       	ldi	r24, 0x01	; 1
    322a:	08 95       	ret

0000322c <TWI_WriteByte>:
  @param[in] data byte to send
  @return Status code, TWI_SENT_ACK or TWI_SENT_NACK on success
*****************************************************************************/
char TWI_WriteByte(unsigned char data){
	//printf("TWI_WriteByte");
	TWDR = data; //Stage the data to send
    322c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
    3230:	84 e8       	ldi	r24, 0x84	; 132
    3232:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);//Send the data
    3236:	ec eb       	ldi	r30, 0xBC	; 188
    3238:	f0 e0       	ldi	r31, 0x00	; 0
    323a:	80 81       	ld	r24, Z
    323c:	88 23       	and	r24, r24
    323e:	ec f7       	brge	.-6      	; 0x323a <TWI_WriteByte+0xe>
	
	return TWSR&TWSR_MASK;//Return the status code
    3240:	80 91 b9 00 	lds	r24, 0x00B9
}
    3244:	88 7f       	andi	r24, 0xF8	; 248
    3246:	08 95       	ret

00003248 <TWI_BeginWrite>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAW_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginWrite(unsigned char address){
	//printf("TWI_BeginWrite");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
    3248:	94 ee       	ldi	r25, 0xE4	; 228
    324a:	90 93 bc 00 	sts	0x00BC, r25
	int i=0;
	while ((TWCR & (1<<TWINT)) == 0);
    324e:	ec eb       	ldi	r30, 0xBC	; 188
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	90 81       	ld	r25, Z
    3254:	99 23       	and	r25, r25
    3256:	ec f7       	brge	.-6      	; 0x3252 <TWI_BeginWrite+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3258:	ef e9       	ldi	r30, 0x9F	; 159
    325a:	ff e0       	ldi	r31, 0x0F	; 15
    325c:	31 97       	sbiw	r30, 0x01	; 1
    325e:	f1 f7       	brne	.-4      	; 0x325c <TWI_BeginWrite+0x14>
    3260:	00 c0       	rjmp	.+0      	; 0x3262 <TWI_BeginWrite+0x1a>
    3262:	00 00       	nop
	_delay_ms(1);
	char stat = (TWSR & TWSR_MASK);
    3264:	90 91 b9 00 	lds	r25, 0x00B9
    3268:	98 7f       	andi	r25, 0xF8	; 248
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
    326a:	98 30       	cpi	r25, 0x08	; 8
    326c:	31 f0       	breq	.+12     	; 0x327a <TWI_BeginWrite+0x32>
    326e:	90 31       	cpi	r25, 0x10	; 16
    3270:	21 f0       	breq	.+8      	; 0x327a <TWI_BeginWrite+0x32>
    3272:	80 91 b9 00 	lds	r24, 0x00B9
    3276:	88 7f       	andi	r24, 0xF8	; 248
    3278:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) & SLAW_MASK); //reset bit 0 to send a write bit, send
    327a:	88 0f       	add	r24, r24
    327c:	d7 cf       	rjmp	.-82     	; 0x322c <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	return stat;//Return the status code
}
    327e:	08 95       	ret

00003280 <TWI_BeginRead>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAR_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginRead(unsigned char address){
	//printf("TWI_BeginRead");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
    3280:	94 ee       	ldi	r25, 0xE4	; 228
    3282:	90 93 bc 00 	sts	0x00BC, r25
	while ((TWCR & (1<<TWINT)) == 0);
    3286:	ec eb       	ldi	r30, 0xBC	; 188
    3288:	f0 e0       	ldi	r31, 0x00	; 0
    328a:	90 81       	ld	r25, Z
    328c:	99 23       	and	r25, r25
    328e:	ec f7       	brge	.-6      	; 0x328a <TWI_BeginRead+0xa>
	
	char stat = (TWSR & TWSR_MASK);
    3290:	90 91 b9 00 	lds	r25, 0x00B9
    3294:	98 7f       	andi	r25, 0xF8	; 248
	//printf("0x%1x",(unsigned)stat);
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
    3296:	98 30       	cpi	r25, 0x08	; 8
    3298:	31 f0       	breq	.+12     	; 0x32a6 <TWI_BeginRead+0x26>
    329a:	90 31       	cpi	r25, 0x10	; 16
    329c:	21 f0       	breq	.+8      	; 0x32a6 <TWI_BeginRead+0x26>
    329e:	80 91 b9 00 	lds	r24, 0x00B9
    32a2:	88 7f       	andi	r24, 0xF8	; 248
    32a4:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) | SLAR_MASK); //set bit 0 to send a read bit and send it
    32a6:	88 0f       	add	r24, r24
    32a8:	81 60       	ori	r24, 0x01	; 1
    32aa:	c0 cf       	rjmp	.-128    	; 0x322c <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	
	return stat;//Return the status code
}
    32ac:	08 95       	ret

000032ae <TWI_ReadAck>:
/*************************************************************************//**
  @brief Receives a byte over TWI and returns an ACK
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_ACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadAck(unsigned char *data){
    32ae:	dc 01       	movw	r26, r24
	//printf("TWI_ReadAck");
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Start receiving, ending with an ACK
    32b0:	84 ec       	ldi	r24, 0xC4	; 196
    32b2:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);
    32b6:	ec eb       	ldi	r30, 0xBC	; 188
    32b8:	f0 e0       	ldi	r31, 0x00	; 0
    32ba:	90 81       	ld	r25, Z
    32bc:	99 23       	and	r25, r25
    32be:	ec f7       	brge	.-6      	; 0x32ba <TWI_ReadAck+0xc>
	*data=TWDR; //Store the data
    32c0:	80 91 bb 00 	lds	r24, 0x00BB
    32c4:	8c 93       	st	X, r24
	
	return TWSR&TWSR_MASK;//Return the status code
    32c6:	80 91 b9 00 	lds	r24, 0x00B9
}
    32ca:	88 7f       	andi	r24, 0xF8	; 248
    32cc:	08 95       	ret

000032ce <TWI_ReadNack>:
/*************************************************************************//**
  @brief Receives a byte over TWI and returns a NACK
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_NACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadNack(unsigned char *data){
    32ce:	dc 01       	movw	r26, r24
	//printf("TWI_ReadNack");
	TWCR = (1<<TWINT)|(1<<TWEN); //Start receiving, ending with a NACK
    32d0:	84 e8       	ldi	r24, 0x84	; 132
    32d2:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);
    32d6:	ec eb       	ldi	r30, 0xBC	; 188
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	90 81       	ld	r25, Z
    32dc:	99 23       	and	r25, r25
    32de:	ec f7       	brge	.-6      	; 0x32da <TWI_ReadNack+0xc>
	*data=TWDR; //Store the data
    32e0:	80 91 bb 00 	lds	r24, 0x00BB
    32e4:	8c 93       	st	X, r24
	
	return TWSR&TWSR_MASK;//Return the status code
    32e6:	80 91 b9 00 	lds	r24, 0x00B9
}
    32ea:	88 7f       	andi	r24, 0xF8	; 248
    32ec:	08 95       	ret

000032ee <TWI_Stop>:
  @brief Sends a Stop bit, be sure to send a Start bit before future interactions on the bus
  @return Status code, should always be nonzero
*****************************************************************************/
char TWI_Stop(void){
	//printf("TWI_Stop");
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    32ee:	84 e9       	ldi	r24, 0x94	; 148
    32f0:	80 93 bc 00 	sts	0x00BC, r24
	return 1;
}
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	08 95       	ret

000032f8 <TWI_Read>:
  @param[in] amount Number of bytes to recieve
  @param[in] whether or not to send an ACK on the last byte, sends NACK if false
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
    32f8:	9f 92       	push	r9
    32fa:	af 92       	push	r10
    32fc:	bf 92       	push	r11
    32fe:	cf 92       	push	r12
    3300:	df 92       	push	r13
    3302:	ef 92       	push	r14
    3304:	ff 92       	push	r15
    3306:	0f 93       	push	r16
    3308:	1f 93       	push	r17
    330a:	cf 93       	push	r28
    330c:	df 93       	push	r29
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
    330e:	16 16       	cp	r1, r22
    3310:	17 06       	cpc	r1, r23
    3312:	fc f4       	brge	.+62     	; 0x3352 <TWI_Read+0x5a>
    3314:	94 2e       	mov	r9, r20
    3316:	8b 01       	movw	r16, r22
    3318:	7c 01       	movw	r14, r24
    331a:	c0 e0       	ldi	r28, 0x00	; 0
    331c:	d0 e0       	ldi	r29, 0x00	; 0
		if((ack==false) && ((amount-1)==i)){
    331e:	6b 01       	movw	r12, r22
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	c8 1a       	sub	r12, r24
    3324:	d1 08       	sbc	r13, r1
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
    3326:	57 01       	movw	r10, r14
    3328:	ac 0c       	add	r10, r12
    332a:	bd 1c       	adc	r11, r13
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
		if((ack==false) && ((amount-1)==i)){
    332c:	91 10       	cpse	r9, r1
    332e:	06 c0       	rjmp	.+12     	; 0x333c <TWI_Read+0x44>
    3330:	cc 16       	cp	r12, r28
    3332:	dd 06       	cpc	r13, r29
    3334:	19 f4       	brne	.+6      	; 0x333c <TWI_Read+0x44>
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
    3336:	c5 01       	movw	r24, r10
    3338:	ca df       	rcall	.-108    	; 0x32ce <TWI_ReadNack>
    333a:	04 c0       	rjmp	.+8      	; 0x3344 <TWI_Read+0x4c>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}else{
			status=TWI_ReadAck(&data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
    333c:	c7 01       	movw	r24, r14
    333e:	8c 0f       	add	r24, r28
    3340:	9d 1f       	adc	r25, r29
    3342:	b5 df       	rcall	.-150    	; 0x32ae <TWI_ReadAck>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}
		//printf("A");
		if(status!=TWI_REC_ACK)return status; //If NACK was selected, returning here is fine since the loop is already ending
    3344:	80 35       	cpi	r24, 0x50	; 80
    3346:	31 f4       	brne	.+12     	; 0x3354 <TWI_Read+0x5c>
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
    3348:	21 96       	adiw	r28, 0x01	; 1
    334a:	c0 17       	cp	r28, r16
    334c:	d1 07       	cpc	r29, r17
    334e:	71 f7       	brne	.-36     	; 0x332c <TWI_Read+0x34>
    3350:	01 c0       	rjmp	.+2      	; 0x3354 <TWI_Read+0x5c>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
    3352:	80 e0       	ldi	r24, 0x00	; 0
		//will return if something goes wrong partway through
		//printf("B");
	}
	//printf("0x%1x",(unsigned)status);
	return status;
}
    3354:	df 91       	pop	r29
    3356:	cf 91       	pop	r28
    3358:	1f 91       	pop	r17
    335a:	0f 91       	pop	r16
    335c:	ff 90       	pop	r15
    335e:	ef 90       	pop	r14
    3360:	df 90       	pop	r13
    3362:	cf 90       	pop	r12
    3364:	bf 90       	pop	r11
    3366:	af 90       	pop	r10
    3368:	9f 90       	pop	r9
    336a:	08 95       	ret

0000336c <TWI_Write>:
  @param[in] *data Pointer to an array of bytes to send
  @param[in] amount Number of bytes to send
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
    336c:	0f 93       	push	r16
    336e:	1f 93       	push	r17
    3370:	cf 93       	push	r28
    3372:	df 93       	push	r29
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
    3374:	16 16       	cp	r1, r22
    3376:	17 06       	cpc	r1, r23
    3378:	64 f4       	brge	.+24     	; 0x3392 <TWI_Write+0x26>
    337a:	8c 01       	movw	r16, r24
    337c:	ec 01       	movw	r28, r24
    337e:	06 0f       	add	r16, r22
    3380:	17 1f       	adc	r17, r23
		status=TWI_WriteByte(data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
    3382:	89 91       	ld	r24, Y+
    3384:	53 df       	rcall	.-346    	; 0x322c <TWI_WriteByte>
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
    3386:	88 32       	cpi	r24, 0x28	; 40
    3388:	29 f4       	brne	.+10     	; 0x3394 <TWI_Write+0x28>
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
    338a:	c0 17       	cp	r28, r16
    338c:	d1 07       	cpc	r29, r17
    338e:	c9 f7       	brne	.-14     	; 0x3382 <TWI_Write+0x16>
    3390:	01 c0       	rjmp	.+2      	; 0x3394 <TWI_Write+0x28>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
    3392:	80 e0       	ldi	r24, 0x00	; 0
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
		//will return if something goes wrong partway through
	}
	return status;
    3394:	df 91       	pop	r29
    3396:	cf 91       	pop	r28
    3398:	1f 91       	pop	r17
    339a:	0f 91       	pop	r16
    339c:	08 95       	ret

0000339e <USART0_Init>:
  @brief Initializes USART0 in asynchronous UART mode, 8 bit data, 1 stop bit
  @param[in] desired baud rate (configuration values computed using F_CPU)
*****************************************************************************/
void USART0_Init(unsigned long baud){
	
	stdout = &USART0_stdout; //make stdout print to USART0
    339e:	28 e5       	ldi	r18, 0x58	; 88
    33a0:	32 e0       	ldi	r19, 0x02	; 2
    33a2:	30 93 04 0e 	sts	0x0E04, r19
    33a6:	20 93 03 0e 	sts	0x0E03, r18
	
	//Compute UBRR for baudrate setting
	unsigned short ubrr=(unsigned short)((F_CPU/(baud*16UL))-1);
    33aa:	dc 01       	movw	r26, r24
    33ac:	cb 01       	movw	r24, r22
    33ae:	88 0f       	add	r24, r24
    33b0:	99 1f       	adc	r25, r25
    33b2:	aa 1f       	adc	r26, r26
    33b4:	bb 1f       	adc	r27, r27
    33b6:	88 0f       	add	r24, r24
    33b8:	99 1f       	adc	r25, r25
    33ba:	aa 1f       	adc	r26, r26
    33bc:	bb 1f       	adc	r27, r27
    33be:	9c 01       	movw	r18, r24
    33c0:	ad 01       	movw	r20, r26
    33c2:	22 0f       	add	r18, r18
    33c4:	33 1f       	adc	r19, r19
    33c6:	44 1f       	adc	r20, r20
    33c8:	55 1f       	adc	r21, r21
    33ca:	22 0f       	add	r18, r18
    33cc:	33 1f       	adc	r19, r19
    33ce:	44 1f       	adc	r20, r20
    33d0:	55 1f       	adc	r21, r21
    33d2:	60 e0       	ldi	r22, 0x00	; 0
    33d4:	74 e2       	ldi	r23, 0x24	; 36
    33d6:	84 ef       	ldi	r24, 0xF4	; 244
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	0e 94 5d 32 	call	0x64ba	; 0x64ba <__udivmodsi4>
    33de:	21 50       	subi	r18, 0x01	; 1
    33e0:	31 09       	sbc	r19, r1
	
	//Set BAUD rate.
	UBRR0H = (unsigned char) (ubrr >> 8);
    33e2:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) ubrr;
    33e6:	20 93 c4 00 	sts	0x00C4, r18
	/*Set frame format. 8 data bit(settings bits UCSZ00 and UCSZ01  UCSR0B), 1 stop bit(by default and need not to be worried about). 
	The UCSZ01:0 bits combined with the UCSZ02 bit in UCSR0B sets the number of data
	bits (Character Size) in the frame that the Receiver and Transmitter use. 
	If a change on frame format is needed, make sure to modify UCSR0B register above accordingly.
	See datasheet pg. 390.*/
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
    33ea:	86 e0       	ldi	r24, 0x06	; 6
    33ec:	80 93 c2 00 	sts	0x00C2, r24
	
	//Enable receiver and transmitter. Enable the USART Receive Complete interrupt(RXCIE).
	//UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0));
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);//Enable RX/TX, no interrupts
    33f0:	88 e1       	ldi	r24, 0x18	; 24
    33f2:	80 93 c1 00 	sts	0x00C1, r24
    33f6:	08 95       	ret

000033f8 <USART0_Transmit>:
Function contains busy loops for simplicity in debugging. Not production code.
  @brief Transmits a byte via USART0
  @param[in] data byte to be transmitted
*****************************************************************************/
void USART0_Transmit(unsigned char data){
	while(!(UCSR0A & (1 << UDRE0))); //Wait for the empty transmit buffer. (Waiting UDR0 to be empty.)
    33f8:	e0 ec       	ldi	r30, 0xC0	; 192
    33fa:	f0 e0       	ldi	r31, 0x00	; 0
    33fc:	90 81       	ld	r25, Z
    33fe:	95 ff       	sbrs	r25, 5
    3400:	fd cf       	rjmp	.-6      	; 0x33fc <USART0_Transmit+0x4>
		UDR0 = data;			//store the data in the USART Data Register
    3402:	80 93 c6 00 	sts	0x00C6, r24
    3406:	08 95       	ret

00003408 <USART0_putchar_printf>:
  @brief Called when stdout is being printed to USART0 (this is set up at runtime)
  @param[in] var byte to transmit
  @param[in/out] *stream Pointer to a stdio.h FILE io stream
  @return Status
*****************************************************************************/
int USART0_putchar_printf(char var, FILE *stream) {
    3408:	cf 93       	push	r28
    340a:	c8 2f       	mov	r28, r24
	if (var == '\n') USART0_Transmit('\r');
    340c:	8a 30       	cpi	r24, 0x0A	; 10
    340e:	11 f4       	brne	.+4      	; 0x3414 <USART0_putchar_printf+0xc>
    3410:	8d e0       	ldi	r24, 0x0D	; 13
    3412:	f2 df       	rcall	.-28     	; 0x33f8 <USART0_Transmit>
	USART0_Transmit(var);
    3414:	8c 2f       	mov	r24, r28
    3416:	f0 df       	rcall	.-32     	; 0x33f8 <USART0_Transmit>
	return 0;
}
    3418:	80 e0       	ldi	r24, 0x00	; 0
    341a:	90 e0       	ldi	r25, 0x00	; 0
    341c:	cf 91       	pop	r28
    341e:	08 95       	ret

00003420 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
    3420:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    3422:	0f b6       	in	r0, 0x3f	; 63
    3424:	f8 94       	cli
    3426:	a8 95       	wdr
    3428:	80 91 60 00 	lds	r24, 0x0060
    342c:	88 61       	ori	r24, 0x18	; 24
    342e:	80 93 60 00 	sts	0x0060, r24
    3432:	10 92 60 00 	sts	0x0060, r1
    3436:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
    3438:	e1 e6       	ldi	r30, 0x61	; 97
    343a:	f0 e0       	ldi	r31, 0x00	; 0
    343c:	80 e8       	ldi	r24, 0x80	; 128
    343e:	80 83       	st	Z, r24
  CLKPR = 0;
    3440:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
    3442:	78 94       	sei

  HAL_TimerInit();
    3444:	01 c0       	rjmp	.+2      	; 0x3448 <HAL_TimerInit>
    3446:	08 95       	ret

00003448 <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
    3448:	10 92 d4 0d 	sts	0x0DD4, r1
    344c:	80 e2       	ldi	r24, 0x20	; 32
    344e:	9e e4       	ldi	r25, 0x4E	; 78
    3450:	90 93 a9 00 	sts	0x00A9, r25
    3454:	80 93 a8 00 	sts	0x00A8, r24
    3458:	e1 ea       	ldi	r30, 0xA1	; 161
    345a:	f0 e0       	ldi	r31, 0x00	; 0
    345c:	88 e0       	ldi	r24, 0x08	; 8
    345e:	80 83       	st	Z, r24
    3460:	80 81       	ld	r24, Z
    3462:	82 60       	ori	r24, 0x02	; 2
    3464:	80 83       	st	Z, r24
    3466:	e2 e7       	ldi	r30, 0x72	; 114
    3468:	f0 e0       	ldi	r31, 0x00	; 0
    346a:	80 81       	ld	r24, Z
    346c:	82 60       	ori	r24, 0x02	; 2
    346e:	80 83       	st	Z, r24
    3470:	08 95       	ret

00003472 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    3472:	1f 92       	push	r1
    3474:	0f 92       	push	r0
    3476:	0f b6       	in	r0, 0x3f	; 63
    3478:	0f 92       	push	r0
    347a:	11 24       	eor	r1, r1
    347c:	8f 93       	push	r24
  halTimerIrqCount++;
    347e:	80 91 d4 0d 	lds	r24, 0x0DD4
    3482:	8f 5f       	subi	r24, 0xFF	; 255
    3484:	80 93 d4 0d 	sts	0x0DD4, r24
}
    3488:	8f 91       	pop	r24
    348a:	0f 90       	pop	r0
    348c:	0f be       	out	0x3f, r0	; 63
    348e:	0f 90       	pop	r0
    3490:	1f 90       	pop	r1
    3492:	18 95       	reti

00003494 <NWK_Init>:
  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
  nwkIb.panId = panId;
  PHY_SetPanId(panId);
    3494:	e5 ed       	ldi	r30, 0xD5	; 213
    3496:	fd e0       	ldi	r31, 0x0D	; 13
    3498:	14 82       	std	Z+4, r1	; 0x04
    349a:	15 82       	std	Z+5, r1	; 0x05
    349c:	11 82       	std	Z+1, r1	; 0x01
    349e:	10 82       	st	Z, r1
    34a0:	17 a2       	std	Z+39, r1	; 0x27
    34a2:	16 a2       	std	Z+38, r1	; 0x26
    34a4:	eb ed       	ldi	r30, 0xDB	; 219
    34a6:	fd e0       	ldi	r31, 0x0D	; 13
    34a8:	8b ef       	ldi	r24, 0xFB	; 251
    34aa:	9d e0       	ldi	r25, 0x0D	; 13
    34ac:	11 92       	st	Z+, r1
    34ae:	11 92       	st	Z+, r1
    34b0:	e8 17       	cp	r30, r24
    34b2:	f9 07       	cpc	r31, r25
    34b4:	d9 f7       	brne	.-10     	; 0x34ac <NWK_Init+0x18>
    34b6:	e3 d0       	rcall	.+454    	; 0x367e <nwkTxInit>
    34b8:	67 d0       	rcall	.+206    	; 0x3588 <nwkRxInit>
    34ba:	10 d0       	rcall	.+32     	; 0x34dc <nwkFrameInit>
    34bc:	0a c0       	rjmp	.+20     	; 0x34d2 <nwkDataReqInit>
    34be:	08 95       	ret

000034c0 <NWK_OpenEndpoint>:
  @param[in] id Endpoint index (1-15)
  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
  nwkIb.endpoint[id] = handler;
    34c0:	e8 2f       	mov	r30, r24
    34c2:	f0 e0       	ldi	r31, 0x00	; 0
    34c4:	ee 0f       	add	r30, r30
    34c6:	ff 1f       	adc	r31, r31
    34c8:	e5 52       	subi	r30, 0x25	; 37
    34ca:	f2 4f       	sbci	r31, 0xF2	; 242
    34cc:	71 83       	std	Z+1, r23	; 0x01
    34ce:	60 83       	st	Z, r22
    34d0:	08 95       	ret

000034d2 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
    34d2:	10 92 63 08 	sts	0x0863, r1
    34d6:	10 92 62 08 	sts	0x0862, r1
    34da:	08 95       	ret

000034dc <nwkFrameInit>:
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
  nwkIb.lock--;
    34dc:	10 92 64 08 	sts	0x0864, r1
    34e0:	10 92 ed 08 	sts	0x08ED, r1
    34e4:	10 92 76 09 	sts	0x0976, r1
    34e8:	10 92 ff 09 	sts	0x09FF, r1
    34ec:	10 92 88 0a 	sts	0x0A88, r1
    34f0:	08 95       	ret

000034f2 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    34f2:	00 97       	sbiw	r24, 0x00	; 0
    34f4:	41 f0       	breq	.+16     	; 0x3506 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
    34f6:	fc 01       	movw	r30, r24
    34f8:	e7 57       	subi	r30, 0x77	; 119
    34fa:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    34fc:	8b e0       	ldi	r24, 0x0B	; 11
    34fe:	e1 31       	cpi	r30, 0x11	; 17
    3500:	f8 07       	cpc	r31, r24
    3502:	18 f0       	brcs	.+6      	; 0x350a <nwkFrameNext+0x18>
    3504:	15 c0       	rjmp	.+42     	; 0x3530 <nwkFrameNext+0x3e>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    3506:	e4 e6       	ldi	r30, 0x64	; 100
    3508:	f8 e0       	ldi	r31, 0x08	; 8
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    350a:	80 81       	ld	r24, Z
    350c:	88 23       	and	r24, r24
    350e:	39 f0       	breq	.+14     	; 0x351e <nwkFrameNext+0x2c>
    3510:	03 c0       	rjmp	.+6      	; 0x3518 <nwkFrameNext+0x26>
    3512:	80 81       	ld	r24, Z
    3514:	88 23       	and	r24, r24
    3516:	19 f0       	breq	.+6      	; 0x351e <nwkFrameNext+0x2c>
      return frame;
    3518:	8e 2f       	mov	r24, r30
    351a:	9f 2f       	mov	r25, r31
    351c:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    351e:	e7 57       	subi	r30, 0x77	; 119
    3520:	ff 4f       	sbci	r31, 0xFF	; 255
    3522:	8b e0       	ldi	r24, 0x0B	; 11
    3524:	e1 31       	cpi	r30, 0x11	; 17
    3526:	f8 07       	cpc	r31, r24
    3528:	a0 f3       	brcs	.-24     	; 0x3512 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	90 e0       	ldi	r25, 0x00	; 0
    352e:	08 95       	ret
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	90 e0       	ldi	r25, 0x00	; 0
}
    3534:	08 95       	ret

00003536 <nwkRxServiceDataInd>:
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    3536:	dc 01       	movw	r26, r24
    3538:	19 96       	adiw	r26, 0x09	; 9
    353a:	2c 91       	ld	r18, X
    353c:	19 97       	sbiw	r26, 0x09	; 9
    353e:	22 23       	and	r18, r18
    3540:	49 f0       	breq	.+18     	; 0x3554 <nwkRxServiceDataInd+0x1e>
    return false;

  switch (ind->data[0])
    3542:	17 96       	adiw	r26, 0x07	; 7
    3544:	ed 91       	ld	r30, X+
    3546:	fc 91       	ld	r31, X
    3548:	18 97       	sbiw	r26, 0x08	; 8
    354a:	20 81       	ld	r18, Z
    354c:	21 11       	cpse	r18, r1
    354e:	04 c0       	rjmp	.+8      	; 0x3558 <nwkRxServiceDataInd+0x22>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
    3550:	b9 c0       	rjmp	.+370    	; 0x36c4 <nwkTxAckReceived>
    3552:	08 95       	ret
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    return false;
    3554:	80 e0       	ldi	r24, 0x00	; 0
    3556:	08 95       	ret
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
    3558:	80 e0       	ldi	r24, 0x00	; 0
  }
}
    355a:	08 95       	ret

0000355c <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    355c:	bc 01       	movw	r22, r24
    355e:	e2 e2       	ldi	r30, 0x22	; 34
    3560:	fb e0       	ldi	r31, 0x0B	; 11
    3562:	24 e5       	ldi	r18, 0x54	; 84
    3564:	3b e0       	ldi	r19, 0x0B	; 11
  bool restart = false;
    3566:	40 e0       	ldi	r20, 0x00	; 0
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    3568:	51 e0       	ldi	r21, 0x01	; 1
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    356a:	90 81       	ld	r25, Z
    356c:	99 23       	and	r25, r25
    356e:	19 f0       	breq	.+6      	; 0x3576 <nwkRxDuplicateRejectionTimerHandler+0x1a>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
    3570:	91 50       	subi	r25, 0x01	; 1
    3572:	90 83       	st	Z, r25
      restart = true;
    3574:	45 2f       	mov	r20, r21
    3576:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    3578:	e2 17       	cp	r30, r18
    357a:	f3 07       	cpc	r31, r19
    357c:	b1 f7       	brne	.-20     	; 0x356a <nwkRxDuplicateRejectionTimerHandler+0xe>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
    357e:	44 23       	and	r20, r20
    3580:	11 f0       	breq	.+4      	; 0x3586 <nwkRxDuplicateRejectionTimerHandler+0x2a>
    3582:	cb 01       	movw	r24, r22
    SYS_TimerStart(timer);
    3584:	2f c4       	rjmp	.+2142   	; 0x3de4 <SYS_TimerStart>
    3586:	08 95       	ret

00003588 <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    3588:	e2 e2       	ldi	r30, 0x22	; 34
    358a:	fb e0       	ldi	r31, 0x0B	; 11
    358c:	84 e5       	ldi	r24, 0x54	; 84
    358e:	9b e0       	ldi	r25, 0x0B	; 11
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
    3590:	10 82       	st	Z, r1
    3592:	35 96       	adiw	r30, 0x05	; 5
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    3594:	e8 17       	cp	r30, r24
    3596:	f9 07       	cpc	r31, r25
    3598:	d9 f7       	brne	.-10     	; 0x3590 <nwkRxInit+0x8>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    359a:	e1 e1       	ldi	r30, 0x11	; 17
    359c:	fb e0       	ldi	r31, 0x0B	; 11
    359e:	84 e6       	ldi	r24, 0x64	; 100
    35a0:	90 e0       	ldi	r25, 0x00	; 0
    35a2:	a0 e0       	ldi	r26, 0x00	; 0
    35a4:	b0 e0       	ldi	r27, 0x00	; 0
    35a6:	86 83       	std	Z+6, r24	; 0x06
    35a8:	97 83       	std	Z+7, r25	; 0x07
    35aa:	a0 87       	std	Z+8, r26	; 0x08
    35ac:	b1 87       	std	Z+9, r27	; 0x09
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    35ae:	12 86       	std	Z+10, r1	; 0x0a
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
    35b0:	8e ea       	ldi	r24, 0xAE	; 174
    35b2:	9a e1       	ldi	r25, 0x1A	; 26
    35b4:	94 87       	std	Z+12, r25	; 0x0c
    35b6:	83 87       	std	Z+11, r24	; 0x0b

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
    35b8:	6b e9       	ldi	r22, 0x9B	; 155
    35ba:	7a e1       	ldi	r23, 0x1A	; 26
    35bc:	80 e0       	ldi	r24, 0x00	; 0
    35be:	80 cf       	rjmp	.-256    	; 0x34c0 <NWK_OpenEndpoint>
    35c0:	08 95       	ret

000035c2 <nwkTxDelayTimerHandler>:
  newFrame->header.macFcf = 0x8841;
  newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
  newFrame->header.macDstPanId = frame->header.macDstPanId;
  newFrame->header.macSrcAddr = nwkIb.addr;
  newFrame->header.macSeq = ++nwkIb.macSeqNum;
}
    35c2:	ef 92       	push	r14
    35c4:	ff 92       	push	r15
    35c6:	0f 93       	push	r16
    35c8:	1f 93       	push	r17
    35ca:	cf 93       	push	r28
    35cc:	7c 01       	movw	r14, r24
    35ce:	10 e0       	ldi	r17, 0x00	; 0
    35d0:	80 e0       	ldi	r24, 0x00	; 0
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	01 e0       	ldi	r16, 0x01	; 1
    35d6:	c3 e1       	ldi	r28, 0x13	; 19
    35d8:	13 c0       	rjmp	.+38     	; 0x3600 <nwkTxDelayTimerHandler+0x3e>
    35da:	fc 01       	movw	r30, r24
    35dc:	20 81       	ld	r18, Z
    35de:	21 31       	cpi	r18, 0x11	; 17
    35e0:	79 f4       	brne	.+30     	; 0x3600 <nwkTxDelayTimerHandler+0x3e>
    35e2:	ec 57       	subi	r30, 0x7C	; 124
    35e4:	ff 4f       	sbci	r31, 0xFF	; 255
    35e6:	20 81       	ld	r18, Z
    35e8:	31 81       	ldd	r19, Z+1	; 0x01
    35ea:	21 50       	subi	r18, 0x01	; 1
    35ec:	31 09       	sbc	r19, r1
    35ee:	31 83       	std	Z+1, r19	; 0x01
    35f0:	20 83       	st	Z, r18
    35f2:	23 2b       	or	r18, r19
    35f4:	21 f4       	brne	.+8      	; 0x35fe <nwkTxDelayTimerHandler+0x3c>
    35f6:	fc 01       	movw	r30, r24
    35f8:	c0 83       	st	Z, r28
    35fa:	10 2f       	mov	r17, r16
    35fc:	01 c0       	rjmp	.+2      	; 0x3600 <nwkTxDelayTimerHandler+0x3e>
    35fe:	10 2f       	mov	r17, r16
    3600:	78 df       	rcall	.-272    	; 0x34f2 <nwkFrameNext>
    3602:	00 97       	sbiw	r24, 0x00	; 0
    3604:	51 f7       	brne	.-44     	; 0x35da <nwkTxDelayTimerHandler+0x18>
    3606:	11 23       	and	r17, r17
    3608:	11 f0       	breq	.+4      	; 0x360e <nwkTxDelayTimerHandler+0x4c>
    360a:	c7 01       	movw	r24, r14
    360c:	eb d3       	rcall	.+2006   	; 0x3de4 <SYS_TimerStart>
    360e:	cf 91       	pop	r28
    3610:	1f 91       	pop	r17
    3612:	0f 91       	pop	r16
    3614:	ff 90       	pop	r15
    3616:	ef 90       	pop	r14
    3618:	08 95       	ret

0000361a <nwkTxAckWaitTimerHandler>:
    361a:	ef 92       	push	r14
    361c:	ff 92       	push	r15
    361e:	0f 93       	push	r16
    3620:	1f 93       	push	r17
    3622:	cf 93       	push	r28
    3624:	df 93       	push	r29
    3626:	7c 01       	movw	r14, r24
    3628:	10 e0       	ldi	r17, 0x00	; 0
    362a:	80 e0       	ldi	r24, 0x00	; 0
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	01 e0       	ldi	r16, 0x01	; 1
    3630:	d7 e1       	ldi	r29, 0x17	; 23
    3632:	c0 e1       	ldi	r28, 0x10	; 16
    3634:	16 c0       	rjmp	.+44     	; 0x3662 <nwkTxAckWaitTimerHandler+0x48>
    3636:	fc 01       	movw	r30, r24
    3638:	20 81       	ld	r18, Z
    363a:	26 31       	cpi	r18, 0x16	; 22
    363c:	91 f4       	brne	.+36     	; 0x3662 <nwkTxAckWaitTimerHandler+0x48>
    363e:	ec 57       	subi	r30, 0x7C	; 124
    3640:	ff 4f       	sbci	r31, 0xFF	; 255
    3642:	20 81       	ld	r18, Z
    3644:	31 81       	ldd	r19, Z+1	; 0x01
    3646:	21 50       	subi	r18, 0x01	; 1
    3648:	31 09       	sbc	r19, r1
    364a:	31 83       	std	Z+1, r19	; 0x01
    364c:	20 83       	st	Z, r18
    364e:	23 2b       	or	r18, r19
    3650:	39 f4       	brne	.+14     	; 0x3660 <nwkTxAckWaitTimerHandler+0x46>
    3652:	fc 01       	movw	r30, r24
    3654:	d0 83       	st	Z, r29
    3656:	ed 57       	subi	r30, 0x7D	; 125
    3658:	ff 4f       	sbci	r31, 0xFF	; 255
    365a:	c0 83       	st	Z, r28
    365c:	10 2f       	mov	r17, r16
    365e:	01 c0       	rjmp	.+2      	; 0x3662 <nwkTxAckWaitTimerHandler+0x48>
    3660:	10 2f       	mov	r17, r16
    3662:	47 df       	rcall	.-370    	; 0x34f2 <nwkFrameNext>
    3664:	00 97       	sbiw	r24, 0x00	; 0
    3666:	39 f7       	brne	.-50     	; 0x3636 <nwkTxAckWaitTimerHandler+0x1c>
    3668:	11 23       	and	r17, r17
    366a:	11 f0       	breq	.+4      	; 0x3670 <nwkTxAckWaitTimerHandler+0x56>
    366c:	c7 01       	movw	r24, r14
    366e:	ba d3       	rcall	.+1908   	; 0x3de4 <SYS_TimerStart>
    3670:	df 91       	pop	r29
    3672:	cf 91       	pop	r28
    3674:	1f 91       	pop	r17
    3676:	0f 91       	pop	r16
    3678:	ff 90       	pop	r15
    367a:	ef 90       	pop	r14
    367c:	08 95       	ret

0000367e <nwkTxInit>:
    367e:	10 92 6b 0b 	sts	0x0B6B, r1
    3682:	10 92 6a 0b 	sts	0x0B6A, r1
    3686:	ed e5       	ldi	r30, 0x5D	; 93
    3688:	fb e0       	ldi	r31, 0x0B	; 11
    368a:	82 e3       	ldi	r24, 0x32	; 50
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	a0 e0       	ldi	r26, 0x00	; 0
    3690:	b0 e0       	ldi	r27, 0x00	; 0
    3692:	86 83       	std	Z+6, r24	; 0x06
    3694:	97 83       	std	Z+7, r25	; 0x07
    3696:	a0 87       	std	Z+8, r26	; 0x08
    3698:	b1 87       	std	Z+9, r27	; 0x09
    369a:	12 86       	std	Z+10, r1	; 0x0a
    369c:	8d e0       	ldi	r24, 0x0D	; 13
    369e:	9b e1       	ldi	r25, 0x1B	; 27
    36a0:	94 87       	std	Z+12, r25	; 0x0c
    36a2:	83 87       	std	Z+11, r24	; 0x0b
    36a4:	e0 e5       	ldi	r30, 0x50	; 80
    36a6:	fb e0       	ldi	r31, 0x0B	; 11
    36a8:	8a e0       	ldi	r24, 0x0A	; 10
    36aa:	90 e0       	ldi	r25, 0x00	; 0
    36ac:	a0 e0       	ldi	r26, 0x00	; 0
    36ae:	b0 e0       	ldi	r27, 0x00	; 0
    36b0:	86 83       	std	Z+6, r24	; 0x06
    36b2:	97 83       	std	Z+7, r25	; 0x07
    36b4:	a0 87       	std	Z+8, r26	; 0x08
    36b6:	b1 87       	std	Z+9, r27	; 0x09
    36b8:	12 86       	std	Z+10, r1	; 0x0a
    36ba:	81 ee       	ldi	r24, 0xE1	; 225
    36bc:	9a e1       	ldi	r25, 0x1A	; 26
    36be:	94 87       	std	Z+12, r25	; 0x0c
    36c0:	83 87       	std	Z+11, r24	; 0x0b
    36c2:	08 95       	ret

000036c4 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    36c4:	cf 93       	push	r28
    36c6:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    36c8:	fc 01       	movw	r30, r24
    36ca:	c7 81       	ldd	r28, Z+7	; 0x07
    36cc:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    36ce:	81 85       	ldd	r24, Z+9	; 0x09
    36d0:	83 30       	cpi	r24, 0x03	; 3
    36d2:	c1 f4       	brne	.+48     	; 0x3704 <nwkTxAckReceived+0x40>
    36d4:	80 e0       	ldi	r24, 0x00	; 0
    36d6:	90 e0       	ldi	r25, 0x00	; 0
    36d8:	10 c0       	rjmp	.+32     	; 0x36fa <nwkTxAckReceived+0x36>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
    36da:	fc 01       	movw	r30, r24
    36dc:	20 81       	ld	r18, Z
    36de:	26 31       	cpi	r18, 0x16	; 22
    36e0:	61 f4       	brne	.+24     	; 0x36fa <nwkTxAckReceived+0x36>
    36e2:	34 85       	ldd	r19, Z+12	; 0x0c
    36e4:	29 81       	ldd	r18, Y+1	; 0x01
    36e6:	32 13       	cpse	r19, r18
    36e8:	08 c0       	rjmp	.+16     	; 0x36fa <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    36ea:	27 e1       	ldi	r18, 0x17	; 23
    36ec:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    36ee:	2a 81       	ldd	r18, Y+2	; 0x02
    36f0:	ea 57       	subi	r30, 0x7A	; 122
    36f2:	ff 4f       	sbci	r31, 0xFF	; 255
    36f4:	20 83       	st	Z, r18
      return true;
    36f6:	81 e0       	ldi	r24, 0x01	; 1
    36f8:	06 c0       	rjmp	.+12     	; 0x3706 <nwkTxAckReceived+0x42>
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
    36fa:	fb de       	rcall	.-522    	; 0x34f2 <nwkFrameNext>
    36fc:	00 97       	sbiw	r24, 0x00	; 0
    36fe:	69 f7       	brne	.-38     	; 0x36da <nwkTxAckReceived+0x16>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
    3700:	80 e0       	ldi	r24, 0x00	; 0
    3702:	01 c0       	rjmp	.+2      	; 0x3706 <nwkTxAckReceived+0x42>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
    3704:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
    3706:	df 91       	pop	r29
    3708:	cf 91       	pop	r28
    370a:	08 95       	ret

0000370c <phyTrxSetState>:
  phyTrxSetState(TRX_CMD_TRX_OFF);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  if (phyRxState)
    phyTrxSetState(TRX_CMD_RX_AACK_ON);
    370c:	93 e0       	ldi	r25, 0x03	; 3
    370e:	90 93 42 01 	sts	0x0142, r25
    3712:	e1 e4       	ldi	r30, 0x41	; 65
    3714:	f1 e0       	ldi	r31, 0x01	; 1
    3716:	90 81       	ld	r25, Z
    3718:	9f 71       	andi	r25, 0x1F	; 31
    371a:	98 30       	cpi	r25, 0x08	; 8
    371c:	e1 f7       	brne	.-8      	; 0x3716 <phyTrxSetState+0xa>
    371e:	80 93 42 01 	sts	0x0142, r24
    3722:	e1 e4       	ldi	r30, 0x41	; 65
    3724:	f1 e0       	ldi	r31, 0x01	; 1
    3726:	90 81       	ld	r25, Z
    3728:	9f 71       	andi	r25, 0x1F	; 31
    372a:	98 13       	cpse	r25, r24
    372c:	fc cf       	rjmp	.-8      	; 0x3726 <phyTrxSetState+0x1a>
    372e:	08 95       	ret

00003730 <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
    3730:	e9 e3       	ldi	r30, 0x39	; 57
    3732:	f1 e0       	ldi	r31, 0x01	; 1
    3734:	80 81       	ld	r24, Z
    3736:	81 60       	ori	r24, 0x01	; 1
    3738:	80 83       	st	Z, r24

  phyRxState = false;
    373a:	10 92 6d 0b 	sts	0x0B6D, r1
  phyBand = 0;
    373e:	10 92 6c 0b 	sts	0x0B6C, r1
  phyState = PHY_STATE_IDLE;
    3742:	81 e0       	ldi	r24, 0x01	; 1
    3744:	80 93 6e 0b 	sts	0x0B6E, r24

  phyTrxSetState(TRX_CMD_TRX_OFF);
    3748:	88 e0       	ldi	r24, 0x08	; 8
    374a:	e0 df       	rcall	.-64     	; 0x370c <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
    374c:	8b ee       	ldi	r24, 0xEB	; 235
    374e:	80 93 56 01 	sts	0x0156, r24

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
    3752:	ec e4       	ldi	r30, 0x4C	; 76
    3754:	f1 e0       	ldi	r31, 0x01	; 1
    3756:	80 81       	ld	r24, Z
    3758:	80 68       	ori	r24, 0x80	; 128
    375a:	80 83       	st	Z, r24
    375c:	08 95       	ret

0000375e <sensor_handler>:

/*************************************************************************//**
  @brief sensor_handler function to decide the execution logic of a sensor according to its state, return 1 if it has some borrow time 
*****************************************************************************/
int sensor_handler( struct event *p )
{
    375e:	0f 93       	push	r16
    3760:	1f 93       	push	r17
    3762:	cf 93       	push	r28
    3764:	df 93       	push	r29
    3766:	ec 01       	movw	r28, r24
	int retNum;
	BaseSensor *sp;
	/* sanity check */
	if( p == EV_NULL )
    3768:	89 2b       	or	r24, r25
    376a:	59 f4       	brne	.+22     	; 0x3782 <sensor_handler+0x24>
	{
		#ifdef DEBUG
		printf("Null Event Error !!!");
    376c:	86 ed       	ldi	r24, 0xD6	; 214
    376e:	94 e0       	ldi	r25, 0x04	; 4
    3770:	9f 93       	push	r25
    3772:	8f 93       	push	r24
    3774:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
		#endif
		return 0;
    3778:	0f 90       	pop	r0
    377a:	0f 90       	pop	r0
    377c:	80 e0       	ldi	r24, 0x00	; 0
    377e:	90 e0       	ldi	r25, 0x00	; 0
    3780:	70 c0       	rjmp	.+224    	; 0x3862 <sensor_handler+0x104>
	}
	sp = ( BaseSensor * )( p->sp );
    3782:	08 89       	ldd	r16, Y+16	; 0x10
    3784:	19 89       	ldd	r17, Y+17	; 0x11

	#ifdef DEBUG
	// printf("cur_state = %d\n", p->cur_state);
	#endif
	switch( p->cur_state )
    3786:	98 8d       	ldd	r25, Y+24	; 0x18
    3788:	91 30       	cpi	r25, 0x01	; 1
    378a:	a9 f0       	breq	.+42     	; 0x37b6 <sensor_handler+0x58>
    378c:	38 f0       	brcs	.+14     	; 0x379c <sensor_handler+0x3e>
    378e:	92 30       	cpi	r25, 0x02	; 2
    3790:	09 f4       	brne	.+2      	; 0x3794 <sensor_handler+0x36>
    3792:	4e c0       	rjmp	.+156    	; 0x3830 <sensor_handler+0xd2>
    3794:	94 30       	cpi	r25, 0x04	; 4
    3796:	09 f4       	brne	.+2      	; 0x379a <sensor_handler+0x3c>
    3798:	5a c0       	rjmp	.+180    	; 0x384e <sensor_handler+0xf0>
    379a:	61 c0       	rjmp	.+194    	; 0x385e <sensor_handler+0x100>
	{
		/* New : init first, if retNum is not 0 goto Oops state */
		case New :
		// the way to call init() is different than most other functions, since it is virtual function in BaseDevice .
		retNum = sp->abstract.device_vt->init( &(sp->abstract) );
    379c:	d8 01       	movw	r26, r16
    379e:	ed 91       	ld	r30, X+
    37a0:	fc 91       	ld	r31, X
    37a2:	02 80       	ldd	r0, Z+2	; 0x02
    37a4:	f3 81       	ldd	r31, Z+3	; 0x03
    37a6:	e0 2d       	mov	r30, r0
    37a8:	c8 01       	movw	r24, r16
    37aa:	19 95       	eicall
		if(retNum != 0)
		{
			p->cur_state = Oops;
		}
		p->cur_state = Ready;
    37ac:	81 e0       	ldi	r24, 0x01	; 1
    37ae:	88 8f       	std	Y+24, r24	; 0x18
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    37b0:	80 e0       	ldi	r24, 0x00	; 0
    37b2:	90 e0       	ldi	r25, 0x00	; 0
		if(retNum != 0)
		{
			p->cur_state = Oops;
		}
		p->cur_state = Ready;
		break;
    37b4:	56 c0       	rjmp	.+172    	; 0x3862 <sensor_handler+0x104>
		
		
		
		/* Ready : ready to activate collection request, if retNum is not 0 goto Oops state */
		case Ready :
		retNum = sp->vmt->Request(p->sp);
    37b6:	d8 01       	movw	r26, r16
    37b8:	1c 96       	adiw	r26, 0x0c	; 12
    37ba:	ed 91       	ld	r30, X+
    37bc:	fc 91       	ld	r31, X
    37be:	1d 97       	sbiw	r26, 0x0d	; 13
    37c0:	04 80       	ldd	r0, Z+4	; 0x04
    37c2:	f5 81       	ldd	r31, Z+5	; 0x05
    37c4:	e0 2d       	mov	r30, r0
    37c6:	c8 01       	movw	r24, r16
    37c8:	19 95       	eicall
		if ( retNum == -1 )
    37ca:	8f 3f       	cpi	r24, 0xFF	; 255
    37cc:	bf ef       	ldi	r27, 0xFF	; 255
    37ce:	9b 07       	cpc	r25, r27
    37d0:	29 f4       	brne	.+10     	; 0x37dc <sensor_handler+0x7e>
		{
			p->cur_state = Oops;
    37d2:	84 e0       	ldi	r24, 0x04	; 4
    37d4:	88 8f       	std	Y+24, r24	; 0x18
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    37d6:	80 e0       	ldi	r24, 0x00	; 0
    37d8:	90 e0       	ldi	r25, 0x00	; 0
    37da:	43 c0       	rjmp	.+134    	; 0x3862 <sensor_handler+0x104>
		retNum = sp->vmt->Request(p->sp);
		if ( retNum == -1 )
		{
			p->cur_state = Oops;
		}
		else if( retNum == 0 )
    37dc:	00 97       	sbiw	r24, 0x00	; 0
    37de:	81 f4       	brne	.+32     	; 0x3800 <sensor_handler+0xa2>
		{
			p->cur_state = Ready;
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	88 8f       	std	Y+24, r24	; 0x18
			sp->vmt->Collect(p->sp);
    37e4:	d8 01       	movw	r26, r16
    37e6:	1c 96       	adiw	r26, 0x0c	; 12
    37e8:	ed 91       	ld	r30, X+
    37ea:	fc 91       	ld	r31, X
    37ec:	1d 97       	sbiw	r26, 0x0d	; 13
    37ee:	06 80       	ldd	r0, Z+6	; 0x06
    37f0:	f7 81       	ldd	r31, Z+7	; 0x07
    37f2:	e0 2d       	mov	r30, r0
    37f4:	88 89       	ldd	r24, Y+16	; 0x10
    37f6:	99 89       	ldd	r25, Y+17	; 0x11
    37f8:	19 95       	eicall
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    37fa:	80 e0       	ldi	r24, 0x00	; 0
    37fc:	90 e0       	ldi	r25, 0x00	; 0
    37fe:	31 c0       	rjmp	.+98     	; 0x3862 <sensor_handler+0x104>
			// printf("data : %d\n", data);
			// #endif
		}
		else
		{
			p->cur_state = Running;
    3800:	22 e0       	ldi	r18, 0x02	; 2
    3802:	28 8f       	std	Y+24, r18	; 0x18
			p->timeout = (int16_t) retNum;
    3804:	09 2e       	mov	r0, r25
    3806:	00 0c       	add	r0, r0
    3808:	aa 0b       	sbc	r26, r26
    380a:	bb 0b       	sbc	r27, r27
    380c:	8c 83       	std	Y+4, r24	; 0x04
    380e:	9d 83       	std	Y+5, r25	; 0x05
    3810:	ae 83       	std	Y+6, r26	; 0x06
    3812:	bf 83       	std	Y+7, r27	; 0x07
			p->borrow_timeout = (int16_t)  retNum;
    3814:	8c 87       	std	Y+12, r24	; 0x0c
    3816:	9d 87       	std	Y+13, r25	; 0x0d
    3818:	ae 87       	std	Y+14, r26	; 0x0e
    381a:	bf 87       	std	Y+15, r27	; 0x0f
			LL_POP( timeoutq );
    381c:	80 91 78 0d 	lds	r24, 0x0D78
    3820:	90 91 79 0d 	lds	r25, 0x0D79
    3824:	29 d3       	rcall	.+1618   	; 0x3e78 <ll_pop>
			insert_timeoutq_event( p );
    3826:	ce 01       	movw	r24, r28
    3828:	db d0       	rcall	.+438    	; 0x39e0 <insert_timeoutq_event>
			return 1;
    382a:	81 e0       	ldi	r24, 0x01	; 1
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	19 c0       	rjmp	.+50     	; 0x3862 <sensor_handler+0x104>
		
		
		/* Running : ready to pull data right away */
		case Running :
		//      data = p->sp->vmt->Collect();
		p->cur_state = Ready;
    3830:	81 e0       	ldi	r24, 0x01	; 1
    3832:	88 8f       	std	Y+24, r24	; 0x18
		p->sp->vmt->Collect(p->sp);
    3834:	d8 01       	movw	r26, r16
    3836:	1c 96       	adiw	r26, 0x0c	; 12
    3838:	ed 91       	ld	r30, X+
    383a:	fc 91       	ld	r31, X
    383c:	1d 97       	sbiw	r26, 0x0d	; 13
    383e:	06 80       	ldd	r0, Z+6	; 0x06
    3840:	f7 81       	ldd	r31, Z+7	; 0x07
    3842:	e0 2d       	mov	r30, r0
    3844:	c8 01       	movw	r24, r16
    3846:	19 95       	eicall
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    3848:	80 e0       	ldi	r24, 0x00	; 0
    384a:	90 e0       	ldi	r25, 0x00	; 0
		/* Running : ready to pull data right away */
		case Running :
		//      data = p->sp->vmt->Collect();
		p->cur_state = Ready;
		p->sp->vmt->Collect(p->sp);
		break;
    384c:	0a c0       	rjmp	.+20     	; 0x3862 <sensor_handler+0x104>
		
		/* Oops : when some errors occur */
		case Oops :
		/* TODO : ( we may want to do something in reset function and ) re-init by setting the state to new */
#ifdef DEBUG
		      printf("Something really wrong happens\n");
    384e:	8b ee       	ldi	r24, 0xEB	; 235
    3850:	94 e0       	ldi	r25, 0x04	; 4
    3852:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
#endif
		p->cur_state = New;
    3856:	18 8e       	std	Y+24, r1	; 0x18
		break;
	}
	return 0;
    3858:	80 e0       	ldi	r24, 0x00	; 0
    385a:	90 e0       	ldi	r25, 0x00	; 0
		/* TODO : ( we may want to do something in reset function and ) re-init by setting the state to new */
#ifdef DEBUG
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
    385c:	02 c0       	rjmp	.+4      	; 0x3862 <sensor_handler+0x104>
	}
	return 0;
    385e:	80 e0       	ldi	r24, 0x00	; 0
    3860:	90 e0       	ldi	r25, 0x00	; 0
	// printf(" run :\n\t");
	// p->sp->vmt->MyPrint(p->sp);

}
    3862:	df 91       	pop	r29
    3864:	cf 91       	pop	r28
    3866:	1f 91       	pop	r17
    3868:	0f 91       	pop	r16
    386a:	08 95       	ret

0000386c <device_handler>:
 */
/*************************************************************************//**
  @brief device_handler function to decide the execution logic of a non-sensor device according to its state.
*****************************************************************************/
int device_handler( struct event *p )
{
    386c:	0f 93       	push	r16
    386e:	1f 93       	push	r17
    3870:	cf 93       	push	r28
    3872:	df 93       	push	r29
    3874:	fc 01       	movw	r30, r24
	int retNum = 0;
	BaseDevice * bdp = (BaseDevice *) ( p->load_p );
    3876:	c2 89       	ldd	r28, Z+18	; 0x12
    3878:	d3 89       	ldd	r29, Z+19	; 0x13
	LoadDataDevice *ldp = (LoadDataDevice*) ( p->load_p );
	DemoStorageDevice *ddp = (DemoStorageDevice*) ( p->store_p );
    387a:	04 89       	ldd	r16, Z+20	; 0x14
    387c:	15 89       	ldd	r17, Z+21	; 0x15

	/* sanity check */
	if( p == EV_NULL )
    387e:	89 2b       	or	r24, r25
    3880:	29 f4       	brne	.+10     	; 0x388c <device_handler+0x20>
	{
		#ifdef DEBUG
		printf("Null Event Error !!!\n");
    3882:	86 ed       	ldi	r24, 0xD6	; 214
    3884:	94 e0       	ldi	r25, 0x04	; 4
    3886:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
		#endif
		return 0;
    388a:	35 c0       	rjmp	.+106    	; 0x38f6 <device_handler+0x8a>
	}
	
	switch( p->cur_state )
    388c:	90 8d       	ldd	r25, Z+24	; 0x18
    388e:	99 23       	and	r25, r25
    3890:	19 f0       	breq	.+6      	; 0x3898 <device_handler+0x2c>
    3892:	91 30       	cpi	r25, 0x01	; 1
    3894:	21 f0       	breq	.+8      	; 0x389e <device_handler+0x32>
    3896:	2f c0       	rjmp	.+94     	; 0x38f6 <device_handler+0x8a>
	{
		/* New : init first, if retNum is not 0 goto Oops state */
		case New :
			p->cur_state = Ready;
    3898:	81 e0       	ldi	r24, 0x01	; 1
    389a:	80 8f       	std	Z+24, r24	; 0x18
			break;
    389c:	2c c0       	rjmp	.+88     	; 0x38f6 <device_handler+0x8a>
		case Ready :
			p->cur_state = Ready;
			if( bdp->device_vt->getType(bdp) == TYPE_DEVICE )
    389e:	e8 81       	ld	r30, Y
    38a0:	f9 81       	ldd	r31, Y+1	; 0x01
    38a2:	06 80       	ldd	r0, Z+6	; 0x06
    38a4:	f7 81       	ldd	r31, Z+7	; 0x07
    38a6:	e0 2d       	mov	r30, r0
    38a8:	ce 01       	movw	r24, r28
    38aa:	19 95       	eicall
    38ac:	05 97       	sbiw	r24, 0x05	; 5
    38ae:	81 f4       	brne	.+32     	; 0x38d0 <device_handler+0x64>
			{
				printf("Load Device\n");
    38b0:	8a e0       	ldi	r24, 0x0A	; 10
    38b2:	95 e0       	ldi	r25, 0x05	; 5
    38b4:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
				ldp->vmt->Execute(ldp);
    38b8:	ea 81       	ldd	r30, Y+2	; 0x02
    38ba:	fb 81       	ldd	r31, Y+3	; 0x03
    38bc:	02 80       	ldd	r0, Z+2	; 0x02
    38be:	f3 81       	ldd	r31, Z+3	; 0x03
    38c0:	e0 2d       	mov	r30, r0
    38c2:	ce 01       	movw	r24, r28
    38c4:	19 95       	eicall
				printf("Load Device Finish\n");
    38c6:	86 e1       	ldi	r24, 0x16	; 22
    38c8:	95 e0       	ldi	r25, 0x05	; 5
    38ca:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
    38ce:	13 c0       	rjmp	.+38     	; 0x38f6 <device_handler+0x8a>
			}	
			else if( bdp->device_vt->getType(bdp) == TYPE_STORAGE_DEVICE )
    38d0:	e8 81       	ld	r30, Y
    38d2:	f9 81       	ldd	r31, Y+1	; 0x01
    38d4:	06 80       	ldd	r0, Z+6	; 0x06
    38d6:	f7 81       	ldd	r31, Z+7	; 0x07
    38d8:	e0 2d       	mov	r30, r0
    38da:	ce 01       	movw	r24, r28
    38dc:	19 95       	eicall
    38de:	04 97       	sbiw	r24, 0x04	; 4
    38e0:	51 f4       	brne	.+20     	; 0x38f6 <device_handler+0x8a>
			{
				ddp->vmt->Execute(ddp);
    38e2:	d8 01       	movw	r26, r16
    38e4:	12 96       	adiw	r26, 0x02	; 2
    38e6:	ed 91       	ld	r30, X+
    38e8:	fc 91       	ld	r31, X
    38ea:	13 97       	sbiw	r26, 0x03	; 3
    38ec:	02 80       	ldd	r0, Z+2	; 0x02
    38ee:	f3 81       	ldd	r31, Z+3	; 0x03
    38f0:	e0 2d       	mov	r30, r0
    38f2:	c8 01       	movw	r24, r16
    38f4:	19 95       	eicall
			break;
		default :
			break;
	}
	return retNum;
}
    38f6:	80 e0       	ldi	r24, 0x00	; 0
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	df 91       	pop	r29
    38fc:	cf 91       	pop	r28
    38fe:	1f 91       	pop	r17
    3900:	0f 91       	pop	r16
    3902:	08 95       	ret

00003904 <init_timeoutq>:

/*************************************************************************//**
  @brief Init function of scheduler, which initialize all events and put them into freelist
*****************************************************************************/
void init_timeoutq()
{
    3904:	0f 93       	push	r16
    3906:	1f 93       	push	r17
    3908:	cf 93       	push	r28
    390a:	df 93       	push	r29
	int i;

	timeoutq = (struct event *)&TQ;
    390c:	e4 e7       	ldi	r30, 0x74	; 116
    390e:	fd e0       	ldi	r31, 0x0D	; 13
    3910:	f0 93 79 0d 	sts	0x0D79, r31
    3914:	e0 93 78 0d 	sts	0x0D78, r30
	LL_INIT(timeoutq);
    3918:	f3 83       	std	Z+3, r31	; 0x03
    391a:	e2 83       	std	Z+2, r30	; 0x02
    391c:	f1 83       	std	Z+1, r31	; 0x01
    391e:	e0 83       	st	Z, r30
	freelist = (struct event *)&FL;
    3920:	ec ec       	ldi	r30, 0xCC	; 204
    3922:	fd e0       	ldi	r31, 0x0D	; 13
    3924:	f0 93 d1 0d 	sts	0x0DD1, r31
    3928:	e0 93 d0 0d 	sts	0x0DD0, r30
	LL_INIT(freelist);
    392c:	f3 83       	std	Z+3, r31	; 0x03
    392e:	e2 83       	std	Z+2, r30	; 0x02
    3930:	f1 83       	std	Z+1, r31	; 0x01
    3932:	e0 83       	st	Z, r30
    3934:	c4 ec       	ldi	r28, 0xC4	; 196
    3936:	db e0       	ldi	r29, 0x0B	; 11
    3938:	04 e7       	ldi	r16, 0x74	; 116
    393a:	1d e0       	ldi	r17, 0x0D	; 13

	for (i=0; i<MAX_EVENTS; i++) {
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
    393c:	be 01       	movw	r22, r28
    393e:	80 91 d0 0d 	lds	r24, 0x0DD0
    3942:	90 91 d1 0d 	lds	r25, 0x0DD1
    3946:	62 d2       	rcall	.+1220   	; 0x3e0c <ll_r_insert>
    3948:	6b 96       	adiw	r28, 0x1b	; 27
	timeoutq = (struct event *)&TQ;
	LL_INIT(timeoutq);
	freelist = (struct event *)&FL;
	LL_INIT(freelist);

	for (i=0; i<MAX_EVENTS; i++) {
    394a:	c0 17       	cp	r28, r16
    394c:	d1 07       	cpc	r29, r17
    394e:	b1 f7       	brne	.-20     	; 0x393c <init_timeoutq+0x38>
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
	}

	return;
}
    3950:	df 91       	pop	r29
    3952:	cf 91       	pop	r28
    3954:	1f 91       	pop	r17
    3956:	0f 91       	pop	r16
    3958:	08 95       	ret

0000395a <next_event_time_collapse>:

/*************************************************************************//**
  @brief Update next event's timeout value when we set timer for it.
*****************************************************************************/
void next_event_time_collapse(int32_t sleep_time)
{
    395a:	cf 92       	push	r12
    395c:	df 92       	push	r13
    395e:	ef 92       	push	r14
    3960:	ff 92       	push	r15
    3962:	6b 01       	movw	r12, r22
    3964:	7c 01       	movw	r14, r24
	struct event * ev = ( struct event * ) LL_TOP( timeoutq );
    3966:	80 91 78 0d 	lds	r24, 0x0D78
    396a:	90 91 79 0d 	lds	r25, 0x0D79
    396e:	45 d2       	rcall	.+1162   	; 0x3dfa <ll_first>
	if( EV_NULL == ev )
    3970:	00 97       	sbiw	r24, 0x00	; 0
    3972:	69 f0       	breq	.+26     	; 0x398e <next_event_time_collapse+0x34>
		return;
	ev->timeout -= sleep_time;
    3974:	fc 01       	movw	r30, r24
    3976:	44 81       	ldd	r20, Z+4	; 0x04
    3978:	55 81       	ldd	r21, Z+5	; 0x05
    397a:	66 81       	ldd	r22, Z+6	; 0x06
    397c:	77 81       	ldd	r23, Z+7	; 0x07
    397e:	4c 19       	sub	r20, r12
    3980:	5d 09       	sbc	r21, r13
    3982:	6e 09       	sbc	r22, r14
    3984:	7f 09       	sbc	r23, r15
    3986:	44 83       	std	Z+4, r20	; 0x04
    3988:	55 83       	std	Z+5, r21	; 0x05
    398a:	66 83       	std	Z+6, r22	; 0x06
    398c:	77 83       	std	Z+7, r23	; 0x07
}
    398e:	ff 90       	pop	r15
    3990:	ef 90       	pop	r14
    3992:	df 90       	pop	r13
    3994:	cf 90       	pop	r12
    3996:	08 95       	ret

00003998 <get_next_interval>:
*****************************************************************************/
int32_t get_next_interval()
{

	int32_t wait_time = MAX_SLEEP_INTERVAL;
	struct event * ev = ( struct event * ) LL_TOP( timeoutq );
    3998:	80 91 78 0d 	lds	r24, 0x0D78
    399c:	90 91 79 0d 	lds	r25, 0x0D79
    39a0:	2c d2       	rcall	.+1112   	; 0x3dfa <ll_first>

	/* sanity check */
    /* no event in queue */
    /* TODO : to optimize the sleep time or let the CPU sleep or set up some other interrupts */
	if( EV_NULL == ev )
    39a2:	00 97       	sbiw	r24, 0x00	; 0
    39a4:	69 f4       	brne	.+26     	; 0x39c0 <get_next_interval+0x28>
	{
#ifdef DEBUG
		printf("we may get some memory leakage issue, or something really bad occurs\n");
    39a6:	89 e2       	ldi	r24, 0x29	; 41
    39a8:	95 e0       	ldi	r25, 0x05	; 5
    39aa:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
		printf("so we are going to take some really sleep, since no event in scheduler\n");
    39ae:	8e e6       	ldi	r24, 0x6E	; 110
    39b0:	95 e0       	ldi	r25, 0x05	; 5
    39b2:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
#endif
	    return wait_time;
    39b6:	60 e4       	ldi	r22, 0x40	; 64
    39b8:	7f e1       	ldi	r23, 0x1F	; 31
    39ba:	80 e0       	ldi	r24, 0x00	; 0
    39bc:	90 e0       	ldi	r25, 0x00	; 0
    39be:	08 95       	ret
	}
	
	/* if the next event is nearer */
	if( wait_time > ev->timeout )
    39c0:	fc 01       	movw	r30, r24
    39c2:	64 81       	ldd	r22, Z+4	; 0x04
    39c4:	75 81       	ldd	r23, Z+5	; 0x05
    39c6:	86 81       	ldd	r24, Z+6	; 0x06
    39c8:	97 81       	ldd	r25, Z+7	; 0x07
    39ca:	60 34       	cpi	r22, 0x40	; 64
    39cc:	ff e1       	ldi	r31, 0x1F	; 31
    39ce:	7f 07       	cpc	r23, r31
    39d0:	81 05       	cpc	r24, r1
    39d2:	91 05       	cpc	r25, r1
    39d4:	24 f0       	brlt	.+8      	; 0x39de <get_next_interval+0x46>
  @brief Return the the time ( ms ) of the next event
*****************************************************************************/
int32_t get_next_interval()
{

	int32_t wait_time = MAX_SLEEP_INTERVAL;
    39d6:	60 e4       	ldi	r22, 0x40	; 64
    39d8:	7f e1       	ldi	r23, 0x1F	; 31
    39da:	80 e0       	ldi	r24, 0x00	; 0
    39dc:	90 e0       	ldi	r25, 0x00	; 0
	{
		wait_time = ev->timeout;
	}
	/* if the next event time is longer, we need to wait it time by time in handle_timeoutq_event() function, since currently, the longest waiting time support is 8s */
	return wait_time;
}
    39de:	08 95       	ret

000039e0 <insert_timeoutq_event>:

/*************************************************************************//**
  @brief Insert a new event into the scheduler according to timeout order
*****************************************************************************/
void insert_timeoutq_event( struct event * ep)
{
    39e0:	0f 93       	push	r16
    39e2:	1f 93       	push	r17
    39e4:	cf 93       	push	r28
    39e6:	df 93       	push	r29
    39e8:	dc 01       	movw	r26, r24
	// Try to insert it according to timeout and timeoutq
	struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
    39ea:	c0 91 78 0d 	lds	r28, 0x0D78
    39ee:	d0 91 79 0d 	lds	r29, 0x0D79
    39f2:	ea 81       	ldd	r30, Y+2	; 0x02
    39f4:	fb 81       	ldd	r31, Y+3	; 0x03
    39f6:	ce 17       	cp	r28, r30
    39f8:	df 07       	cpc	r29, r31
    39fa:	71 f1       	breq	.+92     	; 0x3a58 <insert_timeoutq_event+0x78>
	{
		if( it != EV_NULL )
    39fc:	30 97       	sbiw	r30, 0x00	; 0
    39fe:	31 f1       	breq	.+76     	; 0x3a4c <insert_timeoutq_event+0x6c>
		{
			if( ( it->timeout ) > ( ep->timeout ) )
    3a00:	04 81       	ldd	r16, Z+4	; 0x04
    3a02:	15 81       	ldd	r17, Z+5	; 0x05
    3a04:	26 81       	ldd	r18, Z+6	; 0x06
    3a06:	37 81       	ldd	r19, Z+7	; 0x07
    3a08:	14 96       	adiw	r26, 0x04	; 4
    3a0a:	4d 91       	ld	r20, X+
    3a0c:	5d 91       	ld	r21, X+
    3a0e:	6d 91       	ld	r22, X+
    3a10:	7c 91       	ld	r23, X
    3a12:	17 97       	sbiw	r26, 0x07	; 7
    3a14:	40 17       	cp	r20, r16
    3a16:	51 07       	cpc	r21, r17
    3a18:	62 07       	cpc	r22, r18
    3a1a:	73 07       	cpc	r23, r19
    3a1c:	6c f4       	brge	.+26     	; 0x3a38 <insert_timeoutq_event+0x58>
			{
				it->timeout -= ep->timeout;
    3a1e:	04 1b       	sub	r16, r20
    3a20:	15 0b       	sbc	r17, r21
    3a22:	26 0b       	sbc	r18, r22
    3a24:	37 0b       	sbc	r19, r23
    3a26:	04 83       	std	Z+4, r16	; 0x04
    3a28:	15 83       	std	Z+5, r17	; 0x05
    3a2a:	26 83       	std	Z+6, r18	; 0x06
    3a2c:	37 83       	std	Z+7, r19	; 0x07
				LL_L_INSERT( it, ep );
    3a2e:	bd 01       	movw	r22, r26
    3a30:	80 81       	ld	r24, Z
    3a32:	91 81       	ldd	r25, Z+1	; 0x01
    3a34:	eb d1       	rcall	.+982    	; 0x3e0c <ll_r_insert>
    3a36:	18 c0       	rjmp	.+48     	; 0x3a68 <insert_timeoutq_event+0x88>
				// printf("left insert \n");
				break;
			}
			else
			{
				ep->timeout -= it->timeout;
    3a38:	40 1b       	sub	r20, r16
    3a3a:	51 0b       	sbc	r21, r17
    3a3c:	62 0b       	sbc	r22, r18
    3a3e:	73 0b       	sbc	r23, r19
    3a40:	14 96       	adiw	r26, 0x04	; 4
    3a42:	4d 93       	st	X+, r20
    3a44:	5d 93       	st	X+, r21
    3a46:	6d 93       	st	X+, r22
    3a48:	7c 93       	st	X, r23
    3a4a:	17 97       	sbiw	r26, 0x07	; 7
	// Try to insert it according to timeout and timeoutq
	struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
    3a4c:	02 80       	ldd	r0, Z+2	; 0x02
    3a4e:	f3 81       	ldd	r31, Z+3	; 0x03
    3a50:	e0 2d       	mov	r30, r0
    3a52:	ce 17       	cp	r28, r30
    3a54:	df 07       	cpc	r29, r31
    3a56:	91 f6       	brne	.-92     	; 0x39fc <insert_timeoutq_event+0x1c>
	}
	
	// If not insert it left to the header
	if( is_pushed == 0 )
	{
		LL_APPEND(timeoutq, ep);
    3a58:	e0 91 78 0d 	lds	r30, 0x0D78
    3a5c:	f0 91 79 0d 	lds	r31, 0x0D79
    3a60:	bd 01       	movw	r22, r26
    3a62:	80 81       	ld	r24, Z
    3a64:	91 81       	ldd	r25, Z+1	; 0x01
    3a66:	d2 d1       	rcall	.+932    	; 0x3e0c <ll_r_insert>

	#ifdef DEBUG
	// dump_timeoutq();
	#endif

}
    3a68:	df 91       	pop	r29
    3a6a:	cf 91       	pop	r28
    3a6c:	1f 91       	pop	r17
    3a6e:	0f 91       	pop	r16
    3a70:	08 95       	ret

00003a72 <load_new_sensor>:

/*************************************************************************//**
  @brief Load a brand new sensor activity into the scheduler's timeoutQ
*****************************************************************************/
int load_new_sensor( int32_t timeout, int32_t repeat, BaseSensor *device_ptr, int otherinfo )
{
    3a72:	4f 92       	push	r4
    3a74:	5f 92       	push	r5
    3a76:	6f 92       	push	r6
    3a78:	7f 92       	push	r7
    3a7a:	8f 92       	push	r8
    3a7c:	9f 92       	push	r9
    3a7e:	af 92       	push	r10
    3a80:	bf 92       	push	r11
    3a82:	ef 92       	push	r14
    3a84:	ff 92       	push	r15
    3a86:	0f 93       	push	r16
    3a88:	1f 93       	push	r17
    3a8a:	2b 01       	movw	r4, r22
    3a8c:	3c 01       	movw	r6, r24
    3a8e:	49 01       	movw	r8, r18
    3a90:	5a 01       	movw	r10, r20

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    3a92:	80 91 d0 0d 	lds	r24, 0x0DD0
    3a96:	90 91 d1 0d 	lds	r25, 0x0DD1
    3a9a:	ee d1       	rcall	.+988    	; 0x3e78 <ll_pop>
    3a9c:	fc 01       	movw	r30, r24
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
    3a9e:	89 2b       	or	r24, r25
    3aa0:	d9 f0       	breq	.+54     	; 0x3ad8 <load_new_sensor+0x66>
        return -1;
    ep->timeout = timeout;
    3aa2:	44 82       	std	Z+4, r4	; 0x04
    3aa4:	55 82       	std	Z+5, r5	; 0x05
    3aa6:	66 82       	std	Z+6, r6	; 0x06
    3aa8:	77 82       	std	Z+7, r7	; 0x07
    ep->repeat_interval = repeat;
    3aaa:	80 86       	std	Z+8, r8	; 0x08
    3aac:	91 86       	std	Z+9, r9	; 0x09
    3aae:	a2 86       	std	Z+10, r10	; 0x0a
    3ab0:	b3 86       	std	Z+11, r11	; 0x0b
	ep->borrow_timeout = 0;
    3ab2:	14 86       	std	Z+12, r1	; 0x0c
    3ab4:	15 86       	std	Z+13, r1	; 0x0d
    3ab6:	16 86       	std	Z+14, r1	; 0x0e
    3ab8:	17 86       	std	Z+15, r1	; 0x0f
    ep->sp = device_ptr;
    3aba:	11 8b       	std	Z+17, r17	; 0x11
    3abc:	00 8b       	std	Z+16, r16	; 0x10
    ep->info = otherinfo;
    3abe:	f7 8a       	std	Z+23, r15	; 0x17
    3ac0:	e6 8a       	std	Z+22, r14	; 0x16
    ep->cur_state = Ready;
    3ac2:	81 e0       	ldi	r24, 0x01	; 1
    3ac4:	80 8f       	std	Z+24, r24	; 0x18
    ep->run = sensor_handler;
    3ac6:	8f ea       	ldi	r24, 0xAF	; 175
    3ac8:	9b e1       	ldi	r25, 0x1B	; 27
    3aca:	92 8f       	std	Z+26, r25	; 0x1a
    3acc:	81 8f       	std	Z+25, r24	; 0x19
    insert_timeoutq_event( ep );
    3ace:	cf 01       	movw	r24, r30
    3ad0:	87 df       	rcall	.-242    	; 0x39e0 <insert_timeoutq_event>
    return 0;
    3ad2:	80 e0       	ldi	r24, 0x00	; 0
    3ad4:	90 e0       	ldi	r25, 0x00	; 0
    3ad6:	02 c0       	rjmp	.+4      	; 0x3adc <load_new_sensor+0x6a>

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
        return -1;
    3ad8:	8f ef       	ldi	r24, 0xFF	; 255
    3ada:	9f ef       	ldi	r25, 0xFF	; 255
    ep->info = otherinfo;
    ep->cur_state = Ready;
    ep->run = sensor_handler;
    insert_timeoutq_event( ep );
    return 0;
}
    3adc:	1f 91       	pop	r17
    3ade:	0f 91       	pop	r16
    3ae0:	ff 90       	pop	r15
    3ae2:	ef 90       	pop	r14
    3ae4:	bf 90       	pop	r11
    3ae6:	af 90       	pop	r10
    3ae8:	9f 90       	pop	r9
    3aea:	8f 90       	pop	r8
    3aec:	7f 90       	pop	r7
    3aee:	6f 90       	pop	r6
    3af0:	5f 90       	pop	r5
    3af2:	4f 90       	pop	r4
    3af4:	08 95       	ret

00003af6 <load_new_device>:

/*************************************************************************//**
  @brief Load a brand new device activity into the scheduler's timeoutQ
*****************************************************************************/
int load_new_device( int32_t timeout, int32_t repeat, BaseDevice *device_ptr, int otherinfo )
{
    3af6:	4f 92       	push	r4
    3af8:	5f 92       	push	r5
    3afa:	6f 92       	push	r6
    3afc:	7f 92       	push	r7
    3afe:	8f 92       	push	r8
    3b00:	9f 92       	push	r9
    3b02:	af 92       	push	r10
    3b04:	bf 92       	push	r11
    3b06:	ef 92       	push	r14
    3b08:	ff 92       	push	r15
    3b0a:	0f 93       	push	r16
    3b0c:	1f 93       	push	r17
    3b0e:	2b 01       	movw	r4, r22
    3b10:	3c 01       	movw	r6, r24
    3b12:	49 01       	movw	r8, r18
    3b14:	5a 01       	movw	r10, r20

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    3b16:	80 91 d0 0d 	lds	r24, 0x0DD0
    3b1a:	90 91 d1 0d 	lds	r25, 0x0DD1
    3b1e:	ac d1       	rcall	.+856    	; 0x3e78 <ll_pop>
    3b20:	fc 01       	movw	r30, r24
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
    3b22:	89 2b       	or	r24, r25
    3b24:	e9 f0       	breq	.+58     	; 0x3b60 <load_new_device+0x6a>
        return -1;
    ep->timeout = timeout;
    3b26:	44 82       	std	Z+4, r4	; 0x04
    3b28:	55 82       	std	Z+5, r5	; 0x05
    3b2a:	66 82       	std	Z+6, r6	; 0x06
    3b2c:	77 82       	std	Z+7, r7	; 0x07
    ep->repeat_interval = repeat;
    3b2e:	80 86       	std	Z+8, r8	; 0x08
    3b30:	91 86       	std	Z+9, r9	; 0x09
    3b32:	a2 86       	std	Z+10, r10	; 0x0a
    3b34:	b3 86       	std	Z+11, r11	; 0x0b
	ep->borrow_timeout = 0;
    3b36:	14 86       	std	Z+12, r1	; 0x0c
    3b38:	15 86       	std	Z+13, r1	; 0x0d
    3b3a:	16 86       	std	Z+14, r1	; 0x0e
    3b3c:	17 86       	std	Z+15, r1	; 0x0f
    ep->load_p = device_ptr;
    3b3e:	13 8b       	std	Z+19, r17	; 0x13
    3b40:	02 8b       	std	Z+18, r16	; 0x12
	ep->store_p = device_ptr;
    3b42:	15 8b       	std	Z+21, r17	; 0x15
    3b44:	04 8b       	std	Z+20, r16	; 0x14
    ep->info = otherinfo;
    3b46:	f7 8a       	std	Z+23, r15	; 0x17
    3b48:	e6 8a       	std	Z+22, r14	; 0x16
    ep->cur_state = Ready;
    3b4a:	81 e0       	ldi	r24, 0x01	; 1
    3b4c:	80 8f       	std	Z+24, r24	; 0x18
    ep->run = device_handler;
    3b4e:	86 e3       	ldi	r24, 0x36	; 54
    3b50:	9c e1       	ldi	r25, 0x1C	; 28
    3b52:	92 8f       	std	Z+26, r25	; 0x1a
    3b54:	81 8f       	std	Z+25, r24	; 0x19
    insert_timeoutq_event( ep );
    3b56:	cf 01       	movw	r24, r30
    3b58:	43 df       	rcall	.-378    	; 0x39e0 <insert_timeoutq_event>
    return 0;
    3b5a:	80 e0       	ldi	r24, 0x00	; 0
    3b5c:	90 e0       	ldi	r25, 0x00	; 0
    3b5e:	02 c0       	rjmp	.+4      	; 0x3b64 <load_new_device+0x6e>

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
        return -1;
    3b60:	8f ef       	ldi	r24, 0xFF	; 255
    3b62:	9f ef       	ldi	r25, 0xFF	; 255
    ep->info = otherinfo;
    ep->cur_state = Ready;
    ep->run = device_handler;
    insert_timeoutq_event( ep );
    return 0;
}
    3b64:	1f 91       	pop	r17
    3b66:	0f 91       	pop	r16
    3b68:	ff 90       	pop	r15
    3b6a:	ef 90       	pop	r14
    3b6c:	bf 90       	pop	r11
    3b6e:	af 90       	pop	r10
    3b70:	9f 90       	pop	r9
    3b72:	8f 90       	pop	r8
    3b74:	7f 90       	pop	r7
    3b76:	6f 90       	pop	r6
    3b78:	5f 90       	pop	r5
    3b7a:	4f 90       	pop	r4
    3b7c:	08 95       	ret

00003b7e <handle_timeoutq_event>:

/*************************************************************************//**
  @brief Handle the next event in timeoutQ: execute the event's handler function according to the device type, re-insert it according to the period, and set a timer of next event.
*****************************************************************************/
int handle_timeoutq_event( )
{
    3b7e:	cf 92       	push	r12
    3b80:	df 92       	push	r13
    3b82:	ef 92       	push	r14
    3b84:	ff 92       	push	r15
    3b86:	0f 93       	push	r16
    3b88:	1f 93       	push	r17
    3b8a:	cf 93       	push	r28
    3b8c:	df 93       	push	r29
	int retNum, sleep_time;
	/* assume we get a valid one */
	struct event * ev = (struct event * )LL_TOP( timeoutq );
    3b8e:	80 91 78 0d 	lds	r24, 0x0D78
    3b92:	90 91 79 0d 	lds	r25, 0x0D79
    3b96:	31 d1       	rcall	.+610    	; 0x3dfa <ll_first>
    3b98:	ec 01       	movw	r28, r24
	if( EV_NULL == ev )
    3b9a:	89 2b       	or	r24, r25
    3b9c:	39 f4       	brne	.+14     	; 0x3bac <handle_timeoutq_event+0x2e>
	{
		printf("err\n");
    3b9e:	85 eb       	ldi	r24, 0xB5	; 181
    3ba0:	95 e0       	ldi	r25, 0x05	; 5
    3ba2:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
        return -1;
    3ba6:	8f ef       	ldi	r24, 0xFF	; 255
    3ba8:	9f ef       	ldi	r25, 0xFF	; 255
    3baa:	8b c0       	rjmp	.+278    	; 0x3cc2 <handle_timeoutq_event+0x144>
	}
    
    /* sanity check */
    if( ev->sp == NULL && ev->load_p == NULL && ev->store_p == NULL)
    3bac:	88 89       	ldd	r24, Y+16	; 0x10
    3bae:	99 89       	ldd	r25, Y+17	; 0x11
    3bb0:	89 2b       	or	r24, r25
    3bb2:	49 f4       	brne	.+18     	; 0x3bc6 <handle_timeoutq_event+0x48>
    3bb4:	8a 89       	ldd	r24, Y+18	; 0x12
    3bb6:	9b 89       	ldd	r25, Y+19	; 0x13
    3bb8:	89 2b       	or	r24, r25
    3bba:	29 f4       	brne	.+10     	; 0x3bc6 <handle_timeoutq_event+0x48>
    3bbc:	8c 89       	ldd	r24, Y+20	; 0x14
    3bbe:	9d 89       	ldd	r25, Y+21	; 0x15
    3bc0:	89 2b       	or	r24, r25
    3bc2:	09 f4       	brne	.+2      	; 0x3bc6 <handle_timeoutq_event+0x48>
    3bc4:	7c c0       	rjmp	.+248    	; 0x3cbe <handle_timeoutq_event+0x140>
        return -1;

	/* if it is not the right time, re-set the timer */
	if( ev->timeout != 0 )
    3bc6:	8c 81       	ldd	r24, Y+4	; 0x04
    3bc8:	9d 81       	ldd	r25, Y+5	; 0x05
    3bca:	ae 81       	ldd	r26, Y+6	; 0x06
    3bcc:	bf 81       	ldd	r27, Y+7	; 0x07
    3bce:	89 2b       	or	r24, r25
    3bd0:	8a 2b       	or	r24, r26
    3bd2:	8b 2b       	or	r24, r27
    3bd4:	71 f0       	breq	.+28     	; 0x3bf2 <handle_timeoutq_event+0x74>
	{
		sleep_time = get_next_interval();
    3bd6:	e0 de       	rcall	.-576    	; 0x3998 <get_next_interval>
		next_event_time_collapse(sleep_time);
    3bd8:	6b 01       	movw	r12, r22
    3bda:	77 0f       	add	r23, r23
    3bdc:	ee 08       	sbc	r14, r14
    3bde:	ff 08       	sbc	r15, r15
    3be0:	c7 01       	movw	r24, r14
    3be2:	b6 01       	movw	r22, r12
    3be4:	ba de       	rcall	.-652    	; 0x395a <next_event_time_collapse>
		set_timer(sleep_time);
    3be6:	c7 01       	movw	r24, r14
    3be8:	b6 01       	movw	r22, r12
    3bea:	ed d9       	rcall	.-3110   	; 0x2fc6 <set_timer>
		return 0;
    3bec:	80 e0       	ldi	r24, 0x00	; 0
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	68 c0       	rjmp	.+208    	; 0x3cc2 <handle_timeoutq_event+0x144>
	}
	
	/* retNum may need to be designed in other ways */
    retNum = ev->run( ev );
    3bf2:	e9 8d       	ldd	r30, Y+25	; 0x19
    3bf4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    3bf6:	ce 01       	movw	r24, r28
    3bf8:	19 95       	eicall
	/* 
	 * return 1 if it has to with some borrow time( have a request-time!=0 case ) 
	 * which means the event has already entered the scheduler, 
	 * and won't need to do anything else
	 */
	if( retNum == 1 )
    3bfa:	01 97       	sbiw	r24, 0x01	; 1
    3bfc:	a9 f4       	brne	.+42     	; 0x3c28 <handle_timeoutq_event+0xaa>
	{
		sleep_time = get_next_interval();
    3bfe:	cc de       	rcall	.-616    	; 0x3998 <get_next_interval>
		/* judge if the next top in queue has a timeout <= 0, which we may want to handle it right now */
		if( sleep_time == 0 )
    3c00:	61 15       	cp	r22, r1
    3c02:	71 05       	cpc	r23, r1
    3c04:	21 f4       	brne	.+8      	; 0x3c0e <handle_timeoutq_event+0x90>
		{
			handle_timeoutq_event();
    3c06:	bb df       	rcall	.-138    	; 0x3b7e <handle_timeoutq_event>
			return 0;
    3c08:	80 e0       	ldi	r24, 0x00	; 0
    3c0a:	90 e0       	ldi	r25, 0x00	; 0
    3c0c:	5a c0       	rjmp	.+180    	; 0x3cc2 <handle_timeoutq_event+0x144>
		}
		next_event_time_collapse(sleep_time);	
    3c0e:	6b 01       	movw	r12, r22
    3c10:	77 0f       	add	r23, r23
    3c12:	ee 08       	sbc	r14, r14
    3c14:	ff 08       	sbc	r15, r15
    3c16:	c7 01       	movw	r24, r14
    3c18:	b6 01       	movw	r22, r12
    3c1a:	9f de       	rcall	.-706    	; 0x395a <next_event_time_collapse>
		set_timer(sleep_time);
    3c1c:	c7 01       	movw	r24, r14
    3c1e:	b6 01       	movw	r22, r12
    3c20:	d2 d9       	rcall	.-3164   	; 0x2fc6 <set_timer>
		return 0;
    3c22:	80 e0       	ldi	r24, 0x00	; 0
    3c24:	90 e0       	ldi	r25, 0x00	; 0
    3c26:	4d c0       	rjmp	.+154    	; 0x3cc2 <handle_timeoutq_event+0x144>
    /*
	 * return 0 means we just fired a case, 
	 * and may need to judge it over the repeat time to re-insert into the scheduler,
	 * since we definitely want to collect data periodically
	 */
    LL_POP( timeoutq );
    3c28:	80 91 78 0d 	lds	r24, 0x0D78
    3c2c:	90 91 79 0d 	lds	r25, 0x0D79
    3c30:	23 d1       	rcall	.+582    	; 0x3e78 <ll_pop>
    if( ev->repeat_interval != 0 )
    3c32:	88 85       	ldd	r24, Y+8	; 0x08
    3c34:	99 85       	ldd	r25, Y+9	; 0x09
    3c36:	aa 85       	ldd	r26, Y+10	; 0x0a
    3c38:	bb 85       	ldd	r27, Y+11	; 0x0b
    3c3a:	00 97       	sbiw	r24, 0x00	; 0
    3c3c:	a1 05       	cpc	r26, r1
    3c3e:	b1 05       	cpc	r27, r1
    3c40:	19 f1       	breq	.+70     	; 0x3c88 <handle_timeoutq_event+0x10a>
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
    3c42:	4c 85       	ldd	r20, Y+12	; 0x0c
    3c44:	5d 85       	ldd	r21, Y+13	; 0x0d
    3c46:	6e 85       	ldd	r22, Y+14	; 0x0e
    3c48:	7f 85       	ldd	r23, Y+15	; 0x0f
    3c4a:	8c 01       	movw	r16, r24
    3c4c:	9d 01       	movw	r18, r26
    3c4e:	04 1b       	sub	r16, r20
    3c50:	15 0b       	sbc	r17, r21
    3c52:	26 0b       	sbc	r18, r22
    3c54:	37 0b       	sbc	r19, r23
    3c56:	b9 01       	movw	r22, r18
    3c58:	a8 01       	movw	r20, r16
    3c5a:	0c 83       	std	Y+4, r16	; 0x04
    3c5c:	1d 83       	std	Y+5, r17	; 0x05
    3c5e:	2e 83       	std	Y+6, r18	; 0x06
    3c60:	3f 83       	std	Y+7, r19	; 0x07
		while( ev->timeout < 0 )
    3c62:	33 23       	and	r19, r19
    3c64:	54 f4       	brge	.+20     	; 0x3c7a <handle_timeoutq_event+0xfc>
		{
			ev->timeout += ev->repeat_interval;
    3c66:	48 0f       	add	r20, r24
    3c68:	59 1f       	adc	r21, r25
    3c6a:	6a 1f       	adc	r22, r26
    3c6c:	7b 1f       	adc	r23, r27
	 */
    LL_POP( timeoutq );
    if( ev->repeat_interval != 0 )
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
		while( ev->timeout < 0 )
    3c6e:	77 23       	and	r23, r23
    3c70:	d4 f3       	brlt	.-12     	; 0x3c66 <handle_timeoutq_event+0xe8>
    3c72:	4c 83       	std	Y+4, r20	; 0x04
    3c74:	5d 83       	std	Y+5, r21	; 0x05
    3c76:	6e 83       	std	Y+6, r22	; 0x06
    3c78:	7f 83       	std	Y+7, r23	; 0x07
		{
			ev->timeout += ev->repeat_interval;
		}
		ev->borrow_timeout = 0;
    3c7a:	1c 86       	std	Y+12, r1	; 0x0c
    3c7c:	1d 86       	std	Y+13, r1	; 0x0d
    3c7e:	1e 86       	std	Y+14, r1	; 0x0e
    3c80:	1f 86       	std	Y+15, r1	; 0x0f
        insert_timeoutq_event( ev );
    3c82:	ce 01       	movw	r24, r28
    3c84:	ad de       	rcall	.-678    	; 0x39e0 <insert_timeoutq_event>
    3c86:	06 c0       	rjmp	.+12     	; 0x3c94 <handle_timeoutq_event+0x116>
    }
    else
    {
        LL_PUSH( freelist, ev );
    3c88:	be 01       	movw	r22, r28
    3c8a:	80 91 d0 0d 	lds	r24, 0x0DD0
    3c8e:	90 91 d1 0d 	lds	r25, 0x0DD1
    3c92:	bc d0       	rcall	.+376    	; 0x3e0c <ll_r_insert>
    }

	sleep_time = get_next_interval();
    3c94:	81 de       	rcall	.-766    	; 0x3998 <get_next_interval>
	/* judge if the next top in queue has a timeout <= 0, which we may want to handle it right now */
	if( sleep_time == 0 )
    3c96:	61 15       	cp	r22, r1
    3c98:	71 05       	cpc	r23, r1
    3c9a:	21 f4       	brne	.+8      	; 0x3ca4 <handle_timeoutq_event+0x126>
	{
		handle_timeoutq_event();
    3c9c:	70 df       	rcall	.-288    	; 0x3b7e <handle_timeoutq_event>
		return 0;
    3c9e:	80 e0       	ldi	r24, 0x00	; 0
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	0f c0       	rjmp	.+30     	; 0x3cc2 <handle_timeoutq_event+0x144>
	}
	next_event_time_collapse(sleep_time);	
    3ca4:	6b 01       	movw	r12, r22
    3ca6:	77 0f       	add	r23, r23
    3ca8:	ee 08       	sbc	r14, r14
    3caa:	ff 08       	sbc	r15, r15
    3cac:	c7 01       	movw	r24, r14
    3cae:	b6 01       	movw	r22, r12
    3cb0:	54 de       	rcall	.-856    	; 0x395a <next_event_time_collapse>
	set_timer(sleep_time);
    3cb2:	c7 01       	movw	r24, r14
    3cb4:	b6 01       	movw	r22, r12
    3cb6:	87 d9       	rcall	.-3314   	; 0x2fc6 <set_timer>
    return 0;
    3cb8:	80 e0       	ldi	r24, 0x00	; 0
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	02 c0       	rjmp	.+4      	; 0x3cc2 <handle_timeoutq_event+0x144>
        return -1;
	}
    
    /* sanity check */
    if( ev->sp == NULL && ev->load_p == NULL && ev->store_p == NULL)
        return -1;
    3cbe:	8f ef       	ldi	r24, 0xFF	; 255
    3cc0:	9f ef       	ldi	r25, 0xFF	; 255
		return 0;
	}
	next_event_time_collapse(sleep_time);	
	set_timer(sleep_time);
    return 0;
}
    3cc2:	df 91       	pop	r29
    3cc4:	cf 91       	pop	r28
    3cc6:	1f 91       	pop	r17
    3cc8:	0f 91       	pop	r16
    3cca:	ff 90       	pop	r15
    3ccc:	ef 90       	pop	r14
    3cce:	df 90       	pop	r13
    3cd0:	cf 90       	pop	r12
    3cd2:	08 95       	ret

00003cd4 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    3cd4:	a5 db       	rcall	.-2230   	; 0x3420 <HAL_Init>
  SYS_TimerInit();
    3cd6:	67 d0       	rcall	.+206    	; 0x3da6 <SYS_TimerInit>
  PHY_Init();
    3cd8:	2b dd       	rcall	.-1450   	; 0x3730 <PHY_Init>
  NWK_Init();
    3cda:	dc cb       	rjmp	.-2120   	; 0x3494 <NWK_Init>
    3cdc:	08 95       	ret

00003cde <placeTimer>:

      break;
    }
    prev = t;
  }
}
    3cde:	0f 93       	push	r16
    3ce0:	1f 93       	push	r17
    3ce2:	cf 93       	push	r28
    3ce4:	df 93       	push	r29
    3ce6:	ec 01       	movw	r28, r24
    3ce8:	80 91 6f 0b 	lds	r24, 0x0B6F
    3cec:	90 91 70 0b 	lds	r25, 0x0B70
    3cf0:	00 97       	sbiw	r24, 0x00	; 0
    3cf2:	09 f4       	brne	.+2      	; 0x3cf6 <placeTimer+0x18>
    3cf4:	45 c0       	rjmp	.+138    	; 0x3d80 <placeTimer+0xa2>
    3cf6:	4e 81       	ldd	r20, Y+6	; 0x06
    3cf8:	5f 81       	ldd	r21, Y+7	; 0x07
    3cfa:	68 85       	ldd	r22, Y+8	; 0x08
    3cfc:	79 85       	ldd	r23, Y+9	; 0x09
    3cfe:	fc 01       	movw	r30, r24
    3d00:	02 81       	ldd	r16, Z+2	; 0x02
    3d02:	13 81       	ldd	r17, Z+3	; 0x03
    3d04:	24 81       	ldd	r18, Z+4	; 0x04
    3d06:	35 81       	ldd	r19, Z+5	; 0x05
    3d08:	40 17       	cp	r20, r16
    3d0a:	51 07       	cpc	r21, r17
    3d0c:	62 07       	cpc	r22, r18
    3d0e:	73 07       	cpc	r23, r19
    3d10:	60 f0       	brcs	.+24     	; 0x3d2a <placeTimer+0x4c>
    3d12:	dc 01       	movw	r26, r24
    3d14:	17 c0       	rjmp	.+46     	; 0x3d44 <placeTimer+0x66>
    3d16:	02 81       	ldd	r16, Z+2	; 0x02
    3d18:	13 81       	ldd	r17, Z+3	; 0x03
    3d1a:	24 81       	ldd	r18, Z+4	; 0x04
    3d1c:	35 81       	ldd	r19, Z+5	; 0x05
    3d1e:	40 17       	cp	r20, r16
    3d20:	51 07       	cpc	r21, r17
    3d22:	62 07       	cpc	r22, r18
    3d24:	73 07       	cpc	r23, r19
    3d26:	68 f4       	brcc	.+26     	; 0x3d42 <placeTimer+0x64>
    3d28:	03 c0       	rjmp	.+6      	; 0x3d30 <placeTimer+0x52>
    3d2a:	fc 01       	movw	r30, r24
    3d2c:	a0 e0       	ldi	r26, 0x00	; 0
    3d2e:	b0 e0       	ldi	r27, 0x00	; 0
    3d30:	04 1b       	sub	r16, r20
    3d32:	15 0b       	sbc	r17, r21
    3d34:	26 0b       	sbc	r18, r22
    3d36:	37 0b       	sbc	r19, r23
    3d38:	02 83       	std	Z+2, r16	; 0x02
    3d3a:	13 83       	std	Z+3, r17	; 0x03
    3d3c:	24 83       	std	Z+4, r18	; 0x04
    3d3e:	35 83       	std	Z+5, r19	; 0x05
    3d40:	0a c0       	rjmp	.+20     	; 0x3d56 <placeTimer+0x78>
    3d42:	df 01       	movw	r26, r30
    3d44:	40 1b       	sub	r20, r16
    3d46:	51 0b       	sbc	r21, r17
    3d48:	62 0b       	sbc	r22, r18
    3d4a:	73 0b       	sbc	r23, r19
    3d4c:	ed 91       	ld	r30, X+
    3d4e:	fc 91       	ld	r31, X
    3d50:	11 97       	sbiw	r26, 0x01	; 1
    3d52:	30 97       	sbiw	r30, 0x00	; 0
    3d54:	01 f7       	brne	.-64     	; 0x3d16 <placeTimer+0x38>
    3d56:	4a 83       	std	Y+2, r20	; 0x02
    3d58:	5b 83       	std	Y+3, r21	; 0x03
    3d5a:	6c 83       	std	Y+4, r22	; 0x04
    3d5c:	7d 83       	std	Y+5, r23	; 0x05
    3d5e:	10 97       	sbiw	r26, 0x00	; 0
    3d60:	41 f0       	breq	.+16     	; 0x3d72 <placeTimer+0x94>
    3d62:	8d 91       	ld	r24, X+
    3d64:	9c 91       	ld	r25, X
    3d66:	11 97       	sbiw	r26, 0x01	; 1
    3d68:	99 83       	std	Y+1, r25	; 0x01
    3d6a:	88 83       	st	Y, r24
    3d6c:	cd 93       	st	X+, r28
    3d6e:	dc 93       	st	X, r29
    3d70:	15 c0       	rjmp	.+42     	; 0x3d9c <placeTimer+0xbe>
    3d72:	99 83       	std	Y+1, r25	; 0x01
    3d74:	88 83       	st	Y, r24
    3d76:	d0 93 70 0b 	sts	0x0B70, r29
    3d7a:	c0 93 6f 0b 	sts	0x0B6F, r28
    3d7e:	0e c0       	rjmp	.+28     	; 0x3d9c <placeTimer+0xbe>
    3d80:	19 82       	std	Y+1, r1	; 0x01
    3d82:	18 82       	st	Y, r1
    3d84:	8e 81       	ldd	r24, Y+6	; 0x06
    3d86:	9f 81       	ldd	r25, Y+7	; 0x07
    3d88:	a8 85       	ldd	r26, Y+8	; 0x08
    3d8a:	b9 85       	ldd	r27, Y+9	; 0x09
    3d8c:	8a 83       	std	Y+2, r24	; 0x02
    3d8e:	9b 83       	std	Y+3, r25	; 0x03
    3d90:	ac 83       	std	Y+4, r26	; 0x04
    3d92:	bd 83       	std	Y+5, r27	; 0x05
    3d94:	d0 93 70 0b 	sts	0x0B70, r29
    3d98:	c0 93 6f 0b 	sts	0x0B6F, r28
    3d9c:	df 91       	pop	r29
    3d9e:	cf 91       	pop	r28
    3da0:	1f 91       	pop	r17
    3da2:	0f 91       	pop	r16
    3da4:	08 95       	ret

00003da6 <SYS_TimerInit>:
    3da6:	10 92 70 0b 	sts	0x0B70, r1
    3daa:	10 92 6f 0b 	sts	0x0B6F, r1
    3dae:	08 95       	ret

00003db0 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    3db0:	e0 91 6f 0b 	lds	r30, 0x0B6F
    3db4:	f0 91 70 0b 	lds	r31, 0x0B70
    3db8:	30 97       	sbiw	r30, 0x00	; 0
    3dba:	71 f0       	breq	.+28     	; 0x3dd8 <SYS_TimerStarted+0x28>
    if (t == timer)
    3dbc:	e8 17       	cp	r30, r24
    3dbe:	f9 07       	cpc	r31, r25
    3dc0:	21 f4       	brne	.+8      	; 0x3dca <SYS_TimerStarted+0x1a>
    3dc2:	0c c0       	rjmp	.+24     	; 0x3ddc <SYS_TimerStarted+0x2c>
    3dc4:	8e 17       	cp	r24, r30
    3dc6:	9f 07       	cpc	r25, r31
    3dc8:	59 f0       	breq	.+22     	; 0x3de0 <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    3dca:	01 90       	ld	r0, Z+
    3dcc:	f0 81       	ld	r31, Z
    3dce:	e0 2d       	mov	r30, r0
    3dd0:	30 97       	sbiw	r30, 0x00	; 0
    3dd2:	c1 f7       	brne	.-16     	; 0x3dc4 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    3dd4:	80 e0       	ldi	r24, 0x00	; 0
    3dd6:	08 95       	ret
    3dd8:	80 e0       	ldi	r24, 0x00	; 0
    3dda:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    3ddc:	81 e0       	ldi	r24, 0x01	; 1
    3dde:	08 95       	ret
    3de0:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    3de2:	08 95       	ret

00003de4 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    3de4:	cf 93       	push	r28
    3de6:	df 93       	push	r29
    3de8:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    3dea:	e2 df       	rcall	.-60     	; 0x3db0 <SYS_TimerStarted>
    3dec:	81 11       	cpse	r24, r1
    3dee:	02 c0       	rjmp	.+4      	; 0x3df4 <SYS_TimerStart+0x10>
    placeTimer(timer);
    3df0:	ce 01       	movw	r24, r28
    3df2:	75 df       	rcall	.-278    	; 0x3cde <placeTimer>
}
    3df4:	df 91       	pop	r29
    3df6:	cf 91       	pop	r28
    3df8:	08 95       	ret

00003dfa <ll_first>:
 * lp is list pointer
 */
llobject_t *
ll_first(lp)
llobject_t *lp;
{
    3dfa:	fc 01       	movw	r30, r24
    if (LL_IS_EMPTY(lp)) {
    3dfc:	82 81       	ldd	r24, Z+2	; 0x02
    3dfe:	93 81       	ldd	r25, Z+3	; 0x03
    3e00:	8e 17       	cp	r24, r30
    3e02:	9f 07       	cpc	r25, r31
    3e04:	11 f4       	brne	.+4      	; 0x3e0a <ll_first+0x10>
		return LL_NULL;
    3e06:	80 e0       	ldi	r24, 0x00	; 0
    3e08:	90 e0       	ldi	r25, 0x00	; 0
    }
    return lp->next;
}
    3e0a:	08 95       	ret

00003e0c <ll_r_insert>:
llobject_t *
ll_r_insert(ip, ep)
llobject_t *ip;
llobject_t *ep;
{
    llobject_t *tp = ip->next;
    3e0c:	dc 01       	movw	r26, r24
    3e0e:	12 96       	adiw	r26, 0x02	; 2
    3e10:	ed 91       	ld	r30, X+
    3e12:	fc 91       	ld	r31, X
    3e14:	13 97       	sbiw	r26, 0x03	; 3

    tp->prev = ep;
    3e16:	71 83       	std	Z+1, r23	; 0x01
    3e18:	60 83       	st	Z, r22
    ep->next = tp;
    3e1a:	db 01       	movw	r26, r22
    3e1c:	13 96       	adiw	r26, 0x03	; 3
    3e1e:	fc 93       	st	X, r31
    3e20:	ee 93       	st	-X, r30
    3e22:	12 97       	sbiw	r26, 0x02	; 2
    ip->next = ep;
    3e24:	fc 01       	movw	r30, r24
    3e26:	73 83       	std	Z+3, r23	; 0x03
    3e28:	62 83       	std	Z+2, r22	; 0x02
    ep->prev = ip;
    3e2a:	8d 93       	st	X+, r24
    3e2c:	9c 93       	st	X, r25

    return ep;
}
    3e2e:	cb 01       	movw	r24, r22
    3e30:	08 95       	ret

00003e32 <ll_detach>:
 */
llobject_t *
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    3e32:	fb 01       	movw	r30, r22
    if (LL_IS_EMPTY(lp) || lp == ep) {
    3e34:	dc 01       	movw	r26, r24
    3e36:	12 96       	adiw	r26, 0x02	; 2
    3e38:	2d 91       	ld	r18, X+
    3e3a:	3c 91       	ld	r19, X
    3e3c:	13 97       	sbiw	r26, 0x03	; 3
    3e3e:	28 17       	cp	r18, r24
    3e40:	39 07       	cpc	r19, r25
    3e42:	a1 f0       	breq	.+40     	; 0x3e6c <ll_detach+0x3a>
    3e44:	86 17       	cp	r24, r22
    3e46:	97 07       	cpc	r25, r23
    3e48:	a1 f0       	breq	.+40     	; 0x3e72 <ll_detach+0x40>
		return LL_NULL;
    }

    (ep->prev)->next = ep->next;
    3e4a:	a0 81       	ld	r26, Z
    3e4c:	b1 81       	ldd	r27, Z+1	; 0x01
    3e4e:	82 81       	ldd	r24, Z+2	; 0x02
    3e50:	93 81       	ldd	r25, Z+3	; 0x03
    3e52:	13 96       	adiw	r26, 0x03	; 3
    3e54:	9c 93       	st	X, r25
    3e56:	8e 93       	st	-X, r24
    3e58:	12 97       	sbiw	r26, 0x02	; 2
    (ep->next)->prev = ep->prev;
    3e5a:	a2 81       	ldd	r26, Z+2	; 0x02
    3e5c:	b3 81       	ldd	r27, Z+3	; 0x03
    3e5e:	80 81       	ld	r24, Z
    3e60:	91 81       	ldd	r25, Z+1	; 0x01
    3e62:	8d 93       	st	X+, r24
    3e64:	9c 93       	st	X, r25

    return ep;
    3e66:	86 2f       	mov	r24, r22
    3e68:	9f 2f       	mov	r25, r31
    3e6a:	08 95       	ret
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    if (LL_IS_EMPTY(lp) || lp == ep) {
		return LL_NULL;
    3e6c:	80 e0       	ldi	r24, 0x00	; 0
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	08 95       	ret
    3e72:	80 e0       	ldi	r24, 0x00	; 0
    3e74:	90 e0       	ldi	r25, 0x00	; 0

    (ep->prev)->next = ep->next;
    (ep->next)->prev = ep->prev;

    return ep;
}
    3e76:	08 95       	ret

00003e78 <ll_pop>:
 */
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
    3e78:	fc 01       	movw	r30, r24
    3e7a:	62 81       	ldd	r22, Z+2	; 0x02
    3e7c:	73 81       	ldd	r23, Z+3	; 0x03
    3e7e:	68 17       	cp	r22, r24
    3e80:	79 07       	cpc	r23, r25
    3e82:	11 f0       	breq	.+4      	; 0x3e88 <ll_pop+0x10>
		return LL_NULL;
    }
    return LL_DETACH(lp, lp->next);
    3e84:	d6 cf       	rjmp	.-84     	; 0x3e32 <ll_detach>
    3e86:	08 95       	ret
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
		return LL_NULL;
    3e88:	80 e0       	ldi	r24, 0x00	; 0
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    }
    return LL_DETACH(lp, lp->next);
}
    3e8c:	08 95       	ret

00003e8e <calcDate>:
	tm_ptr->unix_time = calibrate_sec;
	tm_ptr->unix_msec = 500; // to minimize error
}

void calcDate(tm *tm_ptr)
{
    3e8e:	2f 92       	push	r2
    3e90:	3f 92       	push	r3
    3e92:	4f 92       	push	r4
    3e94:	5f 92       	push	r5
    3e96:	6f 92       	push	r6
    3e98:	7f 92       	push	r7
    3e9a:	8f 92       	push	r8
    3e9c:	9f 92       	push	r9
    3e9e:	af 92       	push	r10
    3ea0:	bf 92       	push	r11
    3ea2:	cf 92       	push	r12
    3ea4:	df 92       	push	r13
    3ea6:	ef 92       	push	r14
    3ea8:	ff 92       	push	r15
    3eaa:	0f 93       	push	r16
    3eac:	1f 93       	push	r17
    3eae:	cf 93       	push	r28
    3eb0:	df 93       	push	r29
    3eb2:	cd b7       	in	r28, 0x3d	; 61
    3eb4:	de b7       	in	r29, 0x3e	; 62
    3eb6:	62 97       	sbiw	r28, 0x12	; 18
    3eb8:	0f b6       	in	r0, 0x3f	; 63
    3eba:	f8 94       	cli
    3ebc:	de bf       	out	0x3e, r29	; 62
    3ebe:	0f be       	out	0x3f, r0	; 63
    3ec0:	cd bf       	out	0x3d, r28	; 61
    3ec2:	9a 8b       	std	Y+18, r25	; 0x12
    3ec4:	89 8b       	std	Y+17, r24	; 0x11
	long seconds, minutes, hours, days, year, month;
	long dayOfWeek;
	seconds = tm_ptr->unix_time;
    3ec6:	dc 01       	movw	r26, r24
    3ec8:	4d 90       	ld	r4, X+
    3eca:	5d 90       	ld	r5, X+
    3ecc:	6d 90       	ld	r6, X+
    3ece:	7c 90       	ld	r7, X

	/* calculate minutes */
	minutes  = seconds / 60;
    3ed0:	0f 2e       	mov	r0, r31
    3ed2:	fc e3       	ldi	r31, 0x3C	; 60
    3ed4:	8f 2e       	mov	r8, r31
    3ed6:	91 2c       	mov	r9, r1
    3ed8:	a1 2c       	mov	r10, r1
    3eda:	b1 2c       	mov	r11, r1
    3edc:	f0 2d       	mov	r31, r0
    3ede:	c3 01       	movw	r24, r6
    3ee0:	b2 01       	movw	r22, r4
    3ee2:	a5 01       	movw	r20, r10
    3ee4:	94 01       	movw	r18, r8
    3ee6:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__divmodsi4>
    3eea:	69 01       	movw	r12, r18
    3eec:	7a 01       	movw	r14, r20
	seconds -= minutes * 60;
    3eee:	a4 ec       	ldi	r26, 0xC4	; 196
    3ef0:	bf ef       	ldi	r27, 0xFF	; 255
    3ef2:	0e 94 af 32 	call	0x655e	; 0x655e <__mulohisi3>
    3ef6:	9b 01       	movw	r18, r22
    3ef8:	ac 01       	movw	r20, r24
    3efa:	24 0d       	add	r18, r4
    3efc:	35 1d       	adc	r19, r5
    3efe:	46 1d       	adc	r20, r6
    3f00:	57 1d       	adc	r21, r7
    3f02:	29 83       	std	Y+1, r18	; 0x01
    3f04:	3a 83       	std	Y+2, r19	; 0x02
    3f06:	4b 83       	std	Y+3, r20	; 0x03
    3f08:	5c 83       	std	Y+4, r21	; 0x04
	/* calculate hours */
	hours    = minutes / 60;
    3f0a:	c7 01       	movw	r24, r14
    3f0c:	b6 01       	movw	r22, r12
    3f0e:	a5 01       	movw	r20, r10
    3f10:	94 01       	movw	r18, r8
    3f12:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__divmodsi4>
    3f16:	49 01       	movw	r8, r18
    3f18:	5a 01       	movw	r10, r20
	minutes -= hours   * 60;
    3f1a:	a4 ec       	ldi	r26, 0xC4	; 196
    3f1c:	bf ef       	ldi	r27, 0xFF	; 255
    3f1e:	0e 94 af 32 	call	0x655e	; 0x655e <__mulohisi3>
    3f22:	9b 01       	movw	r18, r22
    3f24:	ac 01       	movw	r20, r24
    3f26:	2c 0d       	add	r18, r12
    3f28:	3d 1d       	adc	r19, r13
    3f2a:	4e 1d       	adc	r20, r14
    3f2c:	5f 1d       	adc	r21, r15
    3f2e:	2d 83       	std	Y+5, r18	; 0x05
    3f30:	3e 83       	std	Y+6, r19	; 0x06
    3f32:	4f 83       	std	Y+7, r20	; 0x07
    3f34:	58 87       	std	Y+8, r21	; 0x08
	/* calculate days */
	days     = hours   / 24;
    3f36:	c5 01       	movw	r24, r10
    3f38:	b4 01       	movw	r22, r8
    3f3a:	28 e1       	ldi	r18, 0x18	; 24
    3f3c:	30 e0       	ldi	r19, 0x00	; 0
    3f3e:	40 e0       	ldi	r20, 0x00	; 0
    3f40:	50 e0       	ldi	r21, 0x00	; 0
    3f42:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__divmodsi4>
    3f46:	c2 2e       	mov	r12, r18
    3f48:	d3 2e       	mov	r13, r19
    3f4a:	e4 2e       	mov	r14, r20
    3f4c:	f5 2e       	mov	r15, r21
	hours   -= days    * 24;
    3f4e:	a8 ee       	ldi	r26, 0xE8	; 232
    3f50:	bf ef       	ldi	r27, 0xFF	; 255
    3f52:	0e 94 af 32 	call	0x655e	; 0x655e <__mulohisi3>
    3f56:	9b 01       	movw	r18, r22
    3f58:	ac 01       	movw	r20, r24
    3f5a:	28 0d       	add	r18, r8
    3f5c:	39 1d       	adc	r19, r9
    3f5e:	4a 1d       	adc	r20, r10
    3f60:	5b 1d       	adc	r21, r11
    3f62:	29 87       	std	Y+9, r18	; 0x09
    3f64:	3a 87       	std	Y+10, r19	; 0x0a
    3f66:	4b 87       	std	Y+11, r20	; 0x0b
    3f68:	5c 87       	std	Y+12, r21	; 0x0c

	/* Unix time starts in 1970 on a Thursday */
	year      = 1970;
	dayOfWeek = 4;
    3f6a:	81 2c       	mov	r8, r1
    3f6c:	91 2c       	mov	r9, r1
    3f6e:	54 01       	movw	r10, r8
    3f70:	68 94       	set
    3f72:	82 f8       	bld	r8, 2
	/* calculate days */
	days     = hours   / 24;
	hours   -= days    * 24;

	/* Unix time starts in 1970 on a Thursday */
	year      = 1970;
    3f74:	0f 2e       	mov	r0, r31
    3f76:	f2 eb       	ldi	r31, 0xB2	; 178
    3f78:	4f 2e       	mov	r4, r31
    3f7a:	f7 e0       	ldi	r31, 0x07	; 7
    3f7c:	5f 2e       	mov	r5, r31
    3f7e:	61 2c       	mov	r6, r1
    3f80:	71 2c       	mov	r7, r1
    3f82:	f0 2d       	mov	r31, r0

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    3f84:	0d e6       	ldi	r16, 0x6D	; 109
    3f86:	11 e0       	ldi	r17, 0x01	; 1
    3f88:	21 2c       	mov	r2, r1
		{
			dayOfWeek += leapYear ? 2 : 1;
    3f8a:	31 2c       	mov	r3, r1
	year      = 1970;
	dayOfWeek = 4;

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
    3f8c:	d3 01       	movw	r26, r6
    3f8e:	c2 01       	movw	r24, r4
    3f90:	83 70       	andi	r24, 0x03	; 3
    3f92:	99 27       	eor	r25, r25
    3f94:	aa 27       	eor	r26, r26
    3f96:	bb 27       	eor	r27, r27
    3f98:	89 2b       	or	r24, r25
    3f9a:	8a 2b       	or	r24, r26
    3f9c:	8b 2b       	or	r24, r27
    3f9e:	09 f0       	breq	.+2      	; 0x3fa2 <calcDate+0x114>
    3fa0:	ea c0       	rjmp	.+468    	; 0x4176 <calcDate+0x2e8>
    3fa2:	c3 01       	movw	r24, r6
    3fa4:	b2 01       	movw	r22, r4
    3fa6:	24 e6       	ldi	r18, 0x64	; 100
    3fa8:	30 e0       	ldi	r19, 0x00	; 0
    3faa:	40 e0       	ldi	r20, 0x00	; 0
    3fac:	50 e0       	ldi	r21, 0x00	; 0
    3fae:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__divmodsi4>
    3fb2:	67 2b       	or	r22, r23
    3fb4:	68 2b       	or	r22, r24
    3fb6:	69 2b       	or	r22, r25
    3fb8:	09 f0       	breq	.+2      	; 0x3fbc <calcDate+0x12e>
    3fba:	d0 c0       	rjmp	.+416    	; 0x415c <calcDate+0x2ce>
    3fbc:	c3 01       	movw	r24, r6
    3fbe:	b2 01       	movw	r22, r4
    3fc0:	20 e9       	ldi	r18, 0x90	; 144
    3fc2:	31 e0       	ldi	r19, 0x01	; 1
    3fc4:	40 e0       	ldi	r20, 0x00	; 0
    3fc6:	50 e0       	ldi	r21, 0x00	; 0
    3fc8:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__divmodsi4>
    3fcc:	67 2b       	or	r22, r23
    3fce:	68 2b       	or	r22, r24
    3fd0:	69 2b       	or	r22, r25
    3fd2:	09 f4       	brne	.+2      	; 0x3fd6 <calcDate+0x148>
    3fd4:	c3 c0       	rjmp	.+390    	; 0x415c <calcDate+0x2ce>
    3fd6:	cf c0       	rjmp	.+414    	; 0x4176 <calcDate+0x2e8>
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    3fd8:	8e e6       	ldi	r24, 0x6E	; 110
    3fda:	91 e0       	ldi	r25, 0x01	; 1
    3fdc:	a0 e0       	ldi	r26, 0x00	; 0
    3fde:	b0 e0       	ldi	r27, 0x00	; 0
		{
			dayOfWeek += leapYear ? 2 : 1;
    3fe0:	42 e0       	ldi	r20, 0x02	; 2
    3fe2:	50 e0       	ldi	r21, 0x00	; 0
    3fe4:	60 e0       	ldi	r22, 0x00	; 0
    3fe6:	70 e0       	ldi	r23, 0x00	; 0
    3fe8:	08 c0       	rjmp	.+16     	; 0x3ffa <calcDate+0x16c>

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    3fea:	80 2f       	mov	r24, r16
    3fec:	91 2f       	mov	r25, r17
    3fee:	a2 2d       	mov	r26, r2
    3ff0:	b0 e0       	ldi	r27, 0x00	; 0
		{
			dayOfWeek += leapYear ? 2 : 1;
    3ff2:	41 e0       	ldi	r20, 0x01	; 1
    3ff4:	50 e0       	ldi	r21, 0x00	; 0
    3ff6:	60 e0       	ldi	r22, 0x00	; 0
    3ff8:	73 2d       	mov	r23, r3
    3ffa:	84 0e       	add	r8, r20
    3ffc:	95 1e       	adc	r9, r21
    3ffe:	a6 1e       	adc	r10, r22
    4000:	b7 1e       	adc	r11, r23
			days      -= daysInYear;
    4002:	c8 1a       	sub	r12, r24
    4004:	d9 0a       	sbc	r13, r25
    4006:	ea 0a       	sbc	r14, r26
    4008:	fb 0a       	sbc	r15, r27
			if (dayOfWeek >= 7)
    400a:	57 e0       	ldi	r21, 0x07	; 7
    400c:	85 16       	cp	r8, r21
    400e:	91 04       	cpc	r9, r1
    4010:	a1 04       	cpc	r10, r1
    4012:	b1 04       	cpc	r11, r1
    4014:	2c f0       	brlt	.+10     	; 0x4020 <calcDate+0x192>
			dayOfWeek -= 7;
    4016:	87 e0       	ldi	r24, 0x07	; 7
    4018:	88 1a       	sub	r8, r24
    401a:	91 08       	sbc	r9, r1
    401c:	a1 08       	sbc	r10, r1
    401e:	b1 08       	sbc	r11, r1
			++year;
    4020:	9f ef       	ldi	r25, 0xFF	; 255
    4022:	49 1a       	sub	r4, r25
    4024:	59 0a       	sbc	r5, r25
    4026:	69 0a       	sbc	r6, r25
    4028:	79 0a       	sbc	r7, r25
				else
				break;
			}
			break;
		}
	}
    402a:	b0 cf       	rjmp	.-160    	; 0x3f8c <calcDate+0xfe>
			dayOfWeek -= 7;
			++year;
		}
		else
		{
			tm_ptr->tm_yday = days;
    402c:	e9 89       	ldd	r30, Y+17	; 0x11
    402e:	fa 89       	ldd	r31, Y+18	; 0x12
    4030:	84 a3       	std	Z+36, r24	; 0x24
    4032:	95 a3       	std	Z+37, r25	; 0x25
    4034:	a6 a3       	std	Z+38, r26	; 0x26
    4036:	b7 a3       	std	Z+39, r27	; 0x27
			dayOfWeek  += days;
    4038:	bc 01       	movw	r22, r24
    403a:	cd 01       	movw	r24, r26
    403c:	68 0d       	add	r22, r8
    403e:	79 1d       	adc	r23, r9
    4040:	8a 1d       	adc	r24, r10
    4042:	9b 1d       	adc	r25, r11
			dayOfWeek  %= 7;
    4044:	27 e0       	ldi	r18, 0x07	; 7
    4046:	30 e0       	ldi	r19, 0x00	; 0
    4048:	40 e0       	ldi	r20, 0x00	; 0
    404a:	50 e0       	ldi	r21, 0x00	; 0
    404c:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__divmodsi4>
    4050:	6d 87       	std	Y+13, r22	; 0x0d
    4052:	7e 87       	std	Y+14, r23	; 0x0e
    4054:	8f 87       	std	Y+15, r24	; 0x0f
    4056:	98 8b       	std	Y+16, r25	; 0x10
    4058:	e3 e3       	ldi	r30, 0x33	; 51
    405a:	f6 e0       	ldi	r31, 0x06	; 6
    405c:	81 2c       	mov	r8, r1
    405e:	91 2c       	mov	r9, r1
    4060:	54 01       	movw	r10, r8
    4062:	83 94       	inc	r8
    4064:	40 e0       	ldi	r20, 0x00	; 0
    4066:	50 e0       	ldi	r21, 0x00	; 0
    4068:	ba 01       	movw	r22, r20
    406a:	09 c0       	rjmp	.+18     	; 0x407e <calcDate+0x1f0>
    406c:	4f 5f       	subi	r20, 0xFF	; 255
    406e:	5f 4f       	sbci	r21, 0xFF	; 255
    4070:	6f 4f       	sbci	r22, 0xFF	; 255
    4072:	7f 4f       	sbci	r23, 0xFF	; 255
    4074:	3f ef       	ldi	r19, 0xFF	; 255
    4076:	83 1a       	sub	r8, r19
    4078:	93 0a       	sbc	r9, r19
    407a:	a3 0a       	sbc	r10, r19
    407c:	b3 0a       	sbc	r11, r19
    407e:	8a 01       	movw	r16, r20
    4080:	9b 01       	movw	r18, r22

			/* calculate the month and day */
			static const uint8_t daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
			for(month = 0; month < 12; ++month)
			{
				uint8_t dim = daysInMonth[month];
    4082:	81 91       	ld	r24, Z+

				/* add a day to feburary if this is a leap year */
				if (month == 1 && leapYear)
    4084:	41 30       	cpi	r20, 0x01	; 1
    4086:	51 05       	cpc	r21, r1
    4088:	61 05       	cpc	r22, r1
    408a:	71 05       	cpc	r23, r1
    408c:	29 f4       	brne	.+10     	; 0x4098 <calcDate+0x20a>
    408e:	33 20       	and	r3, r3
    4090:	09 f4       	brne	.+2      	; 0x4094 <calcDate+0x206>
    4092:	5b c0       	rjmp	.+182    	; 0x414a <calcDate+0x2bc>
				++dim;
    4094:	8f 5f       	subi	r24, 0xFF	; 255
    4096:	59 c0       	rjmp	.+178    	; 0x414a <calcDate+0x2bc>

				if (days >= dim)
    4098:	90 e0       	ldi	r25, 0x00	; 0
    409a:	a0 e0       	ldi	r26, 0x00	; 0
    409c:	b0 e0       	ldi	r27, 0x00	; 0
    409e:	c8 16       	cp	r12, r24
    40a0:	d9 06       	cpc	r13, r25
    40a2:	ea 06       	cpc	r14, r26
    40a4:	fb 06       	cpc	r15, r27
    40a6:	6c f0       	brlt	.+26     	; 0x40c2 <calcDate+0x234>
				days -= dim;
    40a8:	c8 1a       	sub	r12, r24
    40aa:	d9 0a       	sbc	r13, r25
    40ac:	ea 0a       	sbc	r14, r26
    40ae:	fb 0a       	sbc	r15, r27
			dayOfWeek  += days;
			dayOfWeek  %= 7;

			/* calculate the month and day */
			static const uint8_t daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
			for(month = 0; month < 12; ++month)
    40b0:	95 01       	movw	r18, r10
    40b2:	84 01       	movw	r16, r8
    40b4:	8c e0       	ldi	r24, 0x0C	; 12
    40b6:	88 16       	cp	r8, r24
    40b8:	91 04       	cpc	r9, r1
    40ba:	a1 04       	cpc	r10, r1
    40bc:	b1 04       	cpc	r11, r1
    40be:	b4 f2       	brlt	.-84     	; 0x406c <calcDate+0x1de>
    40c0:	00 c0       	rjmp	.+0      	; 0x40c2 <calcDate+0x234>
			}
			break;
		}
	}

	tm_ptr->tm_sec  = seconds;
    40c2:	89 81       	ldd	r24, Y+1	; 0x01
    40c4:	9a 81       	ldd	r25, Y+2	; 0x02
    40c6:	ab 81       	ldd	r26, Y+3	; 0x03
    40c8:	bc 81       	ldd	r27, Y+4	; 0x04
    40ca:	e9 89       	ldd	r30, Y+17	; 0x11
    40cc:	fa 89       	ldd	r31, Y+18	; 0x12
    40ce:	80 87       	std	Z+8, r24	; 0x08
    40d0:	91 87       	std	Z+9, r25	; 0x09
    40d2:	a2 87       	std	Z+10, r26	; 0x0a
    40d4:	b3 87       	std	Z+11, r27	; 0x0b
	tm_ptr->tm_min  = minutes;
    40d6:	8d 81       	ldd	r24, Y+5	; 0x05
    40d8:	9e 81       	ldd	r25, Y+6	; 0x06
    40da:	af 81       	ldd	r26, Y+7	; 0x07
    40dc:	b8 85       	ldd	r27, Y+8	; 0x08
    40de:	84 87       	std	Z+12, r24	; 0x0c
    40e0:	95 87       	std	Z+13, r25	; 0x0d
    40e2:	a6 87       	std	Z+14, r26	; 0x0e
    40e4:	b7 87       	std	Z+15, r27	; 0x0f
	tm_ptr->tm_hour = hours;
    40e6:	89 85       	ldd	r24, Y+9	; 0x09
    40e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    40ea:	ab 85       	ldd	r26, Y+11	; 0x0b
    40ec:	bc 85       	ldd	r27, Y+12	; 0x0c
    40ee:	80 8b       	std	Z+16, r24	; 0x10
    40f0:	91 8b       	std	Z+17, r25	; 0x11
    40f2:	a2 8b       	std	Z+18, r26	; 0x12
    40f4:	b3 8b       	std	Z+19, r27	; 0x13
	tm_ptr->tm_mday = days + 1;
    40f6:	ff ef       	ldi	r31, 0xFF	; 255
    40f8:	cf 1a       	sub	r12, r31
    40fa:	df 0a       	sbc	r13, r31
    40fc:	ef 0a       	sbc	r14, r31
    40fe:	ff 0a       	sbc	r15, r31
    4100:	a9 89       	ldd	r26, Y+17	; 0x11
    4102:	ba 89       	ldd	r27, Y+18	; 0x12
    4104:	54 96       	adiw	r26, 0x14	; 20
    4106:	cd 92       	st	X+, r12
    4108:	dd 92       	st	X+, r13
    410a:	ed 92       	st	X+, r14
    410c:	fc 92       	st	X, r15
    410e:	57 97       	sbiw	r26, 0x17	; 23
	tm_ptr->tm_mon  = month + 1;
    4110:	d9 01       	movw	r26, r18
    4112:	c8 01       	movw	r24, r16
    4114:	01 96       	adiw	r24, 0x01	; 1
    4116:	a1 1d       	adc	r26, r1
    4118:	b1 1d       	adc	r27, r1
    411a:	e9 89       	ldd	r30, Y+17	; 0x11
    411c:	fa 89       	ldd	r31, Y+18	; 0x12
    411e:	80 8f       	std	Z+24, r24	; 0x18
    4120:	91 8f       	std	Z+25, r25	; 0x19
    4122:	a2 8f       	std	Z+26, r26	; 0x1a
    4124:	b3 8f       	std	Z+27, r27	; 0x1b
	tm_ptr->tm_year = year;
    4126:	44 8e       	std	Z+28, r4	; 0x1c
    4128:	55 8e       	std	Z+29, r5	; 0x1d
    412a:	66 8e       	std	Z+30, r6	; 0x1e
    412c:	77 8e       	std	Z+31, r7	; 0x1f
	tm_ptr->tm_wday = dayOfWeek;
    412e:	2d 85       	ldd	r18, Y+13	; 0x0d
    4130:	3e 85       	ldd	r19, Y+14	; 0x0e
    4132:	4f 85       	ldd	r20, Y+15	; 0x0f
    4134:	58 89       	ldd	r21, Y+16	; 0x10
    4136:	20 a3       	std	Z+32, r18	; 0x20
    4138:	31 a3       	std	Z+33, r19	; 0x21
    413a:	42 a3       	std	Z+34, r20	; 0x22
    413c:	53 a3       	std	Z+35, r21	; 0x23
    413e:	27 c0       	rjmp	.+78     	; 0x418e <calcDate+0x300>
				/* add a day to feburary if this is a leap year */
				if (month == 1 && leapYear)
				++dim;

				if (days >= dim)
				days -= dim;
    4140:	c8 1a       	sub	r12, r24
    4142:	d9 0a       	sbc	r13, r25
    4144:	ea 0a       	sbc	r14, r26
    4146:	fb 0a       	sbc	r15, r27
    4148:	91 cf       	rjmp	.-222    	; 0x406c <calcDate+0x1de>

				/* add a day to feburary if this is a leap year */
				if (month == 1 && leapYear)
				++dim;

				if (days >= dim)
    414a:	90 e0       	ldi	r25, 0x00	; 0
    414c:	a0 e0       	ldi	r26, 0x00	; 0
    414e:	b0 e0       	ldi	r27, 0x00	; 0
    4150:	c8 16       	cp	r12, r24
    4152:	d9 06       	cpc	r13, r25
    4154:	ea 06       	cpc	r14, r26
    4156:	fb 06       	cpc	r15, r27
    4158:	9c f7       	brge	.-26     	; 0x4140 <calcDate+0x2b2>
    415a:	b3 cf       	rjmp	.-154    	; 0x40c2 <calcDate+0x234>

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    415c:	fe e6       	ldi	r31, 0x6E	; 110
    415e:	cf 16       	cp	r12, r31
    4160:	f1 e0       	ldi	r31, 0x01	; 1
    4162:	df 06       	cpc	r13, r31
    4164:	e1 04       	cpc	r14, r1
    4166:	f1 04       	cpc	r15, r1
    4168:	0c f0       	brlt	.+2      	; 0x416c <calcDate+0x2de>
    416a:	36 cf       	rjmp	.-404    	; 0x3fd8 <calcDate+0x14a>
    416c:	d7 01       	movw	r26, r14
    416e:	c6 01       	movw	r24, r12
    4170:	33 24       	eor	r3, r3
    4172:	33 94       	inc	r3
    4174:	5b cf       	rjmp	.-330    	; 0x402c <calcDate+0x19e>
    4176:	3d e6       	ldi	r19, 0x6D	; 109
    4178:	c3 16       	cp	r12, r19
    417a:	31 e0       	ldi	r19, 0x01	; 1
    417c:	d3 06       	cpc	r13, r19
    417e:	e1 04       	cpc	r14, r1
    4180:	f1 04       	cpc	r15, r1
    4182:	0c f0       	brlt	.+2      	; 0x4186 <calcDate+0x2f8>
    4184:	32 cf       	rjmp	.-412    	; 0x3fea <calcDate+0x15c>
    4186:	d7 01       	movw	r26, r14
    4188:	c6 01       	movw	r24, r12
    418a:	31 2c       	mov	r3, r1
    418c:	4f cf       	rjmp	.-354    	; 0x402c <calcDate+0x19e>
	tm_ptr->tm_hour = hours;
	tm_ptr->tm_mday = days + 1;
	tm_ptr->tm_mon  = month + 1;
	tm_ptr->tm_year = year;
	tm_ptr->tm_wday = dayOfWeek;
}
    418e:	62 96       	adiw	r28, 0x12	; 18
    4190:	0f b6       	in	r0, 0x3f	; 63
    4192:	f8 94       	cli
    4194:	de bf       	out	0x3e, r29	; 62
    4196:	0f be       	out	0x3f, r0	; 63
    4198:	cd bf       	out	0x3d, r28	; 61
    419a:	df 91       	pop	r29
    419c:	cf 91       	pop	r28
    419e:	1f 91       	pop	r17
    41a0:	0f 91       	pop	r16
    41a2:	ff 90       	pop	r15
    41a4:	ef 90       	pop	r14
    41a6:	df 90       	pop	r13
    41a8:	cf 90       	pop	r12
    41aa:	bf 90       	pop	r11
    41ac:	af 90       	pop	r10
    41ae:	9f 90       	pop	r9
    41b0:	8f 90       	pop	r8
    41b2:	7f 90       	pop	r7
    41b4:	6f 90       	pop	r6
    41b6:	5f 90       	pop	r5
    41b8:	4f 90       	pop	r4
    41ba:	3f 90       	pop	r3
    41bc:	2f 90       	pop	r2
    41be:	08 95       	ret

000041c0 <updateTime>:
#include "utilities/inc/time.h"
#include <stdio.h>


void updateTime(long increment_msec, tm * tm_eg)
{
    41c0:	cf 92       	push	r12
    41c2:	df 92       	push	r13
    41c4:	ef 92       	push	r14
    41c6:	ff 92       	push	r15
    41c8:	0f 93       	push	r16
    41ca:	1f 93       	push	r17
    41cc:	cf 93       	push	r28
    41ce:	df 93       	push	r29
    41d0:	ea 01       	movw	r28, r20
	tm_eg->unix_msec += increment_msec;
    41d2:	cc 80       	ldd	r12, Y+4	; 0x04
    41d4:	dd 80       	ldd	r13, Y+5	; 0x05
    41d6:	ee 80       	ldd	r14, Y+6	; 0x06
    41d8:	ff 80       	ldd	r15, Y+7	; 0x07
    41da:	6c 0d       	add	r22, r12
    41dc:	7d 1d       	adc	r23, r13
    41de:	8e 1d       	adc	r24, r14
    41e0:	9f 1d       	adc	r25, r15
	tm_eg->unix_time += ( tm_eg->unix_msec / 1000 );
    41e2:	28 ee       	ldi	r18, 0xE8	; 232
    41e4:	33 e0       	ldi	r19, 0x03	; 3
    41e6:	40 e0       	ldi	r20, 0x00	; 0
    41e8:	50 e0       	ldi	r21, 0x00	; 0
    41ea:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__divmodsi4>
    41ee:	c8 80       	ld	r12, Y
    41f0:	d9 80       	ldd	r13, Y+1	; 0x01
    41f2:	ea 80       	ldd	r14, Y+2	; 0x02
    41f4:	fb 80       	ldd	r15, Y+3	; 0x03
    41f6:	89 01       	movw	r16, r18
    41f8:	9a 01       	movw	r18, r20
    41fa:	0c 0d       	add	r16, r12
    41fc:	1d 1d       	adc	r17, r13
    41fe:	2e 1d       	adc	r18, r14
    4200:	3f 1d       	adc	r19, r15
    4202:	08 83       	st	Y, r16
    4204:	19 83       	std	Y+1, r17	; 0x01
    4206:	2a 83       	std	Y+2, r18	; 0x02
    4208:	3b 83       	std	Y+3, r19	; 0x03
	tm_eg->unix_msec = tm_eg->unix_msec % 1000;
    420a:	6c 83       	std	Y+4, r22	; 0x04
    420c:	7d 83       	std	Y+5, r23	; 0x05
    420e:	8e 83       	std	Y+6, r24	; 0x06
    4210:	9f 83       	std	Y+7, r25	; 0x07
	calcDate(tm_eg);
    4212:	ce 01       	movw	r24, r28
    4214:	3c de       	rcall	.-904    	; 0x3e8e <calcDate>
}
    4216:	df 91       	pop	r29
    4218:	cf 91       	pop	r28
    421a:	1f 91       	pop	r17
    421c:	0f 91       	pop	r16
    421e:	ff 90       	pop	r15
    4220:	ef 90       	pop	r14
    4222:	df 90       	pop	r13
    4224:	cf 90       	pop	r12
    4226:	08 95       	ret

00004228 <init_timestamp>:



void init_timestamp(tm *tm_ptr)
{
	tm_ptr->unix_msec=0;
    4228:	fc 01       	movw	r30, r24
    422a:	14 82       	std	Z+4, r1	; 0x04
    422c:	15 82       	std	Z+5, r1	; 0x05
    422e:	16 82       	std	Z+6, r1	; 0x06
    4230:	17 82       	std	Z+7, r1	; 0x07
	tm_ptr->unix_time=0;
    4232:	10 82       	st	Z, r1
    4234:	11 82       	std	Z+1, r1	; 0x01
    4236:	12 82       	std	Z+2, r1	; 0x02
    4238:	13 82       	std	Z+3, r1	; 0x03
    423a:	08 95       	ret

0000423c <fctn_getStartNum>:
}

int fctn_getStartNum( BaseSensor *this)
{
	return this->StartNum;
}
    423c:	fc 01       	movw	r30, r24
    423e:	84 81       	ldd	r24, Z+4	; 0x04
    4240:	95 81       	ldd	r25, Z+5	; 0x05
    4242:	08 95       	ret

00004244 <fctn_getEndNum>:

int fctn_getEndNum( BaseSensor *this)
{
    4244:	fc 01       	movw	r30, r24
	return ( this->StartNum + this->NumOfData );
    4246:	24 81       	ldd	r18, Z+4	; 0x04
    4248:	35 81       	ldd	r19, Z+5	; 0x05
    424a:	86 81       	ldd	r24, Z+6	; 0x06
    424c:	97 81       	ldd	r25, Z+7	; 0x07
}
    424e:	82 0f       	add	r24, r18
    4250:	93 1f       	adc	r25, r19
    4252:	08 95       	ret

00004254 <BMP280_ReadBytes>:
  @brief Gets the oversampling setting for the library
  @return oversampling
*****************************************************************************/
short BMP280_GetOversampling(void){
	return oversampling;
}
    4254:	1f 93       	push	r17
    4256:	cf 93       	push	r28
    4258:	df 93       	push	r29
    425a:	ec 01       	movw	r28, r24
    425c:	16 2f       	mov	r17, r22
    425e:	86 e7       	ldi	r24, 0x76	; 118
    4260:	0e 94 24 19 	call	0x3248	; 0x3248 <TWI_BeginWrite>
    4264:	88 81       	ld	r24, Y
    4266:	0e 94 16 19 	call	0x322c	; 0x322c <TWI_WriteByte>
    426a:	86 e7       	ldi	r24, 0x76	; 118
    426c:	09 d8       	rcall	.-4078   	; 0x3280 <TWI_BeginRead>
    426e:	80 93 71 0b 	sts	0x0B71, r24
    4272:	80 34       	cpi	r24, 0x40	; 64
    4274:	71 f4       	brne	.+28     	; 0x4292 <BMP280_ReadBytes+0x3e>
    4276:	61 2f       	mov	r22, r17
    4278:	70 e0       	ldi	r23, 0x00	; 0
    427a:	40 e0       	ldi	r20, 0x00	; 0
    427c:	ce 01       	movw	r24, r28
    427e:	3c d8       	rcall	.-3976   	; 0x32f8 <TWI_Read>
    4280:	88 7f       	andi	r24, 0xF8	; 248
    4282:	88 35       	cpi	r24, 0x58	; 88
    4284:	41 f4       	brne	.+16     	; 0x4296 <BMP280_ReadBytes+0x42>
    4286:	33 d8       	rcall	.-3994   	; 0x32ee <TWI_Stop>
    4288:	91 e0       	ldi	r25, 0x01	; 1
    428a:	81 11       	cpse	r24, r1
    428c:	05 c0       	rjmp	.+10     	; 0x4298 <BMP280_ReadBytes+0x44>
    428e:	90 e0       	ldi	r25, 0x00	; 0
    4290:	03 c0       	rjmp	.+6      	; 0x4298 <BMP280_ReadBytes+0x44>
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	01 c0       	rjmp	.+2      	; 0x4298 <BMP280_ReadBytes+0x44>
    4296:	90 e0       	ldi	r25, 0x00	; 0
    4298:	89 2f       	mov	r24, r25
    429a:	df 91       	pop	r29
    429c:	cf 91       	pop	r28
    429e:	1f 91       	pop	r17
    42a0:	08 95       	ret

000042a2 <BMP280_ReadUInt>:
    42a2:	0f 93       	push	r16
    42a4:	1f 93       	push	r17
    42a6:	cf 93       	push	r28
    42a8:	df 93       	push	r29
    42aa:	1f 92       	push	r1
    42ac:	1f 92       	push	r1
    42ae:	cd b7       	in	r28, 0x3d	; 61
    42b0:	de b7       	in	r29, 0x3e	; 62
    42b2:	8b 01       	movw	r16, r22
    42b4:	89 83       	std	Y+1, r24	; 0x01
    42b6:	62 e0       	ldi	r22, 0x02	; 2
    42b8:	ce 01       	movw	r24, r28
    42ba:	01 96       	adiw	r24, 0x01	; 1
    42bc:	cb df       	rcall	.-106    	; 0x4254 <BMP280_ReadBytes>
    42be:	88 23       	and	r24, r24
    42c0:	59 f0       	breq	.+22     	; 0x42d8 <BMP280_ReadUInt+0x36>
    42c2:	8a 81       	ldd	r24, Y+2	; 0x02
    42c4:	90 e0       	ldi	r25, 0x00	; 0
    42c6:	98 2f       	mov	r25, r24
    42c8:	88 27       	eor	r24, r24
    42ca:	29 81       	ldd	r18, Y+1	; 0x01
    42cc:	82 2b       	or	r24, r18
    42ce:	f8 01       	movw	r30, r16
    42d0:	91 83       	std	Z+1, r25	; 0x01
    42d2:	80 83       	st	Z, r24
    42d4:	81 e0       	ldi	r24, 0x01	; 1
    42d6:	03 c0       	rjmp	.+6      	; 0x42de <BMP280_ReadUInt+0x3c>
    42d8:	f8 01       	movw	r30, r16
    42da:	11 82       	std	Z+1, r1	; 0x01
    42dc:	10 82       	st	Z, r1
    42de:	0f 90       	pop	r0
    42e0:	0f 90       	pop	r0
    42e2:	df 91       	pop	r29
    42e4:	cf 91       	pop	r28
    42e6:	1f 91       	pop	r17
    42e8:	0f 91       	pop	r16
    42ea:	08 95       	ret

000042ec <BMP280_ReadInt>:
    42ec:	0f 93       	push	r16
    42ee:	1f 93       	push	r17
    42f0:	cf 93       	push	r28
    42f2:	df 93       	push	r29
    42f4:	1f 92       	push	r1
    42f6:	1f 92       	push	r1
    42f8:	cd b7       	in	r28, 0x3d	; 61
    42fa:	de b7       	in	r29, 0x3e	; 62
    42fc:	8b 01       	movw	r16, r22
    42fe:	89 83       	std	Y+1, r24	; 0x01
    4300:	62 e0       	ldi	r22, 0x02	; 2
    4302:	ce 01       	movw	r24, r28
    4304:	01 96       	adiw	r24, 0x01	; 1
    4306:	a6 df       	rcall	.-180    	; 0x4254 <BMP280_ReadBytes>
    4308:	88 23       	and	r24, r24
    430a:	59 f0       	breq	.+22     	; 0x4322 <BMP280_ReadInt+0x36>
    430c:	8a 81       	ldd	r24, Y+2	; 0x02
    430e:	90 e0       	ldi	r25, 0x00	; 0
    4310:	98 2f       	mov	r25, r24
    4312:	88 27       	eor	r24, r24
    4314:	29 81       	ldd	r18, Y+1	; 0x01
    4316:	82 2b       	or	r24, r18
    4318:	f8 01       	movw	r30, r16
    431a:	91 83       	std	Z+1, r25	; 0x01
    431c:	80 83       	st	Z, r24
    431e:	81 e0       	ldi	r24, 0x01	; 1
    4320:	03 c0       	rjmp	.+6      	; 0x4328 <BMP280_ReadInt+0x3c>
    4322:	f8 01       	movw	r30, r16
    4324:	11 82       	std	Z+1, r1	; 0x01
    4326:	10 82       	st	Z, r1
    4328:	0f 90       	pop	r0
    432a:	0f 90       	pop	r0
    432c:	df 91       	pop	r29
    432e:	cf 91       	pop	r28
    4330:	1f 91       	pop	r17
    4332:	0f 91       	pop	r16
    4334:	08 95       	ret

00004336 <BMP280_ReadUChar>:
    4336:	0f 93       	push	r16
    4338:	1f 93       	push	r17
    433a:	cf 93       	push	r28
    433c:	df 93       	push	r29
    433e:	1f 92       	push	r1
    4340:	cd b7       	in	r28, 0x3d	; 61
    4342:	de b7       	in	r29, 0x3e	; 62
    4344:	8b 01       	movw	r16, r22
    4346:	89 83       	std	Y+1, r24	; 0x01
    4348:	61 e0       	ldi	r22, 0x01	; 1
    434a:	ce 01       	movw	r24, r28
    434c:	01 96       	adiw	r24, 0x01	; 1
    434e:	82 df       	rcall	.-252    	; 0x4254 <BMP280_ReadBytes>
    4350:	88 23       	and	r24, r24
    4352:	a1 f0       	breq	.+40     	; 0x437c <BMP280_ReadUChar+0x46>
    4354:	89 81       	ldd	r24, Y+1	; 0x01
    4356:	1f 92       	push	r1
    4358:	8f 93       	push	r24
    435a:	8f e3       	ldi	r24, 0x3F	; 63
    435c:	96 e0       	ldi	r25, 0x06	; 6
    435e:	9f 93       	push	r25
    4360:	8f 93       	push	r24
    4362:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    4366:	89 81       	ldd	r24, Y+1	; 0x01
    4368:	90 e0       	ldi	r25, 0x00	; 0
    436a:	f8 01       	movw	r30, r16
    436c:	91 83       	std	Z+1, r25	; 0x01
    436e:	80 83       	st	Z, r24
    4370:	0f 90       	pop	r0
    4372:	0f 90       	pop	r0
    4374:	0f 90       	pop	r0
    4376:	0f 90       	pop	r0
    4378:	81 e0       	ldi	r24, 0x01	; 1
    437a:	03 c0       	rjmp	.+6      	; 0x4382 <BMP280_ReadUChar+0x4c>
    437c:	f8 01       	movw	r30, r16
    437e:	11 82       	std	Z+1, r1	; 0x01
    4380:	10 82       	st	Z, r1
    4382:	0f 90       	pop	r0
    4384:	df 91       	pop	r29
    4386:	cf 91       	pop	r28
    4388:	1f 91       	pop	r17
    438a:	0f 91       	pop	r16
    438c:	08 95       	ret

0000438e <BMP280_ReadInt4>:
    438e:	cf 92       	push	r12
    4390:	df 92       	push	r13
    4392:	ef 92       	push	r14
    4394:	ff 92       	push	r15
    4396:	0f 93       	push	r16
    4398:	1f 93       	push	r17
    439a:	cf 93       	push	r28
    439c:	df 93       	push	r29
    439e:	1f 92       	push	r1
    43a0:	1f 92       	push	r1
    43a2:	cd b7       	in	r28, 0x3d	; 61
    43a4:	de b7       	in	r29, 0x3e	; 62
    43a6:	7b 01       	movw	r14, r22
    43a8:	89 83       	std	Y+1, r24	; 0x01
    43aa:	00 91 00 00 	lds	r16, 0x0000
    43ae:	10 91 01 00 	lds	r17, 0x0001
    43b2:	b8 01       	movw	r22, r16
    43b4:	8c 2f       	mov	r24, r28
    43b6:	8f 5f       	subi	r24, 0xFF	; 255
    43b8:	be df       	rcall	.-132    	; 0x4336 <BMP280_ReadUChar>
    43ba:	88 23       	and	r24, r24
    43bc:	51 f1       	breq	.+84     	; 0x4412 <BMP280_ReadInt4+0x84>
    43be:	c0 90 00 00 	lds	r12, 0x0000
    43c2:	d0 90 01 00 	lds	r13, 0x0001
    43c6:	b6 01       	movw	r22, r12
    43c8:	8c 2f       	mov	r24, r28
    43ca:	8e 5f       	subi	r24, 0xFE	; 254
    43cc:	b4 df       	rcall	.-152    	; 0x4336 <BMP280_ReadUChar>
    43ce:	88 23       	and	r24, r24
    43d0:	01 f1       	breq	.+64     	; 0x4412 <BMP280_ReadInt4+0x84>
    43d2:	df 92       	push	r13
    43d4:	cf 92       	push	r12
    43d6:	1f 93       	push	r17
    43d8:	0f 93       	push	r16
    43da:	85 e5       	ldi	r24, 0x55	; 85
    43dc:	96 e0       	ldi	r25, 0x06	; 6
    43de:	9f 93       	push	r25
    43e0:	8f 93       	push	r24
    43e2:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    43e6:	02 95       	swap	r16
    43e8:	12 95       	swap	r17
    43ea:	10 7f       	andi	r17, 0xF0	; 240
    43ec:	10 27       	eor	r17, r16
    43ee:	00 7f       	andi	r16, 0xF0	; 240
    43f0:	10 27       	eor	r17, r16
    43f2:	8f e0       	ldi	r24, 0x0F	; 15
    43f4:	c8 22       	and	r12, r24
    43f6:	dd 24       	eor	r13, r13
    43f8:	0c 29       	or	r16, r12
    43fa:	1d 29       	or	r17, r13
    43fc:	f7 01       	movw	r30, r14
    43fe:	11 83       	std	Z+1, r17	; 0x01
    4400:	00 83       	st	Z, r16
    4402:	0f 90       	pop	r0
    4404:	0f 90       	pop	r0
    4406:	0f 90       	pop	r0
    4408:	0f 90       	pop	r0
    440a:	0f 90       	pop	r0
    440c:	0f 90       	pop	r0
    440e:	81 e0       	ldi	r24, 0x01	; 1
    4410:	04 c0       	rjmp	.+8      	; 0x441a <BMP280_ReadInt4+0x8c>
    4412:	f7 01       	movw	r30, r14
    4414:	11 82       	std	Z+1, r1	; 0x01
    4416:	10 82       	st	Z, r1
    4418:	80 e0       	ldi	r24, 0x00	; 0
    441a:	0f 90       	pop	r0
    441c:	0f 90       	pop	r0
    441e:	df 91       	pop	r29
    4420:	cf 91       	pop	r28
    4422:	1f 91       	pop	r17
    4424:	0f 91       	pop	r16
    4426:	ff 90       	pop	r15
    4428:	ef 90       	pop	r14
    442a:	df 90       	pop	r13
    442c:	cf 90       	pop	r12
    442e:	08 95       	ret

00004430 <BMP280_ReadInt5>:
    4430:	cf 92       	push	r12
    4432:	df 92       	push	r13
    4434:	ef 92       	push	r14
    4436:	ff 92       	push	r15
    4438:	0f 93       	push	r16
    443a:	1f 93       	push	r17
    443c:	cf 93       	push	r28
    443e:	df 93       	push	r29
    4440:	1f 92       	push	r1
    4442:	1f 92       	push	r1
    4444:	cd b7       	in	r28, 0x3d	; 61
    4446:	de b7       	in	r29, 0x3e	; 62
    4448:	7b 01       	movw	r14, r22
    444a:	89 83       	std	Y+1, r24	; 0x01
    444c:	00 91 00 00 	lds	r16, 0x0000
    4450:	10 91 01 00 	lds	r17, 0x0001
    4454:	b8 01       	movw	r22, r16
    4456:	8c 2f       	mov	r24, r28
    4458:	8f 5f       	subi	r24, 0xFF	; 255
    445a:	6d df       	rcall	.-294    	; 0x4336 <BMP280_ReadUChar>
    445c:	88 23       	and	r24, r24
    445e:	09 f1       	breq	.+66     	; 0x44a2 <BMP280_ReadInt5+0x72>
    4460:	c0 90 00 00 	lds	r12, 0x0000
    4464:	d0 90 01 00 	lds	r13, 0x0001
    4468:	b6 01       	movw	r22, r12
    446a:	8c 2f       	mov	r24, r28
    446c:	8e 5f       	subi	r24, 0xFE	; 254
    446e:	63 df       	rcall	.-314    	; 0x4336 <BMP280_ReadUChar>
    4470:	88 23       	and	r24, r24
    4472:	b9 f0       	breq	.+46     	; 0x44a2 <BMP280_ReadInt5+0x72>
    4474:	15 95       	asr	r17
    4476:	07 95       	ror	r16
    4478:	15 95       	asr	r17
    447a:	07 95       	ror	r16
    447c:	15 95       	asr	r17
    447e:	07 95       	ror	r16
    4480:	15 95       	asr	r17
    4482:	07 95       	ror	r16
    4484:	cc 0c       	add	r12, r12
    4486:	dd 1c       	adc	r13, r13
    4488:	cc 0c       	add	r12, r12
    448a:	dd 1c       	adc	r13, r13
    448c:	cc 0c       	add	r12, r12
    448e:	dd 1c       	adc	r13, r13
    4490:	cc 0c       	add	r12, r12
    4492:	dd 1c       	adc	r13, r13
    4494:	0c 29       	or	r16, r12
    4496:	1d 29       	or	r17, r13
    4498:	f7 01       	movw	r30, r14
    449a:	11 83       	std	Z+1, r17	; 0x01
    449c:	00 83       	st	Z, r16
    449e:	81 e0       	ldi	r24, 0x01	; 1
    44a0:	04 c0       	rjmp	.+8      	; 0x44aa <BMP280_ReadInt5+0x7a>
    44a2:	f7 01       	movw	r30, r14
    44a4:	11 82       	std	Z+1, r1	; 0x01
    44a6:	10 82       	st	Z, r1
    44a8:	80 e0       	ldi	r24, 0x00	; 0
    44aa:	0f 90       	pop	r0
    44ac:	0f 90       	pop	r0
    44ae:	df 91       	pop	r29
    44b0:	cf 91       	pop	r28
    44b2:	1f 91       	pop	r17
    44b4:	0f 91       	pop	r16
    44b6:	ff 90       	pop	r15
    44b8:	ef 90       	pop	r14
    44ba:	df 90       	pop	r13
    44bc:	cf 90       	pop	r12
    44be:	08 95       	ret

000044c0 <BME280_ClearCalibration>:
    44c0:	10 92 81 0b 	sts	0x0B81, r1
    44c4:	10 92 80 0b 	sts	0x0B80, r1
    44c8:	10 92 9b 0b 	sts	0x0B9B, r1
    44cc:	10 92 9a 0b 	sts	0x0B9A, r1
    44d0:	10 92 99 0b 	sts	0x0B99, r1
    44d4:	10 92 98 0b 	sts	0x0B98, r1
    44d8:	10 92 7f 0b 	sts	0x0B7F, r1
    44dc:	10 92 7e 0b 	sts	0x0B7E, r1
    44e0:	10 92 97 0b 	sts	0x0B97, r1
    44e4:	10 92 96 0b 	sts	0x0B96, r1
    44e8:	10 92 95 0b 	sts	0x0B95, r1
    44ec:	10 92 94 0b 	sts	0x0B94, r1
    44f0:	10 92 93 0b 	sts	0x0B93, r1
    44f4:	10 92 92 0b 	sts	0x0B92, r1
    44f8:	10 92 91 0b 	sts	0x0B91, r1
    44fc:	10 92 90 0b 	sts	0x0B90, r1
    4500:	10 92 8f 0b 	sts	0x0B8F, r1
    4504:	10 92 8e 0b 	sts	0x0B8E, r1
    4508:	10 92 8d 0b 	sts	0x0B8D, r1
    450c:	10 92 8c 0b 	sts	0x0B8C, r1
    4510:	10 92 8b 0b 	sts	0x0B8B, r1
    4514:	10 92 8a 0b 	sts	0x0B8A, r1
    4518:	10 92 89 0b 	sts	0x0B89, r1
    451c:	10 92 88 0b 	sts	0x0B88, r1
    4520:	10 92 7d 0b 	sts	0x0B7D, r1
    4524:	10 92 87 0b 	sts	0x0B87, r1
    4528:	10 92 86 0b 	sts	0x0B86, r1
    452c:	10 92 7c 0b 	sts	0x0B7C, r1
    4530:	10 92 85 0b 	sts	0x0B85, r1
    4534:	10 92 84 0b 	sts	0x0B84, r1
    4538:	10 92 83 0b 	sts	0x0B83, r1
    453c:	10 92 82 0b 	sts	0x0B82, r1
    4540:	10 92 7b 0b 	sts	0x0B7B, r1
    4544:	08 95       	ret

00004546 <BMP280_Init>:
    4546:	0f 93       	push	r16
    4548:	1f 93       	push	r17
    454a:	cf 93       	push	r28
    454c:	df 93       	push	r29
    454e:	1f 92       	push	r1
    4550:	cd b7       	in	r28, 0x3d	; 61
    4552:	de b7       	in	r29, 0x3e	; 62
    4554:	b5 df       	rcall	.-150    	; 0x44c0 <BME280_ClearCalibration>
    4556:	60 e8       	ldi	r22, 0x80	; 128
    4558:	7b e0       	ldi	r23, 0x0B	; 11
    455a:	88 e8       	ldi	r24, 0x88	; 136
    455c:	a2 de       	rcall	.-700    	; 0x42a2 <BMP280_ReadUInt>
    455e:	1f 92       	push	r1
    4560:	8f 93       	push	r24
    4562:	0d e6       	ldi	r16, 0x6D	; 109
    4564:	16 e0       	ldi	r17, 0x06	; 6
    4566:	1f 93       	push	r17
    4568:	0f 93       	push	r16
    456a:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    456e:	6a e9       	ldi	r22, 0x9A	; 154
    4570:	7b e0       	ldi	r23, 0x0B	; 11
    4572:	8a e8       	ldi	r24, 0x8A	; 138
    4574:	bb de       	rcall	.-650    	; 0x42ec <BMP280_ReadInt>
    4576:	1f 92       	push	r1
    4578:	8f 93       	push	r24
    457a:	1f 93       	push	r17
    457c:	0f 93       	push	r16
    457e:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    4582:	68 e9       	ldi	r22, 0x98	; 152
    4584:	7b e0       	ldi	r23, 0x0B	; 11
    4586:	8c e8       	ldi	r24, 0x8C	; 140
    4588:	b1 de       	rcall	.-670    	; 0x42ec <BMP280_ReadInt>
    458a:	1f 92       	push	r1
    458c:	8f 93       	push	r24
    458e:	1f 93       	push	r17
    4590:	0f 93       	push	r16
    4592:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    4596:	6e e7       	ldi	r22, 0x7E	; 126
    4598:	7b e0       	ldi	r23, 0x0B	; 11
    459a:	8e e8       	ldi	r24, 0x8E	; 142
    459c:	82 de       	rcall	.-764    	; 0x42a2 <BMP280_ReadUInt>
    459e:	1f 92       	push	r1
    45a0:	8f 93       	push	r24
    45a2:	1f 93       	push	r17
    45a4:	0f 93       	push	r16
    45a6:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    45aa:	66 e9       	ldi	r22, 0x96	; 150
    45ac:	7b e0       	ldi	r23, 0x0B	; 11
    45ae:	80 e9       	ldi	r24, 0x90	; 144
    45b0:	9d de       	rcall	.-710    	; 0x42ec <BMP280_ReadInt>
    45b2:	1f 92       	push	r1
    45b4:	8f 93       	push	r24
    45b6:	1f 93       	push	r17
    45b8:	0f 93       	push	r16
    45ba:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    45be:	64 e9       	ldi	r22, 0x94	; 148
    45c0:	7b e0       	ldi	r23, 0x0B	; 11
    45c2:	82 e9       	ldi	r24, 0x92	; 146
    45c4:	93 de       	rcall	.-730    	; 0x42ec <BMP280_ReadInt>
    45c6:	1f 92       	push	r1
    45c8:	8f 93       	push	r24
    45ca:	1f 93       	push	r17
    45cc:	0f 93       	push	r16
    45ce:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    45d2:	62 e9       	ldi	r22, 0x92	; 146
    45d4:	7b e0       	ldi	r23, 0x0B	; 11
    45d6:	84 e9       	ldi	r24, 0x94	; 148
    45d8:	89 de       	rcall	.-750    	; 0x42ec <BMP280_ReadInt>
    45da:	1f 92       	push	r1
    45dc:	8f 93       	push	r24
    45de:	1f 93       	push	r17
    45e0:	0f 93       	push	r16
    45e2:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    45e6:	60 e9       	ldi	r22, 0x90	; 144
    45e8:	7b e0       	ldi	r23, 0x0B	; 11
    45ea:	86 e9       	ldi	r24, 0x96	; 150
    45ec:	7f de       	rcall	.-770    	; 0x42ec <BMP280_ReadInt>
    45ee:	1f 92       	push	r1
    45f0:	8f 93       	push	r24
    45f2:	1f 93       	push	r17
    45f4:	0f 93       	push	r16
    45f6:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    45fa:	0f b6       	in	r0, 0x3f	; 63
    45fc:	f8 94       	cli
    45fe:	de bf       	out	0x3e, r29	; 62
    4600:	0f be       	out	0x3f, r0	; 63
    4602:	cd bf       	out	0x3d, r28	; 61
    4604:	6e e8       	ldi	r22, 0x8E	; 142
    4606:	7b e0       	ldi	r23, 0x0B	; 11
    4608:	88 e9       	ldi	r24, 0x98	; 152
    460a:	70 de       	rcall	.-800    	; 0x42ec <BMP280_ReadInt>
    460c:	1f 92       	push	r1
    460e:	8f 93       	push	r24
    4610:	1f 93       	push	r17
    4612:	0f 93       	push	r16
    4614:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    4618:	6c e8       	ldi	r22, 0x8C	; 140
    461a:	7b e0       	ldi	r23, 0x0B	; 11
    461c:	8a e9       	ldi	r24, 0x9A	; 154
    461e:	66 de       	rcall	.-820    	; 0x42ec <BMP280_ReadInt>
    4620:	1f 92       	push	r1
    4622:	8f 93       	push	r24
    4624:	1f 93       	push	r17
    4626:	0f 93       	push	r16
    4628:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    462c:	6a e8       	ldi	r22, 0x8A	; 138
    462e:	7b e0       	ldi	r23, 0x0B	; 11
    4630:	8c e9       	ldi	r24, 0x9C	; 156
    4632:	5c de       	rcall	.-840    	; 0x42ec <BMP280_ReadInt>
    4634:	1f 92       	push	r1
    4636:	8f 93       	push	r24
    4638:	1f 93       	push	r17
    463a:	0f 93       	push	r16
    463c:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    4640:	68 e8       	ldi	r22, 0x88	; 136
    4642:	7b e0       	ldi	r23, 0x0B	; 11
    4644:	8e e9       	ldi	r24, 0x9E	; 158
    4646:	52 de       	rcall	.-860    	; 0x42ec <BMP280_ReadInt>
    4648:	1f 92       	push	r1
    464a:	8f 93       	push	r24
    464c:	1f 93       	push	r17
    464e:	0f 93       	push	r16
    4650:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    4654:	6d e7       	ldi	r22, 0x7D	; 125
    4656:	7b e0       	ldi	r23, 0x0B	; 11
    4658:	81 ea       	ldi	r24, 0xA1	; 161
    465a:	6d de       	rcall	.-806    	; 0x4336 <BMP280_ReadUChar>
    465c:	1f 92       	push	r1
    465e:	8f 93       	push	r24
    4660:	1f 93       	push	r17
    4662:	0f 93       	push	r16
    4664:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    4668:	80 91 7d 0b 	lds	r24, 0x0B7D
    466c:	1f 92       	push	r1
    466e:	8f 93       	push	r24
    4670:	8e e7       	ldi	r24, 0x7E	; 126
    4672:	96 e0       	ldi	r25, 0x06	; 6
    4674:	9f 93       	push	r25
    4676:	8f 93       	push	r24
    4678:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    467c:	66 e8       	ldi	r22, 0x86	; 134
    467e:	7b e0       	ldi	r23, 0x0B	; 11
    4680:	81 ee       	ldi	r24, 0xE1	; 225
    4682:	34 de       	rcall	.-920    	; 0x42ec <BMP280_ReadInt>
    4684:	1f 92       	push	r1
    4686:	8f 93       	push	r24
    4688:	1f 93       	push	r17
    468a:	0f 93       	push	r16
    468c:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    4690:	80 91 87 0b 	lds	r24, 0x0B87
    4694:	8f 93       	push	r24
    4696:	80 91 86 0b 	lds	r24, 0x0B86
    469a:	8f 93       	push	r24
    469c:	8d e8       	ldi	r24, 0x8D	; 141
    469e:	96 e0       	ldi	r25, 0x06	; 6
    46a0:	9f 93       	push	r25
    46a2:	8f 93       	push	r24
    46a4:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    46a8:	0f b6       	in	r0, 0x3f	; 63
    46aa:	f8 94       	cli
    46ac:	de bf       	out	0x3e, r29	; 62
    46ae:	0f be       	out	0x3f, r0	; 63
    46b0:	cd bf       	out	0x3d, r28	; 61
    46b2:	6c e7       	ldi	r22, 0x7C	; 124
    46b4:	7b e0       	ldi	r23, 0x0B	; 11
    46b6:	83 ee       	ldi	r24, 0xE3	; 227
    46b8:	3e de       	rcall	.-900    	; 0x4336 <BMP280_ReadUChar>
    46ba:	1f 92       	push	r1
    46bc:	8f 93       	push	r24
    46be:	1f 93       	push	r17
    46c0:	0f 93       	push	r16
    46c2:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    46c6:	80 91 7c 0b 	lds	r24, 0x0B7C
    46ca:	1f 92       	push	r1
    46cc:	8f 93       	push	r24
    46ce:	8c e9       	ldi	r24, 0x9C	; 156
    46d0:	96 e0       	ldi	r25, 0x06	; 6
    46d2:	9f 93       	push	r25
    46d4:	8f 93       	push	r24
    46d6:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    46da:	64 e8       	ldi	r22, 0x84	; 132
    46dc:	7b e0       	ldi	r23, 0x0B	; 11
    46de:	84 ee       	ldi	r24, 0xE4	; 228
    46e0:	56 de       	rcall	.-852    	; 0x438e <BMP280_ReadInt4>
    46e2:	1f 92       	push	r1
    46e4:	8f 93       	push	r24
    46e6:	1f 93       	push	r17
    46e8:	0f 93       	push	r16
    46ea:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    46ee:	80 91 85 0b 	lds	r24, 0x0B85
    46f2:	8f 93       	push	r24
    46f4:	80 91 84 0b 	lds	r24, 0x0B84
    46f8:	8f 93       	push	r24
    46fa:	8b ea       	ldi	r24, 0xAB	; 171
    46fc:	96 e0       	ldi	r25, 0x06	; 6
    46fe:	9f 93       	push	r25
    4700:	8f 93       	push	r24
    4702:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    4706:	62 e8       	ldi	r22, 0x82	; 130
    4708:	7b e0       	ldi	r23, 0x0B	; 11
    470a:	85 ee       	ldi	r24, 0xE5	; 229
    470c:	91 de       	rcall	.-734    	; 0x4430 <BMP280_ReadInt5>
    470e:	1f 92       	push	r1
    4710:	8f 93       	push	r24
    4712:	1f 93       	push	r17
    4714:	0f 93       	push	r16
    4716:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    471a:	80 91 83 0b 	lds	r24, 0x0B83
    471e:	8f 93       	push	r24
    4720:	80 91 82 0b 	lds	r24, 0x0B82
    4724:	8f 93       	push	r24
    4726:	8a eb       	ldi	r24, 0xBA	; 186
    4728:	96 e0       	ldi	r25, 0x06	; 6
    472a:	9f 93       	push	r25
    472c:	8f 93       	push	r24
    472e:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    4732:	87 ee       	ldi	r24, 0xE7	; 231
    4734:	89 83       	std	Y+1, r24	; 0x01
    4736:	61 e0       	ldi	r22, 0x01	; 1
    4738:	ce 01       	movw	r24, r28
    473a:	01 96       	adiw	r24, 0x01	; 1
    473c:	8b dd       	rcall	.-1258   	; 0x4254 <BMP280_ReadBytes>
    473e:	0f b6       	in	r0, 0x3f	; 63
    4740:	f8 94       	cli
    4742:	de bf       	out	0x3e, r29	; 62
    4744:	0f be       	out	0x3f, r0	; 63
    4746:	cd bf       	out	0x3d, r28	; 61
    4748:	88 23       	and	r24, r24
    474a:	41 f0       	breq	.+16     	; 0x475c <BMP280_Init+0x216>
    474c:	89 81       	ldd	r24, Y+1	; 0x01
    474e:	90 e0       	ldi	r25, 0x00	; 0
    4750:	90 93 7c 0b 	sts	0x0B7C, r25
    4754:	80 93 7b 0b 	sts	0x0B7B, r24
    4758:	81 e0       	ldi	r24, 0x01	; 1
    475a:	04 c0       	rjmp	.+8      	; 0x4764 <BMP280_Init+0x21e>
    475c:	10 92 7c 0b 	sts	0x0B7C, r1
    4760:	10 92 7b 0b 	sts	0x0B7B, r1
    4764:	1f 92       	push	r1
    4766:	8f 93       	push	r24
    4768:	8d e6       	ldi	r24, 0x6D	; 109
    476a:	96 e0       	ldi	r25, 0x06	; 6
    476c:	9f 93       	push	r25
    476e:	8f 93       	push	r24
    4770:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    4774:	80 91 7b 0b 	lds	r24, 0x0B7B
    4778:	28 2f       	mov	r18, r24
    477a:	08 2e       	mov	r0, r24
    477c:	00 0c       	add	r0, r0
    477e:	33 0b       	sbc	r19, r19
    4780:	3f 93       	push	r19
    4782:	8f 93       	push	r24
    4784:	89 ec       	ldi	r24, 0xC9	; 201
    4786:	96 e0       	ldi	r25, 0x06	; 6
    4788:	9f 93       	push	r25
    478a:	8f 93       	push	r24
    478c:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    4790:	60 e8       	ldi	r22, 0x80	; 128
    4792:	7b e0       	ldi	r23, 0x0B	; 11
    4794:	88 e8       	ldi	r24, 0x88	; 136
    4796:	85 dd       	rcall	.-1270   	; 0x42a2 <BMP280_ReadUInt>
    4798:	0f b6       	in	r0, 0x3f	; 63
    479a:	f8 94       	cli
    479c:	de bf       	out	0x3e, r29	; 62
    479e:	0f be       	out	0x3f, r0	; 63
    47a0:	cd bf       	out	0x3d, r28	; 61
    47a2:	88 23       	and	r24, r24
    47a4:	09 f4       	brne	.+2      	; 0x47a8 <BMP280_Init+0x262>
    47a6:	f8 c0       	rjmp	.+496    	; 0x4998 <BMP280_Init+0x452>
    47a8:	6a e9       	ldi	r22, 0x9A	; 154
    47aa:	7b e0       	ldi	r23, 0x0B	; 11
    47ac:	8a e8       	ldi	r24, 0x8A	; 138
    47ae:	9e dd       	rcall	.-1220   	; 0x42ec <BMP280_ReadInt>
    47b0:	88 23       	and	r24, r24
    47b2:	09 f4       	brne	.+2      	; 0x47b6 <BMP280_Init+0x270>
    47b4:	f1 c0       	rjmp	.+482    	; 0x4998 <BMP280_Init+0x452>
    47b6:	68 e9       	ldi	r22, 0x98	; 152
    47b8:	7b e0       	ldi	r23, 0x0B	; 11
    47ba:	8c e8       	ldi	r24, 0x8C	; 140
    47bc:	97 dd       	rcall	.-1234   	; 0x42ec <BMP280_ReadInt>
    47be:	88 23       	and	r24, r24
    47c0:	09 f4       	brne	.+2      	; 0x47c4 <BMP280_Init+0x27e>
    47c2:	ea c0       	rjmp	.+468    	; 0x4998 <BMP280_Init+0x452>
    47c4:	6e e7       	ldi	r22, 0x7E	; 126
    47c6:	7b e0       	ldi	r23, 0x0B	; 11
    47c8:	8e e8       	ldi	r24, 0x8E	; 142
    47ca:	6b dd       	rcall	.-1322   	; 0x42a2 <BMP280_ReadUInt>
    47cc:	88 23       	and	r24, r24
    47ce:	09 f4       	brne	.+2      	; 0x47d2 <BMP280_Init+0x28c>
    47d0:	e3 c0       	rjmp	.+454    	; 0x4998 <BMP280_Init+0x452>
    47d2:	66 e9       	ldi	r22, 0x96	; 150
    47d4:	7b e0       	ldi	r23, 0x0B	; 11
    47d6:	80 e9       	ldi	r24, 0x90	; 144
    47d8:	89 dd       	rcall	.-1262   	; 0x42ec <BMP280_ReadInt>
    47da:	88 23       	and	r24, r24
    47dc:	09 f4       	brne	.+2      	; 0x47e0 <BMP280_Init+0x29a>
    47de:	dc c0       	rjmp	.+440    	; 0x4998 <BMP280_Init+0x452>
    47e0:	64 e9       	ldi	r22, 0x94	; 148
    47e2:	7b e0       	ldi	r23, 0x0B	; 11
    47e4:	82 e9       	ldi	r24, 0x92	; 146
    47e6:	82 dd       	rcall	.-1276   	; 0x42ec <BMP280_ReadInt>
    47e8:	88 23       	and	r24, r24
    47ea:	09 f4       	brne	.+2      	; 0x47ee <BMP280_Init+0x2a8>
    47ec:	d5 c0       	rjmp	.+426    	; 0x4998 <BMP280_Init+0x452>
    47ee:	62 e9       	ldi	r22, 0x92	; 146
    47f0:	7b e0       	ldi	r23, 0x0B	; 11
    47f2:	84 e9       	ldi	r24, 0x94	; 148
    47f4:	7b dd       	rcall	.-1290   	; 0x42ec <BMP280_ReadInt>
    47f6:	88 23       	and	r24, r24
    47f8:	09 f4       	brne	.+2      	; 0x47fc <BMP280_Init+0x2b6>
    47fa:	ce c0       	rjmp	.+412    	; 0x4998 <BMP280_Init+0x452>
    47fc:	60 e9       	ldi	r22, 0x90	; 144
    47fe:	7b e0       	ldi	r23, 0x0B	; 11
    4800:	86 e9       	ldi	r24, 0x96	; 150
    4802:	74 dd       	rcall	.-1304   	; 0x42ec <BMP280_ReadInt>
    4804:	88 23       	and	r24, r24
    4806:	09 f4       	brne	.+2      	; 0x480a <BMP280_Init+0x2c4>
    4808:	c7 c0       	rjmp	.+398    	; 0x4998 <BMP280_Init+0x452>
    480a:	6e e8       	ldi	r22, 0x8E	; 142
    480c:	7b e0       	ldi	r23, 0x0B	; 11
    480e:	88 e9       	ldi	r24, 0x98	; 152
    4810:	6d dd       	rcall	.-1318   	; 0x42ec <BMP280_ReadInt>
    4812:	88 23       	and	r24, r24
    4814:	09 f4       	brne	.+2      	; 0x4818 <BMP280_Init+0x2d2>
    4816:	c0 c0       	rjmp	.+384    	; 0x4998 <BMP280_Init+0x452>
    4818:	6c e8       	ldi	r22, 0x8C	; 140
    481a:	7b e0       	ldi	r23, 0x0B	; 11
    481c:	8a e9       	ldi	r24, 0x9A	; 154
    481e:	66 dd       	rcall	.-1332   	; 0x42ec <BMP280_ReadInt>
    4820:	88 23       	and	r24, r24
    4822:	09 f4       	brne	.+2      	; 0x4826 <BMP280_Init+0x2e0>
    4824:	b9 c0       	rjmp	.+370    	; 0x4998 <BMP280_Init+0x452>
    4826:	6a e8       	ldi	r22, 0x8A	; 138
    4828:	7b e0       	ldi	r23, 0x0B	; 11
    482a:	8c e9       	ldi	r24, 0x9C	; 156
    482c:	5f dd       	rcall	.-1346   	; 0x42ec <BMP280_ReadInt>
    482e:	88 23       	and	r24, r24
    4830:	09 f4       	brne	.+2      	; 0x4834 <BMP280_Init+0x2ee>
    4832:	b2 c0       	rjmp	.+356    	; 0x4998 <BMP280_Init+0x452>
    4834:	68 e8       	ldi	r22, 0x88	; 136
    4836:	7b e0       	ldi	r23, 0x0B	; 11
    4838:	8e e9       	ldi	r24, 0x9E	; 158
    483a:	58 dd       	rcall	.-1360   	; 0x42ec <BMP280_ReadInt>
    483c:	88 23       	and	r24, r24
    483e:	09 f4       	brne	.+2      	; 0x4842 <BMP280_Init+0x2fc>
    4840:	ab c0       	rjmp	.+342    	; 0x4998 <BMP280_Init+0x452>
    4842:	6d e7       	ldi	r22, 0x7D	; 125
    4844:	7b e0       	ldi	r23, 0x0B	; 11
    4846:	81 ea       	ldi	r24, 0xA1	; 161
    4848:	76 dd       	rcall	.-1300   	; 0x4336 <BMP280_ReadUChar>
    484a:	88 23       	and	r24, r24
    484c:	09 f4       	brne	.+2      	; 0x4850 <BMP280_Init+0x30a>
    484e:	a4 c0       	rjmp	.+328    	; 0x4998 <BMP280_Init+0x452>
    4850:	66 e8       	ldi	r22, 0x86	; 134
    4852:	7b e0       	ldi	r23, 0x0B	; 11
    4854:	81 ee       	ldi	r24, 0xE1	; 225
    4856:	4a dd       	rcall	.-1388   	; 0x42ec <BMP280_ReadInt>
    4858:	88 23       	and	r24, r24
    485a:	09 f4       	brne	.+2      	; 0x485e <BMP280_Init+0x318>
    485c:	9d c0       	rjmp	.+314    	; 0x4998 <BMP280_Init+0x452>
    485e:	6c e7       	ldi	r22, 0x7C	; 124
    4860:	7b e0       	ldi	r23, 0x0B	; 11
    4862:	83 ee       	ldi	r24, 0xE3	; 227
    4864:	68 dd       	rcall	.-1328   	; 0x4336 <BMP280_ReadUChar>
    4866:	88 23       	and	r24, r24
    4868:	09 f4       	brne	.+2      	; 0x486c <BMP280_Init+0x326>
    486a:	96 c0       	rjmp	.+300    	; 0x4998 <BMP280_Init+0x452>
    486c:	64 e8       	ldi	r22, 0x84	; 132
    486e:	7b e0       	ldi	r23, 0x0B	; 11
    4870:	84 ee       	ldi	r24, 0xE4	; 228
    4872:	8d dd       	rcall	.-1254   	; 0x438e <BMP280_ReadInt4>
    4874:	88 23       	and	r24, r24
    4876:	09 f4       	brne	.+2      	; 0x487a <BMP280_Init+0x334>
    4878:	8f c0       	rjmp	.+286    	; 0x4998 <BMP280_Init+0x452>
    487a:	62 e8       	ldi	r22, 0x82	; 130
    487c:	7b e0       	ldi	r23, 0x0B	; 11
    487e:	85 ee       	ldi	r24, 0xE5	; 229
    4880:	d7 dd       	rcall	.-1106   	; 0x4430 <BMP280_ReadInt5>
    4882:	88 23       	and	r24, r24
    4884:	09 f4       	brne	.+2      	; 0x4888 <BMP280_Init+0x342>
    4886:	88 c0       	rjmp	.+272    	; 0x4998 <BMP280_Init+0x452>
    4888:	87 ee       	ldi	r24, 0xE7	; 231
    488a:	89 83       	std	Y+1, r24	; 0x01
    488c:	61 e0       	ldi	r22, 0x01	; 1
    488e:	ce 01       	movw	r24, r28
    4890:	01 96       	adiw	r24, 0x01	; 1
    4892:	e0 dc       	rcall	.-1600   	; 0x4254 <BMP280_ReadBytes>
    4894:	88 23       	and	r24, r24
    4896:	09 f4       	brne	.+2      	; 0x489a <BMP280_Init+0x354>
    4898:	7b c0       	rjmp	.+246    	; 0x4990 <BMP280_Init+0x44a>
    489a:	89 81       	ldd	r24, Y+1	; 0x01
    489c:	90 e0       	ldi	r25, 0x00	; 0
    489e:	90 93 7c 0b 	sts	0x0B7C, r25
    48a2:	80 93 7b 0b 	sts	0x0B7B, r24
    48a6:	28 2f       	mov	r18, r24
    48a8:	08 2e       	mov	r0, r24
    48aa:	00 0c       	add	r0, r0
    48ac:	33 0b       	sbc	r19, r19
    48ae:	3f 93       	push	r19
    48b0:	8f 93       	push	r24
    48b2:	80 91 83 0b 	lds	r24, 0x0B83
    48b6:	8f 93       	push	r24
    48b8:	80 91 82 0b 	lds	r24, 0x0B82
    48bc:	8f 93       	push	r24
    48be:	80 91 85 0b 	lds	r24, 0x0B85
    48c2:	8f 93       	push	r24
    48c4:	80 91 84 0b 	lds	r24, 0x0B84
    48c8:	8f 93       	push	r24
    48ca:	80 91 7c 0b 	lds	r24, 0x0B7C
    48ce:	1f 92       	push	r1
    48d0:	8f 93       	push	r24
    48d2:	80 91 87 0b 	lds	r24, 0x0B87
    48d6:	8f 93       	push	r24
    48d8:	80 91 86 0b 	lds	r24, 0x0B86
    48dc:	8f 93       	push	r24
    48de:	80 91 7d 0b 	lds	r24, 0x0B7D
    48e2:	1f 92       	push	r1
    48e4:	8f 93       	push	r24
    48e6:	80 91 89 0b 	lds	r24, 0x0B89
    48ea:	8f 93       	push	r24
    48ec:	80 91 88 0b 	lds	r24, 0x0B88
    48f0:	8f 93       	push	r24
    48f2:	80 91 8b 0b 	lds	r24, 0x0B8B
    48f6:	8f 93       	push	r24
    48f8:	80 91 8a 0b 	lds	r24, 0x0B8A
    48fc:	8f 93       	push	r24
    48fe:	80 91 8d 0b 	lds	r24, 0x0B8D
    4902:	8f 93       	push	r24
    4904:	80 91 8c 0b 	lds	r24, 0x0B8C
    4908:	8f 93       	push	r24
    490a:	80 91 8f 0b 	lds	r24, 0x0B8F
    490e:	8f 93       	push	r24
    4910:	80 91 8e 0b 	lds	r24, 0x0B8E
    4914:	8f 93       	push	r24
    4916:	80 91 91 0b 	lds	r24, 0x0B91
    491a:	8f 93       	push	r24
    491c:	80 91 90 0b 	lds	r24, 0x0B90
    4920:	8f 93       	push	r24
    4922:	80 91 93 0b 	lds	r24, 0x0B93
    4926:	8f 93       	push	r24
    4928:	80 91 92 0b 	lds	r24, 0x0B92
    492c:	8f 93       	push	r24
    492e:	80 91 95 0b 	lds	r24, 0x0B95
    4932:	8f 93       	push	r24
    4934:	80 91 94 0b 	lds	r24, 0x0B94
    4938:	8f 93       	push	r24
    493a:	80 91 97 0b 	lds	r24, 0x0B97
    493e:	8f 93       	push	r24
    4940:	80 91 96 0b 	lds	r24, 0x0B96
    4944:	8f 93       	push	r24
    4946:	80 91 7f 0b 	lds	r24, 0x0B7F
    494a:	8f 93       	push	r24
    494c:	80 91 7e 0b 	lds	r24, 0x0B7E
    4950:	8f 93       	push	r24
    4952:	80 91 99 0b 	lds	r24, 0x0B99
    4956:	8f 93       	push	r24
    4958:	80 91 98 0b 	lds	r24, 0x0B98
    495c:	8f 93       	push	r24
    495e:	80 91 9b 0b 	lds	r24, 0x0B9B
    4962:	8f 93       	push	r24
    4964:	80 91 9a 0b 	lds	r24, 0x0B9A
    4968:	8f 93       	push	r24
    496a:	80 91 81 0b 	lds	r24, 0x0B81
    496e:	8f 93       	push	r24
    4970:	80 91 80 0b 	lds	r24, 0x0B80
    4974:	8f 93       	push	r24
    4976:	88 ed       	ldi	r24, 0xD8	; 216
    4978:	96 e0       	ldi	r25, 0x06	; 6
    497a:	9f 93       	push	r25
    497c:	8f 93       	push	r24
    497e:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    4982:	0f b6       	in	r0, 0x3f	; 63
    4984:	f8 94       	cli
    4986:	de bf       	out	0x3e, r29	; 62
    4988:	0f be       	out	0x3f, r0	; 63
    498a:	cd bf       	out	0x3d, r28	; 61
    498c:	81 e0       	ldi	r24, 0x01	; 1
    498e:	04 c0       	rjmp	.+8      	; 0x4998 <BMP280_Init+0x452>
    4990:	10 92 7c 0b 	sts	0x0B7C, r1
    4994:	10 92 7b 0b 	sts	0x0B7B, r1
    4998:	0f 90       	pop	r0
    499a:	df 91       	pop	r29
    499c:	cf 91       	pop	r28
    499e:	1f 91       	pop	r17
    49a0:	0f 91       	pop	r16
    49a2:	08 95       	ret

000049a4 <BMP280_SetOversampling>:
  @brief Sets the oversampling setting for the library
  @param[in] oss Oversampling setting
  @return 1
*****************************************************************************/
char BMP280_SetOversampling(short oss){
	oversampling = oss;
    49a4:	90 93 7a 0b 	sts	0x0B7A, r25
    49a8:	80 93 79 0b 	sts	0x0B79, r24
	return (1);
}
    49ac:	81 e0       	ldi	r24, 0x01	; 1
    49ae:	08 95       	ret

000049b0 <BMP280_StartMeasurment>:

/*************************************************************************//**
  @brief Starts a measurement
  @return time to wait for result (in ms)
*****************************************************************************/
char BMP280_StartMeasurment(void){
    49b0:	1f 93       	push	r17
    49b2:	cf 93       	push	r28
    49b4:	df 93       	push	r29
    49b6:	1f 92       	push	r1
    49b8:	1f 92       	push	r1
    49ba:	cd b7       	in	r28, 0x3d	; 61
    49bc:	de b7       	in	r29, 0x3e	; 62
	unsigned char data[2], result, delay;
	
	data[0] = BMP280_REG_CONTROL;
    49be:	84 ef       	ldi	r24, 0xF4	; 244
    49c0:	89 83       	std	Y+1, r24	; 0x01

	switch (oversampling){
    49c2:	80 91 79 0b 	lds	r24, 0x0B79
    49c6:	90 91 7a 0b 	lds	r25, 0x0B7A
    49ca:	82 30       	cpi	r24, 0x02	; 2
    49cc:	91 05       	cpc	r25, r1
    49ce:	01 f1       	breq	.+64     	; 0x4a10 <BMP280_StartMeasurment+0x60>
    49d0:	2c f4       	brge	.+10     	; 0x49dc <BMP280_StartMeasurment+0x2c>
    49d2:	00 97       	sbiw	r24, 0x00	; 0
    49d4:	49 f0       	breq	.+18     	; 0x49e8 <BMP280_StartMeasurment+0x38>
    49d6:	01 97       	sbiw	r24, 0x01	; 1
    49d8:	89 f0       	breq	.+34     	; 0x49fc <BMP280_StartMeasurment+0x4c>
    49da:	38 c0       	rjmp	.+112    	; 0x4a4c <BMP280_StartMeasurment+0x9c>
    49dc:	83 30       	cpi	r24, 0x03	; 3
    49de:	91 05       	cpc	r25, r1
    49e0:	09 f1       	breq	.+66     	; 0x4a24 <BMP280_StartMeasurment+0x74>
    49e2:	04 97       	sbiw	r24, 0x04	; 4
    49e4:	49 f1       	breq	.+82     	; 0x4a38 <BMP280_StartMeasurment+0x88>
    49e6:	32 c0       	rjmp	.+100    	; 0x4a4c <BMP280_StartMeasurment+0x9c>
		case 0:
		data[1] = BMP280_COMMAND_PRESSURE0;
    49e8:	85 e2       	ldi	r24, 0x25	; 37
    49ea:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    49ec:	81 e0       	ldi	r24, 0x01	; 1
    49ee:	90 e0       	ldi	r25, 0x00	; 0
    49f0:	90 93 78 0b 	sts	0x0B78, r25
    49f4:	80 93 77 0b 	sts	0x0B77, r24
		delay = 8;
    49f8:	18 e0       	ldi	r17, 0x08	; 8
		break;
    49fa:	2b c0       	rjmp	.+86     	; 0x4a52 <BMP280_StartMeasurment+0xa2>
		case 1:
		data[1] = BMP280_COMMAND_PRESSURE1;
    49fc:	89 e2       	ldi	r24, 0x29	; 41
    49fe:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    4a00:	81 e0       	ldi	r24, 0x01	; 1
    4a02:	90 e0       	ldi	r25, 0x00	; 0
    4a04:	90 93 78 0b 	sts	0x0B78, r25
    4a08:	80 93 77 0b 	sts	0x0B77, r24
		delay = 10;
    4a0c:	1a e0       	ldi	r17, 0x0A	; 10
		break;
    4a0e:	21 c0       	rjmp	.+66     	; 0x4a52 <BMP280_StartMeasurment+0xa2>
		case 2:
		data[1] = BMP280_COMMAND_PRESSURE2;
    4a10:	8d e2       	ldi	r24, 0x2D	; 45
    4a12:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    4a14:	81 e0       	ldi	r24, 0x01	; 1
    4a16:	90 e0       	ldi	r25, 0x00	; 0
    4a18:	90 93 78 0b 	sts	0x0B78, r25
    4a1c:	80 93 77 0b 	sts	0x0B77, r24
		delay = 15;
    4a20:	1f e0       	ldi	r17, 0x0F	; 15
		break;
    4a22:	17 c0       	rjmp	.+46     	; 0x4a52 <BMP280_StartMeasurment+0xa2>
		case 3:
		data[1] = BMP280_COMMAND_PRESSURE3;
    4a24:	81 e3       	ldi	r24, 0x31	; 49
    4a26:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    4a28:	81 e0       	ldi	r24, 0x01	; 1
    4a2a:	90 e0       	ldi	r25, 0x00	; 0
    4a2c:	90 93 78 0b 	sts	0x0B78, r25
    4a30:	80 93 77 0b 	sts	0x0B77, r24
		delay = 24;
    4a34:	18 e1       	ldi	r17, 0x18	; 24
		break;
    4a36:	0d c0       	rjmp	.+26     	; 0x4a52 <BMP280_StartMeasurment+0xa2>
		case 4:
		data[1] = BMP280_COMMAND_PRESSURE4;
    4a38:	8d e5       	ldi	r24, 0x5D	; 93
    4a3a:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    4a3c:	81 e0       	ldi	r24, 0x01	; 1
    4a3e:	90 e0       	ldi	r25, 0x00	; 0
    4a40:	90 93 78 0b 	sts	0x0B78, r25
    4a44:	80 93 77 0b 	sts	0x0B77, r24
		delay = 45;
    4a48:	1d e2       	ldi	r17, 0x2D	; 45
		break;
    4a4a:	03 c0       	rjmp	.+6      	; 0x4a52 <BMP280_StartMeasurment+0xa2>
		default:
		data[1] = BMP280_COMMAND_PRESSURE0;
    4a4c:	85 e2       	ldi	r24, 0x25	; 37
    4a4e:	8a 83       	std	Y+2, r24	; 0x02
		delay = 9;
    4a50:	19 e0       	ldi	r17, 0x09	; 9
  @param[in] *values pointer to an array to send, put the starting register in values[0]
  @param[in] length how many bytes to write (including the starting register ie. sizeof(values))
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_WriteBytes(unsigned char *values, char length){
	TWI_BeginWrite(BMP280_ADDR);
    4a52:	86 e7       	ldi	r24, 0x76	; 118
    4a54:	0e 94 24 19 	call	0x3248	; 0x3248 <TWI_BeginWrite>
	if((TWI_Write(&values[0],length) == TWI_SENT_ACK) && (TWI_Stop() != 0)) return 1; //Send bytes, a STOP bit, and check for success
    4a58:	62 e0       	ldi	r22, 0x02	; 2
    4a5a:	70 e0       	ldi	r23, 0x00	; 0
    4a5c:	ce 01       	movw	r24, r28
    4a5e:	01 96       	adiw	r24, 0x01	; 1
    4a60:	0e 94 b6 19 	call	0x336c	; 0x336c <TWI_Write>
    4a64:	88 32       	cpi	r24, 0x28	; 40
    4a66:	31 f4       	brne	.+12     	; 0x4a74 <BMP280_StartMeasurment+0xc4>
    4a68:	0e 94 77 19 	call	0x32ee	; 0x32ee <TWI_Stop>
		data[1] = BMP280_COMMAND_PRESSURE0;
		delay = 9;
		break;
	}
	result = BMP280_WriteBytes(&data[0], 2);
	if (result) // good write?
    4a6c:	88 23       	and	r24, r24
    4a6e:	21 f0       	breq	.+8      	; 0x4a78 <BMP280_StartMeasurment+0xc8>
	return(delay); // return the delay in ms (rounded up) to wait before retrieving data
    4a70:	81 2f       	mov	r24, r17
    4a72:	03 c0       	rjmp	.+6      	; 0x4a7a <BMP280_StartMeasurment+0xca>
	else
	return(-1); // or return -1 if there was a problem communicating with the BMP
    4a74:	8f ef       	ldi	r24, 0xFF	; 255
    4a76:	01 c0       	rjmp	.+2      	; 0x4a7a <BMP280_StartMeasurment+0xca>
    4a78:	8f ef       	ldi	r24, 0xFF	; 255
	//printf("failure on writeInt");
}
    4a7a:	0f 90       	pop	r0
    4a7c:	0f 90       	pop	r0
    4a7e:	df 91       	pop	r29
    4a80:	cf 91       	pop	r28
    4a82:	1f 91       	pop	r17
    4a84:	08 95       	ret

00004a86 <BMP280_GetUnPTH>:
  @brief Gets the uncalibrated temperature and pressure and humidity data
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetUnPTH(double *uP, double *uT, double *uH){
    4a86:	4f 92       	push	r4
    4a88:	5f 92       	push	r5
    4a8a:	6f 92       	push	r6
    4a8c:	7f 92       	push	r7
    4a8e:	af 92       	push	r10
    4a90:	bf 92       	push	r11
    4a92:	cf 92       	push	r12
    4a94:	df 92       	push	r13
    4a96:	ef 92       	push	r14
    4a98:	ff 92       	push	r15
    4a9a:	1f 93       	push	r17
    4a9c:	cf 93       	push	r28
    4a9e:	df 93       	push	r29
    4aa0:	cd b7       	in	r28, 0x3d	; 61
    4aa2:	de b7       	in	r29, 0x3e	; 62
    4aa4:	29 97       	sbiw	r28, 0x09	; 9
    4aa6:	0f b6       	in	r0, 0x3f	; 63
    4aa8:	f8 94       	cli
    4aaa:	de bf       	out	0x3e, r29	; 62
    4aac:	0f be       	out	0x3f, r0	; 63
    4aae:	cd bf       	out	0x3d, r28	; 61
    4ab0:	5c 01       	movw	r10, r24
    4ab2:	6b 01       	movw	r12, r22
    4ab4:	7a 01       	movw	r14, r20
	unsigned char data[9];
	char result;
	
	data[0] = BMP280_REG_RESULT_PRESSURE; //0xF7
    4ab6:	97 ef       	ldi	r25, 0xF7	; 247
    4ab8:	99 83       	std	Y+1, r25	; 0x01

	result = BMP280_ReadBytes(&data[0], 8); // 0xF7; xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE
    4aba:	68 e0       	ldi	r22, 0x08	; 8
    4abc:	ce 01       	movw	r24, r28
    4abe:	01 96       	adiw	r24, 0x01	; 1
    4ac0:	c9 db       	rcall	.-2158   	; 0x4254 <BMP280_ReadBytes>
    4ac2:	18 2f       	mov	r17, r24
	if (result){ // good read
    4ac4:	88 23       	and	r24, r24
    4ac6:	09 f4       	brne	.+2      	; 0x4aca <BMP280_GetUnPTH+0x44>
    4ac8:	c0 c0       	rjmp	.+384    	; 0x4c4a <BMP280_GetUnPTH+0x1c4>
		double factor = pow(2, 4);
		*uP = ( (data[0] *256.0) + data[1] + (data[2]/256.0) ) * factor ;	//20bit UP
    4aca:	69 81       	ldd	r22, Y+1	; 0x01
    4acc:	70 e0       	ldi	r23, 0x00	; 0
    4ace:	80 e0       	ldi	r24, 0x00	; 0
    4ad0:	90 e0       	ldi	r25, 0x00	; 0
    4ad2:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__floatsisf>
    4ad6:	20 e0       	ldi	r18, 0x00	; 0
    4ad8:	30 e0       	ldi	r19, 0x00	; 0
    4ada:	40 e8       	ldi	r20, 0x80	; 128
    4adc:	53 e4       	ldi	r21, 0x43	; 67
    4ade:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__mulsf3>
    4ae2:	2b 01       	movw	r4, r22
    4ae4:	3c 01       	movw	r6, r24
    4ae6:	8a 81       	ldd	r24, Y+2	; 0x02
    4ae8:	68 2f       	mov	r22, r24
    4aea:	70 e0       	ldi	r23, 0x00	; 0
    4aec:	80 e0       	ldi	r24, 0x00	; 0
    4aee:	90 e0       	ldi	r25, 0x00	; 0
    4af0:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__floatsisf>
    4af4:	9b 01       	movw	r18, r22
    4af6:	ac 01       	movw	r20, r24
    4af8:	c3 01       	movw	r24, r6
    4afa:	b2 01       	movw	r22, r4
    4afc:	2d d7       	rcall	.+3674   	; 0x5958 <__addsf3>
    4afe:	2b 01       	movw	r4, r22
    4b00:	3c 01       	movw	r6, r24
    4b02:	8b 81       	ldd	r24, Y+3	; 0x03
    4b04:	68 2f       	mov	r22, r24
    4b06:	70 e0       	ldi	r23, 0x00	; 0
    4b08:	80 e0       	ldi	r24, 0x00	; 0
    4b0a:	90 e0       	ldi	r25, 0x00	; 0
    4b0c:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__floatsisf>
    4b10:	20 e0       	ldi	r18, 0x00	; 0
    4b12:	30 e0       	ldi	r19, 0x00	; 0
    4b14:	40 e8       	ldi	r20, 0x80	; 128
    4b16:	5b e3       	ldi	r21, 0x3B	; 59
    4b18:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__mulsf3>
    4b1c:	9b 01       	movw	r18, r22
    4b1e:	ac 01       	movw	r20, r24
    4b20:	c3 01       	movw	r24, r6
    4b22:	b2 01       	movw	r22, r4
    4b24:	19 d7       	rcall	.+3634   	; 0x5958 <__addsf3>
    4b26:	20 e0       	ldi	r18, 0x00	; 0
    4b28:	30 e0       	ldi	r19, 0x00	; 0
    4b2a:	40 e8       	ldi	r20, 0x80	; 128
    4b2c:	51 e4       	ldi	r21, 0x41	; 65
    4b2e:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__mulsf3>
    4b32:	f5 01       	movw	r30, r10
    4b34:	60 83       	st	Z, r22
    4b36:	71 83       	std	Z+1, r23	; 0x01
    4b38:	82 83       	std	Z+2, r24	; 0x02
    4b3a:	93 83       	std	Z+3, r25	; 0x03
		*uT = ( (data[3] *256.0) + data[4] + (data[5]/256.0) ) * factor ;	//20bit UT
    4b3c:	6c 81       	ldd	r22, Y+4	; 0x04
    4b3e:	70 e0       	ldi	r23, 0x00	; 0
    4b40:	80 e0       	ldi	r24, 0x00	; 0
    4b42:	90 e0       	ldi	r25, 0x00	; 0
    4b44:	0e 94 af 2d 	call	0x5b5e	; 0x5b5e <__floatsisf>
    4b48:	20 e0       	ldi	r18, 0x00	; 0
    4b4a:	30 e0       	ldi	r19, 0x00	; 0
    4b4c:	40 e8       	ldi	r20, 0x80	; 128
    4b4e:	53 e4       	ldi	r21, 0x43	; 67
    4b50:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__mulsf3>
    4b54:	2b 01       	movw	r4, r22
    4b56:	3c 01       	movw	r6, r24
    4b58:	8d 81       	ldd	r24, Y+5	; 0x05
    4b5a:	68 2f       	mov	r22, r24
    4b5c:	70 e0       	ldi	r23, 0x00	; 0
    4b5e:	80 e0       	ldi	r24, 0x00	; 0
    4b60:	90 e0       	ldi	r25, 0x00	; 0
    4b62:	fd d7       	rcall	.+4090   	; 0x5b5e <__floatsisf>
    4b64:	9b 01       	movw	r18, r22
    4b66:	ac 01       	movw	r20, r24
    4b68:	c3 01       	movw	r24, r6
    4b6a:	b2 01       	movw	r22, r4
    4b6c:	f5 d6       	rcall	.+3562   	; 0x5958 <__addsf3>
    4b6e:	2b 01       	movw	r4, r22
    4b70:	3c 01       	movw	r6, r24
    4b72:	8e 81       	ldd	r24, Y+6	; 0x06
    4b74:	68 2f       	mov	r22, r24
    4b76:	70 e0       	ldi	r23, 0x00	; 0
    4b78:	80 e0       	ldi	r24, 0x00	; 0
    4b7a:	90 e0       	ldi	r25, 0x00	; 0
    4b7c:	f0 d7       	rcall	.+4064   	; 0x5b5e <__floatsisf>
    4b7e:	20 e0       	ldi	r18, 0x00	; 0
    4b80:	30 e0       	ldi	r19, 0x00	; 0
    4b82:	40 e8       	ldi	r20, 0x80	; 128
    4b84:	5b e3       	ldi	r21, 0x3B	; 59
    4b86:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__mulsf3>
    4b8a:	9b 01       	movw	r18, r22
    4b8c:	ac 01       	movw	r20, r24
    4b8e:	c3 01       	movw	r24, r6
    4b90:	b2 01       	movw	r22, r4
    4b92:	e2 d6       	rcall	.+3524   	; 0x5958 <__addsf3>
    4b94:	20 e0       	ldi	r18, 0x00	; 0
    4b96:	30 e0       	ldi	r19, 0x00	; 0
    4b98:	40 e8       	ldi	r20, 0x80	; 128
    4b9a:	51 e4       	ldi	r21, 0x41	; 65
    4b9c:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__mulsf3>
    4ba0:	f6 01       	movw	r30, r12
    4ba2:	60 83       	st	Z, r22
    4ba4:	71 83       	std	Z+1, r23	; 0x01
    4ba6:	82 83       	std	Z+2, r24	; 0x02
    4ba8:	93 83       	std	Z+3, r25	; 0x03
		*uH = ( (data[6] *256.0) + data[7] ) * factor ;	//16bit UH
    4baa:	6f 81       	ldd	r22, Y+7	; 0x07
    4bac:	70 e0       	ldi	r23, 0x00	; 0
    4bae:	80 e0       	ldi	r24, 0x00	; 0
    4bb0:	90 e0       	ldi	r25, 0x00	; 0
    4bb2:	d5 d7       	rcall	.+4010   	; 0x5b5e <__floatsisf>
    4bb4:	20 e0       	ldi	r18, 0x00	; 0
    4bb6:	30 e0       	ldi	r19, 0x00	; 0
    4bb8:	40 e8       	ldi	r20, 0x80	; 128
    4bba:	53 e4       	ldi	r21, 0x43	; 67
    4bbc:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__mulsf3>
    4bc0:	2b 01       	movw	r4, r22
    4bc2:	3c 01       	movw	r6, r24
    4bc4:	88 85       	ldd	r24, Y+8	; 0x08
    4bc6:	68 2f       	mov	r22, r24
    4bc8:	70 e0       	ldi	r23, 0x00	; 0
    4bca:	80 e0       	ldi	r24, 0x00	; 0
    4bcc:	90 e0       	ldi	r25, 0x00	; 0
    4bce:	c7 d7       	rcall	.+3982   	; 0x5b5e <__floatsisf>
    4bd0:	9b 01       	movw	r18, r22
    4bd2:	ac 01       	movw	r20, r24
    4bd4:	c3 01       	movw	r24, r6
    4bd6:	b2 01       	movw	r22, r4
    4bd8:	bf d6       	rcall	.+3454   	; 0x5958 <__addsf3>
    4bda:	20 e0       	ldi	r18, 0x00	; 0
    4bdc:	30 e0       	ldi	r19, 0x00	; 0
    4bde:	40 e8       	ldi	r20, 0x80	; 128
    4be0:	51 e4       	ldi	r21, 0x41	; 65
    4be2:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__mulsf3>
    4be6:	f7 01       	movw	r30, r14
    4be8:	60 83       	st	Z, r22
    4bea:	71 83       	std	Z+1, r23	; 0x01
    4bec:	82 83       	std	Z+2, r24	; 0x02
    4bee:	93 83       	std	Z+3, r25	; 0x03
		printf("\nH: %i ,%i ,%i ,%i ,%i ,%i \n",dig_H1,dig_H2,dig_H3,dig_H4,dig_H5,dig_H6);
    4bf0:	80 91 7b 0b 	lds	r24, 0x0B7B
    4bf4:	28 2f       	mov	r18, r24
    4bf6:	08 2e       	mov	r0, r24
    4bf8:	00 0c       	add	r0, r0
    4bfa:	33 0b       	sbc	r19, r19
    4bfc:	3f 93       	push	r19
    4bfe:	8f 93       	push	r24
    4c00:	80 91 83 0b 	lds	r24, 0x0B83
    4c04:	8f 93       	push	r24
    4c06:	80 91 82 0b 	lds	r24, 0x0B82
    4c0a:	8f 93       	push	r24
    4c0c:	80 91 85 0b 	lds	r24, 0x0B85
    4c10:	8f 93       	push	r24
    4c12:	80 91 84 0b 	lds	r24, 0x0B84
    4c16:	8f 93       	push	r24
    4c18:	80 91 7c 0b 	lds	r24, 0x0B7C
    4c1c:	1f 92       	push	r1
    4c1e:	8f 93       	push	r24
    4c20:	80 91 87 0b 	lds	r24, 0x0B87
    4c24:	8f 93       	push	r24
    4c26:	80 91 86 0b 	lds	r24, 0x0B86
    4c2a:	8f 93       	push	r24
    4c2c:	80 91 7d 0b 	lds	r24, 0x0B7D
    4c30:	1f 92       	push	r1
    4c32:	8f 93       	push	r24
    4c34:	8f e0       	ldi	r24, 0x0F	; 15
    4c36:	97 e0       	ldi	r25, 0x07	; 7
    4c38:	9f 93       	push	r25
    4c3a:	8f 93       	push	r24
    4c3c:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    4c40:	0f b6       	in	r0, 0x3f	; 63
    4c42:	f8 94       	cli
    4c44:	de bf       	out	0x3e, r29	; 62
    4c46:	0f be       	out	0x3f, r0	; 63
    4c48:	cd bf       	out	0x3d, r28	; 61
	}
	return(result);
}
    4c4a:	81 2f       	mov	r24, r17
    4c4c:	29 96       	adiw	r28, 0x09	; 9
    4c4e:	0f b6       	in	r0, 0x3f	; 63
    4c50:	f8 94       	cli
    4c52:	de bf       	out	0x3e, r29	; 62
    4c54:	0f be       	out	0x3f, r0	; 63
    4c56:	cd bf       	out	0x3d, r28	; 61
    4c58:	df 91       	pop	r29
    4c5a:	cf 91       	pop	r28
    4c5c:	1f 91       	pop	r17
    4c5e:	ff 90       	pop	r15
    4c60:	ef 90       	pop	r14
    4c62:	df 90       	pop	r13
    4c64:	cf 90       	pop	r12
    4c66:	bf 90       	pop	r11
    4c68:	af 90       	pop	r10
    4c6a:	7f 90       	pop	r7
    4c6c:	6f 90       	pop	r6
    4c6e:	5f 90       	pop	r5
    4c70:	4f 90       	pop	r4
    4c72:	08 95       	ret

00004c74 <BMP280_CalcTemperature>:
  @brief Calculates temperature
  @param[out] pointer to a place to store the temperature data
  @param[in] pointer to the uncalibrated temperature data
  @return status
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
    4c74:	4f 92       	push	r4
    4c76:	5f 92       	push	r5
    4c78:	6f 92       	push	r6
    4c7a:	7f 92       	push	r7
    4c7c:	8f 92       	push	r8
    4c7e:	9f 92       	push	r9
    4c80:	af 92       	push	r10
    4c82:	bf 92       	push	r11
    4c84:	cf 92       	push	r12
    4c86:	df 92       	push	r13
    4c88:	ef 92       	push	r14
    4c8a:	ff 92       	push	r15
    4c8c:	cf 93       	push	r28
    4c8e:	df 93       	push	r29
    4c90:	ec 01       	movw	r28, r24
	double adc_T = *uT ;
    4c92:	fb 01       	movw	r30, r22
    4c94:	c0 80       	ld	r12, Z
    4c96:	d1 80       	ldd	r13, Z+1	; 0x01
    4c98:	e2 80       	ldd	r14, Z+2	; 0x02
    4c9a:	f3 80       	ldd	r15, Z+3	; 0x03
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
    4c9c:	80 91 80 0b 	lds	r24, 0x0B80
    4ca0:	90 91 81 0b 	lds	r25, 0x0B81
    4ca4:	bc 01       	movw	r22, r24
    4ca6:	80 e0       	ldi	r24, 0x00	; 0
    4ca8:	90 e0       	ldi	r25, 0x00	; 0
    4caa:	57 d7       	rcall	.+3758   	; 0x5b5a <__floatunsisf>
    4cac:	2b 01       	movw	r4, r22
    4cae:	3c 01       	movw	r6, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
    4cb0:	20 e0       	ldi	r18, 0x00	; 0
    4cb2:	30 e0       	ldi	r19, 0x00	; 0
    4cb4:	40 e0       	ldi	r20, 0x00	; 0
    4cb6:	57 e3       	ldi	r21, 0x37	; 55
    4cb8:	c7 01       	movw	r24, r14
    4cba:	b6 01       	movw	r22, r12
    4cbc:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <__mulsf3>
    4cc0:	4b 01       	movw	r8, r22
    4cc2:	5c 01       	movw	r10, r24
    4cc4:	20 e0       	ldi	r18, 0x00	; 0
    4cc6:	30 e0       	ldi	r19, 0x00	; 0
    4cc8:	40 e0       	ldi	r20, 0x00	; 0
    4cca:	59 e3       	ldi	r21, 0x39	; 57
    4ccc:	c3 01       	movw	r24, r6
    4cce:	b2 01       	movw	r22, r4
    4cd0:	fa d7       	rcall	.+4084   	; 0x5cc6 <__mulsf3>
    4cd2:	9b 01       	movw	r18, r22
    4cd4:	ac 01       	movw	r20, r24
    4cd6:	c5 01       	movw	r24, r10
    4cd8:	b4 01       	movw	r22, r8
    4cda:	3d d6       	rcall	.+3194   	; 0x5956 <__subsf3>
    4cdc:	4b 01       	movw	r8, r22
    4cde:	5c 01       	movw	r10, r24
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
	double adc_T = *uT ;
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
    4ce0:	20 e0       	ldi	r18, 0x00	; 0
    4ce2:	30 e0       	ldi	r19, 0x00	; 0
    4ce4:	40 e8       	ldi	r20, 0x80	; 128
    4ce6:	58 e3       	ldi	r21, 0x38	; 56
    4ce8:	c7 01       	movw	r24, r14
    4cea:	b6 01       	movw	r22, r12
    4cec:	ec d7       	rcall	.+4056   	; 0x5cc6 <__mulsf3>
    4cee:	6b 01       	movw	r12, r22
    4cf0:	7c 01       	movw	r14, r24
    4cf2:	20 e0       	ldi	r18, 0x00	; 0
    4cf4:	30 e0       	ldi	r19, 0x00	; 0
    4cf6:	40 e8       	ldi	r20, 0x80	; 128
    4cf8:	5a e3       	ldi	r21, 0x3A	; 58
    4cfa:	c3 01       	movw	r24, r6
    4cfc:	b2 01       	movw	r22, r4
    4cfe:	e3 d7       	rcall	.+4038   	; 0x5cc6 <__mulsf3>
    4d00:	9b 01       	movw	r18, r22
    4d02:	ac 01       	movw	r20, r24
    4d04:	c7 01       	movw	r24, r14
    4d06:	b6 01       	movw	r22, r12
    4d08:	26 d6       	rcall	.+3148   	; 0x5956 <__subsf3>
    4d0a:	6b 01       	movw	r12, r22
    4d0c:	7c 01       	movw	r14, r24
    4d0e:	80 91 9a 0b 	lds	r24, 0x0B9A
    4d12:	90 91 9b 0b 	lds	r25, 0x0B9B
    4d16:	bc 01       	movw	r22, r24
    4d18:	99 0f       	add	r25, r25
    4d1a:	88 0b       	sbc	r24, r24
    4d1c:	99 0b       	sbc	r25, r25
    4d1e:	1f d7       	rcall	.+3646   	; 0x5b5e <__floatsisf>
    4d20:	9b 01       	movw	r18, r22
    4d22:	ac 01       	movw	r20, r24
    4d24:	c7 01       	movw	r24, r14
    4d26:	b6 01       	movw	r22, r12
    4d28:	ce d7       	rcall	.+3996   	; 0x5cc6 <__mulsf3>
    4d2a:	6b 01       	movw	r12, r22
    4d2c:	7c 01       	movw	r14, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
    4d2e:	a5 01       	movw	r20, r10
    4d30:	94 01       	movw	r18, r8
    4d32:	c5 01       	movw	r24, r10
    4d34:	b4 01       	movw	r22, r8
    4d36:	c7 d7       	rcall	.+3982   	; 0x5cc6 <__mulsf3>
    4d38:	4b 01       	movw	r8, r22
    4d3a:	5c 01       	movw	r10, r24
    4d3c:	40 91 98 0b 	lds	r20, 0x0B98
    4d40:	50 91 99 0b 	lds	r21, 0x0B99
    4d44:	ba 01       	movw	r22, r20
    4d46:	55 0f       	add	r21, r21
    4d48:	88 0b       	sbc	r24, r24
    4d4a:	99 0b       	sbc	r25, r25
    4d4c:	08 d7       	rcall	.+3600   	; 0x5b5e <__floatsisf>
    4d4e:	9b 01       	movw	r18, r22
    4d50:	ac 01       	movw	r20, r24
    4d52:	c5 01       	movw	r24, r10
    4d54:	b4 01       	movw	r22, r8
    4d56:	b7 d7       	rcall	.+3950   	; 0x5cc6 <__mulsf3>
    4d58:	9b 01       	movw	r18, r22
    4d5a:	ac 01       	movw	r20, r24
	t_fine = (long signed int)(var1+var2);
    4d5c:	c7 01       	movw	r24, r14
    4d5e:	b6 01       	movw	r22, r12
    4d60:	fb d5       	rcall	.+3062   	; 0x5958 <__addsf3>
    4d62:	6b 01       	movw	r12, r22
    4d64:	7c 01       	movw	r14, r24
    4d66:	c8 d6       	rcall	.+3472   	; 0x5af8 <__fixsfsi>
    4d68:	60 93 73 0b 	sts	0x0B73, r22
    4d6c:	70 93 74 0b 	sts	0x0B74, r23
    4d70:	80 93 75 0b 	sts	0x0B75, r24
    4d74:	90 93 76 0b 	sts	0x0B76, r25
	
	*T = (var1+var2)/5120.0;
    4d78:	20 e0       	ldi	r18, 0x00	; 0
    4d7a:	30 e0       	ldi	r19, 0x00	; 0
    4d7c:	40 ea       	ldi	r20, 0xA0	; 160
    4d7e:	55 e4       	ldi	r21, 0x45	; 69
    4d80:	c7 01       	movw	r24, r14
    4d82:	b6 01       	movw	r22, r12
    4d84:	51 d6       	rcall	.+3234   	; 0x5a28 <__divsf3>
    4d86:	6b 01       	movw	r12, r22
    4d88:	7c 01       	movw	r14, r24
    4d8a:	68 83       	st	Y, r22
    4d8c:	79 83       	std	Y+1, r23	; 0x01
    4d8e:	8a 83       	std	Y+2, r24	; 0x02
    4d90:	9b 83       	std	Y+3, r25	; 0x03
	
	if(*T>100.0 || *T <(-100.0))return 0;
    4d92:	20 e0       	ldi	r18, 0x00	; 0
    4d94:	30 e0       	ldi	r19, 0x00	; 0
    4d96:	48 ec       	ldi	r20, 0xC8	; 200
    4d98:	52 e4       	ldi	r21, 0x42	; 66
    4d9a:	91 d7       	rcall	.+3874   	; 0x5cbe <__gesf2>
    4d9c:	18 16       	cp	r1, r24
    4d9e:	6c f0       	brlt	.+26     	; 0x4dba <BMP280_CalcTemperature+0x146>
    4da0:	20 e0       	ldi	r18, 0x00	; 0
    4da2:	30 e0       	ldi	r19, 0x00	; 0
    4da4:	48 ec       	ldi	r20, 0xC8	; 200
    4da6:	52 ec       	ldi	r21, 0xC2	; 194
    4da8:	c7 01       	movw	r24, r14
    4daa:	b6 01       	movw	r22, r12
    4dac:	39 d6       	rcall	.+3186   	; 0x5a20 <__cmpsf2>
    4dae:	88 1f       	adc	r24, r24
    4db0:	88 27       	eor	r24, r24
    4db2:	88 1f       	adc	r24, r24
    4db4:	91 e0       	ldi	r25, 0x01	; 1
    4db6:	89 27       	eor	r24, r25
    4db8:	01 c0       	rjmp	.+2      	; 0x4dbc <BMP280_CalcTemperature+0x148>
    4dba:	80 e0       	ldi	r24, 0x00	; 0
	
	return (1);
}
    4dbc:	df 91       	pop	r29
    4dbe:	cf 91       	pop	r28
    4dc0:	ff 90       	pop	r15
    4dc2:	ef 90       	pop	r14
    4dc4:	df 90       	pop	r13
    4dc6:	cf 90       	pop	r12
    4dc8:	bf 90       	pop	r11
    4dca:	af 90       	pop	r10
    4dcc:	9f 90       	pop	r9
    4dce:	8f 90       	pop	r8
    4dd0:	7f 90       	pop	r7
    4dd2:	6f 90       	pop	r6
    4dd4:	5f 90       	pop	r5
    4dd6:	4f 90       	pop	r4
    4dd8:	08 95       	ret

00004dda <BMP280_CalcPressure>:
  @brief Calculates pressure
  @param[out] pointer to a place to store the pressure data
  @param[in] pointer to the uncalibrated pressure data
  @return status
*****************************************************************************/
char BMP280_CalcPressure(double *P,double *uP){
    4dda:	4f 92       	push	r4
    4ddc:	5f 92       	push	r5
    4dde:	6f 92       	push	r6
    4de0:	7f 92       	push	r7
    4de2:	8f 92       	push	r8
    4de4:	9f 92       	push	r9
    4de6:	af 92       	push	r10
    4de8:	bf 92       	push	r11
    4dea:	cf 92       	push	r12
    4dec:	df 92       	push	r13
    4dee:	ef 92       	push	r14
    4df0:	ff 92       	push	r15
    4df2:	0f 93       	push	r16
    4df4:	1f 93       	push	r17
    4df6:	cf 93       	push	r28
    4df8:	df 93       	push	r29
    4dfa:	8c 01       	movw	r16, r24
    4dfc:	eb 01       	movw	r28, r22
	//char result;
	double var1 , var2 ;
	
	var1 = ((double)t_fine/2.0) - 64000.0;
    4dfe:	60 91 73 0b 	lds	r22, 0x0B73
    4e02:	70 91 74 0b 	lds	r23, 0x0B74
    4e06:	80 91 75 0b 	lds	r24, 0x0B75
    4e0a:	90 91 76 0b 	lds	r25, 0x0B76
    4e0e:	a7 d6       	rcall	.+3406   	; 0x5b5e <__floatsisf>
    4e10:	20 e0       	ldi	r18, 0x00	; 0
    4e12:	30 e0       	ldi	r19, 0x00	; 0
    4e14:	40 e0       	ldi	r20, 0x00	; 0
    4e16:	5f e3       	ldi	r21, 0x3F	; 63
    4e18:	56 d7       	rcall	.+3756   	; 0x5cc6 <__mulsf3>
    4e1a:	20 e0       	ldi	r18, 0x00	; 0
    4e1c:	30 e0       	ldi	r19, 0x00	; 0
    4e1e:	4a e7       	ldi	r20, 0x7A	; 122
    4e20:	57 e4       	ldi	r21, 0x47	; 71
    4e22:	99 d5       	rcall	.+2866   	; 0x5956 <__subsf3>
    4e24:	6b 01       	movw	r12, r22
    4e26:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
    4e28:	60 91 8e 0b 	lds	r22, 0x0B8E
    4e2c:	70 91 8f 0b 	lds	r23, 0x0B8F
    4e30:	07 2e       	mov	r0, r23
    4e32:	00 0c       	add	r0, r0
    4e34:	88 0b       	sbc	r24, r24
    4e36:	99 0b       	sbc	r25, r25
    4e38:	92 d6       	rcall	.+3364   	; 0x5b5e <__floatsisf>
    4e3a:	a7 01       	movw	r20, r14
    4e3c:	96 01       	movw	r18, r12
    4e3e:	43 d7       	rcall	.+3718   	; 0x5cc6 <__mulsf3>
    4e40:	20 e0       	ldi	r18, 0x00	; 0
    4e42:	30 e0       	ldi	r19, 0x00	; 0
    4e44:	40 e0       	ldi	r20, 0x00	; 0
    4e46:	58 e3       	ldi	r21, 0x38	; 56
    4e48:	3e d7       	rcall	.+3708   	; 0x5cc6 <__mulsf3>
    4e4a:	a7 01       	movw	r20, r14
    4e4c:	96 01       	movw	r18, r12
    4e4e:	3b d7       	rcall	.+3702   	; 0x5cc6 <__mulsf3>
    4e50:	4b 01       	movw	r8, r22
    4e52:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
    4e54:	60 91 90 0b 	lds	r22, 0x0B90
    4e58:	70 91 91 0b 	lds	r23, 0x0B91
    4e5c:	07 2e       	mov	r0, r23
    4e5e:	00 0c       	add	r0, r0
    4e60:	88 0b       	sbc	r24, r24
    4e62:	99 0b       	sbc	r25, r25
    4e64:	7c d6       	rcall	.+3320   	; 0x5b5e <__floatsisf>
    4e66:	a7 01       	movw	r20, r14
    4e68:	96 01       	movw	r18, r12
    4e6a:	2d d7       	rcall	.+3674   	; 0x5cc6 <__mulsf3>
    4e6c:	9b 01       	movw	r18, r22
    4e6e:	ac 01       	movw	r20, r24
    4e70:	73 d5       	rcall	.+2790   	; 0x5958 <__addsf3>
    4e72:	a5 01       	movw	r20, r10
    4e74:	94 01       	movw	r18, r8
    4e76:	70 d5       	rcall	.+2784   	; 0x5958 <__addsf3>
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
    4e78:	20 e0       	ldi	r18, 0x00	; 0
    4e7a:	30 e0       	ldi	r19, 0x00	; 0
    4e7c:	40 e8       	ldi	r20, 0x80	; 128
    4e7e:	5e e3       	ldi	r21, 0x3E	; 62
    4e80:	22 d7       	rcall	.+3652   	; 0x5cc6 <__mulsf3>
    4e82:	4b 01       	movw	r8, r22
    4e84:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var1 = (((double)dig_P3) * var1 * var1/524288.0 + ((double)dig_P2) * var1) / 524288.0;
    4e86:	60 91 94 0b 	lds	r22, 0x0B94
    4e8a:	70 91 95 0b 	lds	r23, 0x0B95
    4e8e:	07 2e       	mov	r0, r23
    4e90:	00 0c       	add	r0, r0
    4e92:	88 0b       	sbc	r24, r24
    4e94:	99 0b       	sbc	r25, r25
    4e96:	63 d6       	rcall	.+3270   	; 0x5b5e <__floatsisf>
    4e98:	a7 01       	movw	r20, r14
    4e9a:	96 01       	movw	r18, r12
    4e9c:	14 d7       	rcall	.+3624   	; 0x5cc6 <__mulsf3>
    4e9e:	a7 01       	movw	r20, r14
    4ea0:	96 01       	movw	r18, r12
    4ea2:	11 d7       	rcall	.+3618   	; 0x5cc6 <__mulsf3>
    4ea4:	20 e0       	ldi	r18, 0x00	; 0
    4ea6:	30 e0       	ldi	r19, 0x00	; 0
    4ea8:	40 e0       	ldi	r20, 0x00	; 0
    4eaa:	56 e3       	ldi	r21, 0x36	; 54
    4eac:	0c d7       	rcall	.+3608   	; 0x5cc6 <__mulsf3>
    4eae:	2b 01       	movw	r4, r22
    4eb0:	3c 01       	movw	r6, r24
    4eb2:	60 91 96 0b 	lds	r22, 0x0B96
    4eb6:	70 91 97 0b 	lds	r23, 0x0B97
    4eba:	07 2e       	mov	r0, r23
    4ebc:	00 0c       	add	r0, r0
    4ebe:	88 0b       	sbc	r24, r24
    4ec0:	99 0b       	sbc	r25, r25
    4ec2:	4d d6       	rcall	.+3226   	; 0x5b5e <__floatsisf>
    4ec4:	a7 01       	movw	r20, r14
    4ec6:	96 01       	movw	r18, r12
    4ec8:	fe d6       	rcall	.+3580   	; 0x5cc6 <__mulsf3>
    4eca:	9b 01       	movw	r18, r22
    4ecc:	ac 01       	movw	r20, r24
    4ece:	c3 01       	movw	r24, r6
    4ed0:	b2 01       	movw	r22, r4
    4ed2:	42 d5       	rcall	.+2692   	; 0x5958 <__addsf3>
    4ed4:	20 e0       	ldi	r18, 0x00	; 0
    4ed6:	30 e0       	ldi	r19, 0x00	; 0
    4ed8:	40 e0       	ldi	r20, 0x00	; 0
    4eda:	56 e3       	ldi	r21, 0x36	; 54
    4edc:	f4 d6       	rcall	.+3560   	; 0x5cc6 <__mulsf3>
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
    4ede:	20 e0       	ldi	r18, 0x00	; 0
    4ee0:	30 e0       	ldi	r19, 0x00	; 0
    4ee2:	40 e0       	ldi	r20, 0x00	; 0
    4ee4:	57 e4       	ldi	r21, 0x47	; 71
    4ee6:	38 d5       	rcall	.+2672   	; 0x5958 <__addsf3>
    4ee8:	20 e0       	ldi	r18, 0x00	; 0
    4eea:	30 e0       	ldi	r19, 0x00	; 0
    4eec:	40 e0       	ldi	r20, 0x00	; 0
    4eee:	58 e3       	ldi	r21, 0x38	; 56
    4ef0:	ea d6       	rcall	.+3540   	; 0x5cc6 <__mulsf3>
    4ef2:	6b 01       	movw	r12, r22
    4ef4:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
    4ef6:	28 81       	ld	r18, Y
    4ef8:	39 81       	ldd	r19, Y+1	; 0x01
    4efa:	4a 81       	ldd	r20, Y+2	; 0x02
    4efc:	5b 81       	ldd	r21, Y+3	; 0x03
    4efe:	60 e0       	ldi	r22, 0x00	; 0
    4f00:	70 e0       	ldi	r23, 0x00	; 0
    4f02:	80 e8       	ldi	r24, 0x80	; 128
    4f04:	99 e4       	ldi	r25, 0x49	; 73
    4f06:	27 d5       	rcall	.+2638   	; 0x5956 <__subsf3>
    4f08:	2b 01       	movw	r4, r22
    4f0a:	3c 01       	movw	r6, r24
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
    4f0c:	60 91 92 0b 	lds	r22, 0x0B92
    4f10:	70 91 93 0b 	lds	r23, 0x0B93
    4f14:	07 2e       	mov	r0, r23
    4f16:	00 0c       	add	r0, r0
    4f18:	88 0b       	sbc	r24, r24
    4f1a:	99 0b       	sbc	r25, r25
    4f1c:	20 d6       	rcall	.+3136   	; 0x5b5e <__floatsisf>
    4f1e:	20 e0       	ldi	r18, 0x00	; 0
    4f20:	30 e0       	ldi	r19, 0x00	; 0
    4f22:	40 e8       	ldi	r20, 0x80	; 128
    4f24:	57 e4       	ldi	r21, 0x47	; 71
    4f26:	cf d6       	rcall	.+3486   	; 0x5cc6 <__mulsf3>
    4f28:	9b 01       	movw	r18, r22
    4f2a:	ac 01       	movw	r20, r24
    4f2c:	c5 01       	movw	r24, r10
    4f2e:	b4 01       	movw	r22, r8
    4f30:	13 d5       	rcall	.+2598   	; 0x5958 <__addsf3>
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
    4f32:	20 e0       	ldi	r18, 0x00	; 0
    4f34:	30 e0       	ldi	r19, 0x00	; 0
    4f36:	40 e8       	ldi	r20, 0x80	; 128
    4f38:	59 e3       	ldi	r21, 0x39	; 57
    4f3a:	c5 d6       	rcall	.+3466   	; 0x5cc6 <__mulsf3>
    4f3c:	9b 01       	movw	r18, r22
    4f3e:	ac 01       	movw	r20, r24
    4f40:	c3 01       	movw	r24, r6
    4f42:	b2 01       	movw	r22, r4
    4f44:	08 d5       	rcall	.+2576   	; 0x5956 <__subsf3>
    4f46:	20 e0       	ldi	r18, 0x00	; 0
    4f48:	30 e5       	ldi	r19, 0x50	; 80
    4f4a:	43 ec       	ldi	r20, 0xC3	; 195
    4f4c:	55 e4       	ldi	r21, 0x45	; 69
    4f4e:	bb d6       	rcall	.+3446   	; 0x5cc6 <__mulsf3>
    4f50:	4b 01       	movw	r8, r22
    4f52:	5c 01       	movw	r10, r24
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
    4f54:	80 91 7e 0b 	lds	r24, 0x0B7E
    4f58:	90 91 7f 0b 	lds	r25, 0x0B7F
    4f5c:	bc 01       	movw	r22, r24
    4f5e:	80 e0       	ldi	r24, 0x00	; 0
    4f60:	90 e0       	ldi	r25, 0x00	; 0
    4f62:	fb d5       	rcall	.+3062   	; 0x5b5a <__floatunsisf>
    4f64:	9b 01       	movw	r18, r22
    4f66:	ac 01       	movw	r20, r24
    4f68:	c7 01       	movw	r24, r14
    4f6a:	b6 01       	movw	r22, r12
    4f6c:	ac d6       	rcall	.+3416   	; 0x5cc6 <__mulsf3>
    4f6e:	9b 01       	movw	r18, r22
    4f70:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
    4f72:	c5 01       	movw	r24, r10
    4f74:	b4 01       	movw	r22, r8
    4f76:	58 d5       	rcall	.+2736   	; 0x5a28 <__divsf3>
    4f78:	6b 01       	movw	r12, r22
    4f7a:	7c 01       	movw	r14, r24
	//Serial.print("p = ");Serial.println(p,2);
	
	var1 = ((double)dig_P9)*p*p/2147483648.0;	//overflow
    4f7c:	60 91 88 0b 	lds	r22, 0x0B88
    4f80:	70 91 89 0b 	lds	r23, 0x0B89
    4f84:	07 2e       	mov	r0, r23
    4f86:	00 0c       	add	r0, r0
    4f88:	88 0b       	sbc	r24, r24
    4f8a:	99 0b       	sbc	r25, r25
    4f8c:	e8 d5       	rcall	.+3024   	; 0x5b5e <__floatsisf>
    4f8e:	a7 01       	movw	r20, r14
    4f90:	96 01       	movw	r18, r12
    4f92:	99 d6       	rcall	.+3378   	; 0x5cc6 <__mulsf3>
    4f94:	a7 01       	movw	r20, r14
    4f96:	96 01       	movw	r18, r12
    4f98:	96 d6       	rcall	.+3372   	; 0x5cc6 <__mulsf3>
    4f9a:	20 e0       	ldi	r18, 0x00	; 0
    4f9c:	30 e0       	ldi	r19, 0x00	; 0
    4f9e:	40 e0       	ldi	r20, 0x00	; 0
    4fa0:	50 e3       	ldi	r21, 0x30	; 48
    4fa2:	91 d6       	rcall	.+3362   	; 0x5cc6 <__mulsf3>
    4fa4:	4b 01       	movw	r8, r22
    4fa6:	5c 01       	movw	r10, r24
	
	var2 = p*((double)dig_P8)/32768.0;
    4fa8:	80 91 8a 0b 	lds	r24, 0x0B8A
    4fac:	90 91 8b 0b 	lds	r25, 0x0B8B
    4fb0:	bc 01       	movw	r22, r24
    4fb2:	99 0f       	add	r25, r25
    4fb4:	88 0b       	sbc	r24, r24
    4fb6:	99 0b       	sbc	r25, r25
    4fb8:	d2 d5       	rcall	.+2980   	; 0x5b5e <__floatsisf>
    4fba:	a7 01       	movw	r20, r14
    4fbc:	96 01       	movw	r18, r12
    4fbe:	83 d6       	rcall	.+3334   	; 0x5cc6 <__mulsf3>
    4fc0:	20 e0       	ldi	r18, 0x00	; 0
    4fc2:	30 e0       	ldi	r19, 0x00	; 0
    4fc4:	40 e0       	ldi	r20, 0x00	; 0
    4fc6:	58 e3       	ldi	r21, 0x38	; 56
    4fc8:	7e d6       	rcall	.+3324   	; 0x5cc6 <__mulsf3>
    4fca:	9b 01       	movw	r18, r22
    4fcc:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	p = p + (var1+var2+((double)dig_P7))/16.0;
    4fce:	c5 01       	movw	r24, r10
    4fd0:	b4 01       	movw	r22, r8
    4fd2:	c2 d4       	rcall	.+2436   	; 0x5958 <__addsf3>
    4fd4:	4b 01       	movw	r8, r22
    4fd6:	5c 01       	movw	r10, r24
    4fd8:	80 91 8c 0b 	lds	r24, 0x0B8C
    4fdc:	90 91 8d 0b 	lds	r25, 0x0B8D
    4fe0:	bc 01       	movw	r22, r24
    4fe2:	99 0f       	add	r25, r25
    4fe4:	88 0b       	sbc	r24, r24
    4fe6:	99 0b       	sbc	r25, r25
    4fe8:	ba d5       	rcall	.+2932   	; 0x5b5e <__floatsisf>
    4fea:	9b 01       	movw	r18, r22
    4fec:	ac 01       	movw	r20, r24
    4fee:	c5 01       	movw	r24, r10
    4ff0:	b4 01       	movw	r22, r8
    4ff2:	b2 d4       	rcall	.+2404   	; 0x5958 <__addsf3>
    4ff4:	20 e0       	ldi	r18, 0x00	; 0
    4ff6:	30 e0       	ldi	r19, 0x00	; 0
    4ff8:	40 e8       	ldi	r20, 0x80	; 128
    4ffa:	5d e3       	ldi	r21, 0x3D	; 61
    4ffc:	64 d6       	rcall	.+3272   	; 0x5cc6 <__mulsf3>
    4ffe:	a7 01       	movw	r20, r14
    5000:	96 01       	movw	r18, r12
    5002:	aa d4       	rcall	.+2388   	; 0x5958 <__addsf3>
	//Serial.print("p = ");Serial.println(p,2);
	
	*P = p/100.0 ;
    5004:	20 e0       	ldi	r18, 0x00	; 0
    5006:	30 e0       	ldi	r19, 0x00	; 0
    5008:	48 ec       	ldi	r20, 0xC8	; 200
    500a:	52 e4       	ldi	r21, 0x42	; 66
    500c:	0d d5       	rcall	.+2586   	; 0x5a28 <__divsf3>
    500e:	6b 01       	movw	r12, r22
    5010:	7c 01       	movw	r14, r24
    5012:	f8 01       	movw	r30, r16
    5014:	60 83       	st	Z, r22
    5016:	71 83       	std	Z+1, r23	; 0x01
    5018:	82 83       	std	Z+2, r24	; 0x02
    501a:	93 83       	std	Z+3, r25	; 0x03
	
	if((*P>1200.0) || (*P < 800.0))return (0);
    501c:	20 e0       	ldi	r18, 0x00	; 0
    501e:	30 e0       	ldi	r19, 0x00	; 0
    5020:	46 e9       	ldi	r20, 0x96	; 150
    5022:	54 e4       	ldi	r21, 0x44	; 68
    5024:	4c d6       	rcall	.+3224   	; 0x5cbe <__gesf2>
    5026:	18 16       	cp	r1, r24
    5028:	6c f0       	brlt	.+26     	; 0x5044 <BMP280_CalcPressure+0x26a>
    502a:	20 e0       	ldi	r18, 0x00	; 0
    502c:	30 e0       	ldi	r19, 0x00	; 0
    502e:	48 e4       	ldi	r20, 0x48	; 72
    5030:	54 e4       	ldi	r21, 0x44	; 68
    5032:	c7 01       	movw	r24, r14
    5034:	b6 01       	movw	r22, r12
    5036:	f4 d4       	rcall	.+2536   	; 0x5a20 <__cmpsf2>
    5038:	88 1f       	adc	r24, r24
    503a:	88 27       	eor	r24, r24
    503c:	88 1f       	adc	r24, r24
    503e:	91 e0       	ldi	r25, 0x01	; 1
    5040:	89 27       	eor	r24, r25
    5042:	01 c0       	rjmp	.+2      	; 0x5046 <BMP280_CalcPressure+0x26c>
    5044:	80 e0       	ldi	r24, 0x00	; 0
	return (1);
}
    5046:	df 91       	pop	r29
    5048:	cf 91       	pop	r28
    504a:	1f 91       	pop	r17
    504c:	0f 91       	pop	r16
    504e:	ff 90       	pop	r15
    5050:	ef 90       	pop	r14
    5052:	df 90       	pop	r13
    5054:	cf 90       	pop	r12
    5056:	bf 90       	pop	r11
    5058:	af 90       	pop	r10
    505a:	9f 90       	pop	r9
    505c:	8f 90       	pop	r8
    505e:	7f 90       	pop	r7
    5060:	6f 90       	pop	r6
    5062:	5f 90       	pop	r5
    5064:	4f 90       	pop	r4
    5066:	08 95       	ret

00005068 <BMP280_CalcHumidity>:
  @param[out] pointer to a place to store the humidity
  @param[in] pointer to the uncalibrated humidity data
  @return status
*****************************************************************************/
char BMP280_CalcHumidity(double *H,double *uH)
{
    5068:	4f 92       	push	r4
    506a:	5f 92       	push	r5
    506c:	6f 92       	push	r6
    506e:	7f 92       	push	r7
    5070:	8f 92       	push	r8
    5072:	9f 92       	push	r9
    5074:	af 92       	push	r10
    5076:	bf 92       	push	r11
    5078:	cf 92       	push	r12
    507a:	df 92       	push	r13
    507c:	ef 92       	push	r14
    507e:	ff 92       	push	r15
    5080:	cf 93       	push	r28
    5082:	df 93       	push	r29
    5084:	ec 01       	movw	r28, r24
	double adc_H = *uH;
    5086:	fb 01       	movw	r30, r22
    5088:	80 80       	ld	r8, Z
    508a:	91 80       	ldd	r9, Z+1	; 0x01
    508c:	a2 80       	ldd	r10, Z+2	; 0x02
    508e:	b3 80       	ldd	r11, Z+3	; 0x03
	double var1;
	
	var1 = (double)t_fine - 76800.0;
    5090:	60 91 73 0b 	lds	r22, 0x0B73
    5094:	70 91 74 0b 	lds	r23, 0x0B74
    5098:	80 91 75 0b 	lds	r24, 0x0B75
    509c:	90 91 76 0b 	lds	r25, 0x0B76
    50a0:	5e d5       	rcall	.+2748   	; 0x5b5e <__floatsisf>
    50a2:	20 e0       	ldi	r18, 0x00	; 0
    50a4:	30 e0       	ldi	r19, 0x00	; 0
    50a6:	46 e9       	ldi	r20, 0x96	; 150
    50a8:	57 e4       	ldi	r21, 0x47	; 71
    50aa:	55 d4       	rcall	.+2218   	; 0x5956 <__subsf3>
    50ac:	6b 01       	movw	r12, r22
    50ae:	7c 01       	movw	r14, r24
	
	if (var1 != 0)
    50b0:	20 e0       	ldi	r18, 0x00	; 0
    50b2:	30 e0       	ldi	r19, 0x00	; 0
    50b4:	a9 01       	movw	r20, r18
    50b6:	b4 d4       	rcall	.+2408   	; 0x5a20 <__cmpsf2>
    50b8:	88 23       	and	r24, r24
    50ba:	09 f4       	brne	.+2      	; 0x50be <BMP280_CalcHumidity+0x56>
    50bc:	da c0       	rjmp	.+436    	; 0x5272 <BMP280_CalcHumidity+0x20a>
	{
		var1 = (((((adc_H * 16384) - ((double)dig_H4 * 1048576) - ((double)dig_H5 * var1)) + 16384 ) / 32768 ) * (((((((var1 * (double)dig_H6) / 1024) * (((var1 * (double)dig_H3) / 2048) + 32768)) / 1024) + 2097152) * ((double)dig_H2 + 8192) / 16384)));
    50be:	20 e0       	ldi	r18, 0x00	; 0
    50c0:	30 e0       	ldi	r19, 0x00	; 0
    50c2:	40 e8       	ldi	r20, 0x80	; 128
    50c4:	56 e4       	ldi	r21, 0x46	; 70
    50c6:	c5 01       	movw	r24, r10
    50c8:	b4 01       	movw	r22, r8
    50ca:	fd d5       	rcall	.+3066   	; 0x5cc6 <__mulsf3>
    50cc:	4b 01       	movw	r8, r22
    50ce:	5c 01       	movw	r10, r24
    50d0:	80 91 84 0b 	lds	r24, 0x0B84
    50d4:	90 91 85 0b 	lds	r25, 0x0B85
    50d8:	bc 01       	movw	r22, r24
    50da:	99 0f       	add	r25, r25
    50dc:	88 0b       	sbc	r24, r24
    50de:	99 0b       	sbc	r25, r25
    50e0:	3e d5       	rcall	.+2684   	; 0x5b5e <__floatsisf>
    50e2:	20 e0       	ldi	r18, 0x00	; 0
    50e4:	30 e0       	ldi	r19, 0x00	; 0
    50e6:	40 e8       	ldi	r20, 0x80	; 128
    50e8:	59 e4       	ldi	r21, 0x49	; 73
    50ea:	ed d5       	rcall	.+3034   	; 0x5cc6 <__mulsf3>
    50ec:	9b 01       	movw	r18, r22
    50ee:	ac 01       	movw	r20, r24
    50f0:	c5 01       	movw	r24, r10
    50f2:	b4 01       	movw	r22, r8
    50f4:	30 d4       	rcall	.+2144   	; 0x5956 <__subsf3>
    50f6:	4b 01       	movw	r8, r22
    50f8:	5c 01       	movw	r10, r24
    50fa:	80 91 82 0b 	lds	r24, 0x0B82
    50fe:	90 91 83 0b 	lds	r25, 0x0B83
    5102:	bc 01       	movw	r22, r24
    5104:	99 0f       	add	r25, r25
    5106:	88 0b       	sbc	r24, r24
    5108:	99 0b       	sbc	r25, r25
    510a:	29 d5       	rcall	.+2642   	; 0x5b5e <__floatsisf>
    510c:	a7 01       	movw	r20, r14
    510e:	96 01       	movw	r18, r12
    5110:	da d5       	rcall	.+2996   	; 0x5cc6 <__mulsf3>
    5112:	9b 01       	movw	r18, r22
    5114:	ac 01       	movw	r20, r24
    5116:	c5 01       	movw	r24, r10
    5118:	b4 01       	movw	r22, r8
    511a:	1d d4       	rcall	.+2106   	; 0x5956 <__subsf3>
    511c:	20 e0       	ldi	r18, 0x00	; 0
    511e:	30 e0       	ldi	r19, 0x00	; 0
    5120:	40 e8       	ldi	r20, 0x80	; 128
    5122:	56 e4       	ldi	r21, 0x46	; 70
    5124:	19 d4       	rcall	.+2098   	; 0x5958 <__addsf3>
    5126:	20 e0       	ldi	r18, 0x00	; 0
    5128:	30 e0       	ldi	r19, 0x00	; 0
    512a:	40 e0       	ldi	r20, 0x00	; 0
    512c:	58 e3       	ldi	r21, 0x38	; 56
    512e:	cb d5       	rcall	.+2966   	; 0x5cc6 <__mulsf3>
    5130:	4b 01       	movw	r8, r22
    5132:	5c 01       	movw	r10, r24
    5134:	60 91 7b 0b 	lds	r22, 0x0B7B
    5138:	06 2e       	mov	r0, r22
    513a:	00 0c       	add	r0, r0
    513c:	77 0b       	sbc	r23, r23
    513e:	88 0b       	sbc	r24, r24
    5140:	99 0b       	sbc	r25, r25
    5142:	0d d5       	rcall	.+2586   	; 0x5b5e <__floatsisf>
    5144:	a7 01       	movw	r20, r14
    5146:	96 01       	movw	r18, r12
    5148:	be d5       	rcall	.+2940   	; 0x5cc6 <__mulsf3>
    514a:	20 e0       	ldi	r18, 0x00	; 0
    514c:	30 e0       	ldi	r19, 0x00	; 0
    514e:	40 e8       	ldi	r20, 0x80	; 128
    5150:	5a e3       	ldi	r21, 0x3A	; 58
    5152:	b9 d5       	rcall	.+2930   	; 0x5cc6 <__mulsf3>
    5154:	2b 01       	movw	r4, r22
    5156:	3c 01       	movw	r6, r24
    5158:	60 91 7c 0b 	lds	r22, 0x0B7C
    515c:	70 e0       	ldi	r23, 0x00	; 0
    515e:	80 e0       	ldi	r24, 0x00	; 0
    5160:	90 e0       	ldi	r25, 0x00	; 0
    5162:	fb d4       	rcall	.+2550   	; 0x5b5a <__floatunsisf>
    5164:	a7 01       	movw	r20, r14
    5166:	96 01       	movw	r18, r12
    5168:	ae d5       	rcall	.+2908   	; 0x5cc6 <__mulsf3>
    516a:	20 e0       	ldi	r18, 0x00	; 0
    516c:	30 e0       	ldi	r19, 0x00	; 0
    516e:	40 e0       	ldi	r20, 0x00	; 0
    5170:	5a e3       	ldi	r21, 0x3A	; 58
    5172:	a9 d5       	rcall	.+2898   	; 0x5cc6 <__mulsf3>
    5174:	20 e0       	ldi	r18, 0x00	; 0
    5176:	30 e0       	ldi	r19, 0x00	; 0
    5178:	40 e0       	ldi	r20, 0x00	; 0
    517a:	57 e4       	ldi	r21, 0x47	; 71
    517c:	ed d3       	rcall	.+2010   	; 0x5958 <__addsf3>
    517e:	9b 01       	movw	r18, r22
    5180:	ac 01       	movw	r20, r24
    5182:	c3 01       	movw	r24, r6
    5184:	b2 01       	movw	r22, r4
    5186:	9f d5       	rcall	.+2878   	; 0x5cc6 <__mulsf3>
    5188:	20 e0       	ldi	r18, 0x00	; 0
    518a:	30 e0       	ldi	r19, 0x00	; 0
    518c:	40 e8       	ldi	r20, 0x80	; 128
    518e:	5a e3       	ldi	r21, 0x3A	; 58
    5190:	9a d5       	rcall	.+2868   	; 0x5cc6 <__mulsf3>
    5192:	20 e0       	ldi	r18, 0x00	; 0
    5194:	30 e0       	ldi	r19, 0x00	; 0
    5196:	40 e0       	ldi	r20, 0x00	; 0
    5198:	5a e4       	ldi	r21, 0x4A	; 74
    519a:	de d3       	rcall	.+1980   	; 0x5958 <__addsf3>
    519c:	6b 01       	movw	r12, r22
    519e:	7c 01       	movw	r14, r24
    51a0:	80 91 86 0b 	lds	r24, 0x0B86
    51a4:	90 91 87 0b 	lds	r25, 0x0B87
    51a8:	bc 01       	movw	r22, r24
    51aa:	99 0f       	add	r25, r25
    51ac:	88 0b       	sbc	r24, r24
    51ae:	99 0b       	sbc	r25, r25
    51b0:	d6 d4       	rcall	.+2476   	; 0x5b5e <__floatsisf>
    51b2:	20 e0       	ldi	r18, 0x00	; 0
    51b4:	30 e0       	ldi	r19, 0x00	; 0
    51b6:	40 e0       	ldi	r20, 0x00	; 0
    51b8:	56 e4       	ldi	r21, 0x46	; 70
    51ba:	ce d3       	rcall	.+1948   	; 0x5958 <__addsf3>
    51bc:	9b 01       	movw	r18, r22
    51be:	ac 01       	movw	r20, r24
    51c0:	c7 01       	movw	r24, r14
    51c2:	b6 01       	movw	r22, r12
    51c4:	80 d5       	rcall	.+2816   	; 0x5cc6 <__mulsf3>
    51c6:	20 e0       	ldi	r18, 0x00	; 0
    51c8:	30 e0       	ldi	r19, 0x00	; 0
    51ca:	40 e8       	ldi	r20, 0x80	; 128
    51cc:	58 e3       	ldi	r21, 0x38	; 56
    51ce:	7b d5       	rcall	.+2806   	; 0x5cc6 <__mulsf3>
    51d0:	9b 01       	movw	r18, r22
    51d2:	ac 01       	movw	r20, r24
    51d4:	c5 01       	movw	r24, r10
    51d6:	b4 01       	movw	r22, r8
    51d8:	76 d5       	rcall	.+2796   	; 0x5cc6 <__mulsf3>
    51da:	6b 01       	movw	r12, r22
    51dc:	7c 01       	movw	r14, r24
		/*var1 = (adc_H - (((double)dig_H4) * 64.0 + ((double)dig_H5) / 16384.0 * var1)) *
				(((double)dig_H2) / 65536.0 * (1.0 + ((double)dig_H6) / 67108864.0 * 
				var1 * (1.0 + ((double)dig_H3) / 67108864.0 * var1))); */
		*H = var1;
    51de:	68 83       	st	Y, r22
    51e0:	79 83       	std	Y+1, r23	; 0x01
    51e2:	8a 83       	std	Y+2, r24	; 0x02
    51e4:	9b 83       	std	Y+3, r25	; 0x03
	}
	else return (0);
	var1 = (var1 - (((((var1 / 32768) * (var1 / 32768)) / 128) * (double)dig_H1) / 16));
    51e6:	20 e0       	ldi	r18, 0x00	; 0
    51e8:	30 e0       	ldi	r19, 0x00	; 0
    51ea:	40 e0       	ldi	r20, 0x00	; 0
    51ec:	58 e3       	ldi	r21, 0x38	; 56
    51ee:	6b d5       	rcall	.+2774   	; 0x5cc6 <__mulsf3>
    51f0:	9b 01       	movw	r18, r22
    51f2:	ac 01       	movw	r20, r24
    51f4:	68 d5       	rcall	.+2768   	; 0x5cc6 <__mulsf3>
    51f6:	20 e0       	ldi	r18, 0x00	; 0
    51f8:	30 e0       	ldi	r19, 0x00	; 0
    51fa:	40 e0       	ldi	r20, 0x00	; 0
    51fc:	5c e3       	ldi	r21, 0x3C	; 60
    51fe:	63 d5       	rcall	.+2758   	; 0x5cc6 <__mulsf3>
    5200:	4b 01       	movw	r8, r22
    5202:	5c 01       	movw	r10, r24
    5204:	80 91 7d 0b 	lds	r24, 0x0B7D
    5208:	68 2f       	mov	r22, r24
    520a:	70 e0       	ldi	r23, 0x00	; 0
    520c:	80 e0       	ldi	r24, 0x00	; 0
    520e:	90 e0       	ldi	r25, 0x00	; 0
    5210:	a4 d4       	rcall	.+2376   	; 0x5b5a <__floatunsisf>
    5212:	9b 01       	movw	r18, r22
    5214:	ac 01       	movw	r20, r24
    5216:	c5 01       	movw	r24, r10
    5218:	b4 01       	movw	r22, r8
    521a:	55 d5       	rcall	.+2730   	; 0x5cc6 <__mulsf3>
    521c:	20 e0       	ldi	r18, 0x00	; 0
    521e:	30 e0       	ldi	r19, 0x00	; 0
    5220:	40 e8       	ldi	r20, 0x80	; 128
    5222:	5d e3       	ldi	r21, 0x3D	; 61
    5224:	50 d5       	rcall	.+2720   	; 0x5cc6 <__mulsf3>
    5226:	9b 01       	movw	r18, r22
    5228:	ac 01       	movw	r20, r24
    522a:	c7 01       	movw	r24, r14
    522c:	b6 01       	movw	r22, r12
    522e:	93 d3       	rcall	.+1830   	; 0x5956 <__subsf3>
    5230:	6b 01       	movw	r12, r22
    5232:	7c 01       	movw	r14, r24
	//var1 = var1 * (1.0 - ((double)dig_H1) * var1 / 524288.0);
	if (var1 > 100.0) {var1 = 100.0; *H = var1;}
    5234:	20 e0       	ldi	r18, 0x00	; 0
    5236:	30 e0       	ldi	r19, 0x00	; 0
    5238:	48 ec       	ldi	r20, 0xC8	; 200
    523a:	52 e4       	ldi	r21, 0x42	; 66
    523c:	40 d5       	rcall	.+2688   	; 0x5cbe <__gesf2>
    523e:	18 16       	cp	r1, r24
    5240:	54 f4       	brge	.+20     	; 0x5256 <BMP280_CalcHumidity+0x1ee>
    5242:	80 e0       	ldi	r24, 0x00	; 0
    5244:	90 e0       	ldi	r25, 0x00	; 0
    5246:	a8 ec       	ldi	r26, 0xC8	; 200
    5248:	b2 e4       	ldi	r27, 0x42	; 66
    524a:	88 83       	st	Y, r24
    524c:	99 83       	std	Y+1, r25	; 0x01
    524e:	aa 83       	std	Y+2, r26	; 0x02
    5250:	bb 83       	std	Y+3, r27	; 0x03
	else if (var1 < 0.0) {var1 = 0.0; *H = var1;}
	return (1);
    5252:	81 e0       	ldi	r24, 0x01	; 1
    5254:	11 c0       	rjmp	.+34     	; 0x5278 <BMP280_CalcHumidity+0x210>
	}
	else return (0);
	var1 = (var1 - (((((var1 / 32768) * (var1 / 32768)) / 128) * (double)dig_H1) / 16));
	//var1 = var1 * (1.0 - ((double)dig_H1) * var1 / 524288.0);
	if (var1 > 100.0) {var1 = 100.0; *H = var1;}
	else if (var1 < 0.0) {var1 = 0.0; *H = var1;}
    5256:	20 e0       	ldi	r18, 0x00	; 0
    5258:	30 e0       	ldi	r19, 0x00	; 0
    525a:	a9 01       	movw	r20, r18
    525c:	c7 01       	movw	r24, r14
    525e:	b6 01       	movw	r22, r12
    5260:	df d3       	rcall	.+1982   	; 0x5a20 <__cmpsf2>
    5262:	88 23       	and	r24, r24
    5264:	44 f4       	brge	.+16     	; 0x5276 <BMP280_CalcHumidity+0x20e>
    5266:	18 82       	st	Y, r1
    5268:	19 82       	std	Y+1, r1	; 0x01
    526a:	1a 82       	std	Y+2, r1	; 0x02
    526c:	1b 82       	std	Y+3, r1	; 0x03
	return (1);
    526e:	81 e0       	ldi	r24, 0x01	; 1
    5270:	03 c0       	rjmp	.+6      	; 0x5278 <BMP280_CalcHumidity+0x210>
		/*var1 = (adc_H - (((double)dig_H4) * 64.0 + ((double)dig_H5) / 16384.0 * var1)) *
				(((double)dig_H2) / 65536.0 * (1.0 + ((double)dig_H6) / 67108864.0 * 
				var1 * (1.0 + ((double)dig_H3) / 67108864.0 * var1))); */
		*H = var1;
	}
	else return (0);
    5272:	80 e0       	ldi	r24, 0x00	; 0
    5274:	01 c0       	rjmp	.+2      	; 0x5278 <BMP280_CalcHumidity+0x210>
	var1 = (var1 - (((((var1 / 32768) * (var1 / 32768)) / 128) * (double)dig_H1) / 16));
	//var1 = var1 * (1.0 - ((double)dig_H1) * var1 / 524288.0);
	if (var1 > 100.0) {var1 = 100.0; *H = var1;}
	else if (var1 < 0.0) {var1 = 0.0; *H = var1;}
	return (1);
    5276:	81 e0       	ldi	r24, 0x01	; 1
}
    5278:	df 91       	pop	r29
    527a:	cf 91       	pop	r28
    527c:	ff 90       	pop	r15
    527e:	ef 90       	pop	r14
    5280:	df 90       	pop	r13
    5282:	cf 90       	pop	r12
    5284:	bf 90       	pop	r11
    5286:	af 90       	pop	r10
    5288:	9f 90       	pop	r9
    528a:	8f 90       	pop	r8
    528c:	7f 90       	pop	r7
    528e:	6f 90       	pop	r6
    5290:	5f 90       	pop	r5
    5292:	4f 90       	pop	r4
    5294:	08 95       	ret

00005296 <BMP280_GetTPH>:
  @brief Gets temperature and pressure
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetTPH(double *T, double *P, double *H){
    5296:	cf 92       	push	r12
    5298:	df 92       	push	r13
    529a:	ef 92       	push	r14
    529c:	ff 92       	push	r15
    529e:	0f 93       	push	r16
    52a0:	1f 93       	push	r17
    52a2:	cf 93       	push	r28
    52a4:	df 93       	push	r29
    52a6:	cd b7       	in	r28, 0x3d	; 61
    52a8:	de b7       	in	r29, 0x3e	; 62
    52aa:	2c 97       	sbiw	r28, 0x0c	; 12
    52ac:	0f b6       	in	r0, 0x3f	; 63
    52ae:	f8 94       	cli
    52b0:	de bf       	out	0x3e, r29	; 62
    52b2:	0f be       	out	0x3f, r0	; 63
    52b4:	cd bf       	out	0x3d, r28	; 61
    52b6:	8c 01       	movw	r16, r24
    52b8:	7b 01       	movw	r14, r22
    52ba:	6a 01       	movw	r12, r20
	double uP,uT,uH ;
	char result = BMP280_GetUnPTH(&uP, &uT, &uH);
    52bc:	ae 01       	movw	r20, r28
    52be:	47 5f       	subi	r20, 0xF7	; 247
    52c0:	5f 4f       	sbci	r21, 0xFF	; 255
    52c2:	be 01       	movw	r22, r28
    52c4:	6b 5f       	subi	r22, 0xFB	; 251
    52c6:	7f 4f       	sbci	r23, 0xFF	; 255
    52c8:	ce 01       	movw	r24, r28
    52ca:	01 96       	adiw	r24, 0x01	; 1
    52cc:	dc db       	rcall	.-2120   	; 0x4a86 <BMP280_GetUnPTH>
	if(result!=0){
    52ce:	88 23       	and	r24, r24
    52d0:	21 f1       	breq	.+72     	; 0x531a <BMP280_GetTPH+0x84>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
    52d2:	be 01       	movw	r22, r28
    52d4:	6b 5f       	subi	r22, 0xFB	; 251
    52d6:	7f 4f       	sbci	r23, 0xFF	; 255
    52d8:	c8 01       	movw	r24, r16
    52da:	cc dc       	rcall	.-1640   	; 0x4c74 <BMP280_CalcTemperature>
		if(result){
    52dc:	88 23       	and	r24, r24
    52de:	c1 f0       	breq	.+48     	; 0x5310 <BMP280_GetTPH+0x7a>
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
    52e0:	be 01       	movw	r22, r28
    52e2:	6f 5f       	subi	r22, 0xFF	; 255
    52e4:	7f 4f       	sbci	r23, 0xFF	; 255
    52e6:	c7 01       	movw	r24, r14
    52e8:	78 dd       	rcall	.-1296   	; 0x4dda <BMP280_CalcPressure>
			if(result){
    52ea:	88 23       	and	r24, r24
    52ec:	61 f0       	breq	.+24     	; 0x5306 <BMP280_GetTPH+0x70>
				result = BMP280_CalcHumidity(H,&uH); 	
    52ee:	be 01       	movw	r22, r28
    52f0:	67 5f       	subi	r22, 0xF7	; 247
    52f2:	7f 4f       	sbci	r23, 0xFF	; 255
    52f4:	c6 01       	movw	r24, r12
    52f6:	b8 de       	rcall	.-656    	; 0x5068 <BMP280_CalcHumidity>
				if(result)return (1);
    52f8:	81 11       	cpse	r24, r1
    52fa:	14 c0       	rjmp	.+40     	; 0x5324 <BMP280_GetTPH+0x8e>
				else error = 4 ;	// humidity error ;
    52fc:	84 e0       	ldi	r24, 0x04	; 4
    52fe:	80 93 72 0b 	sts	0x0B72, r24
				return (0);
    5302:	80 e0       	ldi	r24, 0x00	; 0
    5304:	10 c0       	rjmp	.+32     	; 0x5326 <BMP280_GetTPH+0x90>
			}else
			error = 3;	// pressure error ;
    5306:	83 e0       	ldi	r24, 0x03	; 3
    5308:	80 93 72 0b 	sts	0x0B72, r24
		}else
		error = 2; // temperature error
	}
	else
	error = 1;
	return (0);
    530c:	80 e0       	ldi	r24, 0x00	; 0
    530e:	0b c0       	rjmp	.+22     	; 0x5326 <BMP280_GetTPH+0x90>
				else error = 4 ;	// humidity error ;
				return (0);
			}else
			error = 3;	// pressure error ;
		}else
		error = 2; // temperature error
    5310:	82 e0       	ldi	r24, 0x02	; 2
    5312:	80 93 72 0b 	sts	0x0B72, r24
	}
	else
	error = 1;
	return (0);
    5316:	80 e0       	ldi	r24, 0x00	; 0
    5318:	06 c0       	rjmp	.+12     	; 0x5326 <BMP280_GetTPH+0x90>
			error = 3;	// pressure error ;
		}else
		error = 2; // temperature error
	}
	else
	error = 1;
    531a:	81 e0       	ldi	r24, 0x01	; 1
    531c:	80 93 72 0b 	sts	0x0B72, r24
	return (0);
    5320:	80 e0       	ldi	r24, 0x00	; 0
    5322:	01 c0       	rjmp	.+2      	; 0x5326 <BMP280_GetTPH+0x90>
		if(result){
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
			if(result){
				result = BMP280_CalcHumidity(H,&uH); 	
				if(result)return (1);
    5324:	81 e0       	ldi	r24, 0x01	; 1
		error = 2; // temperature error
	}
	else
	error = 1;
	return (0);
}
    5326:	2c 96       	adiw	r28, 0x0c	; 12
    5328:	0f b6       	in	r0, 0x3f	; 63
    532a:	f8 94       	cli
    532c:	de bf       	out	0x3e, r29	; 62
    532e:	0f be       	out	0x3f, r0	; 63
    5330:	cd bf       	out	0x3d, r28	; 61
    5332:	df 91       	pop	r29
    5334:	cf 91       	pop	r28
    5336:	1f 91       	pop	r17
    5338:	0f 91       	pop	r16
    533a:	ff 90       	pop	r15
    533c:	ef 90       	pop	r14
    533e:	df 90       	pop	r13
    5340:	cf 90       	pop	r12
    5342:	08 95       	ret

00005344 <DemoStorage_Device_VTinit>:
	DemoStorageget_CurDataUnit
};

void DemoStorage_Device_VTinit( DemoStorageDevice *this )
{
	this->abstract.device_vt = &DemoStorageDevice_abstract_vmt;
    5344:	2e e6       	ldi	r18, 0x6E	; 110
    5346:	32 e0       	ldi	r19, 0x02	; 2
    5348:	fc 01       	movw	r30, r24
    534a:	31 83       	std	Z+1, r19	; 0x01
    534c:	20 83       	st	Z, r18
    534e:	08 95       	ret

00005350 <DemoStorage_Device_init>:
}

int DemoStorage_Device_init( DemoStorageDevice *this )
{
	return 0;
}
    5350:	80 e0       	ldi	r24, 0x00	; 0
    5352:	90 e0       	ldi	r25, 0x00	; 0
    5354:	08 95       	ret

00005356 <DemoStorage_Device_reset>:

int DemoStorage_Device_reset( DemoStorageDevice *this )
{
	return 0;
}
    5356:	80 e0       	ldi	r24, 0x00	; 0
    5358:	90 e0       	ldi	r25, 0x00	; 0
    535a:	08 95       	ret

0000535c <DemoStorage_Device_getType>:

int DemoStorage_Device_getType( DemoStorageDevice *this )
{
	return TYPE_STORAGE_DEVICE;
}
    535c:	84 e0       	ldi	r24, 0x04	; 4
    535e:	90 e0       	ldi	r25, 0x00	; 0
    5360:	08 95       	ret

00005362 <DemoStorage_Device_Tinit>:



void DemoStorage_Device_Tinit(DemoStorageDevice *this)
{
	this->vmt = &DemoStorageDevice_vmt;
    5362:	26 e6       	ldi	r18, 0x66	; 102
    5364:	32 e0       	ldi	r19, 0x02	; 2
    5366:	fc 01       	movw	r30, r24
    5368:	33 83       	std	Z+3, r19	; 0x03
    536a:	22 83       	std	Z+2, r18	; 0x02
    536c:	08 95       	ret

0000536e <DemoStorage_Device_Configure>:
}

int DemoStorage_Device_Configure(DemoStorageDevice *this)
{
	return 0;
}
    536e:	80 e0       	ldi	r24, 0x00	; 0
    5370:	90 e0       	ldi	r25, 0x00	; 0
    5372:	08 95       	ret

00005374 <DemoStorageget_CurDataUnit>:

DataUnit * DemoStorageget_CurDataUnit(DemoStorageDevice *this)
{
    5374:	0f 93       	push	r16
    5376:	1f 93       	push	r17
    5378:	cf 93       	push	r28
    537a:	df 93       	push	r29
    537c:	ec 01       	movw	r28, r24
	int t = this->cur_pos;
    537e:	0e 81       	ldd	r16, Y+6	; 0x06
    5380:	1f 81       	ldd	r17, Y+7	; 0x07
	printf("Executre get store Device : %d\n",t);
    5382:	1f 93       	push	r17
    5384:	0f 93       	push	r16
    5386:	8c e2       	ldi	r24, 0x2C	; 44
    5388:	97 e0       	ldi	r25, 0x07	; 7
    538a:	9f 93       	push	r25
    538c:	8f 93       	push	r24
    538e:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
	this->cur_pos = this->cur_pos+1;
    5392:	8e 81       	ldd	r24, Y+6	; 0x06
    5394:	9f 81       	ldd	r25, Y+7	; 0x07
    5396:	01 96       	adiw	r24, 0x01	; 1
    5398:	9f 83       	std	Y+7, r25	; 0x07
    539a:	8e 83       	std	Y+6, r24	; 0x06
	DataUnit * data_t = this -> StoragesData;
	return (data_t + t);
    539c:	28 e3       	ldi	r18, 0x38	; 56
    539e:	20 9f       	mul	r18, r16
    53a0:	c0 01       	movw	r24, r0
    53a2:	21 9f       	mul	r18, r17
    53a4:	90 0d       	add	r25, r0
    53a6:	11 24       	eor	r1, r1
    53a8:	28 85       	ldd	r18, Y+8	; 0x08
    53aa:	39 85       	ldd	r19, Y+9	; 0x09
    53ac:	0f 90       	pop	r0
    53ae:	0f 90       	pop	r0
    53b0:	0f 90       	pop	r0
    53b2:	0f 90       	pop	r0
    53b4:	82 0f       	add	r24, r18
    53b6:	93 1f       	adc	r25, r19
    53b8:	df 91       	pop	r29
    53ba:	cf 91       	pop	r28
    53bc:	1f 91       	pop	r17
    53be:	0f 91       	pop	r16
    53c0:	08 95       	ret

000053c2 <DemoStorage_Device_Execute>:
{
	this->vmt = &DemoStorageDevice_vmt;
}

int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
    53c2:	3f 92       	push	r3
    53c4:	4f 92       	push	r4
    53c6:	5f 92       	push	r5
    53c8:	6f 92       	push	r6
    53ca:	7f 92       	push	r7
    53cc:	8f 92       	push	r8
    53ce:	9f 92       	push	r9
    53d0:	af 92       	push	r10
    53d2:	bf 92       	push	r11
    53d4:	cf 92       	push	r12
    53d6:	df 92       	push	r13
    53d8:	ef 92       	push	r14
    53da:	ff 92       	push	r15
    53dc:	0f 93       	push	r16
    53de:	1f 93       	push	r17
    53e0:	cf 93       	push	r28
    53e2:	df 93       	push	r29
    53e4:	cd b7       	in	r28, 0x3d	; 61
    53e6:	de b7       	in	r29, 0x3e	; 62
    53e8:	e8 97       	sbiw	r28, 0x38	; 56
    53ea:	0f b6       	in	r0, 0x3f	; 63
    53ec:	f8 94       	cli
    53ee:	de bf       	out	0x3e, r29	; 62
    53f0:	0f be       	out	0x3f, r0	; 63
    53f2:	cd bf       	out	0x3d, r28	; 61
    53f4:	3c 01       	movw	r6, r24
	printf("Executre Storage Device\n");
    53f6:	8c e4       	ldi	r24, 0x4C	; 76
    53f8:	97 e0       	ldi	r25, 0x07	; 7
    53fa:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
	for( int i=0; i<this->cur_pos; i++)
    53fe:	f3 01       	movw	r30, r6
    5400:	86 81       	ldd	r24, Z+6	; 0x06
    5402:	97 81       	ldd	r25, Z+7	; 0x07
    5404:	18 16       	cp	r1, r24
    5406:	19 06       	cpc	r1, r25
    5408:	0c f0       	brlt	.+2      	; 0x540c <DemoStorage_Device_Execute+0x4a>
    540a:	8b c0       	rjmp	.+278    	; 0x5522 <DemoStorage_Device_Execute+0x160>
    540c:	81 2c       	mov	r8, r1
    540e:	91 2c       	mov	r9, r1
    5410:	a1 2c       	mov	r10, r1
    5412:	b1 2c       	mov	r11, r1
	{
		DataUnit temp = this->StoragesData[i];
    5414:	0f 2e       	mov	r0, r31
    5416:	f8 e3       	ldi	r31, 0x38	; 56
    5418:	3f 2e       	mov	r3, r31
    541a:	f0 2d       	mov	r31, r0
		printf("%04ld %02ld %02ld %02ld %02ld %02ld\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
    541c:	0f 2e       	mov	r0, r31
    541e:	f4 e6       	ldi	r31, 0x64	; 100
    5420:	4f 2e       	mov	r4, r31
    5422:	f7 e0       	ldi	r31, 0x07	; 7
    5424:	5f 2e       	mov	r5, r31
    5426:	f0 2d       	mov	r31, r0
    5428:	6e 01       	movw	r12, r28
    542a:	f1 e1       	ldi	r31, 0x11	; 17
    542c:	cf 0e       	add	r12, r31
    542e:	d1 1c       	adc	r13, r1
		for( int j = 0; j < MAX_NUM_DATA; ++j )
			printf("%3.3f ",temp.data[j]);
    5430:	0f 2e       	mov	r0, r31
    5432:	f9 e8       	ldi	r31, 0x89	; 137
    5434:	ef 2e       	mov	r14, r31
    5436:	f7 e0       	ldi	r31, 0x07	; 7
    5438:	ff 2e       	mov	r15, r31
    543a:	f0 2d       	mov	r31, r0
int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
	{
		DataUnit temp = this->StoragesData[i];
    543c:	f3 01       	movw	r30, r6
    543e:	80 85       	ldd	r24, Z+8	; 0x08
    5440:	91 85       	ldd	r25, Z+9	; 0x09
    5442:	88 0d       	add	r24, r8
    5444:	99 1d       	adc	r25, r9
    5446:	fc 01       	movw	r30, r24
    5448:	de 01       	movw	r26, r28
    544a:	11 96       	adiw	r26, 0x01	; 1
    544c:	23 2d       	mov	r18, r3
    544e:	01 90       	ld	r0, Z+
    5450:	0d 92       	st	X+, r0
    5452:	2a 95       	dec	r18
    5454:	e1 f7       	brne	.-8      	; 0x544e <DemoStorage_Device_Execute+0x8c>
		printf("%04ld %02ld %02ld %02ld %02ld %02ld\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
    5456:	fc 01       	movw	r30, r24
    5458:	23 8d       	ldd	r18, Z+27	; 0x1b
    545a:	2f 93       	push	r18
    545c:	22 8d       	ldd	r18, Z+26	; 0x1a
    545e:	2f 93       	push	r18
    5460:	21 8d       	ldd	r18, Z+25	; 0x19
    5462:	2f 93       	push	r18
    5464:	20 8d       	ldd	r18, Z+24	; 0x18
    5466:	2f 93       	push	r18
    5468:	27 8d       	ldd	r18, Z+31	; 0x1f
    546a:	2f 93       	push	r18
    546c:	26 8d       	ldd	r18, Z+30	; 0x1e
    546e:	2f 93       	push	r18
    5470:	25 8d       	ldd	r18, Z+29	; 0x1d
    5472:	2f 93       	push	r18
    5474:	24 8d       	ldd	r18, Z+28	; 0x1c
    5476:	2f 93       	push	r18
    5478:	23 a1       	ldd	r18, Z+35	; 0x23
    547a:	2f 93       	push	r18
    547c:	22 a1       	ldd	r18, Z+34	; 0x22
    547e:	2f 93       	push	r18
    5480:	21 a1       	ldd	r18, Z+33	; 0x21
    5482:	2f 93       	push	r18
    5484:	20 a1       	ldd	r18, Z+32	; 0x20
    5486:	2f 93       	push	r18
    5488:	27 a1       	ldd	r18, Z+39	; 0x27
    548a:	2f 93       	push	r18
    548c:	26 a1       	ldd	r18, Z+38	; 0x26
    548e:	2f 93       	push	r18
    5490:	25 a1       	ldd	r18, Z+37	; 0x25
    5492:	2f 93       	push	r18
    5494:	24 a1       	ldd	r18, Z+36	; 0x24
    5496:	2f 93       	push	r18
    5498:	23 a5       	ldd	r18, Z+43	; 0x2b
    549a:	2f 93       	push	r18
    549c:	22 a5       	ldd	r18, Z+42	; 0x2a
    549e:	2f 93       	push	r18
    54a0:	21 a5       	ldd	r18, Z+41	; 0x29
    54a2:	2f 93       	push	r18
    54a4:	20 a5       	ldd	r18, Z+40	; 0x28
    54a6:	2f 93       	push	r18
    54a8:	27 a5       	ldd	r18, Z+47	; 0x2f
    54aa:	2f 93       	push	r18
    54ac:	26 a5       	ldd	r18, Z+46	; 0x2e
    54ae:	2f 93       	push	r18
    54b0:	25 a5       	ldd	r18, Z+45	; 0x2d
    54b2:	2f 93       	push	r18
    54b4:	84 a5       	ldd	r24, Z+44	; 0x2c
    54b6:	8f 93       	push	r24
    54b8:	5f 92       	push	r5
    54ba:	4f 92       	push	r4
    54bc:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
    54c0:	8e 01       	movw	r16, r28
    54c2:	0f 5f       	subi	r16, 0xFF	; 255
    54c4:	1f 4f       	sbci	r17, 0xFF	; 255
    54c6:	0f b6       	in	r0, 0x3f	; 63
    54c8:	f8 94       	cli
    54ca:	de bf       	out	0x3e, r29	; 62
    54cc:	0f be       	out	0x3f, r0	; 63
    54ce:	cd bf       	out	0x3d, r28	; 61
		for( int j = 0; j < MAX_NUM_DATA; ++j )
			printf("%3.3f ",temp.data[j]);
    54d0:	f8 01       	movw	r30, r16
    54d2:	80 81       	ld	r24, Z
    54d4:	91 81       	ldd	r25, Z+1	; 0x01
    54d6:	22 81       	ldd	r18, Z+2	; 0x02
    54d8:	33 81       	ldd	r19, Z+3	; 0x03
    54da:	0c 5f       	subi	r16, 0xFC	; 252
    54dc:	1f 4f       	sbci	r17, 0xFF	; 255
    54de:	3f 93       	push	r19
    54e0:	2f 93       	push	r18
    54e2:	9f 93       	push	r25
    54e4:	8f 93       	push	r24
    54e6:	ff 92       	push	r15
    54e8:	ef 92       	push	r14
    54ea:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
	{
		DataUnit temp = this->StoragesData[i];
		printf("%04ld %02ld %02ld %02ld %02ld %02ld\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
		for( int j = 0; j < MAX_NUM_DATA; ++j )
    54ee:	0f 90       	pop	r0
    54f0:	0f 90       	pop	r0
    54f2:	0f 90       	pop	r0
    54f4:	0f 90       	pop	r0
    54f6:	0f 90       	pop	r0
    54f8:	0f 90       	pop	r0
    54fa:	0c 15       	cp	r16, r12
    54fc:	1d 05       	cpc	r17, r13
    54fe:	41 f7       	brne	.-48     	; 0x54d0 <DemoStorage_Device_Execute+0x10e>
			printf("%3.3f ",temp.data[j]);
		printf("\n");
    5500:	8a e0       	ldi	r24, 0x0A	; 10
    5502:	90 e0       	ldi	r25, 0x00	; 0
    5504:	0e 94 28 35 	call	0x6a50	; 0x6a50 <putchar>
}

int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
    5508:	ff ef       	ldi	r31, 0xFF	; 255
    550a:	af 1a       	sub	r10, r31
    550c:	bf 0a       	sbc	r11, r31
    550e:	88 e3       	ldi	r24, 0x38	; 56
    5510:	88 0e       	add	r8, r24
    5512:	91 1c       	adc	r9, r1
    5514:	f3 01       	movw	r30, r6
    5516:	86 81       	ldd	r24, Z+6	; 0x06
    5518:	97 81       	ldd	r25, Z+7	; 0x07
    551a:	a8 16       	cp	r10, r24
    551c:	b9 06       	cpc	r11, r25
    551e:	0c f4       	brge	.+2      	; 0x5522 <DemoStorage_Device_Execute+0x160>
    5520:	8d cf       	rjmp	.-230    	; 0x543c <DemoStorage_Device_Execute+0x7a>
		printf("%04ld %02ld %02ld %02ld %02ld %02ld\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
		for( int j = 0; j < MAX_NUM_DATA; ++j )
			printf("%3.3f ",temp.data[j]);
		printf("\n");
	}
	this->cur_pos = 0;
    5522:	f3 01       	movw	r30, r6
    5524:	17 82       	std	Z+7, r1	; 0x07
    5526:	16 82       	std	Z+6, r1	; 0x06
	return 0;
}
    5528:	80 e0       	ldi	r24, 0x00	; 0
    552a:	90 e0       	ldi	r25, 0x00	; 0
    552c:	e8 96       	adiw	r28, 0x38	; 56
    552e:	0f b6       	in	r0, 0x3f	; 63
    5530:	f8 94       	cli
    5532:	de bf       	out	0x3e, r29	; 62
    5534:	0f be       	out	0x3f, r0	; 63
    5536:	cd bf       	out	0x3d, r28	; 61
    5538:	df 91       	pop	r29
    553a:	cf 91       	pop	r28
    553c:	1f 91       	pop	r17
    553e:	0f 91       	pop	r16
    5540:	ff 90       	pop	r15
    5542:	ef 90       	pop	r14
    5544:	df 90       	pop	r13
    5546:	cf 90       	pop	r12
    5548:	bf 90       	pop	r11
    554a:	af 90       	pop	r10
    554c:	9f 90       	pop	r9
    554e:	8f 90       	pop	r8
    5550:	7f 90       	pop	r7
    5552:	6f 90       	pop	r6
    5554:	5f 90       	pop	r5
    5556:	4f 90       	pop	r4
    5558:	3f 90       	pop	r3
    555a:	08 95       	ret

0000555c <New_DemoStorage_Device>:
{
	return TYPE_STORAGE_DEVICE;
}

DemoStorageDevice* New_DemoStorage_Device( int infonum )
{
    555c:	cf 92       	push	r12
    555e:	df 92       	push	r13
    5560:	ef 92       	push	r14
    5562:	ff 92       	push	r15
    5564:	cf 93       	push	r28
    5566:	df 93       	push	r29
    5568:	7c 01       	movw	r14, r24
	DemoStorageDevice *p = malloc(sizeof(DemoStorageDevice));
    556a:	8a e0       	ldi	r24, 0x0A	; 10
    556c:	90 e0       	ldi	r25, 0x00	; 0
    556e:	0e 94 c2 32 	call	0x6584	; 0x6584 <malloc>
    5572:	ec 01       	movw	r28, r24
	p->info = infonum;
    5574:	fd 82       	std	Y+5, r15	; 0x05
    5576:	ec 82       	std	Y+4, r14	; 0x04
	DemoStorageget_CurDataUnit
};

void DemoStorage_Device_VTinit( DemoStorageDevice *this )
{
	this->abstract.device_vt = &DemoStorageDevice_abstract_vmt;
    5578:	8e e6       	ldi	r24, 0x6E	; 110
    557a:	92 e0       	ldi	r25, 0x02	; 2
    557c:	99 83       	std	Y+1, r25	; 0x01
    557e:	88 83       	st	Y, r24



void DemoStorage_Device_Tinit(DemoStorageDevice *this)
{
	this->vmt = &DemoStorageDevice_vmt;
    5580:	86 e6       	ldi	r24, 0x66	; 102
    5582:	92 e0       	ldi	r25, 0x02	; 2
    5584:	9b 83       	std	Y+3, r25	; 0x03
    5586:	8a 83       	std	Y+2, r24	; 0x02
{
	DemoStorageDevice *p = malloc(sizeof(DemoStorageDevice));
	p->info = infonum;
	DemoStorage_Device_VTinit(p);
	DemoStorage_Device_Tinit(p);
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
    5588:	88 e4       	ldi	r24, 0x48	; 72
    558a:	93 e0       	ldi	r25, 0x03	; 3
    558c:	fb d7       	rcall	.+4086   	; 0x6584 <malloc>
    558e:	99 87       	std	Y+9, r25	; 0x09
    5590:	88 87       	std	Y+8, r24	; 0x08
    5592:	40 e0       	ldi	r20, 0x00	; 0
    5594:	50 e0       	ldi	r21, 0x00	; 0
{
	return TYPE_STORAGE_DEVICE;
}

DemoStorageDevice* New_DemoStorage_Device( int infonum )
{
    5596:	70 e0       	ldi	r23, 0x00	; 0
    5598:	60 e0       	ldi	r22, 0x00	; 0
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
		for( int j=0;j<MAX_NUM_DATA;j++)
		{
				p->StoragesData[i].data[j] = -9999; 
    559a:	0f 2e       	mov	r0, r31
    559c:	c1 2c       	mov	r12, r1
    559e:	fc e3       	ldi	r31, 0x3C	; 60
    55a0:	df 2e       	mov	r13, r31
    55a2:	fc e1       	ldi	r31, 0x1C	; 28
    55a4:	ef 2e       	mov	r14, r31
    55a6:	f6 ec       	ldi	r31, 0xC6	; 198
    55a8:	ff 2e       	mov	r15, r31
    55aa:	f0 2d       	mov	r31, r0
    55ac:	2a c0       	rjmp	.+84     	; 0x5602 <New_DemoStorage_Device+0xa6>
    55ae:	e8 85       	ldd	r30, Y+8	; 0x08
    55b0:	f9 85       	ldd	r31, Y+9	; 0x09
    55b2:	e4 0f       	add	r30, r20
    55b4:	f5 1f       	adc	r31, r21
    55b6:	c9 01       	movw	r24, r18
    55b8:	88 0f       	add	r24, r24
    55ba:	99 1f       	adc	r25, r25
    55bc:	88 0f       	add	r24, r24
    55be:	99 1f       	adc	r25, r25
    55c0:	e8 0f       	add	r30, r24
    55c2:	f9 1f       	adc	r31, r25
    55c4:	c0 82       	st	Z, r12
    55c6:	d1 82       	std	Z+1, r13	; 0x01
    55c8:	e2 82       	std	Z+2, r14	; 0x02
    55ca:	f3 82       	std	Z+3, r15	; 0x03
				p->StoragesData[i].data_tm.unix_msec = 0;
    55cc:	e8 85       	ldd	r30, Y+8	; 0x08
    55ce:	f9 85       	ldd	r31, Y+9	; 0x09
    55d0:	e4 0f       	add	r30, r20
    55d2:	f5 1f       	adc	r31, r21
    55d4:	14 8a       	std	Z+20, r1	; 0x14
    55d6:	15 8a       	std	Z+21, r1	; 0x15
    55d8:	16 8a       	std	Z+22, r1	; 0x16
    55da:	17 8a       	std	Z+23, r1	; 0x17
				p->StoragesData[i].data_tm.unix_time = 0;
    55dc:	e8 85       	ldd	r30, Y+8	; 0x08
    55de:	f9 85       	ldd	r31, Y+9	; 0x09
    55e0:	e4 0f       	add	r30, r20
    55e2:	f5 1f       	adc	r31, r21
    55e4:	10 8a       	std	Z+16, r1	; 0x10
    55e6:	11 8a       	std	Z+17, r1	; 0x11
    55e8:	12 8a       	std	Z+18, r1	; 0x12
    55ea:	13 8a       	std	Z+19, r1	; 0x13
	DemoStorage_Device_VTinit(p);
	DemoStorage_Device_Tinit(p);
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
		for( int j=0;j<MAX_NUM_DATA;j++)
    55ec:	2f 5f       	subi	r18, 0xFF	; 255
    55ee:	3f 4f       	sbci	r19, 0xFF	; 255
    55f0:	24 30       	cpi	r18, 0x04	; 4
    55f2:	31 05       	cpc	r19, r1
    55f4:	e1 f6       	brne	.-72     	; 0x55ae <New_DemoStorage_Device+0x52>
    55f6:	48 5c       	subi	r20, 0xC8	; 200
    55f8:	5f 4f       	sbci	r21, 0xFF	; 255
	p->info = infonum;
	DemoStorage_Device_VTinit(p);
	DemoStorage_Device_Tinit(p);
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
    55fa:	48 34       	cpi	r20, 0x48	; 72
    55fc:	83 e0       	ldi	r24, 0x03	; 3
    55fe:	58 07       	cpc	r21, r24
    5600:	19 f0       	breq	.+6      	; 0x5608 <New_DemoStorage_Device+0xac>
{
	return TYPE_STORAGE_DEVICE;
}

DemoStorageDevice* New_DemoStorage_Device( int infonum )
{
    5602:	27 2f       	mov	r18, r23
    5604:	36 2f       	mov	r19, r22
    5606:	d3 cf       	rjmp	.-90     	; 0x55ae <New_DemoStorage_Device+0x52>
		{
				p->StoragesData[i].data[j] = -9999; 
				p->StoragesData[i].data_tm.unix_msec = 0;
				p->StoragesData[i].data_tm.unix_time = 0;
		}
	p->cur_pos = 0;
    5608:	1f 82       	std	Y+7, r1	; 0x07
    560a:	1e 82       	std	Y+6, r1	; 0x06

	return p;
}
    560c:	ce 01       	movw	r24, r28
    560e:	df 91       	pop	r29
    5610:	cf 91       	pop	r28
    5612:	ff 90       	pop	r15
    5614:	ef 90       	pop	r14
    5616:	df 90       	pop	r13
    5618:	cf 90       	pop	r12
    561a:	08 95       	ret

0000561c <LoadData_Device_VTinit>:
};


void LoadData_Device_VTinit( LoadDataDevice *this )
{
	this->abstract.device_vt = &LoadDataDevice_abstract_vmt;
    561c:	2c e7       	ldi	r18, 0x7C	; 124
    561e:	32 e0       	ldi	r19, 0x02	; 2
    5620:	fc 01       	movw	r30, r24
    5622:	31 83       	std	Z+1, r19	; 0x01
    5624:	20 83       	st	Z, r18
    5626:	08 95       	ret

00005628 <LoadData_Device_init>:
}

int LoadData_Device_init( LoadDataDevice *this )
{
	return 0;
}
    5628:	80 e0       	ldi	r24, 0x00	; 0
    562a:	90 e0       	ldi	r25, 0x00	; 0
    562c:	08 95       	ret

0000562e <LoadData_Device_reset>:

int LoadData_Device_reset( LoadDataDevice *this )
{
	return 0;
}
    562e:	80 e0       	ldi	r24, 0x00	; 0
    5630:	90 e0       	ldi	r25, 0x00	; 0
    5632:	08 95       	ret

00005634 <LoadData_Device_getType>:

int LoadData_Device_getType( LoadDataDevice *this )
{
	return TYPE_DEVICE;
}
    5634:	85 e0       	ldi	r24, 0x05	; 5
    5636:	90 e0       	ldi	r25, 0x00	; 0
    5638:	08 95       	ret

0000563a <LoadData_Device_Tinit>:



void LoadData_Device_Tinit(LoadDataDevice *this)
{
	this->vmt = &LoadDataDevice_vmt;
    563a:	26 e7       	ldi	r18, 0x76	; 118
    563c:	32 e0       	ldi	r19, 0x02	; 2
    563e:	fc 01       	movw	r30, r24
    5640:	33 83       	std	Z+3, r19	; 0x03
    5642:	22 83       	std	Z+2, r18	; 0x02
    5644:	08 95       	ret

00005646 <LoadData_Device_Configure>:
}

int LoadData_Device_Configure(LoadDataDevice *this)
{
	return 0;
}
    5646:	80 e0       	ldi	r24, 0x00	; 0
    5648:	90 e0       	ldi	r25, 0x00	; 0
    564a:	08 95       	ret

0000564c <LoadData_Device_Execute>:
{
	this->vmt = &LoadDataDevice_vmt;
}

int LoadData_Device_Execute(LoadDataDevice *this)
{
    564c:	cf 93       	push	r28
    564e:	df 93       	push	r29
    5650:	ec 01       	movw	r28, r24
	if( this -> store_device == NULL)
    5652:	8e 81       	ldd	r24, Y+6	; 0x06
    5654:	9f 81       	ldd	r25, Y+7	; 0x07
    5656:	89 2b       	or	r24, r25
    5658:	21 f4       	brne	.+8      	; 0x5662 <LoadData_Device_Execute+0x16>
		printf("NULL store device\n");
    565a:	80 e9       	ldi	r24, 0x90	; 144
    565c:	97 e0       	ldi	r25, 0x07	; 7
    565e:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
	cur_data = this->store_device->vmt->get_CurDataUnit(this->store_device);
    5662:	8e 81       	ldd	r24, Y+6	; 0x06
    5664:	9f 81       	ldd	r25, Y+7	; 0x07
    5666:	dc 01       	movw	r26, r24
    5668:	12 96       	adiw	r26, 0x02	; 2
    566a:	ed 91       	ld	r30, X+
    566c:	fc 91       	ld	r31, X
    566e:	13 97       	sbiw	r26, 0x03	; 3
    5670:	06 80       	ldd	r0, Z+6	; 0x06
    5672:	f7 81       	ldd	r31, Z+7	; 0x07
    5674:	e0 2d       	mov	r30, r0
    5676:	19 95       	eicall
    5678:	90 93 57 08 	sts	0x0857, r25
    567c:	80 93 56 08 	sts	0x0856, r24
	/*TODO : could init -999 here */
	
	
	if( cur_data != NULL)
    5680:	89 2b       	or	r24, r25
    5682:	09 f4       	brne	.+2      	; 0x5686 <LoadData_Device_Execute+0x3a>
    5684:	44 c0       	rjmp	.+136    	; 0x570e <LoadData_Device_Execute+0xc2>
	{
		updateTime((uint32_t)TimeStamp,&cur_time);
    5686:	80 91 5c 08 	lds	r24, 0x085C
    568a:	90 91 5d 08 	lds	r25, 0x085D
    568e:	a0 91 5e 08 	lds	r26, 0x085E
    5692:	b0 91 5f 08 	lds	r27, 0x085F
    5696:	bc 01       	movw	r22, r24
    5698:	cd 01       	movw	r24, r26
    569a:	88 27       	eor	r24, r24
    569c:	99 27       	eor	r25, r25
    569e:	4c e9       	ldi	r20, 0x9C	; 156
    56a0:	5b e0       	ldi	r21, 0x0B	; 11
    56a2:	0e 94 e0 20 	call	0x41c0	; 0x41c0 <updateTime>
		cur_data->data_tm.unix_time = cur_time.unix_time;
    56a6:	80 91 56 08 	lds	r24, 0x0856
    56aa:	90 91 57 08 	lds	r25, 0x0857
    56ae:	40 91 9c 0b 	lds	r20, 0x0B9C
    56b2:	50 91 9d 0b 	lds	r21, 0x0B9D
    56b6:	60 91 9e 0b 	lds	r22, 0x0B9E
    56ba:	70 91 9f 0b 	lds	r23, 0x0B9F
    56be:	fc 01       	movw	r30, r24
    56c0:	40 8b       	std	Z+16, r20	; 0x10
    56c2:	51 8b       	std	Z+17, r21	; 0x11
    56c4:	62 8b       	std	Z+18, r22	; 0x12
    56c6:	73 8b       	std	Z+19, r23	; 0x13
		calcDate( &(cur_data->data_tm));
    56c8:	40 96       	adiw	r24, 0x10	; 16
    56ca:	0e 94 47 1f 	call	0x3e8e	; 0x3e8e <calcDate>
		printf("time debug3 %ld\n",cur_data->data_tm.unix_time);
    56ce:	e0 91 56 08 	lds	r30, 0x0856
    56d2:	f0 91 57 08 	lds	r31, 0x0857
    56d6:	83 89       	ldd	r24, Z+19	; 0x13
    56d8:	8f 93       	push	r24
    56da:	82 89       	ldd	r24, Z+18	; 0x12
    56dc:	8f 93       	push	r24
    56de:	81 89       	ldd	r24, Z+17	; 0x11
    56e0:	8f 93       	push	r24
    56e2:	80 89       	ldd	r24, Z+16	; 0x10
    56e4:	8f 93       	push	r24
    56e6:	82 ea       	ldi	r24, 0xA2	; 162
    56e8:	97 e0       	ldi	r25, 0x07	; 7
    56ea:	9f 93       	push	r25
    56ec:	8f 93       	push	r24
    56ee:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
		TimeStamp = 0;
    56f2:	10 92 5c 08 	sts	0x085C, r1
    56f6:	10 92 5d 08 	sts	0x085D, r1
    56fa:	10 92 5e 08 	sts	0x085E, r1
    56fe:	10 92 5f 08 	sts	0x085F, r1
    5702:	0f 90       	pop	r0
    5704:	0f 90       	pop	r0
    5706:	0f 90       	pop	r0
    5708:	0f 90       	pop	r0
    570a:	0f 90       	pop	r0
    570c:	0f 90       	pop	r0
	}
	return 0;
}
    570e:	80 e0       	ldi	r24, 0x00	; 0
    5710:	90 e0       	ldi	r25, 0x00	; 0
    5712:	df 91       	pop	r29
    5714:	cf 91       	pop	r28
    5716:	08 95       	ret

00005718 <New_LoadData_Device>:
{
	return TYPE_DEVICE;
}

LoadDataDevice* New_LoadData_Device( int infonum, DemoStorageDevice * ptr )
{
    5718:	0f 93       	push	r16
    571a:	1f 93       	push	r17
    571c:	cf 93       	push	r28
    571e:	df 93       	push	r29
    5720:	8c 01       	movw	r16, r24
    5722:	eb 01       	movw	r28, r22
	LoadDataDevice *p = malloc(sizeof(LoadDataDevice));
    5724:	88 e0       	ldi	r24, 0x08	; 8
    5726:	90 e0       	ldi	r25, 0x00	; 0
    5728:	2d d7       	rcall	.+3674   	; 0x6584 <malloc>
    572a:	fc 01       	movw	r30, r24
	p->info = infonum;
    572c:	15 83       	std	Z+5, r17	; 0x05
    572e:	04 83       	std	Z+4, r16	; 0x04
	p->store_device = ptr;
    5730:	d7 83       	std	Z+7, r29	; 0x07
    5732:	c6 83       	std	Z+6, r28	; 0x06
};


void LoadData_Device_VTinit( LoadDataDevice *this )
{
	this->abstract.device_vt = &LoadDataDevice_abstract_vmt;
    5734:	8c e7       	ldi	r24, 0x7C	; 124
    5736:	92 e0       	ldi	r25, 0x02	; 2
    5738:	91 83       	std	Z+1, r25	; 0x01
    573a:	80 83       	st	Z, r24



void LoadData_Device_Tinit(LoadDataDevice *this)
{
	this->vmt = &LoadDataDevice_vmt;
    573c:	86 e7       	ldi	r24, 0x76	; 118
    573e:	92 e0       	ldi	r25, 0x02	; 2
    5740:	93 83       	std	Z+3, r25	; 0x03
    5742:	82 83       	std	Z+2, r24	; 0x02
	p->info = infonum;
	p->store_device = ptr;
	LoadData_Device_VTinit(p);
	LoadData_Device_Tinit(p);
	return p;
}
    5744:	cf 01       	movw	r24, r30
    5746:	df 91       	pop	r29
    5748:	cf 91       	pop	r28
    574a:	1f 91       	pop	r17
    574c:	0f 91       	pop	r16
    574e:	08 95       	ret

00005750 <BMP280_FctnInit>:



void BMP280_FctnInit(BMP280Sensor *this)
{
	this->inherited.vmt = &BMP280_vmt;
    5750:	2c e8       	ldi	r18, 0x8C	; 140
    5752:	32 e0       	ldi	r19, 0x02	; 2
    5754:	fc 01       	movw	r30, r24
    5756:	35 87       	std	Z+13, r19	; 0x0d
    5758:	24 87       	std	Z+12, r18	; 0x0c
    575a:	08 95       	ret

0000575c <BMP280_Configure>:

int BMP280_Configure(BMP280Sensor *this )
{
	// virtual function
	return 0;
}
    575c:	80 e0       	ldi	r24, 0x00	; 0
    575e:	90 e0       	ldi	r25, 0x00	; 0
    5760:	08 95       	ret

00005762 <BMP280_VTinit>:
	printf("BMP280_Error\n");
	return 0;
}
void BMP280_VTinit( BMP280Sensor* this)
{
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
    5762:	24 e8       	ldi	r18, 0x84	; 132
    5764:	32 e0       	ldi	r19, 0x02	; 2
    5766:	fc 01       	movw	r30, r24
    5768:	31 83       	std	Z+1, r19	; 0x01
    576a:	20 83       	st	Z, r18
    576c:	08 95       	ret

0000576e <BMP280_reset>:

int BMP280_reset( BMP280Sensor* this)
{
    // virtual function
    return 0;
}
    576e:	80 e0       	ldi	r24, 0x00	; 0
    5770:	90 e0       	ldi	r25, 0x00	; 0
    5772:	08 95       	ret

00005774 <BMP280_getType>:

int BMP280_getType(BMP280Sensor* this)
{
    return TYPE_SENSOR;
}
    5774:	83 e0       	ldi	r24, 0x03	; 3
    5776:	90 e0       	ldi	r25, 0x00	; 0
    5778:	08 95       	ret

0000577a <BMP280_Error>:
	return 0;
}

int BMP280_Error(BMP280Sensor *this )
{
	printf("BMP280_Error\n");
    577a:	83 eb       	ldi	r24, 0xB3	; 179
    577c:	97 e0       	ldi	r25, 0x07	; 7
    577e:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
	return 0;
}
    5782:	80 e0       	ldi	r24, 0x00	; 0
    5784:	90 e0       	ldi	r25, 0x00	; 0
    5786:	08 95       	ret

00005788 <BMP280_init>:
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
}

int BMP280_init( BMP280Sensor* this)
{
    printf("BMP280 Sensor Init\n");
    5788:	80 ec       	ldi	r24, 0xC0	; 192
    578a:	97 e0       	ldi	r25, 0x07	; 7
    578c:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
    return 0;
}
    5790:	80 e0       	ldi	r24, 0x00	; 0
    5792:	90 e0       	ldi	r25, 0x00	; 0
    5794:	08 95       	ret

00005796 <BMP280_Request>:
	// virtual function
	return 0;
}

int BMP280_Request(BMP280Sensor *this )
{
    5796:	cf 93       	push	r28
    5798:	df 93       	push	r29
	printf("BMP280 Request\n");
    579a:	83 ed       	ldi	r24, 0xD3	; 211
    579c:	97 e0       	ldi	r25, 0x07	; 7
    579e:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
	int Delay = BMP280_StartMeasurment();
    57a2:	06 d9       	rcall	.-3572   	; 0x49b0 <BMP280_StartMeasurment>
    57a4:	c8 2f       	mov	r28, r24
    57a6:	d0 e0       	ldi	r29, 0x00	; 0
	printf("\tWait for %d ms\n",Delay);
    57a8:	1f 92       	push	r1
    57aa:	8f 93       	push	r24
    57ac:	82 ee       	ldi	r24, 0xE2	; 226
    57ae:	97 e0       	ldi	r25, 0x07	; 7
    57b0:	9f 93       	push	r25
    57b2:	8f 93       	push	r24
    57b4:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
	if( Delay == 0 )
    57b8:	0f 90       	pop	r0
    57ba:	0f 90       	pop	r0
    57bc:	0f 90       	pop	r0
    57be:	0f 90       	pop	r0
    57c0:	20 97       	sbiw	r28, 0x00	; 0
    57c2:	19 f0       	breq	.+6      	; 0x57ca <BMP280_Request+0x34>
		return 0;
	else
		return ( 1 + Delay );
    57c4:	ce 01       	movw	r24, r28
    57c6:	01 96       	adiw	r24, 0x01	; 1
    57c8:	02 c0       	rjmp	.+4      	; 0x57ce <BMP280_Request+0x38>
{
	printf("BMP280 Request\n");
	int Delay = BMP280_StartMeasurment();
	printf("\tWait for %d ms\n",Delay);
	if( Delay == 0 )
		return 0;
    57ca:	80 e0       	ldi	r24, 0x00	; 0
    57cc:	90 e0       	ldi	r25, 0x00	; 0
	else
		return ( 1 + Delay );
}
    57ce:	df 91       	pop	r29
    57d0:	cf 91       	pop	r28
    57d2:	08 95       	ret

000057d4 <BMP280_Collect>:

int BMP280_Collect(BMP280Sensor *this )
{
    57d4:	ef 92       	push	r14
    57d6:	ff 92       	push	r15
    57d8:	0f 93       	push	r16
    57da:	1f 93       	push	r17
    57dc:	cf 93       	push	r28
    57de:	df 93       	push	r29
    57e0:	cd b7       	in	r28, 0x3d	; 61
    57e2:	de b7       	in	r29, 0x3e	; 62
    57e4:	2c 97       	sbiw	r28, 0x0c	; 12
    57e6:	0f b6       	in	r0, 0x3f	; 63
    57e8:	f8 94       	cli
    57ea:	de bf       	out	0x3e, r29	; 62
    57ec:	0f be       	out	0x3f, r0	; 63
    57ee:	cd bf       	out	0x3d, r28	; 61
    57f0:	8c 01       	movw	r16, r24
	printf("BMP280 Collect\n");
    57f2:	83 ef       	ldi	r24, 0xF3	; 243
    57f4:	97 e0       	ldi	r25, 0x07	; 7
    57f6:	0e 94 2d 35 	call	0x6a5a	; 0x6a5a <puts>
	// double BMP280Data[3] = {-999,-999,-999};
	double T, P, H;
	BMP280_GetTPH(&T,&P,&H);
    57fa:	ae 01       	movw	r20, r28
    57fc:	47 5f       	subi	r20, 0xF7	; 247
    57fe:	5f 4f       	sbci	r21, 0xFF	; 255
    5800:	be 01       	movw	r22, r28
    5802:	6b 5f       	subi	r22, 0xFB	; 251
    5804:	7f 4f       	sbci	r23, 0xFF	; 255
    5806:	ce 01       	movw	r24, r28
    5808:	01 96       	adiw	r24, 0x01	; 1
    580a:	45 dd       	rcall	.-1398   	; 0x5296 <BMP280_GetTPH>
	// BMP280_GetTPH(BMP280Data,BMP280Data+1,BMP280Data+2);
	printf("\tTemperature = %.3f\n\tPressure = %.3f\n\tHumidity = %.3f\n",T,P,H);
    580c:	8c 85       	ldd	r24, Y+12	; 0x0c
    580e:	8f 93       	push	r24
    5810:	8b 85       	ldd	r24, Y+11	; 0x0b
    5812:	8f 93       	push	r24
    5814:	8a 85       	ldd	r24, Y+10	; 0x0a
    5816:	8f 93       	push	r24
    5818:	89 85       	ldd	r24, Y+9	; 0x09
    581a:	8f 93       	push	r24
    581c:	88 85       	ldd	r24, Y+8	; 0x08
    581e:	8f 93       	push	r24
    5820:	8f 81       	ldd	r24, Y+7	; 0x07
    5822:	8f 93       	push	r24
    5824:	8e 81       	ldd	r24, Y+6	; 0x06
    5826:	8f 93       	push	r24
    5828:	8d 81       	ldd	r24, Y+5	; 0x05
    582a:	8f 93       	push	r24
    582c:	8c 81       	ldd	r24, Y+4	; 0x04
    582e:	8f 93       	push	r24
    5830:	8b 81       	ldd	r24, Y+3	; 0x03
    5832:	8f 93       	push	r24
    5834:	8a 81       	ldd	r24, Y+2	; 0x02
    5836:	8f 93       	push	r24
    5838:	89 81       	ldd	r24, Y+1	; 0x01
    583a:	8f 93       	push	r24
    583c:	82 e0       	ldi	r24, 0x02	; 2
    583e:	98 e0       	ldi	r25, 0x08	; 8
    5840:	9f 93       	push	r25
    5842:	8f 93       	push	r24
    5844:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
	printf("\tgetStart = %d\n\tgetEnd = %d\n",this->inherited.getStartNum( &this->inherited ),this->inherited.getEndNum( &this->inherited ));
    5848:	d8 01       	movw	r26, r16
    584a:	1a 96       	adiw	r26, 0x0a	; 10
    584c:	ed 91       	ld	r30, X+
    584e:	fc 91       	ld	r31, X
    5850:	1b 97       	sbiw	r26, 0x0b	; 11
    5852:	c8 01       	movw	r24, r16
    5854:	19 95       	eicall
    5856:	f8 2e       	mov	r15, r24
    5858:	e9 2e       	mov	r14, r25
    585a:	d8 01       	movw	r26, r16
    585c:	18 96       	adiw	r26, 0x08	; 8
    585e:	ed 91       	ld	r30, X+
    5860:	fc 91       	ld	r31, X
    5862:	19 97       	sbiw	r26, 0x09	; 9
    5864:	c8 01       	movw	r24, r16
    5866:	19 95       	eicall
    5868:	ef 92       	push	r14
    586a:	ff 92       	push	r15
    586c:	9f 93       	push	r25
    586e:	8f 93       	push	r24
    5870:	89 e3       	ldi	r24, 0x39	; 57
    5872:	98 e0       	ldi	r25, 0x08	; 8
    5874:	9f 93       	push	r25
    5876:	8f 93       	push	r24
    5878:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
	for( int i = this->inherited.getStartNum(); i < this->inherited.getEndNum(); ++i )
	{
		cur_data->data[i] = BMP280Data[j++];
	}
	*/
	cur_data->data[0] = T;
    587c:	e0 91 56 08 	lds	r30, 0x0856
    5880:	f0 91 57 08 	lds	r31, 0x0857
    5884:	89 81       	ldd	r24, Y+1	; 0x01
    5886:	9a 81       	ldd	r25, Y+2	; 0x02
    5888:	ab 81       	ldd	r26, Y+3	; 0x03
    588a:	bc 81       	ldd	r27, Y+4	; 0x04
    588c:	80 83       	st	Z, r24
    588e:	91 83       	std	Z+1, r25	; 0x01
    5890:	a2 83       	std	Z+2, r26	; 0x02
    5892:	b3 83       	std	Z+3, r27	; 0x03
	cur_data->data[1] = P; 
    5894:	e0 91 56 08 	lds	r30, 0x0856
    5898:	f0 91 57 08 	lds	r31, 0x0857
    589c:	8d 81       	ldd	r24, Y+5	; 0x05
    589e:	9e 81       	ldd	r25, Y+6	; 0x06
    58a0:	af 81       	ldd	r26, Y+7	; 0x07
    58a2:	b8 85       	ldd	r27, Y+8	; 0x08
    58a4:	84 83       	std	Z+4, r24	; 0x04
    58a6:	95 83       	std	Z+5, r25	; 0x05
    58a8:	a6 83       	std	Z+6, r26	; 0x06
    58aa:	b7 83       	std	Z+7, r27	; 0x07
	return 0;
    58ac:	0f b6       	in	r0, 0x3f	; 63
    58ae:	f8 94       	cli
    58b0:	de bf       	out	0x3e, r29	; 62
    58b2:	0f be       	out	0x3f, r0	; 63
    58b4:	cd bf       	out	0x3d, r28	; 61
}
    58b6:	80 e0       	ldi	r24, 0x00	; 0
    58b8:	90 e0       	ldi	r25, 0x00	; 0
    58ba:	2c 96       	adiw	r28, 0x0c	; 12
    58bc:	0f b6       	in	r0, 0x3f	; 63
    58be:	f8 94       	cli
    58c0:	de bf       	out	0x3e, r29	; 62
    58c2:	0f be       	out	0x3f, r0	; 63
    58c4:	cd bf       	out	0x3d, r28	; 61
    58c6:	df 91       	pop	r29
    58c8:	cf 91       	pop	r28
    58ca:	1f 91       	pop	r17
    58cc:	0f 91       	pop	r16
    58ce:	ff 90       	pop	r15
    58d0:	ef 90       	pop	r14
    58d2:	08 95       	ret

000058d4 <New_BMP280_Sensor>:
    return TYPE_SENSOR;
}


BMP280Sensor* New_BMP280_Sensor( int num, int NumData )
{
    58d4:	ef 92       	push	r14
    58d6:	ff 92       	push	r15
    58d8:	0f 93       	push	r16
    58da:	1f 93       	push	r17
    58dc:	cf 93       	push	r28
    58de:	df 93       	push	r29
    58e0:	7c 01       	movw	r14, r24
    58e2:	8b 01       	movw	r16, r22
	BMP280Sensor *p = malloc(sizeof(BMP280Sensor));
    58e4:	8e e0       	ldi	r24, 0x0E	; 14
    58e6:	90 e0       	ldi	r25, 0x00	; 0
    58e8:	4d d6       	rcall	.+3226   	; 0x6584 <malloc>
    58ea:	ec 01       	movw	r28, r24
	p->inherited.getStartNum = fctn_getStartNum;
    58ec:	8e e1       	ldi	r24, 0x1E	; 30
    58ee:	91 e2       	ldi	r25, 0x21	; 33
    58f0:	99 87       	std	Y+9, r25	; 0x09
    58f2:	88 87       	std	Y+8, r24	; 0x08
	p->inherited.getEndNum = fctn_getEndNum;
    58f4:	82 e2       	ldi	r24, 0x22	; 34
    58f6:	91 e2       	ldi	r25, 0x21	; 33
    58f8:	9b 87       	std	Y+11, r25	; 0x0b
    58fa:	8a 87       	std	Y+10, r24	; 0x0a
	printf("BMP280_Error\n");
	return 0;
}
void BMP280_VTinit( BMP280Sensor* this)
{
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
    58fc:	84 e8       	ldi	r24, 0x84	; 132
    58fe:	92 e0       	ldi	r25, 0x02	; 2
    5900:	99 83       	std	Y+1, r25	; 0x01
    5902:	88 83       	st	Y, r24



void BMP280_FctnInit(BMP280Sensor *this)
{
	this->inherited.vmt = &BMP280_vmt;
    5904:	8c e8       	ldi	r24, 0x8C	; 140
    5906:	92 e0       	ldi	r25, 0x02	; 2
    5908:	9d 87       	std	Y+13, r25	; 0x0d
    590a:	8c 87       	std	Y+12, r24	; 0x0c
	p->inherited.getEndNum = fctn_getEndNum;
    BMP280_VTinit( p );
    BMP280_FctnInit( p );
	
	
	p->inherited.test_num = num;
    590c:	fb 82       	std	Y+3, r15	; 0x03
    590e:	ea 82       	std	Y+2, r14	; 0x02
	p->inherited.NumOfData = NumData;
    5910:	1f 83       	std	Y+7, r17	; 0x07
    5912:	0e 83       	std	Y+6, r16	; 0x06
	p->inherited.StartNum = SensorDataCount;
    5914:	80 91 7a 0d 	lds	r24, 0x0D7A
    5918:	90 91 7b 0d 	lds	r25, 0x0D7B
    591c:	9d 83       	std	Y+5, r25	; 0x05
    591e:	8c 83       	std	Y+4, r24	; 0x04
	SensorDataCount += NumData;
    5920:	b8 01       	movw	r22, r16
    5922:	68 0f       	add	r22, r24
    5924:	79 1f       	adc	r23, r25
    5926:	70 93 7b 0d 	sts	0x0D7B, r23
    592a:	60 93 7a 0d 	sts	0x0D7A, r22
	printf("SensorDataCount %d\n",SensorDataCount);
    592e:	7f 93       	push	r23
    5930:	6f 93       	push	r22
    5932:	84 e7       	ldi	r24, 0x74	; 116
    5934:	94 e0       	ldi	r25, 0x04	; 4
    5936:	9f 93       	push	r25
    5938:	8f 93       	push	r24
    593a:	0e 94 15 35 	call	0x6a2a	; 0x6a2a <printf>
	//printf("get start %d end %d\n",p->inherited.getStartNum(& (p->inherited) ),p->inherited.getEndNum(& (p->inherited)));
	
	return p;
    593e:	0f 90       	pop	r0
    5940:	0f 90       	pop	r0
    5942:	0f 90       	pop	r0
    5944:	0f 90       	pop	r0
    5946:	ce 01       	movw	r24, r28
    5948:	df 91       	pop	r29
    594a:	cf 91       	pop	r28
    594c:	1f 91       	pop	r17
    594e:	0f 91       	pop	r16
    5950:	ff 90       	pop	r15
    5952:	ef 90       	pop	r14
    5954:	08 95       	ret

00005956 <__subsf3>:
    5956:	50 58       	subi	r21, 0x80	; 128

00005958 <__addsf3>:
    5958:	bb 27       	eor	r27, r27
    595a:	aa 27       	eor	r26, r26
    595c:	0e d0       	rcall	.+28     	; 0x597a <__addsf3x>
    595e:	75 c1       	rjmp	.+746    	; 0x5c4a <__fp_round>
    5960:	66 d1       	rcall	.+716    	; 0x5c2e <__fp_pscA>
    5962:	30 f0       	brcs	.+12     	; 0x5970 <__addsf3+0x18>
    5964:	6b d1       	rcall	.+726    	; 0x5c3c <__fp_pscB>
    5966:	20 f0       	brcs	.+8      	; 0x5970 <__addsf3+0x18>
    5968:	31 f4       	brne	.+12     	; 0x5976 <__addsf3+0x1e>
    596a:	9f 3f       	cpi	r25, 0xFF	; 255
    596c:	11 f4       	brne	.+4      	; 0x5972 <__addsf3+0x1a>
    596e:	1e f4       	brtc	.+6      	; 0x5976 <__addsf3+0x1e>
    5970:	5b c1       	rjmp	.+694    	; 0x5c28 <__fp_nan>
    5972:	0e f4       	brtc	.+2      	; 0x5976 <__addsf3+0x1e>
    5974:	e0 95       	com	r30
    5976:	e7 fb       	bst	r30, 7
    5978:	51 c1       	rjmp	.+674    	; 0x5c1c <__fp_inf>

0000597a <__addsf3x>:
    597a:	e9 2f       	mov	r30, r25
    597c:	77 d1       	rcall	.+750    	; 0x5c6c <__fp_split3>
    597e:	80 f3       	brcs	.-32     	; 0x5960 <__addsf3+0x8>
    5980:	ba 17       	cp	r27, r26
    5982:	62 07       	cpc	r22, r18
    5984:	73 07       	cpc	r23, r19
    5986:	84 07       	cpc	r24, r20
    5988:	95 07       	cpc	r25, r21
    598a:	18 f0       	brcs	.+6      	; 0x5992 <__addsf3x+0x18>
    598c:	71 f4       	brne	.+28     	; 0x59aa <__addsf3x+0x30>
    598e:	9e f5       	brtc	.+102    	; 0x59f6 <__addsf3x+0x7c>
    5990:	8f c1       	rjmp	.+798    	; 0x5cb0 <__fp_zero>
    5992:	0e f4       	brtc	.+2      	; 0x5996 <__addsf3x+0x1c>
    5994:	e0 95       	com	r30
    5996:	0b 2e       	mov	r0, r27
    5998:	ba 2f       	mov	r27, r26
    599a:	a0 2d       	mov	r26, r0
    599c:	0b 01       	movw	r0, r22
    599e:	b9 01       	movw	r22, r18
    59a0:	90 01       	movw	r18, r0
    59a2:	0c 01       	movw	r0, r24
    59a4:	ca 01       	movw	r24, r20
    59a6:	a0 01       	movw	r20, r0
    59a8:	11 24       	eor	r1, r1
    59aa:	ff 27       	eor	r31, r31
    59ac:	59 1b       	sub	r21, r25
    59ae:	99 f0       	breq	.+38     	; 0x59d6 <__addsf3x+0x5c>
    59b0:	59 3f       	cpi	r21, 0xF9	; 249
    59b2:	50 f4       	brcc	.+20     	; 0x59c8 <__addsf3x+0x4e>
    59b4:	50 3e       	cpi	r21, 0xE0	; 224
    59b6:	68 f1       	brcs	.+90     	; 0x5a12 <__addsf3x+0x98>
    59b8:	1a 16       	cp	r1, r26
    59ba:	f0 40       	sbci	r31, 0x00	; 0
    59bc:	a2 2f       	mov	r26, r18
    59be:	23 2f       	mov	r18, r19
    59c0:	34 2f       	mov	r19, r20
    59c2:	44 27       	eor	r20, r20
    59c4:	58 5f       	subi	r21, 0xF8	; 248
    59c6:	f3 cf       	rjmp	.-26     	; 0x59ae <__addsf3x+0x34>
    59c8:	46 95       	lsr	r20
    59ca:	37 95       	ror	r19
    59cc:	27 95       	ror	r18
    59ce:	a7 95       	ror	r26
    59d0:	f0 40       	sbci	r31, 0x00	; 0
    59d2:	53 95       	inc	r21
    59d4:	c9 f7       	brne	.-14     	; 0x59c8 <__addsf3x+0x4e>
    59d6:	7e f4       	brtc	.+30     	; 0x59f6 <__addsf3x+0x7c>
    59d8:	1f 16       	cp	r1, r31
    59da:	ba 0b       	sbc	r27, r26
    59dc:	62 0b       	sbc	r22, r18
    59de:	73 0b       	sbc	r23, r19
    59e0:	84 0b       	sbc	r24, r20
    59e2:	ba f0       	brmi	.+46     	; 0x5a12 <__addsf3x+0x98>
    59e4:	91 50       	subi	r25, 0x01	; 1
    59e6:	a1 f0       	breq	.+40     	; 0x5a10 <__addsf3x+0x96>
    59e8:	ff 0f       	add	r31, r31
    59ea:	bb 1f       	adc	r27, r27
    59ec:	66 1f       	adc	r22, r22
    59ee:	77 1f       	adc	r23, r23
    59f0:	88 1f       	adc	r24, r24
    59f2:	c2 f7       	brpl	.-16     	; 0x59e4 <__addsf3x+0x6a>
    59f4:	0e c0       	rjmp	.+28     	; 0x5a12 <__addsf3x+0x98>
    59f6:	ba 0f       	add	r27, r26
    59f8:	62 1f       	adc	r22, r18
    59fa:	73 1f       	adc	r23, r19
    59fc:	84 1f       	adc	r24, r20
    59fe:	48 f4       	brcc	.+18     	; 0x5a12 <__addsf3x+0x98>
    5a00:	87 95       	ror	r24
    5a02:	77 95       	ror	r23
    5a04:	67 95       	ror	r22
    5a06:	b7 95       	ror	r27
    5a08:	f7 95       	ror	r31
    5a0a:	9e 3f       	cpi	r25, 0xFE	; 254
    5a0c:	08 f0       	brcs	.+2      	; 0x5a10 <__addsf3x+0x96>
    5a0e:	b3 cf       	rjmp	.-154    	; 0x5976 <__addsf3+0x1e>
    5a10:	93 95       	inc	r25
    5a12:	88 0f       	add	r24, r24
    5a14:	08 f0       	brcs	.+2      	; 0x5a18 <__addsf3x+0x9e>
    5a16:	99 27       	eor	r25, r25
    5a18:	ee 0f       	add	r30, r30
    5a1a:	97 95       	ror	r25
    5a1c:	87 95       	ror	r24
    5a1e:	08 95       	ret

00005a20 <__cmpsf2>:
    5a20:	d9 d0       	rcall	.+434    	; 0x5bd4 <__fp_cmp>
    5a22:	08 f4       	brcc	.+2      	; 0x5a26 <__cmpsf2+0x6>
    5a24:	81 e0       	ldi	r24, 0x01	; 1
    5a26:	08 95       	ret

00005a28 <__divsf3>:
    5a28:	0c d0       	rcall	.+24     	; 0x5a42 <__divsf3x>
    5a2a:	0f c1       	rjmp	.+542    	; 0x5c4a <__fp_round>
    5a2c:	07 d1       	rcall	.+526    	; 0x5c3c <__fp_pscB>
    5a2e:	40 f0       	brcs	.+16     	; 0x5a40 <__divsf3+0x18>
    5a30:	fe d0       	rcall	.+508    	; 0x5c2e <__fp_pscA>
    5a32:	30 f0       	brcs	.+12     	; 0x5a40 <__divsf3+0x18>
    5a34:	21 f4       	brne	.+8      	; 0x5a3e <__divsf3+0x16>
    5a36:	5f 3f       	cpi	r21, 0xFF	; 255
    5a38:	19 f0       	breq	.+6      	; 0x5a40 <__divsf3+0x18>
    5a3a:	f0 c0       	rjmp	.+480    	; 0x5c1c <__fp_inf>
    5a3c:	51 11       	cpse	r21, r1
    5a3e:	39 c1       	rjmp	.+626    	; 0x5cb2 <__fp_szero>
    5a40:	f3 c0       	rjmp	.+486    	; 0x5c28 <__fp_nan>

00005a42 <__divsf3x>:
    5a42:	14 d1       	rcall	.+552    	; 0x5c6c <__fp_split3>
    5a44:	98 f3       	brcs	.-26     	; 0x5a2c <__divsf3+0x4>

00005a46 <__divsf3_pse>:
    5a46:	99 23       	and	r25, r25
    5a48:	c9 f3       	breq	.-14     	; 0x5a3c <__divsf3+0x14>
    5a4a:	55 23       	and	r21, r21
    5a4c:	b1 f3       	breq	.-20     	; 0x5a3a <__divsf3+0x12>
    5a4e:	95 1b       	sub	r25, r21
    5a50:	55 0b       	sbc	r21, r21
    5a52:	bb 27       	eor	r27, r27
    5a54:	aa 27       	eor	r26, r26
    5a56:	62 17       	cp	r22, r18
    5a58:	73 07       	cpc	r23, r19
    5a5a:	84 07       	cpc	r24, r20
    5a5c:	38 f0       	brcs	.+14     	; 0x5a6c <__divsf3_pse+0x26>
    5a5e:	9f 5f       	subi	r25, 0xFF	; 255
    5a60:	5f 4f       	sbci	r21, 0xFF	; 255
    5a62:	22 0f       	add	r18, r18
    5a64:	33 1f       	adc	r19, r19
    5a66:	44 1f       	adc	r20, r20
    5a68:	aa 1f       	adc	r26, r26
    5a6a:	a9 f3       	breq	.-22     	; 0x5a56 <__divsf3_pse+0x10>
    5a6c:	33 d0       	rcall	.+102    	; 0x5ad4 <__divsf3_pse+0x8e>
    5a6e:	0e 2e       	mov	r0, r30
    5a70:	3a f0       	brmi	.+14     	; 0x5a80 <__divsf3_pse+0x3a>
    5a72:	e0 e8       	ldi	r30, 0x80	; 128
    5a74:	30 d0       	rcall	.+96     	; 0x5ad6 <__divsf3_pse+0x90>
    5a76:	91 50       	subi	r25, 0x01	; 1
    5a78:	50 40       	sbci	r21, 0x00	; 0
    5a7a:	e6 95       	lsr	r30
    5a7c:	00 1c       	adc	r0, r0
    5a7e:	ca f7       	brpl	.-14     	; 0x5a72 <__divsf3_pse+0x2c>
    5a80:	29 d0       	rcall	.+82     	; 0x5ad4 <__divsf3_pse+0x8e>
    5a82:	fe 2f       	mov	r31, r30
    5a84:	27 d0       	rcall	.+78     	; 0x5ad4 <__divsf3_pse+0x8e>
    5a86:	66 0f       	add	r22, r22
    5a88:	77 1f       	adc	r23, r23
    5a8a:	88 1f       	adc	r24, r24
    5a8c:	bb 1f       	adc	r27, r27
    5a8e:	26 17       	cp	r18, r22
    5a90:	37 07       	cpc	r19, r23
    5a92:	48 07       	cpc	r20, r24
    5a94:	ab 07       	cpc	r26, r27
    5a96:	b0 e8       	ldi	r27, 0x80	; 128
    5a98:	09 f0       	breq	.+2      	; 0x5a9c <__divsf3_pse+0x56>
    5a9a:	bb 0b       	sbc	r27, r27
    5a9c:	80 2d       	mov	r24, r0
    5a9e:	bf 01       	movw	r22, r30
    5aa0:	ff 27       	eor	r31, r31
    5aa2:	93 58       	subi	r25, 0x83	; 131
    5aa4:	5f 4f       	sbci	r21, 0xFF	; 255
    5aa6:	2a f0       	brmi	.+10     	; 0x5ab2 <__divsf3_pse+0x6c>
    5aa8:	9e 3f       	cpi	r25, 0xFE	; 254
    5aaa:	51 05       	cpc	r21, r1
    5aac:	68 f0       	brcs	.+26     	; 0x5ac8 <__divsf3_pse+0x82>
    5aae:	b6 c0       	rjmp	.+364    	; 0x5c1c <__fp_inf>
    5ab0:	00 c1       	rjmp	.+512    	; 0x5cb2 <__fp_szero>
    5ab2:	5f 3f       	cpi	r21, 0xFF	; 255
    5ab4:	ec f3       	brlt	.-6      	; 0x5ab0 <__divsf3_pse+0x6a>
    5ab6:	98 3e       	cpi	r25, 0xE8	; 232
    5ab8:	dc f3       	brlt	.-10     	; 0x5ab0 <__divsf3_pse+0x6a>
    5aba:	86 95       	lsr	r24
    5abc:	77 95       	ror	r23
    5abe:	67 95       	ror	r22
    5ac0:	b7 95       	ror	r27
    5ac2:	f7 95       	ror	r31
    5ac4:	9f 5f       	subi	r25, 0xFF	; 255
    5ac6:	c9 f7       	brne	.-14     	; 0x5aba <__divsf3_pse+0x74>
    5ac8:	88 0f       	add	r24, r24
    5aca:	91 1d       	adc	r25, r1
    5acc:	96 95       	lsr	r25
    5ace:	87 95       	ror	r24
    5ad0:	97 f9       	bld	r25, 7
    5ad2:	08 95       	ret
    5ad4:	e1 e0       	ldi	r30, 0x01	; 1
    5ad6:	66 0f       	add	r22, r22
    5ad8:	77 1f       	adc	r23, r23
    5ada:	88 1f       	adc	r24, r24
    5adc:	bb 1f       	adc	r27, r27
    5ade:	62 17       	cp	r22, r18
    5ae0:	73 07       	cpc	r23, r19
    5ae2:	84 07       	cpc	r24, r20
    5ae4:	ba 07       	cpc	r27, r26
    5ae6:	20 f0       	brcs	.+8      	; 0x5af0 <__divsf3_pse+0xaa>
    5ae8:	62 1b       	sub	r22, r18
    5aea:	73 0b       	sbc	r23, r19
    5aec:	84 0b       	sbc	r24, r20
    5aee:	ba 0b       	sbc	r27, r26
    5af0:	ee 1f       	adc	r30, r30
    5af2:	88 f7       	brcc	.-30     	; 0x5ad6 <__divsf3_pse+0x90>
    5af4:	e0 95       	com	r30
    5af6:	08 95       	ret

00005af8 <__fixsfsi>:
    5af8:	04 d0       	rcall	.+8      	; 0x5b02 <__fixunssfsi>
    5afa:	68 94       	set
    5afc:	b1 11       	cpse	r27, r1
    5afe:	d9 c0       	rjmp	.+434    	; 0x5cb2 <__fp_szero>
    5b00:	08 95       	ret

00005b02 <__fixunssfsi>:
    5b02:	bc d0       	rcall	.+376    	; 0x5c7c <__fp_splitA>
    5b04:	88 f0       	brcs	.+34     	; 0x5b28 <__fixunssfsi+0x26>
    5b06:	9f 57       	subi	r25, 0x7F	; 127
    5b08:	90 f0       	brcs	.+36     	; 0x5b2e <__fixunssfsi+0x2c>
    5b0a:	b9 2f       	mov	r27, r25
    5b0c:	99 27       	eor	r25, r25
    5b0e:	b7 51       	subi	r27, 0x17	; 23
    5b10:	a0 f0       	brcs	.+40     	; 0x5b3a <__fixunssfsi+0x38>
    5b12:	d1 f0       	breq	.+52     	; 0x5b48 <__fixunssfsi+0x46>
    5b14:	66 0f       	add	r22, r22
    5b16:	77 1f       	adc	r23, r23
    5b18:	88 1f       	adc	r24, r24
    5b1a:	99 1f       	adc	r25, r25
    5b1c:	1a f0       	brmi	.+6      	; 0x5b24 <__fixunssfsi+0x22>
    5b1e:	ba 95       	dec	r27
    5b20:	c9 f7       	brne	.-14     	; 0x5b14 <__fixunssfsi+0x12>
    5b22:	12 c0       	rjmp	.+36     	; 0x5b48 <__fixunssfsi+0x46>
    5b24:	b1 30       	cpi	r27, 0x01	; 1
    5b26:	81 f0       	breq	.+32     	; 0x5b48 <__fixunssfsi+0x46>
    5b28:	c3 d0       	rcall	.+390    	; 0x5cb0 <__fp_zero>
    5b2a:	b1 e0       	ldi	r27, 0x01	; 1
    5b2c:	08 95       	ret
    5b2e:	c0 c0       	rjmp	.+384    	; 0x5cb0 <__fp_zero>
    5b30:	67 2f       	mov	r22, r23
    5b32:	78 2f       	mov	r23, r24
    5b34:	88 27       	eor	r24, r24
    5b36:	b8 5f       	subi	r27, 0xF8	; 248
    5b38:	39 f0       	breq	.+14     	; 0x5b48 <__fixunssfsi+0x46>
    5b3a:	b9 3f       	cpi	r27, 0xF9	; 249
    5b3c:	cc f3       	brlt	.-14     	; 0x5b30 <__fixunssfsi+0x2e>
    5b3e:	86 95       	lsr	r24
    5b40:	77 95       	ror	r23
    5b42:	67 95       	ror	r22
    5b44:	b3 95       	inc	r27
    5b46:	d9 f7       	brne	.-10     	; 0x5b3e <__fixunssfsi+0x3c>
    5b48:	3e f4       	brtc	.+14     	; 0x5b58 <__fixunssfsi+0x56>
    5b4a:	90 95       	com	r25
    5b4c:	80 95       	com	r24
    5b4e:	70 95       	com	r23
    5b50:	61 95       	neg	r22
    5b52:	7f 4f       	sbci	r23, 0xFF	; 255
    5b54:	8f 4f       	sbci	r24, 0xFF	; 255
    5b56:	9f 4f       	sbci	r25, 0xFF	; 255
    5b58:	08 95       	ret

00005b5a <__floatunsisf>:
    5b5a:	e8 94       	clt
    5b5c:	09 c0       	rjmp	.+18     	; 0x5b70 <__floatsisf+0x12>

00005b5e <__floatsisf>:
    5b5e:	97 fb       	bst	r25, 7
    5b60:	3e f4       	brtc	.+14     	; 0x5b70 <__floatsisf+0x12>
    5b62:	90 95       	com	r25
    5b64:	80 95       	com	r24
    5b66:	70 95       	com	r23
    5b68:	61 95       	neg	r22
    5b6a:	7f 4f       	sbci	r23, 0xFF	; 255
    5b6c:	8f 4f       	sbci	r24, 0xFF	; 255
    5b6e:	9f 4f       	sbci	r25, 0xFF	; 255
    5b70:	99 23       	and	r25, r25
    5b72:	a9 f0       	breq	.+42     	; 0x5b9e <__floatsisf+0x40>
    5b74:	f9 2f       	mov	r31, r25
    5b76:	96 e9       	ldi	r25, 0x96	; 150
    5b78:	bb 27       	eor	r27, r27
    5b7a:	93 95       	inc	r25
    5b7c:	f6 95       	lsr	r31
    5b7e:	87 95       	ror	r24
    5b80:	77 95       	ror	r23
    5b82:	67 95       	ror	r22
    5b84:	b7 95       	ror	r27
    5b86:	f1 11       	cpse	r31, r1
    5b88:	f8 cf       	rjmp	.-16     	; 0x5b7a <__floatsisf+0x1c>
    5b8a:	fa f4       	brpl	.+62     	; 0x5bca <__floatsisf+0x6c>
    5b8c:	bb 0f       	add	r27, r27
    5b8e:	11 f4       	brne	.+4      	; 0x5b94 <__floatsisf+0x36>
    5b90:	60 ff       	sbrs	r22, 0
    5b92:	1b c0       	rjmp	.+54     	; 0x5bca <__floatsisf+0x6c>
    5b94:	6f 5f       	subi	r22, 0xFF	; 255
    5b96:	7f 4f       	sbci	r23, 0xFF	; 255
    5b98:	8f 4f       	sbci	r24, 0xFF	; 255
    5b9a:	9f 4f       	sbci	r25, 0xFF	; 255
    5b9c:	16 c0       	rjmp	.+44     	; 0x5bca <__floatsisf+0x6c>
    5b9e:	88 23       	and	r24, r24
    5ba0:	11 f0       	breq	.+4      	; 0x5ba6 <__floatsisf+0x48>
    5ba2:	96 e9       	ldi	r25, 0x96	; 150
    5ba4:	11 c0       	rjmp	.+34     	; 0x5bc8 <__floatsisf+0x6a>
    5ba6:	77 23       	and	r23, r23
    5ba8:	21 f0       	breq	.+8      	; 0x5bb2 <__floatsisf+0x54>
    5baa:	9e e8       	ldi	r25, 0x8E	; 142
    5bac:	87 2f       	mov	r24, r23
    5bae:	76 2f       	mov	r23, r22
    5bb0:	05 c0       	rjmp	.+10     	; 0x5bbc <__floatsisf+0x5e>
    5bb2:	66 23       	and	r22, r22
    5bb4:	71 f0       	breq	.+28     	; 0x5bd2 <__floatsisf+0x74>
    5bb6:	96 e8       	ldi	r25, 0x86	; 134
    5bb8:	86 2f       	mov	r24, r22
    5bba:	70 e0       	ldi	r23, 0x00	; 0
    5bbc:	60 e0       	ldi	r22, 0x00	; 0
    5bbe:	2a f0       	brmi	.+10     	; 0x5bca <__floatsisf+0x6c>
    5bc0:	9a 95       	dec	r25
    5bc2:	66 0f       	add	r22, r22
    5bc4:	77 1f       	adc	r23, r23
    5bc6:	88 1f       	adc	r24, r24
    5bc8:	da f7       	brpl	.-10     	; 0x5bc0 <__floatsisf+0x62>
    5bca:	88 0f       	add	r24, r24
    5bcc:	96 95       	lsr	r25
    5bce:	87 95       	ror	r24
    5bd0:	97 f9       	bld	r25, 7
    5bd2:	08 95       	ret

00005bd4 <__fp_cmp>:
    5bd4:	99 0f       	add	r25, r25
    5bd6:	00 08       	sbc	r0, r0
    5bd8:	55 0f       	add	r21, r21
    5bda:	aa 0b       	sbc	r26, r26
    5bdc:	e0 e8       	ldi	r30, 0x80	; 128
    5bde:	fe ef       	ldi	r31, 0xFE	; 254
    5be0:	16 16       	cp	r1, r22
    5be2:	17 06       	cpc	r1, r23
    5be4:	e8 07       	cpc	r30, r24
    5be6:	f9 07       	cpc	r31, r25
    5be8:	c0 f0       	brcs	.+48     	; 0x5c1a <__fp_cmp+0x46>
    5bea:	12 16       	cp	r1, r18
    5bec:	13 06       	cpc	r1, r19
    5bee:	e4 07       	cpc	r30, r20
    5bf0:	f5 07       	cpc	r31, r21
    5bf2:	98 f0       	brcs	.+38     	; 0x5c1a <__fp_cmp+0x46>
    5bf4:	62 1b       	sub	r22, r18
    5bf6:	73 0b       	sbc	r23, r19
    5bf8:	84 0b       	sbc	r24, r20
    5bfa:	95 0b       	sbc	r25, r21
    5bfc:	39 f4       	brne	.+14     	; 0x5c0c <__fp_cmp+0x38>
    5bfe:	0a 26       	eor	r0, r26
    5c00:	61 f0       	breq	.+24     	; 0x5c1a <__fp_cmp+0x46>
    5c02:	23 2b       	or	r18, r19
    5c04:	24 2b       	or	r18, r20
    5c06:	25 2b       	or	r18, r21
    5c08:	21 f4       	brne	.+8      	; 0x5c12 <__fp_cmp+0x3e>
    5c0a:	08 95       	ret
    5c0c:	0a 26       	eor	r0, r26
    5c0e:	09 f4       	brne	.+2      	; 0x5c12 <__fp_cmp+0x3e>
    5c10:	a1 40       	sbci	r26, 0x01	; 1
    5c12:	a6 95       	lsr	r26
    5c14:	8f ef       	ldi	r24, 0xFF	; 255
    5c16:	81 1d       	adc	r24, r1
    5c18:	81 1d       	adc	r24, r1
    5c1a:	08 95       	ret

00005c1c <__fp_inf>:
    5c1c:	97 f9       	bld	r25, 7
    5c1e:	9f 67       	ori	r25, 0x7F	; 127
    5c20:	80 e8       	ldi	r24, 0x80	; 128
    5c22:	70 e0       	ldi	r23, 0x00	; 0
    5c24:	60 e0       	ldi	r22, 0x00	; 0
    5c26:	08 95       	ret

00005c28 <__fp_nan>:
    5c28:	9f ef       	ldi	r25, 0xFF	; 255
    5c2a:	80 ec       	ldi	r24, 0xC0	; 192
    5c2c:	08 95       	ret

00005c2e <__fp_pscA>:
    5c2e:	00 24       	eor	r0, r0
    5c30:	0a 94       	dec	r0
    5c32:	16 16       	cp	r1, r22
    5c34:	17 06       	cpc	r1, r23
    5c36:	18 06       	cpc	r1, r24
    5c38:	09 06       	cpc	r0, r25
    5c3a:	08 95       	ret

00005c3c <__fp_pscB>:
    5c3c:	00 24       	eor	r0, r0
    5c3e:	0a 94       	dec	r0
    5c40:	12 16       	cp	r1, r18
    5c42:	13 06       	cpc	r1, r19
    5c44:	14 06       	cpc	r1, r20
    5c46:	05 06       	cpc	r0, r21
    5c48:	08 95       	ret

00005c4a <__fp_round>:
    5c4a:	09 2e       	mov	r0, r25
    5c4c:	03 94       	inc	r0
    5c4e:	00 0c       	add	r0, r0
    5c50:	11 f4       	brne	.+4      	; 0x5c56 <__fp_round+0xc>
    5c52:	88 23       	and	r24, r24
    5c54:	52 f0       	brmi	.+20     	; 0x5c6a <__fp_round+0x20>
    5c56:	bb 0f       	add	r27, r27
    5c58:	40 f4       	brcc	.+16     	; 0x5c6a <__fp_round+0x20>
    5c5a:	bf 2b       	or	r27, r31
    5c5c:	11 f4       	brne	.+4      	; 0x5c62 <__fp_round+0x18>
    5c5e:	60 ff       	sbrs	r22, 0
    5c60:	04 c0       	rjmp	.+8      	; 0x5c6a <__fp_round+0x20>
    5c62:	6f 5f       	subi	r22, 0xFF	; 255
    5c64:	7f 4f       	sbci	r23, 0xFF	; 255
    5c66:	8f 4f       	sbci	r24, 0xFF	; 255
    5c68:	9f 4f       	sbci	r25, 0xFF	; 255
    5c6a:	08 95       	ret

00005c6c <__fp_split3>:
    5c6c:	57 fd       	sbrc	r21, 7
    5c6e:	90 58       	subi	r25, 0x80	; 128
    5c70:	44 0f       	add	r20, r20
    5c72:	55 1f       	adc	r21, r21
    5c74:	59 f0       	breq	.+22     	; 0x5c8c <__fp_splitA+0x10>
    5c76:	5f 3f       	cpi	r21, 0xFF	; 255
    5c78:	71 f0       	breq	.+28     	; 0x5c96 <__fp_splitA+0x1a>
    5c7a:	47 95       	ror	r20

00005c7c <__fp_splitA>:
    5c7c:	88 0f       	add	r24, r24
    5c7e:	97 fb       	bst	r25, 7
    5c80:	99 1f       	adc	r25, r25
    5c82:	61 f0       	breq	.+24     	; 0x5c9c <__fp_splitA+0x20>
    5c84:	9f 3f       	cpi	r25, 0xFF	; 255
    5c86:	79 f0       	breq	.+30     	; 0x5ca6 <__fp_splitA+0x2a>
    5c88:	87 95       	ror	r24
    5c8a:	08 95       	ret
    5c8c:	12 16       	cp	r1, r18
    5c8e:	13 06       	cpc	r1, r19
    5c90:	14 06       	cpc	r1, r20
    5c92:	55 1f       	adc	r21, r21
    5c94:	f2 cf       	rjmp	.-28     	; 0x5c7a <__fp_split3+0xe>
    5c96:	46 95       	lsr	r20
    5c98:	f1 df       	rcall	.-30     	; 0x5c7c <__fp_splitA>
    5c9a:	08 c0       	rjmp	.+16     	; 0x5cac <__fp_splitA+0x30>
    5c9c:	16 16       	cp	r1, r22
    5c9e:	17 06       	cpc	r1, r23
    5ca0:	18 06       	cpc	r1, r24
    5ca2:	99 1f       	adc	r25, r25
    5ca4:	f1 cf       	rjmp	.-30     	; 0x5c88 <__fp_splitA+0xc>
    5ca6:	86 95       	lsr	r24
    5ca8:	71 05       	cpc	r23, r1
    5caa:	61 05       	cpc	r22, r1
    5cac:	08 94       	sec
    5cae:	08 95       	ret

00005cb0 <__fp_zero>:
    5cb0:	e8 94       	clt

00005cb2 <__fp_szero>:
    5cb2:	bb 27       	eor	r27, r27
    5cb4:	66 27       	eor	r22, r22
    5cb6:	77 27       	eor	r23, r23
    5cb8:	cb 01       	movw	r24, r22
    5cba:	97 f9       	bld	r25, 7
    5cbc:	08 95       	ret

00005cbe <__gesf2>:
    5cbe:	8a df       	rcall	.-236    	; 0x5bd4 <__fp_cmp>
    5cc0:	08 f4       	brcc	.+2      	; 0x5cc4 <__gesf2+0x6>
    5cc2:	8f ef       	ldi	r24, 0xFF	; 255
    5cc4:	08 95       	ret

00005cc6 <__mulsf3>:
    5cc6:	0b d0       	rcall	.+22     	; 0x5cde <__mulsf3x>
    5cc8:	c0 cf       	rjmp	.-128    	; 0x5c4a <__fp_round>
    5cca:	b1 df       	rcall	.-158    	; 0x5c2e <__fp_pscA>
    5ccc:	28 f0       	brcs	.+10     	; 0x5cd8 <__mulsf3+0x12>
    5cce:	b6 df       	rcall	.-148    	; 0x5c3c <__fp_pscB>
    5cd0:	18 f0       	brcs	.+6      	; 0x5cd8 <__mulsf3+0x12>
    5cd2:	95 23       	and	r25, r21
    5cd4:	09 f0       	breq	.+2      	; 0x5cd8 <__mulsf3+0x12>
    5cd6:	a2 cf       	rjmp	.-188    	; 0x5c1c <__fp_inf>
    5cd8:	a7 cf       	rjmp	.-178    	; 0x5c28 <__fp_nan>
    5cda:	11 24       	eor	r1, r1
    5cdc:	ea cf       	rjmp	.-44     	; 0x5cb2 <__fp_szero>

00005cde <__mulsf3x>:
    5cde:	c6 df       	rcall	.-116    	; 0x5c6c <__fp_split3>
    5ce0:	a0 f3       	brcs	.-24     	; 0x5cca <__mulsf3+0x4>

00005ce2 <__mulsf3_pse>:
    5ce2:	95 9f       	mul	r25, r21
    5ce4:	d1 f3       	breq	.-12     	; 0x5cda <__mulsf3+0x14>
    5ce6:	95 0f       	add	r25, r21
    5ce8:	50 e0       	ldi	r21, 0x00	; 0
    5cea:	55 1f       	adc	r21, r21
    5cec:	62 9f       	mul	r22, r18
    5cee:	f0 01       	movw	r30, r0
    5cf0:	72 9f       	mul	r23, r18
    5cf2:	bb 27       	eor	r27, r27
    5cf4:	f0 0d       	add	r31, r0
    5cf6:	b1 1d       	adc	r27, r1
    5cf8:	63 9f       	mul	r22, r19
    5cfa:	aa 27       	eor	r26, r26
    5cfc:	f0 0d       	add	r31, r0
    5cfe:	b1 1d       	adc	r27, r1
    5d00:	aa 1f       	adc	r26, r26
    5d02:	64 9f       	mul	r22, r20
    5d04:	66 27       	eor	r22, r22
    5d06:	b0 0d       	add	r27, r0
    5d08:	a1 1d       	adc	r26, r1
    5d0a:	66 1f       	adc	r22, r22
    5d0c:	82 9f       	mul	r24, r18
    5d0e:	22 27       	eor	r18, r18
    5d10:	b0 0d       	add	r27, r0
    5d12:	a1 1d       	adc	r26, r1
    5d14:	62 1f       	adc	r22, r18
    5d16:	73 9f       	mul	r23, r19
    5d18:	b0 0d       	add	r27, r0
    5d1a:	a1 1d       	adc	r26, r1
    5d1c:	62 1f       	adc	r22, r18
    5d1e:	83 9f       	mul	r24, r19
    5d20:	a0 0d       	add	r26, r0
    5d22:	61 1d       	adc	r22, r1
    5d24:	22 1f       	adc	r18, r18
    5d26:	74 9f       	mul	r23, r20
    5d28:	33 27       	eor	r19, r19
    5d2a:	a0 0d       	add	r26, r0
    5d2c:	61 1d       	adc	r22, r1
    5d2e:	23 1f       	adc	r18, r19
    5d30:	84 9f       	mul	r24, r20
    5d32:	60 0d       	add	r22, r0
    5d34:	21 1d       	adc	r18, r1
    5d36:	82 2f       	mov	r24, r18
    5d38:	76 2f       	mov	r23, r22
    5d3a:	6a 2f       	mov	r22, r26
    5d3c:	11 24       	eor	r1, r1
    5d3e:	9f 57       	subi	r25, 0x7F	; 127
    5d40:	50 40       	sbci	r21, 0x00	; 0
    5d42:	8a f0       	brmi	.+34     	; 0x5d66 <__mulsf3_pse+0x84>
    5d44:	e1 f0       	breq	.+56     	; 0x5d7e <__mulsf3_pse+0x9c>
    5d46:	88 23       	and	r24, r24
    5d48:	4a f0       	brmi	.+18     	; 0x5d5c <__mulsf3_pse+0x7a>
    5d4a:	ee 0f       	add	r30, r30
    5d4c:	ff 1f       	adc	r31, r31
    5d4e:	bb 1f       	adc	r27, r27
    5d50:	66 1f       	adc	r22, r22
    5d52:	77 1f       	adc	r23, r23
    5d54:	88 1f       	adc	r24, r24
    5d56:	91 50       	subi	r25, 0x01	; 1
    5d58:	50 40       	sbci	r21, 0x00	; 0
    5d5a:	a9 f7       	brne	.-22     	; 0x5d46 <__mulsf3_pse+0x64>
    5d5c:	9e 3f       	cpi	r25, 0xFE	; 254
    5d5e:	51 05       	cpc	r21, r1
    5d60:	70 f0       	brcs	.+28     	; 0x5d7e <__mulsf3_pse+0x9c>
    5d62:	5c cf       	rjmp	.-328    	; 0x5c1c <__fp_inf>
    5d64:	a6 cf       	rjmp	.-180    	; 0x5cb2 <__fp_szero>
    5d66:	5f 3f       	cpi	r21, 0xFF	; 255
    5d68:	ec f3       	brlt	.-6      	; 0x5d64 <__mulsf3_pse+0x82>
    5d6a:	98 3e       	cpi	r25, 0xE8	; 232
    5d6c:	dc f3       	brlt	.-10     	; 0x5d64 <__mulsf3_pse+0x82>
    5d6e:	86 95       	lsr	r24
    5d70:	77 95       	ror	r23
    5d72:	67 95       	ror	r22
    5d74:	b7 95       	ror	r27
    5d76:	f7 95       	ror	r31
    5d78:	e7 95       	ror	r30
    5d7a:	9f 5f       	subi	r25, 0xFF	; 255
    5d7c:	c1 f7       	brne	.-16     	; 0x5d6e <__mulsf3_pse+0x8c>
    5d7e:	fe 2b       	or	r31, r30
    5d80:	88 0f       	add	r24, r24
    5d82:	91 1d       	adc	r25, r1
    5d84:	96 95       	lsr	r25
    5d86:	87 95       	ror	r24
    5d88:	97 f9       	bld	r25, 7
    5d8a:	08 95       	ret

00005d8c <vfprintf>:
    5d8c:	2f 92       	push	r2
    5d8e:	3f 92       	push	r3
    5d90:	4f 92       	push	r4
    5d92:	5f 92       	push	r5
    5d94:	6f 92       	push	r6
    5d96:	7f 92       	push	r7
    5d98:	8f 92       	push	r8
    5d9a:	9f 92       	push	r9
    5d9c:	af 92       	push	r10
    5d9e:	bf 92       	push	r11
    5da0:	cf 92       	push	r12
    5da2:	df 92       	push	r13
    5da4:	ef 92       	push	r14
    5da6:	ff 92       	push	r15
    5da8:	0f 93       	push	r16
    5daa:	1f 93       	push	r17
    5dac:	cf 93       	push	r28
    5dae:	df 93       	push	r29
    5db0:	cd b7       	in	r28, 0x3d	; 61
    5db2:	de b7       	in	r29, 0x3e	; 62
    5db4:	63 97       	sbiw	r28, 0x13	; 19
    5db6:	0f b6       	in	r0, 0x3f	; 63
    5db8:	f8 94       	cli
    5dba:	de bf       	out	0x3e, r29	; 62
    5dbc:	0f be       	out	0x3f, r0	; 63
    5dbe:	cd bf       	out	0x3d, r28	; 61
    5dc0:	6c 01       	movw	r12, r24
    5dc2:	4b 01       	movw	r8, r22
    5dc4:	2a 01       	movw	r4, r20
    5dc6:	fc 01       	movw	r30, r24
    5dc8:	17 82       	std	Z+7, r1	; 0x07
    5dca:	16 82       	std	Z+6, r1	; 0x06
    5dcc:	83 81       	ldd	r24, Z+3	; 0x03
    5dce:	81 ff       	sbrs	r24, 1
    5dd0:	29 c3       	rjmp	.+1618   	; 0x6424 <vfprintf+0x698>
    5dd2:	ae 01       	movw	r20, r28
    5dd4:	4f 5f       	subi	r20, 0xFF	; 255
    5dd6:	5f 4f       	sbci	r21, 0xFF	; 255
    5dd8:	3a 01       	movw	r6, r20
    5dda:	f6 01       	movw	r30, r12
    5ddc:	93 81       	ldd	r25, Z+3	; 0x03
    5dde:	f4 01       	movw	r30, r8
    5de0:	93 fd       	sbrc	r25, 3
    5de2:	85 91       	lpm	r24, Z+
    5de4:	93 ff       	sbrs	r25, 3
    5de6:	81 91       	ld	r24, Z+
    5de8:	4f 01       	movw	r8, r30
    5dea:	88 23       	and	r24, r24
    5dec:	09 f4       	brne	.+2      	; 0x5df0 <vfprintf+0x64>
    5dee:	16 c3       	rjmp	.+1580   	; 0x641c <vfprintf+0x690>
    5df0:	85 32       	cpi	r24, 0x25	; 37
    5df2:	39 f4       	brne	.+14     	; 0x5e02 <vfprintf+0x76>
    5df4:	93 fd       	sbrc	r25, 3
    5df6:	85 91       	lpm	r24, Z+
    5df8:	93 ff       	sbrs	r25, 3
    5dfa:	81 91       	ld	r24, Z+
    5dfc:	4f 01       	movw	r8, r30
    5dfe:	85 32       	cpi	r24, 0x25	; 37
    5e00:	31 f4       	brne	.+12     	; 0x5e0e <vfprintf+0x82>
    5e02:	b6 01       	movw	r22, r12
    5e04:	90 e0       	ldi	r25, 0x00	; 0
    5e06:	d9 d5       	rcall	.+2994   	; 0x69ba <fputc>
    5e08:	52 01       	movw	r10, r4
    5e0a:	25 01       	movw	r4, r10
    5e0c:	e6 cf       	rjmp	.-52     	; 0x5dda <vfprintf+0x4e>
    5e0e:	10 e0       	ldi	r17, 0x00	; 0
    5e10:	f1 2c       	mov	r15, r1
    5e12:	20 e0       	ldi	r18, 0x00	; 0
    5e14:	20 32       	cpi	r18, 0x20	; 32
    5e16:	a0 f4       	brcc	.+40     	; 0x5e40 <vfprintf+0xb4>
    5e18:	8b 32       	cpi	r24, 0x2B	; 43
    5e1a:	69 f0       	breq	.+26     	; 0x5e36 <vfprintf+0xaa>
    5e1c:	30 f4       	brcc	.+12     	; 0x5e2a <vfprintf+0x9e>
    5e1e:	80 32       	cpi	r24, 0x20	; 32
    5e20:	59 f0       	breq	.+22     	; 0x5e38 <vfprintf+0xac>
    5e22:	83 32       	cpi	r24, 0x23	; 35
    5e24:	69 f4       	brne	.+26     	; 0x5e40 <vfprintf+0xb4>
    5e26:	20 61       	ori	r18, 0x10	; 16
    5e28:	2c c0       	rjmp	.+88     	; 0x5e82 <vfprintf+0xf6>
    5e2a:	8d 32       	cpi	r24, 0x2D	; 45
    5e2c:	39 f0       	breq	.+14     	; 0x5e3c <vfprintf+0xb0>
    5e2e:	80 33       	cpi	r24, 0x30	; 48
    5e30:	39 f4       	brne	.+14     	; 0x5e40 <vfprintf+0xb4>
    5e32:	21 60       	ori	r18, 0x01	; 1
    5e34:	26 c0       	rjmp	.+76     	; 0x5e82 <vfprintf+0xf6>
    5e36:	22 60       	ori	r18, 0x02	; 2
    5e38:	24 60       	ori	r18, 0x04	; 4
    5e3a:	23 c0       	rjmp	.+70     	; 0x5e82 <vfprintf+0xf6>
    5e3c:	28 60       	ori	r18, 0x08	; 8
    5e3e:	21 c0       	rjmp	.+66     	; 0x5e82 <vfprintf+0xf6>
    5e40:	27 fd       	sbrc	r18, 7
    5e42:	27 c0       	rjmp	.+78     	; 0x5e92 <vfprintf+0x106>
    5e44:	30 ed       	ldi	r19, 0xD0	; 208
    5e46:	38 0f       	add	r19, r24
    5e48:	3a 30       	cpi	r19, 0x0A	; 10
    5e4a:	78 f4       	brcc	.+30     	; 0x5e6a <vfprintf+0xde>
    5e4c:	26 ff       	sbrs	r18, 6
    5e4e:	06 c0       	rjmp	.+12     	; 0x5e5c <vfprintf+0xd0>
    5e50:	fa e0       	ldi	r31, 0x0A	; 10
    5e52:	1f 9f       	mul	r17, r31
    5e54:	30 0d       	add	r19, r0
    5e56:	11 24       	eor	r1, r1
    5e58:	13 2f       	mov	r17, r19
    5e5a:	13 c0       	rjmp	.+38     	; 0x5e82 <vfprintf+0xf6>
    5e5c:	4a e0       	ldi	r20, 0x0A	; 10
    5e5e:	f4 9e       	mul	r15, r20
    5e60:	30 0d       	add	r19, r0
    5e62:	11 24       	eor	r1, r1
    5e64:	f3 2e       	mov	r15, r19
    5e66:	20 62       	ori	r18, 0x20	; 32
    5e68:	0c c0       	rjmp	.+24     	; 0x5e82 <vfprintf+0xf6>
    5e6a:	8e 32       	cpi	r24, 0x2E	; 46
    5e6c:	21 f4       	brne	.+8      	; 0x5e76 <vfprintf+0xea>
    5e6e:	26 fd       	sbrc	r18, 6
    5e70:	d5 c2       	rjmp	.+1450   	; 0x641c <vfprintf+0x690>
    5e72:	20 64       	ori	r18, 0x40	; 64
    5e74:	06 c0       	rjmp	.+12     	; 0x5e82 <vfprintf+0xf6>
    5e76:	8c 36       	cpi	r24, 0x6C	; 108
    5e78:	11 f4       	brne	.+4      	; 0x5e7e <vfprintf+0xf2>
    5e7a:	20 68       	ori	r18, 0x80	; 128
    5e7c:	02 c0       	rjmp	.+4      	; 0x5e82 <vfprintf+0xf6>
    5e7e:	88 36       	cpi	r24, 0x68	; 104
    5e80:	41 f4       	brne	.+16     	; 0x5e92 <vfprintf+0x106>
    5e82:	f4 01       	movw	r30, r8
    5e84:	93 fd       	sbrc	r25, 3
    5e86:	85 91       	lpm	r24, Z+
    5e88:	93 ff       	sbrs	r25, 3
    5e8a:	81 91       	ld	r24, Z+
    5e8c:	4f 01       	movw	r8, r30
    5e8e:	81 11       	cpse	r24, r1
    5e90:	c1 cf       	rjmp	.-126    	; 0x5e14 <vfprintf+0x88>
    5e92:	9b eb       	ldi	r25, 0xBB	; 187
    5e94:	98 0f       	add	r25, r24
    5e96:	93 30       	cpi	r25, 0x03	; 3
    5e98:	18 f4       	brcc	.+6      	; 0x5ea0 <vfprintf+0x114>
    5e9a:	20 61       	ori	r18, 0x10	; 16
    5e9c:	80 5e       	subi	r24, 0xE0	; 224
    5e9e:	06 c0       	rjmp	.+12     	; 0x5eac <vfprintf+0x120>
    5ea0:	9b e9       	ldi	r25, 0x9B	; 155
    5ea2:	98 0f       	add	r25, r24
    5ea4:	93 30       	cpi	r25, 0x03	; 3
    5ea6:	08 f0       	brcs	.+2      	; 0x5eaa <vfprintf+0x11e>
    5ea8:	64 c1       	rjmp	.+712    	; 0x6172 <vfprintf+0x3e6>
    5eaa:	2f 7e       	andi	r18, 0xEF	; 239
    5eac:	26 ff       	sbrs	r18, 6
    5eae:	16 e0       	ldi	r17, 0x06	; 6
    5eb0:	2f 73       	andi	r18, 0x3F	; 63
    5eb2:	32 2e       	mov	r3, r18
    5eb4:	85 36       	cpi	r24, 0x65	; 101
    5eb6:	19 f4       	brne	.+6      	; 0x5ebe <vfprintf+0x132>
    5eb8:	20 64       	ori	r18, 0x40	; 64
    5eba:	32 2e       	mov	r3, r18
    5ebc:	08 c0       	rjmp	.+16     	; 0x5ece <vfprintf+0x142>
    5ebe:	86 36       	cpi	r24, 0x66	; 102
    5ec0:	21 f4       	brne	.+8      	; 0x5eca <vfprintf+0x13e>
    5ec2:	f2 2f       	mov	r31, r18
    5ec4:	f0 68       	ori	r31, 0x80	; 128
    5ec6:	3f 2e       	mov	r3, r31
    5ec8:	02 c0       	rjmp	.+4      	; 0x5ece <vfprintf+0x142>
    5eca:	11 11       	cpse	r17, r1
    5ecc:	11 50       	subi	r17, 0x01	; 1
    5ece:	37 fe       	sbrs	r3, 7
    5ed0:	07 c0       	rjmp	.+14     	; 0x5ee0 <vfprintf+0x154>
    5ed2:	1c 33       	cpi	r17, 0x3C	; 60
    5ed4:	50 f4       	brcc	.+20     	; 0x5eea <vfprintf+0x15e>
    5ed6:	ee 24       	eor	r14, r14
    5ed8:	e3 94       	inc	r14
    5eda:	e1 0e       	add	r14, r17
    5edc:	27 e0       	ldi	r18, 0x07	; 7
    5ede:	0b c0       	rjmp	.+22     	; 0x5ef6 <vfprintf+0x16a>
    5ee0:	18 30       	cpi	r17, 0x08	; 8
    5ee2:	38 f0       	brcs	.+14     	; 0x5ef2 <vfprintf+0x166>
    5ee4:	27 e0       	ldi	r18, 0x07	; 7
    5ee6:	17 e0       	ldi	r17, 0x07	; 7
    5ee8:	05 c0       	rjmp	.+10     	; 0x5ef4 <vfprintf+0x168>
    5eea:	27 e0       	ldi	r18, 0x07	; 7
    5eec:	4c e3       	ldi	r20, 0x3C	; 60
    5eee:	e4 2e       	mov	r14, r20
    5ef0:	02 c0       	rjmp	.+4      	; 0x5ef6 <vfprintf+0x16a>
    5ef2:	21 2f       	mov	r18, r17
    5ef4:	e1 2c       	mov	r14, r1
    5ef6:	52 01       	movw	r10, r4
    5ef8:	44 e0       	ldi	r20, 0x04	; 4
    5efa:	a4 0e       	add	r10, r20
    5efc:	b1 1c       	adc	r11, r1
    5efe:	f2 01       	movw	r30, r4
    5f00:	60 81       	ld	r22, Z
    5f02:	71 81       	ldd	r23, Z+1	; 0x01
    5f04:	82 81       	ldd	r24, Z+2	; 0x02
    5f06:	93 81       	ldd	r25, Z+3	; 0x03
    5f08:	0e 2d       	mov	r16, r14
    5f0a:	a3 01       	movw	r20, r6
    5f0c:	68 d4       	rcall	.+2256   	; 0x67de <__ftoa_engine>
    5f0e:	2c 01       	movw	r4, r24
    5f10:	09 81       	ldd	r16, Y+1	; 0x01
    5f12:	00 ff       	sbrs	r16, 0
    5f14:	02 c0       	rjmp	.+4      	; 0x5f1a <vfprintf+0x18e>
    5f16:	03 ff       	sbrs	r16, 3
    5f18:	07 c0       	rjmp	.+14     	; 0x5f28 <vfprintf+0x19c>
    5f1a:	31 fc       	sbrc	r3, 1
    5f1c:	08 c0       	rjmp	.+16     	; 0x5f2e <vfprintf+0x1a2>
    5f1e:	32 fe       	sbrs	r3, 2
    5f20:	09 c0       	rjmp	.+18     	; 0x5f34 <vfprintf+0x1a8>
    5f22:	30 e2       	ldi	r19, 0x20	; 32
    5f24:	23 2e       	mov	r2, r19
    5f26:	07 c0       	rjmp	.+14     	; 0x5f36 <vfprintf+0x1aa>
    5f28:	2d e2       	ldi	r18, 0x2D	; 45
    5f2a:	22 2e       	mov	r2, r18
    5f2c:	04 c0       	rjmp	.+8      	; 0x5f36 <vfprintf+0x1aa>
    5f2e:	9b e2       	ldi	r25, 0x2B	; 43
    5f30:	29 2e       	mov	r2, r25
    5f32:	01 c0       	rjmp	.+2      	; 0x5f36 <vfprintf+0x1aa>
    5f34:	21 2c       	mov	r2, r1
    5f36:	80 2f       	mov	r24, r16
    5f38:	8c 70       	andi	r24, 0x0C	; 12
    5f3a:	19 f0       	breq	.+6      	; 0x5f42 <vfprintf+0x1b6>
    5f3c:	21 10       	cpse	r2, r1
    5f3e:	51 c2       	rjmp	.+1186   	; 0x63e2 <vfprintf+0x656>
    5f40:	8d c2       	rjmp	.+1306   	; 0x645c <vfprintf+0x6d0>
    5f42:	37 fe       	sbrs	r3, 7
    5f44:	0f c0       	rjmp	.+30     	; 0x5f64 <vfprintf+0x1d8>
    5f46:	e4 0c       	add	r14, r4
    5f48:	04 ff       	sbrs	r16, 4
    5f4a:	04 c0       	rjmp	.+8      	; 0x5f54 <vfprintf+0x1c8>
    5f4c:	8a 81       	ldd	r24, Y+2	; 0x02
    5f4e:	81 33       	cpi	r24, 0x31	; 49
    5f50:	09 f4       	brne	.+2      	; 0x5f54 <vfprintf+0x1c8>
    5f52:	ea 94       	dec	r14
    5f54:	1e 14       	cp	r1, r14
    5f56:	74 f5       	brge	.+92     	; 0x5fb4 <vfprintf+0x228>
    5f58:	f8 e0       	ldi	r31, 0x08	; 8
    5f5a:	fe 15       	cp	r31, r14
    5f5c:	78 f5       	brcc	.+94     	; 0x5fbc <vfprintf+0x230>
    5f5e:	88 e0       	ldi	r24, 0x08	; 8
    5f60:	e8 2e       	mov	r14, r24
    5f62:	2c c0       	rjmp	.+88     	; 0x5fbc <vfprintf+0x230>
    5f64:	36 fc       	sbrc	r3, 6
    5f66:	2a c0       	rjmp	.+84     	; 0x5fbc <vfprintf+0x230>
    5f68:	81 2f       	mov	r24, r17
    5f6a:	90 e0       	ldi	r25, 0x00	; 0
    5f6c:	84 15       	cp	r24, r4
    5f6e:	95 05       	cpc	r25, r5
    5f70:	9c f0       	brlt	.+38     	; 0x5f98 <vfprintf+0x20c>
    5f72:	2c ef       	ldi	r18, 0xFC	; 252
    5f74:	42 16       	cp	r4, r18
    5f76:	2f ef       	ldi	r18, 0xFF	; 255
    5f78:	52 06       	cpc	r5, r18
    5f7a:	74 f0       	brlt	.+28     	; 0x5f98 <vfprintf+0x20c>
    5f7c:	43 2d       	mov	r20, r3
    5f7e:	40 68       	ori	r20, 0x80	; 128
    5f80:	34 2e       	mov	r3, r20
    5f82:	0a c0       	rjmp	.+20     	; 0x5f98 <vfprintf+0x20c>
    5f84:	e2 e0       	ldi	r30, 0x02	; 2
    5f86:	f0 e0       	ldi	r31, 0x00	; 0
    5f88:	ec 0f       	add	r30, r28
    5f8a:	fd 1f       	adc	r31, r29
    5f8c:	e1 0f       	add	r30, r17
    5f8e:	f1 1d       	adc	r31, r1
    5f90:	80 81       	ld	r24, Z
    5f92:	80 33       	cpi	r24, 0x30	; 48
    5f94:	19 f4       	brne	.+6      	; 0x5f9c <vfprintf+0x210>
    5f96:	11 50       	subi	r17, 0x01	; 1
    5f98:	11 11       	cpse	r17, r1
    5f9a:	f4 cf       	rjmp	.-24     	; 0x5f84 <vfprintf+0x1f8>
    5f9c:	37 fe       	sbrs	r3, 7
    5f9e:	0e c0       	rjmp	.+28     	; 0x5fbc <vfprintf+0x230>
    5fa0:	ee 24       	eor	r14, r14
    5fa2:	e3 94       	inc	r14
    5fa4:	e1 0e       	add	r14, r17
    5fa6:	81 2f       	mov	r24, r17
    5fa8:	90 e0       	ldi	r25, 0x00	; 0
    5faa:	48 16       	cp	r4, r24
    5fac:	59 06       	cpc	r5, r25
    5fae:	2c f4       	brge	.+10     	; 0x5fba <vfprintf+0x22e>
    5fb0:	14 19       	sub	r17, r4
    5fb2:	04 c0       	rjmp	.+8      	; 0x5fbc <vfprintf+0x230>
    5fb4:	ee 24       	eor	r14, r14
    5fb6:	e3 94       	inc	r14
    5fb8:	01 c0       	rjmp	.+2      	; 0x5fbc <vfprintf+0x230>
    5fba:	10 e0       	ldi	r17, 0x00	; 0
    5fbc:	37 fe       	sbrs	r3, 7
    5fbe:	06 c0       	rjmp	.+12     	; 0x5fcc <vfprintf+0x240>
    5fc0:	14 14       	cp	r1, r4
    5fc2:	15 04       	cpc	r1, r5
    5fc4:	34 f4       	brge	.+12     	; 0x5fd2 <vfprintf+0x246>
    5fc6:	c2 01       	movw	r24, r4
    5fc8:	01 96       	adiw	r24, 0x01	; 1
    5fca:	05 c0       	rjmp	.+10     	; 0x5fd6 <vfprintf+0x24a>
    5fcc:	85 e0       	ldi	r24, 0x05	; 5
    5fce:	90 e0       	ldi	r25, 0x00	; 0
    5fd0:	02 c0       	rjmp	.+4      	; 0x5fd6 <vfprintf+0x24a>
    5fd2:	81 e0       	ldi	r24, 0x01	; 1
    5fd4:	90 e0       	ldi	r25, 0x00	; 0
    5fd6:	21 10       	cpse	r2, r1
    5fd8:	01 96       	adiw	r24, 0x01	; 1
    5fda:	11 23       	and	r17, r17
    5fdc:	31 f0       	breq	.+12     	; 0x5fea <vfprintf+0x25e>
    5fde:	21 2f       	mov	r18, r17
    5fe0:	30 e0       	ldi	r19, 0x00	; 0
    5fe2:	2f 5f       	subi	r18, 0xFF	; 255
    5fe4:	3f 4f       	sbci	r19, 0xFF	; 255
    5fe6:	82 0f       	add	r24, r18
    5fe8:	93 1f       	adc	r25, r19
    5fea:	2f 2d       	mov	r18, r15
    5fec:	30 e0       	ldi	r19, 0x00	; 0
    5fee:	82 17       	cp	r24, r18
    5ff0:	93 07       	cpc	r25, r19
    5ff2:	14 f4       	brge	.+4      	; 0x5ff8 <vfprintf+0x26c>
    5ff4:	f8 1a       	sub	r15, r24
    5ff6:	01 c0       	rjmp	.+2      	; 0x5ffa <vfprintf+0x26e>
    5ff8:	f1 2c       	mov	r15, r1
    5ffa:	83 2d       	mov	r24, r3
    5ffc:	89 70       	andi	r24, 0x09	; 9
    5ffe:	41 f4       	brne	.+16     	; 0x6010 <vfprintf+0x284>
    6000:	ff 20       	and	r15, r15
    6002:	31 f0       	breq	.+12     	; 0x6010 <vfprintf+0x284>
    6004:	b6 01       	movw	r22, r12
    6006:	80 e2       	ldi	r24, 0x20	; 32
    6008:	90 e0       	ldi	r25, 0x00	; 0
    600a:	d7 d4       	rcall	.+2478   	; 0x69ba <fputc>
    600c:	fa 94       	dec	r15
    600e:	f8 cf       	rjmp	.-16     	; 0x6000 <vfprintf+0x274>
    6010:	22 20       	and	r2, r2
    6012:	21 f0       	breq	.+8      	; 0x601c <vfprintf+0x290>
    6014:	b6 01       	movw	r22, r12
    6016:	82 2d       	mov	r24, r2
    6018:	90 e0       	ldi	r25, 0x00	; 0
    601a:	cf d4       	rcall	.+2462   	; 0x69ba <fputc>
    601c:	33 fc       	sbrc	r3, 3
    601e:	08 c0       	rjmp	.+16     	; 0x6030 <vfprintf+0x2a4>
    6020:	ff 20       	and	r15, r15
    6022:	31 f0       	breq	.+12     	; 0x6030 <vfprintf+0x2a4>
    6024:	b6 01       	movw	r22, r12
    6026:	80 e3       	ldi	r24, 0x30	; 48
    6028:	90 e0       	ldi	r25, 0x00	; 0
    602a:	c7 d4       	rcall	.+2446   	; 0x69ba <fputc>
    602c:	fa 94       	dec	r15
    602e:	f8 cf       	rjmp	.-16     	; 0x6020 <vfprintf+0x294>
    6030:	37 fe       	sbrs	r3, 7
    6032:	58 c0       	rjmp	.+176    	; 0x60e4 <vfprintf+0x358>
    6034:	94 2d       	mov	r25, r4
    6036:	85 2d       	mov	r24, r5
    6038:	57 fe       	sbrs	r5, 7
    603a:	02 c0       	rjmp	.+4      	; 0x6040 <vfprintf+0x2b4>
    603c:	90 e0       	ldi	r25, 0x00	; 0
    603e:	80 e0       	ldi	r24, 0x00	; 0
    6040:	29 2e       	mov	r2, r25
    6042:	38 2e       	mov	r3, r24
    6044:	20 e0       	ldi	r18, 0x00	; 0
    6046:	30 e0       	ldi	r19, 0x00	; 0
    6048:	a2 01       	movw	r20, r4
    604a:	4e 19       	sub	r20, r14
    604c:	51 09       	sbc	r21, r1
    604e:	5d 87       	std	Y+13, r21	; 0x0d
    6050:	4c 87       	std	Y+12, r20	; 0x0c
    6052:	a2 01       	movw	r20, r4
    6054:	42 19       	sub	r20, r2
    6056:	53 09       	sbc	r21, r3
    6058:	5f 87       	std	Y+15, r21	; 0x0f
    605a:	4e 87       	std	Y+14, r20	; 0x0e
    605c:	61 2f       	mov	r22, r17
    605e:	70 e0       	ldi	r23, 0x00	; 0
    6060:	44 27       	eor	r20, r20
    6062:	55 27       	eor	r21, r21
    6064:	46 1b       	sub	r20, r22
    6066:	57 0b       	sbc	r21, r23
    6068:	59 8b       	std	Y+17, r21	; 0x11
    606a:	48 8b       	std	Y+16, r20	; 0x10
    606c:	5f ef       	ldi	r21, 0xFF	; 255
    606e:	25 16       	cp	r2, r21
    6070:	35 06       	cpc	r3, r21
    6072:	41 f4       	brne	.+16     	; 0x6084 <vfprintf+0x2f8>
    6074:	b6 01       	movw	r22, r12
    6076:	8e e2       	ldi	r24, 0x2E	; 46
    6078:	90 e0       	ldi	r25, 0x00	; 0
    607a:	2a 8b       	std	Y+18, r18	; 0x12
    607c:	3b 8b       	std	Y+19, r19	; 0x13
    607e:	9d d4       	rcall	.+2362   	; 0x69ba <fputc>
    6080:	3b 89       	ldd	r19, Y+19	; 0x13
    6082:	2a 89       	ldd	r18, Y+18	; 0x12
    6084:	42 14       	cp	r4, r2
    6086:	53 04       	cpc	r5, r3
    6088:	6c f0       	brlt	.+26     	; 0x60a4 <vfprintf+0x318>
    608a:	4c 85       	ldd	r20, Y+12	; 0x0c
    608c:	5d 85       	ldd	r21, Y+13	; 0x0d
    608e:	42 15       	cp	r20, r2
    6090:	53 05       	cpc	r21, r3
    6092:	44 f4       	brge	.+16     	; 0x60a4 <vfprintf+0x318>
    6094:	ee 85       	ldd	r30, Y+14	; 0x0e
    6096:	ff 85       	ldd	r31, Y+15	; 0x0f
    6098:	e2 0f       	add	r30, r18
    609a:	f3 1f       	adc	r31, r19
    609c:	e6 0d       	add	r30, r6
    609e:	f7 1d       	adc	r31, r7
    60a0:	81 81       	ldd	r24, Z+1	; 0x01
    60a2:	01 c0       	rjmp	.+2      	; 0x60a6 <vfprintf+0x31a>
    60a4:	80 e3       	ldi	r24, 0x30	; 48
    60a6:	51 e0       	ldi	r21, 0x01	; 1
    60a8:	25 1a       	sub	r2, r21
    60aa:	31 08       	sbc	r3, r1
    60ac:	2f 5f       	subi	r18, 0xFF	; 255
    60ae:	3f 4f       	sbci	r19, 0xFF	; 255
    60b0:	48 89       	ldd	r20, Y+16	; 0x10
    60b2:	59 89       	ldd	r21, Y+17	; 0x11
    60b4:	24 16       	cp	r2, r20
    60b6:	35 06       	cpc	r3, r21
    60b8:	44 f0       	brlt	.+16     	; 0x60ca <vfprintf+0x33e>
    60ba:	b6 01       	movw	r22, r12
    60bc:	90 e0       	ldi	r25, 0x00	; 0
    60be:	2a 8b       	std	Y+18, r18	; 0x12
    60c0:	3b 8b       	std	Y+19, r19	; 0x13
    60c2:	7b d4       	rcall	.+2294   	; 0x69ba <fputc>
    60c4:	2a 89       	ldd	r18, Y+18	; 0x12
    60c6:	3b 89       	ldd	r19, Y+19	; 0x13
    60c8:	d1 cf       	rjmp	.-94     	; 0x606c <vfprintf+0x2e0>
    60ca:	24 14       	cp	r2, r4
    60cc:	35 04       	cpc	r3, r5
    60ce:	39 f4       	brne	.+14     	; 0x60de <vfprintf+0x352>
    60d0:	9a 81       	ldd	r25, Y+2	; 0x02
    60d2:	96 33       	cpi	r25, 0x36	; 54
    60d4:	18 f4       	brcc	.+6      	; 0x60dc <vfprintf+0x350>
    60d6:	95 33       	cpi	r25, 0x35	; 53
    60d8:	11 f4       	brne	.+4      	; 0x60de <vfprintf+0x352>
    60da:	04 ff       	sbrs	r16, 4
    60dc:	81 e3       	ldi	r24, 0x31	; 49
    60de:	b6 01       	movw	r22, r12
    60e0:	90 e0       	ldi	r25, 0x00	; 0
    60e2:	45 c0       	rjmp	.+138    	; 0x616e <vfprintf+0x3e2>
    60e4:	8a 81       	ldd	r24, Y+2	; 0x02
    60e6:	81 33       	cpi	r24, 0x31	; 49
    60e8:	09 f0       	breq	.+2      	; 0x60ec <vfprintf+0x360>
    60ea:	0f 7e       	andi	r16, 0xEF	; 239
    60ec:	b6 01       	movw	r22, r12
    60ee:	90 e0       	ldi	r25, 0x00	; 0
    60f0:	64 d4       	rcall	.+2248   	; 0x69ba <fputc>
    60f2:	11 11       	cpse	r17, r1
    60f4:	05 c0       	rjmp	.+10     	; 0x6100 <vfprintf+0x374>
    60f6:	34 fc       	sbrc	r3, 4
    60f8:	16 c0       	rjmp	.+44     	; 0x6126 <vfprintf+0x39a>
    60fa:	85 e6       	ldi	r24, 0x65	; 101
    60fc:	90 e0       	ldi	r25, 0x00	; 0
    60fe:	15 c0       	rjmp	.+42     	; 0x612a <vfprintf+0x39e>
    6100:	b6 01       	movw	r22, r12
    6102:	8e e2       	ldi	r24, 0x2E	; 46
    6104:	90 e0       	ldi	r25, 0x00	; 0
    6106:	59 d4       	rcall	.+2226   	; 0x69ba <fputc>
    6108:	82 e0       	ldi	r24, 0x02	; 2
    610a:	ee 24       	eor	r14, r14
    610c:	e3 94       	inc	r14
    610e:	e8 0e       	add	r14, r24
    6110:	f3 01       	movw	r30, r6
    6112:	e8 0f       	add	r30, r24
    6114:	f1 1d       	adc	r31, r1
    6116:	80 81       	ld	r24, Z
    6118:	b6 01       	movw	r22, r12
    611a:	90 e0       	ldi	r25, 0x00	; 0
    611c:	4e d4       	rcall	.+2204   	; 0x69ba <fputc>
    611e:	11 50       	subi	r17, 0x01	; 1
    6120:	8e 2d       	mov	r24, r14
    6122:	99 f7       	brne	.-26     	; 0x610a <vfprintf+0x37e>
    6124:	e8 cf       	rjmp	.-48     	; 0x60f6 <vfprintf+0x36a>
    6126:	85 e4       	ldi	r24, 0x45	; 69
    6128:	90 e0       	ldi	r25, 0x00	; 0
    612a:	b6 01       	movw	r22, r12
    612c:	46 d4       	rcall	.+2188   	; 0x69ba <fputc>
    612e:	57 fc       	sbrc	r5, 7
    6130:	05 c0       	rjmp	.+10     	; 0x613c <vfprintf+0x3b0>
    6132:	41 14       	cp	r4, r1
    6134:	51 04       	cpc	r5, r1
    6136:	39 f4       	brne	.+14     	; 0x6146 <vfprintf+0x3ba>
    6138:	04 ff       	sbrs	r16, 4
    613a:	05 c0       	rjmp	.+10     	; 0x6146 <vfprintf+0x3ba>
    613c:	51 94       	neg	r5
    613e:	41 94       	neg	r4
    6140:	51 08       	sbc	r5, r1
    6142:	8d e2       	ldi	r24, 0x2D	; 45
    6144:	01 c0       	rjmp	.+2      	; 0x6148 <vfprintf+0x3bc>
    6146:	8b e2       	ldi	r24, 0x2B	; 43
    6148:	b6 01       	movw	r22, r12
    614a:	90 e0       	ldi	r25, 0x00	; 0
    614c:	36 d4       	rcall	.+2156   	; 0x69ba <fputc>
    614e:	80 e3       	ldi	r24, 0x30	; 48
    6150:	9a e0       	ldi	r25, 0x0A	; 10
    6152:	49 16       	cp	r4, r25
    6154:	51 04       	cpc	r5, r1
    6156:	2c f0       	brlt	.+10     	; 0x6162 <vfprintf+0x3d6>
    6158:	8f 5f       	subi	r24, 0xFF	; 255
    615a:	5a e0       	ldi	r21, 0x0A	; 10
    615c:	45 1a       	sub	r4, r21
    615e:	51 08       	sbc	r5, r1
    6160:	f7 cf       	rjmp	.-18     	; 0x6150 <vfprintf+0x3c4>
    6162:	b6 01       	movw	r22, r12
    6164:	90 e0       	ldi	r25, 0x00	; 0
    6166:	29 d4       	rcall	.+2130   	; 0x69ba <fputc>
    6168:	b6 01       	movw	r22, r12
    616a:	c2 01       	movw	r24, r4
    616c:	c0 96       	adiw	r24, 0x30	; 48
    616e:	25 d4       	rcall	.+2122   	; 0x69ba <fputc>
    6170:	4c c1       	rjmp	.+664    	; 0x640a <vfprintf+0x67e>
    6172:	83 36       	cpi	r24, 0x63	; 99
    6174:	31 f0       	breq	.+12     	; 0x6182 <vfprintf+0x3f6>
    6176:	83 37       	cpi	r24, 0x73	; 115
    6178:	79 f0       	breq	.+30     	; 0x6198 <vfprintf+0x40c>
    617a:	83 35       	cpi	r24, 0x53	; 83
    617c:	09 f0       	breq	.+2      	; 0x6180 <vfprintf+0x3f4>
    617e:	54 c0       	rjmp	.+168    	; 0x6228 <vfprintf+0x49c>
    6180:	20 c0       	rjmp	.+64     	; 0x61c2 <vfprintf+0x436>
    6182:	52 01       	movw	r10, r4
    6184:	e2 e0       	ldi	r30, 0x02	; 2
    6186:	ae 0e       	add	r10, r30
    6188:	b1 1c       	adc	r11, r1
    618a:	f2 01       	movw	r30, r4
    618c:	80 81       	ld	r24, Z
    618e:	89 83       	std	Y+1, r24	; 0x01
    6190:	01 e0       	ldi	r16, 0x01	; 1
    6192:	10 e0       	ldi	r17, 0x00	; 0
    6194:	23 01       	movw	r4, r6
    6196:	13 c0       	rjmp	.+38     	; 0x61be <vfprintf+0x432>
    6198:	52 01       	movw	r10, r4
    619a:	f2 e0       	ldi	r31, 0x02	; 2
    619c:	af 0e       	add	r10, r31
    619e:	b1 1c       	adc	r11, r1
    61a0:	f2 01       	movw	r30, r4
    61a2:	40 80       	ld	r4, Z
    61a4:	51 80       	ldd	r5, Z+1	; 0x01
    61a6:	26 ff       	sbrs	r18, 6
    61a8:	03 c0       	rjmp	.+6      	; 0x61b0 <vfprintf+0x424>
    61aa:	61 2f       	mov	r22, r17
    61ac:	70 e0       	ldi	r23, 0x00	; 0
    61ae:	02 c0       	rjmp	.+4      	; 0x61b4 <vfprintf+0x428>
    61b0:	6f ef       	ldi	r22, 0xFF	; 255
    61b2:	7f ef       	ldi	r23, 0xFF	; 255
    61b4:	c2 01       	movw	r24, r4
    61b6:	2a 8b       	std	Y+18, r18	; 0x12
    61b8:	f5 d3       	rcall	.+2026   	; 0x69a4 <strnlen>
    61ba:	8c 01       	movw	r16, r24
    61bc:	2a 89       	ldd	r18, Y+18	; 0x12
    61be:	2f 77       	andi	r18, 0x7F	; 127
    61c0:	14 c0       	rjmp	.+40     	; 0x61ea <vfprintf+0x45e>
    61c2:	52 01       	movw	r10, r4
    61c4:	f2 e0       	ldi	r31, 0x02	; 2
    61c6:	af 0e       	add	r10, r31
    61c8:	b1 1c       	adc	r11, r1
    61ca:	f2 01       	movw	r30, r4
    61cc:	40 80       	ld	r4, Z
    61ce:	51 80       	ldd	r5, Z+1	; 0x01
    61d0:	26 ff       	sbrs	r18, 6
    61d2:	03 c0       	rjmp	.+6      	; 0x61da <vfprintf+0x44e>
    61d4:	61 2f       	mov	r22, r17
    61d6:	70 e0       	ldi	r23, 0x00	; 0
    61d8:	02 c0       	rjmp	.+4      	; 0x61de <vfprintf+0x452>
    61da:	6f ef       	ldi	r22, 0xFF	; 255
    61dc:	7f ef       	ldi	r23, 0xFF	; 255
    61de:	c2 01       	movw	r24, r4
    61e0:	2a 8b       	std	Y+18, r18	; 0x12
    61e2:	d5 d3       	rcall	.+1962   	; 0x698e <strnlen_P>
    61e4:	8c 01       	movw	r16, r24
    61e6:	2a 89       	ldd	r18, Y+18	; 0x12
    61e8:	20 68       	ori	r18, 0x80	; 128
    61ea:	32 2e       	mov	r3, r18
    61ec:	23 fd       	sbrc	r18, 3
    61ee:	18 c0       	rjmp	.+48     	; 0x6220 <vfprintf+0x494>
    61f0:	8f 2d       	mov	r24, r15
    61f2:	90 e0       	ldi	r25, 0x00	; 0
    61f4:	08 17       	cp	r16, r24
    61f6:	19 07       	cpc	r17, r25
    61f8:	98 f4       	brcc	.+38     	; 0x6220 <vfprintf+0x494>
    61fa:	b6 01       	movw	r22, r12
    61fc:	80 e2       	ldi	r24, 0x20	; 32
    61fe:	90 e0       	ldi	r25, 0x00	; 0
    6200:	dc d3       	rcall	.+1976   	; 0x69ba <fputc>
    6202:	fa 94       	dec	r15
    6204:	f5 cf       	rjmp	.-22     	; 0x61f0 <vfprintf+0x464>
    6206:	f2 01       	movw	r30, r4
    6208:	37 fc       	sbrc	r3, 7
    620a:	85 91       	lpm	r24, Z+
    620c:	37 fe       	sbrs	r3, 7
    620e:	81 91       	ld	r24, Z+
    6210:	2f 01       	movw	r4, r30
    6212:	b6 01       	movw	r22, r12
    6214:	90 e0       	ldi	r25, 0x00	; 0
    6216:	d1 d3       	rcall	.+1954   	; 0x69ba <fputc>
    6218:	f1 10       	cpse	r15, r1
    621a:	fa 94       	dec	r15
    621c:	01 50       	subi	r16, 0x01	; 1
    621e:	11 09       	sbc	r17, r1
    6220:	01 15       	cp	r16, r1
    6222:	11 05       	cpc	r17, r1
    6224:	81 f7       	brne	.-32     	; 0x6206 <vfprintf+0x47a>
    6226:	f1 c0       	rjmp	.+482    	; 0x640a <vfprintf+0x67e>
    6228:	84 36       	cpi	r24, 0x64	; 100
    622a:	11 f0       	breq	.+4      	; 0x6230 <vfprintf+0x4a4>
    622c:	89 36       	cpi	r24, 0x69	; 105
    622e:	51 f5       	brne	.+84     	; 0x6284 <vfprintf+0x4f8>
    6230:	52 01       	movw	r10, r4
    6232:	27 ff       	sbrs	r18, 7
    6234:	09 c0       	rjmp	.+18     	; 0x6248 <vfprintf+0x4bc>
    6236:	f4 e0       	ldi	r31, 0x04	; 4
    6238:	af 0e       	add	r10, r31
    623a:	b1 1c       	adc	r11, r1
    623c:	f2 01       	movw	r30, r4
    623e:	60 81       	ld	r22, Z
    6240:	71 81       	ldd	r23, Z+1	; 0x01
    6242:	82 81       	ldd	r24, Z+2	; 0x02
    6244:	93 81       	ldd	r25, Z+3	; 0x03
    6246:	0a c0       	rjmp	.+20     	; 0x625c <vfprintf+0x4d0>
    6248:	f2 e0       	ldi	r31, 0x02	; 2
    624a:	af 0e       	add	r10, r31
    624c:	b1 1c       	adc	r11, r1
    624e:	f2 01       	movw	r30, r4
    6250:	60 81       	ld	r22, Z
    6252:	71 81       	ldd	r23, Z+1	; 0x01
    6254:	07 2e       	mov	r0, r23
    6256:	00 0c       	add	r0, r0
    6258:	88 0b       	sbc	r24, r24
    625a:	99 0b       	sbc	r25, r25
    625c:	2f 76       	andi	r18, 0x6F	; 111
    625e:	32 2e       	mov	r3, r18
    6260:	97 ff       	sbrs	r25, 7
    6262:	09 c0       	rjmp	.+18     	; 0x6276 <vfprintf+0x4ea>
    6264:	90 95       	com	r25
    6266:	80 95       	com	r24
    6268:	70 95       	com	r23
    626a:	61 95       	neg	r22
    626c:	7f 4f       	sbci	r23, 0xFF	; 255
    626e:	8f 4f       	sbci	r24, 0xFF	; 255
    6270:	9f 4f       	sbci	r25, 0xFF	; 255
    6272:	20 68       	ori	r18, 0x80	; 128
    6274:	32 2e       	mov	r3, r18
    6276:	2a e0       	ldi	r18, 0x0A	; 10
    6278:	30 e0       	ldi	r19, 0x00	; 0
    627a:	a3 01       	movw	r20, r6
    627c:	1e d4       	rcall	.+2108   	; 0x6aba <__ultoa_invert>
    627e:	e8 2e       	mov	r14, r24
    6280:	e6 18       	sub	r14, r6
    6282:	3e c0       	rjmp	.+124    	; 0x6300 <vfprintf+0x574>
    6284:	02 2f       	mov	r16, r18
    6286:	85 37       	cpi	r24, 0x75	; 117
    6288:	21 f4       	brne	.+8      	; 0x6292 <vfprintf+0x506>
    628a:	0f 7e       	andi	r16, 0xEF	; 239
    628c:	2a e0       	ldi	r18, 0x0A	; 10
    628e:	30 e0       	ldi	r19, 0x00	; 0
    6290:	1d c0       	rjmp	.+58     	; 0x62cc <vfprintf+0x540>
    6292:	09 7f       	andi	r16, 0xF9	; 249
    6294:	8f 36       	cpi	r24, 0x6F	; 111
    6296:	91 f0       	breq	.+36     	; 0x62bc <vfprintf+0x530>
    6298:	18 f4       	brcc	.+6      	; 0x62a0 <vfprintf+0x514>
    629a:	88 35       	cpi	r24, 0x58	; 88
    629c:	59 f0       	breq	.+22     	; 0x62b4 <vfprintf+0x528>
    629e:	be c0       	rjmp	.+380    	; 0x641c <vfprintf+0x690>
    62a0:	80 37       	cpi	r24, 0x70	; 112
    62a2:	19 f0       	breq	.+6      	; 0x62aa <vfprintf+0x51e>
    62a4:	88 37       	cpi	r24, 0x78	; 120
    62a6:	11 f0       	breq	.+4      	; 0x62ac <vfprintf+0x520>
    62a8:	b9 c0       	rjmp	.+370    	; 0x641c <vfprintf+0x690>
    62aa:	00 61       	ori	r16, 0x10	; 16
    62ac:	04 ff       	sbrs	r16, 4
    62ae:	09 c0       	rjmp	.+18     	; 0x62c2 <vfprintf+0x536>
    62b0:	04 60       	ori	r16, 0x04	; 4
    62b2:	07 c0       	rjmp	.+14     	; 0x62c2 <vfprintf+0x536>
    62b4:	24 ff       	sbrs	r18, 4
    62b6:	08 c0       	rjmp	.+16     	; 0x62c8 <vfprintf+0x53c>
    62b8:	06 60       	ori	r16, 0x06	; 6
    62ba:	06 c0       	rjmp	.+12     	; 0x62c8 <vfprintf+0x53c>
    62bc:	28 e0       	ldi	r18, 0x08	; 8
    62be:	30 e0       	ldi	r19, 0x00	; 0
    62c0:	05 c0       	rjmp	.+10     	; 0x62cc <vfprintf+0x540>
    62c2:	20 e1       	ldi	r18, 0x10	; 16
    62c4:	30 e0       	ldi	r19, 0x00	; 0
    62c6:	02 c0       	rjmp	.+4      	; 0x62cc <vfprintf+0x540>
    62c8:	20 e1       	ldi	r18, 0x10	; 16
    62ca:	32 e0       	ldi	r19, 0x02	; 2
    62cc:	52 01       	movw	r10, r4
    62ce:	07 ff       	sbrs	r16, 7
    62d0:	09 c0       	rjmp	.+18     	; 0x62e4 <vfprintf+0x558>
    62d2:	f4 e0       	ldi	r31, 0x04	; 4
    62d4:	af 0e       	add	r10, r31
    62d6:	b1 1c       	adc	r11, r1
    62d8:	f2 01       	movw	r30, r4
    62da:	60 81       	ld	r22, Z
    62dc:	71 81       	ldd	r23, Z+1	; 0x01
    62de:	82 81       	ldd	r24, Z+2	; 0x02
    62e0:	93 81       	ldd	r25, Z+3	; 0x03
    62e2:	08 c0       	rjmp	.+16     	; 0x62f4 <vfprintf+0x568>
    62e4:	f2 e0       	ldi	r31, 0x02	; 2
    62e6:	af 0e       	add	r10, r31
    62e8:	b1 1c       	adc	r11, r1
    62ea:	f2 01       	movw	r30, r4
    62ec:	60 81       	ld	r22, Z
    62ee:	71 81       	ldd	r23, Z+1	; 0x01
    62f0:	80 e0       	ldi	r24, 0x00	; 0
    62f2:	90 e0       	ldi	r25, 0x00	; 0
    62f4:	a3 01       	movw	r20, r6
    62f6:	e1 d3       	rcall	.+1986   	; 0x6aba <__ultoa_invert>
    62f8:	e8 2e       	mov	r14, r24
    62fa:	e6 18       	sub	r14, r6
    62fc:	0f 77       	andi	r16, 0x7F	; 127
    62fe:	30 2e       	mov	r3, r16
    6300:	36 fe       	sbrs	r3, 6
    6302:	0b c0       	rjmp	.+22     	; 0x631a <vfprintf+0x58e>
    6304:	33 2d       	mov	r19, r3
    6306:	3e 7f       	andi	r19, 0xFE	; 254
    6308:	e1 16       	cp	r14, r17
    630a:	50 f4       	brcc	.+20     	; 0x6320 <vfprintf+0x594>
    630c:	34 fe       	sbrs	r3, 4
    630e:	0a c0       	rjmp	.+20     	; 0x6324 <vfprintf+0x598>
    6310:	32 fc       	sbrc	r3, 2
    6312:	08 c0       	rjmp	.+16     	; 0x6324 <vfprintf+0x598>
    6314:	33 2d       	mov	r19, r3
    6316:	3e 7e       	andi	r19, 0xEE	; 238
    6318:	05 c0       	rjmp	.+10     	; 0x6324 <vfprintf+0x598>
    631a:	0e 2d       	mov	r16, r14
    631c:	33 2d       	mov	r19, r3
    631e:	03 c0       	rjmp	.+6      	; 0x6326 <vfprintf+0x59a>
    6320:	0e 2d       	mov	r16, r14
    6322:	01 c0       	rjmp	.+2      	; 0x6326 <vfprintf+0x59a>
    6324:	01 2f       	mov	r16, r17
    6326:	34 ff       	sbrs	r19, 4
    6328:	0c c0       	rjmp	.+24     	; 0x6342 <vfprintf+0x5b6>
    632a:	fe 01       	movw	r30, r28
    632c:	ee 0d       	add	r30, r14
    632e:	f1 1d       	adc	r31, r1
    6330:	80 81       	ld	r24, Z
    6332:	80 33       	cpi	r24, 0x30	; 48
    6334:	11 f4       	brne	.+4      	; 0x633a <vfprintf+0x5ae>
    6336:	39 7e       	andi	r19, 0xE9	; 233
    6338:	08 c0       	rjmp	.+16     	; 0x634a <vfprintf+0x5be>
    633a:	32 ff       	sbrs	r19, 2
    633c:	05 c0       	rjmp	.+10     	; 0x6348 <vfprintf+0x5bc>
    633e:	0e 5f       	subi	r16, 0xFE	; 254
    6340:	04 c0       	rjmp	.+8      	; 0x634a <vfprintf+0x5be>
    6342:	83 2f       	mov	r24, r19
    6344:	86 78       	andi	r24, 0x86	; 134
    6346:	09 f0       	breq	.+2      	; 0x634a <vfprintf+0x5be>
    6348:	0f 5f       	subi	r16, 0xFF	; 255
    634a:	33 fd       	sbrc	r19, 3
    634c:	12 c0       	rjmp	.+36     	; 0x6372 <vfprintf+0x5e6>
    634e:	30 ff       	sbrs	r19, 0
    6350:	06 c0       	rjmp	.+12     	; 0x635e <vfprintf+0x5d2>
    6352:	1e 2d       	mov	r17, r14
    6354:	0f 15       	cp	r16, r15
    6356:	18 f4       	brcc	.+6      	; 0x635e <vfprintf+0x5d2>
    6358:	1f 0d       	add	r17, r15
    635a:	10 1b       	sub	r17, r16
    635c:	0f 2d       	mov	r16, r15
    635e:	0f 15       	cp	r16, r15
    6360:	60 f4       	brcc	.+24     	; 0x637a <vfprintf+0x5ee>
    6362:	b6 01       	movw	r22, r12
    6364:	80 e2       	ldi	r24, 0x20	; 32
    6366:	90 e0       	ldi	r25, 0x00	; 0
    6368:	3b 8b       	std	Y+19, r19	; 0x13
    636a:	27 d3       	rcall	.+1614   	; 0x69ba <fputc>
    636c:	0f 5f       	subi	r16, 0xFF	; 255
    636e:	3b 89       	ldd	r19, Y+19	; 0x13
    6370:	f6 cf       	rjmp	.-20     	; 0x635e <vfprintf+0x5d2>
    6372:	0f 15       	cp	r16, r15
    6374:	10 f4       	brcc	.+4      	; 0x637a <vfprintf+0x5ee>
    6376:	f0 1a       	sub	r15, r16
    6378:	01 c0       	rjmp	.+2      	; 0x637c <vfprintf+0x5f0>
    637a:	f1 2c       	mov	r15, r1
    637c:	34 ff       	sbrs	r19, 4
    637e:	11 c0       	rjmp	.+34     	; 0x63a2 <vfprintf+0x616>
    6380:	b6 01       	movw	r22, r12
    6382:	80 e3       	ldi	r24, 0x30	; 48
    6384:	90 e0       	ldi	r25, 0x00	; 0
    6386:	3b 8b       	std	Y+19, r19	; 0x13
    6388:	18 d3       	rcall	.+1584   	; 0x69ba <fputc>
    638a:	3b 89       	ldd	r19, Y+19	; 0x13
    638c:	32 ff       	sbrs	r19, 2
    638e:	16 c0       	rjmp	.+44     	; 0x63bc <vfprintf+0x630>
    6390:	31 fd       	sbrc	r19, 1
    6392:	03 c0       	rjmp	.+6      	; 0x639a <vfprintf+0x60e>
    6394:	88 e7       	ldi	r24, 0x78	; 120
    6396:	90 e0       	ldi	r25, 0x00	; 0
    6398:	02 c0       	rjmp	.+4      	; 0x639e <vfprintf+0x612>
    639a:	88 e5       	ldi	r24, 0x58	; 88
    639c:	90 e0       	ldi	r25, 0x00	; 0
    639e:	b6 01       	movw	r22, r12
    63a0:	0c c0       	rjmp	.+24     	; 0x63ba <vfprintf+0x62e>
    63a2:	83 2f       	mov	r24, r19
    63a4:	86 78       	andi	r24, 0x86	; 134
    63a6:	51 f0       	breq	.+20     	; 0x63bc <vfprintf+0x630>
    63a8:	31 ff       	sbrs	r19, 1
    63aa:	02 c0       	rjmp	.+4      	; 0x63b0 <vfprintf+0x624>
    63ac:	8b e2       	ldi	r24, 0x2B	; 43
    63ae:	01 c0       	rjmp	.+2      	; 0x63b2 <vfprintf+0x626>
    63b0:	80 e2       	ldi	r24, 0x20	; 32
    63b2:	37 fd       	sbrc	r19, 7
    63b4:	8d e2       	ldi	r24, 0x2D	; 45
    63b6:	b6 01       	movw	r22, r12
    63b8:	90 e0       	ldi	r25, 0x00	; 0
    63ba:	ff d2       	rcall	.+1534   	; 0x69ba <fputc>
    63bc:	e1 16       	cp	r14, r17
    63be:	30 f4       	brcc	.+12     	; 0x63cc <vfprintf+0x640>
    63c0:	b6 01       	movw	r22, r12
    63c2:	80 e3       	ldi	r24, 0x30	; 48
    63c4:	90 e0       	ldi	r25, 0x00	; 0
    63c6:	f9 d2       	rcall	.+1522   	; 0x69ba <fputc>
    63c8:	11 50       	subi	r17, 0x01	; 1
    63ca:	f8 cf       	rjmp	.-16     	; 0x63bc <vfprintf+0x630>
    63cc:	ea 94       	dec	r14
    63ce:	f3 01       	movw	r30, r6
    63d0:	ee 0d       	add	r30, r14
    63d2:	f1 1d       	adc	r31, r1
    63d4:	80 81       	ld	r24, Z
    63d6:	b6 01       	movw	r22, r12
    63d8:	90 e0       	ldi	r25, 0x00	; 0
    63da:	ef d2       	rcall	.+1502   	; 0x69ba <fputc>
    63dc:	e1 10       	cpse	r14, r1
    63de:	f6 cf       	rjmp	.-20     	; 0x63cc <vfprintf+0x640>
    63e0:	14 c0       	rjmp	.+40     	; 0x640a <vfprintf+0x67e>
    63e2:	f4 e0       	ldi	r31, 0x04	; 4
    63e4:	ff 15       	cp	r31, r15
    63e6:	48 f5       	brcc	.+82     	; 0x643a <vfprintf+0x6ae>
    63e8:	84 e0       	ldi	r24, 0x04	; 4
    63ea:	f8 1a       	sub	r15, r24
    63ec:	33 fe       	sbrs	r3, 3
    63ee:	1d c0       	rjmp	.+58     	; 0x642a <vfprintf+0x69e>
    63f0:	21 10       	cpse	r2, r1
    63f2:	24 c0       	rjmp	.+72     	; 0x643c <vfprintf+0x6b0>
    63f4:	03 ff       	sbrs	r16, 3
    63f6:	27 c0       	rjmp	.+78     	; 0x6446 <vfprintf+0x6ba>
    63f8:	02 e4       	ldi	r16, 0x42	; 66
    63fa:	11 e0       	ldi	r17, 0x01	; 1
    63fc:	f3 2d       	mov	r31, r3
    63fe:	f0 71       	andi	r31, 0x10	; 16
    6400:	3f 2e       	mov	r3, r31
    6402:	f8 01       	movw	r30, r16
    6404:	84 91       	lpm	r24, Z
    6406:	81 11       	cpse	r24, r1
    6408:	21 c0       	rjmp	.+66     	; 0x644c <vfprintf+0x6c0>
    640a:	ff 20       	and	r15, r15
    640c:	09 f4       	brne	.+2      	; 0x6410 <vfprintf+0x684>
    640e:	fd cc       	rjmp	.-1542   	; 0x5e0a <vfprintf+0x7e>
    6410:	b6 01       	movw	r22, r12
    6412:	80 e2       	ldi	r24, 0x20	; 32
    6414:	90 e0       	ldi	r25, 0x00	; 0
    6416:	d1 d2       	rcall	.+1442   	; 0x69ba <fputc>
    6418:	fa 94       	dec	r15
    641a:	f7 cf       	rjmp	.-18     	; 0x640a <vfprintf+0x67e>
    641c:	f6 01       	movw	r30, r12
    641e:	86 81       	ldd	r24, Z+6	; 0x06
    6420:	97 81       	ldd	r25, Z+7	; 0x07
    6422:	23 c0       	rjmp	.+70     	; 0x646a <vfprintf+0x6de>
    6424:	8f ef       	ldi	r24, 0xFF	; 255
    6426:	9f ef       	ldi	r25, 0xFF	; 255
    6428:	20 c0       	rjmp	.+64     	; 0x646a <vfprintf+0x6de>
    642a:	b6 01       	movw	r22, r12
    642c:	80 e2       	ldi	r24, 0x20	; 32
    642e:	90 e0       	ldi	r25, 0x00	; 0
    6430:	c4 d2       	rcall	.+1416   	; 0x69ba <fputc>
    6432:	fa 94       	dec	r15
    6434:	f1 10       	cpse	r15, r1
    6436:	f9 cf       	rjmp	.-14     	; 0x642a <vfprintf+0x69e>
    6438:	db cf       	rjmp	.-74     	; 0x63f0 <vfprintf+0x664>
    643a:	f1 2c       	mov	r15, r1
    643c:	b6 01       	movw	r22, r12
    643e:	82 2d       	mov	r24, r2
    6440:	90 e0       	ldi	r25, 0x00	; 0
    6442:	bb d2       	rcall	.+1398   	; 0x69ba <fputc>
    6444:	d7 cf       	rjmp	.-82     	; 0x63f4 <vfprintf+0x668>
    6446:	06 e4       	ldi	r16, 0x46	; 70
    6448:	11 e0       	ldi	r17, 0x01	; 1
    644a:	d8 cf       	rjmp	.-80     	; 0x63fc <vfprintf+0x670>
    644c:	31 10       	cpse	r3, r1
    644e:	80 52       	subi	r24, 0x20	; 32
    6450:	b6 01       	movw	r22, r12
    6452:	90 e0       	ldi	r25, 0x00	; 0
    6454:	b2 d2       	rcall	.+1380   	; 0x69ba <fputc>
    6456:	0f 5f       	subi	r16, 0xFF	; 255
    6458:	1f 4f       	sbci	r17, 0xFF	; 255
    645a:	d3 cf       	rjmp	.-90     	; 0x6402 <vfprintf+0x676>
    645c:	23 e0       	ldi	r18, 0x03	; 3
    645e:	2f 15       	cp	r18, r15
    6460:	10 f4       	brcc	.+4      	; 0x6466 <vfprintf+0x6da>
    6462:	83 e0       	ldi	r24, 0x03	; 3
    6464:	c2 cf       	rjmp	.-124    	; 0x63ea <vfprintf+0x65e>
    6466:	f1 2c       	mov	r15, r1
    6468:	c5 cf       	rjmp	.-118    	; 0x63f4 <vfprintf+0x668>
    646a:	63 96       	adiw	r28, 0x13	; 19
    646c:	0f b6       	in	r0, 0x3f	; 63
    646e:	f8 94       	cli
    6470:	de bf       	out	0x3e, r29	; 62
    6472:	0f be       	out	0x3f, r0	; 63
    6474:	cd bf       	out	0x3d, r28	; 61
    6476:	df 91       	pop	r29
    6478:	cf 91       	pop	r28
    647a:	1f 91       	pop	r17
    647c:	0f 91       	pop	r16
    647e:	ff 90       	pop	r15
    6480:	ef 90       	pop	r14
    6482:	df 90       	pop	r13
    6484:	cf 90       	pop	r12
    6486:	bf 90       	pop	r11
    6488:	af 90       	pop	r10
    648a:	9f 90       	pop	r9
    648c:	8f 90       	pop	r8
    648e:	7f 90       	pop	r7
    6490:	6f 90       	pop	r6
    6492:	5f 90       	pop	r5
    6494:	4f 90       	pop	r4
    6496:	3f 90       	pop	r3
    6498:	2f 90       	pop	r2
    649a:	08 95       	ret

0000649c <__mulsi3>:
    649c:	db 01       	movw	r26, r22
    649e:	8f 93       	push	r24
    64a0:	9f 93       	push	r25
    64a2:	51 d0       	rcall	.+162    	; 0x6546 <__muluhisi3>
    64a4:	bf 91       	pop	r27
    64a6:	af 91       	pop	r26
    64a8:	a2 9f       	mul	r26, r18
    64aa:	80 0d       	add	r24, r0
    64ac:	91 1d       	adc	r25, r1
    64ae:	a3 9f       	mul	r26, r19
    64b0:	90 0d       	add	r25, r0
    64b2:	b2 9f       	mul	r27, r18
    64b4:	90 0d       	add	r25, r0
    64b6:	11 24       	eor	r1, r1
    64b8:	08 95       	ret

000064ba <__udivmodsi4>:
    64ba:	a1 e2       	ldi	r26, 0x21	; 33
    64bc:	1a 2e       	mov	r1, r26
    64be:	aa 1b       	sub	r26, r26
    64c0:	bb 1b       	sub	r27, r27
    64c2:	fd 01       	movw	r30, r26
    64c4:	0d c0       	rjmp	.+26     	; 0x64e0 <__udivmodsi4_ep>

000064c6 <__udivmodsi4_loop>:
    64c6:	aa 1f       	adc	r26, r26
    64c8:	bb 1f       	adc	r27, r27
    64ca:	ee 1f       	adc	r30, r30
    64cc:	ff 1f       	adc	r31, r31
    64ce:	a2 17       	cp	r26, r18
    64d0:	b3 07       	cpc	r27, r19
    64d2:	e4 07       	cpc	r30, r20
    64d4:	f5 07       	cpc	r31, r21
    64d6:	20 f0       	brcs	.+8      	; 0x64e0 <__udivmodsi4_ep>
    64d8:	a2 1b       	sub	r26, r18
    64da:	b3 0b       	sbc	r27, r19
    64dc:	e4 0b       	sbc	r30, r20
    64de:	f5 0b       	sbc	r31, r21

000064e0 <__udivmodsi4_ep>:
    64e0:	66 1f       	adc	r22, r22
    64e2:	77 1f       	adc	r23, r23
    64e4:	88 1f       	adc	r24, r24
    64e6:	99 1f       	adc	r25, r25
    64e8:	1a 94       	dec	r1
    64ea:	69 f7       	brne	.-38     	; 0x64c6 <__udivmodsi4_loop>
    64ec:	60 95       	com	r22
    64ee:	70 95       	com	r23
    64f0:	80 95       	com	r24
    64f2:	90 95       	com	r25
    64f4:	9b 01       	movw	r18, r22
    64f6:	ac 01       	movw	r20, r24
    64f8:	bd 01       	movw	r22, r26
    64fa:	cf 01       	movw	r24, r30
    64fc:	08 95       	ret

000064fe <__divmodsi4>:
    64fe:	05 2e       	mov	r0, r21
    6500:	97 fb       	bst	r25, 7
    6502:	16 f4       	brtc	.+4      	; 0x6508 <__divmodsi4+0xa>
    6504:	00 94       	com	r0
    6506:	0f d0       	rcall	.+30     	; 0x6526 <__negsi2>
    6508:	57 fd       	sbrc	r21, 7
    650a:	05 d0       	rcall	.+10     	; 0x6516 <__divmodsi4_neg2>
    650c:	d6 df       	rcall	.-84     	; 0x64ba <__udivmodsi4>
    650e:	07 fc       	sbrc	r0, 7
    6510:	02 d0       	rcall	.+4      	; 0x6516 <__divmodsi4_neg2>
    6512:	46 f4       	brtc	.+16     	; 0x6524 <__divmodsi4_exit>
    6514:	08 c0       	rjmp	.+16     	; 0x6526 <__negsi2>

00006516 <__divmodsi4_neg2>:
    6516:	50 95       	com	r21
    6518:	40 95       	com	r20
    651a:	30 95       	com	r19
    651c:	21 95       	neg	r18
    651e:	3f 4f       	sbci	r19, 0xFF	; 255
    6520:	4f 4f       	sbci	r20, 0xFF	; 255
    6522:	5f 4f       	sbci	r21, 0xFF	; 255

00006524 <__divmodsi4_exit>:
    6524:	08 95       	ret

00006526 <__negsi2>:
    6526:	90 95       	com	r25
    6528:	80 95       	com	r24
    652a:	70 95       	com	r23
    652c:	61 95       	neg	r22
    652e:	7f 4f       	sbci	r23, 0xFF	; 255
    6530:	8f 4f       	sbci	r24, 0xFF	; 255
    6532:	9f 4f       	sbci	r25, 0xFF	; 255
    6534:	08 95       	ret

00006536 <__tablejump2__>:
    6536:	ee 0f       	add	r30, r30
    6538:	ff 1f       	adc	r31, r31
    653a:	88 1f       	adc	r24, r24
    653c:	8b bf       	out	0x3b, r24	; 59
    653e:	07 90       	elpm	r0, Z+
    6540:	f6 91       	elpm	r31, Z
    6542:	e0 2d       	mov	r30, r0
    6544:	19 94       	eijmp

00006546 <__muluhisi3>:
    6546:	0f d0       	rcall	.+30     	; 0x6566 <__umulhisi3>
    6548:	a5 9f       	mul	r26, r21
    654a:	90 0d       	add	r25, r0
    654c:	b4 9f       	mul	r27, r20
    654e:	90 0d       	add	r25, r0
    6550:	a4 9f       	mul	r26, r20
    6552:	80 0d       	add	r24, r0
    6554:	91 1d       	adc	r25, r1
    6556:	11 24       	eor	r1, r1
    6558:	08 95       	ret

0000655a <__mulshisi3>:
    655a:	b7 ff       	sbrs	r27, 7
    655c:	f4 cf       	rjmp	.-24     	; 0x6546 <__muluhisi3>

0000655e <__mulohisi3>:
    655e:	f3 df       	rcall	.-26     	; 0x6546 <__muluhisi3>
    6560:	82 1b       	sub	r24, r18
    6562:	93 0b       	sbc	r25, r19
    6564:	08 95       	ret

00006566 <__umulhisi3>:
    6566:	a2 9f       	mul	r26, r18
    6568:	b0 01       	movw	r22, r0
    656a:	b3 9f       	mul	r27, r19
    656c:	c0 01       	movw	r24, r0
    656e:	a3 9f       	mul	r26, r19
    6570:	70 0d       	add	r23, r0
    6572:	81 1d       	adc	r24, r1
    6574:	11 24       	eor	r1, r1
    6576:	91 1d       	adc	r25, r1
    6578:	b2 9f       	mul	r27, r18
    657a:	70 0d       	add	r23, r0
    657c:	81 1d       	adc	r24, r1
    657e:	11 24       	eor	r1, r1
    6580:	91 1d       	adc	r25, r1
    6582:	08 95       	ret

00006584 <malloc>:
    6584:	cf 93       	push	r28
    6586:	df 93       	push	r29
    6588:	82 30       	cpi	r24, 0x02	; 2
    658a:	91 05       	cpc	r25, r1
    658c:	10 f4       	brcc	.+4      	; 0x6592 <malloc+0xe>
    658e:	82 e0       	ldi	r24, 0x02	; 2
    6590:	90 e0       	ldi	r25, 0x00	; 0
    6592:	e0 91 ff 0d 	lds	r30, 0x0DFF
    6596:	f0 91 00 0e 	lds	r31, 0x0E00
    659a:	20 e0       	ldi	r18, 0x00	; 0
    659c:	30 e0       	ldi	r19, 0x00	; 0
    659e:	c0 e0       	ldi	r28, 0x00	; 0
    65a0:	d0 e0       	ldi	r29, 0x00	; 0
    65a2:	30 97       	sbiw	r30, 0x00	; 0
    65a4:	11 f1       	breq	.+68     	; 0x65ea <malloc+0x66>
    65a6:	40 81       	ld	r20, Z
    65a8:	51 81       	ldd	r21, Z+1	; 0x01
    65aa:	48 17       	cp	r20, r24
    65ac:	59 07       	cpc	r21, r25
    65ae:	c0 f0       	brcs	.+48     	; 0x65e0 <malloc+0x5c>
    65b0:	48 17       	cp	r20, r24
    65b2:	59 07       	cpc	r21, r25
    65b4:	61 f4       	brne	.+24     	; 0x65ce <malloc+0x4a>
    65b6:	82 81       	ldd	r24, Z+2	; 0x02
    65b8:	93 81       	ldd	r25, Z+3	; 0x03
    65ba:	20 97       	sbiw	r28, 0x00	; 0
    65bc:	19 f0       	breq	.+6      	; 0x65c4 <malloc+0x40>
    65be:	9b 83       	std	Y+3, r25	; 0x03
    65c0:	8a 83       	std	Y+2, r24	; 0x02
    65c2:	2b c0       	rjmp	.+86     	; 0x661a <malloc+0x96>
    65c4:	90 93 00 0e 	sts	0x0E00, r25
    65c8:	80 93 ff 0d 	sts	0x0DFF, r24
    65cc:	26 c0       	rjmp	.+76     	; 0x661a <malloc+0x96>
    65ce:	21 15       	cp	r18, r1
    65d0:	31 05       	cpc	r19, r1
    65d2:	19 f0       	breq	.+6      	; 0x65da <malloc+0x56>
    65d4:	42 17       	cp	r20, r18
    65d6:	53 07       	cpc	r21, r19
    65d8:	18 f4       	brcc	.+6      	; 0x65e0 <malloc+0x5c>
    65da:	9a 01       	movw	r18, r20
    65dc:	be 01       	movw	r22, r28
    65de:	df 01       	movw	r26, r30
    65e0:	ef 01       	movw	r28, r30
    65e2:	02 80       	ldd	r0, Z+2	; 0x02
    65e4:	f3 81       	ldd	r31, Z+3	; 0x03
    65e6:	e0 2d       	mov	r30, r0
    65e8:	dc cf       	rjmp	.-72     	; 0x65a2 <malloc+0x1e>
    65ea:	21 15       	cp	r18, r1
    65ec:	31 05       	cpc	r19, r1
    65ee:	09 f1       	breq	.+66     	; 0x6632 <malloc+0xae>
    65f0:	28 1b       	sub	r18, r24
    65f2:	39 0b       	sbc	r19, r25
    65f4:	24 30       	cpi	r18, 0x04	; 4
    65f6:	31 05       	cpc	r19, r1
    65f8:	90 f4       	brcc	.+36     	; 0x661e <malloc+0x9a>
    65fa:	12 96       	adiw	r26, 0x02	; 2
    65fc:	8d 91       	ld	r24, X+
    65fe:	9c 91       	ld	r25, X
    6600:	13 97       	sbiw	r26, 0x03	; 3
    6602:	61 15       	cp	r22, r1
    6604:	71 05       	cpc	r23, r1
    6606:	21 f0       	breq	.+8      	; 0x6610 <malloc+0x8c>
    6608:	fb 01       	movw	r30, r22
    660a:	93 83       	std	Z+3, r25	; 0x03
    660c:	82 83       	std	Z+2, r24	; 0x02
    660e:	04 c0       	rjmp	.+8      	; 0x6618 <malloc+0x94>
    6610:	90 93 00 0e 	sts	0x0E00, r25
    6614:	80 93 ff 0d 	sts	0x0DFF, r24
    6618:	fd 01       	movw	r30, r26
    661a:	32 96       	adiw	r30, 0x02	; 2
    661c:	44 c0       	rjmp	.+136    	; 0x66a6 <malloc+0x122>
    661e:	fd 01       	movw	r30, r26
    6620:	e2 0f       	add	r30, r18
    6622:	f3 1f       	adc	r31, r19
    6624:	81 93       	st	Z+, r24
    6626:	91 93       	st	Z+, r25
    6628:	22 50       	subi	r18, 0x02	; 2
    662a:	31 09       	sbc	r19, r1
    662c:	2d 93       	st	X+, r18
    662e:	3c 93       	st	X, r19
    6630:	3a c0       	rjmp	.+116    	; 0x66a6 <malloc+0x122>
    6632:	20 91 fd 0d 	lds	r18, 0x0DFD
    6636:	30 91 fe 0d 	lds	r19, 0x0DFE
    663a:	23 2b       	or	r18, r19
    663c:	41 f4       	brne	.+16     	; 0x664e <malloc+0xca>
    663e:	20 91 02 02 	lds	r18, 0x0202
    6642:	30 91 03 02 	lds	r19, 0x0203
    6646:	30 93 fe 0d 	sts	0x0DFE, r19
    664a:	20 93 fd 0d 	sts	0x0DFD, r18
    664e:	20 91 00 02 	lds	r18, 0x0200
    6652:	30 91 01 02 	lds	r19, 0x0201
    6656:	21 15       	cp	r18, r1
    6658:	31 05       	cpc	r19, r1
    665a:	41 f4       	brne	.+16     	; 0x666c <malloc+0xe8>
    665c:	2d b7       	in	r18, 0x3d	; 61
    665e:	3e b7       	in	r19, 0x3e	; 62
    6660:	40 91 04 02 	lds	r20, 0x0204
    6664:	50 91 05 02 	lds	r21, 0x0205
    6668:	24 1b       	sub	r18, r20
    666a:	35 0b       	sbc	r19, r21
    666c:	e0 91 fd 0d 	lds	r30, 0x0DFD
    6670:	f0 91 fe 0d 	lds	r31, 0x0DFE
    6674:	e2 17       	cp	r30, r18
    6676:	f3 07       	cpc	r31, r19
    6678:	a0 f4       	brcc	.+40     	; 0x66a2 <malloc+0x11e>
    667a:	2e 1b       	sub	r18, r30
    667c:	3f 0b       	sbc	r19, r31
    667e:	28 17       	cp	r18, r24
    6680:	39 07       	cpc	r19, r25
    6682:	78 f0       	brcs	.+30     	; 0x66a2 <malloc+0x11e>
    6684:	ac 01       	movw	r20, r24
    6686:	4e 5f       	subi	r20, 0xFE	; 254
    6688:	5f 4f       	sbci	r21, 0xFF	; 255
    668a:	24 17       	cp	r18, r20
    668c:	35 07       	cpc	r19, r21
    668e:	48 f0       	brcs	.+18     	; 0x66a2 <malloc+0x11e>
    6690:	4e 0f       	add	r20, r30
    6692:	5f 1f       	adc	r21, r31
    6694:	50 93 fe 0d 	sts	0x0DFE, r21
    6698:	40 93 fd 0d 	sts	0x0DFD, r20
    669c:	81 93       	st	Z+, r24
    669e:	91 93       	st	Z+, r25
    66a0:	02 c0       	rjmp	.+4      	; 0x66a6 <malloc+0x122>
    66a2:	e0 e0       	ldi	r30, 0x00	; 0
    66a4:	f0 e0       	ldi	r31, 0x00	; 0
    66a6:	cf 01       	movw	r24, r30
    66a8:	df 91       	pop	r29
    66aa:	cf 91       	pop	r28
    66ac:	08 95       	ret

000066ae <free>:
    66ae:	0f 93       	push	r16
    66b0:	1f 93       	push	r17
    66b2:	cf 93       	push	r28
    66b4:	df 93       	push	r29
    66b6:	00 97       	sbiw	r24, 0x00	; 0
    66b8:	09 f4       	brne	.+2      	; 0x66bc <free+0xe>
    66ba:	8c c0       	rjmp	.+280    	; 0x67d4 <free+0x126>
    66bc:	fc 01       	movw	r30, r24
    66be:	32 97       	sbiw	r30, 0x02	; 2
    66c0:	13 82       	std	Z+3, r1	; 0x03
    66c2:	12 82       	std	Z+2, r1	; 0x02
    66c4:	00 91 ff 0d 	lds	r16, 0x0DFF
    66c8:	10 91 00 0e 	lds	r17, 0x0E00
    66cc:	01 15       	cp	r16, r1
    66ce:	11 05       	cpc	r17, r1
    66d0:	81 f4       	brne	.+32     	; 0x66f2 <free+0x44>
    66d2:	20 81       	ld	r18, Z
    66d4:	31 81       	ldd	r19, Z+1	; 0x01
    66d6:	82 0f       	add	r24, r18
    66d8:	93 1f       	adc	r25, r19
    66da:	20 91 fd 0d 	lds	r18, 0x0DFD
    66de:	30 91 fe 0d 	lds	r19, 0x0DFE
    66e2:	28 17       	cp	r18, r24
    66e4:	39 07       	cpc	r19, r25
    66e6:	79 f5       	brne	.+94     	; 0x6746 <free+0x98>
    66e8:	f0 93 fe 0d 	sts	0x0DFE, r31
    66ec:	e0 93 fd 0d 	sts	0x0DFD, r30
    66f0:	71 c0       	rjmp	.+226    	; 0x67d4 <free+0x126>
    66f2:	d8 01       	movw	r26, r16
    66f4:	40 e0       	ldi	r20, 0x00	; 0
    66f6:	50 e0       	ldi	r21, 0x00	; 0
    66f8:	ae 17       	cp	r26, r30
    66fa:	bf 07       	cpc	r27, r31
    66fc:	50 f4       	brcc	.+20     	; 0x6712 <free+0x64>
    66fe:	12 96       	adiw	r26, 0x02	; 2
    6700:	2d 91       	ld	r18, X+
    6702:	3c 91       	ld	r19, X
    6704:	13 97       	sbiw	r26, 0x03	; 3
    6706:	ad 01       	movw	r20, r26
    6708:	21 15       	cp	r18, r1
    670a:	31 05       	cpc	r19, r1
    670c:	09 f1       	breq	.+66     	; 0x6750 <free+0xa2>
    670e:	d9 01       	movw	r26, r18
    6710:	f3 cf       	rjmp	.-26     	; 0x66f8 <free+0x4a>
    6712:	9d 01       	movw	r18, r26
    6714:	da 01       	movw	r26, r20
    6716:	33 83       	std	Z+3, r19	; 0x03
    6718:	22 83       	std	Z+2, r18	; 0x02
    671a:	60 81       	ld	r22, Z
    671c:	71 81       	ldd	r23, Z+1	; 0x01
    671e:	86 0f       	add	r24, r22
    6720:	97 1f       	adc	r25, r23
    6722:	82 17       	cp	r24, r18
    6724:	93 07       	cpc	r25, r19
    6726:	69 f4       	brne	.+26     	; 0x6742 <free+0x94>
    6728:	ec 01       	movw	r28, r24
    672a:	28 81       	ld	r18, Y
    672c:	39 81       	ldd	r19, Y+1	; 0x01
    672e:	26 0f       	add	r18, r22
    6730:	37 1f       	adc	r19, r23
    6732:	2e 5f       	subi	r18, 0xFE	; 254
    6734:	3f 4f       	sbci	r19, 0xFF	; 255
    6736:	31 83       	std	Z+1, r19	; 0x01
    6738:	20 83       	st	Z, r18
    673a:	8a 81       	ldd	r24, Y+2	; 0x02
    673c:	9b 81       	ldd	r25, Y+3	; 0x03
    673e:	93 83       	std	Z+3, r25	; 0x03
    6740:	82 83       	std	Z+2, r24	; 0x02
    6742:	45 2b       	or	r20, r21
    6744:	29 f4       	brne	.+10     	; 0x6750 <free+0xa2>
    6746:	f0 93 00 0e 	sts	0x0E00, r31
    674a:	e0 93 ff 0d 	sts	0x0DFF, r30
    674e:	42 c0       	rjmp	.+132    	; 0x67d4 <free+0x126>
    6750:	13 96       	adiw	r26, 0x03	; 3
    6752:	fc 93       	st	X, r31
    6754:	ee 93       	st	-X, r30
    6756:	12 97       	sbiw	r26, 0x02	; 2
    6758:	ed 01       	movw	r28, r26
    675a:	49 91       	ld	r20, Y+
    675c:	59 91       	ld	r21, Y+
    675e:	9e 01       	movw	r18, r28
    6760:	24 0f       	add	r18, r20
    6762:	35 1f       	adc	r19, r21
    6764:	e2 17       	cp	r30, r18
    6766:	f3 07       	cpc	r31, r19
    6768:	71 f4       	brne	.+28     	; 0x6786 <free+0xd8>
    676a:	80 81       	ld	r24, Z
    676c:	91 81       	ldd	r25, Z+1	; 0x01
    676e:	84 0f       	add	r24, r20
    6770:	95 1f       	adc	r25, r21
    6772:	02 96       	adiw	r24, 0x02	; 2
    6774:	11 96       	adiw	r26, 0x01	; 1
    6776:	9c 93       	st	X, r25
    6778:	8e 93       	st	-X, r24
    677a:	82 81       	ldd	r24, Z+2	; 0x02
    677c:	93 81       	ldd	r25, Z+3	; 0x03
    677e:	13 96       	adiw	r26, 0x03	; 3
    6780:	9c 93       	st	X, r25
    6782:	8e 93       	st	-X, r24
    6784:	12 97       	sbiw	r26, 0x02	; 2
    6786:	e0 e0       	ldi	r30, 0x00	; 0
    6788:	f0 e0       	ldi	r31, 0x00	; 0
    678a:	d8 01       	movw	r26, r16
    678c:	12 96       	adiw	r26, 0x02	; 2
    678e:	8d 91       	ld	r24, X+
    6790:	9c 91       	ld	r25, X
    6792:	13 97       	sbiw	r26, 0x03	; 3
    6794:	00 97       	sbiw	r24, 0x00	; 0
    6796:	19 f0       	breq	.+6      	; 0x679e <free+0xf0>
    6798:	f8 01       	movw	r30, r16
    679a:	8c 01       	movw	r16, r24
    679c:	f6 cf       	rjmp	.-20     	; 0x678a <free+0xdc>
    679e:	8d 91       	ld	r24, X+
    67a0:	9c 91       	ld	r25, X
    67a2:	98 01       	movw	r18, r16
    67a4:	2e 5f       	subi	r18, 0xFE	; 254
    67a6:	3f 4f       	sbci	r19, 0xFF	; 255
    67a8:	82 0f       	add	r24, r18
    67aa:	93 1f       	adc	r25, r19
    67ac:	20 91 fd 0d 	lds	r18, 0x0DFD
    67b0:	30 91 fe 0d 	lds	r19, 0x0DFE
    67b4:	28 17       	cp	r18, r24
    67b6:	39 07       	cpc	r19, r25
    67b8:	69 f4       	brne	.+26     	; 0x67d4 <free+0x126>
    67ba:	30 97       	sbiw	r30, 0x00	; 0
    67bc:	29 f4       	brne	.+10     	; 0x67c8 <free+0x11a>
    67be:	10 92 00 0e 	sts	0x0E00, r1
    67c2:	10 92 ff 0d 	sts	0x0DFF, r1
    67c6:	02 c0       	rjmp	.+4      	; 0x67cc <free+0x11e>
    67c8:	13 82       	std	Z+3, r1	; 0x03
    67ca:	12 82       	std	Z+2, r1	; 0x02
    67cc:	10 93 fe 0d 	sts	0x0DFE, r17
    67d0:	00 93 fd 0d 	sts	0x0DFD, r16
    67d4:	df 91       	pop	r29
    67d6:	cf 91       	pop	r28
    67d8:	1f 91       	pop	r17
    67da:	0f 91       	pop	r16
    67dc:	08 95       	ret

000067de <__ftoa_engine>:
    67de:	28 30       	cpi	r18, 0x08	; 8
    67e0:	08 f0       	brcs	.+2      	; 0x67e4 <__ftoa_engine+0x6>
    67e2:	27 e0       	ldi	r18, 0x07	; 7
    67e4:	33 27       	eor	r19, r19
    67e6:	da 01       	movw	r26, r20
    67e8:	99 0f       	add	r25, r25
    67ea:	31 1d       	adc	r19, r1
    67ec:	87 fd       	sbrc	r24, 7
    67ee:	91 60       	ori	r25, 0x01	; 1
    67f0:	00 96       	adiw	r24, 0x00	; 0
    67f2:	61 05       	cpc	r22, r1
    67f4:	71 05       	cpc	r23, r1
    67f6:	39 f4       	brne	.+14     	; 0x6806 <__ftoa_engine+0x28>
    67f8:	32 60       	ori	r19, 0x02	; 2
    67fa:	2e 5f       	subi	r18, 0xFE	; 254
    67fc:	3d 93       	st	X+, r19
    67fe:	30 e3       	ldi	r19, 0x30	; 48
    6800:	2a 95       	dec	r18
    6802:	e1 f7       	brne	.-8      	; 0x67fc <__ftoa_engine+0x1e>
    6804:	08 95       	ret
    6806:	9f 3f       	cpi	r25, 0xFF	; 255
    6808:	30 f0       	brcs	.+12     	; 0x6816 <__ftoa_engine+0x38>
    680a:	80 38       	cpi	r24, 0x80	; 128
    680c:	71 05       	cpc	r23, r1
    680e:	61 05       	cpc	r22, r1
    6810:	09 f0       	breq	.+2      	; 0x6814 <__ftoa_engine+0x36>
    6812:	3c 5f       	subi	r19, 0xFC	; 252
    6814:	3c 5f       	subi	r19, 0xFC	; 252
    6816:	3d 93       	st	X+, r19
    6818:	91 30       	cpi	r25, 0x01	; 1
    681a:	08 f0       	brcs	.+2      	; 0x681e <__ftoa_engine+0x40>
    681c:	80 68       	ori	r24, 0x80	; 128
    681e:	91 1d       	adc	r25, r1
    6820:	df 93       	push	r29
    6822:	cf 93       	push	r28
    6824:	1f 93       	push	r17
    6826:	0f 93       	push	r16
    6828:	ff 92       	push	r15
    682a:	ef 92       	push	r14
    682c:	19 2f       	mov	r17, r25
    682e:	98 7f       	andi	r25, 0xF8	; 248
    6830:	96 95       	lsr	r25
    6832:	e9 2f       	mov	r30, r25
    6834:	96 95       	lsr	r25
    6836:	96 95       	lsr	r25
    6838:	e9 0f       	add	r30, r25
    683a:	ff 27       	eor	r31, r31
    683c:	ec 55       	subi	r30, 0x5C	; 92
    683e:	fe 4f       	sbci	r31, 0xFE	; 254
    6840:	99 27       	eor	r25, r25
    6842:	33 27       	eor	r19, r19
    6844:	ee 24       	eor	r14, r14
    6846:	ff 24       	eor	r15, r15
    6848:	a7 01       	movw	r20, r14
    684a:	e7 01       	movw	r28, r14
    684c:	05 90       	lpm	r0, Z+
    684e:	08 94       	sec
    6850:	07 94       	ror	r0
    6852:	28 f4       	brcc	.+10     	; 0x685e <__ftoa_engine+0x80>
    6854:	36 0f       	add	r19, r22
    6856:	e7 1e       	adc	r14, r23
    6858:	f8 1e       	adc	r15, r24
    685a:	49 1f       	adc	r20, r25
    685c:	51 1d       	adc	r21, r1
    685e:	66 0f       	add	r22, r22
    6860:	77 1f       	adc	r23, r23
    6862:	88 1f       	adc	r24, r24
    6864:	99 1f       	adc	r25, r25
    6866:	06 94       	lsr	r0
    6868:	a1 f7       	brne	.-24     	; 0x6852 <__ftoa_engine+0x74>
    686a:	05 90       	lpm	r0, Z+
    686c:	07 94       	ror	r0
    686e:	28 f4       	brcc	.+10     	; 0x687a <__ftoa_engine+0x9c>
    6870:	e7 0e       	add	r14, r23
    6872:	f8 1e       	adc	r15, r24
    6874:	49 1f       	adc	r20, r25
    6876:	56 1f       	adc	r21, r22
    6878:	c1 1d       	adc	r28, r1
    687a:	77 0f       	add	r23, r23
    687c:	88 1f       	adc	r24, r24
    687e:	99 1f       	adc	r25, r25
    6880:	66 1f       	adc	r22, r22
    6882:	06 94       	lsr	r0
    6884:	a1 f7       	brne	.-24     	; 0x686e <__ftoa_engine+0x90>
    6886:	05 90       	lpm	r0, Z+
    6888:	07 94       	ror	r0
    688a:	28 f4       	brcc	.+10     	; 0x6896 <__ftoa_engine+0xb8>
    688c:	f8 0e       	add	r15, r24
    688e:	49 1f       	adc	r20, r25
    6890:	56 1f       	adc	r21, r22
    6892:	c7 1f       	adc	r28, r23
    6894:	d1 1d       	adc	r29, r1
    6896:	88 0f       	add	r24, r24
    6898:	99 1f       	adc	r25, r25
    689a:	66 1f       	adc	r22, r22
    689c:	77 1f       	adc	r23, r23
    689e:	06 94       	lsr	r0
    68a0:	a1 f7       	brne	.-24     	; 0x688a <__ftoa_engine+0xac>
    68a2:	05 90       	lpm	r0, Z+
    68a4:	07 94       	ror	r0
    68a6:	20 f4       	brcc	.+8      	; 0x68b0 <__ftoa_engine+0xd2>
    68a8:	49 0f       	add	r20, r25
    68aa:	56 1f       	adc	r21, r22
    68ac:	c7 1f       	adc	r28, r23
    68ae:	d8 1f       	adc	r29, r24
    68b0:	99 0f       	add	r25, r25
    68b2:	66 1f       	adc	r22, r22
    68b4:	77 1f       	adc	r23, r23
    68b6:	88 1f       	adc	r24, r24
    68b8:	06 94       	lsr	r0
    68ba:	a9 f7       	brne	.-22     	; 0x68a6 <__ftoa_engine+0xc8>
    68bc:	84 91       	lpm	r24, Z
    68be:	10 95       	com	r17
    68c0:	17 70       	andi	r17, 0x07	; 7
    68c2:	41 f0       	breq	.+16     	; 0x68d4 <__ftoa_engine+0xf6>
    68c4:	d6 95       	lsr	r29
    68c6:	c7 95       	ror	r28
    68c8:	57 95       	ror	r21
    68ca:	47 95       	ror	r20
    68cc:	f7 94       	ror	r15
    68ce:	e7 94       	ror	r14
    68d0:	1a 95       	dec	r17
    68d2:	c1 f7       	brne	.-16     	; 0x68c4 <__ftoa_engine+0xe6>
    68d4:	ea e4       	ldi	r30, 0x4A	; 74
    68d6:	f1 e0       	ldi	r31, 0x01	; 1
    68d8:	68 94       	set
    68da:	15 90       	lpm	r1, Z+
    68dc:	15 91       	lpm	r17, Z+
    68de:	35 91       	lpm	r19, Z+
    68e0:	65 91       	lpm	r22, Z+
    68e2:	95 91       	lpm	r25, Z+
    68e4:	05 90       	lpm	r0, Z+
    68e6:	7f e2       	ldi	r23, 0x2F	; 47
    68e8:	73 95       	inc	r23
    68ea:	e1 18       	sub	r14, r1
    68ec:	f1 0a       	sbc	r15, r17
    68ee:	43 0b       	sbc	r20, r19
    68f0:	56 0b       	sbc	r21, r22
    68f2:	c9 0b       	sbc	r28, r25
    68f4:	d0 09       	sbc	r29, r0
    68f6:	c0 f7       	brcc	.-16     	; 0x68e8 <__ftoa_engine+0x10a>
    68f8:	e1 0c       	add	r14, r1
    68fa:	f1 1e       	adc	r15, r17
    68fc:	43 1f       	adc	r20, r19
    68fe:	56 1f       	adc	r21, r22
    6900:	c9 1f       	adc	r28, r25
    6902:	d0 1d       	adc	r29, r0
    6904:	7e f4       	brtc	.+30     	; 0x6924 <__ftoa_engine+0x146>
    6906:	70 33       	cpi	r23, 0x30	; 48
    6908:	11 f4       	brne	.+4      	; 0x690e <__ftoa_engine+0x130>
    690a:	8a 95       	dec	r24
    690c:	e6 cf       	rjmp	.-52     	; 0x68da <__ftoa_engine+0xfc>
    690e:	e8 94       	clt
    6910:	01 50       	subi	r16, 0x01	; 1
    6912:	30 f0       	brcs	.+12     	; 0x6920 <__ftoa_engine+0x142>
    6914:	08 0f       	add	r16, r24
    6916:	0a f4       	brpl	.+2      	; 0x691a <__ftoa_engine+0x13c>
    6918:	00 27       	eor	r16, r16
    691a:	02 17       	cp	r16, r18
    691c:	08 f4       	brcc	.+2      	; 0x6920 <__ftoa_engine+0x142>
    691e:	20 2f       	mov	r18, r16
    6920:	23 95       	inc	r18
    6922:	02 2f       	mov	r16, r18
    6924:	7a 33       	cpi	r23, 0x3A	; 58
    6926:	28 f0       	brcs	.+10     	; 0x6932 <__ftoa_engine+0x154>
    6928:	79 e3       	ldi	r23, 0x39	; 57
    692a:	7d 93       	st	X+, r23
    692c:	2a 95       	dec	r18
    692e:	e9 f7       	brne	.-6      	; 0x692a <__ftoa_engine+0x14c>
    6930:	10 c0       	rjmp	.+32     	; 0x6952 <__ftoa_engine+0x174>
    6932:	7d 93       	st	X+, r23
    6934:	2a 95       	dec	r18
    6936:	89 f6       	brne	.-94     	; 0x68da <__ftoa_engine+0xfc>
    6938:	06 94       	lsr	r0
    693a:	97 95       	ror	r25
    693c:	67 95       	ror	r22
    693e:	37 95       	ror	r19
    6940:	17 95       	ror	r17
    6942:	17 94       	ror	r1
    6944:	e1 18       	sub	r14, r1
    6946:	f1 0a       	sbc	r15, r17
    6948:	43 0b       	sbc	r20, r19
    694a:	56 0b       	sbc	r21, r22
    694c:	c9 0b       	sbc	r28, r25
    694e:	d0 09       	sbc	r29, r0
    6950:	98 f0       	brcs	.+38     	; 0x6978 <__ftoa_engine+0x19a>
    6952:	23 95       	inc	r18
    6954:	7e 91       	ld	r23, -X
    6956:	73 95       	inc	r23
    6958:	7a 33       	cpi	r23, 0x3A	; 58
    695a:	08 f0       	brcs	.+2      	; 0x695e <__ftoa_engine+0x180>
    695c:	70 e3       	ldi	r23, 0x30	; 48
    695e:	7c 93       	st	X, r23
    6960:	20 13       	cpse	r18, r16
    6962:	b8 f7       	brcc	.-18     	; 0x6952 <__ftoa_engine+0x174>
    6964:	7e 91       	ld	r23, -X
    6966:	70 61       	ori	r23, 0x10	; 16
    6968:	7d 93       	st	X+, r23
    696a:	30 f0       	brcs	.+12     	; 0x6978 <__ftoa_engine+0x19a>
    696c:	83 95       	inc	r24
    696e:	71 e3       	ldi	r23, 0x31	; 49
    6970:	7d 93       	st	X+, r23
    6972:	70 e3       	ldi	r23, 0x30	; 48
    6974:	2a 95       	dec	r18
    6976:	e1 f7       	brne	.-8      	; 0x6970 <__ftoa_engine+0x192>
    6978:	11 24       	eor	r1, r1
    697a:	ef 90       	pop	r14
    697c:	ff 90       	pop	r15
    697e:	0f 91       	pop	r16
    6980:	1f 91       	pop	r17
    6982:	cf 91       	pop	r28
    6984:	df 91       	pop	r29
    6986:	99 27       	eor	r25, r25
    6988:	87 fd       	sbrc	r24, 7
    698a:	90 95       	com	r25
    698c:	08 95       	ret

0000698e <strnlen_P>:
    698e:	fc 01       	movw	r30, r24
    6990:	05 90       	lpm	r0, Z+
    6992:	61 50       	subi	r22, 0x01	; 1
    6994:	70 40       	sbci	r23, 0x00	; 0
    6996:	01 10       	cpse	r0, r1
    6998:	d8 f7       	brcc	.-10     	; 0x6990 <strnlen_P+0x2>
    699a:	80 95       	com	r24
    699c:	90 95       	com	r25
    699e:	8e 0f       	add	r24, r30
    69a0:	9f 1f       	adc	r25, r31
    69a2:	08 95       	ret

000069a4 <strnlen>:
    69a4:	fc 01       	movw	r30, r24
    69a6:	61 50       	subi	r22, 0x01	; 1
    69a8:	70 40       	sbci	r23, 0x00	; 0
    69aa:	01 90       	ld	r0, Z+
    69ac:	01 10       	cpse	r0, r1
    69ae:	d8 f7       	brcc	.-10     	; 0x69a6 <strnlen+0x2>
    69b0:	80 95       	com	r24
    69b2:	90 95       	com	r25
    69b4:	8e 0f       	add	r24, r30
    69b6:	9f 1f       	adc	r25, r31
    69b8:	08 95       	ret

000069ba <fputc>:
    69ba:	0f 93       	push	r16
    69bc:	1f 93       	push	r17
    69be:	cf 93       	push	r28
    69c0:	df 93       	push	r29
    69c2:	fb 01       	movw	r30, r22
    69c4:	23 81       	ldd	r18, Z+3	; 0x03
    69c6:	21 fd       	sbrc	r18, 1
    69c8:	03 c0       	rjmp	.+6      	; 0x69d0 <fputc+0x16>
    69ca:	8f ef       	ldi	r24, 0xFF	; 255
    69cc:	9f ef       	ldi	r25, 0xFF	; 255
    69ce:	28 c0       	rjmp	.+80     	; 0x6a20 <fputc+0x66>
    69d0:	22 ff       	sbrs	r18, 2
    69d2:	16 c0       	rjmp	.+44     	; 0x6a00 <fputc+0x46>
    69d4:	46 81       	ldd	r20, Z+6	; 0x06
    69d6:	57 81       	ldd	r21, Z+7	; 0x07
    69d8:	24 81       	ldd	r18, Z+4	; 0x04
    69da:	35 81       	ldd	r19, Z+5	; 0x05
    69dc:	42 17       	cp	r20, r18
    69de:	53 07       	cpc	r21, r19
    69e0:	44 f4       	brge	.+16     	; 0x69f2 <fputc+0x38>
    69e2:	a0 81       	ld	r26, Z
    69e4:	b1 81       	ldd	r27, Z+1	; 0x01
    69e6:	9d 01       	movw	r18, r26
    69e8:	2f 5f       	subi	r18, 0xFF	; 255
    69ea:	3f 4f       	sbci	r19, 0xFF	; 255
    69ec:	31 83       	std	Z+1, r19	; 0x01
    69ee:	20 83       	st	Z, r18
    69f0:	8c 93       	st	X, r24
    69f2:	26 81       	ldd	r18, Z+6	; 0x06
    69f4:	37 81       	ldd	r19, Z+7	; 0x07
    69f6:	2f 5f       	subi	r18, 0xFF	; 255
    69f8:	3f 4f       	sbci	r19, 0xFF	; 255
    69fa:	37 83       	std	Z+7, r19	; 0x07
    69fc:	26 83       	std	Z+6, r18	; 0x06
    69fe:	10 c0       	rjmp	.+32     	; 0x6a20 <fputc+0x66>
    6a00:	eb 01       	movw	r28, r22
    6a02:	09 2f       	mov	r16, r25
    6a04:	18 2f       	mov	r17, r24
    6a06:	00 84       	ldd	r0, Z+8	; 0x08
    6a08:	f1 85       	ldd	r31, Z+9	; 0x09
    6a0a:	e0 2d       	mov	r30, r0
    6a0c:	19 95       	eicall
    6a0e:	89 2b       	or	r24, r25
    6a10:	e1 f6       	brne	.-72     	; 0x69ca <fputc+0x10>
    6a12:	8e 81       	ldd	r24, Y+6	; 0x06
    6a14:	9f 81       	ldd	r25, Y+7	; 0x07
    6a16:	01 96       	adiw	r24, 0x01	; 1
    6a18:	9f 83       	std	Y+7, r25	; 0x07
    6a1a:	8e 83       	std	Y+6, r24	; 0x06
    6a1c:	81 2f       	mov	r24, r17
    6a1e:	90 2f       	mov	r25, r16
    6a20:	df 91       	pop	r29
    6a22:	cf 91       	pop	r28
    6a24:	1f 91       	pop	r17
    6a26:	0f 91       	pop	r16
    6a28:	08 95       	ret

00006a2a <printf>:
    6a2a:	cf 93       	push	r28
    6a2c:	df 93       	push	r29
    6a2e:	cd b7       	in	r28, 0x3d	; 61
    6a30:	de b7       	in	r29, 0x3e	; 62
    6a32:	ae 01       	movw	r20, r28
    6a34:	4a 5f       	subi	r20, 0xFA	; 250
    6a36:	5f 4f       	sbci	r21, 0xFF	; 255
    6a38:	fa 01       	movw	r30, r20
    6a3a:	61 91       	ld	r22, Z+
    6a3c:	71 91       	ld	r23, Z+
    6a3e:	af 01       	movw	r20, r30
    6a40:	80 91 03 0e 	lds	r24, 0x0E03
    6a44:	90 91 04 0e 	lds	r25, 0x0E04
    6a48:	a1 d9       	rcall	.-3262   	; 0x5d8c <vfprintf>
    6a4a:	df 91       	pop	r29
    6a4c:	cf 91       	pop	r28
    6a4e:	08 95       	ret

00006a50 <putchar>:
    6a50:	60 91 03 0e 	lds	r22, 0x0E03
    6a54:	70 91 04 0e 	lds	r23, 0x0E04
    6a58:	b0 cf       	rjmp	.-160    	; 0x69ba <fputc>

00006a5a <puts>:
    6a5a:	0f 93       	push	r16
    6a5c:	1f 93       	push	r17
    6a5e:	cf 93       	push	r28
    6a60:	df 93       	push	r29
    6a62:	e0 91 03 0e 	lds	r30, 0x0E03
    6a66:	f0 91 04 0e 	lds	r31, 0x0E04
    6a6a:	23 81       	ldd	r18, Z+3	; 0x03
    6a6c:	21 ff       	sbrs	r18, 1
    6a6e:	1b c0       	rjmp	.+54     	; 0x6aa6 <puts+0x4c>
    6a70:	8c 01       	movw	r16, r24
    6a72:	d0 e0       	ldi	r29, 0x00	; 0
    6a74:	c0 e0       	ldi	r28, 0x00	; 0
    6a76:	f8 01       	movw	r30, r16
    6a78:	81 91       	ld	r24, Z+
    6a7a:	8f 01       	movw	r16, r30
    6a7c:	60 91 03 0e 	lds	r22, 0x0E03
    6a80:	70 91 04 0e 	lds	r23, 0x0E04
    6a84:	db 01       	movw	r26, r22
    6a86:	18 96       	adiw	r26, 0x08	; 8
    6a88:	ed 91       	ld	r30, X+
    6a8a:	fc 91       	ld	r31, X
    6a8c:	19 97       	sbiw	r26, 0x09	; 9
    6a8e:	88 23       	and	r24, r24
    6a90:	31 f0       	breq	.+12     	; 0x6a9e <puts+0x44>
    6a92:	19 95       	eicall
    6a94:	89 2b       	or	r24, r25
    6a96:	79 f3       	breq	.-34     	; 0x6a76 <puts+0x1c>
    6a98:	df ef       	ldi	r29, 0xFF	; 255
    6a9a:	cf ef       	ldi	r28, 0xFF	; 255
    6a9c:	ec cf       	rjmp	.-40     	; 0x6a76 <puts+0x1c>
    6a9e:	8a e0       	ldi	r24, 0x0A	; 10
    6aa0:	19 95       	eicall
    6aa2:	89 2b       	or	r24, r25
    6aa4:	19 f0       	breq	.+6      	; 0x6aac <puts+0x52>
    6aa6:	8f ef       	ldi	r24, 0xFF	; 255
    6aa8:	9f ef       	ldi	r25, 0xFF	; 255
    6aaa:	02 c0       	rjmp	.+4      	; 0x6ab0 <puts+0x56>
    6aac:	8d 2f       	mov	r24, r29
    6aae:	9c 2f       	mov	r25, r28
    6ab0:	df 91       	pop	r29
    6ab2:	cf 91       	pop	r28
    6ab4:	1f 91       	pop	r17
    6ab6:	0f 91       	pop	r16
    6ab8:	08 95       	ret

00006aba <__ultoa_invert>:
    6aba:	fa 01       	movw	r30, r20
    6abc:	aa 27       	eor	r26, r26
    6abe:	28 30       	cpi	r18, 0x08	; 8
    6ac0:	51 f1       	breq	.+84     	; 0x6b16 <__ultoa_invert+0x5c>
    6ac2:	20 31       	cpi	r18, 0x10	; 16
    6ac4:	81 f1       	breq	.+96     	; 0x6b26 <__ultoa_invert+0x6c>
    6ac6:	e8 94       	clt
    6ac8:	6f 93       	push	r22
    6aca:	6e 7f       	andi	r22, 0xFE	; 254
    6acc:	6e 5f       	subi	r22, 0xFE	; 254
    6ace:	7f 4f       	sbci	r23, 0xFF	; 255
    6ad0:	8f 4f       	sbci	r24, 0xFF	; 255
    6ad2:	9f 4f       	sbci	r25, 0xFF	; 255
    6ad4:	af 4f       	sbci	r26, 0xFF	; 255
    6ad6:	b1 e0       	ldi	r27, 0x01	; 1
    6ad8:	3e d0       	rcall	.+124    	; 0x6b56 <__ultoa_invert+0x9c>
    6ada:	b4 e0       	ldi	r27, 0x04	; 4
    6adc:	3c d0       	rcall	.+120    	; 0x6b56 <__ultoa_invert+0x9c>
    6ade:	67 0f       	add	r22, r23
    6ae0:	78 1f       	adc	r23, r24
    6ae2:	89 1f       	adc	r24, r25
    6ae4:	9a 1f       	adc	r25, r26
    6ae6:	a1 1d       	adc	r26, r1
    6ae8:	68 0f       	add	r22, r24
    6aea:	79 1f       	adc	r23, r25
    6aec:	8a 1f       	adc	r24, r26
    6aee:	91 1d       	adc	r25, r1
    6af0:	a1 1d       	adc	r26, r1
    6af2:	6a 0f       	add	r22, r26
    6af4:	71 1d       	adc	r23, r1
    6af6:	81 1d       	adc	r24, r1
    6af8:	91 1d       	adc	r25, r1
    6afa:	a1 1d       	adc	r26, r1
    6afc:	20 d0       	rcall	.+64     	; 0x6b3e <__ultoa_invert+0x84>
    6afe:	09 f4       	brne	.+2      	; 0x6b02 <__ultoa_invert+0x48>
    6b00:	68 94       	set
    6b02:	3f 91       	pop	r19
    6b04:	2a e0       	ldi	r18, 0x0A	; 10
    6b06:	26 9f       	mul	r18, r22
    6b08:	11 24       	eor	r1, r1
    6b0a:	30 19       	sub	r19, r0
    6b0c:	30 5d       	subi	r19, 0xD0	; 208
    6b0e:	31 93       	st	Z+, r19
    6b10:	de f6       	brtc	.-74     	; 0x6ac8 <__ultoa_invert+0xe>
    6b12:	cf 01       	movw	r24, r30
    6b14:	08 95       	ret
    6b16:	46 2f       	mov	r20, r22
    6b18:	47 70       	andi	r20, 0x07	; 7
    6b1a:	40 5d       	subi	r20, 0xD0	; 208
    6b1c:	41 93       	st	Z+, r20
    6b1e:	b3 e0       	ldi	r27, 0x03	; 3
    6b20:	0f d0       	rcall	.+30     	; 0x6b40 <__ultoa_invert+0x86>
    6b22:	c9 f7       	brne	.-14     	; 0x6b16 <__ultoa_invert+0x5c>
    6b24:	f6 cf       	rjmp	.-20     	; 0x6b12 <__ultoa_invert+0x58>
    6b26:	46 2f       	mov	r20, r22
    6b28:	4f 70       	andi	r20, 0x0F	; 15
    6b2a:	40 5d       	subi	r20, 0xD0	; 208
    6b2c:	4a 33       	cpi	r20, 0x3A	; 58
    6b2e:	18 f0       	brcs	.+6      	; 0x6b36 <__ultoa_invert+0x7c>
    6b30:	49 5d       	subi	r20, 0xD9	; 217
    6b32:	31 fd       	sbrc	r19, 1
    6b34:	40 52       	subi	r20, 0x20	; 32
    6b36:	41 93       	st	Z+, r20
    6b38:	02 d0       	rcall	.+4      	; 0x6b3e <__ultoa_invert+0x84>
    6b3a:	a9 f7       	brne	.-22     	; 0x6b26 <__ultoa_invert+0x6c>
    6b3c:	ea cf       	rjmp	.-44     	; 0x6b12 <__ultoa_invert+0x58>
    6b3e:	b4 e0       	ldi	r27, 0x04	; 4
    6b40:	a6 95       	lsr	r26
    6b42:	97 95       	ror	r25
    6b44:	87 95       	ror	r24
    6b46:	77 95       	ror	r23
    6b48:	67 95       	ror	r22
    6b4a:	ba 95       	dec	r27
    6b4c:	c9 f7       	brne	.-14     	; 0x6b40 <__ultoa_invert+0x86>
    6b4e:	00 97       	sbiw	r24, 0x00	; 0
    6b50:	61 05       	cpc	r22, r1
    6b52:	71 05       	cpc	r23, r1
    6b54:	08 95       	ret
    6b56:	9b 01       	movw	r18, r22
    6b58:	ac 01       	movw	r20, r24
    6b5a:	0a 2e       	mov	r0, r26
    6b5c:	06 94       	lsr	r0
    6b5e:	57 95       	ror	r21
    6b60:	47 95       	ror	r20
    6b62:	37 95       	ror	r19
    6b64:	27 95       	ror	r18
    6b66:	ba 95       	dec	r27
    6b68:	c9 f7       	brne	.-14     	; 0x6b5c <__ultoa_invert+0xa2>
    6b6a:	62 0f       	add	r22, r18
    6b6c:	73 1f       	adc	r23, r19
    6b6e:	84 1f       	adc	r24, r20
    6b70:	95 1f       	adc	r25, r21
    6b72:	a0 1d       	adc	r26, r0
    6b74:	08 95       	ret

00006b76 <_exit>:
    6b76:	f8 94       	cli

00006b78 <__stop_program>:
    6b78:	ff cf       	rjmp	.-2      	; 0x6b78 <__stop_program>
