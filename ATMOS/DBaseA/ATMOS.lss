
ATMOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000058  00800200  0000236c  00002400  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000236c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003f4  00800258  00800258  00002458  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002458  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000024b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e0  00000000  00000000  000024f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00004659  00000000  00000000  000028d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001964  00000000  00000000  00006f2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015b0  00000000  00000000  00008891  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008fc  00000000  00000000  00009e44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000158f  00000000  00000000  0000a740  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d1a  00000000  00000000  0000bccf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e8  00000000  00000000  0000d9e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__ctors_end>
       4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      10:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      14:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      18:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      1c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      20:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      24:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      28:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      30:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      34:	0c 94 53 02 	jmp	0x4a6	; 0x4a6 <__vector_13>
      38:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      3c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      40:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      44:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      48:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      4c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      50:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      54:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      58:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      5c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      60:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      64:	0c 94 a0 02 	jmp	0x540	; 0x540 <__vector_25>
      68:	0c 94 88 02 	jmp	0x510	; 0x510 <__vector_26>
      6c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      70:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      74:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      78:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      7c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      80:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      84:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      88:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      8c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      90:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      94:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      98:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      9c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a8:	0c 94 77 02 	jmp	0x4ee	; 0x4ee <__vector_42>
      ac:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      bc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      cc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      dc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      ec:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      fc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     100:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     104:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     108:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     10c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     110:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     114:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     118:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     11c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     120:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     124:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     128:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     12c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     130:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>

00000134 <__trampolines_end>:
     134:	6e 61       	ori	r22, 0x1E	; 30
     136:	6e 00       	.word	0x006e	; ????

00000138 <__c.2177>:
     138:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     148:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     158:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     168:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     178:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     188:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     198:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     208:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     218:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     228:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000236 <__ctors_end>:
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	d1 e2       	ldi	r29, 0x21	; 33
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61

00000242 <__do_copy_data>:
     242:	12 e0       	ldi	r17, 0x02	; 2
     244:	a0 e0       	ldi	r26, 0x00	; 0
     246:	b2 e0       	ldi	r27, 0x02	; 2
     248:	ec e6       	ldi	r30, 0x6C	; 108
     24a:	f3 e2       	ldi	r31, 0x23	; 35
     24c:	02 c0       	rjmp	.+4      	; 0x252 <__do_copy_data+0x10>
     24e:	05 90       	lpm	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	a8 35       	cpi	r26, 0x58	; 88
     254:	b1 07       	cpc	r27, r17
     256:	d9 f7       	brne	.-10     	; 0x24e <__do_copy_data+0xc>

00000258 <__do_clear_bss>:
     258:	26 e0       	ldi	r18, 0x06	; 6
     25a:	a8 e5       	ldi	r26, 0x58	; 88
     25c:	b2 e0       	ldi	r27, 0x02	; 2
     25e:	01 c0       	rjmp	.+2      	; 0x262 <.do_clear_bss_start>

00000260 <.do_clear_bss_loop>:
     260:	1d 92       	st	X+, r1

00000262 <.do_clear_bss_start>:
     262:	ac 34       	cpi	r26, 0x4C	; 76
     264:	b2 07       	cpc	r27, r18
     266:	e1 f7       	brne	.-8      	; 0x260 <.do_clear_bss_loop>
     268:	0e 94 bb 01 	call	0x376	; 0x376 <main>
     26c:	0c 94 b4 11 	jmp	0x2368	; 0x2368 <_exit>

00000270 <__bad_interrupt>:
     270:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000274 <appDataConf>:

/*************************************************************************//**
*****************************************************************************/
static void appDataConf(NWK_DataReq_t *req)
{
  appDataReqBusy = false;
     274:	10 92 5f 02 	sts	0x025F, r1
     278:	08 95       	ret

0000027a <appSendData>:
}

/*************************************************************************//**
*****************************************************************************/
static void appSendData(void)
{
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
	printf("begin send\n");
     280:	82 e1       	ldi	r24, 0x12	; 18
     282:	92 e0       	ldi	r25, 0x02	; 2
     284:	0e 94 e5 10 	call	0x21ca	; 0x21ca <puts>
  if (appDataReqBusy || 0 == appUartBufferPtr)
     288:	80 91 5f 02 	lds	r24, 0x025F
     28c:	81 11       	cpse	r24, r1
     28e:	30 c0       	rjmp	.+96     	; 0x2f0 <appSendData+0x76>
     290:	40 91 58 02 	lds	r20, 0x0258
     294:	44 23       	and	r20, r20
     296:	61 f1       	breq	.+88     	; 0x2f0 <appSendData+0x76>
    return;

  memcpy(appDataReqBuffer, appUartBuffer, appUartBufferPtr);
     298:	cc e5       	ldi	r28, 0x5C	; 92
     29a:	d2 e0       	ldi	r29, 0x02	; 2
     29c:	50 e0       	ldi	r21, 0x00	; 0
     29e:	69 e5       	ldi	r22, 0x59	; 89
     2a0:	72 e0       	ldi	r23, 0x02	; 2
     2a2:	ce 01       	movw	r24, r28
     2a4:	0e 94 83 10 	call	0x2106	; 0x2106 <memcpy>
	appDataReqBuffer[0] = 12;
     2a8:	8c e0       	ldi	r24, 0x0C	; 12
     2aa:	88 83       	st	Y, r24
	appDataReqBuffer[1] = 13;	
     2ac:	8d e0       	ldi	r24, 0x0D	; 13
     2ae:	89 83       	std	Y+1, r24	; 0x01
	appDataReqBuffer[2] = 14;	
     2b0:	8e e0       	ldi	r24, 0x0E	; 14
     2b2:	8a 83       	std	Y+2, r24	; 0x02
	//TODO
  appDataReq.dstAddr = 1-APP_ADDR;
     2b4:	e0 e6       	ldi	r30, 0x60	; 96
     2b6:	f2 e0       	ldi	r31, 0x02	; 2
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	96 83       	std	Z+6, r25	; 0x06
     2be:	85 83       	std	Z+5, r24	; 0x05
  appDataReq.dstEndpoint = APP_ENDPOINT;
     2c0:	11 e0       	ldi	r17, 0x01	; 1
     2c2:	17 83       	std	Z+7, r17	; 0x07
  appDataReq.srcEndpoint = APP_ENDPOINT;
     2c4:	10 87       	std	Z+8, r17	; 0x08
  appDataReq.options = NWK_OPT_ENABLE_SECURITY;
     2c6:	82 e0       	ldi	r24, 0x02	; 2
     2c8:	81 87       	std	Z+9, r24	; 0x09
  appDataReq.data = appDataReqBuffer;
     2ca:	d3 87       	std	Z+11, r29	; 0x0b
     2cc:	c2 87       	std	Z+10, r28	; 0x0a
  appDataReq.size = 3;
     2ce:	83 e0       	ldi	r24, 0x03	; 3
     2d0:	84 87       	std	Z+12, r24	; 0x0c
  appDataReq.confirm = appDataConf;
     2d2:	8a e3       	ldi	r24, 0x3A	; 58
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	96 87       	std	Z+14, r25	; 0x0e
     2d8:	85 87       	std	Z+13, r24	; 0x0d
  NWK_DataReq(&appDataReq);
     2da:	cf 01       	movw	r24, r30
     2dc:	0e 94 54 03 	call	0x6a8	; 0x6a8 <NWK_DataReq>

  appUartBufferPtr = 0;
     2e0:	10 92 58 02 	sts	0x0258, r1
  appDataReqBusy = true;
     2e4:	10 93 5f 02 	sts	0x025F, r17
  printf("end send\n");
     2e8:	8d e1       	ldi	r24, 0x1D	; 29
     2ea:	92 e0       	ldi	r25, 0x02	; 2
     2ec:	0e 94 e5 10 	call	0x21ca	; 0x21ca <puts>
}
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	1f 91       	pop	r17
     2f6:	08 95       	ret

000002f8 <appTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void appTimerHandler(SYS_Timer_t *timer)
{
  appSendData();
     2f8:	0e 94 3d 01 	call	0x27a	; 0x27a <appSendData>
     2fc:	08 95       	ret

000002fe <appDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
     2fe:	ef 92       	push	r14
     300:	ff 92       	push	r15
     302:	0f 93       	push	r16
     304:	1f 93       	push	r17
     306:	cf 93       	push	r28
     308:	8c 01       	movw	r16, r24
	printf("begin recv\n");
     30a:	86 e2       	ldi	r24, 0x26	; 38
     30c:	92 e0       	ldi	r25, 0x02	; 2
     30e:	0e 94 e5 10 	call	0x21ca	; 0x21ca <puts>
	for (uint8_t i = 0; i < ind->size; i++)
     312:	d8 01       	movw	r26, r16
     314:	19 96       	adiw	r26, 0x09	; 9
     316:	8c 91       	ld	r24, X
     318:	88 23       	and	r24, r24
     31a:	11 f1       	breq	.+68     	; 0x360 <appDataInd+0x62>
     31c:	c0 e0       	ldi	r28, 0x00	; 0
		printf("\t data %d = %d",i,ind->data[i]);
     31e:	0f 2e       	mov	r0, r31
     320:	f1 e3       	ldi	r31, 0x31	; 49
     322:	ef 2e       	mov	r14, r31
     324:	f2 e0       	ldi	r31, 0x02	; 2
     326:	ff 2e       	mov	r15, r31
     328:	f0 2d       	mov	r31, r0
     32a:	d8 01       	movw	r26, r16
     32c:	17 96       	adiw	r26, 0x07	; 7
     32e:	ed 91       	ld	r30, X+
     330:	fc 91       	ld	r31, X
     332:	18 97       	sbiw	r26, 0x08	; 8
     334:	ec 0f       	add	r30, r28
     336:	f1 1d       	adc	r31, r1
     338:	80 81       	ld	r24, Z
     33a:	1f 92       	push	r1
     33c:	8f 93       	push	r24
     33e:	1f 92       	push	r1
     340:	cf 93       	push	r28
     342:	ff 92       	push	r15
     344:	ef 92       	push	r14
     346:	0e 94 cf 10 	call	0x219e	; 0x219e <printf>
/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
	printf("begin recv\n");
	for (uint8_t i = 0; i < ind->size; i++)
     34a:	cf 5f       	subi	r28, 0xFF	; 255
     34c:	0f 90       	pop	r0
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	0f 90       	pop	r0
     356:	0f 90       	pop	r0
     358:	f8 01       	movw	r30, r16
     35a:	81 85       	ldd	r24, Z+9	; 0x09
     35c:	c8 17       	cp	r28, r24
     35e:	28 f3       	brcs	.-54     	; 0x32a <appDataInd+0x2c>
		printf("\t data %d = %d",i,ind->data[i]);
	printf("begin recv\n");
     360:	86 e2       	ldi	r24, 0x26	; 38
     362:	92 e0       	ldi	r25, 0x02	; 2
     364:	0e 94 e5 10 	call	0x21ca	; 0x21ca <puts>
  return true;
}
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	cf 91       	pop	r28
     36c:	1f 91       	pop	r17
     36e:	0f 91       	pop	r16
     370:	ff 90       	pop	r15
     372:	ef 90       	pop	r14
     374:	08 95       	ret

00000376 <main>:

/*************************************************************************//**
*****************************************************************************/
int main(void)
{
  SYS_Init();
     376:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <SYS_Init>
  USART0_Init(9600);
     37a:	60 e8       	ldi	r22, 0x80	; 128
     37c:	75 e2       	ldi	r23, 0x25	; 37
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <USART0_Init>
  printf("init done\n");
     386:	80 e4       	ldi	r24, 0x40	; 64
     388:	92 e0       	ldi	r25, 0x02	; 2
     38a:	0e 94 e5 10 	call	0x21ca	; 0x21ca <puts>

  NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);

  HAL_BoardInit();

  appTimer.interval = 3000;
     38e:	c1 e7       	ldi	r28, 0x71	; 113
     390:	d2 e0       	ldi	r29, 0x02	; 2
     392:	0f 2e       	mov	r0, r31
     394:	f8 eb       	ldi	r31, 0xB8	; 184
     396:	cf 2e       	mov	r12, r31
     398:	fb e0       	ldi	r31, 0x0B	; 11
     39a:	df 2e       	mov	r13, r31
     39c:	e1 2c       	mov	r14, r1
     39e:	f1 2c       	mov	r15, r1
     3a0:	f0 2d       	mov	r31, r0
  appTimer.mode = SYS_TIMER_PERIODIC_MODE;
  appTimer.handler = appTimerHandler;
     3a2:	0c e7       	ldi	r16, 0x7C	; 124
     3a4:	11 e0       	ldi	r17, 0x01	; 1
  SYS_Init();
  USART0_Init(9600);
  printf("init done\n");
  while (1)
  {
    SYS_TaskHandler();
     3a6:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <SYS_TaskHandler>

/*************************************************************************//**
*****************************************************************************/
static void APP_TaskHandler1(void)
{
	printf("APP handler\n\n");
     3aa:	8a e4       	ldi	r24, 0x4A	; 74
     3ac:	92 e0       	ldi	r25, 0x02	; 2
     3ae:	0e 94 e5 10 	call	0x21ca	; 0x21ca <puts>
  switch (appState)
     3b2:	80 91 7e 02 	lds	r24, 0x027E
     3b6:	81 11       	cpse	r24, r1
     3b8:	f6 cf       	rjmp	.-20     	; 0x3a6 <main+0x30>

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
  NWK_SetAddr(APP_ADDR);
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	0e 94 0d 03 	call	0x61a	; 0x61a <NWK_SetAddr>
  NWK_SetPanId(APP_PANID);
     3c2:	84 e3       	ldi	r24, 0x34	; 52
     3c4:	92 e1       	ldi	r25, 0x12	; 18
     3c6:	0e 94 14 03 	call	0x628	; 0x628 <NWK_SetPanId>
  PHY_SetChannel(APP_CHANNEL);
     3ca:	8f e0       	ldi	r24, 0x0F	; 15
     3cc:	0e 94 8e 09 	call	0x131c	; 0x131c <PHY_SetChannel>
#ifdef PHY_AT86RF212
  PHY_SetBand(APP_BAND);
  PHY_SetModulation(APP_MODULATION);
#endif
  PHY_SetRxState(true);
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	0e 94 89 09 	call	0x1312	; 0x1312 <PHY_SetRxState>

  NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
     3d6:	6f e7       	ldi	r22, 0x7F	; 127
     3d8:	71 e0       	ldi	r23, 0x01	; 1
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	0e 94 1b 03 	call	0x636	; 0x636 <NWK_OpenEndpoint>

  HAL_BoardInit();

  appTimer.interval = 3000;
     3e0:	ce 82       	std	Y+6, r12	; 0x06
     3e2:	df 82       	std	Y+7, r13	; 0x07
     3e4:	e8 86       	std	Y+8, r14	; 0x08
     3e6:	f9 86       	std	Y+9, r15	; 0x09
  appTimer.mode = SYS_TIMER_PERIODIC_MODE;
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	8a 87       	std	Y+10, r24	; 0x0a
  appTimer.handler = appTimerHandler;
     3ec:	1c 87       	std	Y+12, r17	; 0x0c
     3ee:	0b 87       	std	Y+11, r16	; 0x0b
  switch (appState)
  {
    case APP_STATE_INITIAL:
    {
      appInit();
      appState = APP_STATE_IDLE;
     3f0:	80 93 7e 02 	sts	0x027E, r24
     3f4:	d8 cf       	rjmp	.-80     	; 0x3a6 <main+0x30>

000003f6 <USART0_Init>:
  @brief Initializes USART0 in asynchronous UART mode, 8 bit data, 1 stop bit
  @param[in] desired baud rate (configuration values computed using F_CPU)
*****************************************************************************/
void USART0_Init(unsigned long baud){
	
	stdout = &USART0_stdout; //make stdout print to USART0
     3f6:	24 e0       	ldi	r18, 0x04	; 4
     3f8:	32 e0       	ldi	r19, 0x02	; 2
     3fa:	30 93 49 06 	sts	0x0649, r19
     3fe:	20 93 48 06 	sts	0x0648, r18
	
	//Compute UBRR for baudrate setting
	unsigned short ubrr=(unsigned short)((F_CPU/(baud*16UL))-1);
     402:	dc 01       	movw	r26, r24
     404:	cb 01       	movw	r24, r22
     406:	88 0f       	add	r24, r24
     408:	99 1f       	adc	r25, r25
     40a:	aa 1f       	adc	r26, r26
     40c:	bb 1f       	adc	r27, r27
     40e:	88 0f       	add	r24, r24
     410:	99 1f       	adc	r25, r25
     412:	aa 1f       	adc	r26, r26
     414:	bb 1f       	adc	r27, r27
     416:	9c 01       	movw	r18, r24
     418:	ad 01       	movw	r20, r26
     41a:	22 0f       	add	r18, r18
     41c:	33 1f       	adc	r19, r19
     41e:	44 1f       	adc	r20, r20
     420:	55 1f       	adc	r21, r21
     422:	22 0f       	add	r18, r18
     424:	33 1f       	adc	r19, r19
     426:	44 1f       	adc	r20, r20
     428:	55 1f       	adc	r21, r21
     42a:	60 e0       	ldi	r22, 0x00	; 0
     42c:	74 e2       	ldi	r23, 0x24	; 36
     42e:	84 ef       	ldi	r24, 0xF4	; 244
     430:	90 e0       	ldi	r25, 0x00	; 0
     432:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <__udivmodsi4>
     436:	21 50       	subi	r18, 0x01	; 1
     438:	31 09       	sbc	r19, r1
	
	//Set BAUD rate.
	UBRR0H = (unsigned char) (ubrr >> 8);
     43a:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) ubrr;
     43e:	20 93 c4 00 	sts	0x00C4, r18
	/*Set frame format. 8 data bit(settings bits UCSZ00 and UCSZ01  UCSR0B), 1 stop bit(by default and need not to be worried about). 
	The UCSZ01:0 bits combined with the UCSZ02 bit in UCSR0B sets the number of data
	bits (Character Size) in the frame that the Receiver and Transmitter use. 
	If a change on frame format is needed, make sure to modify UCSR0B register above accordingly.
	See datasheet pg. 390.*/
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
     442:	86 e0       	ldi	r24, 0x06	; 6
     444:	80 93 c2 00 	sts	0x00C2, r24
	
	//Enable receiver and transmitter. Enable the USART Receive Complete interrupt(RXCIE).
	//UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0));
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);//Enable RX/TX, no interrupts
     448:	88 e1       	ldi	r24, 0x18	; 24
     44a:	80 93 c1 00 	sts	0x00C1, r24
     44e:	08 95       	ret

00000450 <USART0_Transmit>:
Function contains busy loops for simplicity in debugging. Not production code.
  @brief Transmits a byte via USART0
  @param[in] data byte to be transmitted
*****************************************************************************/
void USART0_Transmit(unsigned char data){
	while(!(UCSR0A & (1 << UDRE0))); //Wait for the empty transmit buffer. (Waiting UDR0 to be empty.)
     450:	e0 ec       	ldi	r30, 0xC0	; 192
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	90 81       	ld	r25, Z
     456:	95 ff       	sbrs	r25, 5
     458:	fd cf       	rjmp	.-6      	; 0x454 <USART0_Transmit+0x4>
		UDR0 = data;			//store the data in the USART Data Register
     45a:	80 93 c6 00 	sts	0x00C6, r24
     45e:	08 95       	ret

00000460 <USART0_putchar_printf>:
  @brief Called when stdout is being printed to USART0 (this is set up at runtime)
  @param[in] var byte to transmit
  @param[in/out] *stream Pointer to a stdio.h FILE io stream
  @return Status
*****************************************************************************/
int USART0_putchar_printf(char var, FILE *stream) {
     460:	cf 93       	push	r28
     462:	c8 2f       	mov	r28, r24
	if (var == '\n') USART0_Transmit('\r');
     464:	8a 30       	cpi	r24, 0x0A	; 10
     466:	19 f4       	brne	.+6      	; 0x46e <USART0_putchar_printf+0xe>
     468:	8d e0       	ldi	r24, 0x0D	; 13
     46a:	0e 94 28 02 	call	0x450	; 0x450 <USART0_Transmit>
	USART0_Transmit(var);
     46e:	8c 2f       	mov	r24, r28
     470:	0e 94 28 02 	call	0x450	; 0x450 <USART0_Transmit>
	return 0;
}
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	90 e0       	ldi	r25, 0x00	; 0
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     47c:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     47e:	0f b6       	in	r0, 0x3f	; 63
     480:	f8 94       	cli
     482:	a8 95       	wdr
     484:	80 91 60 00 	lds	r24, 0x0060
     488:	88 61       	ori	r24, 0x18	; 24
     48a:	80 93 60 00 	sts	0x0060, r24
     48e:	10 92 60 00 	sts	0x0060, r1
     492:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
     494:	e1 e6       	ldi	r30, 0x61	; 97
     496:	f0 e0       	ldi	r31, 0x00	; 0
     498:	80 e8       	ldi	r24, 0x80	; 128
     49a:	80 83       	st	Z, r24
  CLKPR = 0;
     49c:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     49e:	78 94       	sei

  HAL_TimerInit();
     4a0:	0e 94 62 02 	call	0x4c4	; 0x4c4 <HAL_TimerInit>
     4a4:	08 95       	ret

000004a6 <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
     4a6:	1f 92       	push	r1
     4a8:	0f 92       	push	r0
     4aa:	0f b6       	in	r0, 0x3f	; 63
     4ac:	0f 92       	push	r0
     4ae:	11 24       	eor	r1, r1
     4b0:	8f 93       	push	r24
  halSleepTimerEvent = true;
     4b2:	81 e0       	ldi	r24, 0x01	; 1
     4b4:	80 93 7f 02 	sts	0x027F, r24
}
     4b8:	8f 91       	pop	r24
     4ba:	0f 90       	pop	r0
     4bc:	0f be       	out	0x3f, r0	; 63
     4be:	0f 90       	pop	r0
     4c0:	1f 90       	pop	r1
     4c2:	18 95       	reti

000004c4 <HAL_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_TimerInit(void)
{
  halTimerIrqCount = 0;
     4c4:	10 92 1d 06 	sts	0x061D, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
     4c8:	80 e2       	ldi	r24, 0x20	; 32
     4ca:	9e e4       	ldi	r25, 0x4E	; 78
     4cc:	90 93 a9 00 	sts	0x00A9, r25
     4d0:	80 93 a8 00 	sts	0x00A8, r24
  TCCR4B = (1 << WGM12);              // CTC mode
     4d4:	e1 ea       	ldi	r30, 0xA1	; 161
     4d6:	f0 e0       	ldi	r31, 0x00	; 0
     4d8:	88 e0       	ldi	r24, 0x08	; 8
     4da:	80 83       	st	Z, r24
  TCCR4B |= (1 << CS11);              // Prescaler 8
     4dc:	80 81       	ld	r24, Z
     4de:	82 60       	ori	r24, 0x02	; 2
     4e0:	80 83       	st	Z, r24
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
     4e2:	e2 e7       	ldi	r30, 0x72	; 114
     4e4:	f0 e0       	ldi	r31, 0x00	; 0
     4e6:	80 81       	ld	r24, Z
     4e8:	82 60       	ori	r24, 0x02	; 2
     4ea:	80 83       	st	Z, r24
     4ec:	08 95       	ret

000004ee <__vector_42>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     4ee:	1f 92       	push	r1
     4f0:	0f 92       	push	r0
     4f2:	0f b6       	in	r0, 0x3f	; 63
     4f4:	0f 92       	push	r0
     4f6:	11 24       	eor	r1, r1
     4f8:	8f 93       	push	r24
  halTimerIrqCount++;
     4fa:	80 91 1d 06 	lds	r24, 0x061D
     4fe:	8f 5f       	subi	r24, 0xFF	; 255
     500:	80 93 1d 06 	sts	0x061D, r24
}
     504:	8f 91       	pop	r24
     506:	0f 90       	pop	r0
     508:	0f be       	out	0x3f, r0	; 63
     50a:	0f 90       	pop	r0
     50c:	1f 90       	pop	r1
     50e:	18 95       	reti

00000510 <__vector_26>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     510:	1f 92       	push	r1
     512:	0f 92       	push	r0
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	0f 92       	push	r0
     518:	11 24       	eor	r1, r1
     51a:	8f 93       	push	r24
     51c:	ef 93       	push	r30
     51e:	ff 93       	push	r31
  udrEmpty = true;
     520:	81 e0       	ldi	r24, 0x01	; 1
     522:	80 93 81 02 	sts	0x0281, r24
  UCSRxB &= ~(1 << UDRIE1);
     526:	e1 ec       	ldi	r30, 0xC1	; 193
     528:	f0 e0       	ldi	r31, 0x00	; 0
     52a:	80 81       	ld	r24, Z
     52c:	8f 7d       	andi	r24, 0xDF	; 223
     52e:	80 83       	st	Z, r24
}
     530:	ff 91       	pop	r31
     532:	ef 91       	pop	r30
     534:	8f 91       	pop	r24
     536:	0f 90       	pop	r0
     538:	0f be       	out	0x3f, r0	; 63
     53a:	0f 90       	pop	r0
     53c:	1f 90       	pop	r1
     53e:	18 95       	reti

00000540 <__vector_25>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     540:	1f 92       	push	r1
     542:	0f 92       	push	r0
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	0f 92       	push	r0
     548:	11 24       	eor	r1, r1
     54a:	2f 93       	push	r18
     54c:	3f 93       	push	r19
     54e:	4f 93       	push	r20
     550:	5f 93       	push	r21
     552:	6f 93       	push	r22
     554:	7f 93       	push	r23
     556:	8f 93       	push	r24
     558:	9f 93       	push	r25
     55a:	af 93       	push	r26
     55c:	bf 93       	push	r27
     55e:	ef 93       	push	r30
     560:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     562:	80 91 c0 00 	lds	r24, 0x00C0
  uint8_t byte = UDRx;
     566:	20 91 c6 00 	lds	r18, 0x00C6

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     56a:	8c 71       	andi	r24, 0x1C	; 28
     56c:	59 f5       	brne	.+86     	; 0x5c4 <__vector_25+0x84>
  {
    if (rxFifo.bytes == rxFifo.size)
     56e:	e2 e8       	ldi	r30, 0x82	; 130
     570:	f2 e0       	ldi	r31, 0x02	; 2
     572:	46 81       	ldd	r20, Z+6	; 0x06
     574:	57 81       	ldd	r21, Z+7	; 0x07
     576:	84 81       	ldd	r24, Z+4	; 0x04
     578:	95 81       	ldd	r25, Z+5	; 0x05
     57a:	48 17       	cp	r20, r24
     57c:	59 07       	cpc	r21, r25
     57e:	11 f1       	breq	.+68     	; 0x5c4 <__vector_25+0x84>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     580:	40 85       	ldd	r20, Z+8	; 0x08
     582:	51 85       	ldd	r21, Z+9	; 0x09
     584:	82 81       	ldd	r24, Z+2	; 0x02
     586:	93 81       	ldd	r25, Z+3	; 0x03
     588:	bc 01       	movw	r22, r24
     58a:	6f 5f       	subi	r22, 0xFF	; 255
     58c:	7f 4f       	sbci	r23, 0xFF	; 255
     58e:	73 83       	std	Z+3, r23	; 0x03
     590:	62 83       	std	Z+2, r22	; 0x02
     592:	da 01       	movw	r26, r20
     594:	a8 0f       	add	r26, r24
     596:	b9 1f       	adc	r27, r25
     598:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
     59a:	22 81       	ldd	r18, Z+2	; 0x02
     59c:	33 81       	ldd	r19, Z+3	; 0x03
     59e:	84 81       	ldd	r24, Z+4	; 0x04
     5a0:	95 81       	ldd	r25, Z+5	; 0x05
     5a2:	28 17       	cp	r18, r24
     5a4:	39 07       	cpc	r19, r25
     5a6:	21 f4       	brne	.+8      	; 0x5b0 <__vector_25+0x70>
      rxFifo.tail = 0;
     5a8:	10 92 85 02 	sts	0x0285, r1
     5ac:	10 92 84 02 	sts	0x0284, r1
    rxFifo.bytes++;
     5b0:	e2 e8       	ldi	r30, 0x82	; 130
     5b2:	f2 e0       	ldi	r31, 0x02	; 2
     5b4:	86 81       	ldd	r24, Z+6	; 0x06
     5b6:	97 81       	ldd	r25, Z+7	; 0x07
     5b8:	01 96       	adiw	r24, 0x01	; 1
     5ba:	97 83       	std	Z+7, r25	; 0x07
     5bc:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	80 93 80 02 	sts	0x0280, r24
  }

  PRAGMA(diag_default=Pa082);
}
     5c4:	ff 91       	pop	r31
     5c6:	ef 91       	pop	r30
     5c8:	bf 91       	pop	r27
     5ca:	af 91       	pop	r26
     5cc:	9f 91       	pop	r25
     5ce:	8f 91       	pop	r24
     5d0:	7f 91       	pop	r23
     5d2:	6f 91       	pop	r22
     5d4:	5f 91       	pop	r21
     5d6:	4f 91       	pop	r20
     5d8:	3f 91       	pop	r19
     5da:	2f 91       	pop	r18
     5dc:	0f 90       	pop	r0
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	0f 90       	pop	r0
     5e2:	1f 90       	pop	r1
     5e4:	18 95       	reti

000005e6 <NWK_Init>:
/*************************************************************************//**
  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
  nwkIb.nwkSeqNum = 0;
     5e6:	ee e1       	ldi	r30, 0x1E	; 30
     5e8:	f6 e0       	ldi	r31, 0x06	; 6
     5ea:	14 82       	std	Z+4, r1	; 0x04
  nwkIb.macSeqNum = 0;
     5ec:	15 82       	std	Z+5, r1	; 0x05
  nwkIb.addr = 0;
     5ee:	11 82       	std	Z+1, r1	; 0x01
     5f0:	10 82       	st	Z, r1
  nwkIb.lock = 0;
     5f2:	17 a2       	std	Z+39, r1	; 0x27
     5f4:	16 a2       	std	Z+38, r1	; 0x26
     5f6:	e4 e2       	ldi	r30, 0x24	; 36
     5f8:	f6 e0       	ldi	r31, 0x06	; 6
     5fa:	84 e4       	ldi	r24, 0x44	; 68
     5fc:	96 e0       	ldi	r25, 0x06	; 6

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
    nwkIb.endpoint[i] = NULL;
     5fe:	11 92       	st	Z+, r1
     600:	11 92       	st	Z+, r1
  nwkIb.nwkSeqNum = 0;
  nwkIb.macSeqNum = 0;
  nwkIb.addr = 0;
  nwkIb.lock = 0;

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
     602:	e8 17       	cp	r30, r24
     604:	f9 07       	cpc	r31, r25
     606:	d9 f7       	brne	.-10     	; 0x5fe <NWK_Init+0x18>
    nwkIb.endpoint[i] = NULL;

  nwkTxInit();
     608:	0e 94 95 07 	call	0xf2a	; 0xf2a <nwkTxInit>
  nwkRxInit();
     60c:	0e 94 ca 04 	call	0x994	; 0x994 <nwkRxInit>
  nwkFrameInit();
     610:	0e 94 1d 04 	call	0x83a	; 0x83a <nwkFrameInit>
  nwkDataReqInit();
     614:	0e 94 4f 03 	call	0x69e	; 0x69e <nwkDataReqInit>
     618:	08 95       	ret

0000061a <NWK_SetAddr>:
  @brief Sets network address of the node
  @param[in] addr Adddress to set
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
  nwkIb.addr = addr;
     61a:	90 93 1f 06 	sts	0x061F, r25
     61e:	80 93 1e 06 	sts	0x061E, r24
  PHY_SetShortAddr(addr);
     622:	0e 94 a4 09 	call	0x1348	; 0x1348 <PHY_SetShortAddr>
     626:	08 95       	ret

00000628 <NWK_SetPanId>:
  @brief Sets network identifier (PAN) of the node
  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
  nwkIb.panId = panId;
     628:	90 93 21 06 	sts	0x0621, r25
     62c:	80 93 20 06 	sts	0x0620, r24
  PHY_SetPanId(panId);
     630:	0e 94 93 09 	call	0x1326	; 0x1326 <PHY_SetPanId>
     634:	08 95       	ret

00000636 <NWK_OpenEndpoint>:
  @param[in] id Endpoint index (1-15)
  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
  nwkIb.endpoint[id] = handler;
     636:	e8 2f       	mov	r30, r24
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	ee 0f       	add	r30, r30
     63c:	ff 1f       	adc	r31, r31
     63e:	ec 5d       	subi	r30, 0xDC	; 220
     640:	f9 4f       	sbci	r31, 0xF9	; 249
     642:	71 83       	std	Z+1, r23	; 0x01
     644:	60 83       	st	Z, r22
     646:	08 95       	ret

00000648 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     648:	0e 94 14 05 	call	0xa28	; 0xa28 <nwkRxTaskHandler>
  nwkTxTaskHandler();
     64c:	0e 94 95 08 	call	0x112a	; 0x112a <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     650:	0e 94 78 03 	call	0x6f0	; 0x6f0 <nwkDataReqTaskHandler>
     654:	08 95       	ret

00000656 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     656:	e0 91 8c 02 	lds	r30, 0x028C
     65a:	f0 91 8d 02 	lds	r31, 0x028D
     65e:	30 97       	sbiw	r30, 0x00	; 0
     660:	d9 f0       	breq	.+54     	; 0x698 <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
     662:	22 81       	ldd	r18, Z+2	; 0x02
     664:	33 81       	ldd	r19, Z+3	; 0x03
     666:	28 17       	cp	r18, r24
     668:	39 07       	cpc	r19, r25
     66a:	89 f4       	brne	.+34     	; 0x68e <nwkDataReqTxConf+0x38>
     66c:	05 c0       	rjmp	.+10     	; 0x678 <nwkDataReqTxConf+0x22>
     66e:	22 81       	ldd	r18, Z+2	; 0x02
     670:	33 81       	ldd	r19, Z+3	; 0x03
     672:	28 17       	cp	r18, r24
     674:	39 07       	cpc	r19, r25
     676:	59 f4       	brne	.+22     	; 0x68e <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
     678:	dc 01       	movw	r26, r24
     67a:	ad 57       	subi	r26, 0x7D	; 125
     67c:	bf 4f       	sbci	r27, 0xFF	; 255
     67e:	2c 91       	ld	r18, X
     680:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     682:	13 96       	adiw	r26, 0x03	; 3
     684:	2c 91       	ld	r18, X
     686:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     688:	22 e0       	ldi	r18, 0x02	; 2
     68a:	24 83       	std	Z+4, r18	; 0x04
      break;
     68c:	05 c0       	rjmp	.+10     	; 0x698 <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     68e:	01 90       	ld	r0, Z+
     690:	f0 81       	ld	r31, Z
     692:	e0 2d       	mov	r30, r0
     694:	30 97       	sbiw	r30, 0x00	; 0
     696:	59 f7       	brne	.-42     	; 0x66e <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     698:	0e 94 5f 04 	call	0x8be	; 0x8be <nwkFrameFree>
     69c:	08 95       	ret

0000069e <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     69e:	10 92 8d 02 	sts	0x028D, r1
     6a2:	10 92 8c 02 	sts	0x028C, r1
     6a6:	08 95       	ret

000006a8 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     6a8:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     6aa:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     6ac:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     6ae:	13 82       	std	Z+3, r1	; 0x03
     6b0:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     6b2:	ae e1       	ldi	r26, 0x1E	; 30
     6b4:	b6 e0       	ldi	r27, 0x06	; 6
     6b6:	96 96       	adiw	r26, 0x26	; 38
     6b8:	8d 91       	ld	r24, X+
     6ba:	9c 91       	ld	r25, X
     6bc:	97 97       	sbiw	r26, 0x27	; 39
     6be:	01 96       	adiw	r24, 0x01	; 1
     6c0:	97 96       	adiw	r26, 0x27	; 39
     6c2:	9c 93       	st	X, r25
     6c4:	8e 93       	st	-X, r24
     6c6:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
     6c8:	80 91 8c 02 	lds	r24, 0x028C
     6cc:	90 91 8d 02 	lds	r25, 0x028D
     6d0:	00 97       	sbiw	r24, 0x00	; 0
     6d2:	39 f4       	brne	.+14     	; 0x6e2 <NWK_DataReq+0x3a>
  {
    req->next = NULL;
     6d4:	11 82       	std	Z+1, r1	; 0x01
     6d6:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     6d8:	f0 93 8d 02 	sts	0x028D, r31
     6dc:	e0 93 8c 02 	sts	0x028C, r30
     6e0:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
     6e2:	91 83       	std	Z+1, r25	; 0x01
     6e4:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
     6e6:	f0 93 8d 02 	sts	0x028D, r31
     6ea:	e0 93 8c 02 	sts	0x028C, r30
     6ee:	08 95       	ret

000006f0 <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     6f0:	0f 93       	push	r16
     6f2:	1f 93       	push	r17
     6f4:	cf 93       	push	r28
     6f6:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     6f8:	e0 91 8c 02 	lds	r30, 0x028C
     6fc:	f0 91 8d 02 	lds	r31, 0x028D
     700:	30 97       	sbiw	r30, 0x00	; 0
     702:	09 f4       	brne	.+2      	; 0x706 <nwkDataReqTaskHandler+0x16>
     704:	95 c0       	rjmp	.+298    	; 0x830 <nwkDataReqTaskHandler+0x140>
     706:	ef 01       	movw	r28, r30
  {
    switch (req->state)
     708:	8c 81       	ldd	r24, Y+4	; 0x04
     70a:	88 23       	and	r24, r24
     70c:	21 f0       	breq	.+8      	; 0x716 <nwkDataReqTaskHandler+0x26>
     70e:	82 30       	cpi	r24, 0x02	; 2
     710:	09 f4       	brne	.+2      	; 0x714 <nwkDataReqTaskHandler+0x24>
     712:	68 c0       	rjmp	.+208    	; 0x7e4 <nwkDataReqTaskHandler+0xf4>
     714:	87 c0       	rjmp	.+270    	; 0x824 <nwkDataReqTaskHandler+0x134>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     716:	0e 94 28 04 	call	0x850	; 0x850 <nwkFrameAlloc>
     71a:	8c 01       	movw	r16, r24
     71c:	00 97       	sbiw	r24, 0x00	; 0
     71e:	21 f4       	brne	.+8      	; 0x728 <nwkDataReqTaskHandler+0x38>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     720:	82 e0       	ldi	r24, 0x02	; 2
     722:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     724:	8f 87       	std	Y+15, r24	; 0x0f
     726:	84 c0       	rjmp	.+264    	; 0x830 <nwkDataReqTaskHandler+0x140>
    return;
  }

  req->frame = frame;
     728:	9b 83       	std	Y+3, r25	; 0x03
     72a:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     730:	f8 01       	movw	r30, r16
     732:	e9 57       	subi	r30, 0x79	; 121
     734:	ff 4f       	sbci	r31, 0xFF	; 255
     736:	8b e2       	ldi	r24, 0x2B	; 43
     738:	93 e0       	ldi	r25, 0x03	; 3
     73a:	91 83       	std	Z+1, r25	; 0x01
     73c:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     73e:	31 97       	sbiw	r30, 0x01	; 1
     740:	89 85       	ldd	r24, Y+9	; 0x09
     742:	82 fb       	bst	r24, 2
     744:	88 27       	eor	r24, r24
     746:	80 f9       	bld	r24, 0
     748:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     74a:	99 85       	ldd	r25, Y+9	; 0x09
     74c:	d8 01       	movw	r26, r16
     74e:	1b 96       	adiw	r26, 0x0b	; 11
     750:	8c 91       	ld	r24, X
     752:	1b 97       	sbiw	r26, 0x0b	; 11
     754:	90 fb       	bst	r25, 0
     756:	80 f9       	bld	r24, 0
     758:	1b 96       	adiw	r26, 0x0b	; 11
     75a:	8c 93       	st	X, r24
     75c:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     75e:	99 85       	ldd	r25, Y+9	; 0x09
     760:	93 fb       	bst	r25, 3
     762:	99 27       	eor	r25, r25
     764:	90 f9       	bld	r25, 0
     766:	90 fb       	bst	r25, 0
     768:	82 f9       	bld	r24, 2
     76a:	1b 96       	adiw	r26, 0x0b	; 11
     76c:	8c 93       	st	X, r24
     76e:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     770:	ee e1       	ldi	r30, 0x1E	; 30
     772:	f6 e0       	ldi	r31, 0x06	; 6
     774:	84 81       	ldd	r24, Z+4	; 0x04
     776:	8f 5f       	subi	r24, 0xFF	; 255
     778:	84 83       	std	Z+4, r24	; 0x04
     77a:	1c 96       	adiw	r26, 0x0c	; 12
     77c:	8c 93       	st	X, r24
     77e:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
     780:	80 81       	ld	r24, Z
     782:	91 81       	ldd	r25, Z+1	; 0x01
     784:	1e 96       	adiw	r26, 0x0e	; 14
     786:	9c 93       	st	X, r25
     788:	8e 93       	st	-X, r24
     78a:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
     78c:	8d 81       	ldd	r24, Y+5	; 0x05
     78e:	9e 81       	ldd	r25, Y+6	; 0x06
     790:	50 96       	adiw	r26, 0x10	; 16
     792:	9c 93       	st	X, r25
     794:	8e 93       	st	-X, r24
     796:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     798:	88 85       	ldd	r24, Y+8	; 0x08
     79a:	98 2f       	mov	r25, r24
     79c:	9f 70       	andi	r25, 0x0F	; 15
     79e:	51 96       	adiw	r26, 0x11	; 17
     7a0:	8c 91       	ld	r24, X
     7a2:	51 97       	sbiw	r26, 0x11	; 17
     7a4:	80 7f       	andi	r24, 0xF0	; 240
     7a6:	89 2b       	or	r24, r25
     7a8:	51 96       	adiw	r26, 0x11	; 17
     7aa:	8c 93       	st	X, r24
     7ac:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     7ae:	9f 81       	ldd	r25, Y+7	; 0x07
     7b0:	92 95       	swap	r25
     7b2:	90 7f       	andi	r25, 0xF0	; 240
     7b4:	8f 70       	andi	r24, 0x0F	; 15
     7b6:	89 2b       	or	r24, r25
     7b8:	51 96       	adiw	r26, 0x11	; 17
     7ba:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
     7bc:	f8 01       	movw	r30, r16
     7be:	ef 57       	subi	r30, 0x7F	; 127
     7c0:	ff 4f       	sbci	r31, 0xFF	; 255
     7c2:	4c 85       	ldd	r20, Y+12	; 0x0c
     7c4:	50 e0       	ldi	r21, 0x00	; 0
     7c6:	6a 85       	ldd	r22, Y+10	; 0x0a
     7c8:	7b 85       	ldd	r23, Y+11	; 0x0b
     7ca:	80 81       	ld	r24, Z
     7cc:	91 81       	ldd	r25, Z+1	; 0x01
     7ce:	0e 94 83 10 	call	0x2106	; 0x2106 <memcpy>
  frame->size += req->size;
     7d2:	f8 01       	movw	r30, r16
     7d4:	91 81       	ldd	r25, Z+1	; 0x01
     7d6:	8c 85       	ldd	r24, Y+12	; 0x0c
     7d8:	89 0f       	add	r24, r25
     7da:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
     7dc:	c8 01       	movw	r24, r16
     7de:	0e 94 b8 07 	call	0xf70	; 0xf70 <nwkTxFrame>
     7e2:	26 c0       	rjmp	.+76     	; 0x830 <nwkDataReqTaskHandler+0x140>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
     7e4:	ce 17       	cp	r28, r30
     7e6:	df 07       	cpc	r29, r31
     7e8:	41 f4       	brne	.+16     	; 0x7fa <nwkDataReqTaskHandler+0x10a>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     7ea:	88 81       	ld	r24, Y
     7ec:	99 81       	ldd	r25, Y+1	; 0x01
     7ee:	90 93 8d 02 	sts	0x028D, r25
     7f2:	80 93 8c 02 	sts	0x028C, r24
     7f6:	0a c0       	rjmp	.+20     	; 0x80c <nwkDataReqTaskHandler+0x11c>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
     7f8:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     7fa:	80 81       	ld	r24, Z
     7fc:	91 81       	ldd	r25, Z+1	; 0x01
     7fe:	c8 17       	cp	r28, r24
     800:	d9 07       	cpc	r29, r25
     802:	d1 f7       	brne	.-12     	; 0x7f8 <nwkDataReqTaskHandler+0x108>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     804:	88 81       	ld	r24, Y
     806:	99 81       	ldd	r25, Y+1	; 0x01
     808:	91 83       	std	Z+1, r25	; 0x01
     80a:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
     80c:	ee e1       	ldi	r30, 0x1E	; 30
     80e:	f6 e0       	ldi	r31, 0x06	; 6
     810:	86 a1       	ldd	r24, Z+38	; 0x26
     812:	97 a1       	ldd	r25, Z+39	; 0x27
     814:	01 97       	sbiw	r24, 0x01	; 1
     816:	97 a3       	std	Z+39, r25	; 0x27
     818:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
     81a:	ed 85       	ldd	r30, Y+13	; 0x0d
     81c:	fe 85       	ldd	r31, Y+14	; 0x0e
     81e:	ce 01       	movw	r24, r28
     820:	09 95       	icall
     822:	06 c0       	rjmp	.+12     	; 0x830 <nwkDataReqTaskHandler+0x140>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     824:	09 90       	ld	r0, Y+
     826:	d8 81       	ld	r29, Y
     828:	c0 2d       	mov	r28, r0
     82a:	20 97       	sbiw	r28, 0x00	; 0
     82c:	09 f0       	breq	.+2      	; 0x830 <nwkDataReqTaskHandler+0x140>
     82e:	6c cf       	rjmp	.-296    	; 0x708 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
     830:	df 91       	pop	r29
     832:	cf 91       	pop	r28
     834:	1f 91       	pop	r17
     836:	0f 91       	pop	r16
     838:	08 95       	ret

0000083a <nwkFrameInit>:
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     83a:	10 92 8e 02 	sts	0x028E, r1
     83e:	10 92 17 03 	sts	0x0317, r1
     842:	10 92 a0 03 	sts	0x03A0, r1
     846:	10 92 29 04 	sts	0x0429, r1
     84a:	10 92 b2 04 	sts	0x04B2, r1
     84e:	08 95       	ret

00000850 <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     850:	80 91 8e 02 	lds	r24, 0x028E
     854:	88 23       	and	r24, r24
     856:	49 f0       	breq	.+18     	; 0x86a <nwkFrameAlloc+0x1a>
     858:	e7 e1       	ldi	r30, 0x17	; 23
     85a:	f3 e0       	ldi	r31, 0x03	; 3
     85c:	81 e0       	ldi	r24, 0x01	; 1
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	ac 01       	movw	r20, r24
     862:	20 81       	ld	r18, Z
     864:	21 11       	cpse	r18, r1
     866:	22 c0       	rjmp	.+68     	; 0x8ac <nwkFrameAlloc+0x5c>
     868:	02 c0       	rjmp	.+4      	; 0x86e <nwkFrameAlloc+0x1e>
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     86e:	69 e8       	ldi	r22, 0x89	; 137
     870:	64 9f       	mul	r22, r20
     872:	90 01       	movw	r18, r0
     874:	65 9f       	mul	r22, r21
     876:	30 0d       	add	r19, r0
     878:	11 24       	eor	r1, r1
     87a:	c9 01       	movw	r24, r18
     87c:	82 57       	subi	r24, 0x72	; 114
     87e:	9d 4f       	sbci	r25, 0xFD	; 253
     880:	fc 01       	movw	r30, r24
     882:	11 92       	st	Z+, r1
     884:	6a 95       	dec	r22
     886:	e9 f7       	brne	.-6      	; 0x882 <nwkFrameAlloc+0x32>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     888:	40 e1       	ldi	r20, 0x10	; 16
     88a:	fc 01       	movw	r30, r24
     88c:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
     88e:	ef 57       	subi	r30, 0x7F	; 127
     890:	ff 4f       	sbci	r31, 0xFF	; 255
     892:	20 56       	subi	r18, 0x60	; 96
     894:	3d 4f       	sbci	r19, 0xFD	; 253
     896:	31 83       	std	Z+1, r19	; 0x01
     898:	20 83       	st	Z, r18
      nwkIb.lock++;
     89a:	ee e1       	ldi	r30, 0x1E	; 30
     89c:	f6 e0       	ldi	r31, 0x06	; 6
     89e:	26 a1       	ldd	r18, Z+38	; 0x26
     8a0:	37 a1       	ldd	r19, Z+39	; 0x27
     8a2:	2f 5f       	subi	r18, 0xFF	; 255
     8a4:	3f 4f       	sbci	r19, 0xFF	; 255
     8a6:	37 a3       	std	Z+39, r19	; 0x27
     8a8:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
     8aa:	08 95       	ret
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	e7 57       	subi	r30, 0x77	; 119
     8b0:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     8b2:	85 30       	cpi	r24, 0x05	; 5
     8b4:	91 05       	cpc	r25, r1
     8b6:	a1 f6       	brne	.-88     	; 0x860 <nwkFrameAlloc+0x10>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
     8b8:	80 e0       	ldi	r24, 0x00	; 0
     8ba:	90 e0       	ldi	r25, 0x00	; 0
}
     8bc:	08 95       	ret

000008be <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
     8be:	fc 01       	movw	r30, r24
     8c0:	10 82       	st	Z, r1
  nwkIb.lock--;
     8c2:	ee e1       	ldi	r30, 0x1E	; 30
     8c4:	f6 e0       	ldi	r31, 0x06	; 6
     8c6:	86 a1       	ldd	r24, Z+38	; 0x26
     8c8:	97 a1       	ldd	r25, Z+39	; 0x27
     8ca:	01 97       	sbiw	r24, 0x01	; 1
     8cc:	97 a3       	std	Z+39, r25	; 0x27
     8ce:	86 a3       	std	Z+38, r24	; 0x26
     8d0:	08 95       	ret

000008d2 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     8d2:	00 97       	sbiw	r24, 0x00	; 0
     8d4:	41 f0       	breq	.+16     	; 0x8e6 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     8d6:	fc 01       	movw	r30, r24
     8d8:	e7 57       	subi	r30, 0x77	; 119
     8da:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     8dc:	85 e0       	ldi	r24, 0x05	; 5
     8de:	eb 33       	cpi	r30, 0x3B	; 59
     8e0:	f8 07       	cpc	r31, r24
     8e2:	18 f0       	brcs	.+6      	; 0x8ea <nwkFrameNext+0x18>
     8e4:	15 c0       	rjmp	.+42     	; 0x910 <nwkFrameNext+0x3e>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     8e6:	ee e8       	ldi	r30, 0x8E	; 142
     8e8:	f2 e0       	ldi	r31, 0x02	; 2
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     8ea:	80 81       	ld	r24, Z
     8ec:	88 23       	and	r24, r24
     8ee:	39 f0       	breq	.+14     	; 0x8fe <nwkFrameNext+0x2c>
     8f0:	03 c0       	rjmp	.+6      	; 0x8f8 <nwkFrameNext+0x26>
     8f2:	80 81       	ld	r24, Z
     8f4:	88 23       	and	r24, r24
     8f6:	19 f0       	breq	.+6      	; 0x8fe <nwkFrameNext+0x2c>
      return frame;
     8f8:	8e 2f       	mov	r24, r30
     8fa:	9f 2f       	mov	r25, r31
     8fc:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     8fe:	e7 57       	subi	r30, 0x77	; 119
     900:	ff 4f       	sbci	r31, 0xFF	; 255
     902:	85 e0       	ldi	r24, 0x05	; 5
     904:	eb 33       	cpi	r30, 0x3B	; 59
     906:	f8 07       	cpc	r31, r24
     908:	a0 f3       	brcs	.-24     	; 0x8f2 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	90 e0       	ldi	r25, 0x00	; 0
     90e:	08 95       	ret
     910:	80 e0       	ldi	r24, 0x00	; 0
     912:	90 e0       	ldi	r25, 0x00	; 0
}
     914:	08 95       	ret

00000916 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     916:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
     918:	dc 01       	movw	r26, r24
     91a:	ad 57       	subi	r26, 0x7D	; 125
     91c:	bf 4f       	sbci	r27, 0xFF	; 255
     91e:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     920:	ae e1       	ldi	r26, 0x1E	; 30
     922:	b6 e0       	ldi	r27, 0x06	; 6
     924:	14 96       	adiw	r26, 0x04	; 4
     926:	9c 91       	ld	r25, X
     928:	14 97       	sbiw	r26, 0x04	; 4
     92a:	9f 5f       	subi	r25, 0xFF	; 255
     92c:	14 96       	adiw	r26, 0x04	; 4
     92e:	9c 93       	st	X, r25
     930:	14 97       	sbiw	r26, 0x04	; 4
     932:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     934:	8d 91       	ld	r24, X+
     936:	9c 91       	ld	r25, X
     938:	96 87       	std	Z+14, r25	; 0x0e
     93a:	85 87       	std	Z+13, r24	; 0x0d
     93c:	08 95       	ret

0000093e <nwkRxServiceDataInd>:
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
     93e:	dc 01       	movw	r26, r24
     940:	19 96       	adiw	r26, 0x09	; 9
     942:	2c 91       	ld	r18, X
     944:	19 97       	sbiw	r26, 0x09	; 9
     946:	22 23       	and	r18, r18
     948:	51 f0       	breq	.+20     	; 0x95e <nwkRxServiceDataInd+0x20>
    return false;

  switch (ind->data[0])
     94a:	17 96       	adiw	r26, 0x07	; 7
     94c:	ed 91       	ld	r30, X+
     94e:	fc 91       	ld	r31, X
     950:	18 97       	sbiw	r26, 0x08	; 8
     952:	20 81       	ld	r18, Z
     954:	21 11       	cpse	r18, r1
     956:	05 c0       	rjmp	.+10     	; 0x962 <nwkRxServiceDataInd+0x24>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
     958:	0e 94 4d 08 	call	0x109a	; 0x109a <nwkTxAckReceived>
     95c:	08 95       	ret
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    return false;
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	08 95       	ret
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
     962:	80 e0       	ldi	r24, 0x00	; 0
  }
}
     964:	08 95       	ret

00000966 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
     966:	bc 01       	movw	r22, r24
     968:	ed e4       	ldi	r30, 0x4D	; 77
     96a:	f5 e0       	ldi	r31, 0x05	; 5
     96c:	2f e7       	ldi	r18, 0x7F	; 127
     96e:	35 e0       	ldi	r19, 0x05	; 5
  bool restart = false;
     970:	40 e0       	ldi	r20, 0x00	; 0
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
     972:	51 e0       	ldi	r21, 0x01	; 1
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
     974:	90 81       	ld	r25, Z
     976:	99 23       	and	r25, r25
     978:	19 f0       	breq	.+6      	; 0x980 <nwkRxDuplicateRejectionTimerHandler+0x1a>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
     97a:	91 50       	subi	r25, 0x01	; 1
     97c:	90 83       	st	Z, r25
      restart = true;
     97e:	45 2f       	mov	r20, r21
     980:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     982:	e2 17       	cp	r30, r18
     984:	f3 07       	cpc	r31, r19
     986:	b1 f7       	brne	.-20     	; 0x974 <nwkRxDuplicateRejectionTimerHandler+0xe>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
     988:	44 23       	and	r20, r20
     98a:	19 f0       	breq	.+6      	; 0x992 <nwkRxDuplicateRejectionTimerHandler+0x2c>
     98c:	cb 01       	movw	r24, r22
    SYS_TimerStart(timer);
     98e:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <SYS_TimerStart>
     992:	08 95       	ret

00000994 <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
     994:	ed e4       	ldi	r30, 0x4D	; 77
     996:	f5 e0       	ldi	r31, 0x05	; 5
     998:	8f e7       	ldi	r24, 0x7F	; 127
     99a:	95 e0       	ldi	r25, 0x05	; 5
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
     99c:	10 82       	st	Z, r1
     99e:	35 96       	adiw	r30, 0x05	; 5
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     9a0:	e8 17       	cp	r30, r24
     9a2:	f9 07       	cpc	r31, r25
     9a4:	d9 f7       	brne	.-10     	; 0x99c <nwkRxInit+0x8>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
     9a6:	eb e3       	ldi	r30, 0x3B	; 59
     9a8:	f5 e0       	ldi	r31, 0x05	; 5
     9aa:	84 e6       	ldi	r24, 0x64	; 100
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	a0 e0       	ldi	r26, 0x00	; 0
     9b0:	b0 e0       	ldi	r27, 0x00	; 0
     9b2:	86 83       	std	Z+6, r24	; 0x06
     9b4:	97 83       	std	Z+7, r25	; 0x07
     9b6:	a0 87       	std	Z+8, r26	; 0x08
     9b8:	b1 87       	std	Z+9, r27	; 0x09
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
     9ba:	12 86       	std	Z+10, r1	; 0x0a
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
     9bc:	83 eb       	ldi	r24, 0xB3	; 179
     9be:	94 e0       	ldi	r25, 0x04	; 4
     9c0:	94 87       	std	Z+12, r25	; 0x0c
     9c2:	83 87       	std	Z+11, r24	; 0x0b

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
     9c4:	6f e9       	ldi	r22, 0x9F	; 159
     9c6:	74 e0       	ldi	r23, 0x04	; 4
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	0e 94 1b 03 	call	0x636	; 0x636 <NWK_OpenEndpoint>
     9ce:	08 95       	ret

000009d0 <PHY_DataInd>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
  NwkFrame_t *frame;

  if (0x88 != ind->data[1] || (0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
     9d4:	dc 01       	movw	r26, r24
     9d6:	ed 91       	ld	r30, X+
     9d8:	fc 91       	ld	r31, X
     9da:	11 97       	sbiw	r26, 0x01	; 1
     9dc:	21 81       	ldd	r18, Z+1	; 0x01
     9de:	28 38       	cpi	r18, 0x88	; 136
     9e0:	01 f5       	brne	.+64     	; 0xa22 <PHY_DataInd+0x52>
     9e2:	20 81       	ld	r18, Z
     9e4:	2f 7d       	andi	r18, 0xDF	; 223
     9e6:	21 34       	cpi	r18, 0x41	; 65
     9e8:	e1 f4       	brne	.+56     	; 0xa22 <PHY_DataInd+0x52>
     9ea:	12 96       	adiw	r26, 0x02	; 2
     9ec:	2c 91       	ld	r18, X
     9ee:	20 31       	cpi	r18, 0x10	; 16
     9f0:	c0 f0       	brcs	.+48     	; 0xa22 <PHY_DataInd+0x52>
     9f2:	ec 01       	movw	r28, r24
      ind->size < sizeof(NwkFrameHeader_t))
    return;

  if (NULL == (frame = nwkFrameAlloc()))
     9f4:	0e 94 28 04 	call	0x850	; 0x850 <nwkFrameAlloc>
     9f8:	00 97       	sbiw	r24, 0x00	; 0
     9fa:	99 f0       	breq	.+38     	; 0xa22 <PHY_DataInd+0x52>
    return;

  frame->state = NWK_RX_STATE_RECEIVED;
     9fc:	20 e2       	ldi	r18, 0x20	; 32
     9fe:	fc 01       	movw	r30, r24
     a00:	20 83       	st	Z, r18
  frame->size = ind->size;
     a02:	2a 81       	ldd	r18, Y+2	; 0x02
     a04:	21 83       	std	Z+1, r18	; 0x01
  frame->rx.lqi = ind->lqi;
     a06:	2b 81       	ldd	r18, Y+3	; 0x03
     a08:	ed 57       	subi	r30, 0x7D	; 125
     a0a:	ff 4f       	sbci	r31, 0xFF	; 255
     a0c:	20 83       	st	Z, r18
  frame->rx.rssi = ind->rssi;
     a0e:	2c 81       	ldd	r18, Y+4	; 0x04
     a10:	31 96       	adiw	r30, 0x01	; 1
     a12:	20 83       	st	Z, r18
  memcpy(frame->data, ind->data, ind->size);
     a14:	4a 81       	ldd	r20, Y+2	; 0x02
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	68 81       	ld	r22, Y
     a1a:	79 81       	ldd	r23, Y+1	; 0x01
     a1c:	02 96       	adiw	r24, 0x02	; 2
     a1e:	0e 94 83 10 	call	0x2106	; 0x2106 <memcpy>
}
     a22:	df 91       	pop	r29
     a24:	cf 91       	pop	r28
     a26:	08 95       	ret

00000a28 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     a28:	2f 92       	push	r2
     a2a:	3f 92       	push	r3
     a2c:	4f 92       	push	r4
     a2e:	5f 92       	push	r5
     a30:	6f 92       	push	r6
     a32:	7f 92       	push	r7
     a34:	8f 92       	push	r8
     a36:	9f 92       	push	r9
     a38:	af 92       	push	r10
     a3a:	bf 92       	push	r11
     a3c:	cf 92       	push	r12
     a3e:	df 92       	push	r13
     a40:	ef 92       	push	r14
     a42:	ff 92       	push	r15
     a44:	0f 93       	push	r16
     a46:	1f 93       	push	r17
     a48:	cf 93       	push	r28
     a4a:	df 93       	push	r29
     a4c:	cd b7       	in	r28, 0x3d	; 61
     a4e:	de b7       	in	r29, 0x3e	; 62
     a50:	2c 97       	sbiw	r28, 0x0c	; 12
     a52:	0f b6       	in	r0, 0x3f	; 63
     a54:	f8 94       	cli
     a56:	de bf       	out	0x3e, r29	; 62
     a58:	0f be       	out	0x3f, r0	; 63
     a5a:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
     a5c:	00 e0       	ldi	r16, 0x00	; 0
     a5e:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     a60:	0f 2e       	mov	r0, r31
     a62:	f4 e2       	ldi	r31, 0x24	; 36
     a64:	df 2e       	mov	r13, r31
     a66:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     a68:	0f 2e       	mov	r0, r31
     a6a:	fe e1       	ldi	r31, 0x1E	; 30
     a6c:	8f 2e       	mov	r8, r31
     a6e:	f6 e0       	ldi	r31, 0x06	; 6
     a70:	9f 2e       	mov	r9, r31
     a72:	f0 2d       	mov	r31, r0
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     a74:	68 94       	set
     a76:	cc 24       	eor	r12, r12
     a78:	c4 f8       	bld	r12, 4
     a7a:	0f 2e       	mov	r0, r31
     a7c:	fd e4       	ldi	r31, 0x4D	; 77
     a7e:	4f 2e       	mov	r4, r31
     a80:	f5 e0       	ldi	r31, 0x05	; 5
     a82:	5f 2e       	mov	r5, r31
     a84:	f0 2d       	mov	r31, r0
     a86:	0f 2e       	mov	r0, r31
     a88:	f9 e4       	ldi	r31, 0x49	; 73
     a8a:	6f 2e       	mov	r6, r31
     a8c:	f5 e0       	ldi	r31, 0x05	; 5
     a8e:	7f 2e       	mov	r7, r31
     a90:	f0 2d       	mov	r31, r0
     a92:	0f 2e       	mov	r0, r31
     a94:	fb e7       	ldi	r31, 0x7B	; 123
     a96:	ef 2e       	mov	r14, r31
     a98:	f5 e0       	ldi	r31, 0x05	; 5
     a9a:	ff 2e       	mov	r15, r31
     a9c:	f0 2d       	mov	r31, r0
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
     a9e:	31 2c       	mov	r3, r1
     aa0:	21 2c       	mov	r2, r1
     aa2:	58 01       	movw	r10, r16
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     aa4:	a8 c1       	rjmp	.+848    	; 0xdf6 <nwkRxTaskHandler+0x3ce>
  {
    switch (frame->state)
     aa6:	d5 01       	movw	r26, r10
     aa8:	8c 91       	ld	r24, X
     aaa:	82 32       	cpi	r24, 0x22	; 34
     aac:	09 f4       	brne	.+2      	; 0xab0 <nwkRxTaskHandler+0x88>
     aae:	d1 c0       	rjmp	.+418    	; 0xc52 <nwkRxTaskHandler+0x22a>
     ab0:	84 32       	cpi	r24, 0x24	; 36
     ab2:	09 f4       	brne	.+2      	; 0xab6 <nwkRxTaskHandler+0x8e>
     ab4:	9d c1       	rjmp	.+826    	; 0xdf0 <nwkRxTaskHandler+0x3c8>
     ab6:	80 32       	cpi	r24, 0x20	; 32
     ab8:	09 f0       	breq	.+2      	; 0xabc <nwkRxTaskHandler+0x94>
     aba:	9d c1       	rjmp	.+826    	; 0xdf6 <nwkRxTaskHandler+0x3ce>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
     abc:	dc 92       	st	X, r13

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
     abe:	1b 96       	adiw	r26, 0x0b	; 11
     ac0:	8c 91       	ld	r24, X
     ac2:	1b 97       	sbiw	r26, 0x0b	; 11
     ac4:	98 2f       	mov	r25, r24
     ac6:	9a 70       	andi	r25, 0x0A	; 10

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
     ac8:	09 f0       	breq	.+2      	; 0xacc <nwkRxTaskHandler+0xa4>
     aca:	95 c1       	rjmp	.+810    	; 0xdf6 <nwkRxTaskHandler+0x3ce>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     acc:	15 96       	adiw	r26, 0x05	; 5
     ace:	2d 91       	ld	r18, X+
     ad0:	3c 91       	ld	r19, X
     ad2:	16 97       	sbiw	r26, 0x06	; 6
     ad4:	2f 3f       	cpi	r18, 0xFF	; 255
     ad6:	3f 4f       	sbci	r19, 0xFF	; 255
     ad8:	81 f4       	brne	.+32     	; 0xafa <nwkRxTaskHandler+0xd2>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     ada:	f5 01       	movw	r30, r10
     adc:	87 85       	ldd	r24, Z+15	; 0x0f
     ade:	90 89       	ldd	r25, Z+16	; 0x10
     ae0:	d4 01       	movw	r26, r8
     ae2:	2d 91       	ld	r18, X+
     ae4:	3c 91       	ld	r19, X
     ae6:	28 17       	cp	r18, r24
     ae8:	39 07       	cpc	r19, r25
     aea:	19 f0       	breq	.+6      	; 0xaf2 <nwkRxTaskHandler+0xca>
     aec:	01 96       	adiw	r24, 0x01	; 1
     aee:	09 f0       	breq	.+2      	; 0xaf2 <nwkRxTaskHandler+0xca>
     af0:	82 c1       	rjmp	.+772    	; 0xdf6 <nwkRxTaskHandler+0x3ce>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     af2:	22 e2       	ldi	r18, 0x22	; 34
     af4:	f5 01       	movw	r30, r10
     af6:	20 83       	st	Z, r18
     af8:	7e c1       	rjmp	.+764    	; 0xdf6 <nwkRxTaskHandler+0x3ce>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
     afa:	d5 01       	movw	r26, r10
     afc:	1f 96       	adiw	r26, 0x0f	; 15
     afe:	2d 91       	ld	r18, X+
     b00:	3c 91       	ld	r19, X
     b02:	50 97       	sbiw	r26, 0x10	; 16
     b04:	2f 3f       	cpi	r18, 0xFF	; 255
     b06:	3f 4f       	sbci	r19, 0xFF	; 255
     b08:	09 f0       	breq	.+2      	; 0xb0c <nwkRxTaskHandler+0xe4>
     b0a:	7d c1       	rjmp	.+762    	; 0xe06 <nwkRxTaskHandler+0x3de>
     b0c:	80 ff       	sbrs	r24, 0
     b0e:	7b c1       	rjmp	.+758    	; 0xe06 <nwkRxTaskHandler+0x3de>
     b10:	72 c1       	rjmp	.+740    	; 0xdf6 <nwkRxTaskHandler+0x3ce>
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
     b12:	8c 01       	movw	r16, r24

    if (entry->ttl && header->nwkSrcAddr == entry->src)
     b14:	2c 91       	ld	r18, X
     b16:	22 23       	and	r18, r18
     b18:	09 f4       	brne	.+2      	; 0xb1c <nwkRxTaskHandler+0xf4>
     b1a:	56 c0       	rjmp	.+172    	; 0xbc8 <nwkRxTaskHandler+0x1a0>
     b1c:	20 81       	ld	r18, Z
     b1e:	31 81       	ldd	r19, Z+1	; 0x01
     b20:	42 17       	cp	r20, r18
     b22:	53 07       	cpc	r21, r19
     b24:	09 f0       	breq	.+2      	; 0xb28 <nwkRxTaskHandler+0x100>
     b26:	51 c0       	rjmp	.+162    	; 0xbca <nwkRxTaskHandler+0x1a2>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
     b28:	f5 01       	movw	r30, r10
     b2a:	94 85       	ldd	r25, Z+12	; 0x0c
     b2c:	f8 01       	movw	r30, r16
     b2e:	ee 0f       	add	r30, r30
     b30:	ff 1f       	adc	r31, r31
     b32:	ee 0f       	add	r30, r30
     b34:	ff 1f       	adc	r31, r31
     b36:	e0 0f       	add	r30, r16
     b38:	f1 1f       	adc	r31, r17
     b3a:	e7 5b       	subi	r30, 0xB7	; 183
     b3c:	fa 4f       	sbci	r31, 0xFA	; 250
     b3e:	82 81       	ldd	r24, Z+2	; 0x02
     b40:	89 1b       	sub	r24, r25

      if (diff < 8)
     b42:	88 30       	cpi	r24, 0x08	; 8
     b44:	38 f5       	brcc	.+78     	; 0xb94 <nwkRxTaskHandler+0x16c>
      {
        if (entry->mask & (1 << diff))
     b46:	f8 01       	movw	r30, r16
     b48:	ee 0f       	add	r30, r30
     b4a:	ff 1f       	adc	r31, r31
     b4c:	ee 0f       	add	r30, r30
     b4e:	ff 1f       	adc	r31, r31
     b50:	e0 0f       	add	r30, r16
     b52:	f1 1f       	adc	r31, r17
     b54:	e7 5b       	subi	r30, 0xB7	; 183
     b56:	fa 4f       	sbci	r31, 0xFA	; 250
     b58:	93 81       	ldd	r25, Z+3	; 0x03
     b5a:	29 2f       	mov	r18, r25
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	08 2e       	mov	r0, r24
     b60:	02 c0       	rjmp	.+4      	; 0xb66 <nwkRxTaskHandler+0x13e>
     b62:	35 95       	asr	r19
     b64:	27 95       	ror	r18
     b66:	0a 94       	dec	r0
     b68:	e2 f7       	brpl	.-8      	; 0xb62 <nwkRxTaskHandler+0x13a>
     b6a:	20 fd       	sbrc	r18, 0
     b6c:	44 c1       	rjmp	.+648    	; 0xdf6 <nwkRxTaskHandler+0x3ce>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     b6e:	f8 01       	movw	r30, r16
     b70:	ee 0f       	add	r30, r30
     b72:	ff 1f       	adc	r31, r31
     b74:	ee 0f       	add	r30, r30
     b76:	ff 1f       	adc	r31, r31
     b78:	e0 0f       	add	r30, r16
     b7a:	f1 1f       	adc	r31, r17
     b7c:	e7 5b       	subi	r30, 0xB7	; 183
     b7e:	fa 4f       	sbci	r31, 0xFA	; 250
     b80:	21 e0       	ldi	r18, 0x01	; 1
     b82:	30 e0       	ldi	r19, 0x00	; 0
     b84:	02 c0       	rjmp	.+4      	; 0xb8a <nwkRxTaskHandler+0x162>
     b86:	22 0f       	add	r18, r18
     b88:	33 1f       	adc	r19, r19
     b8a:	8a 95       	dec	r24
     b8c:	e2 f7       	brpl	.-8      	; 0xb86 <nwkRxTaskHandler+0x15e>
     b8e:	92 2b       	or	r25, r18
     b90:	93 83       	std	Z+3, r25	; 0x03
     b92:	49 c1       	rjmp	.+658    	; 0xe26 <nwkRxTaskHandler+0x3fe>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
     b94:	f8 01       	movw	r30, r16
     b96:	ee 0f       	add	r30, r30
     b98:	ff 1f       	adc	r31, r31
     b9a:	ee 0f       	add	r30, r30
     b9c:	ff 1f       	adc	r31, r31
     b9e:	0e 0f       	add	r16, r30
     ba0:	1f 1f       	adc	r17, r31
     ba2:	f8 01       	movw	r30, r16
     ba4:	e7 5b       	subi	r30, 0xB7	; 183
     ba6:	fa 4f       	sbci	r31, 0xFA	; 250
     ba8:	92 83       	std	Z+2, r25	; 0x02
        entry->mask = (entry->mask << shift) | 1;
     baa:	23 81       	ldd	r18, Z+3	; 0x03
     bac:	30 e0       	ldi	r19, 0x00	; 0
        entry->mask |= (1 << diff);
        return false;
      }
      else
      {
        uint8_t shift = -(int8_t)diff;
     bae:	81 95       	neg	r24

        entry->seq = header->nwkSeq;
        entry->mask = (entry->mask << shift) | 1;
     bb0:	a9 01       	movw	r20, r18
     bb2:	02 c0       	rjmp	.+4      	; 0xbb8 <nwkRxTaskHandler+0x190>
     bb4:	44 0f       	add	r20, r20
     bb6:	55 1f       	adc	r21, r21
     bb8:	8a 95       	dec	r24
     bba:	e2 f7       	brpl	.-8      	; 0xbb4 <nwkRxTaskHandler+0x18c>
     bbc:	ca 01       	movw	r24, r20
     bbe:	81 60       	ori	r24, 0x01	; 1
     bc0:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
     bc2:	8b e0       	ldi	r24, 0x0B	; 11
     bc4:	84 83       	std	Z+4, r24	; 0x04
     bc6:	2f c1       	rjmp	.+606    	; 0xe26 <nwkRxTaskHandler+0x3fe>
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
     bc8:	bf 01       	movw	r22, r30
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	15 96       	adiw	r26, 0x05	; 5
     bce:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     bd0:	ee 15       	cp	r30, r14
     bd2:	ff 05       	cpc	r31, r15
     bd4:	09 f0       	breq	.+2      	; 0xbd8 <nwkRxTaskHandler+0x1b0>
     bd6:	9d cf       	rjmp	.-198    	; 0xb12 <nwkRxTaskHandler+0xea>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
     bd8:	61 15       	cp	r22, r1
     bda:	71 05       	cpc	r23, r1
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <nwkRxTaskHandler+0x1b8>
     bde:	0b c1       	rjmp	.+534    	; 0xdf6 <nwkRxTaskHandler+0x3ce>
    return true;

  freeEntry->src = header->nwkSrcAddr;
     be0:	db 01       	movw	r26, r22
     be2:	11 96       	adiw	r26, 0x01	; 1
     be4:	5c 93       	st	X, r21
     be6:	4e 93       	st	-X, r20
  freeEntry->seq = header->nwkSeq;
     be8:	f5 01       	movw	r30, r10
     bea:	84 85       	ldd	r24, Z+12	; 0x0c
     bec:	12 96       	adiw	r26, 0x02	; 2
     bee:	8c 93       	st	X, r24
     bf0:	12 97       	sbiw	r26, 0x02	; 2
  freeEntry->mask = 1;
     bf2:	f1 e0       	ldi	r31, 0x01	; 1
     bf4:	13 96       	adiw	r26, 0x03	; 3
     bf6:	fc 93       	st	X, r31
     bf8:	13 97       	sbiw	r26, 0x03	; 3
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     bfa:	8b e0       	ldi	r24, 0x0B	; 11
     bfc:	14 96       	adiw	r26, 0x04	; 4
     bfe:	8c 93       	st	X, r24

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
     c00:	8b e3       	ldi	r24, 0x3B	; 59
     c02:	95 e0       	ldi	r25, 0x05	; 5
     c04:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <SYS_TimerStart>
     c08:	0e c1       	rjmp	.+540    	; 0xe26 <nwkRxTaskHandler+0x3fe>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
     c0a:	d5 01       	movw	r26, r10
     c0c:	1f 96       	adiw	r26, 0x0f	; 15
     c0e:	8d 91       	ld	r24, X+
     c10:	9c 91       	ld	r25, X
     c12:	50 97       	sbiw	r26, 0x10	; 16
     c14:	f4 01       	movw	r30, r8
     c16:	20 81       	ld	r18, Z
     c18:	31 81       	ldd	r19, Z+1	; 0x01
     c1a:	28 17       	cp	r18, r24
     c1c:	39 07       	cpc	r19, r25
     c1e:	a9 f0       	breq	.+42     	; 0xc4a <nwkRxTaskHandler+0x222>
        0 == header->nwkFcf.linkLocal)
     c20:	1b 96       	adiw	r26, 0x0b	; 11
     c22:	2c 91       	ld	r18, X
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
     c24:	22 fd       	sbrc	r18, 2
     c26:	0e c0       	rjmp	.+28     	; 0xc44 <nwkRxTaskHandler+0x21c>
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
     c28:	c5 01       	movw	r24, r10
     c2a:	0e 94 07 08 	call	0x100e	; 0x100e <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     c2e:	d5 01       	movw	r26, r10
     c30:	1f 96       	adiw	r26, 0x0f	; 15
     c32:	8d 91       	ld	r24, X+
     c34:	9c 91       	ld	r25, X
     c36:	50 97       	sbiw	r26, 0x10	; 16
     c38:	f4 01       	movw	r30, r8
     c3a:	20 81       	ld	r18, Z
     c3c:	31 81       	ldd	r19, Z+1	; 0x01
     c3e:	28 17       	cp	r18, r24
     c40:	39 07       	cpc	r19, r25
     c42:	19 f0       	breq	.+6      	; 0xc4a <nwkRxTaskHandler+0x222>
     c44:	01 96       	adiw	r24, 0x01	; 1
     c46:	09 f0       	breq	.+2      	; 0xc4a <nwkRxTaskHandler+0x222>
     c48:	d6 c0       	rjmp	.+428    	; 0xdf6 <nwkRxTaskHandler+0x3ce>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     c4a:	e2 e2       	ldi	r30, 0x22	; 34
     c4c:	d5 01       	movw	r26, r10
     c4e:	ec 93       	st	X, r30
     c50:	d2 c0       	rjmp	.+420    	; 0xdf6 <nwkRxTaskHandler+0x3ce>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
     c52:	10 92 48 05 	sts	0x0548, r1
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
     c56:	d5 01       	movw	r26, r10
     c58:	51 96       	adiw	r26, 0x11	; 17
     c5a:	2c 91       	ld	r18, X
     c5c:	51 97       	sbiw	r26, 0x11	; 17
     c5e:	22 95       	swap	r18
     c60:	2f 70       	andi	r18, 0x0F	; 15
     c62:	e2 2f       	mov	r30, r18
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	ee 0f       	add	r30, r30
     c68:	ff 1f       	adc	r31, r31
     c6a:	ec 5d       	subi	r30, 0xDC	; 220
     c6c:	f9 4f       	sbci	r31, 0xF9	; 249
     c6e:	01 90       	ld	r0, Z+
     c70:	f0 81       	ld	r31, Z
     c72:	e0 2d       	mov	r30, r0
     c74:	30 97       	sbiw	r30, 0x00	; 0
     c76:	09 f4       	brne	.+2      	; 0xc7a <nwkRxTaskHandler+0x252>
     c78:	61 c0       	rjmp	.+194    	; 0xd3c <nwkRxTaskHandler+0x314>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
     c7a:	1d 96       	adiw	r26, 0x0d	; 13
     c7c:	8d 91       	ld	r24, X+
     c7e:	9c 91       	ld	r25, X
     c80:	1e 97       	sbiw	r26, 0x0e	; 14
     c82:	9a 83       	std	Y+2, r25	; 0x02
     c84:	89 83       	std	Y+1, r24	; 0x01
  ind.dstAddr = header->nwkDstAddr;
     c86:	1f 96       	adiw	r26, 0x0f	; 15
     c88:	4d 91       	ld	r20, X+
     c8a:	5c 91       	ld	r21, X
     c8c:	50 97       	sbiw	r26, 0x10	; 16
     c8e:	5c 83       	std	Y+4, r21	; 0x04
     c90:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
     c92:	51 96       	adiw	r26, 0x11	; 17
     c94:	3c 91       	ld	r19, X
     c96:	51 97       	sbiw	r26, 0x11	; 17
     c98:	3f 70       	andi	r19, 0x0F	; 15
     c9a:	3d 83       	std	Y+5, r19	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
     c9c:	2e 83       	std	Y+6, r18	; 0x06
  ind.data = frame->payload;
     c9e:	af 57       	subi	r26, 0x7F	; 127
     ca0:	bf 4f       	sbci	r27, 0xFF	; 255
     ca2:	6d 91       	ld	r22, X+
     ca4:	7c 91       	ld	r23, X
     ca6:	79 87       	std	Y+9, r23	; 0x09
     ca8:	68 87       	std	Y+8, r22	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
     caa:	95 01       	movw	r18, r10
     cac:	2e 5f       	subi	r18, 0xFE	; 254
     cae:	3f 4f       	sbci	r19, 0xFF	; 255
     cb0:	26 1b       	sub	r18, r22
     cb2:	37 0b       	sbc	r19, r23
     cb4:	d5 01       	movw	r26, r10
     cb6:	11 96       	adiw	r26, 0x01	; 1
     cb8:	3c 91       	ld	r19, X
     cba:	11 97       	sbiw	r26, 0x01	; 1
     cbc:	23 0f       	add	r18, r19
  ind.size = nwkFramePayloadSize(frame);
     cbe:	2a 87       	std	Y+10, r18	; 0x0a
  ind.lqi = frame->rx.lqi;
     cc0:	ad 57       	subi	r26, 0x7D	; 125
     cc2:	bf 4f       	sbci	r27, 0xFF	; 255
     cc4:	2c 91       	ld	r18, X
     cc6:	2b 87       	std	Y+11, r18	; 0x0b
  ind.rssi = frame->rx.rssi;
     cc8:	11 96       	adiw	r26, 0x01	; 1
     cca:	2c 91       	ld	r18, X
     ccc:	2c 87       	std	Y+12, r18	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
     cce:	d5 01       	movw	r26, r10
     cd0:	1b 96       	adiw	r26, 0x0b	; 11
     cd2:	3c 91       	ld	r19, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
     cd4:	63 2f       	mov	r22, r19
     cd6:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
     cd8:	32 fd       	sbrc	r19, 2
     cda:	02 c0       	rjmp	.+4      	; 0xce0 <nwkRxTaskHandler+0x2b8>
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	01 c0       	rjmp	.+2      	; 0xce2 <nwkRxTaskHandler+0x2ba>
     ce0:	20 e2       	ldi	r18, 0x20	; 32
     ce2:	26 2b       	or	r18, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
     ce4:	33 fd       	sbrc	r19, 3
     ce6:	02 c0       	rjmp	.+4      	; 0xcec <nwkRxTaskHandler+0x2c4>
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	01 c0       	rjmp	.+2      	; 0xcee <nwkRxTaskHandler+0x2c6>
     cec:	30 e4       	ldi	r19, 0x40	; 64
     cee:	23 2b       	or	r18, r19
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
     cf0:	4f 3f       	cpi	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	11 f0       	breq	.+4      	; 0xcfa <nwkRxTaskHandler+0x2d2>
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	01 c0       	rjmp	.+2      	; 0xcfc <nwkRxTaskHandler+0x2d4>
     cfa:	34 e0       	ldi	r19, 0x04	; 4
     cfc:	23 2b       	or	r18, r19
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
     cfe:	d5 01       	movw	r26, r10
     d00:	19 96       	adiw	r26, 0x09	; 9
     d02:	4d 91       	ld	r20, X+
     d04:	5c 91       	ld	r21, X
     d06:	1a 97       	sbiw	r26, 0x0a	; 10
     d08:	84 17       	cp	r24, r20
     d0a:	95 07       	cpc	r25, r21
     d0c:	11 f0       	breq	.+4      	; 0xd12 <nwkRxTaskHandler+0x2ea>
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	01 c0       	rjmp	.+2      	; 0xd14 <nwkRxTaskHandler+0x2ec>
     d12:	98 e0       	ldi	r25, 0x08	; 8
     d14:	82 2f       	mov	r24, r18
     d16:	89 2b       	or	r24, r25
     d18:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     d1a:	d5 01       	movw	r26, r10
     d1c:	15 96       	adiw	r26, 0x05	; 5
     d1e:	2d 91       	ld	r18, X+
     d20:	3c 91       	ld	r19, X
     d22:	16 97       	sbiw	r26, 0x06	; 6
     d24:	2f 3f       	cpi	r18, 0xFF	; 255
     d26:	3f 4f       	sbci	r19, 0xFF	; 255
     d28:	11 f0       	breq	.+4      	; 0xd2e <nwkRxTaskHandler+0x306>
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	01 c0       	rjmp	.+2      	; 0xd30 <nwkRxTaskHandler+0x308>
     d2e:	9c 2d       	mov	r25, r12
     d30:	89 2b       	or	r24, r25
     d32:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
     d34:	ce 01       	movw	r24, r28
     d36:	01 96       	adiw	r24, 0x01	; 1
     d38:	09 95       	icall
     d3a:	01 c0       	rjmp	.+2      	; 0xd3e <nwkRxTaskHandler+0x316>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
     d3c:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
     d3e:	f5 01       	movw	r30, r10
     d40:	93 85       	ldd	r25, Z+11	; 0x0b
     d42:	90 ff       	sbrs	r25, 0
    ack = false;
     d44:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
     d46:	d5 01       	movw	r26, r10
     d48:	17 96       	adiw	r26, 0x07	; 7
     d4a:	2d 91       	ld	r18, X+
     d4c:	3c 91       	ld	r19, X
     d4e:	18 97       	sbiw	r26, 0x08	; 8
     d50:	2f 3f       	cpi	r18, 0xFF	; 255
     d52:	3f 4f       	sbci	r19, 0xFF	; 255
     d54:	69 f4       	brne	.+26     	; 0xd70 <nwkRxTaskHandler+0x348>
     d56:	f4 01       	movw	r30, r8
     d58:	40 81       	ld	r20, Z
     d5a:	51 81       	ldd	r21, Z+1	; 0x01
     d5c:	d5 01       	movw	r26, r10
     d5e:	1f 96       	adiw	r26, 0x0f	; 15
     d60:	2d 91       	ld	r18, X+
     d62:	3c 91       	ld	r19, X
     d64:	50 97       	sbiw	r26, 0x10	; 16
     d66:	42 17       	cp	r20, r18
     d68:	53 07       	cpc	r21, r19
     d6a:	11 f4       	brne	.+4      	; 0xd70 <nwkRxTaskHandler+0x348>
      nwkIb.addr == frame->header.nwkDstAddr &&
     d6c:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
     d6e:	81 e0       	ldi	r24, 0x01	; 1

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
     d70:	f5 01       	movw	r30, r10
     d72:	25 81       	ldd	r18, Z+5	; 0x05
     d74:	36 81       	ldd	r19, Z+6	; 0x06
     d76:	2f 3f       	cpi	r18, 0xFF	; 255
     d78:	3f 4f       	sbci	r19, 0xFF	; 255
     d7a:	b9 f1       	breq	.+110    	; 0xdea <nwkRxTaskHandler+0x3c2>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     d7c:	d4 01       	movw	r26, r8
     d7e:	2d 91       	ld	r18, X+
     d80:	3c 91       	ld	r19, X
     d82:	2f 3f       	cpi	r18, 0xFF	; 255
     d84:	3f 4f       	sbci	r19, 0xFF	; 255
     d86:	89 f1       	breq	.+98     	; 0xdea <nwkRxTaskHandler+0x3c2>
    ack = false;

  if (ack)
     d88:	88 23       	and	r24, r24
     d8a:	79 f1       	breq	.+94     	; 0xdea <nwkRxTaskHandler+0x3c2>
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
     d8c:	0e 94 28 04 	call	0x850	; 0x850 <nwkFrameAlloc>
     d90:	8c 01       	movw	r16, r24
     d92:	00 97       	sbiw	r24, 0x00	; 0
     d94:	51 f1       	breq	.+84     	; 0xdea <nwkRxTaskHandler+0x3c2>
    return;

  nwkFrameCommandInit(ack);
     d96:	0e 94 8b 04 	call	0x916	; 0x916 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
     d9a:	f8 01       	movw	r30, r16
     d9c:	81 81       	ldd	r24, Z+1	; 0x01
     d9e:	8d 5f       	subi	r24, 0xFD	; 253
     da0:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
     da2:	e9 57       	subi	r30, 0x79	; 121
     da4:	ff 4f       	sbci	r31, 0xFF	; 255
     da6:	11 82       	std	Z+1, r1	; 0x01
     da8:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
     daa:	d5 01       	movw	r26, r10
     dac:	1b 96       	adiw	r26, 0x0b	; 11
     dae:	8c 91       	ld	r24, X
     db0:	1b 97       	sbiw	r26, 0x0b	; 11
     db2:	86 95       	lsr	r24
     db4:	81 70       	andi	r24, 0x01	; 1
     db6:	f8 01       	movw	r30, r16
     db8:	93 85       	ldd	r25, Z+11	; 0x0b
     dba:	80 fb       	bst	r24, 0
     dbc:	91 f9       	bld	r25, 1
     dbe:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
     dc0:	1d 96       	adiw	r26, 0x0d	; 13
     dc2:	8d 91       	ld	r24, X+
     dc4:	9c 91       	ld	r25, X
     dc6:	1e 97       	sbiw	r26, 0x0e	; 14
     dc8:	90 8b       	std	Z+16, r25	; 0x10
     dca:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
     dcc:	ef 57       	subi	r30, 0x7F	; 127
     dce:	ff 4f       	sbci	r31, 0xFF	; 255
     dd0:	01 90       	ld	r0, Z+
     dd2:	f0 81       	ld	r31, Z
     dd4:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
     dd6:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
     dd8:	80 91 48 05 	lds	r24, 0x0548
     ddc:	82 83       	std	Z+2, r24	; 0x02
  command->seq = frame->header.nwkSeq;
     dde:	1c 96       	adiw	r26, 0x0c	; 12
     de0:	8c 91       	ld	r24, X
     de2:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(ack);
     de4:	c8 01       	movw	r24, r16
     de6:	0e 94 b8 07 	call	0xf70	; 0xf70 <nwkTxFrame>
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     dea:	d5 01       	movw	r26, r10
     dec:	dc 92       	st	X, r13
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <nwkRxTaskHandler+0x3ce>
      } break;
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
     df0:	c5 01       	movw	r24, r10
     df2:	0e 94 5f 04 	call	0x8be	; 0x8be <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     df6:	c5 01       	movw	r24, r10
     df8:	0e 94 69 04 	call	0x8d2	; 0x8d2 <nwkFrameNext>
     dfc:	5c 01       	movw	r10, r24
     dfe:	89 2b       	or	r24, r25
     e00:	09 f0       	breq	.+2      	; 0xe04 <nwkRxTaskHandler+0x3dc>
     e02:	51 ce       	rjmp	.-862    	; 0xaa6 <nwkRxTaskHandler+0x7e>
     e04:	17 c0       	rjmp	.+46     	; 0xe34 <nwkRxTaskHandler+0x40c>
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
     e06:	f5 01       	movw	r30, r10
     e08:	45 85       	ldd	r20, Z+13	; 0x0d
     e0a:	56 85       	ldd	r21, Z+14	; 0x0e
     e0c:	d4 01       	movw	r26, r8
     e0e:	8d 91       	ld	r24, X+
     e10:	9c 91       	ld	r25, X
     e12:	84 17       	cp	r24, r20
     e14:	95 07       	cpc	r25, r21
     e16:	79 f3       	breq	.-34     	; 0xdf6 <nwkRxTaskHandler+0x3ce>
     e18:	d2 01       	movw	r26, r4
     e1a:	f3 01       	movw	r30, r6
     e1c:	83 2d       	mov	r24, r3
     e1e:	92 2d       	mov	r25, r2
     e20:	63 2d       	mov	r22, r3
     e22:	72 2d       	mov	r23, r2
     e24:	76 ce       	rjmp	.-788    	; 0xb12 <nwkRxTaskHandler+0xea>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
     e26:	f5 01       	movw	r30, r10
     e28:	87 81       	ldd	r24, Z+7	; 0x07
     e2a:	90 85       	ldd	r25, Z+8	; 0x08
     e2c:	01 96       	adiw	r24, 0x01	; 1
     e2e:	09 f0       	breq	.+2      	; 0xe32 <nwkRxTaskHandler+0x40a>
     e30:	fe ce       	rjmp	.-516    	; 0xc2e <nwkRxTaskHandler+0x206>
     e32:	eb ce       	rjmp	.-554    	; 0xc0a <nwkRxTaskHandler+0x1e2>
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
     e34:	2c 96       	adiw	r28, 0x0c	; 12
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	de bf       	out	0x3e, r29	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	cd bf       	out	0x3d, r28	; 61
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	ff 90       	pop	r15
     e4a:	ef 90       	pop	r14
     e4c:	df 90       	pop	r13
     e4e:	cf 90       	pop	r12
     e50:	bf 90       	pop	r11
     e52:	af 90       	pop	r10
     e54:	9f 90       	pop	r9
     e56:	8f 90       	pop	r8
     e58:	7f 90       	pop	r7
     e5a:	6f 90       	pop	r6
     e5c:	5f 90       	pop	r5
     e5e:	4f 90       	pop	r4
     e60:	3f 90       	pop	r3
     e62:	2f 90       	pop	r2
     e64:	08 95       	ret

00000e66 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
     e66:	ef 92       	push	r14
     e68:	ff 92       	push	r15
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	7c 01       	movw	r14, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
     e72:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
     e74:	80 e0       	ldi	r24, 0x00	; 0
     e76:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
     e78:	01 e0       	ldi	r16, 0x01	; 1

      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
     e7a:	c3 e1       	ldi	r28, 0x13	; 19
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
     e7c:	13 c0       	rjmp	.+38     	; 0xea4 <nwkTxDelayTimerHandler+0x3e>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
     e7e:	fc 01       	movw	r30, r24
     e80:	20 81       	ld	r18, Z
     e82:	21 31       	cpi	r18, 0x11	; 17
     e84:	79 f4       	brne	.+30     	; 0xea4 <nwkTxDelayTimerHandler+0x3e>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
     e86:	ec 57       	subi	r30, 0x7C	; 124
     e88:	ff 4f       	sbci	r31, 0xFF	; 255
     e8a:	20 81       	ld	r18, Z
     e8c:	31 81       	ldd	r19, Z+1	; 0x01
     e8e:	21 50       	subi	r18, 0x01	; 1
     e90:	31 09       	sbc	r19, r1
     e92:	31 83       	std	Z+1, r19	; 0x01
     e94:	20 83       	st	Z, r18
     e96:	23 2b       	or	r18, r19
     e98:	21 f4       	brne	.+8      	; 0xea2 <nwkTxDelayTimerHandler+0x3c>
        frame->state = NWK_TX_STATE_SEND;
     e9a:	fc 01       	movw	r30, r24
     e9c:	c0 83       	st	Z, r28

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
     e9e:	10 2f       	mov	r17, r16
     ea0:	01 c0       	rjmp	.+2      	; 0xea4 <nwkTxDelayTimerHandler+0x3e>
     ea2:	10 2f       	mov	r17, r16
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
     ea4:	0e 94 69 04 	call	0x8d2	; 0x8d2 <nwkFrameNext>
     ea8:	00 97       	sbiw	r24, 0x00	; 0
     eaa:	49 f7       	brne	.-46     	; 0xe7e <nwkTxDelayTimerHandler+0x18>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
     eac:	11 23       	and	r17, r17
     eae:	19 f0       	breq	.+6      	; 0xeb6 <nwkTxDelayTimerHandler+0x50>
    SYS_TimerStart(timer);
     eb0:	c7 01       	movw	r24, r14
     eb2:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <SYS_TimerStart>
}
     eb6:	cf 91       	pop	r28
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	ff 90       	pop	r15
     ebe:	ef 90       	pop	r14
     ec0:	08 95       	ret

00000ec2 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
     ec2:	ef 92       	push	r14
     ec4:	ff 92       	push	r15
     ec6:	0f 93       	push	r16
     ec8:	1f 93       	push	r17
     eca:	cf 93       	push	r28
     ecc:	df 93       	push	r29
     ece:	7c 01       	movw	r14, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
     ed0:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
     ed6:	01 e0       	ldi	r16, 0x01	; 1

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
     ed8:	d7 e1       	ldi	r29, 0x17	; 23
  frame->tx.status = status;
     eda:	c0 e1       	ldi	r28, 0x10	; 16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
     edc:	16 c0       	rjmp	.+44     	; 0xf0a <nwkTxAckWaitTimerHandler+0x48>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
     ede:	fc 01       	movw	r30, r24
     ee0:	20 81       	ld	r18, Z
     ee2:	26 31       	cpi	r18, 0x16	; 22
     ee4:	91 f4       	brne	.+36     	; 0xf0a <nwkTxAckWaitTimerHandler+0x48>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
     ee6:	ec 57       	subi	r30, 0x7C	; 124
     ee8:	ff 4f       	sbci	r31, 0xFF	; 255
     eea:	20 81       	ld	r18, Z
     eec:	31 81       	ldd	r19, Z+1	; 0x01
     eee:	21 50       	subi	r18, 0x01	; 1
     ef0:	31 09       	sbc	r19, r1
     ef2:	31 83       	std	Z+1, r19	; 0x01
     ef4:	20 83       	st	Z, r18
     ef6:	23 2b       	or	r18, r19
     ef8:	39 f4       	brne	.+14     	; 0xf08 <nwkTxAckWaitTimerHandler+0x46>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
     efa:	fc 01       	movw	r30, r24
     efc:	d0 83       	st	Z, r29
  frame->tx.status = status;
     efe:	ed 57       	subi	r30, 0x7D	; 125
     f00:	ff 4f       	sbci	r31, 0xFF	; 255
     f02:	c0 83       	st	Z, r28

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
     f04:	10 2f       	mov	r17, r16
     f06:	01 c0       	rjmp	.+2      	; 0xf0a <nwkTxAckWaitTimerHandler+0x48>
     f08:	10 2f       	mov	r17, r16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
     f0a:	0e 94 69 04 	call	0x8d2	; 0x8d2 <nwkFrameNext>
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	31 f7       	brne	.-52     	; 0xede <nwkTxAckWaitTimerHandler+0x1c>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
     f12:	11 23       	and	r17, r17
     f14:	19 f0       	breq	.+6      	; 0xf1c <nwkTxAckWaitTimerHandler+0x5a>
    SYS_TimerStart(timer);
     f16:	c7 01       	movw	r24, r14
     f18:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <SYS_TimerStart>
}
     f1c:	df 91       	pop	r29
     f1e:	cf 91       	pop	r28
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	08 95       	ret

00000f2a <nwkTxInit>:
/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
     f2a:	10 92 96 05 	sts	0x0596, r1
     f2e:	10 92 95 05 	sts	0x0595, r1

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
     f32:	e8 e8       	ldi	r30, 0x88	; 136
     f34:	f5 e0       	ldi	r31, 0x05	; 5
     f36:	82 e3       	ldi	r24, 0x32	; 50
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	a0 e0       	ldi	r26, 0x00	; 0
     f3c:	b0 e0       	ldi	r27, 0x00	; 0
     f3e:	86 83       	std	Z+6, r24	; 0x06
     f40:	97 83       	std	Z+7, r25	; 0x07
     f42:	a0 87       	std	Z+8, r26	; 0x08
     f44:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
     f46:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
     f48:	81 e6       	ldi	r24, 0x61	; 97
     f4a:	97 e0       	ldi	r25, 0x07	; 7
     f4c:	94 87       	std	Z+12, r25	; 0x0c
     f4e:	83 87       	std	Z+11, r24	; 0x0b

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
     f50:	eb e7       	ldi	r30, 0x7B	; 123
     f52:	f5 e0       	ldi	r31, 0x05	; 5
     f54:	8a e0       	ldi	r24, 0x0A	; 10
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	a0 e0       	ldi	r26, 0x00	; 0
     f5a:	b0 e0       	ldi	r27, 0x00	; 0
     f5c:	86 83       	std	Z+6, r24	; 0x06
     f5e:	97 83       	std	Z+7, r25	; 0x07
     f60:	a0 87       	std	Z+8, r26	; 0x08
     f62:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
     f64:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
     f66:	83 e3       	ldi	r24, 0x33	; 51
     f68:	97 e0       	ldi	r25, 0x07	; 7
     f6a:	94 87       	std	Z+12, r25	; 0x0c
     f6c:	83 87       	std	Z+11, r24	; 0x0b
     f6e:	08 95       	ret

00000f70 <nwkTxFrame>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
     f70:	cf 93       	push	r28
     f72:	df 93       	push	r29
     f74:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (frame->tx.control & NWK_TX_CONTROL_ROUTING)
     f76:	dc 01       	movw	r26, r24
     f78:	aa 57       	subi	r26, 0x7A	; 122
     f7a:	bf 4f       	sbci	r27, 0xFF	; 255
     f7c:	8c 91       	ld	r24, X
     f7e:	81 ff       	sbrs	r24, 1
     f80:	03 c0       	rjmp	.+6      	; 0xf88 <nwkTxFrame+0x18>
  {
    frame->state = NWK_TX_STATE_DELAY;
     f82:	92 e1       	ldi	r25, 0x12	; 18
     f84:	90 83       	st	Z, r25
     f86:	02 c0       	rjmp	.+4      	; 0xf8c <nwkTxFrame+0x1c>
  #ifdef NWK_ENABLE_SECURITY
    if (header->nwkFcf.security)
      frame->state = NWK_TX_STATE_ENCRYPT;
    else
  #endif
      frame->state = NWK_TX_STATE_DELAY;
     f88:	92 e1       	ldi	r25, 0x12	; 18
     f8a:	90 83       	st	Z, r25
  }

  frame->tx.status = NWK_SUCCESS_STATUS;
     f8c:	df 01       	movw	r26, r30
     f8e:	ad 57       	subi	r26, 0x7D	; 125
     f90:	bf 4f       	sbci	r27, 0xFF	; 255
     f92:	1c 92       	st	X, r1

  if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)
     f94:	80 ff       	sbrs	r24, 0
     f96:	05 c0       	rjmp	.+10     	; 0xfa2 <nwkTxFrame+0x32>
    header->macDstPanId = NWK_BROADCAST_PANID;
     f98:	8f ef       	ldi	r24, 0xFF	; 255
     f9a:	9f ef       	ldi	r25, 0xFF	; 255
     f9c:	96 83       	std	Z+6, r25	; 0x06
     f9e:	85 83       	std	Z+5, r24	; 0x05
     fa0:	06 c0       	rjmp	.+12     	; 0xfae <nwkTxFrame+0x3e>
  else
    header->macDstPanId = nwkIb.panId;
     fa2:	80 91 20 06 	lds	r24, 0x0620
     fa6:	90 91 21 06 	lds	r25, 0x0621
     faa:	96 83       	std	Z+6, r25	; 0x06
     fac:	85 83       	std	Z+5, r24	; 0x05
  if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) && 
      0 == (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID))
    nwkRoutePrepareTx(frame);
  else
#endif
    header->macDstAddr = header->nwkDstAddr;
     fae:	27 85       	ldd	r18, Z+15	; 0x0f
     fb0:	30 89       	ldd	r19, Z+16	; 0x10
     fb2:	30 87       	std	Z+8, r19	; 0x08
     fb4:	27 83       	std	Z+7, r18	; 0x07

  header->macSrcAddr = nwkIb.addr;
     fb6:	ae e1       	ldi	r26, 0x1E	; 30
     fb8:	b6 e0       	ldi	r27, 0x06	; 6
     fba:	8d 91       	ld	r24, X+
     fbc:	9c 91       	ld	r25, X
     fbe:	11 97       	sbiw	r26, 0x01	; 1
     fc0:	92 87       	std	Z+10, r25	; 0x0a
     fc2:	81 87       	std	Z+9, r24	; 0x09
  header->macSeq = ++nwkIb.macSeqNum;
     fc4:	15 96       	adiw	r26, 0x05	; 5
     fc6:	8c 91       	ld	r24, X
     fc8:	15 97       	sbiw	r26, 0x05	; 5
     fca:	8f 5f       	subi	r24, 0xFF	; 255
     fcc:	15 96       	adiw	r26, 0x05	; 5
     fce:	8c 93       	st	X, r24
     fd0:	84 83       	std	Z+4, r24	; 0x04

  if (NWK_BROADCAST_ADDR == header->macDstAddr)
     fd2:	2f 3f       	cpi	r18, 0xFF	; 255
     fd4:	3f 4f       	sbci	r19, 0xFF	; 255
     fd6:	81 f4       	brne	.+32     	; 0xff8 <nwkTxFrame+0x88>
     fd8:	ef 01       	movw	r28, r30
  {
    header->macFcf = 0x8841;
     fda:	81 e4       	ldi	r24, 0x41	; 65
     fdc:	98 e8       	ldi	r25, 0x88	; 136
     fde:	93 83       	std	Z+3, r25	; 0x03
     fe0:	82 83       	std	Z+2, r24	; 0x02
    frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
     fe2:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <rand>
     fe6:	fe 01       	movw	r30, r28
     fe8:	ec 57       	subi	r30, 0x7C	; 124
     fea:	ff 4f       	sbci	r31, 0xFF	; 255
     fec:	87 70       	andi	r24, 0x07	; 7
     fee:	99 27       	eor	r25, r25
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	91 83       	std	Z+1, r25	; 0x01
     ff4:	80 83       	st	Z, r24
     ff6:	08 c0       	rjmp	.+16     	; 0x1008 <nwkTxFrame+0x98>
  }
  else
  {
    header->macFcf = 0x8861;
     ff8:	81 e6       	ldi	r24, 0x61	; 97
     ffa:	98 e8       	ldi	r25, 0x88	; 136
     ffc:	93 83       	std	Z+3, r25	; 0x03
     ffe:	82 83       	std	Z+2, r24	; 0x02
    frame->tx.timeout = 0;
    1000:	ec 57       	subi	r30, 0x7C	; 124
    1002:	ff 4f       	sbci	r31, 0xFF	; 255
    1004:	11 82       	std	Z+1, r1	; 0x01
    1006:	10 82       	st	Z, r1
  }
}
    1008:	df 91       	pop	r29
    100a:	cf 91       	pop	r28
    100c:	08 95       	ret

0000100e <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    100e:	0f 93       	push	r16
    1010:	1f 93       	push	r17
    1012:	cf 93       	push	r28
    1014:	df 93       	push	r29
    1016:	8c 01       	movw	r16, r24
  NwkFrame_t *newFrame;

  if (NULL == (newFrame = nwkFrameAlloc()))
    1018:	0e 94 28 04 	call	0x850	; 0x850 <nwkFrameAlloc>
    101c:	ec 01       	movw	r28, r24
    101e:	89 2b       	or	r24, r25
    1020:	b9 f1       	breq	.+110    	; 0x1090 <nwkTxBroadcastFrame+0x82>
    return;

  newFrame->state = NWK_TX_STATE_DELAY;
    1022:	82 e1       	ldi	r24, 0x12	; 18
    1024:	88 83       	st	Y, r24
  newFrame->size = frame->size;
    1026:	f8 01       	movw	r30, r16
    1028:	81 81       	ldd	r24, Z+1	; 0x01
    102a:	89 83       	std	Y+1, r24	; 0x01
  newFrame->tx.status = NWK_SUCCESS_STATUS;
    102c:	fe 01       	movw	r30, r28
    102e:	ed 57       	subi	r30, 0x7D	; 125
    1030:	ff 4f       	sbci	r31, 0xFF	; 255
    1032:	10 82       	st	Z, r1
  newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    1034:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <rand>
    1038:	fe 01       	movw	r30, r28
    103a:	ec 57       	subi	r30, 0x7C	; 124
    103c:	ff 4f       	sbci	r31, 0xFF	; 255
    103e:	87 70       	andi	r24, 0x07	; 7
    1040:	99 27       	eor	r25, r25
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	91 83       	std	Z+1, r25	; 0x01
    1046:	80 83       	st	Z, r24
  newFrame->tx.confirm = NULL;
    1048:	33 96       	adiw	r30, 0x03	; 3
    104a:	11 82       	std	Z+1, r1	; 0x01
    104c:	10 82       	st	Z, r1
  memcpy(newFrame->data, frame->data, frame->size);
    104e:	f8 01       	movw	r30, r16
    1050:	41 81       	ldd	r20, Z+1	; 0x01
    1052:	50 e0       	ldi	r21, 0x00	; 0
    1054:	b8 01       	movw	r22, r16
    1056:	6e 5f       	subi	r22, 0xFE	; 254
    1058:	7f 4f       	sbci	r23, 0xFF	; 255
    105a:	ce 01       	movw	r24, r28
    105c:	02 96       	adiw	r24, 0x02	; 2
    105e:	0e 94 83 10 	call	0x2106	; 0x2106 <memcpy>

  newFrame->header.macFcf = 0x8841;
    1062:	81 e4       	ldi	r24, 0x41	; 65
    1064:	98 e8       	ldi	r25, 0x88	; 136
    1066:	9b 83       	std	Y+3, r25	; 0x03
    1068:	8a 83       	std	Y+2, r24	; 0x02
  newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    106a:	8f ef       	ldi	r24, 0xFF	; 255
    106c:	9f ef       	ldi	r25, 0xFF	; 255
    106e:	98 87       	std	Y+8, r25	; 0x08
    1070:	8f 83       	std	Y+7, r24	; 0x07
  newFrame->header.macDstPanId = frame->header.macDstPanId;
    1072:	f8 01       	movw	r30, r16
    1074:	85 81       	ldd	r24, Z+5	; 0x05
    1076:	96 81       	ldd	r25, Z+6	; 0x06
    1078:	9e 83       	std	Y+6, r25	; 0x06
    107a:	8d 83       	std	Y+5, r24	; 0x05
  newFrame->header.macSrcAddr = nwkIb.addr;
    107c:	ee e1       	ldi	r30, 0x1E	; 30
    107e:	f6 e0       	ldi	r31, 0x06	; 6
    1080:	80 81       	ld	r24, Z
    1082:	91 81       	ldd	r25, Z+1	; 0x01
    1084:	9a 87       	std	Y+10, r25	; 0x0a
    1086:	89 87       	std	Y+9, r24	; 0x09
  newFrame->header.macSeq = ++nwkIb.macSeqNum;
    1088:	85 81       	ldd	r24, Z+5	; 0x05
    108a:	8f 5f       	subi	r24, 0xFF	; 255
    108c:	85 83       	std	Z+5, r24	; 0x05
    108e:	8c 83       	std	Y+4, r24	; 0x04
}
    1090:	df 91       	pop	r29
    1092:	cf 91       	pop	r28
    1094:	1f 91       	pop	r17
    1096:	0f 91       	pop	r16
    1098:	08 95       	ret

0000109a <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    109e:	fc 01       	movw	r30, r24
    10a0:	c7 81       	ldd	r28, Z+7	; 0x07
    10a2:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    10a4:	81 85       	ldd	r24, Z+9	; 0x09
    10a6:	83 30       	cpi	r24, 0x03	; 3
    10a8:	c9 f4       	brne	.+50     	; 0x10dc <nwkTxAckReceived+0x42>
    10aa:	80 e0       	ldi	r24, 0x00	; 0
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	10 c0       	rjmp	.+32     	; 0x10d0 <nwkTxAckReceived+0x36>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
    10b0:	fc 01       	movw	r30, r24
    10b2:	20 81       	ld	r18, Z
    10b4:	26 31       	cpi	r18, 0x16	; 22
    10b6:	61 f4       	brne	.+24     	; 0x10d0 <nwkTxAckReceived+0x36>
    10b8:	34 85       	ldd	r19, Z+12	; 0x0c
    10ba:	29 81       	ldd	r18, Y+1	; 0x01
    10bc:	32 13       	cpse	r19, r18
    10be:	08 c0       	rjmp	.+16     	; 0x10d0 <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    10c0:	27 e1       	ldi	r18, 0x17	; 23
    10c2:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    10c4:	2a 81       	ldd	r18, Y+2	; 0x02
    10c6:	ea 57       	subi	r30, 0x7A	; 122
    10c8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ca:	20 83       	st	Z, r18
      return true;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	07 c0       	rjmp	.+14     	; 0x10de <nwkTxAckReceived+0x44>
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
    10d0:	0e 94 69 04 	call	0x8d2	; 0x8d2 <nwkFrameNext>
    10d4:	00 97       	sbiw	r24, 0x00	; 0
    10d6:	61 f7       	brne	.-40     	; 0x10b0 <nwkTxAckReceived+0x16>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	01 c0       	rjmp	.+2      	; 0x10de <nwkTxAckReceived+0x44>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
    10dc:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	08 95       	ret

000010e4 <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    10e4:	e0 91 95 05 	lds	r30, 0x0595
    10e8:	f0 91 96 05 	lds	r31, 0x0596

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    10ec:	81 30       	cpi	r24, 0x01	; 1
    10ee:	21 f0       	breq	.+8      	; 0x10f8 <PHY_DataConf+0x14>
    10f0:	48 f0       	brcs	.+18     	; 0x1104 <PHY_DataConf+0x20>
    10f2:	82 30       	cpi	r24, 0x02	; 2
    10f4:	19 f0       	breq	.+6      	; 0x10fc <PHY_DataConf+0x18>
    10f6:	04 c0       	rjmp	.+8      	; 0x1100 <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    10f8:	80 e2       	ldi	r24, 0x20	; 32
    10fa:	05 c0       	rjmp	.+10     	; 0x1106 <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    10fc:	81 e2       	ldi	r24, 0x21	; 33
    10fe:	03 c0       	rjmp	.+6      	; 0x1106 <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	01 c0       	rjmp	.+2      	; 0x1106 <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    1104:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1106:	df 01       	movw	r26, r30
    1108:	ad 57       	subi	r26, 0x7D	; 125
    110a:	bf 4f       	sbci	r27, 0xFF	; 255
    110c:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    110e:	85 e1       	ldi	r24, 0x15	; 21
    1110:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    1112:	10 92 96 05 	sts	0x0596, r1
    1116:	10 92 95 05 	sts	0x0595, r1
  nwkIb.lock--;
    111a:	ee e1       	ldi	r30, 0x1E	; 30
    111c:	f6 e0       	ldi	r31, 0x06	; 6
    111e:	86 a1       	ldd	r24, Z+38	; 0x26
    1120:	97 a1       	ldd	r25, Z+39	; 0x27
    1122:	01 97       	sbiw	r24, 0x01	; 1
    1124:	97 a3       	std	Z+39, r25	; 0x27
    1126:	86 a3       	std	Z+38, r24	; 0x26
    1128:	08 95       	ret

0000112a <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    112a:	9f 92       	push	r9
    112c:	af 92       	push	r10
    112e:	bf 92       	push	r11
    1130:	cf 92       	push	r12
    1132:	df 92       	push	r13
    1134:	ef 92       	push	r14
    1136:	ff 92       	push	r15
    1138:	0f 93       	push	r16
    113a:	1f 93       	push	r17
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    1140:	c0 e0       	ldi	r28, 0x00	; 0
    1142:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    1144:	0f 2e       	mov	r0, r31
    1146:	f4 e1       	ldi	r31, 0x14	; 20
    1148:	af 2e       	mov	r10, r31
    114a:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    114c:	0e e1       	ldi	r16, 0x1E	; 30
    114e:	16 e0       	ldi	r17, 0x06	; 6
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    1150:	0f 2e       	mov	r0, r31
    1152:	f7 e1       	ldi	r31, 0x17	; 23
    1154:	df 2e       	mov	r13, r31
    1156:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1158:	0f 2e       	mov	r0, r31
    115a:	f6 e1       	ldi	r31, 0x16	; 22
    115c:	9f 2e       	mov	r9, r31
    115e:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1160:	0f 2e       	mov	r0, r31
    1162:	f5 e1       	ldi	r31, 0x15	; 21
    1164:	ef 2e       	mov	r14, r31
    1166:	f1 2c       	mov	r15, r1
    1168:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    116a:	0f 2e       	mov	r0, r31
    116c:	f3 e1       	ldi	r31, 0x13	; 19
    116e:	cf 2e       	mov	r12, r31
    1170:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    1172:	0f 2e       	mov	r0, r31
    1174:	f1 e1       	ldi	r31, 0x11	; 17
    1176:	bf 2e       	mov	r11, r31
    1178:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    117a:	62 c0       	rjmp	.+196    	; 0x1240 <nwkTxTaskHandler+0x116>
  {
    switch (frame->state)
    117c:	88 81       	ld	r24, Y
    117e:	83 31       	cpi	r24, 0x13	; 19
    1180:	c9 f0       	breq	.+50     	; 0x11b4 <nwkTxTaskHandler+0x8a>
    1182:	18 f4       	brcc	.+6      	; 0x118a <nwkTxTaskHandler+0x60>
    1184:	82 31       	cpi	r24, 0x12	; 18
    1186:	39 f0       	breq	.+14     	; 0x1196 <nwkTxTaskHandler+0x6c>
    1188:	5b c0       	rjmp	.+182    	; 0x1240 <nwkTxTaskHandler+0x116>
    118a:	85 31       	cpi	r24, 0x15	; 21
    118c:	59 f1       	breq	.+86     	; 0x11e4 <nwkTxTaskHandler+0xba>
    118e:	87 31       	cpi	r24, 0x17	; 23
    1190:	09 f4       	brne	.+2      	; 0x1194 <nwkTxTaskHandler+0x6a>
    1192:	48 c0       	rjmp	.+144    	; 0x1224 <nwkTxTaskHandler+0xfa>
    1194:	55 c0       	rjmp	.+170    	; 0x1240 <nwkTxTaskHandler+0x116>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    1196:	fe 01       	movw	r30, r28
    1198:	ec 57       	subi	r30, 0x7C	; 124
    119a:	ff 4f       	sbci	r31, 0xFF	; 255
    119c:	80 81       	ld	r24, Z
    119e:	91 81       	ldd	r25, Z+1	; 0x01
    11a0:	89 2b       	or	r24, r25
    11a2:	31 f0       	breq	.+12     	; 0x11b0 <nwkTxTaskHandler+0x86>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    11a4:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    11a6:	8b e7       	ldi	r24, 0x7B	; 123
    11a8:	95 e0       	ldi	r25, 0x05	; 5
    11aa:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <SYS_TimerStart>
    11ae:	48 c0       	rjmp	.+144    	; 0x1240 <nwkTxTaskHandler+0x116>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    11b0:	c8 82       	st	Y, r12
    11b2:	46 c0       	rjmp	.+140    	; 0x1240 <nwkTxTaskHandler+0x116>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    11b4:	80 91 95 05 	lds	r24, 0x0595
    11b8:	90 91 96 05 	lds	r25, 0x0596
    11bc:	89 2b       	or	r24, r25
    11be:	09 f0       	breq	.+2      	; 0x11c2 <nwkTxTaskHandler+0x98>
    11c0:	3f c0       	rjmp	.+126    	; 0x1240 <nwkTxTaskHandler+0x116>
        {
          nwkTxPhyActiveFrame = frame;
    11c2:	d0 93 96 05 	sts	0x0596, r29
    11c6:	c0 93 95 05 	sts	0x0595, r28
          frame->state = NWK_TX_STATE_WAIT_CONF;
    11ca:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    11cc:	69 81       	ldd	r22, Y+1	; 0x01
    11ce:	ce 01       	movw	r24, r28
    11d0:	02 96       	adiw	r24, 0x02	; 2
    11d2:	0e 94 ba 09 	call	0x1374	; 0x1374 <PHY_DataReq>
          nwkIb.lock++;
    11d6:	f8 01       	movw	r30, r16
    11d8:	86 a1       	ldd	r24, Z+38	; 0x26
    11da:	97 a1       	ldd	r25, Z+39	; 0x27
    11dc:	01 96       	adiw	r24, 0x01	; 1
    11de:	97 a3       	std	Z+39, r25	; 0x27
    11e0:	86 a3       	std	Z+38, r24	; 0x26
    11e2:	2e c0       	rjmp	.+92     	; 0x1240 <nwkTxTaskHandler+0x116>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    11e4:	fe 01       	movw	r30, r28
    11e6:	ed 57       	subi	r30, 0x7D	; 125
    11e8:	ff 4f       	sbci	r31, 0xFF	; 255
    11ea:	80 81       	ld	r24, Z
    11ec:	81 11       	cpse	r24, r1
    11ee:	18 c0       	rjmp	.+48     	; 0x1220 <nwkTxTaskHandler+0xf6>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    11f0:	2d 85       	ldd	r18, Y+13	; 0x0d
    11f2:	3e 85       	ldd	r19, Y+14	; 0x0e
    11f4:	f8 01       	movw	r30, r16
    11f6:	80 81       	ld	r24, Z
    11f8:	91 81       	ldd	r25, Z+1	; 0x01
    11fa:	28 17       	cp	r18, r24
    11fc:	39 07       	cpc	r19, r25
    11fe:	71 f4       	brne	.+28     	; 0x121c <nwkTxTaskHandler+0xf2>
    1200:	8b 85       	ldd	r24, Y+11	; 0x0b
    1202:	80 ff       	sbrs	r24, 0
    1204:	0b c0       	rjmp	.+22     	; 0x121c <nwkTxTaskHandler+0xf2>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1206:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1208:	fe 01       	movw	r30, r28
    120a:	ec 57       	subi	r30, 0x7C	; 124
    120c:	ff 4f       	sbci	r31, 0xFF	; 255
    120e:	f1 82       	std	Z+1, r15	; 0x01
    1210:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    1212:	88 e8       	ldi	r24, 0x88	; 136
    1214:	95 e0       	ldi	r25, 0x05	; 5
    1216:	0e 94 f6 0a 	call	0x15ec	; 0x15ec <SYS_TimerStart>
    121a:	12 c0       	rjmp	.+36     	; 0x1240 <nwkTxTaskHandler+0x116>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    121c:	d8 82       	st	Y, r13
    121e:	10 c0       	rjmp	.+32     	; 0x1240 <nwkTxTaskHandler+0x116>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    1220:	d8 82       	st	Y, r13
    1222:	0e c0       	rjmp	.+28     	; 0x1240 <nwkTxTaskHandler+0x116>
      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
#endif
        if (NULL == frame->tx.confirm)
    1224:	fe 01       	movw	r30, r28
    1226:	e9 57       	subi	r30, 0x79	; 121
    1228:	ff 4f       	sbci	r31, 0xFF	; 255
    122a:	01 90       	ld	r0, Z+
    122c:	f0 81       	ld	r31, Z
    122e:	e0 2d       	mov	r30, r0
    1230:	30 97       	sbiw	r30, 0x00	; 0
    1232:	21 f4       	brne	.+8      	; 0x123c <nwkTxTaskHandler+0x112>
          nwkFrameFree(frame);
    1234:	ce 01       	movw	r24, r28
    1236:	0e 94 5f 04 	call	0x8be	; 0x8be <nwkFrameFree>
    123a:	02 c0       	rjmp	.+4      	; 0x1240 <nwkTxTaskHandler+0x116>
        else
          frame->tx.confirm(frame);
    123c:	ce 01       	movw	r24, r28
    123e:	09 95       	icall
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    1240:	ce 01       	movw	r24, r28
    1242:	0e 94 69 04 	call	0x8d2	; 0x8d2 <nwkFrameNext>
    1246:	ec 01       	movw	r28, r24
    1248:	89 2b       	or	r24, r25
    124a:	09 f0       	breq	.+2      	; 0x124e <nwkTxTaskHandler+0x124>
    124c:	97 cf       	rjmp	.-210    	; 0x117c <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    124e:	df 91       	pop	r29
    1250:	cf 91       	pop	r28
    1252:	1f 91       	pop	r17
    1254:	0f 91       	pop	r16
    1256:	ff 90       	pop	r15
    1258:	ef 90       	pop	r14
    125a:	df 90       	pop	r13
    125c:	cf 90       	pop	r12
    125e:	bf 90       	pop	r11
    1260:	af 90       	pop	r10
    1262:	9f 90       	pop	r9
    1264:	08 95       	ret

00001266 <phySetChannel>:

/*************************************************************************//**
*****************************************************************************/
static void phySetChannel(void)
{
  CC_CTRL_1_REG_s.ccBand = phyBand;
    1266:	80 91 97 05 	lds	r24, 0x0597
    126a:	98 2f       	mov	r25, r24
    126c:	9f 70       	andi	r25, 0x0F	; 15
    126e:	e4 e5       	ldi	r30, 0x54	; 84
    1270:	f1 e0       	ldi	r31, 0x01	; 1
    1272:	80 81       	ld	r24, Z
    1274:	80 7f       	andi	r24, 0xF0	; 240
    1276:	89 2b       	or	r24, r25
    1278:	80 83       	st	Z, r24

  if (phyBand)
    127a:	80 91 97 05 	lds	r24, 0x0597
    127e:	88 23       	and	r24, r24
    1280:	29 f0       	breq	.+10     	; 0x128c <phySetChannel+0x26>
    CC_CTRL_0_REG = phyChannel;
    1282:	80 91 98 05 	lds	r24, 0x0598
    1286:	80 93 53 01 	sts	0x0153, r24
    128a:	08 95       	ret
  else
    PHY_CC_CCA_REG_s.channel = phyChannel;
    128c:	80 91 98 05 	lds	r24, 0x0598
    1290:	98 2f       	mov	r25, r24
    1292:	9f 71       	andi	r25, 0x1F	; 31
    1294:	e8 e4       	ldi	r30, 0x48	; 72
    1296:	f1 e0       	ldi	r31, 0x01	; 1
    1298:	80 81       	ld	r24, Z
    129a:	80 7e       	andi	r24, 0xE0	; 224
    129c:	89 2b       	or	r24, r25
    129e:	80 83       	st	Z, r24
    12a0:	08 95       	ret

000012a2 <phyTrxSetState>:

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
  TRX_STATE_REG = TRX_CMD_FORCE_TRX_OFF;
    12a2:	93 e0       	ldi	r25, 0x03	; 3
    12a4:	90 93 42 01 	sts	0x0142, r25
  while (TRX_STATUS_TRX_OFF != TRX_STATUS_REG_s.trxStatus);
    12a8:	e1 e4       	ldi	r30, 0x41	; 65
    12aa:	f1 e0       	ldi	r31, 0x01	; 1
    12ac:	90 81       	ld	r25, Z
    12ae:	9f 71       	andi	r25, 0x1F	; 31
    12b0:	98 30       	cpi	r25, 0x08	; 8
    12b2:	e1 f7       	brne	.-8      	; 0x12ac <phyTrxSetState+0xa>

  TRX_STATE_REG = state;
    12b4:	80 93 42 01 	sts	0x0142, r24
  while (state != TRX_STATUS_REG_s.trxStatus);
    12b8:	e1 e4       	ldi	r30, 0x41	; 65
    12ba:	f1 e0       	ldi	r31, 0x01	; 1
    12bc:	90 81       	ld	r25, Z
    12be:	9f 71       	andi	r25, 0x1F	; 31
    12c0:	98 13       	cpse	r25, r24
    12c2:	fc cf       	rjmp	.-8      	; 0x12bc <phyTrxSetState+0x1a>
}
    12c4:	08 95       	ret

000012c6 <phySetRxState>:

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
  phyTrxSetState(TRX_CMD_TRX_OFF);
    12c6:	88 e0       	ldi	r24, 0x08	; 8
    12c8:	0e 94 51 09 	call	0x12a2	; 0x12a2 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    12cc:	8f ef       	ldi	r24, 0xFF	; 255
    12ce:	80 93 4f 01 	sts	0x014F, r24

  if (phyRxState)
    12d2:	80 91 99 05 	lds	r24, 0x0599
    12d6:	88 23       	and	r24, r24
    12d8:	19 f0       	breq	.+6      	; 0x12e0 <phySetRxState+0x1a>
    phyTrxSetState(TRX_CMD_RX_AACK_ON);
    12da:	86 e1       	ldi	r24, 0x16	; 22
    12dc:	0e 94 51 09 	call	0x12a2	; 0x12a2 <phyTrxSetState>
    12e0:	08 95       	ret

000012e2 <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
    12e2:	e9 e3       	ldi	r30, 0x39	; 57
    12e4:	f1 e0       	ldi	r31, 0x01	; 1
    12e6:	80 81       	ld	r24, Z
    12e8:	81 60       	ori	r24, 0x01	; 1
    12ea:	80 83       	st	Z, r24

  phyRxState = false;
    12ec:	10 92 99 05 	sts	0x0599, r1
  phyBand = 0;
    12f0:	10 92 97 05 	sts	0x0597, r1
  phyState = PHY_STATE_IDLE;
    12f4:	81 e0       	ldi	r24, 0x01	; 1
    12f6:	80 93 1a 06 	sts	0x061A, r24

  phyTrxSetState(TRX_CMD_TRX_OFF);
    12fa:	88 e0       	ldi	r24, 0x08	; 8
    12fc:	0e 94 51 09 	call	0x12a2	; 0x12a2 <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
    1300:	8b ee       	ldi	r24, 0xEB	; 235
    1302:	80 93 56 01 	sts	0x0156, r24

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
    1306:	ec e4       	ldi	r30, 0x4C	; 76
    1308:	f1 e0       	ldi	r31, 0x01	; 1
    130a:	80 81       	ld	r24, Z
    130c:	80 68       	ori	r24, 0x80	; 128
    130e:	80 83       	st	Z, r24
    1310:	08 95       	ret

00001312 <PHY_SetRxState>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
  phyRxState = rx;
    1312:	80 93 99 05 	sts	0x0599, r24
  phySetRxState();
    1316:	0e 94 63 09 	call	0x12c6	; 0x12c6 <phySetRxState>
    131a:	08 95       	ret

0000131c <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
  phyChannel = channel;
    131c:	80 93 98 05 	sts	0x0598, r24
  phySetChannel();
    1320:	0e 94 33 09 	call	0x1266	; 0x1266 <phySetChannel>
    1324:	08 95       	ret

00001326 <PHY_SetPanId>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	00 d0       	rcall	.+0      	; 0x132c <PHY_SetPanId+0x6>
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
    1330:	9a 83       	std	Y+2, r25	; 0x02
    1332:	89 83       	std	Y+1, r24	; 0x01
  uint8_t *d = (uint8_t *)&panId;

  PAN_ID_0_REG = d[0];
    1334:	80 93 62 01 	sts	0x0162, r24
  PAN_ID_1_REG = d[1];
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	80 93 63 01 	sts	0x0163, r24
}
    133e:	0f 90       	pop	r0
    1340:	0f 90       	pop	r0
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	08 95       	ret

00001348 <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
    1348:	cf 93       	push	r28
    134a:	df 93       	push	r29
    134c:	00 d0       	rcall	.+0      	; 0x134e <PHY_SetShortAddr+0x6>
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    1352:	9a 83       	std	Y+2, r25	; 0x02
    1354:	89 83       	std	Y+1, r24	; 0x01
  uint8_t *d = (uint8_t *)&addr;

  SHORT_ADDR_0_REG = d[0];
    1356:	80 93 60 01 	sts	0x0160, r24
  SHORT_ADDR_1_REG = d[1];
    135a:	8a 81       	ldd	r24, Y+2	; 0x02
    135c:	80 93 61 01 	sts	0x0161, r24

#ifndef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
  CSMA_SEED_0_REG = d[0] + d[1];
    1360:	9a 81       	ldd	r25, Y+2	; 0x02
    1362:	89 81       	ldd	r24, Y+1	; 0x01
    1364:	89 0f       	add	r24, r25
    1366:	80 93 6d 01 	sts	0x016D, r24
#endif
}
    136a:	0f 90       	pop	r0
    136c:	0f 90       	pop	r0
    136e:	df 91       	pop	r29
    1370:	cf 91       	pop	r28
    1372:	08 95       	ret

00001374 <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	cf 93       	push	r28
    137a:	8c 01       	movw	r16, r24
    137c:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    137e:	89 e1       	ldi	r24, 0x19	; 25
    1380:	0e 94 51 09 	call	0x12a2	; 0x12a2 <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    1384:	8f ef       	ldi	r24, 0xFF	; 255
    1386:	80 93 4f 01 	sts	0x014F, r24

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    138a:	82 e0       	ldi	r24, 0x02	; 2
    138c:	8c 0f       	add	r24, r28
    138e:	80 93 80 01 	sts	0x0180, r24
  for (uint8_t i = 0; i < size; i++)
    1392:	cc 23       	and	r28, r28
    1394:	81 f0       	breq	.+32     	; 0x13b6 <PHY_DataReq+0x42>
    1396:	f8 01       	movw	r30, r16
    1398:	c1 50       	subi	r28, 0x01	; 1
    139a:	2c 2f       	mov	r18, r28
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	2f 5f       	subi	r18, 0xFF	; 255
    13a0:	3f 4f       	sbci	r19, 0xFF	; 255
    13a2:	c8 01       	movw	r24, r16
    13a4:	82 0f       	add	r24, r18
    13a6:	93 1f       	adc	r25, r19
    13a8:	a1 e8       	ldi	r26, 0x81	; 129
    13aa:	b1 e0       	ldi	r27, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    13ac:	21 91       	ld	r18, Z+
    13ae:	2d 93       	st	X+, r18
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    13b0:	e8 17       	cp	r30, r24
    13b2:	f9 07       	cpc	r31, r25
    13b4:	d9 f7       	brne	.-10     	; 0x13ac <PHY_DataReq+0x38>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    13b6:	83 e0       	ldi	r24, 0x03	; 3
    13b8:	80 93 1a 06 	sts	0x061A, r24
  TRX_STATE_REG = TRX_CMD_TX_START;
    13bc:	82 e0       	ldi	r24, 0x02	; 2
    13be:	80 93 42 01 	sts	0x0142, r24
}
    13c2:	cf 91       	pop	r28
    13c4:	1f 91       	pop	r17
    13c6:	0f 91       	pop	r16
    13c8:	08 95       	ret

000013ca <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    13ca:	1f 93       	push	r17
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	00 d0       	rcall	.+0      	; 0x13d2 <PHY_TaskHandler+0x8>
    13d2:	00 d0       	rcall	.+0      	; 0x13d4 <PHY_TaskHandler+0xa>
    13d4:	1f 92       	push	r1
    13d6:	cd b7       	in	r28, 0x3d	; 61
    13d8:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    13da:	80 91 1a 06 	lds	r24, 0x061A
    13de:	82 30       	cpi	r24, 0x02	; 2
    13e0:	09 f4       	brne	.+2      	; 0x13e4 <PHY_TaskHandler+0x1a>
    13e2:	68 c0       	rjmp	.+208    	; 0x14b4 <PHY_TaskHandler+0xea>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    13e4:	80 91 4f 01 	lds	r24, 0x014F
    13e8:	83 ff       	sbrs	r24, 3
    13ea:	3f c0       	rjmp	.+126    	; 0x146a <PHY_TaskHandler+0xa0>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    13ec:	a0 91 7b 01 	lds	r26, 0x017B

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    13f0:	6a 2f       	mov	r22, r26
    13f2:	70 e0       	ldi	r23, 0x00	; 0
    13f4:	ab 01       	movw	r20, r22
    13f6:	4f 5f       	subi	r20, 0xFF	; 255
    13f8:	5f 4f       	sbci	r21, 0xFF	; 255
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    1400:	fc 01       	movw	r30, r24
    1402:	e0 58       	subi	r30, 0x80	; 128
    1404:	fe 4f       	sbci	r31, 0xFE	; 254
    1406:	30 81       	ld	r19, Z
    1408:	fc 01       	movw	r30, r24
    140a:	e6 56       	subi	r30, 0x66	; 102
    140c:	fa 4f       	sbci	r31, 0xFA	; 250
    140e:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    1410:	2f 5f       	subi	r18, 0xFF	; 255
    1412:	82 2f       	mov	r24, r18
    1414:	90 e0       	ldi	r25, 0x00	; 0
    1416:	84 17       	cp	r24, r20
    1418:	95 07       	cpc	r25, r21
    141a:	94 f3       	brlt	.-28     	; 0x1400 <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    141c:	8a e9       	ldi	r24, 0x9A	; 154
    141e:	95 e0       	ldi	r25, 0x05	; 5
    1420:	9a 83       	std	Y+2, r25	; 0x02
    1422:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    1424:	a2 50       	subi	r26, 0x02	; 2
    1426:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    1428:	fb 01       	movw	r30, r22
    142a:	e6 56       	subi	r30, 0x66	; 102
    142c:	fa 4f       	sbci	r31, 0xFA	; 250
    142e:	80 81       	ld	r24, Z
    1430:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    1432:	80 91 47 01 	lds	r24, 0x0147
    1436:	8a 55       	subi	r24, 0x5A	; 90
    1438:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    143a:	ce 01       	movw	r24, r28
    143c:	01 96       	adiw	r24, 0x01	; 1
    143e:	0e 94 e8 04 	call	0x9d0	; 0x9d0 <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    1442:	e1 e4       	ldi	r30, 0x41	; 65
    1444:	f1 e0       	ldi	r31, 0x01	; 1
    1446:	80 81       	ld	r24, Z
    1448:	8f 71       	andi	r24, 0x1F	; 31
    144a:	86 31       	cpi	r24, 0x16	; 22
    144c:	e1 f7       	brne	.-8      	; 0x1446 <PHY_TaskHandler+0x7c>

    IRQ_STATUS_REG_s.rxEnd = 1;
    144e:	ef e4       	ldi	r30, 0x4F	; 79
    1450:	f1 e0       	ldi	r31, 0x01	; 1
    1452:	80 81       	ld	r24, Z
    1454:	88 60       	ori	r24, 0x08	; 8
    1456:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    1458:	ec e4       	ldi	r30, 0x4C	; 76
    145a:	f1 e0       	ldi	r31, 0x01	; 1
    145c:	80 81       	ld	r24, Z
    145e:	8f 77       	andi	r24, 0x7F	; 127
    1460:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    1462:	80 81       	ld	r24, Z
    1464:	80 68       	ori	r24, 0x80	; 128
    1466:	80 83       	st	Z, r24
    1468:	25 c0       	rjmp	.+74     	; 0x14b4 <PHY_TaskHandler+0xea>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    146a:	80 91 4f 01 	lds	r24, 0x014F
    146e:	86 ff       	sbrs	r24, 6
    1470:	21 c0       	rjmp	.+66     	; 0x14b4 <PHY_TaskHandler+0xea>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    1472:	80 91 41 01 	lds	r24, 0x0141
    1476:	8f 71       	andi	r24, 0x1F	; 31
    1478:	89 31       	cpi	r24, 0x19	; 25
    147a:	b9 f4       	brne	.+46     	; 0x14aa <PHY_TaskHandler+0xe0>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    147c:	10 91 42 01 	lds	r17, 0x0142
    1480:	12 95       	swap	r17
    1482:	16 95       	lsr	r17
    1484:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    1486:	49 f0       	breq	.+18     	; 0x149a <PHY_TaskHandler+0xd0>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    1488:	13 30       	cpi	r17, 0x03	; 3
    148a:	21 f0       	breq	.+8      	; 0x1494 <PHY_TaskHandler+0xca>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    148c:	15 30       	cpi	r17, 0x05	; 5
    148e:	21 f0       	breq	.+8      	; 0x1498 <PHY_TaskHandler+0xce>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    1490:	13 e0       	ldi	r17, 0x03	; 3
    1492:	03 c0       	rjmp	.+6      	; 0x149a <PHY_TaskHandler+0xd0>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    1494:	11 e0       	ldi	r17, 0x01	; 1
    1496:	01 c0       	rjmp	.+2      	; 0x149a <PHY_TaskHandler+0xd0>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
    1498:	12 e0       	ldi	r17, 0x02	; 2
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    149a:	0e 94 63 09 	call	0x12c6	; 0x12c6 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	80 93 1a 06 	sts	0x061A, r24

      PHY_DataConf(status);
    14a4:	81 2f       	mov	r24, r17
    14a6:	0e 94 72 08 	call	0x10e4	; 0x10e4 <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    14aa:	ef e4       	ldi	r30, 0x4F	; 79
    14ac:	f1 e0       	ldi	r31, 0x01	; 1
    14ae:	80 81       	ld	r24, Z
    14b0:	80 64       	ori	r24, 0x40	; 64
    14b2:	80 83       	st	Z, r24
  }
}
    14b4:	0f 90       	pop	r0
    14b6:	0f 90       	pop	r0
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	df 91       	pop	r29
    14c0:	cf 91       	pop	r28
    14c2:	1f 91       	pop	r17
    14c4:	08 95       	ret

000014c6 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    14c6:	0e 94 3e 02 	call	0x47c	; 0x47c <HAL_Init>
  SYS_TimerInit();
    14ca:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <SYS_TimerInit>
  PHY_Init();
    14ce:	0e 94 71 09 	call	0x12e2	; 0x12e2 <PHY_Init>
  NWK_Init();
    14d2:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <NWK_Init>
    14d6:	08 95       	ret

000014d8 <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
    14d8:	0e 94 e5 09 	call	0x13ca	; 0x13ca <PHY_TaskHandler>
  NWK_TaskHandler();
    14dc:	0e 94 24 03 	call	0x648	; 0x648 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    14e0:	0e 94 03 0b 	call	0x1606	; 0x1606 <SYS_TimerTaskHandler>
    14e4:	08 95       	ret

000014e6 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    14e6:	0f 93       	push	r16
    14e8:	1f 93       	push	r17
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
    14ee:	ec 01       	movw	r28, r24
  if (timers)
    14f0:	80 91 1b 06 	lds	r24, 0x061B
    14f4:	90 91 1c 06 	lds	r25, 0x061C
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	09 f4       	brne	.+2      	; 0x14fe <placeTimer+0x18>
    14fc:	45 c0       	rjmp	.+138    	; 0x1588 <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    14fe:	4e 81       	ldd	r20, Y+6	; 0x06
    1500:	5f 81       	ldd	r21, Y+7	; 0x07
    1502:	68 85       	ldd	r22, Y+8	; 0x08
    1504:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    1506:	fc 01       	movw	r30, r24
    1508:	02 81       	ldd	r16, Z+2	; 0x02
    150a:	13 81       	ldd	r17, Z+3	; 0x03
    150c:	24 81       	ldd	r18, Z+4	; 0x04
    150e:	35 81       	ldd	r19, Z+5	; 0x05
    1510:	40 17       	cp	r20, r16
    1512:	51 07       	cpc	r21, r17
    1514:	62 07       	cpc	r22, r18
    1516:	73 07       	cpc	r23, r19
    1518:	60 f0       	brcs	.+24     	; 0x1532 <placeTimer+0x4c>
    151a:	dc 01       	movw	r26, r24
    151c:	17 c0       	rjmp	.+46     	; 0x154c <placeTimer+0x66>
    151e:	02 81       	ldd	r16, Z+2	; 0x02
    1520:	13 81       	ldd	r17, Z+3	; 0x03
    1522:	24 81       	ldd	r18, Z+4	; 0x04
    1524:	35 81       	ldd	r19, Z+5	; 0x05
    1526:	40 17       	cp	r20, r16
    1528:	51 07       	cpc	r21, r17
    152a:	62 07       	cpc	r22, r18
    152c:	73 07       	cpc	r23, r19
    152e:	68 f4       	brcc	.+26     	; 0x154a <placeTimer+0x64>
    1530:	03 c0       	rjmp	.+6      	; 0x1538 <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1532:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    1534:	a0 e0       	ldi	r26, 0x00	; 0
    1536:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    1538:	04 1b       	sub	r16, r20
    153a:	15 0b       	sbc	r17, r21
    153c:	26 0b       	sbc	r18, r22
    153e:	37 0b       	sbc	r19, r23
    1540:	02 83       	std	Z+2, r16	; 0x02
    1542:	13 83       	std	Z+3, r17	; 0x03
    1544:	24 83       	std	Z+4, r18	; 0x04
    1546:	35 83       	std	Z+5, r19	; 0x05
         break;
    1548:	0a c0       	rjmp	.+20     	; 0x155e <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    154a:	df 01       	movw	r26, r30
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    154c:	40 1b       	sub	r20, r16
    154e:	51 0b       	sbc	r21, r17
    1550:	62 0b       	sbc	r22, r18
    1552:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1554:	ed 91       	ld	r30, X+
    1556:	fc 91       	ld	r31, X
    1558:	11 97       	sbiw	r26, 0x01	; 1
    155a:	30 97       	sbiw	r30, 0x00	; 0
    155c:	01 f7       	brne	.-64     	; 0x151e <placeTimer+0x38>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    155e:	4a 83       	std	Y+2, r20	; 0x02
    1560:	5b 83       	std	Y+3, r21	; 0x03
    1562:	6c 83       	std	Y+4, r22	; 0x04
    1564:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    1566:	10 97       	sbiw	r26, 0x00	; 0
    1568:	41 f0       	breq	.+16     	; 0x157a <placeTimer+0x94>
    {
      timer->next = prev->next;
    156a:	8d 91       	ld	r24, X+
    156c:	9c 91       	ld	r25, X
    156e:	11 97       	sbiw	r26, 0x01	; 1
    1570:	99 83       	std	Y+1, r25	; 0x01
    1572:	88 83       	st	Y, r24
      prev->next = timer;
    1574:	cd 93       	st	X+, r28
    1576:	dc 93       	st	X, r29
    1578:	15 c0       	rjmp	.+42     	; 0x15a4 <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    157a:	99 83       	std	Y+1, r25	; 0x01
    157c:	88 83       	st	Y, r24
      timers = timer;
    157e:	d0 93 1c 06 	sts	0x061C, r29
    1582:	c0 93 1b 06 	sts	0x061B, r28
    1586:	0e c0       	rjmp	.+28     	; 0x15a4 <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    1588:	19 82       	std	Y+1, r1	; 0x01
    158a:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    158c:	8e 81       	ldd	r24, Y+6	; 0x06
    158e:	9f 81       	ldd	r25, Y+7	; 0x07
    1590:	a8 85       	ldd	r26, Y+8	; 0x08
    1592:	b9 85       	ldd	r27, Y+9	; 0x09
    1594:	8a 83       	std	Y+2, r24	; 0x02
    1596:	9b 83       	std	Y+3, r25	; 0x03
    1598:	ac 83       	std	Y+4, r26	; 0x04
    159a:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    159c:	d0 93 1c 06 	sts	0x061C, r29
    15a0:	c0 93 1b 06 	sts	0x061B, r28
  }
}
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	1f 91       	pop	r17
    15aa:	0f 91       	pop	r16
    15ac:	08 95       	ret

000015ae <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    15ae:	10 92 1c 06 	sts	0x061C, r1
    15b2:	10 92 1b 06 	sts	0x061B, r1
    15b6:	08 95       	ret

000015b8 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    15b8:	e0 91 1b 06 	lds	r30, 0x061B
    15bc:	f0 91 1c 06 	lds	r31, 0x061C
    15c0:	30 97       	sbiw	r30, 0x00	; 0
    15c2:	71 f0       	breq	.+28     	; 0x15e0 <SYS_TimerStarted+0x28>
    if (t == timer)
    15c4:	e8 17       	cp	r30, r24
    15c6:	f9 07       	cpc	r31, r25
    15c8:	21 f4       	brne	.+8      	; 0x15d2 <SYS_TimerStarted+0x1a>
    15ca:	0c c0       	rjmp	.+24     	; 0x15e4 <SYS_TimerStarted+0x2c>
    15cc:	8e 17       	cp	r24, r30
    15ce:	9f 07       	cpc	r25, r31
    15d0:	59 f0       	breq	.+22     	; 0x15e8 <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    15d2:	01 90       	ld	r0, Z+
    15d4:	f0 81       	ld	r31, Z
    15d6:	e0 2d       	mov	r30, r0
    15d8:	30 97       	sbiw	r30, 0x00	; 0
    15da:	c1 f7       	brne	.-16     	; 0x15cc <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    15dc:	80 e0       	ldi	r24, 0x00	; 0
    15de:	08 95       	ret
    15e0:	80 e0       	ldi	r24, 0x00	; 0
    15e2:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    15e4:	81 e0       	ldi	r24, 0x01	; 1
    15e6:	08 95       	ret
    15e8:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    15ea:	08 95       	ret

000015ec <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    15ec:	cf 93       	push	r28
    15ee:	df 93       	push	r29
    15f0:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    15f2:	0e 94 dc 0a 	call	0x15b8	; 0x15b8 <SYS_TimerStarted>
    15f6:	81 11       	cpse	r24, r1
    15f8:	03 c0       	rjmp	.+6      	; 0x1600 <SYS_TimerStart+0x14>
    placeTimer(timer);
    15fa:	ce 01       	movw	r24, r28
    15fc:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <placeTimer>
}
    1600:	df 91       	pop	r29
    1602:	cf 91       	pop	r28
    1604:	08 95       	ret

00001606 <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    1606:	cf 92       	push	r12
    1608:	df 92       	push	r13
    160a:	ef 92       	push	r14
    160c:	ff 92       	push	r15
    160e:	cf 93       	push	r28
    1610:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    1612:	80 91 1d 06 	lds	r24, 0x061D
    1616:	88 23       	and	r24, r24
    1618:	09 f4       	brne	.+2      	; 0x161c <SYS_TimerTaskHandler+0x16>
    161a:	5a c0       	rjmp	.+180    	; 0x16d0 <SYS_TimerTaskHandler+0xca>
    return;

  ATOMIC_SECTION_ENTER
    161c:	8f b7       	in	r24, 0x3f	; 63
    161e:	f8 94       	cli
    cnt = halTimerIrqCount;
    1620:	c0 90 1d 06 	lds	r12, 0x061D
    halTimerIrqCount = 0;
    1624:	10 92 1d 06 	sts	0x061D, r1
  ATOMIC_SECTION_LEAVE
    1628:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    162a:	d1 2c       	mov	r13, r1
    162c:	e1 2c       	mov	r14, r1
    162e:	f1 2c       	mov	r15, r1
    1630:	cc 0c       	add	r12, r12
    1632:	dd 1c       	adc	r13, r13
    1634:	ee 1c       	adc	r14, r14
    1636:	ff 1c       	adc	r15, r15
    1638:	d7 01       	movw	r26, r14
    163a:	c6 01       	movw	r24, r12
    163c:	88 0f       	add	r24, r24
    163e:	99 1f       	adc	r25, r25
    1640:	aa 1f       	adc	r26, r26
    1642:	bb 1f       	adc	r27, r27
    1644:	88 0f       	add	r24, r24
    1646:	99 1f       	adc	r25, r25
    1648:	aa 1f       	adc	r26, r26
    164a:	bb 1f       	adc	r27, r27
    164c:	c8 0e       	add	r12, r24
    164e:	d9 1e       	adc	r13, r25
    1650:	ea 1e       	adc	r14, r26
    1652:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    1654:	c0 91 1b 06 	lds	r28, 0x061B
    1658:	d0 91 1c 06 	lds	r29, 0x061C
    165c:	20 97       	sbiw	r28, 0x00	; 0
    165e:	c1 f1       	breq	.+112    	; 0x16d0 <SYS_TimerTaskHandler+0xca>
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	9b 81       	ldd	r25, Y+3	; 0x03
    1664:	ac 81       	ldd	r26, Y+4	; 0x04
    1666:	bd 81       	ldd	r27, Y+5	; 0x05
    1668:	c8 16       	cp	r12, r24
    166a:	d9 06       	cpc	r13, r25
    166c:	ea 06       	cpc	r14, r26
    166e:	fb 06       	cpc	r15, r27
    1670:	18 f1       	brcs	.+70     	; 0x16b8 <SYS_TimerTaskHandler+0xb2>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    1672:	c8 1a       	sub	r12, r24
    1674:	d9 0a       	sbc	r13, r25
    1676:	ea 0a       	sbc	r14, r26
    1678:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    167a:	88 81       	ld	r24, Y
    167c:	99 81       	ldd	r25, Y+1	; 0x01
    167e:	90 93 1c 06 	sts	0x061C, r25
    1682:	80 93 1b 06 	sts	0x061B, r24
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    1686:	8a 85       	ldd	r24, Y+10	; 0x0a
    1688:	81 30       	cpi	r24, 0x01	; 1
    168a:	19 f4       	brne	.+6      	; 0x1692 <SYS_TimerTaskHandler+0x8c>
      placeTimer(timer);
    168c:	ce 01       	movw	r24, r28
    168e:	0e 94 73 0a 	call	0x14e6	; 0x14e6 <placeTimer>
    timer->handler(timer);
    1692:	eb 85       	ldd	r30, Y+11	; 0x0b
    1694:	fc 85       	ldd	r31, Y+12	; 0x0c
    1696:	ce 01       	movw	r24, r28
    1698:	09 95       	icall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    169a:	c0 91 1b 06 	lds	r28, 0x061B
    169e:	d0 91 1c 06 	lds	r29, 0x061C
    16a2:	20 97       	sbiw	r28, 0x00	; 0
    16a4:	a9 f0       	breq	.+42     	; 0x16d0 <SYS_TimerTaskHandler+0xca>
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	9b 81       	ldd	r25, Y+3	; 0x03
    16aa:	ac 81       	ldd	r26, Y+4	; 0x04
    16ac:	bd 81       	ldd	r27, Y+5	; 0x05
    16ae:	c8 16       	cp	r12, r24
    16b0:	d9 06       	cpc	r13, r25
    16b2:	ea 06       	cpc	r14, r26
    16b4:	fb 06       	cpc	r15, r27
    16b6:	e8 f6       	brcc	.-70     	; 0x1672 <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	9b 81       	ldd	r25, Y+3	; 0x03
    16bc:	ac 81       	ldd	r26, Y+4	; 0x04
    16be:	bd 81       	ldd	r27, Y+5	; 0x05
    16c0:	8c 19       	sub	r24, r12
    16c2:	9d 09       	sbc	r25, r13
    16c4:	ae 09       	sbc	r26, r14
    16c6:	bf 09       	sbc	r27, r15
    16c8:	8a 83       	std	Y+2, r24	; 0x02
    16ca:	9b 83       	std	Y+3, r25	; 0x03
    16cc:	ac 83       	std	Y+4, r26	; 0x04
    16ce:	bd 83       	std	Y+5, r27	; 0x05
}
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	ff 90       	pop	r15
    16d6:	ef 90       	pop	r14
    16d8:	df 90       	pop	r13
    16da:	cf 90       	pop	r12
    16dc:	08 95       	ret

000016de <vfprintf>:
    16de:	a3 e1       	ldi	r26, 0x13	; 19
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	e5 e7       	ldi	r30, 0x75	; 117
    16e4:	fb e0       	ldi	r31, 0x0B	; 11
    16e6:	0c 94 0d 0f 	jmp	0x1e1a	; 0x1e1a <__prologue_saves__>
    16ea:	6c 01       	movw	r12, r24
    16ec:	4b 01       	movw	r8, r22
    16ee:	2a 01       	movw	r4, r20
    16f0:	fc 01       	movw	r30, r24
    16f2:	17 82       	std	Z+7, r1	; 0x07
    16f4:	16 82       	std	Z+6, r1	; 0x06
    16f6:	83 81       	ldd	r24, Z+3	; 0x03
    16f8:	81 ff       	sbrs	r24, 1
    16fa:	43 c3       	rjmp	.+1670   	; 0x1d82 <vfprintf+0x6a4>
    16fc:	ae 01       	movw	r20, r28
    16fe:	4f 5f       	subi	r20, 0xFF	; 255
    1700:	5f 4f       	sbci	r21, 0xFF	; 255
    1702:	3a 01       	movw	r6, r20
    1704:	f6 01       	movw	r30, r12
    1706:	93 81       	ldd	r25, Z+3	; 0x03
    1708:	f4 01       	movw	r30, r8
    170a:	93 fd       	sbrc	r25, 3
    170c:	85 91       	lpm	r24, Z+
    170e:	93 ff       	sbrs	r25, 3
    1710:	81 91       	ld	r24, Z+
    1712:	4f 01       	movw	r8, r30
    1714:	88 23       	and	r24, r24
    1716:	09 f4       	brne	.+2      	; 0x171a <vfprintf+0x3c>
    1718:	30 c3       	rjmp	.+1632   	; 0x1d7a <vfprintf+0x69c>
    171a:	85 32       	cpi	r24, 0x25	; 37
    171c:	39 f4       	brne	.+14     	; 0x172c <vfprintf+0x4e>
    171e:	93 fd       	sbrc	r25, 3
    1720:	85 91       	lpm	r24, Z+
    1722:	93 ff       	sbrs	r25, 3
    1724:	81 91       	ld	r24, Z+
    1726:	4f 01       	movw	r8, r30
    1728:	85 32       	cpi	r24, 0x25	; 37
    172a:	39 f4       	brne	.+14     	; 0x173a <vfprintf+0x5c>
    172c:	b6 01       	movw	r22, r12
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	0e 94 97 10 	call	0x212e	; 0x212e <fputc>
    1734:	52 01       	movw	r10, r4
    1736:	25 01       	movw	r4, r10
    1738:	e5 cf       	rjmp	.-54     	; 0x1704 <vfprintf+0x26>
    173a:	10 e0       	ldi	r17, 0x00	; 0
    173c:	f1 2c       	mov	r15, r1
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	20 32       	cpi	r18, 0x20	; 32
    1742:	a0 f4       	brcc	.+40     	; 0x176c <vfprintf+0x8e>
    1744:	8b 32       	cpi	r24, 0x2B	; 43
    1746:	69 f0       	breq	.+26     	; 0x1762 <vfprintf+0x84>
    1748:	30 f4       	brcc	.+12     	; 0x1756 <vfprintf+0x78>
    174a:	80 32       	cpi	r24, 0x20	; 32
    174c:	59 f0       	breq	.+22     	; 0x1764 <vfprintf+0x86>
    174e:	83 32       	cpi	r24, 0x23	; 35
    1750:	69 f4       	brne	.+26     	; 0x176c <vfprintf+0x8e>
    1752:	20 61       	ori	r18, 0x10	; 16
    1754:	2c c0       	rjmp	.+88     	; 0x17ae <vfprintf+0xd0>
    1756:	8d 32       	cpi	r24, 0x2D	; 45
    1758:	39 f0       	breq	.+14     	; 0x1768 <vfprintf+0x8a>
    175a:	80 33       	cpi	r24, 0x30	; 48
    175c:	39 f4       	brne	.+14     	; 0x176c <vfprintf+0x8e>
    175e:	21 60       	ori	r18, 0x01	; 1
    1760:	26 c0       	rjmp	.+76     	; 0x17ae <vfprintf+0xd0>
    1762:	22 60       	ori	r18, 0x02	; 2
    1764:	24 60       	ori	r18, 0x04	; 4
    1766:	23 c0       	rjmp	.+70     	; 0x17ae <vfprintf+0xd0>
    1768:	28 60       	ori	r18, 0x08	; 8
    176a:	21 c0       	rjmp	.+66     	; 0x17ae <vfprintf+0xd0>
    176c:	27 fd       	sbrc	r18, 7
    176e:	27 c0       	rjmp	.+78     	; 0x17be <vfprintf+0xe0>
    1770:	30 ed       	ldi	r19, 0xD0	; 208
    1772:	38 0f       	add	r19, r24
    1774:	3a 30       	cpi	r19, 0x0A	; 10
    1776:	78 f4       	brcc	.+30     	; 0x1796 <vfprintf+0xb8>
    1778:	26 ff       	sbrs	r18, 6
    177a:	06 c0       	rjmp	.+12     	; 0x1788 <vfprintf+0xaa>
    177c:	fa e0       	ldi	r31, 0x0A	; 10
    177e:	1f 9f       	mul	r17, r31
    1780:	30 0d       	add	r19, r0
    1782:	11 24       	eor	r1, r1
    1784:	13 2f       	mov	r17, r19
    1786:	13 c0       	rjmp	.+38     	; 0x17ae <vfprintf+0xd0>
    1788:	4a e0       	ldi	r20, 0x0A	; 10
    178a:	f4 9e       	mul	r15, r20
    178c:	30 0d       	add	r19, r0
    178e:	11 24       	eor	r1, r1
    1790:	f3 2e       	mov	r15, r19
    1792:	20 62       	ori	r18, 0x20	; 32
    1794:	0c c0       	rjmp	.+24     	; 0x17ae <vfprintf+0xd0>
    1796:	8e 32       	cpi	r24, 0x2E	; 46
    1798:	21 f4       	brne	.+8      	; 0x17a2 <vfprintf+0xc4>
    179a:	26 fd       	sbrc	r18, 6
    179c:	ee c2       	rjmp	.+1500   	; 0x1d7a <vfprintf+0x69c>
    179e:	20 64       	ori	r18, 0x40	; 64
    17a0:	06 c0       	rjmp	.+12     	; 0x17ae <vfprintf+0xd0>
    17a2:	8c 36       	cpi	r24, 0x6C	; 108
    17a4:	11 f4       	brne	.+4      	; 0x17aa <vfprintf+0xcc>
    17a6:	20 68       	ori	r18, 0x80	; 128
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <vfprintf+0xd0>
    17aa:	88 36       	cpi	r24, 0x68	; 104
    17ac:	41 f4       	brne	.+16     	; 0x17be <vfprintf+0xe0>
    17ae:	f4 01       	movw	r30, r8
    17b0:	93 fd       	sbrc	r25, 3
    17b2:	85 91       	lpm	r24, Z+
    17b4:	93 ff       	sbrs	r25, 3
    17b6:	81 91       	ld	r24, Z+
    17b8:	4f 01       	movw	r8, r30
    17ba:	81 11       	cpse	r24, r1
    17bc:	c1 cf       	rjmp	.-126    	; 0x1740 <vfprintf+0x62>
    17be:	9b eb       	ldi	r25, 0xBB	; 187
    17c0:	98 0f       	add	r25, r24
    17c2:	93 30       	cpi	r25, 0x03	; 3
    17c4:	18 f4       	brcc	.+6      	; 0x17cc <vfprintf+0xee>
    17c6:	20 61       	ori	r18, 0x10	; 16
    17c8:	80 5e       	subi	r24, 0xE0	; 224
    17ca:	06 c0       	rjmp	.+12     	; 0x17d8 <vfprintf+0xfa>
    17cc:	9b e9       	ldi	r25, 0x9B	; 155
    17ce:	98 0f       	add	r25, r24
    17d0:	93 30       	cpi	r25, 0x03	; 3
    17d2:	08 f0       	brcs	.+2      	; 0x17d6 <vfprintf+0xf8>
    17d4:	71 c1       	rjmp	.+738    	; 0x1ab8 <vfprintf+0x3da>
    17d6:	2f 7e       	andi	r18, 0xEF	; 239
    17d8:	26 ff       	sbrs	r18, 6
    17da:	16 e0       	ldi	r17, 0x06	; 6
    17dc:	2f 73       	andi	r18, 0x3F	; 63
    17de:	32 2e       	mov	r3, r18
    17e0:	85 36       	cpi	r24, 0x65	; 101
    17e2:	19 f4       	brne	.+6      	; 0x17ea <vfprintf+0x10c>
    17e4:	20 64       	ori	r18, 0x40	; 64
    17e6:	32 2e       	mov	r3, r18
    17e8:	08 c0       	rjmp	.+16     	; 0x17fa <vfprintf+0x11c>
    17ea:	86 36       	cpi	r24, 0x66	; 102
    17ec:	21 f4       	brne	.+8      	; 0x17f6 <vfprintf+0x118>
    17ee:	f2 2f       	mov	r31, r18
    17f0:	f0 68       	ori	r31, 0x80	; 128
    17f2:	3f 2e       	mov	r3, r31
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <vfprintf+0x11c>
    17f6:	11 11       	cpse	r17, r1
    17f8:	11 50       	subi	r17, 0x01	; 1
    17fa:	37 fe       	sbrs	r3, 7
    17fc:	07 c0       	rjmp	.+14     	; 0x180c <vfprintf+0x12e>
    17fe:	1c 33       	cpi	r17, 0x3C	; 60
    1800:	50 f4       	brcc	.+20     	; 0x1816 <vfprintf+0x138>
    1802:	ee 24       	eor	r14, r14
    1804:	e3 94       	inc	r14
    1806:	e1 0e       	add	r14, r17
    1808:	27 e0       	ldi	r18, 0x07	; 7
    180a:	0b c0       	rjmp	.+22     	; 0x1822 <vfprintf+0x144>
    180c:	18 30       	cpi	r17, 0x08	; 8
    180e:	38 f0       	brcs	.+14     	; 0x181e <vfprintf+0x140>
    1810:	27 e0       	ldi	r18, 0x07	; 7
    1812:	17 e0       	ldi	r17, 0x07	; 7
    1814:	05 c0       	rjmp	.+10     	; 0x1820 <vfprintf+0x142>
    1816:	27 e0       	ldi	r18, 0x07	; 7
    1818:	4c e3       	ldi	r20, 0x3C	; 60
    181a:	e4 2e       	mov	r14, r20
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <vfprintf+0x144>
    181e:	21 2f       	mov	r18, r17
    1820:	e1 2c       	mov	r14, r1
    1822:	52 01       	movw	r10, r4
    1824:	44 e0       	ldi	r20, 0x04	; 4
    1826:	a4 0e       	add	r10, r20
    1828:	b1 1c       	adc	r11, r1
    182a:	f2 01       	movw	r30, r4
    182c:	60 81       	ld	r22, Z
    182e:	71 81       	ldd	r23, Z+1	; 0x01
    1830:	82 81       	ldd	r24, Z+2	; 0x02
    1832:	93 81       	ldd	r25, Z+3	; 0x03
    1834:	0e 2d       	mov	r16, r14
    1836:	a3 01       	movw	r20, r6
    1838:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <__ftoa_engine>
    183c:	2c 01       	movw	r4, r24
    183e:	09 81       	ldd	r16, Y+1	; 0x01
    1840:	00 ff       	sbrs	r16, 0
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <vfprintf+0x16a>
    1844:	03 ff       	sbrs	r16, 3
    1846:	07 c0       	rjmp	.+14     	; 0x1856 <vfprintf+0x178>
    1848:	31 fc       	sbrc	r3, 1
    184a:	08 c0       	rjmp	.+16     	; 0x185c <vfprintf+0x17e>
    184c:	32 fe       	sbrs	r3, 2
    184e:	09 c0       	rjmp	.+18     	; 0x1862 <vfprintf+0x184>
    1850:	30 e2       	ldi	r19, 0x20	; 32
    1852:	23 2e       	mov	r2, r19
    1854:	07 c0       	rjmp	.+14     	; 0x1864 <vfprintf+0x186>
    1856:	2d e2       	ldi	r18, 0x2D	; 45
    1858:	22 2e       	mov	r2, r18
    185a:	04 c0       	rjmp	.+8      	; 0x1864 <vfprintf+0x186>
    185c:	9b e2       	ldi	r25, 0x2B	; 43
    185e:	29 2e       	mov	r2, r25
    1860:	01 c0       	rjmp	.+2      	; 0x1864 <vfprintf+0x186>
    1862:	21 2c       	mov	r2, r1
    1864:	80 2f       	mov	r24, r16
    1866:	8c 70       	andi	r24, 0x0C	; 12
    1868:	19 f0       	breq	.+6      	; 0x1870 <vfprintf+0x192>
    186a:	21 10       	cpse	r2, r1
    186c:	68 c2       	rjmp	.+1232   	; 0x1d3e <vfprintf+0x660>
    186e:	a8 c2       	rjmp	.+1360   	; 0x1dc0 <vfprintf+0x6e2>
    1870:	37 fe       	sbrs	r3, 7
    1872:	0f c0       	rjmp	.+30     	; 0x1892 <vfprintf+0x1b4>
    1874:	e4 0c       	add	r14, r4
    1876:	04 ff       	sbrs	r16, 4
    1878:	04 c0       	rjmp	.+8      	; 0x1882 <vfprintf+0x1a4>
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	81 33       	cpi	r24, 0x31	; 49
    187e:	09 f4       	brne	.+2      	; 0x1882 <vfprintf+0x1a4>
    1880:	ea 94       	dec	r14
    1882:	1e 14       	cp	r1, r14
    1884:	74 f5       	brge	.+92     	; 0x18e2 <vfprintf+0x204>
    1886:	f8 e0       	ldi	r31, 0x08	; 8
    1888:	fe 15       	cp	r31, r14
    188a:	78 f5       	brcc	.+94     	; 0x18ea <vfprintf+0x20c>
    188c:	88 e0       	ldi	r24, 0x08	; 8
    188e:	e8 2e       	mov	r14, r24
    1890:	2c c0       	rjmp	.+88     	; 0x18ea <vfprintf+0x20c>
    1892:	36 fc       	sbrc	r3, 6
    1894:	2a c0       	rjmp	.+84     	; 0x18ea <vfprintf+0x20c>
    1896:	81 2f       	mov	r24, r17
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	84 15       	cp	r24, r4
    189c:	95 05       	cpc	r25, r5
    189e:	9c f0       	brlt	.+38     	; 0x18c6 <vfprintf+0x1e8>
    18a0:	2c ef       	ldi	r18, 0xFC	; 252
    18a2:	42 16       	cp	r4, r18
    18a4:	2f ef       	ldi	r18, 0xFF	; 255
    18a6:	52 06       	cpc	r5, r18
    18a8:	74 f0       	brlt	.+28     	; 0x18c6 <vfprintf+0x1e8>
    18aa:	43 2d       	mov	r20, r3
    18ac:	40 68       	ori	r20, 0x80	; 128
    18ae:	34 2e       	mov	r3, r20
    18b0:	0a c0       	rjmp	.+20     	; 0x18c6 <vfprintf+0x1e8>
    18b2:	e2 e0       	ldi	r30, 0x02	; 2
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	ec 0f       	add	r30, r28
    18b8:	fd 1f       	adc	r31, r29
    18ba:	e1 0f       	add	r30, r17
    18bc:	f1 1d       	adc	r31, r1
    18be:	80 81       	ld	r24, Z
    18c0:	80 33       	cpi	r24, 0x30	; 48
    18c2:	19 f4       	brne	.+6      	; 0x18ca <vfprintf+0x1ec>
    18c4:	11 50       	subi	r17, 0x01	; 1
    18c6:	11 11       	cpse	r17, r1
    18c8:	f4 cf       	rjmp	.-24     	; 0x18b2 <vfprintf+0x1d4>
    18ca:	37 fe       	sbrs	r3, 7
    18cc:	0e c0       	rjmp	.+28     	; 0x18ea <vfprintf+0x20c>
    18ce:	ee 24       	eor	r14, r14
    18d0:	e3 94       	inc	r14
    18d2:	e1 0e       	add	r14, r17
    18d4:	81 2f       	mov	r24, r17
    18d6:	90 e0       	ldi	r25, 0x00	; 0
    18d8:	48 16       	cp	r4, r24
    18da:	59 06       	cpc	r5, r25
    18dc:	2c f4       	brge	.+10     	; 0x18e8 <vfprintf+0x20a>
    18de:	14 19       	sub	r17, r4
    18e0:	04 c0       	rjmp	.+8      	; 0x18ea <vfprintf+0x20c>
    18e2:	ee 24       	eor	r14, r14
    18e4:	e3 94       	inc	r14
    18e6:	01 c0       	rjmp	.+2      	; 0x18ea <vfprintf+0x20c>
    18e8:	10 e0       	ldi	r17, 0x00	; 0
    18ea:	37 fe       	sbrs	r3, 7
    18ec:	06 c0       	rjmp	.+12     	; 0x18fa <vfprintf+0x21c>
    18ee:	14 14       	cp	r1, r4
    18f0:	15 04       	cpc	r1, r5
    18f2:	34 f4       	brge	.+12     	; 0x1900 <vfprintf+0x222>
    18f4:	c2 01       	movw	r24, r4
    18f6:	01 96       	adiw	r24, 0x01	; 1
    18f8:	05 c0       	rjmp	.+10     	; 0x1904 <vfprintf+0x226>
    18fa:	85 e0       	ldi	r24, 0x05	; 5
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	02 c0       	rjmp	.+4      	; 0x1904 <vfprintf+0x226>
    1900:	81 e0       	ldi	r24, 0x01	; 1
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	21 10       	cpse	r2, r1
    1906:	01 96       	adiw	r24, 0x01	; 1
    1908:	11 23       	and	r17, r17
    190a:	31 f0       	breq	.+12     	; 0x1918 <vfprintf+0x23a>
    190c:	21 2f       	mov	r18, r17
    190e:	30 e0       	ldi	r19, 0x00	; 0
    1910:	2f 5f       	subi	r18, 0xFF	; 255
    1912:	3f 4f       	sbci	r19, 0xFF	; 255
    1914:	82 0f       	add	r24, r18
    1916:	93 1f       	adc	r25, r19
    1918:	2f 2d       	mov	r18, r15
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	82 17       	cp	r24, r18
    191e:	93 07       	cpc	r25, r19
    1920:	14 f4       	brge	.+4      	; 0x1926 <vfprintf+0x248>
    1922:	f8 1a       	sub	r15, r24
    1924:	01 c0       	rjmp	.+2      	; 0x1928 <vfprintf+0x24a>
    1926:	f1 2c       	mov	r15, r1
    1928:	83 2d       	mov	r24, r3
    192a:	89 70       	andi	r24, 0x09	; 9
    192c:	49 f4       	brne	.+18     	; 0x1940 <vfprintf+0x262>
    192e:	ff 20       	and	r15, r15
    1930:	39 f0       	breq	.+14     	; 0x1940 <vfprintf+0x262>
    1932:	b6 01       	movw	r22, r12
    1934:	80 e2       	ldi	r24, 0x20	; 32
    1936:	90 e0       	ldi	r25, 0x00	; 0
    1938:	0e 94 97 10 	call	0x212e	; 0x212e <fputc>
    193c:	fa 94       	dec	r15
    193e:	f7 cf       	rjmp	.-18     	; 0x192e <vfprintf+0x250>
    1940:	22 20       	and	r2, r2
    1942:	29 f0       	breq	.+10     	; 0x194e <vfprintf+0x270>
    1944:	b6 01       	movw	r22, r12
    1946:	82 2d       	mov	r24, r2
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	0e 94 97 10 	call	0x212e	; 0x212e <fputc>
    194e:	33 fc       	sbrc	r3, 3
    1950:	09 c0       	rjmp	.+18     	; 0x1964 <vfprintf+0x286>
    1952:	ff 20       	and	r15, r15
    1954:	39 f0       	breq	.+14     	; 0x1964 <vfprintf+0x286>
    1956:	b6 01       	movw	r22, r12
    1958:	80 e3       	ldi	r24, 0x30	; 48
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 97 10 	call	0x212e	; 0x212e <fputc>
    1960:	fa 94       	dec	r15
    1962:	f7 cf       	rjmp	.-18     	; 0x1952 <vfprintf+0x274>
    1964:	37 fe       	sbrs	r3, 7
    1966:	5a c0       	rjmp	.+180    	; 0x1a1c <vfprintf+0x33e>
    1968:	94 2d       	mov	r25, r4
    196a:	85 2d       	mov	r24, r5
    196c:	57 fe       	sbrs	r5, 7
    196e:	02 c0       	rjmp	.+4      	; 0x1974 <vfprintf+0x296>
    1970:	90 e0       	ldi	r25, 0x00	; 0
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	29 2e       	mov	r2, r25
    1976:	38 2e       	mov	r3, r24
    1978:	20 e0       	ldi	r18, 0x00	; 0
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	a2 01       	movw	r20, r4
    197e:	4e 19       	sub	r20, r14
    1980:	51 09       	sbc	r21, r1
    1982:	5d 87       	std	Y+13, r21	; 0x0d
    1984:	4c 87       	std	Y+12, r20	; 0x0c
    1986:	a2 01       	movw	r20, r4
    1988:	42 19       	sub	r20, r2
    198a:	53 09       	sbc	r21, r3
    198c:	5f 87       	std	Y+15, r21	; 0x0f
    198e:	4e 87       	std	Y+14, r20	; 0x0e
    1990:	61 2f       	mov	r22, r17
    1992:	70 e0       	ldi	r23, 0x00	; 0
    1994:	44 27       	eor	r20, r20
    1996:	55 27       	eor	r21, r21
    1998:	46 1b       	sub	r20, r22
    199a:	57 0b       	sbc	r21, r23
    199c:	59 8b       	std	Y+17, r21	; 0x11
    199e:	48 8b       	std	Y+16, r20	; 0x10
    19a0:	5f ef       	ldi	r21, 0xFF	; 255
    19a2:	25 16       	cp	r2, r21
    19a4:	35 06       	cpc	r3, r21
    19a6:	49 f4       	brne	.+18     	; 0x19ba <vfprintf+0x2dc>
    19a8:	b6 01       	movw	r22, r12
    19aa:	8e e2       	ldi	r24, 0x2E	; 46
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	2a 8b       	std	Y+18, r18	; 0x12
    19b0:	3b 8b       	std	Y+19, r19	; 0x13
    19b2:	0e 94 97 10 	call	0x212e	; 0x212e <fputc>
    19b6:	3b 89       	ldd	r19, Y+19	; 0x13
    19b8:	2a 89       	ldd	r18, Y+18	; 0x12
    19ba:	42 14       	cp	r4, r2
    19bc:	53 04       	cpc	r5, r3
    19be:	6c f0       	brlt	.+26     	; 0x19da <vfprintf+0x2fc>
    19c0:	4c 85       	ldd	r20, Y+12	; 0x0c
    19c2:	5d 85       	ldd	r21, Y+13	; 0x0d
    19c4:	42 15       	cp	r20, r2
    19c6:	53 05       	cpc	r21, r3
    19c8:	44 f4       	brge	.+16     	; 0x19da <vfprintf+0x2fc>
    19ca:	ee 85       	ldd	r30, Y+14	; 0x0e
    19cc:	ff 85       	ldd	r31, Y+15	; 0x0f
    19ce:	e2 0f       	add	r30, r18
    19d0:	f3 1f       	adc	r31, r19
    19d2:	e6 0d       	add	r30, r6
    19d4:	f7 1d       	adc	r31, r7
    19d6:	81 81       	ldd	r24, Z+1	; 0x01
    19d8:	01 c0       	rjmp	.+2      	; 0x19dc <vfprintf+0x2fe>
    19da:	80 e3       	ldi	r24, 0x30	; 48
    19dc:	51 e0       	ldi	r21, 0x01	; 1
    19de:	25 1a       	sub	r2, r21
    19e0:	31 08       	sbc	r3, r1
    19e2:	2f 5f       	subi	r18, 0xFF	; 255
    19e4:	3f 4f       	sbci	r19, 0xFF	; 255
    19e6:	48 89       	ldd	r20, Y+16	; 0x10
    19e8:	59 89       	ldd	r21, Y+17	; 0x11
    19ea:	24 16       	cp	r2, r20
    19ec:	35 06       	cpc	r3, r21
    19ee:	4c f0       	brlt	.+18     	; 0x1a02 <vfprintf+0x324>
    19f0:	b6 01       	movw	r22, r12
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	2a 8b       	std	Y+18, r18	; 0x12
    19f6:	3b 8b       	std	Y+19, r19	; 0x13
    19f8:	0e 94 97 10 	call	0x212e	; 0x212e <fputc>
    19fc:	2a 89       	ldd	r18, Y+18	; 0x12
    19fe:	3b 89       	ldd	r19, Y+19	; 0x13
    1a00:	cf cf       	rjmp	.-98     	; 0x19a0 <vfprintf+0x2c2>
    1a02:	24 14       	cp	r2, r4
    1a04:	35 04       	cpc	r3, r5
    1a06:	39 f4       	brne	.+14     	; 0x1a16 <vfprintf+0x338>
    1a08:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0a:	96 33       	cpi	r25, 0x36	; 54
    1a0c:	18 f4       	brcc	.+6      	; 0x1a14 <vfprintf+0x336>
    1a0e:	95 33       	cpi	r25, 0x35	; 53
    1a10:	11 f4       	brne	.+4      	; 0x1a16 <vfprintf+0x338>
    1a12:	04 ff       	sbrs	r16, 4
    1a14:	81 e3       	ldi	r24, 0x31	; 49
    1a16:	b6 01       	movw	r22, r12
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	4b c0       	rjmp	.+150    	; 0x1ab2 <vfprintf+0x3d4>
    1a1c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1e:	81 33       	cpi	r24, 0x31	; 49
    1a20:	09 f0       	breq	.+2      	; 0x1a24 <vfprintf+0x346>
    1a22:	0f 7e       	andi	r16, 0xEF	; 239
    1a24:	b6 01       	movw	r22, r12
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	0e 94 97 10 	call	0x212e	; 0x212e <fputc>
    1a2c:	11 11       	cpse	r17, r1
    1a2e:	05 c0       	rjmp	.+10     	; 0x1a3a <vfprintf+0x35c>
    1a30:	34 fc       	sbrc	r3, 4
    1a32:	18 c0       	rjmp	.+48     	; 0x1a64 <vfprintf+0x386>
    1a34:	85 e6       	ldi	r24, 0x65	; 101
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	17 c0       	rjmp	.+46     	; 0x1a68 <vfprintf+0x38a>
    1a3a:	b6 01       	movw	r22, r12
    1a3c:	8e e2       	ldi	r24, 0x2E	; 46
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	0e 94 97 10 	call	0x212e	; 0x212e <fputc>
    1a44:	82 e0       	ldi	r24, 0x02	; 2
    1a46:	ee 24       	eor	r14, r14
    1a48:	e3 94       	inc	r14
    1a4a:	e8 0e       	add	r14, r24
    1a4c:	f3 01       	movw	r30, r6
    1a4e:	e8 0f       	add	r30, r24
    1a50:	f1 1d       	adc	r31, r1
    1a52:	80 81       	ld	r24, Z
    1a54:	b6 01       	movw	r22, r12
    1a56:	90 e0       	ldi	r25, 0x00	; 0
    1a58:	0e 94 97 10 	call	0x212e	; 0x212e <fputc>
    1a5c:	11 50       	subi	r17, 0x01	; 1
    1a5e:	8e 2d       	mov	r24, r14
    1a60:	91 f7       	brne	.-28     	; 0x1a46 <vfprintf+0x368>
    1a62:	e6 cf       	rjmp	.-52     	; 0x1a30 <vfprintf+0x352>
    1a64:	85 e4       	ldi	r24, 0x45	; 69
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	b6 01       	movw	r22, r12
    1a6a:	0e 94 97 10 	call	0x212e	; 0x212e <fputc>
    1a6e:	57 fc       	sbrc	r5, 7
    1a70:	05 c0       	rjmp	.+10     	; 0x1a7c <vfprintf+0x39e>
    1a72:	41 14       	cp	r4, r1
    1a74:	51 04       	cpc	r5, r1
    1a76:	39 f4       	brne	.+14     	; 0x1a86 <vfprintf+0x3a8>
    1a78:	04 ff       	sbrs	r16, 4
    1a7a:	05 c0       	rjmp	.+10     	; 0x1a86 <vfprintf+0x3a8>
    1a7c:	51 94       	neg	r5
    1a7e:	41 94       	neg	r4
    1a80:	51 08       	sbc	r5, r1
    1a82:	8d e2       	ldi	r24, 0x2D	; 45
    1a84:	01 c0       	rjmp	.+2      	; 0x1a88 <vfprintf+0x3aa>
    1a86:	8b e2       	ldi	r24, 0x2B	; 43
    1a88:	b6 01       	movw	r22, r12
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	0e 94 97 10 	call	0x212e	; 0x212e <fputc>
    1a90:	80 e3       	ldi	r24, 0x30	; 48
    1a92:	9a e0       	ldi	r25, 0x0A	; 10
    1a94:	49 16       	cp	r4, r25
    1a96:	51 04       	cpc	r5, r1
    1a98:	2c f0       	brlt	.+10     	; 0x1aa4 <vfprintf+0x3c6>
    1a9a:	8f 5f       	subi	r24, 0xFF	; 255
    1a9c:	5a e0       	ldi	r21, 0x0A	; 10
    1a9e:	45 1a       	sub	r4, r21
    1aa0:	51 08       	sbc	r5, r1
    1aa2:	f7 cf       	rjmp	.-18     	; 0x1a92 <vfprintf+0x3b4>
    1aa4:	b6 01       	movw	r22, r12
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	0e 94 97 10 	call	0x212e	; 0x212e <fputc>
    1aac:	b6 01       	movw	r22, r12
    1aae:	c2 01       	movw	r24, r4
    1ab0:	c0 96       	adiw	r24, 0x30	; 48
    1ab2:	0e 94 97 10 	call	0x212e	; 0x212e <fputc>
    1ab6:	57 c1       	rjmp	.+686    	; 0x1d66 <vfprintf+0x688>
    1ab8:	83 36       	cpi	r24, 0x63	; 99
    1aba:	31 f0       	breq	.+12     	; 0x1ac8 <vfprintf+0x3ea>
    1abc:	83 37       	cpi	r24, 0x73	; 115
    1abe:	79 f0       	breq	.+30     	; 0x1ade <vfprintf+0x400>
    1ac0:	83 35       	cpi	r24, 0x53	; 83
    1ac2:	09 f0       	breq	.+2      	; 0x1ac6 <vfprintf+0x3e8>
    1ac4:	58 c0       	rjmp	.+176    	; 0x1b76 <vfprintf+0x498>
    1ac6:	21 c0       	rjmp	.+66     	; 0x1b0a <vfprintf+0x42c>
    1ac8:	52 01       	movw	r10, r4
    1aca:	e2 e0       	ldi	r30, 0x02	; 2
    1acc:	ae 0e       	add	r10, r30
    1ace:	b1 1c       	adc	r11, r1
    1ad0:	f2 01       	movw	r30, r4
    1ad2:	80 81       	ld	r24, Z
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	01 e0       	ldi	r16, 0x01	; 1
    1ad8:	10 e0       	ldi	r17, 0x00	; 0
    1ada:	23 01       	movw	r4, r6
    1adc:	14 c0       	rjmp	.+40     	; 0x1b06 <vfprintf+0x428>
    1ade:	52 01       	movw	r10, r4
    1ae0:	f2 e0       	ldi	r31, 0x02	; 2
    1ae2:	af 0e       	add	r10, r31
    1ae4:	b1 1c       	adc	r11, r1
    1ae6:	f2 01       	movw	r30, r4
    1ae8:	40 80       	ld	r4, Z
    1aea:	51 80       	ldd	r5, Z+1	; 0x01
    1aec:	26 ff       	sbrs	r18, 6
    1aee:	03 c0       	rjmp	.+6      	; 0x1af6 <vfprintf+0x418>
    1af0:	61 2f       	mov	r22, r17
    1af2:	70 e0       	ldi	r23, 0x00	; 0
    1af4:	02 c0       	rjmp	.+4      	; 0x1afa <vfprintf+0x41c>
    1af6:	6f ef       	ldi	r22, 0xFF	; 255
    1af8:	7f ef       	ldi	r23, 0xFF	; 255
    1afa:	c2 01       	movw	r24, r4
    1afc:	2a 8b       	std	Y+18, r18	; 0x12
    1afe:	0e 94 8c 10 	call	0x2118	; 0x2118 <strnlen>
    1b02:	8c 01       	movw	r16, r24
    1b04:	2a 89       	ldd	r18, Y+18	; 0x12
    1b06:	2f 77       	andi	r18, 0x7F	; 127
    1b08:	15 c0       	rjmp	.+42     	; 0x1b34 <vfprintf+0x456>
    1b0a:	52 01       	movw	r10, r4
    1b0c:	f2 e0       	ldi	r31, 0x02	; 2
    1b0e:	af 0e       	add	r10, r31
    1b10:	b1 1c       	adc	r11, r1
    1b12:	f2 01       	movw	r30, r4
    1b14:	40 80       	ld	r4, Z
    1b16:	51 80       	ldd	r5, Z+1	; 0x01
    1b18:	26 ff       	sbrs	r18, 6
    1b1a:	03 c0       	rjmp	.+6      	; 0x1b22 <vfprintf+0x444>
    1b1c:	61 2f       	mov	r22, r17
    1b1e:	70 e0       	ldi	r23, 0x00	; 0
    1b20:	02 c0       	rjmp	.+4      	; 0x1b26 <vfprintf+0x448>
    1b22:	6f ef       	ldi	r22, 0xFF	; 255
    1b24:	7f ef       	ldi	r23, 0xFF	; 255
    1b26:	c2 01       	movw	r24, r4
    1b28:	2a 8b       	std	Y+18, r18	; 0x12
    1b2a:	0e 94 78 10 	call	0x20f0	; 0x20f0 <strnlen_P>
    1b2e:	8c 01       	movw	r16, r24
    1b30:	2a 89       	ldd	r18, Y+18	; 0x12
    1b32:	20 68       	ori	r18, 0x80	; 128
    1b34:	32 2e       	mov	r3, r18
    1b36:	23 fd       	sbrc	r18, 3
    1b38:	1a c0       	rjmp	.+52     	; 0x1b6e <vfprintf+0x490>
    1b3a:	8f 2d       	mov	r24, r15
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	08 17       	cp	r16, r24
    1b40:	19 07       	cpc	r17, r25
    1b42:	a8 f4       	brcc	.+42     	; 0x1b6e <vfprintf+0x490>
    1b44:	b6 01       	movw	r22, r12
    1b46:	80 e2       	ldi	r24, 0x20	; 32
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	0e 94 97 10 	call	0x212e	; 0x212e <fputc>
    1b4e:	fa 94       	dec	r15
    1b50:	f4 cf       	rjmp	.-24     	; 0x1b3a <vfprintf+0x45c>
    1b52:	f2 01       	movw	r30, r4
    1b54:	37 fc       	sbrc	r3, 7
    1b56:	85 91       	lpm	r24, Z+
    1b58:	37 fe       	sbrs	r3, 7
    1b5a:	81 91       	ld	r24, Z+
    1b5c:	2f 01       	movw	r4, r30
    1b5e:	b6 01       	movw	r22, r12
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	0e 94 97 10 	call	0x212e	; 0x212e <fputc>
    1b66:	f1 10       	cpse	r15, r1
    1b68:	fa 94       	dec	r15
    1b6a:	01 50       	subi	r16, 0x01	; 1
    1b6c:	11 09       	sbc	r17, r1
    1b6e:	01 15       	cp	r16, r1
    1b70:	11 05       	cpc	r17, r1
    1b72:	79 f7       	brne	.-34     	; 0x1b52 <vfprintf+0x474>
    1b74:	f8 c0       	rjmp	.+496    	; 0x1d66 <vfprintf+0x688>
    1b76:	84 36       	cpi	r24, 0x64	; 100
    1b78:	11 f0       	breq	.+4      	; 0x1b7e <vfprintf+0x4a0>
    1b7a:	89 36       	cpi	r24, 0x69	; 105
    1b7c:	59 f5       	brne	.+86     	; 0x1bd4 <vfprintf+0x4f6>
    1b7e:	52 01       	movw	r10, r4
    1b80:	27 ff       	sbrs	r18, 7
    1b82:	09 c0       	rjmp	.+18     	; 0x1b96 <vfprintf+0x4b8>
    1b84:	f4 e0       	ldi	r31, 0x04	; 4
    1b86:	af 0e       	add	r10, r31
    1b88:	b1 1c       	adc	r11, r1
    1b8a:	f2 01       	movw	r30, r4
    1b8c:	60 81       	ld	r22, Z
    1b8e:	71 81       	ldd	r23, Z+1	; 0x01
    1b90:	82 81       	ldd	r24, Z+2	; 0x02
    1b92:	93 81       	ldd	r25, Z+3	; 0x03
    1b94:	0a c0       	rjmp	.+20     	; 0x1baa <vfprintf+0x4cc>
    1b96:	f2 e0       	ldi	r31, 0x02	; 2
    1b98:	af 0e       	add	r10, r31
    1b9a:	b1 1c       	adc	r11, r1
    1b9c:	f2 01       	movw	r30, r4
    1b9e:	60 81       	ld	r22, Z
    1ba0:	71 81       	ldd	r23, Z+1	; 0x01
    1ba2:	07 2e       	mov	r0, r23
    1ba4:	00 0c       	add	r0, r0
    1ba6:	88 0b       	sbc	r24, r24
    1ba8:	99 0b       	sbc	r25, r25
    1baa:	2f 76       	andi	r18, 0x6F	; 111
    1bac:	32 2e       	mov	r3, r18
    1bae:	97 ff       	sbrs	r25, 7
    1bb0:	09 c0       	rjmp	.+18     	; 0x1bc4 <vfprintf+0x4e6>
    1bb2:	90 95       	com	r25
    1bb4:	80 95       	com	r24
    1bb6:	70 95       	com	r23
    1bb8:	61 95       	neg	r22
    1bba:	7f 4f       	sbci	r23, 0xFF	; 255
    1bbc:	8f 4f       	sbci	r24, 0xFF	; 255
    1bbe:	9f 4f       	sbci	r25, 0xFF	; 255
    1bc0:	20 68       	ori	r18, 0x80	; 128
    1bc2:	32 2e       	mov	r3, r18
    1bc4:	2a e0       	ldi	r18, 0x0A	; 10
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	a3 01       	movw	r20, r6
    1bca:	0e 94 15 11 	call	0x222a	; 0x222a <__ultoa_invert>
    1bce:	e8 2e       	mov	r14, r24
    1bd0:	e6 18       	sub	r14, r6
    1bd2:	3f c0       	rjmp	.+126    	; 0x1c52 <vfprintf+0x574>
    1bd4:	02 2f       	mov	r16, r18
    1bd6:	85 37       	cpi	r24, 0x75	; 117
    1bd8:	21 f4       	brne	.+8      	; 0x1be2 <vfprintf+0x504>
    1bda:	0f 7e       	andi	r16, 0xEF	; 239
    1bdc:	2a e0       	ldi	r18, 0x0A	; 10
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	1d c0       	rjmp	.+58     	; 0x1c1c <vfprintf+0x53e>
    1be2:	09 7f       	andi	r16, 0xF9	; 249
    1be4:	8f 36       	cpi	r24, 0x6F	; 111
    1be6:	91 f0       	breq	.+36     	; 0x1c0c <vfprintf+0x52e>
    1be8:	18 f4       	brcc	.+6      	; 0x1bf0 <vfprintf+0x512>
    1bea:	88 35       	cpi	r24, 0x58	; 88
    1bec:	59 f0       	breq	.+22     	; 0x1c04 <vfprintf+0x526>
    1bee:	c5 c0       	rjmp	.+394    	; 0x1d7a <vfprintf+0x69c>
    1bf0:	80 37       	cpi	r24, 0x70	; 112
    1bf2:	19 f0       	breq	.+6      	; 0x1bfa <vfprintf+0x51c>
    1bf4:	88 37       	cpi	r24, 0x78	; 120
    1bf6:	11 f0       	breq	.+4      	; 0x1bfc <vfprintf+0x51e>
    1bf8:	c0 c0       	rjmp	.+384    	; 0x1d7a <vfprintf+0x69c>
    1bfa:	00 61       	ori	r16, 0x10	; 16
    1bfc:	04 ff       	sbrs	r16, 4
    1bfe:	09 c0       	rjmp	.+18     	; 0x1c12 <vfprintf+0x534>
    1c00:	04 60       	ori	r16, 0x04	; 4
    1c02:	07 c0       	rjmp	.+14     	; 0x1c12 <vfprintf+0x534>
    1c04:	24 ff       	sbrs	r18, 4
    1c06:	08 c0       	rjmp	.+16     	; 0x1c18 <vfprintf+0x53a>
    1c08:	06 60       	ori	r16, 0x06	; 6
    1c0a:	06 c0       	rjmp	.+12     	; 0x1c18 <vfprintf+0x53a>
    1c0c:	28 e0       	ldi	r18, 0x08	; 8
    1c0e:	30 e0       	ldi	r19, 0x00	; 0
    1c10:	05 c0       	rjmp	.+10     	; 0x1c1c <vfprintf+0x53e>
    1c12:	20 e1       	ldi	r18, 0x10	; 16
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	02 c0       	rjmp	.+4      	; 0x1c1c <vfprintf+0x53e>
    1c18:	20 e1       	ldi	r18, 0x10	; 16
    1c1a:	32 e0       	ldi	r19, 0x02	; 2
    1c1c:	52 01       	movw	r10, r4
    1c1e:	07 ff       	sbrs	r16, 7
    1c20:	09 c0       	rjmp	.+18     	; 0x1c34 <vfprintf+0x556>
    1c22:	f4 e0       	ldi	r31, 0x04	; 4
    1c24:	af 0e       	add	r10, r31
    1c26:	b1 1c       	adc	r11, r1
    1c28:	f2 01       	movw	r30, r4
    1c2a:	60 81       	ld	r22, Z
    1c2c:	71 81       	ldd	r23, Z+1	; 0x01
    1c2e:	82 81       	ldd	r24, Z+2	; 0x02
    1c30:	93 81       	ldd	r25, Z+3	; 0x03
    1c32:	08 c0       	rjmp	.+16     	; 0x1c44 <vfprintf+0x566>
    1c34:	f2 e0       	ldi	r31, 0x02	; 2
    1c36:	af 0e       	add	r10, r31
    1c38:	b1 1c       	adc	r11, r1
    1c3a:	f2 01       	movw	r30, r4
    1c3c:	60 81       	ld	r22, Z
    1c3e:	71 81       	ldd	r23, Z+1	; 0x01
    1c40:	80 e0       	ldi	r24, 0x00	; 0
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	a3 01       	movw	r20, r6
    1c46:	0e 94 15 11 	call	0x222a	; 0x222a <__ultoa_invert>
    1c4a:	e8 2e       	mov	r14, r24
    1c4c:	e6 18       	sub	r14, r6
    1c4e:	0f 77       	andi	r16, 0x7F	; 127
    1c50:	30 2e       	mov	r3, r16
    1c52:	36 fe       	sbrs	r3, 6
    1c54:	0b c0       	rjmp	.+22     	; 0x1c6c <vfprintf+0x58e>
    1c56:	33 2d       	mov	r19, r3
    1c58:	3e 7f       	andi	r19, 0xFE	; 254
    1c5a:	e1 16       	cp	r14, r17
    1c5c:	50 f4       	brcc	.+20     	; 0x1c72 <vfprintf+0x594>
    1c5e:	34 fe       	sbrs	r3, 4
    1c60:	0a c0       	rjmp	.+20     	; 0x1c76 <vfprintf+0x598>
    1c62:	32 fc       	sbrc	r3, 2
    1c64:	08 c0       	rjmp	.+16     	; 0x1c76 <vfprintf+0x598>
    1c66:	33 2d       	mov	r19, r3
    1c68:	3e 7e       	andi	r19, 0xEE	; 238
    1c6a:	05 c0       	rjmp	.+10     	; 0x1c76 <vfprintf+0x598>
    1c6c:	0e 2d       	mov	r16, r14
    1c6e:	33 2d       	mov	r19, r3
    1c70:	03 c0       	rjmp	.+6      	; 0x1c78 <vfprintf+0x59a>
    1c72:	0e 2d       	mov	r16, r14
    1c74:	01 c0       	rjmp	.+2      	; 0x1c78 <vfprintf+0x59a>
    1c76:	01 2f       	mov	r16, r17
    1c78:	34 ff       	sbrs	r19, 4
    1c7a:	0c c0       	rjmp	.+24     	; 0x1c94 <vfprintf+0x5b6>
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	ee 0d       	add	r30, r14
    1c80:	f1 1d       	adc	r31, r1
    1c82:	80 81       	ld	r24, Z
    1c84:	80 33       	cpi	r24, 0x30	; 48
    1c86:	11 f4       	brne	.+4      	; 0x1c8c <vfprintf+0x5ae>
    1c88:	39 7e       	andi	r19, 0xE9	; 233
    1c8a:	08 c0       	rjmp	.+16     	; 0x1c9c <vfprintf+0x5be>
    1c8c:	32 ff       	sbrs	r19, 2
    1c8e:	05 c0       	rjmp	.+10     	; 0x1c9a <vfprintf+0x5bc>
    1c90:	0e 5f       	subi	r16, 0xFE	; 254
    1c92:	04 c0       	rjmp	.+8      	; 0x1c9c <vfprintf+0x5be>
    1c94:	83 2f       	mov	r24, r19
    1c96:	86 78       	andi	r24, 0x86	; 134
    1c98:	09 f0       	breq	.+2      	; 0x1c9c <vfprintf+0x5be>
    1c9a:	0f 5f       	subi	r16, 0xFF	; 255
    1c9c:	33 fd       	sbrc	r19, 3
    1c9e:	13 c0       	rjmp	.+38     	; 0x1cc6 <vfprintf+0x5e8>
    1ca0:	30 ff       	sbrs	r19, 0
    1ca2:	06 c0       	rjmp	.+12     	; 0x1cb0 <vfprintf+0x5d2>
    1ca4:	1e 2d       	mov	r17, r14
    1ca6:	0f 15       	cp	r16, r15
    1ca8:	18 f4       	brcc	.+6      	; 0x1cb0 <vfprintf+0x5d2>
    1caa:	1f 0d       	add	r17, r15
    1cac:	10 1b       	sub	r17, r16
    1cae:	0f 2d       	mov	r16, r15
    1cb0:	0f 15       	cp	r16, r15
    1cb2:	68 f4       	brcc	.+26     	; 0x1cce <vfprintf+0x5f0>
    1cb4:	b6 01       	movw	r22, r12
    1cb6:	80 e2       	ldi	r24, 0x20	; 32
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	3b 8b       	std	Y+19, r19	; 0x13
    1cbc:	0e 94 97 10 	call	0x212e	; 0x212e <fputc>
    1cc0:	0f 5f       	subi	r16, 0xFF	; 255
    1cc2:	3b 89       	ldd	r19, Y+19	; 0x13
    1cc4:	f5 cf       	rjmp	.-22     	; 0x1cb0 <vfprintf+0x5d2>
    1cc6:	0f 15       	cp	r16, r15
    1cc8:	10 f4       	brcc	.+4      	; 0x1cce <vfprintf+0x5f0>
    1cca:	f0 1a       	sub	r15, r16
    1ccc:	01 c0       	rjmp	.+2      	; 0x1cd0 <vfprintf+0x5f2>
    1cce:	f1 2c       	mov	r15, r1
    1cd0:	34 ff       	sbrs	r19, 4
    1cd2:	12 c0       	rjmp	.+36     	; 0x1cf8 <vfprintf+0x61a>
    1cd4:	b6 01       	movw	r22, r12
    1cd6:	80 e3       	ldi	r24, 0x30	; 48
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	3b 8b       	std	Y+19, r19	; 0x13
    1cdc:	0e 94 97 10 	call	0x212e	; 0x212e <fputc>
    1ce0:	3b 89       	ldd	r19, Y+19	; 0x13
    1ce2:	32 ff       	sbrs	r19, 2
    1ce4:	17 c0       	rjmp	.+46     	; 0x1d14 <vfprintf+0x636>
    1ce6:	31 fd       	sbrc	r19, 1
    1ce8:	03 c0       	rjmp	.+6      	; 0x1cf0 <vfprintf+0x612>
    1cea:	88 e7       	ldi	r24, 0x78	; 120
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	02 c0       	rjmp	.+4      	; 0x1cf4 <vfprintf+0x616>
    1cf0:	88 e5       	ldi	r24, 0x58	; 88
    1cf2:	90 e0       	ldi	r25, 0x00	; 0
    1cf4:	b6 01       	movw	r22, r12
    1cf6:	0c c0       	rjmp	.+24     	; 0x1d10 <vfprintf+0x632>
    1cf8:	83 2f       	mov	r24, r19
    1cfa:	86 78       	andi	r24, 0x86	; 134
    1cfc:	59 f0       	breq	.+22     	; 0x1d14 <vfprintf+0x636>
    1cfe:	31 ff       	sbrs	r19, 1
    1d00:	02 c0       	rjmp	.+4      	; 0x1d06 <vfprintf+0x628>
    1d02:	8b e2       	ldi	r24, 0x2B	; 43
    1d04:	01 c0       	rjmp	.+2      	; 0x1d08 <vfprintf+0x62a>
    1d06:	80 e2       	ldi	r24, 0x20	; 32
    1d08:	37 fd       	sbrc	r19, 7
    1d0a:	8d e2       	ldi	r24, 0x2D	; 45
    1d0c:	b6 01       	movw	r22, r12
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	0e 94 97 10 	call	0x212e	; 0x212e <fputc>
    1d14:	e1 16       	cp	r14, r17
    1d16:	38 f4       	brcc	.+14     	; 0x1d26 <vfprintf+0x648>
    1d18:	b6 01       	movw	r22, r12
    1d1a:	80 e3       	ldi	r24, 0x30	; 48
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	0e 94 97 10 	call	0x212e	; 0x212e <fputc>
    1d22:	11 50       	subi	r17, 0x01	; 1
    1d24:	f7 cf       	rjmp	.-18     	; 0x1d14 <vfprintf+0x636>
    1d26:	ea 94       	dec	r14
    1d28:	f3 01       	movw	r30, r6
    1d2a:	ee 0d       	add	r30, r14
    1d2c:	f1 1d       	adc	r31, r1
    1d2e:	80 81       	ld	r24, Z
    1d30:	b6 01       	movw	r22, r12
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	0e 94 97 10 	call	0x212e	; 0x212e <fputc>
    1d38:	e1 10       	cpse	r14, r1
    1d3a:	f5 cf       	rjmp	.-22     	; 0x1d26 <vfprintf+0x648>
    1d3c:	14 c0       	rjmp	.+40     	; 0x1d66 <vfprintf+0x688>
    1d3e:	f4 e0       	ldi	r31, 0x04	; 4
    1d40:	ff 15       	cp	r31, r15
    1d42:	58 f5       	brcc	.+86     	; 0x1d9a <vfprintf+0x6bc>
    1d44:	84 e0       	ldi	r24, 0x04	; 4
    1d46:	f8 1a       	sub	r15, r24
    1d48:	33 fe       	sbrs	r3, 3
    1d4a:	1e c0       	rjmp	.+60     	; 0x1d88 <vfprintf+0x6aa>
    1d4c:	21 10       	cpse	r2, r1
    1d4e:	26 c0       	rjmp	.+76     	; 0x1d9c <vfprintf+0x6be>
    1d50:	03 ff       	sbrs	r16, 3
    1d52:	2a c0       	rjmp	.+84     	; 0x1da8 <vfprintf+0x6ca>
    1d54:	04 e3       	ldi	r16, 0x34	; 52
    1d56:	11 e0       	ldi	r17, 0x01	; 1
    1d58:	f3 2d       	mov	r31, r3
    1d5a:	f0 71       	andi	r31, 0x10	; 16
    1d5c:	3f 2e       	mov	r3, r31
    1d5e:	f8 01       	movw	r30, r16
    1d60:	84 91       	lpm	r24, Z
    1d62:	81 11       	cpse	r24, r1
    1d64:	24 c0       	rjmp	.+72     	; 0x1dae <vfprintf+0x6d0>
    1d66:	ff 20       	and	r15, r15
    1d68:	09 f4       	brne	.+2      	; 0x1d6c <vfprintf+0x68e>
    1d6a:	e5 cc       	rjmp	.-1590   	; 0x1736 <vfprintf+0x58>
    1d6c:	b6 01       	movw	r22, r12
    1d6e:	80 e2       	ldi	r24, 0x20	; 32
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	0e 94 97 10 	call	0x212e	; 0x212e <fputc>
    1d76:	fa 94       	dec	r15
    1d78:	f6 cf       	rjmp	.-20     	; 0x1d66 <vfprintf+0x688>
    1d7a:	f6 01       	movw	r30, r12
    1d7c:	86 81       	ldd	r24, Z+6	; 0x06
    1d7e:	97 81       	ldd	r25, Z+7	; 0x07
    1d80:	26 c0       	rjmp	.+76     	; 0x1dce <vfprintf+0x6f0>
    1d82:	8f ef       	ldi	r24, 0xFF	; 255
    1d84:	9f ef       	ldi	r25, 0xFF	; 255
    1d86:	23 c0       	rjmp	.+70     	; 0x1dce <vfprintf+0x6f0>
    1d88:	b6 01       	movw	r22, r12
    1d8a:	80 e2       	ldi	r24, 0x20	; 32
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	0e 94 97 10 	call	0x212e	; 0x212e <fputc>
    1d92:	fa 94       	dec	r15
    1d94:	f1 10       	cpse	r15, r1
    1d96:	f8 cf       	rjmp	.-16     	; 0x1d88 <vfprintf+0x6aa>
    1d98:	d9 cf       	rjmp	.-78     	; 0x1d4c <vfprintf+0x66e>
    1d9a:	f1 2c       	mov	r15, r1
    1d9c:	b6 01       	movw	r22, r12
    1d9e:	82 2d       	mov	r24, r2
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	0e 94 97 10 	call	0x212e	; 0x212e <fputc>
    1da6:	d4 cf       	rjmp	.-88     	; 0x1d50 <vfprintf+0x672>
    1da8:	08 e3       	ldi	r16, 0x38	; 56
    1daa:	11 e0       	ldi	r17, 0x01	; 1
    1dac:	d5 cf       	rjmp	.-86     	; 0x1d58 <vfprintf+0x67a>
    1dae:	31 10       	cpse	r3, r1
    1db0:	80 52       	subi	r24, 0x20	; 32
    1db2:	b6 01       	movw	r22, r12
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	0e 94 97 10 	call	0x212e	; 0x212e <fputc>
    1dba:	0f 5f       	subi	r16, 0xFF	; 255
    1dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbe:	cf cf       	rjmp	.-98     	; 0x1d5e <vfprintf+0x680>
    1dc0:	23 e0       	ldi	r18, 0x03	; 3
    1dc2:	2f 15       	cp	r18, r15
    1dc4:	10 f4       	brcc	.+4      	; 0x1dca <vfprintf+0x6ec>
    1dc6:	83 e0       	ldi	r24, 0x03	; 3
    1dc8:	be cf       	rjmp	.-132    	; 0x1d46 <vfprintf+0x668>
    1dca:	f1 2c       	mov	r15, r1
    1dcc:	c1 cf       	rjmp	.-126    	; 0x1d50 <vfprintf+0x672>
    1dce:	63 96       	adiw	r28, 0x13	; 19
    1dd0:	e2 e1       	ldi	r30, 0x12	; 18
    1dd2:	0c 94 29 0f 	jmp	0x1e52	; 0x1e52 <__epilogue_restores__>

00001dd6 <__udivmodsi4>:
    1dd6:	a1 e2       	ldi	r26, 0x21	; 33
    1dd8:	1a 2e       	mov	r1, r26
    1dda:	aa 1b       	sub	r26, r26
    1ddc:	bb 1b       	sub	r27, r27
    1dde:	fd 01       	movw	r30, r26
    1de0:	0d c0       	rjmp	.+26     	; 0x1dfc <__udivmodsi4_ep>

00001de2 <__udivmodsi4_loop>:
    1de2:	aa 1f       	adc	r26, r26
    1de4:	bb 1f       	adc	r27, r27
    1de6:	ee 1f       	adc	r30, r30
    1de8:	ff 1f       	adc	r31, r31
    1dea:	a2 17       	cp	r26, r18
    1dec:	b3 07       	cpc	r27, r19
    1dee:	e4 07       	cpc	r30, r20
    1df0:	f5 07       	cpc	r31, r21
    1df2:	20 f0       	brcs	.+8      	; 0x1dfc <__udivmodsi4_ep>
    1df4:	a2 1b       	sub	r26, r18
    1df6:	b3 0b       	sbc	r27, r19
    1df8:	e4 0b       	sbc	r30, r20
    1dfa:	f5 0b       	sbc	r31, r21

00001dfc <__udivmodsi4_ep>:
    1dfc:	66 1f       	adc	r22, r22
    1dfe:	77 1f       	adc	r23, r23
    1e00:	88 1f       	adc	r24, r24
    1e02:	99 1f       	adc	r25, r25
    1e04:	1a 94       	dec	r1
    1e06:	69 f7       	brne	.-38     	; 0x1de2 <__udivmodsi4_loop>
    1e08:	60 95       	com	r22
    1e0a:	70 95       	com	r23
    1e0c:	80 95       	com	r24
    1e0e:	90 95       	com	r25
    1e10:	9b 01       	movw	r18, r22
    1e12:	ac 01       	movw	r20, r24
    1e14:	bd 01       	movw	r22, r26
    1e16:	cf 01       	movw	r24, r30
    1e18:	08 95       	ret

00001e1a <__prologue_saves__>:
    1e1a:	2f 92       	push	r2
    1e1c:	3f 92       	push	r3
    1e1e:	4f 92       	push	r4
    1e20:	5f 92       	push	r5
    1e22:	6f 92       	push	r6
    1e24:	7f 92       	push	r7
    1e26:	8f 92       	push	r8
    1e28:	9f 92       	push	r9
    1e2a:	af 92       	push	r10
    1e2c:	bf 92       	push	r11
    1e2e:	cf 92       	push	r12
    1e30:	df 92       	push	r13
    1e32:	ef 92       	push	r14
    1e34:	ff 92       	push	r15
    1e36:	0f 93       	push	r16
    1e38:	1f 93       	push	r17
    1e3a:	cf 93       	push	r28
    1e3c:	df 93       	push	r29
    1e3e:	cd b7       	in	r28, 0x3d	; 61
    1e40:	de b7       	in	r29, 0x3e	; 62
    1e42:	ca 1b       	sub	r28, r26
    1e44:	db 0b       	sbc	r29, r27
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	cd bf       	out	0x3d, r28	; 61
    1e50:	09 94       	ijmp

00001e52 <__epilogue_restores__>:
    1e52:	2a 88       	ldd	r2, Y+18	; 0x12
    1e54:	39 88       	ldd	r3, Y+17	; 0x11
    1e56:	48 88       	ldd	r4, Y+16	; 0x10
    1e58:	5f 84       	ldd	r5, Y+15	; 0x0f
    1e5a:	6e 84       	ldd	r6, Y+14	; 0x0e
    1e5c:	7d 84       	ldd	r7, Y+13	; 0x0d
    1e5e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1e60:	9b 84       	ldd	r9, Y+11	; 0x0b
    1e62:	aa 84       	ldd	r10, Y+10	; 0x0a
    1e64:	b9 84       	ldd	r11, Y+9	; 0x09
    1e66:	c8 84       	ldd	r12, Y+8	; 0x08
    1e68:	df 80       	ldd	r13, Y+7	; 0x07
    1e6a:	ee 80       	ldd	r14, Y+6	; 0x06
    1e6c:	fd 80       	ldd	r15, Y+5	; 0x05
    1e6e:	0c 81       	ldd	r16, Y+4	; 0x04
    1e70:	1b 81       	ldd	r17, Y+3	; 0x03
    1e72:	aa 81       	ldd	r26, Y+2	; 0x02
    1e74:	b9 81       	ldd	r27, Y+1	; 0x01
    1e76:	ce 0f       	add	r28, r30
    1e78:	d1 1d       	adc	r29, r1
    1e7a:	0f b6       	in	r0, 0x3f	; 63
    1e7c:	f8 94       	cli
    1e7e:	de bf       	out	0x3e, r29	; 62
    1e80:	0f be       	out	0x3f, r0	; 63
    1e82:	cd bf       	out	0x3d, r28	; 61
    1e84:	ed 01       	movw	r28, r26
    1e86:	08 95       	ret

00001e88 <do_rand>:
    1e88:	8f 92       	push	r8
    1e8a:	9f 92       	push	r9
    1e8c:	af 92       	push	r10
    1e8e:	bf 92       	push	r11
    1e90:	cf 92       	push	r12
    1e92:	df 92       	push	r13
    1e94:	ef 92       	push	r14
    1e96:	ff 92       	push	r15
    1e98:	cf 93       	push	r28
    1e9a:	df 93       	push	r29
    1e9c:	ec 01       	movw	r28, r24
    1e9e:	68 81       	ld	r22, Y
    1ea0:	79 81       	ldd	r23, Y+1	; 0x01
    1ea2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea4:	9b 81       	ldd	r25, Y+3	; 0x03
    1ea6:	61 15       	cp	r22, r1
    1ea8:	71 05       	cpc	r23, r1
    1eaa:	81 05       	cpc	r24, r1
    1eac:	91 05       	cpc	r25, r1
    1eae:	21 f4       	brne	.+8      	; 0x1eb8 <do_rand+0x30>
    1eb0:	64 e2       	ldi	r22, 0x24	; 36
    1eb2:	79 ed       	ldi	r23, 0xD9	; 217
    1eb4:	8b e5       	ldi	r24, 0x5B	; 91
    1eb6:	97 e0       	ldi	r25, 0x07	; 7
    1eb8:	2d e1       	ldi	r18, 0x1D	; 29
    1eba:	33 ef       	ldi	r19, 0xF3	; 243
    1ebc:	41 e0       	ldi	r20, 0x01	; 1
    1ebe:	50 e0       	ldi	r21, 0x00	; 0
    1ec0:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__divmodsi4>
    1ec4:	49 01       	movw	r8, r18
    1ec6:	5a 01       	movw	r10, r20
    1ec8:	9b 01       	movw	r18, r22
    1eca:	ac 01       	movw	r20, r24
    1ecc:	a7 ea       	ldi	r26, 0xA7	; 167
    1ece:	b1 e4       	ldi	r27, 0x41	; 65
    1ed0:	0e 94 92 11 	call	0x2324	; 0x2324 <__muluhisi3>
    1ed4:	6b 01       	movw	r12, r22
    1ed6:	7c 01       	movw	r14, r24
    1ed8:	ac ee       	ldi	r26, 0xEC	; 236
    1eda:	b4 ef       	ldi	r27, 0xF4	; 244
    1edc:	a5 01       	movw	r20, r10
    1ede:	94 01       	movw	r18, r8
    1ee0:	0e 94 a0 11 	call	0x2340	; 0x2340 <__mulohisi3>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	8c 0d       	add	r24, r12
    1eea:	9d 1d       	adc	r25, r13
    1eec:	ae 1d       	adc	r26, r14
    1eee:	bf 1d       	adc	r27, r15
    1ef0:	b7 ff       	sbrs	r27, 7
    1ef2:	03 c0       	rjmp	.+6      	; 0x1efa <do_rand+0x72>
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	a1 09       	sbc	r26, r1
    1ef8:	b0 48       	sbci	r27, 0x80	; 128
    1efa:	88 83       	st	Y, r24
    1efc:	99 83       	std	Y+1, r25	; 0x01
    1efe:	aa 83       	std	Y+2, r26	; 0x02
    1f00:	bb 83       	std	Y+3, r27	; 0x03
    1f02:	9f 77       	andi	r25, 0x7F	; 127
    1f04:	df 91       	pop	r29
    1f06:	cf 91       	pop	r28
    1f08:	ff 90       	pop	r15
    1f0a:	ef 90       	pop	r14
    1f0c:	df 90       	pop	r13
    1f0e:	cf 90       	pop	r12
    1f10:	bf 90       	pop	r11
    1f12:	af 90       	pop	r10
    1f14:	9f 90       	pop	r9
    1f16:	8f 90       	pop	r8
    1f18:	08 95       	ret

00001f1a <rand_r>:
    1f1a:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <do_rand>
    1f1e:	08 95       	ret

00001f20 <rand>:
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	92 e0       	ldi	r25, 0x02	; 2
    1f24:	0e 94 44 0f 	call	0x1e88	; 0x1e88 <do_rand>
    1f28:	08 95       	ret

00001f2a <srand>:
    1f2a:	a0 e0       	ldi	r26, 0x00	; 0
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	80 93 00 02 	sts	0x0200, r24
    1f32:	90 93 01 02 	sts	0x0201, r25
    1f36:	a0 93 02 02 	sts	0x0202, r26
    1f3a:	b0 93 03 02 	sts	0x0203, r27
    1f3e:	08 95       	ret

00001f40 <__ftoa_engine>:
    1f40:	28 30       	cpi	r18, 0x08	; 8
    1f42:	08 f0       	brcs	.+2      	; 0x1f46 <__ftoa_engine+0x6>
    1f44:	27 e0       	ldi	r18, 0x07	; 7
    1f46:	33 27       	eor	r19, r19
    1f48:	da 01       	movw	r26, r20
    1f4a:	99 0f       	add	r25, r25
    1f4c:	31 1d       	adc	r19, r1
    1f4e:	87 fd       	sbrc	r24, 7
    1f50:	91 60       	ori	r25, 0x01	; 1
    1f52:	00 96       	adiw	r24, 0x00	; 0
    1f54:	61 05       	cpc	r22, r1
    1f56:	71 05       	cpc	r23, r1
    1f58:	39 f4       	brne	.+14     	; 0x1f68 <__ftoa_engine+0x28>
    1f5a:	32 60       	ori	r19, 0x02	; 2
    1f5c:	2e 5f       	subi	r18, 0xFE	; 254
    1f5e:	3d 93       	st	X+, r19
    1f60:	30 e3       	ldi	r19, 0x30	; 48
    1f62:	2a 95       	dec	r18
    1f64:	e1 f7       	brne	.-8      	; 0x1f5e <__ftoa_engine+0x1e>
    1f66:	08 95       	ret
    1f68:	9f 3f       	cpi	r25, 0xFF	; 255
    1f6a:	30 f0       	brcs	.+12     	; 0x1f78 <__ftoa_engine+0x38>
    1f6c:	80 38       	cpi	r24, 0x80	; 128
    1f6e:	71 05       	cpc	r23, r1
    1f70:	61 05       	cpc	r22, r1
    1f72:	09 f0       	breq	.+2      	; 0x1f76 <__ftoa_engine+0x36>
    1f74:	3c 5f       	subi	r19, 0xFC	; 252
    1f76:	3c 5f       	subi	r19, 0xFC	; 252
    1f78:	3d 93       	st	X+, r19
    1f7a:	91 30       	cpi	r25, 0x01	; 1
    1f7c:	08 f0       	brcs	.+2      	; 0x1f80 <__ftoa_engine+0x40>
    1f7e:	80 68       	ori	r24, 0x80	; 128
    1f80:	91 1d       	adc	r25, r1
    1f82:	df 93       	push	r29
    1f84:	cf 93       	push	r28
    1f86:	1f 93       	push	r17
    1f88:	0f 93       	push	r16
    1f8a:	ff 92       	push	r15
    1f8c:	ef 92       	push	r14
    1f8e:	19 2f       	mov	r17, r25
    1f90:	98 7f       	andi	r25, 0xF8	; 248
    1f92:	96 95       	lsr	r25
    1f94:	e9 2f       	mov	r30, r25
    1f96:	96 95       	lsr	r25
    1f98:	96 95       	lsr	r25
    1f9a:	e9 0f       	add	r30, r25
    1f9c:	ff 27       	eor	r31, r31
    1f9e:	ea 56       	subi	r30, 0x6A	; 106
    1fa0:	fe 4f       	sbci	r31, 0xFE	; 254
    1fa2:	99 27       	eor	r25, r25
    1fa4:	33 27       	eor	r19, r19
    1fa6:	ee 24       	eor	r14, r14
    1fa8:	ff 24       	eor	r15, r15
    1faa:	a7 01       	movw	r20, r14
    1fac:	e7 01       	movw	r28, r14
    1fae:	05 90       	lpm	r0, Z+
    1fb0:	08 94       	sec
    1fb2:	07 94       	ror	r0
    1fb4:	28 f4       	brcc	.+10     	; 0x1fc0 <__ftoa_engine+0x80>
    1fb6:	36 0f       	add	r19, r22
    1fb8:	e7 1e       	adc	r14, r23
    1fba:	f8 1e       	adc	r15, r24
    1fbc:	49 1f       	adc	r20, r25
    1fbe:	51 1d       	adc	r21, r1
    1fc0:	66 0f       	add	r22, r22
    1fc2:	77 1f       	adc	r23, r23
    1fc4:	88 1f       	adc	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	06 94       	lsr	r0
    1fca:	a1 f7       	brne	.-24     	; 0x1fb4 <__ftoa_engine+0x74>
    1fcc:	05 90       	lpm	r0, Z+
    1fce:	07 94       	ror	r0
    1fd0:	28 f4       	brcc	.+10     	; 0x1fdc <__ftoa_engine+0x9c>
    1fd2:	e7 0e       	add	r14, r23
    1fd4:	f8 1e       	adc	r15, r24
    1fd6:	49 1f       	adc	r20, r25
    1fd8:	56 1f       	adc	r21, r22
    1fda:	c1 1d       	adc	r28, r1
    1fdc:	77 0f       	add	r23, r23
    1fde:	88 1f       	adc	r24, r24
    1fe0:	99 1f       	adc	r25, r25
    1fe2:	66 1f       	adc	r22, r22
    1fe4:	06 94       	lsr	r0
    1fe6:	a1 f7       	brne	.-24     	; 0x1fd0 <__ftoa_engine+0x90>
    1fe8:	05 90       	lpm	r0, Z+
    1fea:	07 94       	ror	r0
    1fec:	28 f4       	brcc	.+10     	; 0x1ff8 <__ftoa_engine+0xb8>
    1fee:	f8 0e       	add	r15, r24
    1ff0:	49 1f       	adc	r20, r25
    1ff2:	56 1f       	adc	r21, r22
    1ff4:	c7 1f       	adc	r28, r23
    1ff6:	d1 1d       	adc	r29, r1
    1ff8:	88 0f       	add	r24, r24
    1ffa:	99 1f       	adc	r25, r25
    1ffc:	66 1f       	adc	r22, r22
    1ffe:	77 1f       	adc	r23, r23
    2000:	06 94       	lsr	r0
    2002:	a1 f7       	brne	.-24     	; 0x1fec <__ftoa_engine+0xac>
    2004:	05 90       	lpm	r0, Z+
    2006:	07 94       	ror	r0
    2008:	20 f4       	brcc	.+8      	; 0x2012 <__ftoa_engine+0xd2>
    200a:	49 0f       	add	r20, r25
    200c:	56 1f       	adc	r21, r22
    200e:	c7 1f       	adc	r28, r23
    2010:	d8 1f       	adc	r29, r24
    2012:	99 0f       	add	r25, r25
    2014:	66 1f       	adc	r22, r22
    2016:	77 1f       	adc	r23, r23
    2018:	88 1f       	adc	r24, r24
    201a:	06 94       	lsr	r0
    201c:	a9 f7       	brne	.-22     	; 0x2008 <__ftoa_engine+0xc8>
    201e:	84 91       	lpm	r24, Z
    2020:	10 95       	com	r17
    2022:	17 70       	andi	r17, 0x07	; 7
    2024:	41 f0       	breq	.+16     	; 0x2036 <__ftoa_engine+0xf6>
    2026:	d6 95       	lsr	r29
    2028:	c7 95       	ror	r28
    202a:	57 95       	ror	r21
    202c:	47 95       	ror	r20
    202e:	f7 94       	ror	r15
    2030:	e7 94       	ror	r14
    2032:	1a 95       	dec	r17
    2034:	c1 f7       	brne	.-16     	; 0x2026 <__ftoa_engine+0xe6>
    2036:	ec e3       	ldi	r30, 0x3C	; 60
    2038:	f1 e0       	ldi	r31, 0x01	; 1
    203a:	68 94       	set
    203c:	15 90       	lpm	r1, Z+
    203e:	15 91       	lpm	r17, Z+
    2040:	35 91       	lpm	r19, Z+
    2042:	65 91       	lpm	r22, Z+
    2044:	95 91       	lpm	r25, Z+
    2046:	05 90       	lpm	r0, Z+
    2048:	7f e2       	ldi	r23, 0x2F	; 47
    204a:	73 95       	inc	r23
    204c:	e1 18       	sub	r14, r1
    204e:	f1 0a       	sbc	r15, r17
    2050:	43 0b       	sbc	r20, r19
    2052:	56 0b       	sbc	r21, r22
    2054:	c9 0b       	sbc	r28, r25
    2056:	d0 09       	sbc	r29, r0
    2058:	c0 f7       	brcc	.-16     	; 0x204a <__ftoa_engine+0x10a>
    205a:	e1 0c       	add	r14, r1
    205c:	f1 1e       	adc	r15, r17
    205e:	43 1f       	adc	r20, r19
    2060:	56 1f       	adc	r21, r22
    2062:	c9 1f       	adc	r28, r25
    2064:	d0 1d       	adc	r29, r0
    2066:	7e f4       	brtc	.+30     	; 0x2086 <__ftoa_engine+0x146>
    2068:	70 33       	cpi	r23, 0x30	; 48
    206a:	11 f4       	brne	.+4      	; 0x2070 <__ftoa_engine+0x130>
    206c:	8a 95       	dec	r24
    206e:	e6 cf       	rjmp	.-52     	; 0x203c <__ftoa_engine+0xfc>
    2070:	e8 94       	clt
    2072:	01 50       	subi	r16, 0x01	; 1
    2074:	30 f0       	brcs	.+12     	; 0x2082 <__ftoa_engine+0x142>
    2076:	08 0f       	add	r16, r24
    2078:	0a f4       	brpl	.+2      	; 0x207c <__ftoa_engine+0x13c>
    207a:	00 27       	eor	r16, r16
    207c:	02 17       	cp	r16, r18
    207e:	08 f4       	brcc	.+2      	; 0x2082 <__ftoa_engine+0x142>
    2080:	20 2f       	mov	r18, r16
    2082:	23 95       	inc	r18
    2084:	02 2f       	mov	r16, r18
    2086:	7a 33       	cpi	r23, 0x3A	; 58
    2088:	28 f0       	brcs	.+10     	; 0x2094 <__ftoa_engine+0x154>
    208a:	79 e3       	ldi	r23, 0x39	; 57
    208c:	7d 93       	st	X+, r23
    208e:	2a 95       	dec	r18
    2090:	e9 f7       	brne	.-6      	; 0x208c <__ftoa_engine+0x14c>
    2092:	10 c0       	rjmp	.+32     	; 0x20b4 <__ftoa_engine+0x174>
    2094:	7d 93       	st	X+, r23
    2096:	2a 95       	dec	r18
    2098:	89 f6       	brne	.-94     	; 0x203c <__ftoa_engine+0xfc>
    209a:	06 94       	lsr	r0
    209c:	97 95       	ror	r25
    209e:	67 95       	ror	r22
    20a0:	37 95       	ror	r19
    20a2:	17 95       	ror	r17
    20a4:	17 94       	ror	r1
    20a6:	e1 18       	sub	r14, r1
    20a8:	f1 0a       	sbc	r15, r17
    20aa:	43 0b       	sbc	r20, r19
    20ac:	56 0b       	sbc	r21, r22
    20ae:	c9 0b       	sbc	r28, r25
    20b0:	d0 09       	sbc	r29, r0
    20b2:	98 f0       	brcs	.+38     	; 0x20da <__ftoa_engine+0x19a>
    20b4:	23 95       	inc	r18
    20b6:	7e 91       	ld	r23, -X
    20b8:	73 95       	inc	r23
    20ba:	7a 33       	cpi	r23, 0x3A	; 58
    20bc:	08 f0       	brcs	.+2      	; 0x20c0 <__ftoa_engine+0x180>
    20be:	70 e3       	ldi	r23, 0x30	; 48
    20c0:	7c 93       	st	X, r23
    20c2:	20 13       	cpse	r18, r16
    20c4:	b8 f7       	brcc	.-18     	; 0x20b4 <__ftoa_engine+0x174>
    20c6:	7e 91       	ld	r23, -X
    20c8:	70 61       	ori	r23, 0x10	; 16
    20ca:	7d 93       	st	X+, r23
    20cc:	30 f0       	brcs	.+12     	; 0x20da <__ftoa_engine+0x19a>
    20ce:	83 95       	inc	r24
    20d0:	71 e3       	ldi	r23, 0x31	; 49
    20d2:	7d 93       	st	X+, r23
    20d4:	70 e3       	ldi	r23, 0x30	; 48
    20d6:	2a 95       	dec	r18
    20d8:	e1 f7       	brne	.-8      	; 0x20d2 <__ftoa_engine+0x192>
    20da:	11 24       	eor	r1, r1
    20dc:	ef 90       	pop	r14
    20de:	ff 90       	pop	r15
    20e0:	0f 91       	pop	r16
    20e2:	1f 91       	pop	r17
    20e4:	cf 91       	pop	r28
    20e6:	df 91       	pop	r29
    20e8:	99 27       	eor	r25, r25
    20ea:	87 fd       	sbrc	r24, 7
    20ec:	90 95       	com	r25
    20ee:	08 95       	ret

000020f0 <strnlen_P>:
    20f0:	fc 01       	movw	r30, r24
    20f2:	05 90       	lpm	r0, Z+
    20f4:	61 50       	subi	r22, 0x01	; 1
    20f6:	70 40       	sbci	r23, 0x00	; 0
    20f8:	01 10       	cpse	r0, r1
    20fa:	d8 f7       	brcc	.-10     	; 0x20f2 <strnlen_P+0x2>
    20fc:	80 95       	com	r24
    20fe:	90 95       	com	r25
    2100:	8e 0f       	add	r24, r30
    2102:	9f 1f       	adc	r25, r31
    2104:	08 95       	ret

00002106 <memcpy>:
    2106:	fb 01       	movw	r30, r22
    2108:	dc 01       	movw	r26, r24
    210a:	02 c0       	rjmp	.+4      	; 0x2110 <memcpy+0xa>
    210c:	01 90       	ld	r0, Z+
    210e:	0d 92       	st	X+, r0
    2110:	41 50       	subi	r20, 0x01	; 1
    2112:	50 40       	sbci	r21, 0x00	; 0
    2114:	d8 f7       	brcc	.-10     	; 0x210c <memcpy+0x6>
    2116:	08 95       	ret

00002118 <strnlen>:
    2118:	fc 01       	movw	r30, r24
    211a:	61 50       	subi	r22, 0x01	; 1
    211c:	70 40       	sbci	r23, 0x00	; 0
    211e:	01 90       	ld	r0, Z+
    2120:	01 10       	cpse	r0, r1
    2122:	d8 f7       	brcc	.-10     	; 0x211a <strnlen+0x2>
    2124:	80 95       	com	r24
    2126:	90 95       	com	r25
    2128:	8e 0f       	add	r24, r30
    212a:	9f 1f       	adc	r25, r31
    212c:	08 95       	ret

0000212e <fputc>:
    212e:	0f 93       	push	r16
    2130:	1f 93       	push	r17
    2132:	cf 93       	push	r28
    2134:	df 93       	push	r29
    2136:	fb 01       	movw	r30, r22
    2138:	23 81       	ldd	r18, Z+3	; 0x03
    213a:	21 fd       	sbrc	r18, 1
    213c:	03 c0       	rjmp	.+6      	; 0x2144 <fputc+0x16>
    213e:	8f ef       	ldi	r24, 0xFF	; 255
    2140:	9f ef       	ldi	r25, 0xFF	; 255
    2142:	28 c0       	rjmp	.+80     	; 0x2194 <fputc+0x66>
    2144:	22 ff       	sbrs	r18, 2
    2146:	16 c0       	rjmp	.+44     	; 0x2174 <fputc+0x46>
    2148:	46 81       	ldd	r20, Z+6	; 0x06
    214a:	57 81       	ldd	r21, Z+7	; 0x07
    214c:	24 81       	ldd	r18, Z+4	; 0x04
    214e:	35 81       	ldd	r19, Z+5	; 0x05
    2150:	42 17       	cp	r20, r18
    2152:	53 07       	cpc	r21, r19
    2154:	44 f4       	brge	.+16     	; 0x2166 <fputc+0x38>
    2156:	a0 81       	ld	r26, Z
    2158:	b1 81       	ldd	r27, Z+1	; 0x01
    215a:	9d 01       	movw	r18, r26
    215c:	2f 5f       	subi	r18, 0xFF	; 255
    215e:	3f 4f       	sbci	r19, 0xFF	; 255
    2160:	31 83       	std	Z+1, r19	; 0x01
    2162:	20 83       	st	Z, r18
    2164:	8c 93       	st	X, r24
    2166:	26 81       	ldd	r18, Z+6	; 0x06
    2168:	37 81       	ldd	r19, Z+7	; 0x07
    216a:	2f 5f       	subi	r18, 0xFF	; 255
    216c:	3f 4f       	sbci	r19, 0xFF	; 255
    216e:	37 83       	std	Z+7, r19	; 0x07
    2170:	26 83       	std	Z+6, r18	; 0x06
    2172:	10 c0       	rjmp	.+32     	; 0x2194 <fputc+0x66>
    2174:	eb 01       	movw	r28, r22
    2176:	09 2f       	mov	r16, r25
    2178:	18 2f       	mov	r17, r24
    217a:	00 84       	ldd	r0, Z+8	; 0x08
    217c:	f1 85       	ldd	r31, Z+9	; 0x09
    217e:	e0 2d       	mov	r30, r0
    2180:	09 95       	icall
    2182:	89 2b       	or	r24, r25
    2184:	e1 f6       	brne	.-72     	; 0x213e <fputc+0x10>
    2186:	8e 81       	ldd	r24, Y+6	; 0x06
    2188:	9f 81       	ldd	r25, Y+7	; 0x07
    218a:	01 96       	adiw	r24, 0x01	; 1
    218c:	9f 83       	std	Y+7, r25	; 0x07
    218e:	8e 83       	std	Y+6, r24	; 0x06
    2190:	81 2f       	mov	r24, r17
    2192:	90 2f       	mov	r25, r16
    2194:	df 91       	pop	r29
    2196:	cf 91       	pop	r28
    2198:	1f 91       	pop	r17
    219a:	0f 91       	pop	r16
    219c:	08 95       	ret

0000219e <printf>:
    219e:	a0 e0       	ldi	r26, 0x00	; 0
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	e5 ed       	ldi	r30, 0xD5	; 213
    21a4:	f0 e1       	ldi	r31, 0x10	; 16
    21a6:	0c 94 1d 0f 	jmp	0x1e3a	; 0x1e3a <__prologue_saves__+0x20>
    21aa:	ae 01       	movw	r20, r28
    21ac:	4b 5f       	subi	r20, 0xFB	; 251
    21ae:	5f 4f       	sbci	r21, 0xFF	; 255
    21b0:	fa 01       	movw	r30, r20
    21b2:	61 91       	ld	r22, Z+
    21b4:	71 91       	ld	r23, Z+
    21b6:	af 01       	movw	r20, r30
    21b8:	80 91 48 06 	lds	r24, 0x0648
    21bc:	90 91 49 06 	lds	r25, 0x0649
    21c0:	0e 94 6f 0b 	call	0x16de	; 0x16de <vfprintf>
    21c4:	e2 e0       	ldi	r30, 0x02	; 2
    21c6:	0c 94 39 0f 	jmp	0x1e72	; 0x1e72 <__epilogue_restores__+0x20>

000021ca <puts>:
    21ca:	0f 93       	push	r16
    21cc:	1f 93       	push	r17
    21ce:	cf 93       	push	r28
    21d0:	df 93       	push	r29
    21d2:	e0 91 48 06 	lds	r30, 0x0648
    21d6:	f0 91 49 06 	lds	r31, 0x0649
    21da:	23 81       	ldd	r18, Z+3	; 0x03
    21dc:	21 ff       	sbrs	r18, 1
    21de:	1b c0       	rjmp	.+54     	; 0x2216 <__stack+0x17>
    21e0:	8c 01       	movw	r16, r24
    21e2:	d0 e0       	ldi	r29, 0x00	; 0
    21e4:	c0 e0       	ldi	r28, 0x00	; 0
    21e6:	f8 01       	movw	r30, r16
    21e8:	81 91       	ld	r24, Z+
    21ea:	8f 01       	movw	r16, r30
    21ec:	60 91 48 06 	lds	r22, 0x0648
    21f0:	70 91 49 06 	lds	r23, 0x0649
    21f4:	db 01       	movw	r26, r22
    21f6:	18 96       	adiw	r26, 0x08	; 8
    21f8:	ed 91       	ld	r30, X+
    21fa:	fc 91       	ld	r31, X
    21fc:	19 97       	sbiw	r26, 0x09	; 9
    21fe:	88 23       	and	r24, r24
    2200:	31 f0       	breq	.+12     	; 0x220e <__stack+0xf>
    2202:	09 95       	icall
    2204:	89 2b       	or	r24, r25
    2206:	79 f3       	breq	.-34     	; 0x21e6 <puts+0x1c>
    2208:	df ef       	ldi	r29, 0xFF	; 255
    220a:	cf ef       	ldi	r28, 0xFF	; 255
    220c:	ec cf       	rjmp	.-40     	; 0x21e6 <puts+0x1c>
    220e:	8a e0       	ldi	r24, 0x0A	; 10
    2210:	09 95       	icall
    2212:	89 2b       	or	r24, r25
    2214:	19 f0       	breq	.+6      	; 0x221c <__stack+0x1d>
    2216:	8f ef       	ldi	r24, 0xFF	; 255
    2218:	9f ef       	ldi	r25, 0xFF	; 255
    221a:	02 c0       	rjmp	.+4      	; 0x2220 <__stack+0x21>
    221c:	8d 2f       	mov	r24, r29
    221e:	9c 2f       	mov	r25, r28
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	1f 91       	pop	r17
    2226:	0f 91       	pop	r16
    2228:	08 95       	ret

0000222a <__ultoa_invert>:
    222a:	fa 01       	movw	r30, r20
    222c:	aa 27       	eor	r26, r26
    222e:	28 30       	cpi	r18, 0x08	; 8
    2230:	51 f1       	breq	.+84     	; 0x2286 <__ultoa_invert+0x5c>
    2232:	20 31       	cpi	r18, 0x10	; 16
    2234:	81 f1       	breq	.+96     	; 0x2296 <__ultoa_invert+0x6c>
    2236:	e8 94       	clt
    2238:	6f 93       	push	r22
    223a:	6e 7f       	andi	r22, 0xFE	; 254
    223c:	6e 5f       	subi	r22, 0xFE	; 254
    223e:	7f 4f       	sbci	r23, 0xFF	; 255
    2240:	8f 4f       	sbci	r24, 0xFF	; 255
    2242:	9f 4f       	sbci	r25, 0xFF	; 255
    2244:	af 4f       	sbci	r26, 0xFF	; 255
    2246:	b1 e0       	ldi	r27, 0x01	; 1
    2248:	3e d0       	rcall	.+124    	; 0x22c6 <__ultoa_invert+0x9c>
    224a:	b4 e0       	ldi	r27, 0x04	; 4
    224c:	3c d0       	rcall	.+120    	; 0x22c6 <__ultoa_invert+0x9c>
    224e:	67 0f       	add	r22, r23
    2250:	78 1f       	adc	r23, r24
    2252:	89 1f       	adc	r24, r25
    2254:	9a 1f       	adc	r25, r26
    2256:	a1 1d       	adc	r26, r1
    2258:	68 0f       	add	r22, r24
    225a:	79 1f       	adc	r23, r25
    225c:	8a 1f       	adc	r24, r26
    225e:	91 1d       	adc	r25, r1
    2260:	a1 1d       	adc	r26, r1
    2262:	6a 0f       	add	r22, r26
    2264:	71 1d       	adc	r23, r1
    2266:	81 1d       	adc	r24, r1
    2268:	91 1d       	adc	r25, r1
    226a:	a1 1d       	adc	r26, r1
    226c:	20 d0       	rcall	.+64     	; 0x22ae <__ultoa_invert+0x84>
    226e:	09 f4       	brne	.+2      	; 0x2272 <__ultoa_invert+0x48>
    2270:	68 94       	set
    2272:	3f 91       	pop	r19
    2274:	2a e0       	ldi	r18, 0x0A	; 10
    2276:	26 9f       	mul	r18, r22
    2278:	11 24       	eor	r1, r1
    227a:	30 19       	sub	r19, r0
    227c:	30 5d       	subi	r19, 0xD0	; 208
    227e:	31 93       	st	Z+, r19
    2280:	de f6       	brtc	.-74     	; 0x2238 <__ultoa_invert+0xe>
    2282:	cf 01       	movw	r24, r30
    2284:	08 95       	ret
    2286:	46 2f       	mov	r20, r22
    2288:	47 70       	andi	r20, 0x07	; 7
    228a:	40 5d       	subi	r20, 0xD0	; 208
    228c:	41 93       	st	Z+, r20
    228e:	b3 e0       	ldi	r27, 0x03	; 3
    2290:	0f d0       	rcall	.+30     	; 0x22b0 <__ultoa_invert+0x86>
    2292:	c9 f7       	brne	.-14     	; 0x2286 <__ultoa_invert+0x5c>
    2294:	f6 cf       	rjmp	.-20     	; 0x2282 <__ultoa_invert+0x58>
    2296:	46 2f       	mov	r20, r22
    2298:	4f 70       	andi	r20, 0x0F	; 15
    229a:	40 5d       	subi	r20, 0xD0	; 208
    229c:	4a 33       	cpi	r20, 0x3A	; 58
    229e:	18 f0       	brcs	.+6      	; 0x22a6 <__ultoa_invert+0x7c>
    22a0:	49 5d       	subi	r20, 0xD9	; 217
    22a2:	31 fd       	sbrc	r19, 1
    22a4:	40 52       	subi	r20, 0x20	; 32
    22a6:	41 93       	st	Z+, r20
    22a8:	02 d0       	rcall	.+4      	; 0x22ae <__ultoa_invert+0x84>
    22aa:	a9 f7       	brne	.-22     	; 0x2296 <__ultoa_invert+0x6c>
    22ac:	ea cf       	rjmp	.-44     	; 0x2282 <__ultoa_invert+0x58>
    22ae:	b4 e0       	ldi	r27, 0x04	; 4
    22b0:	a6 95       	lsr	r26
    22b2:	97 95       	ror	r25
    22b4:	87 95       	ror	r24
    22b6:	77 95       	ror	r23
    22b8:	67 95       	ror	r22
    22ba:	ba 95       	dec	r27
    22bc:	c9 f7       	brne	.-14     	; 0x22b0 <__ultoa_invert+0x86>
    22be:	00 97       	sbiw	r24, 0x00	; 0
    22c0:	61 05       	cpc	r22, r1
    22c2:	71 05       	cpc	r23, r1
    22c4:	08 95       	ret
    22c6:	9b 01       	movw	r18, r22
    22c8:	ac 01       	movw	r20, r24
    22ca:	0a 2e       	mov	r0, r26
    22cc:	06 94       	lsr	r0
    22ce:	57 95       	ror	r21
    22d0:	47 95       	ror	r20
    22d2:	37 95       	ror	r19
    22d4:	27 95       	ror	r18
    22d6:	ba 95       	dec	r27
    22d8:	c9 f7       	brne	.-14     	; 0x22cc <__ultoa_invert+0xa2>
    22da:	62 0f       	add	r22, r18
    22dc:	73 1f       	adc	r23, r19
    22de:	84 1f       	adc	r24, r20
    22e0:	95 1f       	adc	r25, r21
    22e2:	a0 1d       	adc	r26, r0
    22e4:	08 95       	ret

000022e6 <__divmodsi4>:
    22e6:	05 2e       	mov	r0, r21
    22e8:	97 fb       	bst	r25, 7
    22ea:	1e f4       	brtc	.+6      	; 0x22f2 <__divmodsi4+0xc>
    22ec:	00 94       	com	r0
    22ee:	0e 94 8a 11 	call	0x2314	; 0x2314 <__negsi2>
    22f2:	57 fd       	sbrc	r21, 7
    22f4:	07 d0       	rcall	.+14     	; 0x2304 <__divmodsi4_neg2>
    22f6:	0e 94 eb 0e 	call	0x1dd6	; 0x1dd6 <__udivmodsi4>
    22fa:	07 fc       	sbrc	r0, 7
    22fc:	03 d0       	rcall	.+6      	; 0x2304 <__divmodsi4_neg2>
    22fe:	4e f4       	brtc	.+18     	; 0x2312 <__divmodsi4_exit>
    2300:	0c 94 8a 11 	jmp	0x2314	; 0x2314 <__negsi2>

00002304 <__divmodsi4_neg2>:
    2304:	50 95       	com	r21
    2306:	40 95       	com	r20
    2308:	30 95       	com	r19
    230a:	21 95       	neg	r18
    230c:	3f 4f       	sbci	r19, 0xFF	; 255
    230e:	4f 4f       	sbci	r20, 0xFF	; 255
    2310:	5f 4f       	sbci	r21, 0xFF	; 255

00002312 <__divmodsi4_exit>:
    2312:	08 95       	ret

00002314 <__negsi2>:
    2314:	90 95       	com	r25
    2316:	80 95       	com	r24
    2318:	70 95       	com	r23
    231a:	61 95       	neg	r22
    231c:	7f 4f       	sbci	r23, 0xFF	; 255
    231e:	8f 4f       	sbci	r24, 0xFF	; 255
    2320:	9f 4f       	sbci	r25, 0xFF	; 255
    2322:	08 95       	ret

00002324 <__muluhisi3>:
    2324:	0e 94 a5 11 	call	0x234a	; 0x234a <__umulhisi3>
    2328:	a5 9f       	mul	r26, r21
    232a:	90 0d       	add	r25, r0
    232c:	b4 9f       	mul	r27, r20
    232e:	90 0d       	add	r25, r0
    2330:	a4 9f       	mul	r26, r20
    2332:	80 0d       	add	r24, r0
    2334:	91 1d       	adc	r25, r1
    2336:	11 24       	eor	r1, r1
    2338:	08 95       	ret

0000233a <__mulshisi3>:
    233a:	b7 ff       	sbrs	r27, 7
    233c:	0c 94 92 11 	jmp	0x2324	; 0x2324 <__muluhisi3>

00002340 <__mulohisi3>:
    2340:	0e 94 92 11 	call	0x2324	; 0x2324 <__muluhisi3>
    2344:	82 1b       	sub	r24, r18
    2346:	93 0b       	sbc	r25, r19
    2348:	08 95       	ret

0000234a <__umulhisi3>:
    234a:	a2 9f       	mul	r26, r18
    234c:	b0 01       	movw	r22, r0
    234e:	b3 9f       	mul	r27, r19
    2350:	c0 01       	movw	r24, r0
    2352:	a3 9f       	mul	r26, r19
    2354:	70 0d       	add	r23, r0
    2356:	81 1d       	adc	r24, r1
    2358:	11 24       	eor	r1, r1
    235a:	91 1d       	adc	r25, r1
    235c:	b2 9f       	mul	r27, r18
    235e:	70 0d       	add	r23, r0
    2360:	81 1d       	adc	r24, r1
    2362:	11 24       	eor	r1, r1
    2364:	91 1d       	adc	r25, r1
    2366:	08 95       	ret

00002368 <_exit>:
    2368:	f8 94       	cli

0000236a <__stop_program>:
    236a:	ff cf       	rjmp	.-2      	; 0x236a <__stop_program>
