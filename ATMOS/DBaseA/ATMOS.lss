
ATMOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000057a  00800200  00006246  000062da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006246  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000063a  0080077a  0080077a  00006854  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00006854  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  000068b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000980  00000000  00000000  000068f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000da6d  00000000  00000000  00007274  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003744  00000000  00000000  00014ce1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006194  00000000  00000000  00018425  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001df4  00000000  00000000  0001e5bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000035d3  00000000  00000000  000203b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000078f4  00000000  00000000  00023983  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000008c8  00000000  00000000  0002b277  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	21 c1       	rjmp	.+578    	; 0x244 <__ctors_end>
       2:	00 00       	nop
       4:	3f c1       	rjmp	.+638    	; 0x284 <__bad_interrupt>
       6:	00 00       	nop
       8:	3d c1       	rjmp	.+634    	; 0x284 <__bad_interrupt>
       a:	00 00       	nop
       c:	3b c1       	rjmp	.+630    	; 0x284 <__bad_interrupt>
       e:	00 00       	nop
      10:	39 c1       	rjmp	.+626    	; 0x284 <__bad_interrupt>
      12:	00 00       	nop
      14:	37 c1       	rjmp	.+622    	; 0x284 <__bad_interrupt>
      16:	00 00       	nop
      18:	35 c1       	rjmp	.+618    	; 0x284 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	33 c1       	rjmp	.+614    	; 0x284 <__bad_interrupt>
      1e:	00 00       	nop
      20:	31 c1       	rjmp	.+610    	; 0x284 <__bad_interrupt>
      22:	00 00       	nop
      24:	2f c1       	rjmp	.+606    	; 0x284 <__bad_interrupt>
      26:	00 00       	nop
      28:	2d c1       	rjmp	.+602    	; 0x284 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	2b c1       	rjmp	.+598    	; 0x284 <__bad_interrupt>
      2e:	00 00       	nop
      30:	29 c1       	rjmp	.+594    	; 0x284 <__bad_interrupt>
      32:	00 00       	nop
      34:	27 c1       	rjmp	.+590    	; 0x284 <__bad_interrupt>
      36:	00 00       	nop
      38:	25 c1       	rjmp	.+586    	; 0x284 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	0c 94 08 16 	jmp	0x2c10	; 0x2c10 <__vector_15>
      40:	21 c1       	rjmp	.+578    	; 0x284 <__bad_interrupt>
      42:	00 00       	nop
      44:	1f c1       	rjmp	.+574    	; 0x284 <__bad_interrupt>
      46:	00 00       	nop
      48:	1d c1       	rjmp	.+570    	; 0x284 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	1b c1       	rjmp	.+566    	; 0x284 <__bad_interrupt>
      4e:	00 00       	nop
      50:	19 c1       	rjmp	.+562    	; 0x284 <__bad_interrupt>
      52:	00 00       	nop
      54:	17 c1       	rjmp	.+558    	; 0x284 <__bad_interrupt>
      56:	00 00       	nop
      58:	15 c1       	rjmp	.+554    	; 0x284 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	13 c1       	rjmp	.+550    	; 0x284 <__bad_interrupt>
      5e:	00 00       	nop
      60:	11 c1       	rjmp	.+546    	; 0x284 <__bad_interrupt>
      62:	00 00       	nop
      64:	0f c1       	rjmp	.+542    	; 0x284 <__bad_interrupt>
      66:	00 00       	nop
      68:	0d c1       	rjmp	.+538    	; 0x284 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	0b c1       	rjmp	.+534    	; 0x284 <__bad_interrupt>
      6e:	00 00       	nop
      70:	09 c1       	rjmp	.+530    	; 0x284 <__bad_interrupt>
      72:	00 00       	nop
      74:	07 c1       	rjmp	.+526    	; 0x284 <__bad_interrupt>
      76:	00 00       	nop
      78:	05 c1       	rjmp	.+522    	; 0x284 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	03 c1       	rjmp	.+518    	; 0x284 <__bad_interrupt>
      7e:	00 00       	nop
      80:	01 c1       	rjmp	.+514    	; 0x284 <__bad_interrupt>
      82:	00 00       	nop
      84:	ff c0       	rjmp	.+510    	; 0x284 <__bad_interrupt>
      86:	00 00       	nop
      88:	fd c0       	rjmp	.+506    	; 0x284 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	fb c0       	rjmp	.+502    	; 0x284 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f9 c0       	rjmp	.+498    	; 0x284 <__bad_interrupt>
      92:	00 00       	nop
      94:	f7 c0       	rjmp	.+494    	; 0x284 <__bad_interrupt>
      96:	00 00       	nop
      98:	f5 c0       	rjmp	.+490    	; 0x284 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	f3 c0       	rjmp	.+486    	; 0x284 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	f1 c0       	rjmp	.+482    	; 0x284 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	ef c0       	rjmp	.+478    	; 0x284 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	0c 94 a8 19 	jmp	0x3350	; 0x3350 <__vector_42>
      ac:	eb c0       	rjmp	.+470    	; 0x284 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e9 c0       	rjmp	.+466    	; 0x284 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e7 c0       	rjmp	.+462    	; 0x284 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	e5 c0       	rjmp	.+458    	; 0x284 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	e3 c0       	rjmp	.+454    	; 0x284 <__bad_interrupt>
      be:	00 00       	nop
      c0:	e1 c0       	rjmp	.+450    	; 0x284 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	df c0       	rjmp	.+446    	; 0x284 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	dd c0       	rjmp	.+442    	; 0x284 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	db c0       	rjmp	.+438    	; 0x284 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d9 c0       	rjmp	.+434    	; 0x284 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d7 c0       	rjmp	.+430    	; 0x284 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	d5 c0       	rjmp	.+426    	; 0x284 <__bad_interrupt>
      da:	00 00       	nop
      dc:	d3 c0       	rjmp	.+422    	; 0x284 <__bad_interrupt>
      de:	00 00       	nop
      e0:	d1 c0       	rjmp	.+418    	; 0x284 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	cf c0       	rjmp	.+414    	; 0x284 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	cd c0       	rjmp	.+410    	; 0x284 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	cb c0       	rjmp	.+406    	; 0x284 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c9 c0       	rjmp	.+402    	; 0x284 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	c7 c0       	rjmp	.+398    	; 0x284 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	c5 c0       	rjmp	.+394    	; 0x284 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	c3 c0       	rjmp	.+390    	; 0x284 <__bad_interrupt>
      fe:	00 00       	nop
     100:	c1 c0       	rjmp	.+386    	; 0x284 <__bad_interrupt>
     102:	00 00       	nop
     104:	bf c0       	rjmp	.+382    	; 0x284 <__bad_interrupt>
     106:	00 00       	nop
     108:	bd c0       	rjmp	.+378    	; 0x284 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	bb c0       	rjmp	.+374    	; 0x284 <__bad_interrupt>
     10e:	00 00       	nop
     110:	b9 c0       	rjmp	.+370    	; 0x284 <__bad_interrupt>
     112:	00 00       	nop
     114:	b7 c0       	rjmp	.+366    	; 0x284 <__bad_interrupt>
     116:	00 00       	nop
     118:	b5 c0       	rjmp	.+362    	; 0x284 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	b3 c0       	rjmp	.+358    	; 0x284 <__bad_interrupt>
     11e:	00 00       	nop
     120:	b1 c0       	rjmp	.+354    	; 0x284 <__bad_interrupt>
     122:	00 00       	nop
     124:	af c0       	rjmp	.+350    	; 0x284 <__bad_interrupt>
     126:	00 00       	nop
     128:	ad c0       	rjmp	.+346    	; 0x284 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	ab c0       	rjmp	.+342    	; 0x284 <__bad_interrupt>
     12e:	00 00       	nop
     130:	a9 c0       	rjmp	.+338    	; 0x284 <__bad_interrupt>
     132:	00 00       	nop
     134:	70 0f       	add	r23, r16
     136:	5c 0f       	add	r21, r28
     138:	61 0f       	add	r22, r17
     13a:	5c 0f       	add	r21, r28
     13c:	66 0f       	add	r22, r22
     13e:	5c 0f       	add	r21, r28
     140:	6b 0f       	add	r22, r27

00000142 <__trampolines_end>:
     142:	6e 61       	ori	r22, 0x1E	; 30
     144:	6e 00       	.word	0x006e	; ????

00000146 <__c.2177>:
     146:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     156:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     166:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     176:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     186:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     196:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     1a6:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1b6:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1c6:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1d6:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1e6:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1f6:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     206:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     216:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     226:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     236:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000244 <__ctors_end>:
     244:	11 24       	eor	r1, r1
     246:	1f be       	out	0x3f, r1	; 63
     248:	cf ef       	ldi	r28, 0xFF	; 255
     24a:	d1 e8       	ldi	r29, 0x81	; 129
     24c:	de bf       	out	0x3e, r29	; 62
     24e:	cd bf       	out	0x3d, r28	; 61
     250:	00 e0       	ldi	r16, 0x00	; 0
     252:	0c bf       	out	0x3c, r16	; 60

00000254 <__do_copy_data>:
     254:	17 e0       	ldi	r17, 0x07	; 7
     256:	a0 e0       	ldi	r26, 0x00	; 0
     258:	b2 e0       	ldi	r27, 0x02	; 2
     25a:	e6 e4       	ldi	r30, 0x46	; 70
     25c:	f2 e6       	ldi	r31, 0x62	; 98
     25e:	00 e0       	ldi	r16, 0x00	; 0
     260:	0b bf       	out	0x3b, r16	; 59
     262:	02 c0       	rjmp	.+4      	; 0x268 <__do_copy_data+0x14>
     264:	07 90       	elpm	r0, Z+
     266:	0d 92       	st	X+, r0
     268:	aa 37       	cpi	r26, 0x7A	; 122
     26a:	b1 07       	cpc	r27, r17
     26c:	d9 f7       	brne	.-10     	; 0x264 <__do_copy_data+0x10>

0000026e <__do_clear_bss>:
     26e:	2d e0       	ldi	r18, 0x0D	; 13
     270:	aa e7       	ldi	r26, 0x7A	; 122
     272:	b7 e0       	ldi	r27, 0x07	; 7
     274:	01 c0       	rjmp	.+2      	; 0x278 <.do_clear_bss_start>

00000276 <.do_clear_bss_loop>:
     276:	1d 92       	st	X+, r1

00000278 <.do_clear_bss_start>:
     278:	a4 3b       	cpi	r26, 0xB4	; 180
     27a:	b2 07       	cpc	r27, r18
     27c:	e1 f7       	brne	.-8      	; 0x276 <.do_clear_bss_loop>
     27e:	94 d0       	rcall	.+296    	; 0x3a8 <main>
     280:	0c 94 21 31 	jmp	0x6242	; 0x6242 <_exit>

00000284 <__bad_interrupt>:
     284:	bd ce       	rjmp	.-646    	; 0x0 <__vectors>

00000286 <init_parameter>:
	/* if there are some other parameters other than devices' and sensors', update them below as well */
}

/* init all devices' parameters */
void init_parameter(GlobalParameter * globalPara)
{
     286:	af 92       	push	r10
     288:	bf 92       	push	r11
     28a:	cf 92       	push	r12
     28c:	df 92       	push	r13
     28e:	ef 92       	push	r14
     290:	ff 92       	push	r15
     292:	0f 93       	push	r16
     294:	1f 93       	push	r17
     296:	cf 93       	push	r28
     298:	df 93       	push	r29
     29a:	5c 01       	movw	r10, r24
     29c:	a6 e3       	ldi	r26, 0x36	; 54
     29e:	b2 e0       	ldi	r27, 0x02	; 2
     2a0:	fc 01       	movw	r30, r24
     2a2:	b0 96       	adiw	r30, 0x20	; 32
     2a4:	2a e2       	ldi	r18, 0x2A	; 42
     2a6:	32 e0       	ldi	r19, 0x02	; 2
     2a8:	8e e1       	ldi	r24, 0x1E	; 30
     2aa:	92 e0       	ldi	r25, 0x02	; 2
     2ac:	02 e4       	ldi	r16, 0x42	; 66
     2ae:	12 e0       	ldi	r17, 0x02	; 2
	/* init all sensors' parameters */
	for( int i = 0 ; i < SensorListEnd ; ++i )
	{
		//printf("%d\t%d\t%d\t%d\n",SensorInitStartTimeList[i],SENSOR_INIT_PERIOD,SensorCheckCodeList[i],SensorNumDataList[i]);
		globalPara->SensorList[i].StartTime = SensorInitStartTimeList[i];
		globalPara->SensorList[i].ExecutePeriod = SENSOR_INIT_PERIOD;
     2b0:	0f 2e       	mov	r0, r31
     2b2:	f0 ee       	ldi	r31, 0xE0	; 224
     2b4:	cf 2e       	mov	r12, r31
     2b6:	fe e2       	ldi	r31, 0x2E	; 46
     2b8:	df 2e       	mov	r13, r31
     2ba:	e1 2c       	mov	r14, r1
     2bc:	f1 2c       	mov	r15, r1
     2be:	f0 2d       	mov	r31, r0
{
	/* init all sensors' parameters */
	for( int i = 0 ; i < SensorListEnd ; ++i )
	{
		//printf("%d\t%d\t%d\t%d\n",SensorInitStartTimeList[i],SENSOR_INIT_PERIOD,SensorCheckCodeList[i],SensorNumDataList[i]);
		globalPara->SensorList[i].StartTime = SensorInitStartTimeList[i];
     2c0:	4d 91       	ld	r20, X+
     2c2:	5d 91       	ld	r21, X+
     2c4:	6d 91       	ld	r22, X+
     2c6:	7d 91       	ld	r23, X+
     2c8:	40 83       	st	Z, r20
     2ca:	51 83       	std	Z+1, r21	; 0x01
     2cc:	62 83       	std	Z+2, r22	; 0x02
     2ce:	73 83       	std	Z+3, r23	; 0x03
		globalPara->SensorList[i].ExecutePeriod = SENSOR_INIT_PERIOD;
     2d0:	c4 82       	std	Z+4, r12	; 0x04
     2d2:	d5 82       	std	Z+5, r13	; 0x05
     2d4:	e6 82       	std	Z+6, r14	; 0x06
     2d6:	f7 82       	std	Z+7, r15	; 0x07
		globalPara->SensorList[i].CheckCode = SensorCheckCodeList[i];
     2d8:	e9 01       	movw	r28, r18
     2da:	49 91       	ld	r20, Y+
     2dc:	59 91       	ld	r21, Y+
     2de:	69 91       	ld	r22, Y+
     2e0:	79 91       	ld	r23, Y+
     2e2:	9e 01       	movw	r18, r28
     2e4:	44 87       	std	Z+12, r20	; 0x0c
     2e6:	55 87       	std	Z+13, r21	; 0x0d
     2e8:	66 87       	std	Z+14, r22	; 0x0e
     2ea:	77 87       	std	Z+15, r23	; 0x0f
		globalPara->SensorList[i].NumOfData = SensorNumDataList[i];
     2ec:	ec 01       	movw	r28, r24
     2ee:	49 91       	ld	r20, Y+
     2f0:	59 91       	ld	r21, Y+
     2f2:	69 91       	ld	r22, Y+
     2f4:	79 91       	ld	r23, Y+
     2f6:	ce 01       	movw	r24, r28
     2f8:	40 87       	std	Z+8, r20	; 0x08
     2fa:	51 87       	std	Z+9, r21	; 0x09
     2fc:	62 87       	std	Z+10, r22	; 0x0a
     2fe:	73 87       	std	Z+11, r23	; 0x0b
     300:	70 96       	adiw	r30, 0x10	; 16

/* init all devices' parameters */
void init_parameter(GlobalParameter * globalPara)
{
	/* init all sensors' parameters */
	for( int i = 0 ; i < SensorListEnd ; ++i )
     302:	a0 17       	cp	r26, r16
     304:	b1 07       	cpc	r27, r17
     306:	e1 f6       	brne	.-72     	; 0x2c0 <init_parameter+0x3a>
	
	/* init all devices' parameters */
	for( int i = 0 ; i < DeviceListEnd ; ++i )
	{
		//printf("%d\t%d\t%d\t%d\n",DeviceInitStartTimeList[i],DeviceInitPeriodList[i],DeviceCheckCodeList[i],0);
		globalPara->DeviceList[i].StartTime = DeviceInitStartTimeList[i];
     308:	8e e0       	ldi	r24, 0x0E	; 14
     30a:	92 e0       	ldi	r25, 0x02	; 2
     30c:	fc 01       	movw	r30, r24
     30e:	40 81       	ld	r20, Z
     310:	51 81       	ldd	r21, Z+1	; 0x01
     312:	62 81       	ldd	r22, Z+2	; 0x02
     314:	73 81       	ldd	r23, Z+3	; 0x03
     316:	e5 01       	movw	r28, r10
     318:	48 83       	st	Y, r20
     31a:	59 83       	std	Y+1, r21	; 0x01
     31c:	6a 83       	std	Y+2, r22	; 0x02
     31e:	7b 83       	std	Y+3, r23	; 0x03
		globalPara->DeviceList[i].ExecutePeriod = DeviceInitPeriodList[i];
     320:	a6 e1       	ldi	r26, 0x16	; 22
     322:	b2 e0       	ldi	r27, 0x02	; 2
     324:	4d 91       	ld	r20, X+
     326:	5d 91       	ld	r21, X+
     328:	6d 91       	ld	r22, X+
     32a:	7c 91       	ld	r23, X
     32c:	13 97       	sbiw	r26, 0x03	; 3
     32e:	4c 83       	std	Y+4, r20	; 0x04
     330:	5d 83       	std	Y+5, r21	; 0x05
     332:	6e 83       	std	Y+6, r22	; 0x06
     334:	7f 83       	std	Y+7, r23	; 0x07
		globalPara->DeviceList[i].CheckCode = DeviceCheckCodeList[i]; 
     336:	e6 e0       	ldi	r30, 0x06	; 6
     338:	f2 e0       	ldi	r31, 0x02	; 2
     33a:	40 81       	ld	r20, Z
     33c:	51 81       	ldd	r21, Z+1	; 0x01
     33e:	62 81       	ldd	r22, Z+2	; 0x02
     340:	73 81       	ldd	r23, Z+3	; 0x03
     342:	4c 87       	std	Y+12, r20	; 0x0c
     344:	5d 87       	std	Y+13, r21	; 0x0d
     346:	6e 87       	std	Y+14, r22	; 0x0e
     348:	7f 87       	std	Y+15, r23	; 0x0f
		globalPara->DeviceList[i].NumOfData = 0;
     34a:	18 86       	std	Y+8, r1	; 0x08
     34c:	19 86       	std	Y+9, r1	; 0x09
     34e:	1a 86       	std	Y+10, r1	; 0x0a
     350:	1b 86       	std	Y+11, r1	; 0x0b
	
	/* init all devices' parameters */
	for( int i = 0 ; i < DeviceListEnd ; ++i )
	{
		//printf("%d\t%d\t%d\t%d\n",DeviceInitStartTimeList[i],DeviceInitPeriodList[i],DeviceCheckCodeList[i],0);
		globalPara->DeviceList[i].StartTime = DeviceInitStartTimeList[i];
     352:	ec 01       	movw	r28, r24
     354:	4c 81       	ldd	r20, Y+4	; 0x04
     356:	5d 81       	ldd	r21, Y+5	; 0x05
     358:	6e 81       	ldd	r22, Y+6	; 0x06
     35a:	7f 81       	ldd	r23, Y+7	; 0x07
     35c:	e5 01       	movw	r28, r10
     35e:	48 8b       	std	Y+16, r20	; 0x10
     360:	59 8b       	std	Y+17, r21	; 0x11
     362:	6a 8b       	std	Y+18, r22	; 0x12
     364:	7b 8b       	std	Y+19, r23	; 0x13
		globalPara->DeviceList[i].ExecutePeriod = DeviceInitPeriodList[i];
     366:	14 96       	adiw	r26, 0x04	; 4
     368:	8d 91       	ld	r24, X+
     36a:	9d 91       	ld	r25, X+
     36c:	0d 90       	ld	r0, X+
     36e:	bc 91       	ld	r27, X
     370:	a0 2d       	mov	r26, r0
     372:	8c 8b       	std	Y+20, r24	; 0x14
     374:	9d 8b       	std	Y+21, r25	; 0x15
     376:	ae 8b       	std	Y+22, r26	; 0x16
     378:	bf 8b       	std	Y+23, r27	; 0x17
		globalPara->DeviceList[i].CheckCode = DeviceCheckCodeList[i]; 
     37a:	84 81       	ldd	r24, Z+4	; 0x04
     37c:	95 81       	ldd	r25, Z+5	; 0x05
     37e:	a6 81       	ldd	r26, Z+6	; 0x06
     380:	b7 81       	ldd	r27, Z+7	; 0x07
     382:	8c 8f       	std	Y+28, r24	; 0x1c
     384:	9d 8f       	std	Y+29, r25	; 0x1d
     386:	ae 8f       	std	Y+30, r26	; 0x1e
     388:	bf 8f       	std	Y+31, r27	; 0x1f
		globalPara->DeviceList[i].NumOfData = 0;
     38a:	18 8e       	std	Y+24, r1	; 0x18
     38c:	19 8e       	std	Y+25, r1	; 0x19
     38e:	1a 8e       	std	Y+26, r1	; 0x1a
     390:	1b 8e       	std	Y+27, r1	; 0x1b
	}
}
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	1f 91       	pop	r17
     398:	0f 91       	pop	r16
     39a:	ff 90       	pop	r15
     39c:	ef 90       	pop	r14
     39e:	df 90       	pop	r13
     3a0:	cf 90       	pop	r12
     3a2:	bf 90       	pop	r11
     3a4:	af 90       	pop	r10
     3a6:	08 95       	ret

000003a8 <main>:
	// load_new_sensor( 4, 4, (BaseSensor *)Si7020_ptr, 0 );
}

int main(void)
{
	SYS_Init();
     3a8:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <SYS_Init>
tm cur_time;
GlobalParameter GP;

/* TODO : clean up these messy init */
static void APP_Init(void){
	PWR_Init();
     3ac:	0e 94 7f 17 	call	0x2efe	; 0x2efe <PWR_Init>
	PWR_TurnOn5V();
     3b0:	0e 94 83 17 	call	0x2f06	; 0x2f06 <PWR_TurnOn5V>
	USART0_Init(9600);
     3b4:	60 e8       	ldi	r22, 0x80	; 128
     3b6:	75 e2       	ldi	r23, 0x25	; 37
     3b8:	80 e0       	ldi	r24, 0x00	; 0
     3ba:	90 e0       	ldi	r25, 0x00	; 0
     3bc:	0e 94 3e 19 	call	0x327c	; 0x327c <USART0_Init>
	DDRB |= 0b00010000;
     3c0:	24 9a       	sbi	0x04, 4	; 4
	DDRE |= 0b00001000;
     3c2:	6b 9a       	sbi	0x0d, 3	; 13
	PORTE|= 0b00001000;
     3c4:	73 9a       	sbi	0x0e, 3	; 14
	TWI_Init(10000);
     3c6:	60 e1       	ldi	r22, 0x10	; 16
     3c8:	77 e2       	ldi	r23, 0x27	; 39
     3ca:	80 e0       	ldi	r24, 0x00	; 0
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	0e 94 67 18 	call	0x30ce	; 0x30ce <TWI_Init>
	ADC_Init();
     3d2:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <ADC_Init>
	printf("BMP280 Status %i\n", BMP280_Init());
     3d6:	0e 94 43 20 	call	0x4086	; 0x4086 <BMP280_Init>
     3da:	9f 93       	push	r25
     3dc:	8f 93       	push	r24
     3de:	86 e8       	ldi	r24, 0x86	; 134
     3e0:	92 e0       	ldi	r25, 0x02	; 2
     3e2:	9f 93       	push	r25
     3e4:	8f 93       	push	r24
     3e6:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
	BMP280_SetOversampling(4);
     3ea:	84 e0       	ldi	r24, 0x04	; 4
     3ec:	90 e0       	ldi	r25, 0x00	; 0
     3ee:	0e 94 72 22 	call	0x44e4	; 0x44e4 <BMP280_SetOversampling>
	spi_init_master(); // initialize SPI interface
     3f2:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <spi_init_master>
	//SPI_SlaveInit();
	SensorDataCount = 0;
     3f6:	10 92 1e 0d 	sts	0x0D1E, r1
     3fa:	10 92 1d 0d 	sts	0x0D1D, r1
}

static void DEVICE_Init(void){

	init_parameter(&GP);
     3fe:	89 e2       	ldi	r24, 0x29	; 41
     400:	9d e0       	ldi	r25, 0x0D	; 13
     402:	41 df       	rcall	.-382    	; 0x286 <init_parameter>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     404:	8f e8       	ldi	r24, 0x8F	; 143
     406:	91 e0       	ldi	r25, 0x01	; 1
     408:	01 97       	sbiw	r24, 0x01	; 1
     40a:	f1 f7       	brne	.-4      	; 0x408 <main+0x60>
     40c:	00 c0       	rjmp	.+0      	; 0x40e <main+0x66>
     40e:	00 00       	nop
	delay_us(100);

	init_timeoutq();
     410:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <init_timeoutq>
     414:	8f e8       	ldi	r24, 0x8F	; 143
     416:	91 e0       	ldi	r25, 0x01	; 1
     418:	01 97       	sbiw	r24, 0x01	; 1
     41a:	f1 f7       	brne	.-4      	; 0x418 <main+0x70>
     41c:	00 c0       	rjmp	.+0      	; 0x41e <main+0x76>
     41e:	00 00       	nop
	delay_us(100);

	init_timestamp(&cur_time);
     420:	80 ec       	ldi	r24, 0xC0	; 192
     422:	9a e0       	ldi	r25, 0x0A	; 10
     424:	0e 94 b6 1e 	call	0x3d6c	; 0x3d6c <init_timestamp>
     428:	8f e8       	ldi	r24, 0x8F	; 143
     42a:	91 e0       	ldi	r25, 0x01	; 1
     42c:	01 97       	sbiw	r24, 0x01	; 1
     42e:	f1 f7       	brne	.-4      	; 0x42c <main+0x84>
     430:	00 c0       	rjmp	.+0      	; 0x432 <main+0x8a>
     432:	00 00       	nop
	delay_us(100);

	BMP280Sensor *BMP280_ptr = New_BMP280_Sensor( 0,2 /* GP.SensorList[i].NumOfData */ );
     434:	62 e0       	ldi	r22, 0x02	; 2
     436:	70 e0       	ldi	r23, 0x00	; 0
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	0e 94 f7 27 	call	0x4fee	; 0x4fee <New_BMP280_Sensor>
     440:	8c 01       	movw	r16, r24
	printf("init success");
     442:	28 e9       	ldi	r18, 0x98	; 152
     444:	32 e0       	ldi	r19, 0x02	; 2
     446:	3f 93       	push	r19
     448:	2f 93       	push	r18
     44a:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
     44e:	8f e8       	ldi	r24, 0x8F	; 143
     450:	91 e0       	ldi	r25, 0x01	; 1
     452:	01 97       	sbiw	r24, 0x01	; 1
     454:	f1 f7       	brne	.-4      	; 0x452 <main+0xaa>
     456:	00 c0       	rjmp	.+0      	; 0x458 <main+0xb0>
     458:	00 00       	nop
	delay_us(100);

	/*Si7020Sensor *Si_ptr = New_Si7020_Sensor(0,2); */
	K30Sensor *K30_ptr = New_K30_Sensor(0,1);
     45a:	61 e0       	ldi	r22, 0x01	; 1
     45c:	70 e0       	ldi	r23, 0x00	; 0
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <New_K30_Sensor>
     466:	5c 01       	movw	r10, r24

	FlashStorageDevice *Strg_ptr = New_FlashStorage_Device(0);
     468:	80 e0       	ldi	r24, 0x00	; 0
     46a:	90 e0       	ldi	r25, 0x00	; 0
     46c:	d8 d0       	rcall	.+432    	; 0x61e <New_FlashStorage_Device>
     46e:	6c 01       	movw	r12, r24
	//DemoStorageDevice *Strg_ptr = New_DemoStorage_Device(0);
	//LoadDataDevice *Load_ptr = New_LoadData_Device(0,Strg_ptr);

	init_Event_Timer();
     470:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <init_Event_Timer>
	printf("init done!\n");
     474:	85 ea       	ldi	r24, 0xA5	; 165
     476:	92 e0       	ldi	r25, 0x02	; 2
     478:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>

	/* load all sensors */
	load_new_sensor( GP.SensorList[BMP280].StartTime, GP.SensorList[BMP280].ExecutePeriod, (BaseSensor *)BMP280_ptr, 0 );
     47c:	c9 e2       	ldi	r28, 0x29	; 41
     47e:	dd e0       	ldi	r29, 0x0D	; 13
     480:	2c a1       	ldd	r18, Y+36	; 0x24
     482:	3d a1       	ldd	r19, Y+37	; 0x25
     484:	4e a1       	ldd	r20, Y+38	; 0x26
     486:	5f a1       	ldd	r21, Y+39	; 0x27
     488:	68 a1       	ldd	r22, Y+32	; 0x20
     48a:	79 a1       	ldd	r23, Y+33	; 0x21
     48c:	8a a1       	ldd	r24, Y+34	; 0x22
     48e:	9b a1       	ldd	r25, Y+35	; 0x23
     490:	e1 2c       	mov	r14, r1
     492:	f1 2c       	mov	r15, r1
     494:	0e 94 a8 1c 	call	0x3950	; 0x3950 <load_new_sensor>
	/* load_new_sensor( GP.SensorList[Si7020].StartTime, GP.SensorList[Si7020].ExecutePeriod, (BaseSensor *)Si_ptr, 0 ); */
	load_new_sensor( GP.SensorList[K30].StartTime, GP.SensorList[K30].ExecutePeriod, (BaseSensor *)K30_ptr, 0 );
     498:	20 91 6d 0d 	lds	r18, 0x0D6D
     49c:	30 91 6e 0d 	lds	r19, 0x0D6E
     4a0:	40 91 6f 0d 	lds	r20, 0x0D6F
     4a4:	50 91 70 0d 	lds	r21, 0x0D70
     4a8:	60 91 69 0d 	lds	r22, 0x0D69
     4ac:	70 91 6a 0d 	lds	r23, 0x0D6A
     4b0:	80 91 6b 0d 	lds	r24, 0x0D6B
     4b4:	90 91 6c 0d 	lds	r25, 0x0D6C
     4b8:	85 01       	movw	r16, r10
     4ba:	0e 94 a8 1c 	call	0x3950	; 0x3950 <load_new_sensor>


	//printf("%d\t%d\n",GP.DeviceList[DemoStorage].StartTime,GP.DeviceList[DemoStorage].ExecutePeriod);
	/* load all ( non-sensor ) devices */
	load_new_device( GP.DeviceList[FlashStorage].StartTime, GP.DeviceList[FlashStorage].ExecutePeriod, (BaseDevice *)Strg_ptr, 0 );
     4be:	2c 89       	ldd	r18, Y+20	; 0x14
     4c0:	3d 89       	ldd	r19, Y+21	; 0x15
     4c2:	4e 89       	ldd	r20, Y+22	; 0x16
     4c4:	5f 89       	ldd	r21, Y+23	; 0x17
     4c6:	68 89       	ldd	r22, Y+16	; 0x10
     4c8:	79 89       	ldd	r23, Y+17	; 0x11
     4ca:	8a 89       	ldd	r24, Y+18	; 0x12
     4cc:	9b 89       	ldd	r25, Y+19	; 0x13
     4ce:	86 01       	movw	r16, r12
     4d0:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <load_new_device>
int main(void)
{
	SYS_Init();
	APP_Init();
	DEVICE_Init();
	init_set_timer( get_next_interval() );
     4d4:	0e 94 3b 1c 	call	0x3876	; 0x3876 <get_next_interval>
     4d8:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <init_set_timer>

	// Enable global interrupt //
	sei();
     4dc:	78 94       	sei
     4de:	0f 90       	pop	r0
     4e0:	0f 90       	pop	r0
     4e2:	0f 90       	pop	r0
     4e4:	0f 90       	pop	r0
     4e6:	0f 90       	pop	r0
     4e8:	0f 90       	pop	r0

	for (;;){}
     4ea:	ff cf       	rjmp	.-2      	; 0x4ea <main+0x142>

000004ec <K30_delaytime>:
*/

int K30_delaytime()
{
	char status;
	status=TWI_BeginWrite(0x68);
     4ec:	88 e6       	ldi	r24, 0x68	; 104
     4ee:	0e 94 93 18 	call	0x3126	; 0x3126 <TWI_BeginWrite>
	if(status!=TWI_SLAW_ACK) return -1;
     4f2:	88 31       	cpi	r24, 0x18	; 24
     4f4:	69 f4       	brne	.+26     	; 0x510 <K30_delaytime+0x24>
	status=TWI_Write(&readcmd[0],4);
     4f6:	64 e0       	ldi	r22, 0x04	; 4
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	82 e4       	ldi	r24, 0x42	; 66
     4fc:	92 e0       	ldi	r25, 0x02	; 2
     4fe:	0e 94 25 19 	call	0x324a	; 0x324a <TWI_Write>
	if(status!=TWI_SENT_ACK) return -1;
     502:	88 32       	cpi	r24, 0x28	; 40
     504:	41 f4       	brne	.+16     	; 0x516 <K30_delaytime+0x2a>
	TWI_Stop();	
     506:	0e 94 e6 18 	call	0x31cc	; 0x31cc <TWI_Stop>
	return 10;
     50a:	8a e0       	ldi	r24, 0x0A	; 10
     50c:	90 e0       	ldi	r25, 0x00	; 0
     50e:	08 95       	ret

int K30_delaytime()
{
	char status;
	status=TWI_BeginWrite(0x68);
	if(status!=TWI_SLAW_ACK) return -1;
     510:	8f ef       	ldi	r24, 0xFF	; 255
     512:	9f ef       	ldi	r25, 0xFF	; 255
     514:	08 95       	ret
	status=TWI_Write(&readcmd[0],4);
	if(status!=TWI_SENT_ACK) return -1;
     516:	8f ef       	ldi	r24, 0xFF	; 255
     518:	9f ef       	ldi	r25, 0xFF	; 255
	TWI_Stop();	
	return 10;
}
     51a:	08 95       	ret

0000051c <K30_readCO2>:

int K30_readCO2(){
     51c:	af 92       	push	r10
     51e:	bf 92       	push	r11
     520:	cf 92       	push	r12
     522:	df 92       	push	r13
     524:	ef 92       	push	r14
     526:	ff 92       	push	r15
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
     530:	00 d0       	rcall	.+0      	; 0x532 <K30_readCO2+0x16>
     532:	1f 92       	push	r1
     534:	cd b7       	in	r28, 0x3d	; 61
     536:	de b7       	in	r29, 0x3e	; 62
	int val=0;
	int sum=0;
	
	char status;
	//printf("K30_readCO2");
	unsigned char buffer[4]={0,0,0,0};
     538:	19 82       	std	Y+1, r1	; 0x01
     53a:	1a 82       	std	Y+2, r1	; 0x02
     53c:	1b 82       	std	Y+3, r1	; 0x03
     53e:	1c 82       	std	Y+4, r1	; 0x04
	status=TWI_BeginRead(0x68);
     540:	88 e6       	ldi	r24, 0x68	; 104
     542:	0e 94 af 18 	call	0x315e	; 0x315e <TWI_BeginRead>
	if(status!=TWI_SLAR_ACK) return -9998;
     546:	80 34       	cpi	r24, 0x40	; 64
     548:	c1 f5       	brne	.+112    	; 0x5ba <K30_readCO2+0x9e>
	status=TWI_Read(&buffer[0],4,true);
     54a:	41 e0       	ldi	r20, 0x01	; 1
     54c:	64 e0       	ldi	r22, 0x04	; 4
     54e:	70 e0       	ldi	r23, 0x00	; 0
     550:	ce 01       	movw	r24, r28
     552:	01 96       	adiw	r24, 0x01	; 1
     554:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <TWI_Read>
	if(status!=TWI_REC_ACK) return -9997;
     558:	80 35       	cpi	r24, 0x50	; 80
     55a:	91 f5       	brne	.+100    	; 0x5c0 <K30_readCO2+0xa4>
	TWI_Stop();
     55c:	0e 94 e6 18 	call	0x31cc	; 0x31cc <TWI_Stop>
	
	val = 0;
	val |= buffer[1] & 0xFF;
     560:	9a 81       	ldd	r25, Y+2	; 0x02
     562:	a9 2e       	mov	r10, r25
     564:	b1 2c       	mov	r11, r1
	val = val << 8;
     566:	fa 2c       	mov	r15, r10
     568:	ee 24       	eor	r14, r14
	val |= buffer[2] & 0xFF;
     56a:	2b 81       	ldd	r18, Y+3	; 0x03
     56c:	c2 2e       	mov	r12, r18
     56e:	d1 2c       	mov	r13, r1
     570:	ec 28       	or	r14, r12
     572:	fd 28       	or	r15, r13
	sum = buffer[0] + buffer[1] + buffer[2];
     574:	89 81       	ldd	r24, Y+1	; 0x01
     576:	08 2f       	mov	r16, r24
     578:	10 e0       	ldi	r17, 0x00	; 0
	printf("K30-DEBUG : %u,%u,%u,%u\n",buffer[0],buffer[1],buffer[2],buffer[3]);
     57a:	3c 81       	ldd	r19, Y+4	; 0x04
     57c:	1f 92       	push	r1
     57e:	3f 93       	push	r19
     580:	1f 92       	push	r1
     582:	2f 93       	push	r18
     584:	1f 92       	push	r1
     586:	9f 93       	push	r25
     588:	1f 92       	push	r1
     58a:	8f 93       	push	r24
     58c:	80 eb       	ldi	r24, 0xB0	; 176
     58e:	92 e0       	ldi	r25, 0x02	; 2
     590:	9f 93       	push	r25
     592:	8f 93       	push	r24
     594:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
	if(sum==buffer[3]){return val;}
     598:	8c 81       	ldd	r24, Y+4	; 0x04
     59a:	90 e0       	ldi	r25, 0x00	; 0
	
	val = 0;
	val |= buffer[1] & 0xFF;
	val = val << 8;
	val |= buffer[2] & 0xFF;
	sum = buffer[0] + buffer[1] + buffer[2];
     59c:	0a 0d       	add	r16, r10
     59e:	1b 1d       	adc	r17, r11
     5a0:	0c 0d       	add	r16, r12
     5a2:	1d 1d       	adc	r17, r13
	printf("K30-DEBUG : %u,%u,%u,%u\n",buffer[0],buffer[1],buffer[2],buffer[3]);
	if(sum==buffer[3]){return val;}
     5a4:	0f b6       	in	r0, 0x3f	; 63
     5a6:	f8 94       	cli
     5a8:	de bf       	out	0x3e, r29	; 62
     5aa:	0f be       	out	0x3f, r0	; 63
     5ac:	cd bf       	out	0x3d, r28	; 61
     5ae:	80 17       	cp	r24, r16
     5b0:	91 07       	cpc	r25, r17
     5b2:	49 f4       	brne	.+18     	; 0x5c6 <K30_readCO2+0xaa>
     5b4:	8e 2d       	mov	r24, r14
     5b6:	9f 2d       	mov	r25, r15
     5b8:	08 c0       	rjmp	.+16     	; 0x5ca <K30_readCO2+0xae>
	
	char status;
	//printf("K30_readCO2");
	unsigned char buffer[4]={0,0,0,0};
	status=TWI_BeginRead(0x68);
	if(status!=TWI_SLAR_ACK) return -9998;
     5ba:	82 ef       	ldi	r24, 0xF2	; 242
     5bc:	98 ed       	ldi	r25, 0xD8	; 216
     5be:	05 c0       	rjmp	.+10     	; 0x5ca <K30_readCO2+0xae>
	status=TWI_Read(&buffer[0],4,true);
	if(status!=TWI_REC_ACK) return -9997;
     5c0:	83 ef       	ldi	r24, 0xF3	; 243
     5c2:	98 ed       	ldi	r25, 0xD8	; 216
     5c4:	02 c0       	rjmp	.+4      	; 0x5ca <K30_readCO2+0xae>
	val = val << 8;
	val |= buffer[2] & 0xFF;
	sum = buffer[0] + buffer[1] + buffer[2];
	printf("K30-DEBUG : %u,%u,%u,%u\n",buffer[0],buffer[1],buffer[2],buffer[3]);
	if(sum==buffer[3]){return val;}
	else{return -9999;}
     5c6:	81 ef       	ldi	r24, 0xF1	; 241
     5c8:	98 ed       	ldi	r25, 0xD8	; 216
	
}
     5ca:	0f 90       	pop	r0
     5cc:	0f 90       	pop	r0
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	df 91       	pop	r29
     5d4:	cf 91       	pop	r28
     5d6:	1f 91       	pop	r17
     5d8:	0f 91       	pop	r16
     5da:	ff 90       	pop	r15
     5dc:	ef 90       	pop	r14
     5de:	df 90       	pop	r13
     5e0:	cf 90       	pop	r12
     5e2:	bf 90       	pop	r11
     5e4:	af 90       	pop	r10
     5e6:	08 95       	ret

000005e8 <FlashStorage_VTinit>:
 };


 void FlashStorage_VTinit( FlashStorageDevice *this )
 {
 	this->abstract.device_vt = &FlashStorageDevice_abstract_vmt;
     5e8:	2c e4       	ldi	r18, 0x4C	; 76
     5ea:	32 e0       	ldi	r19, 0x02	; 2
     5ec:	fc 01       	movw	r30, r24
     5ee:	31 83       	std	Z+1, r19	; 0x01
     5f0:	20 83       	st	Z, r18
     5f2:	08 95       	ret

000005f4 <FlashStorage_init>:
 }

 int FlashStorage_init( FlashStorageDevice *this )
 {
 	return 0;
 }
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	90 e0       	ldi	r25, 0x00	; 0
     5f8:	08 95       	ret

000005fa <FlashStorage_reset>:

 int FlashStorage_reset( FlashStorageDevice *this )
 {
 	return 0;
 }
     5fa:	80 e0       	ldi	r24, 0x00	; 0
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	08 95       	ret

00000600 <FlashStorage_getType>:

 int FlashStorage_getType( FlashStorageDevice *this )
 {
 	return TYPE_STORAGE_DEVICE;
 }
     600:	84 e0       	ldi	r24, 0x04	; 4
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	08 95       	ret

00000606 <FlashStorage_Tinit>:



 void FlashStorage_Tinit(FlashStorageDevice *this)
 {
 	this->vmt = &FlashStorageDevice_vmt;
     606:	26 e4       	ldi	r18, 0x46	; 70
     608:	32 e0       	ldi	r19, 0x02	; 2
     60a:	fc 01       	movw	r30, r24
     60c:	33 83       	std	Z+3, r19	; 0x03
     60e:	22 83       	std	Z+2, r18	; 0x02
     610:	08 95       	ret

00000612 <FlashStorage_Execute>:
 }

 int FlashStorage_Execute(FlashStorageDevice *this)
 {
 	return 0;
 }
     612:	80 e0       	ldi	r24, 0x00	; 0
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	08 95       	ret

00000618 <FlashStorage_Configure>:

 int FlashStorage_Configure(FlashStorageDevice *this)
 {
 	return 0;
 }
     618:	80 e0       	ldi	r24, 0x00	; 0
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	08 95       	ret

0000061e <New_FlashStorage_Device>:
 {
 	return TYPE_STORAGE_DEVICE;
 }

 FlashStorageDevice* New_FlashStorage_Device( int infonum )
 {
     61e:	0f 93       	push	r16
     620:	1f 93       	push	r17
     622:	cf 93       	push	r28
     624:	df 93       	push	r29
     626:	8c 01       	movw	r16, r24
 	FlashStorageDevice *p = malloc(sizeof(FlashStorageDevice));
     628:	86 e0       	ldi	r24, 0x06	; 6
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <malloc>
     630:	ec 01       	movw	r28, r24
 	p->info = infonum;
     632:	1d 83       	std	Y+5, r17	; 0x05
     634:	0c 83       	std	Y+4, r16	; 0x04
 };


 void FlashStorage_VTinit( FlashStorageDevice *this )
 {
 	this->abstract.device_vt = &FlashStorageDevice_abstract_vmt;
     636:	8c e4       	ldi	r24, 0x4C	; 76
     638:	92 e0       	ldi	r25, 0x02	; 2
     63a:	99 83       	std	Y+1, r25	; 0x01
     63c:	88 83       	st	Y, r24



 void FlashStorage_Tinit(FlashStorageDevice *this)
 {
 	this->vmt = &FlashStorageDevice_vmt;
     63e:	86 e4       	ldi	r24, 0x46	; 70
     640:	92 e0       	ldi	r25, 0x02	; 2
     642:	9b 83       	std	Y+3, r25	; 0x03
     644:	8a 83       	std	Y+2, r24	; 0x02
 {
 	FlashStorageDevice *p = malloc(sizeof(FlashStorageDevice));
 	p->info = infonum;
 	FlashStorage_VTinit(p);
  FlashStorage_Tinit(p);
  N25Qret = N25Q_Init(&N25Qfdo);
     646:	8d e9       	ldi	r24, 0x9D	; 157
     648:	9c e0       	ldi	r25, 0x0C	; 12
     64a:	76 d2       	rcall	.+1260   	; 0xb38 <N25Q_Init>
     64c:	80 93 e8 0a 	sts	0x0AE8, r24
  if (Flash_WrongType == N25Qret)
     650:	83 31       	cpi	r24, 0x13	; 19
     652:	39 f4       	brne	.+14     	; 0x662 <New_FlashStorage_Device+0x44>
	{
		printf("Sorry, no device detected.\n");
     654:	89 ec       	ldi	r24, 0xC9	; 201
     656:	92 e0       	ldi	r25, 0x02	; 2
     658:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>
		return -1;
     65c:	8f ef       	ldi	r24, 0xFF	; 255
     65e:	9f ef       	ldi	r25, 0xFF	; 255
     660:	06 c0       	rjmp	.+12     	; 0x66e <New_FlashStorage_Device+0x50>
	}
  printf("Flash Storage Initialized!\n");
     662:	84 ee       	ldi	r24, 0xE4	; 228
     664:	92 e0       	ldi	r25, 0x02	; 2
     666:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>
 	return p;
     66a:	8c 2f       	mov	r24, r28
     66c:	9d 2f       	mov	r25, r29
 }
     66e:	df 91       	pop	r29
     670:	cf 91       	pop	r28
     672:	1f 91       	pop	r17
     674:	0f 91       	pop	r16
     676:	08 95       	ret

00000678 <BlockOffset>:
 ******************************************************************************/
ReturnType  FlashProgramEraseSuspend( void )
{
	/* not implemented */
	return Flash_FunctionNotSupported;
}
     678:	e0 91 7f 0d 	lds	r30, 0x0D7F
     67c:	f0 91 80 0d 	lds	r31, 0x0D80
     680:	05 a0       	ldd	r0, Z+37	; 0x25
     682:	02 c0       	rjmp	.+4      	; 0x688 <BlockOffset+0x10>
     684:	88 0f       	add	r24, r24
     686:	99 1f       	adc	r25, r25
     688:	0a 94       	dec	r0
     68a:	e2 f7       	brpl	.-8      	; 0x684 <BlockOffset+0xc>
     68c:	bc 01       	movw	r22, r24
     68e:	80 e0       	ldi	r24, 0x00	; 0
     690:	90 e0       	ldi	r25, 0x00	; 0
     692:	08 95       	ret

00000694 <FlashReadDeviceIdentification>:
     694:	0f 93       	push	r16
     696:	1f 93       	push	r17
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	cd b7       	in	r28, 0x3d	; 61
     69e:	de b7       	in	r29, 0x3e	; 62
     6a0:	60 97       	sbiw	r28, 0x10	; 16
     6a2:	0f b6       	in	r0, 0x3f	; 63
     6a4:	f8 94       	cli
     6a6:	de bf       	out	0x3e, r29	; 62
     6a8:	0f be       	out	0x3f, r0	; 63
     6aa:	cd bf       	out	0x3d, r28	; 61
     6ac:	8c 01       	movw	r16, r24
     6ae:	8f e9       	ldi	r24, 0x9F	; 159
     6b0:	8d 87       	std	Y+13, r24	; 0x0d
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	90 e0       	ldi	r25, 0x00	; 0
     6b6:	a0 e0       	ldi	r26, 0x00	; 0
     6b8:	b0 e0       	ldi	r27, 0x00	; 0
     6ba:	8b 83       	std	Y+3, r24	; 0x03
     6bc:	9c 83       	std	Y+4, r25	; 0x04
     6be:	ad 83       	std	Y+5, r26	; 0x05
     6c0:	be 83       	std	Y+6, r27	; 0x06
     6c2:	ce 01       	movw	r24, r28
     6c4:	0d 96       	adiw	r24, 0x0d	; 13
     6c6:	9a 83       	std	Y+2, r25	; 0x02
     6c8:	89 83       	std	Y+1, r24	; 0x01
     6ca:	83 e0       	ldi	r24, 0x03	; 3
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	a0 e0       	ldi	r26, 0x00	; 0
     6d0:	b0 e0       	ldi	r27, 0x00	; 0
     6d2:	89 87       	std	Y+9, r24	; 0x09
     6d4:	9a 87       	std	Y+10, r25	; 0x0a
     6d6:	ab 87       	std	Y+11, r26	; 0x0b
     6d8:	bc 87       	std	Y+12, r27	; 0x0c
     6da:	ce 01       	movw	r24, r28
     6dc:	0e 96       	adiw	r24, 0x0e	; 14
     6de:	98 87       	std	Y+8, r25	; 0x08
     6e0:	8f 83       	std	Y+7, r24	; 0x07
     6e2:	23 e0       	ldi	r18, 0x03	; 3
     6e4:	41 e0       	ldi	r20, 0x01	; 1
     6e6:	be 01       	movw	r22, r28
     6e8:	69 5f       	subi	r22, 0xF9	; 249
     6ea:	7f 4f       	sbci	r23, 0xFF	; 255
     6ec:	0d 97       	sbiw	r24, 0x0d	; 13
     6ee:	0e 94 94 17 	call	0x2f28	; 0x2f28 <Serialize_SPI>
     6f2:	ef 81       	ldd	r30, Y+7	; 0x07
     6f4:	f8 85       	ldd	r31, Y+8	; 0x08
     6f6:	80 81       	ld	r24, Z
     6f8:	1f 92       	push	r1
     6fa:	8f 93       	push	r24
     6fc:	8f ef       	ldi	r24, 0xFF	; 255
     6fe:	92 e0       	ldi	r25, 0x02	; 2
     700:	9f 93       	push	r25
     702:	8f 93       	push	r24
     704:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
     708:	ef 81       	ldd	r30, Y+7	; 0x07
     70a:	f8 85       	ldd	r31, Y+8	; 0x08
     70c:	81 81       	ldd	r24, Z+1	; 0x01
     70e:	1f 92       	push	r1
     710:	8f 93       	push	r24
     712:	83 e1       	ldi	r24, 0x13	; 19
     714:	93 e0       	ldi	r25, 0x03	; 3
     716:	9f 93       	push	r25
     718:	8f 93       	push	r24
     71a:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
     71e:	ef 81       	ldd	r30, Y+7	; 0x07
     720:	f8 85       	ldd	r31, Y+8	; 0x08
     722:	82 81       	ldd	r24, Z+2	; 0x02
     724:	1f 92       	push	r1
     726:	8f 93       	push	r24
     728:	87 e2       	ldi	r24, 0x27	; 39
     72a:	93 e0       	ldi	r25, 0x03	; 3
     72c:	9f 93       	push	r25
     72e:	8f 93       	push	r24
     730:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
     734:	ef 81       	ldd	r30, Y+7	; 0x07
     736:	f8 85       	ldd	r31, Y+8	; 0x08
     738:	40 81       	ld	r20, Z
     73a:	50 e0       	ldi	r21, 0x00	; 0
     73c:	60 e0       	ldi	r22, 0x00	; 0
     73e:	70 e0       	ldi	r23, 0x00	; 0
     740:	76 2f       	mov	r23, r22
     742:	65 2f       	mov	r22, r21
     744:	54 2f       	mov	r21, r20
     746:	44 27       	eor	r20, r20
     748:	d8 01       	movw	r26, r16
     74a:	4d 93       	st	X+, r20
     74c:	5d 93       	st	X+, r21
     74e:	6d 93       	st	X+, r22
     750:	7c 93       	st	X, r23
     752:	13 97       	sbiw	r26, 0x03	; 3
     754:	81 81       	ldd	r24, Z+1	; 0x01
     756:	48 2b       	or	r20, r24
     758:	76 2f       	mov	r23, r22
     75a:	65 2f       	mov	r22, r21
     75c:	54 2f       	mov	r21, r20
     75e:	44 27       	eor	r20, r20
     760:	4d 93       	st	X+, r20
     762:	5d 93       	st	X+, r21
     764:	6d 93       	st	X+, r22
     766:	7c 93       	st	X, r23
     768:	13 97       	sbiw	r26, 0x03	; 3
     76a:	82 81       	ldd	r24, Z+2	; 0x02
     76c:	48 2b       	or	r20, r24
     76e:	f8 01       	movw	r30, r16
     770:	40 83       	st	Z, r20
     772:	51 83       	std	Z+1, r21	; 0x01
     774:	62 83       	std	Z+2, r22	; 0x02
     776:	73 83       	std	Z+3, r23	; 0x03
     778:	0f b6       	in	r0, 0x3f	; 63
     77a:	f8 94       	cli
     77c:	de bf       	out	0x3e, r29	; 62
     77e:	0f be       	out	0x3f, r0	; 63
     780:	cd bf       	out	0x3d, r28	; 61
     782:	80 e0       	ldi	r24, 0x00	; 0
     784:	60 96       	adiw	r28, 0x10	; 16
     786:	0f b6       	in	r0, 0x3f	; 63
     788:	f8 94       	cli
     78a:	de bf       	out	0x3e, r29	; 62
     78c:	0f be       	out	0x3f, r0	; 63
     78e:	cd bf       	out	0x3d, r28	; 61
     790:	df 91       	pop	r29
     792:	cf 91       	pop	r28
     794:	1f 91       	pop	r17
     796:	0f 91       	pop	r16
     798:	08 95       	ret

0000079a <FlashReadStatusRegister>:
     79a:	cf 93       	push	r28
     79c:	df 93       	push	r29
     79e:	cd b7       	in	r28, 0x3d	; 61
     7a0:	de b7       	in	r29, 0x3e	; 62
     7a2:	2d 97       	sbiw	r28, 0x0d	; 13
     7a4:	0f b6       	in	r0, 0x3f	; 63
     7a6:	f8 94       	cli
     7a8:	de bf       	out	0x3e, r29	; 62
     7aa:	0f be       	out	0x3f, r0	; 63
     7ac:	cd bf       	out	0x3d, r28	; 61
     7ae:	25 e0       	ldi	r18, 0x05	; 5
     7b0:	2d 87       	std	Y+13, r18	; 0x0d
     7b2:	41 e0       	ldi	r20, 0x01	; 1
     7b4:	50 e0       	ldi	r21, 0x00	; 0
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	70 e0       	ldi	r23, 0x00	; 0
     7ba:	4b 83       	std	Y+3, r20	; 0x03
     7bc:	5c 83       	std	Y+4, r21	; 0x04
     7be:	6d 83       	std	Y+5, r22	; 0x05
     7c0:	7e 83       	std	Y+6, r23	; 0x06
     7c2:	9e 01       	movw	r18, r28
     7c4:	23 5f       	subi	r18, 0xF3	; 243
     7c6:	3f 4f       	sbci	r19, 0xFF	; 255
     7c8:	3a 83       	std	Y+2, r19	; 0x02
     7ca:	29 83       	std	Y+1, r18	; 0x01
     7cc:	49 87       	std	Y+9, r20	; 0x09
     7ce:	5a 87       	std	Y+10, r21	; 0x0a
     7d0:	6b 87       	std	Y+11, r22	; 0x0b
     7d2:	7c 87       	std	Y+12, r23	; 0x0c
     7d4:	98 87       	std	Y+8, r25	; 0x08
     7d6:	8f 83       	std	Y+7, r24	; 0x07
     7d8:	23 e0       	ldi	r18, 0x03	; 3
     7da:	be 01       	movw	r22, r28
     7dc:	69 5f       	subi	r22, 0xF9	; 249
     7de:	7f 4f       	sbci	r23, 0xFF	; 255
     7e0:	ce 01       	movw	r24, r28
     7e2:	01 96       	adiw	r24, 0x01	; 1
     7e4:	0e 94 94 17 	call	0x2f28	; 0x2f28 <Serialize_SPI>
     7e8:	80 e0       	ldi	r24, 0x00	; 0
     7ea:	2d 96       	adiw	r28, 0x0d	; 13
     7ec:	0f b6       	in	r0, 0x3f	; 63
     7ee:	f8 94       	cli
     7f0:	de bf       	out	0x3e, r29	; 62
     7f2:	0f be       	out	0x3f, r0	; 63
     7f4:	cd bf       	out	0x3d, r28	; 61
     7f6:	df 91       	pop	r29
     7f8:	cf 91       	pop	r28
     7fa:	08 95       	ret

000007fc <FlashWriteEnable>:
     7fc:	cf 93       	push	r28
     7fe:	df 93       	push	r29
     800:	cd b7       	in	r28, 0x3d	; 61
     802:	de b7       	in	r29, 0x3e	; 62
     804:	28 97       	sbiw	r28, 0x08	; 8
     806:	0f b6       	in	r0, 0x3f	; 63
     808:	f8 94       	cli
     80a:	de bf       	out	0x3e, r29	; 62
     80c:	0f be       	out	0x3f, r0	; 63
     80e:	cd bf       	out	0x3d, r28	; 61
     810:	86 e0       	ldi	r24, 0x06	; 6
     812:	8f 83       	std	Y+7, r24	; 0x07
     814:	81 e0       	ldi	r24, 0x01	; 1
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	a0 e0       	ldi	r26, 0x00	; 0
     81a:	b0 e0       	ldi	r27, 0x00	; 0
     81c:	8b 83       	std	Y+3, r24	; 0x03
     81e:	9c 83       	std	Y+4, r25	; 0x04
     820:	ad 83       	std	Y+5, r26	; 0x05
     822:	be 83       	std	Y+6, r27	; 0x06
     824:	ce 01       	movw	r24, r28
     826:	07 96       	adiw	r24, 0x07	; 7
     828:	9a 83       	std	Y+2, r25	; 0x02
     82a:	89 83       	std	Y+1, r24	; 0x01
     82c:	23 e0       	ldi	r18, 0x03	; 3
     82e:	41 e0       	ldi	r20, 0x01	; 1
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	70 e0       	ldi	r23, 0x00	; 0
     834:	06 97       	sbiw	r24, 0x06	; 6
     836:	0e 94 94 17 	call	0x2f28	; 0x2f28 <Serialize_SPI>
     83a:	ce 01       	movw	r24, r28
     83c:	08 96       	adiw	r24, 0x08	; 8
     83e:	ad df       	rcall	.-166    	; 0x79a <FlashReadStatusRegister>
     840:	88 85       	ldd	r24, Y+8	; 0x08
     842:	81 ff       	sbrs	r24, 1
     844:	fa cf       	rjmp	.-12     	; 0x83a <FlashWriteEnable+0x3e>
     846:	80 e0       	ldi	r24, 0x00	; 0
     848:	28 96       	adiw	r28, 0x08	; 8
     84a:	0f b6       	in	r0, 0x3f	; 63
     84c:	f8 94       	cli
     84e:	de bf       	out	0x3e, r29	; 62
     850:	0f be       	out	0x3f, r0	; 63
     852:	cd bf       	out	0x3d, r28	; 61
     854:	df 91       	pop	r29
     856:	cf 91       	pop	r28
     858:	08 95       	ret

0000085a <FlashWriteDisable>:
     85a:	cf 93       	push	r28
     85c:	df 93       	push	r29
     85e:	cd b7       	in	r28, 0x3d	; 61
     860:	de b7       	in	r29, 0x3e	; 62
     862:	28 97       	sbiw	r28, 0x08	; 8
     864:	0f b6       	in	r0, 0x3f	; 63
     866:	f8 94       	cli
     868:	de bf       	out	0x3e, r29	; 62
     86a:	0f be       	out	0x3f, r0	; 63
     86c:	cd bf       	out	0x3d, r28	; 61
     86e:	84 e0       	ldi	r24, 0x04	; 4
     870:	8f 83       	std	Y+7, r24	; 0x07
     872:	81 e0       	ldi	r24, 0x01	; 1
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	a0 e0       	ldi	r26, 0x00	; 0
     878:	b0 e0       	ldi	r27, 0x00	; 0
     87a:	8b 83       	std	Y+3, r24	; 0x03
     87c:	9c 83       	std	Y+4, r25	; 0x04
     87e:	ad 83       	std	Y+5, r26	; 0x05
     880:	be 83       	std	Y+6, r27	; 0x06
     882:	ce 01       	movw	r24, r28
     884:	07 96       	adiw	r24, 0x07	; 7
     886:	9a 83       	std	Y+2, r25	; 0x02
     888:	89 83       	std	Y+1, r24	; 0x01
     88a:	23 e0       	ldi	r18, 0x03	; 3
     88c:	41 e0       	ldi	r20, 0x01	; 1
     88e:	60 e0       	ldi	r22, 0x00	; 0
     890:	70 e0       	ldi	r23, 0x00	; 0
     892:	06 97       	sbiw	r24, 0x06	; 6
     894:	0e 94 94 17 	call	0x2f28	; 0x2f28 <Serialize_SPI>
     898:	ce 01       	movw	r24, r28
     89a:	08 96       	adiw	r24, 0x08	; 8
     89c:	7e df       	rcall	.-260    	; 0x79a <FlashReadStatusRegister>
     89e:	88 85       	ldd	r24, Y+8	; 0x08
     8a0:	81 fd       	sbrc	r24, 1
     8a2:	fa cf       	rjmp	.-12     	; 0x898 <FlashWriteDisable+0x3e>
     8a4:	80 e0       	ldi	r24, 0x00	; 0
     8a6:	28 96       	adiw	r28, 0x08	; 8
     8a8:	0f b6       	in	r0, 0x3f	; 63
     8aa:	f8 94       	cli
     8ac:	de bf       	out	0x3e, r29	; 62
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	cd bf       	out	0x3d, r28	; 61
     8b2:	df 91       	pop	r29
     8b4:	cf 91       	pop	r28
     8b6:	08 95       	ret

000008b8 <FlashClearFlagStatusRegister>:
     8b8:	cf 93       	push	r28
     8ba:	df 93       	push	r29
     8bc:	cd b7       	in	r28, 0x3d	; 61
     8be:	de b7       	in	r29, 0x3e	; 62
     8c0:	27 97       	sbiw	r28, 0x07	; 7
     8c2:	0f b6       	in	r0, 0x3f	; 63
     8c4:	f8 94       	cli
     8c6:	de bf       	out	0x3e, r29	; 62
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	cd bf       	out	0x3d, r28	; 61
     8cc:	80 e5       	ldi	r24, 0x50	; 80
     8ce:	8f 83       	std	Y+7, r24	; 0x07
     8d0:	81 e0       	ldi	r24, 0x01	; 1
     8d2:	90 e0       	ldi	r25, 0x00	; 0
     8d4:	a0 e0       	ldi	r26, 0x00	; 0
     8d6:	b0 e0       	ldi	r27, 0x00	; 0
     8d8:	8b 83       	std	Y+3, r24	; 0x03
     8da:	9c 83       	std	Y+4, r25	; 0x04
     8dc:	ad 83       	std	Y+5, r26	; 0x05
     8de:	be 83       	std	Y+6, r27	; 0x06
     8e0:	ce 01       	movw	r24, r28
     8e2:	07 96       	adiw	r24, 0x07	; 7
     8e4:	9a 83       	std	Y+2, r25	; 0x02
     8e6:	89 83       	std	Y+1, r24	; 0x01
     8e8:	23 e0       	ldi	r18, 0x03	; 3
     8ea:	41 e0       	ldi	r20, 0x01	; 1
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	06 97       	sbiw	r24, 0x06	; 6
     8f2:	0e 94 94 17 	call	0x2f28	; 0x2f28 <Serialize_SPI>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	27 96       	adiw	r28, 0x07	; 7
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	f8 94       	cli
     8fe:	de bf       	out	0x3e, r29	; 62
     900:	0f be       	out	0x3f, r0	; 63
     902:	cd bf       	out	0x3d, r28	; 61
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	08 95       	ret

0000090a <FlashReadNVConfigurationRegister>:
     90a:	cf 93       	push	r28
     90c:	df 93       	push	r29
     90e:	cd b7       	in	r28, 0x3d	; 61
     910:	de b7       	in	r29, 0x3e	; 62
     912:	2d 97       	sbiw	r28, 0x0d	; 13
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	f8 94       	cli
     918:	de bf       	out	0x3e, r29	; 62
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	cd bf       	out	0x3d, r28	; 61
     91e:	25 eb       	ldi	r18, 0xB5	; 181
     920:	2d 87       	std	Y+13, r18	; 0x0d
     922:	41 e0       	ldi	r20, 0x01	; 1
     924:	50 e0       	ldi	r21, 0x00	; 0
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	70 e0       	ldi	r23, 0x00	; 0
     92a:	4b 83       	std	Y+3, r20	; 0x03
     92c:	5c 83       	std	Y+4, r21	; 0x04
     92e:	6d 83       	std	Y+5, r22	; 0x05
     930:	7e 83       	std	Y+6, r23	; 0x06
     932:	9e 01       	movw	r18, r28
     934:	23 5f       	subi	r18, 0xF3	; 243
     936:	3f 4f       	sbci	r19, 0xFF	; 255
     938:	3a 83       	std	Y+2, r19	; 0x02
     93a:	29 83       	std	Y+1, r18	; 0x01
     93c:	42 e0       	ldi	r20, 0x02	; 2
     93e:	50 e0       	ldi	r21, 0x00	; 0
     940:	60 e0       	ldi	r22, 0x00	; 0
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	49 87       	std	Y+9, r20	; 0x09
     946:	5a 87       	std	Y+10, r21	; 0x0a
     948:	6b 87       	std	Y+11, r22	; 0x0b
     94a:	7c 87       	std	Y+12, r23	; 0x0c
     94c:	98 87       	std	Y+8, r25	; 0x08
     94e:	8f 83       	std	Y+7, r24	; 0x07
     950:	23 e0       	ldi	r18, 0x03	; 3
     952:	41 e0       	ldi	r20, 0x01	; 1
     954:	be 01       	movw	r22, r28
     956:	69 5f       	subi	r22, 0xF9	; 249
     958:	7f 4f       	sbci	r23, 0xFF	; 255
     95a:	ce 01       	movw	r24, r28
     95c:	01 96       	adiw	r24, 0x01	; 1
     95e:	0e 94 94 17 	call	0x2f28	; 0x2f28 <Serialize_SPI>
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	2d 96       	adiw	r28, 0x0d	; 13
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	f8 94       	cli
     96a:	de bf       	out	0x3e, r29	; 62
     96c:	0f be       	out	0x3f, r0	; 63
     96e:	cd bf       	out	0x3d, r28	; 61
     970:	df 91       	pop	r29
     972:	cf 91       	pop	r28
     974:	08 95       	ret

00000976 <FlashReadVolatileConfigurationRegister>:
     976:	cf 93       	push	r28
     978:	df 93       	push	r29
     97a:	cd b7       	in	r28, 0x3d	; 61
     97c:	de b7       	in	r29, 0x3e	; 62
     97e:	2d 97       	sbiw	r28, 0x0d	; 13
     980:	0f b6       	in	r0, 0x3f	; 63
     982:	f8 94       	cli
     984:	de bf       	out	0x3e, r29	; 62
     986:	0f be       	out	0x3f, r0	; 63
     988:	cd bf       	out	0x3d, r28	; 61
     98a:	25 e8       	ldi	r18, 0x85	; 133
     98c:	2d 87       	std	Y+13, r18	; 0x0d
     98e:	41 e0       	ldi	r20, 0x01	; 1
     990:	50 e0       	ldi	r21, 0x00	; 0
     992:	60 e0       	ldi	r22, 0x00	; 0
     994:	70 e0       	ldi	r23, 0x00	; 0
     996:	4b 83       	std	Y+3, r20	; 0x03
     998:	5c 83       	std	Y+4, r21	; 0x04
     99a:	6d 83       	std	Y+5, r22	; 0x05
     99c:	7e 83       	std	Y+6, r23	; 0x06
     99e:	9e 01       	movw	r18, r28
     9a0:	23 5f       	subi	r18, 0xF3	; 243
     9a2:	3f 4f       	sbci	r19, 0xFF	; 255
     9a4:	3a 83       	std	Y+2, r19	; 0x02
     9a6:	29 83       	std	Y+1, r18	; 0x01
     9a8:	49 87       	std	Y+9, r20	; 0x09
     9aa:	5a 87       	std	Y+10, r21	; 0x0a
     9ac:	6b 87       	std	Y+11, r22	; 0x0b
     9ae:	7c 87       	std	Y+12, r23	; 0x0c
     9b0:	98 87       	std	Y+8, r25	; 0x08
     9b2:	8f 83       	std	Y+7, r24	; 0x07
     9b4:	23 e0       	ldi	r18, 0x03	; 3
     9b6:	be 01       	movw	r22, r28
     9b8:	69 5f       	subi	r22, 0xF9	; 249
     9ba:	7f 4f       	sbci	r23, 0xFF	; 255
     9bc:	ce 01       	movw	r24, r28
     9be:	01 96       	adiw	r24, 0x01	; 1
     9c0:	0e 94 94 17 	call	0x2f28	; 0x2f28 <Serialize_SPI>
     9c4:	80 e0       	ldi	r24, 0x00	; 0
     9c6:	2d 96       	adiw	r28, 0x0d	; 13
     9c8:	0f b6       	in	r0, 0x3f	; 63
     9ca:	f8 94       	cli
     9cc:	de bf       	out	0x3e, r29	; 62
     9ce:	0f be       	out	0x3f, r0	; 63
     9d0:	cd bf       	out	0x3d, r28	; 61
     9d2:	df 91       	pop	r29
     9d4:	cf 91       	pop	r28
     9d6:	08 95       	ret

000009d8 <FlashReadVolatileEnhancedConfigurationRegister>:
     9d8:	cf 93       	push	r28
     9da:	df 93       	push	r29
     9dc:	cd b7       	in	r28, 0x3d	; 61
     9de:	de b7       	in	r29, 0x3e	; 62
     9e0:	2d 97       	sbiw	r28, 0x0d	; 13
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	f8 94       	cli
     9e6:	de bf       	out	0x3e, r29	; 62
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	cd bf       	out	0x3d, r28	; 61
     9ec:	25 e6       	ldi	r18, 0x65	; 101
     9ee:	2d 87       	std	Y+13, r18	; 0x0d
     9f0:	41 e0       	ldi	r20, 0x01	; 1
     9f2:	50 e0       	ldi	r21, 0x00	; 0
     9f4:	60 e0       	ldi	r22, 0x00	; 0
     9f6:	70 e0       	ldi	r23, 0x00	; 0
     9f8:	4b 83       	std	Y+3, r20	; 0x03
     9fa:	5c 83       	std	Y+4, r21	; 0x04
     9fc:	6d 83       	std	Y+5, r22	; 0x05
     9fe:	7e 83       	std	Y+6, r23	; 0x06
     a00:	9e 01       	movw	r18, r28
     a02:	23 5f       	subi	r18, 0xF3	; 243
     a04:	3f 4f       	sbci	r19, 0xFF	; 255
     a06:	3a 83       	std	Y+2, r19	; 0x02
     a08:	29 83       	std	Y+1, r18	; 0x01
     a0a:	49 87       	std	Y+9, r20	; 0x09
     a0c:	5a 87       	std	Y+10, r21	; 0x0a
     a0e:	6b 87       	std	Y+11, r22	; 0x0b
     a10:	7c 87       	std	Y+12, r23	; 0x0c
     a12:	98 87       	std	Y+8, r25	; 0x08
     a14:	8f 83       	std	Y+7, r24	; 0x07
     a16:	23 e0       	ldi	r18, 0x03	; 3
     a18:	be 01       	movw	r22, r28
     a1a:	69 5f       	subi	r22, 0xF9	; 249
     a1c:	7f 4f       	sbci	r23, 0xFF	; 255
     a1e:	ce 01       	movw	r24, r28
     a20:	01 96       	adiw	r24, 0x01	; 1
     a22:	0e 94 94 17 	call	0x2f28	; 0x2f28 <Serialize_SPI>
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	2d 96       	adiw	r28, 0x0d	; 13
     a2a:	0f b6       	in	r0, 0x3f	; 63
     a2c:	f8 94       	cli
     a2e:	de bf       	out	0x3e, r29	; 62
     a30:	0f be       	out	0x3f, r0	; 63
     a32:	cd bf       	out	0x3d, r28	; 61
     a34:	df 91       	pop	r29
     a36:	cf 91       	pop	r28
     a38:	08 95       	ret

00000a3a <FlashReadFlagStatusRegister>:
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
     a42:	2d 97       	sbiw	r28, 0x0d	; 13
     a44:	0f b6       	in	r0, 0x3f	; 63
     a46:	f8 94       	cli
     a48:	de bf       	out	0x3e, r29	; 62
     a4a:	0f be       	out	0x3f, r0	; 63
     a4c:	cd bf       	out	0x3d, r28	; 61
     a4e:	20 e7       	ldi	r18, 0x70	; 112
     a50:	2d 87       	std	Y+13, r18	; 0x0d
     a52:	41 e0       	ldi	r20, 0x01	; 1
     a54:	50 e0       	ldi	r21, 0x00	; 0
     a56:	60 e0       	ldi	r22, 0x00	; 0
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	4b 83       	std	Y+3, r20	; 0x03
     a5c:	5c 83       	std	Y+4, r21	; 0x04
     a5e:	6d 83       	std	Y+5, r22	; 0x05
     a60:	7e 83       	std	Y+6, r23	; 0x06
     a62:	9e 01       	movw	r18, r28
     a64:	23 5f       	subi	r18, 0xF3	; 243
     a66:	3f 4f       	sbci	r19, 0xFF	; 255
     a68:	3a 83       	std	Y+2, r19	; 0x02
     a6a:	29 83       	std	Y+1, r18	; 0x01
     a6c:	49 87       	std	Y+9, r20	; 0x09
     a6e:	5a 87       	std	Y+10, r21	; 0x0a
     a70:	6b 87       	std	Y+11, r22	; 0x0b
     a72:	7c 87       	std	Y+12, r23	; 0x0c
     a74:	98 87       	std	Y+8, r25	; 0x08
     a76:	8f 83       	std	Y+7, r24	; 0x07
     a78:	23 e0       	ldi	r18, 0x03	; 3
     a7a:	be 01       	movw	r22, r28
     a7c:	69 5f       	subi	r22, 0xF9	; 249
     a7e:	7f 4f       	sbci	r23, 0xFF	; 255
     a80:	ce 01       	movw	r24, r28
     a82:	01 96       	adiw	r24, 0x01	; 1
     a84:	0e 94 94 17 	call	0x2f28	; 0x2f28 <Serialize_SPI>
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	2d 96       	adiw	r28, 0x0d	; 13
     a8c:	0f b6       	in	r0, 0x3f	; 63
     a8e:	f8 94       	cli
     a90:	de bf       	out	0x3e, r29	; 62
     a92:	0f be       	out	0x3f, r0	; 63
     a94:	cd bf       	out	0x3d, r28	; 61
     a96:	df 91       	pop	r29
     a98:	cf 91       	pop	r28
     a9a:	08 95       	ret

00000a9c <FlashEnter4ByteAddressMode>:
     a9c:	cf 93       	push	r28
     a9e:	df 93       	push	r29
     aa0:	cd b7       	in	r28, 0x3d	; 61
     aa2:	de b7       	in	r29, 0x3e	; 62
     aa4:	28 97       	sbiw	r28, 0x08	; 8
     aa6:	0f b6       	in	r0, 0x3f	; 63
     aa8:	f8 94       	cli
     aaa:	de bf       	out	0x3e, r29	; 62
     aac:	0f be       	out	0x3f, r0	; 63
     aae:	cd bf       	out	0x3d, r28	; 61
     ab0:	87 eb       	ldi	r24, 0xB7	; 183
     ab2:	8f 83       	std	Y+7, r24	; 0x07
     ab4:	a3 de       	rcall	.-698    	; 0x7fc <FlashWriteEnable>
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	90 e0       	ldi	r25, 0x00	; 0
     aba:	a0 e0       	ldi	r26, 0x00	; 0
     abc:	b0 e0       	ldi	r27, 0x00	; 0
     abe:	8b 83       	std	Y+3, r24	; 0x03
     ac0:	9c 83       	std	Y+4, r25	; 0x04
     ac2:	ad 83       	std	Y+5, r26	; 0x05
     ac4:	be 83       	std	Y+6, r27	; 0x06
     ac6:	ce 01       	movw	r24, r28
     ac8:	07 96       	adiw	r24, 0x07	; 7
     aca:	9a 83       	std	Y+2, r25	; 0x02
     acc:	89 83       	std	Y+1, r24	; 0x01
     ace:	23 e0       	ldi	r18, 0x03	; 3
     ad0:	41 e0       	ldi	r20, 0x01	; 1
     ad2:	60 e0       	ldi	r22, 0x00	; 0
     ad4:	70 e0       	ldi	r23, 0x00	; 0
     ad6:	06 97       	sbiw	r24, 0x06	; 6
     ad8:	0e 94 94 17 	call	0x2f28	; 0x2f28 <Serialize_SPI>
     adc:	8b e3       	ldi	r24, 0x3B	; 59
     ade:	93 e0       	ldi	r25, 0x03	; 3
     ae0:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>
     ae4:	e0 91 7f 0d 	lds	r30, 0x0D7F
     ae8:	f0 91 80 0d 	lds	r31, 0x0D80
     aec:	e6 59       	subi	r30, 0x96	; 150
     aee:	ff 4f       	sbci	r31, 0xFF	; 255
     af0:	01 90       	ld	r0, Z+
     af2:	f0 81       	ld	r31, Z
     af4:	e0 2d       	mov	r30, r0
     af6:	ce 01       	movw	r24, r28
     af8:	08 96       	adiw	r24, 0x08	; 8
     afa:	19 95       	eicall
     afc:	88 85       	ldd	r24, Y+8	; 0x08
     afe:	80 ff       	sbrs	r24, 0
     b00:	09 c0       	rjmp	.+18     	; 0xb14 <FlashEnter4ByteAddressMode+0x78>
     b02:	e0 91 7f 0d 	lds	r30, 0x0D7F
     b06:	f0 91 80 0d 	lds	r31, 0x0D80
     b0a:	e9 5b       	subi	r30, 0xB9	; 185
     b0c:	ff 4f       	sbci	r31, 0xFF	; 255
     b0e:	84 e0       	ldi	r24, 0x04	; 4
     b10:	80 83       	st	Z, r24
     b12:	08 c0       	rjmp	.+16     	; 0xb24 <FlashEnter4ByteAddressMode+0x88>
     b14:	e0 91 7f 0d 	lds	r30, 0x0D7F
     b18:	f0 91 80 0d 	lds	r31, 0x0D80
     b1c:	e9 5b       	subi	r30, 0xB9	; 185
     b1e:	ff 4f       	sbci	r31, 0xFF	; 255
     b20:	83 e0       	ldi	r24, 0x03	; 3
     b22:	80 83       	st	Z, r24
     b24:	80 e0       	ldi	r24, 0x00	; 0
     b26:	28 96       	adiw	r28, 0x08	; 8
     b28:	0f b6       	in	r0, 0x3f	; 63
     b2a:	f8 94       	cli
     b2c:	de bf       	out	0x3e, r29	; 62
     b2e:	0f be       	out	0x3f, r0	; 63
     b30:	cd bf       	out	0x3d, r28	; 61
     b32:	df 91       	pop	r29
     b34:	cf 91       	pop	r28
     b36:	08 95       	ret

00000b38 <N25Q_Init>:
     b38:	0f 93       	push	r16
     b3a:	1f 93       	push	r17
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	00 d0       	rcall	.+0      	; 0xb42 <N25Q_Init+0xa>
     b42:	1f 92       	push	r1
     b44:	1f 92       	push	r1
     b46:	cd b7       	in	r28, 0x3d	; 61
     b48:	de b7       	in	r29, 0x3e	; 62
     b4a:	19 82       	std	Y+1, r1	; 0x01
     b4c:	1a 82       	std	Y+2, r1	; 0x02
     b4e:	1b 82       	std	Y+3, r1	; 0x03
     b50:	1c 82       	std	Y+4, r1	; 0x04
     b52:	1d 82       	std	Y+5, r1	; 0x05
     b54:	90 93 80 0d 	sts	0x0D80, r25
     b58:	80 93 7f 0d 	sts	0x0D7F, r24
     b5c:	ce 01       	movw	r24, r28
     b5e:	02 96       	adiw	r24, 0x02	; 2
     b60:	99 dd       	rcall	.-1230   	; 0x694 <FlashReadDeviceIdentification>
     b62:	81 11       	cpse	r24, r1
     b64:	0c c0       	rjmp	.+24     	; 0xb7e <N25Q_Init+0x46>
     b66:	e0 91 7f 0d 	lds	r30, 0x0D7F
     b6a:	f0 91 80 0d 	lds	r31, 0x0D80
     b6e:	8a 81       	ldd	r24, Y+2	; 0x02
     b70:	9b 81       	ldd	r25, Y+3	; 0x03
     b72:	ac 81       	ldd	r26, Y+4	; 0x04
     b74:	bd 81       	ldd	r27, Y+5	; 0x05
     b76:	80 83       	st	Z, r24
     b78:	91 83       	std	Z+1, r25	; 0x01
     b7a:	a2 83       	std	Z+2, r26	; 0x02
     b7c:	b3 83       	std	Z+3, r27	; 0x03
     b7e:	8a 81       	ldd	r24, Y+2	; 0x02
     b80:	9b 81       	ldd	r25, Y+3	; 0x03
     b82:	ac 81       	ldd	r26, Y+4	; 0x04
     b84:	bd 81       	ldd	r27, Y+5	; 0x05
     b86:	84 31       	cpi	r24, 0x14	; 20
     b88:	2b eb       	ldi	r18, 0xBB	; 187
     b8a:	92 07       	cpc	r25, r18
     b8c:	20 e2       	ldi	r18, 0x20	; 32
     b8e:	a2 07       	cpc	r26, r18
     b90:	b1 05       	cpc	r27, r1
     b92:	09 f0       	breq	.+2      	; 0xb96 <N25Q_Init+0x5e>
     b94:	f0 c0       	rjmp	.+480    	; 0xd76 <N25Q_Init+0x23e>
     b96:	82 e5       	ldi	r24, 0x52	; 82
     b98:	93 e0       	ldi	r25, 0x03	; 3
     b9a:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>
     b9e:	e0 91 7f 0d 	lds	r30, 0x0D7F
     ba2:	f0 91 80 0d 	lds	r31, 0x0D80
     ba6:	80 e0       	ldi	r24, 0x00	; 0
     ba8:	90 e0       	ldi	r25, 0x00	; 0
     baa:	a0 e1       	ldi	r26, 0x10	; 16
     bac:	b0 e0       	ldi	r27, 0x00	; 0
     bae:	85 a7       	std	Z+45, r24	; 0x2d
     bb0:	96 a7       	std	Z+46, r25	; 0x2e
     bb2:	a7 a7       	std	Z+47, r26	; 0x2f
     bb4:	b0 ab       	std	Z+48, r27	; 0x30
     bb6:	80 e1       	ldi	r24, 0x10	; 16
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	a0 e0       	ldi	r26, 0x00	; 0
     bbc:	b0 e0       	ldi	r27, 0x00	; 0
     bbe:	85 87       	std	Z+13, r24	; 0x0d
     bc0:	96 87       	std	Z+14, r25	; 0x0e
     bc2:	a7 87       	std	Z+15, r26	; 0x0f
     bc4:	b0 8b       	std	Z+16, r27	; 0x10
     bc6:	40 e0       	ldi	r20, 0x00	; 0
     bc8:	50 e0       	ldi	r21, 0x00	; 0
     bca:	61 e0       	ldi	r22, 0x01	; 1
     bcc:	70 e0       	ldi	r23, 0x00	; 0
     bce:	41 a3       	std	Z+33, r20	; 0x21
     bd0:	52 a3       	std	Z+34, r21	; 0x22
     bd2:	63 a3       	std	Z+35, r22	; 0x23
     bd4:	74 a3       	std	Z+36, r23	; 0x24
     bd6:	85 a3       	std	Z+37, r24	; 0x25
     bd8:	96 a3       	std	Z+38, r25	; 0x26
     bda:	a7 a3       	std	Z+39, r26	; 0x27
     bdc:	b0 a7       	std	Z+40, r27	; 0x28
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	91 e0       	ldi	r25, 0x01	; 1
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	b0 e0       	ldi	r27, 0x00	; 0
     be6:	81 8b       	std	Z+17, r24	; 0x11
     be8:	92 8b       	std	Z+18, r25	; 0x12
     bea:	a3 8b       	std	Z+19, r26	; 0x13
     bec:	b4 8b       	std	Z+20, r27	; 0x14
     bee:	40 e0       	ldi	r20, 0x00	; 0
     bf0:	50 e1       	ldi	r21, 0x10	; 16
     bf2:	60 e0       	ldi	r22, 0x00	; 0
     bf4:	70 e0       	ldi	r23, 0x00	; 0
     bf6:	41 a7       	std	Z+41, r20	; 0x29
     bf8:	52 a7       	std	Z+42, r21	; 0x2a
     bfa:	63 a7       	std	Z+43, r22	; 0x2b
     bfc:	74 a7       	std	Z+44, r23	; 0x2c
     bfe:	0c e0       	ldi	r16, 0x0C	; 12
     c00:	10 e0       	ldi	r17, 0x00	; 0
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	05 8b       	std	Z+21, r16	; 0x15
     c08:	16 8b       	std	Z+22, r17	; 0x16
     c0a:	27 8b       	std	Z+23, r18	; 0x17
     c0c:	30 8f       	std	Z+24, r19	; 0x18
     c0e:	45 8f       	std	Z+29, r20	; 0x1d
     c10:	56 8f       	std	Z+30, r21	; 0x1e
     c12:	67 8f       	std	Z+31, r22	; 0x1f
     c14:	70 a3       	std	Z+32, r23	; 0x20
     c16:	81 8f       	std	Z+25, r24	; 0x19
     c18:	92 8f       	std	Z+26, r25	; 0x1a
     c1a:	a3 8f       	std	Z+27, r26	; 0x1b
     c1c:	b4 8f       	std	Z+28, r27	; 0x1c
     c1e:	80 e4       	ldi	r24, 0x40	; 64
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	a0 e0       	ldi	r26, 0x00	; 0
     c24:	b0 e0       	ldi	r27, 0x00	; 0
     c26:	81 ab       	std	Z+49, r24	; 0x31
     c28:	92 ab       	std	Z+50, r25	; 0x32
     c2a:	a3 ab       	std	Z+51, r26	; 0x33
     c2c:	b4 ab       	std	Z+52, r27	; 0x34
     c2e:	8f ef       	ldi	r24, 0xFF	; 255
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	a0 e0       	ldi	r26, 0x00	; 0
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	81 87       	std	Z+9, r24	; 0x09
     c38:	92 87       	std	Z+10, r25	; 0x0a
     c3a:	a3 87       	std	Z+11, r26	; 0x0b
     c3c:	b4 87       	std	Z+12, r27	; 0x0c
     c3e:	df 01       	movw	r26, r30
     c40:	a9 5b       	subi	r26, 0xB9	; 185
     c42:	bf 4f       	sbci	r27, 0xFF	; 255
     c44:	83 e0       	ldi	r24, 0x03	; 3
     c46:	8c 93       	st	X, r24
     c48:	13 96       	adiw	r26, 0x03	; 3
     c4a:	8a e4       	ldi	r24, 0x4A	; 74
     c4c:	93 e0       	ldi	r25, 0x03	; 3
     c4e:	11 96       	adiw	r26, 0x01	; 1
     c50:	9c 93       	st	X, r25
     c52:	8e 93       	st	-X, r24
     c54:	12 96       	adiw	r26, 0x02	; 2
     c56:	8d ec       	ldi	r24, 0xCD	; 205
     c58:	93 e0       	ldi	r25, 0x03	; 3
     c5a:	11 96       	adiw	r26, 0x01	; 1
     c5c:	9c 93       	st	X, r25
     c5e:	8e 93       	st	-X, r24
     c60:	12 96       	adiw	r26, 0x02	; 2
     c62:	86 e3       	ldi	r24, 0x36	; 54
     c64:	92 e1       	ldi	r25, 0x12	; 18
     c66:	11 96       	adiw	r26, 0x01	; 1
     c68:	9c 93       	st	X, r25
     c6a:	8e 93       	st	-X, r24
     c6c:	12 96       	adiw	r26, 0x02	; 2
     c6e:	8d e4       	ldi	r24, 0x4D	; 77
     c70:	9f e0       	ldi	r25, 0x0F	; 15
     c72:	11 96       	adiw	r26, 0x01	; 1
     c74:	9c 93       	st	X, r25
     c76:	8e 93       	st	-X, r24
     c78:	12 96       	adiw	r26, 0x02	; 2
     c7a:	87 e5       	ldi	r24, 0x57	; 87
     c7c:	92 e1       	ldi	r25, 0x12	; 18
     c7e:	11 96       	adiw	r26, 0x01	; 1
     c80:	9c 93       	st	X, r25
     c82:	8e 93       	st	-X, r24
     c84:	12 96       	adiw	r26, 0x02	; 2
     c86:	83 ed       	ldi	r24, 0xD3	; 211
     c88:	92 e1       	ldi	r25, 0x12	; 18
     c8a:	11 96       	adiw	r26, 0x01	; 1
     c8c:	9c 93       	st	X, r25
     c8e:	8e 93       	st	-X, r24
     c90:	12 96       	adiw	r26, 0x02	; 2
     c92:	11 96       	adiw	r26, 0x01	; 1
     c94:	1c 92       	st	X, r1
     c96:	1e 92       	st	-X, r1
     c98:	12 96       	adiw	r26, 0x02	; 2
     c9a:	11 96       	adiw	r26, 0x01	; 1
     c9c:	1c 92       	st	X, r1
     c9e:	1e 92       	st	-X, r1
     ca0:	50 97       	sbiw	r26, 0x10	; 16
     ca2:	8c e3       	ldi	r24, 0x3C	; 60
     ca4:	93 e0       	ldi	r25, 0x03	; 3
     ca6:	11 96       	adiw	r26, 0x01	; 1
     ca8:	9c 93       	st	X, r25
     caa:	8e 93       	st	-X, r24
     cac:	52 96       	adiw	r26, 0x12	; 18
     cae:	8e ef       	ldi	r24, 0xFE	; 254
     cb0:	93 e0       	ldi	r25, 0x03	; 3
     cb2:	11 96       	adiw	r26, 0x01	; 1
     cb4:	9c 93       	st	X, r25
     cb6:	8e 93       	st	-X, r24
     cb8:	12 96       	adiw	r26, 0x02	; 2
     cba:	8d e2       	ldi	r24, 0x2D	; 45
     cbc:	94 e0       	ldi	r25, 0x04	; 4
     cbe:	11 96       	adiw	r26, 0x01	; 1
     cc0:	9c 93       	st	X, r25
     cc2:	8e 93       	st	-X, r24
     cc4:	12 96       	adiw	r26, 0x02	; 2
     cc6:	11 96       	adiw	r26, 0x01	; 1
     cc8:	1c 92       	st	X, r1
     cca:	1e 92       	st	-X, r1
     ccc:	12 96       	adiw	r26, 0x02	; 2
     cce:	11 96       	adiw	r26, 0x01	; 1
     cd0:	1c 92       	st	X, r1
     cd2:	1e 92       	st	-X, r1
     cd4:	12 96       	adiw	r26, 0x02	; 2
     cd6:	8c e5       	ldi	r24, 0x5C	; 92
     cd8:	94 e0       	ldi	r25, 0x04	; 4
     cda:	11 96       	adiw	r26, 0x01	; 1
     cdc:	9c 93       	st	X, r25
     cde:	8e 93       	st	-X, r24
     ce0:	12 96       	adiw	r26, 0x02	; 2
     ce2:	85 e8       	ldi	r24, 0x85	; 133
     ce4:	94 e0       	ldi	r25, 0x04	; 4
     ce6:	11 96       	adiw	r26, 0x01	; 1
     ce8:	9c 93       	st	X, r25
     cea:	8e 93       	st	-X, r24
     cec:	12 96       	adiw	r26, 0x02	; 2
     cee:	8b eb       	ldi	r24, 0xBB	; 187
     cf0:	94 e0       	ldi	r25, 0x04	; 4
     cf2:	11 96       	adiw	r26, 0x01	; 1
     cf4:	9c 93       	st	X, r25
     cf6:	8e 93       	st	-X, r24
     cf8:	12 96       	adiw	r26, 0x02	; 2
     cfa:	8c ee       	ldi	r24, 0xEC	; 236
     cfc:	94 e0       	ldi	r25, 0x04	; 4
     cfe:	11 96       	adiw	r26, 0x01	; 1
     d00:	9c 93       	st	X, r25
     d02:	8e 93       	st	-X, r24
     d04:	12 96       	adiw	r26, 0x02	; 2
     d06:	8d e1       	ldi	r24, 0x1D	; 29
     d08:	95 e0       	ldi	r25, 0x05	; 5
     d0a:	11 96       	adiw	r26, 0x01	; 1
     d0c:	9c 93       	st	X, r25
     d0e:	8e 93       	st	-X, r24
     d10:	12 96       	adiw	r26, 0x02	; 2
     d12:	8a e1       	ldi	r24, 0x1A	; 26
     d14:	94 e1       	ldi	r25, 0x14	; 20
     d16:	11 96       	adiw	r26, 0x01	; 1
     d18:	9c 93       	st	X, r25
     d1a:	8e 93       	st	-X, r24
     d1c:	12 96       	adiw	r26, 0x02	; 2
     d1e:	88 eb       	ldi	r24, 0xB8	; 184
     d20:	93 e1       	ldi	r25, 0x13	; 19
     d22:	11 96       	adiw	r26, 0x01	; 1
     d24:	9c 93       	st	X, r25
     d26:	8e 93       	st	-X, r24
     d28:	12 96       	adiw	r26, 0x02	; 2
     d2a:	89 ee       	ldi	r24, 0xE9	; 233
     d2c:	93 e1       	ldi	r25, 0x13	; 19
     d2e:	11 96       	adiw	r26, 0x01	; 1
     d30:	9c 93       	st	X, r25
     d32:	8e 93       	st	-X, r24
     d34:	12 96       	adiw	r26, 0x02	; 2
     d36:	11 96       	adiw	r26, 0x01	; 1
     d38:	1c 92       	st	X, r1
     d3a:	1e 92       	st	-X, r1
     d3c:	12 96       	adiw	r26, 0x02	; 2
     d3e:	11 96       	adiw	r26, 0x01	; 1
     d40:	1c 92       	st	X, r1
     d42:	1e 92       	st	-X, r1
     d44:	12 96       	adiw	r26, 0x02	; 2
     d46:	8d e2       	ldi	r24, 0x2D	; 45
     d48:	90 e1       	ldi	r25, 0x10	; 16
     d4a:	11 96       	adiw	r26, 0x01	; 1
     d4c:	9c 93       	st	X, r25
     d4e:	8e 93       	st	-X, r24
     d50:	12 96       	adiw	r26, 0x02	; 2
     d52:	85 ef       	ldi	r24, 0xF5	; 245
     d54:	90 e1       	ldi	r25, 0x10	; 16
     d56:	11 96       	adiw	r26, 0x01	; 1
     d58:	9c 93       	st	X, r25
     d5a:	8e 93       	st	-X, r24
     d5c:	12 96       	adiw	r26, 0x02	; 2
     d5e:	83 ea       	ldi	r24, 0xA3	; 163
     d60:	94 e1       	ldi	r25, 0x14	; 20
     d62:	8d 93       	st	X+, r24
     d64:	9c 93       	st	X, r25
     d66:	e4 58       	subi	r30, 0x84	; 132
     d68:	ff 4f       	sbci	r31, 0xFF	; 255
     d6a:	86 e8       	ldi	r24, 0x86	; 134
     d6c:	9f e0       	ldi	r25, 0x0F	; 15
     d6e:	91 83       	std	Z+1, r25	; 0x01
     d70:	80 83       	st	Z, r24
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	a6 c7       	rjmp	.+3916   	; 0x1cc2 <N25Q_Init+0x118a>
     d76:	85 31       	cpi	r24, 0x15	; 21
     d78:	2b eb       	ldi	r18, 0xBB	; 187
     d7a:	92 07       	cpc	r25, r18
     d7c:	20 e2       	ldi	r18, 0x20	; 32
     d7e:	a2 07       	cpc	r26, r18
     d80:	b1 05       	cpc	r27, r1
     d82:	09 f0       	breq	.+2      	; 0xd86 <N25Q_Init+0x24e>
     d84:	fc c0       	rjmp	.+504    	; 0xf7e <N25Q_Init+0x446>
     d86:	81 e6       	ldi	r24, 0x61	; 97
     d88:	93 e0       	ldi	r25, 0x03	; 3
     d8a:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>
     d8e:	e0 91 7f 0d 	lds	r30, 0x0D7F
     d92:	f0 91 80 0d 	lds	r31, 0x0D80
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	a0 e2       	ldi	r26, 0x20	; 32
     d9c:	b0 e0       	ldi	r27, 0x00	; 0
     d9e:	85 a7       	std	Z+45, r24	; 0x2d
     da0:	96 a7       	std	Z+46, r25	; 0x2e
     da2:	a7 a7       	std	Z+47, r26	; 0x2f
     da4:	b0 ab       	std	Z+48, r27	; 0x30
     da6:	80 e2       	ldi	r24, 0x20	; 32
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	a0 e0       	ldi	r26, 0x00	; 0
     dac:	b0 e0       	ldi	r27, 0x00	; 0
     dae:	85 87       	std	Z+13, r24	; 0x0d
     db0:	96 87       	std	Z+14, r25	; 0x0e
     db2:	a7 87       	std	Z+15, r26	; 0x0f
     db4:	b0 8b       	std	Z+16, r27	; 0x10
     db6:	80 e0       	ldi	r24, 0x00	; 0
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	a1 e0       	ldi	r26, 0x01	; 1
     dbc:	b0 e0       	ldi	r27, 0x00	; 0
     dbe:	81 a3       	std	Z+33, r24	; 0x21
     dc0:	92 a3       	std	Z+34, r25	; 0x22
     dc2:	a3 a3       	std	Z+35, r26	; 0x23
     dc4:	b4 a3       	std	Z+36, r27	; 0x24
     dc6:	80 e1       	ldi	r24, 0x10	; 16
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	a0 e0       	ldi	r26, 0x00	; 0
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	85 a3       	std	Z+37, r24	; 0x25
     dd0:	96 a3       	std	Z+38, r25	; 0x26
     dd2:	a7 a3       	std	Z+39, r26	; 0x27
     dd4:	b0 a7       	std	Z+40, r27	; 0x28
     dd6:	80 e0       	ldi	r24, 0x00	; 0
     dd8:	92 e0       	ldi	r25, 0x02	; 2
     dda:	a0 e0       	ldi	r26, 0x00	; 0
     ddc:	b0 e0       	ldi	r27, 0x00	; 0
     dde:	81 8b       	std	Z+17, r24	; 0x11
     de0:	92 8b       	std	Z+18, r25	; 0x12
     de2:	a3 8b       	std	Z+19, r26	; 0x13
     de4:	b4 8b       	std	Z+20, r27	; 0x14
     de6:	80 e0       	ldi	r24, 0x00	; 0
     de8:	90 e1       	ldi	r25, 0x10	; 16
     dea:	a0 e0       	ldi	r26, 0x00	; 0
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	81 a7       	std	Z+41, r24	; 0x29
     df0:	92 a7       	std	Z+42, r25	; 0x2a
     df2:	a3 a7       	std	Z+43, r26	; 0x2b
     df4:	b4 a7       	std	Z+44, r27	; 0x2c
     df6:	8c e0       	ldi	r24, 0x0C	; 12
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	a0 e0       	ldi	r26, 0x00	; 0
     dfc:	b0 e0       	ldi	r27, 0x00	; 0
     dfe:	85 8b       	std	Z+21, r24	; 0x15
     e00:	96 8b       	std	Z+22, r25	; 0x16
     e02:	a7 8b       	std	Z+23, r26	; 0x17
     e04:	b0 8f       	std	Z+24, r27	; 0x18
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	90 e2       	ldi	r25, 0x20	; 32
     e0a:	a0 e0       	ldi	r26, 0x00	; 0
     e0c:	b0 e0       	ldi	r27, 0x00	; 0
     e0e:	85 8f       	std	Z+29, r24	; 0x1d
     e10:	96 8f       	std	Z+30, r25	; 0x1e
     e12:	a7 8f       	std	Z+31, r26	; 0x1f
     e14:	b0 a3       	std	Z+32, r27	; 0x20
     e16:	80 e0       	ldi	r24, 0x00	; 0
     e18:	91 e0       	ldi	r25, 0x01	; 1
     e1a:	a0 e0       	ldi	r26, 0x00	; 0
     e1c:	b0 e0       	ldi	r27, 0x00	; 0
     e1e:	81 8f       	std	Z+25, r24	; 0x19
     e20:	92 8f       	std	Z+26, r25	; 0x1a
     e22:	a3 8f       	std	Z+27, r26	; 0x1b
     e24:	b4 8f       	std	Z+28, r27	; 0x1c
     e26:	80 e4       	ldi	r24, 0x40	; 64
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	a0 e0       	ldi	r26, 0x00	; 0
     e2c:	b0 e0       	ldi	r27, 0x00	; 0
     e2e:	81 ab       	std	Z+49, r24	; 0x31
     e30:	92 ab       	std	Z+50, r25	; 0x32
     e32:	a3 ab       	std	Z+51, r26	; 0x33
     e34:	b4 ab       	std	Z+52, r27	; 0x34
     e36:	8f ef       	ldi	r24, 0xFF	; 255
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	a0 e0       	ldi	r26, 0x00	; 0
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	81 87       	std	Z+9, r24	; 0x09
     e40:	92 87       	std	Z+10, r25	; 0x0a
     e42:	a3 87       	std	Z+11, r26	; 0x0b
     e44:	b4 87       	std	Z+12, r27	; 0x0c
     e46:	df 01       	movw	r26, r30
     e48:	a9 5b       	subi	r26, 0xB9	; 185
     e4a:	bf 4f       	sbci	r27, 0xFF	; 255
     e4c:	83 e0       	ldi	r24, 0x03	; 3
     e4e:	8c 93       	st	X, r24
     e50:	13 96       	adiw	r26, 0x03	; 3
     e52:	8a e4       	ldi	r24, 0x4A	; 74
     e54:	93 e0       	ldi	r25, 0x03	; 3
     e56:	11 96       	adiw	r26, 0x01	; 1
     e58:	9c 93       	st	X, r25
     e5a:	8e 93       	st	-X, r24
     e5c:	12 96       	adiw	r26, 0x02	; 2
     e5e:	8d ec       	ldi	r24, 0xCD	; 205
     e60:	93 e0       	ldi	r25, 0x03	; 3
     e62:	11 96       	adiw	r26, 0x01	; 1
     e64:	9c 93       	st	X, r25
     e66:	8e 93       	st	-X, r24
     e68:	12 96       	adiw	r26, 0x02	; 2
     e6a:	86 e3       	ldi	r24, 0x36	; 54
     e6c:	92 e1       	ldi	r25, 0x12	; 18
     e6e:	11 96       	adiw	r26, 0x01	; 1
     e70:	9c 93       	st	X, r25
     e72:	8e 93       	st	-X, r24
     e74:	12 96       	adiw	r26, 0x02	; 2
     e76:	8d e4       	ldi	r24, 0x4D	; 77
     e78:	9f e0       	ldi	r25, 0x0F	; 15
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	9c 93       	st	X, r25
     e7e:	8e 93       	st	-X, r24
     e80:	12 96       	adiw	r26, 0x02	; 2
     e82:	87 e5       	ldi	r24, 0x57	; 87
     e84:	92 e1       	ldi	r25, 0x12	; 18
     e86:	11 96       	adiw	r26, 0x01	; 1
     e88:	9c 93       	st	X, r25
     e8a:	8e 93       	st	-X, r24
     e8c:	12 96       	adiw	r26, 0x02	; 2
     e8e:	83 ed       	ldi	r24, 0xD3	; 211
     e90:	92 e1       	ldi	r25, 0x12	; 18
     e92:	11 96       	adiw	r26, 0x01	; 1
     e94:	9c 93       	st	X, r25
     e96:	8e 93       	st	-X, r24
     e98:	12 96       	adiw	r26, 0x02	; 2
     e9a:	11 96       	adiw	r26, 0x01	; 1
     e9c:	1c 92       	st	X, r1
     e9e:	1e 92       	st	-X, r1
     ea0:	12 96       	adiw	r26, 0x02	; 2
     ea2:	11 96       	adiw	r26, 0x01	; 1
     ea4:	1c 92       	st	X, r1
     ea6:	1e 92       	st	-X, r1
     ea8:	50 97       	sbiw	r26, 0x10	; 16
     eaa:	8c e3       	ldi	r24, 0x3C	; 60
     eac:	93 e0       	ldi	r25, 0x03	; 3
     eae:	11 96       	adiw	r26, 0x01	; 1
     eb0:	9c 93       	st	X, r25
     eb2:	8e 93       	st	-X, r24
     eb4:	52 96       	adiw	r26, 0x12	; 18
     eb6:	8e ef       	ldi	r24, 0xFE	; 254
     eb8:	93 e0       	ldi	r25, 0x03	; 3
     eba:	11 96       	adiw	r26, 0x01	; 1
     ebc:	9c 93       	st	X, r25
     ebe:	8e 93       	st	-X, r24
     ec0:	12 96       	adiw	r26, 0x02	; 2
     ec2:	8d e2       	ldi	r24, 0x2D	; 45
     ec4:	94 e0       	ldi	r25, 0x04	; 4
     ec6:	11 96       	adiw	r26, 0x01	; 1
     ec8:	9c 93       	st	X, r25
     eca:	8e 93       	st	-X, r24
     ecc:	12 96       	adiw	r26, 0x02	; 2
     ece:	11 96       	adiw	r26, 0x01	; 1
     ed0:	1c 92       	st	X, r1
     ed2:	1e 92       	st	-X, r1
     ed4:	12 96       	adiw	r26, 0x02	; 2
     ed6:	11 96       	adiw	r26, 0x01	; 1
     ed8:	1c 92       	st	X, r1
     eda:	1e 92       	st	-X, r1
     edc:	12 96       	adiw	r26, 0x02	; 2
     ede:	8c e5       	ldi	r24, 0x5C	; 92
     ee0:	94 e0       	ldi	r25, 0x04	; 4
     ee2:	11 96       	adiw	r26, 0x01	; 1
     ee4:	9c 93       	st	X, r25
     ee6:	8e 93       	st	-X, r24
     ee8:	12 96       	adiw	r26, 0x02	; 2
     eea:	85 e8       	ldi	r24, 0x85	; 133
     eec:	94 e0       	ldi	r25, 0x04	; 4
     eee:	11 96       	adiw	r26, 0x01	; 1
     ef0:	9c 93       	st	X, r25
     ef2:	8e 93       	st	-X, r24
     ef4:	12 96       	adiw	r26, 0x02	; 2
     ef6:	8b eb       	ldi	r24, 0xBB	; 187
     ef8:	94 e0       	ldi	r25, 0x04	; 4
     efa:	11 96       	adiw	r26, 0x01	; 1
     efc:	9c 93       	st	X, r25
     efe:	8e 93       	st	-X, r24
     f00:	12 96       	adiw	r26, 0x02	; 2
     f02:	8c ee       	ldi	r24, 0xEC	; 236
     f04:	94 e0       	ldi	r25, 0x04	; 4
     f06:	11 96       	adiw	r26, 0x01	; 1
     f08:	9c 93       	st	X, r25
     f0a:	8e 93       	st	-X, r24
     f0c:	12 96       	adiw	r26, 0x02	; 2
     f0e:	8d e1       	ldi	r24, 0x1D	; 29
     f10:	95 e0       	ldi	r25, 0x05	; 5
     f12:	11 96       	adiw	r26, 0x01	; 1
     f14:	9c 93       	st	X, r25
     f16:	8e 93       	st	-X, r24
     f18:	12 96       	adiw	r26, 0x02	; 2
     f1a:	8a e1       	ldi	r24, 0x1A	; 26
     f1c:	94 e1       	ldi	r25, 0x14	; 20
     f1e:	11 96       	adiw	r26, 0x01	; 1
     f20:	9c 93       	st	X, r25
     f22:	8e 93       	st	-X, r24
     f24:	12 96       	adiw	r26, 0x02	; 2
     f26:	88 eb       	ldi	r24, 0xB8	; 184
     f28:	93 e1       	ldi	r25, 0x13	; 19
     f2a:	11 96       	adiw	r26, 0x01	; 1
     f2c:	9c 93       	st	X, r25
     f2e:	8e 93       	st	-X, r24
     f30:	12 96       	adiw	r26, 0x02	; 2
     f32:	89 ee       	ldi	r24, 0xE9	; 233
     f34:	93 e1       	ldi	r25, 0x13	; 19
     f36:	11 96       	adiw	r26, 0x01	; 1
     f38:	9c 93       	st	X, r25
     f3a:	8e 93       	st	-X, r24
     f3c:	12 96       	adiw	r26, 0x02	; 2
     f3e:	11 96       	adiw	r26, 0x01	; 1
     f40:	1c 92       	st	X, r1
     f42:	1e 92       	st	-X, r1
     f44:	12 96       	adiw	r26, 0x02	; 2
     f46:	11 96       	adiw	r26, 0x01	; 1
     f48:	1c 92       	st	X, r1
     f4a:	1e 92       	st	-X, r1
     f4c:	12 96       	adiw	r26, 0x02	; 2
     f4e:	8d e2       	ldi	r24, 0x2D	; 45
     f50:	90 e1       	ldi	r25, 0x10	; 16
     f52:	11 96       	adiw	r26, 0x01	; 1
     f54:	9c 93       	st	X, r25
     f56:	8e 93       	st	-X, r24
     f58:	12 96       	adiw	r26, 0x02	; 2
     f5a:	85 ef       	ldi	r24, 0xF5	; 245
     f5c:	90 e1       	ldi	r25, 0x10	; 16
     f5e:	11 96       	adiw	r26, 0x01	; 1
     f60:	9c 93       	st	X, r25
     f62:	8e 93       	st	-X, r24
     f64:	12 96       	adiw	r26, 0x02	; 2
     f66:	83 ea       	ldi	r24, 0xA3	; 163
     f68:	94 e1       	ldi	r25, 0x14	; 20
     f6a:	8d 93       	st	X+, r24
     f6c:	9c 93       	st	X, r25
     f6e:	e4 58       	subi	r30, 0x84	; 132
     f70:	ff 4f       	sbci	r31, 0xFF	; 255
     f72:	86 e8       	ldi	r24, 0x86	; 134
     f74:	9f e0       	ldi	r25, 0x0F	; 15
     f76:	91 83       	std	Z+1, r25	; 0x01
     f78:	80 83       	st	Z, r24
     f7a:	80 e0       	ldi	r24, 0x00	; 0
     f7c:	a2 c6       	rjmp	.+3396   	; 0x1cc2 <N25Q_Init+0x118a>
     f7e:	86 31       	cpi	r24, 0x16	; 22
     f80:	2a eb       	ldi	r18, 0xBA	; 186
     f82:	92 07       	cpc	r25, r18
     f84:	20 e2       	ldi	r18, 0x20	; 32
     f86:	a2 07       	cpc	r26, r18
     f88:	b1 05       	cpc	r27, r1
     f8a:	09 f0       	breq	.+2      	; 0xf8e <N25Q_Init+0x456>
     f8c:	f8 c0       	rjmp	.+496    	; 0x117e <N25Q_Init+0x646>
     f8e:	81 e7       	ldi	r24, 0x71	; 113
     f90:	93 e0       	ldi	r25, 0x03	; 3
     f92:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>
     f96:	e0 91 7f 0d 	lds	r30, 0x0D7F
     f9a:	f0 91 80 0d 	lds	r31, 0x0D80
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	a0 e4       	ldi	r26, 0x40	; 64
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	85 a7       	std	Z+45, r24	; 0x2d
     fa8:	96 a7       	std	Z+46, r25	; 0x2e
     faa:	a7 a7       	std	Z+47, r26	; 0x2f
     fac:	b0 ab       	std	Z+48, r27	; 0x30
     fae:	80 e4       	ldi	r24, 0x40	; 64
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	a0 e0       	ldi	r26, 0x00	; 0
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	85 87       	std	Z+13, r24	; 0x0d
     fb8:	96 87       	std	Z+14, r25	; 0x0e
     fba:	a7 87       	std	Z+15, r26	; 0x0f
     fbc:	b0 8b       	std	Z+16, r27	; 0x10
     fbe:	40 e0       	ldi	r20, 0x00	; 0
     fc0:	50 e0       	ldi	r21, 0x00	; 0
     fc2:	61 e0       	ldi	r22, 0x01	; 1
     fc4:	70 e0       	ldi	r23, 0x00	; 0
     fc6:	41 a3       	std	Z+33, r20	; 0x21
     fc8:	52 a3       	std	Z+34, r21	; 0x22
     fca:	63 a3       	std	Z+35, r22	; 0x23
     fcc:	74 a3       	std	Z+36, r23	; 0x24
     fce:	40 e1       	ldi	r20, 0x10	; 16
     fd0:	50 e0       	ldi	r21, 0x00	; 0
     fd2:	60 e0       	ldi	r22, 0x00	; 0
     fd4:	70 e0       	ldi	r23, 0x00	; 0
     fd6:	45 a3       	std	Z+37, r20	; 0x25
     fd8:	56 a3       	std	Z+38, r21	; 0x26
     fda:	67 a3       	std	Z+39, r22	; 0x27
     fdc:	70 a7       	std	Z+40, r23	; 0x28
     fde:	40 e0       	ldi	r20, 0x00	; 0
     fe0:	54 e0       	ldi	r21, 0x04	; 4
     fe2:	60 e0       	ldi	r22, 0x00	; 0
     fe4:	70 e0       	ldi	r23, 0x00	; 0
     fe6:	41 8b       	std	Z+17, r20	; 0x11
     fe8:	52 8b       	std	Z+18, r21	; 0x12
     fea:	63 8b       	std	Z+19, r22	; 0x13
     fec:	74 8b       	std	Z+20, r23	; 0x14
     fee:	40 e0       	ldi	r20, 0x00	; 0
     ff0:	50 e1       	ldi	r21, 0x10	; 16
     ff2:	60 e0       	ldi	r22, 0x00	; 0
     ff4:	70 e0       	ldi	r23, 0x00	; 0
     ff6:	41 a7       	std	Z+41, r20	; 0x29
     ff8:	52 a7       	std	Z+42, r21	; 0x2a
     ffa:	63 a7       	std	Z+43, r22	; 0x2b
     ffc:	74 a7       	std	Z+44, r23	; 0x2c
     ffe:	4c e0       	ldi	r20, 0x0C	; 12
    1000:	50 e0       	ldi	r21, 0x00	; 0
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	70 e0       	ldi	r23, 0x00	; 0
    1006:	45 8b       	std	Z+21, r20	; 0x15
    1008:	56 8b       	std	Z+22, r21	; 0x16
    100a:	67 8b       	std	Z+23, r22	; 0x17
    100c:	70 8f       	std	Z+24, r23	; 0x18
    100e:	40 e0       	ldi	r20, 0x00	; 0
    1010:	50 e4       	ldi	r21, 0x40	; 64
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	45 8f       	std	Z+29, r20	; 0x1d
    1018:	56 8f       	std	Z+30, r21	; 0x1e
    101a:	67 8f       	std	Z+31, r22	; 0x1f
    101c:	70 a3       	std	Z+32, r23	; 0x20
    101e:	40 e0       	ldi	r20, 0x00	; 0
    1020:	51 e0       	ldi	r21, 0x01	; 1
    1022:	60 e0       	ldi	r22, 0x00	; 0
    1024:	70 e0       	ldi	r23, 0x00	; 0
    1026:	41 8f       	std	Z+25, r20	; 0x19
    1028:	52 8f       	std	Z+26, r21	; 0x1a
    102a:	63 8f       	std	Z+27, r22	; 0x1b
    102c:	74 8f       	std	Z+28, r23	; 0x1c
    102e:	81 ab       	std	Z+49, r24	; 0x31
    1030:	92 ab       	std	Z+50, r25	; 0x32
    1032:	a3 ab       	std	Z+51, r26	; 0x33
    1034:	b4 ab       	std	Z+52, r27	; 0x34
    1036:	8f ef       	ldi	r24, 0xFF	; 255
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	a0 e0       	ldi	r26, 0x00	; 0
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	81 87       	std	Z+9, r24	; 0x09
    1040:	92 87       	std	Z+10, r25	; 0x0a
    1042:	a3 87       	std	Z+11, r26	; 0x0b
    1044:	b4 87       	std	Z+12, r27	; 0x0c
    1046:	df 01       	movw	r26, r30
    1048:	a9 5b       	subi	r26, 0xB9	; 185
    104a:	bf 4f       	sbci	r27, 0xFF	; 255
    104c:	83 e0       	ldi	r24, 0x03	; 3
    104e:	8c 93       	st	X, r24
    1050:	13 96       	adiw	r26, 0x03	; 3
    1052:	8a e4       	ldi	r24, 0x4A	; 74
    1054:	93 e0       	ldi	r25, 0x03	; 3
    1056:	11 96       	adiw	r26, 0x01	; 1
    1058:	9c 93       	st	X, r25
    105a:	8e 93       	st	-X, r24
    105c:	12 96       	adiw	r26, 0x02	; 2
    105e:	8d ec       	ldi	r24, 0xCD	; 205
    1060:	93 e0       	ldi	r25, 0x03	; 3
    1062:	11 96       	adiw	r26, 0x01	; 1
    1064:	9c 93       	st	X, r25
    1066:	8e 93       	st	-X, r24
    1068:	12 96       	adiw	r26, 0x02	; 2
    106a:	86 e3       	ldi	r24, 0x36	; 54
    106c:	92 e1       	ldi	r25, 0x12	; 18
    106e:	11 96       	adiw	r26, 0x01	; 1
    1070:	9c 93       	st	X, r25
    1072:	8e 93       	st	-X, r24
    1074:	12 96       	adiw	r26, 0x02	; 2
    1076:	8d e4       	ldi	r24, 0x4D	; 77
    1078:	9f e0       	ldi	r25, 0x0F	; 15
    107a:	11 96       	adiw	r26, 0x01	; 1
    107c:	9c 93       	st	X, r25
    107e:	8e 93       	st	-X, r24
    1080:	12 96       	adiw	r26, 0x02	; 2
    1082:	87 e5       	ldi	r24, 0x57	; 87
    1084:	92 e1       	ldi	r25, 0x12	; 18
    1086:	11 96       	adiw	r26, 0x01	; 1
    1088:	9c 93       	st	X, r25
    108a:	8e 93       	st	-X, r24
    108c:	12 96       	adiw	r26, 0x02	; 2
    108e:	83 ed       	ldi	r24, 0xD3	; 211
    1090:	92 e1       	ldi	r25, 0x12	; 18
    1092:	11 96       	adiw	r26, 0x01	; 1
    1094:	9c 93       	st	X, r25
    1096:	8e 93       	st	-X, r24
    1098:	12 96       	adiw	r26, 0x02	; 2
    109a:	11 96       	adiw	r26, 0x01	; 1
    109c:	1c 92       	st	X, r1
    109e:	1e 92       	st	-X, r1
    10a0:	12 96       	adiw	r26, 0x02	; 2
    10a2:	11 96       	adiw	r26, 0x01	; 1
    10a4:	1c 92       	st	X, r1
    10a6:	1e 92       	st	-X, r1
    10a8:	50 97       	sbiw	r26, 0x10	; 16
    10aa:	8c e3       	ldi	r24, 0x3C	; 60
    10ac:	93 e0       	ldi	r25, 0x03	; 3
    10ae:	11 96       	adiw	r26, 0x01	; 1
    10b0:	9c 93       	st	X, r25
    10b2:	8e 93       	st	-X, r24
    10b4:	52 96       	adiw	r26, 0x12	; 18
    10b6:	8e ef       	ldi	r24, 0xFE	; 254
    10b8:	93 e0       	ldi	r25, 0x03	; 3
    10ba:	11 96       	adiw	r26, 0x01	; 1
    10bc:	9c 93       	st	X, r25
    10be:	8e 93       	st	-X, r24
    10c0:	12 96       	adiw	r26, 0x02	; 2
    10c2:	8d e2       	ldi	r24, 0x2D	; 45
    10c4:	94 e0       	ldi	r25, 0x04	; 4
    10c6:	11 96       	adiw	r26, 0x01	; 1
    10c8:	9c 93       	st	X, r25
    10ca:	8e 93       	st	-X, r24
    10cc:	12 96       	adiw	r26, 0x02	; 2
    10ce:	11 96       	adiw	r26, 0x01	; 1
    10d0:	1c 92       	st	X, r1
    10d2:	1e 92       	st	-X, r1
    10d4:	12 96       	adiw	r26, 0x02	; 2
    10d6:	11 96       	adiw	r26, 0x01	; 1
    10d8:	1c 92       	st	X, r1
    10da:	1e 92       	st	-X, r1
    10dc:	12 96       	adiw	r26, 0x02	; 2
    10de:	8c e5       	ldi	r24, 0x5C	; 92
    10e0:	94 e0       	ldi	r25, 0x04	; 4
    10e2:	11 96       	adiw	r26, 0x01	; 1
    10e4:	9c 93       	st	X, r25
    10e6:	8e 93       	st	-X, r24
    10e8:	12 96       	adiw	r26, 0x02	; 2
    10ea:	85 e8       	ldi	r24, 0x85	; 133
    10ec:	94 e0       	ldi	r25, 0x04	; 4
    10ee:	11 96       	adiw	r26, 0x01	; 1
    10f0:	9c 93       	st	X, r25
    10f2:	8e 93       	st	-X, r24
    10f4:	12 96       	adiw	r26, 0x02	; 2
    10f6:	8b eb       	ldi	r24, 0xBB	; 187
    10f8:	94 e0       	ldi	r25, 0x04	; 4
    10fa:	11 96       	adiw	r26, 0x01	; 1
    10fc:	9c 93       	st	X, r25
    10fe:	8e 93       	st	-X, r24
    1100:	12 96       	adiw	r26, 0x02	; 2
    1102:	8c ee       	ldi	r24, 0xEC	; 236
    1104:	94 e0       	ldi	r25, 0x04	; 4
    1106:	11 96       	adiw	r26, 0x01	; 1
    1108:	9c 93       	st	X, r25
    110a:	8e 93       	st	-X, r24
    110c:	12 96       	adiw	r26, 0x02	; 2
    110e:	8d e1       	ldi	r24, 0x1D	; 29
    1110:	95 e0       	ldi	r25, 0x05	; 5
    1112:	11 96       	adiw	r26, 0x01	; 1
    1114:	9c 93       	st	X, r25
    1116:	8e 93       	st	-X, r24
    1118:	12 96       	adiw	r26, 0x02	; 2
    111a:	8a e1       	ldi	r24, 0x1A	; 26
    111c:	94 e1       	ldi	r25, 0x14	; 20
    111e:	11 96       	adiw	r26, 0x01	; 1
    1120:	9c 93       	st	X, r25
    1122:	8e 93       	st	-X, r24
    1124:	12 96       	adiw	r26, 0x02	; 2
    1126:	88 eb       	ldi	r24, 0xB8	; 184
    1128:	93 e1       	ldi	r25, 0x13	; 19
    112a:	11 96       	adiw	r26, 0x01	; 1
    112c:	9c 93       	st	X, r25
    112e:	8e 93       	st	-X, r24
    1130:	12 96       	adiw	r26, 0x02	; 2
    1132:	89 ee       	ldi	r24, 0xE9	; 233
    1134:	93 e1       	ldi	r25, 0x13	; 19
    1136:	11 96       	adiw	r26, 0x01	; 1
    1138:	9c 93       	st	X, r25
    113a:	8e 93       	st	-X, r24
    113c:	12 96       	adiw	r26, 0x02	; 2
    113e:	11 96       	adiw	r26, 0x01	; 1
    1140:	1c 92       	st	X, r1
    1142:	1e 92       	st	-X, r1
    1144:	12 96       	adiw	r26, 0x02	; 2
    1146:	11 96       	adiw	r26, 0x01	; 1
    1148:	1c 92       	st	X, r1
    114a:	1e 92       	st	-X, r1
    114c:	12 96       	adiw	r26, 0x02	; 2
    114e:	8d e2       	ldi	r24, 0x2D	; 45
    1150:	90 e1       	ldi	r25, 0x10	; 16
    1152:	11 96       	adiw	r26, 0x01	; 1
    1154:	9c 93       	st	X, r25
    1156:	8e 93       	st	-X, r24
    1158:	12 96       	adiw	r26, 0x02	; 2
    115a:	85 ef       	ldi	r24, 0xF5	; 245
    115c:	90 e1       	ldi	r25, 0x10	; 16
    115e:	11 96       	adiw	r26, 0x01	; 1
    1160:	9c 93       	st	X, r25
    1162:	8e 93       	st	-X, r24
    1164:	12 96       	adiw	r26, 0x02	; 2
    1166:	83 ea       	ldi	r24, 0xA3	; 163
    1168:	94 e1       	ldi	r25, 0x14	; 20
    116a:	8d 93       	st	X+, r24
    116c:	9c 93       	st	X, r25
    116e:	e4 58       	subi	r30, 0x84	; 132
    1170:	ff 4f       	sbci	r31, 0xFF	; 255
    1172:	86 e8       	ldi	r24, 0x86	; 134
    1174:	9f e0       	ldi	r25, 0x0F	; 15
    1176:	91 83       	std	Z+1, r25	; 0x01
    1178:	80 83       	st	Z, r24
    117a:	80 e0       	ldi	r24, 0x00	; 0
    117c:	a2 c5       	rjmp	.+2884   	; 0x1cc2 <N25Q_Init+0x118a>
    117e:	87 31       	cpi	r24, 0x17	; 23
    1180:	2a eb       	ldi	r18, 0xBA	; 186
    1182:	92 07       	cpc	r25, r18
    1184:	20 e2       	ldi	r18, 0x20	; 32
    1186:	a2 07       	cpc	r26, r18
    1188:	b1 05       	cpc	r27, r1
    118a:	09 f0       	breq	.+2      	; 0x118e <N25Q_Init+0x656>
    118c:	fc c0       	rjmp	.+504    	; 0x1386 <N25Q_Init+0x84e>
    118e:	81 e8       	ldi	r24, 0x81	; 129
    1190:	93 e0       	ldi	r25, 0x03	; 3
    1192:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>
    1196:	e0 91 7f 0d 	lds	r30, 0x0D7F
    119a:	f0 91 80 0d 	lds	r31, 0x0D80
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	a0 e8       	ldi	r26, 0x80	; 128
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	85 a7       	std	Z+45, r24	; 0x2d
    11a8:	96 a7       	std	Z+46, r25	; 0x2e
    11aa:	a7 a7       	std	Z+47, r26	; 0x2f
    11ac:	b0 ab       	std	Z+48, r27	; 0x30
    11ae:	80 e8       	ldi	r24, 0x80	; 128
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	a0 e0       	ldi	r26, 0x00	; 0
    11b4:	b0 e0       	ldi	r27, 0x00	; 0
    11b6:	85 87       	std	Z+13, r24	; 0x0d
    11b8:	96 87       	std	Z+14, r25	; 0x0e
    11ba:	a7 87       	std	Z+15, r26	; 0x0f
    11bc:	b0 8b       	std	Z+16, r27	; 0x10
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	a1 e0       	ldi	r26, 0x01	; 1
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	81 a3       	std	Z+33, r24	; 0x21
    11c8:	92 a3       	std	Z+34, r25	; 0x22
    11ca:	a3 a3       	std	Z+35, r26	; 0x23
    11cc:	b4 a3       	std	Z+36, r27	; 0x24
    11ce:	80 e1       	ldi	r24, 0x10	; 16
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	a0 e0       	ldi	r26, 0x00	; 0
    11d4:	b0 e0       	ldi	r27, 0x00	; 0
    11d6:	85 a3       	std	Z+37, r24	; 0x25
    11d8:	96 a3       	std	Z+38, r25	; 0x26
    11da:	a7 a3       	std	Z+39, r26	; 0x27
    11dc:	b0 a7       	std	Z+40, r27	; 0x28
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	98 e0       	ldi	r25, 0x08	; 8
    11e2:	a0 e0       	ldi	r26, 0x00	; 0
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	81 8b       	std	Z+17, r24	; 0x11
    11e8:	92 8b       	std	Z+18, r25	; 0x12
    11ea:	a3 8b       	std	Z+19, r26	; 0x13
    11ec:	b4 8b       	std	Z+20, r27	; 0x14
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	90 e1       	ldi	r25, 0x10	; 16
    11f2:	a0 e0       	ldi	r26, 0x00	; 0
    11f4:	b0 e0       	ldi	r27, 0x00	; 0
    11f6:	81 a7       	std	Z+41, r24	; 0x29
    11f8:	92 a7       	std	Z+42, r25	; 0x2a
    11fa:	a3 a7       	std	Z+43, r26	; 0x2b
    11fc:	b4 a7       	std	Z+44, r27	; 0x2c
    11fe:	8c e0       	ldi	r24, 0x0C	; 12
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	a0 e0       	ldi	r26, 0x00	; 0
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	85 8b       	std	Z+21, r24	; 0x15
    1208:	96 8b       	std	Z+22, r25	; 0x16
    120a:	a7 8b       	std	Z+23, r26	; 0x17
    120c:	b0 8f       	std	Z+24, r27	; 0x18
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	90 e8       	ldi	r25, 0x80	; 128
    1212:	a0 e0       	ldi	r26, 0x00	; 0
    1214:	b0 e0       	ldi	r27, 0x00	; 0
    1216:	85 8f       	std	Z+29, r24	; 0x1d
    1218:	96 8f       	std	Z+30, r25	; 0x1e
    121a:	a7 8f       	std	Z+31, r26	; 0x1f
    121c:	b0 a3       	std	Z+32, r27	; 0x20
    121e:	80 e0       	ldi	r24, 0x00	; 0
    1220:	91 e0       	ldi	r25, 0x01	; 1
    1222:	a0 e0       	ldi	r26, 0x00	; 0
    1224:	b0 e0       	ldi	r27, 0x00	; 0
    1226:	81 8f       	std	Z+25, r24	; 0x19
    1228:	92 8f       	std	Z+26, r25	; 0x1a
    122a:	a3 8f       	std	Z+27, r26	; 0x1b
    122c:	b4 8f       	std	Z+28, r27	; 0x1c
    122e:	80 e4       	ldi	r24, 0x40	; 64
    1230:	90 e0       	ldi	r25, 0x00	; 0
    1232:	a0 e0       	ldi	r26, 0x00	; 0
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	81 ab       	std	Z+49, r24	; 0x31
    1238:	92 ab       	std	Z+50, r25	; 0x32
    123a:	a3 ab       	std	Z+51, r26	; 0x33
    123c:	b4 ab       	std	Z+52, r27	; 0x34
    123e:	8f ef       	ldi	r24, 0xFF	; 255
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	a0 e0       	ldi	r26, 0x00	; 0
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	81 87       	std	Z+9, r24	; 0x09
    1248:	92 87       	std	Z+10, r25	; 0x0a
    124a:	a3 87       	std	Z+11, r26	; 0x0b
    124c:	b4 87       	std	Z+12, r27	; 0x0c
    124e:	df 01       	movw	r26, r30
    1250:	a9 5b       	subi	r26, 0xB9	; 185
    1252:	bf 4f       	sbci	r27, 0xFF	; 255
    1254:	83 e0       	ldi	r24, 0x03	; 3
    1256:	8c 93       	st	X, r24
    1258:	13 96       	adiw	r26, 0x03	; 3
    125a:	8a e4       	ldi	r24, 0x4A	; 74
    125c:	93 e0       	ldi	r25, 0x03	; 3
    125e:	11 96       	adiw	r26, 0x01	; 1
    1260:	9c 93       	st	X, r25
    1262:	8e 93       	st	-X, r24
    1264:	12 96       	adiw	r26, 0x02	; 2
    1266:	8d ec       	ldi	r24, 0xCD	; 205
    1268:	93 e0       	ldi	r25, 0x03	; 3
    126a:	11 96       	adiw	r26, 0x01	; 1
    126c:	9c 93       	st	X, r25
    126e:	8e 93       	st	-X, r24
    1270:	12 96       	adiw	r26, 0x02	; 2
    1272:	86 e3       	ldi	r24, 0x36	; 54
    1274:	92 e1       	ldi	r25, 0x12	; 18
    1276:	11 96       	adiw	r26, 0x01	; 1
    1278:	9c 93       	st	X, r25
    127a:	8e 93       	st	-X, r24
    127c:	12 96       	adiw	r26, 0x02	; 2
    127e:	8d e4       	ldi	r24, 0x4D	; 77
    1280:	9f e0       	ldi	r25, 0x0F	; 15
    1282:	11 96       	adiw	r26, 0x01	; 1
    1284:	9c 93       	st	X, r25
    1286:	8e 93       	st	-X, r24
    1288:	12 96       	adiw	r26, 0x02	; 2
    128a:	87 e5       	ldi	r24, 0x57	; 87
    128c:	92 e1       	ldi	r25, 0x12	; 18
    128e:	11 96       	adiw	r26, 0x01	; 1
    1290:	9c 93       	st	X, r25
    1292:	8e 93       	st	-X, r24
    1294:	12 96       	adiw	r26, 0x02	; 2
    1296:	83 ed       	ldi	r24, 0xD3	; 211
    1298:	92 e1       	ldi	r25, 0x12	; 18
    129a:	11 96       	adiw	r26, 0x01	; 1
    129c:	9c 93       	st	X, r25
    129e:	8e 93       	st	-X, r24
    12a0:	12 96       	adiw	r26, 0x02	; 2
    12a2:	11 96       	adiw	r26, 0x01	; 1
    12a4:	1c 92       	st	X, r1
    12a6:	1e 92       	st	-X, r1
    12a8:	12 96       	adiw	r26, 0x02	; 2
    12aa:	11 96       	adiw	r26, 0x01	; 1
    12ac:	1c 92       	st	X, r1
    12ae:	1e 92       	st	-X, r1
    12b0:	50 97       	sbiw	r26, 0x10	; 16
    12b2:	8c e3       	ldi	r24, 0x3C	; 60
    12b4:	93 e0       	ldi	r25, 0x03	; 3
    12b6:	11 96       	adiw	r26, 0x01	; 1
    12b8:	9c 93       	st	X, r25
    12ba:	8e 93       	st	-X, r24
    12bc:	52 96       	adiw	r26, 0x12	; 18
    12be:	8e ef       	ldi	r24, 0xFE	; 254
    12c0:	93 e0       	ldi	r25, 0x03	; 3
    12c2:	11 96       	adiw	r26, 0x01	; 1
    12c4:	9c 93       	st	X, r25
    12c6:	8e 93       	st	-X, r24
    12c8:	12 96       	adiw	r26, 0x02	; 2
    12ca:	8d e2       	ldi	r24, 0x2D	; 45
    12cc:	94 e0       	ldi	r25, 0x04	; 4
    12ce:	11 96       	adiw	r26, 0x01	; 1
    12d0:	9c 93       	st	X, r25
    12d2:	8e 93       	st	-X, r24
    12d4:	12 96       	adiw	r26, 0x02	; 2
    12d6:	11 96       	adiw	r26, 0x01	; 1
    12d8:	1c 92       	st	X, r1
    12da:	1e 92       	st	-X, r1
    12dc:	12 96       	adiw	r26, 0x02	; 2
    12de:	11 96       	adiw	r26, 0x01	; 1
    12e0:	1c 92       	st	X, r1
    12e2:	1e 92       	st	-X, r1
    12e4:	12 96       	adiw	r26, 0x02	; 2
    12e6:	8c e5       	ldi	r24, 0x5C	; 92
    12e8:	94 e0       	ldi	r25, 0x04	; 4
    12ea:	11 96       	adiw	r26, 0x01	; 1
    12ec:	9c 93       	st	X, r25
    12ee:	8e 93       	st	-X, r24
    12f0:	12 96       	adiw	r26, 0x02	; 2
    12f2:	85 e8       	ldi	r24, 0x85	; 133
    12f4:	94 e0       	ldi	r25, 0x04	; 4
    12f6:	11 96       	adiw	r26, 0x01	; 1
    12f8:	9c 93       	st	X, r25
    12fa:	8e 93       	st	-X, r24
    12fc:	12 96       	adiw	r26, 0x02	; 2
    12fe:	8b eb       	ldi	r24, 0xBB	; 187
    1300:	94 e0       	ldi	r25, 0x04	; 4
    1302:	11 96       	adiw	r26, 0x01	; 1
    1304:	9c 93       	st	X, r25
    1306:	8e 93       	st	-X, r24
    1308:	12 96       	adiw	r26, 0x02	; 2
    130a:	8c ee       	ldi	r24, 0xEC	; 236
    130c:	94 e0       	ldi	r25, 0x04	; 4
    130e:	11 96       	adiw	r26, 0x01	; 1
    1310:	9c 93       	st	X, r25
    1312:	8e 93       	st	-X, r24
    1314:	12 96       	adiw	r26, 0x02	; 2
    1316:	8d e1       	ldi	r24, 0x1D	; 29
    1318:	95 e0       	ldi	r25, 0x05	; 5
    131a:	11 96       	adiw	r26, 0x01	; 1
    131c:	9c 93       	st	X, r25
    131e:	8e 93       	st	-X, r24
    1320:	12 96       	adiw	r26, 0x02	; 2
    1322:	8a e1       	ldi	r24, 0x1A	; 26
    1324:	94 e1       	ldi	r25, 0x14	; 20
    1326:	11 96       	adiw	r26, 0x01	; 1
    1328:	9c 93       	st	X, r25
    132a:	8e 93       	st	-X, r24
    132c:	12 96       	adiw	r26, 0x02	; 2
    132e:	88 eb       	ldi	r24, 0xB8	; 184
    1330:	93 e1       	ldi	r25, 0x13	; 19
    1332:	11 96       	adiw	r26, 0x01	; 1
    1334:	9c 93       	st	X, r25
    1336:	8e 93       	st	-X, r24
    1338:	12 96       	adiw	r26, 0x02	; 2
    133a:	89 ee       	ldi	r24, 0xE9	; 233
    133c:	93 e1       	ldi	r25, 0x13	; 19
    133e:	11 96       	adiw	r26, 0x01	; 1
    1340:	9c 93       	st	X, r25
    1342:	8e 93       	st	-X, r24
    1344:	12 96       	adiw	r26, 0x02	; 2
    1346:	11 96       	adiw	r26, 0x01	; 1
    1348:	1c 92       	st	X, r1
    134a:	1e 92       	st	-X, r1
    134c:	12 96       	adiw	r26, 0x02	; 2
    134e:	11 96       	adiw	r26, 0x01	; 1
    1350:	1c 92       	st	X, r1
    1352:	1e 92       	st	-X, r1
    1354:	12 96       	adiw	r26, 0x02	; 2
    1356:	8d e2       	ldi	r24, 0x2D	; 45
    1358:	90 e1       	ldi	r25, 0x10	; 16
    135a:	11 96       	adiw	r26, 0x01	; 1
    135c:	9c 93       	st	X, r25
    135e:	8e 93       	st	-X, r24
    1360:	12 96       	adiw	r26, 0x02	; 2
    1362:	85 ef       	ldi	r24, 0xF5	; 245
    1364:	90 e1       	ldi	r25, 0x10	; 16
    1366:	11 96       	adiw	r26, 0x01	; 1
    1368:	9c 93       	st	X, r25
    136a:	8e 93       	st	-X, r24
    136c:	12 96       	adiw	r26, 0x02	; 2
    136e:	83 ea       	ldi	r24, 0xA3	; 163
    1370:	94 e1       	ldi	r25, 0x14	; 20
    1372:	8d 93       	st	X+, r24
    1374:	9c 93       	st	X, r25
    1376:	e4 58       	subi	r30, 0x84	; 132
    1378:	ff 4f       	sbci	r31, 0xFF	; 255
    137a:	86 e8       	ldi	r24, 0x86	; 134
    137c:	9f e0       	ldi	r25, 0x0F	; 15
    137e:	91 83       	std	Z+1, r25	; 0x01
    1380:	80 83       	st	Z, r24
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	9e c4       	rjmp	.+2364   	; 0x1cc2 <N25Q_Init+0x118a>
    1386:	88 31       	cpi	r24, 0x18	; 24
    1388:	2a eb       	ldi	r18, 0xBA	; 186
    138a:	92 07       	cpc	r25, r18
    138c:	20 e2       	ldi	r18, 0x20	; 32
    138e:	a2 07       	cpc	r26, r18
    1390:	b1 05       	cpc	r27, r1
    1392:	09 f0       	breq	.+2      	; 0x1396 <N25Q_Init+0x85e>
    1394:	f0 c0       	rjmp	.+480    	; 0x1576 <N25Q_Init+0xa3e>
    1396:	81 e9       	ldi	r24, 0x91	; 145
    1398:	93 e0       	ldi	r25, 0x03	; 3
    139a:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>
    139e:	e0 91 7f 0d 	lds	r30, 0x0D7F
    13a2:	f0 91 80 0d 	lds	r31, 0x0D80
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	a0 e0       	ldi	r26, 0x00	; 0
    13ac:	b1 e0       	ldi	r27, 0x01	; 1
    13ae:	85 a7       	std	Z+45, r24	; 0x2d
    13b0:	96 a7       	std	Z+46, r25	; 0x2e
    13b2:	a7 a7       	std	Z+47, r26	; 0x2f
    13b4:	b0 ab       	std	Z+48, r27	; 0x30
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	91 e0       	ldi	r25, 0x01	; 1
    13ba:	a0 e0       	ldi	r26, 0x00	; 0
    13bc:	b0 e0       	ldi	r27, 0x00	; 0
    13be:	85 87       	std	Z+13, r24	; 0x0d
    13c0:	96 87       	std	Z+14, r25	; 0x0e
    13c2:	a7 87       	std	Z+15, r26	; 0x0f
    13c4:	b0 8b       	std	Z+16, r27	; 0x10
    13c6:	40 e0       	ldi	r20, 0x00	; 0
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	61 e0       	ldi	r22, 0x01	; 1
    13cc:	70 e0       	ldi	r23, 0x00	; 0
    13ce:	41 a3       	std	Z+33, r20	; 0x21
    13d0:	52 a3       	std	Z+34, r21	; 0x22
    13d2:	63 a3       	std	Z+35, r22	; 0x23
    13d4:	74 a3       	std	Z+36, r23	; 0x24
    13d6:	00 e1       	ldi	r16, 0x10	; 16
    13d8:	10 e0       	ldi	r17, 0x00	; 0
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	05 a3       	std	Z+37, r16	; 0x25
    13e0:	16 a3       	std	Z+38, r17	; 0x26
    13e2:	27 a3       	std	Z+39, r18	; 0x27
    13e4:	30 a7       	std	Z+40, r19	; 0x28
    13e6:	00 e0       	ldi	r16, 0x00	; 0
    13e8:	10 e1       	ldi	r17, 0x10	; 16
    13ea:	20 e0       	ldi	r18, 0x00	; 0
    13ec:	30 e0       	ldi	r19, 0x00	; 0
    13ee:	01 8b       	std	Z+17, r16	; 0x11
    13f0:	12 8b       	std	Z+18, r17	; 0x12
    13f2:	23 8b       	std	Z+19, r18	; 0x13
    13f4:	34 8b       	std	Z+20, r19	; 0x14
    13f6:	01 a7       	std	Z+41, r16	; 0x29
    13f8:	12 a7       	std	Z+42, r17	; 0x2a
    13fa:	23 a7       	std	Z+43, r18	; 0x2b
    13fc:	34 a7       	std	Z+44, r19	; 0x2c
    13fe:	0c e0       	ldi	r16, 0x0C	; 12
    1400:	10 e0       	ldi	r17, 0x00	; 0
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	05 8b       	std	Z+21, r16	; 0x15
    1408:	16 8b       	std	Z+22, r17	; 0x16
    140a:	27 8b       	std	Z+23, r18	; 0x17
    140c:	30 8f       	std	Z+24, r19	; 0x18
    140e:	45 8f       	std	Z+29, r20	; 0x1d
    1410:	56 8f       	std	Z+30, r21	; 0x1e
    1412:	67 8f       	std	Z+31, r22	; 0x1f
    1414:	70 a3       	std	Z+32, r23	; 0x20
    1416:	81 8f       	std	Z+25, r24	; 0x19
    1418:	92 8f       	std	Z+26, r25	; 0x1a
    141a:	a3 8f       	std	Z+27, r26	; 0x1b
    141c:	b4 8f       	std	Z+28, r27	; 0x1c
    141e:	80 e4       	ldi	r24, 0x40	; 64
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	a0 e0       	ldi	r26, 0x00	; 0
    1424:	b0 e0       	ldi	r27, 0x00	; 0
    1426:	81 ab       	std	Z+49, r24	; 0x31
    1428:	92 ab       	std	Z+50, r25	; 0x32
    142a:	a3 ab       	std	Z+51, r26	; 0x33
    142c:	b4 ab       	std	Z+52, r27	; 0x34
    142e:	8f ef       	ldi	r24, 0xFF	; 255
    1430:	90 e0       	ldi	r25, 0x00	; 0
    1432:	a0 e0       	ldi	r26, 0x00	; 0
    1434:	b0 e0       	ldi	r27, 0x00	; 0
    1436:	81 87       	std	Z+9, r24	; 0x09
    1438:	92 87       	std	Z+10, r25	; 0x0a
    143a:	a3 87       	std	Z+11, r26	; 0x0b
    143c:	b4 87       	std	Z+12, r27	; 0x0c
    143e:	df 01       	movw	r26, r30
    1440:	a9 5b       	subi	r26, 0xB9	; 185
    1442:	bf 4f       	sbci	r27, 0xFF	; 255
    1444:	83 e0       	ldi	r24, 0x03	; 3
    1446:	8c 93       	st	X, r24
    1448:	13 96       	adiw	r26, 0x03	; 3
    144a:	8a e4       	ldi	r24, 0x4A	; 74
    144c:	93 e0       	ldi	r25, 0x03	; 3
    144e:	11 96       	adiw	r26, 0x01	; 1
    1450:	9c 93       	st	X, r25
    1452:	8e 93       	st	-X, r24
    1454:	12 96       	adiw	r26, 0x02	; 2
    1456:	8d ec       	ldi	r24, 0xCD	; 205
    1458:	93 e0       	ldi	r25, 0x03	; 3
    145a:	11 96       	adiw	r26, 0x01	; 1
    145c:	9c 93       	st	X, r25
    145e:	8e 93       	st	-X, r24
    1460:	12 96       	adiw	r26, 0x02	; 2
    1462:	86 e3       	ldi	r24, 0x36	; 54
    1464:	92 e1       	ldi	r25, 0x12	; 18
    1466:	11 96       	adiw	r26, 0x01	; 1
    1468:	9c 93       	st	X, r25
    146a:	8e 93       	st	-X, r24
    146c:	12 96       	adiw	r26, 0x02	; 2
    146e:	8d e4       	ldi	r24, 0x4D	; 77
    1470:	9f e0       	ldi	r25, 0x0F	; 15
    1472:	11 96       	adiw	r26, 0x01	; 1
    1474:	9c 93       	st	X, r25
    1476:	8e 93       	st	-X, r24
    1478:	12 96       	adiw	r26, 0x02	; 2
    147a:	87 e5       	ldi	r24, 0x57	; 87
    147c:	92 e1       	ldi	r25, 0x12	; 18
    147e:	11 96       	adiw	r26, 0x01	; 1
    1480:	9c 93       	st	X, r25
    1482:	8e 93       	st	-X, r24
    1484:	12 96       	adiw	r26, 0x02	; 2
    1486:	83 ed       	ldi	r24, 0xD3	; 211
    1488:	92 e1       	ldi	r25, 0x12	; 18
    148a:	11 96       	adiw	r26, 0x01	; 1
    148c:	9c 93       	st	X, r25
    148e:	8e 93       	st	-X, r24
    1490:	12 96       	adiw	r26, 0x02	; 2
    1492:	11 96       	adiw	r26, 0x01	; 1
    1494:	1c 92       	st	X, r1
    1496:	1e 92       	st	-X, r1
    1498:	12 96       	adiw	r26, 0x02	; 2
    149a:	11 96       	adiw	r26, 0x01	; 1
    149c:	1c 92       	st	X, r1
    149e:	1e 92       	st	-X, r1
    14a0:	50 97       	sbiw	r26, 0x10	; 16
    14a2:	8c e3       	ldi	r24, 0x3C	; 60
    14a4:	93 e0       	ldi	r25, 0x03	; 3
    14a6:	11 96       	adiw	r26, 0x01	; 1
    14a8:	9c 93       	st	X, r25
    14aa:	8e 93       	st	-X, r24
    14ac:	52 96       	adiw	r26, 0x12	; 18
    14ae:	8e ef       	ldi	r24, 0xFE	; 254
    14b0:	93 e0       	ldi	r25, 0x03	; 3
    14b2:	11 96       	adiw	r26, 0x01	; 1
    14b4:	9c 93       	st	X, r25
    14b6:	8e 93       	st	-X, r24
    14b8:	12 96       	adiw	r26, 0x02	; 2
    14ba:	8d e2       	ldi	r24, 0x2D	; 45
    14bc:	94 e0       	ldi	r25, 0x04	; 4
    14be:	11 96       	adiw	r26, 0x01	; 1
    14c0:	9c 93       	st	X, r25
    14c2:	8e 93       	st	-X, r24
    14c4:	12 96       	adiw	r26, 0x02	; 2
    14c6:	11 96       	adiw	r26, 0x01	; 1
    14c8:	1c 92       	st	X, r1
    14ca:	1e 92       	st	-X, r1
    14cc:	12 96       	adiw	r26, 0x02	; 2
    14ce:	11 96       	adiw	r26, 0x01	; 1
    14d0:	1c 92       	st	X, r1
    14d2:	1e 92       	st	-X, r1
    14d4:	12 96       	adiw	r26, 0x02	; 2
    14d6:	8c e5       	ldi	r24, 0x5C	; 92
    14d8:	94 e0       	ldi	r25, 0x04	; 4
    14da:	11 96       	adiw	r26, 0x01	; 1
    14dc:	9c 93       	st	X, r25
    14de:	8e 93       	st	-X, r24
    14e0:	12 96       	adiw	r26, 0x02	; 2
    14e2:	85 e8       	ldi	r24, 0x85	; 133
    14e4:	94 e0       	ldi	r25, 0x04	; 4
    14e6:	11 96       	adiw	r26, 0x01	; 1
    14e8:	9c 93       	st	X, r25
    14ea:	8e 93       	st	-X, r24
    14ec:	12 96       	adiw	r26, 0x02	; 2
    14ee:	8b eb       	ldi	r24, 0xBB	; 187
    14f0:	94 e0       	ldi	r25, 0x04	; 4
    14f2:	11 96       	adiw	r26, 0x01	; 1
    14f4:	9c 93       	st	X, r25
    14f6:	8e 93       	st	-X, r24
    14f8:	12 96       	adiw	r26, 0x02	; 2
    14fa:	8c ee       	ldi	r24, 0xEC	; 236
    14fc:	94 e0       	ldi	r25, 0x04	; 4
    14fe:	11 96       	adiw	r26, 0x01	; 1
    1500:	9c 93       	st	X, r25
    1502:	8e 93       	st	-X, r24
    1504:	12 96       	adiw	r26, 0x02	; 2
    1506:	8d e1       	ldi	r24, 0x1D	; 29
    1508:	95 e0       	ldi	r25, 0x05	; 5
    150a:	11 96       	adiw	r26, 0x01	; 1
    150c:	9c 93       	st	X, r25
    150e:	8e 93       	st	-X, r24
    1510:	12 96       	adiw	r26, 0x02	; 2
    1512:	8a e1       	ldi	r24, 0x1A	; 26
    1514:	94 e1       	ldi	r25, 0x14	; 20
    1516:	11 96       	adiw	r26, 0x01	; 1
    1518:	9c 93       	st	X, r25
    151a:	8e 93       	st	-X, r24
    151c:	12 96       	adiw	r26, 0x02	; 2
    151e:	88 eb       	ldi	r24, 0xB8	; 184
    1520:	93 e1       	ldi	r25, 0x13	; 19
    1522:	11 96       	adiw	r26, 0x01	; 1
    1524:	9c 93       	st	X, r25
    1526:	8e 93       	st	-X, r24
    1528:	12 96       	adiw	r26, 0x02	; 2
    152a:	89 ee       	ldi	r24, 0xE9	; 233
    152c:	93 e1       	ldi	r25, 0x13	; 19
    152e:	11 96       	adiw	r26, 0x01	; 1
    1530:	9c 93       	st	X, r25
    1532:	8e 93       	st	-X, r24
    1534:	12 96       	adiw	r26, 0x02	; 2
    1536:	11 96       	adiw	r26, 0x01	; 1
    1538:	1c 92       	st	X, r1
    153a:	1e 92       	st	-X, r1
    153c:	12 96       	adiw	r26, 0x02	; 2
    153e:	11 96       	adiw	r26, 0x01	; 1
    1540:	1c 92       	st	X, r1
    1542:	1e 92       	st	-X, r1
    1544:	12 96       	adiw	r26, 0x02	; 2
    1546:	8d e2       	ldi	r24, 0x2D	; 45
    1548:	90 e1       	ldi	r25, 0x10	; 16
    154a:	11 96       	adiw	r26, 0x01	; 1
    154c:	9c 93       	st	X, r25
    154e:	8e 93       	st	-X, r24
    1550:	12 96       	adiw	r26, 0x02	; 2
    1552:	85 ef       	ldi	r24, 0xF5	; 245
    1554:	90 e1       	ldi	r25, 0x10	; 16
    1556:	11 96       	adiw	r26, 0x01	; 1
    1558:	9c 93       	st	X, r25
    155a:	8e 93       	st	-X, r24
    155c:	12 96       	adiw	r26, 0x02	; 2
    155e:	83 ea       	ldi	r24, 0xA3	; 163
    1560:	94 e1       	ldi	r25, 0x14	; 20
    1562:	8d 93       	st	X+, r24
    1564:	9c 93       	st	X, r25
    1566:	e4 58       	subi	r30, 0x84	; 132
    1568:	ff 4f       	sbci	r31, 0xFF	; 255
    156a:	86 e8       	ldi	r24, 0x86	; 134
    156c:	9f e0       	ldi	r25, 0x0F	; 15
    156e:	91 83       	std	Z+1, r25	; 0x01
    1570:	80 83       	st	Z, r24
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	a6 c3       	rjmp	.+1868   	; 0x1cc2 <N25Q_Init+0x118a>
    1576:	89 31       	cpi	r24, 0x19	; 25
    1578:	2a eb       	ldi	r18, 0xBA	; 186
    157a:	92 07       	cpc	r25, r18
    157c:	20 e2       	ldi	r18, 0x20	; 32
    157e:	a2 07       	cpc	r26, r18
    1580:	b1 05       	cpc	r27, r1
    1582:	09 f0       	breq	.+2      	; 0x1586 <N25Q_Init+0xa4e>
    1584:	18 c1       	rjmp	.+560    	; 0x17b6 <N25Q_Init+0xc7e>
    1586:	82 ea       	ldi	r24, 0xA2	; 162
    1588:	93 e0       	ldi	r25, 0x03	; 3
    158a:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>
    158e:	e0 91 7f 0d 	lds	r30, 0x0D7F
    1592:	f0 91 80 0d 	lds	r31, 0x0D80
    1596:	80 e0       	ldi	r24, 0x00	; 0
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	a0 e0       	ldi	r26, 0x00	; 0
    159c:	b2 e0       	ldi	r27, 0x02	; 2
    159e:	85 a7       	std	Z+45, r24	; 0x2d
    15a0:	96 a7       	std	Z+46, r25	; 0x2e
    15a2:	a7 a7       	std	Z+47, r26	; 0x2f
    15a4:	b0 ab       	std	Z+48, r27	; 0x30
    15a6:	80 e0       	ldi	r24, 0x00	; 0
    15a8:	92 e0       	ldi	r25, 0x02	; 2
    15aa:	a0 e0       	ldi	r26, 0x00	; 0
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	85 87       	std	Z+13, r24	; 0x0d
    15b0:	96 87       	std	Z+14, r25	; 0x0e
    15b2:	a7 87       	std	Z+15, r26	; 0x0f
    15b4:	b0 8b       	std	Z+16, r27	; 0x10
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	a1 e0       	ldi	r26, 0x01	; 1
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	81 a3       	std	Z+33, r24	; 0x21
    15c0:	92 a3       	std	Z+34, r25	; 0x22
    15c2:	a3 a3       	std	Z+35, r26	; 0x23
    15c4:	b4 a3       	std	Z+36, r27	; 0x24
    15c6:	80 e1       	ldi	r24, 0x10	; 16
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	a0 e0       	ldi	r26, 0x00	; 0
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	85 a3       	std	Z+37, r24	; 0x25
    15d0:	96 a3       	std	Z+38, r25	; 0x26
    15d2:	a7 a3       	std	Z+39, r26	; 0x27
    15d4:	b0 a7       	std	Z+40, r27	; 0x28
    15d6:	80 e0       	ldi	r24, 0x00	; 0
    15d8:	90 e2       	ldi	r25, 0x20	; 32
    15da:	a0 e0       	ldi	r26, 0x00	; 0
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	81 8b       	std	Z+17, r24	; 0x11
    15e0:	92 8b       	std	Z+18, r25	; 0x12
    15e2:	a3 8b       	std	Z+19, r26	; 0x13
    15e4:	b4 8b       	std	Z+20, r27	; 0x14
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	90 e1       	ldi	r25, 0x10	; 16
    15ea:	a0 e0       	ldi	r26, 0x00	; 0
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	81 a7       	std	Z+41, r24	; 0x29
    15f0:	92 a7       	std	Z+42, r25	; 0x2a
    15f2:	a3 a7       	std	Z+43, r26	; 0x2b
    15f4:	b4 a7       	std	Z+44, r27	; 0x2c
    15f6:	8c e0       	ldi	r24, 0x0C	; 12
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	a0 e0       	ldi	r26, 0x00	; 0
    15fc:	b0 e0       	ldi	r27, 0x00	; 0
    15fe:	85 8b       	std	Z+21, r24	; 0x15
    1600:	96 8b       	std	Z+22, r25	; 0x16
    1602:	a7 8b       	std	Z+23, r26	; 0x17
    1604:	b0 8f       	std	Z+24, r27	; 0x18
    1606:	80 e0       	ldi	r24, 0x00	; 0
    1608:	90 e0       	ldi	r25, 0x00	; 0
    160a:	a2 e0       	ldi	r26, 0x02	; 2
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	85 8f       	std	Z+29, r24	; 0x1d
    1610:	96 8f       	std	Z+30, r25	; 0x1e
    1612:	a7 8f       	std	Z+31, r26	; 0x1f
    1614:	b0 a3       	std	Z+32, r27	; 0x20
    1616:	80 e0       	ldi	r24, 0x00	; 0
    1618:	91 e0       	ldi	r25, 0x01	; 1
    161a:	a0 e0       	ldi	r26, 0x00	; 0
    161c:	b0 e0       	ldi	r27, 0x00	; 0
    161e:	81 8f       	std	Z+25, r24	; 0x19
    1620:	92 8f       	std	Z+26, r25	; 0x1a
    1622:	a3 8f       	std	Z+27, r26	; 0x1b
    1624:	b4 8f       	std	Z+28, r27	; 0x1c
    1626:	80 e4       	ldi	r24, 0x40	; 64
    1628:	90 e0       	ldi	r25, 0x00	; 0
    162a:	a0 e0       	ldi	r26, 0x00	; 0
    162c:	b0 e0       	ldi	r27, 0x00	; 0
    162e:	81 ab       	std	Z+49, r24	; 0x31
    1630:	92 ab       	std	Z+50, r25	; 0x32
    1632:	a3 ab       	std	Z+51, r26	; 0x33
    1634:	b4 ab       	std	Z+52, r27	; 0x34
    1636:	8f ef       	ldi	r24, 0xFF	; 255
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	a0 e0       	ldi	r26, 0x00	; 0
    163c:	b0 e0       	ldi	r27, 0x00	; 0
    163e:	81 87       	std	Z+9, r24	; 0x09
    1640:	92 87       	std	Z+10, r25	; 0x0a
    1642:	a3 87       	std	Z+11, r26	; 0x0b
    1644:	b4 87       	std	Z+12, r27	; 0x0c
    1646:	df 01       	movw	r26, r30
    1648:	a9 5b       	subi	r26, 0xB9	; 185
    164a:	bf 4f       	sbci	r27, 0xFF	; 255
    164c:	83 e0       	ldi	r24, 0x03	; 3
    164e:	8c 93       	st	X, r24
    1650:	13 96       	adiw	r26, 0x03	; 3
    1652:	8a e4       	ldi	r24, 0x4A	; 74
    1654:	93 e0       	ldi	r25, 0x03	; 3
    1656:	11 96       	adiw	r26, 0x01	; 1
    1658:	9c 93       	st	X, r25
    165a:	8e 93       	st	-X, r24
    165c:	12 96       	adiw	r26, 0x02	; 2
    165e:	8d ec       	ldi	r24, 0xCD	; 205
    1660:	93 e0       	ldi	r25, 0x03	; 3
    1662:	11 96       	adiw	r26, 0x01	; 1
    1664:	9c 93       	st	X, r25
    1666:	8e 93       	st	-X, r24
    1668:	12 96       	adiw	r26, 0x02	; 2
    166a:	86 e3       	ldi	r24, 0x36	; 54
    166c:	92 e1       	ldi	r25, 0x12	; 18
    166e:	11 96       	adiw	r26, 0x01	; 1
    1670:	9c 93       	st	X, r25
    1672:	8e 93       	st	-X, r24
    1674:	12 96       	adiw	r26, 0x02	; 2
    1676:	8d e4       	ldi	r24, 0x4D	; 77
    1678:	9f e0       	ldi	r25, 0x0F	; 15
    167a:	11 96       	adiw	r26, 0x01	; 1
    167c:	9c 93       	st	X, r25
    167e:	8e 93       	st	-X, r24
    1680:	12 96       	adiw	r26, 0x02	; 2
    1682:	87 e5       	ldi	r24, 0x57	; 87
    1684:	92 e1       	ldi	r25, 0x12	; 18
    1686:	11 96       	adiw	r26, 0x01	; 1
    1688:	9c 93       	st	X, r25
    168a:	8e 93       	st	-X, r24
    168c:	12 96       	adiw	r26, 0x02	; 2
    168e:	83 ed       	ldi	r24, 0xD3	; 211
    1690:	92 e1       	ldi	r25, 0x12	; 18
    1692:	11 96       	adiw	r26, 0x01	; 1
    1694:	9c 93       	st	X, r25
    1696:	8e 93       	st	-X, r24
    1698:	12 96       	adiw	r26, 0x02	; 2
    169a:	11 96       	adiw	r26, 0x01	; 1
    169c:	1c 92       	st	X, r1
    169e:	1e 92       	st	-X, r1
    16a0:	12 96       	adiw	r26, 0x02	; 2
    16a2:	11 96       	adiw	r26, 0x01	; 1
    16a4:	1c 92       	st	X, r1
    16a6:	1e 92       	st	-X, r1
    16a8:	50 97       	sbiw	r26, 0x10	; 16
    16aa:	8c e3       	ldi	r24, 0x3C	; 60
    16ac:	93 e0       	ldi	r25, 0x03	; 3
    16ae:	11 96       	adiw	r26, 0x01	; 1
    16b0:	9c 93       	st	X, r25
    16b2:	8e 93       	st	-X, r24
    16b4:	52 96       	adiw	r26, 0x12	; 18
    16b6:	8e ef       	ldi	r24, 0xFE	; 254
    16b8:	93 e0       	ldi	r25, 0x03	; 3
    16ba:	11 96       	adiw	r26, 0x01	; 1
    16bc:	9c 93       	st	X, r25
    16be:	8e 93       	st	-X, r24
    16c0:	12 96       	adiw	r26, 0x02	; 2
    16c2:	8d e2       	ldi	r24, 0x2D	; 45
    16c4:	94 e0       	ldi	r25, 0x04	; 4
    16c6:	11 96       	adiw	r26, 0x01	; 1
    16c8:	9c 93       	st	X, r25
    16ca:	8e 93       	st	-X, r24
    16cc:	12 96       	adiw	r26, 0x02	; 2
    16ce:	11 96       	adiw	r26, 0x01	; 1
    16d0:	1c 92       	st	X, r1
    16d2:	1e 92       	st	-X, r1
    16d4:	12 96       	adiw	r26, 0x02	; 2
    16d6:	11 96       	adiw	r26, 0x01	; 1
    16d8:	1c 92       	st	X, r1
    16da:	1e 92       	st	-X, r1
    16dc:	12 96       	adiw	r26, 0x02	; 2
    16de:	8c e5       	ldi	r24, 0x5C	; 92
    16e0:	94 e0       	ldi	r25, 0x04	; 4
    16e2:	11 96       	adiw	r26, 0x01	; 1
    16e4:	9c 93       	st	X, r25
    16e6:	8e 93       	st	-X, r24
    16e8:	12 96       	adiw	r26, 0x02	; 2
    16ea:	85 e8       	ldi	r24, 0x85	; 133
    16ec:	94 e0       	ldi	r25, 0x04	; 4
    16ee:	11 96       	adiw	r26, 0x01	; 1
    16f0:	9c 93       	st	X, r25
    16f2:	8e 93       	st	-X, r24
    16f4:	12 96       	adiw	r26, 0x02	; 2
    16f6:	8b eb       	ldi	r24, 0xBB	; 187
    16f8:	94 e0       	ldi	r25, 0x04	; 4
    16fa:	11 96       	adiw	r26, 0x01	; 1
    16fc:	9c 93       	st	X, r25
    16fe:	8e 93       	st	-X, r24
    1700:	12 96       	adiw	r26, 0x02	; 2
    1702:	8c ee       	ldi	r24, 0xEC	; 236
    1704:	94 e0       	ldi	r25, 0x04	; 4
    1706:	11 96       	adiw	r26, 0x01	; 1
    1708:	9c 93       	st	X, r25
    170a:	8e 93       	st	-X, r24
    170c:	12 96       	adiw	r26, 0x02	; 2
    170e:	8d e1       	ldi	r24, 0x1D	; 29
    1710:	95 e0       	ldi	r25, 0x05	; 5
    1712:	11 96       	adiw	r26, 0x01	; 1
    1714:	9c 93       	st	X, r25
    1716:	8e 93       	st	-X, r24
    1718:	12 96       	adiw	r26, 0x02	; 2
    171a:	8a e1       	ldi	r24, 0x1A	; 26
    171c:	94 e1       	ldi	r25, 0x14	; 20
    171e:	11 96       	adiw	r26, 0x01	; 1
    1720:	9c 93       	st	X, r25
    1722:	8e 93       	st	-X, r24
    1724:	12 96       	adiw	r26, 0x02	; 2
    1726:	88 eb       	ldi	r24, 0xB8	; 184
    1728:	93 e1       	ldi	r25, 0x13	; 19
    172a:	11 96       	adiw	r26, 0x01	; 1
    172c:	9c 93       	st	X, r25
    172e:	8e 93       	st	-X, r24
    1730:	12 96       	adiw	r26, 0x02	; 2
    1732:	89 ee       	ldi	r24, 0xE9	; 233
    1734:	93 e1       	ldi	r25, 0x13	; 19
    1736:	11 96       	adiw	r26, 0x01	; 1
    1738:	9c 93       	st	X, r25
    173a:	8e 93       	st	-X, r24
    173c:	12 96       	adiw	r26, 0x02	; 2
    173e:	8e e4       	ldi	r24, 0x4E	; 78
    1740:	95 e0       	ldi	r25, 0x05	; 5
    1742:	11 96       	adiw	r26, 0x01	; 1
    1744:	9c 93       	st	X, r25
    1746:	8e 93       	st	-X, r24
    1748:	12 96       	adiw	r26, 0x02	; 2
    174a:	8f e4       	ldi	r24, 0x4F	; 79
    174c:	94 e1       	ldi	r25, 0x14	; 20
    174e:	11 96       	adiw	r26, 0x01	; 1
    1750:	9c 93       	st	X, r25
    1752:	8e 93       	st	-X, r24
    1754:	12 96       	adiw	r26, 0x02	; 2
    1756:	8d e2       	ldi	r24, 0x2D	; 45
    1758:	90 e1       	ldi	r25, 0x10	; 16
    175a:	11 96       	adiw	r26, 0x01	; 1
    175c:	9c 93       	st	X, r25
    175e:	8e 93       	st	-X, r24
    1760:	12 96       	adiw	r26, 0x02	; 2
    1762:	85 ef       	ldi	r24, 0xF5	; 245
    1764:	90 e1       	ldi	r25, 0x10	; 16
    1766:	11 96       	adiw	r26, 0x01	; 1
    1768:	9c 93       	st	X, r25
    176a:	8e 93       	st	-X, r24
    176c:	12 96       	adiw	r26, 0x02	; 2
    176e:	83 ea       	ldi	r24, 0xA3	; 163
    1770:	94 e1       	ldi	r25, 0x14	; 20
    1772:	8d 93       	st	X+, r24
    1774:	9c 93       	st	X, r25
    1776:	e4 58       	subi	r30, 0x84	; 132
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	86 e8       	ldi	r24, 0x86	; 134
    177c:	9f e0       	ldi	r25, 0x0F	; 15
    177e:	91 83       	std	Z+1, r25	; 0x01
    1780:	80 83       	st	Z, r24
    1782:	8c d9       	rcall	.-3304   	; 0xa9c <FlashEnter4ByteAddressMode>
    1784:	e0 91 7f 0d 	lds	r30, 0x0D7F
    1788:	f0 91 80 0d 	lds	r31, 0x0D80
    178c:	e6 59       	subi	r30, 0x96	; 150
    178e:	ff 4f       	sbci	r31, 0xFF	; 255
    1790:	01 90       	ld	r0, Z+
    1792:	f0 81       	ld	r31, Z
    1794:	e0 2d       	mov	r30, r0
    1796:	ce 01       	movw	r24, r28
    1798:	01 96       	adiw	r24, 0x01	; 1
    179a:	19 95       	eicall
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	80 ff       	sbrs	r24, 0
    17a0:	8b c2       	rjmp	.+1302   	; 0x1cb8 <N25Q_Init+0x1180>
    17a2:	e0 91 7f 0d 	lds	r30, 0x0D7F
    17a6:	f0 91 80 0d 	lds	r31, 0x0D80
    17aa:	e9 5b       	subi	r30, 0xB9	; 185
    17ac:	ff 4f       	sbci	r31, 0xFF	; 255
    17ae:	84 e0       	ldi	r24, 0x04	; 4
    17b0:	80 83       	st	Z, r24
    17b2:	80 e0       	ldi	r24, 0x00	; 0
    17b4:	86 c2       	rjmp	.+1292   	; 0x1cc2 <N25Q_Init+0x118a>
    17b6:	ac 01       	movw	r20, r24
    17b8:	bd 01       	movw	r22, r26
    17ba:	5e 7f       	andi	r21, 0xFE	; 254
    17bc:	40 32       	cpi	r20, 0x20	; 32
    17be:	5a 4b       	sbci	r21, 0xBA	; 186
    17c0:	60 42       	sbci	r22, 0x20	; 32
    17c2:	71 05       	cpc	r23, r1
    17c4:	09 f0       	breq	.+2      	; 0x17c8 <N25Q_Init+0xc90>
    17c6:	29 c1       	rjmp	.+594    	; 0x1a1a <N25Q_Init+0xee2>
    17c8:	83 eb       	ldi	r24, 0xB3	; 179
    17ca:	93 e0       	ldi	r25, 0x03	; 3
    17cc:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>
    17d0:	e0 91 7f 0d 	lds	r30, 0x0D7F
    17d4:	f0 91 80 0d 	lds	r31, 0x0D80
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	a0 e0       	ldi	r26, 0x00	; 0
    17de:	b4 e0       	ldi	r27, 0x04	; 4
    17e0:	85 a7       	std	Z+45, r24	; 0x2d
    17e2:	96 a7       	std	Z+46, r25	; 0x2e
    17e4:	a7 a7       	std	Z+47, r26	; 0x2f
    17e6:	b0 ab       	std	Z+48, r27	; 0x30
    17e8:	80 e0       	ldi	r24, 0x00	; 0
    17ea:	94 e0       	ldi	r25, 0x04	; 4
    17ec:	a0 e0       	ldi	r26, 0x00	; 0
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	85 87       	std	Z+13, r24	; 0x0d
    17f2:	96 87       	std	Z+14, r25	; 0x0e
    17f4:	a7 87       	std	Z+15, r26	; 0x0f
    17f6:	b0 8b       	std	Z+16, r27	; 0x10
    17f8:	80 e0       	ldi	r24, 0x00	; 0
    17fa:	90 e0       	ldi	r25, 0x00	; 0
    17fc:	a1 e0       	ldi	r26, 0x01	; 1
    17fe:	b0 e0       	ldi	r27, 0x00	; 0
    1800:	81 a3       	std	Z+33, r24	; 0x21
    1802:	92 a3       	std	Z+34, r25	; 0x22
    1804:	a3 a3       	std	Z+35, r26	; 0x23
    1806:	b4 a3       	std	Z+36, r27	; 0x24
    1808:	80 e1       	ldi	r24, 0x10	; 16
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	a0 e0       	ldi	r26, 0x00	; 0
    180e:	b0 e0       	ldi	r27, 0x00	; 0
    1810:	85 a3       	std	Z+37, r24	; 0x25
    1812:	96 a3       	std	Z+38, r25	; 0x26
    1814:	a7 a3       	std	Z+39, r26	; 0x27
    1816:	b0 a7       	std	Z+40, r27	; 0x28
    1818:	80 e1       	ldi	r24, 0x10	; 16
    181a:	97 e2       	ldi	r25, 0x27	; 39
    181c:	a0 e0       	ldi	r26, 0x00	; 0
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	81 8b       	std	Z+17, r24	; 0x11
    1822:	92 8b       	std	Z+18, r25	; 0x12
    1824:	a3 8b       	std	Z+19, r26	; 0x13
    1826:	b4 8b       	std	Z+20, r27	; 0x14
    1828:	80 e0       	ldi	r24, 0x00	; 0
    182a:	90 e1       	ldi	r25, 0x10	; 16
    182c:	a0 e0       	ldi	r26, 0x00	; 0
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	81 a7       	std	Z+41, r24	; 0x29
    1832:	92 a7       	std	Z+42, r25	; 0x2a
    1834:	a3 a7       	std	Z+43, r26	; 0x2b
    1836:	b4 a7       	std	Z+44, r27	; 0x2c
    1838:	8c e0       	ldi	r24, 0x0C	; 12
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	a0 e0       	ldi	r26, 0x00	; 0
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	85 8b       	std	Z+21, r24	; 0x15
    1842:	96 8b       	std	Z+22, r25	; 0x16
    1844:	a7 8b       	std	Z+23, r26	; 0x17
    1846:	b0 8f       	std	Z+24, r27	; 0x18
    1848:	80 e0       	ldi	r24, 0x00	; 0
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	a4 e0       	ldi	r26, 0x04	; 4
    184e:	b0 e0       	ldi	r27, 0x00	; 0
    1850:	85 8f       	std	Z+29, r24	; 0x1d
    1852:	96 8f       	std	Z+30, r25	; 0x1e
    1854:	a7 8f       	std	Z+31, r26	; 0x1f
    1856:	b0 a3       	std	Z+32, r27	; 0x20
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	91 e0       	ldi	r25, 0x01	; 1
    185c:	a0 e0       	ldi	r26, 0x00	; 0
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	81 8f       	std	Z+25, r24	; 0x19
    1862:	92 8f       	std	Z+26, r25	; 0x1a
    1864:	a3 8f       	std	Z+27, r26	; 0x1b
    1866:	b4 8f       	std	Z+28, r27	; 0x1c
    1868:	80 e4       	ldi	r24, 0x40	; 64
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	a0 e0       	ldi	r26, 0x00	; 0
    186e:	b0 e0       	ldi	r27, 0x00	; 0
    1870:	81 ab       	std	Z+49, r24	; 0x31
    1872:	92 ab       	std	Z+50, r25	; 0x32
    1874:	a3 ab       	std	Z+51, r26	; 0x33
    1876:	b4 ab       	std	Z+52, r27	; 0x34
    1878:	82 e0       	ldi	r24, 0x02	; 2
    187a:	85 ab       	std	Z+53, r24	; 0x35
    187c:	80 e0       	ldi	r24, 0x00	; 0
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	a0 e0       	ldi	r26, 0x00	; 0
    1882:	b2 e0       	ldi	r27, 0x02	; 2
    1884:	86 ab       	std	Z+54, r24	; 0x36
    1886:	97 ab       	std	Z+55, r25	; 0x37
    1888:	a0 af       	std	Z+56, r26	; 0x38
    188a:	b1 af       	std	Z+57, r27	; 0x39
    188c:	89 e1       	ldi	r24, 0x19	; 25
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	a0 e0       	ldi	r26, 0x00	; 0
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	82 af       	std	Z+58, r24	; 0x3a
    1896:	93 af       	std	Z+59, r25	; 0x3b
    1898:	a4 af       	std	Z+60, r26	; 0x3c
    189a:	b5 af       	std	Z+61, r27	; 0x3d
    189c:	8f ef       	ldi	r24, 0xFF	; 255
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	a0 e0       	ldi	r26, 0x00	; 0
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	81 87       	std	Z+9, r24	; 0x09
    18a6:	92 87       	std	Z+10, r25	; 0x0a
    18a8:	a3 87       	std	Z+11, r26	; 0x0b
    18aa:	b4 87       	std	Z+12, r27	; 0x0c
    18ac:	df 01       	movw	r26, r30
    18ae:	a6 5b       	subi	r26, 0xB6	; 182
    18b0:	bf 4f       	sbci	r27, 0xFF	; 255
    18b2:	8a e4       	ldi	r24, 0x4A	; 74
    18b4:	93 e0       	ldi	r25, 0x03	; 3
    18b6:	11 96       	adiw	r26, 0x01	; 1
    18b8:	9c 93       	st	X, r25
    18ba:	8e 93       	st	-X, r24
    18bc:	12 96       	adiw	r26, 0x02	; 2
    18be:	8d ec       	ldi	r24, 0xCD	; 205
    18c0:	93 e0       	ldi	r25, 0x03	; 3
    18c2:	11 96       	adiw	r26, 0x01	; 1
    18c4:	9c 93       	st	X, r25
    18c6:	8e 93       	st	-X, r24
    18c8:	12 96       	adiw	r26, 0x02	; 2
    18ca:	86 e3       	ldi	r24, 0x36	; 54
    18cc:	92 e1       	ldi	r25, 0x12	; 18
    18ce:	11 96       	adiw	r26, 0x01	; 1
    18d0:	9c 93       	st	X, r25
    18d2:	8e 93       	st	-X, r24
    18d4:	12 96       	adiw	r26, 0x02	; 2
    18d6:	8d e4       	ldi	r24, 0x4D	; 77
    18d8:	9f e0       	ldi	r25, 0x0F	; 15
    18da:	11 96       	adiw	r26, 0x01	; 1
    18dc:	9c 93       	st	X, r25
    18de:	8e 93       	st	-X, r24
    18e0:	12 96       	adiw	r26, 0x02	; 2
    18e2:	87 e5       	ldi	r24, 0x57	; 87
    18e4:	92 e1       	ldi	r25, 0x12	; 18
    18e6:	11 96       	adiw	r26, 0x01	; 1
    18e8:	9c 93       	st	X, r25
    18ea:	8e 93       	st	-X, r24
    18ec:	12 96       	adiw	r26, 0x02	; 2
    18ee:	83 ed       	ldi	r24, 0xD3	; 211
    18f0:	92 e1       	ldi	r25, 0x12	; 18
    18f2:	11 96       	adiw	r26, 0x01	; 1
    18f4:	9c 93       	st	X, r25
    18f6:	8e 93       	st	-X, r24
    18f8:	12 96       	adiw	r26, 0x02	; 2
    18fa:	89 e4       	ldi	r24, 0x49	; 73
    18fc:	93 e1       	ldi	r25, 0x13	; 19
    18fe:	11 96       	adiw	r26, 0x01	; 1
    1900:	9c 93       	st	X, r25
    1902:	8e 93       	st	-X, r24
    1904:	12 96       	adiw	r26, 0x02	; 2
    1906:	11 96       	adiw	r26, 0x01	; 1
    1908:	1c 92       	st	X, r1
    190a:	1e 92       	st	-X, r1
    190c:	50 97       	sbiw	r26, 0x10	; 16
    190e:	8c e3       	ldi	r24, 0x3C	; 60
    1910:	93 e0       	ldi	r25, 0x03	; 3
    1912:	11 96       	adiw	r26, 0x01	; 1
    1914:	9c 93       	st	X, r25
    1916:	8e 93       	st	-X, r24
    1918:	52 96       	adiw	r26, 0x12	; 18
    191a:	8e ef       	ldi	r24, 0xFE	; 254
    191c:	93 e0       	ldi	r25, 0x03	; 3
    191e:	11 96       	adiw	r26, 0x01	; 1
    1920:	9c 93       	st	X, r25
    1922:	8e 93       	st	-X, r24
    1924:	12 96       	adiw	r26, 0x02	; 2
    1926:	8d e2       	ldi	r24, 0x2D	; 45
    1928:	94 e0       	ldi	r25, 0x04	; 4
    192a:	11 96       	adiw	r26, 0x01	; 1
    192c:	9c 93       	st	X, r25
    192e:	8e 93       	st	-X, r24
    1930:	12 96       	adiw	r26, 0x02	; 2
    1932:	11 96       	adiw	r26, 0x01	; 1
    1934:	1c 92       	st	X, r1
    1936:	1e 92       	st	-X, r1
    1938:	12 96       	adiw	r26, 0x02	; 2
    193a:	11 96       	adiw	r26, 0x01	; 1
    193c:	1c 92       	st	X, r1
    193e:	1e 92       	st	-X, r1
    1940:	12 96       	adiw	r26, 0x02	; 2
    1942:	8c e5       	ldi	r24, 0x5C	; 92
    1944:	94 e0       	ldi	r25, 0x04	; 4
    1946:	11 96       	adiw	r26, 0x01	; 1
    1948:	9c 93       	st	X, r25
    194a:	8e 93       	st	-X, r24
    194c:	12 96       	adiw	r26, 0x02	; 2
    194e:	85 e8       	ldi	r24, 0x85	; 133
    1950:	94 e0       	ldi	r25, 0x04	; 4
    1952:	11 96       	adiw	r26, 0x01	; 1
    1954:	9c 93       	st	X, r25
    1956:	8e 93       	st	-X, r24
    1958:	12 96       	adiw	r26, 0x02	; 2
    195a:	8b eb       	ldi	r24, 0xBB	; 187
    195c:	94 e0       	ldi	r25, 0x04	; 4
    195e:	11 96       	adiw	r26, 0x01	; 1
    1960:	9c 93       	st	X, r25
    1962:	8e 93       	st	-X, r24
    1964:	12 96       	adiw	r26, 0x02	; 2
    1966:	8c ee       	ldi	r24, 0xEC	; 236
    1968:	94 e0       	ldi	r25, 0x04	; 4
    196a:	11 96       	adiw	r26, 0x01	; 1
    196c:	9c 93       	st	X, r25
    196e:	8e 93       	st	-X, r24
    1970:	12 96       	adiw	r26, 0x02	; 2
    1972:	8d e1       	ldi	r24, 0x1D	; 29
    1974:	95 e0       	ldi	r25, 0x05	; 5
    1976:	11 96       	adiw	r26, 0x01	; 1
    1978:	9c 93       	st	X, r25
    197a:	8e 93       	st	-X, r24
    197c:	12 96       	adiw	r26, 0x02	; 2
    197e:	8a e1       	ldi	r24, 0x1A	; 26
    1980:	94 e1       	ldi	r25, 0x14	; 20
    1982:	11 96       	adiw	r26, 0x01	; 1
    1984:	9c 93       	st	X, r25
    1986:	8e 93       	st	-X, r24
    1988:	12 96       	adiw	r26, 0x02	; 2
    198a:	88 eb       	ldi	r24, 0xB8	; 184
    198c:	93 e1       	ldi	r25, 0x13	; 19
    198e:	11 96       	adiw	r26, 0x01	; 1
    1990:	9c 93       	st	X, r25
    1992:	8e 93       	st	-X, r24
    1994:	12 96       	adiw	r26, 0x02	; 2
    1996:	89 ee       	ldi	r24, 0xE9	; 233
    1998:	93 e1       	ldi	r25, 0x13	; 19
    199a:	11 96       	adiw	r26, 0x01	; 1
    199c:	9c 93       	st	X, r25
    199e:	8e 93       	st	-X, r24
    19a0:	12 96       	adiw	r26, 0x02	; 2
    19a2:	8e e4       	ldi	r24, 0x4E	; 78
    19a4:	95 e0       	ldi	r25, 0x05	; 5
    19a6:	11 96       	adiw	r26, 0x01	; 1
    19a8:	9c 93       	st	X, r25
    19aa:	8e 93       	st	-X, r24
    19ac:	12 96       	adiw	r26, 0x02	; 2
    19ae:	8f e4       	ldi	r24, 0x4F	; 79
    19b0:	94 e1       	ldi	r25, 0x14	; 20
    19b2:	11 96       	adiw	r26, 0x01	; 1
    19b4:	9c 93       	st	X, r25
    19b6:	8e 93       	st	-X, r24
    19b8:	12 96       	adiw	r26, 0x02	; 2
    19ba:	8d e2       	ldi	r24, 0x2D	; 45
    19bc:	90 e1       	ldi	r25, 0x10	; 16
    19be:	11 96       	adiw	r26, 0x01	; 1
    19c0:	9c 93       	st	X, r25
    19c2:	8e 93       	st	-X, r24
    19c4:	12 96       	adiw	r26, 0x02	; 2
    19c6:	85 ef       	ldi	r24, 0xF5	; 245
    19c8:	90 e1       	ldi	r25, 0x10	; 16
    19ca:	11 96       	adiw	r26, 0x01	; 1
    19cc:	9c 93       	st	X, r25
    19ce:	8e 93       	st	-X, r24
    19d0:	12 96       	adiw	r26, 0x02	; 2
    19d2:	83 ea       	ldi	r24, 0xA3	; 163
    19d4:	94 e1       	ldi	r25, 0x14	; 20
    19d6:	8d 93       	st	X+, r24
    19d8:	9c 93       	st	X, r25
    19da:	e4 58       	subi	r30, 0x84	; 132
    19dc:	ff 4f       	sbci	r31, 0xFF	; 255
    19de:	86 e8       	ldi	r24, 0x86	; 134
    19e0:	9f e0       	ldi	r25, 0x0F	; 15
    19e2:	91 83       	std	Z+1, r25	; 0x01
    19e4:	80 83       	st	Z, r24
    19e6:	5a d8       	rcall	.-3916   	; 0xa9c <FlashEnter4ByteAddressMode>
    19e8:	e0 91 7f 0d 	lds	r30, 0x0D7F
    19ec:	f0 91 80 0d 	lds	r31, 0x0D80
    19f0:	e6 59       	subi	r30, 0x96	; 150
    19f2:	ff 4f       	sbci	r31, 0xFF	; 255
    19f4:	01 90       	ld	r0, Z+
    19f6:	f0 81       	ld	r31, Z
    19f8:	e0 2d       	mov	r30, r0
    19fa:	ce 01       	movw	r24, r28
    19fc:	01 96       	adiw	r24, 0x01	; 1
    19fe:	19 95       	eicall
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	80 ff       	sbrs	r24, 0
    1a04:	5b c1       	rjmp	.+694    	; 0x1cbc <N25Q_Init+0x1184>
    1a06:	e0 91 7f 0d 	lds	r30, 0x0D7F
    1a0a:	f0 91 80 0d 	lds	r31, 0x0D80
    1a0e:	e9 5b       	subi	r30, 0xB9	; 185
    1a10:	ff 4f       	sbci	r31, 0xFF	; 255
    1a12:	84 e0       	ldi	r24, 0x04	; 4
    1a14:	80 83       	st	Z, r24
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	54 c1       	rjmp	.+680    	; 0x1cc2 <N25Q_Init+0x118a>
    1a1a:	81 32       	cpi	r24, 0x21	; 33
    1a1c:	2a eb       	ldi	r18, 0xBA	; 186
    1a1e:	92 07       	cpc	r25, r18
    1a20:	20 e2       	ldi	r18, 0x20	; 32
    1a22:	a2 07       	cpc	r26, r18
    1a24:	b1 05       	cpc	r27, r1
    1a26:	09 f0       	breq	.+2      	; 0x1a2a <N25Q_Init+0xef2>
    1a28:	35 c1       	rjmp	.+618    	; 0x1c94 <N25Q_Init+0x115c>
    1a2a:	84 ec       	ldi	r24, 0xC4	; 196
    1a2c:	93 e0       	ldi	r25, 0x03	; 3
    1a2e:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>
    1a32:	e0 91 7f 0d 	lds	r30, 0x0D7F
    1a36:	f0 91 80 0d 	lds	r31, 0x0D80
    1a3a:	80 e0       	ldi	r24, 0x00	; 0
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	a0 e0       	ldi	r26, 0x00	; 0
    1a40:	b8 e0       	ldi	r27, 0x08	; 8
    1a42:	85 a7       	std	Z+45, r24	; 0x2d
    1a44:	96 a7       	std	Z+46, r25	; 0x2e
    1a46:	a7 a7       	std	Z+47, r26	; 0x2f
    1a48:	b0 ab       	std	Z+48, r27	; 0x30
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
    1a4c:	98 e0       	ldi	r25, 0x08	; 8
    1a4e:	a0 e0       	ldi	r26, 0x00	; 0
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	85 87       	std	Z+13, r24	; 0x0d
    1a54:	96 87       	std	Z+14, r25	; 0x0e
    1a56:	a7 87       	std	Z+15, r26	; 0x0f
    1a58:	b0 8b       	std	Z+16, r27	; 0x10
    1a5a:	80 e0       	ldi	r24, 0x00	; 0
    1a5c:	90 e0       	ldi	r25, 0x00	; 0
    1a5e:	a1 e0       	ldi	r26, 0x01	; 1
    1a60:	b0 e0       	ldi	r27, 0x00	; 0
    1a62:	81 a3       	std	Z+33, r24	; 0x21
    1a64:	92 a3       	std	Z+34, r25	; 0x22
    1a66:	a3 a3       	std	Z+35, r26	; 0x23
    1a68:	b4 a3       	std	Z+36, r27	; 0x24
    1a6a:	80 e1       	ldi	r24, 0x10	; 16
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	a0 e0       	ldi	r26, 0x00	; 0
    1a70:	b0 e0       	ldi	r27, 0x00	; 0
    1a72:	85 a3       	std	Z+37, r24	; 0x25
    1a74:	96 a3       	std	Z+38, r25	; 0x26
    1a76:	a7 a3       	std	Z+39, r26	; 0x27
    1a78:	b0 a7       	std	Z+40, r27	; 0x28
    1a7a:	80 e0       	ldi	r24, 0x00	; 0
    1a7c:	90 e8       	ldi	r25, 0x80	; 128
    1a7e:	a0 e0       	ldi	r26, 0x00	; 0
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	81 8b       	std	Z+17, r24	; 0x11
    1a84:	92 8b       	std	Z+18, r25	; 0x12
    1a86:	a3 8b       	std	Z+19, r26	; 0x13
    1a88:	b4 8b       	std	Z+20, r27	; 0x14
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	90 e1       	ldi	r25, 0x10	; 16
    1a8e:	a0 e0       	ldi	r26, 0x00	; 0
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	81 a7       	std	Z+41, r24	; 0x29
    1a94:	92 a7       	std	Z+42, r25	; 0x2a
    1a96:	a3 a7       	std	Z+43, r26	; 0x2b
    1a98:	b4 a7       	std	Z+44, r27	; 0x2c
    1a9a:	8c e0       	ldi	r24, 0x0C	; 12
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	a0 e0       	ldi	r26, 0x00	; 0
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	85 8b       	std	Z+21, r24	; 0x15
    1aa4:	96 8b       	std	Z+22, r25	; 0x16
    1aa6:	a7 8b       	std	Z+23, r26	; 0x17
    1aa8:	b0 8f       	std	Z+24, r27	; 0x18
    1aaa:	80 e0       	ldi	r24, 0x00	; 0
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	a8 e0       	ldi	r26, 0x08	; 8
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	85 8f       	std	Z+29, r24	; 0x1d
    1ab4:	96 8f       	std	Z+30, r25	; 0x1e
    1ab6:	a7 8f       	std	Z+31, r26	; 0x1f
    1ab8:	b0 a3       	std	Z+32, r27	; 0x20
    1aba:	80 e0       	ldi	r24, 0x00	; 0
    1abc:	91 e0       	ldi	r25, 0x01	; 1
    1abe:	a0 e0       	ldi	r26, 0x00	; 0
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	81 8f       	std	Z+25, r24	; 0x19
    1ac4:	92 8f       	std	Z+26, r25	; 0x1a
    1ac6:	a3 8f       	std	Z+27, r26	; 0x1b
    1ac8:	b4 8f       	std	Z+28, r27	; 0x1c
    1aca:	80 e4       	ldi	r24, 0x40	; 64
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	a0 e0       	ldi	r26, 0x00	; 0
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	81 ab       	std	Z+49, r24	; 0x31
    1ad4:	92 ab       	std	Z+50, r25	; 0x32
    1ad6:	a3 ab       	std	Z+51, r26	; 0x33
    1ad8:	b4 ab       	std	Z+52, r27	; 0x34
    1ada:	8f ef       	ldi	r24, 0xFF	; 255
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	a0 e0       	ldi	r26, 0x00	; 0
    1ae0:	b0 e0       	ldi	r27, 0x00	; 0
    1ae2:	81 87       	std	Z+9, r24	; 0x09
    1ae4:	92 87       	std	Z+10, r25	; 0x0a
    1ae6:	a3 87       	std	Z+11, r26	; 0x0b
    1ae8:	b4 87       	std	Z+12, r27	; 0x0c
    1aea:	84 e0       	ldi	r24, 0x04	; 4
    1aec:	85 ab       	std	Z+53, r24	; 0x35
    1aee:	80 e0       	ldi	r24, 0x00	; 0
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	a0 e0       	ldi	r26, 0x00	; 0
    1af4:	b2 e0       	ldi	r27, 0x02	; 2
    1af6:	86 ab       	std	Z+54, r24	; 0x36
    1af8:	97 ab       	std	Z+55, r25	; 0x37
    1afa:	a0 af       	std	Z+56, r26	; 0x38
    1afc:	b1 af       	std	Z+57, r27	; 0x39
    1afe:	89 e1       	ldi	r24, 0x19	; 25
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	a0 e0       	ldi	r26, 0x00	; 0
    1b04:	b0 e0       	ldi	r27, 0x00	; 0
    1b06:	82 af       	std	Z+58, r24	; 0x3a
    1b08:	93 af       	std	Z+59, r25	; 0x3b
    1b0a:	a4 af       	std	Z+60, r26	; 0x3c
    1b0c:	b5 af       	std	Z+61, r27	; 0x3d
    1b0e:	df 01       	movw	r26, r30
    1b10:	a9 5b       	subi	r26, 0xB9	; 185
    1b12:	bf 4f       	sbci	r27, 0xFF	; 255
    1b14:	83 e0       	ldi	r24, 0x03	; 3
    1b16:	8c 93       	st	X, r24
    1b18:	13 96       	adiw	r26, 0x03	; 3
    1b1a:	8a e4       	ldi	r24, 0x4A	; 74
    1b1c:	93 e0       	ldi	r25, 0x03	; 3
    1b1e:	11 96       	adiw	r26, 0x01	; 1
    1b20:	9c 93       	st	X, r25
    1b22:	8e 93       	st	-X, r24
    1b24:	12 96       	adiw	r26, 0x02	; 2
    1b26:	8d ec       	ldi	r24, 0xCD	; 205
    1b28:	93 e0       	ldi	r25, 0x03	; 3
    1b2a:	11 96       	adiw	r26, 0x01	; 1
    1b2c:	9c 93       	st	X, r25
    1b2e:	8e 93       	st	-X, r24
    1b30:	12 96       	adiw	r26, 0x02	; 2
    1b32:	86 e3       	ldi	r24, 0x36	; 54
    1b34:	92 e1       	ldi	r25, 0x12	; 18
    1b36:	11 96       	adiw	r26, 0x01	; 1
    1b38:	9c 93       	st	X, r25
    1b3a:	8e 93       	st	-X, r24
    1b3c:	12 96       	adiw	r26, 0x02	; 2
    1b3e:	8d e4       	ldi	r24, 0x4D	; 77
    1b40:	9f e0       	ldi	r25, 0x0F	; 15
    1b42:	11 96       	adiw	r26, 0x01	; 1
    1b44:	9c 93       	st	X, r25
    1b46:	8e 93       	st	-X, r24
    1b48:	12 96       	adiw	r26, 0x02	; 2
    1b4a:	87 e5       	ldi	r24, 0x57	; 87
    1b4c:	92 e1       	ldi	r25, 0x12	; 18
    1b4e:	11 96       	adiw	r26, 0x01	; 1
    1b50:	9c 93       	st	X, r25
    1b52:	8e 93       	st	-X, r24
    1b54:	12 96       	adiw	r26, 0x02	; 2
    1b56:	83 ed       	ldi	r24, 0xD3	; 211
    1b58:	92 e1       	ldi	r25, 0x12	; 18
    1b5a:	11 96       	adiw	r26, 0x01	; 1
    1b5c:	9c 93       	st	X, r25
    1b5e:	8e 93       	st	-X, r24
    1b60:	12 96       	adiw	r26, 0x02	; 2
    1b62:	89 e4       	ldi	r24, 0x49	; 73
    1b64:	93 e1       	ldi	r25, 0x13	; 19
    1b66:	11 96       	adiw	r26, 0x01	; 1
    1b68:	9c 93       	st	X, r25
    1b6a:	8e 93       	st	-X, r24
    1b6c:	12 96       	adiw	r26, 0x02	; 2
    1b6e:	11 96       	adiw	r26, 0x01	; 1
    1b70:	1c 92       	st	X, r1
    1b72:	1e 92       	st	-X, r1
    1b74:	50 97       	sbiw	r26, 0x10	; 16
    1b76:	8c e3       	ldi	r24, 0x3C	; 60
    1b78:	93 e0       	ldi	r25, 0x03	; 3
    1b7a:	11 96       	adiw	r26, 0x01	; 1
    1b7c:	9c 93       	st	X, r25
    1b7e:	8e 93       	st	-X, r24
    1b80:	52 96       	adiw	r26, 0x12	; 18
    1b82:	8e ef       	ldi	r24, 0xFE	; 254
    1b84:	93 e0       	ldi	r25, 0x03	; 3
    1b86:	11 96       	adiw	r26, 0x01	; 1
    1b88:	9c 93       	st	X, r25
    1b8a:	8e 93       	st	-X, r24
    1b8c:	12 96       	adiw	r26, 0x02	; 2
    1b8e:	8d e2       	ldi	r24, 0x2D	; 45
    1b90:	94 e0       	ldi	r25, 0x04	; 4
    1b92:	11 96       	adiw	r26, 0x01	; 1
    1b94:	9c 93       	st	X, r25
    1b96:	8e 93       	st	-X, r24
    1b98:	12 96       	adiw	r26, 0x02	; 2
    1b9a:	11 96       	adiw	r26, 0x01	; 1
    1b9c:	1c 92       	st	X, r1
    1b9e:	1e 92       	st	-X, r1
    1ba0:	12 96       	adiw	r26, 0x02	; 2
    1ba2:	11 96       	adiw	r26, 0x01	; 1
    1ba4:	1c 92       	st	X, r1
    1ba6:	1e 92       	st	-X, r1
    1ba8:	12 96       	adiw	r26, 0x02	; 2
    1baa:	8c e5       	ldi	r24, 0x5C	; 92
    1bac:	94 e0       	ldi	r25, 0x04	; 4
    1bae:	11 96       	adiw	r26, 0x01	; 1
    1bb0:	9c 93       	st	X, r25
    1bb2:	8e 93       	st	-X, r24
    1bb4:	12 96       	adiw	r26, 0x02	; 2
    1bb6:	85 e8       	ldi	r24, 0x85	; 133
    1bb8:	94 e0       	ldi	r25, 0x04	; 4
    1bba:	11 96       	adiw	r26, 0x01	; 1
    1bbc:	9c 93       	st	X, r25
    1bbe:	8e 93       	st	-X, r24
    1bc0:	12 96       	adiw	r26, 0x02	; 2
    1bc2:	8b eb       	ldi	r24, 0xBB	; 187
    1bc4:	94 e0       	ldi	r25, 0x04	; 4
    1bc6:	11 96       	adiw	r26, 0x01	; 1
    1bc8:	9c 93       	st	X, r25
    1bca:	8e 93       	st	-X, r24
    1bcc:	12 96       	adiw	r26, 0x02	; 2
    1bce:	8c ee       	ldi	r24, 0xEC	; 236
    1bd0:	94 e0       	ldi	r25, 0x04	; 4
    1bd2:	11 96       	adiw	r26, 0x01	; 1
    1bd4:	9c 93       	st	X, r25
    1bd6:	8e 93       	st	-X, r24
    1bd8:	12 96       	adiw	r26, 0x02	; 2
    1bda:	8d e1       	ldi	r24, 0x1D	; 29
    1bdc:	95 e0       	ldi	r25, 0x05	; 5
    1bde:	11 96       	adiw	r26, 0x01	; 1
    1be0:	9c 93       	st	X, r25
    1be2:	8e 93       	st	-X, r24
    1be4:	12 96       	adiw	r26, 0x02	; 2
    1be6:	8a e1       	ldi	r24, 0x1A	; 26
    1be8:	94 e1       	ldi	r25, 0x14	; 20
    1bea:	11 96       	adiw	r26, 0x01	; 1
    1bec:	9c 93       	st	X, r25
    1bee:	8e 93       	st	-X, r24
    1bf0:	12 96       	adiw	r26, 0x02	; 2
    1bf2:	88 eb       	ldi	r24, 0xB8	; 184
    1bf4:	93 e1       	ldi	r25, 0x13	; 19
    1bf6:	11 96       	adiw	r26, 0x01	; 1
    1bf8:	9c 93       	st	X, r25
    1bfa:	8e 93       	st	-X, r24
    1bfc:	12 96       	adiw	r26, 0x02	; 2
    1bfe:	89 ee       	ldi	r24, 0xE9	; 233
    1c00:	93 e1       	ldi	r25, 0x13	; 19
    1c02:	11 96       	adiw	r26, 0x01	; 1
    1c04:	9c 93       	st	X, r25
    1c06:	8e 93       	st	-X, r24
    1c08:	12 96       	adiw	r26, 0x02	; 2
    1c0a:	8e e4       	ldi	r24, 0x4E	; 78
    1c0c:	95 e0       	ldi	r25, 0x05	; 5
    1c0e:	11 96       	adiw	r26, 0x01	; 1
    1c10:	9c 93       	st	X, r25
    1c12:	8e 93       	st	-X, r24
    1c14:	12 96       	adiw	r26, 0x02	; 2
    1c16:	8f e4       	ldi	r24, 0x4F	; 79
    1c18:	94 e1       	ldi	r25, 0x14	; 20
    1c1a:	11 96       	adiw	r26, 0x01	; 1
    1c1c:	9c 93       	st	X, r25
    1c1e:	8e 93       	st	-X, r24
    1c20:	12 96       	adiw	r26, 0x02	; 2
    1c22:	8d e2       	ldi	r24, 0x2D	; 45
    1c24:	90 e1       	ldi	r25, 0x10	; 16
    1c26:	11 96       	adiw	r26, 0x01	; 1
    1c28:	9c 93       	st	X, r25
    1c2a:	8e 93       	st	-X, r24
    1c2c:	12 96       	adiw	r26, 0x02	; 2
    1c2e:	85 ef       	ldi	r24, 0xF5	; 245
    1c30:	90 e1       	ldi	r25, 0x10	; 16
    1c32:	11 96       	adiw	r26, 0x01	; 1
    1c34:	9c 93       	st	X, r25
    1c36:	8e 93       	st	-X, r24
    1c38:	12 96       	adiw	r26, 0x02	; 2
    1c3a:	83 ea       	ldi	r24, 0xA3	; 163
    1c3c:	94 e1       	ldi	r25, 0x14	; 20
    1c3e:	8d 93       	st	X+, r24
    1c40:	9c 93       	st	X, r25
    1c42:	e4 58       	subi	r30, 0x84	; 132
    1c44:	ff 4f       	sbci	r31, 0xFF	; 255
    1c46:	86 e8       	ldi	r24, 0x86	; 134
    1c48:	9f e0       	ldi	r25, 0x0F	; 15
    1c4a:	91 83       	std	Z+1, r25	; 0x01
    1c4c:	80 83       	st	Z, r24
    1c4e:	0e 94 4e 05 	call	0xa9c	; 0xa9c <FlashEnter4ByteAddressMode>
    1c52:	84 ed       	ldi	r24, 0xD4	; 212
    1c54:	93 e0       	ldi	r25, 0x03	; 3
    1c56:	9f 93       	push	r25
    1c58:	8f 93       	push	r24
    1c5a:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    1c5e:	e0 91 7f 0d 	lds	r30, 0x0D7F
    1c62:	f0 91 80 0d 	lds	r31, 0x0D80
    1c66:	e6 59       	subi	r30, 0x96	; 150
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	01 90       	ld	r0, Z+
    1c6c:	f0 81       	ld	r31, Z
    1c6e:	e0 2d       	mov	r30, r0
    1c70:	ce 01       	movw	r24, r28
    1c72:	01 96       	adiw	r24, 0x01	; 1
    1c74:	19 95       	eicall
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	80 ff       	sbrs	r24, 0
    1c7e:	20 c0       	rjmp	.+64     	; 0x1cc0 <N25Q_Init+0x1188>
    1c80:	e0 91 7f 0d 	lds	r30, 0x0D7F
    1c84:	f0 91 80 0d 	lds	r31, 0x0D80
    1c88:	e9 5b       	subi	r30, 0xB9	; 185
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	84 e0       	ldi	r24, 0x04	; 4
    1c8e:	80 83       	st	Z, r24
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	17 c0       	rjmp	.+46     	; 0x1cc2 <N25Q_Init+0x118a>
    1c94:	bf 93       	push	r27
    1c96:	af 93       	push	r26
    1c98:	9f 93       	push	r25
    1c9a:	8f 93       	push	r24
    1c9c:	8b ed       	ldi	r24, 0xDB	; 219
    1c9e:	93 e0       	ldi	r25, 0x03	; 3
    1ca0:	9f 93       	push	r25
    1ca2:	8f 93       	push	r24
    1ca4:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	0f 90       	pop	r0
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	0f 90       	pop	r0
    1cb4:	83 e1       	ldi	r24, 0x13	; 19
    1cb6:	05 c0       	rjmp	.+10     	; 0x1cc2 <N25Q_Init+0x118a>
    1cb8:	80 e0       	ldi	r24, 0x00	; 0
    1cba:	03 c0       	rjmp	.+6      	; 0x1cc2 <N25Q_Init+0x118a>
    1cbc:	80 e0       	ldi	r24, 0x00	; 0
    1cbe:	01 c0       	rjmp	.+2      	; 0x1cc2 <N25Q_Init+0x118a>
    1cc0:	80 e0       	ldi	r24, 0x00	; 0
    1cc2:	0f 90       	pop	r0
    1cc4:	0f 90       	pop	r0
    1cc6:	0f 90       	pop	r0
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
    1cd0:	1f 91       	pop	r17
    1cd2:	0f 91       	pop	r16
    1cd4:	08 95       	ret

00001cd6 <IsFlashBusy>:
    1cd6:	cf 93       	push	r28
    1cd8:	df 93       	push	r29
    1cda:	1f 92       	push	r1
    1cdc:	cd b7       	in	r28, 0x3d	; 61
    1cde:	de b7       	in	r29, 0x3e	; 62
    1ce0:	e0 91 7f 0d 	lds	r30, 0x0D7F
    1ce4:	f0 91 80 0d 	lds	r31, 0x0D80
    1ce8:	80 81       	ld	r24, Z
    1cea:	91 81       	ldd	r25, Z+1	; 0x01
    1cec:	a2 81       	ldd	r26, Z+2	; 0x02
    1cee:	b3 81       	ldd	r27, Z+3	; 0x03
    1cf0:	ac 01       	movw	r20, r24
    1cf2:	bd 01       	movw	r22, r26
    1cf4:	40 52       	subi	r20, 0x20	; 32
    1cf6:	5a 4b       	sbci	r21, 0xBA	; 186
    1cf8:	60 42       	sbci	r22, 0x20	; 32
    1cfa:	71 09       	sbc	r23, r1
    1cfc:	42 30       	cpi	r20, 0x02	; 2
    1cfe:	51 05       	cpc	r21, r1
    1d00:	61 05       	cpc	r22, r1
    1d02:	71 05       	cpc	r23, r1
    1d04:	28 f0       	brcs	.+10     	; 0x1d10 <IsFlashBusy+0x3a>
    1d06:	80 32       	cpi	r24, 0x20	; 32
    1d08:	9b 4b       	sbci	r25, 0xBB	; 187
    1d0a:	a0 42       	sbci	r26, 0x20	; 32
    1d0c:	b1 05       	cpc	r27, r1
    1d0e:	51 f4       	brne	.+20     	; 0x1d24 <IsFlashBusy+0x4e>
    1d10:	ce 01       	movw	r24, r28
    1d12:	01 96       	adiw	r24, 0x01	; 1
    1d14:	0e 94 1d 05 	call	0xa3a	; 0xa3a <FlashReadFlagStatusRegister>
    1d18:	89 81       	ldd	r24, Y+1	; 0x01
    1d1a:	80 95       	com	r24
    1d1c:	88 1f       	adc	r24, r24
    1d1e:	88 27       	eor	r24, r24
    1d20:	88 1f       	adc	r24, r24
    1d22:	06 c0       	rjmp	.+12     	; 0x1d30 <IsFlashBusy+0x5a>
    1d24:	ce 01       	movw	r24, r28
    1d26:	01 96       	adiw	r24, 0x01	; 1
    1d28:	0e 94 cd 03 	call	0x79a	; 0x79a <FlashReadStatusRegister>
    1d2c:	89 81       	ldd	r24, Y+1	; 0x01
    1d2e:	81 70       	andi	r24, 0x01	; 1
    1d30:	0f 90       	pop	r0
    1d32:	df 91       	pop	r29
    1d34:	cf 91       	pop	r28
    1d36:	08 95       	ret

00001d38 <FlashTimeOut>:
   other operations which would otherwise never return.
   The Routine uses COUNT_FOR_A_SECOND which is considered to be a loop that
   counts for one second. It needs to be adapted to the target Hardware.
-----------------------------------------------------------------------------*/
ReturnType FlashTimeOut(NMX_uint32 udSeconds)
{
    1d38:	cf 92       	push	r12
    1d3a:	df 92       	push	r13
    1d3c:	ef 92       	push	r14
    1d3e:	ff 92       	push	r15

	static NMX_uint32 udCounter = 0;
	if (udSeconds == 0)   /* Set Timeout to 0 */
    1d40:	61 15       	cp	r22, r1
    1d42:	71 05       	cpc	r23, r1
    1d44:	81 05       	cpc	r24, r1
    1d46:	91 05       	cpc	r25, r1
    1d48:	a9 f0       	breq	.+42     	; 0x1d74 <FlashTimeOut+0x3c>
	{
		udCounter = 0;
	} /* EndIf */

	if (udCounter >= (udSeconds * COUNT_FOR_A_SECOND))
    1d4a:	c0 90 7c 07 	lds	r12, 0x077C
    1d4e:	d0 90 7d 07 	lds	r13, 0x077D
    1d52:	e0 90 7e 07 	lds	r14, 0x077E
    1d56:	f0 90 7f 07 	lds	r15, 0x077F
    1d5a:	9b 01       	movw	r18, r22
    1d5c:	ac 01       	movw	r20, r24
    1d5e:	6f ef       	ldi	r22, 0xFF	; 255
    1d60:	7f ef       	ldi	r23, 0xFF	; 255
    1d62:	8f ef       	ldi	r24, 0xFF	; 255
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	0e 94 db 2d 	call	0x5bb6	; 0x5bb6 <__mulsi3>
    1d6a:	c6 16       	cp	r12, r22
    1d6c:	d7 06       	cpc	r13, r23
    1d6e:	e8 06       	cpc	r14, r24
    1d70:	f9 06       	cpc	r15, r25
    1d72:	50 f0       	brcs	.+20     	; 0x1d88 <FlashTimeOut+0x50>
	{
		udCounter = 0;
    1d74:	10 92 7c 07 	sts	0x077C, r1
    1d78:	10 92 7d 07 	sts	0x077D, r1
    1d7c:	10 92 7e 07 	sts	0x077E, r1
    1d80:	10 92 7f 07 	sts	0x077F, r1
		return Flash_OperationTimeOut;
    1d84:	8a e0       	ldi	r24, 0x0A	; 10
    1d86:	0e c0       	rjmp	.+28     	; 0x1da4 <FlashTimeOut+0x6c>
	}
	else
	{
		udCounter++;
    1d88:	8f ef       	ldi	r24, 0xFF	; 255
    1d8a:	c8 1a       	sub	r12, r24
    1d8c:	d8 0a       	sbc	r13, r24
    1d8e:	e8 0a       	sbc	r14, r24
    1d90:	f8 0a       	sbc	r15, r24
    1d92:	c0 92 7c 07 	sts	0x077C, r12
    1d96:	d0 92 7d 07 	sts	0x077D, r13
    1d9a:	e0 92 7e 07 	sts	0x077E, r14
    1d9e:	f0 92 7f 07 	sts	0x077F, r15
		return Flash_OperationOngoing;
    1da2:	89 e0       	ldi	r24, 0x09	; 9
	} /* Endif */

} /* EndFunction FlashTimeOut */
    1da4:	ff 90       	pop	r15
    1da6:	ef 90       	pop	r14
    1da8:	df 90       	pop	r13
    1daa:	cf 90       	pop	r12
    1dac:	08 95       	ret

00001dae <fill_addr_vect>:

/*-----------------------------------------------------------------------------
Description:   This function fill the vector in according with address mode
-----------------------------------------------------------------------------*/
void fill_addr_vect(uAddrType udAddr, NMX_uint8* pIns_Addr, NMX_uint8 num_address_byte)
{
    1dae:	fa 01       	movw	r30, r20

	/* 3-addr byte mode */
	if(FLASH_3_BYTE_ADDR_MODE == num_address_byte)
    1db0:	23 30       	cpi	r18, 0x03	; 3
    1db2:	21 f4       	brne	.+8      	; 0x1dbc <fill_addr_vect+0xe>
	{
		pIns_Addr[1]              = udAddr>>16;
    1db4:	81 83       	std	Z+1, r24	; 0x01
		pIns_Addr[2]              = udAddr>>8;
    1db6:	72 83       	std	Z+2, r23	; 0x02
		pIns_Addr[3]              = udAddr;
    1db8:	63 83       	std	Z+3, r22	; 0x03
    1dba:	08 95       	ret
	}

	/* 4-addr byte mode */
	if(FLASH_4_BYTE_ADDR_MODE == num_address_byte)
    1dbc:	24 30       	cpi	r18, 0x04	; 4
    1dbe:	21 f4       	brne	.+8      	; 0x1dc8 <fill_addr_vect+0x1a>
	{
		pIns_Addr[1]              = udAddr>>24;
    1dc0:	91 83       	std	Z+1, r25	; 0x01
		pIns_Addr[2]              = udAddr>>16;
    1dc2:	82 83       	std	Z+2, r24	; 0x02
		pIns_Addr[3]              = udAddr>>8;
    1dc4:	73 83       	std	Z+3, r23	; 0x03
		pIns_Addr[4]              = udAddr;
    1dc6:	64 83       	std	Z+4, r22	; 0x04
    1dc8:	08 95       	ret

00001dca <FlashDataRead>:
   Step 1: Validate address input
   Step 2: Initialize the data (i.e. Instruction) packet to be sent serially
   Step 3: Send the packet serially, and fill the buffer with the data being returned
*******************************************************************************/
ReturnType FlashDataRead( uAddrType udAddr, NMX_uint8 *ucpElements, NMX_uint32 udNrOfElementsToRead, NMX_uint8 insInstruction)
{
    1dca:	4f 92       	push	r4
    1dcc:	5f 92       	push	r5
    1dce:	6f 92       	push	r6
    1dd0:	7f 92       	push	r7
    1dd2:	8f 92       	push	r8
    1dd4:	9f 92       	push	r9
    1dd6:	af 92       	push	r10
    1dd8:	bf 92       	push	r11
    1dda:	cf 92       	push	r12
    1ddc:	df 92       	push	r13
    1dde:	ef 92       	push	r14
    1de0:	ff 92       	push	r15
    1de2:	0f 93       	push	r16
    1de4:	1f 93       	push	r17
    1de6:	cf 93       	push	r28
    1de8:	df 93       	push	r29
    1dea:	cd b7       	in	r28, 0x3d	; 61
    1dec:	de b7       	in	r29, 0x3e	; 62
    1dee:	61 97       	sbiw	r28, 0x11	; 17
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
    1dfa:	ae 2d       	mov	r26, r14
	CharStream char_stream_send;
	CharStream char_stream_recv;
	NMX_uint8  pIns_Addr[5];

	// Step 1: Validate address input
	if(!(udAddr < fdo->Desc.FlashSize))
    1dfc:	e0 91 7f 0d 	lds	r30, 0x0D7F
    1e00:	f0 91 80 0d 	lds	r31, 0x0D80
    1e04:	c5 a4       	ldd	r12, Z+45	; 0x2d
    1e06:	d6 a4       	ldd	r13, Z+46	; 0x2e
    1e08:	e7 a4       	ldd	r14, Z+47	; 0x2f
    1e0a:	f0 a8       	ldd	r15, Z+48	; 0x30
    1e0c:	6c 15       	cp	r22, r12
    1e0e:	7d 05       	cpc	r23, r13
    1e10:	8e 05       	cpc	r24, r14
    1e12:	9f 05       	cpc	r25, r15
    1e14:	50 f5       	brcc	.+84     	; 0x1e6a <FlashDataRead+0xa0>
    1e16:	48 01       	movw	r8, r16
    1e18:	59 01       	movw	r10, r18
    1e1a:	6a 01       	movw	r12, r20
		return Flash_AddressInvalid;

	// Step 2: Initialize the data (i.e. Instruction) packet to be sent serially
	char_stream_send.length   = fdo->Desc.NumAddrByte + 1;
    1e1c:	e9 5b       	subi	r30, 0xB9	; 185
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	20 81       	ld	r18, Z
    1e22:	42 2f       	mov	r20, r18
    1e24:	50 e0       	ldi	r21, 0x00	; 0
    1e26:	4f 5f       	subi	r20, 0xFF	; 255
    1e28:	5f 4f       	sbci	r21, 0xFF	; 255
    1e2a:	2a 01       	movw	r4, r20
    1e2c:	55 0f       	add	r21, r21
    1e2e:	66 08       	sbc	r6, r6
    1e30:	77 08       	sbc	r7, r7
    1e32:	4b 82       	std	Y+3, r4	; 0x03
    1e34:	5c 82       	std	Y+4, r5	; 0x04
    1e36:	6d 82       	std	Y+5, r6	; 0x05
    1e38:	7e 82       	std	Y+6, r7	; 0x06
	char_stream_send.pChar    = pIns_Addr;
    1e3a:	ae 01       	movw	r20, r28
    1e3c:	43 5f       	subi	r20, 0xF3	; 243
    1e3e:	5f 4f       	sbci	r21, 0xFF	; 255
    1e40:	5a 83       	std	Y+2, r21	; 0x02
    1e42:	49 83       	std	Y+1, r20	; 0x01
	pIns_Addr[0]              = insInstruction;
    1e44:	ad 87       	std	Y+13, r26	; 0x0d

	fill_addr_vect(udAddr, pIns_Addr, fdo->Desc.NumAddrByte);
    1e46:	b3 df       	rcall	.-154    	; 0x1dae <fill_addr_vect>

	char_stream_recv.length   = udNrOfElementsToRead;
    1e48:	89 86       	std	Y+9, r8	; 0x09
    1e4a:	9a 86       	std	Y+10, r9	; 0x0a
    1e4c:	ab 86       	std	Y+11, r10	; 0x0b
    1e4e:	bc 86       	std	Y+12, r11	; 0x0c
	char_stream_recv.pChar    = ucpElements;
    1e50:	d8 86       	std	Y+8, r13	; 0x08
    1e52:	cf 82       	std	Y+7, r12	; 0x07

	// Step 3: Send the packet serially, and fill the buffer with the data being returned
	Serialize_SPI(&char_stream_send,
    1e54:	23 e0       	ldi	r18, 0x03	; 3
    1e56:	41 e0       	ldi	r20, 0x01	; 1
    1e58:	be 01       	movw	r22, r28
    1e5a:	69 5f       	subi	r22, 0xF9	; 249
    1e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    1e5e:	ce 01       	movw	r24, r28
    1e60:	01 96       	adiw	r24, 0x01	; 1
    1e62:	0e 94 94 17 	call	0x2f28	; 0x2f28 <Serialize_SPI>
	              &char_stream_recv,
	              OpsWakeUp,
	              OpsEndTransfer);

	return Flash_Success;
    1e66:	80 e0       	ldi	r24, 0x00	; 0
    1e68:	01 c0       	rjmp	.+2      	; 0x1e6c <FlashDataRead+0xa2>
	CharStream char_stream_recv;
	NMX_uint8  pIns_Addr[5];

	// Step 1: Validate address input
	if(!(udAddr < fdo->Desc.FlashSize))
		return Flash_AddressInvalid;
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
	              &char_stream_recv,
	              OpsWakeUp,
	              OpsEndTransfer);

	return Flash_Success;
}
    1e6c:	61 96       	adiw	r28, 0x11	; 17
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	de bf       	out	0x3e, r29	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	cd bf       	out	0x3d, r28	; 61
    1e78:	df 91       	pop	r29
    1e7a:	cf 91       	pop	r28
    1e7c:	1f 91       	pop	r17
    1e7e:	0f 91       	pop	r16
    1e80:	ff 90       	pop	r15
    1e82:	ef 90       	pop	r14
    1e84:	df 90       	pop	r13
    1e86:	cf 90       	pop	r12
    1e88:	bf 90       	pop	r11
    1e8a:	af 90       	pop	r10
    1e8c:	9f 90       	pop	r9
    1e8e:	8f 90       	pop	r8
    1e90:	7f 90       	pop	r7
    1e92:	6f 90       	pop	r6
    1e94:	5f 90       	pop	r5
    1e96:	4f 90       	pop	r4
    1e98:	08 95       	ret

00001e9a <DataRead>:
   Step 1: Select the right action using the insInstruction parameter
   Step 2: Execute the Flash memory Function
   Step 3: Return the Error Code
*******************************************************************************/
ReturnType DataRead(InstructionType insInstruction, ParameterType *fp)
{
    1e9a:	ef 92       	push	r14
    1e9c:	0f 93       	push	r16
    1e9e:	1f 93       	push	r17
	NMX_uint8 insCode;
	ReturnType rRetVal;

	switch (insInstruction)
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	36 97       	sbiw	r30, 0x06	; 6
    1ea6:	e7 30       	cpi	r30, 0x07	; 7
    1ea8:	f1 05       	cpc	r31, r1
    1eaa:	58 f5       	brcc	.+86     	; 0x1f02 <DataRead+0x68>
    1eac:	88 27       	eor	r24, r24
    1eae:	e6 56       	subi	r30, 0x66	; 102
    1eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb2:	8f 4f       	sbci	r24, 0xFF	; 255
    1eb4:	0c 94 0c 2e 	jmp	0x5c18	; 0x5c18 <__tablejump2__>
	case Read:
		insCode = SPI_FLASH_INS_READ;
		break;

	case FastRead:
		insCode = SPI_FLASH_INS_FAST_READ;
    1eb8:	0f 2e       	mov	r0, r31
    1eba:	fb e0       	ldi	r31, 0x0B	; 11
    1ebc:	ef 2e       	mov	r14, r31
    1ebe:	f0 2d       	mov	r31, r0
    1ec0:	13 c0       	rjmp	.+38     	; 0x1ee8 <DataRead+0x4e>
		break;

	case DualOutputFastRead:
		insCode = SPI_FLASH_INS_DOFR;
    1ec2:	0f 2e       	mov	r0, r31
    1ec4:	fb e3       	ldi	r31, 0x3B	; 59
    1ec6:	ef 2e       	mov	r14, r31
    1ec8:	f0 2d       	mov	r31, r0
		break;
    1eca:	0e c0       	rjmp	.+28     	; 0x1ee8 <DataRead+0x4e>

	case QuadOutputFastRead:
		insCode = SPI_FLASH_INS_QOFR;
    1ecc:	0f 2e       	mov	r0, r31
    1ece:	fb e6       	ldi	r31, 0x6B	; 107
    1ed0:	ef 2e       	mov	r14, r31
    1ed2:	f0 2d       	mov	r31, r0
		break;
    1ed4:	09 c0       	rjmp	.+18     	; 0x1ee8 <DataRead+0x4e>

	case QuadInputOutputFastRead:
		insCode = SPI_FLASH_INS_QIOFR;
		break;
	case ReadFlashDiscovery:
		insCode = SPI_FLASH_INS_DISCOVER_PARAMETER;
    1ed6:	0f 2e       	mov	r0, r31
    1ed8:	fa e5       	ldi	r31, 0x5A	; 90
    1eda:	ef 2e       	mov	r14, r31
    1edc:	f0 2d       	mov	r31, r0
		break;
    1ede:	04 c0       	rjmp	.+8      	; 0x1ee8 <DataRead+0x4e>
	ReturnType rRetVal;

	switch (insInstruction)
	{
	case Read:
		insCode = SPI_FLASH_INS_READ;
    1ee0:	0f 2e       	mov	r0, r31
    1ee2:	f3 e0       	ldi	r31, 0x03	; 3
    1ee4:	ef 2e       	mov	r14, r31
    1ee6:	f0 2d       	mov	r31, r0
    1ee8:	fb 01       	movw	r30, r22
	default:
		return Flash_FunctionNotSupported;
		break;

	} /* EndSwitch */
	rRetVal = FlashDataRead(fp->Read.udAddr, fp->Read.pArray, fp->Read.udNrOfElementsToRead, insCode);
    1eea:	04 81       	ldd	r16, Z+4	; 0x04
    1eec:	15 81       	ldd	r17, Z+5	; 0x05
    1eee:	26 81       	ldd	r18, Z+6	; 0x06
    1ef0:	37 81       	ldd	r19, Z+7	; 0x07
    1ef2:	40 85       	ldd	r20, Z+8	; 0x08
    1ef4:	51 85       	ldd	r21, Z+9	; 0x09
    1ef6:	60 81       	ld	r22, Z
    1ef8:	71 81       	ldd	r23, Z+1	; 0x01
    1efa:	82 81       	ldd	r24, Z+2	; 0x02
    1efc:	93 81       	ldd	r25, Z+3	; 0x03
    1efe:	65 df       	rcall	.-310    	; 0x1dca <FlashDataRead>
	return rRetVal;
    1f00:	01 c0       	rjmp	.+2      	; 0x1f04 <DataRead+0x6a>
	case ReadFlashDiscovery:
		insCode = SPI_FLASH_INS_DISCOVER_PARAMETER;
		break;

	default:
		return Flash_FunctionNotSupported;
    1f02:	87 e0       	ldi	r24, 0x07	; 7
		break;

	} /* EndSwitch */
	rRetVal = FlashDataRead(fp->Read.udAddr, fp->Read.pArray, fp->Read.udNrOfElementsToRead, insCode);
	return rRetVal;
}
    1f04:	1f 91       	pop	r17
    1f06:	0f 91       	pop	r16
    1f08:	ef 90       	pop	r14
    1f0a:	08 95       	ret

00001f0c <FlashOTPRead>:

Pseudo Code:

*******************************************************************************/
ReturnType FlashOTPRead(NMX_uint8 *ucpElements, NMX_uint32 udNrOfElementsToRead)
{
    1f0c:	8f 92       	push	r8
    1f0e:	9f 92       	push	r9
    1f10:	af 92       	push	r10
    1f12:	bf 92       	push	r11
    1f14:	ef 92       	push	r14
    1f16:	ff 92       	push	r15
    1f18:	0f 93       	push	r16
    1f1a:	1f 93       	push	r17
    1f1c:	cf 93       	push	r28
    1f1e:	df 93       	push	r29
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
    1f24:	61 97       	sbiw	r28, 0x11	; 17
    1f26:	0f b6       	in	r0, 0x3f	; 63
    1f28:	f8 94       	cli
    1f2a:	de bf       	out	0x3e, r29	; 62
    1f2c:	0f be       	out	0x3f, r0	; 63
    1f2e:	cd bf       	out	0x3d, r28	; 61
    1f30:	7c 01       	movw	r14, r24
    1f32:	4a 01       	movw	r8, r20
    1f34:	5b 01       	movw	r10, r22

	/* Address is always 0x000000 */
	udAddr = 0x000000;

	// Step 2: Initialize the data (i.e. Instruction) packet to be sent serially
	char_stream_send.length   = fdo->Desc.NumAddrByte + 1;
    1f36:	e0 91 7f 0d 	lds	r30, 0x0D7F
    1f3a:	f0 91 80 0d 	lds	r31, 0x0D80
    1f3e:	e9 5b       	subi	r30, 0xB9	; 185
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	00 81       	ld	r16, Z
    1f44:	10 e0       	ldi	r17, 0x00	; 0
    1f46:	0f 5f       	subi	r16, 0xFF	; 255
    1f48:	1f 4f       	sbci	r17, 0xFF	; 255
    1f4a:	01 2e       	mov	r0, r17
    1f4c:	00 0c       	add	r0, r0
    1f4e:	22 0b       	sbc	r18, r18
    1f50:	33 0b       	sbc	r19, r19
    1f52:	0b 83       	std	Y+3, r16	; 0x03
    1f54:	1c 83       	std	Y+4, r17	; 0x04
    1f56:	2d 83       	std	Y+5, r18	; 0x05
    1f58:	3e 83       	std	Y+6, r19	; 0x06
	char_stream_send.pChar    = pIns_Addr;
    1f5a:	ae 01       	movw	r20, r28
    1f5c:	43 5f       	subi	r20, 0xF3	; 243
    1f5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f60:	5a 83       	std	Y+2, r21	; 0x02
    1f62:	49 83       	std	Y+1, r20	; 0x01
	pIns_Addr[0]              = SPI_FLASH_INS_RDOTP;
    1f64:	8b e4       	ldi	r24, 0x4B	; 75
    1f66:	8d 87       	std	Y+13, r24	; 0x0d

	fill_addr_vect(udAddr, pIns_Addr, 3);
    1f68:	23 e0       	ldi	r18, 0x03	; 3
    1f6a:	60 e0       	ldi	r22, 0x00	; 0
    1f6c:	70 e0       	ldi	r23, 0x00	; 0
    1f6e:	cb 01       	movw	r24, r22
    1f70:	1e df       	rcall	.-452    	; 0x1dae <fill_addr_vect>

	char_stream_recv.length   = udNrOfElementsToRead;
    1f72:	89 86       	std	Y+9, r8	; 0x09
    1f74:	9a 86       	std	Y+10, r9	; 0x0a
    1f76:	ab 86       	std	Y+11, r10	; 0x0b
    1f78:	bc 86       	std	Y+12, r11	; 0x0c
	char_stream_recv.pChar    = ucpElements;
    1f7a:	f8 86       	std	Y+8, r15	; 0x08
    1f7c:	ef 82       	std	Y+7, r14	; 0x07

	// Step 3: Send the packet serially, and fill the buffer with the data being returned
	Serialize_SPI(&char_stream_send,
    1f7e:	23 e0       	ldi	r18, 0x03	; 3
    1f80:	41 e0       	ldi	r20, 0x01	; 1
    1f82:	be 01       	movw	r22, r28
    1f84:	69 5f       	subi	r22, 0xF9	; 249
    1f86:	7f 4f       	sbci	r23, 0xFF	; 255
    1f88:	ce 01       	movw	r24, r28
    1f8a:	01 96       	adiw	r24, 0x01	; 1
    1f8c:	cd d7       	rcall	.+3994   	; 0x2f28 <Serialize_SPI>
	              &char_stream_recv,
	              OpsWakeUp,
	              OpsEndTransfer);

	return Flash_Success;
}
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	61 96       	adiw	r28, 0x11	; 17
    1f92:	0f b6       	in	r0, 0x3f	; 63
    1f94:	f8 94       	cli
    1f96:	de bf       	out	0x3e, r29	; 62
    1f98:	0f be       	out	0x3f, r0	; 63
    1f9a:	cd bf       	out	0x3d, r28	; 61
    1f9c:	df 91       	pop	r29
    1f9e:	cf 91       	pop	r28
    1fa0:	1f 91       	pop	r17
    1fa2:	0f 91       	pop	r16
    1fa4:	ff 90       	pop	r15
    1fa6:	ef 90       	pop	r14
    1fa8:	bf 90       	pop	r11
    1faa:	af 90       	pop	r10
    1fac:	9f 90       	pop	r9
    1fae:	8f 90       	pop	r8
    1fb0:	08 95       	ret

00001fb2 <WAIT_TILL_Instruction_EXECUTION_COMPLETE>:

/*-----------------------------------------------------------------------------
Description:   This function wait till instruction execution is complete
-----------------------------------------------------------------------------*/
ReturnType WAIT_TILL_Instruction_EXECUTION_COMPLETE(NMX_sint16 second)
{
    1fb2:	cf 92       	push	r12
    1fb4:	df 92       	push	r13
    1fb6:	ef 92       	push	r14
    1fb8:	ff 92       	push	r15
    1fba:	6c 01       	movw	r12, r24
	FlashTimeOut(0);
    1fbc:	60 e0       	ldi	r22, 0x00	; 0
    1fbe:	70 e0       	ldi	r23, 0x00	; 0
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	ba de       	rcall	.-652    	; 0x1d38 <FlashTimeOut>
	while(IsFlashBusy())
	{
		if(Flash_OperationTimeOut == FlashTimeOut(second))
    1fc4:	0d 2c       	mov	r0, r13
    1fc6:	00 0c       	add	r0, r0
    1fc8:	ee 08       	sbc	r14, r14
    1fca:	ff 08       	sbc	r15, r15
Description:   This function wait till instruction execution is complete
-----------------------------------------------------------------------------*/
ReturnType WAIT_TILL_Instruction_EXECUTION_COMPLETE(NMX_sint16 second)
{
	FlashTimeOut(0);
	while(IsFlashBusy())
    1fcc:	05 c0       	rjmp	.+10     	; 0x1fd8 <WAIT_TILL_Instruction_EXECUTION_COMPLETE+0x26>
	{
		if(Flash_OperationTimeOut == FlashTimeOut(second))
    1fce:	c7 01       	movw	r24, r14
    1fd0:	b6 01       	movw	r22, r12
    1fd2:	b2 de       	rcall	.-668    	; 0x1d38 <FlashTimeOut>
    1fd4:	8a 30       	cpi	r24, 0x0A	; 10
    1fd6:	19 f0       	breq	.+6      	; 0x1fde <WAIT_TILL_Instruction_EXECUTION_COMPLETE+0x2c>
Description:   This function wait till instruction execution is complete
-----------------------------------------------------------------------------*/
ReturnType WAIT_TILL_Instruction_EXECUTION_COMPLETE(NMX_sint16 second)
{
	FlashTimeOut(0);
	while(IsFlashBusy())
    1fd8:	7e de       	rcall	.-772    	; 0x1cd6 <IsFlashBusy>
    1fda:	81 11       	cpse	r24, r1
    1fdc:	f8 cf       	rjmp	.-16     	; 0x1fce <WAIT_TILL_Instruction_EXECUTION_COMPLETE+0x1c>
	{
		if(Flash_OperationTimeOut == FlashTimeOut(second))
			return  Flash_OperationTimeOut;
	}
	return Flash_Success;
}
    1fde:	ff 90       	pop	r15
    1fe0:	ef 90       	pop	r14
    1fe2:	df 90       	pop	r13
    1fe4:	cf 90       	pop	r12
    1fe6:	08 95       	ret

00001fe8 <FlashWriteStatusRegister>:
   Step 2: Initialize the data (i.e. Instruction & value) packet to be sent serially
   Step 3: Send the packet serially
   Step 4: Wait until the operation completes or a timeout occurs.
*******************************************************************************/
ReturnType  FlashWriteStatusRegister(NMX_uint8 ucStatusRegister)
{
    1fe8:	1f 93       	push	r17
    1fea:	cf 93       	push	r28
    1fec:	df 93       	push	r29
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	28 97       	sbiw	r28, 0x08	; 8
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	de bf       	out	0x3e, r29	; 62
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	18 2f       	mov	r17, r24
	CharStream char_stream_send;
	NMX_uint8  pIns_Val[2];

	// Step 1: Disable Write protection
	fdo->GenOp.WriteEnable();
    2000:	e0 91 7f 0d 	lds	r30, 0x0D7F
    2004:	f0 91 80 0d 	lds	r31, 0x0D80
    2008:	e6 5a       	subi	r30, 0xA6	; 166
    200a:	ff 4f       	sbci	r31, 0xFF	; 255
    200c:	01 90       	ld	r0, Z+
    200e:	f0 81       	ld	r31, Z
    2010:	e0 2d       	mov	r30, r0
    2012:	19 95       	eicall

	// Step 2: Initialize the data (i.e. Instruction & value) packet to be sent serially
	char_stream_send.length = 2;
    2014:	82 e0       	ldi	r24, 0x02	; 2
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	a0 e0       	ldi	r26, 0x00	; 0
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	8b 83       	std	Y+3, r24	; 0x03
    201e:	9c 83       	std	Y+4, r25	; 0x04
    2020:	ad 83       	std	Y+5, r26	; 0x05
    2022:	be 83       	std	Y+6, r27	; 0x06
	char_stream_send.pChar  = pIns_Val;
    2024:	ce 01       	movw	r24, r28
    2026:	07 96       	adiw	r24, 0x07	; 7
    2028:	9a 83       	std	Y+2, r25	; 0x02
    202a:	89 83       	std	Y+1, r24	; 0x01
	pIns_Val[0] = SPI_FLASH_INS_WRSR;
    202c:	81 e0       	ldi	r24, 0x01	; 1
    202e:	8f 83       	std	Y+7, r24	; 0x07
	pIns_Val[1] = ucStatusRegister;
    2030:	18 87       	std	Y+8, r17	; 0x08

	// Step 3: Send the packet serially
	Serialize_SPI(&char_stream_send,
    2032:	23 e0       	ldi	r18, 0x03	; 3
    2034:	41 e0       	ldi	r20, 0x01	; 1
    2036:	60 e0       	ldi	r22, 0x00	; 0
    2038:	70 e0       	ldi	r23, 0x00	; 0
    203a:	ce 01       	movw	r24, r28
    203c:	01 96       	adiw	r24, 0x01	; 1
    203e:	74 d7       	rcall	.+3816   	; 0x2f28 <Serialize_SPI>
	              NULL_PTR,
	              OpsWakeUp,
	              OpsEndTransfer);

	// Step 4: Wait until the operation completes or a timeout occurs.
	return WAIT_TILL_Instruction_EXECUTION_COMPLETE(1);
    2040:	81 e0       	ldi	r24, 0x01	; 1
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	b6 df       	rcall	.-148    	; 0x1fb2 <WAIT_TILL_Instruction_EXECUTION_COMPLETE>
}
    2046:	28 96       	adiw	r28, 0x08	; 8
    2048:	0f b6       	in	r0, 0x3f	; 63
    204a:	f8 94       	cli
    204c:	de bf       	out	0x3e, r29	; 62
    204e:	0f be       	out	0x3f, r0	; 63
    2050:	cd bf       	out	0x3d, r28	; 61
    2052:	df 91       	pop	r29
    2054:	cf 91       	pop	r28
    2056:	1f 91       	pop	r17
    2058:	08 95       	ret

0000205a <FlashLockSector>:

Pseudo Code:

*******************************************************************************/
ReturnType FlashLockSector(uAddrType address,  NMX_uint32 len)
{
    205a:	2f 92       	push	r2
    205c:	3f 92       	push	r3
    205e:	4f 92       	push	r4
    2060:	5f 92       	push	r5
    2062:	6f 92       	push	r6
    2064:	7f 92       	push	r7
    2066:	8f 92       	push	r8
    2068:	9f 92       	push	r9
    206a:	af 92       	push	r10
    206c:	bf 92       	push	r11
    206e:	cf 92       	push	r12
    2070:	df 92       	push	r13
    2072:	ef 92       	push	r14
    2074:	ff 92       	push	r15
    2076:	0f 93       	push	r16
    2078:	1f 93       	push	r17
    207a:	cf 93       	push	r28
    207c:	df 93       	push	r29
    207e:	00 d0       	rcall	.+0      	; 0x2080 <FlashLockSector+0x26>
    2080:	00 d0       	rcall	.+0      	; 0x2082 <FlashLockSector+0x28>
    2082:	cd b7       	in	r28, 0x3d	; 61
    2084:	de b7       	in	r29, 0x3e	; 62
    2086:	69 83       	std	Y+1, r22	; 0x01
    2088:	7a 83       	std	Y+2, r23	; 0x02
    208a:	8b 83       	std	Y+3, r24	; 0x03
    208c:	9c 83       	std	Y+4, r25	; 0x04
    208e:	29 01       	movw	r4, r18
    2090:	3a 01       	movw	r6, r20
	NMX_uint8 TB, BP, SR;
	int i, protected_area, start_sector;
	int sector_size, num_of_sectors;

	sector_size = fdo->Desc.FlashSectorSize;
    2092:	e0 91 7f 0d 	lds	r30, 0x0D7F
    2096:	f0 91 80 0d 	lds	r31, 0x0D80
    209a:	c1 a0       	ldd	r12, Z+33	; 0x21
    209c:	d2 a0       	ldd	r13, Z+34	; 0x22
	num_of_sectors = fdo->Desc.FlashSectorCount;
    209e:	85 84       	ldd	r8, Z+13	; 0x0d
    20a0:	96 84       	ldd	r9, Z+14	; 0x0e
    20a2:	a7 84       	ldd	r10, Z+15	; 0x0f
    20a4:	b0 88       	ldd	r11, Z+16	; 0x10

	FlashWriteEnable();
    20a6:	0e 94 fe 03 	call	0x7fc	; 0x7fc <FlashWriteEnable>

	start_sector = address / sector_size;
    20aa:	0d 2c       	mov	r0, r13
    20ac:	00 0c       	add	r0, r0
    20ae:	ee 08       	sbc	r14, r14
    20b0:	ff 08       	sbc	r15, r15
	protected_area = len / sector_size;
    20b2:	c3 01       	movw	r24, r6
    20b4:	b2 01       	movw	r22, r4
    20b6:	a7 01       	movw	r20, r14
    20b8:	96 01       	movw	r18, r12
    20ba:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__udivmodsi4>
    20be:	29 01       	movw	r4, r18
    20c0:	3a 01       	movw	r6, r20
    20c2:	3e 83       	std	Y+6, r19	; 0x06
    20c4:	2d 83       	std	Y+5, r18	; 0x05

	if (protected_area == 0 || protected_area > num_of_sectors)
    20c6:	21 15       	cp	r18, r1
    20c8:	31 05       	cpc	r19, r1
    20ca:	09 f4       	brne	.+2      	; 0x20ce <FlashLockSector+0x74>
    20cc:	6e c0       	rjmp	.+220    	; 0x21aa <FlashLockSector+0x150>
	NMX_uint8 TB, BP, SR;
	int i, protected_area, start_sector;
	int sector_size, num_of_sectors;

	sector_size = fdo->Desc.FlashSectorSize;
	num_of_sectors = fdo->Desc.FlashSectorCount;
    20ce:	84 01       	movw	r16, r8
	FlashWriteEnable();

	start_sector = address / sector_size;
	protected_area = len / sector_size;

	if (protected_area == 0 || protected_area > num_of_sectors)
    20d0:	82 16       	cp	r8, r18
    20d2:	93 06       	cpc	r9, r19
    20d4:	0c f4       	brge	.+2      	; 0x20d8 <FlashLockSector+0x7e>
    20d6:	6b c0       	rjmp	.+214    	; 0x21ae <FlashLockSector+0x154>
	sector_size = fdo->Desc.FlashSectorSize;
	num_of_sectors = fdo->Desc.FlashSectorCount;

	FlashWriteEnable();

	start_sector = address / sector_size;
    20d8:	69 81       	ldd	r22, Y+1	; 0x01
    20da:	7a 81       	ldd	r23, Y+2	; 0x02
    20dc:	8b 81       	ldd	r24, Y+3	; 0x03
    20de:	9c 81       	ldd	r25, Y+4	; 0x04
    20e0:	a7 01       	movw	r20, r14
    20e2:	96 01       	movw	r18, r12
    20e4:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__udivmodsi4>
    20e8:	29 83       	std	Y+1, r18	; 0x01
    20ea:	3a 83       	std	Y+2, r19	; 0x02
    20ec:	4b 83       	std	Y+3, r20	; 0x03
    20ee:	5c 83       	std	Y+4, r21	; 0x04

	if (protected_area == 0 || protected_area > num_of_sectors)
		return Flash_AddressInvalid;

	//(pa & (pa - 1) == 0) verifica che pa sia una potenza di 2
	if ((start_sector != 0 && (start_sector + protected_area) != num_of_sectors) || (protected_area & (protected_area - 1)) != 0)
    20f0:	21 15       	cp	r18, r1
    20f2:	31 05       	cpc	r19, r1
    20f4:	31 f0       	breq	.+12     	; 0x2102 <FlashLockSector+0xa8>
    20f6:	24 0d       	add	r18, r4
    20f8:	35 1d       	adc	r19, r5
    20fa:	28 15       	cp	r18, r8
    20fc:	39 05       	cpc	r19, r9
    20fe:	09 f0       	breq	.+2      	; 0x2102 <FlashLockSector+0xa8>
    2100:	58 c0       	rjmp	.+176    	; 0x21b2 <FlashLockSector+0x158>
    2102:	c2 01       	movw	r24, r4
    2104:	01 97       	sbiw	r24, 0x01	; 1
    2106:	48 22       	and	r4, r24
    2108:	59 22       	and	r5, r25
    210a:	45 28       	or	r4, r5
    210c:	09 f0       	breq	.+2      	; 0x2110 <FlashLockSector+0xb6>
    210e:	53 c0       	rjmp	.+166    	; 0x21b6 <FlashLockSector+0x15c>
		return Flash_AddressInvalid;


	if (address/sector_size < num_of_sectors/2)
    2110:	64 01       	movw	r12, r8
    2112:	11 23       	and	r17, r17
    2114:	1c f4       	brge	.+6      	; 0x211c <FlashLockSector+0xc2>
    2116:	3f ef       	ldi	r19, 0xFF	; 255
    2118:	c3 1a       	sub	r12, r19
    211a:	d3 0a       	sbc	r13, r19
    211c:	d5 94       	asr	r13
    211e:	c7 94       	ror	r12
    2120:	0d 2c       	mov	r0, r13
    2122:	00 0c       	add	r0, r0
    2124:	ee 08       	sbc	r14, r14
    2126:	ff 08       	sbc	r15, r15
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	29 81       	ldd	r18, Y+1	; 0x01
    212c:	3a 81       	ldd	r19, Y+2	; 0x02
    212e:	4b 81       	ldd	r20, Y+3	; 0x03
    2130:	5c 81       	ldd	r21, Y+4	; 0x04
    2132:	2c 15       	cp	r18, r12
    2134:	3d 05       	cpc	r19, r13
    2136:	4e 05       	cpc	r20, r14
    2138:	5f 05       	cpc	r21, r15
    213a:	08 f0       	brcs	.+2      	; 0x213e <FlashLockSector+0xe4>
    213c:	80 e0       	ldi	r24, 0x00	; 0
	{
		TB = 0;
	}

	BP = 1;
	for (i = 1; i <= num_of_sectors; i = i*2)
    213e:	10 16       	cp	r1, r16
    2140:	11 06       	cpc	r1, r17
    2142:	ac f4       	brge	.+42     	; 0x216e <FlashLockSector+0x114>
	{
		if (protected_area == i)
    2144:	4d 81       	ldd	r20, Y+5	; 0x05
    2146:	5e 81       	ldd	r21, Y+6	; 0x06
    2148:	41 30       	cpi	r20, 0x01	; 1
    214a:	51 05       	cpc	r21, r1
    214c:	91 f0       	breq	.+36     	; 0x2172 <FlashLockSector+0x118>
    214e:	21 e0       	ldi	r18, 0x01	; 1
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	91 e0       	ldi	r25, 0x01	; 1
    2154:	05 c0       	rjmp	.+10     	; 0x2160 <FlashLockSector+0x106>
    2156:	ed 81       	ldd	r30, Y+5	; 0x05
    2158:	fe 81       	ldd	r31, Y+6	; 0x06
    215a:	e2 17       	cp	r30, r18
    215c:	f3 07       	cpc	r31, r19
    215e:	51 f0       	breq	.+20     	; 0x2174 <FlashLockSector+0x11a>
		{
			break;
		}
		BP++;
    2160:	9f 5f       	subi	r25, 0xFF	; 255
	{
		TB = 0;
	}

	BP = 1;
	for (i = 1; i <= num_of_sectors; i = i*2)
    2162:	22 0f       	add	r18, r18
    2164:	33 1f       	adc	r19, r19
    2166:	02 17       	cp	r16, r18
    2168:	13 07       	cpc	r17, r19
    216a:	ac f7       	brge	.-22     	; 0x2156 <FlashLockSector+0xfc>
    216c:	03 c0       	rjmp	.+6      	; 0x2174 <FlashLockSector+0x11a>
	else
	{
		TB = 0;
	}

	BP = 1;
    216e:	91 e0       	ldi	r25, 0x01	; 1
    2170:	01 c0       	rjmp	.+2      	; 0x2174 <FlashLockSector+0x11a>
    2172:	91 e0       	ldi	r25, 0x01	; 1
			break;
		}
		BP++;
	}

	SR = (((BP & 8) >> 3) << 6) | (TB << 5) | ((BP & 7) << 2);
    2174:	39 2f       	mov	r19, r25
    2176:	37 70       	andi	r19, 0x07	; 7
    2178:	33 0f       	add	r19, r19
    217a:	33 0f       	add	r19, r19
    217c:	82 95       	swap	r24
    217e:	88 0f       	add	r24, r24
    2180:	80 7e       	andi	r24, 0xE0	; 224
    2182:	28 2f       	mov	r18, r24
    2184:	23 2b       	or	r18, r19
    2186:	93 fb       	bst	r25, 3
    2188:	22 24       	eor	r2, r2
    218a:	20 f8       	bld	r2, 0
    218c:	31 2c       	mov	r3, r1
    218e:	c1 01       	movw	r24, r2
    2190:	00 24       	eor	r0, r0
    2192:	96 95       	lsr	r25
    2194:	87 95       	ror	r24
    2196:	07 94       	ror	r0
    2198:	96 95       	lsr	r25
    219a:	87 95       	ror	r24
    219c:	07 94       	ror	r0
    219e:	98 2f       	mov	r25, r24
    21a0:	80 2d       	mov	r24, r0

	FlashWriteStatusRegister(SR);
    21a2:	82 2b       	or	r24, r18
    21a4:	21 df       	rcall	.-446    	; 0x1fe8 <FlashWriteStatusRegister>
	return Flash_Success;
    21a6:	80 e0       	ldi	r24, 0x00	; 0
    21a8:	07 c0       	rjmp	.+14     	; 0x21b8 <FlashLockSector+0x15e>

	start_sector = address / sector_size;
	protected_area = len / sector_size;

	if (protected_area == 0 || protected_area > num_of_sectors)
		return Flash_AddressInvalid;
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	05 c0       	rjmp	.+10     	; 0x21b8 <FlashLockSector+0x15e>
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	03 c0       	rjmp	.+6      	; 0x21b8 <FlashLockSector+0x15e>

	//(pa & (pa - 1) == 0) verifica che pa sia una potenza di 2
	if ((start_sector != 0 && (start_sector + protected_area) != num_of_sectors) || (protected_area & (protected_area - 1)) != 0)
		return Flash_AddressInvalid;
    21b2:	81 e0       	ldi	r24, 0x01	; 1
    21b4:	01 c0       	rjmp	.+2      	; 0x21b8 <FlashLockSector+0x15e>
    21b6:	81 e0       	ldi	r24, 0x01	; 1
	SR = (((BP & 8) >> 3) << 6) | (TB << 5) | ((BP & 7) << 2);

	FlashWriteStatusRegister(SR);
	return Flash_Success;

}
    21b8:	26 96       	adiw	r28, 0x06	; 6
    21ba:	0f b6       	in	r0, 0x3f	; 63
    21bc:	f8 94       	cli
    21be:	de bf       	out	0x3e, r29	; 62
    21c0:	0f be       	out	0x3f, r0	; 63
    21c2:	cd bf       	out	0x3d, r28	; 61
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	1f 91       	pop	r17
    21ca:	0f 91       	pop	r16
    21cc:	ff 90       	pop	r15
    21ce:	ef 90       	pop	r14
    21d0:	df 90       	pop	r13
    21d2:	cf 90       	pop	r12
    21d4:	bf 90       	pop	r11
    21d6:	af 90       	pop	r10
    21d8:	9f 90       	pop	r9
    21da:	8f 90       	pop	r8
    21dc:	7f 90       	pop	r7
    21de:	6f 90       	pop	r6
    21e0:	5f 90       	pop	r5
    21e2:	4f 90       	pop	r4
    21e4:	3f 90       	pop	r3
    21e6:	2f 90       	pop	r2
    21e8:	08 95       	ret

000021ea <FlashUnlockAllSector>:
ReturnType FlashUnlockAllSector(void)
{
	NMX_uint8 SR = 0;

	/* Set BP2, BP1, BP0 to 0 (all flash sectors unlocked) */
	FlashWriteStatusRegister(SR);
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	fd de       	rcall	.-518    	; 0x1fe8 <FlashWriteStatusRegister>

	return Flash_Success;
}
    21ee:	80 e0       	ldi	r24, 0x00	; 0
    21f0:	08 95       	ret

000021f2 <FlashGenProgram>:
   Step 6: Initialize the data (data to be programmed) packet to be sent serially
   Step 7: Send the packet (data to be programmed) serially
   Step 8: Wait until the operation completes or a timeout occurs.
*******************************************************************************/
ReturnType FlashGenProgram(uAddrType udAddr, NMX_uint8 *pArray , NMX_uint32 udNrOfElementsInArray, NMX_uint8 ubSpiInstruction)
{
    21f2:	4f 92       	push	r4
    21f4:	5f 92       	push	r5
    21f6:	6f 92       	push	r6
    21f8:	7f 92       	push	r7
    21fa:	8f 92       	push	r8
    21fc:	9f 92       	push	r9
    21fe:	af 92       	push	r10
    2200:	bf 92       	push	r11
    2202:	cf 92       	push	r12
    2204:	df 92       	push	r13
    2206:	ef 92       	push	r14
    2208:	ff 92       	push	r15
    220a:	0f 93       	push	r16
    220c:	1f 93       	push	r17
    220e:	cf 93       	push	r28
    2210:	df 93       	push	r29
    2212:	cd b7       	in	r28, 0x3d	; 61
    2214:	de b7       	in	r29, 0x3e	; 62
    2216:	2c 97       	sbiw	r28, 0x0c	; 12
    2218:	0f b6       	in	r0, 0x3f	; 63
    221a:	f8 94       	cli
    221c:	de bf       	out	0x3e, r29	; 62
    221e:	0f be       	out	0x3f, r0	; 63
    2220:	cd bf       	out	0x3d, r28	; 61
    2222:	ae 2d       	mov	r26, r14
	NMX_uint8 pIns_Addr[5];
	NMX_uint8 fsr_value;
	ReturnType ret;

	// Step 1: Validate address input
	if(!(udAddr < fdo->Desc.FlashSize))
    2224:	e0 91 7f 0d 	lds	r30, 0x0D7F
    2228:	f0 91 80 0d 	lds	r31, 0x0D80
    222c:	c5 a4       	ldd	r12, Z+45	; 0x2d
    222e:	d6 a4       	ldd	r13, Z+46	; 0x2e
    2230:	e7 a4       	ldd	r14, Z+47	; 0x2f
    2232:	f0 a8       	ldd	r15, Z+48	; 0x30
    2234:	6c 15       	cp	r22, r12
    2236:	7d 05       	cpc	r23, r13
    2238:	8e 05       	cpc	r24, r14
    223a:	9f 05       	cpc	r25, r15
    223c:	08 f0       	brcs	.+2      	; 0x2240 <FlashGenProgram+0x4e>
    223e:	52 c0       	rjmp	.+164    	; 0x22e4 <FlashGenProgram+0xf2>
    2240:	ea 2e       	mov	r14, r26
    2242:	48 01       	movw	r8, r16
    2244:	59 01       	movw	r10, r18
    2246:	6a 01       	movw	r12, r20
    2248:	2b 01       	movw	r4, r22
    224a:	3c 01       	movw	r6, r24
		return Flash_AddressInvalid;

	// Step 2: Check whether any previous Write, Program or Erase cycle is on-going
	if(IsFlashBusy()) return Flash_OperationOngoing;
    224c:	44 dd       	rcall	.-1400   	; 0x1cd6 <IsFlashBusy>
    224e:	81 11       	cpse	r24, r1
    2250:	4b c0       	rjmp	.+150    	; 0x22e8 <FlashGenProgram+0xf6>

	// Step 3: Disable Write protection
	fdo->GenOp.WriteEnable();
    2252:	e0 91 7f 0d 	lds	r30, 0x0D7F
    2256:	f0 91 80 0d 	lds	r31, 0x0D80
    225a:	e6 5a       	subi	r30, 0xA6	; 166
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	01 90       	ld	r0, Z+
    2260:	f0 81       	ld	r31, Z
    2262:	e0 2d       	mov	r30, r0
    2264:	19 95       	eicall

	// Step 4: Initialize the data (Instruction & address only) packet to be sent serially
	char_stream_send.length   = fdo->Desc.NumAddrByte + 1;
    2266:	e0 91 7f 0d 	lds	r30, 0x0D7F
    226a:	f0 91 80 0d 	lds	r31, 0x0D80
    226e:	e9 5b       	subi	r30, 0xB9	; 185
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	20 81       	ld	r18, Z
    2274:	82 2f       	mov	r24, r18
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	01 96       	adiw	r24, 0x01	; 1
    227a:	09 2e       	mov	r0, r25
    227c:	00 0c       	add	r0, r0
    227e:	aa 0b       	sbc	r26, r26
    2280:	bb 0b       	sbc	r27, r27
    2282:	8b 83       	std	Y+3, r24	; 0x03
    2284:	9c 83       	std	Y+4, r25	; 0x04
    2286:	ad 83       	std	Y+5, r26	; 0x05
    2288:	be 83       	std	Y+6, r27	; 0x06
	char_stream_send.pChar    = pIns_Addr;
    228a:	ae 01       	movw	r20, r28
    228c:	49 5f       	subi	r20, 0xF9	; 249
    228e:	5f 4f       	sbci	r21, 0xFF	; 255
    2290:	5a 83       	std	Y+2, r21	; 0x02
    2292:	49 83       	std	Y+1, r20	; 0x01

	pIns_Addr[0]              = ubSpiInstruction;
    2294:	ef 82       	std	Y+7, r14	; 0x07

	fill_addr_vect(udAddr, pIns_Addr, fdo->Desc.NumAddrByte);
    2296:	c3 01       	movw	r24, r6
    2298:	b2 01       	movw	r22, r4
    229a:	89 dd       	rcall	.-1262   	; 0x1dae <fill_addr_vect>

	// Step 5: Send the packet (Instruction & address only) serially
	Serialize_SPI(&char_stream_send,
    229c:	22 e0       	ldi	r18, 0x02	; 2
    229e:	41 e0       	ldi	r20, 0x01	; 1
    22a0:	60 e0       	ldi	r22, 0x00	; 0
    22a2:	70 e0       	ldi	r23, 0x00	; 0
    22a4:	ce 01       	movw	r24, r28
    22a6:	01 96       	adiw	r24, 0x01	; 1
    22a8:	3f d6       	rcall	.+3198   	; 0x2f28 <Serialize_SPI>
	              NULL_PTR,
	              OpsWakeUp,
	              OpsInitTransfer);

	// Step 6: Initialize the data (data to be programmed) packet to be sent serially
	char_stream_send.length   = udNrOfElementsInArray;
    22aa:	8b 82       	std	Y+3, r8	; 0x03
    22ac:	9c 82       	std	Y+4, r9	; 0x04
    22ae:	ad 82       	std	Y+5, r10	; 0x05
    22b0:	be 82       	std	Y+6, r11	; 0x06
	char_stream_send.pChar    = pArray;
    22b2:	da 82       	std	Y+2, r13	; 0x02
    22b4:	c9 82       	std	Y+1, r12	; 0x01

	// Step 7: Send the packet (data to be programmed) serially
	Serialize_SPI(&char_stream_send,
    22b6:	23 e0       	ldi	r18, 0x03	; 3
    22b8:	41 e0       	ldi	r20, 0x01	; 1
    22ba:	60 e0       	ldi	r22, 0x00	; 0
    22bc:	70 e0       	ldi	r23, 0x00	; 0
    22be:	ce 01       	movw	r24, r28
    22c0:	01 96       	adiw	r24, 0x01	; 1
    22c2:	32 d6       	rcall	.+3172   	; 0x2f28 <Serialize_SPI>
	              NULL_PTR,
	              OpsWakeUp,
	              OpsEndTransfer);

	// Step 8: Wait until the operation completes or a timeout occurs.
	ret = WAIT_TILL_Instruction_EXECUTION_COMPLETE(1);
    22c4:	81 e0       	ldi	r24, 0x01	; 1
    22c6:	90 e0       	ldi	r25, 0x00	; 0
    22c8:	74 de       	rcall	.-792    	; 0x1fb2 <WAIT_TILL_Instruction_EXECUTION_COMPLETE>
    22ca:	18 2f       	mov	r17, r24


	FlashReadFlagStatusRegister(&fsr_value);
    22cc:	ce 01       	movw	r24, r28
    22ce:	0c 96       	adiw	r24, 0x0c	; 12
    22d0:	0e 94 1d 05 	call	0xa3a	; 0xa3a <FlashReadFlagStatusRegister>
	FlashClearFlagStatusRegister();
    22d4:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <FlashClearFlagStatusRegister>
    22d8:	8c 85       	ldd	r24, Y+12	; 0x0c
    22da:	82 71       	andi	r24, 0x12	; 18

	if((fsr_value & SPI_FSR_PROT) && (fsr_value & SPI_FSR_PROGRAM))
    22dc:	82 31       	cpi	r24, 0x12	; 18
    22de:	31 f0       	breq	.+12     	; 0x22ec <FlashGenProgram+0xfa>
		return Flash_SectorProtected;

	return ret;
    22e0:	81 2f       	mov	r24, r17
    22e2:	05 c0       	rjmp	.+10     	; 0x22ee <FlashGenProgram+0xfc>
	NMX_uint8 fsr_value;
	ReturnType ret;

	// Step 1: Validate address input
	if(!(udAddr < fdo->Desc.FlashSize))
		return Flash_AddressInvalid;
    22e4:	81 e0       	ldi	r24, 0x01	; 1
    22e6:	03 c0       	rjmp	.+6      	; 0x22ee <FlashGenProgram+0xfc>

	// Step 2: Check whether any previous Write, Program or Erase cycle is on-going
	if(IsFlashBusy()) return Flash_OperationOngoing;
    22e8:	89 e0       	ldi	r24, 0x09	; 9
    22ea:	01 c0       	rjmp	.+2      	; 0x22ee <FlashGenProgram+0xfc>

	FlashReadFlagStatusRegister(&fsr_value);
	FlashClearFlagStatusRegister();

	if((fsr_value & SPI_FSR_PROT) && (fsr_value & SPI_FSR_PROGRAM))
		return Flash_SectorProtected;
    22ec:	8c e0       	ldi	r24, 0x0C	; 12

	return ret;

}
    22ee:	2c 96       	adiw	r28, 0x0c	; 12
    22f0:	0f b6       	in	r0, 0x3f	; 63
    22f2:	f8 94       	cli
    22f4:	de bf       	out	0x3e, r29	; 62
    22f6:	0f be       	out	0x3f, r0	; 63
    22f8:	cd bf       	out	0x3d, r28	; 61
    22fa:	df 91       	pop	r29
    22fc:	cf 91       	pop	r28
    22fe:	1f 91       	pop	r17
    2300:	0f 91       	pop	r16
    2302:	ff 90       	pop	r15
    2304:	ef 90       	pop	r14
    2306:	df 90       	pop	r13
    2308:	cf 90       	pop	r12
    230a:	bf 90       	pop	r11
    230c:	af 90       	pop	r10
    230e:	9f 90       	pop	r9
    2310:	8f 90       	pop	r8
    2312:	7f 90       	pop	r7
    2314:	6f 90       	pop	r6
    2316:	5f 90       	pop	r5
    2318:	4f 90       	pop	r4
    231a:	08 95       	ret

0000231c <FlashDataProgram>:

/*******************************************************************************
Function:     	FlashDataProgram( )
*******************************************************************************/
ReturnType FlashDataProgram(uAddrType udAddr, NMX_uint8 *pArray , NMX_uint16 udNrOfElementsInArray, NMX_uint8 ubSpiInstruction)
{
    231c:	2f 92       	push	r2
    231e:	3f 92       	push	r3
    2320:	4f 92       	push	r4
    2322:	5f 92       	push	r5
    2324:	6f 92       	push	r6
    2326:	7f 92       	push	r7
    2328:	8f 92       	push	r8
    232a:	9f 92       	push	r9
    232c:	af 92       	push	r10
    232e:	bf 92       	push	r11
    2330:	cf 92       	push	r12
    2332:	df 92       	push	r13
    2334:	ef 92       	push	r14
    2336:	ff 92       	push	r15
    2338:	0f 93       	push	r16
    233a:	1f 93       	push	r17
    233c:	cf 93       	push	r28
    233e:	df 93       	push	r29
    2340:	4b 01       	movw	r8, r22
    2342:	5c 01       	movw	r10, r24
    2344:	6a 01       	movw	r12, r20
    2346:	19 01       	movw	r2, r18
    2348:	f0 2e       	mov	r15, r16
	ReturnType retValue = Flash_Success;
	NMX_uint16 dataOffset;

	// Enabling the Write
	fdo->GenOp.WriteEnable();
    234a:	e0 91 7f 0d 	lds	r30, 0x0D7F
    234e:	f0 91 80 0d 	lds	r31, 0x0D80
    2352:	e6 5a       	subi	r30, 0xA6	; 166
    2354:	ff 4f       	sbci	r31, 0xFF	; 255
    2356:	01 90       	ld	r0, Z+
    2358:	f0 81       	ld	r31, Z
    235a:	e0 2d       	mov	r30, r0
    235c:	19 95       	eicall

	if (retValue != Flash_Success)
		return retValue;

	// Computing the starting alignment, i.e. the distance from the 64 bytes boundary
	dataOffset = (fdo->Desc.FlashPageSize - (udAddr & fdo->Desc.FlashAddressMask) ) & fdo->Desc.FlashAddressMask;
    235e:	e0 91 7f 0d 	lds	r30, 0x0D7F
    2362:	f0 91 80 0d 	lds	r31, 0x0D80
    2366:	41 85       	ldd	r20, Z+9	; 0x09
    2368:	52 85       	ldd	r21, Z+10	; 0x0a
    236a:	ca 01       	movw	r24, r20
    236c:	88 21       	and	r24, r8
    236e:	99 21       	and	r25, r9
    2370:	c1 8d       	ldd	r28, Z+25	; 0x19
    2372:	d2 8d       	ldd	r29, Z+26	; 0x1a
    2374:	c8 1b       	sub	r28, r24
    2376:	d9 0b       	sbc	r29, r25
    2378:	c4 23       	and	r28, r20
    237a:	d5 23       	and	r29, r21
    237c:	2c 16       	cp	r2, r28
    237e:	3d 06       	cpc	r3, r29
    2380:	08 f4       	brcc	.+2      	; 0x2384 <FlashDataProgram+0x68>
    2382:	e1 01       	movw	r28, r2
	if (dataOffset > udNrOfElementsInArray)
		dataOffset = udNrOfElementsInArray;
	if (dataOffset > 0)
    2384:	20 97       	sbiw	r28, 0x00	; 0
    2386:	d1 f4       	brne	.+52     	; 0x23bc <FlashDataProgram+0xa0>
		retValue = FlashGenProgram(udAddr, pArray, dataOffset, ubSpiInstruction);
		if (Flash_Success != retValue)
			return retValue;
	}

	for ( ; (dataOffset+fdo->Desc.FlashPageSize) < udNrOfElementsInArray; dataOffset += fdo->Desc.FlashPageSize)
    2388:	ce 01       	movw	r24, r28
    238a:	a0 e0       	ldi	r26, 0x00	; 0
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	e0 91 7f 0d 	lds	r30, 0x0D7F
    2392:	f0 91 80 0d 	lds	r31, 0x0D80
    2396:	01 8d       	ldd	r16, Z+25	; 0x19
    2398:	12 8d       	ldd	r17, Z+26	; 0x1a
    239a:	23 8d       	ldd	r18, Z+27	; 0x1b
    239c:	34 8d       	ldd	r19, Z+28	; 0x1c
    239e:	21 01       	movw	r4, r2
    23a0:	61 2c       	mov	r6, r1
    23a2:	71 2c       	mov	r7, r1
    23a4:	ac 01       	movw	r20, r24
    23a6:	bd 01       	movw	r22, r26
    23a8:	40 0f       	add	r20, r16
    23aa:	51 1f       	adc	r21, r17
    23ac:	62 1f       	adc	r22, r18
    23ae:	73 1f       	adc	r23, r19
    23b0:	44 15       	cp	r20, r4
    23b2:	55 05       	cpc	r21, r5
    23b4:	66 05       	cpc	r22, r6
    23b6:	77 05       	cpc	r23, r7
    23b8:	60 f0       	brcs	.+24     	; 0x23d2 <FlashDataProgram+0xb6>
    23ba:	30 c0       	rjmp	.+96     	; 0x241c <FlashDataProgram+0x100>
	dataOffset = (fdo->Desc.FlashPageSize - (udAddr & fdo->Desc.FlashAddressMask) ) & fdo->Desc.FlashAddressMask;
	if (dataOffset > udNrOfElementsInArray)
		dataOffset = udNrOfElementsInArray;
	if (dataOffset > 0)
	{
		retValue = FlashGenProgram(udAddr, pArray, dataOffset, ubSpiInstruction);
    23bc:	8e 01       	movw	r16, r28
    23be:	20 e0       	ldi	r18, 0x00	; 0
    23c0:	30 e0       	ldi	r19, 0x00	; 0
    23c2:	ef 2c       	mov	r14, r15
    23c4:	a6 01       	movw	r20, r12
    23c6:	c5 01       	movw	r24, r10
    23c8:	b4 01       	movw	r22, r8
    23ca:	13 df       	rcall	.-474    	; 0x21f2 <FlashGenProgram>
		if (Flash_Success != retValue)
    23cc:	88 23       	and	r24, r24
    23ce:	e1 f2       	breq	.-72     	; 0x2388 <FlashDataProgram+0x6c>
    23d0:	3a c0       	rjmp	.+116    	; 0x2446 <FlashDataProgram+0x12a>
			return retValue;
	}

	for ( ; (dataOffset+fdo->Desc.FlashPageSize) < udNrOfElementsInArray; dataOffset += fdo->Desc.FlashPageSize)
	{
		retValue = FlashGenProgram(udAddr+dataOffset, pArray+dataOffset, fdo->Desc.FlashPageSize, ubSpiInstruction);
    23d2:	bc 01       	movw	r22, r24
    23d4:	cd 01       	movw	r24, r26
    23d6:	68 0d       	add	r22, r8
    23d8:	79 1d       	adc	r23, r9
    23da:	8a 1d       	adc	r24, r10
    23dc:	9b 1d       	adc	r25, r11
    23de:	ef 2c       	mov	r14, r15
    23e0:	a6 01       	movw	r20, r12
    23e2:	4c 0f       	add	r20, r28
    23e4:	5d 1f       	adc	r21, r29
    23e6:	05 df       	rcall	.-502    	; 0x21f2 <FlashGenProgram>
		if (Flash_Success != retValue)
    23e8:	81 11       	cpse	r24, r1
    23ea:	2d c0       	rjmp	.+90     	; 0x2446 <FlashDataProgram+0x12a>
		retValue = FlashGenProgram(udAddr, pArray, dataOffset, ubSpiInstruction);
		if (Flash_Success != retValue)
			return retValue;
	}

	for ( ; (dataOffset+fdo->Desc.FlashPageSize) < udNrOfElementsInArray; dataOffset += fdo->Desc.FlashPageSize)
    23ec:	e0 91 7f 0d 	lds	r30, 0x0D7F
    23f0:	f0 91 80 0d 	lds	r31, 0x0D80
    23f4:	01 8d       	ldd	r16, Z+25	; 0x19
    23f6:	12 8d       	ldd	r17, Z+26	; 0x1a
    23f8:	23 8d       	ldd	r18, Z+27	; 0x1b
    23fa:	34 8d       	ldd	r19, Z+28	; 0x1c
    23fc:	c0 0f       	add	r28, r16
    23fe:	d1 1f       	adc	r29, r17
    2400:	ce 01       	movw	r24, r28
    2402:	a0 e0       	ldi	r26, 0x00	; 0
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	ac 01       	movw	r20, r24
    2408:	bd 01       	movw	r22, r26
    240a:	40 0f       	add	r20, r16
    240c:	51 1f       	adc	r21, r17
    240e:	62 1f       	adc	r22, r18
    2410:	73 1f       	adc	r23, r19
    2412:	44 15       	cp	r20, r4
    2414:	55 05       	cpc	r21, r5
    2416:	66 05       	cpc	r22, r6
    2418:	77 05       	cpc	r23, r7
    241a:	d8 f2       	brcs	.-74     	; 0x23d2 <FlashDataProgram+0xb6>
		retValue = FlashGenProgram(udAddr+dataOffset, pArray+dataOffset, fdo->Desc.FlashPageSize, ubSpiInstruction);
		if (Flash_Success != retValue)
			return retValue;
	}

	if (udNrOfElementsInArray > dataOffset)
    241c:	c2 15       	cp	r28, r2
    241e:	d3 05       	cpc	r29, r3
    2420:	88 f4       	brcc	.+34     	; 0x2444 <FlashDataProgram+0x128>
		retValue = FlashGenProgram(udAddr+dataOffset, pArray+dataOffset, (udNrOfElementsInArray-dataOffset), ubSpiInstruction);
    2422:	81 01       	movw	r16, r2
    2424:	0c 1b       	sub	r16, r28
    2426:	1d 0b       	sbc	r17, r29
    2428:	20 e0       	ldi	r18, 0x00	; 0
    242a:	30 e0       	ldi	r19, 0x00	; 0
    242c:	a6 01       	movw	r20, r12
    242e:	4c 0f       	add	r20, r28
    2430:	5d 1f       	adc	r21, r29
    2432:	bc 01       	movw	r22, r24
    2434:	cd 01       	movw	r24, r26
    2436:	68 0d       	add	r22, r8
    2438:	79 1d       	adc	r23, r9
    243a:	8a 1d       	adc	r24, r10
    243c:	9b 1d       	adc	r25, r11
    243e:	ef 2c       	mov	r14, r15
    2440:	d8 de       	rcall	.-592    	; 0x21f2 <FlashGenProgram>
    2442:	01 c0       	rjmp	.+2      	; 0x2446 <FlashDataProgram+0x12a>
    2444:	80 e0       	ldi	r24, 0x00	; 0

	return retValue;
}
    2446:	df 91       	pop	r29
    2448:	cf 91       	pop	r28
    244a:	1f 91       	pop	r17
    244c:	0f 91       	pop	r16
    244e:	ff 90       	pop	r15
    2450:	ef 90       	pop	r14
    2452:	df 90       	pop	r13
    2454:	cf 90       	pop	r12
    2456:	bf 90       	pop	r11
    2458:	af 90       	pop	r10
    245a:	9f 90       	pop	r9
    245c:	8f 90       	pop	r8
    245e:	7f 90       	pop	r7
    2460:	6f 90       	pop	r6
    2462:	5f 90       	pop	r5
    2464:	4f 90       	pop	r4
    2466:	3f 90       	pop	r3
    2468:	2f 90       	pop	r2
    246a:	08 95       	ret

0000246c <DataProgram>:
   Step 1: Select the right action using the insInstruction parameter
   Step 2: Execute the Flash memory Function
   Step 3: Return the Error Code
*******************************************************************************/
ReturnType DataProgram(InstructionType insInstruction, ParameterType *fp)
{
    246c:	0f 93       	push	r16
	ReturnType rRetVal;
	NMX_uint8 insCode;

	switch (insInstruction)
    246e:	8f 30       	cpi	r24, 0x0F	; 15
    2470:	79 f0       	breq	.+30     	; 0x2490 <DataProgram+0x24>
    2472:	28 f4       	brcc	.+10     	; 0x247e <DataProgram+0x12>
    2474:	8d 30       	cpi	r24, 0x0D	; 13
    2476:	61 f0       	breq	.+24     	; 0x2490 <DataProgram+0x24>
    2478:	8e 30       	cpi	r24, 0x0E	; 14
    247a:	31 f0       	breq	.+12     	; 0x2488 <DataProgram+0x1c>
    247c:	15 c0       	rjmp	.+42     	; 0x24a8 <DataProgram+0x3c>
    247e:	80 31       	cpi	r24, 0x10	; 16
    2480:	29 f0       	breq	.+10     	; 0x248c <DataProgram+0x20>
    2482:	81 31       	cpi	r24, 0x11	; 17
    2484:	89 f4       	brne	.+34     	; 0x24a8 <DataProgram+0x3c>
    2486:	04 c0       	rjmp	.+8      	; 0x2490 <DataProgram+0x24>
#endif
		break;

	/* DUAL INPUT FAST PROGRAM */
	case DualInputProgram:
		insCode = SPI_FLASH_INS_DIPP;
    2488:	02 ea       	ldi	r16, 0xA2	; 162
    248a:	03 c0       	rjmp	.+6      	; 0x2492 <DataProgram+0x26>
		break;

	/* QUAD INPUT FAST PROGRAM */
	case QuadInputProgram:
#ifndef SUPPORT_N25Q_STEP_B
		insCode = SPI_FLASH_INS_QIPP;
    248c:	02 e3       	ldi	r16, 0x32	; 50
#endif
#ifdef SUPPORT_N25Q_STEP_B
		insCode = SPI_FLASH_INS_QIPP4B;
#endif
		break;
    248e:	01 c0       	rjmp	.+2      	; 0x2492 <DataProgram+0x26>
	{

	/* PAGE PROGRAM */
	case PageProgram:
#ifndef SUPPORT_N25Q_STEP_B
		insCode = SPI_FLASH_INS_PP;
    2490:	02 e0       	ldi	r16, 0x02	; 2
    2492:	fb 01       	movw	r30, r22
		return Flash_FunctionNotSupported;
		break;

	} /* EndSwitch */

	rRetVal = FlashDataProgram( (*fp).PageProgram.udAddr,
    2494:	24 81       	ldd	r18, Z+4	; 0x04
    2496:	35 81       	ldd	r19, Z+5	; 0x05
    2498:	40 85       	ldd	r20, Z+8	; 0x08
    249a:	51 85       	ldd	r21, Z+9	; 0x09
    249c:	60 81       	ld	r22, Z
    249e:	71 81       	ldd	r23, Z+1	; 0x01
    24a0:	82 81       	ldd	r24, Z+2	; 0x02
    24a2:	93 81       	ldd	r25, Z+3	; 0x03
    24a4:	3b df       	rcall	.-394    	; 0x231c <FlashDataProgram>
	                            (*fp).PageProgram.pArray,
	                            (*fp).PageProgram.udNrOfElementsInArray,
	                            insCode
	                          );

	return rRetVal;
    24a6:	01 c0       	rjmp	.+2      	; 0x24aa <DataProgram+0x3e>
	case QuadInputExtendedFastProgram:
		insCode = SPI_FLASH_INS_QIEPP;
		break;

	default:
		return Flash_FunctionNotSupported;
    24a8:	87 e0       	ldi	r24, 0x07	; 7
	                            (*fp).PageProgram.udNrOfElementsInArray,
	                            insCode
	                          );

	return rRetVal;
} /* EndFunction Flash */
    24aa:	0f 91       	pop	r16
    24ac:	08 95       	ret

000024ae <FlashSectorErase>:
   Step 4: Initialize the data (Instruction & address) packet to be sent serially
   Step 5: Send the packet (Instruction & address) serially
   Step 6: Wait until the operation completes or a timeout occurs.
*******************************************************************************/
ReturnType  FlashSectorErase( uSectorType uscSectorNr )
{
    24ae:	cf 92       	push	r12
    24b0:	df 92       	push	r13
    24b2:	ef 92       	push	r14
    24b4:	ff 92       	push	r15
    24b6:	0f 93       	push	r16
    24b8:	1f 93       	push	r17
    24ba:	cf 93       	push	r28
    24bc:	df 93       	push	r29
    24be:	cd b7       	in	r28, 0x3d	; 61
    24c0:	de b7       	in	r29, 0x3e	; 62
    24c2:	2c 97       	sbiw	r28, 0x0c	; 12
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	f8 94       	cli
    24c8:	de bf       	out	0x3e, r29	; 62
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	cd bf       	out	0x3d, r28	; 61
	uAddrType SectorAddr;
	NMX_uint8 fsr_value;
	ReturnType ret;

	// Step 1: Validate the sector number input
	if(!(uscSectorNr < fdo->Desc.FlashSectorCount)) return Flash_SectorNrInvalid;
    24ce:	e0 91 7f 0d 	lds	r30, 0x0D7F
    24d2:	f0 91 80 0d 	lds	r31, 0x0D80
    24d6:	8c 01       	movw	r16, r24
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	45 85       	ldd	r20, Z+13	; 0x0d
    24de:	56 85       	ldd	r21, Z+14	; 0x0e
    24e0:	67 85       	ldd	r22, Z+15	; 0x0f
    24e2:	70 89       	ldd	r23, Z+16	; 0x10
    24e4:	04 17       	cp	r16, r20
    24e6:	15 07       	cpc	r17, r21
    24e8:	26 07       	cpc	r18, r22
    24ea:	37 07       	cpc	r19, r23
    24ec:	08 f0       	brcs	.+2      	; 0x24f0 <FlashSectorErase+0x42>
    24ee:	47 c0       	rjmp	.+142    	; 0x257e <FlashSectorErase+0xd0>

	SectorAddr = fdo->GenOp.BlockOffset(uscSectorNr);
    24f0:	e8 5b       	subi	r30, 0xB8	; 184
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	01 90       	ld	r0, Z+
    24f6:	f0 81       	ld	r31, Z
    24f8:	e0 2d       	mov	r30, r0
    24fa:	19 95       	eicall
    24fc:	6b 01       	movw	r12, r22
    24fe:	7c 01       	movw	r14, r24

	// Step 2: Check whether any previous Write, Program or Erase cycle is on going
	if(IsFlashBusy()) return Flash_OperationOngoing;
    2500:	ea db       	rcall	.-2092   	; 0x1cd6 <IsFlashBusy>
    2502:	81 11       	cpse	r24, r1
    2504:	3e c0       	rjmp	.+124    	; 0x2582 <FlashSectorErase+0xd4>

	// Step 3: Disable Write protection
	fdo->GenOp.WriteEnable();
    2506:	e0 91 7f 0d 	lds	r30, 0x0D7F
    250a:	f0 91 80 0d 	lds	r31, 0x0D80
    250e:	e6 5a       	subi	r30, 0xA6	; 166
    2510:	ff 4f       	sbci	r31, 0xFF	; 255
    2512:	01 90       	ld	r0, Z+
    2514:	f0 81       	ld	r31, Z
    2516:	e0 2d       	mov	r30, r0
    2518:	19 95       	eicall

	// Step 4: Initialize the data (Instruction & address) packet to be sent serially
	char_stream_send.length   = fdo->Desc.NumAddrByte + 1;
    251a:	e0 91 7f 0d 	lds	r30, 0x0D7F
    251e:	f0 91 80 0d 	lds	r31, 0x0D80
    2522:	e9 5b       	subi	r30, 0xB9	; 185
    2524:	ff 4f       	sbci	r31, 0xFF	; 255
    2526:	20 81       	ld	r18, Z
    2528:	82 2f       	mov	r24, r18
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	01 96       	adiw	r24, 0x01	; 1
    252e:	09 2e       	mov	r0, r25
    2530:	00 0c       	add	r0, r0
    2532:	aa 0b       	sbc	r26, r26
    2534:	bb 0b       	sbc	r27, r27
    2536:	8b 83       	std	Y+3, r24	; 0x03
    2538:	9c 83       	std	Y+4, r25	; 0x04
    253a:	ad 83       	std	Y+5, r26	; 0x05
    253c:	be 83       	std	Y+6, r27	; 0x06
	char_stream_send.pChar    = &pIns_Addr[0];
    253e:	ae 01       	movw	r20, r28
    2540:	49 5f       	subi	r20, 0xF9	; 249
    2542:	5f 4f       	sbci	r21, 0xFF	; 255
    2544:	5a 83       	std	Y+2, r21	; 0x02
    2546:	49 83       	std	Y+1, r20	; 0x01

#ifndef SUPPORT_N25Q_STEP_B
	pIns_Addr[0]              = SPI_FLASH_INS_SE;
    2548:	88 ed       	ldi	r24, 0xD8	; 216
    254a:	8f 83       	std	Y+7, r24	; 0x07
#endif
#ifdef SUPPORT_N25Q_STEP_B
	pIns_Addr[0]              = SPI_FLASH_INS_SE4B;
#endif

	fill_addr_vect(SectorAddr, pIns_Addr, fdo->Desc.NumAddrByte);
    254c:	c7 01       	movw	r24, r14
    254e:	b6 01       	movw	r22, r12
    2550:	2e dc       	rcall	.-1956   	; 0x1dae <fill_addr_vect>

	// Step 5: Send the packet (Instruction & address) serially
	Serialize_SPI(&char_stream_send,
    2552:	23 e0       	ldi	r18, 0x03	; 3
    2554:	41 e0       	ldi	r20, 0x01	; 1
    2556:	60 e0       	ldi	r22, 0x00	; 0
    2558:	70 e0       	ldi	r23, 0x00	; 0
    255a:	ce 01       	movw	r24, r28
    255c:	01 96       	adiw	r24, 0x01	; 1
    255e:	e4 d4       	rcall	.+2504   	; 0x2f28 <Serialize_SPI>
	              NULL_PTR,
	              OpsWakeUp,
	              OpsEndTransfer);

	// Step 6: Wait until the operation completes or a timeout occurs.
	ret = WAIT_TILL_Instruction_EXECUTION_COMPLETE(SE_TIMEOUT);
    2560:	83 e0       	ldi	r24, 0x03	; 3
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	26 dd       	rcall	.-1460   	; 0x1fb2 <WAIT_TILL_Instruction_EXECUTION_COMPLETE>

	FlashReadFlagStatusRegister(&fsr_value);
    2566:	ce 01       	movw	r24, r28
    2568:	0c 96       	adiw	r24, 0x0c	; 12
    256a:	0e 94 1d 05 	call	0xa3a	; 0xa3a <FlashReadFlagStatusRegister>
	FlashClearFlagStatusRegister();
    256e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <FlashClearFlagStatusRegister>
    2572:	8c 85       	ldd	r24, Y+12	; 0x0c
    2574:	82 72       	andi	r24, 0x22	; 34

	if((fsr_value & SPI_FSR_PROT) && (fsr_value & SPI_FSR_ERASE))
    2576:	82 32       	cpi	r24, 0x22	; 34
    2578:	31 f0       	breq	.+12     	; 0x2586 <FlashSectorErase+0xd8>
		return Flash_SectorProtected;

	return Flash_Success;
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	05 c0       	rjmp	.+10     	; 0x2588 <FlashSectorErase+0xda>
	uAddrType SectorAddr;
	NMX_uint8 fsr_value;
	ReturnType ret;

	// Step 1: Validate the sector number input
	if(!(uscSectorNr < fdo->Desc.FlashSectorCount)) return Flash_SectorNrInvalid;
    257e:	86 e0       	ldi	r24, 0x06	; 6
    2580:	03 c0       	rjmp	.+6      	; 0x2588 <FlashSectorErase+0xda>

	SectorAddr = fdo->GenOp.BlockOffset(uscSectorNr);

	// Step 2: Check whether any previous Write, Program or Erase cycle is on going
	if(IsFlashBusy()) return Flash_OperationOngoing;
    2582:	89 e0       	ldi	r24, 0x09	; 9
    2584:	01 c0       	rjmp	.+2      	; 0x2588 <FlashSectorErase+0xda>

	FlashReadFlagStatusRegister(&fsr_value);
	FlashClearFlagStatusRegister();

	if((fsr_value & SPI_FSR_PROT) && (fsr_value & SPI_FSR_ERASE))
		return Flash_SectorProtected;
    2586:	8c e0       	ldi	r24, 0x0C	; 12

	return Flash_Success;
}
    2588:	2c 96       	adiw	r28, 0x0c	; 12
    258a:	0f b6       	in	r0, 0x3f	; 63
    258c:	f8 94       	cli
    258e:	de bf       	out	0x3e, r29	; 62
    2590:	0f be       	out	0x3f, r0	; 63
    2592:	cd bf       	out	0x3d, r28	; 61
    2594:	df 91       	pop	r29
    2596:	cf 91       	pop	r28
    2598:	1f 91       	pop	r17
    259a:	0f 91       	pop	r16
    259c:	ff 90       	pop	r15
    259e:	ef 90       	pop	r14
    25a0:	df 90       	pop	r13
    25a2:	cf 90       	pop	r12
    25a4:	08 95       	ret

000025a6 <FlashSubSectorErase>:
   Step 4: Initialize the data (Instruction & address) packet to be sent serially
   Step 5: Send the packet (Instruction & address) serially
   Step 6: Wait until the operation completes or a timeout occurs.
*******************************************************************************/
ReturnType  FlashSubSectorErase( uSectorType uscSectorNr )
{
    25a6:	ff 92       	push	r15
    25a8:	0f 93       	push	r16
    25aa:	1f 93       	push	r17
    25ac:	cf 93       	push	r28
    25ae:	df 93       	push	r29
    25b0:	cd b7       	in	r28, 0x3d	; 61
    25b2:	de b7       	in	r29, 0x3e	; 62
    25b4:	2c 97       	sbiw	r28, 0x0c	; 12
    25b6:	0f b6       	in	r0, 0x3f	; 63
    25b8:	f8 94       	cli
    25ba:	de bf       	out	0x3e, r29	; 62
    25bc:	0f be       	out	0x3f, r0	; 63
    25be:	cd bf       	out	0x3d, r28	; 61
	uAddrType SubSectorAddr;
	NMX_uint8 fsr_value;
	ReturnType ret;

	// Step 1: Validate the sector number input
	if(!(uscSectorNr < fdo->Desc.FlashSubSectorCount))
    25c0:	e0 91 7f 0d 	lds	r30, 0x0D7F
    25c4:	f0 91 80 0d 	lds	r31, 0x0D80
    25c8:	8c 01       	movw	r16, r24
    25ca:	20 e0       	ldi	r18, 0x00	; 0
    25cc:	30 e0       	ldi	r19, 0x00	; 0
    25ce:	41 89       	ldd	r20, Z+17	; 0x11
    25d0:	52 89       	ldd	r21, Z+18	; 0x12
    25d2:	63 89       	ldd	r22, Z+19	; 0x13
    25d4:	74 89       	ldd	r23, Z+20	; 0x14
    25d6:	04 17       	cp	r16, r20
    25d8:	15 07       	cpc	r17, r21
    25da:	26 07       	cpc	r18, r22
    25dc:	37 07       	cpc	r19, r23
    25de:	08 f0       	brcs	.+2      	; 0x25e2 <FlashSubSectorErase+0x3c>
    25e0:	47 c0       	rjmp	.+142    	; 0x2670 <FlashSubSectorErase+0xca>
    25e2:	8c 01       	movw	r16, r24
		return Flash_SectorNrInvalid;

	SubSectorAddr = uscSectorNr << fdo->Desc.FlashSubSectorSize_bit;
    25e4:	f5 88       	ldd	r15, Z+21	; 0x15

	// Step 2: Check whether any previous Write, Program or Erase cycle is on going
	if(IsFlashBusy()) return Flash_OperationOngoing;
    25e6:	77 db       	rcall	.-2322   	; 0x1cd6 <IsFlashBusy>
    25e8:	81 11       	cpse	r24, r1
    25ea:	44 c0       	rjmp	.+136    	; 0x2674 <FlashSubSectorErase+0xce>

	// Step 3: Disable Write protection
	fdo->GenOp.WriteEnable();
    25ec:	e0 91 7f 0d 	lds	r30, 0x0D7F
    25f0:	f0 91 80 0d 	lds	r31, 0x0D80
    25f4:	e6 5a       	subi	r30, 0xA6	; 166
    25f6:	ff 4f       	sbci	r31, 0xFF	; 255
    25f8:	01 90       	ld	r0, Z+
    25fa:	f0 81       	ld	r31, Z
    25fc:	e0 2d       	mov	r30, r0
    25fe:	19 95       	eicall

	// Step 4: Initialize the data (Instruction & address) packet to be sent serially
	char_stream_send.length   = fdo->Desc.NumAddrByte + 1;;
    2600:	e0 91 7f 0d 	lds	r30, 0x0D7F
    2604:	f0 91 80 0d 	lds	r31, 0x0D80
    2608:	e9 5b       	subi	r30, 0xB9	; 185
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	20 81       	ld	r18, Z
    260e:	82 2f       	mov	r24, r18
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	01 96       	adiw	r24, 0x01	; 1
    2614:	09 2e       	mov	r0, r25
    2616:	00 0c       	add	r0, r0
    2618:	aa 0b       	sbc	r26, r26
    261a:	bb 0b       	sbc	r27, r27
    261c:	8b 83       	std	Y+3, r24	; 0x03
    261e:	9c 83       	std	Y+4, r25	; 0x04
    2620:	ad 83       	std	Y+5, r26	; 0x05
    2622:	be 83       	std	Y+6, r27	; 0x06
	char_stream_send.pChar    = &pIns_Addr[0];
    2624:	ae 01       	movw	r20, r28
    2626:	49 5f       	subi	r20, 0xF9	; 249
    2628:	5f 4f       	sbci	r21, 0xFF	; 255
    262a:	5a 83       	std	Y+2, r21	; 0x02
    262c:	49 83       	std	Y+1, r20	; 0x01

#ifndef SUPPORT_N25Q_STEP_B
	pIns_Addr[0]              = SPI_FLASH_INS_SSE;
    262e:	80 e2       	ldi	r24, 0x20	; 32
    2630:	8f 83       	std	Y+7, r24	; 0x07

	// Step 1: Validate the sector number input
	if(!(uscSectorNr < fdo->Desc.FlashSubSectorCount))
		return Flash_SectorNrInvalid;

	SubSectorAddr = uscSectorNr << fdo->Desc.FlashSubSectorSize_bit;
    2632:	b8 01       	movw	r22, r16
    2634:	02 c0       	rjmp	.+4      	; 0x263a <FlashSubSectorErase+0x94>
    2636:	66 0f       	add	r22, r22
    2638:	77 1f       	adc	r23, r23
    263a:	fa 94       	dec	r15
    263c:	e2 f7       	brpl	.-8      	; 0x2636 <FlashSubSectorErase+0x90>
    263e:	80 e0       	ldi	r24, 0x00	; 0
    2640:	90 e0       	ldi	r25, 0x00	; 0
#endif
#ifdef SUPPORT_N25Q_STEP_B
	pIns_Addr[0]              = SPI_FLASH_INS_SSE4B;
#endif

	fill_addr_vect(SubSectorAddr, pIns_Addr, fdo->Desc.NumAddrByte);
    2642:	b5 db       	rcall	.-2198   	; 0x1dae <fill_addr_vect>

	// Step 5: Send the packet (Instruction & address) serially
	Serialize_SPI(&char_stream_send,
    2644:	23 e0       	ldi	r18, 0x03	; 3
    2646:	41 e0       	ldi	r20, 0x01	; 1
    2648:	60 e0       	ldi	r22, 0x00	; 0
    264a:	70 e0       	ldi	r23, 0x00	; 0
    264c:	ce 01       	movw	r24, r28
    264e:	01 96       	adiw	r24, 0x01	; 1
    2650:	6b d4       	rcall	.+2262   	; 0x2f28 <Serialize_SPI>
	              NULL_PTR,
	              OpsWakeUp,
	              OpsEndTransfer);

	// Step 6: Wait until the operation completes or a timeout occurs.
	ret = WAIT_TILL_Instruction_EXECUTION_COMPLETE(SE_TIMEOUT);
    2652:	83 e0       	ldi	r24, 0x03	; 3
    2654:	90 e0       	ldi	r25, 0x00	; 0
    2656:	ad dc       	rcall	.-1702   	; 0x1fb2 <WAIT_TILL_Instruction_EXECUTION_COMPLETE>

	FlashReadFlagStatusRegister(&fsr_value);
    2658:	ce 01       	movw	r24, r28
    265a:	0c 96       	adiw	r24, 0x0c	; 12
    265c:	0e 94 1d 05 	call	0xa3a	; 0xa3a <FlashReadFlagStatusRegister>
	FlashClearFlagStatusRegister();
    2660:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <FlashClearFlagStatusRegister>
    2664:	8c 85       	ldd	r24, Y+12	; 0x0c
    2666:	82 72       	andi	r24, 0x22	; 34

	if((fsr_value & SPI_FSR_PROT) && (fsr_value & SPI_FSR_ERASE))
    2668:	82 32       	cpi	r24, 0x22	; 34
    266a:	31 f0       	breq	.+12     	; 0x2678 <FlashSubSectorErase+0xd2>
		return Flash_SectorProtected;

	return Flash_Success;
    266c:	80 e0       	ldi	r24, 0x00	; 0
    266e:	05 c0       	rjmp	.+10     	; 0x267a <FlashSubSectorErase+0xd4>
	NMX_uint8 fsr_value;
	ReturnType ret;

	// Step 1: Validate the sector number input
	if(!(uscSectorNr < fdo->Desc.FlashSubSectorCount))
		return Flash_SectorNrInvalid;
    2670:	86 e0       	ldi	r24, 0x06	; 6
    2672:	03 c0       	rjmp	.+6      	; 0x267a <FlashSubSectorErase+0xd4>

	SubSectorAddr = uscSectorNr << fdo->Desc.FlashSubSectorSize_bit;

	// Step 2: Check whether any previous Write, Program or Erase cycle is on going
	if(IsFlashBusy()) return Flash_OperationOngoing;
    2674:	89 e0       	ldi	r24, 0x09	; 9
    2676:	01 c0       	rjmp	.+2      	; 0x267a <FlashSubSectorErase+0xd4>

	FlashReadFlagStatusRegister(&fsr_value);
	FlashClearFlagStatusRegister();

	if((fsr_value & SPI_FSR_PROT) && (fsr_value & SPI_FSR_ERASE))
		return Flash_SectorProtected;
    2678:	8c e0       	ldi	r24, 0x0C	; 12

	return Flash_Success;
}
    267a:	2c 96       	adiw	r28, 0x0c	; 12
    267c:	0f b6       	in	r0, 0x3f	; 63
    267e:	f8 94       	cli
    2680:	de bf       	out	0x3e, r29	; 62
    2682:	0f be       	out	0x3f, r0	; 63
    2684:	cd bf       	out	0x3d, r28	; 61
    2686:	df 91       	pop	r29
    2688:	cf 91       	pop	r28
    268a:	1f 91       	pop	r17
    268c:	0f 91       	pop	r16
    268e:	ff 90       	pop	r15
    2690:	08 95       	ret

00002692 <FlashDieErase>:

Pseudo Code:

*******************************************************************************/
ReturnType  FlashDieErase( uSectorType uscDieNr )
{
    2692:	ff 92       	push	r15
    2694:	0f 93       	push	r16
    2696:	1f 93       	push	r17
    2698:	cf 93       	push	r28
    269a:	df 93       	push	r29
    269c:	cd b7       	in	r28, 0x3d	; 61
    269e:	de b7       	in	r29, 0x3e	; 62
    26a0:	2c 97       	sbiw	r28, 0x0c	; 12
    26a2:	0f b6       	in	r0, 0x3f	; 63
    26a4:	f8 94       	cli
    26a6:	de bf       	out	0x3e, r29	; 62
    26a8:	0f be       	out	0x3f, r0	; 63
    26aa:	cd bf       	out	0x3d, r28	; 61
	uAddrType DieAddr;
	NMX_uint8 fsr_value;
	ReturnType ret;

	// Step 1: Validate the sector number input
	if(!(uscDieNr < fdo->Desc.FlashDieCount))
    26ac:	e0 91 7f 0d 	lds	r30, 0x0D7F
    26b0:	f0 91 80 0d 	lds	r31, 0x0D80
    26b4:	25 a9       	ldd	r18, Z+53	; 0x35
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	82 17       	cp	r24, r18
    26ba:	93 07       	cpc	r25, r19
    26bc:	08 f0       	brcs	.+2      	; 0x26c0 <FlashDieErase+0x2e>
    26be:	47 c0       	rjmp	.+142    	; 0x274e <FlashDieErase+0xbc>
    26c0:	8c 01       	movw	r16, r24
		return Flash_SectorNrInvalid;

	DieAddr = uscDieNr << fdo->Desc.FlashDieSize_bit;
    26c2:	f2 ac       	ldd	r15, Z+58	; 0x3a

	// Step 2: Check whether any previous Write, Program or Erase cycle is on going
	if(IsFlashBusy()) return Flash_OperationOngoing;
    26c4:	08 db       	rcall	.-2544   	; 0x1cd6 <IsFlashBusy>
    26c6:	81 11       	cpse	r24, r1
    26c8:	44 c0       	rjmp	.+136    	; 0x2752 <FlashDieErase+0xc0>

	// Step 3: Disable Write protection
	fdo->GenOp.WriteEnable();
    26ca:	e0 91 7f 0d 	lds	r30, 0x0D7F
    26ce:	f0 91 80 0d 	lds	r31, 0x0D80
    26d2:	e6 5a       	subi	r30, 0xA6	; 166
    26d4:	ff 4f       	sbci	r31, 0xFF	; 255
    26d6:	01 90       	ld	r0, Z+
    26d8:	f0 81       	ld	r31, Z
    26da:	e0 2d       	mov	r30, r0
    26dc:	19 95       	eicall

	// Step 4: Initialize the data (Instruction & address) packet to be sent serially
	char_stream_send.length   = fdo->Desc.NumAddrByte + 1;;
    26de:	e0 91 7f 0d 	lds	r30, 0x0D7F
    26e2:	f0 91 80 0d 	lds	r31, 0x0D80
    26e6:	e9 5b       	subi	r30, 0xB9	; 185
    26e8:	ff 4f       	sbci	r31, 0xFF	; 255
    26ea:	20 81       	ld	r18, Z
    26ec:	82 2f       	mov	r24, r18
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	01 96       	adiw	r24, 0x01	; 1
    26f2:	09 2e       	mov	r0, r25
    26f4:	00 0c       	add	r0, r0
    26f6:	aa 0b       	sbc	r26, r26
    26f8:	bb 0b       	sbc	r27, r27
    26fa:	8b 83       	std	Y+3, r24	; 0x03
    26fc:	9c 83       	std	Y+4, r25	; 0x04
    26fe:	ad 83       	std	Y+5, r26	; 0x05
    2700:	be 83       	std	Y+6, r27	; 0x06
	char_stream_send.pChar    = &pIns_Addr[0];
    2702:	ae 01       	movw	r20, r28
    2704:	49 5f       	subi	r20, 0xF9	; 249
    2706:	5f 4f       	sbci	r21, 0xFF	; 255
    2708:	5a 83       	std	Y+2, r21	; 0x02
    270a:	49 83       	std	Y+1, r20	; 0x01
	pIns_Addr[0]              = SPI_FLASH_INS_DE;
    270c:	84 ec       	ldi	r24, 0xC4	; 196
    270e:	8f 83       	std	Y+7, r24	; 0x07

	// Step 1: Validate the sector number input
	if(!(uscDieNr < fdo->Desc.FlashDieCount))
		return Flash_SectorNrInvalid;

	DieAddr = uscDieNr << fdo->Desc.FlashDieSize_bit;
    2710:	b8 01       	movw	r22, r16
    2712:	02 c0       	rjmp	.+4      	; 0x2718 <FlashDieErase+0x86>
    2714:	66 0f       	add	r22, r22
    2716:	77 1f       	adc	r23, r23
    2718:	fa 94       	dec	r15
    271a:	e2 f7       	brpl	.-8      	; 0x2714 <FlashDieErase+0x82>
    271c:	80 e0       	ldi	r24, 0x00	; 0
    271e:	90 e0       	ldi	r25, 0x00	; 0

	// Step 4: Initialize the data (Instruction & address) packet to be sent serially
	char_stream_send.length   = fdo->Desc.NumAddrByte + 1;;
	char_stream_send.pChar    = &pIns_Addr[0];
	pIns_Addr[0]              = SPI_FLASH_INS_DE;
	fill_addr_vect(DieAddr, pIns_Addr, fdo->Desc.NumAddrByte);
    2720:	46 db       	rcall	.-2420   	; 0x1dae <fill_addr_vect>

	// Step 5: Send the packet (Instruction & address) serially
	Serialize_SPI(&char_stream_send,
    2722:	23 e0       	ldi	r18, 0x03	; 3
    2724:	41 e0       	ldi	r20, 0x01	; 1
    2726:	60 e0       	ldi	r22, 0x00	; 0
    2728:	70 e0       	ldi	r23, 0x00	; 0
    272a:	ce 01       	movw	r24, r28
    272c:	01 96       	adiw	r24, 0x01	; 1
    272e:	fc d3       	rcall	.+2040   	; 0x2f28 <Serialize_SPI>
	              NULL_PTR,
	              OpsWakeUp,
	              OpsEndTransfer);

	// Step 6: Wait until the operation completes or a timeout occurs.
	ret = WAIT_TILL_Instruction_EXECUTION_COMPLETE(DIE_TIMEOUT);
    2730:	80 ee       	ldi	r24, 0xE0	; 224
    2732:	91 e0       	ldi	r25, 0x01	; 1
    2734:	3e dc       	rcall	.-1924   	; 0x1fb2 <WAIT_TILL_Instruction_EXECUTION_COMPLETE>

	FlashReadFlagStatusRegister(&fsr_value);
    2736:	ce 01       	movw	r24, r28
    2738:	0c 96       	adiw	r24, 0x0c	; 12
    273a:	0e 94 1d 05 	call	0xa3a	; 0xa3a <FlashReadFlagStatusRegister>
	FlashClearFlagStatusRegister();
    273e:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <FlashClearFlagStatusRegister>
    2742:	8c 85       	ldd	r24, Y+12	; 0x0c
    2744:	82 72       	andi	r24, 0x22	; 34

	if((fsr_value & SPI_FSR_PROT) && (fsr_value & SPI_FSR_ERASE))
    2746:	82 32       	cpi	r24, 0x22	; 34
    2748:	31 f0       	breq	.+12     	; 0x2756 <FlashDieErase+0xc4>
		return Flash_SectorProtected;

	return Flash_Success;
    274a:	80 e0       	ldi	r24, 0x00	; 0
    274c:	05 c0       	rjmp	.+10     	; 0x2758 <FlashDieErase+0xc6>
	NMX_uint8 fsr_value;
	ReturnType ret;

	// Step 1: Validate the sector number input
	if(!(uscDieNr < fdo->Desc.FlashDieCount))
		return Flash_SectorNrInvalid;
    274e:	86 e0       	ldi	r24, 0x06	; 6
    2750:	03 c0       	rjmp	.+6      	; 0x2758 <FlashDieErase+0xc6>

	DieAddr = uscDieNr << fdo->Desc.FlashDieSize_bit;

	// Step 2: Check whether any previous Write, Program or Erase cycle is on going
	if(IsFlashBusy()) return Flash_OperationOngoing;
    2752:	89 e0       	ldi	r24, 0x09	; 9
    2754:	01 c0       	rjmp	.+2      	; 0x2758 <FlashDieErase+0xc6>

	FlashReadFlagStatusRegister(&fsr_value);
	FlashClearFlagStatusRegister();

	if((fsr_value & SPI_FSR_PROT) && (fsr_value & SPI_FSR_ERASE))
		return Flash_SectorProtected;
    2756:	8c e0       	ldi	r24, 0x0C	; 12

	return Flash_Success;
}
    2758:	2c 96       	adiw	r28, 0x0c	; 12
    275a:	0f b6       	in	r0, 0x3f	; 63
    275c:	f8 94       	cli
    275e:	de bf       	out	0x3e, r29	; 62
    2760:	0f be       	out	0x3f, r0	; 63
    2762:	cd bf       	out	0x3d, r28	; 61
    2764:	df 91       	pop	r29
    2766:	cf 91       	pop	r28
    2768:	1f 91       	pop	r17
    276a:	0f 91       	pop	r16
    276c:	ff 90       	pop	r15
    276e:	08 95       	ret

00002770 <FlashWriteVolatileConfigurationRegister>:
   Step 2: Initialize the data (i.e. Instruction & value) packet to be sent serially
   Step 3: Send the packet serially
   Step 4: Wait until the operation completes or a timeout occurs.
*******************************************************************************/
ReturnType  FlashWriteVolatileConfigurationRegister( NMX_uint8 ucVolatileConfigurationRegister)
{
    2770:	1f 93       	push	r17
    2772:	cf 93       	push	r28
    2774:	df 93       	push	r29
    2776:	cd b7       	in	r28, 0x3d	; 61
    2778:	de b7       	in	r29, 0x3e	; 62
    277a:	28 97       	sbiw	r28, 0x08	; 8
    277c:	0f b6       	in	r0, 0x3f	; 63
    277e:	f8 94       	cli
    2780:	de bf       	out	0x3e, r29	; 62
    2782:	0f be       	out	0x3f, r0	; 63
    2784:	cd bf       	out	0x3d, r28	; 61
    2786:	18 2f       	mov	r17, r24
	CharStream char_stream_send;
	NMX_uint8  pIns_Val[2];

	// Step 1: Disable Write protection
	FlashWriteEnable();
    2788:	0e 94 fe 03 	call	0x7fc	; 0x7fc <FlashWriteEnable>

	// Step 2: Initialize the data (i.e. Instruction & value) packet to be sent serially
	char_stream_send.length = 2;
    278c:	82 e0       	ldi	r24, 0x02	; 2
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	a0 e0       	ldi	r26, 0x00	; 0
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	8b 83       	std	Y+3, r24	; 0x03
    2796:	9c 83       	std	Y+4, r25	; 0x04
    2798:	ad 83       	std	Y+5, r26	; 0x05
    279a:	be 83       	std	Y+6, r27	; 0x06
	char_stream_send.pChar  = pIns_Val;
    279c:	ce 01       	movw	r24, r28
    279e:	07 96       	adiw	r24, 0x07	; 7
    27a0:	9a 83       	std	Y+2, r25	; 0x02
    27a2:	89 83       	std	Y+1, r24	; 0x01
	pIns_Val[0] = SPI_FLASH_INS_WRVCR;
    27a4:	81 e8       	ldi	r24, 0x81	; 129
    27a6:	8f 83       	std	Y+7, r24	; 0x07
	pIns_Val[1] = ucVolatileConfigurationRegister;
    27a8:	18 87       	std	Y+8, r17	; 0x08

	// Step 3: Send the packet serially
	Serialize_SPI(&char_stream_send,
    27aa:	23 e0       	ldi	r18, 0x03	; 3
    27ac:	41 e0       	ldi	r20, 0x01	; 1
    27ae:	60 e0       	ldi	r22, 0x00	; 0
    27b0:	70 e0       	ldi	r23, 0x00	; 0
    27b2:	ce 01       	movw	r24, r28
    27b4:	01 96       	adiw	r24, 0x01	; 1
    27b6:	b8 d3       	rcall	.+1904   	; 0x2f28 <Serialize_SPI>
	              OpsEndTransfer);

	//SPI_setXiPMode(ucVolatileConfigurationRegister);

	// Step 4: Wait until the operation completes or a timeout occurs.
	return WAIT_TILL_Instruction_EXECUTION_COMPLETE(1);
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	90 e0       	ldi	r25, 0x00	; 0
    27bc:	fa db       	rcall	.-2060   	; 0x1fb2 <WAIT_TILL_Instruction_EXECUTION_COMPLETE>
}
    27be:	28 96       	adiw	r28, 0x08	; 8
    27c0:	0f b6       	in	r0, 0x3f	; 63
    27c2:	f8 94       	cli
    27c4:	de bf       	out	0x3e, r29	; 62
    27c6:	0f be       	out	0x3f, r0	; 63
    27c8:	cd bf       	out	0x3d, r28	; 61
    27ca:	df 91       	pop	r29
    27cc:	cf 91       	pop	r28
    27ce:	1f 91       	pop	r17
    27d0:	08 95       	ret

000027d2 <FlashWriteVolatileEnhancedConfigurationRegister>:
   Step 2: Initialize the data (i.e. Instruction & value) packet to be sent serially
   Step 3: Send the packet serially
   Step 5: Wait until the operation completes or a timeout occurs.
*******************************************************************************/
ReturnType  FlashWriteVolatileEnhancedConfigurationRegister( NMX_uint8 ucVolatileEnhancedConfigurationRegister)
{
    27d2:	1f 93       	push	r17
    27d4:	cf 93       	push	r28
    27d6:	df 93       	push	r29
    27d8:	cd b7       	in	r28, 0x3d	; 61
    27da:	de b7       	in	r29, 0x3e	; 62
    27dc:	28 97       	sbiw	r28, 0x08	; 8
    27de:	0f b6       	in	r0, 0x3f	; 63
    27e0:	f8 94       	cli
    27e2:	de bf       	out	0x3e, r29	; 62
    27e4:	0f be       	out	0x3f, r0	; 63
    27e6:	cd bf       	out	0x3d, r28	; 61
    27e8:	18 2f       	mov	r17, r24
	CharStream char_stream_send;
	NMX_uint8  pIns_Val[2];

	// Step 1: Disable Write protection
	FlashWriteEnable();
    27ea:	0e 94 fe 03 	call	0x7fc	; 0x7fc <FlashWriteEnable>

	// Step 2: Initialize the data (i.e. Instruction & value) packet to be sent serially
	char_stream_send.length = 2;
    27ee:	82 e0       	ldi	r24, 0x02	; 2
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	a0 e0       	ldi	r26, 0x00	; 0
    27f4:	b0 e0       	ldi	r27, 0x00	; 0
    27f6:	8b 83       	std	Y+3, r24	; 0x03
    27f8:	9c 83       	std	Y+4, r25	; 0x04
    27fa:	ad 83       	std	Y+5, r26	; 0x05
    27fc:	be 83       	std	Y+6, r27	; 0x06
	char_stream_send.pChar  = pIns_Val;
    27fe:	ce 01       	movw	r24, r28
    2800:	07 96       	adiw	r24, 0x07	; 7
    2802:	9a 83       	std	Y+2, r25	; 0x02
    2804:	89 83       	std	Y+1, r24	; 0x01
	pIns_Val[0] = SPI_FLASH_INS_WRVECR;
    2806:	81 e6       	ldi	r24, 0x61	; 97
    2808:	8f 83       	std	Y+7, r24	; 0x07
	pIns_Val[1] = ucVolatileEnhancedConfigurationRegister;
    280a:	18 87       	std	Y+8, r17	; 0x08

	// Step 3: Send the packet serially
	Serialize_SPI(&char_stream_send,
    280c:	23 e0       	ldi	r18, 0x03	; 3
    280e:	41 e0       	ldi	r20, 0x01	; 1
    2810:	60 e0       	ldi	r22, 0x00	; 0
    2812:	70 e0       	ldi	r23, 0x00	; 0
    2814:	ce 01       	movw	r24, r28
    2816:	01 96       	adiw	r24, 0x01	; 1
    2818:	87 d3       	rcall	.+1806   	; 0x2f28 <Serialize_SPI>
	              NULL_PTR,
	              OpsWakeUp,
	              OpsEndTransfer);

	// Step 5: Wait until the operation completes or a timeout occurs.
	return WAIT_TILL_Instruction_EXECUTION_COMPLETE(1);
    281a:	81 e0       	ldi	r24, 0x01	; 1
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	c9 db       	rcall	.-2158   	; 0x1fb2 <WAIT_TILL_Instruction_EXECUTION_COMPLETE>
}
    2820:	28 96       	adiw	r28, 0x08	; 8
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	df 91       	pop	r29
    282e:	cf 91       	pop	r28
    2830:	1f 91       	pop	r17
    2832:	08 95       	ret

00002834 <FlashWriteNVConfigurationRegister>:
   Step 2: Initialize the data (i.e. Instruction & value) packet to be sent serially
   Step 3: Send the packet serially
   Step 4: Wait until the operation completes or a timeout occurs.
*******************************************************************************/
ReturnType  FlashWriteNVConfigurationRegister( NMX_uint16 ucNVConfigurationRegister)
{
    2834:	0f 93       	push	r16
    2836:	1f 93       	push	r17
    2838:	cf 93       	push	r28
    283a:	df 93       	push	r29
    283c:	cd b7       	in	r28, 0x3d	; 61
    283e:	de b7       	in	r29, 0x3e	; 62
    2840:	29 97       	sbiw	r28, 0x09	; 9
    2842:	0f b6       	in	r0, 0x3f	; 63
    2844:	f8 94       	cli
    2846:	de bf       	out	0x3e, r29	; 62
    2848:	0f be       	out	0x3f, r0	; 63
    284a:	cd bf       	out	0x3d, r28	; 61
    284c:	18 2f       	mov	r17, r24
    284e:	09 2f       	mov	r16, r25
	CharStream char_stream_send;
	NMX_uint8  pIns_Val[3];

	// Step 1: Disable Write protection
	FlashWriteEnable();
    2850:	0e 94 fe 03 	call	0x7fc	; 0x7fc <FlashWriteEnable>

	// Step 2: Initialize the data (i.e. Instruction & value) packet to be sent serially
	char_stream_send.length = 3;
    2854:	83 e0       	ldi	r24, 0x03	; 3
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	a0 e0       	ldi	r26, 0x00	; 0
    285a:	b0 e0       	ldi	r27, 0x00	; 0
    285c:	8b 83       	std	Y+3, r24	; 0x03
    285e:	9c 83       	std	Y+4, r25	; 0x04
    2860:	ad 83       	std	Y+5, r26	; 0x05
    2862:	be 83       	std	Y+6, r27	; 0x06
	char_stream_send.pChar  = pIns_Val;
    2864:	ce 01       	movw	r24, r28
    2866:	07 96       	adiw	r24, 0x07	; 7
    2868:	9a 83       	std	Y+2, r25	; 0x02
    286a:	89 83       	std	Y+1, r24	; 0x01
	pIns_Val[0] = SPI_FLASH_INS_WRNVCR;
    286c:	81 eb       	ldi	r24, 0xB1	; 177
    286e:	8f 83       	std	Y+7, r24	; 0x07
	pIns_Val[1] = (ucNVConfigurationRegister >> 8)& 0xFF;
    2870:	08 87       	std	Y+8, r16	; 0x08
	pIns_Val[2] = ucNVConfigurationRegister & 0xFF;
    2872:	19 87       	std	Y+9, r17	; 0x09

	// Step 3: Send the packet serially
	Serialize_SPI(&char_stream_send,
    2874:	23 e0       	ldi	r18, 0x03	; 3
    2876:	41 e0       	ldi	r20, 0x01	; 1
    2878:	60 e0       	ldi	r22, 0x00	; 0
    287a:	70 e0       	ldi	r23, 0x00	; 0
    287c:	ce 01       	movw	r24, r28
    287e:	01 96       	adiw	r24, 0x01	; 1
    2880:	53 d3       	rcall	.+1702   	; 0x2f28 <Serialize_SPI>
	              NULL_PTR,
	              OpsWakeUp,
	              OpsEndTransfer);

	// Step 4: Wait until the operation completes or a timeout occurs.
	return WAIT_TILL_Instruction_EXECUTION_COMPLETE(1);
    2882:	81 e0       	ldi	r24, 0x01	; 1
    2884:	90 e0       	ldi	r25, 0x00	; 0
    2886:	95 db       	rcall	.-2262   	; 0x1fb2 <WAIT_TILL_Instruction_EXECUTION_COMPLETE>
}
    2888:	29 96       	adiw	r28, 0x09	; 9
    288a:	0f b6       	in	r0, 0x3f	; 63
    288c:	f8 94       	cli
    288e:	de bf       	out	0x3e, r29	; 62
    2890:	0f be       	out	0x3f, r0	; 63
    2892:	cd bf       	out	0x3d, r28	; 61
    2894:	df 91       	pop	r29
    2896:	cf 91       	pop	r28
    2898:	1f 91       	pop	r17
    289a:	0f 91       	pop	r16
    289c:	08 95       	ret

0000289e <FlashExit4ByteAddressMode>:
   Step 2: Initialize the data (i.e. Instruction & value) packet to be sent serially
   Step 3: Send the packet serially
   Step 4: Wait until the operation completes or a timeout occurs.
*******************************************************************************/
ReturnType FlashExit4ByteAddressMode(void)
{
    289e:	1f 93       	push	r17
    28a0:	cf 93       	push	r28
    28a2:	df 93       	push	r29
    28a4:	cd b7       	in	r28, 0x3d	; 61
    28a6:	de b7       	in	r29, 0x3e	; 62
    28a8:	28 97       	sbiw	r28, 0x08	; 8
    28aa:	0f b6       	in	r0, 0x3f	; 63
    28ac:	f8 94       	cli
    28ae:	de bf       	out	0x3e, r29	; 62
    28b0:	0f be       	out	0x3f, r0	; 63
    28b2:	cd bf       	out	0x3d, r28	; 61
	CharStream char_stream_send;
	NMX_uint8 cPER = SPI_FLASH_4B_MODE_EXIT;
    28b4:	89 ee       	ldi	r24, 0xE9	; 233
    28b6:	8f 83       	std	Y+7, r24	; 0x07
	ReturnType ret;
	NMX_uint8 flag;

#ifndef SUPPORT_N25Q_STEP_B
	FlashWriteEnable();
    28b8:	0e 94 fe 03 	call	0x7fc	; 0x7fc <FlashWriteEnable>
#endif

	char_stream_send.length   = 1;
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	90 e0       	ldi	r25, 0x00	; 0
    28c0:	a0 e0       	ldi	r26, 0x00	; 0
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	8b 83       	std	Y+3, r24	; 0x03
    28c6:	9c 83       	std	Y+4, r25	; 0x04
    28c8:	ad 83       	std	Y+5, r26	; 0x05
    28ca:	be 83       	std	Y+6, r27	; 0x06
	char_stream_send.pChar    = &cPER;
    28cc:	ce 01       	movw	r24, r28
    28ce:	07 96       	adiw	r24, 0x07	; 7
    28d0:	9a 83       	std	Y+2, r25	; 0x02
    28d2:	89 83       	std	Y+1, r24	; 0x01

	Serialize_SPI(&char_stream_send,
    28d4:	23 e0       	ldi	r18, 0x03	; 3
    28d6:	41 e0       	ldi	r20, 0x01	; 1
    28d8:	60 e0       	ldi	r22, 0x00	; 0
    28da:	70 e0       	ldi	r23, 0x00	; 0
    28dc:	06 97       	sbiw	r24, 0x06	; 6
    28de:	24 d3       	rcall	.+1608   	; 0x2f28 <Serialize_SPI>
	              NULL_PTR,
	              OpsWakeUp,
	              OpsEndTransfer);

#ifdef DEBUG
	printf("EXIT 4-byte-addr mode\n");
    28e0:	82 ef       	ldi	r24, 0xF2	; 242
    28e2:	93 e0       	ldi	r25, 0x03	; 3
    28e4:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>
#endif

	ret = WAIT_TILL_Instruction_EXECUTION_COMPLETE(1);
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	90 e0       	ldi	r25, 0x00	; 0
    28ec:	62 db       	rcall	.-2364   	; 0x1fb2 <WAIT_TILL_Instruction_EXECUTION_COMPLETE>
    28ee:	18 2f       	mov	r17, r24

	/* verify current addr mode */
	fdo->GenOp.ReadFlagStatusRegister(&flag);
    28f0:	e0 91 7f 0d 	lds	r30, 0x0D7F
    28f4:	f0 91 80 0d 	lds	r31, 0x0D80
    28f8:	e6 59       	subi	r30, 0x96	; 150
    28fa:	ff 4f       	sbci	r31, 0xFF	; 255
    28fc:	01 90       	ld	r0, Z+
    28fe:	f0 81       	ld	r31, Z
    2900:	e0 2d       	mov	r30, r0
    2902:	ce 01       	movw	r24, r28
    2904:	08 96       	adiw	r24, 0x08	; 8
    2906:	19 95       	eicall
	if (flag & 1)
    2908:	88 85       	ldd	r24, Y+8	; 0x08
    290a:	80 ff       	sbrs	r24, 0
    290c:	09 c0       	rjmp	.+18     	; 0x2920 <FlashExit4ByteAddressMode+0x82>
		fdo->Desc.NumAddrByte = FLASH_4_BYTE_ADDR_MODE;
    290e:	e0 91 7f 0d 	lds	r30, 0x0D7F
    2912:	f0 91 80 0d 	lds	r31, 0x0D80
    2916:	e9 5b       	subi	r30, 0xB9	; 185
    2918:	ff 4f       	sbci	r31, 0xFF	; 255
    291a:	84 e0       	ldi	r24, 0x04	; 4
    291c:	80 83       	st	Z, r24
    291e:	08 c0       	rjmp	.+16     	; 0x2930 <FlashExit4ByteAddressMode+0x92>
	else
		fdo->Desc.NumAddrByte = FLASH_3_BYTE_ADDR_MODE;
    2920:	e0 91 7f 0d 	lds	r30, 0x0D7F
    2924:	f0 91 80 0d 	lds	r31, 0x0D80
    2928:	e9 5b       	subi	r30, 0xB9	; 185
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	83 e0       	ldi	r24, 0x03	; 3
    292e:	80 83       	st	Z, r24

	return ret;
}
    2930:	81 2f       	mov	r24, r17
    2932:	28 96       	adiw	r28, 0x08	; 8
    2934:	0f b6       	in	r0, 0x3f	; 63
    2936:	f8 94       	cli
    2938:	de bf       	out	0x3e, r29	; 62
    293a:	0f be       	out	0x3f, r0	; 63
    293c:	cd bf       	out	0x3d, r28	; 61
    293e:	df 91       	pop	r29
    2940:	cf 91       	pop	r28
    2942:	1f 91       	pop	r17
    2944:	08 95       	ret

00002946 <FlashOTPProgram>:

Pseudo Code:

*******************************************************************************/
ReturnType FlashOTPProgram(NMX_uint8 *pArray , NMX_uint32 udNrOfElementsInArray)
{
    2946:	2f 92       	push	r2
    2948:	3f 92       	push	r3
    294a:	4f 92       	push	r4
    294c:	5f 92       	push	r5
    294e:	6f 92       	push	r6
    2950:	7f 92       	push	r7
    2952:	8f 92       	push	r8
    2954:	9f 92       	push	r9
    2956:	af 92       	push	r10
    2958:	bf 92       	push	r11
    295a:	cf 92       	push	r12
    295c:	df 92       	push	r13
    295e:	ef 92       	push	r14
    2960:	ff 92       	push	r15
    2962:	0f 93       	push	r16
    2964:	1f 93       	push	r17
    2966:	cf 93       	push	r28
    2968:	df 93       	push	r29
    296a:	cd b7       	in	r28, 0x3d	; 61
    296c:	de b7       	in	r29, 0x3e	; 62
    296e:	2d 97       	sbiw	r28, 0x0d	; 13
    2970:	0f b6       	in	r0, 0x3f	; 63
    2972:	f8 94       	cli
    2974:	de bf       	out	0x3e, r29	; 62
    2976:	0f be       	out	0x3f, r0	; 63
    2978:	cd bf       	out	0x3d, r28	; 61
    297a:	8c 01       	movw	r16, r24
    297c:	4a 01       	movw	r8, r20
    297e:	5b 01       	movw	r10, r22

	// Step 8: Wait until the operation completes or a timeout occurs.
	ret = WAIT_TILL_Instruction_EXECUTION_COMPLETE(1);

	return ret;
}
    2980:	2d b7       	in	r18, 0x3d	; 61
    2982:	3e b7       	in	r19, 0x3e	; 62
    2984:	3d 87       	std	Y+13, r19	; 0x0d
    2986:	2c 87       	std	Y+12, r18	; 0x0c
ReturnType FlashOTPProgram(NMX_uint8 *pArray , NMX_uint32 udNrOfElementsInArray)
{
	CharStream char_stream_send;
	NMX_uint8 i;
	NMX_uint8 pIns_Addr[5];
	NMX_uint8 sentBuffer[fdo->Desc.FlashOTPSize+1];
    2988:	e0 91 7f 0d 	lds	r30, 0x0D7F
    298c:	f0 91 80 0d 	lds	r31, 0x0D80
    2990:	41 a8       	ldd	r4, Z+49	; 0x31
    2992:	52 a8       	ldd	r5, Z+50	; 0x32
    2994:	63 a8       	ldd	r6, Z+51	; 0x33
    2996:	74 a8       	ldd	r7, Z+52	; 0x34
    2998:	d3 01       	movw	r26, r6
    299a:	c2 01       	movw	r24, r4
    299c:	01 96       	adiw	r24, 0x01	; 1
    299e:	a1 1d       	adc	r26, r1
    29a0:	b1 1d       	adc	r27, r1
    29a2:	28 1b       	sub	r18, r24
    29a4:	39 0b       	sbc	r19, r25
    29a6:	0f b6       	in	r0, 0x3f	; 63
    29a8:	f8 94       	cli
    29aa:	3e bf       	out	0x3e, r19	; 62
    29ac:	0f be       	out	0x3f, r0	; 63
    29ae:	2d bf       	out	0x3d, r18	; 61
    29b0:	8d b7       	in	r24, 0x3d	; 61
    29b2:	9e b7       	in	r25, 0x3e	; 62
    29b4:	01 96       	adiw	r24, 0x01	; 1
    29b6:	1c 01       	movw	r2, r24
    29b8:	bc 01       	movw	r22, r24
	NMX_uint32 udAddr;
	ReturnType ret;

	// Step 1: Validate address input
	if(udNrOfElementsInArray > fdo->Desc.FlashOTPSize)
    29ba:	48 14       	cp	r4, r8
    29bc:	59 04       	cpc	r5, r9
    29be:	6a 04       	cpc	r6, r10
    29c0:	7b 04       	cpc	r7, r11
    29c2:	08 f4       	brcc	.+2      	; 0x29c6 <FlashOTPProgram+0x80>
    29c4:	79 c0       	rjmp	.+242    	; 0x2ab8 <FlashOTPProgram+0x172>

	/* Address is always 0x000000 */
	udAddr = 0x000000;

	/* Output buffer (with user data within) is fixed to 65 elements */
	for(i=0; i<udNrOfElementsInArray; i++)
    29c6:	81 14       	cp	r8, r1
    29c8:	91 04       	cpc	r9, r1
    29ca:	a1 04       	cpc	r10, r1
    29cc:	b1 04       	cpc	r11, r1
    29ce:	a9 f0       	breq	.+42     	; 0x29fa <FlashOTPProgram+0xb4>
    29d0:	90 e0       	ldi	r25, 0x00	; 0
		sentBuffer[i] = pArray[i];
    29d2:	29 2f       	mov	r18, r25
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	fb 01       	movw	r30, r22
    29d8:	e2 0f       	add	r30, r18
    29da:	f3 1f       	adc	r31, r19
    29dc:	d8 01       	movw	r26, r16
    29de:	a2 0f       	add	r26, r18
    29e0:	b3 1f       	adc	r27, r19
    29e2:	8c 91       	ld	r24, X
    29e4:	80 83       	st	Z, r24

	/* Address is always 0x000000 */
	udAddr = 0x000000;

	/* Output buffer (with user data within) is fixed to 65 elements */
	for(i=0; i<udNrOfElementsInArray; i++)
    29e6:	9f 5f       	subi	r25, 0xFF	; 255
    29e8:	c9 2e       	mov	r12, r25
    29ea:	d1 2c       	mov	r13, r1
    29ec:	e1 2c       	mov	r14, r1
    29ee:	f1 2c       	mov	r15, r1
    29f0:	c8 14       	cp	r12, r8
    29f2:	d9 04       	cpc	r13, r9
    29f4:	ea 04       	cpc	r14, r10
    29f6:	fb 04       	cpc	r15, r11
    29f8:	60 f3       	brcs	.-40     	; 0x29d2 <FlashOTPProgram+0x8c>
		sentBuffer[i] = pArray[i];

	/* Fill the others bytes with 00 */
	for(i=udNrOfElementsInArray; i<fdo->Desc.FlashOTPSize; i++)
    29fa:	98 2d       	mov	r25, r8
    29fc:	a5 01       	movw	r20, r10
    29fe:	94 01       	movw	r18, r8
    2a00:	33 27       	eor	r19, r19
    2a02:	44 27       	eor	r20, r20
    2a04:	55 27       	eor	r21, r21
    2a06:	24 15       	cp	r18, r4
    2a08:	35 05       	cpc	r19, r5
    2a0a:	46 05       	cpc	r20, r6
    2a0c:	57 05       	cpc	r21, r7
    2a0e:	70 f4       	brcc	.+28     	; 0x2a2c <FlashOTPProgram+0xe6>
		sentBuffer[i] = 0x00;
    2a10:	fb 01       	movw	r30, r22
    2a12:	e9 0f       	add	r30, r25
    2a14:	f1 1d       	adc	r31, r1
    2a16:	10 82       	st	Z, r1
	/* Output buffer (with user data within) is fixed to 65 elements */
	for(i=0; i<udNrOfElementsInArray; i++)
		sentBuffer[i] = pArray[i];

	/* Fill the others bytes with 00 */
	for(i=udNrOfElementsInArray; i<fdo->Desc.FlashOTPSize; i++)
    2a18:	9f 5f       	subi	r25, 0xFF	; 255
    2a1a:	c9 2e       	mov	r12, r25
    2a1c:	d1 2c       	mov	r13, r1
    2a1e:	e1 2c       	mov	r14, r1
    2a20:	f1 2c       	mov	r15, r1
    2a22:	c4 14       	cp	r12, r4
    2a24:	d5 04       	cpc	r13, r5
    2a26:	e6 04       	cpc	r14, r6
    2a28:	f7 04       	cpc	r15, r7
    2a2a:	90 f3       	brcs	.-28     	; 0x2a10 <FlashOTPProgram+0xca>
		sentBuffer[i] = 0x00;

	/* This is the byte 64, OTP Control byte (if bit 0 = 0 -> OTP Locked) */
	sentBuffer[fdo->Desc.FlashOTPSize] = 0;
    2a2c:	f1 01       	movw	r30, r2
    2a2e:	e4 0d       	add	r30, r4
    2a30:	f5 1d       	adc	r31, r5
    2a32:	10 82       	st	Z, r1

	// Step 2: Check whether any previous Write, Program or Erase cycle is on-going
	if(IsFlashBusy())
    2a34:	50 d9       	rcall	.-3424   	; 0x1cd6 <IsFlashBusy>
    2a36:	81 11       	cpse	r24, r1
    2a38:	41 c0       	rjmp	.+130    	; 0x2abc <FlashOTPProgram+0x176>
		return Flash_OperationOngoing;

	// Step 3: Disable Write protection
	fdo->GenOp.WriteEnable();
    2a3a:	e0 91 7f 0d 	lds	r30, 0x0D7F
    2a3e:	f0 91 80 0d 	lds	r31, 0x0D80
    2a42:	e6 5a       	subi	r30, 0xA6	; 166
    2a44:	ff 4f       	sbci	r31, 0xFF	; 255
    2a46:	01 90       	ld	r0, Z+
    2a48:	f0 81       	ld	r31, Z
    2a4a:	e0 2d       	mov	r30, r0
    2a4c:	19 95       	eicall

	// Step 4: Initialize the data (Instruction & address only) packet to be sent serially
	char_stream_send.length   = fdo->Desc.NumAddrByte + 1;
    2a4e:	e0 91 7f 0d 	lds	r30, 0x0D7F
    2a52:	f0 91 80 0d 	lds	r31, 0x0D80
    2a56:	e9 5b       	subi	r30, 0xB9	; 185
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	80 81       	ld	r24, Z
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	01 96       	adiw	r24, 0x01	; 1
    2a60:	09 2e       	mov	r0, r25
    2a62:	00 0c       	add	r0, r0
    2a64:	aa 0b       	sbc	r26, r26
    2a66:	bb 0b       	sbc	r27, r27
    2a68:	8b 83       	std	Y+3, r24	; 0x03
    2a6a:	9c 83       	std	Y+4, r25	; 0x04
    2a6c:	ad 83       	std	Y+5, r26	; 0x05
    2a6e:	be 83       	std	Y+6, r27	; 0x06
	char_stream_send.pChar    = pIns_Addr;
    2a70:	ae 01       	movw	r20, r28
    2a72:	49 5f       	subi	r20, 0xF9	; 249
    2a74:	5f 4f       	sbci	r21, 0xFF	; 255
    2a76:	5a 83       	std	Y+2, r21	; 0x02
    2a78:	49 83       	std	Y+1, r20	; 0x01

	pIns_Addr[0]              = SPI_FLASH_INS_PROTP;
    2a7a:	82 e4       	ldi	r24, 0x42	; 66
    2a7c:	8f 83       	std	Y+7, r24	; 0x07

	/* Always use 3 bytes address and address is 0x000000 */
	fill_addr_vect(udAddr, pIns_Addr, 3);
    2a7e:	23 e0       	ldi	r18, 0x03	; 3
    2a80:	60 e0       	ldi	r22, 0x00	; 0
    2a82:	70 e0       	ldi	r23, 0x00	; 0
    2a84:	cb 01       	movw	r24, r22
    2a86:	93 d9       	rcall	.-3290   	; 0x1dae <fill_addr_vect>

	// Step 5: Send the packet (Instruction & address only) serially
	Serialize_SPI(&char_stream_send,
    2a88:	22 e0       	ldi	r18, 0x02	; 2
    2a8a:	41 e0       	ldi	r20, 0x01	; 1
    2a8c:	60 e0       	ldi	r22, 0x00	; 0
    2a8e:	70 e0       	ldi	r23, 0x00	; 0
    2a90:	ce 01       	movw	r24, r28
    2a92:	01 96       	adiw	r24, 0x01	; 1
    2a94:	49 d2       	rcall	.+1170   	; 0x2f28 <Serialize_SPI>
	              NULL_PTR,
	              OpsWakeUp,
	              OpsInitTransfer);

	// Step 6: Initialize the data (data to be programmed) packet to be sent serially
	char_stream_send.length   = udNrOfElementsInArray;
    2a96:	8b 82       	std	Y+3, r8	; 0x03
    2a98:	9c 82       	std	Y+4, r9	; 0x04
    2a9a:	ad 82       	std	Y+5, r10	; 0x05
    2a9c:	be 82       	std	Y+6, r11	; 0x06
	char_stream_send.pChar    = pArray;
    2a9e:	1a 83       	std	Y+2, r17	; 0x02
    2aa0:	09 83       	std	Y+1, r16	; 0x01

	// Step 7: Send the packet (data to be programmed) serially
	Serialize_SPI(&char_stream_send,
    2aa2:	23 e0       	ldi	r18, 0x03	; 3
    2aa4:	41 e0       	ldi	r20, 0x01	; 1
    2aa6:	60 e0       	ldi	r22, 0x00	; 0
    2aa8:	70 e0       	ldi	r23, 0x00	; 0
    2aaa:	ce 01       	movw	r24, r28
    2aac:	01 96       	adiw	r24, 0x01	; 1
    2aae:	3c d2       	rcall	.+1144   	; 0x2f28 <Serialize_SPI>
	              NULL_PTR,
	              OpsWakeUp,
	              OpsEndTransfer);

	// Step 8: Wait until the operation completes or a timeout occurs.
	ret = WAIT_TILL_Instruction_EXECUTION_COMPLETE(1);
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	7e da       	rcall	.-2820   	; 0x1fb2 <WAIT_TILL_Instruction_EXECUTION_COMPLETE>

	return ret;
    2ab6:	03 c0       	rjmp	.+6      	; 0x2abe <FlashOTPProgram+0x178>
	NMX_uint32 udAddr;
	ReturnType ret;

	// Step 1: Validate address input
	if(udNrOfElementsInArray > fdo->Desc.FlashOTPSize)
		return Flash_AddressInvalid;
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	01 c0       	rjmp	.+2      	; 0x2abe <FlashOTPProgram+0x178>
	/* This is the byte 64, OTP Control byte (if bit 0 = 0 -> OTP Locked) */
	sentBuffer[fdo->Desc.FlashOTPSize] = 0;

	// Step 2: Check whether any previous Write, Program or Erase cycle is on-going
	if(IsFlashBusy())
		return Flash_OperationOngoing;
    2abc:	89 e0       	ldi	r24, 0x09	; 9

	// Step 8: Wait until the operation completes or a timeout occurs.
	ret = WAIT_TILL_Instruction_EXECUTION_COMPLETE(1);

	return ret;
}
    2abe:	2c 85       	ldd	r18, Y+12	; 0x0c
    2ac0:	3d 85       	ldd	r19, Y+13	; 0x0d
    2ac2:	0f b6       	in	r0, 0x3f	; 63
    2ac4:	f8 94       	cli
    2ac6:	3e bf       	out	0x3e, r19	; 62
    2ac8:	0f be       	out	0x3f, r0	; 63
    2aca:	2d bf       	out	0x3d, r18	; 61
    2acc:	2d 96       	adiw	r28, 0x0d	; 13
    2ace:	0f b6       	in	r0, 0x3f	; 63
    2ad0:	f8 94       	cli
    2ad2:	de bf       	out	0x3e, r29	; 62
    2ad4:	0f be       	out	0x3f, r0	; 63
    2ad6:	cd bf       	out	0x3d, r28	; 61
    2ad8:	df 91       	pop	r29
    2ada:	cf 91       	pop	r28
    2adc:	1f 91       	pop	r17
    2ade:	0f 91       	pop	r16
    2ae0:	ff 90       	pop	r15
    2ae2:	ef 90       	pop	r14
    2ae4:	df 90       	pop	r13
    2ae6:	cf 90       	pop	r12
    2ae8:	bf 90       	pop	r11
    2aea:	af 90       	pop	r10
    2aec:	9f 90       	pop	r9
    2aee:	8f 90       	pop	r8
    2af0:	7f 90       	pop	r7
    2af2:	6f 90       	pop	r6
    2af4:	5f 90       	pop	r5
    2af6:	4f 90       	pop	r4
    2af8:	3f 90       	pop	r3
    2afa:	2f 90       	pop	r2
    2afc:	08 95       	ret

00002afe <K30_FctnInit>:
	K30_getType
};

void K30_FctnInit(K30Sensor *this)
{
	this->inherited.vmt = &K30_vmt;
    2afe:	2c e5       	ldi	r18, 0x5C	; 92
    2b00:	32 e0       	ldi	r19, 0x02	; 2
    2b02:	fc 01       	movw	r30, r24
    2b04:	35 87       	std	Z+13, r19	; 0x0d
    2b06:	24 87       	std	Z+12, r18	; 0x0c
    2b08:	08 95       	ret

00002b0a <K30_Configure>:

int K30_Configure(K30Sensor *this )
{
	// virtual function
	return 0;
}
    2b0a:	80 e0       	ldi	r24, 0x00	; 0
    2b0c:	90 e0       	ldi	r25, 0x00	; 0
    2b0e:	08 95       	ret

00002b10 <K30_Error>:

int K30_Error(K30Sensor *this )
{
	// virtual function
	return 0;
}
    2b10:	80 e0       	ldi	r24, 0x00	; 0
    2b12:	90 e0       	ldi	r25, 0x00	; 0
    2b14:	08 95       	ret

00002b16 <K30_VTinit>:
void K30_VTinit( K30Sensor* this)
{
	this->inherited.abstract.device_vt = &K30_abstract_vmt;
    2b16:	24 e5       	ldi	r18, 0x54	; 84
    2b18:	32 e0       	ldi	r19, 0x02	; 2
    2b1a:	fc 01       	movw	r30, r24
    2b1c:	31 83       	std	Z+1, r19	; 0x01
    2b1e:	20 83       	st	Z, r18
    2b20:	08 95       	ret

00002b22 <K30_reset>:

int K30_reset( K30Sensor* this)
{
	// virtual function
	return 0;
}
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	90 e0       	ldi	r25, 0x00	; 0
    2b26:	08 95       	ret

00002b28 <K30_getType>:

int K30_getType(K30Sensor* this)
{
	return TYPE_SENSOR;
}
    2b28:	83 e0       	ldi	r24, 0x03	; 3
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	08 95       	ret

00002b2e <K30_Request>:
	return 0;
}

int K30_Request(K30Sensor *this )
{
	return K30_delaytime();
    2b2e:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <K30_delaytime>
	if(status!=TWI_SENT_ACK) return 0;
	TWI_Stop();
	_delay_ms(10);
	return 0;
	*/
}
    2b32:	08 95       	ret

00002b34 <K30_Collect>:

int K30_Collect(K30Sensor *this )
{
	double K30Data;
	K30Data = K30_readCO2();
    2b34:	0e 94 8e 02 	call	0x51c	; 0x51c <K30_readCO2>
    2b38:	bc 01       	movw	r22, r24
    2b3a:	99 0f       	add	r25, r25
    2b3c:	88 0b       	sbc	r24, r24
    2b3e:	99 0b       	sbc	r25, r25
    2b40:	0e 94 3c 29 	call	0x5278	; 0x5278 <__floatsisf>
	printf("\tK30 data is %lf\n",K30Data);
    2b44:	9f 93       	push	r25
    2b46:	8f 93       	push	r24
    2b48:	7f 93       	push	r23
    2b4a:	6f 93       	push	r22
    2b4c:	88 e0       	ldi	r24, 0x08	; 8
    2b4e:	94 e0       	ldi	r25, 0x04	; 4
    2b50:	9f 93       	push	r25
    2b52:	8f 93       	push	r24
    2b54:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    2b58:	0f 90       	pop	r0
    2b5a:	0f 90       	pop	r0
    2b5c:	0f 90       	pop	r0
    2b5e:	0f 90       	pop	r0
    2b60:	0f 90       	pop	r0
    2b62:	0f 90       	pop	r0
	sum = buffer[0] + buffer[1] + buffer[2];
	if(sum==buffer[3]){return val;}
		printf_P()
	else{return 0;}
*/
}
    2b64:	08 95       	ret

00002b66 <K30_init>:
}

int K30_init( K30Sensor* this)
{
	// TWI_Init(200000);
	printf("K30 Sensor Init\n");
    2b66:	8a e1       	ldi	r24, 0x1A	; 26
    2b68:	94 e0       	ldi	r25, 0x04	; 4
    2b6a:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>
	return 0;
}
    2b6e:	80 e0       	ldi	r24, 0x00	; 0
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	08 95       	ret

00002b74 <New_K30_Sensor>:
	return TYPE_SENSOR;
}


K30Sensor* New_K30_Sensor( int num, int NumData)
{
    2b74:	ef 92       	push	r14
    2b76:	ff 92       	push	r15
    2b78:	0f 93       	push	r16
    2b7a:	1f 93       	push	r17
    2b7c:	cf 93       	push	r28
    2b7e:	df 93       	push	r29
    2b80:	7c 01       	movw	r14, r24
    2b82:	8b 01       	movw	r16, r22
	K30Sensor *p = malloc(sizeof(K30Sensor));
    2b84:	8e e0       	ldi	r24, 0x0E	; 14
    2b86:	90 e0       	ldi	r25, 0x00	; 0
    2b88:	0e 94 2d 2e 	call	0x5c5a	; 0x5c5a <malloc>
    2b8c:	ec 01       	movw	r28, r24
	// virtual function
	return 0;
}
void K30_VTinit( K30Sensor* this)
{
	this->inherited.abstract.device_vt = &K30_abstract_vmt;
    2b8e:	84 e5       	ldi	r24, 0x54	; 84
    2b90:	92 e0       	ldi	r25, 0x02	; 2
    2b92:	99 83       	std	Y+1, r25	; 0x01
    2b94:	88 83       	st	Y, r24
	K30_getType
};

void K30_FctnInit(K30Sensor *this)
{
	this->inherited.vmt = &K30_vmt;
    2b96:	8c e5       	ldi	r24, 0x5C	; 92
    2b98:	92 e0       	ldi	r25, 0x02	; 2
    2b9a:	9d 87       	std	Y+13, r25	; 0x0d
    2b9c:	8c 87       	std	Y+12, r24	; 0x0c
K30Sensor* New_K30_Sensor( int num, int NumData)
{
	K30Sensor *p = malloc(sizeof(K30Sensor));
	K30_VTinit( p );
	K30_FctnInit( p );
	p->inherited.getStartNum = fctn_getStartNum;
    2b9e:	80 ec       	ldi	r24, 0xC0	; 192
    2ba0:	9e e1       	ldi	r25, 0x1E	; 30
    2ba2:	99 87       	std	Y+9, r25	; 0x09
    2ba4:	88 87       	std	Y+8, r24	; 0x08
	p->inherited.getEndNum = fctn_getEndNum;
    2ba6:	84 ec       	ldi	r24, 0xC4	; 196
    2ba8:	9e e1       	ldi	r25, 0x1E	; 30
    2baa:	9b 87       	std	Y+11, r25	; 0x0b
    2bac:	8a 87       	std	Y+10, r24	; 0x0a
	
	p->inherited.test_num = num;
    2bae:	fb 82       	std	Y+3, r15	; 0x03
    2bb0:	ea 82       	std	Y+2, r14	; 0x02
	p->inherited.NumOfData = NumData;
    2bb2:	1f 83       	std	Y+7, r17	; 0x07
    2bb4:	0e 83       	std	Y+6, r16	; 0x06
	p->inherited.StartNum = SensorDataCount;
    2bb6:	80 91 1d 0d 	lds	r24, 0x0D1D
    2bba:	90 91 1e 0d 	lds	r25, 0x0D1E
    2bbe:	9d 83       	std	Y+5, r25	; 0x05
    2bc0:	8c 83       	std	Y+4, r24	; 0x04
	SensorDataCount += NumData;
    2bc2:	b8 01       	movw	r22, r16
    2bc4:	68 0f       	add	r22, r24
    2bc6:	79 1f       	adc	r23, r25
    2bc8:	70 93 1e 0d 	sts	0x0D1E, r23
    2bcc:	60 93 1d 0d 	sts	0x0D1D, r22
	printf("SensorDataCount %d\n",SensorDataCount);
    2bd0:	7f 93       	push	r23
    2bd2:	6f 93       	push	r22
    2bd4:	8a e2       	ldi	r24, 0x2A	; 42
    2bd6:	94 e0       	ldi	r25, 0x04	; 4
    2bd8:	9f 93       	push	r25
    2bda:	8f 93       	push	r24
    2bdc:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
	
	return p;
    2be0:	0f 90       	pop	r0
    2be2:	0f 90       	pop	r0
    2be4:	0f 90       	pop	r0
    2be6:	0f 90       	pop	r0
}
    2be8:	ce 01       	movw	r24, r28
    2bea:	df 91       	pop	r29
    2bec:	cf 91       	pop	r28
    2bee:	1f 91       	pop	r17
    2bf0:	0f 91       	pop	r16
    2bf2:	ff 90       	pop	r15
    2bf4:	ef 90       	pop	r14
    2bf6:	08 95       	ret

00002bf8 <ADC_Init>:

/*************************************************************************//**
  @brief Initializes the ADC
*****************************************************************************/
void ADC_Init(void) {
	ADCSRA = (1<<ADEN)|(4<<ADPS0); //enables the ADC module, CPU clock prescale=16
    2bf8:	84 e8       	ldi	r24, 0x84	; 132
    2bfa:	80 93 7a 00 	sts	0x007A, r24
	
	ADCSRC = 0x05|(1<<ADTHT0)|(1<<ADTHT1); //ADSUT=5
    2bfe:	85 ec       	ldi	r24, 0xC5	; 197
    2c00:	80 93 77 00 	sts	0x0077, r24
	while((ADCSRB&(1<<AVDDOK))==0);
    2c04:	eb e7       	ldi	r30, 0x7B	; 123
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	80 81       	ld	r24, Z
    2c0a:	88 23       	and	r24, r24
    2c0c:	ec f7       	brge	.-6      	; 0x2c08 <ADC_Init+0x10>
}
    2c0e:	08 95       	ret

00002c10 <__vector_15>:

/*************************************************************************//**
  @brief Timer Interrupt Service Routine
*****************************************************************************/
ISR(TIMER2_OVF_vect)
{
    2c10:	1f 92       	push	r1
    2c12:	0f 92       	push	r0
    2c14:	0f b6       	in	r0, 0x3f	; 63
    2c16:	0f 92       	push	r0
    2c18:	11 24       	eor	r1, r1
    2c1a:	0b b6       	in	r0, 0x3b	; 59
    2c1c:	0f 92       	push	r0
    2c1e:	2f 93       	push	r18
    2c20:	3f 93       	push	r19
    2c22:	4f 93       	push	r20
    2c24:	5f 93       	push	r21
    2c26:	6f 93       	push	r22
    2c28:	7f 93       	push	r23
    2c2a:	8f 93       	push	r24
    2c2c:	9f 93       	push	r25
    2c2e:	af 93       	push	r26
    2c30:	bf 93       	push	r27
    2c32:	ef 93       	push	r30
    2c34:	ff 93       	push	r31
	timer_usage ++;
    2c36:	80 91 84 07 	lds	r24, 0x0784
    2c3a:	90 91 85 07 	lds	r25, 0x0785
    2c3e:	01 96       	adiw	r24, 0x01	; 1
    2c40:	90 93 85 07 	sts	0x0785, r25
    2c44:	80 93 84 07 	sts	0x0784, r24
	// printf("count1 = %d\n",timer_usage);
	printf("Timestamp : %ld\n",(TimeStamp));
    2c48:	80 91 83 07 	lds	r24, 0x0783
    2c4c:	8f 93       	push	r24
    2c4e:	80 91 82 07 	lds	r24, 0x0782
    2c52:	8f 93       	push	r24
    2c54:	80 91 81 07 	lds	r24, 0x0781
    2c58:	8f 93       	push	r24
    2c5a:	80 91 80 07 	lds	r24, 0x0780
    2c5e:	8f 93       	push	r24
    2c60:	8e e3       	ldi	r24, 0x3E	; 62
    2c62:	94 e0       	ldi	r25, 0x04	; 4
    2c64:	9f 93       	push	r25
    2c66:	8f 93       	push	r24
    2c68:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
	handle_timeoutq_event();	
    2c6c:	f7 d6       	rcall	.+3566   	; 0x3a5c <handle_timeoutq_event>
    2c6e:	0f 90       	pop	r0
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	0f 90       	pop	r0
    2c76:	0f 90       	pop	r0
    2c78:	0f 90       	pop	r0
}
    2c7a:	ff 91       	pop	r31
    2c7c:	ef 91       	pop	r30
    2c7e:	bf 91       	pop	r27
    2c80:	af 91       	pop	r26
    2c82:	9f 91       	pop	r25
    2c84:	8f 91       	pop	r24
    2c86:	7f 91       	pop	r23
    2c88:	6f 91       	pop	r22
    2c8a:	5f 91       	pop	r21
    2c8c:	4f 91       	pop	r20
    2c8e:	3f 91       	pop	r19
    2c90:	2f 91       	pop	r18
    2c92:	0f 90       	pop	r0
    2c94:	0b be       	out	0x3b, r0	; 59
    2c96:	0f 90       	pop	r0
    2c98:	0f be       	out	0x3f, r0	; 63
    2c9a:	0f 90       	pop	r0
    2c9c:	1f 90       	pop	r1
    2c9e:	18 95       	reti

00002ca0 <init_Event_Timer>:

/* Initialization Routine Example 3 : Timer 2 Async operation */
/* Clock for Timer 2 is taken from crystal connected to TOSC pins */
void init_Event_Timer(void)
{
	TimeStamp = 0;
    2ca0:	10 92 80 07 	sts	0x0780, r1
    2ca4:	10 92 81 07 	sts	0x0781, r1
    2ca8:	10 92 82 07 	sts	0x0782, r1
    2cac:	10 92 83 07 	sts	0x0783, r1
	timer_usage = 0;
    2cb0:	10 92 85 07 	sts	0x0785, r1
    2cb4:	10 92 84 07 	sts	0x0784, r1
	/* Select clock source as crystal on TOSCn pins */
	ASSR |= 1 << AS2;
    2cb8:	e6 eb       	ldi	r30, 0xB6	; 182
    2cba:	f0 e0       	ldi	r31, 0x00	; 0
    2cbc:	80 81       	ld	r24, Z
    2cbe:	80 62       	ori	r24, 0x20	; 32
    2cc0:	80 83       	st	Z, r24
	
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
    2cc2:	80 81       	ld	r24, Z
    2cc4:	8f 71       	andi	r24, 0x1F	; 31
    2cc6:	e9 f7       	brne	.-6      	; 0x2cc2 <init_Event_Timer+0x22>
	
	/* Stop timer 2 */
	TCCR2B = 0x00;
    2cc8:	10 92 b1 00 	sts	0x00B1, r1
    2ccc:	08 95       	ret

00002cce <general_set_timer>:
	// TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
}


void general_set_timer( int32_t period_number )
{
    2cce:	cf 92       	push	r12
    2cd0:	df 92       	push	r13
    2cd2:	ef 92       	push	r14
    2cd4:	ff 92       	push	r15
    2cd6:	6b 01       	movw	r12, r22
    2cd8:	7c 01       	movw	r14, r24
	// printf("debug %d\n",period_number);
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
    2cda:	e6 eb       	ldi	r30, 0xB6	; 182
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	80 81       	ld	r24, Z
    2ce0:	8f 71       	andi	r24, 0x1F	; 31
    2ce2:	e9 f7       	brne	.-6      	; 0x2cde <general_set_timer+0x10>
	/* Stop timer 2 */
	TCCR2B = 0x00;
    2ce4:	10 92 b1 00 	sts	0x00B1, r1
	
	
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
    2ce8:	e6 eb       	ldi	r30, 0xB6	; 182
    2cea:	f0 e0       	ldi	r31, 0x00	; 0
    2cec:	80 81       	ld	r24, Z
    2cee:	8f 71       	andi	r24, 0x1F	; 31
    2cf0:	e9 f7       	brne	.-6      	; 0x2cec <general_set_timer+0x1e>
	 *  1    1    0     256		2s/256
	 *  1    1    1    1024		8s/256
	 */
	// Resolution
	// 0.25s/256
	if( period_number <= 250 )
    2cf2:	8b ef       	ldi	r24, 0xFB	; 251
    2cf4:	c8 16       	cp	r12, r24
    2cf6:	d1 04       	cpc	r13, r1
    2cf8:	e1 04       	cpc	r14, r1
    2cfa:	f1 04       	cpc	r15, r1
    2cfc:	ec f4       	brge	.+58     	; 0x2d38 <general_set_timer+0x6a>
	{
		temp = 256 - (int32_t) ( 256.0/250.0 * period_number);
    2cfe:	c7 01       	movw	r24, r14
    2d00:	b6 01       	movw	r22, r12
    2d02:	0e 94 3c 29 	call	0x5278	; 0x5278 <__floatsisf>
    2d06:	2f e6       	ldi	r18, 0x6F	; 111
    2d08:	32 e1       	ldi	r19, 0x12	; 18
    2d0a:	43 e8       	ldi	r20, 0x83	; 131
    2d0c:	5f e3       	ldi	r21, 0x3F	; 63
    2d0e:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <__mulsf3>
    2d12:	0e 94 09 29 	call	0x5212	; 0x5212 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
    2d16:	20 e0       	ldi	r18, 0x00	; 0
    2d18:	31 e0       	ldi	r19, 0x01	; 1
    2d1a:	c9 01       	movw	r24, r18
    2d1c:	86 1b       	sub	r24, r22
    2d1e:	97 0b       	sbc	r25, r23
    2d20:	8f 3f       	cpi	r24, 0xFF	; 255
    2d22:	91 05       	cpc	r25, r1
    2d24:	19 f0       	breq	.+6      	; 0x2d2c <general_set_timer+0x5e>
    2d26:	14 f0       	brlt	.+4      	; 0x2d2c <general_set_timer+0x5e>
    2d28:	8f ef       	ldi	r24, 0xFF	; 255
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
    2d2c:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS21)|(1<<CS20);
    2d30:	83 e0       	ldi	r24, 0x03	; 3
    2d32:	80 93 b1 00 	sts	0x00B1, r24
    2d36:	94 c0       	rjmp	.+296    	; 0x2e60 <general_set_timer+0x192>
	}
	// Resolution
	// 0.5s/256
	else if ( period_number <= 500 )
    2d38:	85 ef       	ldi	r24, 0xF5	; 245
    2d3a:	c8 16       	cp	r12, r24
    2d3c:	81 e0       	ldi	r24, 0x01	; 1
    2d3e:	d8 06       	cpc	r13, r24
    2d40:	e1 04       	cpc	r14, r1
    2d42:	f1 04       	cpc	r15, r1
    2d44:	ec f4       	brge	.+58     	; 0x2d80 <general_set_timer+0xb2>
	{
		temp = 256 - (int32_t) ( 256.0/500.0 * period_number);
    2d46:	c7 01       	movw	r24, r14
    2d48:	b6 01       	movw	r22, r12
    2d4a:	0e 94 3c 29 	call	0x5278	; 0x5278 <__floatsisf>
    2d4e:	2f e6       	ldi	r18, 0x6F	; 111
    2d50:	32 e1       	ldi	r19, 0x12	; 18
    2d52:	43 e0       	ldi	r20, 0x03	; 3
    2d54:	5f e3       	ldi	r21, 0x3F	; 63
    2d56:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <__mulsf3>
    2d5a:	0e 94 09 29 	call	0x5212	; 0x5212 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	31 e0       	ldi	r19, 0x01	; 1
    2d62:	c9 01       	movw	r24, r18
    2d64:	86 1b       	sub	r24, r22
    2d66:	97 0b       	sbc	r25, r23
    2d68:	8f 3f       	cpi	r24, 0xFF	; 255
    2d6a:	91 05       	cpc	r25, r1
    2d6c:	19 f0       	breq	.+6      	; 0x2d74 <general_set_timer+0xa6>
    2d6e:	14 f0       	brlt	.+4      	; 0x2d74 <general_set_timer+0xa6>
    2d70:	8f ef       	ldi	r24, 0xFF	; 255
    2d72:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
    2d74:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22);
    2d78:	84 e0       	ldi	r24, 0x04	; 4
    2d7a:	80 93 b1 00 	sts	0x00B1, r24
    2d7e:	70 c0       	rjmp	.+224    	; 0x2e60 <general_set_timer+0x192>
	}
	// Resolution
	// 1s/256
	else if ( period_number <= 1000 )
    2d80:	89 ee       	ldi	r24, 0xE9	; 233
    2d82:	c8 16       	cp	r12, r24
    2d84:	83 e0       	ldi	r24, 0x03	; 3
    2d86:	d8 06       	cpc	r13, r24
    2d88:	e1 04       	cpc	r14, r1
    2d8a:	f1 04       	cpc	r15, r1
    2d8c:	ec f4       	brge	.+58     	; 0x2dc8 <general_set_timer+0xfa>
	{
		temp = 256 - (int32_t) ( 256.0/1000.0 * period_number);
    2d8e:	c7 01       	movw	r24, r14
    2d90:	b6 01       	movw	r22, r12
    2d92:	0e 94 3c 29 	call	0x5278	; 0x5278 <__floatsisf>
    2d96:	2f e6       	ldi	r18, 0x6F	; 111
    2d98:	32 e1       	ldi	r19, 0x12	; 18
    2d9a:	43 e8       	ldi	r20, 0x83	; 131
    2d9c:	5e e3       	ldi	r21, 0x3E	; 62
    2d9e:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <__mulsf3>
    2da2:	0e 94 09 29 	call	0x5212	; 0x5212 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
    2da6:	20 e0       	ldi	r18, 0x00	; 0
    2da8:	31 e0       	ldi	r19, 0x01	; 1
    2daa:	c9 01       	movw	r24, r18
    2dac:	86 1b       	sub	r24, r22
    2dae:	97 0b       	sbc	r25, r23
    2db0:	8f 3f       	cpi	r24, 0xFF	; 255
    2db2:	91 05       	cpc	r25, r1
    2db4:	19 f0       	breq	.+6      	; 0x2dbc <general_set_timer+0xee>
    2db6:	14 f0       	brlt	.+4      	; 0x2dbc <general_set_timer+0xee>
    2db8:	8f ef       	ldi	r24, 0xFF	; 255
    2dba:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
    2dbc:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS20);	
    2dc0:	85 e0       	ldi	r24, 0x05	; 5
    2dc2:	80 93 b1 00 	sts	0x00B1, r24
    2dc6:	4c c0       	rjmp	.+152    	; 0x2e60 <general_set_timer+0x192>
	}
	// Resolution
	// 2s/256
	else if ( period_number <= 2000 )
    2dc8:	81 ed       	ldi	r24, 0xD1	; 209
    2dca:	c8 16       	cp	r12, r24
    2dcc:	87 e0       	ldi	r24, 0x07	; 7
    2dce:	d8 06       	cpc	r13, r24
    2dd0:	e1 04       	cpc	r14, r1
    2dd2:	f1 04       	cpc	r15, r1
    2dd4:	ec f4       	brge	.+58     	; 0x2e10 <general_set_timer+0x142>
	{
		temp = 256 - (int32_t) ( 256.0/2000.0 * period_number);
    2dd6:	c7 01       	movw	r24, r14
    2dd8:	b6 01       	movw	r22, r12
    2dda:	0e 94 3c 29 	call	0x5278	; 0x5278 <__floatsisf>
    2dde:	2f e6       	ldi	r18, 0x6F	; 111
    2de0:	32 e1       	ldi	r19, 0x12	; 18
    2de2:	43 e0       	ldi	r20, 0x03	; 3
    2de4:	5e e3       	ldi	r21, 0x3E	; 62
    2de6:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <__mulsf3>
    2dea:	0e 94 09 29 	call	0x5212	; 0x5212 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
    2dee:	20 e0       	ldi	r18, 0x00	; 0
    2df0:	31 e0       	ldi	r19, 0x01	; 1
    2df2:	c9 01       	movw	r24, r18
    2df4:	86 1b       	sub	r24, r22
    2df6:	97 0b       	sbc	r25, r23
    2df8:	8f 3f       	cpi	r24, 0xFF	; 255
    2dfa:	91 05       	cpc	r25, r1
    2dfc:	19 f0       	breq	.+6      	; 0x2e04 <general_set_timer+0x136>
    2dfe:	14 f0       	brlt	.+4      	; 0x2e04 <general_set_timer+0x136>
    2e00:	8f ef       	ldi	r24, 0xFF	; 255
    2e02:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
    2e04:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS21);	
    2e08:	86 e0       	ldi	r24, 0x06	; 6
    2e0a:	80 93 b1 00 	sts	0x00B1, r24
    2e0e:	28 c0       	rjmp	.+80     	; 0x2e60 <general_set_timer+0x192>
	}
	// Resolution
	// 8s/256
	else if ( period_number <= 8000 )
    2e10:	81 e4       	ldi	r24, 0x41	; 65
    2e12:	c8 16       	cp	r12, r24
    2e14:	8f e1       	ldi	r24, 0x1F	; 31
    2e16:	d8 06       	cpc	r13, r24
    2e18:	e1 04       	cpc	r14, r1
    2e1a:	f1 04       	cpc	r15, r1
    2e1c:	ec f4       	brge	.+58     	; 0x2e58 <general_set_timer+0x18a>
	{
		t = (int32_t) ( 256.0/8000.0 * period_number);
    2e1e:	c7 01       	movw	r24, r14
    2e20:	b6 01       	movw	r22, r12
    2e22:	0e 94 3c 29 	call	0x5278	; 0x5278 <__floatsisf>
    2e26:	2f e6       	ldi	r18, 0x6F	; 111
    2e28:	32 e1       	ldi	r19, 0x12	; 18
    2e2a:	43 e0       	ldi	r20, 0x03	; 3
    2e2c:	5d e3       	ldi	r21, 0x3D	; 61
    2e2e:	0e 94 f0 29 	call	0x53e0	; 0x53e0 <__mulsf3>
    2e32:	0e 94 09 29 	call	0x5212	; 0x5212 <__fixsfsi>
		temp = 256 - t;
		temp = temp > 255 ? 255 : temp ;
    2e36:	20 e0       	ldi	r18, 0x00	; 0
    2e38:	31 e0       	ldi	r19, 0x01	; 1
    2e3a:	c9 01       	movw	r24, r18
    2e3c:	86 1b       	sub	r24, r22
    2e3e:	97 0b       	sbc	r25, r23
    2e40:	8f 3f       	cpi	r24, 0xFF	; 255
    2e42:	91 05       	cpc	r25, r1
    2e44:	19 f0       	breq	.+6      	; 0x2e4c <general_set_timer+0x17e>
    2e46:	14 f0       	brlt	.+4      	; 0x2e4c <general_set_timer+0x17e>
    2e48:	8f ef       	ldi	r24, 0xFF	; 255
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
    2e4c:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
    2e50:	87 e0       	ldi	r24, 0x07	; 7
    2e52:	80 93 b1 00 	sts	0x00B1, r24
    2e56:	04 c0       	rjmp	.+8      	; 0x2e60 <general_set_timer+0x192>
	}
	else
	{
		printf("Timer exceeds max\n");
    2e58:	8f e4       	ldi	r24, 0x4F	; 79
    2e5a:	94 e0       	ldi	r25, 0x04	; 4
    2e5c:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>
	}

	/* start timer 2 */
	TCCR2A = 0x00;
    2e60:	10 92 b0 00 	sts	0x00B0, r1
	TimeStamp += period_number;
    2e64:	80 91 80 07 	lds	r24, 0x0780
    2e68:	90 91 81 07 	lds	r25, 0x0781
    2e6c:	a0 91 82 07 	lds	r26, 0x0782
    2e70:	b0 91 83 07 	lds	r27, 0x0783
    2e74:	c8 0e       	add	r12, r24
    2e76:	d9 1e       	adc	r13, r25
    2e78:	ea 1e       	adc	r14, r26
    2e7a:	fb 1e       	adc	r15, r27
    2e7c:	c0 92 80 07 	sts	0x0780, r12
    2e80:	d0 92 81 07 	sts	0x0781, r13
    2e84:	e0 92 82 07 	sts	0x0782, r14
    2e88:	f0 92 83 07 	sts	0x0783, r15
}
    2e8c:	ff 90       	pop	r15
    2e8e:	ef 90       	pop	r14
    2e90:	df 90       	pop	r13
    2e92:	cf 90       	pop	r12
    2e94:	08 95       	ret

00002e96 <init_set_timer>:

void init_set_timer( int32_t period_number )
{
    general_set_timer( period_number );
    2e96:	1b df       	rcall	.-458    	; 0x2cce <general_set_timer>
	/* Clear pending interrupts */
	TIFR2  = (1 << TOV2) | (1 << OCF2A) | (1 << OCF2B);
    2e98:	87 e0       	ldi	r24, 0x07	; 7
    2e9a:	87 bb       	out	0x17, r24	; 23
	/* Enable Overflow Interrupt */
	TIMSK2 = 1<<TOIE2;
    2e9c:	81 e0       	ldi	r24, 0x01	; 1
    2e9e:	80 93 70 00 	sts	0x0070, r24
    2ea2:	08 95       	ret

00002ea4 <set_timer>:

}

void set_timer( int32_t period_number )
{
    2ea4:	cf 92       	push	r12
    2ea6:	df 92       	push	r13
    2ea8:	ef 92       	push	r14
    2eaa:	ff 92       	push	r15
    2eac:	6b 01       	movw	r12, r22
    2eae:	7c 01       	movw	r14, r24
	printf("set timer gap = %ld\n\n", period_number);
    2eb0:	ff 92       	push	r15
    2eb2:	ef 92       	push	r14
    2eb4:	df 92       	push	r13
    2eb6:	6f 93       	push	r22
    2eb8:	81 e6       	ldi	r24, 0x61	; 97
    2eba:	94 e0       	ldi	r25, 0x04	; 4
    2ebc:	9f 93       	push	r25
    2ebe:	8f 93       	push	r24
    2ec0:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
	if( period_number == 0)
    2ec4:	0f 90       	pop	r0
    2ec6:	0f 90       	pop	r0
    2ec8:	0f 90       	pop	r0
    2eca:	0f 90       	pop	r0
    2ecc:	0f 90       	pop	r0
    2ece:	0f 90       	pop	r0
    2ed0:	c1 14       	cp	r12, r1
    2ed2:	d1 04       	cpc	r13, r1
    2ed4:	e1 04       	cpc	r14, r1
    2ed6:	f1 04       	cpc	r15, r1
    2ed8:	69 f0       	breq	.+26     	; 0x2ef4 <set_timer+0x50>
	{
		/* we won't every set a zero timeout, will we ? */
		return;
	}
    if( timer_usage == 0 )
    2eda:	80 91 84 07 	lds	r24, 0x0784
    2ede:	90 91 85 07 	lds	r25, 0x0785
    2ee2:	89 2b       	or	r24, r25
    2ee4:	21 f4       	brne	.+8      	; 0x2eee <set_timer+0x4a>
    {
        init_set_timer( period_number );
    2ee6:	c7 01       	movw	r24, r14
    2ee8:	b6 01       	movw	r22, r12
    2eea:	d5 df       	rcall	.-86     	; 0x2e96 <init_set_timer>
    2eec:	03 c0       	rjmp	.+6      	; 0x2ef4 <set_timer+0x50>
    }
    else
    {
        general_set_timer( period_number );
    2eee:	c7 01       	movw	r24, r14
    2ef0:	b6 01       	movw	r22, r12
    2ef2:	ed de       	rcall	.-550    	; 0x2cce <general_set_timer>
    }
}	
    2ef4:	ff 90       	pop	r15
    2ef6:	ef 90       	pop	r14
    2ef8:	df 90       	pop	r13
    2efa:	cf 90       	pop	r12
    2efc:	08 95       	ret

00002efe <PWR_Init>:

/*************************************************************************//**
  @brief Initializes the power management system
*****************************************************************************/
void PWR_Init(void){
	DDRD |= 0b11000000;
    2efe:	8a b1       	in	r24, 0x0a	; 10
    2f00:	80 6c       	ori	r24, 0xC0	; 192
    2f02:	8a b9       	out	0x0a, r24	; 10
    2f04:	08 95       	ret

00002f06 <PWR_TurnOn5V>:

/*************************************************************************//**
  @brief Turns on the 5V power supply
*****************************************************************************/
void PWR_TurnOn5V(void){
	PORTD |= 0b10000000;
    2f06:	5f 9a       	sbi	0x0b, 7	; 11
    2f08:	08 95       	ret

00002f0a <spi_init_master>:
#include <avr/io.h>

//Initialize SPI Master Device
void spi_init_master (void)
{
	DDRB &= ~((1<<PORTB2)|(1<<PORTB3)|(1<<PORTB1)|(1<<PORTB0));
    2f0a:	84 b1       	in	r24, 0x04	; 4
    2f0c:	80 7f       	andi	r24, 0xF0	; 240
    2f0e:	84 b9       	out	0x04, r24	; 4
    DDRB |= (1<<PORTB1)|(1<<PORTB2)|(1<<PORTB0);              //Set MOSI, SCK as Output
    2f10:	84 b1       	in	r24, 0x04	; 4
    2f12:	87 60       	ori	r24, 0x07	; 7
    2f14:	84 b9       	out	0x04, r24	; 4
    SPCR = (1<<SPE)|(1<<MSTR)|(0<<SPR1)|(1<<SPR0); //Enable SPI, Set as Master
    2f16:	81 e5       	ldi	r24, 0x51	; 81
    2f18:	8c bd       	out	0x2c, r24	; 44
    2f1a:	08 95       	ret

00002f1c <spi_tranceiver>:
                                       //Prescaler: Fosc/16, Enable Interrupts
}
//Function to send and receive data
unsigned char spi_tranceiver (unsigned char data)
{
    SPDR = data;                       //Load data into the buffer
    2f1c:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1<<SPIF) ));       //Wait until transmission complete
    2f1e:	0d b4       	in	r0, 0x2d	; 45
    2f20:	07 fe       	sbrs	r0, 7
    2f22:	fd cf       	rjmp	.-6      	; 0x2f1e <spi_tranceiver+0x2>
    return(SPDR);                      //Return received data
    2f24:	8e b5       	in	r24, 0x2e	; 46
}
    2f26:	08 95       	ret

00002f28 <Serialize_SPI>:
SPI_STATUS Serialize_SPI(const CharStream* char_stream_send,
                         CharStream* char_stream_recv,
                         SpiConfigOptions optBefore,
                         SpiConfigOptions optAfter
                        )
{
    2f28:	8f 92       	push	r8
    2f2a:	9f 92       	push	r9
    2f2c:	af 92       	push	r10
    2f2e:	bf 92       	push	r11
    2f30:	cf 92       	push	r12
    2f32:	df 92       	push	r13
    2f34:	ef 92       	push	r14
    2f36:	ff 92       	push	r15
    2f38:	0f 93       	push	r16
    2f3a:	1f 93       	push	r17
    2f3c:	cf 93       	push	r28
    2f3e:	df 93       	push	r29
    2f40:	7c 01       	movw	r14, r24
    2f42:	8b 01       	movw	r16, r22
	uint8 *char_send, *char_recv;
	uint16 rx_len = 0, tx_len = 0;
	
	int i;
	printf("\nSEND:");
    2f44:	87 e7       	ldi	r24, 0x77	; 119
    2f46:	94 e0       	ldi	r25, 0x04	; 4
    2f48:	9f 93       	push	r25
    2f4a:	8f 93       	push	r24
    2f4c:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
	for(i=0; i<char_stream_send->length; i++)
    2f50:	0f 90       	pop	r0
    2f52:	0f 90       	pop	r0
    2f54:	f7 01       	movw	r30, r14
    2f56:	82 81       	ldd	r24, Z+2	; 0x02
    2f58:	93 81       	ldd	r25, Z+3	; 0x03
    2f5a:	a4 81       	ldd	r26, Z+4	; 0x04
    2f5c:	b5 81       	ldd	r27, Z+5	; 0x05
    2f5e:	89 2b       	or	r24, r25
    2f60:	8a 2b       	or	r24, r26
    2f62:	8b 2b       	or	r24, r27
    2f64:	09 f4       	brne	.+2      	; 0x2f68 <Serialize_SPI+0x40>
    2f66:	9c c0       	rjmp	.+312    	; 0x30a0 <Serialize_SPI+0x178>
    2f68:	c0 e0       	ldi	r28, 0x00	; 0
    2f6a:	d0 e0       	ldi	r29, 0x00	; 0
		printf(" 0x%x \n",char_stream_send->pChar[i]);
    2f6c:	0f 2e       	mov	r0, r31
    2f6e:	fe e7       	ldi	r31, 0x7E	; 126
    2f70:	cf 2e       	mov	r12, r31
    2f72:	f4 e0       	ldi	r31, 0x04	; 4
    2f74:	df 2e       	mov	r13, r31
    2f76:	f0 2d       	mov	r31, r0
    2f78:	d7 01       	movw	r26, r14
    2f7a:	ed 91       	ld	r30, X+
    2f7c:	fc 91       	ld	r31, X
    2f7e:	ec 0f       	add	r30, r28
    2f80:	fd 1f       	adc	r31, r29
    2f82:	80 81       	ld	r24, Z
    2f84:	1f 92       	push	r1
    2f86:	8f 93       	push	r24
    2f88:	df 92       	push	r13
    2f8a:	cf 92       	push	r12
    2f8c:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
	uint8 *char_send, *char_recv;
	uint16 rx_len = 0, tx_len = 0;
	
	int i;
	printf("\nSEND:");
	for(i=0; i<char_stream_send->length; i++)
    2f90:	21 96       	adiw	r28, 0x01	; 1
    2f92:	f7 01       	movw	r30, r14
    2f94:	82 81       	ldd	r24, Z+2	; 0x02
    2f96:	93 81       	ldd	r25, Z+3	; 0x03
    2f98:	a4 81       	ldd	r26, Z+4	; 0x04
    2f9a:	b5 81       	ldd	r27, Z+5	; 0x05
    2f9c:	ae 01       	movw	r20, r28
    2f9e:	0d 2e       	mov	r0, r29
    2fa0:	00 0c       	add	r0, r0
    2fa2:	66 0b       	sbc	r22, r22
    2fa4:	77 0b       	sbc	r23, r23
    2fa6:	0f 90       	pop	r0
    2fa8:	0f 90       	pop	r0
    2faa:	0f 90       	pop	r0
    2fac:	0f 90       	pop	r0
    2fae:	48 17       	cp	r20, r24
    2fb0:	59 07       	cpc	r21, r25
    2fb2:	6a 07       	cpc	r22, r26
    2fb4:	7b 07       	cpc	r23, r27
    2fb6:	00 f3       	brcs	.-64     	; 0x2f78 <Serialize_SPI+0x50>
		printf(" 0x%x \n",char_stream_send->pChar[i]);

	tx_len = char_stream_send->length;
    2fb8:	9c 01       	movw	r18, r24
	char_send = char_stream_send->pChar;
    2fba:	40 81       	ld	r20, Z
    2fbc:	51 81       	ldd	r21, Z+1	; 0x01

	if (NULL_PTR != char_stream_recv)
    2fbe:	01 15       	cp	r16, r1
    2fc0:	11 05       	cpc	r17, r1
    2fc2:	09 f4       	brne	.+2      	; 0x2fc6 <Serialize_SPI+0x9e>
    2fc4:	5e c0       	rjmp	.+188    	; 0x3082 <Serialize_SPI+0x15a>
	{
		rx_len = char_stream_recv->length;
    2fc6:	f8 01       	movw	r30, r16
    2fc8:	82 80       	ldd	r8, Z+2	; 0x02
    2fca:	93 80       	ldd	r9, Z+3	; 0x03
		char_recv = char_stream_recv->pChar;
    2fcc:	b0 80       	ld	r11, Z
    2fce:	a1 80       	ldd	r10, Z+1	; 0x01



	//ConfigureSpi(optBefore);

	while (tx_len-- > 0)
    2fd0:	ec 01       	movw	r28, r24
    2fd2:	21 97       	sbiw	r28, 0x01	; 1
    2fd4:	89 2b       	or	r24, r25
    2fd6:	19 f4       	brne	.+6      	; 0x2fde <Serialize_SPI+0xb6>
    2fd8:	0c c0       	rjmp	.+24     	; 0x2ff2 <Serialize_SPI+0xca>
                         SpiConfigOptions optBefore,
                         SpiConfigOptions optAfter
                        )
{
	uint8 *char_send, *char_recv;
	uint16 rx_len = 0, tx_len = 0;
    2fda:	81 2c       	mov	r8, r1
    2fdc:	91 2c       	mov	r9, r1
    2fde:	c4 2e       	mov	r12, r20
    2fe0:	d5 2e       	mov	r13, r21

	//ConfigureSpi(optBefore);

	while (tx_len-- > 0)
	{
		spi_tranceiver (*(char_send++));
    2fe2:	d6 01       	movw	r26, r12
    2fe4:	8d 91       	ld	r24, X+
    2fe6:	6d 01       	movw	r12, r26
    2fe8:	99 df       	rcall	.-206    	; 0x2f1c <spi_tranceiver>
    2fea:	ce 01       	movw	r24, r28



	//ConfigureSpi(optBefore);

	while (tx_len-- > 0)
    2fec:	21 97       	sbiw	r28, 0x01	; 1
    2fee:	89 2b       	or	r24, r25
    2ff0:	c1 f7       	brne	.-16     	; 0x2fe2 <Serialize_SPI+0xba>
	{
		spi_tranceiver (*(char_send++));
	}
	
	while (rx_len-- > 0)
    2ff2:	81 14       	cp	r8, r1
    2ff4:	91 04       	cpc	r9, r1
    2ff6:	51 f0       	breq	.+20     	; 0x300c <Serialize_SPI+0xe4>
    2ff8:	eb 2c       	mov	r14, r11
    2ffa:	fa 2c       	mov	r15, r10
    2ffc:	e4 01       	movw	r28, r8
	{
		*(char_recv++) = spi_tranceiver (0xff);
    2ffe:	8f ef       	ldi	r24, 0xFF	; 255
    3000:	8d df       	rcall	.-230    	; 0x2f1c <spi_tranceiver>
    3002:	f7 01       	movw	r30, r14
    3004:	81 93       	st	Z+, r24
    3006:	7f 01       	movw	r14, r30
    3008:	21 97       	sbiw	r28, 0x01	; 1
	while (tx_len-- > 0)
	{
		spi_tranceiver (*(char_send++));
	}
	
	while (rx_len-- > 0)
    300a:	c9 f7       	brne	.-14     	; 0x2ffe <Serialize_SPI+0xd6>
		//printf("%x\n",spi_tranceiver(0xff));
	}

	//ConfigureSpi(optAfter);

printf("\nREC:");
    300c:	86 e8       	ldi	r24, 0x86	; 134
    300e:	94 e0       	ldi	r25, 0x04	; 4
    3010:	9f 93       	push	r25
    3012:	8f 93       	push	r24
    3014:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
for(i=0; i<char_stream_recv->length; i++)
    3018:	0f 90       	pop	r0
    301a:	0f 90       	pop	r0
    301c:	f8 01       	movw	r30, r16
    301e:	82 81       	ldd	r24, Z+2	; 0x02
    3020:	93 81       	ldd	r25, Z+3	; 0x03
    3022:	a4 81       	ldd	r26, Z+4	; 0x04
    3024:	b5 81       	ldd	r27, Z+5	; 0x05
    3026:	89 2b       	or	r24, r25
    3028:	8a 2b       	or	r24, r26
    302a:	8b 2b       	or	r24, r27
    302c:	09 f4       	brne	.+2      	; 0x3030 <Serialize_SPI+0x108>
    302e:	41 c0       	rjmp	.+130    	; 0x30b2 <Serialize_SPI+0x18a>
    3030:	c0 e0       	ldi	r28, 0x00	; 0
    3032:	d0 e0       	ldi	r29, 0x00	; 0
printf(" 0x%x \n",char_stream_recv->pChar[i]);
    3034:	0f 2e       	mov	r0, r31
    3036:	fe e7       	ldi	r31, 0x7E	; 126
    3038:	ef 2e       	mov	r14, r31
    303a:	f4 e0       	ldi	r31, 0x04	; 4
    303c:	ff 2e       	mov	r15, r31
    303e:	f0 2d       	mov	r31, r0
    3040:	d8 01       	movw	r26, r16
    3042:	ed 91       	ld	r30, X+
    3044:	fc 91       	ld	r31, X
    3046:	ec 0f       	add	r30, r28
    3048:	fd 1f       	adc	r31, r29
    304a:	80 81       	ld	r24, Z
    304c:	1f 92       	push	r1
    304e:	8f 93       	push	r24
    3050:	ff 92       	push	r15
    3052:	ef 92       	push	r14
    3054:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
	}

	//ConfigureSpi(optAfter);

printf("\nREC:");
for(i=0; i<char_stream_recv->length; i++)
    3058:	21 96       	adiw	r28, 0x01	; 1
    305a:	ae 01       	movw	r20, r28
    305c:	0d 2e       	mov	r0, r29
    305e:	00 0c       	add	r0, r0
    3060:	66 0b       	sbc	r22, r22
    3062:	77 0b       	sbc	r23, r23
    3064:	0f 90       	pop	r0
    3066:	0f 90       	pop	r0
    3068:	0f 90       	pop	r0
    306a:	0f 90       	pop	r0
    306c:	f8 01       	movw	r30, r16
    306e:	82 81       	ldd	r24, Z+2	; 0x02
    3070:	93 81       	ldd	r25, Z+3	; 0x03
    3072:	a4 81       	ldd	r26, Z+4	; 0x04
    3074:	b5 81       	ldd	r27, Z+5	; 0x05
    3076:	48 17       	cp	r20, r24
    3078:	59 07       	cpc	r21, r25
    307a:	6a 07       	cpc	r22, r26
    307c:	7b 07       	cpc	r23, r27
    307e:	00 f3       	brcs	.-64     	; 0x3040 <Serialize_SPI+0x118>
    3080:	18 c0       	rjmp	.+48     	; 0x30b2 <Serialize_SPI+0x18a>



	//ConfigureSpi(optBefore);

	while (tx_len-- > 0)
    3082:	e9 01       	movw	r28, r18
    3084:	21 97       	sbiw	r28, 0x01	; 1
    3086:	23 2b       	or	r18, r19
    3088:	09 f0       	breq	.+2      	; 0x308c <Serialize_SPI+0x164>
    308a:	a7 cf       	rjmp	.-178    	; 0x2fda <Serialize_SPI+0xb2>
    308c:	bf cf       	rjmp	.-130    	; 0x300c <Serialize_SPI+0xe4>
	tx_len = char_stream_send->length;
	char_send = char_stream_send->pChar;

	if (NULL_PTR != char_stream_recv)
	{
		rx_len = char_stream_recv->length;
    308e:	d8 01       	movw	r26, r16
    3090:	12 96       	adiw	r26, 0x02	; 2
    3092:	8d 90       	ld	r8, X+
    3094:	9c 90       	ld	r9, X
    3096:	13 97       	sbiw	r26, 0x03	; 3
		char_recv = char_stream_recv->pChar;
    3098:	bc 90       	ld	r11, X
    309a:	11 96       	adiw	r26, 0x01	; 1
    309c:	ac 90       	ld	r10, X
    309e:	a9 cf       	rjmp	.-174    	; 0x2ff2 <Serialize_SPI+0xca>
	printf("\nSEND:");
	for(i=0; i<char_stream_send->length; i++)
		printf(" 0x%x \n",char_stream_send->pChar[i]);

	tx_len = char_stream_send->length;
	char_send = char_stream_send->pChar;
    30a0:	f7 01       	movw	r30, r14
    30a2:	40 81       	ld	r20, Z
    30a4:	51 81       	ldd	r21, Z+1	; 0x01

	if (NULL_PTR != char_stream_recv)
    30a6:	01 15       	cp	r16, r1
    30a8:	11 05       	cpc	r17, r1
    30aa:	89 f7       	brne	.-30     	; 0x308e <Serialize_SPI+0x166>
	int i;
	printf("\nSEND:");
	for(i=0; i<char_stream_send->length; i++)
		printf(" 0x%x \n",char_stream_send->pChar[i]);

	tx_len = char_stream_send->length;
    30ac:	20 e0       	ldi	r18, 0x00	; 0
    30ae:	30 e0       	ldi	r19, 0x00	; 0
    30b0:	e8 cf       	rjmp	.-48     	; 0x3082 <Serialize_SPI+0x15a>
printf("\nREC:");
for(i=0; i<char_stream_recv->length; i++)
printf(" 0x%x \n",char_stream_recv->pChar[i]);

	return RetSpiSuccess;
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	df 91       	pop	r29
    30b6:	cf 91       	pop	r28
    30b8:	1f 91       	pop	r17
    30ba:	0f 91       	pop	r16
    30bc:	ff 90       	pop	r15
    30be:	ef 90       	pop	r14
    30c0:	df 90       	pop	r13
    30c2:	cf 90       	pop	r12
    30c4:	bf 90       	pop	r11
    30c6:	af 90       	pop	r10
    30c8:	9f 90       	pop	r9
    30ca:	8f 90       	pop	r8
    30cc:	08 95       	ret

000030ce <TWI_Init>:
/*************************************************************************//**
  @brief Initializes the 2-wire Serial Interface as a master
  @param[in] freq SCL frequency (Do not exceed 400kHz)
  @return Status (@c 0 on failure, nonzero otherwise)
*****************************************************************************/
char TWI_Init(unsigned long freq){
    30ce:	9b 01       	movw	r18, r22
    30d0:	ac 01       	movw	r20, r24
	//printf("TWI_Init");
	TWSR=0x00;
    30d2:	10 92 b9 00 	sts	0x00B9, r1
	TWBR=(unsigned char)(((F_CPU/freq)-16UL)/8UL); //Compute settings value and set frequency
    30d6:	60 e0       	ldi	r22, 0x00	; 0
    30d8:	74 e2       	ldi	r23, 0x24	; 36
    30da:	84 ef       	ldi	r24, 0xF4	; 244
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__udivmodsi4>
    30e2:	da 01       	movw	r26, r20
    30e4:	c9 01       	movw	r24, r18
    30e6:	40 97       	sbiw	r24, 0x10	; 16
    30e8:	a1 09       	sbc	r26, r1
    30ea:	b1 09       	sbc	r27, r1
    30ec:	68 94       	set
    30ee:	12 f8       	bld	r1, 2
    30f0:	b6 95       	lsr	r27
    30f2:	a7 95       	ror	r26
    30f4:	97 95       	ror	r25
    30f6:	87 95       	ror	r24
    30f8:	16 94       	lsr	r1
    30fa:	d1 f7       	brne	.-12     	; 0x30f0 <TWI_Init+0x22>
    30fc:	80 93 b8 00 	sts	0x00B8, r24
	TWCR=(1 << TWEN);
    3100:	84 e0       	ldi	r24, 0x04	; 4
    3102:	80 93 bc 00 	sts	0x00BC, r24
	
	//TWAR=0; //Disable slave mode
	
	return 1; //May want to actually check for success here
}
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	08 95       	ret

0000310a <TWI_WriteByte>:
  @param[in] data byte to send
  @return Status code, TWI_SENT_ACK or TWI_SENT_NACK on success
*****************************************************************************/
char TWI_WriteByte(unsigned char data){
	//printf("TWI_WriteByte");
	TWDR = data; //Stage the data to send
    310a:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
    310e:	84 e8       	ldi	r24, 0x84	; 132
    3110:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);//Send the data
    3114:	ec eb       	ldi	r30, 0xBC	; 188
    3116:	f0 e0       	ldi	r31, 0x00	; 0
    3118:	80 81       	ld	r24, Z
    311a:	88 23       	and	r24, r24
    311c:	ec f7       	brge	.-6      	; 0x3118 <TWI_WriteByte+0xe>
	
	return TWSR&TWSR_MASK;//Return the status code
    311e:	80 91 b9 00 	lds	r24, 0x00B9
}
    3122:	88 7f       	andi	r24, 0xF8	; 248
    3124:	08 95       	ret

00003126 <TWI_BeginWrite>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAW_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginWrite(unsigned char address){
	//printf("TWI_BeginWrite");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
    3126:	94 ee       	ldi	r25, 0xE4	; 228
    3128:	90 93 bc 00 	sts	0x00BC, r25
	int i=0;
	while ((TWCR & (1<<TWINT)) == 0);
    312c:	ec eb       	ldi	r30, 0xBC	; 188
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	90 81       	ld	r25, Z
    3132:	99 23       	and	r25, r25
    3134:	ec f7       	brge	.-6      	; 0x3130 <TWI_BeginWrite+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3136:	ef e9       	ldi	r30, 0x9F	; 159
    3138:	ff e0       	ldi	r31, 0x0F	; 15
    313a:	31 97       	sbiw	r30, 0x01	; 1
    313c:	f1 f7       	brne	.-4      	; 0x313a <TWI_BeginWrite+0x14>
    313e:	00 c0       	rjmp	.+0      	; 0x3140 <TWI_BeginWrite+0x1a>
    3140:	00 00       	nop
	_delay_ms(1);
	char stat = (TWSR & TWSR_MASK);
    3142:	90 91 b9 00 	lds	r25, 0x00B9
    3146:	98 7f       	andi	r25, 0xF8	; 248
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
    3148:	98 30       	cpi	r25, 0x08	; 8
    314a:	31 f0       	breq	.+12     	; 0x3158 <TWI_BeginWrite+0x32>
    314c:	90 31       	cpi	r25, 0x10	; 16
    314e:	21 f0       	breq	.+8      	; 0x3158 <TWI_BeginWrite+0x32>
    3150:	80 91 b9 00 	lds	r24, 0x00B9
    3154:	88 7f       	andi	r24, 0xF8	; 248
    3156:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) & SLAW_MASK); //reset bit 0 to send a write bit, send
    3158:	88 0f       	add	r24, r24
    315a:	d7 cf       	rjmp	.-82     	; 0x310a <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	return stat;//Return the status code
}
    315c:	08 95       	ret

0000315e <TWI_BeginRead>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAR_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginRead(unsigned char address){
	//printf("TWI_BeginRead");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
    315e:	94 ee       	ldi	r25, 0xE4	; 228
    3160:	90 93 bc 00 	sts	0x00BC, r25
	while ((TWCR & (1<<TWINT)) == 0);
    3164:	ec eb       	ldi	r30, 0xBC	; 188
    3166:	f0 e0       	ldi	r31, 0x00	; 0
    3168:	90 81       	ld	r25, Z
    316a:	99 23       	and	r25, r25
    316c:	ec f7       	brge	.-6      	; 0x3168 <TWI_BeginRead+0xa>
	
	char stat = (TWSR & TWSR_MASK);
    316e:	90 91 b9 00 	lds	r25, 0x00B9
    3172:	98 7f       	andi	r25, 0xF8	; 248
	//printf("0x%1x",(unsigned)stat);
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
    3174:	98 30       	cpi	r25, 0x08	; 8
    3176:	31 f0       	breq	.+12     	; 0x3184 <TWI_BeginRead+0x26>
    3178:	90 31       	cpi	r25, 0x10	; 16
    317a:	21 f0       	breq	.+8      	; 0x3184 <TWI_BeginRead+0x26>
    317c:	80 91 b9 00 	lds	r24, 0x00B9
    3180:	88 7f       	andi	r24, 0xF8	; 248
    3182:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) | SLAR_MASK); //set bit 0 to send a read bit and send it
    3184:	88 0f       	add	r24, r24
    3186:	81 60       	ori	r24, 0x01	; 1
    3188:	c0 cf       	rjmp	.-128    	; 0x310a <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	
	return stat;//Return the status code
}
    318a:	08 95       	ret

0000318c <TWI_ReadAck>:
/*************************************************************************//**
  @brief Receives a byte over TWI and returns an ACK
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_ACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadAck(unsigned char *data){
    318c:	dc 01       	movw	r26, r24
	//printf("TWI_ReadAck");
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Start receiving, ending with an ACK
    318e:	84 ec       	ldi	r24, 0xC4	; 196
    3190:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);
    3194:	ec eb       	ldi	r30, 0xBC	; 188
    3196:	f0 e0       	ldi	r31, 0x00	; 0
    3198:	90 81       	ld	r25, Z
    319a:	99 23       	and	r25, r25
    319c:	ec f7       	brge	.-6      	; 0x3198 <TWI_ReadAck+0xc>
	*data=TWDR; //Store the data
    319e:	80 91 bb 00 	lds	r24, 0x00BB
    31a2:	8c 93       	st	X, r24
	
	return TWSR&TWSR_MASK;//Return the status code
    31a4:	80 91 b9 00 	lds	r24, 0x00B9
}
    31a8:	88 7f       	andi	r24, 0xF8	; 248
    31aa:	08 95       	ret

000031ac <TWI_ReadNack>:
/*************************************************************************//**
  @brief Receives a byte over TWI and returns a NACK
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_NACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadNack(unsigned char *data){
    31ac:	dc 01       	movw	r26, r24
	//printf("TWI_ReadNack");
	TWCR = (1<<TWINT)|(1<<TWEN); //Start receiving, ending with a NACK
    31ae:	84 e8       	ldi	r24, 0x84	; 132
    31b0:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);
    31b4:	ec eb       	ldi	r30, 0xBC	; 188
    31b6:	f0 e0       	ldi	r31, 0x00	; 0
    31b8:	90 81       	ld	r25, Z
    31ba:	99 23       	and	r25, r25
    31bc:	ec f7       	brge	.-6      	; 0x31b8 <TWI_ReadNack+0xc>
	*data=TWDR; //Store the data
    31be:	80 91 bb 00 	lds	r24, 0x00BB
    31c2:	8c 93       	st	X, r24
	
	return TWSR&TWSR_MASK;//Return the status code
    31c4:	80 91 b9 00 	lds	r24, 0x00B9
}
    31c8:	88 7f       	andi	r24, 0xF8	; 248
    31ca:	08 95       	ret

000031cc <TWI_Stop>:
  @brief Sends a Stop bit, be sure to send a Start bit before future interactions on the bus
  @return Status code, should always be nonzero
*****************************************************************************/
char TWI_Stop(void){
	//printf("TWI_Stop");
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    31cc:	84 e9       	ldi	r24, 0x94	; 148
    31ce:	80 93 bc 00 	sts	0x00BC, r24
	return 1;
}
    31d2:	81 e0       	ldi	r24, 0x01	; 1
    31d4:	08 95       	ret

000031d6 <TWI_Read>:
  @param[in] amount Number of bytes to recieve
  @param[in] whether or not to send an ACK on the last byte, sends NACK if false
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
    31d6:	9f 92       	push	r9
    31d8:	af 92       	push	r10
    31da:	bf 92       	push	r11
    31dc:	cf 92       	push	r12
    31de:	df 92       	push	r13
    31e0:	ef 92       	push	r14
    31e2:	ff 92       	push	r15
    31e4:	0f 93       	push	r16
    31e6:	1f 93       	push	r17
    31e8:	cf 93       	push	r28
    31ea:	df 93       	push	r29
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
    31ec:	16 16       	cp	r1, r22
    31ee:	17 06       	cpc	r1, r23
    31f0:	fc f4       	brge	.+62     	; 0x3230 <TWI_Read+0x5a>
    31f2:	94 2e       	mov	r9, r20
    31f4:	8b 01       	movw	r16, r22
    31f6:	7c 01       	movw	r14, r24
    31f8:	c0 e0       	ldi	r28, 0x00	; 0
    31fa:	d0 e0       	ldi	r29, 0x00	; 0
		if((ack==false) && ((amount-1)==i)){
    31fc:	6b 01       	movw	r12, r22
    31fe:	81 e0       	ldi	r24, 0x01	; 1
    3200:	c8 1a       	sub	r12, r24
    3202:	d1 08       	sbc	r13, r1
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
    3204:	57 01       	movw	r10, r14
    3206:	ac 0c       	add	r10, r12
    3208:	bd 1c       	adc	r11, r13
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
		if((ack==false) && ((amount-1)==i)){
    320a:	91 10       	cpse	r9, r1
    320c:	06 c0       	rjmp	.+12     	; 0x321a <TWI_Read+0x44>
    320e:	cc 16       	cp	r12, r28
    3210:	dd 06       	cpc	r13, r29
    3212:	19 f4       	brne	.+6      	; 0x321a <TWI_Read+0x44>
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
    3214:	c5 01       	movw	r24, r10
    3216:	ca df       	rcall	.-108    	; 0x31ac <TWI_ReadNack>
    3218:	04 c0       	rjmp	.+8      	; 0x3222 <TWI_Read+0x4c>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}else{
			status=TWI_ReadAck(&data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
    321a:	c7 01       	movw	r24, r14
    321c:	8c 0f       	add	r24, r28
    321e:	9d 1f       	adc	r25, r29
    3220:	b5 df       	rcall	.-150    	; 0x318c <TWI_ReadAck>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}
		//printf("A");
		if(status!=TWI_REC_ACK)return status; //If NACK was selected, returning here is fine since the loop is already ending
    3222:	80 35       	cpi	r24, 0x50	; 80
    3224:	31 f4       	brne	.+12     	; 0x3232 <TWI_Read+0x5c>
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
    3226:	21 96       	adiw	r28, 0x01	; 1
    3228:	c0 17       	cp	r28, r16
    322a:	d1 07       	cpc	r29, r17
    322c:	71 f7       	brne	.-36     	; 0x320a <TWI_Read+0x34>
    322e:	01 c0       	rjmp	.+2      	; 0x3232 <TWI_Read+0x5c>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
    3230:	80 e0       	ldi	r24, 0x00	; 0
		//will return if something goes wrong partway through
		//printf("B");
	}
	//printf("0x%1x",(unsigned)status);
	return status;
}
    3232:	df 91       	pop	r29
    3234:	cf 91       	pop	r28
    3236:	1f 91       	pop	r17
    3238:	0f 91       	pop	r16
    323a:	ff 90       	pop	r15
    323c:	ef 90       	pop	r14
    323e:	df 90       	pop	r13
    3240:	cf 90       	pop	r12
    3242:	bf 90       	pop	r11
    3244:	af 90       	pop	r10
    3246:	9f 90       	pop	r9
    3248:	08 95       	ret

0000324a <TWI_Write>:
  @param[in] *data Pointer to an array of bytes to send
  @param[in] amount Number of bytes to send
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
    324a:	0f 93       	push	r16
    324c:	1f 93       	push	r17
    324e:	cf 93       	push	r28
    3250:	df 93       	push	r29
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
    3252:	16 16       	cp	r1, r22
    3254:	17 06       	cpc	r1, r23
    3256:	64 f4       	brge	.+24     	; 0x3270 <TWI_Write+0x26>
    3258:	8c 01       	movw	r16, r24
    325a:	ec 01       	movw	r28, r24
    325c:	06 0f       	add	r16, r22
    325e:	17 1f       	adc	r17, r23
		status=TWI_WriteByte(data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
    3260:	89 91       	ld	r24, Y+
    3262:	53 df       	rcall	.-346    	; 0x310a <TWI_WriteByte>
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
    3264:	88 32       	cpi	r24, 0x28	; 40
    3266:	29 f4       	brne	.+10     	; 0x3272 <TWI_Write+0x28>
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
    3268:	c0 17       	cp	r28, r16
    326a:	d1 07       	cpc	r29, r17
    326c:	c9 f7       	brne	.-14     	; 0x3260 <TWI_Write+0x16>
    326e:	01 c0       	rjmp	.+2      	; 0x3272 <TWI_Write+0x28>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
    3270:	80 e0       	ldi	r24, 0x00	; 0
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
		//will return if something goes wrong partway through
	}
	return status;
    3272:	df 91       	pop	r29
    3274:	cf 91       	pop	r28
    3276:	1f 91       	pop	r17
    3278:	0f 91       	pop	r16
    327a:	08 95       	ret

0000327c <USART0_Init>:
  @brief Initializes USART0 in asynchronous UART mode, 8 bit data, 1 stop bit
  @param[in] desired baud rate (configuration values computed using F_CPU)
*****************************************************************************/
void USART0_Init(unsigned long baud){
	
	stdout = &USART0_stdout; //make stdout print to USART0
    327c:	26 e6       	ldi	r18, 0x66	; 102
    327e:	32 e0       	ldi	r19, 0x02	; 2
    3280:	30 93 b1 0d 	sts	0x0DB1, r19
    3284:	20 93 b0 0d 	sts	0x0DB0, r18
	
	//Compute UBRR for baudrate setting
	unsigned short ubrr=(unsigned short)((F_CPU/(baud*16UL))-1);
    3288:	dc 01       	movw	r26, r24
    328a:	cb 01       	movw	r24, r22
    328c:	88 0f       	add	r24, r24
    328e:	99 1f       	adc	r25, r25
    3290:	aa 1f       	adc	r26, r26
    3292:	bb 1f       	adc	r27, r27
    3294:	88 0f       	add	r24, r24
    3296:	99 1f       	adc	r25, r25
    3298:	aa 1f       	adc	r26, r26
    329a:	bb 1f       	adc	r27, r27
    329c:	9c 01       	movw	r18, r24
    329e:	ad 01       	movw	r20, r26
    32a0:	22 0f       	add	r18, r18
    32a2:	33 1f       	adc	r19, r19
    32a4:	44 1f       	adc	r20, r20
    32a6:	55 1f       	adc	r21, r21
    32a8:	22 0f       	add	r18, r18
    32aa:	33 1f       	adc	r19, r19
    32ac:	44 1f       	adc	r20, r20
    32ae:	55 1f       	adc	r21, r21
    32b0:	60 e0       	ldi	r22, 0x00	; 0
    32b2:	74 e2       	ldi	r23, 0x24	; 36
    32b4:	84 ef       	ldi	r24, 0xF4	; 244
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	0e 94 ea 2d 	call	0x5bd4	; 0x5bd4 <__udivmodsi4>
    32bc:	21 50       	subi	r18, 0x01	; 1
    32be:	31 09       	sbc	r19, r1
	
	//Set BAUD rate.
	UBRR0H = (unsigned char) (ubrr >> 8);
    32c0:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) ubrr;
    32c4:	20 93 c4 00 	sts	0x00C4, r18
	/*Set frame format. 8 data bit(settings bits UCSZ00 and UCSZ01  UCSR0B), 1 stop bit(by default and need not to be worried about). 
	The UCSZ01:0 bits combined with the UCSZ02 bit in UCSR0B sets the number of data
	bits (Character Size) in the frame that the Receiver and Transmitter use. 
	If a change on frame format is needed, make sure to modify UCSR0B register above accordingly.
	See datasheet pg. 390.*/
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
    32c8:	86 e0       	ldi	r24, 0x06	; 6
    32ca:	80 93 c2 00 	sts	0x00C2, r24
	
	//Enable receiver and transmitter. Enable the USART Receive Complete interrupt(RXCIE).
	//UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0));
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);//Enable RX/TX, no interrupts
    32ce:	88 e1       	ldi	r24, 0x18	; 24
    32d0:	80 93 c1 00 	sts	0x00C1, r24
    32d4:	08 95       	ret

000032d6 <USART0_Transmit>:
Function contains busy loops for simplicity in debugging. Not production code.
  @brief Transmits a byte via USART0
  @param[in] data byte to be transmitted
*****************************************************************************/
void USART0_Transmit(unsigned char data){
	while(!(UCSR0A & (1 << UDRE0))); //Wait for the empty transmit buffer. (Waiting UDR0 to be empty.)
    32d6:	e0 ec       	ldi	r30, 0xC0	; 192
    32d8:	f0 e0       	ldi	r31, 0x00	; 0
    32da:	90 81       	ld	r25, Z
    32dc:	95 ff       	sbrs	r25, 5
    32de:	fd cf       	rjmp	.-6      	; 0x32da <USART0_Transmit+0x4>
		UDR0 = data;			//store the data in the USART Data Register
    32e0:	80 93 c6 00 	sts	0x00C6, r24
    32e4:	08 95       	ret

000032e6 <USART0_putchar_printf>:
  @brief Called when stdout is being printed to USART0 (this is set up at runtime)
  @param[in] var byte to transmit
  @param[in/out] *stream Pointer to a stdio.h FILE io stream
  @return Status
*****************************************************************************/
int USART0_putchar_printf(char var, FILE *stream) {
    32e6:	cf 93       	push	r28
    32e8:	c8 2f       	mov	r28, r24
	if (var == '\n') USART0_Transmit('\r');
    32ea:	8a 30       	cpi	r24, 0x0A	; 10
    32ec:	11 f4       	brne	.+4      	; 0x32f2 <USART0_putchar_printf+0xc>
    32ee:	8d e0       	ldi	r24, 0x0D	; 13
    32f0:	f2 df       	rcall	.-28     	; 0x32d6 <USART0_Transmit>
	USART0_Transmit(var);
    32f2:	8c 2f       	mov	r24, r28
    32f4:	f0 df       	rcall	.-32     	; 0x32d6 <USART0_Transmit>
	return 0;
}
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	cf 91       	pop	r28
    32fc:	08 95       	ret

000032fe <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
    32fe:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    3300:	0f b6       	in	r0, 0x3f	; 63
    3302:	f8 94       	cli
    3304:	a8 95       	wdr
    3306:	80 91 60 00 	lds	r24, 0x0060
    330a:	88 61       	ori	r24, 0x18	; 24
    330c:	80 93 60 00 	sts	0x0060, r24
    3310:	10 92 60 00 	sts	0x0060, r1
    3314:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
    3316:	e1 e6       	ldi	r30, 0x61	; 97
    3318:	f0 e0       	ldi	r31, 0x00	; 0
    331a:	80 e8       	ldi	r24, 0x80	; 128
    331c:	80 83       	st	Z, r24
  CLKPR = 0;
    331e:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
    3320:	78 94       	sei

  HAL_TimerInit();
    3322:	01 c0       	rjmp	.+2      	; 0x3326 <HAL_TimerInit>
    3324:	08 95       	ret

00003326 <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
    3326:	10 92 81 0d 	sts	0x0D81, r1
    332a:	80 e2       	ldi	r24, 0x20	; 32
    332c:	9e e4       	ldi	r25, 0x4E	; 78
    332e:	90 93 a9 00 	sts	0x00A9, r25
    3332:	80 93 a8 00 	sts	0x00A8, r24
    3336:	e1 ea       	ldi	r30, 0xA1	; 161
    3338:	f0 e0       	ldi	r31, 0x00	; 0
    333a:	88 e0       	ldi	r24, 0x08	; 8
    333c:	80 83       	st	Z, r24
    333e:	80 81       	ld	r24, Z
    3340:	82 60       	ori	r24, 0x02	; 2
    3342:	80 83       	st	Z, r24
    3344:	e2 e7       	ldi	r30, 0x72	; 114
    3346:	f0 e0       	ldi	r31, 0x00	; 0
    3348:	80 81       	ld	r24, Z
    334a:	82 60       	ori	r24, 0x02	; 2
    334c:	80 83       	st	Z, r24
    334e:	08 95       	ret

00003350 <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    3350:	1f 92       	push	r1
    3352:	0f 92       	push	r0
    3354:	0f b6       	in	r0, 0x3f	; 63
    3356:	0f 92       	push	r0
    3358:	11 24       	eor	r1, r1
    335a:	8f 93       	push	r24
  halTimerIrqCount++;
    335c:	80 91 81 0d 	lds	r24, 0x0D81
    3360:	8f 5f       	subi	r24, 0xFF	; 255
    3362:	80 93 81 0d 	sts	0x0D81, r24
}
    3366:	8f 91       	pop	r24
    3368:	0f 90       	pop	r0
    336a:	0f be       	out	0x3f, r0	; 63
    336c:	0f 90       	pop	r0
    336e:	1f 90       	pop	r1
    3370:	18 95       	reti

00003372 <NWK_Init>:
  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
  nwkIb.panId = panId;
  PHY_SetPanId(panId);
    3372:	e2 e8       	ldi	r30, 0x82	; 130
    3374:	fd e0       	ldi	r31, 0x0D	; 13
    3376:	14 82       	std	Z+4, r1	; 0x04
    3378:	15 82       	std	Z+5, r1	; 0x05
    337a:	11 82       	std	Z+1, r1	; 0x01
    337c:	10 82       	st	Z, r1
    337e:	17 a2       	std	Z+39, r1	; 0x27
    3380:	16 a2       	std	Z+38, r1	; 0x26
    3382:	e8 e8       	ldi	r30, 0x88	; 136
    3384:	fd e0       	ldi	r31, 0x0D	; 13
    3386:	88 ea       	ldi	r24, 0xA8	; 168
    3388:	9d e0       	ldi	r25, 0x0D	; 13
    338a:	11 92       	st	Z+, r1
    338c:	11 92       	st	Z+, r1
    338e:	e8 17       	cp	r30, r24
    3390:	f9 07       	cpc	r31, r25
    3392:	d9 f7       	brne	.-10     	; 0x338a <NWK_Init+0x18>
    3394:	e3 d0       	rcall	.+454    	; 0x355c <nwkTxInit>
    3396:	67 d0       	rcall	.+206    	; 0x3466 <nwkRxInit>
    3398:	10 d0       	rcall	.+32     	; 0x33ba <nwkFrameInit>
    339a:	0a c0       	rjmp	.+20     	; 0x33b0 <nwkDataReqInit>
    339c:	08 95       	ret

0000339e <NWK_OpenEndpoint>:
  @param[in] id Endpoint index (1-15)
  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
  nwkIb.endpoint[id] = handler;
    339e:	e8 2f       	mov	r30, r24
    33a0:	f0 e0       	ldi	r31, 0x00	; 0
    33a2:	ee 0f       	add	r30, r30
    33a4:	ff 1f       	adc	r31, r31
    33a6:	e8 57       	subi	r30, 0x78	; 120
    33a8:	f2 4f       	sbci	r31, 0xF2	; 242
    33aa:	71 83       	std	Z+1, r23	; 0x01
    33ac:	60 83       	st	Z, r22
    33ae:	08 95       	ret

000033b0 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
    33b0:	10 92 87 07 	sts	0x0787, r1
    33b4:	10 92 86 07 	sts	0x0786, r1
    33b8:	08 95       	ret

000033ba <nwkFrameInit>:
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
  nwkIb.lock--;
    33ba:	10 92 88 07 	sts	0x0788, r1
    33be:	10 92 11 08 	sts	0x0811, r1
    33c2:	10 92 9a 08 	sts	0x089A, r1
    33c6:	10 92 23 09 	sts	0x0923, r1
    33ca:	10 92 ac 09 	sts	0x09AC, r1
    33ce:	08 95       	ret

000033d0 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    33d0:	00 97       	sbiw	r24, 0x00	; 0
    33d2:	41 f0       	breq	.+16     	; 0x33e4 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
    33d4:	fc 01       	movw	r30, r24
    33d6:	e7 57       	subi	r30, 0x77	; 119
    33d8:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    33da:	8a e0       	ldi	r24, 0x0A	; 10
    33dc:	e5 33       	cpi	r30, 0x35	; 53
    33de:	f8 07       	cpc	r31, r24
    33e0:	18 f0       	brcs	.+6      	; 0x33e8 <nwkFrameNext+0x18>
    33e2:	15 c0       	rjmp	.+42     	; 0x340e <nwkFrameNext+0x3e>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    33e4:	e8 e8       	ldi	r30, 0x88	; 136
    33e6:	f7 e0       	ldi	r31, 0x07	; 7
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    33e8:	80 81       	ld	r24, Z
    33ea:	88 23       	and	r24, r24
    33ec:	39 f0       	breq	.+14     	; 0x33fc <nwkFrameNext+0x2c>
    33ee:	03 c0       	rjmp	.+6      	; 0x33f6 <nwkFrameNext+0x26>
    33f0:	80 81       	ld	r24, Z
    33f2:	88 23       	and	r24, r24
    33f4:	19 f0       	breq	.+6      	; 0x33fc <nwkFrameNext+0x2c>
      return frame;
    33f6:	8e 2f       	mov	r24, r30
    33f8:	9f 2f       	mov	r25, r31
    33fa:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    33fc:	e7 57       	subi	r30, 0x77	; 119
    33fe:	ff 4f       	sbci	r31, 0xFF	; 255
    3400:	8a e0       	ldi	r24, 0x0A	; 10
    3402:	e5 33       	cpi	r30, 0x35	; 53
    3404:	f8 07       	cpc	r31, r24
    3406:	a0 f3       	brcs	.-24     	; 0x33f0 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    3408:	80 e0       	ldi	r24, 0x00	; 0
    340a:	90 e0       	ldi	r25, 0x00	; 0
    340c:	08 95       	ret
    340e:	80 e0       	ldi	r24, 0x00	; 0
    3410:	90 e0       	ldi	r25, 0x00	; 0
}
    3412:	08 95       	ret

00003414 <nwkRxServiceDataInd>:
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    3414:	dc 01       	movw	r26, r24
    3416:	19 96       	adiw	r26, 0x09	; 9
    3418:	2c 91       	ld	r18, X
    341a:	19 97       	sbiw	r26, 0x09	; 9
    341c:	22 23       	and	r18, r18
    341e:	49 f0       	breq	.+18     	; 0x3432 <nwkRxServiceDataInd+0x1e>
    return false;

  switch (ind->data[0])
    3420:	17 96       	adiw	r26, 0x07	; 7
    3422:	ed 91       	ld	r30, X+
    3424:	fc 91       	ld	r31, X
    3426:	18 97       	sbiw	r26, 0x08	; 8
    3428:	20 81       	ld	r18, Z
    342a:	21 11       	cpse	r18, r1
    342c:	04 c0       	rjmp	.+8      	; 0x3436 <nwkRxServiceDataInd+0x22>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
    342e:	b9 c0       	rjmp	.+370    	; 0x35a2 <nwkTxAckReceived>
    3430:	08 95       	ret
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    return false;
    3432:	80 e0       	ldi	r24, 0x00	; 0
    3434:	08 95       	ret
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
    3436:	80 e0       	ldi	r24, 0x00	; 0
  }
}
    3438:	08 95       	ret

0000343a <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    343a:	bc 01       	movw	r22, r24
    343c:	e6 e4       	ldi	r30, 0x46	; 70
    343e:	fa e0       	ldi	r31, 0x0A	; 10
    3440:	28 e7       	ldi	r18, 0x78	; 120
    3442:	3a e0       	ldi	r19, 0x0A	; 10
  bool restart = false;
    3444:	40 e0       	ldi	r20, 0x00	; 0
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    3446:	51 e0       	ldi	r21, 0x01	; 1
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    3448:	90 81       	ld	r25, Z
    344a:	99 23       	and	r25, r25
    344c:	19 f0       	breq	.+6      	; 0x3454 <nwkRxDuplicateRejectionTimerHandler+0x1a>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
    344e:	91 50       	subi	r25, 0x01	; 1
    3450:	90 83       	st	Z, r25
      restart = true;
    3452:	45 2f       	mov	r20, r21
    3454:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    3456:	e2 17       	cp	r30, r18
    3458:	f3 07       	cpc	r31, r19
    345a:	b1 f7       	brne	.-20     	; 0x3448 <nwkRxDuplicateRejectionTimerHandler+0xe>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
    345c:	44 23       	and	r20, r20
    345e:	11 f0       	breq	.+4      	; 0x3464 <nwkRxDuplicateRejectionTimerHandler+0x2a>
    3460:	cb 01       	movw	r24, r22
    SYS_TimerStart(timer);
    3462:	2f c4       	rjmp	.+2142   	; 0x3cc2 <SYS_TimerStart>
    3464:	08 95       	ret

00003466 <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    3466:	e6 e4       	ldi	r30, 0x46	; 70
    3468:	fa e0       	ldi	r31, 0x0A	; 10
    346a:	88 e7       	ldi	r24, 0x78	; 120
    346c:	9a e0       	ldi	r25, 0x0A	; 10
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
    346e:	10 82       	st	Z, r1
    3470:	35 96       	adiw	r30, 0x05	; 5
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    3472:	e8 17       	cp	r30, r24
    3474:	f9 07       	cpc	r31, r25
    3476:	d9 f7       	brne	.-10     	; 0x346e <nwkRxInit+0x8>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    3478:	e5 e3       	ldi	r30, 0x35	; 53
    347a:	fa e0       	ldi	r31, 0x0A	; 10
    347c:	84 e6       	ldi	r24, 0x64	; 100
    347e:	90 e0       	ldi	r25, 0x00	; 0
    3480:	a0 e0       	ldi	r26, 0x00	; 0
    3482:	b0 e0       	ldi	r27, 0x00	; 0
    3484:	86 83       	std	Z+6, r24	; 0x06
    3486:	97 83       	std	Z+7, r25	; 0x07
    3488:	a0 87       	std	Z+8, r26	; 0x08
    348a:	b1 87       	std	Z+9, r27	; 0x09
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    348c:	12 86       	std	Z+10, r1	; 0x0a
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
    348e:	8d e1       	ldi	r24, 0x1D	; 29
    3490:	9a e1       	ldi	r25, 0x1A	; 26
    3492:	94 87       	std	Z+12, r25	; 0x0c
    3494:	83 87       	std	Z+11, r24	; 0x0b

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
    3496:	6a e0       	ldi	r22, 0x0A	; 10
    3498:	7a e1       	ldi	r23, 0x1A	; 26
    349a:	80 e0       	ldi	r24, 0x00	; 0
    349c:	80 cf       	rjmp	.-256    	; 0x339e <NWK_OpenEndpoint>
    349e:	08 95       	ret

000034a0 <nwkTxDelayTimerHandler>:
  newFrame->header.macFcf = 0x8841;
  newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
  newFrame->header.macDstPanId = frame->header.macDstPanId;
  newFrame->header.macSrcAddr = nwkIb.addr;
  newFrame->header.macSeq = ++nwkIb.macSeqNum;
}
    34a0:	ef 92       	push	r14
    34a2:	ff 92       	push	r15
    34a4:	0f 93       	push	r16
    34a6:	1f 93       	push	r17
    34a8:	cf 93       	push	r28
    34aa:	7c 01       	movw	r14, r24
    34ac:	10 e0       	ldi	r17, 0x00	; 0
    34ae:	80 e0       	ldi	r24, 0x00	; 0
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	01 e0       	ldi	r16, 0x01	; 1
    34b4:	c3 e1       	ldi	r28, 0x13	; 19
    34b6:	13 c0       	rjmp	.+38     	; 0x34de <nwkTxDelayTimerHandler+0x3e>
    34b8:	fc 01       	movw	r30, r24
    34ba:	20 81       	ld	r18, Z
    34bc:	21 31       	cpi	r18, 0x11	; 17
    34be:	79 f4       	brne	.+30     	; 0x34de <nwkTxDelayTimerHandler+0x3e>
    34c0:	ec 57       	subi	r30, 0x7C	; 124
    34c2:	ff 4f       	sbci	r31, 0xFF	; 255
    34c4:	20 81       	ld	r18, Z
    34c6:	31 81       	ldd	r19, Z+1	; 0x01
    34c8:	21 50       	subi	r18, 0x01	; 1
    34ca:	31 09       	sbc	r19, r1
    34cc:	31 83       	std	Z+1, r19	; 0x01
    34ce:	20 83       	st	Z, r18
    34d0:	23 2b       	or	r18, r19
    34d2:	21 f4       	brne	.+8      	; 0x34dc <nwkTxDelayTimerHandler+0x3c>
    34d4:	fc 01       	movw	r30, r24
    34d6:	c0 83       	st	Z, r28
    34d8:	10 2f       	mov	r17, r16
    34da:	01 c0       	rjmp	.+2      	; 0x34de <nwkTxDelayTimerHandler+0x3e>
    34dc:	10 2f       	mov	r17, r16
    34de:	78 df       	rcall	.-272    	; 0x33d0 <nwkFrameNext>
    34e0:	00 97       	sbiw	r24, 0x00	; 0
    34e2:	51 f7       	brne	.-44     	; 0x34b8 <nwkTxDelayTimerHandler+0x18>
    34e4:	11 23       	and	r17, r17
    34e6:	11 f0       	breq	.+4      	; 0x34ec <nwkTxDelayTimerHandler+0x4c>
    34e8:	c7 01       	movw	r24, r14
    34ea:	eb d3       	rcall	.+2006   	; 0x3cc2 <SYS_TimerStart>
    34ec:	cf 91       	pop	r28
    34ee:	1f 91       	pop	r17
    34f0:	0f 91       	pop	r16
    34f2:	ff 90       	pop	r15
    34f4:	ef 90       	pop	r14
    34f6:	08 95       	ret

000034f8 <nwkTxAckWaitTimerHandler>:
    34f8:	ef 92       	push	r14
    34fa:	ff 92       	push	r15
    34fc:	0f 93       	push	r16
    34fe:	1f 93       	push	r17
    3500:	cf 93       	push	r28
    3502:	df 93       	push	r29
    3504:	7c 01       	movw	r14, r24
    3506:	10 e0       	ldi	r17, 0x00	; 0
    3508:	80 e0       	ldi	r24, 0x00	; 0
    350a:	90 e0       	ldi	r25, 0x00	; 0
    350c:	01 e0       	ldi	r16, 0x01	; 1
    350e:	d7 e1       	ldi	r29, 0x17	; 23
    3510:	c0 e1       	ldi	r28, 0x10	; 16
    3512:	16 c0       	rjmp	.+44     	; 0x3540 <nwkTxAckWaitTimerHandler+0x48>
    3514:	fc 01       	movw	r30, r24
    3516:	20 81       	ld	r18, Z
    3518:	26 31       	cpi	r18, 0x16	; 22
    351a:	91 f4       	brne	.+36     	; 0x3540 <nwkTxAckWaitTimerHandler+0x48>
    351c:	ec 57       	subi	r30, 0x7C	; 124
    351e:	ff 4f       	sbci	r31, 0xFF	; 255
    3520:	20 81       	ld	r18, Z
    3522:	31 81       	ldd	r19, Z+1	; 0x01
    3524:	21 50       	subi	r18, 0x01	; 1
    3526:	31 09       	sbc	r19, r1
    3528:	31 83       	std	Z+1, r19	; 0x01
    352a:	20 83       	st	Z, r18
    352c:	23 2b       	or	r18, r19
    352e:	39 f4       	brne	.+14     	; 0x353e <nwkTxAckWaitTimerHandler+0x46>
    3530:	fc 01       	movw	r30, r24
    3532:	d0 83       	st	Z, r29
    3534:	ed 57       	subi	r30, 0x7D	; 125
    3536:	ff 4f       	sbci	r31, 0xFF	; 255
    3538:	c0 83       	st	Z, r28
    353a:	10 2f       	mov	r17, r16
    353c:	01 c0       	rjmp	.+2      	; 0x3540 <nwkTxAckWaitTimerHandler+0x48>
    353e:	10 2f       	mov	r17, r16
    3540:	47 df       	rcall	.-370    	; 0x33d0 <nwkFrameNext>
    3542:	00 97       	sbiw	r24, 0x00	; 0
    3544:	39 f7       	brne	.-50     	; 0x3514 <nwkTxAckWaitTimerHandler+0x1c>
    3546:	11 23       	and	r17, r17
    3548:	11 f0       	breq	.+4      	; 0x354e <nwkTxAckWaitTimerHandler+0x56>
    354a:	c7 01       	movw	r24, r14
    354c:	ba d3       	rcall	.+1908   	; 0x3cc2 <SYS_TimerStart>
    354e:	df 91       	pop	r29
    3550:	cf 91       	pop	r28
    3552:	1f 91       	pop	r17
    3554:	0f 91       	pop	r16
    3556:	ff 90       	pop	r15
    3558:	ef 90       	pop	r14
    355a:	08 95       	ret

0000355c <nwkTxInit>:
    355c:	10 92 8f 0a 	sts	0x0A8F, r1
    3560:	10 92 8e 0a 	sts	0x0A8E, r1
    3564:	e1 e8       	ldi	r30, 0x81	; 129
    3566:	fa e0       	ldi	r31, 0x0A	; 10
    3568:	82 e3       	ldi	r24, 0x32	; 50
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	a0 e0       	ldi	r26, 0x00	; 0
    356e:	b0 e0       	ldi	r27, 0x00	; 0
    3570:	86 83       	std	Z+6, r24	; 0x06
    3572:	97 83       	std	Z+7, r25	; 0x07
    3574:	a0 87       	std	Z+8, r26	; 0x08
    3576:	b1 87       	std	Z+9, r27	; 0x09
    3578:	12 86       	std	Z+10, r1	; 0x0a
    357a:	8c e7       	ldi	r24, 0x7C	; 124
    357c:	9a e1       	ldi	r25, 0x1A	; 26
    357e:	94 87       	std	Z+12, r25	; 0x0c
    3580:	83 87       	std	Z+11, r24	; 0x0b
    3582:	e4 e7       	ldi	r30, 0x74	; 116
    3584:	fa e0       	ldi	r31, 0x0A	; 10
    3586:	8a e0       	ldi	r24, 0x0A	; 10
    3588:	90 e0       	ldi	r25, 0x00	; 0
    358a:	a0 e0       	ldi	r26, 0x00	; 0
    358c:	b0 e0       	ldi	r27, 0x00	; 0
    358e:	86 83       	std	Z+6, r24	; 0x06
    3590:	97 83       	std	Z+7, r25	; 0x07
    3592:	a0 87       	std	Z+8, r26	; 0x08
    3594:	b1 87       	std	Z+9, r27	; 0x09
    3596:	12 86       	std	Z+10, r1	; 0x0a
    3598:	80 e5       	ldi	r24, 0x50	; 80
    359a:	9a e1       	ldi	r25, 0x1A	; 26
    359c:	94 87       	std	Z+12, r25	; 0x0c
    359e:	83 87       	std	Z+11, r24	; 0x0b
    35a0:	08 95       	ret

000035a2 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    35a2:	cf 93       	push	r28
    35a4:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    35a6:	fc 01       	movw	r30, r24
    35a8:	c7 81       	ldd	r28, Z+7	; 0x07
    35aa:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    35ac:	81 85       	ldd	r24, Z+9	; 0x09
    35ae:	83 30       	cpi	r24, 0x03	; 3
    35b0:	c1 f4       	brne	.+48     	; 0x35e2 <nwkTxAckReceived+0x40>
    35b2:	80 e0       	ldi	r24, 0x00	; 0
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	10 c0       	rjmp	.+32     	; 0x35d8 <nwkTxAckReceived+0x36>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
    35b8:	fc 01       	movw	r30, r24
    35ba:	20 81       	ld	r18, Z
    35bc:	26 31       	cpi	r18, 0x16	; 22
    35be:	61 f4       	brne	.+24     	; 0x35d8 <nwkTxAckReceived+0x36>
    35c0:	34 85       	ldd	r19, Z+12	; 0x0c
    35c2:	29 81       	ldd	r18, Y+1	; 0x01
    35c4:	32 13       	cpse	r19, r18
    35c6:	08 c0       	rjmp	.+16     	; 0x35d8 <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    35c8:	27 e1       	ldi	r18, 0x17	; 23
    35ca:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    35cc:	2a 81       	ldd	r18, Y+2	; 0x02
    35ce:	ea 57       	subi	r30, 0x7A	; 122
    35d0:	ff 4f       	sbci	r31, 0xFF	; 255
    35d2:	20 83       	st	Z, r18
      return true;
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	06 c0       	rjmp	.+12     	; 0x35e4 <nwkTxAckReceived+0x42>
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
    35d8:	fb de       	rcall	.-522    	; 0x33d0 <nwkFrameNext>
    35da:	00 97       	sbiw	r24, 0x00	; 0
    35dc:	69 f7       	brne	.-38     	; 0x35b8 <nwkTxAckReceived+0x16>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
    35de:	80 e0       	ldi	r24, 0x00	; 0
    35e0:	01 c0       	rjmp	.+2      	; 0x35e4 <nwkTxAckReceived+0x42>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
    35e2:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
    35e4:	df 91       	pop	r29
    35e6:	cf 91       	pop	r28
    35e8:	08 95       	ret

000035ea <phyTrxSetState>:
  phyTrxSetState(TRX_CMD_TRX_OFF);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  if (phyRxState)
    phyTrxSetState(TRX_CMD_RX_AACK_ON);
    35ea:	93 e0       	ldi	r25, 0x03	; 3
    35ec:	90 93 42 01 	sts	0x0142, r25
    35f0:	e1 e4       	ldi	r30, 0x41	; 65
    35f2:	f1 e0       	ldi	r31, 0x01	; 1
    35f4:	90 81       	ld	r25, Z
    35f6:	9f 71       	andi	r25, 0x1F	; 31
    35f8:	98 30       	cpi	r25, 0x08	; 8
    35fa:	e1 f7       	brne	.-8      	; 0x35f4 <phyTrxSetState+0xa>
    35fc:	80 93 42 01 	sts	0x0142, r24
    3600:	e1 e4       	ldi	r30, 0x41	; 65
    3602:	f1 e0       	ldi	r31, 0x01	; 1
    3604:	90 81       	ld	r25, Z
    3606:	9f 71       	andi	r25, 0x1F	; 31
    3608:	98 13       	cpse	r25, r24
    360a:	fc cf       	rjmp	.-8      	; 0x3604 <phyTrxSetState+0x1a>
    360c:	08 95       	ret

0000360e <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
    360e:	e9 e3       	ldi	r30, 0x39	; 57
    3610:	f1 e0       	ldi	r31, 0x01	; 1
    3612:	80 81       	ld	r24, Z
    3614:	81 60       	ori	r24, 0x01	; 1
    3616:	80 83       	st	Z, r24

  phyRxState = false;
    3618:	10 92 91 0a 	sts	0x0A91, r1
  phyBand = 0;
    361c:	10 92 90 0a 	sts	0x0A90, r1
  phyState = PHY_STATE_IDLE;
    3620:	81 e0       	ldi	r24, 0x01	; 1
    3622:	80 93 92 0a 	sts	0x0A92, r24

  phyTrxSetState(TRX_CMD_TRX_OFF);
    3626:	88 e0       	ldi	r24, 0x08	; 8
    3628:	e0 df       	rcall	.-64     	; 0x35ea <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
    362a:	8b ee       	ldi	r24, 0xEB	; 235
    362c:	80 93 56 01 	sts	0x0156, r24

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
    3630:	ec e4       	ldi	r30, 0x4C	; 76
    3632:	f1 e0       	ldi	r31, 0x01	; 1
    3634:	80 81       	ld	r24, Z
    3636:	80 68       	ori	r24, 0x80	; 128
    3638:	80 83       	st	Z, r24
    363a:	08 95       	ret

0000363c <sensor_handler>:

/*************************************************************************//**
  @brief sensor_handler function to decide the execution logic of a sensor according to its state, return 1 if it has some borrow time 
*****************************************************************************/
int sensor_handler( struct event *p )
{
    363c:	0f 93       	push	r16
    363e:	1f 93       	push	r17
    3640:	cf 93       	push	r28
    3642:	df 93       	push	r29
    3644:	ec 01       	movw	r28, r24
	int retNum;
	BaseSensor *sp;
	/* sanity check */
	if( p == EV_NULL )
    3646:	89 2b       	or	r24, r25
    3648:	59 f4       	brne	.+22     	; 0x3660 <sensor_handler+0x24>
	{
		#ifdef DEBUG
		printf("Null Event Error !!!");
    364a:	8c e8       	ldi	r24, 0x8C	; 140
    364c:	94 e0       	ldi	r25, 0x04	; 4
    364e:	9f 93       	push	r25
    3650:	8f 93       	push	r24
    3652:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
		#endif
		return 0;
    3656:	0f 90       	pop	r0
    3658:	0f 90       	pop	r0
    365a:	80 e0       	ldi	r24, 0x00	; 0
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	70 c0       	rjmp	.+224    	; 0x3740 <sensor_handler+0x104>
	}
	sp = ( BaseSensor * )( p->sp );
    3660:	08 89       	ldd	r16, Y+16	; 0x10
    3662:	19 89       	ldd	r17, Y+17	; 0x11

	#ifdef DEBUG
	// printf("cur_state = %d\n", p->cur_state);
	#endif
	switch( p->cur_state )
    3664:	98 8d       	ldd	r25, Y+24	; 0x18
    3666:	91 30       	cpi	r25, 0x01	; 1
    3668:	a9 f0       	breq	.+42     	; 0x3694 <sensor_handler+0x58>
    366a:	38 f0       	brcs	.+14     	; 0x367a <sensor_handler+0x3e>
    366c:	92 30       	cpi	r25, 0x02	; 2
    366e:	09 f4       	brne	.+2      	; 0x3672 <sensor_handler+0x36>
    3670:	4e c0       	rjmp	.+156    	; 0x370e <sensor_handler+0xd2>
    3672:	94 30       	cpi	r25, 0x04	; 4
    3674:	09 f4       	brne	.+2      	; 0x3678 <sensor_handler+0x3c>
    3676:	5a c0       	rjmp	.+180    	; 0x372c <sensor_handler+0xf0>
    3678:	61 c0       	rjmp	.+194    	; 0x373c <sensor_handler+0x100>
	{
		/* New : init first, if retNum is not 0 goto Oops state */
		case New :
		// the way to call init() is different than most other functions, since it is virtual function in BaseDevice .
		retNum = sp->abstract.device_vt->init( &(sp->abstract) );
    367a:	d8 01       	movw	r26, r16
    367c:	ed 91       	ld	r30, X+
    367e:	fc 91       	ld	r31, X
    3680:	02 80       	ldd	r0, Z+2	; 0x02
    3682:	f3 81       	ldd	r31, Z+3	; 0x03
    3684:	e0 2d       	mov	r30, r0
    3686:	c8 01       	movw	r24, r16
    3688:	19 95       	eicall
		if(retNum != 0)
		{
			p->cur_state = Oops;
		}
		p->cur_state = Ready;
    368a:	81 e0       	ldi	r24, 0x01	; 1
    368c:	88 8f       	std	Y+24, r24	; 0x18
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    368e:	80 e0       	ldi	r24, 0x00	; 0
    3690:	90 e0       	ldi	r25, 0x00	; 0
		if(retNum != 0)
		{
			p->cur_state = Oops;
		}
		p->cur_state = Ready;
		break;
    3692:	56 c0       	rjmp	.+172    	; 0x3740 <sensor_handler+0x104>
		
		
		
		/* Ready : ready to activate collection request, if retNum is not 0 goto Oops state */
		case Ready :
		retNum = sp->vmt->Request(p->sp);
    3694:	d8 01       	movw	r26, r16
    3696:	1c 96       	adiw	r26, 0x0c	; 12
    3698:	ed 91       	ld	r30, X+
    369a:	fc 91       	ld	r31, X
    369c:	1d 97       	sbiw	r26, 0x0d	; 13
    369e:	04 80       	ldd	r0, Z+4	; 0x04
    36a0:	f5 81       	ldd	r31, Z+5	; 0x05
    36a2:	e0 2d       	mov	r30, r0
    36a4:	c8 01       	movw	r24, r16
    36a6:	19 95       	eicall
		if ( retNum == -1 )
    36a8:	8f 3f       	cpi	r24, 0xFF	; 255
    36aa:	bf ef       	ldi	r27, 0xFF	; 255
    36ac:	9b 07       	cpc	r25, r27
    36ae:	29 f4       	brne	.+10     	; 0x36ba <sensor_handler+0x7e>
		{
			p->cur_state = Oops;
    36b0:	84 e0       	ldi	r24, 0x04	; 4
    36b2:	88 8f       	std	Y+24, r24	; 0x18
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    36b4:	80 e0       	ldi	r24, 0x00	; 0
    36b6:	90 e0       	ldi	r25, 0x00	; 0
    36b8:	43 c0       	rjmp	.+134    	; 0x3740 <sensor_handler+0x104>
		retNum = sp->vmt->Request(p->sp);
		if ( retNum == -1 )
		{
			p->cur_state = Oops;
		}
		else if( retNum == 0 )
    36ba:	00 97       	sbiw	r24, 0x00	; 0
    36bc:	81 f4       	brne	.+32     	; 0x36de <sensor_handler+0xa2>
		{
			p->cur_state = Ready;
    36be:	81 e0       	ldi	r24, 0x01	; 1
    36c0:	88 8f       	std	Y+24, r24	; 0x18
			sp->vmt->Collect(p->sp);
    36c2:	d8 01       	movw	r26, r16
    36c4:	1c 96       	adiw	r26, 0x0c	; 12
    36c6:	ed 91       	ld	r30, X+
    36c8:	fc 91       	ld	r31, X
    36ca:	1d 97       	sbiw	r26, 0x0d	; 13
    36cc:	06 80       	ldd	r0, Z+6	; 0x06
    36ce:	f7 81       	ldd	r31, Z+7	; 0x07
    36d0:	e0 2d       	mov	r30, r0
    36d2:	88 89       	ldd	r24, Y+16	; 0x10
    36d4:	99 89       	ldd	r25, Y+17	; 0x11
    36d6:	19 95       	eicall
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    36d8:	80 e0       	ldi	r24, 0x00	; 0
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	31 c0       	rjmp	.+98     	; 0x3740 <sensor_handler+0x104>
			// printf("data : %d\n", data);
			// #endif
		}
		else
		{
			p->cur_state = Running;
    36de:	22 e0       	ldi	r18, 0x02	; 2
    36e0:	28 8f       	std	Y+24, r18	; 0x18
			p->timeout = (int16_t) retNum;
    36e2:	09 2e       	mov	r0, r25
    36e4:	00 0c       	add	r0, r0
    36e6:	aa 0b       	sbc	r26, r26
    36e8:	bb 0b       	sbc	r27, r27
    36ea:	8c 83       	std	Y+4, r24	; 0x04
    36ec:	9d 83       	std	Y+5, r25	; 0x05
    36ee:	ae 83       	std	Y+6, r26	; 0x06
    36f0:	bf 83       	std	Y+7, r27	; 0x07
			p->borrow_timeout = (int16_t)  retNum;
    36f2:	8c 87       	std	Y+12, r24	; 0x0c
    36f4:	9d 87       	std	Y+13, r25	; 0x0d
    36f6:	ae 87       	std	Y+14, r26	; 0x0e
    36f8:	bf 87       	std	Y+15, r27	; 0x0f
			LL_POP( timeoutq );
    36fa:	80 91 1b 0d 	lds	r24, 0x0D1B
    36fe:	90 91 1c 0d 	lds	r25, 0x0D1C
    3702:	29 d3       	rcall	.+1618   	; 0x3d56 <ll_pop>
			insert_timeoutq_event( p );
    3704:	ce 01       	movw	r24, r28
    3706:	db d0       	rcall	.+438    	; 0x38be <insert_timeoutq_event>
			return 1;
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	90 e0       	ldi	r25, 0x00	; 0
    370c:	19 c0       	rjmp	.+50     	; 0x3740 <sensor_handler+0x104>
		
		
		/* Running : ready to pull data right away */
		case Running :
		//      data = p->sp->vmt->Collect();
		p->cur_state = Ready;
    370e:	81 e0       	ldi	r24, 0x01	; 1
    3710:	88 8f       	std	Y+24, r24	; 0x18
		p->sp->vmt->Collect(p->sp);
    3712:	d8 01       	movw	r26, r16
    3714:	1c 96       	adiw	r26, 0x0c	; 12
    3716:	ed 91       	ld	r30, X+
    3718:	fc 91       	ld	r31, X
    371a:	1d 97       	sbiw	r26, 0x0d	; 13
    371c:	06 80       	ldd	r0, Z+6	; 0x06
    371e:	f7 81       	ldd	r31, Z+7	; 0x07
    3720:	e0 2d       	mov	r30, r0
    3722:	c8 01       	movw	r24, r16
    3724:	19 95       	eicall
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    3726:	80 e0       	ldi	r24, 0x00	; 0
    3728:	90 e0       	ldi	r25, 0x00	; 0
		/* Running : ready to pull data right away */
		case Running :
		//      data = p->sp->vmt->Collect();
		p->cur_state = Ready;
		p->sp->vmt->Collect(p->sp);
		break;
    372a:	0a c0       	rjmp	.+20     	; 0x3740 <sensor_handler+0x104>
		
		/* Oops : when some errors occur */
		case Oops :
		/* TODO : ( we may want to do something in reset function and ) re-init by setting the state to new */
#ifdef DEBUG
		      printf("Something really wrong happens\n");
    372c:	81 ea       	ldi	r24, 0xA1	; 161
    372e:	94 e0       	ldi	r25, 0x04	; 4
    3730:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>
#endif
		p->cur_state = New;
    3734:	18 8e       	std	Y+24, r1	; 0x18
		break;
	}
	return 0;
    3736:	80 e0       	ldi	r24, 0x00	; 0
    3738:	90 e0       	ldi	r25, 0x00	; 0
		/* TODO : ( we may want to do something in reset function and ) re-init by setting the state to new */
#ifdef DEBUG
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
    373a:	02 c0       	rjmp	.+4      	; 0x3740 <sensor_handler+0x104>
	}
	return 0;
    373c:	80 e0       	ldi	r24, 0x00	; 0
    373e:	90 e0       	ldi	r25, 0x00	; 0
	// printf(" run :\n\t");
	// p->sp->vmt->MyPrint(p->sp);

}
    3740:	df 91       	pop	r29
    3742:	cf 91       	pop	r28
    3744:	1f 91       	pop	r17
    3746:	0f 91       	pop	r16
    3748:	08 95       	ret

0000374a <device_handler>:
 */
/*************************************************************************//**
  @brief device_handler function to decide the execution logic of a non-sensor device according to its state.
*****************************************************************************/
int device_handler( struct event *p )
{
    374a:	0f 93       	push	r16
    374c:	1f 93       	push	r17
    374e:	cf 93       	push	r28
    3750:	df 93       	push	r29
    3752:	fc 01       	movw	r30, r24
	int retNum = 0;
	BaseDevice * bdp = (BaseDevice *) ( p->load_p );
    3754:	c2 89       	ldd	r28, Z+18	; 0x12
    3756:	d3 89       	ldd	r29, Z+19	; 0x13
	LoadDataDevice *ldp = (LoadDataDevice*) ( p->load_p );
	DemoStorageDevice *ddp = (DemoStorageDevice*) ( p->store_p );
    3758:	04 89       	ldd	r16, Z+20	; 0x14
    375a:	15 89       	ldd	r17, Z+21	; 0x15

	/* sanity check */
	if( p == EV_NULL )
    375c:	89 2b       	or	r24, r25
    375e:	29 f4       	brne	.+10     	; 0x376a <device_handler+0x20>
	{
		#ifdef DEBUG
		printf("Null Event Error !!!\n");
    3760:	8c e8       	ldi	r24, 0x8C	; 140
    3762:	94 e0       	ldi	r25, 0x04	; 4
    3764:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>
		#endif
		return 0;
    3768:	35 c0       	rjmp	.+106    	; 0x37d4 <device_handler+0x8a>
	}
	
	switch( p->cur_state )
    376a:	90 8d       	ldd	r25, Z+24	; 0x18
    376c:	99 23       	and	r25, r25
    376e:	19 f0       	breq	.+6      	; 0x3776 <device_handler+0x2c>
    3770:	91 30       	cpi	r25, 0x01	; 1
    3772:	21 f0       	breq	.+8      	; 0x377c <device_handler+0x32>
    3774:	2f c0       	rjmp	.+94     	; 0x37d4 <device_handler+0x8a>
	{
		/* New : init first, if retNum is not 0 goto Oops state */
		case New :
			p->cur_state = Ready;
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	80 8f       	std	Z+24, r24	; 0x18
			break;
    377a:	2c c0       	rjmp	.+88     	; 0x37d4 <device_handler+0x8a>
		case Ready :
			p->cur_state = Ready;
			if( bdp->device_vt->getType(bdp) == TYPE_DEVICE )
    377c:	e8 81       	ld	r30, Y
    377e:	f9 81       	ldd	r31, Y+1	; 0x01
    3780:	06 80       	ldd	r0, Z+6	; 0x06
    3782:	f7 81       	ldd	r31, Z+7	; 0x07
    3784:	e0 2d       	mov	r30, r0
    3786:	ce 01       	movw	r24, r28
    3788:	19 95       	eicall
    378a:	05 97       	sbiw	r24, 0x05	; 5
    378c:	81 f4       	brne	.+32     	; 0x37ae <device_handler+0x64>
			{
				printf("Load Device\n");
    378e:	80 ec       	ldi	r24, 0xC0	; 192
    3790:	94 e0       	ldi	r25, 0x04	; 4
    3792:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>
				ldp->vmt->Execute(ldp);
    3796:	ea 81       	ldd	r30, Y+2	; 0x02
    3798:	fb 81       	ldd	r31, Y+3	; 0x03
    379a:	02 80       	ldd	r0, Z+2	; 0x02
    379c:	f3 81       	ldd	r31, Z+3	; 0x03
    379e:	e0 2d       	mov	r30, r0
    37a0:	ce 01       	movw	r24, r28
    37a2:	19 95       	eicall
				printf("Load Device Finish\n");
    37a4:	8c ec       	ldi	r24, 0xCC	; 204
    37a6:	94 e0       	ldi	r25, 0x04	; 4
    37a8:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>
    37ac:	13 c0       	rjmp	.+38     	; 0x37d4 <device_handler+0x8a>
			}	
			else if( bdp->device_vt->getType(bdp) == TYPE_STORAGE_DEVICE )
    37ae:	e8 81       	ld	r30, Y
    37b0:	f9 81       	ldd	r31, Y+1	; 0x01
    37b2:	06 80       	ldd	r0, Z+6	; 0x06
    37b4:	f7 81       	ldd	r31, Z+7	; 0x07
    37b6:	e0 2d       	mov	r30, r0
    37b8:	ce 01       	movw	r24, r28
    37ba:	19 95       	eicall
    37bc:	04 97       	sbiw	r24, 0x04	; 4
    37be:	51 f4       	brne	.+20     	; 0x37d4 <device_handler+0x8a>
			{
				ddp->vmt->Execute(ddp);
    37c0:	d8 01       	movw	r26, r16
    37c2:	12 96       	adiw	r26, 0x02	; 2
    37c4:	ed 91       	ld	r30, X+
    37c6:	fc 91       	ld	r31, X
    37c8:	13 97       	sbiw	r26, 0x03	; 3
    37ca:	02 80       	ldd	r0, Z+2	; 0x02
    37cc:	f3 81       	ldd	r31, Z+3	; 0x03
    37ce:	e0 2d       	mov	r30, r0
    37d0:	c8 01       	movw	r24, r16
    37d2:	19 95       	eicall
			break;
		default :
			break;
	}
	return retNum;
}
    37d4:	80 e0       	ldi	r24, 0x00	; 0
    37d6:	90 e0       	ldi	r25, 0x00	; 0
    37d8:	df 91       	pop	r29
    37da:	cf 91       	pop	r28
    37dc:	1f 91       	pop	r17
    37de:	0f 91       	pop	r16
    37e0:	08 95       	ret

000037e2 <init_timeoutq>:

/*************************************************************************//**
  @brief Init function of scheduler, which initialize all events and put them into freelist
*****************************************************************************/
void init_timeoutq()
{
    37e2:	0f 93       	push	r16
    37e4:	1f 93       	push	r17
    37e6:	cf 93       	push	r28
    37e8:	df 93       	push	r29
	int i;

	timeoutq = (struct event *)&TQ;
    37ea:	e9 e9       	ldi	r30, 0x99	; 153
    37ec:	fc e0       	ldi	r31, 0x0C	; 12
    37ee:	f0 93 1c 0d 	sts	0x0D1C, r31
    37f2:	e0 93 1b 0d 	sts	0x0D1B, r30
	LL_INIT(timeoutq);
    37f6:	f3 83       	std	Z+3, r31	; 0x03
    37f8:	e2 83       	std	Z+2, r30	; 0x02
    37fa:	f1 83       	std	Z+1, r31	; 0x01
    37fc:	e0 83       	st	Z, r30
	freelist = (struct event *)&FL;
    37fe:	e9 e7       	ldi	r30, 0x79	; 121
    3800:	fd e0       	ldi	r31, 0x0D	; 13
    3802:	f0 93 7e 0d 	sts	0x0D7E, r31
    3806:	e0 93 7d 0d 	sts	0x0D7D, r30
	LL_INIT(freelist);
    380a:	f3 83       	std	Z+3, r31	; 0x03
    380c:	e2 83       	std	Z+2, r30	; 0x02
    380e:	f1 83       	std	Z+1, r31	; 0x01
    3810:	e0 83       	st	Z, r30
    3812:	c9 ee       	ldi	r28, 0xE9	; 233
    3814:	da e0       	ldi	r29, 0x0A	; 10
    3816:	09 e9       	ldi	r16, 0x99	; 153
    3818:	1c e0       	ldi	r17, 0x0C	; 12

	for (i=0; i<MAX_EVENTS; i++) {
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
    381a:	be 01       	movw	r22, r28
    381c:	80 91 7d 0d 	lds	r24, 0x0D7D
    3820:	90 91 7e 0d 	lds	r25, 0x0D7E
    3824:	62 d2       	rcall	.+1220   	; 0x3cea <ll_r_insert>
    3826:	6b 96       	adiw	r28, 0x1b	; 27
	timeoutq = (struct event *)&TQ;
	LL_INIT(timeoutq);
	freelist = (struct event *)&FL;
	LL_INIT(freelist);

	for (i=0; i<MAX_EVENTS; i++) {
    3828:	c0 17       	cp	r28, r16
    382a:	d1 07       	cpc	r29, r17
    382c:	b1 f7       	brne	.-20     	; 0x381a <init_timeoutq+0x38>
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
	}

	return;
}
    382e:	df 91       	pop	r29
    3830:	cf 91       	pop	r28
    3832:	1f 91       	pop	r17
    3834:	0f 91       	pop	r16
    3836:	08 95       	ret

00003838 <next_event_time_collapse>:

/*************************************************************************//**
  @brief Update next event's timeout value when we set timer for it.
*****************************************************************************/
void next_event_time_collapse(int32_t sleep_time)
{
    3838:	cf 92       	push	r12
    383a:	df 92       	push	r13
    383c:	ef 92       	push	r14
    383e:	ff 92       	push	r15
    3840:	6b 01       	movw	r12, r22
    3842:	7c 01       	movw	r14, r24
	struct event * ev = ( struct event * ) LL_TOP( timeoutq );
    3844:	80 91 1b 0d 	lds	r24, 0x0D1B
    3848:	90 91 1c 0d 	lds	r25, 0x0D1C
    384c:	45 d2       	rcall	.+1162   	; 0x3cd8 <ll_first>
	if( EV_NULL == ev )
    384e:	00 97       	sbiw	r24, 0x00	; 0
    3850:	69 f0       	breq	.+26     	; 0x386c <next_event_time_collapse+0x34>
		return;
	ev->timeout -= sleep_time;
    3852:	fc 01       	movw	r30, r24
    3854:	44 81       	ldd	r20, Z+4	; 0x04
    3856:	55 81       	ldd	r21, Z+5	; 0x05
    3858:	66 81       	ldd	r22, Z+6	; 0x06
    385a:	77 81       	ldd	r23, Z+7	; 0x07
    385c:	4c 19       	sub	r20, r12
    385e:	5d 09       	sbc	r21, r13
    3860:	6e 09       	sbc	r22, r14
    3862:	7f 09       	sbc	r23, r15
    3864:	44 83       	std	Z+4, r20	; 0x04
    3866:	55 83       	std	Z+5, r21	; 0x05
    3868:	66 83       	std	Z+6, r22	; 0x06
    386a:	77 83       	std	Z+7, r23	; 0x07
}
    386c:	ff 90       	pop	r15
    386e:	ef 90       	pop	r14
    3870:	df 90       	pop	r13
    3872:	cf 90       	pop	r12
    3874:	08 95       	ret

00003876 <get_next_interval>:
*****************************************************************************/
int32_t get_next_interval()
{

	int32_t wait_time = MAX_SLEEP_INTERVAL;
	struct event * ev = ( struct event * ) LL_TOP( timeoutq );
    3876:	80 91 1b 0d 	lds	r24, 0x0D1B
    387a:	90 91 1c 0d 	lds	r25, 0x0D1C
    387e:	2c d2       	rcall	.+1112   	; 0x3cd8 <ll_first>

	/* sanity check */
    /* no event in queue */
    /* TODO : to optimize the sleep time or let the CPU sleep or set up some other interrupts */
	if( EV_NULL == ev )
    3880:	00 97       	sbiw	r24, 0x00	; 0
    3882:	69 f4       	brne	.+26     	; 0x389e <get_next_interval+0x28>
	{
#ifdef DEBUG
		printf("we may get some memory leakage issue, or something really bad occurs\n");
    3884:	8f ed       	ldi	r24, 0xDF	; 223
    3886:	94 e0       	ldi	r25, 0x04	; 4
    3888:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>
		printf("so we are going to take some really sleep, since no event in scheduler\n");
    388c:	84 e2       	ldi	r24, 0x24	; 36
    388e:	95 e0       	ldi	r25, 0x05	; 5
    3890:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>
#endif
	    return wait_time;
    3894:	60 e4       	ldi	r22, 0x40	; 64
    3896:	7f e1       	ldi	r23, 0x1F	; 31
    3898:	80 e0       	ldi	r24, 0x00	; 0
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	08 95       	ret
	}
	
	/* if the next event is nearer */
	if( wait_time > ev->timeout )
    389e:	fc 01       	movw	r30, r24
    38a0:	64 81       	ldd	r22, Z+4	; 0x04
    38a2:	75 81       	ldd	r23, Z+5	; 0x05
    38a4:	86 81       	ldd	r24, Z+6	; 0x06
    38a6:	97 81       	ldd	r25, Z+7	; 0x07
    38a8:	60 34       	cpi	r22, 0x40	; 64
    38aa:	ff e1       	ldi	r31, 0x1F	; 31
    38ac:	7f 07       	cpc	r23, r31
    38ae:	81 05       	cpc	r24, r1
    38b0:	91 05       	cpc	r25, r1
    38b2:	24 f0       	brlt	.+8      	; 0x38bc <get_next_interval+0x46>
  @brief Return the the time ( ms ) of the next event
*****************************************************************************/
int32_t get_next_interval()
{

	int32_t wait_time = MAX_SLEEP_INTERVAL;
    38b4:	60 e4       	ldi	r22, 0x40	; 64
    38b6:	7f e1       	ldi	r23, 0x1F	; 31
    38b8:	80 e0       	ldi	r24, 0x00	; 0
    38ba:	90 e0       	ldi	r25, 0x00	; 0
	{
		wait_time = ev->timeout;
	}
	/* if the next event time is longer, we need to wait it time by time in handle_timeoutq_event() function, since currently, the longest waiting time support is 8s */
	return wait_time;
}
    38bc:	08 95       	ret

000038be <insert_timeoutq_event>:

/*************************************************************************//**
  @brief Insert a new event into the scheduler according to timeout order
*****************************************************************************/
void insert_timeoutq_event( struct event * ep)
{
    38be:	0f 93       	push	r16
    38c0:	1f 93       	push	r17
    38c2:	cf 93       	push	r28
    38c4:	df 93       	push	r29
    38c6:	dc 01       	movw	r26, r24
	// Try to insert it according to timeout and timeoutq
	struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
    38c8:	c0 91 1b 0d 	lds	r28, 0x0D1B
    38cc:	d0 91 1c 0d 	lds	r29, 0x0D1C
    38d0:	ea 81       	ldd	r30, Y+2	; 0x02
    38d2:	fb 81       	ldd	r31, Y+3	; 0x03
    38d4:	ce 17       	cp	r28, r30
    38d6:	df 07       	cpc	r29, r31
    38d8:	71 f1       	breq	.+92     	; 0x3936 <insert_timeoutq_event+0x78>
	{
		if( it != EV_NULL )
    38da:	30 97       	sbiw	r30, 0x00	; 0
    38dc:	31 f1       	breq	.+76     	; 0x392a <insert_timeoutq_event+0x6c>
		{
			if( ( it->timeout ) > ( ep->timeout ) )
    38de:	04 81       	ldd	r16, Z+4	; 0x04
    38e0:	15 81       	ldd	r17, Z+5	; 0x05
    38e2:	26 81       	ldd	r18, Z+6	; 0x06
    38e4:	37 81       	ldd	r19, Z+7	; 0x07
    38e6:	14 96       	adiw	r26, 0x04	; 4
    38e8:	4d 91       	ld	r20, X+
    38ea:	5d 91       	ld	r21, X+
    38ec:	6d 91       	ld	r22, X+
    38ee:	7c 91       	ld	r23, X
    38f0:	17 97       	sbiw	r26, 0x07	; 7
    38f2:	40 17       	cp	r20, r16
    38f4:	51 07       	cpc	r21, r17
    38f6:	62 07       	cpc	r22, r18
    38f8:	73 07       	cpc	r23, r19
    38fa:	6c f4       	brge	.+26     	; 0x3916 <insert_timeoutq_event+0x58>
			{
				it->timeout -= ep->timeout;
    38fc:	04 1b       	sub	r16, r20
    38fe:	15 0b       	sbc	r17, r21
    3900:	26 0b       	sbc	r18, r22
    3902:	37 0b       	sbc	r19, r23
    3904:	04 83       	std	Z+4, r16	; 0x04
    3906:	15 83       	std	Z+5, r17	; 0x05
    3908:	26 83       	std	Z+6, r18	; 0x06
    390a:	37 83       	std	Z+7, r19	; 0x07
				LL_L_INSERT( it, ep );
    390c:	bd 01       	movw	r22, r26
    390e:	80 81       	ld	r24, Z
    3910:	91 81       	ldd	r25, Z+1	; 0x01
    3912:	eb d1       	rcall	.+982    	; 0x3cea <ll_r_insert>
    3914:	18 c0       	rjmp	.+48     	; 0x3946 <insert_timeoutq_event+0x88>
				// printf("left insert \n");
				break;
			}
			else
			{
				ep->timeout -= it->timeout;
    3916:	40 1b       	sub	r20, r16
    3918:	51 0b       	sbc	r21, r17
    391a:	62 0b       	sbc	r22, r18
    391c:	73 0b       	sbc	r23, r19
    391e:	14 96       	adiw	r26, 0x04	; 4
    3920:	4d 93       	st	X+, r20
    3922:	5d 93       	st	X+, r21
    3924:	6d 93       	st	X+, r22
    3926:	7c 93       	st	X, r23
    3928:	17 97       	sbiw	r26, 0x07	; 7
	// Try to insert it according to timeout and timeoutq
	struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
    392a:	02 80       	ldd	r0, Z+2	; 0x02
    392c:	f3 81       	ldd	r31, Z+3	; 0x03
    392e:	e0 2d       	mov	r30, r0
    3930:	ce 17       	cp	r28, r30
    3932:	df 07       	cpc	r29, r31
    3934:	91 f6       	brne	.-92     	; 0x38da <insert_timeoutq_event+0x1c>
	}
	
	// If not insert it left to the header
	if( is_pushed == 0 )
	{
		LL_APPEND(timeoutq, ep);
    3936:	e0 91 1b 0d 	lds	r30, 0x0D1B
    393a:	f0 91 1c 0d 	lds	r31, 0x0D1C
    393e:	bd 01       	movw	r22, r26
    3940:	80 81       	ld	r24, Z
    3942:	91 81       	ldd	r25, Z+1	; 0x01
    3944:	d2 d1       	rcall	.+932    	; 0x3cea <ll_r_insert>

	#ifdef DEBUG
	// dump_timeoutq();
	#endif

}
    3946:	df 91       	pop	r29
    3948:	cf 91       	pop	r28
    394a:	1f 91       	pop	r17
    394c:	0f 91       	pop	r16
    394e:	08 95       	ret

00003950 <load_new_sensor>:

/*************************************************************************//**
  @brief Load a brand new sensor activity into the scheduler's timeoutQ
*****************************************************************************/
int load_new_sensor( int32_t timeout, int32_t repeat, BaseSensor *device_ptr, int otherinfo )
{
    3950:	4f 92       	push	r4
    3952:	5f 92       	push	r5
    3954:	6f 92       	push	r6
    3956:	7f 92       	push	r7
    3958:	8f 92       	push	r8
    395a:	9f 92       	push	r9
    395c:	af 92       	push	r10
    395e:	bf 92       	push	r11
    3960:	ef 92       	push	r14
    3962:	ff 92       	push	r15
    3964:	0f 93       	push	r16
    3966:	1f 93       	push	r17
    3968:	2b 01       	movw	r4, r22
    396a:	3c 01       	movw	r6, r24
    396c:	49 01       	movw	r8, r18
    396e:	5a 01       	movw	r10, r20

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    3970:	80 91 7d 0d 	lds	r24, 0x0D7D
    3974:	90 91 7e 0d 	lds	r25, 0x0D7E
    3978:	ee d1       	rcall	.+988    	; 0x3d56 <ll_pop>
    397a:	fc 01       	movw	r30, r24
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
    397c:	89 2b       	or	r24, r25
    397e:	d9 f0       	breq	.+54     	; 0x39b6 <load_new_sensor+0x66>
        return -1;
    ep->timeout = timeout;
    3980:	44 82       	std	Z+4, r4	; 0x04
    3982:	55 82       	std	Z+5, r5	; 0x05
    3984:	66 82       	std	Z+6, r6	; 0x06
    3986:	77 82       	std	Z+7, r7	; 0x07
    ep->repeat_interval = repeat;
    3988:	80 86       	std	Z+8, r8	; 0x08
    398a:	91 86       	std	Z+9, r9	; 0x09
    398c:	a2 86       	std	Z+10, r10	; 0x0a
    398e:	b3 86       	std	Z+11, r11	; 0x0b
	ep->borrow_timeout = 0;
    3990:	14 86       	std	Z+12, r1	; 0x0c
    3992:	15 86       	std	Z+13, r1	; 0x0d
    3994:	16 86       	std	Z+14, r1	; 0x0e
    3996:	17 86       	std	Z+15, r1	; 0x0f
    ep->sp = device_ptr;
    3998:	11 8b       	std	Z+17, r17	; 0x11
    399a:	00 8b       	std	Z+16, r16	; 0x10
    ep->info = otherinfo;
    399c:	f7 8a       	std	Z+23, r15	; 0x17
    399e:	e6 8a       	std	Z+22, r14	; 0x16
    ep->cur_state = Ready;
    39a0:	81 e0       	ldi	r24, 0x01	; 1
    39a2:	80 8f       	std	Z+24, r24	; 0x18
    ep->run = sensor_handler;
    39a4:	8e e1       	ldi	r24, 0x1E	; 30
    39a6:	9b e1       	ldi	r25, 0x1B	; 27
    39a8:	92 8f       	std	Z+26, r25	; 0x1a
    39aa:	81 8f       	std	Z+25, r24	; 0x19
    insert_timeoutq_event( ep );
    39ac:	cf 01       	movw	r24, r30
    39ae:	87 df       	rcall	.-242    	; 0x38be <insert_timeoutq_event>
    return 0;
    39b0:	80 e0       	ldi	r24, 0x00	; 0
    39b2:	90 e0       	ldi	r25, 0x00	; 0
    39b4:	02 c0       	rjmp	.+4      	; 0x39ba <load_new_sensor+0x6a>

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
        return -1;
    39b6:	8f ef       	ldi	r24, 0xFF	; 255
    39b8:	9f ef       	ldi	r25, 0xFF	; 255
    ep->info = otherinfo;
    ep->cur_state = Ready;
    ep->run = sensor_handler;
    insert_timeoutq_event( ep );
    return 0;
}
    39ba:	1f 91       	pop	r17
    39bc:	0f 91       	pop	r16
    39be:	ff 90       	pop	r15
    39c0:	ef 90       	pop	r14
    39c2:	bf 90       	pop	r11
    39c4:	af 90       	pop	r10
    39c6:	9f 90       	pop	r9
    39c8:	8f 90       	pop	r8
    39ca:	7f 90       	pop	r7
    39cc:	6f 90       	pop	r6
    39ce:	5f 90       	pop	r5
    39d0:	4f 90       	pop	r4
    39d2:	08 95       	ret

000039d4 <load_new_device>:

/*************************************************************************//**
  @brief Load a brand new device activity into the scheduler's timeoutQ
*****************************************************************************/
int load_new_device( int32_t timeout, int32_t repeat, BaseDevice *device_ptr, int otherinfo )
{
    39d4:	4f 92       	push	r4
    39d6:	5f 92       	push	r5
    39d8:	6f 92       	push	r6
    39da:	7f 92       	push	r7
    39dc:	8f 92       	push	r8
    39de:	9f 92       	push	r9
    39e0:	af 92       	push	r10
    39e2:	bf 92       	push	r11
    39e4:	ef 92       	push	r14
    39e6:	ff 92       	push	r15
    39e8:	0f 93       	push	r16
    39ea:	1f 93       	push	r17
    39ec:	2b 01       	movw	r4, r22
    39ee:	3c 01       	movw	r6, r24
    39f0:	49 01       	movw	r8, r18
    39f2:	5a 01       	movw	r10, r20

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    39f4:	80 91 7d 0d 	lds	r24, 0x0D7D
    39f8:	90 91 7e 0d 	lds	r25, 0x0D7E
    39fc:	ac d1       	rcall	.+856    	; 0x3d56 <ll_pop>
    39fe:	fc 01       	movw	r30, r24
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
    3a00:	89 2b       	or	r24, r25
    3a02:	e9 f0       	breq	.+58     	; 0x3a3e <load_new_device+0x6a>
        return -1;
    ep->timeout = timeout;
    3a04:	44 82       	std	Z+4, r4	; 0x04
    3a06:	55 82       	std	Z+5, r5	; 0x05
    3a08:	66 82       	std	Z+6, r6	; 0x06
    3a0a:	77 82       	std	Z+7, r7	; 0x07
    ep->repeat_interval = repeat;
    3a0c:	80 86       	std	Z+8, r8	; 0x08
    3a0e:	91 86       	std	Z+9, r9	; 0x09
    3a10:	a2 86       	std	Z+10, r10	; 0x0a
    3a12:	b3 86       	std	Z+11, r11	; 0x0b
	ep->borrow_timeout = 0;
    3a14:	14 86       	std	Z+12, r1	; 0x0c
    3a16:	15 86       	std	Z+13, r1	; 0x0d
    3a18:	16 86       	std	Z+14, r1	; 0x0e
    3a1a:	17 86       	std	Z+15, r1	; 0x0f
    ep->load_p = device_ptr;
    3a1c:	13 8b       	std	Z+19, r17	; 0x13
    3a1e:	02 8b       	std	Z+18, r16	; 0x12
	ep->store_p = device_ptr;
    3a20:	15 8b       	std	Z+21, r17	; 0x15
    3a22:	04 8b       	std	Z+20, r16	; 0x14
    ep->info = otherinfo;
    3a24:	f7 8a       	std	Z+23, r15	; 0x17
    3a26:	e6 8a       	std	Z+22, r14	; 0x16
    ep->cur_state = Ready;
    3a28:	81 e0       	ldi	r24, 0x01	; 1
    3a2a:	80 8f       	std	Z+24, r24	; 0x18
    ep->run = device_handler;
    3a2c:	85 ea       	ldi	r24, 0xA5	; 165
    3a2e:	9b e1       	ldi	r25, 0x1B	; 27
    3a30:	92 8f       	std	Z+26, r25	; 0x1a
    3a32:	81 8f       	std	Z+25, r24	; 0x19
    insert_timeoutq_event( ep );
    3a34:	cf 01       	movw	r24, r30
    3a36:	43 df       	rcall	.-378    	; 0x38be <insert_timeoutq_event>
    return 0;
    3a38:	80 e0       	ldi	r24, 0x00	; 0
    3a3a:	90 e0       	ldi	r25, 0x00	; 0
    3a3c:	02 c0       	rjmp	.+4      	; 0x3a42 <load_new_device+0x6e>

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
        return -1;
    3a3e:	8f ef       	ldi	r24, 0xFF	; 255
    3a40:	9f ef       	ldi	r25, 0xFF	; 255
    ep->info = otherinfo;
    ep->cur_state = Ready;
    ep->run = device_handler;
    insert_timeoutq_event( ep );
    return 0;
}
    3a42:	1f 91       	pop	r17
    3a44:	0f 91       	pop	r16
    3a46:	ff 90       	pop	r15
    3a48:	ef 90       	pop	r14
    3a4a:	bf 90       	pop	r11
    3a4c:	af 90       	pop	r10
    3a4e:	9f 90       	pop	r9
    3a50:	8f 90       	pop	r8
    3a52:	7f 90       	pop	r7
    3a54:	6f 90       	pop	r6
    3a56:	5f 90       	pop	r5
    3a58:	4f 90       	pop	r4
    3a5a:	08 95       	ret

00003a5c <handle_timeoutq_event>:

/*************************************************************************//**
  @brief Handle the next event in timeoutQ: execute the event's handler function according to the device type, re-insert it according to the period, and set a timer of next event.
*****************************************************************************/
int handle_timeoutq_event( )
{
    3a5c:	cf 92       	push	r12
    3a5e:	df 92       	push	r13
    3a60:	ef 92       	push	r14
    3a62:	ff 92       	push	r15
    3a64:	0f 93       	push	r16
    3a66:	1f 93       	push	r17
    3a68:	cf 93       	push	r28
    3a6a:	df 93       	push	r29
	int retNum, sleep_time;
	/* assume we get a valid one */
	struct event * ev = (struct event * )LL_TOP( timeoutq );
    3a6c:	80 91 1b 0d 	lds	r24, 0x0D1B
    3a70:	90 91 1c 0d 	lds	r25, 0x0D1C
    3a74:	31 d1       	rcall	.+610    	; 0x3cd8 <ll_first>
    3a76:	ec 01       	movw	r28, r24
	if( EV_NULL == ev )
    3a78:	89 2b       	or	r24, r25
    3a7a:	39 f4       	brne	.+14     	; 0x3a8a <handle_timeoutq_event+0x2e>
	{
		printf("err\n");
    3a7c:	8b e6       	ldi	r24, 0x6B	; 107
    3a7e:	95 e0       	ldi	r25, 0x05	; 5
    3a80:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>
        return -1;
    3a84:	8f ef       	ldi	r24, 0xFF	; 255
    3a86:	9f ef       	ldi	r25, 0xFF	; 255
    3a88:	8b c0       	rjmp	.+278    	; 0x3ba0 <handle_timeoutq_event+0x144>
	}
    
    /* sanity check */
    if( ev->sp == NULL && ev->load_p == NULL && ev->store_p == NULL)
    3a8a:	88 89       	ldd	r24, Y+16	; 0x10
    3a8c:	99 89       	ldd	r25, Y+17	; 0x11
    3a8e:	89 2b       	or	r24, r25
    3a90:	49 f4       	brne	.+18     	; 0x3aa4 <handle_timeoutq_event+0x48>
    3a92:	8a 89       	ldd	r24, Y+18	; 0x12
    3a94:	9b 89       	ldd	r25, Y+19	; 0x13
    3a96:	89 2b       	or	r24, r25
    3a98:	29 f4       	brne	.+10     	; 0x3aa4 <handle_timeoutq_event+0x48>
    3a9a:	8c 89       	ldd	r24, Y+20	; 0x14
    3a9c:	9d 89       	ldd	r25, Y+21	; 0x15
    3a9e:	89 2b       	or	r24, r25
    3aa0:	09 f4       	brne	.+2      	; 0x3aa4 <handle_timeoutq_event+0x48>
    3aa2:	7c c0       	rjmp	.+248    	; 0x3b9c <handle_timeoutq_event+0x140>
        return -1;

	/* if it is not the right time, re-set the timer */
	if( ev->timeout != 0 )
    3aa4:	8c 81       	ldd	r24, Y+4	; 0x04
    3aa6:	9d 81       	ldd	r25, Y+5	; 0x05
    3aa8:	ae 81       	ldd	r26, Y+6	; 0x06
    3aaa:	bf 81       	ldd	r27, Y+7	; 0x07
    3aac:	89 2b       	or	r24, r25
    3aae:	8a 2b       	or	r24, r26
    3ab0:	8b 2b       	or	r24, r27
    3ab2:	71 f0       	breq	.+28     	; 0x3ad0 <handle_timeoutq_event+0x74>
	{
		sleep_time = get_next_interval();
    3ab4:	e0 de       	rcall	.-576    	; 0x3876 <get_next_interval>
		next_event_time_collapse(sleep_time);
    3ab6:	6b 01       	movw	r12, r22
    3ab8:	77 0f       	add	r23, r23
    3aba:	ee 08       	sbc	r14, r14
    3abc:	ff 08       	sbc	r15, r15
    3abe:	c7 01       	movw	r24, r14
    3ac0:	b6 01       	movw	r22, r12
    3ac2:	ba de       	rcall	.-652    	; 0x3838 <next_event_time_collapse>
		set_timer(sleep_time);
    3ac4:	c7 01       	movw	r24, r14
    3ac6:	b6 01       	movw	r22, r12
    3ac8:	ed d9       	rcall	.-3110   	; 0x2ea4 <set_timer>
		return 0;
    3aca:	80 e0       	ldi	r24, 0x00	; 0
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	68 c0       	rjmp	.+208    	; 0x3ba0 <handle_timeoutq_event+0x144>
	}
	
	/* retNum may need to be designed in other ways */
    retNum = ev->run( ev );
    3ad0:	e9 8d       	ldd	r30, Y+25	; 0x19
    3ad2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    3ad4:	ce 01       	movw	r24, r28
    3ad6:	19 95       	eicall
	/* 
	 * return 1 if it has to with some borrow time( have a request-time!=0 case ) 
	 * which means the event has already entered the scheduler, 
	 * and won't need to do anything else
	 */
	if( retNum == 1 )
    3ad8:	01 97       	sbiw	r24, 0x01	; 1
    3ada:	a9 f4       	brne	.+42     	; 0x3b06 <handle_timeoutq_event+0xaa>
	{
		sleep_time = get_next_interval();
    3adc:	cc de       	rcall	.-616    	; 0x3876 <get_next_interval>
		/* judge if the next top in queue has a timeout <= 0, which we may want to handle it right now */
		if( sleep_time == 0 )
    3ade:	61 15       	cp	r22, r1
    3ae0:	71 05       	cpc	r23, r1
    3ae2:	21 f4       	brne	.+8      	; 0x3aec <handle_timeoutq_event+0x90>
		{
			handle_timeoutq_event();
    3ae4:	bb df       	rcall	.-138    	; 0x3a5c <handle_timeoutq_event>
			return 0;
    3ae6:	80 e0       	ldi	r24, 0x00	; 0
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
    3aea:	5a c0       	rjmp	.+180    	; 0x3ba0 <handle_timeoutq_event+0x144>
		}
		next_event_time_collapse(sleep_time);	
    3aec:	6b 01       	movw	r12, r22
    3aee:	77 0f       	add	r23, r23
    3af0:	ee 08       	sbc	r14, r14
    3af2:	ff 08       	sbc	r15, r15
    3af4:	c7 01       	movw	r24, r14
    3af6:	b6 01       	movw	r22, r12
    3af8:	9f de       	rcall	.-706    	; 0x3838 <next_event_time_collapse>
		set_timer(sleep_time);
    3afa:	c7 01       	movw	r24, r14
    3afc:	b6 01       	movw	r22, r12
    3afe:	d2 d9       	rcall	.-3164   	; 0x2ea4 <set_timer>
		return 0;
    3b00:	80 e0       	ldi	r24, 0x00	; 0
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	4d c0       	rjmp	.+154    	; 0x3ba0 <handle_timeoutq_event+0x144>
    /*
	 * return 0 means we just fired a case, 
	 * and may need to judge it over the repeat time to re-insert into the scheduler,
	 * since we definitely want to collect data periodically
	 */
    LL_POP( timeoutq );
    3b06:	80 91 1b 0d 	lds	r24, 0x0D1B
    3b0a:	90 91 1c 0d 	lds	r25, 0x0D1C
    3b0e:	23 d1       	rcall	.+582    	; 0x3d56 <ll_pop>
    if( ev->repeat_interval != 0 )
    3b10:	88 85       	ldd	r24, Y+8	; 0x08
    3b12:	99 85       	ldd	r25, Y+9	; 0x09
    3b14:	aa 85       	ldd	r26, Y+10	; 0x0a
    3b16:	bb 85       	ldd	r27, Y+11	; 0x0b
    3b18:	00 97       	sbiw	r24, 0x00	; 0
    3b1a:	a1 05       	cpc	r26, r1
    3b1c:	b1 05       	cpc	r27, r1
    3b1e:	19 f1       	breq	.+70     	; 0x3b66 <handle_timeoutq_event+0x10a>
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
    3b20:	4c 85       	ldd	r20, Y+12	; 0x0c
    3b22:	5d 85       	ldd	r21, Y+13	; 0x0d
    3b24:	6e 85       	ldd	r22, Y+14	; 0x0e
    3b26:	7f 85       	ldd	r23, Y+15	; 0x0f
    3b28:	8c 01       	movw	r16, r24
    3b2a:	9d 01       	movw	r18, r26
    3b2c:	04 1b       	sub	r16, r20
    3b2e:	15 0b       	sbc	r17, r21
    3b30:	26 0b       	sbc	r18, r22
    3b32:	37 0b       	sbc	r19, r23
    3b34:	b9 01       	movw	r22, r18
    3b36:	a8 01       	movw	r20, r16
    3b38:	0c 83       	std	Y+4, r16	; 0x04
    3b3a:	1d 83       	std	Y+5, r17	; 0x05
    3b3c:	2e 83       	std	Y+6, r18	; 0x06
    3b3e:	3f 83       	std	Y+7, r19	; 0x07
		while( ev->timeout < 0 )
    3b40:	33 23       	and	r19, r19
    3b42:	54 f4       	brge	.+20     	; 0x3b58 <handle_timeoutq_event+0xfc>
		{
			ev->timeout += ev->repeat_interval;
    3b44:	48 0f       	add	r20, r24
    3b46:	59 1f       	adc	r21, r25
    3b48:	6a 1f       	adc	r22, r26
    3b4a:	7b 1f       	adc	r23, r27
	 */
    LL_POP( timeoutq );
    if( ev->repeat_interval != 0 )
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
		while( ev->timeout < 0 )
    3b4c:	77 23       	and	r23, r23
    3b4e:	d4 f3       	brlt	.-12     	; 0x3b44 <handle_timeoutq_event+0xe8>
    3b50:	4c 83       	std	Y+4, r20	; 0x04
    3b52:	5d 83       	std	Y+5, r21	; 0x05
    3b54:	6e 83       	std	Y+6, r22	; 0x06
    3b56:	7f 83       	std	Y+7, r23	; 0x07
		{
			ev->timeout += ev->repeat_interval;
		}
		ev->borrow_timeout = 0;
    3b58:	1c 86       	std	Y+12, r1	; 0x0c
    3b5a:	1d 86       	std	Y+13, r1	; 0x0d
    3b5c:	1e 86       	std	Y+14, r1	; 0x0e
    3b5e:	1f 86       	std	Y+15, r1	; 0x0f
        insert_timeoutq_event( ev );
    3b60:	ce 01       	movw	r24, r28
    3b62:	ad de       	rcall	.-678    	; 0x38be <insert_timeoutq_event>
    3b64:	06 c0       	rjmp	.+12     	; 0x3b72 <handle_timeoutq_event+0x116>
    }
    else
    {
        LL_PUSH( freelist, ev );
    3b66:	be 01       	movw	r22, r28
    3b68:	80 91 7d 0d 	lds	r24, 0x0D7D
    3b6c:	90 91 7e 0d 	lds	r25, 0x0D7E
    3b70:	bc d0       	rcall	.+376    	; 0x3cea <ll_r_insert>
    }

	sleep_time = get_next_interval();
    3b72:	81 de       	rcall	.-766    	; 0x3876 <get_next_interval>
	/* judge if the next top in queue has a timeout <= 0, which we may want to handle it right now */
	if( sleep_time == 0 )
    3b74:	61 15       	cp	r22, r1
    3b76:	71 05       	cpc	r23, r1
    3b78:	21 f4       	brne	.+8      	; 0x3b82 <handle_timeoutq_event+0x126>
	{
		handle_timeoutq_event();
    3b7a:	70 df       	rcall	.-288    	; 0x3a5c <handle_timeoutq_event>
		return 0;
    3b7c:	80 e0       	ldi	r24, 0x00	; 0
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	0f c0       	rjmp	.+30     	; 0x3ba0 <handle_timeoutq_event+0x144>
	}
	next_event_time_collapse(sleep_time);	
    3b82:	6b 01       	movw	r12, r22
    3b84:	77 0f       	add	r23, r23
    3b86:	ee 08       	sbc	r14, r14
    3b88:	ff 08       	sbc	r15, r15
    3b8a:	c7 01       	movw	r24, r14
    3b8c:	b6 01       	movw	r22, r12
    3b8e:	54 de       	rcall	.-856    	; 0x3838 <next_event_time_collapse>
	set_timer(sleep_time);
    3b90:	c7 01       	movw	r24, r14
    3b92:	b6 01       	movw	r22, r12
    3b94:	87 d9       	rcall	.-3314   	; 0x2ea4 <set_timer>
    return 0;
    3b96:	80 e0       	ldi	r24, 0x00	; 0
    3b98:	90 e0       	ldi	r25, 0x00	; 0
    3b9a:	02 c0       	rjmp	.+4      	; 0x3ba0 <handle_timeoutq_event+0x144>
        return -1;
	}
    
    /* sanity check */
    if( ev->sp == NULL && ev->load_p == NULL && ev->store_p == NULL)
        return -1;
    3b9c:	8f ef       	ldi	r24, 0xFF	; 255
    3b9e:	9f ef       	ldi	r25, 0xFF	; 255
		return 0;
	}
	next_event_time_collapse(sleep_time);	
	set_timer(sleep_time);
    return 0;
}
    3ba0:	df 91       	pop	r29
    3ba2:	cf 91       	pop	r28
    3ba4:	1f 91       	pop	r17
    3ba6:	0f 91       	pop	r16
    3ba8:	ff 90       	pop	r15
    3baa:	ef 90       	pop	r14
    3bac:	df 90       	pop	r13
    3bae:	cf 90       	pop	r12
    3bb0:	08 95       	ret

00003bb2 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    3bb2:	a5 db       	rcall	.-2230   	; 0x32fe <HAL_Init>
  SYS_TimerInit();
    3bb4:	67 d0       	rcall	.+206    	; 0x3c84 <SYS_TimerInit>
  PHY_Init();
    3bb6:	2b dd       	rcall	.-1450   	; 0x360e <PHY_Init>
  NWK_Init();
    3bb8:	dc cb       	rjmp	.-2120   	; 0x3372 <NWK_Init>
    3bba:	08 95       	ret

00003bbc <placeTimer>:

      break;
    }
    prev = t;
  }
}
    3bbc:	0f 93       	push	r16
    3bbe:	1f 93       	push	r17
    3bc0:	cf 93       	push	r28
    3bc2:	df 93       	push	r29
    3bc4:	ec 01       	movw	r28, r24
    3bc6:	80 91 93 0a 	lds	r24, 0x0A93
    3bca:	90 91 94 0a 	lds	r25, 0x0A94
    3bce:	00 97       	sbiw	r24, 0x00	; 0
    3bd0:	09 f4       	brne	.+2      	; 0x3bd4 <placeTimer+0x18>
    3bd2:	45 c0       	rjmp	.+138    	; 0x3c5e <placeTimer+0xa2>
    3bd4:	4e 81       	ldd	r20, Y+6	; 0x06
    3bd6:	5f 81       	ldd	r21, Y+7	; 0x07
    3bd8:	68 85       	ldd	r22, Y+8	; 0x08
    3bda:	79 85       	ldd	r23, Y+9	; 0x09
    3bdc:	fc 01       	movw	r30, r24
    3bde:	02 81       	ldd	r16, Z+2	; 0x02
    3be0:	13 81       	ldd	r17, Z+3	; 0x03
    3be2:	24 81       	ldd	r18, Z+4	; 0x04
    3be4:	35 81       	ldd	r19, Z+5	; 0x05
    3be6:	40 17       	cp	r20, r16
    3be8:	51 07       	cpc	r21, r17
    3bea:	62 07       	cpc	r22, r18
    3bec:	73 07       	cpc	r23, r19
    3bee:	60 f0       	brcs	.+24     	; 0x3c08 <placeTimer+0x4c>
    3bf0:	dc 01       	movw	r26, r24
    3bf2:	17 c0       	rjmp	.+46     	; 0x3c22 <placeTimer+0x66>
    3bf4:	02 81       	ldd	r16, Z+2	; 0x02
    3bf6:	13 81       	ldd	r17, Z+3	; 0x03
    3bf8:	24 81       	ldd	r18, Z+4	; 0x04
    3bfa:	35 81       	ldd	r19, Z+5	; 0x05
    3bfc:	40 17       	cp	r20, r16
    3bfe:	51 07       	cpc	r21, r17
    3c00:	62 07       	cpc	r22, r18
    3c02:	73 07       	cpc	r23, r19
    3c04:	68 f4       	brcc	.+26     	; 0x3c20 <placeTimer+0x64>
    3c06:	03 c0       	rjmp	.+6      	; 0x3c0e <placeTimer+0x52>
    3c08:	fc 01       	movw	r30, r24
    3c0a:	a0 e0       	ldi	r26, 0x00	; 0
    3c0c:	b0 e0       	ldi	r27, 0x00	; 0
    3c0e:	04 1b       	sub	r16, r20
    3c10:	15 0b       	sbc	r17, r21
    3c12:	26 0b       	sbc	r18, r22
    3c14:	37 0b       	sbc	r19, r23
    3c16:	02 83       	std	Z+2, r16	; 0x02
    3c18:	13 83       	std	Z+3, r17	; 0x03
    3c1a:	24 83       	std	Z+4, r18	; 0x04
    3c1c:	35 83       	std	Z+5, r19	; 0x05
    3c1e:	0a c0       	rjmp	.+20     	; 0x3c34 <placeTimer+0x78>
    3c20:	df 01       	movw	r26, r30
    3c22:	40 1b       	sub	r20, r16
    3c24:	51 0b       	sbc	r21, r17
    3c26:	62 0b       	sbc	r22, r18
    3c28:	73 0b       	sbc	r23, r19
    3c2a:	ed 91       	ld	r30, X+
    3c2c:	fc 91       	ld	r31, X
    3c2e:	11 97       	sbiw	r26, 0x01	; 1
    3c30:	30 97       	sbiw	r30, 0x00	; 0
    3c32:	01 f7       	brne	.-64     	; 0x3bf4 <placeTimer+0x38>
    3c34:	4a 83       	std	Y+2, r20	; 0x02
    3c36:	5b 83       	std	Y+3, r21	; 0x03
    3c38:	6c 83       	std	Y+4, r22	; 0x04
    3c3a:	7d 83       	std	Y+5, r23	; 0x05
    3c3c:	10 97       	sbiw	r26, 0x00	; 0
    3c3e:	41 f0       	breq	.+16     	; 0x3c50 <placeTimer+0x94>
    3c40:	8d 91       	ld	r24, X+
    3c42:	9c 91       	ld	r25, X
    3c44:	11 97       	sbiw	r26, 0x01	; 1
    3c46:	99 83       	std	Y+1, r25	; 0x01
    3c48:	88 83       	st	Y, r24
    3c4a:	cd 93       	st	X+, r28
    3c4c:	dc 93       	st	X, r29
    3c4e:	15 c0       	rjmp	.+42     	; 0x3c7a <placeTimer+0xbe>
    3c50:	99 83       	std	Y+1, r25	; 0x01
    3c52:	88 83       	st	Y, r24
    3c54:	d0 93 94 0a 	sts	0x0A94, r29
    3c58:	c0 93 93 0a 	sts	0x0A93, r28
    3c5c:	0e c0       	rjmp	.+28     	; 0x3c7a <placeTimer+0xbe>
    3c5e:	19 82       	std	Y+1, r1	; 0x01
    3c60:	18 82       	st	Y, r1
    3c62:	8e 81       	ldd	r24, Y+6	; 0x06
    3c64:	9f 81       	ldd	r25, Y+7	; 0x07
    3c66:	a8 85       	ldd	r26, Y+8	; 0x08
    3c68:	b9 85       	ldd	r27, Y+9	; 0x09
    3c6a:	8a 83       	std	Y+2, r24	; 0x02
    3c6c:	9b 83       	std	Y+3, r25	; 0x03
    3c6e:	ac 83       	std	Y+4, r26	; 0x04
    3c70:	bd 83       	std	Y+5, r27	; 0x05
    3c72:	d0 93 94 0a 	sts	0x0A94, r29
    3c76:	c0 93 93 0a 	sts	0x0A93, r28
    3c7a:	df 91       	pop	r29
    3c7c:	cf 91       	pop	r28
    3c7e:	1f 91       	pop	r17
    3c80:	0f 91       	pop	r16
    3c82:	08 95       	ret

00003c84 <SYS_TimerInit>:
    3c84:	10 92 94 0a 	sts	0x0A94, r1
    3c88:	10 92 93 0a 	sts	0x0A93, r1
    3c8c:	08 95       	ret

00003c8e <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    3c8e:	e0 91 93 0a 	lds	r30, 0x0A93
    3c92:	f0 91 94 0a 	lds	r31, 0x0A94
    3c96:	30 97       	sbiw	r30, 0x00	; 0
    3c98:	71 f0       	breq	.+28     	; 0x3cb6 <SYS_TimerStarted+0x28>
    if (t == timer)
    3c9a:	e8 17       	cp	r30, r24
    3c9c:	f9 07       	cpc	r31, r25
    3c9e:	21 f4       	brne	.+8      	; 0x3ca8 <SYS_TimerStarted+0x1a>
    3ca0:	0c c0       	rjmp	.+24     	; 0x3cba <SYS_TimerStarted+0x2c>
    3ca2:	8e 17       	cp	r24, r30
    3ca4:	9f 07       	cpc	r25, r31
    3ca6:	59 f0       	breq	.+22     	; 0x3cbe <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    3ca8:	01 90       	ld	r0, Z+
    3caa:	f0 81       	ld	r31, Z
    3cac:	e0 2d       	mov	r30, r0
    3cae:	30 97       	sbiw	r30, 0x00	; 0
    3cb0:	c1 f7       	brne	.-16     	; 0x3ca2 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    3cb2:	80 e0       	ldi	r24, 0x00	; 0
    3cb4:	08 95       	ret
    3cb6:	80 e0       	ldi	r24, 0x00	; 0
    3cb8:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    3cba:	81 e0       	ldi	r24, 0x01	; 1
    3cbc:	08 95       	ret
    3cbe:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    3cc0:	08 95       	ret

00003cc2 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    3cc2:	cf 93       	push	r28
    3cc4:	df 93       	push	r29
    3cc6:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    3cc8:	e2 df       	rcall	.-60     	; 0x3c8e <SYS_TimerStarted>
    3cca:	81 11       	cpse	r24, r1
    3ccc:	02 c0       	rjmp	.+4      	; 0x3cd2 <SYS_TimerStart+0x10>
    placeTimer(timer);
    3cce:	ce 01       	movw	r24, r28
    3cd0:	75 df       	rcall	.-278    	; 0x3bbc <placeTimer>
}
    3cd2:	df 91       	pop	r29
    3cd4:	cf 91       	pop	r28
    3cd6:	08 95       	ret

00003cd8 <ll_first>:
 * lp is list pointer
 */
llobject_t *
ll_first(lp)
llobject_t *lp;
{
    3cd8:	fc 01       	movw	r30, r24
    if (LL_IS_EMPTY(lp)) {
    3cda:	82 81       	ldd	r24, Z+2	; 0x02
    3cdc:	93 81       	ldd	r25, Z+3	; 0x03
    3cde:	8e 17       	cp	r24, r30
    3ce0:	9f 07       	cpc	r25, r31
    3ce2:	11 f4       	brne	.+4      	; 0x3ce8 <ll_first+0x10>
		return LL_NULL;
    3ce4:	80 e0       	ldi	r24, 0x00	; 0
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
    }
    return lp->next;
}
    3ce8:	08 95       	ret

00003cea <ll_r_insert>:
llobject_t *
ll_r_insert(ip, ep)
llobject_t *ip;
llobject_t *ep;
{
    llobject_t *tp = ip->next;
    3cea:	dc 01       	movw	r26, r24
    3cec:	12 96       	adiw	r26, 0x02	; 2
    3cee:	ed 91       	ld	r30, X+
    3cf0:	fc 91       	ld	r31, X
    3cf2:	13 97       	sbiw	r26, 0x03	; 3

    tp->prev = ep;
    3cf4:	71 83       	std	Z+1, r23	; 0x01
    3cf6:	60 83       	st	Z, r22
    ep->next = tp;
    3cf8:	db 01       	movw	r26, r22
    3cfa:	13 96       	adiw	r26, 0x03	; 3
    3cfc:	fc 93       	st	X, r31
    3cfe:	ee 93       	st	-X, r30
    3d00:	12 97       	sbiw	r26, 0x02	; 2
    ip->next = ep;
    3d02:	fc 01       	movw	r30, r24
    3d04:	73 83       	std	Z+3, r23	; 0x03
    3d06:	62 83       	std	Z+2, r22	; 0x02
    ep->prev = ip;
    3d08:	8d 93       	st	X+, r24
    3d0a:	9c 93       	st	X, r25

    return ep;
}
    3d0c:	cb 01       	movw	r24, r22
    3d0e:	08 95       	ret

00003d10 <ll_detach>:
 */
llobject_t *
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    3d10:	fb 01       	movw	r30, r22
    if (LL_IS_EMPTY(lp) || lp == ep) {
    3d12:	dc 01       	movw	r26, r24
    3d14:	12 96       	adiw	r26, 0x02	; 2
    3d16:	2d 91       	ld	r18, X+
    3d18:	3c 91       	ld	r19, X
    3d1a:	13 97       	sbiw	r26, 0x03	; 3
    3d1c:	28 17       	cp	r18, r24
    3d1e:	39 07       	cpc	r19, r25
    3d20:	a1 f0       	breq	.+40     	; 0x3d4a <ll_detach+0x3a>
    3d22:	86 17       	cp	r24, r22
    3d24:	97 07       	cpc	r25, r23
    3d26:	a1 f0       	breq	.+40     	; 0x3d50 <ll_detach+0x40>
		return LL_NULL;
    }

    (ep->prev)->next = ep->next;
    3d28:	a0 81       	ld	r26, Z
    3d2a:	b1 81       	ldd	r27, Z+1	; 0x01
    3d2c:	82 81       	ldd	r24, Z+2	; 0x02
    3d2e:	93 81       	ldd	r25, Z+3	; 0x03
    3d30:	13 96       	adiw	r26, 0x03	; 3
    3d32:	9c 93       	st	X, r25
    3d34:	8e 93       	st	-X, r24
    3d36:	12 97       	sbiw	r26, 0x02	; 2
    (ep->next)->prev = ep->prev;
    3d38:	a2 81       	ldd	r26, Z+2	; 0x02
    3d3a:	b3 81       	ldd	r27, Z+3	; 0x03
    3d3c:	80 81       	ld	r24, Z
    3d3e:	91 81       	ldd	r25, Z+1	; 0x01
    3d40:	8d 93       	st	X+, r24
    3d42:	9c 93       	st	X, r25

    return ep;
    3d44:	86 2f       	mov	r24, r22
    3d46:	9f 2f       	mov	r25, r31
    3d48:	08 95       	ret
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    if (LL_IS_EMPTY(lp) || lp == ep) {
		return LL_NULL;
    3d4a:	80 e0       	ldi	r24, 0x00	; 0
    3d4c:	90 e0       	ldi	r25, 0x00	; 0
    3d4e:	08 95       	ret
    3d50:	80 e0       	ldi	r24, 0x00	; 0
    3d52:	90 e0       	ldi	r25, 0x00	; 0

    (ep->prev)->next = ep->next;
    (ep->next)->prev = ep->prev;

    return ep;
}
    3d54:	08 95       	ret

00003d56 <ll_pop>:
 */
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
    3d56:	fc 01       	movw	r30, r24
    3d58:	62 81       	ldd	r22, Z+2	; 0x02
    3d5a:	73 81       	ldd	r23, Z+3	; 0x03
    3d5c:	68 17       	cp	r22, r24
    3d5e:	79 07       	cpc	r23, r25
    3d60:	11 f0       	breq	.+4      	; 0x3d66 <ll_pop+0x10>
		return LL_NULL;
    }
    return LL_DETACH(lp, lp->next);
    3d62:	d6 cf       	rjmp	.-84     	; 0x3d10 <ll_detach>
    3d64:	08 95       	ret
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
		return LL_NULL;
    3d66:	80 e0       	ldi	r24, 0x00	; 0
    3d68:	90 e0       	ldi	r25, 0x00	; 0
    }
    return LL_DETACH(lp, lp->next);
}
    3d6a:	08 95       	ret

00003d6c <init_timestamp>:



void init_timestamp(tm *tm_ptr)
{
	tm_ptr->unix_msec=0;
    3d6c:	fc 01       	movw	r30, r24
    3d6e:	14 82       	std	Z+4, r1	; 0x04
    3d70:	15 82       	std	Z+5, r1	; 0x05
    3d72:	16 82       	std	Z+6, r1	; 0x06
    3d74:	17 82       	std	Z+7, r1	; 0x07
	tm_ptr->unix_time=0;
    3d76:	10 82       	st	Z, r1
    3d78:	11 82       	std	Z+1, r1	; 0x01
    3d7a:	12 82       	std	Z+2, r1	; 0x02
    3d7c:	13 82       	std	Z+3, r1	; 0x03
    3d7e:	08 95       	ret

00003d80 <fctn_getStartNum>:
}

int fctn_getStartNum( BaseSensor *this)
{
	return this->StartNum;
}
    3d80:	fc 01       	movw	r30, r24
    3d82:	84 81       	ldd	r24, Z+4	; 0x04
    3d84:	95 81       	ldd	r25, Z+5	; 0x05
    3d86:	08 95       	ret

00003d88 <fctn_getEndNum>:

int fctn_getEndNum( BaseSensor *this)
{
    3d88:	fc 01       	movw	r30, r24
	return ( this->StartNum + this->NumOfData );
    3d8a:	24 81       	ldd	r18, Z+4	; 0x04
    3d8c:	35 81       	ldd	r19, Z+5	; 0x05
    3d8e:	86 81       	ldd	r24, Z+6	; 0x06
    3d90:	97 81       	ldd	r25, Z+7	; 0x07
}
    3d92:	82 0f       	add	r24, r18
    3d94:	93 1f       	adc	r25, r19
    3d96:	08 95       	ret

00003d98 <BMP280_ReadBytes>:
  @brief Gets the oversampling setting for the library
  @return oversampling
*****************************************************************************/
short BMP280_GetOversampling(void){
	return oversampling;
}
    3d98:	1f 93       	push	r17
    3d9a:	cf 93       	push	r28
    3d9c:	df 93       	push	r29
    3d9e:	ec 01       	movw	r28, r24
    3da0:	16 2f       	mov	r17, r22
    3da2:	86 e7       	ldi	r24, 0x76	; 118
    3da4:	c0 d9       	rcall	.-3200   	; 0x3126 <TWI_BeginWrite>
    3da6:	88 81       	ld	r24, Y
    3da8:	b0 d9       	rcall	.-3232   	; 0x310a <TWI_WriteByte>
    3daa:	86 e7       	ldi	r24, 0x76	; 118
    3dac:	d8 d9       	rcall	.-3152   	; 0x315e <TWI_BeginRead>
    3dae:	80 93 95 0a 	sts	0x0A95, r24
    3db2:	80 34       	cpi	r24, 0x40	; 64
    3db4:	71 f4       	brne	.+28     	; 0x3dd2 <BMP280_ReadBytes+0x3a>
    3db6:	61 2f       	mov	r22, r17
    3db8:	70 e0       	ldi	r23, 0x00	; 0
    3dba:	40 e0       	ldi	r20, 0x00	; 0
    3dbc:	ce 01       	movw	r24, r28
    3dbe:	0b da       	rcall	.-3050   	; 0x31d6 <TWI_Read>
    3dc0:	88 7f       	andi	r24, 0xF8	; 248
    3dc2:	88 35       	cpi	r24, 0x58	; 88
    3dc4:	41 f4       	brne	.+16     	; 0x3dd6 <BMP280_ReadBytes+0x3e>
    3dc6:	02 da       	rcall	.-3068   	; 0x31cc <TWI_Stop>
    3dc8:	91 e0       	ldi	r25, 0x01	; 1
    3dca:	81 11       	cpse	r24, r1
    3dcc:	05 c0       	rjmp	.+10     	; 0x3dd8 <BMP280_ReadBytes+0x40>
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	03 c0       	rjmp	.+6      	; 0x3dd8 <BMP280_ReadBytes+0x40>
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	01 c0       	rjmp	.+2      	; 0x3dd8 <BMP280_ReadBytes+0x40>
    3dd6:	90 e0       	ldi	r25, 0x00	; 0
    3dd8:	89 2f       	mov	r24, r25
    3dda:	df 91       	pop	r29
    3ddc:	cf 91       	pop	r28
    3dde:	1f 91       	pop	r17
    3de0:	08 95       	ret

00003de2 <BMP280_ReadUInt>:
    3de2:	0f 93       	push	r16
    3de4:	1f 93       	push	r17
    3de6:	cf 93       	push	r28
    3de8:	df 93       	push	r29
    3dea:	1f 92       	push	r1
    3dec:	1f 92       	push	r1
    3dee:	cd b7       	in	r28, 0x3d	; 61
    3df0:	de b7       	in	r29, 0x3e	; 62
    3df2:	8b 01       	movw	r16, r22
    3df4:	89 83       	std	Y+1, r24	; 0x01
    3df6:	62 e0       	ldi	r22, 0x02	; 2
    3df8:	ce 01       	movw	r24, r28
    3dfa:	01 96       	adiw	r24, 0x01	; 1
    3dfc:	cd df       	rcall	.-102    	; 0x3d98 <BMP280_ReadBytes>
    3dfe:	88 23       	and	r24, r24
    3e00:	59 f0       	breq	.+22     	; 0x3e18 <BMP280_ReadUInt+0x36>
    3e02:	8a 81       	ldd	r24, Y+2	; 0x02
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	98 2f       	mov	r25, r24
    3e08:	88 27       	eor	r24, r24
    3e0a:	29 81       	ldd	r18, Y+1	; 0x01
    3e0c:	82 2b       	or	r24, r18
    3e0e:	f8 01       	movw	r30, r16
    3e10:	91 83       	std	Z+1, r25	; 0x01
    3e12:	80 83       	st	Z, r24
    3e14:	81 e0       	ldi	r24, 0x01	; 1
    3e16:	03 c0       	rjmp	.+6      	; 0x3e1e <BMP280_ReadUInt+0x3c>
    3e18:	f8 01       	movw	r30, r16
    3e1a:	11 82       	std	Z+1, r1	; 0x01
    3e1c:	10 82       	st	Z, r1
    3e1e:	0f 90       	pop	r0
    3e20:	0f 90       	pop	r0
    3e22:	df 91       	pop	r29
    3e24:	cf 91       	pop	r28
    3e26:	1f 91       	pop	r17
    3e28:	0f 91       	pop	r16
    3e2a:	08 95       	ret

00003e2c <BMP280_ReadInt>:
    3e2c:	0f 93       	push	r16
    3e2e:	1f 93       	push	r17
    3e30:	cf 93       	push	r28
    3e32:	df 93       	push	r29
    3e34:	1f 92       	push	r1
    3e36:	1f 92       	push	r1
    3e38:	cd b7       	in	r28, 0x3d	; 61
    3e3a:	de b7       	in	r29, 0x3e	; 62
    3e3c:	8b 01       	movw	r16, r22
    3e3e:	89 83       	std	Y+1, r24	; 0x01
    3e40:	62 e0       	ldi	r22, 0x02	; 2
    3e42:	ce 01       	movw	r24, r28
    3e44:	01 96       	adiw	r24, 0x01	; 1
    3e46:	a8 df       	rcall	.-176    	; 0x3d98 <BMP280_ReadBytes>
    3e48:	88 23       	and	r24, r24
    3e4a:	59 f0       	breq	.+22     	; 0x3e62 <BMP280_ReadInt+0x36>
    3e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    3e4e:	90 e0       	ldi	r25, 0x00	; 0
    3e50:	98 2f       	mov	r25, r24
    3e52:	88 27       	eor	r24, r24
    3e54:	29 81       	ldd	r18, Y+1	; 0x01
    3e56:	82 2b       	or	r24, r18
    3e58:	f8 01       	movw	r30, r16
    3e5a:	91 83       	std	Z+1, r25	; 0x01
    3e5c:	80 83       	st	Z, r24
    3e5e:	81 e0       	ldi	r24, 0x01	; 1
    3e60:	03 c0       	rjmp	.+6      	; 0x3e68 <BMP280_ReadInt+0x3c>
    3e62:	f8 01       	movw	r30, r16
    3e64:	11 82       	std	Z+1, r1	; 0x01
    3e66:	10 82       	st	Z, r1
    3e68:	0f 90       	pop	r0
    3e6a:	0f 90       	pop	r0
    3e6c:	df 91       	pop	r29
    3e6e:	cf 91       	pop	r28
    3e70:	1f 91       	pop	r17
    3e72:	0f 91       	pop	r16
    3e74:	08 95       	ret

00003e76 <BMP280_ReadUChar>:
    3e76:	0f 93       	push	r16
    3e78:	1f 93       	push	r17
    3e7a:	cf 93       	push	r28
    3e7c:	df 93       	push	r29
    3e7e:	1f 92       	push	r1
    3e80:	cd b7       	in	r28, 0x3d	; 61
    3e82:	de b7       	in	r29, 0x3e	; 62
    3e84:	8b 01       	movw	r16, r22
    3e86:	89 83       	std	Y+1, r24	; 0x01
    3e88:	61 e0       	ldi	r22, 0x01	; 1
    3e8a:	ce 01       	movw	r24, r28
    3e8c:	01 96       	adiw	r24, 0x01	; 1
    3e8e:	84 df       	rcall	.-248    	; 0x3d98 <BMP280_ReadBytes>
    3e90:	88 23       	and	r24, r24
    3e92:	a1 f0       	breq	.+40     	; 0x3ebc <BMP280_ReadUChar+0x46>
    3e94:	89 81       	ldd	r24, Y+1	; 0x01
    3e96:	1f 92       	push	r1
    3e98:	8f 93       	push	r24
    3e9a:	89 ee       	ldi	r24, 0xE9	; 233
    3e9c:	95 e0       	ldi	r25, 0x05	; 5
    3e9e:	9f 93       	push	r25
    3ea0:	8f 93       	push	r24
    3ea2:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    3ea6:	89 81       	ldd	r24, Y+1	; 0x01
    3ea8:	90 e0       	ldi	r25, 0x00	; 0
    3eaa:	f8 01       	movw	r30, r16
    3eac:	91 83       	std	Z+1, r25	; 0x01
    3eae:	80 83       	st	Z, r24
    3eb0:	0f 90       	pop	r0
    3eb2:	0f 90       	pop	r0
    3eb4:	0f 90       	pop	r0
    3eb6:	0f 90       	pop	r0
    3eb8:	81 e0       	ldi	r24, 0x01	; 1
    3eba:	03 c0       	rjmp	.+6      	; 0x3ec2 <BMP280_ReadUChar+0x4c>
    3ebc:	f8 01       	movw	r30, r16
    3ebe:	11 82       	std	Z+1, r1	; 0x01
    3ec0:	10 82       	st	Z, r1
    3ec2:	0f 90       	pop	r0
    3ec4:	df 91       	pop	r29
    3ec6:	cf 91       	pop	r28
    3ec8:	1f 91       	pop	r17
    3eca:	0f 91       	pop	r16
    3ecc:	08 95       	ret

00003ece <BMP280_ReadInt4>:
    3ece:	cf 92       	push	r12
    3ed0:	df 92       	push	r13
    3ed2:	ef 92       	push	r14
    3ed4:	ff 92       	push	r15
    3ed6:	0f 93       	push	r16
    3ed8:	1f 93       	push	r17
    3eda:	cf 93       	push	r28
    3edc:	df 93       	push	r29
    3ede:	1f 92       	push	r1
    3ee0:	1f 92       	push	r1
    3ee2:	cd b7       	in	r28, 0x3d	; 61
    3ee4:	de b7       	in	r29, 0x3e	; 62
    3ee6:	7b 01       	movw	r14, r22
    3ee8:	89 83       	std	Y+1, r24	; 0x01
    3eea:	00 91 00 00 	lds	r16, 0x0000
    3eee:	10 91 01 00 	lds	r17, 0x0001
    3ef2:	b8 01       	movw	r22, r16
    3ef4:	8c 2f       	mov	r24, r28
    3ef6:	8f 5f       	subi	r24, 0xFF	; 255
    3ef8:	be df       	rcall	.-132    	; 0x3e76 <BMP280_ReadUChar>
    3efa:	88 23       	and	r24, r24
    3efc:	51 f1       	breq	.+84     	; 0x3f52 <BMP280_ReadInt4+0x84>
    3efe:	c0 90 00 00 	lds	r12, 0x0000
    3f02:	d0 90 01 00 	lds	r13, 0x0001
    3f06:	b6 01       	movw	r22, r12
    3f08:	8c 2f       	mov	r24, r28
    3f0a:	8e 5f       	subi	r24, 0xFE	; 254
    3f0c:	b4 df       	rcall	.-152    	; 0x3e76 <BMP280_ReadUChar>
    3f0e:	88 23       	and	r24, r24
    3f10:	01 f1       	breq	.+64     	; 0x3f52 <BMP280_ReadInt4+0x84>
    3f12:	df 92       	push	r13
    3f14:	cf 92       	push	r12
    3f16:	1f 93       	push	r17
    3f18:	0f 93       	push	r16
    3f1a:	8f ef       	ldi	r24, 0xFF	; 255
    3f1c:	95 e0       	ldi	r25, 0x05	; 5
    3f1e:	9f 93       	push	r25
    3f20:	8f 93       	push	r24
    3f22:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    3f26:	02 95       	swap	r16
    3f28:	12 95       	swap	r17
    3f2a:	10 7f       	andi	r17, 0xF0	; 240
    3f2c:	10 27       	eor	r17, r16
    3f2e:	00 7f       	andi	r16, 0xF0	; 240
    3f30:	10 27       	eor	r17, r16
    3f32:	8f e0       	ldi	r24, 0x0F	; 15
    3f34:	c8 22       	and	r12, r24
    3f36:	dd 24       	eor	r13, r13
    3f38:	0c 29       	or	r16, r12
    3f3a:	1d 29       	or	r17, r13
    3f3c:	f7 01       	movw	r30, r14
    3f3e:	11 83       	std	Z+1, r17	; 0x01
    3f40:	00 83       	st	Z, r16
    3f42:	0f 90       	pop	r0
    3f44:	0f 90       	pop	r0
    3f46:	0f 90       	pop	r0
    3f48:	0f 90       	pop	r0
    3f4a:	0f 90       	pop	r0
    3f4c:	0f 90       	pop	r0
    3f4e:	81 e0       	ldi	r24, 0x01	; 1
    3f50:	04 c0       	rjmp	.+8      	; 0x3f5a <BMP280_ReadInt4+0x8c>
    3f52:	f7 01       	movw	r30, r14
    3f54:	11 82       	std	Z+1, r1	; 0x01
    3f56:	10 82       	st	Z, r1
    3f58:	80 e0       	ldi	r24, 0x00	; 0
    3f5a:	0f 90       	pop	r0
    3f5c:	0f 90       	pop	r0
    3f5e:	df 91       	pop	r29
    3f60:	cf 91       	pop	r28
    3f62:	1f 91       	pop	r17
    3f64:	0f 91       	pop	r16
    3f66:	ff 90       	pop	r15
    3f68:	ef 90       	pop	r14
    3f6a:	df 90       	pop	r13
    3f6c:	cf 90       	pop	r12
    3f6e:	08 95       	ret

00003f70 <BMP280_ReadInt5>:
    3f70:	cf 92       	push	r12
    3f72:	df 92       	push	r13
    3f74:	ef 92       	push	r14
    3f76:	ff 92       	push	r15
    3f78:	0f 93       	push	r16
    3f7a:	1f 93       	push	r17
    3f7c:	cf 93       	push	r28
    3f7e:	df 93       	push	r29
    3f80:	1f 92       	push	r1
    3f82:	1f 92       	push	r1
    3f84:	cd b7       	in	r28, 0x3d	; 61
    3f86:	de b7       	in	r29, 0x3e	; 62
    3f88:	7b 01       	movw	r14, r22
    3f8a:	89 83       	std	Y+1, r24	; 0x01
    3f8c:	00 91 00 00 	lds	r16, 0x0000
    3f90:	10 91 01 00 	lds	r17, 0x0001
    3f94:	b8 01       	movw	r22, r16
    3f96:	8c 2f       	mov	r24, r28
    3f98:	8f 5f       	subi	r24, 0xFF	; 255
    3f9a:	6d df       	rcall	.-294    	; 0x3e76 <BMP280_ReadUChar>
    3f9c:	88 23       	and	r24, r24
    3f9e:	09 f1       	breq	.+66     	; 0x3fe2 <BMP280_ReadInt5+0x72>
    3fa0:	c0 90 00 00 	lds	r12, 0x0000
    3fa4:	d0 90 01 00 	lds	r13, 0x0001
    3fa8:	b6 01       	movw	r22, r12
    3faa:	8c 2f       	mov	r24, r28
    3fac:	8e 5f       	subi	r24, 0xFE	; 254
    3fae:	63 df       	rcall	.-314    	; 0x3e76 <BMP280_ReadUChar>
    3fb0:	88 23       	and	r24, r24
    3fb2:	b9 f0       	breq	.+46     	; 0x3fe2 <BMP280_ReadInt5+0x72>
    3fb4:	15 95       	asr	r17
    3fb6:	07 95       	ror	r16
    3fb8:	15 95       	asr	r17
    3fba:	07 95       	ror	r16
    3fbc:	15 95       	asr	r17
    3fbe:	07 95       	ror	r16
    3fc0:	15 95       	asr	r17
    3fc2:	07 95       	ror	r16
    3fc4:	cc 0c       	add	r12, r12
    3fc6:	dd 1c       	adc	r13, r13
    3fc8:	cc 0c       	add	r12, r12
    3fca:	dd 1c       	adc	r13, r13
    3fcc:	cc 0c       	add	r12, r12
    3fce:	dd 1c       	adc	r13, r13
    3fd0:	cc 0c       	add	r12, r12
    3fd2:	dd 1c       	adc	r13, r13
    3fd4:	0c 29       	or	r16, r12
    3fd6:	1d 29       	or	r17, r13
    3fd8:	f7 01       	movw	r30, r14
    3fda:	11 83       	std	Z+1, r17	; 0x01
    3fdc:	00 83       	st	Z, r16
    3fde:	81 e0       	ldi	r24, 0x01	; 1
    3fe0:	04 c0       	rjmp	.+8      	; 0x3fea <BMP280_ReadInt5+0x7a>
    3fe2:	f7 01       	movw	r30, r14
    3fe4:	11 82       	std	Z+1, r1	; 0x01
    3fe6:	10 82       	st	Z, r1
    3fe8:	80 e0       	ldi	r24, 0x00	; 0
    3fea:	0f 90       	pop	r0
    3fec:	0f 90       	pop	r0
    3fee:	df 91       	pop	r29
    3ff0:	cf 91       	pop	r28
    3ff2:	1f 91       	pop	r17
    3ff4:	0f 91       	pop	r16
    3ff6:	ff 90       	pop	r15
    3ff8:	ef 90       	pop	r14
    3ffa:	df 90       	pop	r13
    3ffc:	cf 90       	pop	r12
    3ffe:	08 95       	ret

00004000 <BME280_ClearCalibration>:
    4000:	10 92 a5 0a 	sts	0x0AA5, r1
    4004:	10 92 a4 0a 	sts	0x0AA4, r1
    4008:	10 92 bf 0a 	sts	0x0ABF, r1
    400c:	10 92 be 0a 	sts	0x0ABE, r1
    4010:	10 92 bd 0a 	sts	0x0ABD, r1
    4014:	10 92 bc 0a 	sts	0x0ABC, r1
    4018:	10 92 a3 0a 	sts	0x0AA3, r1
    401c:	10 92 a2 0a 	sts	0x0AA2, r1
    4020:	10 92 bb 0a 	sts	0x0ABB, r1
    4024:	10 92 ba 0a 	sts	0x0ABA, r1
    4028:	10 92 b9 0a 	sts	0x0AB9, r1
    402c:	10 92 b8 0a 	sts	0x0AB8, r1
    4030:	10 92 b7 0a 	sts	0x0AB7, r1
    4034:	10 92 b6 0a 	sts	0x0AB6, r1
    4038:	10 92 b5 0a 	sts	0x0AB5, r1
    403c:	10 92 b4 0a 	sts	0x0AB4, r1
    4040:	10 92 b3 0a 	sts	0x0AB3, r1
    4044:	10 92 b2 0a 	sts	0x0AB2, r1
    4048:	10 92 b1 0a 	sts	0x0AB1, r1
    404c:	10 92 b0 0a 	sts	0x0AB0, r1
    4050:	10 92 af 0a 	sts	0x0AAF, r1
    4054:	10 92 ae 0a 	sts	0x0AAE, r1
    4058:	10 92 ad 0a 	sts	0x0AAD, r1
    405c:	10 92 ac 0a 	sts	0x0AAC, r1
    4060:	10 92 a1 0a 	sts	0x0AA1, r1
    4064:	10 92 ab 0a 	sts	0x0AAB, r1
    4068:	10 92 aa 0a 	sts	0x0AAA, r1
    406c:	10 92 a0 0a 	sts	0x0AA0, r1
    4070:	10 92 a9 0a 	sts	0x0AA9, r1
    4074:	10 92 a8 0a 	sts	0x0AA8, r1
    4078:	10 92 a7 0a 	sts	0x0AA7, r1
    407c:	10 92 a6 0a 	sts	0x0AA6, r1
    4080:	10 92 9f 0a 	sts	0x0A9F, r1
    4084:	08 95       	ret

00004086 <BMP280_Init>:
    4086:	0f 93       	push	r16
    4088:	1f 93       	push	r17
    408a:	cf 93       	push	r28
    408c:	df 93       	push	r29
    408e:	1f 92       	push	r1
    4090:	cd b7       	in	r28, 0x3d	; 61
    4092:	de b7       	in	r29, 0x3e	; 62
    4094:	b5 df       	rcall	.-150    	; 0x4000 <BME280_ClearCalibration>
    4096:	64 ea       	ldi	r22, 0xA4	; 164
    4098:	7a e0       	ldi	r23, 0x0A	; 10
    409a:	88 e8       	ldi	r24, 0x88	; 136
    409c:	a2 de       	rcall	.-700    	; 0x3de2 <BMP280_ReadUInt>
    409e:	1f 92       	push	r1
    40a0:	8f 93       	push	r24
    40a2:	07 e1       	ldi	r16, 0x17	; 23
    40a4:	16 e0       	ldi	r17, 0x06	; 6
    40a6:	1f 93       	push	r17
    40a8:	0f 93       	push	r16
    40aa:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    40ae:	6e eb       	ldi	r22, 0xBE	; 190
    40b0:	7a e0       	ldi	r23, 0x0A	; 10
    40b2:	8a e8       	ldi	r24, 0x8A	; 138
    40b4:	bb de       	rcall	.-650    	; 0x3e2c <BMP280_ReadInt>
    40b6:	1f 92       	push	r1
    40b8:	8f 93       	push	r24
    40ba:	1f 93       	push	r17
    40bc:	0f 93       	push	r16
    40be:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    40c2:	6c eb       	ldi	r22, 0xBC	; 188
    40c4:	7a e0       	ldi	r23, 0x0A	; 10
    40c6:	8c e8       	ldi	r24, 0x8C	; 140
    40c8:	b1 de       	rcall	.-670    	; 0x3e2c <BMP280_ReadInt>
    40ca:	1f 92       	push	r1
    40cc:	8f 93       	push	r24
    40ce:	1f 93       	push	r17
    40d0:	0f 93       	push	r16
    40d2:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    40d6:	62 ea       	ldi	r22, 0xA2	; 162
    40d8:	7a e0       	ldi	r23, 0x0A	; 10
    40da:	8e e8       	ldi	r24, 0x8E	; 142
    40dc:	82 de       	rcall	.-764    	; 0x3de2 <BMP280_ReadUInt>
    40de:	1f 92       	push	r1
    40e0:	8f 93       	push	r24
    40e2:	1f 93       	push	r17
    40e4:	0f 93       	push	r16
    40e6:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    40ea:	6a eb       	ldi	r22, 0xBA	; 186
    40ec:	7a e0       	ldi	r23, 0x0A	; 10
    40ee:	80 e9       	ldi	r24, 0x90	; 144
    40f0:	9d de       	rcall	.-710    	; 0x3e2c <BMP280_ReadInt>
    40f2:	1f 92       	push	r1
    40f4:	8f 93       	push	r24
    40f6:	1f 93       	push	r17
    40f8:	0f 93       	push	r16
    40fa:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    40fe:	68 eb       	ldi	r22, 0xB8	; 184
    4100:	7a e0       	ldi	r23, 0x0A	; 10
    4102:	82 e9       	ldi	r24, 0x92	; 146
    4104:	93 de       	rcall	.-730    	; 0x3e2c <BMP280_ReadInt>
    4106:	1f 92       	push	r1
    4108:	8f 93       	push	r24
    410a:	1f 93       	push	r17
    410c:	0f 93       	push	r16
    410e:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    4112:	66 eb       	ldi	r22, 0xB6	; 182
    4114:	7a e0       	ldi	r23, 0x0A	; 10
    4116:	84 e9       	ldi	r24, 0x94	; 148
    4118:	89 de       	rcall	.-750    	; 0x3e2c <BMP280_ReadInt>
    411a:	1f 92       	push	r1
    411c:	8f 93       	push	r24
    411e:	1f 93       	push	r17
    4120:	0f 93       	push	r16
    4122:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    4126:	64 eb       	ldi	r22, 0xB4	; 180
    4128:	7a e0       	ldi	r23, 0x0A	; 10
    412a:	86 e9       	ldi	r24, 0x96	; 150
    412c:	7f de       	rcall	.-770    	; 0x3e2c <BMP280_ReadInt>
    412e:	1f 92       	push	r1
    4130:	8f 93       	push	r24
    4132:	1f 93       	push	r17
    4134:	0f 93       	push	r16
    4136:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    413a:	0f b6       	in	r0, 0x3f	; 63
    413c:	f8 94       	cli
    413e:	de bf       	out	0x3e, r29	; 62
    4140:	0f be       	out	0x3f, r0	; 63
    4142:	cd bf       	out	0x3d, r28	; 61
    4144:	62 eb       	ldi	r22, 0xB2	; 178
    4146:	7a e0       	ldi	r23, 0x0A	; 10
    4148:	88 e9       	ldi	r24, 0x98	; 152
    414a:	70 de       	rcall	.-800    	; 0x3e2c <BMP280_ReadInt>
    414c:	1f 92       	push	r1
    414e:	8f 93       	push	r24
    4150:	1f 93       	push	r17
    4152:	0f 93       	push	r16
    4154:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    4158:	60 eb       	ldi	r22, 0xB0	; 176
    415a:	7a e0       	ldi	r23, 0x0A	; 10
    415c:	8a e9       	ldi	r24, 0x9A	; 154
    415e:	66 de       	rcall	.-820    	; 0x3e2c <BMP280_ReadInt>
    4160:	1f 92       	push	r1
    4162:	8f 93       	push	r24
    4164:	1f 93       	push	r17
    4166:	0f 93       	push	r16
    4168:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    416c:	6e ea       	ldi	r22, 0xAE	; 174
    416e:	7a e0       	ldi	r23, 0x0A	; 10
    4170:	8c e9       	ldi	r24, 0x9C	; 156
    4172:	5c de       	rcall	.-840    	; 0x3e2c <BMP280_ReadInt>
    4174:	1f 92       	push	r1
    4176:	8f 93       	push	r24
    4178:	1f 93       	push	r17
    417a:	0f 93       	push	r16
    417c:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    4180:	6c ea       	ldi	r22, 0xAC	; 172
    4182:	7a e0       	ldi	r23, 0x0A	; 10
    4184:	8e e9       	ldi	r24, 0x9E	; 158
    4186:	52 de       	rcall	.-860    	; 0x3e2c <BMP280_ReadInt>
    4188:	1f 92       	push	r1
    418a:	8f 93       	push	r24
    418c:	1f 93       	push	r17
    418e:	0f 93       	push	r16
    4190:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    4194:	61 ea       	ldi	r22, 0xA1	; 161
    4196:	7a e0       	ldi	r23, 0x0A	; 10
    4198:	81 ea       	ldi	r24, 0xA1	; 161
    419a:	6d de       	rcall	.-806    	; 0x3e76 <BMP280_ReadUChar>
    419c:	1f 92       	push	r1
    419e:	8f 93       	push	r24
    41a0:	1f 93       	push	r17
    41a2:	0f 93       	push	r16
    41a4:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    41a8:	80 91 a1 0a 	lds	r24, 0x0AA1
    41ac:	1f 92       	push	r1
    41ae:	8f 93       	push	r24
    41b0:	88 e2       	ldi	r24, 0x28	; 40
    41b2:	96 e0       	ldi	r25, 0x06	; 6
    41b4:	9f 93       	push	r25
    41b6:	8f 93       	push	r24
    41b8:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    41bc:	6a ea       	ldi	r22, 0xAA	; 170
    41be:	7a e0       	ldi	r23, 0x0A	; 10
    41c0:	81 ee       	ldi	r24, 0xE1	; 225
    41c2:	34 de       	rcall	.-920    	; 0x3e2c <BMP280_ReadInt>
    41c4:	1f 92       	push	r1
    41c6:	8f 93       	push	r24
    41c8:	1f 93       	push	r17
    41ca:	0f 93       	push	r16
    41cc:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    41d0:	80 91 ab 0a 	lds	r24, 0x0AAB
    41d4:	8f 93       	push	r24
    41d6:	80 91 aa 0a 	lds	r24, 0x0AAA
    41da:	8f 93       	push	r24
    41dc:	87 e3       	ldi	r24, 0x37	; 55
    41de:	96 e0       	ldi	r25, 0x06	; 6
    41e0:	9f 93       	push	r25
    41e2:	8f 93       	push	r24
    41e4:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    41e8:	0f b6       	in	r0, 0x3f	; 63
    41ea:	f8 94       	cli
    41ec:	de bf       	out	0x3e, r29	; 62
    41ee:	0f be       	out	0x3f, r0	; 63
    41f0:	cd bf       	out	0x3d, r28	; 61
    41f2:	60 ea       	ldi	r22, 0xA0	; 160
    41f4:	7a e0       	ldi	r23, 0x0A	; 10
    41f6:	83 ee       	ldi	r24, 0xE3	; 227
    41f8:	3e de       	rcall	.-900    	; 0x3e76 <BMP280_ReadUChar>
    41fa:	1f 92       	push	r1
    41fc:	8f 93       	push	r24
    41fe:	1f 93       	push	r17
    4200:	0f 93       	push	r16
    4202:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    4206:	80 91 a0 0a 	lds	r24, 0x0AA0
    420a:	1f 92       	push	r1
    420c:	8f 93       	push	r24
    420e:	86 e4       	ldi	r24, 0x46	; 70
    4210:	96 e0       	ldi	r25, 0x06	; 6
    4212:	9f 93       	push	r25
    4214:	8f 93       	push	r24
    4216:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    421a:	68 ea       	ldi	r22, 0xA8	; 168
    421c:	7a e0       	ldi	r23, 0x0A	; 10
    421e:	84 ee       	ldi	r24, 0xE4	; 228
    4220:	56 de       	rcall	.-852    	; 0x3ece <BMP280_ReadInt4>
    4222:	1f 92       	push	r1
    4224:	8f 93       	push	r24
    4226:	1f 93       	push	r17
    4228:	0f 93       	push	r16
    422a:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    422e:	80 91 a9 0a 	lds	r24, 0x0AA9
    4232:	8f 93       	push	r24
    4234:	80 91 a8 0a 	lds	r24, 0x0AA8
    4238:	8f 93       	push	r24
    423a:	85 e5       	ldi	r24, 0x55	; 85
    423c:	96 e0       	ldi	r25, 0x06	; 6
    423e:	9f 93       	push	r25
    4240:	8f 93       	push	r24
    4242:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    4246:	66 ea       	ldi	r22, 0xA6	; 166
    4248:	7a e0       	ldi	r23, 0x0A	; 10
    424a:	85 ee       	ldi	r24, 0xE5	; 229
    424c:	91 de       	rcall	.-734    	; 0x3f70 <BMP280_ReadInt5>
    424e:	1f 92       	push	r1
    4250:	8f 93       	push	r24
    4252:	1f 93       	push	r17
    4254:	0f 93       	push	r16
    4256:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    425a:	80 91 a7 0a 	lds	r24, 0x0AA7
    425e:	8f 93       	push	r24
    4260:	80 91 a6 0a 	lds	r24, 0x0AA6
    4264:	8f 93       	push	r24
    4266:	84 e6       	ldi	r24, 0x64	; 100
    4268:	96 e0       	ldi	r25, 0x06	; 6
    426a:	9f 93       	push	r25
    426c:	8f 93       	push	r24
    426e:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    4272:	87 ee       	ldi	r24, 0xE7	; 231
    4274:	89 83       	std	Y+1, r24	; 0x01
    4276:	61 e0       	ldi	r22, 0x01	; 1
    4278:	ce 01       	movw	r24, r28
    427a:	01 96       	adiw	r24, 0x01	; 1
    427c:	8d dd       	rcall	.-1254   	; 0x3d98 <BMP280_ReadBytes>
    427e:	0f b6       	in	r0, 0x3f	; 63
    4280:	f8 94       	cli
    4282:	de bf       	out	0x3e, r29	; 62
    4284:	0f be       	out	0x3f, r0	; 63
    4286:	cd bf       	out	0x3d, r28	; 61
    4288:	88 23       	and	r24, r24
    428a:	41 f0       	breq	.+16     	; 0x429c <BMP280_Init+0x216>
    428c:	89 81       	ldd	r24, Y+1	; 0x01
    428e:	90 e0       	ldi	r25, 0x00	; 0
    4290:	90 93 a0 0a 	sts	0x0AA0, r25
    4294:	80 93 9f 0a 	sts	0x0A9F, r24
    4298:	81 e0       	ldi	r24, 0x01	; 1
    429a:	04 c0       	rjmp	.+8      	; 0x42a4 <BMP280_Init+0x21e>
    429c:	10 92 a0 0a 	sts	0x0AA0, r1
    42a0:	10 92 9f 0a 	sts	0x0A9F, r1
    42a4:	1f 92       	push	r1
    42a6:	8f 93       	push	r24
    42a8:	87 e1       	ldi	r24, 0x17	; 23
    42aa:	96 e0       	ldi	r25, 0x06	; 6
    42ac:	9f 93       	push	r25
    42ae:	8f 93       	push	r24
    42b0:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    42b4:	80 91 9f 0a 	lds	r24, 0x0A9F
    42b8:	28 2f       	mov	r18, r24
    42ba:	08 2e       	mov	r0, r24
    42bc:	00 0c       	add	r0, r0
    42be:	33 0b       	sbc	r19, r19
    42c0:	3f 93       	push	r19
    42c2:	8f 93       	push	r24
    42c4:	83 e7       	ldi	r24, 0x73	; 115
    42c6:	96 e0       	ldi	r25, 0x06	; 6
    42c8:	9f 93       	push	r25
    42ca:	8f 93       	push	r24
    42cc:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    42d0:	64 ea       	ldi	r22, 0xA4	; 164
    42d2:	7a e0       	ldi	r23, 0x0A	; 10
    42d4:	88 e8       	ldi	r24, 0x88	; 136
    42d6:	85 dd       	rcall	.-1270   	; 0x3de2 <BMP280_ReadUInt>
    42d8:	0f b6       	in	r0, 0x3f	; 63
    42da:	f8 94       	cli
    42dc:	de bf       	out	0x3e, r29	; 62
    42de:	0f be       	out	0x3f, r0	; 63
    42e0:	cd bf       	out	0x3d, r28	; 61
    42e2:	88 23       	and	r24, r24
    42e4:	09 f4       	brne	.+2      	; 0x42e8 <BMP280_Init+0x262>
    42e6:	f8 c0       	rjmp	.+496    	; 0x44d8 <BMP280_Init+0x452>
    42e8:	6e eb       	ldi	r22, 0xBE	; 190
    42ea:	7a e0       	ldi	r23, 0x0A	; 10
    42ec:	8a e8       	ldi	r24, 0x8A	; 138
    42ee:	9e dd       	rcall	.-1220   	; 0x3e2c <BMP280_ReadInt>
    42f0:	88 23       	and	r24, r24
    42f2:	09 f4       	brne	.+2      	; 0x42f6 <BMP280_Init+0x270>
    42f4:	f1 c0       	rjmp	.+482    	; 0x44d8 <BMP280_Init+0x452>
    42f6:	6c eb       	ldi	r22, 0xBC	; 188
    42f8:	7a e0       	ldi	r23, 0x0A	; 10
    42fa:	8c e8       	ldi	r24, 0x8C	; 140
    42fc:	97 dd       	rcall	.-1234   	; 0x3e2c <BMP280_ReadInt>
    42fe:	88 23       	and	r24, r24
    4300:	09 f4       	brne	.+2      	; 0x4304 <BMP280_Init+0x27e>
    4302:	ea c0       	rjmp	.+468    	; 0x44d8 <BMP280_Init+0x452>
    4304:	62 ea       	ldi	r22, 0xA2	; 162
    4306:	7a e0       	ldi	r23, 0x0A	; 10
    4308:	8e e8       	ldi	r24, 0x8E	; 142
    430a:	6b dd       	rcall	.-1322   	; 0x3de2 <BMP280_ReadUInt>
    430c:	88 23       	and	r24, r24
    430e:	09 f4       	brne	.+2      	; 0x4312 <BMP280_Init+0x28c>
    4310:	e3 c0       	rjmp	.+454    	; 0x44d8 <BMP280_Init+0x452>
    4312:	6a eb       	ldi	r22, 0xBA	; 186
    4314:	7a e0       	ldi	r23, 0x0A	; 10
    4316:	80 e9       	ldi	r24, 0x90	; 144
    4318:	89 dd       	rcall	.-1262   	; 0x3e2c <BMP280_ReadInt>
    431a:	88 23       	and	r24, r24
    431c:	09 f4       	brne	.+2      	; 0x4320 <BMP280_Init+0x29a>
    431e:	dc c0       	rjmp	.+440    	; 0x44d8 <BMP280_Init+0x452>
    4320:	68 eb       	ldi	r22, 0xB8	; 184
    4322:	7a e0       	ldi	r23, 0x0A	; 10
    4324:	82 e9       	ldi	r24, 0x92	; 146
    4326:	82 dd       	rcall	.-1276   	; 0x3e2c <BMP280_ReadInt>
    4328:	88 23       	and	r24, r24
    432a:	09 f4       	brne	.+2      	; 0x432e <BMP280_Init+0x2a8>
    432c:	d5 c0       	rjmp	.+426    	; 0x44d8 <BMP280_Init+0x452>
    432e:	66 eb       	ldi	r22, 0xB6	; 182
    4330:	7a e0       	ldi	r23, 0x0A	; 10
    4332:	84 e9       	ldi	r24, 0x94	; 148
    4334:	7b dd       	rcall	.-1290   	; 0x3e2c <BMP280_ReadInt>
    4336:	88 23       	and	r24, r24
    4338:	09 f4       	brne	.+2      	; 0x433c <BMP280_Init+0x2b6>
    433a:	ce c0       	rjmp	.+412    	; 0x44d8 <BMP280_Init+0x452>
    433c:	64 eb       	ldi	r22, 0xB4	; 180
    433e:	7a e0       	ldi	r23, 0x0A	; 10
    4340:	86 e9       	ldi	r24, 0x96	; 150
    4342:	74 dd       	rcall	.-1304   	; 0x3e2c <BMP280_ReadInt>
    4344:	88 23       	and	r24, r24
    4346:	09 f4       	brne	.+2      	; 0x434a <BMP280_Init+0x2c4>
    4348:	c7 c0       	rjmp	.+398    	; 0x44d8 <BMP280_Init+0x452>
    434a:	62 eb       	ldi	r22, 0xB2	; 178
    434c:	7a e0       	ldi	r23, 0x0A	; 10
    434e:	88 e9       	ldi	r24, 0x98	; 152
    4350:	6d dd       	rcall	.-1318   	; 0x3e2c <BMP280_ReadInt>
    4352:	88 23       	and	r24, r24
    4354:	09 f4       	brne	.+2      	; 0x4358 <BMP280_Init+0x2d2>
    4356:	c0 c0       	rjmp	.+384    	; 0x44d8 <BMP280_Init+0x452>
    4358:	60 eb       	ldi	r22, 0xB0	; 176
    435a:	7a e0       	ldi	r23, 0x0A	; 10
    435c:	8a e9       	ldi	r24, 0x9A	; 154
    435e:	66 dd       	rcall	.-1332   	; 0x3e2c <BMP280_ReadInt>
    4360:	88 23       	and	r24, r24
    4362:	09 f4       	brne	.+2      	; 0x4366 <BMP280_Init+0x2e0>
    4364:	b9 c0       	rjmp	.+370    	; 0x44d8 <BMP280_Init+0x452>
    4366:	6e ea       	ldi	r22, 0xAE	; 174
    4368:	7a e0       	ldi	r23, 0x0A	; 10
    436a:	8c e9       	ldi	r24, 0x9C	; 156
    436c:	5f dd       	rcall	.-1346   	; 0x3e2c <BMP280_ReadInt>
    436e:	88 23       	and	r24, r24
    4370:	09 f4       	brne	.+2      	; 0x4374 <BMP280_Init+0x2ee>
    4372:	b2 c0       	rjmp	.+356    	; 0x44d8 <BMP280_Init+0x452>
    4374:	6c ea       	ldi	r22, 0xAC	; 172
    4376:	7a e0       	ldi	r23, 0x0A	; 10
    4378:	8e e9       	ldi	r24, 0x9E	; 158
    437a:	58 dd       	rcall	.-1360   	; 0x3e2c <BMP280_ReadInt>
    437c:	88 23       	and	r24, r24
    437e:	09 f4       	brne	.+2      	; 0x4382 <BMP280_Init+0x2fc>
    4380:	ab c0       	rjmp	.+342    	; 0x44d8 <BMP280_Init+0x452>
    4382:	61 ea       	ldi	r22, 0xA1	; 161
    4384:	7a e0       	ldi	r23, 0x0A	; 10
    4386:	81 ea       	ldi	r24, 0xA1	; 161
    4388:	76 dd       	rcall	.-1300   	; 0x3e76 <BMP280_ReadUChar>
    438a:	88 23       	and	r24, r24
    438c:	09 f4       	brne	.+2      	; 0x4390 <BMP280_Init+0x30a>
    438e:	a4 c0       	rjmp	.+328    	; 0x44d8 <BMP280_Init+0x452>
    4390:	6a ea       	ldi	r22, 0xAA	; 170
    4392:	7a e0       	ldi	r23, 0x0A	; 10
    4394:	81 ee       	ldi	r24, 0xE1	; 225
    4396:	4a dd       	rcall	.-1388   	; 0x3e2c <BMP280_ReadInt>
    4398:	88 23       	and	r24, r24
    439a:	09 f4       	brne	.+2      	; 0x439e <BMP280_Init+0x318>
    439c:	9d c0       	rjmp	.+314    	; 0x44d8 <BMP280_Init+0x452>
    439e:	60 ea       	ldi	r22, 0xA0	; 160
    43a0:	7a e0       	ldi	r23, 0x0A	; 10
    43a2:	83 ee       	ldi	r24, 0xE3	; 227
    43a4:	68 dd       	rcall	.-1328   	; 0x3e76 <BMP280_ReadUChar>
    43a6:	88 23       	and	r24, r24
    43a8:	09 f4       	brne	.+2      	; 0x43ac <BMP280_Init+0x326>
    43aa:	96 c0       	rjmp	.+300    	; 0x44d8 <BMP280_Init+0x452>
    43ac:	68 ea       	ldi	r22, 0xA8	; 168
    43ae:	7a e0       	ldi	r23, 0x0A	; 10
    43b0:	84 ee       	ldi	r24, 0xE4	; 228
    43b2:	8d dd       	rcall	.-1254   	; 0x3ece <BMP280_ReadInt4>
    43b4:	88 23       	and	r24, r24
    43b6:	09 f4       	brne	.+2      	; 0x43ba <BMP280_Init+0x334>
    43b8:	8f c0       	rjmp	.+286    	; 0x44d8 <BMP280_Init+0x452>
    43ba:	66 ea       	ldi	r22, 0xA6	; 166
    43bc:	7a e0       	ldi	r23, 0x0A	; 10
    43be:	85 ee       	ldi	r24, 0xE5	; 229
    43c0:	d7 dd       	rcall	.-1106   	; 0x3f70 <BMP280_ReadInt5>
    43c2:	88 23       	and	r24, r24
    43c4:	09 f4       	brne	.+2      	; 0x43c8 <BMP280_Init+0x342>
    43c6:	88 c0       	rjmp	.+272    	; 0x44d8 <BMP280_Init+0x452>
    43c8:	87 ee       	ldi	r24, 0xE7	; 231
    43ca:	89 83       	std	Y+1, r24	; 0x01
    43cc:	61 e0       	ldi	r22, 0x01	; 1
    43ce:	ce 01       	movw	r24, r28
    43d0:	01 96       	adiw	r24, 0x01	; 1
    43d2:	e2 dc       	rcall	.-1596   	; 0x3d98 <BMP280_ReadBytes>
    43d4:	88 23       	and	r24, r24
    43d6:	09 f4       	brne	.+2      	; 0x43da <BMP280_Init+0x354>
    43d8:	7b c0       	rjmp	.+246    	; 0x44d0 <BMP280_Init+0x44a>
    43da:	89 81       	ldd	r24, Y+1	; 0x01
    43dc:	90 e0       	ldi	r25, 0x00	; 0
    43de:	90 93 a0 0a 	sts	0x0AA0, r25
    43e2:	80 93 9f 0a 	sts	0x0A9F, r24
    43e6:	28 2f       	mov	r18, r24
    43e8:	08 2e       	mov	r0, r24
    43ea:	00 0c       	add	r0, r0
    43ec:	33 0b       	sbc	r19, r19
    43ee:	3f 93       	push	r19
    43f0:	8f 93       	push	r24
    43f2:	80 91 a7 0a 	lds	r24, 0x0AA7
    43f6:	8f 93       	push	r24
    43f8:	80 91 a6 0a 	lds	r24, 0x0AA6
    43fc:	8f 93       	push	r24
    43fe:	80 91 a9 0a 	lds	r24, 0x0AA9
    4402:	8f 93       	push	r24
    4404:	80 91 a8 0a 	lds	r24, 0x0AA8
    4408:	8f 93       	push	r24
    440a:	80 91 a0 0a 	lds	r24, 0x0AA0
    440e:	1f 92       	push	r1
    4410:	8f 93       	push	r24
    4412:	80 91 ab 0a 	lds	r24, 0x0AAB
    4416:	8f 93       	push	r24
    4418:	80 91 aa 0a 	lds	r24, 0x0AAA
    441c:	8f 93       	push	r24
    441e:	80 91 a1 0a 	lds	r24, 0x0AA1
    4422:	1f 92       	push	r1
    4424:	8f 93       	push	r24
    4426:	80 91 ad 0a 	lds	r24, 0x0AAD
    442a:	8f 93       	push	r24
    442c:	80 91 ac 0a 	lds	r24, 0x0AAC
    4430:	8f 93       	push	r24
    4432:	80 91 af 0a 	lds	r24, 0x0AAF
    4436:	8f 93       	push	r24
    4438:	80 91 ae 0a 	lds	r24, 0x0AAE
    443c:	8f 93       	push	r24
    443e:	80 91 b1 0a 	lds	r24, 0x0AB1
    4442:	8f 93       	push	r24
    4444:	80 91 b0 0a 	lds	r24, 0x0AB0
    4448:	8f 93       	push	r24
    444a:	80 91 b3 0a 	lds	r24, 0x0AB3
    444e:	8f 93       	push	r24
    4450:	80 91 b2 0a 	lds	r24, 0x0AB2
    4454:	8f 93       	push	r24
    4456:	80 91 b5 0a 	lds	r24, 0x0AB5
    445a:	8f 93       	push	r24
    445c:	80 91 b4 0a 	lds	r24, 0x0AB4
    4460:	8f 93       	push	r24
    4462:	80 91 b7 0a 	lds	r24, 0x0AB7
    4466:	8f 93       	push	r24
    4468:	80 91 b6 0a 	lds	r24, 0x0AB6
    446c:	8f 93       	push	r24
    446e:	80 91 b9 0a 	lds	r24, 0x0AB9
    4472:	8f 93       	push	r24
    4474:	80 91 b8 0a 	lds	r24, 0x0AB8
    4478:	8f 93       	push	r24
    447a:	80 91 bb 0a 	lds	r24, 0x0ABB
    447e:	8f 93       	push	r24
    4480:	80 91 ba 0a 	lds	r24, 0x0ABA
    4484:	8f 93       	push	r24
    4486:	80 91 a3 0a 	lds	r24, 0x0AA3
    448a:	8f 93       	push	r24
    448c:	80 91 a2 0a 	lds	r24, 0x0AA2
    4490:	8f 93       	push	r24
    4492:	80 91 bd 0a 	lds	r24, 0x0ABD
    4496:	8f 93       	push	r24
    4498:	80 91 bc 0a 	lds	r24, 0x0ABC
    449c:	8f 93       	push	r24
    449e:	80 91 bf 0a 	lds	r24, 0x0ABF
    44a2:	8f 93       	push	r24
    44a4:	80 91 be 0a 	lds	r24, 0x0ABE
    44a8:	8f 93       	push	r24
    44aa:	80 91 a5 0a 	lds	r24, 0x0AA5
    44ae:	8f 93       	push	r24
    44b0:	80 91 a4 0a 	lds	r24, 0x0AA4
    44b4:	8f 93       	push	r24
    44b6:	82 e8       	ldi	r24, 0x82	; 130
    44b8:	96 e0       	ldi	r25, 0x06	; 6
    44ba:	9f 93       	push	r25
    44bc:	8f 93       	push	r24
    44be:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    44c2:	0f b6       	in	r0, 0x3f	; 63
    44c4:	f8 94       	cli
    44c6:	de bf       	out	0x3e, r29	; 62
    44c8:	0f be       	out	0x3f, r0	; 63
    44ca:	cd bf       	out	0x3d, r28	; 61
    44cc:	81 e0       	ldi	r24, 0x01	; 1
    44ce:	04 c0       	rjmp	.+8      	; 0x44d8 <BMP280_Init+0x452>
    44d0:	10 92 a0 0a 	sts	0x0AA0, r1
    44d4:	10 92 9f 0a 	sts	0x0A9F, r1
    44d8:	0f 90       	pop	r0
    44da:	df 91       	pop	r29
    44dc:	cf 91       	pop	r28
    44de:	1f 91       	pop	r17
    44e0:	0f 91       	pop	r16
    44e2:	08 95       	ret

000044e4 <BMP280_SetOversampling>:
  @brief Sets the oversampling setting for the library
  @param[in] oss Oversampling setting
  @return 1
*****************************************************************************/
char BMP280_SetOversampling(short oss){
	oversampling = oss;
    44e4:	90 93 9e 0a 	sts	0x0A9E, r25
    44e8:	80 93 9d 0a 	sts	0x0A9D, r24
	return (1);
}
    44ec:	81 e0       	ldi	r24, 0x01	; 1
    44ee:	08 95       	ret

000044f0 <BMP280_StartMeasurment>:

/*************************************************************************//**
  @brief Starts a measurement
  @return time to wait for result (in ms)
*****************************************************************************/
char BMP280_StartMeasurment(void){
    44f0:	1f 93       	push	r17
    44f2:	cf 93       	push	r28
    44f4:	df 93       	push	r29
    44f6:	1f 92       	push	r1
    44f8:	1f 92       	push	r1
    44fa:	cd b7       	in	r28, 0x3d	; 61
    44fc:	de b7       	in	r29, 0x3e	; 62
	unsigned char data[2], result, delay;
	
	data[0] = BMP280_REG_CONTROL;
    44fe:	84 ef       	ldi	r24, 0xF4	; 244
    4500:	89 83       	std	Y+1, r24	; 0x01

	switch (oversampling){
    4502:	80 91 9d 0a 	lds	r24, 0x0A9D
    4506:	90 91 9e 0a 	lds	r25, 0x0A9E
    450a:	82 30       	cpi	r24, 0x02	; 2
    450c:	91 05       	cpc	r25, r1
    450e:	01 f1       	breq	.+64     	; 0x4550 <BMP280_StartMeasurment+0x60>
    4510:	2c f4       	brge	.+10     	; 0x451c <BMP280_StartMeasurment+0x2c>
    4512:	00 97       	sbiw	r24, 0x00	; 0
    4514:	49 f0       	breq	.+18     	; 0x4528 <BMP280_StartMeasurment+0x38>
    4516:	01 97       	sbiw	r24, 0x01	; 1
    4518:	89 f0       	breq	.+34     	; 0x453c <BMP280_StartMeasurment+0x4c>
    451a:	38 c0       	rjmp	.+112    	; 0x458c <BMP280_StartMeasurment+0x9c>
    451c:	83 30       	cpi	r24, 0x03	; 3
    451e:	91 05       	cpc	r25, r1
    4520:	09 f1       	breq	.+66     	; 0x4564 <BMP280_StartMeasurment+0x74>
    4522:	04 97       	sbiw	r24, 0x04	; 4
    4524:	49 f1       	breq	.+82     	; 0x4578 <BMP280_StartMeasurment+0x88>
    4526:	32 c0       	rjmp	.+100    	; 0x458c <BMP280_StartMeasurment+0x9c>
		case 0:
		data[1] = BMP280_COMMAND_PRESSURE0;
    4528:	85 e2       	ldi	r24, 0x25	; 37
    452a:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    452c:	81 e0       	ldi	r24, 0x01	; 1
    452e:	90 e0       	ldi	r25, 0x00	; 0
    4530:	90 93 9c 0a 	sts	0x0A9C, r25
    4534:	80 93 9b 0a 	sts	0x0A9B, r24
		delay = 8;
    4538:	18 e0       	ldi	r17, 0x08	; 8
		break;
    453a:	2b c0       	rjmp	.+86     	; 0x4592 <BMP280_StartMeasurment+0xa2>
		case 1:
		data[1] = BMP280_COMMAND_PRESSURE1;
    453c:	89 e2       	ldi	r24, 0x29	; 41
    453e:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    4540:	81 e0       	ldi	r24, 0x01	; 1
    4542:	90 e0       	ldi	r25, 0x00	; 0
    4544:	90 93 9c 0a 	sts	0x0A9C, r25
    4548:	80 93 9b 0a 	sts	0x0A9B, r24
		delay = 10;
    454c:	1a e0       	ldi	r17, 0x0A	; 10
		break;
    454e:	21 c0       	rjmp	.+66     	; 0x4592 <BMP280_StartMeasurment+0xa2>
		case 2:
		data[1] = BMP280_COMMAND_PRESSURE2;
    4550:	8d e2       	ldi	r24, 0x2D	; 45
    4552:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    4554:	81 e0       	ldi	r24, 0x01	; 1
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	90 93 9c 0a 	sts	0x0A9C, r25
    455c:	80 93 9b 0a 	sts	0x0A9B, r24
		delay = 15;
    4560:	1f e0       	ldi	r17, 0x0F	; 15
		break;
    4562:	17 c0       	rjmp	.+46     	; 0x4592 <BMP280_StartMeasurment+0xa2>
		case 3:
		data[1] = BMP280_COMMAND_PRESSURE3;
    4564:	81 e3       	ldi	r24, 0x31	; 49
    4566:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    4568:	81 e0       	ldi	r24, 0x01	; 1
    456a:	90 e0       	ldi	r25, 0x00	; 0
    456c:	90 93 9c 0a 	sts	0x0A9C, r25
    4570:	80 93 9b 0a 	sts	0x0A9B, r24
		delay = 24;
    4574:	18 e1       	ldi	r17, 0x18	; 24
		break;
    4576:	0d c0       	rjmp	.+26     	; 0x4592 <BMP280_StartMeasurment+0xa2>
		case 4:
		data[1] = BMP280_COMMAND_PRESSURE4;
    4578:	8d e5       	ldi	r24, 0x5D	; 93
    457a:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    457c:	81 e0       	ldi	r24, 0x01	; 1
    457e:	90 e0       	ldi	r25, 0x00	; 0
    4580:	90 93 9c 0a 	sts	0x0A9C, r25
    4584:	80 93 9b 0a 	sts	0x0A9B, r24
		delay = 45;
    4588:	1d e2       	ldi	r17, 0x2D	; 45
		break;
    458a:	03 c0       	rjmp	.+6      	; 0x4592 <BMP280_StartMeasurment+0xa2>
		default:
		data[1] = BMP280_COMMAND_PRESSURE0;
    458c:	85 e2       	ldi	r24, 0x25	; 37
    458e:	8a 83       	std	Y+2, r24	; 0x02
		delay = 9;
    4590:	19 e0       	ldi	r17, 0x09	; 9
  @param[in] *values pointer to an array to send, put the starting register in values[0]
  @param[in] length how many bytes to write (including the starting register ie. sizeof(values))
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_WriteBytes(unsigned char *values, char length){
	TWI_BeginWrite(BMP280_ADDR);
    4592:	86 e7       	ldi	r24, 0x76	; 118
    4594:	0e 94 93 18 	call	0x3126	; 0x3126 <TWI_BeginWrite>
	if((TWI_Write(&values[0],length) == TWI_SENT_ACK) && (TWI_Stop() != 0)) return 1; //Send bytes, a STOP bit, and check for success
    4598:	62 e0       	ldi	r22, 0x02	; 2
    459a:	70 e0       	ldi	r23, 0x00	; 0
    459c:	ce 01       	movw	r24, r28
    459e:	01 96       	adiw	r24, 0x01	; 1
    45a0:	0e 94 25 19 	call	0x324a	; 0x324a <TWI_Write>
    45a4:	88 32       	cpi	r24, 0x28	; 40
    45a6:	31 f4       	brne	.+12     	; 0x45b4 <BMP280_StartMeasurment+0xc4>
    45a8:	0e 94 e6 18 	call	0x31cc	; 0x31cc <TWI_Stop>
		data[1] = BMP280_COMMAND_PRESSURE0;
		delay = 9;
		break;
	}
	result = BMP280_WriteBytes(&data[0], 2);
	if (result) // good write?
    45ac:	88 23       	and	r24, r24
    45ae:	21 f0       	breq	.+8      	; 0x45b8 <BMP280_StartMeasurment+0xc8>
	return(delay); // return the delay in ms (rounded up) to wait before retrieving data
    45b0:	81 2f       	mov	r24, r17
    45b2:	03 c0       	rjmp	.+6      	; 0x45ba <BMP280_StartMeasurment+0xca>
	else
	return(-1); // or return -1 if there was a problem communicating with the BMP
    45b4:	8f ef       	ldi	r24, 0xFF	; 255
    45b6:	01 c0       	rjmp	.+2      	; 0x45ba <BMP280_StartMeasurment+0xca>
    45b8:	8f ef       	ldi	r24, 0xFF	; 255
	//printf("failure on writeInt");
}
    45ba:	0f 90       	pop	r0
    45bc:	0f 90       	pop	r0
    45be:	df 91       	pop	r29
    45c0:	cf 91       	pop	r28
    45c2:	1f 91       	pop	r17
    45c4:	08 95       	ret

000045c6 <BMP280_GetUnPTH>:
  @brief Gets the uncalibrated temperature and pressure and humidity data
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetUnPTH(double *uP, double *uT, double *uH){
    45c6:	4f 92       	push	r4
    45c8:	5f 92       	push	r5
    45ca:	6f 92       	push	r6
    45cc:	7f 92       	push	r7
    45ce:	af 92       	push	r10
    45d0:	bf 92       	push	r11
    45d2:	cf 92       	push	r12
    45d4:	df 92       	push	r13
    45d6:	ef 92       	push	r14
    45d8:	ff 92       	push	r15
    45da:	1f 93       	push	r17
    45dc:	cf 93       	push	r28
    45de:	df 93       	push	r29
    45e0:	cd b7       	in	r28, 0x3d	; 61
    45e2:	de b7       	in	r29, 0x3e	; 62
    45e4:	29 97       	sbiw	r28, 0x09	; 9
    45e6:	0f b6       	in	r0, 0x3f	; 63
    45e8:	f8 94       	cli
    45ea:	de bf       	out	0x3e, r29	; 62
    45ec:	0f be       	out	0x3f, r0	; 63
    45ee:	cd bf       	out	0x3d, r28	; 61
    45f0:	5c 01       	movw	r10, r24
    45f2:	6b 01       	movw	r12, r22
    45f4:	7a 01       	movw	r14, r20
	unsigned char data[9];
	char result;
	
	data[0] = BMP280_REG_RESULT_PRESSURE; //0xF7
    45f6:	97 ef       	ldi	r25, 0xF7	; 247
    45f8:	99 83       	std	Y+1, r25	; 0x01

	result = BMP280_ReadBytes(&data[0], 8); // 0xF7; xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE
    45fa:	68 e0       	ldi	r22, 0x08	; 8
    45fc:	ce 01       	movw	r24, r28
    45fe:	01 96       	adiw	r24, 0x01	; 1
    4600:	cb db       	rcall	.-2154   	; 0x3d98 <BMP280_ReadBytes>
    4602:	18 2f       	mov	r17, r24
	if (result){ // good read
    4604:	88 23       	and	r24, r24
    4606:	09 f4       	brne	.+2      	; 0x460a <BMP280_GetUnPTH+0x44>
    4608:	b4 c0       	rjmp	.+360    	; 0x4772 <BMP280_GetUnPTH+0x1ac>
		double factor = pow(2, 4);
		*uP = ( (data[0] *256.0) + data[1] + (data[2]/256.0) ) * factor ;	//20bit UP
    460a:	69 81       	ldd	r22, Y+1	; 0x01
    460c:	70 e0       	ldi	r23, 0x00	; 0
    460e:	80 e0       	ldi	r24, 0x00	; 0
    4610:	90 e0       	ldi	r25, 0x00	; 0
    4612:	32 d6       	rcall	.+3172   	; 0x5278 <__floatsisf>
    4614:	20 e0       	ldi	r18, 0x00	; 0
    4616:	30 e0       	ldi	r19, 0x00	; 0
    4618:	40 e8       	ldi	r20, 0x80	; 128
    461a:	53 e4       	ldi	r21, 0x43	; 67
    461c:	e1 d6       	rcall	.+3522   	; 0x53e0 <__mulsf3>
    461e:	2b 01       	movw	r4, r22
    4620:	3c 01       	movw	r6, r24
    4622:	8a 81       	ldd	r24, Y+2	; 0x02
    4624:	68 2f       	mov	r22, r24
    4626:	70 e0       	ldi	r23, 0x00	; 0
    4628:	80 e0       	ldi	r24, 0x00	; 0
    462a:	90 e0       	ldi	r25, 0x00	; 0
    462c:	25 d6       	rcall	.+3146   	; 0x5278 <__floatsisf>
    462e:	9b 01       	movw	r18, r22
    4630:	ac 01       	movw	r20, r24
    4632:	c3 01       	movw	r24, r6
    4634:	b2 01       	movw	r22, r4
    4636:	1d d5       	rcall	.+2618   	; 0x5072 <__addsf3>
    4638:	2b 01       	movw	r4, r22
    463a:	3c 01       	movw	r6, r24
    463c:	8b 81       	ldd	r24, Y+3	; 0x03
    463e:	68 2f       	mov	r22, r24
    4640:	70 e0       	ldi	r23, 0x00	; 0
    4642:	80 e0       	ldi	r24, 0x00	; 0
    4644:	90 e0       	ldi	r25, 0x00	; 0
    4646:	18 d6       	rcall	.+3120   	; 0x5278 <__floatsisf>
    4648:	20 e0       	ldi	r18, 0x00	; 0
    464a:	30 e0       	ldi	r19, 0x00	; 0
    464c:	40 e8       	ldi	r20, 0x80	; 128
    464e:	5b e3       	ldi	r21, 0x3B	; 59
    4650:	c7 d6       	rcall	.+3470   	; 0x53e0 <__mulsf3>
    4652:	9b 01       	movw	r18, r22
    4654:	ac 01       	movw	r20, r24
    4656:	c3 01       	movw	r24, r6
    4658:	b2 01       	movw	r22, r4
    465a:	0b d5       	rcall	.+2582   	; 0x5072 <__addsf3>
    465c:	20 e0       	ldi	r18, 0x00	; 0
    465e:	30 e0       	ldi	r19, 0x00	; 0
    4660:	40 e8       	ldi	r20, 0x80	; 128
    4662:	51 e4       	ldi	r21, 0x41	; 65
    4664:	bd d6       	rcall	.+3450   	; 0x53e0 <__mulsf3>
    4666:	f5 01       	movw	r30, r10
    4668:	60 83       	st	Z, r22
    466a:	71 83       	std	Z+1, r23	; 0x01
    466c:	82 83       	std	Z+2, r24	; 0x02
    466e:	93 83       	std	Z+3, r25	; 0x03
		*uT = ( (data[3] *256.0) + data[4] + (data[5]/256.0) ) * factor ;	//20bit UT
    4670:	6c 81       	ldd	r22, Y+4	; 0x04
    4672:	70 e0       	ldi	r23, 0x00	; 0
    4674:	80 e0       	ldi	r24, 0x00	; 0
    4676:	90 e0       	ldi	r25, 0x00	; 0
    4678:	ff d5       	rcall	.+3070   	; 0x5278 <__floatsisf>
    467a:	20 e0       	ldi	r18, 0x00	; 0
    467c:	30 e0       	ldi	r19, 0x00	; 0
    467e:	40 e8       	ldi	r20, 0x80	; 128
    4680:	53 e4       	ldi	r21, 0x43	; 67
    4682:	ae d6       	rcall	.+3420   	; 0x53e0 <__mulsf3>
    4684:	2b 01       	movw	r4, r22
    4686:	3c 01       	movw	r6, r24
    4688:	8d 81       	ldd	r24, Y+5	; 0x05
    468a:	68 2f       	mov	r22, r24
    468c:	70 e0       	ldi	r23, 0x00	; 0
    468e:	80 e0       	ldi	r24, 0x00	; 0
    4690:	90 e0       	ldi	r25, 0x00	; 0
    4692:	f2 d5       	rcall	.+3044   	; 0x5278 <__floatsisf>
    4694:	9b 01       	movw	r18, r22
    4696:	ac 01       	movw	r20, r24
    4698:	c3 01       	movw	r24, r6
    469a:	b2 01       	movw	r22, r4
    469c:	ea d4       	rcall	.+2516   	; 0x5072 <__addsf3>
    469e:	2b 01       	movw	r4, r22
    46a0:	3c 01       	movw	r6, r24
    46a2:	8e 81       	ldd	r24, Y+6	; 0x06
    46a4:	68 2f       	mov	r22, r24
    46a6:	70 e0       	ldi	r23, 0x00	; 0
    46a8:	80 e0       	ldi	r24, 0x00	; 0
    46aa:	90 e0       	ldi	r25, 0x00	; 0
    46ac:	e5 d5       	rcall	.+3018   	; 0x5278 <__floatsisf>
    46ae:	20 e0       	ldi	r18, 0x00	; 0
    46b0:	30 e0       	ldi	r19, 0x00	; 0
    46b2:	40 e8       	ldi	r20, 0x80	; 128
    46b4:	5b e3       	ldi	r21, 0x3B	; 59
    46b6:	94 d6       	rcall	.+3368   	; 0x53e0 <__mulsf3>
    46b8:	9b 01       	movw	r18, r22
    46ba:	ac 01       	movw	r20, r24
    46bc:	c3 01       	movw	r24, r6
    46be:	b2 01       	movw	r22, r4
    46c0:	d8 d4       	rcall	.+2480   	; 0x5072 <__addsf3>
    46c2:	20 e0       	ldi	r18, 0x00	; 0
    46c4:	30 e0       	ldi	r19, 0x00	; 0
    46c6:	40 e8       	ldi	r20, 0x80	; 128
    46c8:	51 e4       	ldi	r21, 0x41	; 65
    46ca:	8a d6       	rcall	.+3348   	; 0x53e0 <__mulsf3>
    46cc:	f6 01       	movw	r30, r12
    46ce:	60 83       	st	Z, r22
    46d0:	71 83       	std	Z+1, r23	; 0x01
    46d2:	82 83       	std	Z+2, r24	; 0x02
    46d4:	93 83       	std	Z+3, r25	; 0x03
		*uH = ( (data[6] *256.0) + data[7] ) * factor ;	//16bit UH
    46d6:	6f 81       	ldd	r22, Y+7	; 0x07
    46d8:	70 e0       	ldi	r23, 0x00	; 0
    46da:	80 e0       	ldi	r24, 0x00	; 0
    46dc:	90 e0       	ldi	r25, 0x00	; 0
    46de:	cc d5       	rcall	.+2968   	; 0x5278 <__floatsisf>
    46e0:	20 e0       	ldi	r18, 0x00	; 0
    46e2:	30 e0       	ldi	r19, 0x00	; 0
    46e4:	40 e8       	ldi	r20, 0x80	; 128
    46e6:	53 e4       	ldi	r21, 0x43	; 67
    46e8:	7b d6       	rcall	.+3318   	; 0x53e0 <__mulsf3>
    46ea:	2b 01       	movw	r4, r22
    46ec:	3c 01       	movw	r6, r24
    46ee:	88 85       	ldd	r24, Y+8	; 0x08
    46f0:	68 2f       	mov	r22, r24
    46f2:	70 e0       	ldi	r23, 0x00	; 0
    46f4:	80 e0       	ldi	r24, 0x00	; 0
    46f6:	90 e0       	ldi	r25, 0x00	; 0
    46f8:	bf d5       	rcall	.+2942   	; 0x5278 <__floatsisf>
    46fa:	9b 01       	movw	r18, r22
    46fc:	ac 01       	movw	r20, r24
    46fe:	c3 01       	movw	r24, r6
    4700:	b2 01       	movw	r22, r4
    4702:	b7 d4       	rcall	.+2414   	; 0x5072 <__addsf3>
    4704:	20 e0       	ldi	r18, 0x00	; 0
    4706:	30 e0       	ldi	r19, 0x00	; 0
    4708:	40 e8       	ldi	r20, 0x80	; 128
    470a:	51 e4       	ldi	r21, 0x41	; 65
    470c:	69 d6       	rcall	.+3282   	; 0x53e0 <__mulsf3>
    470e:	f7 01       	movw	r30, r14
    4710:	60 83       	st	Z, r22
    4712:	71 83       	std	Z+1, r23	; 0x01
    4714:	82 83       	std	Z+2, r24	; 0x02
    4716:	93 83       	std	Z+3, r25	; 0x03
		printf("\nH: %i ,%i ,%i ,%i ,%i ,%i \n",dig_H1,dig_H2,dig_H3,dig_H4,dig_H5,dig_H6);
    4718:	80 91 9f 0a 	lds	r24, 0x0A9F
    471c:	28 2f       	mov	r18, r24
    471e:	08 2e       	mov	r0, r24
    4720:	00 0c       	add	r0, r0
    4722:	33 0b       	sbc	r19, r19
    4724:	3f 93       	push	r19
    4726:	8f 93       	push	r24
    4728:	80 91 a7 0a 	lds	r24, 0x0AA7
    472c:	8f 93       	push	r24
    472e:	80 91 a6 0a 	lds	r24, 0x0AA6
    4732:	8f 93       	push	r24
    4734:	80 91 a9 0a 	lds	r24, 0x0AA9
    4738:	8f 93       	push	r24
    473a:	80 91 a8 0a 	lds	r24, 0x0AA8
    473e:	8f 93       	push	r24
    4740:	80 91 a0 0a 	lds	r24, 0x0AA0
    4744:	1f 92       	push	r1
    4746:	8f 93       	push	r24
    4748:	80 91 ab 0a 	lds	r24, 0x0AAB
    474c:	8f 93       	push	r24
    474e:	80 91 aa 0a 	lds	r24, 0x0AAA
    4752:	8f 93       	push	r24
    4754:	80 91 a1 0a 	lds	r24, 0x0AA1
    4758:	1f 92       	push	r1
    475a:	8f 93       	push	r24
    475c:	89 eb       	ldi	r24, 0xB9	; 185
    475e:	96 e0       	ldi	r25, 0x06	; 6
    4760:	9f 93       	push	r25
    4762:	8f 93       	push	r24
    4764:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
    4768:	0f b6       	in	r0, 0x3f	; 63
    476a:	f8 94       	cli
    476c:	de bf       	out	0x3e, r29	; 62
    476e:	0f be       	out	0x3f, r0	; 63
    4770:	cd bf       	out	0x3d, r28	; 61
	}
	return(result);
}
    4772:	81 2f       	mov	r24, r17
    4774:	29 96       	adiw	r28, 0x09	; 9
    4776:	0f b6       	in	r0, 0x3f	; 63
    4778:	f8 94       	cli
    477a:	de bf       	out	0x3e, r29	; 62
    477c:	0f be       	out	0x3f, r0	; 63
    477e:	cd bf       	out	0x3d, r28	; 61
    4780:	df 91       	pop	r29
    4782:	cf 91       	pop	r28
    4784:	1f 91       	pop	r17
    4786:	ff 90       	pop	r15
    4788:	ef 90       	pop	r14
    478a:	df 90       	pop	r13
    478c:	cf 90       	pop	r12
    478e:	bf 90       	pop	r11
    4790:	af 90       	pop	r10
    4792:	7f 90       	pop	r7
    4794:	6f 90       	pop	r6
    4796:	5f 90       	pop	r5
    4798:	4f 90       	pop	r4
    479a:	08 95       	ret

0000479c <BMP280_CalcTemperature>:
  @brief Calculates temperature
  @param[out] pointer to a place to store the temperature data
  @param[in] pointer to the uncalibrated temperature data
  @return status
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
    479c:	4f 92       	push	r4
    479e:	5f 92       	push	r5
    47a0:	6f 92       	push	r6
    47a2:	7f 92       	push	r7
    47a4:	8f 92       	push	r8
    47a6:	9f 92       	push	r9
    47a8:	af 92       	push	r10
    47aa:	bf 92       	push	r11
    47ac:	cf 92       	push	r12
    47ae:	df 92       	push	r13
    47b0:	ef 92       	push	r14
    47b2:	ff 92       	push	r15
    47b4:	cf 93       	push	r28
    47b6:	df 93       	push	r29
    47b8:	ec 01       	movw	r28, r24
	double adc_T = *uT ;
    47ba:	fb 01       	movw	r30, r22
    47bc:	c0 80       	ld	r12, Z
    47be:	d1 80       	ldd	r13, Z+1	; 0x01
    47c0:	e2 80       	ldd	r14, Z+2	; 0x02
    47c2:	f3 80       	ldd	r15, Z+3	; 0x03
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
    47c4:	80 91 a4 0a 	lds	r24, 0x0AA4
    47c8:	90 91 a5 0a 	lds	r25, 0x0AA5
    47cc:	bc 01       	movw	r22, r24
    47ce:	80 e0       	ldi	r24, 0x00	; 0
    47d0:	90 e0       	ldi	r25, 0x00	; 0
    47d2:	50 d5       	rcall	.+2720   	; 0x5274 <__floatunsisf>
    47d4:	2b 01       	movw	r4, r22
    47d6:	3c 01       	movw	r6, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
    47d8:	20 e0       	ldi	r18, 0x00	; 0
    47da:	30 e0       	ldi	r19, 0x00	; 0
    47dc:	40 e0       	ldi	r20, 0x00	; 0
    47de:	57 e3       	ldi	r21, 0x37	; 55
    47e0:	c7 01       	movw	r24, r14
    47e2:	b6 01       	movw	r22, r12
    47e4:	fd d5       	rcall	.+3066   	; 0x53e0 <__mulsf3>
    47e6:	4b 01       	movw	r8, r22
    47e8:	5c 01       	movw	r10, r24
    47ea:	20 e0       	ldi	r18, 0x00	; 0
    47ec:	30 e0       	ldi	r19, 0x00	; 0
    47ee:	40 e0       	ldi	r20, 0x00	; 0
    47f0:	59 e3       	ldi	r21, 0x39	; 57
    47f2:	c3 01       	movw	r24, r6
    47f4:	b2 01       	movw	r22, r4
    47f6:	f4 d5       	rcall	.+3048   	; 0x53e0 <__mulsf3>
    47f8:	9b 01       	movw	r18, r22
    47fa:	ac 01       	movw	r20, r24
    47fc:	c5 01       	movw	r24, r10
    47fe:	b4 01       	movw	r22, r8
    4800:	37 d4       	rcall	.+2158   	; 0x5070 <__subsf3>
    4802:	4b 01       	movw	r8, r22
    4804:	5c 01       	movw	r10, r24
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
	double adc_T = *uT ;
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
    4806:	20 e0       	ldi	r18, 0x00	; 0
    4808:	30 e0       	ldi	r19, 0x00	; 0
    480a:	40 e8       	ldi	r20, 0x80	; 128
    480c:	58 e3       	ldi	r21, 0x38	; 56
    480e:	c7 01       	movw	r24, r14
    4810:	b6 01       	movw	r22, r12
    4812:	e6 d5       	rcall	.+3020   	; 0x53e0 <__mulsf3>
    4814:	6b 01       	movw	r12, r22
    4816:	7c 01       	movw	r14, r24
    4818:	20 e0       	ldi	r18, 0x00	; 0
    481a:	30 e0       	ldi	r19, 0x00	; 0
    481c:	40 e8       	ldi	r20, 0x80	; 128
    481e:	5a e3       	ldi	r21, 0x3A	; 58
    4820:	c3 01       	movw	r24, r6
    4822:	b2 01       	movw	r22, r4
    4824:	dd d5       	rcall	.+3002   	; 0x53e0 <__mulsf3>
    4826:	9b 01       	movw	r18, r22
    4828:	ac 01       	movw	r20, r24
    482a:	c7 01       	movw	r24, r14
    482c:	b6 01       	movw	r22, r12
    482e:	20 d4       	rcall	.+2112   	; 0x5070 <__subsf3>
    4830:	6b 01       	movw	r12, r22
    4832:	7c 01       	movw	r14, r24
    4834:	80 91 be 0a 	lds	r24, 0x0ABE
    4838:	90 91 bf 0a 	lds	r25, 0x0ABF
    483c:	bc 01       	movw	r22, r24
    483e:	99 0f       	add	r25, r25
    4840:	88 0b       	sbc	r24, r24
    4842:	99 0b       	sbc	r25, r25
    4844:	19 d5       	rcall	.+2610   	; 0x5278 <__floatsisf>
    4846:	9b 01       	movw	r18, r22
    4848:	ac 01       	movw	r20, r24
    484a:	c7 01       	movw	r24, r14
    484c:	b6 01       	movw	r22, r12
    484e:	c8 d5       	rcall	.+2960   	; 0x53e0 <__mulsf3>
    4850:	6b 01       	movw	r12, r22
    4852:	7c 01       	movw	r14, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
    4854:	a5 01       	movw	r20, r10
    4856:	94 01       	movw	r18, r8
    4858:	c5 01       	movw	r24, r10
    485a:	b4 01       	movw	r22, r8
    485c:	c1 d5       	rcall	.+2946   	; 0x53e0 <__mulsf3>
    485e:	4b 01       	movw	r8, r22
    4860:	5c 01       	movw	r10, r24
    4862:	40 91 bc 0a 	lds	r20, 0x0ABC
    4866:	50 91 bd 0a 	lds	r21, 0x0ABD
    486a:	ba 01       	movw	r22, r20
    486c:	55 0f       	add	r21, r21
    486e:	88 0b       	sbc	r24, r24
    4870:	99 0b       	sbc	r25, r25
    4872:	02 d5       	rcall	.+2564   	; 0x5278 <__floatsisf>
    4874:	9b 01       	movw	r18, r22
    4876:	ac 01       	movw	r20, r24
    4878:	c5 01       	movw	r24, r10
    487a:	b4 01       	movw	r22, r8
    487c:	b1 d5       	rcall	.+2914   	; 0x53e0 <__mulsf3>
    487e:	9b 01       	movw	r18, r22
    4880:	ac 01       	movw	r20, r24
	t_fine = (long signed int)(var1+var2);
    4882:	c7 01       	movw	r24, r14
    4884:	b6 01       	movw	r22, r12
    4886:	f5 d3       	rcall	.+2026   	; 0x5072 <__addsf3>
    4888:	6b 01       	movw	r12, r22
    488a:	7c 01       	movw	r14, r24
    488c:	c2 d4       	rcall	.+2436   	; 0x5212 <__fixsfsi>
    488e:	60 93 97 0a 	sts	0x0A97, r22
    4892:	70 93 98 0a 	sts	0x0A98, r23
    4896:	80 93 99 0a 	sts	0x0A99, r24
    489a:	90 93 9a 0a 	sts	0x0A9A, r25
	
	*T = (var1+var2)/5120.0;
    489e:	20 e0       	ldi	r18, 0x00	; 0
    48a0:	30 e0       	ldi	r19, 0x00	; 0
    48a2:	40 ea       	ldi	r20, 0xA0	; 160
    48a4:	55 e4       	ldi	r21, 0x45	; 69
    48a6:	c7 01       	movw	r24, r14
    48a8:	b6 01       	movw	r22, r12
    48aa:	4b d4       	rcall	.+2198   	; 0x5142 <__divsf3>
    48ac:	6b 01       	movw	r12, r22
    48ae:	7c 01       	movw	r14, r24
    48b0:	68 83       	st	Y, r22
    48b2:	79 83       	std	Y+1, r23	; 0x01
    48b4:	8a 83       	std	Y+2, r24	; 0x02
    48b6:	9b 83       	std	Y+3, r25	; 0x03
	
	if(*T>100.0 || *T <(-100.0))return 0;
    48b8:	20 e0       	ldi	r18, 0x00	; 0
    48ba:	30 e0       	ldi	r19, 0x00	; 0
    48bc:	48 ec       	ldi	r20, 0xC8	; 200
    48be:	52 e4       	ldi	r21, 0x42	; 66
    48c0:	8b d5       	rcall	.+2838   	; 0x53d8 <__gesf2>
    48c2:	18 16       	cp	r1, r24
    48c4:	6c f0       	brlt	.+26     	; 0x48e0 <BMP280_CalcTemperature+0x144>
    48c6:	20 e0       	ldi	r18, 0x00	; 0
    48c8:	30 e0       	ldi	r19, 0x00	; 0
    48ca:	48 ec       	ldi	r20, 0xC8	; 200
    48cc:	52 ec       	ldi	r21, 0xC2	; 194
    48ce:	c7 01       	movw	r24, r14
    48d0:	b6 01       	movw	r22, r12
    48d2:	33 d4       	rcall	.+2150   	; 0x513a <__cmpsf2>
    48d4:	88 1f       	adc	r24, r24
    48d6:	88 27       	eor	r24, r24
    48d8:	88 1f       	adc	r24, r24
    48da:	91 e0       	ldi	r25, 0x01	; 1
    48dc:	89 27       	eor	r24, r25
    48de:	01 c0       	rjmp	.+2      	; 0x48e2 <BMP280_CalcTemperature+0x146>
    48e0:	80 e0       	ldi	r24, 0x00	; 0
	
	return (1);
}
    48e2:	df 91       	pop	r29
    48e4:	cf 91       	pop	r28
    48e6:	ff 90       	pop	r15
    48e8:	ef 90       	pop	r14
    48ea:	df 90       	pop	r13
    48ec:	cf 90       	pop	r12
    48ee:	bf 90       	pop	r11
    48f0:	af 90       	pop	r10
    48f2:	9f 90       	pop	r9
    48f4:	8f 90       	pop	r8
    48f6:	7f 90       	pop	r7
    48f8:	6f 90       	pop	r6
    48fa:	5f 90       	pop	r5
    48fc:	4f 90       	pop	r4
    48fe:	08 95       	ret

00004900 <BMP280_CalcPressure>:
  @brief Calculates pressure
  @param[out] pointer to a place to store the pressure data
  @param[in] pointer to the uncalibrated pressure data
  @return status
*****************************************************************************/
char BMP280_CalcPressure(double *P,double *uP){
    4900:	4f 92       	push	r4
    4902:	5f 92       	push	r5
    4904:	6f 92       	push	r6
    4906:	7f 92       	push	r7
    4908:	8f 92       	push	r8
    490a:	9f 92       	push	r9
    490c:	af 92       	push	r10
    490e:	bf 92       	push	r11
    4910:	cf 92       	push	r12
    4912:	df 92       	push	r13
    4914:	ef 92       	push	r14
    4916:	ff 92       	push	r15
    4918:	0f 93       	push	r16
    491a:	1f 93       	push	r17
    491c:	cf 93       	push	r28
    491e:	df 93       	push	r29
    4920:	8c 01       	movw	r16, r24
    4922:	eb 01       	movw	r28, r22
	//char result;
	double var1 , var2 ;
	
	var1 = ((double)t_fine/2.0) - 64000.0;
    4924:	60 91 97 0a 	lds	r22, 0x0A97
    4928:	70 91 98 0a 	lds	r23, 0x0A98
    492c:	80 91 99 0a 	lds	r24, 0x0A99
    4930:	90 91 9a 0a 	lds	r25, 0x0A9A
    4934:	a1 d4       	rcall	.+2370   	; 0x5278 <__floatsisf>
    4936:	20 e0       	ldi	r18, 0x00	; 0
    4938:	30 e0       	ldi	r19, 0x00	; 0
    493a:	40 e0       	ldi	r20, 0x00	; 0
    493c:	5f e3       	ldi	r21, 0x3F	; 63
    493e:	50 d5       	rcall	.+2720   	; 0x53e0 <__mulsf3>
    4940:	20 e0       	ldi	r18, 0x00	; 0
    4942:	30 e0       	ldi	r19, 0x00	; 0
    4944:	4a e7       	ldi	r20, 0x7A	; 122
    4946:	57 e4       	ldi	r21, 0x47	; 71
    4948:	93 d3       	rcall	.+1830   	; 0x5070 <__subsf3>
    494a:	6b 01       	movw	r12, r22
    494c:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
    494e:	60 91 b2 0a 	lds	r22, 0x0AB2
    4952:	70 91 b3 0a 	lds	r23, 0x0AB3
    4956:	07 2e       	mov	r0, r23
    4958:	00 0c       	add	r0, r0
    495a:	88 0b       	sbc	r24, r24
    495c:	99 0b       	sbc	r25, r25
    495e:	8c d4       	rcall	.+2328   	; 0x5278 <__floatsisf>
    4960:	a7 01       	movw	r20, r14
    4962:	96 01       	movw	r18, r12
    4964:	3d d5       	rcall	.+2682   	; 0x53e0 <__mulsf3>
    4966:	20 e0       	ldi	r18, 0x00	; 0
    4968:	30 e0       	ldi	r19, 0x00	; 0
    496a:	40 e0       	ldi	r20, 0x00	; 0
    496c:	58 e3       	ldi	r21, 0x38	; 56
    496e:	38 d5       	rcall	.+2672   	; 0x53e0 <__mulsf3>
    4970:	a7 01       	movw	r20, r14
    4972:	96 01       	movw	r18, r12
    4974:	35 d5       	rcall	.+2666   	; 0x53e0 <__mulsf3>
    4976:	4b 01       	movw	r8, r22
    4978:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
    497a:	60 91 b4 0a 	lds	r22, 0x0AB4
    497e:	70 91 b5 0a 	lds	r23, 0x0AB5
    4982:	07 2e       	mov	r0, r23
    4984:	00 0c       	add	r0, r0
    4986:	88 0b       	sbc	r24, r24
    4988:	99 0b       	sbc	r25, r25
    498a:	76 d4       	rcall	.+2284   	; 0x5278 <__floatsisf>
    498c:	a7 01       	movw	r20, r14
    498e:	96 01       	movw	r18, r12
    4990:	27 d5       	rcall	.+2638   	; 0x53e0 <__mulsf3>
    4992:	9b 01       	movw	r18, r22
    4994:	ac 01       	movw	r20, r24
    4996:	6d d3       	rcall	.+1754   	; 0x5072 <__addsf3>
    4998:	a5 01       	movw	r20, r10
    499a:	94 01       	movw	r18, r8
    499c:	6a d3       	rcall	.+1748   	; 0x5072 <__addsf3>
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
    499e:	20 e0       	ldi	r18, 0x00	; 0
    49a0:	30 e0       	ldi	r19, 0x00	; 0
    49a2:	40 e8       	ldi	r20, 0x80	; 128
    49a4:	5e e3       	ldi	r21, 0x3E	; 62
    49a6:	1c d5       	rcall	.+2616   	; 0x53e0 <__mulsf3>
    49a8:	4b 01       	movw	r8, r22
    49aa:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var1 = (((double)dig_P3) * var1 * var1/524288.0 + ((double)dig_P2) * var1) / 524288.0;
    49ac:	60 91 b8 0a 	lds	r22, 0x0AB8
    49b0:	70 91 b9 0a 	lds	r23, 0x0AB9
    49b4:	07 2e       	mov	r0, r23
    49b6:	00 0c       	add	r0, r0
    49b8:	88 0b       	sbc	r24, r24
    49ba:	99 0b       	sbc	r25, r25
    49bc:	5d d4       	rcall	.+2234   	; 0x5278 <__floatsisf>
    49be:	a7 01       	movw	r20, r14
    49c0:	96 01       	movw	r18, r12
    49c2:	0e d5       	rcall	.+2588   	; 0x53e0 <__mulsf3>
    49c4:	a7 01       	movw	r20, r14
    49c6:	96 01       	movw	r18, r12
    49c8:	0b d5       	rcall	.+2582   	; 0x53e0 <__mulsf3>
    49ca:	20 e0       	ldi	r18, 0x00	; 0
    49cc:	30 e0       	ldi	r19, 0x00	; 0
    49ce:	40 e0       	ldi	r20, 0x00	; 0
    49d0:	56 e3       	ldi	r21, 0x36	; 54
    49d2:	06 d5       	rcall	.+2572   	; 0x53e0 <__mulsf3>
    49d4:	2b 01       	movw	r4, r22
    49d6:	3c 01       	movw	r6, r24
    49d8:	60 91 ba 0a 	lds	r22, 0x0ABA
    49dc:	70 91 bb 0a 	lds	r23, 0x0ABB
    49e0:	07 2e       	mov	r0, r23
    49e2:	00 0c       	add	r0, r0
    49e4:	88 0b       	sbc	r24, r24
    49e6:	99 0b       	sbc	r25, r25
    49e8:	47 d4       	rcall	.+2190   	; 0x5278 <__floatsisf>
    49ea:	a7 01       	movw	r20, r14
    49ec:	96 01       	movw	r18, r12
    49ee:	f8 d4       	rcall	.+2544   	; 0x53e0 <__mulsf3>
    49f0:	9b 01       	movw	r18, r22
    49f2:	ac 01       	movw	r20, r24
    49f4:	c3 01       	movw	r24, r6
    49f6:	b2 01       	movw	r22, r4
    49f8:	3c d3       	rcall	.+1656   	; 0x5072 <__addsf3>
    49fa:	20 e0       	ldi	r18, 0x00	; 0
    49fc:	30 e0       	ldi	r19, 0x00	; 0
    49fe:	40 e0       	ldi	r20, 0x00	; 0
    4a00:	56 e3       	ldi	r21, 0x36	; 54
    4a02:	ee d4       	rcall	.+2524   	; 0x53e0 <__mulsf3>
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
    4a04:	20 e0       	ldi	r18, 0x00	; 0
    4a06:	30 e0       	ldi	r19, 0x00	; 0
    4a08:	40 e0       	ldi	r20, 0x00	; 0
    4a0a:	57 e4       	ldi	r21, 0x47	; 71
    4a0c:	32 d3       	rcall	.+1636   	; 0x5072 <__addsf3>
    4a0e:	20 e0       	ldi	r18, 0x00	; 0
    4a10:	30 e0       	ldi	r19, 0x00	; 0
    4a12:	40 e0       	ldi	r20, 0x00	; 0
    4a14:	58 e3       	ldi	r21, 0x38	; 56
    4a16:	e4 d4       	rcall	.+2504   	; 0x53e0 <__mulsf3>
    4a18:	6b 01       	movw	r12, r22
    4a1a:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
    4a1c:	28 81       	ld	r18, Y
    4a1e:	39 81       	ldd	r19, Y+1	; 0x01
    4a20:	4a 81       	ldd	r20, Y+2	; 0x02
    4a22:	5b 81       	ldd	r21, Y+3	; 0x03
    4a24:	60 e0       	ldi	r22, 0x00	; 0
    4a26:	70 e0       	ldi	r23, 0x00	; 0
    4a28:	80 e8       	ldi	r24, 0x80	; 128
    4a2a:	99 e4       	ldi	r25, 0x49	; 73
    4a2c:	21 d3       	rcall	.+1602   	; 0x5070 <__subsf3>
    4a2e:	2b 01       	movw	r4, r22
    4a30:	3c 01       	movw	r6, r24
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
    4a32:	60 91 b6 0a 	lds	r22, 0x0AB6
    4a36:	70 91 b7 0a 	lds	r23, 0x0AB7
    4a3a:	07 2e       	mov	r0, r23
    4a3c:	00 0c       	add	r0, r0
    4a3e:	88 0b       	sbc	r24, r24
    4a40:	99 0b       	sbc	r25, r25
    4a42:	1a d4       	rcall	.+2100   	; 0x5278 <__floatsisf>
    4a44:	20 e0       	ldi	r18, 0x00	; 0
    4a46:	30 e0       	ldi	r19, 0x00	; 0
    4a48:	40 e8       	ldi	r20, 0x80	; 128
    4a4a:	57 e4       	ldi	r21, 0x47	; 71
    4a4c:	c9 d4       	rcall	.+2450   	; 0x53e0 <__mulsf3>
    4a4e:	9b 01       	movw	r18, r22
    4a50:	ac 01       	movw	r20, r24
    4a52:	c5 01       	movw	r24, r10
    4a54:	b4 01       	movw	r22, r8
    4a56:	0d d3       	rcall	.+1562   	; 0x5072 <__addsf3>
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
    4a58:	20 e0       	ldi	r18, 0x00	; 0
    4a5a:	30 e0       	ldi	r19, 0x00	; 0
    4a5c:	40 e8       	ldi	r20, 0x80	; 128
    4a5e:	59 e3       	ldi	r21, 0x39	; 57
    4a60:	bf d4       	rcall	.+2430   	; 0x53e0 <__mulsf3>
    4a62:	9b 01       	movw	r18, r22
    4a64:	ac 01       	movw	r20, r24
    4a66:	c3 01       	movw	r24, r6
    4a68:	b2 01       	movw	r22, r4
    4a6a:	02 d3       	rcall	.+1540   	; 0x5070 <__subsf3>
    4a6c:	20 e0       	ldi	r18, 0x00	; 0
    4a6e:	30 e5       	ldi	r19, 0x50	; 80
    4a70:	43 ec       	ldi	r20, 0xC3	; 195
    4a72:	55 e4       	ldi	r21, 0x45	; 69
    4a74:	b5 d4       	rcall	.+2410   	; 0x53e0 <__mulsf3>
    4a76:	4b 01       	movw	r8, r22
    4a78:	5c 01       	movw	r10, r24
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
    4a7a:	80 91 a2 0a 	lds	r24, 0x0AA2
    4a7e:	90 91 a3 0a 	lds	r25, 0x0AA3
    4a82:	bc 01       	movw	r22, r24
    4a84:	80 e0       	ldi	r24, 0x00	; 0
    4a86:	90 e0       	ldi	r25, 0x00	; 0
    4a88:	f5 d3       	rcall	.+2026   	; 0x5274 <__floatunsisf>
    4a8a:	9b 01       	movw	r18, r22
    4a8c:	ac 01       	movw	r20, r24
    4a8e:	c7 01       	movw	r24, r14
    4a90:	b6 01       	movw	r22, r12
    4a92:	a6 d4       	rcall	.+2380   	; 0x53e0 <__mulsf3>
    4a94:	9b 01       	movw	r18, r22
    4a96:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
    4a98:	c5 01       	movw	r24, r10
    4a9a:	b4 01       	movw	r22, r8
    4a9c:	52 d3       	rcall	.+1700   	; 0x5142 <__divsf3>
    4a9e:	6b 01       	movw	r12, r22
    4aa0:	7c 01       	movw	r14, r24
	//Serial.print("p = ");Serial.println(p,2);
	
	var1 = ((double)dig_P9)*p*p/2147483648.0;	//overflow
    4aa2:	60 91 ac 0a 	lds	r22, 0x0AAC
    4aa6:	70 91 ad 0a 	lds	r23, 0x0AAD
    4aaa:	07 2e       	mov	r0, r23
    4aac:	00 0c       	add	r0, r0
    4aae:	88 0b       	sbc	r24, r24
    4ab0:	99 0b       	sbc	r25, r25
    4ab2:	e2 d3       	rcall	.+1988   	; 0x5278 <__floatsisf>
    4ab4:	a7 01       	movw	r20, r14
    4ab6:	96 01       	movw	r18, r12
    4ab8:	93 d4       	rcall	.+2342   	; 0x53e0 <__mulsf3>
    4aba:	a7 01       	movw	r20, r14
    4abc:	96 01       	movw	r18, r12
    4abe:	90 d4       	rcall	.+2336   	; 0x53e0 <__mulsf3>
    4ac0:	20 e0       	ldi	r18, 0x00	; 0
    4ac2:	30 e0       	ldi	r19, 0x00	; 0
    4ac4:	40 e0       	ldi	r20, 0x00	; 0
    4ac6:	50 e3       	ldi	r21, 0x30	; 48
    4ac8:	8b d4       	rcall	.+2326   	; 0x53e0 <__mulsf3>
    4aca:	4b 01       	movw	r8, r22
    4acc:	5c 01       	movw	r10, r24
	
	var2 = p*((double)dig_P8)/32768.0;
    4ace:	80 91 ae 0a 	lds	r24, 0x0AAE
    4ad2:	90 91 af 0a 	lds	r25, 0x0AAF
    4ad6:	bc 01       	movw	r22, r24
    4ad8:	99 0f       	add	r25, r25
    4ada:	88 0b       	sbc	r24, r24
    4adc:	99 0b       	sbc	r25, r25
    4ade:	cc d3       	rcall	.+1944   	; 0x5278 <__floatsisf>
    4ae0:	a7 01       	movw	r20, r14
    4ae2:	96 01       	movw	r18, r12
    4ae4:	7d d4       	rcall	.+2298   	; 0x53e0 <__mulsf3>
    4ae6:	20 e0       	ldi	r18, 0x00	; 0
    4ae8:	30 e0       	ldi	r19, 0x00	; 0
    4aea:	40 e0       	ldi	r20, 0x00	; 0
    4aec:	58 e3       	ldi	r21, 0x38	; 56
    4aee:	78 d4       	rcall	.+2288   	; 0x53e0 <__mulsf3>
    4af0:	9b 01       	movw	r18, r22
    4af2:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	p = p + (var1+var2+((double)dig_P7))/16.0;
    4af4:	c5 01       	movw	r24, r10
    4af6:	b4 01       	movw	r22, r8
    4af8:	bc d2       	rcall	.+1400   	; 0x5072 <__addsf3>
    4afa:	4b 01       	movw	r8, r22
    4afc:	5c 01       	movw	r10, r24
    4afe:	80 91 b0 0a 	lds	r24, 0x0AB0
    4b02:	90 91 b1 0a 	lds	r25, 0x0AB1
    4b06:	bc 01       	movw	r22, r24
    4b08:	99 0f       	add	r25, r25
    4b0a:	88 0b       	sbc	r24, r24
    4b0c:	99 0b       	sbc	r25, r25
    4b0e:	b4 d3       	rcall	.+1896   	; 0x5278 <__floatsisf>
    4b10:	9b 01       	movw	r18, r22
    4b12:	ac 01       	movw	r20, r24
    4b14:	c5 01       	movw	r24, r10
    4b16:	b4 01       	movw	r22, r8
    4b18:	ac d2       	rcall	.+1368   	; 0x5072 <__addsf3>
    4b1a:	20 e0       	ldi	r18, 0x00	; 0
    4b1c:	30 e0       	ldi	r19, 0x00	; 0
    4b1e:	40 e8       	ldi	r20, 0x80	; 128
    4b20:	5d e3       	ldi	r21, 0x3D	; 61
    4b22:	5e d4       	rcall	.+2236   	; 0x53e0 <__mulsf3>
    4b24:	a7 01       	movw	r20, r14
    4b26:	96 01       	movw	r18, r12
    4b28:	a4 d2       	rcall	.+1352   	; 0x5072 <__addsf3>
	//Serial.print("p = ");Serial.println(p,2);
	
	*P = p/100.0 ;
    4b2a:	20 e0       	ldi	r18, 0x00	; 0
    4b2c:	30 e0       	ldi	r19, 0x00	; 0
    4b2e:	48 ec       	ldi	r20, 0xC8	; 200
    4b30:	52 e4       	ldi	r21, 0x42	; 66
    4b32:	07 d3       	rcall	.+1550   	; 0x5142 <__divsf3>
    4b34:	6b 01       	movw	r12, r22
    4b36:	7c 01       	movw	r14, r24
    4b38:	f8 01       	movw	r30, r16
    4b3a:	60 83       	st	Z, r22
    4b3c:	71 83       	std	Z+1, r23	; 0x01
    4b3e:	82 83       	std	Z+2, r24	; 0x02
    4b40:	93 83       	std	Z+3, r25	; 0x03
	
	if((*P>1200.0) || (*P < 800.0))return (0);
    4b42:	20 e0       	ldi	r18, 0x00	; 0
    4b44:	30 e0       	ldi	r19, 0x00	; 0
    4b46:	46 e9       	ldi	r20, 0x96	; 150
    4b48:	54 e4       	ldi	r21, 0x44	; 68
    4b4a:	46 d4       	rcall	.+2188   	; 0x53d8 <__gesf2>
    4b4c:	18 16       	cp	r1, r24
    4b4e:	6c f0       	brlt	.+26     	; 0x4b6a <BMP280_CalcPressure+0x26a>
    4b50:	20 e0       	ldi	r18, 0x00	; 0
    4b52:	30 e0       	ldi	r19, 0x00	; 0
    4b54:	48 e4       	ldi	r20, 0x48	; 72
    4b56:	54 e4       	ldi	r21, 0x44	; 68
    4b58:	c7 01       	movw	r24, r14
    4b5a:	b6 01       	movw	r22, r12
    4b5c:	ee d2       	rcall	.+1500   	; 0x513a <__cmpsf2>
    4b5e:	88 1f       	adc	r24, r24
    4b60:	88 27       	eor	r24, r24
    4b62:	88 1f       	adc	r24, r24
    4b64:	91 e0       	ldi	r25, 0x01	; 1
    4b66:	89 27       	eor	r24, r25
    4b68:	01 c0       	rjmp	.+2      	; 0x4b6c <BMP280_CalcPressure+0x26c>
    4b6a:	80 e0       	ldi	r24, 0x00	; 0
	return (1);
}
    4b6c:	df 91       	pop	r29
    4b6e:	cf 91       	pop	r28
    4b70:	1f 91       	pop	r17
    4b72:	0f 91       	pop	r16
    4b74:	ff 90       	pop	r15
    4b76:	ef 90       	pop	r14
    4b78:	df 90       	pop	r13
    4b7a:	cf 90       	pop	r12
    4b7c:	bf 90       	pop	r11
    4b7e:	af 90       	pop	r10
    4b80:	9f 90       	pop	r9
    4b82:	8f 90       	pop	r8
    4b84:	7f 90       	pop	r7
    4b86:	6f 90       	pop	r6
    4b88:	5f 90       	pop	r5
    4b8a:	4f 90       	pop	r4
    4b8c:	08 95       	ret

00004b8e <BMP280_CalcHumidity>:
  @param[out] pointer to a place to store the humidity
  @param[in] pointer to the uncalibrated humidity data
  @return status
*****************************************************************************/
char BMP280_CalcHumidity(double *H,double *uH)
{
    4b8e:	4f 92       	push	r4
    4b90:	5f 92       	push	r5
    4b92:	6f 92       	push	r6
    4b94:	7f 92       	push	r7
    4b96:	8f 92       	push	r8
    4b98:	9f 92       	push	r9
    4b9a:	af 92       	push	r10
    4b9c:	bf 92       	push	r11
    4b9e:	cf 92       	push	r12
    4ba0:	df 92       	push	r13
    4ba2:	ef 92       	push	r14
    4ba4:	ff 92       	push	r15
    4ba6:	cf 93       	push	r28
    4ba8:	df 93       	push	r29
    4baa:	ec 01       	movw	r28, r24
	double adc_H = *uH;
    4bac:	fb 01       	movw	r30, r22
    4bae:	80 80       	ld	r8, Z
    4bb0:	91 80       	ldd	r9, Z+1	; 0x01
    4bb2:	a2 80       	ldd	r10, Z+2	; 0x02
    4bb4:	b3 80       	ldd	r11, Z+3	; 0x03
	double var1;
	
	var1 = (double)t_fine - 76800.0;
    4bb6:	60 91 97 0a 	lds	r22, 0x0A97
    4bba:	70 91 98 0a 	lds	r23, 0x0A98
    4bbe:	80 91 99 0a 	lds	r24, 0x0A99
    4bc2:	90 91 9a 0a 	lds	r25, 0x0A9A
    4bc6:	58 d3       	rcall	.+1712   	; 0x5278 <__floatsisf>
    4bc8:	20 e0       	ldi	r18, 0x00	; 0
    4bca:	30 e0       	ldi	r19, 0x00	; 0
    4bcc:	46 e9       	ldi	r20, 0x96	; 150
    4bce:	57 e4       	ldi	r21, 0x47	; 71
    4bd0:	4f d2       	rcall	.+1182   	; 0x5070 <__subsf3>
    4bd2:	6b 01       	movw	r12, r22
    4bd4:	7c 01       	movw	r14, r24
	
	if (var1 != 0)
    4bd6:	20 e0       	ldi	r18, 0x00	; 0
    4bd8:	30 e0       	ldi	r19, 0x00	; 0
    4bda:	a9 01       	movw	r20, r18
    4bdc:	ae d2       	rcall	.+1372   	; 0x513a <__cmpsf2>
    4bde:	88 23       	and	r24, r24
    4be0:	09 f4       	brne	.+2      	; 0x4be4 <BMP280_CalcHumidity+0x56>
    4be2:	da c0       	rjmp	.+436    	; 0x4d98 <BMP280_CalcHumidity+0x20a>
	{
		var1 = (((((adc_H * 16384) - ((double)dig_H4 * 1048576) - ((double)dig_H5 * var1)) + 16384 ) / 32768 ) * (((((((var1 * (double)dig_H6) / 1024) * (((var1 * (double)dig_H3) / 2048) + 32768)) / 1024) + 2097152) * ((double)dig_H2 + 8192) / 16384)));
    4be4:	20 e0       	ldi	r18, 0x00	; 0
    4be6:	30 e0       	ldi	r19, 0x00	; 0
    4be8:	40 e8       	ldi	r20, 0x80	; 128
    4bea:	56 e4       	ldi	r21, 0x46	; 70
    4bec:	c5 01       	movw	r24, r10
    4bee:	b4 01       	movw	r22, r8
    4bf0:	f7 d3       	rcall	.+2030   	; 0x53e0 <__mulsf3>
    4bf2:	4b 01       	movw	r8, r22
    4bf4:	5c 01       	movw	r10, r24
    4bf6:	80 91 a8 0a 	lds	r24, 0x0AA8
    4bfa:	90 91 a9 0a 	lds	r25, 0x0AA9
    4bfe:	bc 01       	movw	r22, r24
    4c00:	99 0f       	add	r25, r25
    4c02:	88 0b       	sbc	r24, r24
    4c04:	99 0b       	sbc	r25, r25
    4c06:	38 d3       	rcall	.+1648   	; 0x5278 <__floatsisf>
    4c08:	20 e0       	ldi	r18, 0x00	; 0
    4c0a:	30 e0       	ldi	r19, 0x00	; 0
    4c0c:	40 e8       	ldi	r20, 0x80	; 128
    4c0e:	59 e4       	ldi	r21, 0x49	; 73
    4c10:	e7 d3       	rcall	.+1998   	; 0x53e0 <__mulsf3>
    4c12:	9b 01       	movw	r18, r22
    4c14:	ac 01       	movw	r20, r24
    4c16:	c5 01       	movw	r24, r10
    4c18:	b4 01       	movw	r22, r8
    4c1a:	2a d2       	rcall	.+1108   	; 0x5070 <__subsf3>
    4c1c:	4b 01       	movw	r8, r22
    4c1e:	5c 01       	movw	r10, r24
    4c20:	80 91 a6 0a 	lds	r24, 0x0AA6
    4c24:	90 91 a7 0a 	lds	r25, 0x0AA7
    4c28:	bc 01       	movw	r22, r24
    4c2a:	99 0f       	add	r25, r25
    4c2c:	88 0b       	sbc	r24, r24
    4c2e:	99 0b       	sbc	r25, r25
    4c30:	23 d3       	rcall	.+1606   	; 0x5278 <__floatsisf>
    4c32:	a7 01       	movw	r20, r14
    4c34:	96 01       	movw	r18, r12
    4c36:	d4 d3       	rcall	.+1960   	; 0x53e0 <__mulsf3>
    4c38:	9b 01       	movw	r18, r22
    4c3a:	ac 01       	movw	r20, r24
    4c3c:	c5 01       	movw	r24, r10
    4c3e:	b4 01       	movw	r22, r8
    4c40:	17 d2       	rcall	.+1070   	; 0x5070 <__subsf3>
    4c42:	20 e0       	ldi	r18, 0x00	; 0
    4c44:	30 e0       	ldi	r19, 0x00	; 0
    4c46:	40 e8       	ldi	r20, 0x80	; 128
    4c48:	56 e4       	ldi	r21, 0x46	; 70
    4c4a:	13 d2       	rcall	.+1062   	; 0x5072 <__addsf3>
    4c4c:	20 e0       	ldi	r18, 0x00	; 0
    4c4e:	30 e0       	ldi	r19, 0x00	; 0
    4c50:	40 e0       	ldi	r20, 0x00	; 0
    4c52:	58 e3       	ldi	r21, 0x38	; 56
    4c54:	c5 d3       	rcall	.+1930   	; 0x53e0 <__mulsf3>
    4c56:	4b 01       	movw	r8, r22
    4c58:	5c 01       	movw	r10, r24
    4c5a:	60 91 9f 0a 	lds	r22, 0x0A9F
    4c5e:	06 2e       	mov	r0, r22
    4c60:	00 0c       	add	r0, r0
    4c62:	77 0b       	sbc	r23, r23
    4c64:	88 0b       	sbc	r24, r24
    4c66:	99 0b       	sbc	r25, r25
    4c68:	07 d3       	rcall	.+1550   	; 0x5278 <__floatsisf>
    4c6a:	a7 01       	movw	r20, r14
    4c6c:	96 01       	movw	r18, r12
    4c6e:	b8 d3       	rcall	.+1904   	; 0x53e0 <__mulsf3>
    4c70:	20 e0       	ldi	r18, 0x00	; 0
    4c72:	30 e0       	ldi	r19, 0x00	; 0
    4c74:	40 e8       	ldi	r20, 0x80	; 128
    4c76:	5a e3       	ldi	r21, 0x3A	; 58
    4c78:	b3 d3       	rcall	.+1894   	; 0x53e0 <__mulsf3>
    4c7a:	2b 01       	movw	r4, r22
    4c7c:	3c 01       	movw	r6, r24
    4c7e:	60 91 a0 0a 	lds	r22, 0x0AA0
    4c82:	70 e0       	ldi	r23, 0x00	; 0
    4c84:	80 e0       	ldi	r24, 0x00	; 0
    4c86:	90 e0       	ldi	r25, 0x00	; 0
    4c88:	f5 d2       	rcall	.+1514   	; 0x5274 <__floatunsisf>
    4c8a:	a7 01       	movw	r20, r14
    4c8c:	96 01       	movw	r18, r12
    4c8e:	a8 d3       	rcall	.+1872   	; 0x53e0 <__mulsf3>
    4c90:	20 e0       	ldi	r18, 0x00	; 0
    4c92:	30 e0       	ldi	r19, 0x00	; 0
    4c94:	40 e0       	ldi	r20, 0x00	; 0
    4c96:	5a e3       	ldi	r21, 0x3A	; 58
    4c98:	a3 d3       	rcall	.+1862   	; 0x53e0 <__mulsf3>
    4c9a:	20 e0       	ldi	r18, 0x00	; 0
    4c9c:	30 e0       	ldi	r19, 0x00	; 0
    4c9e:	40 e0       	ldi	r20, 0x00	; 0
    4ca0:	57 e4       	ldi	r21, 0x47	; 71
    4ca2:	e7 d1       	rcall	.+974    	; 0x5072 <__addsf3>
    4ca4:	9b 01       	movw	r18, r22
    4ca6:	ac 01       	movw	r20, r24
    4ca8:	c3 01       	movw	r24, r6
    4caa:	b2 01       	movw	r22, r4
    4cac:	99 d3       	rcall	.+1842   	; 0x53e0 <__mulsf3>
    4cae:	20 e0       	ldi	r18, 0x00	; 0
    4cb0:	30 e0       	ldi	r19, 0x00	; 0
    4cb2:	40 e8       	ldi	r20, 0x80	; 128
    4cb4:	5a e3       	ldi	r21, 0x3A	; 58
    4cb6:	94 d3       	rcall	.+1832   	; 0x53e0 <__mulsf3>
    4cb8:	20 e0       	ldi	r18, 0x00	; 0
    4cba:	30 e0       	ldi	r19, 0x00	; 0
    4cbc:	40 e0       	ldi	r20, 0x00	; 0
    4cbe:	5a e4       	ldi	r21, 0x4A	; 74
    4cc0:	d8 d1       	rcall	.+944    	; 0x5072 <__addsf3>
    4cc2:	6b 01       	movw	r12, r22
    4cc4:	7c 01       	movw	r14, r24
    4cc6:	80 91 aa 0a 	lds	r24, 0x0AAA
    4cca:	90 91 ab 0a 	lds	r25, 0x0AAB
    4cce:	bc 01       	movw	r22, r24
    4cd0:	99 0f       	add	r25, r25
    4cd2:	88 0b       	sbc	r24, r24
    4cd4:	99 0b       	sbc	r25, r25
    4cd6:	d0 d2       	rcall	.+1440   	; 0x5278 <__floatsisf>
    4cd8:	20 e0       	ldi	r18, 0x00	; 0
    4cda:	30 e0       	ldi	r19, 0x00	; 0
    4cdc:	40 e0       	ldi	r20, 0x00	; 0
    4cde:	56 e4       	ldi	r21, 0x46	; 70
    4ce0:	c8 d1       	rcall	.+912    	; 0x5072 <__addsf3>
    4ce2:	9b 01       	movw	r18, r22
    4ce4:	ac 01       	movw	r20, r24
    4ce6:	c7 01       	movw	r24, r14
    4ce8:	b6 01       	movw	r22, r12
    4cea:	7a d3       	rcall	.+1780   	; 0x53e0 <__mulsf3>
    4cec:	20 e0       	ldi	r18, 0x00	; 0
    4cee:	30 e0       	ldi	r19, 0x00	; 0
    4cf0:	40 e8       	ldi	r20, 0x80	; 128
    4cf2:	58 e3       	ldi	r21, 0x38	; 56
    4cf4:	75 d3       	rcall	.+1770   	; 0x53e0 <__mulsf3>
    4cf6:	9b 01       	movw	r18, r22
    4cf8:	ac 01       	movw	r20, r24
    4cfa:	c5 01       	movw	r24, r10
    4cfc:	b4 01       	movw	r22, r8
    4cfe:	70 d3       	rcall	.+1760   	; 0x53e0 <__mulsf3>
    4d00:	6b 01       	movw	r12, r22
    4d02:	7c 01       	movw	r14, r24
		/*var1 = (adc_H - (((double)dig_H4) * 64.0 + ((double)dig_H5) / 16384.0 * var1)) *
				(((double)dig_H2) / 65536.0 * (1.0 + ((double)dig_H6) / 67108864.0 * 
				var1 * (1.0 + ((double)dig_H3) / 67108864.0 * var1))); */
		*H = var1;
    4d04:	68 83       	st	Y, r22
    4d06:	79 83       	std	Y+1, r23	; 0x01
    4d08:	8a 83       	std	Y+2, r24	; 0x02
    4d0a:	9b 83       	std	Y+3, r25	; 0x03
	}
	else return (0);
	var1 = (var1 - (((((var1 / 32768) * (var1 / 32768)) / 128) * (double)dig_H1) / 16));
    4d0c:	20 e0       	ldi	r18, 0x00	; 0
    4d0e:	30 e0       	ldi	r19, 0x00	; 0
    4d10:	40 e0       	ldi	r20, 0x00	; 0
    4d12:	58 e3       	ldi	r21, 0x38	; 56
    4d14:	65 d3       	rcall	.+1738   	; 0x53e0 <__mulsf3>
    4d16:	9b 01       	movw	r18, r22
    4d18:	ac 01       	movw	r20, r24
    4d1a:	62 d3       	rcall	.+1732   	; 0x53e0 <__mulsf3>
    4d1c:	20 e0       	ldi	r18, 0x00	; 0
    4d1e:	30 e0       	ldi	r19, 0x00	; 0
    4d20:	40 e0       	ldi	r20, 0x00	; 0
    4d22:	5c e3       	ldi	r21, 0x3C	; 60
    4d24:	5d d3       	rcall	.+1722   	; 0x53e0 <__mulsf3>
    4d26:	4b 01       	movw	r8, r22
    4d28:	5c 01       	movw	r10, r24
    4d2a:	80 91 a1 0a 	lds	r24, 0x0AA1
    4d2e:	68 2f       	mov	r22, r24
    4d30:	70 e0       	ldi	r23, 0x00	; 0
    4d32:	80 e0       	ldi	r24, 0x00	; 0
    4d34:	90 e0       	ldi	r25, 0x00	; 0
    4d36:	9e d2       	rcall	.+1340   	; 0x5274 <__floatunsisf>
    4d38:	9b 01       	movw	r18, r22
    4d3a:	ac 01       	movw	r20, r24
    4d3c:	c5 01       	movw	r24, r10
    4d3e:	b4 01       	movw	r22, r8
    4d40:	4f d3       	rcall	.+1694   	; 0x53e0 <__mulsf3>
    4d42:	20 e0       	ldi	r18, 0x00	; 0
    4d44:	30 e0       	ldi	r19, 0x00	; 0
    4d46:	40 e8       	ldi	r20, 0x80	; 128
    4d48:	5d e3       	ldi	r21, 0x3D	; 61
    4d4a:	4a d3       	rcall	.+1684   	; 0x53e0 <__mulsf3>
    4d4c:	9b 01       	movw	r18, r22
    4d4e:	ac 01       	movw	r20, r24
    4d50:	c7 01       	movw	r24, r14
    4d52:	b6 01       	movw	r22, r12
    4d54:	8d d1       	rcall	.+794    	; 0x5070 <__subsf3>
    4d56:	6b 01       	movw	r12, r22
    4d58:	7c 01       	movw	r14, r24
	//var1 = var1 * (1.0 - ((double)dig_H1) * var1 / 524288.0);
	if (var1 > 100.0) {var1 = 100.0; *H = var1;}
    4d5a:	20 e0       	ldi	r18, 0x00	; 0
    4d5c:	30 e0       	ldi	r19, 0x00	; 0
    4d5e:	48 ec       	ldi	r20, 0xC8	; 200
    4d60:	52 e4       	ldi	r21, 0x42	; 66
    4d62:	3a d3       	rcall	.+1652   	; 0x53d8 <__gesf2>
    4d64:	18 16       	cp	r1, r24
    4d66:	54 f4       	brge	.+20     	; 0x4d7c <BMP280_CalcHumidity+0x1ee>
    4d68:	80 e0       	ldi	r24, 0x00	; 0
    4d6a:	90 e0       	ldi	r25, 0x00	; 0
    4d6c:	a8 ec       	ldi	r26, 0xC8	; 200
    4d6e:	b2 e4       	ldi	r27, 0x42	; 66
    4d70:	88 83       	st	Y, r24
    4d72:	99 83       	std	Y+1, r25	; 0x01
    4d74:	aa 83       	std	Y+2, r26	; 0x02
    4d76:	bb 83       	std	Y+3, r27	; 0x03
	else if (var1 < 0.0) {var1 = 0.0; *H = var1;}
	return (1);
    4d78:	81 e0       	ldi	r24, 0x01	; 1
    4d7a:	11 c0       	rjmp	.+34     	; 0x4d9e <BMP280_CalcHumidity+0x210>
	}
	else return (0);
	var1 = (var1 - (((((var1 / 32768) * (var1 / 32768)) / 128) * (double)dig_H1) / 16));
	//var1 = var1 * (1.0 - ((double)dig_H1) * var1 / 524288.0);
	if (var1 > 100.0) {var1 = 100.0; *H = var1;}
	else if (var1 < 0.0) {var1 = 0.0; *H = var1;}
    4d7c:	20 e0       	ldi	r18, 0x00	; 0
    4d7e:	30 e0       	ldi	r19, 0x00	; 0
    4d80:	a9 01       	movw	r20, r18
    4d82:	c7 01       	movw	r24, r14
    4d84:	b6 01       	movw	r22, r12
    4d86:	d9 d1       	rcall	.+946    	; 0x513a <__cmpsf2>
    4d88:	88 23       	and	r24, r24
    4d8a:	44 f4       	brge	.+16     	; 0x4d9c <BMP280_CalcHumidity+0x20e>
    4d8c:	18 82       	st	Y, r1
    4d8e:	19 82       	std	Y+1, r1	; 0x01
    4d90:	1a 82       	std	Y+2, r1	; 0x02
    4d92:	1b 82       	std	Y+3, r1	; 0x03
	return (1);
    4d94:	81 e0       	ldi	r24, 0x01	; 1
    4d96:	03 c0       	rjmp	.+6      	; 0x4d9e <BMP280_CalcHumidity+0x210>
		/*var1 = (adc_H - (((double)dig_H4) * 64.0 + ((double)dig_H5) / 16384.0 * var1)) *
				(((double)dig_H2) / 65536.0 * (1.0 + ((double)dig_H6) / 67108864.0 * 
				var1 * (1.0 + ((double)dig_H3) / 67108864.0 * var1))); */
		*H = var1;
	}
	else return (0);
    4d98:	80 e0       	ldi	r24, 0x00	; 0
    4d9a:	01 c0       	rjmp	.+2      	; 0x4d9e <BMP280_CalcHumidity+0x210>
	var1 = (var1 - (((((var1 / 32768) * (var1 / 32768)) / 128) * (double)dig_H1) / 16));
	//var1 = var1 * (1.0 - ((double)dig_H1) * var1 / 524288.0);
	if (var1 > 100.0) {var1 = 100.0; *H = var1;}
	else if (var1 < 0.0) {var1 = 0.0; *H = var1;}
	return (1);
    4d9c:	81 e0       	ldi	r24, 0x01	; 1
}
    4d9e:	df 91       	pop	r29
    4da0:	cf 91       	pop	r28
    4da2:	ff 90       	pop	r15
    4da4:	ef 90       	pop	r14
    4da6:	df 90       	pop	r13
    4da8:	cf 90       	pop	r12
    4daa:	bf 90       	pop	r11
    4dac:	af 90       	pop	r10
    4dae:	9f 90       	pop	r9
    4db0:	8f 90       	pop	r8
    4db2:	7f 90       	pop	r7
    4db4:	6f 90       	pop	r6
    4db6:	5f 90       	pop	r5
    4db8:	4f 90       	pop	r4
    4dba:	08 95       	ret

00004dbc <BMP280_GetTPH>:
  @brief Gets temperature and pressure
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetTPH(double *T, double *P, double *H){
    4dbc:	cf 92       	push	r12
    4dbe:	df 92       	push	r13
    4dc0:	ef 92       	push	r14
    4dc2:	ff 92       	push	r15
    4dc4:	0f 93       	push	r16
    4dc6:	1f 93       	push	r17
    4dc8:	cf 93       	push	r28
    4dca:	df 93       	push	r29
    4dcc:	cd b7       	in	r28, 0x3d	; 61
    4dce:	de b7       	in	r29, 0x3e	; 62
    4dd0:	2c 97       	sbiw	r28, 0x0c	; 12
    4dd2:	0f b6       	in	r0, 0x3f	; 63
    4dd4:	f8 94       	cli
    4dd6:	de bf       	out	0x3e, r29	; 62
    4dd8:	0f be       	out	0x3f, r0	; 63
    4dda:	cd bf       	out	0x3d, r28	; 61
    4ddc:	8c 01       	movw	r16, r24
    4dde:	7b 01       	movw	r14, r22
    4de0:	6a 01       	movw	r12, r20
	double uP,uT,uH ;
	char result = BMP280_GetUnPTH(&uP, &uT, &uH);
    4de2:	ae 01       	movw	r20, r28
    4de4:	47 5f       	subi	r20, 0xF7	; 247
    4de6:	5f 4f       	sbci	r21, 0xFF	; 255
    4de8:	be 01       	movw	r22, r28
    4dea:	6b 5f       	subi	r22, 0xFB	; 251
    4dec:	7f 4f       	sbci	r23, 0xFF	; 255
    4dee:	ce 01       	movw	r24, r28
    4df0:	01 96       	adiw	r24, 0x01	; 1
    4df2:	e9 db       	rcall	.-2094   	; 0x45c6 <BMP280_GetUnPTH>
	if(result!=0){
    4df4:	88 23       	and	r24, r24
    4df6:	21 f1       	breq	.+72     	; 0x4e40 <BMP280_GetTPH+0x84>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
    4df8:	be 01       	movw	r22, r28
    4dfa:	6b 5f       	subi	r22, 0xFB	; 251
    4dfc:	7f 4f       	sbci	r23, 0xFF	; 255
    4dfe:	c8 01       	movw	r24, r16
    4e00:	cd dc       	rcall	.-1638   	; 0x479c <BMP280_CalcTemperature>
		if(result){
    4e02:	88 23       	and	r24, r24
    4e04:	c1 f0       	breq	.+48     	; 0x4e36 <BMP280_GetTPH+0x7a>
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
    4e06:	be 01       	movw	r22, r28
    4e08:	6f 5f       	subi	r22, 0xFF	; 255
    4e0a:	7f 4f       	sbci	r23, 0xFF	; 255
    4e0c:	c7 01       	movw	r24, r14
    4e0e:	78 dd       	rcall	.-1296   	; 0x4900 <BMP280_CalcPressure>
			if(result){
    4e10:	88 23       	and	r24, r24
    4e12:	61 f0       	breq	.+24     	; 0x4e2c <BMP280_GetTPH+0x70>
				result = BMP280_CalcHumidity(H,&uH); 	
    4e14:	be 01       	movw	r22, r28
    4e16:	67 5f       	subi	r22, 0xF7	; 247
    4e18:	7f 4f       	sbci	r23, 0xFF	; 255
    4e1a:	c6 01       	movw	r24, r12
    4e1c:	b8 de       	rcall	.-656    	; 0x4b8e <BMP280_CalcHumidity>
				if(result)return (1);
    4e1e:	81 11       	cpse	r24, r1
    4e20:	14 c0       	rjmp	.+40     	; 0x4e4a <BMP280_GetTPH+0x8e>
				else error = 4 ;	// humidity error ;
    4e22:	84 e0       	ldi	r24, 0x04	; 4
    4e24:	80 93 96 0a 	sts	0x0A96, r24
				return (0);
    4e28:	80 e0       	ldi	r24, 0x00	; 0
    4e2a:	10 c0       	rjmp	.+32     	; 0x4e4c <BMP280_GetTPH+0x90>
			}else
			error = 3;	// pressure error ;
    4e2c:	83 e0       	ldi	r24, 0x03	; 3
    4e2e:	80 93 96 0a 	sts	0x0A96, r24
		}else
		error = 2; // temperature error
	}
	else
	error = 1;
	return (0);
    4e32:	80 e0       	ldi	r24, 0x00	; 0
    4e34:	0b c0       	rjmp	.+22     	; 0x4e4c <BMP280_GetTPH+0x90>
				else error = 4 ;	// humidity error ;
				return (0);
			}else
			error = 3;	// pressure error ;
		}else
		error = 2; // temperature error
    4e36:	82 e0       	ldi	r24, 0x02	; 2
    4e38:	80 93 96 0a 	sts	0x0A96, r24
	}
	else
	error = 1;
	return (0);
    4e3c:	80 e0       	ldi	r24, 0x00	; 0
    4e3e:	06 c0       	rjmp	.+12     	; 0x4e4c <BMP280_GetTPH+0x90>
			error = 3;	// pressure error ;
		}else
		error = 2; // temperature error
	}
	else
	error = 1;
    4e40:	81 e0       	ldi	r24, 0x01	; 1
    4e42:	80 93 96 0a 	sts	0x0A96, r24
	return (0);
    4e46:	80 e0       	ldi	r24, 0x00	; 0
    4e48:	01 c0       	rjmp	.+2      	; 0x4e4c <BMP280_GetTPH+0x90>
		if(result){
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
			if(result){
				result = BMP280_CalcHumidity(H,&uH); 	
				if(result)return (1);
    4e4a:	81 e0       	ldi	r24, 0x01	; 1
		error = 2; // temperature error
	}
	else
	error = 1;
	return (0);
}
    4e4c:	2c 96       	adiw	r28, 0x0c	; 12
    4e4e:	0f b6       	in	r0, 0x3f	; 63
    4e50:	f8 94       	cli
    4e52:	de bf       	out	0x3e, r29	; 62
    4e54:	0f be       	out	0x3f, r0	; 63
    4e56:	cd bf       	out	0x3d, r28	; 61
    4e58:	df 91       	pop	r29
    4e5a:	cf 91       	pop	r28
    4e5c:	1f 91       	pop	r17
    4e5e:	0f 91       	pop	r16
    4e60:	ff 90       	pop	r15
    4e62:	ef 90       	pop	r14
    4e64:	df 90       	pop	r13
    4e66:	cf 90       	pop	r12
    4e68:	08 95       	ret

00004e6a <BMP280_FctnInit>:



void BMP280_FctnInit(BMP280Sensor *this)
{
	this->inherited.vmt = &BMP280_vmt;
    4e6a:	2c e7       	ldi	r18, 0x7C	; 124
    4e6c:	32 e0       	ldi	r19, 0x02	; 2
    4e6e:	fc 01       	movw	r30, r24
    4e70:	35 87       	std	Z+13, r19	; 0x0d
    4e72:	24 87       	std	Z+12, r18	; 0x0c
    4e74:	08 95       	ret

00004e76 <BMP280_Configure>:

int BMP280_Configure(BMP280Sensor *this )
{
	// virtual function
	return 0;
}
    4e76:	80 e0       	ldi	r24, 0x00	; 0
    4e78:	90 e0       	ldi	r25, 0x00	; 0
    4e7a:	08 95       	ret

00004e7c <BMP280_VTinit>:
	printf("BMP280_Error\n");
	return 0;
}
void BMP280_VTinit( BMP280Sensor* this)
{
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
    4e7c:	24 e7       	ldi	r18, 0x74	; 116
    4e7e:	32 e0       	ldi	r19, 0x02	; 2
    4e80:	fc 01       	movw	r30, r24
    4e82:	31 83       	std	Z+1, r19	; 0x01
    4e84:	20 83       	st	Z, r18
    4e86:	08 95       	ret

00004e88 <BMP280_reset>:

int BMP280_reset( BMP280Sensor* this)
{
    // virtual function
    return 0;
}
    4e88:	80 e0       	ldi	r24, 0x00	; 0
    4e8a:	90 e0       	ldi	r25, 0x00	; 0
    4e8c:	08 95       	ret

00004e8e <BMP280_getType>:

int BMP280_getType(BMP280Sensor* this)
{
    return TYPE_SENSOR;
}
    4e8e:	83 e0       	ldi	r24, 0x03	; 3
    4e90:	90 e0       	ldi	r25, 0x00	; 0
    4e92:	08 95       	ret

00004e94 <BMP280_Error>:
	return 0;
}

int BMP280_Error(BMP280Sensor *this )
{
	printf("BMP280_Error\n");
    4e94:	86 ed       	ldi	r24, 0xD6	; 214
    4e96:	96 e0       	ldi	r25, 0x06	; 6
    4e98:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>
	return 0;
}
    4e9c:	80 e0       	ldi	r24, 0x00	; 0
    4e9e:	90 e0       	ldi	r25, 0x00	; 0
    4ea0:	08 95       	ret

00004ea2 <BMP280_init>:
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
}

int BMP280_init( BMP280Sensor* this)
{
    printf("BMP280 Sensor Init\n");
    4ea2:	83 ee       	ldi	r24, 0xE3	; 227
    4ea4:	96 e0       	ldi	r25, 0x06	; 6
    4ea6:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>
    return 0;
}
    4eaa:	80 e0       	ldi	r24, 0x00	; 0
    4eac:	90 e0       	ldi	r25, 0x00	; 0
    4eae:	08 95       	ret

00004eb0 <BMP280_Request>:
	// virtual function
	return 0;
}

int BMP280_Request(BMP280Sensor *this )
{
    4eb0:	cf 93       	push	r28
    4eb2:	df 93       	push	r29
	printf("BMP280 Request\n");
    4eb4:	86 ef       	ldi	r24, 0xF6	; 246
    4eb6:	96 e0       	ldi	r25, 0x06	; 6
    4eb8:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>
	int Delay = BMP280_StartMeasurment();
    4ebc:	19 db       	rcall	.-2510   	; 0x44f0 <BMP280_StartMeasurment>
    4ebe:	c8 2f       	mov	r28, r24
    4ec0:	d0 e0       	ldi	r29, 0x00	; 0
	printf("\tWait for %d ms\n",Delay);
    4ec2:	1f 92       	push	r1
    4ec4:	8f 93       	push	r24
    4ec6:	85 e0       	ldi	r24, 0x05	; 5
    4ec8:	97 e0       	ldi	r25, 0x07	; 7
    4eca:	9f 93       	push	r25
    4ecc:	8f 93       	push	r24
    4ece:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
	if( Delay == 0 )
    4ed2:	0f 90       	pop	r0
    4ed4:	0f 90       	pop	r0
    4ed6:	0f 90       	pop	r0
    4ed8:	0f 90       	pop	r0
    4eda:	20 97       	sbiw	r28, 0x00	; 0
    4edc:	19 f0       	breq	.+6      	; 0x4ee4 <BMP280_Request+0x34>
		return 0;
	else
		return ( 1 + Delay );
    4ede:	ce 01       	movw	r24, r28
    4ee0:	01 96       	adiw	r24, 0x01	; 1
    4ee2:	02 c0       	rjmp	.+4      	; 0x4ee8 <BMP280_Request+0x38>
{
	printf("BMP280 Request\n");
	int Delay = BMP280_StartMeasurment();
	printf("\tWait for %d ms\n",Delay);
	if( Delay == 0 )
		return 0;
    4ee4:	80 e0       	ldi	r24, 0x00	; 0
    4ee6:	90 e0       	ldi	r25, 0x00	; 0
	else
		return ( 1 + Delay );
}
    4ee8:	df 91       	pop	r29
    4eea:	cf 91       	pop	r28
    4eec:	08 95       	ret

00004eee <BMP280_Collect>:

int BMP280_Collect(BMP280Sensor *this )
{
    4eee:	ef 92       	push	r14
    4ef0:	ff 92       	push	r15
    4ef2:	0f 93       	push	r16
    4ef4:	1f 93       	push	r17
    4ef6:	cf 93       	push	r28
    4ef8:	df 93       	push	r29
    4efa:	cd b7       	in	r28, 0x3d	; 61
    4efc:	de b7       	in	r29, 0x3e	; 62
    4efe:	2c 97       	sbiw	r28, 0x0c	; 12
    4f00:	0f b6       	in	r0, 0x3f	; 63
    4f02:	f8 94       	cli
    4f04:	de bf       	out	0x3e, r29	; 62
    4f06:	0f be       	out	0x3f, r0	; 63
    4f08:	cd bf       	out	0x3d, r28	; 61
    4f0a:	8c 01       	movw	r16, r24
	printf("BMP280 Collect\n");
    4f0c:	86 e1       	ldi	r24, 0x16	; 22
    4f0e:	97 e0       	ldi	r25, 0x07	; 7
    4f10:	0e 94 93 30 	call	0x6126	; 0x6126 <puts>
	// double BMP280Data[3] = {-999,-999,-999};
	double T, P, H;
	BMP280_GetTPH(&T,&P,&H);
    4f14:	ae 01       	movw	r20, r28
    4f16:	47 5f       	subi	r20, 0xF7	; 247
    4f18:	5f 4f       	sbci	r21, 0xFF	; 255
    4f1a:	be 01       	movw	r22, r28
    4f1c:	6b 5f       	subi	r22, 0xFB	; 251
    4f1e:	7f 4f       	sbci	r23, 0xFF	; 255
    4f20:	ce 01       	movw	r24, r28
    4f22:	01 96       	adiw	r24, 0x01	; 1
    4f24:	4b df       	rcall	.-362    	; 0x4dbc <BMP280_GetTPH>
	// BMP280_GetTPH(BMP280Data,BMP280Data+1,BMP280Data+2);
	printf("\tTemperature = %.3f\n\tPressure = %.3f\n\tHumidity = %.3f\n",T,P,H);
    4f26:	8c 85       	ldd	r24, Y+12	; 0x0c
    4f28:	8f 93       	push	r24
    4f2a:	8b 85       	ldd	r24, Y+11	; 0x0b
    4f2c:	8f 93       	push	r24
    4f2e:	8a 85       	ldd	r24, Y+10	; 0x0a
    4f30:	8f 93       	push	r24
    4f32:	89 85       	ldd	r24, Y+9	; 0x09
    4f34:	8f 93       	push	r24
    4f36:	88 85       	ldd	r24, Y+8	; 0x08
    4f38:	8f 93       	push	r24
    4f3a:	8f 81       	ldd	r24, Y+7	; 0x07
    4f3c:	8f 93       	push	r24
    4f3e:	8e 81       	ldd	r24, Y+6	; 0x06
    4f40:	8f 93       	push	r24
    4f42:	8d 81       	ldd	r24, Y+5	; 0x05
    4f44:	8f 93       	push	r24
    4f46:	8c 81       	ldd	r24, Y+4	; 0x04
    4f48:	8f 93       	push	r24
    4f4a:	8b 81       	ldd	r24, Y+3	; 0x03
    4f4c:	8f 93       	push	r24
    4f4e:	8a 81       	ldd	r24, Y+2	; 0x02
    4f50:	8f 93       	push	r24
    4f52:	89 81       	ldd	r24, Y+1	; 0x01
    4f54:	8f 93       	push	r24
    4f56:	85 e2       	ldi	r24, 0x25	; 37
    4f58:	97 e0       	ldi	r25, 0x07	; 7
    4f5a:	9f 93       	push	r25
    4f5c:	8f 93       	push	r24
    4f5e:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
	printf("\tgetStart = %d\n\tgetEnd = %d\n",this->inherited.getStartNum( &this->inherited ),this->inherited.getEndNum( &this->inherited ));
    4f62:	d8 01       	movw	r26, r16
    4f64:	1a 96       	adiw	r26, 0x0a	; 10
    4f66:	ed 91       	ld	r30, X+
    4f68:	fc 91       	ld	r31, X
    4f6a:	1b 97       	sbiw	r26, 0x0b	; 11
    4f6c:	c8 01       	movw	r24, r16
    4f6e:	19 95       	eicall
    4f70:	f8 2e       	mov	r15, r24
    4f72:	e9 2e       	mov	r14, r25
    4f74:	d8 01       	movw	r26, r16
    4f76:	18 96       	adiw	r26, 0x08	; 8
    4f78:	ed 91       	ld	r30, X+
    4f7a:	fc 91       	ld	r31, X
    4f7c:	19 97       	sbiw	r26, 0x09	; 9
    4f7e:	c8 01       	movw	r24, r16
    4f80:	19 95       	eicall
    4f82:	ef 92       	push	r14
    4f84:	ff 92       	push	r15
    4f86:	9f 93       	push	r25
    4f88:	8f 93       	push	r24
    4f8a:	8c e5       	ldi	r24, 0x5C	; 92
    4f8c:	97 e0       	ldi	r25, 0x07	; 7
    4f8e:	9f 93       	push	r25
    4f90:	8f 93       	push	r24
    4f92:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
	for( int i = this->inherited.getStartNum(); i < this->inherited.getEndNum(); ++i )
	{
		cur_data->data[i] = BMP280Data[j++];
	}
	*/
	cur_data->data[0] = T;
    4f96:	e0 91 7a 07 	lds	r30, 0x077A
    4f9a:	f0 91 7b 07 	lds	r31, 0x077B
    4f9e:	89 81       	ldd	r24, Y+1	; 0x01
    4fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    4fa2:	ab 81       	ldd	r26, Y+3	; 0x03
    4fa4:	bc 81       	ldd	r27, Y+4	; 0x04
    4fa6:	80 83       	st	Z, r24
    4fa8:	91 83       	std	Z+1, r25	; 0x01
    4faa:	a2 83       	std	Z+2, r26	; 0x02
    4fac:	b3 83       	std	Z+3, r27	; 0x03
	cur_data->data[1] = P; 
    4fae:	e0 91 7a 07 	lds	r30, 0x077A
    4fb2:	f0 91 7b 07 	lds	r31, 0x077B
    4fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    4fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    4fba:	af 81       	ldd	r26, Y+7	; 0x07
    4fbc:	b8 85       	ldd	r27, Y+8	; 0x08
    4fbe:	84 83       	std	Z+4, r24	; 0x04
    4fc0:	95 83       	std	Z+5, r25	; 0x05
    4fc2:	a6 83       	std	Z+6, r26	; 0x06
    4fc4:	b7 83       	std	Z+7, r27	; 0x07
	return 0;
    4fc6:	0f b6       	in	r0, 0x3f	; 63
    4fc8:	f8 94       	cli
    4fca:	de bf       	out	0x3e, r29	; 62
    4fcc:	0f be       	out	0x3f, r0	; 63
    4fce:	cd bf       	out	0x3d, r28	; 61
}
    4fd0:	80 e0       	ldi	r24, 0x00	; 0
    4fd2:	90 e0       	ldi	r25, 0x00	; 0
    4fd4:	2c 96       	adiw	r28, 0x0c	; 12
    4fd6:	0f b6       	in	r0, 0x3f	; 63
    4fd8:	f8 94       	cli
    4fda:	de bf       	out	0x3e, r29	; 62
    4fdc:	0f be       	out	0x3f, r0	; 63
    4fde:	cd bf       	out	0x3d, r28	; 61
    4fe0:	df 91       	pop	r29
    4fe2:	cf 91       	pop	r28
    4fe4:	1f 91       	pop	r17
    4fe6:	0f 91       	pop	r16
    4fe8:	ff 90       	pop	r15
    4fea:	ef 90       	pop	r14
    4fec:	08 95       	ret

00004fee <New_BMP280_Sensor>:
    return TYPE_SENSOR;
}


BMP280Sensor* New_BMP280_Sensor( int num, int NumData )
{
    4fee:	ef 92       	push	r14
    4ff0:	ff 92       	push	r15
    4ff2:	0f 93       	push	r16
    4ff4:	1f 93       	push	r17
    4ff6:	cf 93       	push	r28
    4ff8:	df 93       	push	r29
    4ffa:	7c 01       	movw	r14, r24
    4ffc:	8b 01       	movw	r16, r22
	BMP280Sensor *p = malloc(sizeof(BMP280Sensor));
    4ffe:	8e e0       	ldi	r24, 0x0E	; 14
    5000:	90 e0       	ldi	r25, 0x00	; 0
    5002:	2b d6       	rcall	.+3158   	; 0x5c5a <malloc>
    5004:	ec 01       	movw	r28, r24
	p->inherited.getStartNum = fctn_getStartNum;
    5006:	80 ec       	ldi	r24, 0xC0	; 192
    5008:	9e e1       	ldi	r25, 0x1E	; 30
    500a:	99 87       	std	Y+9, r25	; 0x09
    500c:	88 87       	std	Y+8, r24	; 0x08
	p->inherited.getEndNum = fctn_getEndNum;
    500e:	84 ec       	ldi	r24, 0xC4	; 196
    5010:	9e e1       	ldi	r25, 0x1E	; 30
    5012:	9b 87       	std	Y+11, r25	; 0x0b
    5014:	8a 87       	std	Y+10, r24	; 0x0a
	printf("BMP280_Error\n");
	return 0;
}
void BMP280_VTinit( BMP280Sensor* this)
{
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
    5016:	84 e7       	ldi	r24, 0x74	; 116
    5018:	92 e0       	ldi	r25, 0x02	; 2
    501a:	99 83       	std	Y+1, r25	; 0x01
    501c:	88 83       	st	Y, r24



void BMP280_FctnInit(BMP280Sensor *this)
{
	this->inherited.vmt = &BMP280_vmt;
    501e:	8c e7       	ldi	r24, 0x7C	; 124
    5020:	92 e0       	ldi	r25, 0x02	; 2
    5022:	9d 87       	std	Y+13, r25	; 0x0d
    5024:	8c 87       	std	Y+12, r24	; 0x0c
	p->inherited.getEndNum = fctn_getEndNum;
    BMP280_VTinit( p );
    BMP280_FctnInit( p );
	
	
	p->inherited.test_num = num;
    5026:	fb 82       	std	Y+3, r15	; 0x03
    5028:	ea 82       	std	Y+2, r14	; 0x02
	p->inherited.NumOfData = NumData;
    502a:	1f 83       	std	Y+7, r17	; 0x07
    502c:	0e 83       	std	Y+6, r16	; 0x06
	p->inherited.StartNum = SensorDataCount;
    502e:	80 91 1d 0d 	lds	r24, 0x0D1D
    5032:	90 91 1e 0d 	lds	r25, 0x0D1E
    5036:	9d 83       	std	Y+5, r25	; 0x05
    5038:	8c 83       	std	Y+4, r24	; 0x04
	SensorDataCount += NumData;
    503a:	b8 01       	movw	r22, r16
    503c:	68 0f       	add	r22, r24
    503e:	79 1f       	adc	r23, r25
    5040:	70 93 1e 0d 	sts	0x0D1E, r23
    5044:	60 93 1d 0d 	sts	0x0D1D, r22
	printf("SensorDataCount %d\n",SensorDataCount);
    5048:	7f 93       	push	r23
    504a:	6f 93       	push	r22
    504c:	8a e2       	ldi	r24, 0x2A	; 42
    504e:	94 e0       	ldi	r25, 0x04	; 4
    5050:	9f 93       	push	r25
    5052:	8f 93       	push	r24
    5054:	0e 94 80 30 	call	0x6100	; 0x6100 <printf>
	//printf("get start %d end %d\n",p->inherited.getStartNum(& (p->inherited) ),p->inherited.getEndNum(& (p->inherited)));
	
	return p;
    5058:	0f 90       	pop	r0
    505a:	0f 90       	pop	r0
    505c:	0f 90       	pop	r0
    505e:	0f 90       	pop	r0
    5060:	ce 01       	movw	r24, r28
    5062:	df 91       	pop	r29
    5064:	cf 91       	pop	r28
    5066:	1f 91       	pop	r17
    5068:	0f 91       	pop	r16
    506a:	ff 90       	pop	r15
    506c:	ef 90       	pop	r14
    506e:	08 95       	ret

00005070 <__subsf3>:
    5070:	50 58       	subi	r21, 0x80	; 128

00005072 <__addsf3>:
    5072:	bb 27       	eor	r27, r27
    5074:	aa 27       	eor	r26, r26
    5076:	0e d0       	rcall	.+28     	; 0x5094 <__addsf3x>
    5078:	75 c1       	rjmp	.+746    	; 0x5364 <__fp_round>
    507a:	66 d1       	rcall	.+716    	; 0x5348 <__fp_pscA>
    507c:	30 f0       	brcs	.+12     	; 0x508a <__addsf3+0x18>
    507e:	6b d1       	rcall	.+726    	; 0x5356 <__fp_pscB>
    5080:	20 f0       	brcs	.+8      	; 0x508a <__addsf3+0x18>
    5082:	31 f4       	brne	.+12     	; 0x5090 <__addsf3+0x1e>
    5084:	9f 3f       	cpi	r25, 0xFF	; 255
    5086:	11 f4       	brne	.+4      	; 0x508c <__addsf3+0x1a>
    5088:	1e f4       	brtc	.+6      	; 0x5090 <__addsf3+0x1e>
    508a:	5b c1       	rjmp	.+694    	; 0x5342 <__fp_nan>
    508c:	0e f4       	brtc	.+2      	; 0x5090 <__addsf3+0x1e>
    508e:	e0 95       	com	r30
    5090:	e7 fb       	bst	r30, 7
    5092:	51 c1       	rjmp	.+674    	; 0x5336 <__fp_inf>

00005094 <__addsf3x>:
    5094:	e9 2f       	mov	r30, r25
    5096:	77 d1       	rcall	.+750    	; 0x5386 <__fp_split3>
    5098:	80 f3       	brcs	.-32     	; 0x507a <__addsf3+0x8>
    509a:	ba 17       	cp	r27, r26
    509c:	62 07       	cpc	r22, r18
    509e:	73 07       	cpc	r23, r19
    50a0:	84 07       	cpc	r24, r20
    50a2:	95 07       	cpc	r25, r21
    50a4:	18 f0       	brcs	.+6      	; 0x50ac <__addsf3x+0x18>
    50a6:	71 f4       	brne	.+28     	; 0x50c4 <__addsf3x+0x30>
    50a8:	9e f5       	brtc	.+102    	; 0x5110 <__addsf3x+0x7c>
    50aa:	8f c1       	rjmp	.+798    	; 0x53ca <__fp_zero>
    50ac:	0e f4       	brtc	.+2      	; 0x50b0 <__addsf3x+0x1c>
    50ae:	e0 95       	com	r30
    50b0:	0b 2e       	mov	r0, r27
    50b2:	ba 2f       	mov	r27, r26
    50b4:	a0 2d       	mov	r26, r0
    50b6:	0b 01       	movw	r0, r22
    50b8:	b9 01       	movw	r22, r18
    50ba:	90 01       	movw	r18, r0
    50bc:	0c 01       	movw	r0, r24
    50be:	ca 01       	movw	r24, r20
    50c0:	a0 01       	movw	r20, r0
    50c2:	11 24       	eor	r1, r1
    50c4:	ff 27       	eor	r31, r31
    50c6:	59 1b       	sub	r21, r25
    50c8:	99 f0       	breq	.+38     	; 0x50f0 <__addsf3x+0x5c>
    50ca:	59 3f       	cpi	r21, 0xF9	; 249
    50cc:	50 f4       	brcc	.+20     	; 0x50e2 <__addsf3x+0x4e>
    50ce:	50 3e       	cpi	r21, 0xE0	; 224
    50d0:	68 f1       	brcs	.+90     	; 0x512c <__addsf3x+0x98>
    50d2:	1a 16       	cp	r1, r26
    50d4:	f0 40       	sbci	r31, 0x00	; 0
    50d6:	a2 2f       	mov	r26, r18
    50d8:	23 2f       	mov	r18, r19
    50da:	34 2f       	mov	r19, r20
    50dc:	44 27       	eor	r20, r20
    50de:	58 5f       	subi	r21, 0xF8	; 248
    50e0:	f3 cf       	rjmp	.-26     	; 0x50c8 <__addsf3x+0x34>
    50e2:	46 95       	lsr	r20
    50e4:	37 95       	ror	r19
    50e6:	27 95       	ror	r18
    50e8:	a7 95       	ror	r26
    50ea:	f0 40       	sbci	r31, 0x00	; 0
    50ec:	53 95       	inc	r21
    50ee:	c9 f7       	brne	.-14     	; 0x50e2 <__addsf3x+0x4e>
    50f0:	7e f4       	brtc	.+30     	; 0x5110 <__addsf3x+0x7c>
    50f2:	1f 16       	cp	r1, r31
    50f4:	ba 0b       	sbc	r27, r26
    50f6:	62 0b       	sbc	r22, r18
    50f8:	73 0b       	sbc	r23, r19
    50fa:	84 0b       	sbc	r24, r20
    50fc:	ba f0       	brmi	.+46     	; 0x512c <__addsf3x+0x98>
    50fe:	91 50       	subi	r25, 0x01	; 1
    5100:	a1 f0       	breq	.+40     	; 0x512a <__addsf3x+0x96>
    5102:	ff 0f       	add	r31, r31
    5104:	bb 1f       	adc	r27, r27
    5106:	66 1f       	adc	r22, r22
    5108:	77 1f       	adc	r23, r23
    510a:	88 1f       	adc	r24, r24
    510c:	c2 f7       	brpl	.-16     	; 0x50fe <__addsf3x+0x6a>
    510e:	0e c0       	rjmp	.+28     	; 0x512c <__addsf3x+0x98>
    5110:	ba 0f       	add	r27, r26
    5112:	62 1f       	adc	r22, r18
    5114:	73 1f       	adc	r23, r19
    5116:	84 1f       	adc	r24, r20
    5118:	48 f4       	brcc	.+18     	; 0x512c <__addsf3x+0x98>
    511a:	87 95       	ror	r24
    511c:	77 95       	ror	r23
    511e:	67 95       	ror	r22
    5120:	b7 95       	ror	r27
    5122:	f7 95       	ror	r31
    5124:	9e 3f       	cpi	r25, 0xFE	; 254
    5126:	08 f0       	brcs	.+2      	; 0x512a <__addsf3x+0x96>
    5128:	b3 cf       	rjmp	.-154    	; 0x5090 <__addsf3+0x1e>
    512a:	93 95       	inc	r25
    512c:	88 0f       	add	r24, r24
    512e:	08 f0       	brcs	.+2      	; 0x5132 <__addsf3x+0x9e>
    5130:	99 27       	eor	r25, r25
    5132:	ee 0f       	add	r30, r30
    5134:	97 95       	ror	r25
    5136:	87 95       	ror	r24
    5138:	08 95       	ret

0000513a <__cmpsf2>:
    513a:	d9 d0       	rcall	.+434    	; 0x52ee <__fp_cmp>
    513c:	08 f4       	brcc	.+2      	; 0x5140 <__cmpsf2+0x6>
    513e:	81 e0       	ldi	r24, 0x01	; 1
    5140:	08 95       	ret

00005142 <__divsf3>:
    5142:	0c d0       	rcall	.+24     	; 0x515c <__divsf3x>
    5144:	0f c1       	rjmp	.+542    	; 0x5364 <__fp_round>
    5146:	07 d1       	rcall	.+526    	; 0x5356 <__fp_pscB>
    5148:	40 f0       	brcs	.+16     	; 0x515a <__divsf3+0x18>
    514a:	fe d0       	rcall	.+508    	; 0x5348 <__fp_pscA>
    514c:	30 f0       	brcs	.+12     	; 0x515a <__divsf3+0x18>
    514e:	21 f4       	brne	.+8      	; 0x5158 <__divsf3+0x16>
    5150:	5f 3f       	cpi	r21, 0xFF	; 255
    5152:	19 f0       	breq	.+6      	; 0x515a <__divsf3+0x18>
    5154:	f0 c0       	rjmp	.+480    	; 0x5336 <__fp_inf>
    5156:	51 11       	cpse	r21, r1
    5158:	39 c1       	rjmp	.+626    	; 0x53cc <__fp_szero>
    515a:	f3 c0       	rjmp	.+486    	; 0x5342 <__fp_nan>

0000515c <__divsf3x>:
    515c:	14 d1       	rcall	.+552    	; 0x5386 <__fp_split3>
    515e:	98 f3       	brcs	.-26     	; 0x5146 <__divsf3+0x4>

00005160 <__divsf3_pse>:
    5160:	99 23       	and	r25, r25
    5162:	c9 f3       	breq	.-14     	; 0x5156 <__divsf3+0x14>
    5164:	55 23       	and	r21, r21
    5166:	b1 f3       	breq	.-20     	; 0x5154 <__divsf3+0x12>
    5168:	95 1b       	sub	r25, r21
    516a:	55 0b       	sbc	r21, r21
    516c:	bb 27       	eor	r27, r27
    516e:	aa 27       	eor	r26, r26
    5170:	62 17       	cp	r22, r18
    5172:	73 07       	cpc	r23, r19
    5174:	84 07       	cpc	r24, r20
    5176:	38 f0       	brcs	.+14     	; 0x5186 <__divsf3_pse+0x26>
    5178:	9f 5f       	subi	r25, 0xFF	; 255
    517a:	5f 4f       	sbci	r21, 0xFF	; 255
    517c:	22 0f       	add	r18, r18
    517e:	33 1f       	adc	r19, r19
    5180:	44 1f       	adc	r20, r20
    5182:	aa 1f       	adc	r26, r26
    5184:	a9 f3       	breq	.-22     	; 0x5170 <__divsf3_pse+0x10>
    5186:	33 d0       	rcall	.+102    	; 0x51ee <__divsf3_pse+0x8e>
    5188:	0e 2e       	mov	r0, r30
    518a:	3a f0       	brmi	.+14     	; 0x519a <__divsf3_pse+0x3a>
    518c:	e0 e8       	ldi	r30, 0x80	; 128
    518e:	30 d0       	rcall	.+96     	; 0x51f0 <__divsf3_pse+0x90>
    5190:	91 50       	subi	r25, 0x01	; 1
    5192:	50 40       	sbci	r21, 0x00	; 0
    5194:	e6 95       	lsr	r30
    5196:	00 1c       	adc	r0, r0
    5198:	ca f7       	brpl	.-14     	; 0x518c <__divsf3_pse+0x2c>
    519a:	29 d0       	rcall	.+82     	; 0x51ee <__divsf3_pse+0x8e>
    519c:	fe 2f       	mov	r31, r30
    519e:	27 d0       	rcall	.+78     	; 0x51ee <__divsf3_pse+0x8e>
    51a0:	66 0f       	add	r22, r22
    51a2:	77 1f       	adc	r23, r23
    51a4:	88 1f       	adc	r24, r24
    51a6:	bb 1f       	adc	r27, r27
    51a8:	26 17       	cp	r18, r22
    51aa:	37 07       	cpc	r19, r23
    51ac:	48 07       	cpc	r20, r24
    51ae:	ab 07       	cpc	r26, r27
    51b0:	b0 e8       	ldi	r27, 0x80	; 128
    51b2:	09 f0       	breq	.+2      	; 0x51b6 <__divsf3_pse+0x56>
    51b4:	bb 0b       	sbc	r27, r27
    51b6:	80 2d       	mov	r24, r0
    51b8:	bf 01       	movw	r22, r30
    51ba:	ff 27       	eor	r31, r31
    51bc:	93 58       	subi	r25, 0x83	; 131
    51be:	5f 4f       	sbci	r21, 0xFF	; 255
    51c0:	2a f0       	brmi	.+10     	; 0x51cc <__divsf3_pse+0x6c>
    51c2:	9e 3f       	cpi	r25, 0xFE	; 254
    51c4:	51 05       	cpc	r21, r1
    51c6:	68 f0       	brcs	.+26     	; 0x51e2 <__divsf3_pse+0x82>
    51c8:	b6 c0       	rjmp	.+364    	; 0x5336 <__fp_inf>
    51ca:	00 c1       	rjmp	.+512    	; 0x53cc <__fp_szero>
    51cc:	5f 3f       	cpi	r21, 0xFF	; 255
    51ce:	ec f3       	brlt	.-6      	; 0x51ca <__divsf3_pse+0x6a>
    51d0:	98 3e       	cpi	r25, 0xE8	; 232
    51d2:	dc f3       	brlt	.-10     	; 0x51ca <__divsf3_pse+0x6a>
    51d4:	86 95       	lsr	r24
    51d6:	77 95       	ror	r23
    51d8:	67 95       	ror	r22
    51da:	b7 95       	ror	r27
    51dc:	f7 95       	ror	r31
    51de:	9f 5f       	subi	r25, 0xFF	; 255
    51e0:	c9 f7       	brne	.-14     	; 0x51d4 <__divsf3_pse+0x74>
    51e2:	88 0f       	add	r24, r24
    51e4:	91 1d       	adc	r25, r1
    51e6:	96 95       	lsr	r25
    51e8:	87 95       	ror	r24
    51ea:	97 f9       	bld	r25, 7
    51ec:	08 95       	ret
    51ee:	e1 e0       	ldi	r30, 0x01	; 1
    51f0:	66 0f       	add	r22, r22
    51f2:	77 1f       	adc	r23, r23
    51f4:	88 1f       	adc	r24, r24
    51f6:	bb 1f       	adc	r27, r27
    51f8:	62 17       	cp	r22, r18
    51fa:	73 07       	cpc	r23, r19
    51fc:	84 07       	cpc	r24, r20
    51fe:	ba 07       	cpc	r27, r26
    5200:	20 f0       	brcs	.+8      	; 0x520a <__divsf3_pse+0xaa>
    5202:	62 1b       	sub	r22, r18
    5204:	73 0b       	sbc	r23, r19
    5206:	84 0b       	sbc	r24, r20
    5208:	ba 0b       	sbc	r27, r26
    520a:	ee 1f       	adc	r30, r30
    520c:	88 f7       	brcc	.-30     	; 0x51f0 <__divsf3_pse+0x90>
    520e:	e0 95       	com	r30
    5210:	08 95       	ret

00005212 <__fixsfsi>:
    5212:	04 d0       	rcall	.+8      	; 0x521c <__fixunssfsi>
    5214:	68 94       	set
    5216:	b1 11       	cpse	r27, r1
    5218:	d9 c0       	rjmp	.+434    	; 0x53cc <__fp_szero>
    521a:	08 95       	ret

0000521c <__fixunssfsi>:
    521c:	bc d0       	rcall	.+376    	; 0x5396 <__fp_splitA>
    521e:	88 f0       	brcs	.+34     	; 0x5242 <__fixunssfsi+0x26>
    5220:	9f 57       	subi	r25, 0x7F	; 127
    5222:	90 f0       	brcs	.+36     	; 0x5248 <__fixunssfsi+0x2c>
    5224:	b9 2f       	mov	r27, r25
    5226:	99 27       	eor	r25, r25
    5228:	b7 51       	subi	r27, 0x17	; 23
    522a:	a0 f0       	brcs	.+40     	; 0x5254 <__fixunssfsi+0x38>
    522c:	d1 f0       	breq	.+52     	; 0x5262 <__fixunssfsi+0x46>
    522e:	66 0f       	add	r22, r22
    5230:	77 1f       	adc	r23, r23
    5232:	88 1f       	adc	r24, r24
    5234:	99 1f       	adc	r25, r25
    5236:	1a f0       	brmi	.+6      	; 0x523e <__fixunssfsi+0x22>
    5238:	ba 95       	dec	r27
    523a:	c9 f7       	brne	.-14     	; 0x522e <__fixunssfsi+0x12>
    523c:	12 c0       	rjmp	.+36     	; 0x5262 <__fixunssfsi+0x46>
    523e:	b1 30       	cpi	r27, 0x01	; 1
    5240:	81 f0       	breq	.+32     	; 0x5262 <__fixunssfsi+0x46>
    5242:	c3 d0       	rcall	.+390    	; 0x53ca <__fp_zero>
    5244:	b1 e0       	ldi	r27, 0x01	; 1
    5246:	08 95       	ret
    5248:	c0 c0       	rjmp	.+384    	; 0x53ca <__fp_zero>
    524a:	67 2f       	mov	r22, r23
    524c:	78 2f       	mov	r23, r24
    524e:	88 27       	eor	r24, r24
    5250:	b8 5f       	subi	r27, 0xF8	; 248
    5252:	39 f0       	breq	.+14     	; 0x5262 <__fixunssfsi+0x46>
    5254:	b9 3f       	cpi	r27, 0xF9	; 249
    5256:	cc f3       	brlt	.-14     	; 0x524a <__fixunssfsi+0x2e>
    5258:	86 95       	lsr	r24
    525a:	77 95       	ror	r23
    525c:	67 95       	ror	r22
    525e:	b3 95       	inc	r27
    5260:	d9 f7       	brne	.-10     	; 0x5258 <__fixunssfsi+0x3c>
    5262:	3e f4       	brtc	.+14     	; 0x5272 <__fixunssfsi+0x56>
    5264:	90 95       	com	r25
    5266:	80 95       	com	r24
    5268:	70 95       	com	r23
    526a:	61 95       	neg	r22
    526c:	7f 4f       	sbci	r23, 0xFF	; 255
    526e:	8f 4f       	sbci	r24, 0xFF	; 255
    5270:	9f 4f       	sbci	r25, 0xFF	; 255
    5272:	08 95       	ret

00005274 <__floatunsisf>:
    5274:	e8 94       	clt
    5276:	09 c0       	rjmp	.+18     	; 0x528a <__floatsisf+0x12>

00005278 <__floatsisf>:
    5278:	97 fb       	bst	r25, 7
    527a:	3e f4       	brtc	.+14     	; 0x528a <__floatsisf+0x12>
    527c:	90 95       	com	r25
    527e:	80 95       	com	r24
    5280:	70 95       	com	r23
    5282:	61 95       	neg	r22
    5284:	7f 4f       	sbci	r23, 0xFF	; 255
    5286:	8f 4f       	sbci	r24, 0xFF	; 255
    5288:	9f 4f       	sbci	r25, 0xFF	; 255
    528a:	99 23       	and	r25, r25
    528c:	a9 f0       	breq	.+42     	; 0x52b8 <__floatsisf+0x40>
    528e:	f9 2f       	mov	r31, r25
    5290:	96 e9       	ldi	r25, 0x96	; 150
    5292:	bb 27       	eor	r27, r27
    5294:	93 95       	inc	r25
    5296:	f6 95       	lsr	r31
    5298:	87 95       	ror	r24
    529a:	77 95       	ror	r23
    529c:	67 95       	ror	r22
    529e:	b7 95       	ror	r27
    52a0:	f1 11       	cpse	r31, r1
    52a2:	f8 cf       	rjmp	.-16     	; 0x5294 <__floatsisf+0x1c>
    52a4:	fa f4       	brpl	.+62     	; 0x52e4 <__floatsisf+0x6c>
    52a6:	bb 0f       	add	r27, r27
    52a8:	11 f4       	brne	.+4      	; 0x52ae <__floatsisf+0x36>
    52aa:	60 ff       	sbrs	r22, 0
    52ac:	1b c0       	rjmp	.+54     	; 0x52e4 <__floatsisf+0x6c>
    52ae:	6f 5f       	subi	r22, 0xFF	; 255
    52b0:	7f 4f       	sbci	r23, 0xFF	; 255
    52b2:	8f 4f       	sbci	r24, 0xFF	; 255
    52b4:	9f 4f       	sbci	r25, 0xFF	; 255
    52b6:	16 c0       	rjmp	.+44     	; 0x52e4 <__floatsisf+0x6c>
    52b8:	88 23       	and	r24, r24
    52ba:	11 f0       	breq	.+4      	; 0x52c0 <__floatsisf+0x48>
    52bc:	96 e9       	ldi	r25, 0x96	; 150
    52be:	11 c0       	rjmp	.+34     	; 0x52e2 <__floatsisf+0x6a>
    52c0:	77 23       	and	r23, r23
    52c2:	21 f0       	breq	.+8      	; 0x52cc <__floatsisf+0x54>
    52c4:	9e e8       	ldi	r25, 0x8E	; 142
    52c6:	87 2f       	mov	r24, r23
    52c8:	76 2f       	mov	r23, r22
    52ca:	05 c0       	rjmp	.+10     	; 0x52d6 <__floatsisf+0x5e>
    52cc:	66 23       	and	r22, r22
    52ce:	71 f0       	breq	.+28     	; 0x52ec <__floatsisf+0x74>
    52d0:	96 e8       	ldi	r25, 0x86	; 134
    52d2:	86 2f       	mov	r24, r22
    52d4:	70 e0       	ldi	r23, 0x00	; 0
    52d6:	60 e0       	ldi	r22, 0x00	; 0
    52d8:	2a f0       	brmi	.+10     	; 0x52e4 <__floatsisf+0x6c>
    52da:	9a 95       	dec	r25
    52dc:	66 0f       	add	r22, r22
    52de:	77 1f       	adc	r23, r23
    52e0:	88 1f       	adc	r24, r24
    52e2:	da f7       	brpl	.-10     	; 0x52da <__floatsisf+0x62>
    52e4:	88 0f       	add	r24, r24
    52e6:	96 95       	lsr	r25
    52e8:	87 95       	ror	r24
    52ea:	97 f9       	bld	r25, 7
    52ec:	08 95       	ret

000052ee <__fp_cmp>:
    52ee:	99 0f       	add	r25, r25
    52f0:	00 08       	sbc	r0, r0
    52f2:	55 0f       	add	r21, r21
    52f4:	aa 0b       	sbc	r26, r26
    52f6:	e0 e8       	ldi	r30, 0x80	; 128
    52f8:	fe ef       	ldi	r31, 0xFE	; 254
    52fa:	16 16       	cp	r1, r22
    52fc:	17 06       	cpc	r1, r23
    52fe:	e8 07       	cpc	r30, r24
    5300:	f9 07       	cpc	r31, r25
    5302:	c0 f0       	brcs	.+48     	; 0x5334 <__fp_cmp+0x46>
    5304:	12 16       	cp	r1, r18
    5306:	13 06       	cpc	r1, r19
    5308:	e4 07       	cpc	r30, r20
    530a:	f5 07       	cpc	r31, r21
    530c:	98 f0       	brcs	.+38     	; 0x5334 <__fp_cmp+0x46>
    530e:	62 1b       	sub	r22, r18
    5310:	73 0b       	sbc	r23, r19
    5312:	84 0b       	sbc	r24, r20
    5314:	95 0b       	sbc	r25, r21
    5316:	39 f4       	brne	.+14     	; 0x5326 <__fp_cmp+0x38>
    5318:	0a 26       	eor	r0, r26
    531a:	61 f0       	breq	.+24     	; 0x5334 <__fp_cmp+0x46>
    531c:	23 2b       	or	r18, r19
    531e:	24 2b       	or	r18, r20
    5320:	25 2b       	or	r18, r21
    5322:	21 f4       	brne	.+8      	; 0x532c <__fp_cmp+0x3e>
    5324:	08 95       	ret
    5326:	0a 26       	eor	r0, r26
    5328:	09 f4       	brne	.+2      	; 0x532c <__fp_cmp+0x3e>
    532a:	a1 40       	sbci	r26, 0x01	; 1
    532c:	a6 95       	lsr	r26
    532e:	8f ef       	ldi	r24, 0xFF	; 255
    5330:	81 1d       	adc	r24, r1
    5332:	81 1d       	adc	r24, r1
    5334:	08 95       	ret

00005336 <__fp_inf>:
    5336:	97 f9       	bld	r25, 7
    5338:	9f 67       	ori	r25, 0x7F	; 127
    533a:	80 e8       	ldi	r24, 0x80	; 128
    533c:	70 e0       	ldi	r23, 0x00	; 0
    533e:	60 e0       	ldi	r22, 0x00	; 0
    5340:	08 95       	ret

00005342 <__fp_nan>:
    5342:	9f ef       	ldi	r25, 0xFF	; 255
    5344:	80 ec       	ldi	r24, 0xC0	; 192
    5346:	08 95       	ret

00005348 <__fp_pscA>:
    5348:	00 24       	eor	r0, r0
    534a:	0a 94       	dec	r0
    534c:	16 16       	cp	r1, r22
    534e:	17 06       	cpc	r1, r23
    5350:	18 06       	cpc	r1, r24
    5352:	09 06       	cpc	r0, r25
    5354:	08 95       	ret

00005356 <__fp_pscB>:
    5356:	00 24       	eor	r0, r0
    5358:	0a 94       	dec	r0
    535a:	12 16       	cp	r1, r18
    535c:	13 06       	cpc	r1, r19
    535e:	14 06       	cpc	r1, r20
    5360:	05 06       	cpc	r0, r21
    5362:	08 95       	ret

00005364 <__fp_round>:
    5364:	09 2e       	mov	r0, r25
    5366:	03 94       	inc	r0
    5368:	00 0c       	add	r0, r0
    536a:	11 f4       	brne	.+4      	; 0x5370 <__fp_round+0xc>
    536c:	88 23       	and	r24, r24
    536e:	52 f0       	brmi	.+20     	; 0x5384 <__fp_round+0x20>
    5370:	bb 0f       	add	r27, r27
    5372:	40 f4       	brcc	.+16     	; 0x5384 <__fp_round+0x20>
    5374:	bf 2b       	or	r27, r31
    5376:	11 f4       	brne	.+4      	; 0x537c <__fp_round+0x18>
    5378:	60 ff       	sbrs	r22, 0
    537a:	04 c0       	rjmp	.+8      	; 0x5384 <__fp_round+0x20>
    537c:	6f 5f       	subi	r22, 0xFF	; 255
    537e:	7f 4f       	sbci	r23, 0xFF	; 255
    5380:	8f 4f       	sbci	r24, 0xFF	; 255
    5382:	9f 4f       	sbci	r25, 0xFF	; 255
    5384:	08 95       	ret

00005386 <__fp_split3>:
    5386:	57 fd       	sbrc	r21, 7
    5388:	90 58       	subi	r25, 0x80	; 128
    538a:	44 0f       	add	r20, r20
    538c:	55 1f       	adc	r21, r21
    538e:	59 f0       	breq	.+22     	; 0x53a6 <__fp_splitA+0x10>
    5390:	5f 3f       	cpi	r21, 0xFF	; 255
    5392:	71 f0       	breq	.+28     	; 0x53b0 <__fp_splitA+0x1a>
    5394:	47 95       	ror	r20

00005396 <__fp_splitA>:
    5396:	88 0f       	add	r24, r24
    5398:	97 fb       	bst	r25, 7
    539a:	99 1f       	adc	r25, r25
    539c:	61 f0       	breq	.+24     	; 0x53b6 <__fp_splitA+0x20>
    539e:	9f 3f       	cpi	r25, 0xFF	; 255
    53a0:	79 f0       	breq	.+30     	; 0x53c0 <__fp_splitA+0x2a>
    53a2:	87 95       	ror	r24
    53a4:	08 95       	ret
    53a6:	12 16       	cp	r1, r18
    53a8:	13 06       	cpc	r1, r19
    53aa:	14 06       	cpc	r1, r20
    53ac:	55 1f       	adc	r21, r21
    53ae:	f2 cf       	rjmp	.-28     	; 0x5394 <__fp_split3+0xe>
    53b0:	46 95       	lsr	r20
    53b2:	f1 df       	rcall	.-30     	; 0x5396 <__fp_splitA>
    53b4:	08 c0       	rjmp	.+16     	; 0x53c6 <__fp_splitA+0x30>
    53b6:	16 16       	cp	r1, r22
    53b8:	17 06       	cpc	r1, r23
    53ba:	18 06       	cpc	r1, r24
    53bc:	99 1f       	adc	r25, r25
    53be:	f1 cf       	rjmp	.-30     	; 0x53a2 <__fp_splitA+0xc>
    53c0:	86 95       	lsr	r24
    53c2:	71 05       	cpc	r23, r1
    53c4:	61 05       	cpc	r22, r1
    53c6:	08 94       	sec
    53c8:	08 95       	ret

000053ca <__fp_zero>:
    53ca:	e8 94       	clt

000053cc <__fp_szero>:
    53cc:	bb 27       	eor	r27, r27
    53ce:	66 27       	eor	r22, r22
    53d0:	77 27       	eor	r23, r23
    53d2:	cb 01       	movw	r24, r22
    53d4:	97 f9       	bld	r25, 7
    53d6:	08 95       	ret

000053d8 <__gesf2>:
    53d8:	8a df       	rcall	.-236    	; 0x52ee <__fp_cmp>
    53da:	08 f4       	brcc	.+2      	; 0x53de <__gesf2+0x6>
    53dc:	8f ef       	ldi	r24, 0xFF	; 255
    53de:	08 95       	ret

000053e0 <__mulsf3>:
    53e0:	0b d0       	rcall	.+22     	; 0x53f8 <__mulsf3x>
    53e2:	c0 cf       	rjmp	.-128    	; 0x5364 <__fp_round>
    53e4:	b1 df       	rcall	.-158    	; 0x5348 <__fp_pscA>
    53e6:	28 f0       	brcs	.+10     	; 0x53f2 <__mulsf3+0x12>
    53e8:	b6 df       	rcall	.-148    	; 0x5356 <__fp_pscB>
    53ea:	18 f0       	brcs	.+6      	; 0x53f2 <__mulsf3+0x12>
    53ec:	95 23       	and	r25, r21
    53ee:	09 f0       	breq	.+2      	; 0x53f2 <__mulsf3+0x12>
    53f0:	a2 cf       	rjmp	.-188    	; 0x5336 <__fp_inf>
    53f2:	a7 cf       	rjmp	.-178    	; 0x5342 <__fp_nan>
    53f4:	11 24       	eor	r1, r1
    53f6:	ea cf       	rjmp	.-44     	; 0x53cc <__fp_szero>

000053f8 <__mulsf3x>:
    53f8:	c6 df       	rcall	.-116    	; 0x5386 <__fp_split3>
    53fa:	a0 f3       	brcs	.-24     	; 0x53e4 <__mulsf3+0x4>

000053fc <__mulsf3_pse>:
    53fc:	95 9f       	mul	r25, r21
    53fe:	d1 f3       	breq	.-12     	; 0x53f4 <__mulsf3+0x14>
    5400:	95 0f       	add	r25, r21
    5402:	50 e0       	ldi	r21, 0x00	; 0
    5404:	55 1f       	adc	r21, r21
    5406:	62 9f       	mul	r22, r18
    5408:	f0 01       	movw	r30, r0
    540a:	72 9f       	mul	r23, r18
    540c:	bb 27       	eor	r27, r27
    540e:	f0 0d       	add	r31, r0
    5410:	b1 1d       	adc	r27, r1
    5412:	63 9f       	mul	r22, r19
    5414:	aa 27       	eor	r26, r26
    5416:	f0 0d       	add	r31, r0
    5418:	b1 1d       	adc	r27, r1
    541a:	aa 1f       	adc	r26, r26
    541c:	64 9f       	mul	r22, r20
    541e:	66 27       	eor	r22, r22
    5420:	b0 0d       	add	r27, r0
    5422:	a1 1d       	adc	r26, r1
    5424:	66 1f       	adc	r22, r22
    5426:	82 9f       	mul	r24, r18
    5428:	22 27       	eor	r18, r18
    542a:	b0 0d       	add	r27, r0
    542c:	a1 1d       	adc	r26, r1
    542e:	62 1f       	adc	r22, r18
    5430:	73 9f       	mul	r23, r19
    5432:	b0 0d       	add	r27, r0
    5434:	a1 1d       	adc	r26, r1
    5436:	62 1f       	adc	r22, r18
    5438:	83 9f       	mul	r24, r19
    543a:	a0 0d       	add	r26, r0
    543c:	61 1d       	adc	r22, r1
    543e:	22 1f       	adc	r18, r18
    5440:	74 9f       	mul	r23, r20
    5442:	33 27       	eor	r19, r19
    5444:	a0 0d       	add	r26, r0
    5446:	61 1d       	adc	r22, r1
    5448:	23 1f       	adc	r18, r19
    544a:	84 9f       	mul	r24, r20
    544c:	60 0d       	add	r22, r0
    544e:	21 1d       	adc	r18, r1
    5450:	82 2f       	mov	r24, r18
    5452:	76 2f       	mov	r23, r22
    5454:	6a 2f       	mov	r22, r26
    5456:	11 24       	eor	r1, r1
    5458:	9f 57       	subi	r25, 0x7F	; 127
    545a:	50 40       	sbci	r21, 0x00	; 0
    545c:	8a f0       	brmi	.+34     	; 0x5480 <__mulsf3_pse+0x84>
    545e:	e1 f0       	breq	.+56     	; 0x5498 <__mulsf3_pse+0x9c>
    5460:	88 23       	and	r24, r24
    5462:	4a f0       	brmi	.+18     	; 0x5476 <__mulsf3_pse+0x7a>
    5464:	ee 0f       	add	r30, r30
    5466:	ff 1f       	adc	r31, r31
    5468:	bb 1f       	adc	r27, r27
    546a:	66 1f       	adc	r22, r22
    546c:	77 1f       	adc	r23, r23
    546e:	88 1f       	adc	r24, r24
    5470:	91 50       	subi	r25, 0x01	; 1
    5472:	50 40       	sbci	r21, 0x00	; 0
    5474:	a9 f7       	brne	.-22     	; 0x5460 <__mulsf3_pse+0x64>
    5476:	9e 3f       	cpi	r25, 0xFE	; 254
    5478:	51 05       	cpc	r21, r1
    547a:	70 f0       	brcs	.+28     	; 0x5498 <__mulsf3_pse+0x9c>
    547c:	5c cf       	rjmp	.-328    	; 0x5336 <__fp_inf>
    547e:	a6 cf       	rjmp	.-180    	; 0x53cc <__fp_szero>
    5480:	5f 3f       	cpi	r21, 0xFF	; 255
    5482:	ec f3       	brlt	.-6      	; 0x547e <__mulsf3_pse+0x82>
    5484:	98 3e       	cpi	r25, 0xE8	; 232
    5486:	dc f3       	brlt	.-10     	; 0x547e <__mulsf3_pse+0x82>
    5488:	86 95       	lsr	r24
    548a:	77 95       	ror	r23
    548c:	67 95       	ror	r22
    548e:	b7 95       	ror	r27
    5490:	f7 95       	ror	r31
    5492:	e7 95       	ror	r30
    5494:	9f 5f       	subi	r25, 0xFF	; 255
    5496:	c1 f7       	brne	.-16     	; 0x5488 <__mulsf3_pse+0x8c>
    5498:	fe 2b       	or	r31, r30
    549a:	88 0f       	add	r24, r24
    549c:	91 1d       	adc	r25, r1
    549e:	96 95       	lsr	r25
    54a0:	87 95       	ror	r24
    54a2:	97 f9       	bld	r25, 7
    54a4:	08 95       	ret

000054a6 <vfprintf>:
    54a6:	2f 92       	push	r2
    54a8:	3f 92       	push	r3
    54aa:	4f 92       	push	r4
    54ac:	5f 92       	push	r5
    54ae:	6f 92       	push	r6
    54b0:	7f 92       	push	r7
    54b2:	8f 92       	push	r8
    54b4:	9f 92       	push	r9
    54b6:	af 92       	push	r10
    54b8:	bf 92       	push	r11
    54ba:	cf 92       	push	r12
    54bc:	df 92       	push	r13
    54be:	ef 92       	push	r14
    54c0:	ff 92       	push	r15
    54c2:	0f 93       	push	r16
    54c4:	1f 93       	push	r17
    54c6:	cf 93       	push	r28
    54c8:	df 93       	push	r29
    54ca:	cd b7       	in	r28, 0x3d	; 61
    54cc:	de b7       	in	r29, 0x3e	; 62
    54ce:	63 97       	sbiw	r28, 0x13	; 19
    54d0:	0f b6       	in	r0, 0x3f	; 63
    54d2:	f8 94       	cli
    54d4:	de bf       	out	0x3e, r29	; 62
    54d6:	0f be       	out	0x3f, r0	; 63
    54d8:	cd bf       	out	0x3d, r28	; 61
    54da:	6c 01       	movw	r12, r24
    54dc:	4b 01       	movw	r8, r22
    54de:	2a 01       	movw	r4, r20
    54e0:	fc 01       	movw	r30, r24
    54e2:	17 82       	std	Z+7, r1	; 0x07
    54e4:	16 82       	std	Z+6, r1	; 0x06
    54e6:	83 81       	ldd	r24, Z+3	; 0x03
    54e8:	81 ff       	sbrs	r24, 1
    54ea:	29 c3       	rjmp	.+1618   	; 0x5b3e <vfprintf+0x698>
    54ec:	ae 01       	movw	r20, r28
    54ee:	4f 5f       	subi	r20, 0xFF	; 255
    54f0:	5f 4f       	sbci	r21, 0xFF	; 255
    54f2:	3a 01       	movw	r6, r20
    54f4:	f6 01       	movw	r30, r12
    54f6:	93 81       	ldd	r25, Z+3	; 0x03
    54f8:	f4 01       	movw	r30, r8
    54fa:	93 fd       	sbrc	r25, 3
    54fc:	85 91       	lpm	r24, Z+
    54fe:	93 ff       	sbrs	r25, 3
    5500:	81 91       	ld	r24, Z+
    5502:	4f 01       	movw	r8, r30
    5504:	88 23       	and	r24, r24
    5506:	09 f4       	brne	.+2      	; 0x550a <vfprintf+0x64>
    5508:	16 c3       	rjmp	.+1580   	; 0x5b36 <vfprintf+0x690>
    550a:	85 32       	cpi	r24, 0x25	; 37
    550c:	39 f4       	brne	.+14     	; 0x551c <vfprintf+0x76>
    550e:	93 fd       	sbrc	r25, 3
    5510:	85 91       	lpm	r24, Z+
    5512:	93 ff       	sbrs	r25, 3
    5514:	81 91       	ld	r24, Z+
    5516:	4f 01       	movw	r8, r30
    5518:	85 32       	cpi	r24, 0x25	; 37
    551a:	31 f4       	brne	.+12     	; 0x5528 <vfprintf+0x82>
    551c:	b6 01       	movw	r22, r12
    551e:	90 e0       	ldi	r25, 0x00	; 0
    5520:	b7 d5       	rcall	.+2926   	; 0x6090 <fputc>
    5522:	52 01       	movw	r10, r4
    5524:	25 01       	movw	r4, r10
    5526:	e6 cf       	rjmp	.-52     	; 0x54f4 <vfprintf+0x4e>
    5528:	10 e0       	ldi	r17, 0x00	; 0
    552a:	f1 2c       	mov	r15, r1
    552c:	20 e0       	ldi	r18, 0x00	; 0
    552e:	20 32       	cpi	r18, 0x20	; 32
    5530:	a0 f4       	brcc	.+40     	; 0x555a <vfprintf+0xb4>
    5532:	8b 32       	cpi	r24, 0x2B	; 43
    5534:	69 f0       	breq	.+26     	; 0x5550 <vfprintf+0xaa>
    5536:	30 f4       	brcc	.+12     	; 0x5544 <vfprintf+0x9e>
    5538:	80 32       	cpi	r24, 0x20	; 32
    553a:	59 f0       	breq	.+22     	; 0x5552 <vfprintf+0xac>
    553c:	83 32       	cpi	r24, 0x23	; 35
    553e:	69 f4       	brne	.+26     	; 0x555a <vfprintf+0xb4>
    5540:	20 61       	ori	r18, 0x10	; 16
    5542:	2c c0       	rjmp	.+88     	; 0x559c <vfprintf+0xf6>
    5544:	8d 32       	cpi	r24, 0x2D	; 45
    5546:	39 f0       	breq	.+14     	; 0x5556 <vfprintf+0xb0>
    5548:	80 33       	cpi	r24, 0x30	; 48
    554a:	39 f4       	brne	.+14     	; 0x555a <vfprintf+0xb4>
    554c:	21 60       	ori	r18, 0x01	; 1
    554e:	26 c0       	rjmp	.+76     	; 0x559c <vfprintf+0xf6>
    5550:	22 60       	ori	r18, 0x02	; 2
    5552:	24 60       	ori	r18, 0x04	; 4
    5554:	23 c0       	rjmp	.+70     	; 0x559c <vfprintf+0xf6>
    5556:	28 60       	ori	r18, 0x08	; 8
    5558:	21 c0       	rjmp	.+66     	; 0x559c <vfprintf+0xf6>
    555a:	27 fd       	sbrc	r18, 7
    555c:	27 c0       	rjmp	.+78     	; 0x55ac <vfprintf+0x106>
    555e:	30 ed       	ldi	r19, 0xD0	; 208
    5560:	38 0f       	add	r19, r24
    5562:	3a 30       	cpi	r19, 0x0A	; 10
    5564:	78 f4       	brcc	.+30     	; 0x5584 <vfprintf+0xde>
    5566:	26 ff       	sbrs	r18, 6
    5568:	06 c0       	rjmp	.+12     	; 0x5576 <vfprintf+0xd0>
    556a:	fa e0       	ldi	r31, 0x0A	; 10
    556c:	1f 9f       	mul	r17, r31
    556e:	30 0d       	add	r19, r0
    5570:	11 24       	eor	r1, r1
    5572:	13 2f       	mov	r17, r19
    5574:	13 c0       	rjmp	.+38     	; 0x559c <vfprintf+0xf6>
    5576:	4a e0       	ldi	r20, 0x0A	; 10
    5578:	f4 9e       	mul	r15, r20
    557a:	30 0d       	add	r19, r0
    557c:	11 24       	eor	r1, r1
    557e:	f3 2e       	mov	r15, r19
    5580:	20 62       	ori	r18, 0x20	; 32
    5582:	0c c0       	rjmp	.+24     	; 0x559c <vfprintf+0xf6>
    5584:	8e 32       	cpi	r24, 0x2E	; 46
    5586:	21 f4       	brne	.+8      	; 0x5590 <vfprintf+0xea>
    5588:	26 fd       	sbrc	r18, 6
    558a:	d5 c2       	rjmp	.+1450   	; 0x5b36 <vfprintf+0x690>
    558c:	20 64       	ori	r18, 0x40	; 64
    558e:	06 c0       	rjmp	.+12     	; 0x559c <vfprintf+0xf6>
    5590:	8c 36       	cpi	r24, 0x6C	; 108
    5592:	11 f4       	brne	.+4      	; 0x5598 <vfprintf+0xf2>
    5594:	20 68       	ori	r18, 0x80	; 128
    5596:	02 c0       	rjmp	.+4      	; 0x559c <vfprintf+0xf6>
    5598:	88 36       	cpi	r24, 0x68	; 104
    559a:	41 f4       	brne	.+16     	; 0x55ac <vfprintf+0x106>
    559c:	f4 01       	movw	r30, r8
    559e:	93 fd       	sbrc	r25, 3
    55a0:	85 91       	lpm	r24, Z+
    55a2:	93 ff       	sbrs	r25, 3
    55a4:	81 91       	ld	r24, Z+
    55a6:	4f 01       	movw	r8, r30
    55a8:	81 11       	cpse	r24, r1
    55aa:	c1 cf       	rjmp	.-126    	; 0x552e <vfprintf+0x88>
    55ac:	9b eb       	ldi	r25, 0xBB	; 187
    55ae:	98 0f       	add	r25, r24
    55b0:	93 30       	cpi	r25, 0x03	; 3
    55b2:	18 f4       	brcc	.+6      	; 0x55ba <vfprintf+0x114>
    55b4:	20 61       	ori	r18, 0x10	; 16
    55b6:	80 5e       	subi	r24, 0xE0	; 224
    55b8:	06 c0       	rjmp	.+12     	; 0x55c6 <vfprintf+0x120>
    55ba:	9b e9       	ldi	r25, 0x9B	; 155
    55bc:	98 0f       	add	r25, r24
    55be:	93 30       	cpi	r25, 0x03	; 3
    55c0:	08 f0       	brcs	.+2      	; 0x55c4 <vfprintf+0x11e>
    55c2:	64 c1       	rjmp	.+712    	; 0x588c <vfprintf+0x3e6>
    55c4:	2f 7e       	andi	r18, 0xEF	; 239
    55c6:	26 ff       	sbrs	r18, 6
    55c8:	16 e0       	ldi	r17, 0x06	; 6
    55ca:	2f 73       	andi	r18, 0x3F	; 63
    55cc:	32 2e       	mov	r3, r18
    55ce:	85 36       	cpi	r24, 0x65	; 101
    55d0:	19 f4       	brne	.+6      	; 0x55d8 <vfprintf+0x132>
    55d2:	20 64       	ori	r18, 0x40	; 64
    55d4:	32 2e       	mov	r3, r18
    55d6:	08 c0       	rjmp	.+16     	; 0x55e8 <vfprintf+0x142>
    55d8:	86 36       	cpi	r24, 0x66	; 102
    55da:	21 f4       	brne	.+8      	; 0x55e4 <vfprintf+0x13e>
    55dc:	f2 2f       	mov	r31, r18
    55de:	f0 68       	ori	r31, 0x80	; 128
    55e0:	3f 2e       	mov	r3, r31
    55e2:	02 c0       	rjmp	.+4      	; 0x55e8 <vfprintf+0x142>
    55e4:	11 11       	cpse	r17, r1
    55e6:	11 50       	subi	r17, 0x01	; 1
    55e8:	37 fe       	sbrs	r3, 7
    55ea:	07 c0       	rjmp	.+14     	; 0x55fa <vfprintf+0x154>
    55ec:	1c 33       	cpi	r17, 0x3C	; 60
    55ee:	50 f4       	brcc	.+20     	; 0x5604 <vfprintf+0x15e>
    55f0:	ee 24       	eor	r14, r14
    55f2:	e3 94       	inc	r14
    55f4:	e1 0e       	add	r14, r17
    55f6:	27 e0       	ldi	r18, 0x07	; 7
    55f8:	0b c0       	rjmp	.+22     	; 0x5610 <vfprintf+0x16a>
    55fa:	18 30       	cpi	r17, 0x08	; 8
    55fc:	38 f0       	brcs	.+14     	; 0x560c <vfprintf+0x166>
    55fe:	27 e0       	ldi	r18, 0x07	; 7
    5600:	17 e0       	ldi	r17, 0x07	; 7
    5602:	05 c0       	rjmp	.+10     	; 0x560e <vfprintf+0x168>
    5604:	27 e0       	ldi	r18, 0x07	; 7
    5606:	4c e3       	ldi	r20, 0x3C	; 60
    5608:	e4 2e       	mov	r14, r20
    560a:	02 c0       	rjmp	.+4      	; 0x5610 <vfprintf+0x16a>
    560c:	21 2f       	mov	r18, r17
    560e:	e1 2c       	mov	r14, r1
    5610:	52 01       	movw	r10, r4
    5612:	44 e0       	ldi	r20, 0x04	; 4
    5614:	a4 0e       	add	r10, r20
    5616:	b1 1c       	adc	r11, r1
    5618:	f2 01       	movw	r30, r4
    561a:	60 81       	ld	r22, Z
    561c:	71 81       	ldd	r23, Z+1	; 0x01
    561e:	82 81       	ldd	r24, Z+2	; 0x02
    5620:	93 81       	ldd	r25, Z+3	; 0x03
    5622:	0e 2d       	mov	r16, r14
    5624:	a3 01       	movw	r20, r6
    5626:	46 d4       	rcall	.+2188   	; 0x5eb4 <__ftoa_engine>
    5628:	2c 01       	movw	r4, r24
    562a:	09 81       	ldd	r16, Y+1	; 0x01
    562c:	00 ff       	sbrs	r16, 0
    562e:	02 c0       	rjmp	.+4      	; 0x5634 <vfprintf+0x18e>
    5630:	03 ff       	sbrs	r16, 3
    5632:	07 c0       	rjmp	.+14     	; 0x5642 <vfprintf+0x19c>
    5634:	31 fc       	sbrc	r3, 1
    5636:	08 c0       	rjmp	.+16     	; 0x5648 <vfprintf+0x1a2>
    5638:	32 fe       	sbrs	r3, 2
    563a:	09 c0       	rjmp	.+18     	; 0x564e <vfprintf+0x1a8>
    563c:	30 e2       	ldi	r19, 0x20	; 32
    563e:	23 2e       	mov	r2, r19
    5640:	07 c0       	rjmp	.+14     	; 0x5650 <vfprintf+0x1aa>
    5642:	2d e2       	ldi	r18, 0x2D	; 45
    5644:	22 2e       	mov	r2, r18
    5646:	04 c0       	rjmp	.+8      	; 0x5650 <vfprintf+0x1aa>
    5648:	9b e2       	ldi	r25, 0x2B	; 43
    564a:	29 2e       	mov	r2, r25
    564c:	01 c0       	rjmp	.+2      	; 0x5650 <vfprintf+0x1aa>
    564e:	21 2c       	mov	r2, r1
    5650:	80 2f       	mov	r24, r16
    5652:	8c 70       	andi	r24, 0x0C	; 12
    5654:	19 f0       	breq	.+6      	; 0x565c <vfprintf+0x1b6>
    5656:	21 10       	cpse	r2, r1
    5658:	51 c2       	rjmp	.+1186   	; 0x5afc <vfprintf+0x656>
    565a:	8d c2       	rjmp	.+1306   	; 0x5b76 <vfprintf+0x6d0>
    565c:	37 fe       	sbrs	r3, 7
    565e:	0f c0       	rjmp	.+30     	; 0x567e <vfprintf+0x1d8>
    5660:	e4 0c       	add	r14, r4
    5662:	04 ff       	sbrs	r16, 4
    5664:	04 c0       	rjmp	.+8      	; 0x566e <vfprintf+0x1c8>
    5666:	8a 81       	ldd	r24, Y+2	; 0x02
    5668:	81 33       	cpi	r24, 0x31	; 49
    566a:	09 f4       	brne	.+2      	; 0x566e <vfprintf+0x1c8>
    566c:	ea 94       	dec	r14
    566e:	1e 14       	cp	r1, r14
    5670:	74 f5       	brge	.+92     	; 0x56ce <vfprintf+0x228>
    5672:	f8 e0       	ldi	r31, 0x08	; 8
    5674:	fe 15       	cp	r31, r14
    5676:	78 f5       	brcc	.+94     	; 0x56d6 <vfprintf+0x230>
    5678:	88 e0       	ldi	r24, 0x08	; 8
    567a:	e8 2e       	mov	r14, r24
    567c:	2c c0       	rjmp	.+88     	; 0x56d6 <vfprintf+0x230>
    567e:	36 fc       	sbrc	r3, 6
    5680:	2a c0       	rjmp	.+84     	; 0x56d6 <vfprintf+0x230>
    5682:	81 2f       	mov	r24, r17
    5684:	90 e0       	ldi	r25, 0x00	; 0
    5686:	84 15       	cp	r24, r4
    5688:	95 05       	cpc	r25, r5
    568a:	9c f0       	brlt	.+38     	; 0x56b2 <vfprintf+0x20c>
    568c:	2c ef       	ldi	r18, 0xFC	; 252
    568e:	42 16       	cp	r4, r18
    5690:	2f ef       	ldi	r18, 0xFF	; 255
    5692:	52 06       	cpc	r5, r18
    5694:	74 f0       	brlt	.+28     	; 0x56b2 <vfprintf+0x20c>
    5696:	43 2d       	mov	r20, r3
    5698:	40 68       	ori	r20, 0x80	; 128
    569a:	34 2e       	mov	r3, r20
    569c:	0a c0       	rjmp	.+20     	; 0x56b2 <vfprintf+0x20c>
    569e:	e2 e0       	ldi	r30, 0x02	; 2
    56a0:	f0 e0       	ldi	r31, 0x00	; 0
    56a2:	ec 0f       	add	r30, r28
    56a4:	fd 1f       	adc	r31, r29
    56a6:	e1 0f       	add	r30, r17
    56a8:	f1 1d       	adc	r31, r1
    56aa:	80 81       	ld	r24, Z
    56ac:	80 33       	cpi	r24, 0x30	; 48
    56ae:	19 f4       	brne	.+6      	; 0x56b6 <vfprintf+0x210>
    56b0:	11 50       	subi	r17, 0x01	; 1
    56b2:	11 11       	cpse	r17, r1
    56b4:	f4 cf       	rjmp	.-24     	; 0x569e <vfprintf+0x1f8>
    56b6:	37 fe       	sbrs	r3, 7
    56b8:	0e c0       	rjmp	.+28     	; 0x56d6 <vfprintf+0x230>
    56ba:	ee 24       	eor	r14, r14
    56bc:	e3 94       	inc	r14
    56be:	e1 0e       	add	r14, r17
    56c0:	81 2f       	mov	r24, r17
    56c2:	90 e0       	ldi	r25, 0x00	; 0
    56c4:	48 16       	cp	r4, r24
    56c6:	59 06       	cpc	r5, r25
    56c8:	2c f4       	brge	.+10     	; 0x56d4 <vfprintf+0x22e>
    56ca:	14 19       	sub	r17, r4
    56cc:	04 c0       	rjmp	.+8      	; 0x56d6 <vfprintf+0x230>
    56ce:	ee 24       	eor	r14, r14
    56d0:	e3 94       	inc	r14
    56d2:	01 c0       	rjmp	.+2      	; 0x56d6 <vfprintf+0x230>
    56d4:	10 e0       	ldi	r17, 0x00	; 0
    56d6:	37 fe       	sbrs	r3, 7
    56d8:	06 c0       	rjmp	.+12     	; 0x56e6 <vfprintf+0x240>
    56da:	14 14       	cp	r1, r4
    56dc:	15 04       	cpc	r1, r5
    56de:	34 f4       	brge	.+12     	; 0x56ec <vfprintf+0x246>
    56e0:	c2 01       	movw	r24, r4
    56e2:	01 96       	adiw	r24, 0x01	; 1
    56e4:	05 c0       	rjmp	.+10     	; 0x56f0 <vfprintf+0x24a>
    56e6:	85 e0       	ldi	r24, 0x05	; 5
    56e8:	90 e0       	ldi	r25, 0x00	; 0
    56ea:	02 c0       	rjmp	.+4      	; 0x56f0 <vfprintf+0x24a>
    56ec:	81 e0       	ldi	r24, 0x01	; 1
    56ee:	90 e0       	ldi	r25, 0x00	; 0
    56f0:	21 10       	cpse	r2, r1
    56f2:	01 96       	adiw	r24, 0x01	; 1
    56f4:	11 23       	and	r17, r17
    56f6:	31 f0       	breq	.+12     	; 0x5704 <vfprintf+0x25e>
    56f8:	21 2f       	mov	r18, r17
    56fa:	30 e0       	ldi	r19, 0x00	; 0
    56fc:	2f 5f       	subi	r18, 0xFF	; 255
    56fe:	3f 4f       	sbci	r19, 0xFF	; 255
    5700:	82 0f       	add	r24, r18
    5702:	93 1f       	adc	r25, r19
    5704:	2f 2d       	mov	r18, r15
    5706:	30 e0       	ldi	r19, 0x00	; 0
    5708:	82 17       	cp	r24, r18
    570a:	93 07       	cpc	r25, r19
    570c:	14 f4       	brge	.+4      	; 0x5712 <vfprintf+0x26c>
    570e:	f8 1a       	sub	r15, r24
    5710:	01 c0       	rjmp	.+2      	; 0x5714 <vfprintf+0x26e>
    5712:	f1 2c       	mov	r15, r1
    5714:	83 2d       	mov	r24, r3
    5716:	89 70       	andi	r24, 0x09	; 9
    5718:	41 f4       	brne	.+16     	; 0x572a <vfprintf+0x284>
    571a:	ff 20       	and	r15, r15
    571c:	31 f0       	breq	.+12     	; 0x572a <vfprintf+0x284>
    571e:	b6 01       	movw	r22, r12
    5720:	80 e2       	ldi	r24, 0x20	; 32
    5722:	90 e0       	ldi	r25, 0x00	; 0
    5724:	b5 d4       	rcall	.+2410   	; 0x6090 <fputc>
    5726:	fa 94       	dec	r15
    5728:	f8 cf       	rjmp	.-16     	; 0x571a <vfprintf+0x274>
    572a:	22 20       	and	r2, r2
    572c:	21 f0       	breq	.+8      	; 0x5736 <vfprintf+0x290>
    572e:	b6 01       	movw	r22, r12
    5730:	82 2d       	mov	r24, r2
    5732:	90 e0       	ldi	r25, 0x00	; 0
    5734:	ad d4       	rcall	.+2394   	; 0x6090 <fputc>
    5736:	33 fc       	sbrc	r3, 3
    5738:	08 c0       	rjmp	.+16     	; 0x574a <vfprintf+0x2a4>
    573a:	ff 20       	and	r15, r15
    573c:	31 f0       	breq	.+12     	; 0x574a <vfprintf+0x2a4>
    573e:	b6 01       	movw	r22, r12
    5740:	80 e3       	ldi	r24, 0x30	; 48
    5742:	90 e0       	ldi	r25, 0x00	; 0
    5744:	a5 d4       	rcall	.+2378   	; 0x6090 <fputc>
    5746:	fa 94       	dec	r15
    5748:	f8 cf       	rjmp	.-16     	; 0x573a <vfprintf+0x294>
    574a:	37 fe       	sbrs	r3, 7
    574c:	58 c0       	rjmp	.+176    	; 0x57fe <vfprintf+0x358>
    574e:	94 2d       	mov	r25, r4
    5750:	85 2d       	mov	r24, r5
    5752:	57 fe       	sbrs	r5, 7
    5754:	02 c0       	rjmp	.+4      	; 0x575a <vfprintf+0x2b4>
    5756:	90 e0       	ldi	r25, 0x00	; 0
    5758:	80 e0       	ldi	r24, 0x00	; 0
    575a:	29 2e       	mov	r2, r25
    575c:	38 2e       	mov	r3, r24
    575e:	20 e0       	ldi	r18, 0x00	; 0
    5760:	30 e0       	ldi	r19, 0x00	; 0
    5762:	a2 01       	movw	r20, r4
    5764:	4e 19       	sub	r20, r14
    5766:	51 09       	sbc	r21, r1
    5768:	5d 87       	std	Y+13, r21	; 0x0d
    576a:	4c 87       	std	Y+12, r20	; 0x0c
    576c:	a2 01       	movw	r20, r4
    576e:	42 19       	sub	r20, r2
    5770:	53 09       	sbc	r21, r3
    5772:	5f 87       	std	Y+15, r21	; 0x0f
    5774:	4e 87       	std	Y+14, r20	; 0x0e
    5776:	61 2f       	mov	r22, r17
    5778:	70 e0       	ldi	r23, 0x00	; 0
    577a:	44 27       	eor	r20, r20
    577c:	55 27       	eor	r21, r21
    577e:	46 1b       	sub	r20, r22
    5780:	57 0b       	sbc	r21, r23
    5782:	59 8b       	std	Y+17, r21	; 0x11
    5784:	48 8b       	std	Y+16, r20	; 0x10
    5786:	5f ef       	ldi	r21, 0xFF	; 255
    5788:	25 16       	cp	r2, r21
    578a:	35 06       	cpc	r3, r21
    578c:	41 f4       	brne	.+16     	; 0x579e <vfprintf+0x2f8>
    578e:	b6 01       	movw	r22, r12
    5790:	8e e2       	ldi	r24, 0x2E	; 46
    5792:	90 e0       	ldi	r25, 0x00	; 0
    5794:	2a 8b       	std	Y+18, r18	; 0x12
    5796:	3b 8b       	std	Y+19, r19	; 0x13
    5798:	7b d4       	rcall	.+2294   	; 0x6090 <fputc>
    579a:	3b 89       	ldd	r19, Y+19	; 0x13
    579c:	2a 89       	ldd	r18, Y+18	; 0x12
    579e:	42 14       	cp	r4, r2
    57a0:	53 04       	cpc	r5, r3
    57a2:	6c f0       	brlt	.+26     	; 0x57be <vfprintf+0x318>
    57a4:	4c 85       	ldd	r20, Y+12	; 0x0c
    57a6:	5d 85       	ldd	r21, Y+13	; 0x0d
    57a8:	42 15       	cp	r20, r2
    57aa:	53 05       	cpc	r21, r3
    57ac:	44 f4       	brge	.+16     	; 0x57be <vfprintf+0x318>
    57ae:	ee 85       	ldd	r30, Y+14	; 0x0e
    57b0:	ff 85       	ldd	r31, Y+15	; 0x0f
    57b2:	e2 0f       	add	r30, r18
    57b4:	f3 1f       	adc	r31, r19
    57b6:	e6 0d       	add	r30, r6
    57b8:	f7 1d       	adc	r31, r7
    57ba:	81 81       	ldd	r24, Z+1	; 0x01
    57bc:	01 c0       	rjmp	.+2      	; 0x57c0 <vfprintf+0x31a>
    57be:	80 e3       	ldi	r24, 0x30	; 48
    57c0:	51 e0       	ldi	r21, 0x01	; 1
    57c2:	25 1a       	sub	r2, r21
    57c4:	31 08       	sbc	r3, r1
    57c6:	2f 5f       	subi	r18, 0xFF	; 255
    57c8:	3f 4f       	sbci	r19, 0xFF	; 255
    57ca:	48 89       	ldd	r20, Y+16	; 0x10
    57cc:	59 89       	ldd	r21, Y+17	; 0x11
    57ce:	24 16       	cp	r2, r20
    57d0:	35 06       	cpc	r3, r21
    57d2:	44 f0       	brlt	.+16     	; 0x57e4 <vfprintf+0x33e>
    57d4:	b6 01       	movw	r22, r12
    57d6:	90 e0       	ldi	r25, 0x00	; 0
    57d8:	2a 8b       	std	Y+18, r18	; 0x12
    57da:	3b 8b       	std	Y+19, r19	; 0x13
    57dc:	59 d4       	rcall	.+2226   	; 0x6090 <fputc>
    57de:	2a 89       	ldd	r18, Y+18	; 0x12
    57e0:	3b 89       	ldd	r19, Y+19	; 0x13
    57e2:	d1 cf       	rjmp	.-94     	; 0x5786 <vfprintf+0x2e0>
    57e4:	24 14       	cp	r2, r4
    57e6:	35 04       	cpc	r3, r5
    57e8:	39 f4       	brne	.+14     	; 0x57f8 <vfprintf+0x352>
    57ea:	9a 81       	ldd	r25, Y+2	; 0x02
    57ec:	96 33       	cpi	r25, 0x36	; 54
    57ee:	18 f4       	brcc	.+6      	; 0x57f6 <vfprintf+0x350>
    57f0:	95 33       	cpi	r25, 0x35	; 53
    57f2:	11 f4       	brne	.+4      	; 0x57f8 <vfprintf+0x352>
    57f4:	04 ff       	sbrs	r16, 4
    57f6:	81 e3       	ldi	r24, 0x31	; 49
    57f8:	b6 01       	movw	r22, r12
    57fa:	90 e0       	ldi	r25, 0x00	; 0
    57fc:	45 c0       	rjmp	.+138    	; 0x5888 <vfprintf+0x3e2>
    57fe:	8a 81       	ldd	r24, Y+2	; 0x02
    5800:	81 33       	cpi	r24, 0x31	; 49
    5802:	09 f0       	breq	.+2      	; 0x5806 <vfprintf+0x360>
    5804:	0f 7e       	andi	r16, 0xEF	; 239
    5806:	b6 01       	movw	r22, r12
    5808:	90 e0       	ldi	r25, 0x00	; 0
    580a:	42 d4       	rcall	.+2180   	; 0x6090 <fputc>
    580c:	11 11       	cpse	r17, r1
    580e:	05 c0       	rjmp	.+10     	; 0x581a <vfprintf+0x374>
    5810:	34 fc       	sbrc	r3, 4
    5812:	16 c0       	rjmp	.+44     	; 0x5840 <vfprintf+0x39a>
    5814:	85 e6       	ldi	r24, 0x65	; 101
    5816:	90 e0       	ldi	r25, 0x00	; 0
    5818:	15 c0       	rjmp	.+42     	; 0x5844 <vfprintf+0x39e>
    581a:	b6 01       	movw	r22, r12
    581c:	8e e2       	ldi	r24, 0x2E	; 46
    581e:	90 e0       	ldi	r25, 0x00	; 0
    5820:	37 d4       	rcall	.+2158   	; 0x6090 <fputc>
    5822:	82 e0       	ldi	r24, 0x02	; 2
    5824:	ee 24       	eor	r14, r14
    5826:	e3 94       	inc	r14
    5828:	e8 0e       	add	r14, r24
    582a:	f3 01       	movw	r30, r6
    582c:	e8 0f       	add	r30, r24
    582e:	f1 1d       	adc	r31, r1
    5830:	80 81       	ld	r24, Z
    5832:	b6 01       	movw	r22, r12
    5834:	90 e0       	ldi	r25, 0x00	; 0
    5836:	2c d4       	rcall	.+2136   	; 0x6090 <fputc>
    5838:	11 50       	subi	r17, 0x01	; 1
    583a:	8e 2d       	mov	r24, r14
    583c:	99 f7       	brne	.-26     	; 0x5824 <vfprintf+0x37e>
    583e:	e8 cf       	rjmp	.-48     	; 0x5810 <vfprintf+0x36a>
    5840:	85 e4       	ldi	r24, 0x45	; 69
    5842:	90 e0       	ldi	r25, 0x00	; 0
    5844:	b6 01       	movw	r22, r12
    5846:	24 d4       	rcall	.+2120   	; 0x6090 <fputc>
    5848:	57 fc       	sbrc	r5, 7
    584a:	05 c0       	rjmp	.+10     	; 0x5856 <vfprintf+0x3b0>
    584c:	41 14       	cp	r4, r1
    584e:	51 04       	cpc	r5, r1
    5850:	39 f4       	brne	.+14     	; 0x5860 <vfprintf+0x3ba>
    5852:	04 ff       	sbrs	r16, 4
    5854:	05 c0       	rjmp	.+10     	; 0x5860 <vfprintf+0x3ba>
    5856:	51 94       	neg	r5
    5858:	41 94       	neg	r4
    585a:	51 08       	sbc	r5, r1
    585c:	8d e2       	ldi	r24, 0x2D	; 45
    585e:	01 c0       	rjmp	.+2      	; 0x5862 <vfprintf+0x3bc>
    5860:	8b e2       	ldi	r24, 0x2B	; 43
    5862:	b6 01       	movw	r22, r12
    5864:	90 e0       	ldi	r25, 0x00	; 0
    5866:	14 d4       	rcall	.+2088   	; 0x6090 <fputc>
    5868:	80 e3       	ldi	r24, 0x30	; 48
    586a:	9a e0       	ldi	r25, 0x0A	; 10
    586c:	49 16       	cp	r4, r25
    586e:	51 04       	cpc	r5, r1
    5870:	2c f0       	brlt	.+10     	; 0x587c <vfprintf+0x3d6>
    5872:	8f 5f       	subi	r24, 0xFF	; 255
    5874:	5a e0       	ldi	r21, 0x0A	; 10
    5876:	45 1a       	sub	r4, r21
    5878:	51 08       	sbc	r5, r1
    587a:	f7 cf       	rjmp	.-18     	; 0x586a <vfprintf+0x3c4>
    587c:	b6 01       	movw	r22, r12
    587e:	90 e0       	ldi	r25, 0x00	; 0
    5880:	07 d4       	rcall	.+2062   	; 0x6090 <fputc>
    5882:	b6 01       	movw	r22, r12
    5884:	c2 01       	movw	r24, r4
    5886:	c0 96       	adiw	r24, 0x30	; 48
    5888:	03 d4       	rcall	.+2054   	; 0x6090 <fputc>
    588a:	4c c1       	rjmp	.+664    	; 0x5b24 <vfprintf+0x67e>
    588c:	83 36       	cpi	r24, 0x63	; 99
    588e:	31 f0       	breq	.+12     	; 0x589c <vfprintf+0x3f6>
    5890:	83 37       	cpi	r24, 0x73	; 115
    5892:	79 f0       	breq	.+30     	; 0x58b2 <vfprintf+0x40c>
    5894:	83 35       	cpi	r24, 0x53	; 83
    5896:	09 f0       	breq	.+2      	; 0x589a <vfprintf+0x3f4>
    5898:	54 c0       	rjmp	.+168    	; 0x5942 <vfprintf+0x49c>
    589a:	20 c0       	rjmp	.+64     	; 0x58dc <vfprintf+0x436>
    589c:	52 01       	movw	r10, r4
    589e:	e2 e0       	ldi	r30, 0x02	; 2
    58a0:	ae 0e       	add	r10, r30
    58a2:	b1 1c       	adc	r11, r1
    58a4:	f2 01       	movw	r30, r4
    58a6:	80 81       	ld	r24, Z
    58a8:	89 83       	std	Y+1, r24	; 0x01
    58aa:	01 e0       	ldi	r16, 0x01	; 1
    58ac:	10 e0       	ldi	r17, 0x00	; 0
    58ae:	23 01       	movw	r4, r6
    58b0:	13 c0       	rjmp	.+38     	; 0x58d8 <vfprintf+0x432>
    58b2:	52 01       	movw	r10, r4
    58b4:	f2 e0       	ldi	r31, 0x02	; 2
    58b6:	af 0e       	add	r10, r31
    58b8:	b1 1c       	adc	r11, r1
    58ba:	f2 01       	movw	r30, r4
    58bc:	40 80       	ld	r4, Z
    58be:	51 80       	ldd	r5, Z+1	; 0x01
    58c0:	26 ff       	sbrs	r18, 6
    58c2:	03 c0       	rjmp	.+6      	; 0x58ca <vfprintf+0x424>
    58c4:	61 2f       	mov	r22, r17
    58c6:	70 e0       	ldi	r23, 0x00	; 0
    58c8:	02 c0       	rjmp	.+4      	; 0x58ce <vfprintf+0x428>
    58ca:	6f ef       	ldi	r22, 0xFF	; 255
    58cc:	7f ef       	ldi	r23, 0xFF	; 255
    58ce:	c2 01       	movw	r24, r4
    58d0:	2a 8b       	std	Y+18, r18	; 0x12
    58d2:	d3 d3       	rcall	.+1958   	; 0x607a <strnlen>
    58d4:	8c 01       	movw	r16, r24
    58d6:	2a 89       	ldd	r18, Y+18	; 0x12
    58d8:	2f 77       	andi	r18, 0x7F	; 127
    58da:	14 c0       	rjmp	.+40     	; 0x5904 <vfprintf+0x45e>
    58dc:	52 01       	movw	r10, r4
    58de:	f2 e0       	ldi	r31, 0x02	; 2
    58e0:	af 0e       	add	r10, r31
    58e2:	b1 1c       	adc	r11, r1
    58e4:	f2 01       	movw	r30, r4
    58e6:	40 80       	ld	r4, Z
    58e8:	51 80       	ldd	r5, Z+1	; 0x01
    58ea:	26 ff       	sbrs	r18, 6
    58ec:	03 c0       	rjmp	.+6      	; 0x58f4 <vfprintf+0x44e>
    58ee:	61 2f       	mov	r22, r17
    58f0:	70 e0       	ldi	r23, 0x00	; 0
    58f2:	02 c0       	rjmp	.+4      	; 0x58f8 <vfprintf+0x452>
    58f4:	6f ef       	ldi	r22, 0xFF	; 255
    58f6:	7f ef       	ldi	r23, 0xFF	; 255
    58f8:	c2 01       	movw	r24, r4
    58fa:	2a 8b       	std	Y+18, r18	; 0x12
    58fc:	b3 d3       	rcall	.+1894   	; 0x6064 <strnlen_P>
    58fe:	8c 01       	movw	r16, r24
    5900:	2a 89       	ldd	r18, Y+18	; 0x12
    5902:	20 68       	ori	r18, 0x80	; 128
    5904:	32 2e       	mov	r3, r18
    5906:	23 fd       	sbrc	r18, 3
    5908:	18 c0       	rjmp	.+48     	; 0x593a <vfprintf+0x494>
    590a:	8f 2d       	mov	r24, r15
    590c:	90 e0       	ldi	r25, 0x00	; 0
    590e:	08 17       	cp	r16, r24
    5910:	19 07       	cpc	r17, r25
    5912:	98 f4       	brcc	.+38     	; 0x593a <vfprintf+0x494>
    5914:	b6 01       	movw	r22, r12
    5916:	80 e2       	ldi	r24, 0x20	; 32
    5918:	90 e0       	ldi	r25, 0x00	; 0
    591a:	ba d3       	rcall	.+1908   	; 0x6090 <fputc>
    591c:	fa 94       	dec	r15
    591e:	f5 cf       	rjmp	.-22     	; 0x590a <vfprintf+0x464>
    5920:	f2 01       	movw	r30, r4
    5922:	37 fc       	sbrc	r3, 7
    5924:	85 91       	lpm	r24, Z+
    5926:	37 fe       	sbrs	r3, 7
    5928:	81 91       	ld	r24, Z+
    592a:	2f 01       	movw	r4, r30
    592c:	b6 01       	movw	r22, r12
    592e:	90 e0       	ldi	r25, 0x00	; 0
    5930:	af d3       	rcall	.+1886   	; 0x6090 <fputc>
    5932:	f1 10       	cpse	r15, r1
    5934:	fa 94       	dec	r15
    5936:	01 50       	subi	r16, 0x01	; 1
    5938:	11 09       	sbc	r17, r1
    593a:	01 15       	cp	r16, r1
    593c:	11 05       	cpc	r17, r1
    593e:	81 f7       	brne	.-32     	; 0x5920 <vfprintf+0x47a>
    5940:	f1 c0       	rjmp	.+482    	; 0x5b24 <vfprintf+0x67e>
    5942:	84 36       	cpi	r24, 0x64	; 100
    5944:	11 f0       	breq	.+4      	; 0x594a <vfprintf+0x4a4>
    5946:	89 36       	cpi	r24, 0x69	; 105
    5948:	51 f5       	brne	.+84     	; 0x599e <vfprintf+0x4f8>
    594a:	52 01       	movw	r10, r4
    594c:	27 ff       	sbrs	r18, 7
    594e:	09 c0       	rjmp	.+18     	; 0x5962 <vfprintf+0x4bc>
    5950:	f4 e0       	ldi	r31, 0x04	; 4
    5952:	af 0e       	add	r10, r31
    5954:	b1 1c       	adc	r11, r1
    5956:	f2 01       	movw	r30, r4
    5958:	60 81       	ld	r22, Z
    595a:	71 81       	ldd	r23, Z+1	; 0x01
    595c:	82 81       	ldd	r24, Z+2	; 0x02
    595e:	93 81       	ldd	r25, Z+3	; 0x03
    5960:	0a c0       	rjmp	.+20     	; 0x5976 <vfprintf+0x4d0>
    5962:	f2 e0       	ldi	r31, 0x02	; 2
    5964:	af 0e       	add	r10, r31
    5966:	b1 1c       	adc	r11, r1
    5968:	f2 01       	movw	r30, r4
    596a:	60 81       	ld	r22, Z
    596c:	71 81       	ldd	r23, Z+1	; 0x01
    596e:	07 2e       	mov	r0, r23
    5970:	00 0c       	add	r0, r0
    5972:	88 0b       	sbc	r24, r24
    5974:	99 0b       	sbc	r25, r25
    5976:	2f 76       	andi	r18, 0x6F	; 111
    5978:	32 2e       	mov	r3, r18
    597a:	97 ff       	sbrs	r25, 7
    597c:	09 c0       	rjmp	.+18     	; 0x5990 <vfprintf+0x4ea>
    597e:	90 95       	com	r25
    5980:	80 95       	com	r24
    5982:	70 95       	com	r23
    5984:	61 95       	neg	r22
    5986:	7f 4f       	sbci	r23, 0xFF	; 255
    5988:	8f 4f       	sbci	r24, 0xFF	; 255
    598a:	9f 4f       	sbci	r25, 0xFF	; 255
    598c:	20 68       	ori	r18, 0x80	; 128
    598e:	32 2e       	mov	r3, r18
    5990:	2a e0       	ldi	r18, 0x0A	; 10
    5992:	30 e0       	ldi	r19, 0x00	; 0
    5994:	a3 01       	movw	r20, r6
    5996:	f7 d3       	rcall	.+2030   	; 0x6186 <__ultoa_invert>
    5998:	e8 2e       	mov	r14, r24
    599a:	e6 18       	sub	r14, r6
    599c:	3e c0       	rjmp	.+124    	; 0x5a1a <vfprintf+0x574>
    599e:	02 2f       	mov	r16, r18
    59a0:	85 37       	cpi	r24, 0x75	; 117
    59a2:	21 f4       	brne	.+8      	; 0x59ac <vfprintf+0x506>
    59a4:	0f 7e       	andi	r16, 0xEF	; 239
    59a6:	2a e0       	ldi	r18, 0x0A	; 10
    59a8:	30 e0       	ldi	r19, 0x00	; 0
    59aa:	1d c0       	rjmp	.+58     	; 0x59e6 <vfprintf+0x540>
    59ac:	09 7f       	andi	r16, 0xF9	; 249
    59ae:	8f 36       	cpi	r24, 0x6F	; 111
    59b0:	91 f0       	breq	.+36     	; 0x59d6 <vfprintf+0x530>
    59b2:	18 f4       	brcc	.+6      	; 0x59ba <vfprintf+0x514>
    59b4:	88 35       	cpi	r24, 0x58	; 88
    59b6:	59 f0       	breq	.+22     	; 0x59ce <vfprintf+0x528>
    59b8:	be c0       	rjmp	.+380    	; 0x5b36 <vfprintf+0x690>
    59ba:	80 37       	cpi	r24, 0x70	; 112
    59bc:	19 f0       	breq	.+6      	; 0x59c4 <vfprintf+0x51e>
    59be:	88 37       	cpi	r24, 0x78	; 120
    59c0:	11 f0       	breq	.+4      	; 0x59c6 <vfprintf+0x520>
    59c2:	b9 c0       	rjmp	.+370    	; 0x5b36 <vfprintf+0x690>
    59c4:	00 61       	ori	r16, 0x10	; 16
    59c6:	04 ff       	sbrs	r16, 4
    59c8:	09 c0       	rjmp	.+18     	; 0x59dc <vfprintf+0x536>
    59ca:	04 60       	ori	r16, 0x04	; 4
    59cc:	07 c0       	rjmp	.+14     	; 0x59dc <vfprintf+0x536>
    59ce:	24 ff       	sbrs	r18, 4
    59d0:	08 c0       	rjmp	.+16     	; 0x59e2 <vfprintf+0x53c>
    59d2:	06 60       	ori	r16, 0x06	; 6
    59d4:	06 c0       	rjmp	.+12     	; 0x59e2 <vfprintf+0x53c>
    59d6:	28 e0       	ldi	r18, 0x08	; 8
    59d8:	30 e0       	ldi	r19, 0x00	; 0
    59da:	05 c0       	rjmp	.+10     	; 0x59e6 <vfprintf+0x540>
    59dc:	20 e1       	ldi	r18, 0x10	; 16
    59de:	30 e0       	ldi	r19, 0x00	; 0
    59e0:	02 c0       	rjmp	.+4      	; 0x59e6 <vfprintf+0x540>
    59e2:	20 e1       	ldi	r18, 0x10	; 16
    59e4:	32 e0       	ldi	r19, 0x02	; 2
    59e6:	52 01       	movw	r10, r4
    59e8:	07 ff       	sbrs	r16, 7
    59ea:	09 c0       	rjmp	.+18     	; 0x59fe <vfprintf+0x558>
    59ec:	f4 e0       	ldi	r31, 0x04	; 4
    59ee:	af 0e       	add	r10, r31
    59f0:	b1 1c       	adc	r11, r1
    59f2:	f2 01       	movw	r30, r4
    59f4:	60 81       	ld	r22, Z
    59f6:	71 81       	ldd	r23, Z+1	; 0x01
    59f8:	82 81       	ldd	r24, Z+2	; 0x02
    59fa:	93 81       	ldd	r25, Z+3	; 0x03
    59fc:	08 c0       	rjmp	.+16     	; 0x5a0e <vfprintf+0x568>
    59fe:	f2 e0       	ldi	r31, 0x02	; 2
    5a00:	af 0e       	add	r10, r31
    5a02:	b1 1c       	adc	r11, r1
    5a04:	f2 01       	movw	r30, r4
    5a06:	60 81       	ld	r22, Z
    5a08:	71 81       	ldd	r23, Z+1	; 0x01
    5a0a:	80 e0       	ldi	r24, 0x00	; 0
    5a0c:	90 e0       	ldi	r25, 0x00	; 0
    5a0e:	a3 01       	movw	r20, r6
    5a10:	ba d3       	rcall	.+1908   	; 0x6186 <__ultoa_invert>
    5a12:	e8 2e       	mov	r14, r24
    5a14:	e6 18       	sub	r14, r6
    5a16:	0f 77       	andi	r16, 0x7F	; 127
    5a18:	30 2e       	mov	r3, r16
    5a1a:	36 fe       	sbrs	r3, 6
    5a1c:	0b c0       	rjmp	.+22     	; 0x5a34 <vfprintf+0x58e>
    5a1e:	33 2d       	mov	r19, r3
    5a20:	3e 7f       	andi	r19, 0xFE	; 254
    5a22:	e1 16       	cp	r14, r17
    5a24:	50 f4       	brcc	.+20     	; 0x5a3a <vfprintf+0x594>
    5a26:	34 fe       	sbrs	r3, 4
    5a28:	0a c0       	rjmp	.+20     	; 0x5a3e <vfprintf+0x598>
    5a2a:	32 fc       	sbrc	r3, 2
    5a2c:	08 c0       	rjmp	.+16     	; 0x5a3e <vfprintf+0x598>
    5a2e:	33 2d       	mov	r19, r3
    5a30:	3e 7e       	andi	r19, 0xEE	; 238
    5a32:	05 c0       	rjmp	.+10     	; 0x5a3e <vfprintf+0x598>
    5a34:	0e 2d       	mov	r16, r14
    5a36:	33 2d       	mov	r19, r3
    5a38:	03 c0       	rjmp	.+6      	; 0x5a40 <vfprintf+0x59a>
    5a3a:	0e 2d       	mov	r16, r14
    5a3c:	01 c0       	rjmp	.+2      	; 0x5a40 <vfprintf+0x59a>
    5a3e:	01 2f       	mov	r16, r17
    5a40:	34 ff       	sbrs	r19, 4
    5a42:	0c c0       	rjmp	.+24     	; 0x5a5c <vfprintf+0x5b6>
    5a44:	fe 01       	movw	r30, r28
    5a46:	ee 0d       	add	r30, r14
    5a48:	f1 1d       	adc	r31, r1
    5a4a:	80 81       	ld	r24, Z
    5a4c:	80 33       	cpi	r24, 0x30	; 48
    5a4e:	11 f4       	brne	.+4      	; 0x5a54 <vfprintf+0x5ae>
    5a50:	39 7e       	andi	r19, 0xE9	; 233
    5a52:	08 c0       	rjmp	.+16     	; 0x5a64 <vfprintf+0x5be>
    5a54:	32 ff       	sbrs	r19, 2
    5a56:	05 c0       	rjmp	.+10     	; 0x5a62 <vfprintf+0x5bc>
    5a58:	0e 5f       	subi	r16, 0xFE	; 254
    5a5a:	04 c0       	rjmp	.+8      	; 0x5a64 <vfprintf+0x5be>
    5a5c:	83 2f       	mov	r24, r19
    5a5e:	86 78       	andi	r24, 0x86	; 134
    5a60:	09 f0       	breq	.+2      	; 0x5a64 <vfprintf+0x5be>
    5a62:	0f 5f       	subi	r16, 0xFF	; 255
    5a64:	33 fd       	sbrc	r19, 3
    5a66:	12 c0       	rjmp	.+36     	; 0x5a8c <vfprintf+0x5e6>
    5a68:	30 ff       	sbrs	r19, 0
    5a6a:	06 c0       	rjmp	.+12     	; 0x5a78 <vfprintf+0x5d2>
    5a6c:	1e 2d       	mov	r17, r14
    5a6e:	0f 15       	cp	r16, r15
    5a70:	18 f4       	brcc	.+6      	; 0x5a78 <vfprintf+0x5d2>
    5a72:	1f 0d       	add	r17, r15
    5a74:	10 1b       	sub	r17, r16
    5a76:	0f 2d       	mov	r16, r15
    5a78:	0f 15       	cp	r16, r15
    5a7a:	60 f4       	brcc	.+24     	; 0x5a94 <vfprintf+0x5ee>
    5a7c:	b6 01       	movw	r22, r12
    5a7e:	80 e2       	ldi	r24, 0x20	; 32
    5a80:	90 e0       	ldi	r25, 0x00	; 0
    5a82:	3b 8b       	std	Y+19, r19	; 0x13
    5a84:	05 d3       	rcall	.+1546   	; 0x6090 <fputc>
    5a86:	0f 5f       	subi	r16, 0xFF	; 255
    5a88:	3b 89       	ldd	r19, Y+19	; 0x13
    5a8a:	f6 cf       	rjmp	.-20     	; 0x5a78 <vfprintf+0x5d2>
    5a8c:	0f 15       	cp	r16, r15
    5a8e:	10 f4       	brcc	.+4      	; 0x5a94 <vfprintf+0x5ee>
    5a90:	f0 1a       	sub	r15, r16
    5a92:	01 c0       	rjmp	.+2      	; 0x5a96 <vfprintf+0x5f0>
    5a94:	f1 2c       	mov	r15, r1
    5a96:	34 ff       	sbrs	r19, 4
    5a98:	11 c0       	rjmp	.+34     	; 0x5abc <vfprintf+0x616>
    5a9a:	b6 01       	movw	r22, r12
    5a9c:	80 e3       	ldi	r24, 0x30	; 48
    5a9e:	90 e0       	ldi	r25, 0x00	; 0
    5aa0:	3b 8b       	std	Y+19, r19	; 0x13
    5aa2:	f6 d2       	rcall	.+1516   	; 0x6090 <fputc>
    5aa4:	3b 89       	ldd	r19, Y+19	; 0x13
    5aa6:	32 ff       	sbrs	r19, 2
    5aa8:	16 c0       	rjmp	.+44     	; 0x5ad6 <vfprintf+0x630>
    5aaa:	31 fd       	sbrc	r19, 1
    5aac:	03 c0       	rjmp	.+6      	; 0x5ab4 <vfprintf+0x60e>
    5aae:	88 e7       	ldi	r24, 0x78	; 120
    5ab0:	90 e0       	ldi	r25, 0x00	; 0
    5ab2:	02 c0       	rjmp	.+4      	; 0x5ab8 <vfprintf+0x612>
    5ab4:	88 e5       	ldi	r24, 0x58	; 88
    5ab6:	90 e0       	ldi	r25, 0x00	; 0
    5ab8:	b6 01       	movw	r22, r12
    5aba:	0c c0       	rjmp	.+24     	; 0x5ad4 <vfprintf+0x62e>
    5abc:	83 2f       	mov	r24, r19
    5abe:	86 78       	andi	r24, 0x86	; 134
    5ac0:	51 f0       	breq	.+20     	; 0x5ad6 <vfprintf+0x630>
    5ac2:	31 ff       	sbrs	r19, 1
    5ac4:	02 c0       	rjmp	.+4      	; 0x5aca <vfprintf+0x624>
    5ac6:	8b e2       	ldi	r24, 0x2B	; 43
    5ac8:	01 c0       	rjmp	.+2      	; 0x5acc <vfprintf+0x626>
    5aca:	80 e2       	ldi	r24, 0x20	; 32
    5acc:	37 fd       	sbrc	r19, 7
    5ace:	8d e2       	ldi	r24, 0x2D	; 45
    5ad0:	b6 01       	movw	r22, r12
    5ad2:	90 e0       	ldi	r25, 0x00	; 0
    5ad4:	dd d2       	rcall	.+1466   	; 0x6090 <fputc>
    5ad6:	e1 16       	cp	r14, r17
    5ad8:	30 f4       	brcc	.+12     	; 0x5ae6 <vfprintf+0x640>
    5ada:	b6 01       	movw	r22, r12
    5adc:	80 e3       	ldi	r24, 0x30	; 48
    5ade:	90 e0       	ldi	r25, 0x00	; 0
    5ae0:	d7 d2       	rcall	.+1454   	; 0x6090 <fputc>
    5ae2:	11 50       	subi	r17, 0x01	; 1
    5ae4:	f8 cf       	rjmp	.-16     	; 0x5ad6 <vfprintf+0x630>
    5ae6:	ea 94       	dec	r14
    5ae8:	f3 01       	movw	r30, r6
    5aea:	ee 0d       	add	r30, r14
    5aec:	f1 1d       	adc	r31, r1
    5aee:	80 81       	ld	r24, Z
    5af0:	b6 01       	movw	r22, r12
    5af2:	90 e0       	ldi	r25, 0x00	; 0
    5af4:	cd d2       	rcall	.+1434   	; 0x6090 <fputc>
    5af6:	e1 10       	cpse	r14, r1
    5af8:	f6 cf       	rjmp	.-20     	; 0x5ae6 <vfprintf+0x640>
    5afa:	14 c0       	rjmp	.+40     	; 0x5b24 <vfprintf+0x67e>
    5afc:	f4 e0       	ldi	r31, 0x04	; 4
    5afe:	ff 15       	cp	r31, r15
    5b00:	48 f5       	brcc	.+82     	; 0x5b54 <vfprintf+0x6ae>
    5b02:	84 e0       	ldi	r24, 0x04	; 4
    5b04:	f8 1a       	sub	r15, r24
    5b06:	33 fe       	sbrs	r3, 3
    5b08:	1d c0       	rjmp	.+58     	; 0x5b44 <vfprintf+0x69e>
    5b0a:	21 10       	cpse	r2, r1
    5b0c:	24 c0       	rjmp	.+72     	; 0x5b56 <vfprintf+0x6b0>
    5b0e:	03 ff       	sbrs	r16, 3
    5b10:	27 c0       	rjmp	.+78     	; 0x5b60 <vfprintf+0x6ba>
    5b12:	02 e4       	ldi	r16, 0x42	; 66
    5b14:	11 e0       	ldi	r17, 0x01	; 1
    5b16:	f3 2d       	mov	r31, r3
    5b18:	f0 71       	andi	r31, 0x10	; 16
    5b1a:	3f 2e       	mov	r3, r31
    5b1c:	f8 01       	movw	r30, r16
    5b1e:	84 91       	lpm	r24, Z
    5b20:	81 11       	cpse	r24, r1
    5b22:	21 c0       	rjmp	.+66     	; 0x5b66 <vfprintf+0x6c0>
    5b24:	ff 20       	and	r15, r15
    5b26:	09 f4       	brne	.+2      	; 0x5b2a <vfprintf+0x684>
    5b28:	fd cc       	rjmp	.-1542   	; 0x5524 <vfprintf+0x7e>
    5b2a:	b6 01       	movw	r22, r12
    5b2c:	80 e2       	ldi	r24, 0x20	; 32
    5b2e:	90 e0       	ldi	r25, 0x00	; 0
    5b30:	af d2       	rcall	.+1374   	; 0x6090 <fputc>
    5b32:	fa 94       	dec	r15
    5b34:	f7 cf       	rjmp	.-18     	; 0x5b24 <vfprintf+0x67e>
    5b36:	f6 01       	movw	r30, r12
    5b38:	86 81       	ldd	r24, Z+6	; 0x06
    5b3a:	97 81       	ldd	r25, Z+7	; 0x07
    5b3c:	23 c0       	rjmp	.+70     	; 0x5b84 <vfprintf+0x6de>
    5b3e:	8f ef       	ldi	r24, 0xFF	; 255
    5b40:	9f ef       	ldi	r25, 0xFF	; 255
    5b42:	20 c0       	rjmp	.+64     	; 0x5b84 <vfprintf+0x6de>
    5b44:	b6 01       	movw	r22, r12
    5b46:	80 e2       	ldi	r24, 0x20	; 32
    5b48:	90 e0       	ldi	r25, 0x00	; 0
    5b4a:	a2 d2       	rcall	.+1348   	; 0x6090 <fputc>
    5b4c:	fa 94       	dec	r15
    5b4e:	f1 10       	cpse	r15, r1
    5b50:	f9 cf       	rjmp	.-14     	; 0x5b44 <vfprintf+0x69e>
    5b52:	db cf       	rjmp	.-74     	; 0x5b0a <vfprintf+0x664>
    5b54:	f1 2c       	mov	r15, r1
    5b56:	b6 01       	movw	r22, r12
    5b58:	82 2d       	mov	r24, r2
    5b5a:	90 e0       	ldi	r25, 0x00	; 0
    5b5c:	99 d2       	rcall	.+1330   	; 0x6090 <fputc>
    5b5e:	d7 cf       	rjmp	.-82     	; 0x5b0e <vfprintf+0x668>
    5b60:	06 e4       	ldi	r16, 0x46	; 70
    5b62:	11 e0       	ldi	r17, 0x01	; 1
    5b64:	d8 cf       	rjmp	.-80     	; 0x5b16 <vfprintf+0x670>
    5b66:	31 10       	cpse	r3, r1
    5b68:	80 52       	subi	r24, 0x20	; 32
    5b6a:	b6 01       	movw	r22, r12
    5b6c:	90 e0       	ldi	r25, 0x00	; 0
    5b6e:	90 d2       	rcall	.+1312   	; 0x6090 <fputc>
    5b70:	0f 5f       	subi	r16, 0xFF	; 255
    5b72:	1f 4f       	sbci	r17, 0xFF	; 255
    5b74:	d3 cf       	rjmp	.-90     	; 0x5b1c <vfprintf+0x676>
    5b76:	23 e0       	ldi	r18, 0x03	; 3
    5b78:	2f 15       	cp	r18, r15
    5b7a:	10 f4       	brcc	.+4      	; 0x5b80 <vfprintf+0x6da>
    5b7c:	83 e0       	ldi	r24, 0x03	; 3
    5b7e:	c2 cf       	rjmp	.-124    	; 0x5b04 <vfprintf+0x65e>
    5b80:	f1 2c       	mov	r15, r1
    5b82:	c5 cf       	rjmp	.-118    	; 0x5b0e <vfprintf+0x668>
    5b84:	63 96       	adiw	r28, 0x13	; 19
    5b86:	0f b6       	in	r0, 0x3f	; 63
    5b88:	f8 94       	cli
    5b8a:	de bf       	out	0x3e, r29	; 62
    5b8c:	0f be       	out	0x3f, r0	; 63
    5b8e:	cd bf       	out	0x3d, r28	; 61
    5b90:	df 91       	pop	r29
    5b92:	cf 91       	pop	r28
    5b94:	1f 91       	pop	r17
    5b96:	0f 91       	pop	r16
    5b98:	ff 90       	pop	r15
    5b9a:	ef 90       	pop	r14
    5b9c:	df 90       	pop	r13
    5b9e:	cf 90       	pop	r12
    5ba0:	bf 90       	pop	r11
    5ba2:	af 90       	pop	r10
    5ba4:	9f 90       	pop	r9
    5ba6:	8f 90       	pop	r8
    5ba8:	7f 90       	pop	r7
    5baa:	6f 90       	pop	r6
    5bac:	5f 90       	pop	r5
    5bae:	4f 90       	pop	r4
    5bb0:	3f 90       	pop	r3
    5bb2:	2f 90       	pop	r2
    5bb4:	08 95       	ret

00005bb6 <__mulsi3>:
    5bb6:	db 01       	movw	r26, r22
    5bb8:	8f 93       	push	r24
    5bba:	9f 93       	push	r25
    5bbc:	35 d0       	rcall	.+106    	; 0x5c28 <__muluhisi3>
    5bbe:	bf 91       	pop	r27
    5bc0:	af 91       	pop	r26
    5bc2:	a2 9f       	mul	r26, r18
    5bc4:	80 0d       	add	r24, r0
    5bc6:	91 1d       	adc	r25, r1
    5bc8:	a3 9f       	mul	r26, r19
    5bca:	90 0d       	add	r25, r0
    5bcc:	b2 9f       	mul	r27, r18
    5bce:	90 0d       	add	r25, r0
    5bd0:	11 24       	eor	r1, r1
    5bd2:	08 95       	ret

00005bd4 <__udivmodsi4>:
    5bd4:	a1 e2       	ldi	r26, 0x21	; 33
    5bd6:	1a 2e       	mov	r1, r26
    5bd8:	aa 1b       	sub	r26, r26
    5bda:	bb 1b       	sub	r27, r27
    5bdc:	fd 01       	movw	r30, r26
    5bde:	0d c0       	rjmp	.+26     	; 0x5bfa <__udivmodsi4_ep>

00005be0 <__udivmodsi4_loop>:
    5be0:	aa 1f       	adc	r26, r26
    5be2:	bb 1f       	adc	r27, r27
    5be4:	ee 1f       	adc	r30, r30
    5be6:	ff 1f       	adc	r31, r31
    5be8:	a2 17       	cp	r26, r18
    5bea:	b3 07       	cpc	r27, r19
    5bec:	e4 07       	cpc	r30, r20
    5bee:	f5 07       	cpc	r31, r21
    5bf0:	20 f0       	brcs	.+8      	; 0x5bfa <__udivmodsi4_ep>
    5bf2:	a2 1b       	sub	r26, r18
    5bf4:	b3 0b       	sbc	r27, r19
    5bf6:	e4 0b       	sbc	r30, r20
    5bf8:	f5 0b       	sbc	r31, r21

00005bfa <__udivmodsi4_ep>:
    5bfa:	66 1f       	adc	r22, r22
    5bfc:	77 1f       	adc	r23, r23
    5bfe:	88 1f       	adc	r24, r24
    5c00:	99 1f       	adc	r25, r25
    5c02:	1a 94       	dec	r1
    5c04:	69 f7       	brne	.-38     	; 0x5be0 <__udivmodsi4_loop>
    5c06:	60 95       	com	r22
    5c08:	70 95       	com	r23
    5c0a:	80 95       	com	r24
    5c0c:	90 95       	com	r25
    5c0e:	9b 01       	movw	r18, r22
    5c10:	ac 01       	movw	r20, r24
    5c12:	bd 01       	movw	r22, r26
    5c14:	cf 01       	movw	r24, r30
    5c16:	08 95       	ret

00005c18 <__tablejump2__>:
    5c18:	ee 0f       	add	r30, r30
    5c1a:	ff 1f       	adc	r31, r31
    5c1c:	88 1f       	adc	r24, r24
    5c1e:	8b bf       	out	0x3b, r24	; 59
    5c20:	07 90       	elpm	r0, Z+
    5c22:	f6 91       	elpm	r31, Z
    5c24:	e0 2d       	mov	r30, r0
    5c26:	19 94       	eijmp

00005c28 <__muluhisi3>:
    5c28:	09 d0       	rcall	.+18     	; 0x5c3c <__umulhisi3>
    5c2a:	a5 9f       	mul	r26, r21
    5c2c:	90 0d       	add	r25, r0
    5c2e:	b4 9f       	mul	r27, r20
    5c30:	90 0d       	add	r25, r0
    5c32:	a4 9f       	mul	r26, r20
    5c34:	80 0d       	add	r24, r0
    5c36:	91 1d       	adc	r25, r1
    5c38:	11 24       	eor	r1, r1
    5c3a:	08 95       	ret

00005c3c <__umulhisi3>:
    5c3c:	a2 9f       	mul	r26, r18
    5c3e:	b0 01       	movw	r22, r0
    5c40:	b3 9f       	mul	r27, r19
    5c42:	c0 01       	movw	r24, r0
    5c44:	a3 9f       	mul	r26, r19
    5c46:	70 0d       	add	r23, r0
    5c48:	81 1d       	adc	r24, r1
    5c4a:	11 24       	eor	r1, r1
    5c4c:	91 1d       	adc	r25, r1
    5c4e:	b2 9f       	mul	r27, r18
    5c50:	70 0d       	add	r23, r0
    5c52:	81 1d       	adc	r24, r1
    5c54:	11 24       	eor	r1, r1
    5c56:	91 1d       	adc	r25, r1
    5c58:	08 95       	ret

00005c5a <malloc>:
    5c5a:	cf 93       	push	r28
    5c5c:	df 93       	push	r29
    5c5e:	82 30       	cpi	r24, 0x02	; 2
    5c60:	91 05       	cpc	r25, r1
    5c62:	10 f4       	brcc	.+4      	; 0x5c68 <malloc+0xe>
    5c64:	82 e0       	ldi	r24, 0x02	; 2
    5c66:	90 e0       	ldi	r25, 0x00	; 0
    5c68:	e0 91 ac 0d 	lds	r30, 0x0DAC
    5c6c:	f0 91 ad 0d 	lds	r31, 0x0DAD
    5c70:	20 e0       	ldi	r18, 0x00	; 0
    5c72:	30 e0       	ldi	r19, 0x00	; 0
    5c74:	c0 e0       	ldi	r28, 0x00	; 0
    5c76:	d0 e0       	ldi	r29, 0x00	; 0
    5c78:	30 97       	sbiw	r30, 0x00	; 0
    5c7a:	11 f1       	breq	.+68     	; 0x5cc0 <malloc+0x66>
    5c7c:	40 81       	ld	r20, Z
    5c7e:	51 81       	ldd	r21, Z+1	; 0x01
    5c80:	48 17       	cp	r20, r24
    5c82:	59 07       	cpc	r21, r25
    5c84:	c0 f0       	brcs	.+48     	; 0x5cb6 <malloc+0x5c>
    5c86:	48 17       	cp	r20, r24
    5c88:	59 07       	cpc	r21, r25
    5c8a:	61 f4       	brne	.+24     	; 0x5ca4 <malloc+0x4a>
    5c8c:	82 81       	ldd	r24, Z+2	; 0x02
    5c8e:	93 81       	ldd	r25, Z+3	; 0x03
    5c90:	20 97       	sbiw	r28, 0x00	; 0
    5c92:	19 f0       	breq	.+6      	; 0x5c9a <malloc+0x40>
    5c94:	9b 83       	std	Y+3, r25	; 0x03
    5c96:	8a 83       	std	Y+2, r24	; 0x02
    5c98:	2b c0       	rjmp	.+86     	; 0x5cf0 <malloc+0x96>
    5c9a:	90 93 ad 0d 	sts	0x0DAD, r25
    5c9e:	80 93 ac 0d 	sts	0x0DAC, r24
    5ca2:	26 c0       	rjmp	.+76     	; 0x5cf0 <malloc+0x96>
    5ca4:	21 15       	cp	r18, r1
    5ca6:	31 05       	cpc	r19, r1
    5ca8:	19 f0       	breq	.+6      	; 0x5cb0 <malloc+0x56>
    5caa:	42 17       	cp	r20, r18
    5cac:	53 07       	cpc	r21, r19
    5cae:	18 f4       	brcc	.+6      	; 0x5cb6 <malloc+0x5c>
    5cb0:	9a 01       	movw	r18, r20
    5cb2:	be 01       	movw	r22, r28
    5cb4:	df 01       	movw	r26, r30
    5cb6:	ef 01       	movw	r28, r30
    5cb8:	02 80       	ldd	r0, Z+2	; 0x02
    5cba:	f3 81       	ldd	r31, Z+3	; 0x03
    5cbc:	e0 2d       	mov	r30, r0
    5cbe:	dc cf       	rjmp	.-72     	; 0x5c78 <malloc+0x1e>
    5cc0:	21 15       	cp	r18, r1
    5cc2:	31 05       	cpc	r19, r1
    5cc4:	09 f1       	breq	.+66     	; 0x5d08 <malloc+0xae>
    5cc6:	28 1b       	sub	r18, r24
    5cc8:	39 0b       	sbc	r19, r25
    5cca:	24 30       	cpi	r18, 0x04	; 4
    5ccc:	31 05       	cpc	r19, r1
    5cce:	90 f4       	brcc	.+36     	; 0x5cf4 <malloc+0x9a>
    5cd0:	12 96       	adiw	r26, 0x02	; 2
    5cd2:	8d 91       	ld	r24, X+
    5cd4:	9c 91       	ld	r25, X
    5cd6:	13 97       	sbiw	r26, 0x03	; 3
    5cd8:	61 15       	cp	r22, r1
    5cda:	71 05       	cpc	r23, r1
    5cdc:	21 f0       	breq	.+8      	; 0x5ce6 <malloc+0x8c>
    5cde:	fb 01       	movw	r30, r22
    5ce0:	93 83       	std	Z+3, r25	; 0x03
    5ce2:	82 83       	std	Z+2, r24	; 0x02
    5ce4:	04 c0       	rjmp	.+8      	; 0x5cee <malloc+0x94>
    5ce6:	90 93 ad 0d 	sts	0x0DAD, r25
    5cea:	80 93 ac 0d 	sts	0x0DAC, r24
    5cee:	fd 01       	movw	r30, r26
    5cf0:	32 96       	adiw	r30, 0x02	; 2
    5cf2:	44 c0       	rjmp	.+136    	; 0x5d7c <malloc+0x122>
    5cf4:	fd 01       	movw	r30, r26
    5cf6:	e2 0f       	add	r30, r18
    5cf8:	f3 1f       	adc	r31, r19
    5cfa:	81 93       	st	Z+, r24
    5cfc:	91 93       	st	Z+, r25
    5cfe:	22 50       	subi	r18, 0x02	; 2
    5d00:	31 09       	sbc	r19, r1
    5d02:	2d 93       	st	X+, r18
    5d04:	3c 93       	st	X, r19
    5d06:	3a c0       	rjmp	.+116    	; 0x5d7c <malloc+0x122>
    5d08:	20 91 aa 0d 	lds	r18, 0x0DAA
    5d0c:	30 91 ab 0d 	lds	r19, 0x0DAB
    5d10:	23 2b       	or	r18, r19
    5d12:	41 f4       	brne	.+16     	; 0x5d24 <malloc+0xca>
    5d14:	20 91 02 02 	lds	r18, 0x0202
    5d18:	30 91 03 02 	lds	r19, 0x0203
    5d1c:	30 93 ab 0d 	sts	0x0DAB, r19
    5d20:	20 93 aa 0d 	sts	0x0DAA, r18
    5d24:	20 91 00 02 	lds	r18, 0x0200
    5d28:	30 91 01 02 	lds	r19, 0x0201
    5d2c:	21 15       	cp	r18, r1
    5d2e:	31 05       	cpc	r19, r1
    5d30:	41 f4       	brne	.+16     	; 0x5d42 <malloc+0xe8>
    5d32:	2d b7       	in	r18, 0x3d	; 61
    5d34:	3e b7       	in	r19, 0x3e	; 62
    5d36:	40 91 04 02 	lds	r20, 0x0204
    5d3a:	50 91 05 02 	lds	r21, 0x0205
    5d3e:	24 1b       	sub	r18, r20
    5d40:	35 0b       	sbc	r19, r21
    5d42:	e0 91 aa 0d 	lds	r30, 0x0DAA
    5d46:	f0 91 ab 0d 	lds	r31, 0x0DAB
    5d4a:	e2 17       	cp	r30, r18
    5d4c:	f3 07       	cpc	r31, r19
    5d4e:	a0 f4       	brcc	.+40     	; 0x5d78 <malloc+0x11e>
    5d50:	2e 1b       	sub	r18, r30
    5d52:	3f 0b       	sbc	r19, r31
    5d54:	28 17       	cp	r18, r24
    5d56:	39 07       	cpc	r19, r25
    5d58:	78 f0       	brcs	.+30     	; 0x5d78 <malloc+0x11e>
    5d5a:	ac 01       	movw	r20, r24
    5d5c:	4e 5f       	subi	r20, 0xFE	; 254
    5d5e:	5f 4f       	sbci	r21, 0xFF	; 255
    5d60:	24 17       	cp	r18, r20
    5d62:	35 07       	cpc	r19, r21
    5d64:	48 f0       	brcs	.+18     	; 0x5d78 <malloc+0x11e>
    5d66:	4e 0f       	add	r20, r30
    5d68:	5f 1f       	adc	r21, r31
    5d6a:	50 93 ab 0d 	sts	0x0DAB, r21
    5d6e:	40 93 aa 0d 	sts	0x0DAA, r20
    5d72:	81 93       	st	Z+, r24
    5d74:	91 93       	st	Z+, r25
    5d76:	02 c0       	rjmp	.+4      	; 0x5d7c <malloc+0x122>
    5d78:	e0 e0       	ldi	r30, 0x00	; 0
    5d7a:	f0 e0       	ldi	r31, 0x00	; 0
    5d7c:	cf 01       	movw	r24, r30
    5d7e:	df 91       	pop	r29
    5d80:	cf 91       	pop	r28
    5d82:	08 95       	ret

00005d84 <free>:
    5d84:	0f 93       	push	r16
    5d86:	1f 93       	push	r17
    5d88:	cf 93       	push	r28
    5d8a:	df 93       	push	r29
    5d8c:	00 97       	sbiw	r24, 0x00	; 0
    5d8e:	09 f4       	brne	.+2      	; 0x5d92 <free+0xe>
    5d90:	8c c0       	rjmp	.+280    	; 0x5eaa <free+0x126>
    5d92:	fc 01       	movw	r30, r24
    5d94:	32 97       	sbiw	r30, 0x02	; 2
    5d96:	13 82       	std	Z+3, r1	; 0x03
    5d98:	12 82       	std	Z+2, r1	; 0x02
    5d9a:	00 91 ac 0d 	lds	r16, 0x0DAC
    5d9e:	10 91 ad 0d 	lds	r17, 0x0DAD
    5da2:	01 15       	cp	r16, r1
    5da4:	11 05       	cpc	r17, r1
    5da6:	81 f4       	brne	.+32     	; 0x5dc8 <free+0x44>
    5da8:	20 81       	ld	r18, Z
    5daa:	31 81       	ldd	r19, Z+1	; 0x01
    5dac:	82 0f       	add	r24, r18
    5dae:	93 1f       	adc	r25, r19
    5db0:	20 91 aa 0d 	lds	r18, 0x0DAA
    5db4:	30 91 ab 0d 	lds	r19, 0x0DAB
    5db8:	28 17       	cp	r18, r24
    5dba:	39 07       	cpc	r19, r25
    5dbc:	79 f5       	brne	.+94     	; 0x5e1c <free+0x98>
    5dbe:	f0 93 ab 0d 	sts	0x0DAB, r31
    5dc2:	e0 93 aa 0d 	sts	0x0DAA, r30
    5dc6:	71 c0       	rjmp	.+226    	; 0x5eaa <free+0x126>
    5dc8:	d8 01       	movw	r26, r16
    5dca:	40 e0       	ldi	r20, 0x00	; 0
    5dcc:	50 e0       	ldi	r21, 0x00	; 0
    5dce:	ae 17       	cp	r26, r30
    5dd0:	bf 07       	cpc	r27, r31
    5dd2:	50 f4       	brcc	.+20     	; 0x5de8 <free+0x64>
    5dd4:	12 96       	adiw	r26, 0x02	; 2
    5dd6:	2d 91       	ld	r18, X+
    5dd8:	3c 91       	ld	r19, X
    5dda:	13 97       	sbiw	r26, 0x03	; 3
    5ddc:	ad 01       	movw	r20, r26
    5dde:	21 15       	cp	r18, r1
    5de0:	31 05       	cpc	r19, r1
    5de2:	09 f1       	breq	.+66     	; 0x5e26 <free+0xa2>
    5de4:	d9 01       	movw	r26, r18
    5de6:	f3 cf       	rjmp	.-26     	; 0x5dce <free+0x4a>
    5de8:	9d 01       	movw	r18, r26
    5dea:	da 01       	movw	r26, r20
    5dec:	33 83       	std	Z+3, r19	; 0x03
    5dee:	22 83       	std	Z+2, r18	; 0x02
    5df0:	60 81       	ld	r22, Z
    5df2:	71 81       	ldd	r23, Z+1	; 0x01
    5df4:	86 0f       	add	r24, r22
    5df6:	97 1f       	adc	r25, r23
    5df8:	82 17       	cp	r24, r18
    5dfa:	93 07       	cpc	r25, r19
    5dfc:	69 f4       	brne	.+26     	; 0x5e18 <free+0x94>
    5dfe:	ec 01       	movw	r28, r24
    5e00:	28 81       	ld	r18, Y
    5e02:	39 81       	ldd	r19, Y+1	; 0x01
    5e04:	26 0f       	add	r18, r22
    5e06:	37 1f       	adc	r19, r23
    5e08:	2e 5f       	subi	r18, 0xFE	; 254
    5e0a:	3f 4f       	sbci	r19, 0xFF	; 255
    5e0c:	31 83       	std	Z+1, r19	; 0x01
    5e0e:	20 83       	st	Z, r18
    5e10:	8a 81       	ldd	r24, Y+2	; 0x02
    5e12:	9b 81       	ldd	r25, Y+3	; 0x03
    5e14:	93 83       	std	Z+3, r25	; 0x03
    5e16:	82 83       	std	Z+2, r24	; 0x02
    5e18:	45 2b       	or	r20, r21
    5e1a:	29 f4       	brne	.+10     	; 0x5e26 <free+0xa2>
    5e1c:	f0 93 ad 0d 	sts	0x0DAD, r31
    5e20:	e0 93 ac 0d 	sts	0x0DAC, r30
    5e24:	42 c0       	rjmp	.+132    	; 0x5eaa <free+0x126>
    5e26:	13 96       	adiw	r26, 0x03	; 3
    5e28:	fc 93       	st	X, r31
    5e2a:	ee 93       	st	-X, r30
    5e2c:	12 97       	sbiw	r26, 0x02	; 2
    5e2e:	ed 01       	movw	r28, r26
    5e30:	49 91       	ld	r20, Y+
    5e32:	59 91       	ld	r21, Y+
    5e34:	9e 01       	movw	r18, r28
    5e36:	24 0f       	add	r18, r20
    5e38:	35 1f       	adc	r19, r21
    5e3a:	e2 17       	cp	r30, r18
    5e3c:	f3 07       	cpc	r31, r19
    5e3e:	71 f4       	brne	.+28     	; 0x5e5c <free+0xd8>
    5e40:	80 81       	ld	r24, Z
    5e42:	91 81       	ldd	r25, Z+1	; 0x01
    5e44:	84 0f       	add	r24, r20
    5e46:	95 1f       	adc	r25, r21
    5e48:	02 96       	adiw	r24, 0x02	; 2
    5e4a:	11 96       	adiw	r26, 0x01	; 1
    5e4c:	9c 93       	st	X, r25
    5e4e:	8e 93       	st	-X, r24
    5e50:	82 81       	ldd	r24, Z+2	; 0x02
    5e52:	93 81       	ldd	r25, Z+3	; 0x03
    5e54:	13 96       	adiw	r26, 0x03	; 3
    5e56:	9c 93       	st	X, r25
    5e58:	8e 93       	st	-X, r24
    5e5a:	12 97       	sbiw	r26, 0x02	; 2
    5e5c:	e0 e0       	ldi	r30, 0x00	; 0
    5e5e:	f0 e0       	ldi	r31, 0x00	; 0
    5e60:	d8 01       	movw	r26, r16
    5e62:	12 96       	adiw	r26, 0x02	; 2
    5e64:	8d 91       	ld	r24, X+
    5e66:	9c 91       	ld	r25, X
    5e68:	13 97       	sbiw	r26, 0x03	; 3
    5e6a:	00 97       	sbiw	r24, 0x00	; 0
    5e6c:	19 f0       	breq	.+6      	; 0x5e74 <free+0xf0>
    5e6e:	f8 01       	movw	r30, r16
    5e70:	8c 01       	movw	r16, r24
    5e72:	f6 cf       	rjmp	.-20     	; 0x5e60 <free+0xdc>
    5e74:	8d 91       	ld	r24, X+
    5e76:	9c 91       	ld	r25, X
    5e78:	98 01       	movw	r18, r16
    5e7a:	2e 5f       	subi	r18, 0xFE	; 254
    5e7c:	3f 4f       	sbci	r19, 0xFF	; 255
    5e7e:	82 0f       	add	r24, r18
    5e80:	93 1f       	adc	r25, r19
    5e82:	20 91 aa 0d 	lds	r18, 0x0DAA
    5e86:	30 91 ab 0d 	lds	r19, 0x0DAB
    5e8a:	28 17       	cp	r18, r24
    5e8c:	39 07       	cpc	r19, r25
    5e8e:	69 f4       	brne	.+26     	; 0x5eaa <free+0x126>
    5e90:	30 97       	sbiw	r30, 0x00	; 0
    5e92:	29 f4       	brne	.+10     	; 0x5e9e <free+0x11a>
    5e94:	10 92 ad 0d 	sts	0x0DAD, r1
    5e98:	10 92 ac 0d 	sts	0x0DAC, r1
    5e9c:	02 c0       	rjmp	.+4      	; 0x5ea2 <free+0x11e>
    5e9e:	13 82       	std	Z+3, r1	; 0x03
    5ea0:	12 82       	std	Z+2, r1	; 0x02
    5ea2:	10 93 ab 0d 	sts	0x0DAB, r17
    5ea6:	00 93 aa 0d 	sts	0x0DAA, r16
    5eaa:	df 91       	pop	r29
    5eac:	cf 91       	pop	r28
    5eae:	1f 91       	pop	r17
    5eb0:	0f 91       	pop	r16
    5eb2:	08 95       	ret

00005eb4 <__ftoa_engine>:
    5eb4:	28 30       	cpi	r18, 0x08	; 8
    5eb6:	08 f0       	brcs	.+2      	; 0x5eba <__ftoa_engine+0x6>
    5eb8:	27 e0       	ldi	r18, 0x07	; 7
    5eba:	33 27       	eor	r19, r19
    5ebc:	da 01       	movw	r26, r20
    5ebe:	99 0f       	add	r25, r25
    5ec0:	31 1d       	adc	r19, r1
    5ec2:	87 fd       	sbrc	r24, 7
    5ec4:	91 60       	ori	r25, 0x01	; 1
    5ec6:	00 96       	adiw	r24, 0x00	; 0
    5ec8:	61 05       	cpc	r22, r1
    5eca:	71 05       	cpc	r23, r1
    5ecc:	39 f4       	brne	.+14     	; 0x5edc <__ftoa_engine+0x28>
    5ece:	32 60       	ori	r19, 0x02	; 2
    5ed0:	2e 5f       	subi	r18, 0xFE	; 254
    5ed2:	3d 93       	st	X+, r19
    5ed4:	30 e3       	ldi	r19, 0x30	; 48
    5ed6:	2a 95       	dec	r18
    5ed8:	e1 f7       	brne	.-8      	; 0x5ed2 <__ftoa_engine+0x1e>
    5eda:	08 95       	ret
    5edc:	9f 3f       	cpi	r25, 0xFF	; 255
    5ede:	30 f0       	brcs	.+12     	; 0x5eec <__ftoa_engine+0x38>
    5ee0:	80 38       	cpi	r24, 0x80	; 128
    5ee2:	71 05       	cpc	r23, r1
    5ee4:	61 05       	cpc	r22, r1
    5ee6:	09 f0       	breq	.+2      	; 0x5eea <__ftoa_engine+0x36>
    5ee8:	3c 5f       	subi	r19, 0xFC	; 252
    5eea:	3c 5f       	subi	r19, 0xFC	; 252
    5eec:	3d 93       	st	X+, r19
    5eee:	91 30       	cpi	r25, 0x01	; 1
    5ef0:	08 f0       	brcs	.+2      	; 0x5ef4 <__ftoa_engine+0x40>
    5ef2:	80 68       	ori	r24, 0x80	; 128
    5ef4:	91 1d       	adc	r25, r1
    5ef6:	df 93       	push	r29
    5ef8:	cf 93       	push	r28
    5efa:	1f 93       	push	r17
    5efc:	0f 93       	push	r16
    5efe:	ff 92       	push	r15
    5f00:	ef 92       	push	r14
    5f02:	19 2f       	mov	r17, r25
    5f04:	98 7f       	andi	r25, 0xF8	; 248
    5f06:	96 95       	lsr	r25
    5f08:	e9 2f       	mov	r30, r25
    5f0a:	96 95       	lsr	r25
    5f0c:	96 95       	lsr	r25
    5f0e:	e9 0f       	add	r30, r25
    5f10:	ff 27       	eor	r31, r31
    5f12:	ec 55       	subi	r30, 0x5C	; 92
    5f14:	fe 4f       	sbci	r31, 0xFE	; 254
    5f16:	99 27       	eor	r25, r25
    5f18:	33 27       	eor	r19, r19
    5f1a:	ee 24       	eor	r14, r14
    5f1c:	ff 24       	eor	r15, r15
    5f1e:	a7 01       	movw	r20, r14
    5f20:	e7 01       	movw	r28, r14
    5f22:	05 90       	lpm	r0, Z+
    5f24:	08 94       	sec
    5f26:	07 94       	ror	r0
    5f28:	28 f4       	brcc	.+10     	; 0x5f34 <__ftoa_engine+0x80>
    5f2a:	36 0f       	add	r19, r22
    5f2c:	e7 1e       	adc	r14, r23
    5f2e:	f8 1e       	adc	r15, r24
    5f30:	49 1f       	adc	r20, r25
    5f32:	51 1d       	adc	r21, r1
    5f34:	66 0f       	add	r22, r22
    5f36:	77 1f       	adc	r23, r23
    5f38:	88 1f       	adc	r24, r24
    5f3a:	99 1f       	adc	r25, r25
    5f3c:	06 94       	lsr	r0
    5f3e:	a1 f7       	brne	.-24     	; 0x5f28 <__ftoa_engine+0x74>
    5f40:	05 90       	lpm	r0, Z+
    5f42:	07 94       	ror	r0
    5f44:	28 f4       	brcc	.+10     	; 0x5f50 <__ftoa_engine+0x9c>
    5f46:	e7 0e       	add	r14, r23
    5f48:	f8 1e       	adc	r15, r24
    5f4a:	49 1f       	adc	r20, r25
    5f4c:	56 1f       	adc	r21, r22
    5f4e:	c1 1d       	adc	r28, r1
    5f50:	77 0f       	add	r23, r23
    5f52:	88 1f       	adc	r24, r24
    5f54:	99 1f       	adc	r25, r25
    5f56:	66 1f       	adc	r22, r22
    5f58:	06 94       	lsr	r0
    5f5a:	a1 f7       	brne	.-24     	; 0x5f44 <__ftoa_engine+0x90>
    5f5c:	05 90       	lpm	r0, Z+
    5f5e:	07 94       	ror	r0
    5f60:	28 f4       	brcc	.+10     	; 0x5f6c <__ftoa_engine+0xb8>
    5f62:	f8 0e       	add	r15, r24
    5f64:	49 1f       	adc	r20, r25
    5f66:	56 1f       	adc	r21, r22
    5f68:	c7 1f       	adc	r28, r23
    5f6a:	d1 1d       	adc	r29, r1
    5f6c:	88 0f       	add	r24, r24
    5f6e:	99 1f       	adc	r25, r25
    5f70:	66 1f       	adc	r22, r22
    5f72:	77 1f       	adc	r23, r23
    5f74:	06 94       	lsr	r0
    5f76:	a1 f7       	brne	.-24     	; 0x5f60 <__ftoa_engine+0xac>
    5f78:	05 90       	lpm	r0, Z+
    5f7a:	07 94       	ror	r0
    5f7c:	20 f4       	brcc	.+8      	; 0x5f86 <__ftoa_engine+0xd2>
    5f7e:	49 0f       	add	r20, r25
    5f80:	56 1f       	adc	r21, r22
    5f82:	c7 1f       	adc	r28, r23
    5f84:	d8 1f       	adc	r29, r24
    5f86:	99 0f       	add	r25, r25
    5f88:	66 1f       	adc	r22, r22
    5f8a:	77 1f       	adc	r23, r23
    5f8c:	88 1f       	adc	r24, r24
    5f8e:	06 94       	lsr	r0
    5f90:	a9 f7       	brne	.-22     	; 0x5f7c <__ftoa_engine+0xc8>
    5f92:	84 91       	lpm	r24, Z
    5f94:	10 95       	com	r17
    5f96:	17 70       	andi	r17, 0x07	; 7
    5f98:	41 f0       	breq	.+16     	; 0x5faa <__ftoa_engine+0xf6>
    5f9a:	d6 95       	lsr	r29
    5f9c:	c7 95       	ror	r28
    5f9e:	57 95       	ror	r21
    5fa0:	47 95       	ror	r20
    5fa2:	f7 94       	ror	r15
    5fa4:	e7 94       	ror	r14
    5fa6:	1a 95       	dec	r17
    5fa8:	c1 f7       	brne	.-16     	; 0x5f9a <__ftoa_engine+0xe6>
    5faa:	ea e4       	ldi	r30, 0x4A	; 74
    5fac:	f1 e0       	ldi	r31, 0x01	; 1
    5fae:	68 94       	set
    5fb0:	15 90       	lpm	r1, Z+
    5fb2:	15 91       	lpm	r17, Z+
    5fb4:	35 91       	lpm	r19, Z+
    5fb6:	65 91       	lpm	r22, Z+
    5fb8:	95 91       	lpm	r25, Z+
    5fba:	05 90       	lpm	r0, Z+
    5fbc:	7f e2       	ldi	r23, 0x2F	; 47
    5fbe:	73 95       	inc	r23
    5fc0:	e1 18       	sub	r14, r1
    5fc2:	f1 0a       	sbc	r15, r17
    5fc4:	43 0b       	sbc	r20, r19
    5fc6:	56 0b       	sbc	r21, r22
    5fc8:	c9 0b       	sbc	r28, r25
    5fca:	d0 09       	sbc	r29, r0
    5fcc:	c0 f7       	brcc	.-16     	; 0x5fbe <__ftoa_engine+0x10a>
    5fce:	e1 0c       	add	r14, r1
    5fd0:	f1 1e       	adc	r15, r17
    5fd2:	43 1f       	adc	r20, r19
    5fd4:	56 1f       	adc	r21, r22
    5fd6:	c9 1f       	adc	r28, r25
    5fd8:	d0 1d       	adc	r29, r0
    5fda:	7e f4       	brtc	.+30     	; 0x5ffa <__ftoa_engine+0x146>
    5fdc:	70 33       	cpi	r23, 0x30	; 48
    5fde:	11 f4       	brne	.+4      	; 0x5fe4 <__ftoa_engine+0x130>
    5fe0:	8a 95       	dec	r24
    5fe2:	e6 cf       	rjmp	.-52     	; 0x5fb0 <__ftoa_engine+0xfc>
    5fe4:	e8 94       	clt
    5fe6:	01 50       	subi	r16, 0x01	; 1
    5fe8:	30 f0       	brcs	.+12     	; 0x5ff6 <__ftoa_engine+0x142>
    5fea:	08 0f       	add	r16, r24
    5fec:	0a f4       	brpl	.+2      	; 0x5ff0 <__ftoa_engine+0x13c>
    5fee:	00 27       	eor	r16, r16
    5ff0:	02 17       	cp	r16, r18
    5ff2:	08 f4       	brcc	.+2      	; 0x5ff6 <__ftoa_engine+0x142>
    5ff4:	20 2f       	mov	r18, r16
    5ff6:	23 95       	inc	r18
    5ff8:	02 2f       	mov	r16, r18
    5ffa:	7a 33       	cpi	r23, 0x3A	; 58
    5ffc:	28 f0       	brcs	.+10     	; 0x6008 <__ftoa_engine+0x154>
    5ffe:	79 e3       	ldi	r23, 0x39	; 57
    6000:	7d 93       	st	X+, r23
    6002:	2a 95       	dec	r18
    6004:	e9 f7       	brne	.-6      	; 0x6000 <__ftoa_engine+0x14c>
    6006:	10 c0       	rjmp	.+32     	; 0x6028 <__ftoa_engine+0x174>
    6008:	7d 93       	st	X+, r23
    600a:	2a 95       	dec	r18
    600c:	89 f6       	brne	.-94     	; 0x5fb0 <__ftoa_engine+0xfc>
    600e:	06 94       	lsr	r0
    6010:	97 95       	ror	r25
    6012:	67 95       	ror	r22
    6014:	37 95       	ror	r19
    6016:	17 95       	ror	r17
    6018:	17 94       	ror	r1
    601a:	e1 18       	sub	r14, r1
    601c:	f1 0a       	sbc	r15, r17
    601e:	43 0b       	sbc	r20, r19
    6020:	56 0b       	sbc	r21, r22
    6022:	c9 0b       	sbc	r28, r25
    6024:	d0 09       	sbc	r29, r0
    6026:	98 f0       	brcs	.+38     	; 0x604e <__ftoa_engine+0x19a>
    6028:	23 95       	inc	r18
    602a:	7e 91       	ld	r23, -X
    602c:	73 95       	inc	r23
    602e:	7a 33       	cpi	r23, 0x3A	; 58
    6030:	08 f0       	brcs	.+2      	; 0x6034 <__ftoa_engine+0x180>
    6032:	70 e3       	ldi	r23, 0x30	; 48
    6034:	7c 93       	st	X, r23
    6036:	20 13       	cpse	r18, r16
    6038:	b8 f7       	brcc	.-18     	; 0x6028 <__ftoa_engine+0x174>
    603a:	7e 91       	ld	r23, -X
    603c:	70 61       	ori	r23, 0x10	; 16
    603e:	7d 93       	st	X+, r23
    6040:	30 f0       	brcs	.+12     	; 0x604e <__ftoa_engine+0x19a>
    6042:	83 95       	inc	r24
    6044:	71 e3       	ldi	r23, 0x31	; 49
    6046:	7d 93       	st	X+, r23
    6048:	70 e3       	ldi	r23, 0x30	; 48
    604a:	2a 95       	dec	r18
    604c:	e1 f7       	brne	.-8      	; 0x6046 <__ftoa_engine+0x192>
    604e:	11 24       	eor	r1, r1
    6050:	ef 90       	pop	r14
    6052:	ff 90       	pop	r15
    6054:	0f 91       	pop	r16
    6056:	1f 91       	pop	r17
    6058:	cf 91       	pop	r28
    605a:	df 91       	pop	r29
    605c:	99 27       	eor	r25, r25
    605e:	87 fd       	sbrc	r24, 7
    6060:	90 95       	com	r25
    6062:	08 95       	ret

00006064 <strnlen_P>:
    6064:	fc 01       	movw	r30, r24
    6066:	05 90       	lpm	r0, Z+
    6068:	61 50       	subi	r22, 0x01	; 1
    606a:	70 40       	sbci	r23, 0x00	; 0
    606c:	01 10       	cpse	r0, r1
    606e:	d8 f7       	brcc	.-10     	; 0x6066 <strnlen_P+0x2>
    6070:	80 95       	com	r24
    6072:	90 95       	com	r25
    6074:	8e 0f       	add	r24, r30
    6076:	9f 1f       	adc	r25, r31
    6078:	08 95       	ret

0000607a <strnlen>:
    607a:	fc 01       	movw	r30, r24
    607c:	61 50       	subi	r22, 0x01	; 1
    607e:	70 40       	sbci	r23, 0x00	; 0
    6080:	01 90       	ld	r0, Z+
    6082:	01 10       	cpse	r0, r1
    6084:	d8 f7       	brcc	.-10     	; 0x607c <strnlen+0x2>
    6086:	80 95       	com	r24
    6088:	90 95       	com	r25
    608a:	8e 0f       	add	r24, r30
    608c:	9f 1f       	adc	r25, r31
    608e:	08 95       	ret

00006090 <fputc>:
    6090:	0f 93       	push	r16
    6092:	1f 93       	push	r17
    6094:	cf 93       	push	r28
    6096:	df 93       	push	r29
    6098:	fb 01       	movw	r30, r22
    609a:	23 81       	ldd	r18, Z+3	; 0x03
    609c:	21 fd       	sbrc	r18, 1
    609e:	03 c0       	rjmp	.+6      	; 0x60a6 <fputc+0x16>
    60a0:	8f ef       	ldi	r24, 0xFF	; 255
    60a2:	9f ef       	ldi	r25, 0xFF	; 255
    60a4:	28 c0       	rjmp	.+80     	; 0x60f6 <fputc+0x66>
    60a6:	22 ff       	sbrs	r18, 2
    60a8:	16 c0       	rjmp	.+44     	; 0x60d6 <fputc+0x46>
    60aa:	46 81       	ldd	r20, Z+6	; 0x06
    60ac:	57 81       	ldd	r21, Z+7	; 0x07
    60ae:	24 81       	ldd	r18, Z+4	; 0x04
    60b0:	35 81       	ldd	r19, Z+5	; 0x05
    60b2:	42 17       	cp	r20, r18
    60b4:	53 07       	cpc	r21, r19
    60b6:	44 f4       	brge	.+16     	; 0x60c8 <fputc+0x38>
    60b8:	a0 81       	ld	r26, Z
    60ba:	b1 81       	ldd	r27, Z+1	; 0x01
    60bc:	9d 01       	movw	r18, r26
    60be:	2f 5f       	subi	r18, 0xFF	; 255
    60c0:	3f 4f       	sbci	r19, 0xFF	; 255
    60c2:	31 83       	std	Z+1, r19	; 0x01
    60c4:	20 83       	st	Z, r18
    60c6:	8c 93       	st	X, r24
    60c8:	26 81       	ldd	r18, Z+6	; 0x06
    60ca:	37 81       	ldd	r19, Z+7	; 0x07
    60cc:	2f 5f       	subi	r18, 0xFF	; 255
    60ce:	3f 4f       	sbci	r19, 0xFF	; 255
    60d0:	37 83       	std	Z+7, r19	; 0x07
    60d2:	26 83       	std	Z+6, r18	; 0x06
    60d4:	10 c0       	rjmp	.+32     	; 0x60f6 <fputc+0x66>
    60d6:	eb 01       	movw	r28, r22
    60d8:	09 2f       	mov	r16, r25
    60da:	18 2f       	mov	r17, r24
    60dc:	00 84       	ldd	r0, Z+8	; 0x08
    60de:	f1 85       	ldd	r31, Z+9	; 0x09
    60e0:	e0 2d       	mov	r30, r0
    60e2:	19 95       	eicall
    60e4:	89 2b       	or	r24, r25
    60e6:	e1 f6       	brne	.-72     	; 0x60a0 <fputc+0x10>
    60e8:	8e 81       	ldd	r24, Y+6	; 0x06
    60ea:	9f 81       	ldd	r25, Y+7	; 0x07
    60ec:	01 96       	adiw	r24, 0x01	; 1
    60ee:	9f 83       	std	Y+7, r25	; 0x07
    60f0:	8e 83       	std	Y+6, r24	; 0x06
    60f2:	81 2f       	mov	r24, r17
    60f4:	90 2f       	mov	r25, r16
    60f6:	df 91       	pop	r29
    60f8:	cf 91       	pop	r28
    60fa:	1f 91       	pop	r17
    60fc:	0f 91       	pop	r16
    60fe:	08 95       	ret

00006100 <printf>:
    6100:	cf 93       	push	r28
    6102:	df 93       	push	r29
    6104:	cd b7       	in	r28, 0x3d	; 61
    6106:	de b7       	in	r29, 0x3e	; 62
    6108:	ae 01       	movw	r20, r28
    610a:	4a 5f       	subi	r20, 0xFA	; 250
    610c:	5f 4f       	sbci	r21, 0xFF	; 255
    610e:	fa 01       	movw	r30, r20
    6110:	61 91       	ld	r22, Z+
    6112:	71 91       	ld	r23, Z+
    6114:	af 01       	movw	r20, r30
    6116:	80 91 b0 0d 	lds	r24, 0x0DB0
    611a:	90 91 b1 0d 	lds	r25, 0x0DB1
    611e:	c3 d9       	rcall	.-3194   	; 0x54a6 <vfprintf>
    6120:	df 91       	pop	r29
    6122:	cf 91       	pop	r28
    6124:	08 95       	ret

00006126 <puts>:
    6126:	0f 93       	push	r16
    6128:	1f 93       	push	r17
    612a:	cf 93       	push	r28
    612c:	df 93       	push	r29
    612e:	e0 91 b0 0d 	lds	r30, 0x0DB0
    6132:	f0 91 b1 0d 	lds	r31, 0x0DB1
    6136:	23 81       	ldd	r18, Z+3	; 0x03
    6138:	21 ff       	sbrs	r18, 1
    613a:	1b c0       	rjmp	.+54     	; 0x6172 <puts+0x4c>
    613c:	8c 01       	movw	r16, r24
    613e:	d0 e0       	ldi	r29, 0x00	; 0
    6140:	c0 e0       	ldi	r28, 0x00	; 0
    6142:	f8 01       	movw	r30, r16
    6144:	81 91       	ld	r24, Z+
    6146:	8f 01       	movw	r16, r30
    6148:	60 91 b0 0d 	lds	r22, 0x0DB0
    614c:	70 91 b1 0d 	lds	r23, 0x0DB1
    6150:	db 01       	movw	r26, r22
    6152:	18 96       	adiw	r26, 0x08	; 8
    6154:	ed 91       	ld	r30, X+
    6156:	fc 91       	ld	r31, X
    6158:	19 97       	sbiw	r26, 0x09	; 9
    615a:	88 23       	and	r24, r24
    615c:	31 f0       	breq	.+12     	; 0x616a <puts+0x44>
    615e:	19 95       	eicall
    6160:	89 2b       	or	r24, r25
    6162:	79 f3       	breq	.-34     	; 0x6142 <puts+0x1c>
    6164:	df ef       	ldi	r29, 0xFF	; 255
    6166:	cf ef       	ldi	r28, 0xFF	; 255
    6168:	ec cf       	rjmp	.-40     	; 0x6142 <puts+0x1c>
    616a:	8a e0       	ldi	r24, 0x0A	; 10
    616c:	19 95       	eicall
    616e:	89 2b       	or	r24, r25
    6170:	19 f0       	breq	.+6      	; 0x6178 <puts+0x52>
    6172:	8f ef       	ldi	r24, 0xFF	; 255
    6174:	9f ef       	ldi	r25, 0xFF	; 255
    6176:	02 c0       	rjmp	.+4      	; 0x617c <puts+0x56>
    6178:	8d 2f       	mov	r24, r29
    617a:	9c 2f       	mov	r25, r28
    617c:	df 91       	pop	r29
    617e:	cf 91       	pop	r28
    6180:	1f 91       	pop	r17
    6182:	0f 91       	pop	r16
    6184:	08 95       	ret

00006186 <__ultoa_invert>:
    6186:	fa 01       	movw	r30, r20
    6188:	aa 27       	eor	r26, r26
    618a:	28 30       	cpi	r18, 0x08	; 8
    618c:	51 f1       	breq	.+84     	; 0x61e2 <__ultoa_invert+0x5c>
    618e:	20 31       	cpi	r18, 0x10	; 16
    6190:	81 f1       	breq	.+96     	; 0x61f2 <__ultoa_invert+0x6c>
    6192:	e8 94       	clt
    6194:	6f 93       	push	r22
    6196:	6e 7f       	andi	r22, 0xFE	; 254
    6198:	6e 5f       	subi	r22, 0xFE	; 254
    619a:	7f 4f       	sbci	r23, 0xFF	; 255
    619c:	8f 4f       	sbci	r24, 0xFF	; 255
    619e:	9f 4f       	sbci	r25, 0xFF	; 255
    61a0:	af 4f       	sbci	r26, 0xFF	; 255
    61a2:	b1 e0       	ldi	r27, 0x01	; 1
    61a4:	3e d0       	rcall	.+124    	; 0x6222 <__ultoa_invert+0x9c>
    61a6:	b4 e0       	ldi	r27, 0x04	; 4
    61a8:	3c d0       	rcall	.+120    	; 0x6222 <__ultoa_invert+0x9c>
    61aa:	67 0f       	add	r22, r23
    61ac:	78 1f       	adc	r23, r24
    61ae:	89 1f       	adc	r24, r25
    61b0:	9a 1f       	adc	r25, r26
    61b2:	a1 1d       	adc	r26, r1
    61b4:	68 0f       	add	r22, r24
    61b6:	79 1f       	adc	r23, r25
    61b8:	8a 1f       	adc	r24, r26
    61ba:	91 1d       	adc	r25, r1
    61bc:	a1 1d       	adc	r26, r1
    61be:	6a 0f       	add	r22, r26
    61c0:	71 1d       	adc	r23, r1
    61c2:	81 1d       	adc	r24, r1
    61c4:	91 1d       	adc	r25, r1
    61c6:	a1 1d       	adc	r26, r1
    61c8:	20 d0       	rcall	.+64     	; 0x620a <__ultoa_invert+0x84>
    61ca:	09 f4       	brne	.+2      	; 0x61ce <__ultoa_invert+0x48>
    61cc:	68 94       	set
    61ce:	3f 91       	pop	r19
    61d0:	2a e0       	ldi	r18, 0x0A	; 10
    61d2:	26 9f       	mul	r18, r22
    61d4:	11 24       	eor	r1, r1
    61d6:	30 19       	sub	r19, r0
    61d8:	30 5d       	subi	r19, 0xD0	; 208
    61da:	31 93       	st	Z+, r19
    61dc:	de f6       	brtc	.-74     	; 0x6194 <__ultoa_invert+0xe>
    61de:	cf 01       	movw	r24, r30
    61e0:	08 95       	ret
    61e2:	46 2f       	mov	r20, r22
    61e4:	47 70       	andi	r20, 0x07	; 7
    61e6:	40 5d       	subi	r20, 0xD0	; 208
    61e8:	41 93       	st	Z+, r20
    61ea:	b3 e0       	ldi	r27, 0x03	; 3
    61ec:	0f d0       	rcall	.+30     	; 0x620c <__ultoa_invert+0x86>
    61ee:	c9 f7       	brne	.-14     	; 0x61e2 <__ultoa_invert+0x5c>
    61f0:	f6 cf       	rjmp	.-20     	; 0x61de <__ultoa_invert+0x58>
    61f2:	46 2f       	mov	r20, r22
    61f4:	4f 70       	andi	r20, 0x0F	; 15
    61f6:	40 5d       	subi	r20, 0xD0	; 208
    61f8:	4a 33       	cpi	r20, 0x3A	; 58
    61fa:	18 f0       	brcs	.+6      	; 0x6202 <__ultoa_invert+0x7c>
    61fc:	49 5d       	subi	r20, 0xD9	; 217
    61fe:	31 fd       	sbrc	r19, 1
    6200:	40 52       	subi	r20, 0x20	; 32
    6202:	41 93       	st	Z+, r20
    6204:	02 d0       	rcall	.+4      	; 0x620a <__ultoa_invert+0x84>
    6206:	a9 f7       	brne	.-22     	; 0x61f2 <__ultoa_invert+0x6c>
    6208:	ea cf       	rjmp	.-44     	; 0x61de <__ultoa_invert+0x58>
    620a:	b4 e0       	ldi	r27, 0x04	; 4
    620c:	a6 95       	lsr	r26
    620e:	97 95       	ror	r25
    6210:	87 95       	ror	r24
    6212:	77 95       	ror	r23
    6214:	67 95       	ror	r22
    6216:	ba 95       	dec	r27
    6218:	c9 f7       	brne	.-14     	; 0x620c <__ultoa_invert+0x86>
    621a:	00 97       	sbiw	r24, 0x00	; 0
    621c:	61 05       	cpc	r22, r1
    621e:	71 05       	cpc	r23, r1
    6220:	08 95       	ret
    6222:	9b 01       	movw	r18, r22
    6224:	ac 01       	movw	r20, r24
    6226:	0a 2e       	mov	r0, r26
    6228:	06 94       	lsr	r0
    622a:	57 95       	ror	r21
    622c:	47 95       	ror	r20
    622e:	37 95       	ror	r19
    6230:	27 95       	ror	r18
    6232:	ba 95       	dec	r27
    6234:	c9 f7       	brne	.-14     	; 0x6228 <__ultoa_invert+0xa2>
    6236:	62 0f       	add	r22, r18
    6238:	73 1f       	adc	r23, r19
    623a:	84 1f       	adc	r24, r20
    623c:	95 1f       	adc	r25, r21
    623e:	a0 1d       	adc	r26, r0
    6240:	08 95       	ret

00006242 <_exit>:
    6242:	f8 94       	cli

00006244 <__stop_program>:
    6244:	ff cf       	rjmp	.-2      	; 0x6244 <__stop_program>
