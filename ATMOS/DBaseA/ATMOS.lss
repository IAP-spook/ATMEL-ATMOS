
ATMOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000406  00800200  00003aa4  00003b38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003aa4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005a2  00800606  00800606  00003f3e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003f3e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000044  00000000  00000000  00003f9c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000838  00000000  00000000  00003fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000a311  00000000  00000000  00004818  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000033a7  00000000  00000000  0000eb29  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00004ac9  00000000  00000000  00011ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001650  00000000  00000000  0001699c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002489  00000000  00000000  00017fec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00005644  00000000  00000000  0001a475  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000790  00000000  00000000  0001fab9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	1a c1       	rjmp	.+564    	; 0x236 <__ctors_end>
       2:	00 00       	nop
       4:	38 c1       	rjmp	.+624    	; 0x276 <__bad_interrupt>
       6:	00 00       	nop
       8:	36 c1       	rjmp	.+620    	; 0x276 <__bad_interrupt>
       a:	00 00       	nop
       c:	34 c1       	rjmp	.+616    	; 0x276 <__bad_interrupt>
       e:	00 00       	nop
      10:	32 c1       	rjmp	.+612    	; 0x276 <__bad_interrupt>
      12:	00 00       	nop
      14:	30 c1       	rjmp	.+608    	; 0x276 <__bad_interrupt>
      16:	00 00       	nop
      18:	2e c1       	rjmp	.+604    	; 0x276 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	2c c1       	rjmp	.+600    	; 0x276 <__bad_interrupt>
      1e:	00 00       	nop
      20:	2a c1       	rjmp	.+596    	; 0x276 <__bad_interrupt>
      22:	00 00       	nop
      24:	28 c1       	rjmp	.+592    	; 0x276 <__bad_interrupt>
      26:	00 00       	nop
      28:	26 c1       	rjmp	.+588    	; 0x276 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	24 c1       	rjmp	.+584    	; 0x276 <__bad_interrupt>
      2e:	00 00       	nop
      30:	22 c1       	rjmp	.+580    	; 0x276 <__bad_interrupt>
      32:	00 00       	nop
      34:	20 c1       	rjmp	.+576    	; 0x276 <__bad_interrupt>
      36:	00 00       	nop
      38:	1e c1       	rjmp	.+572    	; 0x276 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	15 c3       	rjmp	.+1578   	; 0x668 <__vector_15>
      3e:	00 00       	nop
      40:	1a c1       	rjmp	.+564    	; 0x276 <__bad_interrupt>
      42:	00 00       	nop
      44:	18 c1       	rjmp	.+560    	; 0x276 <__bad_interrupt>
      46:	00 00       	nop
      48:	16 c1       	rjmp	.+556    	; 0x276 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	14 c1       	rjmp	.+552    	; 0x276 <__bad_interrupt>
      4e:	00 00       	nop
      50:	12 c1       	rjmp	.+548    	; 0x276 <__bad_interrupt>
      52:	00 00       	nop
      54:	10 c1       	rjmp	.+544    	; 0x276 <__bad_interrupt>
      56:	00 00       	nop
      58:	0e c1       	rjmp	.+540    	; 0x276 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c c1       	rjmp	.+536    	; 0x276 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0a c1       	rjmp	.+532    	; 0x276 <__bad_interrupt>
      62:	00 00       	nop
      64:	08 c1       	rjmp	.+528    	; 0x276 <__bad_interrupt>
      66:	00 00       	nop
      68:	06 c1       	rjmp	.+524    	; 0x276 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	04 c1       	rjmp	.+520    	; 0x276 <__bad_interrupt>
      6e:	00 00       	nop
      70:	02 c1       	rjmp	.+516    	; 0x276 <__bad_interrupt>
      72:	00 00       	nop
      74:	00 c1       	rjmp	.+512    	; 0x276 <__bad_interrupt>
      76:	00 00       	nop
      78:	fe c0       	rjmp	.+508    	; 0x276 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	fc c0       	rjmp	.+504    	; 0x276 <__bad_interrupt>
      7e:	00 00       	nop
      80:	fa c0       	rjmp	.+500    	; 0x276 <__bad_interrupt>
      82:	00 00       	nop
      84:	f8 c0       	rjmp	.+496    	; 0x276 <__bad_interrupt>
      86:	00 00       	nop
      88:	f6 c0       	rjmp	.+492    	; 0x276 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f4 c0       	rjmp	.+488    	; 0x276 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f2 c0       	rjmp	.+484    	; 0x276 <__bad_interrupt>
      92:	00 00       	nop
      94:	f0 c0       	rjmp	.+480    	; 0x276 <__bad_interrupt>
      96:	00 00       	nop
      98:	ee c0       	rjmp	.+476    	; 0x276 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	ec c0       	rjmp	.+472    	; 0x276 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ea c0       	rjmp	.+468    	; 0x276 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	e8 c0       	rjmp	.+464    	; 0x276 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	a1 c5       	rjmp	.+2882   	; 0xbec <__vector_42>
      aa:	00 00       	nop
      ac:	e4 c0       	rjmp	.+456    	; 0x276 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	e2 c0       	rjmp	.+452    	; 0x276 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	e0 c0       	rjmp	.+448    	; 0x276 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	de c0       	rjmp	.+444    	; 0x276 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	dc c0       	rjmp	.+440    	; 0x276 <__bad_interrupt>
      be:	00 00       	nop
      c0:	da c0       	rjmp	.+436    	; 0x276 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	d8 c0       	rjmp	.+432    	; 0x276 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	d6 c0       	rjmp	.+428    	; 0x276 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	d4 c0       	rjmp	.+424    	; 0x276 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	d2 c0       	rjmp	.+420    	; 0x276 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	d0 c0       	rjmp	.+416    	; 0x276 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ce c0       	rjmp	.+412    	; 0x276 <__bad_interrupt>
      da:	00 00       	nop
      dc:	cc c0       	rjmp	.+408    	; 0x276 <__bad_interrupt>
      de:	00 00       	nop
      e0:	ca c0       	rjmp	.+404    	; 0x276 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	c8 c0       	rjmp	.+400    	; 0x276 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	c6 c0       	rjmp	.+396    	; 0x276 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	c4 c0       	rjmp	.+392    	; 0x276 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	c2 c0       	rjmp	.+388    	; 0x276 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	c0 c0       	rjmp	.+384    	; 0x276 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	be c0       	rjmp	.+380    	; 0x276 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	bc c0       	rjmp	.+376    	; 0x276 <__bad_interrupt>
      fe:	00 00       	nop
     100:	ba c0       	rjmp	.+372    	; 0x276 <__bad_interrupt>
     102:	00 00       	nop
     104:	b8 c0       	rjmp	.+368    	; 0x276 <__bad_interrupt>
     106:	00 00       	nop
     108:	b6 c0       	rjmp	.+364    	; 0x276 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	b4 c0       	rjmp	.+360    	; 0x276 <__bad_interrupt>
     10e:	00 00       	nop
     110:	b2 c0       	rjmp	.+356    	; 0x276 <__bad_interrupt>
     112:	00 00       	nop
     114:	b0 c0       	rjmp	.+352    	; 0x276 <__bad_interrupt>
     116:	00 00       	nop
     118:	ae c0       	rjmp	.+348    	; 0x276 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	ac c0       	rjmp	.+344    	; 0x276 <__bad_interrupt>
     11e:	00 00       	nop
     120:	aa c0       	rjmp	.+340    	; 0x276 <__bad_interrupt>
     122:	00 00       	nop
     124:	a8 c0       	rjmp	.+336    	; 0x276 <__bad_interrupt>
     126:	00 00       	nop
     128:	a6 c0       	rjmp	.+332    	; 0x276 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	a4 c0       	rjmp	.+328    	; 0x276 <__bad_interrupt>
     12e:	00 00       	nop
     130:	a2 c0       	rjmp	.+324    	; 0x276 <__bad_interrupt>
	...

00000134 <__trampolines_end>:
     134:	6e 61       	ori	r22, 0x1E	; 30
     136:	6e 00       	.word	0x006e	; ????

00000138 <__c.2177>:
     138:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     148:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     158:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     168:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     178:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     188:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     198:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     208:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     218:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     228:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000236 <__ctors_end>:
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	d1 e8       	ldi	r29, 0x81	; 129
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61
     242:	00 e0       	ldi	r16, 0x00	; 0
     244:	0c bf       	out	0x3c, r16	; 60

00000246 <__do_copy_data>:
     246:	16 e0       	ldi	r17, 0x06	; 6
     248:	a0 e0       	ldi	r26, 0x00	; 0
     24a:	b2 e0       	ldi	r27, 0x02	; 2
     24c:	e4 ea       	ldi	r30, 0xA4	; 164
     24e:	fa e3       	ldi	r31, 0x3A	; 58
     250:	00 e0       	ldi	r16, 0x00	; 0
     252:	0b bf       	out	0x3b, r16	; 59
     254:	02 c0       	rjmp	.+4      	; 0x25a <__do_copy_data+0x14>
     256:	07 90       	elpm	r0, Z+
     258:	0d 92       	st	X+, r0
     25a:	a6 30       	cpi	r26, 0x06	; 6
     25c:	b1 07       	cpc	r27, r17
     25e:	d9 f7       	brne	.-10     	; 0x256 <__do_copy_data+0x10>

00000260 <__do_clear_bss>:
     260:	2b e0       	ldi	r18, 0x0B	; 11
     262:	a6 e0       	ldi	r26, 0x06	; 6
     264:	b6 e0       	ldi	r27, 0x06	; 6
     266:	01 c0       	rjmp	.+2      	; 0x26a <.do_clear_bss_start>

00000268 <.do_clear_bss_loop>:
     268:	1d 92       	st	X+, r1

0000026a <.do_clear_bss_start>:
     26a:	a8 3a       	cpi	r26, 0xA8	; 168
     26c:	b2 07       	cpc	r27, r18
     26e:	e1 f7       	brne	.-8      	; 0x268 <.do_clear_bss_loop>
     270:	94 d0       	rcall	.+296    	; 0x39a <main>
     272:	0c 94 50 1d 	jmp	0x3aa0	; 0x3aa0 <_exit>

00000276 <__bad_interrupt>:
     276:	c4 ce       	rjmp	.-632    	; 0x0 <__vectors>

00000278 <init_parameter>:
	/* if there are some other parameters other than devices' and sensors', update them below as well */
}

/* init all devices' parameters */
void init_parameter(GlobalParameter * globalPara)
{
     278:	af 92       	push	r10
     27a:	bf 92       	push	r11
     27c:	cf 92       	push	r12
     27e:	df 92       	push	r13
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	0f 93       	push	r16
     286:	1f 93       	push	r17
     288:	cf 93       	push	r28
     28a:	df 93       	push	r29
     28c:	5c 01       	movw	r10, r24
     28e:	a6 e3       	ldi	r26, 0x36	; 54
     290:	b2 e0       	ldi	r27, 0x02	; 2
     292:	fc 01       	movw	r30, r24
     294:	b0 96       	adiw	r30, 0x20	; 32
     296:	2a e2       	ldi	r18, 0x2A	; 42
     298:	32 e0       	ldi	r19, 0x02	; 2
     29a:	8e e1       	ldi	r24, 0x1E	; 30
     29c:	92 e0       	ldi	r25, 0x02	; 2
     29e:	02 e4       	ldi	r16, 0x42	; 66
     2a0:	12 e0       	ldi	r17, 0x02	; 2
	/* init all sensors' parameters */
	for( int i = 0 ; i < SensorListEnd ; ++i )
	{
		//printf("%d\t%d\t%d\t%d\n",SensorInitStartTimeList[i],SENSOR_INIT_PERIOD,SensorCheckCodeList[i],SensorNumDataList[i]);
		globalPara->SensorList[i].StartTime = SensorInitStartTimeList[i];
		globalPara->SensorList[i].ExecutePeriod = SENSOR_INIT_PERIOD;
     2a2:	0f 2e       	mov	r0, r31
     2a4:	f0 ee       	ldi	r31, 0xE0	; 224
     2a6:	cf 2e       	mov	r12, r31
     2a8:	fe e2       	ldi	r31, 0x2E	; 46
     2aa:	df 2e       	mov	r13, r31
     2ac:	e1 2c       	mov	r14, r1
     2ae:	f1 2c       	mov	r15, r1
     2b0:	f0 2d       	mov	r31, r0
{
	/* init all sensors' parameters */
	for( int i = 0 ; i < SensorListEnd ; ++i )
	{
		//printf("%d\t%d\t%d\t%d\n",SensorInitStartTimeList[i],SENSOR_INIT_PERIOD,SensorCheckCodeList[i],SensorNumDataList[i]);
		globalPara->SensorList[i].StartTime = SensorInitStartTimeList[i];
     2b2:	4d 91       	ld	r20, X+
     2b4:	5d 91       	ld	r21, X+
     2b6:	6d 91       	ld	r22, X+
     2b8:	7d 91       	ld	r23, X+
     2ba:	40 83       	st	Z, r20
     2bc:	51 83       	std	Z+1, r21	; 0x01
     2be:	62 83       	std	Z+2, r22	; 0x02
     2c0:	73 83       	std	Z+3, r23	; 0x03
		globalPara->SensorList[i].ExecutePeriod = SENSOR_INIT_PERIOD;
     2c2:	c4 82       	std	Z+4, r12	; 0x04
     2c4:	d5 82       	std	Z+5, r13	; 0x05
     2c6:	e6 82       	std	Z+6, r14	; 0x06
     2c8:	f7 82       	std	Z+7, r15	; 0x07
		globalPara->SensorList[i].CheckCode = SensorCheckCodeList[i];
     2ca:	e9 01       	movw	r28, r18
     2cc:	49 91       	ld	r20, Y+
     2ce:	59 91       	ld	r21, Y+
     2d0:	69 91       	ld	r22, Y+
     2d2:	79 91       	ld	r23, Y+
     2d4:	9e 01       	movw	r18, r28
     2d6:	44 87       	std	Z+12, r20	; 0x0c
     2d8:	55 87       	std	Z+13, r21	; 0x0d
     2da:	66 87       	std	Z+14, r22	; 0x0e
     2dc:	77 87       	std	Z+15, r23	; 0x0f
		globalPara->SensorList[i].NumOfData = SensorNumDataList[i];
     2de:	ec 01       	movw	r28, r24
     2e0:	49 91       	ld	r20, Y+
     2e2:	59 91       	ld	r21, Y+
     2e4:	69 91       	ld	r22, Y+
     2e6:	79 91       	ld	r23, Y+
     2e8:	ce 01       	movw	r24, r28
     2ea:	40 87       	std	Z+8, r20	; 0x08
     2ec:	51 87       	std	Z+9, r21	; 0x09
     2ee:	62 87       	std	Z+10, r22	; 0x0a
     2f0:	73 87       	std	Z+11, r23	; 0x0b
     2f2:	70 96       	adiw	r30, 0x10	; 16

/* init all devices' parameters */
void init_parameter(GlobalParameter * globalPara)
{
	/* init all sensors' parameters */
	for( int i = 0 ; i < SensorListEnd ; ++i )
     2f4:	a0 17       	cp	r26, r16
     2f6:	b1 07       	cpc	r27, r17
     2f8:	e1 f6       	brne	.-72     	; 0x2b2 <init_parameter+0x3a>
	
	/* init all devices' parameters */
	for( int i = 0 ; i < DeviceListEnd ; ++i )
	{
		//printf("%d\t%d\t%d\t%d\n",DeviceInitStartTimeList[i],DeviceInitPeriodList[i],DeviceCheckCodeList[i],0);
		globalPara->DeviceList[i].StartTime = DeviceInitStartTimeList[i];
     2fa:	8e e0       	ldi	r24, 0x0E	; 14
     2fc:	92 e0       	ldi	r25, 0x02	; 2
     2fe:	fc 01       	movw	r30, r24
     300:	40 81       	ld	r20, Z
     302:	51 81       	ldd	r21, Z+1	; 0x01
     304:	62 81       	ldd	r22, Z+2	; 0x02
     306:	73 81       	ldd	r23, Z+3	; 0x03
     308:	e5 01       	movw	r28, r10
     30a:	48 83       	st	Y, r20
     30c:	59 83       	std	Y+1, r21	; 0x01
     30e:	6a 83       	std	Y+2, r22	; 0x02
     310:	7b 83       	std	Y+3, r23	; 0x03
		globalPara->DeviceList[i].ExecutePeriod = DeviceInitPeriodList[i];
     312:	a6 e1       	ldi	r26, 0x16	; 22
     314:	b2 e0       	ldi	r27, 0x02	; 2
     316:	4d 91       	ld	r20, X+
     318:	5d 91       	ld	r21, X+
     31a:	6d 91       	ld	r22, X+
     31c:	7c 91       	ld	r23, X
     31e:	13 97       	sbiw	r26, 0x03	; 3
     320:	4c 83       	std	Y+4, r20	; 0x04
     322:	5d 83       	std	Y+5, r21	; 0x05
     324:	6e 83       	std	Y+6, r22	; 0x06
     326:	7f 83       	std	Y+7, r23	; 0x07
		globalPara->DeviceList[i].CheckCode = DeviceCheckCodeList[i]; 
     328:	e6 e0       	ldi	r30, 0x06	; 6
     32a:	f2 e0       	ldi	r31, 0x02	; 2
     32c:	40 81       	ld	r20, Z
     32e:	51 81       	ldd	r21, Z+1	; 0x01
     330:	62 81       	ldd	r22, Z+2	; 0x02
     332:	73 81       	ldd	r23, Z+3	; 0x03
     334:	4c 87       	std	Y+12, r20	; 0x0c
     336:	5d 87       	std	Y+13, r21	; 0x0d
     338:	6e 87       	std	Y+14, r22	; 0x0e
     33a:	7f 87       	std	Y+15, r23	; 0x0f
		globalPara->DeviceList[i].NumOfData = 0;
     33c:	18 86       	std	Y+8, r1	; 0x08
     33e:	19 86       	std	Y+9, r1	; 0x09
     340:	1a 86       	std	Y+10, r1	; 0x0a
     342:	1b 86       	std	Y+11, r1	; 0x0b
	
	/* init all devices' parameters */
	for( int i = 0 ; i < DeviceListEnd ; ++i )
	{
		//printf("%d\t%d\t%d\t%d\n",DeviceInitStartTimeList[i],DeviceInitPeriodList[i],DeviceCheckCodeList[i],0);
		globalPara->DeviceList[i].StartTime = DeviceInitStartTimeList[i];
     344:	ec 01       	movw	r28, r24
     346:	4c 81       	ldd	r20, Y+4	; 0x04
     348:	5d 81       	ldd	r21, Y+5	; 0x05
     34a:	6e 81       	ldd	r22, Y+6	; 0x06
     34c:	7f 81       	ldd	r23, Y+7	; 0x07
     34e:	e5 01       	movw	r28, r10
     350:	48 8b       	std	Y+16, r20	; 0x10
     352:	59 8b       	std	Y+17, r21	; 0x11
     354:	6a 8b       	std	Y+18, r22	; 0x12
     356:	7b 8b       	std	Y+19, r23	; 0x13
		globalPara->DeviceList[i].ExecutePeriod = DeviceInitPeriodList[i];
     358:	14 96       	adiw	r26, 0x04	; 4
     35a:	8d 91       	ld	r24, X+
     35c:	9d 91       	ld	r25, X+
     35e:	0d 90       	ld	r0, X+
     360:	bc 91       	ld	r27, X
     362:	a0 2d       	mov	r26, r0
     364:	8c 8b       	std	Y+20, r24	; 0x14
     366:	9d 8b       	std	Y+21, r25	; 0x15
     368:	ae 8b       	std	Y+22, r26	; 0x16
     36a:	bf 8b       	std	Y+23, r27	; 0x17
		globalPara->DeviceList[i].CheckCode = DeviceCheckCodeList[i]; 
     36c:	84 81       	ldd	r24, Z+4	; 0x04
     36e:	95 81       	ldd	r25, Z+5	; 0x05
     370:	a6 81       	ldd	r26, Z+6	; 0x06
     372:	b7 81       	ldd	r27, Z+7	; 0x07
     374:	8c 8f       	std	Y+28, r24	; 0x1c
     376:	9d 8f       	std	Y+29, r25	; 0x1d
     378:	ae 8f       	std	Y+30, r26	; 0x1e
     37a:	bf 8f       	std	Y+31, r27	; 0x1f
		globalPara->DeviceList[i].NumOfData = 0;
     37c:	18 8e       	std	Y+24, r1	; 0x18
     37e:	19 8e       	std	Y+25, r1	; 0x19
     380:	1a 8e       	std	Y+26, r1	; 0x1a
     382:	1b 8e       	std	Y+27, r1	; 0x1b
	}
}
     384:	df 91       	pop	r29
     386:	cf 91       	pop	r28
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	ff 90       	pop	r15
     38e:	ef 90       	pop	r14
     390:	df 90       	pop	r13
     392:	cf 90       	pop	r12
     394:	bf 90       	pop	r11
     396:	af 90       	pop	r10
     398:	08 95       	ret

0000039a <main>:
	// load_new_sensor( 4, 4, (BaseSensor *)Si7020_ptr, 0 );	
}

int main(void)
{
	SYS_Init();
     39a:	0e 94 27 0a 	call	0x144e	; 0x144e <SYS_Init>
tm cur_time;
GlobalParameter GP;

/* TODO : clean up these messy init */
static void APP_Init(void){
	PWR_Init();
     39e:	db d2       	rcall	.+1462   	; 0x956 <PWR_Init>
	PWR_TurnOn5V();
     3a0:	de d2       	rcall	.+1468   	; 0x95e <PWR_TurnOn5V>
	USART0_Init(9600);
     3a2:	60 e8       	ldi	r22, 0x80	; 128
     3a4:	75 e2       	ldi	r23, 0x25	; 37
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	b6 d3       	rcall	.+1900   	; 0xb18 <USART0_Init>
	DDRB |= 0b00010000;
     3ac:	24 9a       	sbi	0x04, 4	; 4
	DDRE |= 0b00001000;
     3ae:	6b 9a       	sbi	0x0d, 3	; 13
	PORTE|= 0b00001000;
     3b0:	73 9a       	sbi	0x0e, 3	; 14
	TWI_Init(10000);
     3b2:	60 e1       	ldi	r22, 0x10	; 16
     3b4:	77 e2       	ldi	r23, 0x27	; 39
     3b6:	80 e0       	ldi	r24, 0x00	; 0
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	d7 d2       	rcall	.+1454   	; 0x96a <TWI_Init>
	ADC_Init();
     3bc:	49 d1       	rcall	.+658    	; 0x650 <ADC_Init>
	printf("BMP280 Status %i\n", BMP280_Init());
     3be:	0e 94 68 0d 	call	0x1ad0	; 0x1ad0 <BMP280_Init>
     3c2:	9f 93       	push	r25
     3c4:	8f 93       	push	r24
     3c6:	86 e9       	ldi	r24, 0x96	; 150
     3c8:	92 e0       	ldi	r25, 0x02	; 2
     3ca:	9f 93       	push	r25
     3cc:	8f 93       	push	r24
     3ce:	0e 94 aa 1c 	call	0x3954	; 0x3954 <printf>
	BMP280_SetOversampling(4);
     3d2:	84 e0       	ldi	r24, 0x04	; 4
     3d4:	90 e0       	ldi	r25, 0x00	; 0
     3d6:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <BMP280_SetOversampling>
	SPI_SlaveInit();
     3da:	c3 d2       	rcall	.+1414   	; 0x962 <SPI_SlaveInit>
	SensorDataCount = 0;
     3dc:	10 92 1e 0b 	sts	0x0B1E, r1
     3e0:	10 92 1d 0b 	sts	0x0B1D, r1
}

static void DEVICE_Init(void){
	
	init_parameter(&GP);
     3e4:	8f e1       	ldi	r24, 0x1F	; 31
     3e6:	9b e0       	ldi	r25, 0x0B	; 11
     3e8:	47 df       	rcall	.-370    	; 0x278 <init_parameter>
	
	init_timeoutq();
     3ea:	49 d6       	rcall	.+3218   	; 0x107e <init_timeoutq>
	init_timestamp(&cur_time);
     3ec:	8f e3       	ldi	r24, 0x3F	; 63
     3ee:	99 e0       	ldi	r25, 0x09	; 9
     3f0:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <init_timestamp>
	
	BMP280Sensor *BMP280_ptr = New_BMP280_Sensor( 0,2 );
     3f4:	62 e0       	ldi	r22, 0x02	; 2
     3f6:	70 e0       	ldi	r23, 0x00	; 0
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	90 e0       	ldi	r25, 0x00	; 0
     3fc:	0e 94 18 14 	call	0x2830	; 0x2830 <New_BMP280_Sensor>
     400:	8c 01       	movw	r16, r24
	printf("init success");
     402:	88 ea       	ldi	r24, 0xA8	; 168
     404:	92 e0       	ldi	r25, 0x02	; 2
     406:	9f 93       	push	r25
     408:	8f 93       	push	r24
     40a:	0e 94 aa 1c 	call	0x3954	; 0x3954 <printf>
	//delay_us(100);
	/*Si7020Sensor *Si_ptr = New_Si7020_Sensor(0,2); */
	K30Sensor *K30_ptr = New_K30_Sensor(0,1);
     40e:	61 e0       	ldi	r22, 0x01	; 1
     410:	70 e0       	ldi	r23, 0x00	; 0
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	da d0       	rcall	.+436    	; 0x5cc <New_K30_Sensor>
     418:	4c 01       	movw	r8, r24
	
	DemoStorageDevice *Strg_ptr = New_DemoStorage_Device(0);
     41a:	80 e0       	ldi	r24, 0x00	; 0
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	0e 94 61 12 	call	0x24c2	; 0x24c2 <New_DemoStorage_Device>
     422:	6c 01       	movw	r12, r24
	LoadDataDevice *Load_ptr = New_LoadData_Device(0,Strg_ptr);
     424:	bc 01       	movw	r22, r24
     426:	80 e0       	ldi	r24, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
     42a:	0e 94 3d 13 	call	0x267a	; 0x267a <New_LoadData_Device>
     42e:	5c 01       	movw	r10, r24
	
	init_Event_Timer();
     430:	63 d1       	rcall	.+710    	; 0x6f8 <init_Event_Timer>
	printf("init done!\n");
     432:	85 eb       	ldi	r24, 0xB5	; 181
     434:	92 e0       	ldi	r25, 0x02	; 2
     436:	0e 94 c2 1c 	call	0x3984	; 0x3984 <puts>
	
	/* load all sensors */
	load_new_sensor( GP.SensorList[BMP280].StartTime, GP.SensorList[BMP280].ExecutePeriod, (BaseSensor *)BMP280_ptr, 0 );
     43a:	cf e1       	ldi	r28, 0x1F	; 31
     43c:	db e0       	ldi	r29, 0x0B	; 11
     43e:	2c a1       	ldd	r18, Y+36	; 0x24
     440:	3d a1       	ldd	r19, Y+37	; 0x25
     442:	4e a1       	ldd	r20, Y+38	; 0x26
     444:	5f a1       	ldd	r21, Y+39	; 0x27
     446:	68 a1       	ldd	r22, Y+32	; 0x20
     448:	79 a1       	ldd	r23, Y+33	; 0x21
     44a:	8a a1       	ldd	r24, Y+34	; 0x22
     44c:	9b a1       	ldd	r25, Y+35	; 0x23
     44e:	e1 2c       	mov	r14, r1
     450:	f1 2c       	mov	r15, r1
     452:	cc d6       	rcall	.+3480   	; 0x11ec <load_new_sensor>
	/* load_new_sensor( GP.SensorList[Si7020].StartTime, GP.SensorList[Si7020].ExecutePeriod, (BaseSensor *)Si_ptr, 0 ); */
	load_new_sensor( GP.SensorList[K30].StartTime, GP.SensorList[K30].ExecutePeriod, (BaseSensor *)K30_ptr, 0 );
     454:	20 91 63 0b 	lds	r18, 0x0B63
     458:	30 91 64 0b 	lds	r19, 0x0B64
     45c:	40 91 65 0b 	lds	r20, 0x0B65
     460:	50 91 66 0b 	lds	r21, 0x0B66
     464:	60 91 5f 0b 	lds	r22, 0x0B5F
     468:	70 91 60 0b 	lds	r23, 0x0B60
     46c:	80 91 61 0b 	lds	r24, 0x0B61
     470:	90 91 62 0b 	lds	r25, 0x0B62
     474:	84 01       	movw	r16, r8
     476:	ba d6       	rcall	.+3444   	; 0x11ec <load_new_sensor>
	
	
	printf("%d\t%d\n",GP.DeviceList[DemoStorage].StartTime,GP.DeviceList[DemoStorage].ExecutePeriod);
     478:	8f 89       	ldd	r24, Y+23	; 0x17
     47a:	8f 93       	push	r24
     47c:	8e 89       	ldd	r24, Y+22	; 0x16
     47e:	8f 93       	push	r24
     480:	8d 89       	ldd	r24, Y+21	; 0x15
     482:	8f 93       	push	r24
     484:	8c 89       	ldd	r24, Y+20	; 0x14
     486:	8f 93       	push	r24
     488:	8b 89       	ldd	r24, Y+19	; 0x13
     48a:	8f 93       	push	r24
     48c:	8a 89       	ldd	r24, Y+18	; 0x12
     48e:	8f 93       	push	r24
     490:	89 89       	ldd	r24, Y+17	; 0x11
     492:	8f 93       	push	r24
     494:	88 89       	ldd	r24, Y+16	; 0x10
     496:	8f 93       	push	r24
     498:	20 ec       	ldi	r18, 0xC0	; 192
     49a:	32 e0       	ldi	r19, 0x02	; 2
     49c:	3f 93       	push	r19
     49e:	2f 93       	push	r18
     4a0:	0e 94 aa 1c 	call	0x3954	; 0x3954 <printf>
	/* load all ( non-sensor ) devices */
	load_new_device( GP.DeviceList[DemoLoadData].StartTime, GP.DeviceList[DemoLoadData].ExecutePeriod, (BaseDevice *)Load_ptr, 0 );
     4a4:	2c 81       	ldd	r18, Y+4	; 0x04
     4a6:	3d 81       	ldd	r19, Y+5	; 0x05
     4a8:	4e 81       	ldd	r20, Y+6	; 0x06
     4aa:	5f 81       	ldd	r21, Y+7	; 0x07
     4ac:	68 81       	ld	r22, Y
     4ae:	79 81       	ldd	r23, Y+1	; 0x01
     4b0:	8a 81       	ldd	r24, Y+2	; 0x02
     4b2:	9b 81       	ldd	r25, Y+3	; 0x03
     4b4:	85 01       	movw	r16, r10
     4b6:	dc d6       	rcall	.+3512   	; 0x1270 <load_new_device>
	load_new_device( GP.DeviceList[DemoStorage].StartTime, GP.DeviceList[DemoStorage].ExecutePeriod, (BaseDevice *)Strg_ptr, 0 );
     4b8:	2c 89       	ldd	r18, Y+20	; 0x14
     4ba:	3d 89       	ldd	r19, Y+21	; 0x15
     4bc:	4e 89       	ldd	r20, Y+22	; 0x16
     4be:	5f 89       	ldd	r21, Y+23	; 0x17
     4c0:	68 89       	ldd	r22, Y+16	; 0x10
     4c2:	79 89       	ldd	r23, Y+17	; 0x11
     4c4:	8a 89       	ldd	r24, Y+18	; 0x12
     4c6:	9b 89       	ldd	r25, Y+19	; 0x13
     4c8:	86 01       	movw	r16, r12
     4ca:	d2 d6       	rcall	.+3492   	; 0x1270 <load_new_device>
{
	SYS_Init();
	APP_Init();
	DEVICE_Init();

	init_set_timer( get_next_interval() );
     4cc:	22 d6       	rcall	.+3140   	; 0x1112 <get_next_interval>
     4ce:	0f d2       	rcall	.+1054   	; 0x8ee <init_set_timer>
	
	// Enable global interrupt //
	sei();
     4d0:	78 94       	sei
     4d2:	8d b7       	in	r24, 0x3d	; 61
     4d4:	9e b7       	in	r25, 0x3e	; 62
     4d6:	40 96       	adiw	r24, 0x10	; 16
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	f8 94       	cli
     4dc:	9e bf       	out	0x3e, r25	; 62
     4de:	0f be       	out	0x3f, r0	; 63
     4e0:	8d bf       	out	0x3d, r24	; 61

	for (;;){}
     4e2:	ff cf       	rjmp	.-2      	; 0x4e2 <main+0x148>

000004e4 <K30_FctnInit>:
	K30_getType
};

void K30_FctnInit(K30Sensor *this)
{
	this->inherited.vmt = &K30_vmt;
     4e4:	2a e4       	ldi	r18, 0x4A	; 74
     4e6:	32 e0       	ldi	r19, 0x02	; 2
     4e8:	fc 01       	movw	r30, r24
     4ea:	35 87       	std	Z+13, r19	; 0x0d
     4ec:	24 87       	std	Z+12, r18	; 0x0c
     4ee:	08 95       	ret

000004f0 <K30_Configure>:

int K30_Configure(K30Sensor *this )
{
	// virtual function
	return 0;
}
     4f0:	80 e0       	ldi	r24, 0x00	; 0
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	08 95       	ret

000004f6 <K30_Error>:

int K30_Error(K30Sensor *this )
{
	// virtual function
	return 0;
}
     4f6:	80 e0       	ldi	r24, 0x00	; 0
     4f8:	90 e0       	ldi	r25, 0x00	; 0
     4fa:	08 95       	ret

000004fc <K30_VTinit>:
void K30_VTinit( K30Sensor* this)
{
	this->inherited.abstract.device_vt = &K30_abstract_vmt;
     4fc:	22 e4       	ldi	r18, 0x42	; 66
     4fe:	32 e0       	ldi	r19, 0x02	; 2
     500:	fc 01       	movw	r30, r24
     502:	31 83       	std	Z+1, r19	; 0x01
     504:	20 83       	st	Z, r18
     506:	08 95       	ret

00000508 <K30_reset>:

int K30_reset( K30Sensor* this)
{
	// virtual function
	return 0;
}
     508:	80 e0       	ldi	r24, 0x00	; 0
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	08 95       	ret

0000050e <K30_getType>:

int K30_getType(K30Sensor* this)
{
	return TYPE_SENSOR;
}
     50e:	83 e0       	ldi	r24, 0x03	; 3
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	08 95       	ret

00000514 <K30_Request>:
	int sum=0;
	
	char status;
	//printf("K30_readCO2");
	unsigned char buffer[4]={0,0,0,0};
	status=TWI_BeginWrite(0x68);
     514:	88 e6       	ldi	r24, 0x68	; 104
     516:	55 d2       	rcall	.+1194   	; 0x9c2 <TWI_BeginWrite>
	if(status!=TWI_SLAW_ACK) return 0;
     518:	88 31       	cpi	r24, 0x18	; 24
     51a:	71 f4       	brne	.+28     	; 0x538 <K30_Request+0x24>
	status=TWI_Write(&readcmd[0],4);
     51c:	64 e0       	ldi	r22, 0x04	; 4
     51e:	70 e0       	ldi	r23, 0x00	; 0
     520:	84 e5       	ldi	r24, 0x54	; 84
     522:	92 e0       	ldi	r25, 0x02	; 2
     524:	e0 d2       	rcall	.+1472   	; 0xae6 <TWI_Write>
	if(status!=TWI_SENT_ACK) return 0;
     526:	88 32       	cpi	r24, 0x28	; 40
     528:	39 f4       	brne	.+14     	; 0x538 <K30_Request+0x24>
	TWI_Stop();
     52a:	9e d2       	rcall	.+1340   	; 0xa68 <TWI_Stop>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     52c:	8f e3       	ldi	r24, 0x3F	; 63
     52e:	9c e9       	ldi	r25, 0x9C	; 156
     530:	01 97       	sbiw	r24, 0x01	; 1
     532:	f1 f7       	brne	.-4      	; 0x530 <K30_Request+0x1c>
     534:	00 c0       	rjmp	.+0      	; 0x536 <K30_Request+0x22>
     536:	00 00       	nop
	_delay_ms(10);
	return 0;
}
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	08 95       	ret

0000053e <K30_Collect>:

int K30_Collect(K30Sensor *this )
{
     53e:	cf 93       	push	r28
     540:	df 93       	push	r29
     542:	00 d0       	rcall	.+0      	; 0x544 <K30_Collect+0x6>
     544:	1f 92       	push	r1
     546:	cd b7       	in	r28, 0x3d	; 61
     548:	de b7       	in	r29, 0x3e	; 62
	int val=0;
	int sum=0;
	
	char status;
	//printf("K30_readCO2");
	unsigned char buffer[4]={0,0,0,0};
     54a:	19 82       	std	Y+1, r1	; 0x01
     54c:	1a 82       	std	Y+2, r1	; 0x02
     54e:	1b 82       	std	Y+3, r1	; 0x03
     550:	1c 82       	std	Y+4, r1	; 0x04
	status=TWI_BeginRead(0x68);
     552:	88 e6       	ldi	r24, 0x68	; 104
     554:	52 d2       	rcall	.+1188   	; 0x9fa <TWI_BeginRead>
	if(status!=TWI_SLAR_ACK) return 0;
     556:	80 34       	cpi	r24, 0x40	; 64
     558:	f1 f4       	brne	.+60     	; 0x596 <K30_Collect+0x58>
	status=TWI_Read(&buffer[0],4,true);
     55a:	41 e0       	ldi	r20, 0x01	; 1
     55c:	64 e0       	ldi	r22, 0x04	; 4
     55e:	70 e0       	ldi	r23, 0x00	; 0
     560:	ce 01       	movw	r24, r28
     562:	01 96       	adiw	r24, 0x01	; 1
     564:	86 d2       	rcall	.+1292   	; 0xa72 <TWI_Read>
	if(status!=TWI_REC_ACK) return 0;
     566:	80 35       	cpi	r24, 0x50	; 80
     568:	c9 f4       	brne	.+50     	; 0x59c <K30_Collect+0x5e>
	TWI_Stop();
     56a:	7e d2       	rcall	.+1276   	; 0xa68 <TWI_Stop>
	
	val = 0;
	val |= buffer[1] & 0xFF;
     56c:	8a 81       	ldd	r24, Y+2	; 0x02
     56e:	90 e0       	ldi	r25, 0x00	; 0
	val = val << 8;
	val |= buffer[2] & 0xFF;
     570:	2b 81       	ldd	r18, Y+3	; 0x03
     572:	30 e0       	ldi	r19, 0x00	; 0
	sum = buffer[0] + buffer[1] + buffer[2];
	if(sum==buffer[3]){return val;}
     574:	6c 81       	ldd	r22, Y+4	; 0x04
     576:	70 e0       	ldi	r23, 0x00	; 0
	
	val = 0;
	val |= buffer[1] & 0xFF;
	val = val << 8;
	val |= buffer[2] & 0xFF;
	sum = buffer[0] + buffer[1] + buffer[2];
     578:	49 81       	ldd	r20, Y+1	; 0x01
     57a:	fc 01       	movw	r30, r24
     57c:	e4 0f       	add	r30, r20
     57e:	f1 1d       	adc	r31, r1
     580:	af 01       	movw	r20, r30
     582:	42 0f       	add	r20, r18
     584:	53 1f       	adc	r21, r19
	if(sum==buffer[3]){return val;}
     586:	64 17       	cp	r22, r20
     588:	75 07       	cpc	r23, r21
     58a:	59 f4       	brne	.+22     	; 0x5a2 <K30_Collect+0x64>
	if(status!=TWI_REC_ACK) return 0;
	TWI_Stop();
	
	val = 0;
	val |= buffer[1] & 0xFF;
	val = val << 8;
     58c:	98 2f       	mov	r25, r24
     58e:	88 27       	eor	r24, r24
	val |= buffer[2] & 0xFF;
	sum = buffer[0] + buffer[1] + buffer[2];
	if(sum==buffer[3]){return val;}
     590:	82 2b       	or	r24, r18
     592:	93 2b       	or	r25, r19
     594:	08 c0       	rjmp	.+16     	; 0x5a6 <K30_Collect+0x68>
	
	char status;
	//printf("K30_readCO2");
	unsigned char buffer[4]={0,0,0,0};
	status=TWI_BeginRead(0x68);
	if(status!=TWI_SLAR_ACK) return 0;
     596:	80 e0       	ldi	r24, 0x00	; 0
     598:	90 e0       	ldi	r25, 0x00	; 0
     59a:	05 c0       	rjmp	.+10     	; 0x5a6 <K30_Collect+0x68>
	status=TWI_Read(&buffer[0],4,true);
	if(status!=TWI_REC_ACK) return 0;
     59c:	80 e0       	ldi	r24, 0x00	; 0
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <K30_Collect+0x68>
	val |= buffer[1] & 0xFF;
	val = val << 8;
	val |= buffer[2] & 0xFF;
	sum = buffer[0] + buffer[1] + buffer[2];
	if(sum==buffer[3]){return val;}
	else{return 0;}
     5a2:	80 e0       	ldi	r24, 0x00	; 0
     5a4:	90 e0       	ldi	r25, 0x00	; 0
}
     5a6:	0f 90       	pop	r0
     5a8:	0f 90       	pop	r0
     5aa:	0f 90       	pop	r0
     5ac:	0f 90       	pop	r0
     5ae:	df 91       	pop	r29
     5b0:	cf 91       	pop	r28
     5b2:	08 95       	ret

000005b4 <K30_init>:
	this->inherited.abstract.device_vt = &K30_abstract_vmt;
}

int K30_init( K30Sensor* this)
{
	TWI_Init(200000);
     5b4:	60 e4       	ldi	r22, 0x40	; 64
     5b6:	7d e0       	ldi	r23, 0x0D	; 13
     5b8:	83 e0       	ldi	r24, 0x03	; 3
     5ba:	90 e0       	ldi	r25, 0x00	; 0
     5bc:	d6 d1       	rcall	.+940    	; 0x96a <TWI_Init>
	printf("K30 Sensor Init\n");
     5be:	87 ec       	ldi	r24, 0xC7	; 199
     5c0:	92 e0       	ldi	r25, 0x02	; 2
     5c2:	0e 94 c2 1c 	call	0x3984	; 0x3984 <puts>
	return 0;
}
     5c6:	80 e0       	ldi	r24, 0x00	; 0
     5c8:	90 e0       	ldi	r25, 0x00	; 0
     5ca:	08 95       	ret

000005cc <New_K30_Sensor>:
	return TYPE_SENSOR;
}


K30Sensor* New_K30_Sensor( int num, int NumData)
{
     5cc:	ef 92       	push	r14
     5ce:	ff 92       	push	r15
     5d0:	0f 93       	push	r16
     5d2:	1f 93       	push	r17
     5d4:	cf 93       	push	r28
     5d6:	df 93       	push	r29
     5d8:	7c 01       	movw	r14, r24
     5da:	8b 01       	movw	r16, r22
	K30Sensor *p = malloc(sizeof(K30Sensor));
     5dc:	8e e0       	ldi	r24, 0x0E	; 14
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	0e 94 57 1a 	call	0x34ae	; 0x34ae <malloc>
     5e4:	ec 01       	movw	r28, r24
	// virtual function
	return 0;
}
void K30_VTinit( K30Sensor* this)
{
	this->inherited.abstract.device_vt = &K30_abstract_vmt;
     5e6:	82 e4       	ldi	r24, 0x42	; 66
     5e8:	92 e0       	ldi	r25, 0x02	; 2
     5ea:	99 83       	std	Y+1, r25	; 0x01
     5ec:	88 83       	st	Y, r24
	K30_getType
};

void K30_FctnInit(K30Sensor *this)
{
	this->inherited.vmt = &K30_vmt;
     5ee:	8a e4       	ldi	r24, 0x4A	; 74
     5f0:	92 e0       	ldi	r25, 0x02	; 2
     5f2:	9d 87       	std	Y+13, r25	; 0x0d
     5f4:	8c 87       	std	Y+12, r24	; 0x0c
K30Sensor* New_K30_Sensor( int num, int NumData)
{
	K30Sensor *p = malloc(sizeof(K30Sensor));
	K30_VTinit( p );
	K30_FctnInit( p );
	p->inherited.getStartNum = fctn_getStartNum;
     5f6:	8b ed       	ldi	r24, 0xDB	; 219
     5f8:	9c e0       	ldi	r25, 0x0C	; 12
     5fa:	99 87       	std	Y+9, r25	; 0x09
     5fc:	88 87       	std	Y+8, r24	; 0x08
	p->inherited.getEndNum = fctn_getEndNum;
     5fe:	8f ed       	ldi	r24, 0xDF	; 223
     600:	9c e0       	ldi	r25, 0x0C	; 12
     602:	9b 87       	std	Y+11, r25	; 0x0b
     604:	8a 87       	std	Y+10, r24	; 0x0a
	
	p->inherited.test_num = num;
     606:	fb 82       	std	Y+3, r15	; 0x03
     608:	ea 82       	std	Y+2, r14	; 0x02
	p->inherited.NumOfData = NumData;
     60a:	1f 83       	std	Y+7, r17	; 0x07
     60c:	0e 83       	std	Y+6, r16	; 0x06
	p->inherited.StartNum = SensorDataCount;
     60e:	80 91 1d 0b 	lds	r24, 0x0B1D
     612:	90 91 1e 0b 	lds	r25, 0x0B1E
     616:	9d 83       	std	Y+5, r25	; 0x05
     618:	8c 83       	std	Y+4, r24	; 0x04
	SensorDataCount += NumData;
     61a:	b8 01       	movw	r22, r16
     61c:	68 0f       	add	r22, r24
     61e:	79 1f       	adc	r23, r25
     620:	70 93 1e 0b 	sts	0x0B1E, r23
     624:	60 93 1d 0b 	sts	0x0B1D, r22
	printf("SensorDataCount %d\n",SensorDataCount);
     628:	7f 93       	push	r23
     62a:	6f 93       	push	r22
     62c:	87 ed       	ldi	r24, 0xD7	; 215
     62e:	92 e0       	ldi	r25, 0x02	; 2
     630:	9f 93       	push	r25
     632:	8f 93       	push	r24
     634:	0e 94 aa 1c 	call	0x3954	; 0x3954 <printf>
	
	return p;
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	0f 90       	pop	r0
     63e:	0f 90       	pop	r0
}
     640:	ce 01       	movw	r24, r28
     642:	df 91       	pop	r29
     644:	cf 91       	pop	r28
     646:	1f 91       	pop	r17
     648:	0f 91       	pop	r16
     64a:	ff 90       	pop	r15
     64c:	ef 90       	pop	r14
     64e:	08 95       	ret

00000650 <ADC_Init>:

/*************************************************************************//**
  @brief Initializes the ADC
*****************************************************************************/
void ADC_Init(void) {
	ADCSRA = (1<<ADEN)|(4<<ADPS0); //enables the ADC module, CPU clock prescale=16
     650:	84 e8       	ldi	r24, 0x84	; 132
     652:	80 93 7a 00 	sts	0x007A, r24
	
	ADCSRC = 0x05|(1<<ADTHT0)|(1<<ADTHT1); //ADSUT=5
     656:	85 ec       	ldi	r24, 0xC5	; 197
     658:	80 93 77 00 	sts	0x0077, r24
	while((ADCSRB&(1<<AVDDOK))==0);
     65c:	eb e7       	ldi	r30, 0x7B	; 123
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	80 81       	ld	r24, Z
     662:	88 23       	and	r24, r24
     664:	ec f7       	brge	.-6      	; 0x660 <ADC_Init+0x10>
}
     666:	08 95       	ret

00000668 <__vector_15>:

/*************************************************************************//**
  @brief Timer Interrupt Service Routine
*****************************************************************************/
ISR(TIMER2_OVF_vect)
{
     668:	1f 92       	push	r1
     66a:	0f 92       	push	r0
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	0f 92       	push	r0
     670:	11 24       	eor	r1, r1
     672:	0b b6       	in	r0, 0x3b	; 59
     674:	0f 92       	push	r0
     676:	2f 93       	push	r18
     678:	3f 93       	push	r19
     67a:	4f 93       	push	r20
     67c:	5f 93       	push	r21
     67e:	6f 93       	push	r22
     680:	7f 93       	push	r23
     682:	8f 93       	push	r24
     684:	9f 93       	push	r25
     686:	af 93       	push	r26
     688:	bf 93       	push	r27
     68a:	ef 93       	push	r30
     68c:	ff 93       	push	r31
	timer_usage ++;
     68e:	80 91 0c 06 	lds	r24, 0x060C
     692:	90 91 0d 06 	lds	r25, 0x060D
     696:	01 96       	adiw	r24, 0x01	; 1
     698:	90 93 0d 06 	sts	0x060D, r25
     69c:	80 93 0c 06 	sts	0x060C, r24
	// printf("count1 = %d\n",timer_usage);
	printf("Timestamp : %ld\n",(TimeStamp));
     6a0:	80 91 0b 06 	lds	r24, 0x060B
     6a4:	8f 93       	push	r24
     6a6:	80 91 0a 06 	lds	r24, 0x060A
     6aa:	8f 93       	push	r24
     6ac:	80 91 09 06 	lds	r24, 0x0609
     6b0:	8f 93       	push	r24
     6b2:	80 91 08 06 	lds	r24, 0x0608
     6b6:	8f 93       	push	r24
     6b8:	8b ee       	ldi	r24, 0xEB	; 235
     6ba:	92 e0       	ldi	r25, 0x02	; 2
     6bc:	9f 93       	push	r25
     6be:	8f 93       	push	r24
     6c0:	0e 94 aa 1c 	call	0x3954	; 0x3954 <printf>
	handle_timeoutq_event();	
     6c4:	19 d6       	rcall	.+3122   	; 0x12f8 <handle_timeoutq_event>
     6c6:	0f 90       	pop	r0
     6c8:	0f 90       	pop	r0
     6ca:	0f 90       	pop	r0
     6cc:	0f 90       	pop	r0
     6ce:	0f 90       	pop	r0
     6d0:	0f 90       	pop	r0
}
     6d2:	ff 91       	pop	r31
     6d4:	ef 91       	pop	r30
     6d6:	bf 91       	pop	r27
     6d8:	af 91       	pop	r26
     6da:	9f 91       	pop	r25
     6dc:	8f 91       	pop	r24
     6de:	7f 91       	pop	r23
     6e0:	6f 91       	pop	r22
     6e2:	5f 91       	pop	r21
     6e4:	4f 91       	pop	r20
     6e6:	3f 91       	pop	r19
     6e8:	2f 91       	pop	r18
     6ea:	0f 90       	pop	r0
     6ec:	0b be       	out	0x3b, r0	; 59
     6ee:	0f 90       	pop	r0
     6f0:	0f be       	out	0x3f, r0	; 63
     6f2:	0f 90       	pop	r0
     6f4:	1f 90       	pop	r1
     6f6:	18 95       	reti

000006f8 <init_Event_Timer>:

/* Initialization Routine Example 3 : Timer 2 Async operation */
/* Clock for Timer 2 is taken from crystal connected to TOSC pins */
void init_Event_Timer(void)
{
	TimeStamp = 0;
     6f8:	10 92 08 06 	sts	0x0608, r1
     6fc:	10 92 09 06 	sts	0x0609, r1
     700:	10 92 0a 06 	sts	0x060A, r1
     704:	10 92 0b 06 	sts	0x060B, r1
	timer_usage = 0;
     708:	10 92 0d 06 	sts	0x060D, r1
     70c:	10 92 0c 06 	sts	0x060C, r1
	/* Select clock source as crystal on TOSCn pins */
	ASSR |= 1 << AS2;
     710:	e6 eb       	ldi	r30, 0xB6	; 182
     712:	f0 e0       	ldi	r31, 0x00	; 0
     714:	80 81       	ld	r24, Z
     716:	80 62       	ori	r24, 0x20	; 32
     718:	80 83       	st	Z, r24
	
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
     71a:	80 81       	ld	r24, Z
     71c:	8f 71       	andi	r24, 0x1F	; 31
     71e:	e9 f7       	brne	.-6      	; 0x71a <init_Event_Timer+0x22>
	
	/* Stop timer 2 */
	TCCR2B = 0x00;
     720:	10 92 b1 00 	sts	0x00B1, r1
     724:	08 95       	ret

00000726 <general_set_timer>:
	// TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
}


void general_set_timer( int32_t period_number )
{
     726:	cf 92       	push	r12
     728:	df 92       	push	r13
     72a:	ef 92       	push	r14
     72c:	ff 92       	push	r15
     72e:	6b 01       	movw	r12, r22
     730:	7c 01       	movw	r14, r24
	// printf("debug %d\n",period_number);
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
     732:	e6 eb       	ldi	r30, 0xB6	; 182
     734:	f0 e0       	ldi	r31, 0x00	; 0
     736:	80 81       	ld	r24, Z
     738:	8f 71       	andi	r24, 0x1F	; 31
     73a:	e9 f7       	brne	.-6      	; 0x736 <general_set_timer+0x10>
	/* Stop timer 2 */
	TCCR2B = 0x00;
     73c:	10 92 b1 00 	sts	0x00B1, r1
	
	
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
     740:	e6 eb       	ldi	r30, 0xB6	; 182
     742:	f0 e0       	ldi	r31, 0x00	; 0
     744:	80 81       	ld	r24, Z
     746:	8f 71       	andi	r24, 0x1F	; 31
     748:	e9 f7       	brne	.-6      	; 0x744 <general_set_timer+0x1e>
	 *  1    1    0     256		2s/256
	 *  1    1    1    1024		8s/256
	 */
	// Resolution
	// 0.25s/256
	if( period_number <= 250 )
     74a:	8b ef       	ldi	r24, 0xFB	; 251
     74c:	c8 16       	cp	r12, r24
     74e:	d1 04       	cpc	r13, r1
     750:	e1 04       	cpc	r14, r1
     752:	f1 04       	cpc	r15, r1
     754:	ec f4       	brge	.+58     	; 0x790 <general_set_timer+0x6a>
	{
		temp = 256 - (int32_t) ( 256.0/250.0 * period_number);
     756:	c7 01       	movw	r24, r14
     758:	b6 01       	movw	r22, r12
     75a:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__floatsisf>
     75e:	2f e6       	ldi	r18, 0x6F	; 111
     760:	32 e1       	ldi	r19, 0x12	; 18
     762:	43 e8       	ldi	r20, 0x83	; 131
     764:	5f e3       	ldi	r21, 0x3F	; 63
     766:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <__mulsf3>
     76a:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
     76e:	20 e0       	ldi	r18, 0x00	; 0
     770:	31 e0       	ldi	r19, 0x01	; 1
     772:	c9 01       	movw	r24, r18
     774:	86 1b       	sub	r24, r22
     776:	97 0b       	sbc	r25, r23
     778:	8f 3f       	cpi	r24, 0xFF	; 255
     77a:	91 05       	cpc	r25, r1
     77c:	19 f0       	breq	.+6      	; 0x784 <general_set_timer+0x5e>
     77e:	14 f0       	brlt	.+4      	; 0x784 <general_set_timer+0x5e>
     780:	8f ef       	ldi	r24, 0xFF	; 255
     782:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     784:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS21)|(1<<CS20);
     788:	83 e0       	ldi	r24, 0x03	; 3
     78a:	80 93 b1 00 	sts	0x00B1, r24
     78e:	94 c0       	rjmp	.+296    	; 0x8b8 <general_set_timer+0x192>
	}
	// Resolution
	// 0.5s/256
	else if ( period_number <= 500 )
     790:	85 ef       	ldi	r24, 0xF5	; 245
     792:	c8 16       	cp	r12, r24
     794:	81 e0       	ldi	r24, 0x01	; 1
     796:	d8 06       	cpc	r13, r24
     798:	e1 04       	cpc	r14, r1
     79a:	f1 04       	cpc	r15, r1
     79c:	ec f4       	brge	.+58     	; 0x7d8 <general_set_timer+0xb2>
	{
		temp = 256 - (int32_t) ( 256.0/500.0 * period_number);
     79e:	c7 01       	movw	r24, r14
     7a0:	b6 01       	movw	r22, r12
     7a2:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__floatsisf>
     7a6:	2f e6       	ldi	r18, 0x6F	; 111
     7a8:	32 e1       	ldi	r19, 0x12	; 18
     7aa:	43 e0       	ldi	r20, 0x03	; 3
     7ac:	5f e3       	ldi	r21, 0x3F	; 63
     7ae:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <__mulsf3>
     7b2:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	31 e0       	ldi	r19, 0x01	; 1
     7ba:	c9 01       	movw	r24, r18
     7bc:	86 1b       	sub	r24, r22
     7be:	97 0b       	sbc	r25, r23
     7c0:	8f 3f       	cpi	r24, 0xFF	; 255
     7c2:	91 05       	cpc	r25, r1
     7c4:	19 f0       	breq	.+6      	; 0x7cc <general_set_timer+0xa6>
     7c6:	14 f0       	brlt	.+4      	; 0x7cc <general_set_timer+0xa6>
     7c8:	8f ef       	ldi	r24, 0xFF	; 255
     7ca:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     7cc:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22);
     7d0:	84 e0       	ldi	r24, 0x04	; 4
     7d2:	80 93 b1 00 	sts	0x00B1, r24
     7d6:	70 c0       	rjmp	.+224    	; 0x8b8 <general_set_timer+0x192>
	}
	// Resolution
	// 1s/256
	else if ( period_number <= 1000 )
     7d8:	89 ee       	ldi	r24, 0xE9	; 233
     7da:	c8 16       	cp	r12, r24
     7dc:	83 e0       	ldi	r24, 0x03	; 3
     7de:	d8 06       	cpc	r13, r24
     7e0:	e1 04       	cpc	r14, r1
     7e2:	f1 04       	cpc	r15, r1
     7e4:	ec f4       	brge	.+58     	; 0x820 <general_set_timer+0xfa>
	{
		temp = 256 - (int32_t) ( 256.0/1000.0 * period_number);
     7e6:	c7 01       	movw	r24, r14
     7e8:	b6 01       	movw	r22, r12
     7ea:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__floatsisf>
     7ee:	2f e6       	ldi	r18, 0x6F	; 111
     7f0:	32 e1       	ldi	r19, 0x12	; 18
     7f2:	43 e8       	ldi	r20, 0x83	; 131
     7f4:	5e e3       	ldi	r21, 0x3E	; 62
     7f6:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <__mulsf3>
     7fa:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
     7fe:	20 e0       	ldi	r18, 0x00	; 0
     800:	31 e0       	ldi	r19, 0x01	; 1
     802:	c9 01       	movw	r24, r18
     804:	86 1b       	sub	r24, r22
     806:	97 0b       	sbc	r25, r23
     808:	8f 3f       	cpi	r24, 0xFF	; 255
     80a:	91 05       	cpc	r25, r1
     80c:	19 f0       	breq	.+6      	; 0x814 <general_set_timer+0xee>
     80e:	14 f0       	brlt	.+4      	; 0x814 <general_set_timer+0xee>
     810:	8f ef       	ldi	r24, 0xFF	; 255
     812:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     814:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS20);	
     818:	85 e0       	ldi	r24, 0x05	; 5
     81a:	80 93 b1 00 	sts	0x00B1, r24
     81e:	4c c0       	rjmp	.+152    	; 0x8b8 <general_set_timer+0x192>
	}
	// Resolution
	// 2s/256
	else if ( period_number <= 2000 )
     820:	81 ed       	ldi	r24, 0xD1	; 209
     822:	c8 16       	cp	r12, r24
     824:	87 e0       	ldi	r24, 0x07	; 7
     826:	d8 06       	cpc	r13, r24
     828:	e1 04       	cpc	r14, r1
     82a:	f1 04       	cpc	r15, r1
     82c:	ec f4       	brge	.+58     	; 0x868 <general_set_timer+0x142>
	{
		temp = 256 - (int32_t) ( 256.0/2000.0 * period_number);
     82e:	c7 01       	movw	r24, r14
     830:	b6 01       	movw	r22, r12
     832:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__floatsisf>
     836:	2f e6       	ldi	r18, 0x6F	; 111
     838:	32 e1       	ldi	r19, 0x12	; 18
     83a:	43 e0       	ldi	r20, 0x03	; 3
     83c:	5e e3       	ldi	r21, 0x3E	; 62
     83e:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <__mulsf3>
     842:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
     846:	20 e0       	ldi	r18, 0x00	; 0
     848:	31 e0       	ldi	r19, 0x01	; 1
     84a:	c9 01       	movw	r24, r18
     84c:	86 1b       	sub	r24, r22
     84e:	97 0b       	sbc	r25, r23
     850:	8f 3f       	cpi	r24, 0xFF	; 255
     852:	91 05       	cpc	r25, r1
     854:	19 f0       	breq	.+6      	; 0x85c <general_set_timer+0x136>
     856:	14 f0       	brlt	.+4      	; 0x85c <general_set_timer+0x136>
     858:	8f ef       	ldi	r24, 0xFF	; 255
     85a:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     85c:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS21);	
     860:	86 e0       	ldi	r24, 0x06	; 6
     862:	80 93 b1 00 	sts	0x00B1, r24
     866:	28 c0       	rjmp	.+80     	; 0x8b8 <general_set_timer+0x192>
	}
	// Resolution
	// 8s/256
	else if ( period_number <= 8000 )
     868:	81 e4       	ldi	r24, 0x41	; 65
     86a:	c8 16       	cp	r12, r24
     86c:	8f e1       	ldi	r24, 0x1F	; 31
     86e:	d8 06       	cpc	r13, r24
     870:	e1 04       	cpc	r14, r1
     872:	f1 04       	cpc	r15, r1
     874:	ec f4       	brge	.+58     	; 0x8b0 <general_set_timer+0x18a>
	{
		t = (int32_t) ( 256.0/8000.0 * period_number);
     876:	c7 01       	movw	r24, r14
     878:	b6 01       	movw	r22, r12
     87a:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <__floatsisf>
     87e:	2f e6       	ldi	r18, 0x6F	; 111
     880:	32 e1       	ldi	r19, 0x12	; 18
     882:	43 e0       	ldi	r20, 0x03	; 3
     884:	5d e3       	ldi	r21, 0x3D	; 61
     886:	0e 94 0f 16 	call	0x2c1e	; 0x2c1e <__mulsf3>
     88a:	0e 94 28 15 	call	0x2a50	; 0x2a50 <__fixsfsi>
		temp = 256 - t;
		temp = temp > 255 ? 255 : temp ;
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	31 e0       	ldi	r19, 0x01	; 1
     892:	c9 01       	movw	r24, r18
     894:	86 1b       	sub	r24, r22
     896:	97 0b       	sbc	r25, r23
     898:	8f 3f       	cpi	r24, 0xFF	; 255
     89a:	91 05       	cpc	r25, r1
     89c:	19 f0       	breq	.+6      	; 0x8a4 <general_set_timer+0x17e>
     89e:	14 f0       	brlt	.+4      	; 0x8a4 <general_set_timer+0x17e>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     8a4:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
     8a8:	87 e0       	ldi	r24, 0x07	; 7
     8aa:	80 93 b1 00 	sts	0x00B1, r24
     8ae:	04 c0       	rjmp	.+8      	; 0x8b8 <general_set_timer+0x192>
	}
	else
	{
		printf("Timer exceeds max\n");
     8b0:	8c ef       	ldi	r24, 0xFC	; 252
     8b2:	92 e0       	ldi	r25, 0x02	; 2
     8b4:	0e 94 c2 1c 	call	0x3984	; 0x3984 <puts>
	}

	/* start timer 2 */
	TCCR2A = 0x00;
     8b8:	10 92 b0 00 	sts	0x00B0, r1
	TimeStamp += period_number;
     8bc:	80 91 08 06 	lds	r24, 0x0608
     8c0:	90 91 09 06 	lds	r25, 0x0609
     8c4:	a0 91 0a 06 	lds	r26, 0x060A
     8c8:	b0 91 0b 06 	lds	r27, 0x060B
     8cc:	c8 0e       	add	r12, r24
     8ce:	d9 1e       	adc	r13, r25
     8d0:	ea 1e       	adc	r14, r26
     8d2:	fb 1e       	adc	r15, r27
     8d4:	c0 92 08 06 	sts	0x0608, r12
     8d8:	d0 92 09 06 	sts	0x0609, r13
     8dc:	e0 92 0a 06 	sts	0x060A, r14
     8e0:	f0 92 0b 06 	sts	0x060B, r15
}
     8e4:	ff 90       	pop	r15
     8e6:	ef 90       	pop	r14
     8e8:	df 90       	pop	r13
     8ea:	cf 90       	pop	r12
     8ec:	08 95       	ret

000008ee <init_set_timer>:

void init_set_timer( int32_t period_number )
{
    general_set_timer( period_number );
     8ee:	1b df       	rcall	.-458    	; 0x726 <general_set_timer>
	/* Clear pending interrupts */
	TIFR2  = (1 << TOV2) | (1 << OCF2A) | (1 << OCF2B);
     8f0:	87 e0       	ldi	r24, 0x07	; 7
     8f2:	87 bb       	out	0x17, r24	; 23
	/* Enable Overflow Interrupt */
	TIMSK2 = 1<<TOIE2;
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	80 93 70 00 	sts	0x0070, r24
     8fa:	08 95       	ret

000008fc <set_timer>:

}

void set_timer( int32_t period_number )
{
     8fc:	cf 92       	push	r12
     8fe:	df 92       	push	r13
     900:	ef 92       	push	r14
     902:	ff 92       	push	r15
     904:	6b 01       	movw	r12, r22
     906:	7c 01       	movw	r14, r24
	printf("set timer gap = %ld\n\n", period_number);
     908:	ff 92       	push	r15
     90a:	ef 92       	push	r14
     90c:	df 92       	push	r13
     90e:	6f 93       	push	r22
     910:	8e e0       	ldi	r24, 0x0E	; 14
     912:	93 e0       	ldi	r25, 0x03	; 3
     914:	9f 93       	push	r25
     916:	8f 93       	push	r24
     918:	0e 94 aa 1c 	call	0x3954	; 0x3954 <printf>
	if( period_number == 0)
     91c:	0f 90       	pop	r0
     91e:	0f 90       	pop	r0
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	c1 14       	cp	r12, r1
     92a:	d1 04       	cpc	r13, r1
     92c:	e1 04       	cpc	r14, r1
     92e:	f1 04       	cpc	r15, r1
     930:	69 f0       	breq	.+26     	; 0x94c <set_timer+0x50>
	{
		/* we won't every set a zero timeout, will we ? */
		return;
	}
    if( timer_usage == 0 )
     932:	80 91 0c 06 	lds	r24, 0x060C
     936:	90 91 0d 06 	lds	r25, 0x060D
     93a:	89 2b       	or	r24, r25
     93c:	21 f4       	brne	.+8      	; 0x946 <set_timer+0x4a>
    {
        init_set_timer( period_number );
     93e:	c7 01       	movw	r24, r14
     940:	b6 01       	movw	r22, r12
     942:	d5 df       	rcall	.-86     	; 0x8ee <init_set_timer>
     944:	03 c0       	rjmp	.+6      	; 0x94c <set_timer+0x50>
    }
    else
    {
        general_set_timer( period_number );
     946:	c7 01       	movw	r24, r14
     948:	b6 01       	movw	r22, r12
     94a:	ed de       	rcall	.-550    	; 0x726 <general_set_timer>
    }
}	
     94c:	ff 90       	pop	r15
     94e:	ef 90       	pop	r14
     950:	df 90       	pop	r13
     952:	cf 90       	pop	r12
     954:	08 95       	ret

00000956 <PWR_Init>:

/*************************************************************************//**
  @brief Initializes the power management system
*****************************************************************************/
void PWR_Init(void){
	DDRD |= 0b11000000;
     956:	8a b1       	in	r24, 0x0a	; 10
     958:	80 6c       	ori	r24, 0xC0	; 192
     95a:	8a b9       	out	0x0a, r24	; 10
     95c:	08 95       	ret

0000095e <PWR_TurnOn5V>:

/*************************************************************************//**
  @brief Turns on the 5V power supply
*****************************************************************************/
void PWR_TurnOn5V(void){
	PORTD |= 0b10000000;
     95e:	5f 9a       	sbi	0x0b, 7	; 11
     960:	08 95       	ret

00000962 <SPI_SlaveInit>:

unsigned char buffer[16];

void SPI_SlaveInit(void)
{
	DDRB |= (1<<PORTB3); //Set MISO output
     962:	23 9a       	sbi	0x04, 3	; 4
	SPCR = (1<<SPE); //Enable SPI
     964:	80 e4       	ldi	r24, 0x40	; 64
     966:	8c bd       	out	0x2c, r24	; 44
     968:	08 95       	ret

0000096a <TWI_Init>:
/*************************************************************************//**
  @brief Initializes the 2-wire Serial Interface as a master
  @param[in] freq SCL frequency (Do not exceed 400kHz)
  @return Status (@c 0 on failure, nonzero otherwise)
*****************************************************************************/
char TWI_Init(unsigned long freq){
     96a:	9b 01       	movw	r18, r22
     96c:	ac 01       	movw	r20, r24
	//printf("TWI_Init");
	TWSR=0x00;
     96e:	10 92 b9 00 	sts	0x00B9, r1
	TWBR=(unsigned char)(((F_CPU/freq)-16UL)/8UL); //Compute settings value and set frequency
     972:	60 e0       	ldi	r22, 0x00	; 0
     974:	74 e2       	ldi	r23, 0x24	; 36
     976:	84 ef       	ldi	r24, 0xF4	; 244
     978:	90 e0       	ldi	r25, 0x00	; 0
     97a:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <__udivmodsi4>
     97e:	da 01       	movw	r26, r20
     980:	c9 01       	movw	r24, r18
     982:	40 97       	sbiw	r24, 0x10	; 16
     984:	a1 09       	sbc	r26, r1
     986:	b1 09       	sbc	r27, r1
     988:	68 94       	set
     98a:	12 f8       	bld	r1, 2
     98c:	b6 95       	lsr	r27
     98e:	a7 95       	ror	r26
     990:	97 95       	ror	r25
     992:	87 95       	ror	r24
     994:	16 94       	lsr	r1
     996:	d1 f7       	brne	.-12     	; 0x98c <TWI_Init+0x22>
     998:	80 93 b8 00 	sts	0x00B8, r24
	TWCR=(1 << TWEN);
     99c:	84 e0       	ldi	r24, 0x04	; 4
     99e:	80 93 bc 00 	sts	0x00BC, r24
	
	//TWAR=0; //Disable slave mode
	
	return 1; //May want to actually check for success here
}
     9a2:	81 e0       	ldi	r24, 0x01	; 1
     9a4:	08 95       	ret

000009a6 <TWI_WriteByte>:
  @param[in] data byte to send
  @return Status code, TWI_SENT_ACK or TWI_SENT_NACK on success
*****************************************************************************/
char TWI_WriteByte(unsigned char data){
	//printf("TWI_WriteByte");
	TWDR = data; //Stage the data to send
     9a6:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
     9aa:	84 e8       	ldi	r24, 0x84	; 132
     9ac:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);//Send the data
     9b0:	ec eb       	ldi	r30, 0xBC	; 188
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	80 81       	ld	r24, Z
     9b6:	88 23       	and	r24, r24
     9b8:	ec f7       	brge	.-6      	; 0x9b4 <TWI_WriteByte+0xe>
	
	return TWSR&TWSR_MASK;//Return the status code
     9ba:	80 91 b9 00 	lds	r24, 0x00B9
}
     9be:	88 7f       	andi	r24, 0xF8	; 248
     9c0:	08 95       	ret

000009c2 <TWI_BeginWrite>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAW_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginWrite(unsigned char address){
	//printf("TWI_BeginWrite");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
     9c2:	94 ee       	ldi	r25, 0xE4	; 228
     9c4:	90 93 bc 00 	sts	0x00BC, r25
	int i=0;
	while ((TWCR & (1<<TWINT)) == 0);
     9c8:	ec eb       	ldi	r30, 0xBC	; 188
     9ca:	f0 e0       	ldi	r31, 0x00	; 0
     9cc:	90 81       	ld	r25, Z
     9ce:	99 23       	and	r25, r25
     9d0:	ec f7       	brge	.-6      	; 0x9cc <TWI_BeginWrite+0xa>
     9d2:	ef e9       	ldi	r30, 0x9F	; 159
     9d4:	ff e0       	ldi	r31, 0x0F	; 15
     9d6:	31 97       	sbiw	r30, 0x01	; 1
     9d8:	f1 f7       	brne	.-4      	; 0x9d6 <TWI_BeginWrite+0x14>
     9da:	00 c0       	rjmp	.+0      	; 0x9dc <TWI_BeginWrite+0x1a>
     9dc:	00 00       	nop
	_delay_ms(1);
	char stat = (TWSR & TWSR_MASK);
     9de:	90 91 b9 00 	lds	r25, 0x00B9
     9e2:	98 7f       	andi	r25, 0xF8	; 248
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
     9e4:	98 30       	cpi	r25, 0x08	; 8
     9e6:	31 f0       	breq	.+12     	; 0x9f4 <TWI_BeginWrite+0x32>
     9e8:	90 31       	cpi	r25, 0x10	; 16
     9ea:	21 f0       	breq	.+8      	; 0x9f4 <TWI_BeginWrite+0x32>
     9ec:	80 91 b9 00 	lds	r24, 0x00B9
     9f0:	88 7f       	andi	r24, 0xF8	; 248
     9f2:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) & SLAW_MASK); //reset bit 0 to send a write bit, send
     9f4:	88 0f       	add	r24, r24
     9f6:	d7 cf       	rjmp	.-82     	; 0x9a6 <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	return stat;//Return the status code
}
     9f8:	08 95       	ret

000009fa <TWI_BeginRead>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAR_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginRead(unsigned char address){
	//printf("TWI_BeginRead");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
     9fa:	94 ee       	ldi	r25, 0xE4	; 228
     9fc:	90 93 bc 00 	sts	0x00BC, r25
	while ((TWCR & (1<<TWINT)) == 0);
     a00:	ec eb       	ldi	r30, 0xBC	; 188
     a02:	f0 e0       	ldi	r31, 0x00	; 0
     a04:	90 81       	ld	r25, Z
     a06:	99 23       	and	r25, r25
     a08:	ec f7       	brge	.-6      	; 0xa04 <TWI_BeginRead+0xa>
	
	char stat = (TWSR & TWSR_MASK);
     a0a:	90 91 b9 00 	lds	r25, 0x00B9
     a0e:	98 7f       	andi	r25, 0xF8	; 248
	//printf("0x%1x",(unsigned)stat);
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
     a10:	98 30       	cpi	r25, 0x08	; 8
     a12:	31 f0       	breq	.+12     	; 0xa20 <TWI_BeginRead+0x26>
     a14:	90 31       	cpi	r25, 0x10	; 16
     a16:	21 f0       	breq	.+8      	; 0xa20 <TWI_BeginRead+0x26>
     a18:	80 91 b9 00 	lds	r24, 0x00B9
     a1c:	88 7f       	andi	r24, 0xF8	; 248
     a1e:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) | SLAR_MASK); //set bit 0 to send a read bit and send it
     a20:	88 0f       	add	r24, r24
     a22:	81 60       	ori	r24, 0x01	; 1
     a24:	c0 cf       	rjmp	.-128    	; 0x9a6 <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	
	return stat;//Return the status code
}
     a26:	08 95       	ret

00000a28 <TWI_ReadAck>:
/*************************************************************************//**
  @brief Receives a byte over TWI and returns an ACK
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_ACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadAck(unsigned char *data){
     a28:	dc 01       	movw	r26, r24
	//printf("TWI_ReadAck");
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Start receiving, ending with an ACK
     a2a:	84 ec       	ldi	r24, 0xC4	; 196
     a2c:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);
     a30:	ec eb       	ldi	r30, 0xBC	; 188
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	90 81       	ld	r25, Z
     a36:	99 23       	and	r25, r25
     a38:	ec f7       	brge	.-6      	; 0xa34 <TWI_ReadAck+0xc>
	*data=TWDR; //Store the data
     a3a:	80 91 bb 00 	lds	r24, 0x00BB
     a3e:	8c 93       	st	X, r24
	
	return TWSR&TWSR_MASK;//Return the status code
     a40:	80 91 b9 00 	lds	r24, 0x00B9
}
     a44:	88 7f       	andi	r24, 0xF8	; 248
     a46:	08 95       	ret

00000a48 <TWI_ReadNack>:
/*************************************************************************//**
  @brief Receives a byte over TWI and returns a NACK
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_NACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadNack(unsigned char *data){
     a48:	dc 01       	movw	r26, r24
	//printf("TWI_ReadNack");
	TWCR = (1<<TWINT)|(1<<TWEN); //Start receiving, ending with a NACK
     a4a:	84 e8       	ldi	r24, 0x84	; 132
     a4c:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);
     a50:	ec eb       	ldi	r30, 0xBC	; 188
     a52:	f0 e0       	ldi	r31, 0x00	; 0
     a54:	90 81       	ld	r25, Z
     a56:	99 23       	and	r25, r25
     a58:	ec f7       	brge	.-6      	; 0xa54 <TWI_ReadNack+0xc>
	*data=TWDR; //Store the data
     a5a:	80 91 bb 00 	lds	r24, 0x00BB
     a5e:	8c 93       	st	X, r24
	
	return TWSR&TWSR_MASK;//Return the status code
     a60:	80 91 b9 00 	lds	r24, 0x00B9
}
     a64:	88 7f       	andi	r24, 0xF8	; 248
     a66:	08 95       	ret

00000a68 <TWI_Stop>:
  @brief Sends a Stop bit, be sure to send a Start bit before future interactions on the bus
  @return Status code, should always be nonzero
*****************************************************************************/
char TWI_Stop(void){
	//printf("TWI_Stop");
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     a68:	84 e9       	ldi	r24, 0x94	; 148
     a6a:	80 93 bc 00 	sts	0x00BC, r24
	return 1;
}
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	08 95       	ret

00000a72 <TWI_Read>:
  @param[in] amount Number of bytes to recieve
  @param[in] whether or not to send an ACK on the last byte, sends NACK if false
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
     a72:	9f 92       	push	r9
     a74:	af 92       	push	r10
     a76:	bf 92       	push	r11
     a78:	cf 92       	push	r12
     a7a:	df 92       	push	r13
     a7c:	ef 92       	push	r14
     a7e:	ff 92       	push	r15
     a80:	0f 93       	push	r16
     a82:	1f 93       	push	r17
     a84:	cf 93       	push	r28
     a86:	df 93       	push	r29
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
     a88:	16 16       	cp	r1, r22
     a8a:	17 06       	cpc	r1, r23
     a8c:	fc f4       	brge	.+62     	; 0xacc <TWI_Read+0x5a>
     a8e:	94 2e       	mov	r9, r20
     a90:	8b 01       	movw	r16, r22
     a92:	7c 01       	movw	r14, r24
     a94:	c0 e0       	ldi	r28, 0x00	; 0
     a96:	d0 e0       	ldi	r29, 0x00	; 0
		if((ack==false) && ((amount-1)==i)){
     a98:	6b 01       	movw	r12, r22
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	c8 1a       	sub	r12, r24
     a9e:	d1 08       	sbc	r13, r1
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
     aa0:	57 01       	movw	r10, r14
     aa2:	ac 0c       	add	r10, r12
     aa4:	bd 1c       	adc	r11, r13
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
		if((ack==false) && ((amount-1)==i)){
     aa6:	91 10       	cpse	r9, r1
     aa8:	06 c0       	rjmp	.+12     	; 0xab6 <TWI_Read+0x44>
     aaa:	cc 16       	cp	r12, r28
     aac:	dd 06       	cpc	r13, r29
     aae:	19 f4       	brne	.+6      	; 0xab6 <TWI_Read+0x44>
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
     ab0:	c5 01       	movw	r24, r10
     ab2:	ca df       	rcall	.-108    	; 0xa48 <TWI_ReadNack>
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <TWI_Read+0x4c>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}else{
			status=TWI_ReadAck(&data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
     ab6:	c7 01       	movw	r24, r14
     ab8:	8c 0f       	add	r24, r28
     aba:	9d 1f       	adc	r25, r29
     abc:	b5 df       	rcall	.-150    	; 0xa28 <TWI_ReadAck>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}
		//printf("A");
		if(status!=TWI_REC_ACK)return status; //If NACK was selected, returning here is fine since the loop is already ending
     abe:	80 35       	cpi	r24, 0x50	; 80
     ac0:	31 f4       	brne	.+12     	; 0xace <TWI_Read+0x5c>
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
     ac2:	21 96       	adiw	r28, 0x01	; 1
     ac4:	c0 17       	cp	r28, r16
     ac6:	d1 07       	cpc	r29, r17
     ac8:	71 f7       	brne	.-36     	; 0xaa6 <TWI_Read+0x34>
     aca:	01 c0       	rjmp	.+2      	; 0xace <TWI_Read+0x5c>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
     acc:	80 e0       	ldi	r24, 0x00	; 0
		//will return if something goes wrong partway through
		//printf("B");
	}
	//printf("0x%1x",(unsigned)status);
	return status;
}
     ace:	df 91       	pop	r29
     ad0:	cf 91       	pop	r28
     ad2:	1f 91       	pop	r17
     ad4:	0f 91       	pop	r16
     ad6:	ff 90       	pop	r15
     ad8:	ef 90       	pop	r14
     ada:	df 90       	pop	r13
     adc:	cf 90       	pop	r12
     ade:	bf 90       	pop	r11
     ae0:	af 90       	pop	r10
     ae2:	9f 90       	pop	r9
     ae4:	08 95       	ret

00000ae6 <TWI_Write>:
  @param[in] *data Pointer to an array of bytes to send
  @param[in] amount Number of bytes to send
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
     ae6:	0f 93       	push	r16
     ae8:	1f 93       	push	r17
     aea:	cf 93       	push	r28
     aec:	df 93       	push	r29
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
     aee:	16 16       	cp	r1, r22
     af0:	17 06       	cpc	r1, r23
     af2:	64 f4       	brge	.+24     	; 0xb0c <TWI_Write+0x26>
     af4:	8c 01       	movw	r16, r24
     af6:	ec 01       	movw	r28, r24
     af8:	06 0f       	add	r16, r22
     afa:	17 1f       	adc	r17, r23
		status=TWI_WriteByte(data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
     afc:	89 91       	ld	r24, Y+
     afe:	53 df       	rcall	.-346    	; 0x9a6 <TWI_WriteByte>
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
     b00:	88 32       	cpi	r24, 0x28	; 40
     b02:	29 f4       	brne	.+10     	; 0xb0e <TWI_Write+0x28>
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
     b04:	c0 17       	cp	r28, r16
     b06:	d1 07       	cpc	r29, r17
     b08:	c9 f7       	brne	.-14     	; 0xafc <TWI_Write+0x16>
     b0a:	01 c0       	rjmp	.+2      	; 0xb0e <TWI_Write+0x28>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
     b0c:	80 e0       	ldi	r24, 0x00	; 0
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
		//will return if something goes wrong partway through
	}
	return status;
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	08 95       	ret

00000b18 <USART0_Init>:
  @brief Initializes USART0 in asynchronous UART mode, 8 bit data, 1 stop bit
  @param[in] desired baud rate (configuration values computed using F_CPU)
*****************************************************************************/
void USART0_Init(unsigned long baud){
	
	stdout = &USART0_stdout; //make stdout print to USART0
     b18:	28 e5       	ldi	r18, 0x58	; 88
     b1a:	32 e0       	ldi	r19, 0x02	; 2
     b1c:	30 93 a5 0b 	sts	0x0BA5, r19
     b20:	20 93 a4 0b 	sts	0x0BA4, r18
	
	//Compute UBRR for baudrate setting
	unsigned short ubrr=(unsigned short)((F_CPU/(baud*16UL))-1);
     b24:	dc 01       	movw	r26, r24
     b26:	cb 01       	movw	r24, r22
     b28:	88 0f       	add	r24, r24
     b2a:	99 1f       	adc	r25, r25
     b2c:	aa 1f       	adc	r26, r26
     b2e:	bb 1f       	adc	r27, r27
     b30:	88 0f       	add	r24, r24
     b32:	99 1f       	adc	r25, r25
     b34:	aa 1f       	adc	r26, r26
     b36:	bb 1f       	adc	r27, r27
     b38:	9c 01       	movw	r18, r24
     b3a:	ad 01       	movw	r20, r26
     b3c:	22 0f       	add	r18, r18
     b3e:	33 1f       	adc	r19, r19
     b40:	44 1f       	adc	r20, r20
     b42:	55 1f       	adc	r21, r21
     b44:	22 0f       	add	r18, r18
     b46:	33 1f       	adc	r19, r19
     b48:	44 1f       	adc	r20, r20
     b4a:	55 1f       	adc	r21, r21
     b4c:	60 e0       	ldi	r22, 0x00	; 0
     b4e:	74 e2       	ldi	r23, 0x24	; 36
     b50:	84 ef       	ldi	r24, 0xF4	; 244
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	0e 94 fa 19 	call	0x33f4	; 0x33f4 <__udivmodsi4>
     b58:	21 50       	subi	r18, 0x01	; 1
     b5a:	31 09       	sbc	r19, r1
	
	//Set BAUD rate.
	UBRR0H = (unsigned char) (ubrr >> 8);
     b5c:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) ubrr;
     b60:	20 93 c4 00 	sts	0x00C4, r18
	/*Set frame format. 8 data bit(settings bits UCSZ00 and UCSZ01  UCSR0B), 1 stop bit(by default and need not to be worried about). 
	The UCSZ01:0 bits combined with the UCSZ02 bit in UCSR0B sets the number of data
	bits (Character Size) in the frame that the Receiver and Transmitter use. 
	If a change on frame format is needed, make sure to modify UCSR0B register above accordingly.
	See datasheet pg. 390.*/
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
     b64:	86 e0       	ldi	r24, 0x06	; 6
     b66:	80 93 c2 00 	sts	0x00C2, r24
	
	//Enable receiver and transmitter. Enable the USART Receive Complete interrupt(RXCIE).
	//UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0));
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);//Enable RX/TX, no interrupts
     b6a:	88 e1       	ldi	r24, 0x18	; 24
     b6c:	80 93 c1 00 	sts	0x00C1, r24
     b70:	08 95       	ret

00000b72 <USART0_Transmit>:
Function contains busy loops for simplicity in debugging. Not production code.
  @brief Transmits a byte via USART0
  @param[in] data byte to be transmitted
*****************************************************************************/
void USART0_Transmit(unsigned char data){
	while(!(UCSR0A & (1 << UDRE0))); //Wait for the empty transmit buffer. (Waiting UDR0 to be empty.)
     b72:	e0 ec       	ldi	r30, 0xC0	; 192
     b74:	f0 e0       	ldi	r31, 0x00	; 0
     b76:	90 81       	ld	r25, Z
     b78:	95 ff       	sbrs	r25, 5
     b7a:	fd cf       	rjmp	.-6      	; 0xb76 <USART0_Transmit+0x4>
		UDR0 = data;			//store the data in the USART Data Register
     b7c:	80 93 c6 00 	sts	0x00C6, r24
     b80:	08 95       	ret

00000b82 <USART0_putchar_printf>:
  @brief Called when stdout is being printed to USART0 (this is set up at runtime)
  @param[in] var byte to transmit
  @param[in/out] *stream Pointer to a stdio.h FILE io stream
  @return Status
*****************************************************************************/
int USART0_putchar_printf(char var, FILE *stream) {
     b82:	cf 93       	push	r28
     b84:	c8 2f       	mov	r28, r24
	if (var == '\n') USART0_Transmit('\r');
     b86:	8a 30       	cpi	r24, 0x0A	; 10
     b88:	11 f4       	brne	.+4      	; 0xb8e <USART0_putchar_printf+0xc>
     b8a:	8d e0       	ldi	r24, 0x0D	; 13
     b8c:	f2 df       	rcall	.-28     	; 0xb72 <USART0_Transmit>
	USART0_Transmit(var);
     b8e:	8c 2f       	mov	r24, r28
     b90:	f0 df       	rcall	.-32     	; 0xb72 <USART0_Transmit>
	return 0;
}
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	90 e0       	ldi	r25, 0x00	; 0
     b96:	cf 91       	pop	r28
     b98:	08 95       	ret

00000b9a <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     b9a:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     b9c:	0f b6       	in	r0, 0x3f	; 63
     b9e:	f8 94       	cli
     ba0:	a8 95       	wdr
     ba2:	80 91 60 00 	lds	r24, 0x0060
     ba6:	88 61       	ori	r24, 0x18	; 24
     ba8:	80 93 60 00 	sts	0x0060, r24
     bac:	10 92 60 00 	sts	0x0060, r1
     bb0:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
     bb2:	e1 e6       	ldi	r30, 0x61	; 97
     bb4:	f0 e0       	ldi	r31, 0x00	; 0
     bb6:	80 e8       	ldi	r24, 0x80	; 128
     bb8:	80 83       	st	Z, r24
  CLKPR = 0;
     bba:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     bbc:	78 94       	sei

  HAL_TimerInit();
     bbe:	01 c0       	rjmp	.+2      	; 0xbc2 <HAL_TimerInit>
     bc0:	08 95       	ret

00000bc2 <HAL_TimerInit>:

  TIFR4 = (1 << OCF4B);
  while (0 == (TIFR4 & (1 << OCF4B)));

  PRAGMA(diag_default=Pa082);
}
     bc2:	10 92 75 0b 	sts	0x0B75, r1
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	9e e4       	ldi	r25, 0x4E	; 78
     bca:	90 93 a9 00 	sts	0x00A9, r25
     bce:	80 93 a8 00 	sts	0x00A8, r24
     bd2:	e1 ea       	ldi	r30, 0xA1	; 161
     bd4:	f0 e0       	ldi	r31, 0x00	; 0
     bd6:	88 e0       	ldi	r24, 0x08	; 8
     bd8:	80 83       	st	Z, r24
     bda:	80 81       	ld	r24, Z
     bdc:	82 60       	ori	r24, 0x02	; 2
     bde:	80 83       	st	Z, r24
     be0:	e2 e7       	ldi	r30, 0x72	; 114
     be2:	f0 e0       	ldi	r31, 0x00	; 0
     be4:	80 81       	ld	r24, Z
     be6:	82 60       	ori	r24, 0x02	; 2
     be8:	80 83       	st	Z, r24
     bea:	08 95       	ret

00000bec <__vector_42>:

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     bec:	1f 92       	push	r1
     bee:	0f 92       	push	r0
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	0f 92       	push	r0
     bf4:	11 24       	eor	r1, r1
     bf6:	8f 93       	push	r24
  halTimerIrqCount++;
     bf8:	80 91 75 0b 	lds	r24, 0x0B75
     bfc:	8f 5f       	subi	r24, 0xFF	; 255
     bfe:	80 93 75 0b 	sts	0x0B75, r24
}
     c02:	8f 91       	pop	r24
     c04:	0f 90       	pop	r0
     c06:	0f be       	out	0x3f, r0	; 63
     c08:	0f 90       	pop	r0
     c0a:	1f 90       	pop	r1
     c0c:	18 95       	reti

00000c0e <NWK_Init>:
  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
  nwkIb.panId = panId;
  PHY_SetPanId(panId);
     c0e:	e6 e7       	ldi	r30, 0x76	; 118
     c10:	fb e0       	ldi	r31, 0x0B	; 11
     c12:	14 82       	std	Z+4, r1	; 0x04
     c14:	15 82       	std	Z+5, r1	; 0x05
     c16:	11 82       	std	Z+1, r1	; 0x01
     c18:	10 82       	st	Z, r1
     c1a:	17 a2       	std	Z+39, r1	; 0x27
     c1c:	16 a2       	std	Z+38, r1	; 0x26
     c1e:	ec e7       	ldi	r30, 0x7C	; 124
     c20:	fb e0       	ldi	r31, 0x0B	; 11
     c22:	8c e9       	ldi	r24, 0x9C	; 156
     c24:	9b e0       	ldi	r25, 0x0B	; 11
     c26:	11 92       	st	Z+, r1
     c28:	11 92       	st	Z+, r1
     c2a:	e8 17       	cp	r30, r24
     c2c:	f9 07       	cpc	r31, r25
     c2e:	d9 f7       	brne	.-10     	; 0xc26 <NWK_Init+0x18>
     c30:	e3 d0       	rcall	.+454    	; 0xdf8 <nwkTxInit>
     c32:	67 d0       	rcall	.+206    	; 0xd02 <nwkRxInit>
     c34:	10 d0       	rcall	.+32     	; 0xc56 <nwkFrameInit>
     c36:	0a c0       	rjmp	.+20     	; 0xc4c <nwkDataReqInit>
     c38:	08 95       	ret

00000c3a <NWK_OpenEndpoint>:
  @param[in] id Endpoint index (1-15)
  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
  nwkIb.endpoint[id] = handler;
     c3a:	e8 2f       	mov	r30, r24
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	ee 0f       	add	r30, r30
     c40:	ff 1f       	adc	r31, r31
     c42:	e4 58       	subi	r30, 0x84	; 132
     c44:	f4 4f       	sbci	r31, 0xF4	; 244
     c46:	71 83       	std	Z+1, r23	; 0x01
     c48:	60 83       	st	Z, r22
     c4a:	08 95       	ret

00000c4c <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     c4c:	10 92 0f 06 	sts	0x060F, r1
     c50:	10 92 0e 06 	sts	0x060E, r1
     c54:	08 95       	ret

00000c56 <nwkFrameInit>:
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
  nwkIb.lock--;
     c56:	10 92 10 06 	sts	0x0610, r1
     c5a:	10 92 99 06 	sts	0x0699, r1
     c5e:	10 92 22 07 	sts	0x0722, r1
     c62:	10 92 ab 07 	sts	0x07AB, r1
     c66:	10 92 34 08 	sts	0x0834, r1
     c6a:	08 95       	ret

00000c6c <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     c6c:	00 97       	sbiw	r24, 0x00	; 0
     c6e:	41 f0       	breq	.+16     	; 0xc80 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     c70:	fc 01       	movw	r30, r24
     c72:	e7 57       	subi	r30, 0x77	; 119
     c74:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     c76:	88 e0       	ldi	r24, 0x08	; 8
     c78:	ed 3b       	cpi	r30, 0xBD	; 189
     c7a:	f8 07       	cpc	r31, r24
     c7c:	18 f0       	brcs	.+6      	; 0xc84 <nwkFrameNext+0x18>
     c7e:	15 c0       	rjmp	.+42     	; 0xcaa <nwkFrameNext+0x3e>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     c80:	e0 e1       	ldi	r30, 0x10	; 16
     c82:	f6 e0       	ldi	r31, 0x06	; 6
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     c84:	80 81       	ld	r24, Z
     c86:	88 23       	and	r24, r24
     c88:	39 f0       	breq	.+14     	; 0xc98 <nwkFrameNext+0x2c>
     c8a:	03 c0       	rjmp	.+6      	; 0xc92 <nwkFrameNext+0x26>
     c8c:	80 81       	ld	r24, Z
     c8e:	88 23       	and	r24, r24
     c90:	19 f0       	breq	.+6      	; 0xc98 <nwkFrameNext+0x2c>
      return frame;
     c92:	8e 2f       	mov	r24, r30
     c94:	9f 2f       	mov	r25, r31
     c96:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     c98:	e7 57       	subi	r30, 0x77	; 119
     c9a:	ff 4f       	sbci	r31, 0xFF	; 255
     c9c:	88 e0       	ldi	r24, 0x08	; 8
     c9e:	ed 3b       	cpi	r30, 0xBD	; 189
     ca0:	f8 07       	cpc	r31, r24
     ca2:	a0 f3       	brcs	.-24     	; 0xc8c <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	08 95       	ret
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	90 e0       	ldi	r25, 0x00	; 0
}
     cae:	08 95       	ret

00000cb0 <nwkRxServiceDataInd>:
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
     cb0:	dc 01       	movw	r26, r24
     cb2:	19 96       	adiw	r26, 0x09	; 9
     cb4:	2c 91       	ld	r18, X
     cb6:	19 97       	sbiw	r26, 0x09	; 9
     cb8:	22 23       	and	r18, r18
     cba:	49 f0       	breq	.+18     	; 0xcce <nwkRxServiceDataInd+0x1e>
    return false;

  switch (ind->data[0])
     cbc:	17 96       	adiw	r26, 0x07	; 7
     cbe:	ed 91       	ld	r30, X+
     cc0:	fc 91       	ld	r31, X
     cc2:	18 97       	sbiw	r26, 0x08	; 8
     cc4:	20 81       	ld	r18, Z
     cc6:	21 11       	cpse	r18, r1
     cc8:	04 c0       	rjmp	.+8      	; 0xcd2 <nwkRxServiceDataInd+0x22>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
     cca:	b9 c0       	rjmp	.+370    	; 0xe3e <nwkTxAckReceived>
     ccc:	08 95       	ret
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    return false;
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	08 95       	ret
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
     cd2:	80 e0       	ldi	r24, 0x00	; 0
  }
}
     cd4:	08 95       	ret

00000cd6 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
     cd6:	bc 01       	movw	r22, r24
     cd8:	ee ec       	ldi	r30, 0xCE	; 206
     cda:	f8 e0       	ldi	r31, 0x08	; 8
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	39 e0       	ldi	r19, 0x09	; 9
  bool restart = false;
     ce0:	40 e0       	ldi	r20, 0x00	; 0
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
     ce2:	51 e0       	ldi	r21, 0x01	; 1
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
     ce4:	90 81       	ld	r25, Z
     ce6:	99 23       	and	r25, r25
     ce8:	19 f0       	breq	.+6      	; 0xcf0 <nwkRxDuplicateRejectionTimerHandler+0x1a>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
     cea:	91 50       	subi	r25, 0x01	; 1
     cec:	90 83       	st	Z, r25
      restart = true;
     cee:	45 2f       	mov	r20, r21
     cf0:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     cf2:	e2 17       	cp	r30, r18
     cf4:	f3 07       	cpc	r31, r19
     cf6:	b1 f7       	brne	.-20     	; 0xce4 <nwkRxDuplicateRejectionTimerHandler+0xe>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
     cf8:	44 23       	and	r20, r20
     cfa:	11 f0       	breq	.+4      	; 0xd00 <nwkRxDuplicateRejectionTimerHandler+0x2a>
     cfc:	cb 01       	movw	r24, r22
    SYS_TimerStart(timer);
     cfe:	2f c4       	rjmp	.+2142   	; 0x155e <SYS_TimerStart>
     d00:	08 95       	ret

00000d02 <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
     d02:	ee ec       	ldi	r30, 0xCE	; 206
     d04:	f8 e0       	ldi	r31, 0x08	; 8
     d06:	80 e0       	ldi	r24, 0x00	; 0
     d08:	99 e0       	ldi	r25, 0x09	; 9
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
     d0a:	10 82       	st	Z, r1
     d0c:	35 96       	adiw	r30, 0x05	; 5
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     d0e:	e8 17       	cp	r30, r24
     d10:	f9 07       	cpc	r31, r25
     d12:	d9 f7       	brne	.-10     	; 0xd0a <nwkRxInit+0x8>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
     d14:	ed eb       	ldi	r30, 0xBD	; 189
     d16:	f8 e0       	ldi	r31, 0x08	; 8
     d18:	84 e6       	ldi	r24, 0x64	; 100
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	a0 e0       	ldi	r26, 0x00	; 0
     d1e:	b0 e0       	ldi	r27, 0x00	; 0
     d20:	86 83       	std	Z+6, r24	; 0x06
     d22:	97 83       	std	Z+7, r25	; 0x07
     d24:	a0 87       	std	Z+8, r26	; 0x08
     d26:	b1 87       	std	Z+9, r27	; 0x09
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
     d28:	12 86       	std	Z+10, r1	; 0x0a
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
     d2a:	8b e6       	ldi	r24, 0x6B	; 107
     d2c:	96 e0       	ldi	r25, 0x06	; 6
     d2e:	94 87       	std	Z+12, r25	; 0x0c
     d30:	83 87       	std	Z+11, r24	; 0x0b

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
     d32:	68 e5       	ldi	r22, 0x58	; 88
     d34:	76 e0       	ldi	r23, 0x06	; 6
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	80 cf       	rjmp	.-256    	; 0xc3a <NWK_OpenEndpoint>
     d3a:	08 95       	ret

00000d3c <nwkTxDelayTimerHandler>:
  newFrame->header.macFcf = 0x8841;
  newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
  newFrame->header.macDstPanId = frame->header.macDstPanId;
  newFrame->header.macSrcAddr = nwkIb.addr;
  newFrame->header.macSeq = ++nwkIb.macSeqNum;
}
     d3c:	ef 92       	push	r14
     d3e:	ff 92       	push	r15
     d40:	0f 93       	push	r16
     d42:	1f 93       	push	r17
     d44:	cf 93       	push	r28
     d46:	7c 01       	movw	r14, r24
     d48:	10 e0       	ldi	r17, 0x00	; 0
     d4a:	80 e0       	ldi	r24, 0x00	; 0
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	01 e0       	ldi	r16, 0x01	; 1
     d50:	c3 e1       	ldi	r28, 0x13	; 19
     d52:	13 c0       	rjmp	.+38     	; 0xd7a <nwkTxDelayTimerHandler+0x3e>
     d54:	fc 01       	movw	r30, r24
     d56:	20 81       	ld	r18, Z
     d58:	21 31       	cpi	r18, 0x11	; 17
     d5a:	79 f4       	brne	.+30     	; 0xd7a <nwkTxDelayTimerHandler+0x3e>
     d5c:	ec 57       	subi	r30, 0x7C	; 124
     d5e:	ff 4f       	sbci	r31, 0xFF	; 255
     d60:	20 81       	ld	r18, Z
     d62:	31 81       	ldd	r19, Z+1	; 0x01
     d64:	21 50       	subi	r18, 0x01	; 1
     d66:	31 09       	sbc	r19, r1
     d68:	31 83       	std	Z+1, r19	; 0x01
     d6a:	20 83       	st	Z, r18
     d6c:	23 2b       	or	r18, r19
     d6e:	21 f4       	brne	.+8      	; 0xd78 <nwkTxDelayTimerHandler+0x3c>
     d70:	fc 01       	movw	r30, r24
     d72:	c0 83       	st	Z, r28
     d74:	10 2f       	mov	r17, r16
     d76:	01 c0       	rjmp	.+2      	; 0xd7a <nwkTxDelayTimerHandler+0x3e>
     d78:	10 2f       	mov	r17, r16
     d7a:	78 df       	rcall	.-272    	; 0xc6c <nwkFrameNext>
     d7c:	00 97       	sbiw	r24, 0x00	; 0
     d7e:	51 f7       	brne	.-44     	; 0xd54 <nwkTxDelayTimerHandler+0x18>
     d80:	11 23       	and	r17, r17
     d82:	11 f0       	breq	.+4      	; 0xd88 <nwkTxDelayTimerHandler+0x4c>
     d84:	c7 01       	movw	r24, r14
     d86:	eb d3       	rcall	.+2006   	; 0x155e <SYS_TimerStart>
     d88:	cf 91       	pop	r28
     d8a:	1f 91       	pop	r17
     d8c:	0f 91       	pop	r16
     d8e:	ff 90       	pop	r15
     d90:	ef 90       	pop	r14
     d92:	08 95       	ret

00000d94 <nwkTxAckWaitTimerHandler>:
     d94:	ef 92       	push	r14
     d96:	ff 92       	push	r15
     d98:	0f 93       	push	r16
     d9a:	1f 93       	push	r17
     d9c:	cf 93       	push	r28
     d9e:	df 93       	push	r29
     da0:	7c 01       	movw	r14, r24
     da2:	10 e0       	ldi	r17, 0x00	; 0
     da4:	80 e0       	ldi	r24, 0x00	; 0
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	01 e0       	ldi	r16, 0x01	; 1
     daa:	d7 e1       	ldi	r29, 0x17	; 23
     dac:	c0 e1       	ldi	r28, 0x10	; 16
     dae:	16 c0       	rjmp	.+44     	; 0xddc <nwkTxAckWaitTimerHandler+0x48>
     db0:	fc 01       	movw	r30, r24
     db2:	20 81       	ld	r18, Z
     db4:	26 31       	cpi	r18, 0x16	; 22
     db6:	91 f4       	brne	.+36     	; 0xddc <nwkTxAckWaitTimerHandler+0x48>
     db8:	ec 57       	subi	r30, 0x7C	; 124
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	20 81       	ld	r18, Z
     dbe:	31 81       	ldd	r19, Z+1	; 0x01
     dc0:	21 50       	subi	r18, 0x01	; 1
     dc2:	31 09       	sbc	r19, r1
     dc4:	31 83       	std	Z+1, r19	; 0x01
     dc6:	20 83       	st	Z, r18
     dc8:	23 2b       	or	r18, r19
     dca:	39 f4       	brne	.+14     	; 0xdda <nwkTxAckWaitTimerHandler+0x46>
     dcc:	fc 01       	movw	r30, r24
     dce:	d0 83       	st	Z, r29
     dd0:	ed 57       	subi	r30, 0x7D	; 125
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	c0 83       	st	Z, r28
     dd6:	10 2f       	mov	r17, r16
     dd8:	01 c0       	rjmp	.+2      	; 0xddc <nwkTxAckWaitTimerHandler+0x48>
     dda:	10 2f       	mov	r17, r16
     ddc:	47 df       	rcall	.-370    	; 0xc6c <nwkFrameNext>
     dde:	00 97       	sbiw	r24, 0x00	; 0
     de0:	39 f7       	brne	.-50     	; 0xdb0 <nwkTxAckWaitTimerHandler+0x1c>
     de2:	11 23       	and	r17, r17
     de4:	11 f0       	breq	.+4      	; 0xdea <nwkTxAckWaitTimerHandler+0x56>
     de6:	c7 01       	movw	r24, r14
     de8:	ba d3       	rcall	.+1908   	; 0x155e <SYS_TimerStart>
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	1f 91       	pop	r17
     df0:	0f 91       	pop	r16
     df2:	ff 90       	pop	r15
     df4:	ef 90       	pop	r14
     df6:	08 95       	ret

00000df8 <nwkTxInit>:
     df8:	10 92 17 09 	sts	0x0917, r1
     dfc:	10 92 16 09 	sts	0x0916, r1
     e00:	e9 e0       	ldi	r30, 0x09	; 9
     e02:	f9 e0       	ldi	r31, 0x09	; 9
     e04:	82 e3       	ldi	r24, 0x32	; 50
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	a0 e0       	ldi	r26, 0x00	; 0
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	86 83       	std	Z+6, r24	; 0x06
     e0e:	97 83       	std	Z+7, r25	; 0x07
     e10:	a0 87       	std	Z+8, r26	; 0x08
     e12:	b1 87       	std	Z+9, r27	; 0x09
     e14:	12 86       	std	Z+10, r1	; 0x0a
     e16:	8a ec       	ldi	r24, 0xCA	; 202
     e18:	96 e0       	ldi	r25, 0x06	; 6
     e1a:	94 87       	std	Z+12, r25	; 0x0c
     e1c:	83 87       	std	Z+11, r24	; 0x0b
     e1e:	ec ef       	ldi	r30, 0xFC	; 252
     e20:	f8 e0       	ldi	r31, 0x08	; 8
     e22:	8a e0       	ldi	r24, 0x0A	; 10
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	a0 e0       	ldi	r26, 0x00	; 0
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	86 83       	std	Z+6, r24	; 0x06
     e2c:	97 83       	std	Z+7, r25	; 0x07
     e2e:	a0 87       	std	Z+8, r26	; 0x08
     e30:	b1 87       	std	Z+9, r27	; 0x09
     e32:	12 86       	std	Z+10, r1	; 0x0a
     e34:	8e e9       	ldi	r24, 0x9E	; 158
     e36:	96 e0       	ldi	r25, 0x06	; 6
     e38:	94 87       	std	Z+12, r25	; 0x0c
     e3a:	83 87       	std	Z+11, r24	; 0x0b
     e3c:	08 95       	ret

00000e3e <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
     e3e:	cf 93       	push	r28
     e40:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
     e42:	fc 01       	movw	r30, r24
     e44:	c7 81       	ldd	r28, Z+7	; 0x07
     e46:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
     e48:	81 85       	ldd	r24, Z+9	; 0x09
     e4a:	83 30       	cpi	r24, 0x03	; 3
     e4c:	c1 f4       	brne	.+48     	; 0xe7e <nwkTxAckReceived+0x40>
     e4e:	80 e0       	ldi	r24, 0x00	; 0
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	10 c0       	rjmp	.+32     	; 0xe74 <nwkTxAckReceived+0x36>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
     e54:	fc 01       	movw	r30, r24
     e56:	20 81       	ld	r18, Z
     e58:	26 31       	cpi	r18, 0x16	; 22
     e5a:	61 f4       	brne	.+24     	; 0xe74 <nwkTxAckReceived+0x36>
     e5c:	34 85       	ldd	r19, Z+12	; 0x0c
     e5e:	29 81       	ldd	r18, Y+1	; 0x01
     e60:	32 13       	cpse	r19, r18
     e62:	08 c0       	rjmp	.+16     	; 0xe74 <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
     e64:	27 e1       	ldi	r18, 0x17	; 23
     e66:	20 83       	st	Z, r18
      frame->tx.control = command->control;
     e68:	2a 81       	ldd	r18, Y+2	; 0x02
     e6a:	ea 57       	subi	r30, 0x7A	; 122
     e6c:	ff 4f       	sbci	r31, 0xFF	; 255
     e6e:	20 83       	st	Z, r18
      return true;
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	06 c0       	rjmp	.+12     	; 0xe80 <nwkTxAckReceived+0x42>
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
     e74:	fb de       	rcall	.-522    	; 0xc6c <nwkFrameNext>
     e76:	00 97       	sbiw	r24, 0x00	; 0
     e78:	69 f7       	brne	.-38     	; 0xe54 <nwkTxAckReceived+0x16>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
     e7a:	80 e0       	ldi	r24, 0x00	; 0
     e7c:	01 c0       	rjmp	.+2      	; 0xe80 <nwkTxAckReceived+0x42>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
     e7e:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
     e80:	df 91       	pop	r29
     e82:	cf 91       	pop	r28
     e84:	08 95       	ret

00000e86 <phyTrxSetState>:
  phyTrxSetState(TRX_CMD_TRX_OFF);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  if (phyRxState)
    phyTrxSetState(TRX_CMD_RX_AACK_ON);
     e86:	93 e0       	ldi	r25, 0x03	; 3
     e88:	90 93 42 01 	sts	0x0142, r25
     e8c:	e1 e4       	ldi	r30, 0x41	; 65
     e8e:	f1 e0       	ldi	r31, 0x01	; 1
     e90:	90 81       	ld	r25, Z
     e92:	9f 71       	andi	r25, 0x1F	; 31
     e94:	98 30       	cpi	r25, 0x08	; 8
     e96:	e1 f7       	brne	.-8      	; 0xe90 <phyTrxSetState+0xa>
     e98:	80 93 42 01 	sts	0x0142, r24
     e9c:	e1 e4       	ldi	r30, 0x41	; 65
     e9e:	f1 e0       	ldi	r31, 0x01	; 1
     ea0:	90 81       	ld	r25, Z
     ea2:	9f 71       	andi	r25, 0x1F	; 31
     ea4:	98 13       	cpse	r25, r24
     ea6:	fc cf       	rjmp	.-8      	; 0xea0 <phyTrxSetState+0x1a>
     ea8:	08 95       	ret

00000eaa <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
     eaa:	e9 e3       	ldi	r30, 0x39	; 57
     eac:	f1 e0       	ldi	r31, 0x01	; 1
     eae:	80 81       	ld	r24, Z
     eb0:	81 60       	ori	r24, 0x01	; 1
     eb2:	80 83       	st	Z, r24

  phyRxState = false;
     eb4:	10 92 19 09 	sts	0x0919, r1
  phyBand = 0;
     eb8:	10 92 18 09 	sts	0x0918, r1
  phyState = PHY_STATE_IDLE;
     ebc:	81 e0       	ldi	r24, 0x01	; 1
     ebe:	80 93 1a 09 	sts	0x091A, r24

  phyTrxSetState(TRX_CMD_TRX_OFF);
     ec2:	88 e0       	ldi	r24, 0x08	; 8
     ec4:	e0 df       	rcall	.-64     	; 0xe86 <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
     ec6:	8b ee       	ldi	r24, 0xEB	; 235
     ec8:	80 93 56 01 	sts	0x0156, r24

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
     ecc:	ec e4       	ldi	r30, 0x4C	; 76
     ece:	f1 e0       	ldi	r31, 0x01	; 1
     ed0:	80 81       	ld	r24, Z
     ed2:	80 68       	ori	r24, 0x80	; 128
     ed4:	80 83       	st	Z, r24
     ed6:	08 95       	ret

00000ed8 <sensor_handler>:

/*************************************************************************//**
  @brief sensor_handler function to decide the execution logic of a sensor according to its state, return 1 if it has some borrow time 
*****************************************************************************/
int sensor_handler( struct event *p )
{
     ed8:	0f 93       	push	r16
     eda:	1f 93       	push	r17
     edc:	cf 93       	push	r28
     ede:	df 93       	push	r29
     ee0:	ec 01       	movw	r28, r24
	int retNum;
	BaseSensor *sp;
	/* sanity check */
	if( p == EV_NULL )
     ee2:	89 2b       	or	r24, r25
     ee4:	59 f4       	brne	.+22     	; 0xefc <sensor_handler+0x24>
	{
		#ifdef DEBUG
		printf("Null Event Error !!!");
     ee6:	84 e2       	ldi	r24, 0x24	; 36
     ee8:	93 e0       	ldi	r25, 0x03	; 3
     eea:	9f 93       	push	r25
     eec:	8f 93       	push	r24
     eee:	0e 94 aa 1c 	call	0x3954	; 0x3954 <printf>
		#endif
		return 0;
     ef2:	0f 90       	pop	r0
     ef4:	0f 90       	pop	r0
     ef6:	80 e0       	ldi	r24, 0x00	; 0
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	70 c0       	rjmp	.+224    	; 0xfdc <sensor_handler+0x104>
	}
	sp = ( BaseSensor * )( p->sp );
     efc:	08 89       	ldd	r16, Y+16	; 0x10
     efe:	19 89       	ldd	r17, Y+17	; 0x11

	#ifdef DEBUG
	// printf("cur_state = %d\n", p->cur_state);
	#endif
	switch( p->cur_state )
     f00:	98 8d       	ldd	r25, Y+24	; 0x18
     f02:	91 30       	cpi	r25, 0x01	; 1
     f04:	a9 f0       	breq	.+42     	; 0xf30 <sensor_handler+0x58>
     f06:	38 f0       	brcs	.+14     	; 0xf16 <sensor_handler+0x3e>
     f08:	92 30       	cpi	r25, 0x02	; 2
     f0a:	09 f4       	brne	.+2      	; 0xf0e <sensor_handler+0x36>
     f0c:	4e c0       	rjmp	.+156    	; 0xfaa <sensor_handler+0xd2>
     f0e:	94 30       	cpi	r25, 0x04	; 4
     f10:	09 f4       	brne	.+2      	; 0xf14 <sensor_handler+0x3c>
     f12:	5a c0       	rjmp	.+180    	; 0xfc8 <sensor_handler+0xf0>
     f14:	61 c0       	rjmp	.+194    	; 0xfd8 <sensor_handler+0x100>
	{
		/* New : init first, if retNum is not 0 goto Oops state */
		case New :
		// the way to call init() is different than most other functions, since it is virtual function in BaseDevice .
		retNum = sp->abstract.device_vt->init( &(sp->abstract) );
     f16:	d8 01       	movw	r26, r16
     f18:	ed 91       	ld	r30, X+
     f1a:	fc 91       	ld	r31, X
     f1c:	02 80       	ldd	r0, Z+2	; 0x02
     f1e:	f3 81       	ldd	r31, Z+3	; 0x03
     f20:	e0 2d       	mov	r30, r0
     f22:	c8 01       	movw	r24, r16
     f24:	19 95       	eicall
		if(retNum != 0)
		{
			p->cur_state = Oops;
		}
		p->cur_state = Ready;
     f26:	81 e0       	ldi	r24, 0x01	; 1
     f28:	88 8f       	std	Y+24, r24	; 0x18
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	90 e0       	ldi	r25, 0x00	; 0
		if(retNum != 0)
		{
			p->cur_state = Oops;
		}
		p->cur_state = Ready;
		break;
     f2e:	56 c0       	rjmp	.+172    	; 0xfdc <sensor_handler+0x104>
		
		
		
		/* Ready : ready to activate collection request, if retNum is not 0 goto Oops state */
		case Ready :
		retNum = sp->vmt->Request(p->sp);
     f30:	d8 01       	movw	r26, r16
     f32:	1c 96       	adiw	r26, 0x0c	; 12
     f34:	ed 91       	ld	r30, X+
     f36:	fc 91       	ld	r31, X
     f38:	1d 97       	sbiw	r26, 0x0d	; 13
     f3a:	04 80       	ldd	r0, Z+4	; 0x04
     f3c:	f5 81       	ldd	r31, Z+5	; 0x05
     f3e:	e0 2d       	mov	r30, r0
     f40:	c8 01       	movw	r24, r16
     f42:	19 95       	eicall
		if ( retNum == -1 )
     f44:	8f 3f       	cpi	r24, 0xFF	; 255
     f46:	bf ef       	ldi	r27, 0xFF	; 255
     f48:	9b 07       	cpc	r25, r27
     f4a:	29 f4       	brne	.+10     	; 0xf56 <sensor_handler+0x7e>
		{
			p->cur_state = Oops;
     f4c:	84 e0       	ldi	r24, 0x04	; 4
     f4e:	88 8f       	std	Y+24, r24	; 0x18
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
     f50:	80 e0       	ldi	r24, 0x00	; 0
     f52:	90 e0       	ldi	r25, 0x00	; 0
     f54:	43 c0       	rjmp	.+134    	; 0xfdc <sensor_handler+0x104>
		retNum = sp->vmt->Request(p->sp);
		if ( retNum == -1 )
		{
			p->cur_state = Oops;
		}
		else if( retNum == 0 )
     f56:	00 97       	sbiw	r24, 0x00	; 0
     f58:	81 f4       	brne	.+32     	; 0xf7a <sensor_handler+0xa2>
		{
			p->cur_state = Ready;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	88 8f       	std	Y+24, r24	; 0x18
			sp->vmt->Collect(p->sp);
     f5e:	d8 01       	movw	r26, r16
     f60:	1c 96       	adiw	r26, 0x0c	; 12
     f62:	ed 91       	ld	r30, X+
     f64:	fc 91       	ld	r31, X
     f66:	1d 97       	sbiw	r26, 0x0d	; 13
     f68:	06 80       	ldd	r0, Z+6	; 0x06
     f6a:	f7 81       	ldd	r31, Z+7	; 0x07
     f6c:	e0 2d       	mov	r30, r0
     f6e:	88 89       	ldd	r24, Y+16	; 0x10
     f70:	99 89       	ldd	r25, Y+17	; 0x11
     f72:	19 95       	eicall
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
     f74:	80 e0       	ldi	r24, 0x00	; 0
     f76:	90 e0       	ldi	r25, 0x00	; 0
     f78:	31 c0       	rjmp	.+98     	; 0xfdc <sensor_handler+0x104>
			// printf("data : %d\n", data);
			// #endif
		}
		else
		{
			p->cur_state = Running;
     f7a:	22 e0       	ldi	r18, 0x02	; 2
     f7c:	28 8f       	std	Y+24, r18	; 0x18
			p->timeout = (int16_t) retNum;
     f7e:	09 2e       	mov	r0, r25
     f80:	00 0c       	add	r0, r0
     f82:	aa 0b       	sbc	r26, r26
     f84:	bb 0b       	sbc	r27, r27
     f86:	8c 83       	std	Y+4, r24	; 0x04
     f88:	9d 83       	std	Y+5, r25	; 0x05
     f8a:	ae 83       	std	Y+6, r26	; 0x06
     f8c:	bf 83       	std	Y+7, r27	; 0x07
			p->borrow_timeout = (int16_t)  retNum;
     f8e:	8c 87       	std	Y+12, r24	; 0x0c
     f90:	9d 87       	std	Y+13, r25	; 0x0d
     f92:	ae 87       	std	Y+14, r26	; 0x0e
     f94:	bf 87       	std	Y+15, r27	; 0x0f
			LL_POP( timeoutq );
     f96:	80 91 1b 0b 	lds	r24, 0x0B1B
     f9a:	90 91 1c 0b 	lds	r25, 0x0B1C
     f9e:	29 d3       	rcall	.+1618   	; 0x15f2 <ll_pop>
			insert_timeoutq_event( p );
     fa0:	ce 01       	movw	r24, r28
     fa2:	db d0       	rcall	.+438    	; 0x115a <insert_timeoutq_event>
			return 1;
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	19 c0       	rjmp	.+50     	; 0xfdc <sensor_handler+0x104>
		
		
		/* Running : ready to pull data right away */
		case Running :
		//      data = p->sp->vmt->Collect();
		p->cur_state = Ready;
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	88 8f       	std	Y+24, r24	; 0x18
		p->sp->vmt->Collect(p->sp);
     fae:	d8 01       	movw	r26, r16
     fb0:	1c 96       	adiw	r26, 0x0c	; 12
     fb2:	ed 91       	ld	r30, X+
     fb4:	fc 91       	ld	r31, X
     fb6:	1d 97       	sbiw	r26, 0x0d	; 13
     fb8:	06 80       	ldd	r0, Z+6	; 0x06
     fba:	f7 81       	ldd	r31, Z+7	; 0x07
     fbc:	e0 2d       	mov	r30, r0
     fbe:	c8 01       	movw	r24, r16
     fc0:	19 95       	eicall
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
     fc2:	80 e0       	ldi	r24, 0x00	; 0
     fc4:	90 e0       	ldi	r25, 0x00	; 0
		/* Running : ready to pull data right away */
		case Running :
		//      data = p->sp->vmt->Collect();
		p->cur_state = Ready;
		p->sp->vmt->Collect(p->sp);
		break;
     fc6:	0a c0       	rjmp	.+20     	; 0xfdc <sensor_handler+0x104>
		
		/* Oops : when some errors occur */
		case Oops :
		/* TODO : ( we may want to do something in reset function and ) re-init by setting the state to new */
#ifdef DEBUG
		      printf("Something really wrong happens\n");
     fc8:	89 e3       	ldi	r24, 0x39	; 57
     fca:	93 e0       	ldi	r25, 0x03	; 3
     fcc:	0e 94 c2 1c 	call	0x3984	; 0x3984 <puts>
#endif
		p->cur_state = New;
     fd0:	18 8e       	std	Y+24, r1	; 0x18
		break;
	}
	return 0;
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	90 e0       	ldi	r25, 0x00	; 0
		/* TODO : ( we may want to do something in reset function and ) re-init by setting the state to new */
#ifdef DEBUG
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
     fd6:	02 c0       	rjmp	.+4      	; 0xfdc <sensor_handler+0x104>
	}
	return 0;
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	90 e0       	ldi	r25, 0x00	; 0
	// printf(" run :\n\t");
	// p->sp->vmt->MyPrint(p->sp);

}
     fdc:	df 91       	pop	r29
     fde:	cf 91       	pop	r28
     fe0:	1f 91       	pop	r17
     fe2:	0f 91       	pop	r16
     fe4:	08 95       	ret

00000fe6 <device_handler>:
 */
/*************************************************************************//**
  @brief device_handler function to decide the execution logic of a non-sensor device according to its state.
*****************************************************************************/
int device_handler( struct event *p )
{
     fe6:	0f 93       	push	r16
     fe8:	1f 93       	push	r17
     fea:	cf 93       	push	r28
     fec:	df 93       	push	r29
     fee:	fc 01       	movw	r30, r24
	int retNum = 0;
	BaseDevice * bdp = (BaseDevice *) ( p->load_p );
     ff0:	c2 89       	ldd	r28, Z+18	; 0x12
     ff2:	d3 89       	ldd	r29, Z+19	; 0x13
	LoadDataDevice *ldp = (LoadDataDevice*) ( p->load_p );
	DemoStorageDevice *ddp = (DemoStorageDevice*) ( p->store_p );
     ff4:	04 89       	ldd	r16, Z+20	; 0x14
     ff6:	15 89       	ldd	r17, Z+21	; 0x15

	/* sanity check */
	if( p == EV_NULL )
     ff8:	89 2b       	or	r24, r25
     ffa:	29 f4       	brne	.+10     	; 0x1006 <device_handler+0x20>
	{
		#ifdef DEBUG
		printf("Null Event Error !!!\n");
     ffc:	84 e2       	ldi	r24, 0x24	; 36
     ffe:	93 e0       	ldi	r25, 0x03	; 3
    1000:	0e 94 c2 1c 	call	0x3984	; 0x3984 <puts>
		#endif
		return 0;
    1004:	35 c0       	rjmp	.+106    	; 0x1070 <device_handler+0x8a>
	}
	
	switch( p->cur_state )
    1006:	90 8d       	ldd	r25, Z+24	; 0x18
    1008:	99 23       	and	r25, r25
    100a:	19 f0       	breq	.+6      	; 0x1012 <device_handler+0x2c>
    100c:	91 30       	cpi	r25, 0x01	; 1
    100e:	21 f0       	breq	.+8      	; 0x1018 <device_handler+0x32>
    1010:	2f c0       	rjmp	.+94     	; 0x1070 <device_handler+0x8a>
	{
		/* New : init first, if retNum is not 0 goto Oops state */
		case New :
			p->cur_state = Ready;
    1012:	81 e0       	ldi	r24, 0x01	; 1
    1014:	80 8f       	std	Z+24, r24	; 0x18
			break;
    1016:	2c c0       	rjmp	.+88     	; 0x1070 <device_handler+0x8a>
		case Ready :
			p->cur_state = Ready;
			if( bdp->device_vt->getType(bdp) == TYPE_DEVICE )
    1018:	e8 81       	ld	r30, Y
    101a:	f9 81       	ldd	r31, Y+1	; 0x01
    101c:	06 80       	ldd	r0, Z+6	; 0x06
    101e:	f7 81       	ldd	r31, Z+7	; 0x07
    1020:	e0 2d       	mov	r30, r0
    1022:	ce 01       	movw	r24, r28
    1024:	19 95       	eicall
    1026:	05 97       	sbiw	r24, 0x05	; 5
    1028:	81 f4       	brne	.+32     	; 0x104a <device_handler+0x64>
			{
				printf("Load Device\n");
    102a:	88 e5       	ldi	r24, 0x58	; 88
    102c:	93 e0       	ldi	r25, 0x03	; 3
    102e:	0e 94 c2 1c 	call	0x3984	; 0x3984 <puts>
				ldp->vmt->Execute(ldp);
    1032:	ea 81       	ldd	r30, Y+2	; 0x02
    1034:	fb 81       	ldd	r31, Y+3	; 0x03
    1036:	02 80       	ldd	r0, Z+2	; 0x02
    1038:	f3 81       	ldd	r31, Z+3	; 0x03
    103a:	e0 2d       	mov	r30, r0
    103c:	ce 01       	movw	r24, r28
    103e:	19 95       	eicall
				printf("Load Device Finish\n");
    1040:	84 e6       	ldi	r24, 0x64	; 100
    1042:	93 e0       	ldi	r25, 0x03	; 3
    1044:	0e 94 c2 1c 	call	0x3984	; 0x3984 <puts>
    1048:	13 c0       	rjmp	.+38     	; 0x1070 <device_handler+0x8a>
			}	
			else if( bdp->device_vt->getType(bdp) == TYPE_STORAGE_DEVICE )
    104a:	e8 81       	ld	r30, Y
    104c:	f9 81       	ldd	r31, Y+1	; 0x01
    104e:	06 80       	ldd	r0, Z+6	; 0x06
    1050:	f7 81       	ldd	r31, Z+7	; 0x07
    1052:	e0 2d       	mov	r30, r0
    1054:	ce 01       	movw	r24, r28
    1056:	19 95       	eicall
    1058:	04 97       	sbiw	r24, 0x04	; 4
    105a:	51 f4       	brne	.+20     	; 0x1070 <device_handler+0x8a>
			{
				ddp->vmt->Execute(ddp);
    105c:	d8 01       	movw	r26, r16
    105e:	12 96       	adiw	r26, 0x02	; 2
    1060:	ed 91       	ld	r30, X+
    1062:	fc 91       	ld	r31, X
    1064:	13 97       	sbiw	r26, 0x03	; 3
    1066:	02 80       	ldd	r0, Z+2	; 0x02
    1068:	f3 81       	ldd	r31, Z+3	; 0x03
    106a:	e0 2d       	mov	r30, r0
    106c:	c8 01       	movw	r24, r16
    106e:	19 95       	eicall
			break;
		default :
			break;
	}
	return retNum;
}
    1070:	80 e0       	ldi	r24, 0x00	; 0
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	df 91       	pop	r29
    1076:	cf 91       	pop	r28
    1078:	1f 91       	pop	r17
    107a:	0f 91       	pop	r16
    107c:	08 95       	ret

0000107e <init_timeoutq>:

/*************************************************************************//**
  @brief Init function of scheduler, which initialize all events and put them into freelist
*****************************************************************************/
void init_timeoutq()
{
    107e:	0f 93       	push	r16
    1080:	1f 93       	push	r17
    1082:	cf 93       	push	r28
    1084:	df 93       	push	r29
	int i;

	timeoutq = (struct event *)&TQ;
    1086:	e7 e1       	ldi	r30, 0x17	; 23
    1088:	fb e0       	ldi	r31, 0x0B	; 11
    108a:	f0 93 1c 0b 	sts	0x0B1C, r31
    108e:	e0 93 1b 0b 	sts	0x0B1B, r30
	LL_INIT(timeoutq);
    1092:	f3 83       	std	Z+3, r31	; 0x03
    1094:	e2 83       	std	Z+2, r30	; 0x02
    1096:	f1 83       	std	Z+1, r31	; 0x01
    1098:	e0 83       	st	Z, r30
	freelist = (struct event *)&FL;
    109a:	ef e6       	ldi	r30, 0x6F	; 111
    109c:	fb e0       	ldi	r31, 0x0B	; 11
    109e:	f0 93 74 0b 	sts	0x0B74, r31
    10a2:	e0 93 73 0b 	sts	0x0B73, r30
	LL_INIT(freelist);
    10a6:	f3 83       	std	Z+3, r31	; 0x03
    10a8:	e2 83       	std	Z+2, r30	; 0x02
    10aa:	f1 83       	std	Z+1, r31	; 0x01
    10ac:	e0 83       	st	Z, r30
    10ae:	c7 e6       	ldi	r28, 0x67	; 103
    10b0:	d9 e0       	ldi	r29, 0x09	; 9
    10b2:	07 e1       	ldi	r16, 0x17	; 23
    10b4:	1b e0       	ldi	r17, 0x0B	; 11

	for (i=0; i<MAX_EVENTS; i++) {
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
    10b6:	be 01       	movw	r22, r28
    10b8:	80 91 73 0b 	lds	r24, 0x0B73
    10bc:	90 91 74 0b 	lds	r25, 0x0B74
    10c0:	62 d2       	rcall	.+1220   	; 0x1586 <ll_r_insert>
    10c2:	6b 96       	adiw	r28, 0x1b	; 27
	timeoutq = (struct event *)&TQ;
	LL_INIT(timeoutq);
	freelist = (struct event *)&FL;
	LL_INIT(freelist);

	for (i=0; i<MAX_EVENTS; i++) {
    10c4:	c0 17       	cp	r28, r16
    10c6:	d1 07       	cpc	r29, r17
    10c8:	b1 f7       	brne	.-20     	; 0x10b6 <init_timeoutq+0x38>
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
	}

	return;
}
    10ca:	df 91       	pop	r29
    10cc:	cf 91       	pop	r28
    10ce:	1f 91       	pop	r17
    10d0:	0f 91       	pop	r16
    10d2:	08 95       	ret

000010d4 <next_event_time_collapse>:

/*************************************************************************//**
  @brief Update next event's timeout value when we set timer for it.
*****************************************************************************/
void next_event_time_collapse(int32_t sleep_time)
{
    10d4:	cf 92       	push	r12
    10d6:	df 92       	push	r13
    10d8:	ef 92       	push	r14
    10da:	ff 92       	push	r15
    10dc:	6b 01       	movw	r12, r22
    10de:	7c 01       	movw	r14, r24
	struct event * ev = ( struct event * ) LL_TOP( timeoutq );
    10e0:	80 91 1b 0b 	lds	r24, 0x0B1B
    10e4:	90 91 1c 0b 	lds	r25, 0x0B1C
    10e8:	45 d2       	rcall	.+1162   	; 0x1574 <ll_first>
	if( EV_NULL == ev )
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	69 f0       	breq	.+26     	; 0x1108 <next_event_time_collapse+0x34>
		return;
	ev->timeout -= sleep_time;
    10ee:	fc 01       	movw	r30, r24
    10f0:	44 81       	ldd	r20, Z+4	; 0x04
    10f2:	55 81       	ldd	r21, Z+5	; 0x05
    10f4:	66 81       	ldd	r22, Z+6	; 0x06
    10f6:	77 81       	ldd	r23, Z+7	; 0x07
    10f8:	4c 19       	sub	r20, r12
    10fa:	5d 09       	sbc	r21, r13
    10fc:	6e 09       	sbc	r22, r14
    10fe:	7f 09       	sbc	r23, r15
    1100:	44 83       	std	Z+4, r20	; 0x04
    1102:	55 83       	std	Z+5, r21	; 0x05
    1104:	66 83       	std	Z+6, r22	; 0x06
    1106:	77 83       	std	Z+7, r23	; 0x07
}
    1108:	ff 90       	pop	r15
    110a:	ef 90       	pop	r14
    110c:	df 90       	pop	r13
    110e:	cf 90       	pop	r12
    1110:	08 95       	ret

00001112 <get_next_interval>:
*****************************************************************************/
int32_t get_next_interval()
{

	int32_t wait_time = MAX_SLEEP_INTERVAL;
	struct event * ev = ( struct event * ) LL_TOP( timeoutq );
    1112:	80 91 1b 0b 	lds	r24, 0x0B1B
    1116:	90 91 1c 0b 	lds	r25, 0x0B1C
    111a:	2c d2       	rcall	.+1112   	; 0x1574 <ll_first>

	/* sanity check */
    /* no event in queue */
    /* TODO : to optimize the sleep time or let the CPU sleep or set up some other interrupts */
	if( EV_NULL == ev )
    111c:	00 97       	sbiw	r24, 0x00	; 0
    111e:	69 f4       	brne	.+26     	; 0x113a <get_next_interval+0x28>
	{
#ifdef DEBUG
		printf("we may get some memory leakage issue, or something really bad occurs\n");
    1120:	87 e7       	ldi	r24, 0x77	; 119
    1122:	93 e0       	ldi	r25, 0x03	; 3
    1124:	0e 94 c2 1c 	call	0x3984	; 0x3984 <puts>
		printf("so we are going to take some really sleep, since no event in scheduler\n");
    1128:	8c eb       	ldi	r24, 0xBC	; 188
    112a:	93 e0       	ldi	r25, 0x03	; 3
    112c:	0e 94 c2 1c 	call	0x3984	; 0x3984 <puts>
#endif
	    return wait_time;
    1130:	60 e4       	ldi	r22, 0x40	; 64
    1132:	7f e1       	ldi	r23, 0x1F	; 31
    1134:	80 e0       	ldi	r24, 0x00	; 0
    1136:	90 e0       	ldi	r25, 0x00	; 0
    1138:	08 95       	ret
	}
	
	/* if the next event is nearer */
	if( wait_time > ev->timeout )
    113a:	fc 01       	movw	r30, r24
    113c:	64 81       	ldd	r22, Z+4	; 0x04
    113e:	75 81       	ldd	r23, Z+5	; 0x05
    1140:	86 81       	ldd	r24, Z+6	; 0x06
    1142:	97 81       	ldd	r25, Z+7	; 0x07
    1144:	60 34       	cpi	r22, 0x40	; 64
    1146:	ff e1       	ldi	r31, 0x1F	; 31
    1148:	7f 07       	cpc	r23, r31
    114a:	81 05       	cpc	r24, r1
    114c:	91 05       	cpc	r25, r1
    114e:	24 f0       	brlt	.+8      	; 0x1158 <get_next_interval+0x46>
  @brief Return the the time ( ms ) of the next event
*****************************************************************************/
int32_t get_next_interval()
{

	int32_t wait_time = MAX_SLEEP_INTERVAL;
    1150:	60 e4       	ldi	r22, 0x40	; 64
    1152:	7f e1       	ldi	r23, 0x1F	; 31
    1154:	80 e0       	ldi	r24, 0x00	; 0
    1156:	90 e0       	ldi	r25, 0x00	; 0
	{
		wait_time = ev->timeout;
	}
	/* if the next event time is longer, we need to wait it time by time in handle_timeoutq_event() function, since currently, the longest waiting time support is 8s */
	return wait_time;
}
    1158:	08 95       	ret

0000115a <insert_timeoutq_event>:

/*************************************************************************//**
  @brief Insert a new event into the scheduler according to timeout order
*****************************************************************************/
void insert_timeoutq_event( struct event * ep)
{
    115a:	0f 93       	push	r16
    115c:	1f 93       	push	r17
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	dc 01       	movw	r26, r24
	// Try to insert it according to timeout and timeoutq
	struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
    1164:	c0 91 1b 0b 	lds	r28, 0x0B1B
    1168:	d0 91 1c 0b 	lds	r29, 0x0B1C
    116c:	ea 81       	ldd	r30, Y+2	; 0x02
    116e:	fb 81       	ldd	r31, Y+3	; 0x03
    1170:	ce 17       	cp	r28, r30
    1172:	df 07       	cpc	r29, r31
    1174:	71 f1       	breq	.+92     	; 0x11d2 <insert_timeoutq_event+0x78>
	{
		if( it != EV_NULL )
    1176:	30 97       	sbiw	r30, 0x00	; 0
    1178:	31 f1       	breq	.+76     	; 0x11c6 <insert_timeoutq_event+0x6c>
		{
			if( ( it->timeout ) > ( ep->timeout ) )
    117a:	04 81       	ldd	r16, Z+4	; 0x04
    117c:	15 81       	ldd	r17, Z+5	; 0x05
    117e:	26 81       	ldd	r18, Z+6	; 0x06
    1180:	37 81       	ldd	r19, Z+7	; 0x07
    1182:	14 96       	adiw	r26, 0x04	; 4
    1184:	4d 91       	ld	r20, X+
    1186:	5d 91       	ld	r21, X+
    1188:	6d 91       	ld	r22, X+
    118a:	7c 91       	ld	r23, X
    118c:	17 97       	sbiw	r26, 0x07	; 7
    118e:	40 17       	cp	r20, r16
    1190:	51 07       	cpc	r21, r17
    1192:	62 07       	cpc	r22, r18
    1194:	73 07       	cpc	r23, r19
    1196:	6c f4       	brge	.+26     	; 0x11b2 <insert_timeoutq_event+0x58>
			{
				it->timeout -= ep->timeout;
    1198:	04 1b       	sub	r16, r20
    119a:	15 0b       	sbc	r17, r21
    119c:	26 0b       	sbc	r18, r22
    119e:	37 0b       	sbc	r19, r23
    11a0:	04 83       	std	Z+4, r16	; 0x04
    11a2:	15 83       	std	Z+5, r17	; 0x05
    11a4:	26 83       	std	Z+6, r18	; 0x06
    11a6:	37 83       	std	Z+7, r19	; 0x07
				LL_L_INSERT( it, ep );
    11a8:	bd 01       	movw	r22, r26
    11aa:	80 81       	ld	r24, Z
    11ac:	91 81       	ldd	r25, Z+1	; 0x01
    11ae:	eb d1       	rcall	.+982    	; 0x1586 <ll_r_insert>
    11b0:	18 c0       	rjmp	.+48     	; 0x11e2 <insert_timeoutq_event+0x88>
				// printf("left insert \n");
				break;
			}
			else
			{
				ep->timeout -= it->timeout;
    11b2:	40 1b       	sub	r20, r16
    11b4:	51 0b       	sbc	r21, r17
    11b6:	62 0b       	sbc	r22, r18
    11b8:	73 0b       	sbc	r23, r19
    11ba:	14 96       	adiw	r26, 0x04	; 4
    11bc:	4d 93       	st	X+, r20
    11be:	5d 93       	st	X+, r21
    11c0:	6d 93       	st	X+, r22
    11c2:	7c 93       	st	X, r23
    11c4:	17 97       	sbiw	r26, 0x07	; 7
	// Try to insert it according to timeout and timeoutq
	struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
    11c6:	02 80       	ldd	r0, Z+2	; 0x02
    11c8:	f3 81       	ldd	r31, Z+3	; 0x03
    11ca:	e0 2d       	mov	r30, r0
    11cc:	ce 17       	cp	r28, r30
    11ce:	df 07       	cpc	r29, r31
    11d0:	91 f6       	brne	.-92     	; 0x1176 <insert_timeoutq_event+0x1c>
	}
	
	// If not insert it left to the header
	if( is_pushed == 0 )
	{
		LL_APPEND(timeoutq, ep);
    11d2:	e0 91 1b 0b 	lds	r30, 0x0B1B
    11d6:	f0 91 1c 0b 	lds	r31, 0x0B1C
    11da:	bd 01       	movw	r22, r26
    11dc:	80 81       	ld	r24, Z
    11de:	91 81       	ldd	r25, Z+1	; 0x01
    11e0:	d2 d1       	rcall	.+932    	; 0x1586 <ll_r_insert>

	#ifdef DEBUG
	// dump_timeoutq();
	#endif

}
    11e2:	df 91       	pop	r29
    11e4:	cf 91       	pop	r28
    11e6:	1f 91       	pop	r17
    11e8:	0f 91       	pop	r16
    11ea:	08 95       	ret

000011ec <load_new_sensor>:

/*************************************************************************//**
  @brief Load a brand new sensor activity into the scheduler's timeoutQ
*****************************************************************************/
int load_new_sensor( int32_t timeout, int32_t repeat, BaseSensor *device_ptr, int otherinfo )
{
    11ec:	4f 92       	push	r4
    11ee:	5f 92       	push	r5
    11f0:	6f 92       	push	r6
    11f2:	7f 92       	push	r7
    11f4:	8f 92       	push	r8
    11f6:	9f 92       	push	r9
    11f8:	af 92       	push	r10
    11fa:	bf 92       	push	r11
    11fc:	ef 92       	push	r14
    11fe:	ff 92       	push	r15
    1200:	0f 93       	push	r16
    1202:	1f 93       	push	r17
    1204:	2b 01       	movw	r4, r22
    1206:	3c 01       	movw	r6, r24
    1208:	49 01       	movw	r8, r18
    120a:	5a 01       	movw	r10, r20

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    120c:	80 91 73 0b 	lds	r24, 0x0B73
    1210:	90 91 74 0b 	lds	r25, 0x0B74
    1214:	ee d1       	rcall	.+988    	; 0x15f2 <ll_pop>
    1216:	fc 01       	movw	r30, r24
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
    1218:	89 2b       	or	r24, r25
    121a:	d9 f0       	breq	.+54     	; 0x1252 <load_new_sensor+0x66>
        return -1;
    ep->timeout = timeout;
    121c:	44 82       	std	Z+4, r4	; 0x04
    121e:	55 82       	std	Z+5, r5	; 0x05
    1220:	66 82       	std	Z+6, r6	; 0x06
    1222:	77 82       	std	Z+7, r7	; 0x07
    ep->repeat_interval = repeat;
    1224:	80 86       	std	Z+8, r8	; 0x08
    1226:	91 86       	std	Z+9, r9	; 0x09
    1228:	a2 86       	std	Z+10, r10	; 0x0a
    122a:	b3 86       	std	Z+11, r11	; 0x0b
	ep->borrow_timeout = 0;
    122c:	14 86       	std	Z+12, r1	; 0x0c
    122e:	15 86       	std	Z+13, r1	; 0x0d
    1230:	16 86       	std	Z+14, r1	; 0x0e
    1232:	17 86       	std	Z+15, r1	; 0x0f
    ep->sp = device_ptr;
    1234:	11 8b       	std	Z+17, r17	; 0x11
    1236:	00 8b       	std	Z+16, r16	; 0x10
    ep->info = otherinfo;
    1238:	f7 8a       	std	Z+23, r15	; 0x17
    123a:	e6 8a       	std	Z+22, r14	; 0x16
    ep->cur_state = Ready;
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	80 8f       	std	Z+24, r24	; 0x18
    ep->run = sensor_handler;
    1240:	8c e6       	ldi	r24, 0x6C	; 108
    1242:	97 e0       	ldi	r25, 0x07	; 7
    1244:	92 8f       	std	Z+26, r25	; 0x1a
    1246:	81 8f       	std	Z+25, r24	; 0x19
    insert_timeoutq_event( ep );
    1248:	cf 01       	movw	r24, r30
    124a:	87 df       	rcall	.-242    	; 0x115a <insert_timeoutq_event>
    return 0;
    124c:	80 e0       	ldi	r24, 0x00	; 0
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 c0       	rjmp	.+4      	; 0x1256 <load_new_sensor+0x6a>

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
        return -1;
    1252:	8f ef       	ldi	r24, 0xFF	; 255
    1254:	9f ef       	ldi	r25, 0xFF	; 255
    ep->info = otherinfo;
    ep->cur_state = Ready;
    ep->run = sensor_handler;
    insert_timeoutq_event( ep );
    return 0;
}
    1256:	1f 91       	pop	r17
    1258:	0f 91       	pop	r16
    125a:	ff 90       	pop	r15
    125c:	ef 90       	pop	r14
    125e:	bf 90       	pop	r11
    1260:	af 90       	pop	r10
    1262:	9f 90       	pop	r9
    1264:	8f 90       	pop	r8
    1266:	7f 90       	pop	r7
    1268:	6f 90       	pop	r6
    126a:	5f 90       	pop	r5
    126c:	4f 90       	pop	r4
    126e:	08 95       	ret

00001270 <load_new_device>:

/*************************************************************************//**
  @brief Load a brand new device activity into the scheduler's timeoutQ
*****************************************************************************/
int load_new_device( int32_t timeout, int32_t repeat, BaseDevice *device_ptr, int otherinfo )
{
    1270:	4f 92       	push	r4
    1272:	5f 92       	push	r5
    1274:	6f 92       	push	r6
    1276:	7f 92       	push	r7
    1278:	8f 92       	push	r8
    127a:	9f 92       	push	r9
    127c:	af 92       	push	r10
    127e:	bf 92       	push	r11
    1280:	ef 92       	push	r14
    1282:	ff 92       	push	r15
    1284:	0f 93       	push	r16
    1286:	1f 93       	push	r17
    1288:	2b 01       	movw	r4, r22
    128a:	3c 01       	movw	r6, r24
    128c:	49 01       	movw	r8, r18
    128e:	5a 01       	movw	r10, r20

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    1290:	80 91 73 0b 	lds	r24, 0x0B73
    1294:	90 91 74 0b 	lds	r25, 0x0B74
    1298:	ac d1       	rcall	.+856    	; 0x15f2 <ll_pop>
    129a:	fc 01       	movw	r30, r24
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
    129c:	89 2b       	or	r24, r25
    129e:	e9 f0       	breq	.+58     	; 0x12da <load_new_device+0x6a>
        return -1;
    ep->timeout = timeout;
    12a0:	44 82       	std	Z+4, r4	; 0x04
    12a2:	55 82       	std	Z+5, r5	; 0x05
    12a4:	66 82       	std	Z+6, r6	; 0x06
    12a6:	77 82       	std	Z+7, r7	; 0x07
    ep->repeat_interval = repeat;
    12a8:	80 86       	std	Z+8, r8	; 0x08
    12aa:	91 86       	std	Z+9, r9	; 0x09
    12ac:	a2 86       	std	Z+10, r10	; 0x0a
    12ae:	b3 86       	std	Z+11, r11	; 0x0b
	ep->borrow_timeout = 0;
    12b0:	14 86       	std	Z+12, r1	; 0x0c
    12b2:	15 86       	std	Z+13, r1	; 0x0d
    12b4:	16 86       	std	Z+14, r1	; 0x0e
    12b6:	17 86       	std	Z+15, r1	; 0x0f
    ep->load_p = device_ptr;
    12b8:	13 8b       	std	Z+19, r17	; 0x13
    12ba:	02 8b       	std	Z+18, r16	; 0x12
	ep->store_p = device_ptr;
    12bc:	15 8b       	std	Z+21, r17	; 0x15
    12be:	04 8b       	std	Z+20, r16	; 0x14
    ep->info = otherinfo;
    12c0:	f7 8a       	std	Z+23, r15	; 0x17
    12c2:	e6 8a       	std	Z+22, r14	; 0x16
    ep->cur_state = Ready;
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	80 8f       	std	Z+24, r24	; 0x18
    ep->run = device_handler;
    12c8:	83 ef       	ldi	r24, 0xF3	; 243
    12ca:	97 e0       	ldi	r25, 0x07	; 7
    12cc:	92 8f       	std	Z+26, r25	; 0x1a
    12ce:	81 8f       	std	Z+25, r24	; 0x19
    insert_timeoutq_event( ep );
    12d0:	cf 01       	movw	r24, r30
    12d2:	43 df       	rcall	.-378    	; 0x115a <insert_timeoutq_event>
    return 0;
    12d4:	80 e0       	ldi	r24, 0x00	; 0
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	02 c0       	rjmp	.+4      	; 0x12de <load_new_device+0x6e>

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
        return -1;
    12da:	8f ef       	ldi	r24, 0xFF	; 255
    12dc:	9f ef       	ldi	r25, 0xFF	; 255
    ep->info = otherinfo;
    ep->cur_state = Ready;
    ep->run = device_handler;
    insert_timeoutq_event( ep );
    return 0;
}
    12de:	1f 91       	pop	r17
    12e0:	0f 91       	pop	r16
    12e2:	ff 90       	pop	r15
    12e4:	ef 90       	pop	r14
    12e6:	bf 90       	pop	r11
    12e8:	af 90       	pop	r10
    12ea:	9f 90       	pop	r9
    12ec:	8f 90       	pop	r8
    12ee:	7f 90       	pop	r7
    12f0:	6f 90       	pop	r6
    12f2:	5f 90       	pop	r5
    12f4:	4f 90       	pop	r4
    12f6:	08 95       	ret

000012f8 <handle_timeoutq_event>:

/*************************************************************************//**
  @brief Handle the next event in timeoutQ: execute the event's handler function according to the device type, re-insert it according to the period, and set a timer of next event.
*****************************************************************************/
int handle_timeoutq_event( )
{
    12f8:	cf 92       	push	r12
    12fa:	df 92       	push	r13
    12fc:	ef 92       	push	r14
    12fe:	ff 92       	push	r15
    1300:	0f 93       	push	r16
    1302:	1f 93       	push	r17
    1304:	cf 93       	push	r28
    1306:	df 93       	push	r29
	int retNum, sleep_time;
	/* assume we get a valid one */
	struct event * ev = (struct event * )LL_TOP( timeoutq );
    1308:	80 91 1b 0b 	lds	r24, 0x0B1B
    130c:	90 91 1c 0b 	lds	r25, 0x0B1C
    1310:	31 d1       	rcall	.+610    	; 0x1574 <ll_first>
    1312:	ec 01       	movw	r28, r24
	if( EV_NULL == ev )
    1314:	89 2b       	or	r24, r25
    1316:	39 f4       	brne	.+14     	; 0x1326 <handle_timeoutq_event+0x2e>
	{
		printf("err\n");
    1318:	83 e0       	ldi	r24, 0x03	; 3
    131a:	94 e0       	ldi	r25, 0x04	; 4
    131c:	0e 94 c2 1c 	call	0x3984	; 0x3984 <puts>
        return -1;
    1320:	8f ef       	ldi	r24, 0xFF	; 255
    1322:	9f ef       	ldi	r25, 0xFF	; 255
    1324:	8b c0       	rjmp	.+278    	; 0x143c <handle_timeoutq_event+0x144>
	}
    
    /* sanity check */
    if( ev->sp == NULL && ev->load_p == NULL && ev->store_p == NULL)
    1326:	88 89       	ldd	r24, Y+16	; 0x10
    1328:	99 89       	ldd	r25, Y+17	; 0x11
    132a:	89 2b       	or	r24, r25
    132c:	49 f4       	brne	.+18     	; 0x1340 <handle_timeoutq_event+0x48>
    132e:	8a 89       	ldd	r24, Y+18	; 0x12
    1330:	9b 89       	ldd	r25, Y+19	; 0x13
    1332:	89 2b       	or	r24, r25
    1334:	29 f4       	brne	.+10     	; 0x1340 <handle_timeoutq_event+0x48>
    1336:	8c 89       	ldd	r24, Y+20	; 0x14
    1338:	9d 89       	ldd	r25, Y+21	; 0x15
    133a:	89 2b       	or	r24, r25
    133c:	09 f4       	brne	.+2      	; 0x1340 <handle_timeoutq_event+0x48>
    133e:	7c c0       	rjmp	.+248    	; 0x1438 <handle_timeoutq_event+0x140>
        return -1;

	/* if it is not the right time, re-set the timer */
	if( ev->timeout != 0 )
    1340:	8c 81       	ldd	r24, Y+4	; 0x04
    1342:	9d 81       	ldd	r25, Y+5	; 0x05
    1344:	ae 81       	ldd	r26, Y+6	; 0x06
    1346:	bf 81       	ldd	r27, Y+7	; 0x07
    1348:	89 2b       	or	r24, r25
    134a:	8a 2b       	or	r24, r26
    134c:	8b 2b       	or	r24, r27
    134e:	71 f0       	breq	.+28     	; 0x136c <handle_timeoutq_event+0x74>
	{
		sleep_time = get_next_interval();
    1350:	e0 de       	rcall	.-576    	; 0x1112 <get_next_interval>
		next_event_time_collapse(sleep_time);
    1352:	6b 01       	movw	r12, r22
    1354:	77 0f       	add	r23, r23
    1356:	ee 08       	sbc	r14, r14
    1358:	ff 08       	sbc	r15, r15
    135a:	c7 01       	movw	r24, r14
    135c:	b6 01       	movw	r22, r12
    135e:	ba de       	rcall	.-652    	; 0x10d4 <next_event_time_collapse>
		set_timer(sleep_time);
    1360:	c7 01       	movw	r24, r14
    1362:	b6 01       	movw	r22, r12
    1364:	cb da       	rcall	.-2666   	; 0x8fc <set_timer>
		return 0;
    1366:	80 e0       	ldi	r24, 0x00	; 0
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	68 c0       	rjmp	.+208    	; 0x143c <handle_timeoutq_event+0x144>
	}
	
	/* retNum may need to be designed in other ways */
    retNum = ev->run( ev );
    136c:	e9 8d       	ldd	r30, Y+25	; 0x19
    136e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1370:	ce 01       	movw	r24, r28
    1372:	19 95       	eicall
	/* 
	 * return 1 if it has to with some borrow time( have a request-time!=0 case ) 
	 * which means the event has already entered the scheduler, 
	 * and won't need to do anything else
	 */
	if( retNum == 1 )
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	a9 f4       	brne	.+42     	; 0x13a2 <handle_timeoutq_event+0xaa>
	{
		sleep_time = get_next_interval();
    1378:	cc de       	rcall	.-616    	; 0x1112 <get_next_interval>
		/* judge if the next top in queue has a timeout <= 0, which we may want to handle it right now */
		if( sleep_time == 0 )
    137a:	61 15       	cp	r22, r1
    137c:	71 05       	cpc	r23, r1
    137e:	21 f4       	brne	.+8      	; 0x1388 <handle_timeoutq_event+0x90>
		{
			handle_timeoutq_event();
    1380:	bb df       	rcall	.-138    	; 0x12f8 <handle_timeoutq_event>
			return 0;
    1382:	80 e0       	ldi	r24, 0x00	; 0
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	5a c0       	rjmp	.+180    	; 0x143c <handle_timeoutq_event+0x144>
		}
		next_event_time_collapse(sleep_time);	
    1388:	6b 01       	movw	r12, r22
    138a:	77 0f       	add	r23, r23
    138c:	ee 08       	sbc	r14, r14
    138e:	ff 08       	sbc	r15, r15
    1390:	c7 01       	movw	r24, r14
    1392:	b6 01       	movw	r22, r12
    1394:	9f de       	rcall	.-706    	; 0x10d4 <next_event_time_collapse>
		set_timer(sleep_time);
    1396:	c7 01       	movw	r24, r14
    1398:	b6 01       	movw	r22, r12
    139a:	b0 da       	rcall	.-2720   	; 0x8fc <set_timer>
		return 0;
    139c:	80 e0       	ldi	r24, 0x00	; 0
    139e:	90 e0       	ldi	r25, 0x00	; 0
    13a0:	4d c0       	rjmp	.+154    	; 0x143c <handle_timeoutq_event+0x144>
    /*
	 * return 0 means we just fired a case, 
	 * and may need to judge it over the repeat time to re-insert into the scheduler,
	 * since we definitely want to collect data periodically
	 */
    LL_POP( timeoutq );
    13a2:	80 91 1b 0b 	lds	r24, 0x0B1B
    13a6:	90 91 1c 0b 	lds	r25, 0x0B1C
    13aa:	23 d1       	rcall	.+582    	; 0x15f2 <ll_pop>
    if( ev->repeat_interval != 0 )
    13ac:	88 85       	ldd	r24, Y+8	; 0x08
    13ae:	99 85       	ldd	r25, Y+9	; 0x09
    13b0:	aa 85       	ldd	r26, Y+10	; 0x0a
    13b2:	bb 85       	ldd	r27, Y+11	; 0x0b
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	a1 05       	cpc	r26, r1
    13b8:	b1 05       	cpc	r27, r1
    13ba:	19 f1       	breq	.+70     	; 0x1402 <handle_timeoutq_event+0x10a>
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
    13bc:	4c 85       	ldd	r20, Y+12	; 0x0c
    13be:	5d 85       	ldd	r21, Y+13	; 0x0d
    13c0:	6e 85       	ldd	r22, Y+14	; 0x0e
    13c2:	7f 85       	ldd	r23, Y+15	; 0x0f
    13c4:	8c 01       	movw	r16, r24
    13c6:	9d 01       	movw	r18, r26
    13c8:	04 1b       	sub	r16, r20
    13ca:	15 0b       	sbc	r17, r21
    13cc:	26 0b       	sbc	r18, r22
    13ce:	37 0b       	sbc	r19, r23
    13d0:	b9 01       	movw	r22, r18
    13d2:	a8 01       	movw	r20, r16
    13d4:	0c 83       	std	Y+4, r16	; 0x04
    13d6:	1d 83       	std	Y+5, r17	; 0x05
    13d8:	2e 83       	std	Y+6, r18	; 0x06
    13da:	3f 83       	std	Y+7, r19	; 0x07
		while( ev->timeout < 0 )
    13dc:	33 23       	and	r19, r19
    13de:	54 f4       	brge	.+20     	; 0x13f4 <handle_timeoutq_event+0xfc>
		{
			ev->timeout += ev->repeat_interval;
    13e0:	48 0f       	add	r20, r24
    13e2:	59 1f       	adc	r21, r25
    13e4:	6a 1f       	adc	r22, r26
    13e6:	7b 1f       	adc	r23, r27
	 */
    LL_POP( timeoutq );
    if( ev->repeat_interval != 0 )
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
		while( ev->timeout < 0 )
    13e8:	77 23       	and	r23, r23
    13ea:	d4 f3       	brlt	.-12     	; 0x13e0 <handle_timeoutq_event+0xe8>
    13ec:	4c 83       	std	Y+4, r20	; 0x04
    13ee:	5d 83       	std	Y+5, r21	; 0x05
    13f0:	6e 83       	std	Y+6, r22	; 0x06
    13f2:	7f 83       	std	Y+7, r23	; 0x07
		{
			ev->timeout += ev->repeat_interval;
		}
		ev->borrow_timeout = 0;
    13f4:	1c 86       	std	Y+12, r1	; 0x0c
    13f6:	1d 86       	std	Y+13, r1	; 0x0d
    13f8:	1e 86       	std	Y+14, r1	; 0x0e
    13fa:	1f 86       	std	Y+15, r1	; 0x0f
        insert_timeoutq_event( ev );
    13fc:	ce 01       	movw	r24, r28
    13fe:	ad de       	rcall	.-678    	; 0x115a <insert_timeoutq_event>
    1400:	06 c0       	rjmp	.+12     	; 0x140e <handle_timeoutq_event+0x116>
    }
    else
    {
        LL_PUSH( freelist, ev );
    1402:	be 01       	movw	r22, r28
    1404:	80 91 73 0b 	lds	r24, 0x0B73
    1408:	90 91 74 0b 	lds	r25, 0x0B74
    140c:	bc d0       	rcall	.+376    	; 0x1586 <ll_r_insert>
    }

	sleep_time = get_next_interval();
    140e:	81 de       	rcall	.-766    	; 0x1112 <get_next_interval>
	/* judge if the next top in queue has a timeout <= 0, which we may want to handle it right now */
	if( sleep_time == 0 )
    1410:	61 15       	cp	r22, r1
    1412:	71 05       	cpc	r23, r1
    1414:	21 f4       	brne	.+8      	; 0x141e <handle_timeoutq_event+0x126>
	{
		handle_timeoutq_event();
    1416:	70 df       	rcall	.-288    	; 0x12f8 <handle_timeoutq_event>
		return 0;
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	0f c0       	rjmp	.+30     	; 0x143c <handle_timeoutq_event+0x144>
	}
	next_event_time_collapse(sleep_time);	
    141e:	6b 01       	movw	r12, r22
    1420:	77 0f       	add	r23, r23
    1422:	ee 08       	sbc	r14, r14
    1424:	ff 08       	sbc	r15, r15
    1426:	c7 01       	movw	r24, r14
    1428:	b6 01       	movw	r22, r12
    142a:	54 de       	rcall	.-856    	; 0x10d4 <next_event_time_collapse>
	set_timer(sleep_time);
    142c:	c7 01       	movw	r24, r14
    142e:	b6 01       	movw	r22, r12
    1430:	65 da       	rcall	.-2870   	; 0x8fc <set_timer>
    return 0;
    1432:	80 e0       	ldi	r24, 0x00	; 0
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 c0       	rjmp	.+4      	; 0x143c <handle_timeoutq_event+0x144>
        return -1;
	}
    
    /* sanity check */
    if( ev->sp == NULL && ev->load_p == NULL && ev->store_p == NULL)
        return -1;
    1438:	8f ef       	ldi	r24, 0xFF	; 255
    143a:	9f ef       	ldi	r25, 0xFF	; 255
		return 0;
	}
	next_event_time_collapse(sleep_time);	
	set_timer(sleep_time);
    return 0;
}
    143c:	df 91       	pop	r29
    143e:	cf 91       	pop	r28
    1440:	1f 91       	pop	r17
    1442:	0f 91       	pop	r16
    1444:	ff 90       	pop	r15
    1446:	ef 90       	pop	r14
    1448:	df 90       	pop	r13
    144a:	cf 90       	pop	r12
    144c:	08 95       	ret

0000144e <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    144e:	a5 db       	rcall	.-2230   	; 0xb9a <HAL_Init>
  SYS_TimerInit();
    1450:	67 d0       	rcall	.+206    	; 0x1520 <SYS_TimerInit>
  PHY_Init();
    1452:	2b dd       	rcall	.-1450   	; 0xeaa <PHY_Init>
  NWK_Init();
    1454:	dc cb       	rjmp	.-2120   	; 0xc0e <NWK_Init>
    1456:	08 95       	ret

00001458 <placeTimer>:

      break;
    }
    prev = t;
  }
}
    1458:	0f 93       	push	r16
    145a:	1f 93       	push	r17
    145c:	cf 93       	push	r28
    145e:	df 93       	push	r29
    1460:	ec 01       	movw	r28, r24
    1462:	80 91 1b 09 	lds	r24, 0x091B
    1466:	90 91 1c 09 	lds	r25, 0x091C
    146a:	00 97       	sbiw	r24, 0x00	; 0
    146c:	09 f4       	brne	.+2      	; 0x1470 <placeTimer+0x18>
    146e:	45 c0       	rjmp	.+138    	; 0x14fa <placeTimer+0xa2>
    1470:	4e 81       	ldd	r20, Y+6	; 0x06
    1472:	5f 81       	ldd	r21, Y+7	; 0x07
    1474:	68 85       	ldd	r22, Y+8	; 0x08
    1476:	79 85       	ldd	r23, Y+9	; 0x09
    1478:	fc 01       	movw	r30, r24
    147a:	02 81       	ldd	r16, Z+2	; 0x02
    147c:	13 81       	ldd	r17, Z+3	; 0x03
    147e:	24 81       	ldd	r18, Z+4	; 0x04
    1480:	35 81       	ldd	r19, Z+5	; 0x05
    1482:	40 17       	cp	r20, r16
    1484:	51 07       	cpc	r21, r17
    1486:	62 07       	cpc	r22, r18
    1488:	73 07       	cpc	r23, r19
    148a:	60 f0       	brcs	.+24     	; 0x14a4 <placeTimer+0x4c>
    148c:	dc 01       	movw	r26, r24
    148e:	17 c0       	rjmp	.+46     	; 0x14be <placeTimer+0x66>
    1490:	02 81       	ldd	r16, Z+2	; 0x02
    1492:	13 81       	ldd	r17, Z+3	; 0x03
    1494:	24 81       	ldd	r18, Z+4	; 0x04
    1496:	35 81       	ldd	r19, Z+5	; 0x05
    1498:	40 17       	cp	r20, r16
    149a:	51 07       	cpc	r21, r17
    149c:	62 07       	cpc	r22, r18
    149e:	73 07       	cpc	r23, r19
    14a0:	68 f4       	brcc	.+26     	; 0x14bc <placeTimer+0x64>
    14a2:	03 c0       	rjmp	.+6      	; 0x14aa <placeTimer+0x52>
    14a4:	fc 01       	movw	r30, r24
    14a6:	a0 e0       	ldi	r26, 0x00	; 0
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	04 1b       	sub	r16, r20
    14ac:	15 0b       	sbc	r17, r21
    14ae:	26 0b       	sbc	r18, r22
    14b0:	37 0b       	sbc	r19, r23
    14b2:	02 83       	std	Z+2, r16	; 0x02
    14b4:	13 83       	std	Z+3, r17	; 0x03
    14b6:	24 83       	std	Z+4, r18	; 0x04
    14b8:	35 83       	std	Z+5, r19	; 0x05
    14ba:	0a c0       	rjmp	.+20     	; 0x14d0 <placeTimer+0x78>
    14bc:	df 01       	movw	r26, r30
    14be:	40 1b       	sub	r20, r16
    14c0:	51 0b       	sbc	r21, r17
    14c2:	62 0b       	sbc	r22, r18
    14c4:	73 0b       	sbc	r23, r19
    14c6:	ed 91       	ld	r30, X+
    14c8:	fc 91       	ld	r31, X
    14ca:	11 97       	sbiw	r26, 0x01	; 1
    14cc:	30 97       	sbiw	r30, 0x00	; 0
    14ce:	01 f7       	brne	.-64     	; 0x1490 <placeTimer+0x38>
    14d0:	4a 83       	std	Y+2, r20	; 0x02
    14d2:	5b 83       	std	Y+3, r21	; 0x03
    14d4:	6c 83       	std	Y+4, r22	; 0x04
    14d6:	7d 83       	std	Y+5, r23	; 0x05
    14d8:	10 97       	sbiw	r26, 0x00	; 0
    14da:	41 f0       	breq	.+16     	; 0x14ec <placeTimer+0x94>
    14dc:	8d 91       	ld	r24, X+
    14de:	9c 91       	ld	r25, X
    14e0:	11 97       	sbiw	r26, 0x01	; 1
    14e2:	99 83       	std	Y+1, r25	; 0x01
    14e4:	88 83       	st	Y, r24
    14e6:	cd 93       	st	X+, r28
    14e8:	dc 93       	st	X, r29
    14ea:	15 c0       	rjmp	.+42     	; 0x1516 <placeTimer+0xbe>
    14ec:	99 83       	std	Y+1, r25	; 0x01
    14ee:	88 83       	st	Y, r24
    14f0:	d0 93 1c 09 	sts	0x091C, r29
    14f4:	c0 93 1b 09 	sts	0x091B, r28
    14f8:	0e c0       	rjmp	.+28     	; 0x1516 <placeTimer+0xbe>
    14fa:	19 82       	std	Y+1, r1	; 0x01
    14fc:	18 82       	st	Y, r1
    14fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1500:	9f 81       	ldd	r25, Y+7	; 0x07
    1502:	a8 85       	ldd	r26, Y+8	; 0x08
    1504:	b9 85       	ldd	r27, Y+9	; 0x09
    1506:	8a 83       	std	Y+2, r24	; 0x02
    1508:	9b 83       	std	Y+3, r25	; 0x03
    150a:	ac 83       	std	Y+4, r26	; 0x04
    150c:	bd 83       	std	Y+5, r27	; 0x05
    150e:	d0 93 1c 09 	sts	0x091C, r29
    1512:	c0 93 1b 09 	sts	0x091B, r28
    1516:	df 91       	pop	r29
    1518:	cf 91       	pop	r28
    151a:	1f 91       	pop	r17
    151c:	0f 91       	pop	r16
    151e:	08 95       	ret

00001520 <SYS_TimerInit>:
    1520:	10 92 1c 09 	sts	0x091C, r1
    1524:	10 92 1b 09 	sts	0x091B, r1
    1528:	08 95       	ret

0000152a <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    152a:	e0 91 1b 09 	lds	r30, 0x091B
    152e:	f0 91 1c 09 	lds	r31, 0x091C
    1532:	30 97       	sbiw	r30, 0x00	; 0
    1534:	71 f0       	breq	.+28     	; 0x1552 <SYS_TimerStarted+0x28>
    if (t == timer)
    1536:	e8 17       	cp	r30, r24
    1538:	f9 07       	cpc	r31, r25
    153a:	21 f4       	brne	.+8      	; 0x1544 <SYS_TimerStarted+0x1a>
    153c:	0c c0       	rjmp	.+24     	; 0x1556 <SYS_TimerStarted+0x2c>
    153e:	8e 17       	cp	r24, r30
    1540:	9f 07       	cpc	r25, r31
    1542:	59 f0       	breq	.+22     	; 0x155a <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1544:	01 90       	ld	r0, Z+
    1546:	f0 81       	ld	r31, Z
    1548:	e0 2d       	mov	r30, r0
    154a:	30 97       	sbiw	r30, 0x00	; 0
    154c:	c1 f7       	brne	.-16     	; 0x153e <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    154e:	80 e0       	ldi	r24, 0x00	; 0
    1550:	08 95       	ret
    1552:	80 e0       	ldi	r24, 0x00	; 0
    1554:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    1556:	81 e0       	ldi	r24, 0x01	; 1
    1558:	08 95       	ret
    155a:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    155c:	08 95       	ret

0000155e <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    155e:	cf 93       	push	r28
    1560:	df 93       	push	r29
    1562:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    1564:	e2 df       	rcall	.-60     	; 0x152a <SYS_TimerStarted>
    1566:	81 11       	cpse	r24, r1
    1568:	02 c0       	rjmp	.+4      	; 0x156e <SYS_TimerStart+0x10>
    placeTimer(timer);
    156a:	ce 01       	movw	r24, r28
    156c:	75 df       	rcall	.-278    	; 0x1458 <placeTimer>
}
    156e:	df 91       	pop	r29
    1570:	cf 91       	pop	r28
    1572:	08 95       	ret

00001574 <ll_first>:
 * lp is list pointer
 */
llobject_t *
ll_first(lp)
llobject_t *lp;
{
    1574:	fc 01       	movw	r30, r24
    if (LL_IS_EMPTY(lp)) {
    1576:	82 81       	ldd	r24, Z+2	; 0x02
    1578:	93 81       	ldd	r25, Z+3	; 0x03
    157a:	8e 17       	cp	r24, r30
    157c:	9f 07       	cpc	r25, r31
    157e:	11 f4       	brne	.+4      	; 0x1584 <ll_first+0x10>
		return LL_NULL;
    1580:	80 e0       	ldi	r24, 0x00	; 0
    1582:	90 e0       	ldi	r25, 0x00	; 0
    }
    return lp->next;
}
    1584:	08 95       	ret

00001586 <ll_r_insert>:
llobject_t *
ll_r_insert(ip, ep)
llobject_t *ip;
llobject_t *ep;
{
    llobject_t *tp = ip->next;
    1586:	dc 01       	movw	r26, r24
    1588:	12 96       	adiw	r26, 0x02	; 2
    158a:	ed 91       	ld	r30, X+
    158c:	fc 91       	ld	r31, X
    158e:	13 97       	sbiw	r26, 0x03	; 3

    tp->prev = ep;
    1590:	71 83       	std	Z+1, r23	; 0x01
    1592:	60 83       	st	Z, r22
    ep->next = tp;
    1594:	db 01       	movw	r26, r22
    1596:	13 96       	adiw	r26, 0x03	; 3
    1598:	fc 93       	st	X, r31
    159a:	ee 93       	st	-X, r30
    159c:	12 97       	sbiw	r26, 0x02	; 2
    ip->next = ep;
    159e:	fc 01       	movw	r30, r24
    15a0:	73 83       	std	Z+3, r23	; 0x03
    15a2:	62 83       	std	Z+2, r22	; 0x02
    ep->prev = ip;
    15a4:	8d 93       	st	X+, r24
    15a6:	9c 93       	st	X, r25

    return ep;
}
    15a8:	cb 01       	movw	r24, r22
    15aa:	08 95       	ret

000015ac <ll_detach>:
 */
llobject_t *
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    15ac:	fb 01       	movw	r30, r22
    if (LL_IS_EMPTY(lp) || lp == ep) {
    15ae:	dc 01       	movw	r26, r24
    15b0:	12 96       	adiw	r26, 0x02	; 2
    15b2:	2d 91       	ld	r18, X+
    15b4:	3c 91       	ld	r19, X
    15b6:	13 97       	sbiw	r26, 0x03	; 3
    15b8:	28 17       	cp	r18, r24
    15ba:	39 07       	cpc	r19, r25
    15bc:	a1 f0       	breq	.+40     	; 0x15e6 <ll_detach+0x3a>
    15be:	86 17       	cp	r24, r22
    15c0:	97 07       	cpc	r25, r23
    15c2:	a1 f0       	breq	.+40     	; 0x15ec <ll_detach+0x40>
		return LL_NULL;
    }

    (ep->prev)->next = ep->next;
    15c4:	a0 81       	ld	r26, Z
    15c6:	b1 81       	ldd	r27, Z+1	; 0x01
    15c8:	82 81       	ldd	r24, Z+2	; 0x02
    15ca:	93 81       	ldd	r25, Z+3	; 0x03
    15cc:	13 96       	adiw	r26, 0x03	; 3
    15ce:	9c 93       	st	X, r25
    15d0:	8e 93       	st	-X, r24
    15d2:	12 97       	sbiw	r26, 0x02	; 2
    (ep->next)->prev = ep->prev;
    15d4:	a2 81       	ldd	r26, Z+2	; 0x02
    15d6:	b3 81       	ldd	r27, Z+3	; 0x03
    15d8:	80 81       	ld	r24, Z
    15da:	91 81       	ldd	r25, Z+1	; 0x01
    15dc:	8d 93       	st	X+, r24
    15de:	9c 93       	st	X, r25

    return ep;
    15e0:	86 2f       	mov	r24, r22
    15e2:	9f 2f       	mov	r25, r31
    15e4:	08 95       	ret
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    if (LL_IS_EMPTY(lp) || lp == ep) {
		return LL_NULL;
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	08 95       	ret
    15ec:	80 e0       	ldi	r24, 0x00	; 0
    15ee:	90 e0       	ldi	r25, 0x00	; 0

    (ep->prev)->next = ep->next;
    (ep->next)->prev = ep->prev;

    return ep;
}
    15f0:	08 95       	ret

000015f2 <ll_pop>:
 */
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
    15f2:	fc 01       	movw	r30, r24
    15f4:	62 81       	ldd	r22, Z+2	; 0x02
    15f6:	73 81       	ldd	r23, Z+3	; 0x03
    15f8:	68 17       	cp	r22, r24
    15fa:	79 07       	cpc	r23, r25
    15fc:	11 f0       	breq	.+4      	; 0x1602 <ll_pop+0x10>
		return LL_NULL;
    }
    return LL_DETACH(lp, lp->next);
    15fe:	d6 cf       	rjmp	.-84     	; 0x15ac <ll_detach>
    1600:	08 95       	ret
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
		return LL_NULL;
    1602:	80 e0       	ldi	r24, 0x00	; 0
    1604:	90 e0       	ldi	r25, 0x00	; 0
    }
    return LL_DETACH(lp, lp->next);
}
    1606:	08 95       	ret

00001608 <calcDate>:
	tm_ptr->unix_time = calibrate_sec;
	tm_ptr->unix_msec = 500; // to minimize error
}

void calcDate(tm *tm_ptr)
{
    1608:	2f 92       	push	r2
    160a:	3f 92       	push	r3
    160c:	4f 92       	push	r4
    160e:	5f 92       	push	r5
    1610:	6f 92       	push	r6
    1612:	7f 92       	push	r7
    1614:	8f 92       	push	r8
    1616:	9f 92       	push	r9
    1618:	af 92       	push	r10
    161a:	bf 92       	push	r11
    161c:	cf 92       	push	r12
    161e:	df 92       	push	r13
    1620:	ef 92       	push	r14
    1622:	ff 92       	push	r15
    1624:	0f 93       	push	r16
    1626:	1f 93       	push	r17
    1628:	cf 93       	push	r28
    162a:	df 93       	push	r29
    162c:	cd b7       	in	r28, 0x3d	; 61
    162e:	de b7       	in	r29, 0x3e	; 62
    1630:	62 97       	sbiw	r28, 0x12	; 18
    1632:	0f b6       	in	r0, 0x3f	; 63
    1634:	f8 94       	cli
    1636:	de bf       	out	0x3e, r29	; 62
    1638:	0f be       	out	0x3f, r0	; 63
    163a:	cd bf       	out	0x3d, r28	; 61
    163c:	9a 8b       	std	Y+18, r25	; 0x12
    163e:	89 8b       	std	Y+17, r24	; 0x11
	long seconds, minutes, hours, days, year, month;
	long dayOfWeek;
	seconds = tm_ptr->unix_time;
    1640:	dc 01       	movw	r26, r24
    1642:	4d 90       	ld	r4, X+
    1644:	5d 90       	ld	r5, X+
    1646:	6d 90       	ld	r6, X+
    1648:	7c 90       	ld	r7, X

	/* calculate minutes */
	minutes  = seconds / 60;
    164a:	0f 2e       	mov	r0, r31
    164c:	fc e3       	ldi	r31, 0x3C	; 60
    164e:	8f 2e       	mov	r8, r31
    1650:	91 2c       	mov	r9, r1
    1652:	a1 2c       	mov	r10, r1
    1654:	b1 2c       	mov	r11, r1
    1656:	f0 2d       	mov	r31, r0
    1658:	c3 01       	movw	r24, r6
    165a:	b2 01       	movw	r22, r4
    165c:	a5 01       	movw	r20, r10
    165e:	94 01       	movw	r18, r8
    1660:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__divmodsi4>
    1664:	69 01       	movw	r12, r18
    1666:	7a 01       	movw	r14, r20
	seconds -= minutes * 60;
    1668:	a4 ec       	ldi	r26, 0xC4	; 196
    166a:	bf ef       	ldi	r27, 0xFF	; 255
    166c:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__mulohisi3>
    1670:	9b 01       	movw	r18, r22
    1672:	ac 01       	movw	r20, r24
    1674:	24 0d       	add	r18, r4
    1676:	35 1d       	adc	r19, r5
    1678:	46 1d       	adc	r20, r6
    167a:	57 1d       	adc	r21, r7
    167c:	29 83       	std	Y+1, r18	; 0x01
    167e:	3a 83       	std	Y+2, r19	; 0x02
    1680:	4b 83       	std	Y+3, r20	; 0x03
    1682:	5c 83       	std	Y+4, r21	; 0x04
	/* calculate hours */
	hours    = minutes / 60;
    1684:	c7 01       	movw	r24, r14
    1686:	b6 01       	movw	r22, r12
    1688:	a5 01       	movw	r20, r10
    168a:	94 01       	movw	r18, r8
    168c:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__divmodsi4>
    1690:	49 01       	movw	r8, r18
    1692:	5a 01       	movw	r10, r20
	minutes -= hours   * 60;
    1694:	a4 ec       	ldi	r26, 0xC4	; 196
    1696:	bf ef       	ldi	r27, 0xFF	; 255
    1698:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__mulohisi3>
    169c:	9b 01       	movw	r18, r22
    169e:	ac 01       	movw	r20, r24
    16a0:	2c 0d       	add	r18, r12
    16a2:	3d 1d       	adc	r19, r13
    16a4:	4e 1d       	adc	r20, r14
    16a6:	5f 1d       	adc	r21, r15
    16a8:	2d 83       	std	Y+5, r18	; 0x05
    16aa:	3e 83       	std	Y+6, r19	; 0x06
    16ac:	4f 83       	std	Y+7, r20	; 0x07
    16ae:	58 87       	std	Y+8, r21	; 0x08
	/* calculate days */
	days     = hours   / 24;
    16b0:	c5 01       	movw	r24, r10
    16b2:	b4 01       	movw	r22, r8
    16b4:	28 e1       	ldi	r18, 0x18	; 24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	40 e0       	ldi	r20, 0x00	; 0
    16ba:	50 e0       	ldi	r21, 0x00	; 0
    16bc:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__divmodsi4>
    16c0:	c2 2e       	mov	r12, r18
    16c2:	d3 2e       	mov	r13, r19
    16c4:	e4 2e       	mov	r14, r20
    16c6:	f5 2e       	mov	r15, r21
	hours   -= days    * 24;
    16c8:	a8 ee       	ldi	r26, 0xE8	; 232
    16ca:	bf ef       	ldi	r27, 0xFF	; 255
    16cc:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__mulohisi3>
    16d0:	9b 01       	movw	r18, r22
    16d2:	ac 01       	movw	r20, r24
    16d4:	28 0d       	add	r18, r8
    16d6:	39 1d       	adc	r19, r9
    16d8:	4a 1d       	adc	r20, r10
    16da:	5b 1d       	adc	r21, r11
    16dc:	29 87       	std	Y+9, r18	; 0x09
    16de:	3a 87       	std	Y+10, r19	; 0x0a
    16e0:	4b 87       	std	Y+11, r20	; 0x0b
    16e2:	5c 87       	std	Y+12, r21	; 0x0c

	/* Unix time starts in 1970 on a Thursday */
	year      = 1970;
	dayOfWeek = 4;
    16e4:	81 2c       	mov	r8, r1
    16e6:	91 2c       	mov	r9, r1
    16e8:	54 01       	movw	r10, r8
    16ea:	68 94       	set
    16ec:	82 f8       	bld	r8, 2
	/* calculate days */
	days     = hours   / 24;
	hours   -= days    * 24;

	/* Unix time starts in 1970 on a Thursday */
	year      = 1970;
    16ee:	0f 2e       	mov	r0, r31
    16f0:	f2 eb       	ldi	r31, 0xB2	; 178
    16f2:	4f 2e       	mov	r4, r31
    16f4:	f7 e0       	ldi	r31, 0x07	; 7
    16f6:	5f 2e       	mov	r5, r31
    16f8:	61 2c       	mov	r6, r1
    16fa:	71 2c       	mov	r7, r1
    16fc:	f0 2d       	mov	r31, r0

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    16fe:	0d e6       	ldi	r16, 0x6D	; 109
    1700:	11 e0       	ldi	r17, 0x01	; 1
    1702:	21 2c       	mov	r2, r1
		{
			dayOfWeek += leapYear ? 2 : 1;
    1704:	31 2c       	mov	r3, r1
	year      = 1970;
	dayOfWeek = 4;

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
    1706:	d3 01       	movw	r26, r6
    1708:	c2 01       	movw	r24, r4
    170a:	83 70       	andi	r24, 0x03	; 3
    170c:	99 27       	eor	r25, r25
    170e:	aa 27       	eor	r26, r26
    1710:	bb 27       	eor	r27, r27
    1712:	89 2b       	or	r24, r25
    1714:	8a 2b       	or	r24, r26
    1716:	8b 2b       	or	r24, r27
    1718:	09 f0       	breq	.+2      	; 0x171c <calcDate+0x114>
    171a:	ea c0       	rjmp	.+468    	; 0x18f0 <calcDate+0x2e8>
    171c:	c3 01       	movw	r24, r6
    171e:	b2 01       	movw	r22, r4
    1720:	24 e6       	ldi	r18, 0x64	; 100
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	40 e0       	ldi	r20, 0x00	; 0
    1726:	50 e0       	ldi	r21, 0x00	; 0
    1728:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__divmodsi4>
    172c:	67 2b       	or	r22, r23
    172e:	68 2b       	or	r22, r24
    1730:	69 2b       	or	r22, r25
    1732:	09 f0       	breq	.+2      	; 0x1736 <calcDate+0x12e>
    1734:	d0 c0       	rjmp	.+416    	; 0x18d6 <calcDate+0x2ce>
    1736:	c3 01       	movw	r24, r6
    1738:	b2 01       	movw	r22, r4
    173a:	20 e9       	ldi	r18, 0x90	; 144
    173c:	31 e0       	ldi	r19, 0x01	; 1
    173e:	40 e0       	ldi	r20, 0x00	; 0
    1740:	50 e0       	ldi	r21, 0x00	; 0
    1742:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__divmodsi4>
    1746:	67 2b       	or	r22, r23
    1748:	68 2b       	or	r22, r24
    174a:	69 2b       	or	r22, r25
    174c:	09 f4       	brne	.+2      	; 0x1750 <calcDate+0x148>
    174e:	c3 c0       	rjmp	.+390    	; 0x18d6 <calcDate+0x2ce>
    1750:	cf c0       	rjmp	.+414    	; 0x18f0 <calcDate+0x2e8>
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    1752:	8e e6       	ldi	r24, 0x6E	; 110
    1754:	91 e0       	ldi	r25, 0x01	; 1
    1756:	a0 e0       	ldi	r26, 0x00	; 0
    1758:	b0 e0       	ldi	r27, 0x00	; 0
		{
			dayOfWeek += leapYear ? 2 : 1;
    175a:	42 e0       	ldi	r20, 0x02	; 2
    175c:	50 e0       	ldi	r21, 0x00	; 0
    175e:	60 e0       	ldi	r22, 0x00	; 0
    1760:	70 e0       	ldi	r23, 0x00	; 0
    1762:	08 c0       	rjmp	.+16     	; 0x1774 <calcDate+0x16c>

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    1764:	80 2f       	mov	r24, r16
    1766:	91 2f       	mov	r25, r17
    1768:	a2 2d       	mov	r26, r2
    176a:	b0 e0       	ldi	r27, 0x00	; 0
		{
			dayOfWeek += leapYear ? 2 : 1;
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	50 e0       	ldi	r21, 0x00	; 0
    1770:	60 e0       	ldi	r22, 0x00	; 0
    1772:	73 2d       	mov	r23, r3
    1774:	84 0e       	add	r8, r20
    1776:	95 1e       	adc	r9, r21
    1778:	a6 1e       	adc	r10, r22
    177a:	b7 1e       	adc	r11, r23
			days      -= daysInYear;
    177c:	c8 1a       	sub	r12, r24
    177e:	d9 0a       	sbc	r13, r25
    1780:	ea 0a       	sbc	r14, r26
    1782:	fb 0a       	sbc	r15, r27
			if (dayOfWeek >= 7)
    1784:	57 e0       	ldi	r21, 0x07	; 7
    1786:	85 16       	cp	r8, r21
    1788:	91 04       	cpc	r9, r1
    178a:	a1 04       	cpc	r10, r1
    178c:	b1 04       	cpc	r11, r1
    178e:	2c f0       	brlt	.+10     	; 0x179a <calcDate+0x192>
			dayOfWeek -= 7;
    1790:	87 e0       	ldi	r24, 0x07	; 7
    1792:	88 1a       	sub	r8, r24
    1794:	91 08       	sbc	r9, r1
    1796:	a1 08       	sbc	r10, r1
    1798:	b1 08       	sbc	r11, r1
			++year;
    179a:	9f ef       	ldi	r25, 0xFF	; 255
    179c:	49 1a       	sub	r4, r25
    179e:	59 0a       	sbc	r5, r25
    17a0:	69 0a       	sbc	r6, r25
    17a2:	79 0a       	sbc	r7, r25
				else
				break;
			}
			break;
		}
	}
    17a4:	b0 cf       	rjmp	.-160    	; 0x1706 <calcDate+0xfe>
			dayOfWeek -= 7;
			++year;
		}
		else
		{
			tm_ptr->tm_yday = days;
    17a6:	e9 89       	ldd	r30, Y+17	; 0x11
    17a8:	fa 89       	ldd	r31, Y+18	; 0x12
    17aa:	84 a3       	std	Z+36, r24	; 0x24
    17ac:	95 a3       	std	Z+37, r25	; 0x25
    17ae:	a6 a3       	std	Z+38, r26	; 0x26
    17b0:	b7 a3       	std	Z+39, r27	; 0x27
			dayOfWeek  += days;
    17b2:	bc 01       	movw	r22, r24
    17b4:	cd 01       	movw	r24, r26
    17b6:	68 0d       	add	r22, r8
    17b8:	79 1d       	adc	r23, r9
    17ba:	8a 1d       	adc	r24, r10
    17bc:	9b 1d       	adc	r25, r11
			dayOfWeek  %= 7;
    17be:	27 e0       	ldi	r18, 0x07	; 7
    17c0:	30 e0       	ldi	r19, 0x00	; 0
    17c2:	40 e0       	ldi	r20, 0x00	; 0
    17c4:	50 e0       	ldi	r21, 0x00	; 0
    17c6:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__divmodsi4>
    17ca:	6d 87       	std	Y+13, r22	; 0x0d
    17cc:	7e 87       	std	Y+14, r23	; 0x0e
    17ce:	8f 87       	std	Y+15, r24	; 0x0f
    17d0:	98 8b       	std	Y+16, r25	; 0x10
    17d2:	e1 e8       	ldi	r30, 0x81	; 129
    17d4:	f4 e0       	ldi	r31, 0x04	; 4
    17d6:	81 2c       	mov	r8, r1
    17d8:	91 2c       	mov	r9, r1
    17da:	54 01       	movw	r10, r8
    17dc:	83 94       	inc	r8
    17de:	40 e0       	ldi	r20, 0x00	; 0
    17e0:	50 e0       	ldi	r21, 0x00	; 0
    17e2:	ba 01       	movw	r22, r20
    17e4:	09 c0       	rjmp	.+18     	; 0x17f8 <calcDate+0x1f0>
    17e6:	4f 5f       	subi	r20, 0xFF	; 255
    17e8:	5f 4f       	sbci	r21, 0xFF	; 255
    17ea:	6f 4f       	sbci	r22, 0xFF	; 255
    17ec:	7f 4f       	sbci	r23, 0xFF	; 255
    17ee:	3f ef       	ldi	r19, 0xFF	; 255
    17f0:	83 1a       	sub	r8, r19
    17f2:	93 0a       	sbc	r9, r19
    17f4:	a3 0a       	sbc	r10, r19
    17f6:	b3 0a       	sbc	r11, r19
    17f8:	8a 01       	movw	r16, r20
    17fa:	9b 01       	movw	r18, r22

			/* calculate the month and day */
			static const uint8_t daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
			for(month = 0; month < 12; ++month)
			{
				uint8_t dim = daysInMonth[month];
    17fc:	81 91       	ld	r24, Z+

				/* add a day to feburary if this is a leap year */
				if (month == 1 && leapYear)
    17fe:	41 30       	cpi	r20, 0x01	; 1
    1800:	51 05       	cpc	r21, r1
    1802:	61 05       	cpc	r22, r1
    1804:	71 05       	cpc	r23, r1
    1806:	29 f4       	brne	.+10     	; 0x1812 <calcDate+0x20a>
    1808:	33 20       	and	r3, r3
    180a:	09 f4       	brne	.+2      	; 0x180e <calcDate+0x206>
    180c:	5b c0       	rjmp	.+182    	; 0x18c4 <calcDate+0x2bc>
				++dim;
    180e:	8f 5f       	subi	r24, 0xFF	; 255
    1810:	59 c0       	rjmp	.+178    	; 0x18c4 <calcDate+0x2bc>

				if (days >= dim)
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	a0 e0       	ldi	r26, 0x00	; 0
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	c8 16       	cp	r12, r24
    181a:	d9 06       	cpc	r13, r25
    181c:	ea 06       	cpc	r14, r26
    181e:	fb 06       	cpc	r15, r27
    1820:	6c f0       	brlt	.+26     	; 0x183c <calcDate+0x234>
				days -= dim;
    1822:	c8 1a       	sub	r12, r24
    1824:	d9 0a       	sbc	r13, r25
    1826:	ea 0a       	sbc	r14, r26
    1828:	fb 0a       	sbc	r15, r27
			dayOfWeek  += days;
			dayOfWeek  %= 7;

			/* calculate the month and day */
			static const uint8_t daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
			for(month = 0; month < 12; ++month)
    182a:	95 01       	movw	r18, r10
    182c:	84 01       	movw	r16, r8
    182e:	8c e0       	ldi	r24, 0x0C	; 12
    1830:	88 16       	cp	r8, r24
    1832:	91 04       	cpc	r9, r1
    1834:	a1 04       	cpc	r10, r1
    1836:	b1 04       	cpc	r11, r1
    1838:	b4 f2       	brlt	.-84     	; 0x17e6 <calcDate+0x1de>
    183a:	00 c0       	rjmp	.+0      	; 0x183c <calcDate+0x234>
			}
			break;
		}
	}

	tm_ptr->tm_sec  = seconds;
    183c:	89 81       	ldd	r24, Y+1	; 0x01
    183e:	9a 81       	ldd	r25, Y+2	; 0x02
    1840:	ab 81       	ldd	r26, Y+3	; 0x03
    1842:	bc 81       	ldd	r27, Y+4	; 0x04
    1844:	e9 89       	ldd	r30, Y+17	; 0x11
    1846:	fa 89       	ldd	r31, Y+18	; 0x12
    1848:	80 87       	std	Z+8, r24	; 0x08
    184a:	91 87       	std	Z+9, r25	; 0x09
    184c:	a2 87       	std	Z+10, r26	; 0x0a
    184e:	b3 87       	std	Z+11, r27	; 0x0b
	tm_ptr->tm_min  = minutes;
    1850:	8d 81       	ldd	r24, Y+5	; 0x05
    1852:	9e 81       	ldd	r25, Y+6	; 0x06
    1854:	af 81       	ldd	r26, Y+7	; 0x07
    1856:	b8 85       	ldd	r27, Y+8	; 0x08
    1858:	84 87       	std	Z+12, r24	; 0x0c
    185a:	95 87       	std	Z+13, r25	; 0x0d
    185c:	a6 87       	std	Z+14, r26	; 0x0e
    185e:	b7 87       	std	Z+15, r27	; 0x0f
	tm_ptr->tm_hour = hours;
    1860:	89 85       	ldd	r24, Y+9	; 0x09
    1862:	9a 85       	ldd	r25, Y+10	; 0x0a
    1864:	ab 85       	ldd	r26, Y+11	; 0x0b
    1866:	bc 85       	ldd	r27, Y+12	; 0x0c
    1868:	80 8b       	std	Z+16, r24	; 0x10
    186a:	91 8b       	std	Z+17, r25	; 0x11
    186c:	a2 8b       	std	Z+18, r26	; 0x12
    186e:	b3 8b       	std	Z+19, r27	; 0x13
	tm_ptr->tm_mday = days + 1;
    1870:	ff ef       	ldi	r31, 0xFF	; 255
    1872:	cf 1a       	sub	r12, r31
    1874:	df 0a       	sbc	r13, r31
    1876:	ef 0a       	sbc	r14, r31
    1878:	ff 0a       	sbc	r15, r31
    187a:	a9 89       	ldd	r26, Y+17	; 0x11
    187c:	ba 89       	ldd	r27, Y+18	; 0x12
    187e:	54 96       	adiw	r26, 0x14	; 20
    1880:	cd 92       	st	X+, r12
    1882:	dd 92       	st	X+, r13
    1884:	ed 92       	st	X+, r14
    1886:	fc 92       	st	X, r15
    1888:	57 97       	sbiw	r26, 0x17	; 23
	tm_ptr->tm_mon  = month + 1;
    188a:	d9 01       	movw	r26, r18
    188c:	c8 01       	movw	r24, r16
    188e:	01 96       	adiw	r24, 0x01	; 1
    1890:	a1 1d       	adc	r26, r1
    1892:	b1 1d       	adc	r27, r1
    1894:	e9 89       	ldd	r30, Y+17	; 0x11
    1896:	fa 89       	ldd	r31, Y+18	; 0x12
    1898:	80 8f       	std	Z+24, r24	; 0x18
    189a:	91 8f       	std	Z+25, r25	; 0x19
    189c:	a2 8f       	std	Z+26, r26	; 0x1a
    189e:	b3 8f       	std	Z+27, r27	; 0x1b
	tm_ptr->tm_year = year;
    18a0:	44 8e       	std	Z+28, r4	; 0x1c
    18a2:	55 8e       	std	Z+29, r5	; 0x1d
    18a4:	66 8e       	std	Z+30, r6	; 0x1e
    18a6:	77 8e       	std	Z+31, r7	; 0x1f
	tm_ptr->tm_wday = dayOfWeek;
    18a8:	2d 85       	ldd	r18, Y+13	; 0x0d
    18aa:	3e 85       	ldd	r19, Y+14	; 0x0e
    18ac:	4f 85       	ldd	r20, Y+15	; 0x0f
    18ae:	58 89       	ldd	r21, Y+16	; 0x10
    18b0:	20 a3       	std	Z+32, r18	; 0x20
    18b2:	31 a3       	std	Z+33, r19	; 0x21
    18b4:	42 a3       	std	Z+34, r20	; 0x22
    18b6:	53 a3       	std	Z+35, r21	; 0x23
    18b8:	27 c0       	rjmp	.+78     	; 0x1908 <calcDate+0x300>
				/* add a day to feburary if this is a leap year */
				if (month == 1 && leapYear)
				++dim;

				if (days >= dim)
				days -= dim;
    18ba:	c8 1a       	sub	r12, r24
    18bc:	d9 0a       	sbc	r13, r25
    18be:	ea 0a       	sbc	r14, r26
    18c0:	fb 0a       	sbc	r15, r27
    18c2:	91 cf       	rjmp	.-222    	; 0x17e6 <calcDate+0x1de>

				/* add a day to feburary if this is a leap year */
				if (month == 1 && leapYear)
				++dim;

				if (days >= dim)
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	a0 e0       	ldi	r26, 0x00	; 0
    18c8:	b0 e0       	ldi	r27, 0x00	; 0
    18ca:	c8 16       	cp	r12, r24
    18cc:	d9 06       	cpc	r13, r25
    18ce:	ea 06       	cpc	r14, r26
    18d0:	fb 06       	cpc	r15, r27
    18d2:	9c f7       	brge	.-26     	; 0x18ba <calcDate+0x2b2>
    18d4:	b3 cf       	rjmp	.-154    	; 0x183c <calcDate+0x234>

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    18d6:	fe e6       	ldi	r31, 0x6E	; 110
    18d8:	cf 16       	cp	r12, r31
    18da:	f1 e0       	ldi	r31, 0x01	; 1
    18dc:	df 06       	cpc	r13, r31
    18de:	e1 04       	cpc	r14, r1
    18e0:	f1 04       	cpc	r15, r1
    18e2:	0c f0       	brlt	.+2      	; 0x18e6 <calcDate+0x2de>
    18e4:	36 cf       	rjmp	.-404    	; 0x1752 <calcDate+0x14a>
    18e6:	d7 01       	movw	r26, r14
    18e8:	c6 01       	movw	r24, r12
    18ea:	33 24       	eor	r3, r3
    18ec:	33 94       	inc	r3
    18ee:	5b cf       	rjmp	.-330    	; 0x17a6 <calcDate+0x19e>
    18f0:	3d e6       	ldi	r19, 0x6D	; 109
    18f2:	c3 16       	cp	r12, r19
    18f4:	31 e0       	ldi	r19, 0x01	; 1
    18f6:	d3 06       	cpc	r13, r19
    18f8:	e1 04       	cpc	r14, r1
    18fa:	f1 04       	cpc	r15, r1
    18fc:	0c f0       	brlt	.+2      	; 0x1900 <calcDate+0x2f8>
    18fe:	32 cf       	rjmp	.-412    	; 0x1764 <calcDate+0x15c>
    1900:	d7 01       	movw	r26, r14
    1902:	c6 01       	movw	r24, r12
    1904:	31 2c       	mov	r3, r1
    1906:	4f cf       	rjmp	.-354    	; 0x17a6 <calcDate+0x19e>
	tm_ptr->tm_hour = hours;
	tm_ptr->tm_mday = days + 1;
	tm_ptr->tm_mon  = month + 1;
	tm_ptr->tm_year = year;
	tm_ptr->tm_wday = dayOfWeek;
}
    1908:	62 96       	adiw	r28, 0x12	; 18
    190a:	0f b6       	in	r0, 0x3f	; 63
    190c:	f8 94       	cli
    190e:	de bf       	out	0x3e, r29	; 62
    1910:	0f be       	out	0x3f, r0	; 63
    1912:	cd bf       	out	0x3d, r28	; 61
    1914:	df 91       	pop	r29
    1916:	cf 91       	pop	r28
    1918:	1f 91       	pop	r17
    191a:	0f 91       	pop	r16
    191c:	ff 90       	pop	r15
    191e:	ef 90       	pop	r14
    1920:	df 90       	pop	r13
    1922:	cf 90       	pop	r12
    1924:	bf 90       	pop	r11
    1926:	af 90       	pop	r10
    1928:	9f 90       	pop	r9
    192a:	8f 90       	pop	r8
    192c:	7f 90       	pop	r7
    192e:	6f 90       	pop	r6
    1930:	5f 90       	pop	r5
    1932:	4f 90       	pop	r4
    1934:	3f 90       	pop	r3
    1936:	2f 90       	pop	r2
    1938:	08 95       	ret

0000193a <updateTime>:
#include "utilities/inc/time.h"
#include <stdio.h>


void updateTime(long increment_msec, tm * tm_eg)
{
    193a:	cf 92       	push	r12
    193c:	df 92       	push	r13
    193e:	ef 92       	push	r14
    1940:	ff 92       	push	r15
    1942:	0f 93       	push	r16
    1944:	1f 93       	push	r17
    1946:	cf 93       	push	r28
    1948:	df 93       	push	r29
    194a:	ea 01       	movw	r28, r20
	tm_eg->unix_msec += increment_msec;
    194c:	cc 80       	ldd	r12, Y+4	; 0x04
    194e:	dd 80       	ldd	r13, Y+5	; 0x05
    1950:	ee 80       	ldd	r14, Y+6	; 0x06
    1952:	ff 80       	ldd	r15, Y+7	; 0x07
    1954:	6c 0d       	add	r22, r12
    1956:	7d 1d       	adc	r23, r13
    1958:	8e 1d       	adc	r24, r14
    195a:	9f 1d       	adc	r25, r15
	tm_eg->unix_time += ( tm_eg->unix_msec / 1000 );
    195c:	28 ee       	ldi	r18, 0xE8	; 232
    195e:	33 e0       	ldi	r19, 0x03	; 3
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	50 e0       	ldi	r21, 0x00	; 0
    1964:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__divmodsi4>
    1968:	c8 80       	ld	r12, Y
    196a:	d9 80       	ldd	r13, Y+1	; 0x01
    196c:	ea 80       	ldd	r14, Y+2	; 0x02
    196e:	fb 80       	ldd	r15, Y+3	; 0x03
    1970:	89 01       	movw	r16, r18
    1972:	9a 01       	movw	r18, r20
    1974:	0c 0d       	add	r16, r12
    1976:	1d 1d       	adc	r17, r13
    1978:	2e 1d       	adc	r18, r14
    197a:	3f 1d       	adc	r19, r15
    197c:	08 83       	st	Y, r16
    197e:	19 83       	std	Y+1, r17	; 0x01
    1980:	2a 83       	std	Y+2, r18	; 0x02
    1982:	3b 83       	std	Y+3, r19	; 0x03
	tm_eg->unix_msec = tm_eg->unix_msec % 1000;
    1984:	6c 83       	std	Y+4, r22	; 0x04
    1986:	7d 83       	std	Y+5, r23	; 0x05
    1988:	8e 83       	std	Y+6, r24	; 0x06
    198a:	9f 83       	std	Y+7, r25	; 0x07
	calcDate(tm_eg);
    198c:	ce 01       	movw	r24, r28
    198e:	3c de       	rcall	.-904    	; 0x1608 <calcDate>
}
    1990:	df 91       	pop	r29
    1992:	cf 91       	pop	r28
    1994:	1f 91       	pop	r17
    1996:	0f 91       	pop	r16
    1998:	ff 90       	pop	r15
    199a:	ef 90       	pop	r14
    199c:	df 90       	pop	r13
    199e:	cf 90       	pop	r12
    19a0:	08 95       	ret

000019a2 <init_timestamp>:



void init_timestamp(tm *tm_ptr)
{
	tm_ptr->unix_msec=0;
    19a2:	fc 01       	movw	r30, r24
    19a4:	14 82       	std	Z+4, r1	; 0x04
    19a6:	15 82       	std	Z+5, r1	; 0x05
    19a8:	16 82       	std	Z+6, r1	; 0x06
    19aa:	17 82       	std	Z+7, r1	; 0x07
	tm_ptr->unix_time=0;
    19ac:	10 82       	st	Z, r1
    19ae:	11 82       	std	Z+1, r1	; 0x01
    19b0:	12 82       	std	Z+2, r1	; 0x02
    19b2:	13 82       	std	Z+3, r1	; 0x03
    19b4:	08 95       	ret

000019b6 <fctn_getStartNum>:
}

int fctn_getStartNum( BaseSensor *this)
{
	return this->StartNum;
}
    19b6:	fc 01       	movw	r30, r24
    19b8:	84 81       	ldd	r24, Z+4	; 0x04
    19ba:	95 81       	ldd	r25, Z+5	; 0x05
    19bc:	08 95       	ret

000019be <fctn_getEndNum>:

int fctn_getEndNum( BaseSensor *this)
{
    19be:	fc 01       	movw	r30, r24
	return ( this->StartNum + this->NumOfData );
    19c0:	24 81       	ldd	r18, Z+4	; 0x04
    19c2:	35 81       	ldd	r19, Z+5	; 0x05
    19c4:	86 81       	ldd	r24, Z+6	; 0x06
    19c6:	97 81       	ldd	r25, Z+7	; 0x07
}
    19c8:	82 0f       	add	r24, r18
    19ca:	93 1f       	adc	r25, r19
    19cc:	08 95       	ret

000019ce <BMP280_ReadBytes>:
  @brief Gets the oversampling setting for the library
  @return oversampling
*****************************************************************************/
short BMP280_GetOversampling(void){
	return oversampling;
}
    19ce:	1f 93       	push	r17
    19d0:	cf 93       	push	r28
    19d2:	df 93       	push	r29
    19d4:	ec 01       	movw	r28, r24
    19d6:	16 2f       	mov	r17, r22
    19d8:	86 e7       	ldi	r24, 0x76	; 118
    19da:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <TWI_BeginWrite>
    19de:	88 81       	ld	r24, Y
    19e0:	0e 94 d3 04 	call	0x9a6	; 0x9a6 <TWI_WriteByte>
    19e4:	86 e7       	ldi	r24, 0x76	; 118
    19e6:	09 d8       	rcall	.-4078   	; 0x9fa <TWI_BeginRead>
    19e8:	80 93 1d 09 	sts	0x091D, r24
    19ec:	80 34       	cpi	r24, 0x40	; 64
    19ee:	59 f4       	brne	.+22     	; 0x1a06 <BMP280_ReadBytes+0x38>
    19f0:	61 2f       	mov	r22, r17
    19f2:	70 e0       	ldi	r23, 0x00	; 0
    19f4:	40 e0       	ldi	r20, 0x00	; 0
    19f6:	ce 01       	movw	r24, r28
    19f8:	3c d8       	rcall	.-3976   	; 0xa72 <TWI_Read>
    19fa:	88 7f       	andi	r24, 0xF8	; 248
    19fc:	88 35       	cpi	r24, 0x58	; 88
    19fe:	19 f4       	brne	.+6      	; 0x1a06 <BMP280_ReadBytes+0x38>
    1a00:	33 d8       	rcall	.-3994   	; 0xa68 <TWI_Stop>
    1a02:	81 11       	cpse	r24, r1
    1a04:	0a c0       	rjmp	.+20     	; 0x1a1a <BMP280_ReadBytes+0x4c>
    1a06:	8d e8       	ldi	r24, 0x8D	; 141
    1a08:	94 e0       	ldi	r25, 0x04	; 4
    1a0a:	9f 93       	push	r25
    1a0c:	8f 93       	push	r24
    1a0e:	0e 94 aa 1c 	call	0x3954	; 0x3954 <printf>
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	01 c0       	rjmp	.+2      	; 0x1a1c <BMP280_ReadBytes+0x4e>
    1a1a:	81 e0       	ldi	r24, 0x01	; 1
    1a1c:	df 91       	pop	r29
    1a1e:	cf 91       	pop	r28
    1a20:	1f 91       	pop	r17
    1a22:	08 95       	ret

00001a24 <BMP280_ReadUInt>:
    1a24:	ef 92       	push	r14
    1a26:	ff 92       	push	r15
    1a28:	1f 93       	push	r17
    1a2a:	cf 93       	push	r28
    1a2c:	df 93       	push	r29
    1a2e:	1f 92       	push	r1
    1a30:	1f 92       	push	r1
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	7b 01       	movw	r14, r22
    1a38:	89 83       	std	Y+1, r24	; 0x01
    1a3a:	62 e0       	ldi	r22, 0x02	; 2
    1a3c:	ce 01       	movw	r24, r28
    1a3e:	01 96       	adiw	r24, 0x01	; 1
    1a40:	c6 df       	rcall	.-116    	; 0x19ce <BMP280_ReadBytes>
    1a42:	18 2f       	mov	r17, r24
    1a44:	88 23       	and	r24, r24
    1a46:	59 f0       	breq	.+22     	; 0x1a5e <BMP280_ReadUInt+0x3a>
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	98 2f       	mov	r25, r24
    1a4e:	88 27       	eor	r24, r24
    1a50:	29 81       	ldd	r18, Y+1	; 0x01
    1a52:	82 2b       	or	r24, r18
    1a54:	f7 01       	movw	r30, r14
    1a56:	91 83       	std	Z+1, r25	; 0x01
    1a58:	80 83       	st	Z, r24
    1a5a:	11 e0       	ldi	r17, 0x01	; 1
    1a5c:	0b c0       	rjmp	.+22     	; 0x1a74 <BMP280_ReadUInt+0x50>
    1a5e:	f7 01       	movw	r30, r14
    1a60:	11 82       	std	Z+1, r1	; 0x01
    1a62:	10 82       	st	Z, r1
    1a64:	82 ea       	ldi	r24, 0xA2	; 162
    1a66:	94 e0       	ldi	r25, 0x04	; 4
    1a68:	9f 93       	push	r25
    1a6a:	8f 93       	push	r24
    1a6c:	0e 94 aa 1c 	call	0x3954	; 0x3954 <printf>
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	81 2f       	mov	r24, r17
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	1f 91       	pop	r17
    1a80:	ff 90       	pop	r15
    1a82:	ef 90       	pop	r14
    1a84:	08 95       	ret

00001a86 <BMP280_ReadInt>:
    1a86:	0f 93       	push	r16
    1a88:	1f 93       	push	r17
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	1f 92       	push	r1
    1a90:	1f 92       	push	r1
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	8b 01       	movw	r16, r22
    1a98:	89 83       	std	Y+1, r24	; 0x01
    1a9a:	62 e0       	ldi	r22, 0x02	; 2
    1a9c:	ce 01       	movw	r24, r28
    1a9e:	01 96       	adiw	r24, 0x01	; 1
    1aa0:	96 df       	rcall	.-212    	; 0x19ce <BMP280_ReadBytes>
    1aa2:	88 23       	and	r24, r24
    1aa4:	59 f0       	breq	.+22     	; 0x1abc <BMP280_ReadInt+0x36>
    1aa6:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa8:	90 e0       	ldi	r25, 0x00	; 0
    1aaa:	98 2f       	mov	r25, r24
    1aac:	88 27       	eor	r24, r24
    1aae:	29 81       	ldd	r18, Y+1	; 0x01
    1ab0:	82 2b       	or	r24, r18
    1ab2:	f8 01       	movw	r30, r16
    1ab4:	91 83       	std	Z+1, r25	; 0x01
    1ab6:	80 83       	st	Z, r24
    1ab8:	81 e0       	ldi	r24, 0x01	; 1
    1aba:	03 c0       	rjmp	.+6      	; 0x1ac2 <BMP280_ReadInt+0x3c>
    1abc:	f8 01       	movw	r30, r16
    1abe:	11 82       	std	Z+1, r1	; 0x01
    1ac0:	10 82       	st	Z, r1
    1ac2:	0f 90       	pop	r0
    1ac4:	0f 90       	pop	r0
    1ac6:	df 91       	pop	r29
    1ac8:	cf 91       	pop	r28
    1aca:	1f 91       	pop	r17
    1acc:	0f 91       	pop	r16
    1ace:	08 95       	ret

00001ad0 <BMP280_Init>:
    1ad0:	67 e2       	ldi	r22, 0x27	; 39
    1ad2:	79 e0       	ldi	r23, 0x09	; 9
    1ad4:	88 e8       	ldi	r24, 0x88	; 136
    1ad6:	a6 df       	rcall	.-180    	; 0x1a24 <BMP280_ReadUInt>
    1ad8:	88 23       	and	r24, r24
    1ada:	09 f4       	brne	.+2      	; 0x1ade <BMP280_Init+0xe>
    1adc:	a4 c0       	rjmp	.+328    	; 0x1c26 <BMP280_Init+0x156>
    1ade:	6d e3       	ldi	r22, 0x3D	; 61
    1ae0:	79 e0       	ldi	r23, 0x09	; 9
    1ae2:	8a e8       	ldi	r24, 0x8A	; 138
    1ae4:	d0 df       	rcall	.-96     	; 0x1a86 <BMP280_ReadInt>
    1ae6:	88 23       	and	r24, r24
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <BMP280_Init+0x1c>
    1aea:	9d c0       	rjmp	.+314    	; 0x1c26 <BMP280_Init+0x156>
    1aec:	6b e3       	ldi	r22, 0x3B	; 59
    1aee:	79 e0       	ldi	r23, 0x09	; 9
    1af0:	8c e8       	ldi	r24, 0x8C	; 140
    1af2:	c9 df       	rcall	.-110    	; 0x1a86 <BMP280_ReadInt>
    1af4:	88 23       	and	r24, r24
    1af6:	09 f4       	brne	.+2      	; 0x1afa <BMP280_Init+0x2a>
    1af8:	96 c0       	rjmp	.+300    	; 0x1c26 <BMP280_Init+0x156>
    1afa:	69 e2       	ldi	r22, 0x29	; 41
    1afc:	79 e0       	ldi	r23, 0x09	; 9
    1afe:	8e e8       	ldi	r24, 0x8E	; 142
    1b00:	91 df       	rcall	.-222    	; 0x1a24 <BMP280_ReadUInt>
    1b02:	88 23       	and	r24, r24
    1b04:	09 f4       	brne	.+2      	; 0x1b08 <BMP280_Init+0x38>
    1b06:	8f c0       	rjmp	.+286    	; 0x1c26 <BMP280_Init+0x156>
    1b08:	69 e3       	ldi	r22, 0x39	; 57
    1b0a:	79 e0       	ldi	r23, 0x09	; 9
    1b0c:	80 e9       	ldi	r24, 0x90	; 144
    1b0e:	bb df       	rcall	.-138    	; 0x1a86 <BMP280_ReadInt>
    1b10:	88 23       	and	r24, r24
    1b12:	09 f4       	brne	.+2      	; 0x1b16 <BMP280_Init+0x46>
    1b14:	88 c0       	rjmp	.+272    	; 0x1c26 <BMP280_Init+0x156>
    1b16:	67 e3       	ldi	r22, 0x37	; 55
    1b18:	79 e0       	ldi	r23, 0x09	; 9
    1b1a:	82 e9       	ldi	r24, 0x92	; 146
    1b1c:	b4 df       	rcall	.-152    	; 0x1a86 <BMP280_ReadInt>
    1b1e:	88 23       	and	r24, r24
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <BMP280_Init+0x54>
    1b22:	81 c0       	rjmp	.+258    	; 0x1c26 <BMP280_Init+0x156>
    1b24:	65 e3       	ldi	r22, 0x35	; 53
    1b26:	79 e0       	ldi	r23, 0x09	; 9
    1b28:	84 e9       	ldi	r24, 0x94	; 148
    1b2a:	ad df       	rcall	.-166    	; 0x1a86 <BMP280_ReadInt>
    1b2c:	88 23       	and	r24, r24
    1b2e:	09 f4       	brne	.+2      	; 0x1b32 <BMP280_Init+0x62>
    1b30:	7a c0       	rjmp	.+244    	; 0x1c26 <BMP280_Init+0x156>
    1b32:	63 e3       	ldi	r22, 0x33	; 51
    1b34:	79 e0       	ldi	r23, 0x09	; 9
    1b36:	86 e9       	ldi	r24, 0x96	; 150
    1b38:	a6 df       	rcall	.-180    	; 0x1a86 <BMP280_ReadInt>
    1b3a:	88 23       	and	r24, r24
    1b3c:	09 f4       	brne	.+2      	; 0x1b40 <BMP280_Init+0x70>
    1b3e:	73 c0       	rjmp	.+230    	; 0x1c26 <BMP280_Init+0x156>
    1b40:	61 e3       	ldi	r22, 0x31	; 49
    1b42:	79 e0       	ldi	r23, 0x09	; 9
    1b44:	88 e9       	ldi	r24, 0x98	; 152
    1b46:	9f df       	rcall	.-194    	; 0x1a86 <BMP280_ReadInt>
    1b48:	88 23       	and	r24, r24
    1b4a:	09 f4       	brne	.+2      	; 0x1b4e <BMP280_Init+0x7e>
    1b4c:	6c c0       	rjmp	.+216    	; 0x1c26 <BMP280_Init+0x156>
    1b4e:	6f e2       	ldi	r22, 0x2F	; 47
    1b50:	79 e0       	ldi	r23, 0x09	; 9
    1b52:	8a e9       	ldi	r24, 0x9A	; 154
    1b54:	98 df       	rcall	.-208    	; 0x1a86 <BMP280_ReadInt>
    1b56:	88 23       	and	r24, r24
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <BMP280_Init+0x8c>
    1b5a:	65 c0       	rjmp	.+202    	; 0x1c26 <BMP280_Init+0x156>
    1b5c:	6d e2       	ldi	r22, 0x2D	; 45
    1b5e:	79 e0       	ldi	r23, 0x09	; 9
    1b60:	8c e9       	ldi	r24, 0x9C	; 156
    1b62:	91 df       	rcall	.-222    	; 0x1a86 <BMP280_ReadInt>
    1b64:	88 23       	and	r24, r24
    1b66:	09 f4       	brne	.+2      	; 0x1b6a <BMP280_Init+0x9a>
    1b68:	5e c0       	rjmp	.+188    	; 0x1c26 <BMP280_Init+0x156>
    1b6a:	6b e2       	ldi	r22, 0x2B	; 43
    1b6c:	79 e0       	ldi	r23, 0x09	; 9
    1b6e:	8e e9       	ldi	r24, 0x9E	; 158
    1b70:	8a df       	rcall	.-236    	; 0x1a86 <BMP280_ReadInt>
    1b72:	88 23       	and	r24, r24
    1b74:	09 f4       	brne	.+2      	; 0x1b78 <BMP280_Init+0xa8>
    1b76:	57 c0       	rjmp	.+174    	; 0x1c26 <BMP280_Init+0x156>
    1b78:	80 91 2c 09 	lds	r24, 0x092C
    1b7c:	8f 93       	push	r24
    1b7e:	80 91 2b 09 	lds	r24, 0x092B
    1b82:	8f 93       	push	r24
    1b84:	80 91 2e 09 	lds	r24, 0x092E
    1b88:	8f 93       	push	r24
    1b8a:	80 91 2d 09 	lds	r24, 0x092D
    1b8e:	8f 93       	push	r24
    1b90:	80 91 30 09 	lds	r24, 0x0930
    1b94:	8f 93       	push	r24
    1b96:	80 91 2f 09 	lds	r24, 0x092F
    1b9a:	8f 93       	push	r24
    1b9c:	80 91 32 09 	lds	r24, 0x0932
    1ba0:	8f 93       	push	r24
    1ba2:	80 91 31 09 	lds	r24, 0x0931
    1ba6:	8f 93       	push	r24
    1ba8:	80 91 34 09 	lds	r24, 0x0934
    1bac:	8f 93       	push	r24
    1bae:	80 91 33 09 	lds	r24, 0x0933
    1bb2:	8f 93       	push	r24
    1bb4:	80 91 36 09 	lds	r24, 0x0936
    1bb8:	8f 93       	push	r24
    1bba:	80 91 35 09 	lds	r24, 0x0935
    1bbe:	8f 93       	push	r24
    1bc0:	80 91 38 09 	lds	r24, 0x0938
    1bc4:	8f 93       	push	r24
    1bc6:	80 91 37 09 	lds	r24, 0x0937
    1bca:	8f 93       	push	r24
    1bcc:	80 91 3a 09 	lds	r24, 0x093A
    1bd0:	8f 93       	push	r24
    1bd2:	80 91 39 09 	lds	r24, 0x0939
    1bd6:	8f 93       	push	r24
    1bd8:	80 91 2a 09 	lds	r24, 0x092A
    1bdc:	8f 93       	push	r24
    1bde:	80 91 29 09 	lds	r24, 0x0929
    1be2:	8f 93       	push	r24
    1be4:	80 91 3c 09 	lds	r24, 0x093C
    1be8:	8f 93       	push	r24
    1bea:	80 91 3b 09 	lds	r24, 0x093B
    1bee:	8f 93       	push	r24
    1bf0:	80 91 3e 09 	lds	r24, 0x093E
    1bf4:	8f 93       	push	r24
    1bf6:	80 91 3d 09 	lds	r24, 0x093D
    1bfa:	8f 93       	push	r24
    1bfc:	80 91 28 09 	lds	r24, 0x0928
    1c00:	8f 93       	push	r24
    1c02:	80 91 27 09 	lds	r24, 0x0927
    1c06:	8f 93       	push	r24
    1c08:	86 eb       	ldi	r24, 0xB6	; 182
    1c0a:	94 e0       	ldi	r25, 0x04	; 4
    1c0c:	9f 93       	push	r25
    1c0e:	8f 93       	push	r24
    1c10:	0e 94 aa 1c 	call	0x3954	; 0x3954 <printf>
    1c14:	8d b7       	in	r24, 0x3d	; 61
    1c16:	9e b7       	in	r25, 0x3e	; 62
    1c18:	4a 96       	adiw	r24, 0x1a	; 26
    1c1a:	0f b6       	in	r0, 0x3f	; 63
    1c1c:	f8 94       	cli
    1c1e:	9e bf       	out	0x3e, r25	; 62
    1c20:	0f be       	out	0x3f, r0	; 63
    1c22:	8d bf       	out	0x3d, r24	; 61
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	08 95       	ret

00001c28 <BMP280_SetOversampling>:
  @brief Sets the oversampling setting for the library
  @param[in] oss Oversampling setting
  @return 1
*****************************************************************************/
char BMP280_SetOversampling(short oss){
	oversampling = oss;
    1c28:	90 93 26 09 	sts	0x0926, r25
    1c2c:	80 93 25 09 	sts	0x0925, r24
	return (1);
}
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	08 95       	ret

00001c34 <BMP280_StartMeasurment>:

/*************************************************************************//**
  @brief Starts a measurement
  @return time to wait for result (in ms)
*****************************************************************************/
char BMP280_StartMeasurment(void){
    1c34:	1f 93       	push	r17
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	1f 92       	push	r1
    1c3c:	1f 92       	push	r1
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
	unsigned char data[2], result, delay;
	
	data[0] = BMP280_REG_CONTROL;
    1c42:	84 ef       	ldi	r24, 0xF4	; 244
    1c44:	89 83       	std	Y+1, r24	; 0x01

	switch (oversampling){
    1c46:	80 91 25 09 	lds	r24, 0x0925
    1c4a:	90 91 26 09 	lds	r25, 0x0926
    1c4e:	82 30       	cpi	r24, 0x02	; 2
    1c50:	91 05       	cpc	r25, r1
    1c52:	01 f1       	breq	.+64     	; 0x1c94 <BMP280_StartMeasurment+0x60>
    1c54:	2c f4       	brge	.+10     	; 0x1c60 <BMP280_StartMeasurment+0x2c>
    1c56:	00 97       	sbiw	r24, 0x00	; 0
    1c58:	49 f0       	breq	.+18     	; 0x1c6c <BMP280_StartMeasurment+0x38>
    1c5a:	01 97       	sbiw	r24, 0x01	; 1
    1c5c:	89 f0       	breq	.+34     	; 0x1c80 <BMP280_StartMeasurment+0x4c>
    1c5e:	38 c0       	rjmp	.+112    	; 0x1cd0 <BMP280_StartMeasurment+0x9c>
    1c60:	83 30       	cpi	r24, 0x03	; 3
    1c62:	91 05       	cpc	r25, r1
    1c64:	09 f1       	breq	.+66     	; 0x1ca8 <BMP280_StartMeasurment+0x74>
    1c66:	04 97       	sbiw	r24, 0x04	; 4
    1c68:	49 f1       	breq	.+82     	; 0x1cbc <BMP280_StartMeasurment+0x88>
    1c6a:	32 c0       	rjmp	.+100    	; 0x1cd0 <BMP280_StartMeasurment+0x9c>
		case 0:
		data[1] = BMP280_COMMAND_PRESSURE0;
    1c6c:	85 e2       	ldi	r24, 0x25	; 37
    1c6e:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    1c70:	81 e0       	ldi	r24, 0x01	; 1
    1c72:	90 e0       	ldi	r25, 0x00	; 0
    1c74:	90 93 24 09 	sts	0x0924, r25
    1c78:	80 93 23 09 	sts	0x0923, r24
		delay = 8;
    1c7c:	18 e0       	ldi	r17, 0x08	; 8
		break;
    1c7e:	2b c0       	rjmp	.+86     	; 0x1cd6 <BMP280_StartMeasurment+0xa2>
		case 1:
		data[1] = BMP280_COMMAND_PRESSURE1;
    1c80:	89 e2       	ldi	r24, 0x29	; 41
    1c82:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    1c84:	81 e0       	ldi	r24, 0x01	; 1
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	90 93 24 09 	sts	0x0924, r25
    1c8c:	80 93 23 09 	sts	0x0923, r24
		delay = 10;
    1c90:	1a e0       	ldi	r17, 0x0A	; 10
		break;
    1c92:	21 c0       	rjmp	.+66     	; 0x1cd6 <BMP280_StartMeasurment+0xa2>
		case 2:
		data[1] = BMP280_COMMAND_PRESSURE2;
    1c94:	8d e2       	ldi	r24, 0x2D	; 45
    1c96:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	90 93 24 09 	sts	0x0924, r25
    1ca0:	80 93 23 09 	sts	0x0923, r24
		delay = 15;
    1ca4:	1f e0       	ldi	r17, 0x0F	; 15
		break;
    1ca6:	17 c0       	rjmp	.+46     	; 0x1cd6 <BMP280_StartMeasurment+0xa2>
		case 3:
		data[1] = BMP280_COMMAND_PRESSURE3;
    1ca8:	81 e3       	ldi	r24, 0x31	; 49
    1caa:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	90 93 24 09 	sts	0x0924, r25
    1cb4:	80 93 23 09 	sts	0x0923, r24
		delay = 24;
    1cb8:	18 e1       	ldi	r17, 0x18	; 24
		break;
    1cba:	0d c0       	rjmp	.+26     	; 0x1cd6 <BMP280_StartMeasurment+0xa2>
		case 4:
		data[1] = BMP280_COMMAND_PRESSURE4;
    1cbc:	8d e5       	ldi	r24, 0x5D	; 93
    1cbe:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	90 e0       	ldi	r25, 0x00	; 0
    1cc4:	90 93 24 09 	sts	0x0924, r25
    1cc8:	80 93 23 09 	sts	0x0923, r24
		delay = 45;
    1ccc:	1d e2       	ldi	r17, 0x2D	; 45
		break;
    1cce:	03 c0       	rjmp	.+6      	; 0x1cd6 <BMP280_StartMeasurment+0xa2>
		default:
		data[1] = BMP280_COMMAND_PRESSURE0;
    1cd0:	85 e2       	ldi	r24, 0x25	; 37
    1cd2:	8a 83       	std	Y+2, r24	; 0x02
		delay = 9;
    1cd4:	19 e0       	ldi	r17, 0x09	; 9
  @param[in] *values pointer to an array to send, put the starting register in values[0]
  @param[in] length how many bytes to write (including the starting register ie. sizeof(values))
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_WriteBytes(unsigned char *values, char length){
	TWI_BeginWrite(BMP280_ADDR);
    1cd6:	86 e7       	ldi	r24, 0x76	; 118
    1cd8:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <TWI_BeginWrite>
	if((TWI_Write(&values[0],length) == TWI_SENT_ACK) && (TWI_Stop() != 0)) return 1; //Send bytes, a STOP bit, and check for success
    1cdc:	62 e0       	ldi	r22, 0x02	; 2
    1cde:	70 e0       	ldi	r23, 0x00	; 0
    1ce0:	ce 01       	movw	r24, r28
    1ce2:	01 96       	adiw	r24, 0x01	; 1
    1ce4:	0e 94 73 05 	call	0xae6	; 0xae6 <TWI_Write>
    1ce8:	88 32       	cpi	r24, 0x28	; 40
    1cea:	31 f4       	brne	.+12     	; 0x1cf8 <BMP280_StartMeasurment+0xc4>
    1cec:	0e 94 34 05 	call	0xa68	; 0xa68 <TWI_Stop>
		data[1] = BMP280_COMMAND_PRESSURE0;
		delay = 9;
		break;
	}
	result = BMP280_WriteBytes(&data[0], 2);
	if (result) // good write?
    1cf0:	88 23       	and	r24, r24
    1cf2:	21 f0       	breq	.+8      	; 0x1cfc <BMP280_StartMeasurment+0xc8>
	return(delay); // return the delay in ms (rounded up) to wait before retrieving data
    1cf4:	81 2f       	mov	r24, r17
    1cf6:	03 c0       	rjmp	.+6      	; 0x1cfe <BMP280_StartMeasurment+0xca>
	else
	return(-1); // or return -1 if there was a problem communicating with the BMP
    1cf8:	8f ef       	ldi	r24, 0xFF	; 255
    1cfa:	01 c0       	rjmp	.+2      	; 0x1cfe <BMP280_StartMeasurment+0xca>
    1cfc:	8f ef       	ldi	r24, 0xFF	; 255
	printf("failure on writeInt");
}
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	df 91       	pop	r29
    1d04:	cf 91       	pop	r28
    1d06:	1f 91       	pop	r17
    1d08:	08 95       	ret

00001d0a <BMP280_GetUnPT>:
  @brief Gets the uncalibrated temperature and pressure data
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetUnPT(double *uP, double *uT){
    1d0a:	8f 92       	push	r8
    1d0c:	9f 92       	push	r9
    1d0e:	af 92       	push	r10
    1d10:	bf 92       	push	r11
    1d12:	cf 92       	push	r12
    1d14:	df 92       	push	r13
    1d16:	ef 92       	push	r14
    1d18:	ff 92       	push	r15
    1d1a:	1f 93       	push	r17
    1d1c:	cf 93       	push	r28
    1d1e:	df 93       	push	r29
    1d20:	00 d0       	rcall	.+0      	; 0x1d22 <BMP280_GetUnPT+0x18>
    1d22:	00 d0       	rcall	.+0      	; 0x1d24 <BMP280_GetUnPT+0x1a>
    1d24:	cd b7       	in	r28, 0x3d	; 61
    1d26:	de b7       	in	r29, 0x3e	; 62
    1d28:	6c 01       	movw	r12, r24
    1d2a:	7b 01       	movw	r14, r22
	unsigned char data[6];
	char result;
	
	data[0] = BMP280_REG_RESULT_PRESSURE; //0xF7
    1d2c:	87 ef       	ldi	r24, 0xF7	; 247
    1d2e:	89 83       	std	Y+1, r24	; 0x01

	result = BMP280_ReadBytes(&data[0], 6); // 0xF7; xF8, 0xF9, 0xFA, 0xFB, 0xFC
    1d30:	66 e0       	ldi	r22, 0x06	; 6
    1d32:	ce 01       	movw	r24, r28
    1d34:	01 96       	adiw	r24, 0x01	; 1
    1d36:	4b de       	rcall	.-874    	; 0x19ce <BMP280_ReadBytes>
    1d38:	18 2f       	mov	r17, r24
	if (result){ // good read
    1d3a:	88 23       	and	r24, r24
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <BMP280_GetUnPT+0x36>
    1d3e:	66 c0       	rjmp	.+204    	; 0x1e0c <BMP280_GetUnPT+0x102>
		double factor = pow(2, 4);
		*uP = (( (data[0] *256.0) + data[1] + (data[2]/256.0))) * factor ;	//20bit UP
    1d40:	69 81       	ldd	r22, Y+1	; 0x01
    1d42:	70 e0       	ldi	r23, 0x00	; 0
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	b6 d6       	rcall	.+3436   	; 0x2ab6 <__floatsisf>
    1d4a:	20 e0       	ldi	r18, 0x00	; 0
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	40 e8       	ldi	r20, 0x80	; 128
    1d50:	53 e4       	ldi	r21, 0x43	; 67
    1d52:	65 d7       	rcall	.+3786   	; 0x2c1e <__mulsf3>
    1d54:	4b 01       	movw	r8, r22
    1d56:	5c 01       	movw	r10, r24
    1d58:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5a:	68 2f       	mov	r22, r24
    1d5c:	70 e0       	ldi	r23, 0x00	; 0
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	a9 d6       	rcall	.+3410   	; 0x2ab6 <__floatsisf>
    1d64:	9b 01       	movw	r18, r22
    1d66:	ac 01       	movw	r20, r24
    1d68:	c5 01       	movw	r24, r10
    1d6a:	b4 01       	movw	r22, r8
    1d6c:	a1 d5       	rcall	.+2882   	; 0x28b0 <__addsf3>
    1d6e:	4b 01       	movw	r8, r22
    1d70:	5c 01       	movw	r10, r24
    1d72:	4b 81       	ldd	r20, Y+3	; 0x03
    1d74:	64 2f       	mov	r22, r20
    1d76:	70 e0       	ldi	r23, 0x00	; 0
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
    1d7c:	9c d6       	rcall	.+3384   	; 0x2ab6 <__floatsisf>
    1d7e:	20 e0       	ldi	r18, 0x00	; 0
    1d80:	30 e0       	ldi	r19, 0x00	; 0
    1d82:	40 e8       	ldi	r20, 0x80	; 128
    1d84:	5b e3       	ldi	r21, 0x3B	; 59
    1d86:	4b d7       	rcall	.+3734   	; 0x2c1e <__mulsf3>
    1d88:	9b 01       	movw	r18, r22
    1d8a:	ac 01       	movw	r20, r24
    1d8c:	c5 01       	movw	r24, r10
    1d8e:	b4 01       	movw	r22, r8
    1d90:	8f d5       	rcall	.+2846   	; 0x28b0 <__addsf3>
    1d92:	20 e0       	ldi	r18, 0x00	; 0
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	40 e8       	ldi	r20, 0x80	; 128
    1d98:	51 e4       	ldi	r21, 0x41	; 65
    1d9a:	41 d7       	rcall	.+3714   	; 0x2c1e <__mulsf3>
    1d9c:	f6 01       	movw	r30, r12
    1d9e:	60 83       	st	Z, r22
    1da0:	71 83       	std	Z+1, r23	; 0x01
    1da2:	82 83       	std	Z+2, r24	; 0x02
    1da4:	93 83       	std	Z+3, r25	; 0x03
		*uT = (( (data[3] *256.0) + data[4] + (data[5]/256.0))) * factor ;	//20bit UT
    1da6:	6c 81       	ldd	r22, Y+4	; 0x04
    1da8:	70 e0       	ldi	r23, 0x00	; 0
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	83 d6       	rcall	.+3334   	; 0x2ab6 <__floatsisf>
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	40 e8       	ldi	r20, 0x80	; 128
    1db6:	53 e4       	ldi	r21, 0x43	; 67
    1db8:	32 d7       	rcall	.+3684   	; 0x2c1e <__mulsf3>
    1dba:	4b 01       	movw	r8, r22
    1dbc:	5c 01       	movw	r10, r24
    1dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    1dc0:	68 2f       	mov	r22, r24
    1dc2:	70 e0       	ldi	r23, 0x00	; 0
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	76 d6       	rcall	.+3308   	; 0x2ab6 <__floatsisf>
    1dca:	9b 01       	movw	r18, r22
    1dcc:	ac 01       	movw	r20, r24
    1dce:	c5 01       	movw	r24, r10
    1dd0:	b4 01       	movw	r22, r8
    1dd2:	6e d5       	rcall	.+2780   	; 0x28b0 <__addsf3>
    1dd4:	4b 01       	movw	r8, r22
    1dd6:	5c 01       	movw	r10, r24
    1dd8:	8e 81       	ldd	r24, Y+6	; 0x06
    1dda:	68 2f       	mov	r22, r24
    1ddc:	70 e0       	ldi	r23, 0x00	; 0
    1dde:	80 e0       	ldi	r24, 0x00	; 0
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	69 d6       	rcall	.+3282   	; 0x2ab6 <__floatsisf>
    1de4:	20 e0       	ldi	r18, 0x00	; 0
    1de6:	30 e0       	ldi	r19, 0x00	; 0
    1de8:	40 e8       	ldi	r20, 0x80	; 128
    1dea:	5b e3       	ldi	r21, 0x3B	; 59
    1dec:	18 d7       	rcall	.+3632   	; 0x2c1e <__mulsf3>
    1dee:	9b 01       	movw	r18, r22
    1df0:	ac 01       	movw	r20, r24
    1df2:	c5 01       	movw	r24, r10
    1df4:	b4 01       	movw	r22, r8
    1df6:	5c d5       	rcall	.+2744   	; 0x28b0 <__addsf3>
    1df8:	20 e0       	ldi	r18, 0x00	; 0
    1dfa:	30 e0       	ldi	r19, 0x00	; 0
    1dfc:	40 e8       	ldi	r20, 0x80	; 128
    1dfe:	51 e4       	ldi	r21, 0x41	; 65
    1e00:	0e d7       	rcall	.+3612   	; 0x2c1e <__mulsf3>
    1e02:	f7 01       	movw	r30, r14
    1e04:	60 83       	st	Z, r22
    1e06:	71 83       	std	Z+1, r23	; 0x01
    1e08:	82 83       	std	Z+2, r24	; 0x02
    1e0a:	93 83       	std	Z+3, r25	; 0x03
		
	}
	return(result);
	//printf("get values successful");
	delay_us(100);
}
    1e0c:	81 2f       	mov	r24, r17
    1e0e:	26 96       	adiw	r28, 0x06	; 6
    1e10:	0f b6       	in	r0, 0x3f	; 63
    1e12:	f8 94       	cli
    1e14:	de bf       	out	0x3e, r29	; 62
    1e16:	0f be       	out	0x3f, r0	; 63
    1e18:	cd bf       	out	0x3d, r28	; 61
    1e1a:	df 91       	pop	r29
    1e1c:	cf 91       	pop	r28
    1e1e:	1f 91       	pop	r17
    1e20:	ff 90       	pop	r15
    1e22:	ef 90       	pop	r14
    1e24:	df 90       	pop	r13
    1e26:	cf 90       	pop	r12
    1e28:	bf 90       	pop	r11
    1e2a:	af 90       	pop	r10
    1e2c:	9f 90       	pop	r9
    1e2e:	8f 90       	pop	r8
    1e30:	08 95       	ret

00001e32 <BMP280_CalcTemperature>:
  @brief Calculates temperature
  @param[out] pointer to a place to store the temperature data
  @param[in] pointer to the uncalibrated temperature data
  @return status
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
    1e32:	4f 92       	push	r4
    1e34:	5f 92       	push	r5
    1e36:	6f 92       	push	r6
    1e38:	7f 92       	push	r7
    1e3a:	8f 92       	push	r8
    1e3c:	9f 92       	push	r9
    1e3e:	af 92       	push	r10
    1e40:	bf 92       	push	r11
    1e42:	cf 92       	push	r12
    1e44:	df 92       	push	r13
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	cf 93       	push	r28
    1e4c:	df 93       	push	r29
    1e4e:	ec 01       	movw	r28, r24
	double adc_T = *uT ;
    1e50:	fb 01       	movw	r30, r22
    1e52:	c0 80       	ld	r12, Z
    1e54:	d1 80       	ldd	r13, Z+1	; 0x01
    1e56:	e2 80       	ldd	r14, Z+2	; 0x02
    1e58:	f3 80       	ldd	r15, Z+3	; 0x03
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
    1e5a:	80 91 27 09 	lds	r24, 0x0927
    1e5e:	90 91 28 09 	lds	r25, 0x0928
    1e62:	bc 01       	movw	r22, r24
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	24 d6       	rcall	.+3144   	; 0x2ab2 <__floatunsisf>
    1e6a:	2b 01       	movw	r4, r22
    1e6c:	3c 01       	movw	r6, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	40 e0       	ldi	r20, 0x00	; 0
    1e74:	57 e3       	ldi	r21, 0x37	; 55
    1e76:	c7 01       	movw	r24, r14
    1e78:	b6 01       	movw	r22, r12
    1e7a:	d1 d6       	rcall	.+3490   	; 0x2c1e <__mulsf3>
    1e7c:	4b 01       	movw	r8, r22
    1e7e:	5c 01       	movw	r10, r24
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	30 e0       	ldi	r19, 0x00	; 0
    1e84:	40 e0       	ldi	r20, 0x00	; 0
    1e86:	59 e3       	ldi	r21, 0x39	; 57
    1e88:	c3 01       	movw	r24, r6
    1e8a:	b2 01       	movw	r22, r4
    1e8c:	c8 d6       	rcall	.+3472   	; 0x2c1e <__mulsf3>
    1e8e:	9b 01       	movw	r18, r22
    1e90:	ac 01       	movw	r20, r24
    1e92:	c5 01       	movw	r24, r10
    1e94:	b4 01       	movw	r22, r8
    1e96:	0b d5       	rcall	.+2582   	; 0x28ae <__subsf3>
    1e98:	4b 01       	movw	r8, r22
    1e9a:	5c 01       	movw	r10, r24
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
	double adc_T = *uT ;
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	40 e8       	ldi	r20, 0x80	; 128
    1ea2:	58 e3       	ldi	r21, 0x38	; 56
    1ea4:	c7 01       	movw	r24, r14
    1ea6:	b6 01       	movw	r22, r12
    1ea8:	ba d6       	rcall	.+3444   	; 0x2c1e <__mulsf3>
    1eaa:	6b 01       	movw	r12, r22
    1eac:	7c 01       	movw	r14, r24
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e8       	ldi	r20, 0x80	; 128
    1eb4:	5a e3       	ldi	r21, 0x3A	; 58
    1eb6:	c3 01       	movw	r24, r6
    1eb8:	b2 01       	movw	r22, r4
    1eba:	b1 d6       	rcall	.+3426   	; 0x2c1e <__mulsf3>
    1ebc:	9b 01       	movw	r18, r22
    1ebe:	ac 01       	movw	r20, r24
    1ec0:	c7 01       	movw	r24, r14
    1ec2:	b6 01       	movw	r22, r12
    1ec4:	f4 d4       	rcall	.+2536   	; 0x28ae <__subsf3>
    1ec6:	6b 01       	movw	r12, r22
    1ec8:	7c 01       	movw	r14, r24
    1eca:	80 91 3d 09 	lds	r24, 0x093D
    1ece:	90 91 3e 09 	lds	r25, 0x093E
    1ed2:	bc 01       	movw	r22, r24
    1ed4:	99 0f       	add	r25, r25
    1ed6:	88 0b       	sbc	r24, r24
    1ed8:	99 0b       	sbc	r25, r25
    1eda:	ed d5       	rcall	.+3034   	; 0x2ab6 <__floatsisf>
    1edc:	9b 01       	movw	r18, r22
    1ede:	ac 01       	movw	r20, r24
    1ee0:	c7 01       	movw	r24, r14
    1ee2:	b6 01       	movw	r22, r12
    1ee4:	9c d6       	rcall	.+3384   	; 0x2c1e <__mulsf3>
    1ee6:	6b 01       	movw	r12, r22
    1ee8:	7c 01       	movw	r14, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
    1eea:	a5 01       	movw	r20, r10
    1eec:	94 01       	movw	r18, r8
    1eee:	c5 01       	movw	r24, r10
    1ef0:	b4 01       	movw	r22, r8
    1ef2:	95 d6       	rcall	.+3370   	; 0x2c1e <__mulsf3>
    1ef4:	4b 01       	movw	r8, r22
    1ef6:	5c 01       	movw	r10, r24
    1ef8:	40 91 3b 09 	lds	r20, 0x093B
    1efc:	50 91 3c 09 	lds	r21, 0x093C
    1f00:	ba 01       	movw	r22, r20
    1f02:	55 0f       	add	r21, r21
    1f04:	88 0b       	sbc	r24, r24
    1f06:	99 0b       	sbc	r25, r25
    1f08:	d6 d5       	rcall	.+2988   	; 0x2ab6 <__floatsisf>
    1f0a:	9b 01       	movw	r18, r22
    1f0c:	ac 01       	movw	r20, r24
    1f0e:	c5 01       	movw	r24, r10
    1f10:	b4 01       	movw	r22, r8
    1f12:	85 d6       	rcall	.+3338   	; 0x2c1e <__mulsf3>
    1f14:	9b 01       	movw	r18, r22
    1f16:	ac 01       	movw	r20, r24
	t_fine = (long signed int)(var1+var2);
    1f18:	c7 01       	movw	r24, r14
    1f1a:	b6 01       	movw	r22, r12
    1f1c:	c9 d4       	rcall	.+2450   	; 0x28b0 <__addsf3>
    1f1e:	6b 01       	movw	r12, r22
    1f20:	7c 01       	movw	r14, r24
    1f22:	96 d5       	rcall	.+2860   	; 0x2a50 <__fixsfsi>
    1f24:	60 93 1f 09 	sts	0x091F, r22
    1f28:	70 93 20 09 	sts	0x0920, r23
    1f2c:	80 93 21 09 	sts	0x0921, r24
    1f30:	90 93 22 09 	sts	0x0922, r25
	
	*T = (var1+var2)/5120.0;
    1f34:	20 e0       	ldi	r18, 0x00	; 0
    1f36:	30 e0       	ldi	r19, 0x00	; 0
    1f38:	40 ea       	ldi	r20, 0xA0	; 160
    1f3a:	55 e4       	ldi	r21, 0x45	; 69
    1f3c:	c7 01       	movw	r24, r14
    1f3e:	b6 01       	movw	r22, r12
    1f40:	1f d5       	rcall	.+2622   	; 0x2980 <__divsf3>
    1f42:	6b 01       	movw	r12, r22
    1f44:	7c 01       	movw	r14, r24
    1f46:	68 83       	st	Y, r22
    1f48:	79 83       	std	Y+1, r23	; 0x01
    1f4a:	8a 83       	std	Y+2, r24	; 0x02
    1f4c:	9b 83       	std	Y+3, r25	; 0x03
	
	if(*T>100.0 || *T <(-100.0))return 0;
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	30 e0       	ldi	r19, 0x00	; 0
    1f52:	48 ec       	ldi	r20, 0xC8	; 200
    1f54:	52 e4       	ldi	r21, 0x42	; 66
    1f56:	5f d6       	rcall	.+3262   	; 0x2c16 <__gesf2>
    1f58:	18 16       	cp	r1, r24
    1f5a:	6c f0       	brlt	.+26     	; 0x1f76 <BMP280_CalcTemperature+0x144>
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	48 ec       	ldi	r20, 0xC8	; 200
    1f62:	52 ec       	ldi	r21, 0xC2	; 194
    1f64:	c7 01       	movw	r24, r14
    1f66:	b6 01       	movw	r22, r12
    1f68:	07 d5       	rcall	.+2574   	; 0x2978 <__cmpsf2>
    1f6a:	88 1f       	adc	r24, r24
    1f6c:	88 27       	eor	r24, r24
    1f6e:	88 1f       	adc	r24, r24
    1f70:	91 e0       	ldi	r25, 0x01	; 1
    1f72:	89 27       	eor	r24, r25
    1f74:	01 c0       	rjmp	.+2      	; 0x1f78 <BMP280_CalcTemperature+0x146>
    1f76:	80 e0       	ldi	r24, 0x00	; 0
	
	return (1);
}
    1f78:	df 91       	pop	r29
    1f7a:	cf 91       	pop	r28
    1f7c:	ff 90       	pop	r15
    1f7e:	ef 90       	pop	r14
    1f80:	df 90       	pop	r13
    1f82:	cf 90       	pop	r12
    1f84:	bf 90       	pop	r11
    1f86:	af 90       	pop	r10
    1f88:	9f 90       	pop	r9
    1f8a:	8f 90       	pop	r8
    1f8c:	7f 90       	pop	r7
    1f8e:	6f 90       	pop	r6
    1f90:	5f 90       	pop	r5
    1f92:	4f 90       	pop	r4
    1f94:	08 95       	ret

00001f96 <BMP280_CalcPressure>:
  @brief Calculates pressure
  @param[out] pointer to a place to store the pressure data
  @param[in] pointer to the uncalibrated pressure data
  @return status
*****************************************************************************/
char BMP280_CalcPressure(double *P,double *uP){
    1f96:	4f 92       	push	r4
    1f98:	5f 92       	push	r5
    1f9a:	6f 92       	push	r6
    1f9c:	7f 92       	push	r7
    1f9e:	8f 92       	push	r8
    1fa0:	9f 92       	push	r9
    1fa2:	af 92       	push	r10
    1fa4:	bf 92       	push	r11
    1fa6:	cf 92       	push	r12
    1fa8:	df 92       	push	r13
    1faa:	ef 92       	push	r14
    1fac:	ff 92       	push	r15
    1fae:	0f 93       	push	r16
    1fb0:	1f 93       	push	r17
    1fb2:	cf 93       	push	r28
    1fb4:	df 93       	push	r29
    1fb6:	8c 01       	movw	r16, r24
    1fb8:	eb 01       	movw	r28, r22
	//char result;
	double var1 , var2 ;
	
	var1 = ((double)t_fine/2.0) - 64000.0;
    1fba:	60 91 1f 09 	lds	r22, 0x091F
    1fbe:	70 91 20 09 	lds	r23, 0x0920
    1fc2:	80 91 21 09 	lds	r24, 0x0921
    1fc6:	90 91 22 09 	lds	r25, 0x0922
    1fca:	75 d5       	rcall	.+2794   	; 0x2ab6 <__floatsisf>
    1fcc:	20 e0       	ldi	r18, 0x00	; 0
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	40 e0       	ldi	r20, 0x00	; 0
    1fd2:	5f e3       	ldi	r21, 0x3F	; 63
    1fd4:	24 d6       	rcall	.+3144   	; 0x2c1e <__mulsf3>
    1fd6:	20 e0       	ldi	r18, 0x00	; 0
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	4a e7       	ldi	r20, 0x7A	; 122
    1fdc:	57 e4       	ldi	r21, 0x47	; 71
    1fde:	67 d4       	rcall	.+2254   	; 0x28ae <__subsf3>
    1fe0:	6b 01       	movw	r12, r22
    1fe2:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
    1fe4:	60 91 31 09 	lds	r22, 0x0931
    1fe8:	70 91 32 09 	lds	r23, 0x0932
    1fec:	07 2e       	mov	r0, r23
    1fee:	00 0c       	add	r0, r0
    1ff0:	88 0b       	sbc	r24, r24
    1ff2:	99 0b       	sbc	r25, r25
    1ff4:	60 d5       	rcall	.+2752   	; 0x2ab6 <__floatsisf>
    1ff6:	a7 01       	movw	r20, r14
    1ff8:	96 01       	movw	r18, r12
    1ffa:	11 d6       	rcall	.+3106   	; 0x2c1e <__mulsf3>
    1ffc:	20 e0       	ldi	r18, 0x00	; 0
    1ffe:	30 e0       	ldi	r19, 0x00	; 0
    2000:	40 e0       	ldi	r20, 0x00	; 0
    2002:	58 e3       	ldi	r21, 0x38	; 56
    2004:	0c d6       	rcall	.+3096   	; 0x2c1e <__mulsf3>
    2006:	a7 01       	movw	r20, r14
    2008:	96 01       	movw	r18, r12
    200a:	09 d6       	rcall	.+3090   	; 0x2c1e <__mulsf3>
    200c:	4b 01       	movw	r8, r22
    200e:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
    2010:	60 91 33 09 	lds	r22, 0x0933
    2014:	70 91 34 09 	lds	r23, 0x0934
    2018:	07 2e       	mov	r0, r23
    201a:	00 0c       	add	r0, r0
    201c:	88 0b       	sbc	r24, r24
    201e:	99 0b       	sbc	r25, r25
    2020:	4a d5       	rcall	.+2708   	; 0x2ab6 <__floatsisf>
    2022:	a7 01       	movw	r20, r14
    2024:	96 01       	movw	r18, r12
    2026:	fb d5       	rcall	.+3062   	; 0x2c1e <__mulsf3>
    2028:	9b 01       	movw	r18, r22
    202a:	ac 01       	movw	r20, r24
    202c:	41 d4       	rcall	.+2178   	; 0x28b0 <__addsf3>
    202e:	a5 01       	movw	r20, r10
    2030:	94 01       	movw	r18, r8
    2032:	3e d4       	rcall	.+2172   	; 0x28b0 <__addsf3>
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	40 e8       	ldi	r20, 0x80	; 128
    203a:	5e e3       	ldi	r21, 0x3E	; 62
    203c:	f0 d5       	rcall	.+3040   	; 0x2c1e <__mulsf3>
    203e:	4b 01       	movw	r8, r22
    2040:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var1 = (((double)dig_P3) * var1 * var1/524288.0 + ((double)dig_P2) * var1) / 524288.0;
    2042:	60 91 37 09 	lds	r22, 0x0937
    2046:	70 91 38 09 	lds	r23, 0x0938
    204a:	07 2e       	mov	r0, r23
    204c:	00 0c       	add	r0, r0
    204e:	88 0b       	sbc	r24, r24
    2050:	99 0b       	sbc	r25, r25
    2052:	31 d5       	rcall	.+2658   	; 0x2ab6 <__floatsisf>
    2054:	a7 01       	movw	r20, r14
    2056:	96 01       	movw	r18, r12
    2058:	e2 d5       	rcall	.+3012   	; 0x2c1e <__mulsf3>
    205a:	a7 01       	movw	r20, r14
    205c:	96 01       	movw	r18, r12
    205e:	df d5       	rcall	.+3006   	; 0x2c1e <__mulsf3>
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e0       	ldi	r20, 0x00	; 0
    2066:	56 e3       	ldi	r21, 0x36	; 54
    2068:	da d5       	rcall	.+2996   	; 0x2c1e <__mulsf3>
    206a:	2b 01       	movw	r4, r22
    206c:	3c 01       	movw	r6, r24
    206e:	60 91 39 09 	lds	r22, 0x0939
    2072:	70 91 3a 09 	lds	r23, 0x093A
    2076:	07 2e       	mov	r0, r23
    2078:	00 0c       	add	r0, r0
    207a:	88 0b       	sbc	r24, r24
    207c:	99 0b       	sbc	r25, r25
    207e:	1b d5       	rcall	.+2614   	; 0x2ab6 <__floatsisf>
    2080:	a7 01       	movw	r20, r14
    2082:	96 01       	movw	r18, r12
    2084:	cc d5       	rcall	.+2968   	; 0x2c1e <__mulsf3>
    2086:	9b 01       	movw	r18, r22
    2088:	ac 01       	movw	r20, r24
    208a:	c3 01       	movw	r24, r6
    208c:	b2 01       	movw	r22, r4
    208e:	10 d4       	rcall	.+2080   	; 0x28b0 <__addsf3>
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e0       	ldi	r20, 0x00	; 0
    2096:	56 e3       	ldi	r21, 0x36	; 54
    2098:	c2 d5       	rcall	.+2948   	; 0x2c1e <__mulsf3>
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e0       	ldi	r20, 0x00	; 0
    20a0:	57 e4       	ldi	r21, 0x47	; 71
    20a2:	06 d4       	rcall	.+2060   	; 0x28b0 <__addsf3>
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e0       	ldi	r20, 0x00	; 0
    20aa:	58 e3       	ldi	r21, 0x38	; 56
    20ac:	b8 d5       	rcall	.+2928   	; 0x2c1e <__mulsf3>
    20ae:	6b 01       	movw	r12, r22
    20b0:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
    20b2:	28 81       	ld	r18, Y
    20b4:	39 81       	ldd	r19, Y+1	; 0x01
    20b6:	4a 81       	ldd	r20, Y+2	; 0x02
    20b8:	5b 81       	ldd	r21, Y+3	; 0x03
    20ba:	60 e0       	ldi	r22, 0x00	; 0
    20bc:	70 e0       	ldi	r23, 0x00	; 0
    20be:	80 e8       	ldi	r24, 0x80	; 128
    20c0:	99 e4       	ldi	r25, 0x49	; 73
    20c2:	f5 d3       	rcall	.+2026   	; 0x28ae <__subsf3>
    20c4:	2b 01       	movw	r4, r22
    20c6:	3c 01       	movw	r6, r24
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
    20c8:	60 91 35 09 	lds	r22, 0x0935
    20cc:	70 91 36 09 	lds	r23, 0x0936
    20d0:	07 2e       	mov	r0, r23
    20d2:	00 0c       	add	r0, r0
    20d4:	88 0b       	sbc	r24, r24
    20d6:	99 0b       	sbc	r25, r25
    20d8:	ee d4       	rcall	.+2524   	; 0x2ab6 <__floatsisf>
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e8       	ldi	r20, 0x80	; 128
    20e0:	57 e4       	ldi	r21, 0x47	; 71
    20e2:	9d d5       	rcall	.+2874   	; 0x2c1e <__mulsf3>
    20e4:	9b 01       	movw	r18, r22
    20e6:	ac 01       	movw	r20, r24
    20e8:	c5 01       	movw	r24, r10
    20ea:	b4 01       	movw	r22, r8
    20ec:	e1 d3       	rcall	.+1986   	; 0x28b0 <__addsf3>
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	40 e8       	ldi	r20, 0x80	; 128
    20f4:	59 e3       	ldi	r21, 0x39	; 57
    20f6:	93 d5       	rcall	.+2854   	; 0x2c1e <__mulsf3>
    20f8:	9b 01       	movw	r18, r22
    20fa:	ac 01       	movw	r20, r24
    20fc:	c3 01       	movw	r24, r6
    20fe:	b2 01       	movw	r22, r4
    2100:	d6 d3       	rcall	.+1964   	; 0x28ae <__subsf3>
    2102:	20 e0       	ldi	r18, 0x00	; 0
    2104:	30 e5       	ldi	r19, 0x50	; 80
    2106:	43 ec       	ldi	r20, 0xC3	; 195
    2108:	55 e4       	ldi	r21, 0x45	; 69
    210a:	89 d5       	rcall	.+2834   	; 0x2c1e <__mulsf3>
    210c:	4b 01       	movw	r8, r22
    210e:	5c 01       	movw	r10, r24
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
    2110:	80 91 29 09 	lds	r24, 0x0929
    2114:	90 91 2a 09 	lds	r25, 0x092A
    2118:	bc 01       	movw	r22, r24
    211a:	80 e0       	ldi	r24, 0x00	; 0
    211c:	90 e0       	ldi	r25, 0x00	; 0
    211e:	c9 d4       	rcall	.+2450   	; 0x2ab2 <__floatunsisf>
    2120:	9b 01       	movw	r18, r22
    2122:	ac 01       	movw	r20, r24
    2124:	c7 01       	movw	r24, r14
    2126:	b6 01       	movw	r22, r12
    2128:	7a d5       	rcall	.+2804   	; 0x2c1e <__mulsf3>
    212a:	9b 01       	movw	r18, r22
    212c:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
    212e:	c5 01       	movw	r24, r10
    2130:	b4 01       	movw	r22, r8
    2132:	26 d4       	rcall	.+2124   	; 0x2980 <__divsf3>
    2134:	6b 01       	movw	r12, r22
    2136:	7c 01       	movw	r14, r24
	//Serial.print("p = ");Serial.println(p,2);
	
	var1 = ((double)dig_P9)*p*p/2147483648.0;	//overflow
    2138:	60 91 2b 09 	lds	r22, 0x092B
    213c:	70 91 2c 09 	lds	r23, 0x092C
    2140:	07 2e       	mov	r0, r23
    2142:	00 0c       	add	r0, r0
    2144:	88 0b       	sbc	r24, r24
    2146:	99 0b       	sbc	r25, r25
    2148:	b6 d4       	rcall	.+2412   	; 0x2ab6 <__floatsisf>
    214a:	a7 01       	movw	r20, r14
    214c:	96 01       	movw	r18, r12
    214e:	67 d5       	rcall	.+2766   	; 0x2c1e <__mulsf3>
    2150:	a7 01       	movw	r20, r14
    2152:	96 01       	movw	r18, r12
    2154:	64 d5       	rcall	.+2760   	; 0x2c1e <__mulsf3>
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	40 e0       	ldi	r20, 0x00	; 0
    215c:	50 e3       	ldi	r21, 0x30	; 48
    215e:	5f d5       	rcall	.+2750   	; 0x2c1e <__mulsf3>
    2160:	4b 01       	movw	r8, r22
    2162:	5c 01       	movw	r10, r24
	
	var2 = p*((double)dig_P8)/32768.0;
    2164:	80 91 2d 09 	lds	r24, 0x092D
    2168:	90 91 2e 09 	lds	r25, 0x092E
    216c:	bc 01       	movw	r22, r24
    216e:	99 0f       	add	r25, r25
    2170:	88 0b       	sbc	r24, r24
    2172:	99 0b       	sbc	r25, r25
    2174:	a0 d4       	rcall	.+2368   	; 0x2ab6 <__floatsisf>
    2176:	a7 01       	movw	r20, r14
    2178:	96 01       	movw	r18, r12
    217a:	51 d5       	rcall	.+2722   	; 0x2c1e <__mulsf3>
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	40 e0       	ldi	r20, 0x00	; 0
    2182:	58 e3       	ldi	r21, 0x38	; 56
    2184:	4c d5       	rcall	.+2712   	; 0x2c1e <__mulsf3>
    2186:	9b 01       	movw	r18, r22
    2188:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	p = p + (var1+var2+((double)dig_P7))/16.0;
    218a:	c5 01       	movw	r24, r10
    218c:	b4 01       	movw	r22, r8
    218e:	90 d3       	rcall	.+1824   	; 0x28b0 <__addsf3>
    2190:	4b 01       	movw	r8, r22
    2192:	5c 01       	movw	r10, r24
    2194:	80 91 2f 09 	lds	r24, 0x092F
    2198:	90 91 30 09 	lds	r25, 0x0930
    219c:	bc 01       	movw	r22, r24
    219e:	99 0f       	add	r25, r25
    21a0:	88 0b       	sbc	r24, r24
    21a2:	99 0b       	sbc	r25, r25
    21a4:	88 d4       	rcall	.+2320   	; 0x2ab6 <__floatsisf>
    21a6:	9b 01       	movw	r18, r22
    21a8:	ac 01       	movw	r20, r24
    21aa:	c5 01       	movw	r24, r10
    21ac:	b4 01       	movw	r22, r8
    21ae:	80 d3       	rcall	.+1792   	; 0x28b0 <__addsf3>
    21b0:	20 e0       	ldi	r18, 0x00	; 0
    21b2:	30 e0       	ldi	r19, 0x00	; 0
    21b4:	40 e8       	ldi	r20, 0x80	; 128
    21b6:	5d e3       	ldi	r21, 0x3D	; 61
    21b8:	32 d5       	rcall	.+2660   	; 0x2c1e <__mulsf3>
    21ba:	a7 01       	movw	r20, r14
    21bc:	96 01       	movw	r18, r12
    21be:	78 d3       	rcall	.+1776   	; 0x28b0 <__addsf3>
	//Serial.print("p = ");Serial.println(p,2);
	
	*P = p/100.0 ;
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	48 ec       	ldi	r20, 0xC8	; 200
    21c6:	52 e4       	ldi	r21, 0x42	; 66
    21c8:	db d3       	rcall	.+1974   	; 0x2980 <__divsf3>
    21ca:	6b 01       	movw	r12, r22
    21cc:	7c 01       	movw	r14, r24
    21ce:	f8 01       	movw	r30, r16
    21d0:	60 83       	st	Z, r22
    21d2:	71 83       	std	Z+1, r23	; 0x01
    21d4:	82 83       	std	Z+2, r24	; 0x02
    21d6:	93 83       	std	Z+3, r25	; 0x03
	
	if((*P>1200.0) || (*P < 800.0))return (0);
    21d8:	20 e0       	ldi	r18, 0x00	; 0
    21da:	30 e0       	ldi	r19, 0x00	; 0
    21dc:	46 e9       	ldi	r20, 0x96	; 150
    21de:	54 e4       	ldi	r21, 0x44	; 68
    21e0:	1a d5       	rcall	.+2612   	; 0x2c16 <__gesf2>
    21e2:	18 16       	cp	r1, r24
    21e4:	6c f0       	brlt	.+26     	; 0x2200 <BMP280_CalcPressure+0x26a>
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	30 e0       	ldi	r19, 0x00	; 0
    21ea:	48 e4       	ldi	r20, 0x48	; 72
    21ec:	54 e4       	ldi	r21, 0x44	; 68
    21ee:	c7 01       	movw	r24, r14
    21f0:	b6 01       	movw	r22, r12
    21f2:	c2 d3       	rcall	.+1924   	; 0x2978 <__cmpsf2>
    21f4:	88 1f       	adc	r24, r24
    21f6:	88 27       	eor	r24, r24
    21f8:	88 1f       	adc	r24, r24
    21fa:	91 e0       	ldi	r25, 0x01	; 1
    21fc:	89 27       	eor	r24, r25
    21fe:	01 c0       	rjmp	.+2      	; 0x2202 <BMP280_CalcPressure+0x26c>
    2200:	80 e0       	ldi	r24, 0x00	; 0
	return (1);
}
    2202:	df 91       	pop	r29
    2204:	cf 91       	pop	r28
    2206:	1f 91       	pop	r17
    2208:	0f 91       	pop	r16
    220a:	ff 90       	pop	r15
    220c:	ef 90       	pop	r14
    220e:	df 90       	pop	r13
    2210:	cf 90       	pop	r12
    2212:	bf 90       	pop	r11
    2214:	af 90       	pop	r10
    2216:	9f 90       	pop	r9
    2218:	8f 90       	pop	r8
    221a:	7f 90       	pop	r7
    221c:	6f 90       	pop	r6
    221e:	5f 90       	pop	r5
    2220:	4f 90       	pop	r4
    2222:	08 95       	ret

00002224 <BMP280_GetTemperatureAndPressure>:
  @brief Gets temperature and pressure
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetTemperatureAndPressure(double *T,double *P){
    2224:	ef 92       	push	r14
    2226:	ff 92       	push	r15
    2228:	0f 93       	push	r16
    222a:	1f 93       	push	r17
    222c:	cf 93       	push	r28
    222e:	df 93       	push	r29
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	28 97       	sbiw	r28, 0x08	; 8
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	8c 01       	movw	r16, r24
    2242:	7b 01       	movw	r14, r22
	double uP,uT ;
	char result = BMP280_GetUnPT(&uP,&uT);
    2244:	be 01       	movw	r22, r28
    2246:	6b 5f       	subi	r22, 0xFB	; 251
    2248:	7f 4f       	sbci	r23, 0xFF	; 255
    224a:	ce 01       	movw	r24, r28
    224c:	01 96       	adiw	r24, 0x01	; 1
    224e:	5d dd       	rcall	.-1350   	; 0x1d0a <BMP280_GetUnPT>
	if(result!=0){
    2250:	88 23       	and	r24, r24
    2252:	c1 f0       	breq	.+48     	; 0x2284 <BMP280_GetTemperatureAndPressure+0x60>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
    2254:	be 01       	movw	r22, r28
    2256:	6b 5f       	subi	r22, 0xFB	; 251
    2258:	7f 4f       	sbci	r23, 0xFF	; 255
    225a:	c8 01       	movw	r24, r16
    225c:	ea dd       	rcall	.-1068   	; 0x1e32 <BMP280_CalcTemperature>
		if(result){
    225e:	88 23       	and	r24, r24
    2260:	61 f0       	breq	.+24     	; 0x227a <BMP280_GetTemperatureAndPressure+0x56>
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
    2262:	be 01       	movw	r22, r28
    2264:	6f 5f       	subi	r22, 0xFF	; 255
    2266:	7f 4f       	sbci	r23, 0xFF	; 255
    2268:	c7 01       	movw	r24, r14
    226a:	95 de       	rcall	.-726    	; 0x1f96 <BMP280_CalcPressure>
			if(result)return (1);
    226c:	81 11       	cpse	r24, r1
    226e:	0f c0       	rjmp	.+30     	; 0x228e <BMP280_GetTemperatureAndPressure+0x6a>
			else error = 3 ;	// pressure error ;
    2270:	83 e0       	ldi	r24, 0x03	; 3
    2272:	80 93 1e 09 	sts	0x091E, r24
			return (0);
    2276:	80 e0       	ldi	r24, 0x00	; 0
    2278:	0b c0       	rjmp	.+22     	; 0x2290 <BMP280_GetTemperatureAndPressure+0x6c>
		}else
		error = 2;	// temperature error ;
    227a:	82 e0       	ldi	r24, 0x02	; 2
    227c:	80 93 1e 09 	sts	0x091E, r24
	}
	else
	error = 1;
	
	return (0);
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	06 c0       	rjmp	.+12     	; 0x2290 <BMP280_GetTemperatureAndPressure+0x6c>
			return (0);
		}else
		error = 2;	// temperature error ;
	}
	else
	error = 1;
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	80 93 1e 09 	sts	0x091E, r24
	
	return (0);
    228a:	80 e0       	ldi	r24, 0x00	; 0
    228c:	01 c0       	rjmp	.+2      	; 0x2290 <BMP280_GetTemperatureAndPressure+0x6c>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
		if(result){
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
			if(result)return (1);
    228e:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	error = 1;
	
	return (0);
}
    2290:	28 96       	adiw	r28, 0x08	; 8
    2292:	0f b6       	in	r0, 0x3f	; 63
    2294:	f8 94       	cli
    2296:	de bf       	out	0x3e, r29	; 62
    2298:	0f be       	out	0x3f, r0	; 63
    229a:	cd bf       	out	0x3d, r28	; 61
    229c:	df 91       	pop	r29
    229e:	cf 91       	pop	r28
    22a0:	1f 91       	pop	r17
    22a2:	0f 91       	pop	r16
    22a4:	ff 90       	pop	r15
    22a6:	ef 90       	pop	r14
    22a8:	08 95       	ret

000022aa <DemoStorage_Device_VTinit>:
};


void DemoStorage_Device_VTinit( DemoStorageDevice *this )
{
	this->abstract.device_vt = &DemoStorageDevice_abstract_vmt;
    22aa:	2e e6       	ldi	r18, 0x6E	; 110
    22ac:	32 e0       	ldi	r19, 0x02	; 2
    22ae:	fc 01       	movw	r30, r24
    22b0:	31 83       	std	Z+1, r19	; 0x01
    22b2:	20 83       	st	Z, r18
    22b4:	08 95       	ret

000022b6 <DemoStorage_Device_init>:
}

int DemoStorage_Device_init( DemoStorageDevice *this )
{
	return 0;
}
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	08 95       	ret

000022bc <DemoStorage_Device_reset>:

int DemoStorage_Device_reset( DemoStorageDevice *this )
{
	return 0;
}
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	08 95       	ret

000022c2 <DemoStorage_Device_getType>:

int DemoStorage_Device_getType( DemoStorageDevice *this )
{
	return TYPE_STORAGE_DEVICE;
}
    22c2:	84 e0       	ldi	r24, 0x04	; 4
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	08 95       	ret

000022c8 <DemoStorage_Device_Tinit>:



void DemoStorage_Device_Tinit(DemoStorageDevice *this)
{
	this->vmt = &DemoStorageDevice_vmt;
    22c8:	26 e6       	ldi	r18, 0x66	; 102
    22ca:	32 e0       	ldi	r19, 0x02	; 2
    22cc:	fc 01       	movw	r30, r24
    22ce:	33 83       	std	Z+3, r19	; 0x03
    22d0:	22 83       	std	Z+2, r18	; 0x02
    22d2:	08 95       	ret

000022d4 <DemoStorage_Device_Configure>:
}

int DemoStorage_Device_Configure(DemoStorageDevice *this)
{
	return 0;
}
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	08 95       	ret

000022da <DemoStorageget_CurDataUnit>:

DataUnit * DemoStorageget_CurDataUnit(DemoStorageDevice *this)
{
    22da:	0f 93       	push	r16
    22dc:	1f 93       	push	r17
    22de:	cf 93       	push	r28
    22e0:	df 93       	push	r29
    22e2:	ec 01       	movw	r28, r24
	int t = this->cur_pos;
    22e4:	0e 81       	ldd	r16, Y+6	; 0x06
    22e6:	1f 81       	ldd	r17, Y+7	; 0x07
	printf("Executre get store Device : %d\n",t);
    22e8:	1f 93       	push	r17
    22ea:	0f 93       	push	r16
    22ec:	8d ee       	ldi	r24, 0xED	; 237
    22ee:	94 e0       	ldi	r25, 0x04	; 4
    22f0:	9f 93       	push	r25
    22f2:	8f 93       	push	r24
    22f4:	0e 94 aa 1c 	call	0x3954	; 0x3954 <printf>
	this->cur_pos = this->cur_pos+1;
    22f8:	8e 81       	ldd	r24, Y+6	; 0x06
    22fa:	9f 81       	ldd	r25, Y+7	; 0x07
    22fc:	01 96       	adiw	r24, 0x01	; 1
    22fe:	9f 83       	std	Y+7, r25	; 0x07
    2300:	8e 83       	std	Y+6, r24	; 0x06
	DataUnit * data_t = this -> StoragesData;
	return (data_t + t);
    2302:	28 e3       	ldi	r18, 0x38	; 56
    2304:	20 9f       	mul	r18, r16
    2306:	c0 01       	movw	r24, r0
    2308:	21 9f       	mul	r18, r17
    230a:	90 0d       	add	r25, r0
    230c:	11 24       	eor	r1, r1
    230e:	28 85       	ldd	r18, Y+8	; 0x08
    2310:	39 85       	ldd	r19, Y+9	; 0x09
    2312:	0f 90       	pop	r0
    2314:	0f 90       	pop	r0
    2316:	0f 90       	pop	r0
    2318:	0f 90       	pop	r0
    231a:	82 0f       	add	r24, r18
    231c:	93 1f       	adc	r25, r19
    231e:	df 91       	pop	r29
    2320:	cf 91       	pop	r28
    2322:	1f 91       	pop	r17
    2324:	0f 91       	pop	r16
    2326:	08 95       	ret

00002328 <DemoStorage_Device_Execute>:
{
	this->vmt = &DemoStorageDevice_vmt;
}

int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
    2328:	3f 92       	push	r3
    232a:	4f 92       	push	r4
    232c:	5f 92       	push	r5
    232e:	6f 92       	push	r6
    2330:	7f 92       	push	r7
    2332:	8f 92       	push	r8
    2334:	9f 92       	push	r9
    2336:	af 92       	push	r10
    2338:	bf 92       	push	r11
    233a:	cf 92       	push	r12
    233c:	df 92       	push	r13
    233e:	ef 92       	push	r14
    2340:	ff 92       	push	r15
    2342:	0f 93       	push	r16
    2344:	1f 93       	push	r17
    2346:	cf 93       	push	r28
    2348:	df 93       	push	r29
    234a:	cd b7       	in	r28, 0x3d	; 61
    234c:	de b7       	in	r29, 0x3e	; 62
    234e:	e8 97       	sbiw	r28, 0x38	; 56
    2350:	0f b6       	in	r0, 0x3f	; 63
    2352:	f8 94       	cli
    2354:	de bf       	out	0x3e, r29	; 62
    2356:	0f be       	out	0x3f, r0	; 63
    2358:	cd bf       	out	0x3d, r28	; 61
    235a:	3c 01       	movw	r6, r24
	printf("Executre Storage Device\n");
    235c:	8d e0       	ldi	r24, 0x0D	; 13
    235e:	95 e0       	ldi	r25, 0x05	; 5
    2360:	0e 94 c2 1c 	call	0x3984	; 0x3984 <puts>
	for( int i=0; i<this->cur_pos; i++)
    2364:	f3 01       	movw	r30, r6
    2366:	86 81       	ldd	r24, Z+6	; 0x06
    2368:	97 81       	ldd	r25, Z+7	; 0x07
    236a:	18 16       	cp	r1, r24
    236c:	19 06       	cpc	r1, r25
    236e:	0c f0       	brlt	.+2      	; 0x2372 <DemoStorage_Device_Execute+0x4a>
    2370:	8b c0       	rjmp	.+278    	; 0x2488 <DemoStorage_Device_Execute+0x160>
    2372:	81 2c       	mov	r8, r1
    2374:	91 2c       	mov	r9, r1
    2376:	a1 2c       	mov	r10, r1
    2378:	b1 2c       	mov	r11, r1
	{
		DataUnit temp = this->StoragesData[i];
    237a:	0f 2e       	mov	r0, r31
    237c:	f8 e3       	ldi	r31, 0x38	; 56
    237e:	3f 2e       	mov	r3, r31
    2380:	f0 2d       	mov	r31, r0
		printf("%04ld %02ld %02ld %02ld %02ld %02ld\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
    2382:	0f 2e       	mov	r0, r31
    2384:	f5 e2       	ldi	r31, 0x25	; 37
    2386:	4f 2e       	mov	r4, r31
    2388:	f5 e0       	ldi	r31, 0x05	; 5
    238a:	5f 2e       	mov	r5, r31
    238c:	f0 2d       	mov	r31, r0
    238e:	6e 01       	movw	r12, r28
    2390:	f1 e1       	ldi	r31, 0x11	; 17
    2392:	cf 0e       	add	r12, r31
    2394:	d1 1c       	adc	r13, r1
		for( int j = 0; j < MAX_NUM_DATA; ++j )
			printf("%3.3f ",temp.data[j]);
    2396:	0f 2e       	mov	r0, r31
    2398:	fa e4       	ldi	r31, 0x4A	; 74
    239a:	ef 2e       	mov	r14, r31
    239c:	f5 e0       	ldi	r31, 0x05	; 5
    239e:	ff 2e       	mov	r15, r31
    23a0:	f0 2d       	mov	r31, r0
int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
	{
		DataUnit temp = this->StoragesData[i];
    23a2:	f3 01       	movw	r30, r6
    23a4:	80 85       	ldd	r24, Z+8	; 0x08
    23a6:	91 85       	ldd	r25, Z+9	; 0x09
    23a8:	88 0d       	add	r24, r8
    23aa:	99 1d       	adc	r25, r9
    23ac:	fc 01       	movw	r30, r24
    23ae:	de 01       	movw	r26, r28
    23b0:	11 96       	adiw	r26, 0x01	; 1
    23b2:	23 2d       	mov	r18, r3
    23b4:	01 90       	ld	r0, Z+
    23b6:	0d 92       	st	X+, r0
    23b8:	2a 95       	dec	r18
    23ba:	e1 f7       	brne	.-8      	; 0x23b4 <DemoStorage_Device_Execute+0x8c>
		printf("%04ld %02ld %02ld %02ld %02ld %02ld\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
    23bc:	fc 01       	movw	r30, r24
    23be:	23 8d       	ldd	r18, Z+27	; 0x1b
    23c0:	2f 93       	push	r18
    23c2:	22 8d       	ldd	r18, Z+26	; 0x1a
    23c4:	2f 93       	push	r18
    23c6:	21 8d       	ldd	r18, Z+25	; 0x19
    23c8:	2f 93       	push	r18
    23ca:	20 8d       	ldd	r18, Z+24	; 0x18
    23cc:	2f 93       	push	r18
    23ce:	27 8d       	ldd	r18, Z+31	; 0x1f
    23d0:	2f 93       	push	r18
    23d2:	26 8d       	ldd	r18, Z+30	; 0x1e
    23d4:	2f 93       	push	r18
    23d6:	25 8d       	ldd	r18, Z+29	; 0x1d
    23d8:	2f 93       	push	r18
    23da:	24 8d       	ldd	r18, Z+28	; 0x1c
    23dc:	2f 93       	push	r18
    23de:	23 a1       	ldd	r18, Z+35	; 0x23
    23e0:	2f 93       	push	r18
    23e2:	22 a1       	ldd	r18, Z+34	; 0x22
    23e4:	2f 93       	push	r18
    23e6:	21 a1       	ldd	r18, Z+33	; 0x21
    23e8:	2f 93       	push	r18
    23ea:	20 a1       	ldd	r18, Z+32	; 0x20
    23ec:	2f 93       	push	r18
    23ee:	27 a1       	ldd	r18, Z+39	; 0x27
    23f0:	2f 93       	push	r18
    23f2:	26 a1       	ldd	r18, Z+38	; 0x26
    23f4:	2f 93       	push	r18
    23f6:	25 a1       	ldd	r18, Z+37	; 0x25
    23f8:	2f 93       	push	r18
    23fa:	24 a1       	ldd	r18, Z+36	; 0x24
    23fc:	2f 93       	push	r18
    23fe:	23 a5       	ldd	r18, Z+43	; 0x2b
    2400:	2f 93       	push	r18
    2402:	22 a5       	ldd	r18, Z+42	; 0x2a
    2404:	2f 93       	push	r18
    2406:	21 a5       	ldd	r18, Z+41	; 0x29
    2408:	2f 93       	push	r18
    240a:	20 a5       	ldd	r18, Z+40	; 0x28
    240c:	2f 93       	push	r18
    240e:	27 a5       	ldd	r18, Z+47	; 0x2f
    2410:	2f 93       	push	r18
    2412:	26 a5       	ldd	r18, Z+46	; 0x2e
    2414:	2f 93       	push	r18
    2416:	25 a5       	ldd	r18, Z+45	; 0x2d
    2418:	2f 93       	push	r18
    241a:	84 a5       	ldd	r24, Z+44	; 0x2c
    241c:	8f 93       	push	r24
    241e:	5f 92       	push	r5
    2420:	4f 92       	push	r4
    2422:	0e 94 aa 1c 	call	0x3954	; 0x3954 <printf>
    2426:	8e 01       	movw	r16, r28
    2428:	0f 5f       	subi	r16, 0xFF	; 255
    242a:	1f 4f       	sbci	r17, 0xFF	; 255
    242c:	0f b6       	in	r0, 0x3f	; 63
    242e:	f8 94       	cli
    2430:	de bf       	out	0x3e, r29	; 62
    2432:	0f be       	out	0x3f, r0	; 63
    2434:	cd bf       	out	0x3d, r28	; 61
		for( int j = 0; j < MAX_NUM_DATA; ++j )
			printf("%3.3f ",temp.data[j]);
    2436:	f8 01       	movw	r30, r16
    2438:	80 81       	ld	r24, Z
    243a:	91 81       	ldd	r25, Z+1	; 0x01
    243c:	22 81       	ldd	r18, Z+2	; 0x02
    243e:	33 81       	ldd	r19, Z+3	; 0x03
    2440:	0c 5f       	subi	r16, 0xFC	; 252
    2442:	1f 4f       	sbci	r17, 0xFF	; 255
    2444:	3f 93       	push	r19
    2446:	2f 93       	push	r18
    2448:	9f 93       	push	r25
    244a:	8f 93       	push	r24
    244c:	ff 92       	push	r15
    244e:	ef 92       	push	r14
    2450:	0e 94 aa 1c 	call	0x3954	; 0x3954 <printf>
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
	{
		DataUnit temp = this->StoragesData[i];
		printf("%04ld %02ld %02ld %02ld %02ld %02ld\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
		for( int j = 0; j < MAX_NUM_DATA; ++j )
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	0f 90       	pop	r0
    245a:	0f 90       	pop	r0
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	0c 15       	cp	r16, r12
    2462:	1d 05       	cpc	r17, r13
    2464:	41 f7       	brne	.-48     	; 0x2436 <DemoStorage_Device_Execute+0x10e>
			printf("%3.3f ",temp.data[j]);
		printf("\n");
    2466:	8a e0       	ldi	r24, 0x0A	; 10
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	0e 94 bd 1c 	call	0x397a	; 0x397a <putchar>
}

int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
    246e:	ff ef       	ldi	r31, 0xFF	; 255
    2470:	af 1a       	sub	r10, r31
    2472:	bf 0a       	sbc	r11, r31
    2474:	88 e3       	ldi	r24, 0x38	; 56
    2476:	88 0e       	add	r8, r24
    2478:	91 1c       	adc	r9, r1
    247a:	f3 01       	movw	r30, r6
    247c:	86 81       	ldd	r24, Z+6	; 0x06
    247e:	97 81       	ldd	r25, Z+7	; 0x07
    2480:	a8 16       	cp	r10, r24
    2482:	b9 06       	cpc	r11, r25
    2484:	0c f4       	brge	.+2      	; 0x2488 <DemoStorage_Device_Execute+0x160>
    2486:	8d cf       	rjmp	.-230    	; 0x23a2 <DemoStorage_Device_Execute+0x7a>
		printf("%04ld %02ld %02ld %02ld %02ld %02ld\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
		for( int j = 0; j < MAX_NUM_DATA; ++j )
			printf("%3.3f ",temp.data[j]);
		printf("\n");
	}
	this->cur_pos = 0;
    2488:	f3 01       	movw	r30, r6
    248a:	17 82       	std	Z+7, r1	; 0x07
    248c:	16 82       	std	Z+6, r1	; 0x06
	return 0;
}
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	e8 96       	adiw	r28, 0x38	; 56
    2494:	0f b6       	in	r0, 0x3f	; 63
    2496:	f8 94       	cli
    2498:	de bf       	out	0x3e, r29	; 62
    249a:	0f be       	out	0x3f, r0	; 63
    249c:	cd bf       	out	0x3d, r28	; 61
    249e:	df 91       	pop	r29
    24a0:	cf 91       	pop	r28
    24a2:	1f 91       	pop	r17
    24a4:	0f 91       	pop	r16
    24a6:	ff 90       	pop	r15
    24a8:	ef 90       	pop	r14
    24aa:	df 90       	pop	r13
    24ac:	cf 90       	pop	r12
    24ae:	bf 90       	pop	r11
    24b0:	af 90       	pop	r10
    24b2:	9f 90       	pop	r9
    24b4:	8f 90       	pop	r8
    24b6:	7f 90       	pop	r7
    24b8:	6f 90       	pop	r6
    24ba:	5f 90       	pop	r5
    24bc:	4f 90       	pop	r4
    24be:	3f 90       	pop	r3
    24c0:	08 95       	ret

000024c2 <New_DemoStorage_Device>:
{
	return TYPE_STORAGE_DEVICE;
}

DemoStorageDevice* New_DemoStorage_Device( int infonum )
{
    24c2:	cf 92       	push	r12
    24c4:	df 92       	push	r13
    24c6:	ef 92       	push	r14
    24c8:	ff 92       	push	r15
    24ca:	cf 93       	push	r28
    24cc:	df 93       	push	r29
    24ce:	7c 01       	movw	r14, r24
	DemoStorageDevice *p = malloc(sizeof(DemoStorageDevice));
    24d0:	8a e0       	ldi	r24, 0x0A	; 10
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	ec d7       	rcall	.+4056   	; 0x34ae <malloc>
    24d6:	ec 01       	movw	r28, r24
	p->info = infonum;
    24d8:	fd 82       	std	Y+5, r15	; 0x05
    24da:	ec 82       	std	Y+4, r14	; 0x04
};


void DemoStorage_Device_VTinit( DemoStorageDevice *this )
{
	this->abstract.device_vt = &DemoStorageDevice_abstract_vmt;
    24dc:	8e e6       	ldi	r24, 0x6E	; 110
    24de:	92 e0       	ldi	r25, 0x02	; 2
    24e0:	99 83       	std	Y+1, r25	; 0x01
    24e2:	88 83       	st	Y, r24



void DemoStorage_Device_Tinit(DemoStorageDevice *this)
{
	this->vmt = &DemoStorageDevice_vmt;
    24e4:	86 e6       	ldi	r24, 0x66	; 102
    24e6:	92 e0       	ldi	r25, 0x02	; 2
    24e8:	9b 83       	std	Y+3, r25	; 0x03
    24ea:	8a 83       	std	Y+2, r24	; 0x02
{
	DemoStorageDevice *p = malloc(sizeof(DemoStorageDevice));
	p->info = infonum;
	DemoStorage_Device_VTinit(p);
	DemoStorage_Device_Tinit(p);
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
    24ec:	88 e4       	ldi	r24, 0x48	; 72
    24ee:	93 e0       	ldi	r25, 0x03	; 3
    24f0:	de d7       	rcall	.+4028   	; 0x34ae <malloc>
    24f2:	99 87       	std	Y+9, r25	; 0x09
    24f4:	88 87       	std	Y+8, r24	; 0x08
    24f6:	40 e0       	ldi	r20, 0x00	; 0
    24f8:	50 e0       	ldi	r21, 0x00	; 0
{
	return TYPE_STORAGE_DEVICE;
}

DemoStorageDevice* New_DemoStorage_Device( int infonum )
{
    24fa:	70 e0       	ldi	r23, 0x00	; 0
    24fc:	60 e0       	ldi	r22, 0x00	; 0
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
		for( int j=0;j<MAX_NUM_DATA;j++)
		{
				p->StoragesData[i].data[j] = -9999; 
    24fe:	0f 2e       	mov	r0, r31
    2500:	c1 2c       	mov	r12, r1
    2502:	fc e3       	ldi	r31, 0x3C	; 60
    2504:	df 2e       	mov	r13, r31
    2506:	fc e1       	ldi	r31, 0x1C	; 28
    2508:	ef 2e       	mov	r14, r31
    250a:	f6 ec       	ldi	r31, 0xC6	; 198
    250c:	ff 2e       	mov	r15, r31
    250e:	f0 2d       	mov	r31, r0
    2510:	2a c0       	rjmp	.+84     	; 0x2566 <New_DemoStorage_Device+0xa4>
    2512:	e8 85       	ldd	r30, Y+8	; 0x08
    2514:	f9 85       	ldd	r31, Y+9	; 0x09
    2516:	e4 0f       	add	r30, r20
    2518:	f5 1f       	adc	r31, r21
    251a:	c9 01       	movw	r24, r18
    251c:	88 0f       	add	r24, r24
    251e:	99 1f       	adc	r25, r25
    2520:	88 0f       	add	r24, r24
    2522:	99 1f       	adc	r25, r25
    2524:	e8 0f       	add	r30, r24
    2526:	f9 1f       	adc	r31, r25
    2528:	c0 82       	st	Z, r12
    252a:	d1 82       	std	Z+1, r13	; 0x01
    252c:	e2 82       	std	Z+2, r14	; 0x02
    252e:	f3 82       	std	Z+3, r15	; 0x03
				p->StoragesData[i].data_tm.unix_msec = 0;
    2530:	e8 85       	ldd	r30, Y+8	; 0x08
    2532:	f9 85       	ldd	r31, Y+9	; 0x09
    2534:	e4 0f       	add	r30, r20
    2536:	f5 1f       	adc	r31, r21
    2538:	14 8a       	std	Z+20, r1	; 0x14
    253a:	15 8a       	std	Z+21, r1	; 0x15
    253c:	16 8a       	std	Z+22, r1	; 0x16
    253e:	17 8a       	std	Z+23, r1	; 0x17
				p->StoragesData[i].data_tm.unix_time = 0;
    2540:	e8 85       	ldd	r30, Y+8	; 0x08
    2542:	f9 85       	ldd	r31, Y+9	; 0x09
    2544:	e4 0f       	add	r30, r20
    2546:	f5 1f       	adc	r31, r21
    2548:	10 8a       	std	Z+16, r1	; 0x10
    254a:	11 8a       	std	Z+17, r1	; 0x11
    254c:	12 8a       	std	Z+18, r1	; 0x12
    254e:	13 8a       	std	Z+19, r1	; 0x13
	DemoStorage_Device_VTinit(p);
	DemoStorage_Device_Tinit(p);
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
		for( int j=0;j<MAX_NUM_DATA;j++)
    2550:	2f 5f       	subi	r18, 0xFF	; 255
    2552:	3f 4f       	sbci	r19, 0xFF	; 255
    2554:	24 30       	cpi	r18, 0x04	; 4
    2556:	31 05       	cpc	r19, r1
    2558:	e1 f6       	brne	.-72     	; 0x2512 <New_DemoStorage_Device+0x50>
    255a:	48 5c       	subi	r20, 0xC8	; 200
    255c:	5f 4f       	sbci	r21, 0xFF	; 255
	p->info = infonum;
	DemoStorage_Device_VTinit(p);
	DemoStorage_Device_Tinit(p);
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
    255e:	48 34       	cpi	r20, 0x48	; 72
    2560:	83 e0       	ldi	r24, 0x03	; 3
    2562:	58 07       	cpc	r21, r24
    2564:	19 f0       	breq	.+6      	; 0x256c <New_DemoStorage_Device+0xaa>
{
	return TYPE_STORAGE_DEVICE;
}

DemoStorageDevice* New_DemoStorage_Device( int infonum )
{
    2566:	27 2f       	mov	r18, r23
    2568:	36 2f       	mov	r19, r22
    256a:	d3 cf       	rjmp	.-90     	; 0x2512 <New_DemoStorage_Device+0x50>
		{
				p->StoragesData[i].data[j] = -9999; 
				p->StoragesData[i].data_tm.unix_msec = 0;
				p->StoragesData[i].data_tm.unix_time = 0;
		}
	p->cur_pos = 0;
    256c:	1f 82       	std	Y+7, r1	; 0x07
    256e:	1e 82       	std	Y+6, r1	; 0x06

	return p;
}
    2570:	ce 01       	movw	r24, r28
    2572:	df 91       	pop	r29
    2574:	cf 91       	pop	r28
    2576:	ff 90       	pop	r15
    2578:	ef 90       	pop	r14
    257a:	df 90       	pop	r13
    257c:	cf 90       	pop	r12
    257e:	08 95       	ret

00002580 <LoadData_Device_VTinit>:
};


void LoadData_Device_VTinit( LoadDataDevice *this )
{
	this->abstract.device_vt = &LoadDataDevice_abstract_vmt;
    2580:	2c e7       	ldi	r18, 0x7C	; 124
    2582:	32 e0       	ldi	r19, 0x02	; 2
    2584:	fc 01       	movw	r30, r24
    2586:	31 83       	std	Z+1, r19	; 0x01
    2588:	20 83       	st	Z, r18
    258a:	08 95       	ret

0000258c <LoadData_Device_init>:
}

int LoadData_Device_init( LoadDataDevice *this )
{
	return 0;
}
    258c:	80 e0       	ldi	r24, 0x00	; 0
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	08 95       	ret

00002592 <LoadData_Device_reset>:

int LoadData_Device_reset( LoadDataDevice *this )
{
	return 0;
}
    2592:	80 e0       	ldi	r24, 0x00	; 0
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	08 95       	ret

00002598 <LoadData_Device_getType>:

int LoadData_Device_getType( LoadDataDevice *this )
{
	return TYPE_DEVICE;
}
    2598:	85 e0       	ldi	r24, 0x05	; 5
    259a:	90 e0       	ldi	r25, 0x00	; 0
    259c:	08 95       	ret

0000259e <LoadData_Device_Tinit>:



void LoadData_Device_Tinit(LoadDataDevice *this)
{
	this->vmt = &LoadDataDevice_vmt;
    259e:	26 e7       	ldi	r18, 0x76	; 118
    25a0:	32 e0       	ldi	r19, 0x02	; 2
    25a2:	fc 01       	movw	r30, r24
    25a4:	33 83       	std	Z+3, r19	; 0x03
    25a6:	22 83       	std	Z+2, r18	; 0x02
    25a8:	08 95       	ret

000025aa <LoadData_Device_Configure>:
}

int LoadData_Device_Configure(LoadDataDevice *this)
{
	return 0;
}
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	08 95       	ret

000025b0 <LoadData_Device_Execute>:
{
	this->vmt = &LoadDataDevice_vmt;
}

int LoadData_Device_Execute(LoadDataDevice *this)
{
    25b0:	cf 93       	push	r28
    25b2:	df 93       	push	r29
    25b4:	ec 01       	movw	r28, r24
	if( this -> store_device == NULL)
    25b6:	8e 81       	ldd	r24, Y+6	; 0x06
    25b8:	9f 81       	ldd	r25, Y+7	; 0x07
    25ba:	89 2b       	or	r24, r25
    25bc:	21 f4       	brne	.+8      	; 0x25c6 <LoadData_Device_Execute+0x16>
		printf("NULL store device\n");
    25be:	81 e5       	ldi	r24, 0x51	; 81
    25c0:	95 e0       	ldi	r25, 0x05	; 5
    25c2:	0e 94 c2 1c 	call	0x3984	; 0x3984 <puts>
	cur_data = this->store_device->vmt->get_CurDataUnit(this->store_device);
    25c6:	8e 81       	ldd	r24, Y+6	; 0x06
    25c8:	9f 81       	ldd	r25, Y+7	; 0x07
    25ca:	dc 01       	movw	r26, r24
    25cc:	12 96       	adiw	r26, 0x02	; 2
    25ce:	ed 91       	ld	r30, X+
    25d0:	fc 91       	ld	r31, X
    25d2:	13 97       	sbiw	r26, 0x03	; 3
    25d4:	06 80       	ldd	r0, Z+6	; 0x06
    25d6:	f7 81       	ldd	r31, Z+7	; 0x07
    25d8:	e0 2d       	mov	r30, r0
    25da:	19 95       	eicall
    25dc:	90 93 07 06 	sts	0x0607, r25
    25e0:	80 93 06 06 	sts	0x0606, r24
	/*TODO : could init -999 here */
	
	
	if( cur_data != NULL)
    25e4:	89 2b       	or	r24, r25
    25e6:	09 f4       	brne	.+2      	; 0x25ea <LoadData_Device_Execute+0x3a>
    25e8:	43 c0       	rjmp	.+134    	; 0x2670 <LoadData_Device_Execute+0xc0>
	{
		updateTime((uint32_t)TimeStamp,&cur_time);
    25ea:	80 91 08 06 	lds	r24, 0x0608
    25ee:	90 91 09 06 	lds	r25, 0x0609
    25f2:	a0 91 0a 06 	lds	r26, 0x060A
    25f6:	b0 91 0b 06 	lds	r27, 0x060B
    25fa:	bc 01       	movw	r22, r24
    25fc:	cd 01       	movw	r24, r26
    25fe:	88 27       	eor	r24, r24
    2600:	99 27       	eor	r25, r25
    2602:	4f e3       	ldi	r20, 0x3F	; 63
    2604:	59 e0       	ldi	r21, 0x09	; 9
    2606:	99 d9       	rcall	.-3278   	; 0x193a <updateTime>
		cur_data->data_tm.unix_time = cur_time.unix_time;
    2608:	80 91 06 06 	lds	r24, 0x0606
    260c:	90 91 07 06 	lds	r25, 0x0607
    2610:	40 91 3f 09 	lds	r20, 0x093F
    2614:	50 91 40 09 	lds	r21, 0x0940
    2618:	60 91 41 09 	lds	r22, 0x0941
    261c:	70 91 42 09 	lds	r23, 0x0942
    2620:	fc 01       	movw	r30, r24
    2622:	40 8b       	std	Z+16, r20	; 0x10
    2624:	51 8b       	std	Z+17, r21	; 0x11
    2626:	62 8b       	std	Z+18, r22	; 0x12
    2628:	73 8b       	std	Z+19, r23	; 0x13
		calcDate( &(cur_data->data_tm));
    262a:	40 96       	adiw	r24, 0x10	; 16
    262c:	0e 94 04 0b 	call	0x1608	; 0x1608 <calcDate>
		printf("time debug3 %ld\n",cur_data->data_tm.unix_time);
    2630:	e0 91 06 06 	lds	r30, 0x0606
    2634:	f0 91 07 06 	lds	r31, 0x0607
    2638:	83 89       	ldd	r24, Z+19	; 0x13
    263a:	8f 93       	push	r24
    263c:	82 89       	ldd	r24, Z+18	; 0x12
    263e:	8f 93       	push	r24
    2640:	81 89       	ldd	r24, Z+17	; 0x11
    2642:	8f 93       	push	r24
    2644:	80 89       	ldd	r24, Z+16	; 0x10
    2646:	8f 93       	push	r24
    2648:	83 e6       	ldi	r24, 0x63	; 99
    264a:	95 e0       	ldi	r25, 0x05	; 5
    264c:	9f 93       	push	r25
    264e:	8f 93       	push	r24
    2650:	0e 94 aa 1c 	call	0x3954	; 0x3954 <printf>
		TimeStamp = 0;
    2654:	10 92 08 06 	sts	0x0608, r1
    2658:	10 92 09 06 	sts	0x0609, r1
    265c:	10 92 0a 06 	sts	0x060A, r1
    2660:	10 92 0b 06 	sts	0x060B, r1
    2664:	0f 90       	pop	r0
    2666:	0f 90       	pop	r0
    2668:	0f 90       	pop	r0
    266a:	0f 90       	pop	r0
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
	}
	return 0;
}
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	df 91       	pop	r29
    2676:	cf 91       	pop	r28
    2678:	08 95       	ret

0000267a <New_LoadData_Device>:
{
	return TYPE_DEVICE;
}

LoadDataDevice* New_LoadData_Device( int infonum, DemoStorageDevice * ptr )
{
    267a:	0f 93       	push	r16
    267c:	1f 93       	push	r17
    267e:	cf 93       	push	r28
    2680:	df 93       	push	r29
    2682:	8c 01       	movw	r16, r24
    2684:	eb 01       	movw	r28, r22
	LoadDataDevice *p = malloc(sizeof(LoadDataDevice));
    2686:	88 e0       	ldi	r24, 0x08	; 8
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	11 d7       	rcall	.+3618   	; 0x34ae <malloc>
    268c:	fc 01       	movw	r30, r24
	p->info = infonum;
    268e:	15 83       	std	Z+5, r17	; 0x05
    2690:	04 83       	std	Z+4, r16	; 0x04
	p->store_device = ptr;
    2692:	d7 83       	std	Z+7, r29	; 0x07
    2694:	c6 83       	std	Z+6, r28	; 0x06
};


void LoadData_Device_VTinit( LoadDataDevice *this )
{
	this->abstract.device_vt = &LoadDataDevice_abstract_vmt;
    2696:	8c e7       	ldi	r24, 0x7C	; 124
    2698:	92 e0       	ldi	r25, 0x02	; 2
    269a:	91 83       	std	Z+1, r25	; 0x01
    269c:	80 83       	st	Z, r24



void LoadData_Device_Tinit(LoadDataDevice *this)
{
	this->vmt = &LoadDataDevice_vmt;
    269e:	86 e7       	ldi	r24, 0x76	; 118
    26a0:	92 e0       	ldi	r25, 0x02	; 2
    26a2:	93 83       	std	Z+3, r25	; 0x03
    26a4:	82 83       	std	Z+2, r24	; 0x02
	p->info = infonum;
	p->store_device = ptr;
	LoadData_Device_VTinit(p);
	LoadData_Device_Tinit(p);
	return p;
}
    26a6:	cf 01       	movw	r24, r30
    26a8:	df 91       	pop	r29
    26aa:	cf 91       	pop	r28
    26ac:	1f 91       	pop	r17
    26ae:	0f 91       	pop	r16
    26b0:	08 95       	ret

000026b2 <BMP280_Configure>:
{
	// virtual function
	return 0;
	printf("config success");
	//delay_us(100);
}
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	08 95       	ret

000026b8 <BMP280_VTinit>:
	printf("BMP280_Error\n");
	return 0;
}
void BMP280_VTinit( BMP280Sensor* this)
{
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
    26b8:	24 e8       	ldi	r18, 0x84	; 132
    26ba:	32 e0       	ldi	r19, 0x02	; 2
    26bc:	fc 01       	movw	r30, r24
    26be:	31 83       	std	Z+1, r19	; 0x01
    26c0:	20 83       	st	Z, r18
    26c2:	08 95       	ret

000026c4 <BMP280_reset>:

int BMP280_reset( BMP280Sensor* this)
{
    // virtual function
    return 0;
}
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	08 95       	ret

000026ca <BMP280_getType>:

int BMP280_getType(BMP280Sensor* this)
{
    return TYPE_SENSOR;
}
    26ca:	83 e0       	ldi	r24, 0x03	; 3
    26cc:	90 e0       	ldi	r25, 0x00	; 0
    26ce:	08 95       	ret

000026d0 <BMP280_FctnInit>:



void BMP280_FctnInit(BMP280Sensor *this)
{
	this->inherited.vmt = &BMP280_vmt;
    26d0:	2c e8       	ldi	r18, 0x8C	; 140
    26d2:	32 e0       	ldi	r19, 0x02	; 2
    26d4:	fc 01       	movw	r30, r24
    26d6:	35 87       	std	Z+13, r19	; 0x0d
    26d8:	24 87       	std	Z+12, r18	; 0x0c
	printf("init success");
    26da:	88 ea       	ldi	r24, 0xA8	; 168
    26dc:	92 e0       	ldi	r25, 0x02	; 2
    26de:	9f 93       	push	r25
    26e0:	8f 93       	push	r24
    26e2:	0e 94 aa 1c 	call	0x3954	; 0x3954 <printf>
    26e6:	0f 90       	pop	r0
    26e8:	0f 90       	pop	r0
    26ea:	08 95       	ret

000026ec <BMP280_Error>:
	delay_us(100);
}

int BMP280_Error(BMP280Sensor *this )
{
	printf("BMP280_Error\n");
    26ec:	84 e7       	ldi	r24, 0x74	; 116
    26ee:	95 e0       	ldi	r25, 0x05	; 5
    26f0:	0e 94 c2 1c 	call	0x3984	; 0x3984 <puts>
	return 0;
}
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	08 95       	ret

000026fa <BMP280_init>:
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
}

int BMP280_init( BMP280Sensor* this)
{
    printf("BMP280 Sensor Init\n");
    26fa:	81 e8       	ldi	r24, 0x81	; 129
    26fc:	95 e0       	ldi	r25, 0x05	; 5
    26fe:	0e 94 c2 1c 	call	0x3984	; 0x3984 <puts>
    return 0;
}
    2702:	80 e0       	ldi	r24, 0x00	; 0
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	08 95       	ret

00002708 <BMP280_Request>:
	printf("config success");
	//delay_us(100);
}

int BMP280_Request(BMP280Sensor *this )
{
    2708:	cf 93       	push	r28
    270a:	df 93       	push	r29
	printf("BMP280 Request\n");
    270c:	84 e9       	ldi	r24, 0x94	; 148
    270e:	95 e0       	ldi	r25, 0x05	; 5
    2710:	0e 94 c2 1c 	call	0x3984	; 0x3984 <puts>
	int Delay = BMP280_StartMeasurment();
    2714:	8f da       	rcall	.-2786   	; 0x1c34 <BMP280_StartMeasurment>
    2716:	c8 2f       	mov	r28, r24
    2718:	d0 e0       	ldi	r29, 0x00	; 0
	printf("\tWait for %d ms\n",Delay);
    271a:	1f 92       	push	r1
    271c:	8f 93       	push	r24
    271e:	83 ea       	ldi	r24, 0xA3	; 163
    2720:	95 e0       	ldi	r25, 0x05	; 5
    2722:	9f 93       	push	r25
    2724:	8f 93       	push	r24
    2726:	0e 94 aa 1c 	call	0x3954	; 0x3954 <printf>
	if( Delay == 0 )
    272a:	0f 90       	pop	r0
    272c:	0f 90       	pop	r0
    272e:	0f 90       	pop	r0
    2730:	0f 90       	pop	r0
    2732:	20 97       	sbiw	r28, 0x00	; 0
    2734:	19 f0       	breq	.+6      	; 0x273c <BMP280_Request+0x34>
		return 0;
	else
		return ( 1 + Delay );
    2736:	ce 01       	movw	r24, r28
    2738:	01 96       	adiw	r24, 0x01	; 1
    273a:	02 c0       	rjmp	.+4      	; 0x2740 <BMP280_Request+0x38>
{
	printf("BMP280 Request\n");
	int Delay = BMP280_StartMeasurment();
	printf("\tWait for %d ms\n",Delay);
	if( Delay == 0 )
		return 0;
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	90 e0       	ldi	r25, 0x00	; 0
	else
		return ( 1 + Delay );
}
    2740:	df 91       	pop	r29
    2742:	cf 91       	pop	r28
    2744:	08 95       	ret

00002746 <BMP280_Collect>:

int BMP280_Collect(BMP280Sensor *this )
{
    2746:	ef 92       	push	r14
    2748:	ff 92       	push	r15
    274a:	0f 93       	push	r16
    274c:	1f 93       	push	r17
    274e:	cf 93       	push	r28
    2750:	df 93       	push	r29
    2752:	cd b7       	in	r28, 0x3d	; 61
    2754:	de b7       	in	r29, 0x3e	; 62
    2756:	28 97       	sbiw	r28, 0x08	; 8
    2758:	0f b6       	in	r0, 0x3f	; 63
    275a:	f8 94       	cli
    275c:	de bf       	out	0x3e, r29	; 62
    275e:	0f be       	out	0x3f, r0	; 63
    2760:	cd bf       	out	0x3d, r28	; 61
    2762:	8c 01       	movw	r16, r24
	printf("BMP280 Collect\n");
    2764:	84 eb       	ldi	r24, 0xB4	; 180
    2766:	95 e0       	ldi	r25, 0x05	; 5
    2768:	0e 94 c2 1c 	call	0x3984	; 0x3984 <puts>
	double T, P;
	BMP280_GetTemperatureAndPressure(&T,&P);
    276c:	be 01       	movw	r22, r28
    276e:	6b 5f       	subi	r22, 0xFB	; 251
    2770:	7f 4f       	sbci	r23, 0xFF	; 255
    2772:	ce 01       	movw	r24, r28
    2774:	01 96       	adiw	r24, 0x01	; 1
    2776:	56 dd       	rcall	.-1364   	; 0x2224 <BMP280_GetTemperatureAndPressure>
	printf("\tTemperature = %.3f\n\tPressure = %.3f\n",T,P);
    2778:	88 85       	ldd	r24, Y+8	; 0x08
    277a:	8f 93       	push	r24
    277c:	8f 81       	ldd	r24, Y+7	; 0x07
    277e:	8f 93       	push	r24
    2780:	8e 81       	ldd	r24, Y+6	; 0x06
    2782:	8f 93       	push	r24
    2784:	8d 81       	ldd	r24, Y+5	; 0x05
    2786:	8f 93       	push	r24
    2788:	8c 81       	ldd	r24, Y+4	; 0x04
    278a:	8f 93       	push	r24
    278c:	8b 81       	ldd	r24, Y+3	; 0x03
    278e:	8f 93       	push	r24
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
    2792:	8f 93       	push	r24
    2794:	89 81       	ldd	r24, Y+1	; 0x01
    2796:	8f 93       	push	r24
    2798:	83 ec       	ldi	r24, 0xC3	; 195
    279a:	95 e0       	ldi	r25, 0x05	; 5
    279c:	9f 93       	push	r25
    279e:	8f 93       	push	r24
    27a0:	0e 94 aa 1c 	call	0x3954	; 0x3954 <printf>
	printf("\tgetStart = %d\n\tgetEnd = %d\n",this->inherited.getStartNum( &this->inherited ),this->inherited.getEndNum( &this->inherited ));
    27a4:	d8 01       	movw	r26, r16
    27a6:	1a 96       	adiw	r26, 0x0a	; 10
    27a8:	ed 91       	ld	r30, X+
    27aa:	fc 91       	ld	r31, X
    27ac:	1b 97       	sbiw	r26, 0x0b	; 11
    27ae:	c8 01       	movw	r24, r16
    27b0:	19 95       	eicall
    27b2:	f8 2e       	mov	r15, r24
    27b4:	e9 2e       	mov	r14, r25
    27b6:	d8 01       	movw	r26, r16
    27b8:	18 96       	adiw	r26, 0x08	; 8
    27ba:	ed 91       	ld	r30, X+
    27bc:	fc 91       	ld	r31, X
    27be:	19 97       	sbiw	r26, 0x09	; 9
    27c0:	c8 01       	movw	r24, r16
    27c2:	19 95       	eicall
    27c4:	ef 92       	push	r14
    27c6:	ff 92       	push	r15
    27c8:	9f 93       	push	r25
    27ca:	8f 93       	push	r24
    27cc:	89 ee       	ldi	r24, 0xE9	; 233
    27ce:	95 e0       	ldi	r25, 0x05	; 5
    27d0:	9f 93       	push	r25
    27d2:	8f 93       	push	r24
    27d4:	0e 94 aa 1c 	call	0x3954	; 0x3954 <printf>
	/*
	for( int i = 0 ; i = this->inherited.getStartNum(); i < this->inherited.getEndNum() )
	{
	}
	*/
	cur_data->data[0] = T;
    27d8:	e0 91 06 06 	lds	r30, 0x0606
    27dc:	f0 91 07 06 	lds	r31, 0x0607
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	9a 81       	ldd	r25, Y+2	; 0x02
    27e4:	ab 81       	ldd	r26, Y+3	; 0x03
    27e6:	bc 81       	ldd	r27, Y+4	; 0x04
    27e8:	80 83       	st	Z, r24
    27ea:	91 83       	std	Z+1, r25	; 0x01
    27ec:	a2 83       	std	Z+2, r26	; 0x02
    27ee:	b3 83       	std	Z+3, r27	; 0x03
	cur_data->data[1] = P; 
    27f0:	e0 91 06 06 	lds	r30, 0x0606
    27f4:	f0 91 07 06 	lds	r31, 0x0607
    27f8:	8d 81       	ldd	r24, Y+5	; 0x05
    27fa:	9e 81       	ldd	r25, Y+6	; 0x06
    27fc:	af 81       	ldd	r26, Y+7	; 0x07
    27fe:	b8 85       	ldd	r27, Y+8	; 0x08
    2800:	84 83       	std	Z+4, r24	; 0x04
    2802:	95 83       	std	Z+5, r25	; 0x05
    2804:	a6 83       	std	Z+6, r26	; 0x06
    2806:	b7 83       	std	Z+7, r27	; 0x07
	return 0;
    2808:	0f b6       	in	r0, 0x3f	; 63
    280a:	f8 94       	cli
    280c:	de bf       	out	0x3e, r29	; 62
    280e:	0f be       	out	0x3f, r0	; 63
    2810:	cd bf       	out	0x3d, r28	; 61
	//printf("collect success");
	delay_us(100);
}
    2812:	80 e0       	ldi	r24, 0x00	; 0
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	28 96       	adiw	r28, 0x08	; 8
    2818:	0f b6       	in	r0, 0x3f	; 63
    281a:	f8 94       	cli
    281c:	de bf       	out	0x3e, r29	; 62
    281e:	0f be       	out	0x3f, r0	; 63
    2820:	cd bf       	out	0x3d, r28	; 61
    2822:	df 91       	pop	r29
    2824:	cf 91       	pop	r28
    2826:	1f 91       	pop	r17
    2828:	0f 91       	pop	r16
    282a:	ff 90       	pop	r15
    282c:	ef 90       	pop	r14
    282e:	08 95       	ret

00002830 <New_BMP280_Sensor>:
    return TYPE_SENSOR;
}


BMP280Sensor* New_BMP280_Sensor( int num, int NumData )
{
    2830:	ef 92       	push	r14
    2832:	ff 92       	push	r15
    2834:	0f 93       	push	r16
    2836:	1f 93       	push	r17
    2838:	cf 93       	push	r28
    283a:	df 93       	push	r29
    283c:	7c 01       	movw	r14, r24
    283e:	8b 01       	movw	r16, r22
	BMP280Sensor *p = malloc(sizeof(BMP280Sensor));
    2840:	8e e0       	ldi	r24, 0x0E	; 14
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	34 d6       	rcall	.+3176   	; 0x34ae <malloc>
    2846:	ec 01       	movw	r28, r24
	p->inherited.getStartNum = fctn_getStartNum;
    2848:	8b ed       	ldi	r24, 0xDB	; 219
    284a:	9c e0       	ldi	r25, 0x0C	; 12
    284c:	99 87       	std	Y+9, r25	; 0x09
    284e:	88 87       	std	Y+8, r24	; 0x08
	p->inherited.getEndNum = fctn_getEndNum;
    2850:	8f ed       	ldi	r24, 0xDF	; 223
    2852:	9c e0       	ldi	r25, 0x0C	; 12
    2854:	9b 87       	std	Y+11, r25	; 0x0b
    2856:	8a 87       	std	Y+10, r24	; 0x0a
	printf("BMP280_Error\n");
	return 0;
}
void BMP280_VTinit( BMP280Sensor* this)
{
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
    2858:	84 e8       	ldi	r24, 0x84	; 132
    285a:	92 e0       	ldi	r25, 0x02	; 2
    285c:	99 83       	std	Y+1, r25	; 0x01
    285e:	88 83       	st	Y, r24
{
	BMP280Sensor *p = malloc(sizeof(BMP280Sensor));
	p->inherited.getStartNum = fctn_getStartNum;
	p->inherited.getEndNum = fctn_getEndNum;
    BMP280_VTinit( p );
    BMP280_FctnInit( p );
    2860:	ce 01       	movw	r24, r28
    2862:	36 df       	rcall	.-404    	; 0x26d0 <BMP280_FctnInit>
	
	
	p->inherited.test_num = num;
    2864:	fb 82       	std	Y+3, r15	; 0x03
    2866:	ea 82       	std	Y+2, r14	; 0x02
	p->inherited.NumOfData = NumData;
    2868:	1f 83       	std	Y+7, r17	; 0x07
    286a:	0e 83       	std	Y+6, r16	; 0x06
	p->inherited.StartNum = SensorDataCount;
    286c:	80 91 1d 0b 	lds	r24, 0x0B1D
    2870:	90 91 1e 0b 	lds	r25, 0x0B1E
    2874:	9d 83       	std	Y+5, r25	; 0x05
    2876:	8c 83       	std	Y+4, r24	; 0x04
	SensorDataCount += NumData;
    2878:	b8 01       	movw	r22, r16
    287a:	68 0f       	add	r22, r24
    287c:	79 1f       	adc	r23, r25
    287e:	70 93 1e 0b 	sts	0x0B1E, r23
    2882:	60 93 1d 0b 	sts	0x0B1D, r22
	printf("SensorDataCount %d\n",SensorDataCount);
    2886:	7f 93       	push	r23
    2888:	6f 93       	push	r22
    288a:	87 ed       	ldi	r24, 0xD7	; 215
    288c:	92 e0       	ldi	r25, 0x02	; 2
    288e:	9f 93       	push	r25
    2890:	8f 93       	push	r24
    2892:	0e 94 aa 1c 	call	0x3954	; 0x3954 <printf>
	//printf("get start %d end %d\n",p->inherited.getStartNum(& (p->inherited) ),p->inherited.getEndNum(& (p->inherited)));
	
	return p;
    2896:	0f 90       	pop	r0
    2898:	0f 90       	pop	r0
    289a:	0f 90       	pop	r0
    289c:	0f 90       	pop	r0
    289e:	ce 01       	movw	r24, r28
    28a0:	df 91       	pop	r29
    28a2:	cf 91       	pop	r28
    28a4:	1f 91       	pop	r17
    28a6:	0f 91       	pop	r16
    28a8:	ff 90       	pop	r15
    28aa:	ef 90       	pop	r14
    28ac:	08 95       	ret

000028ae <__subsf3>:
    28ae:	50 58       	subi	r21, 0x80	; 128

000028b0 <__addsf3>:
    28b0:	bb 27       	eor	r27, r27
    28b2:	aa 27       	eor	r26, r26
    28b4:	0e d0       	rcall	.+28     	; 0x28d2 <__addsf3x>
    28b6:	75 c1       	rjmp	.+746    	; 0x2ba2 <__fp_round>
    28b8:	66 d1       	rcall	.+716    	; 0x2b86 <__fp_pscA>
    28ba:	30 f0       	brcs	.+12     	; 0x28c8 <__addsf3+0x18>
    28bc:	6b d1       	rcall	.+726    	; 0x2b94 <__fp_pscB>
    28be:	20 f0       	brcs	.+8      	; 0x28c8 <__addsf3+0x18>
    28c0:	31 f4       	brne	.+12     	; 0x28ce <__addsf3+0x1e>
    28c2:	9f 3f       	cpi	r25, 0xFF	; 255
    28c4:	11 f4       	brne	.+4      	; 0x28ca <__addsf3+0x1a>
    28c6:	1e f4       	brtc	.+6      	; 0x28ce <__addsf3+0x1e>
    28c8:	5b c1       	rjmp	.+694    	; 0x2b80 <__fp_nan>
    28ca:	0e f4       	brtc	.+2      	; 0x28ce <__addsf3+0x1e>
    28cc:	e0 95       	com	r30
    28ce:	e7 fb       	bst	r30, 7
    28d0:	51 c1       	rjmp	.+674    	; 0x2b74 <__fp_inf>

000028d2 <__addsf3x>:
    28d2:	e9 2f       	mov	r30, r25
    28d4:	77 d1       	rcall	.+750    	; 0x2bc4 <__fp_split3>
    28d6:	80 f3       	brcs	.-32     	; 0x28b8 <__addsf3+0x8>
    28d8:	ba 17       	cp	r27, r26
    28da:	62 07       	cpc	r22, r18
    28dc:	73 07       	cpc	r23, r19
    28de:	84 07       	cpc	r24, r20
    28e0:	95 07       	cpc	r25, r21
    28e2:	18 f0       	brcs	.+6      	; 0x28ea <__addsf3x+0x18>
    28e4:	71 f4       	brne	.+28     	; 0x2902 <__addsf3x+0x30>
    28e6:	9e f5       	brtc	.+102    	; 0x294e <__addsf3x+0x7c>
    28e8:	8f c1       	rjmp	.+798    	; 0x2c08 <__fp_zero>
    28ea:	0e f4       	brtc	.+2      	; 0x28ee <__addsf3x+0x1c>
    28ec:	e0 95       	com	r30
    28ee:	0b 2e       	mov	r0, r27
    28f0:	ba 2f       	mov	r27, r26
    28f2:	a0 2d       	mov	r26, r0
    28f4:	0b 01       	movw	r0, r22
    28f6:	b9 01       	movw	r22, r18
    28f8:	90 01       	movw	r18, r0
    28fa:	0c 01       	movw	r0, r24
    28fc:	ca 01       	movw	r24, r20
    28fe:	a0 01       	movw	r20, r0
    2900:	11 24       	eor	r1, r1
    2902:	ff 27       	eor	r31, r31
    2904:	59 1b       	sub	r21, r25
    2906:	99 f0       	breq	.+38     	; 0x292e <__addsf3x+0x5c>
    2908:	59 3f       	cpi	r21, 0xF9	; 249
    290a:	50 f4       	brcc	.+20     	; 0x2920 <__addsf3x+0x4e>
    290c:	50 3e       	cpi	r21, 0xE0	; 224
    290e:	68 f1       	brcs	.+90     	; 0x296a <__addsf3x+0x98>
    2910:	1a 16       	cp	r1, r26
    2912:	f0 40       	sbci	r31, 0x00	; 0
    2914:	a2 2f       	mov	r26, r18
    2916:	23 2f       	mov	r18, r19
    2918:	34 2f       	mov	r19, r20
    291a:	44 27       	eor	r20, r20
    291c:	58 5f       	subi	r21, 0xF8	; 248
    291e:	f3 cf       	rjmp	.-26     	; 0x2906 <__addsf3x+0x34>
    2920:	46 95       	lsr	r20
    2922:	37 95       	ror	r19
    2924:	27 95       	ror	r18
    2926:	a7 95       	ror	r26
    2928:	f0 40       	sbci	r31, 0x00	; 0
    292a:	53 95       	inc	r21
    292c:	c9 f7       	brne	.-14     	; 0x2920 <__addsf3x+0x4e>
    292e:	7e f4       	brtc	.+30     	; 0x294e <__addsf3x+0x7c>
    2930:	1f 16       	cp	r1, r31
    2932:	ba 0b       	sbc	r27, r26
    2934:	62 0b       	sbc	r22, r18
    2936:	73 0b       	sbc	r23, r19
    2938:	84 0b       	sbc	r24, r20
    293a:	ba f0       	brmi	.+46     	; 0x296a <__addsf3x+0x98>
    293c:	91 50       	subi	r25, 0x01	; 1
    293e:	a1 f0       	breq	.+40     	; 0x2968 <__addsf3x+0x96>
    2940:	ff 0f       	add	r31, r31
    2942:	bb 1f       	adc	r27, r27
    2944:	66 1f       	adc	r22, r22
    2946:	77 1f       	adc	r23, r23
    2948:	88 1f       	adc	r24, r24
    294a:	c2 f7       	brpl	.-16     	; 0x293c <__addsf3x+0x6a>
    294c:	0e c0       	rjmp	.+28     	; 0x296a <__addsf3x+0x98>
    294e:	ba 0f       	add	r27, r26
    2950:	62 1f       	adc	r22, r18
    2952:	73 1f       	adc	r23, r19
    2954:	84 1f       	adc	r24, r20
    2956:	48 f4       	brcc	.+18     	; 0x296a <__addsf3x+0x98>
    2958:	87 95       	ror	r24
    295a:	77 95       	ror	r23
    295c:	67 95       	ror	r22
    295e:	b7 95       	ror	r27
    2960:	f7 95       	ror	r31
    2962:	9e 3f       	cpi	r25, 0xFE	; 254
    2964:	08 f0       	brcs	.+2      	; 0x2968 <__addsf3x+0x96>
    2966:	b3 cf       	rjmp	.-154    	; 0x28ce <__addsf3+0x1e>
    2968:	93 95       	inc	r25
    296a:	88 0f       	add	r24, r24
    296c:	08 f0       	brcs	.+2      	; 0x2970 <__addsf3x+0x9e>
    296e:	99 27       	eor	r25, r25
    2970:	ee 0f       	add	r30, r30
    2972:	97 95       	ror	r25
    2974:	87 95       	ror	r24
    2976:	08 95       	ret

00002978 <__cmpsf2>:
    2978:	d9 d0       	rcall	.+434    	; 0x2b2c <__fp_cmp>
    297a:	08 f4       	brcc	.+2      	; 0x297e <__cmpsf2+0x6>
    297c:	81 e0       	ldi	r24, 0x01	; 1
    297e:	08 95       	ret

00002980 <__divsf3>:
    2980:	0c d0       	rcall	.+24     	; 0x299a <__divsf3x>
    2982:	0f c1       	rjmp	.+542    	; 0x2ba2 <__fp_round>
    2984:	07 d1       	rcall	.+526    	; 0x2b94 <__fp_pscB>
    2986:	40 f0       	brcs	.+16     	; 0x2998 <__divsf3+0x18>
    2988:	fe d0       	rcall	.+508    	; 0x2b86 <__fp_pscA>
    298a:	30 f0       	brcs	.+12     	; 0x2998 <__divsf3+0x18>
    298c:	21 f4       	brne	.+8      	; 0x2996 <__divsf3+0x16>
    298e:	5f 3f       	cpi	r21, 0xFF	; 255
    2990:	19 f0       	breq	.+6      	; 0x2998 <__divsf3+0x18>
    2992:	f0 c0       	rjmp	.+480    	; 0x2b74 <__fp_inf>
    2994:	51 11       	cpse	r21, r1
    2996:	39 c1       	rjmp	.+626    	; 0x2c0a <__fp_szero>
    2998:	f3 c0       	rjmp	.+486    	; 0x2b80 <__fp_nan>

0000299a <__divsf3x>:
    299a:	14 d1       	rcall	.+552    	; 0x2bc4 <__fp_split3>
    299c:	98 f3       	brcs	.-26     	; 0x2984 <__divsf3+0x4>

0000299e <__divsf3_pse>:
    299e:	99 23       	and	r25, r25
    29a0:	c9 f3       	breq	.-14     	; 0x2994 <__divsf3+0x14>
    29a2:	55 23       	and	r21, r21
    29a4:	b1 f3       	breq	.-20     	; 0x2992 <__divsf3+0x12>
    29a6:	95 1b       	sub	r25, r21
    29a8:	55 0b       	sbc	r21, r21
    29aa:	bb 27       	eor	r27, r27
    29ac:	aa 27       	eor	r26, r26
    29ae:	62 17       	cp	r22, r18
    29b0:	73 07       	cpc	r23, r19
    29b2:	84 07       	cpc	r24, r20
    29b4:	38 f0       	brcs	.+14     	; 0x29c4 <__divsf3_pse+0x26>
    29b6:	9f 5f       	subi	r25, 0xFF	; 255
    29b8:	5f 4f       	sbci	r21, 0xFF	; 255
    29ba:	22 0f       	add	r18, r18
    29bc:	33 1f       	adc	r19, r19
    29be:	44 1f       	adc	r20, r20
    29c0:	aa 1f       	adc	r26, r26
    29c2:	a9 f3       	breq	.-22     	; 0x29ae <__divsf3_pse+0x10>
    29c4:	33 d0       	rcall	.+102    	; 0x2a2c <__divsf3_pse+0x8e>
    29c6:	0e 2e       	mov	r0, r30
    29c8:	3a f0       	brmi	.+14     	; 0x29d8 <__divsf3_pse+0x3a>
    29ca:	e0 e8       	ldi	r30, 0x80	; 128
    29cc:	30 d0       	rcall	.+96     	; 0x2a2e <__divsf3_pse+0x90>
    29ce:	91 50       	subi	r25, 0x01	; 1
    29d0:	50 40       	sbci	r21, 0x00	; 0
    29d2:	e6 95       	lsr	r30
    29d4:	00 1c       	adc	r0, r0
    29d6:	ca f7       	brpl	.-14     	; 0x29ca <__divsf3_pse+0x2c>
    29d8:	29 d0       	rcall	.+82     	; 0x2a2c <__divsf3_pse+0x8e>
    29da:	fe 2f       	mov	r31, r30
    29dc:	27 d0       	rcall	.+78     	; 0x2a2c <__divsf3_pse+0x8e>
    29de:	66 0f       	add	r22, r22
    29e0:	77 1f       	adc	r23, r23
    29e2:	88 1f       	adc	r24, r24
    29e4:	bb 1f       	adc	r27, r27
    29e6:	26 17       	cp	r18, r22
    29e8:	37 07       	cpc	r19, r23
    29ea:	48 07       	cpc	r20, r24
    29ec:	ab 07       	cpc	r26, r27
    29ee:	b0 e8       	ldi	r27, 0x80	; 128
    29f0:	09 f0       	breq	.+2      	; 0x29f4 <__divsf3_pse+0x56>
    29f2:	bb 0b       	sbc	r27, r27
    29f4:	80 2d       	mov	r24, r0
    29f6:	bf 01       	movw	r22, r30
    29f8:	ff 27       	eor	r31, r31
    29fa:	93 58       	subi	r25, 0x83	; 131
    29fc:	5f 4f       	sbci	r21, 0xFF	; 255
    29fe:	2a f0       	brmi	.+10     	; 0x2a0a <__divsf3_pse+0x6c>
    2a00:	9e 3f       	cpi	r25, 0xFE	; 254
    2a02:	51 05       	cpc	r21, r1
    2a04:	68 f0       	brcs	.+26     	; 0x2a20 <__divsf3_pse+0x82>
    2a06:	b6 c0       	rjmp	.+364    	; 0x2b74 <__fp_inf>
    2a08:	00 c1       	rjmp	.+512    	; 0x2c0a <__fp_szero>
    2a0a:	5f 3f       	cpi	r21, 0xFF	; 255
    2a0c:	ec f3       	brlt	.-6      	; 0x2a08 <__divsf3_pse+0x6a>
    2a0e:	98 3e       	cpi	r25, 0xE8	; 232
    2a10:	dc f3       	brlt	.-10     	; 0x2a08 <__divsf3_pse+0x6a>
    2a12:	86 95       	lsr	r24
    2a14:	77 95       	ror	r23
    2a16:	67 95       	ror	r22
    2a18:	b7 95       	ror	r27
    2a1a:	f7 95       	ror	r31
    2a1c:	9f 5f       	subi	r25, 0xFF	; 255
    2a1e:	c9 f7       	brne	.-14     	; 0x2a12 <__divsf3_pse+0x74>
    2a20:	88 0f       	add	r24, r24
    2a22:	91 1d       	adc	r25, r1
    2a24:	96 95       	lsr	r25
    2a26:	87 95       	ror	r24
    2a28:	97 f9       	bld	r25, 7
    2a2a:	08 95       	ret
    2a2c:	e1 e0       	ldi	r30, 0x01	; 1
    2a2e:	66 0f       	add	r22, r22
    2a30:	77 1f       	adc	r23, r23
    2a32:	88 1f       	adc	r24, r24
    2a34:	bb 1f       	adc	r27, r27
    2a36:	62 17       	cp	r22, r18
    2a38:	73 07       	cpc	r23, r19
    2a3a:	84 07       	cpc	r24, r20
    2a3c:	ba 07       	cpc	r27, r26
    2a3e:	20 f0       	brcs	.+8      	; 0x2a48 <__divsf3_pse+0xaa>
    2a40:	62 1b       	sub	r22, r18
    2a42:	73 0b       	sbc	r23, r19
    2a44:	84 0b       	sbc	r24, r20
    2a46:	ba 0b       	sbc	r27, r26
    2a48:	ee 1f       	adc	r30, r30
    2a4a:	88 f7       	brcc	.-30     	; 0x2a2e <__divsf3_pse+0x90>
    2a4c:	e0 95       	com	r30
    2a4e:	08 95       	ret

00002a50 <__fixsfsi>:
    2a50:	04 d0       	rcall	.+8      	; 0x2a5a <__fixunssfsi>
    2a52:	68 94       	set
    2a54:	b1 11       	cpse	r27, r1
    2a56:	d9 c0       	rjmp	.+434    	; 0x2c0a <__fp_szero>
    2a58:	08 95       	ret

00002a5a <__fixunssfsi>:
    2a5a:	bc d0       	rcall	.+376    	; 0x2bd4 <__fp_splitA>
    2a5c:	88 f0       	brcs	.+34     	; 0x2a80 <__fixunssfsi+0x26>
    2a5e:	9f 57       	subi	r25, 0x7F	; 127
    2a60:	90 f0       	brcs	.+36     	; 0x2a86 <__fixunssfsi+0x2c>
    2a62:	b9 2f       	mov	r27, r25
    2a64:	99 27       	eor	r25, r25
    2a66:	b7 51       	subi	r27, 0x17	; 23
    2a68:	a0 f0       	brcs	.+40     	; 0x2a92 <__fixunssfsi+0x38>
    2a6a:	d1 f0       	breq	.+52     	; 0x2aa0 <__fixunssfsi+0x46>
    2a6c:	66 0f       	add	r22, r22
    2a6e:	77 1f       	adc	r23, r23
    2a70:	88 1f       	adc	r24, r24
    2a72:	99 1f       	adc	r25, r25
    2a74:	1a f0       	brmi	.+6      	; 0x2a7c <__fixunssfsi+0x22>
    2a76:	ba 95       	dec	r27
    2a78:	c9 f7       	brne	.-14     	; 0x2a6c <__fixunssfsi+0x12>
    2a7a:	12 c0       	rjmp	.+36     	; 0x2aa0 <__fixunssfsi+0x46>
    2a7c:	b1 30       	cpi	r27, 0x01	; 1
    2a7e:	81 f0       	breq	.+32     	; 0x2aa0 <__fixunssfsi+0x46>
    2a80:	c3 d0       	rcall	.+390    	; 0x2c08 <__fp_zero>
    2a82:	b1 e0       	ldi	r27, 0x01	; 1
    2a84:	08 95       	ret
    2a86:	c0 c0       	rjmp	.+384    	; 0x2c08 <__fp_zero>
    2a88:	67 2f       	mov	r22, r23
    2a8a:	78 2f       	mov	r23, r24
    2a8c:	88 27       	eor	r24, r24
    2a8e:	b8 5f       	subi	r27, 0xF8	; 248
    2a90:	39 f0       	breq	.+14     	; 0x2aa0 <__fixunssfsi+0x46>
    2a92:	b9 3f       	cpi	r27, 0xF9	; 249
    2a94:	cc f3       	brlt	.-14     	; 0x2a88 <__fixunssfsi+0x2e>
    2a96:	86 95       	lsr	r24
    2a98:	77 95       	ror	r23
    2a9a:	67 95       	ror	r22
    2a9c:	b3 95       	inc	r27
    2a9e:	d9 f7       	brne	.-10     	; 0x2a96 <__fixunssfsi+0x3c>
    2aa0:	3e f4       	brtc	.+14     	; 0x2ab0 <__fixunssfsi+0x56>
    2aa2:	90 95       	com	r25
    2aa4:	80 95       	com	r24
    2aa6:	70 95       	com	r23
    2aa8:	61 95       	neg	r22
    2aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    2aac:	8f 4f       	sbci	r24, 0xFF	; 255
    2aae:	9f 4f       	sbci	r25, 0xFF	; 255
    2ab0:	08 95       	ret

00002ab2 <__floatunsisf>:
    2ab2:	e8 94       	clt
    2ab4:	09 c0       	rjmp	.+18     	; 0x2ac8 <__floatsisf+0x12>

00002ab6 <__floatsisf>:
    2ab6:	97 fb       	bst	r25, 7
    2ab8:	3e f4       	brtc	.+14     	; 0x2ac8 <__floatsisf+0x12>
    2aba:	90 95       	com	r25
    2abc:	80 95       	com	r24
    2abe:	70 95       	com	r23
    2ac0:	61 95       	neg	r22
    2ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ac4:	8f 4f       	sbci	r24, 0xFF	; 255
    2ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ac8:	99 23       	and	r25, r25
    2aca:	a9 f0       	breq	.+42     	; 0x2af6 <__floatsisf+0x40>
    2acc:	f9 2f       	mov	r31, r25
    2ace:	96 e9       	ldi	r25, 0x96	; 150
    2ad0:	bb 27       	eor	r27, r27
    2ad2:	93 95       	inc	r25
    2ad4:	f6 95       	lsr	r31
    2ad6:	87 95       	ror	r24
    2ad8:	77 95       	ror	r23
    2ada:	67 95       	ror	r22
    2adc:	b7 95       	ror	r27
    2ade:	f1 11       	cpse	r31, r1
    2ae0:	f8 cf       	rjmp	.-16     	; 0x2ad2 <__floatsisf+0x1c>
    2ae2:	fa f4       	brpl	.+62     	; 0x2b22 <__floatsisf+0x6c>
    2ae4:	bb 0f       	add	r27, r27
    2ae6:	11 f4       	brne	.+4      	; 0x2aec <__floatsisf+0x36>
    2ae8:	60 ff       	sbrs	r22, 0
    2aea:	1b c0       	rjmp	.+54     	; 0x2b22 <__floatsisf+0x6c>
    2aec:	6f 5f       	subi	r22, 0xFF	; 255
    2aee:	7f 4f       	sbci	r23, 0xFF	; 255
    2af0:	8f 4f       	sbci	r24, 0xFF	; 255
    2af2:	9f 4f       	sbci	r25, 0xFF	; 255
    2af4:	16 c0       	rjmp	.+44     	; 0x2b22 <__floatsisf+0x6c>
    2af6:	88 23       	and	r24, r24
    2af8:	11 f0       	breq	.+4      	; 0x2afe <__floatsisf+0x48>
    2afa:	96 e9       	ldi	r25, 0x96	; 150
    2afc:	11 c0       	rjmp	.+34     	; 0x2b20 <__floatsisf+0x6a>
    2afe:	77 23       	and	r23, r23
    2b00:	21 f0       	breq	.+8      	; 0x2b0a <__floatsisf+0x54>
    2b02:	9e e8       	ldi	r25, 0x8E	; 142
    2b04:	87 2f       	mov	r24, r23
    2b06:	76 2f       	mov	r23, r22
    2b08:	05 c0       	rjmp	.+10     	; 0x2b14 <__floatsisf+0x5e>
    2b0a:	66 23       	and	r22, r22
    2b0c:	71 f0       	breq	.+28     	; 0x2b2a <__floatsisf+0x74>
    2b0e:	96 e8       	ldi	r25, 0x86	; 134
    2b10:	86 2f       	mov	r24, r22
    2b12:	70 e0       	ldi	r23, 0x00	; 0
    2b14:	60 e0       	ldi	r22, 0x00	; 0
    2b16:	2a f0       	brmi	.+10     	; 0x2b22 <__floatsisf+0x6c>
    2b18:	9a 95       	dec	r25
    2b1a:	66 0f       	add	r22, r22
    2b1c:	77 1f       	adc	r23, r23
    2b1e:	88 1f       	adc	r24, r24
    2b20:	da f7       	brpl	.-10     	; 0x2b18 <__floatsisf+0x62>
    2b22:	88 0f       	add	r24, r24
    2b24:	96 95       	lsr	r25
    2b26:	87 95       	ror	r24
    2b28:	97 f9       	bld	r25, 7
    2b2a:	08 95       	ret

00002b2c <__fp_cmp>:
    2b2c:	99 0f       	add	r25, r25
    2b2e:	00 08       	sbc	r0, r0
    2b30:	55 0f       	add	r21, r21
    2b32:	aa 0b       	sbc	r26, r26
    2b34:	e0 e8       	ldi	r30, 0x80	; 128
    2b36:	fe ef       	ldi	r31, 0xFE	; 254
    2b38:	16 16       	cp	r1, r22
    2b3a:	17 06       	cpc	r1, r23
    2b3c:	e8 07       	cpc	r30, r24
    2b3e:	f9 07       	cpc	r31, r25
    2b40:	c0 f0       	brcs	.+48     	; 0x2b72 <__fp_cmp+0x46>
    2b42:	12 16       	cp	r1, r18
    2b44:	13 06       	cpc	r1, r19
    2b46:	e4 07       	cpc	r30, r20
    2b48:	f5 07       	cpc	r31, r21
    2b4a:	98 f0       	brcs	.+38     	; 0x2b72 <__fp_cmp+0x46>
    2b4c:	62 1b       	sub	r22, r18
    2b4e:	73 0b       	sbc	r23, r19
    2b50:	84 0b       	sbc	r24, r20
    2b52:	95 0b       	sbc	r25, r21
    2b54:	39 f4       	brne	.+14     	; 0x2b64 <__fp_cmp+0x38>
    2b56:	0a 26       	eor	r0, r26
    2b58:	61 f0       	breq	.+24     	; 0x2b72 <__fp_cmp+0x46>
    2b5a:	23 2b       	or	r18, r19
    2b5c:	24 2b       	or	r18, r20
    2b5e:	25 2b       	or	r18, r21
    2b60:	21 f4       	brne	.+8      	; 0x2b6a <__fp_cmp+0x3e>
    2b62:	08 95       	ret
    2b64:	0a 26       	eor	r0, r26
    2b66:	09 f4       	brne	.+2      	; 0x2b6a <__fp_cmp+0x3e>
    2b68:	a1 40       	sbci	r26, 0x01	; 1
    2b6a:	a6 95       	lsr	r26
    2b6c:	8f ef       	ldi	r24, 0xFF	; 255
    2b6e:	81 1d       	adc	r24, r1
    2b70:	81 1d       	adc	r24, r1
    2b72:	08 95       	ret

00002b74 <__fp_inf>:
    2b74:	97 f9       	bld	r25, 7
    2b76:	9f 67       	ori	r25, 0x7F	; 127
    2b78:	80 e8       	ldi	r24, 0x80	; 128
    2b7a:	70 e0       	ldi	r23, 0x00	; 0
    2b7c:	60 e0       	ldi	r22, 0x00	; 0
    2b7e:	08 95       	ret

00002b80 <__fp_nan>:
    2b80:	9f ef       	ldi	r25, 0xFF	; 255
    2b82:	80 ec       	ldi	r24, 0xC0	; 192
    2b84:	08 95       	ret

00002b86 <__fp_pscA>:
    2b86:	00 24       	eor	r0, r0
    2b88:	0a 94       	dec	r0
    2b8a:	16 16       	cp	r1, r22
    2b8c:	17 06       	cpc	r1, r23
    2b8e:	18 06       	cpc	r1, r24
    2b90:	09 06       	cpc	r0, r25
    2b92:	08 95       	ret

00002b94 <__fp_pscB>:
    2b94:	00 24       	eor	r0, r0
    2b96:	0a 94       	dec	r0
    2b98:	12 16       	cp	r1, r18
    2b9a:	13 06       	cpc	r1, r19
    2b9c:	14 06       	cpc	r1, r20
    2b9e:	05 06       	cpc	r0, r21
    2ba0:	08 95       	ret

00002ba2 <__fp_round>:
    2ba2:	09 2e       	mov	r0, r25
    2ba4:	03 94       	inc	r0
    2ba6:	00 0c       	add	r0, r0
    2ba8:	11 f4       	brne	.+4      	; 0x2bae <__fp_round+0xc>
    2baa:	88 23       	and	r24, r24
    2bac:	52 f0       	brmi	.+20     	; 0x2bc2 <__fp_round+0x20>
    2bae:	bb 0f       	add	r27, r27
    2bb0:	40 f4       	brcc	.+16     	; 0x2bc2 <__fp_round+0x20>
    2bb2:	bf 2b       	or	r27, r31
    2bb4:	11 f4       	brne	.+4      	; 0x2bba <__fp_round+0x18>
    2bb6:	60 ff       	sbrs	r22, 0
    2bb8:	04 c0       	rjmp	.+8      	; 0x2bc2 <__fp_round+0x20>
    2bba:	6f 5f       	subi	r22, 0xFF	; 255
    2bbc:	7f 4f       	sbci	r23, 0xFF	; 255
    2bbe:	8f 4f       	sbci	r24, 0xFF	; 255
    2bc0:	9f 4f       	sbci	r25, 0xFF	; 255
    2bc2:	08 95       	ret

00002bc4 <__fp_split3>:
    2bc4:	57 fd       	sbrc	r21, 7
    2bc6:	90 58       	subi	r25, 0x80	; 128
    2bc8:	44 0f       	add	r20, r20
    2bca:	55 1f       	adc	r21, r21
    2bcc:	59 f0       	breq	.+22     	; 0x2be4 <__fp_splitA+0x10>
    2bce:	5f 3f       	cpi	r21, 0xFF	; 255
    2bd0:	71 f0       	breq	.+28     	; 0x2bee <__fp_splitA+0x1a>
    2bd2:	47 95       	ror	r20

00002bd4 <__fp_splitA>:
    2bd4:	88 0f       	add	r24, r24
    2bd6:	97 fb       	bst	r25, 7
    2bd8:	99 1f       	adc	r25, r25
    2bda:	61 f0       	breq	.+24     	; 0x2bf4 <__fp_splitA+0x20>
    2bdc:	9f 3f       	cpi	r25, 0xFF	; 255
    2bde:	79 f0       	breq	.+30     	; 0x2bfe <__fp_splitA+0x2a>
    2be0:	87 95       	ror	r24
    2be2:	08 95       	ret
    2be4:	12 16       	cp	r1, r18
    2be6:	13 06       	cpc	r1, r19
    2be8:	14 06       	cpc	r1, r20
    2bea:	55 1f       	adc	r21, r21
    2bec:	f2 cf       	rjmp	.-28     	; 0x2bd2 <__fp_split3+0xe>
    2bee:	46 95       	lsr	r20
    2bf0:	f1 df       	rcall	.-30     	; 0x2bd4 <__fp_splitA>
    2bf2:	08 c0       	rjmp	.+16     	; 0x2c04 <__fp_splitA+0x30>
    2bf4:	16 16       	cp	r1, r22
    2bf6:	17 06       	cpc	r1, r23
    2bf8:	18 06       	cpc	r1, r24
    2bfa:	99 1f       	adc	r25, r25
    2bfc:	f1 cf       	rjmp	.-30     	; 0x2be0 <__fp_splitA+0xc>
    2bfe:	86 95       	lsr	r24
    2c00:	71 05       	cpc	r23, r1
    2c02:	61 05       	cpc	r22, r1
    2c04:	08 94       	sec
    2c06:	08 95       	ret

00002c08 <__fp_zero>:
    2c08:	e8 94       	clt

00002c0a <__fp_szero>:
    2c0a:	bb 27       	eor	r27, r27
    2c0c:	66 27       	eor	r22, r22
    2c0e:	77 27       	eor	r23, r23
    2c10:	cb 01       	movw	r24, r22
    2c12:	97 f9       	bld	r25, 7
    2c14:	08 95       	ret

00002c16 <__gesf2>:
    2c16:	8a df       	rcall	.-236    	; 0x2b2c <__fp_cmp>
    2c18:	08 f4       	brcc	.+2      	; 0x2c1c <__gesf2+0x6>
    2c1a:	8f ef       	ldi	r24, 0xFF	; 255
    2c1c:	08 95       	ret

00002c1e <__mulsf3>:
    2c1e:	0b d0       	rcall	.+22     	; 0x2c36 <__mulsf3x>
    2c20:	c0 cf       	rjmp	.-128    	; 0x2ba2 <__fp_round>
    2c22:	b1 df       	rcall	.-158    	; 0x2b86 <__fp_pscA>
    2c24:	28 f0       	brcs	.+10     	; 0x2c30 <__mulsf3+0x12>
    2c26:	b6 df       	rcall	.-148    	; 0x2b94 <__fp_pscB>
    2c28:	18 f0       	brcs	.+6      	; 0x2c30 <__mulsf3+0x12>
    2c2a:	95 23       	and	r25, r21
    2c2c:	09 f0       	breq	.+2      	; 0x2c30 <__mulsf3+0x12>
    2c2e:	a2 cf       	rjmp	.-188    	; 0x2b74 <__fp_inf>
    2c30:	a7 cf       	rjmp	.-178    	; 0x2b80 <__fp_nan>
    2c32:	11 24       	eor	r1, r1
    2c34:	ea cf       	rjmp	.-44     	; 0x2c0a <__fp_szero>

00002c36 <__mulsf3x>:
    2c36:	c6 df       	rcall	.-116    	; 0x2bc4 <__fp_split3>
    2c38:	a0 f3       	brcs	.-24     	; 0x2c22 <__mulsf3+0x4>

00002c3a <__mulsf3_pse>:
    2c3a:	95 9f       	mul	r25, r21
    2c3c:	d1 f3       	breq	.-12     	; 0x2c32 <__mulsf3+0x14>
    2c3e:	95 0f       	add	r25, r21
    2c40:	50 e0       	ldi	r21, 0x00	; 0
    2c42:	55 1f       	adc	r21, r21
    2c44:	62 9f       	mul	r22, r18
    2c46:	f0 01       	movw	r30, r0
    2c48:	72 9f       	mul	r23, r18
    2c4a:	bb 27       	eor	r27, r27
    2c4c:	f0 0d       	add	r31, r0
    2c4e:	b1 1d       	adc	r27, r1
    2c50:	63 9f       	mul	r22, r19
    2c52:	aa 27       	eor	r26, r26
    2c54:	f0 0d       	add	r31, r0
    2c56:	b1 1d       	adc	r27, r1
    2c58:	aa 1f       	adc	r26, r26
    2c5a:	64 9f       	mul	r22, r20
    2c5c:	66 27       	eor	r22, r22
    2c5e:	b0 0d       	add	r27, r0
    2c60:	a1 1d       	adc	r26, r1
    2c62:	66 1f       	adc	r22, r22
    2c64:	82 9f       	mul	r24, r18
    2c66:	22 27       	eor	r18, r18
    2c68:	b0 0d       	add	r27, r0
    2c6a:	a1 1d       	adc	r26, r1
    2c6c:	62 1f       	adc	r22, r18
    2c6e:	73 9f       	mul	r23, r19
    2c70:	b0 0d       	add	r27, r0
    2c72:	a1 1d       	adc	r26, r1
    2c74:	62 1f       	adc	r22, r18
    2c76:	83 9f       	mul	r24, r19
    2c78:	a0 0d       	add	r26, r0
    2c7a:	61 1d       	adc	r22, r1
    2c7c:	22 1f       	adc	r18, r18
    2c7e:	74 9f       	mul	r23, r20
    2c80:	33 27       	eor	r19, r19
    2c82:	a0 0d       	add	r26, r0
    2c84:	61 1d       	adc	r22, r1
    2c86:	23 1f       	adc	r18, r19
    2c88:	84 9f       	mul	r24, r20
    2c8a:	60 0d       	add	r22, r0
    2c8c:	21 1d       	adc	r18, r1
    2c8e:	82 2f       	mov	r24, r18
    2c90:	76 2f       	mov	r23, r22
    2c92:	6a 2f       	mov	r22, r26
    2c94:	11 24       	eor	r1, r1
    2c96:	9f 57       	subi	r25, 0x7F	; 127
    2c98:	50 40       	sbci	r21, 0x00	; 0
    2c9a:	8a f0       	brmi	.+34     	; 0x2cbe <__mulsf3_pse+0x84>
    2c9c:	e1 f0       	breq	.+56     	; 0x2cd6 <__mulsf3_pse+0x9c>
    2c9e:	88 23       	and	r24, r24
    2ca0:	4a f0       	brmi	.+18     	; 0x2cb4 <__mulsf3_pse+0x7a>
    2ca2:	ee 0f       	add	r30, r30
    2ca4:	ff 1f       	adc	r31, r31
    2ca6:	bb 1f       	adc	r27, r27
    2ca8:	66 1f       	adc	r22, r22
    2caa:	77 1f       	adc	r23, r23
    2cac:	88 1f       	adc	r24, r24
    2cae:	91 50       	subi	r25, 0x01	; 1
    2cb0:	50 40       	sbci	r21, 0x00	; 0
    2cb2:	a9 f7       	brne	.-22     	; 0x2c9e <__mulsf3_pse+0x64>
    2cb4:	9e 3f       	cpi	r25, 0xFE	; 254
    2cb6:	51 05       	cpc	r21, r1
    2cb8:	70 f0       	brcs	.+28     	; 0x2cd6 <__mulsf3_pse+0x9c>
    2cba:	5c cf       	rjmp	.-328    	; 0x2b74 <__fp_inf>
    2cbc:	a6 cf       	rjmp	.-180    	; 0x2c0a <__fp_szero>
    2cbe:	5f 3f       	cpi	r21, 0xFF	; 255
    2cc0:	ec f3       	brlt	.-6      	; 0x2cbc <__mulsf3_pse+0x82>
    2cc2:	98 3e       	cpi	r25, 0xE8	; 232
    2cc4:	dc f3       	brlt	.-10     	; 0x2cbc <__mulsf3_pse+0x82>
    2cc6:	86 95       	lsr	r24
    2cc8:	77 95       	ror	r23
    2cca:	67 95       	ror	r22
    2ccc:	b7 95       	ror	r27
    2cce:	f7 95       	ror	r31
    2cd0:	e7 95       	ror	r30
    2cd2:	9f 5f       	subi	r25, 0xFF	; 255
    2cd4:	c1 f7       	brne	.-16     	; 0x2cc6 <__mulsf3_pse+0x8c>
    2cd6:	fe 2b       	or	r31, r30
    2cd8:	88 0f       	add	r24, r24
    2cda:	91 1d       	adc	r25, r1
    2cdc:	96 95       	lsr	r25
    2cde:	87 95       	ror	r24
    2ce0:	97 f9       	bld	r25, 7
    2ce2:	08 95       	ret

00002ce4 <vfprintf>:
    2ce4:	2f 92       	push	r2
    2ce6:	3f 92       	push	r3
    2ce8:	4f 92       	push	r4
    2cea:	5f 92       	push	r5
    2cec:	6f 92       	push	r6
    2cee:	7f 92       	push	r7
    2cf0:	8f 92       	push	r8
    2cf2:	9f 92       	push	r9
    2cf4:	af 92       	push	r10
    2cf6:	bf 92       	push	r11
    2cf8:	cf 92       	push	r12
    2cfa:	df 92       	push	r13
    2cfc:	ef 92       	push	r14
    2cfe:	ff 92       	push	r15
    2d00:	0f 93       	push	r16
    2d02:	1f 93       	push	r17
    2d04:	cf 93       	push	r28
    2d06:	df 93       	push	r29
    2d08:	cd b7       	in	r28, 0x3d	; 61
    2d0a:	de b7       	in	r29, 0x3e	; 62
    2d0c:	63 97       	sbiw	r28, 0x13	; 19
    2d0e:	0f b6       	in	r0, 0x3f	; 63
    2d10:	f8 94       	cli
    2d12:	de bf       	out	0x3e, r29	; 62
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	cd bf       	out	0x3d, r28	; 61
    2d18:	6c 01       	movw	r12, r24
    2d1a:	4b 01       	movw	r8, r22
    2d1c:	2a 01       	movw	r4, r20
    2d1e:	fc 01       	movw	r30, r24
    2d20:	17 82       	std	Z+7, r1	; 0x07
    2d22:	16 82       	std	Z+6, r1	; 0x06
    2d24:	83 81       	ldd	r24, Z+3	; 0x03
    2d26:	81 ff       	sbrs	r24, 1
    2d28:	29 c3       	rjmp	.+1618   	; 0x337c <vfprintf+0x698>
    2d2a:	ae 01       	movw	r20, r28
    2d2c:	4f 5f       	subi	r20, 0xFF	; 255
    2d2e:	5f 4f       	sbci	r21, 0xFF	; 255
    2d30:	3a 01       	movw	r6, r20
    2d32:	f6 01       	movw	r30, r12
    2d34:	93 81       	ldd	r25, Z+3	; 0x03
    2d36:	f4 01       	movw	r30, r8
    2d38:	93 fd       	sbrc	r25, 3
    2d3a:	85 91       	lpm	r24, Z+
    2d3c:	93 ff       	sbrs	r25, 3
    2d3e:	81 91       	ld	r24, Z+
    2d40:	4f 01       	movw	r8, r30
    2d42:	88 23       	and	r24, r24
    2d44:	09 f4       	brne	.+2      	; 0x2d48 <vfprintf+0x64>
    2d46:	16 c3       	rjmp	.+1580   	; 0x3374 <vfprintf+0x690>
    2d48:	85 32       	cpi	r24, 0x25	; 37
    2d4a:	39 f4       	brne	.+14     	; 0x2d5a <vfprintf+0x76>
    2d4c:	93 fd       	sbrc	r25, 3
    2d4e:	85 91       	lpm	r24, Z+
    2d50:	93 ff       	sbrs	r25, 3
    2d52:	81 91       	ld	r24, Z+
    2d54:	4f 01       	movw	r8, r30
    2d56:	85 32       	cpi	r24, 0x25	; 37
    2d58:	31 f4       	brne	.+12     	; 0x2d66 <vfprintf+0x82>
    2d5a:	b6 01       	movw	r22, r12
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	c2 d5       	rcall	.+2948   	; 0x38e4 <fputc>
    2d60:	52 01       	movw	r10, r4
    2d62:	25 01       	movw	r4, r10
    2d64:	e6 cf       	rjmp	.-52     	; 0x2d32 <vfprintf+0x4e>
    2d66:	10 e0       	ldi	r17, 0x00	; 0
    2d68:	f1 2c       	mov	r15, r1
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	20 32       	cpi	r18, 0x20	; 32
    2d6e:	a0 f4       	brcc	.+40     	; 0x2d98 <vfprintf+0xb4>
    2d70:	8b 32       	cpi	r24, 0x2B	; 43
    2d72:	69 f0       	breq	.+26     	; 0x2d8e <vfprintf+0xaa>
    2d74:	30 f4       	brcc	.+12     	; 0x2d82 <vfprintf+0x9e>
    2d76:	80 32       	cpi	r24, 0x20	; 32
    2d78:	59 f0       	breq	.+22     	; 0x2d90 <vfprintf+0xac>
    2d7a:	83 32       	cpi	r24, 0x23	; 35
    2d7c:	69 f4       	brne	.+26     	; 0x2d98 <vfprintf+0xb4>
    2d7e:	20 61       	ori	r18, 0x10	; 16
    2d80:	2c c0       	rjmp	.+88     	; 0x2dda <vfprintf+0xf6>
    2d82:	8d 32       	cpi	r24, 0x2D	; 45
    2d84:	39 f0       	breq	.+14     	; 0x2d94 <vfprintf+0xb0>
    2d86:	80 33       	cpi	r24, 0x30	; 48
    2d88:	39 f4       	brne	.+14     	; 0x2d98 <vfprintf+0xb4>
    2d8a:	21 60       	ori	r18, 0x01	; 1
    2d8c:	26 c0       	rjmp	.+76     	; 0x2dda <vfprintf+0xf6>
    2d8e:	22 60       	ori	r18, 0x02	; 2
    2d90:	24 60       	ori	r18, 0x04	; 4
    2d92:	23 c0       	rjmp	.+70     	; 0x2dda <vfprintf+0xf6>
    2d94:	28 60       	ori	r18, 0x08	; 8
    2d96:	21 c0       	rjmp	.+66     	; 0x2dda <vfprintf+0xf6>
    2d98:	27 fd       	sbrc	r18, 7
    2d9a:	27 c0       	rjmp	.+78     	; 0x2dea <vfprintf+0x106>
    2d9c:	30 ed       	ldi	r19, 0xD0	; 208
    2d9e:	38 0f       	add	r19, r24
    2da0:	3a 30       	cpi	r19, 0x0A	; 10
    2da2:	78 f4       	brcc	.+30     	; 0x2dc2 <vfprintf+0xde>
    2da4:	26 ff       	sbrs	r18, 6
    2da6:	06 c0       	rjmp	.+12     	; 0x2db4 <vfprintf+0xd0>
    2da8:	fa e0       	ldi	r31, 0x0A	; 10
    2daa:	1f 9f       	mul	r17, r31
    2dac:	30 0d       	add	r19, r0
    2dae:	11 24       	eor	r1, r1
    2db0:	13 2f       	mov	r17, r19
    2db2:	13 c0       	rjmp	.+38     	; 0x2dda <vfprintf+0xf6>
    2db4:	4a e0       	ldi	r20, 0x0A	; 10
    2db6:	f4 9e       	mul	r15, r20
    2db8:	30 0d       	add	r19, r0
    2dba:	11 24       	eor	r1, r1
    2dbc:	f3 2e       	mov	r15, r19
    2dbe:	20 62       	ori	r18, 0x20	; 32
    2dc0:	0c c0       	rjmp	.+24     	; 0x2dda <vfprintf+0xf6>
    2dc2:	8e 32       	cpi	r24, 0x2E	; 46
    2dc4:	21 f4       	brne	.+8      	; 0x2dce <vfprintf+0xea>
    2dc6:	26 fd       	sbrc	r18, 6
    2dc8:	d5 c2       	rjmp	.+1450   	; 0x3374 <vfprintf+0x690>
    2dca:	20 64       	ori	r18, 0x40	; 64
    2dcc:	06 c0       	rjmp	.+12     	; 0x2dda <vfprintf+0xf6>
    2dce:	8c 36       	cpi	r24, 0x6C	; 108
    2dd0:	11 f4       	brne	.+4      	; 0x2dd6 <vfprintf+0xf2>
    2dd2:	20 68       	ori	r18, 0x80	; 128
    2dd4:	02 c0       	rjmp	.+4      	; 0x2dda <vfprintf+0xf6>
    2dd6:	88 36       	cpi	r24, 0x68	; 104
    2dd8:	41 f4       	brne	.+16     	; 0x2dea <vfprintf+0x106>
    2dda:	f4 01       	movw	r30, r8
    2ddc:	93 fd       	sbrc	r25, 3
    2dde:	85 91       	lpm	r24, Z+
    2de0:	93 ff       	sbrs	r25, 3
    2de2:	81 91       	ld	r24, Z+
    2de4:	4f 01       	movw	r8, r30
    2de6:	81 11       	cpse	r24, r1
    2de8:	c1 cf       	rjmp	.-126    	; 0x2d6c <vfprintf+0x88>
    2dea:	9b eb       	ldi	r25, 0xBB	; 187
    2dec:	98 0f       	add	r25, r24
    2dee:	93 30       	cpi	r25, 0x03	; 3
    2df0:	18 f4       	brcc	.+6      	; 0x2df8 <vfprintf+0x114>
    2df2:	20 61       	ori	r18, 0x10	; 16
    2df4:	80 5e       	subi	r24, 0xE0	; 224
    2df6:	06 c0       	rjmp	.+12     	; 0x2e04 <vfprintf+0x120>
    2df8:	9b e9       	ldi	r25, 0x9B	; 155
    2dfa:	98 0f       	add	r25, r24
    2dfc:	93 30       	cpi	r25, 0x03	; 3
    2dfe:	08 f0       	brcs	.+2      	; 0x2e02 <vfprintf+0x11e>
    2e00:	64 c1       	rjmp	.+712    	; 0x30ca <vfprintf+0x3e6>
    2e02:	2f 7e       	andi	r18, 0xEF	; 239
    2e04:	26 ff       	sbrs	r18, 6
    2e06:	16 e0       	ldi	r17, 0x06	; 6
    2e08:	2f 73       	andi	r18, 0x3F	; 63
    2e0a:	32 2e       	mov	r3, r18
    2e0c:	85 36       	cpi	r24, 0x65	; 101
    2e0e:	19 f4       	brne	.+6      	; 0x2e16 <vfprintf+0x132>
    2e10:	20 64       	ori	r18, 0x40	; 64
    2e12:	32 2e       	mov	r3, r18
    2e14:	08 c0       	rjmp	.+16     	; 0x2e26 <vfprintf+0x142>
    2e16:	86 36       	cpi	r24, 0x66	; 102
    2e18:	21 f4       	brne	.+8      	; 0x2e22 <vfprintf+0x13e>
    2e1a:	f2 2f       	mov	r31, r18
    2e1c:	f0 68       	ori	r31, 0x80	; 128
    2e1e:	3f 2e       	mov	r3, r31
    2e20:	02 c0       	rjmp	.+4      	; 0x2e26 <vfprintf+0x142>
    2e22:	11 11       	cpse	r17, r1
    2e24:	11 50       	subi	r17, 0x01	; 1
    2e26:	37 fe       	sbrs	r3, 7
    2e28:	07 c0       	rjmp	.+14     	; 0x2e38 <vfprintf+0x154>
    2e2a:	1c 33       	cpi	r17, 0x3C	; 60
    2e2c:	50 f4       	brcc	.+20     	; 0x2e42 <vfprintf+0x15e>
    2e2e:	ee 24       	eor	r14, r14
    2e30:	e3 94       	inc	r14
    2e32:	e1 0e       	add	r14, r17
    2e34:	27 e0       	ldi	r18, 0x07	; 7
    2e36:	0b c0       	rjmp	.+22     	; 0x2e4e <vfprintf+0x16a>
    2e38:	18 30       	cpi	r17, 0x08	; 8
    2e3a:	38 f0       	brcs	.+14     	; 0x2e4a <vfprintf+0x166>
    2e3c:	27 e0       	ldi	r18, 0x07	; 7
    2e3e:	17 e0       	ldi	r17, 0x07	; 7
    2e40:	05 c0       	rjmp	.+10     	; 0x2e4c <vfprintf+0x168>
    2e42:	27 e0       	ldi	r18, 0x07	; 7
    2e44:	4c e3       	ldi	r20, 0x3C	; 60
    2e46:	e4 2e       	mov	r14, r20
    2e48:	02 c0       	rjmp	.+4      	; 0x2e4e <vfprintf+0x16a>
    2e4a:	21 2f       	mov	r18, r17
    2e4c:	e1 2c       	mov	r14, r1
    2e4e:	52 01       	movw	r10, r4
    2e50:	44 e0       	ldi	r20, 0x04	; 4
    2e52:	a4 0e       	add	r10, r20
    2e54:	b1 1c       	adc	r11, r1
    2e56:	f2 01       	movw	r30, r4
    2e58:	60 81       	ld	r22, Z
    2e5a:	71 81       	ldd	r23, Z+1	; 0x01
    2e5c:	82 81       	ldd	r24, Z+2	; 0x02
    2e5e:	93 81       	ldd	r25, Z+3	; 0x03
    2e60:	0e 2d       	mov	r16, r14
    2e62:	a3 01       	movw	r20, r6
    2e64:	51 d4       	rcall	.+2210   	; 0x3708 <__ftoa_engine>
    2e66:	2c 01       	movw	r4, r24
    2e68:	09 81       	ldd	r16, Y+1	; 0x01
    2e6a:	00 ff       	sbrs	r16, 0
    2e6c:	02 c0       	rjmp	.+4      	; 0x2e72 <vfprintf+0x18e>
    2e6e:	03 ff       	sbrs	r16, 3
    2e70:	07 c0       	rjmp	.+14     	; 0x2e80 <vfprintf+0x19c>
    2e72:	31 fc       	sbrc	r3, 1
    2e74:	08 c0       	rjmp	.+16     	; 0x2e86 <vfprintf+0x1a2>
    2e76:	32 fe       	sbrs	r3, 2
    2e78:	09 c0       	rjmp	.+18     	; 0x2e8c <vfprintf+0x1a8>
    2e7a:	30 e2       	ldi	r19, 0x20	; 32
    2e7c:	23 2e       	mov	r2, r19
    2e7e:	07 c0       	rjmp	.+14     	; 0x2e8e <vfprintf+0x1aa>
    2e80:	2d e2       	ldi	r18, 0x2D	; 45
    2e82:	22 2e       	mov	r2, r18
    2e84:	04 c0       	rjmp	.+8      	; 0x2e8e <vfprintf+0x1aa>
    2e86:	9b e2       	ldi	r25, 0x2B	; 43
    2e88:	29 2e       	mov	r2, r25
    2e8a:	01 c0       	rjmp	.+2      	; 0x2e8e <vfprintf+0x1aa>
    2e8c:	21 2c       	mov	r2, r1
    2e8e:	80 2f       	mov	r24, r16
    2e90:	8c 70       	andi	r24, 0x0C	; 12
    2e92:	19 f0       	breq	.+6      	; 0x2e9a <vfprintf+0x1b6>
    2e94:	21 10       	cpse	r2, r1
    2e96:	51 c2       	rjmp	.+1186   	; 0x333a <vfprintf+0x656>
    2e98:	8d c2       	rjmp	.+1306   	; 0x33b4 <vfprintf+0x6d0>
    2e9a:	37 fe       	sbrs	r3, 7
    2e9c:	0f c0       	rjmp	.+30     	; 0x2ebc <vfprintf+0x1d8>
    2e9e:	e4 0c       	add	r14, r4
    2ea0:	04 ff       	sbrs	r16, 4
    2ea2:	04 c0       	rjmp	.+8      	; 0x2eac <vfprintf+0x1c8>
    2ea4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea6:	81 33       	cpi	r24, 0x31	; 49
    2ea8:	09 f4       	brne	.+2      	; 0x2eac <vfprintf+0x1c8>
    2eaa:	ea 94       	dec	r14
    2eac:	1e 14       	cp	r1, r14
    2eae:	74 f5       	brge	.+92     	; 0x2f0c <vfprintf+0x228>
    2eb0:	f8 e0       	ldi	r31, 0x08	; 8
    2eb2:	fe 15       	cp	r31, r14
    2eb4:	78 f5       	brcc	.+94     	; 0x2f14 <vfprintf+0x230>
    2eb6:	88 e0       	ldi	r24, 0x08	; 8
    2eb8:	e8 2e       	mov	r14, r24
    2eba:	2c c0       	rjmp	.+88     	; 0x2f14 <vfprintf+0x230>
    2ebc:	36 fc       	sbrc	r3, 6
    2ebe:	2a c0       	rjmp	.+84     	; 0x2f14 <vfprintf+0x230>
    2ec0:	81 2f       	mov	r24, r17
    2ec2:	90 e0       	ldi	r25, 0x00	; 0
    2ec4:	84 15       	cp	r24, r4
    2ec6:	95 05       	cpc	r25, r5
    2ec8:	9c f0       	brlt	.+38     	; 0x2ef0 <vfprintf+0x20c>
    2eca:	2c ef       	ldi	r18, 0xFC	; 252
    2ecc:	42 16       	cp	r4, r18
    2ece:	2f ef       	ldi	r18, 0xFF	; 255
    2ed0:	52 06       	cpc	r5, r18
    2ed2:	74 f0       	brlt	.+28     	; 0x2ef0 <vfprintf+0x20c>
    2ed4:	43 2d       	mov	r20, r3
    2ed6:	40 68       	ori	r20, 0x80	; 128
    2ed8:	34 2e       	mov	r3, r20
    2eda:	0a c0       	rjmp	.+20     	; 0x2ef0 <vfprintf+0x20c>
    2edc:	e2 e0       	ldi	r30, 0x02	; 2
    2ede:	f0 e0       	ldi	r31, 0x00	; 0
    2ee0:	ec 0f       	add	r30, r28
    2ee2:	fd 1f       	adc	r31, r29
    2ee4:	e1 0f       	add	r30, r17
    2ee6:	f1 1d       	adc	r31, r1
    2ee8:	80 81       	ld	r24, Z
    2eea:	80 33       	cpi	r24, 0x30	; 48
    2eec:	19 f4       	brne	.+6      	; 0x2ef4 <vfprintf+0x210>
    2eee:	11 50       	subi	r17, 0x01	; 1
    2ef0:	11 11       	cpse	r17, r1
    2ef2:	f4 cf       	rjmp	.-24     	; 0x2edc <vfprintf+0x1f8>
    2ef4:	37 fe       	sbrs	r3, 7
    2ef6:	0e c0       	rjmp	.+28     	; 0x2f14 <vfprintf+0x230>
    2ef8:	ee 24       	eor	r14, r14
    2efa:	e3 94       	inc	r14
    2efc:	e1 0e       	add	r14, r17
    2efe:	81 2f       	mov	r24, r17
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	48 16       	cp	r4, r24
    2f04:	59 06       	cpc	r5, r25
    2f06:	2c f4       	brge	.+10     	; 0x2f12 <vfprintf+0x22e>
    2f08:	14 19       	sub	r17, r4
    2f0a:	04 c0       	rjmp	.+8      	; 0x2f14 <vfprintf+0x230>
    2f0c:	ee 24       	eor	r14, r14
    2f0e:	e3 94       	inc	r14
    2f10:	01 c0       	rjmp	.+2      	; 0x2f14 <vfprintf+0x230>
    2f12:	10 e0       	ldi	r17, 0x00	; 0
    2f14:	37 fe       	sbrs	r3, 7
    2f16:	06 c0       	rjmp	.+12     	; 0x2f24 <vfprintf+0x240>
    2f18:	14 14       	cp	r1, r4
    2f1a:	15 04       	cpc	r1, r5
    2f1c:	34 f4       	brge	.+12     	; 0x2f2a <vfprintf+0x246>
    2f1e:	c2 01       	movw	r24, r4
    2f20:	01 96       	adiw	r24, 0x01	; 1
    2f22:	05 c0       	rjmp	.+10     	; 0x2f2e <vfprintf+0x24a>
    2f24:	85 e0       	ldi	r24, 0x05	; 5
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	02 c0       	rjmp	.+4      	; 0x2f2e <vfprintf+0x24a>
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	21 10       	cpse	r2, r1
    2f30:	01 96       	adiw	r24, 0x01	; 1
    2f32:	11 23       	and	r17, r17
    2f34:	31 f0       	breq	.+12     	; 0x2f42 <vfprintf+0x25e>
    2f36:	21 2f       	mov	r18, r17
    2f38:	30 e0       	ldi	r19, 0x00	; 0
    2f3a:	2f 5f       	subi	r18, 0xFF	; 255
    2f3c:	3f 4f       	sbci	r19, 0xFF	; 255
    2f3e:	82 0f       	add	r24, r18
    2f40:	93 1f       	adc	r25, r19
    2f42:	2f 2d       	mov	r18, r15
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	82 17       	cp	r24, r18
    2f48:	93 07       	cpc	r25, r19
    2f4a:	14 f4       	brge	.+4      	; 0x2f50 <vfprintf+0x26c>
    2f4c:	f8 1a       	sub	r15, r24
    2f4e:	01 c0       	rjmp	.+2      	; 0x2f52 <vfprintf+0x26e>
    2f50:	f1 2c       	mov	r15, r1
    2f52:	83 2d       	mov	r24, r3
    2f54:	89 70       	andi	r24, 0x09	; 9
    2f56:	41 f4       	brne	.+16     	; 0x2f68 <vfprintf+0x284>
    2f58:	ff 20       	and	r15, r15
    2f5a:	31 f0       	breq	.+12     	; 0x2f68 <vfprintf+0x284>
    2f5c:	b6 01       	movw	r22, r12
    2f5e:	80 e2       	ldi	r24, 0x20	; 32
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	c0 d4       	rcall	.+2432   	; 0x38e4 <fputc>
    2f64:	fa 94       	dec	r15
    2f66:	f8 cf       	rjmp	.-16     	; 0x2f58 <vfprintf+0x274>
    2f68:	22 20       	and	r2, r2
    2f6a:	21 f0       	breq	.+8      	; 0x2f74 <vfprintf+0x290>
    2f6c:	b6 01       	movw	r22, r12
    2f6e:	82 2d       	mov	r24, r2
    2f70:	90 e0       	ldi	r25, 0x00	; 0
    2f72:	b8 d4       	rcall	.+2416   	; 0x38e4 <fputc>
    2f74:	33 fc       	sbrc	r3, 3
    2f76:	08 c0       	rjmp	.+16     	; 0x2f88 <vfprintf+0x2a4>
    2f78:	ff 20       	and	r15, r15
    2f7a:	31 f0       	breq	.+12     	; 0x2f88 <vfprintf+0x2a4>
    2f7c:	b6 01       	movw	r22, r12
    2f7e:	80 e3       	ldi	r24, 0x30	; 48
    2f80:	90 e0       	ldi	r25, 0x00	; 0
    2f82:	b0 d4       	rcall	.+2400   	; 0x38e4 <fputc>
    2f84:	fa 94       	dec	r15
    2f86:	f8 cf       	rjmp	.-16     	; 0x2f78 <vfprintf+0x294>
    2f88:	37 fe       	sbrs	r3, 7
    2f8a:	58 c0       	rjmp	.+176    	; 0x303c <vfprintf+0x358>
    2f8c:	94 2d       	mov	r25, r4
    2f8e:	85 2d       	mov	r24, r5
    2f90:	57 fe       	sbrs	r5, 7
    2f92:	02 c0       	rjmp	.+4      	; 0x2f98 <vfprintf+0x2b4>
    2f94:	90 e0       	ldi	r25, 0x00	; 0
    2f96:	80 e0       	ldi	r24, 0x00	; 0
    2f98:	29 2e       	mov	r2, r25
    2f9a:	38 2e       	mov	r3, r24
    2f9c:	20 e0       	ldi	r18, 0x00	; 0
    2f9e:	30 e0       	ldi	r19, 0x00	; 0
    2fa0:	a2 01       	movw	r20, r4
    2fa2:	4e 19       	sub	r20, r14
    2fa4:	51 09       	sbc	r21, r1
    2fa6:	5d 87       	std	Y+13, r21	; 0x0d
    2fa8:	4c 87       	std	Y+12, r20	; 0x0c
    2faa:	a2 01       	movw	r20, r4
    2fac:	42 19       	sub	r20, r2
    2fae:	53 09       	sbc	r21, r3
    2fb0:	5f 87       	std	Y+15, r21	; 0x0f
    2fb2:	4e 87       	std	Y+14, r20	; 0x0e
    2fb4:	61 2f       	mov	r22, r17
    2fb6:	70 e0       	ldi	r23, 0x00	; 0
    2fb8:	44 27       	eor	r20, r20
    2fba:	55 27       	eor	r21, r21
    2fbc:	46 1b       	sub	r20, r22
    2fbe:	57 0b       	sbc	r21, r23
    2fc0:	59 8b       	std	Y+17, r21	; 0x11
    2fc2:	48 8b       	std	Y+16, r20	; 0x10
    2fc4:	5f ef       	ldi	r21, 0xFF	; 255
    2fc6:	25 16       	cp	r2, r21
    2fc8:	35 06       	cpc	r3, r21
    2fca:	41 f4       	brne	.+16     	; 0x2fdc <vfprintf+0x2f8>
    2fcc:	b6 01       	movw	r22, r12
    2fce:	8e e2       	ldi	r24, 0x2E	; 46
    2fd0:	90 e0       	ldi	r25, 0x00	; 0
    2fd2:	2a 8b       	std	Y+18, r18	; 0x12
    2fd4:	3b 8b       	std	Y+19, r19	; 0x13
    2fd6:	86 d4       	rcall	.+2316   	; 0x38e4 <fputc>
    2fd8:	3b 89       	ldd	r19, Y+19	; 0x13
    2fda:	2a 89       	ldd	r18, Y+18	; 0x12
    2fdc:	42 14       	cp	r4, r2
    2fde:	53 04       	cpc	r5, r3
    2fe0:	6c f0       	brlt	.+26     	; 0x2ffc <vfprintf+0x318>
    2fe2:	4c 85       	ldd	r20, Y+12	; 0x0c
    2fe4:	5d 85       	ldd	r21, Y+13	; 0x0d
    2fe6:	42 15       	cp	r20, r2
    2fe8:	53 05       	cpc	r21, r3
    2fea:	44 f4       	brge	.+16     	; 0x2ffc <vfprintf+0x318>
    2fec:	ee 85       	ldd	r30, Y+14	; 0x0e
    2fee:	ff 85       	ldd	r31, Y+15	; 0x0f
    2ff0:	e2 0f       	add	r30, r18
    2ff2:	f3 1f       	adc	r31, r19
    2ff4:	e6 0d       	add	r30, r6
    2ff6:	f7 1d       	adc	r31, r7
    2ff8:	81 81       	ldd	r24, Z+1	; 0x01
    2ffa:	01 c0       	rjmp	.+2      	; 0x2ffe <vfprintf+0x31a>
    2ffc:	80 e3       	ldi	r24, 0x30	; 48
    2ffe:	51 e0       	ldi	r21, 0x01	; 1
    3000:	25 1a       	sub	r2, r21
    3002:	31 08       	sbc	r3, r1
    3004:	2f 5f       	subi	r18, 0xFF	; 255
    3006:	3f 4f       	sbci	r19, 0xFF	; 255
    3008:	48 89       	ldd	r20, Y+16	; 0x10
    300a:	59 89       	ldd	r21, Y+17	; 0x11
    300c:	24 16       	cp	r2, r20
    300e:	35 06       	cpc	r3, r21
    3010:	44 f0       	brlt	.+16     	; 0x3022 <vfprintf+0x33e>
    3012:	b6 01       	movw	r22, r12
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	2a 8b       	std	Y+18, r18	; 0x12
    3018:	3b 8b       	std	Y+19, r19	; 0x13
    301a:	64 d4       	rcall	.+2248   	; 0x38e4 <fputc>
    301c:	2a 89       	ldd	r18, Y+18	; 0x12
    301e:	3b 89       	ldd	r19, Y+19	; 0x13
    3020:	d1 cf       	rjmp	.-94     	; 0x2fc4 <vfprintf+0x2e0>
    3022:	24 14       	cp	r2, r4
    3024:	35 04       	cpc	r3, r5
    3026:	39 f4       	brne	.+14     	; 0x3036 <vfprintf+0x352>
    3028:	9a 81       	ldd	r25, Y+2	; 0x02
    302a:	96 33       	cpi	r25, 0x36	; 54
    302c:	18 f4       	brcc	.+6      	; 0x3034 <vfprintf+0x350>
    302e:	95 33       	cpi	r25, 0x35	; 53
    3030:	11 f4       	brne	.+4      	; 0x3036 <vfprintf+0x352>
    3032:	04 ff       	sbrs	r16, 4
    3034:	81 e3       	ldi	r24, 0x31	; 49
    3036:	b6 01       	movw	r22, r12
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	45 c0       	rjmp	.+138    	; 0x30c6 <vfprintf+0x3e2>
    303c:	8a 81       	ldd	r24, Y+2	; 0x02
    303e:	81 33       	cpi	r24, 0x31	; 49
    3040:	09 f0       	breq	.+2      	; 0x3044 <vfprintf+0x360>
    3042:	0f 7e       	andi	r16, 0xEF	; 239
    3044:	b6 01       	movw	r22, r12
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	4d d4       	rcall	.+2202   	; 0x38e4 <fputc>
    304a:	11 11       	cpse	r17, r1
    304c:	05 c0       	rjmp	.+10     	; 0x3058 <vfprintf+0x374>
    304e:	34 fc       	sbrc	r3, 4
    3050:	16 c0       	rjmp	.+44     	; 0x307e <vfprintf+0x39a>
    3052:	85 e6       	ldi	r24, 0x65	; 101
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	15 c0       	rjmp	.+42     	; 0x3082 <vfprintf+0x39e>
    3058:	b6 01       	movw	r22, r12
    305a:	8e e2       	ldi	r24, 0x2E	; 46
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	42 d4       	rcall	.+2180   	; 0x38e4 <fputc>
    3060:	82 e0       	ldi	r24, 0x02	; 2
    3062:	ee 24       	eor	r14, r14
    3064:	e3 94       	inc	r14
    3066:	e8 0e       	add	r14, r24
    3068:	f3 01       	movw	r30, r6
    306a:	e8 0f       	add	r30, r24
    306c:	f1 1d       	adc	r31, r1
    306e:	80 81       	ld	r24, Z
    3070:	b6 01       	movw	r22, r12
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	37 d4       	rcall	.+2158   	; 0x38e4 <fputc>
    3076:	11 50       	subi	r17, 0x01	; 1
    3078:	8e 2d       	mov	r24, r14
    307a:	99 f7       	brne	.-26     	; 0x3062 <vfprintf+0x37e>
    307c:	e8 cf       	rjmp	.-48     	; 0x304e <vfprintf+0x36a>
    307e:	85 e4       	ldi	r24, 0x45	; 69
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	b6 01       	movw	r22, r12
    3084:	2f d4       	rcall	.+2142   	; 0x38e4 <fputc>
    3086:	57 fc       	sbrc	r5, 7
    3088:	05 c0       	rjmp	.+10     	; 0x3094 <vfprintf+0x3b0>
    308a:	41 14       	cp	r4, r1
    308c:	51 04       	cpc	r5, r1
    308e:	39 f4       	brne	.+14     	; 0x309e <vfprintf+0x3ba>
    3090:	04 ff       	sbrs	r16, 4
    3092:	05 c0       	rjmp	.+10     	; 0x309e <vfprintf+0x3ba>
    3094:	51 94       	neg	r5
    3096:	41 94       	neg	r4
    3098:	51 08       	sbc	r5, r1
    309a:	8d e2       	ldi	r24, 0x2D	; 45
    309c:	01 c0       	rjmp	.+2      	; 0x30a0 <vfprintf+0x3bc>
    309e:	8b e2       	ldi	r24, 0x2B	; 43
    30a0:	b6 01       	movw	r22, r12
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	1f d4       	rcall	.+2110   	; 0x38e4 <fputc>
    30a6:	80 e3       	ldi	r24, 0x30	; 48
    30a8:	9a e0       	ldi	r25, 0x0A	; 10
    30aa:	49 16       	cp	r4, r25
    30ac:	51 04       	cpc	r5, r1
    30ae:	2c f0       	brlt	.+10     	; 0x30ba <vfprintf+0x3d6>
    30b0:	8f 5f       	subi	r24, 0xFF	; 255
    30b2:	5a e0       	ldi	r21, 0x0A	; 10
    30b4:	45 1a       	sub	r4, r21
    30b6:	51 08       	sbc	r5, r1
    30b8:	f7 cf       	rjmp	.-18     	; 0x30a8 <vfprintf+0x3c4>
    30ba:	b6 01       	movw	r22, r12
    30bc:	90 e0       	ldi	r25, 0x00	; 0
    30be:	12 d4       	rcall	.+2084   	; 0x38e4 <fputc>
    30c0:	b6 01       	movw	r22, r12
    30c2:	c2 01       	movw	r24, r4
    30c4:	c0 96       	adiw	r24, 0x30	; 48
    30c6:	0e d4       	rcall	.+2076   	; 0x38e4 <fputc>
    30c8:	4c c1       	rjmp	.+664    	; 0x3362 <vfprintf+0x67e>
    30ca:	83 36       	cpi	r24, 0x63	; 99
    30cc:	31 f0       	breq	.+12     	; 0x30da <vfprintf+0x3f6>
    30ce:	83 37       	cpi	r24, 0x73	; 115
    30d0:	79 f0       	breq	.+30     	; 0x30f0 <vfprintf+0x40c>
    30d2:	83 35       	cpi	r24, 0x53	; 83
    30d4:	09 f0       	breq	.+2      	; 0x30d8 <vfprintf+0x3f4>
    30d6:	54 c0       	rjmp	.+168    	; 0x3180 <vfprintf+0x49c>
    30d8:	20 c0       	rjmp	.+64     	; 0x311a <vfprintf+0x436>
    30da:	52 01       	movw	r10, r4
    30dc:	e2 e0       	ldi	r30, 0x02	; 2
    30de:	ae 0e       	add	r10, r30
    30e0:	b1 1c       	adc	r11, r1
    30e2:	f2 01       	movw	r30, r4
    30e4:	80 81       	ld	r24, Z
    30e6:	89 83       	std	Y+1, r24	; 0x01
    30e8:	01 e0       	ldi	r16, 0x01	; 1
    30ea:	10 e0       	ldi	r17, 0x00	; 0
    30ec:	23 01       	movw	r4, r6
    30ee:	13 c0       	rjmp	.+38     	; 0x3116 <vfprintf+0x432>
    30f0:	52 01       	movw	r10, r4
    30f2:	f2 e0       	ldi	r31, 0x02	; 2
    30f4:	af 0e       	add	r10, r31
    30f6:	b1 1c       	adc	r11, r1
    30f8:	f2 01       	movw	r30, r4
    30fa:	40 80       	ld	r4, Z
    30fc:	51 80       	ldd	r5, Z+1	; 0x01
    30fe:	26 ff       	sbrs	r18, 6
    3100:	03 c0       	rjmp	.+6      	; 0x3108 <vfprintf+0x424>
    3102:	61 2f       	mov	r22, r17
    3104:	70 e0       	ldi	r23, 0x00	; 0
    3106:	02 c0       	rjmp	.+4      	; 0x310c <vfprintf+0x428>
    3108:	6f ef       	ldi	r22, 0xFF	; 255
    310a:	7f ef       	ldi	r23, 0xFF	; 255
    310c:	c2 01       	movw	r24, r4
    310e:	2a 8b       	std	Y+18, r18	; 0x12
    3110:	de d3       	rcall	.+1980   	; 0x38ce <strnlen>
    3112:	8c 01       	movw	r16, r24
    3114:	2a 89       	ldd	r18, Y+18	; 0x12
    3116:	2f 77       	andi	r18, 0x7F	; 127
    3118:	14 c0       	rjmp	.+40     	; 0x3142 <vfprintf+0x45e>
    311a:	52 01       	movw	r10, r4
    311c:	f2 e0       	ldi	r31, 0x02	; 2
    311e:	af 0e       	add	r10, r31
    3120:	b1 1c       	adc	r11, r1
    3122:	f2 01       	movw	r30, r4
    3124:	40 80       	ld	r4, Z
    3126:	51 80       	ldd	r5, Z+1	; 0x01
    3128:	26 ff       	sbrs	r18, 6
    312a:	03 c0       	rjmp	.+6      	; 0x3132 <vfprintf+0x44e>
    312c:	61 2f       	mov	r22, r17
    312e:	70 e0       	ldi	r23, 0x00	; 0
    3130:	02 c0       	rjmp	.+4      	; 0x3136 <vfprintf+0x452>
    3132:	6f ef       	ldi	r22, 0xFF	; 255
    3134:	7f ef       	ldi	r23, 0xFF	; 255
    3136:	c2 01       	movw	r24, r4
    3138:	2a 8b       	std	Y+18, r18	; 0x12
    313a:	be d3       	rcall	.+1916   	; 0x38b8 <strnlen_P>
    313c:	8c 01       	movw	r16, r24
    313e:	2a 89       	ldd	r18, Y+18	; 0x12
    3140:	20 68       	ori	r18, 0x80	; 128
    3142:	32 2e       	mov	r3, r18
    3144:	23 fd       	sbrc	r18, 3
    3146:	18 c0       	rjmp	.+48     	; 0x3178 <vfprintf+0x494>
    3148:	8f 2d       	mov	r24, r15
    314a:	90 e0       	ldi	r25, 0x00	; 0
    314c:	08 17       	cp	r16, r24
    314e:	19 07       	cpc	r17, r25
    3150:	98 f4       	brcc	.+38     	; 0x3178 <vfprintf+0x494>
    3152:	b6 01       	movw	r22, r12
    3154:	80 e2       	ldi	r24, 0x20	; 32
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	c5 d3       	rcall	.+1930   	; 0x38e4 <fputc>
    315a:	fa 94       	dec	r15
    315c:	f5 cf       	rjmp	.-22     	; 0x3148 <vfprintf+0x464>
    315e:	f2 01       	movw	r30, r4
    3160:	37 fc       	sbrc	r3, 7
    3162:	85 91       	lpm	r24, Z+
    3164:	37 fe       	sbrs	r3, 7
    3166:	81 91       	ld	r24, Z+
    3168:	2f 01       	movw	r4, r30
    316a:	b6 01       	movw	r22, r12
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	ba d3       	rcall	.+1908   	; 0x38e4 <fputc>
    3170:	f1 10       	cpse	r15, r1
    3172:	fa 94       	dec	r15
    3174:	01 50       	subi	r16, 0x01	; 1
    3176:	11 09       	sbc	r17, r1
    3178:	01 15       	cp	r16, r1
    317a:	11 05       	cpc	r17, r1
    317c:	81 f7       	brne	.-32     	; 0x315e <vfprintf+0x47a>
    317e:	f1 c0       	rjmp	.+482    	; 0x3362 <vfprintf+0x67e>
    3180:	84 36       	cpi	r24, 0x64	; 100
    3182:	11 f0       	breq	.+4      	; 0x3188 <vfprintf+0x4a4>
    3184:	89 36       	cpi	r24, 0x69	; 105
    3186:	51 f5       	brne	.+84     	; 0x31dc <vfprintf+0x4f8>
    3188:	52 01       	movw	r10, r4
    318a:	27 ff       	sbrs	r18, 7
    318c:	09 c0       	rjmp	.+18     	; 0x31a0 <vfprintf+0x4bc>
    318e:	f4 e0       	ldi	r31, 0x04	; 4
    3190:	af 0e       	add	r10, r31
    3192:	b1 1c       	adc	r11, r1
    3194:	f2 01       	movw	r30, r4
    3196:	60 81       	ld	r22, Z
    3198:	71 81       	ldd	r23, Z+1	; 0x01
    319a:	82 81       	ldd	r24, Z+2	; 0x02
    319c:	93 81       	ldd	r25, Z+3	; 0x03
    319e:	0a c0       	rjmp	.+20     	; 0x31b4 <vfprintf+0x4d0>
    31a0:	f2 e0       	ldi	r31, 0x02	; 2
    31a2:	af 0e       	add	r10, r31
    31a4:	b1 1c       	adc	r11, r1
    31a6:	f2 01       	movw	r30, r4
    31a8:	60 81       	ld	r22, Z
    31aa:	71 81       	ldd	r23, Z+1	; 0x01
    31ac:	07 2e       	mov	r0, r23
    31ae:	00 0c       	add	r0, r0
    31b0:	88 0b       	sbc	r24, r24
    31b2:	99 0b       	sbc	r25, r25
    31b4:	2f 76       	andi	r18, 0x6F	; 111
    31b6:	32 2e       	mov	r3, r18
    31b8:	97 ff       	sbrs	r25, 7
    31ba:	09 c0       	rjmp	.+18     	; 0x31ce <vfprintf+0x4ea>
    31bc:	90 95       	com	r25
    31be:	80 95       	com	r24
    31c0:	70 95       	com	r23
    31c2:	61 95       	neg	r22
    31c4:	7f 4f       	sbci	r23, 0xFF	; 255
    31c6:	8f 4f       	sbci	r24, 0xFF	; 255
    31c8:	9f 4f       	sbci	r25, 0xFF	; 255
    31ca:	20 68       	ori	r18, 0x80	; 128
    31cc:	32 2e       	mov	r3, r18
    31ce:	2a e0       	ldi	r18, 0x0A	; 10
    31d0:	30 e0       	ldi	r19, 0x00	; 0
    31d2:	a3 01       	movw	r20, r6
    31d4:	07 d4       	rcall	.+2062   	; 0x39e4 <__ultoa_invert>
    31d6:	e8 2e       	mov	r14, r24
    31d8:	e6 18       	sub	r14, r6
    31da:	3e c0       	rjmp	.+124    	; 0x3258 <vfprintf+0x574>
    31dc:	02 2f       	mov	r16, r18
    31de:	85 37       	cpi	r24, 0x75	; 117
    31e0:	21 f4       	brne	.+8      	; 0x31ea <vfprintf+0x506>
    31e2:	0f 7e       	andi	r16, 0xEF	; 239
    31e4:	2a e0       	ldi	r18, 0x0A	; 10
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	1d c0       	rjmp	.+58     	; 0x3224 <vfprintf+0x540>
    31ea:	09 7f       	andi	r16, 0xF9	; 249
    31ec:	8f 36       	cpi	r24, 0x6F	; 111
    31ee:	91 f0       	breq	.+36     	; 0x3214 <vfprintf+0x530>
    31f0:	18 f4       	brcc	.+6      	; 0x31f8 <vfprintf+0x514>
    31f2:	88 35       	cpi	r24, 0x58	; 88
    31f4:	59 f0       	breq	.+22     	; 0x320c <vfprintf+0x528>
    31f6:	be c0       	rjmp	.+380    	; 0x3374 <vfprintf+0x690>
    31f8:	80 37       	cpi	r24, 0x70	; 112
    31fa:	19 f0       	breq	.+6      	; 0x3202 <vfprintf+0x51e>
    31fc:	88 37       	cpi	r24, 0x78	; 120
    31fe:	11 f0       	breq	.+4      	; 0x3204 <vfprintf+0x520>
    3200:	b9 c0       	rjmp	.+370    	; 0x3374 <vfprintf+0x690>
    3202:	00 61       	ori	r16, 0x10	; 16
    3204:	04 ff       	sbrs	r16, 4
    3206:	09 c0       	rjmp	.+18     	; 0x321a <vfprintf+0x536>
    3208:	04 60       	ori	r16, 0x04	; 4
    320a:	07 c0       	rjmp	.+14     	; 0x321a <vfprintf+0x536>
    320c:	24 ff       	sbrs	r18, 4
    320e:	08 c0       	rjmp	.+16     	; 0x3220 <vfprintf+0x53c>
    3210:	06 60       	ori	r16, 0x06	; 6
    3212:	06 c0       	rjmp	.+12     	; 0x3220 <vfprintf+0x53c>
    3214:	28 e0       	ldi	r18, 0x08	; 8
    3216:	30 e0       	ldi	r19, 0x00	; 0
    3218:	05 c0       	rjmp	.+10     	; 0x3224 <vfprintf+0x540>
    321a:	20 e1       	ldi	r18, 0x10	; 16
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	02 c0       	rjmp	.+4      	; 0x3224 <vfprintf+0x540>
    3220:	20 e1       	ldi	r18, 0x10	; 16
    3222:	32 e0       	ldi	r19, 0x02	; 2
    3224:	52 01       	movw	r10, r4
    3226:	07 ff       	sbrs	r16, 7
    3228:	09 c0       	rjmp	.+18     	; 0x323c <vfprintf+0x558>
    322a:	f4 e0       	ldi	r31, 0x04	; 4
    322c:	af 0e       	add	r10, r31
    322e:	b1 1c       	adc	r11, r1
    3230:	f2 01       	movw	r30, r4
    3232:	60 81       	ld	r22, Z
    3234:	71 81       	ldd	r23, Z+1	; 0x01
    3236:	82 81       	ldd	r24, Z+2	; 0x02
    3238:	93 81       	ldd	r25, Z+3	; 0x03
    323a:	08 c0       	rjmp	.+16     	; 0x324c <vfprintf+0x568>
    323c:	f2 e0       	ldi	r31, 0x02	; 2
    323e:	af 0e       	add	r10, r31
    3240:	b1 1c       	adc	r11, r1
    3242:	f2 01       	movw	r30, r4
    3244:	60 81       	ld	r22, Z
    3246:	71 81       	ldd	r23, Z+1	; 0x01
    3248:	80 e0       	ldi	r24, 0x00	; 0
    324a:	90 e0       	ldi	r25, 0x00	; 0
    324c:	a3 01       	movw	r20, r6
    324e:	ca d3       	rcall	.+1940   	; 0x39e4 <__ultoa_invert>
    3250:	e8 2e       	mov	r14, r24
    3252:	e6 18       	sub	r14, r6
    3254:	0f 77       	andi	r16, 0x7F	; 127
    3256:	30 2e       	mov	r3, r16
    3258:	36 fe       	sbrs	r3, 6
    325a:	0b c0       	rjmp	.+22     	; 0x3272 <vfprintf+0x58e>
    325c:	33 2d       	mov	r19, r3
    325e:	3e 7f       	andi	r19, 0xFE	; 254
    3260:	e1 16       	cp	r14, r17
    3262:	50 f4       	brcc	.+20     	; 0x3278 <vfprintf+0x594>
    3264:	34 fe       	sbrs	r3, 4
    3266:	0a c0       	rjmp	.+20     	; 0x327c <vfprintf+0x598>
    3268:	32 fc       	sbrc	r3, 2
    326a:	08 c0       	rjmp	.+16     	; 0x327c <vfprintf+0x598>
    326c:	33 2d       	mov	r19, r3
    326e:	3e 7e       	andi	r19, 0xEE	; 238
    3270:	05 c0       	rjmp	.+10     	; 0x327c <vfprintf+0x598>
    3272:	0e 2d       	mov	r16, r14
    3274:	33 2d       	mov	r19, r3
    3276:	03 c0       	rjmp	.+6      	; 0x327e <vfprintf+0x59a>
    3278:	0e 2d       	mov	r16, r14
    327a:	01 c0       	rjmp	.+2      	; 0x327e <vfprintf+0x59a>
    327c:	01 2f       	mov	r16, r17
    327e:	34 ff       	sbrs	r19, 4
    3280:	0c c0       	rjmp	.+24     	; 0x329a <vfprintf+0x5b6>
    3282:	fe 01       	movw	r30, r28
    3284:	ee 0d       	add	r30, r14
    3286:	f1 1d       	adc	r31, r1
    3288:	80 81       	ld	r24, Z
    328a:	80 33       	cpi	r24, 0x30	; 48
    328c:	11 f4       	brne	.+4      	; 0x3292 <vfprintf+0x5ae>
    328e:	39 7e       	andi	r19, 0xE9	; 233
    3290:	08 c0       	rjmp	.+16     	; 0x32a2 <vfprintf+0x5be>
    3292:	32 ff       	sbrs	r19, 2
    3294:	05 c0       	rjmp	.+10     	; 0x32a0 <vfprintf+0x5bc>
    3296:	0e 5f       	subi	r16, 0xFE	; 254
    3298:	04 c0       	rjmp	.+8      	; 0x32a2 <vfprintf+0x5be>
    329a:	83 2f       	mov	r24, r19
    329c:	86 78       	andi	r24, 0x86	; 134
    329e:	09 f0       	breq	.+2      	; 0x32a2 <vfprintf+0x5be>
    32a0:	0f 5f       	subi	r16, 0xFF	; 255
    32a2:	33 fd       	sbrc	r19, 3
    32a4:	12 c0       	rjmp	.+36     	; 0x32ca <vfprintf+0x5e6>
    32a6:	30 ff       	sbrs	r19, 0
    32a8:	06 c0       	rjmp	.+12     	; 0x32b6 <vfprintf+0x5d2>
    32aa:	1e 2d       	mov	r17, r14
    32ac:	0f 15       	cp	r16, r15
    32ae:	18 f4       	brcc	.+6      	; 0x32b6 <vfprintf+0x5d2>
    32b0:	1f 0d       	add	r17, r15
    32b2:	10 1b       	sub	r17, r16
    32b4:	0f 2d       	mov	r16, r15
    32b6:	0f 15       	cp	r16, r15
    32b8:	60 f4       	brcc	.+24     	; 0x32d2 <vfprintf+0x5ee>
    32ba:	b6 01       	movw	r22, r12
    32bc:	80 e2       	ldi	r24, 0x20	; 32
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	3b 8b       	std	Y+19, r19	; 0x13
    32c2:	10 d3       	rcall	.+1568   	; 0x38e4 <fputc>
    32c4:	0f 5f       	subi	r16, 0xFF	; 255
    32c6:	3b 89       	ldd	r19, Y+19	; 0x13
    32c8:	f6 cf       	rjmp	.-20     	; 0x32b6 <vfprintf+0x5d2>
    32ca:	0f 15       	cp	r16, r15
    32cc:	10 f4       	brcc	.+4      	; 0x32d2 <vfprintf+0x5ee>
    32ce:	f0 1a       	sub	r15, r16
    32d0:	01 c0       	rjmp	.+2      	; 0x32d4 <vfprintf+0x5f0>
    32d2:	f1 2c       	mov	r15, r1
    32d4:	34 ff       	sbrs	r19, 4
    32d6:	11 c0       	rjmp	.+34     	; 0x32fa <vfprintf+0x616>
    32d8:	b6 01       	movw	r22, r12
    32da:	80 e3       	ldi	r24, 0x30	; 48
    32dc:	90 e0       	ldi	r25, 0x00	; 0
    32de:	3b 8b       	std	Y+19, r19	; 0x13
    32e0:	01 d3       	rcall	.+1538   	; 0x38e4 <fputc>
    32e2:	3b 89       	ldd	r19, Y+19	; 0x13
    32e4:	32 ff       	sbrs	r19, 2
    32e6:	16 c0       	rjmp	.+44     	; 0x3314 <vfprintf+0x630>
    32e8:	31 fd       	sbrc	r19, 1
    32ea:	03 c0       	rjmp	.+6      	; 0x32f2 <vfprintf+0x60e>
    32ec:	88 e7       	ldi	r24, 0x78	; 120
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	02 c0       	rjmp	.+4      	; 0x32f6 <vfprintf+0x612>
    32f2:	88 e5       	ldi	r24, 0x58	; 88
    32f4:	90 e0       	ldi	r25, 0x00	; 0
    32f6:	b6 01       	movw	r22, r12
    32f8:	0c c0       	rjmp	.+24     	; 0x3312 <vfprintf+0x62e>
    32fa:	83 2f       	mov	r24, r19
    32fc:	86 78       	andi	r24, 0x86	; 134
    32fe:	51 f0       	breq	.+20     	; 0x3314 <vfprintf+0x630>
    3300:	31 ff       	sbrs	r19, 1
    3302:	02 c0       	rjmp	.+4      	; 0x3308 <vfprintf+0x624>
    3304:	8b e2       	ldi	r24, 0x2B	; 43
    3306:	01 c0       	rjmp	.+2      	; 0x330a <vfprintf+0x626>
    3308:	80 e2       	ldi	r24, 0x20	; 32
    330a:	37 fd       	sbrc	r19, 7
    330c:	8d e2       	ldi	r24, 0x2D	; 45
    330e:	b6 01       	movw	r22, r12
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	e8 d2       	rcall	.+1488   	; 0x38e4 <fputc>
    3314:	e1 16       	cp	r14, r17
    3316:	30 f4       	brcc	.+12     	; 0x3324 <vfprintf+0x640>
    3318:	b6 01       	movw	r22, r12
    331a:	80 e3       	ldi	r24, 0x30	; 48
    331c:	90 e0       	ldi	r25, 0x00	; 0
    331e:	e2 d2       	rcall	.+1476   	; 0x38e4 <fputc>
    3320:	11 50       	subi	r17, 0x01	; 1
    3322:	f8 cf       	rjmp	.-16     	; 0x3314 <vfprintf+0x630>
    3324:	ea 94       	dec	r14
    3326:	f3 01       	movw	r30, r6
    3328:	ee 0d       	add	r30, r14
    332a:	f1 1d       	adc	r31, r1
    332c:	80 81       	ld	r24, Z
    332e:	b6 01       	movw	r22, r12
    3330:	90 e0       	ldi	r25, 0x00	; 0
    3332:	d8 d2       	rcall	.+1456   	; 0x38e4 <fputc>
    3334:	e1 10       	cpse	r14, r1
    3336:	f6 cf       	rjmp	.-20     	; 0x3324 <vfprintf+0x640>
    3338:	14 c0       	rjmp	.+40     	; 0x3362 <vfprintf+0x67e>
    333a:	f4 e0       	ldi	r31, 0x04	; 4
    333c:	ff 15       	cp	r31, r15
    333e:	48 f5       	brcc	.+82     	; 0x3392 <vfprintf+0x6ae>
    3340:	84 e0       	ldi	r24, 0x04	; 4
    3342:	f8 1a       	sub	r15, r24
    3344:	33 fe       	sbrs	r3, 3
    3346:	1d c0       	rjmp	.+58     	; 0x3382 <vfprintf+0x69e>
    3348:	21 10       	cpse	r2, r1
    334a:	24 c0       	rjmp	.+72     	; 0x3394 <vfprintf+0x6b0>
    334c:	03 ff       	sbrs	r16, 3
    334e:	27 c0       	rjmp	.+78     	; 0x339e <vfprintf+0x6ba>
    3350:	04 e3       	ldi	r16, 0x34	; 52
    3352:	11 e0       	ldi	r17, 0x01	; 1
    3354:	f3 2d       	mov	r31, r3
    3356:	f0 71       	andi	r31, 0x10	; 16
    3358:	3f 2e       	mov	r3, r31
    335a:	f8 01       	movw	r30, r16
    335c:	84 91       	lpm	r24, Z
    335e:	81 11       	cpse	r24, r1
    3360:	21 c0       	rjmp	.+66     	; 0x33a4 <vfprintf+0x6c0>
    3362:	ff 20       	and	r15, r15
    3364:	09 f4       	brne	.+2      	; 0x3368 <vfprintf+0x684>
    3366:	fd cc       	rjmp	.-1542   	; 0x2d62 <vfprintf+0x7e>
    3368:	b6 01       	movw	r22, r12
    336a:	80 e2       	ldi	r24, 0x20	; 32
    336c:	90 e0       	ldi	r25, 0x00	; 0
    336e:	ba d2       	rcall	.+1396   	; 0x38e4 <fputc>
    3370:	fa 94       	dec	r15
    3372:	f7 cf       	rjmp	.-18     	; 0x3362 <vfprintf+0x67e>
    3374:	f6 01       	movw	r30, r12
    3376:	86 81       	ldd	r24, Z+6	; 0x06
    3378:	97 81       	ldd	r25, Z+7	; 0x07
    337a:	23 c0       	rjmp	.+70     	; 0x33c2 <vfprintf+0x6de>
    337c:	8f ef       	ldi	r24, 0xFF	; 255
    337e:	9f ef       	ldi	r25, 0xFF	; 255
    3380:	20 c0       	rjmp	.+64     	; 0x33c2 <vfprintf+0x6de>
    3382:	b6 01       	movw	r22, r12
    3384:	80 e2       	ldi	r24, 0x20	; 32
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	ad d2       	rcall	.+1370   	; 0x38e4 <fputc>
    338a:	fa 94       	dec	r15
    338c:	f1 10       	cpse	r15, r1
    338e:	f9 cf       	rjmp	.-14     	; 0x3382 <vfprintf+0x69e>
    3390:	db cf       	rjmp	.-74     	; 0x3348 <vfprintf+0x664>
    3392:	f1 2c       	mov	r15, r1
    3394:	b6 01       	movw	r22, r12
    3396:	82 2d       	mov	r24, r2
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	a4 d2       	rcall	.+1352   	; 0x38e4 <fputc>
    339c:	d7 cf       	rjmp	.-82     	; 0x334c <vfprintf+0x668>
    339e:	08 e3       	ldi	r16, 0x38	; 56
    33a0:	11 e0       	ldi	r17, 0x01	; 1
    33a2:	d8 cf       	rjmp	.-80     	; 0x3354 <vfprintf+0x670>
    33a4:	31 10       	cpse	r3, r1
    33a6:	80 52       	subi	r24, 0x20	; 32
    33a8:	b6 01       	movw	r22, r12
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	9b d2       	rcall	.+1334   	; 0x38e4 <fputc>
    33ae:	0f 5f       	subi	r16, 0xFF	; 255
    33b0:	1f 4f       	sbci	r17, 0xFF	; 255
    33b2:	d3 cf       	rjmp	.-90     	; 0x335a <vfprintf+0x676>
    33b4:	23 e0       	ldi	r18, 0x03	; 3
    33b6:	2f 15       	cp	r18, r15
    33b8:	10 f4       	brcc	.+4      	; 0x33be <vfprintf+0x6da>
    33ba:	83 e0       	ldi	r24, 0x03	; 3
    33bc:	c2 cf       	rjmp	.-124    	; 0x3342 <vfprintf+0x65e>
    33be:	f1 2c       	mov	r15, r1
    33c0:	c5 cf       	rjmp	.-118    	; 0x334c <vfprintf+0x668>
    33c2:	63 96       	adiw	r28, 0x13	; 19
    33c4:	0f b6       	in	r0, 0x3f	; 63
    33c6:	f8 94       	cli
    33c8:	de bf       	out	0x3e, r29	; 62
    33ca:	0f be       	out	0x3f, r0	; 63
    33cc:	cd bf       	out	0x3d, r28	; 61
    33ce:	df 91       	pop	r29
    33d0:	cf 91       	pop	r28
    33d2:	1f 91       	pop	r17
    33d4:	0f 91       	pop	r16
    33d6:	ff 90       	pop	r15
    33d8:	ef 90       	pop	r14
    33da:	df 90       	pop	r13
    33dc:	cf 90       	pop	r12
    33de:	bf 90       	pop	r11
    33e0:	af 90       	pop	r10
    33e2:	9f 90       	pop	r9
    33e4:	8f 90       	pop	r8
    33e6:	7f 90       	pop	r7
    33e8:	6f 90       	pop	r6
    33ea:	5f 90       	pop	r5
    33ec:	4f 90       	pop	r4
    33ee:	3f 90       	pop	r3
    33f0:	2f 90       	pop	r2
    33f2:	08 95       	ret

000033f4 <__udivmodsi4>:
    33f4:	a1 e2       	ldi	r26, 0x21	; 33
    33f6:	1a 2e       	mov	r1, r26
    33f8:	aa 1b       	sub	r26, r26
    33fa:	bb 1b       	sub	r27, r27
    33fc:	fd 01       	movw	r30, r26
    33fe:	0d c0       	rjmp	.+26     	; 0x341a <__udivmodsi4_ep>

00003400 <__udivmodsi4_loop>:
    3400:	aa 1f       	adc	r26, r26
    3402:	bb 1f       	adc	r27, r27
    3404:	ee 1f       	adc	r30, r30
    3406:	ff 1f       	adc	r31, r31
    3408:	a2 17       	cp	r26, r18
    340a:	b3 07       	cpc	r27, r19
    340c:	e4 07       	cpc	r30, r20
    340e:	f5 07       	cpc	r31, r21
    3410:	20 f0       	brcs	.+8      	; 0x341a <__udivmodsi4_ep>
    3412:	a2 1b       	sub	r26, r18
    3414:	b3 0b       	sbc	r27, r19
    3416:	e4 0b       	sbc	r30, r20
    3418:	f5 0b       	sbc	r31, r21

0000341a <__udivmodsi4_ep>:
    341a:	66 1f       	adc	r22, r22
    341c:	77 1f       	adc	r23, r23
    341e:	88 1f       	adc	r24, r24
    3420:	99 1f       	adc	r25, r25
    3422:	1a 94       	dec	r1
    3424:	69 f7       	brne	.-38     	; 0x3400 <__udivmodsi4_loop>
    3426:	60 95       	com	r22
    3428:	70 95       	com	r23
    342a:	80 95       	com	r24
    342c:	90 95       	com	r25
    342e:	9b 01       	movw	r18, r22
    3430:	ac 01       	movw	r20, r24
    3432:	bd 01       	movw	r22, r26
    3434:	cf 01       	movw	r24, r30
    3436:	08 95       	ret

00003438 <__divmodsi4>:
    3438:	05 2e       	mov	r0, r21
    343a:	97 fb       	bst	r25, 7
    343c:	16 f4       	brtc	.+4      	; 0x3442 <__divmodsi4+0xa>
    343e:	00 94       	com	r0
    3440:	0f d0       	rcall	.+30     	; 0x3460 <__negsi2>
    3442:	57 fd       	sbrc	r21, 7
    3444:	05 d0       	rcall	.+10     	; 0x3450 <__divmodsi4_neg2>
    3446:	d6 df       	rcall	.-84     	; 0x33f4 <__udivmodsi4>
    3448:	07 fc       	sbrc	r0, 7
    344a:	02 d0       	rcall	.+4      	; 0x3450 <__divmodsi4_neg2>
    344c:	46 f4       	brtc	.+16     	; 0x345e <__divmodsi4_exit>
    344e:	08 c0       	rjmp	.+16     	; 0x3460 <__negsi2>

00003450 <__divmodsi4_neg2>:
    3450:	50 95       	com	r21
    3452:	40 95       	com	r20
    3454:	30 95       	com	r19
    3456:	21 95       	neg	r18
    3458:	3f 4f       	sbci	r19, 0xFF	; 255
    345a:	4f 4f       	sbci	r20, 0xFF	; 255
    345c:	5f 4f       	sbci	r21, 0xFF	; 255

0000345e <__divmodsi4_exit>:
    345e:	08 95       	ret

00003460 <__negsi2>:
    3460:	90 95       	com	r25
    3462:	80 95       	com	r24
    3464:	70 95       	com	r23
    3466:	61 95       	neg	r22
    3468:	7f 4f       	sbci	r23, 0xFF	; 255
    346a:	8f 4f       	sbci	r24, 0xFF	; 255
    346c:	9f 4f       	sbci	r25, 0xFF	; 255
    346e:	08 95       	ret

00003470 <__mulshisi3>:
    3470:	b7 ff       	sbrs	r27, 7
    3472:	04 c0       	rjmp	.+8      	; 0x347c <__muluhisi3>

00003474 <__mulohisi3>:
    3474:	03 d0       	rcall	.+6      	; 0x347c <__muluhisi3>
    3476:	82 1b       	sub	r24, r18
    3478:	93 0b       	sbc	r25, r19
    347a:	08 95       	ret

0000347c <__muluhisi3>:
    347c:	09 d0       	rcall	.+18     	; 0x3490 <__umulhisi3>
    347e:	a5 9f       	mul	r26, r21
    3480:	90 0d       	add	r25, r0
    3482:	b4 9f       	mul	r27, r20
    3484:	90 0d       	add	r25, r0
    3486:	a4 9f       	mul	r26, r20
    3488:	80 0d       	add	r24, r0
    348a:	91 1d       	adc	r25, r1
    348c:	11 24       	eor	r1, r1
    348e:	08 95       	ret

00003490 <__umulhisi3>:
    3490:	a2 9f       	mul	r26, r18
    3492:	b0 01       	movw	r22, r0
    3494:	b3 9f       	mul	r27, r19
    3496:	c0 01       	movw	r24, r0
    3498:	a3 9f       	mul	r26, r19
    349a:	70 0d       	add	r23, r0
    349c:	81 1d       	adc	r24, r1
    349e:	11 24       	eor	r1, r1
    34a0:	91 1d       	adc	r25, r1
    34a2:	b2 9f       	mul	r27, r18
    34a4:	70 0d       	add	r23, r0
    34a6:	81 1d       	adc	r24, r1
    34a8:	11 24       	eor	r1, r1
    34aa:	91 1d       	adc	r25, r1
    34ac:	08 95       	ret

000034ae <malloc>:
    34ae:	cf 93       	push	r28
    34b0:	df 93       	push	r29
    34b2:	82 30       	cpi	r24, 0x02	; 2
    34b4:	91 05       	cpc	r25, r1
    34b6:	10 f4       	brcc	.+4      	; 0x34bc <malloc+0xe>
    34b8:	82 e0       	ldi	r24, 0x02	; 2
    34ba:	90 e0       	ldi	r25, 0x00	; 0
    34bc:	e0 91 a0 0b 	lds	r30, 0x0BA0
    34c0:	f0 91 a1 0b 	lds	r31, 0x0BA1
    34c4:	20 e0       	ldi	r18, 0x00	; 0
    34c6:	30 e0       	ldi	r19, 0x00	; 0
    34c8:	c0 e0       	ldi	r28, 0x00	; 0
    34ca:	d0 e0       	ldi	r29, 0x00	; 0
    34cc:	30 97       	sbiw	r30, 0x00	; 0
    34ce:	11 f1       	breq	.+68     	; 0x3514 <malloc+0x66>
    34d0:	40 81       	ld	r20, Z
    34d2:	51 81       	ldd	r21, Z+1	; 0x01
    34d4:	48 17       	cp	r20, r24
    34d6:	59 07       	cpc	r21, r25
    34d8:	c0 f0       	brcs	.+48     	; 0x350a <malloc+0x5c>
    34da:	48 17       	cp	r20, r24
    34dc:	59 07       	cpc	r21, r25
    34de:	61 f4       	brne	.+24     	; 0x34f8 <malloc+0x4a>
    34e0:	82 81       	ldd	r24, Z+2	; 0x02
    34e2:	93 81       	ldd	r25, Z+3	; 0x03
    34e4:	20 97       	sbiw	r28, 0x00	; 0
    34e6:	19 f0       	breq	.+6      	; 0x34ee <malloc+0x40>
    34e8:	9b 83       	std	Y+3, r25	; 0x03
    34ea:	8a 83       	std	Y+2, r24	; 0x02
    34ec:	2b c0       	rjmp	.+86     	; 0x3544 <malloc+0x96>
    34ee:	90 93 a1 0b 	sts	0x0BA1, r25
    34f2:	80 93 a0 0b 	sts	0x0BA0, r24
    34f6:	26 c0       	rjmp	.+76     	; 0x3544 <malloc+0x96>
    34f8:	21 15       	cp	r18, r1
    34fa:	31 05       	cpc	r19, r1
    34fc:	19 f0       	breq	.+6      	; 0x3504 <malloc+0x56>
    34fe:	42 17       	cp	r20, r18
    3500:	53 07       	cpc	r21, r19
    3502:	18 f4       	brcc	.+6      	; 0x350a <malloc+0x5c>
    3504:	9a 01       	movw	r18, r20
    3506:	be 01       	movw	r22, r28
    3508:	df 01       	movw	r26, r30
    350a:	ef 01       	movw	r28, r30
    350c:	02 80       	ldd	r0, Z+2	; 0x02
    350e:	f3 81       	ldd	r31, Z+3	; 0x03
    3510:	e0 2d       	mov	r30, r0
    3512:	dc cf       	rjmp	.-72     	; 0x34cc <malloc+0x1e>
    3514:	21 15       	cp	r18, r1
    3516:	31 05       	cpc	r19, r1
    3518:	09 f1       	breq	.+66     	; 0x355c <malloc+0xae>
    351a:	28 1b       	sub	r18, r24
    351c:	39 0b       	sbc	r19, r25
    351e:	24 30       	cpi	r18, 0x04	; 4
    3520:	31 05       	cpc	r19, r1
    3522:	90 f4       	brcc	.+36     	; 0x3548 <malloc+0x9a>
    3524:	12 96       	adiw	r26, 0x02	; 2
    3526:	8d 91       	ld	r24, X+
    3528:	9c 91       	ld	r25, X
    352a:	13 97       	sbiw	r26, 0x03	; 3
    352c:	61 15       	cp	r22, r1
    352e:	71 05       	cpc	r23, r1
    3530:	21 f0       	breq	.+8      	; 0x353a <malloc+0x8c>
    3532:	fb 01       	movw	r30, r22
    3534:	93 83       	std	Z+3, r25	; 0x03
    3536:	82 83       	std	Z+2, r24	; 0x02
    3538:	04 c0       	rjmp	.+8      	; 0x3542 <malloc+0x94>
    353a:	90 93 a1 0b 	sts	0x0BA1, r25
    353e:	80 93 a0 0b 	sts	0x0BA0, r24
    3542:	fd 01       	movw	r30, r26
    3544:	32 96       	adiw	r30, 0x02	; 2
    3546:	44 c0       	rjmp	.+136    	; 0x35d0 <malloc+0x122>
    3548:	fd 01       	movw	r30, r26
    354a:	e2 0f       	add	r30, r18
    354c:	f3 1f       	adc	r31, r19
    354e:	81 93       	st	Z+, r24
    3550:	91 93       	st	Z+, r25
    3552:	22 50       	subi	r18, 0x02	; 2
    3554:	31 09       	sbc	r19, r1
    3556:	2d 93       	st	X+, r18
    3558:	3c 93       	st	X, r19
    355a:	3a c0       	rjmp	.+116    	; 0x35d0 <malloc+0x122>
    355c:	20 91 9e 0b 	lds	r18, 0x0B9E
    3560:	30 91 9f 0b 	lds	r19, 0x0B9F
    3564:	23 2b       	or	r18, r19
    3566:	41 f4       	brne	.+16     	; 0x3578 <malloc+0xca>
    3568:	20 91 02 02 	lds	r18, 0x0202
    356c:	30 91 03 02 	lds	r19, 0x0203
    3570:	30 93 9f 0b 	sts	0x0B9F, r19
    3574:	20 93 9e 0b 	sts	0x0B9E, r18
    3578:	20 91 00 02 	lds	r18, 0x0200
    357c:	30 91 01 02 	lds	r19, 0x0201
    3580:	21 15       	cp	r18, r1
    3582:	31 05       	cpc	r19, r1
    3584:	41 f4       	brne	.+16     	; 0x3596 <malloc+0xe8>
    3586:	2d b7       	in	r18, 0x3d	; 61
    3588:	3e b7       	in	r19, 0x3e	; 62
    358a:	40 91 04 02 	lds	r20, 0x0204
    358e:	50 91 05 02 	lds	r21, 0x0205
    3592:	24 1b       	sub	r18, r20
    3594:	35 0b       	sbc	r19, r21
    3596:	e0 91 9e 0b 	lds	r30, 0x0B9E
    359a:	f0 91 9f 0b 	lds	r31, 0x0B9F
    359e:	e2 17       	cp	r30, r18
    35a0:	f3 07       	cpc	r31, r19
    35a2:	a0 f4       	brcc	.+40     	; 0x35cc <malloc+0x11e>
    35a4:	2e 1b       	sub	r18, r30
    35a6:	3f 0b       	sbc	r19, r31
    35a8:	28 17       	cp	r18, r24
    35aa:	39 07       	cpc	r19, r25
    35ac:	78 f0       	brcs	.+30     	; 0x35cc <malloc+0x11e>
    35ae:	ac 01       	movw	r20, r24
    35b0:	4e 5f       	subi	r20, 0xFE	; 254
    35b2:	5f 4f       	sbci	r21, 0xFF	; 255
    35b4:	24 17       	cp	r18, r20
    35b6:	35 07       	cpc	r19, r21
    35b8:	48 f0       	brcs	.+18     	; 0x35cc <malloc+0x11e>
    35ba:	4e 0f       	add	r20, r30
    35bc:	5f 1f       	adc	r21, r31
    35be:	50 93 9f 0b 	sts	0x0B9F, r21
    35c2:	40 93 9e 0b 	sts	0x0B9E, r20
    35c6:	81 93       	st	Z+, r24
    35c8:	91 93       	st	Z+, r25
    35ca:	02 c0       	rjmp	.+4      	; 0x35d0 <malloc+0x122>
    35cc:	e0 e0       	ldi	r30, 0x00	; 0
    35ce:	f0 e0       	ldi	r31, 0x00	; 0
    35d0:	cf 01       	movw	r24, r30
    35d2:	df 91       	pop	r29
    35d4:	cf 91       	pop	r28
    35d6:	08 95       	ret

000035d8 <free>:
    35d8:	0f 93       	push	r16
    35da:	1f 93       	push	r17
    35dc:	cf 93       	push	r28
    35de:	df 93       	push	r29
    35e0:	00 97       	sbiw	r24, 0x00	; 0
    35e2:	09 f4       	brne	.+2      	; 0x35e6 <free+0xe>
    35e4:	8c c0       	rjmp	.+280    	; 0x36fe <free+0x126>
    35e6:	fc 01       	movw	r30, r24
    35e8:	32 97       	sbiw	r30, 0x02	; 2
    35ea:	13 82       	std	Z+3, r1	; 0x03
    35ec:	12 82       	std	Z+2, r1	; 0x02
    35ee:	00 91 a0 0b 	lds	r16, 0x0BA0
    35f2:	10 91 a1 0b 	lds	r17, 0x0BA1
    35f6:	01 15       	cp	r16, r1
    35f8:	11 05       	cpc	r17, r1
    35fa:	81 f4       	brne	.+32     	; 0x361c <free+0x44>
    35fc:	20 81       	ld	r18, Z
    35fe:	31 81       	ldd	r19, Z+1	; 0x01
    3600:	82 0f       	add	r24, r18
    3602:	93 1f       	adc	r25, r19
    3604:	20 91 9e 0b 	lds	r18, 0x0B9E
    3608:	30 91 9f 0b 	lds	r19, 0x0B9F
    360c:	28 17       	cp	r18, r24
    360e:	39 07       	cpc	r19, r25
    3610:	79 f5       	brne	.+94     	; 0x3670 <free+0x98>
    3612:	f0 93 9f 0b 	sts	0x0B9F, r31
    3616:	e0 93 9e 0b 	sts	0x0B9E, r30
    361a:	71 c0       	rjmp	.+226    	; 0x36fe <free+0x126>
    361c:	d8 01       	movw	r26, r16
    361e:	40 e0       	ldi	r20, 0x00	; 0
    3620:	50 e0       	ldi	r21, 0x00	; 0
    3622:	ae 17       	cp	r26, r30
    3624:	bf 07       	cpc	r27, r31
    3626:	50 f4       	brcc	.+20     	; 0x363c <free+0x64>
    3628:	12 96       	adiw	r26, 0x02	; 2
    362a:	2d 91       	ld	r18, X+
    362c:	3c 91       	ld	r19, X
    362e:	13 97       	sbiw	r26, 0x03	; 3
    3630:	ad 01       	movw	r20, r26
    3632:	21 15       	cp	r18, r1
    3634:	31 05       	cpc	r19, r1
    3636:	09 f1       	breq	.+66     	; 0x367a <free+0xa2>
    3638:	d9 01       	movw	r26, r18
    363a:	f3 cf       	rjmp	.-26     	; 0x3622 <free+0x4a>
    363c:	9d 01       	movw	r18, r26
    363e:	da 01       	movw	r26, r20
    3640:	33 83       	std	Z+3, r19	; 0x03
    3642:	22 83       	std	Z+2, r18	; 0x02
    3644:	60 81       	ld	r22, Z
    3646:	71 81       	ldd	r23, Z+1	; 0x01
    3648:	86 0f       	add	r24, r22
    364a:	97 1f       	adc	r25, r23
    364c:	82 17       	cp	r24, r18
    364e:	93 07       	cpc	r25, r19
    3650:	69 f4       	brne	.+26     	; 0x366c <free+0x94>
    3652:	ec 01       	movw	r28, r24
    3654:	28 81       	ld	r18, Y
    3656:	39 81       	ldd	r19, Y+1	; 0x01
    3658:	26 0f       	add	r18, r22
    365a:	37 1f       	adc	r19, r23
    365c:	2e 5f       	subi	r18, 0xFE	; 254
    365e:	3f 4f       	sbci	r19, 0xFF	; 255
    3660:	31 83       	std	Z+1, r19	; 0x01
    3662:	20 83       	st	Z, r18
    3664:	8a 81       	ldd	r24, Y+2	; 0x02
    3666:	9b 81       	ldd	r25, Y+3	; 0x03
    3668:	93 83       	std	Z+3, r25	; 0x03
    366a:	82 83       	std	Z+2, r24	; 0x02
    366c:	45 2b       	or	r20, r21
    366e:	29 f4       	brne	.+10     	; 0x367a <free+0xa2>
    3670:	f0 93 a1 0b 	sts	0x0BA1, r31
    3674:	e0 93 a0 0b 	sts	0x0BA0, r30
    3678:	42 c0       	rjmp	.+132    	; 0x36fe <free+0x126>
    367a:	13 96       	adiw	r26, 0x03	; 3
    367c:	fc 93       	st	X, r31
    367e:	ee 93       	st	-X, r30
    3680:	12 97       	sbiw	r26, 0x02	; 2
    3682:	ed 01       	movw	r28, r26
    3684:	49 91       	ld	r20, Y+
    3686:	59 91       	ld	r21, Y+
    3688:	9e 01       	movw	r18, r28
    368a:	24 0f       	add	r18, r20
    368c:	35 1f       	adc	r19, r21
    368e:	e2 17       	cp	r30, r18
    3690:	f3 07       	cpc	r31, r19
    3692:	71 f4       	brne	.+28     	; 0x36b0 <free+0xd8>
    3694:	80 81       	ld	r24, Z
    3696:	91 81       	ldd	r25, Z+1	; 0x01
    3698:	84 0f       	add	r24, r20
    369a:	95 1f       	adc	r25, r21
    369c:	02 96       	adiw	r24, 0x02	; 2
    369e:	11 96       	adiw	r26, 0x01	; 1
    36a0:	9c 93       	st	X, r25
    36a2:	8e 93       	st	-X, r24
    36a4:	82 81       	ldd	r24, Z+2	; 0x02
    36a6:	93 81       	ldd	r25, Z+3	; 0x03
    36a8:	13 96       	adiw	r26, 0x03	; 3
    36aa:	9c 93       	st	X, r25
    36ac:	8e 93       	st	-X, r24
    36ae:	12 97       	sbiw	r26, 0x02	; 2
    36b0:	e0 e0       	ldi	r30, 0x00	; 0
    36b2:	f0 e0       	ldi	r31, 0x00	; 0
    36b4:	d8 01       	movw	r26, r16
    36b6:	12 96       	adiw	r26, 0x02	; 2
    36b8:	8d 91       	ld	r24, X+
    36ba:	9c 91       	ld	r25, X
    36bc:	13 97       	sbiw	r26, 0x03	; 3
    36be:	00 97       	sbiw	r24, 0x00	; 0
    36c0:	19 f0       	breq	.+6      	; 0x36c8 <free+0xf0>
    36c2:	f8 01       	movw	r30, r16
    36c4:	8c 01       	movw	r16, r24
    36c6:	f6 cf       	rjmp	.-20     	; 0x36b4 <free+0xdc>
    36c8:	8d 91       	ld	r24, X+
    36ca:	9c 91       	ld	r25, X
    36cc:	98 01       	movw	r18, r16
    36ce:	2e 5f       	subi	r18, 0xFE	; 254
    36d0:	3f 4f       	sbci	r19, 0xFF	; 255
    36d2:	82 0f       	add	r24, r18
    36d4:	93 1f       	adc	r25, r19
    36d6:	20 91 9e 0b 	lds	r18, 0x0B9E
    36da:	30 91 9f 0b 	lds	r19, 0x0B9F
    36de:	28 17       	cp	r18, r24
    36e0:	39 07       	cpc	r19, r25
    36e2:	69 f4       	brne	.+26     	; 0x36fe <free+0x126>
    36e4:	30 97       	sbiw	r30, 0x00	; 0
    36e6:	29 f4       	brne	.+10     	; 0x36f2 <free+0x11a>
    36e8:	10 92 a1 0b 	sts	0x0BA1, r1
    36ec:	10 92 a0 0b 	sts	0x0BA0, r1
    36f0:	02 c0       	rjmp	.+4      	; 0x36f6 <free+0x11e>
    36f2:	13 82       	std	Z+3, r1	; 0x03
    36f4:	12 82       	std	Z+2, r1	; 0x02
    36f6:	10 93 9f 0b 	sts	0x0B9F, r17
    36fa:	00 93 9e 0b 	sts	0x0B9E, r16
    36fe:	df 91       	pop	r29
    3700:	cf 91       	pop	r28
    3702:	1f 91       	pop	r17
    3704:	0f 91       	pop	r16
    3706:	08 95       	ret

00003708 <__ftoa_engine>:
    3708:	28 30       	cpi	r18, 0x08	; 8
    370a:	08 f0       	brcs	.+2      	; 0x370e <__ftoa_engine+0x6>
    370c:	27 e0       	ldi	r18, 0x07	; 7
    370e:	33 27       	eor	r19, r19
    3710:	da 01       	movw	r26, r20
    3712:	99 0f       	add	r25, r25
    3714:	31 1d       	adc	r19, r1
    3716:	87 fd       	sbrc	r24, 7
    3718:	91 60       	ori	r25, 0x01	; 1
    371a:	00 96       	adiw	r24, 0x00	; 0
    371c:	61 05       	cpc	r22, r1
    371e:	71 05       	cpc	r23, r1
    3720:	39 f4       	brne	.+14     	; 0x3730 <__ftoa_engine+0x28>
    3722:	32 60       	ori	r19, 0x02	; 2
    3724:	2e 5f       	subi	r18, 0xFE	; 254
    3726:	3d 93       	st	X+, r19
    3728:	30 e3       	ldi	r19, 0x30	; 48
    372a:	2a 95       	dec	r18
    372c:	e1 f7       	brne	.-8      	; 0x3726 <__ftoa_engine+0x1e>
    372e:	08 95       	ret
    3730:	9f 3f       	cpi	r25, 0xFF	; 255
    3732:	30 f0       	brcs	.+12     	; 0x3740 <__ftoa_engine+0x38>
    3734:	80 38       	cpi	r24, 0x80	; 128
    3736:	71 05       	cpc	r23, r1
    3738:	61 05       	cpc	r22, r1
    373a:	09 f0       	breq	.+2      	; 0x373e <__ftoa_engine+0x36>
    373c:	3c 5f       	subi	r19, 0xFC	; 252
    373e:	3c 5f       	subi	r19, 0xFC	; 252
    3740:	3d 93       	st	X+, r19
    3742:	91 30       	cpi	r25, 0x01	; 1
    3744:	08 f0       	brcs	.+2      	; 0x3748 <__ftoa_engine+0x40>
    3746:	80 68       	ori	r24, 0x80	; 128
    3748:	91 1d       	adc	r25, r1
    374a:	df 93       	push	r29
    374c:	cf 93       	push	r28
    374e:	1f 93       	push	r17
    3750:	0f 93       	push	r16
    3752:	ff 92       	push	r15
    3754:	ef 92       	push	r14
    3756:	19 2f       	mov	r17, r25
    3758:	98 7f       	andi	r25, 0xF8	; 248
    375a:	96 95       	lsr	r25
    375c:	e9 2f       	mov	r30, r25
    375e:	96 95       	lsr	r25
    3760:	96 95       	lsr	r25
    3762:	e9 0f       	add	r30, r25
    3764:	ff 27       	eor	r31, r31
    3766:	ea 56       	subi	r30, 0x6A	; 106
    3768:	fe 4f       	sbci	r31, 0xFE	; 254
    376a:	99 27       	eor	r25, r25
    376c:	33 27       	eor	r19, r19
    376e:	ee 24       	eor	r14, r14
    3770:	ff 24       	eor	r15, r15
    3772:	a7 01       	movw	r20, r14
    3774:	e7 01       	movw	r28, r14
    3776:	05 90       	lpm	r0, Z+
    3778:	08 94       	sec
    377a:	07 94       	ror	r0
    377c:	28 f4       	brcc	.+10     	; 0x3788 <__ftoa_engine+0x80>
    377e:	36 0f       	add	r19, r22
    3780:	e7 1e       	adc	r14, r23
    3782:	f8 1e       	adc	r15, r24
    3784:	49 1f       	adc	r20, r25
    3786:	51 1d       	adc	r21, r1
    3788:	66 0f       	add	r22, r22
    378a:	77 1f       	adc	r23, r23
    378c:	88 1f       	adc	r24, r24
    378e:	99 1f       	adc	r25, r25
    3790:	06 94       	lsr	r0
    3792:	a1 f7       	brne	.-24     	; 0x377c <__ftoa_engine+0x74>
    3794:	05 90       	lpm	r0, Z+
    3796:	07 94       	ror	r0
    3798:	28 f4       	brcc	.+10     	; 0x37a4 <__ftoa_engine+0x9c>
    379a:	e7 0e       	add	r14, r23
    379c:	f8 1e       	adc	r15, r24
    379e:	49 1f       	adc	r20, r25
    37a0:	56 1f       	adc	r21, r22
    37a2:	c1 1d       	adc	r28, r1
    37a4:	77 0f       	add	r23, r23
    37a6:	88 1f       	adc	r24, r24
    37a8:	99 1f       	adc	r25, r25
    37aa:	66 1f       	adc	r22, r22
    37ac:	06 94       	lsr	r0
    37ae:	a1 f7       	brne	.-24     	; 0x3798 <__ftoa_engine+0x90>
    37b0:	05 90       	lpm	r0, Z+
    37b2:	07 94       	ror	r0
    37b4:	28 f4       	brcc	.+10     	; 0x37c0 <__ftoa_engine+0xb8>
    37b6:	f8 0e       	add	r15, r24
    37b8:	49 1f       	adc	r20, r25
    37ba:	56 1f       	adc	r21, r22
    37bc:	c7 1f       	adc	r28, r23
    37be:	d1 1d       	adc	r29, r1
    37c0:	88 0f       	add	r24, r24
    37c2:	99 1f       	adc	r25, r25
    37c4:	66 1f       	adc	r22, r22
    37c6:	77 1f       	adc	r23, r23
    37c8:	06 94       	lsr	r0
    37ca:	a1 f7       	brne	.-24     	; 0x37b4 <__ftoa_engine+0xac>
    37cc:	05 90       	lpm	r0, Z+
    37ce:	07 94       	ror	r0
    37d0:	20 f4       	brcc	.+8      	; 0x37da <__ftoa_engine+0xd2>
    37d2:	49 0f       	add	r20, r25
    37d4:	56 1f       	adc	r21, r22
    37d6:	c7 1f       	adc	r28, r23
    37d8:	d8 1f       	adc	r29, r24
    37da:	99 0f       	add	r25, r25
    37dc:	66 1f       	adc	r22, r22
    37de:	77 1f       	adc	r23, r23
    37e0:	88 1f       	adc	r24, r24
    37e2:	06 94       	lsr	r0
    37e4:	a9 f7       	brne	.-22     	; 0x37d0 <__ftoa_engine+0xc8>
    37e6:	84 91       	lpm	r24, Z
    37e8:	10 95       	com	r17
    37ea:	17 70       	andi	r17, 0x07	; 7
    37ec:	41 f0       	breq	.+16     	; 0x37fe <__ftoa_engine+0xf6>
    37ee:	d6 95       	lsr	r29
    37f0:	c7 95       	ror	r28
    37f2:	57 95       	ror	r21
    37f4:	47 95       	ror	r20
    37f6:	f7 94       	ror	r15
    37f8:	e7 94       	ror	r14
    37fa:	1a 95       	dec	r17
    37fc:	c1 f7       	brne	.-16     	; 0x37ee <__ftoa_engine+0xe6>
    37fe:	ec e3       	ldi	r30, 0x3C	; 60
    3800:	f1 e0       	ldi	r31, 0x01	; 1
    3802:	68 94       	set
    3804:	15 90       	lpm	r1, Z+
    3806:	15 91       	lpm	r17, Z+
    3808:	35 91       	lpm	r19, Z+
    380a:	65 91       	lpm	r22, Z+
    380c:	95 91       	lpm	r25, Z+
    380e:	05 90       	lpm	r0, Z+
    3810:	7f e2       	ldi	r23, 0x2F	; 47
    3812:	73 95       	inc	r23
    3814:	e1 18       	sub	r14, r1
    3816:	f1 0a       	sbc	r15, r17
    3818:	43 0b       	sbc	r20, r19
    381a:	56 0b       	sbc	r21, r22
    381c:	c9 0b       	sbc	r28, r25
    381e:	d0 09       	sbc	r29, r0
    3820:	c0 f7       	brcc	.-16     	; 0x3812 <__ftoa_engine+0x10a>
    3822:	e1 0c       	add	r14, r1
    3824:	f1 1e       	adc	r15, r17
    3826:	43 1f       	adc	r20, r19
    3828:	56 1f       	adc	r21, r22
    382a:	c9 1f       	adc	r28, r25
    382c:	d0 1d       	adc	r29, r0
    382e:	7e f4       	brtc	.+30     	; 0x384e <__ftoa_engine+0x146>
    3830:	70 33       	cpi	r23, 0x30	; 48
    3832:	11 f4       	brne	.+4      	; 0x3838 <__ftoa_engine+0x130>
    3834:	8a 95       	dec	r24
    3836:	e6 cf       	rjmp	.-52     	; 0x3804 <__ftoa_engine+0xfc>
    3838:	e8 94       	clt
    383a:	01 50       	subi	r16, 0x01	; 1
    383c:	30 f0       	brcs	.+12     	; 0x384a <__ftoa_engine+0x142>
    383e:	08 0f       	add	r16, r24
    3840:	0a f4       	brpl	.+2      	; 0x3844 <__ftoa_engine+0x13c>
    3842:	00 27       	eor	r16, r16
    3844:	02 17       	cp	r16, r18
    3846:	08 f4       	brcc	.+2      	; 0x384a <__ftoa_engine+0x142>
    3848:	20 2f       	mov	r18, r16
    384a:	23 95       	inc	r18
    384c:	02 2f       	mov	r16, r18
    384e:	7a 33       	cpi	r23, 0x3A	; 58
    3850:	28 f0       	brcs	.+10     	; 0x385c <__ftoa_engine+0x154>
    3852:	79 e3       	ldi	r23, 0x39	; 57
    3854:	7d 93       	st	X+, r23
    3856:	2a 95       	dec	r18
    3858:	e9 f7       	brne	.-6      	; 0x3854 <__ftoa_engine+0x14c>
    385a:	10 c0       	rjmp	.+32     	; 0x387c <__ftoa_engine+0x174>
    385c:	7d 93       	st	X+, r23
    385e:	2a 95       	dec	r18
    3860:	89 f6       	brne	.-94     	; 0x3804 <__ftoa_engine+0xfc>
    3862:	06 94       	lsr	r0
    3864:	97 95       	ror	r25
    3866:	67 95       	ror	r22
    3868:	37 95       	ror	r19
    386a:	17 95       	ror	r17
    386c:	17 94       	ror	r1
    386e:	e1 18       	sub	r14, r1
    3870:	f1 0a       	sbc	r15, r17
    3872:	43 0b       	sbc	r20, r19
    3874:	56 0b       	sbc	r21, r22
    3876:	c9 0b       	sbc	r28, r25
    3878:	d0 09       	sbc	r29, r0
    387a:	98 f0       	brcs	.+38     	; 0x38a2 <__ftoa_engine+0x19a>
    387c:	23 95       	inc	r18
    387e:	7e 91       	ld	r23, -X
    3880:	73 95       	inc	r23
    3882:	7a 33       	cpi	r23, 0x3A	; 58
    3884:	08 f0       	brcs	.+2      	; 0x3888 <__ftoa_engine+0x180>
    3886:	70 e3       	ldi	r23, 0x30	; 48
    3888:	7c 93       	st	X, r23
    388a:	20 13       	cpse	r18, r16
    388c:	b8 f7       	brcc	.-18     	; 0x387c <__ftoa_engine+0x174>
    388e:	7e 91       	ld	r23, -X
    3890:	70 61       	ori	r23, 0x10	; 16
    3892:	7d 93       	st	X+, r23
    3894:	30 f0       	brcs	.+12     	; 0x38a2 <__ftoa_engine+0x19a>
    3896:	83 95       	inc	r24
    3898:	71 e3       	ldi	r23, 0x31	; 49
    389a:	7d 93       	st	X+, r23
    389c:	70 e3       	ldi	r23, 0x30	; 48
    389e:	2a 95       	dec	r18
    38a0:	e1 f7       	brne	.-8      	; 0x389a <__ftoa_engine+0x192>
    38a2:	11 24       	eor	r1, r1
    38a4:	ef 90       	pop	r14
    38a6:	ff 90       	pop	r15
    38a8:	0f 91       	pop	r16
    38aa:	1f 91       	pop	r17
    38ac:	cf 91       	pop	r28
    38ae:	df 91       	pop	r29
    38b0:	99 27       	eor	r25, r25
    38b2:	87 fd       	sbrc	r24, 7
    38b4:	90 95       	com	r25
    38b6:	08 95       	ret

000038b8 <strnlen_P>:
    38b8:	fc 01       	movw	r30, r24
    38ba:	05 90       	lpm	r0, Z+
    38bc:	61 50       	subi	r22, 0x01	; 1
    38be:	70 40       	sbci	r23, 0x00	; 0
    38c0:	01 10       	cpse	r0, r1
    38c2:	d8 f7       	brcc	.-10     	; 0x38ba <strnlen_P+0x2>
    38c4:	80 95       	com	r24
    38c6:	90 95       	com	r25
    38c8:	8e 0f       	add	r24, r30
    38ca:	9f 1f       	adc	r25, r31
    38cc:	08 95       	ret

000038ce <strnlen>:
    38ce:	fc 01       	movw	r30, r24
    38d0:	61 50       	subi	r22, 0x01	; 1
    38d2:	70 40       	sbci	r23, 0x00	; 0
    38d4:	01 90       	ld	r0, Z+
    38d6:	01 10       	cpse	r0, r1
    38d8:	d8 f7       	brcc	.-10     	; 0x38d0 <strnlen+0x2>
    38da:	80 95       	com	r24
    38dc:	90 95       	com	r25
    38de:	8e 0f       	add	r24, r30
    38e0:	9f 1f       	adc	r25, r31
    38e2:	08 95       	ret

000038e4 <fputc>:
    38e4:	0f 93       	push	r16
    38e6:	1f 93       	push	r17
    38e8:	cf 93       	push	r28
    38ea:	df 93       	push	r29
    38ec:	fb 01       	movw	r30, r22
    38ee:	23 81       	ldd	r18, Z+3	; 0x03
    38f0:	21 fd       	sbrc	r18, 1
    38f2:	03 c0       	rjmp	.+6      	; 0x38fa <fputc+0x16>
    38f4:	8f ef       	ldi	r24, 0xFF	; 255
    38f6:	9f ef       	ldi	r25, 0xFF	; 255
    38f8:	28 c0       	rjmp	.+80     	; 0x394a <fputc+0x66>
    38fa:	22 ff       	sbrs	r18, 2
    38fc:	16 c0       	rjmp	.+44     	; 0x392a <fputc+0x46>
    38fe:	46 81       	ldd	r20, Z+6	; 0x06
    3900:	57 81       	ldd	r21, Z+7	; 0x07
    3902:	24 81       	ldd	r18, Z+4	; 0x04
    3904:	35 81       	ldd	r19, Z+5	; 0x05
    3906:	42 17       	cp	r20, r18
    3908:	53 07       	cpc	r21, r19
    390a:	44 f4       	brge	.+16     	; 0x391c <fputc+0x38>
    390c:	a0 81       	ld	r26, Z
    390e:	b1 81       	ldd	r27, Z+1	; 0x01
    3910:	9d 01       	movw	r18, r26
    3912:	2f 5f       	subi	r18, 0xFF	; 255
    3914:	3f 4f       	sbci	r19, 0xFF	; 255
    3916:	31 83       	std	Z+1, r19	; 0x01
    3918:	20 83       	st	Z, r18
    391a:	8c 93       	st	X, r24
    391c:	26 81       	ldd	r18, Z+6	; 0x06
    391e:	37 81       	ldd	r19, Z+7	; 0x07
    3920:	2f 5f       	subi	r18, 0xFF	; 255
    3922:	3f 4f       	sbci	r19, 0xFF	; 255
    3924:	37 83       	std	Z+7, r19	; 0x07
    3926:	26 83       	std	Z+6, r18	; 0x06
    3928:	10 c0       	rjmp	.+32     	; 0x394a <fputc+0x66>
    392a:	eb 01       	movw	r28, r22
    392c:	09 2f       	mov	r16, r25
    392e:	18 2f       	mov	r17, r24
    3930:	00 84       	ldd	r0, Z+8	; 0x08
    3932:	f1 85       	ldd	r31, Z+9	; 0x09
    3934:	e0 2d       	mov	r30, r0
    3936:	19 95       	eicall
    3938:	89 2b       	or	r24, r25
    393a:	e1 f6       	brne	.-72     	; 0x38f4 <fputc+0x10>
    393c:	8e 81       	ldd	r24, Y+6	; 0x06
    393e:	9f 81       	ldd	r25, Y+7	; 0x07
    3940:	01 96       	adiw	r24, 0x01	; 1
    3942:	9f 83       	std	Y+7, r25	; 0x07
    3944:	8e 83       	std	Y+6, r24	; 0x06
    3946:	81 2f       	mov	r24, r17
    3948:	90 2f       	mov	r25, r16
    394a:	df 91       	pop	r29
    394c:	cf 91       	pop	r28
    394e:	1f 91       	pop	r17
    3950:	0f 91       	pop	r16
    3952:	08 95       	ret

00003954 <printf>:
    3954:	cf 93       	push	r28
    3956:	df 93       	push	r29
    3958:	cd b7       	in	r28, 0x3d	; 61
    395a:	de b7       	in	r29, 0x3e	; 62
    395c:	ae 01       	movw	r20, r28
    395e:	4a 5f       	subi	r20, 0xFA	; 250
    3960:	5f 4f       	sbci	r21, 0xFF	; 255
    3962:	fa 01       	movw	r30, r20
    3964:	61 91       	ld	r22, Z+
    3966:	71 91       	ld	r23, Z+
    3968:	af 01       	movw	r20, r30
    396a:	80 91 a4 0b 	lds	r24, 0x0BA4
    396e:	90 91 a5 0b 	lds	r25, 0x0BA5
    3972:	b8 d9       	rcall	.-3216   	; 0x2ce4 <vfprintf>
    3974:	df 91       	pop	r29
    3976:	cf 91       	pop	r28
    3978:	08 95       	ret

0000397a <putchar>:
    397a:	60 91 a4 0b 	lds	r22, 0x0BA4
    397e:	70 91 a5 0b 	lds	r23, 0x0BA5
    3982:	b0 cf       	rjmp	.-160    	; 0x38e4 <fputc>

00003984 <puts>:
    3984:	0f 93       	push	r16
    3986:	1f 93       	push	r17
    3988:	cf 93       	push	r28
    398a:	df 93       	push	r29
    398c:	e0 91 a4 0b 	lds	r30, 0x0BA4
    3990:	f0 91 a5 0b 	lds	r31, 0x0BA5
    3994:	23 81       	ldd	r18, Z+3	; 0x03
    3996:	21 ff       	sbrs	r18, 1
    3998:	1b c0       	rjmp	.+54     	; 0x39d0 <puts+0x4c>
    399a:	8c 01       	movw	r16, r24
    399c:	d0 e0       	ldi	r29, 0x00	; 0
    399e:	c0 e0       	ldi	r28, 0x00	; 0
    39a0:	f8 01       	movw	r30, r16
    39a2:	81 91       	ld	r24, Z+
    39a4:	8f 01       	movw	r16, r30
    39a6:	60 91 a4 0b 	lds	r22, 0x0BA4
    39aa:	70 91 a5 0b 	lds	r23, 0x0BA5
    39ae:	db 01       	movw	r26, r22
    39b0:	18 96       	adiw	r26, 0x08	; 8
    39b2:	ed 91       	ld	r30, X+
    39b4:	fc 91       	ld	r31, X
    39b6:	19 97       	sbiw	r26, 0x09	; 9
    39b8:	88 23       	and	r24, r24
    39ba:	31 f0       	breq	.+12     	; 0x39c8 <puts+0x44>
    39bc:	19 95       	eicall
    39be:	89 2b       	or	r24, r25
    39c0:	79 f3       	breq	.-34     	; 0x39a0 <puts+0x1c>
    39c2:	df ef       	ldi	r29, 0xFF	; 255
    39c4:	cf ef       	ldi	r28, 0xFF	; 255
    39c6:	ec cf       	rjmp	.-40     	; 0x39a0 <puts+0x1c>
    39c8:	8a e0       	ldi	r24, 0x0A	; 10
    39ca:	19 95       	eicall
    39cc:	89 2b       	or	r24, r25
    39ce:	19 f0       	breq	.+6      	; 0x39d6 <puts+0x52>
    39d0:	8f ef       	ldi	r24, 0xFF	; 255
    39d2:	9f ef       	ldi	r25, 0xFF	; 255
    39d4:	02 c0       	rjmp	.+4      	; 0x39da <puts+0x56>
    39d6:	8d 2f       	mov	r24, r29
    39d8:	9c 2f       	mov	r25, r28
    39da:	df 91       	pop	r29
    39dc:	cf 91       	pop	r28
    39de:	1f 91       	pop	r17
    39e0:	0f 91       	pop	r16
    39e2:	08 95       	ret

000039e4 <__ultoa_invert>:
    39e4:	fa 01       	movw	r30, r20
    39e6:	aa 27       	eor	r26, r26
    39e8:	28 30       	cpi	r18, 0x08	; 8
    39ea:	51 f1       	breq	.+84     	; 0x3a40 <__ultoa_invert+0x5c>
    39ec:	20 31       	cpi	r18, 0x10	; 16
    39ee:	81 f1       	breq	.+96     	; 0x3a50 <__ultoa_invert+0x6c>
    39f0:	e8 94       	clt
    39f2:	6f 93       	push	r22
    39f4:	6e 7f       	andi	r22, 0xFE	; 254
    39f6:	6e 5f       	subi	r22, 0xFE	; 254
    39f8:	7f 4f       	sbci	r23, 0xFF	; 255
    39fa:	8f 4f       	sbci	r24, 0xFF	; 255
    39fc:	9f 4f       	sbci	r25, 0xFF	; 255
    39fe:	af 4f       	sbci	r26, 0xFF	; 255
    3a00:	b1 e0       	ldi	r27, 0x01	; 1
    3a02:	3e d0       	rcall	.+124    	; 0x3a80 <__ultoa_invert+0x9c>
    3a04:	b4 e0       	ldi	r27, 0x04	; 4
    3a06:	3c d0       	rcall	.+120    	; 0x3a80 <__ultoa_invert+0x9c>
    3a08:	67 0f       	add	r22, r23
    3a0a:	78 1f       	adc	r23, r24
    3a0c:	89 1f       	adc	r24, r25
    3a0e:	9a 1f       	adc	r25, r26
    3a10:	a1 1d       	adc	r26, r1
    3a12:	68 0f       	add	r22, r24
    3a14:	79 1f       	adc	r23, r25
    3a16:	8a 1f       	adc	r24, r26
    3a18:	91 1d       	adc	r25, r1
    3a1a:	a1 1d       	adc	r26, r1
    3a1c:	6a 0f       	add	r22, r26
    3a1e:	71 1d       	adc	r23, r1
    3a20:	81 1d       	adc	r24, r1
    3a22:	91 1d       	adc	r25, r1
    3a24:	a1 1d       	adc	r26, r1
    3a26:	20 d0       	rcall	.+64     	; 0x3a68 <__ultoa_invert+0x84>
    3a28:	09 f4       	brne	.+2      	; 0x3a2c <__ultoa_invert+0x48>
    3a2a:	68 94       	set
    3a2c:	3f 91       	pop	r19
    3a2e:	2a e0       	ldi	r18, 0x0A	; 10
    3a30:	26 9f       	mul	r18, r22
    3a32:	11 24       	eor	r1, r1
    3a34:	30 19       	sub	r19, r0
    3a36:	30 5d       	subi	r19, 0xD0	; 208
    3a38:	31 93       	st	Z+, r19
    3a3a:	de f6       	brtc	.-74     	; 0x39f2 <__ultoa_invert+0xe>
    3a3c:	cf 01       	movw	r24, r30
    3a3e:	08 95       	ret
    3a40:	46 2f       	mov	r20, r22
    3a42:	47 70       	andi	r20, 0x07	; 7
    3a44:	40 5d       	subi	r20, 0xD0	; 208
    3a46:	41 93       	st	Z+, r20
    3a48:	b3 e0       	ldi	r27, 0x03	; 3
    3a4a:	0f d0       	rcall	.+30     	; 0x3a6a <__ultoa_invert+0x86>
    3a4c:	c9 f7       	brne	.-14     	; 0x3a40 <__ultoa_invert+0x5c>
    3a4e:	f6 cf       	rjmp	.-20     	; 0x3a3c <__ultoa_invert+0x58>
    3a50:	46 2f       	mov	r20, r22
    3a52:	4f 70       	andi	r20, 0x0F	; 15
    3a54:	40 5d       	subi	r20, 0xD0	; 208
    3a56:	4a 33       	cpi	r20, 0x3A	; 58
    3a58:	18 f0       	brcs	.+6      	; 0x3a60 <__ultoa_invert+0x7c>
    3a5a:	49 5d       	subi	r20, 0xD9	; 217
    3a5c:	31 fd       	sbrc	r19, 1
    3a5e:	40 52       	subi	r20, 0x20	; 32
    3a60:	41 93       	st	Z+, r20
    3a62:	02 d0       	rcall	.+4      	; 0x3a68 <__ultoa_invert+0x84>
    3a64:	a9 f7       	brne	.-22     	; 0x3a50 <__ultoa_invert+0x6c>
    3a66:	ea cf       	rjmp	.-44     	; 0x3a3c <__ultoa_invert+0x58>
    3a68:	b4 e0       	ldi	r27, 0x04	; 4
    3a6a:	a6 95       	lsr	r26
    3a6c:	97 95       	ror	r25
    3a6e:	87 95       	ror	r24
    3a70:	77 95       	ror	r23
    3a72:	67 95       	ror	r22
    3a74:	ba 95       	dec	r27
    3a76:	c9 f7       	brne	.-14     	; 0x3a6a <__ultoa_invert+0x86>
    3a78:	00 97       	sbiw	r24, 0x00	; 0
    3a7a:	61 05       	cpc	r22, r1
    3a7c:	71 05       	cpc	r23, r1
    3a7e:	08 95       	ret
    3a80:	9b 01       	movw	r18, r22
    3a82:	ac 01       	movw	r20, r24
    3a84:	0a 2e       	mov	r0, r26
    3a86:	06 94       	lsr	r0
    3a88:	57 95       	ror	r21
    3a8a:	47 95       	ror	r20
    3a8c:	37 95       	ror	r19
    3a8e:	27 95       	ror	r18
    3a90:	ba 95       	dec	r27
    3a92:	c9 f7       	brne	.-14     	; 0x3a86 <__ultoa_invert+0xa2>
    3a94:	62 0f       	add	r22, r18
    3a96:	73 1f       	adc	r23, r19
    3a98:	84 1f       	adc	r24, r20
    3a9a:	95 1f       	adc	r25, r21
    3a9c:	a0 1d       	adc	r26, r0
    3a9e:	08 95       	ret

00003aa0 <_exit>:
    3aa0:	f8 94       	cli

00003aa2 <__stop_program>:
    3aa2:	ff cf       	rjmp	.-2      	; 0x3aa2 <__stop_program>
