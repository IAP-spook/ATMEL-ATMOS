
ATMOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014e  00800200  00001e88  00001f1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001e88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004fd  0080034e  0080034e  0000206a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000206a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000006a0  00000000  00000000  000020c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006b49  00000000  00000000  00002766  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000027e1  00000000  00000000  000092af  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002398  00000000  00000000  0000ba90  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000fe4  00000000  00000000  0000de28  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001b12  00000000  00000000  0000ee0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00003cd3  00000000  00000000  0001091e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000688  00000000  00000000  000145f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__ctors_end>
       4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      10:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      14:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      18:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      1c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      20:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      24:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      28:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      30:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      34:	0c 94 df 03 	jmp	0x7be	; 0x7be <__vector_13>
      38:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      3c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      40:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      44:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      48:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      4c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      50:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      54:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      58:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      5c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      60:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      64:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      68:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      6c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      70:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      74:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      78:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      7c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      80:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      84:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      88:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      8c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      90:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      94:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      98:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      9c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a8:	0c 94 dc 05 	jmp	0xbb8	; 0xbb8 <__vector_42>
      ac:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      bc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      cc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      dc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      ec:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      fc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     100:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     104:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     108:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     10c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     110:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     114:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     118:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     11c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     120:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     124:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     128:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     12c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     130:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>

00000134 <__trampolines_end>:
     134:	6e 61       	ori	r22, 0x1E	; 30
     136:	6e 00       	.word	0x006e	; ????

00000138 <__c.2159>:
     138:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     148:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     158:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     168:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     178:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     188:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     198:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     208:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     218:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     228:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000236 <__ctors_end>:
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	d1 e2       	ldi	r29, 0x21	; 33
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61

00000242 <__do_copy_data>:
     242:	13 e0       	ldi	r17, 0x03	; 3
     244:	a0 e0       	ldi	r26, 0x00	; 0
     246:	b2 e0       	ldi	r27, 0x02	; 2
     248:	e8 e8       	ldi	r30, 0x88	; 136
     24a:	fe e1       	ldi	r31, 0x1E	; 30
     24c:	02 c0       	rjmp	.+4      	; 0x252 <__do_copy_data+0x10>
     24e:	05 90       	lpm	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	ae 34       	cpi	r26, 0x4E	; 78
     254:	b1 07       	cpc	r27, r17
     256:	d9 f7       	brne	.-10     	; 0x24e <__do_copy_data+0xc>

00000258 <__do_clear_bss>:
     258:	28 e0       	ldi	r18, 0x08	; 8
     25a:	ae e4       	ldi	r26, 0x4E	; 78
     25c:	b3 e0       	ldi	r27, 0x03	; 3
     25e:	01 c0       	rjmp	.+2      	; 0x262 <.do_clear_bss_start>

00000260 <.do_clear_bss_loop>:
     260:	1d 92       	st	X+, r1

00000262 <.do_clear_bss_start>:
     262:	ab 34       	cpi	r26, 0x4B	; 75
     264:	b2 07       	cpc	r27, r18
     266:	e1 f7       	brne	.-8      	; 0x260 <.do_clear_bss_loop>
     268:	0e 94 3a 01 	call	0x274	; 0x274 <main>
     26c:	0c 94 42 0f 	jmp	0x1e84	; 0x1e84 <_exit>

00000270 <__bad_interrupt>:
     270:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000274 <main>:



int main(void)
{
	SYS_Init();
     274:	0e 94 a1 07 	call	0xf42	; 0xf42 <SYS_Init>
	if(ref[j]==0) return 100;
	return j;
}

static void APP_Init(void){
	PWR_Init();
     278:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <PWR_Init>
	PWR_TurnOn5V();
     27c:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <PWR_TurnOn5V>
	USART0_Init(9600);
     280:	60 e8       	ldi	r22, 0x80	; 128
     282:	75 e2       	ldi	r23, 0x25	; 37
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 9c 03 	call	0x738	; 0x738 <USART0_Init>
	DDRB |= 0b00010000;
     28c:	24 9a       	sbi	0x04, 4	; 4
	DDRE |= 0b00001000;
     28e:	6b 9a       	sbi	0x0d, 3	; 13
	PORTE|= 0b00001000;
     290:	73 9a       	sbi	0x0e, 3	; 14
	TWI_Init(10000);
     292:	60 e1       	ldi	r22, 0x10	; 16
     294:	77 e2       	ldi	r23, 0x27	; 39
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 da 02 	call	0x5b4	; 0x5b4 <TWI_Init>
	ADC_Init();
     29e:	0e 94 c4 02 	call	0x588	; 0x588 <ADC_Init>
	TGS2600_Init();
     2a2:	0e 94 c0 02 	call	0x580	; 0x580 <TGS2600_Init>
	Si7020_init();
     2a6:	0e 94 bc 02 	call	0x578	; 0x578 <Si7020_init>
	printf("BMP280 Status %i\n", BMP280_Init());
     2aa:	0e 94 d6 01 	call	0x3ac	; 0x3ac <BMP280_Init>
     2ae:	1f 92       	push	r1
     2b0:	8f 93       	push	r24
     2b2:	80 e2       	ldi	r24, 0x20	; 32
     2b4:	92 e0       	ldi	r25, 0x02	; 2
     2b6:	9f 93       	push	r25
     2b8:	8f 93       	push	r24
     2ba:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <printf>
	BMP280_SetOversampling(4);
     2be:	84 e0       	ldi	r24, 0x04	; 4
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 b6 02 	call	0x56c	; 0x56c <BMP280_SetOversampling>
	SPI_SlaveInit();
     2c6:	0e 94 d6 02 	call	0x5ac	; 0x5ac <SPI_SlaveInit>
{
	SYS_Init();
	APP_Init();
	
	/* could have sealed following in a function */
	init_timeoutq();
     2ca:	0e 94 57 04 	call	0x8ae	; 0x8ae <init_timeoutq>
	MySensor *p = New_My_Sensor( 1023 );
     2ce:	8f ef       	ldi	r24, 0xFF	; 255
     2d0:	93 e0       	ldi	r25, 0x03	; 3
     2d2:	0e 94 94 07 	call	0xf28	; 0xf28 <New_My_Sensor>
     2d6:	ec 01       	movw	r28, r24
	My_FctnInit(p);
     2d8:	0e 94 7a 07 	call	0xef4	; 0xef4 <My_FctnInit>
	init_Event_Timer();
     2dc:	0e 94 18 04 	call	0x830	; 0x830 <init_Event_Timer>
	printf("init done!\n");
     2e0:	82 e3       	ldi	r24, 0x32	; 50
     2e2:	92 e0       	ldi	r25, 0x02	; 2
     2e4:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <puts>
	
	/* could have sealed following in a function */
	load_new_sensor( 1, 4, (BaseSensor *)p, 0 );
     2e8:	20 e0       	ldi	r18, 0x00	; 0
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	ae 01       	movw	r20, r28
     2ee:	64 e0       	ldi	r22, 0x04	; 4
     2f0:	70 e0       	ldi	r23, 0x00	; 0
     2f2:	81 e0       	ldi	r24, 0x01	; 1
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 d6 04 	call	0x9ac	; 0x9ac <load_new_sensor>
	init_set_timer( get_next_interval() );
     2fa:	0e 94 87 04 	call	0x90e	; 0x90e <get_next_interval>
     2fe:	0e 94 24 04 	call	0x848	; 0x848 <init_set_timer>
	
	/* Enable global interrupt */
	sei();
     302:	78 94       	sei
     304:	0f 90       	pop	r0
     306:	0f 90       	pop	r0
     308:	0f 90       	pop	r0
     30a:	0f 90       	pop	r0
     30c:	ff cf       	rjmp	.-2      	; 0x30c <main+0x98>

0000030e <BMP280_ReadBytes>:
  @brief Reads some bytes from the BMP280
  @param[in] *values pointer to an array to store the bytes, put the starting register in values[0]
  @param[in] length how many bytes to read
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadBytes(unsigned char *values, char length){
     30e:	1f 93       	push	r17
     310:	cf 93       	push	r28
     312:	df 93       	push	r29
     314:	ec 01       	movw	r28, r24
     316:	16 2f       	mov	r17, r22
	//printf("BMP280_ReadBytes");
	//printf("0x%1x",(unsigned)TWI_BeginWrite(BMP280_ADDR));
	TWI_BeginWrite(BMP280_ADDR);
     318:	86 e7       	ldi	r24, 0x76	; 118
     31a:	0e 94 06 03 	call	0x60c	; 0x60c <TWI_BeginWrite>
	//printf("0x%1x",(unsigned)TWI_WriteByte(values[0]));
	TWI_WriteByte(values[0]);//Write the register address
     31e:	88 81       	ld	r24, Y
     320:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <TWI_WriteByte>
	status = TWI_BeginRead(BMP280_ADDR); //Send a repeated start
     324:	86 e7       	ldi	r24, 0x76	; 118
     326:	0e 94 23 03 	call	0x646	; 0x646 <TWI_BeginRead>
     32a:	80 93 4e 03 	sts	0x034E, r24
	//printf("0x%1x",status);
	if (status == TWI_SLAR_ACK){
     32e:	80 34       	cpi	r24, 0x40	; 64
     330:	81 f4       	brne	.+32     	; 0x352 <BMP280_ReadBytes+0x44>
		if(((TWI_Read(&values[0],length,false)&TWSR_MASK) == TWI_REC_NACK) && (TWI_Stop() != 0)) return(1); //Receive bytes, send a STOP bit, and check for success
     332:	61 2f       	mov	r22, r17
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	40 e0       	ldi	r20, 0x00	; 0
     338:	ce 01       	movw	r24, r28
     33a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <TWI_Read>
     33e:	88 7f       	andi	r24, 0xF8	; 248
     340:	88 35       	cpi	r24, 0x58	; 88
     342:	49 f4       	brne	.+18     	; 0x356 <BMP280_ReadBytes+0x48>
     344:	0e 94 5b 03 	call	0x6b6	; 0x6b6 <TWI_Stop>
     348:	91 e0       	ldi	r25, 0x01	; 1
     34a:	81 11       	cpse	r24, r1
     34c:	05 c0       	rjmp	.+10     	; 0x358 <BMP280_ReadBytes+0x4a>
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	03 c0       	rjmp	.+6      	; 0x358 <BMP280_ReadBytes+0x4a>
	}
	return(0);
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	01 c0       	rjmp	.+2      	; 0x358 <BMP280_ReadBytes+0x4a>
     356:	90 e0       	ldi	r25, 0x00	; 0
}
     358:	89 2f       	mov	r24, r25
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	1f 91       	pop	r17
     360:	08 95       	ret

00000362 <BMP280_ReadInt>:
  @brief Reads an int from the BMP280
  @param[in] address The register address of the first byte of the uint
  @param[out] val* A pointer to a uint to store the received data to
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadInt(char address, int *val){
     362:	0f 93       	push	r16
     364:	1f 93       	push	r17
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	00 d0       	rcall	.+0      	; 0x36c <BMP280_ReadInt+0xa>
     36c:	cd b7       	in	r28, 0x3d	; 61
     36e:	de b7       	in	r29, 0x3e	; 62
     370:	8b 01       	movw	r16, r22
	//printf("\nBMP280_ReadInt");
	unsigned char data[2];	//char is 4 bits, 1 byte

	data[0] = address;
     372:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     374:	62 e0       	ldi	r22, 0x02	; 2
     376:	ce 01       	movw	r24, r28
     378:	01 96       	adiw	r24, 0x01	; 1
     37a:	0e 94 87 01 	call	0x30e	; 0x30e <BMP280_ReadBytes>
     37e:	88 23       	and	r24, r24
     380:	59 f0       	breq	.+22     	; 0x398 <BMP280_ReadInt+0x36>
		*val = (((int)data[1]<<8)|(int)data[0]);
     382:	8a 81       	ldd	r24, Y+2	; 0x02
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	98 2f       	mov	r25, r24
     388:	88 27       	eor	r24, r24
     38a:	29 81       	ldd	r18, Y+1	; 0x01
     38c:	82 2b       	or	r24, r18
     38e:	f8 01       	movw	r30, r16
     390:	91 83       	std	Z+1, r25	; 0x01
     392:	80 83       	st	Z, r24
		return(1);
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	03 c0       	rjmp	.+6      	; 0x39e <BMP280_ReadInt+0x3c>
	}
	*val = 0;
     398:	f8 01       	movw	r30, r16
     39a:	11 82       	std	Z+1, r1	; 0x01
     39c:	10 82       	st	Z, r1
	return(0);
}
     39e:	0f 90       	pop	r0
     3a0:	0f 90       	pop	r0
     3a2:	df 91       	pop	r29
     3a4:	cf 91       	pop	r28
     3a6:	1f 91       	pop	r17
     3a8:	0f 91       	pop	r16
     3aa:	08 95       	ret

000003ac <BMP280_Init>:

/*************************************************************************//**
  @brief Initializes the BMP280 and reads the calibration data from the device
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
char BMP280_Init(void){
     3ac:	cf 93       	push	r28
     3ae:	df 93       	push	r29
     3b0:	00 d0       	rcall	.+0      	; 0x3b2 <BMP280_Init+0x6>
     3b2:	cd b7       	in	r28, 0x3d	; 61
     3b4:	de b7       	in	r29, 0x3e	; 62
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
     3b6:	88 e8       	ldi	r24, 0x88	; 136
     3b8:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     3ba:	62 e0       	ldi	r22, 0x02	; 2
     3bc:	ce 01       	movw	r24, r28
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	0e 94 87 01 	call	0x30e	; 0x30e <BMP280_ReadBytes>
     3c4:	88 23       	and	r24, r24
     3c6:	99 f0       	breq	.+38     	; 0x3ee <BMP280_Init+0x42>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     3c8:	8a 81       	ldd	r24, Y+2	; 0x02
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	98 2f       	mov	r25, r24
     3ce:	88 27       	eor	r24, r24
     3d0:	29 81       	ldd	r18, Y+1	; 0x01
     3d2:	82 2b       	or	r24, r18
     3d4:	90 93 52 03 	sts	0x0352, r25
     3d8:	80 93 51 03 	sts	0x0351, r24

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
     3dc:	67 e6       	ldi	r22, 0x67	; 103
     3de:	73 e0       	ldi	r23, 0x03	; 3
     3e0:	8a e8       	ldi	r24, 0x8A	; 138
     3e2:	0e 94 b1 01 	call	0x362	; 0x362 <BMP280_ReadInt>
	// used in the calculations when taking measurements.

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
     3e6:	88 23       	and	r24, r24
     3e8:	09 f4       	brne	.+2      	; 0x3ec <BMP280_Init+0x40>
     3ea:	bb c0       	rjmp	.+374    	; 0x562 <BMP280_Init+0x1b6>
     3ec:	05 c0       	rjmp	.+10     	; 0x3f8 <BMP280_Init+0x4c>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     3ee:	10 92 52 03 	sts	0x0352, r1
     3f2:	10 92 51 03 	sts	0x0351, r1
     3f6:	b5 c0       	rjmp	.+362    	; 0x562 <BMP280_Init+0x1b6>
	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
     3f8:	65 e6       	ldi	r22, 0x65	; 101
     3fa:	73 e0       	ldi	r23, 0x03	; 3
     3fc:	8c e8       	ldi	r24, 0x8C	; 140
     3fe:	0e 94 b1 01 	call	0x362	; 0x362 <BMP280_ReadInt>

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
     402:	88 23       	and	r24, r24
     404:	09 f4       	brne	.+2      	; 0x408 <BMP280_Init+0x5c>
     406:	ad c0       	rjmp	.+346    	; 0x562 <BMP280_Init+0x1b6>
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
     408:	8e e8       	ldi	r24, 0x8E	; 142
     40a:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     40c:	62 e0       	ldi	r22, 0x02	; 2
     40e:	ce 01       	movw	r24, r28
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	0e 94 87 01 	call	0x30e	; 0x30e <BMP280_ReadBytes>
     416:	88 23       	and	r24, r24
     418:	99 f0       	breq	.+38     	; 0x440 <BMP280_Init+0x94>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     41a:	8a 81       	ldd	r24, Y+2	; 0x02
     41c:	90 e0       	ldi	r25, 0x00	; 0
     41e:	98 2f       	mov	r25, r24
     420:	88 27       	eor	r24, r24
     422:	29 81       	ldd	r18, Y+1	; 0x01
     424:	82 2b       	or	r24, r18
     426:	90 93 54 03 	sts	0x0354, r25
     42a:	80 93 53 03 	sts	0x0353, r24
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     42e:	63 e6       	ldi	r22, 0x63	; 99
     430:	73 e0       	ldi	r23, 0x03	; 3
     432:	80 e9       	ldi	r24, 0x90	; 144
     434:	0e 94 b1 01 	call	0x362	; 0x362 <BMP280_ReadInt>
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
     438:	88 23       	and	r24, r24
     43a:	09 f4       	brne	.+2      	; 0x43e <BMP280_Init+0x92>
     43c:	92 c0       	rjmp	.+292    	; 0x562 <BMP280_Init+0x1b6>
     43e:	05 c0       	rjmp	.+10     	; 0x44a <BMP280_Init+0x9e>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     440:	10 92 54 03 	sts	0x0354, r1
     444:	10 92 53 03 	sts	0x0353, r1
     448:	8c c0       	rjmp	.+280    	; 0x562 <BMP280_Init+0x1b6>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     44a:	61 e6       	ldi	r22, 0x61	; 97
     44c:	73 e0       	ldi	r23, 0x03	; 3
     44e:	82 e9       	ldi	r24, 0x92	; 146
     450:	0e 94 b1 01 	call	0x362	; 0x362 <BMP280_ReadInt>
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     454:	88 23       	and	r24, r24
     456:	09 f4       	brne	.+2      	; 0x45a <BMP280_Init+0xae>
     458:	84 c0       	rjmp	.+264    	; 0x562 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     45a:	6f e5       	ldi	r22, 0x5F	; 95
     45c:	73 e0       	ldi	r23, 0x03	; 3
     45e:	84 e9       	ldi	r24, 0x94	; 148
     460:	0e 94 b1 01 	call	0x362	; 0x362 <BMP280_ReadInt>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     464:	88 23       	and	r24, r24
     466:	09 f4       	brne	.+2      	; 0x46a <BMP280_Init+0xbe>
     468:	7c c0       	rjmp	.+248    	; 0x562 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     46a:	6d e5       	ldi	r22, 0x5D	; 93
     46c:	73 e0       	ldi	r23, 0x03	; 3
     46e:	86 e9       	ldi	r24, 0x96	; 150
     470:	0e 94 b1 01 	call	0x362	; 0x362 <BMP280_ReadInt>
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     474:	88 23       	and	r24, r24
     476:	09 f4       	brne	.+2      	; 0x47a <BMP280_Init+0xce>
     478:	74 c0       	rjmp	.+232    	; 0x562 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     47a:	6b e5       	ldi	r22, 0x5B	; 91
     47c:	73 e0       	ldi	r23, 0x03	; 3
     47e:	88 e9       	ldi	r24, 0x98	; 152
     480:	0e 94 b1 01 	call	0x362	; 0x362 <BMP280_ReadInt>
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     484:	88 23       	and	r24, r24
     486:	09 f4       	brne	.+2      	; 0x48a <BMP280_Init+0xde>
     488:	6c c0       	rjmp	.+216    	; 0x562 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     48a:	69 e5       	ldi	r22, 0x59	; 89
     48c:	73 e0       	ldi	r23, 0x03	; 3
     48e:	8a e9       	ldi	r24, 0x9A	; 154
     490:	0e 94 b1 01 	call	0x362	; 0x362 <BMP280_ReadInt>
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     494:	88 23       	and	r24, r24
     496:	09 f4       	brne	.+2      	; 0x49a <BMP280_Init+0xee>
     498:	64 c0       	rjmp	.+200    	; 0x562 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     49a:	67 e5       	ldi	r22, 0x57	; 87
     49c:	73 e0       	ldi	r23, 0x03	; 3
     49e:	8c e9       	ldi	r24, 0x9C	; 156
     4a0:	0e 94 b1 01 	call	0x362	; 0x362 <BMP280_ReadInt>
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     4a4:	88 23       	and	r24, r24
     4a6:	09 f4       	brne	.+2      	; 0x4aa <BMP280_Init+0xfe>
     4a8:	5c c0       	rjmp	.+184    	; 0x562 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9C, &dig_P8)  &&
		BMP280_ReadInt(0x9E, &dig_P9)){
     4aa:	65 e5       	ldi	r22, 0x55	; 85
     4ac:	73 e0       	ldi	r23, 0x03	; 3
     4ae:	8e e9       	ldi	r24, 0x9E	; 158
     4b0:	0e 94 b1 01 	call	0x362	; 0x362 <BMP280_ReadInt>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     4b4:	88 23       	and	r24, r24
     4b6:	09 f4       	brne	.+2      	; 0x4ba <BMP280_Init+0x10e>
     4b8:	54 c0       	rjmp	.+168    	; 0x562 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9E, &dig_P9)){
			printf("\nT: %i ,%i ,%i P: %i ,%i ,%i ,%i ,%i ,%i ,%i ,%1 ,%i \n",dig_T1,dig_T2,dig_T3,dig_P1,dig_P2,dig_P3,dig_P4,dig_P5,dig_P6,dig_P7,dig_P8,dig_P9);
     4ba:	80 91 56 03 	lds	r24, 0x0356
     4be:	8f 93       	push	r24
     4c0:	80 91 55 03 	lds	r24, 0x0355
     4c4:	8f 93       	push	r24
     4c6:	80 91 58 03 	lds	r24, 0x0358
     4ca:	8f 93       	push	r24
     4cc:	80 91 57 03 	lds	r24, 0x0357
     4d0:	8f 93       	push	r24
     4d2:	80 91 5a 03 	lds	r24, 0x035A
     4d6:	8f 93       	push	r24
     4d8:	80 91 59 03 	lds	r24, 0x0359
     4dc:	8f 93       	push	r24
     4de:	80 91 5c 03 	lds	r24, 0x035C
     4e2:	8f 93       	push	r24
     4e4:	80 91 5b 03 	lds	r24, 0x035B
     4e8:	8f 93       	push	r24
     4ea:	80 91 5e 03 	lds	r24, 0x035E
     4ee:	8f 93       	push	r24
     4f0:	80 91 5d 03 	lds	r24, 0x035D
     4f4:	8f 93       	push	r24
     4f6:	80 91 60 03 	lds	r24, 0x0360
     4fa:	8f 93       	push	r24
     4fc:	80 91 5f 03 	lds	r24, 0x035F
     500:	8f 93       	push	r24
     502:	80 91 62 03 	lds	r24, 0x0362
     506:	8f 93       	push	r24
     508:	80 91 61 03 	lds	r24, 0x0361
     50c:	8f 93       	push	r24
     50e:	80 91 64 03 	lds	r24, 0x0364
     512:	8f 93       	push	r24
     514:	80 91 63 03 	lds	r24, 0x0363
     518:	8f 93       	push	r24
     51a:	80 91 54 03 	lds	r24, 0x0354
     51e:	8f 93       	push	r24
     520:	80 91 53 03 	lds	r24, 0x0353
     524:	8f 93       	push	r24
     526:	80 91 66 03 	lds	r24, 0x0366
     52a:	8f 93       	push	r24
     52c:	80 91 65 03 	lds	r24, 0x0365
     530:	8f 93       	push	r24
     532:	80 91 68 03 	lds	r24, 0x0368
     536:	8f 93       	push	r24
     538:	80 91 67 03 	lds	r24, 0x0367
     53c:	8f 93       	push	r24
     53e:	80 91 52 03 	lds	r24, 0x0352
     542:	8f 93       	push	r24
     544:	80 91 51 03 	lds	r24, 0x0351
     548:	8f 93       	push	r24
     54a:	8d e3       	ldi	r24, 0x3D	; 61
     54c:	92 e0       	ldi	r25, 0x02	; 2
     54e:	9f 93       	push	r25
     550:	8f 93       	push	r24
     552:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <printf>
		return (1);
     556:	0f b6       	in	r0, 0x3f	; 63
     558:	f8 94       	cli
     55a:	de bf       	out	0x3e, r29	; 62
     55c:	0f be       	out	0x3f, r0	; 63
     55e:	cd bf       	out	0x3d, r28	; 61
     560:	81 e0       	ldi	r24, 0x01	; 1
	}
	else 
		return (0);
}
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <BMP280_SetOversampling>:
  @brief Sets the oversampling setting for the library
  @param[in] oss Oversampling setting
  @return 1
*****************************************************************************/
char BMP280_SetOversampling(short oss){
	oversampling = oss;
     56c:	90 93 50 03 	sts	0x0350, r25
     570:	80 93 4f 03 	sts	0x034F, r24
	return (1);
}
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	08 95       	ret

00000578 <Si7020_init>:
*****************************************************************************/
char Si7020_init() {
	// Initialize the TWI library at 200kHz
	//TWI_Init(200000);
	return 0;
}
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	08 95       	ret

0000057c <TGS2600_TurnOn>:
	DDRB |= 0b00100000;
	TGS2600_TurnOn();
}

void TGS2600_TurnOn(void){
	PORTB |= 0b00100000;
     57c:	2d 9a       	sbi	0x05, 5	; 5
     57e:	08 95       	ret

00000580 <TGS2600_Init>:
#include "devices/TGS2600.h"
#include "drivers/ADC.h"
#include "drivers/PWR.h"

void TGS2600_Init(void){
	DDRB |= 0b00100000;
     580:	25 9a       	sbi	0x04, 5	; 4
	TGS2600_TurnOn();
     582:	0e 94 be 02 	call	0x57c	; 0x57c <TGS2600_TurnOn>
     586:	08 95       	ret

00000588 <ADC_Init>:

/*************************************************************************//**
  @brief Initializes the ADC
*****************************************************************************/
void ADC_Init(void) {
	ADCSRA = (1<<ADEN)|(4<<ADPS0); //enables the ADC module, CPU clock prescale=16
     588:	84 e8       	ldi	r24, 0x84	; 132
     58a:	80 93 7a 00 	sts	0x007A, r24
	
	ADCSRC = 0x05|(1<<ADTHT0)|(1<<ADTHT1); //ADSUT=5
     58e:	85 ec       	ldi	r24, 0xC5	; 197
     590:	80 93 77 00 	sts	0x0077, r24
	while((ADCSRB&(1<<AVDDOK))==0);
     594:	eb e7       	ldi	r30, 0x7B	; 123
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	80 81       	ld	r24, Z
     59a:	88 23       	and	r24, r24
     59c:	ec f7       	brge	.-6      	; 0x598 <ADC_Init+0x10>
}
     59e:	08 95       	ret

000005a0 <PWR_Init>:

/*************************************************************************//**
  @brief Initializes the power management system
*****************************************************************************/
void PWR_Init(void){
	DDRD |= 0b11000000;
     5a0:	8a b1       	in	r24, 0x0a	; 10
     5a2:	80 6c       	ori	r24, 0xC0	; 192
     5a4:	8a b9       	out	0x0a, r24	; 10
     5a6:	08 95       	ret

000005a8 <PWR_TurnOn5V>:

/*************************************************************************//**
  @brief Turns on the 5V power supply
*****************************************************************************/
void PWR_TurnOn5V(void){
	PORTD |= 0b10000000;
     5a8:	5f 9a       	sbi	0x0b, 7	; 11
     5aa:	08 95       	ret

000005ac <SPI_SlaveInit>:

unsigned char buffer[16];

void SPI_SlaveInit(void)
{
	DDRB |= (1<<PORTB3); //Set MISO output
     5ac:	23 9a       	sbi	0x04, 3	; 4
	SPCR = (1<<SPE); //Enable SPI
     5ae:	80 e4       	ldi	r24, 0x40	; 64
     5b0:	8c bd       	out	0x2c, r24	; 44
     5b2:	08 95       	ret

000005b4 <TWI_Init>:
/*************************************************************************//**
  @brief Initializes the 2-wire Serial Interface as a master
  @param[in] freq SCL frequency (Do not exceed 400kHz)
  @return Status (@c 0 on failure, nonzero otherwise)
*****************************************************************************/
char TWI_Init(unsigned long freq){
     5b4:	9b 01       	movw	r18, r22
     5b6:	ac 01       	movw	r20, r24
	//printf("TWI_Init");
	TWSR=0x00;
     5b8:	10 92 b9 00 	sts	0x00B9, r1
	TWBR=(unsigned char)(((F_CPU/freq)-16UL)/8UL); //Compute settings value and set frequency
     5bc:	60 e0       	ldi	r22, 0x00	; 0
     5be:	74 e2       	ldi	r23, 0x24	; 36
     5c0:	84 ef       	ldi	r24, 0xF4	; 244
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	0e 94 03 0c 	call	0x1806	; 0x1806 <__udivmodsi4>
     5c8:	da 01       	movw	r26, r20
     5ca:	c9 01       	movw	r24, r18
     5cc:	40 97       	sbiw	r24, 0x10	; 16
     5ce:	a1 09       	sbc	r26, r1
     5d0:	b1 09       	sbc	r27, r1
     5d2:	68 94       	set
     5d4:	12 f8       	bld	r1, 2
     5d6:	b6 95       	lsr	r27
     5d8:	a7 95       	ror	r26
     5da:	97 95       	ror	r25
     5dc:	87 95       	ror	r24
     5de:	16 94       	lsr	r1
     5e0:	d1 f7       	brne	.-12     	; 0x5d6 <TWI_Init+0x22>
     5e2:	80 93 b8 00 	sts	0x00B8, r24
	TWCR=(1 << TWEN);
     5e6:	84 e0       	ldi	r24, 0x04	; 4
     5e8:	80 93 bc 00 	sts	0x00BC, r24
	
	//TWAR=0; //Disable slave mode
	
	return 1; //May want to actually check for success here
}
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	08 95       	ret

000005f0 <TWI_WriteByte>:
  @param[in] data byte to send
  @return Status code, TWI_SENT_ACK or TWI_SENT_NACK on success
*****************************************************************************/
char TWI_WriteByte(unsigned char data){
	//printf("TWI_WriteByte");
	TWDR = data; //Stage the data to send
     5f0:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
     5f4:	84 e8       	ldi	r24, 0x84	; 132
     5f6:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);//Send the data
     5fa:	ec eb       	ldi	r30, 0xBC	; 188
     5fc:	f0 e0       	ldi	r31, 0x00	; 0
     5fe:	80 81       	ld	r24, Z
     600:	88 23       	and	r24, r24
     602:	ec f7       	brge	.-6      	; 0x5fe <TWI_WriteByte+0xe>
	
	return TWSR&TWSR_MASK;//Return the status code
     604:	80 91 b9 00 	lds	r24, 0x00B9
}
     608:	88 7f       	andi	r24, 0xF8	; 248
     60a:	08 95       	ret

0000060c <TWI_BeginWrite>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAW_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginWrite(unsigned char address){
	//printf("TWI_BeginWrite");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
     60c:	94 ee       	ldi	r25, 0xE4	; 228
     60e:	90 93 bc 00 	sts	0x00BC, r25
	int i=0;
	while ((TWCR & (1<<TWINT)) == 0);
     612:	ec eb       	ldi	r30, 0xBC	; 188
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	90 81       	ld	r25, Z
     618:	99 23       	and	r25, r25
     61a:	ec f7       	brge	.-6      	; 0x616 <TWI_BeginWrite+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     61c:	ef e9       	ldi	r30, 0x9F	; 159
     61e:	ff e0       	ldi	r31, 0x0F	; 15
     620:	31 97       	sbiw	r30, 0x01	; 1
     622:	f1 f7       	brne	.-4      	; 0x620 <TWI_BeginWrite+0x14>
     624:	00 c0       	rjmp	.+0      	; 0x626 <TWI_BeginWrite+0x1a>
     626:	00 00       	nop
	_delay_ms(1);
	char stat = (TWSR & TWSR_MASK);
     628:	90 91 b9 00 	lds	r25, 0x00B9
     62c:	98 7f       	andi	r25, 0xF8	; 248
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
     62e:	98 30       	cpi	r25, 0x08	; 8
     630:	31 f0       	breq	.+12     	; 0x63e <TWI_BeginWrite+0x32>
     632:	90 31       	cpi	r25, 0x10	; 16
     634:	21 f0       	breq	.+8      	; 0x63e <TWI_BeginWrite+0x32>
     636:	80 91 b9 00 	lds	r24, 0x00B9
     63a:	88 7f       	andi	r24, 0xF8	; 248
     63c:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) & SLAW_MASK); //reset bit 0 to send a write bit, send
     63e:	88 0f       	add	r24, r24
     640:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	return stat;//Return the status code
}
     644:	08 95       	ret

00000646 <TWI_BeginRead>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAR_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginRead(unsigned char address){
	//printf("TWI_BeginRead");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
     646:	94 ee       	ldi	r25, 0xE4	; 228
     648:	90 93 bc 00 	sts	0x00BC, r25
	while ((TWCR & (1<<TWINT)) == 0);
     64c:	ec eb       	ldi	r30, 0xBC	; 188
     64e:	f0 e0       	ldi	r31, 0x00	; 0
     650:	90 81       	ld	r25, Z
     652:	99 23       	and	r25, r25
     654:	ec f7       	brge	.-6      	; 0x650 <TWI_BeginRead+0xa>
	
	char stat = (TWSR & TWSR_MASK);
     656:	90 91 b9 00 	lds	r25, 0x00B9
     65a:	98 7f       	andi	r25, 0xF8	; 248
	//printf("0x%1x",(unsigned)stat);
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
     65c:	98 30       	cpi	r25, 0x08	; 8
     65e:	31 f0       	breq	.+12     	; 0x66c <TWI_BeginRead+0x26>
     660:	90 31       	cpi	r25, 0x10	; 16
     662:	21 f0       	breq	.+8      	; 0x66c <TWI_BeginRead+0x26>
     664:	80 91 b9 00 	lds	r24, 0x00B9
     668:	88 7f       	andi	r24, 0xF8	; 248
     66a:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) | SLAR_MASK); //set bit 0 to send a read bit and send it
     66c:	88 0f       	add	r24, r24
     66e:	81 60       	ori	r24, 0x01	; 1
     670:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	
	return stat;//Return the status code
}
     674:	08 95       	ret

00000676 <TWI_ReadAck>:
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_ACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadAck(unsigned char *data){
	//printf("TWI_ReadAck");
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Start receiving, ending with an ACK
     676:	24 ec       	ldi	r18, 0xC4	; 196
     678:	20 93 bc 00 	sts	0x00BC, r18
	while ((TWCR & (1<<TWINT)) == 0);
     67c:	ec eb       	ldi	r30, 0xBC	; 188
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	20 81       	ld	r18, Z
     682:	22 23       	and	r18, r18
     684:	ec f7       	brge	.-6      	; 0x680 <TWI_ReadAck+0xa>
	*data=TWDR; //Store the data
     686:	20 91 bb 00 	lds	r18, 0x00BB
     68a:	fc 01       	movw	r30, r24
     68c:	20 83       	st	Z, r18
	
	return TWSR&TWSR_MASK;//Return the status code
     68e:	80 91 b9 00 	lds	r24, 0x00B9
}
     692:	88 7f       	andi	r24, 0xF8	; 248
     694:	08 95       	ret

00000696 <TWI_ReadNack>:
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_NACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadNack(unsigned char *data){
	//printf("TWI_ReadNack");
	TWCR = (1<<TWINT)|(1<<TWEN); //Start receiving, ending with a NACK
     696:	24 e8       	ldi	r18, 0x84	; 132
     698:	20 93 bc 00 	sts	0x00BC, r18
	while ((TWCR & (1<<TWINT)) == 0);
     69c:	ec eb       	ldi	r30, 0xBC	; 188
     69e:	f0 e0       	ldi	r31, 0x00	; 0
     6a0:	20 81       	ld	r18, Z
     6a2:	22 23       	and	r18, r18
     6a4:	ec f7       	brge	.-6      	; 0x6a0 <TWI_ReadNack+0xa>
	*data=TWDR; //Store the data
     6a6:	20 91 bb 00 	lds	r18, 0x00BB
     6aa:	fc 01       	movw	r30, r24
     6ac:	20 83       	st	Z, r18
	
	return TWSR&TWSR_MASK;//Return the status code
     6ae:	80 91 b9 00 	lds	r24, 0x00B9
}
     6b2:	88 7f       	andi	r24, 0xF8	; 248
     6b4:	08 95       	ret

000006b6 <TWI_Stop>:
  @brief Sends a Stop bit, be sure to send a Start bit before future interactions on the bus
  @return Status code, should always be nonzero
*****************************************************************************/
char TWI_Stop(void){
	//printf("TWI_Stop");
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     6b6:	84 e9       	ldi	r24, 0x94	; 148
     6b8:	80 93 bc 00 	sts	0x00BC, r24
	return 1;
}
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	08 95       	ret

000006c0 <TWI_Read>:
  @param[in] amount Number of bytes to recieve
  @param[in] whether or not to send an ACK on the last byte, sends NACK if false
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
     6c0:	9f 92       	push	r9
     6c2:	af 92       	push	r10
     6c4:	bf 92       	push	r11
     6c6:	cf 92       	push	r12
     6c8:	df 92       	push	r13
     6ca:	ef 92       	push	r14
     6cc:	ff 92       	push	r15
     6ce:	0f 93       	push	r16
     6d0:	1f 93       	push	r17
     6d2:	cf 93       	push	r28
     6d4:	df 93       	push	r29
     6d6:	7c 01       	movw	r14, r24
     6d8:	8b 01       	movw	r16, r22
     6da:	94 2e       	mov	r9, r20
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
     6dc:	16 16       	cp	r1, r22
     6de:	17 06       	cpc	r1, r23
     6e0:	f4 f4       	brge	.+60     	; 0x71e <TWI_Read+0x5e>
     6e2:	c0 e0       	ldi	r28, 0x00	; 0
     6e4:	d0 e0       	ldi	r29, 0x00	; 0
		if((ack==false) && ((amount-1)==i)){
     6e6:	6b 01       	movw	r12, r22
     6e8:	81 e0       	ldi	r24, 0x01	; 1
     6ea:	c8 1a       	sub	r12, r24
     6ec:	d1 08       	sbc	r13, r1
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
     6ee:	57 01       	movw	r10, r14
     6f0:	ac 0c       	add	r10, r12
     6f2:	bd 1c       	adc	r11, r13
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
		if((ack==false) && ((amount-1)==i)){
     6f4:	91 10       	cpse	r9, r1
     6f6:	07 c0       	rjmp	.+14     	; 0x706 <TWI_Read+0x46>
     6f8:	cc 16       	cp	r12, r28
     6fa:	dd 06       	cpc	r13, r29
     6fc:	21 f4       	brne	.+8      	; 0x706 <TWI_Read+0x46>
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
     6fe:	c5 01       	movw	r24, r10
     700:	0e 94 4b 03 	call	0x696	; 0x696 <TWI_ReadNack>
     704:	05 c0       	rjmp	.+10     	; 0x710 <TWI_Read+0x50>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}else{
			status=TWI_ReadAck(&data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
     706:	c7 01       	movw	r24, r14
     708:	8c 0f       	add	r24, r28
     70a:	9d 1f       	adc	r25, r29
     70c:	0e 94 3b 03 	call	0x676	; 0x676 <TWI_ReadAck>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}
		//printf("A");
		if(status!=TWI_REC_ACK)return status; //If NACK was selected, returning here is fine since the loop is already ending
     710:	80 35       	cpi	r24, 0x50	; 80
     712:	31 f4       	brne	.+12     	; 0x720 <TWI_Read+0x60>
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
     714:	21 96       	adiw	r28, 0x01	; 1
     716:	c0 17       	cp	r28, r16
     718:	d1 07       	cpc	r29, r17
     71a:	61 f7       	brne	.-40     	; 0x6f4 <TWI_Read+0x34>
     71c:	01 c0       	rjmp	.+2      	; 0x720 <TWI_Read+0x60>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
     71e:	80 e0       	ldi	r24, 0x00	; 0
		//will return if something goes wrong partway through
		//printf("B");
	}
	//printf("0x%1x",(unsigned)status);
	return status;
}
     720:	df 91       	pop	r29
     722:	cf 91       	pop	r28
     724:	1f 91       	pop	r17
     726:	0f 91       	pop	r16
     728:	ff 90       	pop	r15
     72a:	ef 90       	pop	r14
     72c:	df 90       	pop	r13
     72e:	cf 90       	pop	r12
     730:	bf 90       	pop	r11
     732:	af 90       	pop	r10
     734:	9f 90       	pop	r9
     736:	08 95       	ret

00000738 <USART0_Init>:
  @brief Initializes USART0 in asynchronous UART mode, 8 bit data, 1 stop bit
  @param[in] desired baud rate (configuration values computed using F_CPU)
*****************************************************************************/
void USART0_Init(unsigned long baud){
	
	stdout = &USART0_stdout; //make stdout print to USART0
     738:	26 e0       	ldi	r18, 0x06	; 6
     73a:	32 e0       	ldi	r19, 0x02	; 2
     73c:	30 93 48 08 	sts	0x0848, r19
     740:	20 93 47 08 	sts	0x0847, r18
	
	//Compute UBRR for baudrate setting
	unsigned short ubrr=(unsigned short)((F_CPU/(baud*16UL))-1);
     744:	dc 01       	movw	r26, r24
     746:	cb 01       	movw	r24, r22
     748:	88 0f       	add	r24, r24
     74a:	99 1f       	adc	r25, r25
     74c:	aa 1f       	adc	r26, r26
     74e:	bb 1f       	adc	r27, r27
     750:	88 0f       	add	r24, r24
     752:	99 1f       	adc	r25, r25
     754:	aa 1f       	adc	r26, r26
     756:	bb 1f       	adc	r27, r27
     758:	9c 01       	movw	r18, r24
     75a:	ad 01       	movw	r20, r26
     75c:	22 0f       	add	r18, r18
     75e:	33 1f       	adc	r19, r19
     760:	44 1f       	adc	r20, r20
     762:	55 1f       	adc	r21, r21
     764:	22 0f       	add	r18, r18
     766:	33 1f       	adc	r19, r19
     768:	44 1f       	adc	r20, r20
     76a:	55 1f       	adc	r21, r21
     76c:	60 e0       	ldi	r22, 0x00	; 0
     76e:	74 e2       	ldi	r23, 0x24	; 36
     770:	84 ef       	ldi	r24, 0xF4	; 244
     772:	90 e0       	ldi	r25, 0x00	; 0
     774:	0e 94 03 0c 	call	0x1806	; 0x1806 <__udivmodsi4>
     778:	21 50       	subi	r18, 0x01	; 1
     77a:	31 09       	sbc	r19, r1
	
	//Set BAUD rate.
	UBRR0H = (unsigned char) (ubrr >> 8);
     77c:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) ubrr;
     780:	20 93 c4 00 	sts	0x00C4, r18
	/*Set frame format. 8 data bit(settings bits UCSZ00 and UCSZ01  UCSR0B), 1 stop bit(by default and need not to be worried about). 
	The UCSZ01:0 bits combined with the UCSZ02 bit in UCSR0B sets the number of data
	bits (Character Size) in the frame that the Receiver and Transmitter use. 
	If a change on frame format is needed, make sure to modify UCSR0B register above accordingly.
	See datasheet pg. 390.*/
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
     784:	86 e0       	ldi	r24, 0x06	; 6
     786:	80 93 c2 00 	sts	0x00C2, r24
	
	//Enable receiver and transmitter. Enable the USART Receive Complete interrupt(RXCIE).
	//UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0));
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);//Enable RX/TX, no interrupts
     78a:	88 e1       	ldi	r24, 0x18	; 24
     78c:	80 93 c1 00 	sts	0x00C1, r24
     790:	08 95       	ret

00000792 <USART0_Transmit>:
Function contains busy loops for simplicity in debugging. Not production code.
  @brief Transmits a byte via USART0
  @param[in] data byte to be transmitted
*****************************************************************************/
void USART0_Transmit(unsigned char data){
	while(!(UCSR0A & (1 << UDRE0))); //Wait for the empty transmit buffer. (Waiting UDR0 to be empty.)
     792:	e0 ec       	ldi	r30, 0xC0	; 192
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	90 81       	ld	r25, Z
     798:	95 ff       	sbrs	r25, 5
     79a:	fd cf       	rjmp	.-6      	; 0x796 <USART0_Transmit+0x4>
		UDR0 = data;			//store the data in the USART Data Register
     79c:	80 93 c6 00 	sts	0x00C6, r24
     7a0:	08 95       	ret

000007a2 <USART0_putchar_printf>:
  @brief Called when stdout is being printed to USART0 (this is set up at runtime)
  @param[in] var byte to transmit
  @param[in/out] *stream Pointer to a stdio.h FILE io stream
  @return Status
*****************************************************************************/
int USART0_putchar_printf(char var, FILE *stream) {
     7a2:	cf 93       	push	r28
     7a4:	c8 2f       	mov	r28, r24
	if (var == '\n') USART0_Transmit('\r');
     7a6:	8a 30       	cpi	r24, 0x0A	; 10
     7a8:	19 f4       	brne	.+6      	; 0x7b0 <USART0_putchar_printf+0xe>
     7aa:	8d e0       	ldi	r24, 0x0D	; 13
     7ac:	0e 94 c9 03 	call	0x792	; 0x792 <USART0_Transmit>
	USART0_Transmit(var);
     7b0:	8c 2f       	mov	r24, r28
     7b2:	0e 94 c9 03 	call	0x792	; 0x792 <USART0_Transmit>
	return 0;
}
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	cf 91       	pop	r28
     7bc:	08 95       	ret

000007be <__vector_13>:
#include "Event/Event_Timer.h"

#ifdef ATMEL

ISR(TIMER2_COMPA_vect)
{
     7be:	1f 92       	push	r1
     7c0:	0f 92       	push	r0
     7c2:	0f b6       	in	r0, 0x3f	; 63
     7c4:	0f 92       	push	r0
     7c6:	11 24       	eor	r1, r1
     7c8:	2f 93       	push	r18
     7ca:	3f 93       	push	r19
     7cc:	4f 93       	push	r20
     7ce:	5f 93       	push	r21
     7d0:	6f 93       	push	r22
     7d2:	7f 93       	push	r23
     7d4:	8f 93       	push	r24
     7d6:	9f 93       	push	r25
     7d8:	af 93       	push	r26
     7da:	bf 93       	push	r27
     7dc:	ef 93       	push	r30
     7de:	ff 93       	push	r31
	timer_usage ++;
     7e0:	80 91 69 03 	lds	r24, 0x0369
     7e4:	90 91 6a 03 	lds	r25, 0x036A
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	90 93 6a 03 	sts	0x036A, r25
     7ee:	80 93 69 03 	sts	0x0369, r24
	printf("count1 = %d\n",timer_usage);
     7f2:	9f 93       	push	r25
     7f4:	8f 93       	push	r24
     7f6:	84 e7       	ldi	r24, 0x74	; 116
     7f8:	92 e0       	ldi	r25, 0x02	; 2
     7fa:	9f 93       	push	r25
     7fc:	8f 93       	push	r24
     7fe:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <printf>
	handle_timeoutq_event();
     802:	0e 94 6e 05 	call	0xadc	; 0xadc <handle_timeoutq_event>
     806:	0f 90       	pop	r0
     808:	0f 90       	pop	r0
     80a:	0f 90       	pop	r0
     80c:	0f 90       	pop	r0
}
     80e:	ff 91       	pop	r31
     810:	ef 91       	pop	r30
     812:	bf 91       	pop	r27
     814:	af 91       	pop	r26
     816:	9f 91       	pop	r25
     818:	8f 91       	pop	r24
     81a:	7f 91       	pop	r23
     81c:	6f 91       	pop	r22
     81e:	5f 91       	pop	r21
     820:	4f 91       	pop	r20
     822:	3f 91       	pop	r19
     824:	2f 91       	pop	r18
     826:	0f 90       	pop	r0
     828:	0f be       	out	0x3f, r0	; 63
     82a:	0f 90       	pop	r0
     82c:	1f 90       	pop	r1
     82e:	18 95       	reti

00000830 <init_Event_Timer>:
/* Initialization Routine Example 3 : Timer 2 Async operation */
/* Clock for Timer 2 is taken from crystal connected to TOSC pins */
void init_Event_Timer(void)
{
	/* Select clock source as crystal on TOSCn pins */
	ASSR |= 1 << AS2;
     830:	e6 eb       	ldi	r30, 0xB6	; 182
     832:	f0 e0       	ldi	r31, 0x00	; 0
     834:	80 81       	ld	r24, Z
     836:	80 62       	ori	r24, 0x20	; 32
     838:	80 83       	st	Z, r24
	/* Clear Timer on compare match. Toggle OC2A on Compare Match */
	TCCR2A = (1<<COM2A0) | (1<<WGM21);
     83a:	82 e4       	ldi	r24, 0x42	; 66
     83c:	80 93 b0 00 	sts	0x00B0, r24
	/* Timer Clock = 32768 Hz / 1024 */
	TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
     840:	87 e0       	ldi	r24, 0x07	; 7
     842:	80 93 b1 00 	sts	0x00B1, r24
     846:	08 95       	ret

00000848 <init_set_timer>:
}


void general_set_timer( int period_number )
{
    OCR2A = period_number * APERIOD ;
     848:	88 0f       	add	r24, r24
     84a:	88 0f       	add	r24, r24
     84c:	88 0f       	add	r24, r24
     84e:	80 93 b3 00 	sts	0x00B3, r24
{
    general_set_timer( period_number );
    /* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) 
     852:	e6 eb       	ldi	r30, 0xB6	; 182
     854:	f0 e0       	ldi	r31, 0x00	; 0
     856:	80 81       	ld	r24, Z
     858:	8f 71       	andi	r24, 0x1F	; 31
     85a:	e9 f7       	brne	.-6      	; 0x856 <init_set_timer+0xe>
		| (1 << TCR2BUB) | (1<< TCN2UB))));
	/* Clear pending interrupts */
	TIFR2  = (1 << TOV2) | (1 << OCF2A) | (1 << OCF2B);
     85c:	87 e0       	ldi	r24, 0x07	; 7
     85e:	87 bb       	out	0x17, r24	; 23
	/* Enable Timer 2 Output Compare Match Interrupt */
	TIMSK2 = (1 << OCIE2A);
     860:	82 e0       	ldi	r24, 0x02	; 2
     862:	80 93 70 00 	sts	0x0070, r24
     866:	08 95       	ret

00000868 <set_timer>:
}

void set_timer( int period_number )
{
     868:	cf 93       	push	r28
     86a:	df 93       	push	r29
     86c:	c8 2f       	mov	r28, r24
     86e:	d9 2f       	mov	r29, r25
	printf("set timer gap = %d\n\n", period_number);
     870:	9f 93       	push	r25
     872:	8f 93       	push	r24
     874:	21 e8       	ldi	r18, 0x81	; 129
     876:	32 e0       	ldi	r19, 0x02	; 2
     878:	3f 93       	push	r19
     87a:	2f 93       	push	r18
     87c:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <printf>
    if( timer_usage == 0 )
     880:	0f 90       	pop	r0
     882:	0f 90       	pop	r0
     884:	0f 90       	pop	r0
     886:	0f 90       	pop	r0
     888:	20 91 69 03 	lds	r18, 0x0369
     88c:	30 91 6a 03 	lds	r19, 0x036A
     890:	23 2b       	or	r18, r19
     892:	29 f4       	brne	.+10     	; 0x89e <set_timer+0x36>
    {
        init_set_timer( period_number );
     894:	8c 2f       	mov	r24, r28
     896:	9d 2f       	mov	r25, r29
     898:	0e 94 24 04 	call	0x848	; 0x848 <init_set_timer>
     89c:	05 c0       	rjmp	.+10     	; 0x8a8 <set_timer+0x40>
}


void general_set_timer( int period_number )
{
    OCR2A = period_number * APERIOD ;
     89e:	cc 0f       	add	r28, r28
     8a0:	cc 0f       	add	r28, r28
     8a2:	cc 0f       	add	r28, r28
     8a4:	c0 93 b3 00 	sts	0x00B3, r28
    }
    else
    {
        general_set_timer( period_number );
    }
}
     8a8:	df 91       	pop	r29
     8aa:	cf 91       	pop	r28
     8ac:	08 95       	ret

000008ae <init_timeoutq>:
/* 
 * like other many stuff, we got an init function
 * fill the freelist with all entries and left the timeoutq empty
 */
void init_timeoutq()
{
     8ae:	0f 93       	push	r16
     8b0:	1f 93       	push	r17
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
	int i;

	timeoutq = (struct event *)&TQ;
     8b6:	e8 e9       	ldi	r30, 0x98	; 152
     8b8:	f7 e0       	ldi	r31, 0x07	; 7
     8ba:	f0 93 a0 07 	sts	0x07A0, r31
     8be:	e0 93 9f 07 	sts	0x079F, r30
	LL_INIT(timeoutq);
     8c2:	f0 93 9b 07 	sts	0x079B, r31
     8c6:	e0 93 9a 07 	sts	0x079A, r30
     8ca:	f1 83       	std	Z+1, r31	; 0x01
     8cc:	e0 83       	st	Z, r30
	freelist = (struct event *)&FL;
     8ce:	e2 e1       	ldi	r30, 0x12	; 18
     8d0:	f8 e0       	ldi	r31, 0x08	; 8
     8d2:	f0 93 17 08 	sts	0x0817, r31
     8d6:	e0 93 16 08 	sts	0x0816, r30
	LL_INIT(freelist);
     8da:	f0 93 15 08 	sts	0x0815, r31
     8de:	e0 93 14 08 	sts	0x0814, r30
     8e2:	f1 83       	std	Z+1, r31	; 0x01
     8e4:	e0 83       	st	Z, r30
     8e6:	ce e7       	ldi	r28, 0x7E	; 126
     8e8:	d6 e0       	ldi	r29, 0x06	; 6
     8ea:	0e e8       	ldi	r16, 0x8E	; 142
     8ec:	17 e0       	ldi	r17, 0x07	; 7

	for (i=0; i<MAX_EVENTS; i++) {
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
     8ee:	be 01       	movw	r22, r28
     8f0:	80 91 16 08 	lds	r24, 0x0816
     8f4:	90 91 17 08 	lds	r25, 0x0817
     8f8:	0e 94 46 08 	call	0x108c	; 0x108c <ll_r_insert>
     8fc:	61 96       	adiw	r28, 0x11	; 17
	timeoutq = (struct event *)&TQ;
	LL_INIT(timeoutq);
	freelist = (struct event *)&FL;
	LL_INIT(freelist);

	for (i=0; i<MAX_EVENTS; i++) {
     8fe:	c0 17       	cp	r28, r16
     900:	d1 07       	cpc	r29, r17
     902:	a9 f7       	brne	.-22     	; 0x8ee <init_timeoutq+0x40>
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
	}

	return;
}
     904:	df 91       	pop	r29
     906:	cf 91       	pop	r28
     908:	1f 91       	pop	r17
     90a:	0f 91       	pop	r16
     90c:	08 95       	ret

0000090e <get_next_interval>:
 * return the numbers of period we should launch next
 */
int get_next_interval()
{
	int wait_time = MAX_SLEEP_INTERVAL;
	struct event * ev = ( struct event * ) LL_TOP( timeoutq );
     90e:	80 91 9f 07 	lds	r24, 0x079F
     912:	90 91 a0 07 	lds	r25, 0x07A0
     916:	0e 94 3a 08 	call	0x1074	; 0x1074 <ll_first>

    /* no event in queue */
    // TODO : to optimize the sleep time or let the CPU sleep or set up some other interrupts
	if( EV_NULL == ev )
     91a:	00 97       	sbiw	r24, 0x00	; 0
     91c:	59 f0       	breq	.+22     	; 0x934 <get_next_interval+0x26>
	    return wait_time;
	wait_time = ( wait_time > ( ev->timeout ) ) ? ( ev->timeout ) : wait_time ;
     91e:	fc 01       	movw	r30, r24
     920:	24 81       	ldd	r18, Z+4	; 0x04
     922:	35 81       	ldd	r19, Z+5	; 0x05
     924:	25 30       	cpi	r18, 0x05	; 5
     926:	31 05       	cpc	r19, r1
     928:	14 f0       	brlt	.+4      	; 0x92e <get_next_interval+0x20>
     92a:	24 e0       	ldi	r18, 0x04	; 4
     92c:	30 e0       	ldi	r19, 0x00	; 0
	return wait_time;
     92e:	82 2f       	mov	r24, r18
     930:	93 2f       	mov	r25, r19
     932:	08 95       	ret
	struct event * ev = ( struct event * ) LL_TOP( timeoutq );

    /* no event in queue */
    // TODO : to optimize the sleep time or let the CPU sleep or set up some other interrupts
	if( EV_NULL == ev )
	    return wait_time;
     934:	84 e0       	ldi	r24, 0x04	; 4
     936:	90 e0       	ldi	r25, 0x00	; 0
	wait_time = ( wait_time > ( ev->timeout ) ) ? ( ev->timeout ) : wait_time ;
	return wait_time;
}
     938:	08 95       	ret

0000093a <insert_timeoutq_event>:
     */
    return 0;
}

void insert_timeoutq_event( struct event * ep)
{
     93a:	cf 93       	push	r28
     93c:	df 93       	push	r29
     93e:	dc 01       	movw	r26, r24
	// Try to insert it according to timeout and timeoutq
struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
     940:	c0 91 9f 07 	lds	r28, 0x079F
     944:	d0 91 a0 07 	lds	r29, 0x07A0
     948:	ea 81       	ldd	r30, Y+2	; 0x02
     94a:	fb 81       	ldd	r31, Y+3	; 0x03
     94c:	ce 17       	cp	r28, r30
     94e:	df 07       	cpc	r29, r31
     950:	09 f1       	breq	.+66     	; 0x994 <insert_timeoutq_event+0x5a>
	{
		if( it != EV_NULL )
     952:	30 97       	sbiw	r30, 0x00	; 0
     954:	c9 f0       	breq	.+50     	; 0x988 <insert_timeoutq_event+0x4e>
		{
			if( ( it->timeout ) > ( ep->timeout ) )
     956:	44 81       	ldd	r20, Z+4	; 0x04
     958:	55 81       	ldd	r21, Z+5	; 0x05
     95a:	14 96       	adiw	r26, 0x04	; 4
     95c:	2d 91       	ld	r18, X+
     95e:	3c 91       	ld	r19, X
     960:	15 97       	sbiw	r26, 0x05	; 5
     962:	24 17       	cp	r18, r20
     964:	35 07       	cpc	r19, r21
     966:	54 f4       	brge	.+20     	; 0x97c <insert_timeoutq_event+0x42>
			{
				it->timeout -= ep->timeout;
     968:	42 1b       	sub	r20, r18
     96a:	53 0b       	sbc	r21, r19
     96c:	55 83       	std	Z+5, r21	; 0x05
     96e:	44 83       	std	Z+4, r20	; 0x04
				LL_L_INSERT( it, ep );
     970:	bd 01       	movw	r22, r26
     972:	80 81       	ld	r24, Z
     974:	91 81       	ldd	r25, Z+1	; 0x01
     976:	0e 94 46 08 	call	0x108c	; 0x108c <ll_r_insert>
     97a:	15 c0       	rjmp	.+42     	; 0x9a6 <insert_timeoutq_event+0x6c>
				// printf("left insert \n");
				break;
			}
			else
			{
				ep->timeout -= it->timeout;
     97c:	24 1b       	sub	r18, r20
     97e:	35 0b       	sbc	r19, r21
     980:	15 96       	adiw	r26, 0x05	; 5
     982:	3c 93       	st	X, r19
     984:	2e 93       	st	-X, r18
     986:	14 97       	sbiw	r26, 0x04	; 4
	// Try to insert it according to timeout and timeoutq
struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
     988:	02 80       	ldd	r0, Z+2	; 0x02
     98a:	f3 81       	ldd	r31, Z+3	; 0x03
     98c:	e0 2d       	mov	r30, r0
     98e:	ce 17       	cp	r28, r30
     990:	df 07       	cpc	r29, r31
     992:	f9 f6       	brne	.-66     	; 0x952 <insert_timeoutq_event+0x18>
	}
	
	// If not insert it left to the header
	if( is_pushed == 0 )
	{
		LL_APPEND(timeoutq, ep);
     994:	e0 91 9f 07 	lds	r30, 0x079F
     998:	f0 91 a0 07 	lds	r31, 0x07A0
     99c:	bd 01       	movw	r22, r26
     99e:	80 81       	ld	r24, Z
     9a0:	91 81       	ldd	r25, Z+1	; 0x01
     9a2:	0e 94 46 08 	call	0x108c	; 0x108c <ll_r_insert>

#ifdef DEBUG
	// dump_timeoutq();
#endif

}
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <load_new_sensor>:

/* 
 * load a brand new sensor activity in the scheduler
 */
int load_new_sensor( int timeout, int repeat, BaseSensor *sensor_ptr, int otherinfo )
{
     9ac:	cf 92       	push	r12
     9ae:	df 92       	push	r13
     9b0:	ef 92       	push	r14
     9b2:	ff 92       	push	r15
     9b4:	0f 93       	push	r16
     9b6:	1f 93       	push	r17
     9b8:	cf 93       	push	r28
     9ba:	df 93       	push	r29
     9bc:	6c 01       	movw	r12, r24
     9be:	7b 01       	movw	r14, r22
     9c0:	8a 01       	movw	r16, r20
     9c2:	e9 01       	movw	r28, r18

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
     9c4:	80 91 16 08 	lds	r24, 0x0816
     9c8:	90 91 17 08 	lds	r25, 0x0817
     9cc:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <ll_pop>
     9d0:	fc 01       	movw	r30, r24
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
     9d2:	00 97       	sbiw	r24, 0x00	; 0
     9d4:	b1 f0       	breq	.+44     	; 0xa02 <load_new_sensor+0x56>
        return -1;
    ep->timeout = timeout;
     9d6:	d5 82       	std	Z+5, r13	; 0x05
     9d8:	c4 82       	std	Z+4, r12	; 0x04
    ep->repeat_interval = repeat;
     9da:	f7 82       	std	Z+7, r15	; 0x07
     9dc:	e6 82       	std	Z+6, r14	; 0x06
	ep->borrow_timeout = 0;
     9de:	11 86       	std	Z+9, r1	; 0x09
     9e0:	10 86       	std	Z+8, r1	; 0x08
    ep->sp = sensor_ptr;
     9e2:	13 87       	std	Z+11, r17	; 0x0b
     9e4:	02 87       	std	Z+10, r16	; 0x0a
    ep->info = otherinfo;
     9e6:	d5 87       	std	Z+13, r29	; 0x0d
     9e8:	c4 87       	std	Z+12, r28	; 0x0c
    ep->cur_state = Ready;
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	86 87       	std	Z+14, r24	; 0x0e
    ep->run = run_next;
     9ee:	8c e0       	ldi	r24, 0x0C	; 12
     9f0:	95 e0       	ldi	r25, 0x05	; 5
     9f2:	90 8b       	std	Z+16, r25	; 0x10
     9f4:	87 87       	std	Z+15, r24	; 0x0f
    insert_timeoutq_event( ep );
     9f6:	cf 01       	movw	r24, r30
     9f8:	0e 94 9d 04 	call	0x93a	; 0x93a <insert_timeoutq_event>
    return 0;
     9fc:	80 e0       	ldi	r24, 0x00	; 0
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	02 c0       	rjmp	.+4      	; 0xa06 <load_new_sensor+0x5a>

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
        return -1;
     a02:	8f ef       	ldi	r24, 0xFF	; 255
     a04:	9f ef       	ldi	r25, 0xFF	; 255
    ep->info = otherinfo;
    ep->cur_state = Ready;
    ep->run = run_next;
    insert_timeoutq_event( ep );
    return 0;
}
     a06:	df 91       	pop	r29
     a08:	cf 91       	pop	r28
     a0a:	1f 91       	pop	r17
     a0c:	0f 91       	pop	r16
     a0e:	ff 90       	pop	r15
     a10:	ef 90       	pop	r14
     a12:	df 90       	pop	r13
     a14:	cf 90       	pop	r12
     a16:	08 95       	ret

00000a18 <run_next>:
#include "utilities/llist.h"
// #include "Event.h"

/* run-next function */
static void run_next( struct event *p )
{
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	ec 01       	movw	r28, r24
    int retNum;
    int data = 0;

    /* sanity check */
    if( p == EV_NULL )
     a1e:	00 97       	sbiw	r24, 0x00	; 0
     a20:	49 f4       	brne	.+18     	; 0xa34 <run_next+0x1c>
    {
#ifdef DEBUG
        printf("Null Event Error !!!");
     a22:	86 e9       	ldi	r24, 0x96	; 150
     a24:	92 e0       	ldi	r25, 0x02	; 2
     a26:	9f 93       	push	r25
     a28:	8f 93       	push	r24
     a2a:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <printf>
#endif
        return;
     a2e:	0f 90       	pop	r0
     a30:	0f 90       	pop	r0
     a32:	51 c0       	rjmp	.+162    	; 0xad6 <run_next+0xbe>
    }


#ifdef DEBUG
    printf("cur_state = %d\n", p->cur_state);
     a34:	8e 85       	ldd	r24, Y+14	; 0x0e
     a36:	1f 92       	push	r1
     a38:	8f 93       	push	r24
     a3a:	8b ea       	ldi	r24, 0xAB	; 171
     a3c:	92 e0       	ldi	r25, 0x02	; 2
     a3e:	9f 93       	push	r25
     a40:	8f 93       	push	r24
     a42:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <printf>
#endif
    switch( p->cur_state )
     a46:	0f 90       	pop	r0
     a48:	0f 90       	pop	r0
     a4a:	0f 90       	pop	r0
     a4c:	0f 90       	pop	r0
     a4e:	8e 85       	ldd	r24, Y+14	; 0x0e
     a50:	81 30       	cpi	r24, 0x01	; 1
     a52:	39 f0       	breq	.+14     	; 0xa62 <run_next+0x4a>
     a54:	18 f0       	brcs	.+6      	; 0xa5c <run_next+0x44>
     a56:	82 30       	cpi	r24, 0x02	; 2
     a58:	e1 f1       	breq	.+120    	; 0xad2 <run_next+0xba>
     a5a:	3d c0       	rjmp	.+122    	; 0xad6 <run_next+0xbe>
    {
        /* New : not init yet */
        case New :
            // TODO : if retNum not valid go to Oops state
            // retNum = p->sp->vmt->Init();
            p->cur_state = Ready;
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8e 87       	std	Y+14, r24	; 0x0e
            break;
     a60:	3a c0       	rjmp	.+116    	; 0xad6 <run_next+0xbe>
        /* Ready : ready to activate collection preprocess */
        case Ready :
			retNum = p->sp->vmt->PreProcessing(p->sp);
     a62:	8a 85       	ldd	r24, Y+10	; 0x0a
     a64:	9b 85       	ldd	r25, Y+11	; 0x0b
     a66:	dc 01       	movw	r26, r24
     a68:	12 96       	adiw	r26, 0x02	; 2
     a6a:	ed 91       	ld	r30, X+
     a6c:	fc 91       	ld	r31, X
     a6e:	13 97       	sbiw	r26, 0x03	; 3
     a70:	06 80       	ldd	r0, Z+6	; 0x06
     a72:	f7 81       	ldd	r31, Z+7	; 0x07
     a74:	e0 2d       	mov	r30, r0
     a76:	09 95       	icall
			if ( retNum == -1 )
     a78:	8f 3f       	cpi	r24, 0xFF	; 255
     a7a:	bf ef       	ldi	r27, 0xFF	; 255
     a7c:	9b 07       	cpc	r25, r27
     a7e:	19 f4       	brne	.+6      	; 0xa86 <run_next+0x6e>
			{
				p->cur_state = Oops;
     a80:	84 e0       	ldi	r24, 0x04	; 4
     a82:	8e 87       	std	Y+14, r24	; 0x0e
     a84:	28 c0       	rjmp	.+80     	; 0xad6 <run_next+0xbe>
			}
			else if( retNum == 0 )
     a86:	00 97       	sbiw	r24, 0x00	; 0
     a88:	d1 f4       	brne	.+52     	; 0xabe <run_next+0xa6>
			{
				p->cur_state = Ready;
     a8a:	81 e0       	ldi	r24, 0x01	; 1
     a8c:	8e 87       	std	Y+14, r24	; 0x0e
				data = p->sp->vmt->Collect(p->sp);
     a8e:	8a 85       	ldd	r24, Y+10	; 0x0a
     a90:	9b 85       	ldd	r25, Y+11	; 0x0b
     a92:	dc 01       	movw	r26, r24
     a94:	12 96       	adiw	r26, 0x02	; 2
     a96:	ed 91       	ld	r30, X+
     a98:	fc 91       	ld	r31, X
     a9a:	13 97       	sbiw	r26, 0x03	; 3
     a9c:	00 84       	ldd	r0, Z+8	; 0x08
     a9e:	f1 85       	ldd	r31, Z+9	; 0x09
     aa0:	e0 2d       	mov	r30, r0
     aa2:	09 95       	icall
#ifdef DEBUG
				printf("data : %d\n", data);
     aa4:	9f 93       	push	r25
     aa6:	8f 93       	push	r24
     aa8:	8b eb       	ldi	r24, 0xBB	; 187
     aaa:	92 e0       	ldi	r25, 0x02	; 2
     aac:	9f 93       	push	r25
     aae:	8f 93       	push	r24
     ab0:	0e 94 a3 0e 	call	0x1d46	; 0x1d46 <printf>
     ab4:	0f 90       	pop	r0
     ab6:	0f 90       	pop	r0
     ab8:	0f 90       	pop	r0
     aba:	0f 90       	pop	r0
     abc:	0c c0       	rjmp	.+24     	; 0xad6 <run_next+0xbe>
#endif
			}
			else
			{
				p->cur_state = Running;
     abe:	22 e0       	ldi	r18, 0x02	; 2
     ac0:	2e 87       	std	Y+14, r18	; 0x0e
				p->timeout = retNum;
     ac2:	9d 83       	std	Y+5, r25	; 0x05
     ac4:	8c 83       	std	Y+4, r24	; 0x04
				p->borrow_timeout = retNum;
     ac6:	99 87       	std	Y+9, r25	; 0x09
     ac8:	88 87       	std	Y+8, r24	; 0x08
				insert_timeoutq_event( p );
     aca:	ce 01       	movw	r24, r28
     acc:	0e 94 9d 04 	call	0x93a	; 0x93a <insert_timeoutq_event>
     ad0:	02 c0       	rjmp	.+4      	; 0xad6 <run_next+0xbe>
            //
            break;
        /* Running : ready to pull data right away */
        case Running :
            //      data = p->sp->vmt->Collect();
            p->cur_state = Ready;
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	8e 87       	std	Y+14, r24	; 0x0e
    
    // TODO : determine which event run next
    // may need to add a state machine in event
    // run function like:
    // p->sp->vmt->Init();
}
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	08 95       	ret

00000adc <handle_timeoutq_event>:

/* 
 * handle the next one in timeout queue
 */
int handle_timeoutq_event( )
{
     adc:	cf 93       	push	r28
     ade:	df 93       	push	r29
	/* assume we get a valid one */
	struct event * ev = (struct event * )LL_TOP( timeoutq );
     ae0:	80 91 9f 07 	lds	r24, 0x079F
     ae4:	90 91 a0 07 	lds	r25, 0x07A0
     ae8:	0e 94 3a 08 	call	0x1074	; 0x1074 <ll_first>
     aec:	ec 01       	movw	r28, r24
	if( EV_NULL == ev )
     aee:	00 97       	sbiw	r24, 0x00	; 0
     af0:	a1 f1       	breq	.+104    	; 0xb5a <handle_timeoutq_event+0x7e>
    // TODO : add a last_interval var in event_timer.h
    // ev->timeout -= get_later_inerval();
	// if( ev->timeout <= 0 )
    
    /* sanity check */
    if( ev->sp == NULL )
     af2:	8a 85       	ldd	r24, Y+10	; 0x0a
     af4:	9b 85       	ldd	r25, Y+11	; 0x0b
     af6:	89 2b       	or	r24, r25
     af8:	99 f1       	breq	.+102    	; 0xb60 <handle_timeoutq_event+0x84>
        return -1;

    ev->run( ev );
     afa:	ef 85       	ldd	r30, Y+15	; 0x0f
     afc:	f8 89       	ldd	r31, Y+16	; 0x10
     afe:	ce 01       	movw	r24, r28
     b00:	09 95       	icall

    // printf("running some function\n");
    LL_POP( timeoutq );
     b02:	80 91 9f 07 	lds	r24, 0x079F
     b06:	90 91 a0 07 	lds	r25, 0x07A0
     b0a:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <ll_pop>
    if( ev->repeat_interval != 0 )
     b0e:	4e 81       	ldd	r20, Y+6	; 0x06
     b10:	5f 81       	ldd	r21, Y+7	; 0x07
     b12:	41 15       	cp	r20, r1
     b14:	51 05       	cpc	r21, r1
     b16:	99 f0       	breq	.+38     	; 0xb3e <handle_timeoutq_event+0x62>
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
     b18:	88 85       	ldd	r24, Y+8	; 0x08
     b1a:	99 85       	ldd	r25, Y+9	; 0x09
     b1c:	9a 01       	movw	r18, r20
     b1e:	28 1b       	sub	r18, r24
     b20:	39 0b       	sbc	r19, r25
     b22:	3d 83       	std	Y+5, r19	; 0x05
     b24:	2c 83       	std	Y+4, r18	; 0x04
		while( ev->timeout < 0 )
     b26:	33 23       	and	r19, r19
     b28:	34 f4       	brge	.+12     	; 0xb36 <handle_timeoutq_event+0x5a>
		{
			ev->timeout += ev->repeat_interval;
     b2a:	24 0f       	add	r18, r20
     b2c:	35 1f       	adc	r19, r21
    // printf("running some function\n");
    LL_POP( timeoutq );
    if( ev->repeat_interval != 0 )
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
		while( ev->timeout < 0 )
     b2e:	33 23       	and	r19, r19
     b30:	e4 f3       	brlt	.-8      	; 0xb2a <handle_timeoutq_event+0x4e>
     b32:	3d 83       	std	Y+5, r19	; 0x05
     b34:	2c 83       	std	Y+4, r18	; 0x04
		{
			ev->timeout += ev->repeat_interval;
		}
        insert_timeoutq_event( ev );
     b36:	ce 01       	movw	r24, r28
     b38:	0e 94 9d 04 	call	0x93a	; 0x93a <insert_timeoutq_event>
     b3c:	07 c0       	rjmp	.+14     	; 0xb4c <handle_timeoutq_event+0x70>
    }
    else
    {
        LL_PUSH( freelist, ev );
     b3e:	be 01       	movw	r22, r28
     b40:	80 91 16 08 	lds	r24, 0x0816
     b44:	90 91 17 08 	lds	r25, 0x0817
     b48:	0e 94 46 08 	call	0x108c	; 0x108c <ll_r_insert>
    }
	set_timer(get_next_interval());
     b4c:	0e 94 87 04 	call	0x90e	; 0x90e <get_next_interval>
     b50:	0e 94 34 04 	call	0x868	; 0x868 <set_timer>
    /* TODO : update next event by calling set_timer(int) in Event_timer.h 
     * set_timer( get_next_interval() );
     */
    return 0;
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	05 c0       	rjmp	.+10     	; 0xb64 <handle_timeoutq_event+0x88>
int handle_timeoutq_event( )
{
	/* assume we get a valid one */
	struct event * ev = (struct event * )LL_TOP( timeoutq );
	if( EV_NULL == ev )
        return -1;
     b5a:	8f ef       	ldi	r24, 0xFF	; 255
     b5c:	9f ef       	ldi	r25, 0xFF	; 255
     b5e:	02 c0       	rjmp	.+4      	; 0xb64 <handle_timeoutq_event+0x88>
    // ev->timeout -= get_later_inerval();
	// if( ev->timeout <= 0 )
    
    /* sanity check */
    if( ev->sp == NULL )
        return -1;
     b60:	8f ef       	ldi	r24, 0xFF	; 255
     b62:	9f ef       	ldi	r25, 0xFF	; 255
	set_timer(get_next_interval());
    /* TODO : update next event by calling set_timer(int) in Event_timer.h 
     * set_timer( get_next_interval() );
     */
    return 0;
}
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	08 95       	ret

00000b6a <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     b6a:	14 be       	out	0x34, r1	; 52
  wdt_disable();
     b6c:	88 e1       	ldi	r24, 0x18	; 24
     b6e:	0f b6       	in	r0, 0x3f	; 63
     b70:	f8 94       	cli
     b72:	80 93 60 00 	sts	0x0060, r24
     b76:	10 92 60 00 	sts	0x0060, r1
     b7a:	0f be       	out	0x3f, r0	; 63

  CLKPR = 1 << CLKPCE;
     b7c:	e1 e6       	ldi	r30, 0x61	; 97
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 e8       	ldi	r24, 0x80	; 128
     b82:	80 83       	st	Z, r24
  CLKPR = 0;
     b84:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     b86:	78 94       	sei

  HAL_TimerInit();
     b88:	0e 94 c7 05 	call	0xb8e	; 0xb8e <HAL_TimerInit>
     b8c:	08 95       	ret

00000b8e <HAL_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_TimerInit(void)
{
  halTimerIrqCount = 0;
     b8e:	10 92 18 08 	sts	0x0818, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
     b92:	80 e2       	ldi	r24, 0x20	; 32
     b94:	9e e4       	ldi	r25, 0x4E	; 78
     b96:	90 93 a9 00 	sts	0x00A9, r25
     b9a:	80 93 a8 00 	sts	0x00A8, r24
  TCCR4B = (1 << WGM12);              // CTC mode
     b9e:	e1 ea       	ldi	r30, 0xA1	; 161
     ba0:	f0 e0       	ldi	r31, 0x00	; 0
     ba2:	88 e0       	ldi	r24, 0x08	; 8
     ba4:	80 83       	st	Z, r24
  TCCR4B |= (1 << CS11);              // Prescaler 8
     ba6:	80 81       	ld	r24, Z
     ba8:	82 60       	ori	r24, 0x02	; 2
     baa:	80 83       	st	Z, r24
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
     bac:	e2 e7       	ldi	r30, 0x72	; 114
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	82 60       	ori	r24, 0x02	; 2
     bb4:	80 83       	st	Z, r24
     bb6:	08 95       	ret

00000bb8 <__vector_42>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     bb8:	1f 92       	push	r1
     bba:	0f 92       	push	r0
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	0f 92       	push	r0
     bc0:	11 24       	eor	r1, r1
     bc2:	8f 93       	push	r24
  halTimerIrqCount++;
     bc4:	80 91 18 08 	lds	r24, 0x0818
     bc8:	8f 5f       	subi	r24, 0xFF	; 255
     bca:	80 93 18 08 	sts	0x0818, r24
}
     bce:	8f 91       	pop	r24
     bd0:	0f 90       	pop	r0
     bd2:	0f be       	out	0x3f, r0	; 63
     bd4:	0f 90       	pop	r0
     bd6:	1f 90       	pop	r1
     bd8:	18 95       	reti

00000bda <NWK_Init>:
/*************************************************************************//**
  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
  nwkIb.nwkSeqNum = 0;
     bda:	10 92 1d 08 	sts	0x081D, r1
  nwkIb.macSeqNum = 0;
     bde:	10 92 1e 08 	sts	0x081E, r1
  nwkIb.addr = 0;
     be2:	10 92 1a 08 	sts	0x081A, r1
     be6:	10 92 19 08 	sts	0x0819, r1
  nwkIb.lock = 0;
     bea:	10 92 40 08 	sts	0x0840, r1
     bee:	10 92 3f 08 	sts	0x083F, r1
     bf2:	ef e1       	ldi	r30, 0x1F	; 31
     bf4:	f8 e0       	ldi	r31, 0x08	; 8
     bf6:	8f e3       	ldi	r24, 0x3F	; 63
     bf8:	98 e0       	ldi	r25, 0x08	; 8

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
    nwkIb.endpoint[i] = NULL;
     bfa:	11 92       	st	Z+, r1
     bfc:	11 92       	st	Z+, r1
  nwkIb.nwkSeqNum = 0;
  nwkIb.macSeqNum = 0;
  nwkIb.addr = 0;
  nwkIb.lock = 0;

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
     bfe:	e8 17       	cp	r30, r24
     c00:	f9 07       	cpc	r31, r25
     c02:	d9 f7       	brne	.-10     	; 0xbfa <NWK_Init+0x20>
    nwkIb.endpoint[i] = NULL;

  nwkTxInit();
     c04:	0e 94 fe 06 	call	0xdfc	; 0xdfc <nwkTxInit>
  nwkRxInit();
     c08:	0e 94 71 06 	call	0xce2	; 0xce2 <nwkRxInit>
  nwkFrameInit();
     c0c:	0e 94 19 06 	call	0xc32	; 0xc32 <nwkFrameInit>
  nwkDataReqInit();
     c10:	0e 94 14 06 	call	0xc28	; 0xc28 <nwkDataReqInit>
     c14:	08 95       	ret

00000c16 <NWK_OpenEndpoint>:
  @param[in] id Endpoint index (1-15)
  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
  nwkIb.endpoint[id] = handler;
     c16:	e8 2f       	mov	r30, r24
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	ee 0f       	add	r30, r30
     c1c:	ff 1f       	adc	r31, r31
     c1e:	e1 5e       	subi	r30, 0xE1	; 225
     c20:	f7 4f       	sbci	r31, 0xF7	; 247
     c22:	71 83       	std	Z+1, r23	; 0x01
     c24:	60 83       	st	Z, r22
     c26:	08 95       	ret

00000c28 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     c28:	10 92 6c 03 	sts	0x036C, r1
     c2c:	10 92 6b 03 	sts	0x036B, r1
     c30:	08 95       	ret

00000c32 <nwkFrameInit>:
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     c32:	10 92 6d 03 	sts	0x036D, r1
     c36:	10 92 f6 03 	sts	0x03F6, r1
     c3a:	10 92 7f 04 	sts	0x047F, r1
     c3e:	10 92 08 05 	sts	0x0508, r1
     c42:	10 92 91 05 	sts	0x0591, r1
     c46:	08 95       	ret

00000c48 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     c48:	00 97       	sbiw	r24, 0x00	; 0
     c4a:	41 f0       	breq	.+16     	; 0xc5c <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     c4c:	fc 01       	movw	r30, r24
     c4e:	e7 57       	subi	r30, 0x77	; 119
     c50:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     c52:	86 e0       	ldi	r24, 0x06	; 6
     c54:	ea 31       	cpi	r30, 0x1A	; 26
     c56:	f8 07       	cpc	r31, r24
     c58:	18 f0       	brcs	.+6      	; 0xc60 <nwkFrameNext+0x18>
     c5a:	12 c0       	rjmp	.+36     	; 0xc80 <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     c5c:	ed e6       	ldi	r30, 0x6D	; 109
     c5e:	f3 e0       	ldi	r31, 0x03	; 3
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     c60:	80 81       	ld	r24, Z
     c62:	88 23       	and	r24, r24
     c64:	21 f0       	breq	.+8      	; 0xc6e <nwkFrameNext+0x26>
     c66:	0f c0       	rjmp	.+30     	; 0xc86 <nwkFrameNext+0x3e>
     c68:	80 81       	ld	r24, Z
     c6a:	81 11       	cpse	r24, r1
     c6c:	0f c0       	rjmp	.+30     	; 0xc8c <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     c6e:	e7 57       	subi	r30, 0x77	; 119
     c70:	ff 4f       	sbci	r31, 0xFF	; 255
     c72:	86 e0       	ldi	r24, 0x06	; 6
     c74:	ea 31       	cpi	r30, 0x1A	; 26
     c76:	f8 07       	cpc	r31, r24
     c78:	b8 f3       	brcs	.-18     	; 0xc68 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	08 95       	ret
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     c86:	8e 2f       	mov	r24, r30
     c88:	9f 2f       	mov	r25, r31
     c8a:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     c8c:	8e 2f       	mov	r24, r30
     c8e:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
     c90:	08 95       	ret

00000c92 <nwkRxServiceDataInd>:
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
     c92:	dc 01       	movw	r26, r24
     c94:	19 96       	adiw	r26, 0x09	; 9
     c96:	2c 91       	ld	r18, X
     c98:	19 97       	sbiw	r26, 0x09	; 9
     c9a:	22 23       	and	r18, r18
     c9c:	51 f0       	breq	.+20     	; 0xcb2 <nwkRxServiceDataInd+0x20>
    return false;

  switch (ind->data[0])
     c9e:	17 96       	adiw	r26, 0x07	; 7
     ca0:	ed 91       	ld	r30, X+
     ca2:	fc 91       	ld	r31, X
     ca4:	18 97       	sbiw	r26, 0x08	; 8
     ca6:	20 81       	ld	r18, Z
     ca8:	21 11       	cpse	r18, r1
     caa:	05 c0       	rjmp	.+10     	; 0xcb6 <nwkRxServiceDataInd+0x24>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
     cac:	0e 94 2b 07 	call	0xe56	; 0xe56 <nwkTxAckReceived>
     cb0:	08 95       	ret
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    return false;
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	08 95       	ret
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
     cb6:	80 e0       	ldi	r24, 0x00	; 0
  }
}
     cb8:	08 95       	ret

00000cba <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
     cba:	eb e2       	ldi	r30, 0x2B	; 43
     cbc:	f6 e0       	ldi	r31, 0x06	; 6
     cbe:	2d e5       	ldi	r18, 0x5D	; 93
     cc0:	36 e0       	ldi	r19, 0x06	; 6
  bool restart = false;
     cc2:	50 e0       	ldi	r21, 0x00	; 0
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
     cc4:	61 e0       	ldi	r22, 0x01	; 1
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
     cc6:	40 81       	ld	r20, Z
     cc8:	44 23       	and	r20, r20
     cca:	19 f0       	breq	.+6      	; 0xcd2 <nwkRxDuplicateRejectionTimerHandler+0x18>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
     ccc:	41 50       	subi	r20, 0x01	; 1
     cce:	40 83       	st	Z, r20
      restart = true;
     cd0:	56 2f       	mov	r21, r22
     cd2:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     cd4:	e2 17       	cp	r30, r18
     cd6:	f3 07       	cpc	r31, r19
     cd8:	b1 f7       	brne	.-20     	; 0xcc6 <nwkRxDuplicateRejectionTimerHandler+0xc>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
     cda:	51 11       	cpse	r21, r1
    SYS_TimerStart(timer);
     cdc:	0e 94 2d 08 	call	0x105a	; 0x105a <SYS_TimerStart>
     ce0:	08 95       	ret

00000ce2 <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
     ce2:	eb e2       	ldi	r30, 0x2B	; 43
     ce4:	f6 e0       	ldi	r31, 0x06	; 6
     ce6:	8d e5       	ldi	r24, 0x5D	; 93
     ce8:	96 e0       	ldi	r25, 0x06	; 6
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
     cea:	10 82       	st	Z, r1
     cec:	35 96       	adiw	r30, 0x05	; 5
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     cee:	e8 17       	cp	r30, r24
     cf0:	f9 07       	cpc	r31, r25
     cf2:	d9 f7       	brne	.-10     	; 0xcea <nwkRxInit+0x8>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
     cf4:	84 e6       	ldi	r24, 0x64	; 100
     cf6:	90 e0       	ldi	r25, 0x00	; 0
     cf8:	a0 e0       	ldi	r26, 0x00	; 0
     cfa:	b0 e0       	ldi	r27, 0x00	; 0
     cfc:	80 93 20 06 	sts	0x0620, r24
     d00:	90 93 21 06 	sts	0x0621, r25
     d04:	a0 93 22 06 	sts	0x0622, r26
     d08:	b0 93 23 06 	sts	0x0623, r27
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
     d0c:	10 92 24 06 	sts	0x0624, r1
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
     d10:	8d e5       	ldi	r24, 0x5D	; 93
     d12:	96 e0       	ldi	r25, 0x06	; 6
     d14:	90 93 26 06 	sts	0x0626, r25
     d18:	80 93 25 06 	sts	0x0625, r24

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
     d1c:	69 e4       	ldi	r22, 0x49	; 73
     d1e:	76 e0       	ldi	r23, 0x06	; 6
     d20:	80 e0       	ldi	r24, 0x00	; 0
     d22:	0e 94 0b 06 	call	0xc16	; 0xc16 <NWK_OpenEndpoint>
     d26:	08 95       	ret

00000d28 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
     d28:	ff 92       	push	r15
     d2a:	0f 93       	push	r16
     d2c:	1f 93       	push	r17
     d2e:	cf 93       	push	r28
     d30:	df 93       	push	r29
     d32:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
     d34:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
     d36:	80 e0       	ldi	r24, 0x00	; 0
     d38:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
     d3a:	01 e0       	ldi	r16, 0x01	; 1

      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
     d3c:	0f 2e       	mov	r0, r31
     d3e:	f3 e1       	ldi	r31, 0x13	; 19
     d40:	ff 2e       	mov	r15, r31
     d42:	f0 2d       	mov	r31, r0
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
     d44:	13 c0       	rjmp	.+38     	; 0xd6c <nwkTxDelayTimerHandler+0x44>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
     d46:	fc 01       	movw	r30, r24
     d48:	20 81       	ld	r18, Z
     d4a:	21 31       	cpi	r18, 0x11	; 17
     d4c:	79 f4       	brne	.+30     	; 0xd6c <nwkTxDelayTimerHandler+0x44>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
     d4e:	ec 57       	subi	r30, 0x7C	; 124
     d50:	ff 4f       	sbci	r31, 0xFF	; 255
     d52:	20 81       	ld	r18, Z
     d54:	31 81       	ldd	r19, Z+1	; 0x01
     d56:	21 50       	subi	r18, 0x01	; 1
     d58:	31 09       	sbc	r19, r1
     d5a:	31 83       	std	Z+1, r19	; 0x01
     d5c:	20 83       	st	Z, r18
     d5e:	23 2b       	or	r18, r19
     d60:	21 f4       	brne	.+8      	; 0xd6a <nwkTxDelayTimerHandler+0x42>
        frame->state = NWK_TX_STATE_SEND;
     d62:	fc 01       	movw	r30, r24
     d64:	f0 82       	st	Z, r15

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
     d66:	10 2f       	mov	r17, r16
     d68:	01 c0       	rjmp	.+2      	; 0xd6c <nwkTxDelayTimerHandler+0x44>
     d6a:	10 2f       	mov	r17, r16
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
     d6c:	0e 94 24 06 	call	0xc48	; 0xc48 <nwkFrameNext>
     d70:	00 97       	sbiw	r24, 0x00	; 0
     d72:	49 f7       	brne	.-46     	; 0xd46 <nwkTxDelayTimerHandler+0x1e>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
     d74:	11 23       	and	r17, r17
     d76:	19 f0       	breq	.+6      	; 0xd7e <nwkTxDelayTimerHandler+0x56>
    SYS_TimerStart(timer);
     d78:	ce 01       	movw	r24, r28
     d7a:	0e 94 2d 08 	call	0x105a	; 0x105a <SYS_TimerStart>
}
     d7e:	df 91       	pop	r29
     d80:	cf 91       	pop	r28
     d82:	1f 91       	pop	r17
     d84:	0f 91       	pop	r16
     d86:	ff 90       	pop	r15
     d88:	08 95       	ret

00000d8a <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
     d8a:	ef 92       	push	r14
     d8c:	ff 92       	push	r15
     d8e:	0f 93       	push	r16
     d90:	1f 93       	push	r17
     d92:	cf 93       	push	r28
     d94:	df 93       	push	r29
     d96:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
     d98:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
     d9e:	01 e0       	ldi	r16, 0x01	; 1

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
     da0:	0f 2e       	mov	r0, r31
     da2:	f7 e1       	ldi	r31, 0x17	; 23
     da4:	ef 2e       	mov	r14, r31
     da6:	f0 2d       	mov	r31, r0
  frame->tx.status = status;
     da8:	68 94       	set
     daa:	ff 24       	eor	r15, r15
     dac:	f4 f8       	bld	r15, 4
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
     dae:	16 c0       	rjmp	.+44     	; 0xddc <nwkTxAckWaitTimerHandler+0x52>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
     db0:	fc 01       	movw	r30, r24
     db2:	20 81       	ld	r18, Z
     db4:	26 31       	cpi	r18, 0x16	; 22
     db6:	91 f4       	brne	.+36     	; 0xddc <nwkTxAckWaitTimerHandler+0x52>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
     db8:	ec 57       	subi	r30, 0x7C	; 124
     dba:	ff 4f       	sbci	r31, 0xFF	; 255
     dbc:	20 81       	ld	r18, Z
     dbe:	31 81       	ldd	r19, Z+1	; 0x01
     dc0:	21 50       	subi	r18, 0x01	; 1
     dc2:	31 09       	sbc	r19, r1
     dc4:	31 83       	std	Z+1, r19	; 0x01
     dc6:	20 83       	st	Z, r18
     dc8:	23 2b       	or	r18, r19
     dca:	39 f4       	brne	.+14     	; 0xdda <nwkTxAckWaitTimerHandler+0x50>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
     dcc:	fc 01       	movw	r30, r24
     dce:	e0 82       	st	Z, r14
  frame->tx.status = status;
     dd0:	ed 57       	subi	r30, 0x7D	; 125
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	f0 82       	st	Z, r15

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
     dd6:	10 2f       	mov	r17, r16
     dd8:	01 c0       	rjmp	.+2      	; 0xddc <nwkTxAckWaitTimerHandler+0x52>
     dda:	10 2f       	mov	r17, r16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
     ddc:	0e 94 24 06 	call	0xc48	; 0xc48 <nwkFrameNext>
     de0:	00 97       	sbiw	r24, 0x00	; 0
     de2:	31 f7       	brne	.-52     	; 0xdb0 <nwkTxAckWaitTimerHandler+0x26>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
     de4:	11 23       	and	r17, r17
     de6:	19 f0       	breq	.+6      	; 0xdee <nwkTxAckWaitTimerHandler+0x64>
    SYS_TimerStart(timer);
     de8:	ce 01       	movw	r24, r28
     dea:	0e 94 2d 08 	call	0x105a	; 0x105a <SYS_TimerStart>
}
     dee:	df 91       	pop	r29
     df0:	cf 91       	pop	r28
     df2:	1f 91       	pop	r17
     df4:	0f 91       	pop	r16
     df6:	ff 90       	pop	r15
     df8:	ef 90       	pop	r14
     dfa:	08 95       	ret

00000dfc <nwkTxInit>:
/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
     dfc:	10 92 74 06 	sts	0x0674, r1
     e00:	10 92 73 06 	sts	0x0673, r1

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
     e04:	82 e3       	ldi	r24, 0x32	; 50
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	a0 e0       	ldi	r26, 0x00	; 0
     e0a:	b0 e0       	ldi	r27, 0x00	; 0
     e0c:	80 93 6c 06 	sts	0x066C, r24
     e10:	90 93 6d 06 	sts	0x066D, r25
     e14:	a0 93 6e 06 	sts	0x066E, r26
     e18:	b0 93 6f 06 	sts	0x066F, r27
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
     e1c:	10 92 70 06 	sts	0x0670, r1
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
     e20:	85 ec       	ldi	r24, 0xC5	; 197
     e22:	96 e0       	ldi	r25, 0x06	; 6
     e24:	90 93 72 06 	sts	0x0672, r25
     e28:	80 93 71 06 	sts	0x0671, r24

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
     e2c:	8a e0       	ldi	r24, 0x0A	; 10
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	a0 e0       	ldi	r26, 0x00	; 0
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	80 93 5f 06 	sts	0x065F, r24
     e38:	90 93 60 06 	sts	0x0660, r25
     e3c:	a0 93 61 06 	sts	0x0661, r26
     e40:	b0 93 62 06 	sts	0x0662, r27
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
     e44:	10 92 63 06 	sts	0x0663, r1
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
     e48:	84 e9       	ldi	r24, 0x94	; 148
     e4a:	96 e0       	ldi	r25, 0x06	; 6
     e4c:	90 93 65 06 	sts	0x0665, r25
     e50:	80 93 64 06 	sts	0x0664, r24
     e54:	08 95       	ret

00000e56 <nwkTxAckReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
     e56:	cf 93       	push	r28
     e58:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
     e5a:	fc 01       	movw	r30, r24
     e5c:	c7 81       	ldd	r28, Z+7	; 0x07
     e5e:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
     e60:	81 85       	ldd	r24, Z+9	; 0x09
     e62:	83 30       	cpi	r24, 0x03	; 3
     e64:	c9 f4       	brne	.+50     	; 0xe98 <nwkTxAckReceived+0x42>
     e66:	10 c0       	rjmp	.+32     	; 0xe88 <nwkTxAckReceived+0x32>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
     e68:	fc 01       	movw	r30, r24
     e6a:	20 81       	ld	r18, Z
     e6c:	26 31       	cpi	r18, 0x16	; 22
     e6e:	71 f4       	brne	.+28     	; 0xe8c <nwkTxAckReceived+0x36>
     e70:	34 85       	ldd	r19, Z+12	; 0x0c
     e72:	29 81       	ldd	r18, Y+1	; 0x01
     e74:	32 13       	cpse	r19, r18
     e76:	0a c0       	rjmp	.+20     	; 0xe8c <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
     e78:	27 e1       	ldi	r18, 0x17	; 23
     e7a:	20 83       	st	Z, r18
      frame->tx.control = command->control;
     e7c:	2a 81       	ldd	r18, Y+2	; 0x02
     e7e:	ea 57       	subi	r30, 0x7A	; 122
     e80:	ff 4f       	sbci	r31, 0xFF	; 255
     e82:	20 83       	st	Z, r18
      return true;
     e84:	81 e0       	ldi	r24, 0x01	; 1
     e86:	09 c0       	rjmp	.+18     	; 0xe9a <nwkTxAckReceived+0x44>
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
     e88:	80 e0       	ldi	r24, 0x00	; 0
     e8a:	90 e0       	ldi	r25, 0x00	; 0
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
     e8c:	0e 94 24 06 	call	0xc48	; 0xc48 <nwkFrameNext>
     e90:	00 97       	sbiw	r24, 0x00	; 0
     e92:	51 f7       	brne	.-44     	; 0xe68 <nwkTxAckReceived+0x12>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
     e94:	80 e0       	ldi	r24, 0x00	; 0
     e96:	01 c0       	rjmp	.+2      	; 0xe9a <nwkTxAckReceived+0x44>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
     e98:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
     e9a:	df 91       	pop	r29
     e9c:	cf 91       	pop	r28
     e9e:	08 95       	ret

00000ea0 <phyTrxSetState>:

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
  TRX_STATE_REG = TRX_CMD_FORCE_TRX_OFF;
     ea0:	93 e0       	ldi	r25, 0x03	; 3
     ea2:	90 93 42 01 	sts	0x0142, r25
  while (TRX_STATUS_TRX_OFF != TRX_STATUS_REG_s.trxStatus);
     ea6:	e1 e4       	ldi	r30, 0x41	; 65
     ea8:	f1 e0       	ldi	r31, 0x01	; 1
     eaa:	90 81       	ld	r25, Z
     eac:	9f 71       	andi	r25, 0x1F	; 31
     eae:	98 30       	cpi	r25, 0x08	; 8
     eb0:	e1 f7       	brne	.-8      	; 0xeaa <phyTrxSetState+0xa>

  TRX_STATE_REG = state;
     eb2:	80 93 42 01 	sts	0x0142, r24
  while (state != TRX_STATUS_REG_s.trxStatus);
     eb6:	e1 e4       	ldi	r30, 0x41	; 65
     eb8:	f1 e0       	ldi	r31, 0x01	; 1
     eba:	90 81       	ld	r25, Z
     ebc:	9f 71       	andi	r25, 0x1F	; 31
     ebe:	98 13       	cpse	r25, r24
     ec0:	fc cf       	rjmp	.-8      	; 0xeba <phyTrxSetState+0x1a>
}
     ec2:	08 95       	ret

00000ec4 <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
     ec4:	e9 e3       	ldi	r30, 0x39	; 57
     ec6:	f1 e0       	ldi	r31, 0x01	; 1
     ec8:	80 81       	ld	r24, Z
     eca:	81 60       	ori	r24, 0x01	; 1
     ecc:	80 83       	st	Z, r24

  phyRxState = false;
     ece:	10 92 76 06 	sts	0x0676, r1
  phyBand = 0;
     ed2:	10 92 75 06 	sts	0x0675, r1
  phyState = PHY_STATE_IDLE;
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	80 93 77 06 	sts	0x0677, r24

  phyTrxSetState(TRX_CMD_TRX_OFF);
     edc:	88 e0       	ldi	r24, 0x08	; 8
     ede:	0e 94 50 07 	call	0xea0	; 0xea0 <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
     ee2:	8b ee       	ldi	r24, 0xEB	; 235
     ee4:	80 93 56 01 	sts	0x0156, r24

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
     ee8:	ec e4       	ldi	r30, 0x4C	; 76
     eea:	f1 e0       	ldi	r31, 0x01	; 1
     eec:	80 81       	ld	r24, Z
     eee:	80 68       	ori	r24, 0x80	; 128
     ef0:	80 83       	st	Z, r24
     ef2:	08 95       	ret

00000ef4 <My_FctnInit>:

My_FctnTable My_vmt = { My_FctnInit, My_Init, My_Configure, My_PreProcessing, My_Collect, My_Error };

void My_FctnInit(MySensor *this)
{
	this->inherited.vmt = &My_vmt;
     ef4:	24 e1       	ldi	r18, 0x14	; 20
     ef6:	32 e0       	ldi	r19, 0x02	; 2
     ef8:	fc 01       	movw	r30, r24
     efa:	33 83       	std	Z+3, r19	; 0x03
     efc:	22 83       	std	Z+2, r18	; 0x02
     efe:	08 95       	ret

00000f00 <My_Init>:
}

int My_Init(MySensor *this )
{
	this->inherited.test_num = 10;
     f00:	2a e0       	ldi	r18, 0x0A	; 10
     f02:	30 e0       	ldi	r19, 0x00	; 0
     f04:	fc 01       	movw	r30, r24
     f06:	31 83       	std	Z+1, r19	; 0x01
     f08:	20 83       	st	Z, r18
	return 0;
}
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	08 95       	ret

00000f10 <My_Configure>:

int My_Configure(MySensor *this )
{
	// virtual function
	return 0;
}
     f10:	80 e0       	ldi	r24, 0x00	; 0
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	08 95       	ret

00000f16 <My_PreProcessing>:

int My_PreProcessing(MySensor *this )
{
	// virtual function
	return 0;
}
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	08 95       	ret

00000f1c <My_Collect>:

int My_Collect(MySensor *this )
{
	// virtual function
	return 0;
}
     f1c:	80 e0       	ldi	r24, 0x00	; 0
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	08 95       	ret

00000f22 <My_Error>:

int My_Error(MySensor *this )
{
	// virtual function
	return 0;
}
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	08 95       	ret

00000f28 <New_My_Sensor>:

MySensor* New_My_Sensor( int num)
{
     f28:	cf 93       	push	r28
     f2a:	df 93       	push	r29
     f2c:	ec 01       	movw	r28, r24
	MySensor *p = malloc(sizeof(MySensor));
     f2e:	84 e0       	ldi	r24, 0x04	; 4
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <malloc>
	p->inherited.test_num = num;
     f36:	fc 01       	movw	r30, r24
     f38:	d1 83       	std	Z+1, r29	; 0x01
     f3a:	c0 83       	st	Z, r28
	return p;
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	08 95       	ret

00000f42 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
     f42:	0e 94 b5 05 	call	0xb6a	; 0xb6a <HAL_Init>
  SYS_TimerInit();
     f46:	0e 94 0e 08 	call	0x101c	; 0x101c <SYS_TimerInit>
  PHY_Init();
     f4a:	0e 94 62 07 	call	0xec4	; 0xec4 <PHY_Init>
  NWK_Init();
     f4e:	0e 94 ed 05 	call	0xbda	; 0xbda <NWK_Init>
     f52:	08 95       	ret

00000f54 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
     f54:	0f 93       	push	r16
     f56:	1f 93       	push	r17
     f58:	cf 93       	push	r28
     f5a:	df 93       	push	r29
     f5c:	ec 01       	movw	r28, r24
  if (timers)
     f5e:	80 91 78 06 	lds	r24, 0x0678
     f62:	90 91 79 06 	lds	r25, 0x0679
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	09 f4       	brne	.+2      	; 0xf6c <placeTimer+0x18>
     f6a:	45 c0       	rjmp	.+138    	; 0xff6 <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
     f6c:	4e 81       	ldd	r20, Y+6	; 0x06
     f6e:	5f 81       	ldd	r21, Y+7	; 0x07
     f70:	68 85       	ldd	r22, Y+8	; 0x08
     f72:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
     f74:	fc 01       	movw	r30, r24
     f76:	02 81       	ldd	r16, Z+2	; 0x02
     f78:	13 81       	ldd	r17, Z+3	; 0x03
     f7a:	24 81       	ldd	r18, Z+4	; 0x04
     f7c:	35 81       	ldd	r19, Z+5	; 0x05
     f7e:	40 17       	cp	r20, r16
     f80:	51 07       	cpc	r21, r17
     f82:	62 07       	cpc	r22, r18
     f84:	73 07       	cpc	r23, r19
     f86:	c0 f4       	brcc	.+48     	; 0xfb8 <placeTimer+0x64>
     f88:	0b c0       	rjmp	.+22     	; 0xfa0 <placeTimer+0x4c>
     f8a:	02 81       	ldd	r16, Z+2	; 0x02
     f8c:	13 81       	ldd	r17, Z+3	; 0x03
     f8e:	24 81       	ldd	r18, Z+4	; 0x04
     f90:	35 81       	ldd	r19, Z+5	; 0x05
     f92:	40 17       	cp	r20, r16
     f94:	51 07       	cpc	r21, r17
     f96:	62 07       	cpc	r22, r18
     f98:	73 07       	cpc	r23, r19
     f9a:	28 f0       	brcs	.+10     	; 0xfa6 <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
     f9c:	df 01       	movw	r26, r30
     f9e:	0d c0       	rjmp	.+26     	; 0xfba <placeTimer+0x66>
     fa0:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
     fa2:	a0 e0       	ldi	r26, 0x00	; 0
     fa4:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
     fa6:	04 1b       	sub	r16, r20
     fa8:	15 0b       	sbc	r17, r21
     faa:	26 0b       	sbc	r18, r22
     fac:	37 0b       	sbc	r19, r23
     fae:	02 83       	std	Z+2, r16	; 0x02
     fb0:	13 83       	std	Z+3, r17	; 0x03
     fb2:	24 83       	std	Z+4, r18	; 0x04
     fb4:	35 83       	std	Z+5, r19	; 0x05
         break;
     fb6:	0a c0       	rjmp	.+20     	; 0xfcc <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
     fb8:	dc 01       	movw	r26, r24
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
     fba:	40 1b       	sub	r20, r16
     fbc:	51 0b       	sbc	r21, r17
     fbe:	62 0b       	sbc	r22, r18
     fc0:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
     fc2:	ed 91       	ld	r30, X+
     fc4:	fc 91       	ld	r31, X
     fc6:	11 97       	sbiw	r26, 0x01	; 1
     fc8:	30 97       	sbiw	r30, 0x00	; 0
     fca:	f9 f6       	brne	.-66     	; 0xf8a <placeTimer+0x36>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
     fcc:	4a 83       	std	Y+2, r20	; 0x02
     fce:	5b 83       	std	Y+3, r21	; 0x03
     fd0:	6c 83       	std	Y+4, r22	; 0x04
     fd2:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
     fd4:	10 97       	sbiw	r26, 0x00	; 0
     fd6:	41 f0       	breq	.+16     	; 0xfe8 <placeTimer+0x94>
    {
      timer->next = prev->next;
     fd8:	8d 91       	ld	r24, X+
     fda:	9c 91       	ld	r25, X
     fdc:	11 97       	sbiw	r26, 0x01	; 1
     fde:	99 83       	std	Y+1, r25	; 0x01
     fe0:	88 83       	st	Y, r24
      prev->next = timer;
     fe2:	cd 93       	st	X+, r28
     fe4:	dc 93       	st	X, r29
     fe6:	15 c0       	rjmp	.+42     	; 0x1012 <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
     fe8:	99 83       	std	Y+1, r25	; 0x01
     fea:	88 83       	st	Y, r24
      timers = timer;
     fec:	d0 93 79 06 	sts	0x0679, r29
     ff0:	c0 93 78 06 	sts	0x0678, r28
     ff4:	0e c0       	rjmp	.+28     	; 0x1012 <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
     ff6:	19 82       	std	Y+1, r1	; 0x01
     ff8:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
     ffa:	8e 81       	ldd	r24, Y+6	; 0x06
     ffc:	9f 81       	ldd	r25, Y+7	; 0x07
     ffe:	a8 85       	ldd	r26, Y+8	; 0x08
    1000:	b9 85       	ldd	r27, Y+9	; 0x09
    1002:	8a 83       	std	Y+2, r24	; 0x02
    1004:	9b 83       	std	Y+3, r25	; 0x03
    1006:	ac 83       	std	Y+4, r26	; 0x04
    1008:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    100a:	d0 93 79 06 	sts	0x0679, r29
    100e:	c0 93 78 06 	sts	0x0678, r28
  }
}
    1012:	df 91       	pop	r29
    1014:	cf 91       	pop	r28
    1016:	1f 91       	pop	r17
    1018:	0f 91       	pop	r16
    101a:	08 95       	ret

0000101c <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    101c:	10 92 79 06 	sts	0x0679, r1
    1020:	10 92 78 06 	sts	0x0678, r1
    1024:	08 95       	ret

00001026 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1026:	e0 91 78 06 	lds	r30, 0x0678
    102a:	f0 91 79 06 	lds	r31, 0x0679
    102e:	30 97       	sbiw	r30, 0x00	; 0
    1030:	71 f0       	breq	.+28     	; 0x104e <SYS_TimerStarted+0x28>
    if (t == timer)
    1032:	e8 17       	cp	r30, r24
    1034:	f9 07       	cpc	r31, r25
    1036:	21 f4       	brne	.+8      	; 0x1040 <SYS_TimerStarted+0x1a>
    1038:	0c c0       	rjmp	.+24     	; 0x1052 <SYS_TimerStarted+0x2c>
    103a:	8e 17       	cp	r24, r30
    103c:	9f 07       	cpc	r25, r31
    103e:	59 f0       	breq	.+22     	; 0x1056 <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1040:	01 90       	ld	r0, Z+
    1042:	f0 81       	ld	r31, Z
    1044:	e0 2d       	mov	r30, r0
    1046:	30 97       	sbiw	r30, 0x00	; 0
    1048:	c1 f7       	brne	.-16     	; 0x103a <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	08 95       	ret
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    1052:	81 e0       	ldi	r24, 0x01	; 1
    1054:	08 95       	ret
    1056:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    1058:	08 95       	ret

0000105a <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    105a:	cf 93       	push	r28
    105c:	df 93       	push	r29
    105e:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    1060:	0e 94 13 08 	call	0x1026	; 0x1026 <SYS_TimerStarted>
    1064:	81 11       	cpse	r24, r1
    1066:	03 c0       	rjmp	.+6      	; 0x106e <SYS_TimerStart+0x14>
    placeTimer(timer);
    1068:	ce 01       	movw	r24, r28
    106a:	0e 94 aa 07 	call	0xf54	; 0xf54 <placeTimer>
}
    106e:	df 91       	pop	r29
    1070:	cf 91       	pop	r28
    1072:	08 95       	ret

00001074 <ll_first>:
 */
llobject_t *
ll_first(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
    1074:	fc 01       	movw	r30, r24
    1076:	22 81       	ldd	r18, Z+2	; 0x02
    1078:	33 81       	ldd	r19, Z+3	; 0x03
    107a:	28 17       	cp	r18, r24
    107c:	39 07       	cpc	r19, r25
    107e:	19 f4       	brne	.+6      	; 0x1086 <ll_first+0x12>
		return LL_NULL;
    1080:	80 e0       	ldi	r24, 0x00	; 0
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	08 95       	ret
    }
    return lp->next;
    1086:	82 2f       	mov	r24, r18
    1088:	93 2f       	mov	r25, r19
}
    108a:	08 95       	ret

0000108c <ll_r_insert>:
llobject_t *
ll_r_insert(ip, ep)
llobject_t *ip;
llobject_t *ep;
{
    llobject_t *tp = ip->next;
    108c:	dc 01       	movw	r26, r24
    108e:	12 96       	adiw	r26, 0x02	; 2
    1090:	ed 91       	ld	r30, X+
    1092:	fc 91       	ld	r31, X
    1094:	13 97       	sbiw	r26, 0x03	; 3

    tp->prev = ep;
    1096:	71 83       	std	Z+1, r23	; 0x01
    1098:	60 83       	st	Z, r22
    ep->next = tp;
    109a:	db 01       	movw	r26, r22
    109c:	13 96       	adiw	r26, 0x03	; 3
    109e:	fc 93       	st	X, r31
    10a0:	ee 93       	st	-X, r30
    10a2:	12 97       	sbiw	r26, 0x02	; 2
    ip->next = ep;
    10a4:	fc 01       	movw	r30, r24
    10a6:	73 83       	std	Z+3, r23	; 0x03
    10a8:	62 83       	std	Z+2, r22	; 0x02
    ep->prev = ip;
    10aa:	8d 93       	st	X+, r24
    10ac:	9c 93       	st	X, r25

    return ep;
}
    10ae:	cb 01       	movw	r24, r22
    10b0:	08 95       	ret

000010b2 <ll_detach>:
 */
llobject_t *
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    10b2:	fb 01       	movw	r30, r22
    if (LL_IS_EMPTY(lp) || lp == ep) {
    10b4:	dc 01       	movw	r26, r24
    10b6:	12 96       	adiw	r26, 0x02	; 2
    10b8:	2d 91       	ld	r18, X+
    10ba:	3c 91       	ld	r19, X
    10bc:	13 97       	sbiw	r26, 0x03	; 3
    10be:	28 17       	cp	r18, r24
    10c0:	39 07       	cpc	r19, r25
    10c2:	a1 f0       	breq	.+40     	; 0x10ec <ll_detach+0x3a>
    10c4:	86 17       	cp	r24, r22
    10c6:	97 07       	cpc	r25, r23
    10c8:	a1 f0       	breq	.+40     	; 0x10f2 <ll_detach+0x40>
		return LL_NULL;
    }

    (ep->prev)->next = ep->next;
    10ca:	a0 81       	ld	r26, Z
    10cc:	b1 81       	ldd	r27, Z+1	; 0x01
    10ce:	82 81       	ldd	r24, Z+2	; 0x02
    10d0:	93 81       	ldd	r25, Z+3	; 0x03
    10d2:	13 96       	adiw	r26, 0x03	; 3
    10d4:	9c 93       	st	X, r25
    10d6:	8e 93       	st	-X, r24
    10d8:	12 97       	sbiw	r26, 0x02	; 2
    (ep->next)->prev = ep->prev;
    10da:	a2 81       	ldd	r26, Z+2	; 0x02
    10dc:	b3 81       	ldd	r27, Z+3	; 0x03
    10de:	80 81       	ld	r24, Z
    10e0:	91 81       	ldd	r25, Z+1	; 0x01
    10e2:	8d 93       	st	X+, r24
    10e4:	9c 93       	st	X, r25

    return ep;
    10e6:	86 2f       	mov	r24, r22
    10e8:	9f 2f       	mov	r25, r31
    10ea:	08 95       	ret
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    if (LL_IS_EMPTY(lp) || lp == ep) {
		return LL_NULL;
    10ec:	80 e0       	ldi	r24, 0x00	; 0
    10ee:	90 e0       	ldi	r25, 0x00	; 0
    10f0:	08 95       	ret
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	90 e0       	ldi	r25, 0x00	; 0

    (ep->prev)->next = ep->next;
    (ep->next)->prev = ep->prev;

    return ep;
}
    10f6:	08 95       	ret

000010f8 <ll_pop>:
 */
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
    10f8:	fc 01       	movw	r30, r24
    10fa:	62 81       	ldd	r22, Z+2	; 0x02
    10fc:	73 81       	ldd	r23, Z+3	; 0x03
    10fe:	68 17       	cp	r22, r24
    1100:	79 07       	cpc	r23, r25
    1102:	19 f0       	breq	.+6      	; 0x110a <ll_pop+0x12>
		return LL_NULL;
    }
    return LL_DETACH(lp, lp->next);
    1104:	0e 94 59 08 	call	0x10b2	; 0x10b2 <ll_detach>
    1108:	08 95       	ret
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
		return LL_NULL;
    110a:	80 e0       	ldi	r24, 0x00	; 0
    110c:	90 e0       	ldi	r25, 0x00	; 0
    }
    return LL_DETACH(lp, lp->next);
}
    110e:	08 95       	ret

00001110 <vfprintf>:
    1110:	a3 e1       	ldi	r26, 0x13	; 19
    1112:	b0 e0       	ldi	r27, 0x00	; 0
    1114:	ee e8       	ldi	r30, 0x8E	; 142
    1116:	f8 e0       	ldi	r31, 0x08	; 8
    1118:	0c 94 25 0c 	jmp	0x184a	; 0x184a <__prologue_saves__>
    111c:	7c 01       	movw	r14, r24
    111e:	1b 01       	movw	r2, r22
    1120:	6a 01       	movw	r12, r20
    1122:	fc 01       	movw	r30, r24
    1124:	17 82       	std	Z+7, r1	; 0x07
    1126:	16 82       	std	Z+6, r1	; 0x06
    1128:	83 81       	ldd	r24, Z+3	; 0x03
    112a:	81 ff       	sbrs	r24, 1
    112c:	66 c3       	rjmp	.+1740   	; 0x17fa <vfprintf+0x6ea>
    112e:	be 01       	movw	r22, r28
    1130:	6f 5f       	subi	r22, 0xFF	; 255
    1132:	7f 4f       	sbci	r23, 0xFF	; 255
    1134:	4b 01       	movw	r8, r22
    1136:	f7 01       	movw	r30, r14
    1138:	93 81       	ldd	r25, Z+3	; 0x03
    113a:	f1 01       	movw	r30, r2
    113c:	93 fd       	sbrc	r25, 3
    113e:	85 91       	lpm	r24, Z+
    1140:	93 ff       	sbrs	r25, 3
    1142:	81 91       	ld	r24, Z+
    1144:	1f 01       	movw	r2, r30
    1146:	88 23       	and	r24, r24
    1148:	09 f4       	brne	.+2      	; 0x114c <vfprintf+0x3c>
    114a:	53 c3       	rjmp	.+1702   	; 0x17f2 <vfprintf+0x6e2>
    114c:	85 32       	cpi	r24, 0x25	; 37
    114e:	39 f4       	brne	.+14     	; 0x115e <vfprintf+0x4e>
    1150:	93 fd       	sbrc	r25, 3
    1152:	85 91       	lpm	r24, Z+
    1154:	93 ff       	sbrs	r25, 3
    1156:	81 91       	ld	r24, Z+
    1158:	1f 01       	movw	r2, r30
    115a:	85 32       	cpi	r24, 0x25	; 37
    115c:	39 f4       	brne	.+14     	; 0x116c <vfprintf+0x5c>
    115e:	b7 01       	movw	r22, r14
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <fputc>
    1166:	56 01       	movw	r10, r12
    1168:	65 01       	movw	r12, r10
    116a:	e5 cf       	rjmp	.-54     	; 0x1136 <vfprintf+0x26>
    116c:	10 e0       	ldi	r17, 0x00	; 0
    116e:	51 2c       	mov	r5, r1
    1170:	20 e0       	ldi	r18, 0x00	; 0
    1172:	20 32       	cpi	r18, 0x20	; 32
    1174:	a0 f4       	brcc	.+40     	; 0x119e <vfprintf+0x8e>
    1176:	8b 32       	cpi	r24, 0x2B	; 43
    1178:	69 f0       	breq	.+26     	; 0x1194 <vfprintf+0x84>
    117a:	30 f4       	brcc	.+12     	; 0x1188 <vfprintf+0x78>
    117c:	80 32       	cpi	r24, 0x20	; 32
    117e:	59 f0       	breq	.+22     	; 0x1196 <vfprintf+0x86>
    1180:	83 32       	cpi	r24, 0x23	; 35
    1182:	69 f4       	brne	.+26     	; 0x119e <vfprintf+0x8e>
    1184:	20 61       	ori	r18, 0x10	; 16
    1186:	2c c0       	rjmp	.+88     	; 0x11e0 <vfprintf+0xd0>
    1188:	8d 32       	cpi	r24, 0x2D	; 45
    118a:	39 f0       	breq	.+14     	; 0x119a <vfprintf+0x8a>
    118c:	80 33       	cpi	r24, 0x30	; 48
    118e:	39 f4       	brne	.+14     	; 0x119e <vfprintf+0x8e>
    1190:	21 60       	ori	r18, 0x01	; 1
    1192:	26 c0       	rjmp	.+76     	; 0x11e0 <vfprintf+0xd0>
    1194:	22 60       	ori	r18, 0x02	; 2
    1196:	24 60       	ori	r18, 0x04	; 4
    1198:	23 c0       	rjmp	.+70     	; 0x11e0 <vfprintf+0xd0>
    119a:	28 60       	ori	r18, 0x08	; 8
    119c:	21 c0       	rjmp	.+66     	; 0x11e0 <vfprintf+0xd0>
    119e:	27 fd       	sbrc	r18, 7
    11a0:	27 c0       	rjmp	.+78     	; 0x11f0 <vfprintf+0xe0>
    11a2:	30 ed       	ldi	r19, 0xD0	; 208
    11a4:	38 0f       	add	r19, r24
    11a6:	3a 30       	cpi	r19, 0x0A	; 10
    11a8:	78 f4       	brcc	.+30     	; 0x11c8 <vfprintf+0xb8>
    11aa:	26 ff       	sbrs	r18, 6
    11ac:	06 c0       	rjmp	.+12     	; 0x11ba <vfprintf+0xaa>
    11ae:	fa e0       	ldi	r31, 0x0A	; 10
    11b0:	1f 9f       	mul	r17, r31
    11b2:	30 0d       	add	r19, r0
    11b4:	11 24       	eor	r1, r1
    11b6:	13 2f       	mov	r17, r19
    11b8:	13 c0       	rjmp	.+38     	; 0x11e0 <vfprintf+0xd0>
    11ba:	6a e0       	ldi	r22, 0x0A	; 10
    11bc:	56 9e       	mul	r5, r22
    11be:	30 0d       	add	r19, r0
    11c0:	11 24       	eor	r1, r1
    11c2:	53 2e       	mov	r5, r19
    11c4:	20 62       	ori	r18, 0x20	; 32
    11c6:	0c c0       	rjmp	.+24     	; 0x11e0 <vfprintf+0xd0>
    11c8:	8e 32       	cpi	r24, 0x2E	; 46
    11ca:	21 f4       	brne	.+8      	; 0x11d4 <vfprintf+0xc4>
    11cc:	26 fd       	sbrc	r18, 6
    11ce:	11 c3       	rjmp	.+1570   	; 0x17f2 <vfprintf+0x6e2>
    11d0:	20 64       	ori	r18, 0x40	; 64
    11d2:	06 c0       	rjmp	.+12     	; 0x11e0 <vfprintf+0xd0>
    11d4:	8c 36       	cpi	r24, 0x6C	; 108
    11d6:	11 f4       	brne	.+4      	; 0x11dc <vfprintf+0xcc>
    11d8:	20 68       	ori	r18, 0x80	; 128
    11da:	02 c0       	rjmp	.+4      	; 0x11e0 <vfprintf+0xd0>
    11dc:	88 36       	cpi	r24, 0x68	; 104
    11de:	41 f4       	brne	.+16     	; 0x11f0 <vfprintf+0xe0>
    11e0:	f1 01       	movw	r30, r2
    11e2:	93 fd       	sbrc	r25, 3
    11e4:	85 91       	lpm	r24, Z+
    11e6:	93 ff       	sbrs	r25, 3
    11e8:	81 91       	ld	r24, Z+
    11ea:	1f 01       	movw	r2, r30
    11ec:	81 11       	cpse	r24, r1
    11ee:	c1 cf       	rjmp	.-126    	; 0x1172 <vfprintf+0x62>
    11f0:	9b eb       	ldi	r25, 0xBB	; 187
    11f2:	98 0f       	add	r25, r24
    11f4:	93 30       	cpi	r25, 0x03	; 3
    11f6:	18 f4       	brcc	.+6      	; 0x11fe <vfprintf+0xee>
    11f8:	20 61       	ori	r18, 0x10	; 16
    11fa:	80 5e       	subi	r24, 0xE0	; 224
    11fc:	06 c0       	rjmp	.+12     	; 0x120a <vfprintf+0xfa>
    11fe:	9b e9       	ldi	r25, 0x9B	; 155
    1200:	98 0f       	add	r25, r24
    1202:	93 30       	cpi	r25, 0x03	; 3
    1204:	08 f0       	brcs	.+2      	; 0x1208 <vfprintf+0xf8>
    1206:	aa c1       	rjmp	.+852    	; 0x155c <vfprintf+0x44c>
    1208:	2f 7e       	andi	r18, 0xEF	; 239
    120a:	26 ff       	sbrs	r18, 6
    120c:	16 e0       	ldi	r17, 0x06	; 6
    120e:	2f 73       	andi	r18, 0x3F	; 63
    1210:	72 2e       	mov	r7, r18
    1212:	85 36       	cpi	r24, 0x65	; 101
    1214:	21 f4       	brne	.+8      	; 0x121e <vfprintf+0x10e>
    1216:	f2 2f       	mov	r31, r18
    1218:	f0 64       	ori	r31, 0x40	; 64
    121a:	7f 2e       	mov	r7, r31
    121c:	08 c0       	rjmp	.+16     	; 0x122e <vfprintf+0x11e>
    121e:	86 36       	cpi	r24, 0x66	; 102
    1220:	21 f4       	brne	.+8      	; 0x122a <vfprintf+0x11a>
    1222:	62 2f       	mov	r22, r18
    1224:	60 68       	ori	r22, 0x80	; 128
    1226:	76 2e       	mov	r7, r22
    1228:	02 c0       	rjmp	.+4      	; 0x122e <vfprintf+0x11e>
    122a:	11 11       	cpse	r17, r1
    122c:	11 50       	subi	r17, 0x01	; 1
    122e:	77 fe       	sbrs	r7, 7
    1230:	07 c0       	rjmp	.+14     	; 0x1240 <vfprintf+0x130>
    1232:	1c 33       	cpi	r17, 0x3C	; 60
    1234:	48 f4       	brcc	.+18     	; 0x1248 <vfprintf+0x138>
    1236:	44 24       	eor	r4, r4
    1238:	43 94       	inc	r4
    123a:	41 0e       	add	r4, r17
    123c:	27 e0       	ldi	r18, 0x07	; 7
    123e:	0b c0       	rjmp	.+22     	; 0x1256 <vfprintf+0x146>
    1240:	18 30       	cpi	r17, 0x08	; 8
    1242:	30 f4       	brcc	.+12     	; 0x1250 <vfprintf+0x140>
    1244:	21 2f       	mov	r18, r17
    1246:	06 c0       	rjmp	.+12     	; 0x1254 <vfprintf+0x144>
    1248:	27 e0       	ldi	r18, 0x07	; 7
    124a:	4c e3       	ldi	r20, 0x3C	; 60
    124c:	44 2e       	mov	r4, r20
    124e:	03 c0       	rjmp	.+6      	; 0x1256 <vfprintf+0x146>
    1250:	27 e0       	ldi	r18, 0x07	; 7
    1252:	17 e0       	ldi	r17, 0x07	; 7
    1254:	41 2c       	mov	r4, r1
    1256:	56 01       	movw	r10, r12
    1258:	74 e0       	ldi	r23, 0x04	; 4
    125a:	a7 0e       	add	r10, r23
    125c:	b1 1c       	adc	r11, r1
    125e:	f6 01       	movw	r30, r12
    1260:	60 81       	ld	r22, Z
    1262:	71 81       	ldd	r23, Z+1	; 0x01
    1264:	82 81       	ldd	r24, Z+2	; 0x02
    1266:	93 81       	ldd	r25, Z+3	; 0x03
    1268:	04 2d       	mov	r16, r4
    126a:	a4 01       	movw	r20, r8
    126c:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <__ftoa_engine>
    1270:	6c 01       	movw	r12, r24
    1272:	09 81       	ldd	r16, Y+1	; 0x01
    1274:	00 ff       	sbrs	r16, 0
    1276:	02 c0       	rjmp	.+4      	; 0x127c <vfprintf+0x16c>
    1278:	03 ff       	sbrs	r16, 3
    127a:	06 c0       	rjmp	.+12     	; 0x1288 <vfprintf+0x178>
    127c:	71 fc       	sbrc	r7, 1
    127e:	07 c0       	rjmp	.+14     	; 0x128e <vfprintf+0x17e>
    1280:	72 fc       	sbrc	r7, 2
    1282:	08 c0       	rjmp	.+16     	; 0x1294 <vfprintf+0x184>
    1284:	61 2c       	mov	r6, r1
    1286:	08 c0       	rjmp	.+16     	; 0x1298 <vfprintf+0x188>
    1288:	3d e2       	ldi	r19, 0x2D	; 45
    128a:	63 2e       	mov	r6, r19
    128c:	05 c0       	rjmp	.+10     	; 0x1298 <vfprintf+0x188>
    128e:	2b e2       	ldi	r18, 0x2B	; 43
    1290:	62 2e       	mov	r6, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <vfprintf+0x188>
    1294:	90 e2       	ldi	r25, 0x20	; 32
    1296:	69 2e       	mov	r6, r25
    1298:	80 2f       	mov	r24, r16
    129a:	8c 70       	andi	r24, 0x0C	; 12
    129c:	99 f1       	breq	.+102    	; 0x1304 <vfprintf+0x1f4>
    129e:	66 20       	and	r6, r6
    12a0:	11 f0       	breq	.+4      	; 0x12a6 <vfprintf+0x196>
    12a2:	84 e0       	ldi	r24, 0x04	; 4
    12a4:	01 c0       	rjmp	.+2      	; 0x12a8 <vfprintf+0x198>
    12a6:	83 e0       	ldi	r24, 0x03	; 3
    12a8:	85 15       	cp	r24, r5
    12aa:	10 f0       	brcs	.+4      	; 0x12b0 <vfprintf+0x1a0>
    12ac:	51 2c       	mov	r5, r1
    12ae:	0b c0       	rjmp	.+22     	; 0x12c6 <vfprintf+0x1b6>
    12b0:	58 1a       	sub	r5, r24
    12b2:	73 fc       	sbrc	r7, 3
    12b4:	08 c0       	rjmp	.+16     	; 0x12c6 <vfprintf+0x1b6>
    12b6:	b7 01       	movw	r22, r14
    12b8:	80 e2       	ldi	r24, 0x20	; 32
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <fputc>
    12c0:	5a 94       	dec	r5
    12c2:	c9 f7       	brne	.-14     	; 0x12b6 <vfprintf+0x1a6>
    12c4:	f3 cf       	rjmp	.-26     	; 0x12ac <vfprintf+0x19c>
    12c6:	66 20       	and	r6, r6
    12c8:	29 f0       	breq	.+10     	; 0x12d4 <vfprintf+0x1c4>
    12ca:	b7 01       	movw	r22, r14
    12cc:	86 2d       	mov	r24, r6
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <fputc>
    12d4:	03 fd       	sbrc	r16, 3
    12d6:	03 c0       	rjmp	.+6      	; 0x12de <vfprintf+0x1ce>
    12d8:	08 e3       	ldi	r16, 0x38	; 56
    12da:	11 e0       	ldi	r17, 0x01	; 1
    12dc:	02 c0       	rjmp	.+4      	; 0x12e2 <vfprintf+0x1d2>
    12de:	04 e3       	ldi	r16, 0x34	; 52
    12e0:	11 e0       	ldi	r17, 0x01	; 1
    12e2:	f7 2d       	mov	r31, r7
    12e4:	f0 71       	andi	r31, 0x10	; 16
    12e6:	7f 2e       	mov	r7, r31
    12e8:	f8 01       	movw	r30, r16
    12ea:	84 91       	lpm	r24, Z
    12ec:	88 23       	and	r24, r24
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <vfprintf+0x1e2>
    12f0:	76 c2       	rjmp	.+1260   	; 0x17de <vfprintf+0x6ce>
    12f2:	71 10       	cpse	r7, r1
    12f4:	80 52       	subi	r24, 0x20	; 32
    12f6:	b7 01       	movw	r22, r14
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <fputc>
    12fe:	0f 5f       	subi	r16, 0xFF	; 255
    1300:	1f 4f       	sbci	r17, 0xFF	; 255
    1302:	f2 cf       	rjmp	.-28     	; 0x12e8 <vfprintf+0x1d8>
    1304:	77 fe       	sbrs	r7, 7
    1306:	0f c0       	rjmp	.+30     	; 0x1326 <vfprintf+0x216>
    1308:	4c 0c       	add	r4, r12
    130a:	04 ff       	sbrs	r16, 4
    130c:	04 c0       	rjmp	.+8      	; 0x1316 <vfprintf+0x206>
    130e:	8a 81       	ldd	r24, Y+2	; 0x02
    1310:	81 33       	cpi	r24, 0x31	; 49
    1312:	09 f4       	brne	.+2      	; 0x1316 <vfprintf+0x206>
    1314:	4a 94       	dec	r4
    1316:	14 14       	cp	r1, r4
    1318:	74 f5       	brge	.+92     	; 0x1376 <vfprintf+0x266>
    131a:	f8 e0       	ldi	r31, 0x08	; 8
    131c:	f4 15       	cp	r31, r4
    131e:	78 f5       	brcc	.+94     	; 0x137e <vfprintf+0x26e>
    1320:	88 e0       	ldi	r24, 0x08	; 8
    1322:	48 2e       	mov	r4, r24
    1324:	2c c0       	rjmp	.+88     	; 0x137e <vfprintf+0x26e>
    1326:	76 fc       	sbrc	r7, 6
    1328:	2a c0       	rjmp	.+84     	; 0x137e <vfprintf+0x26e>
    132a:	81 2f       	mov	r24, r17
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	8c 15       	cp	r24, r12
    1330:	9d 05       	cpc	r25, r13
    1332:	9c f0       	brlt	.+38     	; 0x135a <vfprintf+0x24a>
    1334:	6c ef       	ldi	r22, 0xFC	; 252
    1336:	c6 16       	cp	r12, r22
    1338:	6f ef       	ldi	r22, 0xFF	; 255
    133a:	d6 06       	cpc	r13, r22
    133c:	74 f0       	brlt	.+28     	; 0x135a <vfprintf+0x24a>
    133e:	77 2d       	mov	r23, r7
    1340:	70 68       	ori	r23, 0x80	; 128
    1342:	77 2e       	mov	r7, r23
    1344:	0a c0       	rjmp	.+20     	; 0x135a <vfprintf+0x24a>
    1346:	e2 e0       	ldi	r30, 0x02	; 2
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	ec 0f       	add	r30, r28
    134c:	fd 1f       	adc	r31, r29
    134e:	e1 0f       	add	r30, r17
    1350:	f1 1d       	adc	r31, r1
    1352:	80 81       	ld	r24, Z
    1354:	80 33       	cpi	r24, 0x30	; 48
    1356:	19 f4       	brne	.+6      	; 0x135e <vfprintf+0x24e>
    1358:	11 50       	subi	r17, 0x01	; 1
    135a:	11 11       	cpse	r17, r1
    135c:	f4 cf       	rjmp	.-24     	; 0x1346 <vfprintf+0x236>
    135e:	77 fe       	sbrs	r7, 7
    1360:	0e c0       	rjmp	.+28     	; 0x137e <vfprintf+0x26e>
    1362:	44 24       	eor	r4, r4
    1364:	43 94       	inc	r4
    1366:	41 0e       	add	r4, r17
    1368:	81 2f       	mov	r24, r17
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	c8 16       	cp	r12, r24
    136e:	d9 06       	cpc	r13, r25
    1370:	2c f4       	brge	.+10     	; 0x137c <vfprintf+0x26c>
    1372:	1c 19       	sub	r17, r12
    1374:	04 c0       	rjmp	.+8      	; 0x137e <vfprintf+0x26e>
    1376:	44 24       	eor	r4, r4
    1378:	43 94       	inc	r4
    137a:	01 c0       	rjmp	.+2      	; 0x137e <vfprintf+0x26e>
    137c:	10 e0       	ldi	r17, 0x00	; 0
    137e:	77 fe       	sbrs	r7, 7
    1380:	07 c0       	rjmp	.+14     	; 0x1390 <vfprintf+0x280>
    1382:	1c 14       	cp	r1, r12
    1384:	1d 04       	cpc	r1, r13
    1386:	3c f4       	brge	.+14     	; 0x1396 <vfprintf+0x286>
    1388:	96 01       	movw	r18, r12
    138a:	2f 5f       	subi	r18, 0xFF	; 255
    138c:	3f 4f       	sbci	r19, 0xFF	; 255
    138e:	05 c0       	rjmp	.+10     	; 0x139a <vfprintf+0x28a>
    1390:	25 e0       	ldi	r18, 0x05	; 5
    1392:	30 e0       	ldi	r19, 0x00	; 0
    1394:	02 c0       	rjmp	.+4      	; 0x139a <vfprintf+0x28a>
    1396:	21 e0       	ldi	r18, 0x01	; 1
    1398:	30 e0       	ldi	r19, 0x00	; 0
    139a:	66 20       	and	r6, r6
    139c:	11 f0       	breq	.+4      	; 0x13a2 <vfprintf+0x292>
    139e:	2f 5f       	subi	r18, 0xFF	; 255
    13a0:	3f 4f       	sbci	r19, 0xFF	; 255
    13a2:	11 23       	and	r17, r17
    13a4:	31 f0       	breq	.+12     	; 0x13b2 <vfprintf+0x2a2>
    13a6:	41 2f       	mov	r20, r17
    13a8:	50 e0       	ldi	r21, 0x00	; 0
    13aa:	4f 5f       	subi	r20, 0xFF	; 255
    13ac:	5f 4f       	sbci	r21, 0xFF	; 255
    13ae:	24 0f       	add	r18, r20
    13b0:	35 1f       	adc	r19, r21
    13b2:	45 2d       	mov	r20, r5
    13b4:	50 e0       	ldi	r21, 0x00	; 0
    13b6:	24 17       	cp	r18, r20
    13b8:	35 07       	cpc	r19, r21
    13ba:	14 f4       	brge	.+4      	; 0x13c0 <vfprintf+0x2b0>
    13bc:	52 1a       	sub	r5, r18
    13be:	01 c0       	rjmp	.+2      	; 0x13c2 <vfprintf+0x2b2>
    13c0:	51 2c       	mov	r5, r1
    13c2:	87 2d       	mov	r24, r7
    13c4:	89 70       	andi	r24, 0x09	; 9
    13c6:	49 f4       	brne	.+18     	; 0x13da <vfprintf+0x2ca>
    13c8:	55 20       	and	r5, r5
    13ca:	39 f0       	breq	.+14     	; 0x13da <vfprintf+0x2ca>
    13cc:	b7 01       	movw	r22, r14
    13ce:	80 e2       	ldi	r24, 0x20	; 32
    13d0:	90 e0       	ldi	r25, 0x00	; 0
    13d2:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <fputc>
    13d6:	5a 94       	dec	r5
    13d8:	f7 cf       	rjmp	.-18     	; 0x13c8 <vfprintf+0x2b8>
    13da:	66 20       	and	r6, r6
    13dc:	29 f0       	breq	.+10     	; 0x13e8 <vfprintf+0x2d8>
    13de:	b7 01       	movw	r22, r14
    13e0:	86 2d       	mov	r24, r6
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <fputc>
    13e8:	73 fc       	sbrc	r7, 3
    13ea:	09 c0       	rjmp	.+18     	; 0x13fe <vfprintf+0x2ee>
    13ec:	55 20       	and	r5, r5
    13ee:	39 f0       	breq	.+14     	; 0x13fe <vfprintf+0x2ee>
    13f0:	b7 01       	movw	r22, r14
    13f2:	80 e3       	ldi	r24, 0x30	; 48
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <fputc>
    13fa:	5a 94       	dec	r5
    13fc:	f7 cf       	rjmp	.-18     	; 0x13ec <vfprintf+0x2dc>
    13fe:	77 fe       	sbrs	r7, 7
    1400:	5f c0       	rjmp	.+190    	; 0x14c0 <vfprintf+0x3b0>
    1402:	9c 2d       	mov	r25, r12
    1404:	8d 2d       	mov	r24, r13
    1406:	d7 fe       	sbrs	r13, 7
    1408:	02 c0       	rjmp	.+4      	; 0x140e <vfprintf+0x2fe>
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	69 2e       	mov	r6, r25
    1410:	78 2e       	mov	r7, r24
    1412:	40 e0       	ldi	r20, 0x00	; 0
    1414:	50 e0       	ldi	r21, 0x00	; 0
    1416:	c6 01       	movw	r24, r12
    1418:	84 19       	sub	r24, r4
    141a:	91 09       	sbc	r25, r1
    141c:	9d 87       	std	Y+13, r25	; 0x0d
    141e:	8c 87       	std	Y+12, r24	; 0x0c
    1420:	96 01       	movw	r18, r12
    1422:	26 19       	sub	r18, r6
    1424:	37 09       	sbc	r19, r7
    1426:	28 0d       	add	r18, r8
    1428:	39 1d       	adc	r19, r9
    142a:	81 2f       	mov	r24, r17
    142c:	90 e0       	ldi	r25, 0x00	; 0
    142e:	ee 27       	eor	r30, r30
    1430:	ff 27       	eor	r31, r31
    1432:	e8 1b       	sub	r30, r24
    1434:	f9 0b       	sbc	r31, r25
    1436:	ff 87       	std	Y+15, r31	; 0x0f
    1438:	ee 87       	std	Y+14, r30	; 0x0e
    143a:	ff ef       	ldi	r31, 0xFF	; 255
    143c:	6f 16       	cp	r6, r31
    143e:	7f 06       	cpc	r7, r31
    1440:	69 f4       	brne	.+26     	; 0x145c <vfprintf+0x34c>
    1442:	b7 01       	movw	r22, r14
    1444:	8e e2       	ldi	r24, 0x2E	; 46
    1446:	90 e0       	ldi	r25, 0x00	; 0
    1448:	2b 8b       	std	Y+19, r18	; 0x13
    144a:	3a 8b       	std	Y+18, r19	; 0x12
    144c:	48 8b       	std	Y+16, r20	; 0x10
    144e:	59 8b       	std	Y+17, r21	; 0x11
    1450:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <fputc>
    1454:	59 89       	ldd	r21, Y+17	; 0x11
    1456:	48 89       	ldd	r20, Y+16	; 0x10
    1458:	3a 89       	ldd	r19, Y+18	; 0x12
    145a:	2b 89       	ldd	r18, Y+19	; 0x13
    145c:	c6 14       	cp	r12, r6
    145e:	d7 04       	cpc	r13, r7
    1460:	54 f0       	brlt	.+20     	; 0x1476 <vfprintf+0x366>
    1462:	6c 85       	ldd	r22, Y+12	; 0x0c
    1464:	7d 85       	ldd	r23, Y+13	; 0x0d
    1466:	66 15       	cp	r22, r6
    1468:	77 05       	cpc	r23, r7
    146a:	2c f4       	brge	.+10     	; 0x1476 <vfprintf+0x366>
    146c:	f9 01       	movw	r30, r18
    146e:	e4 0f       	add	r30, r20
    1470:	f5 1f       	adc	r31, r21
    1472:	81 81       	ldd	r24, Z+1	; 0x01
    1474:	01 c0       	rjmp	.+2      	; 0x1478 <vfprintf+0x368>
    1476:	80 e3       	ldi	r24, 0x30	; 48
    1478:	71 e0       	ldi	r23, 0x01	; 1
    147a:	67 1a       	sub	r6, r23
    147c:	71 08       	sbc	r7, r1
    147e:	4f 5f       	subi	r20, 0xFF	; 255
    1480:	5f 4f       	sbci	r21, 0xFF	; 255
    1482:	ee 85       	ldd	r30, Y+14	; 0x0e
    1484:	ff 85       	ldd	r31, Y+15	; 0x0f
    1486:	6e 16       	cp	r6, r30
    1488:	7f 06       	cpc	r7, r31
    148a:	6c f0       	brlt	.+26     	; 0x14a6 <vfprintf+0x396>
    148c:	b7 01       	movw	r22, r14
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	2b 8b       	std	Y+19, r18	; 0x13
    1492:	3a 8b       	std	Y+18, r19	; 0x12
    1494:	48 8b       	std	Y+16, r20	; 0x10
    1496:	59 8b       	std	Y+17, r21	; 0x11
    1498:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <fputc>
    149c:	2b 89       	ldd	r18, Y+19	; 0x13
    149e:	3a 89       	ldd	r19, Y+18	; 0x12
    14a0:	48 89       	ldd	r20, Y+16	; 0x10
    14a2:	59 89       	ldd	r21, Y+17	; 0x11
    14a4:	ca cf       	rjmp	.-108    	; 0x143a <vfprintf+0x32a>
    14a6:	6c 14       	cp	r6, r12
    14a8:	7d 04       	cpc	r7, r13
    14aa:	39 f4       	brne	.+14     	; 0x14ba <vfprintf+0x3aa>
    14ac:	9a 81       	ldd	r25, Y+2	; 0x02
    14ae:	96 33       	cpi	r25, 0x36	; 54
    14b0:	18 f4       	brcc	.+6      	; 0x14b8 <vfprintf+0x3a8>
    14b2:	95 33       	cpi	r25, 0x35	; 53
    14b4:	11 f4       	brne	.+4      	; 0x14ba <vfprintf+0x3aa>
    14b6:	04 ff       	sbrs	r16, 4
    14b8:	81 e3       	ldi	r24, 0x31	; 49
    14ba:	b7 01       	movw	r22, r14
    14bc:	90 e0       	ldi	r25, 0x00	; 0
    14be:	4b c0       	rjmp	.+150    	; 0x1556 <vfprintf+0x446>
    14c0:	8a 81       	ldd	r24, Y+2	; 0x02
    14c2:	81 33       	cpi	r24, 0x31	; 49
    14c4:	09 f0       	breq	.+2      	; 0x14c8 <vfprintf+0x3b8>
    14c6:	0f 7e       	andi	r16, 0xEF	; 239
    14c8:	b7 01       	movw	r22, r14
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <fputc>
    14d0:	11 11       	cpse	r17, r1
    14d2:	05 c0       	rjmp	.+10     	; 0x14de <vfprintf+0x3ce>
    14d4:	74 fe       	sbrs	r7, 4
    14d6:	18 c0       	rjmp	.+48     	; 0x1508 <vfprintf+0x3f8>
    14d8:	85 e4       	ldi	r24, 0x45	; 69
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	17 c0       	rjmp	.+46     	; 0x150c <vfprintf+0x3fc>
    14de:	b7 01       	movw	r22, r14
    14e0:	8e e2       	ldi	r24, 0x2E	; 46
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <fputc>
    14e8:	82 e0       	ldi	r24, 0x02	; 2
    14ea:	66 24       	eor	r6, r6
    14ec:	63 94       	inc	r6
    14ee:	68 0e       	add	r6, r24
    14f0:	f4 01       	movw	r30, r8
    14f2:	e8 0f       	add	r30, r24
    14f4:	f1 1d       	adc	r31, r1
    14f6:	80 81       	ld	r24, Z
    14f8:	b7 01       	movw	r22, r14
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <fputc>
    1500:	11 50       	subi	r17, 0x01	; 1
    1502:	41 f3       	breq	.-48     	; 0x14d4 <vfprintf+0x3c4>
    1504:	86 2d       	mov	r24, r6
    1506:	f1 cf       	rjmp	.-30     	; 0x14ea <vfprintf+0x3da>
    1508:	85 e6       	ldi	r24, 0x65	; 101
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	b7 01       	movw	r22, r14
    150e:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <fputc>
    1512:	d7 fc       	sbrc	r13, 7
    1514:	05 c0       	rjmp	.+10     	; 0x1520 <vfprintf+0x410>
    1516:	c1 14       	cp	r12, r1
    1518:	d1 04       	cpc	r13, r1
    151a:	39 f4       	brne	.+14     	; 0x152a <vfprintf+0x41a>
    151c:	04 ff       	sbrs	r16, 4
    151e:	05 c0       	rjmp	.+10     	; 0x152a <vfprintf+0x41a>
    1520:	d1 94       	neg	r13
    1522:	c1 94       	neg	r12
    1524:	d1 08       	sbc	r13, r1
    1526:	8d e2       	ldi	r24, 0x2D	; 45
    1528:	01 c0       	rjmp	.+2      	; 0x152c <vfprintf+0x41c>
    152a:	8b e2       	ldi	r24, 0x2B	; 43
    152c:	b7 01       	movw	r22, r14
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <fputc>
    1534:	80 e3       	ldi	r24, 0x30	; 48
    1536:	6a e0       	ldi	r22, 0x0A	; 10
    1538:	c6 16       	cp	r12, r22
    153a:	d1 04       	cpc	r13, r1
    153c:	2c f0       	brlt	.+10     	; 0x1548 <vfprintf+0x438>
    153e:	8f 5f       	subi	r24, 0xFF	; 255
    1540:	fa e0       	ldi	r31, 0x0A	; 10
    1542:	cf 1a       	sub	r12, r31
    1544:	d1 08       	sbc	r13, r1
    1546:	f7 cf       	rjmp	.-18     	; 0x1536 <vfprintf+0x426>
    1548:	b7 01       	movw	r22, r14
    154a:	90 e0       	ldi	r25, 0x00	; 0
    154c:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <fputc>
    1550:	b7 01       	movw	r22, r14
    1552:	c6 01       	movw	r24, r12
    1554:	c0 96       	adiw	r24, 0x30	; 48
    1556:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <fputc>
    155a:	41 c1       	rjmp	.+642    	; 0x17de <vfprintf+0x6ce>
    155c:	83 36       	cpi	r24, 0x63	; 99
    155e:	31 f0       	breq	.+12     	; 0x156c <vfprintf+0x45c>
    1560:	83 37       	cpi	r24, 0x73	; 115
    1562:	79 f0       	breq	.+30     	; 0x1582 <vfprintf+0x472>
    1564:	83 35       	cpi	r24, 0x53	; 83
    1566:	09 f0       	breq	.+2      	; 0x156a <vfprintf+0x45a>
    1568:	58 c0       	rjmp	.+176    	; 0x161a <vfprintf+0x50a>
    156a:	21 c0       	rjmp	.+66     	; 0x15ae <vfprintf+0x49e>
    156c:	56 01       	movw	r10, r12
    156e:	72 e0       	ldi	r23, 0x02	; 2
    1570:	a7 0e       	add	r10, r23
    1572:	b1 1c       	adc	r11, r1
    1574:	f6 01       	movw	r30, r12
    1576:	80 81       	ld	r24, Z
    1578:	89 83       	std	Y+1, r24	; 0x01
    157a:	01 e0       	ldi	r16, 0x01	; 1
    157c:	10 e0       	ldi	r17, 0x00	; 0
    157e:	64 01       	movw	r12, r8
    1580:	14 c0       	rjmp	.+40     	; 0x15aa <vfprintf+0x49a>
    1582:	56 01       	movw	r10, r12
    1584:	f2 e0       	ldi	r31, 0x02	; 2
    1586:	af 0e       	add	r10, r31
    1588:	b1 1c       	adc	r11, r1
    158a:	f6 01       	movw	r30, r12
    158c:	c0 80       	ld	r12, Z
    158e:	d1 80       	ldd	r13, Z+1	; 0x01
    1590:	26 ff       	sbrs	r18, 6
    1592:	03 c0       	rjmp	.+6      	; 0x159a <vfprintf+0x48a>
    1594:	61 2f       	mov	r22, r17
    1596:	70 e0       	ldi	r23, 0x00	; 0
    1598:	02 c0       	rjmp	.+4      	; 0x159e <vfprintf+0x48e>
    159a:	6f ef       	ldi	r22, 0xFF	; 255
    159c:	7f ef       	ldi	r23, 0xFF	; 255
    159e:	c6 01       	movw	r24, r12
    15a0:	2b 8b       	std	Y+19, r18	; 0x13
    15a2:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <strnlen>
    15a6:	8c 01       	movw	r16, r24
    15a8:	2b 89       	ldd	r18, Y+19	; 0x13
    15aa:	2f 77       	andi	r18, 0x7F	; 127
    15ac:	15 c0       	rjmp	.+42     	; 0x15d8 <vfprintf+0x4c8>
    15ae:	56 01       	movw	r10, r12
    15b0:	f2 e0       	ldi	r31, 0x02	; 2
    15b2:	af 0e       	add	r10, r31
    15b4:	b1 1c       	adc	r11, r1
    15b6:	f6 01       	movw	r30, r12
    15b8:	c0 80       	ld	r12, Z
    15ba:	d1 80       	ldd	r13, Z+1	; 0x01
    15bc:	26 ff       	sbrs	r18, 6
    15be:	03 c0       	rjmp	.+6      	; 0x15c6 <vfprintf+0x4b6>
    15c0:	61 2f       	mov	r22, r17
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	02 c0       	rjmp	.+4      	; 0x15ca <vfprintf+0x4ba>
    15c6:	6f ef       	ldi	r22, 0xFF	; 255
    15c8:	7f ef       	ldi	r23, 0xFF	; 255
    15ca:	c6 01       	movw	r24, r12
    15cc:	2b 8b       	std	Y+19, r18	; 0x13
    15ce:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <strnlen_P>
    15d2:	8c 01       	movw	r16, r24
    15d4:	2b 89       	ldd	r18, Y+19	; 0x13
    15d6:	20 68       	ori	r18, 0x80	; 128
    15d8:	72 2e       	mov	r7, r18
    15da:	23 fd       	sbrc	r18, 3
    15dc:	1a c0       	rjmp	.+52     	; 0x1612 <vfprintf+0x502>
    15de:	85 2d       	mov	r24, r5
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	08 17       	cp	r16, r24
    15e4:	19 07       	cpc	r17, r25
    15e6:	a8 f4       	brcc	.+42     	; 0x1612 <vfprintf+0x502>
    15e8:	b7 01       	movw	r22, r14
    15ea:	80 e2       	ldi	r24, 0x20	; 32
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <fputc>
    15f2:	5a 94       	dec	r5
    15f4:	f4 cf       	rjmp	.-24     	; 0x15de <vfprintf+0x4ce>
    15f6:	f6 01       	movw	r30, r12
    15f8:	77 fc       	sbrc	r7, 7
    15fa:	85 91       	lpm	r24, Z+
    15fc:	77 fe       	sbrs	r7, 7
    15fe:	81 91       	ld	r24, Z+
    1600:	6f 01       	movw	r12, r30
    1602:	b7 01       	movw	r22, r14
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <fputc>
    160a:	51 10       	cpse	r5, r1
    160c:	5a 94       	dec	r5
    160e:	01 50       	subi	r16, 0x01	; 1
    1610:	11 09       	sbc	r17, r1
    1612:	01 15       	cp	r16, r1
    1614:	11 05       	cpc	r17, r1
    1616:	79 f7       	brne	.-34     	; 0x15f6 <vfprintf+0x4e6>
    1618:	e2 c0       	rjmp	.+452    	; 0x17de <vfprintf+0x6ce>
    161a:	84 36       	cpi	r24, 0x64	; 100
    161c:	11 f0       	breq	.+4      	; 0x1622 <vfprintf+0x512>
    161e:	89 36       	cpi	r24, 0x69	; 105
    1620:	51 f5       	brne	.+84     	; 0x1676 <vfprintf+0x566>
    1622:	56 01       	movw	r10, r12
    1624:	27 ff       	sbrs	r18, 7
    1626:	09 c0       	rjmp	.+18     	; 0x163a <vfprintf+0x52a>
    1628:	f4 e0       	ldi	r31, 0x04	; 4
    162a:	af 0e       	add	r10, r31
    162c:	b1 1c       	adc	r11, r1
    162e:	f6 01       	movw	r30, r12
    1630:	60 81       	ld	r22, Z
    1632:	71 81       	ldd	r23, Z+1	; 0x01
    1634:	82 81       	ldd	r24, Z+2	; 0x02
    1636:	93 81       	ldd	r25, Z+3	; 0x03
    1638:	0a c0       	rjmp	.+20     	; 0x164e <vfprintf+0x53e>
    163a:	f2 e0       	ldi	r31, 0x02	; 2
    163c:	af 0e       	add	r10, r31
    163e:	b1 1c       	adc	r11, r1
    1640:	f6 01       	movw	r30, r12
    1642:	60 81       	ld	r22, Z
    1644:	71 81       	ldd	r23, Z+1	; 0x01
    1646:	88 27       	eor	r24, r24
    1648:	77 fd       	sbrc	r23, 7
    164a:	80 95       	com	r24
    164c:	98 2f       	mov	r25, r24
    164e:	02 2f       	mov	r16, r18
    1650:	0f 76       	andi	r16, 0x6F	; 111
    1652:	97 ff       	sbrs	r25, 7
    1654:	08 c0       	rjmp	.+16     	; 0x1666 <vfprintf+0x556>
    1656:	90 95       	com	r25
    1658:	80 95       	com	r24
    165a:	70 95       	com	r23
    165c:	61 95       	neg	r22
    165e:	7f 4f       	sbci	r23, 0xFF	; 255
    1660:	8f 4f       	sbci	r24, 0xFF	; 255
    1662:	9f 4f       	sbci	r25, 0xFF	; 255
    1664:	00 68       	ori	r16, 0x80	; 128
    1666:	2a e0       	ldi	r18, 0x0A	; 10
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	a4 01       	movw	r20, r8
    166c:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__ultoa_invert>
    1670:	c8 2e       	mov	r12, r24
    1672:	c8 18       	sub	r12, r8
    1674:	3e c0       	rjmp	.+124    	; 0x16f2 <vfprintf+0x5e2>
    1676:	02 2f       	mov	r16, r18
    1678:	85 37       	cpi	r24, 0x75	; 117
    167a:	21 f4       	brne	.+8      	; 0x1684 <vfprintf+0x574>
    167c:	0f 7e       	andi	r16, 0xEF	; 239
    167e:	2a e0       	ldi	r18, 0x0A	; 10
    1680:	30 e0       	ldi	r19, 0x00	; 0
    1682:	1d c0       	rjmp	.+58     	; 0x16be <vfprintf+0x5ae>
    1684:	09 7f       	andi	r16, 0xF9	; 249
    1686:	8f 36       	cpi	r24, 0x6F	; 111
    1688:	91 f0       	breq	.+36     	; 0x16ae <vfprintf+0x59e>
    168a:	18 f4       	brcc	.+6      	; 0x1692 <vfprintf+0x582>
    168c:	88 35       	cpi	r24, 0x58	; 88
    168e:	59 f0       	breq	.+22     	; 0x16a6 <vfprintf+0x596>
    1690:	b0 c0       	rjmp	.+352    	; 0x17f2 <vfprintf+0x6e2>
    1692:	80 37       	cpi	r24, 0x70	; 112
    1694:	19 f0       	breq	.+6      	; 0x169c <vfprintf+0x58c>
    1696:	88 37       	cpi	r24, 0x78	; 120
    1698:	11 f0       	breq	.+4      	; 0x169e <vfprintf+0x58e>
    169a:	ab c0       	rjmp	.+342    	; 0x17f2 <vfprintf+0x6e2>
    169c:	00 61       	ori	r16, 0x10	; 16
    169e:	04 ff       	sbrs	r16, 4
    16a0:	09 c0       	rjmp	.+18     	; 0x16b4 <vfprintf+0x5a4>
    16a2:	04 60       	ori	r16, 0x04	; 4
    16a4:	07 c0       	rjmp	.+14     	; 0x16b4 <vfprintf+0x5a4>
    16a6:	24 ff       	sbrs	r18, 4
    16a8:	08 c0       	rjmp	.+16     	; 0x16ba <vfprintf+0x5aa>
    16aa:	06 60       	ori	r16, 0x06	; 6
    16ac:	06 c0       	rjmp	.+12     	; 0x16ba <vfprintf+0x5aa>
    16ae:	28 e0       	ldi	r18, 0x08	; 8
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	05 c0       	rjmp	.+10     	; 0x16be <vfprintf+0x5ae>
    16b4:	20 e1       	ldi	r18, 0x10	; 16
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	02 c0       	rjmp	.+4      	; 0x16be <vfprintf+0x5ae>
    16ba:	20 e1       	ldi	r18, 0x10	; 16
    16bc:	32 e0       	ldi	r19, 0x02	; 2
    16be:	56 01       	movw	r10, r12
    16c0:	07 ff       	sbrs	r16, 7
    16c2:	09 c0       	rjmp	.+18     	; 0x16d6 <vfprintf+0x5c6>
    16c4:	f4 e0       	ldi	r31, 0x04	; 4
    16c6:	af 0e       	add	r10, r31
    16c8:	b1 1c       	adc	r11, r1
    16ca:	f6 01       	movw	r30, r12
    16cc:	60 81       	ld	r22, Z
    16ce:	71 81       	ldd	r23, Z+1	; 0x01
    16d0:	82 81       	ldd	r24, Z+2	; 0x02
    16d2:	93 81       	ldd	r25, Z+3	; 0x03
    16d4:	08 c0       	rjmp	.+16     	; 0x16e6 <vfprintf+0x5d6>
    16d6:	f2 e0       	ldi	r31, 0x02	; 2
    16d8:	af 0e       	add	r10, r31
    16da:	b1 1c       	adc	r11, r1
    16dc:	f6 01       	movw	r30, r12
    16de:	60 81       	ld	r22, Z
    16e0:	71 81       	ldd	r23, Z+1	; 0x01
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	90 e0       	ldi	r25, 0x00	; 0
    16e6:	a4 01       	movw	r20, r8
    16e8:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <__ultoa_invert>
    16ec:	c8 2e       	mov	r12, r24
    16ee:	c8 18       	sub	r12, r8
    16f0:	0f 77       	andi	r16, 0x7F	; 127
    16f2:	06 ff       	sbrs	r16, 6
    16f4:	0b c0       	rjmp	.+22     	; 0x170c <vfprintf+0x5fc>
    16f6:	20 2f       	mov	r18, r16
    16f8:	2e 7f       	andi	r18, 0xFE	; 254
    16fa:	c1 16       	cp	r12, r17
    16fc:	50 f4       	brcc	.+20     	; 0x1712 <vfprintf+0x602>
    16fe:	04 ff       	sbrs	r16, 4
    1700:	0a c0       	rjmp	.+20     	; 0x1716 <vfprintf+0x606>
    1702:	02 fd       	sbrc	r16, 2
    1704:	08 c0       	rjmp	.+16     	; 0x1716 <vfprintf+0x606>
    1706:	20 2f       	mov	r18, r16
    1708:	2e 7e       	andi	r18, 0xEE	; 238
    170a:	05 c0       	rjmp	.+10     	; 0x1716 <vfprintf+0x606>
    170c:	dc 2c       	mov	r13, r12
    170e:	20 2f       	mov	r18, r16
    1710:	03 c0       	rjmp	.+6      	; 0x1718 <vfprintf+0x608>
    1712:	dc 2c       	mov	r13, r12
    1714:	01 c0       	rjmp	.+2      	; 0x1718 <vfprintf+0x608>
    1716:	d1 2e       	mov	r13, r17
    1718:	24 ff       	sbrs	r18, 4
    171a:	0d c0       	rjmp	.+26     	; 0x1736 <vfprintf+0x626>
    171c:	fe 01       	movw	r30, r28
    171e:	ec 0d       	add	r30, r12
    1720:	f1 1d       	adc	r31, r1
    1722:	80 81       	ld	r24, Z
    1724:	80 33       	cpi	r24, 0x30	; 48
    1726:	11 f4       	brne	.+4      	; 0x172c <vfprintf+0x61c>
    1728:	29 7e       	andi	r18, 0xE9	; 233
    172a:	09 c0       	rjmp	.+18     	; 0x173e <vfprintf+0x62e>
    172c:	22 ff       	sbrs	r18, 2
    172e:	06 c0       	rjmp	.+12     	; 0x173c <vfprintf+0x62c>
    1730:	d3 94       	inc	r13
    1732:	d3 94       	inc	r13
    1734:	04 c0       	rjmp	.+8      	; 0x173e <vfprintf+0x62e>
    1736:	82 2f       	mov	r24, r18
    1738:	86 78       	andi	r24, 0x86	; 134
    173a:	09 f0       	breq	.+2      	; 0x173e <vfprintf+0x62e>
    173c:	d3 94       	inc	r13
    173e:	23 fd       	sbrc	r18, 3
    1740:	13 c0       	rjmp	.+38     	; 0x1768 <vfprintf+0x658>
    1742:	20 ff       	sbrs	r18, 0
    1744:	06 c0       	rjmp	.+12     	; 0x1752 <vfprintf+0x642>
    1746:	1c 2d       	mov	r17, r12
    1748:	d5 14       	cp	r13, r5
    174a:	18 f4       	brcc	.+6      	; 0x1752 <vfprintf+0x642>
    174c:	15 0d       	add	r17, r5
    174e:	1d 19       	sub	r17, r13
    1750:	d5 2c       	mov	r13, r5
    1752:	d5 14       	cp	r13, r5
    1754:	68 f4       	brcc	.+26     	; 0x1770 <vfprintf+0x660>
    1756:	b7 01       	movw	r22, r14
    1758:	80 e2       	ldi	r24, 0x20	; 32
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	2b 8b       	std	Y+19, r18	; 0x13
    175e:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <fputc>
    1762:	d3 94       	inc	r13
    1764:	2b 89       	ldd	r18, Y+19	; 0x13
    1766:	f5 cf       	rjmp	.-22     	; 0x1752 <vfprintf+0x642>
    1768:	d5 14       	cp	r13, r5
    176a:	10 f4       	brcc	.+4      	; 0x1770 <vfprintf+0x660>
    176c:	5d 18       	sub	r5, r13
    176e:	01 c0       	rjmp	.+2      	; 0x1772 <vfprintf+0x662>
    1770:	51 2c       	mov	r5, r1
    1772:	24 ff       	sbrs	r18, 4
    1774:	12 c0       	rjmp	.+36     	; 0x179a <vfprintf+0x68a>
    1776:	b7 01       	movw	r22, r14
    1778:	80 e3       	ldi	r24, 0x30	; 48
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	2b 8b       	std	Y+19, r18	; 0x13
    177e:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <fputc>
    1782:	2b 89       	ldd	r18, Y+19	; 0x13
    1784:	22 ff       	sbrs	r18, 2
    1786:	17 c0       	rjmp	.+46     	; 0x17b6 <vfprintf+0x6a6>
    1788:	21 ff       	sbrs	r18, 1
    178a:	03 c0       	rjmp	.+6      	; 0x1792 <vfprintf+0x682>
    178c:	88 e5       	ldi	r24, 0x58	; 88
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	02 c0       	rjmp	.+4      	; 0x1796 <vfprintf+0x686>
    1792:	88 e7       	ldi	r24, 0x78	; 120
    1794:	90 e0       	ldi	r25, 0x00	; 0
    1796:	b7 01       	movw	r22, r14
    1798:	0c c0       	rjmp	.+24     	; 0x17b2 <vfprintf+0x6a2>
    179a:	82 2f       	mov	r24, r18
    179c:	86 78       	andi	r24, 0x86	; 134
    179e:	59 f0       	breq	.+22     	; 0x17b6 <vfprintf+0x6a6>
    17a0:	21 fd       	sbrc	r18, 1
    17a2:	02 c0       	rjmp	.+4      	; 0x17a8 <vfprintf+0x698>
    17a4:	80 e2       	ldi	r24, 0x20	; 32
    17a6:	01 c0       	rjmp	.+2      	; 0x17aa <vfprintf+0x69a>
    17a8:	8b e2       	ldi	r24, 0x2B	; 43
    17aa:	27 fd       	sbrc	r18, 7
    17ac:	8d e2       	ldi	r24, 0x2D	; 45
    17ae:	b7 01       	movw	r22, r14
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <fputc>
    17b6:	c1 16       	cp	r12, r17
    17b8:	38 f4       	brcc	.+14     	; 0x17c8 <vfprintf+0x6b8>
    17ba:	b7 01       	movw	r22, r14
    17bc:	80 e3       	ldi	r24, 0x30	; 48
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <fputc>
    17c4:	11 50       	subi	r17, 0x01	; 1
    17c6:	f7 cf       	rjmp	.-18     	; 0x17b6 <vfprintf+0x6a6>
    17c8:	ca 94       	dec	r12
    17ca:	f4 01       	movw	r30, r8
    17cc:	ec 0d       	add	r30, r12
    17ce:	f1 1d       	adc	r31, r1
    17d0:	80 81       	ld	r24, Z
    17d2:	b7 01       	movw	r22, r14
    17d4:	90 e0       	ldi	r25, 0x00	; 0
    17d6:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <fputc>
    17da:	c1 10       	cpse	r12, r1
    17dc:	f5 cf       	rjmp	.-22     	; 0x17c8 <vfprintf+0x6b8>
    17de:	55 20       	and	r5, r5
    17e0:	09 f4       	brne	.+2      	; 0x17e4 <vfprintf+0x6d4>
    17e2:	c2 cc       	rjmp	.-1660   	; 0x1168 <vfprintf+0x58>
    17e4:	b7 01       	movw	r22, r14
    17e6:	80 e2       	ldi	r24, 0x20	; 32
    17e8:	90 e0       	ldi	r25, 0x00	; 0
    17ea:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <fputc>
    17ee:	5a 94       	dec	r5
    17f0:	f6 cf       	rjmp	.-20     	; 0x17de <vfprintf+0x6ce>
    17f2:	f7 01       	movw	r30, r14
    17f4:	86 81       	ldd	r24, Z+6	; 0x06
    17f6:	97 81       	ldd	r25, Z+7	; 0x07
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <vfprintf+0x6ee>
    17fa:	8f ef       	ldi	r24, 0xFF	; 255
    17fc:	9f ef       	ldi	r25, 0xFF	; 255
    17fe:	63 96       	adiw	r28, 0x13	; 19
    1800:	e2 e1       	ldi	r30, 0x12	; 18
    1802:	0c 94 41 0c 	jmp	0x1882	; 0x1882 <__epilogue_restores__>

00001806 <__udivmodsi4>:
    1806:	a1 e2       	ldi	r26, 0x21	; 33
    1808:	1a 2e       	mov	r1, r26
    180a:	aa 1b       	sub	r26, r26
    180c:	bb 1b       	sub	r27, r27
    180e:	fd 01       	movw	r30, r26
    1810:	0d c0       	rjmp	.+26     	; 0x182c <__udivmodsi4_ep>

00001812 <__udivmodsi4_loop>:
    1812:	aa 1f       	adc	r26, r26
    1814:	bb 1f       	adc	r27, r27
    1816:	ee 1f       	adc	r30, r30
    1818:	ff 1f       	adc	r31, r31
    181a:	a2 17       	cp	r26, r18
    181c:	b3 07       	cpc	r27, r19
    181e:	e4 07       	cpc	r30, r20
    1820:	f5 07       	cpc	r31, r21
    1822:	20 f0       	brcs	.+8      	; 0x182c <__udivmodsi4_ep>
    1824:	a2 1b       	sub	r26, r18
    1826:	b3 0b       	sbc	r27, r19
    1828:	e4 0b       	sbc	r30, r20
    182a:	f5 0b       	sbc	r31, r21

0000182c <__udivmodsi4_ep>:
    182c:	66 1f       	adc	r22, r22
    182e:	77 1f       	adc	r23, r23
    1830:	88 1f       	adc	r24, r24
    1832:	99 1f       	adc	r25, r25
    1834:	1a 94       	dec	r1
    1836:	69 f7       	brne	.-38     	; 0x1812 <__udivmodsi4_loop>
    1838:	60 95       	com	r22
    183a:	70 95       	com	r23
    183c:	80 95       	com	r24
    183e:	90 95       	com	r25
    1840:	9b 01       	movw	r18, r22
    1842:	ac 01       	movw	r20, r24
    1844:	bd 01       	movw	r22, r26
    1846:	cf 01       	movw	r24, r30
    1848:	08 95       	ret

0000184a <__prologue_saves__>:
    184a:	2f 92       	push	r2
    184c:	3f 92       	push	r3
    184e:	4f 92       	push	r4
    1850:	5f 92       	push	r5
    1852:	6f 92       	push	r6
    1854:	7f 92       	push	r7
    1856:	8f 92       	push	r8
    1858:	9f 92       	push	r9
    185a:	af 92       	push	r10
    185c:	bf 92       	push	r11
    185e:	cf 92       	push	r12
    1860:	df 92       	push	r13
    1862:	ef 92       	push	r14
    1864:	ff 92       	push	r15
    1866:	0f 93       	push	r16
    1868:	1f 93       	push	r17
    186a:	cf 93       	push	r28
    186c:	df 93       	push	r29
    186e:	cd b7       	in	r28, 0x3d	; 61
    1870:	de b7       	in	r29, 0x3e	; 62
    1872:	ca 1b       	sub	r28, r26
    1874:	db 0b       	sbc	r29, r27
    1876:	0f b6       	in	r0, 0x3f	; 63
    1878:	f8 94       	cli
    187a:	de bf       	out	0x3e, r29	; 62
    187c:	0f be       	out	0x3f, r0	; 63
    187e:	cd bf       	out	0x3d, r28	; 61
    1880:	09 94       	ijmp

00001882 <__epilogue_restores__>:
    1882:	2a 88       	ldd	r2, Y+18	; 0x12
    1884:	39 88       	ldd	r3, Y+17	; 0x11
    1886:	48 88       	ldd	r4, Y+16	; 0x10
    1888:	5f 84       	ldd	r5, Y+15	; 0x0f
    188a:	6e 84       	ldd	r6, Y+14	; 0x0e
    188c:	7d 84       	ldd	r7, Y+13	; 0x0d
    188e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1890:	9b 84       	ldd	r9, Y+11	; 0x0b
    1892:	aa 84       	ldd	r10, Y+10	; 0x0a
    1894:	b9 84       	ldd	r11, Y+9	; 0x09
    1896:	c8 84       	ldd	r12, Y+8	; 0x08
    1898:	df 80       	ldd	r13, Y+7	; 0x07
    189a:	ee 80       	ldd	r14, Y+6	; 0x06
    189c:	fd 80       	ldd	r15, Y+5	; 0x05
    189e:	0c 81       	ldd	r16, Y+4	; 0x04
    18a0:	1b 81       	ldd	r17, Y+3	; 0x03
    18a2:	aa 81       	ldd	r26, Y+2	; 0x02
    18a4:	b9 81       	ldd	r27, Y+1	; 0x01
    18a6:	ce 0f       	add	r28, r30
    18a8:	d1 1d       	adc	r29, r1
    18aa:	0f b6       	in	r0, 0x3f	; 63
    18ac:	f8 94       	cli
    18ae:	de bf       	out	0x3e, r29	; 62
    18b0:	0f be       	out	0x3f, r0	; 63
    18b2:	cd bf       	out	0x3d, r28	; 61
    18b4:	ed 01       	movw	r28, r26
    18b6:	08 95       	ret

000018b8 <malloc>:
    18b8:	cf 93       	push	r28
    18ba:	df 93       	push	r29
    18bc:	82 30       	cpi	r24, 0x02	; 2
    18be:	91 05       	cpc	r25, r1
    18c0:	10 f4       	brcc	.+4      	; 0x18c6 <malloc+0xe>
    18c2:	82 e0       	ldi	r24, 0x02	; 2
    18c4:	90 e0       	ldi	r25, 0x00	; 0
    18c6:	e0 91 43 08 	lds	r30, 0x0843
    18ca:	f0 91 44 08 	lds	r31, 0x0844
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	a0 e0       	ldi	r26, 0x00	; 0
    18d4:	b0 e0       	ldi	r27, 0x00	; 0
    18d6:	30 97       	sbiw	r30, 0x00	; 0
    18d8:	39 f1       	breq	.+78     	; 0x1928 <malloc+0x70>
    18da:	40 81       	ld	r20, Z
    18dc:	51 81       	ldd	r21, Z+1	; 0x01
    18de:	48 17       	cp	r20, r24
    18e0:	59 07       	cpc	r21, r25
    18e2:	b8 f0       	brcs	.+46     	; 0x1912 <malloc+0x5a>
    18e4:	48 17       	cp	r20, r24
    18e6:	59 07       	cpc	r21, r25
    18e8:	71 f4       	brne	.+28     	; 0x1906 <malloc+0x4e>
    18ea:	82 81       	ldd	r24, Z+2	; 0x02
    18ec:	93 81       	ldd	r25, Z+3	; 0x03
    18ee:	10 97       	sbiw	r26, 0x00	; 0
    18f0:	29 f0       	breq	.+10     	; 0x18fc <malloc+0x44>
    18f2:	13 96       	adiw	r26, 0x03	; 3
    18f4:	9c 93       	st	X, r25
    18f6:	8e 93       	st	-X, r24
    18f8:	12 97       	sbiw	r26, 0x02	; 2
    18fa:	2c c0       	rjmp	.+88     	; 0x1954 <malloc+0x9c>
    18fc:	90 93 44 08 	sts	0x0844, r25
    1900:	80 93 43 08 	sts	0x0843, r24
    1904:	27 c0       	rjmp	.+78     	; 0x1954 <malloc+0x9c>
    1906:	21 15       	cp	r18, r1
    1908:	31 05       	cpc	r19, r1
    190a:	31 f0       	breq	.+12     	; 0x1918 <malloc+0x60>
    190c:	42 17       	cp	r20, r18
    190e:	53 07       	cpc	r21, r19
    1910:	18 f0       	brcs	.+6      	; 0x1918 <malloc+0x60>
    1912:	a9 01       	movw	r20, r18
    1914:	db 01       	movw	r26, r22
    1916:	01 c0       	rjmp	.+2      	; 0x191a <malloc+0x62>
    1918:	ef 01       	movw	r28, r30
    191a:	9a 01       	movw	r18, r20
    191c:	bd 01       	movw	r22, r26
    191e:	df 01       	movw	r26, r30
    1920:	02 80       	ldd	r0, Z+2	; 0x02
    1922:	f3 81       	ldd	r31, Z+3	; 0x03
    1924:	e0 2d       	mov	r30, r0
    1926:	d7 cf       	rjmp	.-82     	; 0x18d6 <malloc+0x1e>
    1928:	21 15       	cp	r18, r1
    192a:	31 05       	cpc	r19, r1
    192c:	f9 f0       	breq	.+62     	; 0x196c <malloc+0xb4>
    192e:	28 1b       	sub	r18, r24
    1930:	39 0b       	sbc	r19, r25
    1932:	24 30       	cpi	r18, 0x04	; 4
    1934:	31 05       	cpc	r19, r1
    1936:	80 f4       	brcc	.+32     	; 0x1958 <malloc+0xa0>
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	9b 81       	ldd	r25, Y+3	; 0x03
    193c:	61 15       	cp	r22, r1
    193e:	71 05       	cpc	r23, r1
    1940:	21 f0       	breq	.+8      	; 0x194a <malloc+0x92>
    1942:	fb 01       	movw	r30, r22
    1944:	93 83       	std	Z+3, r25	; 0x03
    1946:	82 83       	std	Z+2, r24	; 0x02
    1948:	04 c0       	rjmp	.+8      	; 0x1952 <malloc+0x9a>
    194a:	90 93 44 08 	sts	0x0844, r25
    194e:	80 93 43 08 	sts	0x0843, r24
    1952:	fe 01       	movw	r30, r28
    1954:	32 96       	adiw	r30, 0x02	; 2
    1956:	44 c0       	rjmp	.+136    	; 0x19e0 <malloc+0x128>
    1958:	fe 01       	movw	r30, r28
    195a:	e2 0f       	add	r30, r18
    195c:	f3 1f       	adc	r31, r19
    195e:	81 93       	st	Z+, r24
    1960:	91 93       	st	Z+, r25
    1962:	22 50       	subi	r18, 0x02	; 2
    1964:	31 09       	sbc	r19, r1
    1966:	39 83       	std	Y+1, r19	; 0x01
    1968:	28 83       	st	Y, r18
    196a:	3a c0       	rjmp	.+116    	; 0x19e0 <malloc+0x128>
    196c:	20 91 41 08 	lds	r18, 0x0841
    1970:	30 91 42 08 	lds	r19, 0x0842
    1974:	23 2b       	or	r18, r19
    1976:	41 f4       	brne	.+16     	; 0x1988 <malloc+0xd0>
    1978:	20 91 02 02 	lds	r18, 0x0202
    197c:	30 91 03 02 	lds	r19, 0x0203
    1980:	30 93 42 08 	sts	0x0842, r19
    1984:	20 93 41 08 	sts	0x0841, r18
    1988:	20 91 00 02 	lds	r18, 0x0200
    198c:	30 91 01 02 	lds	r19, 0x0201
    1990:	21 15       	cp	r18, r1
    1992:	31 05       	cpc	r19, r1
    1994:	41 f4       	brne	.+16     	; 0x19a6 <malloc+0xee>
    1996:	2d b7       	in	r18, 0x3d	; 61
    1998:	3e b7       	in	r19, 0x3e	; 62
    199a:	40 91 04 02 	lds	r20, 0x0204
    199e:	50 91 05 02 	lds	r21, 0x0205
    19a2:	24 1b       	sub	r18, r20
    19a4:	35 0b       	sbc	r19, r21
    19a6:	e0 91 41 08 	lds	r30, 0x0841
    19aa:	f0 91 42 08 	lds	r31, 0x0842
    19ae:	e2 17       	cp	r30, r18
    19b0:	f3 07       	cpc	r31, r19
    19b2:	a0 f4       	brcc	.+40     	; 0x19dc <malloc+0x124>
    19b4:	2e 1b       	sub	r18, r30
    19b6:	3f 0b       	sbc	r19, r31
    19b8:	28 17       	cp	r18, r24
    19ba:	39 07       	cpc	r19, r25
    19bc:	78 f0       	brcs	.+30     	; 0x19dc <malloc+0x124>
    19be:	ac 01       	movw	r20, r24
    19c0:	4e 5f       	subi	r20, 0xFE	; 254
    19c2:	5f 4f       	sbci	r21, 0xFF	; 255
    19c4:	24 17       	cp	r18, r20
    19c6:	35 07       	cpc	r19, r21
    19c8:	48 f0       	brcs	.+18     	; 0x19dc <malloc+0x124>
    19ca:	4e 0f       	add	r20, r30
    19cc:	5f 1f       	adc	r21, r31
    19ce:	50 93 42 08 	sts	0x0842, r21
    19d2:	40 93 41 08 	sts	0x0841, r20
    19d6:	81 93       	st	Z+, r24
    19d8:	91 93       	st	Z+, r25
    19da:	02 c0       	rjmp	.+4      	; 0x19e0 <malloc+0x128>
    19dc:	e0 e0       	ldi	r30, 0x00	; 0
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	cf 01       	movw	r24, r30
    19e2:	df 91       	pop	r29
    19e4:	cf 91       	pop	r28
    19e6:	08 95       	ret

000019e8 <free>:
    19e8:	cf 93       	push	r28
    19ea:	df 93       	push	r29
    19ec:	00 97       	sbiw	r24, 0x00	; 0
    19ee:	09 f4       	brne	.+2      	; 0x19f2 <free+0xa>
    19f0:	87 c0       	rjmp	.+270    	; 0x1b00 <free+0x118>
    19f2:	fc 01       	movw	r30, r24
    19f4:	32 97       	sbiw	r30, 0x02	; 2
    19f6:	13 82       	std	Z+3, r1	; 0x03
    19f8:	12 82       	std	Z+2, r1	; 0x02
    19fa:	c0 91 43 08 	lds	r28, 0x0843
    19fe:	d0 91 44 08 	lds	r29, 0x0844
    1a02:	20 97       	sbiw	r28, 0x00	; 0
    1a04:	81 f4       	brne	.+32     	; 0x1a26 <free+0x3e>
    1a06:	20 81       	ld	r18, Z
    1a08:	31 81       	ldd	r19, Z+1	; 0x01
    1a0a:	28 0f       	add	r18, r24
    1a0c:	39 1f       	adc	r19, r25
    1a0e:	80 91 41 08 	lds	r24, 0x0841
    1a12:	90 91 42 08 	lds	r25, 0x0842
    1a16:	82 17       	cp	r24, r18
    1a18:	93 07       	cpc	r25, r19
    1a1a:	79 f5       	brne	.+94     	; 0x1a7a <free+0x92>
    1a1c:	f0 93 42 08 	sts	0x0842, r31
    1a20:	e0 93 41 08 	sts	0x0841, r30
    1a24:	6d c0       	rjmp	.+218    	; 0x1b00 <free+0x118>
    1a26:	de 01       	movw	r26, r28
    1a28:	20 e0       	ldi	r18, 0x00	; 0
    1a2a:	30 e0       	ldi	r19, 0x00	; 0
    1a2c:	ae 17       	cp	r26, r30
    1a2e:	bf 07       	cpc	r27, r31
    1a30:	50 f4       	brcc	.+20     	; 0x1a46 <free+0x5e>
    1a32:	12 96       	adiw	r26, 0x02	; 2
    1a34:	4d 91       	ld	r20, X+
    1a36:	5c 91       	ld	r21, X
    1a38:	13 97       	sbiw	r26, 0x03	; 3
    1a3a:	9d 01       	movw	r18, r26
    1a3c:	41 15       	cp	r20, r1
    1a3e:	51 05       	cpc	r21, r1
    1a40:	09 f1       	breq	.+66     	; 0x1a84 <free+0x9c>
    1a42:	da 01       	movw	r26, r20
    1a44:	f3 cf       	rjmp	.-26     	; 0x1a2c <free+0x44>
    1a46:	b3 83       	std	Z+3, r27	; 0x03
    1a48:	a2 83       	std	Z+2, r26	; 0x02
    1a4a:	40 81       	ld	r20, Z
    1a4c:	51 81       	ldd	r21, Z+1	; 0x01
    1a4e:	84 0f       	add	r24, r20
    1a50:	95 1f       	adc	r25, r21
    1a52:	8a 17       	cp	r24, r26
    1a54:	9b 07       	cpc	r25, r27
    1a56:	71 f4       	brne	.+28     	; 0x1a74 <free+0x8c>
    1a58:	8d 91       	ld	r24, X+
    1a5a:	9c 91       	ld	r25, X
    1a5c:	11 97       	sbiw	r26, 0x01	; 1
    1a5e:	84 0f       	add	r24, r20
    1a60:	95 1f       	adc	r25, r21
    1a62:	02 96       	adiw	r24, 0x02	; 2
    1a64:	91 83       	std	Z+1, r25	; 0x01
    1a66:	80 83       	st	Z, r24
    1a68:	12 96       	adiw	r26, 0x02	; 2
    1a6a:	8d 91       	ld	r24, X+
    1a6c:	9c 91       	ld	r25, X
    1a6e:	13 97       	sbiw	r26, 0x03	; 3
    1a70:	93 83       	std	Z+3, r25	; 0x03
    1a72:	82 83       	std	Z+2, r24	; 0x02
    1a74:	21 15       	cp	r18, r1
    1a76:	31 05       	cpc	r19, r1
    1a78:	29 f4       	brne	.+10     	; 0x1a84 <free+0x9c>
    1a7a:	f0 93 44 08 	sts	0x0844, r31
    1a7e:	e0 93 43 08 	sts	0x0843, r30
    1a82:	3e c0       	rjmp	.+124    	; 0x1b00 <free+0x118>
    1a84:	d9 01       	movw	r26, r18
    1a86:	13 96       	adiw	r26, 0x03	; 3
    1a88:	fc 93       	st	X, r31
    1a8a:	ee 93       	st	-X, r30
    1a8c:	12 97       	sbiw	r26, 0x02	; 2
    1a8e:	4d 91       	ld	r20, X+
    1a90:	5d 91       	ld	r21, X+
    1a92:	a4 0f       	add	r26, r20
    1a94:	b5 1f       	adc	r27, r21
    1a96:	ea 17       	cp	r30, r26
    1a98:	fb 07       	cpc	r31, r27
    1a9a:	79 f4       	brne	.+30     	; 0x1aba <free+0xd2>
    1a9c:	80 81       	ld	r24, Z
    1a9e:	91 81       	ldd	r25, Z+1	; 0x01
    1aa0:	84 0f       	add	r24, r20
    1aa2:	95 1f       	adc	r25, r21
    1aa4:	02 96       	adiw	r24, 0x02	; 2
    1aa6:	d9 01       	movw	r26, r18
    1aa8:	11 96       	adiw	r26, 0x01	; 1
    1aaa:	9c 93       	st	X, r25
    1aac:	8e 93       	st	-X, r24
    1aae:	82 81       	ldd	r24, Z+2	; 0x02
    1ab0:	93 81       	ldd	r25, Z+3	; 0x03
    1ab2:	13 96       	adiw	r26, 0x03	; 3
    1ab4:	9c 93       	st	X, r25
    1ab6:	8e 93       	st	-X, r24
    1ab8:	12 97       	sbiw	r26, 0x02	; 2
    1aba:	e0 e0       	ldi	r30, 0x00	; 0
    1abc:	f0 e0       	ldi	r31, 0x00	; 0
    1abe:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac0:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac2:	00 97       	sbiw	r24, 0x00	; 0
    1ac4:	19 f0       	breq	.+6      	; 0x1acc <free+0xe4>
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	ec 01       	movw	r28, r24
    1aca:	f9 cf       	rjmp	.-14     	; 0x1abe <free+0xd6>
    1acc:	ce 01       	movw	r24, r28
    1ace:	02 96       	adiw	r24, 0x02	; 2
    1ad0:	28 81       	ld	r18, Y
    1ad2:	39 81       	ldd	r19, Y+1	; 0x01
    1ad4:	82 0f       	add	r24, r18
    1ad6:	93 1f       	adc	r25, r19
    1ad8:	20 91 41 08 	lds	r18, 0x0841
    1adc:	30 91 42 08 	lds	r19, 0x0842
    1ae0:	28 17       	cp	r18, r24
    1ae2:	39 07       	cpc	r19, r25
    1ae4:	69 f4       	brne	.+26     	; 0x1b00 <free+0x118>
    1ae6:	30 97       	sbiw	r30, 0x00	; 0
    1ae8:	29 f4       	brne	.+10     	; 0x1af4 <free+0x10c>
    1aea:	10 92 44 08 	sts	0x0844, r1
    1aee:	10 92 43 08 	sts	0x0843, r1
    1af2:	02 c0       	rjmp	.+4      	; 0x1af8 <free+0x110>
    1af4:	13 82       	std	Z+3, r1	; 0x03
    1af6:	12 82       	std	Z+2, r1	; 0x02
    1af8:	d0 93 42 08 	sts	0x0842, r29
    1afc:	c0 93 41 08 	sts	0x0841, r28
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	08 95       	ret

00001b06 <__ftoa_engine>:
    1b06:	28 30       	cpi	r18, 0x08	; 8
    1b08:	08 f0       	brcs	.+2      	; 0x1b0c <__ftoa_engine+0x6>
    1b0a:	27 e0       	ldi	r18, 0x07	; 7
    1b0c:	33 27       	eor	r19, r19
    1b0e:	da 01       	movw	r26, r20
    1b10:	99 0f       	add	r25, r25
    1b12:	31 1d       	adc	r19, r1
    1b14:	87 fd       	sbrc	r24, 7
    1b16:	91 60       	ori	r25, 0x01	; 1
    1b18:	00 96       	adiw	r24, 0x00	; 0
    1b1a:	61 05       	cpc	r22, r1
    1b1c:	71 05       	cpc	r23, r1
    1b1e:	39 f4       	brne	.+14     	; 0x1b2e <__ftoa_engine+0x28>
    1b20:	32 60       	ori	r19, 0x02	; 2
    1b22:	2e 5f       	subi	r18, 0xFE	; 254
    1b24:	3d 93       	st	X+, r19
    1b26:	30 e3       	ldi	r19, 0x30	; 48
    1b28:	2a 95       	dec	r18
    1b2a:	e1 f7       	brne	.-8      	; 0x1b24 <__ftoa_engine+0x1e>
    1b2c:	08 95       	ret
    1b2e:	9f 3f       	cpi	r25, 0xFF	; 255
    1b30:	30 f0       	brcs	.+12     	; 0x1b3e <__ftoa_engine+0x38>
    1b32:	80 38       	cpi	r24, 0x80	; 128
    1b34:	71 05       	cpc	r23, r1
    1b36:	61 05       	cpc	r22, r1
    1b38:	09 f0       	breq	.+2      	; 0x1b3c <__ftoa_engine+0x36>
    1b3a:	3c 5f       	subi	r19, 0xFC	; 252
    1b3c:	3c 5f       	subi	r19, 0xFC	; 252
    1b3e:	3d 93       	st	X+, r19
    1b40:	91 30       	cpi	r25, 0x01	; 1
    1b42:	08 f0       	brcs	.+2      	; 0x1b46 <__ftoa_engine+0x40>
    1b44:	80 68       	ori	r24, 0x80	; 128
    1b46:	91 1d       	adc	r25, r1
    1b48:	df 93       	push	r29
    1b4a:	cf 93       	push	r28
    1b4c:	1f 93       	push	r17
    1b4e:	0f 93       	push	r16
    1b50:	ff 92       	push	r15
    1b52:	ef 92       	push	r14
    1b54:	19 2f       	mov	r17, r25
    1b56:	98 7f       	andi	r25, 0xF8	; 248
    1b58:	96 95       	lsr	r25
    1b5a:	e9 2f       	mov	r30, r25
    1b5c:	96 95       	lsr	r25
    1b5e:	96 95       	lsr	r25
    1b60:	e9 0f       	add	r30, r25
    1b62:	ff 27       	eor	r31, r31
    1b64:	ea 56       	subi	r30, 0x6A	; 106
    1b66:	fe 4f       	sbci	r31, 0xFE	; 254
    1b68:	99 27       	eor	r25, r25
    1b6a:	33 27       	eor	r19, r19
    1b6c:	ee 24       	eor	r14, r14
    1b6e:	ff 24       	eor	r15, r15
    1b70:	a7 01       	movw	r20, r14
    1b72:	e7 01       	movw	r28, r14
    1b74:	05 90       	lpm	r0, Z+
    1b76:	08 94       	sec
    1b78:	07 94       	ror	r0
    1b7a:	28 f4       	brcc	.+10     	; 0x1b86 <__ftoa_engine+0x80>
    1b7c:	36 0f       	add	r19, r22
    1b7e:	e7 1e       	adc	r14, r23
    1b80:	f8 1e       	adc	r15, r24
    1b82:	49 1f       	adc	r20, r25
    1b84:	51 1d       	adc	r21, r1
    1b86:	66 0f       	add	r22, r22
    1b88:	77 1f       	adc	r23, r23
    1b8a:	88 1f       	adc	r24, r24
    1b8c:	99 1f       	adc	r25, r25
    1b8e:	06 94       	lsr	r0
    1b90:	a1 f7       	brne	.-24     	; 0x1b7a <__ftoa_engine+0x74>
    1b92:	05 90       	lpm	r0, Z+
    1b94:	07 94       	ror	r0
    1b96:	28 f4       	brcc	.+10     	; 0x1ba2 <__ftoa_engine+0x9c>
    1b98:	e7 0e       	add	r14, r23
    1b9a:	f8 1e       	adc	r15, r24
    1b9c:	49 1f       	adc	r20, r25
    1b9e:	56 1f       	adc	r21, r22
    1ba0:	c1 1d       	adc	r28, r1
    1ba2:	77 0f       	add	r23, r23
    1ba4:	88 1f       	adc	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	66 1f       	adc	r22, r22
    1baa:	06 94       	lsr	r0
    1bac:	a1 f7       	brne	.-24     	; 0x1b96 <__ftoa_engine+0x90>
    1bae:	05 90       	lpm	r0, Z+
    1bb0:	07 94       	ror	r0
    1bb2:	28 f4       	brcc	.+10     	; 0x1bbe <__ftoa_engine+0xb8>
    1bb4:	f8 0e       	add	r15, r24
    1bb6:	49 1f       	adc	r20, r25
    1bb8:	56 1f       	adc	r21, r22
    1bba:	c7 1f       	adc	r28, r23
    1bbc:	d1 1d       	adc	r29, r1
    1bbe:	88 0f       	add	r24, r24
    1bc0:	99 1f       	adc	r25, r25
    1bc2:	66 1f       	adc	r22, r22
    1bc4:	77 1f       	adc	r23, r23
    1bc6:	06 94       	lsr	r0
    1bc8:	a1 f7       	brne	.-24     	; 0x1bb2 <__ftoa_engine+0xac>
    1bca:	05 90       	lpm	r0, Z+
    1bcc:	07 94       	ror	r0
    1bce:	20 f4       	brcc	.+8      	; 0x1bd8 <__ftoa_engine+0xd2>
    1bd0:	49 0f       	add	r20, r25
    1bd2:	56 1f       	adc	r21, r22
    1bd4:	c7 1f       	adc	r28, r23
    1bd6:	d8 1f       	adc	r29, r24
    1bd8:	99 0f       	add	r25, r25
    1bda:	66 1f       	adc	r22, r22
    1bdc:	77 1f       	adc	r23, r23
    1bde:	88 1f       	adc	r24, r24
    1be0:	06 94       	lsr	r0
    1be2:	a9 f7       	brne	.-22     	; 0x1bce <__ftoa_engine+0xc8>
    1be4:	84 91       	lpm	r24, Z
    1be6:	10 95       	com	r17
    1be8:	17 70       	andi	r17, 0x07	; 7
    1bea:	41 f0       	breq	.+16     	; 0x1bfc <__ftoa_engine+0xf6>
    1bec:	d6 95       	lsr	r29
    1bee:	c7 95       	ror	r28
    1bf0:	57 95       	ror	r21
    1bf2:	47 95       	ror	r20
    1bf4:	f7 94       	ror	r15
    1bf6:	e7 94       	ror	r14
    1bf8:	1a 95       	dec	r17
    1bfa:	c1 f7       	brne	.-16     	; 0x1bec <__ftoa_engine+0xe6>
    1bfc:	ec e3       	ldi	r30, 0x3C	; 60
    1bfe:	f1 e0       	ldi	r31, 0x01	; 1
    1c00:	68 94       	set
    1c02:	15 90       	lpm	r1, Z+
    1c04:	15 91       	lpm	r17, Z+
    1c06:	35 91       	lpm	r19, Z+
    1c08:	65 91       	lpm	r22, Z+
    1c0a:	95 91       	lpm	r25, Z+
    1c0c:	05 90       	lpm	r0, Z+
    1c0e:	7f e2       	ldi	r23, 0x2F	; 47
    1c10:	73 95       	inc	r23
    1c12:	e1 18       	sub	r14, r1
    1c14:	f1 0a       	sbc	r15, r17
    1c16:	43 0b       	sbc	r20, r19
    1c18:	56 0b       	sbc	r21, r22
    1c1a:	c9 0b       	sbc	r28, r25
    1c1c:	d0 09       	sbc	r29, r0
    1c1e:	c0 f7       	brcc	.-16     	; 0x1c10 <__ftoa_engine+0x10a>
    1c20:	e1 0c       	add	r14, r1
    1c22:	f1 1e       	adc	r15, r17
    1c24:	43 1f       	adc	r20, r19
    1c26:	56 1f       	adc	r21, r22
    1c28:	c9 1f       	adc	r28, r25
    1c2a:	d0 1d       	adc	r29, r0
    1c2c:	7e f4       	brtc	.+30     	; 0x1c4c <__ftoa_engine+0x146>
    1c2e:	70 33       	cpi	r23, 0x30	; 48
    1c30:	11 f4       	brne	.+4      	; 0x1c36 <__ftoa_engine+0x130>
    1c32:	8a 95       	dec	r24
    1c34:	e6 cf       	rjmp	.-52     	; 0x1c02 <__ftoa_engine+0xfc>
    1c36:	e8 94       	clt
    1c38:	01 50       	subi	r16, 0x01	; 1
    1c3a:	30 f0       	brcs	.+12     	; 0x1c48 <__ftoa_engine+0x142>
    1c3c:	08 0f       	add	r16, r24
    1c3e:	0a f4       	brpl	.+2      	; 0x1c42 <__ftoa_engine+0x13c>
    1c40:	00 27       	eor	r16, r16
    1c42:	02 17       	cp	r16, r18
    1c44:	08 f4       	brcc	.+2      	; 0x1c48 <__ftoa_engine+0x142>
    1c46:	20 2f       	mov	r18, r16
    1c48:	23 95       	inc	r18
    1c4a:	02 2f       	mov	r16, r18
    1c4c:	7a 33       	cpi	r23, 0x3A	; 58
    1c4e:	28 f0       	brcs	.+10     	; 0x1c5a <__ftoa_engine+0x154>
    1c50:	79 e3       	ldi	r23, 0x39	; 57
    1c52:	7d 93       	st	X+, r23
    1c54:	2a 95       	dec	r18
    1c56:	e9 f7       	brne	.-6      	; 0x1c52 <__ftoa_engine+0x14c>
    1c58:	10 c0       	rjmp	.+32     	; 0x1c7a <__ftoa_engine+0x174>
    1c5a:	7d 93       	st	X+, r23
    1c5c:	2a 95       	dec	r18
    1c5e:	89 f6       	brne	.-94     	; 0x1c02 <__ftoa_engine+0xfc>
    1c60:	06 94       	lsr	r0
    1c62:	97 95       	ror	r25
    1c64:	67 95       	ror	r22
    1c66:	37 95       	ror	r19
    1c68:	17 95       	ror	r17
    1c6a:	17 94       	ror	r1
    1c6c:	e1 18       	sub	r14, r1
    1c6e:	f1 0a       	sbc	r15, r17
    1c70:	43 0b       	sbc	r20, r19
    1c72:	56 0b       	sbc	r21, r22
    1c74:	c9 0b       	sbc	r28, r25
    1c76:	d0 09       	sbc	r29, r0
    1c78:	98 f0       	brcs	.+38     	; 0x1ca0 <__ftoa_engine+0x19a>
    1c7a:	23 95       	inc	r18
    1c7c:	7e 91       	ld	r23, -X
    1c7e:	73 95       	inc	r23
    1c80:	7a 33       	cpi	r23, 0x3A	; 58
    1c82:	08 f0       	brcs	.+2      	; 0x1c86 <__ftoa_engine+0x180>
    1c84:	70 e3       	ldi	r23, 0x30	; 48
    1c86:	7c 93       	st	X, r23
    1c88:	20 13       	cpse	r18, r16
    1c8a:	b8 f7       	brcc	.-18     	; 0x1c7a <__ftoa_engine+0x174>
    1c8c:	7e 91       	ld	r23, -X
    1c8e:	70 61       	ori	r23, 0x10	; 16
    1c90:	7d 93       	st	X+, r23
    1c92:	30 f0       	brcs	.+12     	; 0x1ca0 <__ftoa_engine+0x19a>
    1c94:	83 95       	inc	r24
    1c96:	71 e3       	ldi	r23, 0x31	; 49
    1c98:	7d 93       	st	X+, r23
    1c9a:	70 e3       	ldi	r23, 0x30	; 48
    1c9c:	2a 95       	dec	r18
    1c9e:	e1 f7       	brne	.-8      	; 0x1c98 <__ftoa_engine+0x192>
    1ca0:	11 24       	eor	r1, r1
    1ca2:	ef 90       	pop	r14
    1ca4:	ff 90       	pop	r15
    1ca6:	0f 91       	pop	r16
    1ca8:	1f 91       	pop	r17
    1caa:	cf 91       	pop	r28
    1cac:	df 91       	pop	r29
    1cae:	99 27       	eor	r25, r25
    1cb0:	87 fd       	sbrc	r24, 7
    1cb2:	90 95       	com	r25
    1cb4:	08 95       	ret

00001cb6 <strnlen_P>:
    1cb6:	fc 01       	movw	r30, r24
    1cb8:	05 90       	lpm	r0, Z+
    1cba:	61 50       	subi	r22, 0x01	; 1
    1cbc:	70 40       	sbci	r23, 0x00	; 0
    1cbe:	01 10       	cpse	r0, r1
    1cc0:	d8 f7       	brcc	.-10     	; 0x1cb8 <strnlen_P+0x2>
    1cc2:	80 95       	com	r24
    1cc4:	90 95       	com	r25
    1cc6:	8e 0f       	add	r24, r30
    1cc8:	9f 1f       	adc	r25, r31
    1cca:	08 95       	ret

00001ccc <strnlen>:
    1ccc:	fc 01       	movw	r30, r24
    1cce:	61 50       	subi	r22, 0x01	; 1
    1cd0:	70 40       	sbci	r23, 0x00	; 0
    1cd2:	01 90       	ld	r0, Z+
    1cd4:	01 10       	cpse	r0, r1
    1cd6:	d8 f7       	brcc	.-10     	; 0x1cce <strnlen+0x2>
    1cd8:	80 95       	com	r24
    1cda:	90 95       	com	r25
    1cdc:	8e 0f       	add	r24, r30
    1cde:	9f 1f       	adc	r25, r31
    1ce0:	08 95       	ret

00001ce2 <fputc>:
    1ce2:	0f 93       	push	r16
    1ce4:	1f 93       	push	r17
    1ce6:	cf 93       	push	r28
    1ce8:	df 93       	push	r29
    1cea:	18 2f       	mov	r17, r24
    1cec:	09 2f       	mov	r16, r25
    1cee:	eb 01       	movw	r28, r22
    1cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf2:	81 fd       	sbrc	r24, 1
    1cf4:	03 c0       	rjmp	.+6      	; 0x1cfc <fputc+0x1a>
    1cf6:	8f ef       	ldi	r24, 0xFF	; 255
    1cf8:	9f ef       	ldi	r25, 0xFF	; 255
    1cfa:	20 c0       	rjmp	.+64     	; 0x1d3c <fputc+0x5a>
    1cfc:	82 ff       	sbrs	r24, 2
    1cfe:	10 c0       	rjmp	.+32     	; 0x1d20 <fputc+0x3e>
    1d00:	4e 81       	ldd	r20, Y+6	; 0x06
    1d02:	5f 81       	ldd	r21, Y+7	; 0x07
    1d04:	2c 81       	ldd	r18, Y+4	; 0x04
    1d06:	3d 81       	ldd	r19, Y+5	; 0x05
    1d08:	42 17       	cp	r20, r18
    1d0a:	53 07       	cpc	r21, r19
    1d0c:	7c f4       	brge	.+30     	; 0x1d2c <fputc+0x4a>
    1d0e:	e8 81       	ld	r30, Y
    1d10:	f9 81       	ldd	r31, Y+1	; 0x01
    1d12:	9f 01       	movw	r18, r30
    1d14:	2f 5f       	subi	r18, 0xFF	; 255
    1d16:	3f 4f       	sbci	r19, 0xFF	; 255
    1d18:	39 83       	std	Y+1, r19	; 0x01
    1d1a:	28 83       	st	Y, r18
    1d1c:	10 83       	st	Z, r17
    1d1e:	06 c0       	rjmp	.+12     	; 0x1d2c <fputc+0x4a>
    1d20:	e8 85       	ldd	r30, Y+8	; 0x08
    1d22:	f9 85       	ldd	r31, Y+9	; 0x09
    1d24:	81 2f       	mov	r24, r17
    1d26:	09 95       	icall
    1d28:	89 2b       	or	r24, r25
    1d2a:	29 f7       	brne	.-54     	; 0x1cf6 <fputc+0x14>
    1d2c:	2e 81       	ldd	r18, Y+6	; 0x06
    1d2e:	3f 81       	ldd	r19, Y+7	; 0x07
    1d30:	2f 5f       	subi	r18, 0xFF	; 255
    1d32:	3f 4f       	sbci	r19, 0xFF	; 255
    1d34:	3f 83       	std	Y+7, r19	; 0x07
    1d36:	2e 83       	std	Y+6, r18	; 0x06
    1d38:	81 2f       	mov	r24, r17
    1d3a:	90 2f       	mov	r25, r16
    1d3c:	df 91       	pop	r29
    1d3e:	cf 91       	pop	r28
    1d40:	1f 91       	pop	r17
    1d42:	0f 91       	pop	r16
    1d44:	08 95       	ret

00001d46 <printf>:
    1d46:	a0 e0       	ldi	r26, 0x00	; 0
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e9 ea       	ldi	r30, 0xA9	; 169
    1d4c:	fe e0       	ldi	r31, 0x0E	; 14
    1d4e:	0c 94 35 0c 	jmp	0x186a	; 0x186a <__prologue_saves__+0x20>
    1d52:	fe 01       	movw	r30, r28
    1d54:	35 96       	adiw	r30, 0x05	; 5
    1d56:	61 91       	ld	r22, Z+
    1d58:	71 91       	ld	r23, Z+
    1d5a:	af 01       	movw	r20, r30
    1d5c:	80 91 47 08 	lds	r24, 0x0847
    1d60:	90 91 48 08 	lds	r25, 0x0848
    1d64:	0e 94 88 08 	call	0x1110	; 0x1110 <vfprintf>
    1d68:	e2 e0       	ldi	r30, 0x02	; 2
    1d6a:	0c 94 51 0c 	jmp	0x18a2	; 0x18a2 <__epilogue_restores__+0x20>

00001d6e <puts>:
    1d6e:	0f 93       	push	r16
    1d70:	1f 93       	push	r17
    1d72:	cf 93       	push	r28
    1d74:	df 93       	push	r29
    1d76:	e0 91 47 08 	lds	r30, 0x0847
    1d7a:	f0 91 48 08 	lds	r31, 0x0848
    1d7e:	23 81       	ldd	r18, Z+3	; 0x03
    1d80:	21 ff       	sbrs	r18, 1
    1d82:	1b c0       	rjmp	.+54     	; 0x1dba <puts+0x4c>
    1d84:	ec 01       	movw	r28, r24
    1d86:	00 e0       	ldi	r16, 0x00	; 0
    1d88:	10 e0       	ldi	r17, 0x00	; 0
    1d8a:	89 91       	ld	r24, Y+
    1d8c:	60 91 47 08 	lds	r22, 0x0847
    1d90:	70 91 48 08 	lds	r23, 0x0848
    1d94:	db 01       	movw	r26, r22
    1d96:	18 96       	adiw	r26, 0x08	; 8
    1d98:	ed 91       	ld	r30, X+
    1d9a:	fc 91       	ld	r31, X
    1d9c:	19 97       	sbiw	r26, 0x09	; 9
    1d9e:	88 23       	and	r24, r24
    1da0:	31 f0       	breq	.+12     	; 0x1dae <puts+0x40>
    1da2:	09 95       	icall
    1da4:	89 2b       	or	r24, r25
    1da6:	89 f3       	breq	.-30     	; 0x1d8a <puts+0x1c>
    1da8:	0f ef       	ldi	r16, 0xFF	; 255
    1daa:	1f ef       	ldi	r17, 0xFF	; 255
    1dac:	ee cf       	rjmp	.-36     	; 0x1d8a <puts+0x1c>
    1dae:	8a e0       	ldi	r24, 0x0A	; 10
    1db0:	09 95       	icall
    1db2:	89 2b       	or	r24, r25
    1db4:	11 f4       	brne	.+4      	; 0x1dba <puts+0x4c>
    1db6:	c8 01       	movw	r24, r16
    1db8:	02 c0       	rjmp	.+4      	; 0x1dbe <puts+0x50>
    1dba:	8f ef       	ldi	r24, 0xFF	; 255
    1dbc:	9f ef       	ldi	r25, 0xFF	; 255
    1dbe:	df 91       	pop	r29
    1dc0:	cf 91       	pop	r28
    1dc2:	1f 91       	pop	r17
    1dc4:	0f 91       	pop	r16
    1dc6:	08 95       	ret

00001dc8 <__ultoa_invert>:
    1dc8:	fa 01       	movw	r30, r20
    1dca:	aa 27       	eor	r26, r26
    1dcc:	28 30       	cpi	r18, 0x08	; 8
    1dce:	51 f1       	breq	.+84     	; 0x1e24 <__ultoa_invert+0x5c>
    1dd0:	20 31       	cpi	r18, 0x10	; 16
    1dd2:	81 f1       	breq	.+96     	; 0x1e34 <__ultoa_invert+0x6c>
    1dd4:	e8 94       	clt
    1dd6:	6f 93       	push	r22
    1dd8:	6e 7f       	andi	r22, 0xFE	; 254
    1dda:	6e 5f       	subi	r22, 0xFE	; 254
    1ddc:	7f 4f       	sbci	r23, 0xFF	; 255
    1dde:	8f 4f       	sbci	r24, 0xFF	; 255
    1de0:	9f 4f       	sbci	r25, 0xFF	; 255
    1de2:	af 4f       	sbci	r26, 0xFF	; 255
    1de4:	b1 e0       	ldi	r27, 0x01	; 1
    1de6:	3e d0       	rcall	.+124    	; 0x1e64 <__ultoa_invert+0x9c>
    1de8:	b4 e0       	ldi	r27, 0x04	; 4
    1dea:	3c d0       	rcall	.+120    	; 0x1e64 <__ultoa_invert+0x9c>
    1dec:	67 0f       	add	r22, r23
    1dee:	78 1f       	adc	r23, r24
    1df0:	89 1f       	adc	r24, r25
    1df2:	9a 1f       	adc	r25, r26
    1df4:	a1 1d       	adc	r26, r1
    1df6:	68 0f       	add	r22, r24
    1df8:	79 1f       	adc	r23, r25
    1dfa:	8a 1f       	adc	r24, r26
    1dfc:	91 1d       	adc	r25, r1
    1dfe:	a1 1d       	adc	r26, r1
    1e00:	6a 0f       	add	r22, r26
    1e02:	71 1d       	adc	r23, r1
    1e04:	81 1d       	adc	r24, r1
    1e06:	91 1d       	adc	r25, r1
    1e08:	a1 1d       	adc	r26, r1
    1e0a:	20 d0       	rcall	.+64     	; 0x1e4c <__ultoa_invert+0x84>
    1e0c:	09 f4       	brne	.+2      	; 0x1e10 <__ultoa_invert+0x48>
    1e0e:	68 94       	set
    1e10:	3f 91       	pop	r19
    1e12:	2a e0       	ldi	r18, 0x0A	; 10
    1e14:	26 9f       	mul	r18, r22
    1e16:	11 24       	eor	r1, r1
    1e18:	30 19       	sub	r19, r0
    1e1a:	30 5d       	subi	r19, 0xD0	; 208
    1e1c:	31 93       	st	Z+, r19
    1e1e:	de f6       	brtc	.-74     	; 0x1dd6 <__ultoa_invert+0xe>
    1e20:	cf 01       	movw	r24, r30
    1e22:	08 95       	ret
    1e24:	46 2f       	mov	r20, r22
    1e26:	47 70       	andi	r20, 0x07	; 7
    1e28:	40 5d       	subi	r20, 0xD0	; 208
    1e2a:	41 93       	st	Z+, r20
    1e2c:	b3 e0       	ldi	r27, 0x03	; 3
    1e2e:	0f d0       	rcall	.+30     	; 0x1e4e <__ultoa_invert+0x86>
    1e30:	c9 f7       	brne	.-14     	; 0x1e24 <__ultoa_invert+0x5c>
    1e32:	f6 cf       	rjmp	.-20     	; 0x1e20 <__ultoa_invert+0x58>
    1e34:	46 2f       	mov	r20, r22
    1e36:	4f 70       	andi	r20, 0x0F	; 15
    1e38:	40 5d       	subi	r20, 0xD0	; 208
    1e3a:	4a 33       	cpi	r20, 0x3A	; 58
    1e3c:	18 f0       	brcs	.+6      	; 0x1e44 <__ultoa_invert+0x7c>
    1e3e:	49 5d       	subi	r20, 0xD9	; 217
    1e40:	31 fd       	sbrc	r19, 1
    1e42:	40 52       	subi	r20, 0x20	; 32
    1e44:	41 93       	st	Z+, r20
    1e46:	02 d0       	rcall	.+4      	; 0x1e4c <__ultoa_invert+0x84>
    1e48:	a9 f7       	brne	.-22     	; 0x1e34 <__ultoa_invert+0x6c>
    1e4a:	ea cf       	rjmp	.-44     	; 0x1e20 <__ultoa_invert+0x58>
    1e4c:	b4 e0       	ldi	r27, 0x04	; 4
    1e4e:	a6 95       	lsr	r26
    1e50:	97 95       	ror	r25
    1e52:	87 95       	ror	r24
    1e54:	77 95       	ror	r23
    1e56:	67 95       	ror	r22
    1e58:	ba 95       	dec	r27
    1e5a:	c9 f7       	brne	.-14     	; 0x1e4e <__ultoa_invert+0x86>
    1e5c:	00 97       	sbiw	r24, 0x00	; 0
    1e5e:	61 05       	cpc	r22, r1
    1e60:	71 05       	cpc	r23, r1
    1e62:	08 95       	ret
    1e64:	9b 01       	movw	r18, r22
    1e66:	ac 01       	movw	r20, r24
    1e68:	0a 2e       	mov	r0, r26
    1e6a:	06 94       	lsr	r0
    1e6c:	57 95       	ror	r21
    1e6e:	47 95       	ror	r20
    1e70:	37 95       	ror	r19
    1e72:	27 95       	ror	r18
    1e74:	ba 95       	dec	r27
    1e76:	c9 f7       	brne	.-14     	; 0x1e6a <__ultoa_invert+0xa2>
    1e78:	62 0f       	add	r22, r18
    1e7a:	73 1f       	adc	r23, r19
    1e7c:	84 1f       	adc	r24, r20
    1e7e:	95 1f       	adc	r25, r21
    1e80:	a0 1d       	adc	r26, r0
    1e82:	08 95       	ret

00001e84 <_exit>:
    1e84:	f8 94       	cli

00001e86 <__stop_program>:
    1e86:	ff cf       	rjmp	.-2      	; 0x1e86 <__stop_program>
