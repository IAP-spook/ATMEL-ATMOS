
ATMOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b4  00800200  00002ae4  00002b78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002ae4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000482  008003b4  008003b4  00002d2c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002d2c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000608  00000000  00000000  00002d88  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00006728  00000000  00000000  00003390  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000259d  00000000  00000000  00009ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000220d  00000000  00000000  0000c055  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000ed0  00000000  00000000  0000e264  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001a6d  00000000  00000000  0000f134  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000352c  00000000  00000000  00010ba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005d0  00000000  00000000  000140cd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__ctors_end>
       4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      10:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      14:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      18:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      1c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      20:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      24:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      28:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      30:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      34:	0c 94 4d 06 	jmp	0xc9a	; 0xc9a <__vector_13>
      38:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      3c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      40:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      44:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      48:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      4c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      50:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      54:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      58:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      5c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      60:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      64:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      68:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      6c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      70:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      74:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      78:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      7c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      80:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      84:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      88:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      8c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      90:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      94:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      98:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      9c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a8:	0c 94 19 08 	jmp	0x1032	; 0x1032 <__vector_42>
      ac:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      bc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      cc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      dc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      ec:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      fc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     100:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     104:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     108:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     10c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     110:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     114:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     118:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     11c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     120:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     124:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     128:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     12c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     130:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>

00000134 <__trampolines_end>:
     134:	6e 61       	ori	r22, 0x1E	; 30
     136:	6e 00       	.word	0x006e	; ????

00000138 <__c.2159>:
     138:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     148:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     158:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     168:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     178:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     188:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     198:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     208:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     218:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     228:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000236 <__ctors_end>:
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	d1 e2       	ldi	r29, 0x21	; 33
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61

00000242 <__do_copy_data>:
     242:	13 e0       	ldi	r17, 0x03	; 3
     244:	a0 e0       	ldi	r26, 0x00	; 0
     246:	b2 e0       	ldi	r27, 0x02	; 2
     248:	e4 ee       	ldi	r30, 0xE4	; 228
     24a:	fa e2       	ldi	r31, 0x2A	; 42
     24c:	02 c0       	rjmp	.+4      	; 0x252 <__do_copy_data+0x10>
     24e:	05 90       	lpm	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	a4 3b       	cpi	r26, 0xB4	; 180
     254:	b1 07       	cpc	r27, r17
     256:	d9 f7       	brne	.-10     	; 0x24e <__do_copy_data+0xc>

00000258 <__do_clear_bss>:
     258:	28 e0       	ldi	r18, 0x08	; 8
     25a:	a4 eb       	ldi	r26, 0xB4	; 180
     25c:	b3 e0       	ldi	r27, 0x03	; 3
     25e:	01 c0       	rjmp	.+2      	; 0x262 <.do_clear_bss_start>

00000260 <.do_clear_bss_loop>:
     260:	1d 92       	st	X+, r1

00000262 <.do_clear_bss_start>:
     262:	a6 33       	cpi	r26, 0x36	; 54
     264:	b2 07       	cpc	r27, r18
     266:	e1 f7       	brne	.-8      	; 0x260 <.do_clear_bss_loop>
     268:	0e 94 3a 01 	call	0x274	; 0x274 <main>
     26c:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <_exit>

00000270 <__bad_interrupt>:
     270:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000274 <main>:
	SPI_SlaveInit();
}

int main(void)
{
	SYS_Init();
     274:	0e 94 42 0b 	call	0x1684	; 0x1684 <SYS_Init>
#include "avr/io.h"
#include "avr/interrupt.h"


static void APP_Init(void){
	PWR_Init();
     278:	0e 94 c9 06 	call	0xd92	; 0xd92 <PWR_Init>
	PWR_TurnOn5V();
     27c:	0e 94 cd 06 	call	0xd9a	; 0xd9a <PWR_TurnOn5V>
	USART0_Init(9600);
     280:	60 e8       	ldi	r22, 0x80	; 128
     282:	75 e2       	ldi	r23, 0x25	; 37
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 af 07 	call	0xf5e	; 0xf5e <USART0_Init>
	DDRB |= 0b00010000;
     28c:	24 9a       	sbi	0x04, 4	; 4
	DDRE |= 0b00001000;
     28e:	6b 9a       	sbi	0x0d, 3	; 13
	PORTE|= 0b00001000;
     290:	73 9a       	sbi	0x0e, 3	; 14
	TWI_Init(10000);
     292:	60 e1       	ldi	r22, 0x10	; 16
     294:	77 e2       	ldi	r23, 0x27	; 39
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 d3 06 	call	0xda6	; 0xda6 <TWI_Init>
	ADC_Init();
     29e:	0e 94 41 06 	call	0xc82	; 0xc82 <ADC_Init>
	printf("BMP280 Status %i\n", BMP280_Init());
     2a2:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <BMP280_Init>
     2a6:	9f 93       	push	r25
     2a8:	8f 93       	push	r24
     2aa:	80 e2       	ldi	r24, 0x20	; 32
     2ac:	92 e0       	ldi	r25, 0x02	; 2
     2ae:	9f 93       	push	r25
     2b0:	8f 93       	push	r24
     2b2:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf>
	BMP280_SetOversampling(4);
     2b6:	84 e0       	ldi	r24, 0x04	; 4
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 b2 02 	call	0x564	; 0x564 <BMP280_SetOversampling>
	SPI_SlaveInit();
     2be:	0e 94 cf 06 	call	0xd9e	; 0xd9e <SPI_SlaveInit>
{
	SYS_Init();
	APP_Init();
	
	/* could have sealed following in a function */
	init_timeoutq();
     2c2:	0e 94 b7 09 	call	0x136e	; 0x136e <init_timeoutq>
	BMP280Sensor *BMP280_ptr = New_BMP280_Sensor( 0 );
     2c6:	80 e0       	ldi	r24, 0x00	; 0
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	0e 94 8e 0c 	call	0x191c	; 0x191c <New_BMP280_Sensor>
     2ce:	ec 01       	movw	r28, r24
	BMP280_FctnInit(BMP280_ptr);
     2d0:	0e 94 29 0c 	call	0x1852	; 0x1852 <BMP280_FctnInit>
	init_Event_Timer();
     2d4:	0e 94 86 06 	call	0xd0c	; 0xd0c <init_Event_Timer>
	printf("init done!\n");
     2d8:	82 e3       	ldi	r24, 0x32	; 50
     2da:	92 e0       	ldi	r25, 0x02	; 2
     2dc:	0e 94 e5 14 	call	0x29ca	; 0x29ca <puts>
	
	/* could have sealed following in a function */
	load_new_sensor( 1, 4, (BaseSensor *)BMP280_ptr, 0 );
     2e0:	20 e0       	ldi	r18, 0x00	; 0
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	ae 01       	movw	r20, r28
     2e6:	64 e0       	ldi	r22, 0x04	; 4
     2e8:	70 e0       	ldi	r23, 0x00	; 0
     2ea:	81 e0       	ldi	r24, 0x01	; 1
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	0e 94 b9 0a 	call	0x1572	; 0x1572 <load_new_sensor>
	// load_new_sensor( 4, 4, (BaseSensor *)Si7020_ptr, 0 );
	init_set_timer( get_next_interval() );
     2f2:	0e 94 e7 09 	call	0x13ce	; 0x13ce <get_next_interval>
     2f6:	0e 94 96 06 	call	0xd2c	; 0xd2c <init_set_timer>
	
	/* Enable global interrupt */
	sei();
     2fa:	78 94       	sei
     2fc:	0f 90       	pop	r0
     2fe:	0f 90       	pop	r0
     300:	0f 90       	pop	r0
     302:	0f 90       	pop	r0
     304:	ff cf       	rjmp	.-2      	; 0x304 <main+0x90>

00000306 <BMP280_ReadBytes>:
  @brief Reads some bytes from the BMP280
  @param[in] *values pointer to an array to store the bytes, put the starting register in values[0]
  @param[in] length how many bytes to read
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadBytes(unsigned char *values, char length){
     306:	1f 93       	push	r17
     308:	cf 93       	push	r28
     30a:	df 93       	push	r29
     30c:	ec 01       	movw	r28, r24
     30e:	16 2f       	mov	r17, r22
	//printf("BMP280_ReadBytes");
	//printf("0x%1x",(unsigned)TWI_BeginWrite(BMP280_ADDR));
	TWI_BeginWrite(BMP280_ADDR);
     310:	86 e7       	ldi	r24, 0x76	; 118
     312:	0e 94 ff 06 	call	0xdfe	; 0xdfe <TWI_BeginWrite>
	//printf("0x%1x",(unsigned)TWI_WriteByte(values[0]));
	TWI_WriteByte(values[0]);//Write the register address
     316:	88 81       	ld	r24, Y
     318:	0e 94 f1 06 	call	0xde2	; 0xde2 <TWI_WriteByte>
	status = TWI_BeginRead(BMP280_ADDR); //Send a repeated start
     31c:	86 e7       	ldi	r24, 0x76	; 118
     31e:	0e 94 1c 07 	call	0xe38	; 0xe38 <TWI_BeginRead>
     322:	80 93 b4 03 	sts	0x03B4, r24
	//printf("0x%1x",status);
	if (status == TWI_SLAR_ACK){
     326:	80 34       	cpi	r24, 0x40	; 64
     328:	81 f4       	brne	.+32     	; 0x34a <BMP280_ReadBytes+0x44>
		if(((TWI_Read(&values[0],length,false)&TWSR_MASK) == TWI_REC_NACK) && (TWI_Stop() != 0)) return(1); //Receive bytes, send a STOP bit, and check for success
     32a:	61 2f       	mov	r22, r17
     32c:	70 e0       	ldi	r23, 0x00	; 0
     32e:	40 e0       	ldi	r20, 0x00	; 0
     330:	ce 01       	movw	r24, r28
     332:	0e 94 59 07 	call	0xeb2	; 0xeb2 <TWI_Read>
     336:	88 7f       	andi	r24, 0xF8	; 248
     338:	88 35       	cpi	r24, 0x58	; 88
     33a:	49 f4       	brne	.+18     	; 0x34e <BMP280_ReadBytes+0x48>
     33c:	0e 94 54 07 	call	0xea8	; 0xea8 <TWI_Stop>
     340:	91 e0       	ldi	r25, 0x01	; 1
     342:	81 11       	cpse	r24, r1
     344:	05 c0       	rjmp	.+10     	; 0x350 <BMP280_ReadBytes+0x4a>
     346:	90 e0       	ldi	r25, 0x00	; 0
     348:	03 c0       	rjmp	.+6      	; 0x350 <BMP280_ReadBytes+0x4a>
	}
	return(0);
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	01 c0       	rjmp	.+2      	; 0x350 <BMP280_ReadBytes+0x4a>
     34e:	90 e0       	ldi	r25, 0x00	; 0
}
     350:	89 2f       	mov	r24, r25
     352:	df 91       	pop	r29
     354:	cf 91       	pop	r28
     356:	1f 91       	pop	r17
     358:	08 95       	ret

0000035a <BMP280_ReadInt>:
  @brief Reads an int from the BMP280
  @param[in] address The register address of the first byte of the uint
  @param[out] val* A pointer to a uint to store the received data to
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadInt(char address, int *val){
     35a:	0f 93       	push	r16
     35c:	1f 93       	push	r17
     35e:	cf 93       	push	r28
     360:	df 93       	push	r29
     362:	00 d0       	rcall	.+0      	; 0x364 <BMP280_ReadInt+0xa>
     364:	cd b7       	in	r28, 0x3d	; 61
     366:	de b7       	in	r29, 0x3e	; 62
     368:	8b 01       	movw	r16, r22
	//printf("\nBMP280_ReadInt");
	unsigned char data[2];	//char is 4 bits, 1 byte

	data[0] = address;
     36a:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     36c:	62 e0       	ldi	r22, 0x02	; 2
     36e:	ce 01       	movw	r24, r28
     370:	01 96       	adiw	r24, 0x01	; 1
     372:	0e 94 83 01 	call	0x306	; 0x306 <BMP280_ReadBytes>
     376:	88 23       	and	r24, r24
     378:	59 f0       	breq	.+22     	; 0x390 <BMP280_ReadInt+0x36>
		*val = (((int)data[1]<<8)|(int)data[0]);
     37a:	8a 81       	ldd	r24, Y+2	; 0x02
     37c:	90 e0       	ldi	r25, 0x00	; 0
     37e:	98 2f       	mov	r25, r24
     380:	88 27       	eor	r24, r24
     382:	29 81       	ldd	r18, Y+1	; 0x01
     384:	82 2b       	or	r24, r18
     386:	f8 01       	movw	r30, r16
     388:	91 83       	std	Z+1, r25	; 0x01
     38a:	80 83       	st	Z, r24
		return(1);
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	03 c0       	rjmp	.+6      	; 0x396 <BMP280_ReadInt+0x3c>
	}
	*val = 0;
     390:	f8 01       	movw	r30, r16
     392:	11 82       	std	Z+1, r1	; 0x01
     394:	10 82       	st	Z, r1
	return(0);
}
     396:	0f 90       	pop	r0
     398:	0f 90       	pop	r0
     39a:	df 91       	pop	r29
     39c:	cf 91       	pop	r28
     39e:	1f 91       	pop	r17
     3a0:	0f 91       	pop	r16
     3a2:	08 95       	ret

000003a4 <BMP280_Init>:

/*************************************************************************//**
  @brief Initializes the BMP280 and reads the calibration data from the device
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
char BMP280_Init(void){
     3a4:	cf 93       	push	r28
     3a6:	df 93       	push	r29
     3a8:	00 d0       	rcall	.+0      	; 0x3aa <BMP280_Init+0x6>
     3aa:	cd b7       	in	r28, 0x3d	; 61
     3ac:	de b7       	in	r29, 0x3e	; 62
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
     3ae:	88 e8       	ldi	r24, 0x88	; 136
     3b0:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     3b2:	62 e0       	ldi	r22, 0x02	; 2
     3b4:	ce 01       	movw	r24, r28
     3b6:	01 96       	adiw	r24, 0x01	; 1
     3b8:	0e 94 83 01 	call	0x306	; 0x306 <BMP280_ReadBytes>
     3bc:	88 23       	and	r24, r24
     3be:	99 f0       	breq	.+38     	; 0x3e6 <BMP280_Init+0x42>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     3c0:	8a 81       	ldd	r24, Y+2	; 0x02
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	98 2f       	mov	r25, r24
     3c6:	88 27       	eor	r24, r24
     3c8:	29 81       	ldd	r18, Y+1	; 0x01
     3ca:	82 2b       	or	r24, r18
     3cc:	90 93 bf 03 	sts	0x03BF, r25
     3d0:	80 93 be 03 	sts	0x03BE, r24

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
     3d4:	64 ed       	ldi	r22, 0xD4	; 212
     3d6:	73 e0       	ldi	r23, 0x03	; 3
     3d8:	8a e8       	ldi	r24, 0x8A	; 138
     3da:	0e 94 ad 01 	call	0x35a	; 0x35a <BMP280_ReadInt>
	// used in the calculations when taking measurements.

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
     3de:	88 23       	and	r24, r24
     3e0:	09 f4       	brne	.+2      	; 0x3e4 <BMP280_Init+0x40>
     3e2:	bb c0       	rjmp	.+374    	; 0x55a <BMP280_Init+0x1b6>
     3e4:	05 c0       	rjmp	.+10     	; 0x3f0 <BMP280_Init+0x4c>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     3e6:	10 92 bf 03 	sts	0x03BF, r1
     3ea:	10 92 be 03 	sts	0x03BE, r1
     3ee:	b5 c0       	rjmp	.+362    	; 0x55a <BMP280_Init+0x1b6>
	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
     3f0:	62 ed       	ldi	r22, 0xD2	; 210
     3f2:	73 e0       	ldi	r23, 0x03	; 3
     3f4:	8c e8       	ldi	r24, 0x8C	; 140
     3f6:	0e 94 ad 01 	call	0x35a	; 0x35a <BMP280_ReadInt>

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
     3fa:	88 23       	and	r24, r24
     3fc:	09 f4       	brne	.+2      	; 0x400 <BMP280_Init+0x5c>
     3fe:	ad c0       	rjmp	.+346    	; 0x55a <BMP280_Init+0x1b6>
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
     400:	8e e8       	ldi	r24, 0x8E	; 142
     402:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     404:	62 e0       	ldi	r22, 0x02	; 2
     406:	ce 01       	movw	r24, r28
     408:	01 96       	adiw	r24, 0x01	; 1
     40a:	0e 94 83 01 	call	0x306	; 0x306 <BMP280_ReadBytes>
     40e:	88 23       	and	r24, r24
     410:	99 f0       	breq	.+38     	; 0x438 <BMP280_Init+0x94>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     412:	8a 81       	ldd	r24, Y+2	; 0x02
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	98 2f       	mov	r25, r24
     418:	88 27       	eor	r24, r24
     41a:	29 81       	ldd	r18, Y+1	; 0x01
     41c:	82 2b       	or	r24, r18
     41e:	90 93 c1 03 	sts	0x03C1, r25
     422:	80 93 c0 03 	sts	0x03C0, r24
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     426:	60 ed       	ldi	r22, 0xD0	; 208
     428:	73 e0       	ldi	r23, 0x03	; 3
     42a:	80 e9       	ldi	r24, 0x90	; 144
     42c:	0e 94 ad 01 	call	0x35a	; 0x35a <BMP280_ReadInt>
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
     430:	88 23       	and	r24, r24
     432:	09 f4       	brne	.+2      	; 0x436 <BMP280_Init+0x92>
     434:	92 c0       	rjmp	.+292    	; 0x55a <BMP280_Init+0x1b6>
     436:	05 c0       	rjmp	.+10     	; 0x442 <BMP280_Init+0x9e>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     438:	10 92 c1 03 	sts	0x03C1, r1
     43c:	10 92 c0 03 	sts	0x03C0, r1
     440:	8c c0       	rjmp	.+280    	; 0x55a <BMP280_Init+0x1b6>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     442:	6e ec       	ldi	r22, 0xCE	; 206
     444:	73 e0       	ldi	r23, 0x03	; 3
     446:	82 e9       	ldi	r24, 0x92	; 146
     448:	0e 94 ad 01 	call	0x35a	; 0x35a <BMP280_ReadInt>
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     44c:	88 23       	and	r24, r24
     44e:	09 f4       	brne	.+2      	; 0x452 <BMP280_Init+0xae>
     450:	84 c0       	rjmp	.+264    	; 0x55a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     452:	6c ec       	ldi	r22, 0xCC	; 204
     454:	73 e0       	ldi	r23, 0x03	; 3
     456:	84 e9       	ldi	r24, 0x94	; 148
     458:	0e 94 ad 01 	call	0x35a	; 0x35a <BMP280_ReadInt>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     45c:	88 23       	and	r24, r24
     45e:	09 f4       	brne	.+2      	; 0x462 <BMP280_Init+0xbe>
     460:	7c c0       	rjmp	.+248    	; 0x55a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     462:	6a ec       	ldi	r22, 0xCA	; 202
     464:	73 e0       	ldi	r23, 0x03	; 3
     466:	86 e9       	ldi	r24, 0x96	; 150
     468:	0e 94 ad 01 	call	0x35a	; 0x35a <BMP280_ReadInt>
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     46c:	88 23       	and	r24, r24
     46e:	09 f4       	brne	.+2      	; 0x472 <BMP280_Init+0xce>
     470:	74 c0       	rjmp	.+232    	; 0x55a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     472:	68 ec       	ldi	r22, 0xC8	; 200
     474:	73 e0       	ldi	r23, 0x03	; 3
     476:	88 e9       	ldi	r24, 0x98	; 152
     478:	0e 94 ad 01 	call	0x35a	; 0x35a <BMP280_ReadInt>
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     47c:	88 23       	and	r24, r24
     47e:	09 f4       	brne	.+2      	; 0x482 <BMP280_Init+0xde>
     480:	6c c0       	rjmp	.+216    	; 0x55a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     482:	66 ec       	ldi	r22, 0xC6	; 198
     484:	73 e0       	ldi	r23, 0x03	; 3
     486:	8a e9       	ldi	r24, 0x9A	; 154
     488:	0e 94 ad 01 	call	0x35a	; 0x35a <BMP280_ReadInt>
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     48c:	88 23       	and	r24, r24
     48e:	09 f4       	brne	.+2      	; 0x492 <BMP280_Init+0xee>
     490:	64 c0       	rjmp	.+200    	; 0x55a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     492:	64 ec       	ldi	r22, 0xC4	; 196
     494:	73 e0       	ldi	r23, 0x03	; 3
     496:	8c e9       	ldi	r24, 0x9C	; 156
     498:	0e 94 ad 01 	call	0x35a	; 0x35a <BMP280_ReadInt>
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     49c:	88 23       	and	r24, r24
     49e:	09 f4       	brne	.+2      	; 0x4a2 <BMP280_Init+0xfe>
     4a0:	5c c0       	rjmp	.+184    	; 0x55a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9C, &dig_P8)  &&
		BMP280_ReadInt(0x9E, &dig_P9)){
     4a2:	62 ec       	ldi	r22, 0xC2	; 194
     4a4:	73 e0       	ldi	r23, 0x03	; 3
     4a6:	8e e9       	ldi	r24, 0x9E	; 158
     4a8:	0e 94 ad 01 	call	0x35a	; 0x35a <BMP280_ReadInt>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     4ac:	88 23       	and	r24, r24
     4ae:	09 f4       	brne	.+2      	; 0x4b2 <BMP280_Init+0x10e>
     4b0:	54 c0       	rjmp	.+168    	; 0x55a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9E, &dig_P9)){
			printf("\nT: %i ,%i ,%i P: %i ,%i ,%i ,%i ,%i ,%i ,%i ,%1 ,%i \n",dig_T1,dig_T2,dig_T3,dig_P1,dig_P2,dig_P3,dig_P4,dig_P5,dig_P6,dig_P7,dig_P8,dig_P9);
     4b2:	80 91 c3 03 	lds	r24, 0x03C3
     4b6:	8f 93       	push	r24
     4b8:	80 91 c2 03 	lds	r24, 0x03C2
     4bc:	8f 93       	push	r24
     4be:	80 91 c5 03 	lds	r24, 0x03C5
     4c2:	8f 93       	push	r24
     4c4:	80 91 c4 03 	lds	r24, 0x03C4
     4c8:	8f 93       	push	r24
     4ca:	80 91 c7 03 	lds	r24, 0x03C7
     4ce:	8f 93       	push	r24
     4d0:	80 91 c6 03 	lds	r24, 0x03C6
     4d4:	8f 93       	push	r24
     4d6:	80 91 c9 03 	lds	r24, 0x03C9
     4da:	8f 93       	push	r24
     4dc:	80 91 c8 03 	lds	r24, 0x03C8
     4e0:	8f 93       	push	r24
     4e2:	80 91 cb 03 	lds	r24, 0x03CB
     4e6:	8f 93       	push	r24
     4e8:	80 91 ca 03 	lds	r24, 0x03CA
     4ec:	8f 93       	push	r24
     4ee:	80 91 cd 03 	lds	r24, 0x03CD
     4f2:	8f 93       	push	r24
     4f4:	80 91 cc 03 	lds	r24, 0x03CC
     4f8:	8f 93       	push	r24
     4fa:	80 91 cf 03 	lds	r24, 0x03CF
     4fe:	8f 93       	push	r24
     500:	80 91 ce 03 	lds	r24, 0x03CE
     504:	8f 93       	push	r24
     506:	80 91 d1 03 	lds	r24, 0x03D1
     50a:	8f 93       	push	r24
     50c:	80 91 d0 03 	lds	r24, 0x03D0
     510:	8f 93       	push	r24
     512:	80 91 c1 03 	lds	r24, 0x03C1
     516:	8f 93       	push	r24
     518:	80 91 c0 03 	lds	r24, 0x03C0
     51c:	8f 93       	push	r24
     51e:	80 91 d3 03 	lds	r24, 0x03D3
     522:	8f 93       	push	r24
     524:	80 91 d2 03 	lds	r24, 0x03D2
     528:	8f 93       	push	r24
     52a:	80 91 d5 03 	lds	r24, 0x03D5
     52e:	8f 93       	push	r24
     530:	80 91 d4 03 	lds	r24, 0x03D4
     534:	8f 93       	push	r24
     536:	80 91 bf 03 	lds	r24, 0x03BF
     53a:	8f 93       	push	r24
     53c:	80 91 be 03 	lds	r24, 0x03BE
     540:	8f 93       	push	r24
     542:	8d e3       	ldi	r24, 0x3D	; 61
     544:	92 e0       	ldi	r25, 0x02	; 2
     546:	9f 93       	push	r25
     548:	8f 93       	push	r24
     54a:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf>
		return (1);
     54e:	0f b6       	in	r0, 0x3f	; 63
     550:	f8 94       	cli
     552:	de bf       	out	0x3e, r29	; 62
     554:	0f be       	out	0x3f, r0	; 63
     556:	cd bf       	out	0x3d, r28	; 61
     558:	81 e0       	ldi	r24, 0x01	; 1
	}
	else 
		return (0);
}
     55a:	0f 90       	pop	r0
     55c:	0f 90       	pop	r0
     55e:	df 91       	pop	r29
     560:	cf 91       	pop	r28
     562:	08 95       	ret

00000564 <BMP280_SetOversampling>:
  @brief Sets the oversampling setting for the library
  @param[in] oss Oversampling setting
  @return 1
*****************************************************************************/
char BMP280_SetOversampling(short oss){
	oversampling = oss;
     564:	90 93 bd 03 	sts	0x03BD, r25
     568:	80 93 bc 03 	sts	0x03BC, r24
	return (1);
}
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	08 95       	ret

00000570 <BMP280_StartMeasurment>:

/*************************************************************************//**
  @brief Starts a measurement
  @return time to wait for result (in ms)
*****************************************************************************/
char BMP280_StartMeasurment(void){
     570:	1f 93       	push	r17
     572:	cf 93       	push	r28
     574:	df 93       	push	r29
     576:	00 d0       	rcall	.+0      	; 0x578 <BMP280_StartMeasurment+0x8>
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
	unsigned char data[2], result, delay;
	
	data[0] = BMP280_REG_CONTROL;
     57c:	84 ef       	ldi	r24, 0xF4	; 244
     57e:	89 83       	std	Y+1, r24	; 0x01

	switch (oversampling){
     580:	80 91 bc 03 	lds	r24, 0x03BC
     584:	90 91 bd 03 	lds	r25, 0x03BD
     588:	82 30       	cpi	r24, 0x02	; 2
     58a:	91 05       	cpc	r25, r1
     58c:	01 f1       	breq	.+64     	; 0x5ce <BMP280_StartMeasurment+0x5e>
     58e:	2c f4       	brge	.+10     	; 0x59a <BMP280_StartMeasurment+0x2a>
     590:	00 97       	sbiw	r24, 0x00	; 0
     592:	49 f0       	breq	.+18     	; 0x5a6 <BMP280_StartMeasurment+0x36>
     594:	01 97       	sbiw	r24, 0x01	; 1
     596:	89 f0       	breq	.+34     	; 0x5ba <BMP280_StartMeasurment+0x4a>
     598:	38 c0       	rjmp	.+112    	; 0x60a <BMP280_StartMeasurment+0x9a>
     59a:	83 30       	cpi	r24, 0x03	; 3
     59c:	91 05       	cpc	r25, r1
     59e:	09 f1       	breq	.+66     	; 0x5e2 <BMP280_StartMeasurment+0x72>
     5a0:	04 97       	sbiw	r24, 0x04	; 4
     5a2:	49 f1       	breq	.+82     	; 0x5f6 <BMP280_StartMeasurment+0x86>
     5a4:	32 c0       	rjmp	.+100    	; 0x60a <BMP280_StartMeasurment+0x9a>
		case 0:
		data[1] = BMP280_COMMAND_PRESSURE0;
     5a6:	85 e2       	ldi	r24, 0x25	; 37
     5a8:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	90 e0       	ldi	r25, 0x00	; 0
     5ae:	90 93 bb 03 	sts	0x03BB, r25
     5b2:	80 93 ba 03 	sts	0x03BA, r24
		delay = 8;
     5b6:	18 e0       	ldi	r17, 0x08	; 8
		break;
     5b8:	2b c0       	rjmp	.+86     	; 0x610 <BMP280_StartMeasurment+0xa0>
		case 1:
		data[1] = BMP280_COMMAND_PRESSURE1;
     5ba:	89 e2       	ldi	r24, 0x29	; 41
     5bc:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	90 93 bb 03 	sts	0x03BB, r25
     5c6:	80 93 ba 03 	sts	0x03BA, r24
		delay = 10;
     5ca:	1a e0       	ldi	r17, 0x0A	; 10
		break;
     5cc:	21 c0       	rjmp	.+66     	; 0x610 <BMP280_StartMeasurment+0xa0>
		case 2:
		data[1] = BMP280_COMMAND_PRESSURE2;
     5ce:	8d e2       	ldi	r24, 0x2D	; 45
     5d0:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     5d2:	81 e0       	ldi	r24, 0x01	; 1
     5d4:	90 e0       	ldi	r25, 0x00	; 0
     5d6:	90 93 bb 03 	sts	0x03BB, r25
     5da:	80 93 ba 03 	sts	0x03BA, r24
		delay = 15;
     5de:	1f e0       	ldi	r17, 0x0F	; 15
		break;
     5e0:	17 c0       	rjmp	.+46     	; 0x610 <BMP280_StartMeasurment+0xa0>
		case 3:
		data[1] = BMP280_COMMAND_PRESSURE3;
     5e2:	81 e3       	ldi	r24, 0x31	; 49
     5e4:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	90 e0       	ldi	r25, 0x00	; 0
     5ea:	90 93 bb 03 	sts	0x03BB, r25
     5ee:	80 93 ba 03 	sts	0x03BA, r24
		delay = 24;
     5f2:	18 e1       	ldi	r17, 0x18	; 24
		break;
     5f4:	0d c0       	rjmp	.+26     	; 0x610 <BMP280_StartMeasurment+0xa0>
		case 4:
		data[1] = BMP280_COMMAND_PRESSURE4;
     5f6:	8d e5       	ldi	r24, 0x5D	; 93
     5f8:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	90 93 bb 03 	sts	0x03BB, r25
     602:	80 93 ba 03 	sts	0x03BA, r24
		delay = 45;
     606:	1d e2       	ldi	r17, 0x2D	; 45
		break;
     608:	03 c0       	rjmp	.+6      	; 0x610 <BMP280_StartMeasurment+0xa0>
		default:
		data[1] = BMP280_COMMAND_PRESSURE0;
     60a:	85 e2       	ldi	r24, 0x25	; 37
     60c:	8a 83       	std	Y+2, r24	; 0x02
		delay = 9;
     60e:	19 e0       	ldi	r17, 0x09	; 9
  @param[in] *values pointer to an array to send, put the starting register in values[0]
  @param[in] length how many bytes to write (including the starting register ie. sizeof(values))
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_WriteBytes(unsigned char *values, char length){
	TWI_BeginWrite(BMP280_ADDR);
     610:	86 e7       	ldi	r24, 0x76	; 118
     612:	0e 94 ff 06 	call	0xdfe	; 0xdfe <TWI_BeginWrite>
	if((TWI_Write(&values[0],length) == TWI_SENT_ACK) && (TWI_Stop() != 0)) return 1; //Send bytes, a STOP bit, and check for success
     616:	62 e0       	ldi	r22, 0x02	; 2
     618:	70 e0       	ldi	r23, 0x00	; 0
     61a:	ce 01       	movw	r24, r28
     61c:	01 96       	adiw	r24, 0x01	; 1
     61e:	0e 94 95 07 	call	0xf2a	; 0xf2a <TWI_Write>
     622:	88 32       	cpi	r24, 0x28	; 40
     624:	31 f4       	brne	.+12     	; 0x632 <BMP280_StartMeasurment+0xc2>
     626:	0e 94 54 07 	call	0xea8	; 0xea8 <TWI_Stop>
		data[1] = BMP280_COMMAND_PRESSURE0;
		delay = 9;
		break;
	}
	result = BMP280_WriteBytes(&data[0], 2);
	if (result) // good write?
     62a:	81 11       	cpse	r24, r1
     62c:	04 c0       	rjmp	.+8      	; 0x636 <BMP280_StartMeasurment+0xc6>
	return(delay); // return the delay in ms (rounded up) to wait before retrieving data
	else
	return(-1); // or return -1 if there was a problem communicating with the BMP
     62e:	8f ef       	ldi	r24, 0xFF	; 255
     630:	03 c0       	rjmp	.+6      	; 0x638 <BMP280_StartMeasurment+0xc8>
     632:	8f ef       	ldi	r24, 0xFF	; 255
     634:	01 c0       	rjmp	.+2      	; 0x638 <BMP280_StartMeasurment+0xc8>
		delay = 9;
		break;
	}
	result = BMP280_WriteBytes(&data[0], 2);
	if (result) // good write?
	return(delay); // return the delay in ms (rounded up) to wait before retrieving data
     636:	81 2f       	mov	r24, r17
	else
	return(-1); // or return -1 if there was a problem communicating with the BMP
}
     638:	0f 90       	pop	r0
     63a:	0f 90       	pop	r0
     63c:	df 91       	pop	r29
     63e:	cf 91       	pop	r28
     640:	1f 91       	pop	r17
     642:	08 95       	ret

00000644 <BMP280_GetUnPT>:
  @brief Gets the uncalibrated temperature and pressure data
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetUnPT(double *uP, double *uT){
     644:	8f 92       	push	r8
     646:	9f 92       	push	r9
     648:	bf 92       	push	r11
     64a:	cf 92       	push	r12
     64c:	df 92       	push	r13
     64e:	ef 92       	push	r14
     650:	ff 92       	push	r15
     652:	0f 93       	push	r16
     654:	1f 93       	push	r17
     656:	cf 93       	push	r28
     658:	df 93       	push	r29
     65a:	00 d0       	rcall	.+0      	; 0x65c <BMP280_GetUnPT+0x18>
     65c:	00 d0       	rcall	.+0      	; 0x65e <BMP280_GetUnPT+0x1a>
     65e:	00 d0       	rcall	.+0      	; 0x660 <BMP280_GetUnPT+0x1c>
     660:	cd b7       	in	r28, 0x3d	; 61
     662:	de b7       	in	r29, 0x3e	; 62
     664:	4c 01       	movw	r8, r24
     666:	8b 01       	movw	r16, r22
	unsigned char data[6];
	char result;
	
	data[0] = BMP280_REG_RESULT_PRESSURE; //0xF7
     668:	87 ef       	ldi	r24, 0xF7	; 247
     66a:	89 83       	std	Y+1, r24	; 0x01

	result = BMP280_ReadBytes(&data[0], 6); // 0xF7; xF8, 0xF9, 0xFA, 0xFB, 0xFC
     66c:	66 e0       	ldi	r22, 0x06	; 6
     66e:	ce 01       	movw	r24, r28
     670:	01 96       	adiw	r24, 0x01	; 1
     672:	0e 94 83 01 	call	0x306	; 0x306 <BMP280_ReadBytes>
     676:	b8 2e       	mov	r11, r24
	if (result){ // good read
     678:	88 23       	and	r24, r24
     67a:	09 f4       	brne	.+2      	; 0x67e <BMP280_GetUnPT+0x3a>
     67c:	72 c0       	rjmp	.+228    	; 0x762 <BMP280_GetUnPT+0x11e>
		double factor = pow(2, 4);
		*uP = (( (data[0] *256.0) + data[1] + (data[2]/256.0))) * factor ;	//20bit UP
     67e:	69 81       	ldd	r22, Y+1	; 0x01
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__floatsisf>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	40 e8       	ldi	r20, 0x80	; 128
     690:	53 e4       	ldi	r21, 0x43	; 67
     692:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     696:	6b 01       	movw	r12, r22
     698:	7c 01       	movw	r14, r24
     69a:	6a 81       	ldd	r22, Y+2	; 0x02
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	80 e0       	ldi	r24, 0x00	; 0
     6a0:	90 e0       	ldi	r25, 0x00	; 0
     6a2:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__floatsisf>
     6a6:	9b 01       	movw	r18, r22
     6a8:	ac 01       	movw	r20, r24
     6aa:	c7 01       	movw	r24, r14
     6ac:	b6 01       	movw	r22, r12
     6ae:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__addsf3>
     6b2:	6b 01       	movw	r12, r22
     6b4:	7c 01       	movw	r14, r24
     6b6:	6b 81       	ldd	r22, Y+3	; 0x03
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	80 e0       	ldi	r24, 0x00	; 0
     6bc:	90 e0       	ldi	r25, 0x00	; 0
     6be:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__floatsisf>
     6c2:	20 e0       	ldi	r18, 0x00	; 0
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	40 e8       	ldi	r20, 0x80	; 128
     6c8:	5b e3       	ldi	r21, 0x3B	; 59
     6ca:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     6ce:	9b 01       	movw	r18, r22
     6d0:	ac 01       	movw	r20, r24
     6d2:	c7 01       	movw	r24, r14
     6d4:	b6 01       	movw	r22, r12
     6d6:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__addsf3>
     6da:	20 e0       	ldi	r18, 0x00	; 0
     6dc:	30 e0       	ldi	r19, 0x00	; 0
     6de:	40 e8       	ldi	r20, 0x80	; 128
     6e0:	51 e4       	ldi	r21, 0x41	; 65
     6e2:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     6e6:	f4 01       	movw	r30, r8
     6e8:	60 83       	st	Z, r22
     6ea:	71 83       	std	Z+1, r23	; 0x01
     6ec:	82 83       	std	Z+2, r24	; 0x02
     6ee:	93 83       	std	Z+3, r25	; 0x03
		*uT = (( (data[3] *256.0) + data[4] + (data[5]/256.0))) * factor ;	//20bit UT
     6f0:	6c 81       	ldd	r22, Y+4	; 0x04
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__floatsisf>
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	40 e8       	ldi	r20, 0x80	; 128
     702:	53 e4       	ldi	r21, 0x43	; 67
     704:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     708:	6b 01       	movw	r12, r22
     70a:	7c 01       	movw	r14, r24
     70c:	6d 81       	ldd	r22, Y+5	; 0x05
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__floatsisf>
     718:	9b 01       	movw	r18, r22
     71a:	ac 01       	movw	r20, r24
     71c:	c7 01       	movw	r24, r14
     71e:	b6 01       	movw	r22, r12
     720:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__addsf3>
     724:	6b 01       	movw	r12, r22
     726:	7c 01       	movw	r14, r24
     728:	6e 81       	ldd	r22, Y+6	; 0x06
     72a:	70 e0       	ldi	r23, 0x00	; 0
     72c:	80 e0       	ldi	r24, 0x00	; 0
     72e:	90 e0       	ldi	r25, 0x00	; 0
     730:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__floatsisf>
     734:	20 e0       	ldi	r18, 0x00	; 0
     736:	30 e0       	ldi	r19, 0x00	; 0
     738:	40 e8       	ldi	r20, 0x80	; 128
     73a:	5b e3       	ldi	r21, 0x3B	; 59
     73c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     740:	9b 01       	movw	r18, r22
     742:	ac 01       	movw	r20, r24
     744:	c7 01       	movw	r24, r14
     746:	b6 01       	movw	r22, r12
     748:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__addsf3>
     74c:	20 e0       	ldi	r18, 0x00	; 0
     74e:	30 e0       	ldi	r19, 0x00	; 0
     750:	40 e8       	ldi	r20, 0x80	; 128
     752:	51 e4       	ldi	r21, 0x41	; 65
     754:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     758:	f8 01       	movw	r30, r16
     75a:	60 83       	st	Z, r22
     75c:	71 83       	std	Z+1, r23	; 0x01
     75e:	82 83       	std	Z+2, r24	; 0x02
     760:	93 83       	std	Z+3, r25	; 0x03
		
	}
	return(result);
}
     762:	8b 2d       	mov	r24, r11
     764:	26 96       	adiw	r28, 0x06	; 6
     766:	0f b6       	in	r0, 0x3f	; 63
     768:	f8 94       	cli
     76a:	de bf       	out	0x3e, r29	; 62
     76c:	0f be       	out	0x3f, r0	; 63
     76e:	cd bf       	out	0x3d, r28	; 61
     770:	df 91       	pop	r29
     772:	cf 91       	pop	r28
     774:	1f 91       	pop	r17
     776:	0f 91       	pop	r16
     778:	ff 90       	pop	r15
     77a:	ef 90       	pop	r14
     77c:	df 90       	pop	r13
     77e:	cf 90       	pop	r12
     780:	bf 90       	pop	r11
     782:	9f 90       	pop	r9
     784:	8f 90       	pop	r8
     786:	08 95       	ret

00000788 <BMP280_CalcTemperature>:
  @brief Calculates temperature
  @param[out] pointer to a place to store the temperature data
  @param[in] pointer to the uncalibrated temperature data
  @return status
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
     788:	4f 92       	push	r4
     78a:	5f 92       	push	r5
     78c:	6f 92       	push	r6
     78e:	7f 92       	push	r7
     790:	8f 92       	push	r8
     792:	9f 92       	push	r9
     794:	af 92       	push	r10
     796:	bf 92       	push	r11
     798:	cf 92       	push	r12
     79a:	df 92       	push	r13
     79c:	ef 92       	push	r14
     79e:	ff 92       	push	r15
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	ec 01       	movw	r28, r24
	double adc_T = *uT ;
     7a6:	fb 01       	movw	r30, r22
     7a8:	40 80       	ld	r4, Z
     7aa:	51 80       	ldd	r5, Z+1	; 0x01
     7ac:	62 80       	ldd	r6, Z+2	; 0x02
     7ae:	73 80       	ldd	r7, Z+3	; 0x03
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
     7b0:	60 91 be 03 	lds	r22, 0x03BE
     7b4:	70 91 bf 03 	lds	r23, 0x03BF
     7b8:	80 e0       	ldi	r24, 0x00	; 0
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__floatunsisf>
     7c0:	4b 01       	movw	r8, r22
     7c2:	5c 01       	movw	r10, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
     7c4:	20 e0       	ldi	r18, 0x00	; 0
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	40 e0       	ldi	r20, 0x00	; 0
     7ca:	57 e3       	ldi	r21, 0x37	; 55
     7cc:	c3 01       	movw	r24, r6
     7ce:	b2 01       	movw	r22, r4
     7d0:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     7d4:	6b 01       	movw	r12, r22
     7d6:	7c 01       	movw	r14, r24
     7d8:	20 e0       	ldi	r18, 0x00	; 0
     7da:	30 e0       	ldi	r19, 0x00	; 0
     7dc:	40 e0       	ldi	r20, 0x00	; 0
     7de:	59 e3       	ldi	r21, 0x39	; 57
     7e0:	c5 01       	movw	r24, r10
     7e2:	b4 01       	movw	r22, r8
     7e4:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     7e8:	9b 01       	movw	r18, r22
     7ea:	ac 01       	movw	r20, r24
     7ec:	c7 01       	movw	r24, r14
     7ee:	b6 01       	movw	r22, r12
     7f0:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__subsf3>
     7f4:	6b 01       	movw	r12, r22
     7f6:	7c 01       	movw	r14, r24
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
	double adc_T = *uT ;
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
     7f8:	20 e0       	ldi	r18, 0x00	; 0
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	40 e8       	ldi	r20, 0x80	; 128
     7fe:	58 e3       	ldi	r21, 0x38	; 56
     800:	c3 01       	movw	r24, r6
     802:	b2 01       	movw	r22, r4
     804:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     808:	2b 01       	movw	r4, r22
     80a:	3c 01       	movw	r6, r24
     80c:	20 e0       	ldi	r18, 0x00	; 0
     80e:	30 e0       	ldi	r19, 0x00	; 0
     810:	40 e8       	ldi	r20, 0x80	; 128
     812:	5a e3       	ldi	r21, 0x3A	; 58
     814:	c5 01       	movw	r24, r10
     816:	b4 01       	movw	r22, r8
     818:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     81c:	9b 01       	movw	r18, r22
     81e:	ac 01       	movw	r20, r24
     820:	c3 01       	movw	r24, r6
     822:	b2 01       	movw	r22, r4
     824:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__subsf3>
     828:	4b 01       	movw	r8, r22
     82a:	5c 01       	movw	r10, r24
     82c:	60 91 d4 03 	lds	r22, 0x03D4
     830:	70 91 d5 03 	lds	r23, 0x03D5
     834:	88 27       	eor	r24, r24
     836:	77 fd       	sbrc	r23, 7
     838:	80 95       	com	r24
     83a:	98 2f       	mov	r25, r24
     83c:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__floatsisf>
     840:	9b 01       	movw	r18, r22
     842:	ac 01       	movw	r20, r24
     844:	c5 01       	movw	r24, r10
     846:	b4 01       	movw	r22, r8
     848:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     84c:	4b 01       	movw	r8, r22
     84e:	5c 01       	movw	r10, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
     850:	a7 01       	movw	r20, r14
     852:	96 01       	movw	r18, r12
     854:	c7 01       	movw	r24, r14
     856:	b6 01       	movw	r22, r12
     858:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     85c:	6b 01       	movw	r12, r22
     85e:	7c 01       	movw	r14, r24
     860:	60 91 d2 03 	lds	r22, 0x03D2
     864:	70 91 d3 03 	lds	r23, 0x03D3
     868:	88 27       	eor	r24, r24
     86a:	77 fd       	sbrc	r23, 7
     86c:	80 95       	com	r24
     86e:	98 2f       	mov	r25, r24
     870:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__floatsisf>
     874:	9b 01       	movw	r18, r22
     876:	ac 01       	movw	r20, r24
     878:	c7 01       	movw	r24, r14
     87a:	b6 01       	movw	r22, r12
     87c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     880:	9b 01       	movw	r18, r22
     882:	ac 01       	movw	r20, r24
	t_fine = (long signed int)(var1+var2);
     884:	c5 01       	movw	r24, r10
     886:	b4 01       	movw	r22, r8
     888:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__addsf3>
     88c:	6b 01       	movw	r12, r22
     88e:	7c 01       	movw	r14, r24
     890:	0e 94 6c 0d 	call	0x1ad8	; 0x1ad8 <__fixsfsi>
     894:	60 93 b6 03 	sts	0x03B6, r22
     898:	70 93 b7 03 	sts	0x03B7, r23
     89c:	80 93 b8 03 	sts	0x03B8, r24
     8a0:	90 93 b9 03 	sts	0x03B9, r25
	
	*T = (var1+var2)/5120.0;
     8a4:	20 e0       	ldi	r18, 0x00	; 0
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	40 ea       	ldi	r20, 0xA0	; 160
     8aa:	55 e4       	ldi	r21, 0x45	; 69
     8ac:	c7 01       	movw	r24, r14
     8ae:	b6 01       	movw	r22, r12
     8b0:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__divsf3>
     8b4:	6b 01       	movw	r12, r22
     8b6:	7c 01       	movw	r14, r24
     8b8:	68 83       	st	Y, r22
     8ba:	79 83       	std	Y+1, r23	; 0x01
     8bc:	8a 83       	std	Y+2, r24	; 0x02
     8be:	9b 83       	std	Y+3, r25	; 0x03
	
	if(*T>100.0 || *T <(-100.0))return 0;
     8c0:	20 e0       	ldi	r18, 0x00	; 0
     8c2:	30 e0       	ldi	r19, 0x00	; 0
     8c4:	48 ec       	ldi	r20, 0xC8	; 200
     8c6:	52 e4       	ldi	r21, 0x42	; 66
     8c8:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <__gesf2>
     8cc:	18 16       	cp	r1, r24
     8ce:	74 f0       	brlt	.+28     	; 0x8ec <BMP280_CalcTemperature+0x164>
     8d0:	20 e0       	ldi	r18, 0x00	; 0
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	48 ec       	ldi	r20, 0xC8	; 200
     8d6:	52 ec       	ldi	r21, 0xC2	; 194
     8d8:	c7 01       	movw	r24, r14
     8da:	b6 01       	movw	r22, r12
     8dc:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__cmpsf2>
     8e0:	88 1f       	adc	r24, r24
     8e2:	88 27       	eor	r24, r24
     8e4:	88 1f       	adc	r24, r24
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	89 27       	eor	r24, r25
     8ea:	01 c0       	rjmp	.+2      	; 0x8ee <BMP280_CalcTemperature+0x166>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
	
	return (1);
}
     8ee:	df 91       	pop	r29
     8f0:	cf 91       	pop	r28
     8f2:	ff 90       	pop	r15
     8f4:	ef 90       	pop	r14
     8f6:	df 90       	pop	r13
     8f8:	cf 90       	pop	r12
     8fa:	bf 90       	pop	r11
     8fc:	af 90       	pop	r10
     8fe:	9f 90       	pop	r9
     900:	8f 90       	pop	r8
     902:	7f 90       	pop	r7
     904:	6f 90       	pop	r6
     906:	5f 90       	pop	r5
     908:	4f 90       	pop	r4
     90a:	08 95       	ret

0000090c <BMP280_CalcPressure>:
  @brief Calculates pressure
  @param[out] pointer to a place to store the pressure data
  @param[in] pointer to the uncalibrated pressure data
  @return status
*****************************************************************************/
char BMP280_CalcPressure(double *P,double *uP){
     90c:	4f 92       	push	r4
     90e:	5f 92       	push	r5
     910:	6f 92       	push	r6
     912:	7f 92       	push	r7
     914:	8f 92       	push	r8
     916:	9f 92       	push	r9
     918:	af 92       	push	r10
     91a:	bf 92       	push	r11
     91c:	cf 92       	push	r12
     91e:	df 92       	push	r13
     920:	ef 92       	push	r14
     922:	ff 92       	push	r15
     924:	0f 93       	push	r16
     926:	1f 93       	push	r17
     928:	cf 93       	push	r28
     92a:	df 93       	push	r29
     92c:	8c 01       	movw	r16, r24
     92e:	eb 01       	movw	r28, r22
	//char result;
	double var1 , var2 ;
	
	var1 = ((double)t_fine/2.0) - 64000.0;
     930:	60 91 b6 03 	lds	r22, 0x03B6
     934:	70 91 b7 03 	lds	r23, 0x03B7
     938:	80 91 b8 03 	lds	r24, 0x03B8
     93c:	90 91 b9 03 	lds	r25, 0x03B9
     940:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__floatsisf>
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	40 e0       	ldi	r20, 0x00	; 0
     94a:	5f e3       	ldi	r21, 0x3F	; 63
     94c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     950:	20 e0       	ldi	r18, 0x00	; 0
     952:	30 e0       	ldi	r19, 0x00	; 0
     954:	4a e7       	ldi	r20, 0x7A	; 122
     956:	57 e4       	ldi	r21, 0x47	; 71
     958:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__subsf3>
     95c:	6b 01       	movw	r12, r22
     95e:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
     960:	60 91 c8 03 	lds	r22, 0x03C8
     964:	70 91 c9 03 	lds	r23, 0x03C9
     968:	88 27       	eor	r24, r24
     96a:	77 fd       	sbrc	r23, 7
     96c:	80 95       	com	r24
     96e:	98 2f       	mov	r25, r24
     970:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__floatsisf>
     974:	a7 01       	movw	r20, r14
     976:	96 01       	movw	r18, r12
     978:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     97c:	20 e0       	ldi	r18, 0x00	; 0
     97e:	30 e0       	ldi	r19, 0x00	; 0
     980:	40 e0       	ldi	r20, 0x00	; 0
     982:	58 e3       	ldi	r21, 0x38	; 56
     984:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     988:	a7 01       	movw	r20, r14
     98a:	96 01       	movw	r18, r12
     98c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     990:	4b 01       	movw	r8, r22
     992:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
     994:	60 91 ca 03 	lds	r22, 0x03CA
     998:	70 91 cb 03 	lds	r23, 0x03CB
     99c:	88 27       	eor	r24, r24
     99e:	77 fd       	sbrc	r23, 7
     9a0:	80 95       	com	r24
     9a2:	98 2f       	mov	r25, r24
     9a4:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__floatsisf>
     9a8:	a7 01       	movw	r20, r14
     9aa:	96 01       	movw	r18, r12
     9ac:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     9b0:	9b 01       	movw	r18, r22
     9b2:	ac 01       	movw	r20, r24
     9b4:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__addsf3>
     9b8:	a5 01       	movw	r20, r10
     9ba:	94 01       	movw	r18, r8
     9bc:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__addsf3>
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e8       	ldi	r20, 0x80	; 128
     9c6:	5e e3       	ldi	r21, 0x3E	; 62
     9c8:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     9cc:	4b 01       	movw	r8, r22
     9ce:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var1 = (((double)dig_P3) * var1 * var1/524288.0 + ((double)dig_P2) * var1) / 524288.0;
     9d0:	60 91 ce 03 	lds	r22, 0x03CE
     9d4:	70 91 cf 03 	lds	r23, 0x03CF
     9d8:	88 27       	eor	r24, r24
     9da:	77 fd       	sbrc	r23, 7
     9dc:	80 95       	com	r24
     9de:	98 2f       	mov	r25, r24
     9e0:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__floatsisf>
     9e4:	a7 01       	movw	r20, r14
     9e6:	96 01       	movw	r18, r12
     9e8:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     9ec:	a7 01       	movw	r20, r14
     9ee:	96 01       	movw	r18, r12
     9f0:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	30 e0       	ldi	r19, 0x00	; 0
     9f8:	40 e0       	ldi	r20, 0x00	; 0
     9fa:	56 e3       	ldi	r21, 0x36	; 54
     9fc:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     a00:	2b 01       	movw	r4, r22
     a02:	3c 01       	movw	r6, r24
     a04:	60 91 d0 03 	lds	r22, 0x03D0
     a08:	70 91 d1 03 	lds	r23, 0x03D1
     a0c:	88 27       	eor	r24, r24
     a0e:	77 fd       	sbrc	r23, 7
     a10:	80 95       	com	r24
     a12:	98 2f       	mov	r25, r24
     a14:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__floatsisf>
     a18:	a7 01       	movw	r20, r14
     a1a:	96 01       	movw	r18, r12
     a1c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     a20:	9b 01       	movw	r18, r22
     a22:	ac 01       	movw	r20, r24
     a24:	c3 01       	movw	r24, r6
     a26:	b2 01       	movw	r22, r4
     a28:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__addsf3>
     a2c:	20 e0       	ldi	r18, 0x00	; 0
     a2e:	30 e0       	ldi	r19, 0x00	; 0
     a30:	40 e0       	ldi	r20, 0x00	; 0
     a32:	56 e3       	ldi	r21, 0x36	; 54
     a34:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
     a38:	20 e0       	ldi	r18, 0x00	; 0
     a3a:	30 e0       	ldi	r19, 0x00	; 0
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	57 e4       	ldi	r21, 0x47	; 71
     a40:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__addsf3>
     a44:	20 e0       	ldi	r18, 0x00	; 0
     a46:	30 e0       	ldi	r19, 0x00	; 0
     a48:	40 e0       	ldi	r20, 0x00	; 0
     a4a:	58 e3       	ldi	r21, 0x38	; 56
     a4c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     a50:	6b 01       	movw	r12, r22
     a52:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
     a54:	28 81       	ld	r18, Y
     a56:	39 81       	ldd	r19, Y+1	; 0x01
     a58:	4a 81       	ldd	r20, Y+2	; 0x02
     a5a:	5b 81       	ldd	r21, Y+3	; 0x03
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	70 e0       	ldi	r23, 0x00	; 0
     a60:	80 e8       	ldi	r24, 0x80	; 128
     a62:	99 e4       	ldi	r25, 0x49	; 73
     a64:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__subsf3>
     a68:	2b 01       	movw	r4, r22
     a6a:	3c 01       	movw	r6, r24
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
     a6c:	60 91 cc 03 	lds	r22, 0x03CC
     a70:	70 91 cd 03 	lds	r23, 0x03CD
     a74:	88 27       	eor	r24, r24
     a76:	77 fd       	sbrc	r23, 7
     a78:	80 95       	com	r24
     a7a:	98 2f       	mov	r25, r24
     a7c:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__floatsisf>
     a80:	20 e0       	ldi	r18, 0x00	; 0
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	40 e8       	ldi	r20, 0x80	; 128
     a86:	57 e4       	ldi	r21, 0x47	; 71
     a88:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     a8c:	9b 01       	movw	r18, r22
     a8e:	ac 01       	movw	r20, r24
     a90:	c5 01       	movw	r24, r10
     a92:	b4 01       	movw	r22, r8
     a94:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__addsf3>
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
     a98:	20 e0       	ldi	r18, 0x00	; 0
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e8       	ldi	r20, 0x80	; 128
     a9e:	59 e3       	ldi	r21, 0x39	; 57
     aa0:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     aa4:	9b 01       	movw	r18, r22
     aa6:	ac 01       	movw	r20, r24
     aa8:	c3 01       	movw	r24, r6
     aaa:	b2 01       	movw	r22, r4
     aac:	0e 94 9b 0c 	call	0x1936	; 0x1936 <__subsf3>
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	30 e5       	ldi	r19, 0x50	; 80
     ab4:	43 ec       	ldi	r20, 0xC3	; 195
     ab6:	55 e4       	ldi	r21, 0x45	; 69
     ab8:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     abc:	4b 01       	movw	r8, r22
     abe:	5c 01       	movw	r10, r24
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
     ac0:	60 91 c0 03 	lds	r22, 0x03C0
     ac4:	70 91 c1 03 	lds	r23, 0x03C1
     ac8:	80 e0       	ldi	r24, 0x00	; 0
     aca:	90 e0       	ldi	r25, 0x00	; 0
     acc:	0e 94 9d 0d 	call	0x1b3a	; 0x1b3a <__floatunsisf>
     ad0:	9b 01       	movw	r18, r22
     ad2:	ac 01       	movw	r20, r24
     ad4:	c7 01       	movw	r24, r14
     ad6:	b6 01       	movw	r22, r12
     ad8:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     adc:	9b 01       	movw	r18, r22
     ade:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
     ae0:	c5 01       	movw	r24, r10
     ae2:	b4 01       	movw	r22, r8
     ae4:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__divsf3>
     ae8:	6b 01       	movw	r12, r22
     aea:	7c 01       	movw	r14, r24
	//Serial.print("p = ");Serial.println(p,2);
	
	var1 = ((double)dig_P9)*p*p/2147483648.0;	//overflow
     aec:	60 91 c2 03 	lds	r22, 0x03C2
     af0:	70 91 c3 03 	lds	r23, 0x03C3
     af4:	88 27       	eor	r24, r24
     af6:	77 fd       	sbrc	r23, 7
     af8:	80 95       	com	r24
     afa:	98 2f       	mov	r25, r24
     afc:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__floatsisf>
     b00:	a7 01       	movw	r20, r14
     b02:	96 01       	movw	r18, r12
     b04:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     b08:	a7 01       	movw	r20, r14
     b0a:	96 01       	movw	r18, r12
     b0c:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     b10:	20 e0       	ldi	r18, 0x00	; 0
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	40 e0       	ldi	r20, 0x00	; 0
     b16:	50 e3       	ldi	r21, 0x30	; 48
     b18:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     b1c:	4b 01       	movw	r8, r22
     b1e:	5c 01       	movw	r10, r24
	
	var2 = p*((double)dig_P8)/32768.0;
     b20:	60 91 c4 03 	lds	r22, 0x03C4
     b24:	70 91 c5 03 	lds	r23, 0x03C5
     b28:	88 27       	eor	r24, r24
     b2a:	77 fd       	sbrc	r23, 7
     b2c:	80 95       	com	r24
     b2e:	98 2f       	mov	r25, r24
     b30:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__floatsisf>
     b34:	a7 01       	movw	r20, r14
     b36:	96 01       	movw	r18, r12
     b38:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     b3c:	20 e0       	ldi	r18, 0x00	; 0
     b3e:	30 e0       	ldi	r19, 0x00	; 0
     b40:	40 e0       	ldi	r20, 0x00	; 0
     b42:	58 e3       	ldi	r21, 0x38	; 56
     b44:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     b48:	9b 01       	movw	r18, r22
     b4a:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	p = p + (var1+var2+((double)dig_P7))/16.0;
     b4c:	c5 01       	movw	r24, r10
     b4e:	b4 01       	movw	r22, r8
     b50:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__addsf3>
     b54:	4b 01       	movw	r8, r22
     b56:	5c 01       	movw	r10, r24
     b58:	60 91 c6 03 	lds	r22, 0x03C6
     b5c:	70 91 c7 03 	lds	r23, 0x03C7
     b60:	88 27       	eor	r24, r24
     b62:	77 fd       	sbrc	r23, 7
     b64:	80 95       	com	r24
     b66:	98 2f       	mov	r25, r24
     b68:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <__floatsisf>
     b6c:	9b 01       	movw	r18, r22
     b6e:	ac 01       	movw	r20, r24
     b70:	c5 01       	movw	r24, r10
     b72:	b4 01       	movw	r22, r8
     b74:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__addsf3>
     b78:	20 e0       	ldi	r18, 0x00	; 0
     b7a:	30 e0       	ldi	r19, 0x00	; 0
     b7c:	40 e8       	ldi	r20, 0x80	; 128
     b7e:	5d e3       	ldi	r21, 0x3D	; 61
     b80:	0e 94 53 0e 	call	0x1ca6	; 0x1ca6 <__mulsf3>
     b84:	a7 01       	movw	r20, r14
     b86:	96 01       	movw	r18, r12
     b88:	0e 94 9c 0c 	call	0x1938	; 0x1938 <__addsf3>
	//Serial.print("p = ");Serial.println(p,2);
	
	*P = p/100.0 ;
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	48 ec       	ldi	r20, 0xC8	; 200
     b92:	52 e4       	ldi	r21, 0x42	; 66
     b94:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <__divsf3>
     b98:	6b 01       	movw	r12, r22
     b9a:	7c 01       	movw	r14, r24
     b9c:	f8 01       	movw	r30, r16
     b9e:	60 83       	st	Z, r22
     ba0:	71 83       	std	Z+1, r23	; 0x01
     ba2:	82 83       	std	Z+2, r24	; 0x02
     ba4:	93 83       	std	Z+3, r25	; 0x03
	
	if((*P>1200.0) || (*P < 800.0))return (0);
     ba6:	20 e0       	ldi	r18, 0x00	; 0
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	46 e9       	ldi	r20, 0x96	; 150
     bac:	54 e4       	ldi	r21, 0x44	; 68
     bae:	0e 94 4f 0e 	call	0x1c9e	; 0x1c9e <__gesf2>
     bb2:	18 16       	cp	r1, r24
     bb4:	74 f0       	brlt	.+28     	; 0xbd2 <BMP280_CalcPressure+0x2c6>
     bb6:	20 e0       	ldi	r18, 0x00	; 0
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	48 e4       	ldi	r20, 0x48	; 72
     bbc:	54 e4       	ldi	r21, 0x44	; 68
     bbe:	c7 01       	movw	r24, r14
     bc0:	b6 01       	movw	r22, r12
     bc2:	0e 94 00 0d 	call	0x1a00	; 0x1a00 <__cmpsf2>
     bc6:	88 1f       	adc	r24, r24
     bc8:	88 27       	eor	r24, r24
     bca:	88 1f       	adc	r24, r24
     bcc:	91 e0       	ldi	r25, 0x01	; 1
     bce:	89 27       	eor	r24, r25
     bd0:	01 c0       	rjmp	.+2      	; 0xbd4 <BMP280_CalcPressure+0x2c8>
     bd2:	80 e0       	ldi	r24, 0x00	; 0
	return (1);
}
     bd4:	df 91       	pop	r29
     bd6:	cf 91       	pop	r28
     bd8:	1f 91       	pop	r17
     bda:	0f 91       	pop	r16
     bdc:	ff 90       	pop	r15
     bde:	ef 90       	pop	r14
     be0:	df 90       	pop	r13
     be2:	cf 90       	pop	r12
     be4:	bf 90       	pop	r11
     be6:	af 90       	pop	r10
     be8:	9f 90       	pop	r9
     bea:	8f 90       	pop	r8
     bec:	7f 90       	pop	r7
     bee:	6f 90       	pop	r6
     bf0:	5f 90       	pop	r5
     bf2:	4f 90       	pop	r4
     bf4:	08 95       	ret

00000bf6 <BMP280_GetTemperatureAndPressure>:
  @brief Gets temperature and pressure
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetTemperatureAndPressure(double *T,double *P){
     bf6:	ef 92       	push	r14
     bf8:	ff 92       	push	r15
     bfa:	0f 93       	push	r16
     bfc:	1f 93       	push	r17
     bfe:	cf 93       	push	r28
     c00:	df 93       	push	r29
     c02:	cd b7       	in	r28, 0x3d	; 61
     c04:	de b7       	in	r29, 0x3e	; 62
     c06:	28 97       	sbiw	r28, 0x08	; 8
     c08:	0f b6       	in	r0, 0x3f	; 63
     c0a:	f8 94       	cli
     c0c:	de bf       	out	0x3e, r29	; 62
     c0e:	0f be       	out	0x3f, r0	; 63
     c10:	cd bf       	out	0x3d, r28	; 61
     c12:	8c 01       	movw	r16, r24
     c14:	7b 01       	movw	r14, r22
	double uP,uT ;
	char result = BMP280_GetUnPT(&uP,&uT);
     c16:	be 01       	movw	r22, r28
     c18:	6b 5f       	subi	r22, 0xFB	; 251
     c1a:	7f 4f       	sbci	r23, 0xFF	; 255
     c1c:	ce 01       	movw	r24, r28
     c1e:	01 96       	adiw	r24, 0x01	; 1
     c20:	0e 94 22 03 	call	0x644	; 0x644 <BMP280_GetUnPT>
	if(result!=0){
     c24:	88 23       	and	r24, r24
     c26:	d1 f0       	breq	.+52     	; 0xc5c <BMP280_GetTemperatureAndPressure+0x66>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
     c28:	be 01       	movw	r22, r28
     c2a:	6b 5f       	subi	r22, 0xFB	; 251
     c2c:	7f 4f       	sbci	r23, 0xFF	; 255
     c2e:	c8 01       	movw	r24, r16
     c30:	0e 94 c4 03 	call	0x788	; 0x788 <BMP280_CalcTemperature>
		if(result){
     c34:	88 23       	and	r24, r24
     c36:	69 f0       	breq	.+26     	; 0xc52 <BMP280_GetTemperatureAndPressure+0x5c>
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
     c38:	be 01       	movw	r22, r28
     c3a:	6f 5f       	subi	r22, 0xFF	; 255
     c3c:	7f 4f       	sbci	r23, 0xFF	; 255
     c3e:	c7 01       	movw	r24, r14
     c40:	0e 94 86 04 	call	0x90c	; 0x90c <BMP280_CalcPressure>
			if(result)return (1);
     c44:	81 11       	cpse	r24, r1
     c46:	0f c0       	rjmp	.+30     	; 0xc66 <BMP280_GetTemperatureAndPressure+0x70>
			else error = 3 ;	// pressure error ;
     c48:	83 e0       	ldi	r24, 0x03	; 3
     c4a:	80 93 b5 03 	sts	0x03B5, r24
			return (0);
     c4e:	80 e0       	ldi	r24, 0x00	; 0
     c50:	0b c0       	rjmp	.+22     	; 0xc68 <BMP280_GetTemperatureAndPressure+0x72>
		}else
		error = 2;	// temperature error ;
     c52:	82 e0       	ldi	r24, 0x02	; 2
     c54:	80 93 b5 03 	sts	0x03B5, r24
	}
	else
	error = 1;
	
	return (0);
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	06 c0       	rjmp	.+12     	; 0xc68 <BMP280_GetTemperatureAndPressure+0x72>
			return (0);
		}else
		error = 2;	// temperature error ;
	}
	else
	error = 1;
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	80 93 b5 03 	sts	0x03B5, r24
	
	return (0);
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	01 c0       	rjmp	.+2      	; 0xc68 <BMP280_GetTemperatureAndPressure+0x72>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
		if(result){
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
			if(result)return (1);
     c66:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	error = 1;
	
	return (0);
}
     c68:	28 96       	adiw	r28, 0x08	; 8
     c6a:	0f b6       	in	r0, 0x3f	; 63
     c6c:	f8 94       	cli
     c6e:	de bf       	out	0x3e, r29	; 62
     c70:	0f be       	out	0x3f, r0	; 63
     c72:	cd bf       	out	0x3d, r28	; 61
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	08 95       	ret

00000c82 <ADC_Init>:

/*************************************************************************//**
  @brief Initializes the ADC
*****************************************************************************/
void ADC_Init(void) {
	ADCSRA = (1<<ADEN)|(4<<ADPS0); //enables the ADC module, CPU clock prescale=16
     c82:	84 e8       	ldi	r24, 0x84	; 132
     c84:	80 93 7a 00 	sts	0x007A, r24
	
	ADCSRC = 0x05|(1<<ADTHT0)|(1<<ADTHT1); //ADSUT=5
     c88:	85 ec       	ldi	r24, 0xC5	; 197
     c8a:	80 93 77 00 	sts	0x0077, r24
	while((ADCSRB&(1<<AVDDOK))==0);
     c8e:	eb e7       	ldi	r30, 0x7B	; 123
     c90:	f0 e0       	ldi	r31, 0x00	; 0
     c92:	80 81       	ld	r24, Z
     c94:	88 23       	and	r24, r24
     c96:	ec f7       	brge	.-6      	; 0xc92 <ADC_Init+0x10>
}
     c98:	08 95       	ret

00000c9a <__vector_13>:
#ifdef ATMEL

static int timer_usage = 0;

ISR(TIMER2_COMPA_vect)
{
     c9a:	1f 92       	push	r1
     c9c:	0f 92       	push	r0
     c9e:	0f b6       	in	r0, 0x3f	; 63
     ca0:	0f 92       	push	r0
     ca2:	11 24       	eor	r1, r1
     ca4:	2f 93       	push	r18
     ca6:	3f 93       	push	r19
     ca8:	4f 93       	push	r20
     caa:	5f 93       	push	r21
     cac:	6f 93       	push	r22
     cae:	7f 93       	push	r23
     cb0:	8f 93       	push	r24
     cb2:	9f 93       	push	r25
     cb4:	af 93       	push	r26
     cb6:	bf 93       	push	r27
     cb8:	ef 93       	push	r30
     cba:	ff 93       	push	r31
	timer_usage ++;
     cbc:	80 91 d6 03 	lds	r24, 0x03D6
     cc0:	90 91 d7 03 	lds	r25, 0x03D7
     cc4:	01 96       	adiw	r24, 0x01	; 1
     cc6:	90 93 d7 03 	sts	0x03D7, r25
     cca:	80 93 d6 03 	sts	0x03D6, r24
	printf("count1 = %d\n",timer_usage);
     cce:	9f 93       	push	r25
     cd0:	8f 93       	push	r24
     cd2:	84 e7       	ldi	r24, 0x74	; 116
     cd4:	92 e0       	ldi	r25, 0x02	; 2
     cd6:	9f 93       	push	r25
     cd8:	8f 93       	push	r24
     cda:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf>
	handle_timeoutq_event();
     cde:	0e 94 ef 0a 	call	0x15de	; 0x15de <handle_timeoutq_event>
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	0f 90       	pop	r0
}
     cea:	ff 91       	pop	r31
     cec:	ef 91       	pop	r30
     cee:	bf 91       	pop	r27
     cf0:	af 91       	pop	r26
     cf2:	9f 91       	pop	r25
     cf4:	8f 91       	pop	r24
     cf6:	7f 91       	pop	r23
     cf8:	6f 91       	pop	r22
     cfa:	5f 91       	pop	r21
     cfc:	4f 91       	pop	r20
     cfe:	3f 91       	pop	r19
     d00:	2f 91       	pop	r18
     d02:	0f 90       	pop	r0
     d04:	0f be       	out	0x3f, r0	; 63
     d06:	0f 90       	pop	r0
     d08:	1f 90       	pop	r1
     d0a:	18 95       	reti

00000d0c <init_Event_Timer>:

/* Initialization Routine Example 3 : Timer 2 Async operation */
/* Clock for Timer 2 is taken from crystal connected to TOSC pins */
void init_Event_Timer(void)
{
	timer_usage = 0;
     d0c:	10 92 d7 03 	sts	0x03D7, r1
     d10:	10 92 d6 03 	sts	0x03D6, r1
	/* Select clock source as crystal on TOSCn pins */
	ASSR |= 1 << AS2;
     d14:	e6 eb       	ldi	r30, 0xB6	; 182
     d16:	f0 e0       	ldi	r31, 0x00	; 0
     d18:	80 81       	ld	r24, Z
     d1a:	80 62       	ori	r24, 0x20	; 32
     d1c:	80 83       	st	Z, r24
	/* Clear Timer on compare match. Toggle OC2A on Compare Match */
	TCCR2A = (1<<COM2A0) | (1<<WGM21);
     d1e:	82 e4       	ldi	r24, 0x42	; 66
     d20:	80 93 b0 00 	sts	0x00B0, r24
	/* Timer Clock = 32768 Hz / 1024 */
	TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
     d24:	87 e0       	ldi	r24, 0x07	; 7
     d26:	80 93 b1 00 	sts	0x00B1, r24
     d2a:	08 95       	ret

00000d2c <init_set_timer>:
}


void general_set_timer( int period_number )
{
    OCR2A = period_number * APERIOD ;
     d2c:	88 0f       	add	r24, r24
     d2e:	88 0f       	add	r24, r24
     d30:	88 0f       	add	r24, r24
     d32:	80 93 b3 00 	sts	0x00B3, r24
{
    general_set_timer( period_number );
    /* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) 
     d36:	e6 eb       	ldi	r30, 0xB6	; 182
     d38:	f0 e0       	ldi	r31, 0x00	; 0
     d3a:	80 81       	ld	r24, Z
     d3c:	8f 71       	andi	r24, 0x1F	; 31
     d3e:	e9 f7       	brne	.-6      	; 0xd3a <init_set_timer+0xe>
		| (1 << TCR2BUB) | (1<< TCN2UB))));
	/* Clear pending interrupts */
	TIFR2  = (1 << TOV2) | (1 << OCF2A) | (1 << OCF2B);
     d40:	87 e0       	ldi	r24, 0x07	; 7
     d42:	87 bb       	out	0x17, r24	; 23
	/* Enable Timer 2 Output Compare Match Interrupt */
	TIMSK2 = (1 << OCIE2A);
     d44:	82 e0       	ldi	r24, 0x02	; 2
     d46:	80 93 70 00 	sts	0x0070, r24
     d4a:	08 95       	ret

00000d4c <set_timer>:
}

void set_timer( int period_number )
{
     d4c:	cf 93       	push	r28
     d4e:	df 93       	push	r29
     d50:	c8 2f       	mov	r28, r24
     d52:	d9 2f       	mov	r29, r25
	printf("set timer gap = %d\n\n", period_number);
     d54:	9f 93       	push	r25
     d56:	8f 93       	push	r24
     d58:	21 e8       	ldi	r18, 0x81	; 129
     d5a:	32 e0       	ldi	r19, 0x02	; 2
     d5c:	3f 93       	push	r19
     d5e:	2f 93       	push	r18
     d60:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf>
    if( timer_usage == 0 )
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	0f 90       	pop	r0
     d6a:	0f 90       	pop	r0
     d6c:	20 91 d6 03 	lds	r18, 0x03D6
     d70:	30 91 d7 03 	lds	r19, 0x03D7
     d74:	23 2b       	or	r18, r19
     d76:	29 f4       	brne	.+10     	; 0xd82 <set_timer+0x36>
    {
        init_set_timer( period_number );
     d78:	8c 2f       	mov	r24, r28
     d7a:	9d 2f       	mov	r25, r29
     d7c:	0e 94 96 06 	call	0xd2c	; 0xd2c <init_set_timer>
     d80:	05 c0       	rjmp	.+10     	; 0xd8c <set_timer+0x40>
}


void general_set_timer( int period_number )
{
    OCR2A = period_number * APERIOD ;
     d82:	cc 0f       	add	r28, r28
     d84:	cc 0f       	add	r28, r28
     d86:	cc 0f       	add	r28, r28
     d88:	c0 93 b3 00 	sts	0x00B3, r28
    }
    else
    {
        general_set_timer( period_number );
    }
}
     d8c:	df 91       	pop	r29
     d8e:	cf 91       	pop	r28
     d90:	08 95       	ret

00000d92 <PWR_Init>:

/*************************************************************************//**
  @brief Initializes the power management system
*****************************************************************************/
void PWR_Init(void){
	DDRD |= 0b11000000;
     d92:	8a b1       	in	r24, 0x0a	; 10
     d94:	80 6c       	ori	r24, 0xC0	; 192
     d96:	8a b9       	out	0x0a, r24	; 10
     d98:	08 95       	ret

00000d9a <PWR_TurnOn5V>:

/*************************************************************************//**
  @brief Turns on the 5V power supply
*****************************************************************************/
void PWR_TurnOn5V(void){
	PORTD |= 0b10000000;
     d9a:	5f 9a       	sbi	0x0b, 7	; 11
     d9c:	08 95       	ret

00000d9e <SPI_SlaveInit>:

unsigned char buffer[16];

void SPI_SlaveInit(void)
{
	DDRB |= (1<<PORTB3); //Set MISO output
     d9e:	23 9a       	sbi	0x04, 3	; 4
	SPCR = (1<<SPE); //Enable SPI
     da0:	80 e4       	ldi	r24, 0x40	; 64
     da2:	8c bd       	out	0x2c, r24	; 44
     da4:	08 95       	ret

00000da6 <TWI_Init>:
/*************************************************************************//**
  @brief Initializes the 2-wire Serial Interface as a master
  @param[in] freq SCL frequency (Do not exceed 400kHz)
  @return Status (@c 0 on failure, nonzero otherwise)
*****************************************************************************/
char TWI_Init(unsigned long freq){
     da6:	9b 01       	movw	r18, r22
     da8:	ac 01       	movw	r20, r24
	//printf("TWI_Init");
	TWSR=0x00;
     daa:	10 92 b9 00 	sts	0x00B9, r1
	TWBR=(unsigned char)(((F_CPU/freq)-16UL)/8UL); //Compute settings value and set frequency
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	74 e2       	ldi	r23, 0x24	; 36
     db2:	84 ef       	ldi	r24, 0xF4	; 244
     db4:	90 e0       	ldi	r25, 0x00	; 0
     db6:	0e 94 31 12 	call	0x2462	; 0x2462 <__udivmodsi4>
     dba:	da 01       	movw	r26, r20
     dbc:	c9 01       	movw	r24, r18
     dbe:	40 97       	sbiw	r24, 0x10	; 16
     dc0:	a1 09       	sbc	r26, r1
     dc2:	b1 09       	sbc	r27, r1
     dc4:	68 94       	set
     dc6:	12 f8       	bld	r1, 2
     dc8:	b6 95       	lsr	r27
     dca:	a7 95       	ror	r26
     dcc:	97 95       	ror	r25
     dce:	87 95       	ror	r24
     dd0:	16 94       	lsr	r1
     dd2:	d1 f7       	brne	.-12     	; 0xdc8 <TWI_Init+0x22>
     dd4:	80 93 b8 00 	sts	0x00B8, r24
	TWCR=(1 << TWEN);
     dd8:	84 e0       	ldi	r24, 0x04	; 4
     dda:	80 93 bc 00 	sts	0x00BC, r24
	
	//TWAR=0; //Disable slave mode
	
	return 1; //May want to actually check for success here
}
     dde:	81 e0       	ldi	r24, 0x01	; 1
     de0:	08 95       	ret

00000de2 <TWI_WriteByte>:
  @param[in] data byte to send
  @return Status code, TWI_SENT_ACK or TWI_SENT_NACK on success
*****************************************************************************/
char TWI_WriteByte(unsigned char data){
	//printf("TWI_WriteByte");
	TWDR = data; //Stage the data to send
     de2:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
     de6:	84 e8       	ldi	r24, 0x84	; 132
     de8:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);//Send the data
     dec:	ec eb       	ldi	r30, 0xBC	; 188
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	88 23       	and	r24, r24
     df4:	ec f7       	brge	.-6      	; 0xdf0 <TWI_WriteByte+0xe>
	
	return TWSR&TWSR_MASK;//Return the status code
     df6:	80 91 b9 00 	lds	r24, 0x00B9
}
     dfa:	88 7f       	andi	r24, 0xF8	; 248
     dfc:	08 95       	ret

00000dfe <TWI_BeginWrite>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAW_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginWrite(unsigned char address){
	//printf("TWI_BeginWrite");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
     dfe:	94 ee       	ldi	r25, 0xE4	; 228
     e00:	90 93 bc 00 	sts	0x00BC, r25
	int i=0;
	while ((TWCR & (1<<TWINT)) == 0);
     e04:	ec eb       	ldi	r30, 0xBC	; 188
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	90 81       	ld	r25, Z
     e0a:	99 23       	and	r25, r25
     e0c:	ec f7       	brge	.-6      	; 0xe08 <TWI_BeginWrite+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e0e:	ef e9       	ldi	r30, 0x9F	; 159
     e10:	ff e0       	ldi	r31, 0x0F	; 15
     e12:	31 97       	sbiw	r30, 0x01	; 1
     e14:	f1 f7       	brne	.-4      	; 0xe12 <TWI_BeginWrite+0x14>
     e16:	00 c0       	rjmp	.+0      	; 0xe18 <TWI_BeginWrite+0x1a>
     e18:	00 00       	nop
	_delay_ms(1);
	char stat = (TWSR & TWSR_MASK);
     e1a:	90 91 b9 00 	lds	r25, 0x00B9
     e1e:	98 7f       	andi	r25, 0xF8	; 248
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
     e20:	98 30       	cpi	r25, 0x08	; 8
     e22:	31 f0       	breq	.+12     	; 0xe30 <TWI_BeginWrite+0x32>
     e24:	90 31       	cpi	r25, 0x10	; 16
     e26:	21 f0       	breq	.+8      	; 0xe30 <TWI_BeginWrite+0x32>
     e28:	80 91 b9 00 	lds	r24, 0x00B9
     e2c:	88 7f       	andi	r24, 0xF8	; 248
     e2e:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) & SLAW_MASK); //reset bit 0 to send a write bit, send
     e30:	88 0f       	add	r24, r24
     e32:	0e 94 f1 06 	call	0xde2	; 0xde2 <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	return stat;//Return the status code
}
     e36:	08 95       	ret

00000e38 <TWI_BeginRead>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAR_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginRead(unsigned char address){
	//printf("TWI_BeginRead");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
     e38:	94 ee       	ldi	r25, 0xE4	; 228
     e3a:	90 93 bc 00 	sts	0x00BC, r25
	while ((TWCR & (1<<TWINT)) == 0);
     e3e:	ec eb       	ldi	r30, 0xBC	; 188
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	90 81       	ld	r25, Z
     e44:	99 23       	and	r25, r25
     e46:	ec f7       	brge	.-6      	; 0xe42 <TWI_BeginRead+0xa>
	
	char stat = (TWSR & TWSR_MASK);
     e48:	90 91 b9 00 	lds	r25, 0x00B9
     e4c:	98 7f       	andi	r25, 0xF8	; 248
	//printf("0x%1x",(unsigned)stat);
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
     e4e:	98 30       	cpi	r25, 0x08	; 8
     e50:	31 f0       	breq	.+12     	; 0xe5e <TWI_BeginRead+0x26>
     e52:	90 31       	cpi	r25, 0x10	; 16
     e54:	21 f0       	breq	.+8      	; 0xe5e <TWI_BeginRead+0x26>
     e56:	80 91 b9 00 	lds	r24, 0x00B9
     e5a:	88 7f       	andi	r24, 0xF8	; 248
     e5c:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) | SLAR_MASK); //set bit 0 to send a read bit and send it
     e5e:	88 0f       	add	r24, r24
     e60:	81 60       	ori	r24, 0x01	; 1
     e62:	0e 94 f1 06 	call	0xde2	; 0xde2 <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	
	return stat;//Return the status code
}
     e66:	08 95       	ret

00000e68 <TWI_ReadAck>:
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_ACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadAck(unsigned char *data){
	//printf("TWI_ReadAck");
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Start receiving, ending with an ACK
     e68:	24 ec       	ldi	r18, 0xC4	; 196
     e6a:	20 93 bc 00 	sts	0x00BC, r18
	while ((TWCR & (1<<TWINT)) == 0);
     e6e:	ec eb       	ldi	r30, 0xBC	; 188
     e70:	f0 e0       	ldi	r31, 0x00	; 0
     e72:	20 81       	ld	r18, Z
     e74:	22 23       	and	r18, r18
     e76:	ec f7       	brge	.-6      	; 0xe72 <TWI_ReadAck+0xa>
	*data=TWDR; //Store the data
     e78:	20 91 bb 00 	lds	r18, 0x00BB
     e7c:	fc 01       	movw	r30, r24
     e7e:	20 83       	st	Z, r18
	
	return TWSR&TWSR_MASK;//Return the status code
     e80:	80 91 b9 00 	lds	r24, 0x00B9
}
     e84:	88 7f       	andi	r24, 0xF8	; 248
     e86:	08 95       	ret

00000e88 <TWI_ReadNack>:
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_NACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadNack(unsigned char *data){
	//printf("TWI_ReadNack");
	TWCR = (1<<TWINT)|(1<<TWEN); //Start receiving, ending with a NACK
     e88:	24 e8       	ldi	r18, 0x84	; 132
     e8a:	20 93 bc 00 	sts	0x00BC, r18
	while ((TWCR & (1<<TWINT)) == 0);
     e8e:	ec eb       	ldi	r30, 0xBC	; 188
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	20 81       	ld	r18, Z
     e94:	22 23       	and	r18, r18
     e96:	ec f7       	brge	.-6      	; 0xe92 <TWI_ReadNack+0xa>
	*data=TWDR; //Store the data
     e98:	20 91 bb 00 	lds	r18, 0x00BB
     e9c:	fc 01       	movw	r30, r24
     e9e:	20 83       	st	Z, r18
	
	return TWSR&TWSR_MASK;//Return the status code
     ea0:	80 91 b9 00 	lds	r24, 0x00B9
}
     ea4:	88 7f       	andi	r24, 0xF8	; 248
     ea6:	08 95       	ret

00000ea8 <TWI_Stop>:
  @brief Sends a Stop bit, be sure to send a Start bit before future interactions on the bus
  @return Status code, should always be nonzero
*****************************************************************************/
char TWI_Stop(void){
	//printf("TWI_Stop");
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     ea8:	84 e9       	ldi	r24, 0x94	; 148
     eaa:	80 93 bc 00 	sts	0x00BC, r24
	return 1;
}
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	08 95       	ret

00000eb2 <TWI_Read>:
  @param[in] amount Number of bytes to recieve
  @param[in] whether or not to send an ACK on the last byte, sends NACK if false
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
     eb2:	9f 92       	push	r9
     eb4:	af 92       	push	r10
     eb6:	bf 92       	push	r11
     eb8:	cf 92       	push	r12
     eba:	df 92       	push	r13
     ebc:	ef 92       	push	r14
     ebe:	ff 92       	push	r15
     ec0:	0f 93       	push	r16
     ec2:	1f 93       	push	r17
     ec4:	cf 93       	push	r28
     ec6:	df 93       	push	r29
     ec8:	7c 01       	movw	r14, r24
     eca:	8b 01       	movw	r16, r22
     ecc:	94 2e       	mov	r9, r20
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
     ece:	16 16       	cp	r1, r22
     ed0:	17 06       	cpc	r1, r23
     ed2:	f4 f4       	brge	.+60     	; 0xf10 <TWI_Read+0x5e>
     ed4:	c0 e0       	ldi	r28, 0x00	; 0
     ed6:	d0 e0       	ldi	r29, 0x00	; 0
		if((ack==false) && ((amount-1)==i)){
     ed8:	6b 01       	movw	r12, r22
     eda:	81 e0       	ldi	r24, 0x01	; 1
     edc:	c8 1a       	sub	r12, r24
     ede:	d1 08       	sbc	r13, r1
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
     ee0:	57 01       	movw	r10, r14
     ee2:	ac 0c       	add	r10, r12
     ee4:	bd 1c       	adc	r11, r13
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
		if((ack==false) && ((amount-1)==i)){
     ee6:	91 10       	cpse	r9, r1
     ee8:	07 c0       	rjmp	.+14     	; 0xef8 <TWI_Read+0x46>
     eea:	cc 16       	cp	r12, r28
     eec:	dd 06       	cpc	r13, r29
     eee:	21 f4       	brne	.+8      	; 0xef8 <TWI_Read+0x46>
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
     ef0:	c5 01       	movw	r24, r10
     ef2:	0e 94 44 07 	call	0xe88	; 0xe88 <TWI_ReadNack>
     ef6:	05 c0       	rjmp	.+10     	; 0xf02 <TWI_Read+0x50>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}else{
			status=TWI_ReadAck(&data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
     ef8:	c7 01       	movw	r24, r14
     efa:	8c 0f       	add	r24, r28
     efc:	9d 1f       	adc	r25, r29
     efe:	0e 94 34 07 	call	0xe68	; 0xe68 <TWI_ReadAck>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}
		//printf("A");
		if(status!=TWI_REC_ACK)return status; //If NACK was selected, returning here is fine since the loop is already ending
     f02:	80 35       	cpi	r24, 0x50	; 80
     f04:	31 f4       	brne	.+12     	; 0xf12 <TWI_Read+0x60>
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
     f06:	21 96       	adiw	r28, 0x01	; 1
     f08:	c0 17       	cp	r28, r16
     f0a:	d1 07       	cpc	r29, r17
     f0c:	61 f7       	brne	.-40     	; 0xee6 <TWI_Read+0x34>
     f0e:	01 c0       	rjmp	.+2      	; 0xf12 <TWI_Read+0x60>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
     f10:	80 e0       	ldi	r24, 0x00	; 0
		//will return if something goes wrong partway through
		//printf("B");
	}
	//printf("0x%1x",(unsigned)status);
	return status;
}
     f12:	df 91       	pop	r29
     f14:	cf 91       	pop	r28
     f16:	1f 91       	pop	r17
     f18:	0f 91       	pop	r16
     f1a:	ff 90       	pop	r15
     f1c:	ef 90       	pop	r14
     f1e:	df 90       	pop	r13
     f20:	cf 90       	pop	r12
     f22:	bf 90       	pop	r11
     f24:	af 90       	pop	r10
     f26:	9f 90       	pop	r9
     f28:	08 95       	ret

00000f2a <TWI_Write>:
  @param[in] *data Pointer to an array of bytes to send
  @param[in] amount Number of bytes to send
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
     f2a:	0f 93       	push	r16
     f2c:	1f 93       	push	r17
     f2e:	cf 93       	push	r28
     f30:	df 93       	push	r29
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
     f32:	16 16       	cp	r1, r22
     f34:	17 06       	cpc	r1, r23
     f36:	6c f4       	brge	.+26     	; 0xf52 <TWI_Write+0x28>
     f38:	ec 01       	movw	r28, r24
     f3a:	8c 01       	movw	r16, r24
     f3c:	06 0f       	add	r16, r22
     f3e:	17 1f       	adc	r17, r23
		status=TWI_WriteByte(data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
     f40:	89 91       	ld	r24, Y+
     f42:	0e 94 f1 06 	call	0xde2	; 0xde2 <TWI_WriteByte>
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
     f46:	88 32       	cpi	r24, 0x28	; 40
     f48:	29 f4       	brne	.+10     	; 0xf54 <TWI_Write+0x2a>
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
     f4a:	c0 17       	cp	r28, r16
     f4c:	d1 07       	cpc	r29, r17
     f4e:	c1 f7       	brne	.-16     	; 0xf40 <TWI_Write+0x16>
     f50:	01 c0       	rjmp	.+2      	; 0xf54 <TWI_Write+0x2a>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
     f52:	80 e0       	ldi	r24, 0x00	; 0
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
		//will return if something goes wrong partway through
	}
	return status;
     f54:	df 91       	pop	r29
     f56:	cf 91       	pop	r28
     f58:	1f 91       	pop	r17
     f5a:	0f 91       	pop	r16
     f5c:	08 95       	ret

00000f5e <USART0_Init>:
  @brief Initializes USART0 in asynchronous UART mode, 8 bit data, 1 stop bit
  @param[in] desired baud rate (configuration values computed using F_CPU)
*****************************************************************************/
void USART0_Init(unsigned long baud){
	
	stdout = &USART0_stdout; //make stdout print to USART0
     f5e:	26 e0       	ldi	r18, 0x06	; 6
     f60:	32 e0       	ldi	r19, 0x02	; 2
     f62:	30 93 33 08 	sts	0x0833, r19
     f66:	20 93 32 08 	sts	0x0832, r18
	
	//Compute UBRR for baudrate setting
	unsigned short ubrr=(unsigned short)((F_CPU/(baud*16UL))-1);
     f6a:	dc 01       	movw	r26, r24
     f6c:	cb 01       	movw	r24, r22
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	aa 1f       	adc	r26, r26
     f74:	bb 1f       	adc	r27, r27
     f76:	88 0f       	add	r24, r24
     f78:	99 1f       	adc	r25, r25
     f7a:	aa 1f       	adc	r26, r26
     f7c:	bb 1f       	adc	r27, r27
     f7e:	9c 01       	movw	r18, r24
     f80:	ad 01       	movw	r20, r26
     f82:	22 0f       	add	r18, r18
     f84:	33 1f       	adc	r19, r19
     f86:	44 1f       	adc	r20, r20
     f88:	55 1f       	adc	r21, r21
     f8a:	22 0f       	add	r18, r18
     f8c:	33 1f       	adc	r19, r19
     f8e:	44 1f       	adc	r20, r20
     f90:	55 1f       	adc	r21, r21
     f92:	60 e0       	ldi	r22, 0x00	; 0
     f94:	74 e2       	ldi	r23, 0x24	; 36
     f96:	84 ef       	ldi	r24, 0xF4	; 244
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 31 12 	call	0x2462	; 0x2462 <__udivmodsi4>
     f9e:	21 50       	subi	r18, 0x01	; 1
     fa0:	31 09       	sbc	r19, r1
	
	//Set BAUD rate.
	UBRR0H = (unsigned char) (ubrr >> 8);
     fa2:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) ubrr;
     fa6:	20 93 c4 00 	sts	0x00C4, r18
	/*Set frame format. 8 data bit(settings bits UCSZ00 and UCSZ01  UCSR0B), 1 stop bit(by default and need not to be worried about). 
	The UCSZ01:0 bits combined with the UCSZ02 bit in UCSR0B sets the number of data
	bits (Character Size) in the frame that the Receiver and Transmitter use. 
	If a change on frame format is needed, make sure to modify UCSR0B register above accordingly.
	See datasheet pg. 390.*/
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
     faa:	86 e0       	ldi	r24, 0x06	; 6
     fac:	80 93 c2 00 	sts	0x00C2, r24
	
	//Enable receiver and transmitter. Enable the USART Receive Complete interrupt(RXCIE).
	//UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0));
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);//Enable RX/TX, no interrupts
     fb0:	88 e1       	ldi	r24, 0x18	; 24
     fb2:	80 93 c1 00 	sts	0x00C1, r24
     fb6:	08 95       	ret

00000fb8 <USART0_Transmit>:
Function contains busy loops for simplicity in debugging. Not production code.
  @brief Transmits a byte via USART0
  @param[in] data byte to be transmitted
*****************************************************************************/
void USART0_Transmit(unsigned char data){
	while(!(UCSR0A & (1 << UDRE0))); //Wait for the empty transmit buffer. (Waiting UDR0 to be empty.)
     fb8:	e0 ec       	ldi	r30, 0xC0	; 192
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	90 81       	ld	r25, Z
     fbe:	95 ff       	sbrs	r25, 5
     fc0:	fd cf       	rjmp	.-6      	; 0xfbc <USART0_Transmit+0x4>
		UDR0 = data;			//store the data in the USART Data Register
     fc2:	80 93 c6 00 	sts	0x00C6, r24
     fc6:	08 95       	ret

00000fc8 <USART0_putchar_printf>:
  @brief Called when stdout is being printed to USART0 (this is set up at runtime)
  @param[in] var byte to transmit
  @param[in/out] *stream Pointer to a stdio.h FILE io stream
  @return Status
*****************************************************************************/
int USART0_putchar_printf(char var, FILE *stream) {
     fc8:	cf 93       	push	r28
     fca:	c8 2f       	mov	r28, r24
	if (var == '\n') USART0_Transmit('\r');
     fcc:	8a 30       	cpi	r24, 0x0A	; 10
     fce:	19 f4       	brne	.+6      	; 0xfd6 <USART0_putchar_printf+0xe>
     fd0:	8d e0       	ldi	r24, 0x0D	; 13
     fd2:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <USART0_Transmit>
	USART0_Transmit(var);
     fd6:	8c 2f       	mov	r24, r28
     fd8:	0e 94 dc 07 	call	0xfb8	; 0xfb8 <USART0_Transmit>
	return 0;
}
     fdc:	80 e0       	ldi	r24, 0x00	; 0
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	cf 91       	pop	r28
     fe2:	08 95       	ret

00000fe4 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     fe4:	14 be       	out	0x34, r1	; 52
  wdt_disable();
     fe6:	88 e1       	ldi	r24, 0x18	; 24
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	80 93 60 00 	sts	0x0060, r24
     ff0:	10 92 60 00 	sts	0x0060, r1
     ff4:	0f be       	out	0x3f, r0	; 63

  CLKPR = 1 << CLKPCE;
     ff6:	e1 e6       	ldi	r30, 0x61	; 97
     ff8:	f0 e0       	ldi	r31, 0x00	; 0
     ffa:	80 e8       	ldi	r24, 0x80	; 128
     ffc:	80 83       	st	Z, r24
  CLKPR = 0;
     ffe:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
    1000:	78 94       	sei

  HAL_TimerInit();
    1002:	0e 94 04 08 	call	0x1008	; 0x1008 <HAL_TimerInit>
    1006:	08 95       	ret

00001008 <HAL_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_TimerInit(void)
{
  halTimerIrqCount = 0;
    1008:	10 92 03 08 	sts	0x0803, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
    100c:	80 e2       	ldi	r24, 0x20	; 32
    100e:	9e e4       	ldi	r25, 0x4E	; 78
    1010:	90 93 a9 00 	sts	0x00A9, r25
    1014:	80 93 a8 00 	sts	0x00A8, r24
  TCCR4B = (1 << WGM12);              // CTC mode
    1018:	e1 ea       	ldi	r30, 0xA1	; 161
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	88 e0       	ldi	r24, 0x08	; 8
    101e:	80 83       	st	Z, r24
  TCCR4B |= (1 << CS11);              // Prescaler 8
    1020:	80 81       	ld	r24, Z
    1022:	82 60       	ori	r24, 0x02	; 2
    1024:	80 83       	st	Z, r24
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
    1026:	e2 e7       	ldi	r30, 0x72	; 114
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	82 60       	ori	r24, 0x02	; 2
    102e:	80 83       	st	Z, r24
    1030:	08 95       	ret

00001032 <__vector_42>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    1032:	1f 92       	push	r1
    1034:	0f 92       	push	r0
    1036:	0f b6       	in	r0, 0x3f	; 63
    1038:	0f 92       	push	r0
    103a:	11 24       	eor	r1, r1
    103c:	8f 93       	push	r24
  halTimerIrqCount++;
    103e:	80 91 03 08 	lds	r24, 0x0803
    1042:	8f 5f       	subi	r24, 0xFF	; 255
    1044:	80 93 03 08 	sts	0x0803, r24
}
    1048:	8f 91       	pop	r24
    104a:	0f 90       	pop	r0
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	0f 90       	pop	r0
    1050:	1f 90       	pop	r1
    1052:	18 95       	reti

00001054 <NWK_Init>:
/*************************************************************************//**
  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
  nwkIb.nwkSeqNum = 0;
    1054:	10 92 08 08 	sts	0x0808, r1
  nwkIb.macSeqNum = 0;
    1058:	10 92 09 08 	sts	0x0809, r1
  nwkIb.addr = 0;
    105c:	10 92 05 08 	sts	0x0805, r1
    1060:	10 92 04 08 	sts	0x0804, r1
  nwkIb.lock = 0;
    1064:	10 92 2b 08 	sts	0x082B, r1
    1068:	10 92 2a 08 	sts	0x082A, r1
    106c:	ea e0       	ldi	r30, 0x0A	; 10
    106e:	f8 e0       	ldi	r31, 0x08	; 8
    1070:	8a e2       	ldi	r24, 0x2A	; 42
    1072:	98 e0       	ldi	r25, 0x08	; 8

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
    nwkIb.endpoint[i] = NULL;
    1074:	11 92       	st	Z+, r1
    1076:	11 92       	st	Z+, r1
  nwkIb.nwkSeqNum = 0;
  nwkIb.macSeqNum = 0;
  nwkIb.addr = 0;
  nwkIb.lock = 0;

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
    1078:	e8 17       	cp	r30, r24
    107a:	f9 07       	cpc	r31, r25
    107c:	d9 f7       	brne	.-10     	; 0x1074 <NWK_Init+0x20>
    nwkIb.endpoint[i] = NULL;

  nwkTxInit();
    107e:	0e 94 3b 09 	call	0x1276	; 0x1276 <nwkTxInit>
  nwkRxInit();
    1082:	0e 94 ae 08 	call	0x115c	; 0x115c <nwkRxInit>
  nwkFrameInit();
    1086:	0e 94 56 08 	call	0x10ac	; 0x10ac <nwkFrameInit>
  nwkDataReqInit();
    108a:	0e 94 51 08 	call	0x10a2	; 0x10a2 <nwkDataReqInit>
    108e:	08 95       	ret

00001090 <NWK_OpenEndpoint>:
  @param[in] id Endpoint index (1-15)
  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
  nwkIb.endpoint[id] = handler;
    1090:	e8 2f       	mov	r30, r24
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	ee 0f       	add	r30, r30
    1096:	ff 1f       	adc	r31, r31
    1098:	e6 5f       	subi	r30, 0xF6	; 246
    109a:	f7 4f       	sbci	r31, 0xF7	; 247
    109c:	71 83       	std	Z+1, r23	; 0x01
    109e:	60 83       	st	Z, r22
    10a0:	08 95       	ret

000010a2 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
    10a2:	10 92 d9 03 	sts	0x03D9, r1
    10a6:	10 92 d8 03 	sts	0x03D8, r1
    10aa:	08 95       	ret

000010ac <nwkFrameInit>:
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    10ac:	10 92 da 03 	sts	0x03DA, r1
    10b0:	10 92 63 04 	sts	0x0463, r1
    10b4:	10 92 ec 04 	sts	0x04EC, r1
    10b8:	10 92 75 05 	sts	0x0575, r1
    10bc:	10 92 fe 05 	sts	0x05FE, r1
    10c0:	08 95       	ret

000010c2 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    10c2:	00 97       	sbiw	r24, 0x00	; 0
    10c4:	41 f0       	breq	.+16     	; 0x10d6 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
    10c6:	fc 01       	movw	r30, r24
    10c8:	e7 57       	subi	r30, 0x77	; 119
    10ca:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    10cc:	86 e0       	ldi	r24, 0x06	; 6
    10ce:	e7 38       	cpi	r30, 0x87	; 135
    10d0:	f8 07       	cpc	r31, r24
    10d2:	18 f0       	brcs	.+6      	; 0x10da <nwkFrameNext+0x18>
    10d4:	12 c0       	rjmp	.+36     	; 0x10fa <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    10d6:	ea ed       	ldi	r30, 0xDA	; 218
    10d8:	f3 e0       	ldi	r31, 0x03	; 3
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    10da:	80 81       	ld	r24, Z
    10dc:	88 23       	and	r24, r24
    10de:	21 f0       	breq	.+8      	; 0x10e8 <nwkFrameNext+0x26>
    10e0:	0f c0       	rjmp	.+30     	; 0x1100 <nwkFrameNext+0x3e>
    10e2:	80 81       	ld	r24, Z
    10e4:	81 11       	cpse	r24, r1
    10e6:	0f c0       	rjmp	.+30     	; 0x1106 <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    10e8:	e7 57       	subi	r30, 0x77	; 119
    10ea:	ff 4f       	sbci	r31, 0xFF	; 255
    10ec:	86 e0       	ldi	r24, 0x06	; 6
    10ee:	e7 38       	cpi	r30, 0x87	; 135
    10f0:	f8 07       	cpc	r31, r24
    10f2:	b8 f3       	brcs	.-18     	; 0x10e2 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	08 95       	ret
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    1100:	8e 2f       	mov	r24, r30
    1102:	9f 2f       	mov	r25, r31
    1104:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1106:	8e 2f       	mov	r24, r30
    1108:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
    110a:	08 95       	ret

0000110c <nwkRxServiceDataInd>:
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    110c:	dc 01       	movw	r26, r24
    110e:	19 96       	adiw	r26, 0x09	; 9
    1110:	2c 91       	ld	r18, X
    1112:	19 97       	sbiw	r26, 0x09	; 9
    1114:	22 23       	and	r18, r18
    1116:	51 f0       	breq	.+20     	; 0x112c <nwkRxServiceDataInd+0x20>
    return false;

  switch (ind->data[0])
    1118:	17 96       	adiw	r26, 0x07	; 7
    111a:	ed 91       	ld	r30, X+
    111c:	fc 91       	ld	r31, X
    111e:	18 97       	sbiw	r26, 0x08	; 8
    1120:	20 81       	ld	r18, Z
    1122:	21 11       	cpse	r18, r1
    1124:	05 c0       	rjmp	.+10     	; 0x1130 <nwkRxServiceDataInd+0x24>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
    1126:	0e 94 68 09 	call	0x12d0	; 0x12d0 <nwkTxAckReceived>
    112a:	08 95       	ret
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    return false;
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	08 95       	ret
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
    1130:	80 e0       	ldi	r24, 0x00	; 0
  }
}
    1132:	08 95       	ret

00001134 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    1134:	e8 e9       	ldi	r30, 0x98	; 152
    1136:	f6 e0       	ldi	r31, 0x06	; 6
    1138:	2a ec       	ldi	r18, 0xCA	; 202
    113a:	36 e0       	ldi	r19, 0x06	; 6
  bool restart = false;
    113c:	50 e0       	ldi	r21, 0x00	; 0
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    113e:	61 e0       	ldi	r22, 0x01	; 1
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    1140:	40 81       	ld	r20, Z
    1142:	44 23       	and	r20, r20
    1144:	19 f0       	breq	.+6      	; 0x114c <nwkRxDuplicateRejectionTimerHandler+0x18>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
    1146:	41 50       	subi	r20, 0x01	; 1
    1148:	40 83       	st	Z, r20
      restart = true;
    114a:	56 2f       	mov	r21, r22
    114c:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    114e:	e2 17       	cp	r30, r18
    1150:	f3 07       	cpc	r31, r19
    1152:	b1 f7       	brne	.-20     	; 0x1140 <nwkRxDuplicateRejectionTimerHandler+0xc>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
    1154:	51 11       	cpse	r21, r1
    SYS_TimerStart(timer);
    1156:	0e 94 ce 0b 	call	0x179c	; 0x179c <SYS_TimerStart>
    115a:	08 95       	ret

0000115c <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    115c:	e8 e9       	ldi	r30, 0x98	; 152
    115e:	f6 e0       	ldi	r31, 0x06	; 6
    1160:	8a ec       	ldi	r24, 0xCA	; 202
    1162:	96 e0       	ldi	r25, 0x06	; 6
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
    1164:	10 82       	st	Z, r1
    1166:	35 96       	adiw	r30, 0x05	; 5
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1168:	e8 17       	cp	r30, r24
    116a:	f9 07       	cpc	r31, r25
    116c:	d9 f7       	brne	.-10     	; 0x1164 <nwkRxInit+0x8>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    116e:	84 e6       	ldi	r24, 0x64	; 100
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	a0 e0       	ldi	r26, 0x00	; 0
    1174:	b0 e0       	ldi	r27, 0x00	; 0
    1176:	80 93 8d 06 	sts	0x068D, r24
    117a:	90 93 8e 06 	sts	0x068E, r25
    117e:	a0 93 8f 06 	sts	0x068F, r26
    1182:	b0 93 90 06 	sts	0x0690, r27
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1186:	10 92 91 06 	sts	0x0691, r1
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
    118a:	8a e9       	ldi	r24, 0x9A	; 154
    118c:	98 e0       	ldi	r25, 0x08	; 8
    118e:	90 93 93 06 	sts	0x0693, r25
    1192:	80 93 92 06 	sts	0x0692, r24

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
    1196:	66 e8       	ldi	r22, 0x86	; 134
    1198:	78 e0       	ldi	r23, 0x08	; 8
    119a:	80 e0       	ldi	r24, 0x00	; 0
    119c:	0e 94 48 08 	call	0x1090	; 0x1090 <NWK_OpenEndpoint>
    11a0:	08 95       	ret

000011a2 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    11a2:	ff 92       	push	r15
    11a4:	0f 93       	push	r16
    11a6:	1f 93       	push	r17
    11a8:	cf 93       	push	r28
    11aa:	df 93       	push	r29
    11ac:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    11ae:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    11b4:	01 e0       	ldi	r16, 0x01	; 1

      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    11b6:	0f 2e       	mov	r0, r31
    11b8:	f3 e1       	ldi	r31, 0x13	; 19
    11ba:	ff 2e       	mov	r15, r31
    11bc:	f0 2d       	mov	r31, r0
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    11be:	13 c0       	rjmp	.+38     	; 0x11e6 <nwkTxDelayTimerHandler+0x44>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    11c0:	fc 01       	movw	r30, r24
    11c2:	20 81       	ld	r18, Z
    11c4:	21 31       	cpi	r18, 0x11	; 17
    11c6:	79 f4       	brne	.+30     	; 0x11e6 <nwkTxDelayTimerHandler+0x44>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    11c8:	ec 57       	subi	r30, 0x7C	; 124
    11ca:	ff 4f       	sbci	r31, 0xFF	; 255
    11cc:	20 81       	ld	r18, Z
    11ce:	31 81       	ldd	r19, Z+1	; 0x01
    11d0:	21 50       	subi	r18, 0x01	; 1
    11d2:	31 09       	sbc	r19, r1
    11d4:	31 83       	std	Z+1, r19	; 0x01
    11d6:	20 83       	st	Z, r18
    11d8:	23 2b       	or	r18, r19
    11da:	21 f4       	brne	.+8      	; 0x11e4 <nwkTxDelayTimerHandler+0x42>
        frame->state = NWK_TX_STATE_SEND;
    11dc:	fc 01       	movw	r30, r24
    11de:	f0 82       	st	Z, r15

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    11e0:	10 2f       	mov	r17, r16
    11e2:	01 c0       	rjmp	.+2      	; 0x11e6 <nwkTxDelayTimerHandler+0x44>
    11e4:	10 2f       	mov	r17, r16
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    11e6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <nwkFrameNext>
    11ea:	00 97       	sbiw	r24, 0x00	; 0
    11ec:	49 f7       	brne	.-46     	; 0x11c0 <nwkTxDelayTimerHandler+0x1e>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
    11ee:	11 23       	and	r17, r17
    11f0:	19 f0       	breq	.+6      	; 0x11f8 <nwkTxDelayTimerHandler+0x56>
    SYS_TimerStart(timer);
    11f2:	ce 01       	movw	r24, r28
    11f4:	0e 94 ce 0b 	call	0x179c	; 0x179c <SYS_TimerStart>
}
    11f8:	df 91       	pop	r29
    11fa:	cf 91       	pop	r28
    11fc:	1f 91       	pop	r17
    11fe:	0f 91       	pop	r16
    1200:	ff 90       	pop	r15
    1202:	08 95       	ret

00001204 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    1204:	ef 92       	push	r14
    1206:	ff 92       	push	r15
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    1212:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    1214:	80 e0       	ldi	r24, 0x00	; 0
    1216:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    1218:	01 e0       	ldi	r16, 0x01	; 1

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    121a:	0f 2e       	mov	r0, r31
    121c:	f7 e1       	ldi	r31, 0x17	; 23
    121e:	ef 2e       	mov	r14, r31
    1220:	f0 2d       	mov	r31, r0
  frame->tx.status = status;
    1222:	68 94       	set
    1224:	ff 24       	eor	r15, r15
    1226:	f4 f8       	bld	r15, 4
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    1228:	16 c0       	rjmp	.+44     	; 0x1256 <nwkTxAckWaitTimerHandler+0x52>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    122a:	fc 01       	movw	r30, r24
    122c:	20 81       	ld	r18, Z
    122e:	26 31       	cpi	r18, 0x16	; 22
    1230:	91 f4       	brne	.+36     	; 0x1256 <nwkTxAckWaitTimerHandler+0x52>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    1232:	ec 57       	subi	r30, 0x7C	; 124
    1234:	ff 4f       	sbci	r31, 0xFF	; 255
    1236:	20 81       	ld	r18, Z
    1238:	31 81       	ldd	r19, Z+1	; 0x01
    123a:	21 50       	subi	r18, 0x01	; 1
    123c:	31 09       	sbc	r19, r1
    123e:	31 83       	std	Z+1, r19	; 0x01
    1240:	20 83       	st	Z, r18
    1242:	23 2b       	or	r18, r19
    1244:	39 f4       	brne	.+14     	; 0x1254 <nwkTxAckWaitTimerHandler+0x50>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    1246:	fc 01       	movw	r30, r24
    1248:	e0 82       	st	Z, r14
  frame->tx.status = status;
    124a:	ed 57       	subi	r30, 0x7D	; 125
    124c:	ff 4f       	sbci	r31, 0xFF	; 255
    124e:	f0 82       	st	Z, r15

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    1250:	10 2f       	mov	r17, r16
    1252:	01 c0       	rjmp	.+2      	; 0x1256 <nwkTxAckWaitTimerHandler+0x52>
    1254:	10 2f       	mov	r17, r16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    1256:	0e 94 61 08 	call	0x10c2	; 0x10c2 <nwkFrameNext>
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	31 f7       	brne	.-52     	; 0x122a <nwkTxAckWaitTimerHandler+0x26>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
    125e:	11 23       	and	r17, r17
    1260:	19 f0       	breq	.+6      	; 0x1268 <nwkTxAckWaitTimerHandler+0x64>
    SYS_TimerStart(timer);
    1262:	ce 01       	movw	r24, r28
    1264:	0e 94 ce 0b 	call	0x179c	; 0x179c <SYS_TimerStart>
}
    1268:	df 91       	pop	r29
    126a:	cf 91       	pop	r28
    126c:	1f 91       	pop	r17
    126e:	0f 91       	pop	r16
    1270:	ff 90       	pop	r15
    1272:	ef 90       	pop	r14
    1274:	08 95       	ret

00001276 <nwkTxInit>:
/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
    1276:	10 92 e1 06 	sts	0x06E1, r1
    127a:	10 92 e0 06 	sts	0x06E0, r1

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    127e:	82 e3       	ldi	r24, 0x32	; 50
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	a0 e0       	ldi	r26, 0x00	; 0
    1284:	b0 e0       	ldi	r27, 0x00	; 0
    1286:	80 93 d9 06 	sts	0x06D9, r24
    128a:	90 93 da 06 	sts	0x06DA, r25
    128e:	a0 93 db 06 	sts	0x06DB, r26
    1292:	b0 93 dc 06 	sts	0x06DC, r27
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1296:	10 92 dd 06 	sts	0x06DD, r1
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    129a:	82 e0       	ldi	r24, 0x02	; 2
    129c:	99 e0       	ldi	r25, 0x09	; 9
    129e:	90 93 df 06 	sts	0x06DF, r25
    12a2:	80 93 de 06 	sts	0x06DE, r24

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    12a6:	8a e0       	ldi	r24, 0x0A	; 10
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	a0 e0       	ldi	r26, 0x00	; 0
    12ac:	b0 e0       	ldi	r27, 0x00	; 0
    12ae:	80 93 cc 06 	sts	0x06CC, r24
    12b2:	90 93 cd 06 	sts	0x06CD, r25
    12b6:	a0 93 ce 06 	sts	0x06CE, r26
    12ba:	b0 93 cf 06 	sts	0x06CF, r27
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    12be:	10 92 d0 06 	sts	0x06D0, r1
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    12c2:	81 ed       	ldi	r24, 0xD1	; 209
    12c4:	98 e0       	ldi	r25, 0x08	; 8
    12c6:	90 93 d2 06 	sts	0x06D2, r25
    12ca:	80 93 d1 06 	sts	0x06D1, r24
    12ce:	08 95       	ret

000012d0 <nwkTxAckReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    12d0:	cf 93       	push	r28
    12d2:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    12d4:	fc 01       	movw	r30, r24
    12d6:	c7 81       	ldd	r28, Z+7	; 0x07
    12d8:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    12da:	81 85       	ldd	r24, Z+9	; 0x09
    12dc:	83 30       	cpi	r24, 0x03	; 3
    12de:	c9 f4       	brne	.+50     	; 0x1312 <nwkTxAckReceived+0x42>
    12e0:	10 c0       	rjmp	.+32     	; 0x1302 <nwkTxAckReceived+0x32>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
    12e2:	fc 01       	movw	r30, r24
    12e4:	20 81       	ld	r18, Z
    12e6:	26 31       	cpi	r18, 0x16	; 22
    12e8:	71 f4       	brne	.+28     	; 0x1306 <nwkTxAckReceived+0x36>
    12ea:	34 85       	ldd	r19, Z+12	; 0x0c
    12ec:	29 81       	ldd	r18, Y+1	; 0x01
    12ee:	32 13       	cpse	r19, r18
    12f0:	0a c0       	rjmp	.+20     	; 0x1306 <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    12f2:	27 e1       	ldi	r18, 0x17	; 23
    12f4:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    12f6:	2a 81       	ldd	r18, Y+2	; 0x02
    12f8:	ea 57       	subi	r30, 0x7A	; 122
    12fa:	ff 4f       	sbci	r31, 0xFF	; 255
    12fc:	20 83       	st	Z, r18
      return true;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	09 c0       	rjmp	.+18     	; 0x1314 <nwkTxAckReceived+0x44>
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	90 e0       	ldi	r25, 0x00	; 0
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
    1306:	0e 94 61 08 	call	0x10c2	; 0x10c2 <nwkFrameNext>
    130a:	00 97       	sbiw	r24, 0x00	; 0
    130c:	51 f7       	brne	.-44     	; 0x12e2 <nwkTxAckReceived+0x12>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	01 c0       	rjmp	.+2      	; 0x1314 <nwkTxAckReceived+0x44>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
    1312:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
    1314:	df 91       	pop	r29
    1316:	cf 91       	pop	r28
    1318:	08 95       	ret

0000131a <phyTrxSetState>:

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
  TRX_STATE_REG = TRX_CMD_FORCE_TRX_OFF;
    131a:	93 e0       	ldi	r25, 0x03	; 3
    131c:	90 93 42 01 	sts	0x0142, r25
  while (TRX_STATUS_TRX_OFF != TRX_STATUS_REG_s.trxStatus);
    1320:	e1 e4       	ldi	r30, 0x41	; 65
    1322:	f1 e0       	ldi	r31, 0x01	; 1
    1324:	90 81       	ld	r25, Z
    1326:	9f 71       	andi	r25, 0x1F	; 31
    1328:	98 30       	cpi	r25, 0x08	; 8
    132a:	e1 f7       	brne	.-8      	; 0x1324 <phyTrxSetState+0xa>

  TRX_STATE_REG = state;
    132c:	80 93 42 01 	sts	0x0142, r24
  while (state != TRX_STATUS_REG_s.trxStatus);
    1330:	e1 e4       	ldi	r30, 0x41	; 65
    1332:	f1 e0       	ldi	r31, 0x01	; 1
    1334:	90 81       	ld	r25, Z
    1336:	9f 71       	andi	r25, 0x1F	; 31
    1338:	98 13       	cpse	r25, r24
    133a:	fc cf       	rjmp	.-8      	; 0x1334 <phyTrxSetState+0x1a>
}
    133c:	08 95       	ret

0000133e <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
    133e:	e9 e3       	ldi	r30, 0x39	; 57
    1340:	f1 e0       	ldi	r31, 0x01	; 1
    1342:	80 81       	ld	r24, Z
    1344:	81 60       	ori	r24, 0x01	; 1
    1346:	80 83       	st	Z, r24

  phyRxState = false;
    1348:	10 92 e3 06 	sts	0x06E3, r1
  phyBand = 0;
    134c:	10 92 e2 06 	sts	0x06E2, r1
  phyState = PHY_STATE_IDLE;
    1350:	81 e0       	ldi	r24, 0x01	; 1
    1352:	80 93 e4 06 	sts	0x06E4, r24

  phyTrxSetState(TRX_CMD_TRX_OFF);
    1356:	88 e0       	ldi	r24, 0x08	; 8
    1358:	0e 94 8d 09 	call	0x131a	; 0x131a <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
    135c:	8b ee       	ldi	r24, 0xEB	; 235
    135e:	80 93 56 01 	sts	0x0156, r24

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
    1362:	ec e4       	ldi	r30, 0x4C	; 76
    1364:	f1 e0       	ldi	r31, 0x01	; 1
    1366:	80 81       	ld	r24, Z
    1368:	80 68       	ori	r24, 0x80	; 128
    136a:	80 83       	st	Z, r24
    136c:	08 95       	ret

0000136e <init_timeoutq>:
/* 
 * like other many stuff, we got an init function
 * fill the freelist with all entries and left the timeoutq empty
 */
void init_timeoutq()
{
    136e:	0f 93       	push	r16
    1370:	1f 93       	push	r17
    1372:	cf 93       	push	r28
    1374:	df 93       	push	r29
	int i;

	timeoutq = (struct event *)&TQ;
    1376:	e7 ef       	ldi	r30, 0xF7	; 247
    1378:	f7 e0       	ldi	r31, 0x07	; 7
    137a:	f0 93 fc 07 	sts	0x07FC, r31
    137e:	e0 93 fb 07 	sts	0x07FB, r30
	LL_INIT(timeoutq);
    1382:	f0 93 fa 07 	sts	0x07FA, r31
    1386:	e0 93 f9 07 	sts	0x07F9, r30
    138a:	f1 83       	std	Z+1, r31	; 0x01
    138c:	e0 83       	st	Z, r30
	freelist = (struct event *)&FL;
    138e:	ed ef       	ldi	r30, 0xFD	; 253
    1390:	f7 e0       	ldi	r31, 0x07	; 7
    1392:	f0 93 02 08 	sts	0x0802, r31
    1396:	e0 93 01 08 	sts	0x0801, r30
	LL_INIT(freelist);
    139a:	f0 93 00 08 	sts	0x0800, r31
    139e:	e0 93 ff 07 	sts	0x07FF, r30
    13a2:	f1 83       	std	Z+1, r31	; 0x01
    13a4:	e0 83       	st	Z, r30
    13a6:	c7 ee       	ldi	r28, 0xE7	; 231
    13a8:	d6 e0       	ldi	r29, 0x06	; 6
    13aa:	07 ef       	ldi	r16, 0xF7	; 247
    13ac:	17 e0       	ldi	r17, 0x07	; 7

	for (i=0; i<MAX_EVENTS; i++) {
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
    13ae:	be 01       	movw	r22, r28
    13b0:	80 91 01 08 	lds	r24, 0x0801
    13b4:	90 91 02 08 	lds	r25, 0x0802
    13b8:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <ll_r_insert>
    13bc:	61 96       	adiw	r28, 0x11	; 17
	timeoutq = (struct event *)&TQ;
	LL_INIT(timeoutq);
	freelist = (struct event *)&FL;
	LL_INIT(freelist);

	for (i=0; i<MAX_EVENTS; i++) {
    13be:	c0 17       	cp	r28, r16
    13c0:	d1 07       	cpc	r29, r17
    13c2:	a9 f7       	brne	.-22     	; 0x13ae <init_timeoutq+0x40>
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
	}

	return;
}
    13c4:	df 91       	pop	r29
    13c6:	cf 91       	pop	r28
    13c8:	1f 91       	pop	r17
    13ca:	0f 91       	pop	r16
    13cc:	08 95       	ret

000013ce <get_next_interval>:
 * return the numbers of period we should launch next
 */
int get_next_interval()
{
	int wait_time = MAX_SLEEP_INTERVAL;
	struct event * ev = ( struct event * ) LL_TOP( timeoutq );
    13ce:	80 91 fb 07 	lds	r24, 0x07FB
    13d2:	90 91 fc 07 	lds	r25, 0x07FC
    13d6:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <ll_first>

    /* no event in queue */
    // TODO : to optimize the sleep time or let the CPU sleep or set up some other interrupts
	if( EV_NULL == ev )
    13da:	00 97       	sbiw	r24, 0x00	; 0
    13dc:	59 f0       	breq	.+22     	; 0x13f4 <get_next_interval+0x26>
	    return wait_time;
	wait_time = ( wait_time > ( ev->timeout ) ) ? ( ev->timeout ) : wait_time ;
    13de:	fc 01       	movw	r30, r24
    13e0:	24 81       	ldd	r18, Z+4	; 0x04
    13e2:	35 81       	ldd	r19, Z+5	; 0x05
    13e4:	25 30       	cpi	r18, 0x05	; 5
    13e6:	31 05       	cpc	r19, r1
    13e8:	14 f0       	brlt	.+4      	; 0x13ee <get_next_interval+0x20>
    13ea:	24 e0       	ldi	r18, 0x04	; 4
    13ec:	30 e0       	ldi	r19, 0x00	; 0
	return wait_time;
    13ee:	82 2f       	mov	r24, r18
    13f0:	93 2f       	mov	r25, r19
    13f2:	08 95       	ret
	struct event * ev = ( struct event * ) LL_TOP( timeoutq );

    /* no event in queue */
    // TODO : to optimize the sleep time or let the CPU sleep or set up some other interrupts
	if( EV_NULL == ev )
	    return wait_time;
    13f4:	84 e0       	ldi	r24, 0x04	; 4
    13f6:	90 e0       	ldi	r25, 0x00	; 0
	wait_time = ( wait_time > ( ev->timeout ) ) ? ( ev->timeout ) : wait_time ;
	return wait_time;
}
    13f8:	08 95       	ret

000013fa <insert_timeoutq_event>:
     */
    return 0;
}

void insert_timeoutq_event( struct event * ep)
{
    13fa:	cf 93       	push	r28
    13fc:	df 93       	push	r29
    13fe:	dc 01       	movw	r26, r24
	// Try to insert it according to timeout and timeoutq
	struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
    1400:	c0 91 fb 07 	lds	r28, 0x07FB
    1404:	d0 91 fc 07 	lds	r29, 0x07FC
    1408:	ea 81       	ldd	r30, Y+2	; 0x02
    140a:	fb 81       	ldd	r31, Y+3	; 0x03
    140c:	ce 17       	cp	r28, r30
    140e:	df 07       	cpc	r29, r31
    1410:	09 f1       	breq	.+66     	; 0x1454 <insert_timeoutq_event+0x5a>
	{
		if( it != EV_NULL )
    1412:	30 97       	sbiw	r30, 0x00	; 0
    1414:	c9 f0       	breq	.+50     	; 0x1448 <insert_timeoutq_event+0x4e>
		{
			if( ( it->timeout ) > ( ep->timeout ) )
    1416:	44 81       	ldd	r20, Z+4	; 0x04
    1418:	55 81       	ldd	r21, Z+5	; 0x05
    141a:	14 96       	adiw	r26, 0x04	; 4
    141c:	2d 91       	ld	r18, X+
    141e:	3c 91       	ld	r19, X
    1420:	15 97       	sbiw	r26, 0x05	; 5
    1422:	24 17       	cp	r18, r20
    1424:	35 07       	cpc	r19, r21
    1426:	54 f4       	brge	.+20     	; 0x143c <insert_timeoutq_event+0x42>
			{
				it->timeout -= ep->timeout;
    1428:	42 1b       	sub	r20, r18
    142a:	53 0b       	sbc	r21, r19
    142c:	55 83       	std	Z+5, r21	; 0x05
    142e:	44 83       	std	Z+4, r20	; 0x04
				LL_L_INSERT( it, ep );
    1430:	bd 01       	movw	r22, r26
    1432:	80 81       	ld	r24, Z
    1434:	91 81       	ldd	r25, Z+1	; 0x01
    1436:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <ll_r_insert>
    143a:	15 c0       	rjmp	.+42     	; 0x1466 <insert_timeoutq_event+0x6c>
				// printf("left insert \n");
				break;
			}
			else
			{
				ep->timeout -= it->timeout;
    143c:	24 1b       	sub	r18, r20
    143e:	35 0b       	sbc	r19, r21
    1440:	15 96       	adiw	r26, 0x05	; 5
    1442:	3c 93       	st	X, r19
    1444:	2e 93       	st	-X, r18
    1446:	14 97       	sbiw	r26, 0x04	; 4
	// Try to insert it according to timeout and timeoutq
	struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
    1448:	02 80       	ldd	r0, Z+2	; 0x02
    144a:	f3 81       	ldd	r31, Z+3	; 0x03
    144c:	e0 2d       	mov	r30, r0
    144e:	ce 17       	cp	r28, r30
    1450:	df 07       	cpc	r29, r31
    1452:	f9 f6       	brne	.-66     	; 0x1412 <insert_timeoutq_event+0x18>
	}
	
	// If not insert it left to the header
	if( is_pushed == 0 )
	{
		LL_APPEND(timeoutq, ep);
    1454:	e0 91 fb 07 	lds	r30, 0x07FB
    1458:	f0 91 fc 07 	lds	r31, 0x07FC
    145c:	bd 01       	movw	r22, r26
    145e:	80 81       	ld	r24, Z
    1460:	91 81       	ldd	r25, Z+1	; 0x01
    1462:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <ll_r_insert>

	#ifdef DEBUG
	// dump_timeoutq();
	#endif

}
    1466:	df 91       	pop	r29
    1468:	cf 91       	pop	r28
    146a:	08 95       	ret

0000146c <run_next>:
#include "scheduler/inc/event.h"
#include "scheduler//inc/scheduler.h"

/* run-next function */
int run_next( struct event *p )
{
    146c:	cf 93       	push	r28
    146e:	df 93       	push	r29
    1470:	ec 01       	movw	r28, r24
	int retNum;
	int data = 0;

	/* sanity check */
	if( p == EV_NULL )
    1472:	00 97       	sbiw	r24, 0x00	; 0
    1474:	59 f4       	brne	.+22     	; 0x148c <run_next+0x20>
	{
		#ifdef DEBUG
		printf("Null Event Error !!!");
    1476:	86 e9       	ldi	r24, 0x96	; 150
    1478:	92 e0       	ldi	r25, 0x02	; 2
    147a:	9f 93       	push	r25
    147c:	8f 93       	push	r24
    147e:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf>
		#endif
		return 0;
    1482:	0f 90       	pop	r0
    1484:	0f 90       	pop	r0
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	70 c0       	rjmp	.+224    	; 0x156c <run_next+0x100>
	}


	#ifdef DEBUG
	printf("cur_state = %d\n", p->cur_state);
    148c:	8e 85       	ldd	r24, Y+14	; 0x0e
    148e:	1f 92       	push	r1
    1490:	8f 93       	push	r24
    1492:	8b ea       	ldi	r24, 0xAB	; 171
    1494:	92 e0       	ldi	r25, 0x02	; 2
    1496:	9f 93       	push	r25
    1498:	8f 93       	push	r24
    149a:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf>
	#endif
	switch( p->cur_state )
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	0f 90       	pop	r0
    14a4:	0f 90       	pop	r0
    14a6:	8e 85       	ldd	r24, Y+14	; 0x0e
    14a8:	81 30       	cpi	r24, 0x01	; 1
    14aa:	51 f0       	breq	.+20     	; 0x14c0 <run_next+0x54>
    14ac:	20 f0       	brcs	.+8      	; 0x14b6 <run_next+0x4a>
    14ae:	82 30       	cpi	r24, 0x02	; 2
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <run_next+0x48>
    14b2:	4a c0       	rjmp	.+148    	; 0x1548 <run_next+0xdc>
    14b4:	59 c0       	rjmp	.+178    	; 0x1568 <run_next+0xfc>
	{
		/* New : not init yet */
		case New :
		// TODO : if retNum not valid go to Oops state
		// retNum = p->sp->vmt->Init();
		p->cur_state = Ready;
    14b6:	81 e0       	ldi	r24, 0x01	; 1
    14b8:	8e 87       	std	Y+14, r24	; 0x0e
		#ifdef DEBUG
		//      printf("Something really wrong happens"\n);
		#endif
		break;
	}
	return 0;
    14ba:	80 e0       	ldi	r24, 0x00	; 0
    14bc:	90 e0       	ldi	r25, 0x00	; 0
		/* New : not init yet */
		case New :
		// TODO : if retNum not valid go to Oops state
		// retNum = p->sp->vmt->Init();
		p->cur_state = Ready;
		break;
    14be:	56 c0       	rjmp	.+172    	; 0x156c <run_next+0x100>
		/* Ready : ready to activate collection preprocess */
		case Ready :
		retNum = p->sp->vmt->request(p->sp);
    14c0:	8a 85       	ldd	r24, Y+10	; 0x0a
    14c2:	9b 85       	ldd	r25, Y+11	; 0x0b
    14c4:	dc 01       	movw	r26, r24
    14c6:	12 96       	adiw	r26, 0x02	; 2
    14c8:	ed 91       	ld	r30, X+
    14ca:	fc 91       	ld	r31, X
    14cc:	13 97       	sbiw	r26, 0x03	; 3
    14ce:	04 80       	ldd	r0, Z+4	; 0x04
    14d0:	f5 81       	ldd	r31, Z+5	; 0x05
    14d2:	e0 2d       	mov	r30, r0
    14d4:	09 95       	icall
		if ( retNum == -1 )
    14d6:	8f 3f       	cpi	r24, 0xFF	; 255
    14d8:	bf ef       	ldi	r27, 0xFF	; 255
    14da:	9b 07       	cpc	r25, r27
    14dc:	29 f4       	brne	.+10     	; 0x14e8 <run_next+0x7c>
		{
			p->cur_state = Oops;
    14de:	84 e0       	ldi	r24, 0x04	; 4
    14e0:	8e 87       	std	Y+14, r24	; 0x0e
		#ifdef DEBUG
		//      printf("Something really wrong happens"\n);
		#endif
		break;
	}
	return 0;
    14e2:	80 e0       	ldi	r24, 0x00	; 0
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	42 c0       	rjmp	.+132    	; 0x156c <run_next+0x100>
		retNum = p->sp->vmt->request(p->sp);
		if ( retNum == -1 )
		{
			p->cur_state = Oops;
		}
		else if( retNum == 0 )
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	e1 f4       	brne	.+56     	; 0x1524 <run_next+0xb8>
		{
			p->cur_state = Ready;
    14ec:	81 e0       	ldi	r24, 0x01	; 1
    14ee:	8e 87       	std	Y+14, r24	; 0x0e
			data = p->sp->vmt->collect(p->sp);
    14f0:	8a 85       	ldd	r24, Y+10	; 0x0a
    14f2:	9b 85       	ldd	r25, Y+11	; 0x0b
    14f4:	dc 01       	movw	r26, r24
    14f6:	12 96       	adiw	r26, 0x02	; 2
    14f8:	ed 91       	ld	r30, X+
    14fa:	fc 91       	ld	r31, X
    14fc:	13 97       	sbiw	r26, 0x03	; 3
    14fe:	06 80       	ldd	r0, Z+6	; 0x06
    1500:	f7 81       	ldd	r31, Z+7	; 0x07
    1502:	e0 2d       	mov	r30, r0
    1504:	09 95       	icall
			#ifdef DEBUG
			printf("data : %d\n", data);
    1506:	9f 93       	push	r25
    1508:	8f 93       	push	r24
    150a:	8b eb       	ldi	r24, 0xBB	; 187
    150c:	92 e0       	ldi	r25, 0x02	; 2
    150e:	9f 93       	push	r25
    1510:	8f 93       	push	r24
    1512:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf>
    1516:	0f 90       	pop	r0
    1518:	0f 90       	pop	r0
    151a:	0f 90       	pop	r0
    151c:	0f 90       	pop	r0
		#ifdef DEBUG
		//      printf("Something really wrong happens"\n);
		#endif
		break;
	}
	return 0;
    151e:	80 e0       	ldi	r24, 0x00	; 0
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	24 c0       	rjmp	.+72     	; 0x156c <run_next+0x100>
			printf("data : %d\n", data);
			#endif
		}
		else
		{
			p->cur_state = Running;
    1524:	22 e0       	ldi	r18, 0x02	; 2
    1526:	2e 87       	std	Y+14, r18	; 0x0e
			p->timeout = retNum;
    1528:	9d 83       	std	Y+5, r25	; 0x05
    152a:	8c 83       	std	Y+4, r24	; 0x04
			p->borrow_timeout = retNum;
    152c:	99 87       	std	Y+9, r25	; 0x09
    152e:	88 87       	std	Y+8, r24	; 0x08
			LL_POP( timeoutq );
    1530:	80 91 fb 07 	lds	r24, 0x07FB
    1534:	90 91 fc 07 	lds	r25, 0x07FC
    1538:	0e 94 1d 0c 	call	0x183a	; 0x183a <ll_pop>
			insert_timeoutq_event( p );
    153c:	ce 01       	movw	r24, r28
    153e:	0e 94 fd 09 	call	0x13fa	; 0x13fa <insert_timeoutq_event>
			return 1;
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	12 c0       	rjmp	.+36     	; 0x156c <run_next+0x100>
		//
		break;
		/* Running : ready to pull data right away */
		case Running :
		//      data = p->sp->vmt->Collect();
		p->cur_state = Ready;
    1548:	81 e0       	ldi	r24, 0x01	; 1
    154a:	8e 87       	std	Y+14, r24	; 0x0e
		p->sp->vmt->collect(p->sp);
    154c:	8a 85       	ldd	r24, Y+10	; 0x0a
    154e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1550:	dc 01       	movw	r26, r24
    1552:	12 96       	adiw	r26, 0x02	; 2
    1554:	ed 91       	ld	r30, X+
    1556:	fc 91       	ld	r31, X
    1558:	13 97       	sbiw	r26, 0x03	; 3
    155a:	06 80       	ldd	r0, Z+6	; 0x06
    155c:	f7 81       	ldd	r31, Z+7	; 0x07
    155e:	e0 2d       	mov	r30, r0
    1560:	09 95       	icall
		#ifdef DEBUG
		//      printf("Something really wrong happens"\n);
		#endif
		break;
	}
	return 0;
    1562:	80 e0       	ldi	r24, 0x00	; 0
    1564:	90 e0       	ldi	r25, 0x00	; 0
		p->cur_state = Ready;
		p->sp->vmt->collect(p->sp);
		#ifdef DEBUG
		//      printf("data : %d\n", data);
		#endif
		break;
    1566:	02 c0       	rjmp	.+4      	; 0x156c <run_next+0x100>
		#ifdef DEBUG
		//      printf("Something really wrong happens"\n);
		#endif
		break;
	}
	return 0;
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	90 e0       	ldi	r25, 0x00	; 0
	
	// TODO : determine which event run next
	// may need to add a state machine in event
	// run function like:
	// p->sp->vmt->Init();
}
    156c:	df 91       	pop	r29
    156e:	cf 91       	pop	r28
    1570:	08 95       	ret

00001572 <load_new_sensor>:

/* 
 * load a brand new sensor activity in the scheduler
 */
int load_new_sensor( int timeout, int repeat, BaseSensor *sensor_ptr, int otherinfo )
{
    1572:	cf 92       	push	r12
    1574:	df 92       	push	r13
    1576:	ef 92       	push	r14
    1578:	ff 92       	push	r15
    157a:	0f 93       	push	r16
    157c:	1f 93       	push	r17
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	6c 01       	movw	r12, r24
    1584:	7b 01       	movw	r14, r22
    1586:	8a 01       	movw	r16, r20
    1588:	e9 01       	movw	r28, r18

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    158a:	80 91 01 08 	lds	r24, 0x0801
    158e:	90 91 02 08 	lds	r25, 0x0802
    1592:	0e 94 1d 0c 	call	0x183a	; 0x183a <ll_pop>
    1596:	fc 01       	movw	r30, r24
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	b1 f0       	breq	.+44     	; 0x15c8 <load_new_sensor+0x56>
        return -1;
    ep->timeout = timeout;
    159c:	d5 82       	std	Z+5, r13	; 0x05
    159e:	c4 82       	std	Z+4, r12	; 0x04
    ep->repeat_interval = repeat;
    15a0:	f7 82       	std	Z+7, r15	; 0x07
    15a2:	e6 82       	std	Z+6, r14	; 0x06
	ep->borrow_timeout = 0;
    15a4:	11 86       	std	Z+9, r1	; 0x09
    15a6:	10 86       	std	Z+8, r1	; 0x08
    ep->sp = sensor_ptr;
    15a8:	13 87       	std	Z+11, r17	; 0x0b
    15aa:	02 87       	std	Z+10, r16	; 0x0a
    ep->info = otherinfo;
    15ac:	d5 87       	std	Z+13, r29	; 0x0d
    15ae:	c4 87       	std	Z+12, r28	; 0x0c
    ep->cur_state = Ready;
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	86 87       	std	Z+14, r24	; 0x0e
    ep->run = run_next;
    15b4:	86 e3       	ldi	r24, 0x36	; 54
    15b6:	9a e0       	ldi	r25, 0x0A	; 10
    15b8:	90 8b       	std	Z+16, r25	; 0x10
    15ba:	87 87       	std	Z+15, r24	; 0x0f
    insert_timeoutq_event( ep );
    15bc:	cf 01       	movw	r24, r30
    15be:	0e 94 fd 09 	call	0x13fa	; 0x13fa <insert_timeoutq_event>
    return 0;
    15c2:	80 e0       	ldi	r24, 0x00	; 0
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <load_new_sensor+0x5a>

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
        return -1;
    15c8:	8f ef       	ldi	r24, 0xFF	; 255
    15ca:	9f ef       	ldi	r25, 0xFF	; 255
    ep->info = otherinfo;
    ep->cur_state = Ready;
    ep->run = run_next;
    insert_timeoutq_event( ep );
    return 0;
}
    15cc:	df 91       	pop	r29
    15ce:	cf 91       	pop	r28
    15d0:	1f 91       	pop	r17
    15d2:	0f 91       	pop	r16
    15d4:	ff 90       	pop	r15
    15d6:	ef 90       	pop	r14
    15d8:	df 90       	pop	r13
    15da:	cf 90       	pop	r12
    15dc:	08 95       	ret

000015de <handle_timeoutq_event>:

/* 
 * handle the next one in timeout queue
 */
int handle_timeoutq_event( )
{
    15de:	cf 93       	push	r28
    15e0:	df 93       	push	r29
	/* assume we get a valid one */
	struct event * ev = (struct event * )LL_TOP( timeoutq );
    15e2:	80 91 fb 07 	lds	r24, 0x07FB
    15e6:	90 91 fc 07 	lds	r25, 0x07FC
    15ea:	0e 94 db 0b 	call	0x17b6	; 0x17b6 <ll_first>
    15ee:	ec 01       	movw	r28, r24
	if( EV_NULL == ev )
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	09 f4       	brne	.+2      	; 0x15f6 <handle_timeoutq_event+0x18>
    15f4:	3f c0       	rjmp	.+126    	; 0x1674 <handle_timeoutq_event+0x96>
    // TODO : add a last_interval var in event_timer.h
    // ev->timeout -= get_later_inerval();
	// if( ev->timeout <= 0 )
    
    /* sanity check */
    if( ev->sp == NULL )
    15f6:	8a 85       	ldd	r24, Y+10	; 0x0a
    15f8:	9b 85       	ldd	r25, Y+11	; 0x0b
    15fa:	89 2b       	or	r24, r25
    15fc:	f1 f1       	breq	.+124    	; 0x167a <handle_timeoutq_event+0x9c>
        return -1;

	/* retNum may need to be designed in other ways */
    int retNum = ev->run( ev );
    15fe:	ef 85       	ldd	r30, Y+15	; 0x0f
    1600:	f8 89       	ldd	r31, Y+16	; 0x10
    1602:	ce 01       	movw	r24, r28
    1604:	09 95       	icall
	if( retNum == 1 )
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	39 f4       	brne	.+14     	; 0x1618 <handle_timeoutq_event+0x3a>
	{
		set_timer(get_next_interval());
    160a:	0e 94 e7 09 	call	0x13ce	; 0x13ce <get_next_interval>
    160e:	0e 94 a6 06 	call	0xd4c	; 0xd4c <set_timer>
		return 0;
    1612:	80 e0       	ldi	r24, 0x00	; 0
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	33 c0       	rjmp	.+102    	; 0x167e <handle_timeoutq_event+0xa0>
	}
	
    // printf("running some function\n");
    LL_POP( timeoutq );
    1618:	80 91 fb 07 	lds	r24, 0x07FB
    161c:	90 91 fc 07 	lds	r25, 0x07FC
    1620:	0e 94 1d 0c 	call	0x183a	; 0x183a <ll_pop>
    if( ev->repeat_interval != 0 )
    1624:	8e 81       	ldd	r24, Y+6	; 0x06
    1626:	9f 81       	ldd	r25, Y+7	; 0x07
    1628:	00 97       	sbiw	r24, 0x00	; 0
    162a:	b1 f0       	breq	.+44     	; 0x1658 <handle_timeoutq_event+0x7a>
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
    162c:	28 85       	ldd	r18, Y+8	; 0x08
    162e:	39 85       	ldd	r19, Y+9	; 0x09
    1630:	ac 01       	movw	r20, r24
    1632:	42 1b       	sub	r20, r18
    1634:	53 0b       	sbc	r21, r19
    1636:	9a 01       	movw	r18, r20
    1638:	5d 83       	std	Y+5, r21	; 0x05
    163a:	4c 83       	std	Y+4, r20	; 0x04
		while( ev->timeout < 0 )
    163c:	55 23       	and	r21, r21
    163e:	34 f4       	brge	.+12     	; 0x164c <handle_timeoutq_event+0x6e>
		{
			ev->timeout += ev->repeat_interval;
    1640:	28 0f       	add	r18, r24
    1642:	39 1f       	adc	r19, r25
    // printf("running some function\n");
    LL_POP( timeoutq );
    if( ev->repeat_interval != 0 )
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
		while( ev->timeout < 0 )
    1644:	33 23       	and	r19, r19
    1646:	e4 f3       	brlt	.-8      	; 0x1640 <handle_timeoutq_event+0x62>
    1648:	3d 83       	std	Y+5, r19	; 0x05
    164a:	2c 83       	std	Y+4, r18	; 0x04
		{
			ev->timeout += ev->repeat_interval;
		}
		ev->borrow_timeout = 0;
    164c:	19 86       	std	Y+9, r1	; 0x09
    164e:	18 86       	std	Y+8, r1	; 0x08
        insert_timeoutq_event( ev );
    1650:	ce 01       	movw	r24, r28
    1652:	0e 94 fd 09 	call	0x13fa	; 0x13fa <insert_timeoutq_event>
    1656:	07 c0       	rjmp	.+14     	; 0x1666 <handle_timeoutq_event+0x88>
    }
    else
    {
        LL_PUSH( freelist, ev );
    1658:	be 01       	movw	r22, r28
    165a:	80 91 01 08 	lds	r24, 0x0801
    165e:	90 91 02 08 	lds	r25, 0x0802
    1662:	0e 94 e7 0b 	call	0x17ce	; 0x17ce <ll_r_insert>
    }
	set_timer(get_next_interval());
    1666:	0e 94 e7 09 	call	0x13ce	; 0x13ce <get_next_interval>
    166a:	0e 94 a6 06 	call	0xd4c	; 0xd4c <set_timer>
    /* TODO : update next event by calling set_timer(int) in Event_timer.h 
     * set_timer( get_next_interval() );
     */
    return 0;
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	90 e0       	ldi	r25, 0x00	; 0
    1672:	05 c0       	rjmp	.+10     	; 0x167e <handle_timeoutq_event+0xa0>
int handle_timeoutq_event( )
{
	/* assume we get a valid one */
	struct event * ev = (struct event * )LL_TOP( timeoutq );
	if( EV_NULL == ev )
        return -1;
    1674:	8f ef       	ldi	r24, 0xFF	; 255
    1676:	9f ef       	ldi	r25, 0xFF	; 255
    1678:	02 c0       	rjmp	.+4      	; 0x167e <handle_timeoutq_event+0xa0>
    // ev->timeout -= get_later_inerval();
	// if( ev->timeout <= 0 )
    
    /* sanity check */
    if( ev->sp == NULL )
        return -1;
    167a:	8f ef       	ldi	r24, 0xFF	; 255
    167c:	9f ef       	ldi	r25, 0xFF	; 255
	set_timer(get_next_interval());
    /* TODO : update next event by calling set_timer(int) in Event_timer.h 
     * set_timer( get_next_interval() );
     */
    return 0;
}
    167e:	df 91       	pop	r29
    1680:	cf 91       	pop	r28
    1682:	08 95       	ret

00001684 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    1684:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <HAL_Init>
  SYS_TimerInit();
    1688:	0e 94 af 0b 	call	0x175e	; 0x175e <SYS_TimerInit>
  PHY_Init();
    168c:	0e 94 9f 09 	call	0x133e	; 0x133e <PHY_Init>
  NWK_Init();
    1690:	0e 94 2a 08 	call	0x1054	; 0x1054 <NWK_Init>
    1694:	08 95       	ret

00001696 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    1696:	0f 93       	push	r16
    1698:	1f 93       	push	r17
    169a:	cf 93       	push	r28
    169c:	df 93       	push	r29
    169e:	ec 01       	movw	r28, r24
  if (timers)
    16a0:	80 91 e5 06 	lds	r24, 0x06E5
    16a4:	90 91 e6 06 	lds	r25, 0x06E6
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	09 f4       	brne	.+2      	; 0x16ae <placeTimer+0x18>
    16ac:	45 c0       	rjmp	.+138    	; 0x1738 <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    16ae:	4e 81       	ldd	r20, Y+6	; 0x06
    16b0:	5f 81       	ldd	r21, Y+7	; 0x07
    16b2:	68 85       	ldd	r22, Y+8	; 0x08
    16b4:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    16b6:	fc 01       	movw	r30, r24
    16b8:	02 81       	ldd	r16, Z+2	; 0x02
    16ba:	13 81       	ldd	r17, Z+3	; 0x03
    16bc:	24 81       	ldd	r18, Z+4	; 0x04
    16be:	35 81       	ldd	r19, Z+5	; 0x05
    16c0:	40 17       	cp	r20, r16
    16c2:	51 07       	cpc	r21, r17
    16c4:	62 07       	cpc	r22, r18
    16c6:	73 07       	cpc	r23, r19
    16c8:	c0 f4       	brcc	.+48     	; 0x16fa <placeTimer+0x64>
    16ca:	0b c0       	rjmp	.+22     	; 0x16e2 <placeTimer+0x4c>
    16cc:	02 81       	ldd	r16, Z+2	; 0x02
    16ce:	13 81       	ldd	r17, Z+3	; 0x03
    16d0:	24 81       	ldd	r18, Z+4	; 0x04
    16d2:	35 81       	ldd	r19, Z+5	; 0x05
    16d4:	40 17       	cp	r20, r16
    16d6:	51 07       	cpc	r21, r17
    16d8:	62 07       	cpc	r22, r18
    16da:	73 07       	cpc	r23, r19
    16dc:	28 f0       	brcs	.+10     	; 0x16e8 <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    16de:	df 01       	movw	r26, r30
    16e0:	0d c0       	rjmp	.+26     	; 0x16fc <placeTimer+0x66>
    16e2:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    16e4:	a0 e0       	ldi	r26, 0x00	; 0
    16e6:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    16e8:	04 1b       	sub	r16, r20
    16ea:	15 0b       	sbc	r17, r21
    16ec:	26 0b       	sbc	r18, r22
    16ee:	37 0b       	sbc	r19, r23
    16f0:	02 83       	std	Z+2, r16	; 0x02
    16f2:	13 83       	std	Z+3, r17	; 0x03
    16f4:	24 83       	std	Z+4, r18	; 0x04
    16f6:	35 83       	std	Z+5, r19	; 0x05
         break;
    16f8:	0a c0       	rjmp	.+20     	; 0x170e <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    16fa:	dc 01       	movw	r26, r24
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    16fc:	40 1b       	sub	r20, r16
    16fe:	51 0b       	sbc	r21, r17
    1700:	62 0b       	sbc	r22, r18
    1702:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1704:	ed 91       	ld	r30, X+
    1706:	fc 91       	ld	r31, X
    1708:	11 97       	sbiw	r26, 0x01	; 1
    170a:	30 97       	sbiw	r30, 0x00	; 0
    170c:	f9 f6       	brne	.-66     	; 0x16cc <placeTimer+0x36>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    170e:	4a 83       	std	Y+2, r20	; 0x02
    1710:	5b 83       	std	Y+3, r21	; 0x03
    1712:	6c 83       	std	Y+4, r22	; 0x04
    1714:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    1716:	10 97       	sbiw	r26, 0x00	; 0
    1718:	41 f0       	breq	.+16     	; 0x172a <placeTimer+0x94>
    {
      timer->next = prev->next;
    171a:	8d 91       	ld	r24, X+
    171c:	9c 91       	ld	r25, X
    171e:	11 97       	sbiw	r26, 0x01	; 1
    1720:	99 83       	std	Y+1, r25	; 0x01
    1722:	88 83       	st	Y, r24
      prev->next = timer;
    1724:	cd 93       	st	X+, r28
    1726:	dc 93       	st	X, r29
    1728:	15 c0       	rjmp	.+42     	; 0x1754 <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    172a:	99 83       	std	Y+1, r25	; 0x01
    172c:	88 83       	st	Y, r24
      timers = timer;
    172e:	d0 93 e6 06 	sts	0x06E6, r29
    1732:	c0 93 e5 06 	sts	0x06E5, r28
    1736:	0e c0       	rjmp	.+28     	; 0x1754 <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    1738:	19 82       	std	Y+1, r1	; 0x01
    173a:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    173c:	8e 81       	ldd	r24, Y+6	; 0x06
    173e:	9f 81       	ldd	r25, Y+7	; 0x07
    1740:	a8 85       	ldd	r26, Y+8	; 0x08
    1742:	b9 85       	ldd	r27, Y+9	; 0x09
    1744:	8a 83       	std	Y+2, r24	; 0x02
    1746:	9b 83       	std	Y+3, r25	; 0x03
    1748:	ac 83       	std	Y+4, r26	; 0x04
    174a:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    174c:	d0 93 e6 06 	sts	0x06E6, r29
    1750:	c0 93 e5 06 	sts	0x06E5, r28
  }
}
    1754:	df 91       	pop	r29
    1756:	cf 91       	pop	r28
    1758:	1f 91       	pop	r17
    175a:	0f 91       	pop	r16
    175c:	08 95       	ret

0000175e <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    175e:	10 92 e6 06 	sts	0x06E6, r1
    1762:	10 92 e5 06 	sts	0x06E5, r1
    1766:	08 95       	ret

00001768 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1768:	e0 91 e5 06 	lds	r30, 0x06E5
    176c:	f0 91 e6 06 	lds	r31, 0x06E6
    1770:	30 97       	sbiw	r30, 0x00	; 0
    1772:	71 f0       	breq	.+28     	; 0x1790 <SYS_TimerStarted+0x28>
    if (t == timer)
    1774:	e8 17       	cp	r30, r24
    1776:	f9 07       	cpc	r31, r25
    1778:	21 f4       	brne	.+8      	; 0x1782 <SYS_TimerStarted+0x1a>
    177a:	0c c0       	rjmp	.+24     	; 0x1794 <SYS_TimerStarted+0x2c>
    177c:	8e 17       	cp	r24, r30
    177e:	9f 07       	cpc	r25, r31
    1780:	59 f0       	breq	.+22     	; 0x1798 <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1782:	01 90       	ld	r0, Z+
    1784:	f0 81       	ld	r31, Z
    1786:	e0 2d       	mov	r30, r0
    1788:	30 97       	sbiw	r30, 0x00	; 0
    178a:	c1 f7       	brne	.-16     	; 0x177c <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	08 95       	ret
    1790:	80 e0       	ldi	r24, 0x00	; 0
    1792:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	08 95       	ret
    1798:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    179a:	08 95       	ret

0000179c <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    17a2:	0e 94 b4 0b 	call	0x1768	; 0x1768 <SYS_TimerStarted>
    17a6:	81 11       	cpse	r24, r1
    17a8:	03 c0       	rjmp	.+6      	; 0x17b0 <SYS_TimerStart+0x14>
    placeTimer(timer);
    17aa:	ce 01       	movw	r24, r28
    17ac:	0e 94 4b 0b 	call	0x1696	; 0x1696 <placeTimer>
}
    17b0:	df 91       	pop	r29
    17b2:	cf 91       	pop	r28
    17b4:	08 95       	ret

000017b6 <ll_first>:
 */
llobject_t *
ll_first(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
    17b6:	fc 01       	movw	r30, r24
    17b8:	22 81       	ldd	r18, Z+2	; 0x02
    17ba:	33 81       	ldd	r19, Z+3	; 0x03
    17bc:	28 17       	cp	r18, r24
    17be:	39 07       	cpc	r19, r25
    17c0:	19 f4       	brne	.+6      	; 0x17c8 <ll_first+0x12>
		return LL_NULL;
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	08 95       	ret
    }
    return lp->next;
    17c8:	82 2f       	mov	r24, r18
    17ca:	93 2f       	mov	r25, r19
}
    17cc:	08 95       	ret

000017ce <ll_r_insert>:
llobject_t *
ll_r_insert(ip, ep)
llobject_t *ip;
llobject_t *ep;
{
    llobject_t *tp = ip->next;
    17ce:	dc 01       	movw	r26, r24
    17d0:	12 96       	adiw	r26, 0x02	; 2
    17d2:	ed 91       	ld	r30, X+
    17d4:	fc 91       	ld	r31, X
    17d6:	13 97       	sbiw	r26, 0x03	; 3

    tp->prev = ep;
    17d8:	71 83       	std	Z+1, r23	; 0x01
    17da:	60 83       	st	Z, r22
    ep->next = tp;
    17dc:	db 01       	movw	r26, r22
    17de:	13 96       	adiw	r26, 0x03	; 3
    17e0:	fc 93       	st	X, r31
    17e2:	ee 93       	st	-X, r30
    17e4:	12 97       	sbiw	r26, 0x02	; 2
    ip->next = ep;
    17e6:	fc 01       	movw	r30, r24
    17e8:	73 83       	std	Z+3, r23	; 0x03
    17ea:	62 83       	std	Z+2, r22	; 0x02
    ep->prev = ip;
    17ec:	8d 93       	st	X+, r24
    17ee:	9c 93       	st	X, r25

    return ep;
}
    17f0:	cb 01       	movw	r24, r22
    17f2:	08 95       	ret

000017f4 <ll_detach>:
 */
llobject_t *
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    17f4:	fb 01       	movw	r30, r22
    if (LL_IS_EMPTY(lp) || lp == ep) {
    17f6:	dc 01       	movw	r26, r24
    17f8:	12 96       	adiw	r26, 0x02	; 2
    17fa:	2d 91       	ld	r18, X+
    17fc:	3c 91       	ld	r19, X
    17fe:	13 97       	sbiw	r26, 0x03	; 3
    1800:	28 17       	cp	r18, r24
    1802:	39 07       	cpc	r19, r25
    1804:	a1 f0       	breq	.+40     	; 0x182e <ll_detach+0x3a>
    1806:	86 17       	cp	r24, r22
    1808:	97 07       	cpc	r25, r23
    180a:	a1 f0       	breq	.+40     	; 0x1834 <ll_detach+0x40>
		return LL_NULL;
    }

    (ep->prev)->next = ep->next;
    180c:	a0 81       	ld	r26, Z
    180e:	b1 81       	ldd	r27, Z+1	; 0x01
    1810:	82 81       	ldd	r24, Z+2	; 0x02
    1812:	93 81       	ldd	r25, Z+3	; 0x03
    1814:	13 96       	adiw	r26, 0x03	; 3
    1816:	9c 93       	st	X, r25
    1818:	8e 93       	st	-X, r24
    181a:	12 97       	sbiw	r26, 0x02	; 2
    (ep->next)->prev = ep->prev;
    181c:	a2 81       	ldd	r26, Z+2	; 0x02
    181e:	b3 81       	ldd	r27, Z+3	; 0x03
    1820:	80 81       	ld	r24, Z
    1822:	91 81       	ldd	r25, Z+1	; 0x01
    1824:	8d 93       	st	X+, r24
    1826:	9c 93       	st	X, r25

    return ep;
    1828:	86 2f       	mov	r24, r22
    182a:	9f 2f       	mov	r25, r31
    182c:	08 95       	ret
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    if (LL_IS_EMPTY(lp) || lp == ep) {
		return LL_NULL;
    182e:	80 e0       	ldi	r24, 0x00	; 0
    1830:	90 e0       	ldi	r25, 0x00	; 0
    1832:	08 95       	ret
    1834:	80 e0       	ldi	r24, 0x00	; 0
    1836:	90 e0       	ldi	r25, 0x00	; 0

    (ep->prev)->next = ep->next;
    (ep->next)->prev = ep->prev;

    return ep;
}
    1838:	08 95       	ret

0000183a <ll_pop>:
 */
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
    183a:	fc 01       	movw	r30, r24
    183c:	62 81       	ldd	r22, Z+2	; 0x02
    183e:	73 81       	ldd	r23, Z+3	; 0x03
    1840:	68 17       	cp	r22, r24
    1842:	79 07       	cpc	r23, r25
    1844:	19 f0       	breq	.+6      	; 0x184c <ll_pop+0x12>
		return LL_NULL;
    }
    return LL_DETACH(lp, lp->next);
    1846:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <ll_detach>
    184a:	08 95       	ret
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
		return LL_NULL;
    184c:	80 e0       	ldi	r24, 0x00	; 0
    184e:	90 e0       	ldi	r25, 0x00	; 0
    }
    return LL_DETACH(lp, lp->next);
}
    1850:	08 95       	ret

00001852 <BMP280_FctnInit>:

BMP280_FctnTable BMP280_vmt = { BMP280_FctnInit, BMP280_init, BMP280_Configure, BMP280_request, BMP280_Collect, BMP280_Error };

void BMP280_FctnInit(BMP280Sensor *this)
{
	this->inherited.vmt = &BMP280_vmt;
    1852:	24 e1       	ldi	r18, 0x14	; 20
    1854:	32 e0       	ldi	r19, 0x02	; 2
    1856:	fc 01       	movw	r30, r24
    1858:	33 83       	std	Z+3, r19	; 0x03
    185a:	22 83       	std	Z+2, r18	; 0x02
    185c:	08 95       	ret

0000185e <BMP280_init>:
}

int BMP280_init(BMP280Sensor *this )
{
	this->inherited.test_num = 10;
    185e:	2a e0       	ldi	r18, 0x0A	; 10
    1860:	30 e0       	ldi	r19, 0x00	; 0
    1862:	fc 01       	movw	r30, r24
    1864:	31 83       	std	Z+1, r19	; 0x01
    1866:	20 83       	st	Z, r18
	return 0;
}
    1868:	80 e0       	ldi	r24, 0x00	; 0
    186a:	90 e0       	ldi	r25, 0x00	; 0
    186c:	08 95       	ret

0000186e <BMP280_Configure>:

int BMP280_Configure(BMP280Sensor *this )
{
	printf("BMP280_Configure\n");
    186e:	8e e4       	ldi	r24, 0x4E	; 78
    1870:	93 e0       	ldi	r25, 0x03	; 3
    1872:	0e 94 e5 14 	call	0x29ca	; 0x29ca <puts>
	// virtual function
	return 0;
}
    1876:	80 e0       	ldi	r24, 0x00	; 0
    1878:	90 e0       	ldi	r25, 0x00	; 0
    187a:	08 95       	ret

0000187c <BMP280_Error>:
	return 0;
}

int BMP280_Error(BMP280Sensor *this )
{
	printf("BMP280_Error\n");
    187c:	8f e5       	ldi	r24, 0x5F	; 95
    187e:	93 e0       	ldi	r25, 0x03	; 3
    1880:	0e 94 e5 14 	call	0x29ca	; 0x29ca <puts>
	return 0;
}
    1884:	80 e0       	ldi	r24, 0x00	; 0
    1886:	90 e0       	ldi	r25, 0x00	; 0
    1888:	08 95       	ret

0000188a <BMP280_request>:
	return 0;
}

int BMP280_request(BMP280Sensor *this )
{
	printf("BMP280_PreProcessing\n");
    188a:	8c e6       	ldi	r24, 0x6C	; 108
    188c:	93 e0       	ldi	r25, 0x03	; 3
    188e:	0e 94 e5 14 	call	0x29ca	; 0x29ca <puts>
	int Delay = BMP280_StartMeasurment();
    1892:	0e 94 b8 02 	call	0x570	; 0x570 <BMP280_StartMeasurment>
	if( Delay == 0 )
    1896:	81 11       	cpse	r24, r1
    1898:	03 c0       	rjmp	.+6      	; 0x18a0 <BMP280_request+0x16>
		return 0;
    189a:	80 e0       	ldi	r24, 0x00	; 0
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	08 95       	ret
	else
		return 2;
    18a0:	82 e0       	ldi	r24, 0x02	; 2
    18a2:	90 e0       	ldi	r25, 0x00	; 0
}
    18a4:	08 95       	ret

000018a6 <BMP280_Collect>:

int BMP280_Collect(BMP280Sensor *this )
{
    18a6:	cf 93       	push	r28
    18a8:	df 93       	push	r29
    18aa:	cd b7       	in	r28, 0x3d	; 61
    18ac:	de b7       	in	r29, 0x3e	; 62
    18ae:	28 97       	sbiw	r28, 0x08	; 8
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	f8 94       	cli
    18b4:	de bf       	out	0x3e, r29	; 62
    18b6:	0f be       	out	0x3f, r0	; 63
    18b8:	cd bf       	out	0x3d, r28	; 61
	printf("BMP280_Collect\n");
    18ba:	81 e8       	ldi	r24, 0x81	; 129
    18bc:	93 e0       	ldi	r25, 0x03	; 3
    18be:	0e 94 e5 14 	call	0x29ca	; 0x29ca <puts>
	double T, P;
	BMP280_GetTemperatureAndPressure(&T,&P);
    18c2:	be 01       	movw	r22, r28
    18c4:	6b 5f       	subi	r22, 0xFB	; 251
    18c6:	7f 4f       	sbci	r23, 0xFF	; 255
    18c8:	ce 01       	movw	r24, r28
    18ca:	01 96       	adiw	r24, 0x01	; 1
    18cc:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <BMP280_GetTemperatureAndPressure>
	printf("Temperature = %.3f\nHumility = %.3f\n",T,P);
    18d0:	88 85       	ldd	r24, Y+8	; 0x08
    18d2:	8f 93       	push	r24
    18d4:	8f 81       	ldd	r24, Y+7	; 0x07
    18d6:	8f 93       	push	r24
    18d8:	8e 81       	ldd	r24, Y+6	; 0x06
    18da:	8f 93       	push	r24
    18dc:	8d 81       	ldd	r24, Y+5	; 0x05
    18de:	8f 93       	push	r24
    18e0:	8c 81       	ldd	r24, Y+4	; 0x04
    18e2:	8f 93       	push	r24
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	8f 93       	push	r24
    18e8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ea:	8f 93       	push	r24
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	8f 93       	push	r24
    18f0:	80 e9       	ldi	r24, 0x90	; 144
    18f2:	93 e0       	ldi	r25, 0x03	; 3
    18f4:	9f 93       	push	r25
    18f6:	8f 93       	push	r24
    18f8:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <printf>
	return 0;
    18fc:	0f b6       	in	r0, 0x3f	; 63
    18fe:	f8 94       	cli
    1900:	de bf       	out	0x3e, r29	; 62
    1902:	0f be       	out	0x3f, r0	; 63
    1904:	cd bf       	out	0x3d, r28	; 61
}
    1906:	80 e0       	ldi	r24, 0x00	; 0
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	28 96       	adiw	r28, 0x08	; 8
    190c:	0f b6       	in	r0, 0x3f	; 63
    190e:	f8 94       	cli
    1910:	de bf       	out	0x3e, r29	; 62
    1912:	0f be       	out	0x3f, r0	; 63
    1914:	cd bf       	out	0x3d, r28	; 61
    1916:	df 91       	pop	r29
    1918:	cf 91       	pop	r28
    191a:	08 95       	ret

0000191c <New_BMP280_Sensor>:
	printf("BMP280_Error\n");
	return 0;
}

BMP280Sensor* New_BMP280_Sensor( int num)
{
    191c:	cf 93       	push	r28
    191e:	df 93       	push	r29
    1920:	ec 01       	movw	r28, r24
	BMP280Sensor *p = malloc(sizeof(BMP280Sensor));
    1922:	86 e0       	ldi	r24, 0x06	; 6
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	0e 94 8a 12 	call	0x2514	; 0x2514 <malloc>
	p->inherited.test_num = num;
    192a:	fc 01       	movw	r30, r24
    192c:	d1 83       	std	Z+1, r29	; 0x01
    192e:	c0 83       	st	Z, r28
	return p;
    1930:	df 91       	pop	r29
    1932:	cf 91       	pop	r28
    1934:	08 95       	ret

00001936 <__subsf3>:
    1936:	50 58       	subi	r21, 0x80	; 128

00001938 <__addsf3>:
    1938:	bb 27       	eor	r27, r27
    193a:	aa 27       	eor	r26, r26
    193c:	0e d0       	rcall	.+28     	; 0x195a <__addsf3x>
    193e:	75 c1       	rjmp	.+746    	; 0x1c2a <__fp_round>
    1940:	66 d1       	rcall	.+716    	; 0x1c0e <__fp_pscA>
    1942:	30 f0       	brcs	.+12     	; 0x1950 <__addsf3+0x18>
    1944:	6b d1       	rcall	.+726    	; 0x1c1c <__fp_pscB>
    1946:	20 f0       	brcs	.+8      	; 0x1950 <__addsf3+0x18>
    1948:	31 f4       	brne	.+12     	; 0x1956 <__addsf3+0x1e>
    194a:	9f 3f       	cpi	r25, 0xFF	; 255
    194c:	11 f4       	brne	.+4      	; 0x1952 <__addsf3+0x1a>
    194e:	1e f4       	brtc	.+6      	; 0x1956 <__addsf3+0x1e>
    1950:	5b c1       	rjmp	.+694    	; 0x1c08 <__fp_nan>
    1952:	0e f4       	brtc	.+2      	; 0x1956 <__addsf3+0x1e>
    1954:	e0 95       	com	r30
    1956:	e7 fb       	bst	r30, 7
    1958:	51 c1       	rjmp	.+674    	; 0x1bfc <__fp_inf>

0000195a <__addsf3x>:
    195a:	e9 2f       	mov	r30, r25
    195c:	77 d1       	rcall	.+750    	; 0x1c4c <__fp_split3>
    195e:	80 f3       	brcs	.-32     	; 0x1940 <__addsf3+0x8>
    1960:	ba 17       	cp	r27, r26
    1962:	62 07       	cpc	r22, r18
    1964:	73 07       	cpc	r23, r19
    1966:	84 07       	cpc	r24, r20
    1968:	95 07       	cpc	r25, r21
    196a:	18 f0       	brcs	.+6      	; 0x1972 <__addsf3x+0x18>
    196c:	71 f4       	brne	.+28     	; 0x198a <__addsf3x+0x30>
    196e:	9e f5       	brtc	.+102    	; 0x19d6 <__addsf3x+0x7c>
    1970:	8f c1       	rjmp	.+798    	; 0x1c90 <__fp_zero>
    1972:	0e f4       	brtc	.+2      	; 0x1976 <__addsf3x+0x1c>
    1974:	e0 95       	com	r30
    1976:	0b 2e       	mov	r0, r27
    1978:	ba 2f       	mov	r27, r26
    197a:	a0 2d       	mov	r26, r0
    197c:	0b 01       	movw	r0, r22
    197e:	b9 01       	movw	r22, r18
    1980:	90 01       	movw	r18, r0
    1982:	0c 01       	movw	r0, r24
    1984:	ca 01       	movw	r24, r20
    1986:	a0 01       	movw	r20, r0
    1988:	11 24       	eor	r1, r1
    198a:	ff 27       	eor	r31, r31
    198c:	59 1b       	sub	r21, r25
    198e:	99 f0       	breq	.+38     	; 0x19b6 <__addsf3x+0x5c>
    1990:	59 3f       	cpi	r21, 0xF9	; 249
    1992:	50 f4       	brcc	.+20     	; 0x19a8 <__addsf3x+0x4e>
    1994:	50 3e       	cpi	r21, 0xE0	; 224
    1996:	68 f1       	brcs	.+90     	; 0x19f2 <__addsf3x+0x98>
    1998:	1a 16       	cp	r1, r26
    199a:	f0 40       	sbci	r31, 0x00	; 0
    199c:	a2 2f       	mov	r26, r18
    199e:	23 2f       	mov	r18, r19
    19a0:	34 2f       	mov	r19, r20
    19a2:	44 27       	eor	r20, r20
    19a4:	58 5f       	subi	r21, 0xF8	; 248
    19a6:	f3 cf       	rjmp	.-26     	; 0x198e <__addsf3x+0x34>
    19a8:	46 95       	lsr	r20
    19aa:	37 95       	ror	r19
    19ac:	27 95       	ror	r18
    19ae:	a7 95       	ror	r26
    19b0:	f0 40       	sbci	r31, 0x00	; 0
    19b2:	53 95       	inc	r21
    19b4:	c9 f7       	brne	.-14     	; 0x19a8 <__addsf3x+0x4e>
    19b6:	7e f4       	brtc	.+30     	; 0x19d6 <__addsf3x+0x7c>
    19b8:	1f 16       	cp	r1, r31
    19ba:	ba 0b       	sbc	r27, r26
    19bc:	62 0b       	sbc	r22, r18
    19be:	73 0b       	sbc	r23, r19
    19c0:	84 0b       	sbc	r24, r20
    19c2:	ba f0       	brmi	.+46     	; 0x19f2 <__addsf3x+0x98>
    19c4:	91 50       	subi	r25, 0x01	; 1
    19c6:	a1 f0       	breq	.+40     	; 0x19f0 <__addsf3x+0x96>
    19c8:	ff 0f       	add	r31, r31
    19ca:	bb 1f       	adc	r27, r27
    19cc:	66 1f       	adc	r22, r22
    19ce:	77 1f       	adc	r23, r23
    19d0:	88 1f       	adc	r24, r24
    19d2:	c2 f7       	brpl	.-16     	; 0x19c4 <__addsf3x+0x6a>
    19d4:	0e c0       	rjmp	.+28     	; 0x19f2 <__addsf3x+0x98>
    19d6:	ba 0f       	add	r27, r26
    19d8:	62 1f       	adc	r22, r18
    19da:	73 1f       	adc	r23, r19
    19dc:	84 1f       	adc	r24, r20
    19de:	48 f4       	brcc	.+18     	; 0x19f2 <__addsf3x+0x98>
    19e0:	87 95       	ror	r24
    19e2:	77 95       	ror	r23
    19e4:	67 95       	ror	r22
    19e6:	b7 95       	ror	r27
    19e8:	f7 95       	ror	r31
    19ea:	9e 3f       	cpi	r25, 0xFE	; 254
    19ec:	08 f0       	brcs	.+2      	; 0x19f0 <__addsf3x+0x96>
    19ee:	b3 cf       	rjmp	.-154    	; 0x1956 <__addsf3+0x1e>
    19f0:	93 95       	inc	r25
    19f2:	88 0f       	add	r24, r24
    19f4:	08 f0       	brcs	.+2      	; 0x19f8 <__addsf3x+0x9e>
    19f6:	99 27       	eor	r25, r25
    19f8:	ee 0f       	add	r30, r30
    19fa:	97 95       	ror	r25
    19fc:	87 95       	ror	r24
    19fe:	08 95       	ret

00001a00 <__cmpsf2>:
    1a00:	d9 d0       	rcall	.+434    	; 0x1bb4 <__fp_cmp>
    1a02:	08 f4       	brcc	.+2      	; 0x1a06 <__cmpsf2+0x6>
    1a04:	81 e0       	ldi	r24, 0x01	; 1
    1a06:	08 95       	ret

00001a08 <__divsf3>:
    1a08:	0c d0       	rcall	.+24     	; 0x1a22 <__divsf3x>
    1a0a:	0f c1       	rjmp	.+542    	; 0x1c2a <__fp_round>
    1a0c:	07 d1       	rcall	.+526    	; 0x1c1c <__fp_pscB>
    1a0e:	40 f0       	brcs	.+16     	; 0x1a20 <__divsf3+0x18>
    1a10:	fe d0       	rcall	.+508    	; 0x1c0e <__fp_pscA>
    1a12:	30 f0       	brcs	.+12     	; 0x1a20 <__divsf3+0x18>
    1a14:	21 f4       	brne	.+8      	; 0x1a1e <__divsf3+0x16>
    1a16:	5f 3f       	cpi	r21, 0xFF	; 255
    1a18:	19 f0       	breq	.+6      	; 0x1a20 <__divsf3+0x18>
    1a1a:	f0 c0       	rjmp	.+480    	; 0x1bfc <__fp_inf>
    1a1c:	51 11       	cpse	r21, r1
    1a1e:	39 c1       	rjmp	.+626    	; 0x1c92 <__fp_szero>
    1a20:	f3 c0       	rjmp	.+486    	; 0x1c08 <__fp_nan>

00001a22 <__divsf3x>:
    1a22:	14 d1       	rcall	.+552    	; 0x1c4c <__fp_split3>
    1a24:	98 f3       	brcs	.-26     	; 0x1a0c <__divsf3+0x4>

00001a26 <__divsf3_pse>:
    1a26:	99 23       	and	r25, r25
    1a28:	c9 f3       	breq	.-14     	; 0x1a1c <__divsf3+0x14>
    1a2a:	55 23       	and	r21, r21
    1a2c:	b1 f3       	breq	.-20     	; 0x1a1a <__divsf3+0x12>
    1a2e:	95 1b       	sub	r25, r21
    1a30:	55 0b       	sbc	r21, r21
    1a32:	bb 27       	eor	r27, r27
    1a34:	aa 27       	eor	r26, r26
    1a36:	62 17       	cp	r22, r18
    1a38:	73 07       	cpc	r23, r19
    1a3a:	84 07       	cpc	r24, r20
    1a3c:	38 f0       	brcs	.+14     	; 0x1a4c <__divsf3_pse+0x26>
    1a3e:	9f 5f       	subi	r25, 0xFF	; 255
    1a40:	5f 4f       	sbci	r21, 0xFF	; 255
    1a42:	22 0f       	add	r18, r18
    1a44:	33 1f       	adc	r19, r19
    1a46:	44 1f       	adc	r20, r20
    1a48:	aa 1f       	adc	r26, r26
    1a4a:	a9 f3       	breq	.-22     	; 0x1a36 <__divsf3_pse+0x10>
    1a4c:	33 d0       	rcall	.+102    	; 0x1ab4 <__divsf3_pse+0x8e>
    1a4e:	0e 2e       	mov	r0, r30
    1a50:	3a f0       	brmi	.+14     	; 0x1a60 <__divsf3_pse+0x3a>
    1a52:	e0 e8       	ldi	r30, 0x80	; 128
    1a54:	30 d0       	rcall	.+96     	; 0x1ab6 <__divsf3_pse+0x90>
    1a56:	91 50       	subi	r25, 0x01	; 1
    1a58:	50 40       	sbci	r21, 0x00	; 0
    1a5a:	e6 95       	lsr	r30
    1a5c:	00 1c       	adc	r0, r0
    1a5e:	ca f7       	brpl	.-14     	; 0x1a52 <__divsf3_pse+0x2c>
    1a60:	29 d0       	rcall	.+82     	; 0x1ab4 <__divsf3_pse+0x8e>
    1a62:	fe 2f       	mov	r31, r30
    1a64:	27 d0       	rcall	.+78     	; 0x1ab4 <__divsf3_pse+0x8e>
    1a66:	66 0f       	add	r22, r22
    1a68:	77 1f       	adc	r23, r23
    1a6a:	88 1f       	adc	r24, r24
    1a6c:	bb 1f       	adc	r27, r27
    1a6e:	26 17       	cp	r18, r22
    1a70:	37 07       	cpc	r19, r23
    1a72:	48 07       	cpc	r20, r24
    1a74:	ab 07       	cpc	r26, r27
    1a76:	b0 e8       	ldi	r27, 0x80	; 128
    1a78:	09 f0       	breq	.+2      	; 0x1a7c <__divsf3_pse+0x56>
    1a7a:	bb 0b       	sbc	r27, r27
    1a7c:	80 2d       	mov	r24, r0
    1a7e:	bf 01       	movw	r22, r30
    1a80:	ff 27       	eor	r31, r31
    1a82:	93 58       	subi	r25, 0x83	; 131
    1a84:	5f 4f       	sbci	r21, 0xFF	; 255
    1a86:	2a f0       	brmi	.+10     	; 0x1a92 <__divsf3_pse+0x6c>
    1a88:	9e 3f       	cpi	r25, 0xFE	; 254
    1a8a:	51 05       	cpc	r21, r1
    1a8c:	68 f0       	brcs	.+26     	; 0x1aa8 <__divsf3_pse+0x82>
    1a8e:	b6 c0       	rjmp	.+364    	; 0x1bfc <__fp_inf>
    1a90:	00 c1       	rjmp	.+512    	; 0x1c92 <__fp_szero>
    1a92:	5f 3f       	cpi	r21, 0xFF	; 255
    1a94:	ec f3       	brlt	.-6      	; 0x1a90 <__divsf3_pse+0x6a>
    1a96:	98 3e       	cpi	r25, 0xE8	; 232
    1a98:	dc f3       	brlt	.-10     	; 0x1a90 <__divsf3_pse+0x6a>
    1a9a:	86 95       	lsr	r24
    1a9c:	77 95       	ror	r23
    1a9e:	67 95       	ror	r22
    1aa0:	b7 95       	ror	r27
    1aa2:	f7 95       	ror	r31
    1aa4:	9f 5f       	subi	r25, 0xFF	; 255
    1aa6:	c9 f7       	brne	.-14     	; 0x1a9a <__divsf3_pse+0x74>
    1aa8:	88 0f       	add	r24, r24
    1aaa:	91 1d       	adc	r25, r1
    1aac:	96 95       	lsr	r25
    1aae:	87 95       	ror	r24
    1ab0:	97 f9       	bld	r25, 7
    1ab2:	08 95       	ret
    1ab4:	e1 e0       	ldi	r30, 0x01	; 1
    1ab6:	66 0f       	add	r22, r22
    1ab8:	77 1f       	adc	r23, r23
    1aba:	88 1f       	adc	r24, r24
    1abc:	bb 1f       	adc	r27, r27
    1abe:	62 17       	cp	r22, r18
    1ac0:	73 07       	cpc	r23, r19
    1ac2:	84 07       	cpc	r24, r20
    1ac4:	ba 07       	cpc	r27, r26
    1ac6:	20 f0       	brcs	.+8      	; 0x1ad0 <__divsf3_pse+0xaa>
    1ac8:	62 1b       	sub	r22, r18
    1aca:	73 0b       	sbc	r23, r19
    1acc:	84 0b       	sbc	r24, r20
    1ace:	ba 0b       	sbc	r27, r26
    1ad0:	ee 1f       	adc	r30, r30
    1ad2:	88 f7       	brcc	.-30     	; 0x1ab6 <__divsf3_pse+0x90>
    1ad4:	e0 95       	com	r30
    1ad6:	08 95       	ret

00001ad8 <__fixsfsi>:
    1ad8:	04 d0       	rcall	.+8      	; 0x1ae2 <__fixunssfsi>
    1ada:	68 94       	set
    1adc:	b1 11       	cpse	r27, r1
    1ade:	d9 c0       	rjmp	.+434    	; 0x1c92 <__fp_szero>
    1ae0:	08 95       	ret

00001ae2 <__fixunssfsi>:
    1ae2:	bc d0       	rcall	.+376    	; 0x1c5c <__fp_splitA>
    1ae4:	88 f0       	brcs	.+34     	; 0x1b08 <__fixunssfsi+0x26>
    1ae6:	9f 57       	subi	r25, 0x7F	; 127
    1ae8:	90 f0       	brcs	.+36     	; 0x1b0e <__fixunssfsi+0x2c>
    1aea:	b9 2f       	mov	r27, r25
    1aec:	99 27       	eor	r25, r25
    1aee:	b7 51       	subi	r27, 0x17	; 23
    1af0:	a0 f0       	brcs	.+40     	; 0x1b1a <__fixunssfsi+0x38>
    1af2:	d1 f0       	breq	.+52     	; 0x1b28 <__fixunssfsi+0x46>
    1af4:	66 0f       	add	r22, r22
    1af6:	77 1f       	adc	r23, r23
    1af8:	88 1f       	adc	r24, r24
    1afa:	99 1f       	adc	r25, r25
    1afc:	1a f0       	brmi	.+6      	; 0x1b04 <__fixunssfsi+0x22>
    1afe:	ba 95       	dec	r27
    1b00:	c9 f7       	brne	.-14     	; 0x1af4 <__fixunssfsi+0x12>
    1b02:	12 c0       	rjmp	.+36     	; 0x1b28 <__fixunssfsi+0x46>
    1b04:	b1 30       	cpi	r27, 0x01	; 1
    1b06:	81 f0       	breq	.+32     	; 0x1b28 <__fixunssfsi+0x46>
    1b08:	c3 d0       	rcall	.+390    	; 0x1c90 <__fp_zero>
    1b0a:	b1 e0       	ldi	r27, 0x01	; 1
    1b0c:	08 95       	ret
    1b0e:	c0 c0       	rjmp	.+384    	; 0x1c90 <__fp_zero>
    1b10:	67 2f       	mov	r22, r23
    1b12:	78 2f       	mov	r23, r24
    1b14:	88 27       	eor	r24, r24
    1b16:	b8 5f       	subi	r27, 0xF8	; 248
    1b18:	39 f0       	breq	.+14     	; 0x1b28 <__fixunssfsi+0x46>
    1b1a:	b9 3f       	cpi	r27, 0xF9	; 249
    1b1c:	cc f3       	brlt	.-14     	; 0x1b10 <__fixunssfsi+0x2e>
    1b1e:	86 95       	lsr	r24
    1b20:	77 95       	ror	r23
    1b22:	67 95       	ror	r22
    1b24:	b3 95       	inc	r27
    1b26:	d9 f7       	brne	.-10     	; 0x1b1e <__fixunssfsi+0x3c>
    1b28:	3e f4       	brtc	.+14     	; 0x1b38 <__fixunssfsi+0x56>
    1b2a:	90 95       	com	r25
    1b2c:	80 95       	com	r24
    1b2e:	70 95       	com	r23
    1b30:	61 95       	neg	r22
    1b32:	7f 4f       	sbci	r23, 0xFF	; 255
    1b34:	8f 4f       	sbci	r24, 0xFF	; 255
    1b36:	9f 4f       	sbci	r25, 0xFF	; 255
    1b38:	08 95       	ret

00001b3a <__floatunsisf>:
    1b3a:	e8 94       	clt
    1b3c:	09 c0       	rjmp	.+18     	; 0x1b50 <__floatsisf+0x12>

00001b3e <__floatsisf>:
    1b3e:	97 fb       	bst	r25, 7
    1b40:	3e f4       	brtc	.+14     	; 0x1b50 <__floatsisf+0x12>
    1b42:	90 95       	com	r25
    1b44:	80 95       	com	r24
    1b46:	70 95       	com	r23
    1b48:	61 95       	neg	r22
    1b4a:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4c:	8f 4f       	sbci	r24, 0xFF	; 255
    1b4e:	9f 4f       	sbci	r25, 0xFF	; 255
    1b50:	99 23       	and	r25, r25
    1b52:	a9 f0       	breq	.+42     	; 0x1b7e <__floatsisf+0x40>
    1b54:	f9 2f       	mov	r31, r25
    1b56:	96 e9       	ldi	r25, 0x96	; 150
    1b58:	bb 27       	eor	r27, r27
    1b5a:	93 95       	inc	r25
    1b5c:	f6 95       	lsr	r31
    1b5e:	87 95       	ror	r24
    1b60:	77 95       	ror	r23
    1b62:	67 95       	ror	r22
    1b64:	b7 95       	ror	r27
    1b66:	f1 11       	cpse	r31, r1
    1b68:	f8 cf       	rjmp	.-16     	; 0x1b5a <__floatsisf+0x1c>
    1b6a:	fa f4       	brpl	.+62     	; 0x1baa <__floatsisf+0x6c>
    1b6c:	bb 0f       	add	r27, r27
    1b6e:	11 f4       	brne	.+4      	; 0x1b74 <__floatsisf+0x36>
    1b70:	60 ff       	sbrs	r22, 0
    1b72:	1b c0       	rjmp	.+54     	; 0x1baa <__floatsisf+0x6c>
    1b74:	6f 5f       	subi	r22, 0xFF	; 255
    1b76:	7f 4f       	sbci	r23, 0xFF	; 255
    1b78:	8f 4f       	sbci	r24, 0xFF	; 255
    1b7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1b7c:	16 c0       	rjmp	.+44     	; 0x1baa <__floatsisf+0x6c>
    1b7e:	88 23       	and	r24, r24
    1b80:	11 f0       	breq	.+4      	; 0x1b86 <__floatsisf+0x48>
    1b82:	96 e9       	ldi	r25, 0x96	; 150
    1b84:	11 c0       	rjmp	.+34     	; 0x1ba8 <__floatsisf+0x6a>
    1b86:	77 23       	and	r23, r23
    1b88:	21 f0       	breq	.+8      	; 0x1b92 <__floatsisf+0x54>
    1b8a:	9e e8       	ldi	r25, 0x8E	; 142
    1b8c:	87 2f       	mov	r24, r23
    1b8e:	76 2f       	mov	r23, r22
    1b90:	05 c0       	rjmp	.+10     	; 0x1b9c <__floatsisf+0x5e>
    1b92:	66 23       	and	r22, r22
    1b94:	71 f0       	breq	.+28     	; 0x1bb2 <__floatsisf+0x74>
    1b96:	96 e8       	ldi	r25, 0x86	; 134
    1b98:	86 2f       	mov	r24, r22
    1b9a:	70 e0       	ldi	r23, 0x00	; 0
    1b9c:	60 e0       	ldi	r22, 0x00	; 0
    1b9e:	2a f0       	brmi	.+10     	; 0x1baa <__floatsisf+0x6c>
    1ba0:	9a 95       	dec	r25
    1ba2:	66 0f       	add	r22, r22
    1ba4:	77 1f       	adc	r23, r23
    1ba6:	88 1f       	adc	r24, r24
    1ba8:	da f7       	brpl	.-10     	; 0x1ba0 <__floatsisf+0x62>
    1baa:	88 0f       	add	r24, r24
    1bac:	96 95       	lsr	r25
    1bae:	87 95       	ror	r24
    1bb0:	97 f9       	bld	r25, 7
    1bb2:	08 95       	ret

00001bb4 <__fp_cmp>:
    1bb4:	99 0f       	add	r25, r25
    1bb6:	00 08       	sbc	r0, r0
    1bb8:	55 0f       	add	r21, r21
    1bba:	aa 0b       	sbc	r26, r26
    1bbc:	e0 e8       	ldi	r30, 0x80	; 128
    1bbe:	fe ef       	ldi	r31, 0xFE	; 254
    1bc0:	16 16       	cp	r1, r22
    1bc2:	17 06       	cpc	r1, r23
    1bc4:	e8 07       	cpc	r30, r24
    1bc6:	f9 07       	cpc	r31, r25
    1bc8:	c0 f0       	brcs	.+48     	; 0x1bfa <__fp_cmp+0x46>
    1bca:	12 16       	cp	r1, r18
    1bcc:	13 06       	cpc	r1, r19
    1bce:	e4 07       	cpc	r30, r20
    1bd0:	f5 07       	cpc	r31, r21
    1bd2:	98 f0       	brcs	.+38     	; 0x1bfa <__fp_cmp+0x46>
    1bd4:	62 1b       	sub	r22, r18
    1bd6:	73 0b       	sbc	r23, r19
    1bd8:	84 0b       	sbc	r24, r20
    1bda:	95 0b       	sbc	r25, r21
    1bdc:	39 f4       	brne	.+14     	; 0x1bec <__fp_cmp+0x38>
    1bde:	0a 26       	eor	r0, r26
    1be0:	61 f0       	breq	.+24     	; 0x1bfa <__fp_cmp+0x46>
    1be2:	23 2b       	or	r18, r19
    1be4:	24 2b       	or	r18, r20
    1be6:	25 2b       	or	r18, r21
    1be8:	21 f4       	brne	.+8      	; 0x1bf2 <__fp_cmp+0x3e>
    1bea:	08 95       	ret
    1bec:	0a 26       	eor	r0, r26
    1bee:	09 f4       	brne	.+2      	; 0x1bf2 <__fp_cmp+0x3e>
    1bf0:	a1 40       	sbci	r26, 0x01	; 1
    1bf2:	a6 95       	lsr	r26
    1bf4:	8f ef       	ldi	r24, 0xFF	; 255
    1bf6:	81 1d       	adc	r24, r1
    1bf8:	81 1d       	adc	r24, r1
    1bfa:	08 95       	ret

00001bfc <__fp_inf>:
    1bfc:	97 f9       	bld	r25, 7
    1bfe:	9f 67       	ori	r25, 0x7F	; 127
    1c00:	80 e8       	ldi	r24, 0x80	; 128
    1c02:	70 e0       	ldi	r23, 0x00	; 0
    1c04:	60 e0       	ldi	r22, 0x00	; 0
    1c06:	08 95       	ret

00001c08 <__fp_nan>:
    1c08:	9f ef       	ldi	r25, 0xFF	; 255
    1c0a:	80 ec       	ldi	r24, 0xC0	; 192
    1c0c:	08 95       	ret

00001c0e <__fp_pscA>:
    1c0e:	00 24       	eor	r0, r0
    1c10:	0a 94       	dec	r0
    1c12:	16 16       	cp	r1, r22
    1c14:	17 06       	cpc	r1, r23
    1c16:	18 06       	cpc	r1, r24
    1c18:	09 06       	cpc	r0, r25
    1c1a:	08 95       	ret

00001c1c <__fp_pscB>:
    1c1c:	00 24       	eor	r0, r0
    1c1e:	0a 94       	dec	r0
    1c20:	12 16       	cp	r1, r18
    1c22:	13 06       	cpc	r1, r19
    1c24:	14 06       	cpc	r1, r20
    1c26:	05 06       	cpc	r0, r21
    1c28:	08 95       	ret

00001c2a <__fp_round>:
    1c2a:	09 2e       	mov	r0, r25
    1c2c:	03 94       	inc	r0
    1c2e:	00 0c       	add	r0, r0
    1c30:	11 f4       	brne	.+4      	; 0x1c36 <__fp_round+0xc>
    1c32:	88 23       	and	r24, r24
    1c34:	52 f0       	brmi	.+20     	; 0x1c4a <__fp_round+0x20>
    1c36:	bb 0f       	add	r27, r27
    1c38:	40 f4       	brcc	.+16     	; 0x1c4a <__fp_round+0x20>
    1c3a:	bf 2b       	or	r27, r31
    1c3c:	11 f4       	brne	.+4      	; 0x1c42 <__fp_round+0x18>
    1c3e:	60 ff       	sbrs	r22, 0
    1c40:	04 c0       	rjmp	.+8      	; 0x1c4a <__fp_round+0x20>
    1c42:	6f 5f       	subi	r22, 0xFF	; 255
    1c44:	7f 4f       	sbci	r23, 0xFF	; 255
    1c46:	8f 4f       	sbci	r24, 0xFF	; 255
    1c48:	9f 4f       	sbci	r25, 0xFF	; 255
    1c4a:	08 95       	ret

00001c4c <__fp_split3>:
    1c4c:	57 fd       	sbrc	r21, 7
    1c4e:	90 58       	subi	r25, 0x80	; 128
    1c50:	44 0f       	add	r20, r20
    1c52:	55 1f       	adc	r21, r21
    1c54:	59 f0       	breq	.+22     	; 0x1c6c <__fp_splitA+0x10>
    1c56:	5f 3f       	cpi	r21, 0xFF	; 255
    1c58:	71 f0       	breq	.+28     	; 0x1c76 <__fp_splitA+0x1a>
    1c5a:	47 95       	ror	r20

00001c5c <__fp_splitA>:
    1c5c:	88 0f       	add	r24, r24
    1c5e:	97 fb       	bst	r25, 7
    1c60:	99 1f       	adc	r25, r25
    1c62:	61 f0       	breq	.+24     	; 0x1c7c <__fp_splitA+0x20>
    1c64:	9f 3f       	cpi	r25, 0xFF	; 255
    1c66:	79 f0       	breq	.+30     	; 0x1c86 <__fp_splitA+0x2a>
    1c68:	87 95       	ror	r24
    1c6a:	08 95       	ret
    1c6c:	12 16       	cp	r1, r18
    1c6e:	13 06       	cpc	r1, r19
    1c70:	14 06       	cpc	r1, r20
    1c72:	55 1f       	adc	r21, r21
    1c74:	f2 cf       	rjmp	.-28     	; 0x1c5a <__fp_split3+0xe>
    1c76:	46 95       	lsr	r20
    1c78:	f1 df       	rcall	.-30     	; 0x1c5c <__fp_splitA>
    1c7a:	08 c0       	rjmp	.+16     	; 0x1c8c <__fp_splitA+0x30>
    1c7c:	16 16       	cp	r1, r22
    1c7e:	17 06       	cpc	r1, r23
    1c80:	18 06       	cpc	r1, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	f1 cf       	rjmp	.-30     	; 0x1c68 <__fp_splitA+0xc>
    1c86:	86 95       	lsr	r24
    1c88:	71 05       	cpc	r23, r1
    1c8a:	61 05       	cpc	r22, r1
    1c8c:	08 94       	sec
    1c8e:	08 95       	ret

00001c90 <__fp_zero>:
    1c90:	e8 94       	clt

00001c92 <__fp_szero>:
    1c92:	bb 27       	eor	r27, r27
    1c94:	66 27       	eor	r22, r22
    1c96:	77 27       	eor	r23, r23
    1c98:	cb 01       	movw	r24, r22
    1c9a:	97 f9       	bld	r25, 7
    1c9c:	08 95       	ret

00001c9e <__gesf2>:
    1c9e:	8a df       	rcall	.-236    	; 0x1bb4 <__fp_cmp>
    1ca0:	08 f4       	brcc	.+2      	; 0x1ca4 <__gesf2+0x6>
    1ca2:	8f ef       	ldi	r24, 0xFF	; 255
    1ca4:	08 95       	ret

00001ca6 <__mulsf3>:
    1ca6:	0b d0       	rcall	.+22     	; 0x1cbe <__mulsf3x>
    1ca8:	c0 cf       	rjmp	.-128    	; 0x1c2a <__fp_round>
    1caa:	b1 df       	rcall	.-158    	; 0x1c0e <__fp_pscA>
    1cac:	28 f0       	brcs	.+10     	; 0x1cb8 <__mulsf3+0x12>
    1cae:	b6 df       	rcall	.-148    	; 0x1c1c <__fp_pscB>
    1cb0:	18 f0       	brcs	.+6      	; 0x1cb8 <__mulsf3+0x12>
    1cb2:	95 23       	and	r25, r21
    1cb4:	09 f0       	breq	.+2      	; 0x1cb8 <__mulsf3+0x12>
    1cb6:	a2 cf       	rjmp	.-188    	; 0x1bfc <__fp_inf>
    1cb8:	a7 cf       	rjmp	.-178    	; 0x1c08 <__fp_nan>
    1cba:	11 24       	eor	r1, r1
    1cbc:	ea cf       	rjmp	.-44     	; 0x1c92 <__fp_szero>

00001cbe <__mulsf3x>:
    1cbe:	c6 df       	rcall	.-116    	; 0x1c4c <__fp_split3>
    1cc0:	a0 f3       	brcs	.-24     	; 0x1caa <__mulsf3+0x4>

00001cc2 <__mulsf3_pse>:
    1cc2:	95 9f       	mul	r25, r21
    1cc4:	d1 f3       	breq	.-12     	; 0x1cba <__mulsf3+0x14>
    1cc6:	95 0f       	add	r25, r21
    1cc8:	50 e0       	ldi	r21, 0x00	; 0
    1cca:	55 1f       	adc	r21, r21
    1ccc:	62 9f       	mul	r22, r18
    1cce:	f0 01       	movw	r30, r0
    1cd0:	72 9f       	mul	r23, r18
    1cd2:	bb 27       	eor	r27, r27
    1cd4:	f0 0d       	add	r31, r0
    1cd6:	b1 1d       	adc	r27, r1
    1cd8:	63 9f       	mul	r22, r19
    1cda:	aa 27       	eor	r26, r26
    1cdc:	f0 0d       	add	r31, r0
    1cde:	b1 1d       	adc	r27, r1
    1ce0:	aa 1f       	adc	r26, r26
    1ce2:	64 9f       	mul	r22, r20
    1ce4:	66 27       	eor	r22, r22
    1ce6:	b0 0d       	add	r27, r0
    1ce8:	a1 1d       	adc	r26, r1
    1cea:	66 1f       	adc	r22, r22
    1cec:	82 9f       	mul	r24, r18
    1cee:	22 27       	eor	r18, r18
    1cf0:	b0 0d       	add	r27, r0
    1cf2:	a1 1d       	adc	r26, r1
    1cf4:	62 1f       	adc	r22, r18
    1cf6:	73 9f       	mul	r23, r19
    1cf8:	b0 0d       	add	r27, r0
    1cfa:	a1 1d       	adc	r26, r1
    1cfc:	62 1f       	adc	r22, r18
    1cfe:	83 9f       	mul	r24, r19
    1d00:	a0 0d       	add	r26, r0
    1d02:	61 1d       	adc	r22, r1
    1d04:	22 1f       	adc	r18, r18
    1d06:	74 9f       	mul	r23, r20
    1d08:	33 27       	eor	r19, r19
    1d0a:	a0 0d       	add	r26, r0
    1d0c:	61 1d       	adc	r22, r1
    1d0e:	23 1f       	adc	r18, r19
    1d10:	84 9f       	mul	r24, r20
    1d12:	60 0d       	add	r22, r0
    1d14:	21 1d       	adc	r18, r1
    1d16:	82 2f       	mov	r24, r18
    1d18:	76 2f       	mov	r23, r22
    1d1a:	6a 2f       	mov	r22, r26
    1d1c:	11 24       	eor	r1, r1
    1d1e:	9f 57       	subi	r25, 0x7F	; 127
    1d20:	50 40       	sbci	r21, 0x00	; 0
    1d22:	8a f0       	brmi	.+34     	; 0x1d46 <__mulsf3_pse+0x84>
    1d24:	e1 f0       	breq	.+56     	; 0x1d5e <__mulsf3_pse+0x9c>
    1d26:	88 23       	and	r24, r24
    1d28:	4a f0       	brmi	.+18     	; 0x1d3c <__mulsf3_pse+0x7a>
    1d2a:	ee 0f       	add	r30, r30
    1d2c:	ff 1f       	adc	r31, r31
    1d2e:	bb 1f       	adc	r27, r27
    1d30:	66 1f       	adc	r22, r22
    1d32:	77 1f       	adc	r23, r23
    1d34:	88 1f       	adc	r24, r24
    1d36:	91 50       	subi	r25, 0x01	; 1
    1d38:	50 40       	sbci	r21, 0x00	; 0
    1d3a:	a9 f7       	brne	.-22     	; 0x1d26 <__mulsf3_pse+0x64>
    1d3c:	9e 3f       	cpi	r25, 0xFE	; 254
    1d3e:	51 05       	cpc	r21, r1
    1d40:	70 f0       	brcs	.+28     	; 0x1d5e <__mulsf3_pse+0x9c>
    1d42:	5c cf       	rjmp	.-328    	; 0x1bfc <__fp_inf>
    1d44:	a6 cf       	rjmp	.-180    	; 0x1c92 <__fp_szero>
    1d46:	5f 3f       	cpi	r21, 0xFF	; 255
    1d48:	ec f3       	brlt	.-6      	; 0x1d44 <__mulsf3_pse+0x82>
    1d4a:	98 3e       	cpi	r25, 0xE8	; 232
    1d4c:	dc f3       	brlt	.-10     	; 0x1d44 <__mulsf3_pse+0x82>
    1d4e:	86 95       	lsr	r24
    1d50:	77 95       	ror	r23
    1d52:	67 95       	ror	r22
    1d54:	b7 95       	ror	r27
    1d56:	f7 95       	ror	r31
    1d58:	e7 95       	ror	r30
    1d5a:	9f 5f       	subi	r25, 0xFF	; 255
    1d5c:	c1 f7       	brne	.-16     	; 0x1d4e <__mulsf3_pse+0x8c>
    1d5e:	fe 2b       	or	r31, r30
    1d60:	88 0f       	add	r24, r24
    1d62:	91 1d       	adc	r25, r1
    1d64:	96 95       	lsr	r25
    1d66:	87 95       	ror	r24
    1d68:	97 f9       	bld	r25, 7
    1d6a:	08 95       	ret

00001d6c <vfprintf>:
    1d6c:	a3 e1       	ldi	r26, 0x13	; 19
    1d6e:	b0 e0       	ldi	r27, 0x00	; 0
    1d70:	ec eb       	ldi	r30, 0xBC	; 188
    1d72:	fe e0       	ldi	r31, 0x0E	; 14
    1d74:	0c 94 53 12 	jmp	0x24a6	; 0x24a6 <__prologue_saves__>
    1d78:	7c 01       	movw	r14, r24
    1d7a:	1b 01       	movw	r2, r22
    1d7c:	6a 01       	movw	r12, r20
    1d7e:	fc 01       	movw	r30, r24
    1d80:	17 82       	std	Z+7, r1	; 0x07
    1d82:	16 82       	std	Z+6, r1	; 0x06
    1d84:	83 81       	ldd	r24, Z+3	; 0x03
    1d86:	81 ff       	sbrs	r24, 1
    1d88:	66 c3       	rjmp	.+1740   	; 0x2456 <__stack+0x257>
    1d8a:	be 01       	movw	r22, r28
    1d8c:	6f 5f       	subi	r22, 0xFF	; 255
    1d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d90:	4b 01       	movw	r8, r22
    1d92:	f7 01       	movw	r30, r14
    1d94:	93 81       	ldd	r25, Z+3	; 0x03
    1d96:	f1 01       	movw	r30, r2
    1d98:	93 fd       	sbrc	r25, 3
    1d9a:	85 91       	lpm	r24, Z+
    1d9c:	93 ff       	sbrs	r25, 3
    1d9e:	81 91       	ld	r24, Z+
    1da0:	1f 01       	movw	r2, r30
    1da2:	88 23       	and	r24, r24
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <vfprintf+0x3c>
    1da6:	53 c3       	rjmp	.+1702   	; 0x244e <__stack+0x24f>
    1da8:	85 32       	cpi	r24, 0x25	; 37
    1daa:	39 f4       	brne	.+14     	; 0x1dba <vfprintf+0x4e>
    1dac:	93 fd       	sbrc	r25, 3
    1dae:	85 91       	lpm	r24, Z+
    1db0:	93 ff       	sbrs	r25, 3
    1db2:	81 91       	ld	r24, Z+
    1db4:	1f 01       	movw	r2, r30
    1db6:	85 32       	cpi	r24, 0x25	; 37
    1db8:	39 f4       	brne	.+14     	; 0x1dc8 <vfprintf+0x5c>
    1dba:	b7 01       	movw	r22, r14
    1dbc:	90 e0       	ldi	r25, 0x00	; 0
    1dbe:	0e 94 9f 14 	call	0x293e	; 0x293e <fputc>
    1dc2:	56 01       	movw	r10, r12
    1dc4:	65 01       	movw	r12, r10
    1dc6:	e5 cf       	rjmp	.-54     	; 0x1d92 <vfprintf+0x26>
    1dc8:	10 e0       	ldi	r17, 0x00	; 0
    1dca:	51 2c       	mov	r5, r1
    1dcc:	20 e0       	ldi	r18, 0x00	; 0
    1dce:	20 32       	cpi	r18, 0x20	; 32
    1dd0:	a0 f4       	brcc	.+40     	; 0x1dfa <vfprintf+0x8e>
    1dd2:	8b 32       	cpi	r24, 0x2B	; 43
    1dd4:	69 f0       	breq	.+26     	; 0x1df0 <vfprintf+0x84>
    1dd6:	30 f4       	brcc	.+12     	; 0x1de4 <vfprintf+0x78>
    1dd8:	80 32       	cpi	r24, 0x20	; 32
    1dda:	59 f0       	breq	.+22     	; 0x1df2 <vfprintf+0x86>
    1ddc:	83 32       	cpi	r24, 0x23	; 35
    1dde:	69 f4       	brne	.+26     	; 0x1dfa <vfprintf+0x8e>
    1de0:	20 61       	ori	r18, 0x10	; 16
    1de2:	2c c0       	rjmp	.+88     	; 0x1e3c <vfprintf+0xd0>
    1de4:	8d 32       	cpi	r24, 0x2D	; 45
    1de6:	39 f0       	breq	.+14     	; 0x1df6 <vfprintf+0x8a>
    1de8:	80 33       	cpi	r24, 0x30	; 48
    1dea:	39 f4       	brne	.+14     	; 0x1dfa <vfprintf+0x8e>
    1dec:	21 60       	ori	r18, 0x01	; 1
    1dee:	26 c0       	rjmp	.+76     	; 0x1e3c <vfprintf+0xd0>
    1df0:	22 60       	ori	r18, 0x02	; 2
    1df2:	24 60       	ori	r18, 0x04	; 4
    1df4:	23 c0       	rjmp	.+70     	; 0x1e3c <vfprintf+0xd0>
    1df6:	28 60       	ori	r18, 0x08	; 8
    1df8:	21 c0       	rjmp	.+66     	; 0x1e3c <vfprintf+0xd0>
    1dfa:	27 fd       	sbrc	r18, 7
    1dfc:	27 c0       	rjmp	.+78     	; 0x1e4c <vfprintf+0xe0>
    1dfe:	30 ed       	ldi	r19, 0xD0	; 208
    1e00:	38 0f       	add	r19, r24
    1e02:	3a 30       	cpi	r19, 0x0A	; 10
    1e04:	78 f4       	brcc	.+30     	; 0x1e24 <vfprintf+0xb8>
    1e06:	26 ff       	sbrs	r18, 6
    1e08:	06 c0       	rjmp	.+12     	; 0x1e16 <vfprintf+0xaa>
    1e0a:	fa e0       	ldi	r31, 0x0A	; 10
    1e0c:	1f 9f       	mul	r17, r31
    1e0e:	30 0d       	add	r19, r0
    1e10:	11 24       	eor	r1, r1
    1e12:	13 2f       	mov	r17, r19
    1e14:	13 c0       	rjmp	.+38     	; 0x1e3c <vfprintf+0xd0>
    1e16:	6a e0       	ldi	r22, 0x0A	; 10
    1e18:	56 9e       	mul	r5, r22
    1e1a:	30 0d       	add	r19, r0
    1e1c:	11 24       	eor	r1, r1
    1e1e:	53 2e       	mov	r5, r19
    1e20:	20 62       	ori	r18, 0x20	; 32
    1e22:	0c c0       	rjmp	.+24     	; 0x1e3c <vfprintf+0xd0>
    1e24:	8e 32       	cpi	r24, 0x2E	; 46
    1e26:	21 f4       	brne	.+8      	; 0x1e30 <vfprintf+0xc4>
    1e28:	26 fd       	sbrc	r18, 6
    1e2a:	11 c3       	rjmp	.+1570   	; 0x244e <__stack+0x24f>
    1e2c:	20 64       	ori	r18, 0x40	; 64
    1e2e:	06 c0       	rjmp	.+12     	; 0x1e3c <vfprintf+0xd0>
    1e30:	8c 36       	cpi	r24, 0x6C	; 108
    1e32:	11 f4       	brne	.+4      	; 0x1e38 <vfprintf+0xcc>
    1e34:	20 68       	ori	r18, 0x80	; 128
    1e36:	02 c0       	rjmp	.+4      	; 0x1e3c <vfprintf+0xd0>
    1e38:	88 36       	cpi	r24, 0x68	; 104
    1e3a:	41 f4       	brne	.+16     	; 0x1e4c <vfprintf+0xe0>
    1e3c:	f1 01       	movw	r30, r2
    1e3e:	93 fd       	sbrc	r25, 3
    1e40:	85 91       	lpm	r24, Z+
    1e42:	93 ff       	sbrs	r25, 3
    1e44:	81 91       	ld	r24, Z+
    1e46:	1f 01       	movw	r2, r30
    1e48:	81 11       	cpse	r24, r1
    1e4a:	c1 cf       	rjmp	.-126    	; 0x1dce <vfprintf+0x62>
    1e4c:	9b eb       	ldi	r25, 0xBB	; 187
    1e4e:	98 0f       	add	r25, r24
    1e50:	93 30       	cpi	r25, 0x03	; 3
    1e52:	18 f4       	brcc	.+6      	; 0x1e5a <vfprintf+0xee>
    1e54:	20 61       	ori	r18, 0x10	; 16
    1e56:	80 5e       	subi	r24, 0xE0	; 224
    1e58:	06 c0       	rjmp	.+12     	; 0x1e66 <vfprintf+0xfa>
    1e5a:	9b e9       	ldi	r25, 0x9B	; 155
    1e5c:	98 0f       	add	r25, r24
    1e5e:	93 30       	cpi	r25, 0x03	; 3
    1e60:	08 f0       	brcs	.+2      	; 0x1e64 <vfprintf+0xf8>
    1e62:	aa c1       	rjmp	.+852    	; 0x21b8 <vfprintf+0x44c>
    1e64:	2f 7e       	andi	r18, 0xEF	; 239
    1e66:	26 ff       	sbrs	r18, 6
    1e68:	16 e0       	ldi	r17, 0x06	; 6
    1e6a:	2f 73       	andi	r18, 0x3F	; 63
    1e6c:	72 2e       	mov	r7, r18
    1e6e:	85 36       	cpi	r24, 0x65	; 101
    1e70:	21 f4       	brne	.+8      	; 0x1e7a <vfprintf+0x10e>
    1e72:	f2 2f       	mov	r31, r18
    1e74:	f0 64       	ori	r31, 0x40	; 64
    1e76:	7f 2e       	mov	r7, r31
    1e78:	08 c0       	rjmp	.+16     	; 0x1e8a <vfprintf+0x11e>
    1e7a:	86 36       	cpi	r24, 0x66	; 102
    1e7c:	21 f4       	brne	.+8      	; 0x1e86 <vfprintf+0x11a>
    1e7e:	62 2f       	mov	r22, r18
    1e80:	60 68       	ori	r22, 0x80	; 128
    1e82:	76 2e       	mov	r7, r22
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <vfprintf+0x11e>
    1e86:	11 11       	cpse	r17, r1
    1e88:	11 50       	subi	r17, 0x01	; 1
    1e8a:	77 fe       	sbrs	r7, 7
    1e8c:	07 c0       	rjmp	.+14     	; 0x1e9c <vfprintf+0x130>
    1e8e:	1c 33       	cpi	r17, 0x3C	; 60
    1e90:	48 f4       	brcc	.+18     	; 0x1ea4 <vfprintf+0x138>
    1e92:	44 24       	eor	r4, r4
    1e94:	43 94       	inc	r4
    1e96:	41 0e       	add	r4, r17
    1e98:	27 e0       	ldi	r18, 0x07	; 7
    1e9a:	0b c0       	rjmp	.+22     	; 0x1eb2 <vfprintf+0x146>
    1e9c:	18 30       	cpi	r17, 0x08	; 8
    1e9e:	30 f4       	brcc	.+12     	; 0x1eac <vfprintf+0x140>
    1ea0:	21 2f       	mov	r18, r17
    1ea2:	06 c0       	rjmp	.+12     	; 0x1eb0 <vfprintf+0x144>
    1ea4:	27 e0       	ldi	r18, 0x07	; 7
    1ea6:	4c e3       	ldi	r20, 0x3C	; 60
    1ea8:	44 2e       	mov	r4, r20
    1eaa:	03 c0       	rjmp	.+6      	; 0x1eb2 <vfprintf+0x146>
    1eac:	27 e0       	ldi	r18, 0x07	; 7
    1eae:	17 e0       	ldi	r17, 0x07	; 7
    1eb0:	41 2c       	mov	r4, r1
    1eb2:	56 01       	movw	r10, r12
    1eb4:	74 e0       	ldi	r23, 0x04	; 4
    1eb6:	a7 0e       	add	r10, r23
    1eb8:	b1 1c       	adc	r11, r1
    1eba:	f6 01       	movw	r30, r12
    1ebc:	60 81       	ld	r22, Z
    1ebe:	71 81       	ldd	r23, Z+1	; 0x01
    1ec0:	82 81       	ldd	r24, Z+2	; 0x02
    1ec2:	93 81       	ldd	r25, Z+3	; 0x03
    1ec4:	04 2d       	mov	r16, r4
    1ec6:	a4 01       	movw	r20, r8
    1ec8:	0e 94 b1 13 	call	0x2762	; 0x2762 <__ftoa_engine>
    1ecc:	6c 01       	movw	r12, r24
    1ece:	09 81       	ldd	r16, Y+1	; 0x01
    1ed0:	00 ff       	sbrs	r16, 0
    1ed2:	02 c0       	rjmp	.+4      	; 0x1ed8 <vfprintf+0x16c>
    1ed4:	03 ff       	sbrs	r16, 3
    1ed6:	06 c0       	rjmp	.+12     	; 0x1ee4 <vfprintf+0x178>
    1ed8:	71 fc       	sbrc	r7, 1
    1eda:	07 c0       	rjmp	.+14     	; 0x1eea <vfprintf+0x17e>
    1edc:	72 fc       	sbrc	r7, 2
    1ede:	08 c0       	rjmp	.+16     	; 0x1ef0 <vfprintf+0x184>
    1ee0:	61 2c       	mov	r6, r1
    1ee2:	08 c0       	rjmp	.+16     	; 0x1ef4 <vfprintf+0x188>
    1ee4:	3d e2       	ldi	r19, 0x2D	; 45
    1ee6:	63 2e       	mov	r6, r19
    1ee8:	05 c0       	rjmp	.+10     	; 0x1ef4 <vfprintf+0x188>
    1eea:	2b e2       	ldi	r18, 0x2B	; 43
    1eec:	62 2e       	mov	r6, r18
    1eee:	02 c0       	rjmp	.+4      	; 0x1ef4 <vfprintf+0x188>
    1ef0:	90 e2       	ldi	r25, 0x20	; 32
    1ef2:	69 2e       	mov	r6, r25
    1ef4:	80 2f       	mov	r24, r16
    1ef6:	8c 70       	andi	r24, 0x0C	; 12
    1ef8:	99 f1       	breq	.+102    	; 0x1f60 <vfprintf+0x1f4>
    1efa:	66 20       	and	r6, r6
    1efc:	11 f0       	breq	.+4      	; 0x1f02 <vfprintf+0x196>
    1efe:	84 e0       	ldi	r24, 0x04	; 4
    1f00:	01 c0       	rjmp	.+2      	; 0x1f04 <vfprintf+0x198>
    1f02:	83 e0       	ldi	r24, 0x03	; 3
    1f04:	85 15       	cp	r24, r5
    1f06:	10 f0       	brcs	.+4      	; 0x1f0c <vfprintf+0x1a0>
    1f08:	51 2c       	mov	r5, r1
    1f0a:	0b c0       	rjmp	.+22     	; 0x1f22 <vfprintf+0x1b6>
    1f0c:	58 1a       	sub	r5, r24
    1f0e:	73 fc       	sbrc	r7, 3
    1f10:	08 c0       	rjmp	.+16     	; 0x1f22 <vfprintf+0x1b6>
    1f12:	b7 01       	movw	r22, r14
    1f14:	80 e2       	ldi	r24, 0x20	; 32
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	0e 94 9f 14 	call	0x293e	; 0x293e <fputc>
    1f1c:	5a 94       	dec	r5
    1f1e:	c9 f7       	brne	.-14     	; 0x1f12 <vfprintf+0x1a6>
    1f20:	f3 cf       	rjmp	.-26     	; 0x1f08 <vfprintf+0x19c>
    1f22:	66 20       	and	r6, r6
    1f24:	29 f0       	breq	.+10     	; 0x1f30 <vfprintf+0x1c4>
    1f26:	b7 01       	movw	r22, r14
    1f28:	86 2d       	mov	r24, r6
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	0e 94 9f 14 	call	0x293e	; 0x293e <fputc>
    1f30:	03 fd       	sbrc	r16, 3
    1f32:	03 c0       	rjmp	.+6      	; 0x1f3a <vfprintf+0x1ce>
    1f34:	08 e3       	ldi	r16, 0x38	; 56
    1f36:	11 e0       	ldi	r17, 0x01	; 1
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <vfprintf+0x1d2>
    1f3a:	04 e3       	ldi	r16, 0x34	; 52
    1f3c:	11 e0       	ldi	r17, 0x01	; 1
    1f3e:	f7 2d       	mov	r31, r7
    1f40:	f0 71       	andi	r31, 0x10	; 16
    1f42:	7f 2e       	mov	r7, r31
    1f44:	f8 01       	movw	r30, r16
    1f46:	84 91       	lpm	r24, Z
    1f48:	88 23       	and	r24, r24
    1f4a:	09 f4       	brne	.+2      	; 0x1f4e <vfprintf+0x1e2>
    1f4c:	76 c2       	rjmp	.+1260   	; 0x243a <__stack+0x23b>
    1f4e:	71 10       	cpse	r7, r1
    1f50:	80 52       	subi	r24, 0x20	; 32
    1f52:	b7 01       	movw	r22, r14
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	0e 94 9f 14 	call	0x293e	; 0x293e <fputc>
    1f5a:	0f 5f       	subi	r16, 0xFF	; 255
    1f5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1f5e:	f2 cf       	rjmp	.-28     	; 0x1f44 <vfprintf+0x1d8>
    1f60:	77 fe       	sbrs	r7, 7
    1f62:	0f c0       	rjmp	.+30     	; 0x1f82 <vfprintf+0x216>
    1f64:	4c 0c       	add	r4, r12
    1f66:	04 ff       	sbrs	r16, 4
    1f68:	04 c0       	rjmp	.+8      	; 0x1f72 <vfprintf+0x206>
    1f6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6c:	81 33       	cpi	r24, 0x31	; 49
    1f6e:	09 f4       	brne	.+2      	; 0x1f72 <vfprintf+0x206>
    1f70:	4a 94       	dec	r4
    1f72:	14 14       	cp	r1, r4
    1f74:	74 f5       	brge	.+92     	; 0x1fd2 <vfprintf+0x266>
    1f76:	f8 e0       	ldi	r31, 0x08	; 8
    1f78:	f4 15       	cp	r31, r4
    1f7a:	78 f5       	brcc	.+94     	; 0x1fda <vfprintf+0x26e>
    1f7c:	88 e0       	ldi	r24, 0x08	; 8
    1f7e:	48 2e       	mov	r4, r24
    1f80:	2c c0       	rjmp	.+88     	; 0x1fda <vfprintf+0x26e>
    1f82:	76 fc       	sbrc	r7, 6
    1f84:	2a c0       	rjmp	.+84     	; 0x1fda <vfprintf+0x26e>
    1f86:	81 2f       	mov	r24, r17
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	8c 15       	cp	r24, r12
    1f8c:	9d 05       	cpc	r25, r13
    1f8e:	9c f0       	brlt	.+38     	; 0x1fb6 <vfprintf+0x24a>
    1f90:	6c ef       	ldi	r22, 0xFC	; 252
    1f92:	c6 16       	cp	r12, r22
    1f94:	6f ef       	ldi	r22, 0xFF	; 255
    1f96:	d6 06       	cpc	r13, r22
    1f98:	74 f0       	brlt	.+28     	; 0x1fb6 <vfprintf+0x24a>
    1f9a:	77 2d       	mov	r23, r7
    1f9c:	70 68       	ori	r23, 0x80	; 128
    1f9e:	77 2e       	mov	r7, r23
    1fa0:	0a c0       	rjmp	.+20     	; 0x1fb6 <vfprintf+0x24a>
    1fa2:	e2 e0       	ldi	r30, 0x02	; 2
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	ec 0f       	add	r30, r28
    1fa8:	fd 1f       	adc	r31, r29
    1faa:	e1 0f       	add	r30, r17
    1fac:	f1 1d       	adc	r31, r1
    1fae:	80 81       	ld	r24, Z
    1fb0:	80 33       	cpi	r24, 0x30	; 48
    1fb2:	19 f4       	brne	.+6      	; 0x1fba <vfprintf+0x24e>
    1fb4:	11 50       	subi	r17, 0x01	; 1
    1fb6:	11 11       	cpse	r17, r1
    1fb8:	f4 cf       	rjmp	.-24     	; 0x1fa2 <vfprintf+0x236>
    1fba:	77 fe       	sbrs	r7, 7
    1fbc:	0e c0       	rjmp	.+28     	; 0x1fda <vfprintf+0x26e>
    1fbe:	44 24       	eor	r4, r4
    1fc0:	43 94       	inc	r4
    1fc2:	41 0e       	add	r4, r17
    1fc4:	81 2f       	mov	r24, r17
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	c8 16       	cp	r12, r24
    1fca:	d9 06       	cpc	r13, r25
    1fcc:	2c f4       	brge	.+10     	; 0x1fd8 <vfprintf+0x26c>
    1fce:	1c 19       	sub	r17, r12
    1fd0:	04 c0       	rjmp	.+8      	; 0x1fda <vfprintf+0x26e>
    1fd2:	44 24       	eor	r4, r4
    1fd4:	43 94       	inc	r4
    1fd6:	01 c0       	rjmp	.+2      	; 0x1fda <vfprintf+0x26e>
    1fd8:	10 e0       	ldi	r17, 0x00	; 0
    1fda:	77 fe       	sbrs	r7, 7
    1fdc:	07 c0       	rjmp	.+14     	; 0x1fec <vfprintf+0x280>
    1fde:	1c 14       	cp	r1, r12
    1fe0:	1d 04       	cpc	r1, r13
    1fe2:	3c f4       	brge	.+14     	; 0x1ff2 <vfprintf+0x286>
    1fe4:	96 01       	movw	r18, r12
    1fe6:	2f 5f       	subi	r18, 0xFF	; 255
    1fe8:	3f 4f       	sbci	r19, 0xFF	; 255
    1fea:	05 c0       	rjmp	.+10     	; 0x1ff6 <vfprintf+0x28a>
    1fec:	25 e0       	ldi	r18, 0x05	; 5
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	02 c0       	rjmp	.+4      	; 0x1ff6 <vfprintf+0x28a>
    1ff2:	21 e0       	ldi	r18, 0x01	; 1
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	66 20       	and	r6, r6
    1ff8:	11 f0       	breq	.+4      	; 0x1ffe <vfprintf+0x292>
    1ffa:	2f 5f       	subi	r18, 0xFF	; 255
    1ffc:	3f 4f       	sbci	r19, 0xFF	; 255
    1ffe:	11 23       	and	r17, r17
    2000:	31 f0       	breq	.+12     	; 0x200e <vfprintf+0x2a2>
    2002:	41 2f       	mov	r20, r17
    2004:	50 e0       	ldi	r21, 0x00	; 0
    2006:	4f 5f       	subi	r20, 0xFF	; 255
    2008:	5f 4f       	sbci	r21, 0xFF	; 255
    200a:	24 0f       	add	r18, r20
    200c:	35 1f       	adc	r19, r21
    200e:	45 2d       	mov	r20, r5
    2010:	50 e0       	ldi	r21, 0x00	; 0
    2012:	24 17       	cp	r18, r20
    2014:	35 07       	cpc	r19, r21
    2016:	14 f4       	brge	.+4      	; 0x201c <vfprintf+0x2b0>
    2018:	52 1a       	sub	r5, r18
    201a:	01 c0       	rjmp	.+2      	; 0x201e <vfprintf+0x2b2>
    201c:	51 2c       	mov	r5, r1
    201e:	87 2d       	mov	r24, r7
    2020:	89 70       	andi	r24, 0x09	; 9
    2022:	49 f4       	brne	.+18     	; 0x2036 <vfprintf+0x2ca>
    2024:	55 20       	and	r5, r5
    2026:	39 f0       	breq	.+14     	; 0x2036 <vfprintf+0x2ca>
    2028:	b7 01       	movw	r22, r14
    202a:	80 e2       	ldi	r24, 0x20	; 32
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	0e 94 9f 14 	call	0x293e	; 0x293e <fputc>
    2032:	5a 94       	dec	r5
    2034:	f7 cf       	rjmp	.-18     	; 0x2024 <vfprintf+0x2b8>
    2036:	66 20       	and	r6, r6
    2038:	29 f0       	breq	.+10     	; 0x2044 <vfprintf+0x2d8>
    203a:	b7 01       	movw	r22, r14
    203c:	86 2d       	mov	r24, r6
    203e:	90 e0       	ldi	r25, 0x00	; 0
    2040:	0e 94 9f 14 	call	0x293e	; 0x293e <fputc>
    2044:	73 fc       	sbrc	r7, 3
    2046:	09 c0       	rjmp	.+18     	; 0x205a <vfprintf+0x2ee>
    2048:	55 20       	and	r5, r5
    204a:	39 f0       	breq	.+14     	; 0x205a <vfprintf+0x2ee>
    204c:	b7 01       	movw	r22, r14
    204e:	80 e3       	ldi	r24, 0x30	; 48
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	0e 94 9f 14 	call	0x293e	; 0x293e <fputc>
    2056:	5a 94       	dec	r5
    2058:	f7 cf       	rjmp	.-18     	; 0x2048 <vfprintf+0x2dc>
    205a:	77 fe       	sbrs	r7, 7
    205c:	5f c0       	rjmp	.+190    	; 0x211c <vfprintf+0x3b0>
    205e:	9c 2d       	mov	r25, r12
    2060:	8d 2d       	mov	r24, r13
    2062:	d7 fe       	sbrs	r13, 7
    2064:	02 c0       	rjmp	.+4      	; 0x206a <vfprintf+0x2fe>
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	80 e0       	ldi	r24, 0x00	; 0
    206a:	69 2e       	mov	r6, r25
    206c:	78 2e       	mov	r7, r24
    206e:	40 e0       	ldi	r20, 0x00	; 0
    2070:	50 e0       	ldi	r21, 0x00	; 0
    2072:	c6 01       	movw	r24, r12
    2074:	84 19       	sub	r24, r4
    2076:	91 09       	sbc	r25, r1
    2078:	9d 87       	std	Y+13, r25	; 0x0d
    207a:	8c 87       	std	Y+12, r24	; 0x0c
    207c:	96 01       	movw	r18, r12
    207e:	26 19       	sub	r18, r6
    2080:	37 09       	sbc	r19, r7
    2082:	28 0d       	add	r18, r8
    2084:	39 1d       	adc	r19, r9
    2086:	81 2f       	mov	r24, r17
    2088:	90 e0       	ldi	r25, 0x00	; 0
    208a:	ee 27       	eor	r30, r30
    208c:	ff 27       	eor	r31, r31
    208e:	e8 1b       	sub	r30, r24
    2090:	f9 0b       	sbc	r31, r25
    2092:	ff 87       	std	Y+15, r31	; 0x0f
    2094:	ee 87       	std	Y+14, r30	; 0x0e
    2096:	ff ef       	ldi	r31, 0xFF	; 255
    2098:	6f 16       	cp	r6, r31
    209a:	7f 06       	cpc	r7, r31
    209c:	69 f4       	brne	.+26     	; 0x20b8 <vfprintf+0x34c>
    209e:	b7 01       	movw	r22, r14
    20a0:	8e e2       	ldi	r24, 0x2E	; 46
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	2b 8b       	std	Y+19, r18	; 0x13
    20a6:	3a 8b       	std	Y+18, r19	; 0x12
    20a8:	48 8b       	std	Y+16, r20	; 0x10
    20aa:	59 8b       	std	Y+17, r21	; 0x11
    20ac:	0e 94 9f 14 	call	0x293e	; 0x293e <fputc>
    20b0:	59 89       	ldd	r21, Y+17	; 0x11
    20b2:	48 89       	ldd	r20, Y+16	; 0x10
    20b4:	3a 89       	ldd	r19, Y+18	; 0x12
    20b6:	2b 89       	ldd	r18, Y+19	; 0x13
    20b8:	c6 14       	cp	r12, r6
    20ba:	d7 04       	cpc	r13, r7
    20bc:	54 f0       	brlt	.+20     	; 0x20d2 <vfprintf+0x366>
    20be:	6c 85       	ldd	r22, Y+12	; 0x0c
    20c0:	7d 85       	ldd	r23, Y+13	; 0x0d
    20c2:	66 15       	cp	r22, r6
    20c4:	77 05       	cpc	r23, r7
    20c6:	2c f4       	brge	.+10     	; 0x20d2 <vfprintf+0x366>
    20c8:	f9 01       	movw	r30, r18
    20ca:	e4 0f       	add	r30, r20
    20cc:	f5 1f       	adc	r31, r21
    20ce:	81 81       	ldd	r24, Z+1	; 0x01
    20d0:	01 c0       	rjmp	.+2      	; 0x20d4 <vfprintf+0x368>
    20d2:	80 e3       	ldi	r24, 0x30	; 48
    20d4:	71 e0       	ldi	r23, 0x01	; 1
    20d6:	67 1a       	sub	r6, r23
    20d8:	71 08       	sbc	r7, r1
    20da:	4f 5f       	subi	r20, 0xFF	; 255
    20dc:	5f 4f       	sbci	r21, 0xFF	; 255
    20de:	ee 85       	ldd	r30, Y+14	; 0x0e
    20e0:	ff 85       	ldd	r31, Y+15	; 0x0f
    20e2:	6e 16       	cp	r6, r30
    20e4:	7f 06       	cpc	r7, r31
    20e6:	6c f0       	brlt	.+26     	; 0x2102 <vfprintf+0x396>
    20e8:	b7 01       	movw	r22, r14
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	2b 8b       	std	Y+19, r18	; 0x13
    20ee:	3a 8b       	std	Y+18, r19	; 0x12
    20f0:	48 8b       	std	Y+16, r20	; 0x10
    20f2:	59 8b       	std	Y+17, r21	; 0x11
    20f4:	0e 94 9f 14 	call	0x293e	; 0x293e <fputc>
    20f8:	2b 89       	ldd	r18, Y+19	; 0x13
    20fa:	3a 89       	ldd	r19, Y+18	; 0x12
    20fc:	48 89       	ldd	r20, Y+16	; 0x10
    20fe:	59 89       	ldd	r21, Y+17	; 0x11
    2100:	ca cf       	rjmp	.-108    	; 0x2096 <vfprintf+0x32a>
    2102:	6c 14       	cp	r6, r12
    2104:	7d 04       	cpc	r7, r13
    2106:	39 f4       	brne	.+14     	; 0x2116 <vfprintf+0x3aa>
    2108:	9a 81       	ldd	r25, Y+2	; 0x02
    210a:	96 33       	cpi	r25, 0x36	; 54
    210c:	18 f4       	brcc	.+6      	; 0x2114 <vfprintf+0x3a8>
    210e:	95 33       	cpi	r25, 0x35	; 53
    2110:	11 f4       	brne	.+4      	; 0x2116 <vfprintf+0x3aa>
    2112:	04 ff       	sbrs	r16, 4
    2114:	81 e3       	ldi	r24, 0x31	; 49
    2116:	b7 01       	movw	r22, r14
    2118:	90 e0       	ldi	r25, 0x00	; 0
    211a:	4b c0       	rjmp	.+150    	; 0x21b2 <vfprintf+0x446>
    211c:	8a 81       	ldd	r24, Y+2	; 0x02
    211e:	81 33       	cpi	r24, 0x31	; 49
    2120:	09 f0       	breq	.+2      	; 0x2124 <vfprintf+0x3b8>
    2122:	0f 7e       	andi	r16, 0xEF	; 239
    2124:	b7 01       	movw	r22, r14
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	0e 94 9f 14 	call	0x293e	; 0x293e <fputc>
    212c:	11 11       	cpse	r17, r1
    212e:	05 c0       	rjmp	.+10     	; 0x213a <vfprintf+0x3ce>
    2130:	74 fe       	sbrs	r7, 4
    2132:	18 c0       	rjmp	.+48     	; 0x2164 <vfprintf+0x3f8>
    2134:	85 e4       	ldi	r24, 0x45	; 69
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	17 c0       	rjmp	.+46     	; 0x2168 <vfprintf+0x3fc>
    213a:	b7 01       	movw	r22, r14
    213c:	8e e2       	ldi	r24, 0x2E	; 46
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	0e 94 9f 14 	call	0x293e	; 0x293e <fputc>
    2144:	82 e0       	ldi	r24, 0x02	; 2
    2146:	66 24       	eor	r6, r6
    2148:	63 94       	inc	r6
    214a:	68 0e       	add	r6, r24
    214c:	f4 01       	movw	r30, r8
    214e:	e8 0f       	add	r30, r24
    2150:	f1 1d       	adc	r31, r1
    2152:	80 81       	ld	r24, Z
    2154:	b7 01       	movw	r22, r14
    2156:	90 e0       	ldi	r25, 0x00	; 0
    2158:	0e 94 9f 14 	call	0x293e	; 0x293e <fputc>
    215c:	11 50       	subi	r17, 0x01	; 1
    215e:	41 f3       	breq	.-48     	; 0x2130 <vfprintf+0x3c4>
    2160:	86 2d       	mov	r24, r6
    2162:	f1 cf       	rjmp	.-30     	; 0x2146 <vfprintf+0x3da>
    2164:	85 e6       	ldi	r24, 0x65	; 101
    2166:	90 e0       	ldi	r25, 0x00	; 0
    2168:	b7 01       	movw	r22, r14
    216a:	0e 94 9f 14 	call	0x293e	; 0x293e <fputc>
    216e:	d7 fc       	sbrc	r13, 7
    2170:	05 c0       	rjmp	.+10     	; 0x217c <vfprintf+0x410>
    2172:	c1 14       	cp	r12, r1
    2174:	d1 04       	cpc	r13, r1
    2176:	39 f4       	brne	.+14     	; 0x2186 <vfprintf+0x41a>
    2178:	04 ff       	sbrs	r16, 4
    217a:	05 c0       	rjmp	.+10     	; 0x2186 <vfprintf+0x41a>
    217c:	d1 94       	neg	r13
    217e:	c1 94       	neg	r12
    2180:	d1 08       	sbc	r13, r1
    2182:	8d e2       	ldi	r24, 0x2D	; 45
    2184:	01 c0       	rjmp	.+2      	; 0x2188 <vfprintf+0x41c>
    2186:	8b e2       	ldi	r24, 0x2B	; 43
    2188:	b7 01       	movw	r22, r14
    218a:	90 e0       	ldi	r25, 0x00	; 0
    218c:	0e 94 9f 14 	call	0x293e	; 0x293e <fputc>
    2190:	80 e3       	ldi	r24, 0x30	; 48
    2192:	6a e0       	ldi	r22, 0x0A	; 10
    2194:	c6 16       	cp	r12, r22
    2196:	d1 04       	cpc	r13, r1
    2198:	2c f0       	brlt	.+10     	; 0x21a4 <vfprintf+0x438>
    219a:	8f 5f       	subi	r24, 0xFF	; 255
    219c:	fa e0       	ldi	r31, 0x0A	; 10
    219e:	cf 1a       	sub	r12, r31
    21a0:	d1 08       	sbc	r13, r1
    21a2:	f7 cf       	rjmp	.-18     	; 0x2192 <vfprintf+0x426>
    21a4:	b7 01       	movw	r22, r14
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	0e 94 9f 14 	call	0x293e	; 0x293e <fputc>
    21ac:	b7 01       	movw	r22, r14
    21ae:	c6 01       	movw	r24, r12
    21b0:	c0 96       	adiw	r24, 0x30	; 48
    21b2:	0e 94 9f 14 	call	0x293e	; 0x293e <fputc>
    21b6:	41 c1       	rjmp	.+642    	; 0x243a <__stack+0x23b>
    21b8:	83 36       	cpi	r24, 0x63	; 99
    21ba:	31 f0       	breq	.+12     	; 0x21c8 <vfprintf+0x45c>
    21bc:	83 37       	cpi	r24, 0x73	; 115
    21be:	79 f0       	breq	.+30     	; 0x21de <vfprintf+0x472>
    21c0:	83 35       	cpi	r24, 0x53	; 83
    21c2:	09 f0       	breq	.+2      	; 0x21c6 <vfprintf+0x45a>
    21c4:	58 c0       	rjmp	.+176    	; 0x2276 <__stack+0x77>
    21c6:	21 c0       	rjmp	.+66     	; 0x220a <__stack+0xb>
    21c8:	56 01       	movw	r10, r12
    21ca:	72 e0       	ldi	r23, 0x02	; 2
    21cc:	a7 0e       	add	r10, r23
    21ce:	b1 1c       	adc	r11, r1
    21d0:	f6 01       	movw	r30, r12
    21d2:	80 81       	ld	r24, Z
    21d4:	89 83       	std	Y+1, r24	; 0x01
    21d6:	01 e0       	ldi	r16, 0x01	; 1
    21d8:	10 e0       	ldi	r17, 0x00	; 0
    21da:	64 01       	movw	r12, r8
    21dc:	14 c0       	rjmp	.+40     	; 0x2206 <__stack+0x7>
    21de:	56 01       	movw	r10, r12
    21e0:	f2 e0       	ldi	r31, 0x02	; 2
    21e2:	af 0e       	add	r10, r31
    21e4:	b1 1c       	adc	r11, r1
    21e6:	f6 01       	movw	r30, r12
    21e8:	c0 80       	ld	r12, Z
    21ea:	d1 80       	ldd	r13, Z+1	; 0x01
    21ec:	26 ff       	sbrs	r18, 6
    21ee:	03 c0       	rjmp	.+6      	; 0x21f6 <vfprintf+0x48a>
    21f0:	61 2f       	mov	r22, r17
    21f2:	70 e0       	ldi	r23, 0x00	; 0
    21f4:	02 c0       	rjmp	.+4      	; 0x21fa <vfprintf+0x48e>
    21f6:	6f ef       	ldi	r22, 0xFF	; 255
    21f8:	7f ef       	ldi	r23, 0xFF	; 255
    21fa:	c6 01       	movw	r24, r12
    21fc:	2b 8b       	std	Y+19, r18	; 0x13
    21fe:	0e 94 94 14 	call	0x2928	; 0x2928 <strnlen>
    2202:	8c 01       	movw	r16, r24
    2204:	2b 89       	ldd	r18, Y+19	; 0x13
    2206:	2f 77       	andi	r18, 0x7F	; 127
    2208:	15 c0       	rjmp	.+42     	; 0x2234 <__stack+0x35>
    220a:	56 01       	movw	r10, r12
    220c:	f2 e0       	ldi	r31, 0x02	; 2
    220e:	af 0e       	add	r10, r31
    2210:	b1 1c       	adc	r11, r1
    2212:	f6 01       	movw	r30, r12
    2214:	c0 80       	ld	r12, Z
    2216:	d1 80       	ldd	r13, Z+1	; 0x01
    2218:	26 ff       	sbrs	r18, 6
    221a:	03 c0       	rjmp	.+6      	; 0x2222 <__stack+0x23>
    221c:	61 2f       	mov	r22, r17
    221e:	70 e0       	ldi	r23, 0x00	; 0
    2220:	02 c0       	rjmp	.+4      	; 0x2226 <__stack+0x27>
    2222:	6f ef       	ldi	r22, 0xFF	; 255
    2224:	7f ef       	ldi	r23, 0xFF	; 255
    2226:	c6 01       	movw	r24, r12
    2228:	2b 8b       	std	Y+19, r18	; 0x13
    222a:	0e 94 89 14 	call	0x2912	; 0x2912 <strnlen_P>
    222e:	8c 01       	movw	r16, r24
    2230:	2b 89       	ldd	r18, Y+19	; 0x13
    2232:	20 68       	ori	r18, 0x80	; 128
    2234:	72 2e       	mov	r7, r18
    2236:	23 fd       	sbrc	r18, 3
    2238:	1a c0       	rjmp	.+52     	; 0x226e <__stack+0x6f>
    223a:	85 2d       	mov	r24, r5
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	08 17       	cp	r16, r24
    2240:	19 07       	cpc	r17, r25
    2242:	a8 f4       	brcc	.+42     	; 0x226e <__stack+0x6f>
    2244:	b7 01       	movw	r22, r14
    2246:	80 e2       	ldi	r24, 0x20	; 32
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	0e 94 9f 14 	call	0x293e	; 0x293e <fputc>
    224e:	5a 94       	dec	r5
    2250:	f4 cf       	rjmp	.-24     	; 0x223a <__stack+0x3b>
    2252:	f6 01       	movw	r30, r12
    2254:	77 fc       	sbrc	r7, 7
    2256:	85 91       	lpm	r24, Z+
    2258:	77 fe       	sbrs	r7, 7
    225a:	81 91       	ld	r24, Z+
    225c:	6f 01       	movw	r12, r30
    225e:	b7 01       	movw	r22, r14
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	0e 94 9f 14 	call	0x293e	; 0x293e <fputc>
    2266:	51 10       	cpse	r5, r1
    2268:	5a 94       	dec	r5
    226a:	01 50       	subi	r16, 0x01	; 1
    226c:	11 09       	sbc	r17, r1
    226e:	01 15       	cp	r16, r1
    2270:	11 05       	cpc	r17, r1
    2272:	79 f7       	brne	.-34     	; 0x2252 <__stack+0x53>
    2274:	e2 c0       	rjmp	.+452    	; 0x243a <__stack+0x23b>
    2276:	84 36       	cpi	r24, 0x64	; 100
    2278:	11 f0       	breq	.+4      	; 0x227e <__stack+0x7f>
    227a:	89 36       	cpi	r24, 0x69	; 105
    227c:	51 f5       	brne	.+84     	; 0x22d2 <__stack+0xd3>
    227e:	56 01       	movw	r10, r12
    2280:	27 ff       	sbrs	r18, 7
    2282:	09 c0       	rjmp	.+18     	; 0x2296 <__stack+0x97>
    2284:	f4 e0       	ldi	r31, 0x04	; 4
    2286:	af 0e       	add	r10, r31
    2288:	b1 1c       	adc	r11, r1
    228a:	f6 01       	movw	r30, r12
    228c:	60 81       	ld	r22, Z
    228e:	71 81       	ldd	r23, Z+1	; 0x01
    2290:	82 81       	ldd	r24, Z+2	; 0x02
    2292:	93 81       	ldd	r25, Z+3	; 0x03
    2294:	0a c0       	rjmp	.+20     	; 0x22aa <__stack+0xab>
    2296:	f2 e0       	ldi	r31, 0x02	; 2
    2298:	af 0e       	add	r10, r31
    229a:	b1 1c       	adc	r11, r1
    229c:	f6 01       	movw	r30, r12
    229e:	60 81       	ld	r22, Z
    22a0:	71 81       	ldd	r23, Z+1	; 0x01
    22a2:	88 27       	eor	r24, r24
    22a4:	77 fd       	sbrc	r23, 7
    22a6:	80 95       	com	r24
    22a8:	98 2f       	mov	r25, r24
    22aa:	02 2f       	mov	r16, r18
    22ac:	0f 76       	andi	r16, 0x6F	; 111
    22ae:	97 ff       	sbrs	r25, 7
    22b0:	08 c0       	rjmp	.+16     	; 0x22c2 <__stack+0xc3>
    22b2:	90 95       	com	r25
    22b4:	80 95       	com	r24
    22b6:	70 95       	com	r23
    22b8:	61 95       	neg	r22
    22ba:	7f 4f       	sbci	r23, 0xFF	; 255
    22bc:	8f 4f       	sbci	r24, 0xFF	; 255
    22be:	9f 4f       	sbci	r25, 0xFF	; 255
    22c0:	00 68       	ori	r16, 0x80	; 128
    22c2:	2a e0       	ldi	r18, 0x0A	; 10
    22c4:	30 e0       	ldi	r19, 0x00	; 0
    22c6:	a4 01       	movw	r20, r8
    22c8:	0e 94 12 15 	call	0x2a24	; 0x2a24 <__ultoa_invert>
    22cc:	c8 2e       	mov	r12, r24
    22ce:	c8 18       	sub	r12, r8
    22d0:	3e c0       	rjmp	.+124    	; 0x234e <__stack+0x14f>
    22d2:	02 2f       	mov	r16, r18
    22d4:	85 37       	cpi	r24, 0x75	; 117
    22d6:	21 f4       	brne	.+8      	; 0x22e0 <__stack+0xe1>
    22d8:	0f 7e       	andi	r16, 0xEF	; 239
    22da:	2a e0       	ldi	r18, 0x0A	; 10
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	1d c0       	rjmp	.+58     	; 0x231a <__stack+0x11b>
    22e0:	09 7f       	andi	r16, 0xF9	; 249
    22e2:	8f 36       	cpi	r24, 0x6F	; 111
    22e4:	91 f0       	breq	.+36     	; 0x230a <__stack+0x10b>
    22e6:	18 f4       	brcc	.+6      	; 0x22ee <__stack+0xef>
    22e8:	88 35       	cpi	r24, 0x58	; 88
    22ea:	59 f0       	breq	.+22     	; 0x2302 <__stack+0x103>
    22ec:	b0 c0       	rjmp	.+352    	; 0x244e <__stack+0x24f>
    22ee:	80 37       	cpi	r24, 0x70	; 112
    22f0:	19 f0       	breq	.+6      	; 0x22f8 <__stack+0xf9>
    22f2:	88 37       	cpi	r24, 0x78	; 120
    22f4:	11 f0       	breq	.+4      	; 0x22fa <__stack+0xfb>
    22f6:	ab c0       	rjmp	.+342    	; 0x244e <__stack+0x24f>
    22f8:	00 61       	ori	r16, 0x10	; 16
    22fa:	04 ff       	sbrs	r16, 4
    22fc:	09 c0       	rjmp	.+18     	; 0x2310 <__stack+0x111>
    22fe:	04 60       	ori	r16, 0x04	; 4
    2300:	07 c0       	rjmp	.+14     	; 0x2310 <__stack+0x111>
    2302:	24 ff       	sbrs	r18, 4
    2304:	08 c0       	rjmp	.+16     	; 0x2316 <__stack+0x117>
    2306:	06 60       	ori	r16, 0x06	; 6
    2308:	06 c0       	rjmp	.+12     	; 0x2316 <__stack+0x117>
    230a:	28 e0       	ldi	r18, 0x08	; 8
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	05 c0       	rjmp	.+10     	; 0x231a <__stack+0x11b>
    2310:	20 e1       	ldi	r18, 0x10	; 16
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	02 c0       	rjmp	.+4      	; 0x231a <__stack+0x11b>
    2316:	20 e1       	ldi	r18, 0x10	; 16
    2318:	32 e0       	ldi	r19, 0x02	; 2
    231a:	56 01       	movw	r10, r12
    231c:	07 ff       	sbrs	r16, 7
    231e:	09 c0       	rjmp	.+18     	; 0x2332 <__stack+0x133>
    2320:	f4 e0       	ldi	r31, 0x04	; 4
    2322:	af 0e       	add	r10, r31
    2324:	b1 1c       	adc	r11, r1
    2326:	f6 01       	movw	r30, r12
    2328:	60 81       	ld	r22, Z
    232a:	71 81       	ldd	r23, Z+1	; 0x01
    232c:	82 81       	ldd	r24, Z+2	; 0x02
    232e:	93 81       	ldd	r25, Z+3	; 0x03
    2330:	08 c0       	rjmp	.+16     	; 0x2342 <__stack+0x143>
    2332:	f2 e0       	ldi	r31, 0x02	; 2
    2334:	af 0e       	add	r10, r31
    2336:	b1 1c       	adc	r11, r1
    2338:	f6 01       	movw	r30, r12
    233a:	60 81       	ld	r22, Z
    233c:	71 81       	ldd	r23, Z+1	; 0x01
    233e:	80 e0       	ldi	r24, 0x00	; 0
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	a4 01       	movw	r20, r8
    2344:	0e 94 12 15 	call	0x2a24	; 0x2a24 <__ultoa_invert>
    2348:	c8 2e       	mov	r12, r24
    234a:	c8 18       	sub	r12, r8
    234c:	0f 77       	andi	r16, 0x7F	; 127
    234e:	06 ff       	sbrs	r16, 6
    2350:	0b c0       	rjmp	.+22     	; 0x2368 <__stack+0x169>
    2352:	20 2f       	mov	r18, r16
    2354:	2e 7f       	andi	r18, 0xFE	; 254
    2356:	c1 16       	cp	r12, r17
    2358:	50 f4       	brcc	.+20     	; 0x236e <__stack+0x16f>
    235a:	04 ff       	sbrs	r16, 4
    235c:	0a c0       	rjmp	.+20     	; 0x2372 <__stack+0x173>
    235e:	02 fd       	sbrc	r16, 2
    2360:	08 c0       	rjmp	.+16     	; 0x2372 <__stack+0x173>
    2362:	20 2f       	mov	r18, r16
    2364:	2e 7e       	andi	r18, 0xEE	; 238
    2366:	05 c0       	rjmp	.+10     	; 0x2372 <__stack+0x173>
    2368:	dc 2c       	mov	r13, r12
    236a:	20 2f       	mov	r18, r16
    236c:	03 c0       	rjmp	.+6      	; 0x2374 <__stack+0x175>
    236e:	dc 2c       	mov	r13, r12
    2370:	01 c0       	rjmp	.+2      	; 0x2374 <__stack+0x175>
    2372:	d1 2e       	mov	r13, r17
    2374:	24 ff       	sbrs	r18, 4
    2376:	0d c0       	rjmp	.+26     	; 0x2392 <__stack+0x193>
    2378:	fe 01       	movw	r30, r28
    237a:	ec 0d       	add	r30, r12
    237c:	f1 1d       	adc	r31, r1
    237e:	80 81       	ld	r24, Z
    2380:	80 33       	cpi	r24, 0x30	; 48
    2382:	11 f4       	brne	.+4      	; 0x2388 <__stack+0x189>
    2384:	29 7e       	andi	r18, 0xE9	; 233
    2386:	09 c0       	rjmp	.+18     	; 0x239a <__stack+0x19b>
    2388:	22 ff       	sbrs	r18, 2
    238a:	06 c0       	rjmp	.+12     	; 0x2398 <__stack+0x199>
    238c:	d3 94       	inc	r13
    238e:	d3 94       	inc	r13
    2390:	04 c0       	rjmp	.+8      	; 0x239a <__stack+0x19b>
    2392:	82 2f       	mov	r24, r18
    2394:	86 78       	andi	r24, 0x86	; 134
    2396:	09 f0       	breq	.+2      	; 0x239a <__stack+0x19b>
    2398:	d3 94       	inc	r13
    239a:	23 fd       	sbrc	r18, 3
    239c:	13 c0       	rjmp	.+38     	; 0x23c4 <__stack+0x1c5>
    239e:	20 ff       	sbrs	r18, 0
    23a0:	06 c0       	rjmp	.+12     	; 0x23ae <__stack+0x1af>
    23a2:	1c 2d       	mov	r17, r12
    23a4:	d5 14       	cp	r13, r5
    23a6:	18 f4       	brcc	.+6      	; 0x23ae <__stack+0x1af>
    23a8:	15 0d       	add	r17, r5
    23aa:	1d 19       	sub	r17, r13
    23ac:	d5 2c       	mov	r13, r5
    23ae:	d5 14       	cp	r13, r5
    23b0:	68 f4       	brcc	.+26     	; 0x23cc <__stack+0x1cd>
    23b2:	b7 01       	movw	r22, r14
    23b4:	80 e2       	ldi	r24, 0x20	; 32
    23b6:	90 e0       	ldi	r25, 0x00	; 0
    23b8:	2b 8b       	std	Y+19, r18	; 0x13
    23ba:	0e 94 9f 14 	call	0x293e	; 0x293e <fputc>
    23be:	d3 94       	inc	r13
    23c0:	2b 89       	ldd	r18, Y+19	; 0x13
    23c2:	f5 cf       	rjmp	.-22     	; 0x23ae <__stack+0x1af>
    23c4:	d5 14       	cp	r13, r5
    23c6:	10 f4       	brcc	.+4      	; 0x23cc <__stack+0x1cd>
    23c8:	5d 18       	sub	r5, r13
    23ca:	01 c0       	rjmp	.+2      	; 0x23ce <__stack+0x1cf>
    23cc:	51 2c       	mov	r5, r1
    23ce:	24 ff       	sbrs	r18, 4
    23d0:	12 c0       	rjmp	.+36     	; 0x23f6 <__stack+0x1f7>
    23d2:	b7 01       	movw	r22, r14
    23d4:	80 e3       	ldi	r24, 0x30	; 48
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	2b 8b       	std	Y+19, r18	; 0x13
    23da:	0e 94 9f 14 	call	0x293e	; 0x293e <fputc>
    23de:	2b 89       	ldd	r18, Y+19	; 0x13
    23e0:	22 ff       	sbrs	r18, 2
    23e2:	17 c0       	rjmp	.+46     	; 0x2412 <__stack+0x213>
    23e4:	21 ff       	sbrs	r18, 1
    23e6:	03 c0       	rjmp	.+6      	; 0x23ee <__stack+0x1ef>
    23e8:	88 e5       	ldi	r24, 0x58	; 88
    23ea:	90 e0       	ldi	r25, 0x00	; 0
    23ec:	02 c0       	rjmp	.+4      	; 0x23f2 <__stack+0x1f3>
    23ee:	88 e7       	ldi	r24, 0x78	; 120
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	b7 01       	movw	r22, r14
    23f4:	0c c0       	rjmp	.+24     	; 0x240e <__stack+0x20f>
    23f6:	82 2f       	mov	r24, r18
    23f8:	86 78       	andi	r24, 0x86	; 134
    23fa:	59 f0       	breq	.+22     	; 0x2412 <__stack+0x213>
    23fc:	21 fd       	sbrc	r18, 1
    23fe:	02 c0       	rjmp	.+4      	; 0x2404 <__stack+0x205>
    2400:	80 e2       	ldi	r24, 0x20	; 32
    2402:	01 c0       	rjmp	.+2      	; 0x2406 <__stack+0x207>
    2404:	8b e2       	ldi	r24, 0x2B	; 43
    2406:	27 fd       	sbrc	r18, 7
    2408:	8d e2       	ldi	r24, 0x2D	; 45
    240a:	b7 01       	movw	r22, r14
    240c:	90 e0       	ldi	r25, 0x00	; 0
    240e:	0e 94 9f 14 	call	0x293e	; 0x293e <fputc>
    2412:	c1 16       	cp	r12, r17
    2414:	38 f4       	brcc	.+14     	; 0x2424 <__stack+0x225>
    2416:	b7 01       	movw	r22, r14
    2418:	80 e3       	ldi	r24, 0x30	; 48
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	0e 94 9f 14 	call	0x293e	; 0x293e <fputc>
    2420:	11 50       	subi	r17, 0x01	; 1
    2422:	f7 cf       	rjmp	.-18     	; 0x2412 <__stack+0x213>
    2424:	ca 94       	dec	r12
    2426:	f4 01       	movw	r30, r8
    2428:	ec 0d       	add	r30, r12
    242a:	f1 1d       	adc	r31, r1
    242c:	80 81       	ld	r24, Z
    242e:	b7 01       	movw	r22, r14
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	0e 94 9f 14 	call	0x293e	; 0x293e <fputc>
    2436:	c1 10       	cpse	r12, r1
    2438:	f5 cf       	rjmp	.-22     	; 0x2424 <__stack+0x225>
    243a:	55 20       	and	r5, r5
    243c:	09 f4       	brne	.+2      	; 0x2440 <__stack+0x241>
    243e:	c2 cc       	rjmp	.-1660   	; 0x1dc4 <vfprintf+0x58>
    2440:	b7 01       	movw	r22, r14
    2442:	80 e2       	ldi	r24, 0x20	; 32
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	0e 94 9f 14 	call	0x293e	; 0x293e <fputc>
    244a:	5a 94       	dec	r5
    244c:	f6 cf       	rjmp	.-20     	; 0x243a <__stack+0x23b>
    244e:	f7 01       	movw	r30, r14
    2450:	86 81       	ldd	r24, Z+6	; 0x06
    2452:	97 81       	ldd	r25, Z+7	; 0x07
    2454:	02 c0       	rjmp	.+4      	; 0x245a <__stack+0x25b>
    2456:	8f ef       	ldi	r24, 0xFF	; 255
    2458:	9f ef       	ldi	r25, 0xFF	; 255
    245a:	63 96       	adiw	r28, 0x13	; 19
    245c:	e2 e1       	ldi	r30, 0x12	; 18
    245e:	0c 94 6f 12 	jmp	0x24de	; 0x24de <__epilogue_restores__>

00002462 <__udivmodsi4>:
    2462:	a1 e2       	ldi	r26, 0x21	; 33
    2464:	1a 2e       	mov	r1, r26
    2466:	aa 1b       	sub	r26, r26
    2468:	bb 1b       	sub	r27, r27
    246a:	fd 01       	movw	r30, r26
    246c:	0d c0       	rjmp	.+26     	; 0x2488 <__udivmodsi4_ep>

0000246e <__udivmodsi4_loop>:
    246e:	aa 1f       	adc	r26, r26
    2470:	bb 1f       	adc	r27, r27
    2472:	ee 1f       	adc	r30, r30
    2474:	ff 1f       	adc	r31, r31
    2476:	a2 17       	cp	r26, r18
    2478:	b3 07       	cpc	r27, r19
    247a:	e4 07       	cpc	r30, r20
    247c:	f5 07       	cpc	r31, r21
    247e:	20 f0       	brcs	.+8      	; 0x2488 <__udivmodsi4_ep>
    2480:	a2 1b       	sub	r26, r18
    2482:	b3 0b       	sbc	r27, r19
    2484:	e4 0b       	sbc	r30, r20
    2486:	f5 0b       	sbc	r31, r21

00002488 <__udivmodsi4_ep>:
    2488:	66 1f       	adc	r22, r22
    248a:	77 1f       	adc	r23, r23
    248c:	88 1f       	adc	r24, r24
    248e:	99 1f       	adc	r25, r25
    2490:	1a 94       	dec	r1
    2492:	69 f7       	brne	.-38     	; 0x246e <__udivmodsi4_loop>
    2494:	60 95       	com	r22
    2496:	70 95       	com	r23
    2498:	80 95       	com	r24
    249a:	90 95       	com	r25
    249c:	9b 01       	movw	r18, r22
    249e:	ac 01       	movw	r20, r24
    24a0:	bd 01       	movw	r22, r26
    24a2:	cf 01       	movw	r24, r30
    24a4:	08 95       	ret

000024a6 <__prologue_saves__>:
    24a6:	2f 92       	push	r2
    24a8:	3f 92       	push	r3
    24aa:	4f 92       	push	r4
    24ac:	5f 92       	push	r5
    24ae:	6f 92       	push	r6
    24b0:	7f 92       	push	r7
    24b2:	8f 92       	push	r8
    24b4:	9f 92       	push	r9
    24b6:	af 92       	push	r10
    24b8:	bf 92       	push	r11
    24ba:	cf 92       	push	r12
    24bc:	df 92       	push	r13
    24be:	ef 92       	push	r14
    24c0:	ff 92       	push	r15
    24c2:	0f 93       	push	r16
    24c4:	1f 93       	push	r17
    24c6:	cf 93       	push	r28
    24c8:	df 93       	push	r29
    24ca:	cd b7       	in	r28, 0x3d	; 61
    24cc:	de b7       	in	r29, 0x3e	; 62
    24ce:	ca 1b       	sub	r28, r26
    24d0:	db 0b       	sbc	r29, r27
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	de bf       	out	0x3e, r29	; 62
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	cd bf       	out	0x3d, r28	; 61
    24dc:	09 94       	ijmp

000024de <__epilogue_restores__>:
    24de:	2a 88       	ldd	r2, Y+18	; 0x12
    24e0:	39 88       	ldd	r3, Y+17	; 0x11
    24e2:	48 88       	ldd	r4, Y+16	; 0x10
    24e4:	5f 84       	ldd	r5, Y+15	; 0x0f
    24e6:	6e 84       	ldd	r6, Y+14	; 0x0e
    24e8:	7d 84       	ldd	r7, Y+13	; 0x0d
    24ea:	8c 84       	ldd	r8, Y+12	; 0x0c
    24ec:	9b 84       	ldd	r9, Y+11	; 0x0b
    24ee:	aa 84       	ldd	r10, Y+10	; 0x0a
    24f0:	b9 84       	ldd	r11, Y+9	; 0x09
    24f2:	c8 84       	ldd	r12, Y+8	; 0x08
    24f4:	df 80       	ldd	r13, Y+7	; 0x07
    24f6:	ee 80       	ldd	r14, Y+6	; 0x06
    24f8:	fd 80       	ldd	r15, Y+5	; 0x05
    24fa:	0c 81       	ldd	r16, Y+4	; 0x04
    24fc:	1b 81       	ldd	r17, Y+3	; 0x03
    24fe:	aa 81       	ldd	r26, Y+2	; 0x02
    2500:	b9 81       	ldd	r27, Y+1	; 0x01
    2502:	ce 0f       	add	r28, r30
    2504:	d1 1d       	adc	r29, r1
    2506:	0f b6       	in	r0, 0x3f	; 63
    2508:	f8 94       	cli
    250a:	de bf       	out	0x3e, r29	; 62
    250c:	0f be       	out	0x3f, r0	; 63
    250e:	cd bf       	out	0x3d, r28	; 61
    2510:	ed 01       	movw	r28, r26
    2512:	08 95       	ret

00002514 <malloc>:
    2514:	cf 93       	push	r28
    2516:	df 93       	push	r29
    2518:	82 30       	cpi	r24, 0x02	; 2
    251a:	91 05       	cpc	r25, r1
    251c:	10 f4       	brcc	.+4      	; 0x2522 <malloc+0xe>
    251e:	82 e0       	ldi	r24, 0x02	; 2
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	e0 91 2e 08 	lds	r30, 0x082E
    2526:	f0 91 2f 08 	lds	r31, 0x082F
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	a0 e0       	ldi	r26, 0x00	; 0
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	30 97       	sbiw	r30, 0x00	; 0
    2534:	39 f1       	breq	.+78     	; 0x2584 <malloc+0x70>
    2536:	40 81       	ld	r20, Z
    2538:	51 81       	ldd	r21, Z+1	; 0x01
    253a:	48 17       	cp	r20, r24
    253c:	59 07       	cpc	r21, r25
    253e:	b8 f0       	brcs	.+46     	; 0x256e <malloc+0x5a>
    2540:	48 17       	cp	r20, r24
    2542:	59 07       	cpc	r21, r25
    2544:	71 f4       	brne	.+28     	; 0x2562 <malloc+0x4e>
    2546:	82 81       	ldd	r24, Z+2	; 0x02
    2548:	93 81       	ldd	r25, Z+3	; 0x03
    254a:	10 97       	sbiw	r26, 0x00	; 0
    254c:	29 f0       	breq	.+10     	; 0x2558 <malloc+0x44>
    254e:	13 96       	adiw	r26, 0x03	; 3
    2550:	9c 93       	st	X, r25
    2552:	8e 93       	st	-X, r24
    2554:	12 97       	sbiw	r26, 0x02	; 2
    2556:	2c c0       	rjmp	.+88     	; 0x25b0 <malloc+0x9c>
    2558:	90 93 2f 08 	sts	0x082F, r25
    255c:	80 93 2e 08 	sts	0x082E, r24
    2560:	27 c0       	rjmp	.+78     	; 0x25b0 <malloc+0x9c>
    2562:	21 15       	cp	r18, r1
    2564:	31 05       	cpc	r19, r1
    2566:	31 f0       	breq	.+12     	; 0x2574 <malloc+0x60>
    2568:	42 17       	cp	r20, r18
    256a:	53 07       	cpc	r21, r19
    256c:	18 f0       	brcs	.+6      	; 0x2574 <malloc+0x60>
    256e:	a9 01       	movw	r20, r18
    2570:	db 01       	movw	r26, r22
    2572:	01 c0       	rjmp	.+2      	; 0x2576 <malloc+0x62>
    2574:	ef 01       	movw	r28, r30
    2576:	9a 01       	movw	r18, r20
    2578:	bd 01       	movw	r22, r26
    257a:	df 01       	movw	r26, r30
    257c:	02 80       	ldd	r0, Z+2	; 0x02
    257e:	f3 81       	ldd	r31, Z+3	; 0x03
    2580:	e0 2d       	mov	r30, r0
    2582:	d7 cf       	rjmp	.-82     	; 0x2532 <malloc+0x1e>
    2584:	21 15       	cp	r18, r1
    2586:	31 05       	cpc	r19, r1
    2588:	f9 f0       	breq	.+62     	; 0x25c8 <malloc+0xb4>
    258a:	28 1b       	sub	r18, r24
    258c:	39 0b       	sbc	r19, r25
    258e:	24 30       	cpi	r18, 0x04	; 4
    2590:	31 05       	cpc	r19, r1
    2592:	80 f4       	brcc	.+32     	; 0x25b4 <malloc+0xa0>
    2594:	8a 81       	ldd	r24, Y+2	; 0x02
    2596:	9b 81       	ldd	r25, Y+3	; 0x03
    2598:	61 15       	cp	r22, r1
    259a:	71 05       	cpc	r23, r1
    259c:	21 f0       	breq	.+8      	; 0x25a6 <malloc+0x92>
    259e:	fb 01       	movw	r30, r22
    25a0:	93 83       	std	Z+3, r25	; 0x03
    25a2:	82 83       	std	Z+2, r24	; 0x02
    25a4:	04 c0       	rjmp	.+8      	; 0x25ae <malloc+0x9a>
    25a6:	90 93 2f 08 	sts	0x082F, r25
    25aa:	80 93 2e 08 	sts	0x082E, r24
    25ae:	fe 01       	movw	r30, r28
    25b0:	32 96       	adiw	r30, 0x02	; 2
    25b2:	44 c0       	rjmp	.+136    	; 0x263c <malloc+0x128>
    25b4:	fe 01       	movw	r30, r28
    25b6:	e2 0f       	add	r30, r18
    25b8:	f3 1f       	adc	r31, r19
    25ba:	81 93       	st	Z+, r24
    25bc:	91 93       	st	Z+, r25
    25be:	22 50       	subi	r18, 0x02	; 2
    25c0:	31 09       	sbc	r19, r1
    25c2:	39 83       	std	Y+1, r19	; 0x01
    25c4:	28 83       	st	Y, r18
    25c6:	3a c0       	rjmp	.+116    	; 0x263c <malloc+0x128>
    25c8:	20 91 2c 08 	lds	r18, 0x082C
    25cc:	30 91 2d 08 	lds	r19, 0x082D
    25d0:	23 2b       	or	r18, r19
    25d2:	41 f4       	brne	.+16     	; 0x25e4 <malloc+0xd0>
    25d4:	20 91 02 02 	lds	r18, 0x0202
    25d8:	30 91 03 02 	lds	r19, 0x0203
    25dc:	30 93 2d 08 	sts	0x082D, r19
    25e0:	20 93 2c 08 	sts	0x082C, r18
    25e4:	20 91 00 02 	lds	r18, 0x0200
    25e8:	30 91 01 02 	lds	r19, 0x0201
    25ec:	21 15       	cp	r18, r1
    25ee:	31 05       	cpc	r19, r1
    25f0:	41 f4       	brne	.+16     	; 0x2602 <malloc+0xee>
    25f2:	2d b7       	in	r18, 0x3d	; 61
    25f4:	3e b7       	in	r19, 0x3e	; 62
    25f6:	40 91 04 02 	lds	r20, 0x0204
    25fa:	50 91 05 02 	lds	r21, 0x0205
    25fe:	24 1b       	sub	r18, r20
    2600:	35 0b       	sbc	r19, r21
    2602:	e0 91 2c 08 	lds	r30, 0x082C
    2606:	f0 91 2d 08 	lds	r31, 0x082D
    260a:	e2 17       	cp	r30, r18
    260c:	f3 07       	cpc	r31, r19
    260e:	a0 f4       	brcc	.+40     	; 0x2638 <malloc+0x124>
    2610:	2e 1b       	sub	r18, r30
    2612:	3f 0b       	sbc	r19, r31
    2614:	28 17       	cp	r18, r24
    2616:	39 07       	cpc	r19, r25
    2618:	78 f0       	brcs	.+30     	; 0x2638 <malloc+0x124>
    261a:	ac 01       	movw	r20, r24
    261c:	4e 5f       	subi	r20, 0xFE	; 254
    261e:	5f 4f       	sbci	r21, 0xFF	; 255
    2620:	24 17       	cp	r18, r20
    2622:	35 07       	cpc	r19, r21
    2624:	48 f0       	brcs	.+18     	; 0x2638 <malloc+0x124>
    2626:	4e 0f       	add	r20, r30
    2628:	5f 1f       	adc	r21, r31
    262a:	50 93 2d 08 	sts	0x082D, r21
    262e:	40 93 2c 08 	sts	0x082C, r20
    2632:	81 93       	st	Z+, r24
    2634:	91 93       	st	Z+, r25
    2636:	02 c0       	rjmp	.+4      	; 0x263c <malloc+0x128>
    2638:	e0 e0       	ldi	r30, 0x00	; 0
    263a:	f0 e0       	ldi	r31, 0x00	; 0
    263c:	cf 01       	movw	r24, r30
    263e:	df 91       	pop	r29
    2640:	cf 91       	pop	r28
    2642:	08 95       	ret

00002644 <free>:
    2644:	cf 93       	push	r28
    2646:	df 93       	push	r29
    2648:	00 97       	sbiw	r24, 0x00	; 0
    264a:	09 f4       	brne	.+2      	; 0x264e <free+0xa>
    264c:	87 c0       	rjmp	.+270    	; 0x275c <free+0x118>
    264e:	fc 01       	movw	r30, r24
    2650:	32 97       	sbiw	r30, 0x02	; 2
    2652:	13 82       	std	Z+3, r1	; 0x03
    2654:	12 82       	std	Z+2, r1	; 0x02
    2656:	c0 91 2e 08 	lds	r28, 0x082E
    265a:	d0 91 2f 08 	lds	r29, 0x082F
    265e:	20 97       	sbiw	r28, 0x00	; 0
    2660:	81 f4       	brne	.+32     	; 0x2682 <free+0x3e>
    2662:	20 81       	ld	r18, Z
    2664:	31 81       	ldd	r19, Z+1	; 0x01
    2666:	28 0f       	add	r18, r24
    2668:	39 1f       	adc	r19, r25
    266a:	80 91 2c 08 	lds	r24, 0x082C
    266e:	90 91 2d 08 	lds	r25, 0x082D
    2672:	82 17       	cp	r24, r18
    2674:	93 07       	cpc	r25, r19
    2676:	79 f5       	brne	.+94     	; 0x26d6 <free+0x92>
    2678:	f0 93 2d 08 	sts	0x082D, r31
    267c:	e0 93 2c 08 	sts	0x082C, r30
    2680:	6d c0       	rjmp	.+218    	; 0x275c <free+0x118>
    2682:	de 01       	movw	r26, r28
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	ae 17       	cp	r26, r30
    268a:	bf 07       	cpc	r27, r31
    268c:	50 f4       	brcc	.+20     	; 0x26a2 <free+0x5e>
    268e:	12 96       	adiw	r26, 0x02	; 2
    2690:	4d 91       	ld	r20, X+
    2692:	5c 91       	ld	r21, X
    2694:	13 97       	sbiw	r26, 0x03	; 3
    2696:	9d 01       	movw	r18, r26
    2698:	41 15       	cp	r20, r1
    269a:	51 05       	cpc	r21, r1
    269c:	09 f1       	breq	.+66     	; 0x26e0 <free+0x9c>
    269e:	da 01       	movw	r26, r20
    26a0:	f3 cf       	rjmp	.-26     	; 0x2688 <free+0x44>
    26a2:	b3 83       	std	Z+3, r27	; 0x03
    26a4:	a2 83       	std	Z+2, r26	; 0x02
    26a6:	40 81       	ld	r20, Z
    26a8:	51 81       	ldd	r21, Z+1	; 0x01
    26aa:	84 0f       	add	r24, r20
    26ac:	95 1f       	adc	r25, r21
    26ae:	8a 17       	cp	r24, r26
    26b0:	9b 07       	cpc	r25, r27
    26b2:	71 f4       	brne	.+28     	; 0x26d0 <free+0x8c>
    26b4:	8d 91       	ld	r24, X+
    26b6:	9c 91       	ld	r25, X
    26b8:	11 97       	sbiw	r26, 0x01	; 1
    26ba:	84 0f       	add	r24, r20
    26bc:	95 1f       	adc	r25, r21
    26be:	02 96       	adiw	r24, 0x02	; 2
    26c0:	91 83       	std	Z+1, r25	; 0x01
    26c2:	80 83       	st	Z, r24
    26c4:	12 96       	adiw	r26, 0x02	; 2
    26c6:	8d 91       	ld	r24, X+
    26c8:	9c 91       	ld	r25, X
    26ca:	13 97       	sbiw	r26, 0x03	; 3
    26cc:	93 83       	std	Z+3, r25	; 0x03
    26ce:	82 83       	std	Z+2, r24	; 0x02
    26d0:	21 15       	cp	r18, r1
    26d2:	31 05       	cpc	r19, r1
    26d4:	29 f4       	brne	.+10     	; 0x26e0 <free+0x9c>
    26d6:	f0 93 2f 08 	sts	0x082F, r31
    26da:	e0 93 2e 08 	sts	0x082E, r30
    26de:	3e c0       	rjmp	.+124    	; 0x275c <free+0x118>
    26e0:	d9 01       	movw	r26, r18
    26e2:	13 96       	adiw	r26, 0x03	; 3
    26e4:	fc 93       	st	X, r31
    26e6:	ee 93       	st	-X, r30
    26e8:	12 97       	sbiw	r26, 0x02	; 2
    26ea:	4d 91       	ld	r20, X+
    26ec:	5d 91       	ld	r21, X+
    26ee:	a4 0f       	add	r26, r20
    26f0:	b5 1f       	adc	r27, r21
    26f2:	ea 17       	cp	r30, r26
    26f4:	fb 07       	cpc	r31, r27
    26f6:	79 f4       	brne	.+30     	; 0x2716 <free+0xd2>
    26f8:	80 81       	ld	r24, Z
    26fa:	91 81       	ldd	r25, Z+1	; 0x01
    26fc:	84 0f       	add	r24, r20
    26fe:	95 1f       	adc	r25, r21
    2700:	02 96       	adiw	r24, 0x02	; 2
    2702:	d9 01       	movw	r26, r18
    2704:	11 96       	adiw	r26, 0x01	; 1
    2706:	9c 93       	st	X, r25
    2708:	8e 93       	st	-X, r24
    270a:	82 81       	ldd	r24, Z+2	; 0x02
    270c:	93 81       	ldd	r25, Z+3	; 0x03
    270e:	13 96       	adiw	r26, 0x03	; 3
    2710:	9c 93       	st	X, r25
    2712:	8e 93       	st	-X, r24
    2714:	12 97       	sbiw	r26, 0x02	; 2
    2716:	e0 e0       	ldi	r30, 0x00	; 0
    2718:	f0 e0       	ldi	r31, 0x00	; 0
    271a:	8a 81       	ldd	r24, Y+2	; 0x02
    271c:	9b 81       	ldd	r25, Y+3	; 0x03
    271e:	00 97       	sbiw	r24, 0x00	; 0
    2720:	19 f0       	breq	.+6      	; 0x2728 <free+0xe4>
    2722:	fe 01       	movw	r30, r28
    2724:	ec 01       	movw	r28, r24
    2726:	f9 cf       	rjmp	.-14     	; 0x271a <free+0xd6>
    2728:	ce 01       	movw	r24, r28
    272a:	02 96       	adiw	r24, 0x02	; 2
    272c:	28 81       	ld	r18, Y
    272e:	39 81       	ldd	r19, Y+1	; 0x01
    2730:	82 0f       	add	r24, r18
    2732:	93 1f       	adc	r25, r19
    2734:	20 91 2c 08 	lds	r18, 0x082C
    2738:	30 91 2d 08 	lds	r19, 0x082D
    273c:	28 17       	cp	r18, r24
    273e:	39 07       	cpc	r19, r25
    2740:	69 f4       	brne	.+26     	; 0x275c <free+0x118>
    2742:	30 97       	sbiw	r30, 0x00	; 0
    2744:	29 f4       	brne	.+10     	; 0x2750 <free+0x10c>
    2746:	10 92 2f 08 	sts	0x082F, r1
    274a:	10 92 2e 08 	sts	0x082E, r1
    274e:	02 c0       	rjmp	.+4      	; 0x2754 <free+0x110>
    2750:	13 82       	std	Z+3, r1	; 0x03
    2752:	12 82       	std	Z+2, r1	; 0x02
    2754:	d0 93 2d 08 	sts	0x082D, r29
    2758:	c0 93 2c 08 	sts	0x082C, r28
    275c:	df 91       	pop	r29
    275e:	cf 91       	pop	r28
    2760:	08 95       	ret

00002762 <__ftoa_engine>:
    2762:	28 30       	cpi	r18, 0x08	; 8
    2764:	08 f0       	brcs	.+2      	; 0x2768 <__ftoa_engine+0x6>
    2766:	27 e0       	ldi	r18, 0x07	; 7
    2768:	33 27       	eor	r19, r19
    276a:	da 01       	movw	r26, r20
    276c:	99 0f       	add	r25, r25
    276e:	31 1d       	adc	r19, r1
    2770:	87 fd       	sbrc	r24, 7
    2772:	91 60       	ori	r25, 0x01	; 1
    2774:	00 96       	adiw	r24, 0x00	; 0
    2776:	61 05       	cpc	r22, r1
    2778:	71 05       	cpc	r23, r1
    277a:	39 f4       	brne	.+14     	; 0x278a <__ftoa_engine+0x28>
    277c:	32 60       	ori	r19, 0x02	; 2
    277e:	2e 5f       	subi	r18, 0xFE	; 254
    2780:	3d 93       	st	X+, r19
    2782:	30 e3       	ldi	r19, 0x30	; 48
    2784:	2a 95       	dec	r18
    2786:	e1 f7       	brne	.-8      	; 0x2780 <__ftoa_engine+0x1e>
    2788:	08 95       	ret
    278a:	9f 3f       	cpi	r25, 0xFF	; 255
    278c:	30 f0       	brcs	.+12     	; 0x279a <__ftoa_engine+0x38>
    278e:	80 38       	cpi	r24, 0x80	; 128
    2790:	71 05       	cpc	r23, r1
    2792:	61 05       	cpc	r22, r1
    2794:	09 f0       	breq	.+2      	; 0x2798 <__ftoa_engine+0x36>
    2796:	3c 5f       	subi	r19, 0xFC	; 252
    2798:	3c 5f       	subi	r19, 0xFC	; 252
    279a:	3d 93       	st	X+, r19
    279c:	91 30       	cpi	r25, 0x01	; 1
    279e:	08 f0       	brcs	.+2      	; 0x27a2 <__ftoa_engine+0x40>
    27a0:	80 68       	ori	r24, 0x80	; 128
    27a2:	91 1d       	adc	r25, r1
    27a4:	df 93       	push	r29
    27a6:	cf 93       	push	r28
    27a8:	1f 93       	push	r17
    27aa:	0f 93       	push	r16
    27ac:	ff 92       	push	r15
    27ae:	ef 92       	push	r14
    27b0:	19 2f       	mov	r17, r25
    27b2:	98 7f       	andi	r25, 0xF8	; 248
    27b4:	96 95       	lsr	r25
    27b6:	e9 2f       	mov	r30, r25
    27b8:	96 95       	lsr	r25
    27ba:	96 95       	lsr	r25
    27bc:	e9 0f       	add	r30, r25
    27be:	ff 27       	eor	r31, r31
    27c0:	ea 56       	subi	r30, 0x6A	; 106
    27c2:	fe 4f       	sbci	r31, 0xFE	; 254
    27c4:	99 27       	eor	r25, r25
    27c6:	33 27       	eor	r19, r19
    27c8:	ee 24       	eor	r14, r14
    27ca:	ff 24       	eor	r15, r15
    27cc:	a7 01       	movw	r20, r14
    27ce:	e7 01       	movw	r28, r14
    27d0:	05 90       	lpm	r0, Z+
    27d2:	08 94       	sec
    27d4:	07 94       	ror	r0
    27d6:	28 f4       	brcc	.+10     	; 0x27e2 <__ftoa_engine+0x80>
    27d8:	36 0f       	add	r19, r22
    27da:	e7 1e       	adc	r14, r23
    27dc:	f8 1e       	adc	r15, r24
    27de:	49 1f       	adc	r20, r25
    27e0:	51 1d       	adc	r21, r1
    27e2:	66 0f       	add	r22, r22
    27e4:	77 1f       	adc	r23, r23
    27e6:	88 1f       	adc	r24, r24
    27e8:	99 1f       	adc	r25, r25
    27ea:	06 94       	lsr	r0
    27ec:	a1 f7       	brne	.-24     	; 0x27d6 <__ftoa_engine+0x74>
    27ee:	05 90       	lpm	r0, Z+
    27f0:	07 94       	ror	r0
    27f2:	28 f4       	brcc	.+10     	; 0x27fe <__ftoa_engine+0x9c>
    27f4:	e7 0e       	add	r14, r23
    27f6:	f8 1e       	adc	r15, r24
    27f8:	49 1f       	adc	r20, r25
    27fa:	56 1f       	adc	r21, r22
    27fc:	c1 1d       	adc	r28, r1
    27fe:	77 0f       	add	r23, r23
    2800:	88 1f       	adc	r24, r24
    2802:	99 1f       	adc	r25, r25
    2804:	66 1f       	adc	r22, r22
    2806:	06 94       	lsr	r0
    2808:	a1 f7       	brne	.-24     	; 0x27f2 <__ftoa_engine+0x90>
    280a:	05 90       	lpm	r0, Z+
    280c:	07 94       	ror	r0
    280e:	28 f4       	brcc	.+10     	; 0x281a <__ftoa_engine+0xb8>
    2810:	f8 0e       	add	r15, r24
    2812:	49 1f       	adc	r20, r25
    2814:	56 1f       	adc	r21, r22
    2816:	c7 1f       	adc	r28, r23
    2818:	d1 1d       	adc	r29, r1
    281a:	88 0f       	add	r24, r24
    281c:	99 1f       	adc	r25, r25
    281e:	66 1f       	adc	r22, r22
    2820:	77 1f       	adc	r23, r23
    2822:	06 94       	lsr	r0
    2824:	a1 f7       	brne	.-24     	; 0x280e <__ftoa_engine+0xac>
    2826:	05 90       	lpm	r0, Z+
    2828:	07 94       	ror	r0
    282a:	20 f4       	brcc	.+8      	; 0x2834 <__ftoa_engine+0xd2>
    282c:	49 0f       	add	r20, r25
    282e:	56 1f       	adc	r21, r22
    2830:	c7 1f       	adc	r28, r23
    2832:	d8 1f       	adc	r29, r24
    2834:	99 0f       	add	r25, r25
    2836:	66 1f       	adc	r22, r22
    2838:	77 1f       	adc	r23, r23
    283a:	88 1f       	adc	r24, r24
    283c:	06 94       	lsr	r0
    283e:	a9 f7       	brne	.-22     	; 0x282a <__ftoa_engine+0xc8>
    2840:	84 91       	lpm	r24, Z
    2842:	10 95       	com	r17
    2844:	17 70       	andi	r17, 0x07	; 7
    2846:	41 f0       	breq	.+16     	; 0x2858 <__ftoa_engine+0xf6>
    2848:	d6 95       	lsr	r29
    284a:	c7 95       	ror	r28
    284c:	57 95       	ror	r21
    284e:	47 95       	ror	r20
    2850:	f7 94       	ror	r15
    2852:	e7 94       	ror	r14
    2854:	1a 95       	dec	r17
    2856:	c1 f7       	brne	.-16     	; 0x2848 <__ftoa_engine+0xe6>
    2858:	ec e3       	ldi	r30, 0x3C	; 60
    285a:	f1 e0       	ldi	r31, 0x01	; 1
    285c:	68 94       	set
    285e:	15 90       	lpm	r1, Z+
    2860:	15 91       	lpm	r17, Z+
    2862:	35 91       	lpm	r19, Z+
    2864:	65 91       	lpm	r22, Z+
    2866:	95 91       	lpm	r25, Z+
    2868:	05 90       	lpm	r0, Z+
    286a:	7f e2       	ldi	r23, 0x2F	; 47
    286c:	73 95       	inc	r23
    286e:	e1 18       	sub	r14, r1
    2870:	f1 0a       	sbc	r15, r17
    2872:	43 0b       	sbc	r20, r19
    2874:	56 0b       	sbc	r21, r22
    2876:	c9 0b       	sbc	r28, r25
    2878:	d0 09       	sbc	r29, r0
    287a:	c0 f7       	brcc	.-16     	; 0x286c <__ftoa_engine+0x10a>
    287c:	e1 0c       	add	r14, r1
    287e:	f1 1e       	adc	r15, r17
    2880:	43 1f       	adc	r20, r19
    2882:	56 1f       	adc	r21, r22
    2884:	c9 1f       	adc	r28, r25
    2886:	d0 1d       	adc	r29, r0
    2888:	7e f4       	brtc	.+30     	; 0x28a8 <__ftoa_engine+0x146>
    288a:	70 33       	cpi	r23, 0x30	; 48
    288c:	11 f4       	brne	.+4      	; 0x2892 <__ftoa_engine+0x130>
    288e:	8a 95       	dec	r24
    2890:	e6 cf       	rjmp	.-52     	; 0x285e <__ftoa_engine+0xfc>
    2892:	e8 94       	clt
    2894:	01 50       	subi	r16, 0x01	; 1
    2896:	30 f0       	brcs	.+12     	; 0x28a4 <__ftoa_engine+0x142>
    2898:	08 0f       	add	r16, r24
    289a:	0a f4       	brpl	.+2      	; 0x289e <__ftoa_engine+0x13c>
    289c:	00 27       	eor	r16, r16
    289e:	02 17       	cp	r16, r18
    28a0:	08 f4       	brcc	.+2      	; 0x28a4 <__ftoa_engine+0x142>
    28a2:	20 2f       	mov	r18, r16
    28a4:	23 95       	inc	r18
    28a6:	02 2f       	mov	r16, r18
    28a8:	7a 33       	cpi	r23, 0x3A	; 58
    28aa:	28 f0       	brcs	.+10     	; 0x28b6 <__ftoa_engine+0x154>
    28ac:	79 e3       	ldi	r23, 0x39	; 57
    28ae:	7d 93       	st	X+, r23
    28b0:	2a 95       	dec	r18
    28b2:	e9 f7       	brne	.-6      	; 0x28ae <__ftoa_engine+0x14c>
    28b4:	10 c0       	rjmp	.+32     	; 0x28d6 <__ftoa_engine+0x174>
    28b6:	7d 93       	st	X+, r23
    28b8:	2a 95       	dec	r18
    28ba:	89 f6       	brne	.-94     	; 0x285e <__ftoa_engine+0xfc>
    28bc:	06 94       	lsr	r0
    28be:	97 95       	ror	r25
    28c0:	67 95       	ror	r22
    28c2:	37 95       	ror	r19
    28c4:	17 95       	ror	r17
    28c6:	17 94       	ror	r1
    28c8:	e1 18       	sub	r14, r1
    28ca:	f1 0a       	sbc	r15, r17
    28cc:	43 0b       	sbc	r20, r19
    28ce:	56 0b       	sbc	r21, r22
    28d0:	c9 0b       	sbc	r28, r25
    28d2:	d0 09       	sbc	r29, r0
    28d4:	98 f0       	brcs	.+38     	; 0x28fc <__ftoa_engine+0x19a>
    28d6:	23 95       	inc	r18
    28d8:	7e 91       	ld	r23, -X
    28da:	73 95       	inc	r23
    28dc:	7a 33       	cpi	r23, 0x3A	; 58
    28de:	08 f0       	brcs	.+2      	; 0x28e2 <__ftoa_engine+0x180>
    28e0:	70 e3       	ldi	r23, 0x30	; 48
    28e2:	7c 93       	st	X, r23
    28e4:	20 13       	cpse	r18, r16
    28e6:	b8 f7       	brcc	.-18     	; 0x28d6 <__ftoa_engine+0x174>
    28e8:	7e 91       	ld	r23, -X
    28ea:	70 61       	ori	r23, 0x10	; 16
    28ec:	7d 93       	st	X+, r23
    28ee:	30 f0       	brcs	.+12     	; 0x28fc <__ftoa_engine+0x19a>
    28f0:	83 95       	inc	r24
    28f2:	71 e3       	ldi	r23, 0x31	; 49
    28f4:	7d 93       	st	X+, r23
    28f6:	70 e3       	ldi	r23, 0x30	; 48
    28f8:	2a 95       	dec	r18
    28fa:	e1 f7       	brne	.-8      	; 0x28f4 <__ftoa_engine+0x192>
    28fc:	11 24       	eor	r1, r1
    28fe:	ef 90       	pop	r14
    2900:	ff 90       	pop	r15
    2902:	0f 91       	pop	r16
    2904:	1f 91       	pop	r17
    2906:	cf 91       	pop	r28
    2908:	df 91       	pop	r29
    290a:	99 27       	eor	r25, r25
    290c:	87 fd       	sbrc	r24, 7
    290e:	90 95       	com	r25
    2910:	08 95       	ret

00002912 <strnlen_P>:
    2912:	fc 01       	movw	r30, r24
    2914:	05 90       	lpm	r0, Z+
    2916:	61 50       	subi	r22, 0x01	; 1
    2918:	70 40       	sbci	r23, 0x00	; 0
    291a:	01 10       	cpse	r0, r1
    291c:	d8 f7       	brcc	.-10     	; 0x2914 <strnlen_P+0x2>
    291e:	80 95       	com	r24
    2920:	90 95       	com	r25
    2922:	8e 0f       	add	r24, r30
    2924:	9f 1f       	adc	r25, r31
    2926:	08 95       	ret

00002928 <strnlen>:
    2928:	fc 01       	movw	r30, r24
    292a:	61 50       	subi	r22, 0x01	; 1
    292c:	70 40       	sbci	r23, 0x00	; 0
    292e:	01 90       	ld	r0, Z+
    2930:	01 10       	cpse	r0, r1
    2932:	d8 f7       	brcc	.-10     	; 0x292a <strnlen+0x2>
    2934:	80 95       	com	r24
    2936:	90 95       	com	r25
    2938:	8e 0f       	add	r24, r30
    293a:	9f 1f       	adc	r25, r31
    293c:	08 95       	ret

0000293e <fputc>:
    293e:	0f 93       	push	r16
    2940:	1f 93       	push	r17
    2942:	cf 93       	push	r28
    2944:	df 93       	push	r29
    2946:	18 2f       	mov	r17, r24
    2948:	09 2f       	mov	r16, r25
    294a:	eb 01       	movw	r28, r22
    294c:	8b 81       	ldd	r24, Y+3	; 0x03
    294e:	81 fd       	sbrc	r24, 1
    2950:	03 c0       	rjmp	.+6      	; 0x2958 <fputc+0x1a>
    2952:	8f ef       	ldi	r24, 0xFF	; 255
    2954:	9f ef       	ldi	r25, 0xFF	; 255
    2956:	20 c0       	rjmp	.+64     	; 0x2998 <fputc+0x5a>
    2958:	82 ff       	sbrs	r24, 2
    295a:	10 c0       	rjmp	.+32     	; 0x297c <fputc+0x3e>
    295c:	4e 81       	ldd	r20, Y+6	; 0x06
    295e:	5f 81       	ldd	r21, Y+7	; 0x07
    2960:	2c 81       	ldd	r18, Y+4	; 0x04
    2962:	3d 81       	ldd	r19, Y+5	; 0x05
    2964:	42 17       	cp	r20, r18
    2966:	53 07       	cpc	r21, r19
    2968:	7c f4       	brge	.+30     	; 0x2988 <fputc+0x4a>
    296a:	e8 81       	ld	r30, Y
    296c:	f9 81       	ldd	r31, Y+1	; 0x01
    296e:	9f 01       	movw	r18, r30
    2970:	2f 5f       	subi	r18, 0xFF	; 255
    2972:	3f 4f       	sbci	r19, 0xFF	; 255
    2974:	39 83       	std	Y+1, r19	; 0x01
    2976:	28 83       	st	Y, r18
    2978:	10 83       	st	Z, r17
    297a:	06 c0       	rjmp	.+12     	; 0x2988 <fputc+0x4a>
    297c:	e8 85       	ldd	r30, Y+8	; 0x08
    297e:	f9 85       	ldd	r31, Y+9	; 0x09
    2980:	81 2f       	mov	r24, r17
    2982:	09 95       	icall
    2984:	89 2b       	or	r24, r25
    2986:	29 f7       	brne	.-54     	; 0x2952 <fputc+0x14>
    2988:	2e 81       	ldd	r18, Y+6	; 0x06
    298a:	3f 81       	ldd	r19, Y+7	; 0x07
    298c:	2f 5f       	subi	r18, 0xFF	; 255
    298e:	3f 4f       	sbci	r19, 0xFF	; 255
    2990:	3f 83       	std	Y+7, r19	; 0x07
    2992:	2e 83       	std	Y+6, r18	; 0x06
    2994:	81 2f       	mov	r24, r17
    2996:	90 2f       	mov	r25, r16
    2998:	df 91       	pop	r29
    299a:	cf 91       	pop	r28
    299c:	1f 91       	pop	r17
    299e:	0f 91       	pop	r16
    29a0:	08 95       	ret

000029a2 <printf>:
    29a2:	a0 e0       	ldi	r26, 0x00	; 0
    29a4:	b0 e0       	ldi	r27, 0x00	; 0
    29a6:	e7 ed       	ldi	r30, 0xD7	; 215
    29a8:	f4 e1       	ldi	r31, 0x14	; 20
    29aa:	0c 94 63 12 	jmp	0x24c6	; 0x24c6 <__prologue_saves__+0x20>
    29ae:	fe 01       	movw	r30, r28
    29b0:	35 96       	adiw	r30, 0x05	; 5
    29b2:	61 91       	ld	r22, Z+
    29b4:	71 91       	ld	r23, Z+
    29b6:	af 01       	movw	r20, r30
    29b8:	80 91 32 08 	lds	r24, 0x0832
    29bc:	90 91 33 08 	lds	r25, 0x0833
    29c0:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <vfprintf>
    29c4:	e2 e0       	ldi	r30, 0x02	; 2
    29c6:	0c 94 7f 12 	jmp	0x24fe	; 0x24fe <__epilogue_restores__+0x20>

000029ca <puts>:
    29ca:	0f 93       	push	r16
    29cc:	1f 93       	push	r17
    29ce:	cf 93       	push	r28
    29d0:	df 93       	push	r29
    29d2:	e0 91 32 08 	lds	r30, 0x0832
    29d6:	f0 91 33 08 	lds	r31, 0x0833
    29da:	23 81       	ldd	r18, Z+3	; 0x03
    29dc:	21 ff       	sbrs	r18, 1
    29de:	1b c0       	rjmp	.+54     	; 0x2a16 <puts+0x4c>
    29e0:	ec 01       	movw	r28, r24
    29e2:	00 e0       	ldi	r16, 0x00	; 0
    29e4:	10 e0       	ldi	r17, 0x00	; 0
    29e6:	89 91       	ld	r24, Y+
    29e8:	60 91 32 08 	lds	r22, 0x0832
    29ec:	70 91 33 08 	lds	r23, 0x0833
    29f0:	db 01       	movw	r26, r22
    29f2:	18 96       	adiw	r26, 0x08	; 8
    29f4:	ed 91       	ld	r30, X+
    29f6:	fc 91       	ld	r31, X
    29f8:	19 97       	sbiw	r26, 0x09	; 9
    29fa:	88 23       	and	r24, r24
    29fc:	31 f0       	breq	.+12     	; 0x2a0a <puts+0x40>
    29fe:	09 95       	icall
    2a00:	89 2b       	or	r24, r25
    2a02:	89 f3       	breq	.-30     	; 0x29e6 <puts+0x1c>
    2a04:	0f ef       	ldi	r16, 0xFF	; 255
    2a06:	1f ef       	ldi	r17, 0xFF	; 255
    2a08:	ee cf       	rjmp	.-36     	; 0x29e6 <puts+0x1c>
    2a0a:	8a e0       	ldi	r24, 0x0A	; 10
    2a0c:	09 95       	icall
    2a0e:	89 2b       	or	r24, r25
    2a10:	11 f4       	brne	.+4      	; 0x2a16 <puts+0x4c>
    2a12:	c8 01       	movw	r24, r16
    2a14:	02 c0       	rjmp	.+4      	; 0x2a1a <puts+0x50>
    2a16:	8f ef       	ldi	r24, 0xFF	; 255
    2a18:	9f ef       	ldi	r25, 0xFF	; 255
    2a1a:	df 91       	pop	r29
    2a1c:	cf 91       	pop	r28
    2a1e:	1f 91       	pop	r17
    2a20:	0f 91       	pop	r16
    2a22:	08 95       	ret

00002a24 <__ultoa_invert>:
    2a24:	fa 01       	movw	r30, r20
    2a26:	aa 27       	eor	r26, r26
    2a28:	28 30       	cpi	r18, 0x08	; 8
    2a2a:	51 f1       	breq	.+84     	; 0x2a80 <__ultoa_invert+0x5c>
    2a2c:	20 31       	cpi	r18, 0x10	; 16
    2a2e:	81 f1       	breq	.+96     	; 0x2a90 <__ultoa_invert+0x6c>
    2a30:	e8 94       	clt
    2a32:	6f 93       	push	r22
    2a34:	6e 7f       	andi	r22, 0xFE	; 254
    2a36:	6e 5f       	subi	r22, 0xFE	; 254
    2a38:	7f 4f       	sbci	r23, 0xFF	; 255
    2a3a:	8f 4f       	sbci	r24, 0xFF	; 255
    2a3c:	9f 4f       	sbci	r25, 0xFF	; 255
    2a3e:	af 4f       	sbci	r26, 0xFF	; 255
    2a40:	b1 e0       	ldi	r27, 0x01	; 1
    2a42:	3e d0       	rcall	.+124    	; 0x2ac0 <__ultoa_invert+0x9c>
    2a44:	b4 e0       	ldi	r27, 0x04	; 4
    2a46:	3c d0       	rcall	.+120    	; 0x2ac0 <__ultoa_invert+0x9c>
    2a48:	67 0f       	add	r22, r23
    2a4a:	78 1f       	adc	r23, r24
    2a4c:	89 1f       	adc	r24, r25
    2a4e:	9a 1f       	adc	r25, r26
    2a50:	a1 1d       	adc	r26, r1
    2a52:	68 0f       	add	r22, r24
    2a54:	79 1f       	adc	r23, r25
    2a56:	8a 1f       	adc	r24, r26
    2a58:	91 1d       	adc	r25, r1
    2a5a:	a1 1d       	adc	r26, r1
    2a5c:	6a 0f       	add	r22, r26
    2a5e:	71 1d       	adc	r23, r1
    2a60:	81 1d       	adc	r24, r1
    2a62:	91 1d       	adc	r25, r1
    2a64:	a1 1d       	adc	r26, r1
    2a66:	20 d0       	rcall	.+64     	; 0x2aa8 <__ultoa_invert+0x84>
    2a68:	09 f4       	brne	.+2      	; 0x2a6c <__ultoa_invert+0x48>
    2a6a:	68 94       	set
    2a6c:	3f 91       	pop	r19
    2a6e:	2a e0       	ldi	r18, 0x0A	; 10
    2a70:	26 9f       	mul	r18, r22
    2a72:	11 24       	eor	r1, r1
    2a74:	30 19       	sub	r19, r0
    2a76:	30 5d       	subi	r19, 0xD0	; 208
    2a78:	31 93       	st	Z+, r19
    2a7a:	de f6       	brtc	.-74     	; 0x2a32 <__ultoa_invert+0xe>
    2a7c:	cf 01       	movw	r24, r30
    2a7e:	08 95       	ret
    2a80:	46 2f       	mov	r20, r22
    2a82:	47 70       	andi	r20, 0x07	; 7
    2a84:	40 5d       	subi	r20, 0xD0	; 208
    2a86:	41 93       	st	Z+, r20
    2a88:	b3 e0       	ldi	r27, 0x03	; 3
    2a8a:	0f d0       	rcall	.+30     	; 0x2aaa <__ultoa_invert+0x86>
    2a8c:	c9 f7       	brne	.-14     	; 0x2a80 <__ultoa_invert+0x5c>
    2a8e:	f6 cf       	rjmp	.-20     	; 0x2a7c <__ultoa_invert+0x58>
    2a90:	46 2f       	mov	r20, r22
    2a92:	4f 70       	andi	r20, 0x0F	; 15
    2a94:	40 5d       	subi	r20, 0xD0	; 208
    2a96:	4a 33       	cpi	r20, 0x3A	; 58
    2a98:	18 f0       	brcs	.+6      	; 0x2aa0 <__ultoa_invert+0x7c>
    2a9a:	49 5d       	subi	r20, 0xD9	; 217
    2a9c:	31 fd       	sbrc	r19, 1
    2a9e:	40 52       	subi	r20, 0x20	; 32
    2aa0:	41 93       	st	Z+, r20
    2aa2:	02 d0       	rcall	.+4      	; 0x2aa8 <__ultoa_invert+0x84>
    2aa4:	a9 f7       	brne	.-22     	; 0x2a90 <__ultoa_invert+0x6c>
    2aa6:	ea cf       	rjmp	.-44     	; 0x2a7c <__ultoa_invert+0x58>
    2aa8:	b4 e0       	ldi	r27, 0x04	; 4
    2aaa:	a6 95       	lsr	r26
    2aac:	97 95       	ror	r25
    2aae:	87 95       	ror	r24
    2ab0:	77 95       	ror	r23
    2ab2:	67 95       	ror	r22
    2ab4:	ba 95       	dec	r27
    2ab6:	c9 f7       	brne	.-14     	; 0x2aaa <__ultoa_invert+0x86>
    2ab8:	00 97       	sbiw	r24, 0x00	; 0
    2aba:	61 05       	cpc	r22, r1
    2abc:	71 05       	cpc	r23, r1
    2abe:	08 95       	ret
    2ac0:	9b 01       	movw	r18, r22
    2ac2:	ac 01       	movw	r20, r24
    2ac4:	0a 2e       	mov	r0, r26
    2ac6:	06 94       	lsr	r0
    2ac8:	57 95       	ror	r21
    2aca:	47 95       	ror	r20
    2acc:	37 95       	ror	r19
    2ace:	27 95       	ror	r18
    2ad0:	ba 95       	dec	r27
    2ad2:	c9 f7       	brne	.-14     	; 0x2ac6 <__ultoa_invert+0xa2>
    2ad4:	62 0f       	add	r22, r18
    2ad6:	73 1f       	adc	r23, r19
    2ad8:	84 1f       	adc	r24, r20
    2ada:	95 1f       	adc	r25, r21
    2adc:	a0 1d       	adc	r26, r0
    2ade:	08 95       	ret

00002ae0 <_exit>:
    2ae0:	f8 94       	cli

00002ae2 <__stop_program>:
    2ae2:	ff cf       	rjmp	.-2      	; 0x2ae2 <__stop_program>
