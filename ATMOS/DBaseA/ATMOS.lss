
ATMOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800200  00002510  000025a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002510  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003fe  00800240  00800240  000025e4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000025e4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002640  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003e0  00000000  00000000  00002680  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000457d  00000000  00000000  00002a60  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000195b  00000000  00000000  00006fdd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001590  00000000  00000000  00008938  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000008fc  00000000  00000000  00009ec8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000158e  00000000  00000000  0000a7c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d1a  00000000  00000000  0000bd52  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000003e8  00000000  00000000  0000da6c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__ctors_end>
       4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      10:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      14:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      18:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      1c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      20:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      24:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      28:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      30:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      34:	0c 94 7e 02 	jmp	0x4fc	; 0x4fc <__vector_13>
      38:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      3c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      40:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      44:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      48:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      4c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      50:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      54:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      58:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      5c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      60:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      64:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <__vector_25>
      68:	0c 94 d9 02 	jmp	0x5b2	; 0x5b2 <__vector_26>
      6c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      70:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      74:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      78:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      7c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      80:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      84:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      88:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      8c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      90:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      94:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      98:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      9c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a8:	0c 94 a2 02 	jmp	0x544	; 0x544 <__vector_42>
      ac:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      bc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      cc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      dc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      ec:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      fc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     100:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     104:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     108:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     10c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     110:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     114:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     118:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     11c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     120:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     124:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     128:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     12c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     130:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>

00000134 <__trampolines_end>:
     134:	6e 61       	ori	r22, 0x1E	; 30
     136:	6e 00       	.word	0x006e	; ????

00000138 <__c.2177>:
     138:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     148:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     158:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     168:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     178:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     188:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     198:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     208:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     218:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     228:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000236 <__ctors_end>:
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	d1 e2       	ldi	r29, 0x21	; 33
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61

00000242 <__do_copy_data>:
     242:	12 e0       	ldi	r17, 0x02	; 2
     244:	a0 e0       	ldi	r26, 0x00	; 0
     246:	b2 e0       	ldi	r27, 0x02	; 2
     248:	e0 e1       	ldi	r30, 0x10	; 16
     24a:	f5 e2       	ldi	r31, 0x25	; 37
     24c:	02 c0       	rjmp	.+4      	; 0x252 <__do_copy_data+0x10>
     24e:	05 90       	lpm	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	a0 34       	cpi	r26, 0x40	; 64
     254:	b1 07       	cpc	r27, r17
     256:	d9 f7       	brne	.-10     	; 0x24e <__do_copy_data+0xc>

00000258 <__do_clear_bss>:
     258:	26 e0       	ldi	r18, 0x06	; 6
     25a:	a0 e4       	ldi	r26, 0x40	; 64
     25c:	b2 e0       	ldi	r27, 0x02	; 2
     25e:	01 c0       	rjmp	.+2      	; 0x262 <.do_clear_bss_start>

00000260 <.do_clear_bss_loop>:
     260:	1d 92       	st	X+, r1

00000262 <.do_clear_bss_start>:
     262:	ae 33       	cpi	r26, 0x3E	; 62
     264:	b2 07       	cpc	r27, r18
     266:	e1 f7       	brne	.-8      	; 0x260 <.do_clear_bss_loop>
     268:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <main>
     26c:	0c 94 86 12 	jmp	0x250c	; 0x250c <_exit>

00000270 <__bad_interrupt>:
     270:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000274 <appDataConf>:

/*************************************************************************//**
*****************************************************************************/
static void appDataConf(NWK_DataReq_t *req)
{
  appDataReqBusy = false;
     274:	10 92 47 02 	sts	0x0247, r1
     278:	08 95       	ret

0000027a <appSendData>:
}

/*************************************************************************//**
*****************************************************************************/
static void appSendData(void)
{
     27a:	1f 93       	push	r17
     27c:	cf 93       	push	r28
     27e:	df 93       	push	r29
	printf("begin send\n");
     280:	82 e1       	ldi	r24, 0x12	; 18
     282:	92 e0       	ldi	r25, 0x02	; 2
     284:	0e 94 b7 11 	call	0x236e	; 0x236e <puts>
  if (appDataReqBusy || 0 == appUartBufferPtr)
     288:	80 91 47 02 	lds	r24, 0x0247
     28c:	81 11       	cpse	r24, r1
     28e:	30 c0       	rjmp	.+96     	; 0x2f0 <appSendData+0x76>
     290:	40 91 40 02 	lds	r20, 0x0240
     294:	44 23       	and	r20, r20
     296:	61 f1       	breq	.+88     	; 0x2f0 <appSendData+0x76>
    return;

  memcpy(appDataReqBuffer, appUartBuffer, appUartBufferPtr);
     298:	c4 e4       	ldi	r28, 0x44	; 68
     29a:	d2 e0       	ldi	r29, 0x02	; 2
     29c:	50 e0       	ldi	r21, 0x00	; 0
     29e:	61 e4       	ldi	r22, 0x41	; 65
     2a0:	72 e0       	ldi	r23, 0x02	; 2
     2a2:	ce 01       	movw	r24, r28
     2a4:	0e 94 55 11 	call	0x22aa	; 0x22aa <memcpy>
	appDataReqBuffer[0] = 12;
     2a8:	8c e0       	ldi	r24, 0x0C	; 12
     2aa:	88 83       	st	Y, r24
	appDataReqBuffer[1] = 13;	
     2ac:	8d e0       	ldi	r24, 0x0D	; 13
     2ae:	89 83       	std	Y+1, r24	; 0x01
	appDataReqBuffer[2] = 14;	
     2b0:	8e e0       	ldi	r24, 0x0E	; 14
     2b2:	8a 83       	std	Y+2, r24	; 0x02
	//TODO
  appDataReq.dstAddr = 1-APP_ADDR;
     2b4:	e8 e4       	ldi	r30, 0x48	; 72
     2b6:	f2 e0       	ldi	r31, 0x02	; 2
     2b8:	81 e0       	ldi	r24, 0x01	; 1
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	96 83       	std	Z+6, r25	; 0x06
     2be:	85 83       	std	Z+5, r24	; 0x05
  appDataReq.dstEndpoint = APP_ENDPOINT;
     2c0:	11 e0       	ldi	r17, 0x01	; 1
     2c2:	17 83       	std	Z+7, r17	; 0x07
  appDataReq.srcEndpoint = APP_ENDPOINT;
     2c4:	10 87       	std	Z+8, r17	; 0x08
  appDataReq.options = NWK_OPT_ENABLE_SECURITY;
     2c6:	82 e0       	ldi	r24, 0x02	; 2
     2c8:	81 87       	std	Z+9, r24	; 0x09
  appDataReq.data = appDataReqBuffer;
     2ca:	d3 87       	std	Z+11, r29	; 0x0b
     2cc:	c2 87       	std	Z+10, r28	; 0x0a
  appDataReq.size = 3;
     2ce:	83 e0       	ldi	r24, 0x03	; 3
     2d0:	84 87       	std	Z+12, r24	; 0x0c
  appDataReq.confirm = appDataConf;
     2d2:	8a e3       	ldi	r24, 0x3A	; 58
     2d4:	91 e0       	ldi	r25, 0x01	; 1
     2d6:	96 87       	std	Z+14, r25	; 0x0e
     2d8:	85 87       	std	Z+13, r24	; 0x0d
  NWK_DataReq(&appDataReq);
     2da:	cf 01       	movw	r24, r30
     2dc:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <NWK_DataReq>

  appUartBufferPtr = 0;
     2e0:	10 92 40 02 	sts	0x0240, r1
  appDataReqBusy = true;
     2e4:	10 93 47 02 	sts	0x0247, r17
  printf("end send\n");
     2e8:	8d e1       	ldi	r24, 0x1D	; 29
     2ea:	92 e0       	ldi	r25, 0x02	; 2
     2ec:	0e 94 b7 11 	call	0x236e	; 0x236e <puts>
}
     2f0:	df 91       	pop	r29
     2f2:	cf 91       	pop	r28
     2f4:	1f 91       	pop	r17
     2f6:	08 95       	ret

000002f8 <appTimerHandler>:

/*************************************************************************//**
*****************************************************************************/
static void appTimerHandler(SYS_Timer_t *timer)
{
  appSendData();
     2f8:	0e 94 3d 01 	call	0x27a	; 0x27a <appSendData>
     2fc:	08 95       	ret

000002fe <appDataInd>:
}

/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
     2fe:	ef 92       	push	r14
     300:	ff 92       	push	r15
     302:	0f 93       	push	r16
     304:	1f 93       	push	r17
     306:	cf 93       	push	r28
     308:	8c 01       	movw	r16, r24
	printf("begin recv\n");
     30a:	86 e2       	ldi	r24, 0x26	; 38
     30c:	92 e0       	ldi	r25, 0x02	; 2
     30e:	0e 94 b7 11 	call	0x236e	; 0x236e <puts>
	for (uint8_t i = 0; i < ind->size; i++)
     312:	d8 01       	movw	r26, r16
     314:	19 96       	adiw	r26, 0x09	; 9
     316:	8c 91       	ld	r24, X
     318:	88 23       	and	r24, r24
     31a:	11 f1       	breq	.+68     	; 0x360 <appDataInd+0x62>
     31c:	c0 e0       	ldi	r28, 0x00	; 0
		printf("\t data %d = %d",i,ind->data[i]);
     31e:	0f 2e       	mov	r0, r31
     320:	f1 e3       	ldi	r31, 0x31	; 49
     322:	ef 2e       	mov	r14, r31
     324:	f2 e0       	ldi	r31, 0x02	; 2
     326:	ff 2e       	mov	r15, r31
     328:	f0 2d       	mov	r31, r0
     32a:	d8 01       	movw	r26, r16
     32c:	17 96       	adiw	r26, 0x07	; 7
     32e:	ed 91       	ld	r30, X+
     330:	fc 91       	ld	r31, X
     332:	18 97       	sbiw	r26, 0x08	; 8
     334:	ec 0f       	add	r30, r28
     336:	f1 1d       	adc	r31, r1
     338:	80 81       	ld	r24, Z
     33a:	1f 92       	push	r1
     33c:	8f 93       	push	r24
     33e:	1f 92       	push	r1
     340:	cf 93       	push	r28
     342:	ff 92       	push	r15
     344:	ef 92       	push	r14
     346:	0e 94 a1 11 	call	0x2342	; 0x2342 <printf>
/*************************************************************************//**
*****************************************************************************/
static bool appDataInd(NWK_DataInd_t *ind)
{
	printf("begin recv\n");
	for (uint8_t i = 0; i < ind->size; i++)
     34a:	cf 5f       	subi	r28, 0xFF	; 255
     34c:	0f 90       	pop	r0
     34e:	0f 90       	pop	r0
     350:	0f 90       	pop	r0
     352:	0f 90       	pop	r0
     354:	0f 90       	pop	r0
     356:	0f 90       	pop	r0
     358:	f8 01       	movw	r30, r16
     35a:	81 85       	ldd	r24, Z+9	; 0x09
     35c:	c8 17       	cp	r28, r24
     35e:	28 f3       	brcs	.-54     	; 0x32a <appDataInd+0x2c>
		printf("\t data %d = %d",i,ind->data[i]);
	printf("begin recv\n");
     360:	86 e2       	ldi	r24, 0x26	; 38
     362:	92 e0       	ldi	r25, 0x02	; 2
     364:	0e 94 b7 11 	call	0x236e	; 0x236e <puts>
  return true;
}
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	cf 91       	pop	r28
     36c:	1f 91       	pop	r17
     36e:	0f 91       	pop	r16
     370:	ff 90       	pop	r15
     372:	ef 90       	pop	r14
     374:	08 95       	ret

00000376 <HAL_UartBytesReceived>:
}

/*************************************************************************//**
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
     376:	ff 92       	push	r15
     378:	0f 93       	push	r16
     37a:	1f 93       	push	r17
     37c:	cf 93       	push	r28
     37e:	df 93       	push	r29
     380:	8c 01       	movw	r16, r24
for (uint16_t i = 0; i < bytes; i++)
     382:	89 2b       	or	r24, r25
     384:	d9 f0       	breq	.+54     	; 0x3bc <HAL_UartBytesReceived+0x46>
     386:	c0 e0       	ldi	r28, 0x00	; 0
     388:	d0 e0       	ldi	r29, 0x00	; 0
{
uint8_t byte = HAL_UartReadByte();
     38a:	0e 94 b3 02 	call	0x566	; 0x566 <HAL_UartReadByte>
     38e:	f8 2e       	mov	r15, r24

if (appUartBufferPtr == sizeof(appUartBuffer))
     390:	90 91 40 02 	lds	r25, 0x0240
     394:	93 30       	cpi	r25, 0x03	; 3
     396:	11 f4       	brne	.+4      	; 0x39c <HAL_UartBytesReceived+0x26>
appSendData();
     398:	0e 94 3d 01 	call	0x27a	; 0x27a <appSendData>

if (appUartBufferPtr < sizeof(appUartBuffer))
     39c:	e0 91 40 02 	lds	r30, 0x0240
     3a0:	e3 30       	cpi	r30, 0x03	; 3
     3a2:	40 f4       	brcc	.+16     	; 0x3b4 <HAL_UartBytesReceived+0x3e>
appUartBuffer[appUartBufferPtr++] = byte;
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	8e 0f       	add	r24, r30
     3a8:	80 93 40 02 	sts	0x0240, r24
     3ac:	f0 e0       	ldi	r31, 0x00	; 0
     3ae:	ef 5b       	subi	r30, 0xBF	; 191
     3b0:	fd 4f       	sbci	r31, 0xFD	; 253
     3b2:	f0 82       	st	Z, r15

/*************************************************************************//**
*****************************************************************************/
void HAL_UartBytesReceived(uint16_t bytes)
{
for (uint16_t i = 0; i < bytes; i++)
     3b4:	21 96       	adiw	r28, 0x01	; 1
     3b6:	c0 17       	cp	r28, r16
     3b8:	d1 07       	cpc	r29, r17
     3ba:	39 f7       	brne	.-50     	; 0x38a <HAL_UartBytesReceived+0x14>

if (appUartBufferPtr < sizeof(appUartBuffer))
appUartBuffer[appUartBufferPtr++] = byte;
}

SYS_TimerStop(&appTimer);
     3bc:	89 e5       	ldi	r24, 0x59	; 89
     3be:	92 e0       	ldi	r25, 0x02	; 2
     3c0:	0e 94 71 0b 	call	0x16e2	; 0x16e2 <SYS_TimerStop>
SYS_TimerStart(&appTimer);
     3c4:	89 e5       	ldi	r24, 0x59	; 89
     3c6:	92 e0       	ldi	r25, 0x02	; 2
     3c8:	0e 94 c8 0b 	call	0x1790	; 0x1790 <SYS_TimerStart>
}
     3cc:	df 91       	pop	r29
     3ce:	cf 91       	pop	r28
     3d0:	1f 91       	pop	r17
     3d2:	0f 91       	pop	r16
     3d4:	ff 90       	pop	r15
     3d6:	08 95       	ret

000003d8 <main>:

/*************************************************************************//**
*****************************************************************************/
int main(void)
{
  SYS_Init();
     3d8:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <SYS_Init>
  USART0_Init(76800);
     3dc:	60 e0       	ldi	r22, 0x00	; 0
     3de:	7c e2       	ldi	r23, 0x2C	; 44
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 26 02 	call	0x44c	; 0x44c <USART0_Init>

  NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);

  HAL_BoardInit();

  appTimer.interval = 3000;
     3e8:	c9 e5       	ldi	r28, 0x59	; 89
     3ea:	d2 e0       	ldi	r29, 0x02	; 2
     3ec:	0f 2e       	mov	r0, r31
     3ee:	f8 eb       	ldi	r31, 0xB8	; 184
     3f0:	cf 2e       	mov	r12, r31
     3f2:	fb e0       	ldi	r31, 0x0B	; 11
     3f4:	df 2e       	mov	r13, r31
     3f6:	e1 2c       	mov	r14, r1
     3f8:	f1 2c       	mov	r15, r1
     3fa:	f0 2d       	mov	r31, r0
  appTimer.mode = SYS_TIMER_PERIODIC_MODE;
  appTimer.handler = appTimerHandler;
     3fc:	0c e7       	ldi	r16, 0x7C	; 124
     3fe:	11 e0       	ldi	r17, 0x01	; 1
{
  SYS_Init();
  USART0_Init(76800);
  while (1)
  {
    SYS_TaskHandler();
     400:	0e 94 01 0b 	call	0x1602	; 0x1602 <SYS_TaskHandler>
    HAL_UartTaskHandler();
     404:	0e 94 44 03 	call	0x688	; 0x688 <HAL_UartTaskHandler>

/*************************************************************************//**
*****************************************************************************/
static void APP_TaskHandler(void)
{
  switch (appState)
     408:	80 91 66 02 	lds	r24, 0x0266
     40c:	81 11       	cpse	r24, r1
     40e:	f8 cf       	rjmp	.-16     	; 0x400 <main+0x28>

/*************************************************************************//**
*****************************************************************************/
static void appInit(void)
{
  NWK_SetAddr(APP_ADDR);
     410:	80 e0       	ldi	r24, 0x00	; 0
     412:	90 e0       	ldi	r25, 0x00	; 0
     414:	0e 94 a2 03 	call	0x744	; 0x744 <NWK_SetAddr>
  NWK_SetPanId(APP_PANID);
     418:	84 e3       	ldi	r24, 0x34	; 52
     41a:	92 e1       	ldi	r25, 0x12	; 18
     41c:	0e 94 a9 03 	call	0x752	; 0x752 <NWK_SetPanId>
  PHY_SetChannel(APP_CHANNEL);
     420:	8f e0       	ldi	r24, 0x0F	; 15
     422:	0e 94 23 0a 	call	0x1446	; 0x1446 <PHY_SetChannel>
#ifdef PHY_AT86RF212
  PHY_SetBand(APP_BAND);
  PHY_SetModulation(APP_MODULATION);
#endif
  PHY_SetRxState(true);
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	0e 94 1e 0a 	call	0x143c	; 0x143c <PHY_SetRxState>

  NWK_OpenEndpoint(APP_ENDPOINT, appDataInd);
     42c:	6f e7       	ldi	r22, 0x7F	; 127
     42e:	71 e0       	ldi	r23, 0x01	; 1
     430:	81 e0       	ldi	r24, 0x01	; 1
     432:	0e 94 b0 03 	call	0x760	; 0x760 <NWK_OpenEndpoint>

  HAL_BoardInit();

  appTimer.interval = 3000;
     436:	ce 82       	std	Y+6, r12	; 0x06
     438:	df 82       	std	Y+7, r13	; 0x07
     43a:	e8 86       	std	Y+8, r14	; 0x08
     43c:	f9 86       	std	Y+9, r15	; 0x09
  appTimer.mode = SYS_TIMER_PERIODIC_MODE;
     43e:	81 e0       	ldi	r24, 0x01	; 1
     440:	8a 87       	std	Y+10, r24	; 0x0a
  appTimer.handler = appTimerHandler;
     442:	1c 87       	std	Y+12, r17	; 0x0c
     444:	0b 87       	std	Y+11, r16	; 0x0b
  switch (appState)
  {
    case APP_STATE_INITIAL:
    {
      appInit();
      appState = APP_STATE_IDLE;
     446:	80 93 66 02 	sts	0x0266, r24
     44a:	da cf       	rjmp	.-76     	; 0x400 <main+0x28>

0000044c <USART0_Init>:
  @brief Initializes USART0 in asynchronous UART mode, 8 bit data, 1 stop bit
  @param[in] desired baud rate (configuration values computed using F_CPU)
*****************************************************************************/
void USART0_Init(unsigned long baud){
	
	stdout = &USART0_stdout; //make stdout print to USART0
     44c:	24 e0       	ldi	r18, 0x04	; 4
     44e:	32 e0       	ldi	r19, 0x02	; 2
     450:	30 93 3b 06 	sts	0x063B, r19
     454:	20 93 3a 06 	sts	0x063A, r18
	
	//Compute UBRR for baudrate setting
	unsigned short ubrr=(unsigned short)((F_CPU/(baud*16UL))-1);
     458:	dc 01       	movw	r26, r24
     45a:	cb 01       	movw	r24, r22
     45c:	88 0f       	add	r24, r24
     45e:	99 1f       	adc	r25, r25
     460:	aa 1f       	adc	r26, r26
     462:	bb 1f       	adc	r27, r27
     464:	88 0f       	add	r24, r24
     466:	99 1f       	adc	r25, r25
     468:	aa 1f       	adc	r26, r26
     46a:	bb 1f       	adc	r27, r27
     46c:	9c 01       	movw	r18, r24
     46e:	ad 01       	movw	r20, r26
     470:	22 0f       	add	r18, r18
     472:	33 1f       	adc	r19, r19
     474:	44 1f       	adc	r20, r20
     476:	55 1f       	adc	r21, r21
     478:	22 0f       	add	r18, r18
     47a:	33 1f       	adc	r19, r19
     47c:	44 1f       	adc	r20, r20
     47e:	55 1f       	adc	r21, r21
     480:	60 e0       	ldi	r22, 0x00	; 0
     482:	74 e2       	ldi	r23, 0x24	; 36
     484:	84 ef       	ldi	r24, 0xF4	; 244
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <__udivmodsi4>
     48c:	21 50       	subi	r18, 0x01	; 1
     48e:	31 09       	sbc	r19, r1
	
	//Set BAUD rate.
	UBRR0H = (unsigned char) (ubrr >> 8);
     490:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) ubrr;
     494:	20 93 c4 00 	sts	0x00C4, r18
	/*Set frame format. 8 data bit(settings bits UCSZ00 and UCSZ01  UCSR0B), 1 stop bit(by default and need not to be worried about). 
	The UCSZ01:0 bits combined with the UCSZ02 bit in UCSR0B sets the number of data
	bits (Character Size) in the frame that the Receiver and Transmitter use. 
	If a change on frame format is needed, make sure to modify UCSR0B register above accordingly.
	See datasheet pg. 390.*/
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
     498:	86 e0       	ldi	r24, 0x06	; 6
     49a:	80 93 c2 00 	sts	0x00C2, r24
	
	//Enable receiver and transmitter. Enable the USART Receive Complete interrupt(RXCIE).
	//UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0));
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);//Enable RX/TX, no interrupts
     49e:	88 e1       	ldi	r24, 0x18	; 24
     4a0:	80 93 c1 00 	sts	0x00C1, r24
     4a4:	08 95       	ret

000004a6 <USART0_Transmit>:
Function contains busy loops for simplicity in debugging. Not production code.
  @brief Transmits a byte via USART0
  @param[in] data byte to be transmitted
*****************************************************************************/
void USART0_Transmit(unsigned char data){
	while(!(UCSR0A & (1 << UDRE0))); //Wait for the empty transmit buffer. (Waiting UDR0 to be empty.)
     4a6:	e0 ec       	ldi	r30, 0xC0	; 192
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	90 81       	ld	r25, Z
     4ac:	95 ff       	sbrs	r25, 5
     4ae:	fd cf       	rjmp	.-6      	; 0x4aa <USART0_Transmit+0x4>
		UDR0 = data;			//store the data in the USART Data Register
     4b0:	80 93 c6 00 	sts	0x00C6, r24
     4b4:	08 95       	ret

000004b6 <USART0_putchar_printf>:
  @brief Called when stdout is being printed to USART0 (this is set up at runtime)
  @param[in] var byte to transmit
  @param[in/out] *stream Pointer to a stdio.h FILE io stream
  @return Status
*****************************************************************************/
int USART0_putchar_printf(char var, FILE *stream) {
     4b6:	cf 93       	push	r28
     4b8:	c8 2f       	mov	r28, r24
	if (var == '\n') USART0_Transmit('\r');
     4ba:	8a 30       	cpi	r24, 0x0A	; 10
     4bc:	19 f4       	brne	.+6      	; 0x4c4 <USART0_putchar_printf+0xe>
     4be:	8d e0       	ldi	r24, 0x0D	; 13
     4c0:	0e 94 53 02 	call	0x4a6	; 0x4a6 <USART0_Transmit>
	USART0_Transmit(var);
     4c4:	8c 2f       	mov	r24, r28
     4c6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <USART0_Transmit>
	return 0;
}
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	90 e0       	ldi	r25, 0x00	; 0
     4ce:	cf 91       	pop	r28
     4d0:	08 95       	ret

000004d2 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     4d2:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     4d4:	0f b6       	in	r0, 0x3f	; 63
     4d6:	f8 94       	cli
     4d8:	a8 95       	wdr
     4da:	80 91 60 00 	lds	r24, 0x0060
     4de:	88 61       	ori	r24, 0x18	; 24
     4e0:	80 93 60 00 	sts	0x0060, r24
     4e4:	10 92 60 00 	sts	0x0060, r1
     4e8:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
     4ea:	e1 e6       	ldi	r30, 0x61	; 97
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	80 e8       	ldi	r24, 0x80	; 128
     4f0:	80 83       	st	Z, r24
  CLKPR = 0;
     4f2:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     4f4:	78 94       	sei

  HAL_TimerInit();
     4f6:	0e 94 8d 02 	call	0x51a	; 0x51a <HAL_TimerInit>
     4fa:	08 95       	ret

000004fc <__vector_13>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER2_COMPA_vect)
{
     4fc:	1f 92       	push	r1
     4fe:	0f 92       	push	r0
     500:	0f b6       	in	r0, 0x3f	; 63
     502:	0f 92       	push	r0
     504:	11 24       	eor	r1, r1
     506:	8f 93       	push	r24
  halSleepTimerEvent = true;
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	80 93 67 02 	sts	0x0267, r24
}
     50e:	8f 91       	pop	r24
     510:	0f 90       	pop	r0
     512:	0f be       	out	0x3f, r0	; 63
     514:	0f 90       	pop	r0
     516:	1f 90       	pop	r1
     518:	18 95       	reti

0000051a <HAL_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_TimerInit(void)
{
  halTimerIrqCount = 0;
     51a:	10 92 0f 06 	sts	0x060F, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
     51e:	80 e2       	ldi	r24, 0x20	; 32
     520:	9e e4       	ldi	r25, 0x4E	; 78
     522:	90 93 a9 00 	sts	0x00A9, r25
     526:	80 93 a8 00 	sts	0x00A8, r24
  TCCR4B = (1 << WGM12);              // CTC mode
     52a:	e1 ea       	ldi	r30, 0xA1	; 161
     52c:	f0 e0       	ldi	r31, 0x00	; 0
     52e:	88 e0       	ldi	r24, 0x08	; 8
     530:	80 83       	st	Z, r24
  TCCR4B |= (1 << CS11);              // Prescaler 8
     532:	80 81       	ld	r24, Z
     534:	82 60       	ori	r24, 0x02	; 2
     536:	80 83       	st	Z, r24
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
     538:	e2 e7       	ldi	r30, 0x72	; 114
     53a:	f0 e0       	ldi	r31, 0x00	; 0
     53c:	80 81       	ld	r24, Z
     53e:	82 60       	ori	r24, 0x02	; 2
     540:	80 83       	st	Z, r24
     542:	08 95       	ret

00000544 <__vector_42>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     544:	1f 92       	push	r1
     546:	0f 92       	push	r0
     548:	0f b6       	in	r0, 0x3f	; 63
     54a:	0f 92       	push	r0
     54c:	11 24       	eor	r1, r1
     54e:	8f 93       	push	r24
  halTimerIrqCount++;
     550:	80 91 0f 06 	lds	r24, 0x060F
     554:	8f 5f       	subi	r24, 0xFF	; 255
     556:	80 93 0f 06 	sts	0x060F, r24
}
     55a:	8f 91       	pop	r24
     55c:	0f 90       	pop	r0
     55e:	0f be       	out	0x3f, r0	; 63
     560:	0f 90       	pop	r0
     562:	1f 90       	pop	r1
     564:	18 95       	reti

00000566 <HAL_UartReadByte>:
uint8_t HAL_UartReadByte(void)
{
  uint8_t byte;

  PRAGMA(diag_suppress=Pa082);
  ATOMIC_SECTION_ENTER
     566:	4f b7       	in	r20, 0x3f	; 63
     568:	f8 94       	cli
    byte = rxFifo.data[rxFifo.head++];
     56a:	ea e6       	ldi	r30, 0x6A	; 106
     56c:	f2 e0       	ldi	r31, 0x02	; 2
     56e:	20 85       	ldd	r18, Z+8	; 0x08
     570:	31 85       	ldd	r19, Z+9	; 0x09
     572:	80 81       	ld	r24, Z
     574:	91 81       	ldd	r25, Z+1	; 0x01
     576:	bc 01       	movw	r22, r24
     578:	6f 5f       	subi	r22, 0xFF	; 255
     57a:	7f 4f       	sbci	r23, 0xFF	; 255
     57c:	71 83       	std	Z+1, r23	; 0x01
     57e:	60 83       	st	Z, r22
     580:	d9 01       	movw	r26, r18
     582:	a8 0f       	add	r26, r24
     584:	b9 1f       	adc	r27, r25
     586:	8c 91       	ld	r24, X
    if (rxFifo.head == rxFifo.size)
     588:	60 81       	ld	r22, Z
     58a:	71 81       	ldd	r23, Z+1	; 0x01
     58c:	24 81       	ldd	r18, Z+4	; 0x04
     58e:	35 81       	ldd	r19, Z+5	; 0x05
     590:	62 17       	cp	r22, r18
     592:	73 07       	cpc	r23, r19
     594:	21 f4       	brne	.+8      	; 0x59e <HAL_UartReadByte+0x38>
      rxFifo.head = 0;
     596:	10 92 6b 02 	sts	0x026B, r1
     59a:	10 92 6a 02 	sts	0x026A, r1
    rxFifo.bytes--;
     59e:	ea e6       	ldi	r30, 0x6A	; 106
     5a0:	f2 e0       	ldi	r31, 0x02	; 2
     5a2:	26 81       	ldd	r18, Z+6	; 0x06
     5a4:	37 81       	ldd	r19, Z+7	; 0x07
     5a6:	21 50       	subi	r18, 0x01	; 1
     5a8:	31 09       	sbc	r19, r1
     5aa:	37 83       	std	Z+7, r19	; 0x07
     5ac:	26 83       	std	Z+6, r18	; 0x06
  ATOMIC_SECTION_LEAVE
     5ae:	4f bf       	out	0x3f, r20	; 63
  PRAGMA(diag_default=Pa082);

  return byte;
}
     5b0:	08 95       	ret

000005b2 <__vector_26>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_UDRE_vect)
{
     5b2:	1f 92       	push	r1
     5b4:	0f 92       	push	r0
     5b6:	0f b6       	in	r0, 0x3f	; 63
     5b8:	0f 92       	push	r0
     5ba:	11 24       	eor	r1, r1
     5bc:	8f 93       	push	r24
     5be:	ef 93       	push	r30
     5c0:	ff 93       	push	r31
  udrEmpty = true;
     5c2:	81 e0       	ldi	r24, 0x01	; 1
     5c4:	80 93 69 02 	sts	0x0269, r24
  UCSRxB &= ~(1 << UDRIE1);
     5c8:	e1 ec       	ldi	r30, 0xC1	; 193
     5ca:	f0 e0       	ldi	r31, 0x00	; 0
     5cc:	80 81       	ld	r24, Z
     5ce:	8f 7d       	andi	r24, 0xDF	; 223
     5d0:	80 83       	st	Z, r24
}
     5d2:	ff 91       	pop	r31
     5d4:	ef 91       	pop	r30
     5d6:	8f 91       	pop	r24
     5d8:	0f 90       	pop	r0
     5da:	0f be       	out	0x3f, r0	; 63
     5dc:	0f 90       	pop	r0
     5de:	1f 90       	pop	r1
     5e0:	18 95       	reti

000005e2 <__vector_25>:

/*************************************************************************//**
*****************************************************************************/
ISR(USARTx_RX_vect)
{
     5e2:	1f 92       	push	r1
     5e4:	0f 92       	push	r0
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	0f 92       	push	r0
     5ea:	11 24       	eor	r1, r1
     5ec:	2f 93       	push	r18
     5ee:	3f 93       	push	r19
     5f0:	4f 93       	push	r20
     5f2:	5f 93       	push	r21
     5f4:	6f 93       	push	r22
     5f6:	7f 93       	push	r23
     5f8:	8f 93       	push	r24
     5fa:	9f 93       	push	r25
     5fc:	af 93       	push	r26
     5fe:	bf 93       	push	r27
     600:	ef 93       	push	r30
     602:	ff 93       	push	r31
  PRAGMA(diag_suppress=Pa082);

  uint8_t status = UCSRxA;
     604:	80 91 c0 00 	lds	r24, 0x00C0
  uint8_t byte = UDRx;
     608:	20 91 c6 00 	lds	r18, 0x00C6

  if (0 == (status & ((1 << FE1) | (1 << DOR1) | (1 << UPE1))))
     60c:	8c 71       	andi	r24, 0x1C	; 28
     60e:	59 f5       	brne	.+86     	; 0x666 <__vector_25+0x84>
  {
    if (rxFifo.bytes == rxFifo.size)
     610:	ea e6       	ldi	r30, 0x6A	; 106
     612:	f2 e0       	ldi	r31, 0x02	; 2
     614:	46 81       	ldd	r20, Z+6	; 0x06
     616:	57 81       	ldd	r21, Z+7	; 0x07
     618:	84 81       	ldd	r24, Z+4	; 0x04
     61a:	95 81       	ldd	r25, Z+5	; 0x05
     61c:	48 17       	cp	r20, r24
     61e:	59 07       	cpc	r21, r25
     620:	11 f1       	breq	.+68     	; 0x666 <__vector_25+0x84>
      return;

    rxFifo.data[rxFifo.tail++] = byte;
     622:	40 85       	ldd	r20, Z+8	; 0x08
     624:	51 85       	ldd	r21, Z+9	; 0x09
     626:	82 81       	ldd	r24, Z+2	; 0x02
     628:	93 81       	ldd	r25, Z+3	; 0x03
     62a:	bc 01       	movw	r22, r24
     62c:	6f 5f       	subi	r22, 0xFF	; 255
     62e:	7f 4f       	sbci	r23, 0xFF	; 255
     630:	73 83       	std	Z+3, r23	; 0x03
     632:	62 83       	std	Z+2, r22	; 0x02
     634:	da 01       	movw	r26, r20
     636:	a8 0f       	add	r26, r24
     638:	b9 1f       	adc	r27, r25
     63a:	2c 93       	st	X, r18
    if (rxFifo.tail == rxFifo.size)
     63c:	22 81       	ldd	r18, Z+2	; 0x02
     63e:	33 81       	ldd	r19, Z+3	; 0x03
     640:	84 81       	ldd	r24, Z+4	; 0x04
     642:	95 81       	ldd	r25, Z+5	; 0x05
     644:	28 17       	cp	r18, r24
     646:	39 07       	cpc	r19, r25
     648:	21 f4       	brne	.+8      	; 0x652 <__vector_25+0x70>
      rxFifo.tail = 0;
     64a:	10 92 6d 02 	sts	0x026D, r1
     64e:	10 92 6c 02 	sts	0x026C, r1
    rxFifo.bytes++;
     652:	ea e6       	ldi	r30, 0x6A	; 106
     654:	f2 e0       	ldi	r31, 0x02	; 2
     656:	86 81       	ldd	r24, Z+6	; 0x06
     658:	97 81       	ldd	r25, Z+7	; 0x07
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	97 83       	std	Z+7, r25	; 0x07
     65e:	86 83       	std	Z+6, r24	; 0x06

    newData = true;
     660:	81 e0       	ldi	r24, 0x01	; 1
     662:	80 93 68 02 	sts	0x0268, r24
  }

  PRAGMA(diag_default=Pa082);
}
     666:	ff 91       	pop	r31
     668:	ef 91       	pop	r30
     66a:	bf 91       	pop	r27
     66c:	af 91       	pop	r26
     66e:	9f 91       	pop	r25
     670:	8f 91       	pop	r24
     672:	7f 91       	pop	r23
     674:	6f 91       	pop	r22
     676:	5f 91       	pop	r21
     678:	4f 91       	pop	r20
     67a:	3f 91       	pop	r19
     67c:	2f 91       	pop	r18
     67e:	0f 90       	pop	r0
     680:	0f be       	out	0x3f, r0	; 63
     682:	0f 90       	pop	r0
     684:	1f 90       	pop	r1
     686:	18 95       	reti

00000688 <HAL_UartTaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void HAL_UartTaskHandler(void)
{
  if (txFifo.bytes && udrEmpty)
     688:	80 91 7a 02 	lds	r24, 0x027A
     68c:	90 91 7b 02 	lds	r25, 0x027B
     690:	00 97       	sbiw	r24, 0x00	; 0
     692:	69 f1       	breq	.+90     	; 0x6ee <HAL_UartTaskHandler+0x66>
     694:	20 91 69 02 	lds	r18, 0x0269
     698:	22 23       	and	r18, r18
     69a:	49 f1       	breq	.+82     	; 0x6ee <HAL_UartTaskHandler+0x66>
  {
    uint8_t byte;

    byte = txFifo.data[txFifo.head++];
     69c:	e4 e7       	ldi	r30, 0x74	; 116
     69e:	f2 e0       	ldi	r31, 0x02	; 2
     6a0:	60 85       	ldd	r22, Z+8	; 0x08
     6a2:	71 85       	ldd	r23, Z+9	; 0x09
     6a4:	20 81       	ld	r18, Z
     6a6:	31 81       	ldd	r19, Z+1	; 0x01
     6a8:	a9 01       	movw	r20, r18
     6aa:	4f 5f       	subi	r20, 0xFF	; 255
     6ac:	5f 4f       	sbci	r21, 0xFF	; 255
     6ae:	51 83       	std	Z+1, r21	; 0x01
     6b0:	40 83       	st	Z, r20
     6b2:	db 01       	movw	r26, r22
     6b4:	a2 0f       	add	r26, r18
     6b6:	b3 1f       	adc	r27, r19
     6b8:	2c 91       	ld	r18, X
    if (txFifo.head == txFifo.size)
     6ba:	64 81       	ldd	r22, Z+4	; 0x04
     6bc:	75 81       	ldd	r23, Z+5	; 0x05
     6be:	46 17       	cp	r20, r22
     6c0:	57 07       	cpc	r21, r23
     6c2:	21 f4       	brne	.+8      	; 0x6cc <HAL_UartTaskHandler+0x44>
      txFifo.head = 0;
     6c4:	10 92 75 02 	sts	0x0275, r1
     6c8:	10 92 74 02 	sts	0x0274, r1
    txFifo.bytes--;
     6cc:	01 97       	sbiw	r24, 0x01	; 1
     6ce:	90 93 7b 02 	sts	0x027B, r25
     6d2:	80 93 7a 02 	sts	0x027A, r24

    ATOMIC_SECTION_ENTER
     6d6:	9f b7       	in	r25, 0x3f	; 63
     6d8:	f8 94       	cli
      UDRx = byte;
     6da:	20 93 c6 00 	sts	0x00C6, r18
      UCSRxB |= (1 << UDRIE1);
     6de:	e1 ec       	ldi	r30, 0xC1	; 193
     6e0:	f0 e0       	ldi	r31, 0x00	; 0
     6e2:	80 81       	ld	r24, Z
     6e4:	80 62       	ori	r24, 0x20	; 32
     6e6:	80 83       	st	Z, r24
      udrEmpty = false;
     6e8:	10 92 69 02 	sts	0x0269, r1
    ATOMIC_SECTION_LEAVE
     6ec:	9f bf       	out	0x3f, r25	; 63

  {
    uint16_t bytes;
    bool new;

    ATOMIC_SECTION_ENTER
     6ee:	2f b7       	in	r18, 0x3f	; 63
     6f0:	f8 94       	cli
      new = newData;
     6f2:	90 91 68 02 	lds	r25, 0x0268
      newData = false;
     6f6:	10 92 68 02 	sts	0x0268, r1
      bytes = rxFifo.bytes;
     6fa:	40 91 70 02 	lds	r20, 0x0270
     6fe:	50 91 71 02 	lds	r21, 0x0271
    ATOMIC_SECTION_LEAVE
     702:	2f bf       	out	0x3f, r18	; 63

    if (new)
     704:	99 23       	and	r25, r25
     706:	19 f0       	breq	.+6      	; 0x70e <HAL_UartTaskHandler+0x86>
      HAL_UartBytesReceived(bytes);
     708:	ca 01       	movw	r24, r20
     70a:	0e 94 bb 01 	call	0x376	; 0x376 <HAL_UartBytesReceived>
     70e:	08 95       	ret

00000710 <NWK_Init>:
/*************************************************************************//**
  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
  nwkIb.nwkSeqNum = 0;
     710:	e0 e1       	ldi	r30, 0x10	; 16
     712:	f6 e0       	ldi	r31, 0x06	; 6
     714:	14 82       	std	Z+4, r1	; 0x04
  nwkIb.macSeqNum = 0;
     716:	15 82       	std	Z+5, r1	; 0x05
  nwkIb.addr = 0;
     718:	11 82       	std	Z+1, r1	; 0x01
     71a:	10 82       	st	Z, r1
  nwkIb.lock = 0;
     71c:	17 a2       	std	Z+39, r1	; 0x27
     71e:	16 a2       	std	Z+38, r1	; 0x26
     720:	e6 e1       	ldi	r30, 0x16	; 22
     722:	f6 e0       	ldi	r31, 0x06	; 6
     724:	86 e3       	ldi	r24, 0x36	; 54
     726:	96 e0       	ldi	r25, 0x06	; 6

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
    nwkIb.endpoint[i] = NULL;
     728:	11 92       	st	Z+, r1
     72a:	11 92       	st	Z+, r1
  nwkIb.nwkSeqNum = 0;
  nwkIb.macSeqNum = 0;
  nwkIb.addr = 0;
  nwkIb.lock = 0;

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
     72c:	e8 17       	cp	r30, r24
     72e:	f9 07       	cpc	r31, r25
     730:	d9 f7       	brne	.-10     	; 0x728 <NWK_Init+0x18>
    nwkIb.endpoint[i] = NULL;

  nwkTxInit();
     732:	0e 94 2a 08 	call	0x1054	; 0x1054 <nwkTxInit>
  nwkRxInit();
     736:	0e 94 5f 05 	call	0xabe	; 0xabe <nwkRxInit>
  nwkFrameInit();
     73a:	0e 94 b2 04 	call	0x964	; 0x964 <nwkFrameInit>
  nwkDataReqInit();
     73e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <nwkDataReqInit>
     742:	08 95       	ret

00000744 <NWK_SetAddr>:
  @brief Sets network address of the node
  @param[in] addr Adddress to set
*****************************************************************************/
void NWK_SetAddr(uint16_t addr)
{
  nwkIb.addr = addr;
     744:	90 93 11 06 	sts	0x0611, r25
     748:	80 93 10 06 	sts	0x0610, r24
  PHY_SetShortAddr(addr);
     74c:	0e 94 39 0a 	call	0x1472	; 0x1472 <PHY_SetShortAddr>
     750:	08 95       	ret

00000752 <NWK_SetPanId>:
  @brief Sets network identifier (PAN) of the node
  @param[in] panId PAN ID to set
*****************************************************************************/
void NWK_SetPanId(uint16_t panId)
{
  nwkIb.panId = panId;
     752:	90 93 13 06 	sts	0x0613, r25
     756:	80 93 12 06 	sts	0x0612, r24
  PHY_SetPanId(panId);
     75a:	0e 94 28 0a 	call	0x1450	; 0x1450 <PHY_SetPanId>
     75e:	08 95       	ret

00000760 <NWK_OpenEndpoint>:
  @param[in] id Endpoint index (1-15)
  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
  nwkIb.endpoint[id] = handler;
     760:	e8 2f       	mov	r30, r24
     762:	f0 e0       	ldi	r31, 0x00	; 0
     764:	ee 0f       	add	r30, r30
     766:	ff 1f       	adc	r31, r31
     768:	ea 5e       	subi	r30, 0xEA	; 234
     76a:	f9 4f       	sbci	r31, 0xF9	; 249
     76c:	71 83       	std	Z+1, r23	; 0x01
     76e:	60 83       	st	Z, r22
     770:	08 95       	ret

00000772 <NWK_TaskHandler>:
/*************************************************************************//**
  @brief Network layer task handler
*****************************************************************************/
void NWK_TaskHandler(void)
{
  nwkRxTaskHandler();
     772:	0e 94 a9 05 	call	0xb52	; 0xb52 <nwkRxTaskHandler>
  nwkTxTaskHandler();
     776:	0e 94 2a 09 	call	0x1254	; 0x1254 <nwkTxTaskHandler>
  nwkDataReqTaskHandler();
     77a:	0e 94 0d 04 	call	0x81a	; 0x81a <nwkDataReqTaskHandler>
     77e:	08 95       	ret

00000780 <nwkDataReqTxConf>:
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     780:	e0 91 7e 02 	lds	r30, 0x027E
     784:	f0 91 7f 02 	lds	r31, 0x027F
     788:	30 97       	sbiw	r30, 0x00	; 0
     78a:	d9 f0       	breq	.+54     	; 0x7c2 <nwkDataReqTxConf+0x42>
  {
    if (req->frame == frame)
     78c:	22 81       	ldd	r18, Z+2	; 0x02
     78e:	33 81       	ldd	r19, Z+3	; 0x03
     790:	28 17       	cp	r18, r24
     792:	39 07       	cpc	r19, r25
     794:	89 f4       	brne	.+34     	; 0x7b8 <nwkDataReqTxConf+0x38>
     796:	05 c0       	rjmp	.+10     	; 0x7a2 <nwkDataReqTxConf+0x22>
     798:	22 81       	ldd	r18, Z+2	; 0x02
     79a:	33 81       	ldd	r19, Z+3	; 0x03
     79c:	28 17       	cp	r18, r24
     79e:	39 07       	cpc	r19, r25
     7a0:	59 f4       	brne	.+22     	; 0x7b8 <nwkDataReqTxConf+0x38>
    {
      req->status = frame->tx.status;
     7a2:	dc 01       	movw	r26, r24
     7a4:	ad 57       	subi	r26, 0x7D	; 125
     7a6:	bf 4f       	sbci	r27, 0xFF	; 255
     7a8:	2c 91       	ld	r18, X
     7aa:	27 87       	std	Z+15, r18	; 0x0f
      req->control = frame->tx.control;
     7ac:	13 96       	adiw	r26, 0x03	; 3
     7ae:	2c 91       	ld	r18, X
     7b0:	20 8b       	std	Z+16, r18	; 0x10
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
     7b2:	22 e0       	ldi	r18, 0x02	; 2
     7b4:	24 83       	std	Z+4, r18	; 0x04
      break;
     7b6:	05 c0       	rjmp	.+10     	; 0x7c2 <nwkDataReqTxConf+0x42>
  @brief Frame transmission confirmation handler
  @param[in] frame Pointer to the sent frame
*****************************************************************************/
static void nwkDataReqTxConf(NwkFrame_t *frame)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     7b8:	01 90       	ld	r0, Z+
     7ba:	f0 81       	ld	r31, Z
     7bc:	e0 2d       	mov	r30, r0
     7be:	30 97       	sbiw	r30, 0x00	; 0
     7c0:	59 f7       	brne	.-42     	; 0x798 <nwkDataReqTxConf+0x18>
      req->state = NWK_DATA_REQ_STATE_CONFIRM;
      break;
    }
  }

  nwkFrameFree(frame);
     7c2:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <nwkFrameFree>
     7c6:	08 95       	ret

000007c8 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     7c8:	10 92 7f 02 	sts	0x027F, r1
     7cc:	10 92 7e 02 	sts	0x027E, r1
     7d0:	08 95       	ret

000007d2 <NWK_DataReq>:
/*************************************************************************//**
  @brief Adds request @a req to the queue of outgoing requests
  @param[in] req Pointer to the request parameters
*****************************************************************************/
void NWK_DataReq(NWK_DataReq_t *req)
{
     7d2:	fc 01       	movw	r30, r24
  req->state = NWK_DATA_REQ_STATE_INITIAL;
     7d4:	14 82       	std	Z+4, r1	; 0x04
  req->status = NWK_SUCCESS_STATUS;
     7d6:	17 86       	std	Z+15, r1	; 0x0f
  req->frame = NULL;
     7d8:	13 82       	std	Z+3, r1	; 0x03
     7da:	12 82       	std	Z+2, r1	; 0x02

  nwkIb.lock++;
     7dc:	a0 e1       	ldi	r26, 0x10	; 16
     7de:	b6 e0       	ldi	r27, 0x06	; 6
     7e0:	96 96       	adiw	r26, 0x26	; 38
     7e2:	8d 91       	ld	r24, X+
     7e4:	9c 91       	ld	r25, X
     7e6:	97 97       	sbiw	r26, 0x27	; 39
     7e8:	01 96       	adiw	r24, 0x01	; 1
     7ea:	97 96       	adiw	r26, 0x27	; 39
     7ec:	9c 93       	st	X, r25
     7ee:	8e 93       	st	-X, r24
     7f0:	96 97       	sbiw	r26, 0x26	; 38

  if (NULL == nwkDataReqQueue)
     7f2:	80 91 7e 02 	lds	r24, 0x027E
     7f6:	90 91 7f 02 	lds	r25, 0x027F
     7fa:	00 97       	sbiw	r24, 0x00	; 0
     7fc:	39 f4       	brne	.+14     	; 0x80c <NWK_DataReq+0x3a>
  {
    req->next = NULL;
     7fe:	11 82       	std	Z+1, r1	; 0x01
     800:	10 82       	st	Z, r1
    nwkDataReqQueue = req;
     802:	f0 93 7f 02 	sts	0x027F, r31
     806:	e0 93 7e 02 	sts	0x027E, r30
     80a:	08 95       	ret
  }
  else
  {
    req->next = nwkDataReqQueue;
     80c:	91 83       	std	Z+1, r25	; 0x01
     80e:	80 83       	st	Z, r24
    nwkDataReqQueue = req;
     810:	f0 93 7f 02 	sts	0x027F, r31
     814:	e0 93 7e 02 	sts	0x027E, r30
     818:	08 95       	ret

0000081a <nwkDataReqTaskHandler>:

/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
     81a:	0f 93       	push	r16
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     822:	e0 91 7e 02 	lds	r30, 0x027E
     826:	f0 91 7f 02 	lds	r31, 0x027F
     82a:	30 97       	sbiw	r30, 0x00	; 0
     82c:	09 f4       	brne	.+2      	; 0x830 <nwkDataReqTaskHandler+0x16>
     82e:	95 c0       	rjmp	.+298    	; 0x95a <nwkDataReqTaskHandler+0x140>
     830:	ef 01       	movw	r28, r30
  {
    switch (req->state)
     832:	8c 81       	ldd	r24, Y+4	; 0x04
     834:	88 23       	and	r24, r24
     836:	21 f0       	breq	.+8      	; 0x840 <nwkDataReqTaskHandler+0x26>
     838:	82 30       	cpi	r24, 0x02	; 2
     83a:	09 f4       	brne	.+2      	; 0x83e <nwkDataReqTaskHandler+0x24>
     83c:	68 c0       	rjmp	.+208    	; 0x90e <nwkDataReqTaskHandler+0xf4>
     83e:	87 c0       	rjmp	.+270    	; 0x94e <nwkDataReqTaskHandler+0x134>
*****************************************************************************/
static void nwkDataReqSendFrame(NWK_DataReq_t *req)
{
  NwkFrame_t *frame;

  if (NULL == (frame = nwkFrameAlloc()))
     840:	0e 94 bd 04 	call	0x97a	; 0x97a <nwkFrameAlloc>
     844:	8c 01       	movw	r16, r24
     846:	00 97       	sbiw	r24, 0x00	; 0
     848:	21 f4       	brne	.+8      	; 0x852 <nwkDataReqTaskHandler+0x38>
  {
    req->state = NWK_DATA_REQ_STATE_CONFIRM;
     84a:	82 e0       	ldi	r24, 0x02	; 2
     84c:	8c 83       	std	Y+4, r24	; 0x04
    req->status = NWK_OUT_OF_MEMORY_STATUS;
     84e:	8f 87       	std	Y+15, r24	; 0x0f
     850:	84 c0       	rjmp	.+264    	; 0x95a <nwkDataReqTaskHandler+0x140>
    return;
  }

  req->frame = frame;
     852:	9b 83       	std	Y+3, r25	; 0x03
     854:	8a 83       	std	Y+2, r24	; 0x02
  req->state = NWK_DATA_REQ_STATE_WAIT_CONF;
     856:	81 e0       	ldi	r24, 0x01	; 1
     858:	8c 83       	std	Y+4, r24	; 0x04

  frame->tx.confirm = nwkDataReqTxConf;
     85a:	f8 01       	movw	r30, r16
     85c:	e9 57       	subi	r30, 0x79	; 121
     85e:	ff 4f       	sbci	r31, 0xFF	; 255
     860:	80 ec       	ldi	r24, 0xC0	; 192
     862:	93 e0       	ldi	r25, 0x03	; 3
     864:	91 83       	std	Z+1, r25	; 0x01
     866:	80 83       	st	Z, r24
  frame->tx.control = req->options & NWK_OPT_BROADCAST_PAN_ID ? NWK_TX_CONTROL_BROADCAST_PAN_ID : 0;
     868:	31 97       	sbiw	r30, 0x01	; 1
     86a:	89 85       	ldd	r24, Y+9	; 0x09
     86c:	82 fb       	bst	r24, 2
     86e:	88 27       	eor	r24, r24
     870:	80 f9       	bld	r24, 0
     872:	80 83       	st	Z, r24

  frame->header.nwkFcf.ackRequest = req->options & NWK_OPT_ACK_REQUEST ? 1 : 0;
     874:	99 85       	ldd	r25, Y+9	; 0x09
     876:	d8 01       	movw	r26, r16
     878:	1b 96       	adiw	r26, 0x0b	; 11
     87a:	8c 91       	ld	r24, X
     87c:	1b 97       	sbiw	r26, 0x0b	; 11
     87e:	90 fb       	bst	r25, 0
     880:	80 f9       	bld	r24, 0
     882:	1b 96       	adiw	r26, 0x0b	; 11
     884:	8c 93       	st	X, r24
     886:	1b 97       	sbiw	r26, 0x0b	; 11
  frame->header.nwkFcf.linkLocal = req->options & NWK_OPT_LINK_LOCAL ? 1 : 0;
     888:	99 85       	ldd	r25, Y+9	; 0x09
     88a:	93 fb       	bst	r25, 3
     88c:	99 27       	eor	r25, r25
     88e:	90 f9       	bld	r25, 0
     890:	90 fb       	bst	r25, 0
     892:	82 f9       	bld	r24, 2
     894:	1b 96       	adiw	r26, 0x0b	; 11
     896:	8c 93       	st	X, r24
     898:	1b 97       	sbiw	r26, 0x0b	; 11
    frame->payload += sizeof(NwkFrameMulticastHeader_t);
    frame->size += sizeof(NwkFrameMulticastHeader_t);
  }
#endif

  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     89a:	e0 e1       	ldi	r30, 0x10	; 16
     89c:	f6 e0       	ldi	r31, 0x06	; 6
     89e:	84 81       	ldd	r24, Z+4	; 0x04
     8a0:	8f 5f       	subi	r24, 0xFF	; 255
     8a2:	84 83       	std	Z+4, r24	; 0x04
     8a4:	1c 96       	adiw	r26, 0x0c	; 12
     8a6:	8c 93       	st	X, r24
     8a8:	1c 97       	sbiw	r26, 0x0c	; 12
  frame->header.nwkSrcAddr = nwkIb.addr;
     8aa:	80 81       	ld	r24, Z
     8ac:	91 81       	ldd	r25, Z+1	; 0x01
     8ae:	1e 96       	adiw	r26, 0x0e	; 14
     8b0:	9c 93       	st	X, r25
     8b2:	8e 93       	st	-X, r24
     8b4:	1d 97       	sbiw	r26, 0x0d	; 13
  frame->header.nwkDstAddr = req->dstAddr;
     8b6:	8d 81       	ldd	r24, Y+5	; 0x05
     8b8:	9e 81       	ldd	r25, Y+6	; 0x06
     8ba:	50 96       	adiw	r26, 0x10	; 16
     8bc:	9c 93       	st	X, r25
     8be:	8e 93       	st	-X, r24
     8c0:	1f 97       	sbiw	r26, 0x0f	; 15
  frame->header.nwkSrcEndpoint = req->srcEndpoint;
     8c2:	88 85       	ldd	r24, Y+8	; 0x08
     8c4:	98 2f       	mov	r25, r24
     8c6:	9f 70       	andi	r25, 0x0F	; 15
     8c8:	51 96       	adiw	r26, 0x11	; 17
     8ca:	8c 91       	ld	r24, X
     8cc:	51 97       	sbiw	r26, 0x11	; 17
     8ce:	80 7f       	andi	r24, 0xF0	; 240
     8d0:	89 2b       	or	r24, r25
     8d2:	51 96       	adiw	r26, 0x11	; 17
     8d4:	8c 93       	st	X, r24
     8d6:	51 97       	sbiw	r26, 0x11	; 17
  frame->header.nwkDstEndpoint = req->dstEndpoint;
     8d8:	9f 81       	ldd	r25, Y+7	; 0x07
     8da:	92 95       	swap	r25
     8dc:	90 7f       	andi	r25, 0xF0	; 240
     8de:	8f 70       	andi	r24, 0x0F	; 15
     8e0:	89 2b       	or	r24, r25
     8e2:	51 96       	adiw	r26, 0x11	; 17
     8e4:	8c 93       	st	X, r24

  memcpy(frame->payload, req->data, req->size);
     8e6:	f8 01       	movw	r30, r16
     8e8:	ef 57       	subi	r30, 0x7F	; 127
     8ea:	ff 4f       	sbci	r31, 0xFF	; 255
     8ec:	4c 85       	ldd	r20, Y+12	; 0x0c
     8ee:	50 e0       	ldi	r21, 0x00	; 0
     8f0:	6a 85       	ldd	r22, Y+10	; 0x0a
     8f2:	7b 85       	ldd	r23, Y+11	; 0x0b
     8f4:	80 81       	ld	r24, Z
     8f6:	91 81       	ldd	r25, Z+1	; 0x01
     8f8:	0e 94 55 11 	call	0x22aa	; 0x22aa <memcpy>
  frame->size += req->size;
     8fc:	f8 01       	movw	r30, r16
     8fe:	91 81       	ldd	r25, Z+1	; 0x01
     900:	8c 85       	ldd	r24, Y+12	; 0x0c
     902:	89 0f       	add	r24, r25
     904:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(frame);
     906:	c8 01       	movw	r24, r16
     908:	0e 94 4d 08 	call	0x109a	; 0x109a <nwkTxFrame>
     90c:	26 c0       	rjmp	.+76     	; 0x95a <nwkDataReqTaskHandler+0x140>
  @brief Confirms request @req to the application and remove it from the queue
  @param[in] req Pointer to the request parameters
*****************************************************************************/
static void nwkDataReqConfirm(NWK_DataReq_t *req)
{
  if (nwkDataReqQueue == req)
     90e:	ce 17       	cp	r28, r30
     910:	df 07       	cpc	r29, r31
     912:	41 f4       	brne	.+16     	; 0x924 <nwkDataReqTaskHandler+0x10a>
  {
    nwkDataReqQueue = nwkDataReqQueue->next;
     914:	88 81       	ld	r24, Y
     916:	99 81       	ldd	r25, Y+1	; 0x01
     918:	90 93 7f 02 	sts	0x027F, r25
     91c:	80 93 7e 02 	sts	0x027E, r24
     920:	0a c0       	rjmp	.+20     	; 0x936 <nwkDataReqTaskHandler+0x11c>
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
      prev = prev->next;
     922:	fc 01       	movw	r30, r24
    nwkDataReqQueue = nwkDataReqQueue->next;
  }
  else
  {
    NWK_DataReq_t *prev = nwkDataReqQueue;
    while (prev->next != req)
     924:	80 81       	ld	r24, Z
     926:	91 81       	ldd	r25, Z+1	; 0x01
     928:	c8 17       	cp	r28, r24
     92a:	d9 07       	cpc	r29, r25
     92c:	d1 f7       	brne	.-12     	; 0x922 <nwkDataReqTaskHandler+0x108>
      prev = prev->next;
    prev->next = ((NWK_DataReq_t *)prev->next)->next;
     92e:	88 81       	ld	r24, Y
     930:	99 81       	ldd	r25, Y+1	; 0x01
     932:	91 83       	std	Z+1, r25	; 0x01
     934:	80 83       	st	Z, r24
  }

  nwkIb.lock--;
     936:	e0 e1       	ldi	r30, 0x10	; 16
     938:	f6 e0       	ldi	r31, 0x06	; 6
     93a:	86 a1       	ldd	r24, Z+38	; 0x26
     93c:	97 a1       	ldd	r25, Z+39	; 0x27
     93e:	01 97       	sbiw	r24, 0x01	; 1
     940:	97 a3       	std	Z+39, r25	; 0x27
     942:	86 a3       	std	Z+38, r24	; 0x26
  req->confirm(req);
     944:	ed 85       	ldd	r30, Y+13	; 0x0d
     946:	fe 85       	ldd	r31, Y+14	; 0x0e
     948:	ce 01       	movw	r24, r28
     94a:	09 95       	icall
     94c:	06 c0       	rjmp	.+12     	; 0x95a <nwkDataReqTaskHandler+0x140>
/*************************************************************************//**
  @brief Data Request module task handler
*****************************************************************************/
void nwkDataReqTaskHandler(void)
{
  for (NWK_DataReq_t *req = nwkDataReqQueue; req; req = req->next)
     94e:	09 90       	ld	r0, Y+
     950:	d8 81       	ld	r29, Y
     952:	c0 2d       	mov	r28, r0
     954:	20 97       	sbiw	r28, 0x00	; 0
     956:	09 f0       	breq	.+2      	; 0x95a <nwkDataReqTaskHandler+0x140>
     958:	6c cf       	rjmp	.-296    	; 0x832 <nwkDataReqTaskHandler+0x18>

      default:
        break;
    };
  }
}
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	1f 91       	pop	r17
     960:	0f 91       	pop	r16
     962:	08 95       	ret

00000964 <nwkFrameInit>:
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     964:	10 92 80 02 	sts	0x0280, r1
     968:	10 92 09 03 	sts	0x0309, r1
     96c:	10 92 92 03 	sts	0x0392, r1
     970:	10 92 1b 04 	sts	0x041B, r1
     974:	10 92 a4 04 	sts	0x04A4, r1
     978:	08 95       	ret

0000097a <nwkFrameAlloc>:
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
  {
    if (NWK_FRAME_STATE_FREE == nwkFrameFrames[i].state)
     97a:	80 91 80 02 	lds	r24, 0x0280
     97e:	88 23       	and	r24, r24
     980:	49 f0       	breq	.+18     	; 0x994 <nwkFrameAlloc+0x1a>
     982:	e9 e0       	ldi	r30, 0x09	; 9
     984:	f3 e0       	ldi	r31, 0x03	; 3
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	ac 01       	movw	r20, r24
     98c:	20 81       	ld	r18, Z
     98e:	21 11       	cpse	r18, r1
     990:	22 c0       	rjmp	.+68     	; 0x9d6 <nwkFrameAlloc+0x5c>
     992:	02 c0       	rjmp	.+4      	; 0x998 <nwkFrameAlloc+0x1e>
     994:	40 e0       	ldi	r20, 0x00	; 0
     996:	50 e0       	ldi	r21, 0x00	; 0
    {
      memset(&nwkFrameFrames[i], 0, sizeof(NwkFrame_t));
     998:	69 e8       	ldi	r22, 0x89	; 137
     99a:	64 9f       	mul	r22, r20
     99c:	90 01       	movw	r18, r0
     99e:	65 9f       	mul	r22, r21
     9a0:	30 0d       	add	r19, r0
     9a2:	11 24       	eor	r1, r1
     9a4:	c9 01       	movw	r24, r18
     9a6:	80 58       	subi	r24, 0x80	; 128
     9a8:	9d 4f       	sbci	r25, 0xFD	; 253
     9aa:	fc 01       	movw	r30, r24
     9ac:	11 92       	st	Z+, r1
     9ae:	6a 95       	dec	r22
     9b0:	e9 f7       	brne	.-6      	; 0x9ac <nwkFrameAlloc+0x32>
      nwkFrameFrames[i].size = sizeof(NwkFrameHeader_t);
     9b2:	40 e1       	ldi	r20, 0x10	; 16
     9b4:	fc 01       	movw	r30, r24
     9b6:	41 83       	std	Z+1, r20	; 0x01
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
     9b8:	ef 57       	subi	r30, 0x7F	; 127
     9ba:	ff 4f       	sbci	r31, 0xFF	; 255
     9bc:	2e 56       	subi	r18, 0x6E	; 110
     9be:	3d 4f       	sbci	r19, 0xFD	; 253
     9c0:	31 83       	std	Z+1, r19	; 0x01
     9c2:	20 83       	st	Z, r18
      nwkIb.lock++;
     9c4:	e0 e1       	ldi	r30, 0x10	; 16
     9c6:	f6 e0       	ldi	r31, 0x06	; 6
     9c8:	26 a1       	ldd	r18, Z+38	; 0x26
     9ca:	37 a1       	ldd	r19, Z+39	; 0x27
     9cc:	2f 5f       	subi	r18, 0xFF	; 255
     9ce:	3f 4f       	sbci	r19, 0xFF	; 255
     9d0:	37 a3       	std	Z+39, r19	; 0x27
     9d2:	26 a3       	std	Z+38, r18	; 0x26
      return &nwkFrameFrames[i];
     9d4:	08 95       	ret
     9d6:	01 96       	adiw	r24, 0x01	; 1
     9d8:	e7 57       	subi	r30, 0x77	; 119
     9da:	ff 4f       	sbci	r31, 0xFF	; 255
  @brief Allocates an empty frame from the buffer pool
  @return Pointer to the frame or @c NULL if there are no free frames
*****************************************************************************/
NwkFrame_t *nwkFrameAlloc(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
     9dc:	85 30       	cpi	r24, 0x05	; 5
     9de:	91 05       	cpc	r25, r1
     9e0:	a1 f6       	brne	.-88     	; 0x98a <nwkFrameAlloc+0x10>
      nwkFrameFrames[i].payload = nwkFrameFrames[i].data + sizeof(NwkFrameHeader_t);
      nwkIb.lock++;
      return &nwkFrameFrames[i];
    }
  }
  return NULL;
     9e2:	80 e0       	ldi	r24, 0x00	; 0
     9e4:	90 e0       	ldi	r25, 0x00	; 0
}
     9e6:	08 95       	ret

000009e8 <nwkFrameFree>:
  @brief Frees a @a frame and returns it to the buffer pool
  @param[in] frame Pointer to the frame to be freed
*****************************************************************************/
void nwkFrameFree(NwkFrame_t *frame)
{
  frame->state = NWK_FRAME_STATE_FREE;
     9e8:	fc 01       	movw	r30, r24
     9ea:	10 82       	st	Z, r1
  nwkIb.lock--;
     9ec:	e0 e1       	ldi	r30, 0x10	; 16
     9ee:	f6 e0       	ldi	r31, 0x06	; 6
     9f0:	86 a1       	ldd	r24, Z+38	; 0x26
     9f2:	97 a1       	ldd	r25, Z+39	; 0x27
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	97 a3       	std	Z+39, r25	; 0x27
     9f8:	86 a3       	std	Z+38, r24	; 0x26
     9fa:	08 95       	ret

000009fc <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     9fc:	00 97       	sbiw	r24, 0x00	; 0
     9fe:	41 f0       	breq	.+16     	; 0xa10 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     a00:	fc 01       	movw	r30, r24
     a02:	e7 57       	subi	r30, 0x77	; 119
     a04:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     a06:	85 e0       	ldi	r24, 0x05	; 5
     a08:	ed 32       	cpi	r30, 0x2D	; 45
     a0a:	f8 07       	cpc	r31, r24
     a0c:	18 f0       	brcs	.+6      	; 0xa14 <nwkFrameNext+0x18>
     a0e:	15 c0       	rjmp	.+42     	; 0xa3a <nwkFrameNext+0x3e>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     a10:	e0 e8       	ldi	r30, 0x80	; 128
     a12:	f2 e0       	ldi	r31, 0x02	; 2
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     a14:	80 81       	ld	r24, Z
     a16:	88 23       	and	r24, r24
     a18:	39 f0       	breq	.+14     	; 0xa28 <nwkFrameNext+0x2c>
     a1a:	03 c0       	rjmp	.+6      	; 0xa22 <nwkFrameNext+0x26>
     a1c:	80 81       	ld	r24, Z
     a1e:	88 23       	and	r24, r24
     a20:	19 f0       	breq	.+6      	; 0xa28 <nwkFrameNext+0x2c>
      return frame;
     a22:	8e 2f       	mov	r24, r30
     a24:	9f 2f       	mov	r25, r31
     a26:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     a28:	e7 57       	subi	r30, 0x77	; 119
     a2a:	ff 4f       	sbci	r31, 0xFF	; 255
     a2c:	85 e0       	ldi	r24, 0x05	; 5
     a2e:	ed 32       	cpi	r30, 0x2D	; 45
     a30:	f8 07       	cpc	r31, r24
     a32:	a0 f3       	brcs	.-24     	; 0xa1c <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	08 95       	ret
     a3a:	80 e0       	ldi	r24, 0x00	; 0
     a3c:	90 e0       	ldi	r25, 0x00	; 0
}
     a3e:	08 95       	ret

00000a40 <nwkFrameCommandInit>:
/*************************************************************************//**
  @brief Sets default parameters for the the command @a frame
  @param[in] frame Pointer to the command frame
*****************************************************************************/
void nwkFrameCommandInit(NwkFrame_t *frame)
{
     a40:	fc 01       	movw	r30, r24
  frame->tx.status = NWK_SUCCESS_STATUS;
     a42:	dc 01       	movw	r26, r24
     a44:	ad 57       	subi	r26, 0x7D	; 125
     a46:	bf 4f       	sbci	r27, 0xFF	; 255
     a48:	1c 92       	st	X, r1
  frame->header.nwkSeq = ++nwkIb.nwkSeqNum;
     a4a:	a0 e1       	ldi	r26, 0x10	; 16
     a4c:	b6 e0       	ldi	r27, 0x06	; 6
     a4e:	14 96       	adiw	r26, 0x04	; 4
     a50:	9c 91       	ld	r25, X
     a52:	14 97       	sbiw	r26, 0x04	; 4
     a54:	9f 5f       	subi	r25, 0xFF	; 255
     a56:	14 96       	adiw	r26, 0x04	; 4
     a58:	9c 93       	st	X, r25
     a5a:	14 97       	sbiw	r26, 0x04	; 4
     a5c:	94 87       	std	Z+12, r25	; 0x0c
  frame->header.nwkSrcAddr = nwkIb.addr;
     a5e:	8d 91       	ld	r24, X+
     a60:	9c 91       	ld	r25, X
     a62:	96 87       	std	Z+14, r25	; 0x0e
     a64:	85 87       	std	Z+13, r24	; 0x0d
     a66:	08 95       	ret

00000a68 <nwkRxServiceDataInd>:
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
     a68:	dc 01       	movw	r26, r24
     a6a:	19 96       	adiw	r26, 0x09	; 9
     a6c:	2c 91       	ld	r18, X
     a6e:	19 97       	sbiw	r26, 0x09	; 9
     a70:	22 23       	and	r18, r18
     a72:	51 f0       	breq	.+20     	; 0xa88 <nwkRxServiceDataInd+0x20>
    return false;

  switch (ind->data[0])
     a74:	17 96       	adiw	r26, 0x07	; 7
     a76:	ed 91       	ld	r30, X+
     a78:	fc 91       	ld	r31, X
     a7a:	18 97       	sbiw	r26, 0x08	; 8
     a7c:	20 81       	ld	r18, Z
     a7e:	21 11       	cpse	r18, r1
     a80:	05 c0       	rjmp	.+10     	; 0xa8c <nwkRxServiceDataInd+0x24>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
     a82:	0e 94 e2 08 	call	0x11c4	; 0x11c4 <nwkTxAckReceived>
     a86:	08 95       	ret
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    return false;
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	08 95       	ret
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
     a8c:	80 e0       	ldi	r24, 0x00	; 0
  }
}
     a8e:	08 95       	ret

00000a90 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
     a90:	bc 01       	movw	r22, r24
     a92:	ef e3       	ldi	r30, 0x3F	; 63
     a94:	f5 e0       	ldi	r31, 0x05	; 5
     a96:	21 e7       	ldi	r18, 0x71	; 113
     a98:	35 e0       	ldi	r19, 0x05	; 5
  bool restart = false;
     a9a:	40 e0       	ldi	r20, 0x00	; 0
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
     a9c:	51 e0       	ldi	r21, 0x01	; 1
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
     a9e:	90 81       	ld	r25, Z
     aa0:	99 23       	and	r25, r25
     aa2:	19 f0       	breq	.+6      	; 0xaaa <nwkRxDuplicateRejectionTimerHandler+0x1a>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
     aa4:	91 50       	subi	r25, 0x01	; 1
     aa6:	90 83       	st	Z, r25
      restart = true;
     aa8:	45 2f       	mov	r20, r21
     aaa:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     aac:	e2 17       	cp	r30, r18
     aae:	f3 07       	cpc	r31, r19
     ab0:	b1 f7       	brne	.-20     	; 0xa9e <nwkRxDuplicateRejectionTimerHandler+0xe>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
     ab2:	44 23       	and	r20, r20
     ab4:	19 f0       	breq	.+6      	; 0xabc <nwkRxDuplicateRejectionTimerHandler+0x2c>
     ab6:	cb 01       	movw	r24, r22
    SYS_TimerStart(timer);
     ab8:	0e 94 c8 0b 	call	0x1790	; 0x1790 <SYS_TimerStart>
     abc:	08 95       	ret

00000abe <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
     abe:	ef e3       	ldi	r30, 0x3F	; 63
     ac0:	f5 e0       	ldi	r31, 0x05	; 5
     ac2:	81 e7       	ldi	r24, 0x71	; 113
     ac4:	95 e0       	ldi	r25, 0x05	; 5
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
     ac6:	10 82       	st	Z, r1
     ac8:	35 96       	adiw	r30, 0x05	; 5
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     aca:	e8 17       	cp	r30, r24
     acc:	f9 07       	cpc	r31, r25
     ace:	d9 f7       	brne	.-10     	; 0xac6 <nwkRxInit+0x8>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
     ad0:	ed e2       	ldi	r30, 0x2D	; 45
     ad2:	f5 e0       	ldi	r31, 0x05	; 5
     ad4:	84 e6       	ldi	r24, 0x64	; 100
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	a0 e0       	ldi	r26, 0x00	; 0
     ada:	b0 e0       	ldi	r27, 0x00	; 0
     adc:	86 83       	std	Z+6, r24	; 0x06
     ade:	97 83       	std	Z+7, r25	; 0x07
     ae0:	a0 87       	std	Z+8, r26	; 0x08
     ae2:	b1 87       	std	Z+9, r27	; 0x09
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
     ae4:	12 86       	std	Z+10, r1	; 0x0a
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
     ae6:	88 e4       	ldi	r24, 0x48	; 72
     ae8:	95 e0       	ldi	r25, 0x05	; 5
     aea:	94 87       	std	Z+12, r25	; 0x0c
     aec:	83 87       	std	Z+11, r24	; 0x0b

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
     aee:	64 e3       	ldi	r22, 0x34	; 52
     af0:	75 e0       	ldi	r23, 0x05	; 5
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	0e 94 b0 03 	call	0x760	; 0x760 <NWK_OpenEndpoint>
     af8:	08 95       	ret

00000afa <PHY_DataInd>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataInd(PHY_DataInd_t *ind)
{
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
  NwkFrame_t *frame;

  if (0x88 != ind->data[1] || (0x61 != ind->data[0] && 0x41 != ind->data[0]) ||
     afe:	dc 01       	movw	r26, r24
     b00:	ed 91       	ld	r30, X+
     b02:	fc 91       	ld	r31, X
     b04:	11 97       	sbiw	r26, 0x01	; 1
     b06:	21 81       	ldd	r18, Z+1	; 0x01
     b08:	28 38       	cpi	r18, 0x88	; 136
     b0a:	01 f5       	brne	.+64     	; 0xb4c <PHY_DataInd+0x52>
     b0c:	20 81       	ld	r18, Z
     b0e:	2f 7d       	andi	r18, 0xDF	; 223
     b10:	21 34       	cpi	r18, 0x41	; 65
     b12:	e1 f4       	brne	.+56     	; 0xb4c <PHY_DataInd+0x52>
     b14:	12 96       	adiw	r26, 0x02	; 2
     b16:	2c 91       	ld	r18, X
     b18:	20 31       	cpi	r18, 0x10	; 16
     b1a:	c0 f0       	brcs	.+48     	; 0xb4c <PHY_DataInd+0x52>
     b1c:	ec 01       	movw	r28, r24
      ind->size < sizeof(NwkFrameHeader_t))
    return;

  if (NULL == (frame = nwkFrameAlloc()))
     b1e:	0e 94 bd 04 	call	0x97a	; 0x97a <nwkFrameAlloc>
     b22:	00 97       	sbiw	r24, 0x00	; 0
     b24:	99 f0       	breq	.+38     	; 0xb4c <PHY_DataInd+0x52>
    return;

  frame->state = NWK_RX_STATE_RECEIVED;
     b26:	20 e2       	ldi	r18, 0x20	; 32
     b28:	fc 01       	movw	r30, r24
     b2a:	20 83       	st	Z, r18
  frame->size = ind->size;
     b2c:	2a 81       	ldd	r18, Y+2	; 0x02
     b2e:	21 83       	std	Z+1, r18	; 0x01
  frame->rx.lqi = ind->lqi;
     b30:	2b 81       	ldd	r18, Y+3	; 0x03
     b32:	ed 57       	subi	r30, 0x7D	; 125
     b34:	ff 4f       	sbci	r31, 0xFF	; 255
     b36:	20 83       	st	Z, r18
  frame->rx.rssi = ind->rssi;
     b38:	2c 81       	ldd	r18, Y+4	; 0x04
     b3a:	31 96       	adiw	r30, 0x01	; 1
     b3c:	20 83       	st	Z, r18
  memcpy(frame->data, ind->data, ind->size);
     b3e:	4a 81       	ldd	r20, Y+2	; 0x02
     b40:	50 e0       	ldi	r21, 0x00	; 0
     b42:	68 81       	ld	r22, Y
     b44:	79 81       	ldd	r23, Y+1	; 0x01
     b46:	02 96       	adiw	r24, 0x02	; 2
     b48:	0e 94 55 11 	call	0x22aa	; 0x22aa <memcpy>
}
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	08 95       	ret

00000b52 <nwkRxTaskHandler>:

/*************************************************************************//**
  @brief Rx Module task handler
*****************************************************************************/
void nwkRxTaskHandler(void)
{
     b52:	2f 92       	push	r2
     b54:	3f 92       	push	r3
     b56:	4f 92       	push	r4
     b58:	5f 92       	push	r5
     b5a:	6f 92       	push	r6
     b5c:	7f 92       	push	r7
     b5e:	8f 92       	push	r8
     b60:	9f 92       	push	r9
     b62:	af 92       	push	r10
     b64:	bf 92       	push	r11
     b66:	cf 92       	push	r12
     b68:	df 92       	push	r13
     b6a:	ef 92       	push	r14
     b6c:	ff 92       	push	r15
     b6e:	0f 93       	push	r16
     b70:	1f 93       	push	r17
     b72:	cf 93       	push	r28
     b74:	df 93       	push	r29
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
     b7a:	2c 97       	sbiw	r28, 0x0c	; 12
     b7c:	0f b6       	in	r0, 0x3f	; 63
     b7e:	f8 94       	cli
     b80:	de bf       	out	0x3e, r29	; 62
     b82:	0f be       	out	0x3f, r0	; 63
     b84:	cd bf       	out	0x3d, r28	; 61
  NwkFrame_t *frame = NULL;
     b86:	00 e0       	ldi	r16, 0x00	; 0
     b88:	10 e0       	ldi	r17, 0x00	; 0
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     b8a:	0f 2e       	mov	r0, r31
     b8c:	f4 e2       	ldi	r31, 0x24	; 36
     b8e:	df 2e       	mov	r13, r31
     b90:	f0 2d       	mov	r31, r0
    ack = true;

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     b92:	0f 2e       	mov	r0, r31
     b94:	f0 e1       	ldi	r31, 0x10	; 16
     b96:	8f 2e       	mov	r8, r31
     b98:	f6 e0       	ldi	r31, 0x06	; 6
     b9a:	9f 2e       	mov	r9, r31
     b9c:	f0 2d       	mov	r31, r0
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     b9e:	68 94       	set
     ba0:	cc 24       	eor	r12, r12
     ba2:	c4 f8       	bld	r12, 4
     ba4:	0f 2e       	mov	r0, r31
     ba6:	ff e3       	ldi	r31, 0x3F	; 63
     ba8:	4f 2e       	mov	r4, r31
     baa:	f5 e0       	ldi	r31, 0x05	; 5
     bac:	5f 2e       	mov	r5, r31
     bae:	f0 2d       	mov	r31, r0
     bb0:	0f 2e       	mov	r0, r31
     bb2:	fb e3       	ldi	r31, 0x3B	; 59
     bb4:	6f 2e       	mov	r6, r31
     bb6:	f5 e0       	ldi	r31, 0x05	; 5
     bb8:	7f 2e       	mov	r7, r31
     bba:	f0 2d       	mov	r31, r0
     bbc:	0f 2e       	mov	r0, r31
     bbe:	fd e6       	ldi	r31, 0x6D	; 109
     bc0:	ef 2e       	mov	r14, r31
     bc2:	f5 e0       	ldi	r31, 0x05	; 5
     bc4:	ff 2e       	mov	r15, r31
     bc6:	f0 2d       	mov	r31, r0
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
     bc8:	31 2c       	mov	r3, r1
     bca:	21 2c       	mov	r2, r1
     bcc:	58 01       	movw	r10, r16
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     bce:	a8 c1       	rjmp	.+848    	; 0xf20 <nwkRxTaskHandler+0x3ce>
  {
    switch (frame->state)
     bd0:	d5 01       	movw	r26, r10
     bd2:	8c 91       	ld	r24, X
     bd4:	82 32       	cpi	r24, 0x22	; 34
     bd6:	09 f4       	brne	.+2      	; 0xbda <nwkRxTaskHandler+0x88>
     bd8:	d1 c0       	rjmp	.+418    	; 0xd7c <nwkRxTaskHandler+0x22a>
     bda:	84 32       	cpi	r24, 0x24	; 36
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <nwkRxTaskHandler+0x8e>
     bde:	9d c1       	rjmp	.+826    	; 0xf1a <nwkRxTaskHandler+0x3c8>
     be0:	80 32       	cpi	r24, 0x20	; 32
     be2:	09 f0       	breq	.+2      	; 0xbe6 <nwkRxTaskHandler+0x94>
     be4:	9d c1       	rjmp	.+826    	; 0xf20 <nwkRxTaskHandler+0x3ce>
*****************************************************************************/
static void nwkRxHandleReceivedFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;

  frame->state = NWK_RX_STATE_FINISH;
     be6:	dc 92       	st	X, r13

#ifndef NWK_ENABLE_SECURITY
  if (header->nwkFcf.security)
     be8:	1b 96       	adiw	r26, 0x0b	; 11
     bea:	8c 91       	ld	r24, X
     bec:	1b 97       	sbiw	r26, 0x0b	; 11
     bee:	98 2f       	mov	r25, r24
     bf0:	9a 70       	andi	r25, 0x0A	; 10

#ifdef NWK_ENABLE_MULTICAST
  if (header->nwkFcf.multicast && header->nwkFcf.ackRequest)
    return;
#else
  if (header->nwkFcf.multicast)
     bf2:	09 f0       	breq	.+2      	; 0xbf6 <nwkRxTaskHandler+0xa4>
     bf4:	95 c1       	rjmp	.+810    	; 0xf20 <nwkRxTaskHandler+0x3ce>
    return;
#endif

  if (NWK_BROADCAST_PANID == header->macDstPanId)
     bf6:	15 96       	adiw	r26, 0x05	; 5
     bf8:	2d 91       	ld	r18, X+
     bfa:	3c 91       	ld	r19, X
     bfc:	16 97       	sbiw	r26, 0x06	; 6
     bfe:	2f 3f       	cpi	r18, 0xFF	; 255
     c00:	3f 4f       	sbci	r19, 0xFF	; 255
     c02:	81 f4       	brne	.+32     	; 0xc24 <nwkRxTaskHandler+0xd2>
  {
    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     c04:	f5 01       	movw	r30, r10
     c06:	87 85       	ldd	r24, Z+15	; 0x0f
     c08:	90 89       	ldd	r25, Z+16	; 0x10
     c0a:	d4 01       	movw	r26, r8
     c0c:	2d 91       	ld	r18, X+
     c0e:	3c 91       	ld	r19, X
     c10:	28 17       	cp	r18, r24
     c12:	39 07       	cpc	r19, r25
     c14:	19 f0       	breq	.+6      	; 0xc1c <nwkRxTaskHandler+0xca>
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	09 f0       	breq	.+2      	; 0xc1c <nwkRxTaskHandler+0xca>
     c1a:	82 c1       	rjmp	.+772    	; 0xf20 <nwkRxTaskHandler+0x3ce>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     c1c:	22 e2       	ldi	r18, 0x22	; 34
     c1e:	f5 01       	movw	r30, r10
     c20:	20 83       	st	Z, r18
     c22:	7e c1       	rjmp	.+764    	; 0xf20 <nwkRxTaskHandler+0x3ce>
#ifdef NWK_ENABLE_ADDRESS_FILTER
  if (!NWK_FilterAddress(header->macSrcAddr, &frame->rx.lqi))
    return;
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
     c24:	d5 01       	movw	r26, r10
     c26:	1f 96       	adiw	r26, 0x0f	; 15
     c28:	2d 91       	ld	r18, X+
     c2a:	3c 91       	ld	r19, X
     c2c:	50 97       	sbiw	r26, 0x10	; 16
     c2e:	2f 3f       	cpi	r18, 0xFF	; 255
     c30:	3f 4f       	sbci	r19, 0xFF	; 255
     c32:	09 f0       	breq	.+2      	; 0xc36 <nwkRxTaskHandler+0xe4>
     c34:	7d c1       	rjmp	.+762    	; 0xf30 <nwkRxTaskHandler+0x3de>
     c36:	80 ff       	sbrs	r24, 0
     c38:	7b c1       	rjmp	.+758    	; 0xf30 <nwkRxTaskHandler+0x3de>
     c3a:	72 c1       	rjmp	.+740    	; 0xf20 <nwkRxTaskHandler+0x3ce>
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
     c3c:	8c 01       	movw	r16, r24

    if (entry->ttl && header->nwkSrcAddr == entry->src)
     c3e:	2c 91       	ld	r18, X
     c40:	22 23       	and	r18, r18
     c42:	09 f4       	brne	.+2      	; 0xc46 <nwkRxTaskHandler+0xf4>
     c44:	56 c0       	rjmp	.+172    	; 0xcf2 <nwkRxTaskHandler+0x1a0>
     c46:	20 81       	ld	r18, Z
     c48:	31 81       	ldd	r19, Z+1	; 0x01
     c4a:	42 17       	cp	r20, r18
     c4c:	53 07       	cpc	r21, r19
     c4e:	09 f0       	breq	.+2      	; 0xc52 <nwkRxTaskHandler+0x100>
     c50:	51 c0       	rjmp	.+162    	; 0xcf4 <nwkRxTaskHandler+0x1a2>
    {
      uint8_t diff = (int8_t)entry->seq - header->nwkSeq;
     c52:	f5 01       	movw	r30, r10
     c54:	94 85       	ldd	r25, Z+12	; 0x0c
     c56:	f8 01       	movw	r30, r16
     c58:	ee 0f       	add	r30, r30
     c5a:	ff 1f       	adc	r31, r31
     c5c:	ee 0f       	add	r30, r30
     c5e:	ff 1f       	adc	r31, r31
     c60:	e0 0f       	add	r30, r16
     c62:	f1 1f       	adc	r31, r17
     c64:	e5 5c       	subi	r30, 0xC5	; 197
     c66:	fa 4f       	sbci	r31, 0xFA	; 250
     c68:	82 81       	ldd	r24, Z+2	; 0x02
     c6a:	89 1b       	sub	r24, r25

      if (diff < 8)
     c6c:	88 30       	cpi	r24, 0x08	; 8
     c6e:	38 f5       	brcc	.+78     	; 0xcbe <nwkRxTaskHandler+0x16c>
      {
        if (entry->mask & (1 << diff))
     c70:	f8 01       	movw	r30, r16
     c72:	ee 0f       	add	r30, r30
     c74:	ff 1f       	adc	r31, r31
     c76:	ee 0f       	add	r30, r30
     c78:	ff 1f       	adc	r31, r31
     c7a:	e0 0f       	add	r30, r16
     c7c:	f1 1f       	adc	r31, r17
     c7e:	e5 5c       	subi	r30, 0xC5	; 197
     c80:	fa 4f       	sbci	r31, 0xFA	; 250
     c82:	93 81       	ldd	r25, Z+3	; 0x03
     c84:	29 2f       	mov	r18, r25
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	08 2e       	mov	r0, r24
     c8a:	02 c0       	rjmp	.+4      	; 0xc90 <nwkRxTaskHandler+0x13e>
     c8c:	35 95       	asr	r19
     c8e:	27 95       	ror	r18
     c90:	0a 94       	dec	r0
     c92:	e2 f7       	brpl	.-8      	; 0xc8c <nwkRxTaskHandler+0x13a>
     c94:	20 fd       	sbrc	r18, 0
     c96:	44 c1       	rjmp	.+648    	; 0xf20 <nwkRxTaskHandler+0x3ce>
            nwkRouteRemove(header->nwkDstAddr, header->nwkFcf.multicast);
        #endif
          return true;
        }

        entry->mask |= (1 << diff);
     c98:	f8 01       	movw	r30, r16
     c9a:	ee 0f       	add	r30, r30
     c9c:	ff 1f       	adc	r31, r31
     c9e:	ee 0f       	add	r30, r30
     ca0:	ff 1f       	adc	r31, r31
     ca2:	e0 0f       	add	r30, r16
     ca4:	f1 1f       	adc	r31, r17
     ca6:	e5 5c       	subi	r30, 0xC5	; 197
     ca8:	fa 4f       	sbci	r31, 0xFA	; 250
     caa:	21 e0       	ldi	r18, 0x01	; 1
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <nwkRxTaskHandler+0x162>
     cb0:	22 0f       	add	r18, r18
     cb2:	33 1f       	adc	r19, r19
     cb4:	8a 95       	dec	r24
     cb6:	e2 f7       	brpl	.-8      	; 0xcb0 <nwkRxTaskHandler+0x15e>
     cb8:	92 2b       	or	r25, r18
     cba:	93 83       	std	Z+3, r25	; 0x03
     cbc:	49 c1       	rjmp	.+658    	; 0xf50 <nwkRxTaskHandler+0x3fe>
      }
      else
      {
        uint8_t shift = -(int8_t)diff;

        entry->seq = header->nwkSeq;
     cbe:	f8 01       	movw	r30, r16
     cc0:	ee 0f       	add	r30, r30
     cc2:	ff 1f       	adc	r31, r31
     cc4:	ee 0f       	add	r30, r30
     cc6:	ff 1f       	adc	r31, r31
     cc8:	0e 0f       	add	r16, r30
     cca:	1f 1f       	adc	r17, r31
     ccc:	f8 01       	movw	r30, r16
     cce:	e5 5c       	subi	r30, 0xC5	; 197
     cd0:	fa 4f       	sbci	r31, 0xFA	; 250
     cd2:	92 83       	std	Z+2, r25	; 0x02
        entry->mask = (entry->mask << shift) | 1;
     cd4:	23 81       	ldd	r18, Z+3	; 0x03
     cd6:	30 e0       	ldi	r19, 0x00	; 0
        entry->mask |= (1 << diff);
        return false;
      }
      else
      {
        uint8_t shift = -(int8_t)diff;
     cd8:	81 95       	neg	r24

        entry->seq = header->nwkSeq;
        entry->mask = (entry->mask << shift) | 1;
     cda:	a9 01       	movw	r20, r18
     cdc:	02 c0       	rjmp	.+4      	; 0xce2 <nwkRxTaskHandler+0x190>
     cde:	44 0f       	add	r20, r20
     ce0:	55 1f       	adc	r21, r21
     ce2:	8a 95       	dec	r24
     ce4:	e2 f7       	brpl	.-8      	; 0xcde <nwkRxTaskHandler+0x18c>
     ce6:	ca 01       	movw	r24, r20
     ce8:	81 60       	ori	r24, 0x01	; 1
     cea:	83 83       	std	Z+3, r24	; 0x03
        entry->ttl = DUPLICATE_REJECTION_TTL;
     cec:	8b e0       	ldi	r24, 0x0B	; 11
     cee:	84 83       	std	Z+4, r24	; 0x04
     cf0:	2f c1       	rjmp	.+606    	; 0xf50 <nwkRxTaskHandler+0x3fe>
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    entry = &nwkRxDuplicateRejectionTable[i];
     cf2:	bf 01       	movw	r22, r30
     cf4:	01 96       	adiw	r24, 0x01	; 1
     cf6:	15 96       	adiw	r26, 0x05	; 5
     cf8:	35 96       	adiw	r30, 0x05	; 5
static bool nwkRxRejectDuplicate(NwkFrameHeader_t *header)
{
  NwkDuplicateRejectionEntry_t *entry;
  NwkDuplicateRejectionEntry_t *freeEntry = NULL;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     cfa:	ee 15       	cp	r30, r14
     cfc:	ff 05       	cpc	r31, r15
     cfe:	09 f0       	breq	.+2      	; 0xd02 <nwkRxTaskHandler+0x1b0>
     d00:	9d cf       	rjmp	.-198    	; 0xc3c <nwkRxTaskHandler+0xea>

    if (0 == entry->ttl)
      freeEntry = entry;
  }

  if (NULL == freeEntry)
     d02:	61 15       	cp	r22, r1
     d04:	71 05       	cpc	r23, r1
     d06:	09 f4       	brne	.+2      	; 0xd0a <nwkRxTaskHandler+0x1b8>
     d08:	0b c1       	rjmp	.+534    	; 0xf20 <nwkRxTaskHandler+0x3ce>
    return true;

  freeEntry->src = header->nwkSrcAddr;
     d0a:	db 01       	movw	r26, r22
     d0c:	11 96       	adiw	r26, 0x01	; 1
     d0e:	5c 93       	st	X, r21
     d10:	4e 93       	st	-X, r20
  freeEntry->seq = header->nwkSeq;
     d12:	f5 01       	movw	r30, r10
     d14:	84 85       	ldd	r24, Z+12	; 0x0c
     d16:	12 96       	adiw	r26, 0x02	; 2
     d18:	8c 93       	st	X, r24
     d1a:	12 97       	sbiw	r26, 0x02	; 2
  freeEntry->mask = 1;
     d1c:	f1 e0       	ldi	r31, 0x01	; 1
     d1e:	13 96       	adiw	r26, 0x03	; 3
     d20:	fc 93       	st	X, r31
     d22:	13 97       	sbiw	r26, 0x03	; 3
  freeEntry->ttl = DUPLICATE_REJECTION_TTL;
     d24:	8b e0       	ldi	r24, 0x0B	; 11
     d26:	14 96       	adiw	r26, 0x04	; 4
     d28:	8c 93       	st	X, r24

  SYS_TimerStart(&nwkRxDuplicateRejectionTimer);
     d2a:	8d e2       	ldi	r24, 0x2D	; 45
     d2c:	95 e0       	ldi	r25, 0x05	; 5
     d2e:	0e 94 c8 0b 	call	0x1790	; 0x1790 <SYS_TimerStart>
     d32:	0e c1       	rjmp	.+540    	; 0xf50 <nwkRxTaskHandler+0x3fe>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
     d34:	d5 01       	movw	r26, r10
     d36:	1f 96       	adiw	r26, 0x0f	; 15
     d38:	8d 91       	ld	r24, X+
     d3a:	9c 91       	ld	r25, X
     d3c:	50 97       	sbiw	r26, 0x10	; 16
     d3e:	f4 01       	movw	r30, r8
     d40:	20 81       	ld	r18, Z
     d42:	31 81       	ldd	r19, Z+1	; 0x01
     d44:	28 17       	cp	r18, r24
     d46:	39 07       	cpc	r19, r25
     d48:	a9 f0       	breq	.+42     	; 0xd74 <nwkRxTaskHandler+0x222>
        0 == header->nwkFcf.linkLocal)
     d4a:	1b 96       	adiw	r26, 0x0b	; 11
     d4c:	2c 91       	ld	r18, X
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
     d4e:	22 fd       	sbrc	r18, 2
     d50:	0e c0       	rjmp	.+28     	; 0xd6e <nwkRxTaskHandler+0x21c>
        0 == header->nwkFcf.linkLocal)
      nwkTxBroadcastFrame(frame);
     d52:	c5 01       	movw	r24, r10
     d54:	0e 94 9c 08 	call	0x1138	; 0x1138 <nwkTxBroadcastFrame>

    if (nwkIb.addr == header->nwkDstAddr || NWK_BROADCAST_ADDR == header->nwkDstAddr)
     d58:	d5 01       	movw	r26, r10
     d5a:	1f 96       	adiw	r26, 0x0f	; 15
     d5c:	8d 91       	ld	r24, X+
     d5e:	9c 91       	ld	r25, X
     d60:	50 97       	sbiw	r26, 0x10	; 16
     d62:	f4 01       	movw	r30, r8
     d64:	20 81       	ld	r18, Z
     d66:	31 81       	ldd	r19, Z+1	; 0x01
     d68:	28 17       	cp	r18, r24
     d6a:	39 07       	cpc	r19, r25
     d6c:	19 f0       	breq	.+6      	; 0xd74 <nwkRxTaskHandler+0x222>
     d6e:	01 96       	adiw	r24, 0x01	; 1
     d70:	09 f0       	breq	.+2      	; 0xd74 <nwkRxTaskHandler+0x222>
     d72:	d6 c0       	rjmp	.+428    	; 0xf20 <nwkRxTaskHandler+0x3ce>
    #ifdef NWK_ENABLE_SECURITY
      if (header->nwkFcf.security)
        frame->state = NWK_RX_STATE_DECRYPT;
      else
    #endif
        frame->state = NWK_RX_STATE_INDICATE;
     d74:	e2 e2       	ldi	r30, 0x22	; 34
     d76:	d5 01       	movw	r26, r10
     d78:	ec 93       	st	X, r30
     d7a:	d2 c0       	rjmp	.+420    	; 0xf20 <nwkRxTaskHandler+0x3ce>
*****************************************************************************/
static void nwkRxHandleIndication(NwkFrame_t *frame)
{
  bool ack;

  nwkRxAckControl = 0;
     d7c:	10 92 3a 05 	sts	0x053A, r1
static bool nwkRxIndicateFrame(NwkFrame_t *frame)
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
     d80:	d5 01       	movw	r26, r10
     d82:	51 96       	adiw	r26, 0x11	; 17
     d84:	2c 91       	ld	r18, X
     d86:	51 97       	sbiw	r26, 0x11	; 17
     d88:	22 95       	swap	r18
     d8a:	2f 70       	andi	r18, 0x0F	; 15
     d8c:	e2 2f       	mov	r30, r18
     d8e:	f0 e0       	ldi	r31, 0x00	; 0
     d90:	ee 0f       	add	r30, r30
     d92:	ff 1f       	adc	r31, r31
     d94:	ea 5e       	subi	r30, 0xEA	; 234
     d96:	f9 4f       	sbci	r31, 0xF9	; 249
     d98:	01 90       	ld	r0, Z+
     d9a:	f0 81       	ld	r31, Z
     d9c:	e0 2d       	mov	r30, r0
     d9e:	30 97       	sbiw	r30, 0x00	; 0
     da0:	09 f4       	brne	.+2      	; 0xda4 <nwkRxTaskHandler+0x252>
     da2:	61 c0       	rjmp	.+194    	; 0xe66 <nwkRxTaskHandler+0x314>
    return false;

  ind.srcAddr = header->nwkSrcAddr;
     da4:	1d 96       	adiw	r26, 0x0d	; 13
     da6:	8d 91       	ld	r24, X+
     da8:	9c 91       	ld	r25, X
     daa:	1e 97       	sbiw	r26, 0x0e	; 14
     dac:	9a 83       	std	Y+2, r25	; 0x02
     dae:	89 83       	std	Y+1, r24	; 0x01
  ind.dstAddr = header->nwkDstAddr;
     db0:	1f 96       	adiw	r26, 0x0f	; 15
     db2:	4d 91       	ld	r20, X+
     db4:	5c 91       	ld	r21, X
     db6:	50 97       	sbiw	r26, 0x10	; 16
     db8:	5c 83       	std	Y+4, r21	; 0x04
     dba:	4b 83       	std	Y+3, r20	; 0x03
  ind.srcEndpoint = header->nwkSrcEndpoint;
     dbc:	51 96       	adiw	r26, 0x11	; 17
     dbe:	3c 91       	ld	r19, X
     dc0:	51 97       	sbiw	r26, 0x11	; 17
     dc2:	3f 70       	andi	r19, 0x0F	; 15
     dc4:	3d 83       	std	Y+5, r19	; 0x05
  ind.dstEndpoint = header->nwkDstEndpoint;
     dc6:	2e 83       	std	Y+6, r18	; 0x06
  ind.data = frame->payload;
     dc8:	af 57       	subi	r26, 0x7F	; 127
     dca:	bf 4f       	sbci	r27, 0xFF	; 255
     dcc:	6d 91       	ld	r22, X+
     dce:	7c 91       	ld	r23, X
     dd0:	79 87       	std	Y+9, r23	; 0x09
     dd2:	68 87       	std	Y+8, r22	; 0x08

/*************************************************************************//**
*****************************************************************************/
static inline uint8_t nwkFramePayloadSize(NwkFrame_t *frame)
{
  return frame->size - (frame->payload - frame->data);
     dd4:	95 01       	movw	r18, r10
     dd6:	2e 5f       	subi	r18, 0xFE	; 254
     dd8:	3f 4f       	sbci	r19, 0xFF	; 255
     dda:	26 1b       	sub	r18, r22
     ddc:	37 0b       	sbc	r19, r23
     dde:	d5 01       	movw	r26, r10
     de0:	11 96       	adiw	r26, 0x01	; 1
     de2:	3c 91       	ld	r19, X
     de4:	11 97       	sbiw	r26, 0x01	; 1
     de6:	23 0f       	add	r18, r19
  ind.size = nwkFramePayloadSize(frame);
     de8:	2a 87       	std	Y+10, r18	; 0x0a
  ind.lqi = frame->rx.lqi;
     dea:	ad 57       	subi	r26, 0x7D	; 125
     dec:	bf 4f       	sbci	r27, 0xFF	; 255
     dee:	2c 91       	ld	r18, X
     df0:	2b 87       	std	Y+11, r18	; 0x0b
  ind.rssi = frame->rx.rssi;
     df2:	11 96       	adiw	r26, 0x01	; 1
     df4:	2c 91       	ld	r18, X
     df6:	2c 87       	std	Y+12, r18	; 0x0c

  ind.options  = (header->nwkFcf.ackRequest) ? NWK_IND_OPT_ACK_REQUESTED : 0;
     df8:	d5 01       	movw	r26, r10
     dfa:	1b 96       	adiw	r26, 0x0b	; 11
     dfc:	3c 91       	ld	r19, X
  ind.options |= (header->nwkFcf.security) ? NWK_IND_OPT_SECURED : 0;
     dfe:	63 2f       	mov	r22, r19
     e00:	63 70       	andi	r22, 0x03	; 3
  ind.options |= (header->nwkFcf.linkLocal) ? NWK_IND_OPT_LINK_LOCAL : 0;
     e02:	32 fd       	sbrc	r19, 2
     e04:	02 c0       	rjmp	.+4      	; 0xe0a <nwkRxTaskHandler+0x2b8>
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	01 c0       	rjmp	.+2      	; 0xe0c <nwkRxTaskHandler+0x2ba>
     e0a:	20 e2       	ldi	r18, 0x20	; 32
     e0c:	26 2b       	or	r18, r22
  ind.options |= (header->nwkFcf.multicast) ? NWK_IND_OPT_MULTICAST : 0;
     e0e:	33 fd       	sbrc	r19, 3
     e10:	02 c0       	rjmp	.+4      	; 0xe16 <nwkRxTaskHandler+0x2c4>
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	01 c0       	rjmp	.+2      	; 0xe18 <nwkRxTaskHandler+0x2c6>
     e16:	30 e4       	ldi	r19, 0x40	; 64
     e18:	23 2b       	or	r18, r19
  ind.options |= (NWK_BROADCAST_ADDR == header->nwkDstAddr) ? NWK_IND_OPT_BROADCAST : 0;
     e1a:	4f 3f       	cpi	r20, 0xFF	; 255
     e1c:	5f 4f       	sbci	r21, 0xFF	; 255
     e1e:	11 f0       	breq	.+4      	; 0xe24 <nwkRxTaskHandler+0x2d2>
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	01 c0       	rjmp	.+2      	; 0xe26 <nwkRxTaskHandler+0x2d4>
     e24:	34 e0       	ldi	r19, 0x04	; 4
     e26:	23 2b       	or	r18, r19
  ind.options |= (header->nwkSrcAddr == header->macSrcAddr) ? NWK_IND_OPT_LOCAL : 0;
     e28:	d5 01       	movw	r26, r10
     e2a:	19 96       	adiw	r26, 0x09	; 9
     e2c:	4d 91       	ld	r20, X+
     e2e:	5c 91       	ld	r21, X
     e30:	1a 97       	sbiw	r26, 0x0a	; 10
     e32:	84 17       	cp	r24, r20
     e34:	95 07       	cpc	r25, r21
     e36:	11 f0       	breq	.+4      	; 0xe3c <nwkRxTaskHandler+0x2ea>
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	01 c0       	rjmp	.+2      	; 0xe3e <nwkRxTaskHandler+0x2ec>
     e3c:	98 e0       	ldi	r25, 0x08	; 8
     e3e:	82 2f       	mov	r24, r18
     e40:	89 2b       	or	r24, r25
     e42:	8f 83       	std	Y+7, r24	; 0x07
  ind.options |= (NWK_BROADCAST_PANID == header->macDstPanId) ? NWK_IND_OPT_BROADCAST_PAN_ID : 0;
     e44:	d5 01       	movw	r26, r10
     e46:	15 96       	adiw	r26, 0x05	; 5
     e48:	2d 91       	ld	r18, X+
     e4a:	3c 91       	ld	r19, X
     e4c:	16 97       	sbiw	r26, 0x06	; 6
     e4e:	2f 3f       	cpi	r18, 0xFF	; 255
     e50:	3f 4f       	sbci	r19, 0xFF	; 255
     e52:	11 f0       	breq	.+4      	; 0xe58 <nwkRxTaskHandler+0x306>
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	01 c0       	rjmp	.+2      	; 0xe5a <nwkRxTaskHandler+0x308>
     e58:	9c 2d       	mov	r25, r12
     e5a:	89 2b       	or	r24, r25
     e5c:	8f 83       	std	Y+7, r24	; 0x07

  return nwkIb.endpoint[header->nwkDstEndpoint](&ind);
     e5e:	ce 01       	movw	r24, r28
     e60:	01 96       	adiw	r24, 0x01	; 1
     e62:	09 95       	icall
     e64:	01 c0       	rjmp	.+2      	; 0xe68 <nwkRxTaskHandler+0x316>
{
  NwkFrameHeader_t *header = &frame->header;
  NWK_DataInd_t ind;

  if (NULL == nwkIb.endpoint[header->nwkDstEndpoint])
    return false;
     e66:	80 e0       	ldi	r24, 0x00	; 0
  bool ack;

  nwkRxAckControl = 0;
  ack = nwkRxIndicateFrame(frame);
  
  if (0 == frame->header.nwkFcf.ackRequest)
     e68:	f5 01       	movw	r30, r10
     e6a:	93 85       	ldd	r25, Z+11	; 0x0b
     e6c:	90 ff       	sbrs	r25, 0
    ack = false;
     e6e:	80 e0       	ldi	r24, 0x00	; 0

  if (NWK_BROADCAST_ADDR == frame->header.macDstAddr &&
     e70:	d5 01       	movw	r26, r10
     e72:	17 96       	adiw	r26, 0x07	; 7
     e74:	2d 91       	ld	r18, X+
     e76:	3c 91       	ld	r19, X
     e78:	18 97       	sbiw	r26, 0x08	; 8
     e7a:	2f 3f       	cpi	r18, 0xFF	; 255
     e7c:	3f 4f       	sbci	r19, 0xFF	; 255
     e7e:	69 f4       	brne	.+26     	; 0xe9a <nwkRxTaskHandler+0x348>
     e80:	f4 01       	movw	r30, r8
     e82:	40 81       	ld	r20, Z
     e84:	51 81       	ldd	r21, Z+1	; 0x01
     e86:	d5 01       	movw	r26, r10
     e88:	1f 96       	adiw	r26, 0x0f	; 15
     e8a:	2d 91       	ld	r18, X+
     e8c:	3c 91       	ld	r19, X
     e8e:	50 97       	sbiw	r26, 0x10	; 16
     e90:	42 17       	cp	r20, r18
     e92:	53 07       	cpc	r21, r19
     e94:	11 f4       	brne	.+4      	; 0xe9a <nwkRxTaskHandler+0x348>
      nwkIb.addr == frame->header.nwkDstAddr &&
     e96:	93 ff       	sbrs	r25, 3
      0 == frame->header.nwkFcf.multicast)
    ack = true;
     e98:	81 e0       	ldi	r24, 0x01	; 1

  if (NWK_BROADCAST_PANID == frame->header.macDstPanId)
     e9a:	f5 01       	movw	r30, r10
     e9c:	25 81       	ldd	r18, Z+5	; 0x05
     e9e:	36 81       	ldd	r19, Z+6	; 0x06
     ea0:	2f 3f       	cpi	r18, 0xFF	; 255
     ea2:	3f 4f       	sbci	r19, 0xFF	; 255
     ea4:	b9 f1       	breq	.+110    	; 0xf14 <nwkRxTaskHandler+0x3c2>
    ack = false;

  if (NWK_BROADCAST_ADDR == nwkIb.addr)
     ea6:	d4 01       	movw	r26, r8
     ea8:	2d 91       	ld	r18, X+
     eaa:	3c 91       	ld	r19, X
     eac:	2f 3f       	cpi	r18, 0xFF	; 255
     eae:	3f 4f       	sbci	r19, 0xFF	; 255
     eb0:	89 f1       	breq	.+98     	; 0xf14 <nwkRxTaskHandler+0x3c2>
    ack = false;

  if (ack)
     eb2:	88 23       	and	r24, r24
     eb4:	79 f1       	breq	.+94     	; 0xf14 <nwkRxTaskHandler+0x3c2>
static void nwkRxSendAck(NwkFrame_t *frame)
{
  NwkFrame_t *ack;
  NwkCommandAck_t *command;

  if (NULL == (ack = nwkFrameAlloc()))
     eb6:	0e 94 bd 04 	call	0x97a	; 0x97a <nwkFrameAlloc>
     eba:	8c 01       	movw	r16, r24
     ebc:	00 97       	sbiw	r24, 0x00	; 0
     ebe:	51 f1       	breq	.+84     	; 0xf14 <nwkRxTaskHandler+0x3c2>
    return;

  nwkFrameCommandInit(ack);
     ec0:	0e 94 20 05 	call	0xa40	; 0xa40 <nwkFrameCommandInit>

  ack->size += sizeof(NwkCommandAck_t);
     ec4:	f8 01       	movw	r30, r16
     ec6:	81 81       	ldd	r24, Z+1	; 0x01
     ec8:	8d 5f       	subi	r24, 0xFD	; 253
     eca:	81 83       	std	Z+1, r24	; 0x01
  ack->tx.confirm = NULL;
     ecc:	e9 57       	subi	r30, 0x79	; 121
     ece:	ff 4f       	sbci	r31, 0xFF	; 255
     ed0:	11 82       	std	Z+1, r1	; 0x01
     ed2:	10 82       	st	Z, r1

  ack->header.nwkFcf.security = frame->header.nwkFcf.security;
     ed4:	d5 01       	movw	r26, r10
     ed6:	1b 96       	adiw	r26, 0x0b	; 11
     ed8:	8c 91       	ld	r24, X
     eda:	1b 97       	sbiw	r26, 0x0b	; 11
     edc:	86 95       	lsr	r24
     ede:	81 70       	andi	r24, 0x01	; 1
     ee0:	f8 01       	movw	r30, r16
     ee2:	93 85       	ldd	r25, Z+11	; 0x0b
     ee4:	80 fb       	bst	r24, 0
     ee6:	91 f9       	bld	r25, 1
     ee8:	93 87       	std	Z+11, r25	; 0x0b
  ack->header.nwkDstAddr = frame->header.nwkSrcAddr;
     eea:	1d 96       	adiw	r26, 0x0d	; 13
     eec:	8d 91       	ld	r24, X+
     eee:	9c 91       	ld	r25, X
     ef0:	1e 97       	sbiw	r26, 0x0e	; 14
     ef2:	90 8b       	std	Z+16, r25	; 0x10
     ef4:	87 87       	std	Z+15, r24	; 0x0f

  command = (NwkCommandAck_t *)ack->payload;
     ef6:	ef 57       	subi	r30, 0x7F	; 127
     ef8:	ff 4f       	sbci	r31, 0xFF	; 255
     efa:	01 90       	ld	r0, Z+
     efc:	f0 81       	ld	r31, Z
     efe:	e0 2d       	mov	r30, r0
  command->id = NWK_COMMAND_ACK;
     f00:	10 82       	st	Z, r1
  command->control = nwkRxAckControl;
     f02:	80 91 3a 05 	lds	r24, 0x053A
     f06:	82 83       	std	Z+2, r24	; 0x02
  command->seq = frame->header.nwkSeq;
     f08:	1c 96       	adiw	r26, 0x0c	; 12
     f0a:	8c 91       	ld	r24, X
     f0c:	81 83       	std	Z+1, r24	; 0x01

  nwkTxFrame(ack);
     f0e:	c8 01       	movw	r24, r16
     f10:	0e 94 4d 08 	call	0x109a	; 0x109a <nwkTxFrame>
    ack = false;

  if (ack)
    nwkRxSendAck(frame);

  frame->state = NWK_RX_STATE_FINISH;
     f14:	d5 01       	movw	r26, r10
     f16:	dc 92       	st	X, r13
     f18:	03 c0       	rjmp	.+6      	; 0xf20 <nwkRxTaskHandler+0x3ce>
      } break;
#endif

      case NWK_RX_STATE_FINISH:
      {
        nwkFrameFree(frame);
     f1a:	c5 01       	movw	r24, r10
     f1c:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <nwkFrameFree>
*****************************************************************************/
void nwkRxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
     f20:	c5 01       	movw	r24, r10
     f22:	0e 94 fe 04 	call	0x9fc	; 0x9fc <nwkFrameNext>
     f26:	5c 01       	movw	r10, r24
     f28:	89 2b       	or	r24, r25
     f2a:	09 f0       	breq	.+2      	; 0xf2e <nwkRxTaskHandler+0x3dc>
     f2c:	51 ce       	rjmp	.-862    	; 0xbd0 <nwkRxTaskHandler+0x7e>
     f2e:	17 c0       	rjmp	.+46     	; 0xf5e <nwkRxTaskHandler+0x40c>
#endif

  if (NWK_BROADCAST_ADDR == header->nwkDstAddr && header->nwkFcf.ackRequest)
    return;

  if (nwkIb.addr == header->nwkSrcAddr)
     f30:	f5 01       	movw	r30, r10
     f32:	45 85       	ldd	r20, Z+13	; 0x0d
     f34:	56 85       	ldd	r21, Z+14	; 0x0e
     f36:	d4 01       	movw	r26, r8
     f38:	8d 91       	ld	r24, X+
     f3a:	9c 91       	ld	r25, X
     f3c:	84 17       	cp	r24, r20
     f3e:	95 07       	cpc	r25, r21
     f40:	79 f3       	breq	.-34     	; 0xf20 <nwkRxTaskHandler+0x3ce>
     f42:	d2 01       	movw	r26, r4
     f44:	f3 01       	movw	r30, r6
     f46:	83 2d       	mov	r24, r3
     f48:	92 2d       	mov	r25, r2
     f4a:	63 2d       	mov	r22, r3
     f4c:	72 2d       	mov	r23, r2
     f4e:	76 ce       	rjmp	.-788    	; 0xc3c <nwkRxTaskHandler+0xea>
    }
  }
  else
#endif // NWK_ENABLE_MULTICAST
  {
    if (NWK_BROADCAST_ADDR == header->macDstAddr && nwkIb.addr != header->nwkDstAddr &&
     f50:	f5 01       	movw	r30, r10
     f52:	87 81       	ldd	r24, Z+7	; 0x07
     f54:	90 85       	ldd	r25, Z+8	; 0x08
     f56:	01 96       	adiw	r24, 0x01	; 1
     f58:	09 f0       	breq	.+2      	; 0xf5c <nwkRxTaskHandler+0x40a>
     f5a:	fe ce       	rjmp	.-516    	; 0xd58 <nwkRxTaskHandler+0x206>
     f5c:	eb ce       	rjmp	.-554    	; 0xd34 <nwkRxTaskHandler+0x1e2>
      {
        nwkFrameFree(frame);
      } break;
    }
  }
}
     f5e:	2c 96       	adiw	r28, 0x0c	; 12
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	df 91       	pop	r29
     f6c:	cf 91       	pop	r28
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	ff 90       	pop	r15
     f74:	ef 90       	pop	r14
     f76:	df 90       	pop	r13
     f78:	cf 90       	pop	r12
     f7a:	bf 90       	pop	r11
     f7c:	af 90       	pop	r10
     f7e:	9f 90       	pop	r9
     f80:	8f 90       	pop	r8
     f82:	7f 90       	pop	r7
     f84:	6f 90       	pop	r6
     f86:	5f 90       	pop	r5
     f88:	4f 90       	pop	r4
     f8a:	3f 90       	pop	r3
     f8c:	2f 90       	pop	r2
     f8e:	08 95       	ret

00000f90 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
     f90:	ef 92       	push	r14
     f92:	ff 92       	push	r15
     f94:	0f 93       	push	r16
     f96:	1f 93       	push	r17
     f98:	cf 93       	push	r28
     f9a:	7c 01       	movw	r14, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
     f9c:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
     fa2:	01 e0       	ldi	r16, 0x01	; 1

      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
     fa4:	c3 e1       	ldi	r28, 0x13	; 19
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
     fa6:	13 c0       	rjmp	.+38     	; 0xfce <nwkTxDelayTimerHandler+0x3e>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
     fa8:	fc 01       	movw	r30, r24
     faa:	20 81       	ld	r18, Z
     fac:	21 31       	cpi	r18, 0x11	; 17
     fae:	79 f4       	brne	.+30     	; 0xfce <nwkTxDelayTimerHandler+0x3e>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
     fb0:	ec 57       	subi	r30, 0x7C	; 124
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	20 81       	ld	r18, Z
     fb6:	31 81       	ldd	r19, Z+1	; 0x01
     fb8:	21 50       	subi	r18, 0x01	; 1
     fba:	31 09       	sbc	r19, r1
     fbc:	31 83       	std	Z+1, r19	; 0x01
     fbe:	20 83       	st	Z, r18
     fc0:	23 2b       	or	r18, r19
     fc2:	21 f4       	brne	.+8      	; 0xfcc <nwkTxDelayTimerHandler+0x3c>
        frame->state = NWK_TX_STATE_SEND;
     fc4:	fc 01       	movw	r30, r24
     fc6:	c0 83       	st	Z, r28

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
     fc8:	10 2f       	mov	r17, r16
     fca:	01 c0       	rjmp	.+2      	; 0xfce <nwkTxDelayTimerHandler+0x3e>
     fcc:	10 2f       	mov	r17, r16
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
     fce:	0e 94 fe 04 	call	0x9fc	; 0x9fc <nwkFrameNext>
     fd2:	00 97       	sbiw	r24, 0x00	; 0
     fd4:	49 f7       	brne	.-46     	; 0xfa8 <nwkTxDelayTimerHandler+0x18>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
     fd6:	11 23       	and	r17, r17
     fd8:	19 f0       	breq	.+6      	; 0xfe0 <nwkTxDelayTimerHandler+0x50>
    SYS_TimerStart(timer);
     fda:	c7 01       	movw	r24, r14
     fdc:	0e 94 c8 0b 	call	0x1790	; 0x1790 <SYS_TimerStart>
}
     fe0:	cf 91       	pop	r28
     fe2:	1f 91       	pop	r17
     fe4:	0f 91       	pop	r16
     fe6:	ff 90       	pop	r15
     fe8:	ef 90       	pop	r14
     fea:	08 95       	ret

00000fec <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
     fec:	ef 92       	push	r14
     fee:	ff 92       	push	r15
     ff0:	0f 93       	push	r16
     ff2:	1f 93       	push	r17
     ff4:	cf 93       	push	r28
     ff6:	df 93       	push	r29
     ff8:	7c 01       	movw	r14, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
     ffa:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    1000:	01 e0       	ldi	r16, 0x01	; 1

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    1002:	d7 e1       	ldi	r29, 0x17	; 23
  frame->tx.status = status;
    1004:	c0 e1       	ldi	r28, 0x10	; 16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    1006:	16 c0       	rjmp	.+44     	; 0x1034 <nwkTxAckWaitTimerHandler+0x48>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    1008:	fc 01       	movw	r30, r24
    100a:	20 81       	ld	r18, Z
    100c:	26 31       	cpi	r18, 0x16	; 22
    100e:	91 f4       	brne	.+36     	; 0x1034 <nwkTxAckWaitTimerHandler+0x48>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    1010:	ec 57       	subi	r30, 0x7C	; 124
    1012:	ff 4f       	sbci	r31, 0xFF	; 255
    1014:	20 81       	ld	r18, Z
    1016:	31 81       	ldd	r19, Z+1	; 0x01
    1018:	21 50       	subi	r18, 0x01	; 1
    101a:	31 09       	sbc	r19, r1
    101c:	31 83       	std	Z+1, r19	; 0x01
    101e:	20 83       	st	Z, r18
    1020:	23 2b       	or	r18, r19
    1022:	39 f4       	brne	.+14     	; 0x1032 <nwkTxAckWaitTimerHandler+0x46>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    1024:	fc 01       	movw	r30, r24
    1026:	d0 83       	st	Z, r29
  frame->tx.status = status;
    1028:	ed 57       	subi	r30, 0x7D	; 125
    102a:	ff 4f       	sbci	r31, 0xFF	; 255
    102c:	c0 83       	st	Z, r28

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    102e:	10 2f       	mov	r17, r16
    1030:	01 c0       	rjmp	.+2      	; 0x1034 <nwkTxAckWaitTimerHandler+0x48>
    1032:	10 2f       	mov	r17, r16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    1034:	0e 94 fe 04 	call	0x9fc	; 0x9fc <nwkFrameNext>
    1038:	00 97       	sbiw	r24, 0x00	; 0
    103a:	31 f7       	brne	.-52     	; 0x1008 <nwkTxAckWaitTimerHandler+0x1c>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
    103c:	11 23       	and	r17, r17
    103e:	19 f0       	breq	.+6      	; 0x1046 <nwkTxAckWaitTimerHandler+0x5a>
    SYS_TimerStart(timer);
    1040:	c7 01       	movw	r24, r14
    1042:	0e 94 c8 0b 	call	0x1790	; 0x1790 <SYS_TimerStart>
}
    1046:	df 91       	pop	r29
    1048:	cf 91       	pop	r28
    104a:	1f 91       	pop	r17
    104c:	0f 91       	pop	r16
    104e:	ff 90       	pop	r15
    1050:	ef 90       	pop	r14
    1052:	08 95       	ret

00001054 <nwkTxInit>:
/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
    1054:	10 92 88 05 	sts	0x0588, r1
    1058:	10 92 87 05 	sts	0x0587, r1

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    105c:	ea e7       	ldi	r30, 0x7A	; 122
    105e:	f5 e0       	ldi	r31, 0x05	; 5
    1060:	82 e3       	ldi	r24, 0x32	; 50
    1062:	90 e0       	ldi	r25, 0x00	; 0
    1064:	a0 e0       	ldi	r26, 0x00	; 0
    1066:	b0 e0       	ldi	r27, 0x00	; 0
    1068:	86 83       	std	Z+6, r24	; 0x06
    106a:	97 83       	std	Z+7, r25	; 0x07
    106c:	a0 87       	std	Z+8, r26	; 0x08
    106e:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1070:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    1072:	86 ef       	ldi	r24, 0xF6	; 246
    1074:	97 e0       	ldi	r25, 0x07	; 7
    1076:	94 87       	std	Z+12, r25	; 0x0c
    1078:	83 87       	std	Z+11, r24	; 0x0b

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    107a:	ed e6       	ldi	r30, 0x6D	; 109
    107c:	f5 e0       	ldi	r31, 0x05	; 5
    107e:	8a e0       	ldi	r24, 0x0A	; 10
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	a0 e0       	ldi	r26, 0x00	; 0
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	86 83       	std	Z+6, r24	; 0x06
    1088:	97 83       	std	Z+7, r25	; 0x07
    108a:	a0 87       	std	Z+8, r26	; 0x08
    108c:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    108e:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    1090:	88 ec       	ldi	r24, 0xC8	; 200
    1092:	97 e0       	ldi	r25, 0x07	; 7
    1094:	94 87       	std	Z+12, r25	; 0x0c
    1096:	83 87       	std	Z+11, r24	; 0x0b
    1098:	08 95       	ret

0000109a <nwkTxFrame>:
}

/*************************************************************************//**
*****************************************************************************/
void nwkTxFrame(NwkFrame_t *frame)
{
    109a:	cf 93       	push	r28
    109c:	df 93       	push	r29
    109e:	fc 01       	movw	r30, r24
  NwkFrameHeader_t *header = &frame->header;

  if (frame->tx.control & NWK_TX_CONTROL_ROUTING)
    10a0:	dc 01       	movw	r26, r24
    10a2:	aa 57       	subi	r26, 0x7A	; 122
    10a4:	bf 4f       	sbci	r27, 0xFF	; 255
    10a6:	8c 91       	ld	r24, X
    10a8:	81 ff       	sbrs	r24, 1
    10aa:	03 c0       	rjmp	.+6      	; 0x10b2 <nwkTxFrame+0x18>
  {
    frame->state = NWK_TX_STATE_DELAY;
    10ac:	92 e1       	ldi	r25, 0x12	; 18
    10ae:	90 83       	st	Z, r25
    10b0:	02 c0       	rjmp	.+4      	; 0x10b6 <nwkTxFrame+0x1c>
  #ifdef NWK_ENABLE_SECURITY
    if (header->nwkFcf.security)
      frame->state = NWK_TX_STATE_ENCRYPT;
    else
  #endif
      frame->state = NWK_TX_STATE_DELAY;
    10b2:	92 e1       	ldi	r25, 0x12	; 18
    10b4:	90 83       	st	Z, r25
  }

  frame->tx.status = NWK_SUCCESS_STATUS;
    10b6:	df 01       	movw	r26, r30
    10b8:	ad 57       	subi	r26, 0x7D	; 125
    10ba:	bf 4f       	sbci	r27, 0xFF	; 255
    10bc:	1c 92       	st	X, r1

  if (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID)
    10be:	80 ff       	sbrs	r24, 0
    10c0:	05 c0       	rjmp	.+10     	; 0x10cc <nwkTxFrame+0x32>
    header->macDstPanId = NWK_BROADCAST_PANID;
    10c2:	8f ef       	ldi	r24, 0xFF	; 255
    10c4:	9f ef       	ldi	r25, 0xFF	; 255
    10c6:	96 83       	std	Z+6, r25	; 0x06
    10c8:	85 83       	std	Z+5, r24	; 0x05
    10ca:	06 c0       	rjmp	.+12     	; 0x10d8 <nwkTxFrame+0x3e>
  else
    header->macDstPanId = nwkIb.panId;
    10cc:	80 91 12 06 	lds	r24, 0x0612
    10d0:	90 91 13 06 	lds	r25, 0x0613
    10d4:	96 83       	std	Z+6, r25	; 0x06
    10d6:	85 83       	std	Z+5, r24	; 0x05
  if (0 == (frame->tx.control & NWK_TX_CONTROL_DIRECT_LINK) && 
      0 == (frame->tx.control & NWK_TX_CONTROL_BROADCAST_PAN_ID))
    nwkRoutePrepareTx(frame);
  else
#endif
    header->macDstAddr = header->nwkDstAddr;
    10d8:	27 85       	ldd	r18, Z+15	; 0x0f
    10da:	30 89       	ldd	r19, Z+16	; 0x10
    10dc:	30 87       	std	Z+8, r19	; 0x08
    10de:	27 83       	std	Z+7, r18	; 0x07

  header->macSrcAddr = nwkIb.addr;
    10e0:	a0 e1       	ldi	r26, 0x10	; 16
    10e2:	b6 e0       	ldi	r27, 0x06	; 6
    10e4:	8d 91       	ld	r24, X+
    10e6:	9c 91       	ld	r25, X
    10e8:	11 97       	sbiw	r26, 0x01	; 1
    10ea:	92 87       	std	Z+10, r25	; 0x0a
    10ec:	81 87       	std	Z+9, r24	; 0x09
  header->macSeq = ++nwkIb.macSeqNum;
    10ee:	15 96       	adiw	r26, 0x05	; 5
    10f0:	8c 91       	ld	r24, X
    10f2:	15 97       	sbiw	r26, 0x05	; 5
    10f4:	8f 5f       	subi	r24, 0xFF	; 255
    10f6:	15 96       	adiw	r26, 0x05	; 5
    10f8:	8c 93       	st	X, r24
    10fa:	84 83       	std	Z+4, r24	; 0x04

  if (NWK_BROADCAST_ADDR == header->macDstAddr)
    10fc:	2f 3f       	cpi	r18, 0xFF	; 255
    10fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1100:	81 f4       	brne	.+32     	; 0x1122 <nwkTxFrame+0x88>
    1102:	ef 01       	movw	r28, r30
  {
    header->macFcf = 0x8841;
    1104:	81 e4       	ldi	r24, 0x41	; 65
    1106:	98 e8       	ldi	r25, 0x88	; 136
    1108:	93 83       	std	Z+3, r25	; 0x03
    110a:	82 83       	std	Z+2, r24	; 0x02
    frame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    110c:	0e 94 62 10 	call	0x20c4	; 0x20c4 <rand>
    1110:	fe 01       	movw	r30, r28
    1112:	ec 57       	subi	r30, 0x7C	; 124
    1114:	ff 4f       	sbci	r31, 0xFF	; 255
    1116:	87 70       	andi	r24, 0x07	; 7
    1118:	99 27       	eor	r25, r25
    111a:	01 96       	adiw	r24, 0x01	; 1
    111c:	91 83       	std	Z+1, r25	; 0x01
    111e:	80 83       	st	Z, r24
    1120:	08 c0       	rjmp	.+16     	; 0x1132 <nwkTxFrame+0x98>
  }
  else
  {
    header->macFcf = 0x8861;
    1122:	81 e6       	ldi	r24, 0x61	; 97
    1124:	98 e8       	ldi	r25, 0x88	; 136
    1126:	93 83       	std	Z+3, r25	; 0x03
    1128:	82 83       	std	Z+2, r24	; 0x02
    frame->tx.timeout = 0;
    112a:	ec 57       	subi	r30, 0x7C	; 124
    112c:	ff 4f       	sbci	r31, 0xFF	; 255
    112e:	11 82       	std	Z+1, r1	; 0x01
    1130:	10 82       	st	Z, r1
  }
}
    1132:	df 91       	pop	r29
    1134:	cf 91       	pop	r28
    1136:	08 95       	ret

00001138 <nwkTxBroadcastFrame>:

/*************************************************************************//**
*****************************************************************************/
void nwkTxBroadcastFrame(NwkFrame_t *frame)
{
    1138:	0f 93       	push	r16
    113a:	1f 93       	push	r17
    113c:	cf 93       	push	r28
    113e:	df 93       	push	r29
    1140:	8c 01       	movw	r16, r24
  NwkFrame_t *newFrame;

  if (NULL == (newFrame = nwkFrameAlloc()))
    1142:	0e 94 bd 04 	call	0x97a	; 0x97a <nwkFrameAlloc>
    1146:	ec 01       	movw	r28, r24
    1148:	89 2b       	or	r24, r25
    114a:	b9 f1       	breq	.+110    	; 0x11ba <nwkTxBroadcastFrame+0x82>
    return;

  newFrame->state = NWK_TX_STATE_DELAY;
    114c:	82 e1       	ldi	r24, 0x12	; 18
    114e:	88 83       	st	Y, r24
  newFrame->size = frame->size;
    1150:	f8 01       	movw	r30, r16
    1152:	81 81       	ldd	r24, Z+1	; 0x01
    1154:	89 83       	std	Y+1, r24	; 0x01
  newFrame->tx.status = NWK_SUCCESS_STATUS;
    1156:	fe 01       	movw	r30, r28
    1158:	ed 57       	subi	r30, 0x7D	; 125
    115a:	ff 4f       	sbci	r31, 0xFF	; 255
    115c:	10 82       	st	Z, r1
  newFrame->tx.timeout = (rand() & NWK_TX_DELAY_JITTER_MASK) + 1;
    115e:	0e 94 62 10 	call	0x20c4	; 0x20c4 <rand>
    1162:	fe 01       	movw	r30, r28
    1164:	ec 57       	subi	r30, 0x7C	; 124
    1166:	ff 4f       	sbci	r31, 0xFF	; 255
    1168:	87 70       	andi	r24, 0x07	; 7
    116a:	99 27       	eor	r25, r25
    116c:	01 96       	adiw	r24, 0x01	; 1
    116e:	91 83       	std	Z+1, r25	; 0x01
    1170:	80 83       	st	Z, r24
  newFrame->tx.confirm = NULL;
    1172:	33 96       	adiw	r30, 0x03	; 3
    1174:	11 82       	std	Z+1, r1	; 0x01
    1176:	10 82       	st	Z, r1
  memcpy(newFrame->data, frame->data, frame->size);
    1178:	f8 01       	movw	r30, r16
    117a:	41 81       	ldd	r20, Z+1	; 0x01
    117c:	50 e0       	ldi	r21, 0x00	; 0
    117e:	b8 01       	movw	r22, r16
    1180:	6e 5f       	subi	r22, 0xFE	; 254
    1182:	7f 4f       	sbci	r23, 0xFF	; 255
    1184:	ce 01       	movw	r24, r28
    1186:	02 96       	adiw	r24, 0x02	; 2
    1188:	0e 94 55 11 	call	0x22aa	; 0x22aa <memcpy>

  newFrame->header.macFcf = 0x8841;
    118c:	81 e4       	ldi	r24, 0x41	; 65
    118e:	98 e8       	ldi	r25, 0x88	; 136
    1190:	9b 83       	std	Y+3, r25	; 0x03
    1192:	8a 83       	std	Y+2, r24	; 0x02
  newFrame->header.macDstAddr = NWK_BROADCAST_ADDR;
    1194:	8f ef       	ldi	r24, 0xFF	; 255
    1196:	9f ef       	ldi	r25, 0xFF	; 255
    1198:	98 87       	std	Y+8, r25	; 0x08
    119a:	8f 83       	std	Y+7, r24	; 0x07
  newFrame->header.macDstPanId = frame->header.macDstPanId;
    119c:	f8 01       	movw	r30, r16
    119e:	85 81       	ldd	r24, Z+5	; 0x05
    11a0:	96 81       	ldd	r25, Z+6	; 0x06
    11a2:	9e 83       	std	Y+6, r25	; 0x06
    11a4:	8d 83       	std	Y+5, r24	; 0x05
  newFrame->header.macSrcAddr = nwkIb.addr;
    11a6:	e0 e1       	ldi	r30, 0x10	; 16
    11a8:	f6 e0       	ldi	r31, 0x06	; 6
    11aa:	80 81       	ld	r24, Z
    11ac:	91 81       	ldd	r25, Z+1	; 0x01
    11ae:	9a 87       	std	Y+10, r25	; 0x0a
    11b0:	89 87       	std	Y+9, r24	; 0x09
  newFrame->header.macSeq = ++nwkIb.macSeqNum;
    11b2:	85 81       	ldd	r24, Z+5	; 0x05
    11b4:	8f 5f       	subi	r24, 0xFF	; 255
    11b6:	85 83       	std	Z+5, r24	; 0x05
    11b8:	8c 83       	std	Y+4, r24	; 0x04
}
    11ba:	df 91       	pop	r29
    11bc:	cf 91       	pop	r28
    11be:	1f 91       	pop	r17
    11c0:	0f 91       	pop	r16
    11c2:	08 95       	ret

000011c4 <nwkTxAckReceived>:

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    11c8:	fc 01       	movw	r30, r24
    11ca:	c7 81       	ldd	r28, Z+7	; 0x07
    11cc:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    11ce:	81 85       	ldd	r24, Z+9	; 0x09
    11d0:	83 30       	cpi	r24, 0x03	; 3
    11d2:	c9 f4       	brne	.+50     	; 0x1206 <nwkTxAckReceived+0x42>
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	90 e0       	ldi	r25, 0x00	; 0
    11d8:	10 c0       	rjmp	.+32     	; 0x11fa <nwkTxAckReceived+0x36>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
    11da:	fc 01       	movw	r30, r24
    11dc:	20 81       	ld	r18, Z
    11de:	26 31       	cpi	r18, 0x16	; 22
    11e0:	61 f4       	brne	.+24     	; 0x11fa <nwkTxAckReceived+0x36>
    11e2:	34 85       	ldd	r19, Z+12	; 0x0c
    11e4:	29 81       	ldd	r18, Y+1	; 0x01
    11e6:	32 13       	cpse	r19, r18
    11e8:	08 c0       	rjmp	.+16     	; 0x11fa <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    11ea:	27 e1       	ldi	r18, 0x17	; 23
    11ec:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    11ee:	2a 81       	ldd	r18, Y+2	; 0x02
    11f0:	ea 57       	subi	r30, 0x7A	; 122
    11f2:	ff 4f       	sbci	r31, 0xFF	; 255
    11f4:	20 83       	st	Z, r18
      return true;
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	07 c0       	rjmp	.+14     	; 0x1208 <nwkTxAckReceived+0x44>
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
    11fa:	0e 94 fe 04 	call	0x9fc	; 0x9fc <nwkFrameNext>
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	61 f7       	brne	.-40     	; 0x11da <nwkTxAckReceived+0x16>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
    1202:	80 e0       	ldi	r24, 0x00	; 0
    1204:	01 c0       	rjmp	.+2      	; 0x1208 <nwkTxAckReceived+0x44>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
    1206:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
    1208:	df 91       	pop	r29
    120a:	cf 91       	pop	r28
    120c:	08 95       	ret

0000120e <PHY_DataConf>:

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    120e:	e0 91 87 05 	lds	r30, 0x0587
    1212:	f0 91 88 05 	lds	r31, 0x0588

/*************************************************************************//**
*****************************************************************************/
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	21 f0       	breq	.+8      	; 0x1222 <PHY_DataConf+0x14>
    121a:	48 f0       	brcs	.+18     	; 0x122e <PHY_DataConf+0x20>
    121c:	82 30       	cpi	r24, 0x02	; 2
    121e:	19 f0       	breq	.+6      	; 0x1226 <PHY_DataConf+0x18>
    1220:	04 c0       	rjmp	.+8      	; 0x122a <PHY_DataConf+0x1c>
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;

    case PHY_STATUS_CHANNEL_ACCESS_FAILURE:
      return NWK_PHY_CHANNEL_ACCESS_FAILURE_STATUS;
    1222:	80 e2       	ldi	r24, 0x20	; 32
    1224:	05 c0       	rjmp	.+10     	; 0x1230 <PHY_DataConf+0x22>

    case PHY_STATUS_NO_ACK:
      return NWK_PHY_NO_ACK_STATUS;
    1226:	81 e2       	ldi	r24, 0x21	; 33
    1228:	03 c0       	rjmp	.+6      	; 0x1230 <PHY_DataConf+0x22>

    default:
      return NWK_ERROR_STATUS;
    122a:	81 e0       	ldi	r24, 0x01	; 1
    122c:	01 c0       	rjmp	.+2      	; 0x1230 <PHY_DataConf+0x22>
static uint8_t nwkTxConvertPhyStatus(uint8_t status)
{
  switch (status)
  {
    case PHY_STATUS_SUCCESS:
      return NWK_SUCCESS_STATUS;
    122e:	80 e0       	ldi	r24, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
void PHY_DataConf(uint8_t status)
{
  nwkTxPhyActiveFrame->tx.status = nwkTxConvertPhyStatus(status);
    1230:	df 01       	movw	r26, r30
    1232:	ad 57       	subi	r26, 0x7D	; 125
    1234:	bf 4f       	sbci	r27, 0xFF	; 255
    1236:	8c 93       	st	X, r24
  nwkTxPhyActiveFrame->state = NWK_TX_STATE_SENT;
    1238:	85 e1       	ldi	r24, 0x15	; 21
    123a:	80 83       	st	Z, r24
  nwkTxPhyActiveFrame = NULL;
    123c:	10 92 88 05 	sts	0x0588, r1
    1240:	10 92 87 05 	sts	0x0587, r1
  nwkIb.lock--;
    1244:	e0 e1       	ldi	r30, 0x10	; 16
    1246:	f6 e0       	ldi	r31, 0x06	; 6
    1248:	86 a1       	ldd	r24, Z+38	; 0x26
    124a:	97 a1       	ldd	r25, Z+39	; 0x27
    124c:	01 97       	sbiw	r24, 0x01	; 1
    124e:	97 a3       	std	Z+39, r25	; 0x27
    1250:	86 a3       	std	Z+38, r24	; 0x26
    1252:	08 95       	ret

00001254 <nwkTxTaskHandler>:

/*************************************************************************//**
  @brief Tx Module task handler
*****************************************************************************/
void nwkTxTaskHandler(void)
{
    1254:	9f 92       	push	r9
    1256:	af 92       	push	r10
    1258:	bf 92       	push	r11
    125a:	cf 92       	push	r12
    125c:	df 92       	push	r13
    125e:	ef 92       	push	r14
    1260:	ff 92       	push	r15
    1262:	0f 93       	push	r16
    1264:	1f 93       	push	r17
    1266:	cf 93       	push	r28
    1268:	df 93       	push	r29
  NwkFrame_t *frame = NULL;
    126a:	c0 e0       	ldi	r28, 0x00	; 0
    126c:	d0 e0       	ldi	r29, 0x00	; 0
      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
        {
          nwkTxPhyActiveFrame = frame;
          frame->state = NWK_TX_STATE_WAIT_CONF;
    126e:	0f 2e       	mov	r0, r31
    1270:	f4 e1       	ldi	r31, 0x14	; 20
    1272:	af 2e       	mov	r10, r31
    1274:	f0 2d       	mov	r31, r0
          PHY_DataReq(frame->data, frame->size);
          nwkIb.lock++;
    1276:	00 e1       	ldi	r16, 0x10	; 16
    1278:	16 e0       	ldi	r17, 0x06	; 6
            frame->state = NWK_TX_STATE_CONFIRM;
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    127a:	0f 2e       	mov	r0, r31
    127c:	f7 e1       	ldi	r31, 0x17	; 23
    127e:	df 2e       	mov	r13, r31
    1280:	f0 2d       	mov	r31, r0
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1282:	0f 2e       	mov	r0, r31
    1284:	f6 e1       	ldi	r31, 0x16	; 22
    1286:	9f 2e       	mov	r9, r31
    1288:	f0 2d       	mov	r31, r0
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    128a:	0f 2e       	mov	r0, r31
    128c:	f5 e1       	ldi	r31, 0x15	; 21
    128e:	ef 2e       	mov	r14, r31
    1290:	f1 2c       	mov	r15, r1
    1292:	f0 2d       	mov	r31, r0
          frame->state = NWK_TX_STATE_WAIT_DELAY;
          SYS_TimerStart(&nwkTxDelayTimer);
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    1294:	0f 2e       	mov	r0, r31
    1296:	f3 e1       	ldi	r31, 0x13	; 19
    1298:	cf 2e       	mov	r12, r31
    129a:	f0 2d       	mov	r31, r0

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    129c:	0f 2e       	mov	r0, r31
    129e:	f1 e1       	ldi	r31, 0x11	; 17
    12a0:	bf 2e       	mov	r11, r31
    12a2:	f0 2d       	mov	r31, r0
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    12a4:	62 c0       	rjmp	.+196    	; 0x136a <nwkTxTaskHandler+0x116>
  {
    switch (frame->state)
    12a6:	88 81       	ld	r24, Y
    12a8:	83 31       	cpi	r24, 0x13	; 19
    12aa:	c9 f0       	breq	.+50     	; 0x12de <nwkTxTaskHandler+0x8a>
    12ac:	18 f4       	brcc	.+6      	; 0x12b4 <nwkTxTaskHandler+0x60>
    12ae:	82 31       	cpi	r24, 0x12	; 18
    12b0:	39 f0       	breq	.+14     	; 0x12c0 <nwkTxTaskHandler+0x6c>
    12b2:	5b c0       	rjmp	.+182    	; 0x136a <nwkTxTaskHandler+0x116>
    12b4:	85 31       	cpi	r24, 0x15	; 21
    12b6:	59 f1       	breq	.+86     	; 0x130e <nwkTxTaskHandler+0xba>
    12b8:	87 31       	cpi	r24, 0x17	; 23
    12ba:	09 f4       	brne	.+2      	; 0x12be <nwkTxTaskHandler+0x6a>
    12bc:	48 c0       	rjmp	.+144    	; 0x134e <nwkTxTaskHandler+0xfa>
    12be:	55 c0       	rjmp	.+170    	; 0x136a <nwkTxTaskHandler+0x116>
      } break;
#endif

      case NWK_TX_STATE_DELAY:
      {
        if (frame->tx.timeout > 0)
    12c0:	fe 01       	movw	r30, r28
    12c2:	ec 57       	subi	r30, 0x7C	; 124
    12c4:	ff 4f       	sbci	r31, 0xFF	; 255
    12c6:	80 81       	ld	r24, Z
    12c8:	91 81       	ldd	r25, Z+1	; 0x01
    12ca:	89 2b       	or	r24, r25
    12cc:	31 f0       	breq	.+12     	; 0x12da <nwkTxTaskHandler+0x86>
        {
          frame->state = NWK_TX_STATE_WAIT_DELAY;
    12ce:	b8 82       	st	Y, r11
          SYS_TimerStart(&nwkTxDelayTimer);
    12d0:	8d e6       	ldi	r24, 0x6D	; 109
    12d2:	95 e0       	ldi	r25, 0x05	; 5
    12d4:	0e 94 c8 0b 	call	0x1790	; 0x1790 <SYS_TimerStart>
    12d8:	48 c0       	rjmp	.+144    	; 0x136a <nwkTxTaskHandler+0x116>
        }
        else
        {
          frame->state = NWK_TX_STATE_SEND;
    12da:	c8 82       	st	Y, r12
    12dc:	46 c0       	rjmp	.+140    	; 0x136a <nwkTxTaskHandler+0x116>
        }
      } break;

      case NWK_TX_STATE_SEND:
      {
        if (NULL == nwkTxPhyActiveFrame)
    12de:	80 91 87 05 	lds	r24, 0x0587
    12e2:	90 91 88 05 	lds	r25, 0x0588
    12e6:	89 2b       	or	r24, r25
    12e8:	09 f0       	breq	.+2      	; 0x12ec <nwkTxTaskHandler+0x98>
    12ea:	3f c0       	rjmp	.+126    	; 0x136a <nwkTxTaskHandler+0x116>
        {
          nwkTxPhyActiveFrame = frame;
    12ec:	d0 93 88 05 	sts	0x0588, r29
    12f0:	c0 93 87 05 	sts	0x0587, r28
          frame->state = NWK_TX_STATE_WAIT_CONF;
    12f4:	a8 82       	st	Y, r10
          PHY_DataReq(frame->data, frame->size);
    12f6:	69 81       	ldd	r22, Y+1	; 0x01
    12f8:	ce 01       	movw	r24, r28
    12fa:	02 96       	adiw	r24, 0x02	; 2
    12fc:	0e 94 4f 0a 	call	0x149e	; 0x149e <PHY_DataReq>
          nwkIb.lock++;
    1300:	f8 01       	movw	r30, r16
    1302:	86 a1       	ldd	r24, Z+38	; 0x26
    1304:	97 a1       	ldd	r25, Z+39	; 0x27
    1306:	01 96       	adiw	r24, 0x01	; 1
    1308:	97 a3       	std	Z+39, r25	; 0x27
    130a:	86 a3       	std	Z+38, r24	; 0x26
    130c:	2e c0       	rjmp	.+92     	; 0x136a <nwkTxTaskHandler+0x116>
      case NWK_TX_STATE_WAIT_CONF:
        break;

      case NWK_TX_STATE_SENT:
      {
        if (NWK_SUCCESS_STATUS == frame->tx.status)
    130e:	fe 01       	movw	r30, r28
    1310:	ed 57       	subi	r30, 0x7D	; 125
    1312:	ff 4f       	sbci	r31, 0xFF	; 255
    1314:	80 81       	ld	r24, Z
    1316:	81 11       	cpse	r24, r1
    1318:	18 c0       	rjmp	.+48     	; 0x134a <nwkTxTaskHandler+0xf6>
        {
          if (frame->header.nwkSrcAddr == nwkIb.addr && frame->header.nwkFcf.ackRequest)
    131a:	2d 85       	ldd	r18, Y+13	; 0x0d
    131c:	3e 85       	ldd	r19, Y+14	; 0x0e
    131e:	f8 01       	movw	r30, r16
    1320:	80 81       	ld	r24, Z
    1322:	91 81       	ldd	r25, Z+1	; 0x01
    1324:	28 17       	cp	r18, r24
    1326:	39 07       	cpc	r19, r25
    1328:	71 f4       	brne	.+28     	; 0x1346 <nwkTxTaskHandler+0xf2>
    132a:	8b 85       	ldd	r24, Y+11	; 0x0b
    132c:	80 ff       	sbrs	r24, 0
    132e:	0b c0       	rjmp	.+22     	; 0x1346 <nwkTxTaskHandler+0xf2>
          {
            frame->state = NWK_TX_STATE_WAIT_ACK;
    1330:	98 82       	st	Y, r9
            frame->tx.timeout = NWK_ACK_WAIT_TIME / NWK_TX_ACK_WAIT_TIMER_INTERVAL + 1;
    1332:	fe 01       	movw	r30, r28
    1334:	ec 57       	subi	r30, 0x7C	; 124
    1336:	ff 4f       	sbci	r31, 0xFF	; 255
    1338:	f1 82       	std	Z+1, r15	; 0x01
    133a:	e0 82       	st	Z, r14
            SYS_TimerStart(&nwkTxAckWaitTimer);
    133c:	8a e7       	ldi	r24, 0x7A	; 122
    133e:	95 e0       	ldi	r25, 0x05	; 5
    1340:	0e 94 c8 0b 	call	0x1790	; 0x1790 <SYS_TimerStart>
    1344:	12 c0       	rjmp	.+36     	; 0x136a <nwkTxTaskHandler+0x116>
          }
          else
          {
            frame->state = NWK_TX_STATE_CONFIRM;
    1346:	d8 82       	st	Y, r13
    1348:	10 c0       	rjmp	.+32     	; 0x136a <nwkTxTaskHandler+0x116>
          }
        }
        else
        {
          frame->state = NWK_TX_STATE_CONFIRM;
    134a:	d8 82       	st	Y, r13
    134c:	0e c0       	rjmp	.+28     	; 0x136a <nwkTxTaskHandler+0x116>
      case NWK_TX_STATE_CONFIRM:
      {
#ifdef NWK_ENABLE_ROUTING
        nwkRouteFrameSent(frame);
#endif
        if (NULL == frame->tx.confirm)
    134e:	fe 01       	movw	r30, r28
    1350:	e9 57       	subi	r30, 0x79	; 121
    1352:	ff 4f       	sbci	r31, 0xFF	; 255
    1354:	01 90       	ld	r0, Z+
    1356:	f0 81       	ld	r31, Z
    1358:	e0 2d       	mov	r30, r0
    135a:	30 97       	sbiw	r30, 0x00	; 0
    135c:	21 f4       	brne	.+8      	; 0x1366 <nwkTxTaskHandler+0x112>
          nwkFrameFree(frame);
    135e:	ce 01       	movw	r24, r28
    1360:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <nwkFrameFree>
    1364:	02 c0       	rjmp	.+4      	; 0x136a <nwkTxTaskHandler+0x116>
        else
          frame->tx.confirm(frame);
    1366:	ce 01       	movw	r24, r28
    1368:	09 95       	icall
*****************************************************************************/
void nwkTxTaskHandler(void)
{
  NwkFrame_t *frame = NULL;

  while (NULL != (frame = nwkFrameNext(frame)))
    136a:	ce 01       	movw	r24, r28
    136c:	0e 94 fe 04 	call	0x9fc	; 0x9fc <nwkFrameNext>
    1370:	ec 01       	movw	r28, r24
    1372:	89 2b       	or	r24, r25
    1374:	09 f0       	breq	.+2      	; 0x1378 <nwkTxTaskHandler+0x124>
    1376:	97 cf       	rjmp	.-210    	; 0x12a6 <nwkTxTaskHandler+0x52>

      default:
        break;
    };
  }
}
    1378:	df 91       	pop	r29
    137a:	cf 91       	pop	r28
    137c:	1f 91       	pop	r17
    137e:	0f 91       	pop	r16
    1380:	ff 90       	pop	r15
    1382:	ef 90       	pop	r14
    1384:	df 90       	pop	r13
    1386:	cf 90       	pop	r12
    1388:	bf 90       	pop	r11
    138a:	af 90       	pop	r10
    138c:	9f 90       	pop	r9
    138e:	08 95       	ret

00001390 <phySetChannel>:

/*************************************************************************//**
*****************************************************************************/
static void phySetChannel(void)
{
  CC_CTRL_1_REG_s.ccBand = phyBand;
    1390:	80 91 89 05 	lds	r24, 0x0589
    1394:	98 2f       	mov	r25, r24
    1396:	9f 70       	andi	r25, 0x0F	; 15
    1398:	e4 e5       	ldi	r30, 0x54	; 84
    139a:	f1 e0       	ldi	r31, 0x01	; 1
    139c:	80 81       	ld	r24, Z
    139e:	80 7f       	andi	r24, 0xF0	; 240
    13a0:	89 2b       	or	r24, r25
    13a2:	80 83       	st	Z, r24

  if (phyBand)
    13a4:	80 91 89 05 	lds	r24, 0x0589
    13a8:	88 23       	and	r24, r24
    13aa:	29 f0       	breq	.+10     	; 0x13b6 <phySetChannel+0x26>
    CC_CTRL_0_REG = phyChannel;
    13ac:	80 91 8a 05 	lds	r24, 0x058A
    13b0:	80 93 53 01 	sts	0x0153, r24
    13b4:	08 95       	ret
  else
    PHY_CC_CCA_REG_s.channel = phyChannel;
    13b6:	80 91 8a 05 	lds	r24, 0x058A
    13ba:	98 2f       	mov	r25, r24
    13bc:	9f 71       	andi	r25, 0x1F	; 31
    13be:	e8 e4       	ldi	r30, 0x48	; 72
    13c0:	f1 e0       	ldi	r31, 0x01	; 1
    13c2:	80 81       	ld	r24, Z
    13c4:	80 7e       	andi	r24, 0xE0	; 224
    13c6:	89 2b       	or	r24, r25
    13c8:	80 83       	st	Z, r24
    13ca:	08 95       	ret

000013cc <phyTrxSetState>:

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
  TRX_STATE_REG = TRX_CMD_FORCE_TRX_OFF;
    13cc:	93 e0       	ldi	r25, 0x03	; 3
    13ce:	90 93 42 01 	sts	0x0142, r25
  while (TRX_STATUS_TRX_OFF != TRX_STATUS_REG_s.trxStatus);
    13d2:	e1 e4       	ldi	r30, 0x41	; 65
    13d4:	f1 e0       	ldi	r31, 0x01	; 1
    13d6:	90 81       	ld	r25, Z
    13d8:	9f 71       	andi	r25, 0x1F	; 31
    13da:	98 30       	cpi	r25, 0x08	; 8
    13dc:	e1 f7       	brne	.-8      	; 0x13d6 <phyTrxSetState+0xa>

  TRX_STATE_REG = state;
    13de:	80 93 42 01 	sts	0x0142, r24
  while (state != TRX_STATUS_REG_s.trxStatus);
    13e2:	e1 e4       	ldi	r30, 0x41	; 65
    13e4:	f1 e0       	ldi	r31, 0x01	; 1
    13e6:	90 81       	ld	r25, Z
    13e8:	9f 71       	andi	r25, 0x1F	; 31
    13ea:	98 13       	cpse	r25, r24
    13ec:	fc cf       	rjmp	.-8      	; 0x13e6 <phyTrxSetState+0x1a>
}
    13ee:	08 95       	ret

000013f0 <phySetRxState>:

/*************************************************************************//**
*****************************************************************************/
static void phySetRxState(void)
{
  phyTrxSetState(TRX_CMD_TRX_OFF);
    13f0:	88 e0       	ldi	r24, 0x08	; 8
    13f2:	0e 94 e6 09 	call	0x13cc	; 0x13cc <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    13f6:	8f ef       	ldi	r24, 0xFF	; 255
    13f8:	80 93 4f 01 	sts	0x014F, r24

  if (phyRxState)
    13fc:	80 91 8b 05 	lds	r24, 0x058B
    1400:	88 23       	and	r24, r24
    1402:	19 f0       	breq	.+6      	; 0x140a <phySetRxState+0x1a>
    phyTrxSetState(TRX_CMD_RX_AACK_ON);
    1404:	86 e1       	ldi	r24, 0x16	; 22
    1406:	0e 94 e6 09 	call	0x13cc	; 0x13cc <phyTrxSetState>
    140a:	08 95       	ret

0000140c <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
    140c:	e9 e3       	ldi	r30, 0x39	; 57
    140e:	f1 e0       	ldi	r31, 0x01	; 1
    1410:	80 81       	ld	r24, Z
    1412:	81 60       	ori	r24, 0x01	; 1
    1414:	80 83       	st	Z, r24

  phyRxState = false;
    1416:	10 92 8b 05 	sts	0x058B, r1
  phyBand = 0;
    141a:	10 92 89 05 	sts	0x0589, r1
  phyState = PHY_STATE_IDLE;
    141e:	81 e0       	ldi	r24, 0x01	; 1
    1420:	80 93 0c 06 	sts	0x060C, r24

  phyTrxSetState(TRX_CMD_TRX_OFF);
    1424:	88 e0       	ldi	r24, 0x08	; 8
    1426:	0e 94 e6 09 	call	0x13cc	; 0x13cc <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
    142a:	8b ee       	ldi	r24, 0xEB	; 235
    142c:	80 93 56 01 	sts	0x0156, r24

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
    1430:	ec e4       	ldi	r30, 0x4C	; 76
    1432:	f1 e0       	ldi	r31, 0x01	; 1
    1434:	80 81       	ld	r24, Z
    1436:	80 68       	ori	r24, 0x80	; 128
    1438:	80 83       	st	Z, r24
    143a:	08 95       	ret

0000143c <PHY_SetRxState>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetRxState(bool rx)
{
  phyRxState = rx;
    143c:	80 93 8b 05 	sts	0x058B, r24
  phySetRxState();
    1440:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <phySetRxState>
    1444:	08 95       	ret

00001446 <PHY_SetChannel>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetChannel(uint8_t channel)
{
  phyChannel = channel;
    1446:	80 93 8a 05 	sts	0x058A, r24
  phySetChannel();
    144a:	0e 94 c8 09 	call	0x1390	; 0x1390 <phySetChannel>
    144e:	08 95       	ret

00001450 <PHY_SetPanId>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_SetPanId(uint16_t panId)
{
    1450:	cf 93       	push	r28
    1452:	df 93       	push	r29
    1454:	00 d0       	rcall	.+0      	; 0x1456 <PHY_SetPanId+0x6>
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	9a 83       	std	Y+2, r25	; 0x02
    145c:	89 83       	std	Y+1, r24	; 0x01
  uint8_t *d = (uint8_t *)&panId;

  PAN_ID_0_REG = d[0];
    145e:	80 93 62 01 	sts	0x0162, r24
  PAN_ID_1_REG = d[1];
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	80 93 63 01 	sts	0x0163, r24
}
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	df 91       	pop	r29
    146e:	cf 91       	pop	r28
    1470:	08 95       	ret

00001472 <PHY_SetShortAddr>:

/*************************************************************************//**
*****************************************************************************/
void PHY_SetShortAddr(uint16_t addr)
{
    1472:	cf 93       	push	r28
    1474:	df 93       	push	r29
    1476:	00 d0       	rcall	.+0      	; 0x1478 <PHY_SetShortAddr+0x6>
    1478:	cd b7       	in	r28, 0x3d	; 61
    147a:	de b7       	in	r29, 0x3e	; 62
    147c:	9a 83       	std	Y+2, r25	; 0x02
    147e:	89 83       	std	Y+1, r24	; 0x01
  uint8_t *d = (uint8_t *)&addr;

  SHORT_ADDR_0_REG = d[0];
    1480:	80 93 60 01 	sts	0x0160, r24
  SHORT_ADDR_1_REG = d[1];
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	80 93 61 01 	sts	0x0161, r24

#ifndef PHY_ENABLE_RANDOM_NUMBER_GENERATOR
  CSMA_SEED_0_REG = d[0] + d[1];
    148a:	9a 81       	ldd	r25, Y+2	; 0x02
    148c:	89 81       	ldd	r24, Y+1	; 0x01
    148e:	89 0f       	add	r24, r25
    1490:	80 93 6d 01 	sts	0x016D, r24
#endif
}
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	df 91       	pop	r29
    149a:	cf 91       	pop	r28
    149c:	08 95       	ret

0000149e <PHY_DataReq>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_DataReq(uint8_t *data, uint8_t size)
{
    149e:	0f 93       	push	r16
    14a0:	1f 93       	push	r17
    14a2:	cf 93       	push	r28
    14a4:	8c 01       	movw	r16, r24
    14a6:	c6 2f       	mov	r28, r22
  phyTrxSetState(TRX_CMD_TX_ARET_ON);
    14a8:	89 e1       	ldi	r24, 0x19	; 25
    14aa:	0e 94 e6 09 	call	0x13cc	; 0x13cc <phyTrxSetState>

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;
    14ae:	8f ef       	ldi	r24, 0xFF	; 255
    14b0:	80 93 4f 01 	sts	0x014F, r24

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
    14b4:	82 e0       	ldi	r24, 0x02	; 2
    14b6:	8c 0f       	add	r24, r28
    14b8:	80 93 80 01 	sts	0x0180, r24
  for (uint8_t i = 0; i < size; i++)
    14bc:	cc 23       	and	r28, r28
    14be:	81 f0       	breq	.+32     	; 0x14e0 <PHY_DataReq+0x42>
    14c0:	f8 01       	movw	r30, r16
    14c2:	c1 50       	subi	r28, 0x01	; 1
    14c4:	2c 2f       	mov	r18, r28
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	2f 5f       	subi	r18, 0xFF	; 255
    14ca:	3f 4f       	sbci	r19, 0xFF	; 255
    14cc:	c8 01       	movw	r24, r16
    14ce:	82 0f       	add	r24, r18
    14d0:	93 1f       	adc	r25, r19
    14d2:	a1 e8       	ldi	r26, 0x81	; 129
    14d4:	b1 e0       	ldi	r27, 0x01	; 1
    TRX_FRAME_BUFFER(i+1) = data[i];
    14d6:	21 91       	ld	r18, Z+
    14d8:	2d 93       	st	X+, r18
  phyTrxSetState(TRX_CMD_TX_ARET_ON);

  IRQ_STATUS_REG = IRQ_CLEAR_VALUE;

  TRX_FRAME_BUFFER(0) = size + PHY_CRC_SIZE;
  for (uint8_t i = 0; i < size; i++)
    14da:	e8 17       	cp	r30, r24
    14dc:	f9 07       	cpc	r31, r25
    14de:	d9 f7       	brne	.-10     	; 0x14d6 <PHY_DataReq+0x38>
    TRX_FRAME_BUFFER(i+1) = data[i];

  phyState = PHY_STATE_TX_WAIT_END;
    14e0:	83 e0       	ldi	r24, 0x03	; 3
    14e2:	80 93 0c 06 	sts	0x060C, r24
  TRX_STATE_REG = TRX_CMD_TX_START;
    14e6:	82 e0       	ldi	r24, 0x02	; 2
    14e8:	80 93 42 01 	sts	0x0142, r24
}
    14ec:	cf 91       	pop	r28
    14ee:	1f 91       	pop	r17
    14f0:	0f 91       	pop	r16
    14f2:	08 95       	ret

000014f4 <PHY_TaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void PHY_TaskHandler(void)
{
    14f4:	1f 93       	push	r17
    14f6:	cf 93       	push	r28
    14f8:	df 93       	push	r29
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <PHY_TaskHandler+0x8>
    14fc:	00 d0       	rcall	.+0      	; 0x14fe <PHY_TaskHandler+0xa>
    14fe:	1f 92       	push	r1
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
  if (PHY_STATE_SLEEP == phyState)
    1504:	80 91 0c 06 	lds	r24, 0x060C
    1508:	82 30       	cpi	r24, 0x02	; 2
    150a:	09 f4       	brne	.+2      	; 0x150e <PHY_TaskHandler+0x1a>
    150c:	68 c0       	rjmp	.+208    	; 0x15de <PHY_TaskHandler+0xea>
    return;

  if (IRQ_STATUS_REG_s.rxEnd)
    150e:	80 91 4f 01 	lds	r24, 0x014F
    1512:	83 ff       	sbrs	r24, 3
    1514:	3f c0       	rjmp	.+126    	; 0x1594 <PHY_TaskHandler+0xa0>
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;
    1516:	a0 91 7b 01 	lds	r26, 0x017B

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    151a:	6a 2f       	mov	r22, r26
    151c:	70 e0       	ldi	r23, 0x00	; 0
    151e:	ab 01       	movw	r20, r22
    1520:	4f 5f       	subi	r20, 0xFF	; 255
    1522:	5f 4f       	sbci	r21, 0xFF	; 255
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	20 e0       	ldi	r18, 0x00	; 0
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);
    152a:	fc 01       	movw	r30, r24
    152c:	e0 58       	subi	r30, 0x80	; 128
    152e:	fe 4f       	sbci	r31, 0xFE	; 254
    1530:	30 81       	ld	r19, Z
    1532:	fc 01       	movw	r30, r24
    1534:	e4 57       	subi	r30, 0x74	; 116
    1536:	fa 4f       	sbci	r31, 0xFA	; 250
    1538:	30 83       	st	Z, r19
  if (IRQ_STATUS_REG_s.rxEnd)
  {
    PHY_DataInd_t ind;
    uint8_t size = TST_RX_LENGTH_REG;

    for (uint8_t i = 0; i < size + 1/*lqi*/; i++)
    153a:	2f 5f       	subi	r18, 0xFF	; 255
    153c:	82 2f       	mov	r24, r18
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	84 17       	cp	r24, r20
    1542:	95 07       	cpc	r25, r21
    1544:	94 f3       	brlt	.-28     	; 0x152a <PHY_TaskHandler+0x36>
      phyRxBuffer[i] = TRX_FRAME_BUFFER(i);

    ind.data = phyRxBuffer;
    1546:	8c e8       	ldi	r24, 0x8C	; 140
    1548:	95 e0       	ldi	r25, 0x05	; 5
    154a:	9a 83       	std	Y+2, r25	; 0x02
    154c:	89 83       	std	Y+1, r24	; 0x01
    ind.size = size - PHY_CRC_SIZE;
    154e:	a2 50       	subi	r26, 0x02	; 2
    1550:	ab 83       	std	Y+3, r26	; 0x03
    ind.lqi  = phyRxBuffer[size];
    1552:	fb 01       	movw	r30, r22
    1554:	e4 57       	subi	r30, 0x74	; 116
    1556:	fa 4f       	sbci	r31, 0xFA	; 250
    1558:	80 81       	ld	r24, Z
    155a:	8c 83       	std	Y+4, r24	; 0x04
    ind.rssi = (int8_t)PHY_ED_LEVEL_REG + PHY_RSSI_BASE_VAL;
    155c:	80 91 47 01 	lds	r24, 0x0147
    1560:	8a 55       	subi	r24, 0x5A	; 90
    1562:	8d 83       	std	Y+5, r24	; 0x05
    PHY_DataInd(&ind);
    1564:	ce 01       	movw	r24, r28
    1566:	01 96       	adiw	r24, 0x01	; 1
    1568:	0e 94 7d 05 	call	0xafa	; 0xafa <PHY_DataInd>

    while (TRX_STATUS_RX_AACK_ON != TRX_STATUS_REG_s.trxStatus);
    156c:	e1 e4       	ldi	r30, 0x41	; 65
    156e:	f1 e0       	ldi	r31, 0x01	; 1
    1570:	80 81       	ld	r24, Z
    1572:	8f 71       	andi	r24, 0x1F	; 31
    1574:	86 31       	cpi	r24, 0x16	; 22
    1576:	e1 f7       	brne	.-8      	; 0x1570 <PHY_TaskHandler+0x7c>

    IRQ_STATUS_REG_s.rxEnd = 1;
    1578:	ef e4       	ldi	r30, 0x4F	; 79
    157a:	f1 e0       	ldi	r31, 0x01	; 1
    157c:	80 81       	ld	r24, Z
    157e:	88 60       	ori	r24, 0x08	; 8
    1580:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 0;
    1582:	ec e4       	ldi	r30, 0x4C	; 76
    1584:	f1 e0       	ldi	r31, 0x01	; 1
    1586:	80 81       	ld	r24, Z
    1588:	8f 77       	andi	r24, 0x7F	; 127
    158a:	80 83       	st	Z, r24
    TRX_CTRL_2_REG_s.rxSafeMode = 1;
    158c:	80 81       	ld	r24, Z
    158e:	80 68       	ori	r24, 0x80	; 128
    1590:	80 83       	st	Z, r24
    1592:	25 c0       	rjmp	.+74     	; 0x15de <PHY_TaskHandler+0xea>
  }

  else if (IRQ_STATUS_REG_s.txEnd)
    1594:	80 91 4f 01 	lds	r24, 0x014F
    1598:	86 ff       	sbrs	r24, 6
    159a:	21 c0       	rjmp	.+66     	; 0x15de <PHY_TaskHandler+0xea>
  {
    if (TRX_STATUS_TX_ARET_ON == TRX_STATUS_REG_s.trxStatus)
    159c:	80 91 41 01 	lds	r24, 0x0141
    15a0:	8f 71       	andi	r24, 0x1F	; 31
    15a2:	89 31       	cpi	r24, 0x19	; 25
    15a4:	b9 f4       	brne	.+46     	; 0x15d4 <PHY_TaskHandler+0xe0>
    {
      uint8_t status = TRX_STATE_REG_s.tracStatus;
    15a6:	10 91 42 01 	lds	r17, 0x0142
    15aa:	12 95       	swap	r17
    15ac:	16 95       	lsr	r17
    15ae:	17 70       	andi	r17, 0x07	; 7

      if (TRAC_STATUS_SUCCESS == status)
    15b0:	49 f0       	breq	.+18     	; 0x15c4 <PHY_TaskHandler+0xd0>
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
    15b2:	13 30       	cpi	r17, 0x03	; 3
    15b4:	21 f0       	breq	.+8      	; 0x15be <PHY_TaskHandler+0xca>
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
      else if (TRAC_STATUS_NO_ACK == status)
    15b6:	15 30       	cpi	r17, 0x05	; 5
    15b8:	21 f0       	breq	.+8      	; 0x15c2 <PHY_TaskHandler+0xce>
        status = PHY_STATUS_NO_ACK;
      else
        status = PHY_STATUS_ERROR;
    15ba:	13 e0       	ldi	r17, 0x03	; 3
    15bc:	03 c0       	rjmp	.+6      	; 0x15c4 <PHY_TaskHandler+0xd0>
      uint8_t status = TRX_STATE_REG_s.tracStatus;

      if (TRAC_STATUS_SUCCESS == status)
        status = PHY_STATUS_SUCCESS;
      else if (TRAC_STATUS_CHANNEL_ACCESS_FAILURE == status)
        status = PHY_STATUS_CHANNEL_ACCESS_FAILURE;
    15be:	11 e0       	ldi	r17, 0x01	; 1
    15c0:	01 c0       	rjmp	.+2      	; 0x15c4 <PHY_TaskHandler+0xd0>
      else if (TRAC_STATUS_NO_ACK == status)
        status = PHY_STATUS_NO_ACK;
    15c2:	12 e0       	ldi	r17, 0x02	; 2
      else
        status = PHY_STATUS_ERROR;

      phySetRxState();
    15c4:	0e 94 f8 09 	call	0x13f0	; 0x13f0 <phySetRxState>
      phyState = PHY_STATE_IDLE;
    15c8:	81 e0       	ldi	r24, 0x01	; 1
    15ca:	80 93 0c 06 	sts	0x060C, r24

      PHY_DataConf(status);
    15ce:	81 2f       	mov	r24, r17
    15d0:	0e 94 07 09 	call	0x120e	; 0x120e <PHY_DataConf>
    }

    IRQ_STATUS_REG_s.txEnd = 1;
    15d4:	ef e4       	ldi	r30, 0x4F	; 79
    15d6:	f1 e0       	ldi	r31, 0x01	; 1
    15d8:	80 81       	ld	r24, Z
    15da:	80 64       	ori	r24, 0x40	; 64
    15dc:	80 83       	st	Z, r24
  }
}
    15de:	0f 90       	pop	r0
    15e0:	0f 90       	pop	r0
    15e2:	0f 90       	pop	r0
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	df 91       	pop	r29
    15ea:	cf 91       	pop	r28
    15ec:	1f 91       	pop	r17
    15ee:	08 95       	ret

000015f0 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    15f0:	0e 94 69 02 	call	0x4d2	; 0x4d2 <HAL_Init>
  SYS_TimerInit();
    15f4:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <SYS_TimerInit>
  PHY_Init();
    15f8:	0e 94 06 0a 	call	0x140c	; 0x140c <PHY_Init>
  NWK_Init();
    15fc:	0e 94 88 03 	call	0x710	; 0x710 <NWK_Init>
    1600:	08 95       	ret

00001602 <SYS_TaskHandler>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TaskHandler(void)
{
  PHY_TaskHandler();
    1602:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <PHY_TaskHandler>
  NWK_TaskHandler();
    1606:	0e 94 b9 03 	call	0x772	; 0x772 <NWK_TaskHandler>
  SYS_TimerTaskHandler();
    160a:	0e 94 d5 0b 	call	0x17aa	; 0x17aa <SYS_TimerTaskHandler>
    160e:	08 95       	ret

00001610 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    1610:	0f 93       	push	r16
    1612:	1f 93       	push	r17
    1614:	cf 93       	push	r28
    1616:	df 93       	push	r29
    1618:	ec 01       	movw	r28, r24
  if (timers)
    161a:	80 91 0d 06 	lds	r24, 0x060D
    161e:	90 91 0e 06 	lds	r25, 0x060E
    1622:	00 97       	sbiw	r24, 0x00	; 0
    1624:	09 f4       	brne	.+2      	; 0x1628 <placeTimer+0x18>
    1626:	45 c0       	rjmp	.+138    	; 0x16b2 <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    1628:	4e 81       	ldd	r20, Y+6	; 0x06
    162a:	5f 81       	ldd	r21, Y+7	; 0x07
    162c:	68 85       	ldd	r22, Y+8	; 0x08
    162e:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    1630:	fc 01       	movw	r30, r24
    1632:	02 81       	ldd	r16, Z+2	; 0x02
    1634:	13 81       	ldd	r17, Z+3	; 0x03
    1636:	24 81       	ldd	r18, Z+4	; 0x04
    1638:	35 81       	ldd	r19, Z+5	; 0x05
    163a:	40 17       	cp	r20, r16
    163c:	51 07       	cpc	r21, r17
    163e:	62 07       	cpc	r22, r18
    1640:	73 07       	cpc	r23, r19
    1642:	60 f0       	brcs	.+24     	; 0x165c <placeTimer+0x4c>
    1644:	dc 01       	movw	r26, r24
    1646:	17 c0       	rjmp	.+46     	; 0x1676 <placeTimer+0x66>
    1648:	02 81       	ldd	r16, Z+2	; 0x02
    164a:	13 81       	ldd	r17, Z+3	; 0x03
    164c:	24 81       	ldd	r18, Z+4	; 0x04
    164e:	35 81       	ldd	r19, Z+5	; 0x05
    1650:	40 17       	cp	r20, r16
    1652:	51 07       	cpc	r21, r17
    1654:	62 07       	cpc	r22, r18
    1656:	73 07       	cpc	r23, r19
    1658:	68 f4       	brcc	.+26     	; 0x1674 <placeTimer+0x64>
    165a:	03 c0       	rjmp	.+6      	; 0x1662 <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    165c:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    165e:	a0 e0       	ldi	r26, 0x00	; 0
    1660:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    1662:	04 1b       	sub	r16, r20
    1664:	15 0b       	sbc	r17, r21
    1666:	26 0b       	sbc	r18, r22
    1668:	37 0b       	sbc	r19, r23
    166a:	02 83       	std	Z+2, r16	; 0x02
    166c:	13 83       	std	Z+3, r17	; 0x03
    166e:	24 83       	std	Z+4, r18	; 0x04
    1670:	35 83       	std	Z+5, r19	; 0x05
         break;
    1672:	0a c0       	rjmp	.+20     	; 0x1688 <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1674:	df 01       	movw	r26, r30
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    1676:	40 1b       	sub	r20, r16
    1678:	51 0b       	sbc	r21, r17
    167a:	62 0b       	sbc	r22, r18
    167c:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    167e:	ed 91       	ld	r30, X+
    1680:	fc 91       	ld	r31, X
    1682:	11 97       	sbiw	r26, 0x01	; 1
    1684:	30 97       	sbiw	r30, 0x00	; 0
    1686:	01 f7       	brne	.-64     	; 0x1648 <placeTimer+0x38>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    1688:	4a 83       	std	Y+2, r20	; 0x02
    168a:	5b 83       	std	Y+3, r21	; 0x03
    168c:	6c 83       	std	Y+4, r22	; 0x04
    168e:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    1690:	10 97       	sbiw	r26, 0x00	; 0
    1692:	41 f0       	breq	.+16     	; 0x16a4 <placeTimer+0x94>
    {
      timer->next = prev->next;
    1694:	8d 91       	ld	r24, X+
    1696:	9c 91       	ld	r25, X
    1698:	11 97       	sbiw	r26, 0x01	; 1
    169a:	99 83       	std	Y+1, r25	; 0x01
    169c:	88 83       	st	Y, r24
      prev->next = timer;
    169e:	cd 93       	st	X+, r28
    16a0:	dc 93       	st	X, r29
    16a2:	15 c0       	rjmp	.+42     	; 0x16ce <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    16a4:	99 83       	std	Y+1, r25	; 0x01
    16a6:	88 83       	st	Y, r24
      timers = timer;
    16a8:	d0 93 0e 06 	sts	0x060E, r29
    16ac:	c0 93 0d 06 	sts	0x060D, r28
    16b0:	0e c0       	rjmp	.+28     	; 0x16ce <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    16b2:	19 82       	std	Y+1, r1	; 0x01
    16b4:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    16b6:	8e 81       	ldd	r24, Y+6	; 0x06
    16b8:	9f 81       	ldd	r25, Y+7	; 0x07
    16ba:	a8 85       	ldd	r26, Y+8	; 0x08
    16bc:	b9 85       	ldd	r27, Y+9	; 0x09
    16be:	8a 83       	std	Y+2, r24	; 0x02
    16c0:	9b 83       	std	Y+3, r25	; 0x03
    16c2:	ac 83       	std	Y+4, r26	; 0x04
    16c4:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    16c6:	d0 93 0e 06 	sts	0x060E, r29
    16ca:	c0 93 0d 06 	sts	0x060D, r28
  }
}
    16ce:	df 91       	pop	r29
    16d0:	cf 91       	pop	r28
    16d2:	1f 91       	pop	r17
    16d4:	0f 91       	pop	r16
    16d6:	08 95       	ret

000016d8 <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    16d8:	10 92 0e 06 	sts	0x060E, r1
    16dc:	10 92 0d 06 	sts	0x060D, r1
    16e0:	08 95       	ret

000016e2 <SYS_TimerStop>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
    16e2:	cf 93       	push	r28
    16e4:	df 93       	push	r29
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    16e6:	a0 91 0d 06 	lds	r26, 0x060D
    16ea:	b0 91 0e 06 	lds	r27, 0x060E
    16ee:	10 97       	sbiw	r26, 0x00	; 0
    16f0:	91 f1       	breq	.+100    	; 0x1756 <SYS_TimerStop+0x74>
  {
    if (t == timer)
    16f2:	a8 17       	cp	r26, r24
    16f4:	b9 07       	cpc	r27, r25
    16f6:	51 f5       	brne	.+84     	; 0x174c <SYS_TimerStop+0x6a>
    16f8:	0a c0       	rjmp	.+20     	; 0x170e <SYS_TimerStop+0x2c>
    16fa:	8e 17       	cp	r24, r30
    16fc:	9f 07       	cpc	r25, r31
    16fe:	29 f5       	brne	.+74     	; 0x174a <SYS_TimerStop+0x68>
    {
      if (prev)
    1700:	10 97       	sbiw	r26, 0x00	; 0
    1702:	31 f0       	breq	.+12     	; 0x1710 <SYS_TimerStop+0x2e>
        prev->next = t->next;
    1704:	20 81       	ld	r18, Z
    1706:	31 81       	ldd	r19, Z+1	; 0x01
    1708:	2d 93       	st	X+, r18
    170a:	3c 93       	st	X, r19
    170c:	07 c0       	rjmp	.+14     	; 0x171c <SYS_TimerStop+0x3a>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    170e:	fc 01       	movw	r30, r24
    if (t == timer)
    {
      if (prev)
        prev->next = t->next;
      else
        timers = t->next;
    1710:	20 81       	ld	r18, Z
    1712:	31 81       	ldd	r19, Z+1	; 0x01
    1714:	30 93 0e 06 	sts	0x060E, r19
    1718:	20 93 0d 06 	sts	0x060D, r18

      if (t->next)
    171c:	01 90       	ld	r0, Z+
    171e:	f0 81       	ld	r31, Z
    1720:	e0 2d       	mov	r30, r0
    1722:	30 97       	sbiw	r30, 0x00	; 0
    1724:	c1 f0       	breq	.+48     	; 0x1756 <SYS_TimerStop+0x74>
        t->next->timeout += timer->timeout;
    1726:	42 81       	ldd	r20, Z+2	; 0x02
    1728:	53 81       	ldd	r21, Z+3	; 0x03
    172a:	64 81       	ldd	r22, Z+4	; 0x04
    172c:	75 81       	ldd	r23, Z+5	; 0x05
    172e:	ec 01       	movw	r28, r24
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	9b 81       	ldd	r25, Y+3	; 0x03
    1734:	ac 81       	ldd	r26, Y+4	; 0x04
    1736:	bd 81       	ldd	r27, Y+5	; 0x05
    1738:	84 0f       	add	r24, r20
    173a:	95 1f       	adc	r25, r21
    173c:	a6 1f       	adc	r26, r22
    173e:	b7 1f       	adc	r27, r23
    1740:	82 83       	std	Z+2, r24	; 0x02
    1742:	93 83       	std	Z+3, r25	; 0x03
    1744:	a4 83       	std	Z+4, r26	; 0x04
    1746:	b5 83       	std	Z+5, r27	; 0x05
    1748:	06 c0       	rjmp	.+12     	; 0x1756 <SYS_TimerStop+0x74>
*****************************************************************************/
void SYS_TimerStop(SYS_Timer_t *timer)
{
  SYS_Timer_t *prev = NULL;

  for (SYS_Timer_t *t = timers; t; t = t->next)
    174a:	df 01       	movw	r26, r30
    174c:	ed 91       	ld	r30, X+
    174e:	fc 91       	ld	r31, X
    1750:	11 97       	sbiw	r26, 0x01	; 1
    1752:	30 97       	sbiw	r30, 0x00	; 0
    1754:	91 f6       	brne	.-92     	; 0x16fa <SYS_TimerStop+0x18>

      break;
    }
    prev = t;
  }
}
    1756:	df 91       	pop	r29
    1758:	cf 91       	pop	r28
    175a:	08 95       	ret

0000175c <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    175c:	e0 91 0d 06 	lds	r30, 0x060D
    1760:	f0 91 0e 06 	lds	r31, 0x060E
    1764:	30 97       	sbiw	r30, 0x00	; 0
    1766:	71 f0       	breq	.+28     	; 0x1784 <SYS_TimerStarted+0x28>
    if (t == timer)
    1768:	e8 17       	cp	r30, r24
    176a:	f9 07       	cpc	r31, r25
    176c:	21 f4       	brne	.+8      	; 0x1776 <SYS_TimerStarted+0x1a>
    176e:	0c c0       	rjmp	.+24     	; 0x1788 <SYS_TimerStarted+0x2c>
    1770:	8e 17       	cp	r24, r30
    1772:	9f 07       	cpc	r25, r31
    1774:	59 f0       	breq	.+22     	; 0x178c <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1776:	01 90       	ld	r0, Z+
    1778:	f0 81       	ld	r31, Z
    177a:	e0 2d       	mov	r30, r0
    177c:	30 97       	sbiw	r30, 0x00	; 0
    177e:	c1 f7       	brne	.-16     	; 0x1770 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	08 95       	ret
    1784:	80 e0       	ldi	r24, 0x00	; 0
    1786:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	08 95       	ret
    178c:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    178e:	08 95       	ret

00001790 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    1790:	cf 93       	push	r28
    1792:	df 93       	push	r29
    1794:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    1796:	0e 94 ae 0b 	call	0x175c	; 0x175c <SYS_TimerStarted>
    179a:	81 11       	cpse	r24, r1
    179c:	03 c0       	rjmp	.+6      	; 0x17a4 <SYS_TimerStart+0x14>
    placeTimer(timer);
    179e:	ce 01       	movw	r24, r28
    17a0:	0e 94 08 0b 	call	0x1610	; 0x1610 <placeTimer>
}
    17a4:	df 91       	pop	r29
    17a6:	cf 91       	pop	r28
    17a8:	08 95       	ret

000017aa <SYS_TimerTaskHandler>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerTaskHandler(void)
{
    17aa:	cf 92       	push	r12
    17ac:	df 92       	push	r13
    17ae:	ef 92       	push	r14
    17b0:	ff 92       	push	r15
    17b2:	cf 93       	push	r28
    17b4:	df 93       	push	r29
  uint32_t elapsed;
  uint8_t cnt;

  if (0 == halTimerIrqCount)
    17b6:	80 91 0f 06 	lds	r24, 0x060F
    17ba:	88 23       	and	r24, r24
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <SYS_TimerTaskHandler+0x16>
    17be:	5a c0       	rjmp	.+180    	; 0x1874 <SYS_TimerTaskHandler+0xca>
    return;

  ATOMIC_SECTION_ENTER
    17c0:	8f b7       	in	r24, 0x3f	; 63
    17c2:	f8 94       	cli
    cnt = halTimerIrqCount;
    17c4:	c0 90 0f 06 	lds	r12, 0x060F
    halTimerIrqCount = 0;
    17c8:	10 92 0f 06 	sts	0x060F, r1
  ATOMIC_SECTION_LEAVE
    17cc:	8f bf       	out	0x3f, r24	; 63

  elapsed = cnt * HAL_TIMER_INTERVAL;
    17ce:	d1 2c       	mov	r13, r1
    17d0:	e1 2c       	mov	r14, r1
    17d2:	f1 2c       	mov	r15, r1
    17d4:	cc 0c       	add	r12, r12
    17d6:	dd 1c       	adc	r13, r13
    17d8:	ee 1c       	adc	r14, r14
    17da:	ff 1c       	adc	r15, r15
    17dc:	d7 01       	movw	r26, r14
    17de:	c6 01       	movw	r24, r12
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	aa 1f       	adc	r26, r26
    17e6:	bb 1f       	adc	r27, r27
    17e8:	88 0f       	add	r24, r24
    17ea:	99 1f       	adc	r25, r25
    17ec:	aa 1f       	adc	r26, r26
    17ee:	bb 1f       	adc	r27, r27
    17f0:	c8 0e       	add	r12, r24
    17f2:	d9 1e       	adc	r13, r25
    17f4:	ea 1e       	adc	r14, r26
    17f6:	fb 1e       	adc	r15, r27

  while (timers && (timers->timeout <= elapsed))
    17f8:	c0 91 0d 06 	lds	r28, 0x060D
    17fc:	d0 91 0e 06 	lds	r29, 0x060E
    1800:	20 97       	sbiw	r28, 0x00	; 0
    1802:	c1 f1       	breq	.+112    	; 0x1874 <SYS_TimerTaskHandler+0xca>
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	9b 81       	ldd	r25, Y+3	; 0x03
    1808:	ac 81       	ldd	r26, Y+4	; 0x04
    180a:	bd 81       	ldd	r27, Y+5	; 0x05
    180c:	c8 16       	cp	r12, r24
    180e:	d9 06       	cpc	r13, r25
    1810:	ea 06       	cpc	r14, r26
    1812:	fb 06       	cpc	r15, r27
    1814:	18 f1       	brcs	.+70     	; 0x185c <SYS_TimerTaskHandler+0xb2>
  {
    SYS_Timer_t *timer = timers;

    elapsed -= timers->timeout;
    1816:	c8 1a       	sub	r12, r24
    1818:	d9 0a       	sbc	r13, r25
    181a:	ea 0a       	sbc	r14, r26
    181c:	fb 0a       	sbc	r15, r27
    timers = timers->next;
    181e:	88 81       	ld	r24, Y
    1820:	99 81       	ldd	r25, Y+1	; 0x01
    1822:	90 93 0e 06 	sts	0x060E, r25
    1826:	80 93 0d 06 	sts	0x060D, r24
    if (SYS_TIMER_PERIODIC_MODE == timer->mode)
    182a:	8a 85       	ldd	r24, Y+10	; 0x0a
    182c:	81 30       	cpi	r24, 0x01	; 1
    182e:	19 f4       	brne	.+6      	; 0x1836 <SYS_TimerTaskHandler+0x8c>
      placeTimer(timer);
    1830:	ce 01       	movw	r24, r28
    1832:	0e 94 08 0b 	call	0x1610	; 0x1610 <placeTimer>
    timer->handler(timer);
    1836:	eb 85       	ldd	r30, Y+11	; 0x0b
    1838:	fc 85       	ldd	r31, Y+12	; 0x0c
    183a:	ce 01       	movw	r24, r28
    183c:	09 95       	icall
    halTimerIrqCount = 0;
  ATOMIC_SECTION_LEAVE

  elapsed = cnt * HAL_TIMER_INTERVAL;

  while (timers && (timers->timeout <= elapsed))
    183e:	c0 91 0d 06 	lds	r28, 0x060D
    1842:	d0 91 0e 06 	lds	r29, 0x060E
    1846:	20 97       	sbiw	r28, 0x00	; 0
    1848:	a9 f0       	breq	.+42     	; 0x1874 <SYS_TimerTaskHandler+0xca>
    184a:	8a 81       	ldd	r24, Y+2	; 0x02
    184c:	9b 81       	ldd	r25, Y+3	; 0x03
    184e:	ac 81       	ldd	r26, Y+4	; 0x04
    1850:	bd 81       	ldd	r27, Y+5	; 0x05
    1852:	c8 16       	cp	r12, r24
    1854:	d9 06       	cpc	r13, r25
    1856:	ea 06       	cpc	r14, r26
    1858:	fb 06       	cpc	r15, r27
    185a:	e8 f6       	brcc	.-70     	; 0x1816 <SYS_TimerTaskHandler+0x6c>
      placeTimer(timer);
    timer->handler(timer);
  }

  if (timers)
    timers->timeout -= elapsed;
    185c:	8a 81       	ldd	r24, Y+2	; 0x02
    185e:	9b 81       	ldd	r25, Y+3	; 0x03
    1860:	ac 81       	ldd	r26, Y+4	; 0x04
    1862:	bd 81       	ldd	r27, Y+5	; 0x05
    1864:	8c 19       	sub	r24, r12
    1866:	9d 09       	sbc	r25, r13
    1868:	ae 09       	sbc	r26, r14
    186a:	bf 09       	sbc	r27, r15
    186c:	8a 83       	std	Y+2, r24	; 0x02
    186e:	9b 83       	std	Y+3, r25	; 0x03
    1870:	ac 83       	std	Y+4, r26	; 0x04
    1872:	bd 83       	std	Y+5, r27	; 0x05
}
    1874:	df 91       	pop	r29
    1876:	cf 91       	pop	r28
    1878:	ff 90       	pop	r15
    187a:	ef 90       	pop	r14
    187c:	df 90       	pop	r13
    187e:	cf 90       	pop	r12
    1880:	08 95       	ret

00001882 <vfprintf>:
    1882:	a3 e1       	ldi	r26, 0x13	; 19
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e7 e4       	ldi	r30, 0x47	; 71
    1888:	fc e0       	ldi	r31, 0x0C	; 12
    188a:	0c 94 df 0f 	jmp	0x1fbe	; 0x1fbe <__prologue_saves__>
    188e:	6c 01       	movw	r12, r24
    1890:	4b 01       	movw	r8, r22
    1892:	2a 01       	movw	r4, r20
    1894:	fc 01       	movw	r30, r24
    1896:	17 82       	std	Z+7, r1	; 0x07
    1898:	16 82       	std	Z+6, r1	; 0x06
    189a:	83 81       	ldd	r24, Z+3	; 0x03
    189c:	81 ff       	sbrs	r24, 1
    189e:	43 c3       	rjmp	.+1670   	; 0x1f26 <vfprintf+0x6a4>
    18a0:	ae 01       	movw	r20, r28
    18a2:	4f 5f       	subi	r20, 0xFF	; 255
    18a4:	5f 4f       	sbci	r21, 0xFF	; 255
    18a6:	3a 01       	movw	r6, r20
    18a8:	f6 01       	movw	r30, r12
    18aa:	93 81       	ldd	r25, Z+3	; 0x03
    18ac:	f4 01       	movw	r30, r8
    18ae:	93 fd       	sbrc	r25, 3
    18b0:	85 91       	lpm	r24, Z+
    18b2:	93 ff       	sbrs	r25, 3
    18b4:	81 91       	ld	r24, Z+
    18b6:	4f 01       	movw	r8, r30
    18b8:	88 23       	and	r24, r24
    18ba:	09 f4       	brne	.+2      	; 0x18be <vfprintf+0x3c>
    18bc:	30 c3       	rjmp	.+1632   	; 0x1f1e <vfprintf+0x69c>
    18be:	85 32       	cpi	r24, 0x25	; 37
    18c0:	39 f4       	brne	.+14     	; 0x18d0 <vfprintf+0x4e>
    18c2:	93 fd       	sbrc	r25, 3
    18c4:	85 91       	lpm	r24, Z+
    18c6:	93 ff       	sbrs	r25, 3
    18c8:	81 91       	ld	r24, Z+
    18ca:	4f 01       	movw	r8, r30
    18cc:	85 32       	cpi	r24, 0x25	; 37
    18ce:	39 f4       	brne	.+14     	; 0x18de <vfprintf+0x5c>
    18d0:	b6 01       	movw	r22, r12
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	0e 94 69 11 	call	0x22d2	; 0x22d2 <fputc>
    18d8:	52 01       	movw	r10, r4
    18da:	25 01       	movw	r4, r10
    18dc:	e5 cf       	rjmp	.-54     	; 0x18a8 <vfprintf+0x26>
    18de:	10 e0       	ldi	r17, 0x00	; 0
    18e0:	f1 2c       	mov	r15, r1
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	20 32       	cpi	r18, 0x20	; 32
    18e6:	a0 f4       	brcc	.+40     	; 0x1910 <vfprintf+0x8e>
    18e8:	8b 32       	cpi	r24, 0x2B	; 43
    18ea:	69 f0       	breq	.+26     	; 0x1906 <vfprintf+0x84>
    18ec:	30 f4       	brcc	.+12     	; 0x18fa <vfprintf+0x78>
    18ee:	80 32       	cpi	r24, 0x20	; 32
    18f0:	59 f0       	breq	.+22     	; 0x1908 <vfprintf+0x86>
    18f2:	83 32       	cpi	r24, 0x23	; 35
    18f4:	69 f4       	brne	.+26     	; 0x1910 <vfprintf+0x8e>
    18f6:	20 61       	ori	r18, 0x10	; 16
    18f8:	2c c0       	rjmp	.+88     	; 0x1952 <vfprintf+0xd0>
    18fa:	8d 32       	cpi	r24, 0x2D	; 45
    18fc:	39 f0       	breq	.+14     	; 0x190c <vfprintf+0x8a>
    18fe:	80 33       	cpi	r24, 0x30	; 48
    1900:	39 f4       	brne	.+14     	; 0x1910 <vfprintf+0x8e>
    1902:	21 60       	ori	r18, 0x01	; 1
    1904:	26 c0       	rjmp	.+76     	; 0x1952 <vfprintf+0xd0>
    1906:	22 60       	ori	r18, 0x02	; 2
    1908:	24 60       	ori	r18, 0x04	; 4
    190a:	23 c0       	rjmp	.+70     	; 0x1952 <vfprintf+0xd0>
    190c:	28 60       	ori	r18, 0x08	; 8
    190e:	21 c0       	rjmp	.+66     	; 0x1952 <vfprintf+0xd0>
    1910:	27 fd       	sbrc	r18, 7
    1912:	27 c0       	rjmp	.+78     	; 0x1962 <vfprintf+0xe0>
    1914:	30 ed       	ldi	r19, 0xD0	; 208
    1916:	38 0f       	add	r19, r24
    1918:	3a 30       	cpi	r19, 0x0A	; 10
    191a:	78 f4       	brcc	.+30     	; 0x193a <vfprintf+0xb8>
    191c:	26 ff       	sbrs	r18, 6
    191e:	06 c0       	rjmp	.+12     	; 0x192c <vfprintf+0xaa>
    1920:	fa e0       	ldi	r31, 0x0A	; 10
    1922:	1f 9f       	mul	r17, r31
    1924:	30 0d       	add	r19, r0
    1926:	11 24       	eor	r1, r1
    1928:	13 2f       	mov	r17, r19
    192a:	13 c0       	rjmp	.+38     	; 0x1952 <vfprintf+0xd0>
    192c:	4a e0       	ldi	r20, 0x0A	; 10
    192e:	f4 9e       	mul	r15, r20
    1930:	30 0d       	add	r19, r0
    1932:	11 24       	eor	r1, r1
    1934:	f3 2e       	mov	r15, r19
    1936:	20 62       	ori	r18, 0x20	; 32
    1938:	0c c0       	rjmp	.+24     	; 0x1952 <vfprintf+0xd0>
    193a:	8e 32       	cpi	r24, 0x2E	; 46
    193c:	21 f4       	brne	.+8      	; 0x1946 <vfprintf+0xc4>
    193e:	26 fd       	sbrc	r18, 6
    1940:	ee c2       	rjmp	.+1500   	; 0x1f1e <vfprintf+0x69c>
    1942:	20 64       	ori	r18, 0x40	; 64
    1944:	06 c0       	rjmp	.+12     	; 0x1952 <vfprintf+0xd0>
    1946:	8c 36       	cpi	r24, 0x6C	; 108
    1948:	11 f4       	brne	.+4      	; 0x194e <vfprintf+0xcc>
    194a:	20 68       	ori	r18, 0x80	; 128
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <vfprintf+0xd0>
    194e:	88 36       	cpi	r24, 0x68	; 104
    1950:	41 f4       	brne	.+16     	; 0x1962 <vfprintf+0xe0>
    1952:	f4 01       	movw	r30, r8
    1954:	93 fd       	sbrc	r25, 3
    1956:	85 91       	lpm	r24, Z+
    1958:	93 ff       	sbrs	r25, 3
    195a:	81 91       	ld	r24, Z+
    195c:	4f 01       	movw	r8, r30
    195e:	81 11       	cpse	r24, r1
    1960:	c1 cf       	rjmp	.-126    	; 0x18e4 <vfprintf+0x62>
    1962:	9b eb       	ldi	r25, 0xBB	; 187
    1964:	98 0f       	add	r25, r24
    1966:	93 30       	cpi	r25, 0x03	; 3
    1968:	18 f4       	brcc	.+6      	; 0x1970 <vfprintf+0xee>
    196a:	20 61       	ori	r18, 0x10	; 16
    196c:	80 5e       	subi	r24, 0xE0	; 224
    196e:	06 c0       	rjmp	.+12     	; 0x197c <vfprintf+0xfa>
    1970:	9b e9       	ldi	r25, 0x9B	; 155
    1972:	98 0f       	add	r25, r24
    1974:	93 30       	cpi	r25, 0x03	; 3
    1976:	08 f0       	brcs	.+2      	; 0x197a <vfprintf+0xf8>
    1978:	71 c1       	rjmp	.+738    	; 0x1c5c <vfprintf+0x3da>
    197a:	2f 7e       	andi	r18, 0xEF	; 239
    197c:	26 ff       	sbrs	r18, 6
    197e:	16 e0       	ldi	r17, 0x06	; 6
    1980:	2f 73       	andi	r18, 0x3F	; 63
    1982:	32 2e       	mov	r3, r18
    1984:	85 36       	cpi	r24, 0x65	; 101
    1986:	19 f4       	brne	.+6      	; 0x198e <vfprintf+0x10c>
    1988:	20 64       	ori	r18, 0x40	; 64
    198a:	32 2e       	mov	r3, r18
    198c:	08 c0       	rjmp	.+16     	; 0x199e <vfprintf+0x11c>
    198e:	86 36       	cpi	r24, 0x66	; 102
    1990:	21 f4       	brne	.+8      	; 0x199a <vfprintf+0x118>
    1992:	f2 2f       	mov	r31, r18
    1994:	f0 68       	ori	r31, 0x80	; 128
    1996:	3f 2e       	mov	r3, r31
    1998:	02 c0       	rjmp	.+4      	; 0x199e <vfprintf+0x11c>
    199a:	11 11       	cpse	r17, r1
    199c:	11 50       	subi	r17, 0x01	; 1
    199e:	37 fe       	sbrs	r3, 7
    19a0:	07 c0       	rjmp	.+14     	; 0x19b0 <vfprintf+0x12e>
    19a2:	1c 33       	cpi	r17, 0x3C	; 60
    19a4:	50 f4       	brcc	.+20     	; 0x19ba <vfprintf+0x138>
    19a6:	ee 24       	eor	r14, r14
    19a8:	e3 94       	inc	r14
    19aa:	e1 0e       	add	r14, r17
    19ac:	27 e0       	ldi	r18, 0x07	; 7
    19ae:	0b c0       	rjmp	.+22     	; 0x19c6 <vfprintf+0x144>
    19b0:	18 30       	cpi	r17, 0x08	; 8
    19b2:	38 f0       	brcs	.+14     	; 0x19c2 <vfprintf+0x140>
    19b4:	27 e0       	ldi	r18, 0x07	; 7
    19b6:	17 e0       	ldi	r17, 0x07	; 7
    19b8:	05 c0       	rjmp	.+10     	; 0x19c4 <vfprintf+0x142>
    19ba:	27 e0       	ldi	r18, 0x07	; 7
    19bc:	4c e3       	ldi	r20, 0x3C	; 60
    19be:	e4 2e       	mov	r14, r20
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <vfprintf+0x144>
    19c2:	21 2f       	mov	r18, r17
    19c4:	e1 2c       	mov	r14, r1
    19c6:	52 01       	movw	r10, r4
    19c8:	44 e0       	ldi	r20, 0x04	; 4
    19ca:	a4 0e       	add	r10, r20
    19cc:	b1 1c       	adc	r11, r1
    19ce:	f2 01       	movw	r30, r4
    19d0:	60 81       	ld	r22, Z
    19d2:	71 81       	ldd	r23, Z+1	; 0x01
    19d4:	82 81       	ldd	r24, Z+2	; 0x02
    19d6:	93 81       	ldd	r25, Z+3	; 0x03
    19d8:	0e 2d       	mov	r16, r14
    19da:	a3 01       	movw	r20, r6
    19dc:	0e 94 72 10 	call	0x20e4	; 0x20e4 <__ftoa_engine>
    19e0:	2c 01       	movw	r4, r24
    19e2:	09 81       	ldd	r16, Y+1	; 0x01
    19e4:	00 ff       	sbrs	r16, 0
    19e6:	02 c0       	rjmp	.+4      	; 0x19ec <vfprintf+0x16a>
    19e8:	03 ff       	sbrs	r16, 3
    19ea:	07 c0       	rjmp	.+14     	; 0x19fa <vfprintf+0x178>
    19ec:	31 fc       	sbrc	r3, 1
    19ee:	08 c0       	rjmp	.+16     	; 0x1a00 <vfprintf+0x17e>
    19f0:	32 fe       	sbrs	r3, 2
    19f2:	09 c0       	rjmp	.+18     	; 0x1a06 <vfprintf+0x184>
    19f4:	30 e2       	ldi	r19, 0x20	; 32
    19f6:	23 2e       	mov	r2, r19
    19f8:	07 c0       	rjmp	.+14     	; 0x1a08 <vfprintf+0x186>
    19fa:	2d e2       	ldi	r18, 0x2D	; 45
    19fc:	22 2e       	mov	r2, r18
    19fe:	04 c0       	rjmp	.+8      	; 0x1a08 <vfprintf+0x186>
    1a00:	9b e2       	ldi	r25, 0x2B	; 43
    1a02:	29 2e       	mov	r2, r25
    1a04:	01 c0       	rjmp	.+2      	; 0x1a08 <vfprintf+0x186>
    1a06:	21 2c       	mov	r2, r1
    1a08:	80 2f       	mov	r24, r16
    1a0a:	8c 70       	andi	r24, 0x0C	; 12
    1a0c:	19 f0       	breq	.+6      	; 0x1a14 <vfprintf+0x192>
    1a0e:	21 10       	cpse	r2, r1
    1a10:	68 c2       	rjmp	.+1232   	; 0x1ee2 <vfprintf+0x660>
    1a12:	a8 c2       	rjmp	.+1360   	; 0x1f64 <vfprintf+0x6e2>
    1a14:	37 fe       	sbrs	r3, 7
    1a16:	0f c0       	rjmp	.+30     	; 0x1a36 <vfprintf+0x1b4>
    1a18:	e4 0c       	add	r14, r4
    1a1a:	04 ff       	sbrs	r16, 4
    1a1c:	04 c0       	rjmp	.+8      	; 0x1a26 <vfprintf+0x1a4>
    1a1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a20:	81 33       	cpi	r24, 0x31	; 49
    1a22:	09 f4       	brne	.+2      	; 0x1a26 <vfprintf+0x1a4>
    1a24:	ea 94       	dec	r14
    1a26:	1e 14       	cp	r1, r14
    1a28:	74 f5       	brge	.+92     	; 0x1a86 <vfprintf+0x204>
    1a2a:	f8 e0       	ldi	r31, 0x08	; 8
    1a2c:	fe 15       	cp	r31, r14
    1a2e:	78 f5       	brcc	.+94     	; 0x1a8e <vfprintf+0x20c>
    1a30:	88 e0       	ldi	r24, 0x08	; 8
    1a32:	e8 2e       	mov	r14, r24
    1a34:	2c c0       	rjmp	.+88     	; 0x1a8e <vfprintf+0x20c>
    1a36:	36 fc       	sbrc	r3, 6
    1a38:	2a c0       	rjmp	.+84     	; 0x1a8e <vfprintf+0x20c>
    1a3a:	81 2f       	mov	r24, r17
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	84 15       	cp	r24, r4
    1a40:	95 05       	cpc	r25, r5
    1a42:	9c f0       	brlt	.+38     	; 0x1a6a <vfprintf+0x1e8>
    1a44:	2c ef       	ldi	r18, 0xFC	; 252
    1a46:	42 16       	cp	r4, r18
    1a48:	2f ef       	ldi	r18, 0xFF	; 255
    1a4a:	52 06       	cpc	r5, r18
    1a4c:	74 f0       	brlt	.+28     	; 0x1a6a <vfprintf+0x1e8>
    1a4e:	43 2d       	mov	r20, r3
    1a50:	40 68       	ori	r20, 0x80	; 128
    1a52:	34 2e       	mov	r3, r20
    1a54:	0a c0       	rjmp	.+20     	; 0x1a6a <vfprintf+0x1e8>
    1a56:	e2 e0       	ldi	r30, 0x02	; 2
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	ec 0f       	add	r30, r28
    1a5c:	fd 1f       	adc	r31, r29
    1a5e:	e1 0f       	add	r30, r17
    1a60:	f1 1d       	adc	r31, r1
    1a62:	80 81       	ld	r24, Z
    1a64:	80 33       	cpi	r24, 0x30	; 48
    1a66:	19 f4       	brne	.+6      	; 0x1a6e <vfprintf+0x1ec>
    1a68:	11 50       	subi	r17, 0x01	; 1
    1a6a:	11 11       	cpse	r17, r1
    1a6c:	f4 cf       	rjmp	.-24     	; 0x1a56 <vfprintf+0x1d4>
    1a6e:	37 fe       	sbrs	r3, 7
    1a70:	0e c0       	rjmp	.+28     	; 0x1a8e <vfprintf+0x20c>
    1a72:	ee 24       	eor	r14, r14
    1a74:	e3 94       	inc	r14
    1a76:	e1 0e       	add	r14, r17
    1a78:	81 2f       	mov	r24, r17
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	48 16       	cp	r4, r24
    1a7e:	59 06       	cpc	r5, r25
    1a80:	2c f4       	brge	.+10     	; 0x1a8c <vfprintf+0x20a>
    1a82:	14 19       	sub	r17, r4
    1a84:	04 c0       	rjmp	.+8      	; 0x1a8e <vfprintf+0x20c>
    1a86:	ee 24       	eor	r14, r14
    1a88:	e3 94       	inc	r14
    1a8a:	01 c0       	rjmp	.+2      	; 0x1a8e <vfprintf+0x20c>
    1a8c:	10 e0       	ldi	r17, 0x00	; 0
    1a8e:	37 fe       	sbrs	r3, 7
    1a90:	06 c0       	rjmp	.+12     	; 0x1a9e <vfprintf+0x21c>
    1a92:	14 14       	cp	r1, r4
    1a94:	15 04       	cpc	r1, r5
    1a96:	34 f4       	brge	.+12     	; 0x1aa4 <vfprintf+0x222>
    1a98:	c2 01       	movw	r24, r4
    1a9a:	01 96       	adiw	r24, 0x01	; 1
    1a9c:	05 c0       	rjmp	.+10     	; 0x1aa8 <vfprintf+0x226>
    1a9e:	85 e0       	ldi	r24, 0x05	; 5
    1aa0:	90 e0       	ldi	r25, 0x00	; 0
    1aa2:	02 c0       	rjmp	.+4      	; 0x1aa8 <vfprintf+0x226>
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	21 10       	cpse	r2, r1
    1aaa:	01 96       	adiw	r24, 0x01	; 1
    1aac:	11 23       	and	r17, r17
    1aae:	31 f0       	breq	.+12     	; 0x1abc <vfprintf+0x23a>
    1ab0:	21 2f       	mov	r18, r17
    1ab2:	30 e0       	ldi	r19, 0x00	; 0
    1ab4:	2f 5f       	subi	r18, 0xFF	; 255
    1ab6:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab8:	82 0f       	add	r24, r18
    1aba:	93 1f       	adc	r25, r19
    1abc:	2f 2d       	mov	r18, r15
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	82 17       	cp	r24, r18
    1ac2:	93 07       	cpc	r25, r19
    1ac4:	14 f4       	brge	.+4      	; 0x1aca <vfprintf+0x248>
    1ac6:	f8 1a       	sub	r15, r24
    1ac8:	01 c0       	rjmp	.+2      	; 0x1acc <vfprintf+0x24a>
    1aca:	f1 2c       	mov	r15, r1
    1acc:	83 2d       	mov	r24, r3
    1ace:	89 70       	andi	r24, 0x09	; 9
    1ad0:	49 f4       	brne	.+18     	; 0x1ae4 <vfprintf+0x262>
    1ad2:	ff 20       	and	r15, r15
    1ad4:	39 f0       	breq	.+14     	; 0x1ae4 <vfprintf+0x262>
    1ad6:	b6 01       	movw	r22, r12
    1ad8:	80 e2       	ldi	r24, 0x20	; 32
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	0e 94 69 11 	call	0x22d2	; 0x22d2 <fputc>
    1ae0:	fa 94       	dec	r15
    1ae2:	f7 cf       	rjmp	.-18     	; 0x1ad2 <vfprintf+0x250>
    1ae4:	22 20       	and	r2, r2
    1ae6:	29 f0       	breq	.+10     	; 0x1af2 <vfprintf+0x270>
    1ae8:	b6 01       	movw	r22, r12
    1aea:	82 2d       	mov	r24, r2
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	0e 94 69 11 	call	0x22d2	; 0x22d2 <fputc>
    1af2:	33 fc       	sbrc	r3, 3
    1af4:	09 c0       	rjmp	.+18     	; 0x1b08 <vfprintf+0x286>
    1af6:	ff 20       	and	r15, r15
    1af8:	39 f0       	breq	.+14     	; 0x1b08 <vfprintf+0x286>
    1afa:	b6 01       	movw	r22, r12
    1afc:	80 e3       	ldi	r24, 0x30	; 48
    1afe:	90 e0       	ldi	r25, 0x00	; 0
    1b00:	0e 94 69 11 	call	0x22d2	; 0x22d2 <fputc>
    1b04:	fa 94       	dec	r15
    1b06:	f7 cf       	rjmp	.-18     	; 0x1af6 <vfprintf+0x274>
    1b08:	37 fe       	sbrs	r3, 7
    1b0a:	5a c0       	rjmp	.+180    	; 0x1bc0 <vfprintf+0x33e>
    1b0c:	94 2d       	mov	r25, r4
    1b0e:	85 2d       	mov	r24, r5
    1b10:	57 fe       	sbrs	r5, 7
    1b12:	02 c0       	rjmp	.+4      	; 0x1b18 <vfprintf+0x296>
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	29 2e       	mov	r2, r25
    1b1a:	38 2e       	mov	r3, r24
    1b1c:	20 e0       	ldi	r18, 0x00	; 0
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	a2 01       	movw	r20, r4
    1b22:	4e 19       	sub	r20, r14
    1b24:	51 09       	sbc	r21, r1
    1b26:	5d 87       	std	Y+13, r21	; 0x0d
    1b28:	4c 87       	std	Y+12, r20	; 0x0c
    1b2a:	a2 01       	movw	r20, r4
    1b2c:	42 19       	sub	r20, r2
    1b2e:	53 09       	sbc	r21, r3
    1b30:	5f 87       	std	Y+15, r21	; 0x0f
    1b32:	4e 87       	std	Y+14, r20	; 0x0e
    1b34:	61 2f       	mov	r22, r17
    1b36:	70 e0       	ldi	r23, 0x00	; 0
    1b38:	44 27       	eor	r20, r20
    1b3a:	55 27       	eor	r21, r21
    1b3c:	46 1b       	sub	r20, r22
    1b3e:	57 0b       	sbc	r21, r23
    1b40:	59 8b       	std	Y+17, r21	; 0x11
    1b42:	48 8b       	std	Y+16, r20	; 0x10
    1b44:	5f ef       	ldi	r21, 0xFF	; 255
    1b46:	25 16       	cp	r2, r21
    1b48:	35 06       	cpc	r3, r21
    1b4a:	49 f4       	brne	.+18     	; 0x1b5e <vfprintf+0x2dc>
    1b4c:	b6 01       	movw	r22, r12
    1b4e:	8e e2       	ldi	r24, 0x2E	; 46
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	2a 8b       	std	Y+18, r18	; 0x12
    1b54:	3b 8b       	std	Y+19, r19	; 0x13
    1b56:	0e 94 69 11 	call	0x22d2	; 0x22d2 <fputc>
    1b5a:	3b 89       	ldd	r19, Y+19	; 0x13
    1b5c:	2a 89       	ldd	r18, Y+18	; 0x12
    1b5e:	42 14       	cp	r4, r2
    1b60:	53 04       	cpc	r5, r3
    1b62:	6c f0       	brlt	.+26     	; 0x1b7e <vfprintf+0x2fc>
    1b64:	4c 85       	ldd	r20, Y+12	; 0x0c
    1b66:	5d 85       	ldd	r21, Y+13	; 0x0d
    1b68:	42 15       	cp	r20, r2
    1b6a:	53 05       	cpc	r21, r3
    1b6c:	44 f4       	brge	.+16     	; 0x1b7e <vfprintf+0x2fc>
    1b6e:	ee 85       	ldd	r30, Y+14	; 0x0e
    1b70:	ff 85       	ldd	r31, Y+15	; 0x0f
    1b72:	e2 0f       	add	r30, r18
    1b74:	f3 1f       	adc	r31, r19
    1b76:	e6 0d       	add	r30, r6
    1b78:	f7 1d       	adc	r31, r7
    1b7a:	81 81       	ldd	r24, Z+1	; 0x01
    1b7c:	01 c0       	rjmp	.+2      	; 0x1b80 <vfprintf+0x2fe>
    1b7e:	80 e3       	ldi	r24, 0x30	; 48
    1b80:	51 e0       	ldi	r21, 0x01	; 1
    1b82:	25 1a       	sub	r2, r21
    1b84:	31 08       	sbc	r3, r1
    1b86:	2f 5f       	subi	r18, 0xFF	; 255
    1b88:	3f 4f       	sbci	r19, 0xFF	; 255
    1b8a:	48 89       	ldd	r20, Y+16	; 0x10
    1b8c:	59 89       	ldd	r21, Y+17	; 0x11
    1b8e:	24 16       	cp	r2, r20
    1b90:	35 06       	cpc	r3, r21
    1b92:	4c f0       	brlt	.+18     	; 0x1ba6 <vfprintf+0x324>
    1b94:	b6 01       	movw	r22, r12
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	2a 8b       	std	Y+18, r18	; 0x12
    1b9a:	3b 8b       	std	Y+19, r19	; 0x13
    1b9c:	0e 94 69 11 	call	0x22d2	; 0x22d2 <fputc>
    1ba0:	2a 89       	ldd	r18, Y+18	; 0x12
    1ba2:	3b 89       	ldd	r19, Y+19	; 0x13
    1ba4:	cf cf       	rjmp	.-98     	; 0x1b44 <vfprintf+0x2c2>
    1ba6:	24 14       	cp	r2, r4
    1ba8:	35 04       	cpc	r3, r5
    1baa:	39 f4       	brne	.+14     	; 0x1bba <vfprintf+0x338>
    1bac:	9a 81       	ldd	r25, Y+2	; 0x02
    1bae:	96 33       	cpi	r25, 0x36	; 54
    1bb0:	18 f4       	brcc	.+6      	; 0x1bb8 <vfprintf+0x336>
    1bb2:	95 33       	cpi	r25, 0x35	; 53
    1bb4:	11 f4       	brne	.+4      	; 0x1bba <vfprintf+0x338>
    1bb6:	04 ff       	sbrs	r16, 4
    1bb8:	81 e3       	ldi	r24, 0x31	; 49
    1bba:	b6 01       	movw	r22, r12
    1bbc:	90 e0       	ldi	r25, 0x00	; 0
    1bbe:	4b c0       	rjmp	.+150    	; 0x1c56 <vfprintf+0x3d4>
    1bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc2:	81 33       	cpi	r24, 0x31	; 49
    1bc4:	09 f0       	breq	.+2      	; 0x1bc8 <vfprintf+0x346>
    1bc6:	0f 7e       	andi	r16, 0xEF	; 239
    1bc8:	b6 01       	movw	r22, r12
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	0e 94 69 11 	call	0x22d2	; 0x22d2 <fputc>
    1bd0:	11 11       	cpse	r17, r1
    1bd2:	05 c0       	rjmp	.+10     	; 0x1bde <vfprintf+0x35c>
    1bd4:	34 fc       	sbrc	r3, 4
    1bd6:	18 c0       	rjmp	.+48     	; 0x1c08 <vfprintf+0x386>
    1bd8:	85 e6       	ldi	r24, 0x65	; 101
    1bda:	90 e0       	ldi	r25, 0x00	; 0
    1bdc:	17 c0       	rjmp	.+46     	; 0x1c0c <vfprintf+0x38a>
    1bde:	b6 01       	movw	r22, r12
    1be0:	8e e2       	ldi	r24, 0x2E	; 46
    1be2:	90 e0       	ldi	r25, 0x00	; 0
    1be4:	0e 94 69 11 	call	0x22d2	; 0x22d2 <fputc>
    1be8:	82 e0       	ldi	r24, 0x02	; 2
    1bea:	ee 24       	eor	r14, r14
    1bec:	e3 94       	inc	r14
    1bee:	e8 0e       	add	r14, r24
    1bf0:	f3 01       	movw	r30, r6
    1bf2:	e8 0f       	add	r30, r24
    1bf4:	f1 1d       	adc	r31, r1
    1bf6:	80 81       	ld	r24, Z
    1bf8:	b6 01       	movw	r22, r12
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	0e 94 69 11 	call	0x22d2	; 0x22d2 <fputc>
    1c00:	11 50       	subi	r17, 0x01	; 1
    1c02:	8e 2d       	mov	r24, r14
    1c04:	91 f7       	brne	.-28     	; 0x1bea <vfprintf+0x368>
    1c06:	e6 cf       	rjmp	.-52     	; 0x1bd4 <vfprintf+0x352>
    1c08:	85 e4       	ldi	r24, 0x45	; 69
    1c0a:	90 e0       	ldi	r25, 0x00	; 0
    1c0c:	b6 01       	movw	r22, r12
    1c0e:	0e 94 69 11 	call	0x22d2	; 0x22d2 <fputc>
    1c12:	57 fc       	sbrc	r5, 7
    1c14:	05 c0       	rjmp	.+10     	; 0x1c20 <vfprintf+0x39e>
    1c16:	41 14       	cp	r4, r1
    1c18:	51 04       	cpc	r5, r1
    1c1a:	39 f4       	brne	.+14     	; 0x1c2a <vfprintf+0x3a8>
    1c1c:	04 ff       	sbrs	r16, 4
    1c1e:	05 c0       	rjmp	.+10     	; 0x1c2a <vfprintf+0x3a8>
    1c20:	51 94       	neg	r5
    1c22:	41 94       	neg	r4
    1c24:	51 08       	sbc	r5, r1
    1c26:	8d e2       	ldi	r24, 0x2D	; 45
    1c28:	01 c0       	rjmp	.+2      	; 0x1c2c <vfprintf+0x3aa>
    1c2a:	8b e2       	ldi	r24, 0x2B	; 43
    1c2c:	b6 01       	movw	r22, r12
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	0e 94 69 11 	call	0x22d2	; 0x22d2 <fputc>
    1c34:	80 e3       	ldi	r24, 0x30	; 48
    1c36:	9a e0       	ldi	r25, 0x0A	; 10
    1c38:	49 16       	cp	r4, r25
    1c3a:	51 04       	cpc	r5, r1
    1c3c:	2c f0       	brlt	.+10     	; 0x1c48 <vfprintf+0x3c6>
    1c3e:	8f 5f       	subi	r24, 0xFF	; 255
    1c40:	5a e0       	ldi	r21, 0x0A	; 10
    1c42:	45 1a       	sub	r4, r21
    1c44:	51 08       	sbc	r5, r1
    1c46:	f7 cf       	rjmp	.-18     	; 0x1c36 <vfprintf+0x3b4>
    1c48:	b6 01       	movw	r22, r12
    1c4a:	90 e0       	ldi	r25, 0x00	; 0
    1c4c:	0e 94 69 11 	call	0x22d2	; 0x22d2 <fputc>
    1c50:	b6 01       	movw	r22, r12
    1c52:	c2 01       	movw	r24, r4
    1c54:	c0 96       	adiw	r24, 0x30	; 48
    1c56:	0e 94 69 11 	call	0x22d2	; 0x22d2 <fputc>
    1c5a:	57 c1       	rjmp	.+686    	; 0x1f0a <vfprintf+0x688>
    1c5c:	83 36       	cpi	r24, 0x63	; 99
    1c5e:	31 f0       	breq	.+12     	; 0x1c6c <vfprintf+0x3ea>
    1c60:	83 37       	cpi	r24, 0x73	; 115
    1c62:	79 f0       	breq	.+30     	; 0x1c82 <vfprintf+0x400>
    1c64:	83 35       	cpi	r24, 0x53	; 83
    1c66:	09 f0       	breq	.+2      	; 0x1c6a <vfprintf+0x3e8>
    1c68:	58 c0       	rjmp	.+176    	; 0x1d1a <vfprintf+0x498>
    1c6a:	21 c0       	rjmp	.+66     	; 0x1cae <vfprintf+0x42c>
    1c6c:	52 01       	movw	r10, r4
    1c6e:	e2 e0       	ldi	r30, 0x02	; 2
    1c70:	ae 0e       	add	r10, r30
    1c72:	b1 1c       	adc	r11, r1
    1c74:	f2 01       	movw	r30, r4
    1c76:	80 81       	ld	r24, Z
    1c78:	89 83       	std	Y+1, r24	; 0x01
    1c7a:	01 e0       	ldi	r16, 0x01	; 1
    1c7c:	10 e0       	ldi	r17, 0x00	; 0
    1c7e:	23 01       	movw	r4, r6
    1c80:	14 c0       	rjmp	.+40     	; 0x1caa <vfprintf+0x428>
    1c82:	52 01       	movw	r10, r4
    1c84:	f2 e0       	ldi	r31, 0x02	; 2
    1c86:	af 0e       	add	r10, r31
    1c88:	b1 1c       	adc	r11, r1
    1c8a:	f2 01       	movw	r30, r4
    1c8c:	40 80       	ld	r4, Z
    1c8e:	51 80       	ldd	r5, Z+1	; 0x01
    1c90:	26 ff       	sbrs	r18, 6
    1c92:	03 c0       	rjmp	.+6      	; 0x1c9a <vfprintf+0x418>
    1c94:	61 2f       	mov	r22, r17
    1c96:	70 e0       	ldi	r23, 0x00	; 0
    1c98:	02 c0       	rjmp	.+4      	; 0x1c9e <vfprintf+0x41c>
    1c9a:	6f ef       	ldi	r22, 0xFF	; 255
    1c9c:	7f ef       	ldi	r23, 0xFF	; 255
    1c9e:	c2 01       	movw	r24, r4
    1ca0:	2a 8b       	std	Y+18, r18	; 0x12
    1ca2:	0e 94 5e 11 	call	0x22bc	; 0x22bc <strnlen>
    1ca6:	8c 01       	movw	r16, r24
    1ca8:	2a 89       	ldd	r18, Y+18	; 0x12
    1caa:	2f 77       	andi	r18, 0x7F	; 127
    1cac:	15 c0       	rjmp	.+42     	; 0x1cd8 <vfprintf+0x456>
    1cae:	52 01       	movw	r10, r4
    1cb0:	f2 e0       	ldi	r31, 0x02	; 2
    1cb2:	af 0e       	add	r10, r31
    1cb4:	b1 1c       	adc	r11, r1
    1cb6:	f2 01       	movw	r30, r4
    1cb8:	40 80       	ld	r4, Z
    1cba:	51 80       	ldd	r5, Z+1	; 0x01
    1cbc:	26 ff       	sbrs	r18, 6
    1cbe:	03 c0       	rjmp	.+6      	; 0x1cc6 <vfprintf+0x444>
    1cc0:	61 2f       	mov	r22, r17
    1cc2:	70 e0       	ldi	r23, 0x00	; 0
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <vfprintf+0x448>
    1cc6:	6f ef       	ldi	r22, 0xFF	; 255
    1cc8:	7f ef       	ldi	r23, 0xFF	; 255
    1cca:	c2 01       	movw	r24, r4
    1ccc:	2a 8b       	std	Y+18, r18	; 0x12
    1cce:	0e 94 4a 11 	call	0x2294	; 0x2294 <strnlen_P>
    1cd2:	8c 01       	movw	r16, r24
    1cd4:	2a 89       	ldd	r18, Y+18	; 0x12
    1cd6:	20 68       	ori	r18, 0x80	; 128
    1cd8:	32 2e       	mov	r3, r18
    1cda:	23 fd       	sbrc	r18, 3
    1cdc:	1a c0       	rjmp	.+52     	; 0x1d12 <vfprintf+0x490>
    1cde:	8f 2d       	mov	r24, r15
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	08 17       	cp	r16, r24
    1ce4:	19 07       	cpc	r17, r25
    1ce6:	a8 f4       	brcc	.+42     	; 0x1d12 <vfprintf+0x490>
    1ce8:	b6 01       	movw	r22, r12
    1cea:	80 e2       	ldi	r24, 0x20	; 32
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	0e 94 69 11 	call	0x22d2	; 0x22d2 <fputc>
    1cf2:	fa 94       	dec	r15
    1cf4:	f4 cf       	rjmp	.-24     	; 0x1cde <vfprintf+0x45c>
    1cf6:	f2 01       	movw	r30, r4
    1cf8:	37 fc       	sbrc	r3, 7
    1cfa:	85 91       	lpm	r24, Z+
    1cfc:	37 fe       	sbrs	r3, 7
    1cfe:	81 91       	ld	r24, Z+
    1d00:	2f 01       	movw	r4, r30
    1d02:	b6 01       	movw	r22, r12
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	0e 94 69 11 	call	0x22d2	; 0x22d2 <fputc>
    1d0a:	f1 10       	cpse	r15, r1
    1d0c:	fa 94       	dec	r15
    1d0e:	01 50       	subi	r16, 0x01	; 1
    1d10:	11 09       	sbc	r17, r1
    1d12:	01 15       	cp	r16, r1
    1d14:	11 05       	cpc	r17, r1
    1d16:	79 f7       	brne	.-34     	; 0x1cf6 <vfprintf+0x474>
    1d18:	f8 c0       	rjmp	.+496    	; 0x1f0a <vfprintf+0x688>
    1d1a:	84 36       	cpi	r24, 0x64	; 100
    1d1c:	11 f0       	breq	.+4      	; 0x1d22 <vfprintf+0x4a0>
    1d1e:	89 36       	cpi	r24, 0x69	; 105
    1d20:	59 f5       	brne	.+86     	; 0x1d78 <vfprintf+0x4f6>
    1d22:	52 01       	movw	r10, r4
    1d24:	27 ff       	sbrs	r18, 7
    1d26:	09 c0       	rjmp	.+18     	; 0x1d3a <vfprintf+0x4b8>
    1d28:	f4 e0       	ldi	r31, 0x04	; 4
    1d2a:	af 0e       	add	r10, r31
    1d2c:	b1 1c       	adc	r11, r1
    1d2e:	f2 01       	movw	r30, r4
    1d30:	60 81       	ld	r22, Z
    1d32:	71 81       	ldd	r23, Z+1	; 0x01
    1d34:	82 81       	ldd	r24, Z+2	; 0x02
    1d36:	93 81       	ldd	r25, Z+3	; 0x03
    1d38:	0a c0       	rjmp	.+20     	; 0x1d4e <vfprintf+0x4cc>
    1d3a:	f2 e0       	ldi	r31, 0x02	; 2
    1d3c:	af 0e       	add	r10, r31
    1d3e:	b1 1c       	adc	r11, r1
    1d40:	f2 01       	movw	r30, r4
    1d42:	60 81       	ld	r22, Z
    1d44:	71 81       	ldd	r23, Z+1	; 0x01
    1d46:	07 2e       	mov	r0, r23
    1d48:	00 0c       	add	r0, r0
    1d4a:	88 0b       	sbc	r24, r24
    1d4c:	99 0b       	sbc	r25, r25
    1d4e:	2f 76       	andi	r18, 0x6F	; 111
    1d50:	32 2e       	mov	r3, r18
    1d52:	97 ff       	sbrs	r25, 7
    1d54:	09 c0       	rjmp	.+18     	; 0x1d68 <vfprintf+0x4e6>
    1d56:	90 95       	com	r25
    1d58:	80 95       	com	r24
    1d5a:	70 95       	com	r23
    1d5c:	61 95       	neg	r22
    1d5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1d60:	8f 4f       	sbci	r24, 0xFF	; 255
    1d62:	9f 4f       	sbci	r25, 0xFF	; 255
    1d64:	20 68       	ori	r18, 0x80	; 128
    1d66:	32 2e       	mov	r3, r18
    1d68:	2a e0       	ldi	r18, 0x0A	; 10
    1d6a:	30 e0       	ldi	r19, 0x00	; 0
    1d6c:	a3 01       	movw	r20, r6
    1d6e:	0e 94 e7 11 	call	0x23ce	; 0x23ce <__ultoa_invert>
    1d72:	e8 2e       	mov	r14, r24
    1d74:	e6 18       	sub	r14, r6
    1d76:	3f c0       	rjmp	.+126    	; 0x1df6 <vfprintf+0x574>
    1d78:	02 2f       	mov	r16, r18
    1d7a:	85 37       	cpi	r24, 0x75	; 117
    1d7c:	21 f4       	brne	.+8      	; 0x1d86 <vfprintf+0x504>
    1d7e:	0f 7e       	andi	r16, 0xEF	; 239
    1d80:	2a e0       	ldi	r18, 0x0A	; 10
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	1d c0       	rjmp	.+58     	; 0x1dc0 <vfprintf+0x53e>
    1d86:	09 7f       	andi	r16, 0xF9	; 249
    1d88:	8f 36       	cpi	r24, 0x6F	; 111
    1d8a:	91 f0       	breq	.+36     	; 0x1db0 <vfprintf+0x52e>
    1d8c:	18 f4       	brcc	.+6      	; 0x1d94 <vfprintf+0x512>
    1d8e:	88 35       	cpi	r24, 0x58	; 88
    1d90:	59 f0       	breq	.+22     	; 0x1da8 <vfprintf+0x526>
    1d92:	c5 c0       	rjmp	.+394    	; 0x1f1e <vfprintf+0x69c>
    1d94:	80 37       	cpi	r24, 0x70	; 112
    1d96:	19 f0       	breq	.+6      	; 0x1d9e <vfprintf+0x51c>
    1d98:	88 37       	cpi	r24, 0x78	; 120
    1d9a:	11 f0       	breq	.+4      	; 0x1da0 <vfprintf+0x51e>
    1d9c:	c0 c0       	rjmp	.+384    	; 0x1f1e <vfprintf+0x69c>
    1d9e:	00 61       	ori	r16, 0x10	; 16
    1da0:	04 ff       	sbrs	r16, 4
    1da2:	09 c0       	rjmp	.+18     	; 0x1db6 <vfprintf+0x534>
    1da4:	04 60       	ori	r16, 0x04	; 4
    1da6:	07 c0       	rjmp	.+14     	; 0x1db6 <vfprintf+0x534>
    1da8:	24 ff       	sbrs	r18, 4
    1daa:	08 c0       	rjmp	.+16     	; 0x1dbc <vfprintf+0x53a>
    1dac:	06 60       	ori	r16, 0x06	; 6
    1dae:	06 c0       	rjmp	.+12     	; 0x1dbc <vfprintf+0x53a>
    1db0:	28 e0       	ldi	r18, 0x08	; 8
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	05 c0       	rjmp	.+10     	; 0x1dc0 <vfprintf+0x53e>
    1db6:	20 e1       	ldi	r18, 0x10	; 16
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	02 c0       	rjmp	.+4      	; 0x1dc0 <vfprintf+0x53e>
    1dbc:	20 e1       	ldi	r18, 0x10	; 16
    1dbe:	32 e0       	ldi	r19, 0x02	; 2
    1dc0:	52 01       	movw	r10, r4
    1dc2:	07 ff       	sbrs	r16, 7
    1dc4:	09 c0       	rjmp	.+18     	; 0x1dd8 <vfprintf+0x556>
    1dc6:	f4 e0       	ldi	r31, 0x04	; 4
    1dc8:	af 0e       	add	r10, r31
    1dca:	b1 1c       	adc	r11, r1
    1dcc:	f2 01       	movw	r30, r4
    1dce:	60 81       	ld	r22, Z
    1dd0:	71 81       	ldd	r23, Z+1	; 0x01
    1dd2:	82 81       	ldd	r24, Z+2	; 0x02
    1dd4:	93 81       	ldd	r25, Z+3	; 0x03
    1dd6:	08 c0       	rjmp	.+16     	; 0x1de8 <vfprintf+0x566>
    1dd8:	f2 e0       	ldi	r31, 0x02	; 2
    1dda:	af 0e       	add	r10, r31
    1ddc:	b1 1c       	adc	r11, r1
    1dde:	f2 01       	movw	r30, r4
    1de0:	60 81       	ld	r22, Z
    1de2:	71 81       	ldd	r23, Z+1	; 0x01
    1de4:	80 e0       	ldi	r24, 0x00	; 0
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	a3 01       	movw	r20, r6
    1dea:	0e 94 e7 11 	call	0x23ce	; 0x23ce <__ultoa_invert>
    1dee:	e8 2e       	mov	r14, r24
    1df0:	e6 18       	sub	r14, r6
    1df2:	0f 77       	andi	r16, 0x7F	; 127
    1df4:	30 2e       	mov	r3, r16
    1df6:	36 fe       	sbrs	r3, 6
    1df8:	0b c0       	rjmp	.+22     	; 0x1e10 <vfprintf+0x58e>
    1dfa:	33 2d       	mov	r19, r3
    1dfc:	3e 7f       	andi	r19, 0xFE	; 254
    1dfe:	e1 16       	cp	r14, r17
    1e00:	50 f4       	brcc	.+20     	; 0x1e16 <vfprintf+0x594>
    1e02:	34 fe       	sbrs	r3, 4
    1e04:	0a c0       	rjmp	.+20     	; 0x1e1a <vfprintf+0x598>
    1e06:	32 fc       	sbrc	r3, 2
    1e08:	08 c0       	rjmp	.+16     	; 0x1e1a <vfprintf+0x598>
    1e0a:	33 2d       	mov	r19, r3
    1e0c:	3e 7e       	andi	r19, 0xEE	; 238
    1e0e:	05 c0       	rjmp	.+10     	; 0x1e1a <vfprintf+0x598>
    1e10:	0e 2d       	mov	r16, r14
    1e12:	33 2d       	mov	r19, r3
    1e14:	03 c0       	rjmp	.+6      	; 0x1e1c <vfprintf+0x59a>
    1e16:	0e 2d       	mov	r16, r14
    1e18:	01 c0       	rjmp	.+2      	; 0x1e1c <vfprintf+0x59a>
    1e1a:	01 2f       	mov	r16, r17
    1e1c:	34 ff       	sbrs	r19, 4
    1e1e:	0c c0       	rjmp	.+24     	; 0x1e38 <vfprintf+0x5b6>
    1e20:	fe 01       	movw	r30, r28
    1e22:	ee 0d       	add	r30, r14
    1e24:	f1 1d       	adc	r31, r1
    1e26:	80 81       	ld	r24, Z
    1e28:	80 33       	cpi	r24, 0x30	; 48
    1e2a:	11 f4       	brne	.+4      	; 0x1e30 <vfprintf+0x5ae>
    1e2c:	39 7e       	andi	r19, 0xE9	; 233
    1e2e:	08 c0       	rjmp	.+16     	; 0x1e40 <vfprintf+0x5be>
    1e30:	32 ff       	sbrs	r19, 2
    1e32:	05 c0       	rjmp	.+10     	; 0x1e3e <vfprintf+0x5bc>
    1e34:	0e 5f       	subi	r16, 0xFE	; 254
    1e36:	04 c0       	rjmp	.+8      	; 0x1e40 <vfprintf+0x5be>
    1e38:	83 2f       	mov	r24, r19
    1e3a:	86 78       	andi	r24, 0x86	; 134
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <vfprintf+0x5be>
    1e3e:	0f 5f       	subi	r16, 0xFF	; 255
    1e40:	33 fd       	sbrc	r19, 3
    1e42:	13 c0       	rjmp	.+38     	; 0x1e6a <vfprintf+0x5e8>
    1e44:	30 ff       	sbrs	r19, 0
    1e46:	06 c0       	rjmp	.+12     	; 0x1e54 <vfprintf+0x5d2>
    1e48:	1e 2d       	mov	r17, r14
    1e4a:	0f 15       	cp	r16, r15
    1e4c:	18 f4       	brcc	.+6      	; 0x1e54 <vfprintf+0x5d2>
    1e4e:	1f 0d       	add	r17, r15
    1e50:	10 1b       	sub	r17, r16
    1e52:	0f 2d       	mov	r16, r15
    1e54:	0f 15       	cp	r16, r15
    1e56:	68 f4       	brcc	.+26     	; 0x1e72 <vfprintf+0x5f0>
    1e58:	b6 01       	movw	r22, r12
    1e5a:	80 e2       	ldi	r24, 0x20	; 32
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	3b 8b       	std	Y+19, r19	; 0x13
    1e60:	0e 94 69 11 	call	0x22d2	; 0x22d2 <fputc>
    1e64:	0f 5f       	subi	r16, 0xFF	; 255
    1e66:	3b 89       	ldd	r19, Y+19	; 0x13
    1e68:	f5 cf       	rjmp	.-22     	; 0x1e54 <vfprintf+0x5d2>
    1e6a:	0f 15       	cp	r16, r15
    1e6c:	10 f4       	brcc	.+4      	; 0x1e72 <vfprintf+0x5f0>
    1e6e:	f0 1a       	sub	r15, r16
    1e70:	01 c0       	rjmp	.+2      	; 0x1e74 <vfprintf+0x5f2>
    1e72:	f1 2c       	mov	r15, r1
    1e74:	34 ff       	sbrs	r19, 4
    1e76:	12 c0       	rjmp	.+36     	; 0x1e9c <vfprintf+0x61a>
    1e78:	b6 01       	movw	r22, r12
    1e7a:	80 e3       	ldi	r24, 0x30	; 48
    1e7c:	90 e0       	ldi	r25, 0x00	; 0
    1e7e:	3b 8b       	std	Y+19, r19	; 0x13
    1e80:	0e 94 69 11 	call	0x22d2	; 0x22d2 <fputc>
    1e84:	3b 89       	ldd	r19, Y+19	; 0x13
    1e86:	32 ff       	sbrs	r19, 2
    1e88:	17 c0       	rjmp	.+46     	; 0x1eb8 <vfprintf+0x636>
    1e8a:	31 fd       	sbrc	r19, 1
    1e8c:	03 c0       	rjmp	.+6      	; 0x1e94 <vfprintf+0x612>
    1e8e:	88 e7       	ldi	r24, 0x78	; 120
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	02 c0       	rjmp	.+4      	; 0x1e98 <vfprintf+0x616>
    1e94:	88 e5       	ldi	r24, 0x58	; 88
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	b6 01       	movw	r22, r12
    1e9a:	0c c0       	rjmp	.+24     	; 0x1eb4 <vfprintf+0x632>
    1e9c:	83 2f       	mov	r24, r19
    1e9e:	86 78       	andi	r24, 0x86	; 134
    1ea0:	59 f0       	breq	.+22     	; 0x1eb8 <vfprintf+0x636>
    1ea2:	31 ff       	sbrs	r19, 1
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <vfprintf+0x628>
    1ea6:	8b e2       	ldi	r24, 0x2B	; 43
    1ea8:	01 c0       	rjmp	.+2      	; 0x1eac <vfprintf+0x62a>
    1eaa:	80 e2       	ldi	r24, 0x20	; 32
    1eac:	37 fd       	sbrc	r19, 7
    1eae:	8d e2       	ldi	r24, 0x2D	; 45
    1eb0:	b6 01       	movw	r22, r12
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	0e 94 69 11 	call	0x22d2	; 0x22d2 <fputc>
    1eb8:	e1 16       	cp	r14, r17
    1eba:	38 f4       	brcc	.+14     	; 0x1eca <vfprintf+0x648>
    1ebc:	b6 01       	movw	r22, r12
    1ebe:	80 e3       	ldi	r24, 0x30	; 48
    1ec0:	90 e0       	ldi	r25, 0x00	; 0
    1ec2:	0e 94 69 11 	call	0x22d2	; 0x22d2 <fputc>
    1ec6:	11 50       	subi	r17, 0x01	; 1
    1ec8:	f7 cf       	rjmp	.-18     	; 0x1eb8 <vfprintf+0x636>
    1eca:	ea 94       	dec	r14
    1ecc:	f3 01       	movw	r30, r6
    1ece:	ee 0d       	add	r30, r14
    1ed0:	f1 1d       	adc	r31, r1
    1ed2:	80 81       	ld	r24, Z
    1ed4:	b6 01       	movw	r22, r12
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	0e 94 69 11 	call	0x22d2	; 0x22d2 <fputc>
    1edc:	e1 10       	cpse	r14, r1
    1ede:	f5 cf       	rjmp	.-22     	; 0x1eca <vfprintf+0x648>
    1ee0:	14 c0       	rjmp	.+40     	; 0x1f0a <vfprintf+0x688>
    1ee2:	f4 e0       	ldi	r31, 0x04	; 4
    1ee4:	ff 15       	cp	r31, r15
    1ee6:	58 f5       	brcc	.+86     	; 0x1f3e <vfprintf+0x6bc>
    1ee8:	84 e0       	ldi	r24, 0x04	; 4
    1eea:	f8 1a       	sub	r15, r24
    1eec:	33 fe       	sbrs	r3, 3
    1eee:	1e c0       	rjmp	.+60     	; 0x1f2c <vfprintf+0x6aa>
    1ef0:	21 10       	cpse	r2, r1
    1ef2:	26 c0       	rjmp	.+76     	; 0x1f40 <vfprintf+0x6be>
    1ef4:	03 ff       	sbrs	r16, 3
    1ef6:	2a c0       	rjmp	.+84     	; 0x1f4c <vfprintf+0x6ca>
    1ef8:	04 e3       	ldi	r16, 0x34	; 52
    1efa:	11 e0       	ldi	r17, 0x01	; 1
    1efc:	f3 2d       	mov	r31, r3
    1efe:	f0 71       	andi	r31, 0x10	; 16
    1f00:	3f 2e       	mov	r3, r31
    1f02:	f8 01       	movw	r30, r16
    1f04:	84 91       	lpm	r24, Z
    1f06:	81 11       	cpse	r24, r1
    1f08:	24 c0       	rjmp	.+72     	; 0x1f52 <vfprintf+0x6d0>
    1f0a:	ff 20       	and	r15, r15
    1f0c:	09 f4       	brne	.+2      	; 0x1f10 <vfprintf+0x68e>
    1f0e:	e5 cc       	rjmp	.-1590   	; 0x18da <vfprintf+0x58>
    1f10:	b6 01       	movw	r22, r12
    1f12:	80 e2       	ldi	r24, 0x20	; 32
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	0e 94 69 11 	call	0x22d2	; 0x22d2 <fputc>
    1f1a:	fa 94       	dec	r15
    1f1c:	f6 cf       	rjmp	.-20     	; 0x1f0a <vfprintf+0x688>
    1f1e:	f6 01       	movw	r30, r12
    1f20:	86 81       	ldd	r24, Z+6	; 0x06
    1f22:	97 81       	ldd	r25, Z+7	; 0x07
    1f24:	26 c0       	rjmp	.+76     	; 0x1f72 <vfprintf+0x6f0>
    1f26:	8f ef       	ldi	r24, 0xFF	; 255
    1f28:	9f ef       	ldi	r25, 0xFF	; 255
    1f2a:	23 c0       	rjmp	.+70     	; 0x1f72 <vfprintf+0x6f0>
    1f2c:	b6 01       	movw	r22, r12
    1f2e:	80 e2       	ldi	r24, 0x20	; 32
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	0e 94 69 11 	call	0x22d2	; 0x22d2 <fputc>
    1f36:	fa 94       	dec	r15
    1f38:	f1 10       	cpse	r15, r1
    1f3a:	f8 cf       	rjmp	.-16     	; 0x1f2c <vfprintf+0x6aa>
    1f3c:	d9 cf       	rjmp	.-78     	; 0x1ef0 <vfprintf+0x66e>
    1f3e:	f1 2c       	mov	r15, r1
    1f40:	b6 01       	movw	r22, r12
    1f42:	82 2d       	mov	r24, r2
    1f44:	90 e0       	ldi	r25, 0x00	; 0
    1f46:	0e 94 69 11 	call	0x22d2	; 0x22d2 <fputc>
    1f4a:	d4 cf       	rjmp	.-88     	; 0x1ef4 <vfprintf+0x672>
    1f4c:	08 e3       	ldi	r16, 0x38	; 56
    1f4e:	11 e0       	ldi	r17, 0x01	; 1
    1f50:	d5 cf       	rjmp	.-86     	; 0x1efc <vfprintf+0x67a>
    1f52:	31 10       	cpse	r3, r1
    1f54:	80 52       	subi	r24, 0x20	; 32
    1f56:	b6 01       	movw	r22, r12
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	0e 94 69 11 	call	0x22d2	; 0x22d2 <fputc>
    1f5e:	0f 5f       	subi	r16, 0xFF	; 255
    1f60:	1f 4f       	sbci	r17, 0xFF	; 255
    1f62:	cf cf       	rjmp	.-98     	; 0x1f02 <vfprintf+0x680>
    1f64:	23 e0       	ldi	r18, 0x03	; 3
    1f66:	2f 15       	cp	r18, r15
    1f68:	10 f4       	brcc	.+4      	; 0x1f6e <vfprintf+0x6ec>
    1f6a:	83 e0       	ldi	r24, 0x03	; 3
    1f6c:	be cf       	rjmp	.-132    	; 0x1eea <vfprintf+0x668>
    1f6e:	f1 2c       	mov	r15, r1
    1f70:	c1 cf       	rjmp	.-126    	; 0x1ef4 <vfprintf+0x672>
    1f72:	63 96       	adiw	r28, 0x13	; 19
    1f74:	e2 e1       	ldi	r30, 0x12	; 18
    1f76:	0c 94 fb 0f 	jmp	0x1ff6	; 0x1ff6 <__epilogue_restores__>

00001f7a <__udivmodsi4>:
    1f7a:	a1 e2       	ldi	r26, 0x21	; 33
    1f7c:	1a 2e       	mov	r1, r26
    1f7e:	aa 1b       	sub	r26, r26
    1f80:	bb 1b       	sub	r27, r27
    1f82:	fd 01       	movw	r30, r26
    1f84:	0d c0       	rjmp	.+26     	; 0x1fa0 <__udivmodsi4_ep>

00001f86 <__udivmodsi4_loop>:
    1f86:	aa 1f       	adc	r26, r26
    1f88:	bb 1f       	adc	r27, r27
    1f8a:	ee 1f       	adc	r30, r30
    1f8c:	ff 1f       	adc	r31, r31
    1f8e:	a2 17       	cp	r26, r18
    1f90:	b3 07       	cpc	r27, r19
    1f92:	e4 07       	cpc	r30, r20
    1f94:	f5 07       	cpc	r31, r21
    1f96:	20 f0       	brcs	.+8      	; 0x1fa0 <__udivmodsi4_ep>
    1f98:	a2 1b       	sub	r26, r18
    1f9a:	b3 0b       	sbc	r27, r19
    1f9c:	e4 0b       	sbc	r30, r20
    1f9e:	f5 0b       	sbc	r31, r21

00001fa0 <__udivmodsi4_ep>:
    1fa0:	66 1f       	adc	r22, r22
    1fa2:	77 1f       	adc	r23, r23
    1fa4:	88 1f       	adc	r24, r24
    1fa6:	99 1f       	adc	r25, r25
    1fa8:	1a 94       	dec	r1
    1faa:	69 f7       	brne	.-38     	; 0x1f86 <__udivmodsi4_loop>
    1fac:	60 95       	com	r22
    1fae:	70 95       	com	r23
    1fb0:	80 95       	com	r24
    1fb2:	90 95       	com	r25
    1fb4:	9b 01       	movw	r18, r22
    1fb6:	ac 01       	movw	r20, r24
    1fb8:	bd 01       	movw	r22, r26
    1fba:	cf 01       	movw	r24, r30
    1fbc:	08 95       	ret

00001fbe <__prologue_saves__>:
    1fbe:	2f 92       	push	r2
    1fc0:	3f 92       	push	r3
    1fc2:	4f 92       	push	r4
    1fc4:	5f 92       	push	r5
    1fc6:	6f 92       	push	r6
    1fc8:	7f 92       	push	r7
    1fca:	8f 92       	push	r8
    1fcc:	9f 92       	push	r9
    1fce:	af 92       	push	r10
    1fd0:	bf 92       	push	r11
    1fd2:	cf 92       	push	r12
    1fd4:	df 92       	push	r13
    1fd6:	ef 92       	push	r14
    1fd8:	ff 92       	push	r15
    1fda:	0f 93       	push	r16
    1fdc:	1f 93       	push	r17
    1fde:	cf 93       	push	r28
    1fe0:	df 93       	push	r29
    1fe2:	cd b7       	in	r28, 0x3d	; 61
    1fe4:	de b7       	in	r29, 0x3e	; 62
    1fe6:	ca 1b       	sub	r28, r26
    1fe8:	db 0b       	sbc	r29, r27
    1fea:	0f b6       	in	r0, 0x3f	; 63
    1fec:	f8 94       	cli
    1fee:	de bf       	out	0x3e, r29	; 62
    1ff0:	0f be       	out	0x3f, r0	; 63
    1ff2:	cd bf       	out	0x3d, r28	; 61
    1ff4:	09 94       	ijmp

00001ff6 <__epilogue_restores__>:
    1ff6:	2a 88       	ldd	r2, Y+18	; 0x12
    1ff8:	39 88       	ldd	r3, Y+17	; 0x11
    1ffa:	48 88       	ldd	r4, Y+16	; 0x10
    1ffc:	5f 84       	ldd	r5, Y+15	; 0x0f
    1ffe:	6e 84       	ldd	r6, Y+14	; 0x0e
    2000:	7d 84       	ldd	r7, Y+13	; 0x0d
    2002:	8c 84       	ldd	r8, Y+12	; 0x0c
    2004:	9b 84       	ldd	r9, Y+11	; 0x0b
    2006:	aa 84       	ldd	r10, Y+10	; 0x0a
    2008:	b9 84       	ldd	r11, Y+9	; 0x09
    200a:	c8 84       	ldd	r12, Y+8	; 0x08
    200c:	df 80       	ldd	r13, Y+7	; 0x07
    200e:	ee 80       	ldd	r14, Y+6	; 0x06
    2010:	fd 80       	ldd	r15, Y+5	; 0x05
    2012:	0c 81       	ldd	r16, Y+4	; 0x04
    2014:	1b 81       	ldd	r17, Y+3	; 0x03
    2016:	aa 81       	ldd	r26, Y+2	; 0x02
    2018:	b9 81       	ldd	r27, Y+1	; 0x01
    201a:	ce 0f       	add	r28, r30
    201c:	d1 1d       	adc	r29, r1
    201e:	0f b6       	in	r0, 0x3f	; 63
    2020:	f8 94       	cli
    2022:	de bf       	out	0x3e, r29	; 62
    2024:	0f be       	out	0x3f, r0	; 63
    2026:	cd bf       	out	0x3d, r28	; 61
    2028:	ed 01       	movw	r28, r26
    202a:	08 95       	ret

0000202c <do_rand>:
    202c:	8f 92       	push	r8
    202e:	9f 92       	push	r9
    2030:	af 92       	push	r10
    2032:	bf 92       	push	r11
    2034:	cf 92       	push	r12
    2036:	df 92       	push	r13
    2038:	ef 92       	push	r14
    203a:	ff 92       	push	r15
    203c:	cf 93       	push	r28
    203e:	df 93       	push	r29
    2040:	ec 01       	movw	r28, r24
    2042:	68 81       	ld	r22, Y
    2044:	79 81       	ldd	r23, Y+1	; 0x01
    2046:	8a 81       	ldd	r24, Y+2	; 0x02
    2048:	9b 81       	ldd	r25, Y+3	; 0x03
    204a:	61 15       	cp	r22, r1
    204c:	71 05       	cpc	r23, r1
    204e:	81 05       	cpc	r24, r1
    2050:	91 05       	cpc	r25, r1
    2052:	21 f4       	brne	.+8      	; 0x205c <do_rand+0x30>
    2054:	64 e2       	ldi	r22, 0x24	; 36
    2056:	79 ed       	ldi	r23, 0xD9	; 217
    2058:	8b e5       	ldi	r24, 0x5B	; 91
    205a:	97 e0       	ldi	r25, 0x07	; 7
    205c:	2d e1       	ldi	r18, 0x1D	; 29
    205e:	33 ef       	ldi	r19, 0xF3	; 243
    2060:	41 e0       	ldi	r20, 0x01	; 1
    2062:	50 e0       	ldi	r21, 0x00	; 0
    2064:	0e 94 45 12 	call	0x248a	; 0x248a <__divmodsi4>
    2068:	49 01       	movw	r8, r18
    206a:	5a 01       	movw	r10, r20
    206c:	9b 01       	movw	r18, r22
    206e:	ac 01       	movw	r20, r24
    2070:	a7 ea       	ldi	r26, 0xA7	; 167
    2072:	b1 e4       	ldi	r27, 0x41	; 65
    2074:	0e 94 64 12 	call	0x24c8	; 0x24c8 <__muluhisi3>
    2078:	6b 01       	movw	r12, r22
    207a:	7c 01       	movw	r14, r24
    207c:	ac ee       	ldi	r26, 0xEC	; 236
    207e:	b4 ef       	ldi	r27, 0xF4	; 244
    2080:	a5 01       	movw	r20, r10
    2082:	94 01       	movw	r18, r8
    2084:	0e 94 72 12 	call	0x24e4	; 0x24e4 <__mulohisi3>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	8c 0d       	add	r24, r12
    208e:	9d 1d       	adc	r25, r13
    2090:	ae 1d       	adc	r26, r14
    2092:	bf 1d       	adc	r27, r15
    2094:	b7 ff       	sbrs	r27, 7
    2096:	03 c0       	rjmp	.+6      	; 0x209e <do_rand+0x72>
    2098:	01 97       	sbiw	r24, 0x01	; 1
    209a:	a1 09       	sbc	r26, r1
    209c:	b0 48       	sbci	r27, 0x80	; 128
    209e:	88 83       	st	Y, r24
    20a0:	99 83       	std	Y+1, r25	; 0x01
    20a2:	aa 83       	std	Y+2, r26	; 0x02
    20a4:	bb 83       	std	Y+3, r27	; 0x03
    20a6:	9f 77       	andi	r25, 0x7F	; 127
    20a8:	df 91       	pop	r29
    20aa:	cf 91       	pop	r28
    20ac:	ff 90       	pop	r15
    20ae:	ef 90       	pop	r14
    20b0:	df 90       	pop	r13
    20b2:	cf 90       	pop	r12
    20b4:	bf 90       	pop	r11
    20b6:	af 90       	pop	r10
    20b8:	9f 90       	pop	r9
    20ba:	8f 90       	pop	r8
    20bc:	08 95       	ret

000020be <rand_r>:
    20be:	0e 94 16 10 	call	0x202c	; 0x202c <do_rand>
    20c2:	08 95       	ret

000020c4 <rand>:
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	92 e0       	ldi	r25, 0x02	; 2
    20c8:	0e 94 16 10 	call	0x202c	; 0x202c <do_rand>
    20cc:	08 95       	ret

000020ce <srand>:
    20ce:	a0 e0       	ldi	r26, 0x00	; 0
    20d0:	b0 e0       	ldi	r27, 0x00	; 0
    20d2:	80 93 00 02 	sts	0x0200, r24
    20d6:	90 93 01 02 	sts	0x0201, r25
    20da:	a0 93 02 02 	sts	0x0202, r26
    20de:	b0 93 03 02 	sts	0x0203, r27
    20e2:	08 95       	ret

000020e4 <__ftoa_engine>:
    20e4:	28 30       	cpi	r18, 0x08	; 8
    20e6:	08 f0       	brcs	.+2      	; 0x20ea <__ftoa_engine+0x6>
    20e8:	27 e0       	ldi	r18, 0x07	; 7
    20ea:	33 27       	eor	r19, r19
    20ec:	da 01       	movw	r26, r20
    20ee:	99 0f       	add	r25, r25
    20f0:	31 1d       	adc	r19, r1
    20f2:	87 fd       	sbrc	r24, 7
    20f4:	91 60       	ori	r25, 0x01	; 1
    20f6:	00 96       	adiw	r24, 0x00	; 0
    20f8:	61 05       	cpc	r22, r1
    20fa:	71 05       	cpc	r23, r1
    20fc:	39 f4       	brne	.+14     	; 0x210c <__ftoa_engine+0x28>
    20fe:	32 60       	ori	r19, 0x02	; 2
    2100:	2e 5f       	subi	r18, 0xFE	; 254
    2102:	3d 93       	st	X+, r19
    2104:	30 e3       	ldi	r19, 0x30	; 48
    2106:	2a 95       	dec	r18
    2108:	e1 f7       	brne	.-8      	; 0x2102 <__ftoa_engine+0x1e>
    210a:	08 95       	ret
    210c:	9f 3f       	cpi	r25, 0xFF	; 255
    210e:	30 f0       	brcs	.+12     	; 0x211c <__ftoa_engine+0x38>
    2110:	80 38       	cpi	r24, 0x80	; 128
    2112:	71 05       	cpc	r23, r1
    2114:	61 05       	cpc	r22, r1
    2116:	09 f0       	breq	.+2      	; 0x211a <__ftoa_engine+0x36>
    2118:	3c 5f       	subi	r19, 0xFC	; 252
    211a:	3c 5f       	subi	r19, 0xFC	; 252
    211c:	3d 93       	st	X+, r19
    211e:	91 30       	cpi	r25, 0x01	; 1
    2120:	08 f0       	brcs	.+2      	; 0x2124 <__ftoa_engine+0x40>
    2122:	80 68       	ori	r24, 0x80	; 128
    2124:	91 1d       	adc	r25, r1
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	1f 93       	push	r17
    212c:	0f 93       	push	r16
    212e:	ff 92       	push	r15
    2130:	ef 92       	push	r14
    2132:	19 2f       	mov	r17, r25
    2134:	98 7f       	andi	r25, 0xF8	; 248
    2136:	96 95       	lsr	r25
    2138:	e9 2f       	mov	r30, r25
    213a:	96 95       	lsr	r25
    213c:	96 95       	lsr	r25
    213e:	e9 0f       	add	r30, r25
    2140:	ff 27       	eor	r31, r31
    2142:	ea 56       	subi	r30, 0x6A	; 106
    2144:	fe 4f       	sbci	r31, 0xFE	; 254
    2146:	99 27       	eor	r25, r25
    2148:	33 27       	eor	r19, r19
    214a:	ee 24       	eor	r14, r14
    214c:	ff 24       	eor	r15, r15
    214e:	a7 01       	movw	r20, r14
    2150:	e7 01       	movw	r28, r14
    2152:	05 90       	lpm	r0, Z+
    2154:	08 94       	sec
    2156:	07 94       	ror	r0
    2158:	28 f4       	brcc	.+10     	; 0x2164 <__ftoa_engine+0x80>
    215a:	36 0f       	add	r19, r22
    215c:	e7 1e       	adc	r14, r23
    215e:	f8 1e       	adc	r15, r24
    2160:	49 1f       	adc	r20, r25
    2162:	51 1d       	adc	r21, r1
    2164:	66 0f       	add	r22, r22
    2166:	77 1f       	adc	r23, r23
    2168:	88 1f       	adc	r24, r24
    216a:	99 1f       	adc	r25, r25
    216c:	06 94       	lsr	r0
    216e:	a1 f7       	brne	.-24     	; 0x2158 <__ftoa_engine+0x74>
    2170:	05 90       	lpm	r0, Z+
    2172:	07 94       	ror	r0
    2174:	28 f4       	brcc	.+10     	; 0x2180 <__ftoa_engine+0x9c>
    2176:	e7 0e       	add	r14, r23
    2178:	f8 1e       	adc	r15, r24
    217a:	49 1f       	adc	r20, r25
    217c:	56 1f       	adc	r21, r22
    217e:	c1 1d       	adc	r28, r1
    2180:	77 0f       	add	r23, r23
    2182:	88 1f       	adc	r24, r24
    2184:	99 1f       	adc	r25, r25
    2186:	66 1f       	adc	r22, r22
    2188:	06 94       	lsr	r0
    218a:	a1 f7       	brne	.-24     	; 0x2174 <__ftoa_engine+0x90>
    218c:	05 90       	lpm	r0, Z+
    218e:	07 94       	ror	r0
    2190:	28 f4       	brcc	.+10     	; 0x219c <__ftoa_engine+0xb8>
    2192:	f8 0e       	add	r15, r24
    2194:	49 1f       	adc	r20, r25
    2196:	56 1f       	adc	r21, r22
    2198:	c7 1f       	adc	r28, r23
    219a:	d1 1d       	adc	r29, r1
    219c:	88 0f       	add	r24, r24
    219e:	99 1f       	adc	r25, r25
    21a0:	66 1f       	adc	r22, r22
    21a2:	77 1f       	adc	r23, r23
    21a4:	06 94       	lsr	r0
    21a6:	a1 f7       	brne	.-24     	; 0x2190 <__ftoa_engine+0xac>
    21a8:	05 90       	lpm	r0, Z+
    21aa:	07 94       	ror	r0
    21ac:	20 f4       	brcc	.+8      	; 0x21b6 <__ftoa_engine+0xd2>
    21ae:	49 0f       	add	r20, r25
    21b0:	56 1f       	adc	r21, r22
    21b2:	c7 1f       	adc	r28, r23
    21b4:	d8 1f       	adc	r29, r24
    21b6:	99 0f       	add	r25, r25
    21b8:	66 1f       	adc	r22, r22
    21ba:	77 1f       	adc	r23, r23
    21bc:	88 1f       	adc	r24, r24
    21be:	06 94       	lsr	r0
    21c0:	a9 f7       	brne	.-22     	; 0x21ac <__ftoa_engine+0xc8>
    21c2:	84 91       	lpm	r24, Z
    21c4:	10 95       	com	r17
    21c6:	17 70       	andi	r17, 0x07	; 7
    21c8:	41 f0       	breq	.+16     	; 0x21da <__ftoa_engine+0xf6>
    21ca:	d6 95       	lsr	r29
    21cc:	c7 95       	ror	r28
    21ce:	57 95       	ror	r21
    21d0:	47 95       	ror	r20
    21d2:	f7 94       	ror	r15
    21d4:	e7 94       	ror	r14
    21d6:	1a 95       	dec	r17
    21d8:	c1 f7       	brne	.-16     	; 0x21ca <__ftoa_engine+0xe6>
    21da:	ec e3       	ldi	r30, 0x3C	; 60
    21dc:	f1 e0       	ldi	r31, 0x01	; 1
    21de:	68 94       	set
    21e0:	15 90       	lpm	r1, Z+
    21e2:	15 91       	lpm	r17, Z+
    21e4:	35 91       	lpm	r19, Z+
    21e6:	65 91       	lpm	r22, Z+
    21e8:	95 91       	lpm	r25, Z+
    21ea:	05 90       	lpm	r0, Z+
    21ec:	7f e2       	ldi	r23, 0x2F	; 47
    21ee:	73 95       	inc	r23
    21f0:	e1 18       	sub	r14, r1
    21f2:	f1 0a       	sbc	r15, r17
    21f4:	43 0b       	sbc	r20, r19
    21f6:	56 0b       	sbc	r21, r22
    21f8:	c9 0b       	sbc	r28, r25
    21fa:	d0 09       	sbc	r29, r0
    21fc:	c0 f7       	brcc	.-16     	; 0x21ee <__ftoa_engine+0x10a>
    21fe:	e1 0c       	add	r14, r1
    2200:	f1 1e       	adc	r15, r17
    2202:	43 1f       	adc	r20, r19
    2204:	56 1f       	adc	r21, r22
    2206:	c9 1f       	adc	r28, r25
    2208:	d0 1d       	adc	r29, r0
    220a:	7e f4       	brtc	.+30     	; 0x222a <__stack+0x2b>
    220c:	70 33       	cpi	r23, 0x30	; 48
    220e:	11 f4       	brne	.+4      	; 0x2214 <__stack+0x15>
    2210:	8a 95       	dec	r24
    2212:	e6 cf       	rjmp	.-52     	; 0x21e0 <__ftoa_engine+0xfc>
    2214:	e8 94       	clt
    2216:	01 50       	subi	r16, 0x01	; 1
    2218:	30 f0       	brcs	.+12     	; 0x2226 <__stack+0x27>
    221a:	08 0f       	add	r16, r24
    221c:	0a f4       	brpl	.+2      	; 0x2220 <__stack+0x21>
    221e:	00 27       	eor	r16, r16
    2220:	02 17       	cp	r16, r18
    2222:	08 f4       	brcc	.+2      	; 0x2226 <__stack+0x27>
    2224:	20 2f       	mov	r18, r16
    2226:	23 95       	inc	r18
    2228:	02 2f       	mov	r16, r18
    222a:	7a 33       	cpi	r23, 0x3A	; 58
    222c:	28 f0       	brcs	.+10     	; 0x2238 <__stack+0x39>
    222e:	79 e3       	ldi	r23, 0x39	; 57
    2230:	7d 93       	st	X+, r23
    2232:	2a 95       	dec	r18
    2234:	e9 f7       	brne	.-6      	; 0x2230 <__stack+0x31>
    2236:	10 c0       	rjmp	.+32     	; 0x2258 <__stack+0x59>
    2238:	7d 93       	st	X+, r23
    223a:	2a 95       	dec	r18
    223c:	89 f6       	brne	.-94     	; 0x21e0 <__ftoa_engine+0xfc>
    223e:	06 94       	lsr	r0
    2240:	97 95       	ror	r25
    2242:	67 95       	ror	r22
    2244:	37 95       	ror	r19
    2246:	17 95       	ror	r17
    2248:	17 94       	ror	r1
    224a:	e1 18       	sub	r14, r1
    224c:	f1 0a       	sbc	r15, r17
    224e:	43 0b       	sbc	r20, r19
    2250:	56 0b       	sbc	r21, r22
    2252:	c9 0b       	sbc	r28, r25
    2254:	d0 09       	sbc	r29, r0
    2256:	98 f0       	brcs	.+38     	; 0x227e <__stack+0x7f>
    2258:	23 95       	inc	r18
    225a:	7e 91       	ld	r23, -X
    225c:	73 95       	inc	r23
    225e:	7a 33       	cpi	r23, 0x3A	; 58
    2260:	08 f0       	brcs	.+2      	; 0x2264 <__stack+0x65>
    2262:	70 e3       	ldi	r23, 0x30	; 48
    2264:	7c 93       	st	X, r23
    2266:	20 13       	cpse	r18, r16
    2268:	b8 f7       	brcc	.-18     	; 0x2258 <__stack+0x59>
    226a:	7e 91       	ld	r23, -X
    226c:	70 61       	ori	r23, 0x10	; 16
    226e:	7d 93       	st	X+, r23
    2270:	30 f0       	brcs	.+12     	; 0x227e <__stack+0x7f>
    2272:	83 95       	inc	r24
    2274:	71 e3       	ldi	r23, 0x31	; 49
    2276:	7d 93       	st	X+, r23
    2278:	70 e3       	ldi	r23, 0x30	; 48
    227a:	2a 95       	dec	r18
    227c:	e1 f7       	brne	.-8      	; 0x2276 <__stack+0x77>
    227e:	11 24       	eor	r1, r1
    2280:	ef 90       	pop	r14
    2282:	ff 90       	pop	r15
    2284:	0f 91       	pop	r16
    2286:	1f 91       	pop	r17
    2288:	cf 91       	pop	r28
    228a:	df 91       	pop	r29
    228c:	99 27       	eor	r25, r25
    228e:	87 fd       	sbrc	r24, 7
    2290:	90 95       	com	r25
    2292:	08 95       	ret

00002294 <strnlen_P>:
    2294:	fc 01       	movw	r30, r24
    2296:	05 90       	lpm	r0, Z+
    2298:	61 50       	subi	r22, 0x01	; 1
    229a:	70 40       	sbci	r23, 0x00	; 0
    229c:	01 10       	cpse	r0, r1
    229e:	d8 f7       	brcc	.-10     	; 0x2296 <strnlen_P+0x2>
    22a0:	80 95       	com	r24
    22a2:	90 95       	com	r25
    22a4:	8e 0f       	add	r24, r30
    22a6:	9f 1f       	adc	r25, r31
    22a8:	08 95       	ret

000022aa <memcpy>:
    22aa:	fb 01       	movw	r30, r22
    22ac:	dc 01       	movw	r26, r24
    22ae:	02 c0       	rjmp	.+4      	; 0x22b4 <memcpy+0xa>
    22b0:	01 90       	ld	r0, Z+
    22b2:	0d 92       	st	X+, r0
    22b4:	41 50       	subi	r20, 0x01	; 1
    22b6:	50 40       	sbci	r21, 0x00	; 0
    22b8:	d8 f7       	brcc	.-10     	; 0x22b0 <memcpy+0x6>
    22ba:	08 95       	ret

000022bc <strnlen>:
    22bc:	fc 01       	movw	r30, r24
    22be:	61 50       	subi	r22, 0x01	; 1
    22c0:	70 40       	sbci	r23, 0x00	; 0
    22c2:	01 90       	ld	r0, Z+
    22c4:	01 10       	cpse	r0, r1
    22c6:	d8 f7       	brcc	.-10     	; 0x22be <strnlen+0x2>
    22c8:	80 95       	com	r24
    22ca:	90 95       	com	r25
    22cc:	8e 0f       	add	r24, r30
    22ce:	9f 1f       	adc	r25, r31
    22d0:	08 95       	ret

000022d2 <fputc>:
    22d2:	0f 93       	push	r16
    22d4:	1f 93       	push	r17
    22d6:	cf 93       	push	r28
    22d8:	df 93       	push	r29
    22da:	fb 01       	movw	r30, r22
    22dc:	23 81       	ldd	r18, Z+3	; 0x03
    22de:	21 fd       	sbrc	r18, 1
    22e0:	03 c0       	rjmp	.+6      	; 0x22e8 <fputc+0x16>
    22e2:	8f ef       	ldi	r24, 0xFF	; 255
    22e4:	9f ef       	ldi	r25, 0xFF	; 255
    22e6:	28 c0       	rjmp	.+80     	; 0x2338 <fputc+0x66>
    22e8:	22 ff       	sbrs	r18, 2
    22ea:	16 c0       	rjmp	.+44     	; 0x2318 <fputc+0x46>
    22ec:	46 81       	ldd	r20, Z+6	; 0x06
    22ee:	57 81       	ldd	r21, Z+7	; 0x07
    22f0:	24 81       	ldd	r18, Z+4	; 0x04
    22f2:	35 81       	ldd	r19, Z+5	; 0x05
    22f4:	42 17       	cp	r20, r18
    22f6:	53 07       	cpc	r21, r19
    22f8:	44 f4       	brge	.+16     	; 0x230a <fputc+0x38>
    22fa:	a0 81       	ld	r26, Z
    22fc:	b1 81       	ldd	r27, Z+1	; 0x01
    22fe:	9d 01       	movw	r18, r26
    2300:	2f 5f       	subi	r18, 0xFF	; 255
    2302:	3f 4f       	sbci	r19, 0xFF	; 255
    2304:	31 83       	std	Z+1, r19	; 0x01
    2306:	20 83       	st	Z, r18
    2308:	8c 93       	st	X, r24
    230a:	26 81       	ldd	r18, Z+6	; 0x06
    230c:	37 81       	ldd	r19, Z+7	; 0x07
    230e:	2f 5f       	subi	r18, 0xFF	; 255
    2310:	3f 4f       	sbci	r19, 0xFF	; 255
    2312:	37 83       	std	Z+7, r19	; 0x07
    2314:	26 83       	std	Z+6, r18	; 0x06
    2316:	10 c0       	rjmp	.+32     	; 0x2338 <fputc+0x66>
    2318:	eb 01       	movw	r28, r22
    231a:	09 2f       	mov	r16, r25
    231c:	18 2f       	mov	r17, r24
    231e:	00 84       	ldd	r0, Z+8	; 0x08
    2320:	f1 85       	ldd	r31, Z+9	; 0x09
    2322:	e0 2d       	mov	r30, r0
    2324:	09 95       	icall
    2326:	89 2b       	or	r24, r25
    2328:	e1 f6       	brne	.-72     	; 0x22e2 <fputc+0x10>
    232a:	8e 81       	ldd	r24, Y+6	; 0x06
    232c:	9f 81       	ldd	r25, Y+7	; 0x07
    232e:	01 96       	adiw	r24, 0x01	; 1
    2330:	9f 83       	std	Y+7, r25	; 0x07
    2332:	8e 83       	std	Y+6, r24	; 0x06
    2334:	81 2f       	mov	r24, r17
    2336:	90 2f       	mov	r25, r16
    2338:	df 91       	pop	r29
    233a:	cf 91       	pop	r28
    233c:	1f 91       	pop	r17
    233e:	0f 91       	pop	r16
    2340:	08 95       	ret

00002342 <printf>:
    2342:	a0 e0       	ldi	r26, 0x00	; 0
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	e7 ea       	ldi	r30, 0xA7	; 167
    2348:	f1 e1       	ldi	r31, 0x11	; 17
    234a:	0c 94 ef 0f 	jmp	0x1fde	; 0x1fde <__prologue_saves__+0x20>
    234e:	ae 01       	movw	r20, r28
    2350:	4b 5f       	subi	r20, 0xFB	; 251
    2352:	5f 4f       	sbci	r21, 0xFF	; 255
    2354:	fa 01       	movw	r30, r20
    2356:	61 91       	ld	r22, Z+
    2358:	71 91       	ld	r23, Z+
    235a:	af 01       	movw	r20, r30
    235c:	80 91 3a 06 	lds	r24, 0x063A
    2360:	90 91 3b 06 	lds	r25, 0x063B
    2364:	0e 94 41 0c 	call	0x1882	; 0x1882 <vfprintf>
    2368:	e2 e0       	ldi	r30, 0x02	; 2
    236a:	0c 94 0b 10 	jmp	0x2016	; 0x2016 <__epilogue_restores__+0x20>

0000236e <puts>:
    236e:	0f 93       	push	r16
    2370:	1f 93       	push	r17
    2372:	cf 93       	push	r28
    2374:	df 93       	push	r29
    2376:	e0 91 3a 06 	lds	r30, 0x063A
    237a:	f0 91 3b 06 	lds	r31, 0x063B
    237e:	23 81       	ldd	r18, Z+3	; 0x03
    2380:	21 ff       	sbrs	r18, 1
    2382:	1b c0       	rjmp	.+54     	; 0x23ba <puts+0x4c>
    2384:	8c 01       	movw	r16, r24
    2386:	d0 e0       	ldi	r29, 0x00	; 0
    2388:	c0 e0       	ldi	r28, 0x00	; 0
    238a:	f8 01       	movw	r30, r16
    238c:	81 91       	ld	r24, Z+
    238e:	8f 01       	movw	r16, r30
    2390:	60 91 3a 06 	lds	r22, 0x063A
    2394:	70 91 3b 06 	lds	r23, 0x063B
    2398:	db 01       	movw	r26, r22
    239a:	18 96       	adiw	r26, 0x08	; 8
    239c:	ed 91       	ld	r30, X+
    239e:	fc 91       	ld	r31, X
    23a0:	19 97       	sbiw	r26, 0x09	; 9
    23a2:	88 23       	and	r24, r24
    23a4:	31 f0       	breq	.+12     	; 0x23b2 <puts+0x44>
    23a6:	09 95       	icall
    23a8:	89 2b       	or	r24, r25
    23aa:	79 f3       	breq	.-34     	; 0x238a <puts+0x1c>
    23ac:	df ef       	ldi	r29, 0xFF	; 255
    23ae:	cf ef       	ldi	r28, 0xFF	; 255
    23b0:	ec cf       	rjmp	.-40     	; 0x238a <puts+0x1c>
    23b2:	8a e0       	ldi	r24, 0x0A	; 10
    23b4:	09 95       	icall
    23b6:	89 2b       	or	r24, r25
    23b8:	19 f0       	breq	.+6      	; 0x23c0 <puts+0x52>
    23ba:	8f ef       	ldi	r24, 0xFF	; 255
    23bc:	9f ef       	ldi	r25, 0xFF	; 255
    23be:	02 c0       	rjmp	.+4      	; 0x23c4 <puts+0x56>
    23c0:	8d 2f       	mov	r24, r29
    23c2:	9c 2f       	mov	r25, r28
    23c4:	df 91       	pop	r29
    23c6:	cf 91       	pop	r28
    23c8:	1f 91       	pop	r17
    23ca:	0f 91       	pop	r16
    23cc:	08 95       	ret

000023ce <__ultoa_invert>:
    23ce:	fa 01       	movw	r30, r20
    23d0:	aa 27       	eor	r26, r26
    23d2:	28 30       	cpi	r18, 0x08	; 8
    23d4:	51 f1       	breq	.+84     	; 0x242a <__ultoa_invert+0x5c>
    23d6:	20 31       	cpi	r18, 0x10	; 16
    23d8:	81 f1       	breq	.+96     	; 0x243a <__ultoa_invert+0x6c>
    23da:	e8 94       	clt
    23dc:	6f 93       	push	r22
    23de:	6e 7f       	andi	r22, 0xFE	; 254
    23e0:	6e 5f       	subi	r22, 0xFE	; 254
    23e2:	7f 4f       	sbci	r23, 0xFF	; 255
    23e4:	8f 4f       	sbci	r24, 0xFF	; 255
    23e6:	9f 4f       	sbci	r25, 0xFF	; 255
    23e8:	af 4f       	sbci	r26, 0xFF	; 255
    23ea:	b1 e0       	ldi	r27, 0x01	; 1
    23ec:	3e d0       	rcall	.+124    	; 0x246a <__ultoa_invert+0x9c>
    23ee:	b4 e0       	ldi	r27, 0x04	; 4
    23f0:	3c d0       	rcall	.+120    	; 0x246a <__ultoa_invert+0x9c>
    23f2:	67 0f       	add	r22, r23
    23f4:	78 1f       	adc	r23, r24
    23f6:	89 1f       	adc	r24, r25
    23f8:	9a 1f       	adc	r25, r26
    23fa:	a1 1d       	adc	r26, r1
    23fc:	68 0f       	add	r22, r24
    23fe:	79 1f       	adc	r23, r25
    2400:	8a 1f       	adc	r24, r26
    2402:	91 1d       	adc	r25, r1
    2404:	a1 1d       	adc	r26, r1
    2406:	6a 0f       	add	r22, r26
    2408:	71 1d       	adc	r23, r1
    240a:	81 1d       	adc	r24, r1
    240c:	91 1d       	adc	r25, r1
    240e:	a1 1d       	adc	r26, r1
    2410:	20 d0       	rcall	.+64     	; 0x2452 <__ultoa_invert+0x84>
    2412:	09 f4       	brne	.+2      	; 0x2416 <__ultoa_invert+0x48>
    2414:	68 94       	set
    2416:	3f 91       	pop	r19
    2418:	2a e0       	ldi	r18, 0x0A	; 10
    241a:	26 9f       	mul	r18, r22
    241c:	11 24       	eor	r1, r1
    241e:	30 19       	sub	r19, r0
    2420:	30 5d       	subi	r19, 0xD0	; 208
    2422:	31 93       	st	Z+, r19
    2424:	de f6       	brtc	.-74     	; 0x23dc <__ultoa_invert+0xe>
    2426:	cf 01       	movw	r24, r30
    2428:	08 95       	ret
    242a:	46 2f       	mov	r20, r22
    242c:	47 70       	andi	r20, 0x07	; 7
    242e:	40 5d       	subi	r20, 0xD0	; 208
    2430:	41 93       	st	Z+, r20
    2432:	b3 e0       	ldi	r27, 0x03	; 3
    2434:	0f d0       	rcall	.+30     	; 0x2454 <__ultoa_invert+0x86>
    2436:	c9 f7       	brne	.-14     	; 0x242a <__ultoa_invert+0x5c>
    2438:	f6 cf       	rjmp	.-20     	; 0x2426 <__ultoa_invert+0x58>
    243a:	46 2f       	mov	r20, r22
    243c:	4f 70       	andi	r20, 0x0F	; 15
    243e:	40 5d       	subi	r20, 0xD0	; 208
    2440:	4a 33       	cpi	r20, 0x3A	; 58
    2442:	18 f0       	brcs	.+6      	; 0x244a <__ultoa_invert+0x7c>
    2444:	49 5d       	subi	r20, 0xD9	; 217
    2446:	31 fd       	sbrc	r19, 1
    2448:	40 52       	subi	r20, 0x20	; 32
    244a:	41 93       	st	Z+, r20
    244c:	02 d0       	rcall	.+4      	; 0x2452 <__ultoa_invert+0x84>
    244e:	a9 f7       	brne	.-22     	; 0x243a <__ultoa_invert+0x6c>
    2450:	ea cf       	rjmp	.-44     	; 0x2426 <__ultoa_invert+0x58>
    2452:	b4 e0       	ldi	r27, 0x04	; 4
    2454:	a6 95       	lsr	r26
    2456:	97 95       	ror	r25
    2458:	87 95       	ror	r24
    245a:	77 95       	ror	r23
    245c:	67 95       	ror	r22
    245e:	ba 95       	dec	r27
    2460:	c9 f7       	brne	.-14     	; 0x2454 <__ultoa_invert+0x86>
    2462:	00 97       	sbiw	r24, 0x00	; 0
    2464:	61 05       	cpc	r22, r1
    2466:	71 05       	cpc	r23, r1
    2468:	08 95       	ret
    246a:	9b 01       	movw	r18, r22
    246c:	ac 01       	movw	r20, r24
    246e:	0a 2e       	mov	r0, r26
    2470:	06 94       	lsr	r0
    2472:	57 95       	ror	r21
    2474:	47 95       	ror	r20
    2476:	37 95       	ror	r19
    2478:	27 95       	ror	r18
    247a:	ba 95       	dec	r27
    247c:	c9 f7       	brne	.-14     	; 0x2470 <__ultoa_invert+0xa2>
    247e:	62 0f       	add	r22, r18
    2480:	73 1f       	adc	r23, r19
    2482:	84 1f       	adc	r24, r20
    2484:	95 1f       	adc	r25, r21
    2486:	a0 1d       	adc	r26, r0
    2488:	08 95       	ret

0000248a <__divmodsi4>:
    248a:	05 2e       	mov	r0, r21
    248c:	97 fb       	bst	r25, 7
    248e:	1e f4       	brtc	.+6      	; 0x2496 <__divmodsi4+0xc>
    2490:	00 94       	com	r0
    2492:	0e 94 5c 12 	call	0x24b8	; 0x24b8 <__negsi2>
    2496:	57 fd       	sbrc	r21, 7
    2498:	07 d0       	rcall	.+14     	; 0x24a8 <__divmodsi4_neg2>
    249a:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <__udivmodsi4>
    249e:	07 fc       	sbrc	r0, 7
    24a0:	03 d0       	rcall	.+6      	; 0x24a8 <__divmodsi4_neg2>
    24a2:	4e f4       	brtc	.+18     	; 0x24b6 <__divmodsi4_exit>
    24a4:	0c 94 5c 12 	jmp	0x24b8	; 0x24b8 <__negsi2>

000024a8 <__divmodsi4_neg2>:
    24a8:	50 95       	com	r21
    24aa:	40 95       	com	r20
    24ac:	30 95       	com	r19
    24ae:	21 95       	neg	r18
    24b0:	3f 4f       	sbci	r19, 0xFF	; 255
    24b2:	4f 4f       	sbci	r20, 0xFF	; 255
    24b4:	5f 4f       	sbci	r21, 0xFF	; 255

000024b6 <__divmodsi4_exit>:
    24b6:	08 95       	ret

000024b8 <__negsi2>:
    24b8:	90 95       	com	r25
    24ba:	80 95       	com	r24
    24bc:	70 95       	com	r23
    24be:	61 95       	neg	r22
    24c0:	7f 4f       	sbci	r23, 0xFF	; 255
    24c2:	8f 4f       	sbci	r24, 0xFF	; 255
    24c4:	9f 4f       	sbci	r25, 0xFF	; 255
    24c6:	08 95       	ret

000024c8 <__muluhisi3>:
    24c8:	0e 94 77 12 	call	0x24ee	; 0x24ee <__umulhisi3>
    24cc:	a5 9f       	mul	r26, r21
    24ce:	90 0d       	add	r25, r0
    24d0:	b4 9f       	mul	r27, r20
    24d2:	90 0d       	add	r25, r0
    24d4:	a4 9f       	mul	r26, r20
    24d6:	80 0d       	add	r24, r0
    24d8:	91 1d       	adc	r25, r1
    24da:	11 24       	eor	r1, r1
    24dc:	08 95       	ret

000024de <__mulshisi3>:
    24de:	b7 ff       	sbrs	r27, 7
    24e0:	0c 94 64 12 	jmp	0x24c8	; 0x24c8 <__muluhisi3>

000024e4 <__mulohisi3>:
    24e4:	0e 94 64 12 	call	0x24c8	; 0x24c8 <__muluhisi3>
    24e8:	82 1b       	sub	r24, r18
    24ea:	93 0b       	sbc	r25, r19
    24ec:	08 95       	ret

000024ee <__umulhisi3>:
    24ee:	a2 9f       	mul	r26, r18
    24f0:	b0 01       	movw	r22, r0
    24f2:	b3 9f       	mul	r27, r19
    24f4:	c0 01       	movw	r24, r0
    24f6:	a3 9f       	mul	r26, r19
    24f8:	70 0d       	add	r23, r0
    24fa:	81 1d       	adc	r24, r1
    24fc:	11 24       	eor	r1, r1
    24fe:	91 1d       	adc	r25, r1
    2500:	b2 9f       	mul	r27, r18
    2502:	70 0d       	add	r23, r0
    2504:	81 1d       	adc	r24, r1
    2506:	11 24       	eor	r1, r1
    2508:	91 1d       	adc	r25, r1
    250a:	08 95       	ret

0000250c <_exit>:
    250c:	f8 94       	cli

0000250e <__stop_program>:
    250e:	ff cf       	rjmp	.-2      	; 0x250e <__stop_program>
