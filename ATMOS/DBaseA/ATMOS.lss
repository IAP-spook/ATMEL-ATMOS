
ATMOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000110  00800200  0000182a  000018be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000182a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000035b  00800310  00800310  000019ce  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000019ce  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000005b8  00000000  00000000  00001a2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00005c05  00000000  00000000  00001fe2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000225a  00000000  00000000  00007be7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001e8e  00000000  00000000  00009e41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000dd8  00000000  00000000  0000bcd0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000198b  00000000  00000000  0000caa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000034be  00000000  00000000  0000e433  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000005d0  00000000  00000000  000118f1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__ctors_end>
       4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      10:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      14:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      18:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      1c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      20:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      24:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      28:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      30:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      34:	0c 94 51 01 	jmp	0x2a2	; 0x2a2 <__vector_13>
      38:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      3c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      40:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      44:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      48:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      4c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      50:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      54:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      58:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      5c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      60:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      64:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      68:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      6c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      70:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      74:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      78:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      7c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      80:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      84:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      88:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      8c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      90:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      94:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      98:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      9c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a8:	0c 94 49 04 	jmp	0x892	; 0x892 <__vector_42>
      ac:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      bc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      cc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      dc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      ec:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      fc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     100:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     104:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     108:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     10c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     110:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     114:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     118:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     11c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     120:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     124:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     128:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     12c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     130:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>

00000134 <__trampolines_end>:
     134:	6e 61       	ori	r22, 0x1E	; 30
     136:	6e 00       	.word	0x006e	; ????

00000138 <__c.2159>:
     138:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     148:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     158:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     168:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     178:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     188:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     198:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     208:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     218:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     228:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000236 <__ctors_end>:
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	d1 e2       	ldi	r29, 0x21	; 33
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61

00000242 <__do_copy_data>:
     242:	13 e0       	ldi	r17, 0x03	; 3
     244:	a0 e0       	ldi	r26, 0x00	; 0
     246:	b2 e0       	ldi	r27, 0x02	; 2
     248:	ea e2       	ldi	r30, 0x2A	; 42
     24a:	f8 e1       	ldi	r31, 0x18	; 24
     24c:	02 c0       	rjmp	.+4      	; 0x252 <__do_copy_data+0x10>
     24e:	05 90       	lpm	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	a0 31       	cpi	r26, 0x10	; 16
     254:	b1 07       	cpc	r27, r17
     256:	d9 f7       	brne	.-10     	; 0x24e <__do_copy_data+0xc>

00000258 <__do_clear_bss>:
     258:	26 e0       	ldi	r18, 0x06	; 6
     25a:	a0 e1       	ldi	r26, 0x10	; 16
     25c:	b3 e0       	ldi	r27, 0x03	; 3
     25e:	01 c0       	rjmp	.+2      	; 0x262 <.do_clear_bss_start>

00000260 <.do_clear_bss_loop>:
     260:	1d 92       	st	X+, r1

00000262 <.do_clear_bss_start>:
     262:	ab 36       	cpi	r26, 0x6B	; 107
     264:	b2 07       	cpc	r27, r18
     266:	e1 f7       	brne	.-8      	; 0x260 <.do_clear_bss_loop>
     268:	0e 94 8a 01 	call	0x314	; 0x314 <main>
     26c:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <_exit>

00000270 <__bad_interrupt>:
     270:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000274 <init_Ex3>:
/* Initialization Routine Example 3 : Timer 2 Async operation */
/* Clock for Timer 2 is taken from crystal connected to TOSC pins */
void init_Ex3(void)
{
	/* Select clock source as crystal on TOSCn pins */
	ASSR |= 1 << AS2;
     274:	e6 eb       	ldi	r30, 0xB6	; 182
     276:	f0 e0       	ldi	r31, 0x00	; 0
     278:	80 81       	ld	r24, Z
     27a:	80 62       	ori	r24, 0x20	; 32
     27c:	80 83       	st	Z, r24
	/* Clear Timer on compare match. Toggle OC2A on Compare Match */
	TCCR2A = (1<<COM2A0) | (1<<WGM21);
     27e:	82 e4       	ldi	r24, 0x42	; 66
     280:	80 93 b0 00 	sts	0x00B0, r24
	/* Timer Clock = 32768 Hz / 1024 */
	TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
     284:	87 e0       	ldi	r24, 0x07	; 7
     286:	80 93 b1 00 	sts	0x00B1, r24
	/* Set Output Compare Value to 32. Output pin will toggle every second */
	OCR2A  = 32;
     28a:	80 e2       	ldi	r24, 0x20	; 32
     28c:	80 93 b3 00 	sts	0x00B3, r24
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) 
     290:	80 81       	ld	r24, Z
     292:	8f 71       	andi	r24, 0x1F	; 31
     294:	e9 f7       	brne	.-6      	; 0x290 <init_Ex3+0x1c>
		| (1 << TCR2BUB) | (1<< TCN2UB))));
	/* Clear pending interrupts */
	TIFR2  = (1 << TOV2) | (1 << OCF2A) | (1 << OCF2B);
     296:	87 e0       	ldi	r24, 0x07	; 7
     298:	87 bb       	out	0x17, r24	; 23
	/* Enable Timer 2 Output Compare Match Interrupt */
	TIMSK2 = (1 << OCIE2A);
     29a:	82 e0       	ldi	r24, 0x02	; 2
     29c:	80 93 70 00 	sts	0x0070, r24
     2a0:	08 95       	ret

000002a2 <__vector_13>:
}

static int count = 0;

ISR(TIMER2_COMPA_vect)
{
     2a2:	1f 92       	push	r1
     2a4:	0f 92       	push	r0
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	0f 92       	push	r0
     2aa:	11 24       	eor	r1, r1
     2ac:	2f 93       	push	r18
     2ae:	3f 93       	push	r19
     2b0:	4f 93       	push	r20
     2b2:	5f 93       	push	r21
     2b4:	6f 93       	push	r22
     2b6:	7f 93       	push	r23
     2b8:	8f 93       	push	r24
     2ba:	9f 93       	push	r25
     2bc:	af 93       	push	r26
     2be:	bf 93       	push	r27
     2c0:	ef 93       	push	r30
     2c2:	ff 93       	push	r31
	count++;
     2c4:	80 91 10 03 	lds	r24, 0x0310
     2c8:	90 91 11 03 	lds	r25, 0x0311
     2cc:	01 96       	adiw	r24, 0x01	; 1
     2ce:	90 93 11 03 	sts	0x0311, r25
     2d2:	80 93 10 03 	sts	0x0310, r24
	/* Toggle a pin on timer overflow */
	printf("count = %d\n",count);
     2d6:	9f 93       	push	r25
     2d8:	8f 93       	push	r24
     2da:	8e e0       	ldi	r24, 0x0E	; 14
     2dc:	92 e0       	ldi	r25, 0x02	; 2
     2de:	9f 93       	push	r25
     2e0:	8f 93       	push	r24
     2e2:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <printf>
	foo();	
     2e6:	0e 94 1d 04 	call	0x83a	; 0x83a <foo>
     2ea:	0f 90       	pop	r0
     2ec:	0f 90       	pop	r0
     2ee:	0f 90       	pop	r0
     2f0:	0f 90       	pop	r0
}
     2f2:	ff 91       	pop	r31
     2f4:	ef 91       	pop	r30
     2f6:	bf 91       	pop	r27
     2f8:	af 91       	pop	r26
     2fa:	9f 91       	pop	r25
     2fc:	8f 91       	pop	r24
     2fe:	7f 91       	pop	r23
     300:	6f 91       	pop	r22
     302:	5f 91       	pop	r21
     304:	4f 91       	pop	r20
     306:	3f 91       	pop	r19
     308:	2f 91       	pop	r18
     30a:	0f 90       	pop	r0
     30c:	0f be       	out	0x3f, r0	; 63
     30e:	0f 90       	pop	r0
     310:	1f 90       	pop	r1
     312:	18 95       	reti

00000314 <main>:
  {
    //SYS_TaskHandler(); //Commented out until wireless hardware is tuned
    APP_TaskHandler();
  }
  */
	SYS_Init();
     314:	0e 94 e7 05 	call	0xbce	; 0xbce <SYS_Init>
	if(ref[j]==0) return 100;
	return j;
}

static void APP_Init(void){
	PWR_Init();
     318:	0e 94 0e 03 	call	0x61c	; 0x61c <PWR_Init>
	PWR_TurnOn5V();
     31c:	0e 94 12 03 	call	0x624	; 0x624 <PWR_TurnOn5V>
	USART0_Init(76800);
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	7c e2       	ldi	r23, 0x2C	; 44
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	90 e0       	ldi	r25, 0x00	; 0
     328:	0e 94 da 03 	call	0x7b4	; 0x7b4 <USART0_Init>
	DDRB |= 0b00010000;
     32c:	24 9a       	sbi	0x04, 4	; 4
	DDRE |= 0b00001000;
     32e:	6b 9a       	sbi	0x0d, 3	; 13
	PORTE|= 0b00001000;
     330:	73 9a       	sbi	0x0e, 3	; 14
	TWI_Init(10000);
     332:	60 e1       	ldi	r22, 0x10	; 16
     334:	77 e2       	ldi	r23, 0x27	; 39
     336:	80 e0       	ldi	r24, 0x00	; 0
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	0e 94 18 03 	call	0x630	; 0x630 <TWI_Init>
	ADC_Init();
     33e:	0e 94 02 03 	call	0x604	; 0x604 <ADC_Init>
	TGS2600_Init();
     342:	0e 94 fe 02 	call	0x5fc	; 0x5fc <TGS2600_Init>
	Si7020_init();
     346:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <Si7020_init>
	printf("BMP280 Status %i\n", BMP280_Init());
     34a:	0e 94 14 02 	call	0x428	; 0x428 <BMP280_Init>
     34e:	1f 92       	push	r1
     350:	8f 93       	push	r24
     352:	8a e1       	ldi	r24, 0x1A	; 26
     354:	92 e0       	ldi	r25, 0x02	; 2
     356:	9f 93       	push	r25
     358:	8f 93       	push	r24
     35a:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <printf>
	BMP280_SetOversampling(4);
     35e:	84 e0       	ldi	r24, 0x04	; 4
     360:	90 e0       	ldi	r25, 0x00	; 0
     362:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <BMP280_SetOversampling>
	SPI_SlaveInit();
     366:	0e 94 14 03 	call	0x628	; 0x628 <SPI_SlaveInit>
    APP_TaskHandler();
  }
  */
	SYS_Init();
	APP_Init();
	printf("init done!\n");
     36a:	8c e2       	ldi	r24, 0x2C	; 44
     36c:	92 e0       	ldi	r25, 0x02	; 2
     36e:	0e 94 88 0b 	call	0x1710	; 0x1710 <puts>
  	count = 0;
     372:	10 92 11 03 	sts	0x0311, r1
     376:	10 92 10 03 	sts	0x0310, r1
  	init_Ex3();
     37a:	0e 94 3a 01 	call	0x274	; 0x274 <init_Ex3>
	/* Enable global interrupt */
	sei();
     37e:	78 94       	sei
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	ff cf       	rjmp	.-2      	; 0x388 <main+0x74>

0000038a <BMP280_ReadBytes>:
  @brief Reads some bytes from the BMP280
  @param[in] *values pointer to an array to store the bytes, put the starting register in values[0]
  @param[in] length how many bytes to read
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadBytes(unsigned char *values, char length){
     38a:	1f 93       	push	r17
     38c:	cf 93       	push	r28
     38e:	df 93       	push	r29
     390:	ec 01       	movw	r28, r24
     392:	16 2f       	mov	r17, r22
	//printf("BMP280_ReadBytes");
	//printf("0x%1x",(unsigned)TWI_BeginWrite(BMP280_ADDR));
	TWI_BeginWrite(BMP280_ADDR);
     394:	86 e7       	ldi	r24, 0x76	; 118
     396:	0e 94 44 03 	call	0x688	; 0x688 <TWI_BeginWrite>
	//printf("0x%1x",(unsigned)TWI_WriteByte(values[0]));
	TWI_WriteByte(values[0]);//Write the register address
     39a:	88 81       	ld	r24, Y
     39c:	0e 94 36 03 	call	0x66c	; 0x66c <TWI_WriteByte>
	status = TWI_BeginRead(BMP280_ADDR); //Send a repeated start
     3a0:	86 e7       	ldi	r24, 0x76	; 118
     3a2:	0e 94 61 03 	call	0x6c2	; 0x6c2 <TWI_BeginRead>
     3a6:	80 93 12 03 	sts	0x0312, r24
	//printf("0x%1x",status);
	if (status == TWI_SLAR_ACK){
     3aa:	80 34       	cpi	r24, 0x40	; 64
     3ac:	81 f4       	brne	.+32     	; 0x3ce <BMP280_ReadBytes+0x44>
		if(((TWI_Read(&values[0],length,false)&TWSR_MASK) == TWI_REC_NACK) && (TWI_Stop() != 0)) return(1); //Receive bytes, send a STOP bit, and check for success
     3ae:	61 2f       	mov	r22, r17
     3b0:	70 e0       	ldi	r23, 0x00	; 0
     3b2:	40 e0       	ldi	r20, 0x00	; 0
     3b4:	ce 01       	movw	r24, r28
     3b6:	0e 94 9e 03 	call	0x73c	; 0x73c <TWI_Read>
     3ba:	88 7f       	andi	r24, 0xF8	; 248
     3bc:	88 35       	cpi	r24, 0x58	; 88
     3be:	49 f4       	brne	.+18     	; 0x3d2 <BMP280_ReadBytes+0x48>
     3c0:	0e 94 99 03 	call	0x732	; 0x732 <TWI_Stop>
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	81 11       	cpse	r24, r1
     3c8:	05 c0       	rjmp	.+10     	; 0x3d4 <BMP280_ReadBytes+0x4a>
     3ca:	90 e0       	ldi	r25, 0x00	; 0
     3cc:	03 c0       	rjmp	.+6      	; 0x3d4 <BMP280_ReadBytes+0x4a>
	}
	return(0);
     3ce:	90 e0       	ldi	r25, 0x00	; 0
     3d0:	01 c0       	rjmp	.+2      	; 0x3d4 <BMP280_ReadBytes+0x4a>
     3d2:	90 e0       	ldi	r25, 0x00	; 0
}
     3d4:	89 2f       	mov	r24, r25
     3d6:	df 91       	pop	r29
     3d8:	cf 91       	pop	r28
     3da:	1f 91       	pop	r17
     3dc:	08 95       	ret

000003de <BMP280_ReadInt>:
  @brief Reads an int from the BMP280
  @param[in] address The register address of the first byte of the uint
  @param[out] val* A pointer to a uint to store the received data to
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadInt(char address, int *val){
     3de:	0f 93       	push	r16
     3e0:	1f 93       	push	r17
     3e2:	cf 93       	push	r28
     3e4:	df 93       	push	r29
     3e6:	00 d0       	rcall	.+0      	; 0x3e8 <BMP280_ReadInt+0xa>
     3e8:	cd b7       	in	r28, 0x3d	; 61
     3ea:	de b7       	in	r29, 0x3e	; 62
     3ec:	8b 01       	movw	r16, r22
	//printf("\nBMP280_ReadInt");
	unsigned char data[2];	//char is 4 bits, 1 byte

	data[0] = address;
     3ee:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     3f0:	62 e0       	ldi	r22, 0x02	; 2
     3f2:	ce 01       	movw	r24, r28
     3f4:	01 96       	adiw	r24, 0x01	; 1
     3f6:	0e 94 c5 01 	call	0x38a	; 0x38a <BMP280_ReadBytes>
     3fa:	88 23       	and	r24, r24
     3fc:	59 f0       	breq	.+22     	; 0x414 <BMP280_ReadInt+0x36>
		*val = (((int)data[1]<<8)|(int)data[0]);
     3fe:	8a 81       	ldd	r24, Y+2	; 0x02
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	98 2f       	mov	r25, r24
     404:	88 27       	eor	r24, r24
     406:	29 81       	ldd	r18, Y+1	; 0x01
     408:	82 2b       	or	r24, r18
     40a:	f8 01       	movw	r30, r16
     40c:	91 83       	std	Z+1, r25	; 0x01
     40e:	80 83       	st	Z, r24
		return(1);
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	03 c0       	rjmp	.+6      	; 0x41a <BMP280_ReadInt+0x3c>
	}
	*val = 0;
     414:	f8 01       	movw	r30, r16
     416:	11 82       	std	Z+1, r1	; 0x01
     418:	10 82       	st	Z, r1
	return(0);
}
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	df 91       	pop	r29
     420:	cf 91       	pop	r28
     422:	1f 91       	pop	r17
     424:	0f 91       	pop	r16
     426:	08 95       	ret

00000428 <BMP280_Init>:

/*************************************************************************//**
  @brief Initializes the BMP280 and reads the calibration data from the device
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
char BMP280_Init(void){
     428:	cf 93       	push	r28
     42a:	df 93       	push	r29
     42c:	00 d0       	rcall	.+0      	; 0x42e <BMP280_Init+0x6>
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
     432:	88 e8       	ldi	r24, 0x88	; 136
     434:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     436:	62 e0       	ldi	r22, 0x02	; 2
     438:	ce 01       	movw	r24, r28
     43a:	01 96       	adiw	r24, 0x01	; 1
     43c:	0e 94 c5 01 	call	0x38a	; 0x38a <BMP280_ReadBytes>
     440:	88 23       	and	r24, r24
     442:	99 f0       	breq	.+38     	; 0x46a <BMP280_Init+0x42>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     444:	8a 81       	ldd	r24, Y+2	; 0x02
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	98 2f       	mov	r25, r24
     44a:	88 27       	eor	r24, r24
     44c:	29 81       	ldd	r18, Y+1	; 0x01
     44e:	82 2b       	or	r24, r18
     450:	90 93 16 03 	sts	0x0316, r25
     454:	80 93 15 03 	sts	0x0315, r24

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
     458:	6b e2       	ldi	r22, 0x2B	; 43
     45a:	73 e0       	ldi	r23, 0x03	; 3
     45c:	8a e8       	ldi	r24, 0x8A	; 138
     45e:	0e 94 ef 01 	call	0x3de	; 0x3de <BMP280_ReadInt>
	// used in the calculations when taking measurements.

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
     462:	88 23       	and	r24, r24
     464:	09 f4       	brne	.+2      	; 0x468 <BMP280_Init+0x40>
     466:	bb c0       	rjmp	.+374    	; 0x5de <BMP280_Init+0x1b6>
     468:	05 c0       	rjmp	.+10     	; 0x474 <BMP280_Init+0x4c>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     46a:	10 92 16 03 	sts	0x0316, r1
     46e:	10 92 15 03 	sts	0x0315, r1
     472:	b5 c0       	rjmp	.+362    	; 0x5de <BMP280_Init+0x1b6>
	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
     474:	69 e2       	ldi	r22, 0x29	; 41
     476:	73 e0       	ldi	r23, 0x03	; 3
     478:	8c e8       	ldi	r24, 0x8C	; 140
     47a:	0e 94 ef 01 	call	0x3de	; 0x3de <BMP280_ReadInt>

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
     47e:	88 23       	and	r24, r24
     480:	09 f4       	brne	.+2      	; 0x484 <BMP280_Init+0x5c>
     482:	ad c0       	rjmp	.+346    	; 0x5de <BMP280_Init+0x1b6>
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
     484:	8e e8       	ldi	r24, 0x8E	; 142
     486:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     488:	62 e0       	ldi	r22, 0x02	; 2
     48a:	ce 01       	movw	r24, r28
     48c:	01 96       	adiw	r24, 0x01	; 1
     48e:	0e 94 c5 01 	call	0x38a	; 0x38a <BMP280_ReadBytes>
     492:	88 23       	and	r24, r24
     494:	99 f0       	breq	.+38     	; 0x4bc <BMP280_Init+0x94>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     496:	8a 81       	ldd	r24, Y+2	; 0x02
     498:	90 e0       	ldi	r25, 0x00	; 0
     49a:	98 2f       	mov	r25, r24
     49c:	88 27       	eor	r24, r24
     49e:	29 81       	ldd	r18, Y+1	; 0x01
     4a0:	82 2b       	or	r24, r18
     4a2:	90 93 18 03 	sts	0x0318, r25
     4a6:	80 93 17 03 	sts	0x0317, r24
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     4aa:	67 e2       	ldi	r22, 0x27	; 39
     4ac:	73 e0       	ldi	r23, 0x03	; 3
     4ae:	80 e9       	ldi	r24, 0x90	; 144
     4b0:	0e 94 ef 01 	call	0x3de	; 0x3de <BMP280_ReadInt>
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
     4b4:	88 23       	and	r24, r24
     4b6:	09 f4       	brne	.+2      	; 0x4ba <BMP280_Init+0x92>
     4b8:	92 c0       	rjmp	.+292    	; 0x5de <BMP280_Init+0x1b6>
     4ba:	05 c0       	rjmp	.+10     	; 0x4c6 <BMP280_Init+0x9e>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     4bc:	10 92 18 03 	sts	0x0318, r1
     4c0:	10 92 17 03 	sts	0x0317, r1
     4c4:	8c c0       	rjmp	.+280    	; 0x5de <BMP280_Init+0x1b6>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     4c6:	65 e2       	ldi	r22, 0x25	; 37
     4c8:	73 e0       	ldi	r23, 0x03	; 3
     4ca:	82 e9       	ldi	r24, 0x92	; 146
     4cc:	0e 94 ef 01 	call	0x3de	; 0x3de <BMP280_ReadInt>
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     4d0:	88 23       	and	r24, r24
     4d2:	09 f4       	brne	.+2      	; 0x4d6 <BMP280_Init+0xae>
     4d4:	84 c0       	rjmp	.+264    	; 0x5de <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     4d6:	63 e2       	ldi	r22, 0x23	; 35
     4d8:	73 e0       	ldi	r23, 0x03	; 3
     4da:	84 e9       	ldi	r24, 0x94	; 148
     4dc:	0e 94 ef 01 	call	0x3de	; 0x3de <BMP280_ReadInt>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     4e0:	88 23       	and	r24, r24
     4e2:	09 f4       	brne	.+2      	; 0x4e6 <BMP280_Init+0xbe>
     4e4:	7c c0       	rjmp	.+248    	; 0x5de <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     4e6:	61 e2       	ldi	r22, 0x21	; 33
     4e8:	73 e0       	ldi	r23, 0x03	; 3
     4ea:	86 e9       	ldi	r24, 0x96	; 150
     4ec:	0e 94 ef 01 	call	0x3de	; 0x3de <BMP280_ReadInt>
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     4f0:	88 23       	and	r24, r24
     4f2:	09 f4       	brne	.+2      	; 0x4f6 <BMP280_Init+0xce>
     4f4:	74 c0       	rjmp	.+232    	; 0x5de <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     4f6:	6f e1       	ldi	r22, 0x1F	; 31
     4f8:	73 e0       	ldi	r23, 0x03	; 3
     4fa:	88 e9       	ldi	r24, 0x98	; 152
     4fc:	0e 94 ef 01 	call	0x3de	; 0x3de <BMP280_ReadInt>
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     500:	88 23       	and	r24, r24
     502:	09 f4       	brne	.+2      	; 0x506 <BMP280_Init+0xde>
     504:	6c c0       	rjmp	.+216    	; 0x5de <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     506:	6d e1       	ldi	r22, 0x1D	; 29
     508:	73 e0       	ldi	r23, 0x03	; 3
     50a:	8a e9       	ldi	r24, 0x9A	; 154
     50c:	0e 94 ef 01 	call	0x3de	; 0x3de <BMP280_ReadInt>
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     510:	88 23       	and	r24, r24
     512:	09 f4       	brne	.+2      	; 0x516 <BMP280_Init+0xee>
     514:	64 c0       	rjmp	.+200    	; 0x5de <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     516:	6b e1       	ldi	r22, 0x1B	; 27
     518:	73 e0       	ldi	r23, 0x03	; 3
     51a:	8c e9       	ldi	r24, 0x9C	; 156
     51c:	0e 94 ef 01 	call	0x3de	; 0x3de <BMP280_ReadInt>
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     520:	88 23       	and	r24, r24
     522:	09 f4       	brne	.+2      	; 0x526 <BMP280_Init+0xfe>
     524:	5c c0       	rjmp	.+184    	; 0x5de <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9C, &dig_P8)  &&
		BMP280_ReadInt(0x9E, &dig_P9)){
     526:	69 e1       	ldi	r22, 0x19	; 25
     528:	73 e0       	ldi	r23, 0x03	; 3
     52a:	8e e9       	ldi	r24, 0x9E	; 158
     52c:	0e 94 ef 01 	call	0x3de	; 0x3de <BMP280_ReadInt>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     530:	88 23       	and	r24, r24
     532:	09 f4       	brne	.+2      	; 0x536 <BMP280_Init+0x10e>
     534:	54 c0       	rjmp	.+168    	; 0x5de <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9E, &dig_P9)){
			printf("\nT: %i ,%i ,%i P: %i ,%i ,%i ,%i ,%i ,%i ,%i ,%1 ,%i \n",dig_T1,dig_T2,dig_T3,dig_P1,dig_P2,dig_P3,dig_P4,dig_P5,dig_P6,dig_P7,dig_P8,dig_P9);
     536:	80 91 1a 03 	lds	r24, 0x031A
     53a:	8f 93       	push	r24
     53c:	80 91 19 03 	lds	r24, 0x0319
     540:	8f 93       	push	r24
     542:	80 91 1c 03 	lds	r24, 0x031C
     546:	8f 93       	push	r24
     548:	80 91 1b 03 	lds	r24, 0x031B
     54c:	8f 93       	push	r24
     54e:	80 91 1e 03 	lds	r24, 0x031E
     552:	8f 93       	push	r24
     554:	80 91 1d 03 	lds	r24, 0x031D
     558:	8f 93       	push	r24
     55a:	80 91 20 03 	lds	r24, 0x0320
     55e:	8f 93       	push	r24
     560:	80 91 1f 03 	lds	r24, 0x031F
     564:	8f 93       	push	r24
     566:	80 91 22 03 	lds	r24, 0x0322
     56a:	8f 93       	push	r24
     56c:	80 91 21 03 	lds	r24, 0x0321
     570:	8f 93       	push	r24
     572:	80 91 24 03 	lds	r24, 0x0324
     576:	8f 93       	push	r24
     578:	80 91 23 03 	lds	r24, 0x0323
     57c:	8f 93       	push	r24
     57e:	80 91 26 03 	lds	r24, 0x0326
     582:	8f 93       	push	r24
     584:	80 91 25 03 	lds	r24, 0x0325
     588:	8f 93       	push	r24
     58a:	80 91 28 03 	lds	r24, 0x0328
     58e:	8f 93       	push	r24
     590:	80 91 27 03 	lds	r24, 0x0327
     594:	8f 93       	push	r24
     596:	80 91 18 03 	lds	r24, 0x0318
     59a:	8f 93       	push	r24
     59c:	80 91 17 03 	lds	r24, 0x0317
     5a0:	8f 93       	push	r24
     5a2:	80 91 2a 03 	lds	r24, 0x032A
     5a6:	8f 93       	push	r24
     5a8:	80 91 29 03 	lds	r24, 0x0329
     5ac:	8f 93       	push	r24
     5ae:	80 91 2c 03 	lds	r24, 0x032C
     5b2:	8f 93       	push	r24
     5b4:	80 91 2b 03 	lds	r24, 0x032B
     5b8:	8f 93       	push	r24
     5ba:	80 91 16 03 	lds	r24, 0x0316
     5be:	8f 93       	push	r24
     5c0:	80 91 15 03 	lds	r24, 0x0315
     5c4:	8f 93       	push	r24
     5c6:	87 e3       	ldi	r24, 0x37	; 55
     5c8:	92 e0       	ldi	r25, 0x02	; 2
     5ca:	9f 93       	push	r25
     5cc:	8f 93       	push	r24
     5ce:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <printf>
		return (1);
     5d2:	0f b6       	in	r0, 0x3f	; 63
     5d4:	f8 94       	cli
     5d6:	de bf       	out	0x3e, r29	; 62
     5d8:	0f be       	out	0x3f, r0	; 63
     5da:	cd bf       	out	0x3d, r28	; 61
     5dc:	81 e0       	ldi	r24, 0x01	; 1
	}
	else 
		return (0);
}
     5de:	0f 90       	pop	r0
     5e0:	0f 90       	pop	r0
     5e2:	df 91       	pop	r29
     5e4:	cf 91       	pop	r28
     5e6:	08 95       	ret

000005e8 <BMP280_SetOversampling>:
  @brief Sets the oversampling setting for the library
  @param[in] oss Oversampling setting
  @return 1
*****************************************************************************/
char BMP280_SetOversampling(short oss){
	oversampling = oss;
     5e8:	90 93 14 03 	sts	0x0314, r25
     5ec:	80 93 13 03 	sts	0x0313, r24
	return (1);
}
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	08 95       	ret

000005f4 <Si7020_init>:
*****************************************************************************/
char Si7020_init() {
	// Initialize the TWI library at 200kHz
	//TWI_Init(200000);
	return 0;
}
     5f4:	80 e0       	ldi	r24, 0x00	; 0
     5f6:	08 95       	ret

000005f8 <TGS2600_TurnOn>:
	DDRB |= 0b00100000;
	TGS2600_TurnOn();
}

void TGS2600_TurnOn(void){
	PORTB |= 0b00100000;
     5f8:	2d 9a       	sbi	0x05, 5	; 5
     5fa:	08 95       	ret

000005fc <TGS2600_Init>:
#include "devices/TGS2600.h"
#include "drivers/ADC.h"
#include "drivers/PWR.h"

void TGS2600_Init(void){
	DDRB |= 0b00100000;
     5fc:	25 9a       	sbi	0x04, 5	; 4
	TGS2600_TurnOn();
     5fe:	0e 94 fc 02 	call	0x5f8	; 0x5f8 <TGS2600_TurnOn>
     602:	08 95       	ret

00000604 <ADC_Init>:

/*************************************************************************//**
  @brief Initializes the ADC
*****************************************************************************/
void ADC_Init(void) {
	ADCSRA = (1<<ADEN)|(4<<ADPS0); //enables the ADC module, CPU clock prescale=16
     604:	84 e8       	ldi	r24, 0x84	; 132
     606:	80 93 7a 00 	sts	0x007A, r24
	
	ADCSRC = 0x05|(1<<ADTHT0)|(1<<ADTHT1); //ADSUT=5
     60a:	85 ec       	ldi	r24, 0xC5	; 197
     60c:	80 93 77 00 	sts	0x0077, r24
	while((ADCSRB&(1<<AVDDOK))==0);
     610:	eb e7       	ldi	r30, 0x7B	; 123
     612:	f0 e0       	ldi	r31, 0x00	; 0
     614:	80 81       	ld	r24, Z
     616:	88 23       	and	r24, r24
     618:	ec f7       	brge	.-6      	; 0x614 <ADC_Init+0x10>
}
     61a:	08 95       	ret

0000061c <PWR_Init>:

/*************************************************************************//**
  @brief Initializes the power management system
*****************************************************************************/
void PWR_Init(void){
	DDRD |= 0b11000000;
     61c:	8a b1       	in	r24, 0x0a	; 10
     61e:	80 6c       	ori	r24, 0xC0	; 192
     620:	8a b9       	out	0x0a, r24	; 10
     622:	08 95       	ret

00000624 <PWR_TurnOn5V>:

/*************************************************************************//**
  @brief Turns on the 5V power supply
*****************************************************************************/
void PWR_TurnOn5V(void){
	PORTD |= 0b10000000;
     624:	5f 9a       	sbi	0x0b, 7	; 11
     626:	08 95       	ret

00000628 <SPI_SlaveInit>:

unsigned char buffer[16];

void SPI_SlaveInit(void)
{
	DDRB |= (1<<PORTB3); //Set MISO output
     628:	23 9a       	sbi	0x04, 3	; 4
	SPCR = (1<<SPE); //Enable SPI
     62a:	80 e4       	ldi	r24, 0x40	; 64
     62c:	8c bd       	out	0x2c, r24	; 44
     62e:	08 95       	ret

00000630 <TWI_Init>:
/*************************************************************************//**
  @brief Initializes the 2-wire Serial Interface as a master
  @param[in] freq SCL frequency (Do not exceed 400kHz)
  @return Status (@c 0 on failure, nonzero otherwise)
*****************************************************************************/
char TWI_Init(unsigned long freq){
     630:	9b 01       	movw	r18, r22
     632:	ac 01       	movw	r20, r24
	//printf("TWI_Init");
	TWSR=0x00;
     634:	10 92 b9 00 	sts	0x00B9, r1
	TWBR=(unsigned char)(((F_CPU/freq)-16UL)/8UL); //Compute settings value and set frequency
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	74 e2       	ldi	r23, 0x24	; 36
     63c:	84 ef       	ldi	r24, 0xF4	; 244
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__udivmodsi4>
     644:	da 01       	movw	r26, r20
     646:	c9 01       	movw	r24, r18
     648:	40 97       	sbiw	r24, 0x10	; 16
     64a:	a1 09       	sbc	r26, r1
     64c:	b1 09       	sbc	r27, r1
     64e:	68 94       	set
     650:	12 f8       	bld	r1, 2
     652:	b6 95       	lsr	r27
     654:	a7 95       	ror	r26
     656:	97 95       	ror	r25
     658:	87 95       	ror	r24
     65a:	16 94       	lsr	r1
     65c:	d1 f7       	brne	.-12     	; 0x652 <TWI_Init+0x22>
     65e:	80 93 b8 00 	sts	0x00B8, r24
	TWCR=(1 << TWEN);
     662:	84 e0       	ldi	r24, 0x04	; 4
     664:	80 93 bc 00 	sts	0x00BC, r24
	
	//TWAR=0; //Disable slave mode
	
	return 1; //May want to actually check for success here
}
     668:	81 e0       	ldi	r24, 0x01	; 1
     66a:	08 95       	ret

0000066c <TWI_WriteByte>:
  @param[in] data byte to send
  @return Status code, TWI_SENT_ACK or TWI_SENT_NACK on success
*****************************************************************************/
char TWI_WriteByte(unsigned char data){
	//printf("TWI_WriteByte");
	TWDR = data; //Stage the data to send
     66c:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
     670:	84 e8       	ldi	r24, 0x84	; 132
     672:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);//Send the data
     676:	ec eb       	ldi	r30, 0xBC	; 188
     678:	f0 e0       	ldi	r31, 0x00	; 0
     67a:	80 81       	ld	r24, Z
     67c:	88 23       	and	r24, r24
     67e:	ec f7       	brge	.-6      	; 0x67a <TWI_WriteByte+0xe>
	
	return TWSR&TWSR_MASK;//Return the status code
     680:	80 91 b9 00 	lds	r24, 0x00B9
}
     684:	88 7f       	andi	r24, 0xF8	; 248
     686:	08 95       	ret

00000688 <TWI_BeginWrite>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAW_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginWrite(unsigned char address){
	//printf("TWI_BeginWrite");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
     688:	94 ee       	ldi	r25, 0xE4	; 228
     68a:	90 93 bc 00 	sts	0x00BC, r25
	int i=0;
	while ((TWCR & (1<<TWINT)) == 0);
     68e:	ec eb       	ldi	r30, 0xBC	; 188
     690:	f0 e0       	ldi	r31, 0x00	; 0
     692:	90 81       	ld	r25, Z
     694:	99 23       	and	r25, r25
     696:	ec f7       	brge	.-6      	; 0x692 <TWI_BeginWrite+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     698:	ef e9       	ldi	r30, 0x9F	; 159
     69a:	ff e0       	ldi	r31, 0x0F	; 15
     69c:	31 97       	sbiw	r30, 0x01	; 1
     69e:	f1 f7       	brne	.-4      	; 0x69c <TWI_BeginWrite+0x14>
     6a0:	00 c0       	rjmp	.+0      	; 0x6a2 <TWI_BeginWrite+0x1a>
     6a2:	00 00       	nop
	_delay_ms(1);
	char stat = (TWSR & TWSR_MASK);
     6a4:	90 91 b9 00 	lds	r25, 0x00B9
     6a8:	98 7f       	andi	r25, 0xF8	; 248
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
     6aa:	98 30       	cpi	r25, 0x08	; 8
     6ac:	31 f0       	breq	.+12     	; 0x6ba <TWI_BeginWrite+0x32>
     6ae:	90 31       	cpi	r25, 0x10	; 16
     6b0:	21 f0       	breq	.+8      	; 0x6ba <TWI_BeginWrite+0x32>
     6b2:	80 91 b9 00 	lds	r24, 0x00B9
     6b6:	88 7f       	andi	r24, 0xF8	; 248
     6b8:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) & SLAW_MASK); //reset bit 0 to send a write bit, send
     6ba:	88 0f       	add	r24, r24
     6bc:	0e 94 36 03 	call	0x66c	; 0x66c <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	return stat;//Return the status code
}
     6c0:	08 95       	ret

000006c2 <TWI_BeginRead>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAR_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginRead(unsigned char address){
	//printf("TWI_BeginRead");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
     6c2:	94 ee       	ldi	r25, 0xE4	; 228
     6c4:	90 93 bc 00 	sts	0x00BC, r25
	while ((TWCR & (1<<TWINT)) == 0);
     6c8:	ec eb       	ldi	r30, 0xBC	; 188
     6ca:	f0 e0       	ldi	r31, 0x00	; 0
     6cc:	90 81       	ld	r25, Z
     6ce:	99 23       	and	r25, r25
     6d0:	ec f7       	brge	.-6      	; 0x6cc <TWI_BeginRead+0xa>
	
	char stat = (TWSR & TWSR_MASK);
     6d2:	90 91 b9 00 	lds	r25, 0x00B9
     6d6:	98 7f       	andi	r25, 0xF8	; 248
	//printf("0x%1x",(unsigned)stat);
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
     6d8:	98 30       	cpi	r25, 0x08	; 8
     6da:	31 f0       	breq	.+12     	; 0x6e8 <TWI_BeginRead+0x26>
     6dc:	90 31       	cpi	r25, 0x10	; 16
     6de:	21 f0       	breq	.+8      	; 0x6e8 <TWI_BeginRead+0x26>
     6e0:	80 91 b9 00 	lds	r24, 0x00B9
     6e4:	88 7f       	andi	r24, 0xF8	; 248
     6e6:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) | SLAR_MASK); //set bit 0 to send a read bit and send it
     6e8:	88 0f       	add	r24, r24
     6ea:	81 60       	ori	r24, 0x01	; 1
     6ec:	0e 94 36 03 	call	0x66c	; 0x66c <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	
	return stat;//Return the status code
}
     6f0:	08 95       	ret

000006f2 <TWI_ReadAck>:
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_ACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadAck(unsigned char *data){
	//printf("TWI_ReadAck");
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Start receiving, ending with an ACK
     6f2:	24 ec       	ldi	r18, 0xC4	; 196
     6f4:	20 93 bc 00 	sts	0x00BC, r18
	while ((TWCR & (1<<TWINT)) == 0);
     6f8:	ec eb       	ldi	r30, 0xBC	; 188
     6fa:	f0 e0       	ldi	r31, 0x00	; 0
     6fc:	20 81       	ld	r18, Z
     6fe:	22 23       	and	r18, r18
     700:	ec f7       	brge	.-6      	; 0x6fc <TWI_ReadAck+0xa>
	*data=TWDR; //Store the data
     702:	20 91 bb 00 	lds	r18, 0x00BB
     706:	fc 01       	movw	r30, r24
     708:	20 83       	st	Z, r18
	
	return TWSR&TWSR_MASK;//Return the status code
     70a:	80 91 b9 00 	lds	r24, 0x00B9
}
     70e:	88 7f       	andi	r24, 0xF8	; 248
     710:	08 95       	ret

00000712 <TWI_ReadNack>:
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_NACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadNack(unsigned char *data){
	//printf("TWI_ReadNack");
	TWCR = (1<<TWINT)|(1<<TWEN); //Start receiving, ending with a NACK
     712:	24 e8       	ldi	r18, 0x84	; 132
     714:	20 93 bc 00 	sts	0x00BC, r18
	while ((TWCR & (1<<TWINT)) == 0);
     718:	ec eb       	ldi	r30, 0xBC	; 188
     71a:	f0 e0       	ldi	r31, 0x00	; 0
     71c:	20 81       	ld	r18, Z
     71e:	22 23       	and	r18, r18
     720:	ec f7       	brge	.-6      	; 0x71c <TWI_ReadNack+0xa>
	*data=TWDR; //Store the data
     722:	20 91 bb 00 	lds	r18, 0x00BB
     726:	fc 01       	movw	r30, r24
     728:	20 83       	st	Z, r18
	
	return TWSR&TWSR_MASK;//Return the status code
     72a:	80 91 b9 00 	lds	r24, 0x00B9
}
     72e:	88 7f       	andi	r24, 0xF8	; 248
     730:	08 95       	ret

00000732 <TWI_Stop>:
  @brief Sends a Stop bit, be sure to send a Start bit before future interactions on the bus
  @return Status code, should always be nonzero
*****************************************************************************/
char TWI_Stop(void){
	//printf("TWI_Stop");
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
     732:	84 e9       	ldi	r24, 0x94	; 148
     734:	80 93 bc 00 	sts	0x00BC, r24
	return 1;
}
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	08 95       	ret

0000073c <TWI_Read>:
  @param[in] amount Number of bytes to recieve
  @param[in] whether or not to send an ACK on the last byte, sends NACK if false
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
     73c:	9f 92       	push	r9
     73e:	af 92       	push	r10
     740:	bf 92       	push	r11
     742:	cf 92       	push	r12
     744:	df 92       	push	r13
     746:	ef 92       	push	r14
     748:	ff 92       	push	r15
     74a:	0f 93       	push	r16
     74c:	1f 93       	push	r17
     74e:	cf 93       	push	r28
     750:	df 93       	push	r29
     752:	7c 01       	movw	r14, r24
     754:	8b 01       	movw	r16, r22
     756:	94 2e       	mov	r9, r20
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
     758:	16 16       	cp	r1, r22
     75a:	17 06       	cpc	r1, r23
     75c:	f4 f4       	brge	.+60     	; 0x79a <TWI_Read+0x5e>
     75e:	c0 e0       	ldi	r28, 0x00	; 0
     760:	d0 e0       	ldi	r29, 0x00	; 0
		if((ack==false) && ((amount-1)==i)){
     762:	6b 01       	movw	r12, r22
     764:	81 e0       	ldi	r24, 0x01	; 1
     766:	c8 1a       	sub	r12, r24
     768:	d1 08       	sbc	r13, r1
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
     76a:	57 01       	movw	r10, r14
     76c:	ac 0c       	add	r10, r12
     76e:	bd 1c       	adc	r11, r13
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
		if((ack==false) && ((amount-1)==i)){
     770:	91 10       	cpse	r9, r1
     772:	07 c0       	rjmp	.+14     	; 0x782 <TWI_Read+0x46>
     774:	cc 16       	cp	r12, r28
     776:	dd 06       	cpc	r13, r29
     778:	21 f4       	brne	.+8      	; 0x782 <TWI_Read+0x46>
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
     77a:	c5 01       	movw	r24, r10
     77c:	0e 94 89 03 	call	0x712	; 0x712 <TWI_ReadNack>
     780:	05 c0       	rjmp	.+10     	; 0x78c <TWI_Read+0x50>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}else{
			status=TWI_ReadAck(&data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
     782:	c7 01       	movw	r24, r14
     784:	8c 0f       	add	r24, r28
     786:	9d 1f       	adc	r25, r29
     788:	0e 94 79 03 	call	0x6f2	; 0x6f2 <TWI_ReadAck>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}
		//printf("A");
		if(status!=TWI_REC_ACK)return status; //If NACK was selected, returning here is fine since the loop is already ending
     78c:	80 35       	cpi	r24, 0x50	; 80
     78e:	31 f4       	brne	.+12     	; 0x79c <TWI_Read+0x60>
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
     790:	21 96       	adiw	r28, 0x01	; 1
     792:	c0 17       	cp	r28, r16
     794:	d1 07       	cpc	r29, r17
     796:	61 f7       	brne	.-40     	; 0x770 <TWI_Read+0x34>
     798:	01 c0       	rjmp	.+2      	; 0x79c <TWI_Read+0x60>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
     79a:	80 e0       	ldi	r24, 0x00	; 0
		//will return if something goes wrong partway through
		//printf("B");
	}
	//printf("0x%1x",(unsigned)status);
	return status;
}
     79c:	df 91       	pop	r29
     79e:	cf 91       	pop	r28
     7a0:	1f 91       	pop	r17
     7a2:	0f 91       	pop	r16
     7a4:	ff 90       	pop	r15
     7a6:	ef 90       	pop	r14
     7a8:	df 90       	pop	r13
     7aa:	cf 90       	pop	r12
     7ac:	bf 90       	pop	r11
     7ae:	af 90       	pop	r10
     7b0:	9f 90       	pop	r9
     7b2:	08 95       	ret

000007b4 <USART0_Init>:
  @brief Initializes USART0 in asynchronous UART mode, 8 bit data, 1 stop bit
  @param[in] desired baud rate (configuration values computed using F_CPU)
*****************************************************************************/
void USART0_Init(unsigned long baud){
	
	stdout = &USART0_stdout; //make stdout print to USART0
     7b4:	20 e0       	ldi	r18, 0x00	; 0
     7b6:	32 e0       	ldi	r19, 0x02	; 2
     7b8:	30 93 68 06 	sts	0x0668, r19
     7bc:	20 93 67 06 	sts	0x0667, r18
	
	//Compute UBRR for baudrate setting
	unsigned short ubrr=(unsigned short)((F_CPU/(baud*16UL))-1);
     7c0:	dc 01       	movw	r26, r24
     7c2:	cb 01       	movw	r24, r22
     7c4:	88 0f       	add	r24, r24
     7c6:	99 1f       	adc	r25, r25
     7c8:	aa 1f       	adc	r26, r26
     7ca:	bb 1f       	adc	r27, r27
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	aa 1f       	adc	r26, r26
     7d2:	bb 1f       	adc	r27, r27
     7d4:	9c 01       	movw	r18, r24
     7d6:	ad 01       	movw	r20, r26
     7d8:	22 0f       	add	r18, r18
     7da:	33 1f       	adc	r19, r19
     7dc:	44 1f       	adc	r20, r20
     7de:	55 1f       	adc	r21, r21
     7e0:	22 0f       	add	r18, r18
     7e2:	33 1f       	adc	r19, r19
     7e4:	44 1f       	adc	r20, r20
     7e6:	55 1f       	adc	r21, r21
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	74 e2       	ldi	r23, 0x24	; 36
     7ec:	84 ef       	ldi	r24, 0xF4	; 244
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 fb 09 	call	0x13f6	; 0x13f6 <__udivmodsi4>
     7f4:	21 50       	subi	r18, 0x01	; 1
     7f6:	31 09       	sbc	r19, r1
	
	//Set BAUD rate.
	UBRR0H = (unsigned char) (ubrr >> 8);
     7f8:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) ubrr;
     7fc:	20 93 c4 00 	sts	0x00C4, r18
	/*Set frame format. 8 data bit(settings bits UCSZ00 and UCSZ01  UCSR0B), 1 stop bit(by default and need not to be worried about). 
	The UCSZ01:0 bits combined with the UCSZ02 bit in UCSR0B sets the number of data
	bits (Character Size) in the frame that the Receiver and Transmitter use. 
	If a change on frame format is needed, make sure to modify UCSR0B register above accordingly.
	See datasheet pg. 390.*/
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
     800:	86 e0       	ldi	r24, 0x06	; 6
     802:	80 93 c2 00 	sts	0x00C2, r24
	
	//Enable receiver and transmitter. Enable the USART Receive Complete interrupt(RXCIE).
	//UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0));
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);//Enable RX/TX, no interrupts
     806:	88 e1       	ldi	r24, 0x18	; 24
     808:	80 93 c1 00 	sts	0x00C1, r24
     80c:	08 95       	ret

0000080e <USART0_Transmit>:
Function contains busy loops for simplicity in debugging. Not production code.
  @brief Transmits a byte via USART0
  @param[in] data byte to be transmitted
*****************************************************************************/
void USART0_Transmit(unsigned char data){
	while(!(UCSR0A & (1 << UDRE0))); //Wait for the empty transmit buffer. (Waiting UDR0 to be empty.)
     80e:	e0 ec       	ldi	r30, 0xC0	; 192
     810:	f0 e0       	ldi	r31, 0x00	; 0
     812:	90 81       	ld	r25, Z
     814:	95 ff       	sbrs	r25, 5
     816:	fd cf       	rjmp	.-6      	; 0x812 <USART0_Transmit+0x4>
		UDR0 = data;			//store the data in the USART Data Register
     818:	80 93 c6 00 	sts	0x00C6, r24
     81c:	08 95       	ret

0000081e <USART0_putchar_printf>:
  @brief Called when stdout is being printed to USART0 (this is set up at runtime)
  @param[in] var byte to transmit
  @param[in/out] *stream Pointer to a stdio.h FILE io stream
  @return Status
*****************************************************************************/
int USART0_putchar_printf(char var, FILE *stream) {
     81e:	cf 93       	push	r28
     820:	c8 2f       	mov	r28, r24
	if (var == '\n') USART0_Transmit('\r');
     822:	8a 30       	cpi	r24, 0x0A	; 10
     824:	19 f4       	brne	.+6      	; 0x82c <USART0_putchar_printf+0xe>
     826:	8d e0       	ldi	r24, 0x0D	; 13
     828:	0e 94 07 04 	call	0x80e	; 0x80e <USART0_Transmit>
	USART0_Transmit(var);
     82c:	8c 2f       	mov	r24, r28
     82e:	0e 94 07 04 	call	0x80e	; 0x80e <USART0_Transmit>
	return 0;
}
     832:	80 e0       	ldi	r24, 0x00	; 0
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	cf 91       	pop	r28
     838:	08 95       	ret

0000083a <foo>:

}

void foo()
{
	printf("Top of loop !\n");
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	93 e0       	ldi	r25, 0x03	; 3
     83e:	0e 94 88 0b 	call	0x1710	; 0x1710 <puts>
     842:	08 95       	ret

00000844 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
     844:	14 be       	out	0x34, r1	; 52
  wdt_disable();
     846:	88 e1       	ldi	r24, 0x18	; 24
     848:	0f b6       	in	r0, 0x3f	; 63
     84a:	f8 94       	cli
     84c:	80 93 60 00 	sts	0x0060, r24
     850:	10 92 60 00 	sts	0x0060, r1
     854:	0f be       	out	0x3f, r0	; 63

  CLKPR = 1 << CLKPCE;
     856:	e1 e6       	ldi	r30, 0x61	; 97
     858:	f0 e0       	ldi	r31, 0x00	; 0
     85a:	80 e8       	ldi	r24, 0x80	; 128
     85c:	80 83       	st	Z, r24
  CLKPR = 0;
     85e:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
     860:	78 94       	sei

  HAL_TimerInit();
     862:	0e 94 34 04 	call	0x868	; 0x868 <HAL_TimerInit>
     866:	08 95       	ret

00000868 <HAL_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_TimerInit(void)
{
  halTimerIrqCount = 0;
     868:	10 92 3c 06 	sts	0x063C, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
     86c:	80 e2       	ldi	r24, 0x20	; 32
     86e:	9e e4       	ldi	r25, 0x4E	; 78
     870:	90 93 a9 00 	sts	0x00A9, r25
     874:	80 93 a8 00 	sts	0x00A8, r24
  TCCR4B = (1 << WGM12);              // CTC mode
     878:	e1 ea       	ldi	r30, 0xA1	; 161
     87a:	f0 e0       	ldi	r31, 0x00	; 0
     87c:	88 e0       	ldi	r24, 0x08	; 8
     87e:	80 83       	st	Z, r24
  TCCR4B |= (1 << CS11);              // Prescaler 8
     880:	80 81       	ld	r24, Z
     882:	82 60       	ori	r24, 0x02	; 2
     884:	80 83       	st	Z, r24
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
     886:	e2 e7       	ldi	r30, 0x72	; 114
     888:	f0 e0       	ldi	r31, 0x00	; 0
     88a:	80 81       	ld	r24, Z
     88c:	82 60       	ori	r24, 0x02	; 2
     88e:	80 83       	st	Z, r24
     890:	08 95       	ret

00000892 <__vector_42>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
     892:	1f 92       	push	r1
     894:	0f 92       	push	r0
     896:	0f b6       	in	r0, 0x3f	; 63
     898:	0f 92       	push	r0
     89a:	11 24       	eor	r1, r1
     89c:	8f 93       	push	r24
  halTimerIrqCount++;
     89e:	80 91 3c 06 	lds	r24, 0x063C
     8a2:	8f 5f       	subi	r24, 0xFF	; 255
     8a4:	80 93 3c 06 	sts	0x063C, r24
}
     8a8:	8f 91       	pop	r24
     8aa:	0f 90       	pop	r0
     8ac:	0f be       	out	0x3f, r0	; 63
     8ae:	0f 90       	pop	r0
     8b0:	1f 90       	pop	r1
     8b2:	18 95       	reti

000008b4 <NWK_Init>:
/*************************************************************************//**
  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
  nwkIb.nwkSeqNum = 0;
     8b4:	10 92 41 06 	sts	0x0641, r1
  nwkIb.macSeqNum = 0;
     8b8:	10 92 42 06 	sts	0x0642, r1
  nwkIb.addr = 0;
     8bc:	10 92 3e 06 	sts	0x063E, r1
     8c0:	10 92 3d 06 	sts	0x063D, r1
  nwkIb.lock = 0;
     8c4:	10 92 64 06 	sts	0x0664, r1
     8c8:	10 92 63 06 	sts	0x0663, r1
     8cc:	e3 e4       	ldi	r30, 0x43	; 67
     8ce:	f6 e0       	ldi	r31, 0x06	; 6
     8d0:	83 e6       	ldi	r24, 0x63	; 99
     8d2:	96 e0       	ldi	r25, 0x06	; 6

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
    nwkIb.endpoint[i] = NULL;
     8d4:	11 92       	st	Z+, r1
     8d6:	11 92       	st	Z+, r1
  nwkIb.nwkSeqNum = 0;
  nwkIb.macSeqNum = 0;
  nwkIb.addr = 0;
  nwkIb.lock = 0;

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
     8d8:	e8 17       	cp	r30, r24
     8da:	f9 07       	cpc	r31, r25
     8dc:	d9 f7       	brne	.-10     	; 0x8d4 <NWK_Init+0x20>
    nwkIb.endpoint[i] = NULL;

  nwkTxInit();
     8de:	0e 94 6b 05 	call	0xad6	; 0xad6 <nwkTxInit>
  nwkRxInit();
     8e2:	0e 94 de 04 	call	0x9bc	; 0x9bc <nwkRxInit>
  nwkFrameInit();
     8e6:	0e 94 86 04 	call	0x90c	; 0x90c <nwkFrameInit>
  nwkDataReqInit();
     8ea:	0e 94 81 04 	call	0x902	; 0x902 <nwkDataReqInit>
     8ee:	08 95       	ret

000008f0 <NWK_OpenEndpoint>:
  @param[in] id Endpoint index (1-15)
  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
  nwkIb.endpoint[id] = handler;
     8f0:	e8 2f       	mov	r30, r24
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	ee 0f       	add	r30, r30
     8f6:	ff 1f       	adc	r31, r31
     8f8:	ed 5b       	subi	r30, 0xBD	; 189
     8fa:	f9 4f       	sbci	r31, 0xF9	; 249
     8fc:	71 83       	std	Z+1, r23	; 0x01
     8fe:	60 83       	st	Z, r22
     900:	08 95       	ret

00000902 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
     902:	10 92 2e 03 	sts	0x032E, r1
     906:	10 92 2d 03 	sts	0x032D, r1
     90a:	08 95       	ret

0000090c <nwkFrameInit>:
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
     90c:	10 92 2f 03 	sts	0x032F, r1
     910:	10 92 b8 03 	sts	0x03B8, r1
     914:	10 92 41 04 	sts	0x0441, r1
     918:	10 92 ca 04 	sts	0x04CA, r1
     91c:	10 92 53 05 	sts	0x0553, r1
     920:	08 95       	ret

00000922 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
     922:	00 97       	sbiw	r24, 0x00	; 0
     924:	41 f0       	breq	.+16     	; 0x936 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
     926:	fc 01       	movw	r30, r24
     928:	e7 57       	subi	r30, 0x77	; 119
     92a:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     92c:	85 e0       	ldi	r24, 0x05	; 5
     92e:	ec 3d       	cpi	r30, 0xDC	; 220
     930:	f8 07       	cpc	r31, r24
     932:	18 f0       	brcs	.+6      	; 0x93a <nwkFrameNext+0x18>
     934:	12 c0       	rjmp	.+36     	; 0x95a <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
     936:	ef e2       	ldi	r30, 0x2F	; 47
     938:	f3 e0       	ldi	r31, 0x03	; 3
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     93a:	80 81       	ld	r24, Z
     93c:	88 23       	and	r24, r24
     93e:	21 f0       	breq	.+8      	; 0x948 <nwkFrameNext+0x26>
     940:	0f c0       	rjmp	.+30     	; 0x960 <nwkFrameNext+0x3e>
     942:	80 81       	ld	r24, Z
     944:	81 11       	cpse	r24, r1
     946:	0f c0       	rjmp	.+30     	; 0x966 <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     948:	e7 57       	subi	r30, 0x77	; 119
     94a:	ff 4f       	sbci	r31, 0xFF	; 255
     94c:	85 e0       	ldi	r24, 0x05	; 5
     94e:	ec 3d       	cpi	r30, 0xDC	; 220
     950:	f8 07       	cpc	r31, r24
     952:	b8 f3       	brcs	.-18     	; 0x942 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
     954:	80 e0       	ldi	r24, 0x00	; 0
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	08 95       	ret
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
     960:	8e 2f       	mov	r24, r30
     962:	9f 2f       	mov	r25, r31
     964:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
     966:	8e 2f       	mov	r24, r30
     968:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
     96a:	08 95       	ret

0000096c <nwkRxServiceDataInd>:
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
     96c:	dc 01       	movw	r26, r24
     96e:	19 96       	adiw	r26, 0x09	; 9
     970:	2c 91       	ld	r18, X
     972:	19 97       	sbiw	r26, 0x09	; 9
     974:	22 23       	and	r18, r18
     976:	51 f0       	breq	.+20     	; 0x98c <nwkRxServiceDataInd+0x20>
    return false;

  switch (ind->data[0])
     978:	17 96       	adiw	r26, 0x07	; 7
     97a:	ed 91       	ld	r30, X+
     97c:	fc 91       	ld	r31, X
     97e:	18 97       	sbiw	r26, 0x08	; 8
     980:	20 81       	ld	r18, Z
     982:	21 11       	cpse	r18, r1
     984:	05 c0       	rjmp	.+10     	; 0x990 <nwkRxServiceDataInd+0x24>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
     986:	0e 94 98 05 	call	0xb30	; 0xb30 <nwkTxAckReceived>
     98a:	08 95       	ret
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    return false;
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	08 95       	ret
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
     990:	80 e0       	ldi	r24, 0x00	; 0
  }
}
     992:	08 95       	ret

00000994 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
     994:	ed ee       	ldi	r30, 0xED	; 237
     996:	f5 e0       	ldi	r31, 0x05	; 5
     998:	2f e1       	ldi	r18, 0x1F	; 31
     99a:	36 e0       	ldi	r19, 0x06	; 6
  bool restart = false;
     99c:	50 e0       	ldi	r21, 0x00	; 0
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
     99e:	61 e0       	ldi	r22, 0x01	; 1
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
     9a0:	40 81       	ld	r20, Z
     9a2:	44 23       	and	r20, r20
     9a4:	19 f0       	breq	.+6      	; 0x9ac <nwkRxDuplicateRejectionTimerHandler+0x18>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
     9a6:	41 50       	subi	r20, 0x01	; 1
     9a8:	40 83       	st	Z, r20
      restart = true;
     9aa:	56 2f       	mov	r21, r22
     9ac:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     9ae:	e2 17       	cp	r30, r18
     9b0:	f3 07       	cpc	r31, r19
     9b2:	b1 f7       	brne	.-20     	; 0x9a0 <nwkRxDuplicateRejectionTimerHandler+0xc>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
     9b4:	51 11       	cpse	r21, r1
    SYS_TimerStart(timer);
     9b6:	0e 94 73 06 	call	0xce6	; 0xce6 <SYS_TimerStart>
     9ba:	08 95       	ret

000009bc <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
     9bc:	ed ee       	ldi	r30, 0xED	; 237
     9be:	f5 e0       	ldi	r31, 0x05	; 5
     9c0:	8f e1       	ldi	r24, 0x1F	; 31
     9c2:	96 e0       	ldi	r25, 0x06	; 6
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
     9c4:	10 82       	st	Z, r1
     9c6:	35 96       	adiw	r30, 0x05	; 5
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
     9c8:	e8 17       	cp	r30, r24
     9ca:	f9 07       	cpc	r31, r25
     9cc:	d9 f7       	brne	.-10     	; 0x9c4 <nwkRxInit+0x8>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
     9ce:	84 e6       	ldi	r24, 0x64	; 100
     9d0:	90 e0       	ldi	r25, 0x00	; 0
     9d2:	a0 e0       	ldi	r26, 0x00	; 0
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	80 93 e2 05 	sts	0x05E2, r24
     9da:	90 93 e3 05 	sts	0x05E3, r25
     9de:	a0 93 e4 05 	sts	0x05E4, r26
     9e2:	b0 93 e5 05 	sts	0x05E5, r27
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
     9e6:	10 92 e6 05 	sts	0x05E6, r1
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
     9ea:	8a ec       	ldi	r24, 0xCA	; 202
     9ec:	94 e0       	ldi	r25, 0x04	; 4
     9ee:	90 93 e8 05 	sts	0x05E8, r25
     9f2:	80 93 e7 05 	sts	0x05E7, r24

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
     9f6:	66 eb       	ldi	r22, 0xB6	; 182
     9f8:	74 e0       	ldi	r23, 0x04	; 4
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	0e 94 78 04 	call	0x8f0	; 0x8f0 <NWK_OpenEndpoint>
     a00:	08 95       	ret

00000a02 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
     a02:	ff 92       	push	r15
     a04:	0f 93       	push	r16
     a06:	1f 93       	push	r17
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
     a0e:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
     a10:	80 e0       	ldi	r24, 0x00	; 0
     a12:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
     a14:	01 e0       	ldi	r16, 0x01	; 1

      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
     a16:	0f 2e       	mov	r0, r31
     a18:	f3 e1       	ldi	r31, 0x13	; 19
     a1a:	ff 2e       	mov	r15, r31
     a1c:	f0 2d       	mov	r31, r0
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
     a1e:	13 c0       	rjmp	.+38     	; 0xa46 <nwkTxDelayTimerHandler+0x44>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
     a20:	fc 01       	movw	r30, r24
     a22:	20 81       	ld	r18, Z
     a24:	21 31       	cpi	r18, 0x11	; 17
     a26:	79 f4       	brne	.+30     	; 0xa46 <nwkTxDelayTimerHandler+0x44>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
     a28:	ec 57       	subi	r30, 0x7C	; 124
     a2a:	ff 4f       	sbci	r31, 0xFF	; 255
     a2c:	20 81       	ld	r18, Z
     a2e:	31 81       	ldd	r19, Z+1	; 0x01
     a30:	21 50       	subi	r18, 0x01	; 1
     a32:	31 09       	sbc	r19, r1
     a34:	31 83       	std	Z+1, r19	; 0x01
     a36:	20 83       	st	Z, r18
     a38:	23 2b       	or	r18, r19
     a3a:	21 f4       	brne	.+8      	; 0xa44 <nwkTxDelayTimerHandler+0x42>
        frame->state = NWK_TX_STATE_SEND;
     a3c:	fc 01       	movw	r30, r24
     a3e:	f0 82       	st	Z, r15

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
     a40:	10 2f       	mov	r17, r16
     a42:	01 c0       	rjmp	.+2      	; 0xa46 <nwkTxDelayTimerHandler+0x44>
     a44:	10 2f       	mov	r17, r16
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
     a46:	0e 94 91 04 	call	0x922	; 0x922 <nwkFrameNext>
     a4a:	00 97       	sbiw	r24, 0x00	; 0
     a4c:	49 f7       	brne	.-46     	; 0xa20 <nwkTxDelayTimerHandler+0x1e>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
     a4e:	11 23       	and	r17, r17
     a50:	19 f0       	breq	.+6      	; 0xa58 <nwkTxDelayTimerHandler+0x56>
    SYS_TimerStart(timer);
     a52:	ce 01       	movw	r24, r28
     a54:	0e 94 73 06 	call	0xce6	; 0xce6 <SYS_TimerStart>
}
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	1f 91       	pop	r17
     a5e:	0f 91       	pop	r16
     a60:	ff 90       	pop	r15
     a62:	08 95       	ret

00000a64 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
     a64:	ef 92       	push	r14
     a66:	ff 92       	push	r15
     a68:	0f 93       	push	r16
     a6a:	1f 93       	push	r17
     a6c:	cf 93       	push	r28
     a6e:	df 93       	push	r29
     a70:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
     a72:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
     a78:	01 e0       	ldi	r16, 0x01	; 1

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
     a7a:	0f 2e       	mov	r0, r31
     a7c:	f7 e1       	ldi	r31, 0x17	; 23
     a7e:	ef 2e       	mov	r14, r31
     a80:	f0 2d       	mov	r31, r0
  frame->tx.status = status;
     a82:	68 94       	set
     a84:	ff 24       	eor	r15, r15
     a86:	f4 f8       	bld	r15, 4
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
     a88:	16 c0       	rjmp	.+44     	; 0xab6 <nwkTxAckWaitTimerHandler+0x52>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
     a8a:	fc 01       	movw	r30, r24
     a8c:	20 81       	ld	r18, Z
     a8e:	26 31       	cpi	r18, 0x16	; 22
     a90:	91 f4       	brne	.+36     	; 0xab6 <nwkTxAckWaitTimerHandler+0x52>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
     a92:	ec 57       	subi	r30, 0x7C	; 124
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	20 81       	ld	r18, Z
     a98:	31 81       	ldd	r19, Z+1	; 0x01
     a9a:	21 50       	subi	r18, 0x01	; 1
     a9c:	31 09       	sbc	r19, r1
     a9e:	31 83       	std	Z+1, r19	; 0x01
     aa0:	20 83       	st	Z, r18
     aa2:	23 2b       	or	r18, r19
     aa4:	39 f4       	brne	.+14     	; 0xab4 <nwkTxAckWaitTimerHandler+0x50>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
     aa6:	fc 01       	movw	r30, r24
     aa8:	e0 82       	st	Z, r14
  frame->tx.status = status;
     aaa:	ed 57       	subi	r30, 0x7D	; 125
     aac:	ff 4f       	sbci	r31, 0xFF	; 255
     aae:	f0 82       	st	Z, r15

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
     ab0:	10 2f       	mov	r17, r16
     ab2:	01 c0       	rjmp	.+2      	; 0xab6 <nwkTxAckWaitTimerHandler+0x52>
     ab4:	10 2f       	mov	r17, r16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
     ab6:	0e 94 91 04 	call	0x922	; 0x922 <nwkFrameNext>
     aba:	00 97       	sbiw	r24, 0x00	; 0
     abc:	31 f7       	brne	.-52     	; 0xa8a <nwkTxAckWaitTimerHandler+0x26>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
     abe:	11 23       	and	r17, r17
     ac0:	19 f0       	breq	.+6      	; 0xac8 <nwkTxAckWaitTimerHandler+0x64>
    SYS_TimerStart(timer);
     ac2:	ce 01       	movw	r24, r28
     ac4:	0e 94 73 06 	call	0xce6	; 0xce6 <SYS_TimerStart>
}
     ac8:	df 91       	pop	r29
     aca:	cf 91       	pop	r28
     acc:	1f 91       	pop	r17
     ace:	0f 91       	pop	r16
     ad0:	ff 90       	pop	r15
     ad2:	ef 90       	pop	r14
     ad4:	08 95       	ret

00000ad6 <nwkTxInit>:
/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
     ad6:	10 92 36 06 	sts	0x0636, r1
     ada:	10 92 35 06 	sts	0x0635, r1

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
     ade:	82 e3       	ldi	r24, 0x32	; 50
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	a0 e0       	ldi	r26, 0x00	; 0
     ae4:	b0 e0       	ldi	r27, 0x00	; 0
     ae6:	80 93 2e 06 	sts	0x062E, r24
     aea:	90 93 2f 06 	sts	0x062F, r25
     aee:	a0 93 30 06 	sts	0x0630, r26
     af2:	b0 93 31 06 	sts	0x0631, r27
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
     af6:	10 92 32 06 	sts	0x0632, r1
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
     afa:	82 e3       	ldi	r24, 0x32	; 50
     afc:	95 e0       	ldi	r25, 0x05	; 5
     afe:	90 93 34 06 	sts	0x0634, r25
     b02:	80 93 33 06 	sts	0x0633, r24

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
     b06:	8a e0       	ldi	r24, 0x0A	; 10
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	a0 e0       	ldi	r26, 0x00	; 0
     b0c:	b0 e0       	ldi	r27, 0x00	; 0
     b0e:	80 93 21 06 	sts	0x0621, r24
     b12:	90 93 22 06 	sts	0x0622, r25
     b16:	a0 93 23 06 	sts	0x0623, r26
     b1a:	b0 93 24 06 	sts	0x0624, r27
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
     b1e:	10 92 25 06 	sts	0x0625, r1
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	95 e0       	ldi	r25, 0x05	; 5
     b26:	90 93 27 06 	sts	0x0627, r25
     b2a:	80 93 26 06 	sts	0x0626, r24
     b2e:	08 95       	ret

00000b30 <nwkTxAckReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
     b30:	cf 93       	push	r28
     b32:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
     b34:	fc 01       	movw	r30, r24
     b36:	c7 81       	ldd	r28, Z+7	; 0x07
     b38:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
     b3a:	81 85       	ldd	r24, Z+9	; 0x09
     b3c:	83 30       	cpi	r24, 0x03	; 3
     b3e:	c9 f4       	brne	.+50     	; 0xb72 <nwkTxAckReceived+0x42>
     b40:	10 c0       	rjmp	.+32     	; 0xb62 <nwkTxAckReceived+0x32>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
     b42:	fc 01       	movw	r30, r24
     b44:	20 81       	ld	r18, Z
     b46:	26 31       	cpi	r18, 0x16	; 22
     b48:	71 f4       	brne	.+28     	; 0xb66 <nwkTxAckReceived+0x36>
     b4a:	34 85       	ldd	r19, Z+12	; 0x0c
     b4c:	29 81       	ldd	r18, Y+1	; 0x01
     b4e:	32 13       	cpse	r19, r18
     b50:	0a c0       	rjmp	.+20     	; 0xb66 <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
     b52:	27 e1       	ldi	r18, 0x17	; 23
     b54:	20 83       	st	Z, r18
      frame->tx.control = command->control;
     b56:	2a 81       	ldd	r18, Y+2	; 0x02
     b58:	ea 57       	subi	r30, 0x7A	; 122
     b5a:	ff 4f       	sbci	r31, 0xFF	; 255
     b5c:	20 83       	st	Z, r18
      return true;
     b5e:	81 e0       	ldi	r24, 0x01	; 1
     b60:	09 c0       	rjmp	.+18     	; 0xb74 <nwkTxAckReceived+0x44>
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
     b62:	80 e0       	ldi	r24, 0x00	; 0
     b64:	90 e0       	ldi	r25, 0x00	; 0
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
     b66:	0e 94 91 04 	call	0x922	; 0x922 <nwkFrameNext>
     b6a:	00 97       	sbiw	r24, 0x00	; 0
     b6c:	51 f7       	brne	.-44     	; 0xb42 <nwkTxAckReceived+0x12>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	01 c0       	rjmp	.+2      	; 0xb74 <nwkTxAckReceived+0x44>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
     b72:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
     b74:	df 91       	pop	r29
     b76:	cf 91       	pop	r28
     b78:	08 95       	ret

00000b7a <phyTrxSetState>:

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
  TRX_STATE_REG = TRX_CMD_FORCE_TRX_OFF;
     b7a:	93 e0       	ldi	r25, 0x03	; 3
     b7c:	90 93 42 01 	sts	0x0142, r25
  while (TRX_STATUS_TRX_OFF != TRX_STATUS_REG_s.trxStatus);
     b80:	e1 e4       	ldi	r30, 0x41	; 65
     b82:	f1 e0       	ldi	r31, 0x01	; 1
     b84:	90 81       	ld	r25, Z
     b86:	9f 71       	andi	r25, 0x1F	; 31
     b88:	98 30       	cpi	r25, 0x08	; 8
     b8a:	e1 f7       	brne	.-8      	; 0xb84 <phyTrxSetState+0xa>

  TRX_STATE_REG = state;
     b8c:	80 93 42 01 	sts	0x0142, r24
  while (state != TRX_STATUS_REG_s.trxStatus);
     b90:	e1 e4       	ldi	r30, 0x41	; 65
     b92:	f1 e0       	ldi	r31, 0x01	; 1
     b94:	90 81       	ld	r25, Z
     b96:	9f 71       	andi	r25, 0x1F	; 31
     b98:	98 13       	cpse	r25, r24
     b9a:	fc cf       	rjmp	.-8      	; 0xb94 <phyTrxSetState+0x1a>
}
     b9c:	08 95       	ret

00000b9e <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
     b9e:	e9 e3       	ldi	r30, 0x39	; 57
     ba0:	f1 e0       	ldi	r31, 0x01	; 1
     ba2:	80 81       	ld	r24, Z
     ba4:	81 60       	ori	r24, 0x01	; 1
     ba6:	80 83       	st	Z, r24

  phyRxState = false;
     ba8:	10 92 38 06 	sts	0x0638, r1
  phyBand = 0;
     bac:	10 92 37 06 	sts	0x0637, r1
  phyState = PHY_STATE_IDLE;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	80 93 39 06 	sts	0x0639, r24

  phyTrxSetState(TRX_CMD_TRX_OFF);
     bb6:	88 e0       	ldi	r24, 0x08	; 8
     bb8:	0e 94 bd 05 	call	0xb7a	; 0xb7a <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
     bbc:	8b ee       	ldi	r24, 0xEB	; 235
     bbe:	80 93 56 01 	sts	0x0156, r24

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
     bc2:	ec e4       	ldi	r30, 0x4C	; 76
     bc4:	f1 e0       	ldi	r31, 0x01	; 1
     bc6:	80 81       	ld	r24, Z
     bc8:	80 68       	ori	r24, 0x80	; 128
     bca:	80 83       	st	Z, r24
     bcc:	08 95       	ret

00000bce <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
     bce:	0e 94 22 04 	call	0x844	; 0x844 <HAL_Init>
  SYS_TimerInit();
     bd2:	0e 94 54 06 	call	0xca8	; 0xca8 <SYS_TimerInit>
  PHY_Init();
     bd6:	0e 94 cf 05 	call	0xb9e	; 0xb9e <PHY_Init>
  NWK_Init();
     bda:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <NWK_Init>
     bde:	08 95       	ret

00000be0 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	cf 93       	push	r28
     be6:	df 93       	push	r29
     be8:	ec 01       	movw	r28, r24
  if (timers)
     bea:	80 91 3a 06 	lds	r24, 0x063A
     bee:	90 91 3b 06 	lds	r25, 0x063B
     bf2:	00 97       	sbiw	r24, 0x00	; 0
     bf4:	09 f4       	brne	.+2      	; 0xbf8 <placeTimer+0x18>
     bf6:	45 c0       	rjmp	.+138    	; 0xc82 <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
     bf8:	4e 81       	ldd	r20, Y+6	; 0x06
     bfa:	5f 81       	ldd	r21, Y+7	; 0x07
     bfc:	68 85       	ldd	r22, Y+8	; 0x08
     bfe:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
     c00:	fc 01       	movw	r30, r24
     c02:	02 81       	ldd	r16, Z+2	; 0x02
     c04:	13 81       	ldd	r17, Z+3	; 0x03
     c06:	24 81       	ldd	r18, Z+4	; 0x04
     c08:	35 81       	ldd	r19, Z+5	; 0x05
     c0a:	40 17       	cp	r20, r16
     c0c:	51 07       	cpc	r21, r17
     c0e:	62 07       	cpc	r22, r18
     c10:	73 07       	cpc	r23, r19
     c12:	c0 f4       	brcc	.+48     	; 0xc44 <placeTimer+0x64>
     c14:	0b c0       	rjmp	.+22     	; 0xc2c <placeTimer+0x4c>
     c16:	02 81       	ldd	r16, Z+2	; 0x02
     c18:	13 81       	ldd	r17, Z+3	; 0x03
     c1a:	24 81       	ldd	r18, Z+4	; 0x04
     c1c:	35 81       	ldd	r19, Z+5	; 0x05
     c1e:	40 17       	cp	r20, r16
     c20:	51 07       	cpc	r21, r17
     c22:	62 07       	cpc	r22, r18
     c24:	73 07       	cpc	r23, r19
     c26:	28 f0       	brcs	.+10     	; 0xc32 <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
     c28:	df 01       	movw	r26, r30
     c2a:	0d c0       	rjmp	.+26     	; 0xc46 <placeTimer+0x66>
     c2c:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
     c2e:	a0 e0       	ldi	r26, 0x00	; 0
     c30:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
     c32:	04 1b       	sub	r16, r20
     c34:	15 0b       	sbc	r17, r21
     c36:	26 0b       	sbc	r18, r22
     c38:	37 0b       	sbc	r19, r23
     c3a:	02 83       	std	Z+2, r16	; 0x02
     c3c:	13 83       	std	Z+3, r17	; 0x03
     c3e:	24 83       	std	Z+4, r18	; 0x04
     c40:	35 83       	std	Z+5, r19	; 0x05
         break;
     c42:	0a c0       	rjmp	.+20     	; 0xc58 <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
     c44:	dc 01       	movw	r26, r24
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
     c46:	40 1b       	sub	r20, r16
     c48:	51 0b       	sbc	r21, r17
     c4a:	62 0b       	sbc	r22, r18
     c4c:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
     c4e:	ed 91       	ld	r30, X+
     c50:	fc 91       	ld	r31, X
     c52:	11 97       	sbiw	r26, 0x01	; 1
     c54:	30 97       	sbiw	r30, 0x00	; 0
     c56:	f9 f6       	brne	.-66     	; 0xc16 <placeTimer+0x36>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
     c58:	4a 83       	std	Y+2, r20	; 0x02
     c5a:	5b 83       	std	Y+3, r21	; 0x03
     c5c:	6c 83       	std	Y+4, r22	; 0x04
     c5e:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
     c60:	10 97       	sbiw	r26, 0x00	; 0
     c62:	41 f0       	breq	.+16     	; 0xc74 <placeTimer+0x94>
    {
      timer->next = prev->next;
     c64:	8d 91       	ld	r24, X+
     c66:	9c 91       	ld	r25, X
     c68:	11 97       	sbiw	r26, 0x01	; 1
     c6a:	99 83       	std	Y+1, r25	; 0x01
     c6c:	88 83       	st	Y, r24
      prev->next = timer;
     c6e:	cd 93       	st	X+, r28
     c70:	dc 93       	st	X, r29
     c72:	15 c0       	rjmp	.+42     	; 0xc9e <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
     c74:	99 83       	std	Y+1, r25	; 0x01
     c76:	88 83       	st	Y, r24
      timers = timer;
     c78:	d0 93 3b 06 	sts	0x063B, r29
     c7c:	c0 93 3a 06 	sts	0x063A, r28
     c80:	0e c0       	rjmp	.+28     	; 0xc9e <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
     c82:	19 82       	std	Y+1, r1	; 0x01
     c84:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
     c86:	8e 81       	ldd	r24, Y+6	; 0x06
     c88:	9f 81       	ldd	r25, Y+7	; 0x07
     c8a:	a8 85       	ldd	r26, Y+8	; 0x08
     c8c:	b9 85       	ldd	r27, Y+9	; 0x09
     c8e:	8a 83       	std	Y+2, r24	; 0x02
     c90:	9b 83       	std	Y+3, r25	; 0x03
     c92:	ac 83       	std	Y+4, r26	; 0x04
     c94:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
     c96:	d0 93 3b 06 	sts	0x063B, r29
     c9a:	c0 93 3a 06 	sts	0x063A, r28
  }
}
     c9e:	df 91       	pop	r29
     ca0:	cf 91       	pop	r28
     ca2:	1f 91       	pop	r17
     ca4:	0f 91       	pop	r16
     ca6:	08 95       	ret

00000ca8 <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
     ca8:	10 92 3b 06 	sts	0x063B, r1
     cac:	10 92 3a 06 	sts	0x063A, r1
     cb0:	08 95       	ret

00000cb2 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
     cb2:	e0 91 3a 06 	lds	r30, 0x063A
     cb6:	f0 91 3b 06 	lds	r31, 0x063B
     cba:	30 97       	sbiw	r30, 0x00	; 0
     cbc:	71 f0       	breq	.+28     	; 0xcda <SYS_TimerStarted+0x28>
    if (t == timer)
     cbe:	e8 17       	cp	r30, r24
     cc0:	f9 07       	cpc	r31, r25
     cc2:	21 f4       	brne	.+8      	; 0xccc <SYS_TimerStarted+0x1a>
     cc4:	0c c0       	rjmp	.+24     	; 0xcde <SYS_TimerStarted+0x2c>
     cc6:	8e 17       	cp	r24, r30
     cc8:	9f 07       	cpc	r25, r31
     cca:	59 f0       	breq	.+22     	; 0xce2 <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
     ccc:	01 90       	ld	r0, Z+
     cce:	f0 81       	ld	r31, Z
     cd0:	e0 2d       	mov	r30, r0
     cd2:	30 97       	sbiw	r30, 0x00	; 0
     cd4:	c1 f7       	brne	.-16     	; 0xcc6 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	08 95       	ret
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	08 95       	ret
     ce2:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
     ce4:	08 95       	ret

00000ce6 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
     ce6:	cf 93       	push	r28
     ce8:	df 93       	push	r29
     cea:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
     cec:	0e 94 59 06 	call	0xcb2	; 0xcb2 <SYS_TimerStarted>
     cf0:	81 11       	cpse	r24, r1
     cf2:	03 c0       	rjmp	.+6      	; 0xcfa <SYS_TimerStart+0x14>
    placeTimer(timer);
     cf4:	ce 01       	movw	r24, r28
     cf6:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <placeTimer>
}
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	08 95       	ret

00000d00 <vfprintf>:
     d00:	a3 e1       	ldi	r26, 0x13	; 19
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	e6 e8       	ldi	r30, 0x86	; 134
     d06:	f6 e0       	ldi	r31, 0x06	; 6
     d08:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <__prologue_saves__>
     d0c:	7c 01       	movw	r14, r24
     d0e:	1b 01       	movw	r2, r22
     d10:	6a 01       	movw	r12, r20
     d12:	fc 01       	movw	r30, r24
     d14:	17 82       	std	Z+7, r1	; 0x07
     d16:	16 82       	std	Z+6, r1	; 0x06
     d18:	83 81       	ldd	r24, Z+3	; 0x03
     d1a:	81 ff       	sbrs	r24, 1
     d1c:	66 c3       	rjmp	.+1740   	; 0x13ea <vfprintf+0x6ea>
     d1e:	be 01       	movw	r22, r28
     d20:	6f 5f       	subi	r22, 0xFF	; 255
     d22:	7f 4f       	sbci	r23, 0xFF	; 255
     d24:	4b 01       	movw	r8, r22
     d26:	f7 01       	movw	r30, r14
     d28:	93 81       	ldd	r25, Z+3	; 0x03
     d2a:	f1 01       	movw	r30, r2
     d2c:	93 fd       	sbrc	r25, 3
     d2e:	85 91       	lpm	r24, Z+
     d30:	93 ff       	sbrs	r25, 3
     d32:	81 91       	ld	r24, Z+
     d34:	1f 01       	movw	r2, r30
     d36:	88 23       	and	r24, r24
     d38:	09 f4       	brne	.+2      	; 0xd3c <vfprintf+0x3c>
     d3a:	53 c3       	rjmp	.+1702   	; 0x13e2 <vfprintf+0x6e2>
     d3c:	85 32       	cpi	r24, 0x25	; 37
     d3e:	39 f4       	brne	.+14     	; 0xd4e <vfprintf+0x4e>
     d40:	93 fd       	sbrc	r25, 3
     d42:	85 91       	lpm	r24, Z+
     d44:	93 ff       	sbrs	r25, 3
     d46:	81 91       	ld	r24, Z+
     d48:	1f 01       	movw	r2, r30
     d4a:	85 32       	cpi	r24, 0x25	; 37
     d4c:	39 f4       	brne	.+14     	; 0xd5c <vfprintf+0x5c>
     d4e:	b7 01       	movw	r22, r14
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
     d56:	56 01       	movw	r10, r12
     d58:	65 01       	movw	r12, r10
     d5a:	e5 cf       	rjmp	.-54     	; 0xd26 <vfprintf+0x26>
     d5c:	10 e0       	ldi	r17, 0x00	; 0
     d5e:	51 2c       	mov	r5, r1
     d60:	20 e0       	ldi	r18, 0x00	; 0
     d62:	20 32       	cpi	r18, 0x20	; 32
     d64:	a0 f4       	brcc	.+40     	; 0xd8e <vfprintf+0x8e>
     d66:	8b 32       	cpi	r24, 0x2B	; 43
     d68:	69 f0       	breq	.+26     	; 0xd84 <vfprintf+0x84>
     d6a:	30 f4       	brcc	.+12     	; 0xd78 <vfprintf+0x78>
     d6c:	80 32       	cpi	r24, 0x20	; 32
     d6e:	59 f0       	breq	.+22     	; 0xd86 <vfprintf+0x86>
     d70:	83 32       	cpi	r24, 0x23	; 35
     d72:	69 f4       	brne	.+26     	; 0xd8e <vfprintf+0x8e>
     d74:	20 61       	ori	r18, 0x10	; 16
     d76:	2c c0       	rjmp	.+88     	; 0xdd0 <vfprintf+0xd0>
     d78:	8d 32       	cpi	r24, 0x2D	; 45
     d7a:	39 f0       	breq	.+14     	; 0xd8a <vfprintf+0x8a>
     d7c:	80 33       	cpi	r24, 0x30	; 48
     d7e:	39 f4       	brne	.+14     	; 0xd8e <vfprintf+0x8e>
     d80:	21 60       	ori	r18, 0x01	; 1
     d82:	26 c0       	rjmp	.+76     	; 0xdd0 <vfprintf+0xd0>
     d84:	22 60       	ori	r18, 0x02	; 2
     d86:	24 60       	ori	r18, 0x04	; 4
     d88:	23 c0       	rjmp	.+70     	; 0xdd0 <vfprintf+0xd0>
     d8a:	28 60       	ori	r18, 0x08	; 8
     d8c:	21 c0       	rjmp	.+66     	; 0xdd0 <vfprintf+0xd0>
     d8e:	27 fd       	sbrc	r18, 7
     d90:	27 c0       	rjmp	.+78     	; 0xde0 <vfprintf+0xe0>
     d92:	30 ed       	ldi	r19, 0xD0	; 208
     d94:	38 0f       	add	r19, r24
     d96:	3a 30       	cpi	r19, 0x0A	; 10
     d98:	78 f4       	brcc	.+30     	; 0xdb8 <vfprintf+0xb8>
     d9a:	26 ff       	sbrs	r18, 6
     d9c:	06 c0       	rjmp	.+12     	; 0xdaa <vfprintf+0xaa>
     d9e:	fa e0       	ldi	r31, 0x0A	; 10
     da0:	1f 9f       	mul	r17, r31
     da2:	30 0d       	add	r19, r0
     da4:	11 24       	eor	r1, r1
     da6:	13 2f       	mov	r17, r19
     da8:	13 c0       	rjmp	.+38     	; 0xdd0 <vfprintf+0xd0>
     daa:	6a e0       	ldi	r22, 0x0A	; 10
     dac:	56 9e       	mul	r5, r22
     dae:	30 0d       	add	r19, r0
     db0:	11 24       	eor	r1, r1
     db2:	53 2e       	mov	r5, r19
     db4:	20 62       	ori	r18, 0x20	; 32
     db6:	0c c0       	rjmp	.+24     	; 0xdd0 <vfprintf+0xd0>
     db8:	8e 32       	cpi	r24, 0x2E	; 46
     dba:	21 f4       	brne	.+8      	; 0xdc4 <vfprintf+0xc4>
     dbc:	26 fd       	sbrc	r18, 6
     dbe:	11 c3       	rjmp	.+1570   	; 0x13e2 <vfprintf+0x6e2>
     dc0:	20 64       	ori	r18, 0x40	; 64
     dc2:	06 c0       	rjmp	.+12     	; 0xdd0 <vfprintf+0xd0>
     dc4:	8c 36       	cpi	r24, 0x6C	; 108
     dc6:	11 f4       	brne	.+4      	; 0xdcc <vfprintf+0xcc>
     dc8:	20 68       	ori	r18, 0x80	; 128
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <vfprintf+0xd0>
     dcc:	88 36       	cpi	r24, 0x68	; 104
     dce:	41 f4       	brne	.+16     	; 0xde0 <vfprintf+0xe0>
     dd0:	f1 01       	movw	r30, r2
     dd2:	93 fd       	sbrc	r25, 3
     dd4:	85 91       	lpm	r24, Z+
     dd6:	93 ff       	sbrs	r25, 3
     dd8:	81 91       	ld	r24, Z+
     dda:	1f 01       	movw	r2, r30
     ddc:	81 11       	cpse	r24, r1
     dde:	c1 cf       	rjmp	.-126    	; 0xd62 <vfprintf+0x62>
     de0:	9b eb       	ldi	r25, 0xBB	; 187
     de2:	98 0f       	add	r25, r24
     de4:	93 30       	cpi	r25, 0x03	; 3
     de6:	18 f4       	brcc	.+6      	; 0xdee <vfprintf+0xee>
     de8:	20 61       	ori	r18, 0x10	; 16
     dea:	80 5e       	subi	r24, 0xE0	; 224
     dec:	06 c0       	rjmp	.+12     	; 0xdfa <vfprintf+0xfa>
     dee:	9b e9       	ldi	r25, 0x9B	; 155
     df0:	98 0f       	add	r25, r24
     df2:	93 30       	cpi	r25, 0x03	; 3
     df4:	08 f0       	brcs	.+2      	; 0xdf8 <vfprintf+0xf8>
     df6:	aa c1       	rjmp	.+852    	; 0x114c <vfprintf+0x44c>
     df8:	2f 7e       	andi	r18, 0xEF	; 239
     dfa:	26 ff       	sbrs	r18, 6
     dfc:	16 e0       	ldi	r17, 0x06	; 6
     dfe:	2f 73       	andi	r18, 0x3F	; 63
     e00:	72 2e       	mov	r7, r18
     e02:	85 36       	cpi	r24, 0x65	; 101
     e04:	21 f4       	brne	.+8      	; 0xe0e <vfprintf+0x10e>
     e06:	f2 2f       	mov	r31, r18
     e08:	f0 64       	ori	r31, 0x40	; 64
     e0a:	7f 2e       	mov	r7, r31
     e0c:	08 c0       	rjmp	.+16     	; 0xe1e <vfprintf+0x11e>
     e0e:	86 36       	cpi	r24, 0x66	; 102
     e10:	21 f4       	brne	.+8      	; 0xe1a <vfprintf+0x11a>
     e12:	62 2f       	mov	r22, r18
     e14:	60 68       	ori	r22, 0x80	; 128
     e16:	76 2e       	mov	r7, r22
     e18:	02 c0       	rjmp	.+4      	; 0xe1e <vfprintf+0x11e>
     e1a:	11 11       	cpse	r17, r1
     e1c:	11 50       	subi	r17, 0x01	; 1
     e1e:	77 fe       	sbrs	r7, 7
     e20:	07 c0       	rjmp	.+14     	; 0xe30 <vfprintf+0x130>
     e22:	1c 33       	cpi	r17, 0x3C	; 60
     e24:	48 f4       	brcc	.+18     	; 0xe38 <vfprintf+0x138>
     e26:	44 24       	eor	r4, r4
     e28:	43 94       	inc	r4
     e2a:	41 0e       	add	r4, r17
     e2c:	27 e0       	ldi	r18, 0x07	; 7
     e2e:	0b c0       	rjmp	.+22     	; 0xe46 <vfprintf+0x146>
     e30:	18 30       	cpi	r17, 0x08	; 8
     e32:	30 f4       	brcc	.+12     	; 0xe40 <vfprintf+0x140>
     e34:	21 2f       	mov	r18, r17
     e36:	06 c0       	rjmp	.+12     	; 0xe44 <vfprintf+0x144>
     e38:	27 e0       	ldi	r18, 0x07	; 7
     e3a:	4c e3       	ldi	r20, 0x3C	; 60
     e3c:	44 2e       	mov	r4, r20
     e3e:	03 c0       	rjmp	.+6      	; 0xe46 <vfprintf+0x146>
     e40:	27 e0       	ldi	r18, 0x07	; 7
     e42:	17 e0       	ldi	r17, 0x07	; 7
     e44:	41 2c       	mov	r4, r1
     e46:	56 01       	movw	r10, r12
     e48:	74 e0       	ldi	r23, 0x04	; 4
     e4a:	a7 0e       	add	r10, r23
     e4c:	b1 1c       	adc	r11, r1
     e4e:	f6 01       	movw	r30, r12
     e50:	60 81       	ld	r22, Z
     e52:	71 81       	ldd	r23, Z+1	; 0x01
     e54:	82 81       	ldd	r24, Z+2	; 0x02
     e56:	93 81       	ldd	r25, Z+3	; 0x03
     e58:	04 2d       	mov	r16, r4
     e5a:	a4 01       	movw	r20, r8
     e5c:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <__ftoa_engine>
     e60:	6c 01       	movw	r12, r24
     e62:	09 81       	ldd	r16, Y+1	; 0x01
     e64:	00 ff       	sbrs	r16, 0
     e66:	02 c0       	rjmp	.+4      	; 0xe6c <vfprintf+0x16c>
     e68:	03 ff       	sbrs	r16, 3
     e6a:	06 c0       	rjmp	.+12     	; 0xe78 <vfprintf+0x178>
     e6c:	71 fc       	sbrc	r7, 1
     e6e:	07 c0       	rjmp	.+14     	; 0xe7e <vfprintf+0x17e>
     e70:	72 fc       	sbrc	r7, 2
     e72:	08 c0       	rjmp	.+16     	; 0xe84 <vfprintf+0x184>
     e74:	61 2c       	mov	r6, r1
     e76:	08 c0       	rjmp	.+16     	; 0xe88 <vfprintf+0x188>
     e78:	3d e2       	ldi	r19, 0x2D	; 45
     e7a:	63 2e       	mov	r6, r19
     e7c:	05 c0       	rjmp	.+10     	; 0xe88 <vfprintf+0x188>
     e7e:	2b e2       	ldi	r18, 0x2B	; 43
     e80:	62 2e       	mov	r6, r18
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <vfprintf+0x188>
     e84:	90 e2       	ldi	r25, 0x20	; 32
     e86:	69 2e       	mov	r6, r25
     e88:	80 2f       	mov	r24, r16
     e8a:	8c 70       	andi	r24, 0x0C	; 12
     e8c:	99 f1       	breq	.+102    	; 0xef4 <vfprintf+0x1f4>
     e8e:	66 20       	and	r6, r6
     e90:	11 f0       	breq	.+4      	; 0xe96 <vfprintf+0x196>
     e92:	84 e0       	ldi	r24, 0x04	; 4
     e94:	01 c0       	rjmp	.+2      	; 0xe98 <vfprintf+0x198>
     e96:	83 e0       	ldi	r24, 0x03	; 3
     e98:	85 15       	cp	r24, r5
     e9a:	10 f0       	brcs	.+4      	; 0xea0 <vfprintf+0x1a0>
     e9c:	51 2c       	mov	r5, r1
     e9e:	0b c0       	rjmp	.+22     	; 0xeb6 <vfprintf+0x1b6>
     ea0:	58 1a       	sub	r5, r24
     ea2:	73 fc       	sbrc	r7, 3
     ea4:	08 c0       	rjmp	.+16     	; 0xeb6 <vfprintf+0x1b6>
     ea6:	b7 01       	movw	r22, r14
     ea8:	80 e2       	ldi	r24, 0x20	; 32
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
     eb0:	5a 94       	dec	r5
     eb2:	c9 f7       	brne	.-14     	; 0xea6 <vfprintf+0x1a6>
     eb4:	f3 cf       	rjmp	.-26     	; 0xe9c <vfprintf+0x19c>
     eb6:	66 20       	and	r6, r6
     eb8:	29 f0       	breq	.+10     	; 0xec4 <vfprintf+0x1c4>
     eba:	b7 01       	movw	r22, r14
     ebc:	86 2d       	mov	r24, r6
     ebe:	90 e0       	ldi	r25, 0x00	; 0
     ec0:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
     ec4:	03 fd       	sbrc	r16, 3
     ec6:	03 c0       	rjmp	.+6      	; 0xece <vfprintf+0x1ce>
     ec8:	08 e3       	ldi	r16, 0x38	; 56
     eca:	11 e0       	ldi	r17, 0x01	; 1
     ecc:	02 c0       	rjmp	.+4      	; 0xed2 <vfprintf+0x1d2>
     ece:	04 e3       	ldi	r16, 0x34	; 52
     ed0:	11 e0       	ldi	r17, 0x01	; 1
     ed2:	f7 2d       	mov	r31, r7
     ed4:	f0 71       	andi	r31, 0x10	; 16
     ed6:	7f 2e       	mov	r7, r31
     ed8:	f8 01       	movw	r30, r16
     eda:	84 91       	lpm	r24, Z
     edc:	88 23       	and	r24, r24
     ede:	09 f4       	brne	.+2      	; 0xee2 <vfprintf+0x1e2>
     ee0:	76 c2       	rjmp	.+1260   	; 0x13ce <vfprintf+0x6ce>
     ee2:	71 10       	cpse	r7, r1
     ee4:	80 52       	subi	r24, 0x20	; 32
     ee6:	b7 01       	movw	r22, r14
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
     eee:	0f 5f       	subi	r16, 0xFF	; 255
     ef0:	1f 4f       	sbci	r17, 0xFF	; 255
     ef2:	f2 cf       	rjmp	.-28     	; 0xed8 <vfprintf+0x1d8>
     ef4:	77 fe       	sbrs	r7, 7
     ef6:	0f c0       	rjmp	.+30     	; 0xf16 <vfprintf+0x216>
     ef8:	4c 0c       	add	r4, r12
     efa:	04 ff       	sbrs	r16, 4
     efc:	04 c0       	rjmp	.+8      	; 0xf06 <vfprintf+0x206>
     efe:	8a 81       	ldd	r24, Y+2	; 0x02
     f00:	81 33       	cpi	r24, 0x31	; 49
     f02:	09 f4       	brne	.+2      	; 0xf06 <vfprintf+0x206>
     f04:	4a 94       	dec	r4
     f06:	14 14       	cp	r1, r4
     f08:	74 f5       	brge	.+92     	; 0xf66 <vfprintf+0x266>
     f0a:	f8 e0       	ldi	r31, 0x08	; 8
     f0c:	f4 15       	cp	r31, r4
     f0e:	78 f5       	brcc	.+94     	; 0xf6e <vfprintf+0x26e>
     f10:	88 e0       	ldi	r24, 0x08	; 8
     f12:	48 2e       	mov	r4, r24
     f14:	2c c0       	rjmp	.+88     	; 0xf6e <vfprintf+0x26e>
     f16:	76 fc       	sbrc	r7, 6
     f18:	2a c0       	rjmp	.+84     	; 0xf6e <vfprintf+0x26e>
     f1a:	81 2f       	mov	r24, r17
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	8c 15       	cp	r24, r12
     f20:	9d 05       	cpc	r25, r13
     f22:	9c f0       	brlt	.+38     	; 0xf4a <vfprintf+0x24a>
     f24:	6c ef       	ldi	r22, 0xFC	; 252
     f26:	c6 16       	cp	r12, r22
     f28:	6f ef       	ldi	r22, 0xFF	; 255
     f2a:	d6 06       	cpc	r13, r22
     f2c:	74 f0       	brlt	.+28     	; 0xf4a <vfprintf+0x24a>
     f2e:	77 2d       	mov	r23, r7
     f30:	70 68       	ori	r23, 0x80	; 128
     f32:	77 2e       	mov	r7, r23
     f34:	0a c0       	rjmp	.+20     	; 0xf4a <vfprintf+0x24a>
     f36:	e2 e0       	ldi	r30, 0x02	; 2
     f38:	f0 e0       	ldi	r31, 0x00	; 0
     f3a:	ec 0f       	add	r30, r28
     f3c:	fd 1f       	adc	r31, r29
     f3e:	e1 0f       	add	r30, r17
     f40:	f1 1d       	adc	r31, r1
     f42:	80 81       	ld	r24, Z
     f44:	80 33       	cpi	r24, 0x30	; 48
     f46:	19 f4       	brne	.+6      	; 0xf4e <vfprintf+0x24e>
     f48:	11 50       	subi	r17, 0x01	; 1
     f4a:	11 11       	cpse	r17, r1
     f4c:	f4 cf       	rjmp	.-24     	; 0xf36 <vfprintf+0x236>
     f4e:	77 fe       	sbrs	r7, 7
     f50:	0e c0       	rjmp	.+28     	; 0xf6e <vfprintf+0x26e>
     f52:	44 24       	eor	r4, r4
     f54:	43 94       	inc	r4
     f56:	41 0e       	add	r4, r17
     f58:	81 2f       	mov	r24, r17
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	c8 16       	cp	r12, r24
     f5e:	d9 06       	cpc	r13, r25
     f60:	2c f4       	brge	.+10     	; 0xf6c <vfprintf+0x26c>
     f62:	1c 19       	sub	r17, r12
     f64:	04 c0       	rjmp	.+8      	; 0xf6e <vfprintf+0x26e>
     f66:	44 24       	eor	r4, r4
     f68:	43 94       	inc	r4
     f6a:	01 c0       	rjmp	.+2      	; 0xf6e <vfprintf+0x26e>
     f6c:	10 e0       	ldi	r17, 0x00	; 0
     f6e:	77 fe       	sbrs	r7, 7
     f70:	07 c0       	rjmp	.+14     	; 0xf80 <vfprintf+0x280>
     f72:	1c 14       	cp	r1, r12
     f74:	1d 04       	cpc	r1, r13
     f76:	3c f4       	brge	.+14     	; 0xf86 <vfprintf+0x286>
     f78:	96 01       	movw	r18, r12
     f7a:	2f 5f       	subi	r18, 0xFF	; 255
     f7c:	3f 4f       	sbci	r19, 0xFF	; 255
     f7e:	05 c0       	rjmp	.+10     	; 0xf8a <vfprintf+0x28a>
     f80:	25 e0       	ldi	r18, 0x05	; 5
     f82:	30 e0       	ldi	r19, 0x00	; 0
     f84:	02 c0       	rjmp	.+4      	; 0xf8a <vfprintf+0x28a>
     f86:	21 e0       	ldi	r18, 0x01	; 1
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	66 20       	and	r6, r6
     f8c:	11 f0       	breq	.+4      	; 0xf92 <vfprintf+0x292>
     f8e:	2f 5f       	subi	r18, 0xFF	; 255
     f90:	3f 4f       	sbci	r19, 0xFF	; 255
     f92:	11 23       	and	r17, r17
     f94:	31 f0       	breq	.+12     	; 0xfa2 <vfprintf+0x2a2>
     f96:	41 2f       	mov	r20, r17
     f98:	50 e0       	ldi	r21, 0x00	; 0
     f9a:	4f 5f       	subi	r20, 0xFF	; 255
     f9c:	5f 4f       	sbci	r21, 0xFF	; 255
     f9e:	24 0f       	add	r18, r20
     fa0:	35 1f       	adc	r19, r21
     fa2:	45 2d       	mov	r20, r5
     fa4:	50 e0       	ldi	r21, 0x00	; 0
     fa6:	24 17       	cp	r18, r20
     fa8:	35 07       	cpc	r19, r21
     faa:	14 f4       	brge	.+4      	; 0xfb0 <vfprintf+0x2b0>
     fac:	52 1a       	sub	r5, r18
     fae:	01 c0       	rjmp	.+2      	; 0xfb2 <vfprintf+0x2b2>
     fb0:	51 2c       	mov	r5, r1
     fb2:	87 2d       	mov	r24, r7
     fb4:	89 70       	andi	r24, 0x09	; 9
     fb6:	49 f4       	brne	.+18     	; 0xfca <vfprintf+0x2ca>
     fb8:	55 20       	and	r5, r5
     fba:	39 f0       	breq	.+14     	; 0xfca <vfprintf+0x2ca>
     fbc:	b7 01       	movw	r22, r14
     fbe:	80 e2       	ldi	r24, 0x20	; 32
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
     fc6:	5a 94       	dec	r5
     fc8:	f7 cf       	rjmp	.-18     	; 0xfb8 <vfprintf+0x2b8>
     fca:	66 20       	and	r6, r6
     fcc:	29 f0       	breq	.+10     	; 0xfd8 <vfprintf+0x2d8>
     fce:	b7 01       	movw	r22, r14
     fd0:	86 2d       	mov	r24, r6
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
     fd8:	73 fc       	sbrc	r7, 3
     fda:	09 c0       	rjmp	.+18     	; 0xfee <vfprintf+0x2ee>
     fdc:	55 20       	and	r5, r5
     fde:	39 f0       	breq	.+14     	; 0xfee <vfprintf+0x2ee>
     fe0:	b7 01       	movw	r22, r14
     fe2:	80 e3       	ldi	r24, 0x30	; 48
     fe4:	90 e0       	ldi	r25, 0x00	; 0
     fe6:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
     fea:	5a 94       	dec	r5
     fec:	f7 cf       	rjmp	.-18     	; 0xfdc <vfprintf+0x2dc>
     fee:	77 fe       	sbrs	r7, 7
     ff0:	5f c0       	rjmp	.+190    	; 0x10b0 <vfprintf+0x3b0>
     ff2:	9c 2d       	mov	r25, r12
     ff4:	8d 2d       	mov	r24, r13
     ff6:	d7 fe       	sbrs	r13, 7
     ff8:	02 c0       	rjmp	.+4      	; 0xffe <vfprintf+0x2fe>
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	69 2e       	mov	r6, r25
    1000:	78 2e       	mov	r7, r24
    1002:	40 e0       	ldi	r20, 0x00	; 0
    1004:	50 e0       	ldi	r21, 0x00	; 0
    1006:	c6 01       	movw	r24, r12
    1008:	84 19       	sub	r24, r4
    100a:	91 09       	sbc	r25, r1
    100c:	9d 87       	std	Y+13, r25	; 0x0d
    100e:	8c 87       	std	Y+12, r24	; 0x0c
    1010:	96 01       	movw	r18, r12
    1012:	26 19       	sub	r18, r6
    1014:	37 09       	sbc	r19, r7
    1016:	28 0d       	add	r18, r8
    1018:	39 1d       	adc	r19, r9
    101a:	81 2f       	mov	r24, r17
    101c:	90 e0       	ldi	r25, 0x00	; 0
    101e:	ee 27       	eor	r30, r30
    1020:	ff 27       	eor	r31, r31
    1022:	e8 1b       	sub	r30, r24
    1024:	f9 0b       	sbc	r31, r25
    1026:	ff 87       	std	Y+15, r31	; 0x0f
    1028:	ee 87       	std	Y+14, r30	; 0x0e
    102a:	ff ef       	ldi	r31, 0xFF	; 255
    102c:	6f 16       	cp	r6, r31
    102e:	7f 06       	cpc	r7, r31
    1030:	69 f4       	brne	.+26     	; 0x104c <vfprintf+0x34c>
    1032:	b7 01       	movw	r22, r14
    1034:	8e e2       	ldi	r24, 0x2E	; 46
    1036:	90 e0       	ldi	r25, 0x00	; 0
    1038:	2b 8b       	std	Y+19, r18	; 0x13
    103a:	3a 8b       	std	Y+18, r19	; 0x12
    103c:	48 8b       	std	Y+16, r20	; 0x10
    103e:	59 8b       	std	Y+17, r21	; 0x11
    1040:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    1044:	59 89       	ldd	r21, Y+17	; 0x11
    1046:	48 89       	ldd	r20, Y+16	; 0x10
    1048:	3a 89       	ldd	r19, Y+18	; 0x12
    104a:	2b 89       	ldd	r18, Y+19	; 0x13
    104c:	c6 14       	cp	r12, r6
    104e:	d7 04       	cpc	r13, r7
    1050:	54 f0       	brlt	.+20     	; 0x1066 <vfprintf+0x366>
    1052:	6c 85       	ldd	r22, Y+12	; 0x0c
    1054:	7d 85       	ldd	r23, Y+13	; 0x0d
    1056:	66 15       	cp	r22, r6
    1058:	77 05       	cpc	r23, r7
    105a:	2c f4       	brge	.+10     	; 0x1066 <vfprintf+0x366>
    105c:	f9 01       	movw	r30, r18
    105e:	e4 0f       	add	r30, r20
    1060:	f5 1f       	adc	r31, r21
    1062:	81 81       	ldd	r24, Z+1	; 0x01
    1064:	01 c0       	rjmp	.+2      	; 0x1068 <vfprintf+0x368>
    1066:	80 e3       	ldi	r24, 0x30	; 48
    1068:	71 e0       	ldi	r23, 0x01	; 1
    106a:	67 1a       	sub	r6, r23
    106c:	71 08       	sbc	r7, r1
    106e:	4f 5f       	subi	r20, 0xFF	; 255
    1070:	5f 4f       	sbci	r21, 0xFF	; 255
    1072:	ee 85       	ldd	r30, Y+14	; 0x0e
    1074:	ff 85       	ldd	r31, Y+15	; 0x0f
    1076:	6e 16       	cp	r6, r30
    1078:	7f 06       	cpc	r7, r31
    107a:	6c f0       	brlt	.+26     	; 0x1096 <vfprintf+0x396>
    107c:	b7 01       	movw	r22, r14
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	2b 8b       	std	Y+19, r18	; 0x13
    1082:	3a 8b       	std	Y+18, r19	; 0x12
    1084:	48 8b       	std	Y+16, r20	; 0x10
    1086:	59 8b       	std	Y+17, r21	; 0x11
    1088:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    108c:	2b 89       	ldd	r18, Y+19	; 0x13
    108e:	3a 89       	ldd	r19, Y+18	; 0x12
    1090:	48 89       	ldd	r20, Y+16	; 0x10
    1092:	59 89       	ldd	r21, Y+17	; 0x11
    1094:	ca cf       	rjmp	.-108    	; 0x102a <vfprintf+0x32a>
    1096:	6c 14       	cp	r6, r12
    1098:	7d 04       	cpc	r7, r13
    109a:	39 f4       	brne	.+14     	; 0x10aa <vfprintf+0x3aa>
    109c:	9a 81       	ldd	r25, Y+2	; 0x02
    109e:	96 33       	cpi	r25, 0x36	; 54
    10a0:	18 f4       	brcc	.+6      	; 0x10a8 <vfprintf+0x3a8>
    10a2:	95 33       	cpi	r25, 0x35	; 53
    10a4:	11 f4       	brne	.+4      	; 0x10aa <vfprintf+0x3aa>
    10a6:	04 ff       	sbrs	r16, 4
    10a8:	81 e3       	ldi	r24, 0x31	; 49
    10aa:	b7 01       	movw	r22, r14
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	4b c0       	rjmp	.+150    	; 0x1146 <vfprintf+0x446>
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	81 33       	cpi	r24, 0x31	; 49
    10b4:	09 f0       	breq	.+2      	; 0x10b8 <vfprintf+0x3b8>
    10b6:	0f 7e       	andi	r16, 0xEF	; 239
    10b8:	b7 01       	movw	r22, r14
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    10c0:	11 11       	cpse	r17, r1
    10c2:	05 c0       	rjmp	.+10     	; 0x10ce <vfprintf+0x3ce>
    10c4:	74 fe       	sbrs	r7, 4
    10c6:	18 c0       	rjmp	.+48     	; 0x10f8 <vfprintf+0x3f8>
    10c8:	85 e4       	ldi	r24, 0x45	; 69
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	17 c0       	rjmp	.+46     	; 0x10fc <vfprintf+0x3fc>
    10ce:	b7 01       	movw	r22, r14
    10d0:	8e e2       	ldi	r24, 0x2E	; 46
    10d2:	90 e0       	ldi	r25, 0x00	; 0
    10d4:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    10d8:	82 e0       	ldi	r24, 0x02	; 2
    10da:	66 24       	eor	r6, r6
    10dc:	63 94       	inc	r6
    10de:	68 0e       	add	r6, r24
    10e0:	f4 01       	movw	r30, r8
    10e2:	e8 0f       	add	r30, r24
    10e4:	f1 1d       	adc	r31, r1
    10e6:	80 81       	ld	r24, Z
    10e8:	b7 01       	movw	r22, r14
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    10f0:	11 50       	subi	r17, 0x01	; 1
    10f2:	41 f3       	breq	.-48     	; 0x10c4 <vfprintf+0x3c4>
    10f4:	86 2d       	mov	r24, r6
    10f6:	f1 cf       	rjmp	.-30     	; 0x10da <vfprintf+0x3da>
    10f8:	85 e6       	ldi	r24, 0x65	; 101
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	b7 01       	movw	r22, r14
    10fe:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    1102:	d7 fc       	sbrc	r13, 7
    1104:	05 c0       	rjmp	.+10     	; 0x1110 <vfprintf+0x410>
    1106:	c1 14       	cp	r12, r1
    1108:	d1 04       	cpc	r13, r1
    110a:	39 f4       	brne	.+14     	; 0x111a <vfprintf+0x41a>
    110c:	04 ff       	sbrs	r16, 4
    110e:	05 c0       	rjmp	.+10     	; 0x111a <vfprintf+0x41a>
    1110:	d1 94       	neg	r13
    1112:	c1 94       	neg	r12
    1114:	d1 08       	sbc	r13, r1
    1116:	8d e2       	ldi	r24, 0x2D	; 45
    1118:	01 c0       	rjmp	.+2      	; 0x111c <vfprintf+0x41c>
    111a:	8b e2       	ldi	r24, 0x2B	; 43
    111c:	b7 01       	movw	r22, r14
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    1124:	80 e3       	ldi	r24, 0x30	; 48
    1126:	6a e0       	ldi	r22, 0x0A	; 10
    1128:	c6 16       	cp	r12, r22
    112a:	d1 04       	cpc	r13, r1
    112c:	2c f0       	brlt	.+10     	; 0x1138 <vfprintf+0x438>
    112e:	8f 5f       	subi	r24, 0xFF	; 255
    1130:	fa e0       	ldi	r31, 0x0A	; 10
    1132:	cf 1a       	sub	r12, r31
    1134:	d1 08       	sbc	r13, r1
    1136:	f7 cf       	rjmp	.-18     	; 0x1126 <vfprintf+0x426>
    1138:	b7 01       	movw	r22, r14
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    1140:	b7 01       	movw	r22, r14
    1142:	c6 01       	movw	r24, r12
    1144:	c0 96       	adiw	r24, 0x30	; 48
    1146:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    114a:	41 c1       	rjmp	.+642    	; 0x13ce <vfprintf+0x6ce>
    114c:	83 36       	cpi	r24, 0x63	; 99
    114e:	31 f0       	breq	.+12     	; 0x115c <vfprintf+0x45c>
    1150:	83 37       	cpi	r24, 0x73	; 115
    1152:	79 f0       	breq	.+30     	; 0x1172 <vfprintf+0x472>
    1154:	83 35       	cpi	r24, 0x53	; 83
    1156:	09 f0       	breq	.+2      	; 0x115a <vfprintf+0x45a>
    1158:	58 c0       	rjmp	.+176    	; 0x120a <vfprintf+0x50a>
    115a:	21 c0       	rjmp	.+66     	; 0x119e <vfprintf+0x49e>
    115c:	56 01       	movw	r10, r12
    115e:	72 e0       	ldi	r23, 0x02	; 2
    1160:	a7 0e       	add	r10, r23
    1162:	b1 1c       	adc	r11, r1
    1164:	f6 01       	movw	r30, r12
    1166:	80 81       	ld	r24, Z
    1168:	89 83       	std	Y+1, r24	; 0x01
    116a:	01 e0       	ldi	r16, 0x01	; 1
    116c:	10 e0       	ldi	r17, 0x00	; 0
    116e:	64 01       	movw	r12, r8
    1170:	14 c0       	rjmp	.+40     	; 0x119a <vfprintf+0x49a>
    1172:	56 01       	movw	r10, r12
    1174:	f2 e0       	ldi	r31, 0x02	; 2
    1176:	af 0e       	add	r10, r31
    1178:	b1 1c       	adc	r11, r1
    117a:	f6 01       	movw	r30, r12
    117c:	c0 80       	ld	r12, Z
    117e:	d1 80       	ldd	r13, Z+1	; 0x01
    1180:	26 ff       	sbrs	r18, 6
    1182:	03 c0       	rjmp	.+6      	; 0x118a <vfprintf+0x48a>
    1184:	61 2f       	mov	r22, r17
    1186:	70 e0       	ldi	r23, 0x00	; 0
    1188:	02 c0       	rjmp	.+4      	; 0x118e <vfprintf+0x48e>
    118a:	6f ef       	ldi	r22, 0xFF	; 255
    118c:	7f ef       	ldi	r23, 0xFF	; 255
    118e:	c6 01       	movw	r24, r12
    1190:	2b 8b       	std	Y+19, r18	; 0x13
    1192:	0e 94 37 0b 	call	0x166e	; 0x166e <strnlen>
    1196:	8c 01       	movw	r16, r24
    1198:	2b 89       	ldd	r18, Y+19	; 0x13
    119a:	2f 77       	andi	r18, 0x7F	; 127
    119c:	15 c0       	rjmp	.+42     	; 0x11c8 <vfprintf+0x4c8>
    119e:	56 01       	movw	r10, r12
    11a0:	f2 e0       	ldi	r31, 0x02	; 2
    11a2:	af 0e       	add	r10, r31
    11a4:	b1 1c       	adc	r11, r1
    11a6:	f6 01       	movw	r30, r12
    11a8:	c0 80       	ld	r12, Z
    11aa:	d1 80       	ldd	r13, Z+1	; 0x01
    11ac:	26 ff       	sbrs	r18, 6
    11ae:	03 c0       	rjmp	.+6      	; 0x11b6 <vfprintf+0x4b6>
    11b0:	61 2f       	mov	r22, r17
    11b2:	70 e0       	ldi	r23, 0x00	; 0
    11b4:	02 c0       	rjmp	.+4      	; 0x11ba <vfprintf+0x4ba>
    11b6:	6f ef       	ldi	r22, 0xFF	; 255
    11b8:	7f ef       	ldi	r23, 0xFF	; 255
    11ba:	c6 01       	movw	r24, r12
    11bc:	2b 8b       	std	Y+19, r18	; 0x13
    11be:	0e 94 2c 0b 	call	0x1658	; 0x1658 <strnlen_P>
    11c2:	8c 01       	movw	r16, r24
    11c4:	2b 89       	ldd	r18, Y+19	; 0x13
    11c6:	20 68       	ori	r18, 0x80	; 128
    11c8:	72 2e       	mov	r7, r18
    11ca:	23 fd       	sbrc	r18, 3
    11cc:	1a c0       	rjmp	.+52     	; 0x1202 <vfprintf+0x502>
    11ce:	85 2d       	mov	r24, r5
    11d0:	90 e0       	ldi	r25, 0x00	; 0
    11d2:	08 17       	cp	r16, r24
    11d4:	19 07       	cpc	r17, r25
    11d6:	a8 f4       	brcc	.+42     	; 0x1202 <vfprintf+0x502>
    11d8:	b7 01       	movw	r22, r14
    11da:	80 e2       	ldi	r24, 0x20	; 32
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    11e2:	5a 94       	dec	r5
    11e4:	f4 cf       	rjmp	.-24     	; 0x11ce <vfprintf+0x4ce>
    11e6:	f6 01       	movw	r30, r12
    11e8:	77 fc       	sbrc	r7, 7
    11ea:	85 91       	lpm	r24, Z+
    11ec:	77 fe       	sbrs	r7, 7
    11ee:	81 91       	ld	r24, Z+
    11f0:	6f 01       	movw	r12, r30
    11f2:	b7 01       	movw	r22, r14
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    11fa:	51 10       	cpse	r5, r1
    11fc:	5a 94       	dec	r5
    11fe:	01 50       	subi	r16, 0x01	; 1
    1200:	11 09       	sbc	r17, r1
    1202:	01 15       	cp	r16, r1
    1204:	11 05       	cpc	r17, r1
    1206:	79 f7       	brne	.-34     	; 0x11e6 <vfprintf+0x4e6>
    1208:	e2 c0       	rjmp	.+452    	; 0x13ce <vfprintf+0x6ce>
    120a:	84 36       	cpi	r24, 0x64	; 100
    120c:	11 f0       	breq	.+4      	; 0x1212 <vfprintf+0x512>
    120e:	89 36       	cpi	r24, 0x69	; 105
    1210:	51 f5       	brne	.+84     	; 0x1266 <vfprintf+0x566>
    1212:	56 01       	movw	r10, r12
    1214:	27 ff       	sbrs	r18, 7
    1216:	09 c0       	rjmp	.+18     	; 0x122a <vfprintf+0x52a>
    1218:	f4 e0       	ldi	r31, 0x04	; 4
    121a:	af 0e       	add	r10, r31
    121c:	b1 1c       	adc	r11, r1
    121e:	f6 01       	movw	r30, r12
    1220:	60 81       	ld	r22, Z
    1222:	71 81       	ldd	r23, Z+1	; 0x01
    1224:	82 81       	ldd	r24, Z+2	; 0x02
    1226:	93 81       	ldd	r25, Z+3	; 0x03
    1228:	0a c0       	rjmp	.+20     	; 0x123e <vfprintf+0x53e>
    122a:	f2 e0       	ldi	r31, 0x02	; 2
    122c:	af 0e       	add	r10, r31
    122e:	b1 1c       	adc	r11, r1
    1230:	f6 01       	movw	r30, r12
    1232:	60 81       	ld	r22, Z
    1234:	71 81       	ldd	r23, Z+1	; 0x01
    1236:	88 27       	eor	r24, r24
    1238:	77 fd       	sbrc	r23, 7
    123a:	80 95       	com	r24
    123c:	98 2f       	mov	r25, r24
    123e:	02 2f       	mov	r16, r18
    1240:	0f 76       	andi	r16, 0x6F	; 111
    1242:	97 ff       	sbrs	r25, 7
    1244:	08 c0       	rjmp	.+16     	; 0x1256 <vfprintf+0x556>
    1246:	90 95       	com	r25
    1248:	80 95       	com	r24
    124a:	70 95       	com	r23
    124c:	61 95       	neg	r22
    124e:	7f 4f       	sbci	r23, 0xFF	; 255
    1250:	8f 4f       	sbci	r24, 0xFF	; 255
    1252:	9f 4f       	sbci	r25, 0xFF	; 255
    1254:	00 68       	ori	r16, 0x80	; 128
    1256:	2a e0       	ldi	r18, 0x0A	; 10
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	a4 01       	movw	r20, r8
    125c:	0e 94 b5 0b 	call	0x176a	; 0x176a <__ultoa_invert>
    1260:	c8 2e       	mov	r12, r24
    1262:	c8 18       	sub	r12, r8
    1264:	3e c0       	rjmp	.+124    	; 0x12e2 <vfprintf+0x5e2>
    1266:	02 2f       	mov	r16, r18
    1268:	85 37       	cpi	r24, 0x75	; 117
    126a:	21 f4       	brne	.+8      	; 0x1274 <vfprintf+0x574>
    126c:	0f 7e       	andi	r16, 0xEF	; 239
    126e:	2a e0       	ldi	r18, 0x0A	; 10
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	1d c0       	rjmp	.+58     	; 0x12ae <vfprintf+0x5ae>
    1274:	09 7f       	andi	r16, 0xF9	; 249
    1276:	8f 36       	cpi	r24, 0x6F	; 111
    1278:	91 f0       	breq	.+36     	; 0x129e <vfprintf+0x59e>
    127a:	18 f4       	brcc	.+6      	; 0x1282 <vfprintf+0x582>
    127c:	88 35       	cpi	r24, 0x58	; 88
    127e:	59 f0       	breq	.+22     	; 0x1296 <vfprintf+0x596>
    1280:	b0 c0       	rjmp	.+352    	; 0x13e2 <vfprintf+0x6e2>
    1282:	80 37       	cpi	r24, 0x70	; 112
    1284:	19 f0       	breq	.+6      	; 0x128c <vfprintf+0x58c>
    1286:	88 37       	cpi	r24, 0x78	; 120
    1288:	11 f0       	breq	.+4      	; 0x128e <vfprintf+0x58e>
    128a:	ab c0       	rjmp	.+342    	; 0x13e2 <vfprintf+0x6e2>
    128c:	00 61       	ori	r16, 0x10	; 16
    128e:	04 ff       	sbrs	r16, 4
    1290:	09 c0       	rjmp	.+18     	; 0x12a4 <vfprintf+0x5a4>
    1292:	04 60       	ori	r16, 0x04	; 4
    1294:	07 c0       	rjmp	.+14     	; 0x12a4 <vfprintf+0x5a4>
    1296:	24 ff       	sbrs	r18, 4
    1298:	08 c0       	rjmp	.+16     	; 0x12aa <vfprintf+0x5aa>
    129a:	06 60       	ori	r16, 0x06	; 6
    129c:	06 c0       	rjmp	.+12     	; 0x12aa <vfprintf+0x5aa>
    129e:	28 e0       	ldi	r18, 0x08	; 8
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	05 c0       	rjmp	.+10     	; 0x12ae <vfprintf+0x5ae>
    12a4:	20 e1       	ldi	r18, 0x10	; 16
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	02 c0       	rjmp	.+4      	; 0x12ae <vfprintf+0x5ae>
    12aa:	20 e1       	ldi	r18, 0x10	; 16
    12ac:	32 e0       	ldi	r19, 0x02	; 2
    12ae:	56 01       	movw	r10, r12
    12b0:	07 ff       	sbrs	r16, 7
    12b2:	09 c0       	rjmp	.+18     	; 0x12c6 <vfprintf+0x5c6>
    12b4:	f4 e0       	ldi	r31, 0x04	; 4
    12b6:	af 0e       	add	r10, r31
    12b8:	b1 1c       	adc	r11, r1
    12ba:	f6 01       	movw	r30, r12
    12bc:	60 81       	ld	r22, Z
    12be:	71 81       	ldd	r23, Z+1	; 0x01
    12c0:	82 81       	ldd	r24, Z+2	; 0x02
    12c2:	93 81       	ldd	r25, Z+3	; 0x03
    12c4:	08 c0       	rjmp	.+16     	; 0x12d6 <vfprintf+0x5d6>
    12c6:	f2 e0       	ldi	r31, 0x02	; 2
    12c8:	af 0e       	add	r10, r31
    12ca:	b1 1c       	adc	r11, r1
    12cc:	f6 01       	movw	r30, r12
    12ce:	60 81       	ld	r22, Z
    12d0:	71 81       	ldd	r23, Z+1	; 0x01
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	a4 01       	movw	r20, r8
    12d8:	0e 94 b5 0b 	call	0x176a	; 0x176a <__ultoa_invert>
    12dc:	c8 2e       	mov	r12, r24
    12de:	c8 18       	sub	r12, r8
    12e0:	0f 77       	andi	r16, 0x7F	; 127
    12e2:	06 ff       	sbrs	r16, 6
    12e4:	0b c0       	rjmp	.+22     	; 0x12fc <vfprintf+0x5fc>
    12e6:	20 2f       	mov	r18, r16
    12e8:	2e 7f       	andi	r18, 0xFE	; 254
    12ea:	c1 16       	cp	r12, r17
    12ec:	50 f4       	brcc	.+20     	; 0x1302 <vfprintf+0x602>
    12ee:	04 ff       	sbrs	r16, 4
    12f0:	0a c0       	rjmp	.+20     	; 0x1306 <vfprintf+0x606>
    12f2:	02 fd       	sbrc	r16, 2
    12f4:	08 c0       	rjmp	.+16     	; 0x1306 <vfprintf+0x606>
    12f6:	20 2f       	mov	r18, r16
    12f8:	2e 7e       	andi	r18, 0xEE	; 238
    12fa:	05 c0       	rjmp	.+10     	; 0x1306 <vfprintf+0x606>
    12fc:	dc 2c       	mov	r13, r12
    12fe:	20 2f       	mov	r18, r16
    1300:	03 c0       	rjmp	.+6      	; 0x1308 <vfprintf+0x608>
    1302:	dc 2c       	mov	r13, r12
    1304:	01 c0       	rjmp	.+2      	; 0x1308 <vfprintf+0x608>
    1306:	d1 2e       	mov	r13, r17
    1308:	24 ff       	sbrs	r18, 4
    130a:	0d c0       	rjmp	.+26     	; 0x1326 <vfprintf+0x626>
    130c:	fe 01       	movw	r30, r28
    130e:	ec 0d       	add	r30, r12
    1310:	f1 1d       	adc	r31, r1
    1312:	80 81       	ld	r24, Z
    1314:	80 33       	cpi	r24, 0x30	; 48
    1316:	11 f4       	brne	.+4      	; 0x131c <vfprintf+0x61c>
    1318:	29 7e       	andi	r18, 0xE9	; 233
    131a:	09 c0       	rjmp	.+18     	; 0x132e <vfprintf+0x62e>
    131c:	22 ff       	sbrs	r18, 2
    131e:	06 c0       	rjmp	.+12     	; 0x132c <vfprintf+0x62c>
    1320:	d3 94       	inc	r13
    1322:	d3 94       	inc	r13
    1324:	04 c0       	rjmp	.+8      	; 0x132e <vfprintf+0x62e>
    1326:	82 2f       	mov	r24, r18
    1328:	86 78       	andi	r24, 0x86	; 134
    132a:	09 f0       	breq	.+2      	; 0x132e <vfprintf+0x62e>
    132c:	d3 94       	inc	r13
    132e:	23 fd       	sbrc	r18, 3
    1330:	13 c0       	rjmp	.+38     	; 0x1358 <vfprintf+0x658>
    1332:	20 ff       	sbrs	r18, 0
    1334:	06 c0       	rjmp	.+12     	; 0x1342 <vfprintf+0x642>
    1336:	1c 2d       	mov	r17, r12
    1338:	d5 14       	cp	r13, r5
    133a:	18 f4       	brcc	.+6      	; 0x1342 <vfprintf+0x642>
    133c:	15 0d       	add	r17, r5
    133e:	1d 19       	sub	r17, r13
    1340:	d5 2c       	mov	r13, r5
    1342:	d5 14       	cp	r13, r5
    1344:	68 f4       	brcc	.+26     	; 0x1360 <vfprintf+0x660>
    1346:	b7 01       	movw	r22, r14
    1348:	80 e2       	ldi	r24, 0x20	; 32
    134a:	90 e0       	ldi	r25, 0x00	; 0
    134c:	2b 8b       	std	Y+19, r18	; 0x13
    134e:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    1352:	d3 94       	inc	r13
    1354:	2b 89       	ldd	r18, Y+19	; 0x13
    1356:	f5 cf       	rjmp	.-22     	; 0x1342 <vfprintf+0x642>
    1358:	d5 14       	cp	r13, r5
    135a:	10 f4       	brcc	.+4      	; 0x1360 <vfprintf+0x660>
    135c:	5d 18       	sub	r5, r13
    135e:	01 c0       	rjmp	.+2      	; 0x1362 <vfprintf+0x662>
    1360:	51 2c       	mov	r5, r1
    1362:	24 ff       	sbrs	r18, 4
    1364:	12 c0       	rjmp	.+36     	; 0x138a <vfprintf+0x68a>
    1366:	b7 01       	movw	r22, r14
    1368:	80 e3       	ldi	r24, 0x30	; 48
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	2b 8b       	std	Y+19, r18	; 0x13
    136e:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    1372:	2b 89       	ldd	r18, Y+19	; 0x13
    1374:	22 ff       	sbrs	r18, 2
    1376:	17 c0       	rjmp	.+46     	; 0x13a6 <vfprintf+0x6a6>
    1378:	21 ff       	sbrs	r18, 1
    137a:	03 c0       	rjmp	.+6      	; 0x1382 <vfprintf+0x682>
    137c:	88 e5       	ldi	r24, 0x58	; 88
    137e:	90 e0       	ldi	r25, 0x00	; 0
    1380:	02 c0       	rjmp	.+4      	; 0x1386 <vfprintf+0x686>
    1382:	88 e7       	ldi	r24, 0x78	; 120
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	b7 01       	movw	r22, r14
    1388:	0c c0       	rjmp	.+24     	; 0x13a2 <vfprintf+0x6a2>
    138a:	82 2f       	mov	r24, r18
    138c:	86 78       	andi	r24, 0x86	; 134
    138e:	59 f0       	breq	.+22     	; 0x13a6 <vfprintf+0x6a6>
    1390:	21 fd       	sbrc	r18, 1
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <vfprintf+0x698>
    1394:	80 e2       	ldi	r24, 0x20	; 32
    1396:	01 c0       	rjmp	.+2      	; 0x139a <vfprintf+0x69a>
    1398:	8b e2       	ldi	r24, 0x2B	; 43
    139a:	27 fd       	sbrc	r18, 7
    139c:	8d e2       	ldi	r24, 0x2D	; 45
    139e:	b7 01       	movw	r22, r14
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    13a2:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    13a6:	c1 16       	cp	r12, r17
    13a8:	38 f4       	brcc	.+14     	; 0x13b8 <vfprintf+0x6b8>
    13aa:	b7 01       	movw	r22, r14
    13ac:	80 e3       	ldi	r24, 0x30	; 48
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    13b4:	11 50       	subi	r17, 0x01	; 1
    13b6:	f7 cf       	rjmp	.-18     	; 0x13a6 <vfprintf+0x6a6>
    13b8:	ca 94       	dec	r12
    13ba:	f4 01       	movw	r30, r8
    13bc:	ec 0d       	add	r30, r12
    13be:	f1 1d       	adc	r31, r1
    13c0:	80 81       	ld	r24, Z
    13c2:	b7 01       	movw	r22, r14
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    13ca:	c1 10       	cpse	r12, r1
    13cc:	f5 cf       	rjmp	.-22     	; 0x13b8 <vfprintf+0x6b8>
    13ce:	55 20       	and	r5, r5
    13d0:	09 f4       	brne	.+2      	; 0x13d4 <vfprintf+0x6d4>
    13d2:	c2 cc       	rjmp	.-1660   	; 0xd58 <vfprintf+0x58>
    13d4:	b7 01       	movw	r22, r14
    13d6:	80 e2       	ldi	r24, 0x20	; 32
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	0e 94 42 0b 	call	0x1684	; 0x1684 <fputc>
    13de:	5a 94       	dec	r5
    13e0:	f6 cf       	rjmp	.-20     	; 0x13ce <vfprintf+0x6ce>
    13e2:	f7 01       	movw	r30, r14
    13e4:	86 81       	ldd	r24, Z+6	; 0x06
    13e6:	97 81       	ldd	r25, Z+7	; 0x07
    13e8:	02 c0       	rjmp	.+4      	; 0x13ee <vfprintf+0x6ee>
    13ea:	8f ef       	ldi	r24, 0xFF	; 255
    13ec:	9f ef       	ldi	r25, 0xFF	; 255
    13ee:	63 96       	adiw	r28, 0x13	; 19
    13f0:	e2 e1       	ldi	r30, 0x12	; 18
    13f2:	0c 94 39 0a 	jmp	0x1472	; 0x1472 <__epilogue_restores__>

000013f6 <__udivmodsi4>:
    13f6:	a1 e2       	ldi	r26, 0x21	; 33
    13f8:	1a 2e       	mov	r1, r26
    13fa:	aa 1b       	sub	r26, r26
    13fc:	bb 1b       	sub	r27, r27
    13fe:	fd 01       	movw	r30, r26
    1400:	0d c0       	rjmp	.+26     	; 0x141c <__udivmodsi4_ep>

00001402 <__udivmodsi4_loop>:
    1402:	aa 1f       	adc	r26, r26
    1404:	bb 1f       	adc	r27, r27
    1406:	ee 1f       	adc	r30, r30
    1408:	ff 1f       	adc	r31, r31
    140a:	a2 17       	cp	r26, r18
    140c:	b3 07       	cpc	r27, r19
    140e:	e4 07       	cpc	r30, r20
    1410:	f5 07       	cpc	r31, r21
    1412:	20 f0       	brcs	.+8      	; 0x141c <__udivmodsi4_ep>
    1414:	a2 1b       	sub	r26, r18
    1416:	b3 0b       	sbc	r27, r19
    1418:	e4 0b       	sbc	r30, r20
    141a:	f5 0b       	sbc	r31, r21

0000141c <__udivmodsi4_ep>:
    141c:	66 1f       	adc	r22, r22
    141e:	77 1f       	adc	r23, r23
    1420:	88 1f       	adc	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	1a 94       	dec	r1
    1426:	69 f7       	brne	.-38     	; 0x1402 <__udivmodsi4_loop>
    1428:	60 95       	com	r22
    142a:	70 95       	com	r23
    142c:	80 95       	com	r24
    142e:	90 95       	com	r25
    1430:	9b 01       	movw	r18, r22
    1432:	ac 01       	movw	r20, r24
    1434:	bd 01       	movw	r22, r26
    1436:	cf 01       	movw	r24, r30
    1438:	08 95       	ret

0000143a <__prologue_saves__>:
    143a:	2f 92       	push	r2
    143c:	3f 92       	push	r3
    143e:	4f 92       	push	r4
    1440:	5f 92       	push	r5
    1442:	6f 92       	push	r6
    1444:	7f 92       	push	r7
    1446:	8f 92       	push	r8
    1448:	9f 92       	push	r9
    144a:	af 92       	push	r10
    144c:	bf 92       	push	r11
    144e:	cf 92       	push	r12
    1450:	df 92       	push	r13
    1452:	ef 92       	push	r14
    1454:	ff 92       	push	r15
    1456:	0f 93       	push	r16
    1458:	1f 93       	push	r17
    145a:	cf 93       	push	r28
    145c:	df 93       	push	r29
    145e:	cd b7       	in	r28, 0x3d	; 61
    1460:	de b7       	in	r29, 0x3e	; 62
    1462:	ca 1b       	sub	r28, r26
    1464:	db 0b       	sbc	r29, r27
    1466:	0f b6       	in	r0, 0x3f	; 63
    1468:	f8 94       	cli
    146a:	de bf       	out	0x3e, r29	; 62
    146c:	0f be       	out	0x3f, r0	; 63
    146e:	cd bf       	out	0x3d, r28	; 61
    1470:	09 94       	ijmp

00001472 <__epilogue_restores__>:
    1472:	2a 88       	ldd	r2, Y+18	; 0x12
    1474:	39 88       	ldd	r3, Y+17	; 0x11
    1476:	48 88       	ldd	r4, Y+16	; 0x10
    1478:	5f 84       	ldd	r5, Y+15	; 0x0f
    147a:	6e 84       	ldd	r6, Y+14	; 0x0e
    147c:	7d 84       	ldd	r7, Y+13	; 0x0d
    147e:	8c 84       	ldd	r8, Y+12	; 0x0c
    1480:	9b 84       	ldd	r9, Y+11	; 0x0b
    1482:	aa 84       	ldd	r10, Y+10	; 0x0a
    1484:	b9 84       	ldd	r11, Y+9	; 0x09
    1486:	c8 84       	ldd	r12, Y+8	; 0x08
    1488:	df 80       	ldd	r13, Y+7	; 0x07
    148a:	ee 80       	ldd	r14, Y+6	; 0x06
    148c:	fd 80       	ldd	r15, Y+5	; 0x05
    148e:	0c 81       	ldd	r16, Y+4	; 0x04
    1490:	1b 81       	ldd	r17, Y+3	; 0x03
    1492:	aa 81       	ldd	r26, Y+2	; 0x02
    1494:	b9 81       	ldd	r27, Y+1	; 0x01
    1496:	ce 0f       	add	r28, r30
    1498:	d1 1d       	adc	r29, r1
    149a:	0f b6       	in	r0, 0x3f	; 63
    149c:	f8 94       	cli
    149e:	de bf       	out	0x3e, r29	; 62
    14a0:	0f be       	out	0x3f, r0	; 63
    14a2:	cd bf       	out	0x3d, r28	; 61
    14a4:	ed 01       	movw	r28, r26
    14a6:	08 95       	ret

000014a8 <__ftoa_engine>:
    14a8:	28 30       	cpi	r18, 0x08	; 8
    14aa:	08 f0       	brcs	.+2      	; 0x14ae <__ftoa_engine+0x6>
    14ac:	27 e0       	ldi	r18, 0x07	; 7
    14ae:	33 27       	eor	r19, r19
    14b0:	da 01       	movw	r26, r20
    14b2:	99 0f       	add	r25, r25
    14b4:	31 1d       	adc	r19, r1
    14b6:	87 fd       	sbrc	r24, 7
    14b8:	91 60       	ori	r25, 0x01	; 1
    14ba:	00 96       	adiw	r24, 0x00	; 0
    14bc:	61 05       	cpc	r22, r1
    14be:	71 05       	cpc	r23, r1
    14c0:	39 f4       	brne	.+14     	; 0x14d0 <__ftoa_engine+0x28>
    14c2:	32 60       	ori	r19, 0x02	; 2
    14c4:	2e 5f       	subi	r18, 0xFE	; 254
    14c6:	3d 93       	st	X+, r19
    14c8:	30 e3       	ldi	r19, 0x30	; 48
    14ca:	2a 95       	dec	r18
    14cc:	e1 f7       	brne	.-8      	; 0x14c6 <__ftoa_engine+0x1e>
    14ce:	08 95       	ret
    14d0:	9f 3f       	cpi	r25, 0xFF	; 255
    14d2:	30 f0       	brcs	.+12     	; 0x14e0 <__ftoa_engine+0x38>
    14d4:	80 38       	cpi	r24, 0x80	; 128
    14d6:	71 05       	cpc	r23, r1
    14d8:	61 05       	cpc	r22, r1
    14da:	09 f0       	breq	.+2      	; 0x14de <__ftoa_engine+0x36>
    14dc:	3c 5f       	subi	r19, 0xFC	; 252
    14de:	3c 5f       	subi	r19, 0xFC	; 252
    14e0:	3d 93       	st	X+, r19
    14e2:	91 30       	cpi	r25, 0x01	; 1
    14e4:	08 f0       	brcs	.+2      	; 0x14e8 <__ftoa_engine+0x40>
    14e6:	80 68       	ori	r24, 0x80	; 128
    14e8:	91 1d       	adc	r25, r1
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	1f 93       	push	r17
    14f0:	0f 93       	push	r16
    14f2:	ff 92       	push	r15
    14f4:	ef 92       	push	r14
    14f6:	19 2f       	mov	r17, r25
    14f8:	98 7f       	andi	r25, 0xF8	; 248
    14fa:	96 95       	lsr	r25
    14fc:	e9 2f       	mov	r30, r25
    14fe:	96 95       	lsr	r25
    1500:	96 95       	lsr	r25
    1502:	e9 0f       	add	r30, r25
    1504:	ff 27       	eor	r31, r31
    1506:	ea 56       	subi	r30, 0x6A	; 106
    1508:	fe 4f       	sbci	r31, 0xFE	; 254
    150a:	99 27       	eor	r25, r25
    150c:	33 27       	eor	r19, r19
    150e:	ee 24       	eor	r14, r14
    1510:	ff 24       	eor	r15, r15
    1512:	a7 01       	movw	r20, r14
    1514:	e7 01       	movw	r28, r14
    1516:	05 90       	lpm	r0, Z+
    1518:	08 94       	sec
    151a:	07 94       	ror	r0
    151c:	28 f4       	brcc	.+10     	; 0x1528 <__ftoa_engine+0x80>
    151e:	36 0f       	add	r19, r22
    1520:	e7 1e       	adc	r14, r23
    1522:	f8 1e       	adc	r15, r24
    1524:	49 1f       	adc	r20, r25
    1526:	51 1d       	adc	r21, r1
    1528:	66 0f       	add	r22, r22
    152a:	77 1f       	adc	r23, r23
    152c:	88 1f       	adc	r24, r24
    152e:	99 1f       	adc	r25, r25
    1530:	06 94       	lsr	r0
    1532:	a1 f7       	brne	.-24     	; 0x151c <__ftoa_engine+0x74>
    1534:	05 90       	lpm	r0, Z+
    1536:	07 94       	ror	r0
    1538:	28 f4       	brcc	.+10     	; 0x1544 <__ftoa_engine+0x9c>
    153a:	e7 0e       	add	r14, r23
    153c:	f8 1e       	adc	r15, r24
    153e:	49 1f       	adc	r20, r25
    1540:	56 1f       	adc	r21, r22
    1542:	c1 1d       	adc	r28, r1
    1544:	77 0f       	add	r23, r23
    1546:	88 1f       	adc	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	66 1f       	adc	r22, r22
    154c:	06 94       	lsr	r0
    154e:	a1 f7       	brne	.-24     	; 0x1538 <__ftoa_engine+0x90>
    1550:	05 90       	lpm	r0, Z+
    1552:	07 94       	ror	r0
    1554:	28 f4       	brcc	.+10     	; 0x1560 <__ftoa_engine+0xb8>
    1556:	f8 0e       	add	r15, r24
    1558:	49 1f       	adc	r20, r25
    155a:	56 1f       	adc	r21, r22
    155c:	c7 1f       	adc	r28, r23
    155e:	d1 1d       	adc	r29, r1
    1560:	88 0f       	add	r24, r24
    1562:	99 1f       	adc	r25, r25
    1564:	66 1f       	adc	r22, r22
    1566:	77 1f       	adc	r23, r23
    1568:	06 94       	lsr	r0
    156a:	a1 f7       	brne	.-24     	; 0x1554 <__ftoa_engine+0xac>
    156c:	05 90       	lpm	r0, Z+
    156e:	07 94       	ror	r0
    1570:	20 f4       	brcc	.+8      	; 0x157a <__ftoa_engine+0xd2>
    1572:	49 0f       	add	r20, r25
    1574:	56 1f       	adc	r21, r22
    1576:	c7 1f       	adc	r28, r23
    1578:	d8 1f       	adc	r29, r24
    157a:	99 0f       	add	r25, r25
    157c:	66 1f       	adc	r22, r22
    157e:	77 1f       	adc	r23, r23
    1580:	88 1f       	adc	r24, r24
    1582:	06 94       	lsr	r0
    1584:	a9 f7       	brne	.-22     	; 0x1570 <__ftoa_engine+0xc8>
    1586:	84 91       	lpm	r24, Z
    1588:	10 95       	com	r17
    158a:	17 70       	andi	r17, 0x07	; 7
    158c:	41 f0       	breq	.+16     	; 0x159e <__ftoa_engine+0xf6>
    158e:	d6 95       	lsr	r29
    1590:	c7 95       	ror	r28
    1592:	57 95       	ror	r21
    1594:	47 95       	ror	r20
    1596:	f7 94       	ror	r15
    1598:	e7 94       	ror	r14
    159a:	1a 95       	dec	r17
    159c:	c1 f7       	brne	.-16     	; 0x158e <__ftoa_engine+0xe6>
    159e:	ec e3       	ldi	r30, 0x3C	; 60
    15a0:	f1 e0       	ldi	r31, 0x01	; 1
    15a2:	68 94       	set
    15a4:	15 90       	lpm	r1, Z+
    15a6:	15 91       	lpm	r17, Z+
    15a8:	35 91       	lpm	r19, Z+
    15aa:	65 91       	lpm	r22, Z+
    15ac:	95 91       	lpm	r25, Z+
    15ae:	05 90       	lpm	r0, Z+
    15b0:	7f e2       	ldi	r23, 0x2F	; 47
    15b2:	73 95       	inc	r23
    15b4:	e1 18       	sub	r14, r1
    15b6:	f1 0a       	sbc	r15, r17
    15b8:	43 0b       	sbc	r20, r19
    15ba:	56 0b       	sbc	r21, r22
    15bc:	c9 0b       	sbc	r28, r25
    15be:	d0 09       	sbc	r29, r0
    15c0:	c0 f7       	brcc	.-16     	; 0x15b2 <__ftoa_engine+0x10a>
    15c2:	e1 0c       	add	r14, r1
    15c4:	f1 1e       	adc	r15, r17
    15c6:	43 1f       	adc	r20, r19
    15c8:	56 1f       	adc	r21, r22
    15ca:	c9 1f       	adc	r28, r25
    15cc:	d0 1d       	adc	r29, r0
    15ce:	7e f4       	brtc	.+30     	; 0x15ee <__ftoa_engine+0x146>
    15d0:	70 33       	cpi	r23, 0x30	; 48
    15d2:	11 f4       	brne	.+4      	; 0x15d8 <__ftoa_engine+0x130>
    15d4:	8a 95       	dec	r24
    15d6:	e6 cf       	rjmp	.-52     	; 0x15a4 <__ftoa_engine+0xfc>
    15d8:	e8 94       	clt
    15da:	01 50       	subi	r16, 0x01	; 1
    15dc:	30 f0       	brcs	.+12     	; 0x15ea <__ftoa_engine+0x142>
    15de:	08 0f       	add	r16, r24
    15e0:	0a f4       	brpl	.+2      	; 0x15e4 <__ftoa_engine+0x13c>
    15e2:	00 27       	eor	r16, r16
    15e4:	02 17       	cp	r16, r18
    15e6:	08 f4       	brcc	.+2      	; 0x15ea <__ftoa_engine+0x142>
    15e8:	20 2f       	mov	r18, r16
    15ea:	23 95       	inc	r18
    15ec:	02 2f       	mov	r16, r18
    15ee:	7a 33       	cpi	r23, 0x3A	; 58
    15f0:	28 f0       	brcs	.+10     	; 0x15fc <__ftoa_engine+0x154>
    15f2:	79 e3       	ldi	r23, 0x39	; 57
    15f4:	7d 93       	st	X+, r23
    15f6:	2a 95       	dec	r18
    15f8:	e9 f7       	brne	.-6      	; 0x15f4 <__ftoa_engine+0x14c>
    15fa:	10 c0       	rjmp	.+32     	; 0x161c <__ftoa_engine+0x174>
    15fc:	7d 93       	st	X+, r23
    15fe:	2a 95       	dec	r18
    1600:	89 f6       	brne	.-94     	; 0x15a4 <__ftoa_engine+0xfc>
    1602:	06 94       	lsr	r0
    1604:	97 95       	ror	r25
    1606:	67 95       	ror	r22
    1608:	37 95       	ror	r19
    160a:	17 95       	ror	r17
    160c:	17 94       	ror	r1
    160e:	e1 18       	sub	r14, r1
    1610:	f1 0a       	sbc	r15, r17
    1612:	43 0b       	sbc	r20, r19
    1614:	56 0b       	sbc	r21, r22
    1616:	c9 0b       	sbc	r28, r25
    1618:	d0 09       	sbc	r29, r0
    161a:	98 f0       	brcs	.+38     	; 0x1642 <__ftoa_engine+0x19a>
    161c:	23 95       	inc	r18
    161e:	7e 91       	ld	r23, -X
    1620:	73 95       	inc	r23
    1622:	7a 33       	cpi	r23, 0x3A	; 58
    1624:	08 f0       	brcs	.+2      	; 0x1628 <__ftoa_engine+0x180>
    1626:	70 e3       	ldi	r23, 0x30	; 48
    1628:	7c 93       	st	X, r23
    162a:	20 13       	cpse	r18, r16
    162c:	b8 f7       	brcc	.-18     	; 0x161c <__ftoa_engine+0x174>
    162e:	7e 91       	ld	r23, -X
    1630:	70 61       	ori	r23, 0x10	; 16
    1632:	7d 93       	st	X+, r23
    1634:	30 f0       	brcs	.+12     	; 0x1642 <__ftoa_engine+0x19a>
    1636:	83 95       	inc	r24
    1638:	71 e3       	ldi	r23, 0x31	; 49
    163a:	7d 93       	st	X+, r23
    163c:	70 e3       	ldi	r23, 0x30	; 48
    163e:	2a 95       	dec	r18
    1640:	e1 f7       	brne	.-8      	; 0x163a <__ftoa_engine+0x192>
    1642:	11 24       	eor	r1, r1
    1644:	ef 90       	pop	r14
    1646:	ff 90       	pop	r15
    1648:	0f 91       	pop	r16
    164a:	1f 91       	pop	r17
    164c:	cf 91       	pop	r28
    164e:	df 91       	pop	r29
    1650:	99 27       	eor	r25, r25
    1652:	87 fd       	sbrc	r24, 7
    1654:	90 95       	com	r25
    1656:	08 95       	ret

00001658 <strnlen_P>:
    1658:	fc 01       	movw	r30, r24
    165a:	05 90       	lpm	r0, Z+
    165c:	61 50       	subi	r22, 0x01	; 1
    165e:	70 40       	sbci	r23, 0x00	; 0
    1660:	01 10       	cpse	r0, r1
    1662:	d8 f7       	brcc	.-10     	; 0x165a <strnlen_P+0x2>
    1664:	80 95       	com	r24
    1666:	90 95       	com	r25
    1668:	8e 0f       	add	r24, r30
    166a:	9f 1f       	adc	r25, r31
    166c:	08 95       	ret

0000166e <strnlen>:
    166e:	fc 01       	movw	r30, r24
    1670:	61 50       	subi	r22, 0x01	; 1
    1672:	70 40       	sbci	r23, 0x00	; 0
    1674:	01 90       	ld	r0, Z+
    1676:	01 10       	cpse	r0, r1
    1678:	d8 f7       	brcc	.-10     	; 0x1670 <strnlen+0x2>
    167a:	80 95       	com	r24
    167c:	90 95       	com	r25
    167e:	8e 0f       	add	r24, r30
    1680:	9f 1f       	adc	r25, r31
    1682:	08 95       	ret

00001684 <fputc>:
    1684:	0f 93       	push	r16
    1686:	1f 93       	push	r17
    1688:	cf 93       	push	r28
    168a:	df 93       	push	r29
    168c:	18 2f       	mov	r17, r24
    168e:	09 2f       	mov	r16, r25
    1690:	eb 01       	movw	r28, r22
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	81 fd       	sbrc	r24, 1
    1696:	03 c0       	rjmp	.+6      	; 0x169e <fputc+0x1a>
    1698:	8f ef       	ldi	r24, 0xFF	; 255
    169a:	9f ef       	ldi	r25, 0xFF	; 255
    169c:	20 c0       	rjmp	.+64     	; 0x16de <fputc+0x5a>
    169e:	82 ff       	sbrs	r24, 2
    16a0:	10 c0       	rjmp	.+32     	; 0x16c2 <fputc+0x3e>
    16a2:	4e 81       	ldd	r20, Y+6	; 0x06
    16a4:	5f 81       	ldd	r21, Y+7	; 0x07
    16a6:	2c 81       	ldd	r18, Y+4	; 0x04
    16a8:	3d 81       	ldd	r19, Y+5	; 0x05
    16aa:	42 17       	cp	r20, r18
    16ac:	53 07       	cpc	r21, r19
    16ae:	7c f4       	brge	.+30     	; 0x16ce <fputc+0x4a>
    16b0:	e8 81       	ld	r30, Y
    16b2:	f9 81       	ldd	r31, Y+1	; 0x01
    16b4:	9f 01       	movw	r18, r30
    16b6:	2f 5f       	subi	r18, 0xFF	; 255
    16b8:	3f 4f       	sbci	r19, 0xFF	; 255
    16ba:	39 83       	std	Y+1, r19	; 0x01
    16bc:	28 83       	st	Y, r18
    16be:	10 83       	st	Z, r17
    16c0:	06 c0       	rjmp	.+12     	; 0x16ce <fputc+0x4a>
    16c2:	e8 85       	ldd	r30, Y+8	; 0x08
    16c4:	f9 85       	ldd	r31, Y+9	; 0x09
    16c6:	81 2f       	mov	r24, r17
    16c8:	09 95       	icall
    16ca:	89 2b       	or	r24, r25
    16cc:	29 f7       	brne	.-54     	; 0x1698 <fputc+0x14>
    16ce:	2e 81       	ldd	r18, Y+6	; 0x06
    16d0:	3f 81       	ldd	r19, Y+7	; 0x07
    16d2:	2f 5f       	subi	r18, 0xFF	; 255
    16d4:	3f 4f       	sbci	r19, 0xFF	; 255
    16d6:	3f 83       	std	Y+7, r19	; 0x07
    16d8:	2e 83       	std	Y+6, r18	; 0x06
    16da:	81 2f       	mov	r24, r17
    16dc:	90 2f       	mov	r25, r16
    16de:	df 91       	pop	r29
    16e0:	cf 91       	pop	r28
    16e2:	1f 91       	pop	r17
    16e4:	0f 91       	pop	r16
    16e6:	08 95       	ret

000016e8 <printf>:
    16e8:	a0 e0       	ldi	r26, 0x00	; 0
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	ea e7       	ldi	r30, 0x7A	; 122
    16ee:	fb e0       	ldi	r31, 0x0B	; 11
    16f0:	0c 94 2d 0a 	jmp	0x145a	; 0x145a <__prologue_saves__+0x20>
    16f4:	fe 01       	movw	r30, r28
    16f6:	35 96       	adiw	r30, 0x05	; 5
    16f8:	61 91       	ld	r22, Z+
    16fa:	71 91       	ld	r23, Z+
    16fc:	af 01       	movw	r20, r30
    16fe:	80 91 67 06 	lds	r24, 0x0667
    1702:	90 91 68 06 	lds	r25, 0x0668
    1706:	0e 94 80 06 	call	0xd00	; 0xd00 <vfprintf>
    170a:	e2 e0       	ldi	r30, 0x02	; 2
    170c:	0c 94 49 0a 	jmp	0x1492	; 0x1492 <__epilogue_restores__+0x20>

00001710 <puts>:
    1710:	0f 93       	push	r16
    1712:	1f 93       	push	r17
    1714:	cf 93       	push	r28
    1716:	df 93       	push	r29
    1718:	e0 91 67 06 	lds	r30, 0x0667
    171c:	f0 91 68 06 	lds	r31, 0x0668
    1720:	23 81       	ldd	r18, Z+3	; 0x03
    1722:	21 ff       	sbrs	r18, 1
    1724:	1b c0       	rjmp	.+54     	; 0x175c <puts+0x4c>
    1726:	ec 01       	movw	r28, r24
    1728:	00 e0       	ldi	r16, 0x00	; 0
    172a:	10 e0       	ldi	r17, 0x00	; 0
    172c:	89 91       	ld	r24, Y+
    172e:	60 91 67 06 	lds	r22, 0x0667
    1732:	70 91 68 06 	lds	r23, 0x0668
    1736:	db 01       	movw	r26, r22
    1738:	18 96       	adiw	r26, 0x08	; 8
    173a:	ed 91       	ld	r30, X+
    173c:	fc 91       	ld	r31, X
    173e:	19 97       	sbiw	r26, 0x09	; 9
    1740:	88 23       	and	r24, r24
    1742:	31 f0       	breq	.+12     	; 0x1750 <puts+0x40>
    1744:	09 95       	icall
    1746:	89 2b       	or	r24, r25
    1748:	89 f3       	breq	.-30     	; 0x172c <puts+0x1c>
    174a:	0f ef       	ldi	r16, 0xFF	; 255
    174c:	1f ef       	ldi	r17, 0xFF	; 255
    174e:	ee cf       	rjmp	.-36     	; 0x172c <puts+0x1c>
    1750:	8a e0       	ldi	r24, 0x0A	; 10
    1752:	09 95       	icall
    1754:	89 2b       	or	r24, r25
    1756:	11 f4       	brne	.+4      	; 0x175c <puts+0x4c>
    1758:	c8 01       	movw	r24, r16
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <puts+0x50>
    175c:	8f ef       	ldi	r24, 0xFF	; 255
    175e:	9f ef       	ldi	r25, 0xFF	; 255
    1760:	df 91       	pop	r29
    1762:	cf 91       	pop	r28
    1764:	1f 91       	pop	r17
    1766:	0f 91       	pop	r16
    1768:	08 95       	ret

0000176a <__ultoa_invert>:
    176a:	fa 01       	movw	r30, r20
    176c:	aa 27       	eor	r26, r26
    176e:	28 30       	cpi	r18, 0x08	; 8
    1770:	51 f1       	breq	.+84     	; 0x17c6 <__ultoa_invert+0x5c>
    1772:	20 31       	cpi	r18, 0x10	; 16
    1774:	81 f1       	breq	.+96     	; 0x17d6 <__ultoa_invert+0x6c>
    1776:	e8 94       	clt
    1778:	6f 93       	push	r22
    177a:	6e 7f       	andi	r22, 0xFE	; 254
    177c:	6e 5f       	subi	r22, 0xFE	; 254
    177e:	7f 4f       	sbci	r23, 0xFF	; 255
    1780:	8f 4f       	sbci	r24, 0xFF	; 255
    1782:	9f 4f       	sbci	r25, 0xFF	; 255
    1784:	af 4f       	sbci	r26, 0xFF	; 255
    1786:	b1 e0       	ldi	r27, 0x01	; 1
    1788:	3e d0       	rcall	.+124    	; 0x1806 <__ultoa_invert+0x9c>
    178a:	b4 e0       	ldi	r27, 0x04	; 4
    178c:	3c d0       	rcall	.+120    	; 0x1806 <__ultoa_invert+0x9c>
    178e:	67 0f       	add	r22, r23
    1790:	78 1f       	adc	r23, r24
    1792:	89 1f       	adc	r24, r25
    1794:	9a 1f       	adc	r25, r26
    1796:	a1 1d       	adc	r26, r1
    1798:	68 0f       	add	r22, r24
    179a:	79 1f       	adc	r23, r25
    179c:	8a 1f       	adc	r24, r26
    179e:	91 1d       	adc	r25, r1
    17a0:	a1 1d       	adc	r26, r1
    17a2:	6a 0f       	add	r22, r26
    17a4:	71 1d       	adc	r23, r1
    17a6:	81 1d       	adc	r24, r1
    17a8:	91 1d       	adc	r25, r1
    17aa:	a1 1d       	adc	r26, r1
    17ac:	20 d0       	rcall	.+64     	; 0x17ee <__ultoa_invert+0x84>
    17ae:	09 f4       	brne	.+2      	; 0x17b2 <__ultoa_invert+0x48>
    17b0:	68 94       	set
    17b2:	3f 91       	pop	r19
    17b4:	2a e0       	ldi	r18, 0x0A	; 10
    17b6:	26 9f       	mul	r18, r22
    17b8:	11 24       	eor	r1, r1
    17ba:	30 19       	sub	r19, r0
    17bc:	30 5d       	subi	r19, 0xD0	; 208
    17be:	31 93       	st	Z+, r19
    17c0:	de f6       	brtc	.-74     	; 0x1778 <__ultoa_invert+0xe>
    17c2:	cf 01       	movw	r24, r30
    17c4:	08 95       	ret
    17c6:	46 2f       	mov	r20, r22
    17c8:	47 70       	andi	r20, 0x07	; 7
    17ca:	40 5d       	subi	r20, 0xD0	; 208
    17cc:	41 93       	st	Z+, r20
    17ce:	b3 e0       	ldi	r27, 0x03	; 3
    17d0:	0f d0       	rcall	.+30     	; 0x17f0 <__ultoa_invert+0x86>
    17d2:	c9 f7       	brne	.-14     	; 0x17c6 <__ultoa_invert+0x5c>
    17d4:	f6 cf       	rjmp	.-20     	; 0x17c2 <__ultoa_invert+0x58>
    17d6:	46 2f       	mov	r20, r22
    17d8:	4f 70       	andi	r20, 0x0F	; 15
    17da:	40 5d       	subi	r20, 0xD0	; 208
    17dc:	4a 33       	cpi	r20, 0x3A	; 58
    17de:	18 f0       	brcs	.+6      	; 0x17e6 <__ultoa_invert+0x7c>
    17e0:	49 5d       	subi	r20, 0xD9	; 217
    17e2:	31 fd       	sbrc	r19, 1
    17e4:	40 52       	subi	r20, 0x20	; 32
    17e6:	41 93       	st	Z+, r20
    17e8:	02 d0       	rcall	.+4      	; 0x17ee <__ultoa_invert+0x84>
    17ea:	a9 f7       	brne	.-22     	; 0x17d6 <__ultoa_invert+0x6c>
    17ec:	ea cf       	rjmp	.-44     	; 0x17c2 <__ultoa_invert+0x58>
    17ee:	b4 e0       	ldi	r27, 0x04	; 4
    17f0:	a6 95       	lsr	r26
    17f2:	97 95       	ror	r25
    17f4:	87 95       	ror	r24
    17f6:	77 95       	ror	r23
    17f8:	67 95       	ror	r22
    17fa:	ba 95       	dec	r27
    17fc:	c9 f7       	brne	.-14     	; 0x17f0 <__ultoa_invert+0x86>
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	61 05       	cpc	r22, r1
    1802:	71 05       	cpc	r23, r1
    1804:	08 95       	ret
    1806:	9b 01       	movw	r18, r22
    1808:	ac 01       	movw	r20, r24
    180a:	0a 2e       	mov	r0, r26
    180c:	06 94       	lsr	r0
    180e:	57 95       	ror	r21
    1810:	47 95       	ror	r20
    1812:	37 95       	ror	r19
    1814:	27 95       	ror	r18
    1816:	ba 95       	dec	r27
    1818:	c9 f7       	brne	.-14     	; 0x180c <__ultoa_invert+0xa2>
    181a:	62 0f       	add	r22, r18
    181c:	73 1f       	adc	r23, r19
    181e:	84 1f       	adc	r24, r20
    1820:	95 1f       	adc	r25, r21
    1822:	a0 1d       	adc	r26, r0
    1824:	08 95       	ret

00001826 <_exit>:
    1826:	f8 94       	cli

00001828 <__stop_program>:
    1828:	ff cf       	rjmp	.-2      	; 0x1828 <__stop_program>
