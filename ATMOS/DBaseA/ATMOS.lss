
ATMOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000003b2  00800200  00003b02  00003b96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003b02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000004f2  008005b2  008005b2  00003f48  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003f48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00003fa4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000800  00000000  00000000  00003fe4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00009f5b  00000000  00000000  000047e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000328c  00000000  00000000  0000e73f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000305c  00000000  00000000  000119cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000148c  00000000  00000000  00014a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002346  00000000  00000000  00015eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000054d9  00000000  00000000  000181fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000007b8  00000000  00000000  0001d6d3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__ctors_end>
       4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      10:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      14:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      18:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      1c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      20:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      24:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      28:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      30:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      34:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      38:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      3c:	0c 94 28 07 	jmp	0xe50	; 0xe50 <__vector_15>
      40:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      44:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      48:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      4c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      50:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      54:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      58:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      5c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      60:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      64:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      68:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      6c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      70:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      74:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      78:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      7c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      80:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      84:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      88:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      8c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      90:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      94:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      98:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      9c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a8:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <__vector_42>
      ac:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      bc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      cc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      dc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      ec:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      fc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     100:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     104:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     108:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     10c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     110:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     114:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     118:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     11c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     120:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     124:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     128:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     12c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     130:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>

00000134 <__trampolines_end>:
     134:	6e 61       	ori	r22, 0x1E	; 30
     136:	6e 00       	.word	0x006e	; ????

00000138 <__c.2177>:
     138:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     148:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     158:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     168:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     178:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     188:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     198:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     208:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     218:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     228:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000236 <__ctors_end>:
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	d1 e2       	ldi	r29, 0x21	; 33
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61

00000242 <__do_copy_data>:
     242:	15 e0       	ldi	r17, 0x05	; 5
     244:	a0 e0       	ldi	r26, 0x00	; 0
     246:	b2 e0       	ldi	r27, 0x02	; 2
     248:	e2 e0       	ldi	r30, 0x02	; 2
     24a:	fb e3       	ldi	r31, 0x3B	; 59
     24c:	02 c0       	rjmp	.+4      	; 0x252 <__do_copy_data+0x10>
     24e:	05 90       	lpm	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	a2 3b       	cpi	r26, 0xB2	; 178
     254:	b1 07       	cpc	r27, r17
     256:	d9 f7       	brne	.-10     	; 0x24e <__do_copy_data+0xc>

00000258 <__do_clear_bss>:
     258:	2a e0       	ldi	r18, 0x0A	; 10
     25a:	a2 eb       	ldi	r26, 0xB2	; 178
     25c:	b5 e0       	ldi	r27, 0x05	; 5
     25e:	01 c0       	rjmp	.+2      	; 0x262 <.do_clear_bss_start>

00000260 <.do_clear_bss_loop>:
     260:	1d 92       	st	X+, r1

00000262 <.do_clear_bss_start>:
     262:	a4 3a       	cpi	r26, 0xA4	; 164
     264:	b2 07       	cpc	r27, r18
     266:	e1 f7       	brne	.-8      	; 0x260 <.do_clear_bss_loop>
     268:	0e 94 3a 01 	call	0x274	; 0x274 <main>
     26c:	0c 94 7f 1d 	jmp	0x3afe	; 0x3afe <_exit>

00000270 <__bad_interrupt>:
     270:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000274 <main>:
}


int main(void)
{
	SYS_Init();
     274:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <SYS_Init>
DataUnit *cur_data = NULL;
tm cur_time;

/* TODO : clean up these messy init */
static void APP_Init(void){
	PWR_Init();
     278:	0e 94 90 08 	call	0x1120	; 0x1120 <PWR_Init>
	PWR_TurnOn5V();
     27c:	0e 94 94 08 	call	0x1128	; 0x1128 <PWR_TurnOn5V>
	USART0_Init(9600);
     280:	60 e8       	ldi	r22, 0x80	; 128
     282:	75 e2       	ldi	r23, 0x25	; 37
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 76 09 	call	0x12ec	; 0x12ec <USART0_Init>
	DDRB |= 0b00010000;
     28c:	24 9a       	sbi	0x04, 4	; 4
	DDRE |= 0b00001000;
     28e:	6b 9a       	sbi	0x0d, 3	; 13
	PORTE|= 0b00001000;
     290:	73 9a       	sbi	0x0e, 3	; 14
	TWI_Init(10000);
     292:	60 e1       	ldi	r22, 0x10	; 16
     294:	77 e2       	ldi	r23, 0x27	; 39
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 9a 08 	call	0x1134	; 0x1134 <TWI_Init>
	ADC_Init();
     29e:	0e 94 1c 07 	call	0xe38	; 0xe38 <ADC_Init>
	printf("BMP280 Status %i\n", BMP280_Init());
     2a2:	0e 94 07 02 	call	0x40e	; 0x40e <BMP280_Init>
     2a6:	9f 93       	push	r25
     2a8:	8f 93       	push	r24
     2aa:	86 e5       	ldi	r24, 0x56	; 86
     2ac:	92 e0       	ldi	r25, 0x02	; 2
     2ae:	9f 93       	push	r25
     2b0:	8f 93       	push	r24
     2b2:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <printf>
	BMP280_SetOversampling(4);
     2b6:	84 e0       	ldi	r24, 0x04	; 4
     2b8:	90 e0       	ldi	r25, 0x00	; 0
     2ba:	0e 94 e7 02 	call	0x5ce	; 0x5ce <BMP280_SetOversampling>
	SPI_SlaveInit();
     2be:	0e 94 96 08 	call	0x112c	; 0x112c <SPI_SlaveInit>
	SensorDataCount = 0;
     2c2:	10 92 6a 0a 	sts	0x0A6A, r1
     2c6:	10 92 69 0a 	sts	0x0A69, r1
{
	SYS_Init();
	APP_Init();
	
	// could have sealed following in a function //
	init_timeoutq();
     2ca:	0e 94 33 0c 	call	0x1866	; 0x1866 <init_timeoutq>
	init_timestamp(&cur_time);
     2ce:	8b ee       	ldi	r24, 0xEB	; 235
     2d0:	98 e0       	ldi	r25, 0x08	; 8
     2d2:	0e 94 84 10 	call	0x2108	; 0x2108 <init_timestamp>
	BMP280Sensor *BMP280_ptr = New_BMP280_Sensor( 0,2 );
     2d6:	62 e0       	ldi	r22, 0x02	; 2
     2d8:	70 e0       	ldi	r23, 0x00	; 0
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	0e 94 2c 13 	call	0x2658	; 0x2658 <New_BMP280_Sensor>
     2e2:	6c 01       	movw	r12, r24
	Si7020Sensor *Si_ptr = New_Si7020_Sensor(0,2);
     2e4:	62 e0       	ldi	r22, 0x02	; 2
     2e6:	70 e0       	ldi	r23, 0x00	; 0
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	0e 94 ed 13 	call	0x27da	; 0x27da <New_Si7020_Sensor>
     2f0:	7c 01       	movw	r14, r24
	
	DemoStorageDevice *Strg_ptr = New_DemoStorage_Device(0);
     2f2:	80 e0       	ldi	r24, 0x00	; 0
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 9a 11 	call	0x2334	; 0x2334 <New_DemoStorage_Device>
     2fa:	8c 01       	movw	r16, r24
	LoadDataDevice *Load_ptr = New_LoadData_Device(0,Strg_ptr);
     2fc:	bc 01       	movw	r22, r24
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 79 12 	call	0x24f2	; 0x24f2 <New_LoadData_Device>
     306:	ec 01       	movw	r28, r24
	
	init_Event_Timer();
     308:	0e 94 6d 07 	call	0xeda	; 0xeda <init_Event_Timer>
	printf("init done!\n");
     30c:	88 e6       	ldi	r24, 0x68	; 104
     30e:	92 e0       	ldi	r25, 0x02	; 2
     310:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <puts>
	
	// could have sealed following in a function //
	load_new_sensor( 1000, 4000, (BaseSensor *)BMP280_ptr, 0 );
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	a6 01       	movw	r20, r12
     31a:	60 ea       	ldi	r22, 0xA0	; 160
     31c:	7f e0       	ldi	r23, 0x0F	; 15
     31e:	88 ee       	ldi	r24, 0xE8	; 232
     320:	93 e0       	ldi	r25, 0x03	; 3
     322:	0e 94 ba 0c 	call	0x1974	; 0x1974 <load_new_sensor>
	load_new_sensor( 3000, 4000, (BaseSensor *)Si_ptr, 0 );
     326:	20 e0       	ldi	r18, 0x00	; 0
     328:	30 e0       	ldi	r19, 0x00	; 0
     32a:	a7 01       	movw	r20, r14
     32c:	60 ea       	ldi	r22, 0xA0	; 160
     32e:	7f e0       	ldi	r23, 0x0F	; 15
     330:	88 eb       	ldi	r24, 0xB8	; 184
     332:	9b e0       	ldi	r25, 0x0B	; 11
     334:	0e 94 ba 0c 	call	0x1974	; 0x1974 <load_new_sensor>
	load_new_device( 3300, 12000, (BaseDevice *)Strg_ptr, 0 );
     338:	20 e0       	ldi	r18, 0x00	; 0
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	a8 01       	movw	r20, r16
     33e:	60 ee       	ldi	r22, 0xE0	; 224
     340:	7e e2       	ldi	r23, 0x2E	; 46
     342:	84 ee       	ldi	r24, 0xE4	; 228
     344:	9c e0       	ldi	r25, 0x0C	; 12
     346:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <load_new_device>
	load_new_device( 100, 4000, (BaseDevice *)Load_ptr, 0 );
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	ae 01       	movw	r20, r28
     350:	60 ea       	ldi	r22, 0xA0	; 160
     352:	7f e0       	ldi	r23, 0x0F	; 15
     354:	84 e6       	ldi	r24, 0x64	; 100
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <load_new_device>
	// load_new_sensor( 4, 4, (BaseSensor *)Si7020_ptr, 0 );
	init_set_timer( get_next_interval() );
     35c:	0e 94 5f 0c 	call	0x18be	; 0x18be <get_next_interval>
     360:	0e 94 67 08 	call	0x10ce	; 0x10ce <init_set_timer>
	
	// Enable global interrupt //
	sei();
     364:	78 94       	sei
     366:	0f 90       	pop	r0
     368:	0f 90       	pop	r0
     36a:	0f 90       	pop	r0
     36c:	0f 90       	pop	r0

	for (;;){}
     36e:	ff cf       	rjmp	.-2      	; 0x36e <main+0xfa>

00000370 <BMP280_ReadBytes>:
  @brief Reads some bytes from the BMP280
  @param[in] *values pointer to an array to store the bytes, put the starting register in values[0]
  @param[in] length how many bytes to read
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadBytes(unsigned char *values, char length){
     370:	1f 93       	push	r17
     372:	cf 93       	push	r28
     374:	df 93       	push	r29
     376:	ec 01       	movw	r28, r24
     378:	16 2f       	mov	r17, r22
	//printf("BMP280_ReadBytes");
	//printf("0x%1x",(unsigned)TWI_BeginWrite(BMP280_ADDR));
	TWI_BeginWrite(BMP280_ADDR);
     37a:	86 e7       	ldi	r24, 0x76	; 118
     37c:	0e 94 c6 08 	call	0x118c	; 0x118c <TWI_BeginWrite>
	//printf("0x%1x",(unsigned)TWI_WriteByte(values[0]));
	TWI_WriteByte(values[0]);//Write the register address
     380:	88 81       	ld	r24, Y
     382:	0e 94 b8 08 	call	0x1170	; 0x1170 <TWI_WriteByte>
	status = TWI_BeginRead(BMP280_ADDR); //Send a repeated start
     386:	86 e7       	ldi	r24, 0x76	; 118
     388:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <TWI_BeginRead>
     38c:	80 93 b4 05 	sts	0x05B4, r24
	//printf("0x%1x",status);
	if (status == TWI_SLAR_ACK){
     390:	80 34       	cpi	r24, 0x40	; 64
     392:	81 f4       	brne	.+32     	; 0x3b4 <BMP280_ReadBytes+0x44>
		if(((TWI_Read(&values[0],length,false)&TWSR_MASK) == TWI_REC_NACK) && (TWI_Stop() != 0)) return(1); //Receive bytes, send a STOP bit, and check for success
     394:	61 2f       	mov	r22, r17
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	40 e0       	ldi	r20, 0x00	; 0
     39a:	ce 01       	movw	r24, r28
     39c:	0e 94 20 09 	call	0x1240	; 0x1240 <TWI_Read>
     3a0:	88 7f       	andi	r24, 0xF8	; 248
     3a2:	88 35       	cpi	r24, 0x58	; 88
     3a4:	49 f4       	brne	.+18     	; 0x3b8 <BMP280_ReadBytes+0x48>
     3a6:	0e 94 1b 09 	call	0x1236	; 0x1236 <TWI_Stop>
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	81 11       	cpse	r24, r1
     3ae:	05 c0       	rjmp	.+10     	; 0x3ba <BMP280_ReadBytes+0x4a>
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	03 c0       	rjmp	.+6      	; 0x3ba <BMP280_ReadBytes+0x4a>
	}
	return(0);
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	01 c0       	rjmp	.+2      	; 0x3ba <BMP280_ReadBytes+0x4a>
     3b8:	90 e0       	ldi	r25, 0x00	; 0
}
     3ba:	89 2f       	mov	r24, r25
     3bc:	df 91       	pop	r29
     3be:	cf 91       	pop	r28
     3c0:	1f 91       	pop	r17
     3c2:	08 95       	ret

000003c4 <BMP280_ReadInt>:
  @brief Reads an int from the BMP280
  @param[in] address The register address of the first byte of the uint
  @param[out] val* A pointer to a uint to store the received data to
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadInt(char address, int *val){
     3c4:	0f 93       	push	r16
     3c6:	1f 93       	push	r17
     3c8:	cf 93       	push	r28
     3ca:	df 93       	push	r29
     3cc:	00 d0       	rcall	.+0      	; 0x3ce <BMP280_ReadInt+0xa>
     3ce:	cd b7       	in	r28, 0x3d	; 61
     3d0:	de b7       	in	r29, 0x3e	; 62
     3d2:	8b 01       	movw	r16, r22
	//printf("\nBMP280_ReadInt");
	unsigned char data[2];	//char is 4 bits, 1 byte

	data[0] = address;
     3d4:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     3d6:	62 e0       	ldi	r22, 0x02	; 2
     3d8:	ce 01       	movw	r24, r28
     3da:	01 96       	adiw	r24, 0x01	; 1
     3dc:	0e 94 b8 01 	call	0x370	; 0x370 <BMP280_ReadBytes>
     3e0:	88 23       	and	r24, r24
     3e2:	59 f0       	breq	.+22     	; 0x3fa <BMP280_ReadInt+0x36>
		*val = (((int)data[1]<<8)|(int)data[0]);
     3e4:	8a 81       	ldd	r24, Y+2	; 0x02
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	98 2f       	mov	r25, r24
     3ea:	88 27       	eor	r24, r24
     3ec:	29 81       	ldd	r18, Y+1	; 0x01
     3ee:	82 2b       	or	r24, r18
     3f0:	f8 01       	movw	r30, r16
     3f2:	91 83       	std	Z+1, r25	; 0x01
     3f4:	80 83       	st	Z, r24
		return(1);
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	03 c0       	rjmp	.+6      	; 0x400 <BMP280_ReadInt+0x3c>
	}
	*val = 0;
     3fa:	f8 01       	movw	r30, r16
     3fc:	11 82       	std	Z+1, r1	; 0x01
     3fe:	10 82       	st	Z, r1
	return(0);
}
     400:	0f 90       	pop	r0
     402:	0f 90       	pop	r0
     404:	df 91       	pop	r29
     406:	cf 91       	pop	r28
     408:	1f 91       	pop	r17
     40a:	0f 91       	pop	r16
     40c:	08 95       	ret

0000040e <BMP280_Init>:

/*************************************************************************//**
  @brief Initializes the BMP280 and reads the calibration data from the device
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
char BMP280_Init(void){
     40e:	cf 93       	push	r28
     410:	df 93       	push	r29
     412:	00 d0       	rcall	.+0      	; 0x414 <BMP280_Init+0x6>
     414:	cd b7       	in	r28, 0x3d	; 61
     416:	de b7       	in	r29, 0x3e	; 62
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
     418:	88 e8       	ldi	r24, 0x88	; 136
     41a:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     41c:	62 e0       	ldi	r22, 0x02	; 2
     41e:	ce 01       	movw	r24, r28
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	0e 94 b8 01 	call	0x370	; 0x370 <BMP280_ReadBytes>
     426:	88 23       	and	r24, r24
     428:	99 f0       	breq	.+38     	; 0x450 <BMP280_Init+0x42>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     42a:	8a 81       	ldd	r24, Y+2	; 0x02
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	98 2f       	mov	r25, r24
     430:	88 27       	eor	r24, r24
     432:	29 81       	ldd	r18, Y+1	; 0x01
     434:	82 2b       	or	r24, r18
     436:	90 93 bf 05 	sts	0x05BF, r25
     43a:	80 93 be 05 	sts	0x05BE, r24

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
     43e:	64 ed       	ldi	r22, 0xD4	; 212
     440:	75 e0       	ldi	r23, 0x05	; 5
     442:	8a e8       	ldi	r24, 0x8A	; 138
     444:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <BMP280_ReadInt>
	// used in the calculations when taking measurements.

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
     448:	88 23       	and	r24, r24
     44a:	09 f4       	brne	.+2      	; 0x44e <BMP280_Init+0x40>
     44c:	bb c0       	rjmp	.+374    	; 0x5c4 <BMP280_Init+0x1b6>
     44e:	05 c0       	rjmp	.+10     	; 0x45a <BMP280_Init+0x4c>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     450:	10 92 bf 05 	sts	0x05BF, r1
     454:	10 92 be 05 	sts	0x05BE, r1
     458:	b5 c0       	rjmp	.+362    	; 0x5c4 <BMP280_Init+0x1b6>
	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
     45a:	62 ed       	ldi	r22, 0xD2	; 210
     45c:	75 e0       	ldi	r23, 0x05	; 5
     45e:	8c e8       	ldi	r24, 0x8C	; 140
     460:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <BMP280_ReadInt>

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
     464:	88 23       	and	r24, r24
     466:	09 f4       	brne	.+2      	; 0x46a <BMP280_Init+0x5c>
     468:	ad c0       	rjmp	.+346    	; 0x5c4 <BMP280_Init+0x1b6>
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
     46a:	8e e8       	ldi	r24, 0x8E	; 142
     46c:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     46e:	62 e0       	ldi	r22, 0x02	; 2
     470:	ce 01       	movw	r24, r28
     472:	01 96       	adiw	r24, 0x01	; 1
     474:	0e 94 b8 01 	call	0x370	; 0x370 <BMP280_ReadBytes>
     478:	88 23       	and	r24, r24
     47a:	99 f0       	breq	.+38     	; 0x4a2 <BMP280_Init+0x94>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     47c:	8a 81       	ldd	r24, Y+2	; 0x02
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	98 2f       	mov	r25, r24
     482:	88 27       	eor	r24, r24
     484:	29 81       	ldd	r18, Y+1	; 0x01
     486:	82 2b       	or	r24, r18
     488:	90 93 c1 05 	sts	0x05C1, r25
     48c:	80 93 c0 05 	sts	0x05C0, r24
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     490:	60 ed       	ldi	r22, 0xD0	; 208
     492:	75 e0       	ldi	r23, 0x05	; 5
     494:	80 e9       	ldi	r24, 0x90	; 144
     496:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <BMP280_ReadInt>
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
     49a:	88 23       	and	r24, r24
     49c:	09 f4       	brne	.+2      	; 0x4a0 <BMP280_Init+0x92>
     49e:	92 c0       	rjmp	.+292    	; 0x5c4 <BMP280_Init+0x1b6>
     4a0:	05 c0       	rjmp	.+10     	; 0x4ac <BMP280_Init+0x9e>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     4a2:	10 92 c1 05 	sts	0x05C1, r1
     4a6:	10 92 c0 05 	sts	0x05C0, r1
     4aa:	8c c0       	rjmp	.+280    	; 0x5c4 <BMP280_Init+0x1b6>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     4ac:	6e ec       	ldi	r22, 0xCE	; 206
     4ae:	75 e0       	ldi	r23, 0x05	; 5
     4b0:	82 e9       	ldi	r24, 0x92	; 146
     4b2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <BMP280_ReadInt>
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     4b6:	88 23       	and	r24, r24
     4b8:	09 f4       	brne	.+2      	; 0x4bc <BMP280_Init+0xae>
     4ba:	84 c0       	rjmp	.+264    	; 0x5c4 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     4bc:	6c ec       	ldi	r22, 0xCC	; 204
     4be:	75 e0       	ldi	r23, 0x05	; 5
     4c0:	84 e9       	ldi	r24, 0x94	; 148
     4c2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <BMP280_ReadInt>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     4c6:	88 23       	and	r24, r24
     4c8:	09 f4       	brne	.+2      	; 0x4cc <BMP280_Init+0xbe>
     4ca:	7c c0       	rjmp	.+248    	; 0x5c4 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     4cc:	6a ec       	ldi	r22, 0xCA	; 202
     4ce:	75 e0       	ldi	r23, 0x05	; 5
     4d0:	86 e9       	ldi	r24, 0x96	; 150
     4d2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <BMP280_ReadInt>
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     4d6:	88 23       	and	r24, r24
     4d8:	09 f4       	brne	.+2      	; 0x4dc <BMP280_Init+0xce>
     4da:	74 c0       	rjmp	.+232    	; 0x5c4 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     4dc:	68 ec       	ldi	r22, 0xC8	; 200
     4de:	75 e0       	ldi	r23, 0x05	; 5
     4e0:	88 e9       	ldi	r24, 0x98	; 152
     4e2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <BMP280_ReadInt>
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     4e6:	88 23       	and	r24, r24
     4e8:	09 f4       	brne	.+2      	; 0x4ec <BMP280_Init+0xde>
     4ea:	6c c0       	rjmp	.+216    	; 0x5c4 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     4ec:	66 ec       	ldi	r22, 0xC6	; 198
     4ee:	75 e0       	ldi	r23, 0x05	; 5
     4f0:	8a e9       	ldi	r24, 0x9A	; 154
     4f2:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <BMP280_ReadInt>
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     4f6:	88 23       	and	r24, r24
     4f8:	09 f4       	brne	.+2      	; 0x4fc <BMP280_Init+0xee>
     4fa:	64 c0       	rjmp	.+200    	; 0x5c4 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     4fc:	64 ec       	ldi	r22, 0xC4	; 196
     4fe:	75 e0       	ldi	r23, 0x05	; 5
     500:	8c e9       	ldi	r24, 0x9C	; 156
     502:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <BMP280_ReadInt>
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     506:	88 23       	and	r24, r24
     508:	09 f4       	brne	.+2      	; 0x50c <BMP280_Init+0xfe>
     50a:	5c c0       	rjmp	.+184    	; 0x5c4 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9C, &dig_P8)  &&
		BMP280_ReadInt(0x9E, &dig_P9)){
     50c:	62 ec       	ldi	r22, 0xC2	; 194
     50e:	75 e0       	ldi	r23, 0x05	; 5
     510:	8e e9       	ldi	r24, 0x9E	; 158
     512:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <BMP280_ReadInt>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     516:	88 23       	and	r24, r24
     518:	09 f4       	brne	.+2      	; 0x51c <BMP280_Init+0x10e>
     51a:	54 c0       	rjmp	.+168    	; 0x5c4 <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9E, &dig_P9)){
			printf("\nT: %i ,%i ,%i P: %i ,%i ,%i ,%i ,%i ,%i ,%i ,%1 ,%i \n",dig_T1,dig_T2,dig_T3,dig_P1,dig_P2,dig_P3,dig_P4,dig_P5,dig_P6,dig_P7,dig_P8,dig_P9);
     51c:	80 91 c3 05 	lds	r24, 0x05C3
     520:	8f 93       	push	r24
     522:	80 91 c2 05 	lds	r24, 0x05C2
     526:	8f 93       	push	r24
     528:	80 91 c5 05 	lds	r24, 0x05C5
     52c:	8f 93       	push	r24
     52e:	80 91 c4 05 	lds	r24, 0x05C4
     532:	8f 93       	push	r24
     534:	80 91 c7 05 	lds	r24, 0x05C7
     538:	8f 93       	push	r24
     53a:	80 91 c6 05 	lds	r24, 0x05C6
     53e:	8f 93       	push	r24
     540:	80 91 c9 05 	lds	r24, 0x05C9
     544:	8f 93       	push	r24
     546:	80 91 c8 05 	lds	r24, 0x05C8
     54a:	8f 93       	push	r24
     54c:	80 91 cb 05 	lds	r24, 0x05CB
     550:	8f 93       	push	r24
     552:	80 91 ca 05 	lds	r24, 0x05CA
     556:	8f 93       	push	r24
     558:	80 91 cd 05 	lds	r24, 0x05CD
     55c:	8f 93       	push	r24
     55e:	80 91 cc 05 	lds	r24, 0x05CC
     562:	8f 93       	push	r24
     564:	80 91 cf 05 	lds	r24, 0x05CF
     568:	8f 93       	push	r24
     56a:	80 91 ce 05 	lds	r24, 0x05CE
     56e:	8f 93       	push	r24
     570:	80 91 d1 05 	lds	r24, 0x05D1
     574:	8f 93       	push	r24
     576:	80 91 d0 05 	lds	r24, 0x05D0
     57a:	8f 93       	push	r24
     57c:	80 91 c1 05 	lds	r24, 0x05C1
     580:	8f 93       	push	r24
     582:	80 91 c0 05 	lds	r24, 0x05C0
     586:	8f 93       	push	r24
     588:	80 91 d3 05 	lds	r24, 0x05D3
     58c:	8f 93       	push	r24
     58e:	80 91 d2 05 	lds	r24, 0x05D2
     592:	8f 93       	push	r24
     594:	80 91 d5 05 	lds	r24, 0x05D5
     598:	8f 93       	push	r24
     59a:	80 91 d4 05 	lds	r24, 0x05D4
     59e:	8f 93       	push	r24
     5a0:	80 91 bf 05 	lds	r24, 0x05BF
     5a4:	8f 93       	push	r24
     5a6:	80 91 be 05 	lds	r24, 0x05BE
     5aa:	8f 93       	push	r24
     5ac:	83 e7       	ldi	r24, 0x73	; 115
     5ae:	92 e0       	ldi	r25, 0x02	; 2
     5b0:	9f 93       	push	r25
     5b2:	8f 93       	push	r24
     5b4:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <printf>
		return (1);
     5b8:	0f b6       	in	r0, 0x3f	; 63
     5ba:	f8 94       	cli
     5bc:	de bf       	out	0x3e, r29	; 62
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	cd bf       	out	0x3d, r28	; 61
     5c2:	81 e0       	ldi	r24, 0x01	; 1
	}
	else 
		return (0);
}
     5c4:	0f 90       	pop	r0
     5c6:	0f 90       	pop	r0
     5c8:	df 91       	pop	r29
     5ca:	cf 91       	pop	r28
     5cc:	08 95       	ret

000005ce <BMP280_SetOversampling>:
  @brief Sets the oversampling setting for the library
  @param[in] oss Oversampling setting
  @return 1
*****************************************************************************/
char BMP280_SetOversampling(short oss){
	oversampling = oss;
     5ce:	90 93 bd 05 	sts	0x05BD, r25
     5d2:	80 93 bc 05 	sts	0x05BC, r24
	return (1);
}
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	08 95       	ret

000005da <BMP280_StartMeasurment>:

/*************************************************************************//**
  @brief Starts a measurement
  @return time to wait for result (in ms)
*****************************************************************************/
char BMP280_StartMeasurment(void){
     5da:	1f 93       	push	r17
     5dc:	cf 93       	push	r28
     5de:	df 93       	push	r29
     5e0:	00 d0       	rcall	.+0      	; 0x5e2 <BMP280_StartMeasurment+0x8>
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
	unsigned char data[2], result, delay;
	
	data[0] = BMP280_REG_CONTROL;
     5e6:	84 ef       	ldi	r24, 0xF4	; 244
     5e8:	89 83       	std	Y+1, r24	; 0x01

	switch (oversampling){
     5ea:	80 91 bc 05 	lds	r24, 0x05BC
     5ee:	90 91 bd 05 	lds	r25, 0x05BD
     5f2:	82 30       	cpi	r24, 0x02	; 2
     5f4:	91 05       	cpc	r25, r1
     5f6:	01 f1       	breq	.+64     	; 0x638 <BMP280_StartMeasurment+0x5e>
     5f8:	2c f4       	brge	.+10     	; 0x604 <BMP280_StartMeasurment+0x2a>
     5fa:	00 97       	sbiw	r24, 0x00	; 0
     5fc:	49 f0       	breq	.+18     	; 0x610 <BMP280_StartMeasurment+0x36>
     5fe:	01 97       	sbiw	r24, 0x01	; 1
     600:	89 f0       	breq	.+34     	; 0x624 <BMP280_StartMeasurment+0x4a>
     602:	38 c0       	rjmp	.+112    	; 0x674 <BMP280_StartMeasurment+0x9a>
     604:	83 30       	cpi	r24, 0x03	; 3
     606:	91 05       	cpc	r25, r1
     608:	09 f1       	breq	.+66     	; 0x64c <BMP280_StartMeasurment+0x72>
     60a:	04 97       	sbiw	r24, 0x04	; 4
     60c:	49 f1       	breq	.+82     	; 0x660 <BMP280_StartMeasurment+0x86>
     60e:	32 c0       	rjmp	.+100    	; 0x674 <BMP280_StartMeasurment+0x9a>
		case 0:
		data[1] = BMP280_COMMAND_PRESSURE0;
     610:	85 e2       	ldi	r24, 0x25	; 37
     612:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	90 93 bb 05 	sts	0x05BB, r25
     61c:	80 93 ba 05 	sts	0x05BA, r24
		delay = 8;
     620:	18 e0       	ldi	r17, 0x08	; 8
		break;
     622:	2b c0       	rjmp	.+86     	; 0x67a <BMP280_StartMeasurment+0xa0>
		case 1:
		data[1] = BMP280_COMMAND_PRESSURE1;
     624:	89 e2       	ldi	r24, 0x29	; 41
     626:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	90 e0       	ldi	r25, 0x00	; 0
     62c:	90 93 bb 05 	sts	0x05BB, r25
     630:	80 93 ba 05 	sts	0x05BA, r24
		delay = 10;
     634:	1a e0       	ldi	r17, 0x0A	; 10
		break;
     636:	21 c0       	rjmp	.+66     	; 0x67a <BMP280_StartMeasurment+0xa0>
		case 2:
		data[1] = BMP280_COMMAND_PRESSURE2;
     638:	8d e2       	ldi	r24, 0x2D	; 45
     63a:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     63c:	81 e0       	ldi	r24, 0x01	; 1
     63e:	90 e0       	ldi	r25, 0x00	; 0
     640:	90 93 bb 05 	sts	0x05BB, r25
     644:	80 93 ba 05 	sts	0x05BA, r24
		delay = 15;
     648:	1f e0       	ldi	r17, 0x0F	; 15
		break;
     64a:	17 c0       	rjmp	.+46     	; 0x67a <BMP280_StartMeasurment+0xa0>
		case 3:
		data[1] = BMP280_COMMAND_PRESSURE3;
     64c:	81 e3       	ldi	r24, 0x31	; 49
     64e:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     650:	81 e0       	ldi	r24, 0x01	; 1
     652:	90 e0       	ldi	r25, 0x00	; 0
     654:	90 93 bb 05 	sts	0x05BB, r25
     658:	80 93 ba 05 	sts	0x05BA, r24
		delay = 24;
     65c:	18 e1       	ldi	r17, 0x18	; 24
		break;
     65e:	0d c0       	rjmp	.+26     	; 0x67a <BMP280_StartMeasurment+0xa0>
		case 4:
		data[1] = BMP280_COMMAND_PRESSURE4;
     660:	8d e5       	ldi	r24, 0x5D	; 93
     662:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	90 93 bb 05 	sts	0x05BB, r25
     66c:	80 93 ba 05 	sts	0x05BA, r24
		delay = 45;
     670:	1d e2       	ldi	r17, 0x2D	; 45
		break;
     672:	03 c0       	rjmp	.+6      	; 0x67a <BMP280_StartMeasurment+0xa0>
		default:
		data[1] = BMP280_COMMAND_PRESSURE0;
     674:	85 e2       	ldi	r24, 0x25	; 37
     676:	8a 83       	std	Y+2, r24	; 0x02
		delay = 9;
     678:	19 e0       	ldi	r17, 0x09	; 9
  @param[in] *values pointer to an array to send, put the starting register in values[0]
  @param[in] length how many bytes to write (including the starting register ie. sizeof(values))
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_WriteBytes(unsigned char *values, char length){
	TWI_BeginWrite(BMP280_ADDR);
     67a:	86 e7       	ldi	r24, 0x76	; 118
     67c:	0e 94 c6 08 	call	0x118c	; 0x118c <TWI_BeginWrite>
	if((TWI_Write(&values[0],length) == TWI_SENT_ACK) && (TWI_Stop() != 0)) return 1; //Send bytes, a STOP bit, and check for success
     680:	62 e0       	ldi	r22, 0x02	; 2
     682:	70 e0       	ldi	r23, 0x00	; 0
     684:	ce 01       	movw	r24, r28
     686:	01 96       	adiw	r24, 0x01	; 1
     688:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <TWI_Write>
     68c:	88 32       	cpi	r24, 0x28	; 40
     68e:	31 f4       	brne	.+12     	; 0x69c <BMP280_StartMeasurment+0xc2>
     690:	0e 94 1b 09 	call	0x1236	; 0x1236 <TWI_Stop>
		data[1] = BMP280_COMMAND_PRESSURE0;
		delay = 9;
		break;
	}
	result = BMP280_WriteBytes(&data[0], 2);
	if (result) // good write?
     694:	88 23       	and	r24, r24
     696:	21 f0       	breq	.+8      	; 0x6a0 <BMP280_StartMeasurment+0xc6>
	return(delay); // return the delay in ms (rounded up) to wait before retrieving data
     698:	81 2f       	mov	r24, r17
     69a:	03 c0       	rjmp	.+6      	; 0x6a2 <BMP280_StartMeasurment+0xc8>
	else
	return(-1); // or return -1 if there was a problem communicating with the BMP
     69c:	8f ef       	ldi	r24, 0xFF	; 255
     69e:	01 c0       	rjmp	.+2      	; 0x6a2 <BMP280_StartMeasurment+0xc8>
     6a0:	8f ef       	ldi	r24, 0xFF	; 255
}
     6a2:	0f 90       	pop	r0
     6a4:	0f 90       	pop	r0
     6a6:	df 91       	pop	r29
     6a8:	cf 91       	pop	r28
     6aa:	1f 91       	pop	r17
     6ac:	08 95       	ret

000006ae <BMP280_GetUnPT>:
  @brief Gets the uncalibrated temperature and pressure data
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetUnPT(double *uP, double *uT){
     6ae:	8f 92       	push	r8
     6b0:	9f 92       	push	r9
     6b2:	af 92       	push	r10
     6b4:	bf 92       	push	r11
     6b6:	cf 92       	push	r12
     6b8:	df 92       	push	r13
     6ba:	ef 92       	push	r14
     6bc:	ff 92       	push	r15
     6be:	1f 93       	push	r17
     6c0:	cf 93       	push	r28
     6c2:	df 93       	push	r29
     6c4:	00 d0       	rcall	.+0      	; 0x6c6 <BMP280_GetUnPT+0x18>
     6c6:	00 d0       	rcall	.+0      	; 0x6c8 <BMP280_GetUnPT+0x1a>
     6c8:	00 d0       	rcall	.+0      	; 0x6ca <BMP280_GetUnPT+0x1c>
     6ca:	cd b7       	in	r28, 0x3d	; 61
     6cc:	de b7       	in	r29, 0x3e	; 62
     6ce:	6c 01       	movw	r12, r24
     6d0:	7b 01       	movw	r14, r22
	unsigned char data[6];
	char result;
	
	data[0] = BMP280_REG_RESULT_PRESSURE; //0xF7
     6d2:	87 ef       	ldi	r24, 0xF7	; 247
     6d4:	89 83       	std	Y+1, r24	; 0x01

	result = BMP280_ReadBytes(&data[0], 6); // 0xF7; xF8, 0xF9, 0xFA, 0xFB, 0xFC
     6d6:	66 e0       	ldi	r22, 0x06	; 6
     6d8:	ce 01       	movw	r24, r28
     6da:	01 96       	adiw	r24, 0x01	; 1
     6dc:	0e 94 b8 01 	call	0x370	; 0x370 <BMP280_ReadBytes>
     6e0:	18 2f       	mov	r17, r24
	if (result){ // good read
     6e2:	88 23       	and	r24, r24
     6e4:	09 f4       	brne	.+2      	; 0x6e8 <BMP280_GetUnPT+0x3a>
     6e6:	76 c0       	rjmp	.+236    	; 0x7d4 <BMP280_GetUnPT+0x126>
		double factor = pow(2, 4);
		*uP = (( (data[0] *256.0) + data[1] + (data[2]/256.0))) * factor ;	//20bit UP
     6e8:	69 81       	ldd	r22, Y+1	; 0x01
     6ea:	70 e0       	ldi	r23, 0x00	; 0
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__floatsisf>
     6f4:	20 e0       	ldi	r18, 0x00	; 0
     6f6:	30 e0       	ldi	r19, 0x00	; 0
     6f8:	40 e8       	ldi	r20, 0x80	; 128
     6fa:	53 e4       	ldi	r21, 0x43	; 67
     6fc:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     700:	4b 01       	movw	r8, r22
     702:	5c 01       	movw	r10, r24
     704:	8a 81       	ldd	r24, Y+2	; 0x02
     706:	68 2f       	mov	r22, r24
     708:	70 e0       	ldi	r23, 0x00	; 0
     70a:	80 e0       	ldi	r24, 0x00	; 0
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__floatsisf>
     712:	9b 01       	movw	r18, r22
     714:	ac 01       	movw	r20, r24
     716:	c5 01       	movw	r24, r10
     718:	b4 01       	movw	r22, r8
     71a:	0e 94 2e 14 	call	0x285c	; 0x285c <__addsf3>
     71e:	4b 01       	movw	r8, r22
     720:	5c 01       	movw	r10, r24
     722:	4b 81       	ldd	r20, Y+3	; 0x03
     724:	64 2f       	mov	r22, r20
     726:	70 e0       	ldi	r23, 0x00	; 0
     728:	80 e0       	ldi	r24, 0x00	; 0
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__floatsisf>
     730:	20 e0       	ldi	r18, 0x00	; 0
     732:	30 e0       	ldi	r19, 0x00	; 0
     734:	40 e8       	ldi	r20, 0x80	; 128
     736:	5b e3       	ldi	r21, 0x3B	; 59
     738:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     73c:	9b 01       	movw	r18, r22
     73e:	ac 01       	movw	r20, r24
     740:	c5 01       	movw	r24, r10
     742:	b4 01       	movw	r22, r8
     744:	0e 94 2e 14 	call	0x285c	; 0x285c <__addsf3>
     748:	20 e0       	ldi	r18, 0x00	; 0
     74a:	30 e0       	ldi	r19, 0x00	; 0
     74c:	40 e8       	ldi	r20, 0x80	; 128
     74e:	51 e4       	ldi	r21, 0x41	; 65
     750:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     754:	f6 01       	movw	r30, r12
     756:	60 83       	st	Z, r22
     758:	71 83       	std	Z+1, r23	; 0x01
     75a:	82 83       	std	Z+2, r24	; 0x02
     75c:	93 83       	std	Z+3, r25	; 0x03
		*uT = (( (data[3] *256.0) + data[4] + (data[5]/256.0))) * factor ;	//20bit UT
     75e:	6c 81       	ldd	r22, Y+4	; 0x04
     760:	70 e0       	ldi	r23, 0x00	; 0
     762:	80 e0       	ldi	r24, 0x00	; 0
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__floatsisf>
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	40 e8       	ldi	r20, 0x80	; 128
     770:	53 e4       	ldi	r21, 0x43	; 67
     772:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     776:	4b 01       	movw	r8, r22
     778:	5c 01       	movw	r10, r24
     77a:	8d 81       	ldd	r24, Y+5	; 0x05
     77c:	68 2f       	mov	r22, r24
     77e:	70 e0       	ldi	r23, 0x00	; 0
     780:	80 e0       	ldi	r24, 0x00	; 0
     782:	90 e0       	ldi	r25, 0x00	; 0
     784:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__floatsisf>
     788:	9b 01       	movw	r18, r22
     78a:	ac 01       	movw	r20, r24
     78c:	c5 01       	movw	r24, r10
     78e:	b4 01       	movw	r22, r8
     790:	0e 94 2e 14 	call	0x285c	; 0x285c <__addsf3>
     794:	4b 01       	movw	r8, r22
     796:	5c 01       	movw	r10, r24
     798:	8e 81       	ldd	r24, Y+6	; 0x06
     79a:	68 2f       	mov	r22, r24
     79c:	70 e0       	ldi	r23, 0x00	; 0
     79e:	80 e0       	ldi	r24, 0x00	; 0
     7a0:	90 e0       	ldi	r25, 0x00	; 0
     7a2:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__floatsisf>
     7a6:	20 e0       	ldi	r18, 0x00	; 0
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	40 e8       	ldi	r20, 0x80	; 128
     7ac:	5b e3       	ldi	r21, 0x3B	; 59
     7ae:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     7b2:	9b 01       	movw	r18, r22
     7b4:	ac 01       	movw	r20, r24
     7b6:	c5 01       	movw	r24, r10
     7b8:	b4 01       	movw	r22, r8
     7ba:	0e 94 2e 14 	call	0x285c	; 0x285c <__addsf3>
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	30 e0       	ldi	r19, 0x00	; 0
     7c2:	40 e8       	ldi	r20, 0x80	; 128
     7c4:	51 e4       	ldi	r21, 0x41	; 65
     7c6:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     7ca:	f7 01       	movw	r30, r14
     7cc:	60 83       	st	Z, r22
     7ce:	71 83       	std	Z+1, r23	; 0x01
     7d0:	82 83       	std	Z+2, r24	; 0x02
     7d2:	93 83       	std	Z+3, r25	; 0x03
		
	}
	return(result);
}
     7d4:	81 2f       	mov	r24, r17
     7d6:	26 96       	adiw	r28, 0x06	; 6
     7d8:	0f b6       	in	r0, 0x3f	; 63
     7da:	f8 94       	cli
     7dc:	de bf       	out	0x3e, r29	; 62
     7de:	0f be       	out	0x3f, r0	; 63
     7e0:	cd bf       	out	0x3d, r28	; 61
     7e2:	df 91       	pop	r29
     7e4:	cf 91       	pop	r28
     7e6:	1f 91       	pop	r17
     7e8:	ff 90       	pop	r15
     7ea:	ef 90       	pop	r14
     7ec:	df 90       	pop	r13
     7ee:	cf 90       	pop	r12
     7f0:	bf 90       	pop	r11
     7f2:	af 90       	pop	r10
     7f4:	9f 90       	pop	r9
     7f6:	8f 90       	pop	r8
     7f8:	08 95       	ret

000007fa <BMP280_CalcTemperature>:
  @brief Calculates temperature
  @param[out] pointer to a place to store the temperature data
  @param[in] pointer to the uncalibrated temperature data
  @return status
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
     7fa:	4f 92       	push	r4
     7fc:	5f 92       	push	r5
     7fe:	6f 92       	push	r6
     800:	7f 92       	push	r7
     802:	8f 92       	push	r8
     804:	9f 92       	push	r9
     806:	af 92       	push	r10
     808:	bf 92       	push	r11
     80a:	cf 92       	push	r12
     80c:	df 92       	push	r13
     80e:	ef 92       	push	r14
     810:	ff 92       	push	r15
     812:	cf 93       	push	r28
     814:	df 93       	push	r29
     816:	ec 01       	movw	r28, r24
	double adc_T = *uT ;
     818:	fb 01       	movw	r30, r22
     81a:	c0 80       	ld	r12, Z
     81c:	d1 80       	ldd	r13, Z+1	; 0x01
     81e:	e2 80       	ldd	r14, Z+2	; 0x02
     820:	f3 80       	ldd	r15, Z+3	; 0x03
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
     822:	80 91 be 05 	lds	r24, 0x05BE
     826:	90 91 bf 05 	lds	r25, 0x05BF
     82a:	bc 01       	movw	r22, r24
     82c:	80 e0       	ldi	r24, 0x00	; 0
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__floatunsisf>
     834:	2b 01       	movw	r4, r22
     836:	3c 01       	movw	r6, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	40 e0       	ldi	r20, 0x00	; 0
     83e:	57 e3       	ldi	r21, 0x37	; 55
     840:	c7 01       	movw	r24, r14
     842:	b6 01       	movw	r22, r12
     844:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     848:	4b 01       	movw	r8, r22
     84a:	5c 01       	movw	r10, r24
     84c:	20 e0       	ldi	r18, 0x00	; 0
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	40 e0       	ldi	r20, 0x00	; 0
     852:	59 e3       	ldi	r21, 0x39	; 57
     854:	c3 01       	movw	r24, r6
     856:	b2 01       	movw	r22, r4
     858:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     85c:	9b 01       	movw	r18, r22
     85e:	ac 01       	movw	r20, r24
     860:	c5 01       	movw	r24, r10
     862:	b4 01       	movw	r22, r8
     864:	0e 94 2d 14 	call	0x285a	; 0x285a <__subsf3>
     868:	4b 01       	movw	r8, r22
     86a:	5c 01       	movw	r10, r24
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
	double adc_T = *uT ;
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
     86c:	20 e0       	ldi	r18, 0x00	; 0
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	40 e8       	ldi	r20, 0x80	; 128
     872:	58 e3       	ldi	r21, 0x38	; 56
     874:	c7 01       	movw	r24, r14
     876:	b6 01       	movw	r22, r12
     878:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     87c:	6b 01       	movw	r12, r22
     87e:	7c 01       	movw	r14, r24
     880:	20 e0       	ldi	r18, 0x00	; 0
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	40 e8       	ldi	r20, 0x80	; 128
     886:	5a e3       	ldi	r21, 0x3A	; 58
     888:	c3 01       	movw	r24, r6
     88a:	b2 01       	movw	r22, r4
     88c:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     890:	9b 01       	movw	r18, r22
     892:	ac 01       	movw	r20, r24
     894:	c7 01       	movw	r24, r14
     896:	b6 01       	movw	r22, r12
     898:	0e 94 2d 14 	call	0x285a	; 0x285a <__subsf3>
     89c:	6b 01       	movw	r12, r22
     89e:	7c 01       	movw	r14, r24
     8a0:	80 91 d4 05 	lds	r24, 0x05D4
     8a4:	90 91 d5 05 	lds	r25, 0x05D5
     8a8:	bc 01       	movw	r22, r24
     8aa:	99 0f       	add	r25, r25
     8ac:	88 0b       	sbc	r24, r24
     8ae:	99 0b       	sbc	r25, r25
     8b0:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__floatsisf>
     8b4:	9b 01       	movw	r18, r22
     8b6:	ac 01       	movw	r20, r24
     8b8:	c7 01       	movw	r24, r14
     8ba:	b6 01       	movw	r22, r12
     8bc:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     8c0:	6b 01       	movw	r12, r22
     8c2:	7c 01       	movw	r14, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
     8c4:	a5 01       	movw	r20, r10
     8c6:	94 01       	movw	r18, r8
     8c8:	c5 01       	movw	r24, r10
     8ca:	b4 01       	movw	r22, r8
     8cc:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     8d0:	4b 01       	movw	r8, r22
     8d2:	5c 01       	movw	r10, r24
     8d4:	40 91 d2 05 	lds	r20, 0x05D2
     8d8:	50 91 d3 05 	lds	r21, 0x05D3
     8dc:	ba 01       	movw	r22, r20
     8de:	55 0f       	add	r21, r21
     8e0:	88 0b       	sbc	r24, r24
     8e2:	99 0b       	sbc	r25, r25
     8e4:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__floatsisf>
     8e8:	9b 01       	movw	r18, r22
     8ea:	ac 01       	movw	r20, r24
     8ec:	c5 01       	movw	r24, r10
     8ee:	b4 01       	movw	r22, r8
     8f0:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     8f4:	9b 01       	movw	r18, r22
     8f6:	ac 01       	movw	r20, r24
	t_fine = (long signed int)(var1+var2);
     8f8:	c7 01       	movw	r24, r14
     8fa:	b6 01       	movw	r22, r12
     8fc:	0e 94 2e 14 	call	0x285c	; 0x285c <__addsf3>
     900:	6b 01       	movw	r12, r22
     902:	7c 01       	movw	r14, r24
     904:	0e 94 11 15 	call	0x2a22	; 0x2a22 <__fixsfsi>
     908:	60 93 b6 05 	sts	0x05B6, r22
     90c:	70 93 b7 05 	sts	0x05B7, r23
     910:	80 93 b8 05 	sts	0x05B8, r24
     914:	90 93 b9 05 	sts	0x05B9, r25
	
	*T = (var1+var2)/5120.0;
     918:	20 e0       	ldi	r18, 0x00	; 0
     91a:	30 e0       	ldi	r19, 0x00	; 0
     91c:	40 ea       	ldi	r20, 0xA0	; 160
     91e:	55 e4       	ldi	r21, 0x45	; 69
     920:	c7 01       	movw	r24, r14
     922:	b6 01       	movw	r22, r12
     924:	0e 94 9f 14 	call	0x293e	; 0x293e <__divsf3>
     928:	6b 01       	movw	r12, r22
     92a:	7c 01       	movw	r14, r24
     92c:	68 83       	st	Y, r22
     92e:	79 83       	std	Y+1, r23	; 0x01
     930:	8a 83       	std	Y+2, r24	; 0x02
     932:	9b 83       	std	Y+3, r25	; 0x03
	
	if(*T>100.0 || *T <(-100.0))return 0;
     934:	20 e0       	ldi	r18, 0x00	; 0
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	48 ec       	ldi	r20, 0xC8	; 200
     93a:	52 e4       	ldi	r21, 0x42	; 66
     93c:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <__gesf2>
     940:	18 16       	cp	r1, r24
     942:	74 f0       	brlt	.+28     	; 0x960 <BMP280_CalcTemperature+0x166>
     944:	20 e0       	ldi	r18, 0x00	; 0
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	48 ec       	ldi	r20, 0xC8	; 200
     94a:	52 ec       	ldi	r21, 0xC2	; 194
     94c:	c7 01       	movw	r24, r14
     94e:	b6 01       	movw	r22, r12
     950:	0e 94 9a 14 	call	0x2934	; 0x2934 <__cmpsf2>
     954:	88 1f       	adc	r24, r24
     956:	88 27       	eor	r24, r24
     958:	88 1f       	adc	r24, r24
     95a:	91 e0       	ldi	r25, 0x01	; 1
     95c:	89 27       	eor	r24, r25
     95e:	01 c0       	rjmp	.+2      	; 0x962 <BMP280_CalcTemperature+0x168>
     960:	80 e0       	ldi	r24, 0x00	; 0
	
	return (1);
}
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	ff 90       	pop	r15
     968:	ef 90       	pop	r14
     96a:	df 90       	pop	r13
     96c:	cf 90       	pop	r12
     96e:	bf 90       	pop	r11
     970:	af 90       	pop	r10
     972:	9f 90       	pop	r9
     974:	8f 90       	pop	r8
     976:	7f 90       	pop	r7
     978:	6f 90       	pop	r6
     97a:	5f 90       	pop	r5
     97c:	4f 90       	pop	r4
     97e:	08 95       	ret

00000980 <BMP280_CalcPressure>:
  @brief Calculates pressure
  @param[out] pointer to a place to store the pressure data
  @param[in] pointer to the uncalibrated pressure data
  @return status
*****************************************************************************/
char BMP280_CalcPressure(double *P,double *uP){
     980:	4f 92       	push	r4
     982:	5f 92       	push	r5
     984:	6f 92       	push	r6
     986:	7f 92       	push	r7
     988:	8f 92       	push	r8
     98a:	9f 92       	push	r9
     98c:	af 92       	push	r10
     98e:	bf 92       	push	r11
     990:	cf 92       	push	r12
     992:	df 92       	push	r13
     994:	ef 92       	push	r14
     996:	ff 92       	push	r15
     998:	0f 93       	push	r16
     99a:	1f 93       	push	r17
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	8c 01       	movw	r16, r24
     9a2:	eb 01       	movw	r28, r22
	//char result;
	double var1 , var2 ;
	
	var1 = ((double)t_fine/2.0) - 64000.0;
     9a4:	60 91 b6 05 	lds	r22, 0x05B6
     9a8:	70 91 b7 05 	lds	r23, 0x05B7
     9ac:	80 91 b8 05 	lds	r24, 0x05B8
     9b0:	90 91 b9 05 	lds	r25, 0x05B9
     9b4:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__floatsisf>
     9b8:	20 e0       	ldi	r18, 0x00	; 0
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	40 e0       	ldi	r20, 0x00	; 0
     9be:	5f e3       	ldi	r21, 0x3F	; 63
     9c0:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     9c4:	20 e0       	ldi	r18, 0x00	; 0
     9c6:	30 e0       	ldi	r19, 0x00	; 0
     9c8:	4a e7       	ldi	r20, 0x7A	; 122
     9ca:	57 e4       	ldi	r21, 0x47	; 71
     9cc:	0e 94 2d 14 	call	0x285a	; 0x285a <__subsf3>
     9d0:	6b 01       	movw	r12, r22
     9d2:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
     9d4:	60 91 c8 05 	lds	r22, 0x05C8
     9d8:	70 91 c9 05 	lds	r23, 0x05C9
     9dc:	07 2e       	mov	r0, r23
     9de:	00 0c       	add	r0, r0
     9e0:	88 0b       	sbc	r24, r24
     9e2:	99 0b       	sbc	r25, r25
     9e4:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__floatsisf>
     9e8:	a7 01       	movw	r20, r14
     9ea:	96 01       	movw	r18, r12
     9ec:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     9f0:	20 e0       	ldi	r18, 0x00	; 0
     9f2:	30 e0       	ldi	r19, 0x00	; 0
     9f4:	40 e0       	ldi	r20, 0x00	; 0
     9f6:	58 e3       	ldi	r21, 0x38	; 56
     9f8:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     9fc:	a7 01       	movw	r20, r14
     9fe:	96 01       	movw	r18, r12
     a00:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     a04:	4b 01       	movw	r8, r22
     a06:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
     a08:	60 91 ca 05 	lds	r22, 0x05CA
     a0c:	70 91 cb 05 	lds	r23, 0x05CB
     a10:	07 2e       	mov	r0, r23
     a12:	00 0c       	add	r0, r0
     a14:	88 0b       	sbc	r24, r24
     a16:	99 0b       	sbc	r25, r25
     a18:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__floatsisf>
     a1c:	a7 01       	movw	r20, r14
     a1e:	96 01       	movw	r18, r12
     a20:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     a24:	9b 01       	movw	r18, r22
     a26:	ac 01       	movw	r20, r24
     a28:	0e 94 2e 14 	call	0x285c	; 0x285c <__addsf3>
     a2c:	a5 01       	movw	r20, r10
     a2e:	94 01       	movw	r18, r8
     a30:	0e 94 2e 14 	call	0x285c	; 0x285c <__addsf3>
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
     a34:	20 e0       	ldi	r18, 0x00	; 0
     a36:	30 e0       	ldi	r19, 0x00	; 0
     a38:	40 e8       	ldi	r20, 0x80	; 128
     a3a:	5e e3       	ldi	r21, 0x3E	; 62
     a3c:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     a40:	4b 01       	movw	r8, r22
     a42:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var1 = (((double)dig_P3) * var1 * var1/524288.0 + ((double)dig_P2) * var1) / 524288.0;
     a44:	60 91 ce 05 	lds	r22, 0x05CE
     a48:	70 91 cf 05 	lds	r23, 0x05CF
     a4c:	07 2e       	mov	r0, r23
     a4e:	00 0c       	add	r0, r0
     a50:	88 0b       	sbc	r24, r24
     a52:	99 0b       	sbc	r25, r25
     a54:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__floatsisf>
     a58:	a7 01       	movw	r20, r14
     a5a:	96 01       	movw	r18, r12
     a5c:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     a60:	a7 01       	movw	r20, r14
     a62:	96 01       	movw	r18, r12
     a64:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     a68:	20 e0       	ldi	r18, 0x00	; 0
     a6a:	30 e0       	ldi	r19, 0x00	; 0
     a6c:	40 e0       	ldi	r20, 0x00	; 0
     a6e:	56 e3       	ldi	r21, 0x36	; 54
     a70:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     a74:	2b 01       	movw	r4, r22
     a76:	3c 01       	movw	r6, r24
     a78:	60 91 d0 05 	lds	r22, 0x05D0
     a7c:	70 91 d1 05 	lds	r23, 0x05D1
     a80:	07 2e       	mov	r0, r23
     a82:	00 0c       	add	r0, r0
     a84:	88 0b       	sbc	r24, r24
     a86:	99 0b       	sbc	r25, r25
     a88:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__floatsisf>
     a8c:	a7 01       	movw	r20, r14
     a8e:	96 01       	movw	r18, r12
     a90:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     a94:	9b 01       	movw	r18, r22
     a96:	ac 01       	movw	r20, r24
     a98:	c3 01       	movw	r24, r6
     a9a:	b2 01       	movw	r22, r4
     a9c:	0e 94 2e 14 	call	0x285c	; 0x285c <__addsf3>
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	30 e0       	ldi	r19, 0x00	; 0
     aa4:	40 e0       	ldi	r20, 0x00	; 0
     aa6:	56 e3       	ldi	r21, 0x36	; 54
     aa8:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
     aac:	20 e0       	ldi	r18, 0x00	; 0
     aae:	30 e0       	ldi	r19, 0x00	; 0
     ab0:	40 e0       	ldi	r20, 0x00	; 0
     ab2:	57 e4       	ldi	r21, 0x47	; 71
     ab4:	0e 94 2e 14 	call	0x285c	; 0x285c <__addsf3>
     ab8:	20 e0       	ldi	r18, 0x00	; 0
     aba:	30 e0       	ldi	r19, 0x00	; 0
     abc:	40 e0       	ldi	r20, 0x00	; 0
     abe:	58 e3       	ldi	r21, 0x38	; 56
     ac0:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     ac4:	6b 01       	movw	r12, r22
     ac6:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
     ac8:	28 81       	ld	r18, Y
     aca:	39 81       	ldd	r19, Y+1	; 0x01
     acc:	4a 81       	ldd	r20, Y+2	; 0x02
     ace:	5b 81       	ldd	r21, Y+3	; 0x03
     ad0:	60 e0       	ldi	r22, 0x00	; 0
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	80 e8       	ldi	r24, 0x80	; 128
     ad6:	99 e4       	ldi	r25, 0x49	; 73
     ad8:	0e 94 2d 14 	call	0x285a	; 0x285a <__subsf3>
     adc:	2b 01       	movw	r4, r22
     ade:	3c 01       	movw	r6, r24
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
     ae0:	60 91 cc 05 	lds	r22, 0x05CC
     ae4:	70 91 cd 05 	lds	r23, 0x05CD
     ae8:	07 2e       	mov	r0, r23
     aea:	00 0c       	add	r0, r0
     aec:	88 0b       	sbc	r24, r24
     aee:	99 0b       	sbc	r25, r25
     af0:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__floatsisf>
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	40 e8       	ldi	r20, 0x80	; 128
     afa:	57 e4       	ldi	r21, 0x47	; 71
     afc:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     b00:	9b 01       	movw	r18, r22
     b02:	ac 01       	movw	r20, r24
     b04:	c5 01       	movw	r24, r10
     b06:	b4 01       	movw	r22, r8
     b08:	0e 94 2e 14 	call	0x285c	; 0x285c <__addsf3>
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
     b0c:	20 e0       	ldi	r18, 0x00	; 0
     b0e:	30 e0       	ldi	r19, 0x00	; 0
     b10:	40 e8       	ldi	r20, 0x80	; 128
     b12:	59 e3       	ldi	r21, 0x39	; 57
     b14:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     b18:	9b 01       	movw	r18, r22
     b1a:	ac 01       	movw	r20, r24
     b1c:	c3 01       	movw	r24, r6
     b1e:	b2 01       	movw	r22, r4
     b20:	0e 94 2d 14 	call	0x285a	; 0x285a <__subsf3>
     b24:	20 e0       	ldi	r18, 0x00	; 0
     b26:	30 e5       	ldi	r19, 0x50	; 80
     b28:	43 ec       	ldi	r20, 0xC3	; 195
     b2a:	55 e4       	ldi	r21, 0x45	; 69
     b2c:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     b30:	4b 01       	movw	r8, r22
     b32:	5c 01       	movw	r10, r24
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
     b34:	80 91 c0 05 	lds	r24, 0x05C0
     b38:	90 91 c1 05 	lds	r25, 0x05C1
     b3c:	bc 01       	movw	r22, r24
     b3e:	80 e0       	ldi	r24, 0x00	; 0
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__floatunsisf>
     b46:	9b 01       	movw	r18, r22
     b48:	ac 01       	movw	r20, r24
     b4a:	c7 01       	movw	r24, r14
     b4c:	b6 01       	movw	r22, r12
     b4e:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     b52:	9b 01       	movw	r18, r22
     b54:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
     b56:	c5 01       	movw	r24, r10
     b58:	b4 01       	movw	r22, r8
     b5a:	0e 94 9f 14 	call	0x293e	; 0x293e <__divsf3>
     b5e:	6b 01       	movw	r12, r22
     b60:	7c 01       	movw	r14, r24
	//Serial.print("p = ");Serial.println(p,2);
	
	var1 = ((double)dig_P9)*p*p/2147483648.0;	//overflow
     b62:	60 91 c2 05 	lds	r22, 0x05C2
     b66:	70 91 c3 05 	lds	r23, 0x05C3
     b6a:	07 2e       	mov	r0, r23
     b6c:	00 0c       	add	r0, r0
     b6e:	88 0b       	sbc	r24, r24
     b70:	99 0b       	sbc	r25, r25
     b72:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__floatsisf>
     b76:	a7 01       	movw	r20, r14
     b78:	96 01       	movw	r18, r12
     b7a:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     b7e:	a7 01       	movw	r20, r14
     b80:	96 01       	movw	r18, r12
     b82:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     b86:	20 e0       	ldi	r18, 0x00	; 0
     b88:	30 e0       	ldi	r19, 0x00	; 0
     b8a:	40 e0       	ldi	r20, 0x00	; 0
     b8c:	50 e3       	ldi	r21, 0x30	; 48
     b8e:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     b92:	4b 01       	movw	r8, r22
     b94:	5c 01       	movw	r10, r24
	
	var2 = p*((double)dig_P8)/32768.0;
     b96:	80 91 c4 05 	lds	r24, 0x05C4
     b9a:	90 91 c5 05 	lds	r25, 0x05C5
     b9e:	bc 01       	movw	r22, r24
     ba0:	99 0f       	add	r25, r25
     ba2:	88 0b       	sbc	r24, r24
     ba4:	99 0b       	sbc	r25, r25
     ba6:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__floatsisf>
     baa:	a7 01       	movw	r20, r14
     bac:	96 01       	movw	r18, r12
     bae:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     bb2:	20 e0       	ldi	r18, 0x00	; 0
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	58 e3       	ldi	r21, 0x38	; 56
     bba:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     bbe:	9b 01       	movw	r18, r22
     bc0:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	p = p + (var1+var2+((double)dig_P7))/16.0;
     bc2:	c5 01       	movw	r24, r10
     bc4:	b4 01       	movw	r22, r8
     bc6:	0e 94 2e 14 	call	0x285c	; 0x285c <__addsf3>
     bca:	4b 01       	movw	r8, r22
     bcc:	5c 01       	movw	r10, r24
     bce:	80 91 c6 05 	lds	r24, 0x05C6
     bd2:	90 91 c7 05 	lds	r25, 0x05C7
     bd6:	bc 01       	movw	r22, r24
     bd8:	99 0f       	add	r25, r25
     bda:	88 0b       	sbc	r24, r24
     bdc:	99 0b       	sbc	r25, r25
     bde:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__floatsisf>
     be2:	9b 01       	movw	r18, r22
     be4:	ac 01       	movw	r20, r24
     be6:	c5 01       	movw	r24, r10
     be8:	b4 01       	movw	r22, r8
     bea:	0e 94 2e 14 	call	0x285c	; 0x285c <__addsf3>
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	40 e8       	ldi	r20, 0x80	; 128
     bf4:	5d e3       	ldi	r21, 0x3D	; 61
     bf6:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     bfa:	a7 01       	movw	r20, r14
     bfc:	96 01       	movw	r18, r12
     bfe:	0e 94 2e 14 	call	0x285c	; 0x285c <__addsf3>
	//Serial.print("p = ");Serial.println(p,2);
	
	*P = p/100.0 ;
     c02:	20 e0       	ldi	r18, 0x00	; 0
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	48 ec       	ldi	r20, 0xC8	; 200
     c08:	52 e4       	ldi	r21, 0x42	; 66
     c0a:	0e 94 9f 14 	call	0x293e	; 0x293e <__divsf3>
     c0e:	6b 01       	movw	r12, r22
     c10:	7c 01       	movw	r14, r24
     c12:	f8 01       	movw	r30, r16
     c14:	60 83       	st	Z, r22
     c16:	71 83       	std	Z+1, r23	; 0x01
     c18:	82 83       	std	Z+2, r24	; 0x02
     c1a:	93 83       	std	Z+3, r25	; 0x03
	
	if((*P>1200.0) || (*P < 800.0))return (0);
     c1c:	20 e0       	ldi	r18, 0x00	; 0
     c1e:	30 e0       	ldi	r19, 0x00	; 0
     c20:	46 e9       	ldi	r20, 0x96	; 150
     c22:	54 e4       	ldi	r21, 0x44	; 68
     c24:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <__gesf2>
     c28:	18 16       	cp	r1, r24
     c2a:	74 f0       	brlt	.+28     	; 0xc48 <BMP280_CalcPressure+0x2c8>
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	48 e4       	ldi	r20, 0x48	; 72
     c32:	54 e4       	ldi	r21, 0x44	; 68
     c34:	c7 01       	movw	r24, r14
     c36:	b6 01       	movw	r22, r12
     c38:	0e 94 9a 14 	call	0x2934	; 0x2934 <__cmpsf2>
     c3c:	88 1f       	adc	r24, r24
     c3e:	88 27       	eor	r24, r24
     c40:	88 1f       	adc	r24, r24
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	89 27       	eor	r24, r25
     c46:	01 c0       	rjmp	.+2      	; 0xc4a <BMP280_CalcPressure+0x2ca>
     c48:	80 e0       	ldi	r24, 0x00	; 0
	return (1);
}
     c4a:	df 91       	pop	r29
     c4c:	cf 91       	pop	r28
     c4e:	1f 91       	pop	r17
     c50:	0f 91       	pop	r16
     c52:	ff 90       	pop	r15
     c54:	ef 90       	pop	r14
     c56:	df 90       	pop	r13
     c58:	cf 90       	pop	r12
     c5a:	bf 90       	pop	r11
     c5c:	af 90       	pop	r10
     c5e:	9f 90       	pop	r9
     c60:	8f 90       	pop	r8
     c62:	7f 90       	pop	r7
     c64:	6f 90       	pop	r6
     c66:	5f 90       	pop	r5
     c68:	4f 90       	pop	r4
     c6a:	08 95       	ret

00000c6c <BMP280_GetTemperatureAndPressure>:
  @brief Gets temperature and pressure
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetTemperatureAndPressure(double *T,double *P){
     c6c:	ef 92       	push	r14
     c6e:	ff 92       	push	r15
     c70:	0f 93       	push	r16
     c72:	1f 93       	push	r17
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	28 97       	sbiw	r28, 0x08	; 8
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	de bf       	out	0x3e, r29	; 62
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	cd bf       	out	0x3d, r28	; 61
     c88:	8c 01       	movw	r16, r24
     c8a:	7b 01       	movw	r14, r22
	double uP,uT ;
	char result = BMP280_GetUnPT(&uP,&uT);
     c8c:	be 01       	movw	r22, r28
     c8e:	6b 5f       	subi	r22, 0xFB	; 251
     c90:	7f 4f       	sbci	r23, 0xFF	; 255
     c92:	ce 01       	movw	r24, r28
     c94:	01 96       	adiw	r24, 0x01	; 1
     c96:	0e 94 57 03 	call	0x6ae	; 0x6ae <BMP280_GetUnPT>
	if(result!=0){
     c9a:	88 23       	and	r24, r24
     c9c:	d1 f0       	breq	.+52     	; 0xcd2 <BMP280_GetTemperatureAndPressure+0x66>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
     c9e:	be 01       	movw	r22, r28
     ca0:	6b 5f       	subi	r22, 0xFB	; 251
     ca2:	7f 4f       	sbci	r23, 0xFF	; 255
     ca4:	c8 01       	movw	r24, r16
     ca6:	0e 94 fd 03 	call	0x7fa	; 0x7fa <BMP280_CalcTemperature>
		if(result){
     caa:	88 23       	and	r24, r24
     cac:	69 f0       	breq	.+26     	; 0xcc8 <BMP280_GetTemperatureAndPressure+0x5c>
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
     cae:	be 01       	movw	r22, r28
     cb0:	6f 5f       	subi	r22, 0xFF	; 255
     cb2:	7f 4f       	sbci	r23, 0xFF	; 255
     cb4:	c7 01       	movw	r24, r14
     cb6:	0e 94 c0 04 	call	0x980	; 0x980 <BMP280_CalcPressure>
			if(result)return (1);
     cba:	81 11       	cpse	r24, r1
     cbc:	0f c0       	rjmp	.+30     	; 0xcdc <BMP280_GetTemperatureAndPressure+0x70>
			else error = 3 ;	// pressure error ;
     cbe:	83 e0       	ldi	r24, 0x03	; 3
     cc0:	80 93 b5 05 	sts	0x05B5, r24
			return (0);
     cc4:	80 e0       	ldi	r24, 0x00	; 0
     cc6:	0b c0       	rjmp	.+22     	; 0xcde <BMP280_GetTemperatureAndPressure+0x72>
		}else
		error = 2;	// temperature error ;
     cc8:	82 e0       	ldi	r24, 0x02	; 2
     cca:	80 93 b5 05 	sts	0x05B5, r24
	}
	else
	error = 1;
	
	return (0);
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	06 c0       	rjmp	.+12     	; 0xcde <BMP280_GetTemperatureAndPressure+0x72>
			return (0);
		}else
		error = 2;	// temperature error ;
	}
	else
	error = 1;
     cd2:	81 e0       	ldi	r24, 0x01	; 1
     cd4:	80 93 b5 05 	sts	0x05B5, r24
	
	return (0);
     cd8:	80 e0       	ldi	r24, 0x00	; 0
     cda:	01 c0       	rjmp	.+2      	; 0xcde <BMP280_GetTemperatureAndPressure+0x72>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
		if(result){
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
			if(result)return (1);
     cdc:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	error = 1;
	
	return (0);
}
     cde:	28 96       	adiw	r28, 0x08	; 8
     ce0:	0f b6       	in	r0, 0x3f	; 63
     ce2:	f8 94       	cli
     ce4:	de bf       	out	0x3e, r29	; 62
     ce6:	0f be       	out	0x3f, r0	; 63
     ce8:	cd bf       	out	0x3d, r28	; 61
     cea:	df 91       	pop	r29
     cec:	cf 91       	pop	r28
     cee:	1f 91       	pop	r17
     cf0:	0f 91       	pop	r16
     cf2:	ff 90       	pop	r15
     cf4:	ef 90       	pop	r14
     cf6:	08 95       	ret

00000cf8 <Si7020_readHumidity>:

/*************************************************************************//**
  @brief Read humidity from Si7020
  @return status one if successfully read and crc check, otherwise return zero
*****************************************************************************/
char Si7020_readHumidity(unsigned char *data, char length){
     cf8:	cf 93       	push	r28
     cfa:	df 93       	push	r29
     cfc:	ec 01       	movw	r28, r24
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
     cfe:	80 e4       	ldi	r24, 0x40	; 64
     d00:	0e 94 c6 08 	call	0x118c	; 0x118c <TWI_BeginWrite>
	status = TWI_WriteByte(SI7020_REL_HUMIDITY_HOLD);	
     d04:	85 ee       	ldi	r24, 0xE5	; 229
     d06:	0e 94 b8 08 	call	0x1170	; 0x1170 <TWI_WriteByte>
	if(status != TWI_SENT_ACK) return 0; //Error out
     d0a:	88 32       	cpi	r24, 0x28	; 40
     d0c:	e9 f4       	brne	.+58     	; 0xd48 <Si7020_readHumidity+0x50>
	
	status = TWI_BeginRead(SI7020_ADDR);
     d0e:	80 e4       	ldi	r24, 0x40	; 64
     d10:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <TWI_BeginRead>
	if(status != TWI_SLAR_ACK)	return 0;
     d14:	80 34       	cpi	r24, 0x40	; 64
     d16:	d1 f4       	brne	.+52     	; 0xd4c <Si7020_readHumidity+0x54>
	
	status = TWI_Read(data,3,false);
     d18:	40 e0       	ldi	r20, 0x00	; 0
     d1a:	63 e0       	ldi	r22, 0x03	; 3
     d1c:	70 e0       	ldi	r23, 0x00	; 0
     d1e:	ce 01       	movw	r24, r28
     d20:	0e 94 20 09 	call	0x1240	; 0x1240 <TWI_Read>
	if(status !=TWI_REC_ACK)	return 0;
     d24:	80 35       	cpi	r24, 0x50	; 80
     d26:	a1 f4       	brne	.+40     	; 0xd50 <Si7020_readHumidity+0x58>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawHumidity, checksum) != 0) return 0;
     d28:	6a 81       	ldd	r22, Y+2	; 0x02
     d2a:	70 e0       	ldi	r23, 0x00	; 0
	if(status !=TWI_REC_ACK)	return 0;
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
     d2c:	88 81       	ld	r24, Y
     d2e:	90 e0       	ldi	r25, 0x00	; 0
     d30:	98 2f       	mov	r25, r24
     d32:	88 27       	eor	r24, r24
     d34:	29 81       	ldd	r18, Y+1	; 0x01
	if(check_crc(rawHumidity, checksum) != 0) return 0;
     d36:	82 2b       	or	r24, r18
     d38:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <check_crc>
     d3c:	89 2b       	or	r24, r25
     d3e:	51 f4       	brne	.+20     	; 0xd54 <Si7020_readHumidity+0x5c>
	
	TWI_Stop();
     d40:	0e 94 1b 09 	call	0x1236	; 0x1236 <TWI_Stop>
	return 1;
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	07 c0       	rjmp	.+14     	; 0xd56 <Si7020_readHumidity+0x5e>
char Si7020_readHumidity(unsigned char *data, char length){
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
	status = TWI_WriteByte(SI7020_REL_HUMIDITY_HOLD);	
	if(status != TWI_SENT_ACK) return 0; //Error out
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	05 c0       	rjmp	.+10     	; 0xd56 <Si7020_readHumidity+0x5e>
	
	status = TWI_BeginRead(SI7020_ADDR);
	if(status != TWI_SLAR_ACK)	return 0;
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	03 c0       	rjmp	.+6      	; 0xd56 <Si7020_readHumidity+0x5e>
	
	status = TWI_Read(data,3,false);
	if(status !=TWI_REC_ACK)	return 0;
     d50:	80 e0       	ldi	r24, 0x00	; 0
     d52:	01 c0       	rjmp	.+2      	; 0xd56 <Si7020_readHumidity+0x5e>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawHumidity, checksum) != 0) return 0;
     d54:	80 e0       	ldi	r24, 0x00	; 0
	
	TWI_Stop();
	return 1;
}
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	08 95       	ret

00000d5c <Si7020_calHumidity>:
*****************************************************************************/
float Si7020_calHumidity(unsigned char *data) {
	unsigned char msb = data[0];
	unsigned char lsb = data[1];

	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
     d5c:	fc 01       	movw	r30, r24
     d5e:	60 81       	ld	r22, Z
     d60:	70 e0       	ldi	r23, 0x00	; 0
     d62:	76 2f       	mov	r23, r22
     d64:	66 27       	eor	r22, r22
     d66:	81 81       	ldd	r24, Z+1	; 0x01
     d68:	68 2b       	or	r22, r24
	
	//Given the raw humidity data, calculate the actual relative humidity
	float tempRH = rawHumidity / (float)65536;
     d6a:	80 e0       	ldi	r24, 0x00	; 0
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__floatunsisf>
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	30 e0       	ldi	r19, 0x00	; 0
     d76:	40 e8       	ldi	r20, 0x80	; 128
     d78:	57 e3       	ldi	r21, 0x37	; 55
     d7a:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
	float rh = 125 * tempRH -6;
     d7e:	20 e0       	ldi	r18, 0x00	; 0
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	4a ef       	ldi	r20, 0xFA	; 250
     d84:	52 e4       	ldi	r21, 0x42	; 66
     d86:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	40 ec       	ldi	r20, 0xC0	; 192
     d90:	50 e4       	ldi	r21, 0x40	; 64
     d92:	0e 94 2d 14 	call	0x285a	; 0x285a <__subsf3>
	
	return rh;
}
     d96:	08 95       	ret

00000d98 <Si7020_readTemperature>:

/*************************************************************************//**
  @brief Read temperature from Si7020
  @return status one if successfully read and crc check, otherwise return zero
*****************************************************************************/
char Si7020_readTemperature(unsigned char *data, char length){
     d98:	cf 93       	push	r28
     d9a:	df 93       	push	r29
     d9c:	ec 01       	movw	r28, r24
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
     d9e:	80 e4       	ldi	r24, 0x40	; 64
     da0:	0e 94 c6 08 	call	0x118c	; 0x118c <TWI_BeginWrite>
	status = TWI_WriteByte(SI7020_TEMPERATURE_HOLD);	
     da4:	83 ee       	ldi	r24, 0xE3	; 227
     da6:	0e 94 b8 08 	call	0x1170	; 0x1170 <TWI_WriteByte>
	if(status != TWI_SENT_ACK) return 0; //Error out
     daa:	88 32       	cpi	r24, 0x28	; 40
     dac:	e9 f4       	brne	.+58     	; 0xde8 <Si7020_readTemperature+0x50>
	
	status = TWI_BeginRead(SI7020_ADDR);
     dae:	80 e4       	ldi	r24, 0x40	; 64
     db0:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <TWI_BeginRead>
	if(status != TWI_SLAR_ACK)	return 0;
     db4:	80 34       	cpi	r24, 0x40	; 64
     db6:	d1 f4       	brne	.+52     	; 0xdec <Si7020_readTemperature+0x54>
	
	status = TWI_Read(data,3,false);
     db8:	40 e0       	ldi	r20, 0x00	; 0
     dba:	63 e0       	ldi	r22, 0x03	; 3
     dbc:	70 e0       	ldi	r23, 0x00	; 0
     dbe:	ce 01       	movw	r24, r28
     dc0:	0e 94 20 09 	call	0x1240	; 0x1240 <TWI_Read>
	if(status !=TWI_REC_ACK)	return 0;
     dc4:	80 35       	cpi	r24, 0x50	; 80
     dc6:	a1 f4       	brne	.+40     	; 0xdf0 <Si7020_readTemperature+0x58>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawTemperature, checksum) != 0) return 0;
     dc8:	6a 81       	ldd	r22, Y+2	; 0x02
     dca:	70 e0       	ldi	r23, 0x00	; 0
	if(status !=TWI_REC_ACK)	return 0;
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
     dcc:	88 81       	ld	r24, Y
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	98 2f       	mov	r25, r24
     dd2:	88 27       	eor	r24, r24
     dd4:	29 81       	ldd	r18, Y+1	; 0x01
	if(check_crc(rawTemperature, checksum) != 0) return 0;
     dd6:	82 2b       	or	r24, r18
     dd8:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <check_crc>
     ddc:	89 2b       	or	r24, r25
     dde:	51 f4       	brne	.+20     	; 0xdf4 <Si7020_readTemperature+0x5c>
	
	TWI_Stop();
     de0:	0e 94 1b 09 	call	0x1236	; 0x1236 <TWI_Stop>
	return 1;
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	07 c0       	rjmp	.+14     	; 0xdf6 <Si7020_readTemperature+0x5e>
char Si7020_readTemperature(unsigned char *data, char length){
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
	status = TWI_WriteByte(SI7020_TEMPERATURE_HOLD);	
	if(status != TWI_SENT_ACK) return 0; //Error out
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	05 c0       	rjmp	.+10     	; 0xdf6 <Si7020_readTemperature+0x5e>
	
	status = TWI_BeginRead(SI7020_ADDR);
	if(status != TWI_SLAR_ACK)	return 0;
     dec:	80 e0       	ldi	r24, 0x00	; 0
     dee:	03 c0       	rjmp	.+6      	; 0xdf6 <Si7020_readTemperature+0x5e>
	
	status = TWI_Read(data,3,false);
	if(status !=TWI_REC_ACK)	return 0;
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	01 c0       	rjmp	.+2      	; 0xdf6 <Si7020_readTemperature+0x5e>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawTemperature, checksum) != 0) return 0;
     df4:	80 e0       	ldi	r24, 0x00	; 0
	
	TWI_Stop();
	return 1;
}
     df6:	df 91       	pop	r29
     df8:	cf 91       	pop	r28
     dfa:	08 95       	ret

00000dfc <Si7020_calTemperature>:
  @return temperature value
*****************************************************************************/
float Si7020_calTemperature(unsigned char *data) {
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
     dfc:	fc 01       	movw	r30, r24
     dfe:	60 81       	ld	r22, Z
     e00:	70 e0       	ldi	r23, 0x00	; 0
     e02:	76 2f       	mov	r23, r22
     e04:	66 27       	eor	r22, r22
     e06:	81 81       	ldd	r24, Z+1	; 0x01
     e08:	68 2b       	or	r22, r24
	
	//Given the raw temperature data, calculate the actual temperature
	float tempTemperature = rawTemperature / (float)65536; 
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	90 e0       	ldi	r25, 0x00	; 0
     e0e:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <__floatunsisf>
     e12:	20 e0       	ldi	r18, 0x00	; 0
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	40 e8       	ldi	r20, 0x80	; 128
     e18:	57 e3       	ldi	r21, 0x37	; 55
     e1a:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
	float realTemperature = 175.72 * tempTemperature - 46.85;
     e1e:	22 e5       	ldi	r18, 0x52	; 82
     e20:	38 eb       	ldi	r19, 0xB8	; 184
     e22:	4f e2       	ldi	r20, 0x2F	; 47
     e24:	53 e4       	ldi	r21, 0x43	; 67
     e26:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     e2a:	26 e6       	ldi	r18, 0x66	; 102
     e2c:	36 e6       	ldi	r19, 0x66	; 102
     e2e:	4b e3       	ldi	r20, 0x3B	; 59
     e30:	52 e4       	ldi	r21, 0x42	; 66
     e32:	0e 94 2d 14 	call	0x285a	; 0x285a <__subsf3>
	
	return realTemperature;
     e36:	08 95       	ret

00000e38 <ADC_Init>:

/*************************************************************************//**
  @brief Initializes the ADC
*****************************************************************************/
void ADC_Init(void) {
	ADCSRA = (1<<ADEN)|(4<<ADPS0); //enables the ADC module, CPU clock prescale=16
     e38:	84 e8       	ldi	r24, 0x84	; 132
     e3a:	80 93 7a 00 	sts	0x007A, r24
	
	ADCSRC = 0x05|(1<<ADTHT0)|(1<<ADTHT1); //ADSUT=5
     e3e:	85 ec       	ldi	r24, 0xC5	; 197
     e40:	80 93 77 00 	sts	0x0077, r24
	while((ADCSRB&(1<<AVDDOK))==0);
     e44:	eb e7       	ldi	r30, 0x7B	; 123
     e46:	f0 e0       	ldi	r31, 0x00	; 0
     e48:	80 81       	ld	r24, Z
     e4a:	88 23       	and	r24, r24
     e4c:	ec f7       	brge	.-6      	; 0xe48 <ADC_Init+0x10>
}
     e4e:	08 95       	ret

00000e50 <__vector_15>:

/*************************************************************************//**
  @brief Timer Interrupt Service Routine
*****************************************************************************/
ISR(TIMER2_OVF_vect)
{
     e50:	1f 92       	push	r1
     e52:	0f 92       	push	r0
     e54:	0f b6       	in	r0, 0x3f	; 63
     e56:	0f 92       	push	r0
     e58:	11 24       	eor	r1, r1
     e5a:	2f 93       	push	r18
     e5c:	3f 93       	push	r19
     e5e:	4f 93       	push	r20
     e60:	5f 93       	push	r21
     e62:	6f 93       	push	r22
     e64:	7f 93       	push	r23
     e66:	8f 93       	push	r24
     e68:	9f 93       	push	r25
     e6a:	af 93       	push	r26
     e6c:	bf 93       	push	r27
     e6e:	ef 93       	push	r30
     e70:	ff 93       	push	r31
	timer_usage ++;
     e72:	80 91 da 05 	lds	r24, 0x05DA
     e76:	90 91 db 05 	lds	r25, 0x05DB
     e7a:	01 96       	adiw	r24, 0x01	; 1
     e7c:	90 93 db 05 	sts	0x05DB, r25
     e80:	80 93 da 05 	sts	0x05DA, r24
	// printf("count1 = %d\n",timer_usage);
	printf("Timestamp : %ld\n",(TimeStamp));
     e84:	80 91 d9 05 	lds	r24, 0x05D9
     e88:	8f 93       	push	r24
     e8a:	80 91 d8 05 	lds	r24, 0x05D8
     e8e:	8f 93       	push	r24
     e90:	80 91 d7 05 	lds	r24, 0x05D7
     e94:	8f 93       	push	r24
     e96:	80 91 d6 05 	lds	r24, 0x05D6
     e9a:	8f 93       	push	r24
     e9c:	8a ea       	ldi	r24, 0xAA	; 170
     e9e:	92 e0       	ldi	r25, 0x02	; 2
     ea0:	9f 93       	push	r25
     ea2:	8f 93       	push	r24
     ea4:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <printf>
	handle_timeoutq_event();	
     ea8:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <handle_timeoutq_event>
     eac:	0f 90       	pop	r0
     eae:	0f 90       	pop	r0
     eb0:	0f 90       	pop	r0
     eb2:	0f 90       	pop	r0
     eb4:	0f 90       	pop	r0
     eb6:	0f 90       	pop	r0
}
     eb8:	ff 91       	pop	r31
     eba:	ef 91       	pop	r30
     ebc:	bf 91       	pop	r27
     ebe:	af 91       	pop	r26
     ec0:	9f 91       	pop	r25
     ec2:	8f 91       	pop	r24
     ec4:	7f 91       	pop	r23
     ec6:	6f 91       	pop	r22
     ec8:	5f 91       	pop	r21
     eca:	4f 91       	pop	r20
     ecc:	3f 91       	pop	r19
     ece:	2f 91       	pop	r18
     ed0:	0f 90       	pop	r0
     ed2:	0f be       	out	0x3f, r0	; 63
     ed4:	0f 90       	pop	r0
     ed6:	1f 90       	pop	r1
     ed8:	18 95       	reti

00000eda <init_Event_Timer>:

/* Initialization Routine Example 3 : Timer 2 Async operation */
/* Clock for Timer 2 is taken from crystal connected to TOSC pins */
void init_Event_Timer(void)
{
	TimeStamp = 0;
     eda:	10 92 d6 05 	sts	0x05D6, r1
     ede:	10 92 d7 05 	sts	0x05D7, r1
     ee2:	10 92 d8 05 	sts	0x05D8, r1
     ee6:	10 92 d9 05 	sts	0x05D9, r1
	timer_usage = 0;
     eea:	10 92 db 05 	sts	0x05DB, r1
     eee:	10 92 da 05 	sts	0x05DA, r1
	/* Select clock source as crystal on TOSCn pins */
	ASSR |= 1 << AS2;
     ef2:	e6 eb       	ldi	r30, 0xB6	; 182
     ef4:	f0 e0       	ldi	r31, 0x00	; 0
     ef6:	80 81       	ld	r24, Z
     ef8:	80 62       	ori	r24, 0x20	; 32
     efa:	80 83       	st	Z, r24
	
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
     efc:	80 81       	ld	r24, Z
     efe:	8f 71       	andi	r24, 0x1F	; 31
     f00:	e9 f7       	brne	.-6      	; 0xefc <init_Event_Timer+0x22>
	
	/* Stop timer 2 */
	TCCR2B = 0x00;
     f02:	10 92 b1 00 	sts	0x00B1, r1
     f06:	08 95       	ret

00000f08 <general_set_timer>:
	// TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
}


void general_set_timer( int period_number )
{
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	ec 01       	movw	r28, r24
	// printf("debug %d\n",period_number);
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
     f0e:	e6 eb       	ldi	r30, 0xB6	; 182
     f10:	f0 e0       	ldi	r31, 0x00	; 0
     f12:	90 81       	ld	r25, Z
     f14:	9f 71       	andi	r25, 0x1F	; 31
     f16:	e9 f7       	brne	.-6      	; 0xf12 <general_set_timer+0xa>
	/* Stop timer 2 */
	TCCR2B = 0x00;
     f18:	10 92 b1 00 	sts	0x00B1, r1
	
	
	/* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) | (1 << TCR2BUB) | (1<< TCN2UB))));
     f1c:	e6 eb       	ldi	r30, 0xB6	; 182
     f1e:	f0 e0       	ldi	r31, 0x00	; 0
     f20:	90 81       	ld	r25, Z
     f22:	9f 71       	andi	r25, 0x1F	; 31
     f24:	e9 f7       	brne	.-6      	; 0xf20 <general_set_timer+0x18>
	 *  1    1    0     256		2s/256
	 *  1    1    1    1024		8s/256
	 */
	// Resolution
	// 0.25s/256
	if( period_number <= 250 )
     f26:	cb 3f       	cpi	r28, 0xFB	; 251
     f28:	d1 05       	cpc	r29, r1
     f2a:	04 f5       	brge	.+64     	; 0xf6c <general_set_timer+0x64>
	{
		temp = 256 - (int) ( 256.0/250.0 * period_number);
     f2c:	be 01       	movw	r22, r28
     f2e:	0d 2e       	mov	r0, r29
     f30:	00 0c       	add	r0, r0
     f32:	88 0b       	sbc	r24, r24
     f34:	99 0b       	sbc	r25, r25
     f36:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__floatsisf>
     f3a:	2f e6       	ldi	r18, 0x6F	; 111
     f3c:	32 e1       	ldi	r19, 0x12	; 18
     f3e:	43 e8       	ldi	r20, 0x83	; 131
     f40:	5f e3       	ldi	r21, 0x3F	; 63
     f42:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     f46:	0e 94 11 15 	call	0x2a22	; 0x2a22 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	31 e0       	ldi	r19, 0x01	; 1
     f4e:	c9 01       	movw	r24, r18
     f50:	86 1b       	sub	r24, r22
     f52:	97 0b       	sbc	r25, r23
     f54:	8f 3f       	cpi	r24, 0xFF	; 255
     f56:	91 05       	cpc	r25, r1
     f58:	19 f0       	breq	.+6      	; 0xf60 <general_set_timer+0x58>
     f5a:	14 f0       	brlt	.+4      	; 0xf60 <general_set_timer+0x58>
     f5c:	8f ef       	ldi	r24, 0xFF	; 255
     f5e:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     f60:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS21)|(1<<CS20);
     f64:	83 e0       	ldi	r24, 0x03	; 3
     f66:	80 93 b1 00 	sts	0x00B1, r24
     f6a:	94 c0       	rjmp	.+296    	; 0x1094 <general_set_timer+0x18c>
	}
	// Resolution
	// 0.5s/256
	else if ( period_number <= 500 )
     f6c:	c5 3f       	cpi	r28, 0xF5	; 245
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	d8 07       	cpc	r29, r24
     f72:	04 f5       	brge	.+64     	; 0xfb4 <general_set_timer+0xac>
	{
		temp = 256 - (int) ( 256.0/500.0 * period_number);
     f74:	be 01       	movw	r22, r28
     f76:	0d 2e       	mov	r0, r29
     f78:	00 0c       	add	r0, r0
     f7a:	88 0b       	sbc	r24, r24
     f7c:	99 0b       	sbc	r25, r25
     f7e:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__floatsisf>
     f82:	2f e6       	ldi	r18, 0x6F	; 111
     f84:	32 e1       	ldi	r19, 0x12	; 18
     f86:	43 e0       	ldi	r20, 0x03	; 3
     f88:	5f e3       	ldi	r21, 0x3F	; 63
     f8a:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     f8e:	0e 94 11 15 	call	0x2a22	; 0x2a22 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	31 e0       	ldi	r19, 0x01	; 1
     f96:	c9 01       	movw	r24, r18
     f98:	86 1b       	sub	r24, r22
     f9a:	97 0b       	sbc	r25, r23
     f9c:	8f 3f       	cpi	r24, 0xFF	; 255
     f9e:	91 05       	cpc	r25, r1
     fa0:	19 f0       	breq	.+6      	; 0xfa8 <general_set_timer+0xa0>
     fa2:	14 f0       	brlt	.+4      	; 0xfa8 <general_set_timer+0xa0>
     fa4:	8f ef       	ldi	r24, 0xFF	; 255
     fa6:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     fa8:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22);
     fac:	84 e0       	ldi	r24, 0x04	; 4
     fae:	80 93 b1 00 	sts	0x00B1, r24
     fb2:	70 c0       	rjmp	.+224    	; 0x1094 <general_set_timer+0x18c>
	}
	// Resolution
	// 1s/256
	else if ( period_number <= 1000 )
     fb4:	c9 3e       	cpi	r28, 0xE9	; 233
     fb6:	83 e0       	ldi	r24, 0x03	; 3
     fb8:	d8 07       	cpc	r29, r24
     fba:	04 f5       	brge	.+64     	; 0xffc <general_set_timer+0xf4>
	{
		temp = 256 - (int) ( 256.0/1000.0 * period_number);
     fbc:	be 01       	movw	r22, r28
     fbe:	0d 2e       	mov	r0, r29
     fc0:	00 0c       	add	r0, r0
     fc2:	88 0b       	sbc	r24, r24
     fc4:	99 0b       	sbc	r25, r25
     fc6:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__floatsisf>
     fca:	2f e6       	ldi	r18, 0x6F	; 111
     fcc:	32 e1       	ldi	r19, 0x12	; 18
     fce:	43 e8       	ldi	r20, 0x83	; 131
     fd0:	5e e3       	ldi	r21, 0x3E	; 62
     fd2:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
     fd6:	0e 94 11 15 	call	0x2a22	; 0x2a22 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
     fda:	20 e0       	ldi	r18, 0x00	; 0
     fdc:	31 e0       	ldi	r19, 0x01	; 1
     fde:	c9 01       	movw	r24, r18
     fe0:	86 1b       	sub	r24, r22
     fe2:	97 0b       	sbc	r25, r23
     fe4:	8f 3f       	cpi	r24, 0xFF	; 255
     fe6:	91 05       	cpc	r25, r1
     fe8:	19 f0       	breq	.+6      	; 0xff0 <general_set_timer+0xe8>
     fea:	14 f0       	brlt	.+4      	; 0xff0 <general_set_timer+0xe8>
     fec:	8f ef       	ldi	r24, 0xFF	; 255
     fee:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
     ff0:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS20);	
     ff4:	85 e0       	ldi	r24, 0x05	; 5
     ff6:	80 93 b1 00 	sts	0x00B1, r24
     ffa:	4c c0       	rjmp	.+152    	; 0x1094 <general_set_timer+0x18c>
	}
	// Resolution
	// 2s/256
	else if ( period_number <= 2000 )
     ffc:	c1 3d       	cpi	r28, 0xD1	; 209
     ffe:	87 e0       	ldi	r24, 0x07	; 7
    1000:	d8 07       	cpc	r29, r24
    1002:	04 f5       	brge	.+64     	; 0x1044 <general_set_timer+0x13c>
	{
		temp = 256 - (int) ( 256.0/2000.0 * period_number);
    1004:	be 01       	movw	r22, r28
    1006:	0d 2e       	mov	r0, r29
    1008:	00 0c       	add	r0, r0
    100a:	88 0b       	sbc	r24, r24
    100c:	99 0b       	sbc	r25, r25
    100e:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__floatsisf>
    1012:	2f e6       	ldi	r18, 0x6F	; 111
    1014:	32 e1       	ldi	r19, 0x12	; 18
    1016:	43 e0       	ldi	r20, 0x03	; 3
    1018:	5e e3       	ldi	r21, 0x3E	; 62
    101a:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
    101e:	0e 94 11 15 	call	0x2a22	; 0x2a22 <__fixsfsi>
		temp = temp > 255 ? 255 : temp ;
    1022:	20 e0       	ldi	r18, 0x00	; 0
    1024:	31 e0       	ldi	r19, 0x01	; 1
    1026:	c9 01       	movw	r24, r18
    1028:	86 1b       	sub	r24, r22
    102a:	97 0b       	sbc	r25, r23
    102c:	8f 3f       	cpi	r24, 0xFF	; 255
    102e:	91 05       	cpc	r25, r1
    1030:	19 f0       	breq	.+6      	; 0x1038 <general_set_timer+0x130>
    1032:	14 f0       	brlt	.+4      	; 0x1038 <general_set_timer+0x130>
    1034:	8f ef       	ldi	r24, 0xFF	; 255
    1036:	90 e0       	ldi	r25, 0x00	; 0
		TCNT2 = temp;
    1038:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS21);	
    103c:	86 e0       	ldi	r24, 0x06	; 6
    103e:	80 93 b1 00 	sts	0x00B1, r24
    1042:	28 c0       	rjmp	.+80     	; 0x1094 <general_set_timer+0x18c>
	}
	// Resolution
	// 8s/256
	else if ( period_number <= 8000 )
    1044:	c1 34       	cpi	r28, 0x41	; 65
    1046:	8f e1       	ldi	r24, 0x1F	; 31
    1048:	d8 07       	cpc	r29, r24
    104a:	04 f5       	brge	.+64     	; 0x108c <general_set_timer+0x184>
	{
		t = (int) ( 256.0/8000.0 * period_number);
    104c:	be 01       	movw	r22, r28
    104e:	0d 2e       	mov	r0, r29
    1050:	00 0c       	add	r0, r0
    1052:	88 0b       	sbc	r24, r24
    1054:	99 0b       	sbc	r25, r25
    1056:	0e 94 49 15 	call	0x2a92	; 0x2a92 <__floatsisf>
    105a:	2f e6       	ldi	r18, 0x6F	; 111
    105c:	32 e1       	ldi	r19, 0x12	; 18
    105e:	43 e0       	ldi	r20, 0x03	; 3
    1060:	5d e3       	ldi	r21, 0x3D	; 61
    1062:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <__mulsf3>
    1066:	0e 94 11 15 	call	0x2a22	; 0x2a22 <__fixsfsi>
		temp = 256 - t;
		temp = temp > 255 ? 255 : temp ;
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	31 e0       	ldi	r19, 0x01	; 1
    106e:	c9 01       	movw	r24, r18
    1070:	86 1b       	sub	r24, r22
    1072:	97 0b       	sbc	r25, r23
    1074:	8f 3f       	cpi	r24, 0xFF	; 255
    1076:	91 05       	cpc	r25, r1
    1078:	19 f0       	breq	.+6      	; 0x1080 <general_set_timer+0x178>
    107a:	14 f0       	brlt	.+4      	; 0x1080 <general_set_timer+0x178>
    107c:	8f ef       	ldi	r24, 0xFF	; 255
    107e:	90 e0       	ldi	r25, 0x00	; 0

		TCNT2 = temp;
    1080:	80 93 b2 00 	sts	0x00B2, r24
		TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
    1084:	87 e0       	ldi	r24, 0x07	; 7
    1086:	80 93 b1 00 	sts	0x00B1, r24
    108a:	04 c0       	rjmp	.+8      	; 0x1094 <general_set_timer+0x18c>
	}
	else
	{
		printf("Timer exceeds max\n");
    108c:	8b eb       	ldi	r24, 0xBB	; 187
    108e:	92 e0       	ldi	r25, 0x02	; 2
    1090:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <puts>
	}

	/* start timer 2 */
	TCCR2A = 0x00;
    1094:	10 92 b0 00 	sts	0x00B0, r1
	TimeStamp += period_number;
    1098:	ce 01       	movw	r24, r28
    109a:	dd 0f       	add	r29, r29
    109c:	aa 0b       	sbc	r26, r26
    109e:	bb 0b       	sbc	r27, r27
    10a0:	40 91 d6 05 	lds	r20, 0x05D6
    10a4:	50 91 d7 05 	lds	r21, 0x05D7
    10a8:	60 91 d8 05 	lds	r22, 0x05D8
    10ac:	70 91 d9 05 	lds	r23, 0x05D9
    10b0:	84 0f       	add	r24, r20
    10b2:	95 1f       	adc	r25, r21
    10b4:	a6 1f       	adc	r26, r22
    10b6:	b7 1f       	adc	r27, r23
    10b8:	80 93 d6 05 	sts	0x05D6, r24
    10bc:	90 93 d7 05 	sts	0x05D7, r25
    10c0:	a0 93 d8 05 	sts	0x05D8, r26
    10c4:	b0 93 d9 05 	sts	0x05D9, r27
}
    10c8:	df 91       	pop	r29
    10ca:	cf 91       	pop	r28
    10cc:	08 95       	ret

000010ce <init_set_timer>:

void init_set_timer( int period_number )
{
    general_set_timer( period_number );
    10ce:	0e 94 84 07 	call	0xf08	; 0xf08 <general_set_timer>
	/* Clear pending interrupts */
	TIFR2  = (1 << TOV2) | (1 << OCF2A) | (1 << OCF2B);
    10d2:	87 e0       	ldi	r24, 0x07	; 7
    10d4:	87 bb       	out	0x17, r24	; 23
	/* Enable Overflow Interrupt */
	TIMSK2 = 1<<TOIE2;
    10d6:	81 e0       	ldi	r24, 0x01	; 1
    10d8:	80 93 70 00 	sts	0x0070, r24
    10dc:	08 95       	ret

000010de <set_timer>:

}

void set_timer( int period_number )
{
    10de:	cf 93       	push	r28
    10e0:	df 93       	push	r29
    10e2:	ec 01       	movw	r28, r24
	printf("set timer gap = %d\n\n", period_number);
    10e4:	df 93       	push	r29
    10e6:	cf 93       	push	r28
    10e8:	8d ec       	ldi	r24, 0xCD	; 205
    10ea:	92 e0       	ldi	r25, 0x02	; 2
    10ec:	9f 93       	push	r25
    10ee:	8f 93       	push	r24
    10f0:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <printf>
	if( period_number == 0)
    10f4:	0f 90       	pop	r0
    10f6:	0f 90       	pop	r0
    10f8:	0f 90       	pop	r0
    10fa:	0f 90       	pop	r0
    10fc:	20 97       	sbiw	r28, 0x00	; 0
    10fe:	69 f0       	breq	.+26     	; 0x111a <set_timer+0x3c>
	{
		/* we won't every set a zero timeout, will we ? */
		return;
	}
    if( timer_usage == 0 )
    1100:	80 91 da 05 	lds	r24, 0x05DA
    1104:	90 91 db 05 	lds	r25, 0x05DB
    1108:	89 2b       	or	r24, r25
    110a:	21 f4       	brne	.+8      	; 0x1114 <set_timer+0x36>
    {
        init_set_timer( period_number );
    110c:	ce 01       	movw	r24, r28
    110e:	0e 94 67 08 	call	0x10ce	; 0x10ce <init_set_timer>
    1112:	03 c0       	rjmp	.+6      	; 0x111a <set_timer+0x3c>
    }
    else
    {
        general_set_timer( period_number );
    1114:	ce 01       	movw	r24, r28
    1116:	0e 94 84 07 	call	0xf08	; 0xf08 <general_set_timer>
    }
}	
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	08 95       	ret

00001120 <PWR_Init>:

/*************************************************************************//**
  @brief Initializes the power management system
*****************************************************************************/
void PWR_Init(void){
	DDRD |= 0b11000000;
    1120:	8a b1       	in	r24, 0x0a	; 10
    1122:	80 6c       	ori	r24, 0xC0	; 192
    1124:	8a b9       	out	0x0a, r24	; 10
    1126:	08 95       	ret

00001128 <PWR_TurnOn5V>:

/*************************************************************************//**
  @brief Turns on the 5V power supply
*****************************************************************************/
void PWR_TurnOn5V(void){
	PORTD |= 0b10000000;
    1128:	5f 9a       	sbi	0x0b, 7	; 11
    112a:	08 95       	ret

0000112c <SPI_SlaveInit>:

unsigned char buffer[16];

void SPI_SlaveInit(void)
{
	DDRB |= (1<<PORTB3); //Set MISO output
    112c:	23 9a       	sbi	0x04, 3	; 4
	SPCR = (1<<SPE); //Enable SPI
    112e:	80 e4       	ldi	r24, 0x40	; 64
    1130:	8c bd       	out	0x2c, r24	; 44
    1132:	08 95       	ret

00001134 <TWI_Init>:
/*************************************************************************//**
  @brief Initializes the 2-wire Serial Interface as a master
  @param[in] freq SCL frequency (Do not exceed 400kHz)
  @return Status (@c 0 on failure, nonzero otherwise)
*****************************************************************************/
char TWI_Init(unsigned long freq){
    1134:	9b 01       	movw	r18, r22
    1136:	ac 01       	movw	r20, r24
	//printf("TWI_Init");
	TWSR=0x00;
    1138:	10 92 b9 00 	sts	0x00B9, r1
	TWBR=(unsigned char)(((F_CPU/freq)-16UL)/8UL); //Compute settings value and set frequency
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	74 e2       	ldi	r23, 0x24	; 36
    1140:	84 ef       	ldi	r24, 0xF4	; 244
    1142:	90 e0       	ldi	r25, 0x00	; 0
    1144:	0e 94 e7 19 	call	0x33ce	; 0x33ce <__udivmodsi4>
    1148:	da 01       	movw	r26, r20
    114a:	c9 01       	movw	r24, r18
    114c:	40 97       	sbiw	r24, 0x10	; 16
    114e:	a1 09       	sbc	r26, r1
    1150:	b1 09       	sbc	r27, r1
    1152:	68 94       	set
    1154:	12 f8       	bld	r1, 2
    1156:	b6 95       	lsr	r27
    1158:	a7 95       	ror	r26
    115a:	97 95       	ror	r25
    115c:	87 95       	ror	r24
    115e:	16 94       	lsr	r1
    1160:	d1 f7       	brne	.-12     	; 0x1156 <TWI_Init+0x22>
    1162:	80 93 b8 00 	sts	0x00B8, r24
	TWCR=(1 << TWEN);
    1166:	84 e0       	ldi	r24, 0x04	; 4
    1168:	80 93 bc 00 	sts	0x00BC, r24
	
	//TWAR=0; //Disable slave mode
	
	return 1; //May want to actually check for success here
}
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	08 95       	ret

00001170 <TWI_WriteByte>:
  @param[in] data byte to send
  @return Status code, TWI_SENT_ACK or TWI_SENT_NACK on success
*****************************************************************************/
char TWI_WriteByte(unsigned char data){
	//printf("TWI_WriteByte");
	TWDR = data; //Stage the data to send
    1170:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
    1174:	84 e8       	ldi	r24, 0x84	; 132
    1176:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);//Send the data
    117a:	ec eb       	ldi	r30, 0xBC	; 188
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	80 81       	ld	r24, Z
    1180:	88 23       	and	r24, r24
    1182:	ec f7       	brge	.-6      	; 0x117e <TWI_WriteByte+0xe>
	
	return TWSR&TWSR_MASK;//Return the status code
    1184:	80 91 b9 00 	lds	r24, 0x00B9
}
    1188:	88 7f       	andi	r24, 0xF8	; 248
    118a:	08 95       	ret

0000118c <TWI_BeginWrite>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAW_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginWrite(unsigned char address){
	//printf("TWI_BeginWrite");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
    118c:	94 ee       	ldi	r25, 0xE4	; 228
    118e:	90 93 bc 00 	sts	0x00BC, r25
	int i=0;
	while ((TWCR & (1<<TWINT)) == 0);
    1192:	ec eb       	ldi	r30, 0xBC	; 188
    1194:	f0 e0       	ldi	r31, 0x00	; 0
    1196:	90 81       	ld	r25, Z
    1198:	99 23       	and	r25, r25
    119a:	ec f7       	brge	.-6      	; 0x1196 <TWI_BeginWrite+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    119c:	ef e9       	ldi	r30, 0x9F	; 159
    119e:	ff e0       	ldi	r31, 0x0F	; 15
    11a0:	31 97       	sbiw	r30, 0x01	; 1
    11a2:	f1 f7       	brne	.-4      	; 0x11a0 <TWI_BeginWrite+0x14>
    11a4:	00 c0       	rjmp	.+0      	; 0x11a6 <TWI_BeginWrite+0x1a>
    11a6:	00 00       	nop
	_delay_ms(1);
	char stat = (TWSR & TWSR_MASK);
    11a8:	90 91 b9 00 	lds	r25, 0x00B9
    11ac:	98 7f       	andi	r25, 0xF8	; 248
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
    11ae:	98 30       	cpi	r25, 0x08	; 8
    11b0:	31 f0       	breq	.+12     	; 0x11be <TWI_BeginWrite+0x32>
    11b2:	90 31       	cpi	r25, 0x10	; 16
    11b4:	21 f0       	breq	.+8      	; 0x11be <TWI_BeginWrite+0x32>
    11b6:	80 91 b9 00 	lds	r24, 0x00B9
    11ba:	88 7f       	andi	r24, 0xF8	; 248
    11bc:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) & SLAW_MASK); //reset bit 0 to send a write bit, send
    11be:	88 0f       	add	r24, r24
    11c0:	0e 94 b8 08 	call	0x1170	; 0x1170 <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	return stat;//Return the status code
}
    11c4:	08 95       	ret

000011c6 <TWI_BeginRead>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAR_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginRead(unsigned char address){
	//printf("TWI_BeginRead");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
    11c6:	94 ee       	ldi	r25, 0xE4	; 228
    11c8:	90 93 bc 00 	sts	0x00BC, r25
	while ((TWCR & (1<<TWINT)) == 0);
    11cc:	ec eb       	ldi	r30, 0xBC	; 188
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	90 81       	ld	r25, Z
    11d2:	99 23       	and	r25, r25
    11d4:	ec f7       	brge	.-6      	; 0x11d0 <TWI_BeginRead+0xa>
	
	char stat = (TWSR & TWSR_MASK);
    11d6:	90 91 b9 00 	lds	r25, 0x00B9
    11da:	98 7f       	andi	r25, 0xF8	; 248
	//printf("0x%1x",(unsigned)stat);
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
    11dc:	98 30       	cpi	r25, 0x08	; 8
    11de:	31 f0       	breq	.+12     	; 0x11ec <TWI_BeginRead+0x26>
    11e0:	90 31       	cpi	r25, 0x10	; 16
    11e2:	21 f0       	breq	.+8      	; 0x11ec <TWI_BeginRead+0x26>
    11e4:	80 91 b9 00 	lds	r24, 0x00B9
    11e8:	88 7f       	andi	r24, 0xF8	; 248
    11ea:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) | SLAR_MASK); //set bit 0 to send a read bit and send it
    11ec:	88 0f       	add	r24, r24
    11ee:	81 60       	ori	r24, 0x01	; 1
    11f0:	0e 94 b8 08 	call	0x1170	; 0x1170 <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	
	return stat;//Return the status code
}
    11f4:	08 95       	ret

000011f6 <TWI_ReadAck>:
/*************************************************************************//**
  @brief Receives a byte over TWI and returns an ACK
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_ACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadAck(unsigned char *data){
    11f6:	dc 01       	movw	r26, r24
	//printf("TWI_ReadAck");
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Start receiving, ending with an ACK
    11f8:	84 ec       	ldi	r24, 0xC4	; 196
    11fa:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);
    11fe:	ec eb       	ldi	r30, 0xBC	; 188
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	90 81       	ld	r25, Z
    1204:	99 23       	and	r25, r25
    1206:	ec f7       	brge	.-6      	; 0x1202 <TWI_ReadAck+0xc>
	*data=TWDR; //Store the data
    1208:	80 91 bb 00 	lds	r24, 0x00BB
    120c:	8c 93       	st	X, r24
	
	return TWSR&TWSR_MASK;//Return the status code
    120e:	80 91 b9 00 	lds	r24, 0x00B9
}
    1212:	88 7f       	andi	r24, 0xF8	; 248
    1214:	08 95       	ret

00001216 <TWI_ReadNack>:
/*************************************************************************//**
  @brief Receives a byte over TWI and returns a NACK
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_NACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadNack(unsigned char *data){
    1216:	dc 01       	movw	r26, r24
	//printf("TWI_ReadNack");
	TWCR = (1<<TWINT)|(1<<TWEN); //Start receiving, ending with a NACK
    1218:	84 e8       	ldi	r24, 0x84	; 132
    121a:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);
    121e:	ec eb       	ldi	r30, 0xBC	; 188
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	90 81       	ld	r25, Z
    1224:	99 23       	and	r25, r25
    1226:	ec f7       	brge	.-6      	; 0x1222 <TWI_ReadNack+0xc>
	*data=TWDR; //Store the data
    1228:	80 91 bb 00 	lds	r24, 0x00BB
    122c:	8c 93       	st	X, r24
	
	return TWSR&TWSR_MASK;//Return the status code
    122e:	80 91 b9 00 	lds	r24, 0x00B9
}
    1232:	88 7f       	andi	r24, 0xF8	; 248
    1234:	08 95       	ret

00001236 <TWI_Stop>:
  @brief Sends a Stop bit, be sure to send a Start bit before future interactions on the bus
  @return Status code, should always be nonzero
*****************************************************************************/
char TWI_Stop(void){
	//printf("TWI_Stop");
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    1236:	84 e9       	ldi	r24, 0x94	; 148
    1238:	80 93 bc 00 	sts	0x00BC, r24
	return 1;
}
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	08 95       	ret

00001240 <TWI_Read>:
  @param[in] amount Number of bytes to recieve
  @param[in] whether or not to send an ACK on the last byte, sends NACK if false
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
    1240:	9f 92       	push	r9
    1242:	af 92       	push	r10
    1244:	bf 92       	push	r11
    1246:	cf 92       	push	r12
    1248:	df 92       	push	r13
    124a:	ef 92       	push	r14
    124c:	ff 92       	push	r15
    124e:	0f 93       	push	r16
    1250:	1f 93       	push	r17
    1252:	cf 93       	push	r28
    1254:	df 93       	push	r29
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
    1256:	16 16       	cp	r1, r22
    1258:	17 06       	cpc	r1, r23
    125a:	0c f5       	brge	.+66     	; 0x129e <TWI_Read+0x5e>
    125c:	94 2e       	mov	r9, r20
    125e:	8b 01       	movw	r16, r22
    1260:	7c 01       	movw	r14, r24
    1262:	c0 e0       	ldi	r28, 0x00	; 0
    1264:	d0 e0       	ldi	r29, 0x00	; 0
		if((ack==false) && ((amount-1)==i)){
    1266:	6b 01       	movw	r12, r22
    1268:	81 e0       	ldi	r24, 0x01	; 1
    126a:	c8 1a       	sub	r12, r24
    126c:	d1 08       	sbc	r13, r1
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
    126e:	57 01       	movw	r10, r14
    1270:	ac 0c       	add	r10, r12
    1272:	bd 1c       	adc	r11, r13
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
		if((ack==false) && ((amount-1)==i)){
    1274:	91 10       	cpse	r9, r1
    1276:	07 c0       	rjmp	.+14     	; 0x1286 <TWI_Read+0x46>
    1278:	cc 16       	cp	r12, r28
    127a:	dd 06       	cpc	r13, r29
    127c:	21 f4       	brne	.+8      	; 0x1286 <TWI_Read+0x46>
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
    127e:	c5 01       	movw	r24, r10
    1280:	0e 94 0b 09 	call	0x1216	; 0x1216 <TWI_ReadNack>
    1284:	05 c0       	rjmp	.+10     	; 0x1290 <TWI_Read+0x50>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}else{
			status=TWI_ReadAck(&data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
    1286:	c7 01       	movw	r24, r14
    1288:	8c 0f       	add	r24, r28
    128a:	9d 1f       	adc	r25, r29
    128c:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <TWI_ReadAck>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}
		//printf("A");
		if(status!=TWI_REC_ACK)return status; //If NACK was selected, returning here is fine since the loop is already ending
    1290:	80 35       	cpi	r24, 0x50	; 80
    1292:	31 f4       	brne	.+12     	; 0x12a0 <TWI_Read+0x60>
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
    1294:	21 96       	adiw	r28, 0x01	; 1
    1296:	c0 17       	cp	r28, r16
    1298:	d1 07       	cpc	r29, r17
    129a:	61 f7       	brne	.-40     	; 0x1274 <TWI_Read+0x34>
    129c:	01 c0       	rjmp	.+2      	; 0x12a0 <TWI_Read+0x60>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
    129e:	80 e0       	ldi	r24, 0x00	; 0
		//will return if something goes wrong partway through
		//printf("B");
	}
	//printf("0x%1x",(unsigned)status);
	return status;
}
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	1f 91       	pop	r17
    12a6:	0f 91       	pop	r16
    12a8:	ff 90       	pop	r15
    12aa:	ef 90       	pop	r14
    12ac:	df 90       	pop	r13
    12ae:	cf 90       	pop	r12
    12b0:	bf 90       	pop	r11
    12b2:	af 90       	pop	r10
    12b4:	9f 90       	pop	r9
    12b6:	08 95       	ret

000012b8 <TWI_Write>:
  @param[in] *data Pointer to an array of bytes to send
  @param[in] amount Number of bytes to send
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
    12b8:	0f 93       	push	r16
    12ba:	1f 93       	push	r17
    12bc:	cf 93       	push	r28
    12be:	df 93       	push	r29
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
    12c0:	16 16       	cp	r1, r22
    12c2:	17 06       	cpc	r1, r23
    12c4:	6c f4       	brge	.+26     	; 0x12e0 <TWI_Write+0x28>
    12c6:	8c 01       	movw	r16, r24
    12c8:	ec 01       	movw	r28, r24
    12ca:	06 0f       	add	r16, r22
    12cc:	17 1f       	adc	r17, r23
		status=TWI_WriteByte(data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
    12ce:	89 91       	ld	r24, Y+
    12d0:	0e 94 b8 08 	call	0x1170	; 0x1170 <TWI_WriteByte>
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
    12d4:	88 32       	cpi	r24, 0x28	; 40
    12d6:	29 f4       	brne	.+10     	; 0x12e2 <TWI_Write+0x2a>
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
    12d8:	c0 17       	cp	r28, r16
    12da:	d1 07       	cpc	r29, r17
    12dc:	c1 f7       	brne	.-16     	; 0x12ce <TWI_Write+0x16>
    12de:	01 c0       	rjmp	.+2      	; 0x12e2 <TWI_Write+0x2a>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
    12e0:	80 e0       	ldi	r24, 0x00	; 0
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
		//will return if something goes wrong partway through
	}
	return status;
    12e2:	df 91       	pop	r29
    12e4:	cf 91       	pop	r28
    12e6:	1f 91       	pop	r17
    12e8:	0f 91       	pop	r16
    12ea:	08 95       	ret

000012ec <USART0_Init>:
  @brief Initializes USART0 in asynchronous UART mode, 8 bit data, 1 stop bit
  @param[in] desired baud rate (configuration values computed using F_CPU)
*****************************************************************************/
void USART0_Init(unsigned long baud){
	
	stdout = &USART0_stdout; //make stdout print to USART0
    12ec:	26 e0       	ldi	r18, 0x06	; 6
    12ee:	32 e0       	ldi	r19, 0x02	; 2
    12f0:	30 93 a1 0a 	sts	0x0AA1, r19
    12f4:	20 93 a0 0a 	sts	0x0AA0, r18
	
	//Compute UBRR for baudrate setting
	unsigned short ubrr=(unsigned short)((F_CPU/(baud*16UL))-1);
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	88 0f       	add	r24, r24
    12fe:	99 1f       	adc	r25, r25
    1300:	aa 1f       	adc	r26, r26
    1302:	bb 1f       	adc	r27, r27
    1304:	88 0f       	add	r24, r24
    1306:	99 1f       	adc	r25, r25
    1308:	aa 1f       	adc	r26, r26
    130a:	bb 1f       	adc	r27, r27
    130c:	9c 01       	movw	r18, r24
    130e:	ad 01       	movw	r20, r26
    1310:	22 0f       	add	r18, r18
    1312:	33 1f       	adc	r19, r19
    1314:	44 1f       	adc	r20, r20
    1316:	55 1f       	adc	r21, r21
    1318:	22 0f       	add	r18, r18
    131a:	33 1f       	adc	r19, r19
    131c:	44 1f       	adc	r20, r20
    131e:	55 1f       	adc	r21, r21
    1320:	60 e0       	ldi	r22, 0x00	; 0
    1322:	74 e2       	ldi	r23, 0x24	; 36
    1324:	84 ef       	ldi	r24, 0xF4	; 244
    1326:	90 e0       	ldi	r25, 0x00	; 0
    1328:	0e 94 e7 19 	call	0x33ce	; 0x33ce <__udivmodsi4>
    132c:	21 50       	subi	r18, 0x01	; 1
    132e:	31 09       	sbc	r19, r1
	
	//Set BAUD rate.
	UBRR0H = (unsigned char) (ubrr >> 8);
    1330:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) ubrr;
    1334:	20 93 c4 00 	sts	0x00C4, r18
	/*Set frame format. 8 data bit(settings bits UCSZ00 and UCSZ01  UCSR0B), 1 stop bit(by default and need not to be worried about). 
	The UCSZ01:0 bits combined with the UCSZ02 bit in UCSR0B sets the number of data
	bits (Character Size) in the frame that the Receiver and Transmitter use. 
	If a change on frame format is needed, make sure to modify UCSR0B register above accordingly.
	See datasheet pg. 390.*/
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
    1338:	86 e0       	ldi	r24, 0x06	; 6
    133a:	80 93 c2 00 	sts	0x00C2, r24
	
	//Enable receiver and transmitter. Enable the USART Receive Complete interrupt(RXCIE).
	//UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0));
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);//Enable RX/TX, no interrupts
    133e:	88 e1       	ldi	r24, 0x18	; 24
    1340:	80 93 c1 00 	sts	0x00C1, r24
    1344:	08 95       	ret

00001346 <USART0_Transmit>:
Function contains busy loops for simplicity in debugging. Not production code.
  @brief Transmits a byte via USART0
  @param[in] data byte to be transmitted
*****************************************************************************/
void USART0_Transmit(unsigned char data){
	while(!(UCSR0A & (1 << UDRE0))); //Wait for the empty transmit buffer. (Waiting UDR0 to be empty.)
    1346:	e0 ec       	ldi	r30, 0xC0	; 192
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	90 81       	ld	r25, Z
    134c:	95 ff       	sbrs	r25, 5
    134e:	fd cf       	rjmp	.-6      	; 0x134a <USART0_Transmit+0x4>
		UDR0 = data;			//store the data in the USART Data Register
    1350:	80 93 c6 00 	sts	0x00C6, r24
    1354:	08 95       	ret

00001356 <USART0_putchar_printf>:
  @brief Called when stdout is being printed to USART0 (this is set up at runtime)
  @param[in] var byte to transmit
  @param[in/out] *stream Pointer to a stdio.h FILE io stream
  @return Status
*****************************************************************************/
int USART0_putchar_printf(char var, FILE *stream) {
    1356:	cf 93       	push	r28
    1358:	c8 2f       	mov	r28, r24
	if (var == '\n') USART0_Transmit('\r');
    135a:	8a 30       	cpi	r24, 0x0A	; 10
    135c:	19 f4       	brne	.+6      	; 0x1364 <USART0_putchar_printf+0xe>
    135e:	8d e0       	ldi	r24, 0x0D	; 13
    1360:	0e 94 a3 09 	call	0x1346	; 0x1346 <USART0_Transmit>
	USART0_Transmit(var);
    1364:	8c 2f       	mov	r24, r28
    1366:	0e 94 a3 09 	call	0x1346	; 0x1346 <USART0_Transmit>
	return 0;
}
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	90 e0       	ldi	r25, 0x00	; 0
    136e:	cf 91       	pop	r28
    1370:	08 95       	ret

00001372 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
    1372:	14 be       	out	0x34, r1	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
    1374:	0f b6       	in	r0, 0x3f	; 63
    1376:	f8 94       	cli
    1378:	a8 95       	wdr
    137a:	80 91 60 00 	lds	r24, 0x0060
    137e:	88 61       	ori	r24, 0x18	; 24
    1380:	80 93 60 00 	sts	0x0060, r24
    1384:	10 92 60 00 	sts	0x0060, r1
    1388:	0f be       	out	0x3f, r0	; 63
  wdt_disable();

  CLKPR = 1 << CLKPCE;
    138a:	e1 e6       	ldi	r30, 0x61	; 97
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 e8       	ldi	r24, 0x80	; 128
    1390:	80 83       	st	Z, r24
  CLKPR = 0;
    1392:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
    1394:	78 94       	sei

  HAL_TimerInit();
    1396:	0e 94 ce 09 	call	0x139c	; 0x139c <HAL_TimerInit>
    139a:	08 95       	ret

0000139c <HAL_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_TimerInit(void)
{
  halTimerIrqCount = 0;
    139c:	10 92 71 0a 	sts	0x0A71, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
    13a0:	80 e2       	ldi	r24, 0x20	; 32
    13a2:	9e e4       	ldi	r25, 0x4E	; 78
    13a4:	90 93 a9 00 	sts	0x00A9, r25
    13a8:	80 93 a8 00 	sts	0x00A8, r24
  TCCR4B = (1 << WGM12);              // CTC mode
    13ac:	e1 ea       	ldi	r30, 0xA1	; 161
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	88 e0       	ldi	r24, 0x08	; 8
    13b2:	80 83       	st	Z, r24
  TCCR4B |= (1 << CS11);              // Prescaler 8
    13b4:	80 81       	ld	r24, Z
    13b6:	82 60       	ori	r24, 0x02	; 2
    13b8:	80 83       	st	Z, r24
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
    13ba:	e2 e7       	ldi	r30, 0x72	; 114
    13bc:	f0 e0       	ldi	r31, 0x00	; 0
    13be:	80 81       	ld	r24, Z
    13c0:	82 60       	ori	r24, 0x02	; 2
    13c2:	80 83       	st	Z, r24
    13c4:	08 95       	ret

000013c6 <__vector_42>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    13c6:	1f 92       	push	r1
    13c8:	0f 92       	push	r0
    13ca:	0f b6       	in	r0, 0x3f	; 63
    13cc:	0f 92       	push	r0
    13ce:	11 24       	eor	r1, r1
    13d0:	8f 93       	push	r24
  halTimerIrqCount++;
    13d2:	80 91 71 0a 	lds	r24, 0x0A71
    13d6:	8f 5f       	subi	r24, 0xFF	; 255
    13d8:	80 93 71 0a 	sts	0x0A71, r24
}
    13dc:	8f 91       	pop	r24
    13de:	0f 90       	pop	r0
    13e0:	0f be       	out	0x3f, r0	; 63
    13e2:	0f 90       	pop	r0
    13e4:	1f 90       	pop	r1
    13e6:	18 95       	reti

000013e8 <NWK_Init>:
/*************************************************************************//**
  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
  nwkIb.nwkSeqNum = 0;
    13e8:	e2 e7       	ldi	r30, 0x72	; 114
    13ea:	fa e0       	ldi	r31, 0x0A	; 10
    13ec:	14 82       	std	Z+4, r1	; 0x04
  nwkIb.macSeqNum = 0;
    13ee:	15 82       	std	Z+5, r1	; 0x05
  nwkIb.addr = 0;
    13f0:	11 82       	std	Z+1, r1	; 0x01
    13f2:	10 82       	st	Z, r1
  nwkIb.lock = 0;
    13f4:	17 a2       	std	Z+39, r1	; 0x27
    13f6:	16 a2       	std	Z+38, r1	; 0x26
    13f8:	e8 e7       	ldi	r30, 0x78	; 120
    13fa:	fa e0       	ldi	r31, 0x0A	; 10
    13fc:	88 e9       	ldi	r24, 0x98	; 152
    13fe:	9a e0       	ldi	r25, 0x0A	; 10

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
    nwkIb.endpoint[i] = NULL;
    1400:	11 92       	st	Z+, r1
    1402:	11 92       	st	Z+, r1
  nwkIb.nwkSeqNum = 0;
  nwkIb.macSeqNum = 0;
  nwkIb.addr = 0;
  nwkIb.lock = 0;

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
    1404:	e8 17       	cp	r30, r24
    1406:	f9 07       	cpc	r31, r25
    1408:	d9 f7       	brne	.-10     	; 0x1400 <NWK_Init+0x18>
    nwkIb.endpoint[i] = NULL;

  nwkTxInit();
    140a:	0e 94 f4 0a 	call	0x15e8	; 0x15e8 <nwkTxInit>
  nwkRxInit();
    140e:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <nwkRxInit>
  nwkFrameInit();
    1412:	0e 94 1c 0a 	call	0x1438	; 0x1438 <nwkFrameInit>
  nwkDataReqInit();
    1416:	0e 94 17 0a 	call	0x142e	; 0x142e <nwkDataReqInit>
    141a:	08 95       	ret

0000141c <NWK_OpenEndpoint>:
  @param[in] id Endpoint index (1-15)
  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
  nwkIb.endpoint[id] = handler;
    141c:	e8 2f       	mov	r30, r24
    141e:	f0 e0       	ldi	r31, 0x00	; 0
    1420:	ee 0f       	add	r30, r30
    1422:	ff 1f       	adc	r31, r31
    1424:	e8 58       	subi	r30, 0x88	; 136
    1426:	f5 4f       	sbci	r31, 0xF5	; 245
    1428:	71 83       	std	Z+1, r23	; 0x01
    142a:	60 83       	st	Z, r22
    142c:	08 95       	ret

0000142e <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
    142e:	10 92 dd 05 	sts	0x05DD, r1
    1432:	10 92 dc 05 	sts	0x05DC, r1
    1436:	08 95       	ret

00001438 <nwkFrameInit>:
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    1438:	10 92 de 05 	sts	0x05DE, r1
    143c:	10 92 67 06 	sts	0x0667, r1
    1440:	10 92 f0 06 	sts	0x06F0, r1
    1444:	10 92 79 07 	sts	0x0779, r1
    1448:	10 92 02 08 	sts	0x0802, r1
    144c:	08 95       	ret

0000144e <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	41 f0       	breq	.+16     	; 0x1462 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
    1452:	fc 01       	movw	r30, r24
    1454:	e7 57       	subi	r30, 0x77	; 119
    1456:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    1458:	88 e0       	ldi	r24, 0x08	; 8
    145a:	eb 38       	cpi	r30, 0x8B	; 139
    145c:	f8 07       	cpc	r31, r24
    145e:	18 f0       	brcs	.+6      	; 0x1466 <nwkFrameNext+0x18>
    1460:	15 c0       	rjmp	.+42     	; 0x148c <nwkFrameNext+0x3e>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    1462:	ee ed       	ldi	r30, 0xDE	; 222
    1464:	f5 e0       	ldi	r31, 0x05	; 5
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    1466:	80 81       	ld	r24, Z
    1468:	88 23       	and	r24, r24
    146a:	39 f0       	breq	.+14     	; 0x147a <nwkFrameNext+0x2c>
    146c:	03 c0       	rjmp	.+6      	; 0x1474 <nwkFrameNext+0x26>
    146e:	80 81       	ld	r24, Z
    1470:	88 23       	and	r24, r24
    1472:	19 f0       	breq	.+6      	; 0x147a <nwkFrameNext+0x2c>
      return frame;
    1474:	8e 2f       	mov	r24, r30
    1476:	9f 2f       	mov	r25, r31
    1478:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    147a:	e7 57       	subi	r30, 0x77	; 119
    147c:	ff 4f       	sbci	r31, 0xFF	; 255
    147e:	88 e0       	ldi	r24, 0x08	; 8
    1480:	eb 38       	cpi	r30, 0x8B	; 139
    1482:	f8 07       	cpc	r31, r24
    1484:	a0 f3       	brcs	.-24     	; 0x146e <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    1486:	80 e0       	ldi	r24, 0x00	; 0
    1488:	90 e0       	ldi	r25, 0x00	; 0
    148a:	08 95       	ret
    148c:	80 e0       	ldi	r24, 0x00	; 0
    148e:	90 e0       	ldi	r25, 0x00	; 0
}
    1490:	08 95       	ret

00001492 <nwkRxServiceDataInd>:
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    1492:	dc 01       	movw	r26, r24
    1494:	19 96       	adiw	r26, 0x09	; 9
    1496:	2c 91       	ld	r18, X
    1498:	19 97       	sbiw	r26, 0x09	; 9
    149a:	22 23       	and	r18, r18
    149c:	51 f0       	breq	.+20     	; 0x14b2 <nwkRxServiceDataInd+0x20>
    return false;

  switch (ind->data[0])
    149e:	17 96       	adiw	r26, 0x07	; 7
    14a0:	ed 91       	ld	r30, X+
    14a2:	fc 91       	ld	r31, X
    14a4:	18 97       	sbiw	r26, 0x08	; 8
    14a6:	20 81       	ld	r18, Z
    14a8:	21 11       	cpse	r18, r1
    14aa:	05 c0       	rjmp	.+10     	; 0x14b6 <nwkRxServiceDataInd+0x24>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
    14ac:	0e 94 17 0b 	call	0x162e	; 0x162e <nwkTxAckReceived>
    14b0:	08 95       	ret
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    return false;
    14b2:	80 e0       	ldi	r24, 0x00	; 0
    14b4:	08 95       	ret
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
    14b6:	80 e0       	ldi	r24, 0x00	; 0
  }
}
    14b8:	08 95       	ret

000014ba <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    14ba:	bc 01       	movw	r22, r24
    14bc:	ec e9       	ldi	r30, 0x9C	; 156
    14be:	f8 e0       	ldi	r31, 0x08	; 8
    14c0:	2e ec       	ldi	r18, 0xCE	; 206
    14c2:	38 e0       	ldi	r19, 0x08	; 8
  bool restart = false;
    14c4:	40 e0       	ldi	r20, 0x00	; 0
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    14c6:	51 e0       	ldi	r21, 0x01	; 1
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    14c8:	90 81       	ld	r25, Z
    14ca:	99 23       	and	r25, r25
    14cc:	19 f0       	breq	.+6      	; 0x14d4 <nwkRxDuplicateRejectionTimerHandler+0x1a>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
    14ce:	91 50       	subi	r25, 0x01	; 1
    14d0:	90 83       	st	Z, r25
      restart = true;
    14d2:	45 2f       	mov	r20, r21
    14d4:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    14d6:	e2 17       	cp	r30, r18
    14d8:	f3 07       	cpc	r31, r19
    14da:	b1 f7       	brne	.-20     	; 0x14c8 <nwkRxDuplicateRejectionTimerHandler+0xe>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
    14dc:	44 23       	and	r20, r20
    14de:	19 f0       	breq	.+6      	; 0x14e6 <nwkRxDuplicateRejectionTimerHandler+0x2c>
    14e0:	cb 01       	movw	r24, r22
    SYS_TimerStart(timer);
    14e2:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <SYS_TimerStart>
    14e6:	08 95       	ret

000014e8 <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    14e8:	ec e9       	ldi	r30, 0x9C	; 156
    14ea:	f8 e0       	ldi	r31, 0x08	; 8
    14ec:	8e ec       	ldi	r24, 0xCE	; 206
    14ee:	98 e0       	ldi	r25, 0x08	; 8
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
    14f0:	10 82       	st	Z, r1
    14f2:	35 96       	adiw	r30, 0x05	; 5
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    14f4:	e8 17       	cp	r30, r24
    14f6:	f9 07       	cpc	r31, r25
    14f8:	d9 f7       	brne	.-10     	; 0x14f0 <nwkRxInit+0x8>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    14fa:	eb e8       	ldi	r30, 0x8B	; 139
    14fc:	f8 e0       	ldi	r31, 0x08	; 8
    14fe:	84 e6       	ldi	r24, 0x64	; 100
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	a0 e0       	ldi	r26, 0x00	; 0
    1504:	b0 e0       	ldi	r27, 0x00	; 0
    1506:	86 83       	std	Z+6, r24	; 0x06
    1508:	97 83       	std	Z+7, r25	; 0x07
    150a:	a0 87       	std	Z+8, r26	; 0x08
    150c:	b1 87       	std	Z+9, r27	; 0x09
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    150e:	12 86       	std	Z+10, r1	; 0x0a
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
    1510:	8d e5       	ldi	r24, 0x5D	; 93
    1512:	9a e0       	ldi	r25, 0x0A	; 10
    1514:	94 87       	std	Z+12, r25	; 0x0c
    1516:	83 87       	std	Z+11, r24	; 0x0b

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
    1518:	69 e4       	ldi	r22, 0x49	; 73
    151a:	7a e0       	ldi	r23, 0x0A	; 10
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	0e 94 0e 0a 	call	0x141c	; 0x141c <NWK_OpenEndpoint>
    1522:	08 95       	ret

00001524 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    1524:	ef 92       	push	r14
    1526:	ff 92       	push	r15
    1528:	0f 93       	push	r16
    152a:	1f 93       	push	r17
    152c:	cf 93       	push	r28
    152e:	7c 01       	movw	r14, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    1530:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    1532:	80 e0       	ldi	r24, 0x00	; 0
    1534:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    1536:	01 e0       	ldi	r16, 0x01	; 1

      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    1538:	c3 e1       	ldi	r28, 0x13	; 19
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    153a:	13 c0       	rjmp	.+38     	; 0x1562 <nwkTxDelayTimerHandler+0x3e>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    153c:	fc 01       	movw	r30, r24
    153e:	20 81       	ld	r18, Z
    1540:	21 31       	cpi	r18, 0x11	; 17
    1542:	79 f4       	brne	.+30     	; 0x1562 <nwkTxDelayTimerHandler+0x3e>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    1544:	ec 57       	subi	r30, 0x7C	; 124
    1546:	ff 4f       	sbci	r31, 0xFF	; 255
    1548:	20 81       	ld	r18, Z
    154a:	31 81       	ldd	r19, Z+1	; 0x01
    154c:	21 50       	subi	r18, 0x01	; 1
    154e:	31 09       	sbc	r19, r1
    1550:	31 83       	std	Z+1, r19	; 0x01
    1552:	20 83       	st	Z, r18
    1554:	23 2b       	or	r18, r19
    1556:	21 f4       	brne	.+8      	; 0x1560 <nwkTxDelayTimerHandler+0x3c>
        frame->state = NWK_TX_STATE_SEND;
    1558:	fc 01       	movw	r30, r24
    155a:	c0 83       	st	Z, r28

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    155c:	10 2f       	mov	r17, r16
    155e:	01 c0       	rjmp	.+2      	; 0x1562 <nwkTxDelayTimerHandler+0x3e>
    1560:	10 2f       	mov	r17, r16
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    1562:	0e 94 27 0a 	call	0x144e	; 0x144e <nwkFrameNext>
    1566:	00 97       	sbiw	r24, 0x00	; 0
    1568:	49 f7       	brne	.-46     	; 0x153c <nwkTxDelayTimerHandler+0x18>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
    156a:	11 23       	and	r17, r17
    156c:	19 f0       	breq	.+6      	; 0x1574 <nwkTxDelayTimerHandler+0x50>
    SYS_TimerStart(timer);
    156e:	c7 01       	movw	r24, r14
    1570:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <SYS_TimerStart>
}
    1574:	cf 91       	pop	r28
    1576:	1f 91       	pop	r17
    1578:	0f 91       	pop	r16
    157a:	ff 90       	pop	r15
    157c:	ef 90       	pop	r14
    157e:	08 95       	ret

00001580 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    1580:	ef 92       	push	r14
    1582:	ff 92       	push	r15
    1584:	0f 93       	push	r16
    1586:	1f 93       	push	r17
    1588:	cf 93       	push	r28
    158a:	df 93       	push	r29
    158c:	7c 01       	movw	r14, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    158e:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    1590:	80 e0       	ldi	r24, 0x00	; 0
    1592:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    1594:	01 e0       	ldi	r16, 0x01	; 1

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    1596:	d7 e1       	ldi	r29, 0x17	; 23
  frame->tx.status = status;
    1598:	c0 e1       	ldi	r28, 0x10	; 16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    159a:	16 c0       	rjmp	.+44     	; 0x15c8 <nwkTxAckWaitTimerHandler+0x48>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    159c:	fc 01       	movw	r30, r24
    159e:	20 81       	ld	r18, Z
    15a0:	26 31       	cpi	r18, 0x16	; 22
    15a2:	91 f4       	brne	.+36     	; 0x15c8 <nwkTxAckWaitTimerHandler+0x48>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    15a4:	ec 57       	subi	r30, 0x7C	; 124
    15a6:	ff 4f       	sbci	r31, 0xFF	; 255
    15a8:	20 81       	ld	r18, Z
    15aa:	31 81       	ldd	r19, Z+1	; 0x01
    15ac:	21 50       	subi	r18, 0x01	; 1
    15ae:	31 09       	sbc	r19, r1
    15b0:	31 83       	std	Z+1, r19	; 0x01
    15b2:	20 83       	st	Z, r18
    15b4:	23 2b       	or	r18, r19
    15b6:	39 f4       	brne	.+14     	; 0x15c6 <nwkTxAckWaitTimerHandler+0x46>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    15b8:	fc 01       	movw	r30, r24
    15ba:	d0 83       	st	Z, r29
  frame->tx.status = status;
    15bc:	ed 57       	subi	r30, 0x7D	; 125
    15be:	ff 4f       	sbci	r31, 0xFF	; 255
    15c0:	c0 83       	st	Z, r28

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    15c2:	10 2f       	mov	r17, r16
    15c4:	01 c0       	rjmp	.+2      	; 0x15c8 <nwkTxAckWaitTimerHandler+0x48>
    15c6:	10 2f       	mov	r17, r16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    15c8:	0e 94 27 0a 	call	0x144e	; 0x144e <nwkFrameNext>
    15cc:	00 97       	sbiw	r24, 0x00	; 0
    15ce:	31 f7       	brne	.-52     	; 0x159c <nwkTxAckWaitTimerHandler+0x1c>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
    15d0:	11 23       	and	r17, r17
    15d2:	19 f0       	breq	.+6      	; 0x15da <nwkTxAckWaitTimerHandler+0x5a>
    SYS_TimerStart(timer);
    15d4:	c7 01       	movw	r24, r14
    15d6:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <SYS_TimerStart>
}
    15da:	df 91       	pop	r29
    15dc:	cf 91       	pop	r28
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	ff 90       	pop	r15
    15e4:	ef 90       	pop	r14
    15e6:	08 95       	ret

000015e8 <nwkTxInit>:
/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
    15e8:	10 92 e5 08 	sts	0x08E5, r1
    15ec:	10 92 e4 08 	sts	0x08E4, r1

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    15f0:	e7 ed       	ldi	r30, 0xD7	; 215
    15f2:	f8 e0       	ldi	r31, 0x08	; 8
    15f4:	82 e3       	ldi	r24, 0x32	; 50
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	a0 e0       	ldi	r26, 0x00	; 0
    15fa:	b0 e0       	ldi	r27, 0x00	; 0
    15fc:	86 83       	std	Z+6, r24	; 0x06
    15fe:	97 83       	std	Z+7, r25	; 0x07
    1600:	a0 87       	std	Z+8, r26	; 0x08
    1602:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1604:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    1606:	80 ec       	ldi	r24, 0xC0	; 192
    1608:	9a e0       	ldi	r25, 0x0A	; 10
    160a:	94 87       	std	Z+12, r25	; 0x0c
    160c:	83 87       	std	Z+11, r24	; 0x0b

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    160e:	ea ec       	ldi	r30, 0xCA	; 202
    1610:	f8 e0       	ldi	r31, 0x08	; 8
    1612:	8a e0       	ldi	r24, 0x0A	; 10
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	a0 e0       	ldi	r26, 0x00	; 0
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	86 83       	std	Z+6, r24	; 0x06
    161c:	97 83       	std	Z+7, r25	; 0x07
    161e:	a0 87       	std	Z+8, r26	; 0x08
    1620:	b1 87       	std	Z+9, r27	; 0x09
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1622:	12 86       	std	Z+10, r1	; 0x0a
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    1624:	82 e9       	ldi	r24, 0x92	; 146
    1626:	9a e0       	ldi	r25, 0x0A	; 10
    1628:	94 87       	std	Z+12, r25	; 0x0c
    162a:	83 87       	std	Z+11, r24	; 0x0b
    162c:	08 95       	ret

0000162e <nwkTxAckReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    162e:	cf 93       	push	r28
    1630:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    1632:	fc 01       	movw	r30, r24
    1634:	c7 81       	ldd	r28, Z+7	; 0x07
    1636:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    1638:	81 85       	ldd	r24, Z+9	; 0x09
    163a:	83 30       	cpi	r24, 0x03	; 3
    163c:	c9 f4       	brne	.+50     	; 0x1670 <nwkTxAckReceived+0x42>
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	10 c0       	rjmp	.+32     	; 0x1664 <nwkTxAckReceived+0x36>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
    1644:	fc 01       	movw	r30, r24
    1646:	20 81       	ld	r18, Z
    1648:	26 31       	cpi	r18, 0x16	; 22
    164a:	61 f4       	brne	.+24     	; 0x1664 <nwkTxAckReceived+0x36>
    164c:	34 85       	ldd	r19, Z+12	; 0x0c
    164e:	29 81       	ldd	r18, Y+1	; 0x01
    1650:	32 13       	cpse	r19, r18
    1652:	08 c0       	rjmp	.+16     	; 0x1664 <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    1654:	27 e1       	ldi	r18, 0x17	; 23
    1656:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    1658:	2a 81       	ldd	r18, Y+2	; 0x02
    165a:	ea 57       	subi	r30, 0x7A	; 122
    165c:	ff 4f       	sbci	r31, 0xFF	; 255
    165e:	20 83       	st	Z, r18
      return true;
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	07 c0       	rjmp	.+14     	; 0x1672 <nwkTxAckReceived+0x44>
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
    1664:	0e 94 27 0a 	call	0x144e	; 0x144e <nwkFrameNext>
    1668:	00 97       	sbiw	r24, 0x00	; 0
    166a:	61 f7       	brne	.-40     	; 0x1644 <nwkTxAckReceived+0x16>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
    166c:	80 e0       	ldi	r24, 0x00	; 0
    166e:	01 c0       	rjmp	.+2      	; 0x1672 <nwkTxAckReceived+0x44>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
    1670:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	08 95       	ret

00001678 <phyTrxSetState>:

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
  TRX_STATE_REG = TRX_CMD_FORCE_TRX_OFF;
    1678:	93 e0       	ldi	r25, 0x03	; 3
    167a:	90 93 42 01 	sts	0x0142, r25
  while (TRX_STATUS_TRX_OFF != TRX_STATUS_REG_s.trxStatus);
    167e:	e1 e4       	ldi	r30, 0x41	; 65
    1680:	f1 e0       	ldi	r31, 0x01	; 1
    1682:	90 81       	ld	r25, Z
    1684:	9f 71       	andi	r25, 0x1F	; 31
    1686:	98 30       	cpi	r25, 0x08	; 8
    1688:	e1 f7       	brne	.-8      	; 0x1682 <phyTrxSetState+0xa>

  TRX_STATE_REG = state;
    168a:	80 93 42 01 	sts	0x0142, r24
  while (state != TRX_STATUS_REG_s.trxStatus);
    168e:	e1 e4       	ldi	r30, 0x41	; 65
    1690:	f1 e0       	ldi	r31, 0x01	; 1
    1692:	90 81       	ld	r25, Z
    1694:	9f 71       	andi	r25, 0x1F	; 31
    1696:	98 13       	cpse	r25, r24
    1698:	fc cf       	rjmp	.-8      	; 0x1692 <phyTrxSetState+0x1a>
}
    169a:	08 95       	ret

0000169c <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
    169c:	e9 e3       	ldi	r30, 0x39	; 57
    169e:	f1 e0       	ldi	r31, 0x01	; 1
    16a0:	80 81       	ld	r24, Z
    16a2:	81 60       	ori	r24, 0x01	; 1
    16a4:	80 83       	st	Z, r24

  phyRxState = false;
    16a6:	10 92 e7 08 	sts	0x08E7, r1
  phyBand = 0;
    16aa:	10 92 e6 08 	sts	0x08E6, r1
  phyState = PHY_STATE_IDLE;
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	80 93 e8 08 	sts	0x08E8, r24

  phyTrxSetState(TRX_CMD_TRX_OFF);
    16b4:	88 e0       	ldi	r24, 0x08	; 8
    16b6:	0e 94 3c 0b 	call	0x1678	; 0x1678 <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
    16ba:	8b ee       	ldi	r24, 0xEB	; 235
    16bc:	80 93 56 01 	sts	0x0156, r24

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
    16c0:	ec e4       	ldi	r30, 0x4C	; 76
    16c2:	f1 e0       	ldi	r31, 0x01	; 1
    16c4:	80 81       	ld	r24, Z
    16c6:	80 68       	ori	r24, 0x80	; 128
    16c8:	80 83       	st	Z, r24
    16ca:	08 95       	ret

000016cc <sensor_handler>:

/*************************************************************************//**
  @brief sensor_handler function to decide the execution logic of a sensor according to its state, return 1 if it has some borrow time 
*****************************************************************************/
int sensor_handler( struct event *p )
{
    16cc:	0f 93       	push	r16
    16ce:	1f 93       	push	r17
    16d0:	cf 93       	push	r28
    16d2:	df 93       	push	r29
    16d4:	ec 01       	movw	r28, r24
	int retNum;
	int data = 0;
	BaseSensor *sp;
	/* sanity check */
	if( p == EV_NULL )
    16d6:	89 2b       	or	r24, r25
    16d8:	59 f4       	brne	.+22     	; 0x16f0 <sensor_handler+0x24>
	{
		#ifdef DEBUG
		printf("Null Event Error !!!");
    16da:	82 ee       	ldi	r24, 0xE2	; 226
    16dc:	92 e0       	ldi	r25, 0x02	; 2
    16de:	9f 93       	push	r25
    16e0:	8f 93       	push	r24
    16e2:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <printf>
		#endif
		return 0;
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	80 e0       	ldi	r24, 0x00	; 0
    16ec:	90 e0       	ldi	r25, 0x00	; 0
    16ee:	6a c0       	rjmp	.+212    	; 0x17c4 <sensor_handler+0xf8>
	}
	sp = ( BaseSensor * )( p->sp );
    16f0:	0a 85       	ldd	r16, Y+10	; 0x0a
    16f2:	1b 85       	ldd	r17, Y+11	; 0x0b

	#ifdef DEBUG
	// printf("cur_state = %d\n", p->cur_state);
	#endif
	switch( p->cur_state )
    16f4:	9a 89       	ldd	r25, Y+18	; 0x12
    16f6:	91 30       	cpi	r25, 0x01	; 1
    16f8:	a9 f0       	breq	.+42     	; 0x1724 <sensor_handler+0x58>
    16fa:	38 f0       	brcs	.+14     	; 0x170a <sensor_handler+0x3e>
    16fc:	92 30       	cpi	r25, 0x02	; 2
    16fe:	09 f4       	brne	.+2      	; 0x1702 <sensor_handler+0x36>
    1700:	48 c0       	rjmp	.+144    	; 0x1792 <sensor_handler+0xc6>
    1702:	94 30       	cpi	r25, 0x04	; 4
    1704:	09 f4       	brne	.+2      	; 0x1708 <sensor_handler+0x3c>
    1706:	54 c0       	rjmp	.+168    	; 0x17b0 <sensor_handler+0xe4>
    1708:	5b c0       	rjmp	.+182    	; 0x17c0 <sensor_handler+0xf4>
	{
		/* New : init first, if retNum is not 0 goto Oops state */
		case New :
		// the way to call init() is different than most other functions, since it is virtual function in BaseDevice .
		retNum = sp->abstract.device_vt->init( &(sp->abstract) );
    170a:	d8 01       	movw	r26, r16
    170c:	ed 91       	ld	r30, X+
    170e:	fc 91       	ld	r31, X
    1710:	02 80       	ldd	r0, Z+2	; 0x02
    1712:	f3 81       	ldd	r31, Z+3	; 0x03
    1714:	e0 2d       	mov	r30, r0
    1716:	c8 01       	movw	r24, r16
    1718:	09 95       	icall
		if(retNum != 0)
		{
			p->cur_state = Oops;
		}
		p->cur_state = Ready;
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	8a 8b       	std	Y+18, r24	; 0x12
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    171e:	80 e0       	ldi	r24, 0x00	; 0
    1720:	90 e0       	ldi	r25, 0x00	; 0
		if(retNum != 0)
		{
			p->cur_state = Oops;
		}
		p->cur_state = Ready;
		break;
    1722:	50 c0       	rjmp	.+160    	; 0x17c4 <sensor_handler+0xf8>
		
		
		
		/* Ready : ready to activate collection request, if retNum is not 0 goto Oops state */
		case Ready :
		retNum = sp->vmt->Request(p->sp);
    1724:	d8 01       	movw	r26, r16
    1726:	1c 96       	adiw	r26, 0x0c	; 12
    1728:	ed 91       	ld	r30, X+
    172a:	fc 91       	ld	r31, X
    172c:	1d 97       	sbiw	r26, 0x0d	; 13
    172e:	04 80       	ldd	r0, Z+4	; 0x04
    1730:	f5 81       	ldd	r31, Z+5	; 0x05
    1732:	e0 2d       	mov	r30, r0
    1734:	c8 01       	movw	r24, r16
    1736:	09 95       	icall
		if ( retNum == -1 )
    1738:	8f 3f       	cpi	r24, 0xFF	; 255
    173a:	bf ef       	ldi	r27, 0xFF	; 255
    173c:	9b 07       	cpc	r25, r27
    173e:	29 f4       	brne	.+10     	; 0x174a <sensor_handler+0x7e>
		{
			p->cur_state = Oops;
    1740:	84 e0       	ldi	r24, 0x04	; 4
    1742:	8a 8b       	std	Y+18, r24	; 0x12
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	3d c0       	rjmp	.+122    	; 0x17c4 <sensor_handler+0xf8>
		retNum = sp->vmt->Request(p->sp);
		if ( retNum == -1 )
		{
			p->cur_state = Oops;
		}
		else if( retNum == 0 )
    174a:	00 97       	sbiw	r24, 0x00	; 0
    174c:	81 f4       	brne	.+32     	; 0x176e <sensor_handler+0xa2>
		{
			p->cur_state = Ready;
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	8a 8b       	std	Y+18, r24	; 0x12
			data = sp->vmt->Collect(p->sp);
    1752:	d8 01       	movw	r26, r16
    1754:	1c 96       	adiw	r26, 0x0c	; 12
    1756:	ed 91       	ld	r30, X+
    1758:	fc 91       	ld	r31, X
    175a:	1d 97       	sbiw	r26, 0x0d	; 13
    175c:	06 80       	ldd	r0, Z+6	; 0x06
    175e:	f7 81       	ldd	r31, Z+7	; 0x07
    1760:	e0 2d       	mov	r30, r0
    1762:	8a 85       	ldd	r24, Y+10	; 0x0a
    1764:	9b 85       	ldd	r25, Y+11	; 0x0b
    1766:	09 95       	icall
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    1768:	80 e0       	ldi	r24, 0x00	; 0
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	2b c0       	rjmp	.+86     	; 0x17c4 <sensor_handler+0xf8>
			// printf("data : %d\n", data);
			// #endif
		}
		else
		{
			p->cur_state = Running;
    176e:	22 e0       	ldi	r18, 0x02	; 2
    1770:	2a 8b       	std	Y+18, r18	; 0x12
			p->timeout = retNum;
    1772:	9d 83       	std	Y+5, r25	; 0x05
    1774:	8c 83       	std	Y+4, r24	; 0x04
			p->borrow_timeout = retNum;
    1776:	99 87       	std	Y+9, r25	; 0x09
    1778:	88 87       	std	Y+8, r24	; 0x08
			LL_POP( timeoutq );
    177a:	80 91 67 0a 	lds	r24, 0x0A67
    177e:	90 91 68 0a 	lds	r25, 0x0A68
    1782:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <ll_pop>
			insert_timeoutq_event( p );
    1786:	ce 01       	movw	r24, r28
    1788:	0e 94 81 0c 	call	0x1902	; 0x1902 <insert_timeoutq_event>
			return 1;
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	19 c0       	rjmp	.+50     	; 0x17c4 <sensor_handler+0xf8>
		
		
		/* Running : ready to pull data right away */
		case Running :
		//      data = p->sp->vmt->Collect();
		p->cur_state = Ready;
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	8a 8b       	std	Y+18, r24	; 0x12
		p->sp->vmt->Collect(p->sp);
    1796:	d8 01       	movw	r26, r16
    1798:	1c 96       	adiw	r26, 0x0c	; 12
    179a:	ed 91       	ld	r30, X+
    179c:	fc 91       	ld	r31, X
    179e:	1d 97       	sbiw	r26, 0x0d	; 13
    17a0:	06 80       	ldd	r0, Z+6	; 0x06
    17a2:	f7 81       	ldd	r31, Z+7	; 0x07
    17a4:	e0 2d       	mov	r30, r0
    17a6:	c8 01       	movw	r24, r16
    17a8:	09 95       	icall
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
	}
	return 0;
    17aa:	80 e0       	ldi	r24, 0x00	; 0
    17ac:	90 e0       	ldi	r25, 0x00	; 0
		/* Running : ready to pull data right away */
		case Running :
		//      data = p->sp->vmt->Collect();
		p->cur_state = Ready;
		p->sp->vmt->Collect(p->sp);
		break;
    17ae:	0a c0       	rjmp	.+20     	; 0x17c4 <sensor_handler+0xf8>
		
		/* Oops : when some errors occur */
		case Oops :
		/* TODO : ( we may want to do something in reset function and ) re-init by setting the state to new */
#ifdef DEBUG
		      printf("Something really wrong happens\n");
    17b0:	87 ef       	ldi	r24, 0xF7	; 247
    17b2:	92 e0       	ldi	r25, 0x02	; 2
    17b4:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <puts>
#endif
		p->cur_state = New;
    17b8:	1a 8a       	std	Y+18, r1	; 0x12
		break;
	}
	return 0;
    17ba:	80 e0       	ldi	r24, 0x00	; 0
    17bc:	90 e0       	ldi	r25, 0x00	; 0
		/* TODO : ( we may want to do something in reset function and ) re-init by setting the state to new */
#ifdef DEBUG
		      printf("Something really wrong happens\n");
#endif
		p->cur_state = New;
		break;
    17be:	02 c0       	rjmp	.+4      	; 0x17c4 <sensor_handler+0xf8>
	}
	return 0;
    17c0:	80 e0       	ldi	r24, 0x00	; 0
    17c2:	90 e0       	ldi	r25, 0x00	; 0
	// printf(" run :\n\t");
	// p->sp->vmt->MyPrint(p->sp);

}
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	1f 91       	pop	r17
    17ca:	0f 91       	pop	r16
    17cc:	08 95       	ret

000017ce <device_handler>:
 */
/*************************************************************************//**
  @brief device_handler function to decide the execution logic of a non-sensor device according to its state.
*****************************************************************************/
int device_handler( struct event *p )
{
    17ce:	0f 93       	push	r16
    17d0:	1f 93       	push	r17
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	fc 01       	movw	r30, r24
	int retNum;
	BaseDevice * bdp = (BaseDevice *) ( p->load_p );
    17d8:	c4 85       	ldd	r28, Z+12	; 0x0c
    17da:	d5 85       	ldd	r29, Z+13	; 0x0d
	LoadDataDevice *ldp = (LoadDataDevice*) ( p->load_p );
	DemoStorageDevice *ddp = (DemoStorageDevice*) ( p->store_p );
    17dc:	06 85       	ldd	r16, Z+14	; 0x0e
    17de:	17 85       	ldd	r17, Z+15	; 0x0f

	/* sanity check */
	if( p == EV_NULL )
    17e0:	89 2b       	or	r24, r25
    17e2:	29 f4       	brne	.+10     	; 0x17ee <device_handler+0x20>
	{
		#ifdef DEBUG
		printf("Null Event Error !!!\n");
    17e4:	82 ee       	ldi	r24, 0xE2	; 226
    17e6:	92 e0       	ldi	r25, 0x02	; 2
    17e8:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <puts>
		#endif
		return 0;
    17ec:	35 c0       	rjmp	.+106    	; 0x1858 <device_handler+0x8a>
	}
	
	switch( p->cur_state )
    17ee:	92 89       	ldd	r25, Z+18	; 0x12
    17f0:	99 23       	and	r25, r25
    17f2:	19 f0       	breq	.+6      	; 0x17fa <device_handler+0x2c>
    17f4:	91 30       	cpi	r25, 0x01	; 1
    17f6:	21 f0       	breq	.+8      	; 0x1800 <device_handler+0x32>
    17f8:	2f c0       	rjmp	.+94     	; 0x1858 <device_handler+0x8a>
	{
		/* New : init first, if retNum is not 0 goto Oops state */
		case New :
			p->cur_state = Ready;
    17fa:	81 e0       	ldi	r24, 0x01	; 1
    17fc:	82 8b       	std	Z+18, r24	; 0x12
			break;
    17fe:	2c c0       	rjmp	.+88     	; 0x1858 <device_handler+0x8a>
		case Ready :
			p->cur_state = Ready;
			if( bdp->device_vt->getType(bdp) == TYPE_DEVICE )
    1800:	e8 81       	ld	r30, Y
    1802:	f9 81       	ldd	r31, Y+1	; 0x01
    1804:	06 80       	ldd	r0, Z+6	; 0x06
    1806:	f7 81       	ldd	r31, Z+7	; 0x07
    1808:	e0 2d       	mov	r30, r0
    180a:	ce 01       	movw	r24, r28
    180c:	09 95       	icall
    180e:	05 97       	sbiw	r24, 0x05	; 5
    1810:	81 f4       	brne	.+32     	; 0x1832 <device_handler+0x64>
			{
				printf("Load Device\n");
    1812:	86 e1       	ldi	r24, 0x16	; 22
    1814:	93 e0       	ldi	r25, 0x03	; 3
    1816:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <puts>
				ldp->vmt->Execute(ldp);
    181a:	ea 81       	ldd	r30, Y+2	; 0x02
    181c:	fb 81       	ldd	r31, Y+3	; 0x03
    181e:	02 80       	ldd	r0, Z+2	; 0x02
    1820:	f3 81       	ldd	r31, Z+3	; 0x03
    1822:	e0 2d       	mov	r30, r0
    1824:	ce 01       	movw	r24, r28
    1826:	09 95       	icall
				printf("Load Device Finish\n");
    1828:	82 e2       	ldi	r24, 0x22	; 34
    182a:	93 e0       	ldi	r25, 0x03	; 3
    182c:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <puts>
    1830:	13 c0       	rjmp	.+38     	; 0x1858 <device_handler+0x8a>
			}	
			else if( bdp->device_vt->getType(bdp) == TYPE_STORAGE_DEVICE )
    1832:	e8 81       	ld	r30, Y
    1834:	f9 81       	ldd	r31, Y+1	; 0x01
    1836:	06 80       	ldd	r0, Z+6	; 0x06
    1838:	f7 81       	ldd	r31, Z+7	; 0x07
    183a:	e0 2d       	mov	r30, r0
    183c:	ce 01       	movw	r24, r28
    183e:	09 95       	icall
    1840:	04 97       	sbiw	r24, 0x04	; 4
    1842:	51 f4       	brne	.+20     	; 0x1858 <device_handler+0x8a>
			{
				ddp->vmt->Execute(ddp);
    1844:	d8 01       	movw	r26, r16
    1846:	12 96       	adiw	r26, 0x02	; 2
    1848:	ed 91       	ld	r30, X+
    184a:	fc 91       	ld	r31, X
    184c:	13 97       	sbiw	r26, 0x03	; 3
    184e:	02 80       	ldd	r0, Z+2	; 0x02
    1850:	f3 81       	ldd	r31, Z+3	; 0x03
    1852:	e0 2d       	mov	r30, r0
    1854:	c8 01       	movw	r24, r16
    1856:	09 95       	icall
			break;
		default :
			break;
	}
	return 0;
}
    1858:	80 e0       	ldi	r24, 0x00	; 0
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	1f 91       	pop	r17
    1862:	0f 91       	pop	r16
    1864:	08 95       	ret

00001866 <init_timeoutq>:

/*************************************************************************//**
  @brief Init function of scheduler, which initialize all events and put them into freelist
*****************************************************************************/
void init_timeoutq()
{
    1866:	0f 93       	push	r16
    1868:	1f 93       	push	r17
    186a:	cf 93       	push	r28
    186c:	df 93       	push	r29
	int i;

	timeoutq = (struct event *)&TQ;
    186e:	e3 e6       	ldi	r30, 0x63	; 99
    1870:	fa e0       	ldi	r31, 0x0A	; 10
    1872:	f0 93 68 0a 	sts	0x0A68, r31
    1876:	e0 93 67 0a 	sts	0x0A67, r30
	LL_INIT(timeoutq);
    187a:	f3 83       	std	Z+3, r31	; 0x03
    187c:	e2 83       	std	Z+2, r30	; 0x02
    187e:	f1 83       	std	Z+1, r31	; 0x01
    1880:	e0 83       	st	Z, r30
	freelist = (struct event *)&FL;
    1882:	eb e6       	ldi	r30, 0x6B	; 107
    1884:	fa e0       	ldi	r31, 0x0A	; 10
    1886:	f0 93 70 0a 	sts	0x0A70, r31
    188a:	e0 93 6f 0a 	sts	0x0A6F, r30
	LL_INIT(freelist);
    188e:	f3 83       	std	Z+3, r31	; 0x03
    1890:	e2 83       	std	Z+2, r30	; 0x02
    1892:	f1 83       	std	Z+1, r31	; 0x01
    1894:	e0 83       	st	Z, r30
    1896:	c3 e1       	ldi	r28, 0x13	; 19
    1898:	d9 e0       	ldi	r29, 0x09	; 9
    189a:	03 e6       	ldi	r16, 0x63	; 99
    189c:	1a e0       	ldi	r17, 0x0A	; 10

	for (i=0; i<MAX_EVENTS; i++) {
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
    189e:	be 01       	movw	r22, r28
    18a0:	80 91 6f 0a 	lds	r24, 0x0A6F
    18a4:	90 91 70 0a 	lds	r25, 0x0A70
    18a8:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <ll_r_insert>
    18ac:	65 96       	adiw	r28, 0x15	; 21
	timeoutq = (struct event *)&TQ;
	LL_INIT(timeoutq);
	freelist = (struct event *)&FL;
	LL_INIT(freelist);

	for (i=0; i<MAX_EVENTS; i++) {
    18ae:	c0 17       	cp	r28, r16
    18b0:	d1 07       	cpc	r29, r17
    18b2:	a9 f7       	brne	.-22     	; 0x189e <init_timeoutq+0x38>
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
	}

	return;
}
    18b4:	df 91       	pop	r29
    18b6:	cf 91       	pop	r28
    18b8:	1f 91       	pop	r17
    18ba:	0f 91       	pop	r16
    18bc:	08 95       	ret

000018be <get_next_interval>:
*****************************************************************************/
int get_next_interval()
{

	int wait_time = MAX_SLEEP_INTERVAL;
	struct event * ev = ( struct event * ) LL_TOP( timeoutq );
    18be:	80 91 67 0a 	lds	r24, 0x0A67
    18c2:	90 91 68 0a 	lds	r25, 0x0A68
    18c6:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <ll_first>
    18ca:	fc 01       	movw	r30, r24

	/* sanity check */
    /* no event in queue */
    /* TODO : to optimize the sleep time or let the CPU sleep or set up some other interrupts */
	if( EV_NULL == ev )
    18cc:	89 2b       	or	r24, r25
    18ce:	59 f4       	brne	.+22     	; 0x18e6 <get_next_interval+0x28>
	{
#ifdef DEBUG
		printf("we may get some memory leakage issue, or something really bad occurs\n");
    18d0:	85 e3       	ldi	r24, 0x35	; 53
    18d2:	93 e0       	ldi	r25, 0x03	; 3
    18d4:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <puts>
		printf("so we are going to take some really sleep, since no event in scheduler\n");
    18d8:	8a e7       	ldi	r24, 0x7A	; 122
    18da:	93 e0       	ldi	r25, 0x03	; 3
    18dc:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <puts>
#endif
	    return wait_time;
    18e0:	80 e4       	ldi	r24, 0x40	; 64
    18e2:	9f e1       	ldi	r25, 0x1F	; 31
    18e4:	08 95       	ret
	}
	
	/* if the next event is nearer */
	if( wait_time > ev->timeout )
    18e6:	84 81       	ldd	r24, Z+4	; 0x04
    18e8:	95 81       	ldd	r25, Z+5	; 0x05
    18ea:	80 34       	cpi	r24, 0x40	; 64
    18ec:	2f e1       	ldi	r18, 0x1F	; 31
    18ee:	92 07       	cpc	r25, r18
    18f0:	3c f0       	brlt	.+14     	; 0x1900 <get_next_interval+0x42>
		wait_time = ev->timeout;
	}
	/* if the next event time is longer, we need to wait it time by time, since currently, the longest waiting time support is 8s */
	else
	{
		ev->timeout = ev->timeout - wait_time;
    18f2:	9c 01       	movw	r18, r24
    18f4:	20 54       	subi	r18, 0x40	; 64
    18f6:	3f 41       	sbci	r19, 0x1F	; 31
    18f8:	35 83       	std	Z+5, r19	; 0x05
    18fa:	24 83       	std	Z+4, r18	; 0x04
  @brief Return the the time ( ms ) of the next event
*****************************************************************************/
int get_next_interval()
{

	int wait_time = MAX_SLEEP_INTERVAL;
    18fc:	80 e4       	ldi	r24, 0x40	; 64
    18fe:	9f e1       	ldi	r25, 0x1F	; 31
	else
	{
		ev->timeout = ev->timeout - wait_time;
	}
	return wait_time;
}
    1900:	08 95       	ret

00001902 <insert_timeoutq_event>:

/*************************************************************************//**
  @brief Insert a new event into the scheduler according to timeout order
*****************************************************************************/
void insert_timeoutq_event( struct event * ep)
{
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
    1906:	dc 01       	movw	r26, r24
	// Try to insert it according to timeout and timeoutq
	struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
    1908:	c0 91 67 0a 	lds	r28, 0x0A67
    190c:	d0 91 68 0a 	lds	r29, 0x0A68
    1910:	ea 81       	ldd	r30, Y+2	; 0x02
    1912:	fb 81       	ldd	r31, Y+3	; 0x03
    1914:	ce 17       	cp	r28, r30
    1916:	df 07       	cpc	r29, r31
    1918:	09 f1       	breq	.+66     	; 0x195c <insert_timeoutq_event+0x5a>
	{
		if( it != EV_NULL )
    191a:	30 97       	sbiw	r30, 0x00	; 0
    191c:	c9 f0       	breq	.+50     	; 0x1950 <insert_timeoutq_event+0x4e>
		{
			if( ( it->timeout ) > ( ep->timeout ) )
    191e:	44 81       	ldd	r20, Z+4	; 0x04
    1920:	55 81       	ldd	r21, Z+5	; 0x05
    1922:	14 96       	adiw	r26, 0x04	; 4
    1924:	2d 91       	ld	r18, X+
    1926:	3c 91       	ld	r19, X
    1928:	15 97       	sbiw	r26, 0x05	; 5
    192a:	24 17       	cp	r18, r20
    192c:	35 07       	cpc	r19, r21
    192e:	54 f4       	brge	.+20     	; 0x1944 <insert_timeoutq_event+0x42>
			{
				it->timeout -= ep->timeout;
    1930:	42 1b       	sub	r20, r18
    1932:	53 0b       	sbc	r21, r19
    1934:	55 83       	std	Z+5, r21	; 0x05
    1936:	44 83       	std	Z+4, r20	; 0x04
				LL_L_INSERT( it, ep );
    1938:	bd 01       	movw	r22, r26
    193a:	80 81       	ld	r24, Z
    193c:	91 81       	ldd	r25, Z+1	; 0x01
    193e:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <ll_r_insert>
    1942:	15 c0       	rjmp	.+42     	; 0x196e <insert_timeoutq_event+0x6c>
				// printf("left insert \n");
				break;
			}
			else
			{
				ep->timeout -= it->timeout;
    1944:	24 1b       	sub	r18, r20
    1946:	35 0b       	sbc	r19, r21
    1948:	15 96       	adiw	r26, 0x05	; 5
    194a:	3c 93       	st	X, r19
    194c:	2e 93       	st	-X, r18
    194e:	14 97       	sbiw	r26, 0x04	; 4
	// Try to insert it according to timeout and timeoutq
	struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
    1950:	02 80       	ldd	r0, Z+2	; 0x02
    1952:	f3 81       	ldd	r31, Z+3	; 0x03
    1954:	e0 2d       	mov	r30, r0
    1956:	ce 17       	cp	r28, r30
    1958:	df 07       	cpc	r29, r31
    195a:	f9 f6       	brne	.-66     	; 0x191a <insert_timeoutq_event+0x18>
	}
	
	// If not insert it left to the header
	if( is_pushed == 0 )
	{
		LL_APPEND(timeoutq, ep);
    195c:	e0 91 67 0a 	lds	r30, 0x0A67
    1960:	f0 91 68 0a 	lds	r31, 0x0A68
    1964:	bd 01       	movw	r22, r26
    1966:	80 81       	ld	r24, Z
    1968:	91 81       	ldd	r25, Z+1	; 0x01
    196a:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <ll_r_insert>

	#ifdef DEBUG
	// dump_timeoutq();
	#endif

}
    196e:	df 91       	pop	r29
    1970:	cf 91       	pop	r28
    1972:	08 95       	ret

00001974 <load_new_sensor>:

/*************************************************************************//**
  @brief Load a brand new sensor activity into the scheduler's timeoutQ
*****************************************************************************/
int load_new_sensor( int timeout, int repeat, BaseSensor *device_ptr, int otherinfo )
{
    1974:	cf 92       	push	r12
    1976:	df 92       	push	r13
    1978:	ef 92       	push	r14
    197a:	ff 92       	push	r15
    197c:	0f 93       	push	r16
    197e:	1f 93       	push	r17
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	6c 01       	movw	r12, r24
    1986:	7b 01       	movw	r14, r22
    1988:	8a 01       	movw	r16, r20
    198a:	e9 01       	movw	r28, r18

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    198c:	80 91 6f 0a 	lds	r24, 0x0A6F
    1990:	90 91 70 0a 	lds	r25, 0x0A70
    1994:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <ll_pop>
    1998:	fc 01       	movw	r30, r24
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
    199a:	89 2b       	or	r24, r25
    199c:	b1 f0       	breq	.+44     	; 0x19ca <load_new_sensor+0x56>
        return -1;
    ep->timeout = timeout;
    199e:	d5 82       	std	Z+5, r13	; 0x05
    19a0:	c4 82       	std	Z+4, r12	; 0x04
    ep->repeat_interval = repeat;
    19a2:	f7 82       	std	Z+7, r15	; 0x07
    19a4:	e6 82       	std	Z+6, r14	; 0x06
	ep->borrow_timeout = 0;
    19a6:	11 86       	std	Z+9, r1	; 0x09
    19a8:	10 86       	std	Z+8, r1	; 0x08
    ep->sp = device_ptr;
    19aa:	13 87       	std	Z+11, r17	; 0x0b
    19ac:	02 87       	std	Z+10, r16	; 0x0a
    ep->info = otherinfo;
    19ae:	d1 8b       	std	Z+17, r29	; 0x11
    19b0:	c0 8b       	std	Z+16, r28	; 0x10
    ep->cur_state = Ready;
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	82 8b       	std	Z+18, r24	; 0x12
    ep->run = sensor_handler;
    19b6:	86 e6       	ldi	r24, 0x66	; 102
    19b8:	9b e0       	ldi	r25, 0x0B	; 11
    19ba:	94 8b       	std	Z+20, r25	; 0x14
    19bc:	83 8b       	std	Z+19, r24	; 0x13
    insert_timeoutq_event( ep );
    19be:	cf 01       	movw	r24, r30
    19c0:	0e 94 81 0c 	call	0x1902	; 0x1902 <insert_timeoutq_event>
    return 0;
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	02 c0       	rjmp	.+4      	; 0x19ce <load_new_sensor+0x5a>

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
        return -1;
    19ca:	8f ef       	ldi	r24, 0xFF	; 255
    19cc:	9f ef       	ldi	r25, 0xFF	; 255
    ep->info = otherinfo;
    ep->cur_state = Ready;
    ep->run = sensor_handler;
    insert_timeoutq_event( ep );
    return 0;
}
    19ce:	df 91       	pop	r29
    19d0:	cf 91       	pop	r28
    19d2:	1f 91       	pop	r17
    19d4:	0f 91       	pop	r16
    19d6:	ff 90       	pop	r15
    19d8:	ef 90       	pop	r14
    19da:	df 90       	pop	r13
    19dc:	cf 90       	pop	r12
    19de:	08 95       	ret

000019e0 <load_new_device>:

/*************************************************************************//**
  @brief Load a brand new device activity into the scheduler's timeoutQ
*****************************************************************************/
int load_new_device( int timeout, int repeat, BaseDevice *device_ptr, int otherinfo )
{
    19e0:	cf 92       	push	r12
    19e2:	df 92       	push	r13
    19e4:	ef 92       	push	r14
    19e6:	ff 92       	push	r15
    19e8:	0f 93       	push	r16
    19ea:	1f 93       	push	r17
    19ec:	cf 93       	push	r28
    19ee:	df 93       	push	r29
    19f0:	6c 01       	movw	r12, r24
    19f2:	7b 01       	movw	r14, r22
    19f4:	ea 01       	movw	r28, r20
    19f6:	89 01       	movw	r16, r18

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    19f8:	80 91 6f 0a 	lds	r24, 0x0A6F
    19fc:	90 91 70 0a 	lds	r25, 0x0A70
    1a00:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <ll_pop>
    1a04:	fc 01       	movw	r30, r24
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
    1a06:	89 2b       	or	r24, r25
    1a08:	c1 f0       	breq	.+48     	; 0x1a3a <load_new_device+0x5a>
        return -1;
    ep->timeout = timeout;
    1a0a:	d5 82       	std	Z+5, r13	; 0x05
    1a0c:	c4 82       	std	Z+4, r12	; 0x04
    ep->repeat_interval = repeat;
    1a0e:	f7 82       	std	Z+7, r15	; 0x07
    1a10:	e6 82       	std	Z+6, r14	; 0x06
	ep->borrow_timeout = 0;
    1a12:	11 86       	std	Z+9, r1	; 0x09
    1a14:	10 86       	std	Z+8, r1	; 0x08
    ep->load_p = device_ptr;
    1a16:	d5 87       	std	Z+13, r29	; 0x0d
    1a18:	c4 87       	std	Z+12, r28	; 0x0c
	ep->store_p = device_ptr;
    1a1a:	d7 87       	std	Z+15, r29	; 0x0f
    1a1c:	c6 87       	std	Z+14, r28	; 0x0e
    ep->info = otherinfo;
    1a1e:	11 8b       	std	Z+17, r17	; 0x11
    1a20:	00 8b       	std	Z+16, r16	; 0x10
    ep->cur_state = Ready;
    1a22:	81 e0       	ldi	r24, 0x01	; 1
    1a24:	82 8b       	std	Z+18, r24	; 0x12
    ep->run = device_handler;
    1a26:	87 ee       	ldi	r24, 0xE7	; 231
    1a28:	9b e0       	ldi	r25, 0x0B	; 11
    1a2a:	94 8b       	std	Z+20, r25	; 0x14
    1a2c:	83 8b       	std	Z+19, r24	; 0x13
    insert_timeoutq_event( ep );
    1a2e:	cf 01       	movw	r24, r30
    1a30:	0e 94 81 0c 	call	0x1902	; 0x1902 <insert_timeoutq_event>
    return 0;
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <load_new_device+0x5e>

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
        return -1;
    1a3a:	8f ef       	ldi	r24, 0xFF	; 255
    1a3c:	9f ef       	ldi	r25, 0xFF	; 255
    ep->info = otherinfo;
    ep->cur_state = Ready;
    ep->run = device_handler;
    insert_timeoutq_event( ep );
    return 0;
}
    1a3e:	df 91       	pop	r29
    1a40:	cf 91       	pop	r28
    1a42:	1f 91       	pop	r17
    1a44:	0f 91       	pop	r16
    1a46:	ff 90       	pop	r15
    1a48:	ef 90       	pop	r14
    1a4a:	df 90       	pop	r13
    1a4c:	cf 90       	pop	r12
    1a4e:	08 95       	ret

00001a50 <handle_timeoutq_event>:

/*************************************************************************//**
  @brief Handle the next event in timeoutQ: execute the event's handler function according to the device type, re-insert it according to the period, and set a timer of next event.
*****************************************************************************/
int handle_timeoutq_event( )
{
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
	/* assume we get a valid one */
	struct event * ev = (struct event * )LL_TOP( timeoutq );
    1a54:	80 91 67 0a 	lds	r24, 0x0A67
    1a58:	90 91 68 0a 	lds	r25, 0x0A68
    1a5c:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <ll_first>
    1a60:	ec 01       	movw	r28, r24
	if( EV_NULL == ev )
    1a62:	89 2b       	or	r24, r25
    1a64:	39 f4       	brne	.+14     	; 0x1a74 <handle_timeoutq_event+0x24>
	{
		printf("err\n");
    1a66:	81 ec       	ldi	r24, 0xC1	; 193
    1a68:	93 e0       	ldi	r25, 0x03	; 3
    1a6a:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <puts>
        return -1;
    1a6e:	8f ef       	ldi	r24, 0xFF	; 255
    1a70:	9f ef       	ldi	r25, 0xFF	; 255
    1a72:	56 c0       	rjmp	.+172    	; 0x1b20 <handle_timeoutq_event+0xd0>
	}
    
    /* sanity check */
    if( ev->sp == NULL && ev->load_p == NULL && ev->store_p == NULL)
    1a74:	8a 85       	ldd	r24, Y+10	; 0x0a
    1a76:	9b 85       	ldd	r25, Y+11	; 0x0b
    1a78:	89 2b       	or	r24, r25
    1a7a:	49 f4       	brne	.+18     	; 0x1a8e <handle_timeoutq_event+0x3e>
    1a7c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a7e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a80:	89 2b       	or	r24, r25
    1a82:	29 f4       	brne	.+10     	; 0x1a8e <handle_timeoutq_event+0x3e>
    1a84:	8e 85       	ldd	r24, Y+14	; 0x0e
    1a86:	9f 85       	ldd	r25, Y+15	; 0x0f
    1a88:	89 2b       	or	r24, r25
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <handle_timeoutq_event+0x3e>
    1a8c:	47 c0       	rjmp	.+142    	; 0x1b1c <handle_timeoutq_event+0xcc>
        return -1;

	/* retNum may need to be designed in other ways */
    int retNum = ev->run( ev );
    1a8e:	eb 89       	ldd	r30, Y+19	; 0x13
    1a90:	fc 89       	ldd	r31, Y+20	; 0x14
    1a92:	ce 01       	movw	r24, r28
    1a94:	09 95       	icall
	/* 
	 * return 1 if it has to with some borrow time( have a request-time!=0 case ) 
	 * which means the event has already entered the scheduler, 
	 * and won't need to do anything else
	 */
	if( retNum == 1 )
    1a96:	01 97       	sbiw	r24, 0x01	; 1
    1a98:	69 f4       	brne	.+26     	; 0x1ab4 <handle_timeoutq_event+0x64>
	{
		/* judge if the next top in queue has a timeout <= 0, which we may want to handle it right now */
		if( get_next_interval() == 0 )
    1a9a:	0e 94 5f 0c 	call	0x18be	; 0x18be <get_next_interval>
    1a9e:	89 2b       	or	r24, r25
    1aa0:	11 f4       	brne	.+4      	; 0x1aa6 <handle_timeoutq_event+0x56>
			handle_timeoutq_event();
    1aa2:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <handle_timeoutq_event>
			
		set_timer(get_next_interval());
    1aa6:	0e 94 5f 0c 	call	0x18be	; 0x18be <get_next_interval>
    1aaa:	0e 94 6f 08 	call	0x10de	; 0x10de <set_timer>
		return 0;
    1aae:	80 e0       	ldi	r24, 0x00	; 0
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	36 c0       	rjmp	.+108    	; 0x1b20 <handle_timeoutq_event+0xd0>
    /*
	 * return 0 means we just fired a case, 
	 * and may need to judge it over the repeat time to re-insert into the scheduler,
	 * since we definitely want to collect data periodically
	 */
    LL_POP( timeoutq );
    1ab4:	80 91 67 0a 	lds	r24, 0x0A67
    1ab8:	90 91 68 0a 	lds	r25, 0x0A68
    1abc:	0e 94 87 0e 	call	0x1d0e	; 0x1d0e <ll_pop>
    if( ev->repeat_interval != 0 )
    1ac0:	8e 81       	ldd	r24, Y+6	; 0x06
    1ac2:	9f 81       	ldd	r25, Y+7	; 0x07
    1ac4:	00 97       	sbiw	r24, 0x00	; 0
    1ac6:	b1 f0       	breq	.+44     	; 0x1af4 <handle_timeoutq_event+0xa4>
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
    1ac8:	28 85       	ldd	r18, Y+8	; 0x08
    1aca:	39 85       	ldd	r19, Y+9	; 0x09
    1acc:	ac 01       	movw	r20, r24
    1ace:	42 1b       	sub	r20, r18
    1ad0:	53 0b       	sbc	r21, r19
    1ad2:	9a 01       	movw	r18, r20
    1ad4:	5d 83       	std	Y+5, r21	; 0x05
    1ad6:	4c 83       	std	Y+4, r20	; 0x04
		while( ev->timeout < 0 )
    1ad8:	55 23       	and	r21, r21
    1ada:	34 f4       	brge	.+12     	; 0x1ae8 <handle_timeoutq_event+0x98>
		{
			ev->timeout += ev->repeat_interval;
    1adc:	28 0f       	add	r18, r24
    1ade:	39 1f       	adc	r19, r25
	 */
    LL_POP( timeoutq );
    if( ev->repeat_interval != 0 )
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
		while( ev->timeout < 0 )
    1ae0:	33 23       	and	r19, r19
    1ae2:	e4 f3       	brlt	.-8      	; 0x1adc <handle_timeoutq_event+0x8c>
    1ae4:	3d 83       	std	Y+5, r19	; 0x05
    1ae6:	2c 83       	std	Y+4, r18	; 0x04
		{
			ev->timeout += ev->repeat_interval;
		}
		ev->borrow_timeout = 0;
    1ae8:	19 86       	std	Y+9, r1	; 0x09
    1aea:	18 86       	std	Y+8, r1	; 0x08
        insert_timeoutq_event( ev );
    1aec:	ce 01       	movw	r24, r28
    1aee:	0e 94 81 0c 	call	0x1902	; 0x1902 <insert_timeoutq_event>
    1af2:	07 c0       	rjmp	.+14     	; 0x1b02 <handle_timeoutq_event+0xb2>
    }
    else
    {
        LL_PUSH( freelist, ev );
    1af4:	be 01       	movw	r22, r28
    1af6:	80 91 6f 0a 	lds	r24, 0x0A6F
    1afa:	90 91 70 0a 	lds	r25, 0x0A70
    1afe:	0e 94 51 0e 	call	0x1ca2	; 0x1ca2 <ll_r_insert>
    }

	
	/* judge if the next top in queue has a timeout <= 0, which we may want to handle it right now */
	if( get_next_interval() == 0 )
    1b02:	0e 94 5f 0c 	call	0x18be	; 0x18be <get_next_interval>
    1b06:	89 2b       	or	r24, r25
    1b08:	11 f4       	brne	.+4      	; 0x1b0e <handle_timeoutq_event+0xbe>
		handle_timeoutq_event();
    1b0a:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <handle_timeoutq_event>
		
	set_timer(get_next_interval());
    1b0e:	0e 94 5f 0c 	call	0x18be	; 0x18be <get_next_interval>
    1b12:	0e 94 6f 08 	call	0x10de	; 0x10de <set_timer>
    return 0;
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <handle_timeoutq_event+0xd0>
        return -1;
	}
    
    /* sanity check */
    if( ev->sp == NULL && ev->load_p == NULL && ev->store_p == NULL)
        return -1;
    1b1c:	8f ef       	ldi	r24, 0xFF	; 255
    1b1e:	9f ef       	ldi	r25, 0xFF	; 255
	if( get_next_interval() == 0 )
		handle_timeoutq_event();
		
	set_timer(get_next_interval());
    return 0;
}
    1b20:	df 91       	pop	r29
    1b22:	cf 91       	pop	r28
    1b24:	08 95       	ret

00001b26 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    1b26:	0e 94 b9 09 	call	0x1372	; 0x1372 <HAL_Init>
  SYS_TimerInit();
    1b2a:	0e 94 00 0e 	call	0x1c00	; 0x1c00 <SYS_TimerInit>
  PHY_Init();
    1b2e:	0e 94 4e 0b 	call	0x169c	; 0x169c <PHY_Init>
  NWK_Init();
    1b32:	0e 94 f4 09 	call	0x13e8	; 0x13e8 <NWK_Init>
    1b36:	08 95       	ret

00001b38 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    1b38:	0f 93       	push	r16
    1b3a:	1f 93       	push	r17
    1b3c:	cf 93       	push	r28
    1b3e:	df 93       	push	r29
    1b40:	ec 01       	movw	r28, r24
  if (timers)
    1b42:	80 91 e9 08 	lds	r24, 0x08E9
    1b46:	90 91 ea 08 	lds	r25, 0x08EA
    1b4a:	00 97       	sbiw	r24, 0x00	; 0
    1b4c:	09 f4       	brne	.+2      	; 0x1b50 <placeTimer+0x18>
    1b4e:	45 c0       	rjmp	.+138    	; 0x1bda <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    1b50:	4e 81       	ldd	r20, Y+6	; 0x06
    1b52:	5f 81       	ldd	r21, Y+7	; 0x07
    1b54:	68 85       	ldd	r22, Y+8	; 0x08
    1b56:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    1b58:	fc 01       	movw	r30, r24
    1b5a:	02 81       	ldd	r16, Z+2	; 0x02
    1b5c:	13 81       	ldd	r17, Z+3	; 0x03
    1b5e:	24 81       	ldd	r18, Z+4	; 0x04
    1b60:	35 81       	ldd	r19, Z+5	; 0x05
    1b62:	40 17       	cp	r20, r16
    1b64:	51 07       	cpc	r21, r17
    1b66:	62 07       	cpc	r22, r18
    1b68:	73 07       	cpc	r23, r19
    1b6a:	60 f0       	brcs	.+24     	; 0x1b84 <placeTimer+0x4c>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	17 c0       	rjmp	.+46     	; 0x1b9e <placeTimer+0x66>
    1b70:	02 81       	ldd	r16, Z+2	; 0x02
    1b72:	13 81       	ldd	r17, Z+3	; 0x03
    1b74:	24 81       	ldd	r18, Z+4	; 0x04
    1b76:	35 81       	ldd	r19, Z+5	; 0x05
    1b78:	40 17       	cp	r20, r16
    1b7a:	51 07       	cpc	r21, r17
    1b7c:	62 07       	cpc	r22, r18
    1b7e:	73 07       	cpc	r23, r19
    1b80:	68 f4       	brcc	.+26     	; 0x1b9c <placeTimer+0x64>
    1b82:	03 c0       	rjmp	.+6      	; 0x1b8a <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1b84:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    1b86:	a0 e0       	ldi	r26, 0x00	; 0
    1b88:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    1b8a:	04 1b       	sub	r16, r20
    1b8c:	15 0b       	sbc	r17, r21
    1b8e:	26 0b       	sbc	r18, r22
    1b90:	37 0b       	sbc	r19, r23
    1b92:	02 83       	std	Z+2, r16	; 0x02
    1b94:	13 83       	std	Z+3, r17	; 0x03
    1b96:	24 83       	std	Z+4, r18	; 0x04
    1b98:	35 83       	std	Z+5, r19	; 0x05
         break;
    1b9a:	0a c0       	rjmp	.+20     	; 0x1bb0 <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1b9c:	df 01       	movw	r26, r30
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    1b9e:	40 1b       	sub	r20, r16
    1ba0:	51 0b       	sbc	r21, r17
    1ba2:	62 0b       	sbc	r22, r18
    1ba4:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    1ba6:	ed 91       	ld	r30, X+
    1ba8:	fc 91       	ld	r31, X
    1baa:	11 97       	sbiw	r26, 0x01	; 1
    1bac:	30 97       	sbiw	r30, 0x00	; 0
    1bae:	01 f7       	brne	.-64     	; 0x1b70 <placeTimer+0x38>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    1bb0:	4a 83       	std	Y+2, r20	; 0x02
    1bb2:	5b 83       	std	Y+3, r21	; 0x03
    1bb4:	6c 83       	std	Y+4, r22	; 0x04
    1bb6:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    1bb8:	10 97       	sbiw	r26, 0x00	; 0
    1bba:	41 f0       	breq	.+16     	; 0x1bcc <placeTimer+0x94>
    {
      timer->next = prev->next;
    1bbc:	8d 91       	ld	r24, X+
    1bbe:	9c 91       	ld	r25, X
    1bc0:	11 97       	sbiw	r26, 0x01	; 1
    1bc2:	99 83       	std	Y+1, r25	; 0x01
    1bc4:	88 83       	st	Y, r24
      prev->next = timer;
    1bc6:	cd 93       	st	X+, r28
    1bc8:	dc 93       	st	X, r29
    1bca:	15 c0       	rjmp	.+42     	; 0x1bf6 <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    1bcc:	99 83       	std	Y+1, r25	; 0x01
    1bce:	88 83       	st	Y, r24
      timers = timer;
    1bd0:	d0 93 ea 08 	sts	0x08EA, r29
    1bd4:	c0 93 e9 08 	sts	0x08E9, r28
    1bd8:	0e c0       	rjmp	.+28     	; 0x1bf6 <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    1bda:	19 82       	std	Y+1, r1	; 0x01
    1bdc:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    1bde:	8e 81       	ldd	r24, Y+6	; 0x06
    1be0:	9f 81       	ldd	r25, Y+7	; 0x07
    1be2:	a8 85       	ldd	r26, Y+8	; 0x08
    1be4:	b9 85       	ldd	r27, Y+9	; 0x09
    1be6:	8a 83       	std	Y+2, r24	; 0x02
    1be8:	9b 83       	std	Y+3, r25	; 0x03
    1bea:	ac 83       	std	Y+4, r26	; 0x04
    1bec:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    1bee:	d0 93 ea 08 	sts	0x08EA, r29
    1bf2:	c0 93 e9 08 	sts	0x08E9, r28
  }
}
    1bf6:	df 91       	pop	r29
    1bf8:	cf 91       	pop	r28
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	08 95       	ret

00001c00 <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    1c00:	10 92 ea 08 	sts	0x08EA, r1
    1c04:	10 92 e9 08 	sts	0x08E9, r1
    1c08:	08 95       	ret

00001c0a <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1c0a:	e0 91 e9 08 	lds	r30, 0x08E9
    1c0e:	f0 91 ea 08 	lds	r31, 0x08EA
    1c12:	30 97       	sbiw	r30, 0x00	; 0
    1c14:	71 f0       	breq	.+28     	; 0x1c32 <SYS_TimerStarted+0x28>
    if (t == timer)
    1c16:	e8 17       	cp	r30, r24
    1c18:	f9 07       	cpc	r31, r25
    1c1a:	21 f4       	brne	.+8      	; 0x1c24 <SYS_TimerStarted+0x1a>
    1c1c:	0c c0       	rjmp	.+24     	; 0x1c36 <SYS_TimerStarted+0x2c>
    1c1e:	8e 17       	cp	r24, r30
    1c20:	9f 07       	cpc	r25, r31
    1c22:	59 f0       	breq	.+22     	; 0x1c3a <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1c24:	01 90       	ld	r0, Z+
    1c26:	f0 81       	ld	r31, Z
    1c28:	e0 2d       	mov	r30, r0
    1c2a:	30 97       	sbiw	r30, 0x00	; 0
    1c2c:	c1 f7       	brne	.-16     	; 0x1c1e <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    1c2e:	80 e0       	ldi	r24, 0x00	; 0
    1c30:	08 95       	ret
    1c32:	80 e0       	ldi	r24, 0x00	; 0
    1c34:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	08 95       	ret
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    1c3c:	08 95       	ret

00001c3e <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    1c3e:	cf 93       	push	r28
    1c40:	df 93       	push	r29
    1c42:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    1c44:	0e 94 05 0e 	call	0x1c0a	; 0x1c0a <SYS_TimerStarted>
    1c48:	81 11       	cpse	r24, r1
    1c4a:	03 c0       	rjmp	.+6      	; 0x1c52 <SYS_TimerStart+0x14>
    placeTimer(timer);
    1c4c:	ce 01       	movw	r24, r28
    1c4e:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <placeTimer>
}
    1c52:	df 91       	pop	r29
    1c54:	cf 91       	pop	r28
    1c56:	08 95       	ret

00001c58 <check_crc>:
/*************************************************************************//**
  @brief CRC check
  @return remainder
*****************************************************************************/
unsigned int check_crc(uint16_t message_from_sensor, uint8_t check_value_from_sensor) {
	uint32_t remainder = (uint32_t)message_from_sensor << 8; //Pad with 8 bits because we have to add in the check value
    1c58:	20 e0       	ldi	r18, 0x00	; 0
    1c5a:	30 e0       	ldi	r19, 0x00	; 0
    1c5c:	38 2f       	mov	r19, r24
	remainder |= check_value_from_sensor; //Add on the check value
    1c5e:	c9 01       	movw	r24, r18
    1c60:	86 2b       	or	r24, r22
    1c62:	27 e1       	ldi	r18, 0x17	; 23
    1c64:	30 e0       	ldi	r19, 0x00	; 0

	uint32_t divsor = (uint32_t)SHIFTED_DIVISOR;
    1c66:	40 e0       	ldi	r20, 0x00	; 0
    1c68:	50 e8       	ldi	r21, 0x80	; 128

	for (int i = 0 ; i < 16 ; i++) //Operate on only 16 positions of max 24. The remaining 8 are our remainder and should be zero when we're done.
	{
		if( remainder & (uint32_t)1<<(23 - i) ) //Check if there is a one in the left position
    1c6a:	bc 01       	movw	r22, r24
    1c6c:	02 2e       	mov	r0, r18
    1c6e:	02 c0       	rjmp	.+4      	; 0x1c74 <check_crc+0x1c>
    1c70:	76 95       	lsr	r23
    1c72:	67 95       	ror	r22
    1c74:	0a 94       	dec	r0
    1c76:	e2 f7       	brpl	.-8      	; 0x1c70 <check_crc+0x18>
    1c78:	60 ff       	sbrs	r22, 0
    1c7a:	02 c0       	rjmp	.+4      	; 0x1c80 <check_crc+0x28>
		remainder ^= divsor;
    1c7c:	84 27       	eor	r24, r20
    1c7e:	95 27       	eor	r25, r21

		divsor >>= 1; //Rotate the divsor max 16 times so that we have 8 bits left of a remainder
    1c80:	56 95       	lsr	r21
    1c82:	47 95       	ror	r20
    1c84:	21 50       	subi	r18, 0x01	; 1
    1c86:	31 09       	sbc	r19, r1
	uint32_t remainder = (uint32_t)message_from_sensor << 8; //Pad with 8 bits because we have to add in the check value
	remainder |= check_value_from_sensor; //Add on the check value

	uint32_t divsor = (uint32_t)SHIFTED_DIVISOR;

	for (int i = 0 ; i < 16 ; i++) //Operate on only 16 positions of max 24. The remaining 8 are our remainder and should be zero when we're done.
    1c88:	27 30       	cpi	r18, 0x07	; 7
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	71 f7       	brne	.-36     	; 0x1c6a <check_crc+0x12>

		divsor >>= 1; //Rotate the divsor max 16 times so that we have 8 bits left of a remainder
	}

	return (unsigned int)remainder;
    1c8e:	08 95       	ret

00001c90 <ll_first>:
 * lp is list pointer
 */
llobject_t *
ll_first(lp)
llobject_t *lp;
{
    1c90:	fc 01       	movw	r30, r24
    if (LL_IS_EMPTY(lp)) {
    1c92:	82 81       	ldd	r24, Z+2	; 0x02
    1c94:	93 81       	ldd	r25, Z+3	; 0x03
    1c96:	8e 17       	cp	r24, r30
    1c98:	9f 07       	cpc	r25, r31
    1c9a:	11 f4       	brne	.+4      	; 0x1ca0 <ll_first+0x10>
		return LL_NULL;
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    }
    return lp->next;
}
    1ca0:	08 95       	ret

00001ca2 <ll_r_insert>:
llobject_t *
ll_r_insert(ip, ep)
llobject_t *ip;
llobject_t *ep;
{
    llobject_t *tp = ip->next;
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	12 96       	adiw	r26, 0x02	; 2
    1ca6:	ed 91       	ld	r30, X+
    1ca8:	fc 91       	ld	r31, X
    1caa:	13 97       	sbiw	r26, 0x03	; 3

    tp->prev = ep;
    1cac:	71 83       	std	Z+1, r23	; 0x01
    1cae:	60 83       	st	Z, r22
    ep->next = tp;
    1cb0:	db 01       	movw	r26, r22
    1cb2:	13 96       	adiw	r26, 0x03	; 3
    1cb4:	fc 93       	st	X, r31
    1cb6:	ee 93       	st	-X, r30
    1cb8:	12 97       	sbiw	r26, 0x02	; 2
    ip->next = ep;
    1cba:	fc 01       	movw	r30, r24
    1cbc:	73 83       	std	Z+3, r23	; 0x03
    1cbe:	62 83       	std	Z+2, r22	; 0x02
    ep->prev = ip;
    1cc0:	8d 93       	st	X+, r24
    1cc2:	9c 93       	st	X, r25

    return ep;
}
    1cc4:	cb 01       	movw	r24, r22
    1cc6:	08 95       	ret

00001cc8 <ll_detach>:
 */
llobject_t *
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    1cc8:	fb 01       	movw	r30, r22
    if (LL_IS_EMPTY(lp) || lp == ep) {
    1cca:	dc 01       	movw	r26, r24
    1ccc:	12 96       	adiw	r26, 0x02	; 2
    1cce:	2d 91       	ld	r18, X+
    1cd0:	3c 91       	ld	r19, X
    1cd2:	13 97       	sbiw	r26, 0x03	; 3
    1cd4:	28 17       	cp	r18, r24
    1cd6:	39 07       	cpc	r19, r25
    1cd8:	a1 f0       	breq	.+40     	; 0x1d02 <ll_detach+0x3a>
    1cda:	86 17       	cp	r24, r22
    1cdc:	97 07       	cpc	r25, r23
    1cde:	a1 f0       	breq	.+40     	; 0x1d08 <ll_detach+0x40>
		return LL_NULL;
    }

    (ep->prev)->next = ep->next;
    1ce0:	a0 81       	ld	r26, Z
    1ce2:	b1 81       	ldd	r27, Z+1	; 0x01
    1ce4:	82 81       	ldd	r24, Z+2	; 0x02
    1ce6:	93 81       	ldd	r25, Z+3	; 0x03
    1ce8:	13 96       	adiw	r26, 0x03	; 3
    1cea:	9c 93       	st	X, r25
    1cec:	8e 93       	st	-X, r24
    1cee:	12 97       	sbiw	r26, 0x02	; 2
    (ep->next)->prev = ep->prev;
    1cf0:	a2 81       	ldd	r26, Z+2	; 0x02
    1cf2:	b3 81       	ldd	r27, Z+3	; 0x03
    1cf4:	80 81       	ld	r24, Z
    1cf6:	91 81       	ldd	r25, Z+1	; 0x01
    1cf8:	8d 93       	st	X+, r24
    1cfa:	9c 93       	st	X, r25

    return ep;
    1cfc:	86 2f       	mov	r24, r22
    1cfe:	9f 2f       	mov	r25, r31
    1d00:	08 95       	ret
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    if (LL_IS_EMPTY(lp) || lp == ep) {
		return LL_NULL;
    1d02:	80 e0       	ldi	r24, 0x00	; 0
    1d04:	90 e0       	ldi	r25, 0x00	; 0
    1d06:	08 95       	ret
    1d08:	80 e0       	ldi	r24, 0x00	; 0
    1d0a:	90 e0       	ldi	r25, 0x00	; 0

    (ep->prev)->next = ep->next;
    (ep->next)->prev = ep->prev;

    return ep;
}
    1d0c:	08 95       	ret

00001d0e <ll_pop>:
 */
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
    1d0e:	fc 01       	movw	r30, r24
    1d10:	62 81       	ldd	r22, Z+2	; 0x02
    1d12:	73 81       	ldd	r23, Z+3	; 0x03
    1d14:	68 17       	cp	r22, r24
    1d16:	79 07       	cpc	r23, r25
    1d18:	19 f0       	breq	.+6      	; 0x1d20 <ll_pop+0x12>
		return LL_NULL;
    }
    return LL_DETACH(lp, lp->next);
    1d1a:	0e 94 64 0e 	call	0x1cc8	; 0x1cc8 <ll_detach>
    1d1e:	08 95       	ret
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
		return LL_NULL;
    1d20:	80 e0       	ldi	r24, 0x00	; 0
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    }
    return LL_DETACH(lp, lp->next);
}
    1d24:	08 95       	ret

00001d26 <updateTime>:
 */ 
#include "utilities/inc/time.h"


void updateTime(long increment_msec, tm * tm_eg)
{
    1d26:	cf 92       	push	r12
    1d28:	df 92       	push	r13
    1d2a:	ef 92       	push	r14
    1d2c:	ff 92       	push	r15
    1d2e:	0f 93       	push	r16
    1d30:	1f 93       	push	r17
    1d32:	cf 93       	push	r28
    1d34:	df 93       	push	r29
    1d36:	6b 01       	movw	r12, r22
    1d38:	7c 01       	movw	r14, r24
    1d3a:	ea 01       	movw	r28, r20
	printf("time debug %ld\n",tm_eg->unix_time);
    1d3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d3e:	8f 93       	push	r24
    1d40:	8a 81       	ldd	r24, Y+2	; 0x02
    1d42:	8f 93       	push	r24
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	8f 93       	push	r24
    1d48:	88 81       	ld	r24, Y
    1d4a:	8f 93       	push	r24
    1d4c:	0f e3       	ldi	r16, 0x3F	; 63
    1d4e:	14 e0       	ldi	r17, 0x04	; 4
    1d50:	1f 93       	push	r17
    1d52:	0f 93       	push	r16
    1d54:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <printf>
	tm_eg->unix_msec += increment_msec;
    1d58:	8c 81       	ldd	r24, Y+4	; 0x04
    1d5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1d5c:	ae 81       	ldd	r26, Y+6	; 0x06
    1d5e:	bf 81       	ldd	r27, Y+7	; 0x07
    1d60:	bc 01       	movw	r22, r24
    1d62:	cd 01       	movw	r24, r26
    1d64:	6c 0d       	add	r22, r12
    1d66:	7d 1d       	adc	r23, r13
    1d68:	8e 1d       	adc	r24, r14
    1d6a:	9f 1d       	adc	r25, r15
	tm_eg->unix_time += tm_eg->unix_msec / 1000;
    1d6c:	28 ee       	ldi	r18, 0xE8	; 232
    1d6e:	33 e0       	ldi	r19, 0x03	; 3
    1d70:	40 e0       	ldi	r20, 0x00	; 0
    1d72:	50 e0       	ldi	r21, 0x00	; 0
    1d74:	0e 94 09 1a 	call	0x3412	; 0x3412 <__divmodsi4>
    1d78:	c8 80       	ld	r12, Y
    1d7a:	d9 80       	ldd	r13, Y+1	; 0x01
    1d7c:	ea 80       	ldd	r14, Y+2	; 0x02
    1d7e:	fb 80       	ldd	r15, Y+3	; 0x03
    1d80:	c2 0e       	add	r12, r18
    1d82:	d3 1e       	adc	r13, r19
    1d84:	e4 1e       	adc	r14, r20
    1d86:	f5 1e       	adc	r15, r21
    1d88:	c8 82       	st	Y, r12
    1d8a:	d9 82       	std	Y+1, r13	; 0x01
    1d8c:	ea 82       	std	Y+2, r14	; 0x02
    1d8e:	fb 82       	std	Y+3, r15	; 0x03
	tm_eg->unix_msec = tm_eg->unix_msec % 1000;
    1d90:	6c 83       	std	Y+4, r22	; 0x04
    1d92:	7d 83       	std	Y+5, r23	; 0x05
    1d94:	8e 83       	std	Y+6, r24	; 0x06
    1d96:	9f 83       	std	Y+7, r25	; 0x07
	printf("time debug %ld\n",tm_eg->unix_time);
    1d98:	ff 92       	push	r15
    1d9a:	ef 92       	push	r14
    1d9c:	df 92       	push	r13
    1d9e:	cf 92       	push	r12
    1da0:	1f 93       	push	r17
    1da2:	0f 93       	push	r16
    1da4:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <printf>
    1da8:	8d b7       	in	r24, 0x3d	; 61
    1daa:	9e b7       	in	r25, 0x3e	; 62
    1dac:	0c 96       	adiw	r24, 0x0c	; 12
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	f8 94       	cli
    1db2:	9e bf       	out	0x3e, r25	; 62
    1db4:	0f be       	out	0x3f, r0	; 63
    1db6:	8d bf       	out	0x3d, r24	; 61
}
    1db8:	df 91       	pop	r29
    1dba:	cf 91       	pop	r28
    1dbc:	1f 91       	pop	r17
    1dbe:	0f 91       	pop	r16
    1dc0:	ff 90       	pop	r15
    1dc2:	ef 90       	pop	r14
    1dc4:	df 90       	pop	r13
    1dc6:	cf 90       	pop	r12
    1dc8:	08 95       	ret

00001dca <calcDate>:
	tm_ptr->unix_time = calibrate_sec;
	tm_ptr->unix_msec = 500; // to minimize error
}

void calcDate(tm *tm_ptr)
{
    1dca:	2f 92       	push	r2
    1dcc:	3f 92       	push	r3
    1dce:	4f 92       	push	r4
    1dd0:	5f 92       	push	r5
    1dd2:	6f 92       	push	r6
    1dd4:	7f 92       	push	r7
    1dd6:	8f 92       	push	r8
    1dd8:	9f 92       	push	r9
    1dda:	af 92       	push	r10
    1ddc:	bf 92       	push	r11
    1dde:	cf 92       	push	r12
    1de0:	df 92       	push	r13
    1de2:	ef 92       	push	r14
    1de4:	ff 92       	push	r15
    1de6:	0f 93       	push	r16
    1de8:	1f 93       	push	r17
    1dea:	cf 93       	push	r28
    1dec:	df 93       	push	r29
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
    1df2:	61 97       	sbiw	r28, 0x11	; 17
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	f8 94       	cli
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	cd bf       	out	0x3d, r28	; 61
    1dfe:	8c 01       	movw	r16, r24
	long seconds, minutes, hours, days, year, month;
	long dayOfWeek;
	seconds = tm_ptr->unix_time;
    1e00:	dc 01       	movw	r26, r24
    1e02:	4d 90       	ld	r4, X+
    1e04:	5d 90       	ld	r5, X+
    1e06:	6d 90       	ld	r6, X+
    1e08:	7c 90       	ld	r7, X

	/* calculate minutes */
	minutes  = seconds / 60;
    1e0a:	0f 2e       	mov	r0, r31
    1e0c:	fc e3       	ldi	r31, 0x3C	; 60
    1e0e:	8f 2e       	mov	r8, r31
    1e10:	91 2c       	mov	r9, r1
    1e12:	a1 2c       	mov	r10, r1
    1e14:	b1 2c       	mov	r11, r1
    1e16:	f0 2d       	mov	r31, r0
    1e18:	c3 01       	movw	r24, r6
    1e1a:	b2 01       	movw	r22, r4
    1e1c:	a5 01       	movw	r20, r10
    1e1e:	94 01       	movw	r18, r8
    1e20:	0e 94 09 1a 	call	0x3412	; 0x3412 <__divmodsi4>
    1e24:	69 01       	movw	r12, r18
    1e26:	7a 01       	movw	r14, r20
	seconds -= minutes * 60;
    1e28:	a4 ec       	ldi	r26, 0xC4	; 196
    1e2a:	bf ef       	ldi	r27, 0xFF	; 255
    1e2c:	0e 94 2b 1a 	call	0x3456	; 0x3456 <__mulohisi3>
    1e30:	9b 01       	movw	r18, r22
    1e32:	ac 01       	movw	r20, r24
    1e34:	24 0d       	add	r18, r4
    1e36:	35 1d       	adc	r19, r5
    1e38:	46 1d       	adc	r20, r6
    1e3a:	57 1d       	adc	r21, r7
    1e3c:	29 83       	std	Y+1, r18	; 0x01
    1e3e:	3a 83       	std	Y+2, r19	; 0x02
    1e40:	4b 83       	std	Y+3, r20	; 0x03
    1e42:	5c 83       	std	Y+4, r21	; 0x04
	/* calculate hours */
	hours    = minutes / 60;
    1e44:	c7 01       	movw	r24, r14
    1e46:	b6 01       	movw	r22, r12
    1e48:	a5 01       	movw	r20, r10
    1e4a:	94 01       	movw	r18, r8
    1e4c:	0e 94 09 1a 	call	0x3412	; 0x3412 <__divmodsi4>
    1e50:	49 01       	movw	r8, r18
    1e52:	5a 01       	movw	r10, r20
	minutes -= hours   * 60;
    1e54:	a4 ec       	ldi	r26, 0xC4	; 196
    1e56:	bf ef       	ldi	r27, 0xFF	; 255
    1e58:	0e 94 2b 1a 	call	0x3456	; 0x3456 <__mulohisi3>
    1e5c:	9b 01       	movw	r18, r22
    1e5e:	ac 01       	movw	r20, r24
    1e60:	2c 0d       	add	r18, r12
    1e62:	3d 1d       	adc	r19, r13
    1e64:	4e 1d       	adc	r20, r14
    1e66:	5f 1d       	adc	r21, r15
    1e68:	2d 83       	std	Y+5, r18	; 0x05
    1e6a:	3e 83       	std	Y+6, r19	; 0x06
    1e6c:	4f 83       	std	Y+7, r20	; 0x07
    1e6e:	58 87       	std	Y+8, r21	; 0x08
	/* calculate days */
	days     = hours   / 24;
    1e70:	c5 01       	movw	r24, r10
    1e72:	b4 01       	movw	r22, r8
    1e74:	28 e1       	ldi	r18, 0x18	; 24
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e0       	ldi	r20, 0x00	; 0
    1e7a:	50 e0       	ldi	r21, 0x00	; 0
    1e7c:	0e 94 09 1a 	call	0x3412	; 0x3412 <__divmodsi4>
    1e80:	c2 2e       	mov	r12, r18
    1e82:	d3 2e       	mov	r13, r19
    1e84:	e4 2e       	mov	r14, r20
    1e86:	f5 2e       	mov	r15, r21
	hours   -= days    * 24;
    1e88:	a8 ee       	ldi	r26, 0xE8	; 232
    1e8a:	bf ef       	ldi	r27, 0xFF	; 255
    1e8c:	0e 94 2b 1a 	call	0x3456	; 0x3456 <__mulohisi3>
    1e90:	9b 01       	movw	r18, r22
    1e92:	ac 01       	movw	r20, r24
    1e94:	28 0d       	add	r18, r8
    1e96:	39 1d       	adc	r19, r9
    1e98:	4a 1d       	adc	r20, r10
    1e9a:	5b 1d       	adc	r21, r11
    1e9c:	29 87       	std	Y+9, r18	; 0x09
    1e9e:	3a 87       	std	Y+10, r19	; 0x0a
    1ea0:	4b 87       	std	Y+11, r20	; 0x0b
    1ea2:	5c 87       	std	Y+12, r21	; 0x0c

	/* Unix time starts in 1970 on a Thursday */
	year      = 1970;
	dayOfWeek = 4;
    1ea4:	81 2c       	mov	r8, r1
    1ea6:	91 2c       	mov	r9, r1
    1ea8:	54 01       	movw	r10, r8
    1eaa:	68 94       	set
    1eac:	82 f8       	bld	r8, 2
	/* calculate days */
	days     = hours   / 24;
	hours   -= days    * 24;

	/* Unix time starts in 1970 on a Thursday */
	year      = 1970;
    1eae:	0f 2e       	mov	r0, r31
    1eb0:	f2 eb       	ldi	r31, 0xB2	; 178
    1eb2:	4f 2e       	mov	r4, r31
    1eb4:	f7 e0       	ldi	r31, 0x07	; 7
    1eb6:	5f 2e       	mov	r5, r31
    1eb8:	61 2c       	mov	r6, r1
    1eba:	71 2c       	mov	r7, r1
    1ebc:	f0 2d       	mov	r31, r0

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    1ebe:	21 2c       	mov	r2, r1
		{
			dayOfWeek += leapYear ? 2 : 1;
    1ec0:	31 2c       	mov	r3, r1
	year      = 1970;
	dayOfWeek = 4;

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
    1ec2:	d3 01       	movw	r26, r6
    1ec4:	c2 01       	movw	r24, r4
    1ec6:	83 70       	andi	r24, 0x03	; 3
    1ec8:	99 27       	eor	r25, r25
    1eca:	aa 27       	eor	r26, r26
    1ecc:	bb 27       	eor	r27, r27
    1ece:	89 2b       	or	r24, r25
    1ed0:	8a 2b       	or	r24, r26
    1ed2:	8b 2b       	or	r24, r27
    1ed4:	09 f0       	breq	.+2      	; 0x1ed8 <calcDate+0x10e>
    1ed6:	f3 c0       	rjmp	.+486    	; 0x20be <calcDate+0x2f4>
    1ed8:	c3 01       	movw	r24, r6
    1eda:	b2 01       	movw	r22, r4
    1edc:	24 e6       	ldi	r18, 0x64	; 100
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	40 e0       	ldi	r20, 0x00	; 0
    1ee2:	50 e0       	ldi	r21, 0x00	; 0
    1ee4:	0e 94 09 1a 	call	0x3412	; 0x3412 <__divmodsi4>
    1ee8:	67 2b       	or	r22, r23
    1eea:	68 2b       	or	r22, r24
    1eec:	69 2b       	or	r22, r25
    1eee:	09 f0       	breq	.+2      	; 0x1ef2 <calcDate+0x128>
    1ef0:	d9 c0       	rjmp	.+434    	; 0x20a4 <calcDate+0x2da>
    1ef2:	c3 01       	movw	r24, r6
    1ef4:	b2 01       	movw	r22, r4
    1ef6:	20 e9       	ldi	r18, 0x90	; 144
    1ef8:	31 e0       	ldi	r19, 0x01	; 1
    1efa:	40 e0       	ldi	r20, 0x00	; 0
    1efc:	50 e0       	ldi	r21, 0x00	; 0
    1efe:	0e 94 09 1a 	call	0x3412	; 0x3412 <__divmodsi4>
    1f02:	67 2b       	or	r22, r23
    1f04:	68 2b       	or	r22, r24
    1f06:	69 2b       	or	r22, r25
    1f08:	09 f4       	brne	.+2      	; 0x1f0c <calcDate+0x142>
    1f0a:	cc c0       	rjmp	.+408    	; 0x20a4 <calcDate+0x2da>
    1f0c:	d8 c0       	rjmp	.+432    	; 0x20be <calcDate+0x2f4>
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    1f0e:	8e e6       	ldi	r24, 0x6E	; 110
    1f10:	91 e0       	ldi	r25, 0x01	; 1
    1f12:	a0 e0       	ldi	r26, 0x00	; 0
    1f14:	b0 e0       	ldi	r27, 0x00	; 0
		{
			dayOfWeek += leapYear ? 2 : 1;
    1f16:	42 e0       	ldi	r20, 0x02	; 2
    1f18:	50 e0       	ldi	r21, 0x00	; 0
    1f1a:	60 e0       	ldi	r22, 0x00	; 0
    1f1c:	70 e0       	ldi	r23, 0x00	; 0
    1f1e:	08 c0       	rjmp	.+16     	; 0x1f30 <calcDate+0x166>

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    1f20:	8d e6       	ldi	r24, 0x6D	; 109
    1f22:	91 e0       	ldi	r25, 0x01	; 1
    1f24:	a2 2d       	mov	r26, r2
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
		{
			dayOfWeek += leapYear ? 2 : 1;
    1f28:	41 e0       	ldi	r20, 0x01	; 1
    1f2a:	50 e0       	ldi	r21, 0x00	; 0
    1f2c:	60 e0       	ldi	r22, 0x00	; 0
    1f2e:	73 2d       	mov	r23, r3
    1f30:	84 0e       	add	r8, r20
    1f32:	95 1e       	adc	r9, r21
    1f34:	a6 1e       	adc	r10, r22
    1f36:	b7 1e       	adc	r11, r23
			days      -= daysInYear;
    1f38:	c8 1a       	sub	r12, r24
    1f3a:	d9 0a       	sbc	r13, r25
    1f3c:	ea 0a       	sbc	r14, r26
    1f3e:	fb 0a       	sbc	r15, r27
			if (dayOfWeek >= 7)
    1f40:	37 e0       	ldi	r19, 0x07	; 7
    1f42:	83 16       	cp	r8, r19
    1f44:	91 04       	cpc	r9, r1
    1f46:	a1 04       	cpc	r10, r1
    1f48:	b1 04       	cpc	r11, r1
    1f4a:	2c f0       	brlt	.+10     	; 0x1f56 <calcDate+0x18c>
			dayOfWeek -= 7;
    1f4c:	47 e0       	ldi	r20, 0x07	; 7
    1f4e:	84 1a       	sub	r8, r20
    1f50:	91 08       	sbc	r9, r1
    1f52:	a1 08       	sbc	r10, r1
    1f54:	b1 08       	sbc	r11, r1
			++year;
    1f56:	5f ef       	ldi	r21, 0xFF	; 255
    1f58:	45 1a       	sub	r4, r21
    1f5a:	55 0a       	sbc	r5, r21
    1f5c:	65 0a       	sbc	r6, r21
    1f5e:	75 0a       	sbc	r7, r21
				else
				break;
			}
			break;
		}
	}
    1f60:	b0 cf       	rjmp	.-160    	; 0x1ec2 <calcDate+0xf8>
			dayOfWeek -= 7;
			++year;
		}
		else
		{
			tm_ptr->tm_yday = days;
    1f62:	f8 01       	movw	r30, r16
    1f64:	84 a3       	std	Z+36, r24	; 0x24
    1f66:	95 a3       	std	Z+37, r25	; 0x25
    1f68:	a6 a3       	std	Z+38, r26	; 0x26
    1f6a:	b7 a3       	std	Z+39, r27	; 0x27
			dayOfWeek  += days;
    1f6c:	bc 01       	movw	r22, r24
    1f6e:	cd 01       	movw	r24, r26
    1f70:	68 0d       	add	r22, r8
    1f72:	79 1d       	adc	r23, r9
    1f74:	8a 1d       	adc	r24, r10
    1f76:	9b 1d       	adc	r25, r11
			dayOfWeek  %= 7;
    1f78:	27 e0       	ldi	r18, 0x07	; 7
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	40 e0       	ldi	r20, 0x00	; 0
    1f7e:	50 e0       	ldi	r21, 0x00	; 0
    1f80:	0e 94 09 1a 	call	0x3412	; 0x3412 <__divmodsi4>
    1f84:	6d 87       	std	Y+13, r22	; 0x0d
    1f86:	7e 87       	std	Y+14, r23	; 0x0e
    1f88:	8f 87       	std	Y+15, r24	; 0x0f
    1f8a:	98 8b       	std	Y+16, r25	; 0x10
    1f8c:	2f e4       	ldi	r18, 0x4F	; 79
    1f8e:	34 e0       	ldi	r19, 0x04	; 4
    1f90:	41 e0       	ldi	r20, 0x01	; 1
    1f92:	50 e0       	ldi	r21, 0x00	; 0
    1f94:	60 e0       	ldi	r22, 0x00	; 0
    1f96:	70 e0       	ldi	r23, 0x00	; 0
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	90 e0       	ldi	r25, 0x00	; 0
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	f9 01       	movw	r30, r18
    1fa0:	48 01       	movw	r8, r16
    1fa2:	07 c0       	rjmp	.+14     	; 0x1fb2 <calcDate+0x1e8>
    1fa4:	01 96       	adiw	r24, 0x01	; 1
    1fa6:	a1 1d       	adc	r26, r1
    1fa8:	b1 1d       	adc	r27, r1
    1faa:	4f 5f       	subi	r20, 0xFF	; 255
    1fac:	5f 4f       	sbci	r21, 0xFF	; 255
    1fae:	6f 4f       	sbci	r22, 0xFF	; 255
    1fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    1fb2:	b8 2e       	mov	r11, r24
    1fb4:	a9 2e       	mov	r10, r25
    1fb6:	2a 2e       	mov	r2, r26
    1fb8:	b9 8b       	std	Y+17, r27	; 0x11

			/* calculate the month and day */
			static const uint8_t daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
			for(month = 0; month < 12; ++month)
			{
				uint8_t dim = daysInMonth[month];
    1fba:	01 91       	ld	r16, Z+

				/* add a day to feburary if this is a leap year */
				if (month == 1 && leapYear)
    1fbc:	81 30       	cpi	r24, 0x01	; 1
    1fbe:	91 05       	cpc	r25, r1
    1fc0:	a1 05       	cpc	r26, r1
    1fc2:	b1 05       	cpc	r27, r1
    1fc4:	29 f4       	brne	.+10     	; 0x1fd0 <calcDate+0x206>
    1fc6:	33 20       	and	r3, r3
    1fc8:	09 f4       	brne	.+2      	; 0x1fcc <calcDate+0x202>
    1fca:	61 c0       	rjmp	.+194    	; 0x208e <calcDate+0x2c4>
				++dim;
    1fcc:	0f 5f       	subi	r16, 0xFF	; 255
    1fce:	5f c0       	rjmp	.+190    	; 0x208e <calcDate+0x2c4>

				if (days >= dim)
    1fd0:	10 e0       	ldi	r17, 0x00	; 0
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	c0 16       	cp	r12, r16
    1fd8:	d1 06       	cpc	r13, r17
    1fda:	e2 06       	cpc	r14, r18
    1fdc:	f3 06       	cpc	r15, r19
    1fde:	7c f0       	brlt	.+30     	; 0x1ffe <calcDate+0x234>
				days -= dim;
    1fe0:	c0 1a       	sub	r12, r16
    1fe2:	d1 0a       	sbc	r13, r17
    1fe4:	e2 0a       	sbc	r14, r18
    1fe6:	f3 0a       	sbc	r15, r19
			dayOfWeek  += days;
			dayOfWeek  %= 7;

			/* calculate the month and day */
			static const uint8_t daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
			for(month = 0; month < 12; ++month)
    1fe8:	b4 2e       	mov	r11, r20
    1fea:	a5 2e       	mov	r10, r21
    1fec:	26 2e       	mov	r2, r22
    1fee:	4c 30       	cpi	r20, 0x0C	; 12
    1ff0:	51 05       	cpc	r21, r1
    1ff2:	61 05       	cpc	r22, r1
    1ff4:	71 05       	cpc	r23, r1
    1ff6:	b4 f2       	brlt	.-84     	; 0x1fa4 <calcDate+0x1da>
    1ff8:	84 01       	movw	r16, r8
    1ffa:	27 2f       	mov	r18, r23
    1ffc:	02 c0       	rjmp	.+4      	; 0x2002 <calcDate+0x238>
    1ffe:	84 01       	movw	r16, r8
    2000:	29 89       	ldd	r18, Y+17	; 0x11
			}
			break;
		}
	}

	tm_ptr->tm_sec  = seconds;
    2002:	89 81       	ldd	r24, Y+1	; 0x01
    2004:	9a 81       	ldd	r25, Y+2	; 0x02
    2006:	ab 81       	ldd	r26, Y+3	; 0x03
    2008:	bc 81       	ldd	r27, Y+4	; 0x04
    200a:	f8 01       	movw	r30, r16
    200c:	80 87       	std	Z+8, r24	; 0x08
    200e:	91 87       	std	Z+9, r25	; 0x09
    2010:	a2 87       	std	Z+10, r26	; 0x0a
    2012:	b3 87       	std	Z+11, r27	; 0x0b
	tm_ptr->tm_min  = minutes;
    2014:	8d 81       	ldd	r24, Y+5	; 0x05
    2016:	9e 81       	ldd	r25, Y+6	; 0x06
    2018:	af 81       	ldd	r26, Y+7	; 0x07
    201a:	b8 85       	ldd	r27, Y+8	; 0x08
    201c:	84 87       	std	Z+12, r24	; 0x0c
    201e:	95 87       	std	Z+13, r25	; 0x0d
    2020:	a6 87       	std	Z+14, r26	; 0x0e
    2022:	b7 87       	std	Z+15, r27	; 0x0f
	tm_ptr->tm_hour = hours;
    2024:	89 85       	ldd	r24, Y+9	; 0x09
    2026:	9a 85       	ldd	r25, Y+10	; 0x0a
    2028:	ab 85       	ldd	r26, Y+11	; 0x0b
    202a:	bc 85       	ldd	r27, Y+12	; 0x0c
    202c:	80 8b       	std	Z+16, r24	; 0x10
    202e:	91 8b       	std	Z+17, r25	; 0x11
    2030:	a2 8b       	std	Z+18, r26	; 0x12
    2032:	b3 8b       	std	Z+19, r27	; 0x13
	tm_ptr->tm_mday = days + 1;
    2034:	ff ef       	ldi	r31, 0xFF	; 255
    2036:	cf 1a       	sub	r12, r31
    2038:	df 0a       	sbc	r13, r31
    203a:	ef 0a       	sbc	r14, r31
    203c:	ff 0a       	sbc	r15, r31
    203e:	d8 01       	movw	r26, r16
    2040:	54 96       	adiw	r26, 0x14	; 20
    2042:	cd 92       	st	X+, r12
    2044:	dd 92       	st	X+, r13
    2046:	ed 92       	st	X+, r14
    2048:	fc 92       	st	X, r15
    204a:	57 97       	sbiw	r26, 0x17	; 23
	tm_ptr->tm_mon  = month;
    204c:	58 96       	adiw	r26, 0x18	; 24
    204e:	bc 92       	st	X, r11
    2050:	58 97       	sbiw	r26, 0x18	; 24
    2052:	59 96       	adiw	r26, 0x19	; 25
    2054:	ac 92       	st	X, r10
    2056:	59 97       	sbiw	r26, 0x19	; 25
    2058:	5a 96       	adiw	r26, 0x1a	; 26
    205a:	2c 92       	st	X, r2
    205c:	5a 97       	sbiw	r26, 0x1a	; 26
    205e:	5b 96       	adiw	r26, 0x1b	; 27
    2060:	2c 93       	st	X, r18
    2062:	5b 97       	sbiw	r26, 0x1b	; 27
	tm_ptr->tm_year = year;
    2064:	f8 01       	movw	r30, r16
    2066:	44 8e       	std	Z+28, r4	; 0x1c
    2068:	55 8e       	std	Z+29, r5	; 0x1d
    206a:	66 8e       	std	Z+30, r6	; 0x1e
    206c:	77 8e       	std	Z+31, r7	; 0x1f
	tm_ptr->tm_wday = dayOfWeek;
    206e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2070:	3e 85       	ldd	r19, Y+14	; 0x0e
    2072:	4f 85       	ldd	r20, Y+15	; 0x0f
    2074:	58 89       	ldd	r21, Y+16	; 0x10
    2076:	90 96       	adiw	r26, 0x20	; 32
    2078:	2d 93       	st	X+, r18
    207a:	3d 93       	st	X+, r19
    207c:	4d 93       	st	X+, r20
    207e:	5c 93       	st	X, r21
    2080:	93 97       	sbiw	r26, 0x23	; 35
    2082:	29 c0       	rjmp	.+82     	; 0x20d6 <calcDate+0x30c>
				/* add a day to feburary if this is a leap year */
				if (month == 1 && leapYear)
				++dim;

				if (days >= dim)
				days -= dim;
    2084:	c0 1a       	sub	r12, r16
    2086:	d1 0a       	sbc	r13, r17
    2088:	e2 0a       	sbc	r14, r18
    208a:	f3 0a       	sbc	r15, r19
    208c:	8b cf       	rjmp	.-234    	; 0x1fa4 <calcDate+0x1da>

				/* add a day to feburary if this is a leap year */
				if (month == 1 && leapYear)
				++dim;

				if (days >= dim)
    208e:	10 e0       	ldi	r17, 0x00	; 0
    2090:	20 e0       	ldi	r18, 0x00	; 0
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	c0 16       	cp	r12, r16
    2096:	d1 06       	cpc	r13, r17
    2098:	e2 06       	cpc	r14, r18
    209a:	f3 06       	cpc	r15, r19
    209c:	9c f7       	brge	.-26     	; 0x2084 <calcDate+0x2ba>
    209e:	84 01       	movw	r16, r8
    20a0:	29 89       	ldd	r18, Y+17	; 0x11
    20a2:	af cf       	rjmp	.-162    	; 0x2002 <calcDate+0x238>

	while(1)
	{
		bool     leapYear   = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
		uint16_t daysInYear = leapYear ? 366 : 365;
		if (days >= daysInYear)
    20a4:	be e6       	ldi	r27, 0x6E	; 110
    20a6:	cb 16       	cp	r12, r27
    20a8:	b1 e0       	ldi	r27, 0x01	; 1
    20aa:	db 06       	cpc	r13, r27
    20ac:	e1 04       	cpc	r14, r1
    20ae:	f1 04       	cpc	r15, r1
    20b0:	0c f0       	brlt	.+2      	; 0x20b4 <calcDate+0x2ea>
    20b2:	2d cf       	rjmp	.-422    	; 0x1f0e <calcDate+0x144>
    20b4:	d7 01       	movw	r26, r14
    20b6:	c6 01       	movw	r24, r12
    20b8:	33 24       	eor	r3, r3
    20ba:	33 94       	inc	r3
    20bc:	52 cf       	rjmp	.-348    	; 0x1f62 <calcDate+0x198>
    20be:	ed e6       	ldi	r30, 0x6D	; 109
    20c0:	ce 16       	cp	r12, r30
    20c2:	e1 e0       	ldi	r30, 0x01	; 1
    20c4:	de 06       	cpc	r13, r30
    20c6:	e1 04       	cpc	r14, r1
    20c8:	f1 04       	cpc	r15, r1
    20ca:	0c f0       	brlt	.+2      	; 0x20ce <calcDate+0x304>
    20cc:	29 cf       	rjmp	.-430    	; 0x1f20 <calcDate+0x156>
    20ce:	d7 01       	movw	r26, r14
    20d0:	c6 01       	movw	r24, r12
    20d2:	31 2c       	mov	r3, r1
    20d4:	46 cf       	rjmp	.-372    	; 0x1f62 <calcDate+0x198>
	tm_ptr->tm_hour = hours;
	tm_ptr->tm_mday = days + 1;
	tm_ptr->tm_mon  = month;
	tm_ptr->tm_year = year;
	tm_ptr->tm_wday = dayOfWeek;
}
    20d6:	61 96       	adiw	r28, 0x11	; 17
    20d8:	0f b6       	in	r0, 0x3f	; 63
    20da:	f8 94       	cli
    20dc:	de bf       	out	0x3e, r29	; 62
    20de:	0f be       	out	0x3f, r0	; 63
    20e0:	cd bf       	out	0x3d, r28	; 61
    20e2:	df 91       	pop	r29
    20e4:	cf 91       	pop	r28
    20e6:	1f 91       	pop	r17
    20e8:	0f 91       	pop	r16
    20ea:	ff 90       	pop	r15
    20ec:	ef 90       	pop	r14
    20ee:	df 90       	pop	r13
    20f0:	cf 90       	pop	r12
    20f2:	bf 90       	pop	r11
    20f4:	af 90       	pop	r10
    20f6:	9f 90       	pop	r9
    20f8:	8f 90       	pop	r8
    20fa:	7f 90       	pop	r7
    20fc:	6f 90       	pop	r6
    20fe:	5f 90       	pop	r5
    2100:	4f 90       	pop	r4
    2102:	3f 90       	pop	r3
    2104:	2f 90       	pop	r2
    2106:	08 95       	ret

00002108 <init_timestamp>:



void init_timestamp(tm *tm_ptr)
{
	tm_ptr->unix_msec=0;
    2108:	fc 01       	movw	r30, r24
    210a:	14 82       	std	Z+4, r1	; 0x04
    210c:	15 82       	std	Z+5, r1	; 0x05
    210e:	16 82       	std	Z+6, r1	; 0x06
    2110:	17 82       	std	Z+7, r1	; 0x07
	tm_ptr->unix_time=0;
    2112:	10 82       	st	Z, r1
    2114:	11 82       	std	Z+1, r1	; 0x01
    2116:	12 82       	std	Z+2, r1	; 0x02
    2118:	13 82       	std	Z+3, r1	; 0x03
    211a:	08 95       	ret

0000211c <DemoStorage_Device_VTinit>:
};


void DemoStorage_Device_VTinit( DemoStorageDevice *this )
{
	this->abstract.device_vt = &DemoStorageDevice_abstract_vmt;
    211c:	2c e1       	ldi	r18, 0x1C	; 28
    211e:	32 e0       	ldi	r19, 0x02	; 2
    2120:	fc 01       	movw	r30, r24
    2122:	31 83       	std	Z+1, r19	; 0x01
    2124:	20 83       	st	Z, r18
    2126:	08 95       	ret

00002128 <DemoStorage_Device_init>:
}

int DemoStorage_Device_init( DemoStorageDevice *this )
{
	return 0;
}
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	08 95       	ret

0000212e <DemoStorage_Device_reset>:

int DemoStorage_Device_reset( DemoStorageDevice *this )
{
	return 0;
}
    212e:	80 e0       	ldi	r24, 0x00	; 0
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	08 95       	ret

00002134 <DemoStorage_Device_getType>:

int DemoStorage_Device_getType( DemoStorageDevice *this )
{
	return TYPE_STORAGE_DEVICE;
}
    2134:	84 e0       	ldi	r24, 0x04	; 4
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	08 95       	ret

0000213a <DemoStorage_Device_Tinit>:



void DemoStorage_Device_Tinit(DemoStorageDevice *this)
{
	this->vmt = &DemoStorageDevice_vmt;
    213a:	24 e1       	ldi	r18, 0x14	; 20
    213c:	32 e0       	ldi	r19, 0x02	; 2
    213e:	fc 01       	movw	r30, r24
    2140:	33 83       	std	Z+3, r19	; 0x03
    2142:	22 83       	std	Z+2, r18	; 0x02
    2144:	08 95       	ret

00002146 <DemoStorage_Device_Configure>:
}

int DemoStorage_Device_Configure(DemoStorageDevice *this)
{
	return 0;
}
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	08 95       	ret

0000214c <DemoStorageget_CurDataUnit>:

DataUnit * DemoStorageget_CurDataUnit(DemoStorageDevice *this)
{
    214c:	0f 93       	push	r16
    214e:	1f 93       	push	r17
    2150:	cf 93       	push	r28
    2152:	df 93       	push	r29
    2154:	ec 01       	movw	r28, r24
	int t = this->cur_pos;
    2156:	0e 81       	ldd	r16, Y+6	; 0x06
    2158:	1f 81       	ldd	r17, Y+7	; 0x07
	printf("Executre get store Device : %d\n",t);
    215a:	1f 93       	push	r17
    215c:	0f 93       	push	r16
    215e:	8b e5       	ldi	r24, 0x5B	; 91
    2160:	94 e0       	ldi	r25, 0x04	; 4
    2162:	9f 93       	push	r25
    2164:	8f 93       	push	r24
    2166:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <printf>
	this->cur_pos = this->cur_pos+1;
    216a:	8e 81       	ldd	r24, Y+6	; 0x06
    216c:	9f 81       	ldd	r25, Y+7	; 0x07
    216e:	01 96       	adiw	r24, 0x01	; 1
    2170:	9f 83       	std	Y+7, r25	; 0x07
    2172:	8e 83       	std	Y+6, r24	; 0x06
	DataUnit * data_t = this -> StoragesData;
	return (data_t + t);
    2174:	28 e3       	ldi	r18, 0x38	; 56
    2176:	20 9f       	mul	r18, r16
    2178:	c0 01       	movw	r24, r0
    217a:	21 9f       	mul	r18, r17
    217c:	90 0d       	add	r25, r0
    217e:	11 24       	eor	r1, r1
    2180:	28 85       	ldd	r18, Y+8	; 0x08
    2182:	39 85       	ldd	r19, Y+9	; 0x09
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	82 0f       	add	r24, r18
    218e:	93 1f       	adc	r25, r19
    2190:	df 91       	pop	r29
    2192:	cf 91       	pop	r28
    2194:	1f 91       	pop	r17
    2196:	0f 91       	pop	r16
    2198:	08 95       	ret

0000219a <DemoStorage_Device_Execute>:
{
	this->vmt = &DemoStorageDevice_vmt;
}

int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
    219a:	3f 92       	push	r3
    219c:	4f 92       	push	r4
    219e:	5f 92       	push	r5
    21a0:	6f 92       	push	r6
    21a2:	7f 92       	push	r7
    21a4:	8f 92       	push	r8
    21a6:	9f 92       	push	r9
    21a8:	af 92       	push	r10
    21aa:	bf 92       	push	r11
    21ac:	cf 92       	push	r12
    21ae:	df 92       	push	r13
    21b0:	ef 92       	push	r14
    21b2:	ff 92       	push	r15
    21b4:	0f 93       	push	r16
    21b6:	1f 93       	push	r17
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	cd b7       	in	r28, 0x3d	; 61
    21be:	de b7       	in	r29, 0x3e	; 62
    21c0:	e8 97       	sbiw	r28, 0x38	; 56
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	3c 01       	movw	r6, r24
	printf("Executre Storage Device\n");
    21ce:	8b e7       	ldi	r24, 0x7B	; 123
    21d0:	94 e0       	ldi	r25, 0x04	; 4
    21d2:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <puts>
	for( int i=0; i<this->cur_pos; i++)
    21d6:	f3 01       	movw	r30, r6
    21d8:	86 81       	ldd	r24, Z+6	; 0x06
    21da:	97 81       	ldd	r25, Z+7	; 0x07
    21dc:	18 16       	cp	r1, r24
    21de:	19 06       	cpc	r1, r25
    21e0:	0c f0       	brlt	.+2      	; 0x21e4 <DemoStorage_Device_Execute+0x4a>
    21e2:	8b c0       	rjmp	.+278    	; 0x22fa <__stack+0xfb>
    21e4:	81 2c       	mov	r8, r1
    21e6:	91 2c       	mov	r9, r1
    21e8:	a1 2c       	mov	r10, r1
    21ea:	b1 2c       	mov	r11, r1
	{
		DataUnit temp = this->StoragesData[i];
    21ec:	0f 2e       	mov	r0, r31
    21ee:	f8 e3       	ldi	r31, 0x38	; 56
    21f0:	3f 2e       	mov	r3, r31
    21f2:	f0 2d       	mov	r31, r0
		printf("%2d%2d%2d %2d%2d%2d\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
    21f4:	0f 2e       	mov	r0, r31
    21f6:	f3 e9       	ldi	r31, 0x93	; 147
    21f8:	4f 2e       	mov	r4, r31
    21fa:	f4 e0       	ldi	r31, 0x04	; 4
    21fc:	5f 2e       	mov	r5, r31
    21fe:	f0 2d       	mov	r31, r0
    2200:	6e 01       	movw	r12, r28
    2202:	f1 e1       	ldi	r31, 0x11	; 17
    2204:	cf 0e       	add	r12, r31
    2206:	d1 1c       	adc	r13, r1
		for( int j = 0; j < MAX_NUM_DATA; ++j )
			printf("%3.3f ",temp.data[j]);
    2208:	0f 2e       	mov	r0, r31
    220a:	f8 ea       	ldi	r31, 0xA8	; 168
    220c:	ef 2e       	mov	r14, r31
    220e:	f4 e0       	ldi	r31, 0x04	; 4
    2210:	ff 2e       	mov	r15, r31
    2212:	f0 2d       	mov	r31, r0
int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
	{
		DataUnit temp = this->StoragesData[i];
    2214:	f3 01       	movw	r30, r6
    2216:	80 85       	ldd	r24, Z+8	; 0x08
    2218:	91 85       	ldd	r25, Z+9	; 0x09
    221a:	88 0d       	add	r24, r8
    221c:	99 1d       	adc	r25, r9
    221e:	fc 01       	movw	r30, r24
    2220:	de 01       	movw	r26, r28
    2222:	11 96       	adiw	r26, 0x01	; 1
    2224:	23 2d       	mov	r18, r3
    2226:	01 90       	ld	r0, Z+
    2228:	0d 92       	st	X+, r0
    222a:	2a 95       	dec	r18
    222c:	e1 f7       	brne	.-8      	; 0x2226 <__stack+0x27>
		printf("%2d%2d%2d %2d%2d%2d\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
    222e:	fc 01       	movw	r30, r24
    2230:	23 8d       	ldd	r18, Z+27	; 0x1b
    2232:	2f 93       	push	r18
    2234:	22 8d       	ldd	r18, Z+26	; 0x1a
    2236:	2f 93       	push	r18
    2238:	21 8d       	ldd	r18, Z+25	; 0x19
    223a:	2f 93       	push	r18
    223c:	20 8d       	ldd	r18, Z+24	; 0x18
    223e:	2f 93       	push	r18
    2240:	27 8d       	ldd	r18, Z+31	; 0x1f
    2242:	2f 93       	push	r18
    2244:	26 8d       	ldd	r18, Z+30	; 0x1e
    2246:	2f 93       	push	r18
    2248:	25 8d       	ldd	r18, Z+29	; 0x1d
    224a:	2f 93       	push	r18
    224c:	24 8d       	ldd	r18, Z+28	; 0x1c
    224e:	2f 93       	push	r18
    2250:	23 a1       	ldd	r18, Z+35	; 0x23
    2252:	2f 93       	push	r18
    2254:	22 a1       	ldd	r18, Z+34	; 0x22
    2256:	2f 93       	push	r18
    2258:	21 a1       	ldd	r18, Z+33	; 0x21
    225a:	2f 93       	push	r18
    225c:	20 a1       	ldd	r18, Z+32	; 0x20
    225e:	2f 93       	push	r18
    2260:	27 a1       	ldd	r18, Z+39	; 0x27
    2262:	2f 93       	push	r18
    2264:	26 a1       	ldd	r18, Z+38	; 0x26
    2266:	2f 93       	push	r18
    2268:	25 a1       	ldd	r18, Z+37	; 0x25
    226a:	2f 93       	push	r18
    226c:	24 a1       	ldd	r18, Z+36	; 0x24
    226e:	2f 93       	push	r18
    2270:	23 a5       	ldd	r18, Z+43	; 0x2b
    2272:	2f 93       	push	r18
    2274:	22 a5       	ldd	r18, Z+42	; 0x2a
    2276:	2f 93       	push	r18
    2278:	21 a5       	ldd	r18, Z+41	; 0x29
    227a:	2f 93       	push	r18
    227c:	20 a5       	ldd	r18, Z+40	; 0x28
    227e:	2f 93       	push	r18
    2280:	27 a5       	ldd	r18, Z+47	; 0x2f
    2282:	2f 93       	push	r18
    2284:	26 a5       	ldd	r18, Z+46	; 0x2e
    2286:	2f 93       	push	r18
    2288:	25 a5       	ldd	r18, Z+45	; 0x2d
    228a:	2f 93       	push	r18
    228c:	84 a5       	ldd	r24, Z+44	; 0x2c
    228e:	8f 93       	push	r24
    2290:	5f 92       	push	r5
    2292:	4f 92       	push	r4
    2294:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <printf>
    2298:	8e 01       	movw	r16, r28
    229a:	0f 5f       	subi	r16, 0xFF	; 255
    229c:	1f 4f       	sbci	r17, 0xFF	; 255
    229e:	0f b6       	in	r0, 0x3f	; 63
    22a0:	f8 94       	cli
    22a2:	de bf       	out	0x3e, r29	; 62
    22a4:	0f be       	out	0x3f, r0	; 63
    22a6:	cd bf       	out	0x3d, r28	; 61
		for( int j = 0; j < MAX_NUM_DATA; ++j )
			printf("%3.3f ",temp.data[j]);
    22a8:	f8 01       	movw	r30, r16
    22aa:	80 81       	ld	r24, Z
    22ac:	91 81       	ldd	r25, Z+1	; 0x01
    22ae:	22 81       	ldd	r18, Z+2	; 0x02
    22b0:	33 81       	ldd	r19, Z+3	; 0x03
    22b2:	0c 5f       	subi	r16, 0xFC	; 252
    22b4:	1f 4f       	sbci	r17, 0xFF	; 255
    22b6:	3f 93       	push	r19
    22b8:	2f 93       	push	r18
    22ba:	9f 93       	push	r25
    22bc:	8f 93       	push	r24
    22be:	ff 92       	push	r15
    22c0:	ef 92       	push	r14
    22c2:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <printf>
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
	{
		DataUnit temp = this->StoragesData[i];
		printf("%2d%2d%2d %2d%2d%2d\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
		for( int j = 0; j < MAX_NUM_DATA; ++j )
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	0f 90       	pop	r0
    22d0:	0f 90       	pop	r0
    22d2:	0c 15       	cp	r16, r12
    22d4:	1d 05       	cpc	r17, r13
    22d6:	41 f7       	brne	.-48     	; 0x22a8 <__stack+0xa9>
			printf("%3.3f ",temp.data[j]);
		printf("\n");
    22d8:	8a e0       	ldi	r24, 0x0A	; 10
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <putchar>
}

int DemoStorage_Device_Execute(DemoStorageDevice *this)
{
	printf("Executre Storage Device\n");
	for( int i=0; i<this->cur_pos; i++)
    22e0:	ff ef       	ldi	r31, 0xFF	; 255
    22e2:	af 1a       	sub	r10, r31
    22e4:	bf 0a       	sbc	r11, r31
    22e6:	88 e3       	ldi	r24, 0x38	; 56
    22e8:	88 0e       	add	r8, r24
    22ea:	91 1c       	adc	r9, r1
    22ec:	f3 01       	movw	r30, r6
    22ee:	86 81       	ldd	r24, Z+6	; 0x06
    22f0:	97 81       	ldd	r25, Z+7	; 0x07
    22f2:	a8 16       	cp	r10, r24
    22f4:	b9 06       	cpc	r11, r25
    22f6:	0c f4       	brge	.+2      	; 0x22fa <__stack+0xfb>
    22f8:	8d cf       	rjmp	.-230    	; 0x2214 <__stack+0x15>
		printf("%2d%2d%2d %2d%2d%2d\t",temp.data_tm.tm_year,temp.data_tm.tm_mon,temp.data_tm.tm_mday,temp.data_tm.tm_hour,temp.data_tm.tm_min,temp.data_tm.tm_sec);
		for( int j = 0; j < MAX_NUM_DATA; ++j )
			printf("%3.3f ",temp.data[j]);
		printf("\n");
	}
	this->cur_pos = 0;
    22fa:	f3 01       	movw	r30, r6
    22fc:	17 82       	std	Z+7, r1	; 0x07
    22fe:	16 82       	std	Z+6, r1	; 0x06
	return 0;
}
    2300:	80 e0       	ldi	r24, 0x00	; 0
    2302:	90 e0       	ldi	r25, 0x00	; 0
    2304:	e8 96       	adiw	r28, 0x38	; 56
    2306:	0f b6       	in	r0, 0x3f	; 63
    2308:	f8 94       	cli
    230a:	de bf       	out	0x3e, r29	; 62
    230c:	0f be       	out	0x3f, r0	; 63
    230e:	cd bf       	out	0x3d, r28	; 61
    2310:	df 91       	pop	r29
    2312:	cf 91       	pop	r28
    2314:	1f 91       	pop	r17
    2316:	0f 91       	pop	r16
    2318:	ff 90       	pop	r15
    231a:	ef 90       	pop	r14
    231c:	df 90       	pop	r13
    231e:	cf 90       	pop	r12
    2320:	bf 90       	pop	r11
    2322:	af 90       	pop	r10
    2324:	9f 90       	pop	r9
    2326:	8f 90       	pop	r8
    2328:	7f 90       	pop	r7
    232a:	6f 90       	pop	r6
    232c:	5f 90       	pop	r5
    232e:	4f 90       	pop	r4
    2330:	3f 90       	pop	r3
    2332:	08 95       	ret

00002334 <New_DemoStorage_Device>:
{
	return TYPE_STORAGE_DEVICE;
}

DemoStorageDevice* New_DemoStorage_Device( int infonum )
{
    2334:	cf 92       	push	r12
    2336:	df 92       	push	r13
    2338:	ef 92       	push	r14
    233a:	ff 92       	push	r15
    233c:	cf 93       	push	r28
    233e:	df 93       	push	r29
    2340:	7c 01       	movw	r14, r24
	DemoStorageDevice *p = malloc(sizeof(DemoStorageDevice));
    2342:	8a e0       	ldi	r24, 0x0A	; 10
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	0e 94 81 1a 	call	0x3502	; 0x3502 <malloc>
    234a:	ec 01       	movw	r28, r24
	p->info = infonum;
    234c:	fd 82       	std	Y+5, r15	; 0x05
    234e:	ec 82       	std	Y+4, r14	; 0x04
};


void DemoStorage_Device_VTinit( DemoStorageDevice *this )
{
	this->abstract.device_vt = &DemoStorageDevice_abstract_vmt;
    2350:	8c e1       	ldi	r24, 0x1C	; 28
    2352:	92 e0       	ldi	r25, 0x02	; 2
    2354:	99 83       	std	Y+1, r25	; 0x01
    2356:	88 83       	st	Y, r24



void DemoStorage_Device_Tinit(DemoStorageDevice *this)
{
	this->vmt = &DemoStorageDevice_vmt;
    2358:	84 e1       	ldi	r24, 0x14	; 20
    235a:	92 e0       	ldi	r25, 0x02	; 2
    235c:	9b 83       	std	Y+3, r25	; 0x03
    235e:	8a 83       	std	Y+2, r24	; 0x02
{
	DemoStorageDevice *p = malloc(sizeof(DemoStorageDevice));
	p->info = infonum;
	DemoStorage_Device_VTinit(p);
	DemoStorage_Device_Tinit(p);
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
    2360:	88 e4       	ldi	r24, 0x48	; 72
    2362:	93 e0       	ldi	r25, 0x03	; 3
    2364:	0e 94 81 1a 	call	0x3502	; 0x3502 <malloc>
    2368:	99 87       	std	Y+9, r25	; 0x09
    236a:	88 87       	std	Y+8, r24	; 0x08
    236c:	40 e0       	ldi	r20, 0x00	; 0
    236e:	50 e0       	ldi	r21, 0x00	; 0
{
	return TYPE_STORAGE_DEVICE;
}

DemoStorageDevice* New_DemoStorage_Device( int infonum )
{
    2370:	70 e0       	ldi	r23, 0x00	; 0
    2372:	60 e0       	ldi	r22, 0x00	; 0
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
		for( int j=0;j<MAX_NUM_DATA;j++)
		{
				p->StoragesData[i].data[j] = -9999; 
    2374:	0f 2e       	mov	r0, r31
    2376:	c1 2c       	mov	r12, r1
    2378:	fc e3       	ldi	r31, 0x3C	; 60
    237a:	df 2e       	mov	r13, r31
    237c:	fc e1       	ldi	r31, 0x1C	; 28
    237e:	ef 2e       	mov	r14, r31
    2380:	f6 ec       	ldi	r31, 0xC6	; 198
    2382:	ff 2e       	mov	r15, r31
    2384:	f0 2d       	mov	r31, r0
    2386:	2a c0       	rjmp	.+84     	; 0x23dc <New_DemoStorage_Device+0xa8>
    2388:	e8 85       	ldd	r30, Y+8	; 0x08
    238a:	f9 85       	ldd	r31, Y+9	; 0x09
    238c:	e4 0f       	add	r30, r20
    238e:	f5 1f       	adc	r31, r21
    2390:	c9 01       	movw	r24, r18
    2392:	88 0f       	add	r24, r24
    2394:	99 1f       	adc	r25, r25
    2396:	88 0f       	add	r24, r24
    2398:	99 1f       	adc	r25, r25
    239a:	e8 0f       	add	r30, r24
    239c:	f9 1f       	adc	r31, r25
    239e:	c0 82       	st	Z, r12
    23a0:	d1 82       	std	Z+1, r13	; 0x01
    23a2:	e2 82       	std	Z+2, r14	; 0x02
    23a4:	f3 82       	std	Z+3, r15	; 0x03
				p->StoragesData[i].data_tm.unix_msec = 0;
    23a6:	e8 85       	ldd	r30, Y+8	; 0x08
    23a8:	f9 85       	ldd	r31, Y+9	; 0x09
    23aa:	e4 0f       	add	r30, r20
    23ac:	f5 1f       	adc	r31, r21
    23ae:	14 8a       	std	Z+20, r1	; 0x14
    23b0:	15 8a       	std	Z+21, r1	; 0x15
    23b2:	16 8a       	std	Z+22, r1	; 0x16
    23b4:	17 8a       	std	Z+23, r1	; 0x17
				p->StoragesData[i].data_tm.unix_time = 0;
    23b6:	e8 85       	ldd	r30, Y+8	; 0x08
    23b8:	f9 85       	ldd	r31, Y+9	; 0x09
    23ba:	e4 0f       	add	r30, r20
    23bc:	f5 1f       	adc	r31, r21
    23be:	10 8a       	std	Z+16, r1	; 0x10
    23c0:	11 8a       	std	Z+17, r1	; 0x11
    23c2:	12 8a       	std	Z+18, r1	; 0x12
    23c4:	13 8a       	std	Z+19, r1	; 0x13
	DemoStorage_Device_VTinit(p);
	DemoStorage_Device_Tinit(p);
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
		for( int j=0;j<MAX_NUM_DATA;j++)
    23c6:	2f 5f       	subi	r18, 0xFF	; 255
    23c8:	3f 4f       	sbci	r19, 0xFF	; 255
    23ca:	24 30       	cpi	r18, 0x04	; 4
    23cc:	31 05       	cpc	r19, r1
    23ce:	e1 f6       	brne	.-72     	; 0x2388 <New_DemoStorage_Device+0x54>
    23d0:	48 5c       	subi	r20, 0xC8	; 200
    23d2:	5f 4f       	sbci	r21, 0xFF	; 255
	p->info = infonum;
	DemoStorage_Device_VTinit(p);
	DemoStorage_Device_Tinit(p);
	p->StoragesData = ( DataUnit * ) malloc( sizeof(DataUnit) * MAX_HOLD_DATA);
	
	for( int i=0;i<MAX_HOLD_DATA;i++)
    23d4:	48 34       	cpi	r20, 0x48	; 72
    23d6:	83 e0       	ldi	r24, 0x03	; 3
    23d8:	58 07       	cpc	r21, r24
    23da:	19 f0       	breq	.+6      	; 0x23e2 <New_DemoStorage_Device+0xae>
{
	return TYPE_STORAGE_DEVICE;
}

DemoStorageDevice* New_DemoStorage_Device( int infonum )
{
    23dc:	27 2f       	mov	r18, r23
    23de:	36 2f       	mov	r19, r22
    23e0:	d3 cf       	rjmp	.-90     	; 0x2388 <New_DemoStorage_Device+0x54>
		{
				p->StoragesData[i].data[j] = -9999; 
				p->StoragesData[i].data_tm.unix_msec = 0;
				p->StoragesData[i].data_tm.unix_time = 0;
		}
	p->cur_pos = 0;
    23e2:	1f 82       	std	Y+7, r1	; 0x07
    23e4:	1e 82       	std	Y+6, r1	; 0x06

	return p;
}
    23e6:	ce 01       	movw	r24, r28
    23e8:	df 91       	pop	r29
    23ea:	cf 91       	pop	r28
    23ec:	ff 90       	pop	r15
    23ee:	ef 90       	pop	r14
    23f0:	df 90       	pop	r13
    23f2:	cf 90       	pop	r12
    23f4:	08 95       	ret

000023f6 <LoadData_Device_VTinit>:
};


void LoadData_Device_VTinit( LoadDataDevice *this )
{
	this->abstract.device_vt = &LoadDataDevice_abstract_vmt;
    23f6:	2a e2       	ldi	r18, 0x2A	; 42
    23f8:	32 e0       	ldi	r19, 0x02	; 2
    23fa:	fc 01       	movw	r30, r24
    23fc:	31 83       	std	Z+1, r19	; 0x01
    23fe:	20 83       	st	Z, r18
    2400:	08 95       	ret

00002402 <LoadData_Device_init>:
}

int LoadData_Device_init( LoadDataDevice *this )
{
	return 0;
}
    2402:	80 e0       	ldi	r24, 0x00	; 0
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	08 95       	ret

00002408 <LoadData_Device_reset>:

int LoadData_Device_reset( LoadDataDevice *this )
{
	return 0;
}
    2408:	80 e0       	ldi	r24, 0x00	; 0
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	08 95       	ret

0000240e <LoadData_Device_getType>:

int LoadData_Device_getType( LoadDataDevice *this )
{
	return TYPE_DEVICE;
}
    240e:	85 e0       	ldi	r24, 0x05	; 5
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	08 95       	ret

00002414 <LoadData_Device_Tinit>:



void LoadData_Device_Tinit(LoadDataDevice *this)
{
	this->vmt = &LoadDataDevice_vmt;
    2414:	24 e2       	ldi	r18, 0x24	; 36
    2416:	32 e0       	ldi	r19, 0x02	; 2
    2418:	fc 01       	movw	r30, r24
    241a:	33 83       	std	Z+3, r19	; 0x03
    241c:	22 83       	std	Z+2, r18	; 0x02
    241e:	08 95       	ret

00002420 <LoadData_Device_Configure>:
}

int LoadData_Device_Configure(LoadDataDevice *this)
{
	return 0;
}
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	08 95       	ret

00002426 <LoadData_Device_Execute>:
{
	this->vmt = &LoadDataDevice_vmt;
}

int LoadData_Device_Execute(LoadDataDevice *this)
{
    2426:	cf 93       	push	r28
    2428:	df 93       	push	r29
    242a:	ec 01       	movw	r28, r24
	if( this -> store_device == NULL)
    242c:	8e 81       	ldd	r24, Y+6	; 0x06
    242e:	9f 81       	ldd	r25, Y+7	; 0x07
    2430:	89 2b       	or	r24, r25
    2432:	21 f4       	brne	.+8      	; 0x243c <LoadData_Device_Execute+0x16>
		printf("NULL store device\n");
    2434:	8f ea       	ldi	r24, 0xAF	; 175
    2436:	94 e0       	ldi	r25, 0x04	; 4
    2438:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <puts>
	cur_data = this->store_device->vmt->get_CurDataUnit(this->store_device);
    243c:	8e 81       	ldd	r24, Y+6	; 0x06
    243e:	9f 81       	ldd	r25, Y+7	; 0x07
    2440:	dc 01       	movw	r26, r24
    2442:	12 96       	adiw	r26, 0x02	; 2
    2444:	ed 91       	ld	r30, X+
    2446:	fc 91       	ld	r31, X
    2448:	13 97       	sbiw	r26, 0x03	; 3
    244a:	06 80       	ldd	r0, Z+6	; 0x06
    244c:	f7 81       	ldd	r31, Z+7	; 0x07
    244e:	e0 2d       	mov	r30, r0
    2450:	09 95       	icall
    2452:	90 93 b3 05 	sts	0x05B3, r25
    2456:	80 93 b2 05 	sts	0x05B2, r24
	/*TODO : could init -999 here */
	
	
	if( cur_data != NULL)
    245a:	89 2b       	or	r24, r25
    245c:	09 f4       	brne	.+2      	; 0x2460 <LoadData_Device_Execute+0x3a>
    245e:	44 c0       	rjmp	.+136    	; 0x24e8 <LoadData_Device_Execute+0xc2>
	{
		updateTime((uint32_t)TimeStamp,&cur_time);
    2460:	80 91 d6 05 	lds	r24, 0x05D6
    2464:	90 91 d7 05 	lds	r25, 0x05D7
    2468:	a0 91 d8 05 	lds	r26, 0x05D8
    246c:	b0 91 d9 05 	lds	r27, 0x05D9
    2470:	bc 01       	movw	r22, r24
    2472:	cd 01       	movw	r24, r26
    2474:	88 27       	eor	r24, r24
    2476:	99 27       	eor	r25, r25
    2478:	4b ee       	ldi	r20, 0xEB	; 235
    247a:	58 e0       	ldi	r21, 0x08	; 8
    247c:	0e 94 93 0e 	call	0x1d26	; 0x1d26 <updateTime>
		cur_data->data_tm.unix_time = cur_time.unix_time;
    2480:	80 91 b2 05 	lds	r24, 0x05B2
    2484:	90 91 b3 05 	lds	r25, 0x05B3
    2488:	40 91 eb 08 	lds	r20, 0x08EB
    248c:	50 91 ec 08 	lds	r21, 0x08EC
    2490:	60 91 ed 08 	lds	r22, 0x08ED
    2494:	70 91 ee 08 	lds	r23, 0x08EE
    2498:	fc 01       	movw	r30, r24
    249a:	40 8b       	std	Z+16, r20	; 0x10
    249c:	51 8b       	std	Z+17, r21	; 0x11
    249e:	62 8b       	std	Z+18, r22	; 0x12
    24a0:	73 8b       	std	Z+19, r23	; 0x13
		calcDate( &(cur_data->data_tm));
    24a2:	40 96       	adiw	r24, 0x10	; 16
    24a4:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <calcDate>
		printf("time debug3 %ld\n",cur_data->data_tm.unix_time);
    24a8:	e0 91 b2 05 	lds	r30, 0x05B2
    24ac:	f0 91 b3 05 	lds	r31, 0x05B3
    24b0:	83 89       	ldd	r24, Z+19	; 0x13
    24b2:	8f 93       	push	r24
    24b4:	82 89       	ldd	r24, Z+18	; 0x12
    24b6:	8f 93       	push	r24
    24b8:	81 89       	ldd	r24, Z+17	; 0x11
    24ba:	8f 93       	push	r24
    24bc:	80 89       	ldd	r24, Z+16	; 0x10
    24be:	8f 93       	push	r24
    24c0:	81 ec       	ldi	r24, 0xC1	; 193
    24c2:	94 e0       	ldi	r25, 0x04	; 4
    24c4:	9f 93       	push	r25
    24c6:	8f 93       	push	r24
    24c8:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <printf>
		TimeStamp = 0;
    24cc:	10 92 d6 05 	sts	0x05D6, r1
    24d0:	10 92 d7 05 	sts	0x05D7, r1
    24d4:	10 92 d8 05 	sts	0x05D8, r1
    24d8:	10 92 d9 05 	sts	0x05D9, r1
    24dc:	0f 90       	pop	r0
    24de:	0f 90       	pop	r0
    24e0:	0f 90       	pop	r0
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
	}
	return 0;
}
    24e8:	80 e0       	ldi	r24, 0x00	; 0
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	df 91       	pop	r29
    24ee:	cf 91       	pop	r28
    24f0:	08 95       	ret

000024f2 <New_LoadData_Device>:
{
	return TYPE_DEVICE;
}

LoadDataDevice* New_LoadData_Device( int infonum, DemoStorageDevice * ptr )
{
    24f2:	0f 93       	push	r16
    24f4:	1f 93       	push	r17
    24f6:	cf 93       	push	r28
    24f8:	df 93       	push	r29
    24fa:	8c 01       	movw	r16, r24
    24fc:	eb 01       	movw	r28, r22
	LoadDataDevice *p = malloc(sizeof(LoadDataDevice));
    24fe:	88 e0       	ldi	r24, 0x08	; 8
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	0e 94 81 1a 	call	0x3502	; 0x3502 <malloc>
    2506:	fc 01       	movw	r30, r24
	p->info = infonum;
    2508:	15 83       	std	Z+5, r17	; 0x05
    250a:	04 83       	std	Z+4, r16	; 0x04
	p->store_device = ptr;
    250c:	d7 83       	std	Z+7, r29	; 0x07
    250e:	c6 83       	std	Z+6, r28	; 0x06
};


void LoadData_Device_VTinit( LoadDataDevice *this )
{
	this->abstract.device_vt = &LoadDataDevice_abstract_vmt;
    2510:	8a e2       	ldi	r24, 0x2A	; 42
    2512:	92 e0       	ldi	r25, 0x02	; 2
    2514:	91 83       	std	Z+1, r25	; 0x01
    2516:	80 83       	st	Z, r24



void LoadData_Device_Tinit(LoadDataDevice *this)
{
	this->vmt = &LoadDataDevice_vmt;
    2518:	84 e2       	ldi	r24, 0x24	; 36
    251a:	92 e0       	ldi	r25, 0x02	; 2
    251c:	93 83       	std	Z+3, r25	; 0x03
    251e:	82 83       	std	Z+2, r24	; 0x02
	p->info = infonum;
	p->store_device = ptr;
	LoadData_Device_VTinit(p);
	LoadData_Device_Tinit(p);
	return p;
}
    2520:	cf 01       	movw	r24, r30
    2522:	df 91       	pop	r29
    2524:	cf 91       	pop	r28
    2526:	1f 91       	pop	r17
    2528:	0f 91       	pop	r16
    252a:	08 95       	ret

0000252c <BMP280_FctnInit>:



void BMP280_FctnInit(BMP280Sensor *this)
{
	this->inherited.vmt = &BMP280_vmt;
    252c:	2a e3       	ldi	r18, 0x3A	; 58
    252e:	32 e0       	ldi	r19, 0x02	; 2
    2530:	fc 01       	movw	r30, r24
    2532:	35 87       	std	Z+13, r19	; 0x0d
    2534:	24 87       	std	Z+12, r18	; 0x0c
    2536:	08 95       	ret

00002538 <BMP280_Configure>:

int BMP280_Configure(BMP280Sensor *this )
{
	// virtual function
	return 0;
}
    2538:	80 e0       	ldi	r24, 0x00	; 0
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	08 95       	ret

0000253e <BMP280_VTinit>:
	printf("BMP280_Error\n");
	return 0;
}
void BMP280_VTinit( BMP280Sensor* this)
{
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
    253e:	22 e3       	ldi	r18, 0x32	; 50
    2540:	32 e0       	ldi	r19, 0x02	; 2
    2542:	fc 01       	movw	r30, r24
    2544:	31 83       	std	Z+1, r19	; 0x01
    2546:	20 83       	st	Z, r18
    2548:	08 95       	ret

0000254a <BMP280_reset>:

int BMP280_reset( BMP280Sensor* this)
{
    // virtual function
    return 0;
}
    254a:	80 e0       	ldi	r24, 0x00	; 0
    254c:	90 e0       	ldi	r25, 0x00	; 0
    254e:	08 95       	ret

00002550 <BMP280_getType>:

int BMP280_getType(BMP280Sensor* this)
{
    return TYPE_SENSOR;
}
    2550:	83 e0       	ldi	r24, 0x03	; 3
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	08 95       	ret

00002556 <BMP280_Error>:
	return 0;
}

int BMP280_Error(BMP280Sensor *this )
{
	printf("BMP280_Error\n");
    2556:	82 ed       	ldi	r24, 0xD2	; 210
    2558:	94 e0       	ldi	r25, 0x04	; 4
    255a:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <puts>
	return 0;
}
    255e:	80 e0       	ldi	r24, 0x00	; 0
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	08 95       	ret

00002564 <BMP280_init>:
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
}

int BMP280_init( BMP280Sensor* this)
{
    printf("BMP280 Sensor Init\n");
    2564:	8f ed       	ldi	r24, 0xDF	; 223
    2566:	94 e0       	ldi	r25, 0x04	; 4
    2568:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <puts>
    return 0;
}
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	08 95       	ret

00002572 <BMP280_Request>:
	// virtual function
	return 0;
}

int BMP280_Request(BMP280Sensor *this )
{
    2572:	cf 93       	push	r28
    2574:	df 93       	push	r29
	printf("BMP280 Request\n");
    2576:	82 ef       	ldi	r24, 0xF2	; 242
    2578:	94 e0       	ldi	r25, 0x04	; 4
    257a:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <puts>
	int Delay = BMP280_StartMeasurment();
    257e:	0e 94 ed 02 	call	0x5da	; 0x5da <BMP280_StartMeasurment>
    2582:	c8 2f       	mov	r28, r24
    2584:	d0 e0       	ldi	r29, 0x00	; 0
	printf("\tWait for %d ms\n",Delay);
    2586:	1f 92       	push	r1
    2588:	8f 93       	push	r24
    258a:	81 e0       	ldi	r24, 0x01	; 1
    258c:	95 e0       	ldi	r25, 0x05	; 5
    258e:	9f 93       	push	r25
    2590:	8f 93       	push	r24
    2592:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <printf>
	if( Delay == 0 )
    2596:	0f 90       	pop	r0
    2598:	0f 90       	pop	r0
    259a:	0f 90       	pop	r0
    259c:	0f 90       	pop	r0
    259e:	20 97       	sbiw	r28, 0x00	; 0
    25a0:	19 f0       	breq	.+6      	; 0x25a8 <BMP280_Request+0x36>
		return 0;
	else
		return ( 1 + Delay );
    25a2:	ce 01       	movw	r24, r28
    25a4:	01 96       	adiw	r24, 0x01	; 1
    25a6:	02 c0       	rjmp	.+4      	; 0x25ac <BMP280_Request+0x3a>
{
	printf("BMP280 Request\n");
	int Delay = BMP280_StartMeasurment();
	printf("\tWait for %d ms\n",Delay);
	if( Delay == 0 )
		return 0;
    25a8:	80 e0       	ldi	r24, 0x00	; 0
    25aa:	90 e0       	ldi	r25, 0x00	; 0
	else
		return ( 1 + Delay );
}
    25ac:	df 91       	pop	r29
    25ae:	cf 91       	pop	r28
    25b0:	08 95       	ret

000025b2 <BMP280_Collect>:

int BMP280_Collect(BMP280Sensor *this )
{
    25b2:	cf 93       	push	r28
    25b4:	df 93       	push	r29
    25b6:	cd b7       	in	r28, 0x3d	; 61
    25b8:	de b7       	in	r29, 0x3e	; 62
    25ba:	28 97       	sbiw	r28, 0x08	; 8
    25bc:	0f b6       	in	r0, 0x3f	; 63
    25be:	f8 94       	cli
    25c0:	de bf       	out	0x3e, r29	; 62
    25c2:	0f be       	out	0x3f, r0	; 63
    25c4:	cd bf       	out	0x3d, r28	; 61
	printf("BMP280 Collect\n");
    25c6:	82 e1       	ldi	r24, 0x12	; 18
    25c8:	95 e0       	ldi	r25, 0x05	; 5
    25ca:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <puts>
	double T, P;
	BMP280_GetTemperatureAndPressure(&T,&P);
    25ce:	be 01       	movw	r22, r28
    25d0:	6b 5f       	subi	r22, 0xFB	; 251
    25d2:	7f 4f       	sbci	r23, 0xFF	; 255
    25d4:	ce 01       	movw	r24, r28
    25d6:	01 96       	adiw	r24, 0x01	; 1
    25d8:	0e 94 36 06 	call	0xc6c	; 0xc6c <BMP280_GetTemperatureAndPressure>
	printf("\tTemperature = %.3f\n\tPressure = %.3f\n",T,P);
    25dc:	88 85       	ldd	r24, Y+8	; 0x08
    25de:	8f 93       	push	r24
    25e0:	8f 81       	ldd	r24, Y+7	; 0x07
    25e2:	8f 93       	push	r24
    25e4:	8e 81       	ldd	r24, Y+6	; 0x06
    25e6:	8f 93       	push	r24
    25e8:	8d 81       	ldd	r24, Y+5	; 0x05
    25ea:	8f 93       	push	r24
    25ec:	8c 81       	ldd	r24, Y+4	; 0x04
    25ee:	8f 93       	push	r24
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	8f 93       	push	r24
    25f4:	8a 81       	ldd	r24, Y+2	; 0x02
    25f6:	8f 93       	push	r24
    25f8:	89 81       	ldd	r24, Y+1	; 0x01
    25fa:	8f 93       	push	r24
    25fc:	81 e2       	ldi	r24, 0x21	; 33
    25fe:	95 e0       	ldi	r25, 0x05	; 5
    2600:	9f 93       	push	r25
    2602:	8f 93       	push	r24
    2604:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <printf>
	/*
	for( int i = 0 ; i = this->inherited.getStartNum(); i < this->inherited.getEndNum() )
	{
	}
	*/
	cur_data->data[0] = T;
    2608:	e0 91 b2 05 	lds	r30, 0x05B2
    260c:	f0 91 b3 05 	lds	r31, 0x05B3
    2610:	89 81       	ldd	r24, Y+1	; 0x01
    2612:	9a 81       	ldd	r25, Y+2	; 0x02
    2614:	ab 81       	ldd	r26, Y+3	; 0x03
    2616:	bc 81       	ldd	r27, Y+4	; 0x04
    2618:	80 83       	st	Z, r24
    261a:	91 83       	std	Z+1, r25	; 0x01
    261c:	a2 83       	std	Z+2, r26	; 0x02
    261e:	b3 83       	std	Z+3, r27	; 0x03
	cur_data->data[1] = P; 
    2620:	e0 91 b2 05 	lds	r30, 0x05B2
    2624:	f0 91 b3 05 	lds	r31, 0x05B3
    2628:	8d 81       	ldd	r24, Y+5	; 0x05
    262a:	9e 81       	ldd	r25, Y+6	; 0x06
    262c:	af 81       	ldd	r26, Y+7	; 0x07
    262e:	b8 85       	ldd	r27, Y+8	; 0x08
    2630:	84 83       	std	Z+4, r24	; 0x04
    2632:	95 83       	std	Z+5, r25	; 0x05
    2634:	a6 83       	std	Z+6, r26	; 0x06
    2636:	b7 83       	std	Z+7, r27	; 0x07
	return 0;
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	cd bf       	out	0x3d, r28	; 61
}
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	28 96       	adiw	r28, 0x08	; 8
    2648:	0f b6       	in	r0, 0x3f	; 63
    264a:	f8 94       	cli
    264c:	de bf       	out	0x3e, r29	; 62
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	cd bf       	out	0x3d, r28	; 61
    2652:	df 91       	pop	r29
    2654:	cf 91       	pop	r28
    2656:	08 95       	ret

00002658 <New_BMP280_Sensor>:
    return TYPE_SENSOR;
}


BMP280Sensor* New_BMP280_Sensor( int num, int NumData )
{
    2658:	ef 92       	push	r14
    265a:	ff 92       	push	r15
    265c:	0f 93       	push	r16
    265e:	1f 93       	push	r17
    2660:	cf 93       	push	r28
    2662:	df 93       	push	r29
    2664:	7c 01       	movw	r14, r24
    2666:	8b 01       	movw	r16, r22
	BMP280Sensor *p = malloc(sizeof(BMP280Sensor));
    2668:	8e e0       	ldi	r24, 0x0E	; 14
    266a:	90 e0       	ldi	r25, 0x00	; 0
    266c:	0e 94 81 1a 	call	0x3502	; 0x3502 <malloc>
    2670:	ec 01       	movw	r28, r24
	printf("BMP280_Error\n");
	return 0;
}
void BMP280_VTinit( BMP280Sensor* this)
{
    this->inherited.abstract.device_vt = &BMP280_abstract_vmt;
    2672:	82 e3       	ldi	r24, 0x32	; 50
    2674:	92 e0       	ldi	r25, 0x02	; 2
    2676:	99 83       	std	Y+1, r25	; 0x01
    2678:	88 83       	st	Y, r24



void BMP280_FctnInit(BMP280Sensor *this)
{
	this->inherited.vmt = &BMP280_vmt;
    267a:	8a e3       	ldi	r24, 0x3A	; 58
    267c:	92 e0       	ldi	r25, 0x02	; 2
    267e:	9d 87       	std	Y+13, r25	; 0x0d
    2680:	8c 87       	std	Y+12, r24	; 0x0c
BMP280Sensor* New_BMP280_Sensor( int num, int NumData )
{
	BMP280Sensor *p = malloc(sizeof(BMP280Sensor));
    BMP280_VTinit( p );
    BMP280_FctnInit( p );
	p->inherited.test_num = num;
    2682:	fb 82       	std	Y+3, r15	; 0x03
    2684:	ea 82       	std	Y+2, r14	; 0x02
	
	p->inherited.NumOfData = NumData;
    2686:	1f 83       	std	Y+7, r17	; 0x07
    2688:	0e 83       	std	Y+6, r16	; 0x06
	p->inherited.StartNum = SensorDataCount;
    268a:	80 91 69 0a 	lds	r24, 0x0A69
    268e:	90 91 6a 0a 	lds	r25, 0x0A6A
    2692:	9d 83       	std	Y+5, r25	; 0x05
    2694:	8c 83       	std	Y+4, r24	; 0x04
	SensorDataCount += NumData;
    2696:	b8 01       	movw	r22, r16
    2698:	68 0f       	add	r22, r24
    269a:	79 1f       	adc	r23, r25
    269c:	70 93 6a 0a 	sts	0x0A6A, r23
    26a0:	60 93 69 0a 	sts	0x0A69, r22
	printf("SensorDataCount %d\n",SensorDataCount);
    26a4:	7f 93       	push	r23
    26a6:	6f 93       	push	r22
    26a8:	87 e4       	ldi	r24, 0x47	; 71
    26aa:	95 e0       	ldi	r25, 0x05	; 5
    26ac:	9f 93       	push	r25
    26ae:	8f 93       	push	r24
    26b0:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <printf>
	//printf("get start %d end %d\n",p->inherited.getStartNum(& (p->inherited) ),p->inherited.getEndNum(& (p->inherited)));
	
	return p;
    26b4:	0f 90       	pop	r0
    26b6:	0f 90       	pop	r0
    26b8:	0f 90       	pop	r0
    26ba:	0f 90       	pop	r0
    26bc:	ce 01       	movw	r24, r28
    26be:	df 91       	pop	r29
    26c0:	cf 91       	pop	r28
    26c2:	1f 91       	pop	r17
    26c4:	0f 91       	pop	r16
    26c6:	ff 90       	pop	r15
    26c8:	ef 90       	pop	r14
    26ca:	08 95       	ret

000026cc <Si7020_FctnInit>:



void Si7020_FctnInit(Si7020Sensor *this)
{
	this->inherited.vmt = &Si7020_vmt;
    26cc:	2c e4       	ldi	r18, 0x4C	; 76
    26ce:	32 e0       	ldi	r19, 0x02	; 2
    26d0:	fc 01       	movw	r30, r24
    26d2:	35 87       	std	Z+13, r19	; 0x0d
    26d4:	24 87       	std	Z+12, r18	; 0x0c
    26d6:	08 95       	ret

000026d8 <Si7020_Configure>:

int Si7020_Configure(Si7020Sensor *this )
{
	// virtual function
	return 0;
}
    26d8:	80 e0       	ldi	r24, 0x00	; 0
    26da:	90 e0       	ldi	r25, 0x00	; 0
    26dc:	08 95       	ret

000026de <Si7020_Error>:

int Si7020_Error(Si7020Sensor *this )
{
	// virtual function
	return 0;
}
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	08 95       	ret

000026e4 <Si7020_VTinit>:
void Si7020_VTinit( Si7020Sensor* this)
{
	this->inherited.abstract.device_vt = &Si7020_abstract_vmt;
    26e4:	24 e4       	ldi	r18, 0x44	; 68
    26e6:	32 e0       	ldi	r19, 0x02	; 2
    26e8:	fc 01       	movw	r30, r24
    26ea:	31 83       	std	Z+1, r19	; 0x01
    26ec:	20 83       	st	Z, r18
    26ee:	08 95       	ret

000026f0 <Si7020_reset>:

int Si7020_reset( Si7020Sensor* this)
{
	// virtual function
	return 0;
}
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	90 e0       	ldi	r25, 0x00	; 0
    26f4:	08 95       	ret

000026f6 <Si7020_getType>:

int Si7020_getType(Si7020Sensor* this)
{
	return TYPE_SENSOR;
}
    26f6:	83 e0       	ldi	r24, 0x03	; 3
    26f8:	90 e0       	ldi	r25, 0x00	; 0
    26fa:	08 95       	ret

000026fc <Si7020_Init>:
	this->inherited.abstract.device_vt = &Si7020_abstract_vmt;
}

int Si7020_Init( Si7020Sensor* this)
{
	printf("Si7020 Sensor Init\n");
    26fc:	8b e5       	ldi	r24, 0x5B	; 91
    26fe:	95 e0       	ldi	r25, 0x05	; 5
    2700:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <puts>
	return 0;
}
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	08 95       	ret

0000270a <Si7020_Request>:
	// virtual function
	return 0;
}

int Si7020_Request(Si7020Sensor *this )
{
    270a:	cf 93       	push	r28
    270c:	df 93       	push	r29
    270e:	ec 01       	movw	r28, r24
	printf("Si7020_Request\n");
    2710:	8e e6       	ldi	r24, 0x6E	; 110
    2712:	95 e0       	ldi	r25, 0x05	; 5
    2714:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <puts>
	Si7020_readTemperature(this->temperature_data,3);
    2718:	63 e0       	ldi	r22, 0x03	; 3
    271a:	ce 01       	movw	r24, r28
    271c:	0e 96       	adiw	r24, 0x0e	; 14
    271e:	0e 94 cc 06 	call	0xd98	; 0xd98 <Si7020_readTemperature>
	Si7020_readHumidity(this->humility_data,3);
    2722:	63 e0       	ldi	r22, 0x03	; 3
    2724:	ce 01       	movw	r24, r28
    2726:	41 96       	adiw	r24, 0x11	; 17
    2728:	0e 94 7c 06 	call	0xcf8	; 0xcf8 <Si7020_readHumidity>
	return 0;
}
    272c:	80 e0       	ldi	r24, 0x00	; 0
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	df 91       	pop	r29
    2732:	cf 91       	pop	r28
    2734:	08 95       	ret

00002736 <Si7020_Collect>:

int Si7020_Collect(Si7020Sensor *this )
{
    2736:	cf 92       	push	r12
    2738:	df 92       	push	r13
    273a:	ef 92       	push	r14
    273c:	ff 92       	push	r15
    273e:	0f 93       	push	r16
    2740:	1f 93       	push	r17
    2742:	cf 93       	push	r28
    2744:	df 93       	push	r29
    2746:	ec 01       	movw	r28, r24
	printf("Si7020_Collect\n");
    2748:	8d e7       	ldi	r24, 0x7D	; 125
    274a:	95 e0       	ldi	r25, 0x05	; 5
    274c:	0e 94 f1 1c 	call	0x39e2	; 0x39e2 <puts>
	float T = Si7020_calTemperature(this->temperature_data);
    2750:	ce 01       	movw	r24, r28
    2752:	0e 96       	adiw	r24, 0x0e	; 14
    2754:	0e 94 fe 06 	call	0xdfc	; 0xdfc <Si7020_calTemperature>
    2758:	c6 2e       	mov	r12, r22
    275a:	d7 2e       	mov	r13, r23
    275c:	e8 2e       	mov	r14, r24
    275e:	f9 2e       	mov	r15, r25
	float H = Si7020_calHumidity(this->humility_data);
    2760:	ce 01       	movw	r24, r28
    2762:	41 96       	adiw	r24, 0x11	; 17
    2764:	0e 94 ae 06 	call	0xd5c	; 0xd5c <Si7020_calHumidity>
    2768:	06 2f       	mov	r16, r22
    276a:	17 2f       	mov	r17, r23
    276c:	d8 2f       	mov	r29, r24
    276e:	c9 2f       	mov	r28, r25
	printf("\tTemperature = %.3f\n\tHumility = %.3f\n",T,H);
    2770:	9f 93       	push	r25
    2772:	8f 93       	push	r24
    2774:	7f 93       	push	r23
    2776:	6f 93       	push	r22
    2778:	ff 92       	push	r15
    277a:	ef 92       	push	r14
    277c:	df 92       	push	r13
    277e:	cf 92       	push	r12
    2780:	8c e8       	ldi	r24, 0x8C	; 140
    2782:	95 e0       	ldi	r25, 0x05	; 5
    2784:	9f 93       	push	r25
    2786:	8f 93       	push	r24
    2788:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <printf>
	cur_data->data[2] = T;
    278c:	e0 91 b2 05 	lds	r30, 0x05B2
    2790:	f0 91 b3 05 	lds	r31, 0x05B3
    2794:	4c 2d       	mov	r20, r12
    2796:	5d 2d       	mov	r21, r13
    2798:	6e 2d       	mov	r22, r14
    279a:	7f 2d       	mov	r23, r15
    279c:	40 87       	std	Z+8, r20	; 0x08
    279e:	51 87       	std	Z+9, r21	; 0x09
    27a0:	62 87       	std	Z+10, r22	; 0x0a
    27a2:	73 87       	std	Z+11, r23	; 0x0b
	cur_data->data[3] = H;
    27a4:	80 2f       	mov	r24, r16
    27a6:	91 2f       	mov	r25, r17
    27a8:	ad 2f       	mov	r26, r29
    27aa:	bc 2f       	mov	r27, r28
    27ac:	84 87       	std	Z+12, r24	; 0x0c
    27ae:	95 87       	std	Z+13, r25	; 0x0d
    27b0:	a6 87       	std	Z+14, r26	; 0x0e
    27b2:	b7 87       	std	Z+15, r27	; 0x0f
	return 0;
    27b4:	8d b7       	in	r24, 0x3d	; 61
    27b6:	9e b7       	in	r25, 0x3e	; 62
    27b8:	0a 96       	adiw	r24, 0x0a	; 10
    27ba:	0f b6       	in	r0, 0x3f	; 63
    27bc:	f8 94       	cli
    27be:	9e bf       	out	0x3e, r25	; 62
    27c0:	0f be       	out	0x3f, r0	; 63
    27c2:	8d bf       	out	0x3d, r24	; 61
}
    27c4:	80 e0       	ldi	r24, 0x00	; 0
    27c6:	90 e0       	ldi	r25, 0x00	; 0
    27c8:	df 91       	pop	r29
    27ca:	cf 91       	pop	r28
    27cc:	1f 91       	pop	r17
    27ce:	0f 91       	pop	r16
    27d0:	ff 90       	pop	r15
    27d2:	ef 90       	pop	r14
    27d4:	df 90       	pop	r13
    27d6:	cf 90       	pop	r12
    27d8:	08 95       	ret

000027da <New_Si7020_Sensor>:
	return TYPE_SENSOR;
}


Si7020Sensor* New_Si7020_Sensor( int num, int NumData)
{
    27da:	ef 92       	push	r14
    27dc:	ff 92       	push	r15
    27de:	0f 93       	push	r16
    27e0:	1f 93       	push	r17
    27e2:	cf 93       	push	r28
    27e4:	df 93       	push	r29
    27e6:	7c 01       	movw	r14, r24
    27e8:	8b 01       	movw	r16, r22
	Si7020Sensor *p = malloc(sizeof(Si7020Sensor));
    27ea:	84 e1       	ldi	r24, 0x14	; 20
    27ec:	90 e0       	ldi	r25, 0x00	; 0
    27ee:	0e 94 81 1a 	call	0x3502	; 0x3502 <malloc>
    27f2:	ec 01       	movw	r28, r24
	// virtual function
	return 0;
}
void Si7020_VTinit( Si7020Sensor* this)
{
	this->inherited.abstract.device_vt = &Si7020_abstract_vmt;
    27f4:	84 e4       	ldi	r24, 0x44	; 68
    27f6:	92 e0       	ldi	r25, 0x02	; 2
    27f8:	99 83       	std	Y+1, r25	; 0x01
    27fa:	88 83       	st	Y, r24



void Si7020_FctnInit(Si7020Sensor *this)
{
	this->inherited.vmt = &Si7020_vmt;
    27fc:	8c e4       	ldi	r24, 0x4C	; 76
    27fe:	92 e0       	ldi	r25, 0x02	; 2
    2800:	9d 87       	std	Y+13, r25	; 0x0d
    2802:	8c 87       	std	Y+12, r24	; 0x0c
Si7020Sensor* New_Si7020_Sensor( int num, int NumData)
{
	Si7020Sensor *p = malloc(sizeof(Si7020Sensor));
	Si7020_VTinit( p );
	Si7020_FctnInit( p );
	p->inherited.test_num = num;
    2804:	fb 82       	std	Y+3, r15	; 0x03
    2806:	ea 82       	std	Y+2, r14	; 0x02
	
	p->inherited.NumOfData = NumData;
    2808:	1f 83       	std	Y+7, r17	; 0x07
    280a:	0e 83       	std	Y+6, r16	; 0x06
	p->inherited.StartNum = SensorDataCount;
    280c:	80 91 69 0a 	lds	r24, 0x0A69
    2810:	90 91 6a 0a 	lds	r25, 0x0A6A
    2814:	9d 83       	std	Y+5, r25	; 0x05
    2816:	8c 83       	std	Y+4, r24	; 0x04
	SensorDataCount += NumData;
    2818:	b8 01       	movw	r22, r16
    281a:	68 0f       	add	r22, r24
    281c:	79 1f       	adc	r23, r25
    281e:	70 93 6a 0a 	sts	0x0A6A, r23
    2822:	60 93 69 0a 	sts	0x0A69, r22
	printf("SensorDataCount %d\n",SensorDataCount);
    2826:	7f 93       	push	r23
    2828:	6f 93       	push	r22
    282a:	87 e4       	ldi	r24, 0x47	; 71
    282c:	95 e0       	ldi	r25, 0x05	; 5
    282e:	9f 93       	push	r25
    2830:	8f 93       	push	r24
    2832:	0e 94 d4 1c 	call	0x39a8	; 0x39a8 <printf>
	
	for(int i = 0; i < 3; ++i )
	{
		p->temperature_data[i] = 0;
    2836:	1e 86       	std	Y+14, r1	; 0x0e
		p->humility_data[i] = 0;
    2838:	19 8a       	std	Y+17, r1	; 0x11
	SensorDataCount += NumData;
	printf("SensorDataCount %d\n",SensorDataCount);
	
	for(int i = 0; i < 3; ++i )
	{
		p->temperature_data[i] = 0;
    283a:	1f 86       	std	Y+15, r1	; 0x0f
		p->humility_data[i] = 0;
    283c:	1a 8a       	std	Y+18, r1	; 0x12
	SensorDataCount += NumData;
	printf("SensorDataCount %d\n",SensorDataCount);
	
	for(int i = 0; i < 3; ++i )
	{
		p->temperature_data[i] = 0;
    283e:	18 8a       	std	Y+16, r1	; 0x10
		p->humility_data[i] = 0;
    2840:	1b 8a       	std	Y+19, r1	; 0x13
	}
	
	return p;
    2842:	0f 90       	pop	r0
    2844:	0f 90       	pop	r0
    2846:	0f 90       	pop	r0
    2848:	0f 90       	pop	r0
    284a:	ce 01       	movw	r24, r28
    284c:	df 91       	pop	r29
    284e:	cf 91       	pop	r28
    2850:	1f 91       	pop	r17
    2852:	0f 91       	pop	r16
    2854:	ff 90       	pop	r15
    2856:	ef 90       	pop	r14
    2858:	08 95       	ret

0000285a <__subsf3>:
    285a:	50 58       	subi	r21, 0x80	; 128

0000285c <__addsf3>:
    285c:	bb 27       	eor	r27, r27
    285e:	aa 27       	eor	r26, r26
    2860:	0e 94 45 14 	call	0x288a	; 0x288a <__addsf3x>
    2864:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <__fp_round>
    2868:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <__fp_pscA>
    286c:	38 f0       	brcs	.+14     	; 0x287c <__addsf3+0x20>
    286e:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fp_pscB>
    2872:	20 f0       	brcs	.+8      	; 0x287c <__addsf3+0x20>
    2874:	39 f4       	brne	.+14     	; 0x2884 <__addsf3+0x28>
    2876:	9f 3f       	cpi	r25, 0xFF	; 255
    2878:	19 f4       	brne	.+6      	; 0x2880 <__addsf3+0x24>
    287a:	26 f4       	brtc	.+8      	; 0x2884 <__addsf3+0x28>
    287c:	0c 94 ae 15 	jmp	0x2b5c	; 0x2b5c <__fp_nan>
    2880:	0e f4       	brtc	.+2      	; 0x2884 <__addsf3+0x28>
    2882:	e0 95       	com	r30
    2884:	e7 fb       	bst	r30, 7
    2886:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__fp_inf>

0000288a <__addsf3x>:
    288a:	e9 2f       	mov	r30, r25
    288c:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <__fp_split3>
    2890:	58 f3       	brcs	.-42     	; 0x2868 <__addsf3+0xc>
    2892:	ba 17       	cp	r27, r26
    2894:	62 07       	cpc	r22, r18
    2896:	73 07       	cpc	r23, r19
    2898:	84 07       	cpc	r24, r20
    289a:	95 07       	cpc	r25, r21
    289c:	20 f0       	brcs	.+8      	; 0x28a6 <__addsf3x+0x1c>
    289e:	79 f4       	brne	.+30     	; 0x28be <__addsf3x+0x34>
    28a0:	a6 f5       	brtc	.+104    	; 0x290a <__addsf3x+0x80>
    28a2:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__fp_zero>
    28a6:	0e f4       	brtc	.+2      	; 0x28aa <__addsf3x+0x20>
    28a8:	e0 95       	com	r30
    28aa:	0b 2e       	mov	r0, r27
    28ac:	ba 2f       	mov	r27, r26
    28ae:	a0 2d       	mov	r26, r0
    28b0:	0b 01       	movw	r0, r22
    28b2:	b9 01       	movw	r22, r18
    28b4:	90 01       	movw	r18, r0
    28b6:	0c 01       	movw	r0, r24
    28b8:	ca 01       	movw	r24, r20
    28ba:	a0 01       	movw	r20, r0
    28bc:	11 24       	eor	r1, r1
    28be:	ff 27       	eor	r31, r31
    28c0:	59 1b       	sub	r21, r25
    28c2:	99 f0       	breq	.+38     	; 0x28ea <__addsf3x+0x60>
    28c4:	59 3f       	cpi	r21, 0xF9	; 249
    28c6:	50 f4       	brcc	.+20     	; 0x28dc <__addsf3x+0x52>
    28c8:	50 3e       	cpi	r21, 0xE0	; 224
    28ca:	68 f1       	brcs	.+90     	; 0x2926 <__addsf3x+0x9c>
    28cc:	1a 16       	cp	r1, r26
    28ce:	f0 40       	sbci	r31, 0x00	; 0
    28d0:	a2 2f       	mov	r26, r18
    28d2:	23 2f       	mov	r18, r19
    28d4:	34 2f       	mov	r19, r20
    28d6:	44 27       	eor	r20, r20
    28d8:	58 5f       	subi	r21, 0xF8	; 248
    28da:	f3 cf       	rjmp	.-26     	; 0x28c2 <__addsf3x+0x38>
    28dc:	46 95       	lsr	r20
    28de:	37 95       	ror	r19
    28e0:	27 95       	ror	r18
    28e2:	a7 95       	ror	r26
    28e4:	f0 40       	sbci	r31, 0x00	; 0
    28e6:	53 95       	inc	r21
    28e8:	c9 f7       	brne	.-14     	; 0x28dc <__addsf3x+0x52>
    28ea:	7e f4       	brtc	.+30     	; 0x290a <__addsf3x+0x80>
    28ec:	1f 16       	cp	r1, r31
    28ee:	ba 0b       	sbc	r27, r26
    28f0:	62 0b       	sbc	r22, r18
    28f2:	73 0b       	sbc	r23, r19
    28f4:	84 0b       	sbc	r24, r20
    28f6:	ba f0       	brmi	.+46     	; 0x2926 <__addsf3x+0x9c>
    28f8:	91 50       	subi	r25, 0x01	; 1
    28fa:	a1 f0       	breq	.+40     	; 0x2924 <__addsf3x+0x9a>
    28fc:	ff 0f       	add	r31, r31
    28fe:	bb 1f       	adc	r27, r27
    2900:	66 1f       	adc	r22, r22
    2902:	77 1f       	adc	r23, r23
    2904:	88 1f       	adc	r24, r24
    2906:	c2 f7       	brpl	.-16     	; 0x28f8 <__addsf3x+0x6e>
    2908:	0e c0       	rjmp	.+28     	; 0x2926 <__addsf3x+0x9c>
    290a:	ba 0f       	add	r27, r26
    290c:	62 1f       	adc	r22, r18
    290e:	73 1f       	adc	r23, r19
    2910:	84 1f       	adc	r24, r20
    2912:	48 f4       	brcc	.+18     	; 0x2926 <__addsf3x+0x9c>
    2914:	87 95       	ror	r24
    2916:	77 95       	ror	r23
    2918:	67 95       	ror	r22
    291a:	b7 95       	ror	r27
    291c:	f7 95       	ror	r31
    291e:	9e 3f       	cpi	r25, 0xFE	; 254
    2920:	08 f0       	brcs	.+2      	; 0x2924 <__addsf3x+0x9a>
    2922:	b0 cf       	rjmp	.-160    	; 0x2884 <__addsf3+0x28>
    2924:	93 95       	inc	r25
    2926:	88 0f       	add	r24, r24
    2928:	08 f0       	brcs	.+2      	; 0x292c <__addsf3x+0xa2>
    292a:	99 27       	eor	r25, r25
    292c:	ee 0f       	add	r30, r30
    292e:	97 95       	ror	r25
    2930:	87 95       	ror	r24
    2932:	08 95       	ret

00002934 <__cmpsf2>:
    2934:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__fp_cmp>
    2938:	08 f4       	brcc	.+2      	; 0x293c <__cmpsf2+0x8>
    293a:	81 e0       	ldi	r24, 0x01	; 1
    293c:	08 95       	ret

0000293e <__divsf3>:
    293e:	0e 94 b3 14 	call	0x2966	; 0x2966 <__divsf3x>
    2942:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <__fp_round>
    2946:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fp_pscB>
    294a:	58 f0       	brcs	.+22     	; 0x2962 <__divsf3+0x24>
    294c:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <__fp_pscA>
    2950:	40 f0       	brcs	.+16     	; 0x2962 <__divsf3+0x24>
    2952:	29 f4       	brne	.+10     	; 0x295e <__divsf3+0x20>
    2954:	5f 3f       	cpi	r21, 0xFF	; 255
    2956:	29 f0       	breq	.+10     	; 0x2962 <__divsf3+0x24>
    2958:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__fp_inf>
    295c:	51 11       	cpse	r21, r1
    295e:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__fp_szero>
    2962:	0c 94 ae 15 	jmp	0x2b5c	; 0x2b5c <__fp_nan>

00002966 <__divsf3x>:
    2966:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <__fp_split3>
    296a:	68 f3       	brcs	.-38     	; 0x2946 <__divsf3+0x8>

0000296c <__divsf3_pse>:
    296c:	99 23       	and	r25, r25
    296e:	b1 f3       	breq	.-20     	; 0x295c <__divsf3+0x1e>
    2970:	55 23       	and	r21, r21
    2972:	91 f3       	breq	.-28     	; 0x2958 <__divsf3+0x1a>
    2974:	95 1b       	sub	r25, r21
    2976:	55 0b       	sbc	r21, r21
    2978:	bb 27       	eor	r27, r27
    297a:	aa 27       	eor	r26, r26
    297c:	62 17       	cp	r22, r18
    297e:	73 07       	cpc	r23, r19
    2980:	84 07       	cpc	r24, r20
    2982:	38 f0       	brcs	.+14     	; 0x2992 <__divsf3_pse+0x26>
    2984:	9f 5f       	subi	r25, 0xFF	; 255
    2986:	5f 4f       	sbci	r21, 0xFF	; 255
    2988:	22 0f       	add	r18, r18
    298a:	33 1f       	adc	r19, r19
    298c:	44 1f       	adc	r20, r20
    298e:	aa 1f       	adc	r26, r26
    2990:	a9 f3       	breq	.-22     	; 0x297c <__divsf3_pse+0x10>
    2992:	35 d0       	rcall	.+106    	; 0x29fe <__divsf3_pse+0x92>
    2994:	0e 2e       	mov	r0, r30
    2996:	3a f0       	brmi	.+14     	; 0x29a6 <__divsf3_pse+0x3a>
    2998:	e0 e8       	ldi	r30, 0x80	; 128
    299a:	32 d0       	rcall	.+100    	; 0x2a00 <__divsf3_pse+0x94>
    299c:	91 50       	subi	r25, 0x01	; 1
    299e:	50 40       	sbci	r21, 0x00	; 0
    29a0:	e6 95       	lsr	r30
    29a2:	00 1c       	adc	r0, r0
    29a4:	ca f7       	brpl	.-14     	; 0x2998 <__divsf3_pse+0x2c>
    29a6:	2b d0       	rcall	.+86     	; 0x29fe <__divsf3_pse+0x92>
    29a8:	fe 2f       	mov	r31, r30
    29aa:	29 d0       	rcall	.+82     	; 0x29fe <__divsf3_pse+0x92>
    29ac:	66 0f       	add	r22, r22
    29ae:	77 1f       	adc	r23, r23
    29b0:	88 1f       	adc	r24, r24
    29b2:	bb 1f       	adc	r27, r27
    29b4:	26 17       	cp	r18, r22
    29b6:	37 07       	cpc	r19, r23
    29b8:	48 07       	cpc	r20, r24
    29ba:	ab 07       	cpc	r26, r27
    29bc:	b0 e8       	ldi	r27, 0x80	; 128
    29be:	09 f0       	breq	.+2      	; 0x29c2 <__divsf3_pse+0x56>
    29c0:	bb 0b       	sbc	r27, r27
    29c2:	80 2d       	mov	r24, r0
    29c4:	bf 01       	movw	r22, r30
    29c6:	ff 27       	eor	r31, r31
    29c8:	93 58       	subi	r25, 0x83	; 131
    29ca:	5f 4f       	sbci	r21, 0xFF	; 255
    29cc:	3a f0       	brmi	.+14     	; 0x29dc <__divsf3_pse+0x70>
    29ce:	9e 3f       	cpi	r25, 0xFE	; 254
    29d0:	51 05       	cpc	r21, r1
    29d2:	78 f0       	brcs	.+30     	; 0x29f2 <__divsf3_pse+0x86>
    29d4:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__fp_inf>
    29d8:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__fp_szero>
    29dc:	5f 3f       	cpi	r21, 0xFF	; 255
    29de:	e4 f3       	brlt	.-8      	; 0x29d8 <__divsf3_pse+0x6c>
    29e0:	98 3e       	cpi	r25, 0xE8	; 232
    29e2:	d4 f3       	brlt	.-12     	; 0x29d8 <__divsf3_pse+0x6c>
    29e4:	86 95       	lsr	r24
    29e6:	77 95       	ror	r23
    29e8:	67 95       	ror	r22
    29ea:	b7 95       	ror	r27
    29ec:	f7 95       	ror	r31
    29ee:	9f 5f       	subi	r25, 0xFF	; 255
    29f0:	c9 f7       	brne	.-14     	; 0x29e4 <__divsf3_pse+0x78>
    29f2:	88 0f       	add	r24, r24
    29f4:	91 1d       	adc	r25, r1
    29f6:	96 95       	lsr	r25
    29f8:	87 95       	ror	r24
    29fa:	97 f9       	bld	r25, 7
    29fc:	08 95       	ret
    29fe:	e1 e0       	ldi	r30, 0x01	; 1
    2a00:	66 0f       	add	r22, r22
    2a02:	77 1f       	adc	r23, r23
    2a04:	88 1f       	adc	r24, r24
    2a06:	bb 1f       	adc	r27, r27
    2a08:	62 17       	cp	r22, r18
    2a0a:	73 07       	cpc	r23, r19
    2a0c:	84 07       	cpc	r24, r20
    2a0e:	ba 07       	cpc	r27, r26
    2a10:	20 f0       	brcs	.+8      	; 0x2a1a <__divsf3_pse+0xae>
    2a12:	62 1b       	sub	r22, r18
    2a14:	73 0b       	sbc	r23, r19
    2a16:	84 0b       	sbc	r24, r20
    2a18:	ba 0b       	sbc	r27, r26
    2a1a:	ee 1f       	adc	r30, r30
    2a1c:	88 f7       	brcc	.-30     	; 0x2a00 <__divsf3_pse+0x94>
    2a1e:	e0 95       	com	r30
    2a20:	08 95       	ret

00002a22 <__fixsfsi>:
    2a22:	0e 94 18 15 	call	0x2a30	; 0x2a30 <__fixunssfsi>
    2a26:	68 94       	set
    2a28:	b1 11       	cpse	r27, r1
    2a2a:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__fp_szero>
    2a2e:	08 95       	ret

00002a30 <__fixunssfsi>:
    2a30:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <__fp_splitA>
    2a34:	88 f0       	brcs	.+34     	; 0x2a58 <__fixunssfsi+0x28>
    2a36:	9f 57       	subi	r25, 0x7F	; 127
    2a38:	98 f0       	brcs	.+38     	; 0x2a60 <__fixunssfsi+0x30>
    2a3a:	b9 2f       	mov	r27, r25
    2a3c:	99 27       	eor	r25, r25
    2a3e:	b7 51       	subi	r27, 0x17	; 23
    2a40:	b0 f0       	brcs	.+44     	; 0x2a6e <__fixunssfsi+0x3e>
    2a42:	e1 f0       	breq	.+56     	; 0x2a7c <__fixunssfsi+0x4c>
    2a44:	66 0f       	add	r22, r22
    2a46:	77 1f       	adc	r23, r23
    2a48:	88 1f       	adc	r24, r24
    2a4a:	99 1f       	adc	r25, r25
    2a4c:	1a f0       	brmi	.+6      	; 0x2a54 <__fixunssfsi+0x24>
    2a4e:	ba 95       	dec	r27
    2a50:	c9 f7       	brne	.-14     	; 0x2a44 <__fixunssfsi+0x14>
    2a52:	14 c0       	rjmp	.+40     	; 0x2a7c <__fixunssfsi+0x4c>
    2a54:	b1 30       	cpi	r27, 0x01	; 1
    2a56:	91 f0       	breq	.+36     	; 0x2a7c <__fixunssfsi+0x4c>
    2a58:	0e 94 f2 15 	call	0x2be4	; 0x2be4 <__fp_zero>
    2a5c:	b1 e0       	ldi	r27, 0x01	; 1
    2a5e:	08 95       	ret
    2a60:	0c 94 f2 15 	jmp	0x2be4	; 0x2be4 <__fp_zero>
    2a64:	67 2f       	mov	r22, r23
    2a66:	78 2f       	mov	r23, r24
    2a68:	88 27       	eor	r24, r24
    2a6a:	b8 5f       	subi	r27, 0xF8	; 248
    2a6c:	39 f0       	breq	.+14     	; 0x2a7c <__fixunssfsi+0x4c>
    2a6e:	b9 3f       	cpi	r27, 0xF9	; 249
    2a70:	cc f3       	brlt	.-14     	; 0x2a64 <__fixunssfsi+0x34>
    2a72:	86 95       	lsr	r24
    2a74:	77 95       	ror	r23
    2a76:	67 95       	ror	r22
    2a78:	b3 95       	inc	r27
    2a7a:	d9 f7       	brne	.-10     	; 0x2a72 <__fixunssfsi+0x42>
    2a7c:	3e f4       	brtc	.+14     	; 0x2a8c <__fixunssfsi+0x5c>
    2a7e:	90 95       	com	r25
    2a80:	80 95       	com	r24
    2a82:	70 95       	com	r23
    2a84:	61 95       	neg	r22
    2a86:	7f 4f       	sbci	r23, 0xFF	; 255
    2a88:	8f 4f       	sbci	r24, 0xFF	; 255
    2a8a:	9f 4f       	sbci	r25, 0xFF	; 255
    2a8c:	08 95       	ret

00002a8e <__floatunsisf>:
    2a8e:	e8 94       	clt
    2a90:	09 c0       	rjmp	.+18     	; 0x2aa4 <__floatsisf+0x12>

00002a92 <__floatsisf>:
    2a92:	97 fb       	bst	r25, 7
    2a94:	3e f4       	brtc	.+14     	; 0x2aa4 <__floatsisf+0x12>
    2a96:	90 95       	com	r25
    2a98:	80 95       	com	r24
    2a9a:	70 95       	com	r23
    2a9c:	61 95       	neg	r22
    2a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa0:	8f 4f       	sbci	r24, 0xFF	; 255
    2aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    2aa4:	99 23       	and	r25, r25
    2aa6:	a9 f0       	breq	.+42     	; 0x2ad2 <__floatsisf+0x40>
    2aa8:	f9 2f       	mov	r31, r25
    2aaa:	96 e9       	ldi	r25, 0x96	; 150
    2aac:	bb 27       	eor	r27, r27
    2aae:	93 95       	inc	r25
    2ab0:	f6 95       	lsr	r31
    2ab2:	87 95       	ror	r24
    2ab4:	77 95       	ror	r23
    2ab6:	67 95       	ror	r22
    2ab8:	b7 95       	ror	r27
    2aba:	f1 11       	cpse	r31, r1
    2abc:	f8 cf       	rjmp	.-16     	; 0x2aae <__floatsisf+0x1c>
    2abe:	fa f4       	brpl	.+62     	; 0x2afe <__floatsisf+0x6c>
    2ac0:	bb 0f       	add	r27, r27
    2ac2:	11 f4       	brne	.+4      	; 0x2ac8 <__floatsisf+0x36>
    2ac4:	60 ff       	sbrs	r22, 0
    2ac6:	1b c0       	rjmp	.+54     	; 0x2afe <__floatsisf+0x6c>
    2ac8:	6f 5f       	subi	r22, 0xFF	; 255
    2aca:	7f 4f       	sbci	r23, 0xFF	; 255
    2acc:	8f 4f       	sbci	r24, 0xFF	; 255
    2ace:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad0:	16 c0       	rjmp	.+44     	; 0x2afe <__floatsisf+0x6c>
    2ad2:	88 23       	and	r24, r24
    2ad4:	11 f0       	breq	.+4      	; 0x2ada <__floatsisf+0x48>
    2ad6:	96 e9       	ldi	r25, 0x96	; 150
    2ad8:	11 c0       	rjmp	.+34     	; 0x2afc <__floatsisf+0x6a>
    2ada:	77 23       	and	r23, r23
    2adc:	21 f0       	breq	.+8      	; 0x2ae6 <__floatsisf+0x54>
    2ade:	9e e8       	ldi	r25, 0x8E	; 142
    2ae0:	87 2f       	mov	r24, r23
    2ae2:	76 2f       	mov	r23, r22
    2ae4:	05 c0       	rjmp	.+10     	; 0x2af0 <__floatsisf+0x5e>
    2ae6:	66 23       	and	r22, r22
    2ae8:	71 f0       	breq	.+28     	; 0x2b06 <__floatsisf+0x74>
    2aea:	96 e8       	ldi	r25, 0x86	; 134
    2aec:	86 2f       	mov	r24, r22
    2aee:	70 e0       	ldi	r23, 0x00	; 0
    2af0:	60 e0       	ldi	r22, 0x00	; 0
    2af2:	2a f0       	brmi	.+10     	; 0x2afe <__floatsisf+0x6c>
    2af4:	9a 95       	dec	r25
    2af6:	66 0f       	add	r22, r22
    2af8:	77 1f       	adc	r23, r23
    2afa:	88 1f       	adc	r24, r24
    2afc:	da f7       	brpl	.-10     	; 0x2af4 <__floatsisf+0x62>
    2afe:	88 0f       	add	r24, r24
    2b00:	96 95       	lsr	r25
    2b02:	87 95       	ror	r24
    2b04:	97 f9       	bld	r25, 7
    2b06:	08 95       	ret

00002b08 <__fp_cmp>:
    2b08:	99 0f       	add	r25, r25
    2b0a:	00 08       	sbc	r0, r0
    2b0c:	55 0f       	add	r21, r21
    2b0e:	aa 0b       	sbc	r26, r26
    2b10:	e0 e8       	ldi	r30, 0x80	; 128
    2b12:	fe ef       	ldi	r31, 0xFE	; 254
    2b14:	16 16       	cp	r1, r22
    2b16:	17 06       	cpc	r1, r23
    2b18:	e8 07       	cpc	r30, r24
    2b1a:	f9 07       	cpc	r31, r25
    2b1c:	c0 f0       	brcs	.+48     	; 0x2b4e <__fp_cmp+0x46>
    2b1e:	12 16       	cp	r1, r18
    2b20:	13 06       	cpc	r1, r19
    2b22:	e4 07       	cpc	r30, r20
    2b24:	f5 07       	cpc	r31, r21
    2b26:	98 f0       	brcs	.+38     	; 0x2b4e <__fp_cmp+0x46>
    2b28:	62 1b       	sub	r22, r18
    2b2a:	73 0b       	sbc	r23, r19
    2b2c:	84 0b       	sbc	r24, r20
    2b2e:	95 0b       	sbc	r25, r21
    2b30:	39 f4       	brne	.+14     	; 0x2b40 <__fp_cmp+0x38>
    2b32:	0a 26       	eor	r0, r26
    2b34:	61 f0       	breq	.+24     	; 0x2b4e <__fp_cmp+0x46>
    2b36:	23 2b       	or	r18, r19
    2b38:	24 2b       	or	r18, r20
    2b3a:	25 2b       	or	r18, r21
    2b3c:	21 f4       	brne	.+8      	; 0x2b46 <__fp_cmp+0x3e>
    2b3e:	08 95       	ret
    2b40:	0a 26       	eor	r0, r26
    2b42:	09 f4       	brne	.+2      	; 0x2b46 <__fp_cmp+0x3e>
    2b44:	a1 40       	sbci	r26, 0x01	; 1
    2b46:	a6 95       	lsr	r26
    2b48:	8f ef       	ldi	r24, 0xFF	; 255
    2b4a:	81 1d       	adc	r24, r1
    2b4c:	81 1d       	adc	r24, r1
    2b4e:	08 95       	ret

00002b50 <__fp_inf>:
    2b50:	97 f9       	bld	r25, 7
    2b52:	9f 67       	ori	r25, 0x7F	; 127
    2b54:	80 e8       	ldi	r24, 0x80	; 128
    2b56:	70 e0       	ldi	r23, 0x00	; 0
    2b58:	60 e0       	ldi	r22, 0x00	; 0
    2b5a:	08 95       	ret

00002b5c <__fp_nan>:
    2b5c:	9f ef       	ldi	r25, 0xFF	; 255
    2b5e:	80 ec       	ldi	r24, 0xC0	; 192
    2b60:	08 95       	ret

00002b62 <__fp_pscA>:
    2b62:	00 24       	eor	r0, r0
    2b64:	0a 94       	dec	r0
    2b66:	16 16       	cp	r1, r22
    2b68:	17 06       	cpc	r1, r23
    2b6a:	18 06       	cpc	r1, r24
    2b6c:	09 06       	cpc	r0, r25
    2b6e:	08 95       	ret

00002b70 <__fp_pscB>:
    2b70:	00 24       	eor	r0, r0
    2b72:	0a 94       	dec	r0
    2b74:	12 16       	cp	r1, r18
    2b76:	13 06       	cpc	r1, r19
    2b78:	14 06       	cpc	r1, r20
    2b7a:	05 06       	cpc	r0, r21
    2b7c:	08 95       	ret

00002b7e <__fp_round>:
    2b7e:	09 2e       	mov	r0, r25
    2b80:	03 94       	inc	r0
    2b82:	00 0c       	add	r0, r0
    2b84:	11 f4       	brne	.+4      	; 0x2b8a <__fp_round+0xc>
    2b86:	88 23       	and	r24, r24
    2b88:	52 f0       	brmi	.+20     	; 0x2b9e <__fp_round+0x20>
    2b8a:	bb 0f       	add	r27, r27
    2b8c:	40 f4       	brcc	.+16     	; 0x2b9e <__fp_round+0x20>
    2b8e:	bf 2b       	or	r27, r31
    2b90:	11 f4       	brne	.+4      	; 0x2b96 <__fp_round+0x18>
    2b92:	60 ff       	sbrs	r22, 0
    2b94:	04 c0       	rjmp	.+8      	; 0x2b9e <__fp_round+0x20>
    2b96:	6f 5f       	subi	r22, 0xFF	; 255
    2b98:	7f 4f       	sbci	r23, 0xFF	; 255
    2b9a:	8f 4f       	sbci	r24, 0xFF	; 255
    2b9c:	9f 4f       	sbci	r25, 0xFF	; 255
    2b9e:	08 95       	ret

00002ba0 <__fp_split3>:
    2ba0:	57 fd       	sbrc	r21, 7
    2ba2:	90 58       	subi	r25, 0x80	; 128
    2ba4:	44 0f       	add	r20, r20
    2ba6:	55 1f       	adc	r21, r21
    2ba8:	59 f0       	breq	.+22     	; 0x2bc0 <__fp_splitA+0x10>
    2baa:	5f 3f       	cpi	r21, 0xFF	; 255
    2bac:	71 f0       	breq	.+28     	; 0x2bca <__fp_splitA+0x1a>
    2bae:	47 95       	ror	r20

00002bb0 <__fp_splitA>:
    2bb0:	88 0f       	add	r24, r24
    2bb2:	97 fb       	bst	r25, 7
    2bb4:	99 1f       	adc	r25, r25
    2bb6:	61 f0       	breq	.+24     	; 0x2bd0 <__fp_splitA+0x20>
    2bb8:	9f 3f       	cpi	r25, 0xFF	; 255
    2bba:	79 f0       	breq	.+30     	; 0x2bda <__fp_splitA+0x2a>
    2bbc:	87 95       	ror	r24
    2bbe:	08 95       	ret
    2bc0:	12 16       	cp	r1, r18
    2bc2:	13 06       	cpc	r1, r19
    2bc4:	14 06       	cpc	r1, r20
    2bc6:	55 1f       	adc	r21, r21
    2bc8:	f2 cf       	rjmp	.-28     	; 0x2bae <__fp_split3+0xe>
    2bca:	46 95       	lsr	r20
    2bcc:	f1 df       	rcall	.-30     	; 0x2bb0 <__fp_splitA>
    2bce:	08 c0       	rjmp	.+16     	; 0x2be0 <__fp_splitA+0x30>
    2bd0:	16 16       	cp	r1, r22
    2bd2:	17 06       	cpc	r1, r23
    2bd4:	18 06       	cpc	r1, r24
    2bd6:	99 1f       	adc	r25, r25
    2bd8:	f1 cf       	rjmp	.-30     	; 0x2bbc <__fp_splitA+0xc>
    2bda:	86 95       	lsr	r24
    2bdc:	71 05       	cpc	r23, r1
    2bde:	61 05       	cpc	r22, r1
    2be0:	08 94       	sec
    2be2:	08 95       	ret

00002be4 <__fp_zero>:
    2be4:	e8 94       	clt

00002be6 <__fp_szero>:
    2be6:	bb 27       	eor	r27, r27
    2be8:	66 27       	eor	r22, r22
    2bea:	77 27       	eor	r23, r23
    2bec:	cb 01       	movw	r24, r22
    2bee:	97 f9       	bld	r25, 7
    2bf0:	08 95       	ret

00002bf2 <__gesf2>:
    2bf2:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__fp_cmp>
    2bf6:	08 f4       	brcc	.+2      	; 0x2bfa <__gesf2+0x8>
    2bf8:	8f ef       	ldi	r24, 0xFF	; 255
    2bfa:	08 95       	ret

00002bfc <__mulsf3>:
    2bfc:	0e 94 11 16 	call	0x2c22	; 0x2c22 <__mulsf3x>
    2c00:	0c 94 bf 15 	jmp	0x2b7e	; 0x2b7e <__fp_round>
    2c04:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <__fp_pscA>
    2c08:	38 f0       	brcs	.+14     	; 0x2c18 <__mulsf3+0x1c>
    2c0a:	0e 94 b8 15 	call	0x2b70	; 0x2b70 <__fp_pscB>
    2c0e:	20 f0       	brcs	.+8      	; 0x2c18 <__mulsf3+0x1c>
    2c10:	95 23       	and	r25, r21
    2c12:	11 f0       	breq	.+4      	; 0x2c18 <__mulsf3+0x1c>
    2c14:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__fp_inf>
    2c18:	0c 94 ae 15 	jmp	0x2b5c	; 0x2b5c <__fp_nan>
    2c1c:	11 24       	eor	r1, r1
    2c1e:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__fp_szero>

00002c22 <__mulsf3x>:
    2c22:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <__fp_split3>
    2c26:	70 f3       	brcs	.-36     	; 0x2c04 <__mulsf3+0x8>

00002c28 <__mulsf3_pse>:
    2c28:	95 9f       	mul	r25, r21
    2c2a:	c1 f3       	breq	.-16     	; 0x2c1c <__mulsf3+0x20>
    2c2c:	95 0f       	add	r25, r21
    2c2e:	50 e0       	ldi	r21, 0x00	; 0
    2c30:	55 1f       	adc	r21, r21
    2c32:	62 9f       	mul	r22, r18
    2c34:	f0 01       	movw	r30, r0
    2c36:	72 9f       	mul	r23, r18
    2c38:	bb 27       	eor	r27, r27
    2c3a:	f0 0d       	add	r31, r0
    2c3c:	b1 1d       	adc	r27, r1
    2c3e:	63 9f       	mul	r22, r19
    2c40:	aa 27       	eor	r26, r26
    2c42:	f0 0d       	add	r31, r0
    2c44:	b1 1d       	adc	r27, r1
    2c46:	aa 1f       	adc	r26, r26
    2c48:	64 9f       	mul	r22, r20
    2c4a:	66 27       	eor	r22, r22
    2c4c:	b0 0d       	add	r27, r0
    2c4e:	a1 1d       	adc	r26, r1
    2c50:	66 1f       	adc	r22, r22
    2c52:	82 9f       	mul	r24, r18
    2c54:	22 27       	eor	r18, r18
    2c56:	b0 0d       	add	r27, r0
    2c58:	a1 1d       	adc	r26, r1
    2c5a:	62 1f       	adc	r22, r18
    2c5c:	73 9f       	mul	r23, r19
    2c5e:	b0 0d       	add	r27, r0
    2c60:	a1 1d       	adc	r26, r1
    2c62:	62 1f       	adc	r22, r18
    2c64:	83 9f       	mul	r24, r19
    2c66:	a0 0d       	add	r26, r0
    2c68:	61 1d       	adc	r22, r1
    2c6a:	22 1f       	adc	r18, r18
    2c6c:	74 9f       	mul	r23, r20
    2c6e:	33 27       	eor	r19, r19
    2c70:	a0 0d       	add	r26, r0
    2c72:	61 1d       	adc	r22, r1
    2c74:	23 1f       	adc	r18, r19
    2c76:	84 9f       	mul	r24, r20
    2c78:	60 0d       	add	r22, r0
    2c7a:	21 1d       	adc	r18, r1
    2c7c:	82 2f       	mov	r24, r18
    2c7e:	76 2f       	mov	r23, r22
    2c80:	6a 2f       	mov	r22, r26
    2c82:	11 24       	eor	r1, r1
    2c84:	9f 57       	subi	r25, 0x7F	; 127
    2c86:	50 40       	sbci	r21, 0x00	; 0
    2c88:	9a f0       	brmi	.+38     	; 0x2cb0 <__mulsf3_pse+0x88>
    2c8a:	f1 f0       	breq	.+60     	; 0x2cc8 <__mulsf3_pse+0xa0>
    2c8c:	88 23       	and	r24, r24
    2c8e:	4a f0       	brmi	.+18     	; 0x2ca2 <__mulsf3_pse+0x7a>
    2c90:	ee 0f       	add	r30, r30
    2c92:	ff 1f       	adc	r31, r31
    2c94:	bb 1f       	adc	r27, r27
    2c96:	66 1f       	adc	r22, r22
    2c98:	77 1f       	adc	r23, r23
    2c9a:	88 1f       	adc	r24, r24
    2c9c:	91 50       	subi	r25, 0x01	; 1
    2c9e:	50 40       	sbci	r21, 0x00	; 0
    2ca0:	a9 f7       	brne	.-22     	; 0x2c8c <__mulsf3_pse+0x64>
    2ca2:	9e 3f       	cpi	r25, 0xFE	; 254
    2ca4:	51 05       	cpc	r21, r1
    2ca6:	80 f0       	brcs	.+32     	; 0x2cc8 <__mulsf3_pse+0xa0>
    2ca8:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__fp_inf>
    2cac:	0c 94 f3 15 	jmp	0x2be6	; 0x2be6 <__fp_szero>
    2cb0:	5f 3f       	cpi	r21, 0xFF	; 255
    2cb2:	e4 f3       	brlt	.-8      	; 0x2cac <__mulsf3_pse+0x84>
    2cb4:	98 3e       	cpi	r25, 0xE8	; 232
    2cb6:	d4 f3       	brlt	.-12     	; 0x2cac <__mulsf3_pse+0x84>
    2cb8:	86 95       	lsr	r24
    2cba:	77 95       	ror	r23
    2cbc:	67 95       	ror	r22
    2cbe:	b7 95       	ror	r27
    2cc0:	f7 95       	ror	r31
    2cc2:	e7 95       	ror	r30
    2cc4:	9f 5f       	subi	r25, 0xFF	; 255
    2cc6:	c1 f7       	brne	.-16     	; 0x2cb8 <__mulsf3_pse+0x90>
    2cc8:	fe 2b       	or	r31, r30
    2cca:	88 0f       	add	r24, r24
    2ccc:	91 1d       	adc	r25, r1
    2cce:	96 95       	lsr	r25
    2cd0:	87 95       	ror	r24
    2cd2:	97 f9       	bld	r25, 7
    2cd4:	08 95       	ret

00002cd6 <vfprintf>:
    2cd6:	a3 e1       	ldi	r26, 0x13	; 19
    2cd8:	b0 e0       	ldi	r27, 0x00	; 0
    2cda:	e1 e7       	ldi	r30, 0x71	; 113
    2cdc:	f6 e1       	ldi	r31, 0x16	; 22
    2cde:	0c 94 30 1a 	jmp	0x3460	; 0x3460 <__prologue_saves__>
    2ce2:	6c 01       	movw	r12, r24
    2ce4:	4b 01       	movw	r8, r22
    2ce6:	2a 01       	movw	r4, r20
    2ce8:	fc 01       	movw	r30, r24
    2cea:	17 82       	std	Z+7, r1	; 0x07
    2cec:	16 82       	std	Z+6, r1	; 0x06
    2cee:	83 81       	ldd	r24, Z+3	; 0x03
    2cf0:	81 ff       	sbrs	r24, 1
    2cf2:	43 c3       	rjmp	.+1670   	; 0x337a <vfprintf+0x6a4>
    2cf4:	ae 01       	movw	r20, r28
    2cf6:	4f 5f       	subi	r20, 0xFF	; 255
    2cf8:	5f 4f       	sbci	r21, 0xFF	; 255
    2cfa:	3a 01       	movw	r6, r20
    2cfc:	f6 01       	movw	r30, r12
    2cfe:	93 81       	ldd	r25, Z+3	; 0x03
    2d00:	f4 01       	movw	r30, r8
    2d02:	93 fd       	sbrc	r25, 3
    2d04:	85 91       	lpm	r24, Z+
    2d06:	93 ff       	sbrs	r25, 3
    2d08:	81 91       	ld	r24, Z+
    2d0a:	4f 01       	movw	r8, r30
    2d0c:	88 23       	and	r24, r24
    2d0e:	09 f4       	brne	.+2      	; 0x2d12 <vfprintf+0x3c>
    2d10:	30 c3       	rjmp	.+1632   	; 0x3372 <vfprintf+0x69c>
    2d12:	85 32       	cpi	r24, 0x25	; 37
    2d14:	39 f4       	brne	.+14     	; 0x2d24 <vfprintf+0x4e>
    2d16:	93 fd       	sbrc	r25, 3
    2d18:	85 91       	lpm	r24, Z+
    2d1a:	93 ff       	sbrs	r25, 3
    2d1c:	81 91       	ld	r24, Z+
    2d1e:	4f 01       	movw	r8, r30
    2d20:	85 32       	cpi	r24, 0x25	; 37
    2d22:	39 f4       	brne	.+14     	; 0x2d32 <vfprintf+0x5c>
    2d24:	b6 01       	movw	r22, r12
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	0e 94 9c 1c 	call	0x3938	; 0x3938 <fputc>
    2d2c:	52 01       	movw	r10, r4
    2d2e:	25 01       	movw	r4, r10
    2d30:	e5 cf       	rjmp	.-54     	; 0x2cfc <vfprintf+0x26>
    2d32:	10 e0       	ldi	r17, 0x00	; 0
    2d34:	f1 2c       	mov	r15, r1
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	20 32       	cpi	r18, 0x20	; 32
    2d3a:	a0 f4       	brcc	.+40     	; 0x2d64 <vfprintf+0x8e>
    2d3c:	8b 32       	cpi	r24, 0x2B	; 43
    2d3e:	69 f0       	breq	.+26     	; 0x2d5a <vfprintf+0x84>
    2d40:	30 f4       	brcc	.+12     	; 0x2d4e <vfprintf+0x78>
    2d42:	80 32       	cpi	r24, 0x20	; 32
    2d44:	59 f0       	breq	.+22     	; 0x2d5c <vfprintf+0x86>
    2d46:	83 32       	cpi	r24, 0x23	; 35
    2d48:	69 f4       	brne	.+26     	; 0x2d64 <vfprintf+0x8e>
    2d4a:	20 61       	ori	r18, 0x10	; 16
    2d4c:	2c c0       	rjmp	.+88     	; 0x2da6 <vfprintf+0xd0>
    2d4e:	8d 32       	cpi	r24, 0x2D	; 45
    2d50:	39 f0       	breq	.+14     	; 0x2d60 <vfprintf+0x8a>
    2d52:	80 33       	cpi	r24, 0x30	; 48
    2d54:	39 f4       	brne	.+14     	; 0x2d64 <vfprintf+0x8e>
    2d56:	21 60       	ori	r18, 0x01	; 1
    2d58:	26 c0       	rjmp	.+76     	; 0x2da6 <vfprintf+0xd0>
    2d5a:	22 60       	ori	r18, 0x02	; 2
    2d5c:	24 60       	ori	r18, 0x04	; 4
    2d5e:	23 c0       	rjmp	.+70     	; 0x2da6 <vfprintf+0xd0>
    2d60:	28 60       	ori	r18, 0x08	; 8
    2d62:	21 c0       	rjmp	.+66     	; 0x2da6 <vfprintf+0xd0>
    2d64:	27 fd       	sbrc	r18, 7
    2d66:	27 c0       	rjmp	.+78     	; 0x2db6 <vfprintf+0xe0>
    2d68:	30 ed       	ldi	r19, 0xD0	; 208
    2d6a:	38 0f       	add	r19, r24
    2d6c:	3a 30       	cpi	r19, 0x0A	; 10
    2d6e:	78 f4       	brcc	.+30     	; 0x2d8e <vfprintf+0xb8>
    2d70:	26 ff       	sbrs	r18, 6
    2d72:	06 c0       	rjmp	.+12     	; 0x2d80 <vfprintf+0xaa>
    2d74:	fa e0       	ldi	r31, 0x0A	; 10
    2d76:	1f 9f       	mul	r17, r31
    2d78:	30 0d       	add	r19, r0
    2d7a:	11 24       	eor	r1, r1
    2d7c:	13 2f       	mov	r17, r19
    2d7e:	13 c0       	rjmp	.+38     	; 0x2da6 <vfprintf+0xd0>
    2d80:	4a e0       	ldi	r20, 0x0A	; 10
    2d82:	f4 9e       	mul	r15, r20
    2d84:	30 0d       	add	r19, r0
    2d86:	11 24       	eor	r1, r1
    2d88:	f3 2e       	mov	r15, r19
    2d8a:	20 62       	ori	r18, 0x20	; 32
    2d8c:	0c c0       	rjmp	.+24     	; 0x2da6 <vfprintf+0xd0>
    2d8e:	8e 32       	cpi	r24, 0x2E	; 46
    2d90:	21 f4       	brne	.+8      	; 0x2d9a <vfprintf+0xc4>
    2d92:	26 fd       	sbrc	r18, 6
    2d94:	ee c2       	rjmp	.+1500   	; 0x3372 <vfprintf+0x69c>
    2d96:	20 64       	ori	r18, 0x40	; 64
    2d98:	06 c0       	rjmp	.+12     	; 0x2da6 <vfprintf+0xd0>
    2d9a:	8c 36       	cpi	r24, 0x6C	; 108
    2d9c:	11 f4       	brne	.+4      	; 0x2da2 <vfprintf+0xcc>
    2d9e:	20 68       	ori	r18, 0x80	; 128
    2da0:	02 c0       	rjmp	.+4      	; 0x2da6 <vfprintf+0xd0>
    2da2:	88 36       	cpi	r24, 0x68	; 104
    2da4:	41 f4       	brne	.+16     	; 0x2db6 <vfprintf+0xe0>
    2da6:	f4 01       	movw	r30, r8
    2da8:	93 fd       	sbrc	r25, 3
    2daa:	85 91       	lpm	r24, Z+
    2dac:	93 ff       	sbrs	r25, 3
    2dae:	81 91       	ld	r24, Z+
    2db0:	4f 01       	movw	r8, r30
    2db2:	81 11       	cpse	r24, r1
    2db4:	c1 cf       	rjmp	.-126    	; 0x2d38 <vfprintf+0x62>
    2db6:	9b eb       	ldi	r25, 0xBB	; 187
    2db8:	98 0f       	add	r25, r24
    2dba:	93 30       	cpi	r25, 0x03	; 3
    2dbc:	18 f4       	brcc	.+6      	; 0x2dc4 <vfprintf+0xee>
    2dbe:	20 61       	ori	r18, 0x10	; 16
    2dc0:	80 5e       	subi	r24, 0xE0	; 224
    2dc2:	06 c0       	rjmp	.+12     	; 0x2dd0 <vfprintf+0xfa>
    2dc4:	9b e9       	ldi	r25, 0x9B	; 155
    2dc6:	98 0f       	add	r25, r24
    2dc8:	93 30       	cpi	r25, 0x03	; 3
    2dca:	08 f0       	brcs	.+2      	; 0x2dce <vfprintf+0xf8>
    2dcc:	71 c1       	rjmp	.+738    	; 0x30b0 <vfprintf+0x3da>
    2dce:	2f 7e       	andi	r18, 0xEF	; 239
    2dd0:	26 ff       	sbrs	r18, 6
    2dd2:	16 e0       	ldi	r17, 0x06	; 6
    2dd4:	2f 73       	andi	r18, 0x3F	; 63
    2dd6:	32 2e       	mov	r3, r18
    2dd8:	85 36       	cpi	r24, 0x65	; 101
    2dda:	19 f4       	brne	.+6      	; 0x2de2 <vfprintf+0x10c>
    2ddc:	20 64       	ori	r18, 0x40	; 64
    2dde:	32 2e       	mov	r3, r18
    2de0:	08 c0       	rjmp	.+16     	; 0x2df2 <vfprintf+0x11c>
    2de2:	86 36       	cpi	r24, 0x66	; 102
    2de4:	21 f4       	brne	.+8      	; 0x2dee <vfprintf+0x118>
    2de6:	f2 2f       	mov	r31, r18
    2de8:	f0 68       	ori	r31, 0x80	; 128
    2dea:	3f 2e       	mov	r3, r31
    2dec:	02 c0       	rjmp	.+4      	; 0x2df2 <vfprintf+0x11c>
    2dee:	11 11       	cpse	r17, r1
    2df0:	11 50       	subi	r17, 0x01	; 1
    2df2:	37 fe       	sbrs	r3, 7
    2df4:	07 c0       	rjmp	.+14     	; 0x2e04 <vfprintf+0x12e>
    2df6:	1c 33       	cpi	r17, 0x3C	; 60
    2df8:	50 f4       	brcc	.+20     	; 0x2e0e <vfprintf+0x138>
    2dfa:	ee 24       	eor	r14, r14
    2dfc:	e3 94       	inc	r14
    2dfe:	e1 0e       	add	r14, r17
    2e00:	27 e0       	ldi	r18, 0x07	; 7
    2e02:	0b c0       	rjmp	.+22     	; 0x2e1a <vfprintf+0x144>
    2e04:	18 30       	cpi	r17, 0x08	; 8
    2e06:	38 f0       	brcs	.+14     	; 0x2e16 <vfprintf+0x140>
    2e08:	27 e0       	ldi	r18, 0x07	; 7
    2e0a:	17 e0       	ldi	r17, 0x07	; 7
    2e0c:	05 c0       	rjmp	.+10     	; 0x2e18 <vfprintf+0x142>
    2e0e:	27 e0       	ldi	r18, 0x07	; 7
    2e10:	4c e3       	ldi	r20, 0x3C	; 60
    2e12:	e4 2e       	mov	r14, r20
    2e14:	02 c0       	rjmp	.+4      	; 0x2e1a <vfprintf+0x144>
    2e16:	21 2f       	mov	r18, r17
    2e18:	e1 2c       	mov	r14, r1
    2e1a:	52 01       	movw	r10, r4
    2e1c:	44 e0       	ldi	r20, 0x04	; 4
    2e1e:	a4 0e       	add	r10, r20
    2e20:	b1 1c       	adc	r11, r1
    2e22:	f2 01       	movw	r30, r4
    2e24:	60 81       	ld	r22, Z
    2e26:	71 81       	ldd	r23, Z+1	; 0x01
    2e28:	82 81       	ldd	r24, Z+2	; 0x02
    2e2a:	93 81       	ldd	r25, Z+3	; 0x03
    2e2c:	0e 2d       	mov	r16, r14
    2e2e:	a3 01       	movw	r20, r6
    2e30:	0e 94 ae 1b 	call	0x375c	; 0x375c <__ftoa_engine>
    2e34:	2c 01       	movw	r4, r24
    2e36:	09 81       	ldd	r16, Y+1	; 0x01
    2e38:	00 ff       	sbrs	r16, 0
    2e3a:	02 c0       	rjmp	.+4      	; 0x2e40 <vfprintf+0x16a>
    2e3c:	03 ff       	sbrs	r16, 3
    2e3e:	07 c0       	rjmp	.+14     	; 0x2e4e <vfprintf+0x178>
    2e40:	31 fc       	sbrc	r3, 1
    2e42:	08 c0       	rjmp	.+16     	; 0x2e54 <vfprintf+0x17e>
    2e44:	32 fe       	sbrs	r3, 2
    2e46:	09 c0       	rjmp	.+18     	; 0x2e5a <vfprintf+0x184>
    2e48:	30 e2       	ldi	r19, 0x20	; 32
    2e4a:	23 2e       	mov	r2, r19
    2e4c:	07 c0       	rjmp	.+14     	; 0x2e5c <vfprintf+0x186>
    2e4e:	2d e2       	ldi	r18, 0x2D	; 45
    2e50:	22 2e       	mov	r2, r18
    2e52:	04 c0       	rjmp	.+8      	; 0x2e5c <vfprintf+0x186>
    2e54:	9b e2       	ldi	r25, 0x2B	; 43
    2e56:	29 2e       	mov	r2, r25
    2e58:	01 c0       	rjmp	.+2      	; 0x2e5c <vfprintf+0x186>
    2e5a:	21 2c       	mov	r2, r1
    2e5c:	80 2f       	mov	r24, r16
    2e5e:	8c 70       	andi	r24, 0x0C	; 12
    2e60:	19 f0       	breq	.+6      	; 0x2e68 <vfprintf+0x192>
    2e62:	21 10       	cpse	r2, r1
    2e64:	68 c2       	rjmp	.+1232   	; 0x3336 <vfprintf+0x660>
    2e66:	a8 c2       	rjmp	.+1360   	; 0x33b8 <vfprintf+0x6e2>
    2e68:	37 fe       	sbrs	r3, 7
    2e6a:	0f c0       	rjmp	.+30     	; 0x2e8a <vfprintf+0x1b4>
    2e6c:	e4 0c       	add	r14, r4
    2e6e:	04 ff       	sbrs	r16, 4
    2e70:	04 c0       	rjmp	.+8      	; 0x2e7a <vfprintf+0x1a4>
    2e72:	8a 81       	ldd	r24, Y+2	; 0x02
    2e74:	81 33       	cpi	r24, 0x31	; 49
    2e76:	09 f4       	brne	.+2      	; 0x2e7a <vfprintf+0x1a4>
    2e78:	ea 94       	dec	r14
    2e7a:	1e 14       	cp	r1, r14
    2e7c:	74 f5       	brge	.+92     	; 0x2eda <vfprintf+0x204>
    2e7e:	f8 e0       	ldi	r31, 0x08	; 8
    2e80:	fe 15       	cp	r31, r14
    2e82:	78 f5       	brcc	.+94     	; 0x2ee2 <vfprintf+0x20c>
    2e84:	88 e0       	ldi	r24, 0x08	; 8
    2e86:	e8 2e       	mov	r14, r24
    2e88:	2c c0       	rjmp	.+88     	; 0x2ee2 <vfprintf+0x20c>
    2e8a:	36 fc       	sbrc	r3, 6
    2e8c:	2a c0       	rjmp	.+84     	; 0x2ee2 <vfprintf+0x20c>
    2e8e:	81 2f       	mov	r24, r17
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	84 15       	cp	r24, r4
    2e94:	95 05       	cpc	r25, r5
    2e96:	9c f0       	brlt	.+38     	; 0x2ebe <vfprintf+0x1e8>
    2e98:	2c ef       	ldi	r18, 0xFC	; 252
    2e9a:	42 16       	cp	r4, r18
    2e9c:	2f ef       	ldi	r18, 0xFF	; 255
    2e9e:	52 06       	cpc	r5, r18
    2ea0:	74 f0       	brlt	.+28     	; 0x2ebe <vfprintf+0x1e8>
    2ea2:	43 2d       	mov	r20, r3
    2ea4:	40 68       	ori	r20, 0x80	; 128
    2ea6:	34 2e       	mov	r3, r20
    2ea8:	0a c0       	rjmp	.+20     	; 0x2ebe <vfprintf+0x1e8>
    2eaa:	e2 e0       	ldi	r30, 0x02	; 2
    2eac:	f0 e0       	ldi	r31, 0x00	; 0
    2eae:	ec 0f       	add	r30, r28
    2eb0:	fd 1f       	adc	r31, r29
    2eb2:	e1 0f       	add	r30, r17
    2eb4:	f1 1d       	adc	r31, r1
    2eb6:	80 81       	ld	r24, Z
    2eb8:	80 33       	cpi	r24, 0x30	; 48
    2eba:	19 f4       	brne	.+6      	; 0x2ec2 <vfprintf+0x1ec>
    2ebc:	11 50       	subi	r17, 0x01	; 1
    2ebe:	11 11       	cpse	r17, r1
    2ec0:	f4 cf       	rjmp	.-24     	; 0x2eaa <vfprintf+0x1d4>
    2ec2:	37 fe       	sbrs	r3, 7
    2ec4:	0e c0       	rjmp	.+28     	; 0x2ee2 <vfprintf+0x20c>
    2ec6:	ee 24       	eor	r14, r14
    2ec8:	e3 94       	inc	r14
    2eca:	e1 0e       	add	r14, r17
    2ecc:	81 2f       	mov	r24, r17
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	48 16       	cp	r4, r24
    2ed2:	59 06       	cpc	r5, r25
    2ed4:	2c f4       	brge	.+10     	; 0x2ee0 <vfprintf+0x20a>
    2ed6:	14 19       	sub	r17, r4
    2ed8:	04 c0       	rjmp	.+8      	; 0x2ee2 <vfprintf+0x20c>
    2eda:	ee 24       	eor	r14, r14
    2edc:	e3 94       	inc	r14
    2ede:	01 c0       	rjmp	.+2      	; 0x2ee2 <vfprintf+0x20c>
    2ee0:	10 e0       	ldi	r17, 0x00	; 0
    2ee2:	37 fe       	sbrs	r3, 7
    2ee4:	06 c0       	rjmp	.+12     	; 0x2ef2 <vfprintf+0x21c>
    2ee6:	14 14       	cp	r1, r4
    2ee8:	15 04       	cpc	r1, r5
    2eea:	34 f4       	brge	.+12     	; 0x2ef8 <vfprintf+0x222>
    2eec:	c2 01       	movw	r24, r4
    2eee:	01 96       	adiw	r24, 0x01	; 1
    2ef0:	05 c0       	rjmp	.+10     	; 0x2efc <vfprintf+0x226>
    2ef2:	85 e0       	ldi	r24, 0x05	; 5
    2ef4:	90 e0       	ldi	r25, 0x00	; 0
    2ef6:	02 c0       	rjmp	.+4      	; 0x2efc <vfprintf+0x226>
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	21 10       	cpse	r2, r1
    2efe:	01 96       	adiw	r24, 0x01	; 1
    2f00:	11 23       	and	r17, r17
    2f02:	31 f0       	breq	.+12     	; 0x2f10 <vfprintf+0x23a>
    2f04:	21 2f       	mov	r18, r17
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	2f 5f       	subi	r18, 0xFF	; 255
    2f0a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f0c:	82 0f       	add	r24, r18
    2f0e:	93 1f       	adc	r25, r19
    2f10:	2f 2d       	mov	r18, r15
    2f12:	30 e0       	ldi	r19, 0x00	; 0
    2f14:	82 17       	cp	r24, r18
    2f16:	93 07       	cpc	r25, r19
    2f18:	14 f4       	brge	.+4      	; 0x2f1e <vfprintf+0x248>
    2f1a:	f8 1a       	sub	r15, r24
    2f1c:	01 c0       	rjmp	.+2      	; 0x2f20 <vfprintf+0x24a>
    2f1e:	f1 2c       	mov	r15, r1
    2f20:	83 2d       	mov	r24, r3
    2f22:	89 70       	andi	r24, 0x09	; 9
    2f24:	49 f4       	brne	.+18     	; 0x2f38 <vfprintf+0x262>
    2f26:	ff 20       	and	r15, r15
    2f28:	39 f0       	breq	.+14     	; 0x2f38 <vfprintf+0x262>
    2f2a:	b6 01       	movw	r22, r12
    2f2c:	80 e2       	ldi	r24, 0x20	; 32
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	0e 94 9c 1c 	call	0x3938	; 0x3938 <fputc>
    2f34:	fa 94       	dec	r15
    2f36:	f7 cf       	rjmp	.-18     	; 0x2f26 <vfprintf+0x250>
    2f38:	22 20       	and	r2, r2
    2f3a:	29 f0       	breq	.+10     	; 0x2f46 <vfprintf+0x270>
    2f3c:	b6 01       	movw	r22, r12
    2f3e:	82 2d       	mov	r24, r2
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	0e 94 9c 1c 	call	0x3938	; 0x3938 <fputc>
    2f46:	33 fc       	sbrc	r3, 3
    2f48:	09 c0       	rjmp	.+18     	; 0x2f5c <vfprintf+0x286>
    2f4a:	ff 20       	and	r15, r15
    2f4c:	39 f0       	breq	.+14     	; 0x2f5c <vfprintf+0x286>
    2f4e:	b6 01       	movw	r22, r12
    2f50:	80 e3       	ldi	r24, 0x30	; 48
    2f52:	90 e0       	ldi	r25, 0x00	; 0
    2f54:	0e 94 9c 1c 	call	0x3938	; 0x3938 <fputc>
    2f58:	fa 94       	dec	r15
    2f5a:	f7 cf       	rjmp	.-18     	; 0x2f4a <vfprintf+0x274>
    2f5c:	37 fe       	sbrs	r3, 7
    2f5e:	5a c0       	rjmp	.+180    	; 0x3014 <vfprintf+0x33e>
    2f60:	94 2d       	mov	r25, r4
    2f62:	85 2d       	mov	r24, r5
    2f64:	57 fe       	sbrs	r5, 7
    2f66:	02 c0       	rjmp	.+4      	; 0x2f6c <vfprintf+0x296>
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	80 e0       	ldi	r24, 0x00	; 0
    2f6c:	29 2e       	mov	r2, r25
    2f6e:	38 2e       	mov	r3, r24
    2f70:	20 e0       	ldi	r18, 0x00	; 0
    2f72:	30 e0       	ldi	r19, 0x00	; 0
    2f74:	a2 01       	movw	r20, r4
    2f76:	4e 19       	sub	r20, r14
    2f78:	51 09       	sbc	r21, r1
    2f7a:	5d 87       	std	Y+13, r21	; 0x0d
    2f7c:	4c 87       	std	Y+12, r20	; 0x0c
    2f7e:	a2 01       	movw	r20, r4
    2f80:	42 19       	sub	r20, r2
    2f82:	53 09       	sbc	r21, r3
    2f84:	5f 87       	std	Y+15, r21	; 0x0f
    2f86:	4e 87       	std	Y+14, r20	; 0x0e
    2f88:	61 2f       	mov	r22, r17
    2f8a:	70 e0       	ldi	r23, 0x00	; 0
    2f8c:	44 27       	eor	r20, r20
    2f8e:	55 27       	eor	r21, r21
    2f90:	46 1b       	sub	r20, r22
    2f92:	57 0b       	sbc	r21, r23
    2f94:	59 8b       	std	Y+17, r21	; 0x11
    2f96:	48 8b       	std	Y+16, r20	; 0x10
    2f98:	5f ef       	ldi	r21, 0xFF	; 255
    2f9a:	25 16       	cp	r2, r21
    2f9c:	35 06       	cpc	r3, r21
    2f9e:	49 f4       	brne	.+18     	; 0x2fb2 <vfprintf+0x2dc>
    2fa0:	b6 01       	movw	r22, r12
    2fa2:	8e e2       	ldi	r24, 0x2E	; 46
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	2a 8b       	std	Y+18, r18	; 0x12
    2fa8:	3b 8b       	std	Y+19, r19	; 0x13
    2faa:	0e 94 9c 1c 	call	0x3938	; 0x3938 <fputc>
    2fae:	3b 89       	ldd	r19, Y+19	; 0x13
    2fb0:	2a 89       	ldd	r18, Y+18	; 0x12
    2fb2:	42 14       	cp	r4, r2
    2fb4:	53 04       	cpc	r5, r3
    2fb6:	6c f0       	brlt	.+26     	; 0x2fd2 <vfprintf+0x2fc>
    2fb8:	4c 85       	ldd	r20, Y+12	; 0x0c
    2fba:	5d 85       	ldd	r21, Y+13	; 0x0d
    2fbc:	42 15       	cp	r20, r2
    2fbe:	53 05       	cpc	r21, r3
    2fc0:	44 f4       	brge	.+16     	; 0x2fd2 <vfprintf+0x2fc>
    2fc2:	ee 85       	ldd	r30, Y+14	; 0x0e
    2fc4:	ff 85       	ldd	r31, Y+15	; 0x0f
    2fc6:	e2 0f       	add	r30, r18
    2fc8:	f3 1f       	adc	r31, r19
    2fca:	e6 0d       	add	r30, r6
    2fcc:	f7 1d       	adc	r31, r7
    2fce:	81 81       	ldd	r24, Z+1	; 0x01
    2fd0:	01 c0       	rjmp	.+2      	; 0x2fd4 <vfprintf+0x2fe>
    2fd2:	80 e3       	ldi	r24, 0x30	; 48
    2fd4:	51 e0       	ldi	r21, 0x01	; 1
    2fd6:	25 1a       	sub	r2, r21
    2fd8:	31 08       	sbc	r3, r1
    2fda:	2f 5f       	subi	r18, 0xFF	; 255
    2fdc:	3f 4f       	sbci	r19, 0xFF	; 255
    2fde:	48 89       	ldd	r20, Y+16	; 0x10
    2fe0:	59 89       	ldd	r21, Y+17	; 0x11
    2fe2:	24 16       	cp	r2, r20
    2fe4:	35 06       	cpc	r3, r21
    2fe6:	4c f0       	brlt	.+18     	; 0x2ffa <vfprintf+0x324>
    2fe8:	b6 01       	movw	r22, r12
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	2a 8b       	std	Y+18, r18	; 0x12
    2fee:	3b 8b       	std	Y+19, r19	; 0x13
    2ff0:	0e 94 9c 1c 	call	0x3938	; 0x3938 <fputc>
    2ff4:	2a 89       	ldd	r18, Y+18	; 0x12
    2ff6:	3b 89       	ldd	r19, Y+19	; 0x13
    2ff8:	cf cf       	rjmp	.-98     	; 0x2f98 <vfprintf+0x2c2>
    2ffa:	24 14       	cp	r2, r4
    2ffc:	35 04       	cpc	r3, r5
    2ffe:	39 f4       	brne	.+14     	; 0x300e <vfprintf+0x338>
    3000:	9a 81       	ldd	r25, Y+2	; 0x02
    3002:	96 33       	cpi	r25, 0x36	; 54
    3004:	18 f4       	brcc	.+6      	; 0x300c <vfprintf+0x336>
    3006:	95 33       	cpi	r25, 0x35	; 53
    3008:	11 f4       	brne	.+4      	; 0x300e <vfprintf+0x338>
    300a:	04 ff       	sbrs	r16, 4
    300c:	81 e3       	ldi	r24, 0x31	; 49
    300e:	b6 01       	movw	r22, r12
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	4b c0       	rjmp	.+150    	; 0x30aa <vfprintf+0x3d4>
    3014:	8a 81       	ldd	r24, Y+2	; 0x02
    3016:	81 33       	cpi	r24, 0x31	; 49
    3018:	09 f0       	breq	.+2      	; 0x301c <vfprintf+0x346>
    301a:	0f 7e       	andi	r16, 0xEF	; 239
    301c:	b6 01       	movw	r22, r12
    301e:	90 e0       	ldi	r25, 0x00	; 0
    3020:	0e 94 9c 1c 	call	0x3938	; 0x3938 <fputc>
    3024:	11 11       	cpse	r17, r1
    3026:	05 c0       	rjmp	.+10     	; 0x3032 <vfprintf+0x35c>
    3028:	34 fc       	sbrc	r3, 4
    302a:	18 c0       	rjmp	.+48     	; 0x305c <vfprintf+0x386>
    302c:	85 e6       	ldi	r24, 0x65	; 101
    302e:	90 e0       	ldi	r25, 0x00	; 0
    3030:	17 c0       	rjmp	.+46     	; 0x3060 <vfprintf+0x38a>
    3032:	b6 01       	movw	r22, r12
    3034:	8e e2       	ldi	r24, 0x2E	; 46
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	0e 94 9c 1c 	call	0x3938	; 0x3938 <fputc>
    303c:	82 e0       	ldi	r24, 0x02	; 2
    303e:	ee 24       	eor	r14, r14
    3040:	e3 94       	inc	r14
    3042:	e8 0e       	add	r14, r24
    3044:	f3 01       	movw	r30, r6
    3046:	e8 0f       	add	r30, r24
    3048:	f1 1d       	adc	r31, r1
    304a:	80 81       	ld	r24, Z
    304c:	b6 01       	movw	r22, r12
    304e:	90 e0       	ldi	r25, 0x00	; 0
    3050:	0e 94 9c 1c 	call	0x3938	; 0x3938 <fputc>
    3054:	11 50       	subi	r17, 0x01	; 1
    3056:	8e 2d       	mov	r24, r14
    3058:	91 f7       	brne	.-28     	; 0x303e <vfprintf+0x368>
    305a:	e6 cf       	rjmp	.-52     	; 0x3028 <vfprintf+0x352>
    305c:	85 e4       	ldi	r24, 0x45	; 69
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	b6 01       	movw	r22, r12
    3062:	0e 94 9c 1c 	call	0x3938	; 0x3938 <fputc>
    3066:	57 fc       	sbrc	r5, 7
    3068:	05 c0       	rjmp	.+10     	; 0x3074 <vfprintf+0x39e>
    306a:	41 14       	cp	r4, r1
    306c:	51 04       	cpc	r5, r1
    306e:	39 f4       	brne	.+14     	; 0x307e <vfprintf+0x3a8>
    3070:	04 ff       	sbrs	r16, 4
    3072:	05 c0       	rjmp	.+10     	; 0x307e <vfprintf+0x3a8>
    3074:	51 94       	neg	r5
    3076:	41 94       	neg	r4
    3078:	51 08       	sbc	r5, r1
    307a:	8d e2       	ldi	r24, 0x2D	; 45
    307c:	01 c0       	rjmp	.+2      	; 0x3080 <vfprintf+0x3aa>
    307e:	8b e2       	ldi	r24, 0x2B	; 43
    3080:	b6 01       	movw	r22, r12
    3082:	90 e0       	ldi	r25, 0x00	; 0
    3084:	0e 94 9c 1c 	call	0x3938	; 0x3938 <fputc>
    3088:	80 e3       	ldi	r24, 0x30	; 48
    308a:	9a e0       	ldi	r25, 0x0A	; 10
    308c:	49 16       	cp	r4, r25
    308e:	51 04       	cpc	r5, r1
    3090:	2c f0       	brlt	.+10     	; 0x309c <vfprintf+0x3c6>
    3092:	8f 5f       	subi	r24, 0xFF	; 255
    3094:	5a e0       	ldi	r21, 0x0A	; 10
    3096:	45 1a       	sub	r4, r21
    3098:	51 08       	sbc	r5, r1
    309a:	f7 cf       	rjmp	.-18     	; 0x308a <vfprintf+0x3b4>
    309c:	b6 01       	movw	r22, r12
    309e:	90 e0       	ldi	r25, 0x00	; 0
    30a0:	0e 94 9c 1c 	call	0x3938	; 0x3938 <fputc>
    30a4:	b6 01       	movw	r22, r12
    30a6:	c2 01       	movw	r24, r4
    30a8:	c0 96       	adiw	r24, 0x30	; 48
    30aa:	0e 94 9c 1c 	call	0x3938	; 0x3938 <fputc>
    30ae:	57 c1       	rjmp	.+686    	; 0x335e <vfprintf+0x688>
    30b0:	83 36       	cpi	r24, 0x63	; 99
    30b2:	31 f0       	breq	.+12     	; 0x30c0 <vfprintf+0x3ea>
    30b4:	83 37       	cpi	r24, 0x73	; 115
    30b6:	79 f0       	breq	.+30     	; 0x30d6 <vfprintf+0x400>
    30b8:	83 35       	cpi	r24, 0x53	; 83
    30ba:	09 f0       	breq	.+2      	; 0x30be <vfprintf+0x3e8>
    30bc:	58 c0       	rjmp	.+176    	; 0x316e <vfprintf+0x498>
    30be:	21 c0       	rjmp	.+66     	; 0x3102 <vfprintf+0x42c>
    30c0:	52 01       	movw	r10, r4
    30c2:	e2 e0       	ldi	r30, 0x02	; 2
    30c4:	ae 0e       	add	r10, r30
    30c6:	b1 1c       	adc	r11, r1
    30c8:	f2 01       	movw	r30, r4
    30ca:	80 81       	ld	r24, Z
    30cc:	89 83       	std	Y+1, r24	; 0x01
    30ce:	01 e0       	ldi	r16, 0x01	; 1
    30d0:	10 e0       	ldi	r17, 0x00	; 0
    30d2:	23 01       	movw	r4, r6
    30d4:	14 c0       	rjmp	.+40     	; 0x30fe <vfprintf+0x428>
    30d6:	52 01       	movw	r10, r4
    30d8:	f2 e0       	ldi	r31, 0x02	; 2
    30da:	af 0e       	add	r10, r31
    30dc:	b1 1c       	adc	r11, r1
    30de:	f2 01       	movw	r30, r4
    30e0:	40 80       	ld	r4, Z
    30e2:	51 80       	ldd	r5, Z+1	; 0x01
    30e4:	26 ff       	sbrs	r18, 6
    30e6:	03 c0       	rjmp	.+6      	; 0x30ee <vfprintf+0x418>
    30e8:	61 2f       	mov	r22, r17
    30ea:	70 e0       	ldi	r23, 0x00	; 0
    30ec:	02 c0       	rjmp	.+4      	; 0x30f2 <vfprintf+0x41c>
    30ee:	6f ef       	ldi	r22, 0xFF	; 255
    30f0:	7f ef       	ldi	r23, 0xFF	; 255
    30f2:	c2 01       	movw	r24, r4
    30f4:	2a 8b       	std	Y+18, r18	; 0x12
    30f6:	0e 94 91 1c 	call	0x3922	; 0x3922 <strnlen>
    30fa:	8c 01       	movw	r16, r24
    30fc:	2a 89       	ldd	r18, Y+18	; 0x12
    30fe:	2f 77       	andi	r18, 0x7F	; 127
    3100:	15 c0       	rjmp	.+42     	; 0x312c <vfprintf+0x456>
    3102:	52 01       	movw	r10, r4
    3104:	f2 e0       	ldi	r31, 0x02	; 2
    3106:	af 0e       	add	r10, r31
    3108:	b1 1c       	adc	r11, r1
    310a:	f2 01       	movw	r30, r4
    310c:	40 80       	ld	r4, Z
    310e:	51 80       	ldd	r5, Z+1	; 0x01
    3110:	26 ff       	sbrs	r18, 6
    3112:	03 c0       	rjmp	.+6      	; 0x311a <vfprintf+0x444>
    3114:	61 2f       	mov	r22, r17
    3116:	70 e0       	ldi	r23, 0x00	; 0
    3118:	02 c0       	rjmp	.+4      	; 0x311e <vfprintf+0x448>
    311a:	6f ef       	ldi	r22, 0xFF	; 255
    311c:	7f ef       	ldi	r23, 0xFF	; 255
    311e:	c2 01       	movw	r24, r4
    3120:	2a 8b       	std	Y+18, r18	; 0x12
    3122:	0e 94 86 1c 	call	0x390c	; 0x390c <strnlen_P>
    3126:	8c 01       	movw	r16, r24
    3128:	2a 89       	ldd	r18, Y+18	; 0x12
    312a:	20 68       	ori	r18, 0x80	; 128
    312c:	32 2e       	mov	r3, r18
    312e:	23 fd       	sbrc	r18, 3
    3130:	1a c0       	rjmp	.+52     	; 0x3166 <vfprintf+0x490>
    3132:	8f 2d       	mov	r24, r15
    3134:	90 e0       	ldi	r25, 0x00	; 0
    3136:	08 17       	cp	r16, r24
    3138:	19 07       	cpc	r17, r25
    313a:	a8 f4       	brcc	.+42     	; 0x3166 <vfprintf+0x490>
    313c:	b6 01       	movw	r22, r12
    313e:	80 e2       	ldi	r24, 0x20	; 32
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	0e 94 9c 1c 	call	0x3938	; 0x3938 <fputc>
    3146:	fa 94       	dec	r15
    3148:	f4 cf       	rjmp	.-24     	; 0x3132 <vfprintf+0x45c>
    314a:	f2 01       	movw	r30, r4
    314c:	37 fc       	sbrc	r3, 7
    314e:	85 91       	lpm	r24, Z+
    3150:	37 fe       	sbrs	r3, 7
    3152:	81 91       	ld	r24, Z+
    3154:	2f 01       	movw	r4, r30
    3156:	b6 01       	movw	r22, r12
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	0e 94 9c 1c 	call	0x3938	; 0x3938 <fputc>
    315e:	f1 10       	cpse	r15, r1
    3160:	fa 94       	dec	r15
    3162:	01 50       	subi	r16, 0x01	; 1
    3164:	11 09       	sbc	r17, r1
    3166:	01 15       	cp	r16, r1
    3168:	11 05       	cpc	r17, r1
    316a:	79 f7       	brne	.-34     	; 0x314a <vfprintf+0x474>
    316c:	f8 c0       	rjmp	.+496    	; 0x335e <vfprintf+0x688>
    316e:	84 36       	cpi	r24, 0x64	; 100
    3170:	11 f0       	breq	.+4      	; 0x3176 <vfprintf+0x4a0>
    3172:	89 36       	cpi	r24, 0x69	; 105
    3174:	59 f5       	brne	.+86     	; 0x31cc <vfprintf+0x4f6>
    3176:	52 01       	movw	r10, r4
    3178:	27 ff       	sbrs	r18, 7
    317a:	09 c0       	rjmp	.+18     	; 0x318e <vfprintf+0x4b8>
    317c:	f4 e0       	ldi	r31, 0x04	; 4
    317e:	af 0e       	add	r10, r31
    3180:	b1 1c       	adc	r11, r1
    3182:	f2 01       	movw	r30, r4
    3184:	60 81       	ld	r22, Z
    3186:	71 81       	ldd	r23, Z+1	; 0x01
    3188:	82 81       	ldd	r24, Z+2	; 0x02
    318a:	93 81       	ldd	r25, Z+3	; 0x03
    318c:	0a c0       	rjmp	.+20     	; 0x31a2 <vfprintf+0x4cc>
    318e:	f2 e0       	ldi	r31, 0x02	; 2
    3190:	af 0e       	add	r10, r31
    3192:	b1 1c       	adc	r11, r1
    3194:	f2 01       	movw	r30, r4
    3196:	60 81       	ld	r22, Z
    3198:	71 81       	ldd	r23, Z+1	; 0x01
    319a:	07 2e       	mov	r0, r23
    319c:	00 0c       	add	r0, r0
    319e:	88 0b       	sbc	r24, r24
    31a0:	99 0b       	sbc	r25, r25
    31a2:	2f 76       	andi	r18, 0x6F	; 111
    31a4:	32 2e       	mov	r3, r18
    31a6:	97 ff       	sbrs	r25, 7
    31a8:	09 c0       	rjmp	.+18     	; 0x31bc <vfprintf+0x4e6>
    31aa:	90 95       	com	r25
    31ac:	80 95       	com	r24
    31ae:	70 95       	com	r23
    31b0:	61 95       	neg	r22
    31b2:	7f 4f       	sbci	r23, 0xFF	; 255
    31b4:	8f 4f       	sbci	r24, 0xFF	; 255
    31b6:	9f 4f       	sbci	r25, 0xFF	; 255
    31b8:	20 68       	ori	r18, 0x80	; 128
    31ba:	32 2e       	mov	r3, r18
    31bc:	2a e0       	ldi	r18, 0x0A	; 10
    31be:	30 e0       	ldi	r19, 0x00	; 0
    31c0:	a3 01       	movw	r20, r6
    31c2:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__ultoa_invert>
    31c6:	e8 2e       	mov	r14, r24
    31c8:	e6 18       	sub	r14, r6
    31ca:	3f c0       	rjmp	.+126    	; 0x324a <vfprintf+0x574>
    31cc:	02 2f       	mov	r16, r18
    31ce:	85 37       	cpi	r24, 0x75	; 117
    31d0:	21 f4       	brne	.+8      	; 0x31da <vfprintf+0x504>
    31d2:	0f 7e       	andi	r16, 0xEF	; 239
    31d4:	2a e0       	ldi	r18, 0x0A	; 10
    31d6:	30 e0       	ldi	r19, 0x00	; 0
    31d8:	1d c0       	rjmp	.+58     	; 0x3214 <vfprintf+0x53e>
    31da:	09 7f       	andi	r16, 0xF9	; 249
    31dc:	8f 36       	cpi	r24, 0x6F	; 111
    31de:	91 f0       	breq	.+36     	; 0x3204 <vfprintf+0x52e>
    31e0:	18 f4       	brcc	.+6      	; 0x31e8 <vfprintf+0x512>
    31e2:	88 35       	cpi	r24, 0x58	; 88
    31e4:	59 f0       	breq	.+22     	; 0x31fc <vfprintf+0x526>
    31e6:	c5 c0       	rjmp	.+394    	; 0x3372 <vfprintf+0x69c>
    31e8:	80 37       	cpi	r24, 0x70	; 112
    31ea:	19 f0       	breq	.+6      	; 0x31f2 <vfprintf+0x51c>
    31ec:	88 37       	cpi	r24, 0x78	; 120
    31ee:	11 f0       	breq	.+4      	; 0x31f4 <vfprintf+0x51e>
    31f0:	c0 c0       	rjmp	.+384    	; 0x3372 <vfprintf+0x69c>
    31f2:	00 61       	ori	r16, 0x10	; 16
    31f4:	04 ff       	sbrs	r16, 4
    31f6:	09 c0       	rjmp	.+18     	; 0x320a <vfprintf+0x534>
    31f8:	04 60       	ori	r16, 0x04	; 4
    31fa:	07 c0       	rjmp	.+14     	; 0x320a <vfprintf+0x534>
    31fc:	24 ff       	sbrs	r18, 4
    31fe:	08 c0       	rjmp	.+16     	; 0x3210 <vfprintf+0x53a>
    3200:	06 60       	ori	r16, 0x06	; 6
    3202:	06 c0       	rjmp	.+12     	; 0x3210 <vfprintf+0x53a>
    3204:	28 e0       	ldi	r18, 0x08	; 8
    3206:	30 e0       	ldi	r19, 0x00	; 0
    3208:	05 c0       	rjmp	.+10     	; 0x3214 <vfprintf+0x53e>
    320a:	20 e1       	ldi	r18, 0x10	; 16
    320c:	30 e0       	ldi	r19, 0x00	; 0
    320e:	02 c0       	rjmp	.+4      	; 0x3214 <vfprintf+0x53e>
    3210:	20 e1       	ldi	r18, 0x10	; 16
    3212:	32 e0       	ldi	r19, 0x02	; 2
    3214:	52 01       	movw	r10, r4
    3216:	07 ff       	sbrs	r16, 7
    3218:	09 c0       	rjmp	.+18     	; 0x322c <vfprintf+0x556>
    321a:	f4 e0       	ldi	r31, 0x04	; 4
    321c:	af 0e       	add	r10, r31
    321e:	b1 1c       	adc	r11, r1
    3220:	f2 01       	movw	r30, r4
    3222:	60 81       	ld	r22, Z
    3224:	71 81       	ldd	r23, Z+1	; 0x01
    3226:	82 81       	ldd	r24, Z+2	; 0x02
    3228:	93 81       	ldd	r25, Z+3	; 0x03
    322a:	08 c0       	rjmp	.+16     	; 0x323c <vfprintf+0x566>
    322c:	f2 e0       	ldi	r31, 0x02	; 2
    322e:	af 0e       	add	r10, r31
    3230:	b1 1c       	adc	r11, r1
    3232:	f2 01       	movw	r30, r4
    3234:	60 81       	ld	r22, Z
    3236:	71 81       	ldd	r23, Z+1	; 0x01
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	90 e0       	ldi	r25, 0x00	; 0
    323c:	a3 01       	movw	r20, r6
    323e:	0e 94 21 1d 	call	0x3a42	; 0x3a42 <__ultoa_invert>
    3242:	e8 2e       	mov	r14, r24
    3244:	e6 18       	sub	r14, r6
    3246:	0f 77       	andi	r16, 0x7F	; 127
    3248:	30 2e       	mov	r3, r16
    324a:	36 fe       	sbrs	r3, 6
    324c:	0b c0       	rjmp	.+22     	; 0x3264 <vfprintf+0x58e>
    324e:	33 2d       	mov	r19, r3
    3250:	3e 7f       	andi	r19, 0xFE	; 254
    3252:	e1 16       	cp	r14, r17
    3254:	50 f4       	brcc	.+20     	; 0x326a <vfprintf+0x594>
    3256:	34 fe       	sbrs	r3, 4
    3258:	0a c0       	rjmp	.+20     	; 0x326e <vfprintf+0x598>
    325a:	32 fc       	sbrc	r3, 2
    325c:	08 c0       	rjmp	.+16     	; 0x326e <vfprintf+0x598>
    325e:	33 2d       	mov	r19, r3
    3260:	3e 7e       	andi	r19, 0xEE	; 238
    3262:	05 c0       	rjmp	.+10     	; 0x326e <vfprintf+0x598>
    3264:	0e 2d       	mov	r16, r14
    3266:	33 2d       	mov	r19, r3
    3268:	03 c0       	rjmp	.+6      	; 0x3270 <vfprintf+0x59a>
    326a:	0e 2d       	mov	r16, r14
    326c:	01 c0       	rjmp	.+2      	; 0x3270 <vfprintf+0x59a>
    326e:	01 2f       	mov	r16, r17
    3270:	34 ff       	sbrs	r19, 4
    3272:	0c c0       	rjmp	.+24     	; 0x328c <vfprintf+0x5b6>
    3274:	fe 01       	movw	r30, r28
    3276:	ee 0d       	add	r30, r14
    3278:	f1 1d       	adc	r31, r1
    327a:	80 81       	ld	r24, Z
    327c:	80 33       	cpi	r24, 0x30	; 48
    327e:	11 f4       	brne	.+4      	; 0x3284 <vfprintf+0x5ae>
    3280:	39 7e       	andi	r19, 0xE9	; 233
    3282:	08 c0       	rjmp	.+16     	; 0x3294 <vfprintf+0x5be>
    3284:	32 ff       	sbrs	r19, 2
    3286:	05 c0       	rjmp	.+10     	; 0x3292 <vfprintf+0x5bc>
    3288:	0e 5f       	subi	r16, 0xFE	; 254
    328a:	04 c0       	rjmp	.+8      	; 0x3294 <vfprintf+0x5be>
    328c:	83 2f       	mov	r24, r19
    328e:	86 78       	andi	r24, 0x86	; 134
    3290:	09 f0       	breq	.+2      	; 0x3294 <vfprintf+0x5be>
    3292:	0f 5f       	subi	r16, 0xFF	; 255
    3294:	33 fd       	sbrc	r19, 3
    3296:	13 c0       	rjmp	.+38     	; 0x32be <vfprintf+0x5e8>
    3298:	30 ff       	sbrs	r19, 0
    329a:	06 c0       	rjmp	.+12     	; 0x32a8 <vfprintf+0x5d2>
    329c:	1e 2d       	mov	r17, r14
    329e:	0f 15       	cp	r16, r15
    32a0:	18 f4       	brcc	.+6      	; 0x32a8 <vfprintf+0x5d2>
    32a2:	1f 0d       	add	r17, r15
    32a4:	10 1b       	sub	r17, r16
    32a6:	0f 2d       	mov	r16, r15
    32a8:	0f 15       	cp	r16, r15
    32aa:	68 f4       	brcc	.+26     	; 0x32c6 <vfprintf+0x5f0>
    32ac:	b6 01       	movw	r22, r12
    32ae:	80 e2       	ldi	r24, 0x20	; 32
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	3b 8b       	std	Y+19, r19	; 0x13
    32b4:	0e 94 9c 1c 	call	0x3938	; 0x3938 <fputc>
    32b8:	0f 5f       	subi	r16, 0xFF	; 255
    32ba:	3b 89       	ldd	r19, Y+19	; 0x13
    32bc:	f5 cf       	rjmp	.-22     	; 0x32a8 <vfprintf+0x5d2>
    32be:	0f 15       	cp	r16, r15
    32c0:	10 f4       	brcc	.+4      	; 0x32c6 <vfprintf+0x5f0>
    32c2:	f0 1a       	sub	r15, r16
    32c4:	01 c0       	rjmp	.+2      	; 0x32c8 <vfprintf+0x5f2>
    32c6:	f1 2c       	mov	r15, r1
    32c8:	34 ff       	sbrs	r19, 4
    32ca:	12 c0       	rjmp	.+36     	; 0x32f0 <vfprintf+0x61a>
    32cc:	b6 01       	movw	r22, r12
    32ce:	80 e3       	ldi	r24, 0x30	; 48
    32d0:	90 e0       	ldi	r25, 0x00	; 0
    32d2:	3b 8b       	std	Y+19, r19	; 0x13
    32d4:	0e 94 9c 1c 	call	0x3938	; 0x3938 <fputc>
    32d8:	3b 89       	ldd	r19, Y+19	; 0x13
    32da:	32 ff       	sbrs	r19, 2
    32dc:	17 c0       	rjmp	.+46     	; 0x330c <vfprintf+0x636>
    32de:	31 fd       	sbrc	r19, 1
    32e0:	03 c0       	rjmp	.+6      	; 0x32e8 <vfprintf+0x612>
    32e2:	88 e7       	ldi	r24, 0x78	; 120
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	02 c0       	rjmp	.+4      	; 0x32ec <vfprintf+0x616>
    32e8:	88 e5       	ldi	r24, 0x58	; 88
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	b6 01       	movw	r22, r12
    32ee:	0c c0       	rjmp	.+24     	; 0x3308 <vfprintf+0x632>
    32f0:	83 2f       	mov	r24, r19
    32f2:	86 78       	andi	r24, 0x86	; 134
    32f4:	59 f0       	breq	.+22     	; 0x330c <vfprintf+0x636>
    32f6:	31 ff       	sbrs	r19, 1
    32f8:	02 c0       	rjmp	.+4      	; 0x32fe <vfprintf+0x628>
    32fa:	8b e2       	ldi	r24, 0x2B	; 43
    32fc:	01 c0       	rjmp	.+2      	; 0x3300 <vfprintf+0x62a>
    32fe:	80 e2       	ldi	r24, 0x20	; 32
    3300:	37 fd       	sbrc	r19, 7
    3302:	8d e2       	ldi	r24, 0x2D	; 45
    3304:	b6 01       	movw	r22, r12
    3306:	90 e0       	ldi	r25, 0x00	; 0
    3308:	0e 94 9c 1c 	call	0x3938	; 0x3938 <fputc>
    330c:	e1 16       	cp	r14, r17
    330e:	38 f4       	brcc	.+14     	; 0x331e <vfprintf+0x648>
    3310:	b6 01       	movw	r22, r12
    3312:	80 e3       	ldi	r24, 0x30	; 48
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	0e 94 9c 1c 	call	0x3938	; 0x3938 <fputc>
    331a:	11 50       	subi	r17, 0x01	; 1
    331c:	f7 cf       	rjmp	.-18     	; 0x330c <vfprintf+0x636>
    331e:	ea 94       	dec	r14
    3320:	f3 01       	movw	r30, r6
    3322:	ee 0d       	add	r30, r14
    3324:	f1 1d       	adc	r31, r1
    3326:	80 81       	ld	r24, Z
    3328:	b6 01       	movw	r22, r12
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	0e 94 9c 1c 	call	0x3938	; 0x3938 <fputc>
    3330:	e1 10       	cpse	r14, r1
    3332:	f5 cf       	rjmp	.-22     	; 0x331e <vfprintf+0x648>
    3334:	14 c0       	rjmp	.+40     	; 0x335e <vfprintf+0x688>
    3336:	f4 e0       	ldi	r31, 0x04	; 4
    3338:	ff 15       	cp	r31, r15
    333a:	58 f5       	brcc	.+86     	; 0x3392 <vfprintf+0x6bc>
    333c:	84 e0       	ldi	r24, 0x04	; 4
    333e:	f8 1a       	sub	r15, r24
    3340:	33 fe       	sbrs	r3, 3
    3342:	1e c0       	rjmp	.+60     	; 0x3380 <vfprintf+0x6aa>
    3344:	21 10       	cpse	r2, r1
    3346:	26 c0       	rjmp	.+76     	; 0x3394 <vfprintf+0x6be>
    3348:	03 ff       	sbrs	r16, 3
    334a:	2a c0       	rjmp	.+84     	; 0x33a0 <vfprintf+0x6ca>
    334c:	04 e3       	ldi	r16, 0x34	; 52
    334e:	11 e0       	ldi	r17, 0x01	; 1
    3350:	f3 2d       	mov	r31, r3
    3352:	f0 71       	andi	r31, 0x10	; 16
    3354:	3f 2e       	mov	r3, r31
    3356:	f8 01       	movw	r30, r16
    3358:	84 91       	lpm	r24, Z
    335a:	81 11       	cpse	r24, r1
    335c:	24 c0       	rjmp	.+72     	; 0x33a6 <vfprintf+0x6d0>
    335e:	ff 20       	and	r15, r15
    3360:	09 f4       	brne	.+2      	; 0x3364 <vfprintf+0x68e>
    3362:	e5 cc       	rjmp	.-1590   	; 0x2d2e <vfprintf+0x58>
    3364:	b6 01       	movw	r22, r12
    3366:	80 e2       	ldi	r24, 0x20	; 32
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	0e 94 9c 1c 	call	0x3938	; 0x3938 <fputc>
    336e:	fa 94       	dec	r15
    3370:	f6 cf       	rjmp	.-20     	; 0x335e <vfprintf+0x688>
    3372:	f6 01       	movw	r30, r12
    3374:	86 81       	ldd	r24, Z+6	; 0x06
    3376:	97 81       	ldd	r25, Z+7	; 0x07
    3378:	26 c0       	rjmp	.+76     	; 0x33c6 <vfprintf+0x6f0>
    337a:	8f ef       	ldi	r24, 0xFF	; 255
    337c:	9f ef       	ldi	r25, 0xFF	; 255
    337e:	23 c0       	rjmp	.+70     	; 0x33c6 <vfprintf+0x6f0>
    3380:	b6 01       	movw	r22, r12
    3382:	80 e2       	ldi	r24, 0x20	; 32
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	0e 94 9c 1c 	call	0x3938	; 0x3938 <fputc>
    338a:	fa 94       	dec	r15
    338c:	f1 10       	cpse	r15, r1
    338e:	f8 cf       	rjmp	.-16     	; 0x3380 <vfprintf+0x6aa>
    3390:	d9 cf       	rjmp	.-78     	; 0x3344 <vfprintf+0x66e>
    3392:	f1 2c       	mov	r15, r1
    3394:	b6 01       	movw	r22, r12
    3396:	82 2d       	mov	r24, r2
    3398:	90 e0       	ldi	r25, 0x00	; 0
    339a:	0e 94 9c 1c 	call	0x3938	; 0x3938 <fputc>
    339e:	d4 cf       	rjmp	.-88     	; 0x3348 <vfprintf+0x672>
    33a0:	08 e3       	ldi	r16, 0x38	; 56
    33a2:	11 e0       	ldi	r17, 0x01	; 1
    33a4:	d5 cf       	rjmp	.-86     	; 0x3350 <vfprintf+0x67a>
    33a6:	31 10       	cpse	r3, r1
    33a8:	80 52       	subi	r24, 0x20	; 32
    33aa:	b6 01       	movw	r22, r12
    33ac:	90 e0       	ldi	r25, 0x00	; 0
    33ae:	0e 94 9c 1c 	call	0x3938	; 0x3938 <fputc>
    33b2:	0f 5f       	subi	r16, 0xFF	; 255
    33b4:	1f 4f       	sbci	r17, 0xFF	; 255
    33b6:	cf cf       	rjmp	.-98     	; 0x3356 <vfprintf+0x680>
    33b8:	23 e0       	ldi	r18, 0x03	; 3
    33ba:	2f 15       	cp	r18, r15
    33bc:	10 f4       	brcc	.+4      	; 0x33c2 <vfprintf+0x6ec>
    33be:	83 e0       	ldi	r24, 0x03	; 3
    33c0:	be cf       	rjmp	.-132    	; 0x333e <vfprintf+0x668>
    33c2:	f1 2c       	mov	r15, r1
    33c4:	c1 cf       	rjmp	.-126    	; 0x3348 <vfprintf+0x672>
    33c6:	63 96       	adiw	r28, 0x13	; 19
    33c8:	e2 e1       	ldi	r30, 0x12	; 18
    33ca:	0c 94 4c 1a 	jmp	0x3498	; 0x3498 <__epilogue_restores__>

000033ce <__udivmodsi4>:
    33ce:	a1 e2       	ldi	r26, 0x21	; 33
    33d0:	1a 2e       	mov	r1, r26
    33d2:	aa 1b       	sub	r26, r26
    33d4:	bb 1b       	sub	r27, r27
    33d6:	fd 01       	movw	r30, r26
    33d8:	0d c0       	rjmp	.+26     	; 0x33f4 <__udivmodsi4_ep>

000033da <__udivmodsi4_loop>:
    33da:	aa 1f       	adc	r26, r26
    33dc:	bb 1f       	adc	r27, r27
    33de:	ee 1f       	adc	r30, r30
    33e0:	ff 1f       	adc	r31, r31
    33e2:	a2 17       	cp	r26, r18
    33e4:	b3 07       	cpc	r27, r19
    33e6:	e4 07       	cpc	r30, r20
    33e8:	f5 07       	cpc	r31, r21
    33ea:	20 f0       	brcs	.+8      	; 0x33f4 <__udivmodsi4_ep>
    33ec:	a2 1b       	sub	r26, r18
    33ee:	b3 0b       	sbc	r27, r19
    33f0:	e4 0b       	sbc	r30, r20
    33f2:	f5 0b       	sbc	r31, r21

000033f4 <__udivmodsi4_ep>:
    33f4:	66 1f       	adc	r22, r22
    33f6:	77 1f       	adc	r23, r23
    33f8:	88 1f       	adc	r24, r24
    33fa:	99 1f       	adc	r25, r25
    33fc:	1a 94       	dec	r1
    33fe:	69 f7       	brne	.-38     	; 0x33da <__udivmodsi4_loop>
    3400:	60 95       	com	r22
    3402:	70 95       	com	r23
    3404:	80 95       	com	r24
    3406:	90 95       	com	r25
    3408:	9b 01       	movw	r18, r22
    340a:	ac 01       	movw	r20, r24
    340c:	bd 01       	movw	r22, r26
    340e:	cf 01       	movw	r24, r30
    3410:	08 95       	ret

00003412 <__divmodsi4>:
    3412:	05 2e       	mov	r0, r21
    3414:	97 fb       	bst	r25, 7
    3416:	1e f4       	brtc	.+6      	; 0x341e <__divmodsi4+0xc>
    3418:	00 94       	com	r0
    341a:	0e 94 20 1a 	call	0x3440	; 0x3440 <__negsi2>
    341e:	57 fd       	sbrc	r21, 7
    3420:	07 d0       	rcall	.+14     	; 0x3430 <__divmodsi4_neg2>
    3422:	0e 94 e7 19 	call	0x33ce	; 0x33ce <__udivmodsi4>
    3426:	07 fc       	sbrc	r0, 7
    3428:	03 d0       	rcall	.+6      	; 0x3430 <__divmodsi4_neg2>
    342a:	4e f4       	brtc	.+18     	; 0x343e <__divmodsi4_exit>
    342c:	0c 94 20 1a 	jmp	0x3440	; 0x3440 <__negsi2>

00003430 <__divmodsi4_neg2>:
    3430:	50 95       	com	r21
    3432:	40 95       	com	r20
    3434:	30 95       	com	r19
    3436:	21 95       	neg	r18
    3438:	3f 4f       	sbci	r19, 0xFF	; 255
    343a:	4f 4f       	sbci	r20, 0xFF	; 255
    343c:	5f 4f       	sbci	r21, 0xFF	; 255

0000343e <__divmodsi4_exit>:
    343e:	08 95       	ret

00003440 <__negsi2>:
    3440:	90 95       	com	r25
    3442:	80 95       	com	r24
    3444:	70 95       	com	r23
    3446:	61 95       	neg	r22
    3448:	7f 4f       	sbci	r23, 0xFF	; 255
    344a:	8f 4f       	sbci	r24, 0xFF	; 255
    344c:	9f 4f       	sbci	r25, 0xFF	; 255
    344e:	08 95       	ret

00003450 <__mulshisi3>:
    3450:	b7 ff       	sbrs	r27, 7
    3452:	0c 94 67 1a 	jmp	0x34ce	; 0x34ce <__muluhisi3>

00003456 <__mulohisi3>:
    3456:	0e 94 67 1a 	call	0x34ce	; 0x34ce <__muluhisi3>
    345a:	82 1b       	sub	r24, r18
    345c:	93 0b       	sbc	r25, r19
    345e:	08 95       	ret

00003460 <__prologue_saves__>:
    3460:	2f 92       	push	r2
    3462:	3f 92       	push	r3
    3464:	4f 92       	push	r4
    3466:	5f 92       	push	r5
    3468:	6f 92       	push	r6
    346a:	7f 92       	push	r7
    346c:	8f 92       	push	r8
    346e:	9f 92       	push	r9
    3470:	af 92       	push	r10
    3472:	bf 92       	push	r11
    3474:	cf 92       	push	r12
    3476:	df 92       	push	r13
    3478:	ef 92       	push	r14
    347a:	ff 92       	push	r15
    347c:	0f 93       	push	r16
    347e:	1f 93       	push	r17
    3480:	cf 93       	push	r28
    3482:	df 93       	push	r29
    3484:	cd b7       	in	r28, 0x3d	; 61
    3486:	de b7       	in	r29, 0x3e	; 62
    3488:	ca 1b       	sub	r28, r26
    348a:	db 0b       	sbc	r29, r27
    348c:	0f b6       	in	r0, 0x3f	; 63
    348e:	f8 94       	cli
    3490:	de bf       	out	0x3e, r29	; 62
    3492:	0f be       	out	0x3f, r0	; 63
    3494:	cd bf       	out	0x3d, r28	; 61
    3496:	09 94       	ijmp

00003498 <__epilogue_restores__>:
    3498:	2a 88       	ldd	r2, Y+18	; 0x12
    349a:	39 88       	ldd	r3, Y+17	; 0x11
    349c:	48 88       	ldd	r4, Y+16	; 0x10
    349e:	5f 84       	ldd	r5, Y+15	; 0x0f
    34a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    34a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    34a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    34a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    34a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    34aa:	b9 84       	ldd	r11, Y+9	; 0x09
    34ac:	c8 84       	ldd	r12, Y+8	; 0x08
    34ae:	df 80       	ldd	r13, Y+7	; 0x07
    34b0:	ee 80       	ldd	r14, Y+6	; 0x06
    34b2:	fd 80       	ldd	r15, Y+5	; 0x05
    34b4:	0c 81       	ldd	r16, Y+4	; 0x04
    34b6:	1b 81       	ldd	r17, Y+3	; 0x03
    34b8:	aa 81       	ldd	r26, Y+2	; 0x02
    34ba:	b9 81       	ldd	r27, Y+1	; 0x01
    34bc:	ce 0f       	add	r28, r30
    34be:	d1 1d       	adc	r29, r1
    34c0:	0f b6       	in	r0, 0x3f	; 63
    34c2:	f8 94       	cli
    34c4:	de bf       	out	0x3e, r29	; 62
    34c6:	0f be       	out	0x3f, r0	; 63
    34c8:	cd bf       	out	0x3d, r28	; 61
    34ca:	ed 01       	movw	r28, r26
    34cc:	08 95       	ret

000034ce <__muluhisi3>:
    34ce:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <__umulhisi3>
    34d2:	a5 9f       	mul	r26, r21
    34d4:	90 0d       	add	r25, r0
    34d6:	b4 9f       	mul	r27, r20
    34d8:	90 0d       	add	r25, r0
    34da:	a4 9f       	mul	r26, r20
    34dc:	80 0d       	add	r24, r0
    34de:	91 1d       	adc	r25, r1
    34e0:	11 24       	eor	r1, r1
    34e2:	08 95       	ret

000034e4 <__umulhisi3>:
    34e4:	a2 9f       	mul	r26, r18
    34e6:	b0 01       	movw	r22, r0
    34e8:	b3 9f       	mul	r27, r19
    34ea:	c0 01       	movw	r24, r0
    34ec:	a3 9f       	mul	r26, r19
    34ee:	70 0d       	add	r23, r0
    34f0:	81 1d       	adc	r24, r1
    34f2:	11 24       	eor	r1, r1
    34f4:	91 1d       	adc	r25, r1
    34f6:	b2 9f       	mul	r27, r18
    34f8:	70 0d       	add	r23, r0
    34fa:	81 1d       	adc	r24, r1
    34fc:	11 24       	eor	r1, r1
    34fe:	91 1d       	adc	r25, r1
    3500:	08 95       	ret

00003502 <malloc>:
    3502:	cf 93       	push	r28
    3504:	df 93       	push	r29
    3506:	82 30       	cpi	r24, 0x02	; 2
    3508:	91 05       	cpc	r25, r1
    350a:	10 f4       	brcc	.+4      	; 0x3510 <malloc+0xe>
    350c:	82 e0       	ldi	r24, 0x02	; 2
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	e0 91 9c 0a 	lds	r30, 0x0A9C
    3514:	f0 91 9d 0a 	lds	r31, 0x0A9D
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	c0 e0       	ldi	r28, 0x00	; 0
    351e:	d0 e0       	ldi	r29, 0x00	; 0
    3520:	30 97       	sbiw	r30, 0x00	; 0
    3522:	11 f1       	breq	.+68     	; 0x3568 <malloc+0x66>
    3524:	40 81       	ld	r20, Z
    3526:	51 81       	ldd	r21, Z+1	; 0x01
    3528:	48 17       	cp	r20, r24
    352a:	59 07       	cpc	r21, r25
    352c:	c0 f0       	brcs	.+48     	; 0x355e <malloc+0x5c>
    352e:	48 17       	cp	r20, r24
    3530:	59 07       	cpc	r21, r25
    3532:	61 f4       	brne	.+24     	; 0x354c <malloc+0x4a>
    3534:	82 81       	ldd	r24, Z+2	; 0x02
    3536:	93 81       	ldd	r25, Z+3	; 0x03
    3538:	20 97       	sbiw	r28, 0x00	; 0
    353a:	19 f0       	breq	.+6      	; 0x3542 <malloc+0x40>
    353c:	9b 83       	std	Y+3, r25	; 0x03
    353e:	8a 83       	std	Y+2, r24	; 0x02
    3540:	2b c0       	rjmp	.+86     	; 0x3598 <malloc+0x96>
    3542:	90 93 9d 0a 	sts	0x0A9D, r25
    3546:	80 93 9c 0a 	sts	0x0A9C, r24
    354a:	26 c0       	rjmp	.+76     	; 0x3598 <malloc+0x96>
    354c:	21 15       	cp	r18, r1
    354e:	31 05       	cpc	r19, r1
    3550:	19 f0       	breq	.+6      	; 0x3558 <malloc+0x56>
    3552:	42 17       	cp	r20, r18
    3554:	53 07       	cpc	r21, r19
    3556:	18 f4       	brcc	.+6      	; 0x355e <malloc+0x5c>
    3558:	9a 01       	movw	r18, r20
    355a:	be 01       	movw	r22, r28
    355c:	df 01       	movw	r26, r30
    355e:	ef 01       	movw	r28, r30
    3560:	02 80       	ldd	r0, Z+2	; 0x02
    3562:	f3 81       	ldd	r31, Z+3	; 0x03
    3564:	e0 2d       	mov	r30, r0
    3566:	dc cf       	rjmp	.-72     	; 0x3520 <malloc+0x1e>
    3568:	21 15       	cp	r18, r1
    356a:	31 05       	cpc	r19, r1
    356c:	09 f1       	breq	.+66     	; 0x35b0 <malloc+0xae>
    356e:	28 1b       	sub	r18, r24
    3570:	39 0b       	sbc	r19, r25
    3572:	24 30       	cpi	r18, 0x04	; 4
    3574:	31 05       	cpc	r19, r1
    3576:	90 f4       	brcc	.+36     	; 0x359c <malloc+0x9a>
    3578:	12 96       	adiw	r26, 0x02	; 2
    357a:	8d 91       	ld	r24, X+
    357c:	9c 91       	ld	r25, X
    357e:	13 97       	sbiw	r26, 0x03	; 3
    3580:	61 15       	cp	r22, r1
    3582:	71 05       	cpc	r23, r1
    3584:	21 f0       	breq	.+8      	; 0x358e <malloc+0x8c>
    3586:	fb 01       	movw	r30, r22
    3588:	93 83       	std	Z+3, r25	; 0x03
    358a:	82 83       	std	Z+2, r24	; 0x02
    358c:	04 c0       	rjmp	.+8      	; 0x3596 <malloc+0x94>
    358e:	90 93 9d 0a 	sts	0x0A9D, r25
    3592:	80 93 9c 0a 	sts	0x0A9C, r24
    3596:	fd 01       	movw	r30, r26
    3598:	32 96       	adiw	r30, 0x02	; 2
    359a:	44 c0       	rjmp	.+136    	; 0x3624 <malloc+0x122>
    359c:	fd 01       	movw	r30, r26
    359e:	e2 0f       	add	r30, r18
    35a0:	f3 1f       	adc	r31, r19
    35a2:	81 93       	st	Z+, r24
    35a4:	91 93       	st	Z+, r25
    35a6:	22 50       	subi	r18, 0x02	; 2
    35a8:	31 09       	sbc	r19, r1
    35aa:	2d 93       	st	X+, r18
    35ac:	3c 93       	st	X, r19
    35ae:	3a c0       	rjmp	.+116    	; 0x3624 <malloc+0x122>
    35b0:	20 91 9a 0a 	lds	r18, 0x0A9A
    35b4:	30 91 9b 0a 	lds	r19, 0x0A9B
    35b8:	23 2b       	or	r18, r19
    35ba:	41 f4       	brne	.+16     	; 0x35cc <malloc+0xca>
    35bc:	20 91 02 02 	lds	r18, 0x0202
    35c0:	30 91 03 02 	lds	r19, 0x0203
    35c4:	30 93 9b 0a 	sts	0x0A9B, r19
    35c8:	20 93 9a 0a 	sts	0x0A9A, r18
    35cc:	20 91 00 02 	lds	r18, 0x0200
    35d0:	30 91 01 02 	lds	r19, 0x0201
    35d4:	21 15       	cp	r18, r1
    35d6:	31 05       	cpc	r19, r1
    35d8:	41 f4       	brne	.+16     	; 0x35ea <malloc+0xe8>
    35da:	2d b7       	in	r18, 0x3d	; 61
    35dc:	3e b7       	in	r19, 0x3e	; 62
    35de:	40 91 04 02 	lds	r20, 0x0204
    35e2:	50 91 05 02 	lds	r21, 0x0205
    35e6:	24 1b       	sub	r18, r20
    35e8:	35 0b       	sbc	r19, r21
    35ea:	e0 91 9a 0a 	lds	r30, 0x0A9A
    35ee:	f0 91 9b 0a 	lds	r31, 0x0A9B
    35f2:	e2 17       	cp	r30, r18
    35f4:	f3 07       	cpc	r31, r19
    35f6:	a0 f4       	brcc	.+40     	; 0x3620 <malloc+0x11e>
    35f8:	2e 1b       	sub	r18, r30
    35fa:	3f 0b       	sbc	r19, r31
    35fc:	28 17       	cp	r18, r24
    35fe:	39 07       	cpc	r19, r25
    3600:	78 f0       	brcs	.+30     	; 0x3620 <malloc+0x11e>
    3602:	ac 01       	movw	r20, r24
    3604:	4e 5f       	subi	r20, 0xFE	; 254
    3606:	5f 4f       	sbci	r21, 0xFF	; 255
    3608:	24 17       	cp	r18, r20
    360a:	35 07       	cpc	r19, r21
    360c:	48 f0       	brcs	.+18     	; 0x3620 <malloc+0x11e>
    360e:	4e 0f       	add	r20, r30
    3610:	5f 1f       	adc	r21, r31
    3612:	50 93 9b 0a 	sts	0x0A9B, r21
    3616:	40 93 9a 0a 	sts	0x0A9A, r20
    361a:	81 93       	st	Z+, r24
    361c:	91 93       	st	Z+, r25
    361e:	02 c0       	rjmp	.+4      	; 0x3624 <malloc+0x122>
    3620:	e0 e0       	ldi	r30, 0x00	; 0
    3622:	f0 e0       	ldi	r31, 0x00	; 0
    3624:	cf 01       	movw	r24, r30
    3626:	df 91       	pop	r29
    3628:	cf 91       	pop	r28
    362a:	08 95       	ret

0000362c <free>:
    362c:	0f 93       	push	r16
    362e:	1f 93       	push	r17
    3630:	cf 93       	push	r28
    3632:	df 93       	push	r29
    3634:	00 97       	sbiw	r24, 0x00	; 0
    3636:	09 f4       	brne	.+2      	; 0x363a <free+0xe>
    3638:	8c c0       	rjmp	.+280    	; 0x3752 <free+0x126>
    363a:	fc 01       	movw	r30, r24
    363c:	32 97       	sbiw	r30, 0x02	; 2
    363e:	13 82       	std	Z+3, r1	; 0x03
    3640:	12 82       	std	Z+2, r1	; 0x02
    3642:	00 91 9c 0a 	lds	r16, 0x0A9C
    3646:	10 91 9d 0a 	lds	r17, 0x0A9D
    364a:	01 15       	cp	r16, r1
    364c:	11 05       	cpc	r17, r1
    364e:	81 f4       	brne	.+32     	; 0x3670 <free+0x44>
    3650:	20 81       	ld	r18, Z
    3652:	31 81       	ldd	r19, Z+1	; 0x01
    3654:	82 0f       	add	r24, r18
    3656:	93 1f       	adc	r25, r19
    3658:	20 91 9a 0a 	lds	r18, 0x0A9A
    365c:	30 91 9b 0a 	lds	r19, 0x0A9B
    3660:	28 17       	cp	r18, r24
    3662:	39 07       	cpc	r19, r25
    3664:	79 f5       	brne	.+94     	; 0x36c4 <free+0x98>
    3666:	f0 93 9b 0a 	sts	0x0A9B, r31
    366a:	e0 93 9a 0a 	sts	0x0A9A, r30
    366e:	71 c0       	rjmp	.+226    	; 0x3752 <free+0x126>
    3670:	d8 01       	movw	r26, r16
    3672:	40 e0       	ldi	r20, 0x00	; 0
    3674:	50 e0       	ldi	r21, 0x00	; 0
    3676:	ae 17       	cp	r26, r30
    3678:	bf 07       	cpc	r27, r31
    367a:	50 f4       	brcc	.+20     	; 0x3690 <free+0x64>
    367c:	12 96       	adiw	r26, 0x02	; 2
    367e:	2d 91       	ld	r18, X+
    3680:	3c 91       	ld	r19, X
    3682:	13 97       	sbiw	r26, 0x03	; 3
    3684:	ad 01       	movw	r20, r26
    3686:	21 15       	cp	r18, r1
    3688:	31 05       	cpc	r19, r1
    368a:	09 f1       	breq	.+66     	; 0x36ce <free+0xa2>
    368c:	d9 01       	movw	r26, r18
    368e:	f3 cf       	rjmp	.-26     	; 0x3676 <free+0x4a>
    3690:	9d 01       	movw	r18, r26
    3692:	da 01       	movw	r26, r20
    3694:	33 83       	std	Z+3, r19	; 0x03
    3696:	22 83       	std	Z+2, r18	; 0x02
    3698:	60 81       	ld	r22, Z
    369a:	71 81       	ldd	r23, Z+1	; 0x01
    369c:	86 0f       	add	r24, r22
    369e:	97 1f       	adc	r25, r23
    36a0:	82 17       	cp	r24, r18
    36a2:	93 07       	cpc	r25, r19
    36a4:	69 f4       	brne	.+26     	; 0x36c0 <free+0x94>
    36a6:	ec 01       	movw	r28, r24
    36a8:	28 81       	ld	r18, Y
    36aa:	39 81       	ldd	r19, Y+1	; 0x01
    36ac:	26 0f       	add	r18, r22
    36ae:	37 1f       	adc	r19, r23
    36b0:	2e 5f       	subi	r18, 0xFE	; 254
    36b2:	3f 4f       	sbci	r19, 0xFF	; 255
    36b4:	31 83       	std	Z+1, r19	; 0x01
    36b6:	20 83       	st	Z, r18
    36b8:	8a 81       	ldd	r24, Y+2	; 0x02
    36ba:	9b 81       	ldd	r25, Y+3	; 0x03
    36bc:	93 83       	std	Z+3, r25	; 0x03
    36be:	82 83       	std	Z+2, r24	; 0x02
    36c0:	45 2b       	or	r20, r21
    36c2:	29 f4       	brne	.+10     	; 0x36ce <free+0xa2>
    36c4:	f0 93 9d 0a 	sts	0x0A9D, r31
    36c8:	e0 93 9c 0a 	sts	0x0A9C, r30
    36cc:	42 c0       	rjmp	.+132    	; 0x3752 <free+0x126>
    36ce:	13 96       	adiw	r26, 0x03	; 3
    36d0:	fc 93       	st	X, r31
    36d2:	ee 93       	st	-X, r30
    36d4:	12 97       	sbiw	r26, 0x02	; 2
    36d6:	ed 01       	movw	r28, r26
    36d8:	49 91       	ld	r20, Y+
    36da:	59 91       	ld	r21, Y+
    36dc:	9e 01       	movw	r18, r28
    36de:	24 0f       	add	r18, r20
    36e0:	35 1f       	adc	r19, r21
    36e2:	e2 17       	cp	r30, r18
    36e4:	f3 07       	cpc	r31, r19
    36e6:	71 f4       	brne	.+28     	; 0x3704 <free+0xd8>
    36e8:	80 81       	ld	r24, Z
    36ea:	91 81       	ldd	r25, Z+1	; 0x01
    36ec:	84 0f       	add	r24, r20
    36ee:	95 1f       	adc	r25, r21
    36f0:	02 96       	adiw	r24, 0x02	; 2
    36f2:	11 96       	adiw	r26, 0x01	; 1
    36f4:	9c 93       	st	X, r25
    36f6:	8e 93       	st	-X, r24
    36f8:	82 81       	ldd	r24, Z+2	; 0x02
    36fa:	93 81       	ldd	r25, Z+3	; 0x03
    36fc:	13 96       	adiw	r26, 0x03	; 3
    36fe:	9c 93       	st	X, r25
    3700:	8e 93       	st	-X, r24
    3702:	12 97       	sbiw	r26, 0x02	; 2
    3704:	e0 e0       	ldi	r30, 0x00	; 0
    3706:	f0 e0       	ldi	r31, 0x00	; 0
    3708:	d8 01       	movw	r26, r16
    370a:	12 96       	adiw	r26, 0x02	; 2
    370c:	8d 91       	ld	r24, X+
    370e:	9c 91       	ld	r25, X
    3710:	13 97       	sbiw	r26, 0x03	; 3
    3712:	00 97       	sbiw	r24, 0x00	; 0
    3714:	19 f0       	breq	.+6      	; 0x371c <free+0xf0>
    3716:	f8 01       	movw	r30, r16
    3718:	8c 01       	movw	r16, r24
    371a:	f6 cf       	rjmp	.-20     	; 0x3708 <free+0xdc>
    371c:	8d 91       	ld	r24, X+
    371e:	9c 91       	ld	r25, X
    3720:	98 01       	movw	r18, r16
    3722:	2e 5f       	subi	r18, 0xFE	; 254
    3724:	3f 4f       	sbci	r19, 0xFF	; 255
    3726:	82 0f       	add	r24, r18
    3728:	93 1f       	adc	r25, r19
    372a:	20 91 9a 0a 	lds	r18, 0x0A9A
    372e:	30 91 9b 0a 	lds	r19, 0x0A9B
    3732:	28 17       	cp	r18, r24
    3734:	39 07       	cpc	r19, r25
    3736:	69 f4       	brne	.+26     	; 0x3752 <free+0x126>
    3738:	30 97       	sbiw	r30, 0x00	; 0
    373a:	29 f4       	brne	.+10     	; 0x3746 <free+0x11a>
    373c:	10 92 9d 0a 	sts	0x0A9D, r1
    3740:	10 92 9c 0a 	sts	0x0A9C, r1
    3744:	02 c0       	rjmp	.+4      	; 0x374a <free+0x11e>
    3746:	13 82       	std	Z+3, r1	; 0x03
    3748:	12 82       	std	Z+2, r1	; 0x02
    374a:	10 93 9b 0a 	sts	0x0A9B, r17
    374e:	00 93 9a 0a 	sts	0x0A9A, r16
    3752:	df 91       	pop	r29
    3754:	cf 91       	pop	r28
    3756:	1f 91       	pop	r17
    3758:	0f 91       	pop	r16
    375a:	08 95       	ret

0000375c <__ftoa_engine>:
    375c:	28 30       	cpi	r18, 0x08	; 8
    375e:	08 f0       	brcs	.+2      	; 0x3762 <__ftoa_engine+0x6>
    3760:	27 e0       	ldi	r18, 0x07	; 7
    3762:	33 27       	eor	r19, r19
    3764:	da 01       	movw	r26, r20
    3766:	99 0f       	add	r25, r25
    3768:	31 1d       	adc	r19, r1
    376a:	87 fd       	sbrc	r24, 7
    376c:	91 60       	ori	r25, 0x01	; 1
    376e:	00 96       	adiw	r24, 0x00	; 0
    3770:	61 05       	cpc	r22, r1
    3772:	71 05       	cpc	r23, r1
    3774:	39 f4       	brne	.+14     	; 0x3784 <__ftoa_engine+0x28>
    3776:	32 60       	ori	r19, 0x02	; 2
    3778:	2e 5f       	subi	r18, 0xFE	; 254
    377a:	3d 93       	st	X+, r19
    377c:	30 e3       	ldi	r19, 0x30	; 48
    377e:	2a 95       	dec	r18
    3780:	e1 f7       	brne	.-8      	; 0x377a <__ftoa_engine+0x1e>
    3782:	08 95       	ret
    3784:	9f 3f       	cpi	r25, 0xFF	; 255
    3786:	30 f0       	brcs	.+12     	; 0x3794 <__ftoa_engine+0x38>
    3788:	80 38       	cpi	r24, 0x80	; 128
    378a:	71 05       	cpc	r23, r1
    378c:	61 05       	cpc	r22, r1
    378e:	09 f0       	breq	.+2      	; 0x3792 <__ftoa_engine+0x36>
    3790:	3c 5f       	subi	r19, 0xFC	; 252
    3792:	3c 5f       	subi	r19, 0xFC	; 252
    3794:	3d 93       	st	X+, r19
    3796:	91 30       	cpi	r25, 0x01	; 1
    3798:	08 f0       	brcs	.+2      	; 0x379c <__ftoa_engine+0x40>
    379a:	80 68       	ori	r24, 0x80	; 128
    379c:	91 1d       	adc	r25, r1
    379e:	df 93       	push	r29
    37a0:	cf 93       	push	r28
    37a2:	1f 93       	push	r17
    37a4:	0f 93       	push	r16
    37a6:	ff 92       	push	r15
    37a8:	ef 92       	push	r14
    37aa:	19 2f       	mov	r17, r25
    37ac:	98 7f       	andi	r25, 0xF8	; 248
    37ae:	96 95       	lsr	r25
    37b0:	e9 2f       	mov	r30, r25
    37b2:	96 95       	lsr	r25
    37b4:	96 95       	lsr	r25
    37b6:	e9 0f       	add	r30, r25
    37b8:	ff 27       	eor	r31, r31
    37ba:	ea 56       	subi	r30, 0x6A	; 106
    37bc:	fe 4f       	sbci	r31, 0xFE	; 254
    37be:	99 27       	eor	r25, r25
    37c0:	33 27       	eor	r19, r19
    37c2:	ee 24       	eor	r14, r14
    37c4:	ff 24       	eor	r15, r15
    37c6:	a7 01       	movw	r20, r14
    37c8:	e7 01       	movw	r28, r14
    37ca:	05 90       	lpm	r0, Z+
    37cc:	08 94       	sec
    37ce:	07 94       	ror	r0
    37d0:	28 f4       	brcc	.+10     	; 0x37dc <__ftoa_engine+0x80>
    37d2:	36 0f       	add	r19, r22
    37d4:	e7 1e       	adc	r14, r23
    37d6:	f8 1e       	adc	r15, r24
    37d8:	49 1f       	adc	r20, r25
    37da:	51 1d       	adc	r21, r1
    37dc:	66 0f       	add	r22, r22
    37de:	77 1f       	adc	r23, r23
    37e0:	88 1f       	adc	r24, r24
    37e2:	99 1f       	adc	r25, r25
    37e4:	06 94       	lsr	r0
    37e6:	a1 f7       	brne	.-24     	; 0x37d0 <__ftoa_engine+0x74>
    37e8:	05 90       	lpm	r0, Z+
    37ea:	07 94       	ror	r0
    37ec:	28 f4       	brcc	.+10     	; 0x37f8 <__ftoa_engine+0x9c>
    37ee:	e7 0e       	add	r14, r23
    37f0:	f8 1e       	adc	r15, r24
    37f2:	49 1f       	adc	r20, r25
    37f4:	56 1f       	adc	r21, r22
    37f6:	c1 1d       	adc	r28, r1
    37f8:	77 0f       	add	r23, r23
    37fa:	88 1f       	adc	r24, r24
    37fc:	99 1f       	adc	r25, r25
    37fe:	66 1f       	adc	r22, r22
    3800:	06 94       	lsr	r0
    3802:	a1 f7       	brne	.-24     	; 0x37ec <__ftoa_engine+0x90>
    3804:	05 90       	lpm	r0, Z+
    3806:	07 94       	ror	r0
    3808:	28 f4       	brcc	.+10     	; 0x3814 <__ftoa_engine+0xb8>
    380a:	f8 0e       	add	r15, r24
    380c:	49 1f       	adc	r20, r25
    380e:	56 1f       	adc	r21, r22
    3810:	c7 1f       	adc	r28, r23
    3812:	d1 1d       	adc	r29, r1
    3814:	88 0f       	add	r24, r24
    3816:	99 1f       	adc	r25, r25
    3818:	66 1f       	adc	r22, r22
    381a:	77 1f       	adc	r23, r23
    381c:	06 94       	lsr	r0
    381e:	a1 f7       	brne	.-24     	; 0x3808 <__ftoa_engine+0xac>
    3820:	05 90       	lpm	r0, Z+
    3822:	07 94       	ror	r0
    3824:	20 f4       	brcc	.+8      	; 0x382e <__ftoa_engine+0xd2>
    3826:	49 0f       	add	r20, r25
    3828:	56 1f       	adc	r21, r22
    382a:	c7 1f       	adc	r28, r23
    382c:	d8 1f       	adc	r29, r24
    382e:	99 0f       	add	r25, r25
    3830:	66 1f       	adc	r22, r22
    3832:	77 1f       	adc	r23, r23
    3834:	88 1f       	adc	r24, r24
    3836:	06 94       	lsr	r0
    3838:	a9 f7       	brne	.-22     	; 0x3824 <__ftoa_engine+0xc8>
    383a:	84 91       	lpm	r24, Z
    383c:	10 95       	com	r17
    383e:	17 70       	andi	r17, 0x07	; 7
    3840:	41 f0       	breq	.+16     	; 0x3852 <__ftoa_engine+0xf6>
    3842:	d6 95       	lsr	r29
    3844:	c7 95       	ror	r28
    3846:	57 95       	ror	r21
    3848:	47 95       	ror	r20
    384a:	f7 94       	ror	r15
    384c:	e7 94       	ror	r14
    384e:	1a 95       	dec	r17
    3850:	c1 f7       	brne	.-16     	; 0x3842 <__ftoa_engine+0xe6>
    3852:	ec e3       	ldi	r30, 0x3C	; 60
    3854:	f1 e0       	ldi	r31, 0x01	; 1
    3856:	68 94       	set
    3858:	15 90       	lpm	r1, Z+
    385a:	15 91       	lpm	r17, Z+
    385c:	35 91       	lpm	r19, Z+
    385e:	65 91       	lpm	r22, Z+
    3860:	95 91       	lpm	r25, Z+
    3862:	05 90       	lpm	r0, Z+
    3864:	7f e2       	ldi	r23, 0x2F	; 47
    3866:	73 95       	inc	r23
    3868:	e1 18       	sub	r14, r1
    386a:	f1 0a       	sbc	r15, r17
    386c:	43 0b       	sbc	r20, r19
    386e:	56 0b       	sbc	r21, r22
    3870:	c9 0b       	sbc	r28, r25
    3872:	d0 09       	sbc	r29, r0
    3874:	c0 f7       	brcc	.-16     	; 0x3866 <__ftoa_engine+0x10a>
    3876:	e1 0c       	add	r14, r1
    3878:	f1 1e       	adc	r15, r17
    387a:	43 1f       	adc	r20, r19
    387c:	56 1f       	adc	r21, r22
    387e:	c9 1f       	adc	r28, r25
    3880:	d0 1d       	adc	r29, r0
    3882:	7e f4       	brtc	.+30     	; 0x38a2 <__ftoa_engine+0x146>
    3884:	70 33       	cpi	r23, 0x30	; 48
    3886:	11 f4       	brne	.+4      	; 0x388c <__ftoa_engine+0x130>
    3888:	8a 95       	dec	r24
    388a:	e6 cf       	rjmp	.-52     	; 0x3858 <__ftoa_engine+0xfc>
    388c:	e8 94       	clt
    388e:	01 50       	subi	r16, 0x01	; 1
    3890:	30 f0       	brcs	.+12     	; 0x389e <__ftoa_engine+0x142>
    3892:	08 0f       	add	r16, r24
    3894:	0a f4       	brpl	.+2      	; 0x3898 <__ftoa_engine+0x13c>
    3896:	00 27       	eor	r16, r16
    3898:	02 17       	cp	r16, r18
    389a:	08 f4       	brcc	.+2      	; 0x389e <__ftoa_engine+0x142>
    389c:	20 2f       	mov	r18, r16
    389e:	23 95       	inc	r18
    38a0:	02 2f       	mov	r16, r18
    38a2:	7a 33       	cpi	r23, 0x3A	; 58
    38a4:	28 f0       	brcs	.+10     	; 0x38b0 <__ftoa_engine+0x154>
    38a6:	79 e3       	ldi	r23, 0x39	; 57
    38a8:	7d 93       	st	X+, r23
    38aa:	2a 95       	dec	r18
    38ac:	e9 f7       	brne	.-6      	; 0x38a8 <__ftoa_engine+0x14c>
    38ae:	10 c0       	rjmp	.+32     	; 0x38d0 <__ftoa_engine+0x174>
    38b0:	7d 93       	st	X+, r23
    38b2:	2a 95       	dec	r18
    38b4:	89 f6       	brne	.-94     	; 0x3858 <__ftoa_engine+0xfc>
    38b6:	06 94       	lsr	r0
    38b8:	97 95       	ror	r25
    38ba:	67 95       	ror	r22
    38bc:	37 95       	ror	r19
    38be:	17 95       	ror	r17
    38c0:	17 94       	ror	r1
    38c2:	e1 18       	sub	r14, r1
    38c4:	f1 0a       	sbc	r15, r17
    38c6:	43 0b       	sbc	r20, r19
    38c8:	56 0b       	sbc	r21, r22
    38ca:	c9 0b       	sbc	r28, r25
    38cc:	d0 09       	sbc	r29, r0
    38ce:	98 f0       	brcs	.+38     	; 0x38f6 <__ftoa_engine+0x19a>
    38d0:	23 95       	inc	r18
    38d2:	7e 91       	ld	r23, -X
    38d4:	73 95       	inc	r23
    38d6:	7a 33       	cpi	r23, 0x3A	; 58
    38d8:	08 f0       	brcs	.+2      	; 0x38dc <__ftoa_engine+0x180>
    38da:	70 e3       	ldi	r23, 0x30	; 48
    38dc:	7c 93       	st	X, r23
    38de:	20 13       	cpse	r18, r16
    38e0:	b8 f7       	brcc	.-18     	; 0x38d0 <__ftoa_engine+0x174>
    38e2:	7e 91       	ld	r23, -X
    38e4:	70 61       	ori	r23, 0x10	; 16
    38e6:	7d 93       	st	X+, r23
    38e8:	30 f0       	brcs	.+12     	; 0x38f6 <__ftoa_engine+0x19a>
    38ea:	83 95       	inc	r24
    38ec:	71 e3       	ldi	r23, 0x31	; 49
    38ee:	7d 93       	st	X+, r23
    38f0:	70 e3       	ldi	r23, 0x30	; 48
    38f2:	2a 95       	dec	r18
    38f4:	e1 f7       	brne	.-8      	; 0x38ee <__ftoa_engine+0x192>
    38f6:	11 24       	eor	r1, r1
    38f8:	ef 90       	pop	r14
    38fa:	ff 90       	pop	r15
    38fc:	0f 91       	pop	r16
    38fe:	1f 91       	pop	r17
    3900:	cf 91       	pop	r28
    3902:	df 91       	pop	r29
    3904:	99 27       	eor	r25, r25
    3906:	87 fd       	sbrc	r24, 7
    3908:	90 95       	com	r25
    390a:	08 95       	ret

0000390c <strnlen_P>:
    390c:	fc 01       	movw	r30, r24
    390e:	05 90       	lpm	r0, Z+
    3910:	61 50       	subi	r22, 0x01	; 1
    3912:	70 40       	sbci	r23, 0x00	; 0
    3914:	01 10       	cpse	r0, r1
    3916:	d8 f7       	brcc	.-10     	; 0x390e <strnlen_P+0x2>
    3918:	80 95       	com	r24
    391a:	90 95       	com	r25
    391c:	8e 0f       	add	r24, r30
    391e:	9f 1f       	adc	r25, r31
    3920:	08 95       	ret

00003922 <strnlen>:
    3922:	fc 01       	movw	r30, r24
    3924:	61 50       	subi	r22, 0x01	; 1
    3926:	70 40       	sbci	r23, 0x00	; 0
    3928:	01 90       	ld	r0, Z+
    392a:	01 10       	cpse	r0, r1
    392c:	d8 f7       	brcc	.-10     	; 0x3924 <strnlen+0x2>
    392e:	80 95       	com	r24
    3930:	90 95       	com	r25
    3932:	8e 0f       	add	r24, r30
    3934:	9f 1f       	adc	r25, r31
    3936:	08 95       	ret

00003938 <fputc>:
    3938:	0f 93       	push	r16
    393a:	1f 93       	push	r17
    393c:	cf 93       	push	r28
    393e:	df 93       	push	r29
    3940:	fb 01       	movw	r30, r22
    3942:	23 81       	ldd	r18, Z+3	; 0x03
    3944:	21 fd       	sbrc	r18, 1
    3946:	03 c0       	rjmp	.+6      	; 0x394e <fputc+0x16>
    3948:	8f ef       	ldi	r24, 0xFF	; 255
    394a:	9f ef       	ldi	r25, 0xFF	; 255
    394c:	28 c0       	rjmp	.+80     	; 0x399e <fputc+0x66>
    394e:	22 ff       	sbrs	r18, 2
    3950:	16 c0       	rjmp	.+44     	; 0x397e <fputc+0x46>
    3952:	46 81       	ldd	r20, Z+6	; 0x06
    3954:	57 81       	ldd	r21, Z+7	; 0x07
    3956:	24 81       	ldd	r18, Z+4	; 0x04
    3958:	35 81       	ldd	r19, Z+5	; 0x05
    395a:	42 17       	cp	r20, r18
    395c:	53 07       	cpc	r21, r19
    395e:	44 f4       	brge	.+16     	; 0x3970 <fputc+0x38>
    3960:	a0 81       	ld	r26, Z
    3962:	b1 81       	ldd	r27, Z+1	; 0x01
    3964:	9d 01       	movw	r18, r26
    3966:	2f 5f       	subi	r18, 0xFF	; 255
    3968:	3f 4f       	sbci	r19, 0xFF	; 255
    396a:	31 83       	std	Z+1, r19	; 0x01
    396c:	20 83       	st	Z, r18
    396e:	8c 93       	st	X, r24
    3970:	26 81       	ldd	r18, Z+6	; 0x06
    3972:	37 81       	ldd	r19, Z+7	; 0x07
    3974:	2f 5f       	subi	r18, 0xFF	; 255
    3976:	3f 4f       	sbci	r19, 0xFF	; 255
    3978:	37 83       	std	Z+7, r19	; 0x07
    397a:	26 83       	std	Z+6, r18	; 0x06
    397c:	10 c0       	rjmp	.+32     	; 0x399e <fputc+0x66>
    397e:	eb 01       	movw	r28, r22
    3980:	09 2f       	mov	r16, r25
    3982:	18 2f       	mov	r17, r24
    3984:	00 84       	ldd	r0, Z+8	; 0x08
    3986:	f1 85       	ldd	r31, Z+9	; 0x09
    3988:	e0 2d       	mov	r30, r0
    398a:	09 95       	icall
    398c:	89 2b       	or	r24, r25
    398e:	e1 f6       	brne	.-72     	; 0x3948 <fputc+0x10>
    3990:	8e 81       	ldd	r24, Y+6	; 0x06
    3992:	9f 81       	ldd	r25, Y+7	; 0x07
    3994:	01 96       	adiw	r24, 0x01	; 1
    3996:	9f 83       	std	Y+7, r25	; 0x07
    3998:	8e 83       	std	Y+6, r24	; 0x06
    399a:	81 2f       	mov	r24, r17
    399c:	90 2f       	mov	r25, r16
    399e:	df 91       	pop	r29
    39a0:	cf 91       	pop	r28
    39a2:	1f 91       	pop	r17
    39a4:	0f 91       	pop	r16
    39a6:	08 95       	ret

000039a8 <printf>:
    39a8:	a0 e0       	ldi	r26, 0x00	; 0
    39aa:	b0 e0       	ldi	r27, 0x00	; 0
    39ac:	ea ed       	ldi	r30, 0xDA	; 218
    39ae:	fc e1       	ldi	r31, 0x1C	; 28
    39b0:	0c 94 40 1a 	jmp	0x3480	; 0x3480 <__prologue_saves__+0x20>
    39b4:	ae 01       	movw	r20, r28
    39b6:	4b 5f       	subi	r20, 0xFB	; 251
    39b8:	5f 4f       	sbci	r21, 0xFF	; 255
    39ba:	fa 01       	movw	r30, r20
    39bc:	61 91       	ld	r22, Z+
    39be:	71 91       	ld	r23, Z+
    39c0:	af 01       	movw	r20, r30
    39c2:	80 91 a0 0a 	lds	r24, 0x0AA0
    39c6:	90 91 a1 0a 	lds	r25, 0x0AA1
    39ca:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <vfprintf>
    39ce:	e2 e0       	ldi	r30, 0x02	; 2
    39d0:	0c 94 5c 1a 	jmp	0x34b8	; 0x34b8 <__epilogue_restores__+0x20>

000039d4 <putchar>:
    39d4:	60 91 a0 0a 	lds	r22, 0x0AA0
    39d8:	70 91 a1 0a 	lds	r23, 0x0AA1
    39dc:	0e 94 9c 1c 	call	0x3938	; 0x3938 <fputc>
    39e0:	08 95       	ret

000039e2 <puts>:
    39e2:	0f 93       	push	r16
    39e4:	1f 93       	push	r17
    39e6:	cf 93       	push	r28
    39e8:	df 93       	push	r29
    39ea:	e0 91 a0 0a 	lds	r30, 0x0AA0
    39ee:	f0 91 a1 0a 	lds	r31, 0x0AA1
    39f2:	23 81       	ldd	r18, Z+3	; 0x03
    39f4:	21 ff       	sbrs	r18, 1
    39f6:	1b c0       	rjmp	.+54     	; 0x3a2e <puts+0x4c>
    39f8:	8c 01       	movw	r16, r24
    39fa:	d0 e0       	ldi	r29, 0x00	; 0
    39fc:	c0 e0       	ldi	r28, 0x00	; 0
    39fe:	f8 01       	movw	r30, r16
    3a00:	81 91       	ld	r24, Z+
    3a02:	8f 01       	movw	r16, r30
    3a04:	60 91 a0 0a 	lds	r22, 0x0AA0
    3a08:	70 91 a1 0a 	lds	r23, 0x0AA1
    3a0c:	db 01       	movw	r26, r22
    3a0e:	18 96       	adiw	r26, 0x08	; 8
    3a10:	ed 91       	ld	r30, X+
    3a12:	fc 91       	ld	r31, X
    3a14:	19 97       	sbiw	r26, 0x09	; 9
    3a16:	88 23       	and	r24, r24
    3a18:	31 f0       	breq	.+12     	; 0x3a26 <puts+0x44>
    3a1a:	09 95       	icall
    3a1c:	89 2b       	or	r24, r25
    3a1e:	79 f3       	breq	.-34     	; 0x39fe <puts+0x1c>
    3a20:	df ef       	ldi	r29, 0xFF	; 255
    3a22:	cf ef       	ldi	r28, 0xFF	; 255
    3a24:	ec cf       	rjmp	.-40     	; 0x39fe <puts+0x1c>
    3a26:	8a e0       	ldi	r24, 0x0A	; 10
    3a28:	09 95       	icall
    3a2a:	89 2b       	or	r24, r25
    3a2c:	19 f0       	breq	.+6      	; 0x3a34 <puts+0x52>
    3a2e:	8f ef       	ldi	r24, 0xFF	; 255
    3a30:	9f ef       	ldi	r25, 0xFF	; 255
    3a32:	02 c0       	rjmp	.+4      	; 0x3a38 <puts+0x56>
    3a34:	8d 2f       	mov	r24, r29
    3a36:	9c 2f       	mov	r25, r28
    3a38:	df 91       	pop	r29
    3a3a:	cf 91       	pop	r28
    3a3c:	1f 91       	pop	r17
    3a3e:	0f 91       	pop	r16
    3a40:	08 95       	ret

00003a42 <__ultoa_invert>:
    3a42:	fa 01       	movw	r30, r20
    3a44:	aa 27       	eor	r26, r26
    3a46:	28 30       	cpi	r18, 0x08	; 8
    3a48:	51 f1       	breq	.+84     	; 0x3a9e <__ultoa_invert+0x5c>
    3a4a:	20 31       	cpi	r18, 0x10	; 16
    3a4c:	81 f1       	breq	.+96     	; 0x3aae <__ultoa_invert+0x6c>
    3a4e:	e8 94       	clt
    3a50:	6f 93       	push	r22
    3a52:	6e 7f       	andi	r22, 0xFE	; 254
    3a54:	6e 5f       	subi	r22, 0xFE	; 254
    3a56:	7f 4f       	sbci	r23, 0xFF	; 255
    3a58:	8f 4f       	sbci	r24, 0xFF	; 255
    3a5a:	9f 4f       	sbci	r25, 0xFF	; 255
    3a5c:	af 4f       	sbci	r26, 0xFF	; 255
    3a5e:	b1 e0       	ldi	r27, 0x01	; 1
    3a60:	3e d0       	rcall	.+124    	; 0x3ade <__ultoa_invert+0x9c>
    3a62:	b4 e0       	ldi	r27, 0x04	; 4
    3a64:	3c d0       	rcall	.+120    	; 0x3ade <__ultoa_invert+0x9c>
    3a66:	67 0f       	add	r22, r23
    3a68:	78 1f       	adc	r23, r24
    3a6a:	89 1f       	adc	r24, r25
    3a6c:	9a 1f       	adc	r25, r26
    3a6e:	a1 1d       	adc	r26, r1
    3a70:	68 0f       	add	r22, r24
    3a72:	79 1f       	adc	r23, r25
    3a74:	8a 1f       	adc	r24, r26
    3a76:	91 1d       	adc	r25, r1
    3a78:	a1 1d       	adc	r26, r1
    3a7a:	6a 0f       	add	r22, r26
    3a7c:	71 1d       	adc	r23, r1
    3a7e:	81 1d       	adc	r24, r1
    3a80:	91 1d       	adc	r25, r1
    3a82:	a1 1d       	adc	r26, r1
    3a84:	20 d0       	rcall	.+64     	; 0x3ac6 <__ultoa_invert+0x84>
    3a86:	09 f4       	brne	.+2      	; 0x3a8a <__ultoa_invert+0x48>
    3a88:	68 94       	set
    3a8a:	3f 91       	pop	r19
    3a8c:	2a e0       	ldi	r18, 0x0A	; 10
    3a8e:	26 9f       	mul	r18, r22
    3a90:	11 24       	eor	r1, r1
    3a92:	30 19       	sub	r19, r0
    3a94:	30 5d       	subi	r19, 0xD0	; 208
    3a96:	31 93       	st	Z+, r19
    3a98:	de f6       	brtc	.-74     	; 0x3a50 <__ultoa_invert+0xe>
    3a9a:	cf 01       	movw	r24, r30
    3a9c:	08 95       	ret
    3a9e:	46 2f       	mov	r20, r22
    3aa0:	47 70       	andi	r20, 0x07	; 7
    3aa2:	40 5d       	subi	r20, 0xD0	; 208
    3aa4:	41 93       	st	Z+, r20
    3aa6:	b3 e0       	ldi	r27, 0x03	; 3
    3aa8:	0f d0       	rcall	.+30     	; 0x3ac8 <__ultoa_invert+0x86>
    3aaa:	c9 f7       	brne	.-14     	; 0x3a9e <__ultoa_invert+0x5c>
    3aac:	f6 cf       	rjmp	.-20     	; 0x3a9a <__ultoa_invert+0x58>
    3aae:	46 2f       	mov	r20, r22
    3ab0:	4f 70       	andi	r20, 0x0F	; 15
    3ab2:	40 5d       	subi	r20, 0xD0	; 208
    3ab4:	4a 33       	cpi	r20, 0x3A	; 58
    3ab6:	18 f0       	brcs	.+6      	; 0x3abe <__ultoa_invert+0x7c>
    3ab8:	49 5d       	subi	r20, 0xD9	; 217
    3aba:	31 fd       	sbrc	r19, 1
    3abc:	40 52       	subi	r20, 0x20	; 32
    3abe:	41 93       	st	Z+, r20
    3ac0:	02 d0       	rcall	.+4      	; 0x3ac6 <__ultoa_invert+0x84>
    3ac2:	a9 f7       	brne	.-22     	; 0x3aae <__ultoa_invert+0x6c>
    3ac4:	ea cf       	rjmp	.-44     	; 0x3a9a <__ultoa_invert+0x58>
    3ac6:	b4 e0       	ldi	r27, 0x04	; 4
    3ac8:	a6 95       	lsr	r26
    3aca:	97 95       	ror	r25
    3acc:	87 95       	ror	r24
    3ace:	77 95       	ror	r23
    3ad0:	67 95       	ror	r22
    3ad2:	ba 95       	dec	r27
    3ad4:	c9 f7       	brne	.-14     	; 0x3ac8 <__ultoa_invert+0x86>
    3ad6:	00 97       	sbiw	r24, 0x00	; 0
    3ad8:	61 05       	cpc	r22, r1
    3ada:	71 05       	cpc	r23, r1
    3adc:	08 95       	ret
    3ade:	9b 01       	movw	r18, r22
    3ae0:	ac 01       	movw	r20, r24
    3ae2:	0a 2e       	mov	r0, r26
    3ae4:	06 94       	lsr	r0
    3ae6:	57 95       	ror	r21
    3ae8:	47 95       	ror	r20
    3aea:	37 95       	ror	r19
    3aec:	27 95       	ror	r18
    3aee:	ba 95       	dec	r27
    3af0:	c9 f7       	brne	.-14     	; 0x3ae4 <__ultoa_invert+0xa2>
    3af2:	62 0f       	add	r22, r18
    3af4:	73 1f       	adc	r23, r19
    3af6:	84 1f       	adc	r24, r20
    3af8:	95 1f       	adc	r25, r21
    3afa:	a0 1d       	adc	r26, r0
    3afc:	08 95       	ret

00003afe <_exit>:
    3afe:	f8 94       	cli

00003b00 <__stop_program>:
    3b00:	ff cf       	rjmp	.-2      	; 0x3b00 <__stop_program>
