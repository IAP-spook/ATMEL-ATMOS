
ATMOS.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000288  00800200  00002e78  00002f0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002e78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000482  00800488  00800488  00003194  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003194  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000740  00000000  00000000  000031f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000076f0  00000000  00000000  00003930  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002c2d  00000000  00000000  0000b020  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000028b9  00000000  00000000  0000dc4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001168  00000000  00000000  00010508  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001d80  00000000  00000000  00011670  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004224  00000000  00000000  000133f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000006f8  00000000  00000000  00017614  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 1b 01 	jmp	0x236	; 0x236 <__ctors_end>
       4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
       c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      10:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      14:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      18:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      1c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      20:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      24:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      28:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      2c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      30:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      34:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__vector_13>
      38:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      3c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      40:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      44:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      48:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      4c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      50:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      54:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      58:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      5c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      60:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      64:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      68:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      6c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      70:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      74:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      78:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      7c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      80:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      84:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      88:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      8c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      90:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      94:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      98:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      9c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      a8:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <__vector_42>
      ac:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      b8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      bc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      c8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      cc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      d8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      dc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      e8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      ec:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f0:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f4:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      f8:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
      fc:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     100:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     104:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     108:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     10c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     110:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     114:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     118:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     11c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     120:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     124:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     128:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     12c:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>
     130:	0c 94 38 01 	jmp	0x270	; 0x270 <__bad_interrupt>

00000134 <__trampolines_end>:
     134:	6e 61       	ori	r22, 0x1E	; 30
     136:	6e 00       	.word	0x006e	; ????

00000138 <__c.2159>:
     138:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     148:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     158:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     168:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     178:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     188:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     198:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     1a8:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     1b8:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     1c8:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     1d8:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     1e8:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     1f8:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     208:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     218:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     228:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27           .r^"....$...='

00000236 <__ctors_end>:
     236:	11 24       	eor	r1, r1
     238:	1f be       	out	0x3f, r1	; 63
     23a:	cf ef       	ldi	r28, 0xFF	; 255
     23c:	d1 e2       	ldi	r29, 0x21	; 33
     23e:	de bf       	out	0x3e, r29	; 62
     240:	cd bf       	out	0x3d, r28	; 61

00000242 <__do_copy_data>:
     242:	14 e0       	ldi	r17, 0x04	; 4
     244:	a0 e0       	ldi	r26, 0x00	; 0
     246:	b2 e0       	ldi	r27, 0x02	; 2
     248:	e8 e7       	ldi	r30, 0x78	; 120
     24a:	fe e2       	ldi	r31, 0x2E	; 46
     24c:	02 c0       	rjmp	.+4      	; 0x252 <__do_copy_data+0x10>
     24e:	05 90       	lpm	r0, Z+
     250:	0d 92       	st	X+, r0
     252:	a8 38       	cpi	r26, 0x88	; 136
     254:	b1 07       	cpc	r27, r17
     256:	d9 f7       	brne	.-10     	; 0x24e <__do_copy_data+0xc>

00000258 <__do_clear_bss>:
     258:	29 e0       	ldi	r18, 0x09	; 9
     25a:	a8 e8       	ldi	r26, 0x88	; 136
     25c:	b4 e0       	ldi	r27, 0x04	; 4
     25e:	01 c0       	rjmp	.+2      	; 0x262 <.do_clear_bss_start>

00000260 <.do_clear_bss_loop>:
     260:	1d 92       	st	X+, r1

00000262 <.do_clear_bss_start>:
     262:	aa 30       	cpi	r26, 0x0A	; 10
     264:	b2 07       	cpc	r27, r18
     266:	e1 f7       	brne	.-8      	; 0x260 <.do_clear_bss_loop>
     268:	0e 94 3a 01 	call	0x274	; 0x274 <main>
     26c:	0c 94 3a 17 	jmp	0x2e74	; 0x2e74 <_exit>

00000270 <__bad_interrupt>:
     270:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000274 <main>:
	SPI_SlaveInit();
}

int main(void)
{
	SYS_Init();
     274:	0e 94 18 0c 	call	0x1830	; 0x1830 <SYS_Init>
#include "avr/io.h"
#include "avr/interrupt.h"


static void APP_Init(void){
	PWR_Init();
     278:	0e 94 9f 07 	call	0xf3e	; 0xf3e <PWR_Init>
	PWR_TurnOn5V();
     27c:	0e 94 a3 07 	call	0xf46	; 0xf46 <PWR_TurnOn5V>
	USART0_Init(9600);
     280:	60 e8       	ldi	r22, 0x80	; 128
     282:	75 e2       	ldi	r23, 0x25	; 37
     284:	80 e0       	ldi	r24, 0x00	; 0
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	0e 94 85 08 	call	0x110a	; 0x110a <USART0_Init>
	DDRB |= 0b00010000;
     28c:	24 9a       	sbi	0x04, 4	; 4
	DDRE |= 0b00001000;
     28e:	6b 9a       	sbi	0x0d, 3	; 13
	PORTE|= 0b00001000;
     290:	73 9a       	sbi	0x0e, 3	; 14
	TWI_Init(10000);
     292:	60 e1       	ldi	r22, 0x10	; 16
     294:	77 e2       	ldi	r23, 0x27	; 39
     296:	80 e0       	ldi	r24, 0x00	; 0
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 a9 07 	call	0xf52	; 0xf52 <TWI_Init>
	ADC_Init();
     29e:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <ADC_Init>
	TGS2600_Init();
     2a2:	0e 94 f6 06 	call	0xdec	; 0xdec <TGS2600_Init>
	Si7020_init();
     2a6:	0e 94 50 06 	call	0xca0	; 0xca0 <Si7020_init>
	printf("BMP280 Status %i\n", BMP280_Init());
     2aa:	0e 94 e2 01 	call	0x3c4	; 0x3c4 <BMP280_Init>
     2ae:	9f 93       	push	r25
     2b0:	8f 93       	push	r24
     2b2:	88 e3       	ldi	r24, 0x38	; 56
     2b4:	92 e0       	ldi	r25, 0x02	; 2
     2b6:	9f 93       	push	r25
     2b8:	8f 93       	push	r24
     2ba:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <printf>
	BMP280_SetOversampling(4);
     2be:	84 e0       	ldi	r24, 0x04	; 4
     2c0:	90 e0       	ldi	r25, 0x00	; 0
     2c2:	0e 94 c2 02 	call	0x584	; 0x584 <BMP280_SetOversampling>
	SPI_SlaveInit();
     2c6:	0e 94 a5 07 	call	0xf4a	; 0xf4a <SPI_SlaveInit>
{
	SYS_Init();
	APP_Init();
	
	/* could have sealed following in a function */
	init_timeoutq();
     2ca:	0e 94 c8 08 	call	0x1190	; 0x1190 <init_timeoutq>
	Si7020Sensor *Si7020_ptr = New_Si7020_Sensor( 0 );
     2ce:	80 e0       	ldi	r24, 0x00	; 0
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	0e 94 09 0e 	call	0x1c12	; 0x1c12 <New_Si7020_Sensor>
	Si7020_FctnInit(Si7020_ptr);
     2d6:	0e 94 9b 0d 	call	0x1b36	; 0x1b36 <Si7020_FctnInit>
	Temperature_ADCSensor *T_ADC_ptr = New_Temperature_ADC_Sensor( 0 );
     2da:	80 e0       	ldi	r24, 0x00	; 0
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <New_Temperature_ADC_Sensor>
	Temperature_ADC_FctnInit(T_ADC_ptr);
     2e2:	0e 94 1c 0e 	call	0x1c38	; 0x1c38 <Temperature_ADC_FctnInit>
	BMP280Sensor *BMP280_ptr = New_BMP280_Sensor( 0 );
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <New_BMP280_Sensor>
     2ee:	ec 01       	movw	r28, r24
	BMP280_FctnInit(BMP280_ptr);
     2f0:	0e 94 29 0d 	call	0x1a52	; 0x1a52 <BMP280_FctnInit>
	init_Event_Timer();
     2f4:	0e 94 60 07 	call	0xec0	; 0xec0 <init_Event_Timer>
	printf("init done!\n");
     2f8:	8a e4       	ldi	r24, 0x4A	; 74
     2fa:	92 e0       	ldi	r25, 0x02	; 2
     2fc:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <puts>
	
	/* could have sealed following in a function */
	load_new_sensor( 1, 4, (BaseSensor *)BMP280_ptr, 0 );
     300:	20 e0       	ldi	r18, 0x00	; 0
     302:	30 e0       	ldi	r19, 0x00	; 0
     304:	ae 01       	movw	r20, r28
     306:	64 e0       	ldi	r22, 0x04	; 4
     308:	70 e0       	ldi	r23, 0x00	; 0
     30a:	81 e0       	ldi	r24, 0x01	; 1
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	0e 94 47 09 	call	0x128e	; 0x128e <load_new_sensor>
	// load_new_sensor( 4, 4, (BaseSensor *)Si7020_ptr, 0 );
	init_set_timer( get_next_interval() );
     312:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <get_next_interval>
     316:	0e 94 6c 07 	call	0xed8	; 0xed8 <init_set_timer>
	
	/* Enable global interrupt */
	sei();
     31a:	78 94       	sei
     31c:	0f 90       	pop	r0
     31e:	0f 90       	pop	r0
     320:	0f 90       	pop	r0
     322:	0f 90       	pop	r0
     324:	ff cf       	rjmp	.-2      	; 0x324 <main+0xb0>

00000326 <BMP280_ReadBytes>:
  @brief Reads some bytes from the BMP280
  @param[in] *values pointer to an array to store the bytes, put the starting register in values[0]
  @param[in] length how many bytes to read
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadBytes(unsigned char *values, char length){
     326:	1f 93       	push	r17
     328:	cf 93       	push	r28
     32a:	df 93       	push	r29
     32c:	ec 01       	movw	r28, r24
     32e:	16 2f       	mov	r17, r22
	//printf("BMP280_ReadBytes");
	//printf("0x%1x",(unsigned)TWI_BeginWrite(BMP280_ADDR));
	TWI_BeginWrite(BMP280_ADDR);
     330:	86 e7       	ldi	r24, 0x76	; 118
     332:	0e 94 d5 07 	call	0xfaa	; 0xfaa <TWI_BeginWrite>
	//printf("0x%1x",(unsigned)TWI_WriteByte(values[0]));
	TWI_WriteByte(values[0]);//Write the register address
     336:	88 81       	ld	r24, Y
     338:	0e 94 c7 07 	call	0xf8e	; 0xf8e <TWI_WriteByte>
	status = TWI_BeginRead(BMP280_ADDR); //Send a repeated start
     33c:	86 e7       	ldi	r24, 0x76	; 118
     33e:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <TWI_BeginRead>
     342:	80 93 88 04 	sts	0x0488, r24
	//printf("0x%1x",status);
	if (status == TWI_SLAR_ACK){
     346:	80 34       	cpi	r24, 0x40	; 64
     348:	81 f4       	brne	.+32     	; 0x36a <BMP280_ReadBytes+0x44>
		if(((TWI_Read(&values[0],length,false)&TWSR_MASK) == TWI_REC_NACK) && (TWI_Stop() != 0)) return(1); //Receive bytes, send a STOP bit, and check for success
     34a:	61 2f       	mov	r22, r17
     34c:	70 e0       	ldi	r23, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	ce 01       	movw	r24, r28
     352:	0e 94 2f 08 	call	0x105e	; 0x105e <TWI_Read>
     356:	88 7f       	andi	r24, 0xF8	; 248
     358:	88 35       	cpi	r24, 0x58	; 88
     35a:	49 f4       	brne	.+18     	; 0x36e <BMP280_ReadBytes+0x48>
     35c:	0e 94 2a 08 	call	0x1054	; 0x1054 <TWI_Stop>
     360:	91 e0       	ldi	r25, 0x01	; 1
     362:	81 11       	cpse	r24, r1
     364:	05 c0       	rjmp	.+10     	; 0x370 <BMP280_ReadBytes+0x4a>
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	03 c0       	rjmp	.+6      	; 0x370 <BMP280_ReadBytes+0x4a>
	}
	return(0);
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	01 c0       	rjmp	.+2      	; 0x370 <BMP280_ReadBytes+0x4a>
     36e:	90 e0       	ldi	r25, 0x00	; 0
}
     370:	89 2f       	mov	r24, r25
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	1f 91       	pop	r17
     378:	08 95       	ret

0000037a <BMP280_ReadInt>:
  @brief Reads an int from the BMP280
  @param[in] address The register address of the first byte of the uint
  @param[out] val* A pointer to a uint to store the received data to
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_ReadInt(char address, int *val){
     37a:	0f 93       	push	r16
     37c:	1f 93       	push	r17
     37e:	cf 93       	push	r28
     380:	df 93       	push	r29
     382:	00 d0       	rcall	.+0      	; 0x384 <BMP280_ReadInt+0xa>
     384:	cd b7       	in	r28, 0x3d	; 61
     386:	de b7       	in	r29, 0x3e	; 62
     388:	8b 01       	movw	r16, r22
	//printf("\nBMP280_ReadInt");
	unsigned char data[2];	//char is 4 bits, 1 byte

	data[0] = address;
     38a:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     38c:	62 e0       	ldi	r22, 0x02	; 2
     38e:	ce 01       	movw	r24, r28
     390:	01 96       	adiw	r24, 0x01	; 1
     392:	0e 94 93 01 	call	0x326	; 0x326 <BMP280_ReadBytes>
     396:	88 23       	and	r24, r24
     398:	59 f0       	breq	.+22     	; 0x3b0 <BMP280_ReadInt+0x36>
		*val = (((int)data[1]<<8)|(int)data[0]);
     39a:	8a 81       	ldd	r24, Y+2	; 0x02
     39c:	90 e0       	ldi	r25, 0x00	; 0
     39e:	98 2f       	mov	r25, r24
     3a0:	88 27       	eor	r24, r24
     3a2:	29 81       	ldd	r18, Y+1	; 0x01
     3a4:	82 2b       	or	r24, r18
     3a6:	f8 01       	movw	r30, r16
     3a8:	91 83       	std	Z+1, r25	; 0x01
     3aa:	80 83       	st	Z, r24
		return(1);
     3ac:	81 e0       	ldi	r24, 0x01	; 1
     3ae:	03 c0       	rjmp	.+6      	; 0x3b6 <BMP280_ReadInt+0x3c>
	}
	*val = 0;
     3b0:	f8 01       	movw	r30, r16
     3b2:	11 82       	std	Z+1, r1	; 0x01
     3b4:	10 82       	st	Z, r1
	return(0);
}
     3b6:	0f 90       	pop	r0
     3b8:	0f 90       	pop	r0
     3ba:	df 91       	pop	r29
     3bc:	cf 91       	pop	r28
     3be:	1f 91       	pop	r17
     3c0:	0f 91       	pop	r16
     3c2:	08 95       	ret

000003c4 <BMP280_Init>:

/*************************************************************************//**
  @brief Initializes the BMP280 and reads the calibration data from the device
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
char BMP280_Init(void){
     3c4:	cf 93       	push	r28
     3c6:	df 93       	push	r29
     3c8:	00 d0       	rcall	.+0      	; 0x3ca <BMP280_Init+0x6>
     3ca:	cd b7       	in	r28, 0x3d	; 61
     3cc:	de b7       	in	r29, 0x3e	; 62
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
     3ce:	88 e8       	ldi	r24, 0x88	; 136
     3d0:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     3d2:	62 e0       	ldi	r22, 0x02	; 2
     3d4:	ce 01       	movw	r24, r28
     3d6:	01 96       	adiw	r24, 0x01	; 1
     3d8:	0e 94 93 01 	call	0x326	; 0x326 <BMP280_ReadBytes>
     3dc:	88 23       	and	r24, r24
     3de:	99 f0       	breq	.+38     	; 0x406 <BMP280_Init+0x42>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     3e0:	8a 81       	ldd	r24, Y+2	; 0x02
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	98 2f       	mov	r25, r24
     3e6:	88 27       	eor	r24, r24
     3e8:	29 81       	ldd	r18, Y+1	; 0x01
     3ea:	82 2b       	or	r24, r18
     3ec:	90 93 93 04 	sts	0x0493, r25
     3f0:	80 93 92 04 	sts	0x0492, r24

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
     3f4:	68 ea       	ldi	r22, 0xA8	; 168
     3f6:	74 e0       	ldi	r23, 0x04	; 4
     3f8:	8a e8       	ldi	r24, 0x8A	; 138
     3fa:	0e 94 bd 01 	call	0x37a	; 0x37a <BMP280_ReadInt>
	// used in the calculations when taking measurements.

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
     3fe:	88 23       	and	r24, r24
     400:	09 f4       	brne	.+2      	; 0x404 <BMP280_Init+0x40>
     402:	bb c0       	rjmp	.+374    	; 0x57a <BMP280_Init+0x1b6>
     404:	05 c0       	rjmp	.+10     	; 0x410 <BMP280_Init+0x4c>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     406:	10 92 93 04 	sts	0x0493, r1
     40a:	10 92 92 04 	sts	0x0492, r1
     40e:	b5 c0       	rjmp	.+362    	; 0x57a <BMP280_Init+0x1b6>
	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
     410:	66 ea       	ldi	r22, 0xA6	; 166
     412:	74 e0       	ldi	r23, 0x04	; 4
     414:	8c e8       	ldi	r24, 0x8C	; 140
     416:	0e 94 bd 01 	call	0x37a	; 0x37a <BMP280_ReadInt>

	// Retrieve calibration data from device:
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
     41a:	88 23       	and	r24, r24
     41c:	09 f4       	brne	.+2      	; 0x420 <BMP280_Init+0x5c>
     41e:	ad c0       	rjmp	.+346    	; 0x57a <BMP280_Init+0x1b6>
*****************************************************************************/
static char BMP280_ReadUInt(char address, unsigned int *val){
	//printf("\nBMP280_ReadUInt");
	unsigned char data[2];	//4 bits
	
	data[0] = address;
     420:	8e e8       	ldi	r24, 0x8E	; 142
     422:	89 83       	std	Y+1, r24	; 0x01
	if (BMP280_ReadBytes(&data[0],2)){
     424:	62 e0       	ldi	r22, 0x02	; 2
     426:	ce 01       	movw	r24, r28
     428:	01 96       	adiw	r24, 0x01	; 1
     42a:	0e 94 93 01 	call	0x326	; 0x326 <BMP280_ReadBytes>
     42e:	88 23       	and	r24, r24
     430:	99 f0       	breq	.+38     	; 0x458 <BMP280_Init+0x94>
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
     432:	8a 81       	ldd	r24, Y+2	; 0x02
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	98 2f       	mov	r25, r24
     438:	88 27       	eor	r24, r24
     43a:	29 81       	ldd	r18, Y+1	; 0x01
     43c:	82 2b       	or	r24, r18
     43e:	90 93 95 04 	sts	0x0495, r25
     442:	80 93 94 04 	sts	0x0494, r24
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     446:	64 ea       	ldi	r22, 0xA4	; 164
     448:	74 e0       	ldi	r23, 0x04	; 4
     44a:	80 e9       	ldi	r24, 0x90	; 144
     44c:	0e 94 bd 01 	call	0x37a	; 0x37a <BMP280_ReadInt>
	
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
     450:	88 23       	and	r24, r24
     452:	09 f4       	brne	.+2      	; 0x456 <BMP280_Init+0x92>
     454:	92 c0       	rjmp	.+292    	; 0x57a <BMP280_Init+0x1b6>
     456:	05 c0       	rjmp	.+10     	; 0x462 <BMP280_Init+0x9e>
	data[0] = address;
	if (BMP280_ReadBytes(&data[0],2)){
		*val = (((unsigned int)data[1]<<8)|(unsigned int)data[0]);
		return(1);
	}
	*val = 0;
     458:	10 92 95 04 	sts	0x0495, r1
     45c:	10 92 94 04 	sts	0x0494, r1
     460:	8c c0       	rjmp	.+280    	; 0x57a <BMP280_Init+0x1b6>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     462:	62 ea       	ldi	r22, 0xA2	; 162
     464:	74 e0       	ldi	r23, 0x04	; 4
     466:	82 e9       	ldi	r24, 0x92	; 146
     468:	0e 94 bd 01 	call	0x37a	; 0x37a <BMP280_ReadInt>
	if (    
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
     46c:	88 23       	and	r24, r24
     46e:	09 f4       	brne	.+2      	; 0x472 <BMP280_Init+0xae>
     470:	84 c0       	rjmp	.+264    	; 0x57a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     472:	60 ea       	ldi	r22, 0xA0	; 160
     474:	74 e0       	ldi	r23, 0x04	; 4
     476:	84 e9       	ldi	r24, 0x94	; 148
     478:	0e 94 bd 01 	call	0x37a	; 0x37a <BMP280_ReadInt>
		BMP280_ReadUInt(0x88, &dig_T1) &&
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
     47c:	88 23       	and	r24, r24
     47e:	09 f4       	brne	.+2      	; 0x482 <BMP280_Init+0xbe>
     480:	7c c0       	rjmp	.+248    	; 0x57a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     482:	6e e9       	ldi	r22, 0x9E	; 158
     484:	74 e0       	ldi	r23, 0x04	; 4
     486:	86 e9       	ldi	r24, 0x96	; 150
     488:	0e 94 bd 01 	call	0x37a	; 0x37a <BMP280_ReadInt>
		BMP280_ReadInt(0x8A, &dig_T2)  &&
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
     48c:	88 23       	and	r24, r24
     48e:	09 f4       	brne	.+2      	; 0x492 <BMP280_Init+0xce>
     490:	74 c0       	rjmp	.+232    	; 0x57a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     492:	6c e9       	ldi	r22, 0x9C	; 156
     494:	74 e0       	ldi	r23, 0x04	; 4
     496:	88 e9       	ldi	r24, 0x98	; 152
     498:	0e 94 bd 01 	call	0x37a	; 0x37a <BMP280_ReadInt>
		BMP280_ReadInt(0x8C, &dig_T3)  &&
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
     49c:	88 23       	and	r24, r24
     49e:	09 f4       	brne	.+2      	; 0x4a2 <BMP280_Init+0xde>
     4a0:	6c c0       	rjmp	.+216    	; 0x57a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     4a2:	6a e9       	ldi	r22, 0x9A	; 154
     4a4:	74 e0       	ldi	r23, 0x04	; 4
     4a6:	8a e9       	ldi	r24, 0x9A	; 154
     4a8:	0e 94 bd 01 	call	0x37a	; 0x37a <BMP280_ReadInt>
		BMP280_ReadUInt(0x8E, &dig_P1) &&
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
     4ac:	88 23       	and	r24, r24
     4ae:	09 f4       	brne	.+2      	; 0x4b2 <BMP280_Init+0xee>
     4b0:	64 c0       	rjmp	.+200    	; 0x57a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     4b2:	68 e9       	ldi	r22, 0x98	; 152
     4b4:	74 e0       	ldi	r23, 0x04	; 4
     4b6:	8c e9       	ldi	r24, 0x9C	; 156
     4b8:	0e 94 bd 01 	call	0x37a	; 0x37a <BMP280_ReadInt>
		BMP280_ReadInt(0x90, &dig_P2)  &&
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
     4bc:	88 23       	and	r24, r24
     4be:	09 f4       	brne	.+2      	; 0x4c2 <BMP280_Init+0xfe>
     4c0:	5c c0       	rjmp	.+184    	; 0x57a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9C, &dig_P8)  &&
		BMP280_ReadInt(0x9E, &dig_P9)){
     4c2:	66 e9       	ldi	r22, 0x96	; 150
     4c4:	74 e0       	ldi	r23, 0x04	; 4
     4c6:	8e e9       	ldi	r24, 0x9E	; 158
     4c8:	0e 94 bd 01 	call	0x37a	; 0x37a <BMP280_ReadInt>
		BMP280_ReadInt(0x92, &dig_P3)  &&
		BMP280_ReadInt(0x94, &dig_P4)  &&
		BMP280_ReadInt(0x96, &dig_P5)  &&
		BMP280_ReadInt(0x98, &dig_P6)  &&
		BMP280_ReadInt(0x9A, &dig_P7)  &&
		BMP280_ReadInt(0x9C, &dig_P8)  &&
     4cc:	88 23       	and	r24, r24
     4ce:	09 f4       	brne	.+2      	; 0x4d2 <BMP280_Init+0x10e>
     4d0:	54 c0       	rjmp	.+168    	; 0x57a <BMP280_Init+0x1b6>
		BMP280_ReadInt(0x9E, &dig_P9)){
			printf("\nT: %i ,%i ,%i P: %i ,%i ,%i ,%i ,%i ,%i ,%i ,%1 ,%i \n",dig_T1,dig_T2,dig_T3,dig_P1,dig_P2,dig_P3,dig_P4,dig_P5,dig_P6,dig_P7,dig_P8,dig_P9);
     4d2:	80 91 97 04 	lds	r24, 0x0497
     4d6:	8f 93       	push	r24
     4d8:	80 91 96 04 	lds	r24, 0x0496
     4dc:	8f 93       	push	r24
     4de:	80 91 99 04 	lds	r24, 0x0499
     4e2:	8f 93       	push	r24
     4e4:	80 91 98 04 	lds	r24, 0x0498
     4e8:	8f 93       	push	r24
     4ea:	80 91 9b 04 	lds	r24, 0x049B
     4ee:	8f 93       	push	r24
     4f0:	80 91 9a 04 	lds	r24, 0x049A
     4f4:	8f 93       	push	r24
     4f6:	80 91 9d 04 	lds	r24, 0x049D
     4fa:	8f 93       	push	r24
     4fc:	80 91 9c 04 	lds	r24, 0x049C
     500:	8f 93       	push	r24
     502:	80 91 9f 04 	lds	r24, 0x049F
     506:	8f 93       	push	r24
     508:	80 91 9e 04 	lds	r24, 0x049E
     50c:	8f 93       	push	r24
     50e:	80 91 a1 04 	lds	r24, 0x04A1
     512:	8f 93       	push	r24
     514:	80 91 a0 04 	lds	r24, 0x04A0
     518:	8f 93       	push	r24
     51a:	80 91 a3 04 	lds	r24, 0x04A3
     51e:	8f 93       	push	r24
     520:	80 91 a2 04 	lds	r24, 0x04A2
     524:	8f 93       	push	r24
     526:	80 91 a5 04 	lds	r24, 0x04A5
     52a:	8f 93       	push	r24
     52c:	80 91 a4 04 	lds	r24, 0x04A4
     530:	8f 93       	push	r24
     532:	80 91 95 04 	lds	r24, 0x0495
     536:	8f 93       	push	r24
     538:	80 91 94 04 	lds	r24, 0x0494
     53c:	8f 93       	push	r24
     53e:	80 91 a7 04 	lds	r24, 0x04A7
     542:	8f 93       	push	r24
     544:	80 91 a6 04 	lds	r24, 0x04A6
     548:	8f 93       	push	r24
     54a:	80 91 a9 04 	lds	r24, 0x04A9
     54e:	8f 93       	push	r24
     550:	80 91 a8 04 	lds	r24, 0x04A8
     554:	8f 93       	push	r24
     556:	80 91 93 04 	lds	r24, 0x0493
     55a:	8f 93       	push	r24
     55c:	80 91 92 04 	lds	r24, 0x0492
     560:	8f 93       	push	r24
     562:	85 e5       	ldi	r24, 0x55	; 85
     564:	92 e0       	ldi	r25, 0x02	; 2
     566:	9f 93       	push	r25
     568:	8f 93       	push	r24
     56a:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <printf>
		return (1);
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	f8 94       	cli
     572:	de bf       	out	0x3e, r29	; 62
     574:	0f be       	out	0x3f, r0	; 63
     576:	cd bf       	out	0x3d, r28	; 61
     578:	81 e0       	ldi	r24, 0x01	; 1
	}
	else 
		return (0);
}
     57a:	0f 90       	pop	r0
     57c:	0f 90       	pop	r0
     57e:	df 91       	pop	r29
     580:	cf 91       	pop	r28
     582:	08 95       	ret

00000584 <BMP280_SetOversampling>:
  @brief Sets the oversampling setting for the library
  @param[in] oss Oversampling setting
  @return 1
*****************************************************************************/
char BMP280_SetOversampling(short oss){
	oversampling = oss;
     584:	90 93 91 04 	sts	0x0491, r25
     588:	80 93 90 04 	sts	0x0490, r24
	return (1);
}
     58c:	81 e0       	ldi	r24, 0x01	; 1
     58e:	08 95       	ret

00000590 <BMP280_StartMeasurment>:

/*************************************************************************//**
  @brief Starts a measurement
  @return time to wait for result (in ms)
*****************************************************************************/
char BMP280_StartMeasurment(void){
     590:	1f 93       	push	r17
     592:	cf 93       	push	r28
     594:	df 93       	push	r29
     596:	00 d0       	rcall	.+0      	; 0x598 <BMP280_StartMeasurment+0x8>
     598:	cd b7       	in	r28, 0x3d	; 61
     59a:	de b7       	in	r29, 0x3e	; 62
	unsigned char data[2], result, delay;
	
	data[0] = BMP280_REG_CONTROL;
     59c:	84 ef       	ldi	r24, 0xF4	; 244
     59e:	89 83       	std	Y+1, r24	; 0x01

	switch (oversampling){
     5a0:	80 91 90 04 	lds	r24, 0x0490
     5a4:	90 91 91 04 	lds	r25, 0x0491
     5a8:	82 30       	cpi	r24, 0x02	; 2
     5aa:	91 05       	cpc	r25, r1
     5ac:	01 f1       	breq	.+64     	; 0x5ee <BMP280_StartMeasurment+0x5e>
     5ae:	2c f4       	brge	.+10     	; 0x5ba <BMP280_StartMeasurment+0x2a>
     5b0:	00 97       	sbiw	r24, 0x00	; 0
     5b2:	49 f0       	breq	.+18     	; 0x5c6 <BMP280_StartMeasurment+0x36>
     5b4:	01 97       	sbiw	r24, 0x01	; 1
     5b6:	89 f0       	breq	.+34     	; 0x5da <BMP280_StartMeasurment+0x4a>
     5b8:	38 c0       	rjmp	.+112    	; 0x62a <BMP280_StartMeasurment+0x9a>
     5ba:	83 30       	cpi	r24, 0x03	; 3
     5bc:	91 05       	cpc	r25, r1
     5be:	09 f1       	breq	.+66     	; 0x602 <BMP280_StartMeasurment+0x72>
     5c0:	04 97       	sbiw	r24, 0x04	; 4
     5c2:	49 f1       	breq	.+82     	; 0x616 <BMP280_StartMeasurment+0x86>
     5c4:	32 c0       	rjmp	.+100    	; 0x62a <BMP280_StartMeasurment+0x9a>
		case 0:
		data[1] = BMP280_COMMAND_PRESSURE0;
     5c6:	85 e2       	ldi	r24, 0x25	; 37
     5c8:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	90 93 8f 04 	sts	0x048F, r25
     5d2:	80 93 8e 04 	sts	0x048E, r24
		delay = 8;
     5d6:	18 e0       	ldi	r17, 0x08	; 8
		break;
     5d8:	2b c0       	rjmp	.+86     	; 0x630 <BMP280_StartMeasurment+0xa0>
		case 1:
		data[1] = BMP280_COMMAND_PRESSURE1;
     5da:	89 e2       	ldi	r24, 0x29	; 41
     5dc:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     5de:	81 e0       	ldi	r24, 0x01	; 1
     5e0:	90 e0       	ldi	r25, 0x00	; 0
     5e2:	90 93 8f 04 	sts	0x048F, r25
     5e6:	80 93 8e 04 	sts	0x048E, r24
		delay = 10;
     5ea:	1a e0       	ldi	r17, 0x0A	; 10
		break;
     5ec:	21 c0       	rjmp	.+66     	; 0x630 <BMP280_StartMeasurment+0xa0>
		case 2:
		data[1] = BMP280_COMMAND_PRESSURE2;
     5ee:	8d e2       	ldi	r24, 0x2D	; 45
     5f0:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     5f2:	81 e0       	ldi	r24, 0x01	; 1
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	90 93 8f 04 	sts	0x048F, r25
     5fa:	80 93 8e 04 	sts	0x048E, r24
		delay = 15;
     5fe:	1f e0       	ldi	r17, 0x0F	; 15
		break;
     600:	17 c0       	rjmp	.+46     	; 0x630 <BMP280_StartMeasurment+0xa0>
		case 3:
		data[1] = BMP280_COMMAND_PRESSURE3;
     602:	81 e3       	ldi	r24, 0x31	; 49
     604:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	90 93 8f 04 	sts	0x048F, r25
     60e:	80 93 8e 04 	sts	0x048E, r24
		delay = 24;
     612:	18 e1       	ldi	r17, 0x18	; 24
		break;
     614:	0d c0       	rjmp	.+26     	; 0x630 <BMP280_StartMeasurment+0xa0>
		case 4:
		data[1] = BMP280_COMMAND_PRESSURE4;
     616:	8d e5       	ldi	r24, 0x5D	; 93
     618:	8a 83       	std	Y+2, r24	; 0x02
		oversampling_t = 1;
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	90 93 8f 04 	sts	0x048F, r25
     622:	80 93 8e 04 	sts	0x048E, r24
		delay = 45;
     626:	1d e2       	ldi	r17, 0x2D	; 45
		break;
     628:	03 c0       	rjmp	.+6      	; 0x630 <BMP280_StartMeasurment+0xa0>
		default:
		data[1] = BMP280_COMMAND_PRESSURE0;
     62a:	85 e2       	ldi	r24, 0x25	; 37
     62c:	8a 83       	std	Y+2, r24	; 0x02
		delay = 9;
     62e:	19 e0       	ldi	r17, 0x09	; 9
  @param[in] *values pointer to an array to send, put the starting register in values[0]
  @param[in] length how many bytes to write (including the starting register ie. sizeof(values))
  @return status (zero on failure, nonzero otherwise)
*****************************************************************************/
static char BMP280_WriteBytes(unsigned char *values, char length){
	TWI_BeginWrite(BMP280_ADDR);
     630:	86 e7       	ldi	r24, 0x76	; 118
     632:	0e 94 d5 07 	call	0xfaa	; 0xfaa <TWI_BeginWrite>
	if((TWI_Write(&values[0],length) == TWI_SENT_ACK) && (TWI_Stop() != 0)) return 1; //Send bytes, a STOP bit, and check for success
     636:	62 e0       	ldi	r22, 0x02	; 2
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	ce 01       	movw	r24, r28
     63c:	01 96       	adiw	r24, 0x01	; 1
     63e:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <TWI_Write>
     642:	88 32       	cpi	r24, 0x28	; 40
     644:	29 f4       	brne	.+10     	; 0x650 <BMP280_StartMeasurment+0xc0>
     646:	0e 94 2a 08 	call	0x1054	; 0x1054 <TWI_Stop>
		data[1] = BMP280_COMMAND_PRESSURE0;
		delay = 9;
		break;
	}
	result = BMP280_WriteBytes(&data[0], 2);
	if (result) // good write?
     64a:	81 11       	cpse	r24, r1
     64c:	03 c0       	rjmp	.+6      	; 0x654 <BMP280_StartMeasurment+0xc4>
     64e:	03 c0       	rjmp	.+6      	; 0x656 <BMP280_StartMeasurment+0xc6>
	return(delay); // return the delay in ms (rounded up) to wait before retrieving data
	else
	return(0); // or return 0 if there was a problem communicating with the BMP
     650:	80 e0       	ldi	r24, 0x00	; 0
     652:	01 c0       	rjmp	.+2      	; 0x656 <BMP280_StartMeasurment+0xc6>
		delay = 9;
		break;
	}
	result = BMP280_WriteBytes(&data[0], 2);
	if (result) // good write?
	return(delay); // return the delay in ms (rounded up) to wait before retrieving data
     654:	81 2f       	mov	r24, r17
	else
	return(0); // or return 0 if there was a problem communicating with the BMP
}
     656:	0f 90       	pop	r0
     658:	0f 90       	pop	r0
     65a:	df 91       	pop	r29
     65c:	cf 91       	pop	r28
     65e:	1f 91       	pop	r17
     660:	08 95       	ret

00000662 <BMP280_GetUnPT>:
  @brief Gets the uncalibrated temperature and pressure data
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetUnPT(double *uP, double *uT){
     662:	8f 92       	push	r8
     664:	9f 92       	push	r9
     666:	bf 92       	push	r11
     668:	cf 92       	push	r12
     66a:	df 92       	push	r13
     66c:	ef 92       	push	r14
     66e:	ff 92       	push	r15
     670:	0f 93       	push	r16
     672:	1f 93       	push	r17
     674:	cf 93       	push	r28
     676:	df 93       	push	r29
     678:	00 d0       	rcall	.+0      	; 0x67a <BMP280_GetUnPT+0x18>
     67a:	00 d0       	rcall	.+0      	; 0x67c <BMP280_GetUnPT+0x1a>
     67c:	00 d0       	rcall	.+0      	; 0x67e <BMP280_GetUnPT+0x1c>
     67e:	cd b7       	in	r28, 0x3d	; 61
     680:	de b7       	in	r29, 0x3e	; 62
     682:	4c 01       	movw	r8, r24
     684:	8b 01       	movw	r16, r22
	unsigned char data[6];
	char result;
	
	data[0] = BMP280_REG_RESULT_PRESSURE; //0xF7
     686:	87 ef       	ldi	r24, 0xF7	; 247
     688:	89 83       	std	Y+1, r24	; 0x01

	result = BMP280_ReadBytes(&data[0], 6); // 0xF7; xF8, 0xF9, 0xFA, 0xFB, 0xFC
     68a:	66 e0       	ldi	r22, 0x06	; 6
     68c:	ce 01       	movw	r24, r28
     68e:	01 96       	adiw	r24, 0x01	; 1
     690:	0e 94 93 01 	call	0x326	; 0x326 <BMP280_ReadBytes>
     694:	b8 2e       	mov	r11, r24
	if (result){ // good read
     696:	88 23       	and	r24, r24
     698:	09 f4       	brne	.+2      	; 0x69c <BMP280_GetUnPT+0x3a>
     69a:	72 c0       	rjmp	.+228    	; 0x780 <BMP280_GetUnPT+0x11e>
		double factor = pow(2, 4);
		*uP = (( (data[0] *256.0) + data[1] + (data[2]/256.0))) * factor ;	//20bit UP
     69c:	69 81       	ldd	r22, Y+1	; 0x01
     69e:	70 e0       	ldi	r23, 0x00	; 0
     6a0:	80 e0       	ldi	r24, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__floatsisf>
     6a8:	20 e0       	ldi	r18, 0x00	; 0
     6aa:	30 e0       	ldi	r19, 0x00	; 0
     6ac:	40 e8       	ldi	r20, 0x80	; 128
     6ae:	53 e4       	ldi	r21, 0x43	; 67
     6b0:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     6b4:	6b 01       	movw	r12, r22
     6b6:	7c 01       	movw	r14, r24
     6b8:	6a 81       	ldd	r22, Y+2	; 0x02
     6ba:	70 e0       	ldi	r23, 0x00	; 0
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__floatsisf>
     6c4:	9b 01       	movw	r18, r22
     6c6:	ac 01       	movw	r20, r24
     6c8:	c7 01       	movw	r24, r14
     6ca:	b6 01       	movw	r22, r12
     6cc:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__addsf3>
     6d0:	6b 01       	movw	r12, r22
     6d2:	7c 01       	movw	r14, r24
     6d4:	6b 81       	ldd	r22, Y+3	; 0x03
     6d6:	70 e0       	ldi	r23, 0x00	; 0
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__floatsisf>
     6e0:	20 e0       	ldi	r18, 0x00	; 0
     6e2:	30 e0       	ldi	r19, 0x00	; 0
     6e4:	40 e8       	ldi	r20, 0x80	; 128
     6e6:	5b e3       	ldi	r21, 0x3B	; 59
     6e8:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     6ec:	9b 01       	movw	r18, r22
     6ee:	ac 01       	movw	r20, r24
     6f0:	c7 01       	movw	r24, r14
     6f2:	b6 01       	movw	r22, r12
     6f4:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__addsf3>
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e8       	ldi	r20, 0x80	; 128
     6fe:	51 e4       	ldi	r21, 0x41	; 65
     700:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     704:	f4 01       	movw	r30, r8
     706:	60 83       	st	Z, r22
     708:	71 83       	std	Z+1, r23	; 0x01
     70a:	82 83       	std	Z+2, r24	; 0x02
     70c:	93 83       	std	Z+3, r25	; 0x03
		*uT = (( (data[3] *256.0) + data[4] + (data[5]/256.0))) * factor ;	//20bit UT
     70e:	6c 81       	ldd	r22, Y+4	; 0x04
     710:	70 e0       	ldi	r23, 0x00	; 0
     712:	80 e0       	ldi	r24, 0x00	; 0
     714:	90 e0       	ldi	r25, 0x00	; 0
     716:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__floatsisf>
     71a:	20 e0       	ldi	r18, 0x00	; 0
     71c:	30 e0       	ldi	r19, 0x00	; 0
     71e:	40 e8       	ldi	r20, 0x80	; 128
     720:	53 e4       	ldi	r21, 0x43	; 67
     722:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     726:	6b 01       	movw	r12, r22
     728:	7c 01       	movw	r14, r24
     72a:	6d 81       	ldd	r22, Y+5	; 0x05
     72c:	70 e0       	ldi	r23, 0x00	; 0
     72e:	80 e0       	ldi	r24, 0x00	; 0
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__floatsisf>
     736:	9b 01       	movw	r18, r22
     738:	ac 01       	movw	r20, r24
     73a:	c7 01       	movw	r24, r14
     73c:	b6 01       	movw	r22, r12
     73e:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__addsf3>
     742:	6b 01       	movw	r12, r22
     744:	7c 01       	movw	r14, r24
     746:	6e 81       	ldd	r22, Y+6	; 0x06
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	80 e0       	ldi	r24, 0x00	; 0
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__floatsisf>
     752:	20 e0       	ldi	r18, 0x00	; 0
     754:	30 e0       	ldi	r19, 0x00	; 0
     756:	40 e8       	ldi	r20, 0x80	; 128
     758:	5b e3       	ldi	r21, 0x3B	; 59
     75a:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	c7 01       	movw	r24, r14
     764:	b6 01       	movw	r22, r12
     766:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__addsf3>
     76a:	20 e0       	ldi	r18, 0x00	; 0
     76c:	30 e0       	ldi	r19, 0x00	; 0
     76e:	40 e8       	ldi	r20, 0x80	; 128
     770:	51 e4       	ldi	r21, 0x41	; 65
     772:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     776:	f8 01       	movw	r30, r16
     778:	60 83       	st	Z, r22
     77a:	71 83       	std	Z+1, r23	; 0x01
     77c:	82 83       	std	Z+2, r24	; 0x02
     77e:	93 83       	std	Z+3, r25	; 0x03
		
	}
	return(result);
}
     780:	8b 2d       	mov	r24, r11
     782:	26 96       	adiw	r28, 0x06	; 6
     784:	0f b6       	in	r0, 0x3f	; 63
     786:	f8 94       	cli
     788:	de bf       	out	0x3e, r29	; 62
     78a:	0f be       	out	0x3f, r0	; 63
     78c:	cd bf       	out	0x3d, r28	; 61
     78e:	df 91       	pop	r29
     790:	cf 91       	pop	r28
     792:	1f 91       	pop	r17
     794:	0f 91       	pop	r16
     796:	ff 90       	pop	r15
     798:	ef 90       	pop	r14
     79a:	df 90       	pop	r13
     79c:	cf 90       	pop	r12
     79e:	bf 90       	pop	r11
     7a0:	9f 90       	pop	r9
     7a2:	8f 90       	pop	r8
     7a4:	08 95       	ret

000007a6 <BMP280_CalcTemperature>:
  @brief Calculates temperature
  @param[out] pointer to a place to store the temperature data
  @param[in] pointer to the uncalibrated temperature data
  @return status
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
     7a6:	4f 92       	push	r4
     7a8:	5f 92       	push	r5
     7aa:	6f 92       	push	r6
     7ac:	7f 92       	push	r7
     7ae:	8f 92       	push	r8
     7b0:	9f 92       	push	r9
     7b2:	af 92       	push	r10
     7b4:	bf 92       	push	r11
     7b6:	cf 92       	push	r12
     7b8:	df 92       	push	r13
     7ba:	ef 92       	push	r14
     7bc:	ff 92       	push	r15
     7be:	cf 93       	push	r28
     7c0:	df 93       	push	r29
     7c2:	ec 01       	movw	r28, r24
	double adc_T = *uT ;
     7c4:	fb 01       	movw	r30, r22
     7c6:	40 80       	ld	r4, Z
     7c8:	51 80       	ldd	r5, Z+1	; 0x01
     7ca:	62 80       	ldd	r6, Z+2	; 0x02
     7cc:	73 80       	ldd	r7, Z+3	; 0x03
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
     7ce:	60 91 92 04 	lds	r22, 0x0492
     7d2:	70 91 93 04 	lds	r23, 0x0493
     7d6:	80 e0       	ldi	r24, 0x00	; 0
     7d8:	90 e0       	ldi	r25, 0x00	; 0
     7da:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__floatunsisf>
     7de:	4b 01       	movw	r8, r22
     7e0:	5c 01       	movw	r10, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
     7e2:	20 e0       	ldi	r18, 0x00	; 0
     7e4:	30 e0       	ldi	r19, 0x00	; 0
     7e6:	40 e0       	ldi	r20, 0x00	; 0
     7e8:	57 e3       	ldi	r21, 0x37	; 55
     7ea:	c3 01       	movw	r24, r6
     7ec:	b2 01       	movw	r22, r4
     7ee:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     7f2:	6b 01       	movw	r12, r22
     7f4:	7c 01       	movw	r14, r24
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	40 e0       	ldi	r20, 0x00	; 0
     7fc:	59 e3       	ldi	r21, 0x39	; 57
     7fe:	c5 01       	movw	r24, r10
     800:	b4 01       	movw	r22, r8
     802:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     806:	9b 01       	movw	r18, r22
     808:	ac 01       	movw	r20, r24
     80a:	c7 01       	movw	r24, r14
     80c:	b6 01       	movw	r22, r12
     80e:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__subsf3>
     812:	6b 01       	movw	r12, r22
     814:	7c 01       	movw	r14, r24
*****************************************************************************/
char BMP280_CalcTemperature(double *T, double *uT){
	double adc_T = *uT ;
	//printf("adc_T = %d",adc_T);
	
	double var1 = (((double)adc_T)/16384.0-((double)dig_T1)/1024.0)*((double)dig_T2);
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	40 e8       	ldi	r20, 0x80	; 128
     81c:	58 e3       	ldi	r21, 0x38	; 56
     81e:	c3 01       	movw	r24, r6
     820:	b2 01       	movw	r22, r4
     822:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     826:	2b 01       	movw	r4, r22
     828:	3c 01       	movw	r6, r24
     82a:	20 e0       	ldi	r18, 0x00	; 0
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	40 e8       	ldi	r20, 0x80	; 128
     830:	5a e3       	ldi	r21, 0x3A	; 58
     832:	c5 01       	movw	r24, r10
     834:	b4 01       	movw	r22, r8
     836:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     83a:	9b 01       	movw	r18, r22
     83c:	ac 01       	movw	r20, r24
     83e:	c3 01       	movw	r24, r6
     840:	b2 01       	movw	r22, r4
     842:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__subsf3>
     846:	4b 01       	movw	r8, r22
     848:	5c 01       	movw	r10, r24
     84a:	60 91 a8 04 	lds	r22, 0x04A8
     84e:	70 91 a9 04 	lds	r23, 0x04A9
     852:	88 27       	eor	r24, r24
     854:	77 fd       	sbrc	r23, 7
     856:	80 95       	com	r24
     858:	98 2f       	mov	r25, r24
     85a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__floatsisf>
     85e:	9b 01       	movw	r18, r22
     860:	ac 01       	movw	r20, r24
     862:	c5 01       	movw	r24, r10
     864:	b4 01       	movw	r22, r8
     866:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     86a:	4b 01       	movw	r8, r22
     86c:	5c 01       	movw	r10, r24
	double var2 = ((((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0)*(((double)adc_T)/131072.0 - ((double)dig_T1)/8192.0))*((double)dig_T3);
     86e:	a7 01       	movw	r20, r14
     870:	96 01       	movw	r18, r12
     872:	c7 01       	movw	r24, r14
     874:	b6 01       	movw	r22, r12
     876:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     87a:	6b 01       	movw	r12, r22
     87c:	7c 01       	movw	r14, r24
     87e:	60 91 a6 04 	lds	r22, 0x04A6
     882:	70 91 a7 04 	lds	r23, 0x04A7
     886:	88 27       	eor	r24, r24
     888:	77 fd       	sbrc	r23, 7
     88a:	80 95       	com	r24
     88c:	98 2f       	mov	r25, r24
     88e:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__floatsisf>
     892:	9b 01       	movw	r18, r22
     894:	ac 01       	movw	r20, r24
     896:	c7 01       	movw	r24, r14
     898:	b6 01       	movw	r22, r12
     89a:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     89e:	9b 01       	movw	r18, r22
     8a0:	ac 01       	movw	r20, r24
	t_fine = (long signed int)(var1+var2);
     8a2:	c5 01       	movw	r24, r10
     8a4:	b4 01       	movw	r22, r8
     8a6:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__addsf3>
     8aa:	6b 01       	movw	r12, r22
     8ac:	7c 01       	movw	r14, r24
     8ae:	0e 94 36 0f 	call	0x1e6c	; 0x1e6c <__fixsfsi>
     8b2:	60 93 8a 04 	sts	0x048A, r22
     8b6:	70 93 8b 04 	sts	0x048B, r23
     8ba:	80 93 8c 04 	sts	0x048C, r24
     8be:	90 93 8d 04 	sts	0x048D, r25
	
	*T = (var1+var2)/5120.0;
     8c2:	20 e0       	ldi	r18, 0x00	; 0
     8c4:	30 e0       	ldi	r19, 0x00	; 0
     8c6:	40 ea       	ldi	r20, 0xA0	; 160
     8c8:	55 e4       	ldi	r21, 0x45	; 69
     8ca:	c7 01       	movw	r24, r14
     8cc:	b6 01       	movw	r22, r12
     8ce:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__divsf3>
     8d2:	6b 01       	movw	r12, r22
     8d4:	7c 01       	movw	r14, r24
     8d6:	68 83       	st	Y, r22
     8d8:	79 83       	std	Y+1, r23	; 0x01
     8da:	8a 83       	std	Y+2, r24	; 0x02
     8dc:	9b 83       	std	Y+3, r25	; 0x03
	
	if(*T>100.0 || *T <(-100.0))return 0;
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	48 ec       	ldi	r20, 0xC8	; 200
     8e4:	52 e4       	ldi	r21, 0x42	; 66
     8e6:	0e 94 19 10 	call	0x2032	; 0x2032 <__gesf2>
     8ea:	18 16       	cp	r1, r24
     8ec:	74 f0       	brlt	.+28     	; 0x90a <BMP280_CalcTemperature+0x164>
     8ee:	20 e0       	ldi	r18, 0x00	; 0
     8f0:	30 e0       	ldi	r19, 0x00	; 0
     8f2:	48 ec       	ldi	r20, 0xC8	; 200
     8f4:	52 ec       	ldi	r21, 0xC2	; 194
     8f6:	c7 01       	movw	r24, r14
     8f8:	b6 01       	movw	r22, r12
     8fa:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__cmpsf2>
     8fe:	88 1f       	adc	r24, r24
     900:	88 27       	eor	r24, r24
     902:	88 1f       	adc	r24, r24
     904:	91 e0       	ldi	r25, 0x01	; 1
     906:	89 27       	eor	r24, r25
     908:	01 c0       	rjmp	.+2      	; 0x90c <BMP280_CalcTemperature+0x166>
     90a:	80 e0       	ldi	r24, 0x00	; 0
	
	return (1);
}
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	ff 90       	pop	r15
     912:	ef 90       	pop	r14
     914:	df 90       	pop	r13
     916:	cf 90       	pop	r12
     918:	bf 90       	pop	r11
     91a:	af 90       	pop	r10
     91c:	9f 90       	pop	r9
     91e:	8f 90       	pop	r8
     920:	7f 90       	pop	r7
     922:	6f 90       	pop	r6
     924:	5f 90       	pop	r5
     926:	4f 90       	pop	r4
     928:	08 95       	ret

0000092a <BMP280_CalcPressure>:
  @brief Calculates pressure
  @param[out] pointer to a place to store the pressure data
  @param[in] pointer to the uncalibrated pressure data
  @return status
*****************************************************************************/
char BMP280_CalcPressure(double *P,double *uP){
     92a:	4f 92       	push	r4
     92c:	5f 92       	push	r5
     92e:	6f 92       	push	r6
     930:	7f 92       	push	r7
     932:	8f 92       	push	r8
     934:	9f 92       	push	r9
     936:	af 92       	push	r10
     938:	bf 92       	push	r11
     93a:	cf 92       	push	r12
     93c:	df 92       	push	r13
     93e:	ef 92       	push	r14
     940:	ff 92       	push	r15
     942:	0f 93       	push	r16
     944:	1f 93       	push	r17
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
     94a:	8c 01       	movw	r16, r24
     94c:	eb 01       	movw	r28, r22
	//char result;
	double var1 , var2 ;
	
	var1 = ((double)t_fine/2.0) - 64000.0;
     94e:	60 91 8a 04 	lds	r22, 0x048A
     952:	70 91 8b 04 	lds	r23, 0x048B
     956:	80 91 8c 04 	lds	r24, 0x048C
     95a:	90 91 8d 04 	lds	r25, 0x048D
     95e:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__floatsisf>
     962:	20 e0       	ldi	r18, 0x00	; 0
     964:	30 e0       	ldi	r19, 0x00	; 0
     966:	40 e0       	ldi	r20, 0x00	; 0
     968:	5f e3       	ldi	r21, 0x3F	; 63
     96a:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     96e:	20 e0       	ldi	r18, 0x00	; 0
     970:	30 e0       	ldi	r19, 0x00	; 0
     972:	4a e7       	ldi	r20, 0x7A	; 122
     974:	57 e4       	ldi	r21, 0x47	; 71
     976:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__subsf3>
     97a:	6b 01       	movw	r12, r22
     97c:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
     97e:	60 91 9c 04 	lds	r22, 0x049C
     982:	70 91 9d 04 	lds	r23, 0x049D
     986:	88 27       	eor	r24, r24
     988:	77 fd       	sbrc	r23, 7
     98a:	80 95       	com	r24
     98c:	98 2f       	mov	r25, r24
     98e:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__floatsisf>
     992:	a7 01       	movw	r20, r14
     994:	96 01       	movw	r18, r12
     996:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     99a:	20 e0       	ldi	r18, 0x00	; 0
     99c:	30 e0       	ldi	r19, 0x00	; 0
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	58 e3       	ldi	r21, 0x38	; 56
     9a2:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     9a6:	a7 01       	movw	r20, r14
     9a8:	96 01       	movw	r18, r12
     9aa:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     9ae:	4b 01       	movw	r8, r22
     9b0:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
     9b2:	60 91 9e 04 	lds	r22, 0x049E
     9b6:	70 91 9f 04 	lds	r23, 0x049F
     9ba:	88 27       	eor	r24, r24
     9bc:	77 fd       	sbrc	r23, 7
     9be:	80 95       	com	r24
     9c0:	98 2f       	mov	r25, r24
     9c2:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__floatsisf>
     9c6:	a7 01       	movw	r20, r14
     9c8:	96 01       	movw	r18, r12
     9ca:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     9ce:	9b 01       	movw	r18, r22
     9d0:	ac 01       	movw	r20, r24
     9d2:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__addsf3>
     9d6:	a5 01       	movw	r20, r10
     9d8:	94 01       	movw	r18, r8
     9da:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__addsf3>
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	30 e0       	ldi	r19, 0x00	; 0
     9e2:	40 e8       	ldi	r20, 0x80	; 128
     9e4:	5e e3       	ldi	r21, 0x3E	; 62
     9e6:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     9ea:	4b 01       	movw	r8, r22
     9ec:	5c 01       	movw	r10, r24
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var1 = (((double)dig_P3) * var1 * var1/524288.0 + ((double)dig_P2) * var1) / 524288.0;
     9ee:	60 91 a2 04 	lds	r22, 0x04A2
     9f2:	70 91 a3 04 	lds	r23, 0x04A3
     9f6:	88 27       	eor	r24, r24
     9f8:	77 fd       	sbrc	r23, 7
     9fa:	80 95       	com	r24
     9fc:	98 2f       	mov	r25, r24
     9fe:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__floatsisf>
     a02:	a7 01       	movw	r20, r14
     a04:	96 01       	movw	r18, r12
     a06:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     a0a:	a7 01       	movw	r20, r14
     a0c:	96 01       	movw	r18, r12
     a0e:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     a12:	20 e0       	ldi	r18, 0x00	; 0
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	56 e3       	ldi	r21, 0x36	; 54
     a1a:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     a1e:	2b 01       	movw	r4, r22
     a20:	3c 01       	movw	r6, r24
     a22:	60 91 a4 04 	lds	r22, 0x04A4
     a26:	70 91 a5 04 	lds	r23, 0x04A5
     a2a:	88 27       	eor	r24, r24
     a2c:	77 fd       	sbrc	r23, 7
     a2e:	80 95       	com	r24
     a30:	98 2f       	mov	r25, r24
     a32:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__floatsisf>
     a36:	a7 01       	movw	r20, r14
     a38:	96 01       	movw	r18, r12
     a3a:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     a3e:	9b 01       	movw	r18, r22
     a40:	ac 01       	movw	r20, r24
     a42:	c3 01       	movw	r24, r6
     a44:	b2 01       	movw	r22, r4
     a46:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__addsf3>
     a4a:	20 e0       	ldi	r18, 0x00	; 0
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	40 e0       	ldi	r20, 0x00	; 0
     a50:	56 e3       	ldi	r21, 0x36	; 54
     a52:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
     a56:	20 e0       	ldi	r18, 0x00	; 0
     a58:	30 e0       	ldi	r19, 0x00	; 0
     a5a:	40 e0       	ldi	r20, 0x00	; 0
     a5c:	57 e4       	ldi	r21, 0x47	; 71
     a5e:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__addsf3>
     a62:	20 e0       	ldi	r18, 0x00	; 0
     a64:	30 e0       	ldi	r19, 0x00	; 0
     a66:	40 e0       	ldi	r20, 0x00	; 0
     a68:	58 e3       	ldi	r21, 0x38	; 56
     a6a:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     a6e:	6b 01       	movw	r12, r22
     a70:	7c 01       	movw	r14, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
     a72:	28 81       	ld	r18, Y
     a74:	39 81       	ldd	r19, Y+1	; 0x01
     a76:	4a 81       	ldd	r20, Y+2	; 0x02
     a78:	5b 81       	ldd	r21, Y+3	; 0x03
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	70 e0       	ldi	r23, 0x00	; 0
     a7e:	80 e8       	ldi	r24, 0x80	; 128
     a80:	99 e4       	ldi	r25, 0x49	; 73
     a82:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__subsf3>
     a86:	2b 01       	movw	r4, r22
     a88:	3c 01       	movw	r6, r24
	var2 = var1 * (var1 * ((double)dig_P6)/32768.0);	//not overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	var2 = var2 + (var1 * ((double)dig_P5)*2.0);	//overflow
	//Serial.print("var2 = ");Serial.println(var2,2);
	
	var2 = (var2/4.0)+(((double)dig_P4)*65536.0);
     a8a:	60 91 a0 04 	lds	r22, 0x04A0
     a8e:	70 91 a1 04 	lds	r23, 0x04A1
     a92:	88 27       	eor	r24, r24
     a94:	77 fd       	sbrc	r23, 7
     a96:	80 95       	com	r24
     a98:	98 2f       	mov	r25, r24
     a9a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__floatsisf>
     a9e:	20 e0       	ldi	r18, 0x00	; 0
     aa0:	30 e0       	ldi	r19, 0x00	; 0
     aa2:	40 e8       	ldi	r20, 0x80	; 128
     aa4:	57 e4       	ldi	r21, 0x47	; 71
     aa6:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     aaa:	9b 01       	movw	r18, r22
     aac:	ac 01       	movw	r20, r24
     aae:	c5 01       	movw	r24, r10
     ab0:	b4 01       	movw	r22, r8
     ab2:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__addsf3>
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
     ab6:	20 e0       	ldi	r18, 0x00	; 0
     ab8:	30 e0       	ldi	r19, 0x00	; 0
     aba:	40 e8       	ldi	r20, 0x80	; 128
     abc:	59 e3       	ldi	r21, 0x39	; 57
     abe:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     ac2:	9b 01       	movw	r18, r22
     ac4:	ac 01       	movw	r20, r24
     ac6:	c3 01       	movw	r24, r6
     ac8:	b2 01       	movw	r22, r4
     aca:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__subsf3>
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	30 e5       	ldi	r19, 0x50	; 80
     ad2:	43 ec       	ldi	r20, 0xC3	; 195
     ad4:	55 e4       	ldi	r21, 0x45	; 69
     ad6:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     ada:	4b 01       	movw	r8, r22
     adc:	5c 01       	movw	r10, r24
	//Serial.print("dig_P1 = ");Serial.println((double)dig_P1,5);
	//double tt_var = t_var * (double)dig_P1;
	
	//Serial.print("mulipication = "); Serial.println(tt_var,5);
	
	var1 = ((32768.0 + var1)/32768.0)*((double)dig_P1);
     ade:	60 91 94 04 	lds	r22, 0x0494
     ae2:	70 91 95 04 	lds	r23, 0x0495
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__floatunsisf>
     aee:	9b 01       	movw	r18, r22
     af0:	ac 01       	movw	r20, r24
     af2:	c7 01       	movw	r24, r14
     af4:	b6 01       	movw	r22, r12
     af6:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     afa:	9b 01       	movw	r18, r22
     afc:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	
	double p = 1048576.0- (double)*uP;
	//Serial.print("p = ");Serial.println(p,2);
	
	p = (p-(var2/4096.0))*6250.0/var1 ;	//overflow
     afe:	c5 01       	movw	r24, r10
     b00:	b4 01       	movw	r22, r8
     b02:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__divsf3>
     b06:	6b 01       	movw	r12, r22
     b08:	7c 01       	movw	r14, r24
	//Serial.print("p = ");Serial.println(p,2);
	
	var1 = ((double)dig_P9)*p*p/2147483648.0;	//overflow
     b0a:	60 91 96 04 	lds	r22, 0x0496
     b0e:	70 91 97 04 	lds	r23, 0x0497
     b12:	88 27       	eor	r24, r24
     b14:	77 fd       	sbrc	r23, 7
     b16:	80 95       	com	r24
     b18:	98 2f       	mov	r25, r24
     b1a:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__floatsisf>
     b1e:	a7 01       	movw	r20, r14
     b20:	96 01       	movw	r18, r12
     b22:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     b26:	a7 01       	movw	r20, r14
     b28:	96 01       	movw	r18, r12
     b2a:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	40 e0       	ldi	r20, 0x00	; 0
     b34:	50 e3       	ldi	r21, 0x30	; 48
     b36:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     b3a:	4b 01       	movw	r8, r22
     b3c:	5c 01       	movw	r10, r24
	
	var2 = p*((double)dig_P8)/32768.0;
     b3e:	60 91 98 04 	lds	r22, 0x0498
     b42:	70 91 99 04 	lds	r23, 0x0499
     b46:	88 27       	eor	r24, r24
     b48:	77 fd       	sbrc	r23, 7
     b4a:	80 95       	com	r24
     b4c:	98 2f       	mov	r25, r24
     b4e:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__floatsisf>
     b52:	a7 01       	movw	r20, r14
     b54:	96 01       	movw	r18, r12
     b56:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	40 e0       	ldi	r20, 0x00	; 0
     b60:	58 e3       	ldi	r21, 0x38	; 56
     b62:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     b66:	9b 01       	movw	r18, r22
     b68:	ac 01       	movw	r20, r24
	//Serial.print("var1 = ");Serial.println(var1,2);
	p = p + (var1+var2+((double)dig_P7))/16.0;
     b6a:	c5 01       	movw	r24, r10
     b6c:	b4 01       	movw	r22, r8
     b6e:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__addsf3>
     b72:	4b 01       	movw	r8, r22
     b74:	5c 01       	movw	r10, r24
     b76:	60 91 9a 04 	lds	r22, 0x049A
     b7a:	70 91 9b 04 	lds	r23, 0x049B
     b7e:	88 27       	eor	r24, r24
     b80:	77 fd       	sbrc	r23, 7
     b82:	80 95       	com	r24
     b84:	98 2f       	mov	r25, r24
     b86:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <__floatsisf>
     b8a:	9b 01       	movw	r18, r22
     b8c:	ac 01       	movw	r20, r24
     b8e:	c5 01       	movw	r24, r10
     b90:	b4 01       	movw	r22, r8
     b92:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__addsf3>
     b96:	20 e0       	ldi	r18, 0x00	; 0
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	40 e8       	ldi	r20, 0x80	; 128
     b9c:	5d e3       	ldi	r21, 0x3D	; 61
     b9e:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     ba2:	a7 01       	movw	r20, r14
     ba4:	96 01       	movw	r18, r12
     ba6:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <__addsf3>
	//Serial.print("p = ");Serial.println(p,2);
	
	*P = p/100.0 ;
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	30 e0       	ldi	r19, 0x00	; 0
     bae:	48 ec       	ldi	r20, 0xC8	; 200
     bb0:	52 e4       	ldi	r21, 0x42	; 66
     bb2:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <__divsf3>
     bb6:	6b 01       	movw	r12, r22
     bb8:	7c 01       	movw	r14, r24
     bba:	f8 01       	movw	r30, r16
     bbc:	60 83       	st	Z, r22
     bbe:	71 83       	std	Z+1, r23	; 0x01
     bc0:	82 83       	std	Z+2, r24	; 0x02
     bc2:	93 83       	std	Z+3, r25	; 0x03
	
	if((*P>1200.0) || (*P < 800.0))return (0);
     bc4:	20 e0       	ldi	r18, 0x00	; 0
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	46 e9       	ldi	r20, 0x96	; 150
     bca:	54 e4       	ldi	r21, 0x44	; 68
     bcc:	0e 94 19 10 	call	0x2032	; 0x2032 <__gesf2>
     bd0:	18 16       	cp	r1, r24
     bd2:	74 f0       	brlt	.+28     	; 0xbf0 <BMP280_CalcPressure+0x2c6>
     bd4:	20 e0       	ldi	r18, 0x00	; 0
     bd6:	30 e0       	ldi	r19, 0x00	; 0
     bd8:	48 e4       	ldi	r20, 0x48	; 72
     bda:	54 e4       	ldi	r21, 0x44	; 68
     bdc:	c7 01       	movw	r24, r14
     bde:	b6 01       	movw	r22, r12
     be0:	0e 94 ca 0e 	call	0x1d94	; 0x1d94 <__cmpsf2>
     be4:	88 1f       	adc	r24, r24
     be6:	88 27       	eor	r24, r24
     be8:	88 1f       	adc	r24, r24
     bea:	91 e0       	ldi	r25, 0x01	; 1
     bec:	89 27       	eor	r24, r25
     bee:	01 c0       	rjmp	.+2      	; 0xbf2 <BMP280_CalcPressure+0x2c8>
     bf0:	80 e0       	ldi	r24, 0x00	; 0
	return (1);
}
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	1f 91       	pop	r17
     bf8:	0f 91       	pop	r16
     bfa:	ff 90       	pop	r15
     bfc:	ef 90       	pop	r14
     bfe:	df 90       	pop	r13
     c00:	cf 90       	pop	r12
     c02:	bf 90       	pop	r11
     c04:	af 90       	pop	r10
     c06:	9f 90       	pop	r9
     c08:	8f 90       	pop	r8
     c0a:	7f 90       	pop	r7
     c0c:	6f 90       	pop	r6
     c0e:	5f 90       	pop	r5
     c10:	4f 90       	pop	r4
     c12:	08 95       	ret

00000c14 <BMP280_GetTemperatureAndPressure>:
  @brief Gets temperature and pressure
  @param[out] pointer to a place to store the pressure data
  @param[out] pointer to a place to store the temperature data
  @return status
*****************************************************************************/
char BMP280_GetTemperatureAndPressure(double *T,double *P){
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
     c1c:	cf 93       	push	r28
     c1e:	df 93       	push	r29
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	28 97       	sbiw	r28, 0x08	; 8
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	cd bf       	out	0x3d, r28	; 61
     c30:	8c 01       	movw	r16, r24
     c32:	7b 01       	movw	r14, r22
	double uP,uT ;
	char result = BMP280_GetUnPT(&uP,&uT);
     c34:	be 01       	movw	r22, r28
     c36:	6b 5f       	subi	r22, 0xFB	; 251
     c38:	7f 4f       	sbci	r23, 0xFF	; 255
     c3a:	ce 01       	movw	r24, r28
     c3c:	01 96       	adiw	r24, 0x01	; 1
     c3e:	0e 94 31 03 	call	0x662	; 0x662 <BMP280_GetUnPT>
	if(result!=0){
     c42:	88 23       	and	r24, r24
     c44:	d1 f0       	breq	.+52     	; 0xc7a <BMP280_GetTemperatureAndPressure+0x66>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
     c46:	be 01       	movw	r22, r28
     c48:	6b 5f       	subi	r22, 0xFB	; 251
     c4a:	7f 4f       	sbci	r23, 0xFF	; 255
     c4c:	c8 01       	movw	r24, r16
     c4e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <BMP280_CalcTemperature>
		if(result){
     c52:	88 23       	and	r24, r24
     c54:	69 f0       	breq	.+26     	; 0xc70 <BMP280_GetTemperatureAndPressure+0x5c>
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
     c56:	be 01       	movw	r22, r28
     c58:	6f 5f       	subi	r22, 0xFF	; 255
     c5a:	7f 4f       	sbci	r23, 0xFF	; 255
     c5c:	c7 01       	movw	r24, r14
     c5e:	0e 94 95 04 	call	0x92a	; 0x92a <BMP280_CalcPressure>
			if(result)return (1);
     c62:	81 11       	cpse	r24, r1
     c64:	0f c0       	rjmp	.+30     	; 0xc84 <BMP280_GetTemperatureAndPressure+0x70>
			else error = 3 ;	// pressure error ;
     c66:	83 e0       	ldi	r24, 0x03	; 3
     c68:	80 93 89 04 	sts	0x0489, r24
			return (0);
     c6c:	80 e0       	ldi	r24, 0x00	; 0
     c6e:	0b c0       	rjmp	.+22     	; 0xc86 <BMP280_GetTemperatureAndPressure+0x72>
		}else
		error = 2;	// temperature error ;
     c70:	82 e0       	ldi	r24, 0x02	; 2
     c72:	80 93 89 04 	sts	0x0489, r24
	}
	else
	error = 1;
	
	return (0);
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	06 c0       	rjmp	.+12     	; 0xc86 <BMP280_GetTemperatureAndPressure+0x72>
			return (0);
		}else
		error = 2;	// temperature error ;
	}
	else
	error = 1;
     c7a:	81 e0       	ldi	r24, 0x01	; 1
     c7c:	80 93 89 04 	sts	0x0489, r24
	
	return (0);
     c80:	80 e0       	ldi	r24, 0x00	; 0
     c82:	01 c0       	rjmp	.+2      	; 0xc86 <BMP280_GetTemperatureAndPressure+0x72>
		// calculate the temperature
		result = BMP280_CalcTemperature(T,&uT);
		if(result){
			// calculate the pressure
			result = BMP280_CalcPressure(P,&uP);
			if(result)return (1);
     c84:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	error = 1;
	
	return (0);
}
     c86:	28 96       	adiw	r28, 0x08	; 8
     c88:	0f b6       	in	r0, 0x3f	; 63
     c8a:	f8 94       	cli
     c8c:	de bf       	out	0x3e, r29	; 62
     c8e:	0f be       	out	0x3f, r0	; 63
     c90:	cd bf       	out	0x3d, r28	; 61
     c92:	df 91       	pop	r29
     c94:	cf 91       	pop	r28
     c96:	1f 91       	pop	r17
     c98:	0f 91       	pop	r16
     c9a:	ff 90       	pop	r15
     c9c:	ef 90       	pop	r14
     c9e:	08 95       	ret

00000ca0 <Si7020_init>:
*****************************************************************************/
char Si7020_init() {
	// Initialize the TWI library at 200kHz
	//TWI_Init(200000);
	return 0;
}
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	08 95       	ret

00000ca4 <Si7020_readHumidity>:

/*************************************************************************//**
  @brief Read humidity from Si7020
  @return status one if successfully read and crc check, otherwise return zero
*****************************************************************************/
char Si7020_readHumidity(unsigned char *data, char length){
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
     ca8:	ec 01       	movw	r28, r24
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
     caa:	80 e4       	ldi	r24, 0x40	; 64
     cac:	0e 94 d5 07 	call	0xfaa	; 0xfaa <TWI_BeginWrite>
	status = TWI_WriteByte(SI7020_REL_HUMIDITY_HOLD);	
     cb0:	85 ee       	ldi	r24, 0xE5	; 229
     cb2:	0e 94 c7 07 	call	0xf8e	; 0xf8e <TWI_WriteByte>
	if(status != TWI_SENT_ACK) return 0; //Error out
     cb6:	88 32       	cpi	r24, 0x28	; 40
     cb8:	e9 f4       	brne	.+58     	; 0xcf4 <Si7020_readHumidity+0x50>
	
	status = TWI_BeginRead(SI7020_ADDR);
     cba:	80 e4       	ldi	r24, 0x40	; 64
     cbc:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <TWI_BeginRead>
	if(status != TWI_SLAR_ACK)	return 0;
     cc0:	80 34       	cpi	r24, 0x40	; 64
     cc2:	d1 f4       	brne	.+52     	; 0xcf8 <Si7020_readHumidity+0x54>
	
	status = TWI_Read(data,3,false);
     cc4:	40 e0       	ldi	r20, 0x00	; 0
     cc6:	63 e0       	ldi	r22, 0x03	; 3
     cc8:	70 e0       	ldi	r23, 0x00	; 0
     cca:	ce 01       	movw	r24, r28
     ccc:	0e 94 2f 08 	call	0x105e	; 0x105e <TWI_Read>
	if(status !=TWI_REC_ACK)	return 0;
     cd0:	80 35       	cpi	r24, 0x50	; 80
     cd2:	a1 f4       	brne	.+40     	; 0xcfc <Si7020_readHumidity+0x58>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawHumidity, checksum) != 0) return 0;
     cd4:	6a 81       	ldd	r22, Y+2	; 0x02
     cd6:	70 e0       	ldi	r23, 0x00	; 0
	if(status !=TWI_REC_ACK)	return 0;
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
     cd8:	88 81       	ld	r24, Y
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	98 2f       	mov	r25, r24
     cde:	88 27       	eor	r24, r24
     ce0:	29 81       	ldd	r18, Y+1	; 0x01
	if(check_crc(rawHumidity, checksum) != 0) return 0;
     ce2:	82 2b       	or	r24, r18
     ce4:	0e 94 b1 0c 	call	0x1962	; 0x1962 <check_crc>
     ce8:	89 2b       	or	r24, r25
     cea:	51 f4       	brne	.+20     	; 0xd00 <Si7020_readHumidity+0x5c>
	
	TWI_Stop();
     cec:	0e 94 2a 08 	call	0x1054	; 0x1054 <TWI_Stop>
	return 1;
     cf0:	81 e0       	ldi	r24, 0x01	; 1
     cf2:	07 c0       	rjmp	.+14     	; 0xd02 <Si7020_readHumidity+0x5e>
char Si7020_readHumidity(unsigned char *data, char length){
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
	status = TWI_WriteByte(SI7020_REL_HUMIDITY_HOLD);	
	if(status != TWI_SENT_ACK) return 0; //Error out
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	05 c0       	rjmp	.+10     	; 0xd02 <Si7020_readHumidity+0x5e>
	
	status = TWI_BeginRead(SI7020_ADDR);
	if(status != TWI_SLAR_ACK)	return 0;
     cf8:	80 e0       	ldi	r24, 0x00	; 0
     cfa:	03 c0       	rjmp	.+6      	; 0xd02 <Si7020_readHumidity+0x5e>
	
	status = TWI_Read(data,3,false);
	if(status !=TWI_REC_ACK)	return 0;
     cfc:	80 e0       	ldi	r24, 0x00	; 0
     cfe:	01 c0       	rjmp	.+2      	; 0xd02 <Si7020_readHumidity+0x5e>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawHumidity, checksum) != 0) return 0;
     d00:	80 e0       	ldi	r24, 0x00	; 0
	
	TWI_Stop();
	return 1;
}
     d02:	df 91       	pop	r29
     d04:	cf 91       	pop	r28
     d06:	08 95       	ret

00000d08 <Si7020_calHumidity>:

/*************************************************************************//**
  @brief Calculate humidity from Si7020
  @return humidity value
*****************************************************************************/
float Si7020_calHumidity(unsigned char *data) {
     d08:	fc 01       	movw	r30, r24
	unsigned char msb = data[0];
	unsigned char lsb = data[1];

	unsigned int rawHumidity = ((unsigned int) msb << 8) | (unsigned int) lsb;
     d0a:	80 81       	ld	r24, Z
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	98 2f       	mov	r25, r24
     d10:	88 27       	eor	r24, r24
     d12:	21 81       	ldd	r18, Z+1	; 0x01
     d14:	bc 01       	movw	r22, r24
     d16:	62 2b       	or	r22, r18
	
	//Given the raw humidity data, calculate the actual relative humidity
	float tempRH = rawHumidity / (float)65536;
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__floatunsisf>
     d20:	20 e0       	ldi	r18, 0x00	; 0
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	40 e8       	ldi	r20, 0x80	; 128
     d26:	57 e3       	ldi	r21, 0x37	; 55
     d28:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
	float rh = 125 * tempRH -6;
     d2c:	20 e0       	ldi	r18, 0x00	; 0
     d2e:	30 e0       	ldi	r19, 0x00	; 0
     d30:	4a ef       	ldi	r20, 0xFA	; 250
     d32:	52 e4       	ldi	r21, 0x42	; 66
     d34:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     d38:	20 e0       	ldi	r18, 0x00	; 0
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	40 ec       	ldi	r20, 0xC0	; 192
     d3e:	50 e4       	ldi	r21, 0x40	; 64
     d40:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__subsf3>
	
	return rh;
}
     d44:	08 95       	ret

00000d46 <Si7020_readTemperature>:

/*************************************************************************//**
  @brief Read temperature from Si7020
  @return status one if successfully read and crc check, otherwise return zero
*****************************************************************************/
char Si7020_readTemperature(unsigned char *data, char length){
     d46:	cf 93       	push	r28
     d48:	df 93       	push	r29
     d4a:	ec 01       	movw	r28, r24
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
     d4c:	80 e4       	ldi	r24, 0x40	; 64
     d4e:	0e 94 d5 07 	call	0xfaa	; 0xfaa <TWI_BeginWrite>
	status = TWI_WriteByte(SI7020_TEMPERATURE_HOLD);	
     d52:	83 ee       	ldi	r24, 0xE3	; 227
     d54:	0e 94 c7 07 	call	0xf8e	; 0xf8e <TWI_WriteByte>
	if(status != TWI_SENT_ACK) return 0; //Error out
     d58:	88 32       	cpi	r24, 0x28	; 40
     d5a:	e9 f4       	brne	.+58     	; 0xd96 <Si7020_readTemperature+0x50>
	
	status = TWI_BeginRead(SI7020_ADDR);
     d5c:	80 e4       	ldi	r24, 0x40	; 64
     d5e:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <TWI_BeginRead>
	if(status != TWI_SLAR_ACK)	return 0;
     d62:	80 34       	cpi	r24, 0x40	; 64
     d64:	d1 f4       	brne	.+52     	; 0xd9a <Si7020_readTemperature+0x54>
	
	status = TWI_Read(data,3,false);
     d66:	40 e0       	ldi	r20, 0x00	; 0
     d68:	63 e0       	ldi	r22, 0x03	; 3
     d6a:	70 e0       	ldi	r23, 0x00	; 0
     d6c:	ce 01       	movw	r24, r28
     d6e:	0e 94 2f 08 	call	0x105e	; 0x105e <TWI_Read>
	if(status !=TWI_REC_ACK)	return 0;
     d72:	80 35       	cpi	r24, 0x50	; 80
     d74:	a1 f4       	brne	.+40     	; 0xd9e <Si7020_readTemperature+0x58>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawTemperature, checksum) != 0) return 0;
     d76:	6a 81       	ldd	r22, Y+2	; 0x02
     d78:	70 e0       	ldi	r23, 0x00	; 0
	if(status !=TWI_REC_ACK)	return 0;
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
     d7a:	88 81       	ld	r24, Y
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	98 2f       	mov	r25, r24
     d80:	88 27       	eor	r24, r24
     d82:	29 81       	ldd	r18, Y+1	; 0x01
	if(check_crc(rawTemperature, checksum) != 0) return 0;
     d84:	82 2b       	or	r24, r18
     d86:	0e 94 b1 0c 	call	0x1962	; 0x1962 <check_crc>
     d8a:	89 2b       	or	r24, r25
     d8c:	51 f4       	brne	.+20     	; 0xda2 <Si7020_readTemperature+0x5c>
	
	TWI_Stop();
     d8e:	0e 94 2a 08 	call	0x1054	; 0x1054 <TWI_Stop>
	return 1;
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	07 c0       	rjmp	.+14     	; 0xda4 <Si7020_readTemperature+0x5e>
char Si7020_readTemperature(unsigned char *data, char length){
	char status;
	
	TWI_BeginWrite(SI7020_ADDR); 	
	status = TWI_WriteByte(SI7020_TEMPERATURE_HOLD);	
	if(status != TWI_SENT_ACK) return 0; //Error out
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	05 c0       	rjmp	.+10     	; 0xda4 <Si7020_readTemperature+0x5e>
	
	status = TWI_BeginRead(SI7020_ADDR);
	if(status != TWI_SLAR_ACK)	return 0;
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	03 c0       	rjmp	.+6      	; 0xda4 <Si7020_readTemperature+0x5e>
	
	status = TWI_Read(data,3,false);
	if(status !=TWI_REC_ACK)	return 0;
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	01 c0       	rjmp	.+2      	; 0xda4 <Si7020_readTemperature+0x5e>
	
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned char checksum = data[2];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
	if(check_crc(rawTemperature, checksum) != 0) return 0;
     da2:	80 e0       	ldi	r24, 0x00	; 0
	
	TWI_Stop();
	return 1;
}
     da4:	df 91       	pop	r29
     da6:	cf 91       	pop	r28
     da8:	08 95       	ret

00000daa <Si7020_calTemperature>:

/*************************************************************************//**
  @brief Calculate temperature from Si7020
  @return temperature value
*****************************************************************************/
float Si7020_calTemperature(unsigned char *data) {
     daa:	fc 01       	movw	r30, r24
	unsigned char msb = data[0];
	unsigned char lsb = data[1];
	unsigned int rawTemperature = ((unsigned int) msb << 8) | (unsigned int) lsb;
     dac:	80 81       	ld	r24, Z
     dae:	90 e0       	ldi	r25, 0x00	; 0
     db0:	98 2f       	mov	r25, r24
     db2:	88 27       	eor	r24, r24
     db4:	21 81       	ldd	r18, Z+1	; 0x01
     db6:	bc 01       	movw	r22, r24
     db8:	62 2b       	or	r22, r18
	
	//Given the raw temperature data, calculate the actual temperature
	float tempTemperature = rawTemperature / (float)65536; 
     dba:	80 e0       	ldi	r24, 0x00	; 0
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__floatunsisf>
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	40 e8       	ldi	r20, 0x80	; 128
     dc8:	57 e3       	ldi	r21, 0x37	; 55
     dca:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
	float realTemperature = 175.72 * tempTemperature - 46.85;
     dce:	22 e5       	ldi	r18, 0x52	; 82
     dd0:	38 eb       	ldi	r19, 0xB8	; 184
     dd2:	4f e2       	ldi	r20, 0x2F	; 47
     dd4:	53 e4       	ldi	r21, 0x43	; 67
     dd6:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     dda:	26 e6       	ldi	r18, 0x66	; 102
     ddc:	36 e6       	ldi	r19, 0x66	; 102
     dde:	4b e3       	ldi	r20, 0x3B	; 59
     de0:	52 e4       	ldi	r21, 0x42	; 66
     de2:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__subsf3>
	
	return realTemperature;
     de6:	08 95       	ret

00000de8 <TGS2600_TurnOn>:
	DDRB |= 0b00100000;
	TGS2600_TurnOn();
}

void TGS2600_TurnOn(void){
	PORTB |= 0b00100000;
     de8:	2d 9a       	sbi	0x05, 5	; 5
     dea:	08 95       	ret

00000dec <TGS2600_Init>:
#include "devices/inc/TGS2600.h"
#include "drivers/inc/ADC.h"
#include "drivers/inc/PWR.h"

void TGS2600_Init(void){
	DDRB |= 0b00100000;
     dec:	25 9a       	sbi	0x04, 5	; 4
	TGS2600_TurnOn();
     dee:	0e 94 f4 06 	call	0xde8	; 0xde8 <TGS2600_TurnOn>
     df2:	08 95       	ret

00000df4 <ADC_Init>:

/*************************************************************************//**
  @brief Initializes the ADC
*****************************************************************************/
void ADC_Init(void) {
	ADCSRA = (1<<ADEN)|(4<<ADPS0); //enables the ADC module, CPU clock prescale=16
     df4:	84 e8       	ldi	r24, 0x84	; 132
     df6:	80 93 7a 00 	sts	0x007A, r24
	
	ADCSRC = 0x05|(1<<ADTHT0)|(1<<ADTHT1); //ADSUT=5
     dfa:	85 ec       	ldi	r24, 0xC5	; 197
     dfc:	80 93 77 00 	sts	0x0077, r24
	while((ADCSRB&(1<<AVDDOK))==0);
     e00:	eb e7       	ldi	r30, 0x7B	; 123
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	88 23       	and	r24, r24
     e08:	ec f7       	brge	.-6      	; 0xe04 <ADC_Init+0x10>
}
     e0a:	08 95       	ret

00000e0c <ADC_DieTemp>:
float ADC_DieTemp (void) {
	int t;
	/*ADC_Reference(REFERENCE_1_6V);
	t=ADC_Convert(ADC_TEMP);
	*/
	ADCSRC = 10<<ADSUT0; // set start-up time
     e0c:	8a e0       	ldi	r24, 0x0A	; 10
     e0e:	80 93 77 00 	sts	0x0077, r24
	ADCSRB = 1<<MUX5; // set MUX5 first
     e12:	88 e0       	ldi	r24, 0x08	; 8
     e14:	80 93 7b 00 	sts	0x007B, r24
	ADMUX = (3<<REFS0) + (9<<MUX0); // store new ADMUX, 1.6V AREF
     e18:	89 ec       	ldi	r24, 0xC9	; 201
     e1a:	80 93 7c 00 	sts	0x007C, r24
	// switch ADC on, set prescaler, start conversion
	ADCSRA = (1<<ADEN) + (1<<ADSC) + (4<<ADPS0);
     e1e:	84 ec       	ldi	r24, 0xC4	; 196
     e20:	80 93 7a 00 	sts	0x007A, r24
	return (1.13*(float)ADC)-272.8;
     e24:	60 91 78 00 	lds	r22, 0x0078
     e28:	70 91 79 00 	lds	r23, 0x0079
     e2c:	80 e0       	ldi	r24, 0x00	; 0
     e2e:	90 e0       	ldi	r25, 0x00	; 0
     e30:	0e 94 67 0f 	call	0x1ece	; 0x1ece <__floatunsisf>
     e34:	27 ed       	ldi	r18, 0xD7	; 215
     e36:	33 ea       	ldi	r19, 0xA3	; 163
     e38:	40 e9       	ldi	r20, 0x90	; 144
     e3a:	5f e3       	ldi	r21, 0x3F	; 63
     e3c:	0e 94 1d 10 	call	0x203a	; 0x203a <__mulsf3>
     e40:	26 e6       	ldi	r18, 0x66	; 102
     e42:	36 e6       	ldi	r19, 0x66	; 102
     e44:	48 e8       	ldi	r20, 0x88	; 136
     e46:	53 e4       	ldi	r21, 0x43	; 67
     e48:	0e 94 65 0e 	call	0x1cca	; 0x1cca <__subsf3>
}
     e4c:	08 95       	ret

00000e4e <__vector_13>:
#include "drivers/inc/int_timer.h"

#ifdef ATMEL

ISR(TIMER2_COMPA_vect)
{
     e4e:	1f 92       	push	r1
     e50:	0f 92       	push	r0
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	0f 92       	push	r0
     e56:	11 24       	eor	r1, r1
     e58:	2f 93       	push	r18
     e5a:	3f 93       	push	r19
     e5c:	4f 93       	push	r20
     e5e:	5f 93       	push	r21
     e60:	6f 93       	push	r22
     e62:	7f 93       	push	r23
     e64:	8f 93       	push	r24
     e66:	9f 93       	push	r25
     e68:	af 93       	push	r26
     e6a:	bf 93       	push	r27
     e6c:	ef 93       	push	r30
     e6e:	ff 93       	push	r31
	timer_usage ++;
     e70:	80 91 aa 04 	lds	r24, 0x04AA
     e74:	90 91 ab 04 	lds	r25, 0x04AB
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	90 93 ab 04 	sts	0x04AB, r25
     e7e:	80 93 aa 04 	sts	0x04AA, r24
	printf("count1 = %d\n",timer_usage);
     e82:	9f 93       	push	r25
     e84:	8f 93       	push	r24
     e86:	8c e8       	ldi	r24, 0x8C	; 140
     e88:	92 e0       	ldi	r25, 0x02	; 2
     e8a:	9f 93       	push	r25
     e8c:	8f 93       	push	r24
     e8e:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <printf>
	handle_timeoutq_event();
     e92:	0e 94 00 0a 	call	0x1400	; 0x1400 <handle_timeoutq_event>
     e96:	0f 90       	pop	r0
     e98:	0f 90       	pop	r0
     e9a:	0f 90       	pop	r0
     e9c:	0f 90       	pop	r0
}
     e9e:	ff 91       	pop	r31
     ea0:	ef 91       	pop	r30
     ea2:	bf 91       	pop	r27
     ea4:	af 91       	pop	r26
     ea6:	9f 91       	pop	r25
     ea8:	8f 91       	pop	r24
     eaa:	7f 91       	pop	r23
     eac:	6f 91       	pop	r22
     eae:	5f 91       	pop	r21
     eb0:	4f 91       	pop	r20
     eb2:	3f 91       	pop	r19
     eb4:	2f 91       	pop	r18
     eb6:	0f 90       	pop	r0
     eb8:	0f be       	out	0x3f, r0	; 63
     eba:	0f 90       	pop	r0
     ebc:	1f 90       	pop	r1
     ebe:	18 95       	reti

00000ec0 <init_Event_Timer>:
/* Initialization Routine Example 3 : Timer 2 Async operation */
/* Clock for Timer 2 is taken from crystal connected to TOSC pins */
void init_Event_Timer(void)
{
	/* Select clock source as crystal on TOSCn pins */
	ASSR |= 1 << AS2;
     ec0:	e6 eb       	ldi	r30, 0xB6	; 182
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	80 62       	ori	r24, 0x20	; 32
     ec8:	80 83       	st	Z, r24
	/* Clear Timer on compare match. Toggle OC2A on Compare Match */
	TCCR2A = (1<<COM2A0) | (1<<WGM21);
     eca:	82 e4       	ldi	r24, 0x42	; 66
     ecc:	80 93 b0 00 	sts	0x00B0, r24
	/* Timer Clock = 32768 Hz / 1024 */
	TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20);
     ed0:	87 e0       	ldi	r24, 0x07	; 7
     ed2:	80 93 b1 00 	sts	0x00B1, r24
     ed6:	08 95       	ret

00000ed8 <init_set_timer>:
}


void general_set_timer( int period_number )
{
    OCR2A = period_number * APERIOD ;
     ed8:	88 0f       	add	r24, r24
     eda:	88 0f       	add	r24, r24
     edc:	88 0f       	add	r24, r24
     ede:	80 93 b3 00 	sts	0x00B3, r24
{
    general_set_timer( period_number );
    /* Wait till registers are ready
	 * Refer ATmega328PB datasheet section
	 * 'Asynchronous Operation of Timer/Counter2' */
	while ((ASSR & ((1 << OCR2AUB) | (1 << OCR2BUB) | (1 << TCR2AUB) 
     ee2:	e6 eb       	ldi	r30, 0xB6	; 182
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	80 81       	ld	r24, Z
     ee8:	8f 71       	andi	r24, 0x1F	; 31
     eea:	e9 f7       	brne	.-6      	; 0xee6 <init_set_timer+0xe>
		| (1 << TCR2BUB) | (1<< TCN2UB))));
	/* Clear pending interrupts */
	TIFR2  = (1 << TOV2) | (1 << OCF2A) | (1 << OCF2B);
     eec:	87 e0       	ldi	r24, 0x07	; 7
     eee:	87 bb       	out	0x17, r24	; 23
	/* Enable Timer 2 Output Compare Match Interrupt */
	TIMSK2 = (1 << OCIE2A);
     ef0:	82 e0       	ldi	r24, 0x02	; 2
     ef2:	80 93 70 00 	sts	0x0070, r24
     ef6:	08 95       	ret

00000ef8 <set_timer>:
}

void set_timer( int period_number )
{
     ef8:	cf 93       	push	r28
     efa:	df 93       	push	r29
     efc:	c8 2f       	mov	r28, r24
     efe:	d9 2f       	mov	r29, r25
	printf("set timer gap = %d\n\n", period_number);
     f00:	9f 93       	push	r25
     f02:	8f 93       	push	r24
     f04:	29 e9       	ldi	r18, 0x99	; 153
     f06:	32 e0       	ldi	r19, 0x02	; 2
     f08:	3f 93       	push	r19
     f0a:	2f 93       	push	r18
     f0c:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <printf>
    if( timer_usage == 0 )
     f10:	0f 90       	pop	r0
     f12:	0f 90       	pop	r0
     f14:	0f 90       	pop	r0
     f16:	0f 90       	pop	r0
     f18:	20 91 aa 04 	lds	r18, 0x04AA
     f1c:	30 91 ab 04 	lds	r19, 0x04AB
     f20:	23 2b       	or	r18, r19
     f22:	29 f4       	brne	.+10     	; 0xf2e <set_timer+0x36>
    {
        init_set_timer( period_number );
     f24:	8c 2f       	mov	r24, r28
     f26:	9d 2f       	mov	r25, r29
     f28:	0e 94 6c 07 	call	0xed8	; 0xed8 <init_set_timer>
     f2c:	05 c0       	rjmp	.+10     	; 0xf38 <set_timer+0x40>
}


void general_set_timer( int period_number )
{
    OCR2A = period_number * APERIOD ;
     f2e:	cc 0f       	add	r28, r28
     f30:	cc 0f       	add	r28, r28
     f32:	cc 0f       	add	r28, r28
     f34:	c0 93 b3 00 	sts	0x00B3, r28
    }
    else
    {
        general_set_timer( period_number );
    }
}
     f38:	df 91       	pop	r29
     f3a:	cf 91       	pop	r28
     f3c:	08 95       	ret

00000f3e <PWR_Init>:

/*************************************************************************//**
  @brief Initializes the power management system
*****************************************************************************/
void PWR_Init(void){
	DDRD |= 0b11000000;
     f3e:	8a b1       	in	r24, 0x0a	; 10
     f40:	80 6c       	ori	r24, 0xC0	; 192
     f42:	8a b9       	out	0x0a, r24	; 10
     f44:	08 95       	ret

00000f46 <PWR_TurnOn5V>:

/*************************************************************************//**
  @brief Turns on the 5V power supply
*****************************************************************************/
void PWR_TurnOn5V(void){
	PORTD |= 0b10000000;
     f46:	5f 9a       	sbi	0x0b, 7	; 11
     f48:	08 95       	ret

00000f4a <SPI_SlaveInit>:

unsigned char buffer[16];

void SPI_SlaveInit(void)
{
	DDRB |= (1<<PORTB3); //Set MISO output
     f4a:	23 9a       	sbi	0x04, 3	; 4
	SPCR = (1<<SPE); //Enable SPI
     f4c:	80 e4       	ldi	r24, 0x40	; 64
     f4e:	8c bd       	out	0x2c, r24	; 44
     f50:	08 95       	ret

00000f52 <TWI_Init>:
/*************************************************************************//**
  @brief Initializes the 2-wire Serial Interface as a master
  @param[in] freq SCL frequency (Do not exceed 400kHz)
  @return Status (@c 0 on failure, nonzero otherwise)
*****************************************************************************/
char TWI_Init(unsigned long freq){
     f52:	9b 01       	movw	r18, r22
     f54:	ac 01       	movw	r20, r24
	//printf("TWI_Init");
	TWSR=0x00;
     f56:	10 92 b9 00 	sts	0x00B9, r1
	TWBR=(unsigned char)(((F_CPU/freq)-16UL)/8UL); //Compute settings value and set frequency
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	74 e2       	ldi	r23, 0x24	; 36
     f5e:	84 ef       	ldi	r24, 0xF4	; 244
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <__udivmodsi4>
     f66:	da 01       	movw	r26, r20
     f68:	c9 01       	movw	r24, r18
     f6a:	40 97       	sbiw	r24, 0x10	; 16
     f6c:	a1 09       	sbc	r26, r1
     f6e:	b1 09       	sbc	r27, r1
     f70:	68 94       	set
     f72:	12 f8       	bld	r1, 2
     f74:	b6 95       	lsr	r27
     f76:	a7 95       	ror	r26
     f78:	97 95       	ror	r25
     f7a:	87 95       	ror	r24
     f7c:	16 94       	lsr	r1
     f7e:	d1 f7       	brne	.-12     	; 0xf74 <TWI_Init+0x22>
     f80:	80 93 b8 00 	sts	0x00B8, r24
	TWCR=(1 << TWEN);
     f84:	84 e0       	ldi	r24, 0x04	; 4
     f86:	80 93 bc 00 	sts	0x00BC, r24
	
	//TWAR=0; //Disable slave mode
	
	return 1; //May want to actually check for success here
}
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	08 95       	ret

00000f8e <TWI_WriteByte>:
  @param[in] data byte to send
  @return Status code, TWI_SENT_ACK or TWI_SENT_NACK on success
*****************************************************************************/
char TWI_WriteByte(unsigned char data){
	//printf("TWI_WriteByte");
	TWDR = data; //Stage the data to send
     f8e:	80 93 bb 00 	sts	0x00BB, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
     f92:	84 e8       	ldi	r24, 0x84	; 132
     f94:	80 93 bc 00 	sts	0x00BC, r24
	while ((TWCR & (1<<TWINT)) == 0);//Send the data
     f98:	ec eb       	ldi	r30, 0xBC	; 188
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	88 23       	and	r24, r24
     fa0:	ec f7       	brge	.-6      	; 0xf9c <TWI_WriteByte+0xe>
	
	return TWSR&TWSR_MASK;//Return the status code
     fa2:	80 91 b9 00 	lds	r24, 0x00B9
}
     fa6:	88 7f       	andi	r24, 0xF8	; 248
     fa8:	08 95       	ret

00000faa <TWI_BeginWrite>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAW_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginWrite(unsigned char address){
	//printf("TWI_BeginWrite");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
     faa:	94 ee       	ldi	r25, 0xE4	; 228
     fac:	90 93 bc 00 	sts	0x00BC, r25
	int i=0;
	while ((TWCR & (1<<TWINT)) == 0);
     fb0:	ec eb       	ldi	r30, 0xBC	; 188
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	90 81       	ld	r25, Z
     fb6:	99 23       	and	r25, r25
     fb8:	ec f7       	brge	.-6      	; 0xfb4 <TWI_BeginWrite+0xa>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     fba:	ef e9       	ldi	r30, 0x9F	; 159
     fbc:	ff e0       	ldi	r31, 0x0F	; 15
     fbe:	31 97       	sbiw	r30, 0x01	; 1
     fc0:	f1 f7       	brne	.-4      	; 0xfbe <TWI_BeginWrite+0x14>
     fc2:	00 c0       	rjmp	.+0      	; 0xfc4 <TWI_BeginWrite+0x1a>
     fc4:	00 00       	nop
	_delay_ms(1);
	char stat = (TWSR & TWSR_MASK);
     fc6:	90 91 b9 00 	lds	r25, 0x00B9
     fca:	98 7f       	andi	r25, 0xF8	; 248
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
     fcc:	98 30       	cpi	r25, 0x08	; 8
     fce:	31 f0       	breq	.+12     	; 0xfdc <TWI_BeginWrite+0x32>
     fd0:	90 31       	cpi	r25, 0x10	; 16
     fd2:	21 f0       	breq	.+8      	; 0xfdc <TWI_BeginWrite+0x32>
     fd4:	80 91 b9 00 	lds	r24, 0x00B9
     fd8:	88 7f       	andi	r24, 0xF8	; 248
     fda:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) & SLAW_MASK); //reset bit 0 to send a write bit, send
     fdc:	88 0f       	add	r24, r24
     fde:	0e 94 c7 07 	call	0xf8e	; 0xf8e <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	return stat;//Return the status code
}
     fe2:	08 95       	ret

00000fe4 <TWI_BeginRead>:
  @param[in] address Address of device to send to
  @return Status code, TWI_SLAR_ACK on success, other code otherwise
*****************************************************************************/
char TWI_BeginRead(unsigned char address){
	//printf("TWI_BeginRead");
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN)|(1<<TWEA); //Send a start bit
     fe4:	94 ee       	ldi	r25, 0xE4	; 228
     fe6:	90 93 bc 00 	sts	0x00BC, r25
	while ((TWCR & (1<<TWINT)) == 0);
     fea:	ec eb       	ldi	r30, 0xBC	; 188
     fec:	f0 e0       	ldi	r31, 0x00	; 0
     fee:	90 81       	ld	r25, Z
     ff0:	99 23       	and	r25, r25
     ff2:	ec f7       	brge	.-6      	; 0xfee <TWI_BeginRead+0xa>
	
	char stat = (TWSR & TWSR_MASK);
     ff4:	90 91 b9 00 	lds	r25, 0x00B9
     ff8:	98 7f       	andi	r25, 0xF8	; 248
	//printf("0x%1x",(unsigned)stat);
	if(stat!=TWI_START && stat!=TWI_REPEAT_START)return TWSR & TWSR_MASK; //Check for success
     ffa:	98 30       	cpi	r25, 0x08	; 8
     ffc:	31 f0       	breq	.+12     	; 0x100a <TWI_BeginRead+0x26>
     ffe:	90 31       	cpi	r25, 0x10	; 16
    1000:	21 f0       	breq	.+8      	; 0x100a <TWI_BeginRead+0x26>
    1002:	80 91 b9 00 	lds	r24, 0x00B9
    1006:	88 7f       	andi	r24, 0xF8	; 248
    1008:	08 95       	ret
	
	stat = TWI_WriteByte((address<<1) | SLAR_MASK); //set bit 0 to send a read bit and send it
    100a:	88 0f       	add	r24, r24
    100c:	81 60       	ori	r24, 0x01	; 1
    100e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <TWI_WriteByte>
	//printf("0x%1x",(unsigned)stat);
	
	return stat;//Return the status code
}
    1012:	08 95       	ret

00001014 <TWI_ReadAck>:
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_ACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadAck(unsigned char *data){
	//printf("TWI_ReadAck");
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA); //Start receiving, ending with an ACK
    1014:	24 ec       	ldi	r18, 0xC4	; 196
    1016:	20 93 bc 00 	sts	0x00BC, r18
	while ((TWCR & (1<<TWINT)) == 0);
    101a:	ec eb       	ldi	r30, 0xBC	; 188
    101c:	f0 e0       	ldi	r31, 0x00	; 0
    101e:	20 81       	ld	r18, Z
    1020:	22 23       	and	r18, r18
    1022:	ec f7       	brge	.-6      	; 0x101e <TWI_ReadAck+0xa>
	*data=TWDR; //Store the data
    1024:	20 91 bb 00 	lds	r18, 0x00BB
    1028:	fc 01       	movw	r30, r24
    102a:	20 83       	st	Z, r18
	
	return TWSR&TWSR_MASK;//Return the status code
    102c:	80 91 b9 00 	lds	r24, 0x00B9
}
    1030:	88 7f       	andi	r24, 0xF8	; 248
    1032:	08 95       	ret

00001034 <TWI_ReadNack>:
  @param[out] *data pointer to a byte to store the received byte in
  @return Status code, TWI_REC_NACK on success, other code otherwise
*****************************************************************************/
char TWI_ReadNack(unsigned char *data){
	//printf("TWI_ReadNack");
	TWCR = (1<<TWINT)|(1<<TWEN); //Start receiving, ending with a NACK
    1034:	24 e8       	ldi	r18, 0x84	; 132
    1036:	20 93 bc 00 	sts	0x00BC, r18
	while ((TWCR & (1<<TWINT)) == 0);
    103a:	ec eb       	ldi	r30, 0xBC	; 188
    103c:	f0 e0       	ldi	r31, 0x00	; 0
    103e:	20 81       	ld	r18, Z
    1040:	22 23       	and	r18, r18
    1042:	ec f7       	brge	.-6      	; 0x103e <TWI_ReadNack+0xa>
	*data=TWDR; //Store the data
    1044:	20 91 bb 00 	lds	r18, 0x00BB
    1048:	fc 01       	movw	r30, r24
    104a:	20 83       	st	Z, r18
	
	return TWSR&TWSR_MASK;//Return the status code
    104c:	80 91 b9 00 	lds	r24, 0x00B9
}
    1050:	88 7f       	andi	r24, 0xF8	; 248
    1052:	08 95       	ret

00001054 <TWI_Stop>:
  @brief Sends a Stop bit, be sure to send a Start bit before future interactions on the bus
  @return Status code, should always be nonzero
*****************************************************************************/
char TWI_Stop(void){
	//printf("TWI_Stop");
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    1054:	84 e9       	ldi	r24, 0x94	; 148
    1056:	80 93 bc 00 	sts	0x00BC, r24
	return 1;
}
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	08 95       	ret

0000105e <TWI_Read>:
  @param[in] amount Number of bytes to recieve
  @param[in] whether or not to send an ACK on the last byte, sends NACK if false
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
    105e:	9f 92       	push	r9
    1060:	af 92       	push	r10
    1062:	bf 92       	push	r11
    1064:	cf 92       	push	r12
    1066:	df 92       	push	r13
    1068:	ef 92       	push	r14
    106a:	ff 92       	push	r15
    106c:	0f 93       	push	r16
    106e:	1f 93       	push	r17
    1070:	cf 93       	push	r28
    1072:	df 93       	push	r29
    1074:	7c 01       	movw	r14, r24
    1076:	8b 01       	movw	r16, r22
    1078:	94 2e       	mov	r9, r20
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
    107a:	16 16       	cp	r1, r22
    107c:	17 06       	cpc	r1, r23
    107e:	f4 f4       	brge	.+60     	; 0x10bc <TWI_Read+0x5e>
    1080:	c0 e0       	ldi	r28, 0x00	; 0
    1082:	d0 e0       	ldi	r29, 0x00	; 0
		if((ack==false) && ((amount-1)==i)){
    1084:	6b 01       	movw	r12, r22
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	c8 1a       	sub	r12, r24
    108a:	d1 08       	sbc	r13, r1
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
    108c:	57 01       	movw	r10, r14
    108e:	ac 0c       	add	r10, r12
    1090:	bd 1c       	adc	r11, r13
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
		if((ack==false) && ((amount-1)==i)){
    1092:	91 10       	cpse	r9, r1
    1094:	07 c0       	rjmp	.+14     	; 0x10a4 <TWI_Read+0x46>
    1096:	cc 16       	cp	r12, r28
    1098:	dd 06       	cpc	r13, r29
    109a:	21 f4       	brne	.+8      	; 0x10a4 <TWI_Read+0x46>
			status=TWI_ReadNack(&data[i]); //if a NACK as chosen, receive with a NACK
    109c:	c5 01       	movw	r24, r10
    109e:	0e 94 1a 08 	call	0x1034	; 0x1034 <TWI_ReadNack>
    10a2:	05 c0       	rjmp	.+10     	; 0x10ae <TWI_Read+0x50>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}else{
			status=TWI_ReadAck(&data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
    10a4:	c7 01       	movw	r24, r14
    10a6:	8c 0f       	add	r24, r28
    10a8:	9d 1f       	adc	r25, r29
    10aa:	0e 94 0a 08 	call	0x1014	; 0x1014 <TWI_ReadAck>
			//printf("i=%i,0x%1x",i,(unsigned)status);
		}
		//printf("A");
		if(status!=TWI_REC_ACK)return status; //If NACK was selected, returning here is fine since the loop is already ending
    10ae:	80 35       	cpi	r24, 0x50	; 80
    10b0:	31 f4       	brne	.+12     	; 0x10be <TWI_Read+0x60>
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
	for(int i=0;i<amount;i++){
    10b2:	21 96       	adiw	r28, 0x01	; 1
    10b4:	c0 17       	cp	r28, r16
    10b6:	d1 07       	cpc	r29, r17
    10b8:	61 f7       	brne	.-40     	; 0x1092 <TWI_Read+0x34>
    10ba:	01 c0       	rjmp	.+2      	; 0x10be <TWI_Read+0x60>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success depending on function arguments
  @see TWI_BeginRead
*****************************************************************************/
char TWI_Read(unsigned char *data, int amount, bool ack){
	//printf("TWI_Read");
	char status=0;
    10bc:	80 e0       	ldi	r24, 0x00	; 0
		//will return if something goes wrong partway through
		//printf("B");
	}
	//printf("0x%1x",(unsigned)status);
	return status;
}
    10be:	df 91       	pop	r29
    10c0:	cf 91       	pop	r28
    10c2:	1f 91       	pop	r17
    10c4:	0f 91       	pop	r16
    10c6:	ff 90       	pop	r15
    10c8:	ef 90       	pop	r14
    10ca:	df 90       	pop	r13
    10cc:	cf 90       	pop	r12
    10ce:	bf 90       	pop	r11
    10d0:	af 90       	pop	r10
    10d2:	9f 90       	pop	r9
    10d4:	08 95       	ret

000010d6 <TWI_Write>:
  @param[in] *data Pointer to an array of bytes to send
  @param[in] amount Number of bytes to send
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
    10d6:	0f 93       	push	r16
    10d8:	1f 93       	push	r17
    10da:	cf 93       	push	r28
    10dc:	df 93       	push	r29
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
    10de:	16 16       	cp	r1, r22
    10e0:	17 06       	cpc	r1, r23
    10e2:	6c f4       	brge	.+26     	; 0x10fe <TWI_Write+0x28>
    10e4:	ec 01       	movw	r28, r24
    10e6:	8c 01       	movw	r16, r24
    10e8:	06 0f       	add	r16, r22
    10ea:	17 1f       	adc	r17, r23
		status=TWI_WriteByte(data[i]); //If we're not at the last byte yet (or NACK not selected) receive with an ACK
    10ec:	89 91       	ld	r24, Y+
    10ee:	0e 94 c7 07 	call	0xf8e	; 0xf8e <TWI_WriteByte>
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
    10f2:	88 32       	cpi	r24, 0x28	; 40
    10f4:	29 f4       	brne	.+10     	; 0x1100 <TWI_Write+0x2a>
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
	for(int i=0;i<amount;i++){
    10f6:	c0 17       	cp	r28, r16
    10f8:	d1 07       	cpc	r29, r17
    10fa:	c1 f7       	brne	.-16     	; 0x10ec <TWI_Write+0x16>
    10fc:	01 c0       	rjmp	.+2      	; 0x1100 <TWI_Write+0x2a>
  @return Status code, TWI_REC_ACK or TWI_REC_NACK on success
  @see TWI_BeginWrite
*****************************************************************************/
char TWI_Write(unsigned char *data, int amount){
	//printf("TWI_Write");
	char status=0;
    10fe:	80 e0       	ldi	r24, 0x00	; 0
		//printf("0x%1x",(unsigned)status);
		if(status!=TWI_SENT_ACK)return status; //If NACK is received on the last byte, returning here is still success
		//will return if something goes wrong partway through
	}
	return status;
    1100:	df 91       	pop	r29
    1102:	cf 91       	pop	r28
    1104:	1f 91       	pop	r17
    1106:	0f 91       	pop	r16
    1108:	08 95       	ret

0000110a <USART0_Init>:
  @brief Initializes USART0 in asynchronous UART mode, 8 bit data, 1 stop bit
  @param[in] desired baud rate (configuration values computed using F_CPU)
*****************************************************************************/
void USART0_Init(unsigned long baud){
	
	stdout = &USART0_stdout; //make stdout print to USART0
    110a:	26 e0       	ldi	r18, 0x06	; 6
    110c:	32 e0       	ldi	r19, 0x02	; 2
    110e:	30 93 07 09 	sts	0x0907, r19
    1112:	20 93 06 09 	sts	0x0906, r18
	
	//Compute UBRR for baudrate setting
	unsigned short ubrr=(unsigned short)((F_CPU/(baud*16UL))-1);
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	88 0f       	add	r24, r24
    111c:	99 1f       	adc	r25, r25
    111e:	aa 1f       	adc	r26, r26
    1120:	bb 1f       	adc	r27, r27
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	aa 1f       	adc	r26, r26
    1128:	bb 1f       	adc	r27, r27
    112a:	9c 01       	movw	r18, r24
    112c:	ad 01       	movw	r20, r26
    112e:	22 0f       	add	r18, r18
    1130:	33 1f       	adc	r19, r19
    1132:	44 1f       	adc	r20, r20
    1134:	55 1f       	adc	r21, r21
    1136:	22 0f       	add	r18, r18
    1138:	33 1f       	adc	r19, r19
    113a:	44 1f       	adc	r20, r20
    113c:	55 1f       	adc	r21, r21
    113e:	60 e0       	ldi	r22, 0x00	; 0
    1140:	74 e2       	ldi	r23, 0x24	; 36
    1142:	84 ef       	ldi	r24, 0xF4	; 244
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <__udivmodsi4>
    114a:	21 50       	subi	r18, 0x01	; 1
    114c:	31 09       	sbc	r19, r1
	
	//Set BAUD rate.
	UBRR0H = (unsigned char) (ubrr >> 8);
    114e:	30 93 c5 00 	sts	0x00C5, r19
	UBRR0L = (unsigned char) ubrr;
    1152:	20 93 c4 00 	sts	0x00C4, r18
	/*Set frame format. 8 data bit(settings bits UCSZ00 and UCSZ01  UCSR0B), 1 stop bit(by default and need not to be worried about). 
	The UCSZ01:0 bits combined with the UCSZ02 bit in UCSR0B sets the number of data
	bits (Character Size) in the frame that the Receiver and Transmitter use. 
	If a change on frame format is needed, make sure to modify UCSR0B register above accordingly.
	See datasheet pg. 390.*/
	UCSR0C = (1 << UCSZ00) | (1 << UCSZ01);
    1156:	86 e0       	ldi	r24, 0x06	; 6
    1158:	80 93 c2 00 	sts	0x00C2, r24
	
	//Enable receiver and transmitter. Enable the USART Receive Complete interrupt(RXCIE).
	//UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0));
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);//Enable RX/TX, no interrupts
    115c:	88 e1       	ldi	r24, 0x18	; 24
    115e:	80 93 c1 00 	sts	0x00C1, r24
    1162:	08 95       	ret

00001164 <USART0_Transmit>:
Function contains busy loops for simplicity in debugging. Not production code.
  @brief Transmits a byte via USART0
  @param[in] data byte to be transmitted
*****************************************************************************/
void USART0_Transmit(unsigned char data){
	while(!(UCSR0A & (1 << UDRE0))); //Wait for the empty transmit buffer. (Waiting UDR0 to be empty.)
    1164:	e0 ec       	ldi	r30, 0xC0	; 192
    1166:	f0 e0       	ldi	r31, 0x00	; 0
    1168:	90 81       	ld	r25, Z
    116a:	95 ff       	sbrs	r25, 5
    116c:	fd cf       	rjmp	.-6      	; 0x1168 <USART0_Transmit+0x4>
		UDR0 = data;			//store the data in the USART Data Register
    116e:	80 93 c6 00 	sts	0x00C6, r24
    1172:	08 95       	ret

00001174 <USART0_putchar_printf>:
  @brief Called when stdout is being printed to USART0 (this is set up at runtime)
  @param[in] var byte to transmit
  @param[in/out] *stream Pointer to a stdio.h FILE io stream
  @return Status
*****************************************************************************/
int USART0_putchar_printf(char var, FILE *stream) {
    1174:	cf 93       	push	r28
    1176:	c8 2f       	mov	r28, r24
	if (var == '\n') USART0_Transmit('\r');
    1178:	8a 30       	cpi	r24, 0x0A	; 10
    117a:	19 f4       	brne	.+6      	; 0x1182 <USART0_putchar_printf+0xe>
    117c:	8d e0       	ldi	r24, 0x0D	; 13
    117e:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART0_Transmit>
	USART0_Transmit(var);
    1182:	8c 2f       	mov	r24, r28
    1184:	0e 94 b2 08 	call	0x1164	; 0x1164 <USART0_Transmit>
	return 0;
}
    1188:	80 e0       	ldi	r24, 0x00	; 0
    118a:	90 e0       	ldi	r25, 0x00	; 0
    118c:	cf 91       	pop	r28
    118e:	08 95       	ret

00001190 <init_timeoutq>:
/* 
 * like other many stuff, we got an init function
 * fill the freelist with all entries and left the timeoutq empty
 */
void init_timeoutq()
{
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
	int i;

	timeoutq = (struct event *)&TQ;
    1198:	eb ec       	ldi	r30, 0xCB	; 203
    119a:	f8 e0       	ldi	r31, 0x08	; 8
    119c:	f0 93 d0 08 	sts	0x08D0, r31
    11a0:	e0 93 cf 08 	sts	0x08CF, r30
	LL_INIT(timeoutq);
    11a4:	f0 93 ce 08 	sts	0x08CE, r31
    11a8:	e0 93 cd 08 	sts	0x08CD, r30
    11ac:	f1 83       	std	Z+1, r31	; 0x01
    11ae:	e0 83       	st	Z, r30
	freelist = (struct event *)&FL;
    11b0:	e1 ed       	ldi	r30, 0xD1	; 209
    11b2:	f8 e0       	ldi	r31, 0x08	; 8
    11b4:	f0 93 d6 08 	sts	0x08D6, r31
    11b8:	e0 93 d5 08 	sts	0x08D5, r30
	LL_INIT(freelist);
    11bc:	f0 93 d4 08 	sts	0x08D4, r31
    11c0:	e0 93 d3 08 	sts	0x08D3, r30
    11c4:	f1 83       	std	Z+1, r31	; 0x01
    11c6:	e0 83       	st	Z, r30
    11c8:	cb eb       	ldi	r28, 0xBB	; 187
    11ca:	d7 e0       	ldi	r29, 0x07	; 7
    11cc:	0b ec       	ldi	r16, 0xCB	; 203
    11ce:	18 e0       	ldi	r17, 0x08	; 8

	for (i=0; i<MAX_EVENTS; i++) {
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
    11d0:	be 01       	movw	r22, r28
    11d2:	80 91 d5 08 	lds	r24, 0x08D5
    11d6:	90 91 d6 08 	lds	r25, 0x08D6
    11da:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <ll_r_insert>
    11de:	61 96       	adiw	r28, 0x11	; 17
	timeoutq = (struct event *)&TQ;
	LL_INIT(timeoutq);
	freelist = (struct event *)&FL;
	LL_INIT(freelist);

	for (i=0; i<MAX_EVENTS; i++) {
    11e0:	c0 17       	cp	r28, r16
    11e2:	d1 07       	cpc	r29, r17
    11e4:	a9 f7       	brne	.-22     	; 0x11d0 <init_timeoutq+0x40>
		struct event *ep = &queue[i];
		LL_PUSH(freelist, ep);
	}

	return;
}
    11e6:	df 91       	pop	r29
    11e8:	cf 91       	pop	r28
    11ea:	1f 91       	pop	r17
    11ec:	0f 91       	pop	r16
    11ee:	08 95       	ret

000011f0 <get_next_interval>:
 * return the numbers of period we should launch next
 */
int get_next_interval()
{
	int wait_time = MAX_SLEEP_INTERVAL;
	struct event * ev = ( struct event * ) LL_TOP( timeoutq );
    11f0:	80 91 cf 08 	lds	r24, 0x08CF
    11f4:	90 91 d0 08 	lds	r25, 0x08D0
    11f8:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <ll_first>

    /* no event in queue */
    // TODO : to optimize the sleep time or let the CPU sleep or set up some other interrupts
	if( EV_NULL == ev )
    11fc:	00 97       	sbiw	r24, 0x00	; 0
    11fe:	59 f0       	breq	.+22     	; 0x1216 <get_next_interval+0x26>
	    return wait_time;
	wait_time = ( wait_time > ( ev->timeout ) ) ? ( ev->timeout ) : wait_time ;
    1200:	fc 01       	movw	r30, r24
    1202:	24 81       	ldd	r18, Z+4	; 0x04
    1204:	35 81       	ldd	r19, Z+5	; 0x05
    1206:	25 30       	cpi	r18, 0x05	; 5
    1208:	31 05       	cpc	r19, r1
    120a:	14 f0       	brlt	.+4      	; 0x1210 <get_next_interval+0x20>
    120c:	24 e0       	ldi	r18, 0x04	; 4
    120e:	30 e0       	ldi	r19, 0x00	; 0
	return wait_time;
    1210:	82 2f       	mov	r24, r18
    1212:	93 2f       	mov	r25, r19
    1214:	08 95       	ret
	struct event * ev = ( struct event * ) LL_TOP( timeoutq );

    /* no event in queue */
    // TODO : to optimize the sleep time or let the CPU sleep or set up some other interrupts
	if( EV_NULL == ev )
	    return wait_time;
    1216:	84 e0       	ldi	r24, 0x04	; 4
    1218:	90 e0       	ldi	r25, 0x00	; 0
	wait_time = ( wait_time > ( ev->timeout ) ) ? ( ev->timeout ) : wait_time ;
	return wait_time;
}
    121a:	08 95       	ret

0000121c <insert_timeoutq_event>:
     */
    return 0;
}

void insert_timeoutq_event( struct event * ep)
{
    121c:	cf 93       	push	r28
    121e:	df 93       	push	r29
    1220:	dc 01       	movw	r26, r24
	// Try to insert it according to timeout and timeoutq
struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
    1222:	c0 91 cf 08 	lds	r28, 0x08CF
    1226:	d0 91 d0 08 	lds	r29, 0x08D0
    122a:	ea 81       	ldd	r30, Y+2	; 0x02
    122c:	fb 81       	ldd	r31, Y+3	; 0x03
    122e:	ce 17       	cp	r28, r30
    1230:	df 07       	cpc	r29, r31
    1232:	09 f1       	breq	.+66     	; 0x1276 <insert_timeoutq_event+0x5a>
	{
		if( it != EV_NULL )
    1234:	30 97       	sbiw	r30, 0x00	; 0
    1236:	c9 f0       	breq	.+50     	; 0x126a <insert_timeoutq_event+0x4e>
		{
			if( ( it->timeout ) > ( ep->timeout ) )
    1238:	44 81       	ldd	r20, Z+4	; 0x04
    123a:	55 81       	ldd	r21, Z+5	; 0x05
    123c:	14 96       	adiw	r26, 0x04	; 4
    123e:	2d 91       	ld	r18, X+
    1240:	3c 91       	ld	r19, X
    1242:	15 97       	sbiw	r26, 0x05	; 5
    1244:	24 17       	cp	r18, r20
    1246:	35 07       	cpc	r19, r21
    1248:	54 f4       	brge	.+20     	; 0x125e <insert_timeoutq_event+0x42>
			{
				it->timeout -= ep->timeout;
    124a:	42 1b       	sub	r20, r18
    124c:	53 0b       	sbc	r21, r19
    124e:	55 83       	std	Z+5, r21	; 0x05
    1250:	44 83       	std	Z+4, r20	; 0x04
				LL_L_INSERT( it, ep );
    1252:	bd 01       	movw	r22, r26
    1254:	80 81       	ld	r24, Z
    1256:	91 81       	ldd	r25, Z+1	; 0x01
    1258:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <ll_r_insert>
    125c:	15 c0       	rjmp	.+42     	; 0x1288 <insert_timeoutq_event+0x6c>
				// printf("left insert \n");
				break;
			}
			else
			{
				ep->timeout -= it->timeout;
    125e:	24 1b       	sub	r18, r20
    1260:	35 0b       	sbc	r19, r21
    1262:	15 96       	adiw	r26, 0x05	; 5
    1264:	3c 93       	st	X, r19
    1266:	2e 93       	st	-X, r18
    1268:	14 97       	sbiw	r26, 0x04	; 4
	// Try to insert it according to timeout and timeoutq
struct event * it;
	short is_pushed = 0;

	// Judge if we gonna insert it before a current event in timeque
	LL_EACH(timeoutq,it,struct event )
    126a:	02 80       	ldd	r0, Z+2	; 0x02
    126c:	f3 81       	ldd	r31, Z+3	; 0x03
    126e:	e0 2d       	mov	r30, r0
    1270:	ce 17       	cp	r28, r30
    1272:	df 07       	cpc	r29, r31
    1274:	f9 f6       	brne	.-66     	; 0x1234 <insert_timeoutq_event+0x18>
	}
	
	// If not insert it left to the header
	if( is_pushed == 0 )
	{
		LL_APPEND(timeoutq, ep);
    1276:	e0 91 cf 08 	lds	r30, 0x08CF
    127a:	f0 91 d0 08 	lds	r31, 0x08D0
    127e:	bd 01       	movw	r22, r26
    1280:	80 81       	ld	r24, Z
    1282:	91 81       	ldd	r25, Z+1	; 0x01
    1284:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <ll_r_insert>

#ifdef DEBUG
	// dump_timeoutq();
#endif

}
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	08 95       	ret

0000128e <load_new_sensor>:

/* 
 * load a brand new sensor activity in the scheduler
 */
int load_new_sensor( int timeout, int repeat, BaseSensor *sensor_ptr, int otherinfo )
{
    128e:	cf 92       	push	r12
    1290:	df 92       	push	r13
    1292:	ef 92       	push	r14
    1294:	ff 92       	push	r15
    1296:	0f 93       	push	r16
    1298:	1f 93       	push	r17
    129a:	cf 93       	push	r28
    129c:	df 93       	push	r29
    129e:	6c 01       	movw	r12, r24
    12a0:	7b 01       	movw	r14, r22
    12a2:	8a 01       	movw	r16, r20
    12a4:	e9 01       	movw	r28, r18

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    12a6:	80 91 d5 08 	lds	r24, 0x08D5
    12aa:	90 91 d6 08 	lds	r25, 0x08D6
    12ae:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <ll_pop>
    12b2:	fc 01       	movw	r30, r24
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
    12b4:	00 97       	sbiw	r24, 0x00	; 0
    12b6:	b1 f0       	breq	.+44     	; 0x12e4 <load_new_sensor+0x56>
        return -1;
    ep->timeout = timeout;
    12b8:	d5 82       	std	Z+5, r13	; 0x05
    12ba:	c4 82       	std	Z+4, r12	; 0x04
    ep->repeat_interval = repeat;
    12bc:	f7 82       	std	Z+7, r15	; 0x07
    12be:	e6 82       	std	Z+6, r14	; 0x06
	ep->borrow_timeout = 0;
    12c0:	11 86       	std	Z+9, r1	; 0x09
    12c2:	10 86       	std	Z+8, r1	; 0x08
    ep->sp = sensor_ptr;
    12c4:	13 87       	std	Z+11, r17	; 0x0b
    12c6:	02 87       	std	Z+10, r16	; 0x0a
    ep->info = otherinfo;
    12c8:	d5 87       	std	Z+13, r29	; 0x0d
    12ca:	c4 87       	std	Z+12, r28	; 0x0c
    ep->cur_state = Ready;
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	86 87       	std	Z+14, r24	; 0x0e
    ep->run = run_next;
    12d0:	8d e7       	ldi	r24, 0x7D	; 125
    12d2:	99 e0       	ldi	r25, 0x09	; 9
    12d4:	90 8b       	std	Z+16, r25	; 0x10
    12d6:	87 87       	std	Z+15, r24	; 0x0f
    insert_timeoutq_event( ep );
    12d8:	cf 01       	movw	r24, r30
    12da:	0e 94 0e 09 	call	0x121c	; 0x121c <insert_timeoutq_event>
    return 0;
    12de:	80 e0       	ldi	r24, 0x00	; 0
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	02 c0       	rjmp	.+4      	; 0x12e8 <load_new_sensor+0x5a>

    /* assume we have available event in freelist */
    struct event *ep = ( struct event * ) LL_POP( freelist );
    /* if not return a -1 as an error code */
    if( ep == EV_NULL )
        return -1;
    12e4:	8f ef       	ldi	r24, 0xFF	; 255
    12e6:	9f ef       	ldi	r25, 0xFF	; 255
    ep->info = otherinfo;
    ep->cur_state = Ready;
    ep->run = run_next;
    insert_timeoutq_event( ep );
    return 0;
}
    12e8:	df 91       	pop	r29
    12ea:	cf 91       	pop	r28
    12ec:	1f 91       	pop	r17
    12ee:	0f 91       	pop	r16
    12f0:	ff 90       	pop	r15
    12f2:	ef 90       	pop	r14
    12f4:	df 90       	pop	r13
    12f6:	cf 90       	pop	r12
    12f8:	08 95       	ret

000012fa <run_next>:
#include "utilities/inc/llist.h"
// #include "Event.h"

/* run-next function */
static int run_next( struct event *p )
{
    12fa:	cf 93       	push	r28
    12fc:	df 93       	push	r29
    12fe:	ec 01       	movw	r28, r24
    int retNum;
    int data = 0;

    /* sanity check */
    if( p == EV_NULL )
    1300:	00 97       	sbiw	r24, 0x00	; 0
    1302:	59 f4       	brne	.+22     	; 0x131a <run_next+0x20>
    {
#ifdef DEBUG
        printf("Null Event Error !!!");
    1304:	8e ea       	ldi	r24, 0xAE	; 174
    1306:	92 e0       	ldi	r25, 0x02	; 2
    1308:	9f 93       	push	r25
    130a:	8f 93       	push	r24
    130c:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <printf>
#endif
        return 0;
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	70 c0       	rjmp	.+224    	; 0x13fa <run_next+0x100>
    }


#ifdef DEBUG
    printf("cur_state = %d\n", p->cur_state);
    131a:	8e 85       	ldd	r24, Y+14	; 0x0e
    131c:	1f 92       	push	r1
    131e:	8f 93       	push	r24
    1320:	83 ec       	ldi	r24, 0xC3	; 195
    1322:	92 e0       	ldi	r25, 0x02	; 2
    1324:	9f 93       	push	r25
    1326:	8f 93       	push	r24
    1328:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <printf>
#endif
    switch( p->cur_state )
    132c:	0f 90       	pop	r0
    132e:	0f 90       	pop	r0
    1330:	0f 90       	pop	r0
    1332:	0f 90       	pop	r0
    1334:	8e 85       	ldd	r24, Y+14	; 0x0e
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	51 f0       	breq	.+20     	; 0x134e <run_next+0x54>
    133a:	20 f0       	brcs	.+8      	; 0x1344 <run_next+0x4a>
    133c:	82 30       	cpi	r24, 0x02	; 2
    133e:	09 f4       	brne	.+2      	; 0x1342 <run_next+0x48>
    1340:	4a c0       	rjmp	.+148    	; 0x13d6 <run_next+0xdc>
    1342:	59 c0       	rjmp	.+178    	; 0x13f6 <run_next+0xfc>
    {
        /* New : not init yet */
        case New :
            // TODO : if retNum not valid go to Oops state
            // retNum = p->sp->vmt->Init();
            p->cur_state = Ready;
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	8e 87       	std	Y+14, r24	; 0x0e
#ifdef DEBUG
            //      printf("Something really wrong happens"\n);
#endif
            break;
    }
	return 0;
    1348:	80 e0       	ldi	r24, 0x00	; 0
    134a:	90 e0       	ldi	r25, 0x00	; 0
        /* New : not init yet */
        case New :
            // TODO : if retNum not valid go to Oops state
            // retNum = p->sp->vmt->Init();
            p->cur_state = Ready;
            break;
    134c:	56 c0       	rjmp	.+172    	; 0x13fa <run_next+0x100>
        /* Ready : ready to activate collection preprocess */
        case Ready :
			retNum = p->sp->vmt->PreProcessing(p->sp);
    134e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1350:	9b 85       	ldd	r25, Y+11	; 0x0b
    1352:	dc 01       	movw	r26, r24
    1354:	12 96       	adiw	r26, 0x02	; 2
    1356:	ed 91       	ld	r30, X+
    1358:	fc 91       	ld	r31, X
    135a:	13 97       	sbiw	r26, 0x03	; 3
    135c:	06 80       	ldd	r0, Z+6	; 0x06
    135e:	f7 81       	ldd	r31, Z+7	; 0x07
    1360:	e0 2d       	mov	r30, r0
    1362:	09 95       	icall
			if ( retNum == -1 )
    1364:	8f 3f       	cpi	r24, 0xFF	; 255
    1366:	bf ef       	ldi	r27, 0xFF	; 255
    1368:	9b 07       	cpc	r25, r27
    136a:	29 f4       	brne	.+10     	; 0x1376 <run_next+0x7c>
			{
				p->cur_state = Oops;
    136c:	84 e0       	ldi	r24, 0x04	; 4
    136e:	8e 87       	std	Y+14, r24	; 0x0e
#ifdef DEBUG
            //      printf("Something really wrong happens"\n);
#endif
            break;
    }
	return 0;
    1370:	80 e0       	ldi	r24, 0x00	; 0
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	42 c0       	rjmp	.+132    	; 0x13fa <run_next+0x100>
			retNum = p->sp->vmt->PreProcessing(p->sp);
			if ( retNum == -1 )
			{
				p->cur_state = Oops;
			}
			else if( retNum == 0 )
    1376:	00 97       	sbiw	r24, 0x00	; 0
    1378:	e1 f4       	brne	.+56     	; 0x13b2 <run_next+0xb8>
			{
				p->cur_state = Ready;
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	8e 87       	std	Y+14, r24	; 0x0e
				data = p->sp->vmt->Collect(p->sp);
    137e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1380:	9b 85       	ldd	r25, Y+11	; 0x0b
    1382:	dc 01       	movw	r26, r24
    1384:	12 96       	adiw	r26, 0x02	; 2
    1386:	ed 91       	ld	r30, X+
    1388:	fc 91       	ld	r31, X
    138a:	13 97       	sbiw	r26, 0x03	; 3
    138c:	00 84       	ldd	r0, Z+8	; 0x08
    138e:	f1 85       	ldd	r31, Z+9	; 0x09
    1390:	e0 2d       	mov	r30, r0
    1392:	09 95       	icall
#ifdef DEBUG
				printf("data : %d\n", data);
    1394:	9f 93       	push	r25
    1396:	8f 93       	push	r24
    1398:	83 ed       	ldi	r24, 0xD3	; 211
    139a:	92 e0       	ldi	r25, 0x02	; 2
    139c:	9f 93       	push	r25
    139e:	8f 93       	push	r24
    13a0:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <printf>
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
#ifdef DEBUG
            //      printf("Something really wrong happens"\n);
#endif
            break;
    }
	return 0;
    13ac:	80 e0       	ldi	r24, 0x00	; 0
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	24 c0       	rjmp	.+72     	; 0x13fa <run_next+0x100>
				printf("data : %d\n", data);
#endif
			}
			else
			{
				p->cur_state = Running;
    13b2:	22 e0       	ldi	r18, 0x02	; 2
    13b4:	2e 87       	std	Y+14, r18	; 0x0e
				p->timeout = retNum;
    13b6:	9d 83       	std	Y+5, r25	; 0x05
    13b8:	8c 83       	std	Y+4, r24	; 0x04
				p->borrow_timeout = retNum;
    13ba:	99 87       	std	Y+9, r25	; 0x09
    13bc:	88 87       	std	Y+8, r24	; 0x08
				LL_POP( timeoutq );
    13be:	80 91 cf 08 	lds	r24, 0x08CF
    13c2:	90 91 d0 08 	lds	r25, 0x08D0
    13c6:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <ll_pop>
				insert_timeoutq_event( p );
    13ca:	ce 01       	movw	r24, r28
    13cc:	0e 94 0e 09 	call	0x121c	; 0x121c <insert_timeoutq_event>
				return 1;
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	12 c0       	rjmp	.+36     	; 0x13fa <run_next+0x100>
            //
            break;
        /* Running : ready to pull data right away */
        case Running :
            //      data = p->sp->vmt->Collect();
            p->cur_state = Ready;
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	8e 87       	std	Y+14, r24	; 0x0e
			p->sp->vmt->Collect(p->sp);
    13da:	8a 85       	ldd	r24, Y+10	; 0x0a
    13dc:	9b 85       	ldd	r25, Y+11	; 0x0b
    13de:	dc 01       	movw	r26, r24
    13e0:	12 96       	adiw	r26, 0x02	; 2
    13e2:	ed 91       	ld	r30, X+
    13e4:	fc 91       	ld	r31, X
    13e6:	13 97       	sbiw	r26, 0x03	; 3
    13e8:	00 84       	ldd	r0, Z+8	; 0x08
    13ea:	f1 85       	ldd	r31, Z+9	; 0x09
    13ec:	e0 2d       	mov	r30, r0
    13ee:	09 95       	icall
#ifdef DEBUG
            //      printf("Something really wrong happens"\n);
#endif
            break;
    }
	return 0;
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	90 e0       	ldi	r25, 0x00	; 0
            p->cur_state = Ready;
			p->sp->vmt->Collect(p->sp);
#ifdef DEBUG
            //      printf("data : %d\n", data);
#endif
            break;
    13f4:	02 c0       	rjmp	.+4      	; 0x13fa <run_next+0x100>
#ifdef DEBUG
            //      printf("Something really wrong happens"\n);
#endif
            break;
    }
	return 0;
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	90 e0       	ldi	r25, 0x00	; 0
    
    // TODO : determine which event run next
    // may need to add a state machine in event
    // run function like:
    // p->sp->vmt->Init();
}
    13fa:	df 91       	pop	r29
    13fc:	cf 91       	pop	r28
    13fe:	08 95       	ret

00001400 <handle_timeoutq_event>:

/* 
 * handle the next one in timeout queue
 */
int handle_timeoutq_event( )
{
    1400:	cf 93       	push	r28
    1402:	df 93       	push	r29
	/* assume we get a valid one */
	struct event * ev = (struct event * )LL_TOP( timeoutq );
    1404:	80 91 cf 08 	lds	r24, 0x08CF
    1408:	90 91 d0 08 	lds	r25, 0x08D0
    140c:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <ll_first>
    1410:	ec 01       	movw	r28, r24
	if( EV_NULL == ev )
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	09 f4       	brne	.+2      	; 0x1418 <handle_timeoutq_event+0x18>
    1416:	3f c0       	rjmp	.+126    	; 0x1496 <handle_timeoutq_event+0x96>
    // TODO : add a last_interval var in event_timer.h
    // ev->timeout -= get_later_inerval();
	// if( ev->timeout <= 0 )
    
    /* sanity check */
    if( ev->sp == NULL )
    1418:	8a 85       	ldd	r24, Y+10	; 0x0a
    141a:	9b 85       	ldd	r25, Y+11	; 0x0b
    141c:	89 2b       	or	r24, r25
    141e:	f1 f1       	breq	.+124    	; 0x149c <handle_timeoutq_event+0x9c>
        return -1;

	/* retNum may need to be designed in other ways */
    int retNum = ev->run( ev );
    1420:	ef 85       	ldd	r30, Y+15	; 0x0f
    1422:	f8 89       	ldd	r31, Y+16	; 0x10
    1424:	ce 01       	movw	r24, r28
    1426:	09 95       	icall
	if( retNum == 1 )
    1428:	01 97       	sbiw	r24, 0x01	; 1
    142a:	39 f4       	brne	.+14     	; 0x143a <handle_timeoutq_event+0x3a>
	{
		set_timer(get_next_interval());
    142c:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <get_next_interval>
    1430:	0e 94 7c 07 	call	0xef8	; 0xef8 <set_timer>
		return 0;
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	33 c0       	rjmp	.+102    	; 0x14a0 <handle_timeoutq_event+0xa0>
	}
	
    // printf("running some function\n");
    LL_POP( timeoutq );
    143a:	80 91 cf 08 	lds	r24, 0x08CF
    143e:	90 91 d0 08 	lds	r25, 0x08D0
    1442:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <ll_pop>
    if( ev->repeat_interval != 0 )
    1446:	8e 81       	ldd	r24, Y+6	; 0x06
    1448:	9f 81       	ldd	r25, Y+7	; 0x07
    144a:	00 97       	sbiw	r24, 0x00	; 0
    144c:	b1 f0       	breq	.+44     	; 0x147a <handle_timeoutq_event+0x7a>
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
    144e:	28 85       	ldd	r18, Y+8	; 0x08
    1450:	39 85       	ldd	r19, Y+9	; 0x09
    1452:	ac 01       	movw	r20, r24
    1454:	42 1b       	sub	r20, r18
    1456:	53 0b       	sbc	r21, r19
    1458:	9a 01       	movw	r18, r20
    145a:	5d 83       	std	Y+5, r21	; 0x05
    145c:	4c 83       	std	Y+4, r20	; 0x04
		while( ev->timeout < 0 )
    145e:	55 23       	and	r21, r21
    1460:	34 f4       	brge	.+12     	; 0x146e <handle_timeoutq_event+0x6e>
		{
			ev->timeout += ev->repeat_interval;
    1462:	28 0f       	add	r18, r24
    1464:	39 1f       	adc	r19, r25
    // printf("running some function\n");
    LL_POP( timeoutq );
    if( ev->repeat_interval != 0 )
    {
		ev->timeout = ev->repeat_interval - ev->borrow_timeout ;
		while( ev->timeout < 0 )
    1466:	33 23       	and	r19, r19
    1468:	e4 f3       	brlt	.-8      	; 0x1462 <handle_timeoutq_event+0x62>
    146a:	3d 83       	std	Y+5, r19	; 0x05
    146c:	2c 83       	std	Y+4, r18	; 0x04
		{
			ev->timeout += ev->repeat_interval;
		}
		ev->borrow_timeout = 0;
    146e:	19 86       	std	Y+9, r1	; 0x09
    1470:	18 86       	std	Y+8, r1	; 0x08
        insert_timeoutq_event( ev );
    1472:	ce 01       	movw	r24, r28
    1474:	0e 94 0e 09 	call	0x121c	; 0x121c <insert_timeoutq_event>
    1478:	07 c0       	rjmp	.+14     	; 0x1488 <handle_timeoutq_event+0x88>
    }
    else
    {
        LL_PUSH( freelist, ev );
    147a:	be 01       	movw	r22, r28
    147c:	80 91 d5 08 	lds	r24, 0x08D5
    1480:	90 91 d6 08 	lds	r25, 0x08D6
    1484:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <ll_r_insert>
    }
	set_timer(get_next_interval());
    1488:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <get_next_interval>
    148c:	0e 94 7c 07 	call	0xef8	; 0xef8 <set_timer>
    /* TODO : update next event by calling set_timer(int) in Event_timer.h 
     * set_timer( get_next_interval() );
     */
    return 0;
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	05 c0       	rjmp	.+10     	; 0x14a0 <handle_timeoutq_event+0xa0>
int handle_timeoutq_event( )
{
	/* assume we get a valid one */
	struct event * ev = (struct event * )LL_TOP( timeoutq );
	if( EV_NULL == ev )
        return -1;
    1496:	8f ef       	ldi	r24, 0xFF	; 255
    1498:	9f ef       	ldi	r25, 0xFF	; 255
    149a:	02 c0       	rjmp	.+4      	; 0x14a0 <handle_timeoutq_event+0xa0>
    // ev->timeout -= get_later_inerval();
	// if( ev->timeout <= 0 )
    
    /* sanity check */
    if( ev->sp == NULL )
        return -1;
    149c:	8f ef       	ldi	r24, 0xFF	; 255
    149e:	9f ef       	ldi	r25, 0xFF	; 255
	set_timer(get_next_interval());
    /* TODO : update next event by calling set_timer(int) in Event_timer.h 
     * set_timer( get_next_interval() );
     */
    return 0;
}
    14a0:	df 91       	pop	r29
    14a2:	cf 91       	pop	r28
    14a4:	08 95       	ret

000014a6 <HAL_Init>:

/*************************************************************************//**
*****************************************************************************/
void HAL_Init(void)
{
  MCUSR = 0;
    14a6:	14 be       	out	0x34, r1	; 52
  wdt_disable();
    14a8:	88 e1       	ldi	r24, 0x18	; 24
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	f8 94       	cli
    14ae:	80 93 60 00 	sts	0x0060, r24
    14b2:	10 92 60 00 	sts	0x0060, r1
    14b6:	0f be       	out	0x3f, r0	; 63

  CLKPR = 1 << CLKPCE;
    14b8:	e1 e6       	ldi	r30, 0x61	; 97
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	80 e8       	ldi	r24, 0x80	; 128
    14be:	80 83       	st	Z, r24
  CLKPR = 0;
    14c0:	10 82       	st	Z, r1

  SYS_EnableInterrupts();
    14c2:	78 94       	sei

  HAL_TimerInit();
    14c4:	0e 94 65 0a 	call	0x14ca	; 0x14ca <HAL_TimerInit>
    14c8:	08 95       	ret

000014ca <HAL_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void HAL_TimerInit(void)
{
  halTimerIrqCount = 0;
    14ca:	10 92 d7 08 	sts	0x08D7, r1

  OCR4A = ((F_CPU / 1000ul) / TIMER_PRESCALER) * HAL_TIMER_INTERVAL;
    14ce:	80 e2       	ldi	r24, 0x20	; 32
    14d0:	9e e4       	ldi	r25, 0x4E	; 78
    14d2:	90 93 a9 00 	sts	0x00A9, r25
    14d6:	80 93 a8 00 	sts	0x00A8, r24
  TCCR4B = (1 << WGM12);              // CTC mode
    14da:	e1 ea       	ldi	r30, 0xA1	; 161
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	88 e0       	ldi	r24, 0x08	; 8
    14e0:	80 83       	st	Z, r24
  TCCR4B |= (1 << CS11);              // Prescaler 8
    14e2:	80 81       	ld	r24, Z
    14e4:	82 60       	ori	r24, 0x02	; 2
    14e6:	80 83       	st	Z, r24
  TIMSK4 |= (1 << OCIE4A);            // Enable TC4 interrupt
    14e8:	e2 e7       	ldi	r30, 0x72	; 114
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	82 60       	ori	r24, 0x02	; 2
    14f0:	80 83       	st	Z, r24
    14f2:	08 95       	ret

000014f4 <__vector_42>:
}

/*************************************************************************//**
*****************************************************************************/
ISR(TIMER4_COMPA_vect)
{
    14f4:	1f 92       	push	r1
    14f6:	0f 92       	push	r0
    14f8:	0f b6       	in	r0, 0x3f	; 63
    14fa:	0f 92       	push	r0
    14fc:	11 24       	eor	r1, r1
    14fe:	8f 93       	push	r24
  halTimerIrqCount++;
    1500:	80 91 d7 08 	lds	r24, 0x08D7
    1504:	8f 5f       	subi	r24, 0xFF	; 255
    1506:	80 93 d7 08 	sts	0x08D7, r24
}
    150a:	8f 91       	pop	r24
    150c:	0f 90       	pop	r0
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	0f 90       	pop	r0
    1512:	1f 90       	pop	r1
    1514:	18 95       	reti

00001516 <NWK_Init>:
/*************************************************************************//**
  @brief Initializes all network layer modules
*****************************************************************************/
void NWK_Init(void)
{
  nwkIb.nwkSeqNum = 0;
    1516:	10 92 dc 08 	sts	0x08DC, r1
  nwkIb.macSeqNum = 0;
    151a:	10 92 dd 08 	sts	0x08DD, r1
  nwkIb.addr = 0;
    151e:	10 92 d9 08 	sts	0x08D9, r1
    1522:	10 92 d8 08 	sts	0x08D8, r1
  nwkIb.lock = 0;
    1526:	10 92 ff 08 	sts	0x08FF, r1
    152a:	10 92 fe 08 	sts	0x08FE, r1
    152e:	ee ed       	ldi	r30, 0xDE	; 222
    1530:	f8 e0       	ldi	r31, 0x08	; 8
    1532:	8e ef       	ldi	r24, 0xFE	; 254
    1534:	98 e0       	ldi	r25, 0x08	; 8

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
    nwkIb.endpoint[i] = NULL;
    1536:	11 92       	st	Z+, r1
    1538:	11 92       	st	Z+, r1
  nwkIb.nwkSeqNum = 0;
  nwkIb.macSeqNum = 0;
  nwkIb.addr = 0;
  nwkIb.lock = 0;

  for (uint8_t i = 0; i < NWK_ENDPOINTS_AMOUNT; i++)
    153a:	e8 17       	cp	r30, r24
    153c:	f9 07       	cpc	r31, r25
    153e:	d9 f7       	brne	.-10     	; 0x1536 <NWK_Init+0x20>
    nwkIb.endpoint[i] = NULL;

  nwkTxInit();
    1540:	0e 94 9c 0b 	call	0x1738	; 0x1738 <nwkTxInit>
  nwkRxInit();
    1544:	0e 94 0f 0b 	call	0x161e	; 0x161e <nwkRxInit>
  nwkFrameInit();
    1548:	0e 94 b7 0a 	call	0x156e	; 0x156e <nwkFrameInit>
  nwkDataReqInit();
    154c:	0e 94 b2 0a 	call	0x1564	; 0x1564 <nwkDataReqInit>
    1550:	08 95       	ret

00001552 <NWK_OpenEndpoint>:
  @param[in] id Endpoint index (1-15)
  @param[in] handler Pointer to the callback function
*****************************************************************************/
void NWK_OpenEndpoint(uint8_t id, bool (*handler)(NWK_DataInd_t *ind))
{
  nwkIb.endpoint[id] = handler;
    1552:	e8 2f       	mov	r30, r24
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	ee 0f       	add	r30, r30
    1558:	ff 1f       	adc	r31, r31
    155a:	e2 52       	subi	r30, 0x22	; 34
    155c:	f7 4f       	sbci	r31, 0xF7	; 247
    155e:	71 83       	std	Z+1, r23	; 0x01
    1560:	60 83       	st	Z, r22
    1562:	08 95       	ret

00001564 <nwkDataReqInit>:
/*************************************************************************//**
  @brief Initializes the Data Request module
*****************************************************************************/
void nwkDataReqInit(void)
{
  nwkDataReqQueue = NULL;
    1564:	10 92 ad 04 	sts	0x04AD, r1
    1568:	10 92 ac 04 	sts	0x04AC, r1
    156c:	08 95       	ret

0000156e <nwkFrameInit>:
  @brief Initializes the Frame module
*****************************************************************************/
void nwkFrameInit(void)
{
  for (uint8_t i = 0; i < NWK_BUFFERS_AMOUNT; i++)
    nwkFrameFrames[i].state = NWK_FRAME_STATE_FREE;
    156e:	10 92 ae 04 	sts	0x04AE, r1
    1572:	10 92 37 05 	sts	0x0537, r1
    1576:	10 92 c0 05 	sts	0x05C0, r1
    157a:	10 92 49 06 	sts	0x0649, r1
    157e:	10 92 d2 06 	sts	0x06D2, r1
    1582:	08 95       	ret

00001584 <nwkFrameNext>:
  @param[in] frame Pointer to the current frame or @c NULL for the first frame
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    1584:	00 97       	sbiw	r24, 0x00	; 0
    1586:	41 f0       	breq	.+16     	; 0x1598 <nwkFrameNext+0x14>
    frame = nwkFrameFrames;
  else
    frame++;
    1588:	fc 01       	movw	r30, r24
    158a:	e7 57       	subi	r30, 0x77	; 119
    158c:	ff 4f       	sbci	r31, 0xFF	; 255

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    158e:	87 e0       	ldi	r24, 0x07	; 7
    1590:	eb 35       	cpi	r30, 0x5B	; 91
    1592:	f8 07       	cpc	r31, r24
    1594:	18 f0       	brcs	.+6      	; 0x159c <nwkFrameNext+0x18>
    1596:	12 c0       	rjmp	.+36     	; 0x15bc <nwkFrameNext+0x38>
  @return Next allocated frame or @c NULL if there are no more frames
*****************************************************************************/
NwkFrame_t *nwkFrameNext(NwkFrame_t *frame)
{
  if (NULL == frame)
    frame = nwkFrameFrames;
    1598:	ee ea       	ldi	r30, 0xAE	; 174
    159a:	f4 e0       	ldi	r31, 0x04	; 4
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    159c:	80 81       	ld	r24, Z
    159e:	88 23       	and	r24, r24
    15a0:	21 f0       	breq	.+8      	; 0x15aa <nwkFrameNext+0x26>
    15a2:	0f c0       	rjmp	.+30     	; 0x15c2 <nwkFrameNext+0x3e>
    15a4:	80 81       	ld	r24, Z
    15a6:	81 11       	cpse	r24, r1
    15a8:	0f c0       	rjmp	.+30     	; 0x15c8 <nwkFrameNext+0x44>
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    15aa:	e7 57       	subi	r30, 0x77	; 119
    15ac:	ff 4f       	sbci	r31, 0xFF	; 255
    15ae:	87 e0       	ldi	r24, 0x07	; 7
    15b0:	eb 35       	cpi	r30, 0x5B	; 91
    15b2:	f8 07       	cpc	r31, r24
    15b4:	b8 f3       	brcs	.-18     	; 0x15a4 <nwkFrameNext+0x20>
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
    15b6:	80 e0       	ldi	r24, 0x00	; 0
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	08 95       	ret
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	08 95       	ret
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
  {
    if (NWK_FRAME_STATE_FREE != frame->state)
    15c2:	8e 2f       	mov	r24, r30
    15c4:	9f 2f       	mov	r25, r31
    15c6:	08 95       	ret
  if (NULL == frame)
    frame = nwkFrameFrames;
  else
    frame++;

  for (; frame < &nwkFrameFrames[NWK_BUFFERS_AMOUNT]; frame++)
    15c8:	8e 2f       	mov	r24, r30
    15ca:	9f 2f       	mov	r25, r31
    if (NWK_FRAME_STATE_FREE != frame->state)
      return frame;
  }

  return NULL;
}
    15cc:	08 95       	ret

000015ce <nwkRxServiceDataInd>:
#ifdef NWK_ENABLE_SECURE_COMMANDS
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    15ce:	dc 01       	movw	r26, r24
    15d0:	19 96       	adiw	r26, 0x09	; 9
    15d2:	2c 91       	ld	r18, X
    15d4:	19 97       	sbiw	r26, 0x09	; 9
    15d6:	22 23       	and	r18, r18
    15d8:	51 f0       	breq	.+20     	; 0x15ee <nwkRxServiceDataInd+0x20>
    return false;

  switch (ind->data[0])
    15da:	17 96       	adiw	r26, 0x07	; 7
    15dc:	ed 91       	ld	r30, X+
    15de:	fc 91       	ld	r31, X
    15e0:	18 97       	sbiw	r26, 0x08	; 8
    15e2:	20 81       	ld	r18, Z
    15e4:	21 11       	cpse	r18, r1
    15e6:	05 c0       	rjmp	.+10     	; 0x15f2 <nwkRxServiceDataInd+0x24>
  {
    case NWK_COMMAND_ACK:
      return nwkTxAckReceived(ind);
    15e8:	0e 94 c9 0b 	call	0x1792	; 0x1792 <nwkTxAckReceived>
    15ec:	08 95       	ret
  if (0 == (ind->options & NWK_IND_OPT_SECURED))
    return false;
#endif

  if (ind->size < 1)
    return false;
    15ee:	80 e0       	ldi	r24, 0x00	; 0
    15f0:	08 95       	ret
    case NWK_COMMAND_ROUTE_REPLY:
      return nwkRouteDiscoveryReplyReceived(ind);
#endif

    default:
      return false;
    15f2:	80 e0       	ldi	r24, 0x00	; 0
  }
}
    15f4:	08 95       	ret

000015f6 <nwkRxDuplicateRejectionTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
    15f6:	ec e6       	ldi	r30, 0x6C	; 108
    15f8:	f7 e0       	ldi	r31, 0x07	; 7
    15fa:	2e e9       	ldi	r18, 0x9E	; 158
    15fc:	37 e0       	ldi	r19, 0x07	; 7
  bool restart = false;
    15fe:	50 e0       	ldi	r21, 0x00	; 0
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    1600:	61 e0       	ldi	r22, 0x01	; 1
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
  {
    if (nwkRxDuplicateRejectionTable[i].ttl)
    1602:	40 81       	ld	r20, Z
    1604:	44 23       	and	r20, r20
    1606:	19 f0       	breq	.+6      	; 0x160e <nwkRxDuplicateRejectionTimerHandler+0x18>
    {
      nwkRxDuplicateRejectionTable[i].ttl--;
    1608:	41 50       	subi	r20, 0x01	; 1
    160a:	40 83       	st	Z, r20
      restart = true;
    160c:	56 2f       	mov	r21, r22
    160e:	35 96       	adiw	r30, 0x05	; 5
*****************************************************************************/
static void nwkRxDuplicateRejectionTimerHandler(SYS_Timer_t *timer)
{
  bool restart = false;

  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    1610:	e2 17       	cp	r30, r18
    1612:	f3 07       	cpc	r31, r19
    1614:	b1 f7       	brne	.-20     	; 0x1602 <nwkRxDuplicateRejectionTimerHandler+0xc>
      nwkRxDuplicateRejectionTable[i].ttl--;
      restart = true;
    }
  }

  if (restart)
    1616:	51 11       	cpse	r21, r1
    SYS_TimerStart(timer);
    1618:	0e 94 a4 0c 	call	0x1948	; 0x1948 <SYS_TimerStart>
    161c:	08 95       	ret

0000161e <nwkRxInit>:

/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
    161e:	ec e6       	ldi	r30, 0x6C	; 108
    1620:	f7 e0       	ldi	r31, 0x07	; 7
    1622:	8e e9       	ldi	r24, 0x9E	; 158
    1624:	97 e0       	ldi	r25, 0x07	; 7
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    nwkRxDuplicateRejectionTable[i].ttl = 0;
    1626:	10 82       	st	Z, r1
    1628:	35 96       	adiw	r30, 0x05	; 5
/*************************************************************************//**
  @brief Initializes the Rx module
*****************************************************************************/
void nwkRxInit(void)
{
  for (uint8_t i = 0; i < NWK_DUPLICATE_REJECTION_TABLE_SIZE; i++)
    162a:	e8 17       	cp	r30, r24
    162c:	f9 07       	cpc	r31, r25
    162e:	d9 f7       	brne	.-10     	; 0x1626 <nwkRxInit+0x8>
    nwkRxDuplicateRejectionTable[i].ttl = 0;

  nwkRxDuplicateRejectionTimer.interval = NWK_RX_DUPLICATE_REJECTION_TIMER_INTERVAL;
    1630:	84 e6       	ldi	r24, 0x64	; 100
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	a0 e0       	ldi	r26, 0x00	; 0
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	80 93 61 07 	sts	0x0761, r24
    163c:	90 93 62 07 	sts	0x0762, r25
    1640:	a0 93 63 07 	sts	0x0763, r26
    1644:	b0 93 64 07 	sts	0x0764, r27
  nwkRxDuplicateRejectionTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1648:	10 92 65 07 	sts	0x0765, r1
  nwkRxDuplicateRejectionTimer.handler = nwkRxDuplicateRejectionTimerHandler;
    164c:	8b ef       	ldi	r24, 0xFB	; 251
    164e:	9a e0       	ldi	r25, 0x0A	; 10
    1650:	90 93 67 07 	sts	0x0767, r25
    1654:	80 93 66 07 	sts	0x0766, r24

  NWK_OpenEndpoint(NWK_SERVICE_ENDPOINT_ID, nwkRxServiceDataInd);
    1658:	67 ee       	ldi	r22, 0xE7	; 231
    165a:	7a e0       	ldi	r23, 0x0A	; 10
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	0e 94 a9 0a 	call	0x1552	; 0x1552 <NWK_OpenEndpoint>
    1662:	08 95       	ret

00001664 <nwkTxDelayTimerHandler>:
#endif

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
    1664:	ff 92       	push	r15
    1666:	0f 93       	push	r16
    1668:	1f 93       	push	r17
    166a:	cf 93       	push	r28
    166c:	df 93       	push	r29
    166e:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    1670:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    1676:	01 e0       	ldi	r16, 0x01	; 1

      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    1678:	0f 2e       	mov	r0, r31
    167a:	f3 e1       	ldi	r31, 0x13	; 19
    167c:	ff 2e       	mov	r15, r31
    167e:	f0 2d       	mov	r31, r0
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    1680:	13 c0       	rjmp	.+38     	; 0x16a8 <nwkTxDelayTimerHandler+0x44>
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    1682:	fc 01       	movw	r30, r24
    1684:	20 81       	ld	r18, Z
    1686:	21 31       	cpi	r18, 0x11	; 17
    1688:	79 f4       	brne	.+30     	; 0x16a8 <nwkTxDelayTimerHandler+0x44>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    168a:	ec 57       	subi	r30, 0x7C	; 124
    168c:	ff 4f       	sbci	r31, 0xFF	; 255
    168e:	20 81       	ld	r18, Z
    1690:	31 81       	ldd	r19, Z+1	; 0x01
    1692:	21 50       	subi	r18, 0x01	; 1
    1694:	31 09       	sbc	r19, r1
    1696:	31 83       	std	Z+1, r19	; 0x01
    1698:	20 83       	st	Z, r18
    169a:	23 2b       	or	r18, r19
    169c:	21 f4       	brne	.+8      	; 0x16a6 <nwkTxDelayTimerHandler+0x42>
        frame->state = NWK_TX_STATE_SEND;
    169e:	fc 01       	movw	r30, r24
    16a0:	f0 82       	st	Z, r15

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_DELAY == frame->state)
    {
      restart = true;
    16a2:	10 2f       	mov	r17, r16
    16a4:	01 c0       	rjmp	.+2      	; 0x16a8 <nwkTxDelayTimerHandler+0x44>
    16a6:	10 2f       	mov	r17, r16
static void nwkTxDelayTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    16a8:	0e 94 c2 0a 	call	0x1584	; 0x1584 <nwkFrameNext>
    16ac:	00 97       	sbiw	r24, 0x00	; 0
    16ae:	49 f7       	brne	.-46     	; 0x1682 <nwkTxDelayTimerHandler+0x1e>
      if (0 == --frame->tx.timeout)
        frame->state = NWK_TX_STATE_SEND;
    }
  }

  if (restart)
    16b0:	11 23       	and	r17, r17
    16b2:	19 f0       	breq	.+6      	; 0x16ba <nwkTxDelayTimerHandler+0x56>
    SYS_TimerStart(timer);
    16b4:	ce 01       	movw	r24, r28
    16b6:	0e 94 a4 0c 	call	0x1948	; 0x1948 <SYS_TimerStart>
}
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
    16be:	1f 91       	pop	r17
    16c0:	0f 91       	pop	r16
    16c2:	ff 90       	pop	r15
    16c4:	08 95       	ret

000016c6 <nwkTxAckWaitTimerHandler>:
}

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
    16c6:	ef 92       	push	r14
    16c8:	ff 92       	push	r15
    16ca:	0f 93       	push	r16
    16cc:	1f 93       	push	r17
    16ce:	cf 93       	push	r28
    16d0:	df 93       	push	r29
    16d2:	ec 01       	movw	r28, r24
  NwkFrame_t *frame = NULL;
  bool restart = false;
    16d4:	10 e0       	ldi	r17, 0x00	; 0

/*************************************************************************//**
*****************************************************************************/
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
    16d6:	80 e0       	ldi	r24, 0x00	; 0
    16d8:	90 e0       	ldi	r25, 0x00	; 0

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    16da:	01 e0       	ldi	r16, 0x01	; 1

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    16dc:	0f 2e       	mov	r0, r31
    16de:	f7 e1       	ldi	r31, 0x17	; 23
    16e0:	ef 2e       	mov	r14, r31
    16e2:	f0 2d       	mov	r31, r0
  frame->tx.status = status;
    16e4:	68 94       	set
    16e6:	ff 24       	eor	r15, r15
    16e8:	f4 f8       	bld	r15, 4
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    16ea:	16 c0       	rjmp	.+44     	; 0x1718 <nwkTxAckWaitTimerHandler+0x52>
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    16ec:	fc 01       	movw	r30, r24
    16ee:	20 81       	ld	r18, Z
    16f0:	26 31       	cpi	r18, 0x16	; 22
    16f2:	91 f4       	brne	.+36     	; 0x1718 <nwkTxAckWaitTimerHandler+0x52>
    {
      restart = true;

      if (0 == --frame->tx.timeout)
    16f4:	ec 57       	subi	r30, 0x7C	; 124
    16f6:	ff 4f       	sbci	r31, 0xFF	; 255
    16f8:	20 81       	ld	r18, Z
    16fa:	31 81       	ldd	r19, Z+1	; 0x01
    16fc:	21 50       	subi	r18, 0x01	; 1
    16fe:	31 09       	sbc	r19, r1
    1700:	31 83       	std	Z+1, r19	; 0x01
    1702:	20 83       	st	Z, r18
    1704:	23 2b       	or	r18, r19
    1706:	39 f4       	brne	.+14     	; 0x1716 <nwkTxAckWaitTimerHandler+0x50>

/*************************************************************************//**
*****************************************************************************/
void nwkTxConfirm(NwkFrame_t *frame, uint8_t status)
{
  frame->state = NWK_TX_STATE_CONFIRM;
    1708:	fc 01       	movw	r30, r24
    170a:	e0 82       	st	Z, r14
  frame->tx.status = status;
    170c:	ed 57       	subi	r30, 0x7D	; 125
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	f0 82       	st	Z, r15

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state)
    {
      restart = true;
    1712:	10 2f       	mov	r17, r16
    1714:	01 c0       	rjmp	.+2      	; 0x1718 <nwkTxAckWaitTimerHandler+0x52>
    1716:	10 2f       	mov	r17, r16
static void nwkTxAckWaitTimerHandler(SYS_Timer_t *timer)
{
  NwkFrame_t *frame = NULL;
  bool restart = false;

  while (NULL != (frame = nwkFrameNext(frame)))
    1718:	0e 94 c2 0a 	call	0x1584	; 0x1584 <nwkFrameNext>
    171c:	00 97       	sbiw	r24, 0x00	; 0
    171e:	31 f7       	brne	.-52     	; 0x16ec <nwkTxAckWaitTimerHandler+0x26>
      if (0 == --frame->tx.timeout)
        nwkTxConfirm(frame, NWK_NO_ACK_STATUS);
    }
  }

  if (restart)
    1720:	11 23       	and	r17, r17
    1722:	19 f0       	breq	.+6      	; 0x172a <nwkTxAckWaitTimerHandler+0x64>
    SYS_TimerStart(timer);
    1724:	ce 01       	movw	r24, r28
    1726:	0e 94 a4 0c 	call	0x1948	; 0x1948 <SYS_TimerStart>
}
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	1f 91       	pop	r17
    1730:	0f 91       	pop	r16
    1732:	ff 90       	pop	r15
    1734:	ef 90       	pop	r14
    1736:	08 95       	ret

00001738 <nwkTxInit>:
/*************************************************************************//**
  @brief Initializes the Tx module
*****************************************************************************/
void nwkTxInit(void)
{
  nwkTxPhyActiveFrame = NULL;
    1738:	10 92 b5 07 	sts	0x07B5, r1
    173c:	10 92 b4 07 	sts	0x07B4, r1

  nwkTxAckWaitTimer.interval = NWK_TX_ACK_WAIT_TIMER_INTERVAL;
    1740:	82 e3       	ldi	r24, 0x32	; 50
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	a0 e0       	ldi	r26, 0x00	; 0
    1746:	b0 e0       	ldi	r27, 0x00	; 0
    1748:	80 93 ad 07 	sts	0x07AD, r24
    174c:	90 93 ae 07 	sts	0x07AE, r25
    1750:	a0 93 af 07 	sts	0x07AF, r26
    1754:	b0 93 b0 07 	sts	0x07B0, r27
  nwkTxAckWaitTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1758:	10 92 b1 07 	sts	0x07B1, r1
  nwkTxAckWaitTimer.handler = nwkTxAckWaitTimerHandler;
    175c:	83 e6       	ldi	r24, 0x63	; 99
    175e:	9b e0       	ldi	r25, 0x0B	; 11
    1760:	90 93 b3 07 	sts	0x07B3, r25
    1764:	80 93 b2 07 	sts	0x07B2, r24

  nwkTxDelayTimer.interval = NWK_TX_DELAY_TIMER_INTERVAL;
    1768:	8a e0       	ldi	r24, 0x0A	; 10
    176a:	90 e0       	ldi	r25, 0x00	; 0
    176c:	a0 e0       	ldi	r26, 0x00	; 0
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	80 93 a0 07 	sts	0x07A0, r24
    1774:	90 93 a1 07 	sts	0x07A1, r25
    1778:	a0 93 a2 07 	sts	0x07A2, r26
    177c:	b0 93 a3 07 	sts	0x07A3, r27
  nwkTxDelayTimer.mode = SYS_TIMER_INTERVAL_MODE;
    1780:	10 92 a4 07 	sts	0x07A4, r1
  nwkTxDelayTimer.handler = nwkTxDelayTimerHandler;
    1784:	82 e3       	ldi	r24, 0x32	; 50
    1786:	9b e0       	ldi	r25, 0x0B	; 11
    1788:	90 93 a6 07 	sts	0x07A6, r25
    178c:	80 93 a5 07 	sts	0x07A5, r24
    1790:	08 95       	ret

00001792 <nwkTxAckReceived>:
}

/*************************************************************************//**
*****************************************************************************/
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
    1792:	cf 93       	push	r28
    1794:	df 93       	push	r29
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
    1796:	fc 01       	movw	r30, r24
    1798:	c7 81       	ldd	r28, Z+7	; 0x07
    179a:	d0 85       	ldd	r29, Z+8	; 0x08
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    179c:	81 85       	ldd	r24, Z+9	; 0x09
    179e:	83 30       	cpi	r24, 0x03	; 3
    17a0:	c9 f4       	brne	.+50     	; 0x17d4 <nwkTxAckReceived+0x42>
    17a2:	10 c0       	rjmp	.+32     	; 0x17c4 <nwkTxAckReceived+0x32>
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
  {
    if (NWK_TX_STATE_WAIT_ACK == frame->state && frame->header.nwkSeq == command->seq)
    17a4:	fc 01       	movw	r30, r24
    17a6:	20 81       	ld	r18, Z
    17a8:	26 31       	cpi	r18, 0x16	; 22
    17aa:	71 f4       	brne	.+28     	; 0x17c8 <nwkTxAckReceived+0x36>
    17ac:	34 85       	ldd	r19, Z+12	; 0x0c
    17ae:	29 81       	ldd	r18, Y+1	; 0x01
    17b0:	32 13       	cpse	r19, r18
    17b2:	0a c0       	rjmp	.+20     	; 0x17c8 <nwkTxAckReceived+0x36>
    {
      frame->state = NWK_TX_STATE_CONFIRM;
    17b4:	27 e1       	ldi	r18, 0x17	; 23
    17b6:	20 83       	st	Z, r18
      frame->tx.control = command->control;
    17b8:	2a 81       	ldd	r18, Y+2	; 0x02
    17ba:	ea 57       	subi	r30, 0x7A	; 122
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	20 83       	st	Z, r18
      return true;
    17c0:	81 e0       	ldi	r24, 0x01	; 1
    17c2:	09 c0       	rjmp	.+18     	; 0x17d6 <nwkTxAckReceived+0x44>
bool nwkTxAckReceived(NWK_DataInd_t *ind)
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    17c4:	80 e0       	ldi	r24, 0x00	; 0
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    return false;

  while (NULL != (frame = nwkFrameNext(frame)))
    17c8:	0e 94 c2 0a 	call	0x1584	; 0x1584 <nwkFrameNext>
    17cc:	00 97       	sbiw	r24, 0x00	; 0
    17ce:	51 f7       	brne	.-44     	; 0x17a4 <nwkTxAckReceived+0x12>
      frame->tx.control = command->control;
      return true;
    }
  }

  return false;
    17d0:	80 e0       	ldi	r24, 0x00	; 0
    17d2:	01 c0       	rjmp	.+2      	; 0x17d6 <nwkTxAckReceived+0x44>
{
  NwkCommandAck_t *command = (NwkCommandAck_t *)ind->data;
  NwkFrame_t *frame = NULL;

  if (sizeof(NwkCommandAck_t) != ind->size)
    return false;
    17d4:	80 e0       	ldi	r24, 0x00	; 0
      return true;
    }
  }

  return false;
}
    17d6:	df 91       	pop	r29
    17d8:	cf 91       	pop	r28
    17da:	08 95       	ret

000017dc <phyTrxSetState>:

/*************************************************************************//**
*****************************************************************************/
static void phyTrxSetState(uint8_t state)
{
  TRX_STATE_REG = TRX_CMD_FORCE_TRX_OFF;
    17dc:	93 e0       	ldi	r25, 0x03	; 3
    17de:	90 93 42 01 	sts	0x0142, r25
  while (TRX_STATUS_TRX_OFF != TRX_STATUS_REG_s.trxStatus);
    17e2:	e1 e4       	ldi	r30, 0x41	; 65
    17e4:	f1 e0       	ldi	r31, 0x01	; 1
    17e6:	90 81       	ld	r25, Z
    17e8:	9f 71       	andi	r25, 0x1F	; 31
    17ea:	98 30       	cpi	r25, 0x08	; 8
    17ec:	e1 f7       	brne	.-8      	; 0x17e6 <phyTrxSetState+0xa>

  TRX_STATE_REG = state;
    17ee:	80 93 42 01 	sts	0x0142, r24
  while (state != TRX_STATUS_REG_s.trxStatus);
    17f2:	e1 e4       	ldi	r30, 0x41	; 65
    17f4:	f1 e0       	ldi	r31, 0x01	; 1
    17f6:	90 81       	ld	r25, Z
    17f8:	9f 71       	andi	r25, 0x1F	; 31
    17fa:	98 13       	cpse	r25, r24
    17fc:	fc cf       	rjmp	.-8      	; 0x17f6 <phyTrxSetState+0x1a>
}
    17fe:	08 95       	ret

00001800 <PHY_Init>:

/*************************************************************************//**
*****************************************************************************/
void PHY_Init(void)
{
  TRXPR_REG_s.trxrst = 1;
    1800:	e9 e3       	ldi	r30, 0x39	; 57
    1802:	f1 e0       	ldi	r31, 0x01	; 1
    1804:	80 81       	ld	r24, Z
    1806:	81 60       	ori	r24, 0x01	; 1
    1808:	80 83       	st	Z, r24

  phyRxState = false;
    180a:	10 92 b7 07 	sts	0x07B7, r1
  phyBand = 0;
    180e:	10 92 b6 07 	sts	0x07B6, r1
  phyState = PHY_STATE_IDLE;
    1812:	81 e0       	ldi	r24, 0x01	; 1
    1814:	80 93 b8 07 	sts	0x07B8, r24

  phyTrxSetState(TRX_CMD_TRX_OFF);
    1818:	88 e0       	ldi	r24, 0x08	; 8
    181a:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <phyTrxSetState>

  TRX_RPC_REG = TRX_RPC_REG_VALUE;
    181e:	8b ee       	ldi	r24, 0xEB	; 235
    1820:	80 93 56 01 	sts	0x0156, r24

  TRX_CTRL_2_REG_s.rxSafeMode = 1;
    1824:	ec e4       	ldi	r30, 0x4C	; 76
    1826:	f1 e0       	ldi	r31, 0x01	; 1
    1828:	80 81       	ld	r24, Z
    182a:	80 68       	ori	r24, 0x80	; 128
    182c:	80 83       	st	Z, r24
    182e:	08 95       	ret

00001830 <SYS_Init>:

/*************************************************************************//**
*****************************************************************************/
void SYS_Init(void)
{
  HAL_Init();
    1830:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <HAL_Init>
  SYS_TimerInit();
    1834:	0e 94 85 0c 	call	0x190a	; 0x190a <SYS_TimerInit>
  PHY_Init();
    1838:	0e 94 00 0c 	call	0x1800	; 0x1800 <PHY_Init>
  NWK_Init();
    183c:	0e 94 8b 0a 	call	0x1516	; 0x1516 <NWK_Init>
    1840:	08 95       	ret

00001842 <placeTimer>:
}

/*************************************************************************//**
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
    1842:	0f 93       	push	r16
    1844:	1f 93       	push	r17
    1846:	cf 93       	push	r28
    1848:	df 93       	push	r29
    184a:	ec 01       	movw	r28, r24
  if (timers)
    184c:	80 91 b9 07 	lds	r24, 0x07B9
    1850:	90 91 ba 07 	lds	r25, 0x07BA
    1854:	00 97       	sbiw	r24, 0x00	; 0
    1856:	09 f4       	brne	.+2      	; 0x185a <placeTimer+0x18>
    1858:	45 c0       	rjmp	.+138    	; 0x18e4 <placeTimer+0xa2>
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;
    185a:	4e 81       	ldd	r20, Y+6	; 0x06
    185c:	5f 81       	ldd	r21, Y+7	; 0x07
    185e:	68 85       	ldd	r22, Y+8	; 0x08
    1860:	79 85       	ldd	r23, Y+9	; 0x09

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
    1862:	fc 01       	movw	r30, r24
    1864:	02 81       	ldd	r16, Z+2	; 0x02
    1866:	13 81       	ldd	r17, Z+3	; 0x03
    1868:	24 81       	ldd	r18, Z+4	; 0x04
    186a:	35 81       	ldd	r19, Z+5	; 0x05
    186c:	40 17       	cp	r20, r16
    186e:	51 07       	cpc	r21, r17
    1870:	62 07       	cpc	r22, r18
    1872:	73 07       	cpc	r23, r19
    1874:	c0 f4       	brcc	.+48     	; 0x18a6 <placeTimer+0x64>
    1876:	0b c0       	rjmp	.+22     	; 0x188e <placeTimer+0x4c>
    1878:	02 81       	ldd	r16, Z+2	; 0x02
    187a:	13 81       	ldd	r17, Z+3	; 0x03
    187c:	24 81       	ldd	r18, Z+4	; 0x04
    187e:	35 81       	ldd	r19, Z+5	; 0x05
    1880:	40 17       	cp	r20, r16
    1882:	51 07       	cpc	r21, r17
    1884:	62 07       	cpc	r22, r18
    1886:	73 07       	cpc	r23, r19
    1888:	28 f0       	brcs	.+10     	; 0x1894 <placeTimer+0x52>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    188a:	df 01       	movw	r26, r30
    188c:	0d c0       	rjmp	.+26     	; 0x18a8 <placeTimer+0x66>
    188e:	fc 01       	movw	r30, r24
*****************************************************************************/
static void placeTimer(SYS_Timer_t *timer)
{
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    1890:	a0 e0       	ldi	r26, 0x00	; 0
    1892:	b0 e0       	ldi	r27, 0x00	; 0

    for (SYS_Timer_t *t = timers; t; t = t->next)
    {
      if (timeout < t->timeout)
      {
         t->timeout -= timeout;
    1894:	04 1b       	sub	r16, r20
    1896:	15 0b       	sbc	r17, r21
    1898:	26 0b       	sbc	r18, r22
    189a:	37 0b       	sbc	r19, r23
    189c:	02 83       	std	Z+2, r16	; 0x02
    189e:	13 83       	std	Z+3, r17	; 0x03
    18a0:	24 83       	std	Z+4, r18	; 0x04
    18a2:	35 83       	std	Z+5, r19	; 0x05
         break;
    18a4:	0a c0       	rjmp	.+20     	; 0x18ba <placeTimer+0x78>
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    18a6:	dc 01       	movw	r26, r24
      {
         t->timeout -= timeout;
         break;
      }
      else
        timeout -= t->timeout;
    18a8:	40 1b       	sub	r20, r16
    18aa:	51 0b       	sbc	r21, r17
    18ac:	62 0b       	sbc	r22, r18
    18ae:	73 0b       	sbc	r23, r19
  if (timers)
  {
    SYS_Timer_t *prev = NULL;
    uint32_t timeout = timer->interval;

    for (SYS_Timer_t *t = timers; t; t = t->next)
    18b0:	ed 91       	ld	r30, X+
    18b2:	fc 91       	ld	r31, X
    18b4:	11 97       	sbiw	r26, 0x01	; 1
    18b6:	30 97       	sbiw	r30, 0x00	; 0
    18b8:	f9 f6       	brne	.-66     	; 0x1878 <placeTimer+0x36>
        timeout -= t->timeout;

      prev = t;
    }

    timer->timeout = timeout;
    18ba:	4a 83       	std	Y+2, r20	; 0x02
    18bc:	5b 83       	std	Y+3, r21	; 0x03
    18be:	6c 83       	std	Y+4, r22	; 0x04
    18c0:	7d 83       	std	Y+5, r23	; 0x05

    if (prev)
    18c2:	10 97       	sbiw	r26, 0x00	; 0
    18c4:	41 f0       	breq	.+16     	; 0x18d6 <placeTimer+0x94>
    {
      timer->next = prev->next;
    18c6:	8d 91       	ld	r24, X+
    18c8:	9c 91       	ld	r25, X
    18ca:	11 97       	sbiw	r26, 0x01	; 1
    18cc:	99 83       	std	Y+1, r25	; 0x01
    18ce:	88 83       	st	Y, r24
      prev->next = timer;
    18d0:	cd 93       	st	X+, r28
    18d2:	dc 93       	st	X, r29
    18d4:	15 c0       	rjmp	.+42     	; 0x1900 <placeTimer+0xbe>
    }
    else
    {
      timer->next = timers;
    18d6:	99 83       	std	Y+1, r25	; 0x01
    18d8:	88 83       	st	Y, r24
      timers = timer;
    18da:	d0 93 ba 07 	sts	0x07BA, r29
    18de:	c0 93 b9 07 	sts	0x07B9, r28
    18e2:	0e c0       	rjmp	.+28     	; 0x1900 <placeTimer+0xbe>
    }
  }
  else
  {
    timer->next = NULL;
    18e4:	19 82       	std	Y+1, r1	; 0x01
    18e6:	18 82       	st	Y, r1
    timer->timeout = timer->interval;
    18e8:	8e 81       	ldd	r24, Y+6	; 0x06
    18ea:	9f 81       	ldd	r25, Y+7	; 0x07
    18ec:	a8 85       	ldd	r26, Y+8	; 0x08
    18ee:	b9 85       	ldd	r27, Y+9	; 0x09
    18f0:	8a 83       	std	Y+2, r24	; 0x02
    18f2:	9b 83       	std	Y+3, r25	; 0x03
    18f4:	ac 83       	std	Y+4, r26	; 0x04
    18f6:	bd 83       	std	Y+5, r27	; 0x05
    timers = timer;
    18f8:	d0 93 ba 07 	sts	0x07BA, r29
    18fc:	c0 93 b9 07 	sts	0x07B9, r28
  }
}
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	1f 91       	pop	r17
    1906:	0f 91       	pop	r16
    1908:	08 95       	ret

0000190a <SYS_TimerInit>:

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerInit(void)
{
  timers = NULL;
    190a:	10 92 ba 07 	sts	0x07BA, r1
    190e:	10 92 b9 07 	sts	0x07B9, r1
    1912:	08 95       	ret

00001914 <SYS_TimerStarted>:

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    1914:	e0 91 b9 07 	lds	r30, 0x07B9
    1918:	f0 91 ba 07 	lds	r31, 0x07BA
    191c:	30 97       	sbiw	r30, 0x00	; 0
    191e:	71 f0       	breq	.+28     	; 0x193c <SYS_TimerStarted+0x28>
    if (t == timer)
    1920:	e8 17       	cp	r30, r24
    1922:	f9 07       	cpc	r31, r25
    1924:	21 f4       	brne	.+8      	; 0x192e <SYS_TimerStarted+0x1a>
    1926:	0c c0       	rjmp	.+24     	; 0x1940 <SYS_TimerStarted+0x2c>
    1928:	8e 17       	cp	r24, r30
    192a:	9f 07       	cpc	r25, r31
    192c:	59 f0       	breq	.+22     	; 0x1944 <SYS_TimerStarted+0x30>

/*************************************************************************//**
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    192e:	01 90       	ld	r0, Z+
    1930:	f0 81       	ld	r31, Z
    1932:	e0 2d       	mov	r30, r0
    1934:	30 97       	sbiw	r30, 0x00	; 0
    1936:	c1 f7       	brne	.-16     	; 0x1928 <SYS_TimerStarted+0x14>
    if (t == timer)
      return true;
  return false;
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	08 95       	ret
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	08 95       	ret
*****************************************************************************/
bool SYS_TimerStarted(SYS_Timer_t *timer)
{
  for (SYS_Timer_t *t = timers; t; t = t->next)
    if (t == timer)
      return true;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	08 95       	ret
    1944:	81 e0       	ldi	r24, 0x01	; 1
  return false;
}
    1946:	08 95       	ret

00001948 <SYS_TimerStart>:
}

/*************************************************************************//**
*****************************************************************************/
void SYS_TimerStart(SYS_Timer_t *timer)
{
    1948:	cf 93       	push	r28
    194a:	df 93       	push	r29
    194c:	ec 01       	movw	r28, r24
  if (!SYS_TimerStarted(timer))
    194e:	0e 94 8a 0c 	call	0x1914	; 0x1914 <SYS_TimerStarted>
    1952:	81 11       	cpse	r24, r1
    1954:	03 c0       	rjmp	.+6      	; 0x195c <SYS_TimerStart+0x14>
    placeTimer(timer);
    1956:	ce 01       	movw	r24, r28
    1958:	0e 94 21 0c 	call	0x1842	; 0x1842 <placeTimer>
}
    195c:	df 91       	pop	r29
    195e:	cf 91       	pop	r28
    1960:	08 95       	ret

00001962 <check_crc>:

/*************************************************************************//**
  @brief CRC check
  @return remainder
*****************************************************************************/
unsigned int check_crc(uint16_t message_from_sensor, uint8_t check_value_from_sensor) {
    1962:	0f 93       	push	r16
    1964:	1f 93       	push	r17
	uint32_t remainder = (uint32_t)message_from_sensor << 8; //Pad with 8 bits because we have to add in the check value
    1966:	a0 e0       	ldi	r26, 0x00	; 0
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	ba 2f       	mov	r27, r26
    196c:	a9 2f       	mov	r26, r25
    196e:	98 2f       	mov	r25, r24
    1970:	88 27       	eor	r24, r24
	remainder |= check_value_from_sensor; //Add on the check value
    1972:	86 2b       	or	r24, r22
    1974:	e7 e1       	ldi	r30, 0x17	; 23
    1976:	f0 e0       	ldi	r31, 0x00	; 0

	uint32_t divsor = (uint32_t)SHIFTED_DIVISOR;
    1978:	40 e0       	ldi	r20, 0x00	; 0
    197a:	50 e8       	ldi	r21, 0x80	; 128
    197c:	68 e9       	ldi	r22, 0x98	; 152
    197e:	70 e0       	ldi	r23, 0x00	; 0

	for (int i = 0 ; i < 16 ; i++) //Operate on only 16 positions of max 24. The remaining 8 are our remainder and should be zero when we're done.
	{
		if( remainder & (uint32_t)1<<(23 - i) ) //Check if there is a one in the left position
    1980:	8c 01       	movw	r16, r24
    1982:	9d 01       	movw	r18, r26
    1984:	0e 2e       	mov	r0, r30
    1986:	04 c0       	rjmp	.+8      	; 0x1990 <check_crc+0x2e>
    1988:	36 95       	lsr	r19
    198a:	27 95       	ror	r18
    198c:	17 95       	ror	r17
    198e:	07 95       	ror	r16
    1990:	0a 94       	dec	r0
    1992:	d2 f7       	brpl	.-12     	; 0x1988 <check_crc+0x26>
    1994:	00 ff       	sbrs	r16, 0
    1996:	04 c0       	rjmp	.+8      	; 0x19a0 <check_crc+0x3e>
		remainder ^= divsor;
    1998:	84 27       	eor	r24, r20
    199a:	95 27       	eor	r25, r21
    199c:	a6 27       	eor	r26, r22
    199e:	b7 27       	eor	r27, r23

		divsor >>= 1; //Rotate the divsor max 16 times so that we have 8 bits left of a remainder
    19a0:	76 95       	lsr	r23
    19a2:	67 95       	ror	r22
    19a4:	57 95       	ror	r21
    19a6:	47 95       	ror	r20
    19a8:	31 97       	sbiw	r30, 0x01	; 1
	uint32_t remainder = (uint32_t)message_from_sensor << 8; //Pad with 8 bits because we have to add in the check value
	remainder |= check_value_from_sensor; //Add on the check value

	uint32_t divsor = (uint32_t)SHIFTED_DIVISOR;

	for (int i = 0 ; i < 16 ; i++) //Operate on only 16 positions of max 24. The remaining 8 are our remainder and should be zero when we're done.
    19aa:	e7 30       	cpi	r30, 0x07	; 7
    19ac:	f1 05       	cpc	r31, r1
    19ae:	41 f7       	brne	.-48     	; 0x1980 <check_crc+0x1e>

		divsor >>= 1; //Rotate the divsor max 16 times so that we have 8 bits left of a remainder
	}

	return (unsigned int)remainder;
    19b0:	1f 91       	pop	r17
    19b2:	0f 91       	pop	r16
    19b4:	08 95       	ret

000019b6 <ll_first>:
 */
llobject_t *
ll_first(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
    19b6:	fc 01       	movw	r30, r24
    19b8:	22 81       	ldd	r18, Z+2	; 0x02
    19ba:	33 81       	ldd	r19, Z+3	; 0x03
    19bc:	28 17       	cp	r18, r24
    19be:	39 07       	cpc	r19, r25
    19c0:	19 f4       	brne	.+6      	; 0x19c8 <ll_first+0x12>
		return LL_NULL;
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	08 95       	ret
    }
    return lp->next;
    19c8:	82 2f       	mov	r24, r18
    19ca:	93 2f       	mov	r25, r19
}
    19cc:	08 95       	ret

000019ce <ll_r_insert>:
llobject_t *
ll_r_insert(ip, ep)
llobject_t *ip;
llobject_t *ep;
{
    llobject_t *tp = ip->next;
    19ce:	dc 01       	movw	r26, r24
    19d0:	12 96       	adiw	r26, 0x02	; 2
    19d2:	ed 91       	ld	r30, X+
    19d4:	fc 91       	ld	r31, X
    19d6:	13 97       	sbiw	r26, 0x03	; 3

    tp->prev = ep;
    19d8:	71 83       	std	Z+1, r23	; 0x01
    19da:	60 83       	st	Z, r22
    ep->next = tp;
    19dc:	db 01       	movw	r26, r22
    19de:	13 96       	adiw	r26, 0x03	; 3
    19e0:	fc 93       	st	X, r31
    19e2:	ee 93       	st	-X, r30
    19e4:	12 97       	sbiw	r26, 0x02	; 2
    ip->next = ep;
    19e6:	fc 01       	movw	r30, r24
    19e8:	73 83       	std	Z+3, r23	; 0x03
    19ea:	62 83       	std	Z+2, r22	; 0x02
    ep->prev = ip;
    19ec:	8d 93       	st	X+, r24
    19ee:	9c 93       	st	X, r25

    return ep;
}
    19f0:	cb 01       	movw	r24, r22
    19f2:	08 95       	ret

000019f4 <ll_detach>:
 */
llobject_t *
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    19f4:	fb 01       	movw	r30, r22
    if (LL_IS_EMPTY(lp) || lp == ep) {
    19f6:	dc 01       	movw	r26, r24
    19f8:	12 96       	adiw	r26, 0x02	; 2
    19fa:	2d 91       	ld	r18, X+
    19fc:	3c 91       	ld	r19, X
    19fe:	13 97       	sbiw	r26, 0x03	; 3
    1a00:	28 17       	cp	r18, r24
    1a02:	39 07       	cpc	r19, r25
    1a04:	a1 f0       	breq	.+40     	; 0x1a2e <ll_detach+0x3a>
    1a06:	86 17       	cp	r24, r22
    1a08:	97 07       	cpc	r25, r23
    1a0a:	a1 f0       	breq	.+40     	; 0x1a34 <ll_detach+0x40>
		return LL_NULL;
    }

    (ep->prev)->next = ep->next;
    1a0c:	a0 81       	ld	r26, Z
    1a0e:	b1 81       	ldd	r27, Z+1	; 0x01
    1a10:	82 81       	ldd	r24, Z+2	; 0x02
    1a12:	93 81       	ldd	r25, Z+3	; 0x03
    1a14:	13 96       	adiw	r26, 0x03	; 3
    1a16:	9c 93       	st	X, r25
    1a18:	8e 93       	st	-X, r24
    1a1a:	12 97       	sbiw	r26, 0x02	; 2
    (ep->next)->prev = ep->prev;
    1a1c:	a2 81       	ldd	r26, Z+2	; 0x02
    1a1e:	b3 81       	ldd	r27, Z+3	; 0x03
    1a20:	80 81       	ld	r24, Z
    1a22:	91 81       	ldd	r25, Z+1	; 0x01
    1a24:	8d 93       	st	X+, r24
    1a26:	9c 93       	st	X, r25

    return ep;
    1a28:	86 2f       	mov	r24, r22
    1a2a:	9f 2f       	mov	r25, r31
    1a2c:	08 95       	ret
ll_detach(lp, ep)
llobject_t *lp;
llobject_t *ep;
{
    if (LL_IS_EMPTY(lp) || lp == ep) {
		return LL_NULL;
    1a2e:	80 e0       	ldi	r24, 0x00	; 0
    1a30:	90 e0       	ldi	r25, 0x00	; 0
    1a32:	08 95       	ret
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	90 e0       	ldi	r25, 0x00	; 0

    (ep->prev)->next = ep->next;
    (ep->next)->prev = ep->prev;

    return ep;
}
    1a38:	08 95       	ret

00001a3a <ll_pop>:
 */
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
    1a3a:	fc 01       	movw	r30, r24
    1a3c:	62 81       	ldd	r22, Z+2	; 0x02
    1a3e:	73 81       	ldd	r23, Z+3	; 0x03
    1a40:	68 17       	cp	r22, r24
    1a42:	79 07       	cpc	r23, r25
    1a44:	19 f0       	breq	.+6      	; 0x1a4c <ll_pop+0x12>
		return LL_NULL;
    }
    return LL_DETACH(lp, lp->next);
    1a46:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <ll_detach>
    1a4a:	08 95       	ret
llobject_t *
ll_pop(lp)
llobject_t *lp;
{
    if (LL_IS_EMPTY(lp)) {
		return LL_NULL;
    1a4c:	80 e0       	ldi	r24, 0x00	; 0
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    }
    return LL_DETACH(lp, lp->next);
}
    1a50:	08 95       	ret

00001a52 <BMP280_FctnInit>:

BMP280_FctnTable BMP280_vmt = { BMP280_FctnInit, BMP280_init, BMP280_Configure, BMP280_PreProcessing, BMP280_Collect, BMP280_Error };

void BMP280_FctnInit(BMP280Sensor *this)
{
	this->inherited.vmt = &BMP280_vmt;
    1a52:	24 e1       	ldi	r18, 0x14	; 20
    1a54:	32 e0       	ldi	r19, 0x02	; 2
    1a56:	fc 01       	movw	r30, r24
    1a58:	33 83       	std	Z+3, r19	; 0x03
    1a5a:	22 83       	std	Z+2, r18	; 0x02
    1a5c:	08 95       	ret

00001a5e <BMP280_init>:
}

int BMP280_init(BMP280Sensor *this )
{
	this->inherited.test_num = 10;
    1a5e:	2a e0       	ldi	r18, 0x0A	; 10
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	fc 01       	movw	r30, r24
    1a64:	31 83       	std	Z+1, r19	; 0x01
    1a66:	20 83       	st	Z, r18
	return 0;
}
    1a68:	80 e0       	ldi	r24, 0x00	; 0
    1a6a:	90 e0       	ldi	r25, 0x00	; 0
    1a6c:	08 95       	ret

00001a6e <BMP280_Configure>:

int BMP280_Configure(BMP280Sensor *this )
{
	printf("BMP280_Configure\n");
    1a6e:	86 e6       	ldi	r24, 0x66	; 102
    1a70:	93 e0       	ldi	r25, 0x03	; 3
    1a72:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <puts>
	// virtual function
	return 0;
}
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	08 95       	ret

00001a7c <BMP280_Error>:
	return 0;
}

int BMP280_Error(BMP280Sensor *this )
{
	printf("BMP280_Error\n");
    1a7c:	87 e7       	ldi	r24, 0x77	; 119
    1a7e:	93 e0       	ldi	r25, 0x03	; 3
    1a80:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <puts>
	return 0;
}
    1a84:	80 e0       	ldi	r24, 0x00	; 0
    1a86:	90 e0       	ldi	r25, 0x00	; 0
    1a88:	08 95       	ret

00001a8a <BMP280_PreProcessing>:
	return 0;
}

int BMP280_PreProcessing(BMP280Sensor *this )
{
	printf("BMP280_PreProcessing\n");
    1a8a:	84 e8       	ldi	r24, 0x84	; 132
    1a8c:	93 e0       	ldi	r25, 0x03	; 3
    1a8e:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <puts>
	int Delay = BMP280_StartMeasurment();
    1a92:	0e 94 c8 02 	call	0x590	; 0x590 <BMP280_StartMeasurment>
	if( Delay == 0 )
    1a96:	81 11       	cpse	r24, r1
    1a98:	03 c0       	rjmp	.+6      	; 0x1aa0 <BMP280_PreProcessing+0x16>
		return 0;
    1a9a:	80 e0       	ldi	r24, 0x00	; 0
    1a9c:	90 e0       	ldi	r25, 0x00	; 0
    1a9e:	08 95       	ret
	else
		return 2;
    1aa0:	82 e0       	ldi	r24, 0x02	; 2
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
}
    1aa4:	08 95       	ret

00001aa6 <BMP280_Collect>:

int BMP280_Collect(BMP280Sensor *this )
{
    1aa6:	cf 93       	push	r28
    1aa8:	df 93       	push	r29
    1aaa:	cd b7       	in	r28, 0x3d	; 61
    1aac:	de b7       	in	r29, 0x3e	; 62
    1aae:	28 97       	sbiw	r28, 0x08	; 8
    1ab0:	0f b6       	in	r0, 0x3f	; 63
    1ab2:	f8 94       	cli
    1ab4:	de bf       	out	0x3e, r29	; 62
    1ab6:	0f be       	out	0x3f, r0	; 63
    1ab8:	cd bf       	out	0x3d, r28	; 61
	printf("BMP280_Collect\n");
    1aba:	89 e9       	ldi	r24, 0x99	; 153
    1abc:	93 e0       	ldi	r25, 0x03	; 3
    1abe:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <puts>
	double T, P;
	BMP280_GetTemperatureAndPressure(&T,&P);
    1ac2:	be 01       	movw	r22, r28
    1ac4:	6b 5f       	subi	r22, 0xFB	; 251
    1ac6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ac8:	ce 01       	movw	r24, r28
    1aca:	01 96       	adiw	r24, 0x01	; 1
    1acc:	0e 94 0a 06 	call	0xc14	; 0xc14 <BMP280_GetTemperatureAndPressure>
	printf("Temperature = %.3f\nHumility = %.3f\n",T,P);
    1ad0:	88 85       	ldd	r24, Y+8	; 0x08
    1ad2:	8f 93       	push	r24
    1ad4:	8f 81       	ldd	r24, Y+7	; 0x07
    1ad6:	8f 93       	push	r24
    1ad8:	8e 81       	ldd	r24, Y+6	; 0x06
    1ada:	8f 93       	push	r24
    1adc:	8d 81       	ldd	r24, Y+5	; 0x05
    1ade:	8f 93       	push	r24
    1ae0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae2:	8f 93       	push	r24
    1ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae6:	8f 93       	push	r24
    1ae8:	8a 81       	ldd	r24, Y+2	; 0x02
    1aea:	8f 93       	push	r24
    1aec:	89 81       	ldd	r24, Y+1	; 0x01
    1aee:	8f 93       	push	r24
    1af0:	88 ea       	ldi	r24, 0xA8	; 168
    1af2:	93 e0       	ldi	r25, 0x03	; 3
    1af4:	9f 93       	push	r25
    1af6:	8f 93       	push	r24
    1af8:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <printf>
	return 0;
    1afc:	0f b6       	in	r0, 0x3f	; 63
    1afe:	f8 94       	cli
    1b00:	de bf       	out	0x3e, r29	; 62
    1b02:	0f be       	out	0x3f, r0	; 63
    1b04:	cd bf       	out	0x3d, r28	; 61
}
    1b06:	80 e0       	ldi	r24, 0x00	; 0
    1b08:	90 e0       	ldi	r25, 0x00	; 0
    1b0a:	28 96       	adiw	r28, 0x08	; 8
    1b0c:	0f b6       	in	r0, 0x3f	; 63
    1b0e:	f8 94       	cli
    1b10:	de bf       	out	0x3e, r29	; 62
    1b12:	0f be       	out	0x3f, r0	; 63
    1b14:	cd bf       	out	0x3d, r28	; 61
    1b16:	df 91       	pop	r29
    1b18:	cf 91       	pop	r28
    1b1a:	08 95       	ret

00001b1c <New_BMP280_Sensor>:
	printf("BMP280_Error\n");
	return 0;
}

BMP280Sensor* New_BMP280_Sensor( int num)
{
    1b1c:	cf 93       	push	r28
    1b1e:	df 93       	push	r29
    1b20:	ec 01       	movw	r28, r24
	BMP280Sensor *p = malloc(sizeof(BMP280Sensor));
    1b22:	84 e0       	ldi	r24, 0x04	; 4
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	0e 94 54 14 	call	0x28a8	; 0x28a8 <malloc>
	p->inherited.test_num = num;
    1b2a:	fc 01       	movw	r30, r24
    1b2c:	d1 83       	std	Z+1, r29	; 0x01
    1b2e:	c0 83       	st	Z, r28
	return p;
    1b30:	df 91       	pop	r29
    1b32:	cf 91       	pop	r28
    1b34:	08 95       	ret

00001b36 <Si7020_FctnInit>:

Si7020_FctnTable Si7020_vmt = { Si7020_FctnInit, Si7020_Init, Si7020_Configure, Si7020_PreProcessing, Si7020_Collect, Si7020_Error };

void Si7020_FctnInit(Si7020Sensor *this)
{
	this->inherited.vmt = &Si7020_vmt;
    1b36:	20 e2       	ldi	r18, 0x20	; 32
    1b38:	32 e0       	ldi	r19, 0x02	; 2
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	33 83       	std	Z+3, r19	; 0x03
    1b3e:	22 83       	std	Z+2, r18	; 0x02
    1b40:	08 95       	ret

00001b42 <Si7020_Init>:
}

int Si7020_Init(Si7020Sensor *this )
{
	this->inherited.test_num = 10;
    1b42:	2a e0       	ldi	r18, 0x0A	; 10
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	fc 01       	movw	r30, r24
    1b48:	31 83       	std	Z+1, r19	; 0x01
    1b4a:	20 83       	st	Z, r18
	return 0;
}
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	08 95       	ret

00001b52 <Si7020_Configure>:

int Si7020_Configure(Si7020Sensor *this )
{
	printf("Si7020_Configure\n");
    1b52:	8c ec       	ldi	r24, 0xCC	; 204
    1b54:	93 e0       	ldi	r25, 0x03	; 3
    1b56:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <puts>
	// virtual function
	return 0;
}
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	08 95       	ret

00001b60 <Si7020_Error>:
	return 0;
}

int Si7020_Error(Si7020Sensor *this )
{
	printf("Si7020_Error\n");
    1b60:	8d ed       	ldi	r24, 0xDD	; 221
    1b62:	93 e0       	ldi	r25, 0x03	; 3
    1b64:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <puts>
	return 0;
}
    1b68:	80 e0       	ldi	r24, 0x00	; 0
    1b6a:	90 e0       	ldi	r25, 0x00	; 0
    1b6c:	08 95       	ret

00001b6e <Si7020_PreProcessing>:
	// virtual function
	return 0;
}

int Si7020_PreProcessing(Si7020Sensor *this )
{
    1b6e:	cf 93       	push	r28
    1b70:	df 93       	push	r29
    1b72:	ec 01       	movw	r28, r24
	printf("Si7020_PreProcessing\n");
    1b74:	8a ee       	ldi	r24, 0xEA	; 234
    1b76:	93 e0       	ldi	r25, 0x03	; 3
    1b78:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <puts>
	this->dummy = Si7020_readTemperature(this->temperature_data,3);
    1b7c:	63 e0       	ldi	r22, 0x03	; 3
    1b7e:	ce 01       	movw	r24, r28
    1b80:	06 96       	adiw	r24, 0x06	; 6
    1b82:	0e 94 a3 06 	call	0xd46	; 0xd46 <Si7020_readTemperature>
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	9d 83       	std	Y+5, r25	; 0x05
    1b8a:	8c 83       	std	Y+4, r24	; 0x04
	this->dummy = Si7020_readHumidity(this->humility_data,3); 
    1b8c:	63 e0       	ldi	r22, 0x03	; 3
    1b8e:	ce 01       	movw	r24, r28
    1b90:	09 96       	adiw	r24, 0x09	; 9
    1b92:	0e 94 52 06 	call	0xca4	; 0xca4 <Si7020_readHumidity>
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	9d 83       	std	Y+5, r25	; 0x05
    1b9a:	8c 83       	std	Y+4, r24	; 0x04
	return 0;
}
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	90 e0       	ldi	r25, 0x00	; 0
    1ba0:	df 91       	pop	r29
    1ba2:	cf 91       	pop	r28
    1ba4:	08 95       	ret

00001ba6 <Si7020_Collect>:

int Si7020_Collect(Si7020Sensor *this )
{
    1ba6:	ef 92       	push	r14
    1ba8:	ff 92       	push	r15
    1baa:	0f 93       	push	r16
    1bac:	1f 93       	push	r17
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	ec 01       	movw	r28, r24
	printf("Si7020_Collect\n");
    1bb4:	8f ef       	ldi	r24, 0xFF	; 255
    1bb6:	93 e0       	ldi	r25, 0x03	; 3
    1bb8:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <puts>
	float T = Si7020_calTemperature(this->temperature_data);
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	06 96       	adiw	r24, 0x06	; 6
    1bc0:	0e 94 d5 06 	call	0xdaa	; 0xdaa <Si7020_calTemperature>
    1bc4:	16 2f       	mov	r17, r22
    1bc6:	07 2f       	mov	r16, r23
    1bc8:	f8 2e       	mov	r15, r24
    1bca:	e9 2e       	mov	r14, r25
	float H = Si7020_calHumidity(this->humility_data);
    1bcc:	ce 01       	movw	r24, r28
    1bce:	09 96       	adiw	r24, 0x09	; 9
    1bd0:	0e 94 84 06 	call	0xd08	; 0xd08 <Si7020_calHumidity>
	printf("Temperature = %.3f\nHumility = %.3f\n",T,H);
    1bd4:	9f 93       	push	r25
    1bd6:	8f 93       	push	r24
    1bd8:	7f 93       	push	r23
    1bda:	6f 93       	push	r22
    1bdc:	ef 92       	push	r14
    1bde:	ff 92       	push	r15
    1be0:	0f 93       	push	r16
    1be2:	1f 93       	push	r17
    1be4:	88 ea       	ldi	r24, 0xA8	; 168
    1be6:	93 e0       	ldi	r25, 0x03	; 3
    1be8:	9f 93       	push	r25
    1bea:	8f 93       	push	r24
    1bec:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <printf>
	return 0;
    1bf0:	8d b7       	in	r24, 0x3d	; 61
    1bf2:	9e b7       	in	r25, 0x3e	; 62
    1bf4:	0a 96       	adiw	r24, 0x0a	; 10
    1bf6:	0f b6       	in	r0, 0x3f	; 63
    1bf8:	f8 94       	cli
    1bfa:	9e bf       	out	0x3e, r25	; 62
    1bfc:	0f be       	out	0x3f, r0	; 63
    1bfe:	8d bf       	out	0x3d, r24	; 61
}
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	df 91       	pop	r29
    1c06:	cf 91       	pop	r28
    1c08:	1f 91       	pop	r17
    1c0a:	0f 91       	pop	r16
    1c0c:	ff 90       	pop	r15
    1c0e:	ef 90       	pop	r14
    1c10:	08 95       	ret

00001c12 <New_Si7020_Sensor>:
	printf("Si7020_Error\n");
	return 0;
}

Si7020Sensor* New_Si7020_Sensor( int num)
{
    1c12:	cf 93       	push	r28
    1c14:	df 93       	push	r29
    1c16:	ec 01       	movw	r28, r24
	Si7020Sensor *p = malloc(sizeof(Si7020Sensor));
    1c18:	8c e0       	ldi	r24, 0x0C	; 12
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	0e 94 54 14 	call	0x28a8	; 0x28a8 <malloc>
    1c20:	fc 01       	movw	r30, r24
	p->inherited.test_num = num;
    1c22:	d1 83       	std	Z+1, r29	; 0x01
    1c24:	c0 83       	st	Z, r28
	for(int i = 0; i < 3; ++i )
	{
		p->temperature_data[i] = 0;
    1c26:	16 82       	std	Z+6, r1	; 0x06
		p->humility_data[i] = 0;
    1c28:	11 86       	std	Z+9, r1	; 0x09
{
	Si7020Sensor *p = malloc(sizeof(Si7020Sensor));
	p->inherited.test_num = num;
	for(int i = 0; i < 3; ++i )
	{
		p->temperature_data[i] = 0;
    1c2a:	17 82       	std	Z+7, r1	; 0x07
		p->humility_data[i] = 0;
    1c2c:	12 86       	std	Z+10, r1	; 0x0a
{
	Si7020Sensor *p = malloc(sizeof(Si7020Sensor));
	p->inherited.test_num = num;
	for(int i = 0; i < 3; ++i )
	{
		p->temperature_data[i] = 0;
    1c2e:	10 86       	std	Z+8, r1	; 0x08
		p->humility_data[i] = 0;
    1c30:	13 86       	std	Z+11, r1	; 0x0b
	}
	return p;
    1c32:	df 91       	pop	r29
    1c34:	cf 91       	pop	r28
    1c36:	08 95       	ret

00001c38 <Temperature_ADC_FctnInit>:

Temperature_ADC_FctnTable Temperature_ADC_vmt = { Temperature_ADC_FctnInit, Temperature_ADC_Init, Temperature_ADC_Configure, Temperature_ADC_PreProcessing, Temperature_ADC_Collect, Temperature_ADC_Error };

void Temperature_ADC_FctnInit(Temperature_ADCSensor *this)
{
	this->inherited.vmt = &Temperature_ADC_vmt;
    1c38:	2c e2       	ldi	r18, 0x2C	; 44
    1c3a:	32 e0       	ldi	r19, 0x02	; 2
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	33 83       	std	Z+3, r19	; 0x03
    1c40:	22 83       	std	Z+2, r18	; 0x02
    1c42:	08 95       	ret

00001c44 <Temperature_ADC_Init>:
}

int Temperature_ADC_Init(Temperature_ADCSensor *this )
{
	this->inherited.test_num = 10;
    1c44:	2a e0       	ldi	r18, 0x0A	; 10
    1c46:	30 e0       	ldi	r19, 0x00	; 0
    1c48:	fc 01       	movw	r30, r24
    1c4a:	31 83       	std	Z+1, r19	; 0x01
    1c4c:	20 83       	st	Z, r18
	return 0;
}
    1c4e:	80 e0       	ldi	r24, 0x00	; 0
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	08 95       	ret

00001c54 <Temperature_ADC_Configure>:

int Temperature_ADC_Configure(Temperature_ADCSensor *this )
{
	printf("Temperature_ADC_Configure\n");
    1c54:	8e e0       	ldi	r24, 0x0E	; 14
    1c56:	94 e0       	ldi	r25, 0x04	; 4
    1c58:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <puts>
	// virtual function
	return 0;
}
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	08 95       	ret

00001c62 <Temperature_ADC_PreProcessing>:

int Temperature_ADC_PreProcessing(Temperature_ADCSensor *this )
{
	printf("Temperature_ADC_PreProcessing\n");
    1c62:	88 e2       	ldi	r24, 0x28	; 40
    1c64:	94 e0       	ldi	r25, 0x04	; 4
    1c66:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <puts>
	return 0;
}
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	08 95       	ret

00001c70 <Temperature_ADC_Error>:
	return 0;
}

int Temperature_ADC_Error(Temperature_ADCSensor *this )
{
	printf("Temperature_ADC_Error\n");
    1c70:	86 e4       	ldi	r24, 0x46	; 70
    1c72:	94 e0       	ldi	r25, 0x04	; 4
    1c74:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <puts>
	return 0;
}
    1c78:	80 e0       	ldi	r24, 0x00	; 0
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	08 95       	ret

00001c7e <Temperature_ADC_Collect>:
	return 0;
}

int Temperature_ADC_Collect(Temperature_ADCSensor *this )
{
	printf("Temperature_ADC_Collect\n");
    1c7e:	8c e5       	ldi	r24, 0x5C	; 92
    1c80:	94 e0       	ldi	r25, 0x04	; 4
    1c82:	0e 94 af 16 	call	0x2d5e	; 0x2d5e <puts>
	float T = ADC_DieTemp();
    1c86:	0e 94 06 07 	call	0xe0c	; 0xe0c <ADC_DieTemp>
	printf("Temperature = %.3f\n",T);
    1c8a:	9f 93       	push	r25
    1c8c:	8f 93       	push	r24
    1c8e:	7f 93       	push	r23
    1c90:	6f 93       	push	r22
    1c92:	84 e7       	ldi	r24, 0x74	; 116
    1c94:	94 e0       	ldi	r25, 0x04	; 4
    1c96:	9f 93       	push	r25
    1c98:	8f 93       	push	r24
    1c9a:	0e 94 9b 16 	call	0x2d36	; 0x2d36 <printf>
	return 0;
    1c9e:	0f 90       	pop	r0
    1ca0:	0f 90       	pop	r0
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
}
    1caa:	80 e0       	ldi	r24, 0x00	; 0
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	08 95       	ret

00001cb0 <New_Temperature_ADC_Sensor>:
	printf("Temperature_ADC_Error\n");
	return 0;
}

Temperature_ADCSensor* New_Temperature_ADC_Sensor( int num)
{
    1cb0:	cf 93       	push	r28
    1cb2:	df 93       	push	r29
    1cb4:	ec 01       	movw	r28, r24
	Temperature_ADCSensor *p = malloc(sizeof(Temperature_ADCSensor));
    1cb6:	84 e0       	ldi	r24, 0x04	; 4
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	0e 94 54 14 	call	0x28a8	; 0x28a8 <malloc>
	p->inherited.test_num = num;
    1cbe:	fc 01       	movw	r30, r24
    1cc0:	d1 83       	std	Z+1, r29	; 0x01
    1cc2:	c0 83       	st	Z, r28
	return p;
    1cc4:	df 91       	pop	r29
    1cc6:	cf 91       	pop	r28
    1cc8:	08 95       	ret

00001cca <__subsf3>:
    1cca:	50 58       	subi	r21, 0x80	; 128

00001ccc <__addsf3>:
    1ccc:	bb 27       	eor	r27, r27
    1cce:	aa 27       	eor	r26, r26
    1cd0:	0e d0       	rcall	.+28     	; 0x1cee <__addsf3x>
    1cd2:	75 c1       	rjmp	.+746    	; 0x1fbe <__fp_round>
    1cd4:	66 d1       	rcall	.+716    	; 0x1fa2 <__fp_pscA>
    1cd6:	30 f0       	brcs	.+12     	; 0x1ce4 <__addsf3+0x18>
    1cd8:	6b d1       	rcall	.+726    	; 0x1fb0 <__fp_pscB>
    1cda:	20 f0       	brcs	.+8      	; 0x1ce4 <__addsf3+0x18>
    1cdc:	31 f4       	brne	.+12     	; 0x1cea <__addsf3+0x1e>
    1cde:	9f 3f       	cpi	r25, 0xFF	; 255
    1ce0:	11 f4       	brne	.+4      	; 0x1ce6 <__addsf3+0x1a>
    1ce2:	1e f4       	brtc	.+6      	; 0x1cea <__addsf3+0x1e>
    1ce4:	5b c1       	rjmp	.+694    	; 0x1f9c <__fp_nan>
    1ce6:	0e f4       	brtc	.+2      	; 0x1cea <__addsf3+0x1e>
    1ce8:	e0 95       	com	r30
    1cea:	e7 fb       	bst	r30, 7
    1cec:	51 c1       	rjmp	.+674    	; 0x1f90 <__fp_inf>

00001cee <__addsf3x>:
    1cee:	e9 2f       	mov	r30, r25
    1cf0:	77 d1       	rcall	.+750    	; 0x1fe0 <__fp_split3>
    1cf2:	80 f3       	brcs	.-32     	; 0x1cd4 <__addsf3+0x8>
    1cf4:	ba 17       	cp	r27, r26
    1cf6:	62 07       	cpc	r22, r18
    1cf8:	73 07       	cpc	r23, r19
    1cfa:	84 07       	cpc	r24, r20
    1cfc:	95 07       	cpc	r25, r21
    1cfe:	18 f0       	brcs	.+6      	; 0x1d06 <__addsf3x+0x18>
    1d00:	71 f4       	brne	.+28     	; 0x1d1e <__addsf3x+0x30>
    1d02:	9e f5       	brtc	.+102    	; 0x1d6a <__addsf3x+0x7c>
    1d04:	8f c1       	rjmp	.+798    	; 0x2024 <__fp_zero>
    1d06:	0e f4       	brtc	.+2      	; 0x1d0a <__addsf3x+0x1c>
    1d08:	e0 95       	com	r30
    1d0a:	0b 2e       	mov	r0, r27
    1d0c:	ba 2f       	mov	r27, r26
    1d0e:	a0 2d       	mov	r26, r0
    1d10:	0b 01       	movw	r0, r22
    1d12:	b9 01       	movw	r22, r18
    1d14:	90 01       	movw	r18, r0
    1d16:	0c 01       	movw	r0, r24
    1d18:	ca 01       	movw	r24, r20
    1d1a:	a0 01       	movw	r20, r0
    1d1c:	11 24       	eor	r1, r1
    1d1e:	ff 27       	eor	r31, r31
    1d20:	59 1b       	sub	r21, r25
    1d22:	99 f0       	breq	.+38     	; 0x1d4a <__addsf3x+0x5c>
    1d24:	59 3f       	cpi	r21, 0xF9	; 249
    1d26:	50 f4       	brcc	.+20     	; 0x1d3c <__addsf3x+0x4e>
    1d28:	50 3e       	cpi	r21, 0xE0	; 224
    1d2a:	68 f1       	brcs	.+90     	; 0x1d86 <__addsf3x+0x98>
    1d2c:	1a 16       	cp	r1, r26
    1d2e:	f0 40       	sbci	r31, 0x00	; 0
    1d30:	a2 2f       	mov	r26, r18
    1d32:	23 2f       	mov	r18, r19
    1d34:	34 2f       	mov	r19, r20
    1d36:	44 27       	eor	r20, r20
    1d38:	58 5f       	subi	r21, 0xF8	; 248
    1d3a:	f3 cf       	rjmp	.-26     	; 0x1d22 <__addsf3x+0x34>
    1d3c:	46 95       	lsr	r20
    1d3e:	37 95       	ror	r19
    1d40:	27 95       	ror	r18
    1d42:	a7 95       	ror	r26
    1d44:	f0 40       	sbci	r31, 0x00	; 0
    1d46:	53 95       	inc	r21
    1d48:	c9 f7       	brne	.-14     	; 0x1d3c <__addsf3x+0x4e>
    1d4a:	7e f4       	brtc	.+30     	; 0x1d6a <__addsf3x+0x7c>
    1d4c:	1f 16       	cp	r1, r31
    1d4e:	ba 0b       	sbc	r27, r26
    1d50:	62 0b       	sbc	r22, r18
    1d52:	73 0b       	sbc	r23, r19
    1d54:	84 0b       	sbc	r24, r20
    1d56:	ba f0       	brmi	.+46     	; 0x1d86 <__addsf3x+0x98>
    1d58:	91 50       	subi	r25, 0x01	; 1
    1d5a:	a1 f0       	breq	.+40     	; 0x1d84 <__addsf3x+0x96>
    1d5c:	ff 0f       	add	r31, r31
    1d5e:	bb 1f       	adc	r27, r27
    1d60:	66 1f       	adc	r22, r22
    1d62:	77 1f       	adc	r23, r23
    1d64:	88 1f       	adc	r24, r24
    1d66:	c2 f7       	brpl	.-16     	; 0x1d58 <__addsf3x+0x6a>
    1d68:	0e c0       	rjmp	.+28     	; 0x1d86 <__addsf3x+0x98>
    1d6a:	ba 0f       	add	r27, r26
    1d6c:	62 1f       	adc	r22, r18
    1d6e:	73 1f       	adc	r23, r19
    1d70:	84 1f       	adc	r24, r20
    1d72:	48 f4       	brcc	.+18     	; 0x1d86 <__addsf3x+0x98>
    1d74:	87 95       	ror	r24
    1d76:	77 95       	ror	r23
    1d78:	67 95       	ror	r22
    1d7a:	b7 95       	ror	r27
    1d7c:	f7 95       	ror	r31
    1d7e:	9e 3f       	cpi	r25, 0xFE	; 254
    1d80:	08 f0       	brcs	.+2      	; 0x1d84 <__addsf3x+0x96>
    1d82:	b3 cf       	rjmp	.-154    	; 0x1cea <__addsf3+0x1e>
    1d84:	93 95       	inc	r25
    1d86:	88 0f       	add	r24, r24
    1d88:	08 f0       	brcs	.+2      	; 0x1d8c <__addsf3x+0x9e>
    1d8a:	99 27       	eor	r25, r25
    1d8c:	ee 0f       	add	r30, r30
    1d8e:	97 95       	ror	r25
    1d90:	87 95       	ror	r24
    1d92:	08 95       	ret

00001d94 <__cmpsf2>:
    1d94:	d9 d0       	rcall	.+434    	; 0x1f48 <__fp_cmp>
    1d96:	08 f4       	brcc	.+2      	; 0x1d9a <__cmpsf2+0x6>
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	08 95       	ret

00001d9c <__divsf3>:
    1d9c:	0c d0       	rcall	.+24     	; 0x1db6 <__divsf3x>
    1d9e:	0f c1       	rjmp	.+542    	; 0x1fbe <__fp_round>
    1da0:	07 d1       	rcall	.+526    	; 0x1fb0 <__fp_pscB>
    1da2:	40 f0       	brcs	.+16     	; 0x1db4 <__divsf3+0x18>
    1da4:	fe d0       	rcall	.+508    	; 0x1fa2 <__fp_pscA>
    1da6:	30 f0       	brcs	.+12     	; 0x1db4 <__divsf3+0x18>
    1da8:	21 f4       	brne	.+8      	; 0x1db2 <__divsf3+0x16>
    1daa:	5f 3f       	cpi	r21, 0xFF	; 255
    1dac:	19 f0       	breq	.+6      	; 0x1db4 <__divsf3+0x18>
    1dae:	f0 c0       	rjmp	.+480    	; 0x1f90 <__fp_inf>
    1db0:	51 11       	cpse	r21, r1
    1db2:	39 c1       	rjmp	.+626    	; 0x2026 <__fp_szero>
    1db4:	f3 c0       	rjmp	.+486    	; 0x1f9c <__fp_nan>

00001db6 <__divsf3x>:
    1db6:	14 d1       	rcall	.+552    	; 0x1fe0 <__fp_split3>
    1db8:	98 f3       	brcs	.-26     	; 0x1da0 <__divsf3+0x4>

00001dba <__divsf3_pse>:
    1dba:	99 23       	and	r25, r25
    1dbc:	c9 f3       	breq	.-14     	; 0x1db0 <__divsf3+0x14>
    1dbe:	55 23       	and	r21, r21
    1dc0:	b1 f3       	breq	.-20     	; 0x1dae <__divsf3+0x12>
    1dc2:	95 1b       	sub	r25, r21
    1dc4:	55 0b       	sbc	r21, r21
    1dc6:	bb 27       	eor	r27, r27
    1dc8:	aa 27       	eor	r26, r26
    1dca:	62 17       	cp	r22, r18
    1dcc:	73 07       	cpc	r23, r19
    1dce:	84 07       	cpc	r24, r20
    1dd0:	38 f0       	brcs	.+14     	; 0x1de0 <__divsf3_pse+0x26>
    1dd2:	9f 5f       	subi	r25, 0xFF	; 255
    1dd4:	5f 4f       	sbci	r21, 0xFF	; 255
    1dd6:	22 0f       	add	r18, r18
    1dd8:	33 1f       	adc	r19, r19
    1dda:	44 1f       	adc	r20, r20
    1ddc:	aa 1f       	adc	r26, r26
    1dde:	a9 f3       	breq	.-22     	; 0x1dca <__divsf3_pse+0x10>
    1de0:	33 d0       	rcall	.+102    	; 0x1e48 <__divsf3_pse+0x8e>
    1de2:	0e 2e       	mov	r0, r30
    1de4:	3a f0       	brmi	.+14     	; 0x1df4 <__divsf3_pse+0x3a>
    1de6:	e0 e8       	ldi	r30, 0x80	; 128
    1de8:	30 d0       	rcall	.+96     	; 0x1e4a <__divsf3_pse+0x90>
    1dea:	91 50       	subi	r25, 0x01	; 1
    1dec:	50 40       	sbci	r21, 0x00	; 0
    1dee:	e6 95       	lsr	r30
    1df0:	00 1c       	adc	r0, r0
    1df2:	ca f7       	brpl	.-14     	; 0x1de6 <__divsf3_pse+0x2c>
    1df4:	29 d0       	rcall	.+82     	; 0x1e48 <__divsf3_pse+0x8e>
    1df6:	fe 2f       	mov	r31, r30
    1df8:	27 d0       	rcall	.+78     	; 0x1e48 <__divsf3_pse+0x8e>
    1dfa:	66 0f       	add	r22, r22
    1dfc:	77 1f       	adc	r23, r23
    1dfe:	88 1f       	adc	r24, r24
    1e00:	bb 1f       	adc	r27, r27
    1e02:	26 17       	cp	r18, r22
    1e04:	37 07       	cpc	r19, r23
    1e06:	48 07       	cpc	r20, r24
    1e08:	ab 07       	cpc	r26, r27
    1e0a:	b0 e8       	ldi	r27, 0x80	; 128
    1e0c:	09 f0       	breq	.+2      	; 0x1e10 <__divsf3_pse+0x56>
    1e0e:	bb 0b       	sbc	r27, r27
    1e10:	80 2d       	mov	r24, r0
    1e12:	bf 01       	movw	r22, r30
    1e14:	ff 27       	eor	r31, r31
    1e16:	93 58       	subi	r25, 0x83	; 131
    1e18:	5f 4f       	sbci	r21, 0xFF	; 255
    1e1a:	2a f0       	brmi	.+10     	; 0x1e26 <__divsf3_pse+0x6c>
    1e1c:	9e 3f       	cpi	r25, 0xFE	; 254
    1e1e:	51 05       	cpc	r21, r1
    1e20:	68 f0       	brcs	.+26     	; 0x1e3c <__divsf3_pse+0x82>
    1e22:	b6 c0       	rjmp	.+364    	; 0x1f90 <__fp_inf>
    1e24:	00 c1       	rjmp	.+512    	; 0x2026 <__fp_szero>
    1e26:	5f 3f       	cpi	r21, 0xFF	; 255
    1e28:	ec f3       	brlt	.-6      	; 0x1e24 <__divsf3_pse+0x6a>
    1e2a:	98 3e       	cpi	r25, 0xE8	; 232
    1e2c:	dc f3       	brlt	.-10     	; 0x1e24 <__divsf3_pse+0x6a>
    1e2e:	86 95       	lsr	r24
    1e30:	77 95       	ror	r23
    1e32:	67 95       	ror	r22
    1e34:	b7 95       	ror	r27
    1e36:	f7 95       	ror	r31
    1e38:	9f 5f       	subi	r25, 0xFF	; 255
    1e3a:	c9 f7       	brne	.-14     	; 0x1e2e <__divsf3_pse+0x74>
    1e3c:	88 0f       	add	r24, r24
    1e3e:	91 1d       	adc	r25, r1
    1e40:	96 95       	lsr	r25
    1e42:	87 95       	ror	r24
    1e44:	97 f9       	bld	r25, 7
    1e46:	08 95       	ret
    1e48:	e1 e0       	ldi	r30, 0x01	; 1
    1e4a:	66 0f       	add	r22, r22
    1e4c:	77 1f       	adc	r23, r23
    1e4e:	88 1f       	adc	r24, r24
    1e50:	bb 1f       	adc	r27, r27
    1e52:	62 17       	cp	r22, r18
    1e54:	73 07       	cpc	r23, r19
    1e56:	84 07       	cpc	r24, r20
    1e58:	ba 07       	cpc	r27, r26
    1e5a:	20 f0       	brcs	.+8      	; 0x1e64 <__divsf3_pse+0xaa>
    1e5c:	62 1b       	sub	r22, r18
    1e5e:	73 0b       	sbc	r23, r19
    1e60:	84 0b       	sbc	r24, r20
    1e62:	ba 0b       	sbc	r27, r26
    1e64:	ee 1f       	adc	r30, r30
    1e66:	88 f7       	brcc	.-30     	; 0x1e4a <__divsf3_pse+0x90>
    1e68:	e0 95       	com	r30
    1e6a:	08 95       	ret

00001e6c <__fixsfsi>:
    1e6c:	04 d0       	rcall	.+8      	; 0x1e76 <__fixunssfsi>
    1e6e:	68 94       	set
    1e70:	b1 11       	cpse	r27, r1
    1e72:	d9 c0       	rjmp	.+434    	; 0x2026 <__fp_szero>
    1e74:	08 95       	ret

00001e76 <__fixunssfsi>:
    1e76:	bc d0       	rcall	.+376    	; 0x1ff0 <__fp_splitA>
    1e78:	88 f0       	brcs	.+34     	; 0x1e9c <__fixunssfsi+0x26>
    1e7a:	9f 57       	subi	r25, 0x7F	; 127
    1e7c:	90 f0       	brcs	.+36     	; 0x1ea2 <__fixunssfsi+0x2c>
    1e7e:	b9 2f       	mov	r27, r25
    1e80:	99 27       	eor	r25, r25
    1e82:	b7 51       	subi	r27, 0x17	; 23
    1e84:	a0 f0       	brcs	.+40     	; 0x1eae <__fixunssfsi+0x38>
    1e86:	d1 f0       	breq	.+52     	; 0x1ebc <__fixunssfsi+0x46>
    1e88:	66 0f       	add	r22, r22
    1e8a:	77 1f       	adc	r23, r23
    1e8c:	88 1f       	adc	r24, r24
    1e8e:	99 1f       	adc	r25, r25
    1e90:	1a f0       	brmi	.+6      	; 0x1e98 <__fixunssfsi+0x22>
    1e92:	ba 95       	dec	r27
    1e94:	c9 f7       	brne	.-14     	; 0x1e88 <__fixunssfsi+0x12>
    1e96:	12 c0       	rjmp	.+36     	; 0x1ebc <__fixunssfsi+0x46>
    1e98:	b1 30       	cpi	r27, 0x01	; 1
    1e9a:	81 f0       	breq	.+32     	; 0x1ebc <__fixunssfsi+0x46>
    1e9c:	c3 d0       	rcall	.+390    	; 0x2024 <__fp_zero>
    1e9e:	b1 e0       	ldi	r27, 0x01	; 1
    1ea0:	08 95       	ret
    1ea2:	c0 c0       	rjmp	.+384    	; 0x2024 <__fp_zero>
    1ea4:	67 2f       	mov	r22, r23
    1ea6:	78 2f       	mov	r23, r24
    1ea8:	88 27       	eor	r24, r24
    1eaa:	b8 5f       	subi	r27, 0xF8	; 248
    1eac:	39 f0       	breq	.+14     	; 0x1ebc <__fixunssfsi+0x46>
    1eae:	b9 3f       	cpi	r27, 0xF9	; 249
    1eb0:	cc f3       	brlt	.-14     	; 0x1ea4 <__fixunssfsi+0x2e>
    1eb2:	86 95       	lsr	r24
    1eb4:	77 95       	ror	r23
    1eb6:	67 95       	ror	r22
    1eb8:	b3 95       	inc	r27
    1eba:	d9 f7       	brne	.-10     	; 0x1eb2 <__fixunssfsi+0x3c>
    1ebc:	3e f4       	brtc	.+14     	; 0x1ecc <__fixunssfsi+0x56>
    1ebe:	90 95       	com	r25
    1ec0:	80 95       	com	r24
    1ec2:	70 95       	com	r23
    1ec4:	61 95       	neg	r22
    1ec6:	7f 4f       	sbci	r23, 0xFF	; 255
    1ec8:	8f 4f       	sbci	r24, 0xFF	; 255
    1eca:	9f 4f       	sbci	r25, 0xFF	; 255
    1ecc:	08 95       	ret

00001ece <__floatunsisf>:
    1ece:	e8 94       	clt
    1ed0:	09 c0       	rjmp	.+18     	; 0x1ee4 <__floatsisf+0x12>

00001ed2 <__floatsisf>:
    1ed2:	97 fb       	bst	r25, 7
    1ed4:	3e f4       	brtc	.+14     	; 0x1ee4 <__floatsisf+0x12>
    1ed6:	90 95       	com	r25
    1ed8:	80 95       	com	r24
    1eda:	70 95       	com	r23
    1edc:	61 95       	neg	r22
    1ede:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee0:	8f 4f       	sbci	r24, 0xFF	; 255
    1ee2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ee4:	99 23       	and	r25, r25
    1ee6:	a9 f0       	breq	.+42     	; 0x1f12 <__floatsisf+0x40>
    1ee8:	f9 2f       	mov	r31, r25
    1eea:	96 e9       	ldi	r25, 0x96	; 150
    1eec:	bb 27       	eor	r27, r27
    1eee:	93 95       	inc	r25
    1ef0:	f6 95       	lsr	r31
    1ef2:	87 95       	ror	r24
    1ef4:	77 95       	ror	r23
    1ef6:	67 95       	ror	r22
    1ef8:	b7 95       	ror	r27
    1efa:	f1 11       	cpse	r31, r1
    1efc:	f8 cf       	rjmp	.-16     	; 0x1eee <__floatsisf+0x1c>
    1efe:	fa f4       	brpl	.+62     	; 0x1f3e <__floatsisf+0x6c>
    1f00:	bb 0f       	add	r27, r27
    1f02:	11 f4       	brne	.+4      	; 0x1f08 <__floatsisf+0x36>
    1f04:	60 ff       	sbrs	r22, 0
    1f06:	1b c0       	rjmp	.+54     	; 0x1f3e <__floatsisf+0x6c>
    1f08:	6f 5f       	subi	r22, 0xFF	; 255
    1f0a:	7f 4f       	sbci	r23, 0xFF	; 255
    1f0c:	8f 4f       	sbci	r24, 0xFF	; 255
    1f0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1f10:	16 c0       	rjmp	.+44     	; 0x1f3e <__floatsisf+0x6c>
    1f12:	88 23       	and	r24, r24
    1f14:	11 f0       	breq	.+4      	; 0x1f1a <__floatsisf+0x48>
    1f16:	96 e9       	ldi	r25, 0x96	; 150
    1f18:	11 c0       	rjmp	.+34     	; 0x1f3c <__floatsisf+0x6a>
    1f1a:	77 23       	and	r23, r23
    1f1c:	21 f0       	breq	.+8      	; 0x1f26 <__floatsisf+0x54>
    1f1e:	9e e8       	ldi	r25, 0x8E	; 142
    1f20:	87 2f       	mov	r24, r23
    1f22:	76 2f       	mov	r23, r22
    1f24:	05 c0       	rjmp	.+10     	; 0x1f30 <__floatsisf+0x5e>
    1f26:	66 23       	and	r22, r22
    1f28:	71 f0       	breq	.+28     	; 0x1f46 <__floatsisf+0x74>
    1f2a:	96 e8       	ldi	r25, 0x86	; 134
    1f2c:	86 2f       	mov	r24, r22
    1f2e:	70 e0       	ldi	r23, 0x00	; 0
    1f30:	60 e0       	ldi	r22, 0x00	; 0
    1f32:	2a f0       	brmi	.+10     	; 0x1f3e <__floatsisf+0x6c>
    1f34:	9a 95       	dec	r25
    1f36:	66 0f       	add	r22, r22
    1f38:	77 1f       	adc	r23, r23
    1f3a:	88 1f       	adc	r24, r24
    1f3c:	da f7       	brpl	.-10     	; 0x1f34 <__floatsisf+0x62>
    1f3e:	88 0f       	add	r24, r24
    1f40:	96 95       	lsr	r25
    1f42:	87 95       	ror	r24
    1f44:	97 f9       	bld	r25, 7
    1f46:	08 95       	ret

00001f48 <__fp_cmp>:
    1f48:	99 0f       	add	r25, r25
    1f4a:	00 08       	sbc	r0, r0
    1f4c:	55 0f       	add	r21, r21
    1f4e:	aa 0b       	sbc	r26, r26
    1f50:	e0 e8       	ldi	r30, 0x80	; 128
    1f52:	fe ef       	ldi	r31, 0xFE	; 254
    1f54:	16 16       	cp	r1, r22
    1f56:	17 06       	cpc	r1, r23
    1f58:	e8 07       	cpc	r30, r24
    1f5a:	f9 07       	cpc	r31, r25
    1f5c:	c0 f0       	brcs	.+48     	; 0x1f8e <__fp_cmp+0x46>
    1f5e:	12 16       	cp	r1, r18
    1f60:	13 06       	cpc	r1, r19
    1f62:	e4 07       	cpc	r30, r20
    1f64:	f5 07       	cpc	r31, r21
    1f66:	98 f0       	brcs	.+38     	; 0x1f8e <__fp_cmp+0x46>
    1f68:	62 1b       	sub	r22, r18
    1f6a:	73 0b       	sbc	r23, r19
    1f6c:	84 0b       	sbc	r24, r20
    1f6e:	95 0b       	sbc	r25, r21
    1f70:	39 f4       	brne	.+14     	; 0x1f80 <__fp_cmp+0x38>
    1f72:	0a 26       	eor	r0, r26
    1f74:	61 f0       	breq	.+24     	; 0x1f8e <__fp_cmp+0x46>
    1f76:	23 2b       	or	r18, r19
    1f78:	24 2b       	or	r18, r20
    1f7a:	25 2b       	or	r18, r21
    1f7c:	21 f4       	brne	.+8      	; 0x1f86 <__fp_cmp+0x3e>
    1f7e:	08 95       	ret
    1f80:	0a 26       	eor	r0, r26
    1f82:	09 f4       	brne	.+2      	; 0x1f86 <__fp_cmp+0x3e>
    1f84:	a1 40       	sbci	r26, 0x01	; 1
    1f86:	a6 95       	lsr	r26
    1f88:	8f ef       	ldi	r24, 0xFF	; 255
    1f8a:	81 1d       	adc	r24, r1
    1f8c:	81 1d       	adc	r24, r1
    1f8e:	08 95       	ret

00001f90 <__fp_inf>:
    1f90:	97 f9       	bld	r25, 7
    1f92:	9f 67       	ori	r25, 0x7F	; 127
    1f94:	80 e8       	ldi	r24, 0x80	; 128
    1f96:	70 e0       	ldi	r23, 0x00	; 0
    1f98:	60 e0       	ldi	r22, 0x00	; 0
    1f9a:	08 95       	ret

00001f9c <__fp_nan>:
    1f9c:	9f ef       	ldi	r25, 0xFF	; 255
    1f9e:	80 ec       	ldi	r24, 0xC0	; 192
    1fa0:	08 95       	ret

00001fa2 <__fp_pscA>:
    1fa2:	00 24       	eor	r0, r0
    1fa4:	0a 94       	dec	r0
    1fa6:	16 16       	cp	r1, r22
    1fa8:	17 06       	cpc	r1, r23
    1faa:	18 06       	cpc	r1, r24
    1fac:	09 06       	cpc	r0, r25
    1fae:	08 95       	ret

00001fb0 <__fp_pscB>:
    1fb0:	00 24       	eor	r0, r0
    1fb2:	0a 94       	dec	r0
    1fb4:	12 16       	cp	r1, r18
    1fb6:	13 06       	cpc	r1, r19
    1fb8:	14 06       	cpc	r1, r20
    1fba:	05 06       	cpc	r0, r21
    1fbc:	08 95       	ret

00001fbe <__fp_round>:
    1fbe:	09 2e       	mov	r0, r25
    1fc0:	03 94       	inc	r0
    1fc2:	00 0c       	add	r0, r0
    1fc4:	11 f4       	brne	.+4      	; 0x1fca <__fp_round+0xc>
    1fc6:	88 23       	and	r24, r24
    1fc8:	52 f0       	brmi	.+20     	; 0x1fde <__fp_round+0x20>
    1fca:	bb 0f       	add	r27, r27
    1fcc:	40 f4       	brcc	.+16     	; 0x1fde <__fp_round+0x20>
    1fce:	bf 2b       	or	r27, r31
    1fd0:	11 f4       	brne	.+4      	; 0x1fd6 <__fp_round+0x18>
    1fd2:	60 ff       	sbrs	r22, 0
    1fd4:	04 c0       	rjmp	.+8      	; 0x1fde <__fp_round+0x20>
    1fd6:	6f 5f       	subi	r22, 0xFF	; 255
    1fd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fda:	8f 4f       	sbci	r24, 0xFF	; 255
    1fdc:	9f 4f       	sbci	r25, 0xFF	; 255
    1fde:	08 95       	ret

00001fe0 <__fp_split3>:
    1fe0:	57 fd       	sbrc	r21, 7
    1fe2:	90 58       	subi	r25, 0x80	; 128
    1fe4:	44 0f       	add	r20, r20
    1fe6:	55 1f       	adc	r21, r21
    1fe8:	59 f0       	breq	.+22     	; 0x2000 <__fp_splitA+0x10>
    1fea:	5f 3f       	cpi	r21, 0xFF	; 255
    1fec:	71 f0       	breq	.+28     	; 0x200a <__fp_splitA+0x1a>
    1fee:	47 95       	ror	r20

00001ff0 <__fp_splitA>:
    1ff0:	88 0f       	add	r24, r24
    1ff2:	97 fb       	bst	r25, 7
    1ff4:	99 1f       	adc	r25, r25
    1ff6:	61 f0       	breq	.+24     	; 0x2010 <__fp_splitA+0x20>
    1ff8:	9f 3f       	cpi	r25, 0xFF	; 255
    1ffa:	79 f0       	breq	.+30     	; 0x201a <__fp_splitA+0x2a>
    1ffc:	87 95       	ror	r24
    1ffe:	08 95       	ret
    2000:	12 16       	cp	r1, r18
    2002:	13 06       	cpc	r1, r19
    2004:	14 06       	cpc	r1, r20
    2006:	55 1f       	adc	r21, r21
    2008:	f2 cf       	rjmp	.-28     	; 0x1fee <__fp_split3+0xe>
    200a:	46 95       	lsr	r20
    200c:	f1 df       	rcall	.-30     	; 0x1ff0 <__fp_splitA>
    200e:	08 c0       	rjmp	.+16     	; 0x2020 <__fp_splitA+0x30>
    2010:	16 16       	cp	r1, r22
    2012:	17 06       	cpc	r1, r23
    2014:	18 06       	cpc	r1, r24
    2016:	99 1f       	adc	r25, r25
    2018:	f1 cf       	rjmp	.-30     	; 0x1ffc <__fp_splitA+0xc>
    201a:	86 95       	lsr	r24
    201c:	71 05       	cpc	r23, r1
    201e:	61 05       	cpc	r22, r1
    2020:	08 94       	sec
    2022:	08 95       	ret

00002024 <__fp_zero>:
    2024:	e8 94       	clt

00002026 <__fp_szero>:
    2026:	bb 27       	eor	r27, r27
    2028:	66 27       	eor	r22, r22
    202a:	77 27       	eor	r23, r23
    202c:	cb 01       	movw	r24, r22
    202e:	97 f9       	bld	r25, 7
    2030:	08 95       	ret

00002032 <__gesf2>:
    2032:	8a df       	rcall	.-236    	; 0x1f48 <__fp_cmp>
    2034:	08 f4       	brcc	.+2      	; 0x2038 <__gesf2+0x6>
    2036:	8f ef       	ldi	r24, 0xFF	; 255
    2038:	08 95       	ret

0000203a <__mulsf3>:
    203a:	0b d0       	rcall	.+22     	; 0x2052 <__mulsf3x>
    203c:	c0 cf       	rjmp	.-128    	; 0x1fbe <__fp_round>
    203e:	b1 df       	rcall	.-158    	; 0x1fa2 <__fp_pscA>
    2040:	28 f0       	brcs	.+10     	; 0x204c <__mulsf3+0x12>
    2042:	b6 df       	rcall	.-148    	; 0x1fb0 <__fp_pscB>
    2044:	18 f0       	brcs	.+6      	; 0x204c <__mulsf3+0x12>
    2046:	95 23       	and	r25, r21
    2048:	09 f0       	breq	.+2      	; 0x204c <__mulsf3+0x12>
    204a:	a2 cf       	rjmp	.-188    	; 0x1f90 <__fp_inf>
    204c:	a7 cf       	rjmp	.-178    	; 0x1f9c <__fp_nan>
    204e:	11 24       	eor	r1, r1
    2050:	ea cf       	rjmp	.-44     	; 0x2026 <__fp_szero>

00002052 <__mulsf3x>:
    2052:	c6 df       	rcall	.-116    	; 0x1fe0 <__fp_split3>
    2054:	a0 f3       	brcs	.-24     	; 0x203e <__mulsf3+0x4>

00002056 <__mulsf3_pse>:
    2056:	95 9f       	mul	r25, r21
    2058:	d1 f3       	breq	.-12     	; 0x204e <__mulsf3+0x14>
    205a:	95 0f       	add	r25, r21
    205c:	50 e0       	ldi	r21, 0x00	; 0
    205e:	55 1f       	adc	r21, r21
    2060:	62 9f       	mul	r22, r18
    2062:	f0 01       	movw	r30, r0
    2064:	72 9f       	mul	r23, r18
    2066:	bb 27       	eor	r27, r27
    2068:	f0 0d       	add	r31, r0
    206a:	b1 1d       	adc	r27, r1
    206c:	63 9f       	mul	r22, r19
    206e:	aa 27       	eor	r26, r26
    2070:	f0 0d       	add	r31, r0
    2072:	b1 1d       	adc	r27, r1
    2074:	aa 1f       	adc	r26, r26
    2076:	64 9f       	mul	r22, r20
    2078:	66 27       	eor	r22, r22
    207a:	b0 0d       	add	r27, r0
    207c:	a1 1d       	adc	r26, r1
    207e:	66 1f       	adc	r22, r22
    2080:	82 9f       	mul	r24, r18
    2082:	22 27       	eor	r18, r18
    2084:	b0 0d       	add	r27, r0
    2086:	a1 1d       	adc	r26, r1
    2088:	62 1f       	adc	r22, r18
    208a:	73 9f       	mul	r23, r19
    208c:	b0 0d       	add	r27, r0
    208e:	a1 1d       	adc	r26, r1
    2090:	62 1f       	adc	r22, r18
    2092:	83 9f       	mul	r24, r19
    2094:	a0 0d       	add	r26, r0
    2096:	61 1d       	adc	r22, r1
    2098:	22 1f       	adc	r18, r18
    209a:	74 9f       	mul	r23, r20
    209c:	33 27       	eor	r19, r19
    209e:	a0 0d       	add	r26, r0
    20a0:	61 1d       	adc	r22, r1
    20a2:	23 1f       	adc	r18, r19
    20a4:	84 9f       	mul	r24, r20
    20a6:	60 0d       	add	r22, r0
    20a8:	21 1d       	adc	r18, r1
    20aa:	82 2f       	mov	r24, r18
    20ac:	76 2f       	mov	r23, r22
    20ae:	6a 2f       	mov	r22, r26
    20b0:	11 24       	eor	r1, r1
    20b2:	9f 57       	subi	r25, 0x7F	; 127
    20b4:	50 40       	sbci	r21, 0x00	; 0
    20b6:	8a f0       	brmi	.+34     	; 0x20da <__mulsf3_pse+0x84>
    20b8:	e1 f0       	breq	.+56     	; 0x20f2 <__mulsf3_pse+0x9c>
    20ba:	88 23       	and	r24, r24
    20bc:	4a f0       	brmi	.+18     	; 0x20d0 <__mulsf3_pse+0x7a>
    20be:	ee 0f       	add	r30, r30
    20c0:	ff 1f       	adc	r31, r31
    20c2:	bb 1f       	adc	r27, r27
    20c4:	66 1f       	adc	r22, r22
    20c6:	77 1f       	adc	r23, r23
    20c8:	88 1f       	adc	r24, r24
    20ca:	91 50       	subi	r25, 0x01	; 1
    20cc:	50 40       	sbci	r21, 0x00	; 0
    20ce:	a9 f7       	brne	.-22     	; 0x20ba <__mulsf3_pse+0x64>
    20d0:	9e 3f       	cpi	r25, 0xFE	; 254
    20d2:	51 05       	cpc	r21, r1
    20d4:	70 f0       	brcs	.+28     	; 0x20f2 <__mulsf3_pse+0x9c>
    20d6:	5c cf       	rjmp	.-328    	; 0x1f90 <__fp_inf>
    20d8:	a6 cf       	rjmp	.-180    	; 0x2026 <__fp_szero>
    20da:	5f 3f       	cpi	r21, 0xFF	; 255
    20dc:	ec f3       	brlt	.-6      	; 0x20d8 <__mulsf3_pse+0x82>
    20de:	98 3e       	cpi	r25, 0xE8	; 232
    20e0:	dc f3       	brlt	.-10     	; 0x20d8 <__mulsf3_pse+0x82>
    20e2:	86 95       	lsr	r24
    20e4:	77 95       	ror	r23
    20e6:	67 95       	ror	r22
    20e8:	b7 95       	ror	r27
    20ea:	f7 95       	ror	r31
    20ec:	e7 95       	ror	r30
    20ee:	9f 5f       	subi	r25, 0xFF	; 255
    20f0:	c1 f7       	brne	.-16     	; 0x20e2 <__mulsf3_pse+0x8c>
    20f2:	fe 2b       	or	r31, r30
    20f4:	88 0f       	add	r24, r24
    20f6:	91 1d       	adc	r25, r1
    20f8:	96 95       	lsr	r25
    20fa:	87 95       	ror	r24
    20fc:	97 f9       	bld	r25, 7
    20fe:	08 95       	ret

00002100 <vfprintf>:
    2100:	a3 e1       	ldi	r26, 0x13	; 19
    2102:	b0 e0       	ldi	r27, 0x00	; 0
    2104:	e6 e8       	ldi	r30, 0x86	; 134
    2106:	f0 e1       	ldi	r31, 0x10	; 16
    2108:	0c 94 1d 14 	jmp	0x283a	; 0x283a <__prologue_saves__>
    210c:	7c 01       	movw	r14, r24
    210e:	1b 01       	movw	r2, r22
    2110:	6a 01       	movw	r12, r20
    2112:	fc 01       	movw	r30, r24
    2114:	17 82       	std	Z+7, r1	; 0x07
    2116:	16 82       	std	Z+6, r1	; 0x06
    2118:	83 81       	ldd	r24, Z+3	; 0x03
    211a:	81 ff       	sbrs	r24, 1
    211c:	66 c3       	rjmp	.+1740   	; 0x27ea <__stack+0x5eb>
    211e:	be 01       	movw	r22, r28
    2120:	6f 5f       	subi	r22, 0xFF	; 255
    2122:	7f 4f       	sbci	r23, 0xFF	; 255
    2124:	4b 01       	movw	r8, r22
    2126:	f7 01       	movw	r30, r14
    2128:	93 81       	ldd	r25, Z+3	; 0x03
    212a:	f1 01       	movw	r30, r2
    212c:	93 fd       	sbrc	r25, 3
    212e:	85 91       	lpm	r24, Z+
    2130:	93 ff       	sbrs	r25, 3
    2132:	81 91       	ld	r24, Z+
    2134:	1f 01       	movw	r2, r30
    2136:	88 23       	and	r24, r24
    2138:	09 f4       	brne	.+2      	; 0x213c <vfprintf+0x3c>
    213a:	53 c3       	rjmp	.+1702   	; 0x27e2 <__stack+0x5e3>
    213c:	85 32       	cpi	r24, 0x25	; 37
    213e:	39 f4       	brne	.+14     	; 0x214e <vfprintf+0x4e>
    2140:	93 fd       	sbrc	r25, 3
    2142:	85 91       	lpm	r24, Z+
    2144:	93 ff       	sbrs	r25, 3
    2146:	81 91       	ld	r24, Z+
    2148:	1f 01       	movw	r2, r30
    214a:	85 32       	cpi	r24, 0x25	; 37
    214c:	39 f4       	brne	.+14     	; 0x215c <vfprintf+0x5c>
    214e:	b7 01       	movw	r22, r14
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <fputc>
    2156:	56 01       	movw	r10, r12
    2158:	65 01       	movw	r12, r10
    215a:	e5 cf       	rjmp	.-54     	; 0x2126 <vfprintf+0x26>
    215c:	10 e0       	ldi	r17, 0x00	; 0
    215e:	51 2c       	mov	r5, r1
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	20 32       	cpi	r18, 0x20	; 32
    2164:	a0 f4       	brcc	.+40     	; 0x218e <vfprintf+0x8e>
    2166:	8b 32       	cpi	r24, 0x2B	; 43
    2168:	69 f0       	breq	.+26     	; 0x2184 <vfprintf+0x84>
    216a:	30 f4       	brcc	.+12     	; 0x2178 <vfprintf+0x78>
    216c:	80 32       	cpi	r24, 0x20	; 32
    216e:	59 f0       	breq	.+22     	; 0x2186 <vfprintf+0x86>
    2170:	83 32       	cpi	r24, 0x23	; 35
    2172:	69 f4       	brne	.+26     	; 0x218e <vfprintf+0x8e>
    2174:	20 61       	ori	r18, 0x10	; 16
    2176:	2c c0       	rjmp	.+88     	; 0x21d0 <vfprintf+0xd0>
    2178:	8d 32       	cpi	r24, 0x2D	; 45
    217a:	39 f0       	breq	.+14     	; 0x218a <vfprintf+0x8a>
    217c:	80 33       	cpi	r24, 0x30	; 48
    217e:	39 f4       	brne	.+14     	; 0x218e <vfprintf+0x8e>
    2180:	21 60       	ori	r18, 0x01	; 1
    2182:	26 c0       	rjmp	.+76     	; 0x21d0 <vfprintf+0xd0>
    2184:	22 60       	ori	r18, 0x02	; 2
    2186:	24 60       	ori	r18, 0x04	; 4
    2188:	23 c0       	rjmp	.+70     	; 0x21d0 <vfprintf+0xd0>
    218a:	28 60       	ori	r18, 0x08	; 8
    218c:	21 c0       	rjmp	.+66     	; 0x21d0 <vfprintf+0xd0>
    218e:	27 fd       	sbrc	r18, 7
    2190:	27 c0       	rjmp	.+78     	; 0x21e0 <vfprintf+0xe0>
    2192:	30 ed       	ldi	r19, 0xD0	; 208
    2194:	38 0f       	add	r19, r24
    2196:	3a 30       	cpi	r19, 0x0A	; 10
    2198:	78 f4       	brcc	.+30     	; 0x21b8 <vfprintf+0xb8>
    219a:	26 ff       	sbrs	r18, 6
    219c:	06 c0       	rjmp	.+12     	; 0x21aa <vfprintf+0xaa>
    219e:	fa e0       	ldi	r31, 0x0A	; 10
    21a0:	1f 9f       	mul	r17, r31
    21a2:	30 0d       	add	r19, r0
    21a4:	11 24       	eor	r1, r1
    21a6:	13 2f       	mov	r17, r19
    21a8:	13 c0       	rjmp	.+38     	; 0x21d0 <vfprintf+0xd0>
    21aa:	6a e0       	ldi	r22, 0x0A	; 10
    21ac:	56 9e       	mul	r5, r22
    21ae:	30 0d       	add	r19, r0
    21b0:	11 24       	eor	r1, r1
    21b2:	53 2e       	mov	r5, r19
    21b4:	20 62       	ori	r18, 0x20	; 32
    21b6:	0c c0       	rjmp	.+24     	; 0x21d0 <vfprintf+0xd0>
    21b8:	8e 32       	cpi	r24, 0x2E	; 46
    21ba:	21 f4       	brne	.+8      	; 0x21c4 <vfprintf+0xc4>
    21bc:	26 fd       	sbrc	r18, 6
    21be:	11 c3       	rjmp	.+1570   	; 0x27e2 <__stack+0x5e3>
    21c0:	20 64       	ori	r18, 0x40	; 64
    21c2:	06 c0       	rjmp	.+12     	; 0x21d0 <vfprintf+0xd0>
    21c4:	8c 36       	cpi	r24, 0x6C	; 108
    21c6:	11 f4       	brne	.+4      	; 0x21cc <vfprintf+0xcc>
    21c8:	20 68       	ori	r18, 0x80	; 128
    21ca:	02 c0       	rjmp	.+4      	; 0x21d0 <vfprintf+0xd0>
    21cc:	88 36       	cpi	r24, 0x68	; 104
    21ce:	41 f4       	brne	.+16     	; 0x21e0 <vfprintf+0xe0>
    21d0:	f1 01       	movw	r30, r2
    21d2:	93 fd       	sbrc	r25, 3
    21d4:	85 91       	lpm	r24, Z+
    21d6:	93 ff       	sbrs	r25, 3
    21d8:	81 91       	ld	r24, Z+
    21da:	1f 01       	movw	r2, r30
    21dc:	81 11       	cpse	r24, r1
    21de:	c1 cf       	rjmp	.-126    	; 0x2162 <vfprintf+0x62>
    21e0:	9b eb       	ldi	r25, 0xBB	; 187
    21e2:	98 0f       	add	r25, r24
    21e4:	93 30       	cpi	r25, 0x03	; 3
    21e6:	18 f4       	brcc	.+6      	; 0x21ee <vfprintf+0xee>
    21e8:	20 61       	ori	r18, 0x10	; 16
    21ea:	80 5e       	subi	r24, 0xE0	; 224
    21ec:	06 c0       	rjmp	.+12     	; 0x21fa <vfprintf+0xfa>
    21ee:	9b e9       	ldi	r25, 0x9B	; 155
    21f0:	98 0f       	add	r25, r24
    21f2:	93 30       	cpi	r25, 0x03	; 3
    21f4:	08 f0       	brcs	.+2      	; 0x21f8 <vfprintf+0xf8>
    21f6:	aa c1       	rjmp	.+852    	; 0x254c <__stack+0x34d>
    21f8:	2f 7e       	andi	r18, 0xEF	; 239
    21fa:	26 ff       	sbrs	r18, 6
    21fc:	16 e0       	ldi	r17, 0x06	; 6
    21fe:	2f 73       	andi	r18, 0x3F	; 63
    2200:	72 2e       	mov	r7, r18
    2202:	85 36       	cpi	r24, 0x65	; 101
    2204:	21 f4       	brne	.+8      	; 0x220e <__stack+0xf>
    2206:	f2 2f       	mov	r31, r18
    2208:	f0 64       	ori	r31, 0x40	; 64
    220a:	7f 2e       	mov	r7, r31
    220c:	08 c0       	rjmp	.+16     	; 0x221e <__stack+0x1f>
    220e:	86 36       	cpi	r24, 0x66	; 102
    2210:	21 f4       	brne	.+8      	; 0x221a <__stack+0x1b>
    2212:	62 2f       	mov	r22, r18
    2214:	60 68       	ori	r22, 0x80	; 128
    2216:	76 2e       	mov	r7, r22
    2218:	02 c0       	rjmp	.+4      	; 0x221e <__stack+0x1f>
    221a:	11 11       	cpse	r17, r1
    221c:	11 50       	subi	r17, 0x01	; 1
    221e:	77 fe       	sbrs	r7, 7
    2220:	07 c0       	rjmp	.+14     	; 0x2230 <__stack+0x31>
    2222:	1c 33       	cpi	r17, 0x3C	; 60
    2224:	48 f4       	brcc	.+18     	; 0x2238 <__stack+0x39>
    2226:	44 24       	eor	r4, r4
    2228:	43 94       	inc	r4
    222a:	41 0e       	add	r4, r17
    222c:	27 e0       	ldi	r18, 0x07	; 7
    222e:	0b c0       	rjmp	.+22     	; 0x2246 <__stack+0x47>
    2230:	18 30       	cpi	r17, 0x08	; 8
    2232:	30 f4       	brcc	.+12     	; 0x2240 <__stack+0x41>
    2234:	21 2f       	mov	r18, r17
    2236:	06 c0       	rjmp	.+12     	; 0x2244 <__stack+0x45>
    2238:	27 e0       	ldi	r18, 0x07	; 7
    223a:	4c e3       	ldi	r20, 0x3C	; 60
    223c:	44 2e       	mov	r4, r20
    223e:	03 c0       	rjmp	.+6      	; 0x2246 <__stack+0x47>
    2240:	27 e0       	ldi	r18, 0x07	; 7
    2242:	17 e0       	ldi	r17, 0x07	; 7
    2244:	41 2c       	mov	r4, r1
    2246:	56 01       	movw	r10, r12
    2248:	74 e0       	ldi	r23, 0x04	; 4
    224a:	a7 0e       	add	r10, r23
    224c:	b1 1c       	adc	r11, r1
    224e:	f6 01       	movw	r30, r12
    2250:	60 81       	ld	r22, Z
    2252:	71 81       	ldd	r23, Z+1	; 0x01
    2254:	82 81       	ldd	r24, Z+2	; 0x02
    2256:	93 81       	ldd	r25, Z+3	; 0x03
    2258:	04 2d       	mov	r16, r4
    225a:	a4 01       	movw	r20, r8
    225c:	0e 94 7b 15 	call	0x2af6	; 0x2af6 <__ftoa_engine>
    2260:	6c 01       	movw	r12, r24
    2262:	09 81       	ldd	r16, Y+1	; 0x01
    2264:	00 ff       	sbrs	r16, 0
    2266:	02 c0       	rjmp	.+4      	; 0x226c <__stack+0x6d>
    2268:	03 ff       	sbrs	r16, 3
    226a:	06 c0       	rjmp	.+12     	; 0x2278 <__stack+0x79>
    226c:	71 fc       	sbrc	r7, 1
    226e:	07 c0       	rjmp	.+14     	; 0x227e <__stack+0x7f>
    2270:	72 fc       	sbrc	r7, 2
    2272:	08 c0       	rjmp	.+16     	; 0x2284 <__stack+0x85>
    2274:	61 2c       	mov	r6, r1
    2276:	08 c0       	rjmp	.+16     	; 0x2288 <__stack+0x89>
    2278:	3d e2       	ldi	r19, 0x2D	; 45
    227a:	63 2e       	mov	r6, r19
    227c:	05 c0       	rjmp	.+10     	; 0x2288 <__stack+0x89>
    227e:	2b e2       	ldi	r18, 0x2B	; 43
    2280:	62 2e       	mov	r6, r18
    2282:	02 c0       	rjmp	.+4      	; 0x2288 <__stack+0x89>
    2284:	90 e2       	ldi	r25, 0x20	; 32
    2286:	69 2e       	mov	r6, r25
    2288:	80 2f       	mov	r24, r16
    228a:	8c 70       	andi	r24, 0x0C	; 12
    228c:	99 f1       	breq	.+102    	; 0x22f4 <__stack+0xf5>
    228e:	66 20       	and	r6, r6
    2290:	11 f0       	breq	.+4      	; 0x2296 <__stack+0x97>
    2292:	84 e0       	ldi	r24, 0x04	; 4
    2294:	01 c0       	rjmp	.+2      	; 0x2298 <__stack+0x99>
    2296:	83 e0       	ldi	r24, 0x03	; 3
    2298:	85 15       	cp	r24, r5
    229a:	10 f0       	brcs	.+4      	; 0x22a0 <__stack+0xa1>
    229c:	51 2c       	mov	r5, r1
    229e:	0b c0       	rjmp	.+22     	; 0x22b6 <__stack+0xb7>
    22a0:	58 1a       	sub	r5, r24
    22a2:	73 fc       	sbrc	r7, 3
    22a4:	08 c0       	rjmp	.+16     	; 0x22b6 <__stack+0xb7>
    22a6:	b7 01       	movw	r22, r14
    22a8:	80 e2       	ldi	r24, 0x20	; 32
    22aa:	90 e0       	ldi	r25, 0x00	; 0
    22ac:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <fputc>
    22b0:	5a 94       	dec	r5
    22b2:	c9 f7       	brne	.-14     	; 0x22a6 <__stack+0xa7>
    22b4:	f3 cf       	rjmp	.-26     	; 0x229c <__stack+0x9d>
    22b6:	66 20       	and	r6, r6
    22b8:	29 f0       	breq	.+10     	; 0x22c4 <__stack+0xc5>
    22ba:	b7 01       	movw	r22, r14
    22bc:	86 2d       	mov	r24, r6
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <fputc>
    22c4:	03 fd       	sbrc	r16, 3
    22c6:	03 c0       	rjmp	.+6      	; 0x22ce <__stack+0xcf>
    22c8:	08 e3       	ldi	r16, 0x38	; 56
    22ca:	11 e0       	ldi	r17, 0x01	; 1
    22cc:	02 c0       	rjmp	.+4      	; 0x22d2 <__stack+0xd3>
    22ce:	04 e3       	ldi	r16, 0x34	; 52
    22d0:	11 e0       	ldi	r17, 0x01	; 1
    22d2:	f7 2d       	mov	r31, r7
    22d4:	f0 71       	andi	r31, 0x10	; 16
    22d6:	7f 2e       	mov	r7, r31
    22d8:	f8 01       	movw	r30, r16
    22da:	84 91       	lpm	r24, Z
    22dc:	88 23       	and	r24, r24
    22de:	09 f4       	brne	.+2      	; 0x22e2 <__stack+0xe3>
    22e0:	76 c2       	rjmp	.+1260   	; 0x27ce <__stack+0x5cf>
    22e2:	71 10       	cpse	r7, r1
    22e4:	80 52       	subi	r24, 0x20	; 32
    22e6:	b7 01       	movw	r22, r14
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <fputc>
    22ee:	0f 5f       	subi	r16, 0xFF	; 255
    22f0:	1f 4f       	sbci	r17, 0xFF	; 255
    22f2:	f2 cf       	rjmp	.-28     	; 0x22d8 <__stack+0xd9>
    22f4:	77 fe       	sbrs	r7, 7
    22f6:	0f c0       	rjmp	.+30     	; 0x2316 <__stack+0x117>
    22f8:	4c 0c       	add	r4, r12
    22fa:	04 ff       	sbrs	r16, 4
    22fc:	04 c0       	rjmp	.+8      	; 0x2306 <__stack+0x107>
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	81 33       	cpi	r24, 0x31	; 49
    2302:	09 f4       	brne	.+2      	; 0x2306 <__stack+0x107>
    2304:	4a 94       	dec	r4
    2306:	14 14       	cp	r1, r4
    2308:	74 f5       	brge	.+92     	; 0x2366 <__stack+0x167>
    230a:	f8 e0       	ldi	r31, 0x08	; 8
    230c:	f4 15       	cp	r31, r4
    230e:	78 f5       	brcc	.+94     	; 0x236e <__stack+0x16f>
    2310:	88 e0       	ldi	r24, 0x08	; 8
    2312:	48 2e       	mov	r4, r24
    2314:	2c c0       	rjmp	.+88     	; 0x236e <__stack+0x16f>
    2316:	76 fc       	sbrc	r7, 6
    2318:	2a c0       	rjmp	.+84     	; 0x236e <__stack+0x16f>
    231a:	81 2f       	mov	r24, r17
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	8c 15       	cp	r24, r12
    2320:	9d 05       	cpc	r25, r13
    2322:	9c f0       	brlt	.+38     	; 0x234a <__stack+0x14b>
    2324:	6c ef       	ldi	r22, 0xFC	; 252
    2326:	c6 16       	cp	r12, r22
    2328:	6f ef       	ldi	r22, 0xFF	; 255
    232a:	d6 06       	cpc	r13, r22
    232c:	74 f0       	brlt	.+28     	; 0x234a <__stack+0x14b>
    232e:	77 2d       	mov	r23, r7
    2330:	70 68       	ori	r23, 0x80	; 128
    2332:	77 2e       	mov	r7, r23
    2334:	0a c0       	rjmp	.+20     	; 0x234a <__stack+0x14b>
    2336:	e2 e0       	ldi	r30, 0x02	; 2
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	ec 0f       	add	r30, r28
    233c:	fd 1f       	adc	r31, r29
    233e:	e1 0f       	add	r30, r17
    2340:	f1 1d       	adc	r31, r1
    2342:	80 81       	ld	r24, Z
    2344:	80 33       	cpi	r24, 0x30	; 48
    2346:	19 f4       	brne	.+6      	; 0x234e <__stack+0x14f>
    2348:	11 50       	subi	r17, 0x01	; 1
    234a:	11 11       	cpse	r17, r1
    234c:	f4 cf       	rjmp	.-24     	; 0x2336 <__stack+0x137>
    234e:	77 fe       	sbrs	r7, 7
    2350:	0e c0       	rjmp	.+28     	; 0x236e <__stack+0x16f>
    2352:	44 24       	eor	r4, r4
    2354:	43 94       	inc	r4
    2356:	41 0e       	add	r4, r17
    2358:	81 2f       	mov	r24, r17
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	c8 16       	cp	r12, r24
    235e:	d9 06       	cpc	r13, r25
    2360:	2c f4       	brge	.+10     	; 0x236c <__stack+0x16d>
    2362:	1c 19       	sub	r17, r12
    2364:	04 c0       	rjmp	.+8      	; 0x236e <__stack+0x16f>
    2366:	44 24       	eor	r4, r4
    2368:	43 94       	inc	r4
    236a:	01 c0       	rjmp	.+2      	; 0x236e <__stack+0x16f>
    236c:	10 e0       	ldi	r17, 0x00	; 0
    236e:	77 fe       	sbrs	r7, 7
    2370:	07 c0       	rjmp	.+14     	; 0x2380 <__stack+0x181>
    2372:	1c 14       	cp	r1, r12
    2374:	1d 04       	cpc	r1, r13
    2376:	3c f4       	brge	.+14     	; 0x2386 <__stack+0x187>
    2378:	96 01       	movw	r18, r12
    237a:	2f 5f       	subi	r18, 0xFF	; 255
    237c:	3f 4f       	sbci	r19, 0xFF	; 255
    237e:	05 c0       	rjmp	.+10     	; 0x238a <__stack+0x18b>
    2380:	25 e0       	ldi	r18, 0x05	; 5
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	02 c0       	rjmp	.+4      	; 0x238a <__stack+0x18b>
    2386:	21 e0       	ldi	r18, 0x01	; 1
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	66 20       	and	r6, r6
    238c:	11 f0       	breq	.+4      	; 0x2392 <__stack+0x193>
    238e:	2f 5f       	subi	r18, 0xFF	; 255
    2390:	3f 4f       	sbci	r19, 0xFF	; 255
    2392:	11 23       	and	r17, r17
    2394:	31 f0       	breq	.+12     	; 0x23a2 <__stack+0x1a3>
    2396:	41 2f       	mov	r20, r17
    2398:	50 e0       	ldi	r21, 0x00	; 0
    239a:	4f 5f       	subi	r20, 0xFF	; 255
    239c:	5f 4f       	sbci	r21, 0xFF	; 255
    239e:	24 0f       	add	r18, r20
    23a0:	35 1f       	adc	r19, r21
    23a2:	45 2d       	mov	r20, r5
    23a4:	50 e0       	ldi	r21, 0x00	; 0
    23a6:	24 17       	cp	r18, r20
    23a8:	35 07       	cpc	r19, r21
    23aa:	14 f4       	brge	.+4      	; 0x23b0 <__stack+0x1b1>
    23ac:	52 1a       	sub	r5, r18
    23ae:	01 c0       	rjmp	.+2      	; 0x23b2 <__stack+0x1b3>
    23b0:	51 2c       	mov	r5, r1
    23b2:	87 2d       	mov	r24, r7
    23b4:	89 70       	andi	r24, 0x09	; 9
    23b6:	49 f4       	brne	.+18     	; 0x23ca <__stack+0x1cb>
    23b8:	55 20       	and	r5, r5
    23ba:	39 f0       	breq	.+14     	; 0x23ca <__stack+0x1cb>
    23bc:	b7 01       	movw	r22, r14
    23be:	80 e2       	ldi	r24, 0x20	; 32
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <fputc>
    23c6:	5a 94       	dec	r5
    23c8:	f7 cf       	rjmp	.-18     	; 0x23b8 <__stack+0x1b9>
    23ca:	66 20       	and	r6, r6
    23cc:	29 f0       	breq	.+10     	; 0x23d8 <__stack+0x1d9>
    23ce:	b7 01       	movw	r22, r14
    23d0:	86 2d       	mov	r24, r6
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <fputc>
    23d8:	73 fc       	sbrc	r7, 3
    23da:	09 c0       	rjmp	.+18     	; 0x23ee <__stack+0x1ef>
    23dc:	55 20       	and	r5, r5
    23de:	39 f0       	breq	.+14     	; 0x23ee <__stack+0x1ef>
    23e0:	b7 01       	movw	r22, r14
    23e2:	80 e3       	ldi	r24, 0x30	; 48
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <fputc>
    23ea:	5a 94       	dec	r5
    23ec:	f7 cf       	rjmp	.-18     	; 0x23dc <__stack+0x1dd>
    23ee:	77 fe       	sbrs	r7, 7
    23f0:	5f c0       	rjmp	.+190    	; 0x24b0 <__stack+0x2b1>
    23f2:	9c 2d       	mov	r25, r12
    23f4:	8d 2d       	mov	r24, r13
    23f6:	d7 fe       	sbrs	r13, 7
    23f8:	02 c0       	rjmp	.+4      	; 0x23fe <__stack+0x1ff>
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	69 2e       	mov	r6, r25
    2400:	78 2e       	mov	r7, r24
    2402:	40 e0       	ldi	r20, 0x00	; 0
    2404:	50 e0       	ldi	r21, 0x00	; 0
    2406:	c6 01       	movw	r24, r12
    2408:	84 19       	sub	r24, r4
    240a:	91 09       	sbc	r25, r1
    240c:	9d 87       	std	Y+13, r25	; 0x0d
    240e:	8c 87       	std	Y+12, r24	; 0x0c
    2410:	96 01       	movw	r18, r12
    2412:	26 19       	sub	r18, r6
    2414:	37 09       	sbc	r19, r7
    2416:	28 0d       	add	r18, r8
    2418:	39 1d       	adc	r19, r9
    241a:	81 2f       	mov	r24, r17
    241c:	90 e0       	ldi	r25, 0x00	; 0
    241e:	ee 27       	eor	r30, r30
    2420:	ff 27       	eor	r31, r31
    2422:	e8 1b       	sub	r30, r24
    2424:	f9 0b       	sbc	r31, r25
    2426:	ff 87       	std	Y+15, r31	; 0x0f
    2428:	ee 87       	std	Y+14, r30	; 0x0e
    242a:	ff ef       	ldi	r31, 0xFF	; 255
    242c:	6f 16       	cp	r6, r31
    242e:	7f 06       	cpc	r7, r31
    2430:	69 f4       	brne	.+26     	; 0x244c <__stack+0x24d>
    2432:	b7 01       	movw	r22, r14
    2434:	8e e2       	ldi	r24, 0x2E	; 46
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	2b 8b       	std	Y+19, r18	; 0x13
    243a:	3a 8b       	std	Y+18, r19	; 0x12
    243c:	48 8b       	std	Y+16, r20	; 0x10
    243e:	59 8b       	std	Y+17, r21	; 0x11
    2440:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <fputc>
    2444:	59 89       	ldd	r21, Y+17	; 0x11
    2446:	48 89       	ldd	r20, Y+16	; 0x10
    2448:	3a 89       	ldd	r19, Y+18	; 0x12
    244a:	2b 89       	ldd	r18, Y+19	; 0x13
    244c:	c6 14       	cp	r12, r6
    244e:	d7 04       	cpc	r13, r7
    2450:	54 f0       	brlt	.+20     	; 0x2466 <__stack+0x267>
    2452:	6c 85       	ldd	r22, Y+12	; 0x0c
    2454:	7d 85       	ldd	r23, Y+13	; 0x0d
    2456:	66 15       	cp	r22, r6
    2458:	77 05       	cpc	r23, r7
    245a:	2c f4       	brge	.+10     	; 0x2466 <__stack+0x267>
    245c:	f9 01       	movw	r30, r18
    245e:	e4 0f       	add	r30, r20
    2460:	f5 1f       	adc	r31, r21
    2462:	81 81       	ldd	r24, Z+1	; 0x01
    2464:	01 c0       	rjmp	.+2      	; 0x2468 <__stack+0x269>
    2466:	80 e3       	ldi	r24, 0x30	; 48
    2468:	71 e0       	ldi	r23, 0x01	; 1
    246a:	67 1a       	sub	r6, r23
    246c:	71 08       	sbc	r7, r1
    246e:	4f 5f       	subi	r20, 0xFF	; 255
    2470:	5f 4f       	sbci	r21, 0xFF	; 255
    2472:	ee 85       	ldd	r30, Y+14	; 0x0e
    2474:	ff 85       	ldd	r31, Y+15	; 0x0f
    2476:	6e 16       	cp	r6, r30
    2478:	7f 06       	cpc	r7, r31
    247a:	6c f0       	brlt	.+26     	; 0x2496 <__stack+0x297>
    247c:	b7 01       	movw	r22, r14
    247e:	90 e0       	ldi	r25, 0x00	; 0
    2480:	2b 8b       	std	Y+19, r18	; 0x13
    2482:	3a 8b       	std	Y+18, r19	; 0x12
    2484:	48 8b       	std	Y+16, r20	; 0x10
    2486:	59 8b       	std	Y+17, r21	; 0x11
    2488:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <fputc>
    248c:	2b 89       	ldd	r18, Y+19	; 0x13
    248e:	3a 89       	ldd	r19, Y+18	; 0x12
    2490:	48 89       	ldd	r20, Y+16	; 0x10
    2492:	59 89       	ldd	r21, Y+17	; 0x11
    2494:	ca cf       	rjmp	.-108    	; 0x242a <__stack+0x22b>
    2496:	6c 14       	cp	r6, r12
    2498:	7d 04       	cpc	r7, r13
    249a:	39 f4       	brne	.+14     	; 0x24aa <__stack+0x2ab>
    249c:	9a 81       	ldd	r25, Y+2	; 0x02
    249e:	96 33       	cpi	r25, 0x36	; 54
    24a0:	18 f4       	brcc	.+6      	; 0x24a8 <__stack+0x2a9>
    24a2:	95 33       	cpi	r25, 0x35	; 53
    24a4:	11 f4       	brne	.+4      	; 0x24aa <__stack+0x2ab>
    24a6:	04 ff       	sbrs	r16, 4
    24a8:	81 e3       	ldi	r24, 0x31	; 49
    24aa:	b7 01       	movw	r22, r14
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	4b c0       	rjmp	.+150    	; 0x2546 <__stack+0x347>
    24b0:	8a 81       	ldd	r24, Y+2	; 0x02
    24b2:	81 33       	cpi	r24, 0x31	; 49
    24b4:	09 f0       	breq	.+2      	; 0x24b8 <__stack+0x2b9>
    24b6:	0f 7e       	andi	r16, 0xEF	; 239
    24b8:	b7 01       	movw	r22, r14
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <fputc>
    24c0:	11 11       	cpse	r17, r1
    24c2:	05 c0       	rjmp	.+10     	; 0x24ce <__stack+0x2cf>
    24c4:	74 fe       	sbrs	r7, 4
    24c6:	18 c0       	rjmp	.+48     	; 0x24f8 <__stack+0x2f9>
    24c8:	85 e4       	ldi	r24, 0x45	; 69
    24ca:	90 e0       	ldi	r25, 0x00	; 0
    24cc:	17 c0       	rjmp	.+46     	; 0x24fc <__stack+0x2fd>
    24ce:	b7 01       	movw	r22, r14
    24d0:	8e e2       	ldi	r24, 0x2E	; 46
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <fputc>
    24d8:	82 e0       	ldi	r24, 0x02	; 2
    24da:	66 24       	eor	r6, r6
    24dc:	63 94       	inc	r6
    24de:	68 0e       	add	r6, r24
    24e0:	f4 01       	movw	r30, r8
    24e2:	e8 0f       	add	r30, r24
    24e4:	f1 1d       	adc	r31, r1
    24e6:	80 81       	ld	r24, Z
    24e8:	b7 01       	movw	r22, r14
    24ea:	90 e0       	ldi	r25, 0x00	; 0
    24ec:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <fputc>
    24f0:	11 50       	subi	r17, 0x01	; 1
    24f2:	41 f3       	breq	.-48     	; 0x24c4 <__stack+0x2c5>
    24f4:	86 2d       	mov	r24, r6
    24f6:	f1 cf       	rjmp	.-30     	; 0x24da <__stack+0x2db>
    24f8:	85 e6       	ldi	r24, 0x65	; 101
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	b7 01       	movw	r22, r14
    24fe:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <fputc>
    2502:	d7 fc       	sbrc	r13, 7
    2504:	05 c0       	rjmp	.+10     	; 0x2510 <__stack+0x311>
    2506:	c1 14       	cp	r12, r1
    2508:	d1 04       	cpc	r13, r1
    250a:	39 f4       	brne	.+14     	; 0x251a <__stack+0x31b>
    250c:	04 ff       	sbrs	r16, 4
    250e:	05 c0       	rjmp	.+10     	; 0x251a <__stack+0x31b>
    2510:	d1 94       	neg	r13
    2512:	c1 94       	neg	r12
    2514:	d1 08       	sbc	r13, r1
    2516:	8d e2       	ldi	r24, 0x2D	; 45
    2518:	01 c0       	rjmp	.+2      	; 0x251c <__stack+0x31d>
    251a:	8b e2       	ldi	r24, 0x2B	; 43
    251c:	b7 01       	movw	r22, r14
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <fputc>
    2524:	80 e3       	ldi	r24, 0x30	; 48
    2526:	6a e0       	ldi	r22, 0x0A	; 10
    2528:	c6 16       	cp	r12, r22
    252a:	d1 04       	cpc	r13, r1
    252c:	2c f0       	brlt	.+10     	; 0x2538 <__stack+0x339>
    252e:	8f 5f       	subi	r24, 0xFF	; 255
    2530:	fa e0       	ldi	r31, 0x0A	; 10
    2532:	cf 1a       	sub	r12, r31
    2534:	d1 08       	sbc	r13, r1
    2536:	f7 cf       	rjmp	.-18     	; 0x2526 <__stack+0x327>
    2538:	b7 01       	movw	r22, r14
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <fputc>
    2540:	b7 01       	movw	r22, r14
    2542:	c6 01       	movw	r24, r12
    2544:	c0 96       	adiw	r24, 0x30	; 48
    2546:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <fputc>
    254a:	41 c1       	rjmp	.+642    	; 0x27ce <__stack+0x5cf>
    254c:	83 36       	cpi	r24, 0x63	; 99
    254e:	31 f0       	breq	.+12     	; 0x255c <__stack+0x35d>
    2550:	83 37       	cpi	r24, 0x73	; 115
    2552:	79 f0       	breq	.+30     	; 0x2572 <__stack+0x373>
    2554:	83 35       	cpi	r24, 0x53	; 83
    2556:	09 f0       	breq	.+2      	; 0x255a <__stack+0x35b>
    2558:	58 c0       	rjmp	.+176    	; 0x260a <__stack+0x40b>
    255a:	21 c0       	rjmp	.+66     	; 0x259e <__stack+0x39f>
    255c:	56 01       	movw	r10, r12
    255e:	72 e0       	ldi	r23, 0x02	; 2
    2560:	a7 0e       	add	r10, r23
    2562:	b1 1c       	adc	r11, r1
    2564:	f6 01       	movw	r30, r12
    2566:	80 81       	ld	r24, Z
    2568:	89 83       	std	Y+1, r24	; 0x01
    256a:	01 e0       	ldi	r16, 0x01	; 1
    256c:	10 e0       	ldi	r17, 0x00	; 0
    256e:	64 01       	movw	r12, r8
    2570:	14 c0       	rjmp	.+40     	; 0x259a <__stack+0x39b>
    2572:	56 01       	movw	r10, r12
    2574:	f2 e0       	ldi	r31, 0x02	; 2
    2576:	af 0e       	add	r10, r31
    2578:	b1 1c       	adc	r11, r1
    257a:	f6 01       	movw	r30, r12
    257c:	c0 80       	ld	r12, Z
    257e:	d1 80       	ldd	r13, Z+1	; 0x01
    2580:	26 ff       	sbrs	r18, 6
    2582:	03 c0       	rjmp	.+6      	; 0x258a <__stack+0x38b>
    2584:	61 2f       	mov	r22, r17
    2586:	70 e0       	ldi	r23, 0x00	; 0
    2588:	02 c0       	rjmp	.+4      	; 0x258e <__stack+0x38f>
    258a:	6f ef       	ldi	r22, 0xFF	; 255
    258c:	7f ef       	ldi	r23, 0xFF	; 255
    258e:	c6 01       	movw	r24, r12
    2590:	2b 8b       	std	Y+19, r18	; 0x13
    2592:	0e 94 5e 16 	call	0x2cbc	; 0x2cbc <strnlen>
    2596:	8c 01       	movw	r16, r24
    2598:	2b 89       	ldd	r18, Y+19	; 0x13
    259a:	2f 77       	andi	r18, 0x7F	; 127
    259c:	15 c0       	rjmp	.+42     	; 0x25c8 <__stack+0x3c9>
    259e:	56 01       	movw	r10, r12
    25a0:	f2 e0       	ldi	r31, 0x02	; 2
    25a2:	af 0e       	add	r10, r31
    25a4:	b1 1c       	adc	r11, r1
    25a6:	f6 01       	movw	r30, r12
    25a8:	c0 80       	ld	r12, Z
    25aa:	d1 80       	ldd	r13, Z+1	; 0x01
    25ac:	26 ff       	sbrs	r18, 6
    25ae:	03 c0       	rjmp	.+6      	; 0x25b6 <__stack+0x3b7>
    25b0:	61 2f       	mov	r22, r17
    25b2:	70 e0       	ldi	r23, 0x00	; 0
    25b4:	02 c0       	rjmp	.+4      	; 0x25ba <__stack+0x3bb>
    25b6:	6f ef       	ldi	r22, 0xFF	; 255
    25b8:	7f ef       	ldi	r23, 0xFF	; 255
    25ba:	c6 01       	movw	r24, r12
    25bc:	2b 8b       	std	Y+19, r18	; 0x13
    25be:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <strnlen_P>
    25c2:	8c 01       	movw	r16, r24
    25c4:	2b 89       	ldd	r18, Y+19	; 0x13
    25c6:	20 68       	ori	r18, 0x80	; 128
    25c8:	72 2e       	mov	r7, r18
    25ca:	23 fd       	sbrc	r18, 3
    25cc:	1a c0       	rjmp	.+52     	; 0x2602 <__stack+0x403>
    25ce:	85 2d       	mov	r24, r5
    25d0:	90 e0       	ldi	r25, 0x00	; 0
    25d2:	08 17       	cp	r16, r24
    25d4:	19 07       	cpc	r17, r25
    25d6:	a8 f4       	brcc	.+42     	; 0x2602 <__stack+0x403>
    25d8:	b7 01       	movw	r22, r14
    25da:	80 e2       	ldi	r24, 0x20	; 32
    25dc:	90 e0       	ldi	r25, 0x00	; 0
    25de:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <fputc>
    25e2:	5a 94       	dec	r5
    25e4:	f4 cf       	rjmp	.-24     	; 0x25ce <__stack+0x3cf>
    25e6:	f6 01       	movw	r30, r12
    25e8:	77 fc       	sbrc	r7, 7
    25ea:	85 91       	lpm	r24, Z+
    25ec:	77 fe       	sbrs	r7, 7
    25ee:	81 91       	ld	r24, Z+
    25f0:	6f 01       	movw	r12, r30
    25f2:	b7 01       	movw	r22, r14
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <fputc>
    25fa:	51 10       	cpse	r5, r1
    25fc:	5a 94       	dec	r5
    25fe:	01 50       	subi	r16, 0x01	; 1
    2600:	11 09       	sbc	r17, r1
    2602:	01 15       	cp	r16, r1
    2604:	11 05       	cpc	r17, r1
    2606:	79 f7       	brne	.-34     	; 0x25e6 <__stack+0x3e7>
    2608:	e2 c0       	rjmp	.+452    	; 0x27ce <__stack+0x5cf>
    260a:	84 36       	cpi	r24, 0x64	; 100
    260c:	11 f0       	breq	.+4      	; 0x2612 <__stack+0x413>
    260e:	89 36       	cpi	r24, 0x69	; 105
    2610:	51 f5       	brne	.+84     	; 0x2666 <__stack+0x467>
    2612:	56 01       	movw	r10, r12
    2614:	27 ff       	sbrs	r18, 7
    2616:	09 c0       	rjmp	.+18     	; 0x262a <__stack+0x42b>
    2618:	f4 e0       	ldi	r31, 0x04	; 4
    261a:	af 0e       	add	r10, r31
    261c:	b1 1c       	adc	r11, r1
    261e:	f6 01       	movw	r30, r12
    2620:	60 81       	ld	r22, Z
    2622:	71 81       	ldd	r23, Z+1	; 0x01
    2624:	82 81       	ldd	r24, Z+2	; 0x02
    2626:	93 81       	ldd	r25, Z+3	; 0x03
    2628:	0a c0       	rjmp	.+20     	; 0x263e <__stack+0x43f>
    262a:	f2 e0       	ldi	r31, 0x02	; 2
    262c:	af 0e       	add	r10, r31
    262e:	b1 1c       	adc	r11, r1
    2630:	f6 01       	movw	r30, r12
    2632:	60 81       	ld	r22, Z
    2634:	71 81       	ldd	r23, Z+1	; 0x01
    2636:	88 27       	eor	r24, r24
    2638:	77 fd       	sbrc	r23, 7
    263a:	80 95       	com	r24
    263c:	98 2f       	mov	r25, r24
    263e:	02 2f       	mov	r16, r18
    2640:	0f 76       	andi	r16, 0x6F	; 111
    2642:	97 ff       	sbrs	r25, 7
    2644:	08 c0       	rjmp	.+16     	; 0x2656 <__stack+0x457>
    2646:	90 95       	com	r25
    2648:	80 95       	com	r24
    264a:	70 95       	com	r23
    264c:	61 95       	neg	r22
    264e:	7f 4f       	sbci	r23, 0xFF	; 255
    2650:	8f 4f       	sbci	r24, 0xFF	; 255
    2652:	9f 4f       	sbci	r25, 0xFF	; 255
    2654:	00 68       	ori	r16, 0x80	; 128
    2656:	2a e0       	ldi	r18, 0x0A	; 10
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	a4 01       	movw	r20, r8
    265c:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__ultoa_invert>
    2660:	c8 2e       	mov	r12, r24
    2662:	c8 18       	sub	r12, r8
    2664:	3e c0       	rjmp	.+124    	; 0x26e2 <__stack+0x4e3>
    2666:	02 2f       	mov	r16, r18
    2668:	85 37       	cpi	r24, 0x75	; 117
    266a:	21 f4       	brne	.+8      	; 0x2674 <__stack+0x475>
    266c:	0f 7e       	andi	r16, 0xEF	; 239
    266e:	2a e0       	ldi	r18, 0x0A	; 10
    2670:	30 e0       	ldi	r19, 0x00	; 0
    2672:	1d c0       	rjmp	.+58     	; 0x26ae <__stack+0x4af>
    2674:	09 7f       	andi	r16, 0xF9	; 249
    2676:	8f 36       	cpi	r24, 0x6F	; 111
    2678:	91 f0       	breq	.+36     	; 0x269e <__stack+0x49f>
    267a:	18 f4       	brcc	.+6      	; 0x2682 <__stack+0x483>
    267c:	88 35       	cpi	r24, 0x58	; 88
    267e:	59 f0       	breq	.+22     	; 0x2696 <__stack+0x497>
    2680:	b0 c0       	rjmp	.+352    	; 0x27e2 <__stack+0x5e3>
    2682:	80 37       	cpi	r24, 0x70	; 112
    2684:	19 f0       	breq	.+6      	; 0x268c <__stack+0x48d>
    2686:	88 37       	cpi	r24, 0x78	; 120
    2688:	11 f0       	breq	.+4      	; 0x268e <__stack+0x48f>
    268a:	ab c0       	rjmp	.+342    	; 0x27e2 <__stack+0x5e3>
    268c:	00 61       	ori	r16, 0x10	; 16
    268e:	04 ff       	sbrs	r16, 4
    2690:	09 c0       	rjmp	.+18     	; 0x26a4 <__stack+0x4a5>
    2692:	04 60       	ori	r16, 0x04	; 4
    2694:	07 c0       	rjmp	.+14     	; 0x26a4 <__stack+0x4a5>
    2696:	24 ff       	sbrs	r18, 4
    2698:	08 c0       	rjmp	.+16     	; 0x26aa <__stack+0x4ab>
    269a:	06 60       	ori	r16, 0x06	; 6
    269c:	06 c0       	rjmp	.+12     	; 0x26aa <__stack+0x4ab>
    269e:	28 e0       	ldi	r18, 0x08	; 8
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	05 c0       	rjmp	.+10     	; 0x26ae <__stack+0x4af>
    26a4:	20 e1       	ldi	r18, 0x10	; 16
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	02 c0       	rjmp	.+4      	; 0x26ae <__stack+0x4af>
    26aa:	20 e1       	ldi	r18, 0x10	; 16
    26ac:	32 e0       	ldi	r19, 0x02	; 2
    26ae:	56 01       	movw	r10, r12
    26b0:	07 ff       	sbrs	r16, 7
    26b2:	09 c0       	rjmp	.+18     	; 0x26c6 <__stack+0x4c7>
    26b4:	f4 e0       	ldi	r31, 0x04	; 4
    26b6:	af 0e       	add	r10, r31
    26b8:	b1 1c       	adc	r11, r1
    26ba:	f6 01       	movw	r30, r12
    26bc:	60 81       	ld	r22, Z
    26be:	71 81       	ldd	r23, Z+1	; 0x01
    26c0:	82 81       	ldd	r24, Z+2	; 0x02
    26c2:	93 81       	ldd	r25, Z+3	; 0x03
    26c4:	08 c0       	rjmp	.+16     	; 0x26d6 <__stack+0x4d7>
    26c6:	f2 e0       	ldi	r31, 0x02	; 2
    26c8:	af 0e       	add	r10, r31
    26ca:	b1 1c       	adc	r11, r1
    26cc:	f6 01       	movw	r30, r12
    26ce:	60 81       	ld	r22, Z
    26d0:	71 81       	ldd	r23, Z+1	; 0x01
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	a4 01       	movw	r20, r8
    26d8:	0e 94 dc 16 	call	0x2db8	; 0x2db8 <__ultoa_invert>
    26dc:	c8 2e       	mov	r12, r24
    26de:	c8 18       	sub	r12, r8
    26e0:	0f 77       	andi	r16, 0x7F	; 127
    26e2:	06 ff       	sbrs	r16, 6
    26e4:	0b c0       	rjmp	.+22     	; 0x26fc <__stack+0x4fd>
    26e6:	20 2f       	mov	r18, r16
    26e8:	2e 7f       	andi	r18, 0xFE	; 254
    26ea:	c1 16       	cp	r12, r17
    26ec:	50 f4       	brcc	.+20     	; 0x2702 <__stack+0x503>
    26ee:	04 ff       	sbrs	r16, 4
    26f0:	0a c0       	rjmp	.+20     	; 0x2706 <__stack+0x507>
    26f2:	02 fd       	sbrc	r16, 2
    26f4:	08 c0       	rjmp	.+16     	; 0x2706 <__stack+0x507>
    26f6:	20 2f       	mov	r18, r16
    26f8:	2e 7e       	andi	r18, 0xEE	; 238
    26fa:	05 c0       	rjmp	.+10     	; 0x2706 <__stack+0x507>
    26fc:	dc 2c       	mov	r13, r12
    26fe:	20 2f       	mov	r18, r16
    2700:	03 c0       	rjmp	.+6      	; 0x2708 <__stack+0x509>
    2702:	dc 2c       	mov	r13, r12
    2704:	01 c0       	rjmp	.+2      	; 0x2708 <__stack+0x509>
    2706:	d1 2e       	mov	r13, r17
    2708:	24 ff       	sbrs	r18, 4
    270a:	0d c0       	rjmp	.+26     	; 0x2726 <__stack+0x527>
    270c:	fe 01       	movw	r30, r28
    270e:	ec 0d       	add	r30, r12
    2710:	f1 1d       	adc	r31, r1
    2712:	80 81       	ld	r24, Z
    2714:	80 33       	cpi	r24, 0x30	; 48
    2716:	11 f4       	brne	.+4      	; 0x271c <__stack+0x51d>
    2718:	29 7e       	andi	r18, 0xE9	; 233
    271a:	09 c0       	rjmp	.+18     	; 0x272e <__stack+0x52f>
    271c:	22 ff       	sbrs	r18, 2
    271e:	06 c0       	rjmp	.+12     	; 0x272c <__stack+0x52d>
    2720:	d3 94       	inc	r13
    2722:	d3 94       	inc	r13
    2724:	04 c0       	rjmp	.+8      	; 0x272e <__stack+0x52f>
    2726:	82 2f       	mov	r24, r18
    2728:	86 78       	andi	r24, 0x86	; 134
    272a:	09 f0       	breq	.+2      	; 0x272e <__stack+0x52f>
    272c:	d3 94       	inc	r13
    272e:	23 fd       	sbrc	r18, 3
    2730:	13 c0       	rjmp	.+38     	; 0x2758 <__stack+0x559>
    2732:	20 ff       	sbrs	r18, 0
    2734:	06 c0       	rjmp	.+12     	; 0x2742 <__stack+0x543>
    2736:	1c 2d       	mov	r17, r12
    2738:	d5 14       	cp	r13, r5
    273a:	18 f4       	brcc	.+6      	; 0x2742 <__stack+0x543>
    273c:	15 0d       	add	r17, r5
    273e:	1d 19       	sub	r17, r13
    2740:	d5 2c       	mov	r13, r5
    2742:	d5 14       	cp	r13, r5
    2744:	68 f4       	brcc	.+26     	; 0x2760 <__stack+0x561>
    2746:	b7 01       	movw	r22, r14
    2748:	80 e2       	ldi	r24, 0x20	; 32
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	2b 8b       	std	Y+19, r18	; 0x13
    274e:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <fputc>
    2752:	d3 94       	inc	r13
    2754:	2b 89       	ldd	r18, Y+19	; 0x13
    2756:	f5 cf       	rjmp	.-22     	; 0x2742 <__stack+0x543>
    2758:	d5 14       	cp	r13, r5
    275a:	10 f4       	brcc	.+4      	; 0x2760 <__stack+0x561>
    275c:	5d 18       	sub	r5, r13
    275e:	01 c0       	rjmp	.+2      	; 0x2762 <__stack+0x563>
    2760:	51 2c       	mov	r5, r1
    2762:	24 ff       	sbrs	r18, 4
    2764:	12 c0       	rjmp	.+36     	; 0x278a <__stack+0x58b>
    2766:	b7 01       	movw	r22, r14
    2768:	80 e3       	ldi	r24, 0x30	; 48
    276a:	90 e0       	ldi	r25, 0x00	; 0
    276c:	2b 8b       	std	Y+19, r18	; 0x13
    276e:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <fputc>
    2772:	2b 89       	ldd	r18, Y+19	; 0x13
    2774:	22 ff       	sbrs	r18, 2
    2776:	17 c0       	rjmp	.+46     	; 0x27a6 <__stack+0x5a7>
    2778:	21 ff       	sbrs	r18, 1
    277a:	03 c0       	rjmp	.+6      	; 0x2782 <__stack+0x583>
    277c:	88 e5       	ldi	r24, 0x58	; 88
    277e:	90 e0       	ldi	r25, 0x00	; 0
    2780:	02 c0       	rjmp	.+4      	; 0x2786 <__stack+0x587>
    2782:	88 e7       	ldi	r24, 0x78	; 120
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	b7 01       	movw	r22, r14
    2788:	0c c0       	rjmp	.+24     	; 0x27a2 <__stack+0x5a3>
    278a:	82 2f       	mov	r24, r18
    278c:	86 78       	andi	r24, 0x86	; 134
    278e:	59 f0       	breq	.+22     	; 0x27a6 <__stack+0x5a7>
    2790:	21 fd       	sbrc	r18, 1
    2792:	02 c0       	rjmp	.+4      	; 0x2798 <__stack+0x599>
    2794:	80 e2       	ldi	r24, 0x20	; 32
    2796:	01 c0       	rjmp	.+2      	; 0x279a <__stack+0x59b>
    2798:	8b e2       	ldi	r24, 0x2B	; 43
    279a:	27 fd       	sbrc	r18, 7
    279c:	8d e2       	ldi	r24, 0x2D	; 45
    279e:	b7 01       	movw	r22, r14
    27a0:	90 e0       	ldi	r25, 0x00	; 0
    27a2:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <fputc>
    27a6:	c1 16       	cp	r12, r17
    27a8:	38 f4       	brcc	.+14     	; 0x27b8 <__stack+0x5b9>
    27aa:	b7 01       	movw	r22, r14
    27ac:	80 e3       	ldi	r24, 0x30	; 48
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <fputc>
    27b4:	11 50       	subi	r17, 0x01	; 1
    27b6:	f7 cf       	rjmp	.-18     	; 0x27a6 <__stack+0x5a7>
    27b8:	ca 94       	dec	r12
    27ba:	f4 01       	movw	r30, r8
    27bc:	ec 0d       	add	r30, r12
    27be:	f1 1d       	adc	r31, r1
    27c0:	80 81       	ld	r24, Z
    27c2:	b7 01       	movw	r22, r14
    27c4:	90 e0       	ldi	r25, 0x00	; 0
    27c6:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <fputc>
    27ca:	c1 10       	cpse	r12, r1
    27cc:	f5 cf       	rjmp	.-22     	; 0x27b8 <__stack+0x5b9>
    27ce:	55 20       	and	r5, r5
    27d0:	09 f4       	brne	.+2      	; 0x27d4 <__stack+0x5d5>
    27d2:	c2 cc       	rjmp	.-1660   	; 0x2158 <vfprintf+0x58>
    27d4:	b7 01       	movw	r22, r14
    27d6:	80 e2       	ldi	r24, 0x20	; 32
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <fputc>
    27de:	5a 94       	dec	r5
    27e0:	f6 cf       	rjmp	.-20     	; 0x27ce <__stack+0x5cf>
    27e2:	f7 01       	movw	r30, r14
    27e4:	86 81       	ldd	r24, Z+6	; 0x06
    27e6:	97 81       	ldd	r25, Z+7	; 0x07
    27e8:	02 c0       	rjmp	.+4      	; 0x27ee <__stack+0x5ef>
    27ea:	8f ef       	ldi	r24, 0xFF	; 255
    27ec:	9f ef       	ldi	r25, 0xFF	; 255
    27ee:	63 96       	adiw	r28, 0x13	; 19
    27f0:	e2 e1       	ldi	r30, 0x12	; 18
    27f2:	0c 94 39 14 	jmp	0x2872	; 0x2872 <__epilogue_restores__>

000027f6 <__udivmodsi4>:
    27f6:	a1 e2       	ldi	r26, 0x21	; 33
    27f8:	1a 2e       	mov	r1, r26
    27fa:	aa 1b       	sub	r26, r26
    27fc:	bb 1b       	sub	r27, r27
    27fe:	fd 01       	movw	r30, r26
    2800:	0d c0       	rjmp	.+26     	; 0x281c <__udivmodsi4_ep>

00002802 <__udivmodsi4_loop>:
    2802:	aa 1f       	adc	r26, r26
    2804:	bb 1f       	adc	r27, r27
    2806:	ee 1f       	adc	r30, r30
    2808:	ff 1f       	adc	r31, r31
    280a:	a2 17       	cp	r26, r18
    280c:	b3 07       	cpc	r27, r19
    280e:	e4 07       	cpc	r30, r20
    2810:	f5 07       	cpc	r31, r21
    2812:	20 f0       	brcs	.+8      	; 0x281c <__udivmodsi4_ep>
    2814:	a2 1b       	sub	r26, r18
    2816:	b3 0b       	sbc	r27, r19
    2818:	e4 0b       	sbc	r30, r20
    281a:	f5 0b       	sbc	r31, r21

0000281c <__udivmodsi4_ep>:
    281c:	66 1f       	adc	r22, r22
    281e:	77 1f       	adc	r23, r23
    2820:	88 1f       	adc	r24, r24
    2822:	99 1f       	adc	r25, r25
    2824:	1a 94       	dec	r1
    2826:	69 f7       	brne	.-38     	; 0x2802 <__udivmodsi4_loop>
    2828:	60 95       	com	r22
    282a:	70 95       	com	r23
    282c:	80 95       	com	r24
    282e:	90 95       	com	r25
    2830:	9b 01       	movw	r18, r22
    2832:	ac 01       	movw	r20, r24
    2834:	bd 01       	movw	r22, r26
    2836:	cf 01       	movw	r24, r30
    2838:	08 95       	ret

0000283a <__prologue_saves__>:
    283a:	2f 92       	push	r2
    283c:	3f 92       	push	r3
    283e:	4f 92       	push	r4
    2840:	5f 92       	push	r5
    2842:	6f 92       	push	r6
    2844:	7f 92       	push	r7
    2846:	8f 92       	push	r8
    2848:	9f 92       	push	r9
    284a:	af 92       	push	r10
    284c:	bf 92       	push	r11
    284e:	cf 92       	push	r12
    2850:	df 92       	push	r13
    2852:	ef 92       	push	r14
    2854:	ff 92       	push	r15
    2856:	0f 93       	push	r16
    2858:	1f 93       	push	r17
    285a:	cf 93       	push	r28
    285c:	df 93       	push	r29
    285e:	cd b7       	in	r28, 0x3d	; 61
    2860:	de b7       	in	r29, 0x3e	; 62
    2862:	ca 1b       	sub	r28, r26
    2864:	db 0b       	sbc	r29, r27
    2866:	0f b6       	in	r0, 0x3f	; 63
    2868:	f8 94       	cli
    286a:	de bf       	out	0x3e, r29	; 62
    286c:	0f be       	out	0x3f, r0	; 63
    286e:	cd bf       	out	0x3d, r28	; 61
    2870:	09 94       	ijmp

00002872 <__epilogue_restores__>:
    2872:	2a 88       	ldd	r2, Y+18	; 0x12
    2874:	39 88       	ldd	r3, Y+17	; 0x11
    2876:	48 88       	ldd	r4, Y+16	; 0x10
    2878:	5f 84       	ldd	r5, Y+15	; 0x0f
    287a:	6e 84       	ldd	r6, Y+14	; 0x0e
    287c:	7d 84       	ldd	r7, Y+13	; 0x0d
    287e:	8c 84       	ldd	r8, Y+12	; 0x0c
    2880:	9b 84       	ldd	r9, Y+11	; 0x0b
    2882:	aa 84       	ldd	r10, Y+10	; 0x0a
    2884:	b9 84       	ldd	r11, Y+9	; 0x09
    2886:	c8 84       	ldd	r12, Y+8	; 0x08
    2888:	df 80       	ldd	r13, Y+7	; 0x07
    288a:	ee 80       	ldd	r14, Y+6	; 0x06
    288c:	fd 80       	ldd	r15, Y+5	; 0x05
    288e:	0c 81       	ldd	r16, Y+4	; 0x04
    2890:	1b 81       	ldd	r17, Y+3	; 0x03
    2892:	aa 81       	ldd	r26, Y+2	; 0x02
    2894:	b9 81       	ldd	r27, Y+1	; 0x01
    2896:	ce 0f       	add	r28, r30
    2898:	d1 1d       	adc	r29, r1
    289a:	0f b6       	in	r0, 0x3f	; 63
    289c:	f8 94       	cli
    289e:	de bf       	out	0x3e, r29	; 62
    28a0:	0f be       	out	0x3f, r0	; 63
    28a2:	cd bf       	out	0x3d, r28	; 61
    28a4:	ed 01       	movw	r28, r26
    28a6:	08 95       	ret

000028a8 <malloc>:
    28a8:	cf 93       	push	r28
    28aa:	df 93       	push	r29
    28ac:	82 30       	cpi	r24, 0x02	; 2
    28ae:	91 05       	cpc	r25, r1
    28b0:	10 f4       	brcc	.+4      	; 0x28b6 <malloc+0xe>
    28b2:	82 e0       	ldi	r24, 0x02	; 2
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	e0 91 02 09 	lds	r30, 0x0902
    28ba:	f0 91 03 09 	lds	r31, 0x0903
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	a0 e0       	ldi	r26, 0x00	; 0
    28c4:	b0 e0       	ldi	r27, 0x00	; 0
    28c6:	30 97       	sbiw	r30, 0x00	; 0
    28c8:	39 f1       	breq	.+78     	; 0x2918 <malloc+0x70>
    28ca:	40 81       	ld	r20, Z
    28cc:	51 81       	ldd	r21, Z+1	; 0x01
    28ce:	48 17       	cp	r20, r24
    28d0:	59 07       	cpc	r21, r25
    28d2:	b8 f0       	brcs	.+46     	; 0x2902 <malloc+0x5a>
    28d4:	48 17       	cp	r20, r24
    28d6:	59 07       	cpc	r21, r25
    28d8:	71 f4       	brne	.+28     	; 0x28f6 <malloc+0x4e>
    28da:	82 81       	ldd	r24, Z+2	; 0x02
    28dc:	93 81       	ldd	r25, Z+3	; 0x03
    28de:	10 97       	sbiw	r26, 0x00	; 0
    28e0:	29 f0       	breq	.+10     	; 0x28ec <malloc+0x44>
    28e2:	13 96       	adiw	r26, 0x03	; 3
    28e4:	9c 93       	st	X, r25
    28e6:	8e 93       	st	-X, r24
    28e8:	12 97       	sbiw	r26, 0x02	; 2
    28ea:	2c c0       	rjmp	.+88     	; 0x2944 <malloc+0x9c>
    28ec:	90 93 03 09 	sts	0x0903, r25
    28f0:	80 93 02 09 	sts	0x0902, r24
    28f4:	27 c0       	rjmp	.+78     	; 0x2944 <malloc+0x9c>
    28f6:	21 15       	cp	r18, r1
    28f8:	31 05       	cpc	r19, r1
    28fa:	31 f0       	breq	.+12     	; 0x2908 <malloc+0x60>
    28fc:	42 17       	cp	r20, r18
    28fe:	53 07       	cpc	r21, r19
    2900:	18 f0       	brcs	.+6      	; 0x2908 <malloc+0x60>
    2902:	a9 01       	movw	r20, r18
    2904:	db 01       	movw	r26, r22
    2906:	01 c0       	rjmp	.+2      	; 0x290a <malloc+0x62>
    2908:	ef 01       	movw	r28, r30
    290a:	9a 01       	movw	r18, r20
    290c:	bd 01       	movw	r22, r26
    290e:	df 01       	movw	r26, r30
    2910:	02 80       	ldd	r0, Z+2	; 0x02
    2912:	f3 81       	ldd	r31, Z+3	; 0x03
    2914:	e0 2d       	mov	r30, r0
    2916:	d7 cf       	rjmp	.-82     	; 0x28c6 <malloc+0x1e>
    2918:	21 15       	cp	r18, r1
    291a:	31 05       	cpc	r19, r1
    291c:	f9 f0       	breq	.+62     	; 0x295c <malloc+0xb4>
    291e:	28 1b       	sub	r18, r24
    2920:	39 0b       	sbc	r19, r25
    2922:	24 30       	cpi	r18, 0x04	; 4
    2924:	31 05       	cpc	r19, r1
    2926:	80 f4       	brcc	.+32     	; 0x2948 <malloc+0xa0>
    2928:	8a 81       	ldd	r24, Y+2	; 0x02
    292a:	9b 81       	ldd	r25, Y+3	; 0x03
    292c:	61 15       	cp	r22, r1
    292e:	71 05       	cpc	r23, r1
    2930:	21 f0       	breq	.+8      	; 0x293a <malloc+0x92>
    2932:	fb 01       	movw	r30, r22
    2934:	93 83       	std	Z+3, r25	; 0x03
    2936:	82 83       	std	Z+2, r24	; 0x02
    2938:	04 c0       	rjmp	.+8      	; 0x2942 <malloc+0x9a>
    293a:	90 93 03 09 	sts	0x0903, r25
    293e:	80 93 02 09 	sts	0x0902, r24
    2942:	fe 01       	movw	r30, r28
    2944:	32 96       	adiw	r30, 0x02	; 2
    2946:	44 c0       	rjmp	.+136    	; 0x29d0 <malloc+0x128>
    2948:	fe 01       	movw	r30, r28
    294a:	e2 0f       	add	r30, r18
    294c:	f3 1f       	adc	r31, r19
    294e:	81 93       	st	Z+, r24
    2950:	91 93       	st	Z+, r25
    2952:	22 50       	subi	r18, 0x02	; 2
    2954:	31 09       	sbc	r19, r1
    2956:	39 83       	std	Y+1, r19	; 0x01
    2958:	28 83       	st	Y, r18
    295a:	3a c0       	rjmp	.+116    	; 0x29d0 <malloc+0x128>
    295c:	20 91 00 09 	lds	r18, 0x0900
    2960:	30 91 01 09 	lds	r19, 0x0901
    2964:	23 2b       	or	r18, r19
    2966:	41 f4       	brne	.+16     	; 0x2978 <malloc+0xd0>
    2968:	20 91 02 02 	lds	r18, 0x0202
    296c:	30 91 03 02 	lds	r19, 0x0203
    2970:	30 93 01 09 	sts	0x0901, r19
    2974:	20 93 00 09 	sts	0x0900, r18
    2978:	20 91 00 02 	lds	r18, 0x0200
    297c:	30 91 01 02 	lds	r19, 0x0201
    2980:	21 15       	cp	r18, r1
    2982:	31 05       	cpc	r19, r1
    2984:	41 f4       	brne	.+16     	; 0x2996 <malloc+0xee>
    2986:	2d b7       	in	r18, 0x3d	; 61
    2988:	3e b7       	in	r19, 0x3e	; 62
    298a:	40 91 04 02 	lds	r20, 0x0204
    298e:	50 91 05 02 	lds	r21, 0x0205
    2992:	24 1b       	sub	r18, r20
    2994:	35 0b       	sbc	r19, r21
    2996:	e0 91 00 09 	lds	r30, 0x0900
    299a:	f0 91 01 09 	lds	r31, 0x0901
    299e:	e2 17       	cp	r30, r18
    29a0:	f3 07       	cpc	r31, r19
    29a2:	a0 f4       	brcc	.+40     	; 0x29cc <malloc+0x124>
    29a4:	2e 1b       	sub	r18, r30
    29a6:	3f 0b       	sbc	r19, r31
    29a8:	28 17       	cp	r18, r24
    29aa:	39 07       	cpc	r19, r25
    29ac:	78 f0       	brcs	.+30     	; 0x29cc <malloc+0x124>
    29ae:	ac 01       	movw	r20, r24
    29b0:	4e 5f       	subi	r20, 0xFE	; 254
    29b2:	5f 4f       	sbci	r21, 0xFF	; 255
    29b4:	24 17       	cp	r18, r20
    29b6:	35 07       	cpc	r19, r21
    29b8:	48 f0       	brcs	.+18     	; 0x29cc <malloc+0x124>
    29ba:	4e 0f       	add	r20, r30
    29bc:	5f 1f       	adc	r21, r31
    29be:	50 93 01 09 	sts	0x0901, r21
    29c2:	40 93 00 09 	sts	0x0900, r20
    29c6:	81 93       	st	Z+, r24
    29c8:	91 93       	st	Z+, r25
    29ca:	02 c0       	rjmp	.+4      	; 0x29d0 <malloc+0x128>
    29cc:	e0 e0       	ldi	r30, 0x00	; 0
    29ce:	f0 e0       	ldi	r31, 0x00	; 0
    29d0:	cf 01       	movw	r24, r30
    29d2:	df 91       	pop	r29
    29d4:	cf 91       	pop	r28
    29d6:	08 95       	ret

000029d8 <free>:
    29d8:	cf 93       	push	r28
    29da:	df 93       	push	r29
    29dc:	00 97       	sbiw	r24, 0x00	; 0
    29de:	09 f4       	brne	.+2      	; 0x29e2 <free+0xa>
    29e0:	87 c0       	rjmp	.+270    	; 0x2af0 <free+0x118>
    29e2:	fc 01       	movw	r30, r24
    29e4:	32 97       	sbiw	r30, 0x02	; 2
    29e6:	13 82       	std	Z+3, r1	; 0x03
    29e8:	12 82       	std	Z+2, r1	; 0x02
    29ea:	c0 91 02 09 	lds	r28, 0x0902
    29ee:	d0 91 03 09 	lds	r29, 0x0903
    29f2:	20 97       	sbiw	r28, 0x00	; 0
    29f4:	81 f4       	brne	.+32     	; 0x2a16 <free+0x3e>
    29f6:	20 81       	ld	r18, Z
    29f8:	31 81       	ldd	r19, Z+1	; 0x01
    29fa:	28 0f       	add	r18, r24
    29fc:	39 1f       	adc	r19, r25
    29fe:	80 91 00 09 	lds	r24, 0x0900
    2a02:	90 91 01 09 	lds	r25, 0x0901
    2a06:	82 17       	cp	r24, r18
    2a08:	93 07       	cpc	r25, r19
    2a0a:	79 f5       	brne	.+94     	; 0x2a6a <free+0x92>
    2a0c:	f0 93 01 09 	sts	0x0901, r31
    2a10:	e0 93 00 09 	sts	0x0900, r30
    2a14:	6d c0       	rjmp	.+218    	; 0x2af0 <free+0x118>
    2a16:	de 01       	movw	r26, r28
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	ae 17       	cp	r26, r30
    2a1e:	bf 07       	cpc	r27, r31
    2a20:	50 f4       	brcc	.+20     	; 0x2a36 <free+0x5e>
    2a22:	12 96       	adiw	r26, 0x02	; 2
    2a24:	4d 91       	ld	r20, X+
    2a26:	5c 91       	ld	r21, X
    2a28:	13 97       	sbiw	r26, 0x03	; 3
    2a2a:	9d 01       	movw	r18, r26
    2a2c:	41 15       	cp	r20, r1
    2a2e:	51 05       	cpc	r21, r1
    2a30:	09 f1       	breq	.+66     	; 0x2a74 <free+0x9c>
    2a32:	da 01       	movw	r26, r20
    2a34:	f3 cf       	rjmp	.-26     	; 0x2a1c <free+0x44>
    2a36:	b3 83       	std	Z+3, r27	; 0x03
    2a38:	a2 83       	std	Z+2, r26	; 0x02
    2a3a:	40 81       	ld	r20, Z
    2a3c:	51 81       	ldd	r21, Z+1	; 0x01
    2a3e:	84 0f       	add	r24, r20
    2a40:	95 1f       	adc	r25, r21
    2a42:	8a 17       	cp	r24, r26
    2a44:	9b 07       	cpc	r25, r27
    2a46:	71 f4       	brne	.+28     	; 0x2a64 <free+0x8c>
    2a48:	8d 91       	ld	r24, X+
    2a4a:	9c 91       	ld	r25, X
    2a4c:	11 97       	sbiw	r26, 0x01	; 1
    2a4e:	84 0f       	add	r24, r20
    2a50:	95 1f       	adc	r25, r21
    2a52:	02 96       	adiw	r24, 0x02	; 2
    2a54:	91 83       	std	Z+1, r25	; 0x01
    2a56:	80 83       	st	Z, r24
    2a58:	12 96       	adiw	r26, 0x02	; 2
    2a5a:	8d 91       	ld	r24, X+
    2a5c:	9c 91       	ld	r25, X
    2a5e:	13 97       	sbiw	r26, 0x03	; 3
    2a60:	93 83       	std	Z+3, r25	; 0x03
    2a62:	82 83       	std	Z+2, r24	; 0x02
    2a64:	21 15       	cp	r18, r1
    2a66:	31 05       	cpc	r19, r1
    2a68:	29 f4       	brne	.+10     	; 0x2a74 <free+0x9c>
    2a6a:	f0 93 03 09 	sts	0x0903, r31
    2a6e:	e0 93 02 09 	sts	0x0902, r30
    2a72:	3e c0       	rjmp	.+124    	; 0x2af0 <free+0x118>
    2a74:	d9 01       	movw	r26, r18
    2a76:	13 96       	adiw	r26, 0x03	; 3
    2a78:	fc 93       	st	X, r31
    2a7a:	ee 93       	st	-X, r30
    2a7c:	12 97       	sbiw	r26, 0x02	; 2
    2a7e:	4d 91       	ld	r20, X+
    2a80:	5d 91       	ld	r21, X+
    2a82:	a4 0f       	add	r26, r20
    2a84:	b5 1f       	adc	r27, r21
    2a86:	ea 17       	cp	r30, r26
    2a88:	fb 07       	cpc	r31, r27
    2a8a:	79 f4       	brne	.+30     	; 0x2aaa <free+0xd2>
    2a8c:	80 81       	ld	r24, Z
    2a8e:	91 81       	ldd	r25, Z+1	; 0x01
    2a90:	84 0f       	add	r24, r20
    2a92:	95 1f       	adc	r25, r21
    2a94:	02 96       	adiw	r24, 0x02	; 2
    2a96:	d9 01       	movw	r26, r18
    2a98:	11 96       	adiw	r26, 0x01	; 1
    2a9a:	9c 93       	st	X, r25
    2a9c:	8e 93       	st	-X, r24
    2a9e:	82 81       	ldd	r24, Z+2	; 0x02
    2aa0:	93 81       	ldd	r25, Z+3	; 0x03
    2aa2:	13 96       	adiw	r26, 0x03	; 3
    2aa4:	9c 93       	st	X, r25
    2aa6:	8e 93       	st	-X, r24
    2aa8:	12 97       	sbiw	r26, 0x02	; 2
    2aaa:	e0 e0       	ldi	r30, 0x00	; 0
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab0:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab2:	00 97       	sbiw	r24, 0x00	; 0
    2ab4:	19 f0       	breq	.+6      	; 0x2abc <free+0xe4>
    2ab6:	fe 01       	movw	r30, r28
    2ab8:	ec 01       	movw	r28, r24
    2aba:	f9 cf       	rjmp	.-14     	; 0x2aae <free+0xd6>
    2abc:	ce 01       	movw	r24, r28
    2abe:	02 96       	adiw	r24, 0x02	; 2
    2ac0:	28 81       	ld	r18, Y
    2ac2:	39 81       	ldd	r19, Y+1	; 0x01
    2ac4:	82 0f       	add	r24, r18
    2ac6:	93 1f       	adc	r25, r19
    2ac8:	20 91 00 09 	lds	r18, 0x0900
    2acc:	30 91 01 09 	lds	r19, 0x0901
    2ad0:	28 17       	cp	r18, r24
    2ad2:	39 07       	cpc	r19, r25
    2ad4:	69 f4       	brne	.+26     	; 0x2af0 <free+0x118>
    2ad6:	30 97       	sbiw	r30, 0x00	; 0
    2ad8:	29 f4       	brne	.+10     	; 0x2ae4 <free+0x10c>
    2ada:	10 92 03 09 	sts	0x0903, r1
    2ade:	10 92 02 09 	sts	0x0902, r1
    2ae2:	02 c0       	rjmp	.+4      	; 0x2ae8 <free+0x110>
    2ae4:	13 82       	std	Z+3, r1	; 0x03
    2ae6:	12 82       	std	Z+2, r1	; 0x02
    2ae8:	d0 93 01 09 	sts	0x0901, r29
    2aec:	c0 93 00 09 	sts	0x0900, r28
    2af0:	df 91       	pop	r29
    2af2:	cf 91       	pop	r28
    2af4:	08 95       	ret

00002af6 <__ftoa_engine>:
    2af6:	28 30       	cpi	r18, 0x08	; 8
    2af8:	08 f0       	brcs	.+2      	; 0x2afc <__ftoa_engine+0x6>
    2afa:	27 e0       	ldi	r18, 0x07	; 7
    2afc:	33 27       	eor	r19, r19
    2afe:	da 01       	movw	r26, r20
    2b00:	99 0f       	add	r25, r25
    2b02:	31 1d       	adc	r19, r1
    2b04:	87 fd       	sbrc	r24, 7
    2b06:	91 60       	ori	r25, 0x01	; 1
    2b08:	00 96       	adiw	r24, 0x00	; 0
    2b0a:	61 05       	cpc	r22, r1
    2b0c:	71 05       	cpc	r23, r1
    2b0e:	39 f4       	brne	.+14     	; 0x2b1e <__ftoa_engine+0x28>
    2b10:	32 60       	ori	r19, 0x02	; 2
    2b12:	2e 5f       	subi	r18, 0xFE	; 254
    2b14:	3d 93       	st	X+, r19
    2b16:	30 e3       	ldi	r19, 0x30	; 48
    2b18:	2a 95       	dec	r18
    2b1a:	e1 f7       	brne	.-8      	; 0x2b14 <__ftoa_engine+0x1e>
    2b1c:	08 95       	ret
    2b1e:	9f 3f       	cpi	r25, 0xFF	; 255
    2b20:	30 f0       	brcs	.+12     	; 0x2b2e <__ftoa_engine+0x38>
    2b22:	80 38       	cpi	r24, 0x80	; 128
    2b24:	71 05       	cpc	r23, r1
    2b26:	61 05       	cpc	r22, r1
    2b28:	09 f0       	breq	.+2      	; 0x2b2c <__ftoa_engine+0x36>
    2b2a:	3c 5f       	subi	r19, 0xFC	; 252
    2b2c:	3c 5f       	subi	r19, 0xFC	; 252
    2b2e:	3d 93       	st	X+, r19
    2b30:	91 30       	cpi	r25, 0x01	; 1
    2b32:	08 f0       	brcs	.+2      	; 0x2b36 <__ftoa_engine+0x40>
    2b34:	80 68       	ori	r24, 0x80	; 128
    2b36:	91 1d       	adc	r25, r1
    2b38:	df 93       	push	r29
    2b3a:	cf 93       	push	r28
    2b3c:	1f 93       	push	r17
    2b3e:	0f 93       	push	r16
    2b40:	ff 92       	push	r15
    2b42:	ef 92       	push	r14
    2b44:	19 2f       	mov	r17, r25
    2b46:	98 7f       	andi	r25, 0xF8	; 248
    2b48:	96 95       	lsr	r25
    2b4a:	e9 2f       	mov	r30, r25
    2b4c:	96 95       	lsr	r25
    2b4e:	96 95       	lsr	r25
    2b50:	e9 0f       	add	r30, r25
    2b52:	ff 27       	eor	r31, r31
    2b54:	ea 56       	subi	r30, 0x6A	; 106
    2b56:	fe 4f       	sbci	r31, 0xFE	; 254
    2b58:	99 27       	eor	r25, r25
    2b5a:	33 27       	eor	r19, r19
    2b5c:	ee 24       	eor	r14, r14
    2b5e:	ff 24       	eor	r15, r15
    2b60:	a7 01       	movw	r20, r14
    2b62:	e7 01       	movw	r28, r14
    2b64:	05 90       	lpm	r0, Z+
    2b66:	08 94       	sec
    2b68:	07 94       	ror	r0
    2b6a:	28 f4       	brcc	.+10     	; 0x2b76 <__ftoa_engine+0x80>
    2b6c:	36 0f       	add	r19, r22
    2b6e:	e7 1e       	adc	r14, r23
    2b70:	f8 1e       	adc	r15, r24
    2b72:	49 1f       	adc	r20, r25
    2b74:	51 1d       	adc	r21, r1
    2b76:	66 0f       	add	r22, r22
    2b78:	77 1f       	adc	r23, r23
    2b7a:	88 1f       	adc	r24, r24
    2b7c:	99 1f       	adc	r25, r25
    2b7e:	06 94       	lsr	r0
    2b80:	a1 f7       	brne	.-24     	; 0x2b6a <__ftoa_engine+0x74>
    2b82:	05 90       	lpm	r0, Z+
    2b84:	07 94       	ror	r0
    2b86:	28 f4       	brcc	.+10     	; 0x2b92 <__ftoa_engine+0x9c>
    2b88:	e7 0e       	add	r14, r23
    2b8a:	f8 1e       	adc	r15, r24
    2b8c:	49 1f       	adc	r20, r25
    2b8e:	56 1f       	adc	r21, r22
    2b90:	c1 1d       	adc	r28, r1
    2b92:	77 0f       	add	r23, r23
    2b94:	88 1f       	adc	r24, r24
    2b96:	99 1f       	adc	r25, r25
    2b98:	66 1f       	adc	r22, r22
    2b9a:	06 94       	lsr	r0
    2b9c:	a1 f7       	brne	.-24     	; 0x2b86 <__ftoa_engine+0x90>
    2b9e:	05 90       	lpm	r0, Z+
    2ba0:	07 94       	ror	r0
    2ba2:	28 f4       	brcc	.+10     	; 0x2bae <__ftoa_engine+0xb8>
    2ba4:	f8 0e       	add	r15, r24
    2ba6:	49 1f       	adc	r20, r25
    2ba8:	56 1f       	adc	r21, r22
    2baa:	c7 1f       	adc	r28, r23
    2bac:	d1 1d       	adc	r29, r1
    2bae:	88 0f       	add	r24, r24
    2bb0:	99 1f       	adc	r25, r25
    2bb2:	66 1f       	adc	r22, r22
    2bb4:	77 1f       	adc	r23, r23
    2bb6:	06 94       	lsr	r0
    2bb8:	a1 f7       	brne	.-24     	; 0x2ba2 <__ftoa_engine+0xac>
    2bba:	05 90       	lpm	r0, Z+
    2bbc:	07 94       	ror	r0
    2bbe:	20 f4       	brcc	.+8      	; 0x2bc8 <__ftoa_engine+0xd2>
    2bc0:	49 0f       	add	r20, r25
    2bc2:	56 1f       	adc	r21, r22
    2bc4:	c7 1f       	adc	r28, r23
    2bc6:	d8 1f       	adc	r29, r24
    2bc8:	99 0f       	add	r25, r25
    2bca:	66 1f       	adc	r22, r22
    2bcc:	77 1f       	adc	r23, r23
    2bce:	88 1f       	adc	r24, r24
    2bd0:	06 94       	lsr	r0
    2bd2:	a9 f7       	brne	.-22     	; 0x2bbe <__ftoa_engine+0xc8>
    2bd4:	84 91       	lpm	r24, Z
    2bd6:	10 95       	com	r17
    2bd8:	17 70       	andi	r17, 0x07	; 7
    2bda:	41 f0       	breq	.+16     	; 0x2bec <__ftoa_engine+0xf6>
    2bdc:	d6 95       	lsr	r29
    2bde:	c7 95       	ror	r28
    2be0:	57 95       	ror	r21
    2be2:	47 95       	ror	r20
    2be4:	f7 94       	ror	r15
    2be6:	e7 94       	ror	r14
    2be8:	1a 95       	dec	r17
    2bea:	c1 f7       	brne	.-16     	; 0x2bdc <__ftoa_engine+0xe6>
    2bec:	ec e3       	ldi	r30, 0x3C	; 60
    2bee:	f1 e0       	ldi	r31, 0x01	; 1
    2bf0:	68 94       	set
    2bf2:	15 90       	lpm	r1, Z+
    2bf4:	15 91       	lpm	r17, Z+
    2bf6:	35 91       	lpm	r19, Z+
    2bf8:	65 91       	lpm	r22, Z+
    2bfa:	95 91       	lpm	r25, Z+
    2bfc:	05 90       	lpm	r0, Z+
    2bfe:	7f e2       	ldi	r23, 0x2F	; 47
    2c00:	73 95       	inc	r23
    2c02:	e1 18       	sub	r14, r1
    2c04:	f1 0a       	sbc	r15, r17
    2c06:	43 0b       	sbc	r20, r19
    2c08:	56 0b       	sbc	r21, r22
    2c0a:	c9 0b       	sbc	r28, r25
    2c0c:	d0 09       	sbc	r29, r0
    2c0e:	c0 f7       	brcc	.-16     	; 0x2c00 <__ftoa_engine+0x10a>
    2c10:	e1 0c       	add	r14, r1
    2c12:	f1 1e       	adc	r15, r17
    2c14:	43 1f       	adc	r20, r19
    2c16:	56 1f       	adc	r21, r22
    2c18:	c9 1f       	adc	r28, r25
    2c1a:	d0 1d       	adc	r29, r0
    2c1c:	7e f4       	brtc	.+30     	; 0x2c3c <__ftoa_engine+0x146>
    2c1e:	70 33       	cpi	r23, 0x30	; 48
    2c20:	11 f4       	brne	.+4      	; 0x2c26 <__ftoa_engine+0x130>
    2c22:	8a 95       	dec	r24
    2c24:	e6 cf       	rjmp	.-52     	; 0x2bf2 <__ftoa_engine+0xfc>
    2c26:	e8 94       	clt
    2c28:	01 50       	subi	r16, 0x01	; 1
    2c2a:	30 f0       	brcs	.+12     	; 0x2c38 <__ftoa_engine+0x142>
    2c2c:	08 0f       	add	r16, r24
    2c2e:	0a f4       	brpl	.+2      	; 0x2c32 <__ftoa_engine+0x13c>
    2c30:	00 27       	eor	r16, r16
    2c32:	02 17       	cp	r16, r18
    2c34:	08 f4       	brcc	.+2      	; 0x2c38 <__ftoa_engine+0x142>
    2c36:	20 2f       	mov	r18, r16
    2c38:	23 95       	inc	r18
    2c3a:	02 2f       	mov	r16, r18
    2c3c:	7a 33       	cpi	r23, 0x3A	; 58
    2c3e:	28 f0       	brcs	.+10     	; 0x2c4a <__ftoa_engine+0x154>
    2c40:	79 e3       	ldi	r23, 0x39	; 57
    2c42:	7d 93       	st	X+, r23
    2c44:	2a 95       	dec	r18
    2c46:	e9 f7       	brne	.-6      	; 0x2c42 <__ftoa_engine+0x14c>
    2c48:	10 c0       	rjmp	.+32     	; 0x2c6a <__ftoa_engine+0x174>
    2c4a:	7d 93       	st	X+, r23
    2c4c:	2a 95       	dec	r18
    2c4e:	89 f6       	brne	.-94     	; 0x2bf2 <__ftoa_engine+0xfc>
    2c50:	06 94       	lsr	r0
    2c52:	97 95       	ror	r25
    2c54:	67 95       	ror	r22
    2c56:	37 95       	ror	r19
    2c58:	17 95       	ror	r17
    2c5a:	17 94       	ror	r1
    2c5c:	e1 18       	sub	r14, r1
    2c5e:	f1 0a       	sbc	r15, r17
    2c60:	43 0b       	sbc	r20, r19
    2c62:	56 0b       	sbc	r21, r22
    2c64:	c9 0b       	sbc	r28, r25
    2c66:	d0 09       	sbc	r29, r0
    2c68:	98 f0       	brcs	.+38     	; 0x2c90 <__ftoa_engine+0x19a>
    2c6a:	23 95       	inc	r18
    2c6c:	7e 91       	ld	r23, -X
    2c6e:	73 95       	inc	r23
    2c70:	7a 33       	cpi	r23, 0x3A	; 58
    2c72:	08 f0       	brcs	.+2      	; 0x2c76 <__ftoa_engine+0x180>
    2c74:	70 e3       	ldi	r23, 0x30	; 48
    2c76:	7c 93       	st	X, r23
    2c78:	20 13       	cpse	r18, r16
    2c7a:	b8 f7       	brcc	.-18     	; 0x2c6a <__ftoa_engine+0x174>
    2c7c:	7e 91       	ld	r23, -X
    2c7e:	70 61       	ori	r23, 0x10	; 16
    2c80:	7d 93       	st	X+, r23
    2c82:	30 f0       	brcs	.+12     	; 0x2c90 <__ftoa_engine+0x19a>
    2c84:	83 95       	inc	r24
    2c86:	71 e3       	ldi	r23, 0x31	; 49
    2c88:	7d 93       	st	X+, r23
    2c8a:	70 e3       	ldi	r23, 0x30	; 48
    2c8c:	2a 95       	dec	r18
    2c8e:	e1 f7       	brne	.-8      	; 0x2c88 <__ftoa_engine+0x192>
    2c90:	11 24       	eor	r1, r1
    2c92:	ef 90       	pop	r14
    2c94:	ff 90       	pop	r15
    2c96:	0f 91       	pop	r16
    2c98:	1f 91       	pop	r17
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	99 27       	eor	r25, r25
    2ca0:	87 fd       	sbrc	r24, 7
    2ca2:	90 95       	com	r25
    2ca4:	08 95       	ret

00002ca6 <strnlen_P>:
    2ca6:	fc 01       	movw	r30, r24
    2ca8:	05 90       	lpm	r0, Z+
    2caa:	61 50       	subi	r22, 0x01	; 1
    2cac:	70 40       	sbci	r23, 0x00	; 0
    2cae:	01 10       	cpse	r0, r1
    2cb0:	d8 f7       	brcc	.-10     	; 0x2ca8 <strnlen_P+0x2>
    2cb2:	80 95       	com	r24
    2cb4:	90 95       	com	r25
    2cb6:	8e 0f       	add	r24, r30
    2cb8:	9f 1f       	adc	r25, r31
    2cba:	08 95       	ret

00002cbc <strnlen>:
    2cbc:	fc 01       	movw	r30, r24
    2cbe:	61 50       	subi	r22, 0x01	; 1
    2cc0:	70 40       	sbci	r23, 0x00	; 0
    2cc2:	01 90       	ld	r0, Z+
    2cc4:	01 10       	cpse	r0, r1
    2cc6:	d8 f7       	brcc	.-10     	; 0x2cbe <strnlen+0x2>
    2cc8:	80 95       	com	r24
    2cca:	90 95       	com	r25
    2ccc:	8e 0f       	add	r24, r30
    2cce:	9f 1f       	adc	r25, r31
    2cd0:	08 95       	ret

00002cd2 <fputc>:
    2cd2:	0f 93       	push	r16
    2cd4:	1f 93       	push	r17
    2cd6:	cf 93       	push	r28
    2cd8:	df 93       	push	r29
    2cda:	18 2f       	mov	r17, r24
    2cdc:	09 2f       	mov	r16, r25
    2cde:	eb 01       	movw	r28, r22
    2ce0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ce2:	81 fd       	sbrc	r24, 1
    2ce4:	03 c0       	rjmp	.+6      	; 0x2cec <fputc+0x1a>
    2ce6:	8f ef       	ldi	r24, 0xFF	; 255
    2ce8:	9f ef       	ldi	r25, 0xFF	; 255
    2cea:	20 c0       	rjmp	.+64     	; 0x2d2c <fputc+0x5a>
    2cec:	82 ff       	sbrs	r24, 2
    2cee:	10 c0       	rjmp	.+32     	; 0x2d10 <fputc+0x3e>
    2cf0:	4e 81       	ldd	r20, Y+6	; 0x06
    2cf2:	5f 81       	ldd	r21, Y+7	; 0x07
    2cf4:	2c 81       	ldd	r18, Y+4	; 0x04
    2cf6:	3d 81       	ldd	r19, Y+5	; 0x05
    2cf8:	42 17       	cp	r20, r18
    2cfa:	53 07       	cpc	r21, r19
    2cfc:	7c f4       	brge	.+30     	; 0x2d1c <fputc+0x4a>
    2cfe:	e8 81       	ld	r30, Y
    2d00:	f9 81       	ldd	r31, Y+1	; 0x01
    2d02:	9f 01       	movw	r18, r30
    2d04:	2f 5f       	subi	r18, 0xFF	; 255
    2d06:	3f 4f       	sbci	r19, 0xFF	; 255
    2d08:	39 83       	std	Y+1, r19	; 0x01
    2d0a:	28 83       	st	Y, r18
    2d0c:	10 83       	st	Z, r17
    2d0e:	06 c0       	rjmp	.+12     	; 0x2d1c <fputc+0x4a>
    2d10:	e8 85       	ldd	r30, Y+8	; 0x08
    2d12:	f9 85       	ldd	r31, Y+9	; 0x09
    2d14:	81 2f       	mov	r24, r17
    2d16:	09 95       	icall
    2d18:	89 2b       	or	r24, r25
    2d1a:	29 f7       	brne	.-54     	; 0x2ce6 <fputc+0x14>
    2d1c:	2e 81       	ldd	r18, Y+6	; 0x06
    2d1e:	3f 81       	ldd	r19, Y+7	; 0x07
    2d20:	2f 5f       	subi	r18, 0xFF	; 255
    2d22:	3f 4f       	sbci	r19, 0xFF	; 255
    2d24:	3f 83       	std	Y+7, r19	; 0x07
    2d26:	2e 83       	std	Y+6, r18	; 0x06
    2d28:	81 2f       	mov	r24, r17
    2d2a:	90 2f       	mov	r25, r16
    2d2c:	df 91       	pop	r29
    2d2e:	cf 91       	pop	r28
    2d30:	1f 91       	pop	r17
    2d32:	0f 91       	pop	r16
    2d34:	08 95       	ret

00002d36 <printf>:
    2d36:	a0 e0       	ldi	r26, 0x00	; 0
    2d38:	b0 e0       	ldi	r27, 0x00	; 0
    2d3a:	e1 ea       	ldi	r30, 0xA1	; 161
    2d3c:	f6 e1       	ldi	r31, 0x16	; 22
    2d3e:	0c 94 2d 14 	jmp	0x285a	; 0x285a <__prologue_saves__+0x20>
    2d42:	fe 01       	movw	r30, r28
    2d44:	35 96       	adiw	r30, 0x05	; 5
    2d46:	61 91       	ld	r22, Z+
    2d48:	71 91       	ld	r23, Z+
    2d4a:	af 01       	movw	r20, r30
    2d4c:	80 91 06 09 	lds	r24, 0x0906
    2d50:	90 91 07 09 	lds	r25, 0x0907
    2d54:	0e 94 80 10 	call	0x2100	; 0x2100 <vfprintf>
    2d58:	e2 e0       	ldi	r30, 0x02	; 2
    2d5a:	0c 94 49 14 	jmp	0x2892	; 0x2892 <__epilogue_restores__+0x20>

00002d5e <puts>:
    2d5e:	0f 93       	push	r16
    2d60:	1f 93       	push	r17
    2d62:	cf 93       	push	r28
    2d64:	df 93       	push	r29
    2d66:	e0 91 06 09 	lds	r30, 0x0906
    2d6a:	f0 91 07 09 	lds	r31, 0x0907
    2d6e:	23 81       	ldd	r18, Z+3	; 0x03
    2d70:	21 ff       	sbrs	r18, 1
    2d72:	1b c0       	rjmp	.+54     	; 0x2daa <puts+0x4c>
    2d74:	ec 01       	movw	r28, r24
    2d76:	00 e0       	ldi	r16, 0x00	; 0
    2d78:	10 e0       	ldi	r17, 0x00	; 0
    2d7a:	89 91       	ld	r24, Y+
    2d7c:	60 91 06 09 	lds	r22, 0x0906
    2d80:	70 91 07 09 	lds	r23, 0x0907
    2d84:	db 01       	movw	r26, r22
    2d86:	18 96       	adiw	r26, 0x08	; 8
    2d88:	ed 91       	ld	r30, X+
    2d8a:	fc 91       	ld	r31, X
    2d8c:	19 97       	sbiw	r26, 0x09	; 9
    2d8e:	88 23       	and	r24, r24
    2d90:	31 f0       	breq	.+12     	; 0x2d9e <puts+0x40>
    2d92:	09 95       	icall
    2d94:	89 2b       	or	r24, r25
    2d96:	89 f3       	breq	.-30     	; 0x2d7a <puts+0x1c>
    2d98:	0f ef       	ldi	r16, 0xFF	; 255
    2d9a:	1f ef       	ldi	r17, 0xFF	; 255
    2d9c:	ee cf       	rjmp	.-36     	; 0x2d7a <puts+0x1c>
    2d9e:	8a e0       	ldi	r24, 0x0A	; 10
    2da0:	09 95       	icall
    2da2:	89 2b       	or	r24, r25
    2da4:	11 f4       	brne	.+4      	; 0x2daa <puts+0x4c>
    2da6:	c8 01       	movw	r24, r16
    2da8:	02 c0       	rjmp	.+4      	; 0x2dae <puts+0x50>
    2daa:	8f ef       	ldi	r24, 0xFF	; 255
    2dac:	9f ef       	ldi	r25, 0xFF	; 255
    2dae:	df 91       	pop	r29
    2db0:	cf 91       	pop	r28
    2db2:	1f 91       	pop	r17
    2db4:	0f 91       	pop	r16
    2db6:	08 95       	ret

00002db8 <__ultoa_invert>:
    2db8:	fa 01       	movw	r30, r20
    2dba:	aa 27       	eor	r26, r26
    2dbc:	28 30       	cpi	r18, 0x08	; 8
    2dbe:	51 f1       	breq	.+84     	; 0x2e14 <__ultoa_invert+0x5c>
    2dc0:	20 31       	cpi	r18, 0x10	; 16
    2dc2:	81 f1       	breq	.+96     	; 0x2e24 <__ultoa_invert+0x6c>
    2dc4:	e8 94       	clt
    2dc6:	6f 93       	push	r22
    2dc8:	6e 7f       	andi	r22, 0xFE	; 254
    2dca:	6e 5f       	subi	r22, 0xFE	; 254
    2dcc:	7f 4f       	sbci	r23, 0xFF	; 255
    2dce:	8f 4f       	sbci	r24, 0xFF	; 255
    2dd0:	9f 4f       	sbci	r25, 0xFF	; 255
    2dd2:	af 4f       	sbci	r26, 0xFF	; 255
    2dd4:	b1 e0       	ldi	r27, 0x01	; 1
    2dd6:	3e d0       	rcall	.+124    	; 0x2e54 <__ultoa_invert+0x9c>
    2dd8:	b4 e0       	ldi	r27, 0x04	; 4
    2dda:	3c d0       	rcall	.+120    	; 0x2e54 <__ultoa_invert+0x9c>
    2ddc:	67 0f       	add	r22, r23
    2dde:	78 1f       	adc	r23, r24
    2de0:	89 1f       	adc	r24, r25
    2de2:	9a 1f       	adc	r25, r26
    2de4:	a1 1d       	adc	r26, r1
    2de6:	68 0f       	add	r22, r24
    2de8:	79 1f       	adc	r23, r25
    2dea:	8a 1f       	adc	r24, r26
    2dec:	91 1d       	adc	r25, r1
    2dee:	a1 1d       	adc	r26, r1
    2df0:	6a 0f       	add	r22, r26
    2df2:	71 1d       	adc	r23, r1
    2df4:	81 1d       	adc	r24, r1
    2df6:	91 1d       	adc	r25, r1
    2df8:	a1 1d       	adc	r26, r1
    2dfa:	20 d0       	rcall	.+64     	; 0x2e3c <__ultoa_invert+0x84>
    2dfc:	09 f4       	brne	.+2      	; 0x2e00 <__ultoa_invert+0x48>
    2dfe:	68 94       	set
    2e00:	3f 91       	pop	r19
    2e02:	2a e0       	ldi	r18, 0x0A	; 10
    2e04:	26 9f       	mul	r18, r22
    2e06:	11 24       	eor	r1, r1
    2e08:	30 19       	sub	r19, r0
    2e0a:	30 5d       	subi	r19, 0xD0	; 208
    2e0c:	31 93       	st	Z+, r19
    2e0e:	de f6       	brtc	.-74     	; 0x2dc6 <__ultoa_invert+0xe>
    2e10:	cf 01       	movw	r24, r30
    2e12:	08 95       	ret
    2e14:	46 2f       	mov	r20, r22
    2e16:	47 70       	andi	r20, 0x07	; 7
    2e18:	40 5d       	subi	r20, 0xD0	; 208
    2e1a:	41 93       	st	Z+, r20
    2e1c:	b3 e0       	ldi	r27, 0x03	; 3
    2e1e:	0f d0       	rcall	.+30     	; 0x2e3e <__ultoa_invert+0x86>
    2e20:	c9 f7       	brne	.-14     	; 0x2e14 <__ultoa_invert+0x5c>
    2e22:	f6 cf       	rjmp	.-20     	; 0x2e10 <__ultoa_invert+0x58>
    2e24:	46 2f       	mov	r20, r22
    2e26:	4f 70       	andi	r20, 0x0F	; 15
    2e28:	40 5d       	subi	r20, 0xD0	; 208
    2e2a:	4a 33       	cpi	r20, 0x3A	; 58
    2e2c:	18 f0       	brcs	.+6      	; 0x2e34 <__ultoa_invert+0x7c>
    2e2e:	49 5d       	subi	r20, 0xD9	; 217
    2e30:	31 fd       	sbrc	r19, 1
    2e32:	40 52       	subi	r20, 0x20	; 32
    2e34:	41 93       	st	Z+, r20
    2e36:	02 d0       	rcall	.+4      	; 0x2e3c <__ultoa_invert+0x84>
    2e38:	a9 f7       	brne	.-22     	; 0x2e24 <__ultoa_invert+0x6c>
    2e3a:	ea cf       	rjmp	.-44     	; 0x2e10 <__ultoa_invert+0x58>
    2e3c:	b4 e0       	ldi	r27, 0x04	; 4
    2e3e:	a6 95       	lsr	r26
    2e40:	97 95       	ror	r25
    2e42:	87 95       	ror	r24
    2e44:	77 95       	ror	r23
    2e46:	67 95       	ror	r22
    2e48:	ba 95       	dec	r27
    2e4a:	c9 f7       	brne	.-14     	; 0x2e3e <__ultoa_invert+0x86>
    2e4c:	00 97       	sbiw	r24, 0x00	; 0
    2e4e:	61 05       	cpc	r22, r1
    2e50:	71 05       	cpc	r23, r1
    2e52:	08 95       	ret
    2e54:	9b 01       	movw	r18, r22
    2e56:	ac 01       	movw	r20, r24
    2e58:	0a 2e       	mov	r0, r26
    2e5a:	06 94       	lsr	r0
    2e5c:	57 95       	ror	r21
    2e5e:	47 95       	ror	r20
    2e60:	37 95       	ror	r19
    2e62:	27 95       	ror	r18
    2e64:	ba 95       	dec	r27
    2e66:	c9 f7       	brne	.-14     	; 0x2e5a <__ultoa_invert+0xa2>
    2e68:	62 0f       	add	r22, r18
    2e6a:	73 1f       	adc	r23, r19
    2e6c:	84 1f       	adc	r24, r20
    2e6e:	95 1f       	adc	r25, r21
    2e70:	a0 1d       	adc	r26, r0
    2e72:	08 95       	ret

00002e74 <_exit>:
    2e74:	f8 94       	cli

00002e76 <__stop_program>:
    2e76:	ff cf       	rjmp	.-2      	; 0x2e76 <__stop_program>
